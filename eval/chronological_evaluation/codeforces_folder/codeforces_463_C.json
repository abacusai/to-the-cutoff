[
    {
        "name": "Gargari and Bishops",
        "description": "Gargari is jealous that his friend Caisa won the game from the previous\nproblem. He wants to prove that he is a genius. He has a n \u00d7 n chessboard.\nEach cell of the chessboard has a number written on it. Gargari wants to place\ntwo bishops on the chessboard in such a way that there is no cell that is\nattacked by both of them. Consider a cell with number x written on it, if this\ncell is attacked by one of the bishops Gargari will get x dollars for it. Tell\nGargari, how to place bishops on the chessboard to get maximum amount of\nmoney. We assume a cell is attacked by a bishop, if the cell is located on the\nsame diagonal with the bishop (the cell, where the bishop is, also considered\nattacked by it). Input The first line contains a single integer n (2 \u2264 n \u2264\n2000). Each of the next n lines contains n integers aij (0 \u2264 aij \u2264 10^9) \u2014\ndescription of the chessboard. Output On the first line print the maximal\nnumber of dollars Gargari will get. On the next line print four integers: x1,\ny1, x2, y2 (1 \u2264 x1, y1, x2, y2 \u2264 n), where xi is the number of the row where\nthe i-th bishop should be placed, yi is the number of the column where the\ni-th bishop should be placed. Consider rows are numbered from 1 to n from top\nto bottom, and columns are numbered from 1 to n from left to right. If there\nare several optimal solutions, you can print any of them. Examples Input 4 1 1\n1 1 2 1 1 0 1 1 1 0 1 0 0 1 Output 12 2 2 3 2\n\n",
        "cf_contest_id": 463,
        "cf_index": "C",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "hashing",
            "implementation"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 1 1 1\r\n2 1 1 0\r\n1 1 1 0\r\n1 0 0 1\r\n",
                "12\r\n3 2 2 2"
            ]
        ],
        "private_cases": [
            [
                "10\r\n48 43 75 80 32 30 65 31 18 91\r\n99 5 12 43 26 90 54 91 4 88\r\n8 87 68 95 73 37 53 46 53 90\r\n50 1 85 24 32 16 5 48 98 74\r\n38 49 78 2 91 3 43 96 93 46\r\n35 100 84 2 94 56 90 98 54 43\r\n88 3 95 72 78 78 87 82 25 37\r\n8 15 85 85 68 27 40 10 22 84\r\n7 8 36 90 10 81 98 51 79 51\r\n93 66 53 39 89 30 16 27 63 93\r\n",
                "2242\r\n7 6 6 6"
            ],
            [
                "10\r\n0 0 0 0 0 0 0 0 0 0\r\n0 0 0 0 0 0 0 0 0 0\r\n0 0 0 0 0 0 0 0 0 0\r\n0 0 0 0 0 0 0 0 0 0\r\n0 0 0 0 0 0 0 0 0 0\r\n0 0 0 0 0 0 0 0 0 0\r\n0 0 0 0 0 0 0 0 0 0\r\n0 0 0 0 0 0 0 0 0 0\r\n0 0 0 0 0 0 0 0 0 0\r\n0 0 0 0 0 0 0 0 0 0\r\n",
                "0\r\n1 2 1 1"
            ],
            [
                "15\r\n2 6 9 4 8 9 10 10 3 8 8 4 4 8 7\r\n10 9 2 6 8 10 5 2 8 4 9 6 9 10 10\r\n3 1 5 1 6 5 1 6 4 4 3 3 9 8 10\r\n5 7 10 6 4 9 6 8 1 5 4 9 10 4 8\r\n9 6 10 5 8 6 9 9 3 4 4 7 6 2 4\r\n8 6 10 7 3 3 8 10 3 8 4 8 8 3 1\r\n7 3 6 8 8 5 5 8 3 7 2 6 3 9 7\r\n6 8 4 7 7 7 10 4 6 4 3 10 1 10 2\r\n1 6 7 8 3 4 2 8 1 7 4 4 4 9 5\r\n3 4 4 6 1 10 2 2 5 8 7 7 7 7 6\r\n10 9 3 6 8 6 1 9 5 4 7 10 7 1 8\r\n3 3 4 9 8 6 10 2 9 5 9 5 3 7 3\r\n1 8 1 3 4 8 10 4 8 4 7 5 4 6 7\r\n3 10 9 6 8 8 1 8 9 9 4 9 5 6 5\r\n7 6 3 9 9 8 6 10 3 6 4 2 10 9 7\r\n",
                "361\r\n9 8 7 9"
            ],
            [
                "8\r\n3 6 9 2 2 1 4 2\r\n1 4 10 1 1 10 1 4\r\n3 8 9 1 8 4 4 4\r\n5 8 10 5 5 6 4 7\r\n3 2 10 6 5 3 8 5\r\n6 7 5 8 8 5 4 2\r\n4 4 3 1 8 8 5 4\r\n5 6 8 9 3 1 8 5\r\n",
                "159\r\n5 4 4 4"
            ],
            [
                "13\r\n9 9 3 3 5 6 8 2 6 1 10 3 8\r\n10 4 9 2 10 3 5 10 10 7 10 7 3\r\n5 8 4 1 10 2 1 2 4 7 9 1 10\r\n6 3 10 10 10 1 3 10 4 4 2 10 4\r\n1 7 5 7 9 9 7 4 1 8 5 4 1\r\n10 10 9 2 2 6 4 1 5 5 1 9 4\r\n4 2 5 5 7 8 1 2 6 1 2 4 6\r\n5 1 10 8 1 1 9 1 2 10 6 7 2\r\n2 1 2 10 4 7 4 1 4 10 10 4 3\r\n7 7 5 1 2 1 1 4 8 2 4 8 2\r\n8 8 8 4 1 1 7 3 1 10 1 4 2\r\n4 5 1 10 8 8 8 4 10 9 4 10 4\r\n3 1 10 10 5 7 9 4 2 10 4 8 4\r\n",
                "280\r\n7 6 6 6"
            ],
            [
                "9\r\n3 9 6 1 7 6 2 8 4\r\n5 4 1 1 7 2 7 4 10\r\n7 9 9 4 6 2 7 2 8\r\n5 7 7 4 9 5 9 1 3\r\n7 3 10 2 9 4 2 1 2\r\n5 8 7 4 6 6 2 2 3\r\n4 8 4 3 4 2 1 8 10\r\n5 8 2 8 4 4 7 5 4\r\n2 8 7 4 3 6 10 8 1\r\n",
                "181\r\n5 4 6 4"
            ]
        ]
    }
]