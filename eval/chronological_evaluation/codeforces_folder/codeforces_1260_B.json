[
    {
        "name": "Obtain Two Zeroes",
        "description": "You are given two integers \n    a\n and \n    b\n. You may perform any number of\noperations on them (possibly zero). During each operation you should choose\nany positive integer \n    x\n and set \n    a := a - x\n, \n    b := b - 2x\n or\n\n    a := a - 2x\n, \n    b := b - x\n. Note that you may choose different values\nof \n    x\n in different operations. Is it possible to make \n    a\n and \n    b\n\nequal to \n    0\n simultaneously? Your program should answer \n    t\n\nindependent test cases. Input The first line contains one integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test cases. Then the test cases\nfollow, each test case is represented by one line containing two integers\n\n    a\n and \n    b\n for this test case (\n    0 \n    \u2264 a, b \n    \u2264 10^9\n). Output\nFor each test case print the answer to it \u2014 YES if it is possible to make\n\n    a\n and \n    b\n equal to \n    0\n simultaneously, and NO otherwise. You may\nprint every letter in any case you want (so, for example, the strings yEs,\nyes, Yes and YES will all be recognized as positive answer). Example Input 3 6\n9 1 1 1 2 Output YES NO YES Note In the first test case of the example two\noperations can be used to make both \n    a\n and \n    b\n equal to zero: choose\n\n    x = 4\n and set \n    a := a - x\n, \n    b := b - 2x\n. Then \n    a = 6 - 4 =\n    2\n, \n    b = 9 - 8 = 1\n; choose \n    x = 1\n and set \n    a := a - 2x\n, \n    b\n    := b - x\n. Then \n    a = 2 - 2 = 0\n, \n    b = 1 - 1 = 0\n.\n\n",
        "cf_contest_id": 1260,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n6 9\r\n1 1\r\n1 2\r\n",
                "YES\r\nNO \r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n69 69\r\n",
                "YES\r\n"
            ]
        ]
    }
]