[
    {
        "name": "Putting Boxes Together",
        "description": "There is an infinite line consisting of cells. There are \n    n\n boxes in some\ncells of this line. The \n    i\n-th box stands in the cell \n    a_i\n and has\nweight \n    w_i\n. All \n    a_i\n are distinct, moreover, \n    a_i - 1 < a_i\n\nholds for all valid \n    i\n. You would like to put together some boxes.\nPutting together boxes with indices in the segment \n    [l, r]\n means that you\nwill move some of them in such a way that their positions will form some\nsegment \n    [x, x + (r - l)]\n. In one step you can move any box to a\nneighboring cell if it isn't occupied by another box (i.e. you can choose\n\n    i\n and change \n    a_i\n by \n    1\n, all positions should remain\ndistinct). You spend \n    w_i\n units of energy moving the box \n    i\n by one\ncell. You can move any box any number of times, in arbitrary order. Sometimes\nweights of some boxes change, so you have queries of two types: \n    id\n\n\n    nw\n \u2014 weight \n    w_id\n of the box \n    id\n becomes \n    nw\n. \n    l\n\n\n    r\n \u2014 you should compute the minimum total energy needed to put together\nboxes with indices in \n    [l, r]\n. Since the answer can be rather big, print\nthe remainder it gives when divided by \n    1000\n     000\n     007 = 10^9 + 7\n.\nNote that the boxes are not moved during the query, you only should compute\nthe answer. Note that you should minimize the answer, not its remainder modulo\n\n    10^9 + 7\n. So if you have two possible answers \n    2 \n    \u00b7 10^9 + 13\n\nand \n    2 \n    \u00b7 10^9 + 14\n, you should choose the first one and print\n\n    10^9 + 6\n, even though the remainder of the second answer is \n    0\n.\nInput The first line contains two integers \n    n\n and \n    q\n (\n    1 \n    \u2264 n,\n    q \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of boxes and the number of queries.\nThe second line contains \n    n\n integers \n    a_1, a_2, \n    \u2026 a_n\n (\n    1\n    \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the positions of the boxes. All \n    a_i\n are\ndistinct, \n    a_i - 1 < a_i\n holds for all valid \n    i\n. The third line\ncontains \n    n\n integers \n    w_1, w_2, \n    \u2026 w_n\n (\n    1 \n    \u2264 w_i \n    \u2264\n    10^9\n) \u2014 the initial weights of the boxes. Next \n    q\n lines describe\nqueries, one query per line. Each query is described in a single line,\ncontaining two integers \n    x\n and \n    y\n. If \n    x < 0\n, then this query\nis of the first type, where \n    id = -x\n, \n    nw = y\n (\n    1 \n    \u2264 id \n    \u2264\n    n\n, \n    1 \n    \u2264 nw \n    \u2264 10^9\n). If \n    x > 0\n, then the query is of the\nsecond type, where \n    l = x\n and \n    r = y\n (\n    1 \n    \u2264 l_j \n    \u2264 r_j \n    \u2264\n    n\n). \n    x\n can not be equal to \n    0\n. Output For each query of the\nsecond type print the answer on a separate line. Since answer can be large,\nprint the remainder it gives when divided by \n    1000\n     000\n     007 = 10^9 +\n    7\n. Example Input 5 8 1 2 6 7 10 1 1 1 1 2 1 1 1 5 1 3 3 5 -3 5 -1 10 1 4 2\n5 Output 0 10 3 4 18 7 Note Let's go through queries of the example: \n    1\n    1\n \u2014 there is only one box so we don't need to move anything. \n    1\n     5\n \u2014\nwe can move boxes to segment \n    [4, 8]\n: \n    1 \n    \u00b7 |1 - 4| + 1 \n    \u00b7 |2\n    - 5| + 1 \n    \u00b7 |6 - 6| + 1 \n    \u00b7 |7 - 7| + 2 \n    \u00b7 |10 - 8| = 10\n.\n\n    1\n     3\n \u2014 we can move boxes to segment \n    [1, 3]\n. \n    3\n     5\n \u2014 we\ncan move boxes to segment \n    [7, 9]\n. \n    -3\n     5\n \u2014 \n    w_3\n is changed\nfrom \n    1\n to \n    5\n. \n    -1\n     10\n \u2014 \n    w_1\n is changed from \n    1\n to\n\n    10\n. The weights are now equal to \n    w = [10, 1, 5, 1, 2]\n. \n    1\n    4\n \u2014 we can move boxes to segment \n    [1, 4]\n. \n    2\n     5\n \u2014 we can move\nboxes to segment \n    [5, 8]\n.\n\n",
        "cf_contest_id": 1030,
        "cf_index": "F",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 2.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 8\r\n1 2 6 7 10\r\n1 1 1 1 2\r\n1 1\r\n1 5\r\n1 3\r\n3 5\r\n-3 5\r\n-1 10\r\n1 4\r\n2 5\r\n",
                "0\r\n10\r\n3\r\n4\r\n18\r\n7\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 3\r\n351772224 464078370 812738126\r\n149252109 153315732 540915058\r\n1 2\r\n-3 861733588\r\n-1 190898187\r\n",
                "877576309\r\n"
            ],
            [
                "2 3\r\n1 3\r\n1 3\r\n1 2\r\n-1 3\r\n1 2\r\n",
                "1\r\n3\r\n"
            ],
            [
                "1 1\r\n1\r\n1\r\n1 1\r\n",
                "0\r\n"
            ],
            [
                "4 10\r\n1 333333333 666666666 1000000000\r\n1000000000 1000000000 1000000000 1000000000\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n2 2\r\n2 3\r\n2 4\r\n3 3\r\n3 4\r\n4 4\r\n",
                "0\r\n666666704\r\n333333394\r\n666666774\r\n0\r\n666666697\r\n333333380\r\n0\r\n666666690\r\n0\r\n"
            ],
            [
                "10 10\r\n4 5 6 7 8 11 14 15 17 19\r\n1 4 12 10 13 20 14 20 13 16\r\n-7 16\r\n1 1\r\n7 9\r\n1 4\r\n4 8\r\n3 8\r\n-1 10\r\n2 4\r\n-9 1\r\n5 9\r\n",
                "0\r\n13\r\n0\r\n118\r\n142\r\n0\r\n93\r\n"
            ],
            [
                "10 10\r\n4 6 8 9 10 14 16 21 27 30\r\n24 27 3 14 3 24 6 12 15 28\r\n-4 6\r\n4 10\r\n-2 30\r\n-9 25\r\n1 8\r\n1 3\r\n2 9\r\n-3 16\r\n-2 24\r\n1 10\r\n",
                "487\r\n270\r\n27\r\n472\r\n943\r\n"
            ]
        ]
    }
]