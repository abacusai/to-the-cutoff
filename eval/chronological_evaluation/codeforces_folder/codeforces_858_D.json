[
    {
        "name": "Polycarp's phone book",
        "description": "There are n phone numbers in Polycarp's contacts on his phone. Each number is\na 9-digit integer, starting with a digit different from 0. All the numbers are\ndistinct. There is the latest version of Berdroid OS installed on Polycarp's\nphone. If some number is entered, is shows up all the numbers in the contacts\nfor which there is a substring equal to the entered sequence of digits. For\nexample, is there are three phone numbers in Polycarp's contacts: 123456789,\n100000000 and 100123456, then: if he enters 00 two numbers will show up:\n100000000 and 100123456, if he enters 123 two numbers will show up 123456789\nand 100123456, if he enters 01 there will be only one number 100123456. For\neach of the phone numbers in Polycarp's contacts, find the minimum in length\nsequence of digits such that if Polycarp enters this sequence, Berdroid shows\nthis only phone number. Input The first line contains single integer n (1 \u2264 n\n\u2264 70000) \u2014 the total number of phone contacts in Polycarp's contacts. The\nphone numbers follow, one in each line. Each number is a positive 9-digit\ninteger starting with a digit from 1 to 9. All the numbers are distinct.\nOutput Print exactly n lines: the i-th of them should contain the shortest\nnon-empty sequence of digits, such that if Polycarp enters it, the Berdroid OS\nshows up only the i-th number from the contacts. If there are several such\nsequences, print any of them. Examples Input 3 123456789 100000000 100123456\nOutput 9 000 01 Input 4 123456789 193456789 134567819 934567891 Output 2 193\n81 91\n\n",
        "cf_contest_id": 858,
        "cf_index": "D",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n123456789\r\n100000000\r\n100123456\r\n",
                "7\r\n000\r\n01\r\n"
            ],
            [
                "4\r\n123456789\r\n193456789\r\n134567819\r\n934567891\r\n",
                "2\r\n193\r\n13\r\n91\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n167038488\r\n",
                "1\r\n"
            ],
            [
                "5\r\n115830748\r\n403459907\r\n556271610\r\n430358099\r\n413961410\r\n",
                "11\r\n40\r\n2\r\n43\r\n41\r\n"
            ],
            [
                "5\r\n139127034\r\n452751056\r\n193432721\r\n894001929\r\n426470953\r\n",
                "13\r\n45\r\n93\r\n8\r\n42\r\n"
            ],
            [
                "5\r\n343216531\r\n914073407\r\n420246472\r\n855857272\r\n801664978\r\n",
                "43\r\n91\r\n42\r\n85\r\n80\r\n"
            ],
            [
                "5\r\n567323818\r\n353474649\r\n468171032\r\n989223926\r\n685081078\r\n",
                "56\r\n35\r\n17\r\n98\r\n85\r\n"
            ],
            [
                "5\r\n774610315\r\n325796798\r\n989859836\r\n707706423\r\n310546337\r\n",
                "74\r\n32\r\n89\r\n70\r\n05\r\n"
            ],
            [
                "10\r\n181033039\r\n210698534\r\n971006898\r\n391227170\r\n323096464\r\n560766866\r\n377374442\r\n654389922\r\n544146403\r\n779261493\r\n",
                "18\r\n21\r\n97\r\n91\r\n32\r\n56\r\n37\r\n65\r\n41\r\n79\r\n"
            ],
            [
                "10\r\n197120216\r\n680990683\r\n319631438\r\n442393410\r\n888300189\r\n170777450\r\n164487872\r\n487350759\r\n651751346\r\n652859411\r\n",
                "97\r\n68\r\n31\r\n42\r\n88\r\n70\r\n64\r\n73\r\n51\r\n52\r\n"
            ],
            [
                "10\r\n302417715\r\n621211824\r\n474451896\r\n961495400\r\n633841010\r\n839982537\r\n797812119\r\n510708100\r\n770758643\r\n228046084\r\n",
                "30\r\n62\r\n47\r\n61\r\n63\r\n83\r\n79\r\n510\r\n75\r\n22\r\n"
            ],
            [
                "10\r\n506504092\r\n561611075\r\n265260859\r\n557114891\r\n838578824\r\n985006846\r\n456984731\r\n856424964\r\n658005674\r\n666280709\r\n",
                "04\r\n61\r\n26\r\n55\r\n83\r\n68\r\n45\r\n64\r\n58\r\n66\r\n"
            ],
            [
                "10\r\n510613599\r\n931933224\r\n693094490\r\n508960931\r\n313762868\r\n396027639\r\n164098962\r\n749880019\r\n709024305\r\n498545812\r\n",
                "51\r\n33\r\n69\r\n50\r\n37\r\n39\r\n16\r\n74\r\n70\r\n85\r\n"
            ],
            [
                "3\r\n638631659\r\n929648227\r\n848163730\r\n",
                "5\r\n2\r\n0\r\n"
            ],
            [
                "4\r\n898855826\r\n343430636\r\n210120107\r\n467957087\r\n",
                "89\r\n3\r\n1\r\n46\r\n"
            ],
            [
                "5\r\n202080398\r\n357502772\r\n269676952\r\n711559315\r\n111366203\r\n",
                "8\r\n35\r\n26\r\n71\r\n13\r\n"
            ],
            [
                "9\r\n111111111\r\n111111110\r\n111111100\r\n111111000\r\n111110000\r\n111100000\r\n111000000\r\n110000000\r\n100000000\r\n",
                "111111111\r\n111111110\r\n111111100\r\n111111000\r\n111110000\r\n111100000\r\n111000000\r\n110000000\r\n00000000\r\n"
            ]
        ]
    }
]