[
    {
        "name": "Brackets",
        "description": "A two dimensional array is called a bracket array if each grid contains one of\nthe two possible brackets \u2014 \"(\" or \")\". A path through the two dimensional\narray cells is called monotonous if any two consecutive cells in the path are\nside-adjacent and each cell of the path is located below or to the right from\nthe previous one. A two dimensional array whose size equals n \u00d7 m is called a\ncorrect bracket array, if any string formed by writing out the brackets on\nsome monotonous way from cell (1, 1) to cell (n, m) forms a correct bracket\nsequence. Let's define the operation of comparing two correct bracket arrays\nof equal size (a and b) like that. Let's consider a given two dimensional\narray of priorities (c) \u2014 a two dimensional array of same size, containing\ndifferent integers from 1 to nm. Let's find such position (i, j) in the two\ndimensional array, that ai, j \u2260 bi, j. If there are several such positions,\nlet's choose the one where number ci, j is minimum. If ai, j = \"(\", then a <\nb, otherwise a > b. If the position (i, j) is not found, then the arrays are\nconsidered equal. Your task is to find a k-th two dimensional correct bracket\narray. It is guaranteed that for the given sizes of n and m there will be no\nless than k two dimensional correct bracket arrays. Input The first line\ncontains integers n, m and k \u2014 the sizes of the array and the number of the\nsought correct bracket array (1 \u2264 n, m \u2264 100, 1 \u2264 k \u2264 10^18). Then an array of\npriorities is given, n lines each containing m numbers, number pi, j shows the\npriority of character j in line i (1 \u2264 pi, j \u2264 nm, all pi, j are different).\nPlease do not use the \n\u0421++. It is preferred to use the cin, cout streams or the \nOutput Print the k-th two dimensional correct bracket array. Examples Input 1\n2 1 1 2 Output () Input 2 3 1 1 2 3 4 5 6 Output (() ()) Input 3 2 2 3 6 1 4 2\n5 Output () )( () Note In the first sample exists only one correct two-\ndimensional bracket array. In the second and in the third samples two arrays\nexist. A bracket sequence is called regular if it is possible to obtain\ncorrect arithmetic expression by inserting characters \u00ab+\u00bb and \u00ab1\u00bb into this\nsequence. For example, sequences \u00ab(())()\u00bb, \u00ab()\u00bb and \u00ab(()(()))\u00bb are regular,\nwhile \u00ab)(\u00bb, \u00ab(()\u00bb and \u00ab(()))(\u00bb are not.\n\n",
        "cf_contest_id": 123,
        "cf_index": "C",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "dp",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1 2 1\r\n1 2\r\n",
                "()\r\n"
            ],
            [
                "2 3 1\r\n1 2 3\r\n4 5 6\r\n",
                "(()\r\n())\r\n"
            ],
            [
                "3 2 2\r\n3 6\r\n1 4\r\n2 5\r\n",
                "()\r\n)(\r\n()\r\n"
            ]
        ],
        "private_cases": [
            [
                "4 3 1\r\n1 4 6\r\n10 12 2\r\n7 8 5\r\n3 11 9\r\n",
                "(()\r\n()(\r\n)()\r\n())\r\n"
            ],
            [
                "4 3 1\r\n2 3 11\r\n4 10 5\r\n8 12 9\r\n7 1 6\r\n",
                "(()\r\n())\r\n))(\r\n)()\r\n"
            ],
            [
                "3 4 2\r\n3 10 12 2\r\n7 9 4 11\r\n8 5 6 1\r\n",
                "()((\r\n)(()\r\n(())\r\n"
            ],
            [
                "3 4 2\r\n5 8 12 10\r\n7 3 11 1\r\n4 9 2 6\r\n",
                "(())\r\n())(\r\n))()\r\n"
            ],
            [
                "4 3 4\r\n2 8 3\r\n12 6 7\r\n9 11 1\r\n10 4 5\r\n",
                "(((\r\n(()\r\n())\r\n)))\r\n"
            ],
            [
                "4 5 14\r\n3 10 5 6 17\r\n18 20 9 15 16\r\n8 7 19 13 4\r\n14 11 2 12 1\r\n",
                "(()((\r\n()(()\r\n)(())\r\n(()))\r\n"
            ],
            [
                "5 4 12\r\n10 9 4 19\r\n8 17 16 12\r\n13 14 7 15\r\n11 6 20 2\r\n5 18 1 3\r\n",
                "(()(\r\n()((\r\n)(()\r\n(())\r\n()))\r\n"
            ],
            [
                "5 4 1\r\n13 6 4 2\r\n17 9 8 15\r\n14 1 19 11\r\n7 10 20 3\r\n18 16 12 5\r\n",
                "()((\r\n)(()\r\n(())\r\n())(\r\n))()\r\n"
            ],
            [
                "6 5 8\r\n7 17 4 16 14\r\n2 9 15 11 22\r\n3 28 20 24 8\r\n23 18 29 10 27\r\n12 19 6 25 30\r\n21 13 26 5 1\r\n",
                "((())\r\n(()))\r\n()))(\r\n)))((\r\n))(()\r\n)(())\r\n"
            ],
            [
                "5 6 3\r\n5 4 18 3 27 26\r\n16 29 22 10 20 9\r\n23 1 19 17 6 12\r\n8 30 25 14 21 13\r\n15 11 2 24 28 7\r\n",
                "(()())\r\n()())(\r\n)())((\r\n())(()\r\n))(())\r\n"
            ],
            [
                "5 6 35\r\n17 4 6 19 25 2\r\n16 13 22 29 23 12\r\n9 27 20 21 11 10\r\n3 15 14 5 30 26\r\n7 18 8 24 28 1\r\n",
                "((()))\r\n(()))(\r\n()))((\r\n)))(()\r\n))(())\r\n"
            ],
            [
                "6 3 2\r\n2 12 14\r\n5 7 1\r\n18 11 10\r\n13 16 3\r\n17 6 8\r\n4 15 9\r\n",
                "()(\r\n)((\r\n(()\r\n()(\r\n)()\r\n())\r\n"
            ],
            [
                "6 7 41\r\n15 42 34 40 7 17 20\r\n25 11 8 6 3 27 5\r\n33 12 41 32 24 9 36\r\n26 35 2 29 14 23 31\r\n4 16 19 22 37 18 30\r\n1 39 28 21 13 38 10\r\n",
                "(()()((\r\n()()(((\r\n)()((()\r\n()((())\r\n)((()))\r\n((())))\r\n"
            ],
            [
                "8 7 206\r\n16 1 53 40 43 54 52\r\n30 23 27 8 5 47 35\r\n37 19 33 44 56 22 32\r\n31 55 3 51 39 13 15\r\n25 4 50 38 12 34 20\r\n10 48 36 26 21 45 41\r\n46 28 9 24 17 7 42\r\n6 29 18 11 14 49 2\r\n",
                "(()())(\r\n()())((\r\n)())(((\r\n())((()\r\n))((()(\r\n)((()()\r\n((()())\r\n(()()))\r\n"
            ],
            [
                "7 8 429\r\n3 27 38 30 54 20 31 16\r\n12 28 5 52 32 26 39 47\r\n49 9 56 23 36 53 35 46\r\n4 51 34 21 44 45 19 1\r\n55 50 24 37 29 14 6 40\r\n43 25 17 41 42 13 10 8\r\n18 22 33 15 48 11 7 2\r\n",
                "()()((((\r\n)()(((((\r\n()((((()\r\n)((((())\r\n((((()))\r\n(((())))\r\n((()))))\r\n"
            ],
            [
                "7 8 313\r\n1 44 8 39 54 6 35 29\r\n37 12 50 34 9 25 48 21\r\n7 42 56 3 16 31 53 40\r\n38 24 2 55 19 47 28 45\r\n43 5 14 17 46 26 32 20\r\n15 23 52 4 33 22 30 36\r\n18 51 49 10 11 41 27 13\r\n",
                "(()(())(\r\n()(())((\r\n)(())(((\r\n(())((()\r\n())((())\r\n))((()))\r\n)((())))\r\n"
            ],
            [
                "8 9 124\r\n15 5 45 72 66 14 20 17 47\r\n12 53 71 56 32 19 11 42 27\r\n63 69 21 23 6 18 33 43 1\r\n70 34 24 68 10 37 60 65 44\r\n41 61 9 51 48 39 3 54 31\r\n22 13 46 38 26 58 49 62 30\r\n29 16 28 67 7 36 55 59 50\r\n64 35 40 4 52 57 8 25 2\r\n",
                "((()((())\r\n(()((()))\r\n()((()))(\r\n)((()))()\r\n((()))())\r\n(()))()))\r\n()))()))(\r\n)))()))()\r\n"
            ],
            [
                "10 9 2353\r\n9 29 1 30 70 25 90 44 2\r\n34 15 48 79 53 87 61 20 32\r\n4 62 64 26 69 66 18 57 43\r\n10 65 88 82 37 19 86 84 42\r\n59 33 68 36 28 24 40 51 60\r\n46 55 45 5 11 27 74 6 76\r\n77 49 8 89 73 41 39 72 58\r\n54 14 67 17 85 71 80 75 31\r\n38 78 13 63 52 47 83 16 7\r\n23 22 35 12 3 81 21 50 56\r\n",
                "((())()()\r\n(())()()(\r\n())()()()\r\n))()()()(\r\n)()()()()\r\n()()()()(\r\n)()()()((\r\n()()()(()\r\n)()()(())\r\n()()(()))\r\n"
            ],
            [
                "7 10 1\r\n14 29 33 8 1 70 49 62 54 44\r\n46 12 20 2 61 26 56 69 48 31\r\n16 13 3 65 27 59 68 10 40 18\r\n15 4 53 25 47 42 36 17 37 34\r\n5 64 38 55 45 60 30 35 6 22\r\n66 32 67 50 51 9 57 19 21 11\r\n39 52 43 58 23 7 63 24 28 41\r\n",
                "()((()()))\r\n)((()()))(\r\n((()()))((\r\n(()()))(((\r\n()()))((()\r\n)()))((())\r\n()))((()))\r\n"
            ],
            [
                "8 11 2907\r\n50 85 1 30 20 70 4 69 35 10 23\r\n43 15 8 37 77 26 82 48 76 32 46\r\n2 79 87 63 14 74 61 12 38 56 17\r\n86 88 66 7 60 36 19 54 41 59 84\r\n27 39 5 40 58 18 33 29 83 45 44\r\n53 3 55 64 11 34 28 22 42 16 72\r\n9 75 67 24 49 6 25 81 13 62 71\r\n80 51 73 57 52 47 78 21 68 65 31\r\n",
                "((((()))())\r\n(((()))()))\r\n((()))()))(\r\n(()))()))()\r\n()))()))()(\r\n)))()))()((\r\n))()))()(()\r\n)()))()(())\r\n"
            ],
            [
                "11 12 11192\r\n12 74 114 18 59 103 33 47 23 93 69 45\r\n8 108 4 113 92 49 68 118 119 122 95 94\r\n115 24 26 48 34 50 62 117 112 61 11 100\r\n5 85 84 67 60 39 125 63 127 13 35 32\r\n36 76 25 99 46 107 89 80 79 38 73 131\r\n82 111 65 71 124 58 30 31 126 10 37 53\r\n28 54 109 88 77 106 55 42 21 75 66 83\r\n57 20 129 102 90 29 123 22 14 98 7 43\r\n101 121 110 87 81 132 16 9 70 72 44 52\r\n91 64 116 51 128 78 1 27 3 19 40 56\r\n130 96 41 86 6 2 97 17 104 120 105 15\r\n",
                "()((())())((\r\n)((())())(((\r\n((())())((()\r\n(())())((()(\r\n())())((()((\r\n))())((()(()\r\n)())((()(())\r\n())((()(()))\r\n))((()(())))\r\n)((()(())))(\r\n((()(())))()\r\n"
            ],
            [
                "1 16 1272\r\n13 2 3 5 8 10 9 1 6 12 11 4 15 14 16 7\r\n",
                "()((()()))(()())\r\n"
            ],
            [
                "44 1 44490484850\r\n38\r\n33\r\n13\r\n10\r\n43\r\n20\r\n22\r\n15\r\n25\r\n41\r\n21\r\n40\r\n1\r\n7\r\n14\r\n2\r\n26\r\n32\r\n4\r\n3\r\n6\r\n24\r\n23\r\n16\r\n37\r\n28\r\n29\r\n8\r\n27\r\n42\r\n44\r\n12\r\n39\r\n31\r\n36\r\n19\r\n9\r\n11\r\n34\r\n17\r\n35\r\n30\r\n5\r\n18\r\n",
                "(\r\n(\r\n)\r\n(\r\n(\r\n(\r\n)\r\n(\r\n(\r\n(\r\n)\r\n(\r\n(\r\n(\r\n)\r\n)\r\n)\r\n(\r\n(\r\n)\r\n)\r\n)\r\n)\r\n(\r\n)\r\n)\r\n(\r\n)\r\n)\r\n(\r\n)\r\n)\r\n(\r\n(\r\n)\r\n(\r\n(\r\n)\r\n)\r\n(\r\n)\r\n(\r\n)\r\n)\r\n"
            ]
        ]
    }
]