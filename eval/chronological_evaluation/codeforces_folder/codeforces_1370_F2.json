[
    {
        "name": "The Hidden Pair (Hard Version)",
        "description": "Note that the only difference between the easy and hard version is the\nconstraint on the number of queries. You can make hacks only if all versions\nof the problem are solved. This is an interactive problem. You are given a\ntree consisting of \n    n\n nodes numbered with integers from \n    1\n to\n\n    n\n. Ayush and Ashish chose two secret distinct nodes in the tree. You\nneed to find out both the nodes. You can make the following query: Provide a\nlist of nodes and you will receive a node from that list whose sum of\ndistances to both the hidden nodes is minimal (if there are multiple such\nnodes in the list, you will receive any one of them). You will also get the\nsum of distances of that node to the hidden nodes. Recall that a tree is a\nconnected graph without cycles. The distance between two nodes is defined as\nthe number of edges in the simple path between them. More formally, let's\ndefine two hidden nodes as \n    s\n and \n    f\n. In one query you can provide\nthe set of nodes \n    a_1, a_2, \n    \u2026, a_c\n of the tree. As a\nresult, you will get two numbers \n    a_i\n and \n    dist(a_i, s) + dist(a_i,\n    f)\n. The node \n    a_i\n is any node from the provided set, for which the\nnumber \n    dist(a_i, s) + dist(a_i, f)\n is minimal. You can ask no more than\n\n    11\n queries. Input The first line contains a single integer \n    t\n \n    (1\n    \n    \u2264 t \n    \u2264 10)\n \u2014 the number of test cases. Please note, how the\ninteraction process is organized. The first line of each test case consists of\na single integer \n    n\n \n    (2 \n    \u2264 n \n    \u2264 1000)\n \u2014 the number of nodes in\nthe tree. The next \n    n - 1\n lines consist of two integers \n    u\n, \n    v\n\n\n    (1 \n    \u2264 u, v \n    \u2264 n, u \n     v)\n \u2014 the edges of the tree. Interaction\nTo ask a query print a single line: In the beginning print \"? c \" (without\nquotes) where \n    c\n \n    (1 \n    \u2264 c \n    \u2264 n)\n denotes the number of nodes\nbeing queried, followed by \n    c\n distinct integers in the range \n    [1, n]\n\n\u2014 the indices of nodes from the list. For each query, you will receive two\nintegers \n    x\n, \n    d\n \u2014 the node (among the queried nodes) with the\nminimum sum of distances to the hidden nodes and the sum of distances from\nthat node to the hidden nodes. If the subset of nodes queried is invalid or\nyou exceeded the number of queries then you will get \n    x = d = -1\n. In this\ncase, you should terminate the program immediately. When you have guessed the\nhidden nodes, print a single line \"! \" (without quotes), followed by two\nintegers in the range \n    [1, n]\n \u2014 the hidden nodes. You can output the\nhidden nodes in any order. After this, you should read a string. If you guess\nthe nodes correctly, you will receive the string \"Correct\". In this case, you\nshould continue solving the remaining test cases or terminate the program, if\nall test cases were solved. Otherwise, you will receive the string\n\"Incorrect\". In this case, you should terminate the program immediately.\nGuessing the hidden nodes does not count towards the number of queries asked.\nThe interactor is not adaptive. The hidden nodes do not change with queries.\nDo not forget to read the string \"Correct\" / \"Incorrect\" after guessing the\nhidden nodes. You need to solve each test case before receiving the input for\nthe next test case. The limit of \n    11\n queries applies to each test case\nand not to the entire input. After printing a query do not forget to output\nthe end of the line and flush the output. Otherwise, you will get Idleness\nlimit exceeded. To do this, use: fflush(stdout) or cout.flush() in C++;\nSystem.out.flush() in Java; flush(output) in Pascal; stdout.flush() in Python;\nsee the documentation for other languages.Hacks To hack the solution, use the\nfollowing test format: The first line should contain a single integer \n    t\n\n\n    (1 \n    \u2264 t \n    \u2264 10)\n \u2014 the number of test cases. The description of\nthe test cases follows. The first line of each test case should contain a\nsingle integer \n    n\n \n    (2 \n    \u2264 n \n    \u2264 1000)\n \u2014 the number of nodes in\nthe tree. The second line should contain two distinct integers in the range\n\n    [1, n]\n \u2014 the hidden nodes. The next \n    n - 1\n lines should contain two\nintegers \n    u\n, \n    v\n \n    (1 \n    \u2264 u, v \n    \u2264 n, u \n     v)\n \u2014 the edges\nof the tree. Example Input 1 3 1 2 1 3 1 1 2 3 3 1 3 1 Correct Output ? 1 1 ?\n1 2 ? 1 3 ? 2 2 3 ! 1 3 Note The tree from the first test is shown below, and\nthe hidden nodes are \n    1\n and \n    3\n.\n\n",
        "cf_contest_id": 1370,
        "cf_index": "F2",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dfs and similar",
            "graphs",
            "interactive",
            "shortest paths",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n3\r\n1 3\r\n1 2\r\n1 3\r\n",
                "4\r\n1 3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n4\r\n2 4\r\n1 2\r\n2 4\r\n4 3\r\n",
                "4\r\n2 4\r\n"
            ],
            [
                "10\r\n9\r\n2 1\r\n2 8\r\n7 9\r\n4 2\r\n4 3\r\n6 5\r\n1 8\r\n7 6\r\n9 3\r\n3\r\n2 3\r\n1 3\r\n3 2\r\n5\r\n2 1\r\n5 2\r\n1 4\r\n4 2\r\n3 5\r\n4\r\n1 4\r\n2 4\r\n1 4\r\n3 1\r\n7\r\n6 4\r\n4 7\r\n6 4\r\n5 3\r\n3 4\r\n3 2\r\n1 2\r\n8\r\n1 5\r\n6 4\r\n1 3\r\n6 8\r\n5 7\r\n3 7\r\n4 2\r\n2 7\r\n5\r\n4 1\r\n2 4\r\n1 4\r\n3 5\r\n2 5\r\n10\r\n9 6\r\n6 7\r\n2 8\r\n8 9\r\n4 3\r\n1 3\r\n6 10\r\n5 9\r\n10 2\r\n5 4\r\n8\r\n8 7\r\n6 4\r\n7 2\r\n4 1\r\n4 8\r\n5 8\r\n3 7\r\n2 6\r\n8\r\n8 4\r\n2 4\r\n1 8\r\n5 6\r\n5 7\r\n8 2\r\n3 7\r\n7 4\r\n",
                "4\r\n1 2\r\n4\r\n2 3\r\n4\r\n1 2\r\n4\r\n1 4\r\n4\r\n4 6\r\n4\r\n1 5\r\n4\r\n1 4\r\n4\r\n6 9\r\n4\r\n7 8\r\n4\r\n4 8\r\n"
            ],
            [
                "10\r\n3\r\n1 3\r\n1 2\r\n2 3\r\n2\r\n1 2\r\n2 1\r\n10\r\n10 8\r\n6 5\r\n7 8\r\n3 8\r\n6 3\r\n2 10\r\n10 7\r\n9 4\r\n5 9\r\n1 2\r\n8\r\n8 3\r\n6 3\r\n6 8\r\n2 3\r\n4 1\r\n7 2\r\n7 5\r\n4 7\r\n2\r\n2 1\r\n1 2\r\n9\r\n8 1\r\n5 9\r\n1 3\r\n8 7\r\n3 5\r\n8 1\r\n6 4\r\n2 6\r\n4 8\r\n9\r\n9 3\r\n9 6\r\n5 2\r\n8 7\r\n6 3\r\n6 5\r\n7 1\r\n4 8\r\n9 4\r\n2\r\n1 2\r\n1 2\r\n5\r\n2 5\r\n1 2\r\n5 4\r\n5 3\r\n4 2\r\n5\r\n1 2\r\n2 4\r\n5 4\r\n4 1\r\n3 2\r\n",
                "4\r\n1 3\r\n4\r\n1 2\r\n4\r\n8 10\r\n4\r\n3 8\r\n4\r\n1 2\r\n4\r\n1 8\r\n4\r\n3 9\r\n4\r\n1 2\r\n4\r\n2 5\r\n4\r\n1 2\r\n"
            ],
            [
                "10\r\n7\r\n5 6\r\n1 3\r\n5 6\r\n7 5\r\n6 3\r\n5 2\r\n7 4\r\n9\r\n4 5\r\n4 5\r\n5 2\r\n3 7\r\n6 4\r\n8 1\r\n3 2\r\n9 2\r\n7 1\r\n7\r\n4 6\r\n4 5\r\n6 4\r\n2 7\r\n5 3\r\n6 1\r\n3 7\r\n6\r\n2 3\r\n6 2\r\n5 6\r\n6 3\r\n4 1\r\n4 3\r\n7\r\n1 7\r\n4 2\r\n5 3\r\n7 3\r\n1 2\r\n7 2\r\n5 6\r\n4\r\n2 1\r\n3 2\r\n1 4\r\n2 4\r\n3\r\n3 2\r\n3 1\r\n3 2\r\n2\r\n1 2\r\n2 1\r\n10\r\n10 2\r\n10 6\r\n5 9\r\n1 7\r\n8 6\r\n9 7\r\n9 4\r\n4 8\r\n10 3\r\n2 8\r\n2\r\n2 1\r\n2 1\r\n",
                "4\r\n5 6\r\n4\r\n4 5\r\n4\r\n4 6\r\n4\r\n2 3\r\n4\r\n1 7\r\n4\r\n1 2\r\n4\r\n2 3\r\n4\r\n1 2\r\n4\r\n2 10\r\n4\r\n1 2\r\n"
            ],
            [
                "10\r\n7\r\n4 5\r\n3 7\r\n4 6\r\n4 5\r\n1 3\r\n4 2\r\n2 7\r\n4\r\n1 3\r\n2 1\r\n1 4\r\n3 1\r\n2\r\n1 2\r\n2 1\r\n10\r\n9 6\r\n2 3\r\n4 1\r\n8 7\r\n4 8\r\n6 2\r\n8 6\r\n5 9\r\n9 2\r\n5 10\r\n9\r\n9 2\r\n9 6\r\n2 9\r\n2 8\r\n4 2\r\n6 3\r\n9 5\r\n6 1\r\n7 4\r\n4\r\n2 4\r\n2 1\r\n3 4\r\n3 2\r\n3\r\n3 2\r\n2 3\r\n3 1\r\n2\r\n1 2\r\n1 2\r\n10\r\n6 9\r\n6 4\r\n8 5\r\n9 6\r\n6 1\r\n2 3\r\n7 3\r\n7 10\r\n9 2\r\n7 5\r\n3\r\n2 1\r\n1 2\r\n1 3\r\n",
                "4\r\n4 5\r\n4\r\n1 3\r\n4\r\n1 2\r\n4\r\n6 9\r\n4\r\n2 9\r\n4\r\n2 4\r\n4\r\n2 3\r\n4\r\n1 2\r\n4\r\n6 9\r\n4\r\n1 2\r\n"
            ],
            [
                "10\r\n10\r\n6 5\r\n9 7\r\n6 10\r\n8 2\r\n4 10\r\n1 5\r\n6 8\r\n3 10\r\n3 9\r\n2 5\r\n9\r\n3 5\r\n2 4\r\n9 7\r\n2 6\r\n7 3\r\n8 5\r\n9 6\r\n5 4\r\n8 1\r\n7\r\n3 6\r\n3 2\r\n6 2\r\n6 5\r\n1 5\r\n7 4\r\n2 7\r\n3\r\n2 3\r\n3 2\r\n1 3\r\n2\r\n1 2\r\n1 2\r\n4\r\n4 2\r\n1 2\r\n2 3\r\n2 4\r\n3\r\n3 1\r\n1 3\r\n2 3\r\n9\r\n6 2\r\n5 3\r\n2 8\r\n9 5\r\n5 6\r\n4 6\r\n7 4\r\n8 1\r\n2 3\r\n10\r\n9 4\r\n6 9\r\n2 9\r\n4 8\r\n3 1\r\n4 5\r\n10 7\r\n8 2\r\n7 9\r\n3 5\r\n2\r\n2 1\r\n2 1\r\n",
                "4\r\n5 6\r\n4\r\n3 5\r\n4\r\n3 6\r\n4\r\n2 3\r\n4\r\n1 2\r\n4\r\n2 4\r\n4\r\n1 3\r\n4\r\n2 6\r\n4\r\n4 9\r\n4\r\n1 2\r\n"
            ],
            [
                "10\r\n3\r\n3 1\r\n2 3\r\n3 1\r\n6\r\n2 3\r\n2 6\r\n4 1\r\n3 4\r\n6 5\r\n6 3\r\n9\r\n9 5\r\n9 2\r\n4 6\r\n5 8\r\n8 2\r\n4 9\r\n7 3\r\n1 5\r\n9 7\r\n10\r\n3 2\r\n4 1\r\n8 4\r\n3 10\r\n2 10\r\n6 5\r\n3 8\r\n10 7\r\n5 9\r\n5 3\r\n8\r\n2 1\r\n3 2\r\n4 7\r\n5 3\r\n2 6\r\n8 1\r\n8 7\r\n5 4\r\n5\r\n4 2\r\n5 1\r\n3 2\r\n4 2\r\n5 2\r\n10\r\n4 6\r\n4 7\r\n6 7\r\n10 5\r\n8 2\r\n4 3\r\n8 5\r\n2 9\r\n6 1\r\n3 10\r\n9\r\n6 5\r\n1 3\r\n8 9\r\n2 8\r\n8 5\r\n2 3\r\n2 4\r\n7 5\r\n6 9\r\n2\r\n1 2\r\n1 2\r\n6\r\n5 6\r\n2 1\r\n3 6\r\n2 5\r\n6 5\r\n3 4\r\n",
                "4\r\n1 3\r\n4\r\n2 3\r\n4\r\n5 9\r\n4\r\n2 3\r\n5\r\n1 2\r\n4\r\n2 4\r\n4\r\n4 6\r\n4\r\n5 6\r\n4\r\n1 2\r\n4\r\n5 6\r\n"
            ],
            [
                "10\r\n8\r\n3 1\r\n2 8\r\n7 4\r\n4 6\r\n8 1\r\n5 3\r\n6 3\r\n2 5\r\n8\r\n8 7\r\n2 1\r\n3 8\r\n4 2\r\n7 6\r\n5 3\r\n6 5\r\n4 8\r\n9\r\n4 3\r\n8 4\r\n5 7\r\n6 1\r\n3 7\r\n8 3\r\n9 2\r\n4 9\r\n5 6\r\n6\r\n5 4\r\n3 5\r\n2 4\r\n5 1\r\n6 4\r\n2 3\r\n3\r\n3 1\r\n2 1\r\n1 3\r\n2\r\n2 1\r\n2 1\r\n3\r\n1 3\r\n2 3\r\n1 3\r\n4\r\n4 2\r\n2 3\r\n3 1\r\n3 4\r\n9\r\n6 4\r\n4 8\r\n7 4\r\n2 6\r\n3 1\r\n9 8\r\n7 2\r\n5 6\r\n5 3\r\n9\r\n5 9\r\n9 2\r\n6 5\r\n7 2\r\n2 4\r\n3 6\r\n1 5\r\n6 8\r\n3 9\r\n",
                "4\r\n1 3\r\n4\r\n7 8\r\n4\r\n3 4\r\n4\r\n4 5\r\n4\r\n1 3\r\n4\r\n1 2\r\n4\r\n1 3\r\n3\r\n2 4\r\n4\r\n4 6\r\n4\r\n5 9\r\n"
            ],
            [
                "10\r\n8\r\n5 8\r\n4 8\r\n8 2\r\n7 3\r\n7 5\r\n6 5\r\n3 1\r\n5 4\r\n2\r\n2 1\r\n1 2\r\n5\r\n3 2\r\n4 3\r\n5 2\r\n3 5\r\n1 2\r\n9\r\n4 1\r\n6 2\r\n6 9\r\n4 7\r\n3 5\r\n8 5\r\n2 5\r\n9 1\r\n3 7\r\n9\r\n1 6\r\n8 5\r\n6 9\r\n2 3\r\n3 9\r\n4 8\r\n4 9\r\n2 1\r\n6 7\r\n7\r\n2 3\r\n6 5\r\n2 7\r\n5 2\r\n6 4\r\n3 2\r\n4 1\r\n4\r\n2 3\r\n2 3\r\n1 3\r\n2 4\r\n7\r\n4 7\r\n5 4\r\n7 3\r\n5 6\r\n3 6\r\n1 4\r\n2 7\r\n8\r\n8 4\r\n5 1\r\n6 7\r\n2 8\r\n2 4\r\n3 2\r\n3 5\r\n8 6\r\n5\r\n5 4\r\n4 3\r\n1 4\r\n3 5\r\n1 2\r\n",
                "4\r\n5 8\r\n4\r\n1 2\r\n4\r\n2 3\r\n5\r\n1 4\r\n4\r\n1 6\r\n4\r\n2 3\r\n4\r\n2 3\r\n4\r\n4 7\r\n4\r\n4 8\r\n4\r\n4 5\r\n"
            ],
            [
                "10\r\n10\r\n1 6\r\n2 6\r\n7 4\r\n10 1\r\n2 9\r\n7 5\r\n7 9\r\n9 3\r\n8 4\r\n10 5\r\n9\r\n7 9\r\n4 6\r\n2 3\r\n8 7\r\n8 9\r\n1 5\r\n9 6\r\n5 7\r\n7 2\r\n8\r\n3 6\r\n2 7\r\n7 8\r\n3 7\r\n5 4\r\n8 6\r\n5 1\r\n2 4\r\n2\r\n1 2\r\n1 2\r\n10\r\n6 2\r\n4 6\r\n3 6\r\n5 7\r\n7 9\r\n1 9\r\n2 5\r\n10 2\r\n10 4\r\n6 8\r\n3\r\n3 1\r\n3 1\r\n3 2\r\n10\r\n8 1\r\n4 6\r\n5 2\r\n3 9\r\n10 8\r\n4 10\r\n2 9\r\n8 9\r\n7 6\r\n5 1\r\n2\r\n1 2\r\n1 2\r\n3\r\n2 3\r\n2 1\r\n3 2\r\n9\r\n7 4\r\n4 6\r\n3 8\r\n2 1\r\n9 6\r\n3 4\r\n3 7\r\n5 9\r\n2 3\r\n",
                "5\r\n1 6\r\n4\r\n7 9\r\n4\r\n3 6\r\n4\r\n1 2\r\n4\r\n2 6\r\n4\r\n1 3\r\n4\r\n1 8\r\n4\r\n1 2\r\n4\r\n2 3\r\n4\r\n4 7\r\n"
            ],
            [
                "10\r\n3\r\n2 3\r\n2 3\r\n1 3\r\n6\r\n1 4\r\n3 4\r\n2 5\r\n2 1\r\n4 6\r\n2 3\r\n3\r\n3 2\r\n3 2\r\n1 2\r\n2\r\n1 2\r\n2 1\r\n3\r\n2 1\r\n3 1\r\n2 3\r\n2\r\n2 1\r\n2 1\r\n9\r\n5 7\r\n2 5\r\n3 4\r\n9 8\r\n1 5\r\n9 2\r\n8 4\r\n9 6\r\n7 3\r\n6\r\n6 3\r\n3 1\r\n3 2\r\n6 4\r\n6 5\r\n6 2\r\n6\r\n4 3\r\n1 2\r\n5 4\r\n3 5\r\n6 3\r\n6 2\r\n4\r\n4 1\r\n3 2\r\n4 3\r\n4 1\r\n",
                "4\r\n2 3\r\n4\r\n1 4\r\n4\r\n2 3\r\n4\r\n1 2\r\n4\r\n1 2\r\n4\r\n1 2\r\n4\r\n5 7\r\n4\r\n3 6\r\n4\r\n3 4\r\n4\r\n1 4\r\n"
            ],
            [
                "10\r\n4\r\n4 3\r\n3 2\r\n1 2\r\n3 4\r\n7\r\n7 3\r\n7 6\r\n4 3\r\n1 6\r\n2 7\r\n2 5\r\n4 6\r\n7\r\n5 7\r\n4 5\r\n2 4\r\n3 1\r\n6 4\r\n7 4\r\n4 1\r\n7\r\n2 1\r\n3 7\r\n5 3\r\n4 7\r\n6 3\r\n6 2\r\n1 3\r\n7\r\n5 4\r\n3 2\r\n6 4\r\n7 1\r\n5 7\r\n6 2\r\n5 3\r\n9\r\n8 2\r\n9 6\r\n5 9\r\n1 3\r\n3 5\r\n1 7\r\n4 6\r\n2 8\r\n5 2\r\n8\r\n5 6\r\n5 7\r\n6 5\r\n8 7\r\n4 3\r\n4 2\r\n7 4\r\n1 2\r\n8\r\n5 6\r\n8 7\r\n3 6\r\n5 4\r\n8 5\r\n1 4\r\n2 6\r\n7 6\r\n4\r\n1 3\r\n3 4\r\n1 3\r\n4 2\r\n8\r\n6 2\r\n8 3\r\n3 4\r\n7 5\r\n1 7\r\n8 2\r\n6 1\r\n7 4\r\n",
                "4\r\n3 4\r\n4\r\n3 7\r\n4\r\n5 7\r\n4\r\n1 2\r\n4\r\n4 5\r\n4\r\n2 8\r\n4\r\n5 6\r\n4\r\n5 6\r\n4\r\n1 3\r\n4\r\n2 6\r\n"
            ],
            [
                "10\r\n4\r\n2 3\r\n3 4\r\n2 4\r\n4 1\r\n2\r\n2 1\r\n2 1\r\n6\r\n4 3\r\n5 3\r\n6 1\r\n6 4\r\n2 4\r\n5 2\r\n8\r\n1 7\r\n7 3\r\n1 6\r\n8 6\r\n7 4\r\n3 5\r\n6 2\r\n6 5\r\n6\r\n3 5\r\n6 3\r\n2 4\r\n3 1\r\n5 4\r\n6 5\r\n5\r\n1 4\r\n1 4\r\n5 2\r\n3 4\r\n3 2\r\n8\r\n2 5\r\n8 5\r\n4 8\r\n7 2\r\n7 3\r\n5 7\r\n3 6\r\n1 6\r\n3\r\n1 3\r\n1 2\r\n3 1\r\n7\r\n2 4\r\n7 5\r\n3 1\r\n2 4\r\n2 7\r\n2 6\r\n3 6\r\n4\r\n1 2\r\n2 3\r\n1 4\r\n3 4\r\n",
                "3\r\n2 3\r\n4\r\n1 2\r\n4\r\n3 4\r\n4\r\n1 7\r\n4\r\n3 5\r\n4\r\n1 4\r\n4\r\n2 5\r\n4\r\n1 3\r\n4\r\n2 4\r\n4\r\n1 2\r\n"
            ],
            [
                "10\r\n6\r\n1 5\r\n2 5\r\n4 5\r\n1 5\r\n6 5\r\n5 3\r\n10\r\n4 8\r\n10 6\r\n10 8\r\n4 9\r\n2 3\r\n7 8\r\n6 3\r\n1 6\r\n10 5\r\n3 4\r\n3\r\n1 3\r\n2 3\r\n3 1\r\n9\r\n4 6\r\n1 6\r\n8 9\r\n8 7\r\n2 9\r\n9 4\r\n4 3\r\n8 5\r\n3 6\r\n6\r\n6 4\r\n3 5\r\n3 6\r\n1 6\r\n4 6\r\n2 5\r\n6\r\n2 6\r\n6 4\r\n4 3\r\n6 2\r\n1 2\r\n3 5\r\n5\r\n1 2\r\n3 1\r\n5 4\r\n5 2\r\n5 3\r\n10\r\n8 6\r\n2 9\r\n1 8\r\n10 5\r\n7 4\r\n6 3\r\n5 6\r\n2 6\r\n8 3\r\n7 2\r\n6\r\n1 4\r\n4 5\r\n2 5\r\n6 1\r\n3 6\r\n3 5\r\n3\r\n3 2\r\n1 2\r\n3 2\r\n",
                "4\r\n1 5\r\n4\r\n4 8\r\n4\r\n1 3\r\n4\r\n4 6\r\n4\r\n4 6\r\n4\r\n2 6\r\n4\r\n1 2\r\n4\r\n6 8\r\n4\r\n1 4\r\n4\r\n2 3\r\n"
            ],
            [
                "10\r\n9\r\n9 2\r\n1 5\r\n9 3\r\n6 8\r\n3 4\r\n6 3\r\n4 2\r\n9 5\r\n6 7\r\n2\r\n1 2\r\n2 1\r\n7\r\n6 4\r\n4 6\r\n2 1\r\n5 6\r\n3 4\r\n3 7\r\n2 7\r\n7\r\n7 4\r\n4 5\r\n2 1\r\n3 7\r\n2 5\r\n5 3\r\n6 7\r\n9\r\n8 1\r\n5 4\r\n1 6\r\n2 6\r\n6 9\r\n4 7\r\n2 3\r\n4 6\r\n3 8\r\n6\r\n6 2\r\n2 6\r\n5 3\r\n3 1\r\n2 5\r\n2 4\r\n3\r\n1 2\r\n1 3\r\n2 3\r\n2\r\n1 2\r\n2 1\r\n2\r\n2 1\r\n1 2\r\n6\r\n6 1\r\n5 6\r\n4 2\r\n2 3\r\n1 3\r\n5 2\r\n",
                "4\r\n2 9\r\n4\r\n1 2\r\n4\r\n4 6\r\n4\r\n4 7\r\n4\r\n1 8\r\n4\r\n2 6\r\n4\r\n1 2\r\n4\r\n1 2\r\n4\r\n1 2\r\n4\r\n1 6\r\n"
            ],
            [
                "10\r\n5\r\n2 1\r\n2 3\r\n2 5\r\n4 1\r\n4 3\r\n2\r\n2 1\r\n1 2\r\n4\r\n3 4\r\n4 2\r\n1 3\r\n3 4\r\n7\r\n2 3\r\n2 5\r\n5 6\r\n2 3\r\n3 1\r\n7 6\r\n4 7\r\n10\r\n9 6\r\n9 7\r\n6 10\r\n2 8\r\n10 8\r\n5 9\r\n3 10\r\n6 1\r\n4 7\r\n7 2\r\n7\r\n3 1\r\n3 7\r\n7 2\r\n5 4\r\n1 4\r\n2 5\r\n7 6\r\n8\r\n6 5\r\n7 6\r\n3 5\r\n7 2\r\n1 4\r\n8 4\r\n2 8\r\n3 6\r\n2\r\n2 1\r\n1 2\r\n5\r\n3 2\r\n3 2\r\n3 4\r\n5 2\r\n5 1\r\n9\r\n5 6\r\n5 1\r\n7 2\r\n3 8\r\n8 2\r\n3 4\r\n6 5\r\n9 4\r\n8 6\r\n",
                "4\r\n1 2\r\n4\r\n1 2\r\n4\r\n3 4\r\n4\r\n2 3\r\n4\r\n6 9\r\n5\r\n1 3\r\n4\r\n5 6\r\n4\r\n1 2\r\n4\r\n2 3\r\n4\r\n5 6\r\n"
            ]
        ]
    }
]