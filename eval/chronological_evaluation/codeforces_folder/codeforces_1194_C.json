[
    {
        "name": "From S To T",
        "description": "You are given three strings \n    s\n, \n    t\n and \n    p\n consisting of\nlowercase Latin letters. You may perform any number (possibly, zero)\noperations on these strings. During each operation you choose any character\nfrom \n    p\n, erase it from \n    p\n and insert it into string \n    s\n (you may\ninsert this character anywhere you want: in the beginning of \n    s\n, in the\nend or between any two consecutive characters). For example, if \n    p\n is\naba, and \n    s\n is de, then the following outcomes are possible (the\ncharacter we erase from \n    p\n and insert into \n    s\n is highlighted): aba\n\n    \u2192\n ba, de \n    \u2192\n ade; aba \n    \u2192\n\nba, de \n    \u2192\n dae; aba \n    \u2192\n ba, de\n\n    \u2192\n dea; aba \n    \u2192\n aa, de \n    \u2192\n\nbde; aba \n    \u2192\n aa, de \n    \u2192\n dbe; aba\n\n    \u2192\n aa, de \n    \u2192\n deb; aba \n    \u2192\n\nab, de \n    \u2192\n ade; aba \n    \u2192\n ab, de\n\n    \u2192\n dae; aba \n    \u2192\n ab, de \n    \u2192\n\ndea; Your goal is to perform several (maybe zero) operations so that \n    s\n\nbecomes equal to \n    t\n. Please determine whether it is possible. Note that\nyou have to answer \n    q\n independent queries. Input The first line contains\none integer \n    q\n (\n    1 \n    \u2264 q \n    \u2264 100\n) \u2014 the number of queries. Each\nquery is represented by three consecutive lines. The first line of each query\ncontains the string \n    s\n (\n    1 \n    \u2264 |s| \n    \u2264 100\n) consisting of\nlowercase Latin letters. The second line of each query contains the string\n\n    t\n (\n    1 \n    \u2264 |t| \n    \u2264 100\n) consisting of lowercase Latin letters.\nThe third line of each query contains the string \n    p\n (\n    1 \n    \u2264 |p| \n    \u2264\n    100\n) consisting of lowercase Latin letters. Output For each query print YES\nif it is possible to make \n    s\n equal to \n    t\n, and NO otherwise. You may\nprint every letter in any case you want (so, for example, the strings yEs,\nyes, Yes and YES will all be recognized as positive answer). Example Input 4\nab acxb cax a aaaa aaabbcc a aaaa aabbcc ab baaa aaaaa Output YES YES NO NO\nNote In the first test case there is the following sequence of operation: \n    s\n    =\n ab, \n    t =\n acxb, \n    p =\n cax; \n    s =\n acb, \n    t =\n acxb,\n\n    p =\n ax; \n    s =\n acxb, \n    t =\n acxb, \n    p =\n a. In the second\ntest case there is the following sequence of operation: \n    s =\n a, \n    t =\n aaaa, \n    p =\n aaabbcc; \n    s =\n aa, \n    t =\n aaaa, \n    p =\n\naabbcc; \n    s =\n aaa, \n    t =\n aaaa, \n    p =\n abbcc; \n    s =\n aaaa,\n\n    t =\n aaaa, \n    p =\n bbcc.\n\n",
        "cf_contest_id": 1194,
        "cf_index": "C",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\nab\r\nacxb\r\ncax\r\na\r\naaaa\r\naaabbcc\r\na\r\naaaa\r\naabbcc\r\nab\r\nbaaa\r\naaaaa\r\n",
                "YES\r\nYES\r\nNO\r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\naaaaaabbbbbbbbcccccccccccdddd\r\naaaaabbbbbbccccccccddddddddd\r\naaaaabbbbbbbbbcccccccccddddd\r\n",
                "NO\r\n"
            ]
        ]
    }
]