[
    {
        "name": "New Year Concert",
        "description": "New Year is just around the corner, which means that in School 179,\npreparations for the concert are in full swing. There are \n    n\n classes in\nthe school, numbered from \n    1\n to \n    n\n, the \n    i\n-th class has\nprepared a scene of length \n    a_i\n minutes. As the main one responsible for\nholding the concert, Idnar knows that if a concert has \n    k\n scenes of\nlengths \n    b_1\n, \n    b_2\n, \n    \u2026\n, \n    b_k\n minutes, then the\naudience will get bored if there exist two integers \n    l\n and \n    r\n such\nthat \n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 k\n and \n    (b_l, b_l + 1, \n    \u2026,\n    b_r - 1, b_r) = r - l + 1\n, where \n    (b_l, b_l + 1, \n    \u2026, b_r\n    - 1, b_r)\n is equal to the greatest common divisor (GCD) of the numbers\n\n    b_l\n, \n    b_l + 1\n, \n    \u2026\n, \n    b_r - 1\n, \n    b_r\n. To\navoid boring the audience, Idnar can ask any number of times (possibly zero)\nfor the \n    t\n-th class (\n    1 \n    \u2264 t \n    \u2264 k\n) to make a new scene \n    d\n\nminutes in length, where \n    d\n can be any positive integer. Thus, after this\noperation, \n    b_t\n is equal to \n    d\n. Note that \n    t\n and \n    d\n can be\ndifferent for each operation. For a sequence of scene lengths \n    b_1\n,\n\n    b_2\n, \n    \u2026\n, \n    b_k\n, let \n    f(b)\n be the minimum number\nof classes Idnar has to ask to change their scene if he wants to avoid boring\nthe audience. Idnar hasn't decided which scenes will be allowed for the\nconcert, so he wants to know the value of \n    f\n for each non-empty prefix of\n\n    a\n. In other words, Idnar wants to know the values of \n    f(a_1)\n,\n\n    f(a_1\n,\n    a_2)\n, \n    \u2026\n,\n\n    f(a_1\n,\n    a_2\n,\n    \u2026\n,\n    a_n)\n. Input The first line contains\na single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number\nof classes in the school. The second line contains \n    n\n positive integers\n\n    a_1\n, \n    a_2\n, \n    \u2026\n, \n    a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n)\n\u2014 the lengths of the class scenes. Output Print a sequence of \n    n\n integers\nin a single line \u2014 \n    f(a_1)\n, \n    f(a_1\n,\n    a_2)\n, \n    \u2026\n,\n\n    f(a_1\n,\n    a_2\n,\n    \u2026\n,\n    a_n)\n. Examples Input 1 1 Output 1\nInput 3 1 4 2 Output 1 1 2 Input 7 2 12 4 8 18 3 6 Output 0 1 1 1 2 2 2 Note\nIn the first test we can change \n    1\n to \n    2\n, so the answer is \n    1\n.\nIn the second test: \n    [1]\n can be changed into \n    [2]\n, \n    [1, 4]\n can\nbe changed into \n    [3, 4]\n, \n    [1, 4, 2]\n can be changed into \n    [2, 3,\n    2]\n.\n\n",
        "cf_contest_id": 1632,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "greedy",
            "math",
            "number theory",
            "two pointers"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n1\r\n",
                "1 "
            ],
            [
                "3\r\n1 4 2\r\n",
                "1 1 2 "
            ],
            [
                "7\r\n2 12 4 8 18 3 6\r\n",
                "0 1 1 1 2 2 2 "
            ]
        ],
        "private_cases": [
            [
                "30\r\n3 1 3 2 3 1 1 3 2 1 1 3 3 3 3 3 2 1 2 1 3 2 2 1 3 1 3 1 2 3\r\n",
                "0 1 1 1 1 2 3 3 3 4 5 5 5 6 6 6 6 7 7 8 8 8 9 10 10 11 11 12 12 12 "
            ],
            [
                "3\r\n1 1000000000 2\r\n",
                "1 1 2 "
            ]
        ]
    }
]