[
    {
        "name": "Broken BST",
        "description": "Let T be arbitrary binary tree \u2014 tree, every vertex of which has no more than\ntwo children. Given tree is rooted, so there exists only one vertex which\ndoesn't have a parent \u2014 it's the root of a tree. Every vertex has an integer\nnumber written on it. Following algorithm is run on every value from the tree\nT: Set pointer to the root of a tree. Return success if the value in the\ncurrent vertex is equal to the number you are looking for Go to the left child\nof the vertex if the value in the current vertex is greater than the number\nyou are looking for Go to the right child of the vertex if the value in the\ncurrent vertex is less than the number you are looking for Return fail if you\ntry to go to the vertex that doesn't exist Here is the pseudo-code of the\ndescribed algorithm: bool find(TreeNode t, int x)  if (t == null) return\nfalse; if (t.value == x) return true; if (x < t.value) return find(t.left, x);\nelse return find(t.right, x);  find(root, x); The described algorithm works\ncorrectly if the tree is binary search tree (i.e. for each node the values of\nleft subtree are less than the value in the node, the values of right subtree\nare greater than the value in the node). But it can return invalid result if\ntree is not a binary search tree. Since the given tree is not necessarily a\nbinary search tree, not all numbers can be found this way. Your task is to\ncalculate, how many times the search will fail being running on every value\nfrom the tree. If the tree has multiple vertices with the same values on them\nthen you should run algorithm on every one of them separately. Input First\nline contains integer number n (1 \u2264 n \u2264 10^5) \u2014 number of vertices in the\ntree. Each of the next n lines contains 3 numbers v, l, r (0 \u2264 v \u2264 10^9) \u2014\nvalue on current vertex, index of the left child of the vertex and index of\nthe right child of the vertex, respectively. If some child doesn't exist then\nnumber - 1 is set instead. Note that different vertices of the tree may\ncontain the same values. Output Print number of times when search algorithm\nwill fail. Examples Input 3 15 -1 -1 10 1 3 5 -1 -1 Output 2 Input 8 6 2 3 3 4\n5 12 6 7 1 -1 8 4 -1 -1 5 -1 -1 14 -1 -1 2 -1 -1 Output 1 Note In the example\nthe root of the tree in vertex 2. Search of numbers 5 and 15 will return fail\nbecause on the first step algorithm will choose the subtree which doesn't\ncontain numbers you are looking for.\n\n",
        "cf_contest_id": 797,
        "cf_index": "D",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n15 -1 -1\r\n10 1 3\r\n5 -1 -1\r\n",
                "2"
            ],
            [
                "8\r\n6 2 3\r\n3 4 5\r\n12 6 7\r\n1 -1 8\r\n4 -1 -1\r\n5 -1 -1\r\n14 -1 -1\r\n2 -1 -1\r\n",
                "1"
            ]
        ],
        "private_cases": [
            [
                "1\r\n493041212 -1 -1\r\n",
                "0"
            ],
            [
                "10\r\n921294733 5 9\r\n341281094 -1 -1\r\n35060484 10 -1\r\n363363160 -1 -1\r\n771156014 6 8\r\n140806462 -1 -1\r\n118732846 4 2\r\n603229555 -1 -1\r\n359289513 3 7\r\n423237010 -1 -1\r\n",
                "7"
            ],
            [
                "10\r\n911605217 -1 -1\r\n801852416 -1 -1\r\n140035920 -1 9\r\n981454947 10 2\r\n404988051 6 3\r\n307545107 8 7\r\n278188888 4 1\r\n523010786 -1 -1\r\n441817740 -1 -1\r\n789680429 -1 -1\r\n",
                "7"
            ],
            [
                "10\r\n921072710 6 8\r\n727122964 -1 -1\r\n248695736 2 -1\r\n947477665 -1 -1\r\n41229309 -1 -1\r\n422047611 3 9\r\n424558429 -1 4\r\n665046372 -1 5\r\n74510531 -1 -1\r\n630373520 7 1\r\n",
                "7"
            ],
            [
                "1\r\n815121916 -1 -1\r\n",
                "0"
            ],
            [
                "1\r\n901418150 -1 -1\r\n",
                "0"
            ],
            [
                "3\r\n2 -1 -1\r\n1 1 3\r\n2 -1 -1\r\n",
                "0"
            ],
            [
                "4\r\n20 2 3\r\n16 4 -1\r\n20 -1 -1\r\n20 -1 -1\r\n",
                "0"
            ],
            [
                "3\r\n2 2 3\r\n1 -1 -1\r\n1 -1 -1\r\n",
                "0"
            ],
            [
                "4\r\n7122 2 3\r\n87 4 -1\r\n7122 -1 -1\r\n7122 -1 -1\r\n",
                "0"
            ],
            [
                "4\r\n712222 2 3\r\n98887 4 -1\r\n712222 -1 -1\r\n712222 -1 -1\r\n",
                "0"
            ],
            [
                "3\r\n6 2 3\r\n5 -1 -1\r\n5 -1 -1\r\n",
                "0"
            ],
            [
                "4\r\n1 -1 2\r\n0 3 -1\r\n100 -1 4\r\n1 -1 -1\r\n",
                "2"
            ],
            [
                "4\r\n98 2 3\r\n95 4 -1\r\n98 -1 -1\r\n98 -1 -1\r\n",
                "0"
            ],
            [
                "3\r\n15 2 3\r\n1 -1 -1\r\n1 -1 -1\r\n",
                "0"
            ],
            [
                "4\r\n6 2 -1\r\n6 3 4\r\n6 -1 -1\r\n7 -1 -1\r\n",
                "1"
            ],
            [
                "3\r\n2 2 3\r\n3 -1 -1\r\n3 -1 -1\r\n",
                "0"
            ],
            [
                "4\r\n1 -1 2\r\n0 3 -1\r\n1 -1 4\r\n0 -1 -1\r\n",
                "2"
            ],
            [
                "4\r\n1 2 3\r\n2 -1 -1\r\n3 4 -1\r\n2 -1 -1\r\n",
                "0"
            ],
            [
                "1\r\n0 -1 -1\r\n",
                "0"
            ],
            [
                "3\r\n5 2 -1\r\n6 -1 3\r\n5 -1 -1\r\n",
                "1"
            ],
            [
                "10\r\n2 -1 -1\r\n1 -1 8\r\n2 4 9\r\n5 -1 2\r\n5 7 6\r\n1 -1 1\r\n4 -1 -1\r\n0 -1 -1\r\n8 5 10\r\n5 -1 -1\r\n",
                "3"
            ],
            [
                "8\r\n6 -1 -1\r\n0 5 -1\r\n4 6 7\r\n3 -1 -1\r\n4 3 1\r\n1 -1 -1\r\n2 8 4\r\n2 -1 -1\r\n",
                "7"
            ],
            [
                "4\r\n5 3 -1\r\n1 4 -1\r\n3 -1 2\r\n1 -1 -1\r\n",
                "2"
            ],
            [
                "3\r\n10 2 3\r\n5 -1 -1\r\n5 -1 -1\r\n",
                "0"
            ]
        ]
    }
]