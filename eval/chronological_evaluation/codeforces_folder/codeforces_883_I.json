[
    {
        "name": "Photo Processing",
        "description": "Evlampiy has found one more cool application to process photos. However the\napplication has certain limitations. Each photo i has a contrast vi. In order\nfor the processing to be truly of high quality, the application must receive\nat least k photos with contrasts which differ as little as possible. Evlampiy\nalready knows the contrast vi for each of his n photos. Now he wants to split\nthe photos into groups, so that each group contains at least k photos. As a\nresult, each photo must belong to exactly one group. He considers a processing\ntime of the j-th group to be the difference between the maximum and minimum\nvalues of vi in the group. Because of multithreading the processing time of a\ndivision into groups is the maximum processing time among all groups. Split n\nphotos into groups in a such way that the processing time of the division is\nthe minimum possible, i.e. that the the maximum processing time over all\ngroups as least as possible. Input The first line contains two integers n and\nk (1 \u2264 k \u2264 n \u2264 3\u00b710^5) \u2014 number of photos and minimum size of a group. The\nsecond line contains n integers v1, v2, ..., vn (1 \u2264 vi \u2264 10^9), where vi is\nthe contrast of the i-th photo. Output Print the minimal processing time of\nthe division into groups. Examples Input 5 2 50 110 130 40 120 Output 20 Input\n4 1 2 3 4 1 Output 0 Note In the first example the photos should be split into\n2 groups: [40, 50] and [110, 120, 130]. The processing time of the first group\nis 10, and the processing time of the second group is 20. Maximum among 10 and\n20 is 20. It is impossible to split the photos into groups in a such way that\nthe processing time of division is less than 20. In the second example the\nphotos should be split into four groups, each containing one photo. So the\nminimal possible processing time of a division is 0.\n\n",
        "cf_contest_id": 883,
        "cf_index": "I",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dp"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 2\r\n50 110 130 40 120\r\n",
                "20\r\n"
            ],
            [
                "4 1\r\n2 3 4 1\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n4\r\n",
                "0\r\n"
            ],
            [
                "2 2\r\n7 5\r\n",
                "2\r\n"
            ],
            [
                "3 2\r\n34 3 75\r\n",
                "72\r\n"
            ],
            [
                "5 2\r\n932 328 886 96 589\r\n",
                "343\r\n"
            ],
            [
                "10 4\r\n810 8527 9736 3143 2341 6029 7474 707 2513 2023\r\n",
                "3707\r\n"
            ],
            [
                "20 11\r\n924129 939902 178964 918687 720767 695035 577430 407131 213304 810868 596349 266075 123602 376312 36680 18426 716200 121546 61834 851586\r\n",
                "921476\r\n"
            ],
            [
                "100 28\r\n1 2 3 5 1 1 1 4 1 5 2 4 3 2 5 4 1 1 4 1 4 5 4 1 4 5 1 3 5 1 1 1 4 2 5 2 3 5 2 2 3 2 4 5 5 5 5 1 2 4 1 3 1 1 1 4 3 1 5 2 5 1 3 3 2 4 5 1 1 3 4 1 1 3 3 1 2 4 3 3 4 4 3 1 2 1 5 1 4 4 2 3 1 3 3 4 2 4 1 1\r\n",
                "1\r\n"
            ],
            [
                "101 9\r\n3 2 2 1 4 1 3 2 3 4 3 2 3 1 4 4 1 1 4 1 3 3 4 1 2 1 1 3 1 2 2 4 3 1 4 3 1 1 4 4 1 2 1 1 4 2 3 4 1 2 1 4 4 1 4 3 1 4 2 1 2 1 4 3 4 3 4 2 2 4 3 2 1 3 4 3 2 2 4 3 3 2 4 1 3 2 2 4 1 3 4 2 1 3 3 2 2 1 1 3 1\r\n",
                "0\r\n"
            ],
            [
                "2 2\r\n1 1000000000\r\n",
                "999999999\r\n"
            ],
            [
                "2 1\r\n1 1000000000\r\n",
                "0\r\n"
            ],
            [
                "11 3\r\n412 3306 3390 2290 1534 316 1080 2860 253 230 3166\r\n",
                "1122\r\n"
            ],
            [
                "10 3\r\n2414 294 184 666 2706 1999 2201 1270 904 653\r\n",
                "707\r\n"
            ],
            [
                "24 4\r\n33 27 12 65 19 6 46 33 57 2 21 50 73 13 59 69 51 45 39 1 6 64 39 27\r\n",
                "9\r\n"
            ]
        ]
    }
]