[
    {
        "name": "Candies Distribution",
        "description": "There are \n    n\n children numbered from \n    1\n to \n    n\n in a kindergarten.\nKindergarten teacher gave \n    a_i\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n) candies to\nthe \n    i\n-th child. Children were seated in a row in order from \n    1\n to\n\n    n\n from left to right and started eating candies. While the \n    i\n-th\nchild was eating candies, he calculated two numbers \n    l_i\n and \n    r_i\n \u2014\nthe number of children seating to the left of him that got more candies than\nhe and the number of children seating to the right of him that got more\ncandies than he, respectively. Formally, \n    l_i\n is the number of indices\n\n    j\n (\n    1 \n    \u2264 j < i\n), such that \n    a_i < a_j\n and \n    r_i\n is the\nnumber of indices \n    j\n (\n    i < j \n    \u2264 n\n), such that \n    a_i < a_j\n.\nEach child told to the kindergarten teacher the numbers \n    l_i\n and\n\n    r_i\n that he calculated. Unfortunately, she forgot how many candies she\nhas given to each child. So, she asks you for help: given the arrays \n    l\n\nand \n    r\n determine whether she could have given the candies to the children\nsuch that all children correctly calculated their values \n    l_i\n and\n\n    r_i\n, or some of them have definitely made a mistake. If it was possible,\nfind any way how she could have done it. Input On the first line there is a\nsingle integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 1000\n) \u2014 the number of children\nin the kindergarten. On the next line there are \n    n\n integers \n    l_1, l_2,\n    \n    \u2026, l_n\n (\n    0 \n    \u2264 l_i \n    \u2264 n\n), separated by spaces. On the\nnext line, there are \n    n\n integer numbers \n    r_1, r_2, \n    \u2026, r_n\n\n(\n    0 \n    \u2264 r_i \n    \u2264 n\n), separated by spaces. Output If there is no way\nto distribute the candies to the children so that all of them calculated their\nnumbers correctly, print \u00abNO\u00bb (without quotes). Otherwise, print \u00abYES\u00bb\n(without quotes) on the first line. On the next line, print \n    n\n integers\n\n    a_1, a_2, \n    \u2026, a_n\n, separated by spaces \u2014 the numbers of candies\nthe children \n    1, 2, \n    \u2026, n\n received, respectively. Note that some of\nthese numbers can be equal, but all numbers should satisfy the condition \n    1\n    \n    \u2264 a_i \n    \u2264 n\n. The number of children seating to the left of the\n\n    i\n-th child that got more candies than he should be equal to \n    l_i\n\nand the number of children seating to the right of the \n    i\n-th child that\ngot more candies than he should be equal to \n    r_i\n. If there is more than\none solution, find any of them. Examples Input 5 0 0 1 1 2 2 0 1 0 0 Output\nYES 1 3 1 2 1 Input 4 0 0 2 0 1 1 1 1 Output NO Input 3 0 0 0 0 0 0 Output YES\n1 1 1 Note In the first example, if the teacher distributed \n    1\n, \n    3\n,\n\n    1\n, \n    2\n, \n    1\n candies to \n    1\n-st, \n    2\n-nd, \n    3\n-rd,\n\n    4\n-th, \n    5\n-th child, respectively, then all the values calculated by\nthe children are correct. For example, the \n    5\n-th child was given \n    1\n\ncandy, to the left of him \n    2\n children were given \n    1\n candy, \n    1\n\nchild was given \n    2\n candies and \n    1\n child \u2014 \n    3\n candies, so there\nare \n    2\n children to the left of him that were given more candies than him.\nIn the second example it is impossible to distribute the candies, because the\n\n    4\n-th child made a mistake in calculating the value of \n    r_4\n, because\nthere are no children to the right of him, so \n    r_4\n should be equal to\n\n    0\n. In the last example all children may have got the same number of\ncandies, that's why all the numbers are \n    0\n. Note that each child should\nreceive at least one candy.\n\n",
        "cf_contest_id": 1054,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n0 0 1 1 2\r\n2 0 1 0 0\r\n",
                "YES\r\n3 5 3 4 3\r\n"
            ],
            [
                "4\r\n0 0 2 0\r\n1 1 1 1\r\n",
                "NO\r\n"
            ],
            [
                "3\r\n0 0 0\r\n0 0 0\r\n",
                "YES\r\n3 3 3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n0\r\n0\r\n",
                "YES\r\n1\r\n"
            ],
            [
                "5\r\n0 0 0 0 0\r\n0 0 0 0 0\r\n",
                "YES\r\n5 5 5 5 5\r\n"
            ],
            [
                "3\r\n0 0 1\r\n1 0 0\r\n",
                "YES\r\n2 3 2\r\n"
            ],
            [
                "20\r\n0 1 1 1 1 1 4 4 4 4 4 0 5 5 5 5 5 5 5 5\r\n0 4 4 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0\r\n",
                "YES\r\n20 15 15 18 18 18 15 15 15 15 15 20 15 15 15 15 15 15 15 15\r\n"
            ],
            [
                "30\r\n0 0 0 2 0 1 1 1 6 0 7 7 0 0 9 4 10 8 11 8 8 8 8 4 9 9 18 9 0 20\r\n20 10 10 18 0 4 4 4 14 0 13 13 0 0 11 1 10 2 9 2 2 2 2 1 1 1 2 1 0 0\r\n",
                "YES\r\n10 20 20 10 30 25 25 25 10 30 10 10 30 30 10 25 10 20 10 20 20 20 20 25 20 20 10 20 30 10\r\n"
            ],
            [
                "50\r\n0 0 2 3 2 4 4 4 0 5 5 10 4 6 6 13 13 13 3 14 14 7 15 7 7 7 5 8 8 8 22 22 3 23 6 24 10 25 25 10 10 3 28 28 0 29 8 4 14 32\r\n0 0 7 29 2 10 10 10 0 9 9 22 5 8 8 19 19 19 1 18 18 7 17 7 7 7 4 6 6 6 10 10 1 9 3 8 4 7 7 4 4 1 4 4 0 3 1 0 0 0\r\n",
                "YES\r\n50 50 41 18 46 36 36 36 50 36 36 18 41 36 36 18 18 18 46 18 18 36 18 36 36 36 41 36 36 36 18 18 46 18 41 18 36 18 18 36 36 46 18 18 50 18 41 46 36 18\r\n"
            ],
            [
                "1\r\n1\r\n0\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n0\r\n1\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n1\r\n1\r\n",
                "NO\r\n"
            ],
            [
                "2\r\n1 0\r\n0 0\r\n",
                "NO\r\n"
            ],
            [
                "2\r\n0 2\r\n0 0\r\n",
                "NO\r\n"
            ],
            [
                "2\r\n0 1\r\n0 0\r\n",
                "YES\r\n2 1\r\n"
            ],
            [
                "2\r\n0 0\r\n1 0\r\n",
                "YES\r\n1 2\r\n"
            ],
            [
                "2\r\n0 0\r\n0 2\r\n",
                "NO\r\n"
            ],
            [
                "2\r\n0 0\r\n0 1\r\n",
                "NO\r\n"
            ],
            [
                "2\r\n1 1\r\n0 1\r\n",
                "NO\r\n"
            ],
            [
                "2\r\n1 0\r\n1 1\r\n",
                "NO\r\n"
            ],
            [
                "2\r\n0 2\r\n1 0\r\n",
                "NO\r\n"
            ],
            [
                "2\r\n1 2\r\n2 1\r\n",
                "NO\r\n"
            ],
            [
                "2\r\n0 0\r\n0 0\r\n",
                "YES\r\n2 2\r\n"
            ],
            [
                "1\r\n1\r\n1\r\n",
                "NO\r\n"
            ],
            [
                "5\r\n0 0 2 0 0\r\n1 1 2 0 0\r\n",
                "NO\r\n"
            ],
            [
                "6\r\n0 0 0 0 0 0\r\n0 2 2 2 3 3\r\n",
                "NO\r\n"
            ]
        ]
    }
]