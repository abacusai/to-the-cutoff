[
    {
        "name": "Napoleon Cake",
        "description": "This week Arkady wanted to cook some pancakes (to follow ancient traditions)\nand make a problem about that. But then he remembered that one can't make a\nproblem about stacking pancakes without working at a specific IT company, so\nhe decided to bake the Napoleon cake instead. To bake a Napoleon cake, one has\nto bake \n    n\n dry layers first, and then put them on each other in one\nstack, adding some cream. Arkady started with an empty plate, and performed\nthe following steps \n    n\n times: place a new cake layer on the top of the\nstack; after the \n    i\n-th layer is placed, pour \n    a_i\n units of cream on\ntop of the stack. When \n    x\n units of cream are poured on the top of the\nstack, top \n    x\n layers of the cake get drenched in the cream. If there are\nless than \n    x\n layers, all layers get drenched and the rest of the cream is\nwasted. If \n    x = 0\n, no layer gets drenched. The picture represents the\nfirst test case of the example. Help Arkady determine which layers of the cake\neventually get drenched when the process is over, and which don't. Input Each\ntest contains multiple test cases. The first line contains the number of test\ncases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 20\n     000\n). Description of the test cases\nfollows. The first line of each test case contains a single integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of layers in the cake. The\nsecond line of each test case contains \n    n\n integers \n    a_1, a_2, \n    \u2026,\n    a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 n\n) \u2014 the amount of cream poured on the cake\nafter adding each layer. It is guaranteed that the sum of \n    n\n over all\ntest cases does not exceed \n    2 \n    \u00b7 10^5\n. Output For each test case,\nprint a single line with \n    n\n integers. The \n    i\n-th of the integers\nshould be equal to \n    1\n if the \n    i\n-th layer from the bottom gets\ndrenched, and \n    0\n otherwise. Example Input 3 6 0 3 0 0 1 3 10 0 0 0 1 0 5\n0 0 0 2 3 0 0 0 Output 1 1 0 1 1 1 0 1 1 1 1 1 0 0 1 1 0 0 0\n\n",
        "cf_contest_id": 1501,
        "cf_index": "B",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n6\r\n0 3 0 0 1 3\r\n10\r\n0 0 0 1 0 5 0 0 0 2\r\n3\r\n0 0 0\r\n",
                "1 1 0 1 1 1\r\n0 1 1 1 1 1 0 0 1 1\r\n0 0 0\r\n"
            ]
        ],
        "private_cases": []
    }
]