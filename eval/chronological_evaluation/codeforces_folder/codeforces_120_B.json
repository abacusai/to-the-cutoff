[
    {
        "name": "Quiz League",
        "description": "A team quiz game called \"What? Where? When?\" is very popular in Berland. The\ngame is centered on two teams competing. They are the team of six Experts\nversus the team of the Audience. A person from the audience asks a question\nand the experts are allowed a minute on brainstorming and finding the right\nanswer to the question. All it takes to answer a typical question is general\nknowledge and common logic. The question sent be the audience are in envelops\nlain out in a circle on a round table. Each envelop is marked by the name of\nthe asker's town. Each question is positioned in a separate sector. In the\ncentre of the table is a spinning arrow. Thus, the table rather resembles a\nroulette table with no ball but with a spinning arrow instead. The host sets\noff the spinning arrow to choose a question for the experts: when the arrow\nstops spinning, the question it is pointing at is chosen. If the arrow points\nat the question that has already been asked, the host chooses the next\nunanswered question in the clockwise direction. Your task is to determine\nwhich will be the number of the next asked question if the arrow points at\nsector number k. Input The first line contains two positive integers n and k\n(1 \u2264 n \u2264 1000 and 1 \u2264 k \u2264 n) \u2014 the numbers of sectors on the table and the\nnumber of the sector where the arrow is pointing. The second line contains n\nnumbers: ai = 0 if the question from sector i has already been asked and ai =\n1 if the question from sector i hasn't been asked yet (1 \u2264 i \u2264 n). The sectors\nare given in the clockwise order, the first sector follows after the n-th one.\nOutput Print the single number \u2014 the number of the sector containing the\nquestion the experts will be asked. It is guaranteed that the answer exists,\nthat is that not all the questions have already been asked. Examples Input 5 5\n0 1 0 1 0 Output 2 Input 2 1 1 1 Output 1\n\n",
        "cf_contest_id": 120,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 5\r\n0 1 0 1 0\r\n",
                "2"
            ],
            [
                "2 1\r\n1 1\r\n",
                "1"
            ]
        ],
        "private_cases": [
            [
                "3 2\r\n1 0 0\r\n",
                "1"
            ],
            [
                "3 3\r\n0 1 0\r\n",
                "2"
            ],
            [
                "1 1\r\n1\r\n",
                "1"
            ],
            [
                "6 3\r\n0 0 1 1 0 1\r\n",
                "3"
            ],
            [
                "3 1\r\n0 1 0\r\n",
                "2"
            ],
            [
                "3 3\r\n1 0 1\r\n",
                "3"
            ],
            [
                "4 4\r\n1 0 1 0\r\n",
                "1"
            ],
            [
                "5 3\r\n0 1 0 1 1\r\n",
                "4"
            ],
            [
                "6 4\r\n1 0 0 0 0 1\r\n",
                "6"
            ],
            [
                "7 5\r\n1 0 0 0 0 0 1\r\n",
                "7"
            ],
            [
                "101 81\r\n1 0 1 1 1 1 0 0 1 1 1 1 1 0 0 1 0 1 0 1 1 1 1 1 1 1 0 1 1 0 1 1 1 0 1 0 0 1 0 1 0 1 1 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 1 0 1 1 0 0 1 0 0 1 0 0 0 0 0 0 1 1 0 1 1 0 1 0 0 0 0 1 0 0 1 1 0 0 1 0 1 0 0 0 1 0\r\n",
                "82"
            ],
            [
                "200 31\r\n1 0 0 1 1 1 0 0 0 0 0 1 1 1 0 1 1 0 0 1 0 0 0 1 1 1 0 1 1 0 0 0 1 1 1 1 0 1 1 1 1 1 0 1 0 1 0 1 0 0 1 1 1 0 0 0 1 0 0 0 1 1 0 0 0 0 1 1 0 1 1 1 1 1 0 0 1 1 1 0 0 0 0 1 0 1 1 1 0 1 1 0 0 1 1 1 1 1 0 1 0 1 1 0 1 0 1 1 0 0 1 1 0 0 0 1 1 1 1 1 1 1 0 0 1 1 0 1 1 1 0 1 0 0 1 1 1 0 0 0 0 0 0 1 0 1 0 0 1 1 1 1 1 0 1 0 0 0 0 1 1 0 1 0 1 1 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 1 1 0 1 0 0 1 1 1 0 0 1 0\r\n",
                "33"
            ],
            [
                "17 13\r\n0 0 1 1 1 0 1 1 0 0 0 1 1 1 1 1 1\r\n",
                "13"
            ],
            [
                "102 9\r\n0 0 0 0 1 1 0 1 0 1 1 1 1 0 1 0 1 0 1 0 0 0 1 1 0 1 0 1 0 1 1 1 0 1 0 1 1 1 0 0 1 0 0 1 1 0 0 0 1 0 0 1 1 0 1 0 1 1 0 1 0 0 1 0 0 0 0 1 1 1 1 0 0 1 1 1 0 0 0 1 1 0 0 1 0 1 1 0 1 0 0 0 0 0 0 0 1 1 0 0 1 1\r\n",
                "10"
            ]
        ]
    }
]