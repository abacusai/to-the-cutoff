[
    {
        "name": "Kostya the Sculptor",
        "description": "Kostya is a genial sculptor, he has an idea: to carve a marble sculpture in\nthe shape of a sphere. Kostya has a friend Zahar who works at a career. Zahar\nknows about Kostya's idea and wants to present him a rectangular\nparallelepiped of marble from which he can carve the sphere. Zahar has n\nstones which are rectangular parallelepipeds. The edges sizes of the i-th of\nthem are ai, bi and ci. He can take no more than two stones and present them\nto Kostya. If Zahar takes two stones, he should glue them together on one of\nthe faces in order to get a new piece of rectangular parallelepiped of marble.\nThus, it is possible to glue a pair of stones together if and only if two\nfaces on which they are glued together match as rectangles. In such gluing it\nis allowed to rotate and flip the stones in any way. Help Zahar choose such a\npresent so that Kostya can carve a sphere of the maximum possible volume and\npresent it to Zahar. Input The first line contains the integer n (1 \u2264 n \u2264\n10^5). n lines follow, in the i-th of which there are three integers ai, bi\nand ci (1 \u2264 ai, bi, ci \u2264 10^9) \u2014 the lengths of edges of the i-th stone. Note,\nthat two stones may have exactly the same sizes, but they still will be\nconsidered two different stones. Output In the first line print k (1 \u2264 k \u2264 2)\nthe number of stones which Zahar has chosen. In the second line print k\ndistinct integers from 1 to n \u2014 the numbers of stones which Zahar needs to\nchoose. Consider that stones are numbered from 1 to n in the order as they are\ngiven in the input data. You can print the stones in arbitrary order. If there\nare several answers print any of them. Examples Input 6 5 5 5 3 2 4 1 4 1 2 1\n3 3 2 4 3 3 4 Output 1 1 Input 7 10 7 8 5 10 3 4 2 6 5 5 5 10 2 8 4 2 1 7 7 7\nOutput 2 1 5 Note In the first example we can connect the pairs of stones: 2\nand 4, the size of the parallelepiped: 3 \u00d7 2 \u00d7 5, the radius of the inscribed\nsphere 1 2 and 5, the size of the parallelepiped: 3 \u00d7 2 \u00d7 8 or 6 \u00d7 2 \u00d7 4 or 3\n\u00d7 4 \u00d7 4, the radius of the inscribed sphere 1, or 1, or 1.5 respectively. 2\nand 6, the size of the parallelepiped: 3 \u00d7 5 \u00d7 4, the radius of the inscribed\nsphere 1.5 4 and 5, the size of the parallelepiped: 3 \u00d7 2 \u00d7 5, the radius of\nthe inscribed sphere 1 5 and 6, the size of the parallelepiped: 3 \u00d7 4 \u00d7 5, the\nradius of the inscribed sphere 1.5 Or take only one stone: 1 the size of the\nparallelepiped: 5 \u00d7 5 \u00d7 5, the radius of the inscribed sphere 2.5 2 the size\nof the parallelepiped: 3 \u00d7 2 \u00d7 4, the radius of the inscribed sphere 1 3 the\nsize of the parallelepiped: 1 \u00d7 4 \u00d7 1, the radius of the inscribed sphere 0.5\n4 the size of the parallelepiped: 2 \u00d7 1 \u00d7 3, the radius of the inscribed\nsphere 0.5 5 the size of the parallelepiped: 3 \u00d7 2 \u00d7 4, the radius of the\ninscribed sphere 1 6 the size of the parallelepiped: 3 \u00d7 3 \u00d7 4, the radius of\nthe inscribed sphere 1.5 It is most profitable to take only the first stone.\n\n",
        "cf_contest_id": 733,
        "cf_index": "D",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "hashing"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n5 5 5\r\n3 2 4\r\n1 4 1\r\n2 1 3\r\n3 2 4\r\n3 3 4\r\n",
                "1\r\n1\r\n"
            ],
            [
                "7\r\n10 7 8\r\n5 10 3\r\n4 2 6\r\n5 5 5\r\n10 2 8\r\n4 2 1\r\n7 7 7\r\n",
                "2\r\n5\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 1 1\r\n",
                "1\r\n1\r\n"
            ],
            [
                "2\r\n2 3 1\r\n2 2 3\r\n",
                "1\r\n2\r\n"
            ],
            [
                "1\r\n1000000000 1000000000 1000000000\r\n",
                "1\r\n1\r\n"
            ],
            [
                "3\r\n100 100 100\r\n25 63 11\r\n63 15 11\r\n",
                "1\r\n1\r\n"
            ],
            [
                "2\r\n999999999 1000000000 1000000000\r\n1000000000 1000000000 1000000000\r\n",
                "2\r\n2\r\n1\r\n"
            ],
            [
                "3\r\n1 1 2\r\n1 2 2\r\n1 1 1\r\n",
                "1\r\n1\r\n"
            ],
            [
                "3\r\n500 1000 1000\r\n1000 499 1000\r\n999 999 999\r\n",
                "2\r\n2\r\n1\r\n"
            ],
            [
                "3\r\n500 1000 1000\r\n1000 499 1000\r\n1000 1001 1001\r\n",
                "1\r\n3\r\n"
            ],
            [
                "9\r\n1 3 2\r\n3 3 1\r\n3 1 2\r\n3 3 2\r\n2 2 2\r\n3 2 1\r\n3 3 1\r\n3 3 1\r\n2 1 2\r\n",
                "2\r\n4\r\n2\r\n"
            ],
            [
                "3\r\n20 30 5\r\n20 30 6\r\n10 10 10\r\n",
                "2\r\n2\r\n1\r\n"
            ],
            [
                "3\r\n5 20 30\r\n6 20 30\r\n10 10 10\r\n",
                "2\r\n2\r\n1\r\n"
            ],
            [
                "3\r\n20 5 30\r\n20 6 30\r\n10 10 10\r\n",
                "2\r\n2\r\n1\r\n"
            ],
            [
                "3\r\n20 30 5\r\n30 20 6\r\n10 10 10\r\n",
                "2\r\n2\r\n1\r\n"
            ],
            [
                "3\r\n20 30 5\r\n6 20 30\r\n10 10 10\r\n",
                "2\r\n2\r\n1\r\n"
            ],
            [
                "3\r\n20 30 5\r\n6 30 20\r\n10 10 10\r\n",
                "2\r\n2\r\n1\r\n"
            ],
            [
                "3\r\n20 30 5\r\n20 6 30\r\n10 10 10\r\n",
                "2\r\n2\r\n1\r\n"
            ],
            [
                "3\r\n20 30 5\r\n30 6 20\r\n10 10 10\r\n",
                "2\r\n2\r\n1\r\n"
            ],
            [
                "3\r\n20 5 30\r\n20 30 6\r\n10 10 10\r\n",
                "2\r\n2\r\n1\r\n"
            ],
            [
                "3\r\n20 5 30\r\n30 20 6\r\n10 10 10\r\n",
                "2\r\n2\r\n1\r\n"
            ],
            [
                "3\r\n20 5 30\r\n6 20 30\r\n10 10 10\r\n",
                "2\r\n2\r\n1\r\n"
            ],
            [
                "3\r\n20 5 30\r\n6 30 20\r\n10 10 10\r\n",
                "2\r\n2\r\n1\r\n"
            ],
            [
                "3\r\n20 5 30\r\n30 6 20\r\n10 10 10\r\n",
                "2\r\n2\r\n1\r\n"
            ],
            [
                "3\r\n5 20 30\r\n20 30 6\r\n10 10 10\r\n",
                "2\r\n2\r\n1\r\n"
            ],
            [
                "3\r\n5 20 30\r\n30 20 6\r\n10 10 10\r\n",
                "2\r\n2\r\n1\r\n"
            ],
            [
                "3\r\n5 20 30\r\n6 30 20\r\n10 10 10\r\n",
                "2\r\n2\r\n1\r\n"
            ],
            [
                "3\r\n5 20 30\r\n20 6 30\r\n10 10 10\r\n",
                "2\r\n2\r\n1\r\n"
            ],
            [
                "3\r\n5 20 30\r\n30 6 20\r\n10 10 10\r\n",
                "2\r\n2\r\n1\r\n"
            ]
        ]
    }
]