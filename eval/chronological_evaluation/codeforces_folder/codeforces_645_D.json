[
    {
        "name": "Robot Rapping Results Report",
        "description": "While Farmer John rebuilds his farm in an unfamiliar portion of Bovinia,\nBessie is out trying some alternative jobs. In her new gig as a reporter,\nBessie needs to know about programming competition results as quickly as\npossible. When she covers the 2016 Robot Rap Battle Tournament, she notices\nthat all of the robots operate under deterministic algorithms. In particular,\nrobot i will beat robot j if and only if robot i has a higher skill level than\nrobot j. And if robot i beats robot j and robot j beats robot k, then robot i\nwill beat robot k. Since rapping is such a subtle art, two robots can never\nhave the same skill level. Given the results of the rap battles in the order\nin which they were played, determine the minimum number of first rap battles\nthat needed to take place before Bessie could order all of the robots by skill\nlevel. Input The first line of the input consists of two integers, the number\nof robots n (2 \u2264 n \u2264 100 000) and the number of rap battles m (). The next m\nlines describe the results of the rap battles in the order they took place.\nEach consists of two integers ui and vi (1 \u2264 ui, vi \u2264 n, ui \u2260 vi), indicating\nthat robot ui beat robot vi in the i-th rap battle. No two rap battles involve\nthe same pair of robots. It is guaranteed that at least one ordering of the\nrobots satisfies all m relations. Output Print the minimum k such that the\nordering of the robots by skill level is uniquely defined by the first k rap\nbattles. If there exists more than one ordering that satisfies all m\nrelations, output -1. Examples Input 4 5 2 1 1 3 2 3 4 2 4 3 Output 4 Input 3\n2 1 2 3 2 Output -1 Note In the first sample, the robots from strongest to\nweakest must be (4, 2, 1, 3), which Bessie can deduce after knowing the\nresults of the first four rap battles. In the second sample, both (1, 3, 2)\nand (3, 1, 2) are possible orderings of the robots from strongest to weakest\nafter both rap battles.\n\n",
        "cf_contest_id": 645,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dp",
            "graphs"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 5\r\n2 1\r\n1 3\r\n2 3\r\n4 2\r\n4 3\r\n",
                "4"
            ],
            [
                "3 2\r\n1 2\r\n3 2\r\n",
                "-1"
            ]
        ],
        "private_cases": [
            [
                "2 1\r\n1 2\r\n",
                "1"
            ],
            [
                "2 1\r\n2 1\r\n",
                "1"
            ],
            [
                "5 10\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n2 3\r\n2 4\r\n2 5\r\n3 4\r\n3 5\r\n4 5\r\n",
                "10"
            ],
            [
                "3 3\r\n2 1\r\n3 1\r\n3 2\r\n",
                "3"
            ],
            [
                "4 6\r\n1 4\r\n4 2\r\n2 3\r\n1 2\r\n1 3\r\n4 3\r\n",
                "3"
            ],
            [
                "3 3\r\n3 1\r\n3 2\r\n1 2\r\n",
                "3"
            ],
            [
                "5 10\r\n2 1\r\n1 4\r\n2 5\r\n2 3\r\n5 4\r\n3 4\r\n3 1\r\n3 5\r\n2 4\r\n1 5\r\n",
                "10"
            ],
            [
                "3 3\r\n1 2\r\n3 2\r\n1 3\r\n",
                "3"
            ],
            [
                "3 3\r\n2 3\r\n1 3\r\n2 1\r\n",
                "3"
            ],
            [
                "3 3\r\n1 2\r\n3 1\r\n3 2\r\n",
                "2"
            ],
            [
                "3 3\r\n1 3\r\n3 2\r\n1 2\r\n",
                "2"
            ],
            [
                "5 10\r\n4 1\r\n4 5\r\n2 1\r\n2 5\r\n4 3\r\n3 1\r\n4 2\r\n2 3\r\n3 5\r\n5 1\r\n",
                "10"
            ],
            [
                "5 8\r\n5 1\r\n1 3\r\n5 3\r\n2 3\r\n4 1\r\n4 3\r\n2 1\r\n5 4\r\n",
                "-1"
            ],
            [
                "5 10\r\n2 1\r\n5 2\r\n3 2\r\n3 1\r\n5 4\r\n3 4\r\n4 2\r\n5 1\r\n4 1\r\n5 3\r\n",
                "10"
            ],
            [
                "2 1\r\n2 1\r\n",
                "1"
            ],
            [
                "5 10\r\n4 3\r\n4 1\r\n2 1\r\n1 3\r\n5 1\r\n5 3\r\n5 4\r\n2 5\r\n2 3\r\n2 4\r\n",
                "8"
            ],
            [
                "5 10\r\n2 5\r\n1 5\r\n2 3\r\n1 4\r\n5 4\r\n3 4\r\n3 1\r\n2 1\r\n3 5\r\n2 4\r\n",
                "7"
            ],
            [
                "13 78\r\n10 2\r\n6 5\r\n5 7\r\n10 3\r\n6 13\r\n4 7\r\n4 13\r\n1 12\r\n13 2\r\n1 7\r\n10 5\r\n10 13\r\n12 2\r\n10 6\r\n5 3\r\n10 8\r\n9 11\r\n6 1\r\n4 5\r\n12 3\r\n6 7\r\n8 2\r\n1 9\r\n4 11\r\n5 8\r\n6 3\r\n9 5\r\n5 2\r\n13 11\r\n10 4\r\n12 7\r\n5 13\r\n12 8\r\n10 12\r\n6 12\r\n5 11\r\n1 8\r\n7 8\r\n12 4\r\n10 7\r\n1 5\r\n1 2\r\n10 11\r\n2 11\r\n12 13\r\n9 7\r\n8 3\r\n12 9\r\n9 2\r\n6 9\r\n10 9\r\n7 11\r\n12 5\r\n4 8\r\n9 8\r\n4 3\r\n6 4\r\n6 11\r\n6 8\r\n1 13\r\n8 11\r\n1 3\r\n9 13\r\n9 4\r\n1 4\r\n2 3\r\n4 2\r\n6 2\r\n7 13\r\n1 11\r\n12 11\r\n7 2\r\n8 13\r\n9 3\r\n13 3\r\n3 11\r\n10 1\r\n7 3\r\n",
                "76"
            ],
            [
                "5 10\r\n3 4\r\n3 2\r\n3 5\r\n1 4\r\n2 4\r\n5 1\r\n3 1\r\n5 4\r\n2 1\r\n2 5\r\n",
                "10"
            ],
            [
                "7 21\r\n5 7\r\n6 7\r\n2 7\r\n1 3\r\n6 2\r\n6 3\r\n2 3\r\n6 1\r\n4 2\r\n6 4\r\n4 5\r\n4 7\r\n6 5\r\n5 2\r\n1 7\r\n7 3\r\n4 1\r\n2 1\r\n5 1\r\n4 3\r\n5 3\r\n",
                "18"
            ]
        ]
    }
]