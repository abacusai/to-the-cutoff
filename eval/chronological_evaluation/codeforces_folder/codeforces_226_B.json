[
    {
        "name": "Naughty Stone Piles",
        "description": "There are n piles of stones of sizes a1, a2, ..., an lying on the table in\nfront of you. During one move you can take one pile and add it to the other.\nAs you add pile i to pile j, the size of pile j increases by the current size\nof pile i, and pile i stops existing. The cost of the adding operation equals\nthe size of the added pile. Your task is to determine the minimum cost at\nwhich you can gather all stones in one pile. To add some challenge, the stone\npiles built up conspiracy and decided that each pile will let you add to it\nnot more than k times (after that it can only be added to another pile).\nMoreover, the piles decided to puzzle you completely and told you q variants\n(not necessarily distinct) of what k might equal. Your task is to find the\nminimum cost for each of q variants. Input The first line contains integer n\n(1 \u2264 n \u2264 10^5) \u2014 the number of stone piles. The second line contains n space-\nseparated integers: a1, a2, ..., an (1 \u2264 ai \u2264 10^9) \u2014 the initial sizes of the\nstone piles. The third line contains integer q (1 \u2264 q \u2264 10^5) \u2014 the number of\nqueries. The last line contains q space-separated integers k1, k2, ..., kq (1\n\u2264 ki \u2264 10^5) \u2014 the values of number k for distinct queries. Note that numbers\nki can repeat. Output Print q whitespace-separated integers \u2014 the answers to\nthe queries in the order, in which the queries are given in the input. Please,\ndo not use the \npreferred to use the cin, cout streams or the \n5 2 3 4 1 1 2 2 3 Output 9 8 Note In the first sample one way to get the\noptimal answer goes like this: we add in turns the 4-th and the 5-th piles to\nthe 2-nd one; then we add the 1-st pile to the 3-rd one; we add the 2-nd pile\nto the 3-rd one. The first two operations cost 1 each; the third one costs 2,\nthe fourth one costs 5 (the size of the 2-nd pile after the first two\noperations is not 3, it already is 5). In the second sample you can add the\n2-nd pile to the 3-rd one (the operations costs 3); then the 1-st one to the\n3-th one (the cost is 2); then the 5-th one to the 4-th one (the costs is 1);\nand at last, the 4-th one to the 3-rd one (the cost is 2).\n\n",
        "cf_contest_id": 226,
        "cf_index": "B",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n2 3 4 1 1\r\n2\r\n2 3\r\n",
                "9 8\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n2 9\r\n5\r\n4 10 7 3 4\r\n",
                "2 2 2 2 2\r\n"
            ],
            [
                "1\r\n7\r\n4\r\n6 2 3 3\r\n",
                "0 0 0 0\r\n"
            ],
            [
                "2\r\n7 10\r\n2\r\n2 4\r\n",
                "7 7\r\n"
            ],
            [
                "1\r\n10\r\n5\r\n5 3 7 7 1\r\n",
                "0 0 0 0 0\r\n"
            ],
            [
                "1\r\n2\r\n5\r\n7 3 9 8 1\r\n",
                "0 0 0 0 0\r\n"
            ],
            [
                "4\r\n8 10 4 4\r\n3\r\n7 8 1\r\n",
                "16 16 28\r\n"
            ],
            [
                "2\r\n7 9\r\n1\r\n9\r\n",
                "7\r\n"
            ],
            [
                "3\r\n4 5 4\r\n2\r\n10 2\r\n",
                "8 8\r\n"
            ],
            [
                "3\r\n1 6 8\r\n1\r\n6\r\n",
                "7\r\n"
            ],
            [
                "2\r\n9 3\r\n1\r\n6\r\n",
                "3\r\n"
            ],
            [
                "5\r\n9 5 7 3 3\r\n1\r\n3\r\n",
                "21\r\n"
            ],
            [
                "2\r\n7 4\r\n1\r\n7\r\n",
                "4\r\n"
            ],
            [
                "4\r\n7 4 1 7\r\n3\r\n6 8 3\r\n",
                "12 12 12\r\n"
            ],
            [
                "3\r\n3 7 3\r\n1\r\n5\r\n",
                "6\r\n"
            ],
            [
                "1\r\n3\r\n1\r\n2\r\n",
                "0\r\n"
            ],
            [
                "1\r\n1\r\n3\r\n2 1 10\r\n",
                "0 0 0\r\n"
            ]
        ]
    }
]