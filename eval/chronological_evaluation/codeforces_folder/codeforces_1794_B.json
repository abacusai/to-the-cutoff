[
    {
        "name": "Not Dividing",
        "description": "You are given an array of \n    n\n positive integers \n    a_1, a_2, \n    \u2026,\n    a_n\n. In one operation, you can choose any number of the array and add\n\n    1\n to it. Make at most \n    2n\n operations so that the array satisfies\nthe following property: \n    a_i+1\n is not divisible by \n    a_i\n, for each\n\n    i = 1, 2, \n    \u2026, n-1\n. You do not need to minimize the number of\noperations. Input Each test contains multiple test cases. The first line\ncontains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n). The\ndescription of the test cases follows. The first line of each test case\ncontains an integer \n    n\n (\n    1\n    \u2264 n\n    \u2264 10^4\n) \u2014 the length of the\ngiven array. The second line of each test case contains \n    n\n integers\n\n    a_1,a_2,\n    \u2026,a_n\n (\n    1\n    \u2264 a_i\n    \u2264 10^9\n) \u2014 the given array. It\nis guaranteed that the sum of \n    n\n over all test cases does not exceed\n\n    5\n    \u00b7 10^4\n. Output For each test case, print the answer on a separate\nline. In the only line, print \n    n\n integers \u2014 the resulting array \n    a\n\nafter applying at most \n    2n\n operations. We can show that an answer always\nexists under the given constraints. If there are multiple answers, print any\nof them. Example Input 3 4 2 4 3 6 3 1 2 3 2 4 2 Output 4 5 6 7 3 2 3 4 2 Note\nIn the first test case, the array \n    [4, 5, 6, 7]\n can be achieved by\napplying \n    2\n operations to the first element, \n    1\n operation to the\nsecond element, \n    3\n operations to the third element, and \n    1\n operation\nto the last element. The total number of operations performed is \n    7\n,\nwhich is less than the allowed \n    8\n operations in this case. In the second\ntest case, the array \n    [3, 2, 3]\n can be achieved by applying two\noperations to the first element. Another possible resulting array could be\n\n    [2, 3, 5]\n, because the total number of operations does not need to be\nminimum. In the third test case, not applying any operations results in an\narray that satisfies the statement's property. Observe that it is not\nmandatory to make operations.\n\n",
        "cf_contest_id": 1794,
        "cf_index": "B",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n4\r\n2 4 3 6\r\n3\r\n1 2 3\r\n2\r\n4 2\r\n",
                "2\r\n5\r\n3\r\n7\r\n2\r\n3\r\n4\r\n4\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "25\r\n2\r\n1 232792560\r\n2\r\n1 232792559\r\n2\r\n1 232792558\r\n2\r\n2 232792560\r\n2\r\n2 232792559\r\n2\r\n2 232792558\r\n2\r\n232792560 1\r\n2\r\n232792559 1\r\n2\r\n232792558 1\r\n2\r\n232792560 2\r\n2\r\n232792559 2\r\n2\r\n232792558 2\r\n2\r\n1 1\r\n2\r\n1 1000000000\r\n2\r\n1000000000 1\r\n2\r\n1000000000 1000000000\r\n1\r\n1000000000\r\n2\r\n500000000 1000000000\r\n2\r\n499999999 1000000000\r\n2\r\n500000000 999999999\r\n2\r\n499999999 999999999\r\n2\r\n1000000000 500000000\r\n2\r\n1000000000 499999999\r\n2\r\n999999999 500000000\r\n2\r\n999999999 499999999\r\n",
                "2\r\n232792561\r\n2\r\n232792559\r\n2\r\n232792559\r\n2\r\n232792561\r\n2\r\n232792559\r\n2\r\n232792559\r\n232792560\r\n2\r\n232792559\r\n2\r\n232792558\r\n2\r\n232792560\r\n2\r\n232792559\r\n2\r\n232792558\r\n2\r\n2\r\n3\r\n2\r\n1000000001\r\n1000000000\r\n2\r\n1000000000\r\n1000000001\r\n1000000000\r\n500000000\r\n1000000001\r\n499999999\r\n1000000000\r\n500000000\r\n999999999\r\n499999999\r\n999999999\r\n1000000000\r\n500000000\r\n1000000000\r\n499999999\r\n999999999\r\n500000000\r\n999999999\r\n499999999\r\n"
            ],
            [
                "1\r\n3\r\n1 20 106260\r\n",
                "2\r\n21\r\n106261\r\n"
            ]
        ]
    }
]