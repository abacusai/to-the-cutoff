[
    {
        "name": "Web of Lies",
        "description": "When you play the game of thrones, you win, or you die. There is no middle\nground. Cersei Lannister, A Game of Thrones by George R. R. Martin There are\n\n    n\n nobles, numbered from \n    1\n to \n    n\n. Noble \n    i\n has a power of\n\n    i\n. There are also \n    m\n \"friendships\". A friendship between nobles\n\n    a\n and \n    b\n is always mutual. A noble is defined to be vulnerable if\nboth of the following conditions are satisfied: the noble has at least one\nfriend, and all of that noble's friends have a higher power. You will have to\nprocess the following three types of queries. Add a friendship between nobles\n\n    u\n and \n    v\n. Remove a friendship between nobles \n    u\n and \n    v\n.\nCalculate the answer to the following process. The process: all vulnerable\nnobles are simultaneously killed, and all their friendships end. Then, it is\npossible that new nobles become vulnerable. The process repeats itself until\nno nobles are vulnerable. It can be proven that the process will end in finite\ntime. After the process is complete, you need to calculate the number of\nremaining nobles. Note that the results of the process are not carried over\nbetween queries, that is, every process starts with all nobles being alive!\nInput The first line contains the integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n\n    \n    \u2264 2\n    \u00b7 10^5\n, \n    0 \n    \u2264 m \n    \u2264 2\n    \u00b7 10^5\n) \u2014 the number of\nnobles and number of original friendships respectively. The next \n    m\n lines\neach contain the integers \n    u\n and \n    v\n (\n    1 \n    \u2264 u,v \n    \u2264 n\n, \n    u\n    \n     v\n), describing a friendship. No friendship is listed twice. The next\nline contains the integer \n    q\n (\n    1 \n    \u2264 q \n    \u2264 2\n    \u00b710^5\n) \u2014\nthe number of queries. The next \n    q\n lines contain the queries themselves,\neach query has one of the following three formats. \n    1\n \n    u\n \n    v\n\n(\n    1 \n    \u2264 u,v \n    \u2264 n\n, \n    u \n     v\n) \u2014 add a friendship between\n\n    u\n and \n    v\n. It is guaranteed that \n    u\n and \n    v\n are not friends\nat this moment. \n    2\n \n    u\n \n    v\n (\n    1 \n    \u2264 u,v \n    \u2264 n\n, \n    u \n    \n    v\n) \u2014 remove a friendship between \n    u\n and \n    v\n. It is guaranteed that\n\n    u\n and \n    v\n are friends at this moment. \n    3\n \u2014 print the answer to\nthe process described in the statement. Output For each type \n    3\n query\nprint one integer to a new line. It is guaranteed that there will be at least\none type \n    3\n query. Examples Input 4 3 2 1 1 3 3 4 4 3 1 2 3 2 3 1 3\nOutput 2 1 Input 4 3 2 3 3 4 4 1 1 3 Output 1 Note Consider the first example.\nIn the first type 3 query, we have the diagram below. In the first round of\nthe process, noble \n    1\n is weaker than all of his friends (\n    2\n and\n\n    3\n), and is thus killed. No other noble is vulnerable in round 1. In\nround 2, noble \n    3\n is weaker than his only friend, noble \n    4\n, and is\ntherefore killed. At this point, the process ends, and the answer is \n    2\n.\nIn the second type 3 query, the only surviving noble is \n    4\n. The second\nexample consists of only one type \n    3\n query. In the first round, two\nnobles are killed, and in the second round, one noble is killed. The final\nanswer is \n    1\n, since only one noble survives.\n\n",
        "cf_contest_id": 1548,
        "cf_index": "A",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "graphs",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 3\r\n2 1\r\n1 3\r\n3 4\r\n4\r\n3\r\n1 2 3\r\n2 3 1\r\n3\r\n",
                "2\r\n1\r\n"
            ],
            [
                "4 3\r\n2 3\r\n3 4\r\n4 1\r\n1\r\n3\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "20 0\r\n20\r\n3\r\n3\r\n1 17 19\r\n1 19 20\r\n1 4 8\r\n1 9 18\r\n1 1 14\r\n1 16 19\r\n1 10 19\r\n1 1 7\r\n1 6 10\r\n1 18 19\r\n1 9 16\r\n1 15 17\r\n1 11 12\r\n1 10 15\r\n3\r\n1 2 9\r\n1 1 13\r\n1 16 20\r\n",
                "20\r\n20\r\n9\r\n"
            ],
            [
                "20 53\r\n1 2\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n1 20\r\n2 3\r\n2 6\r\n2 16\r\n2 17\r\n3 6\r\n3 18\r\n3 20\r\n4 6\r\n4 7\r\n4 8\r\n4 9\r\n4 14\r\n4 18\r\n5 11\r\n5 13\r\n5 17\r\n5 18\r\n5 19\r\n6 8\r\n6 13\r\n7 8\r\n7 10\r\n7 15\r\n7 17\r\n7 18\r\n8 15\r\n8 16\r\n9 10\r\n9 15\r\n10 11\r\n10 17\r\n10 20\r\n11 15\r\n11 16\r\n12 14\r\n12 15\r\n12 16\r\n12 19\r\n14 16\r\n14 19\r\n16 17\r\n16 19\r\n16 20\r\n17 19\r\n17 20\r\n18 19\r\n1\r\n3\r\n",
                "4\r\n"
            ],
            [
                "1000 0\r\n1\r\n3\r\n",
                "1000\r\n"
            ],
            [
                "20 0\r\n1\r\n3\r\n",
                "20\r\n"
            ],
            [
                "3 0\r\n2\r\n1 2 1\r\n3\r\n",
                "2\r\n"
            ]
        ]
    }
]