[
    {
        "name": "Seating Arrangements (hard version) ",
        "description": "It is the hard version of the problem. The only difference is that in this\nversion \n    1 \n    \u2264 n \n    \u2264 300\n. In the cinema seats can be represented as\nthe table with \n    n\n rows and \n    m\n columns. The rows are numbered with\nintegers from \n    1\n to \n    n\n. The seats in each row are numbered with\nconsecutive integers from left to right: in the \n    k\n-th row from \n    m (k -\n    1) + 1\n to \n    m k\n for all rows \n    1 \n    \u2264 k \n    \u2264 n\n.\n\n    1\n\n    2\n\n    \u22ef\n\n    m - 1\n\n    m\n\n    m + 1\n\n    m +\n    2\n\n    \u22ef\n\n    2 m - 1\n\n    2 m\n\n    2m + 1\n\n    2m +\n    2\n\n    \u22ef\n\n    3 m - 1\n\n    3\n    m\n\n    \u22ee\n\n    \u22ee\n\n    \u22f1\n\n    \u22ee\n\n    \u22ee\n\n    m\n    (n - 1) + 1\n\n    m (n - 1) + 2\n\n    \u22ef\n\n    n m - 1\n\n    n m\n The\ntable with seats indices There are \n    nm\n people who want to go to the\ncinema to watch a new film. They are numbered with integers from \n    1\n to\n\n    nm\n. You should give exactly one seat to each person. It is known, that\nin this cinema as lower seat index you have as better you can see everything\nhappening on the screen. \n    i\n-th person has the level of sight \n    a_i\n.\nLet's define \n    s_i\n as the seat index, that will be given to \n    i\n-th\nperson. You want to give better places for people with lower sight levels, so\nfor any two people \n    i\n, \n    j\n such that \n    a_i < a_j\n it should be\nsatisfied that \n    s_i < s_j\n. After you will give seats to all people they\nwill start coming to their seats. In the order from \n    1\n to \n    nm\n, each\nperson will enter the hall and sit in their seat. To get to their place, the\nperson will go to their seat's row and start moving from the first seat in\nthis row to theirs from left to right. While moving some places will be free,\nsome will be occupied with people already seated. The inconvenience of the\nperson is equal to the number of occupied seats he or she will go through.\nLet's consider an example: \n    m = 5\n, the person has the seat \n    4\n in the\nfirst row, the seats \n    1\n, \n    3\n, \n    5\n in the first row are already\noccupied, the seats \n    2\n and \n    4\n are free. The inconvenience of this\nperson will be \n    2\n, because he will go through occupied seats \n    1\n and\n\n    3\n. Find the minimal total inconvenience (the sum of inconveniences of\nall people), that is possible to have by giving places for all people (all\nconditions should be satisfied). Input The input consists of multiple test\ncases. The first line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    100\n) \u2014 the number of test cases. Description of the test cases follows. The\nfirst line of each test case contains two integers \n    n\n and \n    m\n (\n    1\n    \n    \u2264 n, m \n    \u2264 300\n) \u2014 the number of rows and places in each row\nrespectively. The second line of each test case contains \n    n \n    \u00b7 m\n\nintegers \n    a_1, a_2, \n    \u2026, a_n \n    \u00b7 m\n (\n    1 \n    \u2264 a_i \n    \u2264\n    10^9\n), where \n    a_i\n is the sight level of \n    i\n-th person. It's\nguaranteed that the sum of \n    n \n    \u00b7 m\n over all test cases does not\nexceed \n    10^5\n. Output For each test case print a single integer \u2014 the\nminimal total inconvenience that can be achieved. Example Input 7 1 2 1 2 3 2\n1 1 2 2 3 3 3 3 3 4 4 1 1 1 1 1 2 2 2 1 1 2 1 4 2 50 50 50 50 3 50 50 50 4 2 6\n6 6 6 2 2 9 6 2 9 1 3 3 3 3 3 1 1 3 1 3 1 1 3 3 1 1 3 Output 1 0 4 0 0 0 1\nNote In the first test case, there is a single way to give seats: the first\nperson sits in the first place and the second person \u2014 in the second. The\ntotal inconvenience is \n    1\n. In the second test case the optimal seating\nlooks like this: In the third test case the optimal seating looks like this:\nThe number in a cell is the person's index that sits on this place.\n\n",
        "cf_contest_id": 1566,
        "cf_index": "D2",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "implementation",
            "sortings",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n1 2\r\n1 2\r\n3 2\r\n1 1 2 2 3 3\r\n3 3\r\n3 4 4 1 1 1 1 1 2\r\n2 2\r\n1 1 2 1\r\n4 2\r\n50 50 50 50 3 50 50 50\r\n4 2\r\n6 6 6 6 2 2 9 6\r\n2 9\r\n1 3 3 3 3 3 1 1 3 1 3 1 1 3 3 1 1 3\r\n",
                "1\r\n0\r\n4\r\n0\r\n0\r\n0\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]