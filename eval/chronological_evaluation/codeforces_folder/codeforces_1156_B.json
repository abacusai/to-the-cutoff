[
    {
        "name": "Ugly Pairs",
        "description": "You are given a string, consisting of lowercase Latin letters. A pair of\nneighbouring letters in a string is considered ugly if these letters are also\nneighbouring in a alphabet. For example, string \"abaca\" contains ugly pairs at\npositions \n    (1, 2)\n \u2014 \"ab\" and \n    (2, 3)\n \u2014 \"ba\". Letters 'a' and 'z'\naren't considered neighbouring in a alphabet. Can you rearrange the letters of\na given string so that there are no ugly pairs? You can choose any order of\nthe letters of the given string but you can't add any new letters or remove\nthe existing ones. You can also leave the order the same. If there are\nmultiple answers, print any of them. You also have to answer \n    T\n separate\nqueries. Input The first line contains a single integer \n    T\n (\n    1 \n    \u2264 T\n    \n    \u2264 100\n) \u2014 the number of queries. Each of the next \n    T\n lines contains\nstring \n    s\n \n    (1 \n    \u2264 |s| \n    \u2264 100)\n \u2014 the string for the next query.\nIt is guaranteed that it contains only lowercase Latin letters. Note that in\nhacks you have to set \n    T = 1\n. Output Print \n    T\n lines. The \n    i\n-th\nline should contain the answer to the \n    i\n-th query. If the answer for the\n\n    i\n-th query exists, then print such a rearrangment of letters of the\ngiven string that it contains no ugly pairs. You can choose any order of the\nletters of the given string but you can't add any new letters or remove the\nexisting ones. You can also leave the order the same. If there are multiple\nanswers, print any of them. Otherwise print \"No answer\" for that query.\nExample Input 4 abcd gg codeforces abaca Output cadb gg codfoerces No answer\nNote In the first example answer \"bdac\" is also correct. The second example\nshowcases the fact that only neighbouring in alphabet letters are not allowed.\nThe same letter is ok. There are lots of valid answers for the third example.\n\n",
        "cf_contest_id": 1156,
        "cf_index": "B",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "greedy",
            "implementation",
            "sortings",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\nabcd\r\ngg\r\ncodeforces\r\nabaca\r\n",
                "bdac\r\ngg\r\ncceeoosdfr\r\nNo answer\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\nddb\r\n",
                "bdd\r\n"
            ],
            [
                "1\r\nheaghhcgfb\r\n",
                "aceggbfhhh\r\n"
            ],
            [
                "1\r\neefbhgeabache\r\n",
                "aaceeeegbbfhh\r\n"
            ],
            [
                "1\r\ndgeegbeabh\r\n",
                "aeeeggbbdh\r\n"
            ],
            [
                "1\r\nzcbacx\r\n",
                "bxzacc\r\n"
            ],
            [
                "1\r\nxyxzz\r\n",
                "No answer\r\n"
            ],
            [
                "1\r\nzyy\r\n",
                "No answer\r\n"
            ]
        ]
    }
]