[
    {
        "name": "Mocha and Math",
        "description": "Mocha is a young girl from high school. She has learned so much interesting\nknowledge from her teachers, especially her math teacher. Recently, Mocha is\nlearning about binary system and very interested in bitwise operation. This\nday, Mocha got a sequence \n    a\n of length \n    n\n. In each operation, she\ncan select an arbitrary interval \n    [l, r]\n and for all values \n    i\n\n(\n    0\n    \u2264 i \n    \u2264 r-l\n), replace \n    a_l+i\n with \n    a_l+i\n     \n    &\n      a_r-i\n at the same time, where \n    &\n denotes the bitwise\nAND operation. This operation can be performed any number of times. For\nexample, if \n    n=5\n, the array is \n    [a_1,a_2,a_3,a_4,a_5]\n, and Mocha\nselects the interval \n    [2,5]\n, then the new array is\n\n    [a_1,a_2\n     \n    &\n      a_5, a_3\n     \n    &\n      a_4, a_4\n     \n    &\n      a_3,\n    a_5\n     \n    &\n      a_2]\n. Now Mocha wants to minimize the maximum value in the\nsequence. As her best friend, can you help her to get the answer? Input Each\ntest contains multiple test cases. The first line contains a single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test cases. Each test case\nconsists of two lines. The first line of each test case contains a single\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 100\n) \u2014 the length of the sequence. The\nsecond line of each test case contains \n    n\n integers \n    a_1, a_2, \n    \u2026,\n    a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 10^9\n). Output For each test case, print one\ninteger \u2014 the minimal value of the maximum value in the sequence. Example\nInput 4 2 1 2 3 1 1 3 4 3 11 3 7 5 11 7 15 3 7 Output 0 1 3 3 Note In the\nfirst test case, Mocha can choose the interval \n    [1,2]\n, then the sequence\nbecomes \n    [ 0, 0]\n, where the first element is \n    1\n     \n    &\n     2\n, and\nthe second element is \n    2\n     \n    &\n     1\n. In the second test case, Mocha can\nchoose the interval \n    [1,3]\n, then the sequence becomes \n    [ 1,1,1]\n,\nwhere the first element is \n    1\n     \n    &\n     3\n, the second element is\n\n    1\n     \n    &\n     1\n, and the third element is \n    3\n     \n    &\n     1\n.\n\n",
        "cf_contest_id": 1559,
        "cf_index": "A",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "constructive algorithms",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2\r\n1 2\r\n3\r\n1 1 3\r\n4\r\n3 11 3 7\r\n5\r\n11 7 15 3 7\r\n",
                "0\r\n1\r\n3\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n8\r\n1 3 6 12 24 48 96 192\r\n15\r\n1 3 6 12 24 48 96 192 96 48 24 12 6 3 1\r\n6\r\n47 7 21 21 21 21\r\n",
                "0\r\n0\r\n5\r\n"
            ],
            [
                "1\r\n1\r\n10\r\n",
                "10\r\n"
            ],
            [
                "1\r\n2\r\n2 3\r\n",
                "2\r\n"
            ],
            [
                "1\r\n3\r\n12 16 24\r\n",
                "0\r\n"
            ],
            [
                "1\r\n3\r\n3 5 7\r\n",
                "1\r\n"
            ],
            [
                "1\r\n4\r\n2 4 8 16\r\n",
                "0\r\n"
            ],
            [
                "1\r\n2\r\n3 2\r\n",
                "2\r\n"
            ],
            [
                "1\r\n3\r\n2 7 2\r\n",
                "2\r\n"
            ],
            [
                "1\r\n1\r\n123\r\n",
                "123\r\n"
            ],
            [
                "1\r\n1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "1\r\n1\r\n1000000\r\n",
                "1000000\r\n"
            ],
            [
                "1\r\n2\r\n2 4\r\n",
                "0\r\n"
            ],
            [
                "1\r\n2\r\n6 7\r\n",
                "6\r\n"
            ],
            [
                "1\r\n2\r\n6 10\r\n",
                "2\r\n"
            ],
            [
                "1\r\n2\r\n1 1\r\n",
                "1\r\n"
            ],
            [
                "1\r\n5\r\n2 2 2 2 0\r\n",
                "0\r\n"
            ],
            [
                "1\r\n1\r\n5\r\n",
                "5\r\n"
            ],
            [
                "1\r\n2\r\n4 2\r\n",
                "0\r\n"
            ],
            [
                "1\r\n2\r\n8 9\r\n",
                "8\r\n"
            ],
            [
                "1\r\n2\r\n4 5\r\n",
                "4\r\n"
            ],
            [
                "1\r\n2\r\n1048576 1048576\r\n",
                "1048576\r\n"
            ],
            [
                "1\r\n28\r\n268435454 268435453 268435451 268435447 268435439 268435423 268435391 268435327 268435199 268434943 268434431 268433407 268431359 268427263 268419071 268402687 268369919 268304383 268173311 267911167 267386879 266338303 264241151 260046847 251658239 234881023 201326591 134217727\r\n",
                "0\r\n"
            ],
            [
                "2\r\n1\r\n5\r\n1\r\n7\r\n",
                "5\r\n7\r\n"
            ],
            [
                "1\r\n3\r\n1 2 3\r\n",
                "0\r\n"
            ],
            [
                "1\r\n3\r\n3 6 4\r\n",
                "0\r\n"
            ],
            [
                "1\r\n3\r\n3 4 3\r\n",
                "0\r\n"
            ]
        ]
    }
]