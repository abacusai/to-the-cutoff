[
    {
        "name": "PriceFixed",
        "description": "Lena is the most economical girl in Moscow. So, when her dad asks her to buy\nsome food for a trip to the country, she goes to the best store \u2014\n\"PriceFixed\". Here are some rules of that store: The store has an infinite\nnumber of items of every product. All products have the same price: \n    2\n\nrubles per item. For every product \n    i\n there is a discount for experienced\nbuyers: if you buy \n    b_i\n items of products (of any type, not necessarily\ntype \n    i\n), then for all future purchases of the \n    i\n-th product there\nis a \n    50\n    %\n discount (so you can buy an item of the \n    i\n-th product\nfor \n    1\n ruble!). Lena needs to buy \n    n\n products: she must purchase at\nleast \n    a_i\n items of the \n    i\n-th product. Help Lena to calculate the\nminimum amount of money she needs to spend if she optimally chooses the order\nof purchasing. Note that if she wants, she can buy more items of some product\nthan needed. Input The first line contains a single integer \n    n\n (\n    1\n    \n    \u2264 n \n    \u2264 100\n     000\n) \u2014 the number of products. Each of next \n    n\n\nlines contains a product description. Each description consists of two\nintegers \n    a_i\n and \n    b_i\n (\n    1 \n    \u2264 a_i \n    \u2264 10^14\n, \n    1\n    \n    \u2264 b_i \n    \u2264 10^14\n) \u2014 the required number of the \n    i\n-th product\nand how many products you need to buy to get the discount on the \n    i\n-th\nproduct. The sum of all \n    a_i\n does not exceed \n    10^14\n. Output Output\nthe minimum sum that Lena needs to make all purchases. Examples Input 3 3 4 1\n3 1 5 Output 8 Input 5 2 7 2 8 1 2 2 4 1 8 Output 12 Note In the first\nexample, Lena can purchase the products in the following way: one item of\nproduct \n    3\n for \n    2\n rubles, one item of product \n    1\n for \n    2\n\nrubles, one item of product \n    1\n for \n    2\n rubles, one item of product\n\n    2\n for \n    1\n ruble (she can use the discount because \n    3\n items are\nalready purchased), one item of product \n    1\n for \n    1\n ruble (she can use\nthe discount because \n    4\n items are already purchased). In total, she\nspends \n    8\n rubles. It can be proved that it is impossible to spend less.\nIn the second example Lena can purchase the products in the following way: one\nitem of product \n    1\n for \n    2\n rubles, two items of product \n    2\n for\n\n    2\n rubles for each, one item of product \n    5\n for \n    2\n rubles, one\nitem of product \n    3\n for \n    1\n ruble, two items of product \n    4\n for\n\n    1\n ruble for each, one item of product \n    1\n for \n    1\n ruble. In\ntotal, she spends \n    12\n rubles.\n\n",
        "cf_contest_id": 1539,
        "cf_index": "D",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "greedy",
            "implementation",
            "sortings",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3 4\r\n1 3\r\n1 5\r\n",
                "8\r\n"
            ],
            [
                "5\r\n2 7\r\n2 8\r\n1 2\r\n2 4\r\n1 8\r\n",
                "12\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n8 2\r\n",
                "10\r\n"
            ],
            [
                "8\r\n1 8\r\n1 6\r\n1 5\r\n1 3\r\n1 3\r\n1 8\r\n1 7\r\n1 3\r\n",
                "11\r\n"
            ],
            [
                "4\r\n4 1\r\n2 2\r\n1 6\r\n1 2\r\n",
                "9\r\n"
            ],
            [
                "8\r\n1 63658803333197\r\n1 26806908300107\r\n1 37622010993115\r\n1 8932487734606\r\n1 55358687683237\r\n1 44940811911137\r\n1 29009786659098\r\n1 95047244855088\r\n",
                "16\r\n"
            ],
            [
                "2\r\n7 7\r\n1 4\r\n",
                "14\r\n"
            ],
            [
                "15\r\n1 7\r\n1 14\r\n1 6\r\n1 13\r\n1 9\r\n1 10\r\n1 5\r\n1 14\r\n1 14\r\n1 11\r\n1 5\r\n1 4\r\n1 10\r\n1 8\r\n1 9\r\n",
                "19\r\n"
            ],
            [
                "7\r\n2 11\r\n3 12\r\n2 1\r\n2 6\r\n1 6\r\n2 2\r\n3 14\r\n",
                "19\r\n"
            ],
            [
                "15\r\n1 18646259228611\r\n1 76062756486449\r\n1 5817259716888\r\n1 22110867828535\r\n1 56957498169888\r\n1 40799537235509\r\n1 56529154503793\r\n1 56148198559428\r\n1 77940886559829\r\n1 74079407528201\r\n1 6574734766207\r\n1 79264199999788\r\n1 19171266033881\r\n1 38437872037474\r\n1 34320923862986\r\n",
                "30\r\n"
            ],
            [
                "8\r\n1 7\r\n3 16\r\n1 15\r\n2 1\r\n1 15\r\n4 11\r\n1 4\r\n2 15\r\n",
                "22\r\n"
            ],
            [
                "4\r\n2 1\r\n3 2\r\n4 3\r\n5 100\r\n",
                "19\r\n"
            ],
            [
                "5\r\n3 10\r\n2 12\r\n1 11\r\n3 10\r\n1 8\r\n",
                "19\r\n"
            ]
        ]
    }
]