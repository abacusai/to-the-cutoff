[
    {
        "name": "Second-Price Auction",
        "description": "In this problem we consider a special type of an auction, which is called the\nsecond-price auction. As in regular auction n bidders place a bid which is\nprice a bidder ready to pay. The auction is closed, that is, each bidder\nsecretly informs the organizer of the auction price he is willing to pay.\nAfter that, the auction winner is the participant who offered the highest\nprice. However, he pay not the price he offers, but the highest price among\nthe offers of other participants (hence the name: the second-price auction).\nWrite a program that reads prices offered by bidders and finds the winner and\nthe price he will pay. Consider that all of the offered prices are different.\nInput The first line of the input contains n (2 \u2264 n \u2264 1000) \u2014 number of\nbidders. The second line contains n distinct integer numbers p1, p2, ... pn,\nseparated by single spaces (1 \u2264 pi \u2264 10000), where pi stands for the price\noffered by the i-th bidder. Output The single output line should contain two\nintegers: index of the winner and the price he will pay. Indices are 1-based.\nExamples Input 2 5 7 Output 2 5 Input 3 10 2 8 Output 1 8 Input 6 3 8 2 9 4 14\nOutput 6 9\n\n",
        "cf_contest_id": 386,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n5 7\r\n",
                "2 5\r\n"
            ],
            [
                "3\r\n10 2 8\r\n",
                "1 8\r\n"
            ],
            [
                "6\r\n3 8 2 9 4 14\r\n",
                "6 9\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n4707 7586 4221 5842\r\n",
                "2 5842\r\n"
            ],
            [
                "5\r\n3304 4227 4869 6937 6002\r\n",
                "4 6002\r\n"
            ],
            [
                "6\r\n5083 3289 7708 5362 9031 7458\r\n",
                "5 7708\r\n"
            ],
            [
                "7\r\n9038 6222 3392 1706 3778 1807 2657\r\n",
                "1 6222\r\n"
            ],
            [
                "8\r\n7062 2194 4481 3864 7470 1814 8091 733\r\n",
                "7 7470\r\n"
            ],
            [
                "9\r\n2678 5659 9199 2628 7906 7496 4524 2663 3408\r\n",
                "3 7906\r\n"
            ],
            [
                "2\r\n3458 1504\r\n",
                "1 1504\r\n"
            ],
            [
                "50\r\n9237 3904 407 9052 6657 9229 9752 3888 7732 2512 4614 1055 2355 7108 6506 6849 2529 8862 159 8630 7906 7941 960 8470 333 8659 54 9475 3163 5625 6393 6814 2656 3388 169 7918 4881 8468 9983 6281 6340 280 5108 2996 101 7617 3313 8172 326 1991\r\n",
                "39 9752\r\n"
            ],
            [
                "100\r\n2515 3324 7975 6171 4240 1217 4829 5203 8603 6900 3031 4699 4732 6070 4221 3228 6497 7359 9130 4346 4619 1109 3945 5442 3271 16 9711 2045 6410 2301 3406 8125 6003 1892 1260 9661 3940 6692 4708 7027 4930 6925 1979 5361 4263 3144 867 8639 6230 5562 9714 3676 4231 3347 4733 4920 4881 3431 1059 7313 8912 3038 9308 72 9583 7009 3034 7425 2398 6141 3245 2495 2933 6710 8289 9806 1226 8393 7349 6462 1618 9613 3546 6012 2964 9995 1578 210 2123 4874 1252 8625 348 8020 803 7244 9080 5088 706 2602\r\n",
                "86 9806\r\n"
            ],
            [
                "2\r\n2 1\r\n",
                "1 1\r\n"
            ],
            [
                "2\r\n1 2\r\n",
                "2 1\r\n"
            ],
            [
                "3\r\n10 20 30\r\n",
                "3 20\r\n"
            ],
            [
                "3\r\n10 30 20\r\n",
                "2 20\r\n"
            ],
            [
                "3\r\n20 10 30\r\n",
                "3 20\r\n"
            ],
            [
                "3\r\n20 30 10\r\n",
                "2 20\r\n"
            ],
            [
                "3\r\n30 10 20\r\n",
                "1 20\r\n"
            ],
            [
                "3\r\n30 20 10\r\n",
                "1 20\r\n"
            ],
            [
                "2\r\n1 10000\r\n",
                "2 1\r\n"
            ],
            [
                "2\r\n10000 999\r\n",
                "1 999\r\n"
            ],
            [
                "3\r\n3 4 1\r\n",
                "2 3\r\n"
            ],
            [
                "6\r\n1 2 24 6 5 7\r\n",
                "3 7\r\n"
            ]
        ]
    }
]