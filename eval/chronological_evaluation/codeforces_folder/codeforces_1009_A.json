[
    {
        "name": "Game Shopping",
        "description": "Maxim wants to buy some games at the local game shop. There are \n    n\n games\nin the shop, the \n    i\n-th game costs \n    c_i\n. Maxim has a wallet which can\nbe represented as an array of integers. His wallet contains \n    m\n bills, the\n\n    j\n-th bill has value \n    a_j\n. Games in the shop are ordered from left\nto right, Maxim tries to buy every game in that order. When Maxim stands at\nthe position \n    i\n in the shop, he takes the first bill from his wallet (if\nhis wallet is empty then he proceeds to the next position immediately) and\ntries to buy the \n    i\n-th game using this bill. After Maxim tried to buy the\n\n    n\n-th game, he leaves the shop. Maxim buys the \n    i\n-th game if and\nonly if the value of the first bill (which he takes) from his wallet is\ngreater or equal to the cost of the \n    i\n-th game. If he successfully buys\nthe \n    i\n-th game, the first bill from his wallet disappears and the next\nbill becomes first. Otherwise Maxim leaves the first bill in his wallet (this\nbill still remains the first one) and proceeds to the next game. For example,\nfor array \n    c = [2, 4, 5, 2, 4]\n and array \n    a = [5, 3, 4, 6]\n the\nfollowing process takes place: Maxim buys the first game using the first bill\n(its value is \n    5\n), the bill disappears, after that the second bill (with\nvalue \n    3\n) becomes the first one in Maxim's wallet, then Maxim doesn't buy\nthe second game because \n    c_2 > a_2\n, the same with the third game, then he\nbuys the fourth game using the bill of value \n    a_2\n (the third bill becomes\nthe first one in Maxim's wallet) and buys the fifth game using the bill of\nvalue \n    a_3\n. Your task is to get the number of games Maxim will buy. Input\nThe first line of the input contains two integers \n    n\n and \n    m\n (\n    1\n    \n    \u2264 n, m \n    \u2264 1000\n) \u2014 the number of games and the number of bills in\nMaxim's wallet. The second line of the input contains \n    n\n integers \n    c_1,\n    c_2, \n    \u2026, c_n\n (\n    1 \n    \u2264 c_i \n    \u2264 1000\n), where \n    c_i\n is the\ncost of the \n    i\n-th game. The third line of the input contains \n    m\n\nintegers \n    a_1, a_2, \n    \u2026, a_m\n (\n    1 \n    \u2264 a_j \n    \u2264 1000\n), where\n\n    a_j\n is the value of the \n    j\n-th bill from the Maxim's wallet. Output\nPrint a single integer \u2014 the number of games Maxim will buy. Examples Input 5\n4 2 4 5 2 4 5 3 4 6 Output 3 Input 5 2 20 40 50 20 40 19 20 Output 0 Input 6 4\n4 8 15 16 23 42 1000 1000 1000 1000 Output 4 Note The first example is\ndescribed in the problem statement. In the second example Maxim cannot buy any\ngame because the value of the first bill in his wallet is smaller than the\ncost of any game in the shop. In the third example the values of the bills in\nMaxim's wallet are large enough to buy any game he encounter until he runs out\nof bills in his wallet.\n\n",
        "cf_contest_id": 1009,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 4\r\n2 4 5 2 4\r\n5 3 4 6\r\n",
                "3\r\n"
            ],
            [
                "5 2\r\n20 40 50 20 40\r\n19 20\r\n",
                "0\r\n"
            ],
            [
                "6 4\r\n4 8 15 16 23 42\r\n1000 1000 1000 1000\r\n",
                "4\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 1\r\n1 1 1 1 1\r\n5\r\n",
                "1\r\n"
            ],
            [
                "5 1\r\n10 1 1 1 1\r\n1000\r\n",
                "1\r\n"
            ],
            [
                "5 1\r\n100 100 100 100 100\r\n100\r\n",
                "1\r\n"
            ],
            [
                "2 1\r\n2 1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "2 3\r\n3 1\r\n2 4 2\r\n",
                "1\r\n"
            ],
            [
                "1 5\r\n4\r\n1 4 3 3 2\r\n",
                "0\r\n"
            ],
            [
                "5 3\r\n4 2 3 1 1\r\n2 1 3\r\n",
                "3\r\n"
            ],
            [
                "3 5\r\n5 2 5\r\n1 4 1 4 2\r\n",
                "0\r\n"
            ],
            [
                "7 3\r\n9 7 10 2 1 1 1\r\n8 9 6\r\n",
                "3\r\n"
            ],
            [
                "5 3\r\n2 5 3 3 2\r\n2 5 3\r\n",
                "3\r\n"
            ]
        ]
    }
]