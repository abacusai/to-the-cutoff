[
    {
        "name": "Into Blocks (easy version)",
        "description": "This is an easier version of the next problem. In this version, \n    q = 0\n. A\nsequence of integers is called nice if its elements are arranged in blocks\nlike in \n    [3, 3, 3, 4, 1, 1]\n. Formally, if two elements are equal,\neverything in between must also be equal. Let's define difficulty of a\nsequence as a minimum possible number of elements to change to get a nice\nsequence. However, if you change at least one element of value \n    x\n to\nvalue \n    y\n, you must also change all other elements of value \n    x\n into\n\n    y\n as well. For example, for \n    [3, 3, 1, 3, 2, 1, 2]\n it isn't allowed\nto change first \n    1\n to \n    3\n and second \n    1\n to \n    2\n. You need to\nleave \n    1\n's untouched or change them to the same value. You are given a\nsequence of integers \n    a_1, a_2, \n    \u2026, a_n\n and \n    q\n updates. Each\nupdate is of form \"\n    i\n \n    x\n\" \u2014 change \n    a_i\n to \n    x\n. Updates are\nnot independent (the change stays for the future). Print the difficulty of the\ninitial sequence and of the sequence after every update. Input The first line\ncontains integers \n    n\n and \n    q\n (\n    1 \n    \u2264 n \n    \u2264 200\n     000\n, \n    q\n    = 0\n), the length of the sequence and the number of the updates. The second\nline contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i\n    \n    \u2264 200\n     000\n), the initial sequence. Each of the following \n    q\n\nlines contains integers \n    i_t\n and \n    x_t\n (\n    1 \n    \u2264 i_t \n    \u2264 n\n,\n\n    1 \n    \u2264 x_t \n    \u2264 200\n     000\n), the position and the new value for this\nposition. Output Print \n    q+1\n integers, the answer for the initial sequence\nand the answer after every update. Examples Input 5 0 3 7 3 7 3 Output 2 Input\n10 0 1 2 1 2 3 1 1 1 50 1 Output 4 Input 6 0 6 6 3 3 4 4 Output 0 Input 7 0 3\n3 1 3 2 1 2 Output 4\n\n",
        "cf_contest_id": 1209,
        "cf_index": "G1",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dsu",
            "greedy",
            "implementation",
            "two pointers"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 0\r\n3 7 3 7 3\r\n",
                "2"
            ],
            [
                "10 0\r\n1 2 1 2 3 1 1 1 50 1\r\n",
                "4"
            ],
            [
                "6 0\r\n6 6 3 3 4 4\r\n",
                "0"
            ],
            [
                "7 0\r\n3 3 1 3 2 1 2\r\n",
                "4"
            ]
        ],
        "private_cases": [
            [
                "5 0\r\n1 2 1 2 1\r\n",
                "2"
            ],
            [
                "5 0\r\n2 3 2 3 3\r\n",
                "2"
            ],
            [
                "100 0\r\n6 7 100 8 5 61 5 75 59 65 51 47 83 37 34 54 87 46 4 26 21 87 12 97 86 68 60 11 62 76 14 83 29 31 91 62 57 80 47 75 85 97 62 77 91 86 14 25 48 77 83 65 39 61 78 77 45 46 90 74 100 91 86 98 55 5 84 42 91 69 100 4 74 98 60 37 75 44 41 12 15 34 36 1 99 16 7 87 36 26 79 42 41 84 17 98 72 16 38 55\r\n",
                "95"
            ],
            [
                "100 0\r\n91 32 10 38 92 14 100 7 48 72 47 10 76 99 56 53 41 46 68 18 37 47 61 99 16 60 12 51 17 50 69 8 82 78 34 95 3 15 79 4 51 45 83 91 81 68 79 91 16 30 6 86 72 97 63 75 67 14 50 60 1 13 77 37 57 14 65 79 41 62 15 11 74 56 76 62 54 52 9 96 8 27 44 21 59 57 17 53 15 66 49 94 62 58 71 53 88 97 65 37\r\n",
                "97"
            ],
            [
                "100 0\r\n44 8 97 30 48 96 35 54 42 9 66 27 99 57 74 97 90 24 78 97 98 55 74 56 25 30 34 26 12 87 77 12 7 49 79 2 95 33 72 50 47 28 95 31 99 27 96 43 9 62 6 21 55 22 10 79 71 27 85 37 32 66 54 61 48 48 10 61 57 78 91 41 30 43 29 70 96 4 36 19 50 99 16 68 8 80 55 74 18 35 54 84 70 9 17 77 69 71 67 24\r\n",
                "96"
            ]
        ]
    }
]