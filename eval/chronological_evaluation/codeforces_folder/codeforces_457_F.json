[
    {
        "name": "An easy problem about trees",
        "description": "Pieguy and Piegirl are playing a game. They have a rooted binary tree, that\nhas a property that each node is either a leaf or has exactly two children.\nEach leaf has a number associated with it. On his/her turn a player can choose\nany two leafs that share their immediate parent, remove them, and associate\neither of their values with their parent, that now became a leaf (the player\ndecides which of the two values to associate). The game ends when only one\nnode (the one that was the root of the tree) is left. Pieguy goes first, and\nhis goal is to maximize the value that will be associated with the root when\nthe game ends. Piegirl wants to minimize that value. Assuming that both\nplayers are playing optimally, what number will be associated with the root\nwhen the game ends? Input First line contains a single integer t (1 \u2264 t \u2264 100)\n\u2014 number of test cases. Then t test cases follow. Each test case begins with\nan empty line, followed by a line with a single integer n (1 \u2264 n \u2264 250),\nfollowed by n lines describing n nodes of the tree. Each of those n lines\neither contains a non-negative number ai, indicating a leaf node with value ai\n(0 \u2264 ai \u2264 1000) associated with it, or - 1 followed by integers l and r,\nindicating a non-leaf node with children l and r (0 \u2264 l, r \u2264 n - 1). Nodes are\nnumbered from 0 to n - 1. The root is always node 0. Output For each test case\nprint one line with one integer on it \u2014 the number that will be associated\nwith the root when the game ends. Examples Input 4 3 -1 1 2 10 5 5 -1 1 2 -1 3\n4 10 5 20 7 -1 1 2 -1 3 4 -1 5 6 1 2 3 4 11 -1 1 2 -1 3 4 -1 5 6 -1 7 8 15 7\n-1 9 10 7 8 9 11 Output 10 10 4 8\n\n",
        "cf_contest_id": 457,
        "cf_index": "F",
        "cf_rating": 3200,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "games",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n\r\n3\r\n-1 1 2\r\n10\r\n5\r\n\r\n5\r\n-1 1 2\r\n-1 3 4\r\n10\r\n5\r\n20\r\n\r\n7\r\n-1 1 2\r\n-1 3 4\r\n-1 5 6\r\n1\r\n2\r\n3\r\n4\r\n\r\n11\r\n-1 1 2\r\n-1 3 4\r\n-1 5 6\r\n-1 7 8\r\n15\r\n7\r\n-1 9 10\r\n7\r\n8\r\n9\r\n11\r\n",
                "10\r\n10\r\n4\r\n8\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n\r\n15\r\n-1 13 14\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n-1 1 2\r\n-1 3 4\r\n-1 5 6\r\n-1 7 8\r\n-1 9 10\r\n-1 11 12\r\n\r\n5\r\n-1 3 4\r\n1\r\n2\r\n3\r\n-1 1 2\r\n",
                "6\r\n2\r\n"
            ]
        ]
    }
]