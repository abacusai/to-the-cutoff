[
    {
        "name": "Ian Visits Mary",
        "description": "Ian and Mary are frogs living on lattice points of the Cartesian coordinate\nplane, with Ian living on \n    (0,0)\n and Mary living on \n    (a,b)\n. Ian\nwould like to visit Mary by jumping around the Cartesian coordinate plane.\nEvery second, he jumps from his current position \n    (x_p, y_p)\n to another\nlattice point \n    (x_q, y_q)\n, such that no lattice point other than \n    (x_p,\n    y_p)\n and \n    (x_q, y_q)\n lies on the segment between point \n    (x_p,\n    y_p)\n and point \n    (x_q, y_q)\n. As Ian wants to meet Mary as soon as\npossible, he wants to jump towards point \n    (a,b)\n using at most \n    2\n\njumps. Unfortunately, Ian is not good at maths. Can you help him? A lattice\npoint is defined as a point with both the \n    x\n-coordinate and\n\n    y\n-coordinate being integers. Input The first line contains a single\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 500\n) \u2014 the number of test cases. The\ndescription of test cases follows. The first and only line of each test case\ncontains two integers \n    a\n and \n    b\n (\n    1\n    \u2264 a,b\n    \u2264 10^9\n) \u2014 the\ncoordinates of the lattice point where Mary lives. Output For each test case,\nprint an integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2\n) on the first line, denoting\nthe number of jumps Ian uses in order to meet Mary. Note that you do not need\nto minimize the number of jumps. On the \n    i\n-th line of the next \n    n\n\nlines, print two integers \n    0 \n    \u2264 x_i,y_i \n    \u2264 10^9\n separated by a\nspace, denoting Ian's location \n    (x_i,y_i)\n after the \n    i\n-th jump.\n\n    x_n = a\n, \n    y_n = b\n must hold. Ian's initial location and his\nlocations after each of the \n    n\n jumps need not be distinct. If there are\nmultiple solutions, output any. Example Input 8 3 4 4 4 3 6 2 2 1 1 7 3 2022\n2023 1000000000 1000000000 Output 1 3 4 2 3 2 4 4 2 5 3 3 6 2 1 0 2 2 1 1 1 1\n7 3 1 2022 2023 2 69420420 469696969 1000000000 1000000000 Note In the first\ntest case: \n    (0,0) \n    \u2192 (3,4)\n In the second test case: \n    (0,0) \n    \u2192\n    (3,2) \n    \u2192 (4,4)\n In the third test case: \n    (0,0) \n    \u2192 (5,3) \n    \u2192\n    (3,6)\n\n\n",
        "cf_contest_id": 1816,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "geometry",
            "number theory"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8\r\n3 4\r\n4 4\r\n3 6\r\n2 2\r\n1 1\r\n7 3\r\n2022 2023\r\n1000000000 1000000000\r\n",
                "2 2 1 3 4\r\n\r\n2 3 1 4 4\r\n\r\n2 2 1 3 6\r\n\r\n2 1 1 2 2\r\n\r\n2 0 1 1 1\r\n\r\n2 6 1 7 3\r\n\r\n2 2021 1 2022 2023\r\n\r\n2 999999999 1 1000000000 1000000000\r\n\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n158254879 148247161\r\n",
                "2 158254878 1 158254879 148247161\r\n\r\n"
            ],
            [
                "1\r\n117650 105\r\n",
                "2 117649 1 117650 105\r\n\r\n"
            ],
            [
                "2\r\n994 945\r\n1000 735\r\n",
                "2 993 1 994 945\r\n\r\n2 999 1 1000 735\r\n\r\n"
            ],
            [
                "1\r\n6 105\r\n",
                "2 5 1 6 105\r\n\r\n"
            ]
        ]
    }
]