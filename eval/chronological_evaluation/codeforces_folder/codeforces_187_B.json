[
    {
        "name": "AlgoRace",
        "description": "PMP is getting a warrior. He is practicing a lot, but the results are not\nacceptable yet. This time instead of programming contests, he decided to\ncompete in a car racing to increase the spirit of victory. He decides to\nchoose a competition that also exhibits algorithmic features. AlgoRace is a\nspecial league of car racing where different teams compete in a country of n\ncities. Cities are numbered 1 through n. Every two distinct cities in the\ncountry are connected with one bidirectional road. Each competing team should\nintroduce one driver and a set of cars. The competition is held in r rounds.\nIn i-th round, drivers will start at city si and finish at city ti. Drivers\nare allowed to change their cars at most ki times. Changing cars can take\nplace in any city in no time. One car can be used multiple times in one round,\nbut total number of changes should not exceed ki. Drivers can freely choose\ntheir path to destination. PMP has prepared m type of purpose-built cars.\nBeside for PMP\u2019s driving skills, depending on properties of the car and the\nroad, a car traverses each road in each direction in different times. PMP\nWarriors wants to devise best strategies of choosing car and roads in each\nround to maximize the chance of winning the cup. For each round they want to\nfind the minimum time required to finish it. Input The first line contains\nthree space-separated integers n, m, r (2 \u2264 n \u2264 60, 1 \u2264 m \u2264 60, 1 \u2264 r \u2264 10^5)\n\u2014 the number of cities, the number of different types of cars and the number\nof rounds in the competition, correspondingly. Next m sets of n \u00d7 n matrices\nof integers between 0 to 10^6 (inclusive) will follow \u2014 describing the time\none car requires to traverse different roads. The k-th integer in j-th line of\nthe i-th set is the time that i-th car requires to traverse the road from j-th\ncity to k-th city. These matrices are not necessarily symmetric, but their\ndiagonal is always zero. Next r lines contain description of the rounds. The\ni-th of these lines contains space-separated integers si, ti, ki (1 \u2264 si, ti \u2264\nn, si \u2260 ti, 0 \u2264 ki \u2264 1000) \u2014 the number of starting city, finishing city and\nthe number of possible car changes in i-th round, correspondingly. Output For\neach round you should print the minimum required time to complete the round in\na single line. Examples Input 4 2 3 0 1 5 6 2 0 3 6 1 3 0 1 6 6 7 0 0 3 5 6 2\n0 1 6 1 3 0 2 6 6 7 0 1 4 2 1 4 1 1 4 3 Output 3 4 3 Input 4 2 3 0 7 3 3 8 0\n10 5 1 1 0 4 8 9 2 0 0 3 3 9 7 0 4 9 3 8 0 4 4 8 9 0 2 3 3 2 1 3 1 2 2 Output\n4 5 3 Note In the first sample, in all rounds PMP goes from city #1 to city\n#2, then city #3 and finally city #4. But the sequences of types of the cars\nhe uses are (1, 2, 1) in the first round and (1, 2, 2) in the second round. In\nthe third round, although he can change his car three times, he uses the same\nstrategy as the first round which only needs two car changes.\n\n",
        "cf_contest_id": 187,
        "cf_index": "B",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "shortest paths"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 2 3\r\n0 1 5 6\r\n2 0 3 6\r\n1 3 0 1\r\n6 6 7 0\r\n0 3 5 6\r\n2 0 1 6\r\n1 3 0 2\r\n6 6 7 0\r\n1 4 2\r\n1 4 1\r\n1 4 3\r\n",
                "3\r\n4\r\n3\r\n"
            ],
            [
                "4 2 3\r\n0 7 3 3\r\n8 0 10 5\r\n1 1 0 4\r\n8 9 2 0\r\n0 3 3 9\r\n7 0 4 9\r\n3 8 0 4\r\n4 8 9 0\r\n2 3 3\r\n2 1 3\r\n1 2 2\r\n",
                "4\r\n5\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "4 3 4\r\n0 1 7 6\r\n10 0 8 5\r\n4 7 0 7\r\n7 4 4 0\r\n0 6 6 10\r\n5 0 1 9\r\n7 6 0 5\r\n6 2 8 0\r\n0 5 1 7\r\n2 0 6 3\r\n7 8 0 10\r\n8 3 4 0\r\n2 4 1\r\n2 1 2\r\n1 4 0\r\n4 2 0\r\n",
                "3\r\n2\r\n6\r\n2\r\n"
            ],
            [
                "2 4 10\r\n0 1\r\n3 0\r\n0 11\r\n11 0\r\n0 8\r\n11 0\r\n0 15\r\n6 0\r\n1 2 0\r\n1 2 3\r\n1 2 1\r\n1 2 0\r\n2 1 1\r\n1 2 1\r\n1 2 0\r\n2 1 1\r\n1 2 1\r\n2 1 3\r\n",
                "1\r\n1\r\n1\r\n1\r\n3\r\n1\r\n1\r\n3\r\n1\r\n3\r\n"
            ],
            [
                "2 1 2\r\n0 16\r\n27 0\r\n1 2 0\r\n1 2 1\r\n",
                "16\r\n16\r\n"
            ],
            [
                "5 2 1\r\n0 1 1000000 1000000 1000000\r\n1000000 0 1000000 1000000 1000000\r\n1000000 1000000 0 1 1000000\r\n1000000 1000000 1000000 0 1000000\r\n1000000 1000000 1000000 1000000 0\r\n0 1000000 1000000 1000000 1000000\r\n1000000 0 1 1000000 1000000\r\n1000000 1000000 0 1000000 1000000\r\n1000000 1000000 1000000 0 1\r\n1000000 1000000 1000000 1000000 0\r\n1 5 1000\r\n",
                "4\r\n"
            ],
            [
                "5 2 1\r\n0 1 1000000 1000000 1000000\r\n1000000 0 1000000 1000000 1000000\r\n1000000 1000000 0 1 1000000\r\n1000000 1000000 1000000 0 1000000\r\n1000000 1000000 1000000 1000000 0\r\n0 1000000 1000000 1000000 1000000\r\n1000000 0 1 1000000 1000000\r\n1000000 1000000 0 1000000 1000000\r\n1000000 1000000 1000000 0 1\r\n1000000 1000000 1000000 1000000 0\r\n1 5 2\r\n",
                "1000000\r\n"
            ],
            [
                "4 1 1\r\n0 10 10 1\r\n10 0 10 10\r\n10 1 0 10\r\n10 10 1 0\r\n1 2 0\r\n",
                "3\r\n"
            ]
        ]
    }
]