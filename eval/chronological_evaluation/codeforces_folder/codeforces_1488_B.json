[
    {
        "name": "RBS Deletion",
        "description": "A bracket sequence is a string containing only characters \"(\" and \")\". A\nregular bracket sequence (or, shortly, an RBS) is a bracket sequence that can\nbe transformed into a correct arithmetic expression by inserting characters\n\"1\" and \"+\" between the original characters of the sequence. For example:\nbracket sequences \"()()\" and \"(())\" are regular (the resulting expressions\nare: \"(1)+(1)\" and \"((1+1)+1)\"); bracket sequences \")(\", \"(\" and \")\" are not.\nYou are given a string \n    s\n, which is an RBS. You can apply any number of\noperations to this string. Each operation can have one of the following types:\nchoose some non-empty prefix of \n    s\n and remove it from \n    s\n, so \n    s\n\nis still an RBS. For example, we can apply this operation as follows:\n\"(())()(())()()\" \n    \u2192\n \"()()\" (the first \n    10\n characters are\nremoved); choose some contiguous non-empty substring of \n    s\n and remove it\nfrom \n    s\n, so \n    s\n is still an RBS. For example, we can apply this\noperation as follows: \"(())()(())()()\" \n    \u2192\n \"(())()()()\" (the\ncharacters from the \n    7\n-th to the \n    10\n-th are removed). The operation\n\n    2\n can be applied at most \n    k\n times. Calculate the maximum number of\noperations you can apply until \n    s\n becomes empty. Input The first line\ncontains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^5\n) \u2014 the number of test\ncases. Each test case is described by two lines. The first line contains two\nintegers \n    n\n and \n    k\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n; \n    1 \n    \u2264\n    k \n    \u2264 n\n; \n    n\n is even) \u2014 the length of \n    s\n and the maximum number\nof operations of type \n    2\n you can apply. The second line contains a string\n\n    s\n of \n    n\n characters '(' and ')'. This string is an RBS. The sum of\n\n    n\n over all test cases doesn't exceed \n    2 \n    \u00b7 10^5\n. Output For\neach test case, print one integer \u2014 the maximum number of operations you can\napply. Example Input 3 12 2 (()())((())) 6 3 ()()() 8 1 (((()))) Output 4 3 2\n\n",
        "cf_contest_id": 1488,
        "cf_index": "B",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "greedy"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n12 2\r\n(()())((()))\r\n6 3\r\n()()()\r\n8 1\r\n(((())))\r\n",
                "4\r\n3\r\n2\r\n"
            ]
        ],
        "private_cases": []
    }
]