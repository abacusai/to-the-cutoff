[
    {
        "name": "Freezing with Style",
        "description": "This winter is so... well, you've got the idea :-) The Nvodsk road system can\nbe represented as n junctions connected with n - 1 bidirectional roads so that\nthere is a path between any two junctions. The organizers of some event want\nto choose a place to accommodate the participants (junction v), and the place\nto set up the contests (junction u). Besides, at the one hand, they want the\nparticipants to walk about the city and see the neighbourhood (that's why the\ndistance between v and u should be no less than l). On the other hand, they\ndon't want the participants to freeze (so the distance between v and u should\nbe no more than r). Besides, for every street we know its beauty \u2014 some\ninteger from 0 to 10^9. Your task is to choose the path that fits in the\nlength limits and has the largest average beauty. We shall define the average\nbeauty as a median of sequence of the beauties of all roads along the path. We\ncan put it more formally like that: let there be a path with the length k. Let\nai be a non-decreasing sequence that contains exactly k elements. Each number\noccurs there exactly the number of times a road with such beauty occurs along\non path. We will represent the path median as number a\u230ak / 2\u230b, assuming that\nindexation starting from zero is used. \u230ax\u230b \u2014 is number \u0445, rounded down to the\nnearest integer. For example, if a = 0, 5, 12, then the median equals to 5,\nand if a = 0, 5, 7, 12, then the median is number 7. It is guaranteed that\nthere will be at least one path with the suitable quantity of roads. Input The\nfirst line contains three integers n, l, r (1 \u2264 l \u2264 r < n \u2264 10^5). Next n - 1\nlines contain descriptions of roads of the Nvodsk, each line contains three\nintegers ai, bi, ci (1 \u2264 ai, bi \u2264 n, 0 \u2264 ci \u2264 10^9, ai \u2260 bi) \u2014 junctions ai\nand bi are connected with a street whose beauty equals ci. Output Print two\nintegers \u2014 numbers of the junctions, where to accommodate the participants and\nset up the contests, correspondingly. If there are multiple optimal variants,\nprint any of them. Examples Input 6 3 4 1 2 1 2 3 1 3 4 1 4 5 1 5 6 1 Output 4\n1 Input 6 3 4 1 2 1 2 3 1 3 4 1 4 5 2 5 6 2 Output 6 3 Input 5 1 4 1 2 1 1 3 4\n3 4 7 3 5 2 Output 4 3 Input 8 3 6 1 2 9 2 3 7 3 4 7 4 5 8 5 8 2 3 6 3 2 7 4\nOutput 5 1 Note In the first sample all roads have the same beauty. That means\nthat all paths of the positive length have the same median. Thus, any path\nwith length from 3 to 4, inclusive will be valid for us. In the second sample\nthe city looks like that: 1 - 2 - 3 - 4 - 5 - 6. Two last roads are more\nvaluable and we should choose any path that contains both of them and has the\nsuitable length. It is either the path between 2 and 6 or the path between 3\nand 6.\n\n",
        "cf_contest_id": 150,
        "cf_index": "E",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "divide and conquer",
            "trees"
        ],
        "time_limit_seconds": 7.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 3 4\r\n1 2 1\r\n2 3 1\r\n3 4 1\r\n4 5 1\r\n5 6 1\r\n",
                "3 6\r\n"
            ],
            [
                "6 3 4\r\n1 2 1\r\n2 3 1\r\n3 4 1\r\n4 5 2\r\n5 6 2\r\n",
                "3 6\r\n"
            ],
            [
                "5 1 4\r\n1 2 1\r\n1 3 4\r\n3 4 7\r\n3 5 2\r\n",
                "3 4\r\n"
            ],
            [
                "8 3 6\r\n1 2 9\r\n2 3 7\r\n3 4 7\r\n4 5 8\r\n5 8 2\r\n3 6 3\r\n2 7 4\r\n",
                "5 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 2 4\r\n3 10 2\r\n5 7 4\r\n8 2 1\r\n7 10 2\r\n6 10 3\r\n9 5 0\r\n4 5 2\r\n2 10 4\r\n1 8 4\r\n",
                "10 1\r\n"
            ],
            [
                "10 5 5\r\n3 6 1\r\n5 3 9\r\n7 6 6\r\n9 10 7\r\n2 10 9\r\n10 6 2\r\n8 3 5\r\n1 4 8\r\n4 8 1\r\n",
                "1 7\r\n"
            ],
            [
                "10 1 7\r\n5 7 2\r\n1 7 3\r\n10 1 2\r\n4 7 1\r\n2 5 1\r\n7 6 9\r\n9 7 9\r\n3 6 0\r\n8 6 3\r\n",
                "7 9\r\n"
            ],
            [
                "10 3 8\r\n8 7 1\r\n4 9 6\r\n7 1 0\r\n2 9 3\r\n3 9 3\r\n5 9 5\r\n6 2 4\r\n10 3 3\r\n1 3 5\r\n",
                "1 5\r\n"
            ],
            [
                "20 4 9\r\n4 8 8\r\n18 19 0\r\n14 20 4\r\n2 11 2\r\n10 8 0\r\n6 10 4\r\n9 14 7\r\n3 14 9\r\n13 18 4\r\n16 20 0\r\n17 7 3\r\n11 19 1\r\n15 7 4\r\n5 3 7\r\n12 14 2\r\n19 14 7\r\n8 20 6\r\n1 9 0\r\n7 19 4\r\n",
                "3 4\r\n"
            ],
            [
                "20 5 10\r\n8 7 996\r\n15 20 761\r\n14 16 224\r\n17 20 317\r\n18 4 800\r\n13 1 892\r\n16 18 869\r\n2 17 719\r\n11 19 64\r\n19 9 386\r\n9 20 87\r\n12 17 351\r\n10 12 418\r\n7 3 927\r\n1 7 792\r\n5 15 832\r\n4 20 302\r\n3 15 110\r\n6 4 628\r\n",
                "13 5\r\n"
            ],
            [
                "10 2 5\r\n6 3 2\r\n7 1 2\r\n6 8 4\r\n2 8 1\r\n7 5 1\r\n10 5 2\r\n8 9 1\r\n5 6 3\r\n4 7 4\r\n",
                "5 8\r\n"
            ],
            [
                "10 4 4\r\n7 3 11\r\n9 10 51\r\n4 6 11\r\n9 6 24\r\n1 7 3\r\n5 8 33\r\n8 6 10\r\n8 2 33\r\n9 7 66\r\n",
                "7 2\r\n"
            ],
            [
                "10 5 9\r\n4 6 3\r\n1 10 3\r\n9 6 3\r\n7 2 3\r\n1 2 0\r\n3 9 3\r\n5 8 2\r\n7 5 1\r\n8 4 3\r\n",
                "5 3\r\n"
            ],
            [
                "2 1 1\r\n1 2 54\r\n",
                "1 2\r\n"
            ]
        ]
    }
]