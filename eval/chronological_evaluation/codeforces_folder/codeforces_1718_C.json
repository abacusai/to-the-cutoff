[
    {
        "name": "Tonya and Burenka-179",
        "description": "Tonya was given an array of \n    a\n of length \n    n\n written on a postcard\nfor his birthday. For some reason, the postcard turned out to be a cyclic\narray, so the index of the element located strictly to the right of the\n\n    n\n-th is \n    1\n. Tonya wanted to study it better, so he bought a robot\n\"Burenka-179\". A program for Burenka is a pair of numbers \n    (s, k)\n, where\n\n    1 \n    \u2264 s \n    \u2264 n\n, \n    1 \n    \u2264 k \n    \u2264 n-1\n. Note that \n    k\n\ncannot be equal to \n    n\n. Initially, Tonya puts the robot in the position of\nthe array \n    s\n. After that, Burenka makes exactly \n    n\n steps through the\narray. If at the beginning of a step Burenka stands in the position \n    i\n,\nthen the following happens: The number \n    a_i\n is added to the usefulness\nof the program. \"Burenka\" moves \n    k\n positions to the right (\n    i := i +\n    k\n is executed, if \n    i\n becomes greater than \n    n\n, then \n    i := i -\n    n\n). Help Tonya find the maximum possible usefulness of a program for\n\"Burenka\" if the initial usefulness of any program is \n    0\n. Also, Tony's\nfriend Ilyusha asks him to change the array \n    q\n times. Each time he wants\nto assign \n    a_p := x\n for a given index \n    p\n and a value \n    x\n. You\nneed to find the maximum possible usefulness of the program after each of\nthese changes. Input The first line contains a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 10^4\n) is the number of test cases. The description of the\ntest cases follows. The first line of each test case contains two integers\n\n    n\n and \n    q\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n, \n    0 \n    \u2264 q \n    \u2264\n    2 \n    \u00b7 10^5\n). The second line of each test case contains \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014\nelements of the array. The following \n    q\n lines contain changes, each of\nthem contains two integers \n    p\n and \n    x\n (\n    1 \n    \u2264 p \n    \u2264 n\n,\n\n    1 \n    \u2264 x \n    \u2264 10^9\n), meaning you should assign \n    a_p := x\n. It is\nguaranteed that the sum of \n    n\n and the sum of \n    q\n over all test cases\ndo not exceed \n    2 \n    \u00b7 10^5\n. Output For each test case, output\n\n    q+1\n numbers \u2014 the maximum usefulness of a program initially and after\neach of the changes. Example Input 4 2 1 1 2 1 3 4 4 4 1 3 2 2 6 4 6 1 1 3 11\n9 3 1 7 9 4 5 2 3 6 8 3 1 2 1 9 1 6 3 1 1 1 1 1 1 1 5 4 4 3 8 Output 3 5 14 16\n24 24 24 57 54 36 36 6 18 27 28 Note In the first test case, initially and\nafter each request, the answer is achieved at \n    s = 1\n, \n    k = 1\n or \n    s\n    = 2\n, \n    k = 1\n. In the second test case, initially, the answer is\nachieved when \n    s = 1\n, \n    k = 2\n or \n    s = 3\n, \n    k = 2\n. After the\nfirst request, the answer is achieved at \n    s = 2\n, \n    k = 2\n or \n    s =\n    4\n, \n    k = 2\n.\n\n",
        "cf_contest_id": 1718,
        "cf_index": "C",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2 1\r\n1 2\r\n1 3\r\n4 4\r\n4 1 3 2\r\n2 6\r\n4 6\r\n1 1\r\n3 11\r\n9 3\r\n1 7 9 4 5 2 3 6 8\r\n3 1\r\n2 1\r\n9 1\r\n6 3\r\n1 1 1 1 1 1\r\n1 5\r\n4 4\r\n3 8\r\n",
                "3\r\n5\r\n14\r\n16\r\n24\r\n24\r\n24\r\n57\r\n54\r\n36\r\n36\r\n6\r\n18\r\n27\r\n28\r\n"
            ]
        ],
        "private_cases": []
    }
]