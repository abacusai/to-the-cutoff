[
    {
        "name": "Dense Subsequence",
        "description": "You are given a string s, consisting of lowercase English letters, and the\ninteger m. One should choose some symbols from the given string so that any\ncontiguous subsegment of length m has at least one selected symbol. Note that\nhere we choose positions of symbols, not the symbols themselves. Then one uses\nthe chosen symbols to form a new string. All symbols from the chosen position\nshould be used, but we are allowed to rearrange them in any order. Formally,\nwe choose a subsequence of indices 1 \u2264 i1 < i2 < ... < it \u2264 |s|. The selected\nsequence must meet the following condition: for every j such that 1 \u2264 j \u2264 |s|\n- m + 1, there must be at least one selected index that belongs to the segment\n[j, j + m - 1], i.e. there should exist a k from 1 to t, such that j \u2264 ik \u2264 j\n+ m - 1. Then we take any permutation p of the selected indices and form a new\nstring sip1sip2... sipt. Find the lexicographically smallest string, that can\nbe obtained using this procedure. Input The first line of the input contains a\nsingle integer m (1 \u2264 m \u2264 100 000). The second line contains the string s\nconsisting of lowercase English letters. It is guaranteed that this string is\nnon-empty and its length doesn't exceed 100 000. It is also guaranteed that\nthe number m doesn't exceed the length of the string s. Output Print the\nsingle line containing the lexicographically smallest string, that can be\nobtained using the procedure described above. Examples Input 3 cbabc Output a\nInput 2 abcab Output aab Input 3 bcabcbaccba Output aaabb Note In the first\nsample, one can choose the subsequence 3 and form a string \"a\". In the\nsecond sample, one can choose the subsequence 1, 2, 4 (symbols on this\npositions are 'a', 'b' and 'a') and rearrange the chosen symbols to form a\nstring \"aab\".\n\n",
        "cf_contest_id": 724,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\ncbabc\r\n",
                "a\r\n"
            ],
            [
                "2\r\nabcab\r\n",
                "aab\r\n"
            ],
            [
                "3\r\nbcabcbaccba\r\n",
                "aaabb\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\nimmaydobun\r\n",
                "ab\r\n"
            ],
            [
                "5\r\nwjjdqawypvtgrncmqvcsergermprauyevcegjtcrrblkwiugrcjfpjyxngyryxntauxlouvwgjzpsuxyxvhavgezwtuzknetdibv\r\n",
                "aaaabbcccccddeeeeeefggggggghiijjjjjjkkllmmnnnnoppppqqrrrrrrrrsstttttu\r\n"
            ],
            [
                "10\r\nefispvmzuutsrpxzfrykhabznxiyquwvhwhrksrgzodtuepfvamilfdynapzhzyhncorhzuewrrkcduvuhwsrprjrmgctnvrdtpj\r\n",
                "aaabcccddddeeeffffgghhhhhhhiiijjkkklm\r\n"
            ],
            [
                "20\r\nhlicqhxayiodyephxlfoetfketnaabpfegqcrjzlshkxfzjssvpvzhzylgowwovgxznzowvpklbwbzhwtkkaomjkenhpedmbmjic\r\n",
                "aaaabbbbcccddeeeeeeffffg\r\n"
            ],
            [
                "50\r\ntyhjolxuexoffdkdwimsjujorgeksyiyvvqecvhpjsuayqnibijtipuqhkulxpysotlmtrsgygpkdhkrtntwqzrpfckiscaphyhv\r\n",
                "aab\r\n"
            ],
            [
                "1\r\nbaaa\r\n",
                "aaab\r\n"
            ],
            [
                "5\r\nbbbbba\r\n",
                "ab\r\n"
            ],
            [
                "10\r\nbbabcbbaabcbcbcbaabbccaacccbbbcaaacabbbbaaaccbcccacbbccaccbbaacaccbabcaaaacaccacbaaccaaccbaacabbbaac\r\n",
                "aaaaaaaaaaa\r\n"
            ]
        ]
    }
]