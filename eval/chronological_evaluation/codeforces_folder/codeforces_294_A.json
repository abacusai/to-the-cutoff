[
    {
        "name": "Shaass and Oskols",
        "description": "Shaass has decided to hunt some birds. There are n horizontal electricity\nwires aligned parallel to each other. Wires are numbered 1 to n from top to\nbottom. On each wire there are some oskols sitting next to each other. Oskol\nis the name of a delicious kind of birds in Shaass's territory. Supposed there\nare ai oskols sitting on the i-th wire. Sometimes Shaass shots one of the\nbirds and the bird dies (suppose that this bird sat at the i-th wire).\nConsequently all the birds on the i-th wire to the left of the dead bird get\nscared and jump up on the wire number i - 1, if there exists no upper wire\nthey fly away. Also all the birds to the right of the dead bird jump down on\nwire number i + 1, if there exists no such wire they fly away. Shaass has shot\nm birds. You're given the initial number of birds on each wire, tell him how\nmany birds are sitting on each wire after the shots. Input The first line of\nthe input contains an integer n, (1 \u2264 n \u2264 100). The next line contains a list\nof space-separated integers a1, a2, ..., an, (0 \u2264 ai \u2264 100). The third line\ncontains an integer m, (0 \u2264 m \u2264 100). Each of the next m lines contains two\nintegers xi and yi. The integers mean that for the i-th time Shaass shoot the\nyi-th (from left) bird on the xi-th wire, (1 \u2264 xi \u2264 n, 1 \u2264 yi). It's\nguaranteed there will be at least yi birds on the xi-th wire at that moment.\nOutput On the i-th line of the output print the number of birds on the i-th\nwire. Examples Input 5 10 10 10 10 10 5 2 5 3 13 2 12 1 13 4 6 Output 0 12 5 0\n16 Input 3 2 4 1 1 2 2 Output 3 0 3\n\n",
        "cf_contest_id": 294,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n10 10 10 10 10\r\n5\r\n2 5\r\n3 13\r\n2 12\r\n1 13\r\n4 6\r\n",
                "0\r\n12\r\n5\r\n0\r\n16\r\n"
            ],
            [
                "3\r\n2 4 1\r\n1\r\n2 2\r\n",
                "3\r\n0\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n58 51 45 27 48\r\n5\r\n4 9\r\n5 15\r\n4 5\r\n5 8\r\n1 43\r\n",
                "0\r\n66\r\n57\r\n7\r\n0\r\n"
            ],
            [
                "10\r\n48 53 10 28 91 56 81 2 67 52\r\n2\r\n2 40\r\n6 51\r\n",
                "87\r\n0\r\n23\r\n28\r\n141\r\n0\r\n86\r\n2\r\n67\r\n52\r\n"
            ],
            [
                "2\r\n72 45\r\n6\r\n1 69\r\n2 41\r\n1 19\r\n2 7\r\n1 5\r\n2 1\r\n",
                "0\r\n0\r\n"
            ],
            [
                "10\r\n95 54 36 39 98 30 19 24 14 12\r\n3\r\n9 5\r\n8 15\r\n7 5\r\n",
                "95\r\n54\r\n36\r\n39\r\n98\r\n34\r\n0\r\n28\r\n13\r\n21\r\n"
            ],
            [
                "1\r\n100\r\n1\r\n1 100\r\n",
                "0\r\n"
            ],
            [
                "1\r\n100\r\n1\r\n1 1\r\n",
                "0\r\n"
            ],
            [
                "1\r\n50\r\n1\r\n1 25\r\n",
                "0\r\n"
            ],
            [
                "2\r\n50 0\r\n1\r\n1 1\r\n",
                "0\r\n49\r\n"
            ],
            [
                "1\r\n10\r\n0\r\n",
                "10\r\n"
            ]
        ]
    }
]