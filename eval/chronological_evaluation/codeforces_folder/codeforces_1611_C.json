[
    {
        "name": "Polycarp Recovers the Permutation",
        "description": "Polycarp wrote on a whiteboard an array \n    p\n of length \n    n\n, which is a\npermutation of numbers from \n    1\n to \n    n\n. In other words, in \n    p\n\neach number from \n    1\n to \n    n\n occurs exactly once. He also prepared a\nresulting array \n    a\n, which is initially empty (that is, it has a length of\n\n    0\n). After that, he did exactly \n    n\n steps. Each step looked like\nthis: Look at the leftmost and rightmost elements of \n    p\n, and pick the\nsmaller of the two. If you picked the leftmost element of \n    p\n, append it\nto the left of \n    a\n; otherwise, if you picked the rightmost element of\n\n    p\n, append it to the right of \n    a\n. The picked element is erased from\n\n    p\n. Note that on the last step, \n    p\n has a length of \n    1\n and its\nminimum element is both leftmost and rightmost. In this case, Polycarp can\nchoose what role the minimum element plays. In other words, this element can\nbe added to \n    a\n both on the left and on the right (at the discretion of\nPolycarp). Let's look at an example. Let \n    n=4\n, \n    p=[3, 1, 4, 2]\n.\nInitially \n    a=[]\n. Then: During the first step, the minimum is on the right\n(with a value of \n    2\n), so after this step, \n    p=[3,1,4]\n and \n    a=[2]\n\n(he added the value \n    2\n to the right). During the second step, the minimum\nis on the left (with a value of \n    3\n), so after this step, \n    p=[1,4]\n\nand \n    a=[3,2]\n (he added the value \n    3\n to the left). During the third\nstep, the minimum is on the left (with a value of \n    1\n), so after this\nstep, \n    p=[4]\n and \n    a=[1,3,2]\n (he added the value \n    1\n to the\nleft). During the fourth step, the minimum is both left and right (this value\nis \n    4\n). Let's say Polycarp chose the right option. After this step,\n\n    p=[]\n and \n    a=[1,3,2,4]\n (he added the value \n    4\n to the\nright).Thus, a possible value of \n    a\n after \n    n\n steps could be\n\n    a=[1,3,2,4]\n. You are given the final value of the resulting array\n\n    a\n. Find any possible initial value for \n    p\n that can result the given\n\n    a\n, or determine that there is no solution. Input The first line of the\ninput contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of\ntest cases in the test. Each test case consists of two lines. The first of\nthem contains an integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \u00b710^5\n) \u2014 the\nlength of the array \n    a\n. The second line contains \n    n\n integers \n    a_1,\n    a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n) \u2014 the elements of the array\n\n    a\n. All elements of the \n    a\n array are distinct numbers. It is\nguaranteed that the sum of the values \n    n\n over all test cases in the test\ndoes not exceed \n    2\n    \u00b710^5\n. Output Print \n    t\n lines, each of the\nlines must contain the answer to the corresponding set of input data: numbers\n\n    p_1, p_2, \n    \u2026, p_n\n \u2014 any of the possible initial values of the array\n\n    p\n, which will lead to the given array \n    a\n. All elements of \n    p\n\nare distinct integers from \n    1\n to \n    n\n. Thus, if there are several\nsolutions, print any. If there is no solution, then print -1 on the line.\nExample Input 4 4 1 3 2 4 1 1 5 1 3 5 4 2 3 3 2 1 Output 3 1 4 2 1 -1 2 3 1\nNote The first test case in the example is clarified in the main section of\nthe problem statement. There may be other correct answers for this test set.\nIn the second test case, \n    n=1\n. Thus, there is only one permutation that\ncan be the answer: \n    p=[1]\n. Indeed, this is the answer to this test case.\nIn the third test case of the example, no matter what permutation you take as\n\n    p\n, after applying the \n    n\n steps, the result will differ from\n\n    a=[1, 3, 5, 4, 2]\n.\n\n",
        "cf_contest_id": 1611,
        "cf_index": "C",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4\r\n1 3 2 4\r\n1\r\n1\r\n5\r\n1 3 5 4 2\r\n3\r\n3 2 1\r\n",
                "4 2 3 1\r\n1\r\n-1\r\n1 2 3\r\n"
            ]
        ],
        "private_cases": []
    }
]