[
    {
        "name": "Movie Fan",
        "description": "Recently, Polycarp has been a fan of cinema novelties and is trying not to\nmiss them! In the near future, \n    n\n new movies will be released: the\n\n    i\n-th of them will be airing from the day \n    a_i\n and to the day\n\n    b_i\n. This means that if Polycarp wants to watch the \n    i\n-th movie in\nthe cinema, he must do so in the period from \n    a_i\n to \n    b_i\n inclusive.\nIf perhaps Polycarp will not have the opportunity to watch a movie in a\ncinema, he can then do it after day \n    b_i\n by watching it using an online\nservice. Of course, this is an undesirable outcome for Polycarp because the\nwhole world will have time to discuss this movie on social networks! Polycarp\ncan watch no more than \n    m\n movies per day. Help Polycarp find a movie-\nwatching schedule such that every movie will be watched in the cinema. If such\na schedule does not exist, then Polycarp wants to watch movies so that: for\neach movie that he doesn't have time to watch in the cinema, we will find the\nnumber of days between the end of its airing and the day when Polycarpus\nwatches the movie, the maximum of the values from the previous point should be\nas small as possible. Input The first line contains an integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases in the input. The following\nare descriptions of the \n    t\n test cases. The first line of each test case\ncontains two integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7\n    10^5\n, \n    1 \n    \u2264 m \n    \u2264 10^9\n) \u2014 the number of movies and the maximum\nnumber of movies that Polycarp can view per day. In the next \n    n\n lines,\nthe movies themselves are described, one per line, by a pair of integers\n\n    a_i\n, \n    b_i\n (\n    1 \n    \u2264 a_i \n    \u2264 b_i \n    \u2264 10^9\n) \u2014 the first and\nlast airing days for the \n    i\n-th movie. It is guaranteed that the sum of\nthe values \n    n\n for all test cases in the input does not exceed \n    2\n    \n    \u00b7 10^5\n. Output Print \n    t\n answers to given test cases in the order\nin which they appear in the input: the \n    i\n-th answer should consist of two\nlines. Print the integer \n    d\n in the first line of each test case answer:\n\n    d=0\n, if there is a schedule such that all movies are watched during\nairing, \n    d>0\n, if such a schedule does not exist \u2014 in this case, \n    d\n\nis equal to the minimum value of maximum among all the watching \"delays\" after\nthe end of airing. In the second line of the answer to each test case, print\n\n    n\n positive integers \n    t_1, t_2, \n    \u2026, t_n\n, where \n    t_i\n is the\nnumber of the day when Polycarp needs to watch the \n    i\n-th movie in the\noptimal schedule. If there are several answers, print any of them. Example\nInput 3 7 2 1 2 1 3 2 2 2 3 1 1 2 3 1 2 5 3 1 1 1 1 1 1 1 1 1 1 6 1 13 13 31\n31 25 25 12 12 14 14 10 10 Output 1 1 3 2 3 1 4 2 1 1 1 1 2 2 0 13 31 25 12 14\n10\n\n",
        "cf_contest_id": 1297,
        "cf_index": "F",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "data structures",
            "greedy",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n7 2\r\n1 2\r\n1 3\r\n2 2\r\n2 3\r\n1 1\r\n2 3\r\n1 2\r\n5 3\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n6 1\r\n13 13\r\n31 31\r\n25 25\r\n12 12\r\n14 14\r\n10 10\r\n",
                "1\r\n1 3 2 3 1 4 2\r\n1\r\n1 1 1 2 2\r\n0\r\n13 31 25 12 14 10\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n3 1\r\n1 2\r\n1 2\r\n2 2\r\n",
                "1\r\n1 2 3\r\n"
            ]
        ]
    }
]