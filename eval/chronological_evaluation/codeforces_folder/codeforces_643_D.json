[
    {
        "name": "Bearish Fanpages",
        "description": "There is a social website with n fanpages, numbered 1 through n. There are\nalso n companies, and the i-th company owns the i-th fanpage. Recently, the\nwebsite created a feature called following. Each fanpage must choose exactly\none other fanpage to follow. The website doesn\u2019t allow a situation where i\nfollows j and at the same time j follows i. Also, a fanpage can't follow\nitself. Let\u2019s say that fanpage i follows some other fanpage j0. Also, let\u2019s\nsay that i is followed by k other fanpages j1, j2, ..., jk. Then, when people\nvisit fanpage i they see ads from k + 2 distinct companies: i, j0, j1, ...,\njk. Exactly ti people subscribe (like) the i-th fanpage, and each of them will\nclick exactly one add. For each of k + 1 companies j0, j1, ..., jk, exactly\npeople will click their ad. Remaining people will click an ad from company i\n(the owner of the fanpage). The total income of the company is equal to the\nnumber of people who click ads from this copmany. Limak and Radewoosh ask you\nfor help. Initially, fanpage i follows fanpage fi. Your task is to handle q\nqueries of three types: 1 i j \u2014 fanpage i follows fanpage j from now. It's\nguaranteed that i didn't follow j just before the query. Note an extra\nconstraint for the number of queries of this type (below, in the Input\nsection). 2 i \u2014 print the total income of the i-th company. 3 \u2014 print two\nintegers: the smallest income of one company and the biggest income of one\ncompany. Input The first line of the input contains two integers n and q (3 \u2264\nn \u2264 100 000, 1 \u2264 q \u2264 100 000) \u2014 the number of fanpages and the number of\nqueries, respectively. The second line contains n integers t1, t2, ..., tn (1\n\u2264 ti \u2264 10^12) where ti denotes the number of people subscribing the i-th\nfanpage. The third line contains n integers f1, f2, ..., fn (1 \u2264 fi \u2264 n).\nInitially, fanpage i follows fanpage fi. Then, q lines follow. The i-th of\nthem describes the i-th query. The first number in the line is an integer\ntypei (1 \u2264 typei \u2264 3) \u2014 the type of the query. There will be at most 50 000\nqueries of the first type. There will be at least one query of the second or\nthe third type (so, the output won't be empty). It's guaranteed that at each\nmoment a fanpage doesn't follow itself, and that no two fanpages follow each\nother. Output For each query of the second type print one integer in a\nseparate line - the total income of the given company. For each query of the\nthird type print two integers in a separate line - the minimum and the maximum\ntotal income, respectively. Example Input 5 12 10 20 30 40 50 2 3 4 5 2 2 1 2\n2 2 3 2 4 2 5 1 4 2 2 1 2 2 2 3 2 4 2 5 3 Output 10 36 28 40 36 9 57 27 28 29\n9 57 Note In the sample test, there are 5 fanpages. The i-th of them has i\u00b710\nsubscribers. On drawings, numbers of subscribers are written in circles. An\narrow from A to B means that A follows B. The left drawing shows the initial\nsituation. The first company gets income from its own fanpage, and gets income\nfrom the 2-nd fanpage. So, the total income is 5 + 5 = 10. After the first\nquery (\"2 1\") you should print 10. The right drawing shows the situation after\na query \"1 4 2\" (after which fanpage 4 follows fanpage 2). Then, the first\ncompany still gets income 5 from its own fanpage, but now it gets only from\nthe 2-nd fanpage. So, the total income is 5 + 4 = 9 now.\n\n",
        "cf_contest_id": 643,
        "cf_index": "D",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 12\r\n10 20 30 40 50\r\n2 3 4 5 2\r\n2 1\r\n2 2\r\n2 3\r\n2 4\r\n2 5\r\n1 4 2\r\n2 1\r\n2 2\r\n2 3\r\n2 4\r\n2 5\r\n3\r\n",
                "10\r\n36\r\n28\r\n40\r\n36\r\n9\r\n57\r\n27\r\n28\r\n29\r\n9 57\r\n"
            ]
        ],
        "private_cases": [
            [
                "15 15\r\n273135249611 113468162241 190951508145 388777963488 283753139646 441269041758 165130087889 28915778077 732769295595 841142358306 45001405954 89749708936 543212580117 76952042166 69742665344\r\n2 8 2 8 2 3 2 14 13 9 13 6 3 13 3\r\n1 5 13\r\n1 15 2\r\n1 13 8\r\n1 7 4\r\n3\r\n3\r\n3\r\n1 15 14\r\n3\r\n2 14\r\n1 1 12\r\n2 8\r\n1 7 3\r\n1 10 5\r\n3\r\n",
                "57564965120 755363041037\r\n57564965120 755363041037\r\n57564965120 755363041037\r\n54109343213 755363041037\r\n150427928849\r\n282971971420\r\n54109343213 605690989054\r\n"
            ],
            [
                "20 20\r\n724161079570 262493213759 296741586879 319852163369 394246117287 551486501145 744923890259 836188606529 895840870650 346610779910 121980710493 917183877621 878478217684 38428345592 181494556579 609346313668 812120922769 528212834709 723677758139 605837009437\r\n13 13 5 17 12 18 9 14 15 7 6 18 9 1 12 13 13 11 6 3\r\n3\r\n2 1\r\n1 13 20\r\n2 17\r\n2 9\r\n2 3\r\n3\r\n1 12 19\r\n3\r\n1 16 6\r\n3\r\n3\r\n2 19\r\n3\r\n1 12 14\r\n1 15 1\r\n3\r\n1 11 2\r\n1 14 9\r\n3\r\n",
                "277659643160 1318387018438\r\n400609511334\r\n577046092221\r\n607419772495\r\n432274904534\r\n277659643160 1296372470588\r\n277659643160 1296372470588\r\n306942250416 1020981921010\r\n306942250416 1020981921010\r\n580819189015\r\n306942250416 1020981921010\r\n306942250416 993540517866\r\n303853618288 980454606093\r\n"
            ],
            [
                "10 1\r\n37296842092 577729683881 217217402389 933332506600 678026661507 791914333615 494250642513 673032436415 914195149853 56840218737\r\n6 7 8 2 1 4 9 10 2 2\r\n3\r\n",
                "332952846666 915085442677\r\n"
            ],
            [
                "5 10\r\n364391074434 216321281869 518375011074 998662557642 321365225706\r\n4 4 4 5 1\r\n1 2 5\r\n1 5 3\r\n1 1 5\r\n2 5\r\n2 1\r\n3\r\n3\r\n3\r\n2 1\r\n3\r\n",
                "860308412865\r\n246468582358\r\n172433686076 860308412865\r\n172433686076 860308412865\r\n172433686076 860308412865\r\n246468582358\r\n172433686076 860308412865\r\n"
            ],
            [
                "10 20\r\n160772433175 194780585307 106555550087 594604216607 124749243553 821880306805 806300676257 321567798512 429552116085 371801167246\r\n5 9 5 1 9 2 1 7 10 4\r\n1 8 9\r\n1 6 1\r\n1 8 6\r\n1 3 4\r\n1 4 7\r\n2 2\r\n2 4\r\n2 5\r\n2 8\r\n3\r\n3\r\n2 9\r\n3\r\n2 4\r\n3\r\n3\r\n3\r\n3\r\n2 9\r\n3\r\n",
                "204778321675\r\n594629443697\r\n189164218499\r\n434744001524\r\n189164218499 624503183833\r\n189164218499 624503183833\r\n370295125274\r\n189164218499 624503183833\r\n594629443697\r\n189164218499 624503183833\r\n189164218499 624503183833\r\n189164218499 624503183833\r\n189164218499 624503183833\r\n370295125274\r\n189164218499 624503183833\r\n"
            ],
            [
                "3 5\r\n10 10 10\r\n2 3 1\r\n2 1\r\n3\r\n2 3\r\n3\r\n2 2\r\n",
                "10\r\n10 10\r\n10\r\n10 10\r\n10\r\n"
            ]
        ]
    }
]