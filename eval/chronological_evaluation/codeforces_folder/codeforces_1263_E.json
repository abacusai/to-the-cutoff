[
    {
        "name": "Editor",
        "description": "The development of a text editor is a hard problem. You need to implement an\nextra module for brackets coloring in text. Your editor consists of a line\nwith infinite length and cursor, which points to the current character. Please\nnote that it points to only one of the characters (and not between a pair of\ncharacters). Thus, it points to an index character. The user can move the\ncursor left or right one position. If the cursor is already at the first\n(leftmost) position, then it does not move left. Initially, the cursor is in\nthe first (leftmost) character. Also, the user can write a letter or brackets\n(either (, or )) to the position that the cursor is currently pointing at. A\nnew character always overwrites the old value at that position. Your editor\nmust check, whether the current line is the correct text. Text is correct if\nthe brackets in them form the correct bracket sequence. Formally, correct text\n(CT) must satisfy the following rules: any line without brackets is CT (the\nline can contain whitespaces); If the first character of the string \u2014 is (,\nthe last \u2014 is ), and all the rest form a CT, then the whole line is a CT; two\nconsecutively written CT is also CT. Examples of correct texts:\nhello(codeforces), round, ((i)(write))edi(tor)s, ( me). Examples of incorrect\ntexts: hello)oops(, round), ((me). The user uses special commands to work with\nyour editor. Each command has its symbol, which must be written to execute\nthis command. The correspondence of commands and characters is as follows: L \u2014\nmove the cursor one character to the left (remains in place if it already\npoints to the first character); R \u2014 move the cursor one character to the\nright; any lowercase Latin letter or bracket (( or )) \u2014 write the entered\ncharacter to the position where the cursor is now. For a complete\nunderstanding, take a look at the first example and its illustrations in the\nnote below. You are given a string containing the characters that the user\nentered. For the brackets coloring module's work, after each command you need\nto: check if the current text in the editor is a correct text; if it is, print\nthe least number of colors that required, to color all brackets. If two pairs\nof brackets are nested (the first in the second or vice versa), then these\npairs of brackets should be painted in different colors. If two pairs of\nbrackets are not nested, then they can be painted in different or the same\ncolors. For example, for the bracket sequence ()(())()() the least number of\ncolors is \n    2\n, and for the bracket sequence (()(()())())(()) \u2014 is \n    3\n.\nWrite a program that prints the minimal number of colors after processing each\ncommand. Input The first line contains an integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    10^6\n) \u2014 the number of commands. The second line contains \n    s\n \u2014 a\nsequence of commands. The string \n    s\n consists of \n    n\n characters. It is\nguaranteed that all characters in a string are valid commands. Output In a\nsingle line print \n    n\n integers, where the \n    i\n-th number is: \n    -1\n\nif the line received after processing the first \n    i\n commands is not valid\ntext, the minimal number of colors in the case of the correct text. Examples\nInput 11 (RaRbR)L)L( Output -1 -1 -1 -1 -1 -1 1 1 -1 -1 2 Input 11 (R)R(R)Ra)c\nOutput -1 -1 1 1 -1 -1 1 1 1 -1 1 Note In the first example, the text in the\neditor will take the following form: ( ^ ( ^ (a ^ (a ^ (ab ^ (ab ^ (ab) ^ (ab)\n^ (a)) ^ (a)) ^ (()) ^\n\n",
        "cf_contest_id": 1263,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "11\r\n(RaRbR)L)L(\r\n",
                "-1 -1 -1 -1 -1 -1 1 1 -1 -1 2 "
            ],
            [
                "11\r\n(R)R(R)Ra)c\r\n",
                "-1 -1 1 1 -1 -1 1 1 1 -1 1 "
            ]
        ],
        "private_cases": [
            [
                "1\r\na\r\n",
                "0 "
            ],
            [
                "3\r\n(R)\r\n",
                "-1 -1 1 "
            ],
            [
                "3\r\n(R(\r\n",
                "-1 -1 -1 "
            ],
            [
                "3\r\n)R)\r\n",
                "-1 -1 -1 "
            ],
            [
                "3\r\n)R(\r\n",
                "-1 -1 -1 "
            ],
            [
                "3\r\n(l)\r\n",
                "-1 0 -1 "
            ],
            [
                "21\r\n(RRRRR)LLLL(RRR)LL(R)\r\n",
                "-1 -1 -1 -1 -1 -1 1 1 1 1 1 -1 -1 -1 -1 2 2 2 -1 -1 3 "
            ]
        ]
    }
]