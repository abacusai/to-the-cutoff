[
    {
        "name": "Renovation",
        "description": "The mayor of the Berland city S sees the beauty differently than other city-\ndwellers. In particular, he does not understand at all, how antique houses can\nbe nice-looking. So the mayor wants to demolish all ancient buildings in the\ncity. The city S is going to host the football championship very soon. In\norder to make the city beautiful, every month the Berland government provides\nmayor a money tranche. The money has to be spent on ancient buildings\nrenovation. There are n months before the championship and the i-th month\ntranche equals to ai burles. The city S has m antique buildings and the\nrenovation cost of the j-th building is bj burles. The mayor has his own plans\nfor spending the money. As he doesn't like antique buildings he wants to\ndemolish as much of them as possible. For the j-th building he calculated its\ndemolishing cost pj. The mayor decided to act according to the following plan.\nEach month he chooses several (possibly zero) of m buildings to demolish in\nsuch a way that renovation cost of each of them separately is not greater than\nthe money tranche ai of this month (bj \u2264 ai) \u2014 it will allow to deceive city-\ndwellers that exactly this building will be renovated. Then the mayor has to\ndemolish all selected buildings during the current month as otherwise the\ndwellers will realize the deception and the plan will fail. Definitely the\ntotal demolishing cost can not exceed amount of money the mayor currently has.\nThe mayor is not obliged to spend all the money on demolishing. If some money\nis left, the mayor puts it to the bank account and can use it in any\nsubsequent month. Moreover, at any month he may choose not to demolish any\nbuildings at all (in this case all the tranche will remain untouched and will\nbe saved in the bank). Your task is to calculate the maximal number of\nbuildings the mayor can demolish. Input The first line of the input contains\ntwo integers n and m (1 \u2264 n, m \u2264 100 000) \u2014 the number of months before the\nchampionship and the number of ancient buildings in the city S. The second\nline contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 10^9), where ai is the\ntranche of the i-th month. The third line contains m integers b1, b2, ..., bm\n(1 \u2264 bj \u2264 10^9), where bj is renovation cost of the j-th building. The fourth\nline contains m integers p1, p2, ..., pm (1 \u2264 pj \u2264 10^9), where pj is the\ndemolishing cost of the j-th building. Output Output single integer \u2014 the\nmaximal number of buildings the mayor can demolish. Examples Input 2 3 2 4 6 2\n3 1 3 2 Output 2 Input 3 5 5 3 1 5 2 9 1 10 4 2 1 3 10 Output 3 Input 5 6 6 3\n2 4 3 3 6 4 5 4 2 1 4 3 2 5 3 Output 6 Note In the third example the mayor\nacts as follows. In the first month he obtains 6 burles tranche and demolishes\nbuildings #2 (renovation cost 6, demolishing cost 4) and #4 (renovation cost\n5, demolishing cost 2). He spends all the money on it. After getting the\nsecond month tranche of 3 burles, the mayor selects only building #1\n(renovation cost 3, demolishing cost 1) for demolishing. As a result, he saves\n2 burles for the next months. In the third month he gets 2 burle tranche, but\ndecides not to demolish any buildings at all. As a result, he has 2 + 2 = 4\nburles in the bank. This reserve will be spent on the fourth month together\nwith the 4-th tranche for demolishing of houses #3 and #5 (renovation cost is\n4 for each, demolishing costs are 3 and 5 correspondingly). After this month\nhis budget is empty. Finally, after getting the last tranche of 3 burles, the\nmayor demolishes building #6 (renovation cost 2, demolishing cost 3). As it\ncan be seen, he demolished all 6 buildings.\n\n",
        "cf_contest_id": 883,
        "cf_index": "J",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 3\r\n2 4\r\n6 2 3\r\n1 3 2\r\n",
                "2"
            ],
            [
                "3 5\r\n5 3 1\r\n5 2 9 1 10\r\n4 2 1 3 10\r\n",
                "3"
            ],
            [
                "5 6\r\n6 3 2 4 3\r\n3 6 4 5 4 2\r\n1 4 3 2 5 3\r\n",
                "6"
            ]
        ],
        "private_cases": [
            [
                "1 5\r\n9\r\n1 2 3 4 5\r\n5 4 3 2 1\r\n",
                "3"
            ],
            [
                "2 3\r\n2 4\r\n5 7 5\r\n1 3 2\r\n",
                "0"
            ],
            [
                "2 3\r\n4 2\r\n1 4 4\r\n1 3 2\r\n",
                "2"
            ],
            [
                "10 11\r\n3 8 2 5 11 7 8 2 6 4\r\n2 5 12 8 9 10 7 9 6 4 3\r\n2 3 5 4 6 3 6 5 8 2 1\r\n",
                "10"
            ],
            [
                "10 11\r\n3 8 2 5 11 7 8 2 6 4\r\n2 5 12 8 9 10 7 9 6 4 3\r\n4 4 5 6 8 5 9 11 5 2 4\r\n",
                "9"
            ],
            [
                "10 12\r\n13 12 13 3 10 3 4 4 8 5\r\n6 12 13 13 10 10 1 9 3 3 4 5\r\n9 9 6 6 4 8 9 9 5 7 9 5\r\n",
                "10"
            ],
            [
                "1 1\r\n12\r\n10\r\n10\r\n",
                "1"
            ],
            [
                "2 1\r\n1 3\r\n10\r\n10\r\n",
                "0"
            ],
            [
                "2 1\r\n9 9\r\n8\r\n6\r\n",
                "1"
            ],
            [
                "10 8\r\n4 3 7 6 9 8 4 1 6 10\r\n3 5 10 9 6 7 2 3\r\n6 8 11 4 10 14 7 12\r\n",
                "7"
            ],
            [
                "10 17\r\n19 4 4 3 12 7 4 19 21 18\r\n22 18 21 14 9 16 25 22 5 10 5 8 12 21 10 22 17\r\n20 12 9 18 13 20 21 12 20 15 19 22 9 21 12 13 15\r\n",
                "8"
            ],
            [
                "42 42\r\n19 3 36 11 33 2 39 44 36 44 43 16 31 16 11 14 18 35 17 13 44 46 4 47 13 48 42 25 10 35 23 1 31 17 35 8 19 42 13 30 18 20\r\n16 44 35 44 47 17 17 16 13 36 9 37 10 42 41 1 12 23 20 14 44 18 4 42 35 17 19 19 47 26 44 18 46 19 30 22 35 19 36 25 30 33\r\n31 35 33 34 35 36 37 19 36 34 36 27 33 20 15 15 23 23 34 14 23 18 17 22 22 36 33 36 37 26 35 23 14 14 24 26 16 30 31 31 30 28\r\n",
                "39"
            ],
            [
                "10 24\r\n10 15 6 15 15 9 6 13 5 13\r\n5 14 14 11 14 11 10 5 14 14 6 13 10 8 9 11 5 14 5 13 14 10 8 8\r\n10 9 12 12 8 4 6 5 3 3 7 4 3 13 11 9 3 5 4 6 3 9 3 3\r\n",
                "20"
            ],
            [
                "13 6\r\n10 9 2 2 2 2 2 2 2 2 2 2 1\r\n10 9 9 9 9 1\r\n10 4 4 4 4 20\r\n",
                "5"
            ],
            [
                "5 12\r\n48 48 47 42 40\r\n43 41 49 42 48 44 50 46 43 46 50 44\r\n49 50 42 49 43 46 40 45 48 44 41 46\r\n",
                "4"
            ],
            [
                "15 15\r\n952 894 894 877 812 470 451 419 413 367 275 258 161 137 75\r\n894 894 258 812 952 451 275 75 877 137 161 470 419 413 367\r\n894 894 258 812 952 451 275 75 877 137 161 470 419 413 367\r\n",
                "15"
            ],
            [
                "23 16\r\n966 950 886 684 528 446 356 124 67 4 500000000 450000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000 50000000\r\n450000000 500000000 450000000 356 450000000 528 67 4 450000000 950 966 886 50000000 684 446 124\r\n200000000 500000000 200000000 356 200000000 528 67 4 200000000 950 966 886 1000000000 684 446 124\r\n",
                "15"
            ],
            [
                "52 24\r\n10 10 10 10 9 9 9 9 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1\r\n1 9 10 10 9 9 9 9 10 9 9 9 9 9 9 9 1 10 9 1 1 9 9 9\r\n20 4 10 10 4 4 4 4 10 4 4 4 4 4 4 4 20 10 4 20 20 4 4 4\r\n",
                "21"
            ],
            [
                "3 5\r\n1000000000 1000000000 1000000000\r\n1 1 1000000000 1000000000 1000000000\r\n1 1000000000 1000000000 1000000000 1000000000\r\n",
                "3"
            ]
        ]
    }
]