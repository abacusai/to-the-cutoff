[
    {
        "name": "Finding Zero",
        "description": "This is an interactive problem. We picked an array of whole numbers \n    a_1,\n    a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 10^9\n) and concealed exactly one\nzero in it! Your goal is to find the location of this zero, that is, to find\n\n    i\n such that \n    a_i = 0\n. You are allowed to make several queries to\nguess the answer. For each query, you can think up three distinct indices\n\n    i, j, k\n, and we will tell you the value of \n    max(a_i, a_j, a_k) -\n    \n    min(a_i, a_j, a_k)\n. In other words, we will tell you the difference\nbetween the maximum and the minimum number among \n    a_i\n, \n    a_j\n and\n\n    a_k\n. You are allowed to make no more than \n    2 \n    \u00b7 n - 2\n queries,\nand after that you have two tries to guess where the zero is. That is, you\nhave to tell us two numbers \n    i\n and \n    j\n and you win if \n    a_i = 0\n\nor \n    a_j = 0\n. Can you guess where we hid the zero? Note that the array in\neach test case is fixed beforehand and will not change during the game. In\nother words, the interactor is not adaptive. Input Each test contains multiple\ntest cases. The first line contains the number of test cases \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 500\n). Description of the test cases follows. The first and\nonly line of each test case contains an integer \n    n\n (\n    4 \n    \u2264 n \n    \u2264\n    1000\n) \u2014 the length of the array that we picked. It is guaranteed that the\nsum of \n    n\n over all test cases does not exceed \n    3000\n. Interaction For\neach test case, the interaction starts with reading \n    n\n. To make a query,\nprint \"? \n    i\n \n    j\n \n    k\n\" (without quotes, \n    1 \n    \u2264 i, j, k \n    \u2264\n    n\n, indices must be distinct). Then you should read our response from\nstandard input, that is, \n    max(a_i, a_j, a_k) - \n    min(a_i, a_j, a_k)\n.\nIf the response is \n    -1\n, it means your program has made an invalid query\nor has run out of tries. Your program must terminate immediately after reading\n\n    -1\n, and you will get a verdict Wrong answer. Otherwise you may get any\nverdict, because the program will continue reading from the closed stream.\nNote that if the query is correct, the answer will never be \n    -1\n because\n\n    max(a_i, a_j, a_k) - \n    min(a_i, a_j, a_k) \n    \u2265 0\n. To give the\nfinal answer, print \"! \n    i\n \n    j\n\" (without the quotes). Printing the\nsame number twice (that is, \n    i = j\n) is allowed. Note that giving this\nanswer is not counted towards the limit of \n    2 \n    \u00b7 n - 2\n queries.\nAfter that, your program must continue to solve the remaining test cases, or\nexit if all test cases have been solved. After printing a query, don't forget\nto output line feed and flush the output buffer. Otherwise you will get the\nverdict Idleness limit exceeded. To flush the buffer, use: fflush(stdout) or\ncout.flush() in C++; System.out.flush() in Java; flush(output) in Pascal;\nstdout.flush() in Python; Read documentation for other languages.Hacks The\nfirst line must contain an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 500\n) \u2014 the\ncount of test cases. The first line of each test case must contain an integer\n\n    n\n (\n    4 \n    \u2264 n \n    \u2264 1000\n) \u2014 the length of the hidden array. The\nsecond line of each test case must contain \n    n\n integers separated by\nspaces \u2014 \n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 10^9\n). There\nmust also be exactly one zero in this array. The sum of \n    n\n over all test\ncases must not exceed \n    3000\n. Example Input 1 4 2 3 3 2 Output ? 1 2 3 ? 2\n3 4 ? 3 4 1 ? 4 1 2 ! 2 3 Note Array from sample: \n    [1, 2, 0, 3]\n.\n\n",
        "cf_contest_id": 1634,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "interactive",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n4\r\n1 2 0 3\r\n",
                ""
            ]
        ],
        "private_cases": [
            [
                "1\r\n5\r\n2 2 2 2 0\r\n",
                ""
            ],
            [
                "1\r\n4\r\n667765307 0 150058801 880433548\r\n",
                ""
            ],
            [
                "1\r\n5\r\n2 0 1 1 1\r\n",
                ""
            ],
            [
                "1\r\n6\r\n1 1 0 3 4 7\r\n",
                ""
            ],
            [
                "1\r\n5\r\n2 1 4 4 0\r\n",
                ""
            ]
        ]
    }
]