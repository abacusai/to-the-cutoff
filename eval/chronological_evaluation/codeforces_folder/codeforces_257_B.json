[
    {
        "name": "Playing Cubes",
        "description": "Petya and Vasya decided to play a little. They found n red cubes and m blue\ncubes. The game goes like that: the players take turns to choose a cube of\nsome color (red or blue) and put it in a line from left to right (overall the\nline will have n + m cubes). Petya moves first. Petya's task is to get as many\npairs of neighbouring cubes of the same color as possible. Vasya's task is to\nget as many pairs of neighbouring cubes of different colors as possible. The\nnumber of Petya's points in the game is the number of pairs of neighboring\ncubes of the same color in the line, the number of Vasya's points in the game\nis the number of neighbouring cubes of the different color in the line. Your\ntask is to calculate the score at the end of the game (Petya's and Vasya's\npoints, correspondingly), if both boys are playing optimally well. To \"play\noptimally well\" first of all means to maximize the number of one's points, and\nsecond \u2014 to minimize the number of the opponent's points. Input The only line\ncontains two space-separated integers n and m (1 \u2264 n, m \u2264 10^5) \u2014 the number\nof red and blue cubes, correspondingly. Output On a single line print two\nspace-separated integers \u2014 the number of Petya's and Vasya's points\ncorrespondingly provided that both players play optimally well. Examples Input\n3 1 Output 2 1 Input 2 4 Output 3 2 Note In the first test sample the optimal\nstrategy for Petya is to put the blue cube in the line. After that there will\nbe only red cubes left, so by the end of the game the line of cubes from left\nto right will look as [blue, red, red, red]. So, Petya gets 2 points and Vasya\ngets 1 point. If Petya would choose the red cube during his first move, then,\nprovided that both boys play optimally well, Petya would get 1 point and Vasya\nwould get 2 points.\n\n",
        "cf_contest_id": 257,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "games",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 1\r\n",
                "2 1\r\n"
            ],
            [
                "2 4\r\n",
                "3 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n",
                "0 1\r\n"
            ],
            [
                "2 1\r\n",
                "1 1\r\n"
            ],
            [
                "4 4\r\n",
                "3 4\r\n"
            ],
            [
                "10 7\r\n",
                "9 7\r\n"
            ],
            [
                "5 13\r\n",
                "12 5\r\n"
            ],
            [
                "7 11\r\n",
                "10 7\r\n"
            ],
            [
                "1 2\r\n",
                "1 1\r\n"
            ],
            [
                "10 10\r\n",
                "9 10\r\n"
            ],
            [
                "50 30\r\n",
                "49 30\r\n"
            ],
            [
                "80 120\r\n",
                "119 80\r\n"
            ],
            [
                "304 122\r\n",
                "303 122\r\n"
            ],
            [
                "500 800\r\n",
                "799 500\r\n"
            ],
            [
                "900 1000\r\n",
                "999 900\r\n"
            ],
            [
                "1 1000\r\n",
                "999 1\r\n"
            ],
            [
                "997 9\r\n",
                "996 9\r\n"
            ],
            [
                "341 678\r\n",
                "677 341\r\n"
            ],
            [
                "784 913\r\n",
                "912 784\r\n"
            ],
            [
                "57 888\r\n",
                "887 57\r\n"
            ],
            [
                "100000 100000\r\n",
                "99999 100000\r\n"
            ],
            [
                "10000 100000\r\n",
                "99999 10000\r\n"
            ],
            [
                "9999 99999\r\n",
                "99998 9999\r\n"
            ],
            [
                "12 100000\r\n",
                "99999 12\r\n"
            ],
            [
                "9999 31411\r\n",
                "31410 9999\r\n"
            ],
            [
                "12930 98391\r\n",
                "98390 12930\r\n"
            ],
            [
                "98813 893\r\n",
                "98812 893\r\n"
            ],
            [
                "99801 38179\r\n",
                "99800 38179\r\n"
            ],
            [
                "831 69318\r\n",
                "69317 831\r\n"
            ],
            [
                "99999 99997\r\n",
                "99998 99997\r\n"
            ],
            [
                "74 99\r\n",
                "98 74\r\n"
            ],
            [
                "159 259\r\n",
                "258 159\r\n"
            ],
            [
                "245 317\r\n",
                "316 245\r\n"
            ],
            [
                "947 883\r\n",
                "946 883\r\n"
            ],
            [
                "7131 3165\r\n",
                "7130 3165\r\n"
            ],
            [
                "11536 12192\r\n",
                "12191 11536\r\n"
            ],
            [
                "25938 40897\r\n",
                "40896 25938\r\n"
            ],
            [
                "81314 31958\r\n",
                "81313 31958\r\n"
            ],
            [
                "294 83621\r\n",
                "83620 294\r\n"
            ],
            [
                "64896 18105\r\n",
                "64895 18105\r\n"
            ]
        ]
    }
]