[
    {
        "name": "Zigu Zagu",
        "description": "You have a binary string \n    a\n of length \n    n\n consisting only of digits\n\n    0\n and \n    1\n. You are given \n    q\n queries. In the \n    i\n-th query,\nyou are given two indices \n    l\n and \n    r\n such that \n    1 \n    \u2264 l \n    \u2264 r\n    \n    \u2264 n\n. Let \n    s=a[l,r]\n. You are allowed to do the following operation\non \n    s\n: Choose two indices \n    x\n and \n    y\n such that \n    1 \n    \u2264 x\n    \n    \u2264 y \n    \u2264 |s|\n. Let \n    t\n be the substring \n    t = s[x, y]\n. Then for\nall \n    1 \n    \u2264 i \n    \u2264 |t| - 1\n, the condition \n    t_i \n    \u2260 t_i+1\n has\nto hold. Note that \n    x = y\n is always a valid substring. Delete the\nsubstring \n    s[x, y]\n from \n    s\n. For each of the \n    q\n queries, find\nthe minimum number of operations needed to make \n    s\n an empty string. Note\nthat for a string \n    s\n, \n    s[l,r]\n denotes the subsegment\n\n    s_l,s_l+1,\n    \u2026,s_r\n. Input The first line contains two integers\n\n    n\n and \n    q\n (\n    1 \n    \u2264 n, q \n    \u2264 2 \n    \u00b7 10 ^ 5\n) \u2014 the length\nof the binary string \n    a\n and the number of queries respectively. The\nsecond line contains a binary string \n    a\n of length \n    n\n (\n    a_i \n    \u2208\n    \n    0, 1\n). Each of the next \n    q\n lines contains two integers\n\n    l\n and \n    r\n (\n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 n\n) \u2014 representing the\nsubstring of each query. Output Print \n    q\n lines, the \n    i\n-th line\nrepresenting the minimum number of operations needed for the \n    i\n-th query.\nExamples Input 5 3 11011 2 4 1 5 3 5 Output 1 3 2 Input 10 3 1001110110 1 10 2\n5 5 10 Output 4 2 3 Note In the first test case, The substring is\n\n    \n, so we can do one operation to make the substring empty.\nThe substring is \n    \n, so we can do one operation on \n    s[2,\n    4]\n to make \n    \n, then use two more operations to make the\nsubstring empty. The substring is \n    \n, so we can do one\noperation on \n    s[1, 2]\n to make \n    \n, then use one more\noperation to make the substring empty.\n\n",
        "cf_contest_id": 1672,
        "cf_index": "H",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 3\r\n11011\r\n2 4\r\n1 5\r\n3 5\r\n",
                "1\r\n3\r\n2\r\n"
            ],
            [
                "10 3\r\n1001110110\r\n1 10\r\n2 5\r\n5 10\r\n",
                "4\r\n2\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 10\r\n1100011010\r\n9 10\r\n1 3\r\n9 10\r\n4 10\r\n10 10\r\n9 10\r\n6 10\r\n6 7\r\n5 5\r\n10 10\r\n",
                "1\r\n2\r\n1\r\n2\r\n1\r\n1\r\n2\r\n2\r\n1\r\n1\r\n"
            ]
        ]
    }
]