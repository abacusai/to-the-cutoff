[
    {
        "name": "Supercentral Point",
        "description": "One day Vasya painted a Cartesian coordinate system on a piece of paper and\nmarked some set of points (x1, y1), (x2, y2), ..., (xn, yn). Let's define\nneighbors for some fixed point from the given set (x, y): point (x', y') is\n(x, y)'s right neighbor, if x' > x and y' = y point (x', y') is (x, y)'s left\nneighbor, if x' < x and y' = y point (x', y') is (x, y)'s lower neighbor, if\nx' = x and y' < y point (x', y') is (x, y)'s upper neighbor, if x' = x and y'\n> y We'll consider point (x, y) from the given set supercentral, if it has at\nleast one upper, at least one lower, at least one left and at least one right\nneighbor among this set's points. Vasya marked quite many points on the paper.\nAnalyzing the picture manually is rather a challenge, so Vasya asked you to\nhelp him. Your task is to find the number of supercentral points in the given\nset. Input The first input line contains the only integer n (1 \u2264 n \u2264 200) \u2014\nthe number of points in the given set. Next n lines contain the coordinates of\nthe points written as \"x y\" (without the quotes) (|x|, |y| \u2264 1000), all\ncoordinates are integers. The numbers in the line are separated by exactly one\nspace. It is guaranteed that all points are different. Output Print the only\nnumber \u2014 the number of supercentral points of the given set. Examples Input 8\n1 1 4 2 3 1 1 2 0 2 0 1 1 0 1 3 Output 2 Input 5 0 0 0 1 1 0 0 -1 -1 0 Output\n1 Note In the first sample the supercentral points are only points (1, 1) and\n(1, 2). In the second sample there is one supercental point \u2014 point (0, 0).\n\n",
        "cf_contest_id": 165,
        "cf_index": "A",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8\r\n1 1\r\n4 2\r\n3 1\r\n1 2\r\n0 2\r\n0 1\r\n1 0\r\n1 3\r\n",
                "2\r\n"
            ],
            [
                "5\r\n0 0\r\n0 1\r\n1 0\r\n0 -1\r\n-1 0\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "9\r\n-565 -752\r\n-184 723\r\n-184 -752\r\n-184 1\r\n950 723\r\n-565 723\r\n950 -752\r\n950 1\r\n-565 1\r\n",
                "1\r\n"
            ],
            [
                "1\r\n487 550\r\n",
                "0\r\n"
            ],
            [
                "10\r\n990 -396\r\n990 736\r\n990 646\r\n990 -102\r\n990 -570\r\n990 155\r\n990 528\r\n990 489\r\n990 268\r\n990 676\r\n",
                "0\r\n"
            ],
            [
                "25\r\n890 -756\r\n890 -188\r\n-37 -756\r\n-37 853\r\n523 998\r\n-261 853\r\n-351 853\r\n-351 -188\r\n523 -756\r\n-261 -188\r\n-37 998\r\n523 -212\r\n-351 998\r\n-37 -188\r\n-351 -756\r\n-37 -212\r\n890 998\r\n890 -212\r\n523 853\r\n-351 -212\r\n-261 -212\r\n-261 998\r\n-261 -756\r\n890 853\r\n523 -188\r\n",
                "9\r\n"
            ],
            [
                "21\r\n-813 -11\r\n486 254\r\n685 254\r\n-708 254\r\n-55 -11\r\n-671 -191\r\n486 -11\r\n-671 -11\r\n685 -11\r\n685 -191\r\n486 -191\r\n-55 254\r\n-708 -11\r\n-813 254\r\n-708 -191\r\n41 -11\r\n-671 254\r\n-813 -191\r\n41 254\r\n-55 -191\r\n41 -191\r\n",
                "5\r\n"
            ],
            [
                "4\r\n1 0\r\n2 0\r\n1 1\r\n1 -1\r\n",
                "0\r\n"
            ]
        ]
    }
]