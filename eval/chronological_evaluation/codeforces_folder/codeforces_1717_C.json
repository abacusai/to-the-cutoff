[
    {
        "name": "Madoka and Formal Statement",
        "description": "Given an array of integer \n    a_1, a_2, \n    \u2026, a_n\n. In one operation you\ncan make \n    a_i := a_i + 1\n if \n    i < n\n and \n    a_i \n    \u2264 a_i + 1\n,\nor \n    i = n\n and \n    a_i \n    \u2264 a_1\n. You need to check whether the array\n\n    a_1, a_2, \n    \u2026, a_n\n can become equal to the array \n    b_1, b_2,\n    \n    \u2026, b_n\n in some number of operations (possibly, zero). Two arrays\n\n    a\n and \n    b\n of length \n    n\n are called equal if \n    a_i = b_i\n for\nall integers \n    i\n from \n    1\n to \n    n\n. Input The input consists of\nmultiple test cases. The first line contains a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 4 \n    \u00b7 10^4\n) \u2014 the number of test cases. Description of\nthe test cases follows. The first line of each test case contains a single\ninteger \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2013 the length of the\narray. The second line of each test case contains \n    n\n integers \n    a_1,\n    \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2013 the elements of the array\n\n    a\n. The third line of each test case contains \n    n\n integers \n    b_1,\n    \n    \u2026, b_n\n (\n    1 \n    \u2264 b_i \n    \u2264 10^9\n) \u2013 the elements of the array\n\n    b\n. It is guaranteed that the sum of \n    n\n over all test cases does not\nexceed \n    2 \n    \u00b7 10^5\n. Output For each test case, output \"YES\" if you\ncan get the array \n    b\n, otherwise output \"NO\". You may print each letter in\nany case (for example, \"YES\", \"Yes\", \"yes\", \"yEs\" will all be recognized as\npositive answer). Example Input 5 3 1 2 5 1 2 5 2 2 2 1 3 4 3 4 1 2 6 4 2 5 3\n2 4 1 4 5 3 5 1 2 3 4 5 6 5 6 7 6 Output YES NO NO NO YES Note In the first\ntest case, the array \n    a\n is already equal to the array \n    b\n. In the\nsecond test case, we can't get the array \n    b\n, because to do this we need\nto decrease \n    a_1\n. In the fifth test case, we can apply operations in\norder to the elements with indices \n    4, 3, 3,2,2,2,1,1,1,1\n, and then get\nthe array \n    [5,5,5,5,5]\n. After that, you can apply operations in order to\nelements with indices \n    5,4,4,3,1\n and already get an array\n\n    [6,5,6,7,6]\n.\n\n",
        "cf_contest_id": 1717,
        "cf_index": "C",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3\r\n1 2 5\r\n1 2 5\r\n2\r\n2 2\r\n1 3\r\n4\r\n3 4 1 2\r\n6 4 2 5\r\n3\r\n2 4 1\r\n4 5 3\r\n5\r\n1 2 3 4 5\r\n6 5 6 7 6\r\n",
                "Yes\r\nNo\r\nNo\r\nNo\r\nYes\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n5\r\n4 4 4 4 4\r\n3 3 3 3 3\r\n",
                "No\r\n"
            ]
        ]
    }
]