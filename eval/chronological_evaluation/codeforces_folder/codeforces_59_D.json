[
    {
        "name": "Team Arrangement",
        "description": "Recently personal training sessions have finished in the Berland State\nUniversity Olympiad Programmer Training Centre. By the results of these\ntraining sessions teams are composed for the oncoming team contest season.\nEach team consists of three people. All the students of the Centre possess\nnumbers from 1 to 3n, and all the teams possess numbers from 1 to n. The\nsplitting of students into teams is performed in the following manner: while\nthere are people who are not part of a team, a person with the best total\nscore is chosen among them (the captain of a new team), this person chooses\nfor himself two teammates from those who is left according to his list of\npriorities. The list of every person's priorities is represented as a\npermutation from the rest of 3n - 1 students who attend the centre, besides\nhimself. You are given the results of personal training sessions which are a\npermutation of numbers from 1 to 3n, where the i-th number is the number of\nstudent who has won the i-th place. No two students share a place. You are\nalso given the arrangement of the already formed teams in the order in which\nthey has been created. Your task is to determine the list of priorities for\nthe student number k. If there are several priority lists, choose the\nlexicographically minimal one. Input The first line contains an integer n (1 \u2264\nn \u2264 10^5) which is the number of resulting teams. The second line contains 3n\nspace-separated integers from 1 to 3n which are the results of personal\ntraining sessions. It is guaranteed that every student appears in the results\nexactly once. Then follow n lines each containing three integers from 1 to 3n\n\u2014 each line describes the members of a given team. The members of one team can\nbe listed in any order, but the teams themselves are listed in the order in\nwhich they were created. It is guaranteed that the arrangement is correct,\nthat is that every student is a member of exactly one team and those teams\ncould really be created from the given results using the method described\nabove. The last line contains number k (1 \u2264 k \u2264 3n) which is the number of a\nstudent for who the list of priorities should be found. Output Print 3n - 1\nnumbers \u2014 the lexicographically smallest list of priorities for the student\nnumber k. The lexicographical comparison is performed by the standard <\noperator in modern programming languages. The list a is lexicographically less\nthat the list b if exists such an i (1 \u2264 i \u2264 3n), that ai < bi, and for any j\n(1 \u2264 j < i) aj = bj. Note, that the list 1 9 10 is lexicographically less than\nthe list 1 10 9. That is, the comparison of lists is different from the\ncomparison of lines. Examples Input 3 5 4 1 2 6 3 7 8 9 5 6 2 9 3 4 1 7 8 4\nOutput 2 3 5 6 9 1 7 8 Input 3 5 4 1 2 6 3 7 8 9 5 6 2 9 3 4 1 7 8 8 Output 1\n2 3 4 5 6 7 9 Input 2 4 1 3 2 5 6 4 6 5 1 2 3 4 Output 5 6 1 2 3\n\n",
        "cf_contest_id": 59,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n5 4 1 2 6 3 7 8 9\r\n5 6 2\r\n9 3 4\r\n1 7 8\r\n4\r\n",
                "2 3 5 6 9 1 7 8\r\n"
            ],
            [
                "3\r\n5 4 1 2 6 3 7 8 9\r\n5 6 2\r\n9 3 4\r\n1 7 8\r\n8\r\n",
                "1 2 3 4 5 6 7 9\r\n"
            ],
            [
                "2\r\n4 1 3 2 5 6\r\n4 6 5\r\n1 2 3\r\n4\r\n",
                "5 6 1 2 3\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n1 2 3 4 5 6 7 8 9\r\n1 2 3\r\n4 5 9\r\n6 7 8\r\n5\r\n",
                "1 2 3 4 6 7 8 9\r\n"
            ],
            [
                "5\r\n5 3 2 7 12 9 4 14 1 10 8 13 6 15 11\r\n5 3 9\r\n2 7 12\r\n4 10 15\r\n14 8 13\r\n1 6 11\r\n13\r\n",
                "1 2 3 4 5 6 7 8 9 10 11 12 14 15\r\n"
            ],
            [
                "6\r\n6 4 10 16 14 11 13 1 7 17 18 15 5 3 9 12 2 8\r\n6 10 1\r\n4 3 9\r\n16 11 13\r\n14 15 2\r\n7 18 5\r\n17 12 8\r\n7\r\n",
                "1 2 3 4 5 6 9 10 11 13 14 15 16 18 8 12 17\r\n"
            ],
            [
                "7\r\n4 19 14 8 21 16 2 18 1 15 3 17 13 5 6 10 9 7 12 11 20\r\n4 19 10\r\n14 8 3\r\n21 17 9\r\n16 6 12\r\n2 13 20\r\n18 1 7\r\n15 5 11\r\n21\r\n",
                "3 4 8 9 10 14 17 1 2 5 6 7 11 12 13 15 16 18 19 20\r\n"
            ],
            [
                "1\r\n2 3 1\r\n2 3 1\r\n2\r\n",
                "1 3\r\n"
            ],
            [
                "2\r\n2 3 4 5 6 1\r\n2 3 4\r\n5 6 1\r\n1\r\n",
                "2 3 4 5 6\r\n"
            ],
            [
                "3\r\n2 9 5 8 7 1 3 6 4\r\n2 5 1\r\n9 7 6\r\n8 3 4\r\n8\r\n",
                "1 2 3 4 5 6 7 9\r\n"
            ],
            [
                "4\r\n4 8 3 1 7 12 10 9 11 2 5 6\r\n4 8 3\r\n1 2 6\r\n7 10 9\r\n12 11 5\r\n11\r\n",
                "1 2 3 4 5 6 7 8 9 10 12\r\n"
            ],
            [
                "1\r\n2 3 1\r\n2 3 1\r\n2\r\n",
                "1 3\r\n"
            ],
            [
                "2\r\n6 4 5 1 3 2\r\n6 1 3\r\n4 5 2\r\n6\r\n",
                "1 3 2 4 5\r\n"
            ],
            [
                "3\r\n2 9 5 8 7 1 3 6 4\r\n2 5 1\r\n9 7 6\r\n8 3 4\r\n9\r\n",
                "1 2 5 6 7 3 4 8\r\n"
            ],
            [
                "4\r\n4 8 3 1 7 12 10 9 11 2 5 6\r\n4 8 3\r\n1 12 2\r\n7 11 6\r\n10 9 5\r\n10\r\n",
                "1 2 3 4 5 6 7 8 9 11 12\r\n"
            ]
        ]
    }
]