[
    {
        "name": "Parking Lot",
        "description": "Petya's been bored at work and he is killing the time by watching the parking\nlot at the office. The parking lot looks from above like an n \u00d7 m table (a\ncell of the table corresponds to a single parking spot). Some spots in the\nparking lot are taken, others are empty. Petya watches cars riding into the\nparking lot one by one. After a car settles down at the parking spot, Petya\namuzes himself by counting what maximum square of empty spots (i.e. a square\nsubtable) can be seen on the parking lot if we look at it from above. Also, he\ntakes notes of the square's size (side length) in his notebook. You task is:\ngiven the state of the parking lot at the initial moment of time and the\ninformation about where the arriving cars park, restore what Petya wrote in\nhis notebook. It is midday, so nobody leaves the lot. Input The first line\ncontains three integers n, m and k \u2014 the sizes of the parking lot and the\nnumber of arriving cars after Petya started his watch (1 \u2264 n, m, k \u2264 2000).\nEach of the following n lines contains m characters 'X' and '.', where 'X'\nmeans a taken spot and '.' means an empty spot. Each of the next k lines\ncontains a pair of integers xi, yi \u2014 the number of row and column of the spot\nthe corresponding car takes (1 \u2264 xi \u2264 n, 1 \u2264 yi \u2264 m). It is guaranteed that\nthis place was empty. You can assume that a car enters a parking lot only\nafter the previous car successfully finds a spot. Output Print k integers \u2014\nthe length of the side of the maximum square of empty spots after the\ncorresponding car has entered the parking lot. Examples Input 7 8 4 ........\nX.....X. ........ ........ .X...... ........ ........ 1 5 6 4 3 5 4 6 Output 5\n4 4 3\n\n",
        "cf_contest_id": 480,
        "cf_index": "E",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "divide and conquer"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 8 4\r\n........\r\nX.....X.\r\n........\r\n........\r\n.X......\r\n........\r\n........\r\n1 5\r\n6 4\r\n3 5\r\n4 6\r\n",
                "5\r\n4\r\n4\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 2 2\r\nX.\r\n.X\r\n2 1\r\n1 2\r\n",
                "1\r\n0\r\n"
            ],
            [
                "1 1 1\r\n.\r\n1 1\r\n",
                "0\r\n"
            ],
            [
                "100 1 20\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\nX\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\nX\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\nX\r\nX\r\n.\r\n.\r\n.\r\n.\r\n.\r\nX\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\nX\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\nX\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\nX\r\n7 1\r\n48 1\r\n82 1\r\n45 1\r\n88 1\r\n33 1\r\n56 1\r\n74 1\r\n98 1\r\n68 1\r\n24 1\r\n94 1\r\n66 1\r\n57 1\r\n84 1\r\n95 1\r\n40 1\r\n47 1\r\n77 1\r\n81 1\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n"
            ]
        ]
    }
]