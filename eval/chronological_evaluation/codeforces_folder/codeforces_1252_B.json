[
    {
        "name": "Cleaning Robots",
        "description": "The new ICPC town has \n    N\n junctions (numbered from \n    1\n to \n    N\n)\nwhich are connected by \n    N-1\n roads. It is possible from one junction to go\nto any other junctions by going through one or more roads. To make sure all\nthe junctions are well-maintained, the government environment agency is\nplanning to deploy their newest advanced cleaning robots. In addition to its\ncleaning ability, each robot is also equipped with a movement ability such\nthat it can move from one junction to any other junctions connected by roads.\nHowever, as you might have guessed, such robots are not cheap. Therefore, the\nagency is considering the following deployment plan. Let \n    T_k\n be the set\nof junctions which should be cleaned by the \n    k^th\n robot (also known as,\nthe robot's task), and \n    |T_k| \n    \u2265 1\n be the number of junctions in\n\n    T_k\n. The junctions in \n    T_k\n form a path, i.e. there exists a\nsequence of \n    v_1, v_2, \n    \u2026, v_|T_k|\n where \n    v_i \n    \u2208 T_k\n and\n\n    v_i \n    \u2260 v_j\n for all \n    i \n    \u2260 j\n such that each adjacent junction\nin this sequence is connected by a road. The union of \n    T\n for all robots\nis equal to the set of all junctions in ICPC town. On the other hand, no two\nrobots share a common junction, i.e. \n    T_i \n    \u2229 T_j = \n    \u2205\n if\n\n    i \n    \u2260 j\n. To avoid complaints from citizens for an inefficient\noperation, the deployment plan should be irreducible; in other words, there\nshould be no two robots, \n    i\n and \n    j\n, such that \n    T_i \n    \u222a T_j\n\nforms a (longer) path. Note that the agency does not care whether the number\nof robots being used is minimized as long as all the tasks are irreducible.\nYour task in this problem is to count the number of feasible deployment plan\ngiven the town's layout. A plan is feasible if and only if it satisfies all\nthe above-mentioned requirements. For example, let \n    N = 6\n and the roads\nare \n    (1,3),(2,3),(3,4),(4,5),(4,6)\n. There are \n    5\n feasible\ndeployment plans as shown in the following figure. The first plan uses \n    2\n\nrobots (labeled as A and B in the figure) to clean \n    1,2,3\n and\n\n    4,5,6\n. The second plan uses \n    3\n robots (labeled as A, B,\nand C in the figure) to clean \n    1,3,4,6\n, \n    2\n, and\n\n    5\n. The third plan uses \n    3\n robots to clean\n\n    1,3,4,5\n, \n    2\n, and \n    6\n. The fourth\nplan uses \n    3\n robots to clean \n    1\n, \n    2,3,4,6\n,\nand \n    5\n. The fifth plan uses \n    3\n robots to clean\n\n    1\n, \n    2,3,4,5\n, and \n    6\n. No other\nplans are feasible in this case. For example, the plan\n\n    1,3\n    \n    ,\n    \n    2\n    \n    ,\n    \n    4,5,6\n is not feasible as\nthe task \n    1,3\n and \n    2\n can be combined into a\nlonger path \n    1,3,2\n. The plan\n\n    1,2,3,4\n    \n    ,\n    \n    5\n    \n    ,\n    \n    6\n is also not feasible\nas \n    1,2,3,4\n is not a path. Input Input begins with a line\ncontaining an integer: \n    N\n (\n    1 \n    \u2264 N \n    \u2264 100\n     000\n) representing\nthe number of junctions. The next \n    N-1\n lines each contains two integers:\n\n    u_i\n \n    v_i\n (\n    1 \n    \u2264 u_i < v_i \n    \u2264 N\n) representing a road\nconnecting junction \n    u_i\n and junction \n    v_i\n. It is guaranteed that it\nis possible from one junction to go to any other junctions by going through\none or more roads. Output Output in a line an integer representing the number\nof feasible deployment plans. As this output can be large, you need to modulo\nthe output by \n    1\n     000\n     000\n     007\n. Examples Input 6 1 3 2 3 3 4 4 5 4\n6 Output 5 Input 5 1 2 2 3 2 4 4 5 Output 3 Note Explanation for the sample\ninput/output #1 This is the example from the problem description.\n\n",
        "cf_contest_id": 1252,
        "cf_index": "B",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [],
        "private_cases": []
    }
]