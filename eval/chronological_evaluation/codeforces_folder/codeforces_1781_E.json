[
    {
        "name": "Rectangle Shrinking",
        "description": "You have a rectangular grid of height \n    2\n and width \n    10^9\n consisting\nof unit cells. There are \n    n\n rectangles placed on this grid, and the\nborders of these rectangles pass along cell borders. The \n    i\n-th rectangle\ncovers all cells in rows from \n    u_i\n to \n    d_i\n inclusive and columns\nfrom \n    l_i\n to \n    r_i\n inclusive (\n    1 \n    \u2264 u_i \n    \u2264 d_i \n    \u2264 2\n;\n\n    1 \n    \u2264 l_i \n    \u2264 r_i \n    \u2264 10^9\n). The initial rectangles can intersect,\nbe nested, and coincide arbitrarily. You should either remove each rectangle,\nor replace it with any of its non-empty subrectangles. In the latter case, the\nnew subrectangle must lie inside the initial rectangle, and its borders must\nstill pass along cell borders. In particular, it is allowed for the\nsubrectangle to be equal to the initial rectangle. After that replacement, no\ntwo (non-removed) rectangles are allowed to have common cells, and the total\narea covered with the new rectangles must be as large as possible.\nIllustration for the first test case. The initial rectangles are given at the\ntop, the new rectangles are given at the bottom. Rectangle number \n    4\n is\nremoved. Input Each test contains multiple test cases. The first line contains\nthe number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n). The description\nof the test cases follows. The first line of each test case contains a single\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of\nrectangles. Each of the next \n    n\n lines contains four integers \n    u_i, l_i,\n    d_i, r_i\n (\n    1 \n    \u2264 u_i \n    \u2264 d_i \n    \u2264 2\n; \n    1 \n    \u2264 l_i \n    \u2264 r_i\n    \n    \u2264 10^9\n) \u2014 the coordinates of cells located in the top-left and the\nbottom-right corners of the rectangle, respectively. It is guaranteed that the\nsum of \n    n\n over all test cases does not exceed \n    2 \n    \u00b7 10^5\n.\nOutput For each test case, first print an integer \n    s\n \u2014 the largest\npossible covered by new rectangles area. Then print \n    n\n lines with your\nsolution to cover this area. In the \n    i\n-th of these lines print four\nintegers \n    u'_i, l'_i, d'_i, r'_i\n. If you remove the \n    i\n-th rectangle,\nprint \n    u'_i = l'_i = d'_i = r'_i = 0\n. Otherwise, these numbers denote the\nnew coordinates of the top-left and the bottom-right corners of the \n    i\n-th\nrectangle, satisfying \n    u_i \n    \u2264 u'_i \n    \u2264 d'_i \n    \u2264 d_i\n; \n    l_i \n    \u2264\n    l'_i \n    \u2264 r'_i \n    \u2264 r_i\n. If there are multiple solutions, print any.\nExample Input 8 5 1 2 2 4 2 4 2 8 1 4 2 7 1 2 1 2 1 9 1 10 2 1 1 1 10 1 5 1 15\n2 1 1 1 10 1 1 1 10 5 1 3 1 7 1 3 1 8 1 1 1 4 1 2 1 7 1 10 1 11 2 1 1 2 10 1 5\n1 8 2 1 5 2 10 1 2 1 7 2 1 5 2 10 2 2 2 15 5 2 6 2 7 1 4 2 5 1 5 1 9 1 7 2 10\n1 2 1 6 Output 15 1 2 2 4 2 5 2 8 1 5 1 7 0 0 0 0 1 9 1 10 15 1 1 1 10 1 11 1\n15 10 1 1 1 10 0 0 0 0 10 0 0 0 0 1 8 1 8 1 1 1 4 1 5 1 7 1 10 1 11 20 1 1 2\n10 0 0 0 0 15 1 5 2 10 1 2 1 4 20 1 5 1 10 2 2 2 15 16 2 6 2 6 2 4 2 5 0 0 0 0\n1 7 2 10 1 2 1 6 Note The picture in the statement illustrates the first test\ncase.\n\n",
        "cf_contest_id": 1781,
        "cf_index": "E",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "data structures",
            "greedy",
            "implementation",
            "two pointers"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "8\r\n5\r\n1 2 2 4\r\n2 4 2 8\r\n1 4 2 7\r\n1 2 1 2\r\n1 9 1 10\r\n2\r\n1 1 1 10\r\n1 5 1 15\r\n2\r\n1 1 1 10\r\n1 1 1 10\r\n5\r\n1 3 1 7\r\n1 3 1 8\r\n1 1 1 4\r\n1 2 1 7\r\n1 10 1 11\r\n2\r\n1 1 2 10\r\n1 5 1 8\r\n2\r\n1 5 2 10\r\n1 2 1 7\r\n2\r\n1 5 2 10\r\n2 2 2 15\r\n5\r\n2 6 2 7\r\n1 4 2 5\r\n1 5 1 9\r\n1 7 2 10\r\n1 2 1 6\r\n",
                "15\r\n1 2 2 4\r\n2 5 2 8\r\n1 5 1 7\r\n0 0 0 0\r\n1 9 1 10\r\n15\r\n1 1 1 4\r\n1 5 1 15\r\n10\r\n1 1 1 10\r\n0 0 0 0\r\n10\r\n0 0 0 0\r\n1 3 1 8\r\n1 1 1 1\r\n1 2 1 2\r\n1 10 1 11\r\n20\r\n1 1 2 10\r\n0 0 0 0\r\n15\r\n1 5 2 10\r\n1 2 1 4\r\n20\r\n1 5 1 10\r\n2 2 2 15\r\n16\r\n2 6 2 7\r\n2 4 2 5\r\n1 6 1 7\r\n1 8 2 10\r\n1 2 1 5\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n1\r\n1 2 1 4\r\n3\r\n1 2 1 7\r\n1 3 1 10\r\n1 3 1 4\r\n2\r\n1 3 1 10\r\n1 5 1 9\r\n1\r\n1 3 1 5\r\n1\r\n1 1 1 9\r\n2\r\n1 8 1 10\r\n1 6 1 8\r\n4\r\n1 5 1 5\r\n1 7 1 10\r\n1 1 1 2\r\n1 4 1 4\r\n1\r\n1 8 1 8\r\n2\r\n1 9 1 9\r\n1 2 1 5\r\n3\r\n1 5 1 5\r\n1 5 1 6\r\n1 5 1 9\r\n",
                "3\r\n1 2 1 4\r\n9\r\n1 2 1 2\r\n1 3 1 10\r\n0 0 0 0\r\n8\r\n1 3 1 10\r\n0 0 0 0\r\n3\r\n1 3 1 5\r\n9\r\n1 1 1 9\r\n5\r\n1 8 1 10\r\n1 6 1 7\r\n8\r\n1 5 1 5\r\n1 7 1 10\r\n1 1 1 2\r\n1 4 1 4\r\n1\r\n1 8 1 8\r\n5\r\n1 9 1 9\r\n1 2 1 5\r\n5\r\n0 0 0 0\r\n0 0 0 0\r\n1 5 1 9\r\n"
            ],
            [
                "10\r\n1\r\n1 3 2 8\r\n1\r\n2 3 2 9\r\n1\r\n1 3 2 8\r\n4\r\n2 2 2 8\r\n1 6 1 10\r\n1 4 1 4\r\n1 2 2 6\r\n2\r\n1 8 2 10\r\n1 3 2 9\r\n2\r\n1 2 2 5\r\n1 2 2 8\r\n3\r\n1 2 1 10\r\n1 2 2 3\r\n1 5 2 9\r\n3\r\n1 7 2 10\r\n1 3 2 10\r\n1 7 2 8\r\n2\r\n1 6 2 9\r\n1 6 2 6\r\n1\r\n1 7 2 8\r\n",
                "12\r\n1 3 2 8\r\n7\r\n2 3 2 9\r\n12\r\n1 3 2 8\r\n16\r\n2 2 2 8\r\n1 7 1 10\r\n0 0 0 0\r\n1 2 1 6\r\n16\r\n1 10 2 10\r\n1 3 2 9\r\n14\r\n1 2 2 5\r\n1 6 2 8\r\n16\r\n1 2 1 10\r\n2 2 2 3\r\n2 5 2 9\r\n16\r\n0 0 0 0\r\n1 3 2 10\r\n0 0 0 0\r\n8\r\n1 6 2 9\r\n0 0 0 0\r\n4\r\n1 7 2 8\r\n"
            ]
        ]
    }
]