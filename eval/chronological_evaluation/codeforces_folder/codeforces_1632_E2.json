[
    {
        "name": "Distance Tree (hard version)",
        "description": "This version of the problem differs from the previous one only in the\nconstraint on \n    n\n. A tree is a connected undirected graph without cycles.\nA weighted tree has a weight assigned to each edge. The distance between two\nvertices is the minimum sum of weights on the path connecting them. You are\ngiven a weighted tree with \n    n\n vertices, each edge has a weight of\n\n    1\n. Denote \n    d(v)\n as the distance between vertex \n    1\n and vertex\n\n    v\n. Let \n    f(x)\n be the minimum possible value of \n    max\n    _1\n    \n    \u2264 v \n    \u2264 n\n     d(v)\n if you can temporarily add an edge with\nweight \n    x\n between any two vertices \n    a\n and \n    b\n \n    (1 \n    \u2264 a, b\n    \n    \u2264 n)\n. Note that after this operation, the graph is no longer a tree.\nFor each integer \n    x\n from \n    1\n to \n    n\n, find \n    f(x)\n. Input The\nfirst line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014\nthe number of test cases. The first line of each test case contains a single\ninteger \n    n\n (\n    2 \n    \u2264 n \n    \u2264 3 \n    \u00b7 10^5\n). Each of the next\n\n    n\u22121\n lines contains two integers \n    u\n and \n    v\n (\n    1 \n    \u2264 u,v\n    \n    \u2264 n\n) indicating that there is an edge between vertices \n    u\n and\n\n    v\n. It is guaranteed that the given edges form a tree. It is guaranteed\nthat the sum of \n    n\n over all test cases doesn't exceed \n    3 \n    \u00b7\n    10^5\n. Output For each test case, print \n    n\n integers in a single line,\n\n    x\n-th of which is equal to \n    f(x)\n for all \n    x\n from \n    1\n to\n\n    n\n. Example Input 3 4 1 2 2 3 1 4 2 1 2 7 1 2 1 3 3 4 3 5 3 6 5 7 Output\n1 2 2 2 1 1 2 2 3 3 3 3 3 Note In the first testcase: For \n    x = 1\n, we can\nan edge between vertices \n    1\n and \n    3\n, then \n    d(1) = 0\n and \n    d(2)\n    = d(3) = d(4) = 1\n, so \n    f(1) = 1\n. For \n    x \n    \u2265 2\n, no matter which\nedge we add, \n    d(1) = 0\n, \n    d(2) = d(4) = 1\n and \n    d(3) = 2\n, so\n\n    f(x) = 2\n.\n\n",
        "cf_contest_id": 1632,
        "cf_index": "E2",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dfs and similar",
            "shortest paths",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n4\r\n1 2\r\n2 3\r\n1 4\r\n2\r\n1 2\r\n7\r\n1 2\r\n1 3\r\n3 4\r\n3 5\r\n3 6\r\n5 7\r\n",
                "1 2 2 2 \r\n1 1 \r\n2 2 3 3 3 3 3 \r\n"
            ]
        ],
        "private_cases": []
    }
]