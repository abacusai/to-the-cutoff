[
    {
        "name": "Frog Jumping",
        "description": "A frog is currently at the point \n    0\n on a coordinate axis \n    Ox\n. It\njumps by the following algorithm: the first jump is \n    a\n units to the\nright, the second jump is \n    b\n units to the left, the third jump is \n    a\n\nunits to the right, the fourth jump is \n    b\n units to the left, and so on.\nFormally: if the frog has jumped an even number of times (before the current\njump), it jumps from its current position \n    x\n to position \n    x+a\n;\notherwise it jumps from its current position \n    x\n to position \n    x-b\n.\nYour task is to calculate the position of the frog after \n    k\n jumps. But...\nOne more thing. You are watching \n    t\n different frogs so you have to answer\n\n    t\n independent queries. Input The first line of the input contains one\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of queries. Each of\nthe next \n    t\n lines contain queries (one query per line). The query is\ndescribed as three space-separated integers \n    a, b, k\n (\n    1 \n    \u2264 a, b, k\n    \n    \u2264 10^9\n) \u2014 the lengths of two types of jumps and the number of jumps,\nrespectively. Output Print \n    t\n integers. The \n    i\n-th integer should be\nthe answer for the \n    i\n-th query. Example Input 6 5 2 3 100 1 4 1 10 5\n1000000000 1 6 1 1 1000000000 1 1 999999999 Output 8 198 -17 2999999997 0 1\nNote In the first query frog jumps \n    5\n to the right, \n    2\n to the left\nand \n    5\n to the right so the answer is \n    5 - 2 + 5 = 8\n. In the second\nquery frog jumps \n    100\n to the right, \n    1\n to the left, \n    100\n to the\nright and \n    1\n to the left so the answer is \n    100 - 1 + 100 - 1 = 198\n.\nIn the third query the answer is \n    1 - 10 + 1 - 10 + 1 = -17\n. In the\nfourth query the answer is \n    10^9 - 1 + 10^9 - 1 + 10^9 - 1 = 2999999997\n.\nIn the fifth query all frog's jumps are neutralized by each other so the\nanswer is \n    0\n. The sixth query is the same as the fifth but without the\nlast jump so the answer is \n    1\n.\n\n",
        "cf_contest_id": 1532,
        "cf_index": "B",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "6\r\n5 2 3\r\n100 1 4\r\n1 10 5\r\n1000000000 1 6\r\n1 1 1000000000\r\n1 1 999999999\r\n",
                "8\r\n198\r\n-17\r\n2999999997\r\n0\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n19280817 1 1\r\n",
                "19280817\r\n"
            ],
            [
                "1\r\n598 56 799\r\n",
                "216856\r\n"
            ],
            [
                "1\r\n599 56 799\r\n",
                "217256\r\n"
            ]
        ]
    }
]