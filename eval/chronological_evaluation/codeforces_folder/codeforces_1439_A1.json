[
    {
        "name": "Binary Table (Easy Version)",
        "description": "This is the easy version of the problem. The difference between the versions\nis in the number of possible operations that can be made. You can make hacks\nif and only if you solved both versions of the problem. You are given a binary\ntable of size \n    n \n    \u00d7 m\n. This table consists of symbols \n    0\n and\n\n    1\n. You can make such operation: select \n    3\n different cells that\nbelong to one \n    2 \n    \u00d7 2\n square and change the symbols in these cells\n(change \n    0\n to \n    1\n and \n    1\n to \n    0\n). Your task is to make all\nsymbols in the table equal to \n    0\n. You are allowed to make at most\n\n    3nm\n operations. You don't need to minimize the number of operations. It\ncan be proved that it is always possible. Input The first line contains a\nsingle integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 5000\n) \u2014 the number of test\ncases. The next lines contain descriptions of test cases. The first line of\nthe description of each test case contains two integers \n    n\n, \n    m\n (\n    2\n    \n    \u2264 n, m \n    \u2264 100\n). Each of the next \n    n\n lines contains a binary\nstring of length \n    m\n, describing the symbols of the next row of the table.\nIt is guaranteed that the sum of \n    nm\n for all test cases does not exceed\n\n    20000\n. Output For each test case print the integer \n    k\n (\n    0 \n    \u2264\n    k \n    \u2264 3nm\n) \u2014 the number of operations. In the each of the next \n    k\n\nlines print \n    6\n integers \n    x_1, y_1, x_2, y_2, x_3, y_3\n (\n    1 \n    \u2264\n    x_1, x_2, x_3 \n    \u2264 n, 1 \n    \u2264 y_1, y_2, y_3 \n    \u2264 m\n) describing the\nnext operation. This operation will be made with three cells \n    (x_1, y_1)\n,\n\n    (x_2, y_2)\n, \n    (x_3, y_3)\n. These three cells should be different.\nThese three cells should belong into some \n    2 \n    \u00d7 2\n square. Example\nInput 5 2 2 10 11 3 3 011 101 110 4 4 1111 0110 0110 1111 5 5 01011 11001\n00010 11011 10000 2 3 011 101 Output 1 1 1 2 1 2 2 2 2 1 3 1 3 2 1 2 1 3 2 3 4\n1 1 1 2 2 2 1 3 1 4 2 3 3 2 4 1 4 2 3 3 4 3 4 4 4 1 2 2 1 2 2 1 4 1 5 2 5 4 1\n4 2 5 1 4 4 4 5 3 4 2 1 3 2 2 2 3 1 2 2 1 2 2 Note In the first test case, it\nis possible to make only one operation with cells \n    (1, 1)\n, \n    (2, 1)\n,\n\n    (2, 2)\n. After that, all symbols will be equal to \n    0\n. In the second\ntest case: operation with cells \n    (2, 1)\n, \n    (3, 1)\n, \n    (3, 2)\n.\nAfter it the table will be: 011 001 000 operation with cells \n    (1, 2)\n,\n\n    (1, 3)\n, \n    (2, 3)\n. After it the table will be: 000 000 000 In the\nfifth test case: operation with cells \n    (1, 3)\n, \n    (2, 2)\n, \n    (2,\n    3)\n. After it the table will be: 010 110 operation with cells \n    (1, 2)\n,\n\n    (2, 1)\n, \n    (2, 2)\n. After it the table will be: 000 000\n\n",
        "cf_contest_id": 1439,
        "cf_index": "A1",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n2 2\r\n10\r\n11\r\n3 3\r\n011\r\n101\r\n110\r\n4 4\r\n1111\r\n0110\r\n0110\r\n1111\r\n5 5\r\n01011\r\n11001\r\n00010\r\n11011\r\n10000\r\n2 3\r\n011\r\n101\r\n",
                "9\r\n1 1 1 2 2 2\r\n1 1 2 1 2 2\r\n1 1 1 2 2 1\r\n2 1 2 2 1 2\r\n2 1 1 1 1 2\r\n2 1 2 2 1 1\r\n2 2 2 1 1 1\r\n2 2 1 2 1 1\r\n2 2 2 1 1 2\r\n18\r\n1 2 1 3 2 3\r\n1 2 2 2 2 3\r\n1 2 1 3 2 2\r\n1 3 1 2 2 2\r\n1 3 2 3 2 2\r\n1 3 1 2 2 3\r\n2 1 2 2 3 2\r\n2 1 3 1 3 2\r\n2 1 2 2 3 1\r\n2 3 2 2 3 2\r\n2 3 3 3 3 2\r\n2 3 2 2 3 3\r\n3 1 3 2 2 2\r\n3 1 2 1 2 2\r\n3 1 3 2 2 1\r\n3 2 3 3 2 3\r\n3 2 2 2 2 3\r\n3 2 3 3 2 2\r\n36\r\n1 1 1 2 2 2\r\n1 1 2 1 2 2\r\n1 1 1 2 2 1\r\n1 2 1 3 2 3\r\n1 2 2 2 2 3\r\n1 2 1 3 2 2\r\n1 3 1 4 2 4\r\n1 3 2 3 2 4\r\n1 3 1 4 2 3\r\n1 4 1 3 2 3\r\n1 4 2 4 2 3\r\n1 4 1 ..."
            ]
        ],
        "private_cases": []
    }
]