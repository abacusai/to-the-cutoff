[
    {
        "name": "Repairing Of String",
        "description": "Stepan had a favorite string s which consisted of the lowercase letters of the\nLatin alphabet. After graduation, he decided to remember it, but it was a long\ntime ago, so he can't now remember it. But Stepan remembers some information\nabout the string, namely the sequence of integers c1, c2, ..., cn, where n\nequals the length of the string s, and ci equals the number of substrings in\nthe string s with the length i, consisting of the same letters. The substring\nis a sequence of consecutive characters in the string s. For example, if the\nStepan's favorite string is equal to \"tttesst\", the sequence c looks like: c =\n[7, 3, 1, 0, 0, 0, 0]. Stepan asks you to help to repair his favorite string s\naccording to the given sequence c1, c2, ..., cn. Input The first line contains\nthe integer n (1 \u2264 n \u2264 2000) \u2014 the length of the Stepan's favorite string. The\nsecond line contains the sequence of integers c1, c2, ..., cn (0 \u2264 ci \u2264 2000),\nwhere ci equals the number of substrings of the string s with the length i,\nconsisting of the same letters. It is guaranteed that the input data is such\nthat the answer always exists. Output Print the repaired Stepan's favorite\nstring. If there are several answers, it is allowed to print any of them. The\nstring should contain only lowercase letters of the English alphabet. Examples\nInput 6 6 3 1 0 0 0 Output kkrrrq Input 4 4 0 0 0 Output abcd Note In the\nfirst test Stepan's favorite string, for example, can be the string \"kkrrrq\",\nbecause it contains 6 substrings with the length 1, consisting of identical\nletters (they begin in positions 1, 2, 3, 4, 5 and 6), 3 substrings with the\nlength 2, consisting of identical letters (they begin in positions 1, 3 and\n4), and 1 substring with the length 3, consisting of identical letters (it\nbegins in the position 3).\n\n",
        "cf_contest_id": 774,
        "cf_index": "H",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "constructive algorithms"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n6 3 1 0 0 0\r\n",
                "aaabba"
            ],
            [
                "4\r\n4 0 0 0\r\n",
                "abab"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n",
                "a"
            ],
            [
                "5\r\n5 0 0 0 0\r\n",
                "ababa"
            ],
            [
                "10\r\n10 8 7 6 5 4 3 2 1 0\r\n",
                "aaaaaaaaab"
            ],
            [
                "20\r\n20 16 12 8 5 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n",
                "aaaaaaabbbbbaaaaabbb"
            ],
            [
                "99\r\n99 26 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n",
                "aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbabababababababababababababababababababababababa"
            ],
            [
                "200\r\n200 180 160 140 122 106 92 79 69 60 52 45 38 32 26 20 14 8 4 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n",
                "aaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbaaaaaaaaaaaabbbbbbbbbbaaaaaaaaabbbbbbbbaaaaaaabbbbbbbaaaaaaabbbbbbaaaaabbbbbaaaabbbbaaabbb"
            ]
        ]
    }
]