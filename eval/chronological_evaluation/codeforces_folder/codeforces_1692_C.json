[
    {
        "name": "Where's the Bishop?",
        "description": "Mihai has an \n    8 \n    \u00d7 8\n chessboard whose rows are numbered from\n\n    1\n to \n    8\n from top to bottom and whose columns are numbered from\n\n    1\n to \n    8\n from left to right. Mihai has placed exactly one bishop on\nthe chessboard. The bishop is not placed on the edges of the board. (In other\nwords, the row and column of the bishop are between \n    2\n and \n    7\n,\ninclusive.) The bishop attacks in all directions diagonally, and there is no\nlimit to the distance which the bishop can attack. Note that the cell on which\nthe bishop is placed is also considered attacked. An example of a bishop on a\nchessboard. The squares it attacks are marked in red. Mihai has marked all\nsquares the bishop attacks, but forgot where the bishop was! Help Mihai find\nthe position of the bishop. Input The first line of the input contains a\nsingle integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 36\n) \u2014 the number of test\ncases. The description of test cases follows. There is an empty line before\neach test case. Each test case consists of \n    8\n lines, each containing\n\n    8\n characters. Each of these characters is either '#' or '.', denoting a\nsquare under attack and a square not under attack, respectively. Output For\neach test case, output two integers \n    r\n and \n    c\n (\n    2 \n    \u2264 r, c\n    \n    \u2264 7\n) \u2014 the row and column of the bishop. The input is generated in\nsuch a way that there is always exactly one possible location of the bishop\nthat is not on the edge of the board. Example Input 3 .....#.. #...#...\n.#.#.... ..#..... .#.#.... #...#... .....#.. ......#. #.#..... .#......\n#.#..... ...#.... ....#... .....#.. ......#. .......# .#.....# ..#...#.\n...#.#.. ....#... ...#.#.. ..#...#. .#.....# #....... Output 4 3 2 2 4 5 Note\nThe first test case is pictured in the statement. Since the bishop lies in the\nintersection row \n    4\n and column \n    3\n, the correct output is 4 3.\n\n",
        "cf_contest_id": 1692,
        "cf_index": "C",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n\r\n.....#..\r\n#...#...\r\n.#.#....\r\n..#.....\r\n.#.#....\r\n#...#...\r\n.....#..\r\n......#.\r\n\r\n#.#.....\r\n.#......\r\n#.#.....\r\n...#....\r\n....#...\r\n.....#..\r\n......#.\r\n.......#\r\n\r\n.#.....#\r\n..#...#.\r\n...#.#..\r\n....#...\r\n...#.#..\r\n..#...#.\r\n.#.....#\r\n#.......\r\n",
                "4 3\r\n2 2\r\n4 5\r\n"
            ]
        ],
        "private_cases": []
    }
]