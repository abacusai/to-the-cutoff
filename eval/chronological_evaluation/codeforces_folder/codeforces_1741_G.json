[
    {
        "name": "Kirill and Company",
        "description": "Kirill lives on a connected undirected graph of \n    n\n vertices and \n    m\n\nedges at vertex \n    1\n. One fine evening he gathered \n    f\n friends, the\n\n    i\n-th friend lives at the vertex \n    h_i\n. So all friends are now in the\nvertex \n    1\n, the \n    i\n-th friend must get to his home to the vertex\n\n    h_i\n. The evening is about to end and it is time to leave. It turned out\nthat \n    k\n (\n    k \n    \u2264 6\n) of his friends have no cars, and they would\nhave to walk if no one gives them a ride. One friend with a car can give a\nride to any number of friends without cars, but only if he can give them a\nride by driving along one of the shortest paths to his house. For example, in\nthe graph below, a friend from vertex \n    h_i=5\n can give a ride to friends\nfrom the following sets of vertices: \n    [2, 3]\n, \n    [2, 4]\n, \n    [2]\n,\n\n    [3]\n, \n    [4]\n, but can't give a ride to friend from vertex \n    6\n or a\nset \n    [3, 4]\n. The vertices where friends without cars live are highlighted\nin green, and with cars \u2014 in red. Kirill wants as few friends as possible to\nhave to walk. Help him find the minimum possible number. Input The first line\nof input data contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^3\n) \u2014 the\nnumber of test cases in the test. The first line of the test case contains two\nintegers \n    n\n and \n    m\n (\n    2 \n    \u2264 n \n    \u2264 10^4\n, \n    n-1 \n    \u2264 m \n    \u2264\n    min (10^4,\n\n    n \n    \u00b7 (n - 1)/2\n\n    )\n) \u2014 the number of\nvertices and edges, respectively. The next \n    m\n lines of the test case\ncontain a description of the edges, two integers each \n    u\n and \n    v\n\n(\n    1 \n    \u2264 u, v \n    \u2264 n\n, \n    u \n     v\n) \u2014 indexes of vertices connected\nby an edge. It is guaranteed that there is at most one edge between any pair\nof vertices (i.e. no multiple edges in the graph). Then follows line\ncontaining the number \n    f\n (\n    1 \n    \u2264 f \n    \u2264 10^4\n) \u2014 the number of\nKirill's friends. The next line of the test case contains \n    f\n integers:\n\n    h_1, h_2, \n    \u2026, h_f\n (\n    2 \n    \u2264 h_i \n    \u2264 n\n) \u2014 the vertices in\nwhich they live. Some vertices may be repeated. The next line of the set\ncontains the number \n    k\n (\n    1 \n    \u2264 k \n    \u2264 min(6, f)\n) \u2014 the number of\nfriends without cars. The last line of each test case contains \n    k\n\nintegers: \n    p_1, p_2, \n    \u2026, p_k\n (\n    1 \n    \u2264 p_i \n    \u2264 f\n, \n    p_i <\n    p_i+1\n) \u2014 indexes of friends without cars. It is guaranteed that the sum\nof \n    n\n over all cases does not exceed \n    10^4\n, as well as the sums of\n\n    m\n and \n    f\n. Output Output \n    t\n lines, each of which contains the\nanswer to the corresponding test case. As an answer, output a single integer \u2014\nthe minimum possible number of friends who will have to walk. Examples Input 3\n6 7 1 2 2 3 2 4 3 5 4 5 3 6 6 5 5 2 3 4 5 6 4 1 2 3 5 6 7 1 2 2 3 2 4 3 5 4 5\n3 6 6 5 6 2 3 4 5 6 5 4 1 2 3 5 4 4 1 2 1 3 2 3 3 4 3 3 4 2 2 1 3 Output 2 1 1\nInput 3 2 1 1 2 3 2 2 2 3 1 2 3 3 3 1 2 1 3 2 3 4 2 2 2 3 3 1 2 4 4 4 3 1 3 2\n1 4 2 4 5 3 2 2 4 2 3 1 3 4 Output 3 1 0 Note The first test case of the first\nexample is explained in the statement. In the second test case of the first\nexample, two friends with cars live at vertex \n    5\n, one can give a ride to\nfriends from vertices \n    2\n and \n    3\n, and the second from vertex \n    4\n,\nonly a friend from vertex \n    6\n will have to walk.\n\n",
        "cf_contest_id": 1741,
        "cf_index": "G",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "dfs and similar",
            "dp",
            "flows",
            "graphs",
            "shortest paths"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n6 7\r\n1 2\r\n2 3\r\n2 4\r\n3 5\r\n4 5\r\n3 6\r\n6 5\r\n5\r\n2 3 4 5 6\r\n4\r\n1 2 3 5\r\n6 7\r\n1 2\r\n2 3\r\n2 4\r\n3 5\r\n4 5\r\n3 6\r\n6 5\r\n6\r\n2 3 4 5 6 5\r\n4\r\n1 2 3 5\r\n4 4\r\n1 2\r\n1 3\r\n2 3\r\n3 4\r\n3\r\n3 4 2\r\n2\r\n1 3\r\n",
                "2\r\n1\r\n1\r\n"
            ],
            [
                "3\r\n2 1\r\n1 2\r\n3\r\n2 2 2\r\n3\r\n1 2 3\r\n3 3\r\n1 2\r\n1 3\r\n2 3\r\n4\r\n2 2 2 3\r\n3\r\n1 2 4\r\n4 4\r\n3 1\r\n3 2\r\n1 4\r\n2 4\r\n5\r\n3 2 2 4 2\r\n3\r\n1 3 4\r\n",
                "3\r\n1\r\n0\r\n"
            ]
        ],
        "private_cases": []
    }
]