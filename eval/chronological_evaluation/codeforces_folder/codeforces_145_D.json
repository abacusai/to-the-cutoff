[
    {
        "name": "Lucky Pair",
        "description": "Petya loves lucky numbers very much. Everybody knows that lucky numbers are\npositive integers whose decimal record contains only the lucky digits 4 and 7.\nFor example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not. Petya has an\narray a of n integers. The numbers in the array are numbered starting from 1.\nUnfortunately, Petya has been misbehaving and so, his parents don't allow him\nplay with arrays that have many lucky numbers. It is guaranteed that no more\nthan 1000 elements in the array a are lucky numbers. Petya needs to find the\nnumber of pairs of non-intersecting segments [l1;r1] and [l2;r2] (1 \u2264 l1 \u2264 r1\n< l2 \u2264 r2 \u2264 n, all four numbers are integers) such that there's no such lucky\nnumber that occurs simultaneously in the subarray a[l1..r1] and in the\nsubarray a[l2..r2]. Help Petya count the number of such pairs. Input The first\nline contains an integer n (2 \u2264 n \u2264 10^5) \u2014 the size of the array a. The\nsecond line contains n space-separated integers ai (1 \u2264 ai \u2264 10^9) \u2014 array a.\nIt is guaranteed that no more than 1000 elements in the array a are lucky\nnumbers. Output On the single line print the only number \u2014 the answer to the\nproblem. Please do not use the \nintegers in \u0421++. It is preferred to use the cin, cout streams or the \nspecificator. Examples Input 4 1 4 2 4 Output 9 Input 2 4 7 Output 1 Input 4 4\n4 7 7 Output 9 Note The subarray a[l..r] is an array that consists of elements\nal, al + 1, ..., ar. In the first sample there are 9 possible pairs that\nsatisfy the condition: [1, 1] and [2, 2], [1, 1] and [2, 3], [1, 1] and [2,\n4], [1, 1] and [3, 3], [1, 1] and [3, 4], [1, 1] and [4, 4], [1, 2] and [3,\n3], [2, 2] and [3, 3], [3, 3] and [4, 4]. In the second sample there is only\none pair of segments \u2014 [1;1] and [2;2] and it satisfies the condition.\n\n",
        "cf_contest_id": 145,
        "cf_index": "D",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 4 2 4\r\n",
                "9\r\n"
            ],
            [
                "2\r\n4 7\r\n",
                "1\r\n"
            ],
            [
                "4\r\n4 4 7 7\r\n",
                "9\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n1 2 3 4 5 6 7 8 9 10\r\n",
                "495\r\n"
            ],
            [
                "9\r\n4 7 4 2 1 4 7 4 2\r\n",
                "109\r\n"
            ],
            [
                "2\r\n1 1\r\n",
                "1\r\n"
            ],
            [
                "10\r\n4 47 74 47 7777 7777 1 5 4 7\r\n",
                "364\r\n"
            ],
            [
                "4\r\n1 4 2 7\r\n",
                "15\r\n"
            ],
            [
                "6\r\n1 2 4 5 6 7\r\n",
                "70\r\n"
            ],
            [
                "6\r\n1 2 4 5 7 8\r\n",
                "70\r\n"
            ],
            [
                "10\r\n7 7 7 7 7 7 7 7 7 7\r\n",
                "0\r\n"
            ],
            [
                "3\r\n47 74 47\r\n",
                "2\r\n"
            ],
            [
                "2\r\n777777777 444444444\r\n",
                "1\r\n"
            ],
            [
                "20\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\r\n",
                "7315\r\n"
            ],
            [
                "20\r\n1 2 7 4 5 6 7 8 9 10 47 47 13 14 15 47 17 18 19 47\r\n",
                "5580\r\n"
            ],
            [
                "50\r\n1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10\r\n",
                "88242\r\n"
            ],
            [
                "10\r\n477777477 774747744 7474444 826252677 914843775 635834163 153357983 34088559 444477 4444\r\n",
                "495\r\n"
            ],
            [
                "10\r\n444 4 44 44 4444 444 44 444 444 4\r\n",
                "150\r\n"
            ],
            [
                "33\r\n463445681 4444 444 444444 205878569 307319177 444444 579220024 444 444444 66052369 268290681 44444444 579996990 4444444 444 4444 4444 44 44444 235348780 133826067 382750536 444444 4444444 444 4444444 44444444 839278632 44 12393752 44444444 622041380\r\n",
                "16378\r\n"
            ],
            [
                "50\r\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\r\n",
                "0\r\n"
            ],
            [
                "50\r\n4 4 4 4 4 4 4 7 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 7\r\n",
                "1778\r\n"
            ],
            [
                "50\r\n4 7 4 7 4 7 4 7 4 7 4 7 4 7 4 7 4 7 4 7 4 7 4 7 4 7 4 7 4 7 4 7 4 7 4 7 4 7 4 7 4 7 4 7 4 7 4 7 4 7\r\n",
                "625\r\n"
            ]
        ]
    }
]