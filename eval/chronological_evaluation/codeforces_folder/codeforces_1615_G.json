[
    {
        "name": "Maximum Adjacent Pairs",
        "description": "You are given an array \n    a\n consisting of \n    n\n non-negative integers.\nYou have to replace each \n    0\n in \n    a\n with an integer from \n    1\n to\n\n    n\n (different elements equal to \n    0\n can be replaced by different\nintegers). The value of the array you obtain is the number of integers \n    k\n\nfrom \n    1\n to \n    n\n such that the following condition holds: there exist a\npair of adjacent elements equal to \n    k\n (i. e. there exists some \n    i \n    \u2208\n    [1, n - 1]\n such that \n    a_i = a_i + 1 = k\n). If there are multiple such\npairs for some integer \n    k\n, this integer is counted in the value only\nonce. Your task is to obtain the array with the maximum possible value. Input\nThe first line contains one integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 3 \n    \u00b7\n    10^5\n) \u2014 the number of elements in the array. The second line contains\n\n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264\n    min(n,\n    600)\n) \u2014 the elements of the array. Output Print \n    n\n integers not less\nthan \n    1\n and not greater than \n    n\n \u2014 the array with the maximum\npossible value you can obtain. If there are multiple answers, print any of\nthem. Examples Input 4 1 1 0 2 Output 1 1 2 2 Input 5 0 0 0 0 0 Output 3 1 1 3\n3 Input 5 1 2 3 4 5 Output 1 2 3 4 5 Input 6 1 0 0 0 0 1 Output 1 2 3 3 1 1\nInput 3 3 0 2 Output 3 2 2 Input 5 1 0 2 0 1 Output 1 2 2 1 1 Input 7 1 0 2 3\n1 0 2 Output 1 2 2 3 1 1 2\n\n",
        "cf_contest_id": 1615,
        "cf_index": "G",
        "cf_rating": 3300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graph matchings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4\r\n1 1 0 2\r\n",
                "1 1 2 2 "
            ],
            [
                "5\r\n0 0 0 0 0\r\n",
                "1 1 2 2 3 "
            ],
            [
                "5\r\n1 2 3 4 5\r\n",
                "1 2 3 4 5 "
            ],
            [
                "6\r\n1 0 0 0 0 1\r\n",
                "1 1 2 2 3 1 "
            ],
            [
                "3\r\n3 0 2\r\n",
                "3 2 2 "
            ],
            [
                "5\r\n1 0 2 0 1\r\n",
                "1 2 2 1 1 "
            ],
            [
                "7\r\n1 0 2 3 1 0 2\r\n",
                "1 1 2 3 1 2 2 "
            ]
        ],
        "private_cases": [
            [
                "16\r\n0 0 0 15 16 0 0 4 2 0 13 0 0 13 0 2\r\n",
                "1 1 15 15 16 16 4 4 2 13 13 3 3 13 2 2 "
            ],
            [
                "12\r\n11 10 0 12 5 2 0 6 0 2 6 2\r\n",
                "11 10 10 12 5 2 2 6 6 2 6 2 "
            ],
            [
                "14\r\n0 14 4 1 0 4 9 0 0 0 8 4 0 1\r\n",
                "14 14 4 1 4 4 9 2 2 8 8 4 1 1 "
            ],
            [
                "9\r\n5 1 0 2 0 1 4 0 7\r\n",
                "5 1 1 2 2 1 4 4 7 "
            ],
            [
                "100\r\n0 0 77 89 33 93 0 0 0 40 0 2 93 56 0 60 94 0 2 43 0 82 43 74 4 59 80 9 73 7 33 90 5 12 0 96 0 37 0 72 62 0 59 0 0 0 0 71 26 22 24 0 0 0 0 34 86 87 13 0 0 1 77 0 99 0 0 65 97 6 14 0 0 0 0 59 73 0 0 18 0 3 76 39 52 0 0 56 0 0 58 0 84 0 95 0 0 0 58 0\r\n",
                "8 8 77 89 33 93 93 10 10 40 40 2 93 56 60 60 94 2 2 43 43 82 43 74 4 59 80 9 73 7 33 90 5 12 12 96 37 37 72 72 62 62 59 11 11 15 71 71 26 22 24 24 16 16 34 34 86 87 13 13 1 1 77 77 99 99 65 65 97 6 14 14 17 17 59 59 73 73 18 18 3 3 76 39 52 52 56 56 19 19 58 84 84 95 95 20 20 58 58 21 "
            ],
            [
                "20\r\n1 0 4 3 0 0 0 2 1 0 0 4 2 0 0 4 2 0 0 3\r\n",
                "1 1 4 3 3 5 5 2 1 6 6 4 2 2 4 4 2 7 7 3 "
            ]
        ]
    }
]