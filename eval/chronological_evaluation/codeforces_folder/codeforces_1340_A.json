[
    {
        "name": "Nastya and Strange Generator",
        "description": "Denis was very sad after Nastya rejected him. So he decided to walk through\nthe gateways to have some fun. And luck smiled at him! When he entered the\nfirst courtyard, he met a strange man who was selling something. Denis bought\na mysterious item and it was... Random permutation generator! Denis could not\nbelieved his luck. When he arrived home, he began to study how his generator\nworks and learned the algorithm. The process of generating a permutation\nconsists of \n    n\n steps. At the \n    i\n-th step, a place is chosen for the\nnumber \n    i\n \n    (1 \n    \u2264 i \n    \u2264 n)\n. The position for the number\n\n    i\n is defined as follows: For all \n    j\n from \n    1\n to \n    n\n, we\ncalculate \n    r_j\n \u2014 the minimum index such that \n    j \n    \u2264 r_j \n    \u2264 n\n,\nand the position \n    r_j\n is not yet occupied in the permutation. If there\nare no such positions, then we assume that the value of \n    r_j\n is not\ndefined. For all \n    t\n from \n    1\n to \n    n\n, we calculate \n    count_t\n \u2014\nthe number of positions \n    1 \n    \u2264 j \n    \u2264 n\n such that \n    r_j\n is\ndefined and \n    r_j = t\n. Consider the positions that are still not occupied\nby permutation and among those we consider the positions for which the value\nin the \n    count\n array is maximum. The generator selects one of these\npositions for the number \n    i\n. The generator can choose any position. Let's\nhave a look at the operation of the algorithm in the following example: Let\n\n    n = 5\n and the algorithm has already arranged the numbers \n    1, 2, 3\n\nin the permutation. Consider how the generator will choose a position for the\nnumber \n    4\n: The values of \n    r\n will be \n    r = [3, 3, 3, 4,\n    \n    \u00d7]\n, where \n    \u00d7\n means an indefinite value. Then the\n\n    count\n values will be \n    count = [0, 0, 3, 1, 0]\n. There are only two\nunoccupied positions in the permutation: \n    3\n and \n    4\n. The value in the\n\n    count\n array for position \n    3\n is \n    3\n, for position \n    4\n it is\n\n    1\n. The maximum value is reached only for position \n    3\n, so the\nalgorithm will uniquely select this position for number \n    4\n. Satisfied\nwith his purchase, Denis went home. For several days without a break, he\ngenerated permutations. He believes that he can come up with random\npermutations no worse than a generator. After that, he wrote out the first\npermutation that came to mind \n    p_1, p_2, \n    \u2026, p_n\n and decided to\nfind out if it could be obtained as a result of the generator. Unfortunately,\nthis task was too difficult for him, and he asked you for help. It is\nnecessary to define whether the written permutation could be obtained using\nthe described algorithm if the generator always selects the position Denis\nneeds. Input The first line contains a single integer \n    t\n \n    (1 \n    \u2264 t\n    \n    \u2264 10^5)\n \u2014 the number of test cases. Then the descriptions of the test\ncases follow. The first line of the test case contains a single integer\n\n    n\n \n    (1 \n    \u2264 n \n    \u2264 10^5)\n \u2014 the size of the permutation. The\nsecond line of the test case contains \n    n\n different integers \n    p_1, p_2,\n    \n    \u2026, p_n\n (\n    1 \n    \u2264 p_i \n    \u2264 n\n) \u2014 the permutation written by\nDenis. It is guaranteed that the sum of \n    n\n over all test cases doesn't\nexceed \n    10^5\n. Output Print \"Yes\" if this permutation could be obtained as\na result of the generator. Otherwise, print \"No\". All letters can be displayed\nin any case. Example Input 5 5 2 3 4 5 1 1 1 3 1 3 2 4 4 2 3 1 5 1 5 2 4 3\nOutput Yes Yes No Yes No Note Let's simulate the operation of the generator in\nthe first test. At the \n    1\n step, \n    r = [1, 2, 3, 4, 5], count = [1, 1, 1,\n    1, 1]\n. The maximum value is reached in any free position, so the generator\ncan choose a random position from \n    1\n to \n    5\n. In our example, it chose\n\n    5\n. At the \n    2\n step, \n    r = [1, 2, 3, 4, \n    \u00d7], count = [1, 1, 1,\n    1, 0]\n. The maximum value is reached in positions from \n    1\n to \n    4\n,\nso the generator can choose a random position among them. In our example, it\nchose \n    1\n. At the \n    3\n step, \n    r = [2, 2, 3, 4, \n    \u00d7], count = [0,\n    2, 1, 1, 0]\n. The maximum value is \n    2\n and is reached only at the\n\n    2\n position, so the generator will choose this position. At the \n    4\n\nstep, \n    r = [3, 3, 3, 4, \n    \u00d7], count = [0, 0, 3, 1, 0]\n. The maximum\nvalue is \n    3\n and is reached only at the \n    3\n position, so the generator\nwill choose this position. At the \n    5\n step, \n    r = [4, 4, 4, 4, \n    \u00d7],\n    count = [0, 0, 0, 4, 0]\n. The maximum value is \n    4\n and is reached only\nat the \n    4\n position, so the generator will choose this position. In total,\nwe got a permutation of \n    2, 3, 4, 5, 1\n, that is, a generator could\ngenerate it.\n\n",
        "cf_contest_id": 1340,
        "cf_index": "A",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n5\r\n2 3 4 5 1\r\n1\r\n1\r\n3\r\n1 3 2\r\n4\r\n4 2 3 1\r\n5\r\n1 5 2 4 3\r\n",
                "Yes\r\nYes\r\nNo\r\nYes\r\nNo\r\n"
            ]
        ],
        "private_cases": []
    }
]