[
    {
        "name": "White Lines",
        "description": "Gildong has bought a famous painting software cfpaint. The working screen of\ncfpaint is square-shaped consisting of \n    n\n rows and \n    n\n columns of\nsquare cells. The rows are numbered from \n    1\n to \n    n\n, from top to\nbottom, and the columns are numbered from \n    1\n to \n    n\n, from left to\nright. The position of a cell at row \n    r\n and column \n    c\n is represented\nas \n    (r, c)\n. There are only two colors for the cells in cfpaint \u2014 black\nand white. There is a tool named eraser in cfpaint. The eraser has an integer\nsize \n    k\n (\n    1 \n    \u2264 k \n    \u2264 n\n). To use the eraser, Gildong needs to\nclick on a cell \n    (i, j)\n where \n    1 \n    \u2264 i, j \n    \u2264 n - k + 1\n. When a\ncell \n    (i, j)\n is clicked, all of the cells \n    (i', j')\n where \n    i \n    \u2264\n    i' \n    \u2264 i + k - 1\n and \n    j \n    \u2264 j' \n    \u2264 j + k - 1\n become white. In\nother words, a square with side equal to \n    k\n cells and top left corner at\n\n    (i, j)\n is colored white. A white line is a row or a column without any\nblack cells. Gildong has worked with cfpaint for some time, so some of the\ncells (possibly zero or all) are currently black. He wants to know the maximum\nnumber of white lines after using the eraser exactly once. Help Gildong find\nthe answer to his question. Input The first line contains two integers \n    n\n\nand \n    k\n (\n    1 \n    \u2264 k \n    \u2264 n \n    \u2264 2000\n) \u2014 the number of rows and\ncolumns, and the size of the eraser. The next \n    n\n lines contain \n    n\n\ncharacters each without spaces. The \n    j\n-th character in the \n    i\n-th\nline represents the cell at \n    (i,j)\n. Each character is given as either 'B'\nrepresenting a black cell, or 'W' representing a white cell. Output Print one\ninteger: the maximum number of white lines after using the eraser exactly\nonce. Examples Input 4 2 BWWW WBBW WBBW WWWB Output 4 Input 3 1 BWB WWB BWB\nOutput 2 Input 5 3 BWBBB BWBBB BBBBB BBBBB WBBBW Output 2 Input 2 2 BW WB\nOutput 4 Input 2 1 WW WW Output 4 Note In the first example, Gildong can click\nthe cell \n    (2, 2)\n, then the working screen becomes: BWWW WWWW WWWW WWWB\nThen there are four white lines \u2014 the \n    2\n-nd and \n    3\n-rd row, and the\n\n    2\n-nd and \n    3\n-rd column. In the second example, clicking the cell\n\n    (2, 3)\n makes the \n    2\n-nd row a white line. In the third example, both\nthe \n    2\n-nd column and \n    5\n-th row become white lines by clicking the\ncell \n    (3, 2)\n.\n\n",
        "cf_contest_id": 1200,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "dp",
            "implementation",
            "two pointers"
        ],
        "time_limit_seconds": 1.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 2\r\nBWWW\r\nWBBW\r\nWBBW\r\nWWWB\r\n",
                "4\n"
            ],
            [
                "3 1\r\nBWB\r\nWWB\r\nBWB\r\n",
                "2\n"
            ],
            [
                "5 3\r\nBWBBB\r\nBWBBB\r\nBBBBB\r\nBBBBB\r\nWBBBW\r\n",
                "2\n"
            ],
            [
                "2 2\r\nBW\r\nWB\r\n",
                "4\n"
            ],
            [
                "2 1\r\nWW\r\nWW\r\n",
                "4\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\nB\r\n",
                "2\n"
            ],
            [
                "1 1\r\nW\r\n",
                "2\n"
            ],
            [
                "2 1\r\nBB\r\nWW\r\n",
                "2\n"
            ],
            [
                "2 1\r\nBB\r\nBB\r\n",
                "0\n"
            ],
            [
                "4 2\r\nWBBB\r\nBBWB\r\nWBWW\r\nWWBW\r\n",
                "2\n"
            ],
            [
                "6 3\r\nBWWBBW\r\nWWWBBB\r\nWBWWBB\r\nWWBWBW\r\nWWWWWW\r\nBBWWBB\r\n",
                "3\n"
            ],
            [
                "7 3\r\nWWWWWWW\r\nBWWWWWB\r\nWWWWBWW\r\nWBBBWWB\r\nBBWWBBB\r\nWBBWWWW\r\nBWBBBWB\r\n",
                "3\n"
            ],
            [
                "7 3\r\nBWBBWBW\r\nWWWBBWW\r\nWBBBBBW\r\nBWBWBBB\r\nWWBWWBB\r\nBWBWBBW\r\nBBWWWBB\r\n",
                "2\n"
            ],
            [
                "7 3\r\nWWWWBWB\r\nBWWWBBW\r\nWBWBBWB\r\nWWBWWBW\r\nBBWBBBB\r\nWWBBWBW\r\nWBBBBWW\r\n",
                "1\n"
            ],
            [
                "9 4\r\nBWBBWWWWW\r\nWWBWBWWWW\r\nWBWBBBBBB\r\nBWWWBBBWW\r\nWWBWBWBWW\r\nWBWWBBWWB\r\nWWWBWBWBW\r\nBBWBBBWWW\r\nWWWWBBWBW\r\n",
                "2\n"
            ]
        ]
    }
]