[
    {
        "name": "Vika and Squares",
        "description": "Vika has n jars with paints of distinct colors. All the jars are numbered from\n1 to n and the i-th jar contains ai liters of paint of color i. Vika also has\nan infinitely long rectangular piece of paper of width 1, consisting of\nsquares of size 1 \u00d7 1. Squares are numbered 1, 2, 3 and so on. Vika decided\nthat she will start painting squares one by one from left to right, starting\nfrom the square number 1 and some arbitrary color. If the square was painted\nin color x, then the next square will be painted in color x + 1. In case of x\n= n, next square is painted in color 1. If there is no more paint of the color\nVika wants to use now, then she stops. Square is always painted in only one\ncolor, and it takes exactly 1 liter of paint. Your task is to calculate the\nmaximum number of squares that might be painted, if Vika chooses right color\nto paint the first square. Input The first line of the input contains a single\ninteger n (1 \u2264 n \u2264 200 000) \u2014 the number of jars with colors Vika has. The\nsecond line of the input contains a sequence of integers a1, a2, ..., an (1 \u2264\nai \u2264 10^9), where ai is equal to the number of liters of paint in the i-th\njar, i.e. the number of liters of color i that Vika has. Output The only line\nof the output should contain a single integer \u2014 the maximum number of squares\nthat Vika can paint if she follows the rules described above. Examples Input 5\n2 4 2 3 3 Output 12 Input 3 5 5 5 Output 15 Input 6 10 10 10 1 10 10 Output 11\nNote In the first sample the best strategy is to start painting using color 4.\nThen the squares will be painted in the following colors (from left to right):\n4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5. In the second sample Vika can start to\npaint using any color. In the third sample Vika should start painting using\ncolor number 5.\n\n",
        "cf_contest_id": 610,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n2 4 2 3 3\r\n",
                "12\r\n"
            ],
            [
                "3\r\n5 5 5\r\n",
                "15\r\n"
            ],
            [
                "6\r\n10 10 10 1 10 10\r\n",
                "11\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n167959139\r\n",
                "167959139\r\n"
            ],
            [
                "10\r\n896619242 805194919 844752453 848347723 816995848 856813612 805194919 833406689 816255448 805194919\r\n",
                "8051949194\r\n"
            ],
            [
                "2\r\n2 3\r\n",
                "5\r\n"
            ],
            [
                "2\r\n10 10\r\n",
                "20\r\n"
            ],
            [
                "2\r\n1111 1110\r\n",
                "2221\r\n"
            ],
            [
                "3\r\n100 101 100\r\n",
                "301\r\n"
            ],
            [
                "3\r\n100 100 101\r\n",
                "301\r\n"
            ],
            [
                "3\r\n101 100 100\r\n",
                "301\r\n"
            ],
            [
                "4\r\n2 3 2 2\r\n",
                "9\r\n"
            ],
            [
                "4\r\n1 1 1 1\r\n",
                "4\r\n"
            ],
            [
                "4\r\n100 100 100 101\r\n",
                "401\r\n"
            ],
            [
                "4\r\n101 100 100 101\r\n",
                "402\r\n"
            ],
            [
                "4\r\n100 101 101 100\r\n",
                "402\r\n"
            ],
            [
                "4\r\n200 201 200 201\r\n",
                "801\r\n"
            ],
            [
                "4\r\n201 200 201 200\r\n",
                "801\r\n"
            ],
            [
                "4\r\n300 302 302 300\r\n",
                "1202\r\n"
            ],
            [
                "8\r\n5 4 3 2 1 1 1 1\r\n",
                "12\r\n"
            ],
            [
                "8\r\n2 2 1 2 2 1 2 2\r\n",
                "12\r\n"
            ],
            [
                "10\r\n2 1 2 1 2 2 2 2 2 1\r\n",
                "15\r\n"
            ],
            [
                "13\r\n2 2 2 1 1 1 1 1 1 1 2 2 2\r\n",
                "19\r\n"
            ]
        ]
    }
]