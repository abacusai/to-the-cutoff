[
    {
        "name": "Prime Matrix",
        "description": "You've got an n \u00d7 m matrix. The matrix consists of integers. In one move, you\ncan apply a single transformation to the matrix: choose an arbitrary element\nof the matrix and increase it by 1. Each element can be increased an arbitrary\nnumber of times. You are really curious about prime numbers. Let us remind you\nthat a prime number is a positive integer that has exactly two distinct\npositive integer divisors: itself and number one. For example, numbers 2, 3, 5\nare prime and numbers 1, 4, 6 are not. A matrix is prime if at least one of\nthe two following conditions fulfills: the matrix has a row with prime numbers\nonly; the matrix has a column with prime numbers only; Your task is to count\nthe minimum number of moves needed to get a prime matrix from the one you've\ngot. Input The first line contains two integers n, m (1 \u2264 n, m \u2264 500) \u2014 the\nnumber of rows and columns in the matrix, correspondingly. Each of the\nfollowing n lines contains m integers \u2014 the initial matrix. All matrix\nelements are positive integers. All numbers in the initial matrix do not\nexceed 10^5. The numbers in the lines are separated by single spaces. Output\nPrint a single integer \u2014 the minimum number of moves needed to get a prime\nmatrix from the one you've got. If you've got a prime matrix, print 0.\nExamples Input 3 3 1 2 3 5 6 1 4 4 1 Output 1 Input 2 3 4 8 8 9 2 9 Output 3\nInput 2 2 1 3 4 2 Output 0 Note In the first sample you need to increase\nnumber 1 in cell (1, 1). Thus, the first row will consist of prime numbers: 2,\n2, 3. In the second sample you need to increase number 8 in cell (1, 2) three\ntimes. Thus, the second column will consist of prime numbers: 11, 2. In the\nthird sample you don't have to do anything as the second column already\nconsists of prime numbers: 3, 2.\n\n",
        "cf_contest_id": 271,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\n1 2 3\r\n5 6 1\r\n4 4 1\r\n",
                "1\r\n"
            ],
            [
                "2 3\r\n4 8 8\r\n9 2 9\r\n",
                "3\r\n"
            ],
            [
                "2 2\r\n1 3\r\n4 2\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n14\r\n",
                "3\r\n"
            ],
            [
                "5 3\r\n2 14 8\r\n8 8 2\r\n8 10 10\r\n1 2 1\r\n100 100 8\r\n",
                "2\r\n"
            ],
            [
                "6 5\r\n8 8 8 8 20\r\n13 8 16 13 9\r\n11 5 3 14 18\r\n13 8 6 18 6\r\n6 8 9 14 7\r\n2 14 14 9 3\r\n",
                "4\r\n"
            ],
            [
                "5 7\r\n9 5 3 9 2 8 2\r\n15 7 9 8 18 4 6\r\n2 9 14 3 6 13 18\r\n4 13 3 14 11 13 8\r\n14 10 1 14 18 5 6\r\n",
                "3\r\n"
            ],
            [
                "3 3\r\n1 7 6\r\n4 6 2\r\n3 3 3\r\n",
                "0\r\n"
            ],
            [
                "1 5\r\n14 14 8 14 14\r\n",
                "3\r\n"
            ],
            [
                "10 1\r\n19\r\n9\r\n14\r\n14\r\n19\r\n5\r\n5\r\n18\r\n10\r\n17\r\n",
                "0\r\n"
            ],
            [
                "8 5\r\n11 29 11 1 27\r\n24 16 17 4 19\r\n13 4 4 20 7\r\n26 18 23 11 13\r\n22 20 14 20 16\r\n18 22 1 22 24\r\n22 5 11 14 26\r\n30 16 25 6 9\r\n",
                "3\r\n"
            ],
            [
                "5 9\r\n14 19 30 23 24 27 24 25 4\r\n12 43 42 30 49 34 33 33 1\r\n21 41 29 33 31 30 10 41 40\r\n19 24 14 40 16 34 42 26 19\r\n3 30 27 32 44 34 3 8 42\r\n",
                "4\r\n"
            ],
            [
                "1 1\r\n99992\r\n",
                "11\r\n"
            ],
            [
                "1 1\r\n100000\r\n",
                "3\r\n"
            ],
            [
                "2 2\r\n10000 99999\r\n10000 99999\r\n",
                "8\r\n"
            ],
            [
                "4 3\r\n2 1 1\r\n2 1 1\r\n2 1 1\r\n1 1 1\r\n",
                "1\r\n"
            ],
            [
                "1 1\r\n20000\r\n",
                "11\r\n"
            ]
        ]
    }
]