[
    {
        "name": "Symmetree",
        "description": "Kid was gifted a tree of \n    n\n vertices with the root in the vertex \n    1\n.\nSince he really like symmetrical objects, Kid wants to find out if this tree\nis symmetrical. For example, the trees in the picture above are symmetrical.\nAnd the trees in this picture are not symmetrical. Formally, a tree is\nsymmetrical if there exists an order of children such that: The subtree of the\nleftmost child of the root is a mirror image of the subtree of the rightmost\nchild; the subtree of the second-left child of the root is a mirror image of\nthe subtree of the second-right child of the root; ... if the number of\nchildren of the root is odd, then the subtree of the middle child should be\nsymmetrical. Input The first line of input data contains single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases in the test.\nThe first line of each case contains an integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n) \u2014 the number of vertices in the tree. The following \n    n-1\n\nlines contain two integers each \n    u\n and \n    v\n (\n    1 \n    \u2264 u, v \n    \u2264\n    n\n, \n    u \n    \u2260 v\n) \u2014 indices of vertices connected by an edge. It is\nguaranteed that the sum of \n    n\n over all cases does not exceed \n    2 \n    \u00b7\n    10^5\n. Output Output \n    t\n strings, each of which is the answer to the\ncorresponding test case. As an answer, output \"YES\" if this tree is\nsymmetrical, and \"NO\" otherwise. You can output the answer in any case (for\nexample, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a\npositive answer). Example Input 6 6 1 5 1 6 1 2 2 3 2 4 7 1 5 1 3 3 6 1 4 4 7\n4 2 9 1 2 2 4 2 3 3 5 1 7 7 6 7 8 8 9 10 2 9 9 10 2 3 6 7 4 3 1 2 3 8 2 5 6 5\n10 3 2 8 10 9 7 4 2 8 2 2 1 4 5 6 5 5 7 1 Output YES NO YES NO NO YES\n\n",
        "cf_contest_id": 1800,
        "cf_index": "G",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "hashing",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n6\r\n1 5\r\n1 6\r\n1 2\r\n2 3\r\n2 4\r\n7\r\n1 5\r\n1 3\r\n3 6\r\n1 4\r\n4 7\r\n4 2\r\n9\r\n1 2\r\n2 4\r\n2 3\r\n3 5\r\n1 7\r\n7 6\r\n7 8\r\n8 9\r\n10\r\n2 9\r\n9 10\r\n2 3\r\n6 7\r\n4 3\r\n1 2\r\n3 8\r\n2 5\r\n6 5\r\n10\r\n3 2\r\n8 10\r\n9 7\r\n4 2\r\n8 2\r\n2 1\r\n4 5\r\n6 5\r\n5 7\r\n1\r\n",
                "YES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n13\r\n1 12\r\n12 2\r\n2 3\r\n2 4\r\n3 5\r\n3 6\r\n1 13\r\n13 7\r\n7 8\r\n8 9\r\n7 10\r\n10 11\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n39\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n3 7\r\n4 8\r\n8 9\r\n4 10\r\n10 11\r\n4 12\r\n12 13\r\n4 14\r\n14 15\r\n5 16\r\n5 17\r\n17 18\r\n17 19\r\n5 20\r\n5 21\r\n21 22\r\n21 23\r\n6 24\r\n6 25\r\n25 26\r\n25 27\r\n6 28\r\n28 29\r\n6 30\r\n30 31\r\n7 32\r\n32 33\r\n7 34\r\n34 35\r\n7 36\r\n7 37\r\n37 38\r\n37 39\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n41\r\n9 10\r\n8 9\r\n7 8\r\n7 11\r\n6 7\r\n5 6\r\n5 12\r\n5 13\r\n4 5\r\n18 19\r\n18 20\r\n17 18\r\n16 17\r\n16 21\r\n15 16\r\n14 15\r\n4 14\r\n3 4\r\n2 3\r\n1 2\r\n27 28\r\n27 29\r\n26 27\r\n30 31\r\n30 32\r\n26 30\r\n25 26\r\n35 36\r\n34 35\r\n37 38\r\n34 37\r\n33 34\r\n25 33\r\n24 25\r\n23 24\r\n22 23\r\n39 40\r\n22 39\r\n22 41\r\n1 22\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n39\r\n5 6\r\n4 5\r\n4 7\r\n4 8\r\n3 4\r\n9 10\r\n3 9\r\n3 11\r\n3 12\r\n2 3\r\n14 15\r\n14 16\r\n13 14\r\n17 18\r\n13 17\r\n13 19\r\n2 13\r\n2 20\r\n1 2\r\n26 27\r\n25 26\r\n25 28\r\n24 25\r\n29 30\r\n24 29\r\n24 31\r\n24 32\r\n23 24\r\n34 35\r\n34 36\r\n33 34\r\n23 33\r\n22 23\r\n38 39\r\n37 38\r\n22 37\r\n21 22\r\n1 21\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n23\r\n1 2\r\n2 3\r\n2 4\r\n2 5\r\n3 6\r\n4 7\r\n5 8\r\n2 9\r\n9 10\r\n5 11\r\n5 12\r\n1 13\r\n13 14\r\n13 15\r\n15 16\r\n14 17\r\n13 18\r\n14 19\r\n13 20\r\n20 21\r\n15 22\r\n20 23\r\n",
                "NO\r\n"
            ]
        ]
    }
]