[
    {
        "name": "Xorcerer's Stones",
        "description": "Misha had been banned from playing chess for good since he was accused of\ncheating with an engine. Therefore, he retired and decided to become a\nxorcerer. One day, while taking a walk in a park, Misha came across a rooted\ntree with nodes numbered from \n    1\n to \n    n\n. The root of the tree is node\n\n    1\n. For each \n    1\n    \u2264 i\n    \u2264 n\n, node \n    i\n contains \n    a_i\n\nstones in it. Misha has recently learned a new spell in his xorcery class and\nwants to test it out. A spell consists of: Choose some node \n    i\n (\n    1\n    \n    \u2264 i \n    \u2264 n\n). Calculate the bitwise XOR \n    x\n of all \n    a_j\n such\nthat node \n    j\n is in the subtree of \n    i\n (\n    i\n belongs to its own\nsubtree). Set \n    a_j\n equal to \n    x\n for all nodes \n    j\n in the subtree\nof \n    i\n. Misha can perform at most \n    2n\n spells and he wants to remove\nall stones from the tree. More formally, he wants \n    a_i=0\n to hold for each\n\n    1\n    \u2264 i \n    \u2264 n\n. Can you help him perform the spells? A tree with\n\n    n\n nodes is a connected acyclic graph which contains \n    n-1\n edges. The\nsubtree of node \n    i\n is the set of all nodes \n    j\n such that \n    i\n lies\non the simple path from \n    1\n (the root) to \n    j\n. We consider \n    i\n to\nbe contained in its own subtree. Input The first line contains a single\ninteger \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2\n    \u00b7 10^5\n) \u2014 the size of the tree\nThe second line contains an array of integers \n    a_1,a_2,\n    \u2026, a_n\n\n(\n    0 \n    \u2264 a_i \n    \u2264 31\n), describing the number of stones in each node\ninitially. The third line contains an array of integers \n    p_2,p_3,\n    \u2026,\n    p_n\n (\n    1 \n    \u2264 p_i \n    \u2264 i-1\n), where \n    p_i\n means that there is an\nedge connecting \n    p_i\n and \n    i\n. Output If there is not a valid sequence\nof spells, output \n    -1\n. Otherwise, output a single integer \n    q\n (\n    0\n    \n    \u2264 q \n    \u2264 2n\n) in the first line \u2014 the number of performed spells. In\nthe second line output a sequence of integers \n    v_1,v_2,\n    \u2026,v_q\n (\n    1\n    \n    \u2264 v_i \n    \u2264 n\n) \u2014 the \n    i\n-th spell will be performed on the\nsubtree of node \n    v_i\n. Please note that order matters. If multiple\nsolutions exist, output any. You don't have to minimize the number of\noperations. Examples Input 2 13 13 1 Output 1 1 Input 7 5 2 8 3 4 1 31 1 1 2 2\n3 3 Output -1 Input 9 3 31 1 2 7 30 7 3 1 1 1 1 2 5 5 3 4 Output 6 3 2 3 1 2 2\nNote Please refer to the following pictures for an explanation of the third\ntest. Only the first \n    4\n spells are shown since the last \n    2\n do\nnothing. The first picture represents the tree initially with the number of\nstones for each node written above it in green. Changes applied by the current\nspell are highlighted in red.\n\n",
        "cf_contest_id": 1779,
        "cf_index": "F",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "constructive algorithms",
            "dp",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "2\r\n13 13\r\n1\r\n",
                "2\r\n1 1\r\n"
            ],
            [
                "7\r\n5 2 8 3 4 1 31\r\n1 1 2 2 3 3\r\n",
                "-1\r\n"
            ],
            [
                "9\r\n3 31 1 2 7 30 7 3 1\r\n1 1 1 2 5 5 3 4\r\n",
                "4\r\n4 4 1 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n1 2 3\r\n1 2\r\n",
                "2\r\n1 1\r\n"
            ],
            [
                "3\r\n1 2 3\r\n1 1\r\n",
                "2\r\n1 1\r\n"
            ],
            [
                "3\r\n1 2 4\r\n1 2\r\n",
                "-1\r\n"
            ],
            [
                "15\r\n6 13 12 5 24 8 18 7 9 29 8 5 20 20 17\r\n1 2 3 4 5 6 7 8 9 10 6 8 12 10\r\n",
                "6\r\n12 12 8 8 1 1\r\n"
            ],
            [
                "17\r\n31 23 4 19 4 22 22 9 14 24 16 28 28 14 17 22 21\r\n1 1 1 2 2 2 3 3 3 4 4 4 5 7 1 6\r\n",
                "-1\r\n"
            ],
            [
                "15\r\n2 13 23 10 5 5 6 2 21 4 2 25 2 14 12\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14\r\n",
                "-1\r\n"
            ],
            [
                "105\r\n9 0 13 21 3 8 9 19 10 25 30 16 24 23 30 1 31 22 21 29 3 13 29 25 9 20 0 6 17 15 7 28 13 1 4 5 23 14 7 20 29 31 14 11 8 5 2 6 18 0 11 31 10 1 9 23 12 29 0 19 16 14 12 16 25 10 31 15 11 28 2 7 25 25 1 24 9 24 24 31 15 8 26 3 28 16 9 9 16 25 5 25 27 6 12 15 20 10 7 20 0 15 4 14 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 87 19 85 95 83 16 51 90 33 13 38 5\r\n",
                "12\r\n90 90 87 87 38 38 16 16 13 13 1 1\r\n"
            ],
            [
                "2\r\n9 30\r\n1\r\n",
                "2\r\n1 1\r\n"
            ],
            [
                "2\r\n12 14\r\n1\r\n",
                "2\r\n1 1\r\n"
            ],
            [
                "3\r\n18 5 1\r\n1 2\r\n",
                "-1\r\n"
            ],
            [
                "3\r\n27 2 1\r\n1 1\r\n",
                "-1\r\n"
            ],
            [
                "3\r\n15 30 10\r\n1 2\r\n",
                "-1\r\n"
            ],
            [
                "4\r\n26 12 15 16\r\n1 2 3\r\n",
                "2\r\n1 1\r\n"
            ],
            [
                "4\r\n10 22 4 0\r\n1 2 3\r\n",
                "2\r\n1 1\r\n"
            ],
            [
                "4\r\n17 8 13 27\r\n1 2 2\r\n",
                "2\r\n1 1\r\n"
            ],
            [
                "4\r\n20 10 14 11\r\n1 2 1\r\n",
                "2\r\n1 1\r\n"
            ],
            [
                "17\r\n2 25 26 10 2 5 2 16 5 10 28 10 18 0 21 13 16\r\n1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 13\r\n",
                "8\r\n13 13 5 5 3 3 1 1\r\n"
            ],
            [
                "31\r\n20 13 23 14 10 10 0 15 26 30 13 3 25 14 8 13 7 23 27 17 16 31 29 3 13 23 12 3 22 8 1\r\n1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 12 12 15 22 17 26 15 30\r\n",
                "8\r\n30 30 26 26 4 4 1 1\r\n"
            ],
            [
                "31\r\n4 6 18 15 3 20 30 6 4 30 27 24 1 20 8 10 24 8 6 0 15 15 0 15 2 7 3 31 1 3 2\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 15 16 21 12 18 15 3 15\r\n",
                "-1\r\n"
            ],
            [
                "31\r\n18 5 31 0 23 13 0 9 11 28 15 3 15 9 6 15 21 17 16 28 20 18 11 15 25 27 25 7 9 14 24\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 6 9 6 15 26 21 25 13 26\r\n",
                "10\r\n25 25 21 21 13 13 9 9 1 1\r\n"
            ]
        ]
    }
]