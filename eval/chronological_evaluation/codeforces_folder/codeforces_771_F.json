[
    {
        "name": "Bear and Isomorphic Points",
        "description": "Bearland is a big square on the plane. It contains all points with coordinates\nnot exceeding 10^6 by the absolute value. There are n houses in Bearland. The\ni-th of them is located at the point (xi, yi). The n points are distinct, but\nsome subsets of them may be collinear. Bear Limak lives in the first house. He\nwants to destroy his house and build a new one somewhere in Bearland. Bears\ndon't like big changes. For every three points (houses) pi, pj and pk, the\nsign of their cross product (pj - pi) \u00d7 (pk - pi) should be the same before\nand after the relocation. If it was negative/positive/zero, it should still be\nnegative/positive/zero respectively. This condition should be satisfied for\nall triples of indices (i, j, k), possibly equal to each other or different\nthan 1. Additionally, Limak isn't allowed to build the house at the point\nwhere some other house already exists (but it can be the point where his old\nhouse was). In the formula above, we define the difference and the cross\nproduct of points (ax, ay) and (bx, by) as: (ax, ay) - (bx, by) = (ax - bx, ay\n- by), (ax, ay) \u00d7 (bx, by) = ax\u00b7by - ay\u00b7bx. Consider a set of possible new\nplacements of Limak's house. Your task is to find the area of that set of\npoints. Formally, let's say that Limak chooses the new placement randomly\n(each coordinate is chosen independently uniformly at random from the interval\n[ - 10^6, 10^6]). Let p denote the probability of getting the allowed\nplacement of new house. Let S denote the area of Bearland (S = 4\u00b710^12). Your\ntask is to find p\u00b7S. Input The first line of the input contains an integer T\n(1 \u2264 T \u2264 500) \u2014 the number of test cases. The description of the test cases\nfollows. The first line of the description of a test case contains an integer\nn (3 \u2264 n \u2264 200 000) \u2014 the number of houses. The i-th of the next n lines\ncontains two integers xi and yi ( - 10^6 \u2264 xi, yi \u2264 10^6) \u2014 coordinates of the\ni-th house. No two houses are located at the same point in the same test case.\nLimak lives in the first house. The sum of n won't exceed 200 000. Output\nPrint one real value, denoting the area of the set of points that are possible\nnew placements of Limak's house. Your answer will be considered correct if its\nabsolute or relative error doesn't exceed 10^-6. More precisely, let the\njury's answer be b, and your answer be a. Then your answer will be accepted if\nand only if . Example Input 4 4 5 3 0 1 10 1 3 51 3 -999123 700000 -950000\n123456 -950000 987654 3 2 3 10 -1 -4 6 5 1 3 5 2 6 1 4 4 -3 3 Output\n250.000000000000 100000000000.000000000000 0.000000000000 6.562500000000 Note\nIn the sample test, there are 4 test cases. In the first test case, there are\nfour houses and Limak's one is in (5, 3). The set of valid new placements form\na triangle with vertices in points (0, 1), (10, 1) and (3, 51), without its\nsides. The area of such a triangle is 250. In the second test case, the set of\nvalid new placements form a rectangle of width 50 000 and height 2 000 000.\nDon't forget that the new placement must be inside the big square that\nrepresents Bearland. In the third test case, the three given points are\ncollinear. Each cross product is equal to 0 and it should be 0 after the\nrelocation as well. Hence, Limak's new house must lie on the line that goes\nthrough the given points. Since it must also be inside the big square, new\npossible placements are limited to some segment (excluding the two points\nwhere the other houses are). The area of any segment is 0.\n\n",
        "cf_contest_id": 771,
        "cf_index": "F",
        "cf_rating": 3300,
        "difficulty": 0,
        "cf_tags": [
            "geometry",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4\r\n5 3\r\n0 1\r\n10 1\r\n3 51\r\n3\r\n-999123 700000\r\n-950000 123456\r\n-950000 987654\r\n3\r\n2 3\r\n10 -1\r\n-4 6\r\n5\r\n1 3\r\n5 2\r\n6 1\r\n4 4\r\n-3 3\r\n",
                "250.00000000\r\n100000000000.00000000\r\n0\r\n6.56250000\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n5\r\n-2 -3\r\n-3 2\r\n3 2\r\n-4 5\r\n2 5\r\n",
                "866668133325.30005000\r\n"
            ],
            [
                "4\r\n6\r\n83 41\r\n-86 21\r\n-76 29\r\n65 -35\r\n-20 -73\r\n70 -21\r\n5\r\n25 -90\r\n92 -46\r\n-66 71\r\n16 85\r\n-24 79\r\n5\r\n66 -79\r\n34 -85\r\n-62 79\r\n80 -5\r\n-28 24\r\n6\r\n78 -1\r\n-23 -84\r\n53 -26\r\n-76 -11\r\n-1 -22\r\n-38 82\r\n",
                "19131.96000000\r\n1194987122533.38230000\r\n395189925250.97028000\r\n414257870661.67944000\r\n"
            ],
            [
                "3\r\n4\r\n0 0\r\n-1000000 -1000000\r\n1000000 999999\r\n999999 1000000\r\n4\r\n0 0\r\n-1000000 1000000\r\n1000000 -999999\r\n999999 -1000000\r\n7\r\n0 0\r\n-1000000 1000000\r\n1000000 -999999\r\n999999 -1000000\r\n-1000000 -1000000\r\n1000000 999999\r\n999999 1000000\r\n",
                "1999999.50000000\r\n1999999.50000000\r\n0.50000025\r\n"
            ],
            [
                "1\r\n3\r\n1000000 1000000\r\n1000000 -1000000\r\n-1000000 -1000000\r\n",
                "4000000000000.00000000\r\n"
            ],
            [
                "3\r\n7\r\n-79398 66130\r\n-16561 -24725\r\n35205 55623\r\n95748 -66495\r\n68877 -68607\r\n-23170 -78595\r\n-79189 -71851\r\n8\r\n-83126 -4852\r\n52277 -31603\r\n-8352 -85375\r\n-88584 -71170\r\n76470 34498\r\n-71372 24312\r\n74360 64669\r\n52974 23672\r\n7\r\n60882 -13614\r\n-47890 -65937\r\n30787 -93103\r\n-78949 -2931\r\n-24644 -56730\r\n-19998 -54993\r\n10461 -81434\r\n",
                "585974626164.23828000\r\n9070402971.56214710\r\n1178421734336.66140000\r\n"
            ],
            [
                "3\r\n7\r\n999999 999999\r\n0 -1\r\n-1 0\r\n999998 999998\r\n999999 1000000\r\n999998 0\r\n1000000 0\r\n18\r\n999909 999909\r\n0 -1\r\n-1 0\r\n999908 999908\r\n999909 999910\r\n999907 999910\r\n999911 999910\r\n999905 999910\r\n999913 999910\r\n999903 999910\r\n999915 999910\r\n999910 999908\r\n999906 999908\r\n999912 999908\r\n999904 999908\r\n999914 999908\r\n999902 999908\r\n999916 999908\r\n7\r\n999999 999999\r\n0 -1\r\n-1 0\r\n999998 999998\r\n999998 999997\r\n1000000 999997\r\n999999 1000000\r\n",
                "0.00000000\r\n0.00000030\r\n0.00000131\r\n"
            ]
        ]
    }
]