[
    {
        "name": "Blocks and Sensors",
        "description": "Polycarp plays a well-known computer game (we won't mention its name). Every\nobject in this game consists of three-dimensional blocks \u2014 axis-aligned cubes\nof size \n    1 \n    \u00d7 1 \n    \u00d7 1\n. These blocks are unaffected by gravity,\nso they can float in the air without support. The blocks are placed in cells\nof size \n    1 \n    \u00d7 1 \n    \u00d7 1\n; each cell either contains exactly one\nblock or is empty. Each cell is represented by its coordinates \n    (x, y, z)\n\n(the cell with these coordinates is a cube with opposite corners in \n    (x, y,\n    z)\n and \n    (x + 1, y + 1, z + 1)\n) and its contents \n    a_x, y, z\n; if\nthe cell is empty, then \n    a_x, y, z = 0\n, otherwise \n    a_x, y, z\n is\nequal to the type of the block placed in it (the types are integers from\n\n    1\n to \n    2 \n    \u00b7 10^5\n). Polycarp has built a large structure\nconsisting of blocks. This structure can be enclosed in an axis-aligned\nrectangular parallelepiped of size \n    n \n    \u00d7 m \n    \u00d7 k\n, containing\nall cells \n    (x, y, z)\n such that \n    x \n    \u2208 [1, n]\n, \n    y \n    \u2208 [1,\n    m]\n, and \n    z \n    \u2208 [1, k]\n. After that, Polycarp has installed \n    2nm +\n    2nk + 2mk\n sensors around this parallelepiped. A sensor is a special block\nthat sends a ray in some direction and shows the type of the first block that\nwas hit by this ray (except for other sensors). The sensors installed by\nPolycarp are adjacent to the borders of the parallelepiped, and the rays sent\nby them are parallel to one of the coordinate axes and directed inside the\nparallelepiped. More formally, the sensors can be divided into \n    6\n types:\nthere are \n    mk\n sensors of the first type; each such sensor is installed in\n\n    (0, y, z)\n, where \n    y \n    \u2208 [1, m]\n and \n    z \n    \u2208 [1, k]\n, and it\nsends a ray that is parallel to the \n    Ox\n axis and has the same direction;\nthere are \n    mk\n sensors of the second type; each such sensor is installed\nin \n    (n + 1, y, z)\n, where \n    y \n    \u2208 [1, m]\n and \n    z \n    \u2208 [1, k]\n,\nand it sends a ray that is parallel to the \n    Ox\n axis and has the opposite\ndirection; there are \n    nk\n sensors of the third type; each such sensor is\ninstalled in \n    (x, 0, z)\n, where \n    x \n    \u2208 [1, n]\n and \n    z \n    \u2208 [1,\n    k]\n, and it sends a ray that is parallel to the \n    Oy\n axis and has the\nsame direction; there are \n    nk\n sensors of the fourth type; each such\nsensor is installed in \n    (x, m + 1, z)\n, where \n    x \n    \u2208 [1, n]\n and\n\n    z \n    \u2208 [1, k]\n, and it sends a ray that is parallel to the \n    Oy\n axis\nand has the opposite direction; there are \n    nm\n sensors of the fifth type;\neach such sensor is installed in \n    (x, y, 0)\n, where \n    x \n    \u2208 [1, n]\n\nand \n    y \n    \u2208 [1, m]\n, and it sends a ray that is parallel to the \n    Oz\n\naxis and has the same direction; finally, there are \n    nm\n sensors of the\nsixth type; each such sensor is installed in \n    (x, y, k + 1)\n, where \n    x\n    \n    \u2208 [1, n]\n and \n    y \n    \u2208 [1, m]\n, and it sends a ray that is parallel\nto the \n    Oz\n axis and has the opposite direction. Polycarp has invited his\nfriend Monocarp to play with him. Of course, as soon as Monocarp saw a large\nparallelepiped bounded by sensor blocks, he began to wonder what was inside of\nit. Polycarp didn't want to tell Monocarp the exact shape of the figure, so he\nprovided Monocarp with the data from all sensors and told him to try guessing\nthe contents of the parallelepiped by himself. After some hours of thinking,\nMonocarp has no clue about what's inside the sensor-bounded space. But he does\nnot want to give up, so he decided to ask for help. Can you write a program\nthat will analyze the sensor data and construct any figure that is consistent\nwith it? Input The first line contains three integers \n    n\n, \n    m\n and\n\n    k\n (\n    1 \n    \u2264 n, m, k \n    \u2264 2 \n    \u00b7 10^5\n, \n    nmk \n    \u2264 2 \n    \u00b7\n    10^5\n) \u2014 the dimensions of the parallelepiped. Then the sensor data follows.\nFor each sensor, its data is either \n    0\n, if the ray emitted from it\nreaches the opposite sensor (there are no blocks in between), or an integer\nfrom \n    1\n to \n    2 \n    \u00b7 10^5\n denoting the type of the first block hit\nby the ray. The data is divided into \n    6\n sections (one for each type of\nsensors), each consecutive pair of sections is separated by a blank line, and\nthe first section is separated by a blank line from the first line of the\ninput. The first section consists of \n    m\n lines containing \n    k\n integers\neach. The \n    j\n-th integer in the \n    i\n-th line is the data from the\nsensor installed in \n    (0, i, j)\n. The second section consists of \n    m\n\nlines containing \n    k\n integers each. The \n    j\n-th integer in the\n\n    i\n-th line is the data from the sensor installed in \n    (n + 1, i, j)\n.\nThe third section consists of \n    n\n lines containing \n    k\n integers each.\nThe \n    j\n-th integer in the \n    i\n-th line is the data from the sensor\ninstalled in \n    (i, 0, j)\n. The fourth section consists of \n    n\n lines\ncontaining \n    k\n integers each. The \n    j\n-th integer in the \n    i\n-th\nline is the data from the sensor installed in \n    (i, m + 1, j)\n. The fifth\nsection consists of \n    n\n lines containing \n    m\n integers each. The\n\n    j\n-th integer in the \n    i\n-th line is the data from the sensor\ninstalled in \n    (i, j, 0)\n. Finally, the sixth section consists of \n    n\n\nlines containing \n    m\n integers each. The \n    j\n-th integer in the\n\n    i\n-th line is the data from the sensor installed in \n    (i, j, k + 1)\n.\nOutput If the information from the input is inconsistent, print one integer\n\n    -1\n. Otherwise, print the figure inside the parallelepiped as follows.\nThe output should consist of \n    nmk\n integers: \n    a_1, 1, 1\n, \n    a_1,\n    1, 2\n, ..., \n    a_1, 1, k\n, \n    a_1, 2, 1\n, ..., \n    a_1, 2, k\n,\n..., \n    a_1, m, k\n, \n    a_2, 1, 1\n, ..., \n    a_n, m, k\n, where\n\n    a_i, j, k\n is the type of the block in \n    (i, j, k)\n, or \n    0\n if\nthere is no block there. If there are multiple figures consistent with sensor\ndata, describe any of them. For your convenience, the sample output is\nformatted as follows: there are \n    n\n separate sections for blocks having\n\n    x = 1\n, \n    x = 2\n, ..., \n    x = n\n; each section consists of \n    m\n\nlines containing \n    k\n integers each. Note that this type of output is\nacceptable, but you may print the integers with any other formatting instead\n(even all integers on the same line), only their order matters. Examples Input\n4 3 2 1 4 3 2 6 5 1 4 3 2 6 7 1 4 1 4 0 0 0 7 6 5 6 5 0 0 0 7 1 3 6 1 3 6 0 0\n0 0 0 7 4 3 5 4 2 5 0 0 0 0 0 7 Output 1 4 3 0 6 5 1 4 3 2 6 5 0 0 0 0 0 0 0 0\n0 0 0 7 Input 1 1 1 0 0 0 0 0 0 Output 0 Input 1 1 1 0 0 1337 0 0 0 Output -1\nInput 1 1 1 1337 1337 1337 1337 1337 1337 Output 1337\n\n",
        "cf_contest_id": 1320,
        "cf_index": "F",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "brute force"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4 3 2\r\n\r\n1 4\r\n3 2\r\n6 5\r\n\r\n1 4\r\n3 2\r\n6 7\r\n\r\n1 4\r\n1 4\r\n0 0\r\n0 7\r\n\r\n6 5\r\n6 5\r\n0 0\r\n0 7\r\n\r\n1 3 6\r\n1 3 6\r\n0 0 0\r\n0 0 7\r\n\r\n4 3 5\r\n4 2 5\r\n0 0 0\r\n0 0 7\r\n",
                "1 4 3 0 6 5 1 4 3 2 6 5 0 0 0 0 0 0 0 0 0 0 0 7 "
            ],
            [
                "1 1 1\r\n\r\n0\r\n\r\n0\r\n\r\n0\r\n\r\n0\r\n\r\n0\r\n\r\n0\r\n",
                "0 "
            ],
            [
                "1 1 1\r\n\r\n0\r\n\r\n0\r\n\r\n1337\r\n\r\n0\r\n\r\n0\r\n\r\n0\r\n",
                "-1\r\n"
            ],
            [
                "1 1 1\r\n\r\n1337\r\n\r\n1337\r\n\r\n1337\r\n\r\n1337\r\n\r\n1337\r\n\r\n1337\r\n",
                "1337 "
            ]
        ],
        "private_cases": []
    }
]