[
    {
        "name": "Polo the Penguin and Matrix",
        "description": "Little penguin Polo has an n \u00d7 m matrix, consisting of integers. Let's index\nthe matrix rows from 1 to n from top to bottom and let's index the columns\nfrom 1 to m from left to right. Let's represent the matrix element on the\nintersection of row i and column j as aij. In one move the penguin can add or\nsubtract number d from some matrix element. Find the minimum number of moves\nneeded to make all matrix elements equal. If the described plan is impossible\nto carry out, say so. Input The first line contains three integers n, m and d\n(1 \u2264 n, m \u2264 100, 1 \u2264 d \u2264 10^4) \u2014 the matrix sizes and the d parameter. Next n\nlines contain the matrix: the j-th integer in the i-th row is the matrix\nelement aij (1 \u2264 aij \u2264 10^4). Output In a single line print a single integer \u2014\nthe minimum number of moves the penguin needs to make all matrix elements\nequal. If that is impossible, print \"-1\" (without the quotes). Examples Input\n2 2 2 2 4 6 8 Output 4 Input 1 2 7 6 7 Output -1\n\n",
        "cf_contest_id": 289,
        "cf_index": "B",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dp",
            "implementation",
            "sortings",
            "ternary search"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 2 2\r\n2 4\r\n6 8\r\n",
                "4\r\n"
            ],
            [
                "1 2 7\r\n6 7\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 2 1\r\n5 7\r\n1 2\r\n5 100\r\n",
                "104\r\n"
            ],
            [
                "3 3 3\r\n5 8 5\r\n11 11 17\r\n14 5 2\r\n",
                "12\r\n"
            ],
            [
                "3 3 3\r\n5 8 5\r\n11 11 17\r\n14 5 3\r\n",
                "-1\r\n"
            ],
            [
                "2 2 4\r\n5 5\r\n5 5\r\n",
                "0\r\n"
            ],
            [
                "7 4 5\r\n7 7 7 12\r\n7 12 12 7\r\n7 7 7 7\r\n7 7 12 7\r\n7 7 12 12\r\n12 12 7 12\r\n7 7 7 7\r\n",
                "9\r\n"
            ],
            [
                "7 7 47\r\n91 91 91 91 91 91 91\r\n91 91 91 91 91 91 91\r\n91 91 91 91 91 91 91\r\n91 91 91 91 91 91 91\r\n91 91 91 91 91 91 91\r\n91 91 91 91 91 91 91\r\n91 91 91 91 91 91 91\r\n",
                "0\r\n"
            ],
            [
                "7 7 47\r\n47 47 47 47 47 47 47\r\n47 47 47 47 77 47 47\r\n47 47 47 47 47 47 47\r\n47 47 47 47 47 47 47\r\n47 47 47 47 47 47 47\r\n47 47 47 47 47 47 47\r\n47 47 47 47 47 127 47\r\n",
                "-1\r\n"
            ],
            [
                "7 5 47\r\n9583 1734 4601 5353 2110\r\n3802 5165 7985 6293 324\r\n7045 653 9160 7891 4930\r\n1781 3520 4178 2298 3943\r\n1405 2956 5447 5494 6528\r\n3097 1640 7750 4883 8032\r\n4225 8455 1875 4789 4366\r\n",
                "1508\r\n"
            ],
            [
                "1 1 1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "1 1 8\r\n12\r\n",
                "0\r\n"
            ]
        ]
    }
]