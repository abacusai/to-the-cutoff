[
    {
        "name": "MinimizOR",
        "description": "You are given an array \n    a\n of \n    n\n non-negative integers, numbered from\n\n    1\n to \n    n\n. Let's define the cost of the array \n    a\n as\n\n    min_i \n    \u2260 j a_i | a_j\n, where \n    |\n denotes the\nbitwise OR operation. There are \n    q\n queries. For each query you are given\ntwo integers \n    l\n and \n    r\n (\n    l < r\n). For each query you should find\nthe cost of the subarray \n    a_l, a_l + 1, \n    \u2026, a_r\n. Input Each\ntest case consists of several test cases. The first line contains a single\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. The\nfirst line of each test case contains an integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264\n    10^5\n) \u2014 the length array \n    a\n. The second line of each test case\ncontains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i <\n    2^30\n) \u2014 the elements of \n    a\n. The third line of each test case\ncontains an integer \n    q\n (\n    1 \n    \u2264 q \n    \u2264 10^5\n) \u2014 the number of\nqueries. Each of the next \n    q\n lines contains two integers \n    l_j\n,\n\n    r_j\n (\n    1 \n    \u2264 l_j < r_j \n    \u2264 n\n) \u2014 the description of the\n\n    j\n-th query. It is guaranteed that the sum of \n    n\n and the sum of\n\n    q\n over all test cases do not exceed \n    10^5\n. Output For each test\ncase print \n    q\n numbers, where the \n    j\n-th number is the cost of array\n\n    a_l_j, a_l_j + 1, \n    \u2026, a_r_j\n. Example Input 2 5 6 1 3 2 1 4 1\n2 2 3 2 4 2 5 4 0 2 1 1073741823 4 1 2 2 3 1 3 3 4 Output 7 3 3 1 2 3 1\n1073741823 Note In the first test case the array \n    a\n is \n    110_2, 001_2,\n    011_2, 010_2, 001_2\n. That's why the answers for the queries are: \n    [1;\n    2]\n: \n    a_1 | a_2 = 110_2 | 001_2 = 111_2 = 7\n; \n    [2; 3]\n: \n    a_2 | a_3\n    = 001_2 | 011_2 = 011_2 = 3\n; \n    [2; 4]\n: \n    a_2 | a_3 = a_3 | a_4 = a_2 |\n    a_4 = 011_2 = 3\n; \n    [2; 5]\n: \n    a_2 | a_5 = 001_2 = 1\n. In the second\ntest case the array \n    a\n is \n    00_2, 10_2, 01_2, \n    11\n    \u2026\n    1_2_30\n (\n    a_4 = 2^30 - 1\n). That's why the answers for the queries\nare: \n    [1; 2]\n: \n    a_1 | a_2 = 10_2 = 2\n; \n    [2; 3]\n: \n    a_2 | a_3 =\n    11_2 = 3\n; \n    [1; 3]\n: \n    a_1 | a_3 = 01_2 = 1\n; \n    [3; 4]\n: \n    a_3 |\n    a_4 = 01_2 | \n    11\n    \u2026 1_2_30 = 2^30 - 1 = 1073741823\n.\n\n",
        "cf_contest_id": 1665,
        "cf_index": "E",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "data structures",
            "divide and conquer",
            "greedy",
            "implementation",
            "two pointers"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n5\r\n6 1 3 2 1\r\n4\r\n1 2\r\n2 3\r\n2 4\r\n2 5\r\n4\r\n0 2 1 1073741823\r\n4\r\n1 2\r\n2 3\r\n1 3\r\n3 4\r\n",
                "7\r\n3\r\n3\r\n1\r\n2\r\n3\r\n1\r\n1073741823\r\n"
            ]
        ],
        "private_cases": []
    }
]