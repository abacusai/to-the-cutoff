[
    {
        "name": "Little Girl and Problem on Trees",
        "description": "A little girl loves problems on trees very much. Here's one of them. A tree is\nan undirected connected graph, not containing cycles. The degree of node x in\nthe tree is the number of nodes y of the tree, such that each of them is\nconnected with node x by some edge of the tree. Let's consider a tree that\nconsists of n nodes. We'll consider the tree's nodes indexed from 1 to n. The\ncosidered tree has the following property: each node except for node number 1\nhas the degree of at most 2. Initially, each node of the tree contains number\n0. Your task is to quickly process the requests of two types: Request of form:\n0 v x d. In reply to the request you should add x to all numbers that are\nwritten in the nodes that are located at the distance of at most d from node\nv. The distance between two nodes is the number of edges on the shortest path\nbetween them. Request of form: 1 v. In reply to the request you should print\nthe current number that is written in node v. Input The first line contains\nintegers n (2 \u2264 n \u2264 10^5) and q (1 \u2264 q \u2264 10^5) \u2014 the number of tree nodes and\nthe number of requests, correspondingly. Each of the next n - 1 lines contains\ntwo integers ui and vi (1 \u2264 ui, vi \u2264 n, ui \u2260 vi), that show that there is an\nedge between nodes ui and vi. Each edge's description occurs in the input\nexactly once. It is guaranteed that the given graph is a tree that has the\nproperty that is described in the statement. Next q lines describe the\nrequests. The request to add has the following format: 0 v x d (1 \u2264 v \u2264 n, 1 \u2264\nx \u2264 10^4, 1 \u2264 d < n). The request to print the node value has the following\nformat: 1 v (1 \u2264 v \u2264 n). The numbers in the lines are separated by single\nspaces. Output For each request to print the node value print an integer \u2014 the\nreply to the request. Examples Input 3 6 1 2 1 3 0 3 1 2 0 2 3 1 0 1 5 2 1 1 1\n2 1 3 Output 9 9 6 Input 6 11 1 2 2 5 5 4 1 6 1 3 0 3 1 3 0 3 4 5 0 2 1 4 0 1\n5 5 0 4 6 2 1 1 1 2 1 3 1 4 1 5 1 6 Output 11 17 11 16 17 11\n\n",
        "cf_contest_id": 276,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 6\r\n1 2\r\n1 3\r\n0 3 1 2\r\n0 2 3 1\r\n0 1 5 2\r\n1 1\r\n1 2\r\n1 3\r\n",
                "9\r\n9\r\n6\r\n"
            ],
            [
                "6 11\r\n1 2\r\n2 5\r\n5 4\r\n1 6\r\n1 3\r\n0 3 1 3\r\n0 3 4 5\r\n0 2 1 4\r\n0 1 5 5\r\n0 4 6 2\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n",
                "11\r\n17\r\n11\r\n16\r\n17\r\n11\r\n"
            ]
        ],
        "private_cases": [
            [
                "4 8\r\n2 1\r\n1 4\r\n2 3\r\n0 4 9297 3\r\n1 1\r\n0 3 6099 2\r\n0 2 9028 1\r\n0 4 7369 2\r\n1 3\r\n1 3\r\n0 4 2766 1\r\n",
                "9297\r\n24424\r\n24424\r\n"
            ],
            [
                "2 4\r\n2 1\r\n0 1 4519 1\r\n1 1\r\n0 2 4348 1\r\n0 2 9116 1\r\n",
                "4519\r\n"
            ],
            [
                "48 12\r\n19 1\r\n19 20\r\n26 1\r\n18 20\r\n1 37\r\n18 31\r\n46 31\r\n29 46\r\n25 26\r\n25 41\r\n21 29\r\n42 21\r\n17 41\r\n1 6\r\n17 2\r\n1 22\r\n22 4\r\n5 4\r\n5 32\r\n11 32\r\n40 11\r\n2 45\r\n45 47\r\n14 1\r\n33 6\r\n24 14\r\n28 47\r\n39 24\r\n35 37\r\n43 35\r\n27 39\r\n13 42\r\n16 43\r\n15 40\r\n34 28\r\n1 44\r\n15 3\r\n44 7\r\n30 13\r\n48 1\r\n34 12\r\n10 48\r\n16 23\r\n9 33\r\n10 8\r\n38 9\r\n36 38\r\n1 39\r\n0 40 2326 40\r\n0 38 1737 8\r\n0 19 1178 37\r\n1 8\r\n1 27\r\n1 15\r\n0 37 6244 42\r\n0 45 6528 27\r\n1 20\r\n1 41\r\n1 10\r\n",
                "0\r\n5241\r\n5241\r\n3504\r\n18013\r\n18013\r\n18013\r\n"
            ],
            [
                "9 26\r\n1 5\r\n6 1\r\n5 7\r\n9 7\r\n8 1\r\n3 8\r\n6 2\r\n4 3\r\n0 4 6974 8\r\n1 2\r\n0 4 2704 3\r\n1 3\r\n1 4\r\n0 3 1380 8\r\n1 7\r\n0 3 9732 5\r\n0 7 3941 5\r\n1 9\r\n1 3\r\n0 3 5232 2\r\n0 7 3559 1\r\n1 5\r\n0 4 9229 8\r\n1 2\r\n1 2\r\n1 2\r\n1 8\r\n1 7\r\n0 9 9325 2\r\n0 4 6816 3\r\n0 3 8313 3\r\n1 9\r\n0 8 4998 5\r\n1 1\r\n",
                "6974\r\n9678\r\n9678\r\n8354\r\n22027\r\n24731\r\n25586\r\n31256\r\n31256\r\n31256\r\n39192\r\n34815\r\n44140\r\n59319\r\n"
            ]
        ]
    }
]