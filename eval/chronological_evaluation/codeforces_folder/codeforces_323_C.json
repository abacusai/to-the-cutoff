[
    {
        "name": "Two permutations",
        "description": "You are given two permutations p and q, consisting of n elements, and m\nqueries of the form: l1, r1, l2, r2 (l1 \u2264 r1; l2 \u2264 r2). The response for the\nquery is the number of such integers from 1 to n, that their position in the\nfirst permutation is in segment [l1, r1] (borders included), and position in\nthe second permutation is in segment [l2, r2] (borders included too). A\npermutation of n elements is the sequence of n distinct integers, each not\nless than 1 and not greater than n. Position of number v (1 \u2264 v \u2264 n) in\npermutation g1, g2, ..., gn is such number i, that gi = v. Input The first\nline contains one integer n (1 \u2264 n \u2264 10^6), the number of elements in both\npermutations. The following line contains n integers, separated with spaces:\np1, p2, ..., pn (1 \u2264 pi \u2264 n). These are elements of the first permutation. The\nnext line contains the second permutation q1, q2, ..., qn in same format. The\nfollowing line contains an integer m (1 \u2264 m \u2264 2\u00b710^5), that is the number of\nqueries. The following m lines contain descriptions of queries one in a line.\nThe description of the i-th query consists of four integers: a, b, c, d (1 \u2264\na, b, c, d \u2264 n). Query parameters l1, r1, l2, r2 are obtained from the numbers\na, b, c, d using the following algorithm: Introduce variable x. If it is the\nfirst query, then the variable equals 0, else it equals the response for the\nprevious query plus one. Introduce function f(z) = ((z - 1 + x) mod n) + 1.\nSuppose l1 = min(f(a), f(b)), r1 = max(f(a), f(b)), l2 = min(f(c), f(d)), r2 =\nmax(f(c), f(d)). Output Print a response for each query in a separate line.\nExamples Input 3 3 1 2 3 2 1 1 1 2 3 3 Output 1 Input 4 4 3 2 1 2 3 4 1 3 1 2\n3 4 1 3 2 1 1 4 2 3 Output 1 1 2\n\n",
        "cf_contest_id": 323,
        "cf_index": "C",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n3 1 2\r\n3 2 1\r\n1\r\n1 2 3 3\r\n",
                "1\r\n"
            ],
            [
                "4\r\n4 3 2 1\r\n2 3 4 1\r\n3\r\n1 2 3 4\r\n1 3 2 1\r\n1 4 2 3\r\n",
                "1\r\n1\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n1\r\n1\r\n1 1 1 1\r\n",
                "1\r\n"
            ]
        ]
    }
]