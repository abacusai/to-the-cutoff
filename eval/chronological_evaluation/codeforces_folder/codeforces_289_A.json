[
    {
        "name": "Polo the Penguin and Segments ",
        "description": "Little penguin Polo adores integer segments, that is, pairs of integers [l; r]\n(l \u2264 r). He has a set that consists of n integer segments: [l1; r1], [l2; r2],\n..., [ln; rn]. We know that no two segments of this set intersect. In one move\nPolo can either widen any segment of the set 1 unit to the left or 1 unit to\nthe right, that is transform [l; r] to either segment [l - 1; r], or to\nsegment [l; r + 1]. The value of a set of segments that consists of n segments\n[l1; r1], [l2; r2], ..., [ln; rn] is the number of integers x, such that there\nis integer j, for which the following inequality holds, lj \u2264 x \u2264 rj. Find the\nminimum number of moves needed to make the value of the set of Polo's segments\ndivisible by k. Input The first line contains two integers n and k (1 \u2264 n, k \u2264\n10^5). Each of the following n lines contain a segment as a pair of integers\nli and ri ( - 10^5 \u2264 li \u2264 ri \u2264 10^5), separated by a space. It is guaranteed\nthat no two segments intersect. In other words, for any two integers i, j (1 \u2264\ni < j \u2264 n) the following inequality holds, min(ri, rj) < max(li, lj). Output\nIn a single line print a single integer \u2014 the answer to the problem. Examples\nInput 2 3 1 2 3 4 Output 2 Input 3 7 1 2 3 3 4 7 Output 0\n\n",
        "cf_contest_id": 289,
        "cf_index": "A",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 3\r\n1 2\r\n3 4\r\n",
                "2\r\n"
            ],
            [
                "3 7\r\n1 2\r\n3 3\r\n4 7\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 7\r\n1 10\r\n11 47\r\n74 128\r\n",
                "3\r\n"
            ],
            [
                "5 4\r\n1 1\r\n2 2\r\n3 3\r\n4 4\r\n5 5\r\n",
                "3\r\n"
            ],
            [
                "7 4\r\n2 2\r\n-1 -1\r\n0 1\r\n7 8\r\n-3 -2\r\n9 9\r\n4 6\r\n",
                "0\r\n"
            ],
            [
                "10 2\r\n92 92\r\n55 59\r\n70 73\r\n78 81\r\n62 65\r\n95 99\r\n74 75\r\n85 87\r\n51 51\r\n60 60\r\n",
                "0\r\n"
            ],
            [
                "10 474\r\n56 60\r\n82 82\r\n73 73\r\n105 109\r\n77 80\r\n51 51\r\n85 88\r\n97 100\r\n91 92\r\n64 68\r\n",
                "442\r\n"
            ],
            [
                "47 21\r\n3 5\r\n-422 -417\r\n60 60\r\n-348 -348\r\n-3 -3\r\n-364 -361\r\n-49 -41\r\n-436 -430\r\n-250 -244\r\n-33 -26\r\n-162 -158\r\n-90 -88\r\n-357 -352\r\n-339 -337\r\n-25 -19\r\n-69 -67\r\n-261 -260\r\n-292 -283\r\n12 18\r\n44 44\r\n-277 -275\r\n-301 -293\r\n-108 -98\r\n-180 -172\r\n-327 -318\r\n-314 -309\r\n-12 -7\r\n-134 -130\r\n33 35\r\n-190 -184\r\n-65 -55\r\n-242 -240\r\n-448 -444\r\n-408 -405\r\n53 57\r\n-145 -144\r\n-207 -200\r\n-110 -110\r\n-221 -216\r\n-122 -112\r\n26 27\r\n-271 -269\r\n-82 -79\r\n-235 -229\r\n-382 -373\r\n-397 -391\r\n-155 -153\r\n",
                "18\r\n"
            ],
            [
                "3 4587\r\n-49 368\r\n-734 -390\r\n-380 -117\r\n",
                "3560\r\n"
            ],
            [
                "1 100000\r\n-100000 100000\r\n",
                "99999\r\n"
            ],
            [
                "2 100000\r\n-100000 99999\r\n100000 100000\r\n",
                "99999\r\n"
            ],
            [
                "1 7\r\n0 0\r\n",
                "6\r\n"
            ],
            [
                "2 5848\r\n-100000 0\r\n1 100000\r\n",
                "4679\r\n"
            ],
            [
                "3 99999\r\n-100000 -100000\r\n-99999 99998\r\n99999 100000\r\n",
                "99996\r\n"
            ]
        ]
    }
]