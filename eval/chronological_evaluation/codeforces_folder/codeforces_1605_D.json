[
    {
        "name": "Treelabeling",
        "description": "Eikooc and Sushi play a game. The game is played on a tree having \n    n\n\nnodes numbered \n    1\n to \n    n\n. Recall that a tree having \n    n\n nodes is\nan undirected, connected graph with \n    n-1\n edges. They take turns\nalternately moving a token on the tree. Eikooc makes the first move, placing\nthe token on any node of her choice. Sushi makes the next move, followed by\nEikooc, followed by Sushi, and so on. In each turn after the first, a player\nmust move the token to a node \n    u\n such that \n    u\n is adjacent to the\nnode \n    v\n the token is currently on \n    u\n has not been visited before\n\n    u \n    \u2295 v \n    \u2264 min(u, v)\n Here \n    x \n    \u2295 y\n denotes the\nbitwise XOR operation on integers \n    x\n and \n    y\n. Both the players play\noptimally. The player who is unable to make a move loses. The following are\nexamples which demonstrate the rules of the game. Suppose Eikooc starts the\ngame by placing the token at node \n    4\n. Sushi then moves the token to node\n\n    6\n, which is unvisited and adjacent to \n    4\n. It also holds that \n    6\n    \n    \u2295 4 = 2 \n    \u2264 min(6, 4)\n. In the next turn, Eikooc moves the token\nto node \n    5\n, which is unvisited and adjacent to \n    6\n. It holds that\n\n    5 \n    \u2295 6 = 3 \n    \u2264 min(5, 6)\n. Sushi has no more moves to play, so\nshe loses. Suppose Eikooc starts the game by placing the token at node\n\n    3\n. Sushi moves the token to node \n    2\n, which is unvisited and\nadjacent to \n    3\n. It also holds that \n    3 \n    \u2295 2 = 1 \n    \u2264 min(3,\n    2)\n. Eikooc cannot move the token to node \n    6\n since \n    6 \n    \u2295 2 = 4\n    \n    \u2270 min(6, 2)\n. Since Eikooc has no moves to play, she loses. Before the\ngame begins, Eikooc decides to sneakily relabel the nodes of the tree in her\nfavour. Formally, a relabeling is a permutation \n    p\n of length \n    n\n\n(sequence of \n    n\n integers wherein each integer from \n    1\n to \n    n\n\noccurs exactly once) where \n    p_i\n denotes the new numbering of node\n\n    i\n. She wants to maximize the number of nodes she can choose in the first\nturn which will guarantee her a win. Help Eikooc find any relabeling which\nwill help her do so. Input The first line contains a single integer \n    t\u00a0(1\n    \n    \u2264 t \n    \u2264 10^5)\n \u2014 the number of test cases. The description of each\ntest case is as follows. The first line of each test case contains an integer\n\n    n\u00a0(1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5)\n \u2014 the number of nodes in the tree.\nThe next \n    n-1\n lines contain two integers \n    u\n and \n    v\n \n    (1 \n    \u2264\n    u, v \n    \u2264 n; u \n    \u2260 v)\n \u2014 denoting an edge between nodes \n    u\n and\n\n    v\n. It is guaranteed that the sum of \n    n\n over all test cases does not\nexceed \n    2 \n    \u00b7 10^5\n. Output For each test case print any suitable\nrelabeling \u2014 a permutation of length \n    n\n which maximizes the number of\nnodes that can be chosen in the first turn that guarantee a win for Eikooc. If\nthere are multiple such relabelings, you may print any of them. Example Input\n3 1 2 1 2 3 1 2 1 3 Output 1 2 1 1 2 3 Note In the first test case, Eikooc has\nonly one choice. Sushi will have no moves to play after Eikooc chooses this\nnode and Eikooc will win. In the second test case, \n    1 \n    \u2295 2 = 3 \n    \u2270\n    min(1, 2)\n. Hence, after Eikooc picks either of the nodes, Sushi will have\nno moves to play and Eikooc will win. Both \n    1, 2\n and \n    2,\n    1\n are optimal relabelings.\n\n",
        "cf_contest_id": 1605,
        "cf_index": "D",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "constructive algorithms",
            "dfs and similar",
            "games",
            "greedy",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1\r\n2\r\n1 2\r\n3\r\n1 2\r\n1 3\r\n",
                "1\r\n2 1\r\n1 3 2\r\n"
            ]
        ],
        "private_cases": []
    }
]