[
    {
        "name": "Christmas Game",
        "description": "Alice and Bob are going to celebrate Christmas by playing a game with a tree\nof presents. The tree has \n    n\n nodes (numbered \n    1\n to \n    n\n, with\nsome node \n    r\n as its root). There are \n    a_i\n presents are hanging from\nthe \n    i\n-th node. Before beginning the game, a special integer \n    k\n is\nchosen. The game proceeds as follows: Alice begins the game, with moves\nalternating each turn; in any move, the current player may choose some node\n(for example, \n    i\n) which has depth at least \n    k\n. Then, the player\npicks some positive number of presents hanging from that node, let's call it\n\n    m\n \n    (1 \n    \u2264 m \n    \u2264 a_i)\n; the player then places these \n    m\n\npresents on the \n    k\n-th ancestor (let's call it \n    j\n) of the \n    i\n-th\nnode (the \n    k\n-th ancestor of vertex \n    i\n is a vertex \n    j\n such that\n\n    i\n is a descendant of \n    j\n, and the difference between the depth of\n\n    j\n and the depth of \n    i\n is exactly \n    k\n). Now, the number of\npresents of the \n    i\n-th node \n    (a_i)\n is decreased by \n    m\n, and,\ncorrespondingly, \n    a_j\n is increased by \n    m\n; Alice and Bob both play\noptimally. The player unable to make a move loses the game.For each possible\nroot of the tree, find who among Alice or Bob wins the game. Note: The depth\nof a node \n    i\n in a tree with root \n    r\n is defined as the number of\nedges on the simple path from node \n    r\n to node \n    i\n. The depth of root\n\n    r\n itself is zero. Input The first line contains two space-separated\nintegers \n    n\n and \n    k\n \n    (3 \n    \u2264 n \n    \u2264 10^5, 1 \n    \u2264 k \n    \u2264 20)\n.\nThe next \n    n-1\n lines each contain two integers \n    x\n and \n    y\n \n    (1\n    \n    \u2264 x, y \n    \u2264 n, x \n    \u2260 y)\n, denoting an undirected edge between the\ntwo nodes \n    x\n and \n    y\n. These edges form a tree of \n    n\n nodes. The\nnext line contains \n    n\n space-separated integers denoting the array \n    a\n\n\n    (0 \n    \u2264 a_i \n    \u2264 10^9)\n. Output Output \n    n\n integers, where the\n\n    i\n-th integer is \n    1\n if Alice wins the game when the tree is rooted\nat node \n    i\n, or \n    0\n otherwise. Example Input 5 1 1 2 1 3 5 2 4 3 0 3 2\n4 4 Output 1 0 0 1 1 Note Let us calculate the answer for sample input with\nroot node as 1 and as 2. Root node 1 Alice always wins in this case. One\npossible gameplay between Alice and Bob is: Alice moves one present from node\n4 to node 3. Bob moves four presents from node 5 to node 2. Alice moves four\npresents from node 2 to node 1. Bob moves three presents from node 2 to node\n1. Alice moves three presents from node 3 to node 1. Bob moves three presents\nfrom node 4 to node 3. Alice moves three presents from node 3 to node 1. Bob\nis now unable to make a move and hence loses. Root node 2 Bob always wins in\nthis case. One such gameplay is: Alice moves four presents from node 4 to node\n3. Bob moves four presents from node 5 to node 2. Alice moves six presents\nfrom node 3 to node 1. Bob moves six presents from node 1 to node 2. Alice is\nnow unable to make a move and hence loses.\n\n",
        "cf_contest_id": 1498,
        "cf_index": "F",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "data structures",
            "dfs and similar",
            "dp",
            "games",
            "math",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 1\r\n1 2\r\n1 3\r\n5 2\r\n4 3\r\n0 3 2 4 4\r\n",
                "1 0 0 1 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "6 1\r\n1 2\r\n1 3\r\n3 4\r\n2 5\r\n5 6\r\n1 3 3 4 5 0\r\n",
                "0 0 0 0 0 0\r\n"
            ],
            [
                "3 1\r\n3 1\r\n3 2\r\n1 2 3\r\n",
                "1 1 1\r\n"
            ],
            [
                "3 3\r\n1 3\r\n1 2\r\n1 2 3\r\n",
                "0 0 0\r\n"
            ],
            [
                "3 20\r\n1 2\r\n1 3\r\n1 2 3\r\n",
                "0 0 0\r\n"
            ],
            [
                "4 3\r\n1 2\r\n1 3\r\n3 4\r\n1000000000 999999999 0 1\r\n",
                "0 1 0 1\r\n"
            ]
        ]
    }
]