[
    {
        "name": "Too Many Segments (hard version)",
        "description": "The only difference between easy and hard versions is constraints. You are\ngiven \n    n\n segments on the coordinate axis \n    OX\n. Segments can\nintersect, lie inside each other and even coincide. The \n    i\n-th segment is\n\n    [l_i; r_i]\n (\n    l_i \n    \u2264 r_i\n) and it covers all integer points\n\n    j\n such that \n    l_i \n    \u2264 j \n    \u2264 r_i\n. The integer point is called bad\nif it is covered by strictly more than \n    k\n segments. Your task is to\nremove the minimum number of segments so that there are no bad points at all.\nInput The first line of the input contains two integers \n    n\n and \n    k\n\n(\n    1 \n    \u2264 k \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of segments and\nthe maximum number of segments by which each integer point can be covered. The\nnext \n    n\n lines contain segments. The \n    i\n-th line contains two integers\n\n    l_i\n and \n    r_i\n (\n    1 \n    \u2264 l_i \n    \u2264 r_i \n    \u2264 2 \n    \u00b7 10^5\n) \u2014\nthe endpoints of the \n    i\n-th segment. Output In the first line print one\ninteger \n    m\n (\n    0 \n    \u2264 m \n    \u2264 n\n) \u2014 the minimum number of segments you\nneed to remove so that there are no bad points. In the second line print\n\n    m\n distinct integers \n    p_1, p_2, \n    \u2026, p_m\n (\n    1 \n    \u2264 p_i \n    \u2264\n    n\n) \u2014 indices of segments you remove in any order. If there are multiple\nanswers, you can print any of them. Examples Input 7 2 11 11 9 11 7 8 8 9 7 8\n9 11 7 9 Output 3 4 6 7 Input 5 1 29 30 30 30 29 29 28 30 30 30 Output 3 1 4 5\nInput 6 1 2 3 3 3 2 3 2 2 2 3 2 3 Output 4 1 3 5 6\n\n",
        "cf_contest_id": 1249,
        "cf_index": "D2",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 2\r\n11 11\r\n9 11\r\n7 8\r\n8 9\r\n7 8\r\n9 11\r\n7 9\r\n",
                "3\r\n7 4 1\r\n"
            ],
            [
                "5 1\r\n29 30\r\n30 30\r\n29 29\r\n28 30\r\n30 30\r\n",
                "3\r\n1 4 2\r\n"
            ],
            [
                "6 1\r\n2 3\r\n3 3\r\n2 3\r\n2 2\r\n2 3\r\n2 3\r\n",
                "4\r\n1 3 5 6\r\n"
            ]
        ],
        "private_cases": [
            [
                "16 3\r\n181 182\r\n183 184\r\n179 181\r\n178 178\r\n182 185\r\n177 184\r\n179 184\r\n176 184\r\n177 184\r\n176 176\r\n176 185\r\n183 185\r\n175 177\r\n179 183\r\n184 184\r\n175 176\r\n",
                "6\r\n11 8 6 7 9 5\r\n"
            ],
            [
                "15 2\r\n4 4\r\n16 18\r\n16 18\r\n6 9\r\n3 14\r\n8 11\r\n3 13\r\n3 6\r\n14 16\r\n5 17\r\n7 14\r\n11 14\r\n4 4\r\n10 11\r\n13 17\r\n",
                "8\r\n5 7 8 10 11 12 2 3\r\n"
            ],
            [
                "11 3\r\n144 145\r\n143 143\r\n143 143\r\n145 146\r\n143 148\r\n148 149\r\n145 149\r\n146 149\r\n146 148\r\n148 149\r\n144 145\r\n",
                "3\r\n7 5 6\r\n"
            ],
            [
                "18 1\r\n116 138\r\n106 165\r\n105 130\r\n142 161\r\n99 128\r\n108 149\r\n82 162\r\n131 134\r\n167 167\r\n138 155\r\n76 150\r\n71 132\r\n100 167\r\n86 161\r\n88 152\r\n76 158\r\n142 150\r\n136 138\r\n",
                "13\r\n16 11 7 14 15 12 13 3 2 6 1 10 4\r\n"
            ]
        ]
    }
]