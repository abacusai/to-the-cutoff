[
    {
        "name": "Gourmet choice",
        "description": "Mr. Apple, a gourmet, works as editor-in-chief of a gastronomic periodical. He\ntravels around the world, tasting new delights of famous chefs from the most\nfashionable restaurants. Mr. Apple has his own signature method of review \u2014 in\neach restaurant Mr. Apple orders two sets of dishes on two different days. All\nthe dishes are different, because Mr. Apple doesn't like to eat the same food.\nFor each pair of dishes from different days he remembers exactly which was\nbetter, or that they were of the same quality. After this the gourmet\nevaluates each dish with a positive integer. Once, during a revision of a\nrestaurant of Celtic medieval cuisine named \u00abPoisson\u00bb, that serves chestnut\nsoup with fir, warm soda bread, spicy lemon pie and other folk food, Mr. Apple\nwas very pleasantly surprised the gourmet with its variety of menu, and hence\nordered too much. Now he's confused about evaluating dishes. The gourmet\ntasted a set of \n    n\n dishes on the first day and a set of \n    m\n dishes on\nthe second day. He made a table \n    a\n of size \n    n \n    \u00d7 m\n, in which\nhe described his impressions. If, according to the expert, dish \n    i\n from\nthe first set was better than dish \n    j\n from the second set, then\n\n    a_ij\n is equal to \">\", in the opposite case \n    a_ij\n is equal to\n\"<\". Dishes also may be equally good, in this case \n    a_ij\n is \"=\". Now\nMr. Apple wants you to help him to evaluate every dish. Since Mr. Apple is\nvery strict, he will evaluate the dishes so that the maximal number used is as\nsmall as possible. But Mr. Apple also is very fair, so he never evaluates the\ndishes so that it goes against his feelings. In other words, if \n    a_ij\n\nis \"<\", then the number assigned to dish \n    i\n from the first set should be\nless than the number of dish \n    j\n from the second set, if \n    a_ij\n is\n\">\", then it should be greater, and finally if \n    a_ij\n is \"=\", then the\nnumbers should be the same. Help Mr. Apple to evaluate each dish from both\nsets so that it is consistent with his feelings, or determine that this is\nimpossible. Input The first line contains integers \n    n\n and \n    m\n (\n    1\n    \n    \u2264 n, m \n    \u2264 1000\n) \u2014 the number of dishes in both days. Each of the\nnext \n    n\n lines contains a string of \n    m\n symbols. The \n    j\n-th symbol\non \n    i\n-th line is \n    a_ij\n. All strings consist only of \"<\", \">\" and\n\"=\". Output The first line of output should contain \"Yes\", if it's possible to\ndo a correct evaluation for all the dishes, or \"No\" otherwise. If case an\nanswer exist, on the second line print \n    n\n integers \u2014 evaluations of\ndishes from the first set, and on the third line print \n    m\n integers \u2014\nevaluations of dishes from the second set. Examples Input 3 4 >>>> >>>> >>>>\nOutput Yes 2 2 2 1 1 1 1 Input 3 3 >>> <<< >>> Output Yes 3 1 3 2 2 2 Input 3\n2 == =< == Output No Note In the first sample, all dishes of the first day are\nbetter than dishes of the second day. So, the highest score will be \n    2\n,\nfor all dishes of the first day. In the third sample, the table is\ncontradictory \u2014 there is no possible evaluation of the dishes that satisfies\nit.\n\n",
        "cf_contest_id": 1131,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dp",
            "dsu",
            "graphs",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 4\r\n>>>>\r\n>>>>\r\n>>>>\r\n",
                "Yes\r\n2 2 2 \r\n1 1 1 1 "
            ],
            [
                "3 3\r\n>>>\r\n<<<\r\n>>>\r\n",
                "Yes\r\n3 1 3 \r\n2 2 2 "
            ],
            [
                "3 2\r\n==\r\n=<\r\n==\r\n",
                "No"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n<\r\n",
                "Yes\r\n1 \r\n2 "
            ],
            [
                "1 1\r\n=\r\n",
                "Yes\r\n1 \r\n1 "
            ],
            [
                "3 3\r\n<<<\r\n<<=\r\n<<=\r\n",
                "Yes\r\n1 2 2 \r\n3 3 2 "
            ],
            [
                "3 3\r\n><>\r\n>><\r\n><<\r\n",
                "No"
            ],
            [
                "11 23\r\n>><>>>>>>>><>>>>>>>>>>>\r\n<<<>>>>>>>><>><><>>><>>\r\n<<<>><<<><><><<><<>><>>\r\n><<>>>>>>>><>><><>>><>>\r\n<<<>>><<><><>><><<>><>>\r\n<<<>>><<><><>><><<>><>>\r\n><<>>>>>>>><>>>>>>>>>>>\r\n><<>>>>>>>><>>>>>>>><>>\r\n><<>>>>>>>><>>>>>>>>>>>\r\n<<<<<<<<<<<<<><<<<<<<<<\r\n<<<<<<<<<<<<<<<<<<<<<<<\r\n",
                "No"
            ],
            [
                "3 2\r\n<>\r\n<=\r\n>>\r\n",
                "Yes\r\n2 1 4 \r\n3 1 "
            ],
            [
                "2 3\r\n>>>\r\n==<\r\n",
                "Yes\r\n3 1 \r\n1 1 2 "
            ],
            [
                "3 3\r\n===\r\n===\r\n===\r\n",
                "Yes\r\n1 1 1 \r\n1 1 1 "
            ],
            [
                "3 3\r\n=<>\r\n>>>\r\n=<=\r\n",
                "No"
            ],
            [
                "3 1\r\n>\r\n<\r\n<\r\n",
                "Yes\r\n3 1 1 \r\n2 "
            ],
            [
                "2 2\r\n<>\r\n>>\r\n",
                "Yes\r\n2 4 \r\n3 1 "
            ],
            [
                "10 24\r\n<><>>>><>>><>>>>>>>><<>>\r\n<><>>>><>>><>>>>>>>><<>>\r\n>><>>>><>>><>>>>>>>><>>>\r\n<<<><><<<<<<><<><>>><<<>\r\n<<<=<=<<<<<<><<=<>==<<<>\r\n>><>>>><>>><>>>>>>>><>>>\r\n>>>>>>>>>>>>>>>>>>>>>>>>\r\n<<<<<<<<<<<<=<<<<=<<<<<<\r\n<><>>>><>>><>>>>>>>><<>>\r\n<><>>>><>>><>>>>>>>><<>>\r\n",
                "Yes\r\n6 6 8 4 3 8 10 1 6 6 \r\n7 5 9 3 5 3 5 9 5 5 5 9 1 5 5 3 5 1 3 3 9 7 5 2 "
            ]
        ]
    }
]