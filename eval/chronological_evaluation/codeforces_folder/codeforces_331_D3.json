[
    {
        "name": "Escaping on Beaveractor",
        "description": "Don't put up with what you're sick of! The Smart Beaver decided to escape from\nthe campus of Beaver Science Academy (BSA). BSA is a b \u00d7 b square on a plane.\nEach point x, y (0 \u2264 x, y \u2264 b) belongs to BSA. To make the path quick and\nfunny, the Beaver constructed a Beaveractor, an effective and comfortable\ntypes of transport. The campus obeys traffic rules: there are n arrows,\nparallel to the coordinate axes. The arrows do not intersect and do not touch\neach other. When the Beaveractor reaches some arrow, it turns in the arrow's\ndirection and moves on until it either reaches the next arrow or gets outside\nthe campus. The Beaveractor covers exactly one unit of space per one unit of\ntime. You can assume that there are no obstacles to the Beaveractor. The BSA\nscientists want to transport the brand new Beaveractor to the \"Academic\nTractor\" research institute and send the Smart Beaver to do his postgraduate\nstudies and sharpen pencils. They have q plans, representing the Beaveractor's\ninitial position (xi, yi), the initial motion vector wi and the time ti that\nhave passed after the escape started. Your task is for each of the q plans to\ndetermine the Smart Beaver's position after the given time. Input The first\nline contains two integers: the number of traffic rules n and the size of the\ncampus b, 0 \u2264 n, 1 \u2264 b. Next n lines contain the rules. Each line of the rules\ncontains four space-separated integers x0, y0, x1, y1 \u2014 the beginning and the\nend of the arrow. It is guaranteed that all arrows are parallel to the\ncoordinate axes and have no common points. All arrows are located inside the\ncampus, that is, 0 \u2264 x0, y0, x1, y1 \u2264 b holds. Next line contains integer q \u2014\nthe number of plans the scientists have, 1 \u2264 q \u2264 10^5. The i-th plan is\nrepresented by two integers, xi, yi are the Beaveractor's coordinates at the\ninitial time, 0 \u2264 xi, yi \u2264 b, character wi, that takes value U, D, L, R and\nsets the initial direction up, down, to the left or to the right\ncorrespondingly (the Y axis is directed upwards), and ti \u2014 the time passed\nafter the escape started, 0 \u2264 ti \u2264 10^15. to get 30 points you need to solve\nthe problem with constraints n, b \u2264 30 (subproblem D1); to get 60 points you\nneed to solve the problem with constraints n, b \u2264 1000 (subproblems D1+D2); to\nget 100 points you need to solve the problem with constraints n, b \u2264 10^5\n(subproblems D1+D2+D3). Output Print q lines. Each line should contain two\nintegers \u2014 the Beaveractor's coordinates at the final moment of time for each\nplan. If the Smart Beaver manages to leave the campus in time ti, print the\ncoordinates of the last point in the campus he visited. Examples Input 3 3 0 0\n0 1 0 2 2 2 3 3 2 3 12 0 0 L 0 0 0 L 1 0 0 L 2 0 0 L 3 0 0 L 4 0 0 L 5 0 0 L 6\n2 0 U 2 2 0 U 3 3 0 U 5 1 3 D 2 1 3 R 2 Output 0 0 0 1 0 2 1 2 2 2 3 2 3 2 2 2\n3 2 1 3 2 2 1 3\n\n",
        "cf_contest_id": 331,
        "cf_index": "D3",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3 3\r\n0 0 0 1\r\n0 2 2 2\r\n3 3 2 3\r\n12\r\n0 0 L 0\r\n0 0 L 1\r\n0 0 L 2\r\n0 0 L 3\r\n0 0 L 4\r\n0 0 L 5\r\n0 0 L 6\r\n2 0 U 2\r\n2 0 U 3\r\n3 0 U 5\r\n1 3 D 2\r\n1 3 R 2\r\n",
                "0 0\r\n0 1\r\n0 2\r\n1 2\r\n2 2\r\n3 2\r\n3 2\r\n2 2\r\n3 2\r\n1 3\r\n2 2\r\n1 3\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 7\r\n2 4 2 7\r\n4 7 4 6\r\n7 3 5 3\r\n10\r\n6 7 L 1\r\n6 7 L 2\r\n6 7 L 3\r\n6 7 L 4\r\n6 7 L 5\r\n6 7 L 6\r\n6 7 L 7\r\n6 7 L 8\r\n6 7 L 9\r\n6 7 L 10\r\n",
                "5 7\r\n4 7\r\n4 6\r\n4 5\r\n4 4\r\n4 3\r\n4 2\r\n4 1\r\n4 0\r\n4 0\r\n"
            ],
            [
                "4 2\r\n0 0 1 0\r\n2 0 2 1\r\n2 2 1 2\r\n0 2 0 1\r\n15\r\n1 1 R 7\r\n0 0 U 3\r\n1 1 R 888888888888887\r\n0 0 U 404040404040403\r\n2 1 D 1000000000000000\r\n2 0 R 324354768576473\r\n2 0 L 325436475453245\r\n2 0 U 764536452343654\r\n2 0 D 943654765876545\r\n1 1 U 1000000000000000\r\n1 1 D 989898789898789\r\n1 1 L 123456787654344\r\n0 1 L 0\r\n0 1 L 1\r\n0 1 L 999999999999993\r\n",
                "1 0\r\n2 1\r\n1 0\r\n2 1\r\n2 1\r\n2 1\r\n0 1\r\n0 0\r\n2 1\r\n2 2\r\n1 2\r\n0 2\r\n0 1\r\n0 0\r\n0 0\r\n"
            ],
            [
                "3 8\r\n2 4 4 4\r\n7 2 5 2\r\n6 5 6 3\r\n20\r\n3 2 U 1000000\r\n3 2 U 1\r\n3 2 U 2\r\n3 2 U 3\r\n3 2 U 4\r\n3 2 U 5\r\n3 2 U 6\r\n3 2 U 7\r\n3 2 U 8\r\n3 2 U 9\r\n3 2 U 10\r\n3 2 U 11\r\n3 2 U 12\r\n3 2 U 13\r\n3 2 U 14\r\n3 2 U 15\r\n3 2 U 16\r\n3 2 U 17\r\n3 2 U 18\r\n3 2 U 19\r\n",
                "0 2\r\n3 3\r\n3 4\r\n4 4\r\n5 4\r\n6 4\r\n6 3\r\n6 2\r\n5 2\r\n4 2\r\n3 2\r\n2 2\r\n1 2\r\n0 2\r\n0 2\r\n0 2\r\n0 2\r\n0 2\r\n0 2\r\n0 2\r\n"
            ],
            [
                "1 10\r\n1 5 9 5\r\n1\r\n5 5 L 1\r\n",
                "6 5\r\n"
            ]
        ]
    }
]