[
    {
        "name": "Maximum Diameter Graph",
        "description": "Graph constructive problems are back! This time the graph you are asked to\nbuild should match the following properties. The graph is connected if and\nonly if there exists a path between every pair of vertices. The diameter (aka\n\"longest shortest path\") of a connected undirected graph is the maximum number\nof edges in the shortest path between any pair of its vertices. The degree of\na vertex is the number of edges incident to it. Given a sequence of \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n construct a connected undirected graph\nof \n    n\n vertices such that: the graph contains no self-loops and no\nmultiple edges; the degree \n    d_i\n of the \n    i\n-th vertex doesn't exceed\n\n    a_i\n (i.e. \n    d_i \n    \u2264 a_i\n); the diameter of the graph is maximum\npossible. Output the resulting graph or report that no solution exists. Input\nThe first line contains a single integer \n    n\n (\n    3 \n    \u2264 n \n    \u2264 500\n) \u2014\nthe number of vertices in the graph. The second line contains \n    n\n integers\n\n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 n - 1\n) \u2014 the upper\nlimits to vertex degrees. Output Print \"NO\" if no graph can be constructed\nunder the given conditions. Otherwise print \"YES\" and the diameter of the\nresulting graph in the first line. The second line should contain a single\ninteger \n    m\n \u2014 the number of edges in the resulting graph. The \n    i\n-th\nof the next \n    m\n lines should contain two integers \n    v_i, u_i\n (\n    1\n    \n    \u2264 v_i, u_i \n    \u2264 n\n, \n    v_i \n    \u2260 u_i\n) \u2014 the description of the\n\n    i\n-th edge. The graph should contain no multiple edges \u2014 for each pair\n\n    (x, y)\n you output, you should output no more pairs \n    (x, y)\n or\n\n    (y, x)\n. Examples Input 3 2 2 2 Output YES 2 2 1 2 2 3 Input 5 1 4 1 1 1\nOutput YES 2 4 1 2 3 2 4 2 5 2 Input 3 1 1 1 Output NO Note Here are the\ngraphs for the first two example cases. Both have diameter of \n    2\n. \n    d_1\n    = 1 \n    \u2264 a_1 = 2\n\n    d_2 = 2 \n    \u2264 a_2 = 2\n \n    d_3 = 1 \n    \u2264 a_3 = 2\n\n\n    d_1 = 1 \n    \u2264 a_1 = 1\n\n    d_2 = 4 \n    \u2264 a_2 = 4\n \n    d_3 = 1 \n    \u2264 a_3 =\n    1\n \n    d_4 = 1 \n    \u2264 a_4 = 1\n\n\n",
        "cf_contest_id": 1082,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graphs",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2 2 2\r\n",
                "YES 2\r\n2\r\n1 2\r\n2 3\r\n"
            ],
            [
                "5\r\n1 4 1 1 1\r\n",
                "YES 2\r\n4\r\n1 2\r\n3 2\r\n4 2\r\n5 2\r\n"
            ],
            [
                "3\r\n1 1 1\r\n",
                "NO\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n1 1 2\r\n",
                "YES 2\r\n2\r\n1 3\r\n2 3\r\n"
            ],
            [
                "4\r\n2 1 2 1\r\n",
                "YES 3\r\n3\r\n1 3\r\n2 3\r\n4 1\r\n"
            ],
            [
                "5\r\n1 2 1 1 2\r\n",
                "NO\r\n"
            ],
            [
                "5\r\n1 1 1 3 1\r\n",
                "NO\r\n"
            ],
            [
                "100\r\n1 5 1 1 1 2 3 2 1 4 2 2 1 2 1 2 2 2 2 1 1 2 2 2 2 2 2 1 2 2 2 1 1 1 2 2 1 1 2 3 2 2 3 1 2 4 2 1 2 1 2 4 2 1 2 3 1 3 1 2 2 1 2 2 3 1 1 1 5 2 2 2 3 3 1 3 1 2 2 4 1 2 1 3 1 5 3 3 1 1 2 1 3 2 1 2 2 2 3 2\r\n",
                "NO\r\n"
            ],
            [
                "17\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 2\r\n",
                "YES 16\r\n16\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 11\r\n11 12\r\n12 13\r\n13 14\r\n14 15\r\n15 16\r\n16 17\r\n1 17\r\n"
            ],
            [
                "3\r\n1 2 2\r\n",
                "YES 2\r\n2\r\n2 3\r\n1 3\r\n"
            ]
        ]
    }
]