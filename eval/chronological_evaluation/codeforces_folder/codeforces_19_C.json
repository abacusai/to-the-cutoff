[
    {
        "name": "Deletion of Repeats",
        "description": "Once Bob saw a string. It contained so many different letters, that the\nletters were marked by numbers, but at the same time each letter could be met\nin the string at most 10 times. Bob didn't like that string, because it\ncontained repeats: a repeat of length x is such a substring of length 2x, that\nits first half coincides character by character with its second half. Bob\nstarted deleting all the repeats from the string. He does it as follows: while\nit's possible, Bob takes the shortest repeat, if it is not unique, he takes\nthe leftmost one, and deletes its left half and everything that is to the left\nof this repeat. You're given the string seen by Bob. Find out, what it will\nlook like after Bob deletes all the repeats in the way described above. Input\nThe first input line contains integer n (1 \u2264 n \u2264 10^5) \u2014 length of the string.\nThe following line contains n space-separated integer numbers from 0 to 10^9\ninclusive \u2014 numbers that stand for the letters of the string. It's guaranteed\nthat each letter can be met in the string at most 10 times. Output In the\nfirst line output the length of the string's part, left after Bob's deletions.\nIn the second line output all the letters (separated by a space) of the\nstring, left after Bob deleted all the repeats in the described way. Examples\nInput 6 1 2 3 1 2 3 Output 3 1 2 3 Input 7 4 5 6 5 6 7 7 Output 1 7\n\n",
        "cf_contest_id": 19,
        "cf_index": "C",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "hashing",
            "string suffix structures"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n1 2 3 1 2 3\r\n",
                "3\r\n1 2 3 "
            ],
            [
                "7\r\n4 5 6 5 6 7 7\r\n",
                "1\r\n7 "
            ]
        ],
        "private_cases": [
            [
                "10\r\n5 7 2 1 8 8 5 10 2 5\r\n",
                "5\r\n8 5 10 2 5 "
            ],
            [
                "10\r\n0 1 1 1 0 3 0 1 4 0\r\n",
                "7\r\n1 0 3 0 1 4 0 "
            ],
            [
                "10\r\n0 1 0 2 0 0 1 1 1 0\r\n",
                "2\r\n1 0 "
            ],
            [
                "30\r\n17 17 2 4 13 21 17 11 15 0 9 2 23 10 24 21 23 17 5 11 25 1 16 6 11 22 19 2 12 16\r\n",
                "29\r\n17 2 4 13 21 17 11 15 0 9 2 23 10 24 21 23 17 5 11 25 1 16 6 11 22 19 2 12 16 "
            ],
            [
                "100\r\n8 43 55 27 70 81 66 10 49 67 24 61 53 0 2 76 96 16 16 1 78 1 69 69 4 59 6 87 98 14 98 20 12 48 20 41 67 90 20 96 44 8 77 94 84 2 61 27 90 42 66 84 5 19 68 13 5 53 13 87 70 41 48 40 19 61 72 31 4 4 59 100 50 64 84 10 96 16 73 3 63 85 67 91 74 63 22 34 6 96 78 42 61 85 3 95 98 84 66 78\r\n",
                "31\r\n4 59 100 50 64 84 10 96 16 73 3 63 85 67 91 74 63 22 34 6 96 78 42 61 85 3 95 98 84 66 78 "
            ],
            [
                "100\r\n5 4 8 2 4 7 6 6 9 0 5 9 9 8 2 1 10 7 1 0 0 6 3 5 3 7 8 0 0 10 6 7 10 5 4 10 7 6 7 5 1 5 0 10 3 10 5 7 4 10 0 9 1 2 6 3 3 6 10 6 9 1 6 3 4 6 2 8 8 9 5 2 3 3 10 7 4 1 10 1 8 5 4 3 2 2 0 4 4 1 4 5 7 2 8 7 1 1 2 8\r\n",
                "3\r\n1 2 8 "
            ],
            [
                "100\r\n19 17 16 6 4 13 7 12 4 16 2 2 12 15 20 17 3 13 14 2 4 20 14 10 11 17 7 17 12 18 17 14 10 16 20 16 19 12 9 15 2 13 5 6 9 3 14 6 20 3 15 16 0 12 5 11 3 19 5 2 11 18 20 20 11 4 1 10 20 10 19 0 4 10 1 11 4 11 8 19 3 14 6 1 14 2 13 20 8 3 19 19 6 19 19 20 20 8 13 14\r\n",
                "4\r\n20 8 13 14 "
            ],
            [
                "10\r\n1 2 1 2 1 2 1 2 1 2\r\n",
                "2\r\n1 2 "
            ],
            [
                "10\r\n1 2 3 4 5 1 2 3 4 5\r\n",
                "5\r\n1 2 3 4 5 "
            ],
            [
                "10\r\n1 1 1 1 1 1 1 1 1 1\r\n",
                "1\r\n1 "
            ],
            [
                "21\r\n16417014 805849548 385039296 16417014 805849548 385039296 16417014 805849548 385039296 16417014 805849548 385039296 16417014 805849548 385039296 16417014 805849548 385039296 16417014 805849548 385039296\r\n",
                "3\r\n16417014 805849548 385039296 "
            ],
            [
                "22\r\n823078040 389511796 683819000 823078040 389511796 683819000 823078040 389511796 683819000 823078040 389511796 683819000 823078040 389511796 683819000 823078040 389511796 683819000 823078040 389511796 683819000 823078040\r\n",
                "4\r\n823078040 389511796 683819000 823078040 "
            ],
            [
                "23\r\n482255418 973174044 835115058 482255418 973174044 835115058 482255418 973174044 835115058 482255418 973174044 835115058 482255418 973174044 835115058 482255418 973174044 835115058 482255418 973174044 835115058 482255418 973174044\r\n",
                "5\r\n482255418 973174044 835115058 482255418 973174044 "
            ],
            [
                "1\r\n0\r\n",
                "1\r\n0 "
            ],
            [
                "2\r\n1 2\r\n",
                "2\r\n1 2 "
            ],
            [
                "2\r\n1000000000 1000000000\r\n",
                "1\r\n1000000000 "
            ],
            [
                "3\r\n1000000000 1000000000 1000000000\r\n",
                "1\r\n1000000000 "
            ],
            [
                "4\r\n1000000000 1000000000 1000000000 1000000000\r\n",
                "1\r\n1000000000 "
            ],
            [
                "7\r\n1 2 3 1 2 3 1\r\n",
                "4\r\n1 2 3 1 "
            ],
            [
                "30\r\n0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2\r\n",
                "1\r\n2 "
            ],
            [
                "10\r\n0 0 0 0 0 0 0 0 0 0\r\n",
                "1\r\n0 "
            ],
            [
                "20\r\n0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1\r\n",
                "1\r\n1 "
            ]
        ]
    }
]