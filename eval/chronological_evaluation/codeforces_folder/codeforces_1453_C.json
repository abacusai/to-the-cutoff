[
    {
        "name": "Triangles",
        "description": "Gildong has a square board consisting of \n    n\n rows and \n    n\n columns of\nsquare cells, each consisting of a single digit (from \n    0\n to \n    9\n). The\ncell at the \n    j\n-th column of the \n    i\n-th row can be represented as\n\n    (i, j)\n, and the length of the side of each cell is \n    1\n. Gildong\nlikes big things, so for each digit \n    d\n, he wants to find a triangle such\nthat: Each vertex of the triangle is in the center of a cell. The digit of\nevery vertex of the triangle is \n    d\n. At least one side of the triangle is\nparallel to one of the sides of the board. You may assume that a side of\nlength \n    0\n is parallel to both sides of the board. The area of the\ntriangle is maximized. Of course, he can't just be happy with finding these\ntriangles as is. Therefore, for each digit \n    d\n, he's going to change the\ndigit of exactly one cell of the board to \n    d\n, then find such a triangle.\nHe changes it back to its original digit after he is done with each digit.\nFind the maximum area of the triangle he can make for each digit. Note that he\ncan put multiple vertices of the triangle on the same cell, and the triangle\ncan be a degenerate triangle; i.e. the area of the triangle can be \n    0\n.\nAlso, note that he is allowed to change the digit of a cell from \n    d\n to\n\n    d\n. Input Each test contains one or more test cases. The first line\ncontains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n). The\nfirst line of each test case contains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    2000\n) \u2014 the number of rows and columns of the board. The next \n    n\n lines\nof each test case each contain a string of \n    n\n digits without spaces. The\n\n    j\n-th digit of the \n    i\n-th line is the digit of the cell at \n    (i,\n    j)\n. Each digit is one of the characters from \n    0\n to \n    9\n. It is\nguaranteed that the sum of \n    n^2\n in all test cases doesn't exceed \n    4\n    \n    \u00b7 10^6\n. Output For each test case, print one line with \n    10\n\nintegers. The \n    i\n-th integer is the maximum area of triangle Gildong can\nmake when \n    d = i-1\n, multiplied by \n    2\n. Example Input 5 3 000 122 001\n2 57 75 4 0123 4012 3401 2340 1 9 8 42987101 98289412 38949562 87599023\n92834718 83917348 19823743 38947912 Output 4 4 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1\n0 0 9 6 9 9 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 18 49 49 49 49 15 0 30 42 42 Note\nIn the first case, for \n    d=0\n, no matter which cell he chooses to use, the\ntriangle with vertices at \n    (1, 1)\n, \n    (1, 3)\n, and \n    (3, 1)\n is the\nbiggest triangle with area of \n    2 \n    \u00b7 22 = 2\n. Since we\nshould print it multiplied by \n    2\n, the answer for \n    d=0\n is \n    4\n.\nFor \n    d=1\n, Gildong can change the digit of the cell at \n    (1, 3)\n into\n\n    1\n, making a triangle with vertices on all three \n    1\n's that has an\narea of \n    2\n. For \n    d=2\n, Gildong can change the digit of one of the\nfollowing six cells into \n    2\n to make a triangle with an area of\n\n    12\n: \n    (1, 1)\n, \n    (1, 2)\n, \n    (1, 3)\n, \n    (3, 1)\n,\n\n    (3, 2)\n, and \n    (3, 3)\n. For the remaining digits (from \n    3\n to\n\n    9\n), the cell Gildong chooses to change will be the only cell that\ncontains that digit. Therefore the triangle will always be a degenerate\ntriangle with an area of \n    0\n. In the third case, for \n    d=4\n, note that\nthe triangle will be bigger than the answer if Gildong changes the digit of\nthe cell at \n    (1, 4)\n and use it along with the cells at \n    (2, 1)\n and\n\n    (4, 3)\n, but this is invalid because it violates the condition that at\nleast one side of the triangle must be parallel to one of the sides of the\nboard.\n\n",
        "cf_contest_id": 1453,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5\r\n3\r\n000\r\n122\r\n001\r\n2\r\n57\r\n75\r\n4\r\n0123\r\n4012\r\n3401\r\n2340\r\n1\r\n9\r\n8\r\n42987101\r\n98289412\r\n38949562\r\n87599023\r\n92834718\r\n83917348\r\n19823743\r\n38947912\r\n",
                "4 4 1 0 0 0 0 0 0 0\r\n0 0 0 0 0 1 0 1 0 0\r\n9 6 9 9 6 0 0 0 0 0\r\n0 0 0 0 0 0 0 0 0 0\r\n18 49 49 49 49 15 0 30 42 42\r\n"
            ]
        ],
        "private_cases": []
    }
]