[
    {
        "name": "Price Maximization",
        "description": "A batch of \n    n\n goods (\n    n\n \u2014 an even number) is brought to the store,\n\n    i\n-th of which has weight \n    a_i\n. Before selling the goods, they must\nbe packed into packages. After packing, the following will be done: There will\nbe \n    n/2\n packages, each package contains exactly two goods; The\nweight of the package that contains goods with indices \n    i\n and \n    j\n\n(\n    1 \n    \u2264 i, j \n    \u2264 n\n) is \n    a_i + a_j\n. With this, the cost of a\npackage of weight \n    x\n is always \n    \u230a\n    x/k\n    \n    \u230b\n burles (rounded down), where\n\n    k\n \u2014 a fixed and given value. Pack the goods to the packages so that the\nrevenue from their sale is maximized. In other words, make such\n\n    n/2\n pairs of given goods that the sum of the values \n    \u230a\n    x_i/k\n    \n    \u230b\n, where \n    x_i\n is the weight\nof the package number \n    i\n (\n    1 \n    \u2264 i \n    \u2264\n    n/2\n), is\nmaximal. For example, let \n    n = 6, k = 3\n, weights of goods \n    a = [3, 2,\n    7, 1, 4, 8]\n. Let's pack them into the following packages. In the first\npackage we will put the third and sixth goods. Its weight will be \n    a_3 + a_6\n    = 7 + 8 = 15\n. The cost of the package will be \n    \u230a\n    15/3\n    \n    \u230b = 5\n burles. In the second package\nput the first and fifth goods, the weight is \n    a_1 + a_5 = 3 + 4 = 7\n. The\ncost of the package is \n    \u230a\n    7/3\n    \n    \u230b =\n    2\n burles. In the third package put the second and fourth goods, the weight\nis \n    a_2 + a_4 = 2 + 1 = 3\n. The cost of the package is \n    \u230a\n    3/3\n    \n    \u230b = 1\n burle. With this packing, the\ntotal cost of all packs would be \n    5 + 2 + 1 = 8\n burles. Input The first\nline of the input contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n)\n\u2014the number of test cases in the test. The descriptions of the test cases\nfollow. The first line of each test case contains two integers \n    n\n (\n    2\n    \n    \u2264 n \n    \u2264 2\n    \u00b710^5\n) and \n    k\n (\n    1 \n    \u2264 k \n    \u2264 1000\n). The\nnumber \n    n\n \u2014 is even. The second line of each test case contains exactly\n\n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 10^9\n).\nIt is guaranteed that the sum of \n    n\n over all the test cases does not\nexceed \n    2\n    \u00b710^5\n. Output For each test case, print on a separate line\na single number \u2014 the maximum possible total cost of all the packages. Example\nInput 6 6 3 3 2 7 1 4 8 4 3 2 1 5 6 4 12 0 0 0 0 2 1 1 1 6 10 2 0 0 5 9 4 6 5\n5 3 8 6 3 2 Output 8 4 0 2 1 5 Note The first test case is analyzed in the\nstatement. In the second test case, you can get a total value equal to \n    4\n\nif you put the first and second goods in the first package and the third and\nfourth goods in the second package. In the third test case, the cost of each\nitem is \n    0\n, so the total cost will also be \n    0\n.\n\n",
        "cf_contest_id": 1690,
        "cf_index": "E",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "greedy",
            "math",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n6 3\r\n3 2 7 1 4 8\r\n4 3\r\n2 1 5 6\r\n4 12\r\n0 0 0 0\r\n2 1\r\n1 1\r\n6 10\r\n2 0 0 5 9 4\r\n6 5\r\n5 3 8 6 3 2\r\n",
                "8\r\n4\r\n0\r\n2\r\n1\r\n5\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n6 3\r\n9090 9090 7 1 4 8\r\n",
                "6066\r\n"
            ],
            [
                "1\r\n6 3\r\n909 909 7 1 4 8\r\n",
                "612\r\n"
            ]
        ]
    }
]