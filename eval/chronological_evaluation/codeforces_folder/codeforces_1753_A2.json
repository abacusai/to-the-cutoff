[
    {
        "name": "Make Nonzero Sum (hard version)",
        "description": "This is the hard version of the problem. The difference is that in this\nversion the array contains zeros. You can make hacks only if both versions of\nthe problem are solved. You are given an array \n    [a_1, a_2, \n    \u2026 a_n]\n\nconsisting of integers \n    -1\n, \n    0\n and \n    1\n. You have to build a\npartition of this array into the set of segments \n    [l_1, r_1], [l_2, r_2],\n    \n    \u2026, [l_k, r_k]\n with the following property: Denote the alternating\nsum of all elements of the \n    i\n-th segment as \n    s_i\n: \n    s_i\n =\n\n    a_l_i - a_l_i+1 + a_l_i+2 - a_l_i+3 + \n    \u2026\n    \u00b1 a_r_i\n.\nFor example, the alternating sum of elements of segment \n    [2, 4]\n in array\n\n    [1, 0, -1, 1, 1]\n equals to \n    0 - (-1) + 1 = 2\n. The sum of \n    s_i\n\nover all segments of partition should be equal to zero. Note that each\n\n    s_i\n does not have to be equal to zero, this property is about sum of\n\n    s_i\n over all segments of partition. The set of segments \n    [l_1, r_1],\n    [l_2, r_2], \n    \u2026, [l_k, r_k]\n is called a partition of the array \n    a\n\nof length \n    n\n if \n    1 = l_1 \n    \u2264 r_1, l_2 \n    \u2264 r_2, \n    \u2026, l_k \n    \u2264\n    r_k = n\n and \n    r_i + 1 = l_i+1\n for all \n    i = 1, 2, \n    \u2026 k-1\n.\nIn other words, each element of the array must belong to exactly one segment.\nYou have to build a partition of the given array with properties described\nabove or determine that such partition does not exist. Note that it is not\nrequired to minimize the number of segments in the partition. Input Each test\ncontains multiple test cases. The first line contains the number of test cases\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 10\n     000\n). Description of the test cases\nfollows. The first line of each test case contains an integer \n    n\n (\n    1\n    \n    \u2264 n \n    \u2264 200\n     000\n) \u2014 the length of array \n    a\n. The second line of\neach test case contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n\n(\n    a_i\n is \n    -1\n, \n    0\n, or \n    1\n) \u2014 the elements of the given\narray. It's guaranteed that the sum of \n    n\n over all test cases does not\nexceed \n    200\n     000\n. Output For each test case print an integer \n    k\n \u2014\nthe number of segments in the partition. If required partition does not exist,\nprint \n    -1\n. If partition exists, in the \n    i\n-th of the following\n\n    k\n lines print two integers \n    l_i\n and \n    r_i\n \u2014 description of the\n\n    i\n-th segment. The following conditions should be satisfied: \n    l_i \n    \u2264\n    r_i\n for each \n    i\n from \n    1\n to \n    k\n. \n    l_i + 1 = r_i + 1\n for\neach \n    i\n from \n    1\n to \n    (k - 1)\n. \n    l_1 = 1, r_k = n\n. If there\nare multiple correct partitions of the array, print any of them. Example Input\n5 4 0 0 0 0 7 -1 1 0 1 0 1 0 5 0 -1 1 0 1 3 1 0 1 1 1 Output 4 1 1 2 2 3 3 4 4\n4 1 1 2 2 3 5 6 7 -1 2 1 1 2 3 -1 Note In the first test case we can build a\npartition of \n    4\n segments \u2014 each of them will contain only one element of\nthe array equals to \n    0\n. So the sum will be equal to \n    0 + 0 + 0 + 0 =\n    0\n. In the second test case we can build a partition of \n    4\n segments.\nThe alternating sum of the first segment will be equal to \n    -1\n, the\nalternating sum of the second segment will be equal to \n    1\n, of the third\nsegment \u2014 \n    0 - 1 + 0 = -1\n, of the fourth segment \u2014 \n    1 - 0 = 1\n. The\nsum will be equal to \n    -1 + 1 -1 + 1 = 0\n. In the third test case it can be\nproved that the required partition does not exist.\n\n",
        "cf_contest_id": 1753,
        "cf_index": "A2",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dp",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n4\r\n0 0 0 0\r\n7\r\n-1 1 0 1 0 1 0\r\n5\r\n0 -1 1 0 1\r\n3\r\n1 0 1\r\n1\r\n1\r\n",
                "4\r\n1 1\r\n2 2\r\n3 3\r\n4 4\r\n6\r\n1 2\r\n3 3\r\n4 4\r\n5 5\r\n6 6\r\n7 7\r\n-1\r\n2\r\n1 1\r\n2 3\r\n-1\r\n"
            ]
        ],
        "private_cases": []
    }
]