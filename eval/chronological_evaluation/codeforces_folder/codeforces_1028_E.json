[
    {
        "name": "Restore Array",
        "description": "While discussing a proper problem A for a Codeforces Round, Kostya created a\ncyclic array of positive integers \n    a_1, a_2, \n    \u2026, a_n\n. Since the\ntalk was long and not promising, Kostya created a new cyclic array \n    b_1,\n    b_2, \n    \u2026, b_n\n so that \n    b_i = (a_i \n     a_i + 1)\n, where we\ntake \n    a_n+1 = a_1\n. Here \n    mod\n is the modulo operation. When the\ntalk became interesting, Kostya completely forgot how array \n    a\n had looked\nlike. Suddenly, he thought that restoring array \n    a\n from array \n    b\n\nwould be an interesting problem (unfortunately, not A). Input The first line\ncontains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 140582\n) \u2014 the length\nof the array \n    a\n. The second line contains \n    n\n integers \n    b_1, b_2,\n    \n    \u2026, b_n\n (\n    0 \n    \u2264 b_i \n    \u2264 187126\n). Output If it is possible\nto restore some array \n    a\n of length \n    n\n so that \n    b_i = a_i \n    \n    a_(i \n     n) + 1\n holds for all \n    i = 1, 2, \n    \u2026, n\n, print \u00abYES\u00bb\nin the first line and the integers \n    a_1, a_2, \n    \u2026, a_n\n in the second\nline. All \n    a_i\n should satisfy \n    1 \n    \u2264 a_i \n    \u2264 10^18\n. We can\nshow that if an answer exists, then an answer with such constraint exists as\nwell. It it impossible to restore any valid \n    a\n, print \u00abNO\u00bb in one line.\nYou can print each letter in any case (upper or lower). Examples Input 4 1 3 1\n0 Output YES 1 3 5 2 Input 2 4 4 Output NO Note In the first example: \n    1\n    \n     3 = 1\n \n    3 \n     5 = 3\n \n    5 \n     2 = 1\n \n    2 \n     1 = 0\n\n\n",
        "cf_contest_id": 1028,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 3 1 0\r\n",
                "YES\r\n4 3 5 4 "
            ],
            [
                "2\r\n4 4\r\n",
                "NO\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n5 4 3 2 1\r\n",
                "YES\r\n5 15 11 8 6 "
            ],
            [
                "10\r\n3 3 3 5 6 9 3 1 7 3\r\n",
                "YES\r\n29 26 23 20 15 9 43 40 39 32 "
            ],
            [
                "100\r\n57 5 28 44 99 10 66 93 76 32 67 92 67 81 33 3 6 6 67 10 41 72 5 71 27 22 21 54 21 59 36 62 43 39 28 49 55 65 21 73 87 40 0 62 67 59 40 18 56 71 15 97 73 73 2 61 54 44 6 52 25 34 13 20 18 13 25 51 19 66 63 87 50 63 82 60 11 11 54 58 88 20 33 40 85 68 13 74 37 51 63 32 45 20 30 28 32 64 82 19\r\n",
                "YES\r\n233 176 171 143 99 4530 4520 4454 4361 4285 4253 4186 4094 4027 3946 3913 3910 3904 3898 3831 3821 3780 3708 3703 3632 3605 3583 3562 3508 3487 3428 3392 3330 3287 3248 3220 3171 3116 3051 3030 2957 2870 2830 2830 2768 2701 2642 2602 2584 2528 2457 2442 2345 2272 2199 2197 2136 2082 2038 2032 1980 1955 1921 1908 1888 1870 1857 1832 1781 1762 1696 1633 1546 1496 1433 1351 1291 1280 1269 1215 1157 1069 1049 1016 976 891 823 810 736 699 648 585 553 508 488 458 430 398 334 252 "
            ],
            [
                "5\r\n1 2 3 4 5\r\n",
                "YES\r\n15 14 12 9 5 "
            ],
            [
                "2\r\n0 0\r\n",
                "YES\r\n1 1 "
            ],
            [
                "3\r\n1 3 0\r\n",
                "YES\r\n4 3 4 "
            ],
            [
                "2\r\n100000 100000\r\n",
                "NO\r\n"
            ],
            [
                "5\r\n1 0 0 1 1\r\n",
                "YES\r\n3 2 1 1 4 "
            ]
        ]
    }
]