[
    {
        "name": "Subsequence Addition (Easy Version)",
        "description": "The only difference between the two versions is that in this version, the\nconstraints are lower. Initially, array \n    a\n contains just the number\n\n    1\n. You can perform several operations in order to change the array. In\nan operation, you can select some subsequence\n    ^\n    \u2020\n of \n    a\n and\nadd into \n    a\n an element equal to the sum of all elements of the\nsubsequence. You are given a final array \n    c\n. Check if \n    c\n can be\nobtained from the initial array \n    a\n by performing some number (possibly 0)\nof operations on the initial array. \n    ^\n    \u2020\n A sequence \n    b\n is a\nsubsequence of a sequence \n    a\n if \n    b\n can be obtained from \n    a\n by\nthe deletion of several (possibly zero, but not all) elements. In other words,\nselect \n    k\n (\n    1 \n    \u2264 k \n    \u2264 |a|\n) distinct indices \n    i_1, i_2,\n    \n    \u2026, i_k\n and insert anywhere into \n    a\n a new element with the value\nequal to \n    a_i_1 + a_i_2 + \n    \u2026 + a_i_k\n. Input The first line of\nthe input contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the\nnumber of test cases. The description of the test cases follows. The first\nline of each test case contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    5000\n) \u2014 the number of elements the final array \n    c\n should have. The\nsecond line of each test case contains \n    n\n space-separated integers\n\n    c_i\n (\n    1 \n    \u2264 c_i \n    \u2264 5000\n) \u2014 the elements of the final array\n\n    c\n that should be obtained from the initial array \n    a\n. It is\nguaranteed that the sum of \n    n\n over all test cases does not exceed\n\n    5000\n. Output For each test case, output \"YES\" (without quotes) if such a\nsequence of operations exists, and \"NO\" (without quotes) otherwise. You can\noutput the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\"\nand \"YES\" will be recognized as a positive answer). Example Input 6 1 1 1 2 5\n5 1 3 2 1 5 7 1 5 2 1 3 1 1 1 5 1 1 4 2 1 Output YES NO YES NO YES YES Note\nFor the first test case, the initial array \n    a\n is already equal to\n\n    [1]\n, so the answer is \"YES\". For the second test case, performing any\namount of operations will change \n    a\n to an array of size at least two\nwhich doesn't only have the element \n    2\n, thus obtaining the array\n\n    [2]\n is impossible and the answer is \"NO\". For the third test case, we\ncan perform the following operations in order to obtain the final given array\n\n    c\n: Initially, \n    a = [1]\n. By choosing the subsequence \n    [1]\n, and\ninserting \n    1\n in the array, \n    a\n changes to \n    [1, 1]\n. By choosing\nthe subsequence \n    [1, 1]\n, and inserting \n    1+1=2\n in the middle of the\narray, \n    a\n changes to \n    [1, 2, 1]\n. By choosing the subsequence \n    [1,\n    2]\n, and inserting \n    1+2=3\n after the first \n    1\n of the array, \n    a\n\nchanges to \n    [1, 3, 2, 1]\n. By choosing the subsequence \n    [1, 3, 1]\n and\ninserting \n    1+3+1=5\n at the beginning of the array, \n    a\n changes to\n\n    [5, 1, 3, 2, 1]\n (which is the array we needed to obtain).\n\n",
        "cf_contest_id": 1807,
        "cf_index": "G1",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "dp",
            "greedy",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n1\r\n1\r\n1\r\n2\r\n5\r\n5 1 3 2 1\r\n5\r\n7 1 5 2 1\r\n3\r\n1 1 1\r\n5\r\n1 1 4 2 1\r\n",
                "YES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\n"
            ]
        ],
        "private_cases": []
    }
]