[
    {
        "name": "The Ultimate LIS Problem",
        "description": "It turns out that this is exactly the \n    100\n-th problem of mine that\nappears in some programming competition. So it has to be special! And what can\nbe more special than another problem about LIS... You are given a permutation\n\n    p_1, p_2, \n    \u2026, p_2n+1\n of integers from \n    1\n to \n    2n+1\n. You\nwill have to process \n    q\n updates, where the \n    i\n-th update consists in\nswapping \n    p_u_i, p_v_i\n. After each update, find any cyclic shift of\n\n    p\n with \n    LIS \n    \u2264 n\n, or determine that there is no such shift.\n(Refer to the output section for details). Here \n    LIS(a)\n denotes the\nlength of longest strictly increasing subsequence of \n    a\n. Hacks are\ndisabled in this problem. Don't ask why. Input The first line of the input\ncontains two integers \n    n, q\n (\n    2 \n    \u2264 n \n    \u2264 10^5\n, \n    1 \n    \u2264 q\n    \n    \u2264 10^5\n). The second line of the input contains \n    2n+1\n integers\n\n    p_1, p_2, \n    \u2026, p_2n+1\n (\n    1 \n    \u2264 p_i \n    \u2264 2n+1\n, all\n\n    p_i\n are distinct) \u2014 the elements of \n    p\n. The \n    i\n-th of the next\n\n    q\n lines contains two integers \n    u_i, v_i\n (\n    1 \n    \u2264 u_i, v_i \n    \u2264\n    2n+1\n, \n    u_i \n    \u2260 v_i\n) \u2014 indicating that you have to swap elements\n\n    p_u_i, p_v_i\n in the \n    i\n-th update. Output After each update,\noutput any \n    k\n \n    (0 \n    \u2264 k \n    \u2264 2n)\n, such that the length of the\nlongest increasing subsequence of \n    (p_k+1, p_k+2, \n    \u2026, p_2n+1,\n    p_1, \n    \u2026, p_k)\n doesn't exceed \n    n\n, or \n    -1\n, if there is no\nsuch \n    k\n. Example Input 2 6 1 2 3 4 5 1 5 1 5 4 5 5 4 1 4 2 5 Output -1 -1\n2 -1 4 0 Note After the first update, our permutation becomes \n    (5, 2, 3, 4,\n    1)\n. We can show that all its cyclic shifts have \n    LIS \n    \u2265 3\n. After\nthe second update, our permutation becomes \n    (1, 2, 3, 4, 5)\n. We can show\nthat all its cyclic shifts have \n    LIS \n    \u2265 3\n. After the third update, our\npermutation becomes \n    (1, 2, 3, 5, 4)\n. Its shift by \n    2\n is \n    (3, 5,\n    4, 1, 2)\n, and its \n    LIS = 2\n. After the fourth update, our permutation\nbecomes \n    (1, 2, 3, 4, 5)\n. We can show that all its cyclic shifts have\n\n    LIS \n    \u2265 3\n. After the fifth update, our permutation becomes \n    (4, 2,\n    3, 1, 5)\n. Its shift by \n    4\n is \n    (5, 4, 2, 3, 1)\n, and its \n    LIS =\n    2\n. After the fifth update, our permutation becomes \n    (4, 5, 3, 1, 2)\n.\nIts shift by \n    0\n is \n    (4, 5, 3, 1, 2)\n, and its \n    LIS = 2\n.\n\n",
        "cf_contest_id": 1685,
        "cf_index": "E",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 6\r\n1 2 3 4 5\r\n1 5\r\n1 5\r\n4 5\r\n5 4\r\n1 4\r\n2 5\r\n",
                "-1\r\n-1\r\n2\r\n-1\r\n4\r\n0\r\n"
            ]
        ],
        "private_cases": []
    }
]