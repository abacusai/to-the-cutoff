[
    {
        "name": "Warrior and Archer",
        "description": "In the official contest this problem has a different statement, for which\njury's solution was working incorrectly, and for this reason it was excluded\nfrom the contest. This mistake have been fixed and the current given problem\nstatement and model solution corresponds to what jury wanted it to be during\nthe contest. Vova and Lesha are friends. They often meet at Vova's place and\ncompete against each other in a computer game named The Ancient Papyri:\nSwordsink. Vova always chooses a warrior as his fighter and Leshac chooses an\narcher. After that they should choose initial positions for their characters\nand start the fight. A warrior is good at melee combat, so Vova will try to\nmake the distance between fighters as small as possible. An archer prefers to\nkeep the enemy at a distance, so Lesha will try to make the initial distance\nas large as possible. There are n (n is always even) possible starting\npositions for characters marked along the Ox axis. The positions are given by\ntheir distinct coordinates x1, x2, ..., xn, two characters cannot end up at\nthe same position. Vova and Lesha take turns banning available positions, Vova\nmoves first. During each turn one of the guys bans exactly one of the\nremaining positions. Banned positions cannot be used by both Vova and Lesha.\nThey continue to make moves until there are only two possible positions\nremaining (thus, the total number of moves will be n - 2). After that Vova's\ncharacter takes the position with the lesser coordinate and Lesha's character\ntakes the position with the bigger coordinate and the guys start fighting.\nVova and Lesha are already tired by the game of choosing positions, as they\nneed to play it before every fight, so they asked you (the developer of the\nThe Ancient Papyri: Swordsink) to write a module that would automatically\ndetermine the distance at which the warrior and the archer will start fighting\nif both Vova and Lesha play optimally. Input The first line on the input\ncontains a single integer n (2 \u2264 n \u2264 200 000, n is even) \u2014 the number of\npositions available initially. The second line contains n distinct integers\nx1, x2, ..., xn (0 \u2264 xi \u2264 10^9), giving the coordinates of the corresponding\npositions. Output Print the distance between the warrior and the archer at the\nbeginning of the fight, provided that both Vova and Lesha play optimally.\nExamples Input 6 0 1 3 7 15 31 Output 7 Input 2 73 37 Output 36 Note In the\nfirst sample one of the optimum behavior of the players looks like that: Vova\nbans the position at coordinate 15; Lesha bans the position at coordinate 3;\nVova bans the position at coordinate 31; Lesha bans the position at coordinate\n1. After these actions only positions 0 and 7 will remain, and the distance\nbetween them is equal to 7. In the second sample there are only two possible\npositions, so there will be no bans.\n\n",
        "cf_contest_id": 594,
        "cf_index": "A",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "games"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n0 1 3 7 15 31\r\n",
                "7\r\n"
            ],
            [
                "2\r\n73 37\r\n",
                "36\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n0 1000000000\r\n",
                "1000000000\r\n"
            ],
            [
                "8\r\n729541013 135019377 88372488 319157478 682081360 558614617 258129110 790518782\r\n",
                "470242129\r\n"
            ],
            [
                "2\r\n0 1\r\n",
                "1\r\n"
            ],
            [
                "8\r\n552283832 997699491 89302459 301640204 288141798 31112026 710831619 862166501\r\n",
                "521171806\r\n"
            ],
            [
                "4\r\n0 500000000 500000001 1000000000\r\n",
                "500000000\r\n"
            ],
            [
                "18\r\n515925896 832652240 279975694 570998878 28122427 209724246 898414431 709461320 358922485 439508829 403574907 358500312 596248410 968234748 187793884 728450713 30350176 528924900\r\n",
                "369950401\r\n"
            ],
            [
                "20\r\n713900269 192811911 592111899 609607891 585084800 601258511 223103775 876894656 751583891 230837577 971499807 312977833 344314550 397998873 558637732 216574673 913028292 762852863 464376621 61315042\r\n",
                "384683838\r\n"
            ],
            [
                "10\r\n805513144 38998401 16228409 266085559 293487744 471510400 138613792 649258082 904651590 244678415\r\n",
                "277259335\r\n"
            ],
            [
                "6\r\n0 166666666 333333333 499999998 666666665 833333330\r\n",
                "499999997\r\n"
            ],
            [
                "16\r\n1 62500001 125000001 187500000 250000000 312500000 375000000 437500001 500000000 562500000 625000000 687500001 750000001 812500002 875000002 937500000\r\n",
                "499999999\r\n"
            ],
            [
                "12\r\n5 83333336 166666669 250000001 333333336 416666670 500000004 583333336 666666667 750000001 833333334 916666671\r\n",
                "499999998\r\n"
            ],
            [
                "20\r\n54 50000046 100000041 150000049 200000061 250000039 300000043 350000054 400000042 450000045 500000076 550000052 600000064 650000065 700000055 750000046 800000044 850000042 900000052 950000054\r\n",
                "499999988\r\n"
            ]
        ]
    }
]