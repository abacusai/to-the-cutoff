[
    {
        "name": "Little Elephant and Strings",
        "description": "The Little Elephant loves strings very much. He has an array a from n strings,\nconsisting of lowercase English letters. Let's number the elements of the\narray from 1 to n, then let's denote the element number i as ai. For each\nstring ai (1 \u2264 i \u2264 n) the Little Elephant wants to find the number of pairs of\nintegers l and r (1 \u2264 l \u2264 r \u2264 |ai|) such that substring ai[l... r] is a\nsubstring to at least k strings from array a (including the i-th string). Help\nthe Little Elephant solve this problem. If you are not familiar with the basic\nnotation in string problems, you can find the corresponding definitions in the\nnotes. Input The first line contains two space-separated integers \u2014 n and k (1\n\u2264 n, k \u2264 10^5). Next n lines contain array a. The i-th line contains a non-\nempty string ai, consisting of lowercase English letter. The total length of\nall strings ai does not exceed 10^5. Output On a single line print n space-\nseparated integers \u2014 the i-th number is the answer for string ai. Please, do\nnot use the \npreferred to use the cin, cout streams or the \n3 1 abc a ab Output 6 1 3 Input 7 4 rubik furik abab baba aaabbbababa\nabababababa zero Output 1 0 9 9 21 30 0 Note Let's assume that you are given\nstring a = a1a2... a|a|, then let's denote the string's length as |a| and the\nstring's i-th character as ai. A substring a[l... r] (1 \u2264 l \u2264 r \u2264 |a|) of\nstring a is string alal + 1... ar. String a is a substring of string b, if\nthere exists such pair of integers l and r (1 \u2264 l \u2264 r \u2264 |b|), that b[l... r] =\na.\n\n",
        "cf_contest_id": 204,
        "cf_index": "E",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "implementation",
            "string suffix structures",
            "two pointers"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 1\r\nabc\r\na\r\nab\r\n",
                "6 1 3 "
            ],
            [
                "7 4\r\nrubik\r\nfurik\r\nabab\r\nbaba\r\naaabbbababa\r\nabababababa\r\nzero\r\n",
                "1 0 9 9 21 30 0 "
            ]
        ],
        "private_cases": [
            [
                "10 10\r\np\r\ne\r\nh\r\ni\r\ni\r\na\r\na\r\nc\r\nb\r\nb\r\n",
                "0 0 0 0 0 0 0 0 0 0 "
            ],
            [
                "10 1\r\nxl\r\nv\r\nwga\r\nhbjb\r\njysiehz\r\nptntiwa\r\nikn\r\nk\r\nrsbi\r\nbuqmukzc\r\n",
                "3 1 6 10 28 28 6 1 10 36 "
            ],
            [
                "10 2\r\nxfrisxkkif\r\niyyyjoaoqfv\r\nfivgajxf\r\nieath\r\npbhsxl\r\nsg\r\nz\r\nod\r\nq\r\nj\r\n",
                "9 8 9 3 4 2 0 1 1 1 "
            ],
            [
                "11 47\r\nbwxotc\r\nvb\r\ncwrdb\r\nk\r\nb\r\npaqveqyhr\r\nfbummcgk\r\nftax\r\nlzcheeccnk\r\nnjjnh\r\niveqsqfdpavepezdoztsvez\r\n",
                "0 0 0 0 0 0 0 0 0 0 0 "
            ],
            [
                "11 7\r\nbhhditjkesizklhkdol\r\nwbrebjxutkgifexbvd\r\nc\r\nnzmmsdnnrxpadjvqseaf\r\nidvhvukxhslkkgfdi\r\nioqxfzljgxntmtgzvalf\r\ndhqurtraip\r\najgla\r\nhfvwwvck\r\nelfhcjjeilktpdjw\r\nkgrppjvreznzi\r\n",
                "3 2 0 1 2 2 1 1 0 4 2 "
            ],
            [
                "47 10\r\nyyv\r\nwqvoo\r\nrh\r\nxtyaitb\r\nobvdgph\r\nnth\r\ne\r\nbvl\r\nzkbw\r\ntalmvi\r\njxxojj\r\nrl\r\nmlfoqx\r\nb\r\ncfwip\r\ngzkg\r\nxp\r\ntfrw\r\nxikvb\r\ne\r\ntqj\r\nk\r\no\r\ncueo\r\nd\r\nsuusjeo\r\nddbluvq\r\nqg\r\nlysheow\r\nmvav\r\nntmrlsm\r\nlw\r\njufs\r\ncwfbtax\r\nvho\r\natwhll\r\nqm\r\nfurgshv\r\ndwpcu\r\nevklbew\r\nwo\r\nnjdecso\r\ntsm\r\nxqdjdjc\r\nnkycgt\r\nciurrt\r\nexckyhdfghvizubvhbuyozdfilnuvgeleqagszyfwbsdkeqegysskhqosvjabufagvpdazlsjbwpbifqexmayrjiqymnbanlzrrrybhcd\r\n",
                "1 4 0 3 3 1 0 3 2 3 1 1 2 1 1 0 0 2 2 0 1 0 1 1 0 1 3 0 3 2 2 2 0 3 2 4 0 1 1 4 2 1 1 0 1 1 21 "
            ],
            [
                "10 7\r\necaadabdda\r\ncabcdaa\r\nacc\r\ndecbcdcc\r\ncabcd\r\ncdaebd\r\neddceacb\r\nceaeccea\r\nbbdace\r\neddebeaee\r\n",
                "10 7 3 8 5 6 8 8 6 9 "
            ]
        ]
    }
]