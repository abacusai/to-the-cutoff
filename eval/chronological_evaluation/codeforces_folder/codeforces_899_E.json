[
    {
        "name": "Segments Removal",
        "description": "Vasya has an array of integers of length n. Vasya performs the following\noperations on the array: on each step he finds the longest segment of\nconsecutive equal integers (the leftmost, if there are several such segments)\nand removes it. For example, if Vasya's array is [13, 13, 7, 7, 7, 2, 2, 2],\nthen after one operation it becomes [13, 13, 2, 2, 2]. Compute the number of\noperations Vasya should make until the array becomes empty, i.e. Vasya removes\nall elements from it. Input The first line contains a single integer n (1 \u2264 n\n\u2264 200 000) \u2014 the length of the array. The second line contains a sequence a1,\na2, ..., an (1 \u2264 ai \u2264 10^9) \u2014 Vasya's array. Output Print the number of\noperations Vasya should make to remove all elements from the array. Examples\nInput 4 2 5 5 2 Output 2 Input 5 6 3 4 1 5 Output 5 Input 8 4 4 4 2 2 100 100\n100 Output 3 Input 6 10 10 50 10 50 50 Output 4 Note In the first example, at\nfirst Vasya removes two fives at the second and third positions. The array\nbecomes [2, 2]. In the second operation Vasya removes two twos at the first\nand second positions. After that the array becomes empty. In the second\nexample Vasya has to perform five operations to make the array empty. In each\nof them he removes the first element from the array. In the third example\nVasya needs three operations. In the first operation he removes all integers\n4, in the second \u2014 all integers 100, in the third \u2014 all integers 2. In the\nfourth example in the first operation Vasya removes the first two integers 10.\nAfter that the array becomes [50, 10, 50, 50]. Then in the second operation\nVasya removes the two rightmost integers 50, so that the array becomes [50,\n10]. In the third operation he removes the remaining 50, and the array becomes\n[10] after that. In the last, fourth operation he removes the only remaining\n10. The array is empty after that.\n\n",
        "cf_contest_id": 899,
        "cf_index": "E",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dsu",
            "flows",
            "implementation",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2 5 5 2\r\n",
                "2\r\n"
            ],
            [
                "5\r\n6 3 4 1 5\r\n",
                "5\r\n"
            ],
            [
                "8\r\n4 4 4 2 2 100 100 100\r\n",
                "3\r\n"
            ],
            [
                "6\r\n10 10 50 10 50 50\r\n",
                "4\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "100\r\n45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45\r\n",
                "1\r\n"
            ],
            [
                "1\r\n100\r\n",
                "1\r\n"
            ],
            [
                "2\r\n1 100\r\n",
                "2\r\n"
            ],
            [
                "2\r\n1 1\r\n",
                "1\r\n"
            ],
            [
                "2\r\n100 100\r\n",
                "1\r\n"
            ],
            [
                "3\r\n1 1 1\r\n",
                "1\r\n"
            ],
            [
                "3\r\n1 1 3\r\n",
                "2\r\n"
            ],
            [
                "3\r\n1 100 1\r\n",
                "3\r\n"
            ],
            [
                "3\r\n1 5 6\r\n",
                "3\r\n"
            ],
            [
                "3\r\n10 4 10\r\n",
                "3\r\n"
            ],
            [
                "3\r\n10 10 4\r\n",
                "2\r\n"
            ],
            [
                "4\r\n100 4 56 33\r\n",
                "4\r\n"
            ],
            [
                "4\r\n1 2 2 1\r\n",
                "2\r\n"
            ],
            [
                "4\r\n1 1 1 3\r\n",
                "2\r\n"
            ],
            [
                "4\r\n5 1 1 1\r\n",
                "2\r\n"
            ],
            [
                "1\r\n4\r\n",
                "1\r\n"
            ],
            [
                "2\r\n21 21\r\n",
                "1\r\n"
            ],
            [
                "3\r\n48 48 14\r\n",
                "2\r\n"
            ],
            [
                "10\r\n69 69 69 69 69 13 69 7 69 7\r\n",
                "6\r\n"
            ],
            [
                "20\r\n15 15 71 100 71 71 15 93 15 100 100 71 100 100 100 15 100 100 71 15\r\n",
                "14\r\n"
            ],
            [
                "31\r\n17 17 17 17 29 17 17 29 91 17 29 17 91 17 29 17 17 17 29 17 17 17 17 17 17 17 17 29 29 17 17\r\n",
                "12\r\n"
            ],
            [
                "43\r\n40 69 69 77 9 10 58 69 23 9 58 51 10 69 10 89 77 77 9 9 10 9 69 58 40 10 23 10 58 9 9 77 58 9 77 10 58 58 40 77 9 89 40\r\n",
                "38\r\n"
            ],
            [
                "54\r\n34 75 90 23 47 13 68 37 14 39 48 41 42 100 19 43 68 47 13 47 48 65 45 89 56 86 67 52 87 81 86 63 44 9 89 21 86 89 20 43 43 37 24 43 77 14 43 42 99 92 49 99 27 40\r\n",
                "53\r\n"
            ],
            [
                "66\r\n79 79 49 49 79 81 79 79 79 79 81 49 49 79 49 49 79 49 49 81 81 49 49 49 81 49 49 49 81 81 79 81 49 81 49 79 81 49 79 79 81 49 79 79 81 49 49 79 79 79 81 79 49 47 49 49 47 81 79 49 79 79 79 49 49 49\r\n",
                "34\r\n"
            ],
            [
                "80\r\n80 86 39 5 58 20 66 61 32 75 93 20 57 20 20 61 45 17 86 43 31 75 37 80 92 10 6 18 21 8 93 92 11 75 86 39 53 27 45 77 20 20 1 80 66 13 11 51 58 11 31 51 73 93 15 88 6 32 99 6 39 87 6 39 6 80 8 45 46 45 23 53 23 58 24 53 28 46 87 68\r\n",
                "78\r\n"
            ],
            [
                "100\r\n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7\r\n",
                "3\r\n"
            ],
            [
                "9\r\n1 2 2 2 1 2 2 2 1\r\n",
                "3\r\n"
            ],
            [
                "12\r\n1 1 1 49 63 63 63 19 38 38 65 27\r\n",
                "7\r\n"
            ],
            [
                "7\r\n31 31 21 21 13 96 96\r\n",
                "4\r\n"
            ],
            [
                "3\r\n1000000000 1 1000000000\r\n",
                "3\r\n"
            ]
        ]
    }
]