[
    {
        "name": "Fishingprince Plays With Array Again",
        "description": "Suppose you are given a 1-indexed sequence \n    a\n of non-negative integers,\nwhose length is \n    n\n, and two integers \n    x\n, \n    y\n. In consecutive\n\n    t\n seconds (\n    t\n can be any positive real number), you can do one of\nthe following operations: Select \n    1\n    \u2264 i<n\n, decrease \n    a_i\n by\n\n    x\n    \u00b7 t\n, and decrease \n    a_i+1\n by \n    y\n    \u00b7 t\n. Select\n\n    1\n    \u2264 i<n\n, decrease \n    a_i\n by \n    y\n    \u00b7 t\n, and decrease\n\n    a_i+1\n by \n    x\n    \u00b7 t\n. Define the minimum amount of time (it might\nbe a real number) required to make all elements in the sequence less than or\nequal to \n    0\n as \n    f(a)\n. For example, when \n    x=1\n, \n    y=2\n, it\ntakes \n    3\n seconds to deal with the array \n    [3,1,1,3]\n. We can: In the\nfirst \n    1.5\n seconds do the second operation with \n    i=1\n. In the next\n\n    1.5\n seconds do the first operation with \n    i=3\n. We can prove that\nit's not possible to make all elements less than or equal to \n    0\n in less\nthan \n    3\n seconds, so \n    f([3,1,1,3])=3\n. Now you are given a 1-indexed\nsequence \n    b\n of positive integers, whose length is \n    n\n. You are also\ngiven positive integers \n    x\n, \n    y\n. Process \n    q\n queries of the\nfollowing two types: 1 k v: change \n    b_k\n to \n    v\n. 2 l r: print\n\n    f([b_l,b_l+1,\n    \u2026,b_r])\n. Input The first line of input contains two\nintegers \n    n\n and \n    q\n (\n    2\n    \u2264 n\n    \u2264 2\n    \u00b7 10^5\n, \n    1\n    \u2264\n    q\n    \u2264 2\n    \u00b7 10^5\n). The second line of input contains two integers\n\n    x\n and \n    y\n (\n    1\n    \u2264 x,y\n    \u2264 10^6\n). The third line of input\ncontains \n    n\n integers \n    b_1,b_2,\n    \u2026,b_n\n (\n    1\n    \u2264 b_i\n    \u2264\n    10^6\n). This is followed by \n    q\n lines. Each of these \n    q\n lines\ncontains three integers. The first integer \n    op\n is either \n    1\n or\n\n    2\n. If it is \n    1\n, it is followed by two integers \n    k\n, \n    v\n\n(\n    1\n    \u2264 k\n    \u2264 n\n, \n    1\n    \u2264 v\n    \u2264 10^6\n). It means that you should\nchange \n    b_k\n to \n    v\n. If it is \n    2\n, it is followed by two integers\n\n    l\n, \n    r\n (\n    1\n    \u2264 l<r\n    \u2264 n\n). It means that you should print\n\n    f([b_l,b_l+1,\n    \u2026,b_r])\n. Output For each query of type \n    2\n,\nprint one real number \u2014 the answer to the query. Your answer is considered\ncorrect if its absolute error or relative error does not exceed \n    10^-9\n.\nExample Input 4 3 1 2 3 1 1 4 2 1 4 1 1 1 2 1 3 Output 3.500000000000000\n1.000000000000000 Note Let's analyse the sample. In the first query, we are\nasked to compute \n    f([3,1,1,4])\n. The answer is \n    3.5\n. One optimal\nsequence of operations is: In the first \n    1.5\n seconds do the second\noperation with \n    i=1\n. In the next \n    2\n seconds do the first operation\nwith \n    i=3\n. In the third query, we are asked to compute \n    f([1,1,1])\n.\nThe answer is \n    1\n. One optimal sequence of operations is: In the first\n\n    0.5\n seconds do the second operation with \n    i=1\n. In the next\n\n    0.5\n seconds do the first operation with \n    i=2\n.\n\n",
        "cf_contest_id": 1696,
        "cf_index": "G",
        "cf_rating": 3300,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "geometry",
            "math"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "4 3\r\n1 2\r\n3 1 1 4\r\n2 1 4\r\n1 1 1\r\n2 1 3\r\n",
                "3.5000000000\r\n1.0000000000\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1\r\n384 575\r\n919974 974837\r\n2 1 2\r\n",
                "1975.8196037539\r\n"
            ]
        ]
    }
]