[
    {
        "name": "Naming Company",
        "description": "Oleg the client and Igor the analyst are good friends. However, sometimes they\nargue over little things. Recently, they started a new company, but they are\nhaving trouble finding a name for the company. To settle this problem, they've\ndecided to play a game. The company name will consist of n letters. Oleg and\nIgor each have a set of n letters (which might contain multiple copies of the\nsame letter, the sets can be different). Initially, the company name is\ndenoted by n question marks. Oleg and Igor takes turns to play the game, Oleg\nmoves first. In each turn, a player can choose one of the letters c in his set\nand replace any of the question marks with c. Then, a copy of the letter c is\nremoved from his set. The game ends when all the question marks has been\nreplaced by some letter. For example, suppose Oleg has the set of letters i,\no, i and Igor has the set of letters i, m, o. One possible game is as\nfollows : Initially, the company name is ???. Oleg replaces the second\nquestion mark with 'i'. The company name becomes ?i?. The set of letters Oleg\nhave now is i, o. Igor replaces the third question mark with 'o'. The\ncompany name becomes ?io. The set of letters Igor have now is i, m. Finally,\nOleg replaces the first question mark with 'o'. The company name becomes oio.\nThe set of letters Oleg have now is i. In the end, the company name is oio.\nOleg wants the company name to be as lexicographically small as possible while\nIgor wants the company name to be as lexicographically large as possible. What\nwill be the company name if Oleg and Igor always play optimally? A string s =\ns1s2...sm is called lexicographically smaller than a string t = t1t2...tm\n(where s \u2260 t) if si < ti where i is the smallest index such that si \u2260 ti. (so\nsj = tj for all j < i) Input The first line of input contains a string s of\nlength n (1 \u2264 n \u2264 3\u00b710^5). All characters of the string are lowercase English\nletters. This string denotes the set of letters Oleg has initially. The second\nline of input contains a string t of length n. All characters of the string\nare lowercase English letters. This string denotes the set of letters Igor has\ninitially. Output The output should contain a string of n lowercase English\nletters, denoting the company name if Oleg and Igor plays optimally. Examples\nInput tinkoff zscoder Output fzfsirk Input xxxxxx xxxxxx Output xxxxxx Input\nioi imo Output ioi Note One way to play optimally in the first sample is as\nfollows : Initially, the company name is ???????. Oleg replaces the first\nquestion mark with 'f'. The company name becomes f??????. Igor replaces the\nsecond question mark with 'z'. The company name becomes fz?????. Oleg replaces\nthe third question mark with 'f'. The company name becomes fzf????. Igor\nreplaces the fourth question mark with 's'. The company name becomes fzfs???.\nOleg replaces the fifth question mark with 'i'. The company name becomes\nfzfsi??. Igor replaces the sixth question mark with 'r'. The company name\nbecomes fzfsir?. Oleg replaces the seventh question mark with 'k'. The company\nname becomes fzfsirk.For the second sample, no matter how they play, the\ncompany name will always be xxxxxx.\n\n",
        "cf_contest_id": 794,
        "cf_index": "C",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "games",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "tinkoff\r\nzscoder\r\n",
                "fzfsirk"
            ],
            [
                "xxxxxx\r\nxxxxxx\r\n",
                "xxxxxx"
            ],
            [
                "ioi\r\nimo\r\n",
                "ioi"
            ]
        ],
        "private_cases": [
            [
                "abc\r\naaa\r\n",
                "aab"
            ],
            [
                "reddit\r\nabcdef\r\n",
                "dfdeed"
            ],
            [
                "cbxz\r\naaaa\r\n",
                "abac"
            ],
            [
                "bcdef\r\nabbbc\r\n",
                "bccdb"
            ],
            [
                "z\r\ny\r\n",
                "z"
            ],
            [
                "y\r\nz\r\n",
                "y"
            ]
        ]
    }
]