[
    {
        "name": "Double Sort",
        "description": "You are given two arrays \n    a\n and \n    b\n, both consisting of \n    n\n\nintegers. In one move, you can choose two indices \n    i\n and \n    j\n (\n    1\n    \n    \u2264 i, j \n    \u2264 n\n; \n    i \n    \u2260 j\n) and swap \n    a_i\n with \n    a_j\n and\n\n    b_i\n with \n    b_j\n. You have to perform the swap in both arrays. You are\nallowed to perform at most \n    10^4\n moves (possibly, zero). Can you make\nboth arrays sorted in a non-decreasing order at the end? If you can, print any\nsequence of moves that makes both arrays sorted. Input The first line contains\na single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of\ntestcases. The first line of each testcase contains a single integer \n    n\n\n(\n    2 \n    \u2264 n \n    \u2264 100\n) \u2014 the number of elements in both arrays. The\nsecond line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264\n    a_i \n    \u2264 n\n) \u2014 the first array. The third line contains \n    n\n integers\n\n    b_1, b_2, \n    \u2026, b_n\n (\n    1 \n    \u2264 b_i \n    \u2264 n\n) \u2014 the second array.\nOutput For each testcase, print the answer. If it's impossible to make both\narrays sorted in a non-decreasing order in at most \n    10^4\n moves, print -1.\nOtherwise, first, print the number of moves \n    k\n \n    (0 \n    \u2264 k \n    \u2264\n    10^4)\n. Then print \n    i\n and \n    j\n for each move \n    (1 \n    \u2264 i, j \n    \u2264\n    n\n; \n    i \n    \u2260 j)\n. If there are multiple answers, then print any of\nthem. You don't have to minimize the number of moves. Example Input 3 2 1 2 1\n2 2 2 1 1 2 4 2 3 1 2 2 3 2 3 Output 0 -1 3 3 1 3 2 4 3\n\n",
        "cf_contest_id": 1681,
        "cf_index": "C",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2\r\n1 2\r\n1 2\r\n2\r\n2 1\r\n1 2\r\n4\r\n2 3 1 2\r\n2 3 2 3\r\n",
                "0\r\n-1\r\n3 2 3 1 2 3 4\r\n"
            ]
        ],
        "private_cases": []
    }
]