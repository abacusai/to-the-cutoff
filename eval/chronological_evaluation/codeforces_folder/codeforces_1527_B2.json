[
    {
        "name": "Palindrome Game (hard version)",
        "description": "The only difference between the easy and hard versions is that the given\nstring \n    s\n in the easy version is initially a palindrome, this condition\nis not always true for the hard version. A palindrome is a string that reads\nthe same left to right and right to left. For example, \"101101\" is a\npalindrome, while \"0101\" is not. Alice and Bob are playing a game on a string\n\n    s\n of length \n    n\n consisting of the characters '0' and '1'. Both\nplayers take alternate turns with Alice going first. In each turn, the player\ncan perform one of the following operations: Choose any \n    i\n (\n    1 \n    \u2264 i\n    \n    \u2264 n\n), where \n    s[i] =\n '0' and change \n    s[i]\n to '1'. Pay 1\ndollar. Reverse the whole string, pay 0 dollars. This operation is only\nallowed if the string is currently not a palindrome, and the last operation\nwas not reverse. That is, if Alice reverses the string, then Bob can't reverse\nin the next move, and vice versa. Reversing a string means reordering its\nletters from the last to the first. For example, \"01001\" becomes \"10010\" after\nreversing. The game ends when every character of string becomes '1'. The\nplayer who spends minimum dollars till this point wins the game and it is a\ndraw if both spend equal dollars. If both players play optimally, output\nwhether Alice wins, Bob wins, or if it is a draw. Input The first line\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^3\n). Then \n    t\n\ntest cases follow. The first line of each test case contains a single integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^3\n). The second line of each test case\ncontains the string \n    s\n of length \n    n\n, consisting of the characters\n'0' and '1'. It is guaranteed that the string \n    s\n contains at least one\n'0'. Note that there is no limit on the sum of \n    n\n over test cases. Output\nFor each test case print a single word in a new line: \"ALICE\", if Alice will\nwin the game, \"BOB\", if Bob will win the game, \"DRAW\", if the game ends in a\ndraw. Example Input 3 3 110 2 00 4 1010 Output ALICE BOB ALICE Note In the\nfirst test case of example, in the \n    1\n-st move, Alice will use the\n\n    2\n-nd operation to reverse the string, since doing the \n    1\n-st\noperation will result in her loss anyway. This also forces Bob to use the\n\n    1\n-st operation. in the \n    2\n-nd move, Bob has to perform the\n\n    1\n-st operation, since the \n    2\n-nd operation cannot be performed twice\nin a row. All characters of the string are '1', game over. Alice spends\n\n    0\n dollars while Bob spends \n    1\n dollar. Hence, Alice wins.In the\nsecond test case of example, in the \n    1\n-st move Alice has to perform the\n\n    1\n-st operation, since the string is currently a palindrome. in the\n\n    2\n-nd move Bob reverses the string. in the \n    3\n-rd move Alice again\nhas to perform the \n    1\n-st operation. All characters of the string are '1',\ngame over. Alice spends \n    2\n dollars while Bob spends \n    0\n dollars.\nHence, Bob wins.\n\n",
        "cf_contest_id": 1527,
        "cf_index": "B2",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "games"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3\r\n110\r\n2\r\n00\r\n4\r\n1010\r\n",
                "ALICE\r\nBOB  \r\nALICE\r\n"
            ]
        ],
        "private_cases": []
    }
]