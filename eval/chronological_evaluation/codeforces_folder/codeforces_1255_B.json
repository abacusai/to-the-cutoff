[
    {
        "name": "Fridge Lockers",
        "description": "Hanh lives in a shared apartment. There are \n    n\n people (including Hanh)\nliving there, each has a private fridge. \n    n\n fridges are secured by\nseveral steel chains. Each steel chain connects two different fridges and is\nprotected by a digital lock. The owner of a fridge knows passcodes of all\nchains connected to it. A fridge can be open only if all chains connected to\nit are unlocked. For example, if a fridge has no chains connected to it at\nall, then any of \n    n\n people can open it. For exampe, in the picture there\nare \n    n=4\n people and \n    5\n chains. The first person knows passcodes of\ntwo chains: \n    1-4\n and \n    1-2\n. The fridge \n    1\n can be open by its\nowner (the person \n    1\n), also two people \n    2\n and \n    4\n (acting\ntogether) can open it. The weights of these fridges are \n    a_1, a_2, \n    \u2026,\n    a_n\n. To make a steel chain connecting fridges \n    u\n and \n    v\n, you have\nto pay \n    a_u + a_v\n dollars. Note that the landlord allows you to create\nmultiple chains connecting the same pair of fridges. Hanh's apartment landlord\nasks you to create exactly \n    m\n steel chains so that all fridges are\nprivate. A fridge is private if and only if, among \n    n\n people living in\nthe apartment, only the owner can open it (i.e. no other person acting alone\ncan do it). In other words, the fridge \n    i\n is not private if there exists\nthe person \n    j\n (\n    i \n     j\n) that the person \n    j\n can open the\nfridge \n    i\n. For example, in the picture all the fridges are private. On\nthe other hand, if there are \n    n=2\n fridges and only one chain (which\nconnects them) then both fridges are not private (both fridges can be open not\nonly by its owner but also by another person). Of course, the landlord wants\nto minimize the total cost of all steel chains to fulfill his request.\nDetermine whether there exists any way to make exactly \n    m\n chains, and if\nyes, output any solution that minimizes the total cost. Input Each test\ncontains multiple test cases. The first line contains the number of test cases\n\n    T\n (\n    1 \n    \u2264 T \n    \u2264 10\n). Then the descriptions of the test cases\nfollow. The first line of each test case contains two integers \n    n\n,\n\n    m\n (\n    2 \n    \u2264 n \n    \u2264 1000\n, \n    1 \n    \u2264 m \n    \u2264 n\n) \u2014 the number of\npeople living in Hanh's apartment and the number of steel chains that the\nlandlord requires, respectively. The second line of each test case contains\n\n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 10^4\n)\n\u2014 weights of all fridges. Output For each test case: If there is no solution,\nprint a single integer \n    -1\n. Otherwise, print a single integer \n    c\n \u2014\nthe minimum total cost. The \n    i\n-th of the next \n    m\n lines contains two\nintegers \n    u_i\n and \n    v_i\n (\n    1 \n    \u2264 u_i, v_i \n    \u2264 n\n, \n    u_i \n    \n    v_i\n), meaning that the \n    i\n-th steel chain connects fridges \n    u_i\n\nand \n    v_i\n. An arbitrary number of chains can be between a pair of fridges.\nIf there are multiple answers, print any. Example Input 3 4 4 1 1 1 1 3 1 1 2\n3 3 3 1 2 3 Output 8 1 2 4 3 3 2 4 1 -1 12 3 2 1 2 3 1\n\n",
        "cf_contest_id": 1255,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "graphs",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n4 4\r\n1 1 1 1\r\n3 1\r\n1 2 3\r\n3 3\r\n1 2 3\r\n",
                "8\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n-1\r\n12\r\n1 2\r\n2 3\r\n3 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n2 2\r\n4 3\r\n2 2\r\n13 13\r\n2 2\r\n9 11\r\n2 1\r\n14 5\r\n2 1\r\n13 2\r\n2 2\r\n4 5\r\n2 1\r\n11 14\r\n2 2\r\n15 3\r\n2 2\r\n12 10\r\n2 2\r\n13 12\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "10\r\n3 2\r\n3 6 1\r\n3 3\r\n9 0 2\r\n3 3\r\n8 8 2\r\n4 2\r\n9 0 0 1\r\n4 4\r\n5 3 0 2\r\n4 4\r\n2 8 6 0\r\n5 3\r\n7 3 8 9 8\r\n5 5\r\n6 3 9 6 7\r\n5 5\r\n1 0 5 9 8\r\n5 5\r\n1 5 4 6 1\r\n",
                "-1\r\n22\r\n1 2\r\n2 3\r\n3 1\r\n36\r\n1 2\r\n2 3\r\n3 1\r\n-1\r\n20\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n32\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n-1\r\n62\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 1\r\n46\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 1\r\n34\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 1\r\n"
            ],
            [
                "10\r\n10 10\r\n8 9 2 10 3 8 10 9 1 10\r\n10 10\r\n3 10 3 13 12 14 3 3 4 4\r\n10 5\r\n7 13 10 14 5 12 5 5 7 11\r\n10 10\r\n12 13 3 6 12 9 6 6 5 7\r\n10 10\r\n4 10 15 13 13 15 9 8 8 14\r\n10 10\r\n2 3 8 5 9 7 11 12 7 9\r\n10 10\r\n12 15 11 10 1 8 10 3 4 2\r\n10 5\r\n8 11 7 14 7 9 5 2 8 9\r\n10 10\r\n4 9 9 9 10 4 1 12 13 15\r\n10 10\r\n12 2 7 5 15 8 2 3 10 12\r\n",
                "140\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 1\r\n138\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 1\r\n-1\r\n158\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 1\r\n218\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 1\r\n146\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 1\r\n152\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 1\r\n-1\r\n172\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 1\r\n152\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 1\r\n"
            ]
        ]
    }
]