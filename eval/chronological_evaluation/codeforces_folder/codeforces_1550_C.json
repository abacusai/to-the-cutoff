[
    {
        "name": "Manhattan Subarrays",
        "description": "Suppose you have two points \n    p = (x_p, y_p)\n and \n    q = (x_q, y_q)\n.\nLet's denote the Manhattan distance between them as \n    d(p, q) = |x_p - x_q| +\n    |y_p - y_q|\n. Let's say that three points \n    p\n, \n    q\n, \n    r\n form a\nbad triple if \n    d(p, r) = d(p, q) + d(q, r)\n. Let's say that an array\n\n    b_1, b_2, \n    \u2026, b_m\n is good if it is impossible to choose three\ndistinct indices \n    i\n, \n    j\n, \n    k\n such that the points \n    (b_i,\n    i)\n, \n    (b_j, j)\n and \n    (b_k, k)\n form a bad triple. You are given an\narray \n    a_1, a_2, \n    \u2026, a_n\n. Calculate the number of good subarrays of\n\n    a\n. A subarray of the array \n    a\n is the array \n    a_l, a_l + 1,\n    \n    \u2026, a_r\n for some \n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 n\n. Note that, according\nto the definition, subarrays of length \n    1\n and \n    2\n are good. Input The\nfirst line contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 5000\n) \u2014 the\nnumber of test cases. The first line of each test case contains one integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the length of array \n    a\n.\nThe second line of each test case contains \n    n\n integers \n    a_1, a_2,\n    \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n). It's guaranteed that the sum\nof \n    n\n doesn't exceed \n    2 \n    \u00b7 10^5\n. Output For each test case,\nprint the number of good subarrays of array \n    a\n. Example Input 3 4 2 4 1 3\n5 6 9 1 9 6 2 13 37 Output 10 12 3 Note In the first test case, it can be\nproven that any subarray of \n    a\n is good. For example, subarray \n    [a_2,\n    a_3, a_4]\n is good since it contains only three elements and: \n    d((a_2, 2),\n    (a_4, 4)) = |4 - 3| + |2 - 4| = 3\n \n    <\n \n    d((a_2, 2), (a_3, 3)) +\n    d((a_3, 3), (a_4, 4)) = 3 + 1 + 2 + 1 = 7\n; \n    d((a_2, 2), (a_3, 3))\n\n\n    <\n \n    d((a_2, 2), (a_4, 4)) + d((a_4, 4), (a_3, 3))\n; \n    d((a_3, 3),\n    (a_4, 4))\n \n    <\n \n    d((a_3, 3), (a_2, 2)) + d((a_2, 2), (a_4, 4))\n; In\nthe second test case, for example, subarray \n    [a_1, a_2, a_3, a_4]\n is not\ngood, since it contains a bad triple \n    (a_1, 1)\n, \n    (a_2, 2)\n, \n    (a_4,\n    4)\n: \n    d((a_1, 1), (a_4, 4)) = |6 - 9| + |1 - 4| = 6\n; \n    d((a_1, 1),\n    (a_2, 2)) = |6 - 9| + |1 - 2| = 4\n; \n    d((a_2, 2), (a_4, 4)) = |9 - 9| + |2\n    - 4| = 2\n; So, \n    d((a_1, 1), (a_4, 4)) = d((a_1, 1), (a_2, 2)) + d((a_2,\n    2), (a_4, 4))\n.\n\n",
        "cf_contest_id": 1550,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "geometry",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n4\r\n2 4 1 3\r\n5\r\n6 9 1 9 6\r\n2\r\n13 37\r\n",
                "10\r\n12\r\n3\r\n"
            ]
        ],
        "private_cases": []
    }
]