[
    {
        "name": "Tree Construction",
        "description": "During the programming classes Vasya was assigned a difficult problem.\nHowever, he doesn't know how to code and was unable to find the solution in\nthe Internet, so he asks you to help. You are given a sequence \n    a\n,\nconsisting of \n    n\n distinct integers, that is used to construct the binary\nsearch tree. Below is the formal description of the construction process.\nFirst element \n    a_1\n becomes the root of the tree. Elements \n    a_2, a_3,\n    \n    \u2026, a_n\n are added one by one. To add element \n    a_i\n one needs to\ntraverse the tree starting from the root and using the following rules: The\npointer to the current node is set to the root. If \n    a_i\n is greater than\nthe value in the current node, then its right child becomes the current node.\nOtherwise, the left child of the current node becomes the new current node. If\nat some point there is no required child, the new node is created, it is\nassigned value \n    a_i\n and becomes the corresponding child of the current\nnode. Input The first line of the input contains a single integer \n    n\n\n(\n    2 \n    \u2264 n \n    \u2264 100\n     000\n) \u2014 the length of the sequence \n    a\n. The\nsecond line contains \n    n\n distinct integers \n    a_i\n (\n    1 \n    \u2264 a_i\n    \n    \u2264 10^9\n) \u2014 the sequence \n    a\n itself. Output Output \n    n - 1\n\nintegers. For all \n    i > 1\n print the value written in the node that is the\nparent of the node with value \n    a_i\n in it. Examples Input 3 1 2 3 Output 1\n2 Input 5 4 2 3 1 6 Output 4 2 2 4\n\n",
        "cf_contest_id": 675,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 2 3\r\n",
                "1 2\r\n"
            ],
            [
                "5\r\n4 2 3 1 6\r\n",
                "4 2 2 4\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 2\r\n",
                "1\r\n"
            ],
            [
                "10\r\n991309218 517452607 870021923 978357992 136426010 10601767 302627526 883615372 163475700 600546765\r\n",
                "991309218 517452607 870021923 517452607 136426010 136426010 978357992 302627526 870021923\r\n"
            ],
            [
                "2\r\n656402233 488475947\r\n",
                "656402233\r\n"
            ]
        ]
    }
]