[
    {
        "name": "String Searching",
        "description": "You are given an array \n    s\n consisting of \n    n\n different strings. Each\nstring consists of \n    m\n lowercase Latin letters. You have to respond to\n\n    q\n queries. Each query contains a string \n    t\n of length \n    m+1\n.\nCount the number of indices \n    i\n, such that the string \n    t\n can be\nobtained from the string \n    s_i\n, if it is allowed to insert one letter in\nan arbitrary position. Input The first line contains two integers \n    n\n and\n\n    m\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n; \n    1 \n    \u2264 m \n    \u2264 10\n) \u2014 the number of\nstrings in the array and the length of each string. The following \n    n\n\nlines contain strings \n    s_i\n. All of the given strings are different. The\nnext line contains a single integer \n    q\n (\n    1 \n    \u2264 q \n    \u2264 10^5\n) \u2014 the\nnumber of queries. The following \n    q\n lines contain query strings \n    t\n\nof length \n    m + 1\n. Output For each query, print the number of indices\n\n    i\n, such that a string from the query can be obtained from the string\n\n    s_i\n, if it is allowed to insert one letter in an arbitrary position.\nExamples Input 2 1 a c 4 aa ca mm cf Output 1 2 0 1 Input 6 3 dba abd cbb ada\nadd bdd 5 ccbb abdd adba bada dddd Output 1 3 2 1 0 Note Explanation of the\nfirst test of the example: the string a can be transformed into aa by\ninserting one letter; both strings a and c can be transformed into ca by\ninserting one letter; neither a nor c can be transformed into mm by inserting\none letter; c can be transformed into cf by inserting one letter.\n\n",
        "cf_contest_id": 1533,
        "cf_index": "D",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "hashing"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 1\r\na\r\nc\r\n4\r\naa\r\nca\r\nmm\r\ncf\r\n",
                "1\r\n2\r\n0\r\n1\r\n"
            ],
            [
                "6 3\r\ndba\r\nabd\r\ncbb\r\nada\r\nadd\r\nbdd\r\n5\r\nccbb\r\nabdd\r\nadba\r\nbada\r\ndddd\r\n",
                "1\r\n3\r\n2\r\n1\r\n0\r\n"
            ]
        ],
        "private_cases": []
    }
]