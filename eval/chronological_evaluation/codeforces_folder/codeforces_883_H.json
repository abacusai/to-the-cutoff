[
    {
        "name": "Palindromic Cut",
        "description": "Kolya has a string s of length n consisting of lowercase and uppercase Latin\nletters and digits. He wants to rearrange the symbols in s and cut it into the\nminimum number of parts so that each part is a palindrome and all parts have\nthe same lengths. A palindrome is a string which reads the same backward as\nforward, such as madam or racecar. Your task is to help Kolya and determine\nthe minimum number of palindromes of equal lengths to cut s into, if it is\nallowed to rearrange letters in s before cuttings. Input The first line\ncontains an integer n (1 \u2264 n \u2264 4\u00b710^5) \u2014 the length of string s. The second\nline contains a string s of length n consisting of lowercase and uppercase\nLatin letters and digits. Output Print to the first line an integer k \u2014\nminimum number of palindromes into which you can cut a given string. Print to\nthe second line k strings \u2014 the palindromes themselves. Separate them by a\nspace. You are allowed to print palindromes in arbitrary order. All of them\nshould have the same length. Examples Input 6 aabaac Output 2 aba aca Input 8\n0rTrT022 Output 1 02TrrT20 Input 2 aA Output 2 a A\n\n",
        "cf_contest_id": 883,
        "cf_index": "H",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\naabaac\r\n",
                "2\r\naba aca\r\n"
            ],
            [
                "8\r\n0rTrT022\r\n",
                "1\r\n2Tr00rT2\r\n"
            ],
            [
                "2\r\naA\r\n",
                "2\r\na A\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\ns\r\n",
                "1\r\ns\r\n"
            ],
            [
                "10\r\n6IIC6CCIIC\r\n",
                "1\r\nCCII66IICC\r\n"
            ],
            [
                "20\r\nqqqoqqoqMoqMMMqqMMqM\r\n",
                "4\r\noqoqo MqMqM MqqqM MqqqM\r\n"
            ],
            [
                "45\r\nf3409ufEFU32rfsFJSKDFJ234234ASkjffjsdfsdfsj33\r\n",
                "15\r\nfff f4f f0f 393 3u3 3E3 4F4 FUF 222 srs sKs JDJ SAS jkj djd\r\n"
            ],
            [
                "30\r\n8M8MMMMMlrMlMMrMMllMMrllMMrMrl\r\n",
                "2\r\nrlMMMM8l8MMMMlr rllMMMMrMMMMllr\r\n"
            ],
            [
                "40\r\nTddTddddTddddddTdddTdddddddddddddddddddd\r\n",
                "8\r\nddTdd ddddd ddTdd ddTdd ddTdd ddTdd ddddd ddddd\r\n"
            ],
            [
                "45\r\nRRNRRRRRRRRRNRRRRRRRRRRRRRRNRRRRRRRRRRRNRRRRR\r\n",
                "1\r\nNNRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRNN\r\n"
            ],
            [
                "115\r\nz9c2f5fxz9z999c9z999f9f9x99559f5Vf955c59E9ccz5fcc99xfzcEx29xuE55f995u592xE58Exc9zVff885u9cf59cV5xc999fx5x55u992fx9x\r\n",
                "5\r\nEx55f2c999zzz999c2f55xE Ex55f2c999z5z999c2f55xE ux55ffc999zVz999cff55xu uxx5ffc9999E9999cff5xxu 8Vx55fcc9998999ccf55xV8\r\n"
            ],
            [
                "1\r\nz\r\n",
                "1\r\nz\r\n"
            ],
            [
                "2\r\nff\r\n",
                "1\r\nff\r\n"
            ],
            [
                "2\r\n9E\r\n",
                "2\r\n9 E\r\n"
            ],
            [
                "3\r\nRRR\r\n",
                "1\r\nRRR\r\n"
            ],
            [
                "3\r\n001\r\n",
                "1\r\n010\r\n"
            ],
            [
                "3\r\n011\r\n",
                "1\r\n101\r\n"
            ],
            [
                "3\r\n101\r\n",
                "1\r\n101\r\n"
            ],
            [
                "3\r\n110\r\n",
                "1\r\n101\r\n"
            ],
            [
                "3\r\n111\r\n",
                "1\r\n111\r\n"
            ],
            [
                "3\r\n010\r\n",
                "1\r\n010\r\n"
            ],
            [
                "3\r\n100\r\n",
                "1\r\n010\r\n"
            ],
            [
                "1\r\na\r\n",
                "1\r\na\r\n"
            ],
            [
                "1\r\nA\r\n",
                "1\r\nA\r\n"
            ],
            [
                "1\r\nZ\r\n",
                "1\r\nZ\r\n"
            ],
            [
                "1\r\n0\r\n",
                "1\r\n0\r\n"
            ],
            [
                "1\r\n9\r\n",
                "1\r\n9\r\n"
            ]
        ]
    }
]