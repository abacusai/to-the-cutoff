[
    {
        "name": "Send Boxes to Alice (Easy Version)",
        "description": "This is the easier version of the problem. In this version, \n    1 \n    \u2264 n \n    \u2264\n    10^5\n and \n    0 \n    \u2264 a_i \n    \u2264 1\n. You can hack this problem only if you\nsolve and lock both problems. Christmas is coming, and our protagonist, Bob,\nis preparing a spectacular present for his long-time best friend Alice. This\nyear, he decides to prepare \n    n\n boxes of chocolate, numbered from \n    1\n\nto \n    n\n. Initially, the \n    i\n-th box contains \n    a_i\n chocolate pieces.\nSince Bob is a typical nice guy, he will not send Alice \n    n\n empty boxes.\nIn other words, at least one of \n    a_1, a_2, \n    \u2026, a_n\n is positive.\nSince Alice dislikes coprime sets, she will be happy only if there exists some\ninteger \n    k > 1\n such that the number of pieces in each box is divisible by\n\n    k\n. Note that Alice won't mind if there exists some empty boxes. Charlie,\nAlice's boyfriend, also is Bob's second best friend, so he decides to help Bob\nby rearranging the chocolate pieces. In one second, Charlie can pick up a\npiece in box \n    i\n and put it into either box \n    i-1\n or box \n    i+1\n (if\nsuch boxes exist). Of course, he wants to help his friend as quickly as\npossible. Therefore, he asks you to calculate the minimum number of seconds he\nwould need to make Alice happy. Input The first line contains a single integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the number of chocolate boxes. The\nsecond line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0\n    \n    \u2264 a_i \n    \u2264 1\n) \u2014 the number of chocolate pieces in the \n    i\n-th box.\nIt is guaranteed that at least one of \n    a_1, a_2, \n    \u2026, a_n\n is\npositive. Output If there is no way for Charlie to make Alice happy, print\n\n    -1\n. Otherwise, print a single integer \n    x\n \u2014 the minimum number of\nseconds for Charlie to help Bob make Alice happy. Examples Input 3 1 0 1\nOutput 2 Input 1 1 Output -1\n\n",
        "cf_contest_id": 1254,
        "cf_index": "B1",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory",
            "ternary search",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 0 1\r\n",
                "2\r\n"
            ],
            [
                "1\r\n1\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n0 0 1\r\n",
                "-1\r\n"
            ],
            [
                "20\r\n0 0 1 0 0 0 0 1 1 0 0 1 0 1 0 0 0 0 1 0\r\n",
                "13\r\n"
            ],
            [
                "100\r\n1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 1 1 0 0 1 0 0 1 0 1 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 1 1 1 1 0 1 1 0 0 1 0\r\n",
                "56\r\n"
            ],
            [
                "100\r\n1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "68\r\n"
            ],
            [
                "100\r\n1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1\r\n",
                "53\r\n"
            ],
            [
                "100\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0\r\n",
                "47\r\n"
            ],
            [
                "100\r\n1 1 0 1 1 1 1 0 1 0 0 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 0 0 1 0 1 0 1 1 0 0 1 0 0 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 0 0 1 0 1 1 1 1\r\n",
                "1908\r\n"
            ],
            [
                "6\r\n1 1 0 0 0 1\r\n",
                "5\r\n"
            ]
        ]
    }
]