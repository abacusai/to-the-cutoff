[
    {
        "name": "Crop Squares",
        "description": "This is an interactive problem. Farmer Stanley grows corn on a rectangular\nfield of size \n    n \n    \u00d7 m\n meters with corners in points \n    (0, 0)\n,\n\n    (0, m)\n, \n    (n, 0)\n, \n    (n, m)\n. This year the harvest was plentiful\nand corn covered the whole field. The night before harvest aliens arrived and\npoisoned the corn in a single \n    1 \n    \u00d7 1\n square with sides parallel to\nfield borders. The corn inside the square must not be eaten, but you cannot\ndistinguish it from ordinary corn by sight. Stanley can only collect a sample\nof corn from an arbitrary polygon and bring it to the laboratory, where it\nwill be analyzed and Stanley will be told the amount of corn in the sample\nthat was poisoned. Since the harvest will soon deteriorate, such a study can\nbe carried out no more than \n    5\n times. More formally, it is allowed to\nmake no more than \n    5\n queries, each of them calculates the area of\nintersection of a chosen polygon with a square of poisoned corn. It is\nnecessary to find out the coordinates of the lower-left corner of the drawn\nsquare (the vertex of the square with the smallest \n    x\n and \n    y\n\ncoordinates). Input First line contains two integers \n    n\n and \n    m\n (\n    1\n    \n    \u2264 n, m \n    \u2264 100\n) \u2014 field sizes. Interaction In order to query the area\nof intersection of a polygon with \n    k\n (\n    3 \n    \u2264 k \n    \u2264 1000\n)\nvertices at points with coordinates \n    (x_1, y_1),\n     \n    \u2026 ,\n     (x_k,\n    y_k)\n with a square of poisoned corn print \n    k+1\n lines. In the first of\nthese lines print \"? k\". In the \n    i\n-th of the next \n    k\n lines print two\nreal numbers \n    x_i\n and \n    y_i\n (\n    |x_i|, |y_i| \n    \u2264 10^4\n) with at\nmost \n    15\n digits after decimal place. The polygon must have strictly\npositive area and contain no self-intersections. In response to this query you\nwill receive a real number \n    s\n (\n    0 \n    \u2264 s \n    \u2264 1\n) with \n    15\n\ndigits after decimal place \u2014 the area of intersection of the square with the\ngiven polygon. If the polygon is invalid, there is no guarantee on the valid\nresponse. When you have identified the drawn square, print on a separate line\n\"! x y\", where \n    x\n and \n    y\n are real numbers with at most \n    15\n\ndigits after decimal place representing the coordinates of its lower-left\ncorner (\n    0 \n    \u2264 x \n    \u2264 n - 1\n, \n    0 \n    \u2264 y \n    \u2264 m - 1\n), and then\nyou have to terminate your program. Your answer will be considered correct if\nits absolute or relative error on both coordinates does not exceed\n\n    10^-6\n. Formally let your answer be \n    a\n, jury answer be \n    b\n.\nYour answer will be considered correct if \n    |a-b|/max(1,|b|)\n    \u2264\n    10^-6\n. After printing a query do not forget to output end of line and\nflush the output. Otherwise, you will get Idleness limit exceeded. To do this,\nuse: fflush(stdout) or cout.flush() in C++; System.out.flush() in Java;\nflush(output) in Pascal; stdout.flush() in Python; see documentation for other\nlanguages. Hacks To make a hack, use the following test format. The first line\nof the input should contain two integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n,m\n    \n    \u2264 100\n) \u2014 field sizes. The second line should contain two real numbers\n\n    x\n (\n    0 \n    \u2264 x \n    \u2264 n - 1\n) and \n    y\n (\n    0 \n    \u2264 y \n    \u2264 m -\n    1\n) \u2014 coordinates of the lower-left corner of the square of poisoned corn.\nExample Input 3 3 0.5 0.5 Output ? 4 0 0 2 0 2 3 0 3 ? 4 0 0 0 1 3 1 3 0 ! 1.5\n0.5 Note In the first test from the statement, the aliens poisoned a square of\ncorn with vertices at points with coordinates \n    (1.5, 0.5)\n, \n    (1.5,\n    1.5)\n, \n    (2.5, 1.5)\n, \n    (2.5, 0.5)\n. In the picture, it is red, the\npolygon selected in the query is blue, and their intersection is green.\nPicture for the first query: Picture for the second query:\n\n",
        "cf_contest_id": 1715,
        "cf_index": "F",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "geometry",
            "interactive",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\n1.5 0.5\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 3\r\n1 1\r\n",
                "2\r\n"
            ],
            [
                "10 10\r\n0 0\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n99 99\r\n",
                "2\r\n"
            ],
            [
                "5 5\r\n1.79 2.39\r\n",
                "2\r\n"
            ],
            [
                "1 5\r\n0 1.80719\r\n",
                "2\r\n"
            ],
            [
                "5 1\r\n0.625555 0\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n72.1578 39.9528\r\n",
                "2\r\n"
            ],
            [
                "57 79\r\n2.94586 52.8717\r\n",
                "2\r\n"
            ],
            [
                "1 1\r\n0 0\r\n",
                "2\r\n"
            ],
            [
                "2 2\r\n0.89635 0.770034\r\n",
                "2\r\n"
            ],
            [
                "3 3\r\n1.79288 1.20098\r\n",
                "2\r\n"
            ],
            [
                "4 4\r\n2.68959 1.29283\r\n",
                "2\r\n"
            ],
            [
                "5 5\r\n3.58647 1.0456\r\n",
                "2\r\n"
            ],
            [
                "6 6\r\n4.48354 0.45928\r\n",
                "2\r\n"
            ],
            [
                "7 7\r\n5.38079 5.53387\r\n",
                "2\r\n"
            ],
            [
                "8 8\r\n6.27821 5.26937\r\n",
                "2\r\n"
            ],
            [
                "9 9\r\n7.17581 4.66578\r\n",
                "2\r\n"
            ],
            [
                "10 10\r\n1.94817 1.52144\r\n",
                "2\r\n"
            ],
            [
                "11 11\r\n2.16552 9.99504\r\n",
                "2\r\n"
            ],
            [
                "12 12\r\n2.38306 9.12956\r\n",
                "2\r\n"
            ],
            [
                "13 13\r\n2.60078 7.92498\r\n",
                "2\r\n"
            ],
            [
                "14 14\r\n2.81868 6.38132\r\n",
                "2\r\n"
            ],
            [
                "15 15\r\n3.03675 4.49857\r\n",
                "2\r\n"
            ],
            [
                "16 16\r\n3.255 2.27673\r\n",
                "2\r\n"
            ],
            [
                "17 17\r\n3.47344 15.7158\r\n",
                "2\r\n"
            ],
            [
                "18 18\r\n3.69205 13.8158\r\n",
                "2\r\n"
            ],
            [
                "19 19\r\n3.91084 11.5767\r\n",
                "2\r\n"
            ],
            [
                "20 20\r\n18.0012 6.99113\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n9.52774 1.91166\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n9.52945 37.6903\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n9.53115 54.469\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n9.53285 71.2476\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n9.53455 88.0263\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n24.4161 5.69086\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n24.4178 22.4695\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n24.4195 58.2482\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n24.4212 75.0268\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n24.4229 91.8055\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n58.3045 9.47007\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n58.3062 26.2487\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n58.3079 43.0274\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n58.3096 78.806\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n58.3113 95.5847\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n73.1929 13.2493\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n73.1946 30.0279\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n73.1963 46.8066\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n73.198 63.5852\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n73.1997 80.3639\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n88.0813 17.0285\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n88.083 33.8071\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n88.0847 50.5858\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n88.0864 67.3644\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n88.0881 84.1431\r\n",
                "2\r\n"
            ],
            [
                "20 20\r\n18.754 7.27417\r\n",
                "2\r\n"
            ],
            [
                "20 40\r\n8.5308 30.4458\r\n",
                "2\r\n"
            ],
            [
                "20 60\r\n17.3076 10.5299\r\n",
                "2\r\n"
            ],
            [
                "20 80\r\n7.08435 45.5264\r\n",
                "2\r\n"
            ],
            [
                "20 100\r\n11.0861 21.0932\r\n",
                "2\r\n"
            ],
            [
                "40 20\r\n15.0097 17.6412\r\n",
                "2\r\n"
            ],
            [
                "40 40\r\n33.0252 12.7254\r\n",
                "2\r\n"
            ],
            [
                "40 60\r\n12.0407 42.7221\r\n",
                "2\r\n"
            ],
            [
                "40 80\r\n30.0562 9.63121\r\n",
                "2\r\n"
            ],
            [
                "40 100\r\n17.2726 64.2018\r\n",
                "2\r\n"
            ],
            [
                "60 20\r\n46.1779 9.00813\r\n",
                "2\r\n"
            ],
            [
                "60 40\r\n14.4321 34.005\r\n",
                "2\r\n"
            ],
            [
                "60 60\r\n41.6863 15.9143\r\n",
                "2\r\n"
            ],
            [
                "60 80\r\n9.94046 52.736\r\n",
                "2\r\n"
            ],
            [
                "60 100\r\n17.8352 8.31032\r\n",
                "2\r\n"
            ],
            [
                "80 20\r\n14.2584 0.375104\r\n",
                "2\r\n"
            ],
            [
                "80 40\r\n50.7513 16.2846\r\n",
                "2\r\n"
            ],
            [
                "80 60\r\n8.24425 48.1065\r\n",
                "2\r\n"
            ],
            [
                "80 80\r\n44.7372 16.8408\r\n",
                "2\r\n"
            ],
            [
                "80 100\r\n12.7741 51.4189\r\n",
                "2\r\n"
            ],
            [
                "100 20\r\n2.2437 15.3185\r\n",
                "2\r\n"
            ],
            [
                "100 40\r\n47.9753 7.95791\r\n",
                "2\r\n"
            ],
            [
                "100 60\r\n93.7069 35.5097\r\n",
                "2\r\n"
            ],
            [
                "100 80\r\n40.4386 78.974\r\n",
                "2\r\n"
            ],
            [
                "100 100\r\n44.6629 56.8385\r\n",
                "2\r\n"
            ],
            [
                "1 50\r\n0 20.0602\r\n",
                "2\r\n"
            ],
            [
                "50 1\r\n3.27047 0\r\n",
                "2\r\n"
            ],
            [
                "1 100\r\n0 29.6149\r\n",
                "2\r\n"
            ],
            [
                "100 1\r\n96.4649 0\r\n",
                "2\r\n"
            ]
        ]
    }
]