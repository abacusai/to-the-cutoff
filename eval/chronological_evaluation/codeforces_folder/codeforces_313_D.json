[
    {
        "name": "Ilya and Roads",
        "description": "Everything is great about Ilya's city, except the roads. The thing is, the\nonly ZooVille road is represented as n holes in a row. We will consider the\nholes numbered from 1 to n, from left to right. Ilya is really keep on helping\nhis city. So, he wants to fix at least k holes (perharps he can fix more) on a\nsingle ZooVille road. The city has m building companies, the i-th company\nneeds ci money units to fix a road segment containing holes with numbers of at\nleast li and at most ri. The companies in ZooVille are very greedy, so, if\nthey fix a segment containing some already fixed holes, they do not decrease\nthe price for fixing the segment. Determine the minimum money Ilya will need\nto fix at least k holes. Input The first line contains three integers n, m, k\n(1 \u2264 n \u2264 300, 1 \u2264 m \u2264 10^5, 1 \u2264 k \u2264 n). The next m lines contain the\ncompanies' description. The i-th line contains three integers li, ri, ci (1 \u2264\nli \u2264 ri \u2264 n, 1 \u2264 ci \u2264 10^9). Output Print a single integer \u2014 the minimum money\nIlya needs to fix at least k holes. If it is impossible to fix at least k\nholes, print -1. Please, do not use the \nintegers in \u0421++. It is preferred to use the cin, cout streams or the \nspecifier. Examples Input 10 4 6 7 9 11 6 9 13 7 7 7 3 5 6 Output 17 Input 10\n7 1 3 4 15 8 9 8 5 6 8 9 10 6 1 4 2 1 4 10 8 10 13 Output 2 Input 10 1 9 5 10\n14 Output -1\n\n",
        "cf_contest_id": 313,
        "cf_index": "D",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "dp"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10 4 6\r\n7 9 11\r\n6 9 13\r\n7 7 7\r\n3 5 6\r\n",
                "17\r\n"
            ],
            [
                "10 7 1\r\n3 4 15\r\n8 9 8\r\n5 6 8\r\n9 10 6\r\n1 4 2\r\n1 4 10\r\n8 10 13\r\n",
                "2\r\n"
            ],
            [
                "10 1 9\r\n5 10 14\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 6 9\r\n6 8 7\r\n2 8 11\r\n2 6 10\r\n8 10 9\r\n2 5 8\r\n2 3 8\r\n",
                "20\r\n"
            ],
            [
                "10 6 8\r\n3 6 7\r\n1 4 3\r\n2 7 10\r\n4 7 4\r\n7 10 15\r\n4 7 7\r\n",
                "18\r\n"
            ],
            [
                "10 4 10\r\n1 1 11\r\n7 7 15\r\n2 3 11\r\n2 8 6\r\n",
                "-1\r\n"
            ],
            [
                "10 3 7\r\n4 6 6\r\n5 7 1\r\n2 10 15\r\n",
                "15\r\n"
            ],
            [
                "10 5 3\r\n2 10 10\r\n3 6 10\r\n5 5 7\r\n2 7 4\r\n2 7 6\r\n",
                "4\r\n"
            ],
            [
                "10 5 4\r\n2 8 3\r\n4 7 15\r\n1 1 13\r\n7 9 10\r\n10 10 2\r\n",
                "3\r\n"
            ],
            [
                "1 1 1\r\n1 1 1\r\n",
                "1\r\n"
            ],
            [
                "10 2 6\r\n1 7 1123\r\n2 10 33\r\n",
                "33\r\n"
            ],
            [
                "5 2 5\r\n1 3 1\r\n2 5 1\r\n",
                "2\r\n"
            ],
            [
                "1 3 1\r\n1 1 5\r\n1 1 3\r\n1 1 12\r\n",
                "3\r\n"
            ],
            [
                "3 3 3\r\n1 2 1000000000\r\n2 3 1000000000\r\n1 1 1000000000\r\n",
                "2000000000\r\n"
            ]
        ]
    }
]