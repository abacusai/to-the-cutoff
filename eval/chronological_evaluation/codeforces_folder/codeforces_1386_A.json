[
    {
        "name": "Colors",
        "description": "Linda likes to change her hair color from time to time, and would be pleased\nif her boyfriend Archie would notice the difference between the previous and\nthe new color. Archie always comments on Linda's hair color if and only if he\nnotices a difference \u2014 so Linda always knows whether Archie has spotted the\ndifference or not. There is a new hair dye series in the market where all\navailable colors are numbered by integers from \n    1\n to \n    N\n such that a\nsmaller difference of the numerical values also means less visual difference.\nLinda assumes that for these series there should be some critical color\ndifference \n    C\n (\n    1 \n    \u2264 C \n    \u2264 N\n) for which Archie will notice\ncolor difference between the current color\n\n    color_\n    new\n and the previous color\n\n    color_\n    prev\n if\n\n    |\n    color_\n    new -\n    \n    color_\n    prev\n    | \n    \u2265 C\n and will not if\n\n    |\n    color_\n    new -\n    \n    color_\n    prev\n    | < C\n. Now she has bought \n    N\n\nsets of hair dye from the new series \u2014 one for each of the colors from \n    1\n\nto \n    N\n, and is ready to set up an experiment. Linda will change her hair\ncolor on a regular basis and will observe Archie's reaction \u2014 whether he will\nnotice the color change or not. Since for the proper dye each set should be\nused completely, each hair color can be obtained no more than once. Before the\nexperiment, Linda was using a dye from a different series which is not\ncompatible with the new one, so for the clearness of the experiment Archie's\nreaction to the first used color is meaningless. Her aim is to find the\nprecise value of \n    C\n in a limited number of dyes. Write a program which\nfinds the value of \n    C\n by experimenting with the given \n    N\n colors and\nobserving Archie's reactions to color changes. Interaction This is an\ninteractive task. In the beginning you are given a single integer \n    T\n\n(\n    1 \n    \u2264 T \n    \u2264 100\n), the number of cases in the test. For each test\ncase, the input first contains a single integer \u2014 the value of \n    N\n (\n    1 <\n    N \n    \u2264 10^18\n). The value of \n    C\n is kept secret by the grading\nsystem. Then your program should make queries writing output in the following\nformat: \"? \n    P\n\", where \n    P\n is an integer (\n    1 \n    \u2264 P \n    \u2264 N\n)\ndenoting the next color used. For each query the grading system gives an\nanswer in the next line of the input. The answer is \n    1\n if Archie notices\nthe color difference between the last two colors and \n    0\n otherwise. No two\nqueries should have the same \n    P\n value. When your program determines\n\n    C\n, it should output its value in the following format: \"= \n    C\n\". The\ngrading system will not respond to this output and will proceed with the next\ntest case. Your program may use at most 64 queries \"?\" for each test case to\nfind the correct value of \n    C\n. To establish proper communication between\nyour program and the grading system, you should flush the output stream after\neach query. \n    \n\n    [         ; Language         ;  Command; ; ;         ;         ;      C++         ;         ;         ;         ;         ; ; ;         ;     Java         ;         ; ; ;         ;   Python         ;         ;  ]\n\n    \n Flush commands Note that\nstd::endl writes a newline and flushes the stream. It is possible to receive\nan \"Output isn't correct\" outcome even after printing a correct answer, if\ntask constraints were violated during the communication. Violating the\ncommunication protocol itself may result in an \"Execution killed\" outcome.\nSubmitting user tests requires specifying an input file with the testcase\nparameters. The format of the input file is \"\n    T\n\" in the first line, and\nthen \"\n    N\n \n    C\n\" on a single line for each of the \n    T\n cases. Scoring\nSubtasks: (9 points) \n    N \n    \u2264 64\n (13 points) \n    N \n    \u2264 125\n (21\npoints) \n    N \n    \u2264 1000\n (24 points) \n    N \n    \u2264 10^9\n (33 points) No\nfurther constraints. Example Input 1 7 1 1 0 0 1 Output ? 2 ? 7 ? 4 ? 1 ? 5 =\n4 Note Comments to the example input line by line: \n    N = 7\n. Answer to the\nfirst query is meaningless (can also be \n    0\n). \n    C \n    \u2264 5\n. \n    3 < C\n    \n    \u2264 5\n. It would be wise to check difference \n    4\n. However, this can\nnot be done in the next query since \n    4 + 4 = 8\n and \n    4 - 4 = 0\n both\nare outside the allowed interval \n    1 \n    \u2264 P \n    \u2264 7\n. \n    3 < C \n    \u2264\n    5\n. \n    3 < C \n    \u2264 4\n. Therefore, \n    C = 4\n.\n\n",
        "cf_contest_id": 1386,
        "cf_index": "A",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "binary search",
            "constructive algorithms",
            "interactive"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n7 4\r\n",
                "1\r\n? 3\r\n? 6\r\n? 1\r\n? 5\r\n= 4\r\n"
            ]
        ],
        "private_cases": []
    }
]