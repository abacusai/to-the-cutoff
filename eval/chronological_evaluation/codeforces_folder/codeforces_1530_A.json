[
    {
        "name": "Binary Decimal",
        "description": "Let's call a number a binary decimal if it's a positive integer and all digits\nin its decimal notation are either \n    0\n or \n    1\n. For example,\n\n    1\n     010\n     111\n is a binary decimal, while \n    10\n     201\n and\n\n    787\n     788\n are not. Given a number \n    n\n, you are asked to represent\n\n    n\n as a sum of some (not necessarily distinct) binary decimals. Compute\nthe smallest number of binary decimals required for that. Input The first line\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n), denoting the\nnumber of test cases. The only line of each test case contains a single\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^9\n), denoting the number to be\nrepresented. Output For each test case, output the smallest number of binary\ndecimals required to represent \n    n\n as a sum. Example Input 3 121 5\n1000000000 Output 2 5 1 Note In the first test case, \n    121\n can be\nrepresented as \n    121 = 110 + 11\n or \n    121 = 111 + 10\n. In the second\ntest case, \n    5\n can be represented as \n    5 = 1 + 1 + 1 + 1 + 1\n. In the\nthird test case, \n    1\n     000\n     000\n     000\n is a binary decimal itself, thus\nthe answer is \n    1\n.\n\n",
        "cf_contest_id": 1530,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n121\r\n5\r\n1000000000\r\n",
                "2 5 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n",
                "1\r\n"
            ]
        ]
    }
]