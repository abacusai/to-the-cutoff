[
    {
        "name": "Doremy's Perfect DS Class (Medium Version)",
        "description": "The only difference between this problem and the other two versions is the\nmaximum number of queries. In this version, you are allowed to ask at most\n\n    25\n queries. You can make hacks only if all versions of the\nproblem are solved. This is an interactive problem. \"Everybody! Doremy's\nPerfect Data Structure Class is about to start! Come and do your best if you\nwant to have as much IQ as me!\" In today's Data Structure class, Doremy is\nteaching everyone a powerful data structure \u2014 Doremy tree! Now she gives you a\nquiz to prove that you are paying attention in class. Given an array \n    a\n\nof length \n    m\n, Doremy tree supports the query \n    Q(l,r,k)\n, where \n    1\n    \n    \u2264 l \n    \u2264 r \n    \u2264 m\n and \n    1 \n    \u2264 k \n    \u2264 m\n, which returns the\nnumber of distinct integers in the array \n    [\n    \u230a\n    a_l/k\n    \u230b, \n    \u230a\n    a_l+1/k\n    \u230b, \n    \u2026,\n    \n    \u230a\n    a_r/k\n    \u230b\n    ]\n. Doremy has a secret\npermutation \n    p\n of integers from \n    1\n to \n    n\n. You can make queries,\nin one query, you give \n    3\n integers \n    l,r,k\n (\n    1 \n    \u2264 l \n    \u2264 r\n    \n    \u2264 n\n, \n    1 \n    \u2264 k \n    \u2264 n\n) and receive the value of\n\n    Q(l,r,k)\n for the array \n    p\n. Can you find the index \n    y\n (\n    1\n    \n    \u2264 y \n    \u2264 n\n) such that \n    p_y=1\n in at most \n    25\n\nqueries? Note that the permutation \n    p\n is fixed before any queries are\nmade. Interaction You begin the interaction by reading an integer \n    n\n\n(\n    3 \n    \u2264 n \n    \u2264 1024\n) in the first line \u2014 the length of the\npermutation. To make a query, you should output \"? \n    l\n     r\n     k\n\" (\n    1\n    \n    \u2264 l \n    \u2264 r \n    \u2264 n\n, \n    1 \n    \u2264 k \n    \u2264 n\n) in a separate line.\nAfter each query, you should read an integer \n    x\n \u2014 the value of\n\n    Q(l,r,k)\n for \n    p\n. In this version of the problem, you can make at\nmost \n    25\n such queries.To give the answer, you should output \"! \n    y\n\"\n(\n    1 \n    \u2264 y \n    \u2264 n\n) in a separate line, where \n    p_y=1\n.After\nprinting a query or the answer, do not forget to output the end of line and\nflush the output. Otherwise, you will get Idleness limit exceeded. To do this,\nuse: fflush(stdout) or cout.flush() in C++; System.out.flush() in Java;\nflush(output) in Pascal; stdout.flush() in Python; see documentation for other\nlanguages. Hacks Format The first line of the hack contains an integer \n    n\n\n(\n    3 \n    \u2264 n \n    \u2264 1024\n) \u2014 the length of the permutation. The second line\nof the hack contains \n    n\n distinct integers \n    p_1,p_2,\n    \u2026,p_n\n\n(\n    1 \n    \u2264 p_i\n    \u2264 n\n) \u2014 the permutation. Example Input 5 2 2 1 3 Output ?\n1 3 4 ? 3 5 3 ? 3 4 5 ? 3 5 2 ! 4 Note The permutation in the example is\n\n    [3,5,2,1,4]\n. The input and output for example illustrate possible\ninteraction on that test (empty lines are inserted only for clarity). In this\ninteraction process: For the first query,\n\n    \u230a\n    3/4\n    \u230b=0,\n    \u230a\n    5/4\n    \u230b=1,\n    \u230a\n    2/4\n    \u230b=0\n,\nso the answer is \n    2\n. For the second query,\n\n    \u230a\n    2/3\n    \u230b=0,\n    \u230a\n    1/3\n    \u230b=0,\n    \u230a\n    4/3\n    \u230b=1\n,\nso the answer is still \n    2\n. For the third query,\n\n    \u230a\n    2/5\n    \u230b=0,\n    \u230a\n    1/5\n    \u230b=0\n, so\nthe answer is \n    1\n. For the fourth query,\n\n    \u230a\n    2/2\n    \u230b=1,\n    \u230a\n    1/2\n    \u230b=0,\n    \u230a\n    4/2\n    \u230b=2\n,\nso the answer is \n    3\n. The correct answer is got after \n    4\n queries, so\nthis process will be judged correct.\n\n",
        "cf_contest_id": 1764,
        "cf_index": "G2",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "interactive"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3 5 2 1 4\r\n",
                "6\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n3 2 1\r\n",
                "4\r\n"
            ],
            [
                "23\r\n23 15 3 17 8 18 5 4 12 11 16 10 6 2 19 22 9 1 13 7 20 14 21\r\n",
                "8\r\n"
            ],
            [
                "114\r\n113 1 111 63 101 51 68 81 11 105 28 36 7 67 4 14 65 3 22 71 39 99 104 78 40 98 45 66 10 92 64 46 69 30 112 42 27 49 19 32 34 43 93 85 55 74 41 72 8 79 109 100 88 23 107 62 53 5 89 87 9 18 17 31 50 33 95 37 57 48 76 24 26 82 103 35 77 47 60 61 75 86 110 94 70 16 13 58 84 80 59 52 56 114 44 90 102 83 91 25 12 29 108 20 73 2 21 106 15 38 6 97 54 96\r\n",
                "15\r\n"
            ],
            [
                "114\r\n113 114 1 111 63 101 51 68 81 11 105 28 36 7 67 4 14 65 3 22 71 39 99 104 78 40 98 45 66 10 92 64 46 69 30 112 42 27 49 19 32 34 43 93 85 55 74 41 72 8 79 109 100 88 23 107 62 53 5 89 87 9 18 17 31 50 33 95 37 57 48 76 24 26 82 103 35 77 47 60 61 75 86 110 94 70 16 13 58 84 80 59 52 56 96 44 90 102 83 91 25 12 29 108 20 73 2 21 106 15 38 6 97 54\r\n",
                "15\r\n"
            ],
            [
                "145\r\n62 84 64 87 43 112 41 106 25 94 8 144 20 80 66 111 63 115 44 135 72 128 57 116 56 93 52 74 55 129 21 143 38 76 60 113 51 88 36 137 37 101 5 91 1 124 22 82 19 126 49 103 2 138 24 127 42 136 39 120 3 89 33 107 4 108 11 134 15 105 17 77 30 123 50 145 34 114 67 130 69 97 32 142 59 139 12 83 61 81 71 132 68 90 48 75 46 121 47 141 27 133 31 119 14 102 28 96 26 131 58 99 35 78 18 86 16 100 7 92 73 104 40 85 53 98 10 117 54 95 29 122 70 118 9 110 6 140 23 79 45 125 65 109 13\r\n",
                "16\r\n"
            ],
            [
                "33\r\n16 33 4 20 7 27 17 22 1 30 11 25 14 28 9 19 6 21 13 29 15 32 8 23 2 24 3 26 10 31 12 18 5\r\n",
                "10\r\n"
            ],
            [
                "5\r\n1 5 3 4 2\r\n",
                "4\r\n"
            ]
        ]
    }
]