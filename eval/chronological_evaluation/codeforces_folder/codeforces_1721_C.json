[
    {
        "name": "Min-Max Array Transformation",
        "description": "You are given an array \n    a_1, a_2, \n    \u2026, a_n\n, which is sorted in non-\ndescending order. You decided to perform the following steps to create array\n\n    b_1, b_2, \n    \u2026, b_n\n: Create an array \n    d\n consisting of \n    n\n\narbitrary non-negative integers. Set \n    b_i = a_i + d_i\n for each \n    b_i\n.\nSort the array \n    b\n in non-descending order. You are given the resulting\narray \n    b\n. For each index \n    i\n, calculate what is the minimum and\nmaximum possible value of \n    d_i\n you can choose in order to get the given\narray \n    b\n. Note that the minimum (maximum) \n    d_i\n-s are independent of\neach other, i. e. they can be obtained from different possible arrays \n    d\n.\nInput The first line contains the single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    10^4\n) \u2014 the number of test cases. The first line of each test case contains\na single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the length\nof arrays \n    a\n, \n    b\n and \n    d\n. The second line contains \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n; \n    a_i\n    \n    \u2264 a_i+1\n) \u2014 the array \n    a\n in non-descending order. The third line\ncontains \n    n\n integers \n    b_1, b_2, \n    \u2026, b_n\n (\n    1 \n    \u2264 b_i \n    \u2264\n    10^9\n; \n    b_i \n    \u2264 b_i+1\n) \u2014 the array \n    b\n in non-descending order.\nAdditional constraints on the input: there is at least one way to obtain the\narray \n    b\n from the \n    a\n by choosing an array \n    d\n consisting of non-\nnegative integers; the sum of \n    n\n doesn't exceed \n    2 \n    \u00b7 10^5\n.\nOutput For each test case, print two lines. In the first line, print \n    n\n\nintegers \n    d_1^min, d_2^min, \n    \u2026, d_n^min\n, where \n    d_i^min\n\nis the minimum possible value you can add to \n    a_i\n. Secondly, print\n\n    n\n integers \n    d_1^max, d_2^max, \n    \u2026, d_n^max\n, where\n\n    d_i^max\n is the maximum possible value you can add to \n    a_i\n. All\n\n    d_i^min\n and \n    d_i^max\n values are independent of each other. In\nother words, for each \n    i\n, \n    d_i^min\n is just the minimum value among\nall possible values of \n    d_i\n. Example Input 4 3 2 3 5 7 11 13 1 1000 5000\n4 1 2 3 4 1 2 3 4 4 10 20 30 40 22 33 33 55 Output 5 4 2 11 10 8 4000 4000 0 0\n0 0 0 0 0 0 12 2 3 15 23 13 3 15 Note In the first test case, in order to get\n\n    d_1^min = 5\n, we can choose, for example, \n    d = [5, 10, 6]\n. Then\n\n    b\n \n    =\n \n    [2+5,3+10,5+6]\n \n    =\n \n    [7,13,11]\n \n    =\n\n\n    [7,11,13]\n. For \n    d_2^min = 4\n, we can choose \n    d\n \n    =\n \n    [9,\n    4, 8]\n. Then \n    b\n \n    =\n \n    [2+9,3+4,5+8]\n \n    =\n \n    [11,7,13]\n\n\n    =\n \n    [7,11,13]\n.\n\n",
        "cf_contest_id": 1721,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "greedy",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3\r\n2 3 5\r\n7 11 13\r\n1\r\n1000\r\n5000\r\n4\r\n1 2 3 4\r\n1 2 3 4\r\n4\r\n10 20 30 40\r\n22 33 33 55\r\n",
                "5\r\n4\r\n2\r\n11 10 8\r\n4000\r\n4000\r\n0\r\n0\r\n0\r\n0\r\n0 0 0 0\r\n12\r\n2\r\n3\r\n15\r\n23 13 3 15\r\n"
            ]
        ],
        "private_cases": []
    }
]