[
    {
        "name": "Sum of Substrings",
        "description": "You are given a binary string \n    s\n of length \n    n\n. Let's define\n\n    d_i\n as the number whose decimal representation is \n    s_i s_i+1\n\n(possibly, with a leading zero). We define \n    f(s)\n to be the sum of all the\nvalid \n    d_i\n. In other words, \n    f(s) = \n    \u2211\n    _i=1^n-1 d_i\n.\nFor example, for the string \n    s = 1011\n: \n    d_1 = 10\n (ten); \n    d_2 =\n    01\n (one) \n    d_3 = 11\n (eleven); \n    f(s) = 10 + 01 + 11 = 22\n. In one\noperation you can swap any two adjacent elements of the string. Find the\nminimum value of \n    f(s)\n that can be achieved if at most \n    k\n operations\nare allowed. Input Each test contains multiple test cases. The first line\ncontains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^5\n).\nDescription of the test cases follows. First line of each test case contains\ntwo integers \n    n\n and \n    k\n (\n    2 \n    \u2264 n \n    \u2264 10^5\n, \n    0 \n    \u2264 k\n    \n    \u2264 10^9\n) \u2014 the length of the string and the maximum number of operations\nallowed. The second line of each test case contains the binary string \n    s\n\nof length \n    n\n, consisting of only zeros and ones. It is also given that\nsum of \n    n\n over all the test cases doesn't exceed \n    10^5\n. Output For\neach test case, print the minimum value of \n    f(s)\n you can obtain with at\nmost \n    k\n operations. Example Input 3 4 0 1010 7 1 0010100 5 2 00110 Output\n21 22 12 Note For the first example, you can't do any operation so the optimal\nstring is \n    s\n itself. \n    f(s) = f(1010) = 10 + 01 + 10 = 21\n. For the\nsecond example, one of the optimal strings you can obtain is \"0011000\". The\nstring has an \n    f\n value of \n    22\n. For the third example, one of the\noptimal strings you can obtain is \"00011\". The string has an \n    f\n value of\n\n    12\n.\n\n",
        "cf_contest_id": 1691,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "greedy",
            "math",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n4 0\r\n1010\r\n7 1\r\n0010100\r\n5 2\r\n00110\r\n",
                "21\r\n22\r\n12\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2 1000000000\r\n01\r\n",
                "1\r\n"
            ]
        ]
    }
]