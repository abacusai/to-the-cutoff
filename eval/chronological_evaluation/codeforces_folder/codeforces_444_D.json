[
    {
        "name": "DZY Loves Strings",
        "description": "DZY loves strings, and he enjoys collecting them. In China, many people like\nto use strings containing their names' initials, for example: xyz, jcvb, dzy,\ndyh. Once DZY found a lucky string s. A lot of pairs of good friends came to\nDZY when they heard about the news. The first member of the i-th pair has name\nai, the second one has name bi. Each pair wondered if there is a substring of\nthe lucky string containing both of their names. If so, they want to find the\none with minimum length, which can give them good luck and make their\nfriendship last forever. Please help DZY for each pair find the minimum length\nof the substring of s that contains both ai and bi, or point out that such\nsubstring doesn't exist. A substring of s is a string slsl + 1... sr for some\nintegers l, r (1 \u2264 l \u2264 r \u2264 |s|). The length of such the substring is (r - l +\n1). A string p contains some another string q if there is a substring of p\nequal to q. Input The first line contains a string s (1 \u2264 |s| \u2264 50000). The\nsecond line contains a non-negative integer q (0 \u2264 q \u2264 100000) \u2014 the number of\npairs. Each of the next q lines describes a pair, the line contains two space-\nseparated strings ai and bi (1 \u2264 |ai|, |bi| \u2264 4). It is guaranteed that all\nthe strings only consist of lowercase English letters. Output For each pair,\nprint a line containing a single integer \u2014 the minimum length of the required\nsubstring. If there is no such substring, output -1. Examples Input xudyhduxyz\n3 xyz xyz dyh xyz dzy xyz Output 3 8 -1 Input abcabd 3 a c ab abc ab d Output\n2 3 3 Input baabcabaaa 2 abca baa aa aba Output 6 4 Note The shortest\nsubstrings in the first sample are: xyz, dyhduxyz. The shortest substrings in\nthe second sample are: ca, abc and abd. The shortest substrings in the third\nsample are: baabca and abaa.\n\n",
        "cf_contest_id": 444,
        "cf_index": "D",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "hashing",
            "strings",
            "two pointers"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "xudyhduxyz\r\n3\r\nxyz xyz\r\ndyh xyz\r\ndzy xyz\r\n",
                "3\r\n8\r\n-1\r\n"
            ],
            [
                "abcabd\r\n3\r\na c\r\nab abc\r\nab d\r\n",
                "2\r\n3\r\n3\r\n"
            ],
            [
                "baabcabaaa\r\n2\r\nabca baa\r\naa aba\r\n",
                "6\r\n4\r\n"
            ]
        ],
        "private_cases": [
            [
                "cbcaedaaae\r\n10\r\ne ed\r\nddd dde\r\nedca b\r\nbac dbc\r\na caa\r\ndaee bdcb\r\needa dab\r\nb a\r\nedad e\r\ncebd ec\r\n",
                "2\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n3\r\n-1\r\n-1\r\n"
            ],
            [
                "wehopethatydlxyzsydhhcanwingoldmedalinioiforchinablessthemall\r\n10\r\nydl ioi\r\nxyz ioi\r\nsy ioi\r\ndhh ioi\r\nydl gold\r\nxyz gold\r\nsy gold\r\ndhh gold\r\nbles all\r\nwe all\r\n",
                "31\r\n28\r\n25\r\n23\r\n21\r\n18\r\n15\r\n13\r\n12\r\n61\r\n"
            ],
            [
                "dgqcnzkglc\r\n10\r\novbh yjoq\r\nu bkik\r\ndad ua\r\ni pr\r\nkqo lva\r\nx yvyt\r\niqv eg\r\nkk clet\r\nguca uhx\r\nupm gvtn\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "bbbbbababa\r\n10\r\nbaa abb\r\nb aba\r\nbab aabb\r\nbab bbab\r\nbbb baba\r\nbba aaab\r\nbb ab\r\na b\r\naab ab\r\nbb abaa\r\n",
                "-1\r\n3\r\n-1\r\n4\r\n6\r\n-1\r\n4\r\n2\r\n-1\r\n-1\r\n"
            ],
            [
                "ccbcaccaaa\r\n10\r\nccbc c\r\naab ba\r\nbaa ccc\r\nba abc\r\nac aa\r\nbaca cba\r\nbcab ab\r\nab acab\r\naac ca\r\nc bcc\r\n",
                "4\r\n-1\r\n-1\r\n-1\r\n5\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "aaabddbbcc\r\n10\r\ncdc cac\r\nacbb abb\r\nddc ddcd\r\ncdbc bdb\r\naa dabd\r\ndbda aad\r\nb d\r\ndcd b\r\nd baad\r\nbaca c\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n2\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "ccbaaaeeaa\r\n10\r\ne cc\r\nabbb d\r\na ce\r\nbcbc abd\r\na b\r\ne a\r\ndead cebe\r\nc dbc\r\nbdc bdbc\r\ndac b\r\n",
                "7\r\n-1\r\n-1\r\n-1\r\n2\r\n2\r\n-1\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "febfcddccb\r\n10\r\ndce ac\r\nacd ebf\r\nef e\r\nad d\r\nadeb aeb\r\nb fac\r\nbf de\r\neeb ac\r\nbcc b\r\ncbca ecd\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n"
            ]
        ]
    }
]