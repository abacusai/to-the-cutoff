[
    {
        "name": "Linguistics",
        "description": "Alina has discovered a weird language, which contains only \n    4\n words:\n\n    \n, \n    \n, \n    \n,\n\n    \n. It also turned out that there are no spaces in this\nlanguage: a sentence is written by just concatenating its words into a single\nstring. Alina has found one such sentence \n    s\n and she is curious: is it\npossible that it consists of precisely \n    a\n words \n    \n,\n\n    b\n words \n    \n, \n    c\n words \n    \n, and\n\n    d\n words \n    \n? In other words, determine, if it's possible\nto concatenate these \n    a+b+c+d\n words in some order so that the resulting\nstring is \n    s\n. Each of the \n    a+b+c+d\n words must be used exactly once\nin the concatenation, but you can choose the order in which they are\nconcatenated. Input The first line of the input contains a single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^5\n) \u2014 the number of test cases. The\ndescription of the test cases follows. The first line of each test case\ncontains four integers \n    a\n, \n    b\n, \n    c\n, \n    d\n (\n    0\n    \u2264\n    a,b,c,d\n    \u2264 2\n    \u00b7 10^5\n) \u2014 the number of times that words\n\n    \n, \n    \n, \n    \n,\n\n    \n respectively must be used in the sentence. The second line\ncontains the string \n    s\n (\n    s\n consists only of the characters\n\n    \n and \n    \n, \n    1\n    \u2264 |s| \n    \u2264 2\n    \u00b7\n    10^5\n, \n    |s|=a+b+2c+2d\n) \u2014 the sentence. Notice that the condition\n\n    |s|=a+b+2c+2d\n (here \n    |s|\n denotes the length of the string \n    s\n)\nis equivalent to the fact that \n    s\n is as long as the concatenation of the\n\n    a+b+c+d\n words. The sum of the lengths of \n    s\n over all test cases\ndoesn't exceed \n    2\n    \u00b7 10^5\n. Output For each test case output\n\n    \n if it is possible that the sentence \n    s\n consists of\nprecisely \n    a\n words \n    \n, \n    b\n words \n    \n,\n\n    c\n words \n    \n, and \n    d\n words \n    \n, and\n\n    \n otherwise. You can output each letter in any case. Example\nInput 8 1 0 0 0 B 0 0 1 0 AB 1 1 0 1 ABAB 1 0 1 1 ABAAB 1 1 2 2 BAABBABBAA 1 1\n2 3 ABABABBAABAB 2 3 5 4 AABAABBABAAABABBABBBABB 1 3 3 10\nBBABABABABBBABABABABABABAABABA Output NO YES YES YES YES YES NO YES Note In\nthe first test case, the sentence \n    s\n is \n    \n. Clearly, it\ncan't consist of a single word \n    \n, so the answer is\n\n    \n. In the second test case, the sentence \n    s\n is\n\n    \n, and it's possible that it consists of a single word\n\n    \n, so the answer is \n    \n. In the third test\ncase, the sentence \n    s\n is \n    \n, and it's possible that it\nconsists of one word \n    \n, one word \n    \n, and one\nword \n    \n, as \n    + \n     + \n     =\n. In the fourth test case, the sentence \n    s\n is\n\n    \n, and it's possible that it consists of one word\n\n    \n, one word \n    \n, and one word\n\n    \n, as \n    + \n     + \n     =\n. In the fifth test case, the sentence \n    s\n is\n\n    \n, and it's possible that it consists of one word\n\n    \n, one word \n    \n, two words\n\n    \n, and two words \n    \n, as \n    +\n    \n     + \n     + \n     + \n     + \n    =\n.\n\n",
        "cf_contest_id": 1685,
        "cf_index": "B",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation",
            "sortings",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8\r\n1 0 0 0\r\nB\r\n0 0 1 0\r\nAB\r\n1 1 0 1\r\nABAB\r\n1 0 1 1\r\nABAAB\r\n1 1 2 2\r\nBAABBABBAA\r\n1 1 2 3\r\nABABABBAABAB\r\n2 3 5 4\r\nAABAABBABAAABABBABBBABB\r\n1 3 3 10\r\nBBABABABABBBABABABABABABAABABA\r\n",
                "NO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\n"
            ]
        ],
        "private_cases": []
    }
]