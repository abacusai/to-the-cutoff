[
    {
        "name": "Radio stations",
        "description": "In the lattice points of the coordinate line there are n radio stations, the\ni-th of which is described by three integers: xi \u2014 the coordinate of the i-th\nstation on the line, ri \u2014 the broadcasting range of the i-th station, fi \u2014 the\nbroadcasting frequency of the i-th station. We will say that two radio\nstations with numbers i and j reach each other, if the broadcasting range of\neach of them is more or equal to the distance between them. In other words\nmin(ri, rj) \u2265 |xi - xj|. Let's call a pair of radio stations (i, j) bad if i <\nj, stations i and j reach each other and they are close in frequency, that is,\n|fi - fj| \u2264 k. Find the number of bad pairs of radio stations. Input The first\nline contains two integers n and k (1 \u2264 n \u2264 10^5, 0 \u2264 k \u2264 10) \u2014 the number of\nradio stations and the maximum difference in the frequencies for the pair of\nstations that reach each other to be considered bad. In the next n lines\nfollow the descriptions of radio stations. Each line contains three integers\nxi, ri and fi (1 \u2264 xi, ri \u2264 10^9, 1 \u2264 fi \u2264 10^4) \u2014 the coordinate of the i-th\nradio station, it's broadcasting range and it's broadcasting frequency. No two\nradio stations will share a coordinate. Output Output the number of bad pairs\nof radio stations. Examples Input 3 2 1 3 10 3 2 5 4 10 8 Output 1 Input 3 3 1\n3 10 3 2 5 4 10 8 Output 2 Input 5 1 1 3 2 2 2 4 3 2 1 4 2 1 5 3 3 Output 2\nInput 5 1 1 5 2 2 5 4 3 5 1 4 5 1 5 5 3 Output 5\n\n",
        "cf_contest_id": 762,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2\r\n1 3 10\r\n3 2 5\r\n4 10 8\r\n",
                "1\r\n"
            ],
            [
                "3 3\r\n1 3 10\r\n3 2 5\r\n4 10 8\r\n",
                "2\r\n"
            ],
            [
                "5 1\r\n1 3 2\r\n2 2 4\r\n3 2 1\r\n4 2 1\r\n5 3 3\r\n",
                "2\r\n"
            ],
            [
                "5 1\r\n1 5 2\r\n2 5 4\r\n3 5 1\r\n4 5 1\r\n5 5 3\r\n",
                "5\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 4\r\n6 8 16\r\n",
                "0\r\n"
            ]
        ]
    }
]