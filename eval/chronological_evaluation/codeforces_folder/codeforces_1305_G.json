[
    {
        "name": "Kuroni and Antihype",
        "description": "Kuroni isn't good at economics. So he decided to found a new financial pyramid\ncalled Antihype. It has the following rules: You can join the pyramid for free\nand get \n    0\n coins. If you are already a member of Antihype, you can invite\nyour friend who is currently not a member of Antihype, and get a number of\ncoins equal to your age (for each friend you invite). \n    n\n people have\nheard about Antihype recently, the \n    i\n-th person's age is \n    a_i\n. Some\nof them are friends, but friendship is a weird thing now: the \n    i\n-th\nperson is a friend of the \n    j\n-th person if and only if \n    a_i \n     AND\n     a_j = 0\n, where \n    AND\n denotes the bitwise AND operation.\nNobody among the \n    n\n people is a member of Antihype at the moment. They\nwant to cooperate to join and invite each other to Antihype in a way that\nmaximizes their combined gainings. Could you help them? Input The first line\ncontains a single integer \n    n\n (\n    1\n    \u2264 n \n    \u2264 2\n    \u00b7 10^5\n) \u2014 the\nnumber of people. The second line contains \n    n\n integers \n    a_1, a_2,\n    \n    \u2026, a_n\n (\n    0\n    \u2264 a_i \n    \u2264 2\n    \u00b7 10^5\n) \u2014 the ages of the\npeople. Output Output exactly one integer \u2014 the maximum possible combined\ngainings of all \n    n\n people. Example Input 3 1 2 3 Output 2 Note Only the\nfirst and second persons are friends. The second can join Antihype and invite\nthe first one, getting \n    2\n for it.\n\n",
        "cf_contest_id": 1305,
        "cf_index": "G",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "dp",
            "dsu",
            "graphs"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 2 3\r\n",
                "2"
            ]
        ],
        "private_cases": [
            [
                "1\r\n35790\r\n",
                "0"
            ],
            [
                "2\r\n69801 4591\r\n",
                "0"
            ],
            [
                "2\r\n0 0\r\n",
                "0"
            ],
            [
                "2\r\n200000 200000\r\n",
                "0"
            ],
            [
                "3\r\n12169 27309 21779\r\n",
                "0"
            ],
            [
                "4\r\n100359 104205 195717 53368\r\n",
                "0"
            ],
            [
                "5\r\n42727 126922 140793 109451 159217\r\n",
                "0"
            ],
            [
                "6\r\n76738 57997 60550 82493 99242 37036\r\n",
                "0"
            ],
            [
                "7\r\n19106 109575 59805 84397 13950 17436 95805\r\n",
                "0"
            ],
            [
                "8\r\n161475 132293 179563 140479 99797 118340 7472 44538\r\n",
                "0"
            ],
            [
                "9\r\n49664 9188 124639 142383 39823 73422 2179 62551 172655\r\n",
                "192047"
            ],
            [
                "10\r\n64192 188285 125933 11324 85475 111664 85264 64039 148607 133654\r\n",
                "0"
            ]
        ]
    }
]