[
    {
        "name": "Two Arrays And Swaps",
        "description": "You are given two arrays \n    a\n and \n    b\n both consisting of \n    n\n\npositive (greater than zero) integers. You are also given an integer \n    k\n.\nIn one move, you can choose two indices \n    i\n and \n    j\n (\n    1 \n    \u2264 i, j\n    \n    \u2264 n\n) and swap \n    a_i\n and \n    b_j\n (i.e. \n    a_i\n becomes \n    b_j\n\nand vice versa). Note that \n    i\n and \n    j\n can be equal or different (in\nparticular, swap \n    a_2\n with \n    b_2\n or swap \n    a_3\n and \n    b_9\n both\nare acceptable moves). Your task is to find the maximum possible sum you can\nobtain in the array \n    a\n if you can do no more than (i.e. at most) \n    k\n\nsuch moves (swaps). You have to answer \n    t\n independent test cases. Input\nThe first line of the input contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    200\n) \u2014 the number of test cases. Then \n    t\n test cases follow. The first\nline of the test case contains two integers \n    n\n and \n    k\n (\n    1 \n    \u2264 n\n    \n    \u2264 30; 0 \n    \u2264 k \n    \u2264 n\n) \u2014 the number of elements in \n    a\n and\n\n    b\n and the maximum number of moves you can do. The second line of the\ntest case contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264\n    a_i \n    \u2264 30\n), where \n    a_i\n is the \n    i\n-th element of \n    a\n. The\nthird line of the test case contains \n    n\n integers \n    b_1, b_2, \n    \u2026,\n    b_n\n (\n    1 \n    \u2264 b_i \n    \u2264 30\n), where \n    b_i\n is the \n    i\n-th element\nof \n    b\n. Output For each test case, print the answer \u2014 the maximum possible\nsum you can obtain in the array \n    a\n if you can do no more than (i.e. at\nmost) \n    k\n swaps. Example Input 5 2 1 1 2 3 4 5 5 5 5 6 6 5 1 2 5 4 3 5 3 1\n2 3 4 5 10 9 10 10 9 4 0 2 2 4 3 2 4 2 3 4 4 1 2 2 1 4 4 5 4 Output 6 27 39 11\n17 Note In the first test case of the example, you can swap \n    a_1 = 1\n and\n\n    b_2 = 4\n, so \n    a=[4, 2]\n and \n    b=[3, 1]\n. In the second test case\nof the example, you don't need to swap anything. In the third test case of the\nexample, you can swap \n    a_1 = 1\n and \n    b_1 = 10\n, \n    a_3 = 3\n and\n\n    b_3 = 10\n and \n    a_2 = 2\n and \n    b_4 = 10\n, so \n    a=[10, 10, 10, 4,\n    5]\n and \n    b=[1, 9, 3, 2, 9]\n. In the fourth test case of the example, you\ncannot swap anything. In the fifth test case of the example, you can swap\narrays \n    a\n and \n    b\n, so \n    a=[4, 4, 5, 4]\n and \n    b=[1, 2, 2, 1]\n.\n\n",
        "cf_contest_id": 1353,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n2 1\r\n1 2\r\n3 4\r\n5 5\r\n5 5 6 6 5\r\n1 2 5 4 3\r\n5 3\r\n1 2 3 4 5\r\n10 9 10 10 9\r\n4 0\r\n2 2 4 3\r\n2 4 2 3\r\n4 4\r\n1 2 2 1\r\n4 4 5 4\r\n",
                "6\r\n27\r\n39\r\n11\r\n17\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n6 1\r\n1 4 2 23 15 13\r\n5 6 4 1 15 24\r\n",
                "81\r\n"
            ]
        ]
    }
]