[
    {
        "name": "Desk Disorder",
        "description": "A new set of desks just arrived, and it's about time! Things were getting\nquite cramped in the office. You've been put in charge of creating a new\nseating chart for the engineers. The desks are numbered, and you sent out a\nsurvey to the engineering team asking each engineer the number of the desk\nthey currently sit at, and the number of the desk they would like to sit at\n(which may be the same as their current desk). Each engineer must either\nremain where they sit, or move to the desired seat they indicated in the\nsurvey. No two engineers currently sit at the same desk, nor may any two\nengineers sit at the same desk in the new seating arrangement. How many\nseating arrangements can you create that meet the specified requirements? The\nanswer may be very large, so compute it modulo 1000000007 = 10^9 + 7. Input\nInput will begin with a line containing N (1 \u2264 N \u2264 100000), the number of\nengineers. N lines follow, each containing exactly two integers. The i-th line\ncontains the number of the current desk of the i-th engineer and the number of\nthe desk the i-th engineer wants to move to. Desks are numbered from 1 to 2\u00b7N.\nIt is guaranteed that no two engineers sit at the same desk. Output Print the\nnumber of possible assignments, modulo 1000000007 = 10^9 + 7. Examples Input 4\n1 5 5 2 3 7 7 3 Output 6 Input 5 1 10 2 10 3 10 4 10 5 5 Output 5 Note These\nare the possible assignments for the first example: 1 5 3 7 1 2 3 7 5 2 3 7 1\n5 7 3 1 2 7 3 5 2 7 3\n\n",
        "cf_contest_id": 859,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "dfs and similar",
            "dsu",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 5\r\n5 2\r\n3 7\r\n7 3\r\n",
                "6"
            ],
            [
                "5\r\n1 10\r\n2 10\r\n3 10\r\n4 10\r\n5 5\r\n",
                "5"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 2\r\n",
                "2"
            ],
            [
                "30\r\n22 37\r\n12 37\r\n37 58\r\n29 57\r\n43 57\r\n57 58\r\n58 53\r\n45 4\r\n1 4\r\n4 51\r\n35 31\r\n21 31\r\n31 51\r\n51 53\r\n53 48\r\n60 55\r\n52 55\r\n55 33\r\n36 9\r\n10 9\r\n9 33\r\n33 19\r\n5 23\r\n47 23\r\n23 32\r\n50 44\r\n26 44\r\n44 32\r\n32 19\r\n19 48\r\n",
                "31"
            ],
            [
                "50\r\n73 1\r\n65 73\r\n16 65\r\n57 65\r\n33 16\r\n34 57\r\n98 16\r\n84 98\r\n55 34\r\n64 84\r\n80 55\r\n75 64\r\n28 75\r\n20 75\r\n42 75\r\n88 42\r\n50 20\r\n48 28\r\n32 48\r\n58 88\r\n92 76\r\n76 53\r\n53 15\r\n15 1\r\n1 10\r\n10 71\r\n71 37\r\n37 95\r\n95 63\r\n63 92\r\n45 97\r\n97 51\r\n51 96\r\n96 12\r\n12 62\r\n62 31\r\n31 5\r\n5 29\r\n29 19\r\n19 49\r\n49 6\r\n6 40\r\n40 18\r\n18 22\r\n22 17\r\n17 46\r\n46 72\r\n72 82\r\n82 14\r\n14 14\r\n",
                "2"
            ],
            [
                "10\r\n15 8\r\n8 13\r\n13 3\r\n1 4\r\n14 3\r\n11 17\r\n9 10\r\n10 18\r\n19 20\r\n17 20\r\n",
                "120"
            ],
            [
                "4\r\n5 6\r\n6 7\r\n7 8\r\n8 5\r\n",
                "2"
            ],
            [
                "5\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 1\r\n",
                "2"
            ]
        ]
    }
]