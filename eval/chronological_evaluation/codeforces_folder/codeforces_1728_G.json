[
    {
        "name": "Illumination",
        "description": "Consider a segment \n    [0, d]\n of the coordinate line. There are \n    n\n\nlanterns and \n    m\n points of interest in this segment. For each lantern, you\ncan choose its power \u2014 an integer between \n    0\n and \n    d\n (inclusive). A\nlantern with coordinate \n    x\n illuminates the point of interest with\ncoordinate \n    y\n if \n    |x - y|\n is less than or equal to the power of the\nlantern. A way to choose the power values for all lanterns is considered valid\nif every point of interest is illuminated by at least one lantern. You have to\nprocess \n    q\n queries. Each query is represented by one integer \n    f_i\n.\nTo answer the \n    i\n-th query, you have to: add a lantern on coordinate\n\n    f_i\n; calculate the number of valid ways to assign power values to all\nlanterns, and print it modulo \n    998244353\n; remove the lantern you just\nadded. Input The first line contains three integers \n    d\n, \n    n\n and\n\n    m\n (\n    4 \n    \u2264 d \n    \u2264 3 \n    \u00b7 10^5\n; \n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7\n    10^5\n; \n    1 \n    \u2264 m \n    \u2264 16\n) \u2014 the size of the segment, the number of\nlanterns and the number of points of interest, respectively. The second line\ncontains \n    n\n integers \n    l_1, l_2, \n    \u2026, l_n\n (\n    1 \n    \u2264 l_i \n    \u2264 d\n    - 1\n), where \n    l_i\n is the coordinate of the \n    i\n-th lantern. The\nthird line contains \n    m\n integers \n    p_1, p_2, \n    \u2026, p_m\n (\n    1 \n    \u2264\n    p_i \n    \u2264 d - 1\n), where \n    p_i\n is the coordinate of the \n    i\n-th point\nof interest. The fourth line contains one integer \n    q\n (\n    1 \n    \u2264 q \n    \u2264\n    5 \n    \u00b7 10^5\n) \u2014 the number of queries. The fifth line contains \n    q\n\nintegers \n    f_1, f_2, \n    \u2026, f_q\n (\n    1 \n    \u2264 f_i \n    \u2264 d - 1\n), where\n\n    f_i\n is the integer representing the \n    i\n-th query. Additional\nconstraint on the input: during the processing of each query, no coordinate\ncontains more than one object (i. e. there cannot be two or more lanterns with\nthe same coordinate, two or more points of interest with the same coordinate,\nor a lantern and a point of interest with the same coordinate). Output For\neach query, print one integer \u2014 the answer to it, taken modulo\n\n    998244353\n. Examples Input 6 1 1 4 3 3 2 1 5 Output 48 47 47 Input 6 1 2\n4 2 5 2 1 3 Output 44 46 Input 20 1 2 11 15 7 1 8 Output 413 Input 20 3 5 5 7\n18 1 6 3 10 19 5 4 17 15 8 9 Output 190431 187503 188085 189903 189708\n\n",
        "cf_contest_id": 1728,
        "cf_index": "G",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "bitmasks",
            "brute force",
            "combinatorics",
            "dp",
            "math",
            "two pointers"
        ],
        "time_limit_seconds": 8.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "6 1 1\r\n4\r\n3\r\n3\r\n2 1 5\r\n",
                "48\r\n47\r\n47\r\n"
            ],
            [
                "6 1 2\r\n4\r\n2 5\r\n2\r\n1 3\r\n",
                "44\r\n46\r\n"
            ],
            [
                "20 1 2\r\n11\r\n15 7\r\n1\r\n8\r\n",
                "413\r\n"
            ],
            [
                "20 3 5\r\n5 7 18\r\n1 6 3 10 19\r\n5\r\n4 17 15 8 9\r\n",
                "190431\r\n187503\r\n188085\r\n189903\r\n189708\r\n"
            ]
        ],
        "private_cases": [
            [
                "20 5 1\r\n19 11 4 12 18\r\n10\r\n20\r\n3 17 2 3 16 8 14 14 9 6 1 1 8 3 6 8 13 3 13 5\r\n",
                "85760073\r\n85760073\r\n85759209\r\n85760073\r\n85760937\r\n85764393\r\n85762665\r\n85762665\r\n85765257\r\n85762665\r\n85758345\r\n85758345\r\n85764393\r\n85760073\r\n85762665\r\n85764393\r\n85763529\r\n85760073\r\n85763529\r\n85761801\r\n"
            ],
            [
                "20 5 2\r\n3 4 16 2 11\r\n5 9\r\n20\r\n7 19 7 6 14 6 14 15 19 18 15 14 15 12 10 10 12 17 12 1\r\n",
                "85759617\r\n85732017\r\n85759617\r\n85756989\r\n85748277\r\n85756989\r\n85748277\r\n85745025\r\n85732017\r\n85735269\r\n85745025\r\n85748277\r\n85745025\r\n85754781\r\n85761285\r\n85761285\r\n85754781\r\n85738521\r\n85754781\r\n85741353\r\n"
            ],
            [
                "20 5 5\r\n1 15 7 4 3\r\n9 5 11 14 19\r\n20\r\n6 2 12 6 17 2 13 18 2 16 2 2 17 8 10 13 12 16 16 10\r\n",
                "83067497\r\n82234089\r\n84311145\r\n83067497\r\n85295119\r\n82234089\r\n84517353\r\n85467995\r\n82234089\r\n85114473\r\n82234089\r\n82234089\r\n85295119\r\n83483945\r\n83898473\r\n84517353\r\n84311145\r\n85114473\r\n85114473\r\n83898473\r\n"
            ]
        ]
    }
]