[
    {
        "name": "k-Amazing Numbers",
        "description": "You are given an array \n    a\n consisting of \n    n\n integers numbered from\n\n    1\n to \n    n\n. Let's define the \n    k\n-amazing number of the array as\nthe minimum number that occurs in all of the subsegments of the array having\nlength \n    k\n (recall that a subsegment of \n    a\n of length \n    k\n is a\ncontiguous part of \n    a\n containing exactly \n    k\n elements). If there is\nno integer occuring in all subsegments of length \n    k\n for some value of\n\n    k\n, then the \n    k\n-amazing number is \n    -1\n. For each \n    k\n from\n\n    1\n to \n    n\n calculate the \n    k\n-amazing number of the array \n    a\n.\nInput The first line contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n)\n\u2014 the number of test cases. Then \n    t\n test cases follow. The first line of\neach test case contains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 3 \n    \u00b7\n    10^5\n) \u2014 the number of elements in the array. The second line contains\n\n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n) \u2014\nthe elements of the array. It is guaranteed that the sum of \n    n\n over all\ntest cases does not exceed \n    3 \n    \u00b7 10^5\n. Output For each test case\nprint \n    n\n integers, where the \n    i\n-th integer is equal to the\n\n    i\n-amazing number of the array. Example Input 3 5 1 2 3 4 5 5 4 4 4 4 2 6\n1 3 1 5 3 1 Output -1 -1 3 2 1 -1 4 4 4 2 -1 -1 1 1 1 1\n\n",
        "cf_contest_id": 1416,
        "cf_index": "A",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "implementation",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n5\r\n1 2 3 4 5\r\n5\r\n4 4 4 4 2\r\n6\r\n1 3 1 5 3 1\r\n",
                "-1 -1 3 2 1\r\n-1 4 4 4 2\r\n-1 -1 1 1 1 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n5\r\n4 4 4 4 2\r\n5\r\n1 2 3 4 5\r\n6\r\n1 3 1 5 3 1\r\n",
                "-1 4 4 4 2\r\n-1 -1 3 2 1\r\n-1 -1 1 1 1 1\r\n"
            ]
        ]
    }
]