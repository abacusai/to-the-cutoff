[
    {
        "name": "Misha and LCP on Tree",
        "description": "Misha has a tree with characters written on the vertices. He can choose two\nvertices s and t of this tree and write down characters of vertices lying on a\npath from s to t. We'll say that such string corresponds to pair (s, t). Misha\nhas m queries of type: you are given 4 vertices a, b, c, d; you need to find\nthe largest common prefix of the strings that correspond to pairs (a, b) and\n(c, d). Your task is to help him. Input The first line contains integer n (1 \u2264\nn \u2264 300 000) \u2014 the number of vertices in the tree. Next follows a line\nconsisting of n small English letters. The i-th character of the string\ncorresponds to the character written on the i-th vertex. Next n - 1 lines\ncontain information about edges. An edge is defined by a pair of integers u, v\n(1 \u2264 u, v \u2264 n, u \u2260 v), separated by spaces. The next line contains integer m\n(1 \u2264 m \u2264 1 000 000) \u2014 the number of queries. Next m lines contain information\nabout queries. A query is defined by four integers a, b, c, d (1 \u2264 a, b, c, d\n\u2264 n), separated by spaces. Output For each query print the length of the\nlargest common prefix on a separate line. Examples Input 6 bbbabb 2 1 3 2 4 3\n5 2 6 5 6 2 5 3 1 1 5 2 3 5 6 5 6 6 3 4 1 6 2 3 4 2 2 4 5 Output 2 2 2 0 1 0\n\n",
        "cf_contest_id": 504,
        "cf_index": "E",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dfs and similar",
            "hashing",
            "string suffix structures",
            "trees"
        ],
        "time_limit_seconds": 8.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "6\r\nbbbabb\r\n2 1\r\n3 2\r\n4 3\r\n5 2\r\n6 5\r\n6\r\n2 5 3 1\r\n1 5 2 3\r\n5 6 5 6\r\n6 3 4 1\r\n6 2 3 4\r\n2 2 4 5\r\n",
                "2\r\n2\r\n2\r\n0\r\n1\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "6\r\nyitsfw\r\n2 1\r\n3 1\r\n4 2\r\n5 1\r\n6 2\r\n3\r\n2 6 5 5\r\n5 3 5 3\r\n6 2 5 2\r\n",
                "0\r\n3\r\n0\r\n"
            ],
            [
                "6\r\ndjvoge\r\n2 1\r\n3 1\r\n4 3\r\n5 2\r\n6 3\r\n5\r\n3 5 1 3\r\n4 1 2 4\r\n5 5 5 3\r\n2 6 4 4\r\n5 5 1 1\r\n",
                "0\r\n0\r\n1\r\n0\r\n0\r\n"
            ],
            [
                "6\r\nhhzlio\r\n2 1\r\n3 1\r\n4 3\r\n5 3\r\n6 4\r\n7\r\n5 4 1 2\r\n4 4 4 2\r\n3 6 2 5\r\n4 1 5 3\r\n2 3 2 2\r\n5 2 4 2\r\n4 6 6 3\r\n",
                "0\r\n1\r\n0\r\n0\r\n1\r\n0\r\n0\r\n"
            ]
        ]
    }
]