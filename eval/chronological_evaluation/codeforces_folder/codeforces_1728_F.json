[
    {
        "name": "Fishermen",
        "description": "There are \n    n\n fishermen who have just returned from a fishing trip. The\n\n    i\n-th fisherman has caught a fish of size \n    a_i\n. The fishermen will\nchoose some order in which they are going to tell the size of the fish they\ncaught (the order is just a permutation of size \n    n\n). However, they are\nnot entirely honest, and they may \"increase\" the size of the fish they have\ncaught. Formally, suppose the chosen order of the fishermen is \n    [p_1, p_2,\n    p_3, \n    \u2026, p_n]\n. Let \n    b_i\n be the value which the \n    i\n-th\nfisherman in the order will tell to the other fishermen. The values \n    b_i\n\nare chosen as follows: the first fisherman in the order just honestly tells\nthe actual size of the fish he has caught, so \n    b_1 = a_p_1\n; every other\nfisherman wants to tell a value that is strictly greater than the value told\nby the previous fisherman, and is divisible by the size of the fish that the\nfisherman has caught. So, for \n    i > 1\n, \n    b_i\n is the smallest integer\nthat is both strictly greater than \n    b_i-1\n and divisible by\n\n    a_p_i\n. For example, let \n    n = 7\n, \n    a = [1, 8, 2, 3, 2, 2, 3]\n.\nIf the chosen order is \n    p = [1, 6, 7, 5, 3, 2, 4]\n, then: \n    b_1 = a_p_1\n    = 1\n; \n    b_2\n is the smallest integer divisible by \n    2\n and greater\nthan \n    1\n, which is \n    2\n; \n    b_3\n is the smallest integer divisible by\n\n    3\n and greater than \n    2\n, which is \n    3\n; \n    b_4\n is the smallest\ninteger divisible by \n    2\n and greater than \n    3\n, which is \n    4\n;\n\n    b_5\n is the smallest integer divisible by \n    2\n and greater than\n\n    4\n, which is \n    6\n; \n    b_6\n is the smallest integer divisible by\n\n    8\n and greater than \n    6\n, which is \n    8\n; \n    b_7\n is the smallest\ninteger divisible by \n    3\n and greater than \n    8\n, which is \n    9\n. You\nhave to choose the order of fishermen in a way that yields the minimum\npossible \n    \u2211\n    _i=1^n b_i\n. Input The first line contains\none integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 1000\n) \u2014 the number of fishermen.\nThe second line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1\n    \n    \u2264 a_i \n    \u2264 10^6\n). Output Print one integer \u2014 the minimum possible\nvalue of \n    \u2211\n    _i=1^n b_i\n you can obtain by choosing the\norder of fishermen optimally. Examples Input 7 1 8 2 3 2 2 3 Output 33 Input\n10 5 6 5 6 5 6 5 6 5 6 Output 165\n\n",
        "cf_contest_id": 1728,
        "cf_index": "F",
        "cf_rating": 3100,
        "difficulty": 0,
        "cf_tags": [
            "flows",
            "graph matchings",
            "greedy"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "7\r\n1 8 2 3 2 2 3\r\n",
                "33\r\n"
            ],
            [
                "10\r\n5 6 5 6 5 6 5 6 5 6\r\n",
                "165\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n389707\r\n",
                "389707\r\n"
            ],
            [
                "10\r\n960114 720874 486618 939853 60492 182324 908417 122705 795237 68274\r\n",
                "5244908\r\n"
            ],
            [
                "1\r\n473131\r\n",
                "473131\r\n"
            ],
            [
                "10\r\n76242 45526 524068 536626 185554 661100 904593 273989 729393 339752\r\n",
                "4276843\r\n"
            ],
            [
                "1\r\n589259\r\n",
                "589259\r\n"
            ],
            [
                "10\r\n126962 594370 304621 198808 534807 364069 676576 490681 696252 643934\r\n",
                "4631080\r\n"
            ],
            [
                "1\r\n639979\r\n",
                "639979\r\n"
            ],
            [
                "10\r\n243090 143215 309367 828286 916765 810142 672751 641965 630408 980820\r\n",
                "6176809\r\n"
            ],
            [
                "1\r\n756107\r\n",
                "756107\r\n"
            ],
            [
                "10\r\n326514 659355 155329 681955 9122 288919 444735 858657 597267 285003\r\n",
                "4306856\r\n"
            ],
            [
                "100\r\n2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1\r\n",
                "5050\r\n"
            ],
            [
                "25\r\n1 2 3 2 5 2 7 2 3 2 11 2 13 2 3 2 17 2 19 2 3 2 23 2 5\r\n",
                "325\r\n"
            ]
        ]
    }
]