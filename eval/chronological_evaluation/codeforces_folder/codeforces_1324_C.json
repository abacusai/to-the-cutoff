[
    {
        "name": "Frog Jumps",
        "description": "There is a frog staying to the left of the string \n    s = s_1 s_2 \n    \u2026\n    s_n\n consisting of \n    n\n characters (to be more precise, the frog\ninitially stays at the cell \n    0\n). Each character of \n    s\n is either 'L'\nor 'R'. It means that if the frog is staying at the \n    i\n-th cell and the\n\n    i\n-th character is 'L', the frog can jump only to the left. If the frog\nis staying at the \n    i\n-th cell and the \n    i\n-th character is 'R', the\nfrog can jump only to the right. The frog can jump only to the right from the\ncell \n    0\n. Note that the frog can jump into the same cell twice and can\nperform as many jumps as it needs. The frog wants to reach the \n    n+1\n-th\ncell. The frog chooses some positive integer value \n    d\n before the first\njump (and cannot change it later) and jumps by no more than \n    d\n cells at\nonce. I.e. if the \n    i\n-th character is 'L' then the frog can jump to any\ncell in a range \n    [max(0, i - d); i - 1]\n, and if the \n    i\n-th character\nis 'R' then the frog can jump to any cell in a range \n    [i + 1; min(n + 1; i +\n    d)]\n. The frog doesn't want to jump far, so your task is to find the minimum\npossible value of \n    d\n such that the frog can reach the cell \n    n+1\n from\nthe cell \n    0\n if it can jump by no more than \n    d\n cells at once. It is\nguaranteed that it is always possible to reach \n    n+1\n from \n    0\n. You\nhave to answer \n    t\n independent test cases. Input The first line of the\ninput contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number\nof test cases. The next \n    t\n lines describe test cases. The \n    i\n-th test\ncase is described as a string \n    s\n consisting of at least \n    1\n and at\nmost \n    2 \n    \u00b7 10^5\n characters 'L' and 'R'. It is guaranteed that the\nsum of lengths of strings over all test cases does not exceed \n    2 \n    \u00b7\n    10^5\n (\n    \u2211 |s| \n    \u2264 2 \n    \u00b7 10^5\n). Output For each test case,\nprint the answer \u2014 the minimum possible value of \n    d\n such that the frog\ncan reach the cell \n    n+1\n from the cell \n    0\n if it jumps by no more than\n\n    d\n at once. Example Input 6 LRLRRLL L LLR RRRR LLLLLL R Output 3 2 3 1 7\n1 Note The picture describing the first test case of the example and one of\nthe possible answers: In the second test case of the example, the frog can\nonly jump directly from \n    0\n to \n    n+1\n. In the third test case of the\nexample, the frog can choose \n    d=3\n, jump to the cell \n    3\n from the cell\n\n    0\n and then to the cell \n    4\n from the cell \n    3\n. In the fourth test\ncase of the example, the frog can choose \n    d=1\n and jump \n    5\n times to\nthe right. In the fifth test case of the example, the frog can only jump\ndirectly from \n    0\n to \n    n+1\n. In the sixth test case of the example, the\nfrog can choose \n    d=1\n and jump \n    2\n times to the right.\n\n",
        "cf_contest_id": 1324,
        "cf_index": "C",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\nLRLRRLL\r\nL\r\nLLR\r\nRRRR\r\nLLLLLL\r\nR\r\n",
                "3\r\n2\r\n3\r\n1\r\n7\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]