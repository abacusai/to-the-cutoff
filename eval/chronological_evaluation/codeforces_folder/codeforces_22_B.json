[
    {
        "name": "Bargaining Table",
        "description": "Bob wants to put a new bargaining table in his office. To do so he measured\nthe office room thoroughly and drew its plan: Bob's office room is a\nrectangular room n \u00d7 m meters. Each square meter of the room is either\noccupied by some furniture, or free. A bargaining table is rectangular, and\nshould be placed so, that its sides are parallel to the office walls. Bob\ndoesn't want to change or rearrange anything, that's why all the squares that\nwill be occupied by the table should be initially free. Bob wants the new\ntable to sit as many people as possible, thus its perimeter should be maximal.\nHelp Bob find out the maximum possible perimeter of a bargaining table for his\noffice. Input The first line contains 2 space-separated numbers n and m (1 \u2264\nn, m \u2264 25) \u2014 the office room dimensions. Then there follow n lines with m\ncharacters 0 or 1 each. 0 stands for a free square meter of the office room. 1\nstands for an occupied square meter. It's guaranteed that at least one square\nmeter in the room is free. Output Output one number \u2014 the maximum possible\nperimeter of a bargaining table for Bob's office room. Examples Input 3 3 000\n010 000 Output 8 Input 5 4 1100 0000 0000 0000 0000 Output 16\n\n",
        "cf_contest_id": 22,
        "cf_index": "B",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dp"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\n000\r\n010\r\n000\r\n",
                "8\r\n"
            ],
            [
                "5 4\r\n1100\r\n0000\r\n0000\r\n0000\r\n0000\r\n",
                "16\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 3\r\n000\r\n110\r\n000\r\n",
                "8\r\n"
            ],
            [
                "4 2\r\n00\r\n10\r\n11\r\n00\r\n",
                "6\r\n"
            ],
            [
                "3 5\r\n00001\r\n00000\r\n10100\r\n",
                "12\r\n"
            ],
            [
                "1 1\r\n0\r\n",
                "4\r\n"
            ],
            [
                "10 11\r\n11111111101\r\n01111111111\r\n11101111111\r\n01111110111\r\n11111111111\r\n11111111111\r\n11111111111\r\n11110111111\r\n11111111111\r\n11111111111\r\n",
                "4\r\n"
            ],
            [
                "7 7\r\n1110111\r\n1111111\r\n1111101\r\n1111101\r\n1111111\r\n1100111\r\n1011111\r\n",
                "6\r\n"
            ],
            [
                "10 10\r\n0110001011\r\n0101010111\r\n0010110100\r\n1010000110\r\n0111100011\r\n1010100100\r\n1010010000\r\n1011100011\r\n1110011000\r\n0010100101\r\n",
                "16\r\n"
            ],
            [
                "25 1\r\n1\r\n1\r\n1\r\n0\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n0\r\n1\r\n1\r\n1\r\n1\r\n1\r\n0\r\n1\r\n1\r\n1\r\n0\r\n1\r\n1\r\n1\r\n1\r\n",
                "4\r\n"
            ],
            [
                "25 1\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n",
                "52\r\n"
            ],
            [
                "1 25\r\n1111111111111111011010110\r\n",
                "4\r\n"
            ],
            [
                "1 25\r\n0000000000000000000000000\r\n",
                "52\r\n"
            ],
            [
                "3 4\r\n1111\r\n1101\r\n1011\r\n",
                "4\r\n"
            ]
        ]
    }
]