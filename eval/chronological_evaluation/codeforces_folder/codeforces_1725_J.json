[
    {
        "name": "Journey",
        "description": "One day, Pak Chanek who is already bored of being alone at home decided to go\ntraveling. While looking for an appropriate place, he found that Londonesia\nhas an interesting structure. According to the information gathered by Pak\nChanek, there are \n    N\n cities numbered from \n    1\n to \n    N\n. The cities\nare connected to each other with \n    N-1\n two-directional roads, with the\n\n    i\n-th road connecting cities \n    U_i\n and \n    V_i\n, and taking a time\nof \n    W_i\n hours to be traversed. In other words, Londonesia's structure\nforms a tree. Pak Chanek wants to go on a journey in Londonesia starting and\nending in any city (not necessarily the same city) such that each city is\nvisited at least once with the least time possible. In order for the journey\nto end quicker, Pak Chanek also carries an instant teleportation device for\nmoving from one city to any city that can only be used at most once. Help Pak\nChanek for finding the minimum time needed. Notes: Pak Chanek only needs to\nvisit each city at least once. Pak Chanek does not have to traverse each road.\nIn the journey, a city or a road can be visited more than once. Input The\nfirst line contains a single integer \n    N\n (\n    1 \n    \u2264 N \n    \u2264 10^5\n) \u2014\nthe number of cities in Londonesia. The \n    i\n-th of the next \n    N-1\n lines\ncontains three integers \n    U_i\n, \n    V_i\n, and \n    W_i\n (\n    1 \n    \u2264 U_i,\n    V_i \n    \u2264 N\n, \n    1 \n    \u2264 W_i \n    \u2264 10^9\n) \u2014 a two-directional road that\nconnects cities \n    U_i\n and \n    V_i\n that takes \n    W_i\n hours to be\ntraversed. The roads in Londonesia form a tree. Output Output one integer,\nwhich represents the minimum time in hours that is needed to visit each city\nat least once. Examples Input 4 1 2 4 2 3 5 3 4 4 Output 8 Input 5 1 2 45 1 3\n50 1 4 10 1 5 65 Output 115 Note In the first example, the journey that has\nthe minimum time is \n    2 \u2192 1 \n     4 \u2192 3\n. In\nthe second example, the journey that has the minimum time is \n    3 \u2192 1 \u2192 4 \u2192 1\n    \u2192 2 \n     5\n.\n\n",
        "cf_contest_id": 1725,
        "cf_index": "J",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 2 4\r\n2 3 5\r\n3 4 4\r\n",
                "8\r\n"
            ],
            [
                "5\r\n1 2 45\r\n1 3 50\r\n1 4 10\r\n1 5 65\r\n",
                "115\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n",
                "0\r\n"
            ],
            [
                "2\r\n1 2 589284012\r\n",
                "0\r\n"
            ],
            [
                "3\r\n3 2 38219291\r\n3 1 38219290\r\n",
                "38219290\r\n"
            ],
            [
                "4\r\n1 2 1000000000\r\n4 1 1000000000\r\n1 3 1000000000\r\n",
                "2000000000\r\n"
            ],
            [
                "4\r\n1 2 647212241\r\n1 4 921212095\r\n3 1 585063857\r\n",
                "1232276098\r\n"
            ],
            [
                "4\r\n1 2 909729626\r\n2 3 454895875\r\n2 4 669546421\r\n",
                "1124442296\r\n"
            ],
            [
                "4\r\n2 3 693523526\r\n4 3 412726717\r\n1 2 469855690\r\n",
                "882582407\r\n"
            ],
            [
                "5\r\n1 2 319475350\r\n2 3 957533970\r\n3 4 60895095\r\n5 4 292762468\r\n",
                "673132913\r\n"
            ],
            [
                "8\r\n1 2 1\r\n2 3 50\r\n2 4 50\r\n1 5 1\r\n5 6 1000\r\n6 7 1\r\n6 8 1\r\n",
                "106\r\n"
            ],
            [
                "15\r\n1 2 2\r\n2 4 1\r\n4 5 1\r\n5 6 1\r\n2 7 1\r\n7 8 1\r\n8 9 1\r\n1 3 3\r\n3 10 1\r\n10 11 1\r\n11 12 1\r\n3 13 1\r\n13 14 1\r\n14 15 1\r\n",
                "16\r\n"
            ]
        ]
    }
]