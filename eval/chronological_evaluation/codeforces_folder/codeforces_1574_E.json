[
    {
        "name": "Coloring",
        "description": "A matrix of size \n    n \n    \u00d7 m\n, such that each cell of it contains either\n\n    0\n or \n    1\n, is considered beautiful if the sum in every contiguous\nsubmatrix of size \n    2 \n    \u00d7 2\n is exactly \n    2\n, i. e. every \"square\"\nof size \n    2 \n    \u00d7 2\n contains exactly two \n    1\n's and exactly two\n\n    0\n's. You are given a matrix of size \n    n \n    \u00d7 m\n. Initially each\ncell of this matrix is empty. Let's denote the cell on the intersection of the\n\n    x\n-th row and the \n    y\n-th column as \n    (x, y)\n. You have to process\nthe queries of three types: \n    x\n \n    y\n \n    -1\n \u2014 clear the cell \n    (x,\n    y)\n, if there was a number in it; \n    x\n \n    y\n \n    0\n \u2014 write the number\n\n    0\n in the cell \n    (x, y)\n, overwriting the number that was there\npreviously (if any); \n    x\n \n    y\n \n    1\n \u2014 write the number \n    1\n in the\ncell \n    (x, y)\n, overwriting the number that was there previously (if any).\nAfter each query, print the number of ways to fill the empty cells of the\nmatrix so that the resulting matrix is beautiful. Since the answers can be\nlarge, print them modulo \n    998244353\n. Input The first line contains three\nintegers \n    n\n, \n    m\n and \n    k\n (\n    2 \n    \u2264 n, m \n    \u2264 10^6\n; \n    1\n    \n    \u2264 k \n    \u2264 3 \n    \u00b7 10^5\n) \u2014 the number of rows in the matrix, the\nnumber of columns, and the number of queries, respectively. Then \n    k\n lines\nfollow, the \n    i\n-th of them contains three integers \n    x_i\n, \n    y_i\n,\n\n    t_i\n (\n    1 \n    \u2264 x_i \n    \u2264 n\n; \n    1 \n    \u2264 y_i \n    \u2264 m\n; \n    -1 \n    \u2264\n    t_i \n    \u2264 1\n) \u2014 the parameters for the \n    i\n-th query. Output For each\nquery, print one integer \u2014 the number of ways to fill the empty cells of the\nmatrix after the respective query, taken modulo \n    998244353\n. Example Input\n2 2 7 1 1 1 1 2 1 2 1 1 1 1 0 1 2 -1 2 1 -1 1 1 -1 Output 3 1 0 1 2 3 6\n\n",
        "cf_contest_id": 1574,
        "cf_index": "E",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "constructive algorithms",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 2 7\r\n1 1 1\r\n1 2 1\r\n2 1 1\r\n1 1 0\r\n1 2 -1\r\n2 1 -1\r\n1 1 -1\r\n",
                "3\r\n1\r\n0\r\n1\r\n2\r\n3\r\n6\r\n"
            ]
        ],
        "private_cases": [
            [
                "22194 20188 1\r\n1 1 -1\r\n",
                "998244352\r\n"
            ],
            [
                "233333 666666 2\r\n1 114515 1\r\n2 1 0\r\n",
                "527872471\r\n263936235\r\n"
            ]
        ]
    }
]