[
    {
        "name": "Economic Difficulties",
        "description": "An electrical grid in Berland palaces consists of 2 grids: main and reserve.\nWires in palaces are made of expensive material, so selling some of them would\nbe a good idea! Each grid (main and reserve) has a head node (its number is\n\n    1\n). Every other node gets electricity from the head node. Each node can\nbe reached from the head node by a unique path. Also, both grids have exactly\n\n    n\n nodes, which do not spread electricity further. In other words, every\ngrid is a rooted directed tree on \n    n\n leaves with a root in the node,\nwhich number is \n    1\n. Each tree has independent enumeration and nodes from\none grid are not connected with nodes of another grid. Also, the palace has\n\n    n\n electrical devices. Each device is connected with one node of the main\ngrid and with one node of the reserve grid. Devices connect only with nodes,\nfrom which electricity is not spread further (these nodes are the tree's\nleaves). Each grid's leaf is connected with exactly one device. In this\nexample the main grid contains \n    6\n nodes (the top tree) and the reserve\ngrid contains \n    4\n nodes (the lower tree). There are \n    3\n devices with\nnumbers colored in blue. It is guaranteed that the whole grid (two grids and\n\n    n\n devices) can be shown in this way (like in the picture above): main\ngrid is a top tree, whose wires are directed 'from the top to the down',\nreserve grid is a lower tree, whose wires are directed 'from the down to the\ntop', devices \u2014 horizontal row between two grids, which are numbered from\n\n    1\n to \n    n\n from the left to the right, wires between nodes do not\nintersect. Formally, for each tree exists a depth-first search from the node\nwith number \n    1\n, that visits leaves in order of connection to devices\n\n    1, 2, \n    \u2026, n\n (firstly, the node, that is connected to the device\n\n    1\n, then the node, that is connected to the device \n    2\n, etc.).\nBusinessman wants to sell (remove) maximal amount of wires so that each device\nwill be powered from at least one grid (main or reserve). In other words, for\neach device should exist at least one path to the head node (in the main grid\nor the reserve grid), which contains only nodes from one grid. Input The first\nline contains an integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 1000\n) \u2014 the number of\ndevices in the palace. The next line contains an integer \n    a\n (\n    1 + n\n    \n    \u2264 a \n    \u2264 1000 + n\n) \u2014 the amount of nodes in the main grid. Next line\ncontains \n    a - 1\n integers \n    p_i\n (\n    1 \n    \u2264 p_i \n    \u2264 a\n). Each\ninteger \n    p_i\n means that the main grid contains a wire from \n    p_i\n-th\nnode to \n    (i + 1)\n-th. The next line contains \n    n\n integers \n    x_i\n\n(\n    1 \n    \u2264 x_i \n    \u2264 a\n) \u2014 the number of a node in the main grid that is\nconnected to the \n    i\n-th device. The next line contains an integer \n    b\n\n(\n    1 + n \n    \u2264 b \n    \u2264 1000 + n\n) \u2014 the amount of nodes in the reserve\ngrid. Next line contains \n    b - 1\n integers \n    q_i\n (\n    1 \n    \u2264 q_i \n    \u2264\n    b\n). Each integer \n    q_i\n means that the reserve grid contains a wire from\n\n    q_i\n-th node to \n    (i + 1)\n-th. The next line contains \n    n\n integers\n\n    y_i\n (\n    1 \n    \u2264 y_i \n    \u2264 b\n) \u2014 the number of a node in the reserve\ngrid that is connected to the \n    i\n-th device. It is guaranteed that each\ngrid is a tree, which has exactly \n    n\n leaves and each leaf is connected\nwith one device. Also, it is guaranteed, that for each tree exists a depth-\nfirst search from the node \n    1\n, that visits leaves in order of connection\nto devices. Output Print a single integer \u2014 the maximal amount of wires that\ncan be cut so that each device is powered. Examples Input 3 6 4 1 1 4 2 6 5 3\n4 1 1 1 3 4 2 Output 5 Input 4 6 4 4 1 1 1 3 2 6 5 6 6 6 1 1 1 5 4 3 2 Output\n6 Input 5 14 1 1 11 2 14 14 13 7 12 2 5 6 1 9 8 3 10 4 16 1 1 9 9 2 5 10 1 14\n3 7 11 6 12 2 8 16 13 4 15 Output 17 Note For the first example, the picture\nbelow shows one of the possible solutions (wires that can be removed are\nmarked in red): The second and the third examples can be seen below:\n\n",
        "cf_contest_id": 1263,
        "cf_index": "F",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "dp",
            "flows",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n6\r\n4 1 1 4 2\r\n6 5 3\r\n4\r\n1 1 1\r\n3 4 2\r\n",
                "5"
            ],
            [
                "4\r\n6\r\n4 4 1 1 1\r\n3 2 6 5\r\n6\r\n6 6 1 1 1\r\n5 4 3 2\r\n",
                "6"
            ],
            [
                "5\r\n14\r\n1 1 11 2 14 14 13 7 12 2 5 6 1\r\n9 8 3 10 4\r\n16\r\n1 1 9 9 2 5 10 1 14 3 7 11 6 12 2\r\n8 16 13 4 15\r\n",
                "17"
            ]
        ],
        "private_cases": [
            [
                "4\r\n12\r\n1 11 7 2 8 5 12 12 1 6 1\r\n3 9 10 4\r\n10\r\n1 1 5 8 9 9 6 2 2\r\n3 4 7 10\r\n",
                "14"
            ],
            [
                "1\r\n2\r\n1\r\n2\r\n2\r\n1\r\n2\r\n",
                "1"
            ],
            [
                "10\r\n11\r\n1 1 1 1 1 1 1 1 1 1\r\n6 7 4 11 3 9 2 5 10 8\r\n11\r\n1 1 1 1 1 1 1 1 1 1\r\n6 5 3 9 8 11 2 7 4 10\r\n",
                "10"
            ],
            [
                "10\r\n14\r\n1 1 1 11 4 10 1 10 4 1 1 11 4\r\n2 9 7 14 6 12 8 5 13 3\r\n11\r\n1 1 1 1 1 1 1 1 1 1\r\n8 10 7 9 3 11 4 2 6 5\r\n",
                "13"
            ],
            [
                "10\r\n13\r\n5 5 1 1 1 5 7 1 7 1 1 1\r\n13 11 12 8 10 2 3 9 6 4\r\n17\r\n1 17 9 9 2 11 11 3 3 17 1 3 11 9 1 16\r\n12 10 13 15 5 4 7 8 14 6\r\n",
                "16"
            ]
        ]
    }
]