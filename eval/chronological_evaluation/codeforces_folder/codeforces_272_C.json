[
    {
        "name": "Dima and Staircase",
        "description": "Dima's got a staircase that consists of n stairs. The first stair is at height\na1, the second one is at a2, the last one is at an (1 \u2264 a1 \u2264 a2 \u2264 ... \u2264 an).\nDima decided to play with the staircase, so he is throwing rectangular boxes\nat the staircase from above. The i-th box has width wi and height hi. Dima\nthrows each box vertically down on the first wi stairs of the staircase, that\nis, the box covers stairs with numbers 1, 2, ..., wi. Each thrown box flies\nvertically down until at least one of the two following events happen: the\nbottom of the box touches the top of a stair; the bottom of the box touches\nthe top of a box, thrown earlier. We only consider touching of the horizontal\nsides of stairs and boxes, at that touching with the corners isn't taken into\nconsideration. Specifically, that implies that a box with width wi cannot\ntouch the stair number wi + 1. You are given the description of the staircase\nand the sequence in which Dima threw the boxes at it. For each box, determine\nhow high the bottom of the box after landing will be. Consider a box to fall\nafter the previous one lands. Input The first line contains integer n (1 \u2264 n \u2264\n10^5) \u2014 the number of stairs in the staircase. The second line contains a non-\ndecreasing sequence, consisting of n integers, a1, a2, ..., an (1 \u2264 ai \u2264 10^9;\nai \u2264 ai + 1). The next line contains integer m (1 \u2264 m \u2264 10^5) \u2014 the number of\nboxes. Each of the following m lines contains a pair of integers wi, hi (1 \u2264\nwi \u2264 n; 1 \u2264 hi \u2264 10^9) \u2014 the size of the i-th thrown box. The numbers in the\nlines are separated by spaces. Output Print m integers \u2014 for each box the\nheight, where the bottom of the box will be after landing. Print the answers\nfor the boxes in the order, in which the boxes are given in the input. Please,\ndo not use the \npreferred to use the cin, cout streams or the \n5 1 2 3 6 6 4 1 1 3 1 1 1 4 3 Output 1 3 4 6 Input 3 1 2 3 2 1 1 3 1 Output 1\n3 Input 1 1 5 1 2 1 10 1 10 1 10 1 10 Output 1 3 13 23 33 Note The first\nsample are shown on the picture.\n\n",
        "cf_contest_id": 272,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 2 3 6 6\r\n4\r\n1 1\r\n3 1\r\n1 1\r\n4 3\r\n",
                "1\r\n3\r\n4\r\n6\r\n"
            ],
            [
                "3\r\n1 2 3\r\n2\r\n1 1\r\n3 1\r\n",
                "1\r\n3\r\n"
            ],
            [
                "1\r\n1\r\n5\r\n1 2\r\n1 10\r\n1 10\r\n1 10\r\n1 10\r\n",
                "1\r\n3\r\n13\r\n23\r\n33\r\n"
            ]
        ],
        "private_cases": [
            [
                "8\r\n6 10 18 23 30 31 31 33\r\n1\r\n5 3\r\n",
                "30\r\n"
            ],
            [
                "7\r\n8 13 19 21 25 30 32\r\n3\r\n5 4\r\n6 5\r\n1 2\r\n",
                "25\r\n30\r\n35\r\n"
            ],
            [
                "5\r\n4 7 10 12 12\r\n9\r\n3 9\r\n2 1\r\n3 5\r\n4 7\r\n1 1\r\n5 1\r\n1 7\r\n2 4\r\n4 10\r\n",
                "10\r\n19\r\n20\r\n25\r\n32\r\n33\r\n34\r\n41\r\n45\r\n"
            ],
            [
                "3\r\n1 6 8\r\n5\r\n3 4\r\n3 9\r\n3 3\r\n1 2\r\n1 6\r\n",
                "8\r\n12\r\n21\r\n24\r\n26\r\n"
            ],
            [
                "3\r\n2 10 15\r\n1\r\n1 830\r\n",
                "2\r\n"
            ],
            [
                "2\r\n1 6\r\n5\r\n2 6\r\n1 2\r\n1 1\r\n1 2\r\n1 7\r\n",
                "6\r\n12\r\n14\r\n15\r\n17\r\n"
            ],
            [
                "1\r\n9\r\n8\r\n1 4\r\n1 10\r\n1 9\r\n1 9\r\n1 7\r\n1 1\r\n1 9\r\n1 2\r\n",
                "9\r\n13\r\n23\r\n32\r\n41\r\n48\r\n49\r\n58\r\n"
            ],
            [
                "1\r\n8\r\n1\r\n1 42\r\n",
                "8\r\n"
            ],
            [
                "1\r\n1\r\n1\r\n1 1\r\n",
                "1\r\n"
            ],
            [
                "5\r\n1 2 3 6 6\r\n25\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n",
                "1\r\n1000000001\r\n2000000001\r\n3000000001\r\n4000000001\r\n5000000001\r\n6000000001\r\n7000000001\r\n8000000001\r\n9000000001\r\n10000000001\r\n11000000001\r\n12000000001\r\n13000000001\r\n14000000001\r\n15000000001\r\n16000000001\r\n17000000001\r\n18000000001\r\n19000000001\r\n20000000001\r\n21000000001\r\n22000000001\r\n23000000001\r\n24000000001\r\n"
            ],
            [
                "1\r\n1000000000\r\n6\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n",
                "1000000000\r\n2000000000\r\n3000000000\r\n4000000000\r\n5000000000\r\n6000000000\r\n"
            ]
        ]
    }
]