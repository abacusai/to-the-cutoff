[
    {
        "name": "Run for beer",
        "description": "People in BubbleLand like to drink beer. Little do you know, beer here is so\ngood and strong that every time you drink it your speed goes 10 times slower\nthan before you drank it. Birko lives in city Beergrade, but wants to go to\ncity Beerburg. You are given a road map of BubbleLand and you need to find the\nfastest way for him. When he starts his journey in Beergrade his speed is 1.\nWhen he comes to a new city he always tries a glass of local beer, which\ndivides his speed by 10. The question here is what the minimal time for him to\nreach Beerburg is. If there are several paths with the same minimal time, pick\nthe one that has least roads on it. If there is still more than one path, pick\nany. It is guaranteed that there will be at least one path from Beergrade to\nBeerburg. Input The first line of input contains integer N \u2014 the number of\ncities in Bubbleland and integer M \u2014 the number of roads in this country.\nCities are enumerated from 0 to N - 1, with city 0 being Beergrade, and city N\n- 1 being Beerburg. Each of the following M lines contains three integers a, b\n(a \u2260 b) and len. These numbers indicate that there is a bidirectional road\nbetween cities a and b with length len. 2 \u2264 N \u2264 10^5 1 \u2264 M \u2264 10^5 0 \u2264 len \u2264 9\nThere is at most one road between two cities Output The first line of output\nshould contain minimal time needed to go from Beergrade to Beerburg. The\nsecond line of the output should contain the number of cities on the path from\nBeergrade to Beerburg that takes minimal time. The third line of output should\ncontain the numbers of cities on this path in the order they are visited,\nseparated by spaces. Examples Input 8 10 0 1 1 1 2 5 2 7 6 0 3 2 3 7 3 0 4 0 4\n5 0 5 7 2 0 6 0 6 7 7 Output 32 3 0 3 7\n\n",
        "cf_contest_id": 575,
        "cf_index": "G",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "shortest paths"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8 10\r\n0 1 1\r\n1 2 5\r\n2 7 6\r\n0 3 2\r\n3 7 3\r\n0 4 0\r\n4 5 0\r\n5 7 2\r\n0 6 0\r\n6 7 7\r\n",
                "32\r\n3\r\n0 3 7 "
            ]
        ],
        "private_cases": [
            [
                "10 20\r\n0 2 7\r\n0 3 5\r\n0 4 8\r\n0 9 9\r\n1 2 7\r\n1 4 7\r\n1 5 7\r\n1 6 8\r\n1 7 0\r\n1 9 9\r\n2 3 6\r\n2 5 6\r\n2 6 8\r\n3 6 1\r\n3 7 5\r\n3 9 1\r\n5 9 8\r\n6 8 9\r\n7 9 7\r\n8 9 5\r\n",
                "9\r\n2\r\n0 9 "
            ],
            [
                "3 3\r\n0 1 9\r\n0 2 2\r\n1 2 1\r\n",
                "2\r\n2\r\n0 2 "
            ],
            [
                "8 10\r\n0 1 1\r\n1 2 5\r\n2 7 6\r\n0 3 2\r\n3 7 3\r\n0 4 0\r\n4 5 0\r\n5 7 2\r\n0 6 0\r\n6 7 7\r\n",
                "32\r\n3\r\n0 3 7 "
            ],
            [
                "8 10\r\n7 1 1\r\n1 2 5\r\n2 0 6\r\n7 3 2\r\n3 0 3\r\n7 4 0\r\n4 5 0\r\n5 0 2\r\n7 6 0\r\n6 0 7\r\n",
                "2\r\n4\r\n0 5 4 7 "
            ],
            [
                "4 4\r\n3 1 1\r\n3 2 1\r\n1 0 2\r\n2 0 3\r\n",
                "12\r\n3\r\n0 1 3 "
            ],
            [
                "4 4\r\n3 1 1\r\n3 2 0\r\n1 0 2\r\n2 0 3\r\n",
                "3\r\n3\r\n0 2 3 "
            ],
            [
                "5 7\r\n4 1 0\r\n1 2 0\r\n2 4 0\r\n3 4 0\r\n3 0 1\r\n1 0 2\r\n2 0 3\r\n",
                "1\r\n3\r\n0 3 4 "
            ],
            [
                "7 7\r\n6 1 0\r\n6 2 1\r\n2 3 0\r\n1 4 1\r\n4 5 2\r\n3 5 0\r\n5 0 0\r\n",
                "120\r\n5\r\n0 5 4 1 6 "
            ],
            [
                "6 6\r\n5 1 0\r\n5 2 1\r\n1 3 1\r\n2 4 2\r\n3 4 2\r\n4 0 0\r\n",
                "120\r\n4\r\n0 4 2 5 "
            ]
        ]
    }
]