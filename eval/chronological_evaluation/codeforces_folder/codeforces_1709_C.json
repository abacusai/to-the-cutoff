[
    {
        "name": "Recover an RBS",
        "description": "A bracket sequence is a string containing only characters \"(\" and \")\". A\nregular bracket sequence (or, shortly, an RBS) is a bracket sequence that can\nbe transformed into a correct arithmetic expression by inserting characters\n\"1\" and \"+\" between the original characters of the sequence. For example:\nbracket sequences \"()()\" and \"(())\" are regular (the resulting expressions\nare: \"(1)+(1)\" and \"((1+1)+1)\"); bracket sequences \")(\", \"(\" and \")\" are not.\nThere was an RBS. Some brackets have been replaced with question marks. Is it\ntrue that there is a unique way to replace question marks with brackets, so\nthat the resulting sequence is an RBS? Input The first line contains a single\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 5 \n    \u00b7 10^4\n) \u2014 the number of\ntestcases. The only line of each testcase contains an RBS with some brackets\nreplaced with question marks. Each character is either '(', ')' or '?'. At\nleast one RBS can be recovered from the given sequence. The total length of\nthe sequences over all testcases doesn't exceed \n    2 \n    \u00b7 10^5\n. Output\nFor each testcase, print \"YES\" if the way to replace question marks with\nbrackets, so that the resulting sequence is an RBS, is unique. If there is\nmore than one way, then print \"NO\". Example Input 5 (?)) ?????? () ?? ?(?)()?)\nOutput YES NO YES YES NO Note In the first testcase, the only possible\noriginal RBS is \"(())\". In the second testcase, there are multiple ways to\nrecover an RBS. In the third and the fourth testcases, the only possible\noriginal RBS is \"()\". In the fifth testcase, the original RBS can be either\n\"((()()))\" or \"(())()()\".\n\n",
        "cf_contest_id": 1709,
        "cf_index": "C",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n(?))\r\n??????\r\n()\r\n??\r\n?(?)()?)\r\n",
                "YES\r\nNO\r\nYES\r\nYES\r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n????????????????????))))))))))))))))))))(((((?????\r\n",
                "YES\r\n"
            ],
            [
                "1\r\n((((((((((((((((((((((?????????????????????)\r\n",
                "YES\r\n"
            ],
            [
                "1\r\n????????????((((((((((())))))))))))))))))))))?\r\n",
                "YES\r\n"
            ],
            [
                "1\r\n????????))))))))????\r\n",
                "NO\r\n"
            ]
        ]
    }
]