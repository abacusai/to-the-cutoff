[
    {
        "name": "Rock-Paper-Scissors Champion",
        "description": "\n    n\n players are going to play a rock-paper-scissors tournament. As you\nprobably know, in a one-on-one match of rock-paper-scissors, two players\nchoose their shapes independently. The outcome is then determined depending on\nthe chosen shapes: \"paper\" beats \"rock\", \"rock\" beats \"scissors\", \"scissors\"\nbeat \"paper\", and two equal shapes result in a draw. At the start of the\ntournament all players will stand in a row, with their numbers increasing from\n\n    1\n for the leftmost player, to \n    n\n for the rightmost player. Each\nplayer has a pre-chosen shape that they will use in every game throughout the\ntournament. Here's how the tournament is conducted: If there is only one\nplayer left, he is declared the champion. Otherwise, two adjacent players in\nthe row are chosen arbitrarily, and they play the next match. The losing\nplayer is eliminated from the tournament and leaves his place in the row (with\nhis former neighbours becoming adjacent). If the game is a draw, the losing\nplayer is determined by a coin toss.The organizers are informed about all\nplayers' favoured shapes. They wish to find out the total number of players\nwho have a chance of becoming the tournament champion (that is, there is a\nsuitable way to choose the order of the games and manipulate the coin tosses).\nHowever, some players are still optimizing their strategy, and can inform the\norganizers about their new shapes. Can you find the number of possible\nchampions after each such request? Input The first line contains two integers\n\n    n\n and \n    q\n \u2014 the number of players and requests respectively (\n    1\n    \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n, \n    0 \n    \u2264 q \n    \u2264 2 \n    \u00b7 10^5\n).\nThe second line contains a string of \n    n\n characters. The \n    i\n-th of\nthese characters is \"R\", \"P\", or \"S\" if the player \n    i\n was going to play\n\"rock\", \"paper\", or \"scissors\" before all requests respectively. The following\n\n    q\n lines describe the requests. The \n    j\n-th of these lines contain an\ninteger \n    p_j\n and a character \n    c_j\n meaning that the player \n    p_j\n\nis going to use the shape described by the character \n    c_j\n from this\nmoment (\n    1 \n    \u2264 p_j \n    \u2264 n\n). Output Print \n    q + 1\n integers\n\n    r_0, \n    \u2026, r_q\n, where \n    r_k\n is the number of possible champions\nafter processing \n    k\n requests. Example Input 3 5 RPS 1 S 2 R 3 P 1 P 2 P\nOutput 2 2 1 2 2 3\n\n",
        "cf_contest_id": 1085,
        "cf_index": "F",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 5\r\nRPS\r\n1 S\r\n2 R\r\n3 P\r\n1 P\r\n2 P\r\n",
                "2\r\n2\r\n1\r\n2\r\n2\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 0\r\nS\r\n",
                "1\r\n"
            ],
            [
                "10 10\r\nPSSSSPSPRR\r\n9 S\r\n2 P\r\n6 R\r\n6 P\r\n4 R\r\n1 S\r\n4 P\r\n7 P\r\n1 R\r\n5 R\r\n",
                "8\r\n7\r\n7\r\n9\r\n7\r\n9\r\n8\r\n5\r\n4\r\n9\r\n9\r\n"
            ],
            [
                "2 8\r\nRR\r\n2 P\r\n2 S\r\n1 P\r\n2 P\r\n2 R\r\n1 S\r\n2 P\r\n2 S\r\n",
                "2\r\n1\r\n1\r\n1\r\n2\r\n1\r\n1\r\n1\r\n2\r\n"
            ],
            [
                "3 26\r\nRRR\r\n3 P\r\n3 S\r\n2 P\r\n3 P\r\n3 R\r\n2 S\r\n3 P\r\n3 S\r\n1 P\r\n3 P\r\n3 R\r\n2 P\r\n3 P\r\n3 S\r\n2 R\r\n3 P\r\n3 R\r\n1 S\r\n3 P\r\n3 S\r\n2 P\r\n3 P\r\n3 R\r\n2 S\r\n3 P\r\n3 S\r\n",
                "3\r\n1\r\n2\r\n2\r\n2\r\n1\r\n2\r\n2\r\n1\r\n2\r\n1\r\n2\r\n2\r\n3\r\n1\r\n2\r\n2\r\n1\r\n2\r\n2\r\n1\r\n2\r\n1\r\n2\r\n1\r\n2\r\n3\r\n"
            ],
            [
                "4 80\r\nRRRR\r\n4 P\r\n4 S\r\n3 P\r\n4 P\r\n4 R\r\n3 S\r\n4 P\r\n4 S\r\n2 P\r\n4 P\r\n4 R\r\n3 P\r\n4 P\r\n4 S\r\n3 R\r\n4 P\r\n4 R\r\n2 S\r\n4 P\r\n4 S\r\n3 P\r\n4 P\r\n4 R\r\n3 S\r\n4 P\r\n4 S\r\n1 P\r\n4 P\r\n4 R\r\n3 P\r\n4 P\r\n4 S\r\n3 R\r\n4 P\r\n4 R\r\n2 P\r\n4 P\r\n4 S\r\n3 P\r\n4 P\r\n4 R\r\n3 S\r\n4 P\r\n4 S\r\n2 R\r\n4 P\r\n4 R\r\n3 P\r\n4 P\r\n4 S\r\n3 R\r\n4 P\r\n4 R\r\n1 S\r\n4 P\r\n4 S\r\n3 P\r\n4 P\r\n4 R\r\n3 S\r\n4 P\r\n4 S\r\n2 P\r\n4 P\r\n4 R\r\n3 P\r\n4 P\r\n4 S\r\n3 R\r\n4 P\r\n4 R\r\n2 S\r\n4 P\r\n4 S\r\n3 P\r\n4 P\r\n4 R\r\n3 S\r\n4 P\r\n4 S\r\n",
                "4\r\n1\r\n3\r\n3\r\n2\r\n1\r\n3\r\n3\r\n2\r\n3\r\n3\r\n3\r\n2\r\n3\r\n2\r\n3\r\n2\r\n1\r\n3\r\n2\r\n2\r\n2\r\n3\r\n3\r\n2\r\n2\r\n1\r\n3\r\n2\r\n2\r\n3\r\n1\r\n2\r\n3\r\n3\r\n3\r\n2\r\n3\r\n3\r\n1\r\n4\r\n3\r\n3\r\n1\r\n2\r\n3\r\n3\r\n2\r\n2\r\n3\r\n2\r\n2\r\n2\r\n1\r\n3\r\n2\r\n2\r\n3\r\n3\r\n3\r\n2\r\n3\r\n1\r\n3\r\n2\r\n2\r\n2\r\n1\r\n2\r\n3\r\n2\r\n3\r\n2\r\n3\r\n1\r\n3\r\n2\r\n3\r\n1\r\n3\r\n4\r\n"
            ]
        ]
    }
]