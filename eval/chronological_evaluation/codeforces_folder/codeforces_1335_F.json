[
    {
        "name": "Robots on a Grid",
        "description": "There is a rectangular grid of size \n    n \n    \u00d7 m\n. Each cell of the grid\nis colored black ('0') or white ('1'). The color of the cell \n    (i, j)\n is\n\n    c_i, j\n. You are also given a map of directions: for each cell, there\nis a direction \n    s_i, j\n which is one of the four characters 'U', 'R',\n'D' and 'L'. If \n    s_i, j\n is 'U' then there is a transition from the cell\n\n    (i, j)\n to the cell \n    (i - 1, j)\n; if \n    s_i, j\n is 'R' then there\nis a transition from the cell \n    (i, j)\n to the cell \n    (i, j + 1)\n; if\n\n    s_i, j\n is 'D' then there is a transition from the cell \n    (i, j)\n to\nthe cell \n    (i + 1, j)\n; if \n    s_i, j\n is 'L' then there is a transition\nfrom the cell \n    (i, j)\n to the cell \n    (i, j - 1)\n. It is guaranteed that\nthe top row doesn't contain characters 'U', the bottom row doesn't contain\ncharacters 'D', the leftmost column doesn't contain characters 'L' and the\nrightmost column doesn't contain characters 'R'. You want to place some robots\nin this field (at most one robot in a cell). The following conditions should\nbe satisfied. Firstly, each robot should move every time (i.e. it cannot skip\nthe move). During one move each robot goes to the adjacent cell depending on\nthe current direction. Secondly, you have to place robots in such a way that\nthere is no move before which two different robots occupy the same cell (it\nalso means that you cannot place two robots in the same cell). I.e. if the\ngrid is \"RL\" (one row, two columns, colors does not matter there) then you can\nplace two robots in cells \n    (1, 1)\n and \n    (1, 2)\n, but if the grid is\n\"RLL\" then you cannot place robots in cells \n    (1, 1)\n and \n    (1, 3)\n\nbecause during the first second both robots will occupy the cell \n    (1, 2)\n.\nThe robots make an infinite number of moves. Your task is to place the maximum\nnumber of robots to satisfy all the conditions described above and among all\nsuch ways, you have to choose one where the number of black cells occupied by\nrobots before all movements is the maximum possible. Note that you can place\nrobots only before all movements. You have to answer \n    t\n independent test\ncases. Input The first line of the input contains one integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 5 \n    \u00b7 10^4\n) \u2014 the number of test cases. Then \n    t\n test\ncases follow. The first line of the test case contains two integers \n    n\n\nand \n    m\n (\n    1 < nm \n    \u2264 10^6\n) \u2014 the number of rows and the number of\ncolumns correspondingly. The next \n    n\n lines contain \n    m\n characters\neach, where the \n    j\n-th character of the \n    i\n-th line is \n    c_i, j\n\n(\n    c_i, j\n is either '0' if the cell \n    (i, j)\n is black or '1' if the\ncell \n    (i, j)\n is white). The next \n    n\n lines also contain \n    m\n\ncharacters each, where the \n    j\n-th character of the \n    i\n-th line is\n\n    s_i, j\n (\n    s_i, j\n is 'U', 'R', 'D' or 'L' and describes the\ndirection of the cell \n    (i, j)\n). It is guaranteed that the sum of the\nsizes of fields does not exceed \n    10^6\n (\n    \u2211 nm \n    \u2264 10^6\n).\nOutput For each test case, print two integers \u2014 the maximum number of robots\nyou can place to satisfy all the conditions described in the problem statement\nand the maximum number of black cells occupied by robots before all movements\nif the number of robots placed is maximized. Note that you can place robots\nonly before all movements. Example Input 3 1 2 01 RL 3 3 001 101 110 RLL DLD\nULL 3 3 000 000 000 RRD RLD ULL Output 2 1 4 3 2 2\n\n",
        "cf_contest_id": 1335,
        "cf_index": "F",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy",
            "matrices"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 2\r\n01\r\nRL\r\n3 3\r\n001\r\n101\r\n110\r\nRLL\r\nDLD\r\nULL\r\n3 3\r\n000\r\n000\r\n000\r\nRRD\r\nRLD\r\nULL\r\n",
                "2 1\r\n4 3\r\n2 2\r\n"
            ]
        ],
        "private_cases": []
    }
]