[
    {
        "name": "Let's Play the Hat?",
        "description": "The Hat is a game of speedy explanation/guessing words (similar to Alias).\nIt's fun. Try it! In this problem, we are talking about a variant of the game\nwhen the players are sitting at the table and everyone plays individually\n(i.e. not teams, but individual gamers play). \n    n\n people gathered in a\nroom with \n    m\n tables (\n    n \n    \u2265 2m\n). They want to play the Hat \n    k\n\ntimes. Thus, \n    k\n games will be played at each table. Each player will play\nin \n    k\n games. To do this, they are distributed among the tables for each\ngame. During each game, one player plays at exactly one table. A player can\nplay at different tables. Players want to have the most \"fair\" schedule of\ngames. For this reason, they are looking for a schedule (table distribution\nfor each game) such that: At any table in each game there are either\n\n    \u230a\n    n/m\n    \u230b\n people or\n\n    \u2308\n    n/m\n    \u2309\n people (that is, either \n    n/m\n rounded\ndown, or \n    n/m\n rounded up). Different numbers of people can play different\ngames at the same table. Let's calculate for each player the value \n    b_i\n \u2014\nthe number of times the \n    i\n-th player played at a table with\n\n    \u2308\n    n/m\n    \u2309\n persons (\n    n/m\n rounded up). Any two\nvalues of \n    b_i\nmust differ by no more than \n    1\n. In other words, for\nany two players \n    i\n and \n    j\n, it must be true \n    |b_i - b_j| \n    \u2264\n    1\n. For example, if \n    n=5\n, \n    m=2\n and \n    k=2\n, then at the request\nof the first item either two players or three players should play at each\ntable. Consider the following schedules: First game: \n    1, 2, 3\n are played\nat the first table, and \n    4, 5\n at the second one. The second game: at the\nfirst table they play \n    5, 1\n, and at the second \u2014 \n    2, 3, 4\n. This\nschedule is not \"fair\" since \n    b_2=2\n (the second player played twice at a\nbig table) and \n    b_5=0\n (the fifth player did not play at a big table).\nFirst game: \n    1, 2, 3\n are played at the first table, and \n    4, 5\n at the\nsecond one. The second game: at the first table they play \n    4, 5, 2\n, and\nat the second one \u2014 \n    1, 3\n. This schedule is \"fair\": \n    b=[1,2,1,1,1]\n\n(any two values of \n    b_i\n differ by no more than \n    1\n). Find any \"fair\"\ngame schedule for \n    n\n people if they play on the \n    m\n tables of \n    k\n\ngames. Input The first line of the input contains an integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases in the test. Each test case\nconsists of one line that contains three integers \n    n\n, \n    m\n and \n    k\n\n(\n    2 \n    \u2264 n \n    \u2264 2\n    \u00b710^5\n, \n    1 \n    \u2264 m \n    \u2264\n    \u230a\n    n/2\n    \u230b\n, \n    1 \n    \u2264 k \n    \u2264 10^5\n) \u2014 the number\nof people, tables and games, respectively. It is guaranteed that the sum of\n\n    nk\n (\n    n\n multiplied by \n    k\n) over all test cases does not exceed\n\n    2\n    \u00b710^5\n. Output For each test case print a required schedule \u2014 a\nsequence of \n    k\n blocks of \n    m\n lines. Each block corresponds to one\ngame, a line in a block corresponds to one table. In each line print the\nnumber of players at the table and the indices of the players (numbers from\n\n    1\n to \n    n\n) who should play at this table. If there are several\nrequired schedules, then output any of them. We can show that a valid solution\nalways exists. You can output additional blank lines to separate responses to\ndifferent sets of inputs. Example Input 3 5 2 2 8 3 1 2 1 3 Output 3 1 2 3 2 4\n5 3 4 5 2 2 1 3 2 6 2 3 3 5 1 3 4 7 8 2 2 1 2 2 1 2 2 1\n\n",
        "cf_contest_id": 1619,
        "cf_index": "F",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n5 2 2\r\n8 3 1\r\n2 1 3\r\n",
                "3 1 2 3\r\n2 4 5\r\n3 4 5 1\r\n2 2 3\r\n\r\n3 1 2 3\r\n3 4 5 6\r\n2 7 8\r\n\r\n2 1 2\r\n2 1 2\r\n2 1 2\r\n\r\n"
            ]
        ],
        "private_cases": []
    }
]