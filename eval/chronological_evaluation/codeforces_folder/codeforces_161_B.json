[
    {
        "name": "Discounts",
        "description": "One day Polycarpus stopped by a supermarket on his way home. It turns out that\nthe supermarket is having a special offer for stools. The offer is as follows:\nif a customer's shopping cart contains at least one stool, the customer gets a\n50\ncheaper). If there are several items with the same minimum price, the discount\nis available for only one of them! Polycarpus has k carts, and he wants to buy\nup all stools and pencils from the supermarket. Help him distribute the stools\nand the pencils among the shopping carts, so that the items' total price\n(including the discounts) is the least possible. Polycarpus must use all k\ncarts to purchase the items, no shopping cart can remain empty. Each shopping\ncart can contain an arbitrary number of stools and/or pencils. Input The first\ninput line contains two integers n and k (1 \u2264 k \u2264 n \u2264 10^3) \u2014 the number of\nitems in the supermarket and the number of carts, correspondingly. Next n\nlines describe the items as \"ci ti\" (without the quotes), where ci (1 \u2264 ci \u2264\n10^9) is an integer denoting the price of the i-th item, ti (1 \u2264 ti \u2264 2) is an\ninteger representing the type of item i (1 for a stool and 2 for a pencil).\nThe numbers in the lines are separated by single spaces. Output In the first\nline print a single real number with exactly one decimal place \u2014 the minimum\ntotal price of the items, including the discounts. In the following k lines\nprint the descriptions of the items in the carts. In the i-th line print the\ndescription of the i-th cart as \"t b1 b2 ... bt\" (without the quotes), where t\nis the number of items in the i-th cart, and the sequence b1, b2, ..., bt (1 \u2264\nbj \u2264 n) gives the indices of items to put in this cart in the optimal\ndistribution. All indices of items in all carts should be pairwise different,\neach item must belong to exactly one cart. You can print the items in carts\nand the carts themselves in any order. The items are numbered from 1 to n in\nthe order in which they are specified in the input. If there are multiple\noptimal distributions, you are allowed to print any of them. Examples Input 3\n2 2 1 3 2 3 1 Output 5.5 2 1 2 1 3 Input 4 3 4 1 1 2 2 2 3 2 Output 8.0 1 1 2\n4 2 1 3 Note In the first sample case the first cart should contain the 1st\nand 2nd items, and the second cart should contain the 3rd item. This way each\ncart has a stool and each cart has a 50\ntotal price of all items will be: 2\u00b70.5 + (3 + 3\u00b70.5) = 1 + 4.5 = 5.5.\n\n",
        "cf_contest_id": 161,
        "cf_index": "B",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2\r\n2 1\r\n3 2\r\n3 1\r\n",
                "5.5\r\n1 3\r\n2 1 2\r\n"
            ],
            [
                "4 3\r\n4 1\r\n1 2\r\n2 2\r\n3 2\r\n",
                "8.0\r\n1 1\r\n1 2\r\n2 3 4\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1 1\r\n",
                "0.5\r\n1 1\r\n"
            ],
            [
                "1 1\r\n1 2\r\n",
                "1.0\r\n1 1\r\n"
            ],
            [
                "10 1\r\n1 1\r\n2 2\r\n1 1\r\n23 2\r\n17 2\r\n1 1\r\n1 1\r\n30 2\r\n1 1\r\n9 2\r\n",
                "85.5\r\n10 9 7 6 3 1 2 4 5 8 10\r\n"
            ],
            [
                "11 11\r\n6 2\r\n6 2\r\n1 2\r\n2 2\r\n3 1\r\n6 2\r\n1 1\r\n1 1\r\n3 1\r\n3 1\r\n6 2\r\n",
                "32.5\r\n1 10\r\n1 9\r\n1 5\r\n1 8\r\n1 7\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n1 6\r\n1 11\r\n"
            ],
            [
                "5 4\r\n24 1\r\n19 1\r\n28 2\r\n7 1\r\n23 2\r\n",
                "76.0\r\n1 1\r\n1 2\r\n1 4\r\n2 3 5\r\n"
            ],
            [
                "20 3\r\n28 1\r\n786180179 2\r\n16 1\r\n617105650 2\r\n23 1\r\n21 1\r\n22 1\r\n7 1\r\n314215182 2\r\n409797301 2\r\n14 1\r\n993310357 2\r\n372545570 2\r\n791297014 2\r\n13 1\r\n25 1\r\n307921408 2\r\n625842662 2\r\n136238241 2\r\n13 1\r\n",
                "5354453716.0\r\n1 1\r\n1 16\r\n18 5 7 6 3 11 20 15 8 2 4 9 10 12 13 14 17 18 19\r\n"
            ],
            [
                "21 7\r\n14 1\r\n882797755 2\r\n17 1\r\n906492329 2\r\n209923513 2\r\n802927469 2\r\n949195463 2\r\n677323647 2\r\n2129083 2\r\n2 1\r\n13 1\r\n539523264 2\r\n7 1\r\n8 1\r\n12 1\r\n363470241 2\r\n9838294 2\r\n18716193 2\r\n30 1\r\n17 1\r\n24 1\r\n",
                "5362337336.5\r\n1 19\r\n1 21\r\n1 20\r\n1 3\r\n1 1\r\n1 11\r\n15 15 14 13 10 2 4 5 6 7 8 9 12 16 17 18\r\n"
            ],
            [
                "21 21\r\n42856481 2\r\n562905883 2\r\n942536731 2\r\n206667673 2\r\n451074408 2\r\n27 1\r\n29 1\r\n172761267 2\r\n23 1\r\n24 1\r\n106235116 2\r\n126463249 2\r\n29 1\r\n9 1\r\n83859496 2\r\n5 1\r\n25 1\r\n337838080 2\r\n109402491 2\r\n5 1\r\n24 1\r\n",
                "3142600975.0\r\n1 13\r\n1 7\r\n1 6\r\n1 17\r\n1 21\r\n1 10\r\n1 9\r\n1 14\r\n1 20\r\n1 16\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 8\r\n1 11\r\n1 12\r\n1 15\r\n1 18\r\n1 19\r\n"
            ],
            [
                "10 1\r\n28 1\r\n1 2\r\n1 2\r\n1 2\r\n15 1\r\n16 1\r\n22 1\r\n20 1\r\n1 2\r\n1 2\r\n",
                "105.5\r\n10 1 7 8 6 5 2 3 4 9 10\r\n"
            ],
            [
                "5 4\r\n10 1\r\n10 1\r\n10 1\r\n9 1\r\n5 2\r\n",
                "26.5\r\n1 3\r\n1 2\r\n1 1\r\n2 4 5\r\n"
            ],
            [
                "7 4\r\n10 1\r\n10 1\r\n10 1\r\n9 1\r\n2 1\r\n5 2\r\n3 2\r\n",
                "33.0\r\n1 3\r\n1 2\r\n1 1\r\n4 4 5 6 7\r\n"
            ],
            [
                "7 4\r\n10 1\r\n10 1\r\n10 1\r\n9 1\r\n4 1\r\n5 2\r\n3 2\r\n",
                "34.5\r\n1 3\r\n1 2\r\n1 1\r\n4 4 5 6 7\r\n"
            ],
            [
                "7 5\r\n10 1\r\n10 1\r\n10 1\r\n9 1\r\n4 1\r\n5 2\r\n3 2\r\n",
                "30.0\r\n1 3\r\n1 2\r\n1 1\r\n1 4\r\n3 5 6 7\r\n"
            ]
        ]
    }
]