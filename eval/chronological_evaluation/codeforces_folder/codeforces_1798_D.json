[
    {
        "name": "Shocking Arrangement",
        "description": "You are given an array \n    a_1, a_2, \n    \u2026, a_n\n consisting of integers\nsuch that \n    a_1 + a_2 + \n    \u2026 + a_n = 0\n. You have to rearrange the\nelements of the array \n    a\n so that the following condition is satisfied:\n\n    \n\n    max\n    _1 \n    \u2264 l \n    \u2264 r \n    \u2264 n\n    | a_l + a_l+1 +\n    \n    \u2026 + a_r \n    | < \n    max(a_1, a_2, \n    \u2026, a_n) - \n    min(a_1, a_2,\n    \n    \u2026, a_n),\n\n    \n where \n    |x|\n denotes the absolute value of \n    x\n.\nMore formally, determine if there exists a permutation \n    p_1, p_2, \n    \u2026,\n    p_n\n that for the array \n    a_p_1, a_p_2, \n    \u2026, a_p_n\n, the\ncondition above is satisfied, and find the corresponding array. Recall that\nthe array \n    p_1, p_2, \n    \u2026, p_n\n is called a permutation if for each\ninteger \n    x\n from \n    1\n to \n    n\n there is exactly one \n    i\n from\n\n    1\n to \n    n\n such that \n    p_i = x\n. Input Each test contains multiple\ntest cases. The first line contains the number of test cases \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 50\n     000\n). The description of the test cases follows. The\nfirst line of each test case contains a single integer \n    n\n (\n    1 \n    \u2264 n\n    \n    \u2264 300\n     000\n) \u2014 the length of the array \n    a\n. The second line of\neach test case contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n\n(\n    -10^9 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 elements of the array \n    a\n. It is\nguaranteed that the sum of the array \n    a\n is zero, in other words: \n    a_1 +\n    a_2 + \n    \u2026 + a_n = 0\n. It is guaranteed that the sum of \n    n\n over all\ntest cases does not exceed \n    300\n     000\n. Output For each test case, if it\nis impossible to rearrange the elements of the array \n    a\n in the required\nway, print \"No\" in a single line. If possible, print \"Yes\" in the first line,\nand then in a separate line \n    n\n numbers \u2014 elements \n    a_1, a_2, \n    \u2026,\n    a_n\n rearranged in a valid order (\n    a_p_1, a_p_2, \n    \u2026,\n    a_p_n\n). If there are several possible answers, you can output any of\nthem. Example Input 7 4 3 4 -2 -5 5 2 2 2 -3 -3 8 -3 -3 1 1 1 1 1 1 3 0 1 -1 7\n-3 4 3 4 -4 -4 0 1 0 7 -18 13 -18 -17 12 15 13 Output Yes -5 -2 3 4 Yes -3 2\n-3 2 2 Yes 1 1 1 -3 1 1 1 -3 Yes -1 0 1 Yes 4 -4 4 -4 0 3 -3 No Yes 13 12 -18\n15 -18 13 -17 Note In the first test case \n    max(a_1, \n    \u2026, a_n) -\n    \n    min(a_1, \n    \u2026, a_n) = 9\n. Therefore, the elements can be rearranged\nas \n    [-5, -2, 3, 4]\n. It is easy to see that for such an arrangement\n\n    | a_l + \n    \u2026 + a_r \n    |\n is always not greater than\n\n    7\n, and therefore less than \n    9\n. In the second test case you can\nrearrange the elements of the array as \n    [-3, 2, -3, 2, 2]\n. Then the\nmaximum modulus of the sum will be reached on the subarray \n    [-3, 2, -3]\n,\nand will be equal to \n    | -3 + 2 + -3 \n    | = \n    | -4 \n    | =\n    4\n, which is less than \n    5\n. In the fourth test example, any\nrearrangement of the array \n    a\n will be suitable as an answer, including\n\n    [-1, 0, 1]\n.\n\n",
        "cf_contest_id": 1798,
        "cf_index": "D",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n4\r\n3 4 -2 -5\r\n5\r\n2 2 2 -3 -3\r\n8\r\n-3 -3 1 1 1 1 1 1\r\n3\r\n0 1 -1\r\n7\r\n-3 4 3 4 -4 -4 0\r\n1\r\n0\r\n7\r\n-18 13 -18 -17 12 15 13\r\n",
                "Yes\r\n4 -5 3 -2\r\nYes\r\n2 -3 2 -3 2\r\nYes\r\n1 -3 1 1 1 -3 1 1\r\nYes\r\n1 -1 0\r\nYes\r\n4 -4 4 -4 3 -3 0\r\nNo\r\nYes\r\n15 -18 13 -18 13 -17 12\r\n"
            ]
        ],
        "private_cases": []
    }
]