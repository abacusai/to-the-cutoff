[
    {
        "name": "Bitwise Queries (Easy Version)",
        "description": "The only difference between the easy and hard versions is the constraints on\nthe number of queries. This is an interactive problem. Ridbit has a hidden\narray \n    a\n of \n    n\n integers which he wants Ashish to guess. Note that\n\n    n\n is a power of two. Ashish is allowed to ask three different types of\nqueries. They are of the form AND \n    i\n \n    j\n: ask for the bitwise AND of\nelements \n    a_i\n and \n    a_j\n \n    (1 \n    \u2264 i, j \n    \u2264 n\n, \n    i \n    \u2260\n    j)\n OR \n    i\n \n    j\n: ask for the bitwise OR of elements \n    a_i\n and\n\n    a_j\n \n    (1 \n    \u2264 i, j \n    \u2264 n\n, \n    i \n    \u2260 j)\n XOR \n    i\n \n    j\n:\nask for the bitwise XOR of elements \n    a_i\n and \n    a_j\n \n    (1 \n    \u2264 i, j\n    \n    \u2264 n\n, \n    i \n    \u2260 j)\n Can you help Ashish guess the elements of the\narray? In this version, each element takes a value in the range \n    [0, n-1]\n\n(inclusive) and Ashish can ask no more than \n    n+2\n queries. Input The first\nline of input contains one integer \n    n\n \n    (4 \n    \u2264 n \n    \u2264 2^16)\n \u2014\nthe length of the array. It is guaranteed that \n    n\n is a power of two.\nInteraction To ask a query print a single line containing one of the following\n(without quotes) \"AND i j\" \"OR i j\" \"XOR i j\" where \n    i\n and \n    j\n \n    (1\n    \n    \u2264 i, j \n    \u2264 n\n, \n    i \n    \u2260 j)\n denote the indices being queried.For\neach query, you will receive an integer \n    x\n whose value depends on the\ntype of query. If the indices queried are invalid or you exceed the number of\nqueries however, you will get \n    x = -1\n. In this case, you should terminate\nthe program immediately. When you have guessed the elements of the array,\nprint a single line \"! \" (without quotes), followed by \n    n\n space-separated\nintegers \u2014 the elements of the array. Guessing the array does not count\ntowards the number of queries asked. The interactor is not adaptive. The array\n\n    a\n does not change with queries. After printing a query do not forget to\noutput the end of the line and flush the output. Otherwise, you will get\nIdleness limit exceeded. To do this, use: fflush(stdout) or cout.flush() in\nC++; System.out.flush() in Java; flush(output) in Pascal; stdout.flush() in\nPython; see the documentation for other languages.Hacks To hack the solution,\nuse the following test format: On the first line print a single integer\n\n    n\n \n    (4 \n    \u2264 n \n    \u2264 2^16)\n \u2014 the length of the array. It must be a\npower of 2. The next line should contain \n    n\n space-separated integers in\nthe range \n    [0, n-1]\n \u2014 the array \n    a\n. Example Input 4 0 2 3 Output OR\n1 2 OR 2 3 XOR 2 4 ! 0 0 2 3 Note The array \n    a\n in the example is \n    [0,\n    0, 2, 3]\n.\n\n",
        "cf_contest_id": 1451,
        "cf_index": "E1",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "constructive algorithms",
            "interactive",
            "math"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n0 0 2 3\r\n",
                "6\r\n"
            ]
        ],
        "private_cases": [
            [
                "32\r\n26 19 27 19 16 22 12 13 2 29 30 23 24 6 5 7 17 31 11 7 1 11 12 20 13 3 25 0 17 18 21 17\r\n",
                "34\r\n"
            ],
            [
                "64\r\n14 54 63 50 11 60 42 48 3 18 30 0 24 1 44 57 34 26 62 49 4 25 46 61 51 32 56 33 35 41 15 2 54 5 52 16 38 7 10 40 37 28 27 43 6 13 23 47 21 20 29 45 12 9 8 22 31 58 53 39 55 59 36 19\r\n",
                "66\r\n"
            ],
            [
                "4\r\n3 1 2 1\r\n",
                "6\r\n"
            ],
            [
                "4\r\n2 3 3 1\r\n",
                "6\r\n"
            ],
            [
                "4\r\n3 1 0 1\r\n",
                "6\r\n"
            ],
            [
                "4\r\n2 0 0 1\r\n",
                "6\r\n"
            ],
            [
                "4\r\n0 1 2 1\r\n",
                "6\r\n"
            ],
            [
                "4\r\n1 2 1 0\r\n",
                "6\r\n"
            ],
            [
                "4\r\n0 1 2 2\r\n",
                "6\r\n"
            ],
            [
                "4\r\n2 1 0 0\r\n",
                "6\r\n"
            ],
            [
                "8\r\n0 5 1 2 6 4 6 3\r\n",
                "10\r\n"
            ],
            [
                "8\r\n3 5 1 4 4 0 2 7\r\n",
                "10\r\n"
            ],
            [
                "4\r\n3 3 3 3\r\n",
                "6\r\n"
            ],
            [
                "4\r\n1 3 2 0\r\n",
                "6\r\n"
            ],
            [
                "8\r\n3 6 7 5 0 1 4 2\r\n",
                "10\r\n"
            ],
            [
                "16\r\n9 6 12 15 5 14 0 2 8 7 10 11 1 4 13 3\r\n",
                "18\r\n"
            ],
            [
                "32\r\n25 16 28 12 7 20 30 19 2 26 31 27 22 14 0 24 23 4 9 15 11 18 5 1 13 3 8 10 21 6 17 29\r\n",
                "34\r\n"
            ],
            [
                "64\r\n20 10 48 24 41 53 7 5 42 19 52 39 11 25 29 63 33 58 3 44 18 12 40 45 6 30 47 27 8 59 1 13 21 22 26 51 38 60 43 46 31 14 23 15 54 36 57 49 61 16 9 37 35 4 32 34 55 50 28 0 17 62 56 2\r\n",
                "66\r\n"
            ],
            [
                "128\r\n30 24 121 127 126 84 74 79 64 71 88 22 68 8 12 59 81 104 107 70 56 82 29 101 75 2 114 17 45 37 19 124 6 18 66 103 20 77 116 67 40 54 47 125 62 9 34 113 41 65 35 111 26 49 117 106 38 83 15 80 60 14 91 95 23 76 100 63 5 109 33 31 21 119 16 92 1 85 61 53 55 78 90 110 96 11 123 120 4 36 39 98 25 42 28 43 93 108 89 118 7 105 58 86 99 32 73 94 44 52 46 102 97 51 112 3 48 72 87 115 27 0 13 69 57 10 50 122\r\n",
                "130\r\n"
            ],
            [
                "4\r\n1 0 1 2\r\n",
                "6\r\n"
            ],
            [
                "16\r\n6 1 14 4 0 12 3 10 11 2 7 5 13 15 9 11\r\n",
                "18\r\n"
            ],
            [
                "128\r\n14 63 52 63 0 4 31 31 8 122 113 116 3 48 80 42 4 10 90 60 82 64 32 62 103 93 38 84 114 64 101 56 86 30 74 56 41 126 52 53 54 60 121 37 123 6 98 17 44 98 42 24 46 38 3 106 29 127 17 79 70 107 108 30 45 62 35 70 9 33 52 72 67 14 21 58 123 86 46 70 3 27 92 41 98 86 112 52 82 82 46 78 66 47 79 113 84 96 127 41 96 45 95 24 112 50 4 116 66 94 118 7 73 117 50 46 44 15 41 91 70 22 63 20 36 76 76 113\r\n",
                "130\r\n"
            ],
            [
                "64\r\n0 3 35 16 22 42 0 40 60 35 0 57 2 14 22 19 27 10 24 9 33 61 63 49 15 16 42 40 6 48 27 12 9 14 56 0 0 32 11 43 57 30 3 57 34 6 49 25 17 24 12 61 60 26 45 29 1 21 20 52 31 22 33 1\r\n",
                "66\r\n"
            ],
            [
                "64\r\n53 25 21 1 22 59 6 41 58 45 12 24 60 39 29 2 4 46 7 20 42 14 32 16 8 44 51 62 57 3 61 52 63 19 9 0 28 49 55 36 54 27 40 10 11 38 18 43 56 50 15 35 23 37 47 26 5 13 33 34 11 17 31 48\r\n",
                "66\r\n"
            ],
            [
                "32\r\n31 7 22 25 15 3 26 14 8 4 10 23 21 0 17 20 12 13 6 28 24 27 9 30 18 2 29 16 1 11 19 5\r\n",
                "34\r\n"
            ],
            [
                "32\r\n2 23 10 7 25 5 14 22 4 17 18 8 1 13 20 28 11 0 27 31 9 21 6 29 16 15 24 3 23 19 12 26\r\n",
                "34\r\n"
            ],
            [
                "64\r\n51 3 34 62 12 13 5 4 2 26 42 35 37 0 18 38 27 55 54 56 10 32 36 47 19 6 58 23 61 20 48 28 60 9 22 17 31 53 43 44 39 52 33 25 3 40 30 45 29 57 46 16 49 59 1 14 50 15 24 21 41 8 63 11\r\n",
                "66\r\n"
            ],
            [
                "32\r\n23 8 22 29 6 28 14 4 31 19 21 17 13 3 30 18 26 26 27 5 0 16 25 9 12 2 10 15 1 24 7 20\r\n",
                "34\r\n"
            ],
            [
                "32\r\n7 6 5 19 16 12 29 30 0 11 3 23 27 21 31 25 28 2 17 30 20 15 26 10 22 14 13 24 4 9 18 8\r\n",
                "34\r\n"
            ]
        ]
    }
]