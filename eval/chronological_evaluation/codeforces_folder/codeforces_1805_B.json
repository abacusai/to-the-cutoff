[
    {
        "name": "The String Has a Target",
        "description": "You are given a string \n    s\n. You can apply this operation to the string\nexactly once: choose index \n    i\n and move character \n    s_i\n to the\nbeginning of the string (removing it at the old position). For example, if you\napply the operation with index \n    i=4\n to the string \"abaacd\" with numbering\nfrom \n    1\n, you get the string \"aabacd\". What is the lexicographically\nminimal\n    ^\n    \u2020\n string you can obtain by this operation?\n\n    ^\n    \u2020\nA string \n    a\n is lexicographically smaller than a string\n\n    b\n of the same length if and only if the following holds: in the first\nposition where \n    a\n and \n    b\n differ, the string \n    a\n has a letter\nthat appears earlier in the alphabet than the corresponding letter in \n    b\n.\nInput Each test contains multiple test cases. The first line contains the\nnumber of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n). The description of\nthe test cases follows. The first line of each test case contains a single\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10 ^ 5\n) \u2014 the length of the string. The\nsecond line of each test case contains the string \n    s\n of length \n    n\n,\nconsisting of lowercase English letters. It is guaranteed that the sum of\n\n    n\n over all test cases does not exceed \n    10 ^ 5\n. Output For each test\ncase, on a separate line print the lexicographically smallest string that can\nbe obtained after applying the operation to the original string exactly once.\nExample Input 4 3 cba 4 acac 5 abbcb 4 aaba Output acb aacc abbcb aaab Note In\nthe first test case, you need to move the last character to the beginning. In\nthe second case, you need to move the second letter \"a\". In the third set you\nneed to apply the operation with \n    i=1\n, then the string will not change.\n\n",
        "cf_contest_id": 1805,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3\r\ncba\r\n4\r\nacac\r\n5\r\nabbcb\r\n4\r\naaba\r\n",
                "acb\r\naacc\r\nabbcb\r\naaab\r\n"
            ]
        ],
        "private_cases": []
    }
]