[
    {
        "name": "Sagheer and Kindergarten",
        "description": "Sagheer is working at a kindergarten. There are n children and m different\ntoys. These children use well-defined protocols for playing with the toys:\nEach child has a lovely set of toys that he loves to play with. He requests\nthe toys one after another at distinct moments of time. A child starts playing\nif and only if he is granted all the toys in his lovely set. If a child starts\nplaying, then sooner or later he gives the toys back. No child keeps the toys\nforever. Children request toys at distinct moments of time. No two children\nrequest a toy at the same time. If a child is granted a toy, he never gives it\nback until he finishes playing with his lovely set. If a child is not granted\na toy, he waits until he is granted this toy. He can't request another toy\nwhile waiting. If two children are waiting for the same toy, then the child\nwho requested it first will take the toy first.Children don't like to play\nwith each other. That's why they never share toys. When a child requests a\ntoy, then granting the toy to this child depends on whether the toy is free or\nnot. If the toy is free, Sagheer will give it to the child. Otherwise, the\nchild has to wait for it and can't request another toy. Children are smart and\ncan detect if they have to wait forever before they get the toys they want. In\nsuch case they start crying. In other words, a crying set is a set of children\nin which each child is waiting for a toy that is kept by another child in the\nset. Now, we have reached a scenario where all the children made all the\nrequests for their lovely sets, except for one child x that still has one last\nrequest for his lovely set. Some children are playing while others are waiting\nfor a toy, but no child is crying, and no one has yet finished playing. If the\nchild x is currently waiting for some toy, he makes his last request just\nafter getting that toy. Otherwise, he makes the request right away. When child\nx will make his last request, how many children will start crying? You will be\ngiven the scenario and q independent queries. Each query will be of the form x\ny meaning that the last request of the child x is for the toy y. Your task is\nto help Sagheer find the size of the maximal crying set when child x makes his\nlast request. Input The first line contains four integers n, m, k, q (1 \u2264 n,\nm, k, q \u2264 10^5) \u2014 the number of children, toys, scenario requests and queries.\nEach of the next k lines contains two integers a, b (1 \u2264 a \u2264 n and 1 \u2264 b \u2264 m)\n\u2014 a scenario request meaning child a requests toy b. The requests are given in\nthe order they are made by children. Each of the next q lines contains two\nintegers x, y (1 \u2264 x \u2264 n and 1 \u2264 y \u2264 m) \u2014 the request to be added to the\nscenario meaning child x will request toy y just after getting the toy he is\nwaiting for (if any). It is guaranteed that the scenario requests are\nconsistent and no child is initially crying. All the scenario requests are\ndistinct and no query coincides with a scenario request. Output For each\nquery, print on a single line the number of children who will start crying\nwhen child x makes his last request for toy y. Please answer all queries\nindependent of each other. Examples Input 3 3 5 1 1 1 2 2 3 3 1 2 2 3 3 1\nOutput 3 Input 5 4 7 2 1 1 2 2 2 1 5 1 3 3 4 4 4 1 5 3 5 4 Output 0 2 Note In\nthe first example, child 1 is waiting for toy 2, which child 2 has, while\nchild 2 is waiting for top 3, which child 3 has. When child 3 makes his last\nrequest, the toy he requests is held by child 1. Each of the three children is\nwaiting for a toy held by another child and no one is playing, so all the\nthree will start crying. In the second example, at the beginning, child i is\nholding toy i for 1 \u2264 i \u2264 4. Children 1 and 3 have completed their lovely\nsets. After they finish playing, toy 3 will be free while toy 1 will be taken\nby child 2 who has just completed his lovely set. After he finishes, toys 1\nand 2 will be free and child 5 will take toy 1. Now: In the first query, child\n5 will take toy 3 and after he finishes playing, child 4 can play. In the\nsecond query, child 5 will request toy 4 which is held by child 4. At the same\ntime, child 4 is waiting for toy 1 which is now held by child 5. None of them\ncan play and they will start crying.\n\n",
        "cf_contest_id": 812,
        "cf_index": "D",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graphs",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3 5 1\r\n1 1\r\n2 2\r\n3 3\r\n1 2\r\n2 3\r\n3 1\r\n",
                "3\r\n"
            ],
            [
                "5 4 7 2\r\n1 1\r\n2 2\r\n2 1\r\n5 1\r\n3 3\r\n4 4\r\n4 1\r\n5 3\r\n5 4\r\n",
                "0\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "15 16 30 5\r\n1 1\r\n2 2\r\n3 3\r\n4 4\r\n5 5\r\n6 6\r\n7 7\r\n8 8\r\n9 9\r\n10 10\r\n11 11\r\n12 12\r\n13 13\r\n14 14\r\n15 15\r\n1 16\r\n2 1\r\n3 2\r\n4 1\r\n5 16\r\n6 5\r\n7 6\r\n14 5\r\n15 14\r\n9 7\r\n8 6\r\n13 6\r\n12 8\r\n10 7\r\n11 9\r\n6 4\r\n6 1\r\n6 11\r\n6 15\r\n14 13\r\n",
                "0\r\n0\r\n10\r\n10\r\n0\r\n"
            ],
            [
                "13 18 27 13\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n1 17\r\n2 5\r\n2 1\r\n3 6\r\n3 2\r\n5 14\r\n5 3\r\n4 4\r\n6 9\r\n6 3\r\n7 8\r\n7 3\r\n8 7\r\n8 9\r\n10 11\r\n10 18\r\n11 10\r\n11 15\r\n11 11\r\n9 12\r\n9 11\r\n12 10\r\n13 15\r\n6 8\r\n6 14\r\n6 1\r\n6 17\r\n6 18\r\n11 12\r\n11 18\r\n11 9\r\n11 17\r\n1 18\r\n1 12\r\n1 7\r\n1 14\r\n",
                "3\r\n0\r\n0\r\n0\r\n0\r\n4\r\n0\r\n0\r\n0\r\n0\r\n0\r\n8\r\n8\r\n"
            ],
            [
                "2 1 1 1\r\n1 1\r\n2 1\r\n",
                "0\r\n"
            ],
            [
                "1 2 1 1\r\n1 1\r\n1 2\r\n",
                "0\r\n"
            ]
        ]
    }
]