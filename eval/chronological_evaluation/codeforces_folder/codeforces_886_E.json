[
    {
        "name": "Maximum Element",
        "description": "One day Petya was solving a very interesting problem. But although he used\nmany optimization techniques, his solution still got Time limit exceeded\nverdict. Petya conducted a thorough analysis of his program and found out that\nhis function for finding maximum element in an array of n positive integers\nwas too slow. Desperate, Petya decided to use a somewhat unexpected\noptimization using parameter k, so now his function contains the following\ncode: int fast_max(int n, int a[])  int ans = 0; int offset = 0; for (int i =\n0; i < n; ++i) if (ans < a[i])  ans = a[i]; offset = 0;  else  offset =\noffset + 1; if (offset == k) return ans;  return ans;  That way the function\niteratively checks array elements, storing the intermediate maximum, and if\nafter k consecutive iterations that maximum has not changed, it is returned as\nthe answer. Now Petya is interested in fault rate of his function. He asked\nyou to find the number of permutations of integers from 1 to n such that the\nreturn value of his function on those permutations is not equal to n. Since\nthis number could be very big, output the answer modulo 10^9 + 7. Input The\nonly line contains two integers n and k (1 \u2264 n, k \u2264 10^6), separated by a\nspace \u2014 the length of the permutations and the parameter k. Output Output the\nanswer to the problem modulo 10^9 + 7. Examples Input 5 2 Output 22 Input 5 3\nOutput 6 Input 6 3 Output 84 Note Permutations from second example: [4, 1, 2,\n3, 5], [4, 1, 3, 2, 5], [4, 2, 1, 3, 5], [4, 2, 3, 1, 5], [4, 3, 1, 2, 5], [4,\n3, 2, 1, 5].\n\n",
        "cf_contest_id": 886,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "dp",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 2\r\n",
                "22\r\n"
            ],
            [
                "5 3\r\n",
                "6\r\n"
            ],
            [
                "6 3\r\n",
                "84\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 10\r\n",
                "0\r\n"
            ],
            [
                "1 1\r\n",
                "0\r\n"
            ],
            [
                "2 1\r\n",
                "0\r\n"
            ],
            [
                "2 2\r\n",
                "0\r\n"
            ],
            [
                "3 1\r\n",
                "1\r\n"
            ],
            [
                "3 2\r\n",
                "0\r\n"
            ],
            [
                "3 3\r\n",
                "0\r\n"
            ],
            [
                "4 1\r\n",
                "8\r\n"
            ],
            [
                "4 2\r\n",
                "2\r\n"
            ],
            [
                "4 3\r\n",
                "0\r\n"
            ],
            [
                "4 4\r\n",
                "0\r\n"
            ],
            [
                "5 1\r\n",
                "55\r\n"
            ],
            [
                "5 4\r\n",
                "0\r\n"
            ],
            [
                "5 5\r\n",
                "0\r\n"
            ],
            [
                "1000000 500000\r\n",
                "900097839\r\n"
            ],
            [
                "1000000 1000000\r\n",
                "0\r\n"
            ],
            [
                "1000000 1\r\n",
                "131797017\r\n"
            ],
            [
                "1 1000000\r\n",
                "0\r\n"
            ],
            [
                "959139 199252\r\n",
                "770937198\r\n"
            ],
            [
                "9859 748096\r\n",
                "0\r\n"
            ],
            [
                "125987 264237\r\n",
                "0\r\n"
            ],
            [
                "209411 813081\r\n",
                "0\r\n"
            ],
            [
                "325539 329221\r\n",
                "0\r\n"
            ],
            [
                "376259 910770\r\n",
                "0\r\n"
            ],
            [
                "492387 235422\r\n",
                "249147139\r\n"
            ],
            [
                "608515 751563\r\n",
                "0\r\n"
            ],
            [
                "691939 300407\r\n",
                "700547157\r\n"
            ],
            [
                "30518 196518\r\n",
                "0\r\n"
            ],
            [
                "146646 521171\r\n",
                "0\r\n"
            ],
            [
                "230070 37311\r\n",
                "993306535\r\n"
            ],
            [
                "313494 586155\r\n",
                "0\r\n"
            ],
            [
                "396918 167704\r\n",
                "943821934\r\n"
            ],
            [
                "513046 683844\r\n",
                "0\r\n"
            ],
            [
                "629174 232688\r\n",
                "831745227\r\n"
            ],
            [
                "679894 524637\r\n",
                "655418678\r\n"
            ],
            [
                "796022 73481\r\n",
                "883548575\r\n"
            ],
            [
                "879446 655030\r\n",
                "563982505\r\n"
            ],
            [
                "405440 588704\r\n",
                "0\r\n"
            ]
        ]
    }
]