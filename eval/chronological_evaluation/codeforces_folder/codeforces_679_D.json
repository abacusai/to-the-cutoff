[
    {
        "name": "Bear and Chase",
        "description": "Bearland has n cities, numbered 1 through n. There are m bidirectional roads.\nThe i-th road connects two distinct cities ai and bi. No two roads connect the\nsame pair of cities. It's possible to get from any city to any other city\n(using one or more roads). The distance between cities a and b is defined as\nthe minimum number of roads used to travel between a and b. Limak is a grizzly\nbear. He is a criminal and your task is to catch him, or at least to try to\ncatch him. You have only two days (today and tomorrow) and after that Limak is\ngoing to hide forever. Your main weapon is BCD (Bear Criminal Detector). Where\nyou are in some city, you can use BCD and it tells you the distance between\nyou and a city where Limak currently is. Unfortunately, BCD can be used only\nonce a day. You don't know much about Limak's current location. You assume\nthat he is in one of n cities, chosen uniformly at random (each city with\nprobability ). You decided for the following plan: Choose one city and use BCD\nthere. After using BCD you can try to catch Limak (but maybe it isn't a good\nidea). In this case you choose one city and check it. You win if Limak is\nthere. Otherwise, Limak becomes more careful and you will never catch him (you\nloose). Wait 24 hours to use BCD again. You know that Limak will change his\nlocation during that time. In detail, he will choose uniformly at random one\nof roads from his initial city, and he will use the chosen road, going to some\nother city. Tomorrow, you will again choose one city and use BCD there.\nFinally, you will try to catch Limak. You will choose one city and check it.\nYou will win if Limak is there, and loose otherwise. Each time when you choose\none of cities, you can choose any of n cities. Let's say it isn't a problem\nfor you to quickly get somewhere. What is the probability of finding Limak, if\nyou behave optimally? Input The first line of the input contains two integers\nn and m (2 \u2264 n \u2264 400, ) \u2014 the number of cities and the number of roads,\nrespectively. Then, m lines follow. The i-th of them contains two integers ai\nand bi (1 \u2264 ai, bi \u2264 n, ai \u2260 bi) \u2014 cities connected by the i-th road. No two\nroads connect the same pair of cities. It's possible to get from any city to\nany other city. Output Print one real number \u2014 the probability of finding\nLimak, if you behave optimally. Your answer will be considered correct if its\nabsolute error does not exceed 10^-6. Namely: let's assume that your answer is\na, and the answer of the jury is b. The checker program will consider your\nanswer correct if |a - b| \u2264 10^-6. Examples Input 3 3 1 2 1 3 2 3 Output\n0.833333333333 Input 5 4 1 2 3 1 5 1 1 4 Output 1.000000000000 Input 4 4 1 2 1\n3 2 3 1 4 Output 0.916666666667 Input 5 5 1 2 2 3 3 4 4 5 1 5 Output\n0.900000000000 Note In the first sample test, there are three cities and there\nis a road between every pair of cities. Let's analyze one of optimal\nscenarios. Use BCD in city 1. With probability Limak is in this city and BCD\ntells you that the distance is 0. You should try to catch him now and you win\nfor sure. With probability the distance is 1 because Limak is in city 2 or\ncity 3. In this case you should wait for the second day. You wait and Limak\nmoves to some other city. There is probability that Limak was in city 2 and\nthen went to city 3. that he went from 2 to 1. that he went from 3 to 2. that\nhe went from 3 to 1. Use BCD again in city 1 (though it's allowed to use it in\nsome other city). If the distance is 0 then you're sure Limak is in this city\n(you win). If the distance is 1 then Limak is in city 2 or city 3. Then you\nshould guess that he is in city 2 (guessing city 3 would be fine too). You\nloose only if Limak was in city 2 first and then he moved to city 3. The\nprobability of loosing is . The answer is .\n\n",
        "cf_contest_id": 679,
        "cf_index": "D",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dfs and similar",
            "graphs",
            "implementation",
            "math",
            "probabilities"
        ],
        "time_limit_seconds": 7.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\n1 2\r\n1 3\r\n2 3\r\n",
                "0.833333333333\r\n"
            ],
            [
                "5 4\r\n1 2\r\n3 1\r\n5 1\r\n1 4\r\n",
                "1.000000000000\r\n"
            ],
            [
                "4 4\r\n1 2\r\n1 3\r\n2 3\r\n1 4\r\n",
                "0.916666666667\r\n"
            ],
            [
                "5 5\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n1 5\r\n",
                "0.900000000000\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1\r\n2 1\r\n",
                "1.000000000000\r\n"
            ],
            [
                "5 10\r\n3 1\r\n5 1\r\n5 2\r\n2 3\r\n4 3\r\n5 3\r\n4 1\r\n4 2\r\n5 4\r\n2 1\r\n",
                "0.550000000000\r\n"
            ],
            [
                "3 2\r\n2 3\r\n1 3\r\n",
                "1.000000000000\r\n"
            ],
            [
                "10 15\r\n8 3\r\n4 8\r\n10 7\r\n9 3\r\n8 2\r\n9 4\r\n6 10\r\n3 1\r\n3 10\r\n4 3\r\n5 2\r\n1 4\r\n6 7\r\n5 10\r\n5 3\r\n",
                "0.791666666667\r\n"
            ]
        ]
    }
]