[
    {
        "name": "Gaining Rating",
        "description": "Monocarp is playing chess on one popular website. He has \n    n\n opponents he\ncan play with. The \n    i\n-th opponent has rating equal to \n    a_i\n.\nMonocarp's initial rating is \n    x\n. Monocarp wants to raise his rating to\nthe value \n    y\n (\n    y > x\n). When Monocarp is playing against one of the\nopponents, he will win if his current rating is bigger or equal to the\nopponent's rating. If Monocarp wins, his rating is increased by \n    1\n,\notherwise it is decreased by \n    1\n. The rating of his opponent does not\nchange. Monocarp wants to gain rating \n    y\n playing as few games as\npossible. But he can't just grind it, playing against weak opponents. The\nwebsite has a rule that you should play against all opponents as evenly as\npossible. Speaking formally, if Monocarp wants to play against an opponent\n\n    i\n, there should be no other opponent \n    j\n such that Monocarp has\nplayed more games against \n    i\n than against \n    j\n. Calculate the minimum\npossible number of games Monocarp needs to gain rating \n    y\n or say it's\nimpossible. Note that ratings of Monocarp's opponents don't change, while\nMonocarp's rating does change. Input The first line contains a single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. The first\nline of each test case contains three integers \n    n\n, \n    x\n and \n    y\n\n(\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n; \n    1 \n    \u2264 x < y \n    \u2264 10^12\n) \u2014\nthe number of Monocarp's opponents, his initial and desired ratings. The\nsecond line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264\n    a_i \n    \u2264 10^12\n) \u2014 ratings of Monocarp's opponents. Additional constraint\non the input: the total sum of \n    n\n over all \n    t\n test cases doesn't\nexceed \n    2 \n    \u00b7 10^5\n. Output For each test case, print a single integer\n\u2014 the minimum number of games Monocarp needs to play to gain rating \n    y\n,\nor \n    -1\n if it's impossible. Example Input 3 7 2 10 3 1 9 2 5 20 8 7 1 10 3\n1 9 2 5 20 8 5 10 12 100 1 200 11 300 Output 20 -1 2 Note In the first test\ncase, Monocarp can use the following strategy: Monocarp plays against the\n\n    2\n-nd opponent to increase rating (\n    2 \n    \u2192 3\n); Monocarp plays\nagainst the \n    1\n-st opponent to increase rating (\n    3 \n    \u2192 4\n); Monocarp\nplays against the \n    4\n-th opponent to increase rating (\n    4 \n    \u2192 5\n);\nMonocarp plays against the \n    5\n-th opponent to increase rating (\n    5 \n    \u2192\n    6\n); Now Monocarp have to play with remaining three opponents. So, he will\nlose \n    3\n times and get rating \n    3\n (\n    6 \n    \u2192 5 \n    \u2192 4 \n    \u2192 3\n);\nAfter that, Monocarp will repeat steps 1-5 again. After \n    14\n games, he has\nplayed twice with each opponent and get final rating \n    4\n. Monocarp plays\nagainst the \n    1\n-st opponent to increase rating (\n    4 \n    \u2192 5\n); Monocarp\nplays against the \n    2\n-nd opponent to increase rating (\n    5 \n    \u2192 6\n);\nMonocarp plays against the \n    4\n-th opponent to increase rating (\n    6 \n    \u2192\n    7\n); Monocarp plays against the \n    5\n-th opponent to increase rating (\n    7\n    \n    \u2192 8\n); Monocarp plays against the \n    7\n-th opponent to increase rating\n(\n    8 \n    \u2192 9\n); Monocarp plays against the \n    3\n-rd opponent to increase\nrating (\n    9 \n    \u2192 10\n); In total, Monocarp, played twice against the\n\n    6\n-th opponent and three times against other opponents and got rating\n\n    10\n in \n    14 + 6 = 20\n games.In the second test case, it can be proven\nthat whichever games Monocarp plays, he can't get his rating higher than\n\n    4\n.\n\n",
        "cf_contest_id": 1772,
        "cf_index": "G",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "greedy",
            "implementation",
            "math",
            "sortings",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n7 2 10\r\n3 1 9 2 5 20 8\r\n7 1 10\r\n3 1 9 2 5 20 8\r\n5 10 12\r\n100 1 200 11 300\r\n",
                "20\r\n-1\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n3 1 100000000\r\n1 2 1000000000\r\n",
                "299999993\r\n"
            ],
            [
                "1\r\n3 1 1000000000\r\n1 2 10000000000\r\n",
                "2999999993\r\n"
            ],
            [
                "2\r\n7 2 10\r\n3 1 9 2 5 20 8\r\n7 1 10\r\n3 1 9 2 5 20 8\r\n",
                "20\r\n-1\r\n"
            ]
        ]
    }
]