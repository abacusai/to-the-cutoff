[
    {
        "name": "Regular Bracket Sequence",
        "description": "A bracket sequence is called regular if it is possible to obtain correct\narithmetic expression by inserting characters + and 1 into this sequence. For\nexample, sequences (())(), () and (()(())) are regular, while )(, (() and\n(()))( are not. Let's call a regular bracket sequence \"RBS\". You are given a\nsequence \n    s\n of \n    n\n characters (, ), and/or ?. There is exactly one\ncharacter ( and exactly one character ) in this sequence. You have to replace\nevery character ? with either ) or ( (different characters ? can be replaced\nwith different brackets). You cannot reorder the characters, remove them,\ninsert other characters, and each ? must be replaced. Determine if it is\npossible to obtain an RBS after these replacements. Input The first line\ncontains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of test\ncases. Each test case consists of one line containing \n    s\n (\n    2 \n    \u2264 |s|\n    \n    \u2264 100\n) \u2014 a sequence of characters (, ), and/or ?. There is exactly one\ncharacter ( and exactly one character ) in this sequence. Output For each test\ncase, print YES if it is possible to obtain a regular bracket sequence, or NO\notherwise. You may print each letter in any case (for example, YES, Yes, yes,\nyEs will all be recognized as positive answer). Example Input 5 () (?) (??)\n??() )?(? Output YES NO YES YES NO Note In the first test case, the sequence\nis already an RBS. In the third test case, you can obtain an RBS as follows:\n()() or (()). In the fourth test case, you can obtain an RBS as follows: ()().\n\n",
        "cf_contest_id": 1469,
        "cf_index": "A",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5\r\n()\r\n(?)\r\n(??)\r\n??()\r\n)?(?\r\n",
                "YES\r\nNO \r\nYES\r\nYES\r\nNO \r\n"
            ]
        ],
        "private_cases": [
            [
                "12\r\n(??)\r\n(??)\r\n(??)\r\n(??)\r\n(??)\r\n(??)\r\n(??)\r\n(??)\r\n(??)\r\n(??)\r\n(??)\r\n(??)\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\n"
            ],
            [
                "1\r\n???????????????????()???????????????????\r\n",
                "YES\r\n"
            ],
            [
                "12\r\n()\r\n()\r\n()\r\n()\r\n()\r\n()\r\n()\r\n()\r\n()\r\n()\r\n()\r\n()\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\n"
            ],
            [
                "12\r\n()\r\n()\r\n()\r\n()\r\n(????????)\r\n(?)\r\n()\r\n()\r\n()\r\n()\r\n()\r\n()\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO \r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\n"
            ],
            [
                "1\r\n()??????????????????????????????????????????????????????????\r\n",
                "YES\r\n"
            ],
            [
                "5\r\n()??\r\n()??\r\n()??\r\n()??\r\n()??\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\n"
            ]
        ]
    }
]