[
    {
        "name": "The Struggling Contestant",
        "description": "To help those contestants who struggle a lot in contests, the headquarters of\nCodeforces are planning to introduce Division 5. In this new division, the\ntags of all problems will be announced prior to the round to help the\ncontestants. The contest consists of \n    n\n problems, where the tag of the\n\n    i\n-th problem is denoted by an integer \n    a_i\n. You want to AK (solve\nall problems). To do that, you must solve the problems in some order. To make\nthe contest funnier, you created extra limitations on yourself. You do not\nwant to solve two problems consecutively with the same tag since it is boring.\nAlso, you are afraid of big jumps in difficulties while solving them, so you\nwant to minimize the number of times that you solve two problems consecutively\nthat are not adjacent in the contest order. Formally, your solve order can be\ndescribed by a permutation \n    p\n of length \n    n\n. The cost of a\npermutation is defined as the number of indices \n    i\n (\n    1\n    \u2264 i1\n. You\nhave the requirement that \n    a_p_i\n     a_p_i+1\n for all \n    1\n    \u2264 i<\n    n\n. You want to know the minimum possible cost of permutation that satisfies\nthe requirement. If no permutations meet this requirement, you should report\nabout it. Input The first line contains a single integer \n    t\n (\n    1\n    \u2264\n    t\n    \u2264 10^4\n) \u2014 the number of test cases. The first line of the description\nof each test case contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    10^5\n) \u2014 the number of problems in the contest. The next line contains\n\n    n\n integers \n    a_1,a_2,\n    \u2026 a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n) \u2014 the\ntags of the problems. It is guaranteed that the sum of \n    n\n over all test\ncases does not exceed \n    10^5\n. Output For each test case, if there are no\npermutations that satisfy the required condition, print \n    -1\n. Otherwise,\nprint the minimum possible cost of a permutation that satisfies the required\ncondition. Example Input 4 6 2 1 2 3 1 1 5 1 1 1 2 2 8 7 7 2 7 7 1 8 7 10 1 2\n3 4 1 1 2 3 4 1 Output 1 3 -1 2 Note In the first test case, let \n    p=[5, 4,\n    3, 2, 1, 6]\n. The cost is \n    1\n because we jump from \n    p_5=1\n to\n\n    p_6=6\n, and \n    |6-1|>1\n. This permutation is valid because we don't\nsolve problems with the same tag twice in a row. We cannot find a permutation\nwith a cost smaller than \n    1\n. In the second test case, let\n\n    p=[1,5,2,4,3]\n. The cost is \n    3\n because \n    |p_2-p_1|>1\n,\n\n    |p_3-p_2|>1\n, and \n    |p_4-p_3|>1\n. The permutation is valid because we\ndon't solve problems with the same tag twice in a row. We cannot find a\npermutation with a cost smaller than \n    3\n. In the third test case, for any\norder of solving the problems, we will solve two problems with the same tag\nconsecutively, so the answer is \n    -1\n.\n\n",
        "cf_contest_id": 1450,
        "cf_index": "F",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n6\r\n2 1 2 3 1 1\r\n5\r\n1 1 1 2 2\r\n8\r\n7 7 2 7 7 1 8 7\r\n10\r\n1 2 3 4 1 1 2 3 4 1\r\n",
                "1\r\n3\r\n-1\r\n2\r\n"
            ]
        ],
        "private_cases": []
    }
]