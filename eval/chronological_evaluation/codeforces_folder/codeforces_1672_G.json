[
    {
        "name": "Cross Xor",
        "description": "There is a grid with \n    r\n rows and \n    c\n columns, where the square on the\n\n    i\n-th row and \n    j\n-th column has an integer \n    a_i, j\n written on\nit. Initially, all elements are set to \n    0\n. We are allowed to do the\nfollowing operation: Choose indices \n    1 \n    \u2264 i \n    \u2264 r\n and \n    1 \n    \u2264 j\n    \n    \u2264 c\n, then replace all values on the same row or column as \n    (i, j)\n\nwith the value xor \n    1\n. In other words, for all \n    a_x, y\n where\n\n    x=i\n or \n    y=j\n or both, replace \n    a_x, y\n with \n    a_x, y\n xor\n\n    1\n. You want to form grid \n    b\n by doing the above operations a finite\nnumber of times. However, some elements of \n    b\n are missing and are\nreplaced with '?' instead. Let \n    k\n be the number of '?' characters. Among\nall the \n    2^k\n ways of filling up the grid \n    b\n by replacing each '?'\nwith '0' or '1', count the number of grids, that can be formed by doing the\nabove operation a finite number of times, starting from the grid filled with\n\n    0\n. As this number can be large, output it modulo \n    998244353\n. Input\nThe first line contains two integers \n    r\n and \n    c\n (\n    1 \n    \u2264 r, c\n    \n    \u2264 2000\n) \u2014 the number of rows and columns of the grid respectively. The\n\n    i\n-th of the next \n    r\n lines contain \n    c\n characters \n    b_i, 1,\n    b_i, 2, \n    \u2026, b_i, c\n (\n    b_i, j\n    \u2208\n    \n    0, 1, ?\n).\nOutput Print a single integer representing the number of ways to fill up grid\n\n    b\n modulo \n    998244353\n. Examples Input 3 3 ?10 1?? 010 Output 1 Input\n2 3 000 001 Output 0 Input 1 1 ? Output 2 Input 6 9 1101011?0 001101?00\n101000110 001011010 0101?01?? 00?1000?0 Output 8 Note In the first test case,\nthe only way to fill in the \n    \ns is to fill it in as such:\n010111010 This can be accomplished by doing a single operation by choosing\n\n    (i,j)=(2,2)\n. In the second test case, it can be shown that there is no\nsequence of operations that can produce that grid.\n\n",
        "cf_contest_id": 1672,
        "cf_index": "G",
        "cf_rating": 3200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graphs",
            "math",
            "matrices"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\n?10\r\n1??\r\n010\r\n",
                "1"
            ],
            [
                "2 3\r\n000\r\n001\r\n",
                "0"
            ],
            [
                "1 1\r\n?\r\n",
                "2"
            ],
            [
                "6 9\r\n1101011?0\r\n001101?00\r\n101000110\r\n001011010\r\n0101?01??\r\n00?1000?0\r\n",
                "8"
            ]
        ],
        "private_cases": [
            [
                "3 3\r\n000\r\n110\r\n000\r\n",
                "0"
            ],
            [
                "3 3\r\n010\r\n010\r\n000\r\n",
                "0"
            ],
            [
                "1 2\r\n01\r\n",
                "0"
            ],
            [
                "2 1\r\n0\r\n1\r\n",
                "0"
            ]
        ]
    }
]