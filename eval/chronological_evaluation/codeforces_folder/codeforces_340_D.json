[
    {
        "name": "Bubble Sort Graph",
        "description": "Iahub recently has learned Bubble Sort, an algorithm that is used to sort a\npermutation with n elements a1, a2, ..., an in ascending order. He is bored of\nthis so simple algorithm, so he invents his own graph. The graph (let's call\nit G) initially has n vertices and 0 edges. During Bubble Sort execution,\nedges appear as described in the following algorithm (pseudocode). procedure\nbubbleSortGraph() build a graph G with n vertices and 0 edges repeat swapped =\nfalse for i = 1 to n - 1 inclusive do: if a[i] > a[i + 1] then add an\nundirected edge in G between a[i] and a[i + 1] swap( a[i], a[i + 1] ) swapped\n= true end if end for until not swapped /* repeat the algorithm as long as\nswapped value is true. */ end procedure For a graph, an independent set is a\nset of vertices in a graph, no two of which are adjacent (so there are no\nedges between vertices of an independent set). A maximum independent set is an\nindependent set which has maximum cardinality. Given the permutation, find the\nsize of the maximum independent set of graph G, if we use such permutation as\nthe premutation a in procedure bubbleSortGraph. Input The first line of the\ninput contains an integer n (2 \u2264 n \u2264 10^5). The next line contains n distinct\nintegers a1, a2, ..., an (1 \u2264 ai \u2264 n). Output Output a single integer \u2014 the\nanswer to the problem. Examples Input 3 3 1 2 Output 2 Note Consider the first\nexample. Bubble sort swaps elements 3 and 1. We add edge (1, 3). Permutation\nis now [1, 3, 2]. Then bubble sort swaps elements 3 and 2. We add edge (2, 3).\nPermutation is now sorted. We have a graph with 3 vertices and 2 edges (1, 3)\nand (2, 3). Its maximal independent set is [1, 2].\n\n",
        "cf_contest_id": 340,
        "cf_index": "D",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dp"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3 1 2\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n4 2 1 3 5\r\n",
                "3\r\n"
            ],
            [
                "10\r\n1 9 8 10 2 3 4 6 5 7\r\n",
                "6\r\n"
            ],
            [
                "50\r\n12 24 42 43 36 3 40 29 7 34 10 13 28 9 35 23 25 21 19 4 20 18 11 38 41 48 6 46 33 17 31 37 2 30 32 44 45 5 47 49 16 15 50 27 26 14 39 22 1 8\r\n",
                "13\r\n"
            ],
            [
                "100\r\n36 48 92 87 28 85 42 10 44 41 39 3 79 9 14 56 1 16 46 35 93 8 82 26 100 59 60 2 96 52 13 98 70 81 71 94 54 91 17 88 33 30 19 50 18 73 65 29 78 21 61 7 99 97 45 89 57 27 76 11 49 72 84 69 43 62 4 22 75 6 66 83 38 34 86 15 40 51 37 74 67 31 20 63 77 80 12 53 5 25 58 90 68 24 64 23 95 32 55 47\r\n",
                "16\r\n"
            ]
        ]
    }
]