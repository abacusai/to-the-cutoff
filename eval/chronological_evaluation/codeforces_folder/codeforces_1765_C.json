[
    {
        "name": "Card Guessing",
        "description": "Consider a deck of cards. Each card has one of \n    4\n suits, and there are\nexactly \n    n\n cards for each suit \u2014 so, the total number of cards in the\ndeck is \n    4n\n. The deck is shuffled randomly so that each of \n    (4n)!\n\npossible orders of cards in the deck has the same probability of being the\nresult of shuffling. Let \n    c_i\n be the \n    i\n-th card of the deck (from\ntop to bottom). Monocarp starts drawing the cards from the deck one by one.\nBefore drawing a card, he tries to guess its suit. Monocarp remembers the\nsuits of the \n    k\n last cards, and his guess is the suit that appeared the\nleast often among the last \n    k\n cards he has drawn. So, while drawing the\n\n    i\n-th card, Monocarp guesses that its suit is the suit that appears the\nminimum number of times among the cards \n    c_i-k, c_i-k+1, \n    \u2026,\n    c_i-1\n (if \n    i \n    \u2264 k\n, Monocarp considers all previously drawn cards,\nthat is, the cards \n    c_1, c_2, \n    \u2026, c_i-1\n). If there are multiple\nsuits that appeared the minimum number of times among the previous cards\nMonocarp remembers, he chooses a random suit out of those for his guess (all\nsuits that appeared the minimum number of times have the same probability of\nbeing chosen). After making a guess, Monocarp draws a card and compares its\nsuit to his guess. If they match, then his guess was correct; otherwise it was\nincorrect. Your task is to calculate the expected number of correct guesses\nMonocarp makes after drawing all \n    4n\n cards from the deck. Input The first\n(and only) line contains two integers \n    n\n (\n    1 \n    \u2264 n \n    \u2264 500\n) and\n\n    k\n (\n    1 \n    \u2264 k \n    \u2264 4 \n    \u00b7 n\n). Output Let the expected value you\nhave to calculate be an irreducible fraction \n    xy\n. Print one\ninteger \u2014 the value of \n    x \n    \u00b7 y^-1\n     998244353\n, where\n\n    y^-1\n is the inverse to \n    y\n (i. e. an integer such that \n    y\n    \n    \u00b7 y^-1\n     998244353 = 1\n). Examples Input 1 1 Output 748683266\nInput 3 2 Output 567184295 Input 2 7 Output 373153250 Input 2 8 Output\n373153250\n\n",
        "cf_contest_id": 1765,
        "cf_index": "C",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "dp",
            "probabilities"
        ],
        "time_limit_seconds": 15.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "1 1\r\n",
                "748683266\r\n"
            ],
            [
                "3 2\r\n",
                "567184295\r\n"
            ],
            [
                "2 7\r\n",
                "373153250\r\n"
            ],
            [
                "2 8\r\n",
                "373153250\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 6\r\n",
                "46887239\r\n"
            ],
            [
                "3 5\r\n",
                "636758902\r\n"
            ],
            [
                "100 400\r\n",
                "73061927\r\n"
            ],
            [
                "250 999\r\n",
                "74263279\r\n"
            ],
            [
                "400 1600\r\n",
                "140199079\r\n"
            ],
            [
                "500 2000\r\n",
                "996444380\r\n"
            ],
            [
                "3 12\r\n",
                "52072925\r\n"
            ],
            [
                "10 39\r\n",
                "347696359\r\n"
            ],
            [
                "10 11\r\n",
                "132285937\r\n"
            ],
            [
                "23 2\r\n",
                "266015689\r\n"
            ],
            [
                "78 199\r\n",
                "225529927\r\n"
            ],
            [
                "78 1\r\n",
                "748683343\r\n"
            ],
            [
                "79 5\r\n",
                "284198203\r\n"
            ],
            [
                "91 333\r\n",
                "39696775\r\n"
            ],
            [
                "95 285\r\n",
                "908660335\r\n"
            ],
            [
                "96 33\r\n",
                "583413057\r\n"
            ],
            [
                "97 20\r\n",
                "875036797\r\n"
            ],
            [
                "97 55\r\n",
                "994829613\r\n"
            ],
            [
                "98 90\r\n",
                "33709677\r\n"
            ],
            [
                "99 113\r\n",
                "622926032\r\n"
            ],
            [
                "99 134\r\n",
                "309271668\r\n"
            ],
            [
                "93 280\r\n",
                "163706986\r\n"
            ],
            [
                "93 78\r\n",
                "896063752\r\n"
            ],
            [
                "99 395\r\n",
                "564758725\r\n"
            ],
            [
                "99 198\r\n",
                "330288818\r\n"
            ],
            [
                "100 1\r\n",
                "748683365\r\n"
            ],
            [
                "100 4\r\n",
                "4640529\r\n"
            ],
            [
                "100 5\r\n",
                "365331777\r\n"
            ],
            [
                "100 100\r\n",
                "776482758\r\n"
            ],
            [
                "200 799\r\n",
                "331203859\r\n"
            ],
            [
                "250 1\r\n",
                "748683515\r\n"
            ],
            [
                "250 2\r\n",
                "704716797\r\n"
            ],
            [
                "250 10\r\n",
                "448496167\r\n"
            ],
            [
                "250 42\r\n",
                "476288456\r\n"
            ],
            [
                "250 250\r\n",
                "418661333\r\n"
            ],
            [
                "250 500\r\n",
                "574345466\r\n"
            ],
            [
                "250 666\r\n",
                "39664519\r\n"
            ],
            [
                "250 777\r\n",
                "881013447\r\n"
            ],
            [
                "400 1\r\n",
                "748683665\r\n"
            ],
            [
                "400 2\r\n",
                "672519931\r\n"
            ],
            [
                "400 42\r\n",
                "502161341\r\n"
            ],
            [
                "400 300\r\n",
                "36531739\r\n"
            ],
            [
                "400 400\r\n",
                "491520382\r\n"
            ],
            [
                "400 1599\r\n",
                "140199079\r\n"
            ],
            [
                "400 1200\r\n",
                "6896349\r\n"
            ],
            [
                "400 1000\r\n",
                "600521095\r\n"
            ],
            [
                "400 1342\r\n",
                "717144459\r\n"
            ],
            [
                "500 1998\r\n",
                "87587590\r\n"
            ],
            [
                "500 1999\r\n",
                "996444380\r\n"
            ],
            [
                "500 1555\r\n",
                "316133164\r\n"
            ],
            [
                "500 1333\r\n",
                "200643534\r\n"
            ],
            [
                "500 1000\r\n",
                "629618712\r\n"
            ],
            [
                "500 999\r\n",
                "250074237\r\n"
            ],
            [
                "500 1001\r\n",
                "881180056\r\n"
            ],
            [
                "500 1\r\n",
                "748683765\r\n"
            ],
            [
                "500 555\r\n",
                "653669294\r\n"
            ]
        ]
    }
]