[
    {
        "name": "Simba on the Circle",
        "description": "You are given a circular array with n elements. The elements are numbered from\nsome element with values from 1 to n in clockwise order. The i-th cell\ncontains the value ai. The robot Simba is in cell s. Each moment of time the\nrobot is in some of the n cells (at the begin he is in s). In one turn the\nrobot can write out the number written in current cell or move to the adjacent\ncell in clockwise or counterclockwise direction. To write out the number from\nthe cell Simba doesn't spend any time, but to move to adjacent cell Simba\nspends one unit of time. Simba wants to write the number from each cell one\ntime, so the numbers will be written in a non decreasing order. Find the least\nnumber of time units to write out all numbers. Input The first line contains\ntwo integers n and s (1 \u2264 s \u2264 n \u2264 2000) \u2014 the number of cells in the circular\narray and the starting position of Simba. The second line contains n integers\nai ( - 10^9 \u2264 ai \u2264 10^9) \u2014 the number written in the i-th cell. The numbers\nare given for cells in order from 1 to n. Some of numbers ai can be equal.\nOutput In the first line print the number t \u2014 the least number of time units.\nEach of the next n lines should contain the direction of robot movement and\nthe number of cells to move in that direction. After that movement the robot\nwrites out the number from the cell in which it turns out. The direction and\nthe number of cells should be printed in the form of +x in case of clockwise\nmovement and -x in case of counterclockwise movement to x cells (0 \u2264 x \u2264 n -\n1). Note that the sum of absolute values of x should be equal to t. Examples\nInput 9 1 0 1 2 2 2 1 0 1 1 Output 12 +0 -3 -1 +2 +1 +2 +1 +1 +1 Input 8 1 0 1\n0 1 0 1 0 1 Output 13 +0 +2 +2 +2 -1 +2 +2 +2 Input 8 1 1 2 3 4 5 6 7 8 Output\n7 +0 +1 +1 +1 +1 +1 +1 +1 Input 8 1 0 0 0 0 0 0 0 0 Output 7 +0 +1 +1 +1 +1 +1\n+1 +1\n\n",
        "cf_contest_id": 612,
        "cf_index": "F",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "dp"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "9 1\r\n0 1 2 2 2 1 0 1 1\r\n",
                "12\r\n+0\r\n-3\r\n-1\r\n+2\r\n+1\r\n+2\r\n+1\r\n+1\r\n+1\r\n"
            ],
            [
                "8 1\r\n0 1 0 1 0 1 0 1\r\n",
                "13\r\n+0\r\n-2\r\n-2\r\n-2\r\n-1\r\n-2\r\n-2\r\n-2\r\n"
            ],
            [
                "8 1\r\n1 2 3 4 5 6 7 8\r\n",
                "7\r\n+0\r\n+1\r\n+1\r\n+1\r\n+1\r\n+1\r\n+1\r\n+1\r\n"
            ],
            [
                "8 1\r\n0 0 0 0 0 0 0 0\r\n",
                "7\r\n+0\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "8 1\r\n0 1 2 2 1 0 1 1\r\n",
                "11\r\n+0\r\n-3\r\n-1\r\n+2\r\n+1\r\n+2\r\n+1\r\n+1\r\n"
            ],
            [
                "1 1\r\n4\r\n",
                "0\r\n+0\r\n"
            ],
            [
                "10 1\r\n-1 0 1 0 -1 1 0 0 1 -1\r\n",
                "22\r\n+0\r\n-1\r\n+5\r\n+3\r\n-1\r\n-3\r\n-2\r\n+1\r\n+3\r\n+3\r\n"
            ],
            [
                "20 7\r\n0 6 0 0 0 -7 -8 9 -7 4 7 2 -4 4 -5 2 6 8 -2 -7\r\n",
                "83\r\n+0\r\n+2\r\n-3\r\n-6\r\n-5\r\n-2\r\n+6\r\n+6\r\n-1\r\n-1\r\n-2\r\n-5\r\n-4\r\n-2\r\n+4\r\n+3\r\n+5\r\n+9\r\n+7\r\n+10\r\n"
            ],
            [
                "30 13\r\n68 50 99 23 84 23 24 -42 82 36 -10 -51 -96 96 19 -4 4 -41 74 92 13 58 26 79 -11 38 -80 -38 73 -21\r\n",
                "238\r\n+0\r\n+14\r\n+15\r\n-4\r\n+10\r\n+10\r\n+2\r\n-5\r\n-14\r\n+5\r\n+1\r\n+4\r\n-6\r\n-9\r\n-2\r\n+3\r\n-14\r\n-13\r\n-14\r\n+6\r\n-10\r\n+9\r\n-2\r\n-10\r\n+5\r\n+15\r\n-4\r\n+15\r\n-6\r\n-11\r\n"
            ],
            [
                "40 1\r\n886 -661 499 -14 -101 660 -259 -499 -766 155 -120 -112 -922 979 36 528 593 653 409 -476 -125 183 -817 59 353 16 525 -43 -388 989 306 -145 935 -712 -243 460 -861 339 347 -445\r\n",
                "437\r\n+12\r\n-16\r\n-14\r\n-14\r\n-15\r\n+8\r\n+6\r\n+12\r\n+20\r\n-11\r\n+18\r\n-12\r\n-3\r\n-11\r\n-10\r\n+1\r\n-7\r\n-17\r\n+16\r\n-18\r\n-11\r\n+9\r\n-14\r\n+12\r\n+9\r\n+7\r\n+1\r\n-14\r\n-6\r\n+17\r\n+7\r\n-16\r\n-11\r\n+1\r\n+1\r\n-12\r\n-5\r\n-8\r\n-19\r\n+16\r\n"
            ],
            [
                "50 32\r\n2624 -8355 -5993 -1 8197 382 -9197 -5078 -7 -1021 -4419 8918 -7114 5016 1912 -8436 -1217 2178 -6513 -9910 -1695 7501 7028 -6171 9063 9112 9063 -1886 9156 -7256 8871 -6855 7059 -5209 2308 5964 -4283 2248 1790 -6658 2906 -478 -5663 -9250 4355 1099 1468 -3051 -9353 -5717\r\n",
                "601\r\n-12\r\n-21\r\n-5\r\n+13\r\n+9\r\n-14\r\n-22\r\n-17\r\n+19\r\n+8\r\n-21\r\n+5\r\n-21\r\n-3\r\n-7\r\n-9\r\n+24\r\n+3\r\n-24\r\n+11\r\n-20\r\n-7\r\n-4\r\n-7\r\n-18\r\n+17\r\n-5\r\n+2\r\n-10\r\n+1\r\n-8\r\n-24\r\n+3\r\n+20\r\n-3\r\n+16\r\n-10\r\n+4\r\n+19\r\n+22\r\n-13\r\n+10\r\n-11\r\n-17\r\n-24\r\n-19\r\n+13\r\n+2\r\n-1\r\n+3\r\n"
            ],
            [
                "60 32\r\n58726 58267 -31806 44691 -52713 -11475 61179 83630 93772 48048 -64921 -16810 -16172 -30820 30109 -81876 -27921 -69676 -28393 -45495 6588 -30154 21312 50563 22336 -37995 -31034 -30980 -72408 -29962 -4891 24299 8648 -69415 -62580 95513 -13691 -92575 -10376 40008 2041 -24616 -6934 -42025 68949 -87961 -91709 -46669 -36624 -75601 -83110 43195 86628 53287 -14813 -7263 -20579 -51021 37654 -13428\r\n",
                "884\r\n+6\r\n+9\r\n-1\r\n+5\r\n+25\r\n-26\r\n-21\r\n-11\r\n+16\r\n-23\r\n+24\r\n+30\r\n-7\r\n-10\r\n-28\r\n+24\r\n-18\r\n+23\r\n+14\r\n+24\r\n+1\r\n-14\r\n+8\r\n+8\r\n-11\r\n-2\r\n+25\r\n+15\r\n+15\r\n+1\r\n-18\r\n-18\r\n+23\r\n+6\r\n-27\r\n+17\r\n-13\r\n-12\r\n+10\r\n-20\r\n+12\r\n-10\r\n+2\r\n+7\r\n-17\r\n-16\r\n-19\r\n+12\r\n+12\r\n+6\r\n+14\r\n+30\r\n+8\r\n-1\r\n+6\r\n-22\r\n+23\r\n-15\r\n+16\r\n+27\r\n"
            ]
        ]
    }
]