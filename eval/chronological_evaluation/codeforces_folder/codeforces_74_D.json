[
    {
        "name": "Hanger",
        "description": "In one very large and very respectable company there is a cloakroom with a\ncoat hanger. It is represented by n hooks, positioned in a row. The hooks are\nnumbered with positive integers from 1 to n from the left to the right. The\ncompany workers have a very complicated work schedule. At the beginning of a\nwork day all the employees are not there and the coat hanger in the cloakroom\nis empty. At some moments of time the employees arrive and some of them leave.\nWhen some employee arrives, he hangs his cloak on one of the available hooks.\nTo be of as little discomfort to his colleagues as possible, the hook where\nthe coat will hang, is chosen like this. First the employee chooses the\nlongest segment among available hooks following in a row. If there are several\nof such segments, then he chooses the one closest to the right. After that the\ncoat is hung on the hook located in the middle of this segment. If the segment\nhas an even number of hooks, then among two central hooks we choose the one\nclosest to the right. When an employee leaves, he takes his coat. As all the\ncompany workers deeply respect each other, no one takes somebody else's coat.\nFrom time to time the director of this respectable company gets bored and he\nsends his secretary to see how many coats hang on the coat hanger from the\ni-th to the j-th hook inclusive. And this whim is always to be fulfilled,\notherwise the director gets angry and has a mental breakdown. Not to spend too\nmuch time traversing from the director's office to the cloakroom and back\nagain, the secretary asked you to write a program, emulating the company\ncloakroom's work. Input The first line contains two integers n, q (1 \u2264 n \u2264\n10^9, 1 \u2264 q \u2264 10^5), which are the number of hooks on the hanger and the\nnumber of requests correspondingly. Then follow q lines with requests, sorted\naccording to time. The request of the type \"0 i j\" (1 \u2264 i \u2264 j \u2264 n) \u2014 is the\ndirector's request. The input data has at least one director's request. In all\nother cases the request contains a positive integer not exceeding 10^9 \u2014 an\nemployee identificator. Each odd appearance of the identificator of an\nemployee in the request list is his arrival. Each even one is his leaving. All\nemployees have distinct identificators. When any employee arrives, there is\nalways at least one free hook. Output For each director's request in the input\ndata print a single number on a single line \u2014 the number of coats hanging on\nthe hooks from the i-th one to the j-th one inclusive. Examples Input 9 11 1 2\n0 5 8 1 1 3 0 3 8 9 0 6 9 6 0 1 9 Output 2 3 2 5\n\n",
        "cf_contest_id": 74,
        "cf_index": "D",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "9 11\r\n1\r\n2\r\n0 5 8\r\n1\r\n1\r\n3\r\n0 3 8\r\n9\r\n0 6 9\r\n6\r\n0 1 9\r\n",
                "2\r\n3\r\n2\r\n5\r\n"
            ]
        ],
        "private_cases": [
            [
                "4 2\r\n1\r\n0 2 2\r\n",
                "0\r\n"
            ],
            [
                "10 5\r\n1\r\n1\r\n1\r\n1\r\n0 1 10\r\n",
                "0\r\n"
            ],
            [
                "7 10\r\n1\r\n2\r\n3\r\n0 1 2\r\n0 4 7\r\n0 2 5\r\n20\r\n0 6 6\r\n99\r\n0 4 6\r\n",
                "1\r\n2\r\n2\r\n1\r\n3\r\n"
            ],
            [
                "7 3\r\n0 2 5\r\n1\r\n0 4 4\r\n",
                "0\r\n1\r\n"
            ],
            [
                "17 17\r\n71\r\n338\r\n0 9 14\r\n338\r\n15\r\n983\r\n71\r\n0 4 5\r\n983\r\n0 4 15\r\n0 16 17\r\n0 1 17\r\n764\r\n15\r\n54\r\n11\r\n666\r\n",
                "2\r\n1\r\n1\r\n0\r\n1\r\n"
            ],
            [
                "10 10\r\n7\r\n4\r\n10\r\n10\r\n7\r\n2\r\n6\r\n4\r\n5\r\n0 5 6\r\n",
                "0\r\n"
            ],
            [
                "7 10\r\n1\r\n2\r\n3\r\n0 1 2\r\n0 4 7\r\n0 2 5\r\n20\r\n0 6 7\r\n99\r\n0 4 6\r\n",
                "1\r\n2\r\n2\r\n2\r\n3\r\n"
            ],
            [
                "10 10\r\n4\r\n1\r\n4\r\n3\r\n8\r\n5\r\n2\r\n0 1 4\r\n8\r\n1\r\n",
                "2\r\n"
            ],
            [
                "10 6\r\n1\r\n3\r\n8\r\n5\r\n2\r\n0 1 4\r\n",
                "1\r\n"
            ],
            [
                "10 8\r\n4\r\n1\r\n4\r\n3\r\n8\r\n5\r\n2\r\n0 1 4\r\n",
                "2\r\n"
            ],
            [
                "10 6\r\n1\r\n3\r\n8\r\n5\r\n2\r\n0 1 4\r\n",
                "1\r\n"
            ],
            [
                "10 10\r\n7\r\n4\r\n10\r\n10\r\n7\r\n2\r\n6\r\n4\r\n5\r\n0 5 6\r\n",
                "0\r\n"
            ],
            [
                "10 8\r\n7\r\n4\r\n7\r\n2\r\n6\r\n4\r\n5\r\n0 5 6\r\n",
                "0\r\n"
            ],
            [
                "10 8\r\n7\r\n4\r\n7\r\n2\r\n6\r\n4\r\n5\r\n0 5 6\r\n",
                "0\r\n"
            ],
            [
                "10 10\r\n7\r\n4\r\n10\r\n10\r\n7\r\n2\r\n6\r\n4\r\n5\r\n0 5 6\r\n",
                "0\r\n"
            ]
        ]
    }
]