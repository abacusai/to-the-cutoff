[
    {
        "name": "Quick Sort",
        "description": "You are given a permutation\n    ^\n    \u2020\n \n    p\n of length \n    n\n and a\npositive integer \n    k \n    \u2264 n\n. In one operation, you: Choose \n    k\n\ndistinct elements \n    p_i_1, p_i_2, \n    \u2026, p_i_k\n. Remove them and\nthen add them sorted in increasing order to the end of the permutation. For\nexample, if \n    p = [2,5,1,3,4]\n and \n    k = 2\n and you choose \n    5\n and\n\n    3\n as the elements for the operation, then \n    [2, \n    5, 1,\n    \n    3, 4] \n    \u2192 [2, 1, 4,\n    \n    3,\n    5]\n. Find the minimum number of operations\nneeded to sort the permutation in increasing order. It can be proven that it\nis always possible to do so. \n    ^\n    \u2020\n A permutation of length \n    n\n\nis an array consisting of \n    n\n distinct integers from \n    1\n to \n    n\n in\narbitrary order. For example, \n    [2,3,1,5,4]\n is a permutation, but\n\n    [1,2,2]\n is not a permutation (\n    2\n appears twice in the array), and\n\n    [1,3,4]\n is also not a permutation (\n    n=3\n but there is \n    4\n in the\narray). Input The first line contains a single integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 10^4\n) \u2014 the number of test cases. The description of test cases\nfollows. The first line of each test case contains two integers \n    n\n and\n\n    k\n (\n    2 \n    \u2264 n \n    \u2264 10^5\n, \n    1 \n    \u2264 k \n    \u2264 n\n). The second line\nof each test case contains \n    n\n integers \n    p_1,p_2,\n    \u2026, p_n\n (\n    1\n    \n    \u2264 p_i \n    \u2264 n\n). It is guaranteed that \n    p\n is a permutation. It is\nguaranteed that the sum of \n    n\n over all test cases does not exceed\n\n    10^5\n. Output For each test case output a single integer \u2014 the minimum\nnumber of operations needed to sort the permutation. It can be proven that it\nis always possible to do so. Example Input 4 3 2 1 2 3 3 1 3 1 2 4 2 1 3 2 4 4\n2 2 3 1 4 Output 0 1 1 2 Note In the first test case, the permutation is\nalready sorted. In the second test case, you can choose element \n    3\n, and\nthe permutation will become sorted as follows: \n    [\n    3, 1, 2]\n    \n    \u2192 [1, 2, \n    3]\n. In the third test case, you can\nchoose elements \n    3\n and \n    4\n, and the permutation will become sorted as\nfollows: \n    [1, \n    3, 2, \n    4] \n    \u2192 [1, 2,\n    \n    3,\n    4]\n. In the fourth test case, it can be\nshown that it is impossible to sort the permutation in \n    1\n operation.\nHowever, if you choose elements \n    2\n and \n    1\n in the first operation,\nand choose elements \n    3\n and \n    4\n in the second operation, the\npermutation will become sorted as follows: \n    [\n    2, 3,\n    \n    1, 4] \n    \u2192 [\n    3, \n    4,\n    \n    1, \n    2] \n    \u2192 [1,2, \n    3,\n    \n    4]\n.\n\n",
        "cf_contest_id": 1768,
        "cf_index": "B",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3 2\r\n1 2 3\r\n3 1\r\n3 1 2\r\n4 2\r\n1 3 2 4\r\n4 2\r\n2 3 1 4\r\n",
                "0\r\n1\r\n1\r\n2\r\n"
            ]
        ],
        "private_cases": []
    }
]