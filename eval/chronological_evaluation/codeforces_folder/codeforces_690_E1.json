[
    {
        "name": "Photographs (I)",
        "description": "The Human-Cow Confederation (HC^2), led by Heidi, has built a base where\npeople and cows can hide, guarded from zombie attacks. The entrance to the\nbase is protected by an automated gate which performs a kind of a Turing test:\nit shows the entering creature a photograph and asks them whether the top and\nbottom halves of this photograph have been swapped or not. A person (or even a\ncow) will have no problem answering such questions; on the other hand, a\nzombie would just randomly smash one of the two buttons. The creature is asked\na series of such questions. If at least 75\nthe gate is unlocked; otherwise, a side door opens, beneath which a huge fan\nis spinning... Heidi is now building a robot army to fight the zombies, and\nshe wants the robots to also be able to enter the base. You are tasked with\nprogramming them to distinguish the images. The first two images from the test\nset. The first picture has been rearranged, but not the second. Input The\nfirst line of the input contains the number q of questions (1 \u2264 q \u2264 220).\nAfter that, q questions follow, each of which in the format described below.\nThe first line of every question contains two space-separated integers h and w\n(1 \u2264 h, w \u2264 600) \u2013 the height (number of rows) and width (number of columns)\nof the photograph. (Most photographs are roughly 200 \u00d7 300.) After this, h\nlines follow, each describing a single row of the picture. The picture is\nmonochrome (in shades of grey). Its i-th row is described by w space-separated\nintegers aij (j = 1, ..., w), where aij is the brightness of the corresponding\npixel (0 \u2264 aij < 256, where 0 is black and 255 is white). Each picture will be\neither a real-life photograph, or a real-life photograph which has been broken\nup into two pieces and rearranged. More precisely, in the latter case, the\ntopmost rows have been moved to the bottom of the picture. It is guaranteed\nthat h is even. There is only a single input file to be processed, called\nall.in, and it is downloadable from the online judge. You are also a given\nanother input file, called sample.in, which contains the first 20 pictures\nfrom all.in; you are provided the correct answers for sample.in in sample.out.\nYou are also given a directory easy_bmp, which contains the first 50 input\nphotographs in the form of .bmp image files, as well as a directory\neasy_sample_original_bmp, which contains the first 20 images before\nrearrangement. Check the notes for the download links. Output Your program\nshould print q lines. The i-th line should contain your answer for the i-th\nquestion: YES if the photograph has been rearranged and NO otherwise. Your\nanswers will be accepted if they all conform to this format and if at least\n75\nprocess it locally and submit just your precomputed answers (i.e., a program\nwhich just prints your output for the input file all.in). Note The link to\ndownload all necessary files is\nhttp://assets.codeforces.com/files/690/easy_contestant_package.zip\n\n",
        "cf_contest_id": 690,
        "cf_index": "E1",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [],
        "time_limit_seconds": 15.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [],
        "private_cases": []
    }
]