[
    {
        "name": "Inbox (100500)",
        "description": "Over time, Alexey's mail box got littered with too many letters. Some of them\nare read, while others are unread. Alexey's mail program can either show a\nlist of all letters or show the content of a single letter. As soon as the\nprogram shows the content of an unread letter, it becomes read letter (if the\nprogram shows the content of a read letter nothing happens). In one click he\ncan do any of the following operations: Move from the list of letters to the\ncontent of any single letter. Return to the list of letters from single letter\nviewing mode. In single letter viewing mode, move to the next or to the\nprevious letter in the list. You cannot move from the first letter to the\nprevious one or from the last letter to the next one.The program cannot delete\nthe letters from the list or rearrange them. Alexey wants to read all the\nunread letters and go watch football. Now he is viewing the list of all\nletters and for each letter he can see if it is read or unread. What minimum\nnumber of operations does Alexey need to perform to read all unread letters?\nInput The first line contains a single integer n (1 \u2264 n \u2264 1000) \u2014 the number\nof letters in the mailbox. The second line contains n space-separated integers\n(zeros and ones) \u2014 the state of the letter list. The i-th number equals either\n1, if the i-th number is unread, or 0, if the i-th letter is read. Output\nPrint a single number \u2014 the minimum number of operations needed to make all\nthe letters read. Examples Input 5 0 1 0 1 0 Output 3 Input 5 1 1 0 0 1 Output\n4 Input 2 0 0 Output 0 Note In the first sample Alexey needs three operations\nto cope with the task: open the second letter, move to the third one, move to\nthe fourth one. In the second sample the action plan: open the first letter,\nmove to the second letter, return to the list, open the fifth letter. In the\nthird sample all letters are already read.\n\n",
        "cf_contest_id": 465,
        "cf_index": "B",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n0 1 0 1 0\r\n",
                "3"
            ],
            [
                "5\r\n1 1 0 0 1\r\n",
                "4"
            ],
            [
                "2\r\n0 0\r\n",
                "0"
            ]
        ],
        "private_cases": [
            [
                "9\r\n1 0 1 0 1 0 1 0 1\r\n",
                "9"
            ],
            [
                "5\r\n1 1 1 1 1\r\n",
                "5"
            ],
            [
                "14\r\n0 0 1 1 1 0 1 1 1 0 1 1 1 0\r\n",
                "11"
            ],
            [
                "23\r\n1 1 1 0 1 1 0 1 1 0 1 1 1 0 1 1 0 1 1 0 1 1 1\r\n",
                "23"
            ],
            [
                "27\r\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0\r\n",
                "25"
            ],
            [
                "10\r\n1 0 0 0 0 1 0 0 0 1\r\n",
                "5"
            ],
            [
                "10\r\n1 0 0 1 0 0 1 1 0 1\r\n",
                "8"
            ],
            [
                "27\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n",
                "0"
            ],
            [
                "39\r\n1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1\r\n",
                "39"
            ],
            [
                "48\r\n1 0 1 0 1 0 1 0 0 1 0 1 0 0 1 0 1 0 0 1 0 1 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 1 0 1 0 1 0 0 1 0 0 1\r\n",
                "39"
            ],
            [
                "71\r\n0 0 0 0 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 0 0 0 0 0 0\r\n",
                "59"
            ],
            [
                "99\r\n1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1\r\n",
                "99"
            ],
            [
                "99\r\n1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1\r\n",
                "99"
            ],
            [
                "100\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "100"
            ],
            [
                "100\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "99"
            ],
            [
                "193\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n",
                "1"
            ],
            [
                "213\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n",
                "5"
            ],
            [
                "2\r\n1 0\r\n",
                "1"
            ],
            [
                "1\r\n1\r\n",
                "1"
            ],
            [
                "1\r\n0\r\n",
                "0"
            ],
            [
                "5\r\n0 0 0 0 1\r\n",
                "1"
            ],
            [
                "12\r\n0 1 1 0 1 1 0 1 1 0 0 0\r\n",
                "8"
            ],
            [
                "3\r\n1 0 0\r\n",
                "1"
            ],
            [
                "5\r\n0 0 1 0 0\r\n",
                "1"
            ],
            [
                "3\r\n0 1 0\r\n",
                "1"
            ],
            [
                "6\r\n1 1 0 0 0 0\r\n",
                "2"
            ],
            [
                "4\r\n0 1 0 0\r\n",
                "1"
            ],
            [
                "5\r\n1 1 1 0 0\r\n",
                "3"
            ],
            [
                "4\r\n1 0 0 0\r\n",
                "1"
            ],
            [
                "6\r\n1 1 1 1 0 0\r\n",
                "4"
            ]
        ]
    }
]