[
    {
        "name": "MCF",
        "description": "You are given a graph consisting of \n    n\n vertices and \n    m\n directed\narcs. The \n    i\n-th arc goes from the vertex \n    x_i\n to the vertex\n\n    y_i\n, has capacity \n    c_i\n and weight \n    w_i\n. No arc goes into the\nvertex \n    1\n, and no arc goes from the vertex \n    n\n. There are no cycles\nof negative weight in the graph (it is impossible to travel from any vertex to\nitself in such a way that the total weight of all arcs you go through is\nnegative). You have to assign each arc a flow (an integer between \n    0\n and\nits capacity, inclusive). For every vertex except \n    1\n and \n    n\n, the\ntotal flow on the arcs going to this vertex must be equal to the total flow on\nthe arcs going from that vertex. Let the flow on the \n    i\n-th arc be\n\n    f_i\n, then the cost of the flow is equal to \n    \u2211\n    _i =\n    1^m f_i w_i\n. You have to find a flow which minimizes the cost. Sounds\nclassical, right? Well, we have some additional constraints on the flow on\nevery edge: if \n    c_i\n is even, \n    f_i\n must be even; if \n    c_i\n is odd,\n\n    f_i\n must be odd. Can you solve this problem? Input The first line\ncontains two integers \n    n\n and \n    m\n (\n    2 \n    \u2264 n \n    \u2264 100\n; \n    1\n    \n    \u2264 m \n    \u2264 200\n). Then \n    m\n lines follow. The \n    i\n-th of them\ncontains four integers \n    x_i\n, \n    y_i\n, \n    c_i\n, and \n    w_i\n (\n    1\n    \n    \u2264 x_i \n    \u2264 n - 1\n; \n    2 \n    \u2264 y_i \n    \u2264 n\n; \n    x_i \n     y_i\n; \n    1\n    \n    \u2264 c_i \n    \u2264 100\n; \n    -100 \n    \u2264 w_i \n    \u2264 100\n). These integers\ndescribe the \n    i\n-th arc. Additional constraints on the input: there are no\nnegative cycles in the graph. Output If a flow satisfying all of the\nconstraints does not exist, print Impossible. Otherwise, print two lines: the\nfirst line should contain one word Possible; the second line should contain\n\n    m\n integers \n    f_1, f_2, \n    \u2026, f_m\n. If there are multiple answers,\nprint any of them. Note that the cost of the flow should be minimized.\nExamples Input 3 3 1 2 3 -10 1 2 3 -15 2 3 2 0 Output Possible 1 1 2 Input 3 3\n1 2 3 -10 1 2 3 -15 2 3 3 0 Output Impossible Input 3 3 1 2 3 -10 1 2 3 -15 2\n3 4 0 Output Possible 1 3 4 Input 6 7 5 6 9 -40 1 2 3 -10 1 4 5 20 4 5 7 30 2\n5 1 -15 1 3 3 5 3 5 3 0 Output Possible 5 1 1 1 1 3 3\n\n",
        "cf_contest_id": 1766,
        "cf_index": "F",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "flows"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3 3\r\n1 2 3 -10\r\n1 2 3 -15\r\n2 3 2 0\r\n",
                "Possible\r\n1 1 2 "
            ],
            [
                "3 3\r\n1 2 3 -10\r\n1 2 3 -15\r\n2 3 3 0\r\n",
                "Impossible\r\n"
            ],
            [
                "3 3\r\n1 2 3 -10\r\n1 2 3 -15\r\n2 3 4 0\r\n",
                "Possible\r\n1 3 4 "
            ],
            [
                "6 7\r\n5 6 9 -40\r\n1 2 3 -10\r\n1 4 5 20\r\n4 5 7 30\r\n2 5 1 -15\r\n1 3 3 5\r\n3 5 3 0\r\n",
                "Possible\r\n5 1 1 1 1 3 3 "
            ]
        ],
        "private_cases": [
            [
                "5 15\r\n3 4 2 43\r\n2 5 1 -10\r\n3 2 2 -2\r\n2 4 4 33\r\n4 5 7 -37\r\n3 4 6 30\r\n2 4 10 33\r\n4 2 1 -30\r\n1 3 2 -16\r\n1 4 4 -2\r\n4 3 8 -27\r\n3 5 6 -9\r\n3 2 2 3\r\n3 4 4 29\r\n4 2 10 -28\r\n",
                "Possible\r\n0 1 0 0 3 0 0 1 2 4 0 2 0 0 0 "
            ],
            [
                "5 15\r\n3 2 4 -43\r\n3 4 4 24\r\n3 2 4 -24\r\n2 5 8 1\r\n1 2 6 -56\r\n1 4 6 1\r\n1 2 10 -65\r\n4 3 2 -19\r\n1 4 4 -1\r\n1 3 6 -20\r\n1 5 8 -69\r\n1 3 4 -21\r\n3 2 6 -40\r\n1 5 9 -66\r\n1 5 2 -65\r\n",
                "Possible\r\n0 0 0 8 0 0 8 0 0 0 8 0 0 9 2 "
            ],
            [
                "5 15\r\n2 4 10 -23\r\n1 3 10 -50\r\n2 3 2 -20\r\n3 5 2 -15\r\n1 2 8 -27\r\n3 2 4 31\r\n4 2 2 37\r\n1 3 2 -50\r\n3 2 4 33\r\n1 3 4 -39\r\n4 5 6 -20\r\n1 5 5 -70\r\n2 3 10 -20\r\n3 5 8 -12\r\n1 3 6 -40\r\n",
                "Possible\r\n6 8 0 2 6 0 0 2 0 0 6 5 0 8 0 "
            ],
            [
                "5 15\r\n2 3 6 0\r\n2 4 6 -37\r\n1 5 1 -27\r\n2 5 6 -38\r\n3 4 8 -33\r\n3 2 10 0\r\n2 4 8 -34\r\n2 5 4 -38\r\n2 5 8 -35\r\n4 2 4 46\r\n2 5 4 -45\r\n2 3 4 2\r\n3 4 2 -33\r\n3 4 2 -23\r\n1 3 2 1\r\n",
                "Possible\r\n0 0 1 0 0 2 0 0 0 0 2 0 0 0 2 "
            ],
            [
                "5 15\r\n2 5 3 1\r\n3 4 8 -18\r\n4 3 6 42\r\n3 2 7 -38\r\n4 5 2 1\r\n1 3 7 0\r\n2 3 2 40\r\n4 5 2 1\r\n1 3 8 -3\r\n4 5 10 4\r\n2 4 4 5\r\n3 4 2 -35\r\n4 5 8 3\r\n4 2 6 6\r\n3 5 10 -38\r\n",
                "Possible\r\n3 0 0 3 0 7 0 2 8 0 0 2 0 0 10 "
            ],
            [
                "5 15\r\n1 3 6 -28\r\n4 5 5 -34\r\n1 5 5 -69\r\n4 3 6 12\r\n2 3 6 29\r\n2 4 1 29\r\n4 5 6 -29\r\n1 3 6 -27\r\n1 5 10 -74\r\n1 2 1 -49\r\n1 5 3 -58\r\n2 3 4 29\r\n4 3 2 13\r\n4 5 8 -25\r\n2 3 10 39\r\n",
                "Possible\r\n0 1 5 0 0 1 0 0 10 1 3 0 0 0 0 "
            ],
            [
                "5 15\r\n1 2 6 -8\r\n1 3 6 -74\r\n4 3 4 -3\r\n2 4 6 -56\r\n4 2 4 60\r\n2 3 3 -61\r\n2 5 5 -51\r\n2 5 3 -51\r\n1 2 5 -10\r\n4 2 4 58\r\n2 3 2 -48\r\n3 5 5 17\r\n4 5 8 13\r\n3 2 2 61\r\n3 4 2 10\r\n",
                "Possible\r\n6 6 0 4 0 1 5 3 5 0 0 5 4 2 0 "
            ],
            [
                "5 15\r\n1 4 10 -20\r\n2 4 4 10\r\n4 3 1 -21\r\n3 5 2 -6\r\n2 3 6 -4\r\n3 4 2 33\r\n1 3 2 -48\r\n4 5 9 -21\r\n3 2 2 20\r\n2 5 10 -9\r\n2 3 4 -13\r\n3 5 7 -9\r\n3 5 4 0\r\n2 4 4 10\r\n2 4 2 12\r\n",
                "Possible\r\n10 0 1 0 0 0 2 9 0 0 0 3 0 0 0 "
            ],
            [
                "5 15\r\n4 2 4 6\r\n4 5 6 -40\r\n1 5 7 -56\r\n2 5 9 -33\r\n1 4 2 -18\r\n1 4 1 -19\r\n2 4 4 1\r\n3 5 8 -8\r\n1 4 1 -14\r\n3 2 6 28\r\n3 5 6 -11\r\n3 2 6 25\r\n2 4 8 4\r\n3 2 10 26\r\n1 2 9 -11\r\n",
                "Possible\r\n0 6 7 7 2 1 2 0 1 0 0 0 0 0 9 "
            ],
            [
                "5 15\r\n2 5 4 -68\r\n1 3 1 -13\r\n3 4 2 -8\r\n4 3 3 13\r\n3 5 8 -37\r\n2 4 7 -24\r\n3 5 1 -40\r\n2 4 2 -14\r\n1 5 4 -65\r\n1 5 8 -56\r\n3 2 8 28\r\n1 3 5 -9\r\n1 4 2 -18\r\n1 2 7 8\r\n4 3 6 14\r\n",
                "Possible\r\n4 1 0 3 8 1 1 0 4 8 0 5 2 5 0 "
            ],
            [
                "5 10\r\n2 3 1 -56\r\n2 3 4 -55\r\n1 5 1 4\r\n2 5 3 -18\r\n3 4 5 73\r\n1 2 4 26\r\n3 4 8 73\r\n1 3 2 -29\r\n2 4 6 27\r\n4 5 5 -36\r\n",
                "Possible\r\n1 0 1 1 1 2 0 0 0 1 "
            ],
            [
                "4 6\r\n2 3 8 -8\r\n3 4 8 10\r\n2 3 6 -8\r\n1 3 5 -8\r\n3 4 7 9\r\n2 3 2 -7\r\n",
                "Possible\r\n0 0 0 1 1 0 "
            ],
            [
                "3 5\r\n1 2 2 -1\r\n2 3 1 -1\r\n2 3 1 -1\r\n2 3 1 -1\r\n2 3 1 -1\r\n",
                "Impossible\r\n"
            ],
            [
                "3 2\r\n1 2 1 0\r\n1 2 1 0\r\n",
                "Impossible\r\n"
            ],
            [
                "3 5\r\n1 2 2 0\r\n2 3 1 0\r\n2 3 1 0\r\n2 3 1 0\r\n2 3 1 0\r\n",
                "Impossible\r\n"
            ]
        ]
    }
]