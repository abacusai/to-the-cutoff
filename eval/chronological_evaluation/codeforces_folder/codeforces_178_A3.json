[
    {
        "name": "Educational Game",
        "description": "The Smart Beaver from ABBYY began to develop a new educational game for\nchildren. The rules of the game are fairly simple and are described below. The\nplaying field is a sequence of n non-negative integers ai numbered from 1 to\nn. The goal of the game is to make numbers a1, a2, ..., ak (i.e. some prefix\nof the sequence) equal to zero for some fixed k (k < n), and this should be\ndone in the smallest possible number of moves. One move is choosing an integer\ni (1 \u2264 i \u2264 n) such that ai > 0 and an integer t (t \u2265 0) such that i + 2^t \u2264 n.\nAfter the values of i and t have been selected, the value of ai is decreased\nby 1, and the value of ai + 2^t is increased by 1. For example, let n = 4 and\na = (1, 0, 1, 2), then it is possible to make move i = 3, t = 0 and get a =\n(1, 0, 0, 3) or to make move i = 1, t = 1 and get a = (0, 0, 2, 2) (the only\npossible other move is i = 1, t = 0). You are given n and the initial sequence\nai. The task is to calculate the minimum number of moves needed to make the\nfirst k elements of the original sequence equal to zero for each possible k (1\n\u2264 k < n). Input The first input line contains a single integer n. The second\nline contains n integers ai (0 \u2264 ai \u2264 10^4), separated by single spaces. The\ninput limitations for getting 20 points are: 1 \u2264 n \u2264 300 The input limitations\nfor getting 50 points are: 1 \u2264 n \u2264 2000 The input limitations for getting 100\npoints are: 1 \u2264 n \u2264 10^5 Output Print exactly n - 1 lines: the k-th output\nline must contain the minimum number of moves needed to make the first k\nelements of the original sequence ai equal to zero. Please do not use the \nspecifier to read or write 64-bit integers in \u0421++. It is preferred to use the\ncin, cout streams, or the \n3 Input 8 1 2 3 4 5 6 7 8 Output 1 3 6 10 16 24 40\n\n",
        "cf_contest_id": 178,
        "cf_index": "A3",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 0 1 2\r\n",
                "1\r\n1\r\n3\r\n"
            ],
            [
                "8\r\n1 2 3 4 5 6 7 8\r\n",
                "1\r\n3\r\n6\r\n10\r\n16\r\n24\r\n40\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n4 1 4 7 6\r\n",
                "4\r\n5\r\n9\r\n17\r\n"
            ],
            [
                "9\r\n13 13 7 11 3 9 3 5 5\r\n",
                "13\r\n26\r\n33\r\n44\r\n47\r\n69\r\n79\r\n117\r\n"
            ],
            [
                "30\r\n8 17 20 15 18 15 20 10 5 13 5 4 15 9 11 14 18 15 7 16 18 9 17 7 10 9 5 13 17 16\r\n",
                "8\r\n25\r\n45\r\n60\r\n78\r\n93\r\n113\r\n123\r\n128\r\n141\r\n146\r\n150\r\n165\r\n174\r\n185\r\n199\r\n225\r\n257\r\n284\r\n315\r\n351\r\n375\r\n423\r\n454\r\n495\r\n549\r\n634\r\n713\r\n907\r\n"
            ],
            [
                "80\r\n72 66 82 46 44 22 63 92 71 65 5 30 45 84 29 73 9 90 25 19 26 15 12 29 33 19 85 92 91 66 83 39 100 53 20 99 11 81 26 41 36 51 21 72 28 100 34 3 24 58 11 85 73 18 4 45 90 99 42 85 26 71 58 49 76 32 88 13 40 98 57 95 20 36 70 66 75 12 54 96\r\n",
                "72\r\n138\r\n220\r\n266\r\n310\r\n332\r\n395\r\n487\r\n558\r\n623\r\n628\r\n658\r\n703\r\n787\r\n816\r\n889\r\n898\r\n988\r\n1013\r\n1032\r\n1058\r\n1073\r\n1085\r\n1114\r\n1147\r\n1166\r\n1251\r\n1343\r\n1434\r\n1500\r\n1583\r\n1622\r\n1722\r\n1775\r\n1795\r\n1894\r\n1905\r\n1986\r\n2012\r\n2053\r\n2089\r\n2140\r\n2161\r\n2233\r\n2261\r\n2361\r\n2395\r\n2398\r\n2431\r\n2579\r\n2615\r\n2719\r\n2818\r\n2851\r\n2867\r\n2941\r\n3064\r\n3182\r\n3309\r\n3486\r\n3603\r\n3740\r\n3881\r\n3969\r\n4250\r\n4549\r\n4775\r\n5037\r\n5231\r\n5465\r\n5627\r\n5929\r\n6460\r\n7029\r\n7478\r\n8085\r\n9075\r\n10211\r\n12070\r\n"
            ]
        ]
    }
]