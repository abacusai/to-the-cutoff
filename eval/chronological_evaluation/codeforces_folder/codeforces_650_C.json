[
    {
        "name": "Table Compression",
        "description": "Little Petya is now fond of data compression algorithms. He has already\nstudied gz, bz, zip algorithms and many others. Inspired by the new knowledge,\nPetya is now developing the new compression algorithm which he wants to name\ndis. Petya decided to compress tables. He is given a table a consisting of n\nrows and m columns that is filled with positive integers. He wants to build\nthe table a' consisting of positive integers such that the relative order of\nthe elements in each row and each column remains the same. That is, if in some\nrow i of the initial table ai, j < ai, k, then in the resulting table a'i, j <\na'i, k, and if ai, j = ai, k then a'i, j = a'i, k. Similarly, if in some\ncolumn j of the initial table ai, j < ap, j then in compressed table a'i, j <\na'p, j and if ai, j = ap, j then a'i, j = a'p, j. Because large values require\nmore space to store them, the maximum value in a' should be as small as\npossible. Petya is good in theory, however, he needs your help to implement\nthe algorithm. Input The first line of the input contains two integers n and m\n(, the number of rows and the number of columns of the table respectively.\nEach of the following n rows contain m integers ai, j (1 \u2264 ai, j \u2264 10^9) that\nare the values in the table. Output Output the compressed table in form of n\nlines each containing m integers. If there exist several answers such that the\nmaximum number in the compressed table is minimum possible, you are allowed to\noutput any of them. Examples Input 2 2 1 2 3 4 Output 1 2 2 3 Input 4 3 20 10\n30 50 40 30 50 60 70 90 80 70 Output 2 1 3 5 4 3 5 6 7 9 8 7 Note In the first\nsample test, despite the fact a1, 2 \u2260 a21, they are not located in the same\nrow or column so they may become equal after the compression.\n\n",
        "cf_contest_id": 650,
        "cf_index": "C",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dp",
            "dsu",
            "graphs",
            "greedy"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 2\r\n1 2\r\n3 4\r\n",
                "1\n2\n2\n3\n"
            ],
            [
                "4 3\r\n20 10 30\r\n50 40 30\r\n50 60 70\r\n90 80 70\r\n",
                "2\n1\n3\n5\n4\n3\n5\n6\n7\n9\n8\n7\n"
            ]
        ],
        "private_cases": [
            [
                "2 1\r\n1000000000\r\n1\r\n",
                "2\n1\n"
            ],
            [
                "1 1\r\n958605409\r\n",
                "1\n"
            ],
            [
                "3 3\r\n1 1 999999999\r\n1 1 1000000000\r\n999999999 500000000 1\r\n",
                "1\n1\n2\n1\n1\n3\n3\n2\n1\n"
            ],
            [
                "2 2\r\n958819970 110051200\r\n110051200 958819970\r\n",
                "2\n1\n1\n2\n"
            ],
            [
                "3 3\r\n867378143 815728296 448999007\r\n378701035 448999007 815728296\r\n867378143 815728296 448999007\r\n",
                "4\n3\n1\n1\n2\n3\n4\n3\n1\n"
            ],
            [
                "1 48\r\n661781480 254994501 793217098 79665228 199745889 421882115 409323554 689271596 807513352 748218518 294849899 105389023 805950383 306545085 294849899 626862773 365681051 376812180 378266471 892695176 113846442 160323626 369898712 254994501 874749921 240835817 182326424 941375528 129084081 793217098 793217098 817608760 892695176 751787201 798639707 793217098 252530514 662195737 102912484 182326424 169250874 793217098 387582363 927903358 972357925 919457817 793217098 550564947\r\n",
                "24\n12\n29\n1\n9\n21\n20\n26\n32\n27\n13\n3\n31\n14\n13\n23\n15\n17\n18\n35\n4\n6\n16\n12\n34\n10\n8\n38\n5\n29\n29\n33\n35\n28\n30\n29\n11\n25\n2\n8\n7\n29\n19\n37\n39\n36\n29\n22\n"
            ],
            [
                "8 13\r\n1 2 3 4 5 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 5 1 1 1 1 1\r\n1 5 1 1 5 1 1 1 1 1 1 1 1\r\n5 1 1 1 1 5 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 5 1 1 1 1 1 1\r\n1 5 1 1 1 5 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1\r\n6 1 1 1 1 1 1 1 7 8 9 10 11\r\n",
                "1\n2\n3\n4\n5\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n5\n1\n1\n5\n1\n1\n1\n1\n1\n1\n1\n1\n5\n1\n1\n1\n1\n5\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n2\n1\n1\n1\n1\n1\n1\n1\n5\n1\n1\n1\n5\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n6\n1\n1\n1\n1\n1\n1\n1\n7\n8\n9\n10\n11\n"
            ],
            [
                "6 6\r\n1 2 3 4 5 6\r\n7 9 9 9 9 7\r\n9 7 9 9 7 9\r\n9 9 7 7 9 9\r\n9 7 9 7 9 9\r\n7 9 9 9 7 9\r\n",
                "1\n2\n3\n4\n5\n6\n7\n8\n8\n8\n8\n7\n8\n7\n8\n8\n7\n8\n8\n8\n7\n7\n8\n8\n8\n7\n8\n7\n8\n8\n7\n8\n8\n8\n7\n8\n"
            ],
            [
                "6 6\r\n1 2 3 4 5 6\r\n9 9 9 9 7 7\r\n9 9 9 7 7 9\r\n9 9 7 7 9 9\r\n9 7 7 9 9 9\r\n7 7 9 9 9 9\r\n",
                "1\n2\n3\n4\n5\n6\n8\n8\n8\n8\n7\n7\n8\n8\n8\n7\n7\n8\n8\n8\n7\n7\n8\n8\n8\n7\n7\n8\n8\n8\n7\n7\n8\n8\n8\n8\n"
            ],
            [
                "7 5\r\n1 2 1 1 1\r\n1 5 1 5 1\r\n1 5 1 1 1\r\n1 5 1 1 1\r\n1 2 3 5 4\r\n1 5 1 1 1\r\n1 5 1 1 1\r\n",
                "1\n2\n1\n1\n1\n1\n5\n1\n5\n1\n1\n5\n1\n1\n1\n1\n5\n1\n1\n1\n1\n2\n3\n5\n4\n1\n5\n1\n1\n1\n1\n5\n1\n1\n1\n"
            ]
        ]
    }
]