[
    {
        "name": "Triameter",
        "description": "\u2014 What is my mission? \u2014 To count graph diameters. You and Your Submission A\ntree is a connected undirected graph without cycles. A weighted tree has a\nweight assigned to each edge. The degree of a vertex is the number of edges\nconnected to this vertex. You are given a weighted tree with \n    n\n vertices,\neach edge has a weight of \n    1\n. Let \n    L\n be the set of vertices with\ndegree equal to \n    1\n. You have to answer \n    q\n independent queries. In\nthe \n    i\n-th query: You are given a positive integer \n    x_i\n. For all\n\n    u,v \n    \u2208 L\n such that \n    u < v\n, add edge \n    (u, v)\n with weight\n\n    x_i\n to the graph (initially the given tree). Find the diameter of the\nresulting graph. The diameter of a graph is equal to \n    max\n    _1\n    \n    \u2264 u < v \n    \u2264 n\n    d(u, v)\n, where\n\n    d(u, v)\n is the length of the shortest path between\nvertex \n    u\n and vertex \n    v\n. Input The first line contains a single\ninteger \n    n\n (\n    3 \n    \u2264 n \n    \u2264 10^6\n). The second line contains \n    n -\n    1\n integers \n    p_2,p_3,\n    \u2026,p_n\n (\n    1 \n    \u2264 p_i < i\n) indicating\nthat there is an edge between vertices \n    i\n and \n    p_i\n. It is guaranteed\nthat the given edges form a tree. The third line contains a single integer\n\n    q\n (\n    1 \n    \u2264 q \n    \u2264 10\n). The fourth line contains \n    q\n integers\n\n    x_1,x_2,\n    \u2026,x_q\n (\n    1 \n    \u2264 x_i \n    \u2264 n\n). All \n    x_i\n are\ndistinct. Output Print \n    q\n integers in a single line \u2014 the answers to the\nqueries. Examples Input 4 1 2 2 4 1 2 3 4 Output 1 2 2 2 Input 7 1 2 3 4 2 1 7\n2 1 3 7 5 6 4 Output 3 3 4 5 5 5 4 Input 3 1 2 1 1 Output 1 Note The graph in\nthe first test after adding the edges:\n\n",
        "cf_contest_id": 1712,
        "cf_index": "F",
        "cf_rating": 3200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "trees"
        ],
        "time_limit_seconds": 4.5,
        "memory_limit_bytes": 768.0,
        "public_cases": [
            [
                "4\r\n1 2 2\r\n4\r\n1 2 3 4\r\n",
                "1 2 2 2 "
            ],
            [
                "7\r\n1 2 3 4 2 1\r\n7\r\n2 1 3 7 5 6 4\r\n",
                "3 3 4 5 5 5 4 "
            ],
            [
                "3\r\n1 2\r\n1\r\n1\r\n",
                "1 "
            ]
        ],
        "private_cases": []
    }
]