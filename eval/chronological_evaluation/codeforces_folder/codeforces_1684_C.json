[
    {
        "name": "Column Swapping",
        "description": "You are given a grid with \n    n\n rows and \n    m\n columns, where each cell\nhas a positive integer written on it. Let's call a grid good, if in each row\nthe sequence of numbers is sorted in a non-decreasing order. It means, that\nfor each \n    1 \n    \u2264 i \n    \u2264 n\n and \n    2 \n    \u2264 j \n    \u2264 m\n the following\nholds: \n    a_i,j\n    \u2265 a_i, j-1\n. You have to to do the following\noperation exactly once: choose two columns with indexes \n    i\n and \n    j\n\n(not necessarily different), \n    1 \n    \u2264 i, j \n    \u2264 m\n, and swap them. You\nare asked to determine whether it is possible to make the grid good after the\nswap and, if it is, find the columns that need to be swapped. Input Each test\ncontains multiple test cases. The first line contains the number of test cases\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n). Description of the test cases follows.\nThe first line of each test case contains two integers \n    n\n and \n    m\n\n(\n    1 \n    \u2264 n, m \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of rows and columns\nrespectively. Each of the next \n    n\n rows contains \n    m\n integers,\n\n    j\n-th element of \n    i\n-th row is \n    a_i,j\n (\n    1 \n    \u2264 a_i,j\n    \u2264 10^9\n) \u2014 the number written in the \n    j\n-th cell of the \n    i\n-th\nrow. It's guaranteed that the sum of \n    n \n    \u00b7 m\n over all test cases\ndoes not exceed \n    2 \n    \u00b7 10^5\n. Output If after the swap it is\nimpossible to get a good grid, output \n    -1\n. In the other case output\n\n    2\n integers \u2014 the indices of the columns that should be swapped to get a\ngood grid. If there are multiple solutions, print any. Example Input 5 2 3 1 2\n3 1 1 1 2 2 4 1 2 3 2 2 2 1 1 1 2 3 6 2 1 5 4 3 2 1 1 2 Output 1 1 -1 1 2 1 3\n1 1 Note In the first test case the grid is initially good, so we can, for\nexample, swap the first column with itself. In the second test case it is\nimpossible to make the grid good. In the third test case it is needed to swap\nthe first and the second column, then the grid becomes good.\n\n",
        "cf_contest_id": 1684,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "greedy",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n2 3\r\n1 2 3\r\n1 1 1\r\n2 2\r\n4 1\r\n2 3\r\n2 2\r\n2 1\r\n1 1\r\n2 3\r\n6 2 1\r\n5 4 3\r\n2 1\r\n1\r\n2\r\n",
                "1 1\r\n-1\r\n1 2\r\n1 3\r\n1 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 7\r\n1 2 4 3 3 3 5\r\n",
                "3 6\r\n"
            ],
            [
                "4\r\n1 10\r\n1 2 3 2 2 2 2 2 3 3\r\n1 10\r\n1 2 3 3 3 3 3 2 3 3\r\n1 10\r\n1 2 3 3 3 3 2 2 3 3\r\n1 5\r\n1 4 3 2 5\r\n",
                "3 8\r\n3 8\r\n-1\r\n2 4\r\n"
            ],
            [
                "1\r\n2 4\r\n2 1 1 1\r\n2 2 2 1\r\n",
                "1 4\r\n"
            ],
            [
                "1\r\n1 5\r\n1 2 4 3 3\r\n",
                "3 5\r\n"
            ],
            [
                "1\r\n1 5\r\n1 3 2 2 4\r\n",
                "2 4\r\n"
            ],
            [
                "1\r\n1 3\r\n2 1 1\r\n",
                "1 3\r\n"
            ],
            [
                "1\r\n2 4\r\n2 1 3 3\r\n1 1 3 2\r\n",
                "-1\r\n"
            ]
        ]
    }
]