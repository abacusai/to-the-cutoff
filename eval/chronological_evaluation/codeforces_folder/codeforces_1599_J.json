[
    {
        "name": "Bob's Beautiful Array",
        "description": "Bob really likes playing with arrays of numbers. That's why for his birthday,\nhis friends bought him a really interesting machine \u2013 an array beautifier. The\narray beautifier takes an array \n    A\n consisting of \n    N\n integers, and it\noutputs a new array \n    B\n of length N that it constructed based on the array\ngiven to it. The array beautifier constructs the new array in the following\nway: it takes two numbers at different indices from the original array and\nwrites their sum to the end of the new array. It does this step \n    N\n times\n- resulting in an output array of length \n    N\n. During this process, the\nmachine can take the same index multiple times in different steps. Bob was\nvery excited about the gift that his friends gave him, so he put his favorite\narray in the machine. However, when the machine finished, Bob was not happy\nwith the resulting array. He misses his favorite array very much, and hopes to\nget it back. Given the array that the machine outputted, help Bob find an\narray that could be the original array that he put in the machine. Sometimes\nthe machine makes mistakes, so it is possible that no appropriate input array\nexists for the array it has outputted. In such case, let Bob know that his\narray is forever lost. Input The first line contains one positive integer\n\n    N\n (\n    2 \n    \u2264 N \n    \u2264 10^3\n) \u2013 the length of Bob's array. The second\nline contains \n    N\n integers \n    B_1\n, \n    B_2\n, ..., \n    B_N\n (\n    1\n    \n    \u2264 B_i \n    \u2264 10^6\n) \u2013 the elements of the array the machine outputted.\nOutput If an appropriate input array exists, print \"YES\", followed by the\ninput array \n    A_1\n, \n    A_2\n, ..., \n    A_N\n (\n    -10^9 \n    \u2264 A_i \n    \u2264\n    10^9\n) in the next line. Otherwise, print \"NO\". Examples Input 2 5 5 Output\nYES 2 3 Input 3 1 2 3 Output YES 0 1 2 Input 3 2 4 5 Output NO Input 4 1 3 5 7\nOutput YES 6 -3 4 1\n\n",
        "cf_contest_id": 1599,
        "cf_index": "J",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n5 5\r\n",
                "YES\r\n5 0 "
            ],
            [
                "3\r\n1 2 3\r\n",
                "YES\r\n0 1 2 "
            ],
            [
                "3\r\n2 4 5\r\n",
                "NO\r\n"
            ],
            [
                "4\r\n1 3 5 7\r\n",
                "YES\r\n0 3 -2 7 "
            ]
        ],
        "private_cases": [
            [
                "10\r\n65 653 741 367 83 123 697 709 75 225\r\n",
                "YES\r\n0 65 676 -23 106 261 -138 847 -150 225 "
            ],
            [
                "14\r\n14133 17793 72643 38055 48689 13209 72227 8395 94373 65841 27691 23519 20649 45113\r\n",
                "YES\r\n0 14133 34556 -16763 29972 42671 29556 8499 -104 94477 -28636 52155 -24464 45113 "
            ],
            [
                "17\r\n93735 760399 14263 274357 455441 246939 403269 721719 840567 201925 983263 654711 578917 731115 867875 183211 128207\r\n",
                "YES\r\n0 760399 -666664 941021 -926758 1173697 -333130 736399 246864 474855 256260 -54335 922210 -267499 450710 128207 455441 "
            ],
            [
                "11\r\n895 65 883 71 73 41 697 957 505 833 521\r\n",
                "NO\r\n"
            ],
            [
                "21\r\n1 3 5 9 15 27 49 89 169 323 619 1189 2329 4569 8969 17615 34611 68603 136017 269705 534841\r\n",
                "NO\r\n"
            ],
            [
                "18\r\n18757 698263 809583 918785 488029 111625 60375 842523 9189 561421 746763 983163 584071 322501 971457 356953 857001 569403\r\n",
                "YES\r\n0 698263 220522 589061 -477436 965465 -122942 183317 378104 368659 614504 356953 18757 9189 584071 322501 857001 569403 "
            ],
            [
                "28\r\n838021 325431 421593 288065 582853 576633 860797 638833 700519 977193 373295 241043 202931 893111 825521 382683 977863 700613 845889 808093 478493 904615 542879 70837 617093 977285 259541 35727\r\n",
                "YES\r\n0 421593 416428 444369 256150 382683 325431 288065 582853 576633 977193 373295 241043 202931 893111 825521 977863 700613 845889 808093 478493 904615 542879 70837 617093 977285 259541 35727 "
            ],
            [
                "7\r\n671981 428609 483433 396855 712413 209125 137319\r\n",
                "NO\r\n"
            ],
            [
                "45\r\n626953 914809 904465 722525 119559 927109 442661 274413 756639 540533 911895 953255 92227 554759 501873 755671 717375 20675 301847 965695 751539 57157 800935 210091 190657 419977 678497 460321 615673 17165 860271 793783 429477 106631 304299 542627 2167 901487 103669 732797 483611 111411 160243 861585 121493\r\n",
                "YES\r\n0 927109 -807550 1564189 -652294 1207053 -253798 755671 626953 914809 904465 722525 442661 274413 540533 92227 717375 20675 301847 965695 751539 57157 800935 210091 190657 419977 678497 460321 615673 17165 860271 793783 429477 106631 304299 542627 2167 901487 103669 732797 483611 111411 160243 861585 121493 "
            ],
            [
                "17\r\n215389 497201 309515 155889 13825 209141 143605 644147 433581 6119 377229 500393 387727 183027 37375 911553 681799\r\n",
                "YES\r\n0 155889 59500 -45675 542876 -333735 339854 37375 309515 143605 644147 433581 500393 387727 183027 911553 681799 "
            ]
        ]
    }
]