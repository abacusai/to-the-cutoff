[
    {
        "name": "Password",
        "description": "Monocarp has forgotten the password to his mobile phone. The password consists\nof \n    4\n digits from \n    0\n to \n    9\n (note that it can start with the\ndigit \n    0\n). Monocarp remembers that his password had exactly two different\ndigits, and each of these digits appeared exactly two times in the password.\nMonocarp also remembers some digits which were definitely not used in the\npassword. You have to calculate the number of different sequences of \n    4\n\ndigits that could be the password for Monocarp's mobile phone (i. e. these\nsequences should meet all constraints on Monocarp's password). Input The first\nline contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 200\n) \u2014 the\nnumber of testcases. The first line of each testcase contains a single integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 8\n) \u2014 the number of digits for which Monocarp\nremembers that they were not used in the password. The second line contains\n\n    n\n different integers \n    a_1, a_2, \n    \u2026 a_n\n (\n    0 \n    \u2264 a_i \n    \u2264\n    9\n) representing the digits that were not used in the password. Note that\nthe digits \n    a_1, a_2, \n    \u2026, a_n\n are given in ascending order. Output\nFor each testcase, print one integer \u2014 the number of different \n    4\n-digit\nsequences that meet the constraints. Example Input 2 8 0 1 2 4 5 6 8 9 1 8\nOutput 6 216 Note In the first example, all possible passwords are: \"3377\",\n\"3737\", \"3773\", \"7337\", \"7373\", \"7733\".\n\n",
        "cf_contest_id": 1743,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "combinatorics",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n8\r\n0 1 2 4 5 6 8 9\r\n1\r\n8\r\n",
                "6 216 "
            ]
        ],
        "private_cases": [
            [
                "7\r\n1\r\n8\r\n1\r\n8\r\n1\r\n8\r\n1\r\n8\r\n1\r\n8\r\n1\r\n8\r\n1\r\n8\r\n",
                "216 216 216 216 216 216 216 "
            ],
            [
                "7\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n",
                "216 216 216 216 216 216 216 "
            ],
            [
                "1\r\n8\r\n0 1 2 4 5 6 8 9\r\n",
                "6 "
            ],
            [
                "3\r\n8\r\n0 1 2 4 5 6 8 9\r\n1\r\n8\r\n1\r\n8\r\n",
                "6 216 216 "
            ],
            [
                "1\r\n1\r\n8\r\n",
                "216 "
            ],
            [
                "1\r\n4\r\n0 1 4 7\r\n",
                "90 "
            ],
            [
                "1\r\n4\r\n0 2 4 7\r\n",
                "90 "
            ],
            [
                "12\r\n8\r\n1 2 3 5 6 7 8 9\r\n6\r\n4 5 6 7 8 9\r\n7\r\n0 4 5 6 7 8 9\r\n7\r\n1 4 5 6 7 8 9\r\n8\r\n0 1 4 5 6 7 8 9\r\n7\r\n2 4 5 6 7 8 9\r\n8\r\n0 2 4 5 6 7 8 9\r\n8\r\n1 2 4 5 6 7 8 9\r\n7\r\n3 4 5 6 7 8 9\r\n8\r\n0 3 4 5 6 7 8 9\r\n8\r\n1 3 4 5 6 7 8 9\r\n8\r\n2 3 4 5 6 7 8 9\r\n",
                "6 36 18 18 6 18 6 6 18 6 6 6 "
            ]
        ]
    }
]