[
    {
        "name": "Pekora and Trampoline",
        "description": "There is a trampoline park with \n    n\n trampolines in a line. The \n    i\n-th\nof which has strength \n    S_i\n. Pekora can jump on trampolines in multiple\npasses. She starts the pass by jumping on any trampoline of her choice. If at\nthe moment Pekora jumps on trampoline \n    i\n, the trampoline will launch her\nto position \n    i + S_i\n, and \n    S_i\n will become equal to\n\n    max(S_i-1,1)\n. In other words, \n    S_i\n will decrease by \n    1\n,\nexcept of the case \n    S_i=1\n, when \n    S_i\n will remain equal to \n    1\n.\nIf there is no trampoline in position \n    i + S_i\n, then this pass is over.\nOtherwise, Pekora will continue the pass by jumping from the trampoline at\nposition \n    i + S_i\n by the same rule as above. Pekora can't stop jumping\nduring the pass until she lands at the position larger than \n    n\n (in which\nthere is no trampoline). Poor Pekora! Pekora is a naughty rabbit and wants to\nruin the trampoline park by reducing all \n    S_i\n to \n    1\n. What is the\nminimum number of passes she needs to reduce all \n    S_i\n to \n    1\n? Input\nThe first line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 500\n) \u2014\nthe number of test cases. The first line of each test case contains a single\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 5000\n) \u2014 the number of trampolines.\nThe second line of each test case contains \n    n\n integers \n    S_1, S_2,\n    \n    \u2026, S_n\n (\n    1 \n    \u2264 S_i \n    \u2264 10^9\n), where \n    S_i\n is the\nstrength of the \n    i\n-th trampoline. It's guaranteed that the sum of \n    n\n\nover all test cases doesn't exceed \n    5000\n. Output For each test case,\noutput a single integer \u2014 the minimum number of passes Pekora needs to do to\nreduce all \n    S_i\n to \n    1\n. Example Input 3 7 1 4 2 2 2 2 2 2 2 3 5 1 1 1\n1 1 Output 4 3 0 Note For the first test case, here is an optimal series of\npasses Pekora can take. (The bolded numbers are the positions that Pekora\njumps into during these passes.)\n\n    [1,4,\n    2,2,\n    2,2,\n    2]\n\n\n    [1,\n    4,1,2,1,\n    2,1]\n\n\n    [1,\n    3,1,2,\n    1,\n    1,\n    1]\n\n\n    [1,\n    2,1,\n    2,1,\n    1,\n    1]\n For the\nsecond test case, the optimal series of passes is show below.\n\n    [\n    2,3]\n \n    [1,\n    3]\n \n    [1,\n    2]\n For the\nthird test case, all \n    S_i\n are already equal to \n    1\n.\n\n",
        "cf_contest_id": 1491,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "dp",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n7\r\n1 4 2 2 2 2 2\r\n2\r\n2 3\r\n5\r\n1 1 1 1 1\r\n",
                "4\r\n3\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n69\r\n",
                "68\r\n"
            ]
        ]
    }
]