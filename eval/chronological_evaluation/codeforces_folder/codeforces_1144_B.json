[
    {
        "name": "Parity Alternated Deletions",
        "description": "Polycarp has an array \n    a\n consisting of \n    n\n integers. He wants to play\na game with this array. The game consists of several moves. On the first move\nhe chooses any element and deletes it (after the first move the array contains\n\n    n-1\n elements). For each of the next moves he chooses any element with\nthe only restriction: its parity should differ from the parity of the element\ndeleted on the previous move. In other words, he alternates parities (even-\nodd-even-odd-... or odd-even-odd-even-...) of the removed elements. Polycarp\nstops if he can't make a move. Formally: If it is the first move, he chooses\nany element and deletes it; If it is the second or any next move: if the last\ndeleted element was odd, Polycarp chooses any even element and deletes it; if\nthe last deleted element was even, Polycarp chooses any odd element and\ndeletes it. If after some move Polycarp cannot make a move, the game ends.\nPolycarp's goal is to minimize the sum of non-deleted elements of the array\nafter end of the game. If Polycarp can delete the whole array, then the sum of\nnon-deleted elements is zero. Help Polycarp find this value. Input The first\nline of the input contains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2000\n) \u2014\nthe number of elements of \n    a\n. The second line of the input contains\n\n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 10^6\n),\nwhere \n    a_i\n is the \n    i\n-th element of \n    a\n. Output Print one integer\n\u2014 the minimum possible sum of non-deleted elements of the array after end of\nthe game. Examples Input 5 1 5 7 8 2 Output 0 Input 6 5 1 2 4 6 3 Output 0\nInput 2 1000000 1000000 Output 1000000\n\n",
        "cf_contest_id": 1144,
        "cf_index": "B",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 5 7 8 2\r\n",
                "0\r\n"
            ],
            [
                "6\r\n5 1 2 4 6 3\r\n",
                "0\r\n"
            ],
            [
                "2\r\n1000000 1000000\r\n",
                "1000000\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n2 1 1 1 1\r\n",
                "2\r\n"
            ],
            [
                "5\r\n1 1 1 1 1\r\n",
                "4\r\n"
            ]
        ]
    }
]