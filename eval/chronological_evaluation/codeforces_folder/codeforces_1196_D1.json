[
    {
        "name": "RGB Substring (easy version)",
        "description": "The only difference between easy and hard versions is the size of the input.\nYou are given a string \n    s\n consisting of \n    n\n characters, each\ncharacter is 'R', 'G' or 'B'. You are also given an integer \n    k\n. Your task\nis to change the minimum number of characters in the initial string \n    s\n so\nthat after the changes there will be a string of length \n    k\n that is a\nsubstring of \n    s\n, and is also a substring of the infinite string\n\"RGBRGBRGB ...\". A string \n    a\n is a substring of string \n    b\n if there\nexists a positive integer \n    i\n such that \n    a_1 = b_i\n, \n    a_2 = b_i +\n    1\n, \n    a_3 = b_i + 2\n, ..., \n    a_|a| = b_i + |a| - 1\n. For\nexample, strings \"GBRG\", \"B\", \"BR\" are substrings of the infinite string\n\"RGBRGBRGB ...\" while \"GR\", \"RGR\" and \"GGG\" are not. You have to answer\n\n    q\n independent queries. Input The first line of the input contains one\ninteger \n    q\n (\n    1 \n    \u2264 q \n    \u2264 2000\n) \u2014 the number of queries. Then\n\n    q\n queries follow. The first line of the query contains two integers\n\n    n\n and \n    k\n (\n    1 \n    \u2264 k \n    \u2264 n \n    \u2264 2000\n) \u2014 the length of the\nstring \n    s\n and the length of the substring. The second line of the query\ncontains a string \n    s\n consisting of \n    n\n characters 'R', 'G' and 'B'.\nIt is guaranteed that the sum of \n    n\n over all queries does not exceed\n\n    2000\n (\n    \u2211 n \n    \u2264 2000\n). Output For each query print one\ninteger \u2014 the minimum number of characters you need to change in the initial\nstring \n    s\n so that after changing there will be a substring of length\n\n    k\n in \n    s\n that is also a substring of the infinite string \"RGBRGBRGB\n...\". Example Input 3 5 2 BGGGG 5 3 RBRGR 5 5 BBBRR Output 1 0 3 Note In the\nfirst example, you can change the first character to 'R' and obtain the\nsubstring \"RG\", or change the second character to 'R' and obtain \"BR\", or\nchange the third, fourth or fifth character to 'B' and obtain \"GB\". In the\nsecond example, the substring is \"BRG\".\n\n",
        "cf_contest_id": 1196,
        "cf_index": "D1",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n5 2\r\nBGGGG\r\n5 3\r\nRBRGR\r\n5 5\r\nBBBRR\r\n",
                "1\r\n0\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n18 2\r\nRBGGGRBBGRRBBGGGGB\r\n",
                "0\r\n"
            ]
        ]
    }
]