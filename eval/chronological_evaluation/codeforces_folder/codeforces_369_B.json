[
    {
        "name": "Valera and Contest",
        "description": "Valera loves to participate in competitions. Especially in programming\ncontests. Today he has participated in the contest with his team, consisting\nof n students (including Valera). This contest was an individual competition,\nso each student in the team solved problems individually. After the contest\nwas over, Valera was interested in results. He found out that: each student in\nthe team scored at least l points and at most r points; in total, all members\nof the team scored exactly sall points; the total score of the k members of\nthe team who scored the most points is equal to exactly sk; more formally, if\na1, a2, ..., an is the sequence of points earned by the team of students in\nthe non-increasing order (a1 \u2265 a2 \u2265 ... \u2265 an), then sk = a1 + a2 + ... + ak.\nHowever, Valera did not find out exactly how many points each of n students\nscored. Valera asked you to recover any distribution of scores between the\nstudents of the team, such that all the conditions above are met. Input The\nfirst line of the input contains exactly six integers n, k, l, r, sall, sk (1\n\u2264 n, k, l, r \u2264 1000; l \u2264 r; k \u2264 n; 1 \u2264 sk \u2264 sall \u2264 10^6). It's guaranteed that\nthe input is such that the answer exists. Output Print exactly n integers a1,\na2, ..., an \u2014 the number of points each student scored. If there are multiple\nsolutions, you can print any of them. You can print the distribution of points\nin any order. Examples Input 5 3 1 3 13 9 Output 2 3 2 3 3 Input 5 3 1 3 15 9\nOutput 3 3 3 3 3\n\n",
        "cf_contest_id": 369,
        "cf_index": "B",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 3 1 3 13 9\r\n",
                "3 3 3 2 2\r\n"
            ],
            [
                "5 3 1 3 15 9\r\n",
                "3 3 3 3 3\r\n"
            ]
        ],
        "private_cases": [
            [
                "50 25 1 1 50 25\r\n",
                "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n"
            ],
            [
                "50 25 1000 1000 50000 25000\r\n",
                "1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\r\n"
            ],
            [
                "100 100 500 1000 75589 75589\r\n",
                "756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 756 755 755 755 755 755 755 755 755 755 755 755\r\n"
            ],
            [
                "1 1 1000 1000 1000 1000\r\n",
                "1000\r\n"
            ],
            [
                "2 2 500 1000 1000 1000\r\n",
                "500 500\r\n"
            ],
            [
                "1 1 1 1 1 1\r\n",
                "1\r\n"
            ],
            [
                "1 1 1 1000 656 656\r\n",
                "656\r\n"
            ],
            [
                "2 1 1 1000 683 550\r\n",
                "550 133\r\n"
            ],
            [
                "3 2 1 1000 1816 1652\r\n",
                "826 826 164\r\n"
            ],
            [
                "5 5 1 1000 3288 3288\r\n",
                "658 658 658 657 657\r\n"
            ],
            [
                "5 3 1 1000 2732 2055\r\n",
                "685 685 685 339 338\r\n"
            ],
            [
                "1 1 10 100 50 50\r\n",
                "50\r\n"
            ],
            [
                "3 3 1 5 14 14\r\n",
                "5 5 4\r\n"
            ],
            [
                "1 1 1 100 50 50\r\n",
                "50\r\n"
            ],
            [
                "5 5 1 5 5 5\r\n",
                "1 1 1 1 1\r\n"
            ],
            [
                "1 1 1 10 10 10\r\n",
                "10\r\n"
            ],
            [
                "5 5 1 3 5 5\r\n",
                "1 1 1 1 1\r\n"
            ],
            [
                "3 3 1 3 9 9\r\n",
                "3 3 3\r\n"
            ],
            [
                "2 2 2 2 4 4\r\n",
                "2 2\r\n"
            ]
        ]
    }
]