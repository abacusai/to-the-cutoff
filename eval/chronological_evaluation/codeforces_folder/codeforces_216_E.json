[
    {
        "name": "Martian Luck",
        "description": "You know that the Martians use a number system with base k. Digit b (0 \u2264 b <\nk) is considered lucky, as the first contact between the Martians and the\nEarthlings occurred in year b (by Martian chronology). A digital root d(x) of\nnumber x is a number that consists of a single digit, resulting after\ncascading summing of all digits of number x. Word \"cascading\" means that if\nthe first summing gives us a number that consists of several digits, then we\nsum up all digits again, and again, until we get a one digit number. For\nexample, d(35047) = d((3 + 5 + 0 + 4)7) = d(157) = d((1 + 5)7) = d(67) = 67.\nIn this sample the calculations are performed in the 7-base notation. If a\nnumber's digital root equals b, the Martians also call this number lucky. You\nhave string s, which consists of n digits in the k-base notation system. Your\ntask is to find, how many distinct substrings of the given string are lucky\nnumbers. Leading zeroes are permitted in the numbers. Note that substring\ns[i... j] of the string s = a1a2... an (1 \u2264 i \u2264 j \u2264 n) is the string aiai +\n1... aj. Two substrings s[i1... j1] and s[i2... j2] of the string s are\ndifferent if either i1 \u2260 i2 or j1 \u2260 j2. Input The first line contains three\nintegers k, b and n (2 \u2264 k \u2264 10^9, 0 \u2264 b < k, 1 \u2264 n \u2264 10^5). The second line\ncontains string s as a sequence of n integers, representing digits in the\nk-base notation: the i-th integer equals ai (0 \u2264 ai < k) \u2014 the i-th digit of\nstring s. The numbers in the lines are space-separated. Output Print a single\ninteger \u2014 the number of substrings that are lucky numbers. Please, do not use\nthe \nuse the cin, cout streams or the \n5 6 1 Output 5 Input 7 6 4 3 5 0 4 Output 1 Input 257 0 3 0 0 256 Output 3\nNote In the first sample the following substrings have the sought digital\nroot: s[1... 2] = \"3 2\", s[1... 3] = \"3 2 0\", s[3... 4] = \"0 5\", s[4... 4] =\n\"5\" and s[2... 6] = \"2 0 5 6 1\".\n\n",
        "cf_contest_id": 216,
        "cf_index": "E",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "math",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10 5 6\r\n3 2 0 5 6 1\r\n",
                "5\n"
            ],
            [
                "7 6 4\r\n3 5 0 4\r\n",
                "1\n"
            ],
            [
                "257 0 3\r\n0 0 256\r\n",
                "3\n"
            ]
        ],
        "private_cases": [
            [
                "2 1 1\r\n0\r\n",
                "0\n"
            ],
            [
                "2 0 20\r\n1 1 1 0 1 1 1 1 0 0 0 0 1 0 0 0 0 1 0 1\r\n",
                "22\n"
            ],
            [
                "100 29 33\r\n28 89 23 14 97 97 66 56 55 60 47 29 9 79 26 80 63 78 83 60 41 29 52 10 82 26 47 88 99 75 52 1 31\r\n",
                "10\n"
            ],
            [
                "3 2 100\r\n2 0 0 0 0 2 1 1 1 2 0 1 1 1 1 2 0 0 1 0 1 1 2 0 2 0 1 0 1 0 0 2 0 0 0 1 2 0 2 2 0 2 0 2 1 0 1 1 1 1 2 0 0 0 1 0 2 0 2 0 2 1 2 2 1 1 0 1 1 2 1 1 0 0 1 1 2 2 1 2 2 0 1 2 2 1 2 2 0 2 0 2 2 0 2 2 1 2 0 0\r\n",
                "2451\n"
            ],
            [
                "5 4 102\r\n3 2 2 3 3 2 2 0 3 1 2 4 0 1 3 4 3 2 3 0 4 1 0 0 0 0 4 4 1 2 3 3 4 0 1 2 2 3 3 1 3 1 0 0 3 0 4 0 2 4 2 3 0 1 4 3 0 2 3 3 2 2 1 0 1 3 0 3 4 4 4 1 0 1 2 1 4 2 4 4 4 4 4 2 3 3 0 3 0 0 0 4 1 3 0 4 2 1 2 0 3 0\r\n",
                "1293\n"
            ],
            [
                "7 4 104\r\n4 3 0 6 6 5 3 4 4 5 0 1 2 5 5 1 3 4 1 5 3 5 4 4 2 4 3 5 4 2 2 3 1 1 0 5 4 3 2 5 2 1 3 1 6 4 1 3 0 2 5 2 5 3 3 6 1 2 2 2 4 5 6 0 5 4 5 3 5 3 4 3 1 0 2 4 5 5 5 5 3 3 6 1 6 1 3 6 6 5 3 3 1 3 2 0 4 4 3 3 4 0 5 6\r\n",
                "938\n"
            ],
            [
                "20 15 1\r\n6\r\n",
                "0\n"
            ],
            [
                "20 19 2\r\n16 13\r\n",
                "0\n"
            ],
            [
                "30 24 30\r\n7 24 3 20 8 24 0 6 15 22 20 21 16 26 28 6 6 28 19 2 12 22 6 12 15 17 24 13 12 16\r\n",
                "20\n"
            ],
            [
                "2 0 100\r\n0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 1 1 1 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 1 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0\r\n",
                "331\n"
            ]
        ]
    }
]