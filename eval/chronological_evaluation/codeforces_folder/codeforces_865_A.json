[
    {
        "name": "Save the problem!",
        "description": "Attention: we lost all the test cases for this problem, so instead of solving\nthe problem, we need you to generate test cases. We're going to give you the\nanswer, and you need to print a test case that produces the given answer. The\noriginal problem is in the following paragraph. People don't use cash as often\nas they used to. Having a credit card solves some of the hassles of cash, such\nas having to receive change when you can't form the exact amount of money\nneeded to purchase an item. Typically cashiers will give you as few coins as\npossible in change, but they don't have to. For example, if your change is 30\ncents, a cashier could give you a 5 cent piece and a 25 cent piece, or they\ncould give you three 10 cent pieces, or ten 1 cent pieces, two 5 cent pieces,\nand one 10 cent piece. Altogether there are 18 different ways to make 30 cents\nusing only 1 cent pieces, 5 cent pieces, 10 cent pieces, and 25 cent pieces.\nTwo ways are considered different if they contain a different number of at\nleast one type of coin. Given the denominations of the coins and an amount of\nchange to be made, how many different ways are there to make change? As we\nmentioned before, we lost all the test cases for this problem, so we're\nactually going to give you the number of ways, and want you to produce a test\ncase for which the number of ways is the given number. There could be many\nways to achieve this (we guarantee there's always at least one), so you can\nprint any, as long as it meets the constraints described below. Input Input\nwill consist of a single integer A (1 \u2264 A \u2264 10^5), the desired number of ways.\nOutput In the first line print integers N and M (1 \u2264 N \u2264 10^6, 1 \u2264 M \u2264 10),\nthe amount of change to be made, and the number of denominations,\nrespectively. Then print M integers D1, D2, ..., DM (1 \u2264 Di \u2264 10^6), the\ndenominations of the coins. All denominations must be distinct: for any i \u2260 j\nwe must have Di \u2260 Dj. If there are multiple tests, print any of them. You can\nprint denominations in atbitrary order. Examples Input 18 Output 30 4 1 5 10\n25 Input 3 Output 20 2 5 2 Input 314 Output 183 4 6 5 2 139\n\n",
        "cf_contest_id": 865,
        "cf_index": "A",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "18\r\n",
                "35 2 1 2\r\n"
            ],
            [
                "3\r\n",
                "5 2 1 2\r\n"
            ],
            [
                "314\r\n",
                "627 2 1 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1023\r\n",
                "2045 2 1 2\r\n"
            ],
            [
                "100000\r\n",
                "199999 2 1 2\r\n"
            ],
            [
                "1\r\n",
                "1 2 1 2\r\n"
            ],
            [
                "2\r\n",
                "3 2 1 2\r\n"
            ],
            [
                "3\r\n",
                "5 2 1 2\r\n"
            ],
            [
                "4\r\n",
                "7 2 1 2\r\n"
            ],
            [
                "5\r\n",
                "9 2 1 2\r\n"
            ],
            [
                "6\r\n",
                "11 2 1 2\r\n"
            ],
            [
                "7\r\n",
                "13 2 1 2\r\n"
            ],
            [
                "8\r\n",
                "15 2 1 2\r\n"
            ],
            [
                "9\r\n",
                "17 2 1 2\r\n"
            ],
            [
                "10\r\n",
                "19 2 1 2\r\n"
            ],
            [
                "11\r\n",
                "21 2 1 2\r\n"
            ],
            [
                "12\r\n",
                "23 2 1 2\r\n"
            ],
            [
                "13\r\n",
                "25 2 1 2\r\n"
            ],
            [
                "14\r\n",
                "27 2 1 2\r\n"
            ],
            [
                "15\r\n",
                "29 2 1 2\r\n"
            ],
            [
                "16\r\n",
                "31 2 1 2\r\n"
            ],
            [
                "17\r\n",
                "33 2 1 2\r\n"
            ],
            [
                "18\r\n",
                "35 2 1 2\r\n"
            ],
            [
                "19\r\n",
                "37 2 1 2\r\n"
            ],
            [
                "20\r\n",
                "39 2 1 2\r\n"
            ],
            [
                "239\r\n",
                "477 2 1 2\r\n"
            ],
            [
                "4063\r\n",
                "8125 2 1 2\r\n"
            ],
            [
                "65536\r\n",
                "131071 2 1 2\r\n"
            ],
            [
                "65535\r\n",
                "131069 2 1 2\r\n"
            ],
            [
                "65537\r\n",
                "131073 2 1 2\r\n"
            ],
            [
                "99991\r\n",
                "199981 2 1 2\r\n"
            ],
            [
                "99990\r\n",
                "199979 2 1 2\r\n"
            ],
            [
                "99992\r\n",
                "199983 2 1 2\r\n"
            ],
            [
                "99971\r\n",
                "199941 2 1 2\r\n"
            ],
            [
                "99990\r\n",
                "199979 2 1 2\r\n"
            ],
            [
                "2\r\n",
                "3 2 1 2\r\n"
            ],
            [
                "99991\r\n",
                "199981 2 1 2\r\n"
            ]
        ]
    }
]