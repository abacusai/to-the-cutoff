[
    {
        "name": "Easy Problem",
        "description": "Vasya is preparing a contest, and now he has written a statement for an easy\nproblem. The statement is a string of length \n    n\n consisting of lowercase\nLatin latters. Vasya thinks that the statement can be considered hard if it\ncontains a subsequence hard; otherwise the statement is easy. For example,\nhard, hzazrzd, haaaaard can be considered hard statements, while har, hart and\ndrah are easy statements. Vasya doesn't want the statement to be hard. He may\nremove some characters from the statement in order to make it easy. But, of\ncourse, some parts of the statement can be crucial to understanding. Initially\nthe ambiguity of the statement is \n    0\n, and removing \n    i\n-th character\nincreases the ambiguity by \n    a_i\n (the index of each character is\nconsidered as it was in the original statement, so, for example, if you delete\ncharacter r from hard, and then character d, the index of d is still \n    4\n\neven though you delete it from the string had). Vasya wants to calculate the\nminimum ambiguity of the statement, if he removes some characters (possibly\nzero) so that the statement is easy. Help him to do it! Recall that\nsubsequence is a sequence that can be derived from another sequence by\ndeleting some elements without changing the order of the remaining elements.\nInput The first line contains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n)\n\u2014 the length of the statement. The second line contains one string \n    s\n of\nlength \n    n\n, consisting of lowercase Latin letters \u2014 the statement written\nby Vasya. The third line contains \n    n\n integers \n    a_1, a_2, \n    \u2026,\n    a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 998244353\n). Output Print minimum possible\nambiguity of the statement after Vasya deletes some (possibly zero) characters\nso the resulting statement is easy. Examples Input 6 hhardh 3 2 9 11 7 1\nOutput 5 Input 8 hhzarwde 3 2 6 9 4 8 7 1 Output 4 Input 6 hhaarr 1 2 3 4 5 6\nOutput 0 Note In the first example, first two characters are removed so the\nresult is ardh. In the second example, \n    5\n-th character is removed so the\nresult is hhzawde. In the third example there's no need to remove anything.\n\n",
        "cf_contest_id": 1096,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "dp"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\nhhardh\r\n3 2 9 11 7 1\r\n",
                "5\r\n"
            ],
            [
                "8\r\nhhzarwde\r\n3 2 6 9 4 8 7 1\r\n",
                "4\r\n"
            ],
            [
                "6\r\nhhaarr\r\n1 2 3 4 5 6\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\nxdd\r\n1 2 3\r\n",
                "0\r\n"
            ],
            [
                "14\r\nrahhdrzdhrrhzz\r\n951309899 385220001 934595226 18784743 57310284 511611181 942783561 834145008 478743470 100491136 754890652 172806043 573294593 744178158\r\n",
                "0\r\n"
            ],
            [
                "13\r\nahrhzhdrrhrra\r\n129663316 931385006 161287509 358388863 419876340 273873401 62842415 300480437 457244082 211902320 180793874 526023462 380455601\r\n",
                "0\r\n"
            ],
            [
                "8\r\nhhaarrdd\r\n500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000\r\n",
                "1000000000\r\n"
            ],
            [
                "25\r\ndadddhrdhradrdzzzahazaddr\r\n582987584 956970393 414785252 587245865 701672370 65936511 563890835 69653917 387506178 123924921 989335244 647820709 445085282 809768866 105799145 196558041 783108504 134067229 875977231 488184174 41982468 225574390 702881847 472688490 185455403\r\n",
                "445085282\r\n"
            ],
            [
                "14\r\nhrdddddzdaahdh\r\n618683599 53236412 430255850 527201063 76877367 826920910 356360303 624569082 297964311 44495952 517620490 340742688 240436374 571682489\r\n",
                "0\r\n"
            ],
            [
                "24\r\nrrahadzaazddazzhzzdhraha\r\n265852838 320169593 970608735 902599099 119386675 144665100 96373679 132726215 209528936 871254634 201034515 906845092 115425177 413968020 890900173 85086595 699910480 453220213 438438250 929633897 921995394 476878031 754757548 672254776\r\n",
                "0\r\n"
            ]
        ]
    }
]