[
    {
        "name": "Permutation Value",
        "description": "You are given an integer \n    n\n. You have to construct a permutation of size\n\n    n\n. A permutation is an array where each integer from \n    1\n to \n    s\n\n(where \n    s\n is the size of permutation) occurs exactly once. For example,\n\n    [2, 1, 4, 3]\n is a permutation of size \n    4\n; \n    [1, 2, 4, 5, 3]\n is\na permutation of size \n    5\n; \n    [1, 4, 3]\n is not a permutation (the\ninteger \n    2\n is absent), \n    [2, 1, 3, 1]\n is not a permutation (the\ninteger \n    1\n appears twice). A subsegment of a permutation is a contiguous\nsubsequence of that permutation. For example, the permutation \n    [2, 1, 4,\n    3]\n has \n    10\n subsegments: \n    [2]\n, \n    [2, 1]\n, \n    [2, 1, 4]\n,\n\n    [2, 1, 4, 3]\n, \n    [1]\n, \n    [1, 4]\n, \n    [1, 4, 3]\n, \n    [4]\n,\n\n    [4, 3]\n and \n    [3]\n. The value of the permutation is the number of its\nsubsegments which are also permutations. For example, the value of \n    [2, 1,\n    4, 3]\n is \n    3\n since the subsegments \n    [2, 1]\n, \n    [1]\n and \n    [2,\n    1, 4, 3]\n are permutations. You have to construct a permutation of size\n\n    n\n with minimum possible value among all permutations of size \n    n\n.\nInput The first line contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 48\n) \u2014\nthe number of test cases. Then, \n    t\n lines follow. The \n    i\n-th of them\ncontains one integer \n    n\n (\n    3 \n    \u2264 n \n    \u2264 50\n) representing the\n\n    i\n-th test case. Output For each test case, print \n    n\n integers \u2014 the\npermutation of size \n    n\n with minimum possible value. If there are multiple\nsuch permutations, print any of them. Example Input 2 5 6 Output 1 4 3 5 2 4 1\n6 2 5 3 Note In the first example, the permutation \n    [1, 4, 3, 5, 2]\n is\none of the possible answers; its value is \n    2\n. In the second example, the\npermutation \n    [4, 1, 6, 2, 5, 3]\n is one of the possible answers; its value\nis \n    2\n.\n\n",
        "cf_contest_id": 1743,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "2\r\n5\r\n6\r\n",
                "2 3 4 5 1 2 3 4 5 6 1 "
            ]
        ],
        "private_cases": [
            [
                "13\r\n12\r\n19\r\n29\r\n39\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n14\r\n",
                "2 3 4 5 6 7 8 9 10 11 12 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 1 2 3 4 1 2 3 4 5 1 2 3 4 5 6 1 2 3 4 5 6 7 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 11 1 2 3 4 5 6 7 8 9 10 11 12 13 14 1 "
            ],
            [
                "7\r\n5\r\n6\r\n5\r\n6\r\n5\r\n6\r\n8\r\n",
                "2 3 4 5 1 2 3 4 5 6 1 2 3 4 5 1 2 3 4 5 6 1 2 3 4 5 1 2 3 4 5 6 1 2 3 4 5 6 7 8 1 "
            ],
            [
                "7\r\n10\r\n10\r\n10\r\n10\r\n10\r\n10\r\n10\r\n",
                "2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 "
            ],
            [
                "8\r\n5\r\n6\r\n4\r\n7\r\n8\r\n9\r\n13\r\n12\r\n",
                "2 3 4 5 1 2 3 4 5 6 1 2 3 4 1 2 3 4 5 6 7 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 10 11 12 13 1 2 3 4 5 6 7 8 9 10 11 12 1 "
            ],
            [
                "9\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n12\r\n15\r\n16\r\n",
                "2 3 4 5 1 2 3 4 5 6 1 2 3 4 5 6 7 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 11 12 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 1 "
            ],
            [
                "10\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n",
                "2 3 1 2 3 4 1 2 3 4 5 1 2 3 4 5 6 1 2 3 4 5 6 7 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 11 1 2 3 4 5 6 7 8 9 10 11 12 1 "
            ],
            [
                "10\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n",
                "2 3 4 1 2 3 4 5 1 2 3 4 5 6 1 2 3 4 5 6 7 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 11 1 2 3 4 5 6 7 8 9 10 11 12 1 2 3 4 5 6 7 8 9 10 11 12 13 1 "
            ],
            [
                "9\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n",
                "2 3 4 1 2 3 4 5 1 2 3 4 5 6 1 2 3 4 5 6 7 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 11 1 2 3 4 5 6 7 8 9 10 11 12 1 "
            ],
            [
                "8\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n",
                "2 3 4 1 2 3 4 5 1 2 3 4 5 6 1 2 3 4 5 6 7 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 11 1 "
            ],
            [
                "7\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n",
                "2 3 4 1 2 3 4 5 1 2 3 4 5 6 1 2 3 4 5 6 7 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 10 1 "
            ],
            [
                "6\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n",
                "2 3 4 1 2 3 4 5 1 2 3 4 5 6 1 2 3 4 5 6 7 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 9 1 "
            ],
            [
                "1\r\n50\r\n",
                "2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 1 "
            ],
            [
                "3\r\n4\r\n5\r\n6\r\n",
                "2 3 4 1 2 3 4 5 1 2 3 4 5 6 1 "
            ],
            [
                "4\r\n5\r\n5\r\n5\r\n5\r\n",
                "2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 "
            ]
        ]
    }
]