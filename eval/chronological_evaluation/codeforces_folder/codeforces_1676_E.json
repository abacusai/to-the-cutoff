[
    {
        "name": "Eating Queries",
        "description": "Timur has \n    n\n candies. The \n    i\n-th candy has a quantity of sugar equal\nto \n    a_i\n. So, by eating the \n    i\n-th candy, Timur consumes a quantity of\nsugar equal to \n    a_i\n. Timur will ask you \n    q\n queries regarding his\ncandies. For the \n    j\n-th query you have to answer what is the minimum\nnumber of candies he needs to eat in order to reach a quantity of sugar\ngreater than or equal to \n    x_j\n or print -1 if it's not possible to obtain\nsuch a quantity. In other words, you should print the minimum possible \n    k\n\nsuch that after eating \n    k\n candies, Timur consumes a quantity of sugar of\nat least \n    x_j\n or say that no possible \n    k\n exists. Note that he can't\neat the same candy twice and queries are independent of each other (Timur can\nuse the same candy in different queries). Input The first line of input\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number\nof test cases. The description of test cases follows. The first line contains\n\n    2\n integers \n    n\n and \n    q\n (\n    1 \n    \u2264 n, q \n    \u2264\n    1.5\n    \u00b710^5\n) \u2014 the number of candies Timur has and the number of queries\nyou have to print an answer for respectively. The second line contains \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^4\n) \u2014 the\nquantity of sugar in each of the candies respectively. Then \n    q\n lines\nfollow. Each of the next \n    q\n lines contains a single integer \n    x_j\n\n(\n    1 \n    \u2264 x_j \n    \u2264 2 \n    \u00b7 10^9\n) \u2013 the quantity Timur wants to reach\nfor the given query. It is guaranteed that the sum of \n    n\n and the sum of\n\n    q\n over all test cases do not exceed \n    1.5 \n    \u00b7 10^5\n. Output For\neach test case output \n    q\n lines. For the \n    j\n-th line output the number\nof candies Timur needs to eat in order to reach a quantity of sugar greater\nthan or equal to \n    x_j\n or print -1 if it's not possible to obtain such a\nquantity. Example Input 3 8 7 4 3 3 1 1 4 5 9 1 10 50 14 15 22 30 4 1 1 2 3 4\n3 1 2 5 4 6 Output 1 2 -1 2 3 4 8 1 1 -1 Note For the first test case: For the\nfirst query, Timur can eat any candy, and he will reach the desired quantity.\nFor the second query, Timur can reach a quantity of at least \n    10\n by\neating the \n    7\n-th and the \n    8\n-th candies, thus consuming a quantity of\nsugar equal to \n    14\n. For the third query, there is no possible answer. For\nthe fourth query, Timur can reach a quantity of at least \n    14\n by eating\nthe \n    7\n-th and the \n    8\n-th candies, thus consuming a quantity of sugar\nequal to \n    14\n. For the second test case: For the only query of the second\ntest case, we can choose the third candy from which Timur receives exactly\n\n    3\n sugar. It's also possible to obtain the same answer by choosing the\nfourth candy.\n\n",
        "cf_contest_id": 1676,
        "cf_index": "E",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 3.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n8 7\r\n4 3 3 1 1 4 5 9\r\n1\r\n10\r\n50\r\n14\r\n15\r\n22\r\n30\r\n4 1\r\n1 2 3 4\r\n3\r\n1 2\r\n5\r\n4\r\n6\r\n",
                "1\r\n2\r\n-1\r\n2\r\n3\r\n4\r\n8\r\n1\r\n1\r\n-1\r\n"
            ]
        ],
        "private_cases": []
    }
]