[
    {
        "name": "Policeman and a Tree",
        "description": "You are given a tree (a connected non-oriented graph without cycles) with\nvertices numbered from 1 to n, and the length of the i-th edge is wi. In the\nvertex s there is a policeman, in the vertices x1, x2, ..., xm (xj \u2260 s) m\ncriminals are located. The policeman can walk along the edges with speed 1,\nthe criminals can move with arbitrary large speed. If a criminal at some\nmoment is at the same point as the policeman, he instantly gets caught by the\npoliceman. Determine the time needed for the policeman to catch all criminals,\nassuming everybody behaves optimally (i.e. the criminals maximize that time,\nthe policeman minimizes that time). Everybody knows positions of everybody\nelse at any moment of time. Input The first line contains single integer n (1\n\u2264 n \u2264 50) \u2014 the number of vertices in the tree. The next n - 1 lines contain\nthree integers each: ui, vi, wi (1 \u2264 ui, vi \u2264 n, 1 \u2264 wi \u2264 50) denoting edges\nand their lengths. It is guaranteed that the given graph is a tree. The next\nline contains single integer s (1 \u2264 s \u2264 n) \u2014 the number of vertex where the\npoliceman starts. The next line contains single integer m (1 \u2264 m \u2264 50) \u2014 the\nnumber of criminals. The next line contains m integers x1, x2, ..., xm (1 \u2264 xj\n\u2264 n, xj \u2260 s) \u2014 the number of vertices where the criminals are located. xj are\nnot necessarily distinct. Output If the policeman can't catch criminals, print\nsingle line \"Terrorists win\" (without quotes). Otherwise, print single integer\n\u2014 the time needed to catch all criminals. Examples Input 4 1 2 2 1 3 1 1 4 1 2\n4 3 1 4 1 Output 8 Input 6 1 2 3 2 3 5 3 4 1 3 5 4 2 6 3 2 3 1 3 5 Output 21\nNote In the first example one of the optimal scenarios is the following. The\ncriminal number 2 moves to vertex 3, the criminal 4 \u2014 to vertex 4. The\npoliceman goes to vertex 4 and catches two criminals. After that the criminal\nnumber 1 moves to the vertex 2. The policeman goes to vertex 3 and catches\ncriminal 2, then goes to the vertex 2 and catches the remaining criminal.\n\n",
        "cf_contest_id": 868,
        "cf_index": "E",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 2 2\r\n1 3 1\r\n1 4 1\r\n2\r\n4\r\n3 1 4 1\r\n",
                "8\r\n"
            ],
            [
                "6\r\n1 2 3\r\n2 3 5\r\n3 4 1\r\n3 5 4\r\n2 6 3\r\n2\r\n3\r\n1 3 5\r\n",
                "21\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 2 14\r\n1\r\n1\r\n2\r\n",
                "14\r\n"
            ],
            [
                "3\r\n1 2 38\r\n1 3 44\r\n2\r\n10\r\n1 1 3 1 1 1 3 3 3 3\r\n",
                "82\r\n"
            ],
            [
                "4\r\n1 2 9\r\n1 3 46\r\n1 4 50\r\n4\r\n20\r\n2 2 3 3 1 1 3 2 3 3 2 1 3 3 3 3 3 1 2 2\r\n",
                "328\r\n"
            ],
            [
                "5\r\n1 2 23\r\n1 3 8\r\n3 4 12\r\n4 5 14\r\n1\r\n10\r\n5 3 5 2 3 3 3 2 2 5\r\n",
                "80\r\n"
            ],
            [
                "5\r\n1 2 8\r\n1 3 32\r\n1 4 50\r\n4 5 33\r\n5\r\n15\r\n1 4 2 4 4 2 4 2 2 3 4 2 2 1 1\r\n",
                "364\r\n"
            ],
            [
                "10\r\n1 2 6\r\n1 3 43\r\n1 4 19\r\n1 9 22\r\n2 6 28\r\n2 7 16\r\n3 10 35\r\n4 5 20\r\n6 8 16\r\n8\r\n20\r\n7 6 6 6 1 2 1 2 1 4 6 6 2 9 1 5 1 6 9 3\r\n",
                "726\r\n"
            ],
            [
                "15\r\n1 2 10\r\n1 5 44\r\n1 6 21\r\n1 7 33\r\n1 8 34\r\n2 3 11\r\n3 4 42\r\n6 12 38\r\n6 14 28\r\n8 9 28\r\n9 10 40\r\n9 11 50\r\n11 13 39\r\n14 15 9\r\n14\r\n4\r\n6 10 12 2\r\n",
                "570\r\n"
            ],
            [
                "20\r\n1 2 16\r\n1 11 26\r\n1 12 50\r\n2 3 48\r\n2 5 41\r\n2 6 48\r\n2 14 4\r\n3 4 31\r\n3 16 28\r\n4 7 27\r\n4 8 1\r\n4 18 17\r\n5 13 19\r\n5 17 15\r\n6 10 1\r\n8 9 15\r\n8 19 32\r\n9 15 5\r\n17 20 21\r\n9\r\n50\r\n10 17 17 14 16 4 3 3 15 19 1 8 1 18 6 12 12 4 16 2 17 1 7 7 8 13 2 10 16 16 1 6 15 15 13 18 8 3 4 8 17 6 14 10 1 16 12 2 8 17\r\n",
                "2634\r\n"
            ],
            [
                "49\r\n2 3 40\r\n2 4 1\r\n2 5 42\r\n2 6 27\r\n2 7 43\r\n2 8 50\r\n2 9 38\r\n2 10 38\r\n2 11 2\r\n2 12 12\r\n2 13 3\r\n2 14 24\r\n2 15 13\r\n2 16 34\r\n2 17 12\r\n2 18 27\r\n2 19 29\r\n2 20 18\r\n2 21 42\r\n2 22 38\r\n2 23 18\r\n2 24 42\r\n2 25 24\r\n1 2 39\r\n26 27 24\r\n26 28 8\r\n26 29 20\r\n26 30 31\r\n26 31 30\r\n26 32 32\r\n26 33 31\r\n26 34 34\r\n26 35 22\r\n26 36 25\r\n26 37 9\r\n26 38 35\r\n26 39 12\r\n26 40 1\r\n26 41 49\r\n26 42 45\r\n26 43 23\r\n26 44 31\r\n26 45 50\r\n26 46 23\r\n26 47 35\r\n26 48 11\r\n26 49 19\r\n1 26 27\r\n1\r\n10\r\n16 16 16 16 16 33 33 33 33 33\r\n",
                "1359\r\n"
            ],
            [
                "49\r\n2 3 40\r\n2 4 27\r\n2 5 47\r\n2 6 40\r\n2 7 28\r\n2 8 31\r\n2 9 38\r\n2 10 17\r\n2 11 44\r\n2 12 24\r\n2 13 21\r\n2 14 29\r\n2 15 36\r\n2 16 19\r\n2 17 29\r\n2 18 24\r\n2 19 19\r\n2 20 12\r\n2 21 30\r\n2 22 18\r\n2 23 2\r\n2 24 28\r\n2 25 13\r\n1 2 22\r\n26 27 44\r\n26 28 1\r\n26 29 50\r\n26 30 18\r\n26 31 30\r\n26 32 25\r\n26 33 36\r\n26 34 25\r\n26 35 28\r\n26 36 19\r\n26 37 9\r\n26 38 11\r\n26 39 2\r\n26 40 46\r\n26 41 13\r\n26 42 48\r\n26 43 2\r\n26 44 42\r\n26 45 49\r\n26 46 39\r\n26 47 21\r\n26 48 47\r\n26 49 10\r\n1 26 19\r\n1\r\n2\r\n16 33\r\n",
                "207\r\n"
            ]
        ]
    }
]