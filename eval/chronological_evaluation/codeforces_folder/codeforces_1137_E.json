[
    {
        "name": "Train Car Selection",
        "description": "Vasya likes to travel by train, but doesn't like when the car he travels in is\nlocated in the tail of the train. Vasya gets on the train at the station. The\ntrain consists of \n    n\n cars indexed from \n    1\n to \n    n\n counting from\nthe locomotive (head of the train). Three types of events occur while the\ntrain is moving: Some number of cars are added to the head of the train; Some\nnumber of cars are added to the tail of the train; Vasya recalculates the\nvalues of the convenience of the cars (read more about it below). At each\nmoment of time we will index the cars from the head of the train, starting\nfrom \n    1\n. Note that when adding new cars to the head of the train, the\nindexing of the old ones may shift. To choose which car to go in, Vasya will\nuse the value \n    A_i\n for each car (where \n    i\n is a car index), which is\ncalculated as follows: At the beginning of the trip \n    A_i=0\n, as well as\nfor the new cars at the time of their addition. During the next recalculation\nVasya chooses some positive integers \n    b\n and \n    s\n and adds to all\n\n    A_i\n value \n    b + (i - 1) \n    \u00b7 s\n. Vasya hasn't decided yet where he\nwill get on the train and where will get off the train, so after each event of\none of the three types he wants to know the least index of the car, such that\nits value \n    A_i\n is minimal. Since there is a lot of cars, Vasya asked you\nto write a program that answers his question. Input The first line contains\ntwo integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n \n    \u2264 10^9\n, \n    1 \n    \u2264 m\n    \n    \u2264 300\n     000\n), the number of cars in the train at the time of\ndeparture from the station and the number of stations, respectively. Next\n\n    m\n lines contain the descriptions of events. Each event is one of the\nfollowing three types: \"\n    1\n \n    k\n\" (\n    1 \n    \u2264 k \n    \u2264 10^9\n), add\n\n    k\n cars to the head of the train \"\n    2\n \n    k\n\" (\n    1 \n    \u2264 k \n    \u2264\n    10^9\n), add \n    k\n cars to the tail of the train \"\n    3\n \n    b\n \n    s\n\"\n(\n    1 \n    \u2264 b, s \n    \u2264 10^9\n), recalculate the convenience of all train\ncars. It is guaranteed that at any time the train length does not exceed\n\n    10^9\n. Also it's guaranteed that the integers \n    A_i\n will not grow too\nhigh. Formally, it's guaranteed that if we sum the largest addition over all\nevents of the \n    3\n-rd type (that is, \n    b + (n - 1) \n    \u00b7 s\n, where\n\n    n\n is the number of cars at that moment) then the acquired sum would be\nat most \n    10^18\n. Output After each of the \n    m\n queries print two\nintegers: \n    j\n and \n    A_j\n \u2014 the number of the car closest to the head of\nthe train, such that its value \n    A_j\n is minimal, and the value \n    A_j\n\nitself. Example Input 1 8 1 1 3 1 1 3 1 1 2 1 2 1 3 1 1 2 1 3 1 5 Output 1 0 1\n1 1 2 3 0 3 0 1 3 5 0 1 4 Note Initially the train consists of one car with\n\n    A_1 = 0\n, let's denote train as \n    [0]\n for simplicity. After adding\none car to the head, train is \n    [0, 0]\n. After recalculation of values with\nparameters \n    b=1, s=1\n, train is \n    [1, 2]\n. After another recalculation\nof values with the parameters \n    b=1, s=1\n, train is \n    [2, 4]\n. After\nadding one car to the end, train is \n    [2, 4, 0]\n. After another adding one\ncar to the end, train is \n    [2, 4, 0, 0]\n. After recalculation of values\nwith parameters \n    b=1\n, \n    s=1\n, train is \n    [3, 6, 3, 4]\n. After\nadding one car to the end, train is \n    [3, 6, 3, 4, 0]\n. After recalculation\nof values with parameters \n    b=1\n, \n    s=5\n, train is \n    [4, 12, 14, 20,\n    21]\n.\n\n",
        "cf_contest_id": 1137,
        "cf_index": "E",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "1 8\r\n1 1\r\n3 1 1\r\n3 1 1\r\n2 1\r\n2 1\r\n3 1 1\r\n2 1\r\n3 1 5\r\n",
                "1 0\r\n1 1\r\n1 2\r\n3 0\r\n3 0\r\n1 3\r\n5 0\r\n1 4\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 12\r\n3 100500 1\r\n2 1\r\n2 1\r\n3 1 1\r\n3 1 1\r\n3 1 1\r\n2 1\r\n3 1 1\r\n2 1\r\n3 1 1\r\n3 1 1\r\n3 1 1\r\n",
                "1 100500\r\n2 0\r\n2 0\r\n2 2\r\n2 4\r\n2 6\r\n4 0\r\n4 4\r\n5 0\r\n5 5\r\n5 10\r\n2 14\r\n"
            ],
            [
                "1 20\r\n2 1\r\n3 1 1\r\n3 1 1\r\n3 1 1\r\n2 1\r\n3 1 1\r\n2 1\r\n3 1 1\r\n3 1 1\r\n3 1 1\r\n3 1 1\r\n1 1\r\n1 1\r\n3 1 1\r\n2 1\r\n2 1\r\n2 1\r\n3 1 1\r\n1 1\r\n3 1 1\r\n",
                "1 0\r\n1 1\r\n1 2\r\n1 3\r\n3 0\r\n3 3\r\n4 0\r\n4 4\r\n1 6\r\n1 7\r\n1 8\r\n1 0\r\n1 0\r\n1 1\r\n7 0\r\n7 0\r\n7 0\r\n1 2\r\n1 0\r\n1 1\r\n"
            ],
            [
                "1 10\r\n2 8\r\n2 1\r\n3 232685184 476982441\r\n3 16454855 550781490\r\n3 851754765 298585633\r\n3 560852311 766742779\r\n3 327600524 260323619\r\n3 472843460 980040864\r\n3 934429941 955576191\r\n3 491348319 411529864\r\n",
                "1 0\r\n1 0\r\n1 232685184\r\n1 249140039\r\n1 1100894804\r\n1 1661747115\r\n1 1989347639\r\n1 2462191099\r\n1 3396621040\r\n1 3887969359\r\n"
            ],
            [
                "1000000 1\r\n3 10 10\r\n",
                "1 10\r\n"
            ],
            [
                "1000000 1\r\n3 5 9\r\n",
                "1 5\r\n"
            ],
            [
                "1000000 1\r\n1 643382239\r\n",
                "1 0\r\n"
            ],
            [
                "1000000 1\r\n3 8 6\r\n",
                "1 8\r\n"
            ]
        ]
    }
]