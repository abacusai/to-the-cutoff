[
    {
        "name": "Minimum Notation",
        "description": "You have a string \n    s\n consisting of digits from \n    0\n to \n    9\n\ninclusive. You can perform the following operation any (possibly zero) number\nof times: You can choose a position \n    i\n and delete a digit \n    d\n on the\n\n    i\n-th position. Then insert the digit \n    min(d + 1, 9)\n on any\nposition (at the beginning, at the end or in between any two adjacent digits).\nWhat is the lexicographically smallest string you can get by performing these\noperations? A string \n    a\n is lexicographically smaller than a string\n\n    b\n of the same length if and only if the following holds: in the first\nposition where \n    a\n and \n    b\n differ, the string \n    a\n has a smaller\ndigit than the corresponding digit in \n    b\n. Input The first line contains a\nsingle integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test\ncases. Then the test cases follow. Each test case consists of a single line\nthat contains one string \n    s\n (\n    1 \n    \u2264 |s| \n    \u2264 2 \n    \u00b7 10^5\n) \u2014\nthe string consisting of digits. Please note that \n    s\n is just a string\nconsisting of digits, so leading zeros are allowed. It is guaranteed that the\nsum of lengths of \n    s\n over all test cases does not exceed \n    2 \n    \u00b7\n    10^5\n. Output Print a single string \u2014 the minimum string that is possible to\nobtain. Example Input 4 04829 9 01 314752277691991 Output 02599 9 01\n111334567888999 Note In the first test case: Delete \n    8\n and insert \n    9\n\nat the end of the notation. The resulting notation is \n    04299\n. Delete\n\n    4\n and insert \n    5\n in the \n    3\n-rd position of the notation. The\nresulting notation is \n    02599\n. Nothing needs to be done in the second and\nthird test cases.\n\n",
        "cf_contest_id": 1730,
        "cf_index": "C",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n04829\r\n9\r\n01\r\n314752277691991\r\n",
                "02599\r\n9\r\n01\r\n111334567888999\r\n"
            ]
        ],
        "private_cases": []
    }
]