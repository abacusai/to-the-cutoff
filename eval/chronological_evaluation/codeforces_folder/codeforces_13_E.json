[
    {
        "name": "Holes",
        "description": "Little Petya likes to play a lot. Most of all he likes to play a game \u00abHoles\u00bb.\nThis is a game for one person with following rules: There are N holes located\nin a single row and numbered from left to right with numbers from 1 to N. Each\nhole has it's own power (hole number i has the power ai). If you throw a ball\ninto hole i it will immediately jump to hole i + ai, then it will jump out of\nit and so on. If there is no hole with such number, the ball will just jump\nout of the row. On each of the M moves the player can perform one of two\nactions: Set the power of the hole a to value b. Throw a ball into the hole a\nand count the number of jumps of a ball before it jump out of the row and also\nwrite down the number of the hole from which it jumped out just before leaving\nthe row. Petya is not good at math, so, as you have already guessed, you are\nto perform all computations. Input The first line contains two integers N and\nM (1 \u2264 N \u2264 10^5, 1 \u2264 M \u2264 10^5) \u2014 the number of holes in a row and the number\nof moves. The second line contains N positive integers not exceeding N \u2014\ninitial values of holes power. The following M lines describe moves made by\nPetya. Each of these line can be one of the two types: 0 a b 1 a Type 0 means\nthat it is required to set the power of hole a to b, and type 1 means that it\nis required to throw a ball into the a-th hole. Numbers a and b are positive\nintegers do not exceeding N. Output For each move of the type 1 output two\nspace-separated numbers on a separate line \u2014 the number of the last hole the\nball visited before leaving the row and the number of jumps it made. Examples\nInput 8 5 1 1 1 1 1 2 8 2 1 1 0 1 3 1 1 0 3 4 1 2 Output 8 7 8 5 7 3\n\n",
        "cf_contest_id": 13,
        "cf_index": "E",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dsu"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 64.0,
        "public_cases": [
            [
                "8 5\r\n1 1 1 1 1 2 8 2\r\n1 1\r\n0 1 3\r\n1 1\r\n0 3 4\r\n1 2\r\n",
                "8 7\r\n8 5\r\n7 3\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 10\r\n5 1 2 4 1 7 3 8 10 8\r\n0 5 6\r\n1 8\r\n1 1\r\n0 10 3\r\n1 5\r\n1 3\r\n1 2\r\n0 6 1\r\n1 9\r\n1 1\r\n",
                "8 1\r\n6 2\r\n5 1\r\n5 2\r\n5 3\r\n9 1\r\n10 4\r\n"
            ]
        ]
    }
]