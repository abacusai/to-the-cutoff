[
    {
        "name": "Xor on Figures",
        "description": "There is given an integer \n    k\n and a grid \n    2^k \n    \u00d7 2^k\n with some\nnumbers written in its cells, cell \n    (i, j)\n initially contains number\n\n    a_ij\n. Grid is considered to be a torus, that is, the cell to the right\nof \n    (i, 2^k)\n is \n    (i, 1)\n, the cell below the \n    (2^k, i)\n is \n    (1,\n    i)\n There is also given a lattice figure \n    F\n, consisting of \n    t\n\ncells, where \n    t\n is odd. \n    F\n doesn't have to be connected. We can\nperform the following operation: place \n    F\n at some position on the grid.\n(Only translations are allowed, rotations and reflections are prohibited). Now\nchoose any nonnegative integer \n    p\n. After that, for each cell \n    (i,\n    j)\n, covered by \n    F\n, replace \n    a_ij\n by \n    a_ij\n    \u2295 p\n,\nwhere \n    \u2295\n denotes the bitwise XOR operation. More formally, let\n\n    F\n be given by cells \n    (x_1, y_1), (x_2, y_2), \n    \u2026, (x_t, y_t)\n.\nThen you can do the following operation: choose any \n    x, y\n with \n    1\n    \u2264\n    x, y \n    \u2264 2^k\n, any nonnegative integer \n    p\n, and for every \n    i\n from\n\n    1\n to \n    n\n replace number in the cell \n    (((x + x_i - 1)\n     2^k) +\n    1, ((y + y_i - 1)\n     2^k) + 1)\n with \n    a_((x + x_i - 1)\n     2^k) +\n    1, ((y + y_i - 1)\n     2^k) + 1\n    \u2295 p\n. Our goal is to make all the\nnumbers equal to \n    0\n. Can we achieve it? If we can, find the smallest\nnumber of operations in which it is possible to do this. Input The first line\ncontains a single integer \n    k\n (\n    1 \n    \u2264 k \n    \u2264 9\n). The \n    i\n-th of\nthe next \n    2^k\n lines contains \n    2^k\n integers \n    a_i1, a_i2,\n    \n    \u2026, a_i2^k\n (\n    0 \n    \u2264 a_ij < 2^60\n) \u2014 initial values in the\n\n    i\n-th row of the grid. The next line contains a single integer \n    t\n\n(\n    1\n    \u2264 t \n    \u2264\n    min(99, 4^k)\n, \n    t\n is odd) \u2014 number of cells of\nfigure. \n    i\n-th of next \n    t\n lines contains two integers \n    x_i\n and\n\n    y_i\n (\n    1 \n    \u2264 x_i, y_i \n    \u2264 2^k\n), describing the position of the\n\n    i\n-th cell of the figure. It is guaranteed that all cells are different,\nbut it is not guaranteed that the figure is connected. Output If it is\nimpossible to make all numbers in the grid equal to \n    0\n with these\noperations, output \n    -1\n. Otherwise, output a single integer \u2014 the minimal\nnumber of operations needed to do this. It can be shown that if it is possible\nto make all numbers equal \n    0\n, it is possible to do so in less than\n\n    10^18\n operations. Example Input 2 5 5 5 5 2 6 2 3 0 0 2 0 0 0 0 0 5 1\n1 1 2 1 3 1 4 2 4 Output 3 Note The figure and the operations for the example\nare shown above:\n\n",
        "cf_contest_id": 1270,
        "cf_index": "I",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "fft",
            "math"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n5 5 5 5\r\n2 6 2 3\r\n0 0 2 0\r\n0 0 0 0\r\n5\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n2 4\r\n",
                "3"
            ]
        ],
        "private_cases": [
            [
                "1\r\n102376168359033740 62711660652585570\r\n291338541657329614 123142525563804142\r\n3\r\n1 1\r\n1 2\r\n2 2\r\n",
                "3"
            ],
            [
                "1\r\n116904117873106358 291178754541883516\r\n0 0\r\n1\r\n1 2\r\n",
                "2"
            ],
            [
                "2\r\n393992823094492281 631999893322825664 393992823094492281 631024666572758940\r\n525564979587631372 485213882738256452 290312060331091595 583959893407978503\r\n701495094759027631 311041792284729963 1054254739071172163 311041792284729963\r\n990457057583360018 488541388732785051 655023937544902720 266999587529866686\r\n5\r\n1 1\r\n1 3\r\n4 1\r\n4 2\r\n4 3\r\n",
                "10"
            ],
            [
                "2\r\n966389397154348244 867956991231817135 495205829188993566 228554898588460153\r\n423742834990153360 148328279679462744 843893980630744778 31498991246533375\r\n106691623259518259 786228015424785891 474165912163886843 546538133541431744\r\n557750716213857125 177010739515840336 105577268555518348 628753772636806313\r\n9\r\n1 1\r\n2 1\r\n2 2\r\n2 3\r\n3 1\r\n3 2\r\n3 3\r\n3 4\r\n4 1\r\n",
                "8"
            ],
            [
                "2\r\n713854530880679364 32592563787370466 901860930412506755 32592563787370466\r\n989484057665386502 32592563787370466 32592563787370466 32592563787370466\r\n32592563787370466 32592563787370466 364045396501161557 32592563787370466\r\n32592563787370466 998128465073380628 32592563787370466 32592563787370466\r\n15\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n2 1\r\n2 2\r\n2 4\r\n3 1\r\n3 2\r\n3 3\r\n3 4\r\n4 1\r\n4 2\r\n4 3\r\n4 4\r\n",
                "5"
            ],
            [
                "2\r\n1039610004220527646 14464009155078684 0 0\r\n1125623616883793006 0 899924272051192164 606465233838544341\r\n0 0 0 952390673955026059\r\n0 0 0 0\r\n1\r\n4 2\r\n",
                "6"
            ],
            [
                "2\r\n0 0 0 0\r\n0 0 0 0\r\n0 0 0 0\r\n0 0 0 0\r\n1\r\n1 1\r\n",
                "0"
            ],
            [
                "1\r\n641877189644832060 221885403978580349\r\n674724786337567954 1052874980315166723\r\n3\r\n1 1\r\n1 2\r\n2 2\r\n",
                "4"
            ],
            [
                "1\r\n116904117873106358 235179928998495823\r\n306553322831633958 930284655519911845\r\n1\r\n1 2\r\n",
                "4"
            ],
            [
                "2\r\n42749423546598731 393490769406032969 159110178875375065 287172168805810684\r\n602284421578014752 156257061529804826 175818795120599100 352752531951081244\r\n284685314425360327 965102604002478412 93265941581996884 123590158201792158\r\n882425143766917223 921257279811423586 383518733241683066 486059725990189650\r\n5\r\n1 1\r\n1 3\r\n4 1\r\n4 2\r\n4 3\r\n",
                "16"
            ],
            [
                "2\r\n657780854087801966 201152864179333045 259477049644996871 239302277998117574\r\n16837454382043807 376462800731111125 833112789735155009 798704543303120896\r\n859884645643881265 188245114737773840 284146013980233366 1127795348061478382\r\n1062140158003937861 130476773145391539 1076381475978305052 210098211921541217\r\n9\r\n1 1\r\n2 1\r\n2 2\r\n2 3\r\n3 1\r\n3 2\r\n3 3\r\n3 4\r\n4 1\r\n",
                "16"
            ],
            [
                "2\r\n669129901375513728 918174869085669436 891241731689677951 972406144606338962\r\n673647143969595695 873895194385648645 917340666908471108 670086751171071810\r\n8936770186113770 784916499209909402 627117265001339665 681356891311334806\r\n1133258717711453786 821670090673861954 1064668049769164837 408112240153855187\r\n15\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n2 1\r\n2 2\r\n2 4\r\n3 1\r\n3 2\r\n3 3\r\n3 4\r\n4 1\r\n4 2\r\n4 3\r\n4 4\r\n",
                "16"
            ],
            [
                "2\r\n430331784857630557 1039610004220527646 516986264341503224 230141791576209194\r\n899924272051192164 148473200279287693 14464009155078684 172486500111165381\r\n1125623616883793006 1142170547025781122 606465233838544341 741393284898640115\r\n845643758724443274 158358287215760080 1050774460778897637 952390673955026059\r\n1\r\n4 2\r\n",
                "16"
            ],
            [
                "1\r\n1099511627776 1099511627776\r\n1099511627776 1099511627776\r\n3\r\n1 1\r\n1 2\r\n2 2\r\n",
                "4"
            ]
        ]
    }
]