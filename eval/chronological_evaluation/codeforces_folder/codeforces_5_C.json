[
    {
        "name": "Longest Regular Bracket Sequence",
        "description": "This is yet another problem dealing with regular bracket sequences. We should\nremind you that a bracket sequence is called regular, if by inserting \u00ab+\u00bb and\n\u00ab1\u00bb into it we can get a correct mathematical expression. For example,\nsequences \u00ab(())()\u00bb, \u00ab()\u00bb and \u00ab(()(()))\u00bb are regular, while \u00ab)(\u00bb, \u00ab(()\u00bb and\n\u00ab(()))(\u00bb are not. You are given a string of \u00ab(\u00bb and \u00ab)\u00bb characters. You are to\nfind its longest substring that is a regular bracket sequence. You are to find\nthe number of such substrings as well. Input The first line of the input file\ncontains a non-empty string, consisting of \u00ab(\u00bb and \u00ab)\u00bb characters. Its length\ndoes not exceed 10^6. Output Print the length of the longest substring that is\na regular bracket sequence, and the number of such substrings. If there are no\nsuch substrings, write the only line containing \"0 1\". Examples Input\n)((())))(()()) Output 6 2 Input ))( Output 0 1\n\n",
        "cf_contest_id": 5,
        "cf_index": "C",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "dp",
            "greedy",
            "sortings",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                ")((())))(()())\r\n",
                "6 2\r\n"
            ],
            [
                "))(\r\n",
                "0 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "()(())()\r\n",
                "8 1\r\n"
            ],
            [
                "((((()(((\r\n",
                "2 1\r\n"
            ],
            [
                "))))()())))\r\n",
                "4 1\r\n"
            ],
            [
                "(()())()(())()()())())()((()(()(())()()())((()(())()(()()()()))()(())()(((()())()(()((())()(())(()))\r\n",
                "28 1\r\n"
            ],
            [
                ")(()(((((())))))(((()))))))((()(((((((())())()))))((((((((())))((((((())))))(()((((()))))(()))))))))\r\n",
                "68 1\r\n"
            ],
            [
                "())(((((())())((((()))(())))())())(((()(()()()())(())()))((()(())())()()))()(()())))))(()))((())((((\r\n",
                "80 1\r\n"
            ],
            [
                "))(((((((()((((())(((((((((()()))))(()())()((())())))((((()))(()()()))))(()()))())))))((())())()))((\r\n",
                "92 1\r\n"
            ]
        ]
    }
]