[
    {
        "name": "GukiZ and Contest",
        "description": "Professor GukiZ likes programming contests. He especially likes to rate his\nstudents on the contests he prepares. Now, he has decided to prepare a new\ncontest. In total, n students will attend, and before the start, every one of\nthem has some positive integer rating. Students are indexed from 1 to n. Let's\ndenote the rating of i-th student as ai. After the contest ends, every student\nwill end up with some positive integer position. GukiZ expects that his\nstudents will take places according to their ratings. He thinks that each\nstudent will take place equal to . In particular, if student A has rating\nstrictly lower then student B, A will get the strictly better position than B,\nand if two students have equal ratings, they will share the same position.\nGukiZ would like you to reconstruct the results by following his expectations.\nHelp him and determine the position after the end of the contest for each of\nhis students if everything goes as expected. Input The first line contains\ninteger n (1 \u2264 n \u2264 2000), number of GukiZ's students. The second line contains\nn numbers a1, a2, ... an (1 \u2264 ai \u2264 2000) where ai is the rating of i-th\nstudent (1 \u2264 i \u2264 n). Output In a single line, print the position after the end\nof the contest for each of n students in the same order as they appear in the\ninput. Examples Input 3 1 3 3 Output 3 1 1 Input 1 1 Output 1 Input 5 3 5 3 4\n5 Output 4 1 4 3 1 Note In the first sample, students 2 and 3 are positioned\nfirst (there is no other student with higher rating), and student 1 is\npositioned third since there are two students with higher rating. In the\nsecond sample, first student is the only one on the contest. In the third\nsample, students 2 and 5 share the first position with highest rating, student\n4 is next with third position, and students 1 and 3 are the last sharing\nfourth position.\n\n",
        "cf_contest_id": 551,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 3 3\r\n",
                "3 1 1 "
            ],
            [
                "1\r\n1\r\n",
                "1 "
            ],
            [
                "5\r\n3 5 3 4 5\r\n",
                "4 1 4 3 1 "
            ]
        ],
        "private_cases": [
            [
                "7\r\n1 3 5 4 2 2 1\r\n",
                "6 3 1 2 4 4 6 "
            ],
            [
                "11\r\n5 6 4 2 9 7 6 6 6 6 7\r\n",
                "9 4 10 11 1 2 4 4 4 4 2 "
            ],
            [
                "1\r\n2000\r\n",
                "1 "
            ],
            [
                "2\r\n2000 2000\r\n",
                "1 1 "
            ],
            [
                "3\r\n500 501 502\r\n",
                "3 2 1 "
            ],
            [
                "10\r\n105 106 1 1 1 11 1000 999 1000 999\r\n",
                "6 5 8 8 8 7 1 3 1 3 "
            ],
            [
                "6\r\n1 2 3 4 5 6\r\n",
                "6 5 4 3 2 1 "
            ],
            [
                "7\r\n6 5 4 3 2 1 1\r\n",
                "1 2 3 4 5 6 6 "
            ],
            [
                "8\r\n153 100 87 14 10 8 6 5\r\n",
                "1 2 3 4 5 6 7 8 "
            ],
            [
                "70\r\n11 54 37 62 1 46 13 17 38 47 28 15 63 5 61 34 49 66 32 59 3 41 58 28 23 62 41 64 20 5 14 41 10 37 51 32 65 46 61 8 15 19 16 44 31 42 19 46 66 25 26 58 60 5 19 18 69 53 20 40 45 27 24 41 32 23 57 56 62 10\r\n",
                "62 18 35 7 70 23 61 56 34 22 42 58 6 66 10 37 21 2 38 13 69 29 14 42 48 7 29 5 50 66 60 29 63 35 20 38 4 23 10 65 58 52 57 27 41 28 52 23 2 46 45 14 12 66 52 55 1 19 50 33 26 44 47 29 38 48 16 17 7 63 "
            ],
            [
                "5\r\n1 2000 1 1 2000\r\n",
                "3 1 3 3 1 "
            ]
        ]
    }
]