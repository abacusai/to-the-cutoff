[
    {
        "name": "Range Update Point Query",
        "description": "Given an array \n    a_1, a_2, \n    \u2026, a_n\n, you need to handle a total of\n\n    q\n updates and queries of two types: \n    1\n \n    l\n \n    r\n \u2014 for each\nindex \n    i\n with \n    l \n    \u2264 i \n    \u2264 r\n, update the value of \n    a_i\n to\nthe sum of the digits of \n    a_i\n. \n    2\n \n    x\n \u2014 output \n    a_x\n. Input\nThe first line of the input contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    1000\n) \u2014 the number of testcases. The first line of each test case contains\ntwo integers \n    n\n and \n    q\n (\n    1 \n    \u2264 n, q \n    \u2264 2 \n    \u00b7 10^5\n) \u2014\nthe size of the array and the number of queries, respectively. The second line\nof each test case contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1\n    \n    \u2264 a_i \n    \u2264 10^9\n). The next \n    q\n lines of each test case are of two\nforms: \n    1\n \n    l\n \n    r\n (\n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 n\n) \u2014 it\nmeans, for each index \n    i\n with \n    l \n    \u2264 i \n    \u2264 r\n, you should\nupdate the value of \n    a_i\n to the sum of its digits. \n    2\n \n    x\n (\n    1\n    \n    \u2264 x \n    \u2264 n\n) \u2014 it means you should output \n    a_x\n. There is at\nleast one query of the second type. The sum of \n    n\n over all test cases\ndoes not exceed \n    2 \n    \u00b7 10^5\n. The sum of \n    q\n over all test cases\ndoes not exceed \n    2 \n    \u00b7 10^5\n. Output For each test case, output the\nanswers of queries of the second type, in the order they are given. Example\nInput 3 5 8 1 420 69 1434 2023 1 2 3 2 2 2 3 2 4 1 2 5 2 1 2 3 2 5 2 3 9999\n1000 1 1 2 2 1 2 2 1 1 1 2 1 Output 6 15 1434 1 6 7 36 1 1 Note In the first\ntest case, the following process occurs: Initially, \n    a = [1, 420, 69, 1434,\n    2023]\n. The operation is performed for \n    l=2\n, \n    r=3\n, yielding \n    [1,\n    \n    6, \n    15, 1434, 2023]\n. We are queried for\n\n    x=2\n, \n    x=3\n, and \n    x=4\n, and output \n    6\n, \n    15\n, and\n\n    1434\n. The operation is performed for \n    l=2\n, \n    r=5\n, yielding\n\n    [1, \n    6, \n    6, \n    12,\n    \n    7]\n. We are queried for \n    x=1\n, \n    x=3\n, and \n    x=5\n,\nand output \n    1\n, \n    6\n, and \n    7\n.\n\n",
        "cf_contest_id": 1791,
        "cf_index": "F",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "data structures"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n5 8\r\n1 420 69 1434 2023\r\n1 2 3\r\n2 2\r\n2 3\r\n2 4\r\n1 2 5\r\n2 1\r\n2 3\r\n2 5\r\n2 3\r\n9999 1000\r\n1 1 2\r\n2 1\r\n2 2\r\n1 1\r\n1\r\n2 1\r\n",
                "6\r\n15\r\n1434\r\n1\r\n6\r\n7\r\n36\r\n1\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2 2\r\n10 10\r\n1 1 2\r\n2 1\r\n",
                "1\r\n"
            ],
            [
                "1\r\n1 2\r\n10\r\n1 1 1\r\n2 1\r\n",
                "1\r\n"
            ],
            [
                "1\r\n3 26\r\n10 10 10\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 3 3\r\n1 3 3\r\n1 3 3\r\n1 3 3\r\n1 3 3\r\n1 3 3\r\n1 3 3\r\n1 3 3\r\n1 3 3\r\n1 3 3\r\n1 3 3\r\n1 3 3\r\n1 1 3\r\n2 2\r\n",
                "1\r\n"
            ],
            [
                "1\r\n1 2\r\n903305975\r\n1 1 1\r\n2 1\r\n",
                "41\r\n"
            ],
            [
                "1\r\n5 26\r\n12 12 12 12 12\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 1 5\r\n2 2\r\n",
                "3\r\n"
            ],
            [
                "1\r\n5 22\r\n1 420 69 1434 2023\r\n1 1 3\r\n1 1 3\r\n1 1 3\r\n1 1 3\r\n1 1 3\r\n1 1 3\r\n1 1 3\r\n1 1 3\r\n1 1 3\r\n1 1 3\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 1 5\r\n2 4\r\n",
                "12\r\n"
            ],
            [
                "1\r\n5 24\r\n1 420 69 1434 2023\r\n1 1 3\r\n1 1 3\r\n1 1 3\r\n1 1 3\r\n1 1 3\r\n1 1 3\r\n1 1 3\r\n1 1 3\r\n1 1 3\r\n1 1 3\r\n1 1 3\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 1 5\r\n2 4\r\n",
                "12\r\n"
            ],
            [
                "1\r\n5 12\r\n9999 9999 9999 9999 9999\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 5 5\r\n1 1 5\r\n2 3\r\n",
                "36\r\n"
            ],
            [
                "1\r\n8 35\r\n14 14 14 14 14 14 14 14\r\n1 2 3\r\n1 2 3\r\n1 2 3\r\n1 2 3\r\n1 2 3\r\n1 2 3\r\n1 2 3\r\n1 2 3\r\n1 2 3\r\n1 2 3\r\n1 2 3\r\n1 2 3\r\n1 2 3\r\n1 6 7\r\n1 6 7\r\n1 6 7\r\n1 6 7\r\n1 6 7\r\n1 6 7\r\n1 6 7\r\n1 6 7\r\n1 6 7\r\n1 6 7\r\n1 6 7\r\n1 6 7\r\n1 6 7\r\n1 1 8\r\n2 1\r\n2 2\r\n2 3\r\n2 4\r\n2 5\r\n2 6\r\n2 7\r\n2 8\r\n",
                "5\r\n5\r\n5\r\n5\r\n5\r\n5\r\n5\r\n5\r\n"
            ]
        ]
    }
]