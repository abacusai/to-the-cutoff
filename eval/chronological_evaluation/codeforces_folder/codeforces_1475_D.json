[
    {
        "name": "Cleaning the Phone",
        "description": "Polycarp often uses his smartphone. He has already installed \n    n\n\napplications on it. Application with number \n    i\n takes up \n    a_i\n units\nof memory. Polycarp wants to free at least \n    m\n units of memory (by\nremoving some applications). Of course, some applications are more important\nto Polycarp than others. He came up with the following scoring system \u2014 he\nassigned an integer \n    b_i\n to each application: \n    b_i = 1\n \u2014 regular\napplication; \n    b_i = 2\n \u2014 important application. According to this rating\nsystem, his phone has \n    b_1 + b_2 + \n    \u2026 + b_n\n convenience points.\nPolycarp believes that if he removes applications with numbers \n    i_1, i_2,\n    \n    \u2026, i_k\n, then he will free \n    a_i_1 + a_i_2 + \n    \u2026 +\n    a_i_k\n units of memory and lose \n    b_i_1 + b_i_2 + \n    \u2026 +\n    b_i_k\n convenience points. For example, if \n    n=5\n, \n    m=7\n, \n    a=[5,\n    3, 2, 1, 4]\n, \n    b=[2, 1, 1, 2, 1]\n, then Polycarp can uninstall the\nfollowing application sets (not all options are listed below): applications\nwith numbers \n    1, 4\n and \n    5\n. In this case, it will free\n\n    a_1+a_4+a_5=10\n units of memory and lose \n    b_1+b_4+b_5=5\n convenience\npoints; applications with numbers \n    1\n and \n    3\n. In this case, it will\nfree \n    a_1+a_3=7\n units of memory and lose \n    b_1+b_3=3\n convenience\npoints. applications with numbers \n    2\n and \n    5\n. In this case, it will\nfree \n    a_2+a_5=7\n memory units and lose \n    b_2+b_5=2\n convenience points.\nHelp Polycarp, choose a set of applications, such that if removing them will\nfree at least \n    m\n units of memory and lose the minimum number of\nconvenience points, or indicate that such a set does not exist. Input The\nfirst line contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the\nnumber of test cases. Then \n    t\n test cases follow. The first line of each\ntest case contains two integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n, \n    1 \n    \u2264 m \n    \u2264 10^9\n) \u2014 the number of applications on\nPolycarp's phone and the number of memory units to be freed. The second line\nof each test case contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n\n(\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the number of memory units used by\napplications. The third line of each test case contains \n    n\n integers\n\n    b_1, b_2, \n    \u2026, b_n\n (\n    1 \n    \u2264 b_i \n    \u2264 2\n) \u2014 the convenience\npoints of each application. It is guaranteed that the sum of \n    n\n over all\ntest cases does not exceed \n    2 \n    \u00b7 10^5\n. Output For each test case,\noutput on a separate line: -1, if there is no set of applications, removing\nwhich will free at least \n    m\n units of memory; the minimum number of\nconvenience points that Polycarp will lose if such a set exists. Example Input\n5 5 7 5 3 2 1 4 2 1 1 2 1 1 3 2 1 5 10 2 3 2 3 2 1 2 1 2 1 4 10 5 1 3 4 1 2 1\n2 4 5 3 2 1 2 2 1 2 1 Output 2 -1 6 4 3 Note In the first test case, it is\noptimal to remove applications with numbers \n    2\n and \n    5\n, freeing\n\n    7\n units of memory. \n    b_2+b_5=2\n. In the second test case, by removing\nthe only application, Polycarp will be able to clear only \n    2\n of memory\nunits out of the \n    3\n needed. In the third test case, it is optimal to\nremove applications with numbers \n    1\n, \n    2\n, \n    3\n and \n    4\n,\nfreeing \n    10\n units of memory. \n    b_1+b_2+b_3+b_4=6\n. In the fourth test\ncase, it is optimal to remove applications with numbers \n    1\n, \n    3\n and\n\n    4\n, freeing \n    12\n units of memory. \n    b_1+b_3+b_4=4\n. In the fifth\ntest case, it is optimal to remove applications with numbers \n    1\n and\n\n    2\n, freeing \n    5\n units of memory. \n    b_1+b_2=3\n.\n\n",
        "cf_contest_id": 1475,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dp",
            "sortings",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n5 7\r\n5 3 2 1 4\r\n2 1 1 2 1\r\n1 3\r\n2\r\n1\r\n5 10\r\n2 3 2 3 2\r\n1 2 1 2 1\r\n4 10\r\n5 1 3 4\r\n1 2 1 2\r\n4 5\r\n3 2 1 2\r\n2 1 2 1\r\n",
                "2\r\n-1\r\n6\r\n4\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n17 20\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 6 10 10\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2\r\n",
                "4\r\n"
            ]
        ]
    }
]