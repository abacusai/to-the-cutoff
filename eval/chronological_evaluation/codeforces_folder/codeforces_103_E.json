[
    {
        "name": "Buying Sets",
        "description": "The Hexadecimal virus loves playing with number sets \u2014 intersecting them,\nuniting them. One beautiful day she was surprised to find out that Scuzzy, her\nspherical pet cat, united all sets in one and ate the result! Something had to\nbe done quickly and Hexadecimal rushed to the market. The market has n sets of\nnumbers on sale. The virus wants to buy the following collection of sets: the\nnumber of sets in the collection should be exactly the same as the number of\nnumbers in the union of all bought sets. Moreover, Hexadecimal wants to buy\nthe cheapest suitable collection of set. Yet nothing's so easy! As Mainframe\nis a kingdom of pure rivalry markets, we know that the union of any k sets\ncontains no less than k distinct numbers (for every positive integer k). Help\nthe virus choose the suitable collection of sets. The collection can be empty.\nInput The first line contains the only number n (1 \u2264 n \u2264 300) \u2014 the number of\nsets available in the market. Next n lines describe the goods: first we are\ngiven mi (1 \u2264 mi \u2264 n) \u2014 the number of distinct numbers in the i-th set, then\nfollow mi numbers \u2014 the set's elements. We know that the set's elements are\ndistinct positive integers and they do not exceed n. The last line contains n\nintegers whose absolute values do not exceed 10^6 \u2014 the price of each set.\nOutput Print a single number \u2014 the minimum price the virus will have to pay\nfor such a collection of k sets that union of the collection's sets would have\nexactly k distinct numbers (). Examples Input 3 1 1 2 2 3 1 3 10 20 -3 Output\n-3 Input 5 2 1 2 2 2 3 2 3 4 2 4 5 2 5 1 1 -1 1 -1 1 Output 0 Input 5 2 1 2 2\n2 3 2 3 4 2 4 5 2 5 1 -1 1 -1 1 -1 Output -1\n\n",
        "cf_contest_id": 103,
        "cf_index": "E",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "flows",
            "graph matchings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 1\r\n2 2 3\r\n1 3\r\n10 20 -3\r\n",
                "-3"
            ],
            [
                "5\r\n2 1 2\r\n2 2 3\r\n2 3 4\r\n2 4 5\r\n2 5 1\r\n1 -1 1 -1 1\r\n",
                "0"
            ],
            [
                "5\r\n2 1 2\r\n2 2 3\r\n2 3 4\r\n2 4 5\r\n2 5 1\r\n-1 1 -1 1 -1\r\n",
                "-1"
            ]
        ],
        "private_cases": [
            [
                "20\r\n1 9\r\n1 5\r\n1 1\r\n1 16\r\n1 4\r\n2 3 16\r\n1 20\r\n1 7\r\n2 8 11\r\n3 3 7 12\r\n3 12 19 20\r\n2 12 17\r\n1 6\r\n1 13\r\n1 11\r\n1 2\r\n2 1 10\r\n1 15\r\n1 18\r\n2 7 14\r\n-191706 -404849 -831879 630465 -329932 735014 -560879 -735142 -980003 -638196 -363875 -961092 297579 -187227 511989 -60742 -814423 656950 763284 442057\r\n",
                "-5182477"
            ],
            [
                "20\r\n6 1 8 10 11 12 13\r\n1 7\r\n3 4 8 13\r\n3 6 12 14\r\n3 1 15 18\r\n1 11\r\n2 11 12\r\n3 6 11 16\r\n1 13\r\n2 9 18\r\n5 10 16 17 19 20\r\n3 3 18 20\r\n5 10 16 17 19 20\r\n2 1 10\r\n5 3 5 7 18 20\r\n2 12 20\r\n2 2 10\r\n3 6 14 17\r\n1 15\r\n2 3 16\r\n73139 100057 226284 920255 -373584 -288417 -442669 -737394 -726511 87365 -877085 -949499 -154834 557695 573785 169953 -430853 486850 -728831 -133791\r\n",
                "-3708715"
            ],
            [
                "20\r\n5 10 12 13 15 19\r\n5 2 5 8 11 20\r\n5 1 4 6 15 18\r\n5 1 2 3 11 16\r\n5 4 8 9 14 20\r\n5 9 10 12 15 16\r\n5 3 7 16 19 20\r\n5 2 3 14 17 18\r\n5 9 10 11 12 13\r\n5 5 6 8 9 17\r\n5 6 14 15 18 19\r\n5 2 4 5 13 18\r\n5 2 4 6 7 18\r\n5 3 4 7 8 17\r\n5 1 3 10 13 20\r\n5 5 11 12 14 15\r\n5 1 5 8 16 17\r\n5 6 7 9 12 19\r\n5 7 10 11 13 19\r\n5 1 14 16 17 20\r\n-652965 -699751 531011 819641 -153288 -779461 430470 163942 531607 800381 527319 685496 -970153 9712 377507 -633670 -354742 942431 532924 -664065\r\n",
                "0"
            ],
            [
                "20\r\n1 4\r\n1 15\r\n1 5\r\n1 10\r\n1 9\r\n1 8\r\n1 17\r\n1 19\r\n1 16\r\n1 20\r\n1 7\r\n1 18\r\n1 13\r\n1 12\r\n1 1\r\n1 6\r\n1 2\r\n1 14\r\n1 3\r\n1 11\r\n578275 -690732 -937148 -405911 -363013 139192 -516384 761305 5969 -825689 356759 -262882 762214 -392569 612042 -214433 181719 -409586 -635947 226970\r\n",
                "-5654294"
            ],
            [
                "21\r\n1 14\r\n1 9\r\n2 6 7\r\n2 2 15\r\n1 4\r\n1 11\r\n1 13\r\n1 10\r\n1 8\r\n1 21\r\n1 12\r\n1 5\r\n1 17\r\n1 7\r\n1 20\r\n1 2\r\n1 16\r\n3 5 6 19\r\n1 3\r\n1 18\r\n1 1\r\n500233 -710338 884652 -719999 -313650 835955 307911 239381 -766129 122648 -911896 -52070 -915292 -944903 -454442 -764029 -839040 749601 -771318 -969543 -372400\r\n",
                "-9505049"
            ],
            [
                "22\r\n2 8 11\r\n1 21\r\n2 11 14\r\n3 2 11 16\r\n1 1\r\n1 4\r\n1 3\r\n3 19 21 22\r\n1 10\r\n2 8 19\r\n1 20\r\n1 7\r\n2 5 12\r\n1 13\r\n1 2\r\n1 18\r\n1 15\r\n1 11\r\n1 9\r\n1 5\r\n1 17\r\n1 6\r\n897106 578253 594067 -232138 770992 -156773 238670 27730 654930 85095 454973 62034 -678538 235746 -578116 -665899 169816 -759196 -866728 22108 -773118 -228307\r\n",
                "-4916705"
            ],
            [
                "23\r\n2 15 16\r\n2 10 18\r\n1 5\r\n2 15 18\r\n1 13\r\n2 3 6\r\n1 6\r\n1 21\r\n2 16 20\r\n1 14\r\n1 22\r\n4 4 7 18 19\r\n1 10\r\n1 23\r\n2 3 11\r\n2 8 13\r\n3 1 8 12\r\n1 1\r\n2 4 10\r\n1 19\r\n1 17\r\n1 2\r\n1 9\r\n510647 -983223 -797880 -987738 759298 -90269 -481240 767260 933011 -890273 -547540 328059 -522055 -781271 -749029 989724 -645400 -553297 623889 384905 283029 -539386 -203926\r\n",
                "-8127127"
            ],
            [
                "24\r\n2 11 19\r\n3 5 14 15\r\n3 5 14 17\r\n3 8 17 24\r\n1 6\r\n1 16\r\n2 17 24\r\n1 13\r\n1 18\r\n3 1 10 22\r\n3 3 4 11\r\n3 2 10 12\r\n2 2 12\r\n1 8\r\n1 21\r\n2 4 9\r\n1 5\r\n3 12 21 23\r\n1 20\r\n1 7\r\n1 23\r\n2 18 22\r\n2 11 23\r\n3 1 9 21\r\n339866 671334 -708828 510941 -519311 -17084 -865032 28572 -547237 -645048 424590 889090 -892515 -842162 -249419 -891808 -265754 185184 140458 919563 -554423 480459 -718690 -324228\r\n",
                "-5975865"
            ],
            [
                "25\r\n3 1 6 18\r\n1 2\r\n4 8 9 18 24\r\n2 9 20\r\n4 7 11 19 20\r\n4 6 16 18 20\r\n2 11 12\r\n4 8 9 15 24\r\n2 2 22\r\n2 13 25\r\n2 7 20\r\n2 20 23\r\n3 1 3 21\r\n2 6 8\r\n1 5\r\n4 7 15 20 24\r\n3 4 11 14\r\n1 17\r\n3 5 10 19\r\n1 21\r\n2 14 17\r\n3 4 6 8\r\n1 10\r\n2 8 16\r\n3 18 24 25\r\n-482097 417239 -933333 -807961 -940051 -807663 -51701 638120 873366 -15774 -384448 -908517 -63973 -83102 657889 -654749 -875704 362717 -419258 466520 -57384 818901 556406 601507 38923\r\n",
                "-3770428"
            ],
            [
                "26\r\n2 6 24\r\n2 17 19\r\n3 5 15 24\r\n2 21 24\r\n3 3 17 22\r\n2 13 25\r\n1 20\r\n2 6 26\r\n3 12 14 17\r\n1 14\r\n1 23\r\n3 12 13 22\r\n2 4 12\r\n2 19 25\r\n2 13 16\r\n5 3 9 17 19 24\r\n2 2 12\r\n1 26\r\n1 13\r\n1 18\r\n4 6 15 18 19\r\n4 8 9 20 22\r\n3 5 10 18\r\n3 1 21 24\r\n2 5 11\r\n1 7\r\n-913701 650398 957352 -954442 907936 11178 -920750 346097 496218 132560 706092 -757229 414363 745280 -528675 -843319 -837398 -75325 250538 512774 782923 436064 -93596 999584 226408 -902039\r\n",
                "-3698297"
            ],
            [
                "27\r\n2 17 23\r\n5 2 6 12 16 19\r\n2 12 22\r\n4 5 12 18 26\r\n2 5 26\r\n1 20\r\n1 4\r\n4 2 14 15 18\r\n3 5 16 27\r\n3 5 10 25\r\n4 8 9 13 24\r\n3 1 20 23\r\n2 21 26\r\n1 24\r\n3 1 8 14\r\n2 16 24\r\n1 7\r\n2 15 24\r\n5 11 12 15 16 20\r\n4 4 6 18 25\r\n7 2 4 5 9 15 20 23\r\n1 25\r\n2 2 27\r\n5 1 14 15 16 17\r\n1 3\r\n5 1 3 16 17 27\r\n2 11 12\r\n-94372 -128612 253090 648505 819664 655868 -655740 925379 -130595 306577 729672 -282709 377939 -247777 306685 344968 968891 -751778 -14681 872499 -661071 -88715 -697577 674806 381808 434317 -46349\r\n",
                "-1744010"
            ],
            [
                "4\r\n2 1 2\r\n2 2 3\r\n2 3 4\r\n3 1 2 3\r\n-1 -2 -4 -8\r\n",
                "-15"
            ]
        ]
    }
]