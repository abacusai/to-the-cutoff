[
    {
        "name": "Nastya and Scoreboard",
        "description": "Denis, after buying flowers and sweets (you will learn about this story in the\nnext task), went to a date with Nastya to ask her to become a couple. Now,\nthey are sitting in the cafe and finally... Denis asks her to be together, but\n... Nastya doesn't give any answer. The poor boy was very upset because of\nthat. He was so sad that he punched some kind of scoreboard with numbers. The\nnumbers are displayed in the same way as on an electronic clock: each digit\nposition consists of \n    7\n segments, which can be turned on or off to\ndisplay different numbers. The picture shows how all \n    10\n decimal digits\nare displayed: After the punch, some segments stopped working, that is, some\nsegments might stop glowing if they glowed earlier. But Denis remembered how\nmany sticks were glowing and how many are glowing now. Denis broke exactly\n\n    k\n segments and he knows which sticks are working now. Denis came up with\nthe question: what is the maximum possible number that can appear on the board\nif you turn on exactly \n    k\n sticks (which are off now)? It is allowed that\nthe number includes leading zeros. Input The first line contains integer\n\n    n\n \n    (1 \n    \u2264 n \n    \u2264 2000)\n \u2014 the number of digits on scoreboard\nand \n    k\n \n    (0 \n    \u2264 k \n    \u2264 2000)\n \u2014 the number of segments that\nstopped working. The next \n    n\n lines contain one binary string of length\n\n    7\n, the \n    i\n-th of which encodes the \n    i\n-th digit of the\nscoreboard. Each digit on the scoreboard consists of \n    7\n segments. We\nnumber them, as in the picture below, and let the \n    i\n-th place of the\nbinary string be \n    0\n if the \n    i\n-th stick is not glowing and \n    1\n if\nit is glowing. Then a binary string of length \n    7\n will specify which\nsegments are glowing now. Thus, the sequences \"1110111\", \"0010010\", \"1011101\",\n\"1011011\", \"0111010\", \"1101011\", \"1101111\", \"1010010\", \"1111111\", \"1111011\"\nencode in sequence all digits from \n    0\n to \n    9\n inclusive. Output Output\na single number consisting of \n    n\n digits \u2014 the maximum number that can be\nobtained if you turn on exactly \n    k\n sticks or \n    -1\n, if it is\nimpossible to turn on exactly \n    k\n sticks so that a correct number appears\non the scoreboard digits. Examples Input 1 7 0000000 Output 8 Input 2 5\n0010010 0010010 Output 97 Input 3 5 0100001 1001001 1010011 Output -1 Note In\nthe first test, we are obliged to include all \n    7\n sticks and get one\n\n    8\n digit on the scoreboard. In the second test, we have sticks turned on\nso that units are formed. For \n    5\n of additionally included sticks, you can\nget the numbers \n    07\n, \n    18\n, \n    34\n, \n    43\n, \n    70\n, \n    79\n,\n\n    81\n and \n    97\n, of which we choose the maximum \u2014 \n    97\n. In the third\ntest, it is impossible to turn on exactly \n    5\n sticks so that a sequence of\nnumbers appears on the scoreboard.\n\n",
        "cf_contest_id": 1340,
        "cf_index": "B",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "dp",
            "graphs",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1 7\r\n0000000\r\n",
                "8"
            ],
            [
                "2 5\r\n0010010\r\n0010010\r\n",
                "97"
            ],
            [
                "3 5\r\n0100001\r\n1001001\r\n1010011\r\n",
                "-1"
            ]
        ],
        "private_cases": [
            [
                "10 0\r\n0111010\r\n1101111\r\n1111011\r\n0111010\r\n1101011\r\n1101011\r\n1110111\r\n1010010\r\n1111111\r\n0010010\r\n",
                "4694550781"
            ],
            [
                "10 10\r\n0101111\r\n0000000\r\n1111011\r\n1011011\r\n1011011\r\n1111011\r\n0010010\r\n1010010\r\n1101111\r\n0000000\r\n",
                "8993391761"
            ],
            [
                "10 10\r\n1100011\r\n1010011\r\n0000111\r\n1110110\r\n0101011\r\n0111111\r\n1001111\r\n1000000\r\n1111011\r\n0111000\r\n",
                "-1"
            ],
            [
                "10 10\r\n1101001\r\n0110000\r\n0111010\r\n0010000\r\n1010000\r\n0111000\r\n1011011\r\n1010010\r\n1101011\r\n1111110\r\n",
                "9941743758"
            ],
            [
                "10 6\r\n1101011\r\n1101111\r\n1010000\r\n1110111\r\n1101110\r\n1100111\r\n1110011\r\n1011101\r\n0111010\r\n1010010\r\n",
                "9870669247"
            ],
            [
                "10 10\r\n0000000\r\n0100000\r\n0000000\r\n0010000\r\n0000000\r\n0000001\r\n0000000\r\n0001000\r\n0000001\r\n0101000\r\n",
                "-1"
            ],
            [
                "10 10\r\n1110111\r\n0111111\r\n1111111\r\n1111111\r\n0111111\r\n1111111\r\n0111111\r\n1111110\r\n1111111\r\n1111111\r\n",
                "-1"
            ],
            [
                "1 1\r\n1010010\r\n",
                "-1"
            ],
            [
                "1 2\r\n0010010\r\n",
                "4"
            ],
            [
                "3 8\r\n0111010\r\n1011011\r\n1011101\r\n",
                "-1"
            ],
            [
                "1 1\r\n0110111\r\n",
                "0"
            ],
            [
                "3 7\r\n1100001\r\n1101111\r\n1000000\r\n",
                "965"
            ],
            [
                "5 12\r\n0100111\r\n1001111\r\n1100111\r\n1010110\r\n0110010\r\n",
                "88809"
            ],
            [
                "6 17\r\n1101111\r\n0111000\r\n0000011\r\n1000011\r\n0100110\r\n0011101\r\n",
                "899968"
            ],
            [
                "2 2\r\n1101011\r\n1011101\r\n",
                "82"
            ],
            [
                "3 7\r\n0111001\r\n1010011\r\n1000000\r\n",
                "987"
            ],
            [
                "6 16\r\n1011111\r\n0000100\r\n0110000\r\n1001111\r\n0111111\r\n0111000\r\n",
                "889689"
            ],
            [
                "2 7\r\n0010010\r\n1000000\r\n",
                "87"
            ],
            [
                "2 1\r\n1111011\r\n1010010\r\n",
                "87"
            ],
            [
                "3 2\r\n1111111\r\n1110111\r\n1011101\r\n",
                "808"
            ],
            [
                "3 4\r\n1110111\r\n1011101\r\n1011101\r\n",
                "088"
            ],
            [
                "2 2\r\n1110111\r\n1011101\r\n",
                "08"
            ],
            [
                "4 4\r\n1101011\r\n0111010\r\n0111010\r\n0111010\r\n",
                "9844"
            ]
        ]
    }
]