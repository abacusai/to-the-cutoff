[
    {
        "name": "Narrow Components",
        "description": "You are given a matrix \n    a\n, consisting of \n    3\n rows and \n    n\n\ncolumns. Each cell of the matrix is either free or taken. A free cell \n    y\n\nis reachable from a free cell \n    x\n if at least one of these conditions\nhold: \n    x\n and \n    y\n share a side; there exists a free cell \n    z\n such\nthat \n    z\n is reachable from \n    x\n and \n    y\n is reachable from \n    z\n.\nA connected component is a set of free cells of the matrix such that all cells\nin it are reachable from one another, but adding any other free cell to the\nset violates this rule. You are asked \n    q\n queries about the matrix. Each\nquery is the following: \n    l\n \n    r\n \u2014 count the number of connected\ncomponents of the matrix, consisting of columns from \n    l\n to \n    r\n of the\nmatrix \n    a\n, inclusive. Print the answers to all queries. Input The first\nline contains an integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 5 \n    \u00b7 10^5\n) \u2014 the\nnumber of columns of matrix \n    a\n. The \n    i\n-th of the next three lines\ncontains a description of the \n    i\n-th row of the matrix \n    a\n \u2014 a string,\nconsisting of \n    n\n characters. Each character is either \n    1\n (denoting a\nfree cell) or \n    0\n (denoting a taken cell). The next line contains an\ninteger \n    q\n (\n    1 \n    \u2264 q \n    \u2264 3 \n    \u00b7 10^5\n) \u2014 the number of\nqueries. The \n    j\n-th of the next \n    q\n lines contains two integers\n\n    l_j\n and \n    r_j\n (\n    1 \n    \u2264 l_j \n    \u2264 r_j \n    \u2264 n\n) \u2014 the\ndescription of the \n    j\n-th query. Output Print \n    q\n integers \u2014 the\n\n    j\n-th value should be equal to the number of the connected components of\nthe matrix, consisting of columns from \n    l_j\n to \n    r_j\n of the matrix\n\n    a\n, inclusive. Example Input 12 100101011101 110110010110 010001011101 8\n1 12 1 1 1 2 9 9 8 11 9 12 11 12 4 6 Output 7 1 1 2 1 3 3 3\n\n",
        "cf_contest_id": 1661,
        "cf_index": "E",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "dp",
            "dsu",
            "math",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "12\r\n100101011101\r\n110110010110\r\n010001011101\r\n8\r\n1 12\r\n1 1\r\n1 2\r\n9 9\r\n8 11\r\n9 12\r\n11 12\r\n4 6\r\n",
                "7\r\n1\r\n1\r\n2\r\n1\r\n3\r\n3\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n00000\r\n01100\r\n01000\r\n5\r\n1 5\r\n2 2\r\n1 5\r\n1 3\r\n3 4\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "10\r\n0111010101\r\n1011001010\r\n1011000110\r\n10\r\n2 9\r\n4 9\r\n5 6\r\n8 9\r\n7 9\r\n1 2\r\n1 6\r\n2 3\r\n3 9\r\n10 10\r\n",
                "5\r\n5\r\n1\r\n2\r\n3\r\n2\r\n3\r\n1\r\n5\r\n1\r\n"
            ],
            [
                "30\r\n110101011101011101000110111000\r\n110011111001100101111001011110\r\n111011011100001010001110000110\r\n30\r\n11 21\r\n5 29\r\n18 19\r\n1 26\r\n9 26\r\n17 30\r\n4 21\r\n15 17\r\n6 21\r\n14 21\r\n14 14\r\n16 19\r\n10 26\r\n18 29\r\n16 30\r\n14 15\r\n10 10\r\n9 23\r\n18 30\r\n18 29\r\n1 22\r\n14 22\r\n9 22\r\n14 15\r\n14 28\r\n27 29\r\n4 17\r\n1 26\r\n8 14\r\n12 27\r\n",
                "5\r\n9\r\n1\r\n11\r\n9\r\n5\r\n7\r\n3\r\n6\r\n4\r\n1\r\n3\r\n10\r\n4\r\n6\r\n2\r\n2\r\n7\r\n4\r\n4\r\n9\r\n5\r\n7\r\n2\r\n7\r\n1\r\n6\r\n11\r\n3\r\n8\r\n"
            ],
            [
                "1\r\n1\r\n1\r\n0\r\n1\r\n1 1\r\n",
                "1\r\n"
            ]
        ]
    }
]