[
    {
        "name": "Inversion Graph",
        "description": "You are given a permutation \n    p_1, p_2, \n    \u2026, p_n\n. Then, an undirected\ngraph is constructed in the following way: add an edge between vertices\n\n    i\n, \n    j\n such that \n    i < j\n if and only if \n    p_i > p_j\n. Your\ntask is to count the number of connected components in this graph. Two\nvertices \n    u\n and \n    v\n belong to the same connected component if and\nonly if there is at least one path along edges connecting \n    u\n and \n    v\n.\nA permutation is an array consisting of \n    n\n distinct integers from \n    1\n\nto \n    n\n in arbitrary order. For example, \n    [2,3,1,5,4]\n is a\npermutation, but \n    [1,2,2]\n is not a permutation (\n    2\n appears twice in\nthe array) and \n    [1,3,4]\n is also not a permutation (\n    n=3\n but there is\n\n    4\n in the array). Input Each test contains multiple test cases. The first\nline contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^5\n) \u2014 the\nnumber of test cases. Description of the test cases follows. The first line of\neach test case contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n)\n\u2014 the length of the permutation. The second line of each test case contains\n\n    n\n integers \n    p_1, p_2, \n    \u2026, p_n\n (\n    1 \n    \u2264 p_i \n    \u2264 n\n) \u2014\nthe elements of the permutation. It is guaranteed that the sum of \n    n\n over\nall test cases does not exceed \n    2 \n    \u00b7 10^5\n. Output For each test\ncase, print one integer \n    k\n \u2014 the number of connected components. Example\nInput 6 3 1 2 3 5 2 1 4 3 5 6 6 1 4 2 5 3 1 1 6 3 2 1 6 5 4 5 3 1 5 2 4 Output\n3 3 1 1 2 1 Note Each separate test case is depicted in the image below. The\ncolored squares represent the elements of the permutation. For one\npermutation, each color represents some connected component. The number of\ndistinct colors is the answer.\n\n",
        "cf_contest_id": 1638,
        "cf_index": "C",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dsu",
            "graphs",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n3\r\n1 2 3\r\n5\r\n2 1 4 3 5\r\n6\r\n6 1 4 2 5 3\r\n1\r\n1\r\n6\r\n3 2 1 6 5 4\r\n5\r\n3 1 5 2 4\r\n",
                "3\r\n3\r\n1\r\n1\r\n2\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]