[
    {
        "name": "Cowslip Collections",
        "description": "In an attempt to make peace with the Mischievious Mess Makers, Bessie and\nFarmer John are planning to plant some flower gardens to complement the lush,\ngrassy fields of Bovinia. As any good horticulturist knows, each garden they\nplant must have the exact same arrangement of flowers. Initially, Farmer John\nhas n different species of flowers he can plant, with ai flowers of the i-th\nspecies. On each of the next q days, Farmer John will receive a batch of\nflowers of a new species. On day j, he will receive cj flowers of the same\nspecies, but of a different species from those Farmer John already has. Farmer\nJohn, knowing the right balance between extravagance and minimalism, wants\nexactly k species of flowers to be used. Furthermore, to reduce waste, each\nflower of the k species Farmer John chooses must be planted in some garden.\nAnd each of the gardens must be identical; that is to say that each of the k\nchosen species should have an equal number of flowers in each garden. As\nFarmer John is a proponent of national equality, he would like to create the\ngreatest number of gardens possible. After receiving flowers on each of these\nq days, Farmer John would like to know the sum, over all possible choices of k\nspecies, of the maximum number of gardens he could create. Since this could be\na large number, you should output your result modulo 10^9 + 7. Input The first\nline of the input contains three integers n, k and q (1 \u2264 k \u2264 n \u2264 100 000, 1 \u2264\nq \u2264 100 000). The i-th (1 \u2264 i \u2264 n) of the next n lines of the input contains\nan integer ai (1 \u2264 ai \u2264 1 000 000), the number of flowers of species i Farmer\nJohn has initially. The j-th (1 \u2264 j \u2264 q) of the next q lines of the input\ncontains an integer cj (1 \u2264 cj \u2264 1 000 000), the number of flowers of a new\nspecies Farmer John receives on day j. Output After each of the q days, output\nthe sum of the maximum possible number of gardens, where the sum is taken over\nall possible choices of k species, modulo 10^9 + 7. Examples Input 3 3 2 4 6 9\n8 6 Output 5 16 Input 4 1 2 6 5 4 3 2 1 Output 20 21 Note In the first sample\ncase, after the first day Farmer John has (4, 6, 9, 8) of each type of flower,\nand k = 3. Choosing (4, 6, 8) lets him make 2 gardens, each with (2, 3, 4) of\neach flower, respectively. Choosing (4, 6, 9), (4, 9, 8) and (6, 9, 8) each\nonly let him make one garden, since there is no number of gardens that each\nspecies can be evenly split into. So the sum over all choices of k = 3 flowers\nis 2 + 1 + 1 + 1 = 5. After the second day, Farmer John has (4, 6, 9, 8, 6) of\neach flower. The sum over all choices is 1 + 2 + 2 + 1 + 1 + 2 + 2 + 3 + 1 + 1\n= 16. In the second sample case, k = 1. With x flowers Farmer John can make x\ngardens. So the answers to the queries are 6 + 5 + 4 + 3 + 2 = 20 and 6 + 5 +\n4 + 3 + 2 + 1 = 21.\n\n",
        "cf_contest_id": 645,
        "cf_index": "F",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 8.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3 3 2\r\n4\r\n6\r\n9\r\n8\r\n6\r\n",
                "5\r\n16\r\n"
            ],
            [
                "4 1 2\r\n6\r\n5\r\n4\r\n3\r\n2\r\n1\r\n",
                "20\r\n21\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 3 3\r\n6\r\n8\r\n10\r\n12\r\n14\r\n16\r\n",
                "8\r\n20\r\n42\r\n"
            ],
            [
                "1 1 1\r\n1\r\n1\r\n",
                "2\r\n"
            ],
            [
                "10 10 10\r\n10\r\n10\r\n10\r\n10\r\n10\r\n10\r\n10\r\n10\r\n10\r\n10\r\n10\r\n10\r\n10\r\n10\r\n10\r\n10\r\n10\r\n10\r\n10\r\n10\r\n",
                "110\r\n660\r\n2860\r\n10010\r\n30030\r\n80080\r\n194480\r\n437580\r\n923780\r\n1847560\r\n"
            ],
            [
                "7 1 9\r\n3\r\n6\r\n7\r\n2\r\n10\r\n8\r\n1\r\n3\r\n9\r\n2\r\n9\r\n10\r\n2\r\n4\r\n5\r\n2\r\n",
                "40\r\n49\r\n51\r\n60\r\n70\r\n72\r\n76\r\n81\r\n83\r\n"
            ],
            [
                "5 1 7\r\n10\r\n8\r\n4\r\n5\r\n8\r\n3\r\n9\r\n3\r\n9\r\n3\r\n10\r\n1\r\n",
                "38\r\n47\r\n50\r\n59\r\n62\r\n72\r\n73\r\n"
            ],
            [
                "7 2 8\r\n2\r\n5\r\n7\r\n9\r\n6\r\n2\r\n5\r\n2\r\n8\r\n7\r\n10\r\n8\r\n8\r\n5\r\n7\r\n",
                "40\r\n52\r\n67\r\n90\r\n113\r\n144\r\n169\r\n195\r\n"
            ],
            [
                "9 8 10\r\n10\r\n9\r\n6\r\n8\r\n8\r\n8\r\n8\r\n6\r\n2\r\n7\r\n1\r\n9\r\n5\r\n10\r\n8\r\n1\r\n1\r\n6\r\n10\r\n",
                "46\r\n166\r\n496\r\n1288\r\n3012\r\n6480\r\n12915\r\n24355\r\n43923\r\n76077\r\n"
            ]
        ]
    }
]