[
    {
        "name": "Vasya and Chess",
        "description": "Vasya decided to learn to play chess. Classic chess doesn't seem interesting\nto him, so he plays his own sort of chess. The queen is the piece that\ncaptures all squares on its vertical, horizontal and diagonal lines. If the\ncell is located on the same vertical, horizontal or diagonal line with queen,\nand the cell contains a piece of the enemy color, the queen is able to move to\nthis square. After that the enemy's piece is removed from the board. The queen\ncannot move to a cell containing an enemy piece if there is some other piece\nbetween it and the queen. There is an n \u00d7 n chessboard. We'll denote a cell on\nthe intersection of the r-th row and c-th column as (r, c). The square (1, 1)\ncontains the white queen and the square (1, n) contains the black queen. All\nother squares contain green pawns that don't belong to anyone. The players\nmove in turns. The player that moves first plays for the white queen, his\nopponent plays for the black queen. On each move the player has to capture\nsome piece with his queen (that is, move to a square that contains either a\ngreen pawn or the enemy queen). The player loses if either he cannot capture\nany piece during his move or the opponent took his queen during the previous\nmove. Help Vasya determine who wins if both players play with an optimal\nstrategy on the board n \u00d7 n. Input The input contains a single number n (2 \u2264 n\n\u2264 10^9) \u2014 the size of the board. Output On the first line print the answer to\nproblem \u2014 string \"white\" or string \"black\", depending on who wins if the both\nplayers play optimally. If the answer is \"white\", then you should also print\ntwo integers r and c representing the cell (r, c), where the first player\nshould make his first move to win. If there are multiple such cells, print the\none with the minimum r. If there are still multiple squares, print the one\nwith the minimum c. Examples Input 2 Output white 1 2 Input 3 Output black\nNote In the first sample test the white queen can capture the black queen at\nthe first move, so the white player wins. In the second test from the\nstatement if the white queen captures the green pawn located on the central\nvertical line, then it will be captured by the black queen during the next\nmove. So the only move for the white player is to capture the green pawn\nlocated at (2, 1). Similarly, the black queen doesn't have any other options\nbut to capture the green pawn located at (2, 3), otherwise if it goes to the\nmiddle vertical line, it will be captured by the white queen. During the next\nmove the same thing happens \u2014 neither the white, nor the black queen has other\noptions rather than to capture green pawns situated above them. Thus, the\nwhite queen ends up on square (3, 1), and the black queen ends up on square\n(3, 3). In this situation the white queen has to capture any of the green\npawns located on the middle vertical line, after that it will be captured by\nthe black queen. Thus, the player who plays for the black queen wins.\n\n",
        "cf_contest_id": 493,
        "cf_index": "D",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "games",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n",
                "white 1 2\r\n"
            ],
            [
                "3\r\n",
                "black\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n",
                "white 1 2\r\n"
            ],
            [
                "6\r\n",
                "white 1 2\r\n"
            ],
            [
                "10\r\n",
                "white 1 2\r\n"
            ],
            [
                "16\r\n",
                "white 1 2\r\n"
            ],
            [
                "100\r\n",
                "white 1 2\r\n"
            ],
            [
                "10006\r\n",
                "white 1 2\r\n"
            ],
            [
                "99966246\r\n",
                "white 1 2\r\n"
            ],
            [
                "1000000000\r\n",
                "white 1 2\r\n"
            ],
            [
                "999999999\r\n",
                "black\r\n"
            ],
            [
                "999999997\r\n",
                "black\r\n"
            ],
            [
                "900001\r\n",
                "black\r\n"
            ],
            [
                "775681\r\n",
                "black\r\n"
            ],
            [
                "666666\r\n",
                "white 1 2\r\n"
            ],
            [
                "12345\r\n",
                "black\r\n"
            ],
            [
                "111111\r\n",
                "black\r\n"
            ],
            [
                "346367\r\n",
                "black\r\n"
            ],
            [
                "13\r\n",
                "black\r\n"
            ],
            [
                "11\r\n",
                "black\r\n"
            ],
            [
                "9\r\n",
                "black\r\n"
            ],
            [
                "7\r\n",
                "black\r\n"
            ],
            [
                "5\r\n",
                "black\r\n"
            ],
            [
                "19\r\n",
                "black\r\n"
            ],
            [
                "939698497\r\n",
                "black\r\n"
            ],
            [
                "999999996\r\n",
                "white 1 2\r\n"
            ]
        ]
    }
]