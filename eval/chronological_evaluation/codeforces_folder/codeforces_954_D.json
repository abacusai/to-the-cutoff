[
    {
        "name": "Fight Against Traffic",
        "description": "Little town Nsk consists of n junctions connected by m bidirectional roads.\nEach road connects two distinct junctions and no two roads connect the same\npair of junctions. It is possible to get from any junction to any other\njunction by these roads. The distance between two junctions is equal to the\nminimum possible number of roads on a path between them. In order to improve\nthe transportation system, the city council asks mayor to build one new road.\nThe problem is that the mayor has just bought a wonderful new car and he\nreally enjoys a ride from his home, located near junction s to work located\nnear junction t. Thus, he wants to build a new road in such a way that the\ndistance between these two junctions won't decrease. You are assigned a task\nto compute the number of pairs of junctions that are not connected by the\nroad, such that if the new road between these two junctions is built the\ndistance between s and t won't decrease. Input The firt line of the input\ncontains integers n, m, s and t (2 \u2264 n \u2264 1000, 1 \u2264 m \u2264 1000, 1 \u2264 s, t \u2264 n, s \u2260\nt) \u2014 the number of junctions and the number of roads in Nsk, as well as the\nindices of junctions where mayors home and work are located respectively. The\ni-th of the following m lines contains two integers ui and vi (1 \u2264 ui, vi \u2264 n,\nui \u2260 vi), meaning that this road connects junctions ui and vi directly. It is\nguaranteed that there is a path between any two junctions and no two roads\nconnect the same pair of junctions. Output Print one integer \u2014 the number of\npairs of junctions not connected by a direct road, such that building a road\nbetween these two junctions won't decrease the distance between junctions s\nand t. Examples Input 5 4 1 5 1 2 2 3 3 4 4 5 Output 0 Input 5 4 3 5 1 2 2 3 3\n4 4 5 Output 5 Input 5 6 1 5 1 2 1 3 1 4 4 5 3 5 2 5 Output 3\n\n",
        "cf_contest_id": 954,
        "cf_index": "D",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graphs",
            "shortest paths"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 4 1 5\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n",
                "0\r\n"
            ],
            [
                "5 4 3 5\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n",
                "5\r\n"
            ],
            [
                "5 6 1 5\r\n1 2\r\n1 3\r\n1 4\r\n4 5\r\n3 5\r\n2 5\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1 2 1\r\n1 2\r\n",
                "0\r\n"
            ],
            [
                "3 2 2 3\r\n1 2\r\n2 3\r\n",
                "1\r\n"
            ],
            [
                "3 2 1 3\r\n1 2\r\n2 3\r\n",
                "0\r\n"
            ],
            [
                "3 3 2 3\r\n1 2\r\n2 3\r\n1 3\r\n",
                "0\r\n"
            ]
        ]
    }
]