[
    {
        "name": "Divan and bitwise operations",
        "description": "Once Divan analyzed a sequence \n    a_1, a_2, \n    \u2026, a_n\n consisting of\n\n    n\n non-negative integers as follows. He considered each non-empty\nsubsequence of the sequence \n    a\n, computed the bitwise XOR of its elements\nand added up all the XORs, obtaining the coziness of the sequence \n    a\n. A\nsequence \n    c\n is a subsequence of a sequence \n    d\n if \n    c\n can be\nobtained from \n    d\n by deletion of several (possibly, zero or all) elements.\nFor example, \n    [1, \n      2, \n      3, \n      4]\n, \n    [2, \n      4]\n, and\n\n    [2]\n are subsequences of \n    [1, \n      2, \n      3, \n      4]\n, but \n    [4,\n    \n      3]\n and \n    [0]\n are not. Divan was very proud of his analysis, but\nnow he lost the sequence \n    a\n, and also the coziness value! However, Divan\nremembers the value of bitwise OR on \n    m\n contiguous subsegments of the\nsequence \n    a\n. It turns out that each element of the original sequence is\ncontained in at least one of these \n    m\n segments. Divan asks you to help\nfind the coziness of the sequence \n    a\n using the information he remembers.\nIf several coziness values are possible, print any. As the result can be very\nlarge, print the value modulo \n    10^9 + 7\n. Input The first line contains\none integer number \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^3\n) \u2014 the number of test\ncases. The first line of each test case contains two integer numbers \n    n\n\nand \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the length of the\nsequence and the number of contiguous segments whose bitwise OR values Divan\nremembers, respectively. The following \n    m\n lines describe the segments,\none per line. Each segment is described with three integers \n    l\n, \n    r\n,\nand \n    x\n (\n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 n\n, \n    0 \n    \u2264 x \n    \u2264 2^30 -\n    1\n) \u2014 the first and last elements of the segment and the bitwise OR of\n\n    a_l, a_l + 1, \n    \u2026, a_r\n, respectively. It is guaranteed that each\nelement of the sequence is contained in at least one of the segments. It is\nguaranteed that there exists a sequence that satisfies all constraints. It is\nguaranteed that the sum of \n    n\n and the sum of \n    m\n over all test cases\ndo not exceed \n    2 \n    \u00b7 10^5\n. Output For each test case print the\ncoziness any suitable sequence \n    a\n modulo \n    10^9 + 7\n. Example Input 3\n2 1 1 2 2 3 2 1 3 5 2 3 5 5 4 1 2 7 3 3 7 4 4 0 4 5 2 Output 4 20 112 Note In\nfirst example, one of the sequences that fits the constraints is \n    [0, 2]\n.\nConsider all its non-empty subsequences: \n    [0]\n: the bitwise XOR of this\nsubsequence is \n    0\n; \n    [2]\n: the bitwise XOR of this subsequence is\n\n    2\n; \n    [0, 2]\n: the bitwise XOR of this subsequence is \n    2\n. The sum\nof all results is \n    4\n, so it is the answer. In second example, one of the\nsequences that fits the constraints is \n    [0, \n      5, \n      5]\n. In third\nexample, one of the sequences that fits the constraints is \n    [5, \n      6, \n     \n    7, \n      0, \n      2]\n.\n\n",
        "cf_contest_id": 1614,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "combinatorics",
            "constructive algorithms",
            "dp",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2 1\r\n1 2 2\r\n3 2\r\n1 3 5\r\n2 3 5\r\n5 4\r\n1 2 7\r\n3 3 7\r\n4 4 0\r\n4 5 2\r\n",
                "4\r\n20\r\n112\r\n"
            ]
        ],
        "private_cases": []
    }
]