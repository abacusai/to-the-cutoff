[
    {
        "name": "Fancy Fence",
        "description": "Everybody knows that Bal\u00e1zs has the fanciest fence in the whole town. It's\nbuilt up from \n    N\n fancy sections. The sections are rectangles standing\nclosely next to each other on the ground. The \n    i\nth section has integer\nheight \n    h_i\n and integer width \n    w_i\n. We are looking for fancy\nrectangles on this fancy fence. A rectangle is fancy if: its sides are either\nhorizontal or vertical and have integer lengths the distance between the\nrectangle and the ground is integer the distance between the rectangle and the\nleft side of the first section is integer it's lying completely on sections\nWhat is the number of fancy rectangles? This number can be very big, so we are\ninterested in it modulo \n    10^9+7\n. Input The first line contains \n    N\n\n(\n    1\n    \u2264 N \n    \u2264 10^5\n) \u2013 the number of sections. The second line\ncontains \n    N\n space-separated integers, the \n    i\nth number is \n    h_i\n\n(\n    1 \n    \u2264 h_i \n    \u2264 10^9\n). The third line contains \n    N\n space-\nseparated integers, the \n    i\nth number is \n    w_i\n (\n    1 \n    \u2264 w_i \n    \u2264\n    10^9\n). Output You should print a single integer, the number of fancy\nrectangles modulo \n    10^9+7\n. So the output range is \n    0,1,2,\n    \u2026,\n    10^9+6\n. Scoring \n    [                          ;                          ;                   Subtask                          ;                    Points                          ;               Constraints; ; ;                          ;                         1                         0                          ;                    sample; ; ;                          ;                         2                        12                         N;                      \u2264 50;                          ;                       and;                       h_i;                      \u2264 50;                          ;                       and;                   w_i = 1;                          ;                   for all;                         i; ; ;                          ;                         3                        13                   h_i = 1;                          ;                        or;                   h_i = 2;                          ;                   for all;                         i; ; ;                          ;                         4                        15                          ;                       all;                       h_i;                          ;                 are equal; ; ;                          ;                         5                        15                       h_i;                   \u2264 h_i+1;                          ;                   for all;                         i;                     \u2264 N-1; ; ;                          ;                         6                        18                         N;                    \u2264\n    1000; ; ;                          ;                         7                        27                          ; no additional constraints; ; ;                          ;                          ;  ]\n Example Input 2 1 2 1 2 Output 12 Note The fence\nlooks like this: There are 5 fancy rectangles of shape: There are 3 fancy\nrectangles of shape: There is 1 fancy rectangle of shape: There are 2 fancy\nrectangles of shape: There is 1 fancy rectangle of shape:\n\n",
        "cf_contest_id": 1402,
        "cf_index": "A",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "data structures",
            "dsu",
            "implementation",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [],
        "private_cases": []
    }
]