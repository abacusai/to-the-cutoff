[
    {
        "name": "Sereja and Brackets",
        "description": "Sereja has a bracket sequence s1, s2, ..., sn, or, in other words, a string s\nof length n, consisting of characters \"(\" and \")\". Sereja needs to answer m\nqueries, each of them is described by two integers li, ri (1 \u2264 li \u2264 ri \u2264 n).\nThe answer to the i-th query is the length of the maximum correct bracket\nsubsequence of sequence sli, sli + 1, ..., sri. Help Sereja answer all\nqueries. You can find the definitions for a subsequence and a correct bracket\nsequence in the notes. Input The first line contains a sequence of characters\ns1, s2, ..., sn (1 \u2264 n \u2264 10^6) without any spaces. Each character is either a\n\"(\" or a \")\". The second line contains integer m (1 \u2264 m \u2264 10^5) \u2014 the number\nof queries. Each of the next m lines contains a pair of integers. The i-th\nline contains integers li, ri (1 \u2264 li \u2264 ri \u2264 n) \u2014 the description of the i-th\nquery. Output Print the answer to each question on a single line. Print the\nanswers in the order they go in the input. Examples Input ())(())(())( 7 1 1 2\n3 1 2 1 12 8 12 5 11 2 10 Output 0 0 2 10 4 6 6 Note A subsequence of length\n|x| of string s = s1s2... s|s| (where |s| is the length of string s) is string\nx = sk1sk2... sk|x| (1 \u2264 k1 < k2 < ... < k|x| \u2264 |s|). A correct bracket\nsequence is a bracket sequence that can be transformed into a correct\naryphmetic expression by inserting characters \"1\" and \"+\" between the\ncharacters of the string. For example, bracket sequences \"()()\", \"(())\" are\ncorrect (the resulting expressions \"(1)+(1)\", \"((1+1)+1)\"), and \")(\" and \"(\"\nare not. For the third query required sequence will be \u00ab()\u00bb. For the fourth\nquery required sequence will be \u00ab()(())(())\u00bb.\n\n",
        "cf_contest_id": 380,
        "cf_index": "C",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "schedules"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "())(())(())(\r\n7\r\n1 1\r\n2 3\r\n1 2\r\n1 12\r\n8 12\r\n5 11\r\n2 10\r\n",
                "0\r\n0\r\n2\r\n10\r\n4\r\n6\r\n6\r\n"
            ]
        ],
        "private_cases": [
            [
                "(((((()((((((((((()((()(((((\r\n1\r\n8 15\r\n",
                "0\r\n"
            ],
            [
                "((()((())(((((((((()(()(()(((((((((((((((()(()((((((((((((((()(((((((((((((((((((()(((\r\n39\r\n28 56\r\n39 46\r\n57 63\r\n29 48\r\n51 75\r\n14 72\r\n5 70\r\n51 73\r\n10 64\r\n31 56\r\n50 54\r\n15 78\r\n78 82\r\n1 11\r\n1 70\r\n1 19\r\n10 22\r\n13 36\r\n3 10\r\n34 40\r\n51 76\r\n64 71\r\n36 75\r\n24 71\r\n1 63\r\n5 14\r\n46 67\r\n32 56\r\n39 43\r\n43 56\r\n61 82\r\n2 78\r\n1 21\r\n10 72\r\n49 79\r\n12 14\r\n53 79\r\n15 31\r\n7 47\r\n",
                "4\r\n4\r\n2\r\n4\r\n2\r\n12\r\n16\r\n2\r\n12\r\n4\r\n0\r\n12\r\n0\r\n6\r\n18\r\n6\r\n2\r\n6\r\n6\r\n0\r\n2\r\n0\r\n6\r\n8\r\n18\r\n4\r\n2\r\n4\r\n2\r\n2\r\n2\r\n18\r\n8\r\n12\r\n2\r\n0\r\n2\r\n6\r\n12\r\n"
            ],
            [
                "))(()))))())())))))())((()()))))()))))))))))))\r\n9\r\n26 42\r\n21 22\r\n6 22\r\n7 26\r\n43 46\r\n25 27\r\n32 39\r\n22 40\r\n2 45\r\n",
                "4\r\n0\r\n6\r\n8\r\n0\r\n2\r\n2\r\n10\r\n20\r\n"
            ],
            [
                "(()((((()(())((((((((()((((((()((((\r\n71\r\n15 29\r\n17 18\r\n5 26\r\n7 10\r\n16 31\r\n26 35\r\n2 30\r\n16 24\r\n2 24\r\n7 12\r\n15 18\r\n12 13\r\n25 30\r\n1 30\r\n12 13\r\n16 20\r\n6 35\r\n20 28\r\n18 23\r\n9 31\r\n12 35\r\n14 17\r\n8 16\r\n3 10\r\n12 33\r\n7 19\r\n2 33\r\n7 17\r\n21 27\r\n10 30\r\n29 32\r\n9 28\r\n18 32\r\n28 31\r\n31 33\r\n4 26\r\n15 27\r\n10 17\r\n8 14\r\n11 28\r\n8 23\r\n17 33\r\n4 14\r\n3 6\r\n6 34\r\n19 23\r\n4 21\r\n16 27\r\n14 27\r\n6 19\r\n31 32\r\n29 32\r\n9 17\r\n1 21\r\n2 31\r\n18 29\r\n16 26\r\n15 18\r\n4 5\r\n13 20\r\n9 28\r\n18 30\r\n1 32\r\n2 9\r\n16 24\r\n1 20\r\n4 15\r\n16 23\r\n19 34\r\n5 22\r\n5 23\r\n",
                "2\r\n0\r\n8\r\n2\r\n4\r\n2\r\n10\r\n2\r\n10\r\n4\r\n0\r\n0\r\n0\r\n10\r\n0\r\n0\r\n10\r\n2\r\n2\r\n8\r\n4\r\n0\r\n6\r\n2\r\n4\r\n6\r\n12\r\n6\r\n2\r\n6\r\n2\r\n6\r\n4\r\n2\r\n0\r\n8\r\n2\r\n4\r\n6\r\n4\r\n8\r\n4\r\n6\r\n0\r\n10\r\n2\r\n6\r\n2\r\n2\r\n6\r\n0\r\n2\r\n4\r\n8\r\n12\r\n2\r\n2\r\n0\r\n0\r\n0\r\n6\r\n2\r\n12\r\n4\r\n2\r\n8\r\n6\r\n2\r\n4\r\n6\r\n8\r\n"
            ],
            [
                "(((())((((()()((((((()((()(((((((((((()((\r\n6\r\n20 37\r\n28 32\r\n12 18\r\n7 25\r\n21 33\r\n4 5\r\n",
                "4\r\n0\r\n2\r\n6\r\n4\r\n2\r\n"
            ],
            [
                "(((()((((()()()(()))((((()(((()))()((((()))()((())\r\n24\r\n37 41\r\n13 38\r\n31 34\r\n14 16\r\n29 29\r\n12 46\r\n1 26\r\n15 34\r\n8 47\r\n11 23\r\n6 32\r\n2 22\r\n9 27\r\n17 40\r\n6 15\r\n4 49\r\n12 33\r\n3 48\r\n22 47\r\n19 48\r\n10 27\r\n23 25\r\n4 44\r\n27 48\r\n",
                "2\r\n16\r\n0\r\n2\r\n0\r\n26\r\n16\r\n12\r\n30\r\n8\r\n18\r\n14\r\n14\r\n12\r\n6\r\n34\r\n16\r\n32\r\n18\r\n18\r\n12\r\n0\r\n30\r\n16\r\n"
            ],
            [
                ")()((((((((((((((((()(((()()(()((((((()(((((((()()))((((())(((((((((()(((((((((\r\n51\r\n29 53\r\n31 69\r\n54 59\r\n3 52\r\n26 46\r\n14 62\r\n6 54\r\n39 56\r\n17 27\r\n46 74\r\n60 72\r\n18 26\r\n38 46\r\n4 27\r\n22 52\r\n44 49\r\n42 77\r\n2 20\r\n39 57\r\n61 70\r\n33 54\r\n10 30\r\n67 70\r\n46 66\r\n17 77\r\n5 52\r\n33 77\r\n26 32\r\n1 72\r\n40 78\r\n38 68\r\n19 47\r\n30 53\r\n19 29\r\n52 71\r\n1 11\r\n22 53\r\n17 42\r\n2 51\r\n4 12\r\n24 76\r\n22 34\r\n21 69\r\n11 69\r\n36 52\r\n17 31\r\n57 58\r\n54 62\r\n23 71\r\n5 46\r\n51 53\r\n",
                "12\r\n14\r\n4\r\n18\r\n6\r\n22\r\n18\r\n8\r\n4\r\n12\r\n2\r\n4\r\n2\r\n4\r\n16\r\n2\r\n14\r\n2\r\n8\r\n2\r\n10\r\n6\r\n2\r\n10\r\n24\r\n18\r\n16\r\n4\r\n26\r\n14\r\n14\r\n10\r\n12\r\n6\r\n6\r\n2\r\n16\r\n10\r\n18\r\n0\r\n22\r\n6\r\n20\r\n22\r\n10\r\n8\r\n2\r\n4\r\n22\r\n10\r\n0\r\n"
            ],
            [
                "(\r\n1\r\n1 1\r\n",
                "0\r\n"
            ],
            [
                ")\r\n1\r\n1 1\r\n",
                "0\r\n"
            ],
            [
                "()\r\n1\r\n1 2\r\n",
                "2\r\n"
            ],
            [
                ")(\r\n1\r\n1 2\r\n",
                "0\r\n"
            ]
        ]
    }
]