[
    {
        "name": "Mathematical Expression",
        "description": "Barbara was late for her math class so as a punishment the teacher made her\nsolve the task on a sheet of paper. Barbara looked at the sheet of paper and\nonly saw \n    n\n numbers \n    a_1, a_2, \n    \u2026, a_n\n without any\nmathematical symbols. The teacher explained to Barbara that she has to place\nthe available symbols between the numbers in a way that would make the\nresulting expression's value as large as possible. To find out which symbols\nwere available the teacher has given Barbara a string \n    s\n which contained\nthat information. It's easy to notice that Barbara has to place \n    n - 1\n\nsymbols between numbers in total. The expression must start with a number and\nall symbols must be allowed (i.e. included in \n    s\n). Note that\nmultiplication takes precedence over addition or subtraction, addition and\nsubtraction have the same priority and performed from left to right. Help\nBarbara and create the required expression! Input The first line of the input\ncontains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the amount of\nnumbers on the paper. The second line of the input contains \n    n\n integers\n\n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 9\n), where \n    a_i\n is\nthe \n    i\n-th element of \n    a\n. The third line of the input contains the\nstring \n    s\n (\n    1 \n    \u2264 |s| \n    \u2264 3\n) \u2014 symbols allowed in the\nexpression. It is guaranteed that the string may only consist of symbols \"-\",\n\"+\" and \"*\". It is also guaranteed that all symbols in the string are\ndistinct. Output Print \n    n\n numbers separated by \n    n - 1\n symbols \u2014 a\nmathematical expression with the greatest result. If there are multiple\nequally valid results \u2014 output any one of them. Examples Input 3 2 2 0 +-*\nOutput 2*2-0 Input 4 2 1 1 2 +* Output 2+1+1+2 Note The following answers also\nfit the first example: \"2+2+0\", \"2+2-0\", \"2*2+0\".\n\n",
        "cf_contest_id": 1461,
        "cf_index": "F",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dp",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2 2 0\r\n+-*\r\n",
                "2*2+0\r\n"
            ],
            [
                "4\r\n2 1 1 2\r\n+*\r\n",
                "2+1+1+2\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n0 1\r\n-*\r\n",
                "0*1\r\n"
            ],
            [
                "2\r\n1 0\r\n-*\r\n",
                "1-0\r\n"
            ],
            [
                "2\r\n1 1\r\n*+\r\n",
                "1+1\r\n"
            ],
            [
                "4\r\n0 1 0 1\r\n-\r\n",
                "0-1-0-1\r\n"
            ],
            [
                "4\r\n2 1 2 1\r\n*+\r\n",
                "2+1+2+1\r\n"
            ],
            [
                "6\r\n2 1 1 3 1 1\r\n+*\r\n",
                "2+1+1+3+1+1\r\n"
            ],
            [
                "10\r\n2 1 1 2 1 2 1 2 1 2\r\n+*\r\n",
                "2*1*1*2*1*2*1*2*1*2\r\n"
            ],
            [
                "10\r\n2 1 1 2 0 2 1 2 1 2\r\n+*-\r\n",
                "2+1+1+2+0+2*1*2*1*2\r\n"
            ],
            [
                "10\r\n2 1 1 2 0 2 1 2 1 2\r\n*-\r\n",
                "2*1*1*2-0*2*1*2*1*2\r\n"
            ],
            [
                "9\r\n1 1 2 0 2 1 2 1 2\r\n+*-\r\n",
                "1+1+2+0+2*1*2*1*2\r\n"
            ],
            [
                "4\r\n2 1 1 5\r\n+*-\r\n",
                "2*1*1*5\r\n"
            ],
            [
                "37\r\n2 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 1 2\r\n+*\r\n",
                "2*1*1*1*1*1*2*1*1*1*1*1*2*1*1*1*1*1*2*1*1*1*1*1*2*1*1*1*1*1*2*1*1*1*1*1*2\r\n"
            ],
            [
                "11\r\n0 0 0 0 0 0 0 0 0 0 1\r\n-*\r\n",
                "0*0*0*0*0*0*0*0*0*0*1\r\n"
            ],
            [
                "2\r\n0 2\r\n-\r\n",
                "0-2\r\n"
            ],
            [
                "2\r\n0 0\r\n-\r\n",
                "0-0\r\n"
            ],
            [
                "2\r\n1 2\r\n-\r\n",
                "1-2\r\n"
            ],
            [
                "10\r\n0 1 1 2 0 1 2 1 0 1\r\n-\r\n",
                "0-1-1-2-0-1-2-1-0-1\r\n"
            ],
            [
                "7\r\n1 1 2 1 2 2 0\r\n-\r\n",
                "1-1-2-1-2-2-0\r\n"
            ],
            [
                "10\r\n2 0 2 0 1 2 1 0 2 2\r\n-\r\n",
                "2-0-2-0-1-2-1-0-2-2\r\n"
            ],
            [
                "10\r\n0 2 2 0 2 2 0 2 2 2\r\n-\r\n",
                "0-2-2-0-2-2-0-2-2-2\r\n"
            ],
            [
                "8\r\n2 2 2 1 1 2 1 0\r\n-\r\n",
                "2-2-2-1-1-2-1-0\r\n"
            ],
            [
                "6\r\n2 1 0 2 0 0\r\n-\r\n",
                "2-1-0-2-0-0\r\n"
            ],
            [
                "10\r\n1 2 2 0 2 0 2 0 0 1\r\n-\r\n",
                "1-2-2-0-2-0-2-0-0-1\r\n"
            ],
            [
                "8\r\n2 2 1 1 0 1 2 0\r\n+*\r\n",
                "2*2+1+1+0+1+2+0\r\n"
            ],
            [
                "8\r\n1 1 2 2 2 1 2 0\r\n+*-\r\n",
                "1+1+2*2*2*1*2+0\r\n"
            ],
            [
                "10\r\n0 2 2 2 0 0 0 2 0 0\r\n-*+\r\n",
                "0+2*2*2+0+0+0+2+0+0\r\n"
            ],
            [
                "6\r\n0 3 4 1 1 0\r\n*-\r\n",
                "0*3*4*1*1*0\r\n"
            ],
            [
                "8\r\n0 7 2 3 5 1 1 1\r\n*\r\n",
                "0*7*2*3*5*1*1*1\r\n"
            ],
            [
                "10\r\n3 5 7 1 3 1 8 4 6 6\r\n-*+\r\n",
                "3*5*7*1*3*1*8*4*6*6\r\n"
            ],
            [
                "10\r\n0 0 1 2 0 1 0 2 2 2\r\n+-*\r\n",
                "0+0+1+2+0+1+0+2*2*2\r\n"
            ],
            [
                "10\r\n0 2 1 0 1 2 0 0 2 0\r\n-*+\r\n",
                "0+2+1+0+1+2+0+0+2+0\r\n"
            ],
            [
                "10\r\n1 1 0 1 1 1 1 0 0 0\r\n*-+\r\n",
                "1+1+0+1+1+1+1+0+0+0\r\n"
            ],
            [
                "90\r\n2 1 1 0 2 0 0 1 0 1 0 0 0 2 2 0 1 2 1 1 0 2 2 0 2 1 2 2 0 2 1 2 0 2 1 2 2 2 1 1 0 0 1 2 2 1 0 2 0 2 0 0 0 1 2 2 1 1 0 1 2 2 0 1 1 0 0 2 2 0 0 0 1 2 0 1 0 1 1 1 0 0 1 0 2 0 0 2 2 2\r\n-\r\n",
                "2-1-1-0-2-0-0-1-0-1-0-0-0-2-2-0-1-2-1-1-0-2-2-0-2-1-2-2-0-2-1-2-0-2-1-2-2-2-1-1-0-0-1-2-2-1-0-2-0-2-0-0-0-1-2-2-1-1-0-1-2-2-0-1-1-0-0-2-2-0-0-0-1-2-0-1-0-1-1-1-0-0-1-0-2-0-0-2-2-2\r\n"
            ],
            [
                "58\r\n2 0 2 0 0 0 0 1 1 2 1 0 0 1 0 2 0 1 2 0 1 1 2 0 1 0 1 2 0 2 1 2 2 0 2 1 1 2 2 0 2 1 0 1 2 0 2 2 1 1 2 0 0 2 0 0 1 1\r\n-\r\n",
                "2-0-2-0-0-0-0-1-1-2-1-0-0-1-0-2-0-1-2-0-1-1-2-0-1-0-1-2-0-2-1-2-2-0-2-1-1-2-2-0-2-1-0-1-2-0-2-2-1-1-2-0-0-2-0-0-1-1\r\n"
            ],
            [
                "83\r\n2 2 2 2 1 0 2 2 0 0 2 1 1 1 1 2 2 2 0 2 2 1 2 1 0 2 2 1 2 1 2 2 2 2 2 1 0 2 2 2 2 0 1 0 1 2 0 1 2 0 2 1 0 0 2 2 2 2 1 0 1 2 1 2 1 0 1 1 1 1 1 2 0 2 0 1 1 2 2 1 2 2 2\r\n+*\r\n",
                "2*2*2*2+1+0+2*2+0+0+2*1*1*1*1*2*2*2+0+2*2*1*2+1+0+2*2*1*2*1*2*2*2*2*2+1+0+2*2*2*2+0+1+0+1+2+0+1+2+0+2+1+0+0+2*2*2*2+1+0+1+2+1+2+1+0+1+1+1+1+1+2+0+2+0+1+1+2*2*1*2*2*2\r\n"
            ],
            [
                "98\r\n1 2 1 2 0 0 2 2 1 0 1 1 2 2 2 1 2 2 1 2 2 0 1 0 1 2 1 1 2 0 2 1 0 0 2 0 1 1 2 1 2 0 1 0 0 2 0 2 2 2 2 2 1 2 2 1 1 0 2 0 2 1 2 2 2 0 0 2 0 0 0 1 2 1 1 1 1 1 0 0 2 2 1 1 1 0 0 0 0 2 2 1 0 1 1 2 1 2\r\n*-\r\n",
                "1*2*1*2-0*0*2*2*1*0*1*1*2*2*2*1*2*2*1*2*2*0*1*0*1*2*1*1*2*0*2*1*0*0*2*0*1*1*2*1*2*0*1*0*0*2*0*2*2*2*2*2*1*2*2*1*1*0*2*0*2*1*2*2*2*0*0*2*0*0*0*1*2*1*1*1*1*1*0*0*2*2*1*1*1*0*0*0*0*2*2*1*0*1*1*2*1*2\r\n"
            ],
            [
                "82\r\n0 2 2 0 0 2 1 2 2 0 1 2 2 2 2 0 1 0 0 2 2 0 2 0 1 2 2 1 0 2 0 1 1 2 0 0 0 0 1 2 0 1 0 0 1 0 1 1 2 1 2 0 1 1 2 1 2 2 1 2 0 2 1 1 1 0 1 2 2 2 1 1 1 2 1 1 2 2 2 1 0 0\r\n*+-\r\n",
                "0+2*2+0+0+2*1*2*2+0+1+2*2*2*2+0+1+0+0+2*2+0+2+0+1+2*2+1+0+2+0+1+1+2+0+0+0+0+1+2+0+1+0+0+1+0+1+1+2+1+2+0+1+1+2*1*2*2*1*2+0+2+1+1+1+0+1+2*2*2*1*1*1*2*1*1*2*2*2+1+0+0\r\n"
            ],
            [
                "100\r\n1 2 2 2 1 1 2 2 0 2 2 0 1 0 0 0 0 1 0 0 0 1 1 2 1 1 2 2 0 2 0 2 1 1 0 2 1 0 1 2 1 2 2 1 1 1 2 1 1 1 0 1 1 0 0 2 2 1 2 2 1 0 1 0 0 2 1 2 1 1 0 2 1 0 2 0 2 1 2 0 0 0 1 1 2 0 1 0 2 2 2 1 1 1 0 2 2 1 1 1\r\n*-+\r\n",
                "1+2*2*2*1*1*2*2+0+2*2+0+1+0+0+0+0+1+0+0+0+1+1+2*1*1*2*2+0+2+0+2+1+1+0+2+1+0+1+2*1*2*2*1*1*1*2+1+1+1+0+1+1+0+0+2*2*1*2*2+1+0+1+0+0+2+1+2+1+1+0+2+1+0+2+0+2+1+2+0+0+0+1+1+2+0+1+0+2*2*2+1+1+1+0+2*2+1+1+1\r\n"
            ],
            [
                "53\r\n8 8 7 8 3 5 9 6 8 9 1 9 2 4 8 5 5 9 5 0 0 2 8 9 5 9 5 7 5 4 2 4 7 2 8 0 4 7 8 0 5 7 1 7 6 9 8 8 3 6 4 9 5\r\n*+\r\n",
                "8*8*7*8*3*5*9*6*8*9*1*9*2*4*8*5*5*9*5+0+0+2*8*9*5*9*5*7*5*4*2*4*7*2*8+0+4*7*8+0+5*7*1*7*6*9*8*8*3*6*4*9*5\r\n"
            ],
            [
                "94\r\n8 3 7 2 8 7 3 2 3 5 8 1 1 6 2 5 7 9 0 4 4 5 2 2 4 4 7 8 7 7 9 0 5 5 5 9 2 0 4 4 6 3 9 7 9 1 0 0 9 1 2 4 4 8 9 8 7 1 0 1 9 7 5 8 2 0 0 5 3 6 8 7 5 0 6 6 6 9 9 9 3 5 9 6 5 4 3 2 9 1 0 7 1 8\r\n*\r\n",
                "8*3*7*2*8*7*3*2*3*5*8*1*1*6*2*5*7*9*0*4*4*5*2*2*4*4*7*8*7*7*9*0*5*5*5*9*2*0*4*4*6*3*9*7*9*1*0*0*9*1*2*4*4*8*9*8*7*1*0*1*9*7*5*8*2*0*0*5*3*6*8*7*5*0*6*6*6*9*9*9*3*5*9*6*5*4*3*2*9*1*0*7*1*8\r\n"
            ],
            [
                "100\r\n8 0 1 3 4 2 1 7 0 7 8 2 8 4 0 8 2 0 7 5 1 9 1 6 6 4 2 4 9 0 8 5 6 2 2 3 3 5 2 5 7 1 1 5 1 8 2 2 0 4 8 7 3 4 7 2 0 5 0 4 4 0 1 1 4 7 1 2 2 8 7 5 7 1 8 1 3 3 6 6 9 1 7 4 9 0 5 0 6 9 1 8 5 4 7 5 1 8 7 8\r\n*+-\r\n",
                "8+0+1+3*4*2*1*7+0+7*8*2*8*4+0+8*2+0+7*5*1*9*1*6*6*4*2*4*9+0+8*5*6*2*2*3*3*5*2*5*7*1*1*5*1*8*2*2+0+4*8*7*3*4*7*2+0+5+0+4*4+0+1+1+4*7*1*2*2*8*7*5*7*1*8*1*3*3*6*6*9*1*7*4*9+0+5+0+6*9*1*8*5*4*7*5*1*8*7*8\r\n"
            ],
            [
                "100\r\n8 1 0 5 0 7 7 3 7 3 0 8 1 5 0 3 2 3 2 3 7 7 1 4 4 7 9 8 1 2 0 7 8 4 1 2 6 7 6 6 2 3 8 4 4 8 7 6 0 2 8 6 4 4 4 3 2 9 3 2 7 3 2 8 6 4 8 0 4 9 5 8 3 8 5 0 4 7 7 2 7 0 0 6 1 6 4 7 4 1 9 4 5 5 6 3 3 5 3 8\r\n+-*\r\n",
                "8+1+0+5+0+7*7*3*7*3+0+8*1*5+0+3*2*3*2*3*7*7*1*4*4*7*9*8*1*2+0+7*8*4*1*2*6*7*6*6*2*3*8*4*4*8*7*6+0+2*8*6*4*4*4*3*2*9*3*2*7*3*2*8*6*4*8+0+4*9*5*8*3*8*5+0+4*7*7*2*7+0+0+6*1*6*4*7*4*1*9*4*5*5*6*3*3*5*3*8\r\n"
            ],
            [
                "100\r\n6 8 9 3 4 0 5 7 2 5 9 3 4 9 9 7 2 2 8 2 8 7 9 8 7 5 1 3 5 5 2 3 6 6 4 4 0 5 8 2 2 5 8 0 2 1 8 9 2 5 6 8 0 2 4 9 6 9 3 5 8 2 9 9 2 6 8 8 4 3 9 9 9 0 8 5 8 6 4 2 8 3 2 6 5 3 2 6 0 9 5 8 5 9 1 5 8 1 0 7\r\n-*+\r\n",
                "6*8*9*3*4+0+5*7*2*5*9*3*4*9*9*7*2*2*8*2*8*7*9*8*7*5*1*3*5*5*2*3*6*6*4*4+0+5*8*2*2*5*8+0+2*1*8*9*2*5*6*8+0+2*4*9*6*9*3*5*8*2*9*9*2*6*8*8*4*3*9*9*9+0+8*5*8*6*4*2*8*3*2*6*5*3*2*6+0+9*5*8*5*9*1*5*8+1+0+7\r\n"
            ]
        ]
    }
]