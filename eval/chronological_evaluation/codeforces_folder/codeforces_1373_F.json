[
    {
        "name": "Network Coverage",
        "description": "The government of Berland decided to improve network coverage in his country.\nBerland has a unique structure: the capital in the center and \n    n\n cities\nin a circle around the capital. The capital already has a good network\ncoverage (so the government ignores it), but the \n    i\n-th city contains\n\n    a_i\n households that require a connection. The government designed a plan\nto build \n    n\n network stations between all pairs of neighboring cities\nwhich will maintain connections only for these cities. In other words, the\n\n    i\n-th network station will provide service only for the \n    i\n-th and\nthe \n    (i + 1)\n-th city (the \n    n\n-th station is connected to the\n\n    n\n-th and the \n    1\n-st city). All network stations have capacities: the\n\n    i\n-th station can provide the connection to at most \n    b_i\n households.\nNow the government asks you to check can the designed stations meet the needs\nof all cities or not \u2014 that is, is it possible to assign each household a\nnetwork station so that each network station \n    i\n provides the connection\nto at most \n    b_i\n households. Input The first line contains a single\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. The\nfirst line of each test case contains the single integer \n    n\n (\n    2 \n    \u2264 n\n    \n    \u2264 10^6\n) \u2014 the number of cities and stations. The second line of each\ntest case contains \n    n\n integers (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the\nnumber of households in the \n    i\n-th city. The third line of each test case\ncontains \n    n\n integers (\n    1 \n    \u2264 b_i \n    \u2264 10^9\n) \u2014 the capacities of\nthe designed stations. It's guaranteed that the sum of \n    n\n over test cases\ndoesn't exceed \n    10^6\n. Output For each test case, print YES, if the\ndesigned stations can meet the needs of all cities, or NO otherwise (case\ninsensitive). Example Input 5 3 2 3 4 3 3 3 3 3 3 3 2 3 4 4 2 3 4 5 3 7 2 2 4\n4 5 2 3 2 3 2 7 2 1 1 10 10 Output YES YES NO YES YES Note In the first test\ncase: the first network station can provide \n    2\n connections to the first\ncity and \n    1\n connection to the second city; the second station can provide\n\n    2\n connections to the second city and \n    1\n connection to the third\ncity; the third station can provide \n    3\n connections to the third city. In\nthe second test case: the \n    1\n-st station can provide \n    2\n connections\nto the \n    1\n-st city; the \n    2\n-nd station can provide \n    3\n connections\nto the \n    2\n-nd city; the \n    3\n-rd station can provide \n    3\n connections\nto the \n    3\n-rd city and \n    1\n connection to the \n    1\n-st station. In\nthe third test case, the fourth city needs \n    5\n connections, but the third\nand the fourth station has \n    4\n connections in total.\n\n",
        "cf_contest_id": 1373,
        "cf_index": "F",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "constructive algorithms",
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3\r\n2 3 4\r\n3 3 3\r\n3\r\n3 3 3\r\n2 3 4\r\n4\r\n2 3 4 5\r\n3 7 2 2\r\n4\r\n4 5 2 3\r\n2 3 2 7\r\n2\r\n1 1\r\n10 10\r\n",
                "YES\r\nYES\r\nNO\r\nYES\r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2\r\n1 1000000000\r\n1000000000 1\r\n",
                "YES\r\n"
            ],
            [
                "3\r\n10\r\n3 3 2 3 2 5 1 2 6 3\r\n6 5 2 5 6 2 4 2 1 2\r\n20\r\n9 1 10 1 17 7 5 5 8 1 1 2 7 1 4 2 3 7 6 3\r\n2 6 3 2 37 1 5 5 2 5 1 3 21 15 1 7 7 5 1 1\r\n20\r\n9 1 9 5 5 1 3 2 6 3 6 1 2 5 11 7 3 5 14 2\r\n11 14 6 4 6 8 8 2 9 9 6 5 3 2 5 7 1 9 14 1\r\n",
                "NO\r\nNO\r\nNO\r\n"
            ],
            [
                "1\r\n5\r\n8 7 8 6 10\r\n6 4 10 4 12\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n9\r\n7 6 7 10 5 7 10 8 7\r\n5 8 6 8 6 9 10 1 13\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n2\r\n1000000000 1000000000\r\n1000000000 999999999\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n4\r\n3 3 3 3\r\n3 3 3 2\r\n",
                "NO\r\n"
            ],
            [
                "5\r\n2\r\n12 12\r\n9 9\r\n3\r\n3 3 3\r\n2 3 4\r\n4\r\n2 3 4 5\r\n3 7 2 2\r\n4\r\n4 5 2 3\r\n2 3 2 7\r\n2\r\n1 1\r\n10 10\r\n",
                "NO\r\nYES\r\nNO\r\nYES\r\nYES\r\n"
            ]
        ]
    }
]