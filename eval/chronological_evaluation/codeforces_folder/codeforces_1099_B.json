[
    {
        "name": "Squares and Segments",
        "description": "Little Sofia is in fourth grade. Today in the geometry lesson she learned\nabout segments and squares. On the way home, she decided to draw \n    n\n\nsquares in the snow with a side length of \n    1\n. For simplicity, we assume\nthat Sofia lives on a plane and can draw only segments of length \n    1\n,\nparallel to the coordinate axes, with vertices at integer points. In order to\ndraw a segment, Sofia proceeds as follows. If she wants to draw a vertical\nsegment with the coordinates of the ends \n    (x, y)\n and \n    (x, y+1)\n. Then\nSofia looks if there is already a drawn segment with the coordinates of the\nends \n    (x', y)\n and \n    (x', y+1)\n for some \n    x'\n. If such a segment\nexists, then Sofia quickly draws a new segment, using the old one as a\nguideline. If there is no such segment, then Sofia has to take a ruler and\nmeasure a new segment for a long time. Same thing happens when Sofia wants to\ndraw a horizontal segment, but only now she checks for the existence of a\nsegment with the same coordinates \n    x\n, \n    x+1\n and the differing\ncoordinate \n    y\n. For example, if Sofia needs to draw one square, she will\nhave to draw two segments using a ruler: After that, she can draw the\nremaining two segments, using the first two as a guide: If Sofia needs to draw\ntwo squares, she will have to draw three segments using a ruler: After that,\nshe can draw the remaining four segments, using the first three as a guide:\nSofia is in a hurry, so she wants to minimize the number of segments that she\nwill have to draw with a ruler without a guide. Help her find this minimum\nnumber. Input The only line of input contains a single integer \n    n\n (\n    1\n    \n    \u2264 n \n    \u2264 10^9\n), the number of squares that Sofia wants to draw.\nOutput Print single integer, the minimum number of segments that Sofia will\nhave to draw with a ruler without a guide in order to draw \n    n\n squares in\nthe manner described above. Examples Input 1 Output 2 Input 2 Output 3 Input 4\nOutput 4\n\n",
        "cf_contest_id": 1099,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "constructive algorithms",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n",
                "2\r\n"
            ],
            [
                "2\r\n",
                "3\r\n"
            ],
            [
                "4\r\n",
                "4\r\n"
            ]
        ],
        "private_cases": [
            [
                "14\r\n",
                "8\r\n"
            ],
            [
                "41\r\n",
                "13\r\n"
            ],
            [
                "51\r\n",
                "15\r\n"
            ],
            [
                "776\r\n",
                "56\r\n"
            ],
            [
                "116\r\n",
                "22\r\n"
            ],
            [
                "972\r\n",
                "63\r\n"
            ],
            [
                "3517\r\n",
                "119\r\n"
            ],
            [
                "3776\r\n",
                "123\r\n"
            ],
            [
                "4035\r\n",
                "128\r\n"
            ],
            [
                "35997\r\n",
                "380\r\n"
            ],
            [
                "61669\r\n",
                "497\r\n"
            ],
            [
                "87341\r\n",
                "592\r\n"
            ],
            [
                "398223\r\n",
                "1263\r\n"
            ],
            [
                "772168\r\n",
                "1758\r\n"
            ],
            [
                "423353776\r\n",
                "41152\r\n"
            ],
            [
                "999950884\r\n",
                "63244\r\n"
            ],
            [
                "1000000000\r\n",
                "63246\r\n"
            ],
            [
                "408636\r\n",
                "1279\r\n"
            ],
            [
                "4205340\r\n",
                "4102\r\n"
            ],
            [
                "5517158\r\n",
                "4698\r\n"
            ],
            [
                "8795795\r\n",
                "5932\r\n"
            ],
            [
                "54155304\r\n",
                "14719\r\n"
            ],
            [
                "48091000\r\n",
                "13870\r\n"
            ],
            [
                "16993944\r\n",
                "8245\r\n"
            ],
            [
                "605551861\r\n",
                "49216\r\n"
            ],
            [
                "377684528\r\n",
                "38869\r\n"
            ],
            [
                "3\r\n",
                "4\r\n"
            ],
            [
                "5\r\n",
                "5\r\n"
            ],
            [
                "6\r\n",
                "5\r\n"
            ],
            [
                "7\r\n",
                "6\r\n"
            ],
            [
                "8\r\n",
                "6\r\n"
            ],
            [
                "9\r\n",
                "6\r\n"
            ],
            [
                "10\r\n",
                "7\r\n"
            ],
            [
                "11\r\n",
                "7\r\n"
            ],
            [
                "12\r\n",
                "7\r\n"
            ],
            [
                "13\r\n",
                "8\r\n"
            ],
            [
                "14\r\n",
                "8\r\n"
            ],
            [
                "15\r\n",
                "8\r\n"
            ],
            [
                "16\r\n",
                "8\r\n"
            ],
            [
                "17\r\n",
                "9\r\n"
            ],
            [
                "18\r\n",
                "9\r\n"
            ],
            [
                "999950885\r\n",
                "63245\r\n"
            ],
            [
                "49\r\n",
                "14\r\n"
            ],
            [
                "898081025\r\n",
                "59937\r\n"
            ],
            [
                "157502501\r\n",
                "25101\r\n"
            ],
            [
                "100320256\r\n",
                "20032\r\n"
            ],
            [
                "401641681\r\n",
                "40082\r\n"
            ],
            [
                "306495050\r\n",
                "35015\r\n"
            ],
            [
                "403608101\r\n",
                "40181\r\n"
            ],
            [
                "308213136\r\n",
                "35112\r\n"
            ],
            [
                "225660486\r\n",
                "30045\r\n"
            ],
            [
                "627352211\r\n",
                "50095\r\n"
            ],
            [
                "204575811\r\n",
                "28607\r\n"
            ],
            [
                "420\r\n",
                "41\r\n"
            ],
            [
                "141\r\n",
                "24\r\n"
            ],
            [
                "21\r\n",
                "10\r\n"
            ],
            [
                "32\r\n",
                "12\r\n"
            ],
            [
                "999919262\r\n",
                "63243\r\n"
            ],
            [
                "864918\r\n",
                "1861\r\n"
            ],
            [
                "100000001\r\n",
                "20001\r\n"
            ]
        ]
    }
]