[
    {
        "name": "Nastia and a Hidden Permutation",
        "description": "This is an interactive problem! Nastia has a hidden permutation \n    p\n of\nlength \n    n\n consisting of integers from \n    1\n to \n    n\n. You, for some\nreason, want to figure out the permutation. To do that, you can give her an\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 2\n), two different indices \n    i\n and\n\n    j\n (\n    1 \n    \u2264 i, j \n    \u2264 n\n, \n    i \n    \u2260 j\n), and an integer \n    x\n\n(\n    1 \n    \u2264 x \n    \u2264 n - 1\n). Depending on \n    t\n, she will answer: \n    t =\n    1\n: \n    max(\n    min(x, p_i), \n    min(x + 1, p_j))\n; \n    t = 2\n:\n\n    min(\n    max(x, p_i), \n    max(x + 1, p_j))\n. You can ask Nastia at\nmost \n    \u230a\n    3 \n    \u00b7 n/ 2\n    \u230b + 30\n times. It is\nguaranteed that she will not change her permutation depending on your queries.\nCan you guess the permutation? Input The input consists of several test cases.\nIn the beginning, you receive the integer \n    T\n (\n    1 \n    \u2264 T \n    \u2264\n    10\n     000\n) \u2014 the number of test cases. At the beginning of each test case,\nyou receive an integer \n    n\n (\n    3 \n    \u2264 n \n    \u2264 10^4\n) \u2014 the length of\nthe permutation \n    p\n. It's guaranteed that the permutation is fixed\nbeforehand and that the sum of \n    n\n in one test doesn't exceed \n    2 \n    \u00b7\n    10^4\n. Interaction To ask a question, print \"? \n    t\n \n    i\n \n    j\n\n\n    x\n\" (\n    t = 1\n or \n    t = 2\n, \n    1 \n    \u2264 i, j \n    \u2264 n\n, \n    i \n    \u2260\n    j\n, \n    1 \n    \u2264 x \n    \u2264 n - 1\n) Then, you should read the answer. If we\nanswer with \n    \u22121\n instead of a valid answer, that means you exceeded the\nnumber of queries or made an invalid query. Exit immediately after receiving\n\n    \u22121\n and you will see the Wrong Answer verdict. Otherwise, you can get an\narbitrary verdict because your solution will continue to read from a closed\nstream. To print the answer, print \"! \n    p_1\n \n    p_2\n \n    \u2026\n\n\n    p_n\n (without quotes). Note that answering doesn't count as one of the\n\n    \u230a\n    3 \n    \u00b7 n/2\n    \u230b + 30\n queries. After\nprinting a query or printing the answer, do not forget to output end of line\nand flush the output. Otherwise, you will get Idleness limit exceeded. To do\nthis, use: fflush(stdout) or cout.flush() in C++; System.out.flush() in Java;\nflush(output) in Pascal; stdout.flush() in Python; See the documentation for\nother languages. Hacks To hack the solution, use the following test format.\nThe first line should contain a single integer \n    T\n (\n    1 \n    \u2264 T \n    \u2264\n    10\n     000\n) \u2014 the number of test cases. For each test case in the first line\nprint a single integer \n    n\n (\n    3 \n    \u2264 n \n    \u2264 10^4\n) \u2014 the length of\nthe hidden permutation \n    p\n. In the second line print \n    n\n space-\nseparated integers \n    p_1, p_2, \n    \u2026, p_n\n (\n    1 \n    \u2264 p_i \n    \u2264 n\n),\nwhere \n    p\n is permutation. Note that the sum of \n    n\n over all test cases\nshould not exceed \n    2 \n    \u00b7 10^4\n. Example Input 2 4 3 2 5 3 Output ? 2 4\n1 3 ? 1 2 4 2 ! 3 1 4 2 ? 2 3 4 2 ! 2 5 3 4 1 Note Consider the first test\ncase. The hidden permutation is \n    [3, 1, 4, 2]\n. We print: \"? \n    2\n\n\n    4\n \n    1\n \n    3\n\" and get back \n    min(\n    max(3, p_4), \n    max(4,\n    p_1)) = 3\n. We print: \"? \n    1\n \n    2\n \n    4\n \n    2\n\" and get back\n\n    max(\n    min(2, p_2), \n    min(3, p_4)) = 2\n. Consider the second\ntest case. The hidden permutation is \n    [2, 5, 3, 4, 1]\n. We print: \"?\n\n    2\n \n    3\n \n    4\n \n    2\n\" and get back \n    min(\n    max(2, p_3),\n    \n    max(3, p_4)) = 3\n.\n\n",
        "cf_contest_id": 1521,
        "cf_index": "C",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "interactive"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n4\r\n3 1 4 2\r\n5\r\n2 5 3 4 1\r\n",
                "3 1 4 2 \r\n2 5 3 4 1 \r\n"
            ]
        ],
        "private_cases": [
            [
                "6\r\n3\r\n3 1 2\r\n3\r\n2 3 1\r\n3\r\n1 3 2\r\n3\r\n1 2 3\r\n3\r\n2 1 3\r\n3\r\n3 2 1\r\n",
                "3 1 2 \r\n2 3 1 \r\n1 3 2 \r\n1 2 3 \r\n2 1 3 \r\n3 2 1 \r\n"
            ],
            [
                "24\r\n4\r\n3 2 1 4\r\n4\r\n4 2 1 3\r\n4\r\n1 2 3 4\r\n4\r\n4 3 1 2\r\n4\r\n1 3 4 2\r\n4\r\n3 1 2 4\r\n4\r\n1 3 2 4\r\n4\r\n2 1 4 3\r\n4\r\n4 2 3 1\r\n4\r\n4 1 2 3\r\n4\r\n1 2 4 3\r\n4\r\n1 4 2 3\r\n4\r\n3 4 2 1\r\n4\r\n2 4 1 3\r\n4\r\n1 4 3 2\r\n4\r\n2 4 3 1\r\n4\r\n3 1 4 2\r\n4\r\n3 2 4 1\r\n4\r\n2 3 1 4\r\n4\r\n4 3 2 1\r\n4\r\n2 1 3 4\r\n4\r\n4 1 3 2\r\n4\r\n2 3 4 1\r\n4\r\n3 4 1 2\r\n",
                "3 2 1 4 \r\n4 2 1 3 \r\n1 2 3 4 \r\n4 3 1 2 \r\n1 3 4 2 \r\n3 1 2 4 \r\n1 3 2 4 \r\n2 1 4 3 \r\n4 2 3 1 \r\n4 1 2 3 \r\n1 2 4 3 \r\n1 4 2 3 \r\n3 4 2 1 \r\n2 4 1 3 \r\n1 4 3 2 \r\n2 4 3 1 \r\n3 1 4 2 \r\n3 2 4 1 \r\n2 3 1 4 \r\n4 3 2 1 \r\n2 1 3 4 \r\n4 1 3 2 \r\n2 3 4 1 \r\n3 4 1 2 \r\n"
            ]
        ]
    }
]