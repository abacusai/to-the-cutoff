[
    {
        "name": "Lucky Arrays",
        "description": "Little Maxim loves interesting problems. He decided to share one such problem\nwith you. Initially there is an array a, consisting of n zeroes. The elements\nof the array are indexed, starting from 1. Then follow queries to change array\na. Each query is characterized by two integers vi, ti. In the answer to the\nquery we should make the vi-th array element equal ti (avi = ti; 1 \u2264 vi \u2264 n).\nMaxim thinks that some pairs of integers (x, y) are good and some are not.\nMaxim thinks that array a, consisting of n integers, is lucky, if for all\ninteger i, (1 \u2264 i \u2264 n - 1) the pair of integers (ai, ai + 1) \u2014 is good. Note\nthat the order of numbers in the pairs is important, that is, specifically,\n(1, 2) \u2260 (2, 1). After each query to change array a Maxim wants to know, how\nmany ways there are to replace all zeroes in array a with integers from one to\nthree so as to make the resulting array (without zeroes) lucky. Of course,\ndistinct zeroes can be replaced by distinct integers. Maxim told you the\nsequence of queries and all pairs of integers he considers lucky. Help Maxim,\nsolve this problem for him. Input The first line contains integers n and m (1\n\u2264 n, m \u2264 77777) \u2014 the number of elements in the array and the number of\ncommands. The next three lines contain matrix w, consisting only of zeroes and\nones; the j-th number in the i-th of these lines \u2014 wi, j. If wi, j = 1 (1 \u2264 i,\nj \u2264 3), then pair (i, j) is good, otherwise it is not good. Matrix does not\nhave to be symmetric relative to the main diagonal. Next m lines contain pairs\nof integers vi, ti (1 \u2264 vi \u2264 n, 0 \u2264 ti \u2264 3) \u2014 the queries to change the array.\nOutput Print m integers \u2014 the i-th number should equal to the number of ways\nto replace all zeroes in array a (changed after the i-th query) by integers\nfrom one to three so as to make the resulting array (without zeroes) lucky.\nSeparate the numbers by whitespaces. As the answers can be rather large, print\nthe remainder from dividing them by 777777777. Examples Input 3 10 1 1 0 1 0 0\n1 1 1 1 1 1 3 2 2 3 0 2 1 3 0 3 1 2 0 3 1 1 0 Output 3 6 1 1 2 2 1 3 3 6\n\n",
        "cf_contest_id": 256,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 10\r\n1 1 0\r\n1 0 0\r\n1 1 1\r\n1 1\r\n1 3\r\n2 2\r\n3 0\r\n2 1\r\n3 0\r\n3 1\r\n2 0\r\n3 1\r\n1 0\r\n",
                "3\r\n6\r\n1\r\n1\r\n2\r\n2\r\n1\r\n3\r\n3\r\n6\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 10\r\n0 0 0\r\n0 0 1\r\n0 0 1\r\n1 1\r\n1 0\r\n1 2\r\n1 2\r\n1 0\r\n1 3\r\n1 3\r\n1 0\r\n1 3\r\n1 3\r\n",
                "1\r\n3\r\n1\r\n1\r\n3\r\n1\r\n1\r\n3\r\n1\r\n1\r\n"
            ],
            [
                "2 10\r\n1 1 0\r\n0 1 0\r\n1 1 1\r\n1 0\r\n2 2\r\n2 3\r\n1 2\r\n1 0\r\n1 3\r\n2 1\r\n2 0\r\n2 1\r\n1 0\r\n",
                "6\r\n3\r\n1\r\n0\r\n1\r\n1\r\n1\r\n3\r\n1\r\n2\r\n"
            ],
            [
                "4 10\r\n1 0 1\r\n0 1 1\r\n1 1 1\r\n1 0\r\n4 0\r\n2 0\r\n4 0\r\n3 1\r\n1 0\r\n3 1\r\n3 3\r\n1 2\r\n1 2\r\n",
                "41\r\n41\r\n41\r\n41\r\n10\r\n10\r\n10\r\n21\r\n6\r\n6\r\n"
            ],
            [
                "5 10\r\n0 1 0\r\n0 1 1\r\n0 0 0\r\n5 0\r\n1 1\r\n4 1\r\n5 1\r\n5 3\r\n4 1\r\n5 2\r\n3 2\r\n1 0\r\n5 2\r\n",
                "4\r\n2\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "6 10\r\n1 1 0\r\n1 1 1\r\n0 1 0\r\n5 0\r\n5 3\r\n6 0\r\n3 0\r\n6 1\r\n3 1\r\n1 0\r\n4 0\r\n2 2\r\n6 2\r\n",
                "157\r\n14\r\n14\r\n14\r\n0\r\n0\r\n0\r\n0\r\n0\r\n3\r\n"
            ],
            [
                "7 10\r\n0 0 0\r\n0 1 0\r\n0 1 0\r\n4 1\r\n6 0\r\n5 3\r\n4 3\r\n4 0\r\n6 2\r\n4 2\r\n3 3\r\n1 3\r\n6 3\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "8 10\r\n1 1 0\r\n0 1 0\r\n0 1 0\r\n7 2\r\n1 2\r\n8 2\r\n4 0\r\n5 3\r\n7 0\r\n8 0\r\n6 2\r\n1 1\r\n7 0\r\n",
                "8\r\n1\r\n1\r\n1\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "9 10\r\n1 0 1\r\n0 0 1\r\n1 0 1\r\n4 3\r\n4 2\r\n4 1\r\n7 2\r\n9 3\r\n9 3\r\n3 1\r\n8 3\r\n9 3\r\n8 0\r\n",
                "320\r\n0\r\n320\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "10 10\r\n0 1 0\r\n1 0 0\r\n0 1 0\r\n10 2\r\n8 1\r\n3 3\r\n7 3\r\n9 1\r\n2 1\r\n10 1\r\n6 1\r\n9 0\r\n2 0\r\n",
                "2\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ]
        ]
    }
]