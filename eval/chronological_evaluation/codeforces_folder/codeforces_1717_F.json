[
    {
        "name": "Madoka and The First Session",
        "description": "Oh no, on the first exam Madoka got this hard problem: Given integer \n    n\n\nand \n    m\n pairs of integers (\n    v_i, u_i\n). Also there is an array \n    b_1,\n    b_2, \n    \u2026, b_n\n, initially filled with zeros. Then for each index\n\n    i\n, where \n    1 \n    \u2264 i \n    \u2264 m\n, perform either \n    b_v_i := b_v_i\n    - 1\n and \n    b_u_i := b_u_i + 1\n, or \n    b_v_i := b_v_i + 1\n and\n\n    b_u_i := b_u_i - 1\n. Note that exactly one of these operations should\nbe performed for every \n    i\n. Also there is an array \n    s\n of length\n\n    n\n consisting of \n    0\n and \n    1\n. And there is an array \n    a_1, a_2,\n    \n    \u2026, a_n\n, where it is guaranteed, that if \n    s_i = 0\n holds, then\n\n    a_i = 0\n. Help Madoka and determine whenever it is possible to perform\noperations in such way that for every \n    i\n, where \n    s_i = 1\n it holds\nthat \n    a_i = b_i\n. If it possible you should also provide Madoka with a way\nto perform operations. Input The first line contains two integers \n    n\n and\n\n    m\n (\n    2 \n    \u2264 n \n    \u2264 10000, 1 \n    \u2264 m \n    \u2264 10000\n) \u2014 the length\nof the array \n    a\n and the number of pair of integers. The second line\ncontains \n    n\n integers \n    s_1, s_2, \n    \u2026 s_n\n (\n    0 \n    \u2264 s_i \n    \u2264\n    1\n) \u2014 the elements of the array \n    s\n. The third line contains \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    |a_i| \n    \u2264 m\n) \u2014 the elements\nof the array \n    a\n. It is guaranteed that if \n    s_i = 0\n holds, then\n\n    a_i = 0\n. \n    i\n-th of the following \n    m\n lines contains two integers\n\n    v_i\n and \n    u_i\n (\n    1 \n    \u2264 v_i, u_i \n    \u2264 n, v_i \n     u_i\n) \u2014\nthe indexes of the elements of the array \n    b\n to which the operation is\nperformed. It is also guaranteed that there are no two indices \n    i\n and\n\n    j\n, where \n    1 \n    \u2264 i < j \n    \u2264 m\n, such that \n    (v_i, u_i) = (v_j,\n    u_j)\n or \n    (v_i, u_i) = (u_j, v_j)\n. Output In the first line print \"YES\"\nif it is possible to perform operations in the required way, and \"NO\"\notherwise. You may print each letter in any case (for example, \"YES\", \"Yes\",\n\"yes\", \"yEs\" will all be recognized as positive answer). In case you printed\n\"YES\", print \n    m\n pairs of integers. If for pair \n    (v_i, u_i)\n we should\nperform \n    b_v_i := b_v_i - 1\n and \n    b_u_i := b_u_i + 1\n, print\n\n    (v_i, u_i)\n. Otherwise print \n    (u_i, v_i)\n. If there are multiple ways\nto get the correct answer, you can print any of them. You can print pairs in\nany order. Examples Input 5 5 1 1 1 1 1 -2 0 2 1 -1 1 5 1 4 3 5 3 4 4 5 Output\nYES 1 5 1 4 5 3 4 3 5 4 Input 5 5 0 1 0 1 0 0 1 0 0 0 1 3 2 3 3 5 3 4 4 5\nOutput YES 3 1 3 2 5 3 3 4 4 5 Input 4 4 1 1 1 1 0 2 -2 2 1 3 1 4 2 3 2 4\nOutput NO Note In the first example, the array \n    b\n will change as follows:\n\n    [0,0,0,0,0] \n    \u2192 [-1,0,0,1,0] \n    \u2192 [-2,0,0,1,1]\n    \n    \u2192 [-2,0,1,0,1] \n    \u2192 [-2,0,2,0,0] \n    \u2192\n    [-2,0,2,1,-1]\n. \n    a_i = b_i\n for all indices \n    i\n from \n    1\n to\n\n    5\n. In the second example, it is enough for us that \n    b_2 = 1\n at the\nend, since only \n    s_2 = 1\n. In the third example, the operations cannot be\nperformed as required.\n\n",
        "cf_contest_id": 1717,
        "cf_index": "F",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "flows",
            "graph matchings",
            "graphs",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 5\r\n1 1 1 1 1\r\n-2 0 2 1 -1\r\n1 5\r\n1 4\r\n3 5\r\n3 4\r\n4 5\r\n",
                "YES\r\n1 5\r\n1 4\r\n5 3\r\n4 3\r\n5 4\r\n"
            ],
            [
                "5 5\r\n0 1 0 1 0\r\n0 1 0 0 0\r\n1 3\r\n2 3\r\n3 5\r\n3 4\r\n4 5\r\n",
                "YES\r\n1 3\r\n3 2\r\n3 5\r\n3 4\r\n4 5\r\n"
            ],
            [
                "4 4\r\n1 1 1 1\r\n0 2 -2 2\r\n1 3\r\n1 4\r\n2 3\r\n2 4\r\n",
                "NO\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 10\r\n1 1 1 1 1 1 1 1 1 1\r\n2 -1 0 0 -1 3 0 -1 -3 1\r\n7 8\r\n6 9\r\n1 8\r\n1 10\r\n8 9\r\n10 4\r\n6 7\r\n6 2\r\n10 9\r\n4 5\r\n",
                "YES\r\n8 7\r\n9 6\r\n8 1\r\n10 1\r\n9 8\r\n4 10\r\n7 6\r\n2 6\r\n9 10\r\n5 4\r\n"
            ],
            [
                "2 1\r\n1 1\r\n-1 1\r\n2 1\r\n",
                "YES\r\n1 2\r\n"
            ]
        ]
    }
]