[
    {
        "name": "The Labyrinth",
        "description": "You are given a rectangular field of n \u00d7 m cells. Each cell is either empty or\nimpassable (contains an obstacle). Empty cells are marked with '.', impassable\ncells are marked with '*'. Let's call two empty cells adjacent if they share a\nside. Let's call a connected component any non-extendible set of cells such\nthat any two of them are connected by the path of adjacent cells. It is a\ntypical well-known definition of a connected component. For each impassable\ncell (x, y) imagine that it is an empty cell (all other cells remain\nunchanged) and find the size (the number of cells) of the connected component\nwhich contains (x, y). You should do it for each impassable cell\nindependently. The answer should be printed as a matrix with n rows and m\ncolumns. The j-th symbol of the i-th row should be \".\" if the cell is empty at\nthe start. Otherwise the j-th symbol of the i-th row should contain the only\ndigit \u2014- the answer modulo 10. The matrix should be printed without any\nspaces. To make your output faster it is recommended to build the output as an\narray of n strings having length m and print it as a sequence of lines. It\nwill be much faster than writing character-by-character. As input/output can\nreach huge size it is recommended to use fast input/output methods: for\nexample, prefer to use scanf/printf instead of cin/cout in C++, prefer to use\nBufferedReader/PrintWriter instead of Scanner/System.out in Java. Input The\nfirst line contains two integers n, m (1 \u2264 n, m \u2264 1000) \u2014 the number of rows\nand columns in the field. Each of the next n lines contains m symbols: \".\" for\nempty cells, \"*\" for impassable cells. Output Print the answer as a matrix as\ndescribed above. See the examples to precise the format of the output.\nExamples Input 3 3 *.* .*. *.* Output 3.3 .5. 3.3 Input 4 5 **..* ..*** .*.*.\n*.*.* Output 46..3 ..732 .6.4. 5.4.3 Note In first example, if we imagine that\nthe central cell is empty then it will be included to component of size 5\n(cross). If any of the corner cell will be empty then it will be included to\ncomponent of size 3 (corner).\n\n",
        "cf_contest_id": 616,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\n*.*\r\n.*.\r\n*.*\r\n",
                "3.3\r\n.5.\r\n3.3\r\n"
            ],
            [
                "4 5\r\n**..*\r\n..***\r\n.*.*.\r\n*.*.*\r\n",
                "46..3\r\n..732\r\n.6.4.\r\n5.4.3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n*\r\n",
                "1\r\n"
            ],
            [
                "1 1\r\n.\r\n",
                ".\r\n"
            ],
            [
                "1 10\r\n**********\r\n",
                "1111111111\r\n"
            ],
            [
                "1 10\r\n*.***.**.*\r\n",
                "2.212.22.2\r\n"
            ],
            [
                "10 1\r\n*\r\n*\r\n*\r\n*\r\n*\r\n.\r\n*\r\n.\r\n*\r\n*\r\n",
                "1\r\n1\r\n1\r\n1\r\n2\r\n.\r\n3\r\n.\r\n2\r\n1\r\n"
            ],
            [
                "10 1\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n",
                ".\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n"
            ]
        ]
    }
]