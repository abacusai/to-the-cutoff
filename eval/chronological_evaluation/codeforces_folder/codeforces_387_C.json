[
    {
        "name": "George and Number",
        "description": "George is a cat, so he really likes to play. Most of all he likes to play with\nhis array of positive integers b. During the game, George modifies the array\nby using special changes. Let's mark George's current array as b1, b2, ...,\nb|b| (record |b| denotes the current length of the array). Then one change is\na sequence of actions: Choose two distinct indexes i and j (1 \u2264 i, j \u2264 |b|; i\n\u2260 j), such that bi \u2265 bj. Get number v = concat(bi, bj), where concat(x, y) is\na number obtained by adding number y to the end of the decimal record of\nnumber x. For example, concat(500, 10) = 50010, concat(2, 2) = 22. Add number\nv to the end of the array. The length of the array will increase by one.\nRemove from the array numbers with indexes i and j. The length of the array\nwill decrease by two, and elements of the array will become re-numbered from 1\nto current length of the array. George played for a long time with his array b\nand received from array b an array consisting of exactly one number p. Now\nGeorge wants to know: what is the maximum number of elements array b could\ncontain originally? Help him find this number. Note that originally the array\ncould contain only positive integers. Input The first line of the input\ncontains a single integer p (1 \u2264 p < 10^100000). It is guaranteed that number\np doesn't contain any leading zeroes. Output Print an integer \u2014 the maximum\nnumber of elements array b could contain originally. Examples Input 9555\nOutput 4 Input 10000000005 Output 2 Input 800101 Output 3 Input 45 Output 1\nInput 1000000000000001223300003342220044555 Output 17 Input 19992000 Output 1\nInput 310200 Output 2 Note Let's consider the test examples: Originally array\nb can be equal to 5, 9, 5, 5. The sequence of George's changes could have\nbeen: 5, 9, 5, 5 \u2192 5, 5, 95 \u2192 95, 55 \u2192 9555. Originally array b could\nbe equal to 1000000000, 5. Please note that the array b cannot contain\nzeros. Originally array b could be equal to 800, 10, 1. Originally array b\ncould be equal to 45. It cannot be equal to 4, 5, because George can get\nonly array 54 from this array in one operation. Note that the numbers can be\nvery large.\n\n",
        "cf_contest_id": 387,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "9555\r\n",
                "4\r\n"
            ],
            [
                "10000000005\r\n",
                "2\r\n"
            ],
            [
                "800101\r\n",
                "3\r\n"
            ],
            [
                "45\r\n",
                "1\r\n"
            ],
            [
                "1000000000000001223300003342220044555\r\n",
                "17\r\n"
            ],
            [
                "19992000\r\n",
                "1\r\n"
            ],
            [
                "310200\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "63100605000394089000505000600600062000170273350000\r\n",
                "21\r\n"
            ],
            [
                "20900000000090009000070069000026000000000000020008\r\n",
                "10\r\n"
            ],
            [
                "60000000000000000000000000000000000000000000000000\r\n",
                "1\r\n"
            ],
            [
                "7\r\n",
                "1\r\n"
            ],
            [
                "6944262915652659458125599978116114458736683259866511789545994938161622536342972115877623999684282136\r\n",
                "99\r\n"
            ],
            [
                "45000\r\n",
                "1\r\n"
            ],
            [
                "10\r\n",
                "1\r\n"
            ],
            [
                "1\r\n",
                "1\r\n"
            ],
            [
                "456\r\n",
                "2\r\n"
            ],
            [
                "542\r\n",
                "3\r\n"
            ],
            [
                "54000\r\n",
                "1\r\n"
            ],
            [
                "999\r\n",
                "3\r\n"
            ],
            [
                "11\r\n",
                "2\r\n"
            ],
            [
                "11001000\r\n",
                "2\r\n"
            ],
            [
                "10001000\r\n",
                "2\r\n"
            ],
            [
                "112000\r\n",
                "1\r\n"
            ],
            [
                "1111200\r\n",
                "5\r\n"
            ],
            [
r\n",
                "2\r\n"
            ],
            [
                "110003000054\r\n",
                "3\r\n"
            ]
        ]
    }
]