[
    {
        "name": "Suffix Operations",
        "description": "Gildong has an interesting machine that has an array \n    a\n with \n    n\n\nintegers. The machine supports two kinds of operations: Increase all elements\nof a suffix of the array by \n    1\n. Decrease all elements of a suffix of the\narray by \n    1\n. A suffix is a subsegment (contiguous elements) of the array\nthat contains \n    a_n\n. In other words, for all \n    i\n where \n    a_i\n is\nincluded in the subsegment, all \n    a_j\n's where \n    i \n     j \n    \u2264 n\n must\nalso be included in the subsegment. Gildong wants to make all elements of\n\n    a\n equal \u2014 he will always do so using the minimum number of operations\nnecessary. To make his life even easier, before Gildong starts using the\nmachine, you have the option of changing one of the integers in the array to\nany other integer. You are allowed to leave the array unchanged. You want to\nminimize the number of operations Gildong performs. With your help, what is\nthe minimum number of operations Gildong will perform? Note that even if you\nchange one of the integers in the array, you should not count that as one of\nthe operations because Gildong did not perform it. Input Each test contains\none or more test cases. The first line contains the number of test cases\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n). Each test case contains two lines. The\nfirst line of each test case consists of an integer \n    n\n (\n    2 \n    \u2264 n\n    \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of elements of the array \n    a\n. The\nsecond line of each test case contains \n    n\n integers. The \n    i\n-th\ninteger is \n    a_i\n (\n    -5 \n    \u00b7 10^8 \n    \u2264 a_i \n    \u2264 5 \n    \u00b7 10^8\n).\nIt is guaranteed that the sum of \n    n\n in all test cases does not exceed\n\n    2 \n    \u00b7 10^5\n. Output For each test case, print one integer \u2014 the\nminimum number of operations Gildong has to perform in order to make all\nelements of the array equal. Example Input 7 2 1 1 3 -1 0 2 4 99 96 97 95 4 -3\n-5 -2 1 6 1 4 3 2 4 1 5 5 0 0 0 5 9 -367741579 319422997 -415264583 -125558838\n-300860379 420848004 294512916 -383235489 425814447 Output 0 1 3 4 6 5\n2847372102 Note In the first case, all elements of the array are already\nequal. Therefore, we do not change any integer and Gildong will perform zero\noperations. In the second case, we can set \n    a_3\n to be \n    0\n, so that\nthe array becomes \n    [-1,0,0]\n. Now Gildong can use the \n    2\n-nd operation\nonce on the suffix starting at \n    a_2\n, which means \n    a_2\n and \n    a_3\n\nare decreased by \n    1\n, making all elements of the array \n    -1\n. In the\nthird case, we can set \n    a_1\n to \n    96\n, so that the array becomes\n\n    [96,96,97,95]\n. Now Gildong needs to: Use the \n    2\n-nd operation on the\nsuffix starting at \n    a_3\n once, making the array \n    [96,96,96,94]\n. Use\nthe \n    1\n-st operation on the suffix starting at \n    a_4\n \n    2\n times,\nmaking the array \n    [96,96,96,96]\n. In the fourth case, we can change the\narray into \n    [-3,-3,-2,1]\n. Now Gildong needs to: Use the \n    2\n-nd\noperation on the suffix starting at \n    a_4\n \n    3\n times, making the array\n\n    [-3,-3,-2,-2]\n. Use the \n    2\n-nd operation on the suffix starting at\n\n    a_3\n once, making the array \n    [-3,-3,-3,-3]\n.\n\n",
        "cf_contest_id": 1453,
        "cf_index": "B",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "7\r\n2\r\n1 1\r\n3\r\n-1 0 2\r\n4\r\n99 96 97 95\r\n4\r\n-3 -5 -2 1\r\n6\r\n1 4 3 2 4 1\r\n5\r\n5 0 0 0 5\r\n9\r\n-367741579 319422997 -415264583 -125558838 -300860379 420848004 294512916 -383235489 425814447\r\n",
                "0\r\n1\r\n3\r\n4\r\n6\r\n5\r\n2847372102\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2\r\n9 -10\r\n",
                "0\r\n"
            ]
        ]
    }
]