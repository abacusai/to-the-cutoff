[
    {
        "name": "The Human Equation",
        "description": "Petya and his friend, the robot Petya++, went to BFDMONCON, where the costume\ncontest is taking place today. While walking through the festival, they came\nacross a scientific stand named after Professor Oak and Golfball, where they\nwere asked to solve an interesting problem. Given a sequence of numbers\n\n    a_1, a_2, \n    \u2026, a_n\n you can perform several operations on this\nsequence. Each operation should look as follows. You choose some\nsubsequence\n    ^\n    \u2020\n. Then you call all the numbers at odd positions in\nthis subsequence northern, and all the numbers at even positions in this\nsubsequence southern. In this case, only the position of the number in the\nsubsequence is taken into account, not in the original sequence. For example,\nconsider the sequence \n    1, 4, 2, 8, 5, 7, 3, 6, 9\n and its subsequence\n(shown in bold) \n    1, \n    4, \n    2, 8, \n    5, 7, 3,\n    \n    6, 9\n. Then the numbers \n    4\n and \n    5\n are northern, and the\nnumbers \n    2\n and \n    6\n are southern. After that, you can do one of the\nfollowing: add \n    1\n to all northern numbers and subtract \n    1\n from all\nsouth numbers; or add \n    1\n to all southern numbers and subtract \n    1\n\nfrom all northern numbers. Thus, from the sequence \n    1, \n    4,\n    \n    2, 8, \n    5, 7, 3, \n    6, 9\n, if you choose the\nsubsequence shown in bold, you can get either \n    1, \n    5,\n    \n    1, 8, \n    6, 7, 3, \n    5, 9\n or \n    1, \n    3,\n    \n    3, 8, \n    4, 7, 3, \n    7, 9\n. Then the operation\nends. Note also that all operations are independent, i. e. the numbers are no\nlonger called northern or southern when one operation ends. It is necessary to\nturn all the numbers of the sequence into zeros using the operations described\nabove. Since there is very little time left before the costume contest, the\nfriends want to know, what is the minimum number of operations required for\nthis. The friends were unable to solve this problem, so can you help them?\n\n    ^\n    \u2020\n A sequence \n    c\n is a subsequence of a sequence \n    d\n if\n\n    c\n can be obtained from \n    d\n by the deletion of several (possibly,\nzero or all) elements. Input Each test contains multiple test cases. The first\nline contains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n).\nThe description of the test cases follows. The first line of each test case\ncontains an integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \u00b7 10^5\n) \u2014 the length\nof the sequence. The second line contains \n    n\n integers \n    a_1, a_2,\n    \n    \u2026, a_n\n (\n    -10^9 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the description of the\nsequence itself. It is guaranteed that the sum of \n    n\n over all test cases\ndoes not exceed \n    2\n    \u00b7 10^5\n. Output For each test case, print one\ninteger in a single line \u2014 the minimum number of operations it takes to turn\nall the numbers into zeros. Example Input 5 3 1 2 -3 5 1 0 0 -1 -1 6 2 -4 3 -5\n4 1 5 1 -1 1 -1 1 7 0 0 0 0 0 0 0 Output 3 2 6 1 0 Note In the first test\ncase, the sequence of operations is as follows: \n    1, 2,\n    \n    -3\n    \u27f6 0, \n    2, \n    -2\n    \u27f6 0, \n    1, \n    -1\n    \u27f6 0, 0, 0\n.\nIn the second test case, the sequence looks like this: \n    1, 0, 0,\n    \n    -1, -1 \n    \u27f6 0, 0, 0, 0, \n    -1\n    \u27f6 0, 0, 0, 0, 0\n. In the fourth test case, simply select the\nentire sequence as a subsequence, then subtract one from the northern numbers\nand add one to the southern numbers. Thus, the sequence will be nulled in one\noperation. In the fifth test case, you don't need to do any operations, since\nthe sequence already consists of zeros.\n\n",
        "cf_contest_id": 1775,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3\r\n1 2 -3\r\n5\r\n1 0 0 -1 -1\r\n6\r\n2 -4 3 -5 4 1\r\n5\r\n1 -1 1 -1 1\r\n7\r\n0 0 0 0 0 0 0\r\n",
                "3\r\n2\r\n6\r\n1\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2\r\n-1000000000 1000000000\r\n",
                "1000000000\r\n"
            ]
        ]
    }
]