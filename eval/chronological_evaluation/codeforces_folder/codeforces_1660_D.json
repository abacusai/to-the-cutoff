[
    {
        "name": "Maximum Product Strikes Back",
        "description": "You are given an array \n    a\n consisting of \n    n\n integers. For each\n\n    i\n (\n    1 \n    \u2264 i \n    \u2264 n\n) the following inequality is true: \n    -2\n    \n    \u2264 a_i \n    \u2264 2\n. You can remove any number (possibly \n    0\n) of elements\nfrom the beginning of the array and any number (possibly \n    0\n) of elements\nfrom the end of the array. You are allowed to delete the whole array. You need\nto answer the question: how many elements should be removed from the beginning\nof the array, and how many elements should be removed from the end of the\narray, so that the result will be an array whose product (multiplication) of\nelements is maximal. If there is more than one way to get an array with the\nmaximum product of elements on it, you are allowed to output any of them. The\nproduct of elements of an empty array (array of length \n    0\n) should be\nassumed to be \n    1\n. Input The first line of input data contains an integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014the number of test cases in the test.\nThen the descriptions of the input test cases follow. The first line of each\ntest case description contains an integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n) \u2014the length of array \n    a\n. The next line contains \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    |a_i| \n    \u2264 2\n) \u2014 elements of\narray \n    a\n. It is guaranteed that the sum of \n    n\n over all test cases\ndoes not exceed \n    2 \n    \u00b7 10^5\n. Output For each test case, output two\nnon-negative numbers \n    x\n and \n    y\n (\n    0 \n    \u2264 x + y \n    \u2264 n\n) \u2014 such\nthat the product (multiplication) of the array numbers, after removing \n    x\n\nelements from the beginning and \n    y\n elements from the end, is maximal. If\nthere is more than one way to get the maximal product, it is allowed to output\nany of them. Consider the product of numbers on empty array to be \n    1\n.\nExample Input 5 4 1 2 -1 2 3 1 1 -2 5 2 0 -2 2 -1 3 -2 -1 -1 3 -1 -2 -2 Output\n0 2 3 0 2 0 0 1 1 0 Note In the first case, the maximal value of the product\nis \n    2\n. Thus, we can either delete the first three elements (obtain array\n\n    [2]\n), or the last two and one first element (also obtain array\n\n    [2]\n), or the last two elements (obtain array \n    [1, 2]\n). Thus, in the\nfirst case, the answers fit: \"3 0\", or \"1 2\", or \"0 2\". In the second case,\nthe maximum value of the product is \n    1\n. Then we can remove all elements\nfrom the array because the value of the product on the empty array will be\n\n    1\n. So the answer is \"3 0\", but there are other possible answers. In the\nthird case, we can remove the first two elements of the array. Then we get the\narray: \n    [-2, 2, -1]\n. The product of the elements of the resulting array\nis \n    (-2) \n    \u00b7 2 \n    \u00b7 (-1) = 4\n. This value is the maximum possible\nvalue that can be obtained. Thus, for this case the answer is: \"2 0\".\n\n",
        "cf_contest_id": 1660,
        "cf_index": "D",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "implementation",
            "math",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n4\r\n1 2 -1 2\r\n3\r\n1 1 -2\r\n5\r\n2 0 -2 2 -1\r\n3\r\n-2 -1 -1\r\n3\r\n-1 -2 -2\r\n",
                "0 2\r\n3 0\r\n2 0\r\n0 1\r\n1 0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n1\r\n",
                "1 0\r\n"
            ],
            [
                "1\r\n100\r\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 2 2\r\n",
                "0 4\r\n"
            ],
            [
                "1\r\n1\r\n-1\r\n",
                "1 0\r\n"
            ],
            [
                "2\r\n2\r\n1 -1\r\n3\r\n1 -1 1\r\n",
                "2 0\r\n3 0\r\n"
            ],
            [
                "1\r\n3\r\n0 0 -1\r\n",
                "3 0\r\n"
            ],
            [
                "1\r\n5\r\n0 0 0 0 0\r\n",
                "5 0\r\n"
            ],
            [
                "1\r\n2\r\n0 1\r\n",
                "2 0\r\n"
            ]
        ]
    }
]