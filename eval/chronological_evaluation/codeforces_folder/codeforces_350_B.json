[
    {
        "name": "Resort",
        "description": "Valera's finally decided to go on holiday! He packed up and headed for a ski\nresort. Valera's fancied a ski trip but he soon realized that he could get\nlost in this new place. Somebody gave him a useful hint: the resort has n\nobjects (we will consider the objects indexed in some way by integers from 1\nto n), each object is either a hotel or a mountain. Valera has also found out\nthat the ski resort had multiple ski tracks. Specifically, for each object v,\nthe resort has at most one object u, such that there is a ski track built from\nobject u to object v. We also know that no hotel has got a ski track leading\nfrom the hotel to some object. Valera is afraid of getting lost on the resort.\nSo he wants you to come up with a path he would walk along. The path must\nconsist of objects v1, v2, ..., vk (k \u2265 1) and meet the following conditions:\nObjects with numbers v1, v2, ..., vk - 1 are mountains and the object with\nnumber vk is the hotel. For any integer i (1 \u2264 i < k), there is exactly one\nski track leading from object vi. This track goes to object vi + 1. The path\ncontains as many objects as possible (k is maximal). Help Valera. Find such\npath that meets all the criteria of our hero! Input The first line contains\ninteger n (1 \u2264 n \u2264 10^5) \u2014 the number of objects. The second line contains n\nspace-separated integers type1, type2, ..., typen \u2014 the types of the objects.\nIf typei equals zero, then the i-th object is the mountain. If typei equals\none, then the i-th object is the hotel. It is guaranteed that at least one\nobject is a hotel. The third line of the input contains n space-separated\nintegers a1, a2, ..., an (0 \u2264 ai \u2264 n) \u2014 the description of the ski tracks. If\nnumber ai equals zero, then there is no such object v, that has a ski track\nbuilt from v to i. If number ai doesn't equal zero, that means that there is a\ntrack built from object ai to object i. Output In the first line print k \u2014 the\nmaximum possible path length for Valera. In the second line print k integers\nv1, v2, ..., vk \u2014 the path. If there are multiple solutions, you can print any\nof them. Examples Input 5 0 0 0 0 1 0 1 2 3 4 Output 5 1 2 3 4 5 Input 5 0 0 1\n0 1 0 1 2 2 4 Output 2 4 5 Input 4 1 0 0 0 2 3 4 2 Output 1 1\n\n",
        "cf_contest_id": 350,
        "cf_index": "B",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "graphs"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n0 0 0 0 1\r\n0 1 2 3 4\r\n",
                "5\r\n1 2 3 4 5\r\n"
            ],
            [
                "5\r\n0 0 1 0 1\r\n0 1 2 2 4\r\n",
                "2\r\n4 5\r\n"
            ],
            [
                "4\r\n1 0 0 0\r\n2 3 4 2\r\n",
                "1\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n0 0 0 0 0 0 0 0 0 1\r\n4 0 8 4 7 8 5 5 7 2\r\n",
                "2\r\n2 10\r\n"
            ],
            [
                "50\r\n0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 1 1 0 0 0 1 0\r\n28 4 33 22 4 35 36 31 42 25 50 33 25 36 18 23 23 28 43 3 18 31 1 2 15 22 40 43 29 32 28 35 18 27 48 40 14 36 27 50 40 5 48 14 36 24 32 33 26 50\r\n",
                "2\r\n3 20\r\n"
            ],
            [
                "100\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0\r\n86 12 47 46 45 31 20 47 58 79 23 70 35 72 37 20 16 64 46 87 57 7 84 72 70 3 14 40 17 42 30 99 12 20 38 98 14 40 4 83 10 15 47 30 83 58 12 7 97 46 17 6 41 13 87 37 36 12 7 25 26 35 69 13 18 5 9 53 72 28 13 51 5 57 14 64 28 25 91 96 57 69 9 12 97 7 56 42 31 15 88 16 41 88 86 13 89 81 3 42\r\n",
                "1\r\n44\r\n"
            ],
            [
                "10\r\n1 0 0 0 0 0 0 0 0 0\r\n6 2 7 8 2 9 0 5 4 2\r\n",
                "6\r\n5 8 4 9 6 1\r\n"
            ],
            [
                "100\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n38 2 49 55 6 42 12 100 25 69 85 76 13 22 78 73 37 64 5 21 0 23 61 87 4 16 44 3 98 54 1 91 18 26 82 24 18 50 95 21 75 97 51 9 67 73 51 19 63 92 27 82 8 7 20 84 2 93 40 11 39 80 58 85 74 48 72 78 34 33 31 65 46 71 32 36 33 88 47 4 66 84 16 27 16 14 90 16 79 41 99 30 57 73 28 89 45 81 86 29\r\n",
                "52\r\n57 93 58 63 49 3 28 95 39 61 23 22 14 86 99 91 32 75 41 90 87 24 36 76 12 7 54 30 92 50 38 1 31 71 74 65 72 67 45 97 42 6 5 19 48 66 81 98 29 100 8 53\r\n"
            ],
            [
                "2\r\n1 1\r\n0 0\r\n",
                "1\r\n1\r\n"
            ],
            [
                "1\r\n1\r\n0\r\n",
                "1\r\n1\r\n"
            ]
        ]
    }
]