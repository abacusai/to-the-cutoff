[
    {
        "name": "Vus the Cossack and a Field",
        "description": "Vus the Cossack has a field with dimensions \n    n \n    \u00d7 m\n, which consists\nof \"0\" and \"1\". He is building an infinite field from this field. He is doing\nthis in this way: He takes the current field and finds a new inverted field.\nIn other words, the new field will contain \"1\" only there, where \"0\" was in\nthe current field, and \"0\" there, where \"1\" was. To the current field, he adds\nthe inverted field to the right. To the current field, he adds the inverted\nfield to the bottom. To the current field, he adds the current field to the\nbottom right. He repeats it.For example, if the initial field was:\n\n    1     0    \n    \n    \n     1     1\n After\nthe first iteration, the field will be like this: \n    1     0    \n    0     1 \n    \n    \n     1     1     0     0 \n    \n    \n     0     1     1     0 \n    \n    \n     0     0     1     1\n After the second iteration, the field will be like\nthis: \n    1     0     0     1     0     1     1     0 \n    \n    \n     1     1     0     0\n        0     0     1     1 \n    \n    \n     0     1     1     0     1     0     0     1 \n    \n    \n     0     0     1     1    \n    1     1     0     0 \n    \n    \n     0     1     1     0     1     0     0     1 \n    \n    \n     0     0     1     1     1\n        1     0     0 \n    \n    \n     1     0     0     1     0     1     1     0 \n    \n    \n     1     1     0    0     0     0\n        1     1\n And so on... Let's numerate lines from top\nto bottom from \n    1\n to infinity, and columns from left to right from\n\n    1\n to infinity. We call the submatrix \n    (x_1, y_1, x_2, y_2)\n all\nnumbers that have coordinates \n    (x, y)\n such that \n    x_1 \n    \u2264 x \n    \u2264\n    x_2\n and \n    y_1 \n    \u2264 y \n    \u2264 y_2\n. The Cossack needs sometimes to find\nthe sum of all the numbers in submatrices. Since he is pretty busy right now,\nhe is asking you to find the answers! Input The first line contains three\nintegers \n    n\n, \n    m\n, \n    q\n (\n    1 \n    \u2264 n, m \n    \u2264 1\n     000\n, \n    1\n    \n    \u2264 q \n    \u2264 10^5\n) \u2014 the dimensions of the initial matrix and the number\nof queries. Each of the next \n    n\n lines contains \n    m\n characters\n\n    c_ij\n (\n    0 \n    \u2264 c_ij\n    \u2264 1\n) \u2014 the characters in the matrix.\nEach of the next \n    q\n lines contains four integers \n    x_1\n, \n    y_1\n,\n\n    x_2\n, \n    y_2\n (\n    1 \n    \u2264 x_1 \n    \u2264 x_2 \n    \u2264 10^9\n, \n    1 \n    \u2264\n    y_1 \n    \u2264 y_2 \n    \u2264 10^9\n) \u2014 the coordinates of the upper left cell and\nbottom right cell, between which you need to find the sum of all numbers.\nOutput For each query, print the answer. Examples Input 2 2 5 10 11 1 1 8 8 2\n4 5 6 1 2 7 8 3 3 6 8 5 6 7 8 Output 32 5 25 14 4 Input 2 3 7 100 101 4 12 5\n17 5 4 9 4 1 4 13 18 12 1 14 9 3 10 7 18 3 15 12 17 8 6 8 12 Output 6 3 98 13\n22 15 3 Note The first example is explained in the legend.\n\n",
        "cf_contest_id": 1186,
        "cf_index": "E",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "divide and conquer",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 2 5\r\n10\r\n11\r\n1 1 8 8\r\n2 4 5 6\r\n1 2 7 8\r\n3 3 6 8\r\n5 6 7 8\r\n",
                "32\r\n5\r\n25\r\n14\r\n4\r\n"
            ],
            [
                "2 3 7\r\n100\r\n101\r\n4 12 5 17\r\n5 4 9 4\r\n1 4 13 18\r\n12 1 14 9\r\n3 10 7 18\r\n3 15 12 17\r\n8 6 8 12\r\n",
                "6\r\n3\r\n98\r\n13\r\n22\r\n15\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 2 10\r\n01\r\n4 1 5 2\r\n1 2 1 4\r\n3 4 3 5\r\n1 3 1 5\r\n4 3 5 5\r\n1 1 3 3\r\n1 3 4 5\r\n3 2 3 4\r\n3 1 5 2\r\n3 1 3 5\r\n",
                "2\r\n2\r\n1\r\n2\r\n3\r\n4\r\n6\r\n1\r\n3\r\n2\r\n"
            ]
        ]
    }
]