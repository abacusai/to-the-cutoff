[
    {
        "name": "Delete a Segment",
        "description": "There are \n    n\n segments on a \n    Ox\n axis \n    [l_1, r_1]\n, \n    [l_2,\n    r_2]\n, ..., \n    [l_n, r_n]\n. Segment \n    [l, r]\n covers all points from\n\n    l\n to \n    r\n inclusive, so all \n    x\n such that \n    l \n    \u2264 x \n    \u2264\n    r\n. Segments can be placed arbitrarily \u2014 be inside each other, coincide and\nso on. Segments can degenerate into points, that is \n    l_i=r_i\n is possible.\nUnion of the set of segments is such a set of segments which covers exactly\nthe same set of points as the original set. For example: if \n    n=3\n and\nthere are segments \n    [3, 6]\n, \n    [100, 100]\n, \n    [5, 8]\n then their\nunion is \n    2\n segments: \n    [3, 8]\n and \n    [100, 100]\n; if \n    n=5\n and\nthere are segments \n    [1, 2]\n, \n    [2, 3]\n, \n    [4, 5]\n, \n    [4, 6]\n,\n\n    [6, 6]\n then their union is \n    2\n segments: \n    [1, 3]\n and \n    [4,\n    6]\n. Obviously, a union is a set of pairwise non-intersecting segments. You\nare asked to erase exactly one segment of the given \n    n\n so that the number\nof segments in the union of the rest \n    n-1\n segments is maximum possible.\nFor example, if \n    n=4\n and there are segments \n    [1, 4]\n, \n    [2, 3]\n,\n\n    [3, 6]\n, \n    [5, 7]\n, then: erasing the first segment will lead to\n\n    [2, 3]\n, \n    [3, 6]\n, \n    [5, 7]\n remaining, which have \n    1\n segment\nin their union; erasing the second segment will lead to \n    [1, 4]\n, \n    [3,\n    6]\n, \n    [5, 7]\n remaining, which have \n    1\n segment in their union;\nerasing the third segment will lead to \n    [1, 4]\n, \n    [2, 3]\n, \n    [5,\n    7]\n remaining, which have \n    2\n segments in their union; erasing the\nfourth segment will lead to \n    [1, 4]\n, \n    [2, 3]\n, \n    [3, 6]\n\nremaining, which have \n    1\n segment in their union. Thus, you are required\nto erase the third segment to get answer \n    2\n. Write a program that will\nfind the maximum number of segments in the union of \n    n-1\n segments if you\nerase any of the given \n    n\n segments. Note that if there are multiple equal\nsegments in the given set, then you can erase only one of them anyway. So the\nset after erasing will have exactly \n    n-1\n segments. Input The first line\ncontains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test\ncases in the test. Then the descriptions of \n    t\n test cases follow. The\nfirst of each test case contains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264\n    2\n    \u00b710^5\n) \u2014 the number of segments in the given set. Then \n    n\n lines\nfollow, each contains a description of a segment \u2014 a pair of integers\n\n    l_i\n, \n    r_i\n (\n    -10^9 \n    \u2264 l_i \n    \u2264 r_i \n    \u2264 10^9\n), where\n\n    l_i\n and \n    r_i\n are the coordinates of the left and right borders of\nthe \n    i\n-th segment, respectively. The segments are given in an arbitrary\norder. It is guaranteed that the sum of \n    n\n over all test cases does not\nexceed \n    2\n    \u00b710^5\n. Output Print \n    t\n integers \u2014 the answers to the\n\n    t\n given test cases in the order of input. The answer is the maximum\nnumber of segments in the union of \n    n-1\n segments if you erase any of the\ngiven \n    n\n segments. Example Input 3 4 1 4 2 3 3 6 5 7 3 5 5 5 5 5 5 6 3 3\n1 1 5 5 1 5 2 2 4 4 Output 2 1 5\n\n",
        "cf_contest_id": 1285,
        "cf_index": "E",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "data structures",
            "dp",
            "graphs",
            "sortings",
            "trees",
            "two pointers"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n4\r\n1 4\r\n2 3\r\n3 6\r\n5 7\r\n3\r\n5 5\r\n5 5\r\n5 5\r\n6\r\n3 3\r\n1 1\r\n5 5\r\n1 5\r\n2 2\r\n4 4\r\n",
                "2\r\n1\r\n5\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n2\r\n-1000000000 1000000000\r\n-1000000000 1000000000\r\n2\r\n-1000000000 0\r\n0 1000000000\r\n2\r\n-1000000000 -1\r\n1 1000000000\r\n2\r\n-1000000000 1\r\n-1 1000000000\r\n",
                "1\r\n1\r\n1\r\n1\r\n"
            ]
        ]
    }
]