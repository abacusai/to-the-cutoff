[
    {
        "name": "Kuroni and Simple Strings",
        "description": "Now that Kuroni has reached 10 years old, he is a big boy and doesn't like\narrays of integers as presents anymore. This year he wants a Bracket sequence\nas a Birthday present. More specifically, he wants a bracket sequence so\ncomplex that no matter how hard he tries, he will not be able to remove a\nsimple subsequence! We say that a string formed by \n    n\n characters '(' or\n')' is simple if its length \n    n\n is even and positive, its first\n\n    n/2\n characters are '(', and its last \n    n/2\n\ncharacters are ')'. For example, the strings () and (()) are simple, while the\nstrings )( and ()() are not simple. Kuroni will be given a string formed by\ncharacters '(' and ')' (the given string is not necessarily simple). An\noperation consists of choosing a subsequence of the characters of the string\nthat forms a simple string and removing all the characters of this subsequence\nfrom the string. Note that this subsequence doesn't have to be continuous. For\nexample, he can apply the operation to the string ')()(()))', to choose a\nsubsequence of bold characters, as it forms a simple string '(())', delete\nthese bold characters from the string and to get '))()'. Kuroni has to perform\nthe minimum possible number of operations on the string, in such a way that no\nmore operations can be performed on the remaining string. The resulting string\ndoes not have to be empty. Since the given string is too large, Kuroni is\nunable to figure out how to minimize the number of operations. Can you help\nhim do it instead? A sequence of characters \n    a\n is a subsequence of a\nstring \n    b\n if \n    a\n can be obtained from \n    b\n by deletion of several\n(possibly, zero or all) characters. Input The only line of input contains a\nstring \n    s\n (\n    1 \n    \u2264 |s| \n    \u2264 1000\n) formed by characters '(' and\n')', where \n    |s|\n is the length of \n    s\n. Output In the first line, print\nan integer \n    k\n \u2014 the minimum number of operations you have to apply. Then,\nprint \n    2k\n lines describing the operations in the following format: For\neach operation, print a line containing an integer \n    m\n \u2014 the number of\ncharacters in the subsequence you will remove. Then, print a line containing\n\n    m\n integers \n    1 \n    \u2264 a_1 < a_2 < \n    \u2026 < a_m\n \u2014 the indices of the\ncharacters you will remove. All integers must be less than or equal to the\nlength of the current string, and the corresponding subsequence must form a\nsimple string. If there are multiple valid sequences of operations with the\nsmallest \n    k\n, you may print any of them. Examples Input (()(( Output 1 2 1\n3 Input )( Output 0 Input (()()) Output 1 4 1 2 5 6 Note In the first sample,\nthe string is '(()(('. The operation described corresponds to deleting the\nbolded subsequence. The resulting string is '(((', and no more operations can\nbe performed on it. Another valid answer is choosing indices \n    2\n and\n\n    3\n, which results in the same final string. In the second sample, it is\nalready impossible to perform any operations.\n\n",
        "cf_contest_id": 1305,
        "cf_index": "B",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "strings",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "(()((\r\n",
                "1 2 1 3\r\n"
            ],
            [
                ")(\r\n",
                "0\r\n"
            ],
            [
                "(()())\r\n",
                "1 4 1 2 5 6\r\n"
            ]
        ],
        "private_cases": [
            [
                "()\r\n",
                "1 2 1 2\r\n"
            ]
        ]
    }
]