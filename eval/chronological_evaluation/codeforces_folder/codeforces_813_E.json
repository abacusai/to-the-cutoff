[
    {
        "name": "Army Creation",
        "description": "As you might remember from our previous rounds, Vova really likes computer\ngames. Now he is playing a strategy game known as Rage of Empires. In the game\nVova can hire n different warriors; ith warrior has the type ai. Vova wants to\ncreate a balanced army hiring some subset of warriors. An army is called\nbalanced if for each type of warrior present in the game there are not more\nthan k warriors of this type in the army. Of course, Vova wants his army to be\nas large as possible. To make things more complicated, Vova has to consider q\ndifferent plans of creating his army. ith plan allows him to hire only\nwarriors whose numbers are not less than li and not greater than ri. Help Vova\nto determine the largest size of a balanced army for each plan. Be aware that\nthe plans are given in a modified way. See input section for details. Input\nThe first line contains two integers n and k (1 \u2264 n, k \u2264 100000). The second\nline contains n integers a1, a2, ... an (1 \u2264 ai \u2264 100000). The third line\ncontains one integer q (1 \u2264 q \u2264 100000). Then q lines follow. ith line\ncontains two numbers xi and yi which represent ith plan (1 \u2264 xi, yi \u2264 n). You\nhave to keep track of the answer to the last plan (let's call it last). In the\nbeginning last = 0. Then to restore values of li and ri for the ith plan, you\nhave to do the following: li = ((xi + last) mod n) + 1; ri = ((yi + last) mod\nn) + 1; If li > ri, swap li and ri. Output Print q numbers. ith number must be\nequal to the maximum size of a balanced army when considering ith plan.\nExample Input 6 2 1 1 1 2 2 2 5 1 6 4 3 1 1 2 6 2 6 Output 2 4 1 3 2 Note In\nthe first example the real plans are: 1 2 1 6 6 6 2 4 4 6\n\n",
        "cf_contest_id": 813,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 2\r\n1 1 1 2 2 2\r\n5\r\n1 6\r\n4 3\r\n1 1\r\n2 6\r\n2 6\r\n",
                "2\r\n4\r\n1\r\n3\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 5\r\n3 4 4 2 1\r\n5\r\n5 5\r\n5 4\r\n5 4\r\n3 4\r\n5 5\r\n",
                "1\r\n2\r\n2\r\n2\r\n1\r\n"
            ],
            [
                "5 5\r\n2 1 2 4 1\r\n5\r\n5 3\r\n1 1\r\n5 1\r\n2 1\r\n2 3\r\n",
                "4\r\n1\r\n2\r\n2\r\n5\r\n"
            ],
            [
                "10 5\r\n4 5 7 3 5 6 6 8 10 9\r\n5\r\n10 8\r\n9 8\r\n7 5\r\n8 10\r\n5 8\r\n",
                "9\r\n2\r\n3\r\n3\r\n8\r\n"
            ],
            [
                "20 5\r\n9 5 4 10 2 1 8 9 7 4 1 5 4 9 8 10 5 8 4 10\r\n5\r\n9 13\r\n17 13\r\n6 12\r\n13 11\r\n8 8\r\n",
                "5\r\n17\r\n7\r\n19\r\n1\r\n"
            ],
            [
                "100 5\r\n45 51 23 10 62 69 48 47 47 59 58 14 54 34 66 78 92 66 42 25 96 68 35 50 58 77 87 100 57 42 43 76 24 70 26 98 33 11 41 9 17 65 53 23 45 5 24 98 73 91 92 73 51 68 82 95 24 61 88 3 64 74 28 7 77 49 55 62 64 4 51 86 72 26 65 82 13 55 31 44 10 59 83 16 27 67 2 36 52 12 3 26 36 38 58 25 23 3 69 16\r\n5\r\n13 49\r\n86 62\r\n91 77\r\n84 50\r\n33 66\r\n",
                "37\r\n77\r\n15\r\n35\r\n68\r\n"
            ],
            [
                "1 1\r\n1\r\n1\r\n1 1\r\n",
                "1\r\n"
            ],
            [
                "1 5\r\n8\r\n9\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "5 1\r\n10 7 6 6 6\r\n8\r\n5 2\r\n4 5\r\n2 1\r\n5 2\r\n3 1\r\n3 1\r\n4 1\r\n5 2\r\n",
                "3\r\n1\r\n1\r\n2\r\n3\r\n2\r\n2\r\n1\r\n"
            ]
        ]
    }
]