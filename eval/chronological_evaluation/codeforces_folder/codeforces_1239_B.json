[
    {
        "name": "The World Is Just a Programming Task (Hard Version)",
        "description": "This is a harder version of the problem. In this version, \n    n \n    \u2264\n    300\n     000\n. Vasya is an experienced developer of programming competitions'\nproblems. As all great minds at some time, Vasya faced a creative crisis. To\nimprove the situation, Petya gifted him a string consisting of opening and\nclosing brackets only. Petya believes, that the beauty of the bracket string\nis a number of its cyclical shifts, which form a correct bracket sequence. To\ndigress from his problems, Vasya decided to select two positions of the string\n(not necessarily distinct) and swap characters located at this positions with\neach other. Vasya will apply this operation exactly once. He is curious what\nis the maximum possible beauty he can achieve this way. Please help him. We\nremind that bracket sequence \n    s\n is called correct if: \n    s\n is empty;\n\n    s\n is equal to \"(\n    t\n)\", where \n    t\n is correct bracket sequence;\n\n    s\n is equal to \n    t_1 t_2\n, i.e. concatenation of \n    t_1\n and\n\n    t_2\n, where \n    t_1\n and \n    t_2\n are correct bracket sequences. For\nexample, \"(()())\", \"()\" are correct, while \")(\" and \"())\" are not. The\ncyclical shift of the string \n    s\n of length \n    n\n by \n    k\n (\n    0 \n    \u2264\n    k < n\n) is a string formed by a concatenation of the last \n    k\n symbols of\nthe string \n    s\n with the first \n    n - k\n symbols of string \n    s\n. For\nexample, the cyclical shift of string \"(())()\" by \n    2\n equals \"()(())\".\nCyclical shifts \n    i\n and \n    j\n are considered different, if \n    i \n    \n    j\n. Input The first line contains an integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    300\n     000\n), the length of the string. The second line contains a string,\nconsisting of exactly \n    n\n characters, where each of the characters is\neither \"(\" or \")\". Output The first line should contain a single integer \u2014 the\nlargest beauty of the string, which can be achieved by swapping some two\ncharacters. The second line should contain integers \n    l\n and \n    r\n (\n    1\n    \n    \u2264 l, r \n    \u2264 n\n) \u2014 the indices of two characters, which should be\nswapped in order to maximize the string's beauty. In case there are several\npossible swaps, print any of them. Examples Input 10 ()()())(() Output 5 8 7\nInput 12 )(()(()())() Output 4 5 10 Input 6 )))(() Output 0 1 1 Note In the\nfirst example, we can swap \n    7\n-th and \n    8\n-th character, obtaining a\nstring \"()()()()()\". The cyclical shifts by \n    0, 2, 4, 6, 8\n of this string\nform a correct bracket sequence. In the second example, after swapping\n\n    5\n-th and \n    10\n-th character, we obtain a string \")(())()()(()\". The\ncyclical shifts by \n    11, 7, 5, 3\n of this string form a correct bracket\nsequence. In the third example, swap of any two brackets results in \n    0\n\ncyclical shifts being correct bracket sequences.\n\n",
        "cf_contest_id": 1239,
        "cf_index": "B",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "10\r\n()()())(()\r\n",
                "5\r\n8 7\r\n"
            ],
            [
                "12\r\n)(()(()())()\r\n",
                "4\r\n2 1\r\n"
            ],
            [
                "6\r\n)))(()\r\n",
                "0\r\n1 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n(()(()))()\r\n",
                "4\r\n4 7\r\n"
            ],
            [
                "26\r\n((()))(()()()()()()()()())\r\n",
                "10\r\n7 26\r\n"
            ],
            [
                "1\r\n(\r\n",
                "0\r\n1 1\r\n"
            ],
            [
                "4\r\n))((\r\n",
                "2\r\n3 2\r\n"
            ],
            [
                "4\r\n()()\r\n",
                "2\r\n1 1\r\n"
            ],
            [
                "4\r\n)()(\r\n",
                "2\r\n2 2\r\n"
            ],
            [
                "10\r\n(())())()(\r\n",
                "4\r\n1 4\r\n"
            ],
            [
                "10\r\n))))((((()\r\n",
                "3\r\n6 3\r\n"
            ],
            [
                "10\r\n())(((()))\r\n",
                "3\r\n4 3\r\n"
            ],
            [
                "11\r\n)(())(((())\r\n",
                "0\r\n1 1\r\n"
            ],
            [
                "10\r\n)()()()()(\r\n",
                "5\r\n2 2\r\n"
            ],
            [
                "50\r\n()())()))()())((())))(((((()))(((()))((((()(()))))\r\n",
                "5\r\n23 14\r\n"
            ],
            [
                "51\r\n))((((((((()))(())()(()(()())()(()(())(())()())))))\r\n",
                "0\r\n1 1\r\n"
            ],
            [
                "50\r\n)()()()()()()()()()()()()()()()()()()()()()()()()(\r\n",
                "25\r\n2 2\r\n"
            ],
            [
                "50\r\n(((((((((((((((((((((((()))))))))))))))))))))))))(\r\n",
                "3\r\n1 48\r\n"
            ],
            [
                "100\r\n)))))))(((((((((((((((((((((((((((((((((((((((((((((((((()))))))))))))))))))))))))))))))))))))))))))\r\n",
                "3\r\n9 6\r\n"
            ],
            [
                "100\r\n)(((((()())((())((())((()))())))))(())())()((())))(()()))(((((((()())())()(()())(((())())())())()))(\r\n",
                "7\r\n59 50\r\n"
            ],
            [
                "100\r\n()()()()()()()()()()())(()()()()()()()()()()()()()()()()()()()())(()()()()()()()()()()()()()()()()()\r\n",
                "29\r\n66 23\r\n"
            ],
            [
                "100\r\n((()()))(()()))(())))((()((()()))(()))())((()(())(((())())((()))())))((()(())((())(())())))(()((())(\r\n",
                "8\r\n23 38\r\n"
            ],
            [
                "100\r\n))()()(())()()(()()())((()()())())((())())((()))(())()((()))((())())()((()())())(()())(())(()(()))((\r\n",
                "23\r\n24 31\r\n"
            ],
            [
                "101\r\n(())))))()))()())(()))((())))((())(()()()(()()((()()((()((())))((()))()(())(()(())((()))(()))()(((()(\r\n",
                "0\r\n1 1\r\n"
            ],
            [
                "100\r\n)()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()(\r\n",
                "50\r\n2 2\r\n"
            ]
        ]
    }
]