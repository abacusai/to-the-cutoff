[
    {
        "name": "Two Rooted Trees",
        "description": "You have two rooted undirected trees, each contains n vertices. Let's number\nthe vertices of each tree with integers from 1 to n. The root of each tree is\nat vertex 1. The edges of the first tree are painted blue, the edges of the\nsecond one are painted red. For simplicity, let's say that the first tree is\nblue and the second tree is red. Edge x, y is called bad for edge p, q if\ntwo conditions are fulfilled: The color of edge x, y is different from the\ncolor of edge p, q. Let's consider the tree of the same color that edge p,\nq is. Exactly one of vertices x, y lies both in the subtree of vertex p and\nin the subtree of vertex q. In this problem, your task is to simulate the\nprocess described below. The process consists of several stages: On each stage\nedges of exactly one color are deleted. On the first stage, exactly one blue\nedge is deleted. Let's assume that at the stage i we've deleted edges u1,\nv1, u2, v2, ..., uk, vk. At the stage i + 1 we will delete all undeleted\nbad edges for edge u1, v1, then we will delete all undeleted bad edges for\nedge u2, v2 and so on until we reach edge uk, vk. For each stage of\ndeleting edges determine what edges will be removed on the stage. Note that\nthe definition of a bad edge always considers the initial tree before it had\nany edges removed. Input The first line contains integer n (2 \u2264 n \u2264 2\u00b710^5) \u2014\nthe number of vertices in each tree. The next line contains n - 1 positive\nintegers a2, a3, ..., an (1 \u2264 ai \u2264 n; ai \u2260 i) \u2014 the description of edges of\nthe first tree. Number ai means that the first tree has an edge connecting\nvertex ai and vertex i. The next line contains n - 1 positive integers b2, b3,\n..., bn (1 \u2264 bi \u2264 n; bi \u2260 i) \u2014 the description of the edges of the second\ntree. Number bi means that the second tree has an edge connecting vertex bi\nand vertex i. The next line contains integer idx (1 \u2264 idx < n) \u2014 the index of\nthe blue edge that was removed on the first stage. Assume that the edges of\neach tree are numbered with numbers from 1 to n - 1 in the order in which they\nare given in the input. Output For each stage of removing edges print its\ndescription. Each description must consist of exactly two lines. If this is\nthe stage when blue edges are deleted, then the first line of the description\nmust contain word Blue, otherwise \u2014 word Red. In the second line print the\nindexes of the edges that will be deleted on this stage in the increasing\norder. Examples Input 5 1 1 1 1 4 2 1 1 3 Output Blue 3 Red 1 3 Blue 1 2 Red 2\nNote For simplicity let's assume that all edges of the root tree received some\ndirection, so that all vertices are reachable from vertex 1. Then a subtree of\nvertex v is a set of vertices reachable from vertex v in the resulting\ndirected graph (vertex v is also included in the set).\n\n",
        "cf_contest_id": 403,
        "cf_index": "E",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5\r\n1 1 1 1\r\n4 2 1 1\r\n3\r\n",
                "Blue\r\n3\r\nRed\r\n1 3 \r\nBlue\r\n1 2 \r\nRed\r\n2 \r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n10 1 5 10 8 1 1 7 8\r\n6 1 1 1 5 1 4 6 7\r\n4\r\n",
                "Blue\r\n4\r\nRed\r\n3 4 5 7 \r\nBlue\r\n1 3 5 7 8 9 \r\nRed\r\n1 8 9 \r\n"
            ],
            [
                "10\r\n8 10 6 1 1 9 1 1 1\r\n1 1 1 7 2 1 1 3 4\r\n8\r\n",
                "Blue\r\n8\r\nRed\r\n4 6 8 \r\nBlue\r\n4 6 \r\n"
            ],
            [
                "3\r\n1 2\r\n1 1\r\n2\r\n",
                "Blue\r\n2\r\nRed\r\n2 \r\n"
            ],
            [
                "2\r\n1\r\n1\r\n1\r\n",
                "Blue\r\n1\r\nRed\r\n1 \r\n"
            ],
            [
                "3\r\n1 1\r\n1 1\r\n2\r\n",
                "Blue\r\n2\r\nRed\r\n2 \r\n"
            ],
            [
                "4\r\n1 4 1\r\n4 2 1\r\n2\r\n",
                "Blue\r\n2\r\nRed\r\n2 \r\n"
            ],
            [
                "6\r\n6 4 6 6 1\r\n1 6 5 1 1\r\n4\r\n",
                "Blue\r\n4\r\nRed\r\n3 4 \r\nBlue\r\n2 3 \r\nRed\r\n2 \r\n"
            ],
            [
                "7\r\n1 1 2 7 7 2\r\n1 7 7 3 2 1\r\n3\r\n",
                "Blue\r\n3\r\nRed\r\n3 \r\n"
            ]
        ]
    }
]