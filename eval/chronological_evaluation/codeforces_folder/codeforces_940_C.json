[
    {
        "name": "Phone Numbers",
        "description": "And where the are the phone numbers? You are given a string s consisting of\nlowercase English letters and an integer k. Find the lexicographically\nsmallest string t of length k, such that its set of letters is a subset of the\nset of letters of s and s is lexicographically smaller than t. It's guaranteed\nthat the answer exists. Note that the set of letters is a set, not a multiset.\nFor example, the set of letters of abadaba is a, b, d. String p is\nlexicographically smaller than string q, if p is a prefix of q, is not equal\nto q or there exists i, such that pi < qi and for all j < i it is satisfied\nthat pj = qj. For example, abc is lexicographically smaller than abcd , abd is\nlexicographically smaller than abec, afa is not lexicographically smaller than\nab and a is not lexicographically smaller than a. Input The first line of\ninput contains two space separated integers n and k (1 \u2264 n, k \u2264 100 000) \u2014 the\nlength of s and the required length of t. The second line of input contains\nthe string s consisting of n lowercase English letters. Output Output the\nstring t conforming to the requirements above. It's guaranteed that the answer\nexists. Examples Input 3 3 abc Output aca Input 3 2 abc Output ac Input 3 3\nayy Output yaa Input 2 3 ba Output baa Note In the first example the list of\nstrings t of length 3, such that the set of letters of t is a subset of\nletters of s is as follows: aaa, aab, aac, aba, abb, abc, aca, acb, .... Among\nthem, those are lexicographically greater than abc: aca, acb, .... Out of\nthose the lexicographically smallest is aca.\n\n",
        "cf_contest_id": 940,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\nabc\r\n",
                "aca\r\n"
            ],
            [
                "3 2\r\nabc\r\n",
                "ac\r\n"
            ],
            [
                "3 3\r\nayy\r\n",
                "yaa\r\n"
            ],
            [
                "2 3\r\nba\r\n",
                "baa\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 3\r\nf\r\n",
                "fff\r\n"
            ],
            [
                "3 1\r\nazz\r\n",
                "z\r\n"
            ],
            [
                "3 3\r\nzbf\r\n",
                "zbz\r\n"
            ],
            [
                "2 3\r\ngi\r\n",
                "gig\r\n"
            ],
            [
                "3 2\r\nyzy\r\n",
                "zy\r\n"
            ],
            [
                "5 10\r\nkekff\r\n",
                "kekffeeeee\r\n"
            ],
            [
                "10 5\r\nhqqqqcdddb\r\n",
                "qbbbb\r\n"
            ],
            [
                "10 10\r\nmrfkcsxcuj\r\n",
                "mrfkcsxcuk\r\n"
            ],
            [
                "10 3\r\nggjnohlepu\r\n",
                "ggl\r\n"
            ],
            [
                "8 9\r\npppppppp\r\n",
                "ppppppppp\r\n"
            ],
            [
                "10 7\r\nffffffffyf\r\n",
                "ffffffy\r\n"
            ],
            [
                "10 2\r\nkmiejhcimj\r\n",
                "mc\r\n"
            ],
            [
                "10 1\r\ngiwekrmngf\r\n",
                "i\r\n"
            ],
            [
                "8 8\r\nlolololo\r\n",
                "lololool\r\n"
            ],
            [
                "10 9\r\nbcegikmyyy\r\n",
                "bcegikybb\r\n"
            ]
        ]
    }
]