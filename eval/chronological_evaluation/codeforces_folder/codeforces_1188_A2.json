[
    {
        "name": "Add on a Tree: Revolution",
        "description": "Note that this is the second problem of the two similar problems. You can hack\nthis problem if you solve it. But you can hack the previous problem only if\nyou solve both problems. You are given a tree with \n    n\n nodes. In the\nbeginning, \n    0\n is written on all edges. In one operation, you can choose\nany \n    2\n distinct leaves \n    u\n, \n    v\n and any integer number \n    x\n\nand add \n    x\n to values written on all edges on the simple path between\n\n    u\n and \n    v\n. Note that in previous subtask \n    x\n was allowed to be\nany real, here it has to be integer. For example, on the picture below you can\nsee the result of applying two operations to the graph: adding \n    2\n on the\npath from \n    7\n to \n    6\n, and then adding \n    -1\n on the path from\n\n    4\n to \n    5\n. You are given some configuration of nonnegative integer\npairwise different even numbers, written on the edges. For a given\nconfiguration determine if it is possible to achieve it with these operations,\nand, if it is possible, output the sequence of operations that leads to the\ngiven configuration. Constraints on the operations are listed in the output\nformat section. Leave is a node of a tree of degree \n    1\n. Simple path is a\npath that doesn't contain any node twice. Input The first line contains a\nsingle integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 1000\n) \u2014 the number of nodes in a\ntree. Each of the next \n    n-1\n lines contains three integers \n    u\n,\n\n    v\n, \n    val\n (\n    1 \n    \u2264 u, v \n    \u2264 n\n, \n    u \n    \u2260 v\n, \n    0 \n    \u2264\n    val \n    \u2264 10\n     000\n), meaning that there is an edge between nodes \n    u\n\nand \n    v\n with \n    val\n written on it. It is guaranteed that these edges\nform a tree. It is guaranteed that all \n    val\n numbers are pairwise\ndifferent and even. Output If there aren't any sequences of operations which\nlead to the given configuration, output \"NO\". If it exists, output \"YES\" in\nthe first line. In the second line output \n    m\n \u2014 number of operations you\nare going to apply (\n    0 \n    \u2264 m \n    \u2264 10^5\n). Note that you don't have to\nminimize the number of the operations! In the next \n    m\n lines output the\noperations in the following format: \n    u, v, x\n (\n    1 \n    \u2264 u, v \n    \u2264 n\n,\n\n    u \n    \u2260 v\n, \n    x\n \u2014 integer, \n    -10^9 \n    \u2264 x \n    \u2264 10^9\n), where\n\n    u, v\n \u2014 leaves, \n    x\n \u2014 number we are adding. It is guaranteed that if\nthere exists a sequence of operations producing given configuration, then\nthere exists a sequence of operations producing given configuration,\nsatisfying all the conditions above. Examples Input 5 1 2 2 2 3 4 3 4 10 3 5\n18 Output NO Input 6 1 2 6 1 3 8 1 4 12 2 5 2 2 6 4 Output YES 4 3 6 1 4 6 3 3\n4 7 4 5 2 Note The configuration from the first sample is drawn below, and it\nis impossible to achieve. The sequence of operations from the second sample is\nillustrated below.\n\n",
        "cf_contest_id": 1188,
        "cf_index": "A2",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 2 2\r\n2 3 4\r\n3 4 10\r\n3 5 18\r\n",
                "NO\r\n"
            ],
            [
                "6\r\n1 2 6\r\n1 3 8\r\n1 4 12\r\n2 5 2\r\n2 6 4\r\n",
                "YES\r\n9\r\n3 6 8\r\n4 6 12\r\n3 6 -7\r\n4 6 -7\r\n3 4 7\r\n5 6 2\r\n3 6 -2\r\n5 6 -2\r\n3 5 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 2 100\r\n",
                "YES\r\n1\r\n1 2 100\r\n"
            ],
            [
                "3\r\n1 2 1000\r\n2 3 100\r\n",
                "NO\r\n"
            ],
            [
                "2\r\n1 2 10000\r\n",
                "YES\r\n1\r\n1 2 10000\r\n"
            ],
            [
                "20\r\n1 15 1018\r\n1 2 2754\r\n13 14 3440\r\n1 12 8660\r\n1 17 3344\r\n13 4 5218\r\n13 11 8270\r\n1 6 4364\r\n1 13 316\r\n13 18 4254\r\n1 10 4252\r\n1 3 2556\r\n13 16 3348\r\n1 7 8978\r\n13 5 2220\r\n13 8 1148\r\n13 9 7330\r\n13 20 2246\r\n1 19 7942\r\n",
                "YES\r\n23\r\n14 20 3440\r\n4 20 5218\r\n11 20 8270\r\n15 20 1018\r\n2 20 2754\r\n12 20 8660\r\n17 20 3344\r\n6 20 4364\r\n10 20 4252\r\n3 20 2556\r\n7 20 8978\r\n19 20 7942\r\n15 20 -21776\r\n19 20 -21776\r\n15 19 21776\r\n18 20 4254\r\n16 20 3348\r\n5 20 2220\r\n8 20 1148\r\n9 20 7330\r\n14 20 -16649\r\n9 20 -16649\r\n14 9 16649\r\n"
            ],
            [
                "20\r\n1 18 9452\r\n2 18 1630\r\n3 18 294\r\n4 16 4200\r\n5 16 2174\r\n7 13 7538\r\n8 13 5742\r\n9 13 6474\r\n10 11 2864\r\n12 11 634\r\n14 11 670\r\n15 11 8938\r\n17 11 7304\r\n19 6 9894\r\n20 6 3168\r\n18 6 6072\r\n16 6 2952\r\n13 6 7844\r\n11 6 1336\r\n",
                "YES\r\n29\r\n19 20 9894\r\n1 20 9452\r\n2 20 1630\r\n3 20 294\r\n1 20 -2652\r\n3 20 -2652\r\n1 3 2652\r\n4 20 4200\r\n5 20 2174\r\n4 20 -1711\r\n5 20 -1711\r\n4 5 1711\r\n7 20 7538\r\n8 20 5742\r\n9 20 6474\r\n7 20 -5955\r\n9 20 -5955\r\n7 9 5955\r\n10 20 2864\r\n12 20 634\r\n14 20 670\r\n15 20 8938\r\n17 20 7304\r\n10 20 -9537\r\n17 20 -9537\r\n10 17 9537\r\n19 20 -12465\r\n10 20 -12465\r\n19 10 12465\r\n"
            ],
            [
                "10\r\n4 8 9750\r\n5 8 9292\r\n6 3 6168\r\n7 3 3314\r\n9 2 5924\r\n10 2 7624\r\n8 1 3046\r\n3 1 9450\r\n2 1 7286\r\n",
                "YES\r\n17\r\n9 10 5924\r\n4 10 9750\r\n5 10 9292\r\n4 10 -7998\r\n5 10 -7998\r\n4 5 7998\r\n6 10 6168\r\n7 10 3314\r\n6 10 -16\r\n7 10 -16\r\n6 7 16\r\n4 10 -2605\r\n6 10 -2605\r\n4 6 2605\r\n9 10 -2793\r\n4 10 -2793\r\n9 4 2793\r\n"
            ],
            [
                "2\r\n1 2 3182\r\n",
                "YES\r\n1\r\n1 2 3182\r\n"
            ],
            [
                "4\r\n2 4 8896\r\n2 3 3064\r\n2 1 2256\r\n",
                "YES\r\n5\r\n3 4 3064\r\n1 4 2256\r\n3 4 1788\r\n1 4 1788\r\n3 1 -1788\r\n"
            ],
            [
                "3\r\n2 3 4524\r\n2 1 6394\r\n",
                "NO\r\n"
            ],
            [
                "5\r\n5 1 334\r\n5 2 8744\r\n5 3 2572\r\n5 4 640\r\n",
                "YES\r\n6\r\n1 4 334\r\n2 4 8744\r\n3 4 2572\r\n1 4 -5505\r\n3 4 -5505\r\n1 3 5505\r\n"
            ],
            [
                "6\r\n3 4 4772\r\n3 2 3920\r\n1 5 8416\r\n1 3 7736\r\n3 6 1540\r\n",
                "NO\r\n"
            ],
            [
                "10\r\n8 2 3660\r\n5 6 4138\r\n1 8 7650\r\n2 9 5456\r\n1 4 4928\r\n8 10 2094\r\n10 5 9086\r\n2 7 5564\r\n2 3 4538\r\n",
                "NO\r\n"
            ],
            [
                "19\r\n19 10 8268\r\n8 14 3324\r\n10 13 8780\r\n10 4 3172\r\n8 2 6408\r\n7 18 8390\r\n19 7 9074\r\n8 15 882\r\n8 19 7512\r\n7 6 834\r\n19 11 7600\r\n7 17 1148\r\n10 5 7958\r\n19 12 8680\r\n7 1 4848\r\n8 9 7916\r\n19 3 2488\r\n7 16 2962\r\n",
                "YES\r\n26\r\n13 18 8780\r\n4 18 3172\r\n5 18 7958\r\n13 18 -5821\r\n5 18 -5821\r\n13 5 5821\r\n14 18 3324\r\n2 18 6408\r\n15 18 882\r\n9 18 7916\r\n14 18 -5509\r\n9 18 -5509\r\n14 9 5509\r\n11 18 7600\r\n12 18 8680\r\n3 18 2488\r\n13 18 -12737\r\n3 18 -12737\r\n13 3 12737\r\n6 18 834\r\n17 18 1148\r\n1 18 4848\r\n16 18 2962\r\n13 18 -5238\r\n16 18 -5238\r\n13 16 5238\r\n"
            ]
        ]
    }
]