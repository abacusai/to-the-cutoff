[
    {
        "name": "Average Superhero Gang Power ",
        "description": "Every superhero has been given a power value by the Felicity Committee. The\navengers crew wants to maximize the average power of the superheroes in their\nteam by performing certain operations. Initially, there are \n    n\n\nsuperheroes in avengers team having powers \n    a_1, a_2, \n    \u2026, a_n\n,\nrespectively. In one operation, they can remove one superhero from their team\n(if there are at least two) or they can increase the power of a superhero by\n\n    1\n. They can do at most \n    m\n operations. Also, on a particular\nsuperhero at most \n    k\n operations can be done. Can you help the avengers\nteam to maximize the average power of their crew? Input The first line\ncontains three integers \n    n\n, \n    k\n and \n    m\n (\n    1 \n    \u2264 n \n    \u2264\n    10^5\n, \n    1 \n    \u2264 k \n    \u2264 10^5\n, \n    1 \n    \u2264 m \n    \u2264 10^7\n) \u2014 the\nnumber of superheroes, the maximum number of times you can increase power of a\nparticular superhero, and the total maximum number of operations. The second\nline contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i\n    \n    \u2264 10^6\n) \u2014 the initial powers of the superheroes in the cast of\navengers. Output Output a single number \u2014 the maximum final average power.\nYour answer is considered correct if its absolute or relative error does not\nexceed \n    10^-6\n. Formally, let your answer be \n    a\n, and the jury's\nanswer be \n    b\n. Your answer is accepted if and only if \n    |a -\n    b|/\n    max(1, |b|)\n    \u2264 10^-6\n. Examples Input 2 4 6 4 7 Output\n11.00000000000000000000 Input 4 2 6 1 3 2 3 Output 5.00000000000000000000 Note\nIn the first example, the maximum average is obtained by deleting the first\nelement and increasing the second element four times. In the second sample,\none of the ways to achieve maximum average is to delete the first and the\nthird element and increase the second and the fourth elements by \n    2\n each.\n\n",
        "cf_contest_id": 1111,
        "cf_index": "B",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 4 6\r\n4 7\r\n",
                "11.0\r\n"
            ],
            [
                "4 2 6\r\n1 3 2 3\r\n",
                "5.0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 59139 1199252\r\n70888\r\n",
                "130027.0\r\n"
            ],
            [
                "9 99252 6470888\r\n74578 2746 96295 86884 21198 28655 22503 7868 47942\r\n",
                "195547.0\r\n"
            ],
            [
                "9 2 8\r\n74578 2746 96295 86884 21198 28655 22503 7868 47942\r\n",
                "96295.0\r\n"
            ],
            [
                "1 1 1\r\n1\r\n",
                "2.0\r\n"
            ],
            [
                "1 9859 4748096\r\n75634\r\n",
                "85493.0\r\n"
            ],
            [
                "1 25987 3264237\r\n88891\r\n",
                "114878.0\r\n"
            ],
            [
                "1 9411 6813081\r\n2149\r\n",
                "11560.0\r\n"
            ],
            [
                "9 48096 5475634\r\n28248 27808 75072 58867 37890 95515 26685 68307 40390\r\n",
                "143611.0\r\n"
            ],
            [
                "7 64237 4288891\r\n90429 44358 21145 30851 89174 29670 63571\r\n",
                "154666.0\r\n"
            ],
            [
                "1 13081 3102149\r\n19907\r\n",
                "32988.0\r\n"
            ],
            [
                "9 29221 2106895\r\n82089 18673 2890 99009 89855 30685 39232 82330 30021\r\n",
                "128230.0\r\n"
            ],
            [
                "9 10770 5887448\r\n3054 67926 81667 95184 41139 64840 76118 18577 22469\r\n",
                "105954.0\r\n"
            ],
            [
                "7 35422 9924898\r\n32532 92988 84636 99872 57831 31700 47597\r\n",
                "135294.0\r\n"
            ],
            [
                "5 51563 3705451\r\n94713 9537 30709 63343 41819\r\n",
                "146276.0\r\n"
            ],
            [
                "9 407 2710197\r\n24191 58791 9486 68030 25807 11 88665 32600 12100\r\n",
                "89072.0\r\n"
            ],
            [
                "8 96518 274071\r\n59971 50121 4862 43967 73607 19138 90754 19513\r\n",
                "187272.0\r\n"
            ],
            [
                "9 6 4\r\n28248 27808 75072 58867 37890 95515 26685 68307 40390\r\n",
                "67630.2\r\n"
            ],
            [
                "7 7 1\r\n90429 44358 21145 30851 89174 29670 63571\r\n",
                "58008.833333333336\r\n"
            ],
            [
                "1 1 9\r\n19907\r\n",
                "19908.0\r\n"
            ],
            [
                "9 1 5\r\n82089 18673 2890 99009 89855 30685 39232 82330 30021\r\n",
                "88320.75\r\n"
            ],
            [
                "9 10 8\r\n3054 67926 81667 95184 41139 64840 76118 18577 22469\r\n",
                "95184.0\r\n"
            ],
            [
                "7 2 8\r\n32532 92988 84636 99872 57831 31700 47597\r\n",
                "99874.0\r\n"
            ],
            [
                "5 3 1\r\n94713 9537 30709 63343 41819\r\n",
                "57646.0\r\n"
            ],
            [
                "9 7 7\r\n24191 58791 9486 68030 25807 11 88665 32600 12100\r\n",
                "78347.5\r\n"
            ],
            [
                "8 8 1\r\n59971 50121 4862 43967 73607 19138 90754 19513\r\n",
                "51010.142857142855\r\n"
            ],
            [
                "5 2 1\r\n4 4 4 4 5\r\n",
                "4.4\r\n"
            ],
            [
                "3 3 2\r\n2 2 2\r\n",
                "2.6666666666666665\r\n"
            ],
            [
                "4 5 5\r\n3 3 3 3\r\n",
                "5.0\r\n"
            ],
            [
                "7 3 3\r\n1 2 2 2 2 2 2\r\n",
                "2.3333333333333335\r\n"
            ],
            [
                "5 4 4\r\n5 5 5 5 5\r\n",
                "5.8\r\n"
            ],
            [
                "4 2 2\r\n1 3 3 3\r\n",
                "3.3333333333333335\r\n"
            ],
            [
                "3 1 2\r\n5 5 5\r\n",
                "5.666666666666667\r\n"
            ],
            [
                "3 2 2\r\n1 2 2\r\n",
                "2.5\r\n"
            ],
            [
                "3 5 2\r\n2 6 6\r\n",
                "6.5\r\n"
            ],
            [
                "4 1 2\r\n2 4 4 4\r\n",
                "4.333333333333333\r\n"
            ],
            [
                "3 1 2\r\n1 100 100\r\n",
                "100.5\r\n"
            ],
            [
                "4 1 2\r\n4 4 4 4\r\n",
                "4.5\r\n"
            ]
        ]
    }
]