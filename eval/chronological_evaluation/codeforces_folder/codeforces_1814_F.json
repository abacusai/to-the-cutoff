[
    {
        "name": "Communication Towers",
        "description": "There are \n    n\n communication towers, numbered from \n    1\n to \n    n\n, and\n\n    m\n bidirectional wires between them. Each tower has a certain set of\nfrequencies that it accepts, the \n    i\n-th of them accepts frequencies from\n\n    l_i\n to \n    r_i\n. Let's say that a tower \n    b\n is accessible from a\ntower \n    a\n, if there exists a frequency \n    x\n and a sequence of towers\n\n    a=v_1, v_2, \n    \u2026, v_k=b\n, where consecutive towers in the sequence are\ndirectly connected by a wire, and each of them accepts frequency \n    x\n. Note\nthat accessibility is not transitive, i. e if \n    b\n is accessible from\n\n    a\n and \n    c\n is accessible from \n    b\n, then \n    c\n may not be\naccessible from \n    a\n. Your task is to determine the towers that are\naccessible from the \n    1\n-st tower. Input The first line contains two\nintegers \n    n\n and \n    m\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n; \n    0 \n    \u2264\n    m \n    \u2264 4 \n    \u00b7 10^5\n) \u2014 the number of communication towers and the number\nof wires, respectively. Then \n    n\n lines follows, the \n    i\n-th of them\ncontains two integers \n    l_i\n and \n    r_i\n (\n    1 \n    \u2264 l_i \n    \u2264 r_i \n    \u2264\n    2 \n    \u00b7 10^5\n) \u2014 the boundaries of the acceptable frequencies for the\n\n    i\n-th tower. Then \n    m\n lines follows, the \n    i\n-th of them contains\ntwo integers \n    v_i\n and \n    u_i\n (\n    1 \n    \u2264 v_i, u_i \n    \u2264 n\n; \n    v_i\n    \n     u_i\n) \u2014 the \n    i\n-th wire that connects towers \n    v_i\n and\n\n    u_i\n. There are no two wires connecting the same pair of towers. Output\nIn a single line, print distinct integers from \n    1\n to \n    n\n in ascending\norder \u2014 the indices of the communication towers that are accessible from the\n\n    1\n-st tower. Examples Input 6 5 3 5 1 2 2 4 2 3 3 3 4 6 1 3 6 1 3 5 3 6 2\n3 Output 1 3 5 6 Input 3 1 2 3 1 4 1 1 1 3 Output 1 Input 5 5 1 3 2 3 2 2 3 5\n2 4 1 2 2 3 3 4 4 1 4 5 Output 1 2 3 4 5\n\n",
        "cf_contest_id": 1814,
        "cf_index": "F",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "divide and conquer",
            "dsu"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "6 5\r\n3 5\r\n1 2\r\n2 4\r\n2 3\r\n3 3\r\n4 6\r\n1 3\r\n6 1\r\n3 5\r\n3 6\r\n2 3\r\n",
                "1 3 5 6 "
            ],
            [
                "3 1\r\n2 3\r\n1 4\r\n1 1\r\n1 3\r\n",
                "1 "
            ],
            [
                "5 5\r\n1 3\r\n2 3\r\n2 2\r\n3 5\r\n2 4\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n4 5\r\n",
                "1 2 3 4 5 "
            ]
        ],
        "private_cases": [
            [
                "1 0\r\n4 10\r\n",
                "1 "
            ],
            [
                "10 20\r\n1 5\r\n4 4\r\n3 4\r\n1 4\r\n3 5\r\n7 7\r\n1 4\r\n4 5\r\n2 5\r\n1 1\r\n10 4\r\n9 8\r\n5 1\r\n2 6\r\n7 1\r\n1 10\r\n7 8\r\n7 6\r\n10 8\r\n4 6\r\n2 3\r\n5 4\r\n5 8\r\n4 9\r\n10 6\r\n4 2\r\n6 8\r\n2 9\r\n8 1\r\n1 9\r\n",
                "1 2 3 4 5 7 8 9 10 "
            ],
            [
                "5 0\r\n1 4\r\n1 1\r\n5 8\r\n2 10\r\n1 3\r\n",
                "1 "
            ]
        ]
    }
]