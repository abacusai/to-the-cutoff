[
    {
        "name": "Peculiar Movie Preferences",
        "description": "Mihai plans to watch a movie. He only likes palindromic movies, so he wants to\nskip some (possibly zero) scenes to make the remaining parts of the movie\npalindromic. You are given a list \n    s\n of \n    n\n non-empty strings of\nlength at most \n    3\n, representing the scenes of Mihai's movie. A\nsubsequence of \n    s\n is called awesome if it is non-empty and the\nconcatenation of the strings in the subsequence, in order, is a palindrome.\nCan you help Mihai check if there is at least one awesome subsequence of\n\n    s\n? A palindrome is a string that reads the same backward as forward, for\nexample strings \"z\", \"aaa\", \"aba\", \"abccba\" are palindromes, but strings\n\"codeforces\", \"reality\", \"ab\" are not. A sequence \n    a\n is a non-empty\nsubsequence of a non-empty sequence \n    b\n if \n    a\n can be obtained from\n\n    b\n by deletion of several (possibly zero, but not all) elements. Input\nThe first line of the input contains a single integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 100\n) \u2014 the number of test cases. The description of test cases\nfollows. The first line of each test case contains a single integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the number of scenes in the movie. Then follows\n\n    n\n lines, the \n    i\n-th of which containing a single non-empty string\n\n    s_i\n of length at most \n    3\n, consisting of lowercase Latin letters. It\nis guaranteed that the sum of \n    n\n over all test cases does not exceed\n\n    10^5\n. Output For each test case, print \"YES\" if there is an awesome\nsubsequence of \n    s\n, or \"NO\" otherwise (case insensitive). Example Input 6\n5 zx ab cc zx ba 2 ab bad 4 co def orc es 3 a b c 3 ab cd cba 2 ab ab Output\nYES NO NO YES YES NO Note In the first test case, an awesome subsequence of\n\n    s\n is \n    [ab, cc, ba]\n\n\n",
        "cf_contest_id": 1628,
        "cf_index": "B",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "6\r\n5\r\nzx\r\nab\r\ncc\r\nzx\r\nba\r\n2\r\nab\r\nbad\r\n4\r\nco\r\ndef\r\norc\r\nes\r\n3\r\na\r\nb\r\nc\r\n3\r\nab\r\ncd\r\ncba\r\n2\r\nab\r\nab\r\n",
                "YES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\n"
            ]
        ],
        "private_cases": []
    }
]