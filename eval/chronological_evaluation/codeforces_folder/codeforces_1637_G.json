[
    {
        "name": "Birthday",
        "description": "Vitaly gave Maxim \n    n\n numbers \n    1, 2, \n    \u2026, n\n for his \n    16\n-th\nbirthday. Maxim was tired of playing board games during the celebration, so he\ndecided to play with these numbers. In one step Maxim can choose two numbers\n\n    x\n and \n    y\n from the numbers he has, throw them away, and add two\nnumbers \n    x + y\n and \n    |x - y|\n instead. He wants all his numbers to be\nequal after several steps and the sum of the numbers to be minimal. Help Maxim\nto find a solution. Maxim's friends don't want to wait long, so the number of\nsteps in the solution should not exceed \n    20n\n. It is guaranteed that under\nthe given constraints, if a solution exists, then there exists a solution that\nmakes all numbers equal, minimizes their sum, and spends no more than\n\n    20n\n moves. Input The first line contains a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 25\n     000\n) \u2014 the number of test cases. Each test case\ncontains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 5 \n    \u00b7 10^4\n) \u2014 the\nnumber of integers given to Maxim. It is guaranteed that the total sum of\n\n    n\n doesn't exceed \n    5 \n    \u00b7 10^4\n. Output For each test case print\n\n    -1\n if it's impossible to make all numbers equal. Otherwise print a\nsingle integer \n    s\n (\n    0 \n    \u2264 s \n    \u2264 20n\n) \u2014 the number of steps. Then\nprint \n    s\n lines. The \n    i\n-th line must contain two integers \n    x_i\n\nand \n    y_i\n \u2014 numbers that Maxim chooses on the \n    i\n-th step. The numbers\nmust become equal after all operations. Don't forget that you not only need to\nmake all numbers equal, but also minimize their sum. It is guaranteed that\nunder the given constraints, if a solution exists, then there exists a\nsolution that makes all numbers equal, minimizes their sum, and spends no more\nthan \n    20n\n moves. Example Input 2 2 3 Output -1 3 1 3 2 2 4 0\n\n",
        "cf_contest_id": 1637,
        "cf_index": "G",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n2\r\n3\r\n",
                "-1\r\n3\r\n3 1\r\n2 2\r\n0 4\r\n"
            ]
        ],
        "private_cases": []
    }
]