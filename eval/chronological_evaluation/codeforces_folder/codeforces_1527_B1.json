[
    {
        "name": "Palindrome Game (easy version)",
        "description": "The only difference between the easy and hard versions is that the given\nstring \n    s\n in the easy version is initially a palindrome, this condition\nis not always true for the hard version. A palindrome is a string that reads\nthe same left to right and right to left. For example, \"101101\" is a\npalindrome, while \"0101\" is not. Alice and Bob are playing a game on a string\n\n    s\n (which is initially a palindrome in this version) of length \n    n\n\nconsisting of the characters '0' and '1'. Both players take alternate turns\nwith Alice going first. In each turn, the player can perform one of the\nfollowing operations: Choose any \n    i\n (\n    1 \n    \u2264 i \n    \u2264 n\n), where\n\n    s[i] =\n '0' and change \n    s[i]\n to '1'. Pay 1 dollar. Reverse the whole\nstring, pay 0 dollars. This operation is only allowed if the string is\ncurrently not a palindrome, and the last operation was not reverse. That is,\nif Alice reverses the string, then Bob can't reverse in the next move, and\nvice versa. Reversing a string means reordering its letters from the last to\nthe first. For example, \"01001\" becomes \"10010\" after reversing. The game ends\nwhen every character of string becomes '1'. The player who spends minimum\ndollars till this point wins the game and it is a draw if both spend equal\ndollars. If both players play optimally, output whether Alice wins, Bob wins,\nor if it is a draw. Input The first line contains a single integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 10^3\n). Then \n    t\n test cases follow. The first line\nof each test case contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    10^3\n). The second line of each test case contains the string \n    s\n of\nlength \n    n\n, consisting of the characters '0' and '1'. It is guaranteed\nthat the string \n    s\n is a palindrome and contains at least one '0'. Note\nthat there is no limit on the sum of \n    n\n over test cases. Output For each\ntest case print a single word in a new line: \"ALICE\", if Alice will win the\ngame, \"BOB\", if Bob will win the game, \"DRAW\", if the game ends in a draw.\nExample Input 2 4 1001 1 0 Output BOB BOB Note In the first test case of the\nexample, in the \n    1\n-st move Alice has to perform the \n    1\n-st operation,\nsince the string is currently a palindrome. in the \n    2\n-nd move Bob\nreverses the string. in the \n    3\n-rd move Alice again has to perform the\n\n    1\n-st operation. All characters of the string are '1', game over. Alice\nspends \n    2\n dollars while Bob spends \n    0\n dollars. Hence, Bob always\nwins.\n\n",
        "cf_contest_id": 1527,
        "cf_index": "B1",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "games"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n4\r\n1001\r\n1\r\n0\r\n",
                "BOB \r\nBOB \r\n"
            ]
        ],
        "private_cases": []
    }
]