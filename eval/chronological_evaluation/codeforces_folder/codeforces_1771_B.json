[
    {
        "name": "Hossam and Friends",
        "description": "Hossam makes a big party, and he will invite his friends to the party. He has\n\n    n\n friends numbered from \n    1\n to \n    n\n. They will be arranged in a\nqueue as follows: \n    1, 2, 3, \n    \u2026, n\n. Hossam has a list of \n    m\n\npairs of his friends that don't know each other. Any pair not present in this\nlist are friends. A subsegment of the queue starting from the friend \n    a\n\nand ending at the friend \n    b\n is \n    [a, a + 1, a + 2, \n    \u2026, b]\n. A\nsubsegment of the queue is called good when all pairs of that segment are\nfriends. Hossam wants to know how many pairs \n    (a, b)\n there are (\n    1\n    \n    \u2264 a \n    \u2264 b \n    \u2264 n\n), such that the subsegment starting from the friend\n\n    a\n and ending at the friend \n    b\n is good. Input The input consists of\nmultiple test cases. The first line contains a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 2 \n    \u00b7 10^4\n), the number of test cases. Description of the\ntest cases follows. The first line of each test case contains two integer\nnumbers \n    n\n and \n    m\n (\n    2 \n    \u2264 n \n    \u2264 10^5\n, \n    0 \n    \u2264 m \n    \u2264\n    10^5\n) representing the number of friends and the number of pairs,\nrespectively. The \n    i\n-th of the next \n    m\n lines contains two integers\n\n    x_i\n and \n    y_i\n (\n    1 \n    \u2264 x_i, y_i\n    \u2264 n\n, \n    x_i \n    \u2260 y_i\n)\nrepresenting a pair of Hossam's friends that don't know each other. Note that\npairs can be repeated. It is guaranteed that the sum of \n    n\n over all test\ncases does not exceed \n    10^5\n, and the sum of \n    m\n over all test cases\ndoes not exceed \n    10^5\n. Output For each test case print an integer \u2014 the\nnumber of good subsegments. Example Input 2 3 2 1 3 2 3 4 2 1 2 2 3 Output 4 5\nNote In the first example, the answer is \n    4\n. The good subsegments are:\n[1] [2] [3] [1, 2] In the second example, the answer is \n    5\n. The good\nsubsegments are: [1] [2] [3] [4] [3, 4]\n\n",
        "cf_contest_id": 1771,
        "cf_index": "B",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "constructive algorithms",
            "dp",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n3 2\r\n1 3\r\n2 3\r\n4 2\r\n1 2\r\n2 3\r\n",
                "4\r\n5\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n100000 0\r\n",
                "5000050000\r\n"
            ],
            [
                "1\r\n100000 1\r\n99999 100000\r\n",
                "4999950001\r\n"
            ]
        ]
    }
]