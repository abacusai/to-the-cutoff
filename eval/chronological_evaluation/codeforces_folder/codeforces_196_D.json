[
    {
        "name": "The Next Good String",
        "description": "In problems on strings one often has to find a string with some particular\nproperties. The problem authors were reluctant to waste time on thinking of a\nname for some string so they called it good. A string is good if it doesn't\nhave palindrome substrings longer than or equal to d. You are given string s,\nconsisting only of lowercase English letters. Find a good string t with length\n|s|, consisting of lowercase English letters, which is lexicographically\nlarger than s. Of all such strings string t must be lexicographically minimum.\nWe will call a non-empty string s[a ... b] = sasa + 1... sb (1 \u2264 a \u2264 b \u2264 |s|)\na substring of string s = s1s2... s|s|. A non-empty string s = s1s2... sn is\ncalled a palindrome if for all i from 1 to n the following fulfills: si = sn -\ni + 1. In other words, palindrome read the same in both directions. String x =\nx1x2... x|x| is lexicographically larger than string y = y1y2... y|y|, if\neither |x| > |y| and x1 = y1, x2 = y2, ... , x|y| = y|y|, or there exists such\nnumber r (r < |x|, r < |y|), that x1 = y1, x2 = y2, ... , xr = yr and xr + 1 >\nyr + 1. Characters in such strings are compared like their ASCII codes. Input\nThe first line contains integer d (1 \u2264 d \u2264 |s|). The second line contains a\nnon-empty string s, its length is no more than 4\u00b710^5 characters. The string\nconsists of lowercase English letters. Output Print the good string that\nlexicographically follows s, has the same length and consists of only\nlowercase English letters. If such string does not exist, print \"Impossible\"\n(without the quotes). Examples Input 3 aaaaaaa Output aabbcaa Input 3 zzyzzzz\nOutput Impossible Input 4 abbabbbabbb Output abbbcaaabab\n\n",
        "cf_contest_id": 196,
        "cf_index": "D",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "hashing",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\naaaaaaa\r\n",
                "aabbcaa\r\n"
            ],
            [
                "3\r\nzzyzzzz\r\n",
                "Impossible\r\n"
            ],
            [
                "4\r\nabbabbbabbb\r\n",
                "abbbcaaabab\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\naaaaaaaaaa\r\n",
                "abcabcabca\r\n"
            ],
            [
                "5\r\naaaaaaaaaaaaaaaaaaaaaaaaa\r\n",
                "aaaababbaaaacabaaaacabaaa\r\n"
            ],
            [
                "2\r\naba\r\n",
                "abc\r\n"
            ],
            [
                "3\r\nabababa\r\n",
                "abbcaab\r\n"
            ],
            [
                "3\r\nzzxzzzz\r\n",
                "zzyaabb\r\n"
            ],
            [
                "1\r\na\r\n",
                "Impossible\r\n"
            ],
            [
                "1\r\nz\r\n",
                "Impossible\r\n"
            ],
            [
                "2\r\naa\r\n",
                "ab\r\n"
            ],
            [
                "2\r\nba\r\n",
                "bc\r\n"
            ],
            [
                "2\r\nzx\r\n",
                "zy\r\n"
            ],
            [
                "2\r\nzy\r\n",
                "Impossible\r\n"
            ],
            [
                "2\r\nzz\r\n",
                "Impossible\r\n"
            ],
            [
                "3\r\nzzxyzzz\r\n",
                "zzyaabb\r\n"
            ],
            [
                "4\r\nazazazazazaz\r\n",
                "azazbaaacaba\r\n"
            ],
            [
                "4\r\nababbabaabazyzyyzyzzy\r\n",
                "ababbbcaaababbbcaaaba\r\n"
            ],
            [
                "4\r\nzyzyyzyzzyababbabaaba\r\n",
                "zyzzaaababbbcaaababbb\r\n"
            ]
        ]
    }
]