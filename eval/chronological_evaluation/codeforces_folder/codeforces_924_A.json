[
    {
        "name": "Mystical Mosaic",
        "description": "There is a rectangular grid of n rows of m initially-white cells each. Arkady\nperformed a certain number (possibly zero) of operations on it. In the i-th\noperation, a non-empty subset of rows Ri and a non-empty subset of columns Ci\nare chosen. For each row r in Ri and each column c in Ci, the intersection of\nrow r and column c is coloured black. There's another constraint: a row or a\ncolumn can only be chosen at most once among all operations. In other words,\nit means that no pair of (i, j) (i < j) exists such that or , where denotes\nintersection of sets, and denotes the empty set. You are to determine whether\na valid sequence of operations exists that produces a given final grid. Input\nThe first line contains two space-separated integers n and m (1 \u2264 n, m \u2264 50) \u2014\nthe number of rows and columns of the grid, respectively. Each of the\nfollowing n lines contains a string of m characters, each being either '.'\n(denoting a white cell) or '#' (denoting a black cell), representing the\ndesired setup. Output If the given grid can be achieved by any valid sequence\nof operations, output \"Yes\"; otherwise output \"No\" (both without quotes). You\ncan print each character in any case (upper or lower). Examples Input 5 8\n.#.#..#. .....#.. .#.#..#. #.#....# .....#.. Output Yes Input 5 5 ..#.. ..#..\n##### ..#.. ..#.. Output No Input 5 9 ........# #........ ..##.#... .......#.\n....#.#.# Output No Note For the first example, the desired setup can be\nproduced by 3 operations, as is shown below. For the second example, the\ndesired setup cannot be produced, since in order to colour the center row, the\nthird row and all columns must be selected in one operation, but after that no\ncolumn can be selected again, hence it won't be possible to colour the other\ncells in the center column.\n\n",
        "cf_contest_id": 924,
        "cf_index": "A",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 8\r\n.#.#..#.\r\n.....#..\r\n.#.#..#.\r\n#.#....#\r\n.....#..\r\n",
                "Yes\r\n"
            ],
            [
                "5 5\r\n..#..\r\n..#..\r\n#####\r\n..#..\r\n..#..\r\n",
                "No\r\n"
            ],
            [
                "5 9\r\n........#\r\n#........\r\n..##.#...\r\n.......#.\r\n....#.#.#\r\n",
                "No\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n#\r\n",
                "Yes\r\n"
            ],
            [
                "2 1\r\n.\r\n#\r\n",
                "Yes\r\n"
            ],
            [
                "2 5\r\n.####\r\n#..##\r\n",
                "No\r\n"
            ],
            [
                "5 2\r\n##\r\n##\r\n..\r\n##\r\n..\r\n",
                "Yes\r\n"
            ],
            [
                "5 2\r\n#.\r\n##\r\n##\r\n#.\r\n..\r\n",
                "No\r\n"
            ],
            [
                "50 1\r\n.\r\n.\r\n#\r\n.\r\n#\r\n.\r\n#\r\n.\r\n.\r\n#\r\n#\r\n#\r\n.\r\n#\r\n#\r\n#\r\n#\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n#\r\n#\r\n#\r\n#\r\n.\r\n.\r\n.\r\n.\r\n.\r\n#\r\n.\r\n.\r\n.\r\n#\r\n#\r\n.\r\n.\r\n#\r\n#\r\n.\r\n.\r\n#\r\n#\r\n.\r\n",
                "Yes\r\n"
            ],
            [
                "50 2\r\n..\r\n..\r\n#.\r\n..\r\n.#\r\n..\r\n..\r\n..\r\n.#\r\n..\r\n..\r\n.#\r\n##\r\n..\r\n..\r\n..\r\n.#\r\n..\r\n..\r\n.#\r\n..\r\n..\r\n.#\r\n..\r\n..\r\n.#\r\n..\r\n.#\r\n..\r\n.#\r\n..\r\n.#\r\n.#\r\n.#\r\n..\r\n..\r\n..\r\n.#\r\n.#\r\n.#\r\n..\r\n..\r\n.#\r\n.#\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n",
                "No\r\n"
            ],
            [
                "1 1\r\n.\r\n",
                "Yes\r\n"
            ],
            [
                "2 3\r\n#.#\r\n###\r\n",
                "No\r\n"
            ],
            [
                "2 3\r\n#.#\r\n##.\r\n",
                "No\r\n"
            ],
            [
                "4 4\r\n###.\r\n##.#\r\n#.##\r\n.###\r\n",
                "No\r\n"
            ],
            [
                "3 3\r\n.##\r\n#.#\r\n##.\r\n",
                "No\r\n"
            ],
            [
                "2 2\r\n##\r\n#.\r\n",
                "No\r\n"
            ]
        ]
    }
]