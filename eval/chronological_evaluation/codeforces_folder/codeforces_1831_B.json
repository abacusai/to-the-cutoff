[
    {
        "name": "Array merging",
        "description": "You are given two arrays \n    a\n and \n    b\n both of length \n    n\n. You will\nmerge\n    ^\n    \u2020\n these arrays forming another array \n    c\n of length\n\n    2 \n    \u00b7 n\n. You have to find the maximum length of a subarray\nconsisting of equal values across all arrays \n    c\n that could be obtained.\n\n    ^\n    \u2020\n A merge of two arrays results in an array \n    c\n composed by\nsuccessively taking the first element of either array (as long as that array\nis nonempty) and removing it. After this step, the element is appended to the\nback of \n    c\n. We repeat this operation as long as we can (i.e. at least one\narray is nonempty). Input Each test contains multiple test cases. The first\nline of input contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014\nthe number of test cases. The description of test cases follows. The first\nline of each test case contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n) \u2014 the length of the array \n    a\n and \n    b\n. The second\nline of each test case contains \n    n\n integers \n    a_1,a_2,\n    \u2026,a_n\n\n(\n    1 \n    \u2264 a_i \n    \u2264 2 \n    \u00b7 n\n) \u2014 the elements of array \n    a\n. The\nthird line of each test case contains \n    n\n integers\n\n    b_1,b_2,\n    \u2026,b_n\n (\n    1 \n    \u2264 b_i \n    \u2264 2 \n    \u00b7 n\n) \u2014 the\nelements of array \n    b\n. It is guaranteed that the sum of \n    n\n across all\ntest cases does not exceed \n    2 \n    \u00b7 10^5\n. Output For each test case,\noutput the maximum length of a subarray consisting of equal values across all\nmerges. Example Input 4 1 2 2 3 1 2 3 4 5 6 2 1 2 2 1 5 1 2 2 2 2 2 1 1 1 1\nOutput 2 1 2 5 Note In the first test case, we can only make \n    c=[2,2]\n,\nthus the answer is \n    2\n. In the second test case, since all values are\ndistinct, the answer must be \n    1\n. In the third test case, the arrays\n\n    c\n we can make are \n    [1,2,1,2]\n, \n    [1,2,2,1]\n, \n    [2,1,1,2]\n,\n\n    [2,1,2,1]\n. We can see that the answer is \n    2\n when we choose\n\n    c=[1,2,2,1]\n.\n\n",
        "cf_contest_id": 1831,
        "cf_index": "B",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1\r\n2\r\n2\r\n3\r\n1 2 3\r\n4 5 6\r\n2\r\n1 2\r\n2 1\r\n5\r\n1 2 2 2 2\r\n2 1 1 1 1\r\n",
                "2\r\n1\r\n2\r\n5\r\n"
            ]
        ],
        "private_cases": []
    }
]