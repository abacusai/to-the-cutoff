[
    {
        "name": "Yet Another Task with Queens",
        "description": "A queen is the strongest chess piece. In modern chess the queen can move any\nnumber of squares in any horizontal, vertical or diagonal direction\n(considering that there're no other pieces on its way). The queen combines the\noptions given to the rook and the bishop. There are m queens on a square n \u00d7 n\nchessboard. You know each queen's positions, the i-th queen is positioned in\nthe square (ri, ci), where ri is the board row number (numbered from the top\nto the bottom from 1 to n), and ci is the board's column number (numbered from\nthe left to the right from 1 to n). No two queens share the same position. For\neach queen one can count w \u2014 the number of other queens that the given queen\nthreatens (attacks). For a fixed attack direction only the first queen in this\ndirection is under attack if there are many queens are on the ray of the\nattack. Obviously, for any queen w is between 0 and 8, inclusive. Print the\nsequence t0, t1, ..., t8, where ti is the number of queens that threaten\nexactly i other queens, i.e. the number of queens that their w equals i. Input\nThe first line of the input contains a pair of integers n, m (1 \u2264 n, m \u2264\n10^5), where n is the size of the board and m is the number of queens on the\nboard. Then m following lines contain positions of the queens, one per line.\nEach line contains a pair of integers ri, ci (1 \u2264 ri, ci \u2264 n) \u2014 the queen's\nposition. No two queens stand on the same square. Output Print the required\nsequence t0, t1, ..., t8, separating the numbers with spaces. Examples Input 8\n4 4 3 4 8 6 5 1 6 Output 0 3 0 1 0 0 0 0 0 Input 10 3 1 1 1 2 1 3 Output 0 2 1\n0 0 0 0 0 0\n\n",
        "cf_contest_id": 131,
        "cf_index": "E",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8 4\r\n4 3\r\n4 8\r\n6 5\r\n1 6\r\n",
                "0 3 0 1 0 0 0 0 0\r\n"
            ],
            [
                "10 3\r\n1 1\r\n1 2\r\n1 3\r\n",
                "0 2 1 0 0 0 0 0 0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1 1\r\n",
                "1 0 0 0 0 0 0 0 0\r\n"
            ],
            [
                "2 1\r\n1 1\r\n",
                "1 0 0 0 0 0 0 0 0\r\n"
            ],
            [
                "2 2\r\n1 1\r\n1 2\r\n",
                "0 2 0 0 0 0 0 0 0\r\n"
            ],
            [
                "2 4\r\n2 1\r\n1 2\r\n2 2\r\n1 1\r\n",
                "0 0 0 4 0 0 0 0 0\r\n"
            ],
            [
                "8 8\r\n8 3\r\n3 7\r\n7 1\r\n4 4\r\n1 6\r\n1 7\r\n3 3\r\n2 1\r\n",
                "0 3 2 3 0 0 0 0 0\r\n"
            ],
            [
                "10 4\r\n5 6\r\n4 8\r\n8 4\r\n7 4\r\n",
                "0 2 2 0 0 0 0 0 0\r\n"
            ],
            [
                "10 10\r\n6 5\r\n3 5\r\n3 4\r\n6 10\r\n3 10\r\n4 6\r\n6 2\r\n7 5\r\n1 8\r\n2 2\r\n",
                "0 5 1 2 1 1 0 0 0\r\n"
            ],
            [
                "10 20\r\n6 10\r\n3 10\r\n10 4\r\n5 3\r\n9 4\r\n10 1\r\n10 3\r\n10 7\r\n8 5\r\n7 2\r\n4 7\r\n5 1\r\n2 9\r\n5 5\r\n6 6\r\n9 8\r\n2 10\r\n9 10\r\n1 4\r\n7 4\r\n",
                "0 0 4 9 4 1 2 0 0\r\n"
            ],
            [
                "100 10\r\n97 5\r\n53 35\r\n92 86\r\n54 95\r\n98 13\r\n36 23\r\n55 56\r\n96 94\r\n25 96\r\n49 31\r\n",
                "6 4 0 0 0 0 0 0 0\r\n"
            ],
            [
                "10 5\r\n2 3\r\n1 3\r\n3 3\r\n2 1\r\n2 5\r\n",
                "0 4 0 0 1 0 0 0 0\r\n"
            ]
        ]
    }
]