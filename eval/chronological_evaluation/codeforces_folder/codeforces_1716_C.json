[
    {
        "name": "Robot in a Hallway",
        "description": "There is a grid, consisting of \n    2\n rows and \n    m\n columns. The rows are\nnumbered from \n    1\n to \n    2\n from top to bottom. The columns are numbered\nfrom \n    1\n to \n    m\n from left to right. The robot starts in a cell \n    (1,\n    1)\n. In one second, it can perform either of two actions: move into a cell\nadjacent by a side: up, right, down or left; remain in the same cell. The\nrobot is not allowed to move outside the grid. Initially, all cells, except\nfor the cell \n    (1, 1)\n, are locked. Each cell \n    (i, j)\n contains a value\n\n    a_i,j\n \u2014 the moment that this cell gets unlocked. The robot can only\nmove into a cell \n    (i, j)\n if at least \n    a_i,j\n seconds have passed\nbefore the move. The robot should visit all cells without entering any cell\ntwice or more (cell \n    (1, 1)\n is considered entered at the start). It can\nfinish in any cell. What is the fastest the robot can achieve that? Input The\nfirst line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014\nthe number of testcases. The first line of each testcase contains a single\ninteger \n    m\n (\n    2 \n    \u2264 m \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of columns\nof the grid. The \n    i\n-th of the next \n    2\n lines contains \n    m\n\nintegers \n    a_i,1, a_i,2, \n    \u2026, a_i,m\n (\n    0 \n    \u2264 a_i,j\n    \u2264\n    10^9\n) \u2014 the moment of time each cell gets unlocked. \n    a_1,1 = 0\n. If\n\n    a_i,j = 0\n, then cell \n    (i, j)\n is unlocked from the start. The sum\nof \n    m\n over all testcases doesn't exceed \n    2 \n    \u00b7 10^5\n. Output For\neach testcase, print a single integer \u2014 the minimum amount of seconds that the\nrobot can take to visit all cells without entering any cell twice or more.\nExample Input 4 3 0 0 1 4 3 2 5 0 4 8 12 16 2 6 10 14 18 4 0 10 10 10 10 10 10\n10 2 0 0 0 0 Output 5 19 17 3\n\n",
        "cf_contest_id": 1716,
        "cf_index": "C",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp",
            "greedy",
            "implementation",
            "ternary search"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3\r\n0 0 1\r\n4 3 2\r\n5\r\n0 4 8 12 16\r\n2 6 10 14 18\r\n4\r\n0 10 10 10\r\n10 10 10 10\r\n2\r\n0 0\r\n0 0\r\n",
                "5\r\n19\r\n17\r\n3\r\n"
            ]
        ],
        "private_cases": []
    }
]