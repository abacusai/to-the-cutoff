[
    {
        "name": "I_love_\\%username\\%",
        "description": "Vasya adores sport programming. He can't write programs but he loves to watch\nthe contests' progress. Vasya even has a favorite coder and Vasya pays special\nattention to him. One day Vasya decided to collect the results of all contests\nwhere his favorite coder participated and track the progress of his coolness.\nFor each contest where this coder participated, he wrote out a single non-\nnegative number \u2014 the number of points his favorite coder earned in the\ncontest. Vasya wrote out the points for the contest in the order, in which the\ncontests run (naturally, no two contests ran simultaneously). Vasya considers\na coder's performance in a contest amazing in two situations: he can break\neither his best or his worst performance record. First, it is amazing if\nduring the contest the coder earns strictly more points that he earned on each\npast contest. Second, it is amazing if during the contest the coder earns\nstrictly less points that he earned on each past contest. A coder's first\ncontest isn't considered amazing. Now he wants to count the number of amazing\nperformances the coder had throughout his whole history of participating in\ncontests. But the list of earned points turned out long and Vasya can't\ncode... That's why he asks you to help him. Input The first line contains the\nsingle integer n (1 \u2264 n \u2264 1000) \u2014 the number of contests where the coder\nparticipated. The next line contains n space-separated non-negative integer\nnumbers \u2014 they are the points which the coder has earned. The points are given\nin the chronological order. All points do not exceed 10000. Output Print the\nsingle number \u2014 the number of amazing performances the coder has had during\nhis whole history of participating in the contests. Examples Input 5 100 50\n200 150 200 Output 2 Input 10 4664 6496 5814 7010 5762 5736 6944 4850 3698\n7242 Output 4 Note In the first sample the performances number 2 and 3 are\namazing. In the second sample the performances number 2, 4, 9 and 10 are\namazing.\n\n",
        "cf_contest_id": 155,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "brute force"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n100 50 200 150 200\r\n",
                "2\r\n"
            ],
            [
                "10\r\n4664 6496 5814 7010 5762 5736 6944 4850 3698 7242\r\n",
                "4\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n6\r\n",
                "0\r\n"
            ],
            [
                "2\r\n2 1\r\n",
                "1\r\n"
            ],
            [
                "5\r\n100 36 53 7 81\r\n",
                "2\r\n"
            ],
            [
                "5\r\n7 36 53 81 100\r\n",
                "4\r\n"
            ],
            [
                "5\r\n100 81 53 36 7\r\n",
                "4\r\n"
            ],
            [
                "10\r\n8 6 3 4 9 10 7 7 1 3\r\n",
                "5\r\n"
            ],
            [
                "10\r\n1627 1675 1488 1390 1812 1137 1746 1324 1952 1862\r\n",
                "6\r\n"
            ],
            [
                "10\r\n1 3 3 4 6 7 7 8 9 10\r\n",
                "7\r\n"
            ],
            [
                "10\r\n1952 1862 1812 1746 1675 1627 1488 1390 1324 1137\r\n",
                "9\r\n"
            ],
            [
                "25\r\n1448 4549 2310 2725 2091 3509 1565 2475 2232 3989 4231 779 2967 2702 608 3739 721 1552 2767 530 3114 665 1940 48 4198\r\n",
                "5\r\n"
            ],
            [
                "33\r\n1097 1132 1091 1104 1049 1038 1023 1080 1104 1029 1035 1061 1049 1060 1088 1106 1105 1087 1063 1076 1054 1103 1047 1041 1028 1120 1126 1063 1117 1110 1044 1093 1101\r\n",
                "5\r\n"
            ],
            [
                "34\r\n821 5536 2491 6074 7216 9885 764 1603 778 8736 8987 771 617 1587 8943 7922 439 7367 4115 8886 7878 6899 8811 5752 3184 3401 9760 9400 8995 4681 1323 6637 6554 6498\r\n",
                "7\r\n"
            ],
            [
                "2\r\n0 10000\r\n",
                "1\r\n"
            ],
            [
                "2\r\n5 5\r\n",
                "0\r\n"
            ],
            [
                "2\r\n1 1\r\n",
                "0\r\n"
            ],
            [
                "2\r\n10 10\r\n",
                "0\r\n"
            ],
            [
                "1\r\n0\r\n",
                "0\r\n"
            ]
        ]
    }
]