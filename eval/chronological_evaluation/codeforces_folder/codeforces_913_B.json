[
    {
        "name": "Christmas Spruce",
        "description": "Consider a rooted tree. A rooted tree has one special vertex called the root.\nAll edges are directed from the root. Vertex u is called a child of vertex v\nand vertex v is called a parent of vertex u if there exists a directed edge\nfrom v to u. A vertex is called a leaf if it doesn't have children and has a\nparent. Let's call a rooted tree a spruce if its every non-leaf vertex has at\nleast 3 leaf children. You are given a rooted tree, check whether it's a\nspruce. The definition of a rooted tree can be found here. Input The first\nline contains one integer n \u2014 the number of vertices in the tree (3 \u2264 n \u2264 1\n000). Each of the next n - 1 lines contains one integer pi (1 \u2264 i \u2264 n - 1) \u2014\nthe index of the parent of the i + 1-th vertex (1 \u2264 pi \u2264 i). Vertex 1 is the\nroot. It's guaranteed that the root has at least 2 children. Output Print\n\"Yes\" if the tree is a spruce and \"No\" otherwise. Examples Input 4 1 1 1\nOutput Yes Input 7 1 1 1 2 2 2 Output No Input 8 1 1 1 1 3 3 3 Output Yes Note\nThe first example: The second example: It is not a spruce, because the non-\nleaf vertex 1 has only 2 leaf children. The third example:\n\n",
        "cf_contest_id": 913,
        "cf_index": "B",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1\r\n1\r\n1\r\n",
                "Yes\r\n"
            ],
            [
                "7\r\n1\r\n1\r\n1\r\n2\r\n2\r\n2\r\n",
                "No\r\n"
            ],
            [
                "8\r\n1\r\n1\r\n1\r\n1\r\n3\r\n3\r\n3\r\n",
                "Yes\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n1\r\n1\r\n",
                "No\r\n"
            ],
            [
                "13\r\n1\r\n2\r\n2\r\n2\r\n1\r\n6\r\n6\r\n6\r\n1\r\n10\r\n10\r\n10\r\n",
                "No\r\n"
            ],
            [
                "7\r\n1\r\n2\r\n2\r\n1\r\n1\r\n1\r\n",
                "No\r\n"
            ],
            [
                "7\r\n1\r\n1\r\n1\r\n1\r\n2\r\n2\r\n",
                "No\r\n"
            ],
            [
                "8\r\n1\r\n1\r\n1\r\n1\r\n5\r\n5\r\n5\r\n",
                "Yes\r\n"
            ],
            [
                "9\r\n1\r\n1\r\n1\r\n1\r\n2\r\n6\r\n6\r\n6\r\n",
                "No\r\n"
            ],
            [
                "12\r\n1\r\n1\r\n1\r\n2\r\n5\r\n5\r\n5\r\n5\r\n1\r\n2\r\n2\r\n",
                "No\r\n"
            ],
            [
                "20\r\n1\r\n1\r\n1\r\n1\r\n2\r\n2\r\n2\r\n3\r\n3\r\n3\r\n4\r\n4\r\n4\r\n5\r\n5\r\n5\r\n1\r\n1\r\n1\r\n",
                "Yes\r\n"
            ],
            [
                "7\r\n1\r\n1\r\n1\r\n3\r\n3\r\n3\r\n",
                "No\r\n"
            ]
        ]
    }
]