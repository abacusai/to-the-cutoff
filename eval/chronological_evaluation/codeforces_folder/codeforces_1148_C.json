[
    {
        "name": "Crazy Diamond",
        "description": "You are given a permutation \n    p\n of integers from \n    1\n to \n    n\n, where\n\n    n\n is an even number. Your goal is to sort the permutation. To do so, you\ncan perform zero or more operations of the following type: take two indices\n\n    i\n and \n    j\n such that \n    2 \n    \u00b7 |i - j| \n    \u2265 n\n and swap\n\n    p_i\n and \n    p_j\n. There is no need to minimize the number of\noperations, however you should use no more than \n    5 \n    \u00b7 n\n operations.\nOne can show that it is always possible to do that. Input The first line\ncontains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 3 \n    \u00b7 10^5\n,\n\n    n\n is even) \u2014 the length of the permutation. The second line contains\n\n    n\n distinct integers \n    p_1, p_2, \n    \u2026, p_n\n (\n    1 \n    \u2264 p_i \n    \u2264\n    n\n) \u2014 the given permutation. Output On the first line print \n    m\n (\n    0\n    \n    \u2264 m \n    \u2264 5 \n    \u00b7 n\n) \u2014 the number of swaps to perform. Each of the\nfollowing \n    m\n lines should contain integers \n    a_i, b_i\n (\n    1 \n    \u2264\n    a_i, b_i \n    \u2264 n\n, \n    |a_i - b_i| \n    \u2265\n    n/2\n) \u2014 the indices that\nshould be swapped in the corresponding swap. Note that there is no need to\nminimize the number of operations. We can show that an answer always exists.\nExamples Input 2 2 1 Output 1 1 2 Input 4 3 4 1 2 Output 4 1 4 1 4 1 3 2 4\nInput 6 2 5 3 1 4 6 Output 3 1 5 2 5 1 4 Note In the first example, when one\nswap elements on positions \n    1\n and \n    2\n, the array becomes sorted. In\nthe second example, pay attention that there is no need to minimize number of\nswaps. In the third example, after swapping elements on positions \n    1\n and\n\n    5\n the array becomes: \n    [4, 5, 3, 1, 2, 6]\n. After swapping elements\non positions \n    2\n and \n    5\n the array becomes \n    [4, 2, 3, 1, 5, 6]\n\nand finally after swapping elements on positions \n    1\n and \n    4\n the array\nbecomes sorted: \n    [1, 2, 3, 4, 5, 6]\n.\n\n",
        "cf_contest_id": 1148,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "sortings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n2 1\r\n",
                "5\r\n2 1\r\n2 1\r\n2 1\r\n2 1\r\n1 2\r\n"
            ],
            [
                "4\r\n3 4 1 2\r\n",
                "10\r\n4 1\r\n4 1\r\n4 2\r\n1 4\r\n4 1\r\n1 3\r\n1 4\r\n4 1\r\n4 1\r\n1 4\r\n"
            ],
            [
                "6\r\n2 5 3 1 4 6\r\n",
                "13\r\n3 6\r\n6 3\r\n5 1\r\n1 4\r\n5 1\r\n6 1\r\n6 2\r\n6 1\r\n1 5\r\n1 6\r\n6 1\r\n6 1\r\n1 6\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n7 2 9 6 5 8 1 3 10 4\r\n",
                "24\r\n5 10\r\n10 5\r\n4 10\r\n10 1\r\n1 6\r\n4 10\r\n10 4\r\n10 1\r\n1 7\r\n8 1\r\n10 1\r\n10 3\r\n1 10\r\n10 1\r\n1 8\r\n2 10\r\n10 2\r\n10 1\r\n1 9\r\n10 1\r\n10 1\r\n10 1\r\n10 1\r\n1 10\r\n"
            ],
            [
                "2\r\n1 2\r\n",
                "4\r\n1 2\r\n2 1\r\n2 1\r\n1 2\r\n"
            ],
            [
                "10\r\n6 1 2 9 3 5 4 10 7 8\r\n",
                "25\r\n6 1\r\n10 1\r\n10 5\r\n6 1\r\n1 6\r\n7 1\r\n10 1\r\n10 4\r\n9 1\r\n1 7\r\n9 1\r\n10 1\r\n10 3\r\n9 1\r\n1 8\r\n10 1\r\n10 1\r\n10 2\r\n9 1\r\n1 9\r\n10 1\r\n10 1\r\n10 1\r\n10 1\r\n1 10\r\n"
            ],
            [
                "10\r\n10 9 8 7 6 5 4 3 2 1\r\n",
                "25\r\n6 1\r\n10 1\r\n10 5\r\n10 1\r\n1 6\r\n7 1\r\n10 1\r\n10 4\r\n10 1\r\n1 7\r\n8 1\r\n10 1\r\n10 3\r\n10 1\r\n1 8\r\n9 1\r\n10 1\r\n10 2\r\n10 1\r\n1 9\r\n10 1\r\n10 1\r\n10 1\r\n10 1\r\n1 10\r\n"
            ]
        ]
    }
]