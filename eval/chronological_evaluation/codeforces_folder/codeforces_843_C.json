[
    {
        "name": "Upgrading Tree",
        "description": "You are given a tree with n vertices and you are allowed to perform no more\nthan 2n transformations on it. Transformation is defined by three vertices x,\ny, y' and consists of deleting edge (x, y) and adding edge (x, y').\nTransformation x, y, y' could be performed if all the following conditions are\nsatisfied: There is an edge (x, y) in the current tree. After the\ntransformation the graph remains a tree. After the deletion of edge (x, y) the\ntree would consist of two connected components. Let's denote the set of nodes\nin the component containing vertex x by Vx, and the set of nodes in the\ncomponent containing vertex y by Vy. Then condition |Vx| > |Vy| should be\nsatisfied, i.e. the size of the component with x should be strictly larger\nthan the size of the component with y. You should minimize the sum of squared\ndistances between all pairs of vertices in a tree, which you could get after\nno more than 2n transformations and output any sequence of transformations\nleading initial tree to such state. Note that you don't need to minimize the\nnumber of operations. It is necessary to minimize only the sum of the squared\ndistances. Input The first line of input contains integer n (1 \u2264 n \u2264 2\u00b710^5) \u2014\nnumber of vertices in tree. The next n - 1 lines of input contains integers a\nand b (1 \u2264 a, b \u2264 n, a \u2260 b) \u2014 the descriptions of edges. It is guaranteed that\nthe given edges form a tree. Output In the first line output integer k (0 \u2264 k\n\u2264 2n) \u2014 the number of transformations from your example, minimizing sum of\nsquared distances between all pairs of vertices. In each of the next k lines\noutput three integers x, y, y' \u2014 indices of vertices from the corresponding\ntransformation. Transformations with y = y' are allowed (even though they\ndon't change tree) if transformation conditions are satisfied. If there are\nseveral possible answers, print any of them. Examples Input 3 3 2 1 3 Output 0\nInput 7 1 2 2 3 3 4 4 5 5 6 6 7 Output 2 4 3 2 4 5 6 Note This is a picture\nfor the second sample. Added edges are dark, deleted edges are dotted.\n\n",
        "cf_contest_id": 843,
        "cf_index": "C",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs",
            "math",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n3 2\r\n1 3\r\n",
                "2\r\n3 2 2\r\n3 1 1\r\n"
            ],
            [
                "7\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n",
                "10\r\n4 3 1\r\n1 2 3\r\n4 1 2\r\n2 3 3\r\n4 2 3\r\n4 5 7\r\n7 6 5\r\n4 7 6\r\n6 5 5\r\n4 6 5\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n",
                "5\r\n2 1 3\r\n3 1 1\r\n2 3 1\r\n2 4 4\r\n2 5 5\r\n"
            ],
            [
                "16\r\n1 2\r\n1 3\r\n2 4\r\n3 5\r\n3 6\r\n4 7\r\n4 8\r\n5 9\r\n5 10\r\n6 11\r\n6 12\r\n9 13\r\n9 14\r\n12 15\r\n12 16\r\n",
                "27\r\n3 1 7\r\n7 4 1\r\n3 7 8\r\n8 4 1\r\n3 8 4\r\n4 2 1\r\n3 4 2\r\n2 1 1\r\n3 2 1\r\n3 5 13\r\n13 9 5\r\n3 13 14\r\n14 9 5\r\n3 14 9\r\n9 5 5\r\n3 9 10\r\n10 5 5\r\n3 10 5\r\n3 6 11\r\n11 6 6\r\n3 11 15\r\n15 12 6\r\n3 15 16\r\n16 12 6\r\n3 16 12\r\n12 6 6\r\n3 12 6\r\n"
            ],
            [
                "12\r\n1 3\r\n3 2\r\n3 4\r\n4 5\r\n4 7\r\n7 6\r\n7 8\r\n8 9\r\n8 10\r\n9 11\r\n9 12\r\n",
                "19\r\n7 4 1\r\n1 3 4\r\n7 1 2\r\n2 3 4\r\n7 2 3\r\n3 4 4\r\n7 3 5\r\n5 4 4\r\n7 5 4\r\n7 6 6\r\n7 8 11\r\n11 9 8\r\n7 11 12\r\n12 9 8\r\n7 12 9\r\n9 8 8\r\n7 9 10\r\n10 8 8\r\n7 10 8\r\n"
            ],
            [
                "14\r\n1 2\r\n2 14\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n5 7\r\n4 10\r\n10 9\r\n10 8\r\n3 11\r\n11 13\r\n11 12\r\n",
                "20\r\n4 5 6\r\n6 5 5\r\n4 6 7\r\n7 5 5\r\n4 7 5\r\n4 10 9\r\n9 10 10\r\n4 9 8\r\n8 10 10\r\n4 8 10\r\n3 2 1\r\n1 2 2\r\n3 1 14\r\n14 2 2\r\n3 14 2\r\n3 11 13\r\n13 11 11\r\n3 13 12\r\n12 11 11\r\n3 12 11\r\n"
            ],
            [
                "10\r\n6 9\r\n9 2\r\n4 7\r\n5 4\r\n7 9\r\n8 5\r\n9 10\r\n2 1\r\n8 3\r\n",
                "12\r\n7 4 3\r\n3 8 4\r\n7 3 8\r\n8 5 4\r\n7 8 5\r\n5 4 4\r\n7 5 4\r\n9 6 6\r\n9 2 1\r\n1 2 2\r\n9 1 2\r\n9 10 10\r\n"
            ],
            [
                "9\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n2 6\r\n5 7\r\n7 8\r\n7 9\r\n",
                "12\r\n1 2 6\r\n6 2 2\r\n1 6 2\r\n1 3 3\r\n1 4 4\r\n1 5 8\r\n8 7 5\r\n1 8 9\r\n9 7 5\r\n1 9 7\r\n7 5 5\r\n1 7 5\r\n"
            ],
            [
                "9\r\n2 1\r\n2 3\r\n2 4\r\n2 5\r\n1 6\r\n5 7\r\n7 8\r\n7 9\r\n",
                "12\r\n2 1 6\r\n6 1 1\r\n2 6 1\r\n2 3 3\r\n2 4 4\r\n2 5 8\r\n8 7 5\r\n2 8 9\r\n9 7 5\r\n2 9 7\r\n7 5 5\r\n2 7 5\r\n"
            ],
            [
                "9\r\n3 2\r\n3 1\r\n3 4\r\n3 5\r\n2 6\r\n5 7\r\n7 8\r\n7 9\r\n",
                "12\r\n3 2 6\r\n6 2 2\r\n3 6 2\r\n3 1 1\r\n3 4 4\r\n3 5 8\r\n8 7 5\r\n3 8 9\r\n9 7 5\r\n3 9 7\r\n7 5 5\r\n3 7 5\r\n"
            ],
            [
                "9\r\n4 2\r\n4 3\r\n4 1\r\n4 5\r\n2 6\r\n5 7\r\n7 8\r\n7 9\r\n",
                "12\r\n4 2 6\r\n6 2 2\r\n4 6 2\r\n4 3 3\r\n4 1 1\r\n4 5 8\r\n8 7 5\r\n4 8 9\r\n9 7 5\r\n4 9 7\r\n7 5 5\r\n4 7 5\r\n"
            ],
            [
                "9\r\n5 2\r\n5 3\r\n5 4\r\n5 1\r\n2 6\r\n1 7\r\n7 8\r\n7 9\r\n",
                "12\r\n5 2 6\r\n6 2 2\r\n5 6 2\r\n5 3 3\r\n5 4 4\r\n5 1 8\r\n8 7 1\r\n5 8 9\r\n9 7 1\r\n5 9 7\r\n7 1 1\r\n5 7 1\r\n"
            ],
            [
                "9\r\n6 2\r\n6 3\r\n6 4\r\n6 5\r\n2 1\r\n5 7\r\n7 8\r\n7 9\r\n",
                "12\r\n6 2 1\r\n1 2 2\r\n6 1 2\r\n6 3 3\r\n6 4 4\r\n6 5 8\r\n8 7 5\r\n6 8 9\r\n9 7 5\r\n6 9 7\r\n7 5 5\r\n6 7 5\r\n"
            ],
            [
                "9\r\n7 2\r\n7 3\r\n7 4\r\n7 5\r\n2 6\r\n5 1\r\n1 8\r\n1 9\r\n",
                "12\r\n7 2 6\r\n6 2 2\r\n7 6 2\r\n7 3 3\r\n7 4 4\r\n7 5 8\r\n8 1 5\r\n7 8 9\r\n9 1 5\r\n7 9 1\r\n1 5 5\r\n7 1 5\r\n"
            ],
            [
                "9\r\n8 2\r\n8 3\r\n8 4\r\n8 5\r\n2 6\r\n5 7\r\n7 1\r\n7 9\r\n",
                "12\r\n8 2 6\r\n6 2 2\r\n8 6 2\r\n8 3 3\r\n8 4 4\r\n8 5 1\r\n1 7 5\r\n8 1 9\r\n9 7 5\r\n8 9 7\r\n7 5 5\r\n8 7 5\r\n"
            ],
            [
                "9\r\n9 2\r\n9 3\r\n9 4\r\n9 5\r\n2 6\r\n5 7\r\n7 8\r\n7 1\r\n",
                "12\r\n9 2 6\r\n6 2 2\r\n9 6 2\r\n9 3 3\r\n9 4 4\r\n9 5 8\r\n8 7 5\r\n9 8 1\r\n1 7 5\r\n9 1 7\r\n7 5 5\r\n9 7 5\r\n"
            ],
            [
                "10\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n",
                "14\r\n6 7 10\r\n10 9 7\r\n6 10 9\r\n9 8 7\r\n6 9 8\r\n8 7 7\r\n6 8 7\r\n5 4 1\r\n1 2 4\r\n5 1 2\r\n2 3 4\r\n5 2 3\r\n3 4 4\r\n5 3 4\r\n"
            ],
            [
                "10\r\n10 1\r\n1 4\r\n4 2\r\n2 3\r\n3 6\r\n6 9\r\n9 5\r\n5 8\r\n8 7\r\n",
                "14\r\n6 9 7\r\n7 8 9\r\n6 7 8\r\n8 5 9\r\n6 8 5\r\n5 9 9\r\n6 5 9\r\n3 2 10\r\n10 1 2\r\n3 10 1\r\n1 4 2\r\n3 1 4\r\n4 2 2\r\n3 4 2\r\n"
            ]
        ]
    }
]