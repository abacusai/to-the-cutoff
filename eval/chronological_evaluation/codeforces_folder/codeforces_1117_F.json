[
    {
        "name": "Crisp String",
        "description": "You are given a string of length \n    n\n. Each character is one of the first\n\n    p\n lowercase Latin letters. You are also given a matrix \n    A\n with\nbinary values of size \n    p \n    \u00d7 p\n. This matrix is symmetric (\n    A_ij\n    = A_ji\n). \n    A_ij = 1\n means that the string can have the \n    i\n-th\nand \n    j\n-th letters of Latin alphabet adjacent. Let's call the string crisp\nif all of the adjacent characters in it can be adjacent (have 1 in the\ncorresponding cell of matrix \n    A\n). You are allowed to do the following\nmove. Choose any letter, remove all its occurrences and join the remaining\nparts of the string without changing their order. For example, removing letter\n'a' from \"abacaba\" will yield \"bcb\". The string you are given is crisp. The\nstring should remain crisp after every move you make. You are allowed to do\narbitrary number of moves (possible zero). What is the shortest resulting\nstring you can obtain? Input The first line contains two integers \n    n\n and\n\n    p\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n, \n    1 \n    \u2264 p \n    \u2264 17\n) \u2014 the length of\nthe initial string and the length of the allowed prefix of Latin alphabet. The\nsecond line contains the initial string. It is guaranteed that it contains\nonly first \n    p\n lowercase Latin letters and that is it crisp. Some of these\n\n    p\n first Latin letters might not be present in the string. Each of the\nnext \n    p\n lines contains \n    p\n integer numbers \u2014 the matrix \n    A\n (\n    0\n    \n    \u2264 A_ij\n    \u2264 1\n, \n    A_ij = A_ji\n). \n    A_ij = 1\n means that\nthe string can have the \n    i\n-th and \n    j\n-th letters of Latin alphabet\nadjacent. Output Print a single integer \u2014 the length of the shortest string\nafter you make arbitrary number of moves (possible zero). Examples Input 7 3\nabacaba 0 1 1 1 0 0 1 0 0 Output 7 Input 7 3 abacaba 1 1 1 1 0 0 1 0 0 Output\n0 Input 7 4 bacadab 0 1 1 1 1 0 0 0 1 0 0 0 1 0 0 0 Output 5 Input 3 3 cbc 0 0\n0 0 0 1 0 1 0 Output 0 Note In the first example no letter can be removed from\nthe initial string. In the second example you can remove letters in order:\n'b', 'c', 'a'. The strings on the intermediate steps will be: \"abacaba\"\n\n    \u2192\n \"aacaa\" \n    \u2192\n \"aaaa\" \n    \u2192\n \"\".\nIn the third example you can remove letter 'b' and that's it. In the fourth\nexample you can remove letters in order 'c', 'b', but not in the order 'b',\n'c' because two letters 'c' can't be adjacent.\n\n",
        "cf_contest_id": 1117,
        "cf_index": "F",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "dp"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 3\r\nabacaba\r\n0 1 1\r\n1 0 0\r\n1 0 0\r\n",
                "7\r\n"
            ],
            [
                "7 3\r\nabacaba\r\n1 1 1\r\n1 0 0\r\n1 0 0\r\n",
                "0\r\n"
            ],
            [
                "7 4\r\nbacadab\r\n0 1 1 1\r\n1 0 0 0\r\n1 0 0 0\r\n1 0 0 0\r\n",
                "5\r\n"
            ],
            [
                "3 3\r\ncbc\r\n0 0 0\r\n0 0 1\r\n0 1 0\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 4\r\nbdbdccdcac\r\n0 0 1 0\r\n0 0 0 1\r\n1 0 1 1\r\n0 1 1 0\r\n",
                "9\r\n"
            ],
            [
                "10 4\r\nbcaaddaacc\r\n1 0 1 1\r\n0 0 1 0\r\n1 1 1 0\r\n1 0 0 1\r\n",
                "0\r\n"
            ],
            [
                "10 4\r\nbadbbabcbd\r\n0 1 0 1\r\n1 1 1 1\r\n0 1 0 0\r\n1 1 0 0\r\n",
                "0\r\n"
            ],
            [
                "10 4\r\nbddcdbcddd\r\n0 0 0 0\r\n0 0 1 1\r\n0 1 0 1\r\n0 1 1 1\r\n",
                "0\r\n"
            ],
            [
                "100 10\r\nddceaaabidffdeheaaeaababidedifgjhjhehehjggggfdcfgffceceabiffifibifgfiffceabaaeaaeaecedecfgggjgjhjggg\r\n1 1 0 0 1 0 0 0 0 0\r\n1 0 0 0 0 0 0 0 1 0\r\n0 0 0 1 1 1 0 0 0 0\r\n0 0 1 1 1 1 0 1 1 0\r\n1 0 1 1 0 0 0 1 0 0\r\n0 0 1 1 0 1 1 0 1 0\r\n0 0 0 0 0 1 1 0 0 1\r\n0 0 0 1 1 0 0 0 0 1\r\n0 1 0 1 0 1 0 0 0 0\r\n0 0 0 0 0 0 1 1 0 0\r\n",
                "100\r\n"
            ],
            [
                "100 10\r\nagdebeajajhdfggdfdhdhjbedhibjebidedhdihidhdgfdjbihdjajbjedgajhihjaebgcfgcgaedhihihjhifgdhibibegfdedi\r\n0 0 0 0 1 0 1 0 0 1\r\n0 0 0 0 1 0 1 0 1 1\r\n0 0 0 0 0 1 1 0 0 0\r\n0 0 0 0 1 1 1 1 1 1\r\n1 1 0 1 0 0 1 0 0 1\r\n0 0 1 1 0 0 1 0 1 0\r\n1 1 1 1 1 1 1 0 0 0\r\n0 0 0 1 0 0 0 0 1 1\r\n0 1 0 1 0 1 0 1 0 0\r\n1 1 0 1 1 0 0 1 0 0\r\n",
                "98\r\n"
            ],
            [
                "100 10\r\nihjbeaigaieaeaeaihcjhebhiagfebjaeagfffdbjjgjaiabaehbjhjbheiiigajaebheihehcjbehdbdhieieaiihchjgihcjae\r\n0 1 0 0 1 0 1 0 1 1\r\n1 0 0 1 1 0 0 1 0 1\r\n0 0 0 0 0 0 0 1 0 1\r\n0 1 0 0 0 1 0 1 0 0\r\n1 1 0 0 0 1 0 1 1 0\r\n0 0 0 1 1 1 1 0 0 0\r\n1 0 0 0 0 1 0 0 1 1\r\n0 1 1 1 1 0 0 0 1 1\r\n1 0 0 0 1 0 1 1 1 0\r\n1 1 1 0 0 0 1 1 0 1\r\n",
                "100\r\n"
            ],
            [
                "100 10\r\nhijfabbebbebefchaciaffbgbfafbahcachchcafchciacihichcjifedefbbichibijiagjcdedcijiiibgahabfijgbihacaba\r\n0 1 1 0 0 1 1 1 1 0\r\n1 1 0 1 1 1 1 0 1 0\r\n1 0 0 1 0 1 0 1 1 1\r\n0 1 1 0 1 0 0 0 0 0\r\n0 1 0 1 0 1 0 0 0 0\r\n1 1 1 0 1 1 0 0 1 1\r\n1 1 0 0 0 0 0 0 0 1\r\n1 0 1 0 0 0 0 0 1 0\r\n1 1 1 0 0 1 0 1 1 1\r\n0 0 1 0 0 1 1 0 1 0\r\n",
                "100\r\n"
            ],
            [
                "100 10\r\ndiejjeiecigabghghjbgiebeihdidbafaicdcebigjgjbabbegbcegejhghggffhjbggagafaedjhjjjjgbdhhgbihdhhibgfeaf\r\n1 1 0 1 1 1 1 0 1 0\r\n1 1 1 1 1 0 1 0 1 1\r\n0 1 0 1 1 0 0 1 1 0\r\n1 1 1 0 1 0 0 1 1 1\r\n1 1 1 1 0 1 1 0 1 1\r\n1 0 0 0 1 1 1 1 0 0\r\n1 1 0 0 1 1 1 1 1 1\r\n0 0 1 1 0 1 1 1 1 1\r\n1 1 1 1 1 0 1 1 0 0\r\n0 1 0 1 1 0 1 1 0 1\r\n",
                "82\r\n"
            ],
            [
                "100 10\r\necaaeadcidhegjibcffgfdifbacdffgjhdedggbajhddddceiefjafafcdihjjjabigaecdffdeeeheahaefjbbejacabhbbcabg\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 0 1 1 1 0 1 1 0\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 0 1 1\r\n1 1 0 1 1 1 1 0 1 1\r\n1 1 1 1 1 0 0 0 1 1\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 0 1 1 1 1 1 1 1\r\n",
                "0\r\n"
            ],
            [
                "100 10\r\ngeebdhgaebbigciddjgdjhgdedihfgggjbbjhicfdfifejbgaejacfafacbfhigdacadebbeajiafcjcghgdbbafjggdfbjhdbdh\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 0 1 1\r\n1 1 0 0 1 1 1 0 1 1\r\n1 1 0 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 0 1 1\r\n1 1 1 1 1 0 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1\r\n1 0 0 1 0 1 1 0 1 1\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 0\r\n",
                "0\r\n"
            ],
            [
                "100 10\r\nigffabeaiaajhjaghjgfjcchheeigjhibadbbhdhcjiibhjjhbhcgidfebhbbjjgbjiafeffihjbeaidgaieeaeacheaahdifchc\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 0 1 1 1 1 1\r\n1 1 1 0 1 1 1 1 1 1\r\n1 1 0 1 1 1 0 1 1 0\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 0 1 0 1 1 1\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 0 1 1 1 1 1\r\n",
                "0\r\n"
            ],
            [
                "100 10\r\nagjibiiifiedjccibdhccfjfaiafhaiccaagcadcihbaabgbabcdiafecabiaigjdcdcedbebbchffbfhijefabbcchecbbegcbe\r\n1 1 1 1 0 1 1 1 1 0\r\n1 1 1 1 1 1 1 1 1 0\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 1 0 1 0 1 1 1 1\r\n0 1 1 1 0 1 1 1 1 1\r\n1 1 1 0 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 0\r\n1 1 1 1 1 1 1 1 1 1\r\n0 0 1 1 1 1 1 0 1 0\r\n",
                "0\r\n"
            ],
            [
                "100 10\r\ndegfabjdgjjegiagggaifgdbbbighgfehfdccedhcihcgbhhhchjhgihegjbdighdcebibffdacbjjaahgafeaadiedgiejijeie\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 0\r\n1 1 1 0 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 0\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 0 1\r\n1 1 0 1 1 0 1 1 1 1\r\n",
                "0\r\n"
            ]
        ]
    }
]