[
    {
        "name": "Autocomplete",
        "description": "Autocomplete is a program function that enables inputting the text (in\neditors, command line shells, browsers etc.) completing the text by its\ninputted part. Vasya is busy working on a new browser called 'BERowser'. He\nhappens to be working on the autocomplete function in the address line at this\nvery moment. A list consisting of n last visited by the user pages and the\ninputted part s are known. Your task is to complete s to make it an address of\none of the pages from the list. You have to find the lexicographically\nsmallest address having a prefix s. Input The first line contains the s line\nwhich is the inputted part. The second line contains an integer n (1 \u2264 n \u2264\n100) which is the number of visited pages. Then follow n lines which are the\nvisited pages, one on each line. All the lines have lengths of from 1 to 100\nsymbols inclusively and consist of lowercase Latin letters only. Output If s\nis not the beginning of any of n addresses of the visited pages, print s.\nOtherwise, print the lexicographically minimal address of one of the visited\npages starting from s. The lexicographical order is the order of words in a\ndictionary. The lexicographical comparison of lines is realized by the '<'\noperator in the modern programming languages. Examples Input next 2\nnextpermutation nextelement Output nextelement Input find 4 find findfirstof\nfindit fand Output find Input find 4 fondfind fondfirstof fondit fand Output\nfind\n\n",
        "cf_contest_id": 53,
        "cf_index": "A",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "next\r\n2\r\nnextpermutation\r\nnextelement\r\n",
                "nextelement\r\n"
            ],
            [
                "find\r\n4\r\nfind\r\nfindfirstof\r\nfindit\r\nfand\r\n",
                "find\r\n"
            ],
            [
                "find\r\n4\r\nfondfind\r\nfondfirstof\r\nfondit\r\nfand\r\n",
                "find\r\n"
            ]
        ],
        "private_cases": [
            [
                "kudljmxcse\r\n4\r\nkudljmxcse\r\nszjebdoad\r\nchz\r\na\r\n",
                "kudljmxcse\r\n"
            ],
            [
                "ntqwpa\r\n5\r\nvvepyowvn\r\nntqwpakay\r\nhh\r\nygiafasda\r\nntqwpadm\r\n",
                "ntqwpadm\r\n"
            ],
            [
                "aflb\r\n6\r\nsaej\r\nujxsiijg\r\npp\r\nhgoprw\r\ncp\r\nnt\r\n",
                "aflb\r\n"
            ],
            [
                "dzwzyj\r\n7\r\nwvixktp\r\ndzwzyjuhn\r\ndzwzyjqrbd\r\ndzwzyji\r\ndzwzyjyfys\r\ndzwzyjrcb\r\nxptb\r\n",
                "dzwzyji\r\n"
            ],
            [
                "wmblbphwdjjskzmlsyiznluiudelhlvcpyrooajvbwudnnstdhesauyxjugdwhrrwg\r\n1\r\nwjhsbxrrhadgtnybsugdtprncwerwezxuaxnqfpnosbispmnymnaqssdkjeynrnn\r\n",
                "wmblbphwdjjskzmlsyiznluiudelhlvcpyrooajvbwudnnstdhesauyxjugdwhrrwg\r\n"
            ],
            [
                "hzkqvwliymwjbejfpnydrbwskhyrtrlsdinfrgwmnbdpwytcnjeoowxrfgfuaffzayjylvzu\r\n1\r\nhzkqvwliymwjbejfpnydrbwskhyrtrlsdinfrgwmnbdpwytcnjeoowxrfgfuaffzayjylvzubwjlvhhsfurqb\r\n",
                "hzkqvwliymwjbejfpnydrbwskhyrtrlsdinfrgwmnbdpwytcnjeoowxrfgfuaffzayjylvzubwjlvhhsfurqb\r\n"
            ],
            [
                "msjnqudojxtzvpc\r\n2\r\nvlxclsvqbucmbrkwwtoxek\r\nmsjnqudojxtzvpcldwjyystsxrtexfhllzhnkidmhmyxpld\r\n",
                "msjnqudojxtzvpcldwjyystsxrtexfhllzhnkidmhmyxpld\r\n"
            ]
        ]
    }
]