[
    {
        "name": "Little Xor",
        "description": "Little Petya likes arrays that consist of non-negative integers a lot.\nRecently his mom has presented him one such array consisting of n elements.\nPetya immediately decided to find there a segment of consecutive elements,\nsuch that the xor of all numbers from this segment was maximal possible. Help\nhim with that. The xor operation is the bitwise exclusive \"OR\", that is\ndenoted as \"xor\" in Pascal and \"^\" in C/C++/Java. Input The first line\ncontains integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in the array. The\nsecond line contains the space-separated integers from the array. All numbers\nare non-negative integers strictly less than 2^30. Output Print a single\ninteger \u2014 the required maximal xor of a segment of consecutive elements.\nExamples Input 5 1 2 1 1 2 Output 3 Input 3 1 2 7 Output 7 Input 4 4 2 4 8\nOutput 14 Note In the first sample one of the optimal segments is the segment\nthat consists of the first and the second array elements, if we consider the\narray elements indexed starting from one. The second sample contains only one\noptimal segment, which contains exactly one array element (element with index\nthree).\n\n",
        "cf_contest_id": 252,
        "cf_index": "A",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 2 1 1 2\r\n",
                "3\r\n"
            ],
            [
                "3\r\n1 2 7\r\n",
                "7\r\n"
            ],
            [
                "4\r\n4 2 4 8\r\n",
                "14\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n1 1 1 1 1\r\n",
                "1\r\n"
            ],
            [
                "16\r\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\r\n",
                "15\r\n"
            ],
            [
                "20\r\n1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10\r\n",
                "15\r\n"
            ],
            [
                "100\r\n28 20 67 103 72 81 82 83 7 109 122 30 50 118 83 89 108 82 92 17 97 3 62 12 9 100 14 11 99 106 10 8 60 101 88 119 104 62 76 6 5 57 32 94 60 50 58 97 1 97 107 108 80 24 45 20 112 1 98 106 49 98 25 57 47 90 74 68 14 35 22 10 61 80 10 4 53 13 90 99 57 100 40 84 22 116 60 61 98 57 74 127 61 73 49 51 20 19 56 111\r\n",
                "127\r\n"
            ],
            [
                "99\r\n87 67 4 84 13 20 35 7 11 86 25 1 58 1 74 64 74 86 98 74 72 46 63 78 84 13 60 38 30 45 45 60 9 44 36 70 33 22 82 15 71 7 43 47 23 2 20 49 42 43 54 27 51 51 53 23 27 37 17 66 90 89 61 0 18 20 49 30 84 20 13 32 64 69 56 68 59 10 91 96 43 64 19 10 2 57 62 23 100 39 32 19 95 55 77 19 24 4 77\r\n",
                "127\r\n"
            ],
            [
                "1\r\n100\r\n",
                "100\r\n"
            ],
            [
                "2\r\n1 1\r\n",
                "1\r\n"
            ],
            [
                "2\r\n4 10\r\n",
                "14\r\n"
            ],
            [
                "99\r\n3511 2076 9314 3598 7737 271 4110 4454 5830 8661 8584 8227 2236 2626 1025 3806 3162 2837 6071 9627 1836 7729 6629 4054 9377 3261 1325 8859 3610 7616 5052 9736 1249 6224 7031 6074 4196 8075 4005 5419 5664 8214 4391 731 8714 8622 6122 6976 4057 1770 8025 3778 2792 994 5204 1826 6083 5438 8409 8029 1962 3133 9836 8884 1234 1776 824 1630 6523 2869 9950 8609 5397 1472 7120 5012 6490 5958 8030 7741 5077 2771 7925 9784 9456 8596 6288 8939 4779 4415 3743 5188 5574 9686 1483 4245 4769 4917 1887\r\n",
                "16383\r\n"
            ],
            [
                "27\r\n78 918 443 3900 591 12 4 10 1 24 70 88 429 2 3257 65 275 2 258 62 587 625 25 26 853 728 765\r\n",
                "4027\r\n"
            ],
            [
                "2\r\n3 1\r\n",
                "3\r\n"
            ],
            [
                "2\r\n3 2\r\n",
                "3\r\n"
            ],
            [
                "3\r\n7 3 1\r\n",
                "7\r\n"
            ],
            [
                "3\r\n1 7 2\r\n",
                "7\r\n"
            ],
            [
                "2\r\n7 1\r\n",
                "7\r\n"
            ],
            [
                "4\r\n1 2 7 1\r\n",
                "7\r\n"
            ],
            [
                "3\r\n10 5 1\r\n",
                "15\r\n"
            ]
        ]
    }
]