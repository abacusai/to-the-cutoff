[
    {
        "name": "Tree of Life (easy)",
        "description": "Heidi has finally found the mythical Tree of Life \u2013 a legendary combinatorial\nstructure which is said to contain a prophecy crucially needed to defeat the\nundead armies. On the surface, the Tree of Life is just a regular undirected\ntree well-known from computer science. This means that it is a collection of n\npoints (called vertices), some of which are connected using n - 1 line\nsegments (edges) so that each pair of vertices is connected by a path (a\nsequence of one or more edges). To decipher the prophecy, Heidi needs to\nperform a number of steps. The first is counting the number of lifelines in\nthe tree \u2013 these are paths of length 2, i.e., consisting of two edges. Help\nher! Input The first line of the input contains a single integer n \u2013 the\nnumber of vertices in the tree (1 \u2264 n \u2264 10000). The vertices are labeled with\nthe numbers from 1 to n. Then n - 1 lines follow, each describing one edge\nusing two space-separated numbers a b \u2013 the labels of the vertices connected\nby the edge (1 \u2264 a < b \u2264 n). It is guaranteed that the input represents a\ntree. Output Print one integer \u2013 the number of lifelines in the tree. Examples\nInput 4 1 2 1 3 1 4 Output 3 Input 5 1 2 2 3 3 4 3 5 Output 4 Note In the\nsecond sample, there are four lifelines: paths between vertices 1 and 3, 2 and\n4, 2 and 5, and 4 and 5.\n\n",
        "cf_contest_id": 690,
        "cf_index": "F1",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 2\r\n1 3\r\n1 4\r\n",
                "3\r\n"
            ],
            [
                "5\r\n1 2\r\n2 3\r\n3 4\r\n3 5\r\n",
                "4\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 2\r\n",
                "0\r\n"
            ],
            [
                "3\r\n2 1\r\n3 2\r\n",
                "1\r\n"
            ],
            [
                "10\r\n5 1\r\n1 2\r\n9 3\r\n10 5\r\n6 3\r\n8 5\r\n2 7\r\n2 3\r\n9 4\r\n",
                "11\r\n"
            ]
        ]
    }
]