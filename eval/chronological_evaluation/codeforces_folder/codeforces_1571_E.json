[
    {
        "name": "Fix the String",
        "description": "A regular bracket sequence is a bracket sequence that can be transformed into\na correct arithmetic expression by inserting characters \"1\" and \"+\" between\nthe original characters of the sequence. For example: bracket sequences \"()()\"\nand \"(())\" are regular (the resulting expressions are: \"(1)+(1)\" and\n\"((1+1)+1)\"); bracket sequences \")(\", \"(\" and \")\" are not. You are given two\nstrings \n    s\n and \n    a\n, the string \n    s\n has length \n    n\n, the string\n\n    a\n has length \n    n - 3\n. The string \n    s\n is a bracket sequence (i.\ne. each element of this string is either an opening bracket character or a\nclosing bracket character). The string \n    a\n is a binary string (i. e. each\nelement of this string is either 1 or 0). The string \n    a\n imposes some\nconstraints on the string \n    s\n: for every \n    i\n such that \n    a_i\n is 1,\nthe string \n    s_i s_i+1 s_i+2 s_i+3\n should be a regular bracket\nsequence. Characters of \n    a\n equal to 0 don't impose any constraints.\nInitially, the string \n    s\n may or may not meet these constraints. You can\nperform the following operation any number of times: replace some character of\n\n    s\n with its inverse (i. e. you can replace an opening bracket with a\nclosing bracket, or vice versa). Determine if it is possible to change some\ncharacters in \n    s\n so that it meets all of the constraints, and if it is\npossible, calculate the minimum number of characters to be changed. Input The\nfirst line contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the\nnumber of test cases. Each test case consists of three lines. The first line\ncontains one integer \n    n\n (\n    4 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n). The\nsecond line contains the string \n    s\n, consisting of exactly \n    n\n\ncharacters; each character of \n    s\n is either '(' or ')'. The third line\ncontains the string \n    a\n, consisting of exactly \n    n - 3\n characters;\neach character of \n    a\n is either '1' or '0'. Additional constraint on the\ninput: the sum of \n    n\n over all test cases does not exceed \n    2 \n    \u00b7\n    10^5\n. Output For each test case, print one integer: the minimum number of\ncharacters that need to be changed in \n    s\n, or \n    -1\n if it is\nimpossible. Example Input 6 4 ))(( 1 4 ))(( 0 4 ()() 0 6 ))(()( 101 6 ))(()(\n001 5 ((((( 11 Output 2 0 0 4 1 -1\n\n",
        "cf_contest_id": 1571,
        "cf_index": "E",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "bitmasks",
            "dp",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n4\r\n))((\r\n1\r\n4\r\n))((\r\n0\r\n4\r\n()()\r\n0\r\n6\r\n))(()(\r\n101\r\n6\r\n))(()(\r\n001\r\n5\r\n(((((\r\n11\r\n",
                "2\r\n0\r\n0\r\n4\r\n1\r\n-1\r\n"
            ]
        ],
        "private_cases": []
    }
]