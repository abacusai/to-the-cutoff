[
    {
        "name": "Playoff Tournament",
        "description": "\n    2^k\n teams participate in a playoff tournament. The tournament consists\nof \n    2^k - 1\n games. They are held as follows: first of all, the teams are\nsplit into pairs: team \n    1\n plays against team \n    2\n, team \n    3\n plays\nagainst team \n    4\n (exactly in this order), and so on (so, \n    2^k-1\n\ngames are played in that phase). When a team loses a game, it is eliminated,\nand each game results in elimination of one team (there are no ties). After\nthat, only \n    2^k-1\n teams remain. If only one team remains, it is\ndeclared the champion; otherwise, \n    2^k-2\n games are played: in the first\none of them, the winner of the game \"\n    1\n vs \n    2\n\" plays against the\nwinner of the game \"\n    3\n vs \n    4\n\", then the winner of the game \"\n    5\n\nvs \n    6\n\" plays against the winner of the game \"\n    7\n vs \n    8\n\", and so\non. This process repeats until only one team remains. For example, this\npicture describes the chronological order of games with \n    k = 3\n: Let the\nstring \n    s\n consisting of \n    2^k - 1\n characters describe the results of\nthe games in chronological order as follows: if \n    s_i\n is 0, then the team\nwith lower index wins the \n    i\n-th game; if \n    s_i\n is 1, then the team\nwith greater index wins the \n    i\n-th game; if \n    s_i\n is ?, then the\nresult of the \n    i\n-th game is unknown (any team could win this game). Let\n\n    f(s)\n be the number of possible winners of the tournament described by\nthe string \n    s\n. A team \n    i\n is a possible winner of the tournament if\nit is possible to replace every ? with either 1 or 0 in such a way that team\n\n    i\n is the champion. You are given the initial state of the string\n\n    s\n. You have to process \n    q\n queries of the following form: \n    p\n\n\n    c\n \u2014 replace \n    s_p\n with character \n    c\n, and print \n    f(s)\n as\nthe result of the query. Input The first line contains one integer \n    k\n\n(\n    1 \n    \u2264 k \n    \u2264 18\n). The second line contains a string consisting of\n\n    2^k - 1\n characters \u2014 the initial state of the string \n    s\n. Each\ncharacter is either ?, 0, or 1. The third line contains one integer \n    q\n\n(\n    1 \n    \u2264 q \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of queries. Then \n    q\n\nlines follow, the \n    i\n-th line contains an integer \n    p\n and a character\n\n    c\n (\n    1 \n    \u2264 p \n    \u2264 2^k - 1\n; \n    c\n is either ?, 0, or 1),\ndescribing the \n    i\n-th query. Output For each query, print one integer \u2014\n\n    f(s)\n. Example Input 3 0110?11 6 5 1 6 ? 7 ? 1 ? 5 ? 1 1 Output 1 2 3 3 5\n4\n\n",
        "cf_contest_id": 1535,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "dp",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n0110?11\r\n6\r\n5 1\r\n6 ?\r\n7 ?\r\n1 ?\r\n5 ?\r\n1 1\r\n",
                "1\r\n2\r\n3\r\n3\r\n5\r\n4\r\n"
            ]
        ],
        "private_cases": []
    }
]