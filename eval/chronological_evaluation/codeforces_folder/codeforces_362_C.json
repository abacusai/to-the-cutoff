[
    {
        "name": "Insertion Sort",
        "description": "Petya is a beginner programmer. He has already mastered the basics of the C++\nlanguage and moved on to learning algorithms. The first algorithm he\nencountered was insertion sort. Petya has already written the code that\nimplements this algorithm and sorts the given integer zero-indexed array a of\nsize n in the non-decreasing order. for (int i = 1; i < n; i = i + 1)  int j\n= i; while (j > 0        a[j] < a[j - 1])  swap(a[j], a[j - 1]); // swap elements\na[j] and a[j - 1] j = j - 1;   Petya uses this algorithm only for sorting of\narrays that are permutations of numbers from 0 to n - 1. He has already chosen\nthe permutation he wants to sort but he first decided to swap some two of its\nelements. Petya wants to choose these elements in such a way that the number\nof times the sorting executes function swap, was minimum. Help Petya find out\nthe number of ways in which he can make the swap and fulfill this requirement.\nIt is guaranteed that it's always possible to swap two elements of the input\npermutation in such a way that the number of swap function calls decreases.\nInput The first line contains a single integer n (2 \u2264 n \u2264 5000) \u2014 the length\nof the permutation. The second line contains n different integers from 0 to n\n- 1, inclusive \u2014 the actual permutation. Output Print two integers: the\nminimum number of times the swap function is executed and the number of such\npairs (i, j) that swapping the elements of the input permutation with indexes\ni and j leads to the minimum number of the executions. Examples Input 5 4 0 3\n1 2 Output 3 2 Input 5 1 2 3 4 0 Output 3 4 Note In the first sample the\nappropriate pairs are (0, 3) and (0, 4). In the second sample the appropriate\npairs are (0, 4), (1, 4), (2, 4) and (3, 4).\n\n",
        "cf_contest_id": 362,
        "cf_index": "C",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n4 0 3 1 2\r\n",
                "3 2\r\n"
            ],
            [
                "5\r\n1 2 3 4 0\r\n",
                "3 4\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n1 3 4 0 2\r\n",
                "4 5\r\n"
            ],
            [
                "10\r\n9 8 7 6 5 4 3 2 1 0\r\n",
                "28 1\r\n"
            ],
            [
                "5\r\n0 4 1 3 2\r\n",
                "1 1\r\n"
            ],
            [
                "6\r\n3 0 1 4 5 2\r\n",
                "4 5\r\n"
            ],
            [
                "3\r\n0 2 1\r\n",
                "0 1\r\n"
            ],
            [
                "3\r\n1 0 2\r\n",
                "0 1\r\n"
            ],
            [
                "3\r\n1 2 0\r\n",
                "1 2\r\n"
            ],
            [
                "3\r\n2 0 1\r\n",
                "1 2\r\n"
            ],
            [
                "3\r\n2 1 0\r\n",
                "0 1\r\n"
            ],
            [
                "7\r\n4 0 3 5 1 2 6\r\n",
                "5 2\r\n"
            ],
            [
                "8\r\n1 5 4 0 2 7 3 6\r\n",
                "7 3\r\n"
            ],
            [
                "9\r\n1 5 6 3 0 7 2 8 4\r\n",
                "11 4\r\n"
            ],
            [
                "10\r\n8 6 7 9 4 5 2 3 1 0\r\n",
                "24 1\r\n"
            ],
            [
                "11\r\n4 9 1 2 8 5 10 3 0 7 6\r\n",
                "16 1\r\n"
            ],
            [
                "12\r\n2 7 0 1 3 10 4 8 11 6 9 5\r\n",
                "13 1\r\n"
            ],
            [
                "13\r\n5 11 12 10 3 8 4 0 7 9 6 1 2\r\n",
                "39 4\r\n"
            ],
            [
                "100\r\n73 98 9 92 43 77 32 2 29 5 58 59 61 17 10 94 60 12 80 16 24 91 8 70 62 99 47 23 78 19 22 30 44 96 63 74 48 18 69 45 33 88 97 11 31 66 1 82 7 28 27 41 51 0 37 39 71 75 13 26 20 87 25 40 38 46 79 15 14 81 57 90 83 52 67 6 53 68 54 65 86 93 4 34 95 42 85 72 56 36 89 84 35 64 55 76 21 50 49 3\r\n",
                "2137 1\r\n"
            ],
            [
                "120\r\n60 100 55 8 106 57 43 85 103 0 6 20 88 102 53 2 116 31 119 59 86 71 99 81 50 22 74 5 80 13 95 118 49 67 17 63 10 27 61 45 101 76 87 72 113 93 92 47 42 41 35 83 97 51 77 114 69 30 91 44 1 84 107 105 16 70 108 65 64 78 25 39 89 23 40 62 117 4 98 24 104 75 58 3 79 112 11 28 109 38 21 19 37 115 9 54 32 111 46 68 90 48 34 12 96 82 29 73 110 18 26 52 36 94 66 15 14 33 7 56\r\n",
                "3686 1\r\n"
            ],
            [
                "150\r\n48 115 13 9 105 117 41 136 123 32 84 95 62 50 140 106 145 91 57 141 139 35 45 27 129 63 137 10 37 60 44 30 101 119 138 78 22 103 39 134 49 36 25 12 28 67 69 99 148 26 16 87 146 65 8 74 14 38 47 89 81 19 40 11 64 43 110 66 102 3 122 124 100 2 125 42 97 73 121 7 52 23 29 109 1 70 34 108 59 55 127 90 88 144 18 56 17 75 116 5 135 4 15 20 86 94 82 149 126 130 113 33 147 80 54 76 142 96 85 114 112 31 71 133 77 79 93 21 143 128 24 72 68 61 0 131 107 58 132 120 6 46 104 118 53 51 111 83 92 98\r\n",
                "5113 4\r\n"
            ]
        ]
    }
]