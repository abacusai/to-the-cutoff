[
    {
        "name": "Little Girl and Maximum Sum",
        "description": "The little girl loves the problems on array queries very much. One day she\ncame across a rather well-known problem: you've got an array of \n    n\n\nelements (the elements of the array are indexed starting from 1); also, there\nare \n    q\n queries, each one is defined by a pair of integers \n    l_i\n,\n\n    r_i\n \n    (1 \n    \u2264 l_i \n    \u2264 r_i \n    \u2264 n)\n. You need to find for each\nquery the sum of elements of the array with indexes from \n    l_i\n to\n\n    r_i\n, inclusive. The little girl found the problem rather boring. She\ndecided to reorder the array elements before replying to the queries in a way\nthat makes the sum of query replies maximum possible. Your task is to find the\nvalue of this maximum sum. Input The first line contains two space-separated\nintegers \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \u00b710^5\n) and \n    q\n (\n    1 \n    \u2264\n    q \n    \u2264 2\n    \u00b710^5\n) \u2014 the number of elements in the array and the number\nof queries, correspondingly. The next line contains \n    n\n space-separated\nintegers \n    a_i\n (\n    1 \n    \u2264 a_i \n    \u2264 2\n    \u00b710^5\n) \u2014 the array\nelements. Each of the following \n    q\n lines contains two space-separated\nintegers \n    l_i\n and \n    r_i\n (\n    1 \n    \u2264 l_i \n    \u2264 r_i \n    \u2264 n\n) \u2014 the\n\n    i\n-th query. Output In a single line print, a single integer \u2014 the\nmaximum sum of query replies after the array elements are reordered. Please,\ndo not use the \npreferred to use the cin, cout streams or the \n3 3 5 3 2 1 2 2 3 1 3 Output 25 Input 5 3 5 2 4 1 3 1 5 2 3 2 3 Output 33\n\n",
        "cf_contest_id": 276,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\n5 3 2\r\n1 2\r\n2 3\r\n1 3\r\n",
                "25\r\n"
            ],
            [
                "5 3\r\n5 2 4 1 3\r\n1 5\r\n2 3\r\n2 3\r\n",
                "33\r\n"
            ]
        ],
        "private_cases": [
            [
                "34 21\r\n23 38 16 49 44 50 48 34 33 19 18 31 11 15 20 47 44 30 39 33 45 46 1 13 27 16 31 36 17 23 38 5 30 16\r\n8 16\r\n14 27\r\n8 26\r\n1 8\r\n5 6\r\n23 28\r\n4 33\r\n13 30\r\n12 30\r\n11 30\r\n9 21\r\n1 14\r\n15 22\r\n4 11\r\n5 24\r\n8 20\r\n17 33\r\n6 9\r\n3 14\r\n25 34\r\n10 17\r\n",
                "9382\r\n"
            ],
            [
                "16 13\r\n40 32 15 16 35 36 45 23 30 42 25 8 29 21 39 23\r\n2 9\r\n3 11\r\n8 9\r\n4 14\r\n1 6\r\n5 10\r\n5 14\r\n5 11\r\n13 13\r\n2 8\r\n9 16\r\n6 10\r\n7 8\r\n",
                "2838\r\n"
            ],
            [
                "22 7\r\n44 41 40 41 37 42 46 16 50 47 30 7 32 6 20 14 47 25 11 1 35 12\r\n1 10\r\n10 20\r\n4 5\r\n1 8\r\n2 12\r\n8 8\r\n2 16\r\n",
                "2202\r\n"
            ],
            [
                "3 2\r\n1 2 3\r\n2 3\r\n1 2\r\n",
                "9\r\n"
            ]
        ]
    }
]