[
    {
        "name": "Omkar and the Meaning of Life",
        "description": "It turns out that the meaning of life is a permutation \n    p_1, p_2, \n    \u2026,\n    p_n\n of the integers \n    1, 2, \n    \u2026, n\n (\n    2 \n    \u2264 n \n    \u2264 100\n).\nOmkar, having created all life, knows this permutation, and will allow you to\nfigure it out using some queries. A query consists of an array \n    a_1, a_2,\n    \n    \u2026, a_n\n of integers between \n    1\n and \n    n\n. \n    a\n is not\nrequired to be a permutation. Omkar will first compute the pairwise sum of\n\n    a\n and \n    p\n, meaning that he will compute an array \n    s\n where\n\n    s_j = p_j + a_j\n for all \n    j = 1, 2, \n    \u2026, n\n. Then, he will find\nthe smallest index \n    k\n such that \n    s_k\n occurs more than once in\n\n    s\n, and answer with \n    k\n. If there is no such index \n    k\n, then he\nwill answer with \n    0\n. You can perform at most \n    2n\n queries. Figure out\nthe meaning of life \n    p\n. Interaction Start the interaction by reading\nsingle integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 100\n) \u2014 the length of the\npermutation \n    p\n. You can then make queries. A query consists of a single\nline \"\n    ? \n     a_1 \n     a_2 \n    \n    \u2026\n    \n    a_n\n\" (\n    1 \n    \u2264 a_j \n    \u2264 n\n). The answer to each query will be a\nsingle integer \n    k\n as described above (\n    0 \n    \u2264 k \n    \u2264 n\n). After\nmaking a query do not forget to output end of line and flush the output.\nOtherwise, you will get Idleness limit exceeded. To do this, use:\nfflush(stdout) or cout.flush() in C++; System.out.flush() in Java;\nflush(output) in Pascal; stdout.flush() in Python; see documentation for other\nlanguages.To output your answer, print a single line \"\n    ! \n     p_1\n    \n     p_2 \n    \n    \u2026\n     p_n\n\" then terminate. You can\nmake at most \n    2n\n queries. Outputting the answer does not count as a\nquery. Hack Format To hack, first output a line containing \n    n\n (\n    2\n    \n    \u2264 n \n    \u2264 100\n), then output another line containing the hidden\npermutation \n    p_1, p_2, \n    \u2026, p_n\n of numbers from \n    1\n to \n    n\n.\nExample Input 5 2 0 1 Output ? 4 4 2 3 2 ? 3 5 1 5 5 ? 5 2 4 3 1 ! 3 2 1 5 4\nNote In the sample, the hidden permutation \n    p\n is \n    [3, 2, 1, 5, 4]\n.\nThree queries were made. The first query is \n    a = [4, 4, 2, 3, 2]\n. This\nyields \n    s = [3 + 4, 2 + 4, 1 + 2, 5 + 3, 4 + 2] = [7, 6, 3, 8, 6]\n.\n\n    6\n is the only number that appears more than once, and it appears first\nat index \n    2\n, making the answer to the query \n    2\n. The second query is\n\n    a = [3, 5, 1, 5, 5]\n. This yields \n    s = [3 + 3, 2 + 5, 1 + 1, 5 + 5, 4 +\n    5] = [6, 7, 2, 10, 9]\n. There are no numbers that appear more than once\nhere, so the answer to the query is \n    0\n. The third query is \n    a = [5, 2,\n    4, 3, 1]\n. This yields \n    s = [3 + 5, 2 + 2, 1 + 4, 5 + 3, 4 + 1] = [8, 4,\n    5, 8, 5]\n. \n    5\n and \n    8\n both occur more than once here. \n    5\n first\nappears at index \n    3\n, while \n    8\n first appears at index \n    1\n, and\n\n    1 < 3\n, making the answer to the query \n    1\n. Note that the sample is\nonly meant to provide an example of how the interaction works; it is not\nguaranteed that the above queries represent a correct strategy with which to\ndetermine the answer.\n\n",
        "cf_contest_id": 1583,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "interactive"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3 2 1 5 4\r\n",
                "5\r\n? 5 5 5 5 1\r\n0\r\n? 5 5 5 5 2\r\n3\r\n? 4 4 4 4 1\r\n3\r\n? 4 4 4 4 2\r\n2\r\n? 4 4 4 4 3\r\n1\r\n? 4 4 4 4 4\r\n0\r\n? 4 4 4 4 5\r\n4\r\n! 3 2 1 5 4\r\n"
            ]
        ],
        "private_cases": [
            [
                "6\r\n3 5 4 2 6 1\r\n",
                "6\r\n? 6 6 6 6 6 1\r\n0\r\n? 6 6 6 6 6 2\r\n0\r\n? 6 6 6 6 6 3\r\n0\r\n? 6 6 6 6 6 4\r\n0\r\n? 6 6 6 6 6 5\r\n0\r\n? 6 6 6 6 6 6\r\n0\r\n? 1 1 1 1 1 1\r\n0\r\n? 1 1 1 1 1 2\r\n4\r\n? 1 1 1 1 1 3\r\n1\r\n? 1 1 1 1 1 4\r\n3\r\n? 1 1 1 1 1 5\r\n2\r\n? 1 1 1 1 1 6\r\n5\r\n! 3 5 4 2 6 1\r\n"
            ],
            [
                "2\r\n1 2\r\n",
                "2\r\n? 2 1\r\n1\r\n? 2 1\r\n1\r\n? 2 2\r\n0\r\n! 1 2\r\n"
            ],
            [
                "8\r\n1 6 8 3 2 4 5 7\r\n",
                "8\r\n? 8 8 8 8 8 8 8 1\r\n0\r\n? 8 8 8 8 8 8 8 2\r\n1\r\n? 7 7 7 7 7 7 7 1\r\n1\r\n? 7 7 7 7 7 7 7 2\r\n5\r\n? 7 7 7 7 7 7 7 3\r\n4\r\n? 7 7 7 7 7 7 7 4\r\n6\r\n? 7 7 7 7 7 7 7 5\r\n7\r\n? 7 7 7 7 7 7 7 6\r\n2\r\n? 7 7 7 7 7 7 7 7\r\n0\r\n? 7 7 7 7 7 7 7 8\r\n3\r\n! 1 6 8 3 2 4 5 7\r\n"
            ],
            [
                "3\r\n3 2 1\r\n",
                "3\r\n? 3 3 1\r\n0\r\n? 3 3 2\r\n0\r\n? 3 3 3\r\n0\r\n? 1 1 1\r\n0\r\n? 1 1 2\r\n2\r\n? 1 1 3\r\n1\r\n! 3 2 1\r\n"
            ],
            [
                "4\r\n3 1 4 2\r\n",
                "4\r\n? 4 4 4 1\r\n0\r\n? 4 4 4 2\r\n0\r\n? 4 4 4 3\r\n2\r\n? 2 2 2 1\r\n2\r\n? 2 2 2 2\r\n0\r\n? 2 2 2 3\r\n1\r\n? 2 2 2 4\r\n3\r\n! 3 1 4 2\r\n"
            ]
        ]
    }
]