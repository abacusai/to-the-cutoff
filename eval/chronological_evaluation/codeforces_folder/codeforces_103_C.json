[
    {
        "name": "Russian Roulette",
        "description": "After all the events in Orlando we all know, Sasha and Roma decided to find\nout who is still the team's biggest loser. Thankfully, Masha found somewhere a\nrevolver with a rotating cylinder of n bullet slots able to contain exactly k\nbullets, now the boys have a chance to resolve the problem once and for all.\nSasha selects any k out of n slots he wishes and puts bullets there. Roma\nspins the cylinder so that every of n possible cylinder's shifts is\nequiprobable. Then the game starts, the players take turns, Sasha starts: he\nputs the gun to his head and shoots. If there was no bullet in front of the\ntrigger, the cylinder shifts by one position and the weapon is given to Roma\nfor make the same move. The game continues until someone is shot, the survivor\nis the winner. Sasha does not want to lose, so he must choose slots for\nbullets in such a way as to minimize the probability of its own loss. Of all\nthe possible variant he wants to select the lexicographically minimal one,\nwhere an empty slot is lexicographically less than a charged one. More\nformally, the cylinder of n bullet slots able to contain k bullets can be\nrepresented as a string of n characters. Exactly k of them are \"X\" (charged\nslots) and the others are \".\" (uncharged slots). Let us describe the process\nof a shot. Suppose that the trigger is in front of the first character of the\nstring (the first slot). If a shot doesn't kill anyone and the cylinder\nshifts, then the string shifts left. So the first character becomes the last\none, the second character becomes the first one, and so on. But the trigger\ndoesn't move. It will be in front of the first character of the resulting\nstring. Among all the strings that give the minimal probability of loss, Sasha\nchoose the lexicographically minimal one. According to this very string, he\ncharges the gun. You have to help Sasha to charge the gun. For that, each xi\nquery must be answered: is there a bullet in the positions xi? Input The first\nline contains three integers n, k and p (1 \u2264 n \u2264 10^18, 0 \u2264 k \u2264 n, 1 \u2264 p \u2264\n1000) \u2014 the number of slots in the cylinder, the number of bullets and the\nnumber of queries. Then follow p lines; they are the queries. Each line\ncontains one integer xi (1 \u2264 xi \u2264 n) the number of slot to describe. Please do\nnot use the \npreferred to use cin, cout streams or the \nquery print \".\" if the slot should be empty and \"X\" if the slot should be\ncharged. Examples Input 3 1 3 1 2 3 Output ..X Input 6 3 6 1 2 3 4 5 6 Output\n.X.X.X Input 5 2 5 1 2 3 4 5 Output ...XX Note The lexicographical comparison\nof is performed by the < operator in modern programming languages. The a\nstring is lexicographically less that the b string, if there exists such i (1\n\u2264 i \u2264 n), that ai < bi, and for any j (1 \u2264 j < i) aj = bj.\n\n",
        "cf_contest_id": 103,
        "cf_index": "C",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 1 3\r\n1\r\n2\r\n3\r\n",
                "..X"
            ],
            [
                "6 3 6\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n",
                ".X.X.X"
            ],
            [
                "5 2 5\r\n1\r\n2\r\n3\r\n4\r\n5\r\n",
                "...XX"
            ]
        ],
        "private_cases": [
            [
                "4 2 8\r\n1\r\n3\r\n4\r\n2\r\n3\r\n4\r\n1\r\n2\r\n",
                "..XX.X.X"
            ],
            [
                "15 10 15\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n",
                ".X.X.X.X.XXXXXX"
            ],
            [
                "7 4 7\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n",
                ".X.X.XX"
            ],
            [
                "7 5 7\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n",
                ".X.XXXX"
            ],
            [
                "7 7 7\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n",
                "XXXXXXX"
            ]
        ]
    }
]