[
    {
        "name": "Pillars",
        "description": "Marmot found a row with n pillars. The i-th pillar has the height of hi\nmeters. Starting from one pillar i1, Marmot wants to jump on the pillars i2,\n..., ik. (1 \u2264 i1 < i2 < ... < ik \u2264 n). From a pillar i Marmot can jump on a\npillar j only if i < j and |hi - hj| \u2265 d, where |x| is the absolute value of\nthe number x. Now Marmot is asking you find out a jump sequence with maximal\nlength and print it. Input The first line contains two integers n and d (1 \u2264 n\n\u2264 10^5, 0 \u2264 d \u2264 10^9). The second line contains n numbers h1, h2, ..., hn (1 \u2264\nhi \u2264 10^15). Output The first line should contain one integer k, the maximal\nlength of a jump sequence. The second line should contain k integers i1, i2,\n..., ik (1 \u2264 i1 < i2 < ... < ik \u2264 n), representing the pillars' indices from\nthe maximal length jump sequence. If there is more than one maximal length\njump sequence, print any. Examples Input 5 2 1 3 6 7 4 Output 4 1 2 3 5 Input\n10 3 2 1 3 6 9 11 7 3 20 18 Output 6 1 4 6 7 8 9 Note In the first example\nMarmot chooses the pillars 1, 2, 3, 5 with the heights 1, 3, 6, 4. Another\njump sequence of length 4 is 1, 2, 4, 5.\n\n",
        "cf_contest_id": 474,
        "cf_index": "E",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dp",
            "sortings",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 2\r\n1 3 6 7 4\r\n",
                "4\r\n1 2 4 5 "
            ],
            [
                "10 3\r\n2 1 3 6 9 11 7 3 20 18\r\n",
                "6\r\n3 4 6 7 8 9 "
            ]
        ],
        "private_cases": []
    }
]