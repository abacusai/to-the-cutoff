[
    {
        "name": "Industrial Nim",
        "description": "There are n stone quarries in Petrograd. Each quarry owns mi dumpers (1 \u2264 i \u2264\nn). It is known that the first dumper of the i-th quarry has xi stones in it,\nthe second dumper has xi + 1 stones in it, the third has xi + 2, and the mi-th\ndumper (the last for the i-th quarry) has xi + mi - 1 stones in it. Two\noligarchs play a well-known game Nim. Players take turns removing stones from\ndumpers. On each turn, a player can select any dumper and remove any non-zero\namount of stones from it. The player who cannot take a stone loses. Your task\nis to find out which oligarch will win, provided that both of them play\noptimally. The oligarchs asked you not to reveal their names. So, let's call\nthe one who takes the first stone \u00abtolik\u00bb and the other one \u00abbolik\u00bb. Input The\nfirst line of the input contains one integer number n (1 \u2264 n \u2264 10^5) \u2014 the\namount of quarries. Then there follow n lines, each of them contains two\nspace-separated integers xi and mi (1 \u2264 xi, mi \u2264 10^16) \u2014 the amount of stones\nin the first dumper of the i-th quarry and the number of dumpers at the i-th\nquarry. Output Output \u00abtolik\u00bb if the oligarch who takes a stone first wins,\nand \u00abbolik\u00bb otherwise. Examples Input 2 2 1 3 2 Output tolik Input 4 1 1 1 1 1\n1 1 1 Output bolik\n\n",
        "cf_contest_id": 15,
        "cf_index": "C",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "games"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 64.0,
        "public_cases": [
            [
                "2\r\n2 1\r\n3 2\r\n",
                "tolik\r\n"
            ],
            [
                "4\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n",
                "bolik\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n2 3\r\n1 4\r\n5 8\r\n4 10\r\n10 8\r\n7 2\r\n1 2\r\n1 7\r\n4 10\r\n5 3\r\n",
                "tolik\r\n"
            ],
            [
                "20\r\n8 6\r\n6 3\r\n2 9\r\n7 8\r\n9 1\r\n2 4\r\n3 6\r\n6 3\r\n5 6\r\n5 3\r\n6 5\r\n2 10\r\n2 9\r\n6 3\r\n10 6\r\n10 10\r\n10 7\r\n3 9\r\n16 1\r\n1 3\r\n",
                "bolik\r\n"
            ],
            [
                "30\r\n53 12\r\n13 98\r\n21 60\r\n76 58\r\n39 5\r\n62 58\r\n73 80\r\n13 75\r\n37 45\r\n44 86\r\n1 85\r\n13 33\r\n17 50\r\n12 26\r\n97 48\r\n52 40\r\n2 71\r\n95 79\r\n38 76\r\n24 54\r\n91 39\r\n97 92\r\n94 80\r\n50 61\r\n33 56\r\n22 91\r\n39 94\r\n31 56\r\n28 16\r\n20 44\r\n",
                "tolik\r\n"
            ],
            [
                "1\r\n3737203222172202 1\r\n",
                "tolik\r\n"
            ],
            [
                "1\r\n3737203222172202 1\r\n",
                "tolik\r\n"
            ]
        ]
    }
]