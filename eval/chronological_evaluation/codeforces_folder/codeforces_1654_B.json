[
    {
        "name": "Prefix Removals",
        "description": "You are given a string \n    s\n consisting of lowercase letters of the English\nalphabet. You must perform the following algorithm on \n    s\n: Let \n    x\n be\nthe length of the longest prefix of \n    s\n which occurs somewhere else in\n\n    s\n as a contiguous substring (the other occurrence may also intersect the\nprefix). If \n    x = 0\n, break. Otherwise, remove the first \n    x\n characters\nof \n    s\n, and repeat. A prefix is a string consisting of several first\nletters of a given string, without any reorders. An empty prefix is also a\nvalid prefix. For example, the string \"abcd\" has 5 prefixes: empty string,\n\"a\", \"ab\", \"abc\" and \"abcd\". For instance, if we perform the algorithm on \n    s\n    =\n \"abcabdc\", Initially, \"ab\" is the longest prefix that also appears\nsomewhere else as a substring in \n    s\n, so \n    s =\n \"cabdc\" after \n    1\n\noperation. Then, \"c\" is the longest prefix that also appears somewhere else as\na substring in \n    s\n, so \n    s =\n \"abdc\" after \n    2\n operations. Now\n\n    x=0\n (because there are no non-empty prefixes of \"abdc\" that also appear\nsomewhere else as a substring in \n    s\n), so the algorithm terminates. Find\nthe final state of the string after performing the algorithm. Input The first\nline contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the\nnumber of test cases. This is followed by \n    t\n lines, each containing a\ndescription of one test case. Each line contains a string \n    s\n. The given\nstrings consist only of lowercase letters of the English alphabet and have\nlengths between \n    1\n and \n    2 \n    \u00b7 10^5\n inclusive. It is guaranteed\nthat the sum of the lengths of \n    s\n over all test cases does not exceed\n\n    2 \n    \u00b7 10^5\n. Output For each test case, print a single line\ncontaining the string \n    s\n after executing the algorithm. It can be shown\nthat such string is non-empty. Example Input 6 abcabdc a bbbbbbbbbb codeforces\ncffcfccffccfcffcfccfcffccffcfccf zyzyzwxxyyxxyyzzyzzxxwzxwywxwzxxyzzw Output\nabdc a b deforces cf xyzzw Note The first test case is explained in the\nstatement. In the second test case, no operations can be performed on \n    s\n.\nIn the third test case, Initially, \n    s =\n \"bbbbbbbbbb\". After \n    1\n\noperation, \n    s =\n \"b\". In the fourth test case, Initially, \n    s =\n\n\"codeforces\". After \n    1\n operation, \n    s =\n \"odeforces\". After \n    2\n\noperations, \n    s =\n \"deforces\".\n\n",
        "cf_contest_id": 1654,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\nabcabdc\r\na\r\nbbbbbbbbbb\r\ncodeforces\r\ncffcfccffccfcffcfccfcffccffcfccf\r\nzyzyzwxxyyxxyyzzyzzxxwzxwywxwzxxyzzw\r\n",
                "abdc\r\n\r\na\r\n\r\nb\r\n\r\ndeforces\r\n\r\ncf\r\n\r\nxyzzw\r\n\r\n"
            ]
        ],
        "private_cases": []
    }
]