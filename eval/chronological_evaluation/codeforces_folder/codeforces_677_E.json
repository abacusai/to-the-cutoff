[
    {
        "name": "Vanya and Balloons",
        "description": "Vanya plays a game of balloons on the field of size n \u00d7 n, where each cell\ncontains a balloon with one of the values 0, 1, 2 or 3. The goal is to destroy\na cross, such that the product of all values of balloons in the cross is\nmaximum possible. There are two types of crosses: normal and rotated. For\nexample: **o** **o** ooooo **o** **o** or o***o *o*o* **o** *o*o* o***o\nFormally, the cross is given by three integers r, c and d, such that d \u2264 r, c\n\u2264 n - d + 1. The normal cross consists of balloons located in cells (x, y)\n(where x stay for the number of the row and y for the number of the column),\nsuch that |x - r|\u00b7|y - c| = 0 and |x - r| + |y - c| < d. Rotated cross\nconsists of balloons located in cells (x, y), such that |x - r| = |y - c| and\n|x - r| < d. Vanya wants to know the maximum possible product of the values of\nballs forming one cross. As this value can be large, output it modulo 10^9 +\n7. Input The first line of the input contains a single integer n (1 \u2264 n \u2264\n1000) \u2014 the number of rows and columns in the table with balloons. The each of\nthe following n lines contains n characters '0', '1', '2' or '3' \u2014 the\ndescription of the values in balloons. Output Print the maximum possible\nproduct modulo 10^9 + 7. Note, that you are not asked to maximize the\nremainder modulo 10^9 + 7, but to find the maximum value and print it this\nmodulo. Examples Input 4 1233 0213 2020 0303 Output 108 Input 5 00300 00300\n33333 00300 00300 Output 19683 Input 5 00003 02030 00300 03020 30000 Output\n108 Input 5 21312 10003 10002 10003 23231 Output 3 Input 5 12131 12111 12112\n21311 21212 Output 24 Note In the first sample, the maximum product is\nachieved for a rotated cross with a center in the cell (3, 3) and radius 1:\n2\u00b72\u00b73\u00b73\u00b73 = 108.\n\n",
        "cf_contest_id": 677,
        "cf_index": "E",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "dp",
            "implementation"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4\r\n1233\r\n0213\r\n2020\r\n0303\r\n",
                "108\r\n"
            ],
            [
                "5\r\n00300\r\n00300\r\n33333\r\n00300\r\n00300\r\n",
                "19683\r\n"
            ],
            [
                "5\r\n00003\r\n02030\r\n00300\r\n03020\r\n30000\r\n",
                "108\r\n"
            ],
            [
                "5\r\n21312\r\n10003\r\n10002\r\n10003\r\n23231\r\n",
                "3\r\n"
            ],
            [
                "5\r\n12131\r\n12111\r\n12112\r\n21311\r\n21212\r\n",
                "24\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n32321\r\n22112\r\n31011\r\n22112\r\n21323\r\n",
                "8\r\n"
            ],
            [
                "5\r\n00200\r\n00200\r\n00132\r\n00300\r\n00300\r\n",
                "3\r\n"
            ],
            [
                "5\r\n10301\r\n01110\r\n21311\r\n03120\r\n10103\r\n",
                "54\r\n"
            ],
            [
                "5\r\n00100\r\n00100\r\n22211\r\n00000\r\n00000\r\n",
                "2\r\n"
            ],
            [
                "5\r\n00300\r\n00200\r\n23200\r\n00300\r\n00200\r\n",
                "3\r\n"
            ],
            [
                "5\r\n00000\r\n00000\r\n31133\r\n00200\r\n00200\r\n",
                "3\r\n"
            ],
            [
                "5\r\n30002\r\n01030\r\n00100\r\n00030\r\n00001\r\n",
                "3\r\n"
            ],
            [
                "5\r\n10003\r\n02010\r\n00100\r\n01000\r\n20000\r\n",
                "3\r\n"
            ],
            [
                "5\r\n00001\r\n00010\r\n00200\r\n01020\r\n30002\r\n",
                "3\r\n"
            ],
            [
                "5\r\n30000\r\n02000\r\n00300\r\n03010\r\n10001\r\n",
                "3\r\n"
            ],
            [
                "5\r\n00300\r\n00200\r\n31023\r\n00100\r\n00200\r\n",
                "3\r\n"
            ],
            [
                "5\r\n10001\r\n02020\r\n00000\r\n03010\r\n30003\r\n",
                "3\r\n"
            ],
            [
                "1\r\n0\r\n",
                "0\r\n"
            ],
            [
                "1\r\n3\r\n",
                "3\r\n"
            ],
            [
                "1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "1\r\n2\r\n",
                "2\r\n"
            ]
        ]
    }
]