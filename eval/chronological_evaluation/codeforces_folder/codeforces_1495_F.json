[
    {
        "name": "Squares",
        "description": "There are \n    n\n squares drawn from left to right on the floor. The\n\n    i\n-th square has three integers \n    p_i,a_i,b_i\n, written on it. The\nsequence \n    p_1,p_2,\n    \u2026,p_n\n forms a permutation. Each round you will\nstart from the leftmost square \n    1\n and jump to the right. If you are now\non the \n    i\n-th square, you can do one of the following two operations: Jump\nto the \n    i+1\n-th square and pay the cost \n    a_i\n. If \n    i=n\n, then you\ncan end the round and pay the cost \n    a_i\n. Jump to the \n    j\n-th square\nand pay the cost \n    b_i\n, where \n    j\n is the leftmost square that\nsatisfies \n    j > i, p_j > p_i\n. If there is no such \n    j\n then you can end\nthe round and pay the cost \n    b_i\n. There are \n    q\n rounds in the game. To\nmake the game more difficult, you need to maintain a square set \n    S\n\n(initially it is empty). You must pass through these squares during the round\n(other squares can also be passed through). The square set \n    S\n for the\n\n    i\n-th round is obtained by adding or removing a square from the square\nset for the \n    (i-1)\n-th round. For each round find the minimum cost you\nshould pay to end it. Input The first line contains two integers \n    n\n,\n\n    q\n (\n    1\n    \u2264 n,q\n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of squares and the\nnumber of rounds. The second line contains \n    n\n distinct integers\n\n    p_1,p_2,\n    \u2026,p_n\n (\n    1\n    \u2264 p_i\n    \u2264 n\n). It is guaranteed that the\nsequence \n    p_1,p_2,\n    \u2026,p_n\n forms a permutation. The third line\ncontains \n    n\n integers \n    a_1,a_2,\n    \u2026,a_n\n (\n    -10^9\n    \u2264 a_i\n    \u2264\n    10^9\n). The fourth line contains \n    n\n integers \n    b_1,b_2,\n    \u2026,b_n\n\n(\n    -10^9\n    \u2264 b_i\n    \u2264 10^9\n). Then \n    q\n lines follow, \n    i\n-th of\nthem contains a single integer \n    x_i\n (\n    1\n    \u2264 x_i\n    \u2264 n\n). If\n\n    x_i\n was in the set \n    S\n on the \n    (i-1)\n-th round you should remove\nit, otherwise, you should add it. Output Print \n    q\n lines, each of them\nshould contain a single integer \u2014 the minimum cost you should pay to end the\ncorresponding round. Examples Input 3 2 2 1 3 10 -5 4 3 -2 3 1 2 Output 6 8\nInput 5 4 2 1 5 3 4 6 -5 3 -10 -1 0 3 2 7 2 1 2 3 2 Output -8 -7 -7 -8 Note\nLet's consider the character \n    T\n as the end of a round. Then we can draw\ntwo graphs for the first and the second test. In the first round of the first\ntest, the set that you must pass through is \n    1\n. The path you\ncan use is \n    1\n    \u2192 3\n    \u2192 T\n and its cost is \n    6\n. In the second round\nof the first test, the set that you must pass through is \n    1,2\n.\nThe path you can use is \n    1\n    \u2192 2\n    \u2192 3\n    \u2192 T\n and its cost is \n    8\n.\n\n",
        "cf_contest_id": 1495,
        "cf_index": "F",
        "cf_rating": 3300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "dp",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2\r\n2 1 3\r\n10 -5 4\r\n3 -2 3\r\n1\r\n2\r\n",
                "6\r\n8\r\n"
            ],
            [
                "5 4\r\n2 1 5 3 4\r\n6 -5 3 -10 -1\r\n0 3 2 7 2\r\n1\r\n2\r\n3\r\n2\r\n",
                "-8\r\n-7\r\n-7\r\n-8\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1\r\n-1\r\n2\r\n1\r\n",
                "-1\r\n"
            ]
        ]
    }
]