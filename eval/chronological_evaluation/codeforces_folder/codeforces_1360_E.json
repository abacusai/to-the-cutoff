[
    {
        "name": "Polygon",
        "description": "Polygon is not only the best platform for developing problems but also a\nsquare matrix with side \n    n\n, initially filled with the character 0. On the\npolygon, military training was held. The soldiers placed a cannon above each\ncell in the first row and a cannon to the left of each cell in the first\ncolumn. Thus, exactly \n    2n\n cannons were placed. Initial polygon for\n\n    n=4\n. Cannons shoot character 1. At any moment of time, no more than one\ncannon is shooting. When a 1 flies out of a cannon, it flies forward (in the\ndirection of the shot) until it collides with a polygon border or another 1.\nAfter that, it takes the cell in which it was before the collision and remains\nthere. Take a look at the examples for better understanding. More formally: if\na cannon stands in the row \n    i\n, to the left of the first column, and\nshoots with a 1, then the 1 starts its flight from the cell (\n    i, 1\n) and\nends in some cell (\n    i, j\n); if a cannon stands in the column \n    j\n,\nabove the first row, and shoots with a 1, then the 1 starts its flight from\nthe cell (\n    1, j\n) and ends in some cell (\n    i, j\n). For example,\nconsider the following sequence of shots: 1\u1e60hoot the cannon in the row\n\n    2\n. 2. Shoot the cannon in the row \n    2\n. 3. Shoot the cannon in column\n\n    3\n. You have a report from the military training on your desk. This\nreport is a square matrix with side length \n    n\n consisting of 0 and 1. You\nwonder if the training actually happened. In other words, is there a sequence\nof shots such that, after the training, you get the given matrix? Each cannon\ncan make an arbitrary number of shots. Before the training, each cell of the\npolygon contains 0. Input The first line contains an integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of test cases. Then \n    t\n test cases\nfollow. Each test case starts with a line containing an integer \n    n\n (\n    1\n    \n    \u2264 n \n    \u2264 50\n) \u2014 the size of the polygon. This is followed by \n    n\n\nlines of length \n    n\n, consisting of 0 and 1 \u2014 the polygon matrix after the\ntraining. The total area of the matrices in all test cases in one test does\nnot exceed \n    10^5\n. Output For each test case print: YES if there is a\nsequence of shots leading to a given matrix; NO if such a sequence does not\nexist. The letters in the words YES and NO can be printed in any case. Example\nInput 5 4 0010 0011 0000 0000 2 10 01 2 00 00 4 0101 1111 0101 0111 4 0100\n1110 0101 0111 Output YES NO YES YES NO Note The first test case was explained\nin the statement. The answer to the second test case is NO, since a 1 in a\ncell (\n    1, 1\n) flying out of any cannon would continue its flight further.\n\n",
        "cf_contest_id": 1360,
        "cf_index": "E",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "graphs",
            "implementation",
            "shortest paths"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n4\r\n0010\r\n0011\r\n0000\r\n0000\r\n2\r\n10\r\n01\r\n2\r\n00\r\n00\r\n4\r\n0101\r\n1111\r\n0101\r\n0111\r\n4\r\n0100\r\n1110\r\n0101\r\n0111\r\n",
                "YES\r\nNO\r\nYES\r\nYES\r\nNO\r\n"
            ]
        ],
        "private_cases": []
    }
]