[
    {
        "name": "Tree Factory",
        "description": "Bytelandian Tree Factory produces trees for all kinds of industrial\napplications. You have been tasked with optimizing the production of a certain\ntype of tree for an especially large and important order. The tree in question\nis a rooted tree with \n    n\n vertices labelled with distinct integers from\n\n    0\n to \n    n - 1\n. The vertex labelled \n    0\n is the root of the tree,\nand for any non-root vertex \n    v\n the label of its parent \n    p(v)\n is less\nthan the label of \n    v\n. All trees at the factory are made from bamboo\nblanks. A bamboo is a rooted tree such that each vertex has exactly one child,\nexcept for a single leaf vertex with no children. The vertices of a bamboo\nblank can be labelled arbitrarily before its processing is started. To process\na bamboo into another tree a single type of operation can be made: choose an\narbitrary non-root vertex \n    v\n such that its parent \n    p(v)\n is not a\nroot either. The operation consists of changing the parent of \n    v\n to its\nparent's parent \n    p(p(v))\n. Note that parents of all other vertices remain\nunchanged, in particular, the subtree of \n    v\n does not change. Efficiency\nis crucial, hence you have to minimize the number of operations to make the\ndesired tree from a bamboo blank. Construct any optimal sequence of operations\nto produce the desired tree. Note that the labelling of the resulting tree has\nto coincide with the labelling of the desired tree. Formally, the labels of\nthe roots have to be equal, and for non-root vertices with the same label the\nlabels of their parents should be the same. It is guaranteed that for any test\npresent in this problem an answer exists, and further, an optimal sequence\ncontains at most \n    10^6\n operations. Note that any hack that does not meet\nthese conditions will be invalid. Input The first line contains a single\ninteger \n    n\n \u2014 the number of vertices in the tree (\n    2 \n    \u2264 n \n    \u2264\n    10^5\n). The second line contains \n    n - 1\n integers \n    p(1), \n    \u2026, p(n\n    - 1)\n \u2014 indices of parent vertices of \n    1, \n    \u2026, n - 1\n respectively\n(\n    0 \n    \u2264 p(i) < i\n). Output In the first line, print \n    n\n distinct\nintegers \n    id_1, \n    \u2026, id_n\n \u2014 the initial labelling of the bamboo\nblank starting from the root vertex (\n    0 \n    \u2264 id_i < n\n). In the second\nline, print a single integer \n    k\n \u2014 the number of operations in your\nsequence (\n    0 \n    \u2264 k \n    \u2264 10^6\n). In the third line print \n    k\n\nintegers \n    v_1, \n    \u2026, v_k\n describing operations in order. The\n\n    i\n-th operation consists of changing \n    p(v_i)\n to \n    p(p(v_i))\n.\nEach operation should be valid, i.e. neither \n    v_i\n nor \n    p(v_i)\n can be\nthe root of the tree at the moment. Examples Input 5 0 0 1 1 Output 0 2 1 4 3\n2 1 3 Input 4 0 1 2 Output 0 1 2 3 0\n\n",
        "cf_contest_id": 1225,
        "cf_index": "F",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5\r\n0 0 1 1\r\n",
                "0 2 1 4 3 \r\n2\r\n1 3 "
            ],
            [
                "4\r\n0 1 2\r\n",
                "0 1 2 3 \r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n0\r\n",
                "0 1 \r\n0\r\n"
            ],
            [
                "3\r\n0 1\r\n",
                "0 1 2 \r\n0\r\n"
            ],
            [
                "3\r\n0 0\r\n",
                "0 2 1 \r\n1\r\n1 "
            ]
        ]
    }
]