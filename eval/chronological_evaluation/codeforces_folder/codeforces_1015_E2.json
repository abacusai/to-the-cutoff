[
    {
        "name": "Stars Drawing (Hard Edition)",
        "description": "A star is a figure of the following type: an asterisk character '*' in the\ncenter of the figure and four rays (to the left, right, top, bottom) of the\nsame positive length. The size of a star is the length of its rays. The size\nof a star must be a positive number (i.e. rays of length \n    0\n are not\nallowed). Let's consider empty cells are denoted by '.', then the following\nfigures are stars: The leftmost figure is a star of size \n    1\n, the middle\nfigure is a star of size \n    2\n and the rightmost figure is a star of size\n\n    3\n. You are given a rectangular grid of size \n    n \n    \u00d7 m\n\nconsisting only of asterisks '*' and periods (dots) '.'. Rows are numbered\nfrom \n    1\n to \n    n\n, columns are numbered from \n    1\n to \n    m\n. Your\ntask is to draw this grid using any number of stars or find out that it is\nimpossible. Stars can intersect, overlap or even coincide with each other. The\nnumber of stars in the output can't exceed \n    n \n    \u00b7 m\n. Each star should\nbe completely inside the grid. You can use stars of same and arbitrary sizes.\nIn this problem, you do not need to minimize the number of stars. Just find\nany way to draw the given grid with at most \n    n \n    \u00b7 m\n stars. Input The\nfirst line of the input contains two integers \n    n\n and \n    m\n (\n    3 \n    \u2264\n    n, m \n    \u2264 1000\n) \u2014 the sizes of the given grid. The next \n    n\n lines\ncontains \n    m\n characters each, the \n    i\n-th line describes the \n    i\n-th\nrow of the grid. It is guaranteed that grid consists of characters '*' and '.'\nonly. Output If it is impossible to draw the given grid using stars only,\nprint \"-1\". Otherwise in the first line print one integer \n    k\n (\n    0 \n    \u2264\n    k \n    \u2264 n \n    \u00b7 m\n) \u2014 the number of stars needed to draw the given grid.\nThe next \n    k\n lines should contain three integers each \u2014 \n    x_j\n,\n\n    y_j\n and \n    s_j\n, where \n    x_j\n is the row index of the central star\ncharacter, \n    y_j\n is the column index of the central star character and\n\n    s_j\n is the size of the star. Each star should be completely inside the\ngrid. Examples Input 6 8 ....*... ...**... ..*****. ...**... ....*... ........\nOutput 3 3 4 1 3 5 2 3 5 1 Input 5 5 .*... ****. .**** ..**. ..... Output 3 2\n2 1 3 3 1 3 4 1 Input 5 5 .*... ***.. .*... .*... ..... Output -1 Input 3 3\n*.* .*. *.* Output -1 Note In the first example the output 2 3 4 1 3 5 2 is\nalso correct.\n\n",
        "cf_contest_id": 1015,
        "cf_index": "E2",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dp",
            "greedy"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 8\r\n....*...\r\n...**...\r\n..*****.\r\n...**...\r\n....*...\r\n........\r\n",
                "2\r\n3 4 1\r\n3 5 2\r\n"
            ],
            [
                "5 5\r\n.*...\r\n****.\r\n.****\r\n..**.\r\n.....\r\n",
                "3\r\n2 2 1\r\n3 3 1\r\n3 4 1\r\n"
            ],
            [
                "5 5\r\n.*...\r\n***..\r\n.*...\r\n.*...\r\n.....\r\n",
                "-1"
            ],
            [
                "3 3\r\n*.*\r\n.*.\r\n*.*\r\n",
                "-1"
            ]
        ],
        "private_cases": [
            [
                "3 3\r\n.*.\r\n***\r\n**.\r\n",
                "-1"
            ],
            [
                "3 3\r\n.*.\r\n***\r\n.*.\r\n",
                "1\r\n2 2 1\r\n"
            ],
            [
                "3 3\r\n**.\r\n***\r\n.*.\r\n",
                "-1"
            ],
            [
                "100 3\r\n.*.\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n***\r\n**.\r\n",
                "-1"
            ]
        ]
    }
]