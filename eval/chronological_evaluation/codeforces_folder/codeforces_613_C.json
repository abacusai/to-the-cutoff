[
    {
        "name": "Necklace",
        "description": "Ivan wants to make a necklace as a present to his beloved girl. A necklace is\na cyclic sequence of beads of different colors. Ivan says that necklace is\nbeautiful relative to the cut point between two adjacent beads, if the chain\nof beads remaining after this cut is a palindrome (reads the same forward and\nbackward). Ivan has beads of n colors. He wants to make a necklace, such that\nit's beautiful relative to as many cuts as possible. He certainly wants to use\nall the beads. Help him to make the most beautiful necklace. Input The first\nline of the input contains a single number n (1 \u2264 n \u2264 26) \u2014 the number of\ncolors of beads. The second line contains after n positive integers ai \u2014 the\nquantity of beads of i-th color. It is guaranteed that the sum of ai is at\nleast 2 and does not exceed 100 000. Output In the first line print a single\nnumber \u2014 the maximum number of beautiful cuts that a necklace composed from\ngiven beads may have. In the second line print any example of such necklace.\nEach color of the beads should be represented by the corresponding lowercase\nEnglish letter (starting with a). As the necklace is cyclic, print it starting\nfrom any point. Examples Input 3 4 2 1 Output 1 abacaba Input 1 4 Output 4\naaaa Input 2 1 1 Output 0 ab Note In the first sample a necklace can have at\nmost one beautiful cut. The example of such a necklace is shown on the\npicture. In the second sample there is only one way to compose a necklace.\n\n",
        "cf_contest_id": 613,
        "cf_index": "C",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n4 2 1\r\n",
                "1\r\naabcbaa"
            ],
            [
                "1\r\n4\r\n",
                "4\r\naaaa"
            ],
            [
                "2\r\n1 1\r\n",
                "0\r\nab"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2\r\n",
                "2\r\naa"
            ],
            [
                "1\r\n3\r\n",
                "3\r\naaa"
            ],
            [
                "1\r\n5\r\n",
                "5\r\naaaaa"
            ],
            [
                "2\r\n2 2\r\n",
                "2\r\nabba"
            ],
            [
                "3\r\n1 2 4\r\n",
                "1\r\nbccaccb"
            ],
            [
                "3\r\n3 3 3\r\n",
                "0\r\nabccbaabc"
            ],
            [
                "3\r\n3 3 6\r\n",
                "0\r\ncabccbaccabc"
            ],
            [
                "3\r\n6 6 6\r\n",
                "6\r\nabccbaabccbaabccba"
            ],
            [
                "3\r\n6 6 9\r\n",
                "3\r\nabcccbaabcccbaabcccba"
            ],
            [
                "26\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "0\r\nabcdefghijklmnopqrstuvwxyz"
            ],
            [
                "3\r\n7 7 21\r\n",
                "0\r\ncabccccbaccabccccbaccabccccbaccabcc"
            ],
            [
                "2\r\n95 50\r\n",
                "5\r\naaaaaaaaabbbbbabbbbbaaaaaaaaaaaaaaaaaabbbbbabbbbbaaaaaaaaaaaaaaaaaabbbbbabbbbbaaaaaaaaaaaaaaaaaabbbbbabbbbbaaaaaaaaaaaaaaaaaabbbbbabbbbbaaaaaaaaa"
            ],
            [
                "3\r\n30 30 15\r\n",
                "15\r\nabcbaabcbaabcbaabcbaabcbaabcbaabcbaabcbaabcbaabcbaabcbaabcbaabcbaabcbaabcba"
            ],
            [
                "3\r\n1 50 70\r\n",
                "1\r\nbbbbbbbbbbbbbbbbbbbbbbbbbcccccccccccccccccccccccccccccccccccacccccccccccccccccccccccccccccccccccbbbbbbbbbbbbbbbbbbbbbbbbb"
            ],
            [
                "2\r\n70 10\r\n",
                "10\r\naaaabaaaaaabaaaaaaaabaaaaaabaaaaaaaabaaaaaabaaaaaaaabaaaaaabaaaaaaaabaaaaaabaaaa"
            ]
        ]
    }
]