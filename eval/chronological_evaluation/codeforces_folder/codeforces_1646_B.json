[
    {
        "name": "Quality vs Quantity",
        "description": "\n    #1\n    \n    \n    #1\n    \n    #1\n    \n    \n    #1\n\n\n    Red\n    \n    \n    Blue\n You are given\na sequence of \n    n\n non-negative integers \n    a_1, a_2, \n    \u2026, a_n\n.\nInitially, all the elements of the sequence are unpainted. You can paint each\nnumber \n    \n or \n    \n (but not both), or leave it unpainted.\nFor a color \n    c\n, \n    Count(c)\n is the number of elements in the\nsequence painted with that color and \n    Sum(c)\n is the sum of the\nelements in the sequence painted with that color. For example, if the given\nsequence is \n    [2, 8, 6, 3, 1]\n and it is painted this way:\n\n    [\n    2, 8, \n    6, \n    3, 1]\n (where \n    6\n is\npainted red, \n    2\n and \n    3\n are painted blue, \n    1\n and \n    8\n are\nunpainted) then \n    Sum(\n    )=6\n,\n\n    Sum(\n    )=2+3=5\n, \n    Count(\n    )=1\n, and\n\n    Count(\n    )=2\n. Determine if it is possible to paint the\nsequence so that \n    Sum(\n    ) > \n    Sum(\n    )\n and\n\n    Count(\n    ) < \n    Count(\n    )\n. Input Each test\ncontains multiple test cases. The first line contains the number of test cases\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n). Description of the test cases follows.\nThe first line of each test case contains an integer \n    n\n (\n    3\n    \u2264 n\n    \u2264\n    2\n    \u00b7 10^5\n) \u2014 the length of the given sequence. The second line of each\ntest case contains \n    n\n integers \n    a_1,a_2,\n    \u2026,a_n\n (\n    0\n    \u2264\n    a_i\n    \u2264 10^9\n) \u2014 the given sequence. It is guaranteed that the sum of\n\n    n\n over all test cases does not exceed \n    2\n    \u00b7 10^5\n. Output For\neach test case, print YES if it is possible to paint the given sequence\nsatisfying the above requirements, and NO otherwise. You can output YES and NO\nin any case (for example, strings yEs, yes, Yes and YES will be recognized as\na positive response). Example Input 4 3 1 2 3 5 2 8 6 3 1 4 3 5 4 2 5\n1000000000 1000000000 1000000000 1000000000 1000000000 Output NO YES NO NO\nNote In the first test case, there is no possible way to paint the sequence.\nFor example, if you paint the sequence this way:\n\n    [\n    1,\n    2,\n    3]\n (where \n    3\n is painted red,\n\n    1\n and \n    2\n are painted blue) then \n    Count(\n    )=1 <\n    \n    Count(\n    )=2\n, but \n    Sum(\n    )=3 \n    \u226f\n    Sum(\n    )=3\n. So, this is not a possible way to paint the\nsequence. In the second test case, a possible way to paint the sequence is\ndescribed in the statement. We can see that \n    Sum(\n    )=6 >\n    \n    Sum(\n    )=5\n and \n    Count(\n    )=1 <\n    \n    Count(\n    )=2\n. In the third test case, there is no possible way\nto paint the sequence. For example, if you paint the sequence this way:\n\n    [\n    3,\n    5,\n    4, \n    2]\n (where \n    3\n and\n\n    5\n are painted red, \n    4\n and \n    2\n are painted blue) then\n\n    Sum(\n    ) = 8 > \n    Sum(\n    ) = 6\n but\n\n    Count(\n    ) = 2 \n    \u226e\n    Count(\n    ) = 2\n. So,\nthis is not a possible way to paint the sequence. In the fourth test case, it\ncan be proven that there is no possible way to paint the sequence satisfying\nsum and count constraints.\n\n",
        "cf_contest_id": 1646,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "greedy",
            "sortings",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3\r\n1 2 3\r\n5\r\n2 8 6 3 1\r\n4\r\n3 5 4 2\r\n5\r\n1000000000 1000000000 1000000000 1000000000 1000000000\r\n",
                "NO \r\nYES\r\nNO \r\nNO \r\n"
            ]
        ],
        "private_cases": []
    }
]