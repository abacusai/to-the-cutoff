[
    {
        "name": "Embassy Queue",
        "description": "In an embassy of a well-known kingdom an electronic queue is organised. Every\nperson who comes to the embassy, needs to make the following three actions:\nshow the ID, pay money to the cashier and be fingerprinted. Besides, the\nactions should be performed in the given order. For each action several\nseparate windows are singled out: k1 separate windows for the first action\n(the first type windows), k2 windows for the second one (the second type\nwindows), and k3 for the third one (the third type windows). The service time\nfor one person in any of the first type window equals to t1. Similarly, it\ntakes t2 time to serve a person in any of the second type windows. And it\ntakes t3 to serve one person in any of the third type windows. Thus, the\nservice time depends only on the window type and is independent from the\nperson who is applying for visa. At some moment n people come to the embassy,\nthe i-th person comes at the moment of time ci. The person is registered under\nsome number. After that he sits in the hall and waits for his number to be\nshown on a special board. Besides the person's number the board shows the\nnumber of the window where one should go and the person goes there\nimmediately. Let's consider that the time needed to approach the window is\nnegligible. The table can show information for no more than one person at a\ntime. The electronic queue works so as to immediately start working with the\nperson who has approached the window, as there are no other people in front of\nthe window. The Client Service Quality inspectors noticed that several people\nspend too much time in the embassy (this is particularly tiresome as the\nembassy has no mobile phone reception and 3G). It was decided to organise the\nsystem so that the largest time a person spends in the embassy were minimum.\nHelp the inspectors organise the queue. Consider that all actions except for\nbeing served in at the window, happen instantly. Input The first line contains\nthree space-separated integers k1, k2, k3 (1 \u2264 ki \u2264 10^9), they are the number\nof windows of the first, second and third type correspondingly. The second\nline contains three space-separated integers t1, t2, t3 (1 \u2264 ti \u2264 10^5), they\nare the periods of time needed to serve one person in the window of the first,\nsecond and third type correspondingly. The third line contains an integer n (1\n\u2264 n \u2264 10^5), it is the number of people. The fourth line contains n space-\nseparated integers ci (1 \u2264 ci \u2264 10^9) in the non-decreasing order; ci is the\ntime when the person number i comes to the embassy. Output Print the single\nnumber, the maximum time a person will spend in the embassy if the queue is\norganized optimally. Please, do not use the \n64-bit integers in C++. It is preferred to use the cin, cout streams (also you\nmay use the \n7 Input 2 1 1 5 1 1 5 1 2 3 3 5 Output 13 Note In the first test 5 people come\nsimultaneously at the moment of time equal to 1. There is one window of every\ntype, it takes 1 unit of time to be served at each window. That's why the\nmaximal time a person spends in the embassy is the time needed to be served at\nthe windows (3 units of time) plus the time the last person who comes to the\nfirst window waits (4 units of time). Windows in the second test work like\nthis: The first window of the first type: [1, 6) \u2014 the first person, [6, 11) \u2014\nthird person, [11, 16) \u2014 fifth person The second window of the first type: [2,\n7) \u2014 the second person, [7, 12) \u2014 the fourth person The only second type\nwindow: [6, 7) \u2014 first, [7, 8) \u2014 second, [11, 12) \u2014 third, [12, 13) \u2014 fourth,\n[16, 17) \u2014 fifth The only third type window: [7, 8) \u2014 first, [8, 9) \u2014 second,\n[12, 13) \u2014 third, [13, 14) \u2014 fourth, [17, 18) \u2014 fifth We can see that it takes\nmost time to serve the fifth person.\n\n",
        "cf_contest_id": 85,
        "cf_index": "B",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1 1 1\r\n1 1 1\r\n5\r\n1 1 1 1 1\r\n",
                "7\r\n"
            ],
            [
                "2 1 1\r\n5 1 1\r\n5\r\n1 2 3 3 5\r\n",
                "13\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1 1\r\n1 1 1\r\n5\r\n1 2 3 4 5\r\n",
                "3\r\n"
            ],
            [
                "1 1 1\r\n1 1 1\r\n5\r\n1 2 3 3 4\r\n",
                "4\r\n"
            ],
            [
                "9 5 6\r\n8 2 2\r\n1\r\n5\r\n",
                "12\r\n"
            ],
            [
                "2 7 3\r\n8 10 5\r\n5\r\n5 6 7 8 9\r\n",
                "35\r\n"
            ],
            [
                "3 9 10\r\n3 10 4\r\n5\r\n2 2 2 2 2\r\n",
                "20\r\n"
            ],
            [
                "8 2 3\r\n7 7 10\r\n100\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "370\r\n"
            ],
            [
                "2 2 7\r\n3 1 3\r\n5\r\n1 10001 20001 30001 40001\r\n",
                "7\r\n"
            ],
            [
                "3 4 5\r\n9053 90120 36494\r\n5\r\n60569225 70426298 122734833 143091149 631569476\r\n",
                "135667\r\n"
            ],
            [
                "2 2 2\r\n80223 94781 69753\r\n5\r\n221143148 236273686 612319555 780338715 825112104\r\n",
                "244757\r\n"
            ],
            [
                "8 9 10\r\n9053 90120 36494\r\n5\r\n60569225 70426298 122734833 143091149 631569476\r\n",
                "135667\r\n"
            ],
            [
                "1 1 1\r\n1 1 1\r\n10\r\n1 1 1 1 100000 100000 100000 100000 100000 100000\r\n",
                "8\r\n"
            ],
            [
                "1000000000 1000000000 1000000000\r\n1 1 1\r\n1\r\n1\r\n",
                "3\r\n"
            ],
            [
                "1000000000 1000000000 1000000000\r\n100000 100000 100000\r\n5\r\n1 1 1 1 1\r\n",
                "300000\r\n"
            ]
        ]
    }
]