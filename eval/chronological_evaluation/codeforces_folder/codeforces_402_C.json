[
    {
        "name": "Searching for Graph",
        "description": "Let's call an undirected graph of n vertices p-interesting, if the following\nconditions fulfill: the graph contains exactly 2n + p edges; the graph doesn't\ncontain self-loops and multiple edges; for any integer k (1 \u2264 k \u2264 n), any\nsubgraph consisting of k vertices contains at most 2k + p edges. A subgraph of\na graph is some set of the graph vertices and some set of the graph edges. At\nthat, the set of edges must meet the condition: both ends of each edge from\nthe set must belong to the chosen set of vertices. Your task is to find a\np-interesting graph consisting of n vertices. Input The first line contains a\nsingle integer t (1 \u2264 t \u2264 5) \u2014 the number of tests in the input. Next t lines\neach contains two space-separated integers: n, p (5 \u2264 n \u2264 24; p \u2265 0; ) \u2014 the\nnumber of vertices in the graph and the interest value for the appropriate\ntest. It is guaranteed that the required graph exists. Output For each of the\nt tests print 2n + p lines containing the description of the edges of a\np-interesting graph: the i-th line must contain two space-separated integers\nai, bi (1 \u2264 ai, bi \u2264 n; ai \u2260 bi) \u2014 two vertices, connected by an edge in the\nresulting graph. Consider the graph vertices numbered with integers from 1 to\nn. Print the answers to the tests in the order the tests occur in the input.\nIf there are multiple solutions, you can print any of them. Examples Input 1 6\n0 Output 1 2 1 3 1 4 1 5 1 6 2 3 2 4 2 5 2 6 3 4 3 5 3 6\n\n",
        "cf_contest_id": 402,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "graphs"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n6 0\r\n",
                "1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 1\r\n1 3\r\n2 4\r\n3 5\r\n4 6\r\n5 1\r\n6 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n5 0\r\n",
                "1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 1\r\n1 3\r\n2 4\r\n3 5\r\n4 1\r\n5 2\r\n"
            ],
            [
                "5\r\n6 0\r\n5 0\r\n7 0\r\n8 0\r\n9 0\r\n",
                "1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 1\r\n1 3\r\n2 4\r\n3 5\r\n4 6\r\n5 1\r\n6 2\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 1\r\n1 3\r\n2 4\r\n3 5\r\n4 1\r\n5 2\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 1\r\n1 3\r\n2 4\r\n3 5\r\n4 6\r\n5 7\r\n6 1\r\n7 2\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 1\r\n1 3\r\n2 4\r\n3 5\r\n4 6\r\n5 7\r\n6 8\r\n7 1\r\n8 2\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 1\r\n1 3\r\n2 4\r\n3 5\r\n4 6\r\n5 7\r\n6 8\r\n7 9\r\n8 1\r\n9 2\r\n"
            ],
            [
                "5\r\n6 1\r\n5 0\r\n7 1\r\n8 1\r\n9 1\r\n",
                "1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 1\r\n1 3\r\n2 4\r\n3 5\r\n4 6\r\n5 1\r\n6 2\r\n1 4\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 1\r\n1 3\r\n2 4\r\n3 5\r\n4 1\r\n5 2\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 1\r\n1 3\r\n2 4\r\n3 5\r\n4 6\r\n5 7\r\n6 1\r\n7 2\r\n1 4\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 1\r\n1 3\r\n2 4\r\n3 5\r\n4 6\r\n5 7\r\n6 8\r\n7 1\r\n8 2\r\n1 4\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 1\r\n1 3\r\n2 4\r\n3 5\r\n4 6\r\n5 7\r\n6 8\r\n7 9\r\n8 1\r\n9 2\r\n1 4\r\n"
            ]
        ]
    }
]