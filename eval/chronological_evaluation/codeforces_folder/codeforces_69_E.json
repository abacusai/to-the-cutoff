[
    {
        "name": "Subsegments",
        "description": "Programmer Sasha has recently begun to study data structures. His coach Stas\ntold him to solve the problem of finding a minimum on the segment of the array\nin , which Sasha coped with. For Sasha not to think that he had learned all,\nStas gave him a new task. For each segment of the fixed length Sasha must find\nthe maximum element of those that occur on the given segment exactly once.\nHelp Sasha solve this problem. Input The first line contains two positive\nintegers n and k (1 \u2264 n \u2264 10^5, 1 \u2264 k \u2264 n) \u2014 the number of array elements and\nthe length of the segment. Then follow n lines: the i-th one contains a single\nnumber ai ( - 10^9 \u2264 ai \u2264 10^9). Output Print n\u2013k + 1 numbers, one per line:\non the i-th line print of the maximum number of those numbers from the\nsubarray ai ai + 1 \u2026 ai + k - 1 that occur in this subarray exactly 1 time. If\nthere are no such numbers in this subarray, print \"Nothing\". Examples Input 5\n3 1 2 2 3 3 Output 1 3 2 Input 6 4 3 3 3 4 4 2 Output 4 Nothing 3\n\n",
        "cf_contest_id": 69,
        "cf_index": "E",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 3\r\n1\r\n2\r\n2\r\n3\r\n3\r\n",
                "1\r\n3\r\n2\r\n"
            ],
            [
                "6 4\r\n3\r\n3\r\n3\r\n4\r\n4\r\n2\r\n",
                "4\r\nNothing\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 3\r\n-55\r\n-35\r\n-80\r\n91\r\n-96\r\n-93\r\n-39\r\n-77\r\n4\r\n29\r\n",
                "-35\r\n91\r\n91\r\n91\r\n-39\r\n-39\r\n4\r\n29\r\n"
            ],
            [
                "10 3\r\n-13\r\n26\r\n-97\r\n-38\r\n43\r\n-12\r\n80\r\n3\r\n8\r\n45\r\n",
                "26\r\n26\r\n43\r\n43\r\n80\r\n80\r\n80\r\n45\r\n"
            ],
            [
                "10 3\r\n-84\r\n25\r\n-25\r\n8\r\n60\r\n-74\r\n-98\r\n48\r\n-55\r\n38\r\n",
                "25\r\n25\r\n60\r\n60\r\n60\r\n48\r\n48\r\n48\r\n"
            ],
            [
                "10 3\r\n-62\r\n-81\r\n46\r\n22\r\n-84\r\n19\r\n-86\r\n44\r\n-84\r\n-73\r\n",
                "46\r\n46\r\n46\r\n22\r\n19\r\n44\r\n44\r\n44\r\n"
            ],
            [
                "10 3\r\n-6\r\n2\r\n79\r\n-49\r\n86\r\n13\r\n-31\r\n-71\r\n57\r\n93\r\n",
                "79\r\n79\r\n86\r\n86\r\n86\r\n13\r\n57\r\n93\r\n"
            ],
            [
                "10 3\r\n-38\r\n68\r\n-77\r\n57\r\n-35\r\n28\r\n-61\r\n-9\r\n3\r\n60\r\n",
                "68\r\n68\r\n57\r\n57\r\n28\r\n28\r\n3\r\n60\r\n"
            ],
            [
                "10 3\r\n2\r\n-100\r\n50\r\n-85\r\n-48\r\n68\r\n-96\r\n-31\r\n85\r\n-29\r\n",
                "50\r\n50\r\n50\r\n68\r\n68\r\n68\r\n85\r\n85\r\n"
            ],
            [
                "10 3\r\n-20\r\n-63\r\n-64\r\n45\r\n-84\r\n-13\r\n79\r\n-31\r\n70\r\n-100\r\n",
                "-20\r\n45\r\n45\r\n45\r\n79\r\n79\r\n79\r\n70\r\n"
            ]
        ]
    }
]