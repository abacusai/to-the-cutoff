[
    {
        "name": "Erase Subsequences",
        "description": "You are given a string \n    s\n. You can build new string \n    p\n from \n    s\n\nusing the following operation no more than two times: choose any subsequence\n\n    s_i_1, s_i_2, \n    \u2026, s_i_k\n where \n    1 \n    \u2264 i_1 < i_2 < \n    \u2026\n    < i_k \n    \u2264 |s|\n; erase the chosen subsequence from \n    s\n (\n    s\n can\nbecome empty); concatenate chosen subsequence to the right of the string\n\n    p\n (in other words, \n    p = p + s_i_1s_i_2\n    \u2026 s_i_k\n). Of\ncourse, initially the string \n    p\n is empty. For example, let \n    s =\n    \n    ababcd\n. At first, let's choose subsequence \n    s_1 s_4 s_5 =\n    \n    abc\n \u2014 we will get \n    s = \n    bad\n and \n    p =\n    \n    abc\n. At second, let's choose \n    s_1 s_2 = \n    ba\n \u2014 we will\nget \n    s = \n    d\n and \n    p = \n    abcba\n. So we can build\n\n    abcba\n from \n    ababcd\n. Can you build a given string\n\n    t\n using the algorithm above? Input The first line contains the single\ninteger \n    T\n (\n    1 \n    \u2264 T \n    \u2264 100\n) \u2014 the number of test cases. Next\n\n    2T\n lines contain test cases \u2014 two per test case. The first line contains\nstring \n    s\n consisting of lowercase Latin letters (\n    1 \n    \u2264 |s| \n    \u2264\n    400\n) \u2014 the initial string. The second line contains string \n    t\n\nconsisting of lowercase Latin letters (\n    1 \n    \u2264 |t| \n    \u2264 |s|\n) \u2014 the\nstring you'd like to build. It's guaranteed that the total length of strings\n\n    s\n doesn't exceed \n    400\n. Output Print \n    T\n answers \u2014 one per test\ncase. Print YES (case insensitive) if it's possible to build \n    t\n and NO\n(case insensitive) otherwise. Example Input 4 ababcd abcba a b defi fed xyz x\nOutput YES NO NO YES\n\n",
        "cf_contest_id": 1303,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\nababcd\r\nabcba\r\na\r\nb\r\ndefi\r\nfed\r\nxyz\r\nx\r\n",
                "YES\r\nNO\r\nNO\r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\nababc\r\nabcba\r\nfeded\r\ndefed\r\nababcfeded\r\nabcdebafed\r\n",
                "YES\r\nYES\r\nYES\r\n"
            ],
            [
                "1\r\nbbbaaaaabbabaabbbbaabbbbabbaabbaababbbbbbababbababbbaaaaaaabaababbbaababbbbababbbabbbbbabaabbaaaabaa\r\nbbbababbaabbbbbaabaaabaababaaaabaabbbabbababaaabba\r\n",
                "YES\r\n"
            ]
        ]
    }
]