[
    {
        "name": "Fence",
        "description": "John Doe has a crooked fence, consisting of n rectangular planks, lined up\nfrom the left to the right: the plank that goes i-th (1 \u2264 i \u2264 n) (from left to\nright) has width 1 and height hi. We will assume that the plank that goes i-th\n(1 \u2264 i \u2264 n) (from left to right) has index i. A piece of the fence from l to r\n(1 \u2264 l \u2264 r \u2264 n) is a sequence of planks of wood with indices from l to r\ninclusive, that is, planks with indices l, l + 1, ..., r. The width of the\npiece of the fence from l to r is value r - l + 1. Two pieces of the fence\nfrom l1 to r1 and from l2 to r2 are called matching, if the following\nconditions hold: the pieces do not intersect, that is, there isn't a single\nplank, such that it occurs in both pieces of the fence; the pieces are of the\nsame width; for all i (0 \u2264 i \u2264 r1 - l1) the following condition holds: hl1 + i\n+ hl2 + i = hl1 + hl2. John chose a few pieces of the fence and now wants to\nknow how many distinct matching pieces are for each of them. Two pieces of the\nfence are distinct if there is a plank, which belongs to one of them and does\nnot belong to the other one. Input The first line contains integer n (1 \u2264 n \u2264\n10^5) \u2014 the number of wood planks in the fence. The second line contains n\nspace-separated integers h1, h2, ..., hn (1 \u2264 hi \u2264 10^9) \u2014 the heights of\nfence planks. The third line contains integer q (1 \u2264 q \u2264 10^5) \u2014 the number of\nqueries. Next q lines contain two space-separated integers li and ri (1 \u2264 li \u2264\nri \u2264 n) \u2014 the boundaries of the i-th piece of the fence. Output For each query\non a single line print a single integer \u2014 the number of pieces of the fence\nthat match the given one. Print the answers to the queries in the order, in\nwhich the queries are given in the input. Examples Input 10 1 2 2 1 100 99 99\n100 100 100 6 1 4 1 2 3 4 1 5 9 10 10 10 Output 1 2 2 0 2 9\n\n",
        "cf_contest_id": 232,
        "cf_index": "D",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "string suffix structures"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10\r\n1 2 2 1 100 99 99 100 100 100\r\n6\r\n1 4\r\n1 2\r\n3 4\r\n1 5\r\n9 10\r\n10 10\r\n",
                "1\r\n2\r\n2\r\n0\r\n2\r\n9\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n100000\r\n2\r\n1 1\r\n1 1\r\n",
                "0\r\n0\r\n"
            ]
        ]
    }
]