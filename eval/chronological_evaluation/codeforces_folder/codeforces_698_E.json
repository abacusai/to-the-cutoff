[
    {
        "name": "Cron",
        "description": "Sometime the classic solution are not powerful enough and we have to design\nour own. For the purpose of this problem you have to implement the part of the\nsystem of task scheduling. Each task should be executed at some particular\nmoments of time. In our system you may set the exact value for the second,\nminute, hour, day of the week, day and month, when the task should be\nexecuted. Moreover, one can set a special value -1 that means any value of\nthis parameter is valid. For example, if the parameter string is -1 59 23 -1\n-1 -1, the problem will be executed every day at 23:59:00, 23:59:01, 23:59:02,\n..., 23:59:59 (60 times in total). Seconds, minutes and hours are numbered\nstarting from zero, while day, months and days of the week are numbered\nstarting from one. The first day of the week is Monday. There is one special\ncase that is treated separately. If both day of the week and day are given\n(i.e. differ from -1) to execute the task only one of these two (at least one,\nif both match this is fine too) parameters should match the current time (of\ncourse, all other parameters should match too). For example, the string of\nparameters 0 0 12 6 3 7 means that the task will be executed both on Saturday,\nJuly 2nd, 2016 and on Sunday, July 3rd, 2016 at noon. One should not forget\nabout the existence of the leap years. The year is leap if it's number is\ndivisible by 400, or is not divisible by 100, but is divisible by 4. Each leap\nyear has 366 days instead of usual 365, by extending February to 29 days\nrather than the common 28. The current time is represented as the number of\nseconds passed after 00:00:00 January 1st, 1970 (Thursday). You are given the\nstring of six parameters, describing the moments of time the task should be\nexecuted. You are also given a number of moments of time. For each of them you\nhave to find the first moment of time strictly greater than the current when\nthe task will be executed. Input The first line of the input contains six\nintegers s, m, h, day, date and month (0 \u2264 s, m \u2264 59, 0 \u2264 h \u2264 23, 1 \u2264 day \u2264 7,\n1 \u2264 date \u2264 31, 1 \u2264 month \u2264 12). Each of the number can also be equal to - 1.\nIt's guaranteed, that there are infinitely many moments of time when this task\nshould be executed. Next line contains the only integer n (1 \u2264 n \u2264 1000) \u2014 the\nnumber of moments of time you have to solve the problem for. Each of the next\nn lines contains a single integer ti (0 \u2264 ti \u2264 10^12). Output Print n lines,\nthe i-th of them should contain the first moment of time strictly greater than\nti, when the task should be executed. Examples Input -1 59 23 -1 -1 -1 6\n1467372658 1467417540 1467417541 1467417598 1467417599 1467417600 Output\n1467417540 1467417541 1467417542 1467417599 1467503940 1467503940 Input 0 0 12\n6 3 7 3 1467372658 1467460810 1467547200 Output 1467460800 1467547200\n1468065600 Note The moment of time 1467372658 after the midnight of January\n1st, 1970 is 11:30:58 July 1st, 2016.\n\n",
        "cf_contest_id": 698,
        "cf_index": "E",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "-1 59 23 -1 -1 -1\r\n6\r\n1467372658\r\n1467417540\r\n1467417541\r\n1467417598\r\n1467417599\r\n1467417600\r\n",
                "1467417540\r\n1467417541\r\n1467417542\r\n1467417599\r\n1467503940\r\n1467503940\r\n"
            ],
            [
                "0 0 12 6 3 7\r\n3\r\n1467372658\r\n1467460810\r\n1467547200\r\n",
                "1467460800\r\n1467547200\r\n1468065600\r\n"
            ]
        ],
        "private_cases": [
            [
                "-1 -1 -1 -1 -1 -1\r\n2\r\n0\r\n1000000000000\r\n",
                "1\r\n1000000000001\r\n"
            ],
            [
                "-1 -1 -1 -1 29 2\r\n3\r\n0\r\n50000000000\r\n1000000000000\r\n",
                "68169600\r\n50054371200\r\n1000044921600\r\n"
            ],
            [
                "-1 59 23 -1 -1 -1\r\n1\r\n1467372648\r\n",
                "1467417540\r\n"
            ]
        ]
    }
]