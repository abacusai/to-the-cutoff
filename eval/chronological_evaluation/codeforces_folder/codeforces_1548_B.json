[
    {
        "name": "Integers Have Friends",
        "description": "British mathematician John Littlewood once said about Indian mathematician\nSrinivasa Ramanujan that \"every positive integer was one of his personal\nfriends.\" It turns out that positive integers can also be friends with each\nother! You are given an array \n    a\n of distinct positive integers. Define a\nsubarray \n    a_i, a_i+1, \n    \u2026, a_j\n to be a friend group if and only if\nthere exists an integer \n    m \n    \u2265 2\n such that \n    a_i \n     m = a_i+1\n     m = \n    \u2026 = a_j \n     m\n, where \n    x \n     y\n denotes the\nremainder when \n    x\n is divided by \n    y\n. Your friend Gregor wants to know\nthe size of the largest friend group in \n    a\n. Input Each test contains\nmultiple test cases. The first line contains the number of test cases \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 2\n    \u00b7 10^4\n). Each test case begins with a line\ncontaining the integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n), the\nsize of the array \n    a\n. The next line contains \n    n\n positive integers\n\n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u226410^18\n),\nrepresenting the contents of the array \n    a\n. It is guaranteed that all the\nnumbers in \n    a\n are distinct. It is guaranteed that the sum of \n    n\n over\nall test cases is less than \n    2\n    \u00b7 10^5\n. Output Your output should\nconsist of \n    t\n lines. Each line should consist of a single integer, the\nsize of the largest friend group in \n    a\n. Example Input 4 5 1 5 2 4 6 4 8 2\n5 10 2 1000 2000 8 465 55 3 54 234 12 45 78 Output 3 3 2 6 Note In the first\ntest case, the array is \n    [1,5,2,4,6]\n. The largest friend group is\n\n    [2,4,6]\n, since all those numbers are congruent to \n    0\n modulo\n\n    2\n, so \n    m=2\n. In the second test case, the array is \n    [8,2,5,10]\n.\nThe largest friend group is \n    [8,2,5]\n, since all those numbers are\ncongruent to \n    2\n modulo \n    3\n, so \n    m=3\n. In the third case, the\nlargest friend group is \n    [1000,2000]\n. There are clearly many possible\nvalues of \n    m\n that work.\n\n",
        "cf_contest_id": 1548,
        "cf_index": "B",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "divide and conquer",
            "math",
            "number theory",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n5\r\n1 5 2 4 6\r\n4\r\n8 2 5 10\r\n2\r\n1000 2000\r\n8\r\n465 55 3 54 234 12 45 78\r\n",
                "3\r\n3\r\n2\r\n6\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n20\r\n16 15 17 8 30 23 20 28 27 6 1 18 24 2 10 5 14 29 12 7\r\n",
                "4\r\n"
            ],
            [
                "3\r\n3\r\n14 4 27\r\n13\r\n26 14 6 10 5 3 29 2 24 12 22 11 1\r\n4\r\n10 25 29 11\r\n",
                "2\r\n4\r\n3\r\n"
            ],
            [
                "5\r\n1\r\n13\r\n1\r\n1\r\n6\r\n7 19 28 25 4 10\r\n3\r\n3 19 10\r\n9\r\n26 1 28 8 24 27 12 16 17\r\n",
                "1\r\n1\r\n6\r\n2\r\n3\r\n"
            ],
            [
                "1\r\n20\r\n1 3 5 7 9 11 13 15 17 19 22 25 28 31 34 37 40 43 46 49\r\n",
                "11\r\n"
            ],
            [
                "1\r\n3\r\n1 137438953474 274877906947\r\n",
                "3\r\n"
            ],
            [
                "1\r\n4\r\n1 140688977775057788 281377955550115575 281377955925200962\r\n",
                "4\r\n"
            ],
            [
                "1\r\n69\r\n2 4 10 16 22 28 34 40 46 52 58 64 70 76 82 88 94 100 106 112 118 124 130 136 142 148 154 160 166 172 178 184 190 196 202 208 214 220 226 232 238 244 250 256 262 268 274 280 286 292 298 304 310 316 322 328 334 340 346 352 358 364 370 376 382 388 391 397 403\r\n",
                "68\r\n"
            ]
        ]
    }
]