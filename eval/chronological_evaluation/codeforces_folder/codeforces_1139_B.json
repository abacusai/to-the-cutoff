[
    {
        "name": "Chocolates",
        "description": "You went to the store, selling \n    n\n types of chocolates. There are\n\n    a_i\n chocolates of type \n    i\n in stock. You have unlimited amount of\ncash (so you are not restricted by any prices) and want to buy as many\nchocolates as possible. However if you buy \n    x_i\n chocolates of type\n\n    i\n (clearly, \n    0 \n    \u2264 x_i \n    \u2264 a_i\n), then for all \n    1 \n    \u2264 j <\n    i\n at least one of the following must hold: \n    x_j = 0\n (you bought zero\nchocolates of type \n    j\n) \n    x_j < x_i\n (you bought less chocolates of\ntype \n    j\n than of type \n    i\n) For example, the array \n    x = [0, 0, 1, 2,\n    10]\n satisfies the requirement above (assuming that all \n    a_i \n    \u2265\n    x_i\n), while arrays \n    x = [0, 1, 0]\n, \n    x = [5, 5]\n and \n    x = [3,\n    2]\n don't. Calculate the maximum number of chocolates you can buy. Input The\nfirst line contains an integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n),\ndenoting the number of types of chocolate. The next line contains \n    n\n\nintegers \n    a_i\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n), denoting the number of\nchocolates of each type. Output Print the maximum number of chocolates you can\nbuy. Examples Input 5 1 2 1 3 6 Output 10 Input 5 3 2 5 4 10 Output 20 Input 4\n1 1 1 1 Output 1 Note In the first example, it is optimal to buy: \n    0 + 0 + 1\n    + 3 + 6\n chocolates. In the second example, it is optimal to buy: \n    1 + 2 +\n    3 + 4 + 10\n chocolates. In the third example, it is optimal to buy: \n    0 + 0\n    + 0 + 1\n chocolates.\n\n",
        "cf_contest_id": 1139,
        "cf_index": "B",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 2 1 3 6\r\n",
                "10\r\n"
            ],
            [
                "5\r\n3 2 5 4 10\r\n",
                "20\r\n"
            ],
            [
                "4\r\n1 1 1 1\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1000000000\r\n",
                "1000000000\r\n"
            ],
            [
                "2\r\n921 921\r\n",
                "1841\r\n"
            ],
            [
                "2\r\n1000000000 1\r\n",
                "1\r\n"
            ],
            [
                "11\r\n3 10 20 13 18 12 6 5 19 10 8\r\n",
                "36\r\n"
            ],
            [
                "19\r\n3 1 16 11 12 10 3 13 12 9 1 9 8 4 19 16 19 3 3\r\n",
                "6\r\n"
            ],
            [
                "4\r\n11 6 1 16\r\n",
                "17\r\n"
            ],
            [
                "19\r\n10 10 8 11 6 1 6 13 8 20 8 14 9 18 18 7 5 20 6\r\n",
                "21\r\n"
            ],
            [
                "12\r\n6 20 12 12 1 8 15 19 5 19 5 16\r\n",
                "31\r\n"
            ],
            [
                "2\r\n6 16\r\n",
                "22\r\n"
            ],
            [
                "8\r\n10 4 7 6 14 4 2 2\r\n",
                "3\r\n"
            ]
        ]
    }
]