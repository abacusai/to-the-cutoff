[
    {
        "name": "Present to Mom",
        "description": "How many stars are there in the sky? A young programmer Polycarpus can't get\nthis question out of his head! He took a photo of the starry sky using his\ndigital camera and now he analyzes the resulting monochrome digital picture.\nThe picture is represented by a rectangular matrix consisting of n lines each\ncontaining m characters. A character equals '1', if the corresponding photo\npixel is white and '0', if it is black. Polycarpus thinks that he has found a\nstar on the photo if he finds a white pixel surrounded by four side-\nneighboring pixels that are also white: 1 111 1 a star on the photo Polycarpus\nwhats to cut out a rectangular area from the photo and give his mom as a\npresent. This area should contain no less than k stars. The stars can\nintersect, have shared white pixels on the photo. The boy will cut out the\nrectangular area so that its borders will be parallel to the sides of the\nphoto and the cuts will go straight between the pixel borders. Now Polycarpus\nkeeps wondering how many ways there are to cut an area out of the photo so\nthat it met the conditions given above. Help Polycarpus find this number.\nInput The first line of the input data contains three integers n, m and k (1 \u2264\nn, m \u2264 500;1 \u2264 k \u2264 nm). Then follow n lines, containing the description of the\ngiven photo as a sequence of lines. Each line contains m characters '0' or\n'1'. Output Print the required number of areas on the given photo. Examples\nInput 4 6 2 111000 111100 011011 000111 Output 6 Input 5 5 4 11111 11111 11111\n11111 11111 Output 9 Note We'll number the rows and columns below starting\nfrom 1, the coordinates (p, q) will denote a cell in row p, column q. In the\nfirst sample Polycarpus should cut out any area containing a rectangle whose\nopposite corners lie in cells (1, 1) and (3, 4). Only rectangles with opposite\ncorners in (1, 1) and (x, y), where x \u2265 3 and y \u2265 4 fit the conditions. In the\nsecond sample any rectangle whose each side is no less than four, will do. The\npossible rectangle sizes are 4 \u00d7 4, 4 \u00d7 5, 5 \u00d7 4 and 5 \u00d7 5. Such figures can\nbe cut in 4 ways, 2 ways, 2 ways and 1 way correspondingly. Please do not use\nthe \nto use cin, cout streams or the \n\n",
        "cf_contest_id": 131,
        "cf_index": "F",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "two pointers"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 6 2\r\n111000\r\n111100\r\n011011\r\n000111\r\n",
                "6\r\n"
            ],
            [
                "5 5 4\r\n11111\r\n11111\r\n11111\r\n11111\r\n11111\r\n",
                "9\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1 1\r\n0\r\n",
                "0\r\n"
            ],
            [
                "3 1 1\r\n1\r\n1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "5 5 3\r\n11111\r\n11111\r\n11011\r\n11111\r\n11111\r\n",
                "1\r\n"
            ],
            [
                "6 6 10\r\n101010\r\n111111\r\n111111\r\n111111\r\n111111\r\n010101\r\n",
                "3\r\n"
            ],
            [
                "9 6 1\r\n110100\r\n101001\r\n101011\r\n111111\r\n011101\r\n001111\r\n101110\r\n111111\r\n011001\r\n",
                "178\r\n"
            ],
            [
                "2 3 1\r\n111\r\n111\r\n",
                "0\r\n"
            ],
            [
                "3 2 6\r\n11\r\n11\r\n11\r\n",
                "0\r\n"
            ],
            [
                "3 3 9\r\n001\r\n111\r\n001\r\n",
                "0\r\n"
            ],
            [
                "3 100 4\r\n1001010111011111110111011101111001101111110111110110111111010011111011111111101001111011011110111111\r\n1111111111110111111111011111111110111101110101101110101111111101111011001111111101111111111011011101\r\n1111111111011111111011011110011111111111111110010111111110001001111111111111101111111111101111001111\r\n",
                "3803\r\n"
            ],
            [
                "100 3 1\r\n110\r\n111\r\n111\r\n111\r\n101\r\n111\r\n111\r\n110\r\n111\r\n011\r\n111\r\n011\r\n110\r\n111\r\n111\r\n111\r\n111\r\n111\r\n100\r\n111\r\n111\r\n111\r\n110\r\n011\r\n111\r\n011\r\n011\r\n111\r\n001\r\n111\r\n000\r\n111\r\n111\r\n111\r\n111\r\n111\r\n111\r\n011\r\n111\r\n111\r\n111\r\n111\r\n111\r\n110\r\n111\r\n010\r\n011\r\n111\r\n011\r\n111\r\n111\r\n111\r\n111\r\n111\r\n111\r\n110\r\n111\r\n111\r\n111\r\n111\r\n111\r\n111\r\n111\r\n011\r\n011\r\n111\r\n111\r\n111\r\n011\r\n011\r\n111\r\n111\r\n111\r\n111\r\n111\r\n111\r\n111\r\n111\r\n101\r\n111\r\n011\r\n110\r\n111\r\n111\r\n011\r\n111\r\n111\r\n111\r\n110\r\n110\r\n011\r\n111\r\n010\r\n111\r\n111\r\n111\r\n111\r\n111\r\n111\r\n111\r\n",
                "4767\r\n"
            ],
            [
                "100 3 2\r\n111\r\n111\r\n111\r\n111\r\n111\r\n111\r\n111\r\n111\r\n100\r\n011\r\n110\r\n111\r\n111\r\n110\r\n011\r\n111\r\n101\r\n111\r\n111\r\n111\r\n111\r\n111\r\n110\r\n111\r\n111\r\n101\r\n111\r\n111\r\n101\r\n111\r\n111\r\n011\r\n111\r\n111\r\n111\r\n111\r\n111\r\n111\r\n111\r\n111\r\n111\r\n101\r\n111\r\n110\r\n111\r\n110\r\n011\r\n111\r\n111\r\n111\r\n111\r\n111\r\n111\r\n111\r\n110\r\n101\r\n111\r\n111\r\n111\r\n111\r\n111\r\n011\r\n101\r\n111\r\n111\r\n111\r\n011\r\n110\r\n111\r\n111\r\n011\r\n111\r\n111\r\n111\r\n111\r\n111\r\n111\r\n100\r\n111\r\n111\r\n101\r\n111\r\n111\r\n111\r\n111\r\n111\r\n111\r\n101\r\n101\r\n111\r\n111\r\n110\r\n111\r\n101\r\n111\r\n011\r\n111\r\n111\r\n111\r\n111\r\n",
                "4543\r\n"
            ]
        ]
    }
]