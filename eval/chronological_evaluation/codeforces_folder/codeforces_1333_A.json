[
    {
        "name": "Little Artem",
        "description": "Young boy Artem tries to paint a picture, and he asks his mother Medina to\nhelp him. Medina is very busy, that's why she asked for your help. Artem wants\nto paint an \n    n \n    \u00d7 m\n board. Each cell of the board should be colored\nin white or black. Lets \n    B\n be the number of black cells that have at\nleast one white neighbor adjacent by the side. Let \n    W\n be the number of\nwhite cells that have at least one black neighbor adjacent by the side. A\ncoloring is called good if \n    B = W + 1\n. The first coloring shown below has\n\n    B=5\n and \n    W=4\n (all cells have at least one neighbor with the\nopposite color). However, the second coloring is not good as it has \n    B=4\n,\n\n    W=4\n (only the bottom right cell doesn't have a neighbor with the\nopposite color). Please, help Medina to find any good coloring. It's\nguaranteed that under given constraints the solution always exists. If there\nare several solutions, output any of them. Input Each test contains multiple\ntest cases. The first line contains the number of test cases \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 20\n). Each of the next \n    t\n lines contains two integers\n\n    n, m\n (\n    2 \n    \u2264 n,m \n    \u2264 100\n) \u2014 the number of rows and the number\nof columns in the grid. Output For each test case print \n    n\n lines, each of\nlength \n    m\n, where \n    i\n-th line is the \n    i\n-th row of your colored\nmatrix (cell labeled with 'B' means that the cell is black, and 'W' means\nwhite). Do not use quotes. It's guaranteed that under given constraints the\nsolution always exists. Example Input 2 3 2 3 3 Output BW WB BB BWB BWW BWB\nNote In the first testcase, \n    B=3\n, \n    W=2\n. In the second testcase,\n\n    B=5\n, \n    W=4\n. You can see the coloring in the statement.\n\n",
        "cf_contest_id": 1333,
        "cf_index": "A",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n3 2\r\n3 3\r\n",
                "WB\r\nBB\r\nBB\r\nWBB\r\nBBB\r\nBBB\r\n"
            ]
        ],
        "private_cases": [
            [
                "16\r\n2 2\r\n2 3\r\n4 2\r\n2 5\r\n2 3\r\n3 3\r\n3 4\r\n3 5\r\n4 2\r\n3 4\r\n4 4\r\n4 5\r\n2 5\r\n3 5\r\n5 4\r\n5 5\r\n",
                "WB\r\nBB\r\nWBB\r\nBBB\r\nWB\r\nBB\r\nBB\r\nBB\r\nWBBBB\r\nBBBBB\r\nWBB\r\nBBB\r\nWBB\r\nBBB\r\nBBB\r\nWBBB\r\nBBBB\r\nBBBB\r\nWBBBB\r\nBBBBB\r\nBBBBB\r\nWB\r\nBB\r\nBB\r\nBB\r\nWBBB\r\nBBBB\r\nBBBB\r\nWBBB\r\nBBBB\r\nBBBB\r\nBBBB\r\nWBBBB\r\nBBBBB\r\nBBBBB\r\nBBBBB\r\nWBBBB\r\nBBBBB\r\nWBBBB\r\nBBBBB\r\nBBBBB\r\nWBBB\r\nBBBB\r\nBBBB\r\nBBBB\r\nBBBB\r\nWBBBB\r\nBBBBB\r\nBBBBB\r\nBBBBB\r\nBBBBB\r\n"
            ]
        ]
    }
]