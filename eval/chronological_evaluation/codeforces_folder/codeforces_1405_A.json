[
    {
        "name": "Permutation Forgery",
        "description": "A permutation of length \n    n\n is an array consisting of \n    n\n distinct\nintegers from \n    1\n to \n    n\n in arbitrary order. For example,\n\n    [2,3,1,5,4]\n is a permutation, but \n    [1,2,2]\n is not a permutation\n(\n    2\n appears twice in the array) and \n    [1,3,4]\n is also not a\npermutation (\n    n=3\n but there is \n    4\n in the array). Let \n    p\n be any\npermutation of length \n    n\n. We define the fingerprint \n    F(p)\n of \n    p\n\nas the sorted array of sums of adjacent elements in \n    p\n. More formally,\n\n    \n\n    F(p)=\n    sort([p_1+p_2,p_2+p_3,\n    \u2026,p_n-1+p_n]).\n\n    \n For\nexample, if \n    n=4\n and \n    p=[1,4,2,3],\n then the fingerprint is given by\n\n    F(p)=\n    sort([1+4,4+2,2+3])=\n    sort([5,6,5])=[5,5,6]\n.\nYou are given a permutation \n    p\n of length \n    n\n. Your task is to find a\ndifferent permutation \n    p'\n with the same fingerprint. Two permutations\n\n    p\n and \n    p'\n are considered different if there is some index \n    i\n\nsuch that \n    p_i \n     p'_i\n. Input Each test contains multiple test cases.\nThe first line contains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    668\n). Description of the test cases follows. The first line of each test\ncase contains a single integer \n    n\n (\n    2\n    \u2264 n\n    \u2264 100\n) \u2014 the length\nof the permutation. The second line of each test case contains \n    n\n\nintegers \n    p_1,\n    \u2026,p_n\n (\n    1\n    \u2264 p_i\n    \u2264 n\n). It is guaranteed\nthat \n    p\n is a permutation. Output For each test case, output \n    n\n\nintegers \n    p'_1,\n    \u2026, p'_n\n \u2014 a permutation such that \n    p'\n     p\n\nand \n    F(p')=F(p)\n. We can prove that for every permutation satisfying the\ninput constraints, a solution exists. If there are multiple solutions, you may\noutput any. Example Input 3 2 1 2 6 2 1 6 5 4 3 5 2 4 3 1 5 Output 2 1 1 2 5 6\n3 4 3 1 5 2 4 Note In the first test case,\n\n    F(p)=\n    sort([1+2])=[3]\n. And\n\n    F(p')=\n    sort([2+1])=[3]\n. In the second test case,\n\n    F(p)=\n    sort([2+1,1+6,6+5,5+4,4+3])=\n    sort([3,7,11,9,7])=[3,7,7,9,11]\n.\nAnd\n\n    F(p')=\n    sort([1+2,2+5,5+6,6+3,3+4])=\n    sort([3,7,11,9,7])=[3,7,7,9,11]\n.\nIn the third test case,\n\n    F(p)=\n    sort([2+4,4+3,3+1,1+5])=\n    sort([6,7,4,6])=[4,6,6,7]\n.\nAnd\n\n    F(p')=\n    sort([3+1,1+5,5+2,2+4])=\n    sort([4,6,7,6])=[4,6,6,7]\n.\n\n",
        "cf_contest_id": 1405,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2\r\n1 2\r\n6\r\n2 1 6 5 4 3\r\n5\r\n2 4 3 1 5\r\n",
                "2\r\n1\r\n3\r\n4\r\n5\r\n6\r\n1\r\n2\r\n5\r\n1\r\n3\r\n4\r\n2\r\n"
            ]
        ],
        "private_cases": []
    }
]