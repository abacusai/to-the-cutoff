[
    {
        "name": "Ice Sculptures",
        "description": "The Berland University is preparing to celebrate the 256-th anniversary of its\nfounding! A specially appointed Vice Rector for the celebration prepares to\ndecorate the campus. In the center of the campus n ice sculptures were\nerected. The sculptures are arranged in a circle at equal distances from each\nother, so they form a regular n-gon. They are numbered in clockwise order with\nnumbers from 1 to n. The site of the University has already conducted a voting\nthat estimated each sculpture's characteristic of ti \u2014 the degree of the\nsculpture's attractiveness. The values of ti can be positive, negative or\nzero. When the university rector came to evaluate the work, he said that this\nmight be not the perfect arrangement. He suggested to melt some of the\nsculptures so that: the remaining sculptures form a regular polygon (the\nnumber of vertices should be between 3 and n), the sum of the ti values of the\nremaining sculptures is maximized. Help the Vice Rector to analyze the\ncriticism \u2014 find the maximum value of ti sum which can be obtained in this\nway. It is allowed not to melt any sculptures at all. The sculptures can not\nbe moved. Input The first input line contains an integer n (3 \u2264 n \u2264 20000) \u2014\nthe initial number of sculptures. The second line contains a sequence of\nintegers t1, t2, ..., tn, ti \u2014 the degree of the i-th sculpture's\nattractiveness ( - 1000 \u2264 ti \u2264 1000). The numbers on the line are separated by\nspaces. Output Print the required maximum sum of the sculptures'\nattractiveness. Examples Input 8 1 2 -3 4 -5 5 2 3 Output 14 Input 6 1 -2 3 -4\n5 -6 Output 9 Input 6 1 2 3 4 5 6 Output 21 Note In the first sample it is\nbest to leave every second sculpture, that is, leave sculptures with\nattractivenesses: 2, 4, 5 \u0438 3.\n\n",
        "cf_contest_id": 158,
        "cf_index": "D",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "brute force",
            "number theory"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8\r\n1 2 -3 4 -5 5 2 3\r\n",
                "14\r\n"
            ],
            [
                "6\r\n1 -2 3 -4 5 -6\r\n",
                "9\r\n"
            ],
            [
                "6\r\n1 2 3 4 5 6\r\n",
                "21\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n1 -10 1 -10\r\n",
                "-18\r\n"
            ],
            [
                "6\r\n1 0 1 0 1 0\r\n",
                "3\r\n"
            ],
            [
                "12\r\n1 1 1 1 1 1 1 -1000 1 1 1 1\r\n",
                "6\r\n"
            ],
            [
                "3\r\n-1 -1 -1\r\n",
                "-3\r\n"
            ],
            [
                "97\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n",
                "0\r\n"
            ],
            [
                "5\r\n0 -1 1 1 0\r\n",
                "1\r\n"
            ],
            [
                "6\r\n-8 -8 6 5 -5 1\r\n",
                "-2\r\n"
            ],
            [
                "7\r\n0 55 -5 50 53 34 84\r\n",
                "271\r\n"
            ],
            [
                "9\r\n-2 -1 2 0 1 1 -1 -2 -2\r\n",
                "1\r\n"
            ],
            [
                "10\r\n5 -5 -4 3 -1 -1 2 1 5 -2\r\n",
                "7\r\n"
            ],
            [
                "13\r\n6 7 8 2 5 1 -9 -6 9 10 8 9 -8\r\n",
                "42\r\n"
            ]
        ]
    }
]