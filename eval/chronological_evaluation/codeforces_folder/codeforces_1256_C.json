[
    {
        "name": "Platforms Jumping",
        "description": "There is a river of width \n    n\n. The left bank of the river is cell \n    0\n\nand the right bank is cell \n    n + 1\n (more formally, the river can be\nrepresented as a sequence of \n    n + 2\n cells numbered from \n    0\n to \n    n +\n    1\n). There are also \n    m\n wooden platforms on a river, the \n    i\n-th\nplatform has length \n    c_i\n (so the \n    i\n-th platform takes \n    c_i\n\nconsecutive cells of the river). It is guaranteed that the sum of lengths of\nplatforms does not exceed \n    n\n. You are standing at \n    0\n and want to\nreach \n    n+1\n somehow. If you are standing at the position \n    x\n, you can\njump to any position in the range \n    [x + 1; x + d]\n. However you don't\nreally like the water so you can jump only to such cells that belong to some\nwooden platform. For example, if \n    d=1\n, you can jump only to the next\nposition (if it belongs to the wooden platform). You can assume that cells\n\n    0\n and \n    n+1\n belong to wooden platforms. You want to know if it is\npossible to reach \n    n+1\n from \n    0\n if you can move any platform to the\nleft or to the right arbitrary number of times (possibly, zero) as long as\nthey do not intersect each other (but two platforms can touch each other). It\nalso means that you cannot change the relative order of platforms. Note that\nyou should move platforms until you start jumping (in other words, you first\nmove the platforms and then start jumping). For example, if \n    n=7\n,\n\n    m=3\n, \n    d=2\n and \n    c = [1, 2, 1]\n, then one of the ways to reach\n\n    8\n from \n    0\n is follow: The first example: \n    n=7\n. Input The first\nline of the input contains three integers \n    n\n, \n    m\n and \n    d\n (\n    1\n    \n    \u2264 n, m, d \n    \u2264 1000, m \n    \u2264 n\n) \u2014 the width of the river, the number\nof platforms and the maximum distance of your jump, correspondingly. The\nsecond line of the input contains \n    m\n integers \n    c_1, c_2, \n    \u2026,\n    c_m\n (\n    1 \n    \u2264 c_i \n    \u2264 n, \n    \u2211\n    _i=1^m c_i \n    \u2264 n\n),\nwhere \n    c_i\n is the length of the \n    i\n-th platform. Output If it is\nimpossible to reach \n    n+1\n from \n    0\n, print NO in the first line.\nOtherwise, print YES in the first line and the array \n    a\n of length \n    n\n\nin the second line \u2014 the sequence of river cells (excluding cell \n    0\n and\ncell \n    n + 1\n). If the cell \n    i\n does not belong to any platform,\n\n    a_i\n should be \n    0\n. Otherwise, it should be equal to the index of the\nplatform (\n    1\n-indexed, platforms are numbered from \n    1\n to \n    m\n in\norder of input) to which the cell \n    i\n belongs. Note that all \n    a_i\n\nequal to \n    1\n should form a contiguous subsegment of the array \n    a\n of\nlength \n    c_1\n, all \n    a_i\n equal to \n    2\n should form a contiguous\nsubsegment of the array \n    a\n of length \n    c_2\n, ..., all \n    a_i\n equal\nto \n    m\n should form a contiguous subsegment of the array \n    a\n of length\n\n    c_m\n. The leftmost position of \n    2\n in \n    a\n should be greater than\nthe rightmost position of \n    1\n, the leftmost position of \n    3\n in \n    a\n\nshould be greater than the rightmost position of \n    2\n, ..., the leftmost\nposition of \n    m\n in \n    a\n should be greater than the rightmost position\nof \n    m-1\n. See example outputs for better understanding. Examples Input 7 3\n2 1 2 1 Output YES 0 1 0 2 2 0 3 Input 10 1 11 1 Output YES 0 0 0 0 0 0 0 0 0\n1 Input 10 1 5 2 Output YES 0 0 0 0 1 1 0 0 0 0 Note Consider the first\nexample: the answer is \n    [0, 1, 0, 2, 2, 0, 3]\n. The sequence of jumps you\nperform is \n    0 \n    \u2192 2 \n    \u2192 4 \n    \u2192 5 \n    \u2192\n    7 \n    \u2192 8\n. Consider the second example: it does not matter how to\nplace the platform because you always can jump from \n    0\n to \n    11\n.\nConsider the third example: the answer is \n    [0, 0, 0, 0, 1, 1, 0, 0, 0,\n    0]\n. The sequence of jumps you perform is \n    0 \n    \u2192 5 \n    \u2192\n    6 \n    \u2192 11\n.\n\n",
        "cf_contest_id": 1256,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 3 2\r\n1 2 1\r\n",
                "YES\r\n0 1 0 2 2 0 3\r\n"
            ],
            [
                "10 1 11\r\n1\r\n",
                "YES\r\n0 0 0 0 0 1 0 0 0 0\r\n"
            ],
            [
                "10 1 5\r\n2\r\n",
                "YES\r\n0 0 0 0 1 1 0 0 0 0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1000 3 9\r\n106 118 99\r\n",
                "NO\r\n"
            ],
            [
                "1000 20 8\r\n3 6 3 4 3 5 3 5 5 5 3 1 3 8 2 4 4 5 3 2\r\n",
                "NO\r\n"
            ],
            [
                "1000 16 2\r\n20 13 16 13 22 10 18 21 18 20 20 16 19 9 11 22\r\n",
                "NO\r\n"
            ],
            [
                "5 1 2\r\n1\r\n",
                "NO\r\n"
            ],
            [
                "1 1 1\r\n1\r\n",
                "YES\r\n1\r\n"
            ],
            [
                "2 1 1\r\n1\r\n",
                "NO\r\n"
            ],
            [
                "4 1 2\r\n1\r\n",
                "NO\r\n"
            ],
            [
                "15 2 5\r\n1 1\r\n",
                "NO\r\n"
            ],
            [
                "10 10 1\r\n1 1 1 1 1 1 1 1 1 1\r\n",
                "YES\r\n1 2 3 4 5 6 7 8 9 10\r\n"
            ],
            [
                "5 2 1\r\n1 1\r\n",
                "NO\r\n"
            ],
            [
                "7 1 1\r\n6\r\n",
                "NO\r\n"
            ],
            [
                "2 2 1\r\n1 1\r\n",
                "YES\r\n1 2\r\n"
            ],
            [
                "100 1 49\r\n100\r\n",
                "YES\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n"
            ],
            [
                "10 9 1\r\n1 1 1 1 1 1 1 1 1\r\n",
                "NO\r\n"
            ],
            [
                "50 4 7\r\n4 7 10 3\r\n",
                "YES\r\n0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 2 2 2 2 2 2 2 0 0 0 0 0 3 3 3 3 3 3 3 3 3 3 0 0 0 0 0 4 4 4 0 0 0 0 0\r\n"
            ],
            [
                "10 1 5\r\n1\r\n",
                "NO\r\n"
            ],
            [
                "8 1 4\r\n1\r\n",
                "NO\r\n"
            ],
            [
                "100 1 49\r\n3\r\n",
                "NO\r\n"
            ],
            [
                "6 3 1\r\n1 2 3\r\n",
                "YES\r\n1 2 2 3 3 3\r\n"
            ],
            [
                "1000 11 33\r\n2 1 5 1 3 1 3 1 3 2 1\r\n",
                "NO\r\n"
            ],
            [
                "1000 6 25\r\n24 19 21 18 28 16\r\n",
                "NO\r\n"
            ],
            [
                "1000 77 3\r\n2 3 2 1 3 3 3 3 4 5 4 3 3 1 3 5 1 4 3 2 5 3 2 2 1 4 4 3 1 2 3 2 1 4 1 3 3 2 4 3 1 5 1 3 4 4 2 3 2 4 3 4 3 1 6 5 2 3 4 3 3 5 5 2 1 2 2 3 2 2 5 1 3 5 5 4 2\r\n",
                "NO\r\n"
            ],
            [
                "6 1 2\r\n2\r\n",
                "NO\r\n"
            ],
            [
                "7 1 2\r\n4\r\n",
                "NO\r\n"
            ],
            [
                "93 66 2\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 6 3 21\r\n",
                "YES\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 64 64 64 64 64 65 65 65 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66 66\r\n"
            ],
            [
                "8 4 1\r\n1 1 4 1\r\n",
                "NO\r\n"
            ],
            [
                "12 3 2\r\n1 2 1\r\n",
                "NO\r\n"
            ],
            [
                "3 1 1\r\n2\r\n",
                "NO\r\n"
            ],
            [
                "5 1 2\r\n2\r\n",
                "NO\r\n"
            ],
            [
                "5 4 1\r\n1 1 1 1\r\n",
                "NO\r\n"
            ],
            [
                "4 4 1\r\n1 1 1 1\r\n",
                "YES\r\n1 2 3 4\r\n"
            ],
            [
                "8 3 2\r\n1 1 1\r\n",
                "NO\r\n"
            ],
            [
                "12 1 4\r\n5\r\n",
                "NO\r\n"
            ],
            [
                "9 3 2\r\n1 2 1\r\n",
                "NO\r\n"
            ],
            [
                "4 2 1\r\n2 1\r\n",
                "NO\r\n"
            ],
            [
                "11 1 5\r\n2\r\n",
                "NO\r\n"
            ],
            [
                "10 1 4\r\n10\r\n",
                "YES\r\n1 1 1 1 1 1 1 1 1 1\r\n"
            ],
            [
                "8 2 2\r\n2 2\r\n",
                "NO\r\n"
            ],
            [
                "20 20 20\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "YES\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\r\n"
            ],
            [
                "13 1 4\r\n6\r\n",
                "NO\r\n"
            ],
            [
                "5 2 1\r\n2 3\r\n",
                "YES\r\n1 1 2 2 2\r\n"
            ],
            [
                "7 2 2\r\n1 2\r\n",
                "NO\r\n"
            ]
        ]
    }
]