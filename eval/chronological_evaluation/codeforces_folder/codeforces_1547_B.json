[
    {
        "name": "Alphabetical Strings",
        "description": "A string \n    s\n of length \n    n\n (\n    1 \n    \u2264 n \n    \u2264 26\n) is called\nalphabetical if it can be obtained using the following algorithm: first, write\nan empty string to \n    s\n (i.e. perform the assignment \n    s\n := \"\"); then\nperform the next step \n    n\n times; at the \n    i\n-th step take \n    i\n-th\nlowercase letter of the Latin alphabet and write it either to the left of the\nstring \n    s\n or to the right of the string \n    s\n (i.e. perform the\nassignment \n    s\n := \n    c+s\n or \n    s\n := \n    s+c\n, where \n    c\n is the\n\n    i\n-th letter of the Latin alphabet). In other words, iterate over the\n\n    n\n first letters of the Latin alphabet starting from 'a' and etc. Each\ntime we prepend a letter to the left of the string \n    s\n or append a letter\nto the right of the string \n    s\n. Strings that can be obtained in that way\nare alphabetical. For example, the following strings are alphabetical: \"a\",\n\"ba\", \"ab\", \"bac\" and \"ihfcbadeg\". The following strings are not alphabetical:\n\"z\", \"aa\", \"ca\", \"acb\", \"xyz\" and \"ddcba\". From the given string, determine if\nit is alphabetical. Input The first line contains one integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. Then \n    t\n test cases\nfollow. Each test case is written on a separate line that contains one string\n\n    s\n. String \n    s\n consists of lowercase letters of the Latin alphabet\nand has a length between \n    1\n and \n    26\n, inclusive. Output Output\n\n    t\n lines, each of them must contain the answer to the corresponding test\ncase. Output YES if the given string \n    s\n is alphabetical and NO otherwise.\nYou can output YES and NO in any case (for example, strings yEs, yes, Yes and\nYES will be recognized as a positive answer). Example Input 11 a ba ab bac\nihfcbadeg z aa ca acb xyz ddcba Output YES YES YES YES YES NO NO NO NO NO NO\nNote The example contains test cases from the main part of the condition.\n\n",
        "cf_contest_id": 1547,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "11\r\na\r\nba\r\nab\r\nbac\r\nihfcbadeg\r\nz\r\naa\r\nca\r\nacb\r\nxyz\r\nddcba\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\naaaaaaaaaaaaaaaaa\r\n",
                "NO\r\n"
            ],
            [
                "1\r\naaaaaaaaaaaaaaa\r\n",
                "NO\r\n"
            ],
            [
                "1\r\nbabe\r\n",
                "NO\r\n"
            ]
        ]
    }
]