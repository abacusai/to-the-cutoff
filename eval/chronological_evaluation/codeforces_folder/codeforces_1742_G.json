[
    {
        "name": "Orray",
        "description": "You are given an array \n    a\n consisting of \n    n\n nonnegative integers.\nLet's define the prefix OR array \n    b\n as the array \n    b_i =\n    a_1\u00a0\n    \ud835\uddae\ud835\uddb1\u00a0a_2\u00a0\n    \ud835\uddae\ud835\uddb1\u00a0\n    \u2026\u00a0\n    \ud835\uddae\ud835\uddb1\u00a0a_i\n, where\n\n    \ud835\uddae\ud835\uddb1\n represents the bitwise OR operation. In other words, the\narray \n    b\n is formed by computing the \n    \ud835\uddae\ud835\uddb1\n of every prefix\nof \n    a\n. You are asked to rearrange the elements of the array \n    a\n in\nsuch a way that its prefix OR array is lexicographically maximum. An array\n\n    x\n is lexicographically greater than an array \n    y\n if in the first\nposition where \n    x\n and \n    y\n differ, \n    x_i > y_i\n. Input The first\nline of the input contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    100\n) \u2014 the number of test cases. The description of test cases follows. The\nfirst line of each test case contains a single integer \n    n\n (\n    1 \n    \u2264 n\n    \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the length of the array \n    a\n. The second line\nof each test case contains \n    n\n nonnegative integers \n    a_1, \n    \u2026,\n    a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 10^9\n). It is guaranteed that the sum of\n\n    n\n over all test cases does not exceed \n    2 \n    \u00b7 10^5\n. Output For\neach test case print \n    n\n integers \u2014 any rearrangement of the array \n    a\n\nthat obtains the lexicographically maximum prefix OR array. Example Input 5 4\n1 2 4 8 7 5 1 2 3 4 5 5 2 1 101 6 2 3 4 2 3 4 8 1 4 2 3 4 5 7 1 Output 8 4 2 1\n5 2 1 3 4 5 5 101 1 4 3 2 2 3 4 7 1 4 2 3 4 5 1\n\n",
        "cf_contest_id": 1742,
        "cf_index": "G",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "greedy",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n4\r\n1 2 4 8\r\n7\r\n5 1 2 3 4 5 5\r\n2\r\n1 101\r\n6\r\n2 3 4 2 3 4\r\n8\r\n1 4 2 3 4 5 7 1\r\n",
                "8 4 2 1\r\n5 3 2 1 4 5 5\r\n101 1\r\n4 3 3 4 2 2\r\n7 5 1 1 2 3 4 4\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n30\r\n1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 268435456 536870912\r\n",
                "536870912 268435456 134217728 67108864 33554432 16777216 8388608 4194304 2097152 1048576 524288 262144 131072 65536 32768 16384 8192 4096 2048 1024 512 256 128 64 32 16 8 4 2 1\r\n"
            ]
        ]
    }
]