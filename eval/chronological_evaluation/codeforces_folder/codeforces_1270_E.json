[
    {
        "name": "Divide Points",
        "description": "You are given a set of \n    n\n    \u2265 2\n pairwise different points with integer\ncoordinates. Your task is to partition these points into two nonempty groups\n\n    A\n and \n    B\n, such that the following condition holds: For every two\npoints \n    P\n and \n    Q\n, write the Euclidean distance between them on the\nblackboard: if they belong to the same group \u2014 with a yellow pen, and if they\nbelong to different groups \u2014 with a blue pen. Then no yellow number is equal\nto any blue number. It is guaranteed that such a partition exists for any\npossible input. If there exist multiple partitions, you are allowed to output\nany of them. Input The first line contains one integer \n    n\n \n    (2 \n    \u2264 n\n    \n    \u2264 10^3)\n \u2014 the number of points. The \n    i\n-th of the next \n    n\n\nlines contains two integers \n    x_i\n and \n    y_i\n (\n    -10^6 \n    \u2264 x_i, y_i\n    \n    \u2264 10^6\n) \u2014 the coordinates of the \n    i\n-th point. It is guaranteed\nthat all \n    n\n points are pairwise different. Output In the first line,\noutput \n    a\n (\n    1 \n    \u2264 a \n    \u2264 n-1\n) \u2014 the number of points in a group\n\n    A\n. In the second line, output \n    a\n integers \u2014 the indexes of points\nthat you include into group \n    A\n. If there are multiple answers, print any.\nExamples Input 3 0 0 0 1 1 0 Output 1 1 Input 4 0 1 0 -1 1 0 -1 0 Output 2 1 2\nInput 3 -2 1 1 1 -1 0 Output 1 2 Input 6 2 5 0 3 -4 -1 -5 -4 1 0 3 -1 Output 1\n6 Input 2 -1000000 -1000000 1000000 1000000 Output 1 1 Note In the first\nexample, we set point \n    (0, 0)\n to group \n    A\n and points \n    (0, 1)\n\nand \n    (1, 0)\n to group \n    B\n. In this way, we will have \n    1\n yellow\nnumber \n    \u221a(2)\n and \n    2\n blue numbers \n    1\n on the blackboard. In\nthe second example, we set points \n    (0, 1)\n and \n    (0, -1)\n to group\n\n    A\n and points \n    (-1, 0)\n and \n    (1, 0)\n to group \n    B\n. In this\nway, we will have \n    2\n yellow numbers \n    2\n, \n    4\n blue numbers\n\n    \u221a(2)\n on the blackboard.\n\n",
        "cf_contest_id": 1270,
        "cf_index": "E",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "geometry",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n0 0\r\n0 1\r\n1 0\r\n",
                "2\r\n2 3\r\n"
            ],
            [
                "4\r\n0 1\r\n0 -1\r\n1 0\r\n-1 0\r\n",
                "2\r\n3 4\r\n"
            ],
            [
                "3\r\n-2 1\r\n1 1\r\n-1 0\r\n",
                "1\r\n2\r\n"
            ],
            [
                "6\r\n2 5\r\n0 3\r\n-4 -1\r\n-5 -4\r\n1 0\r\n3 -1\r\n",
                "1\r\n6\r\n"
            ],
            [
                "2\r\n-1000000 -1000000\r\n1000000 1000000\r\n",
                "1\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n0 0\r\n2 0\r\n0 2\r\n2 2\r\n",
                "2\r\n2 3\r\n"
            ],
            [
                "3\r\n456247 -181678\r\n587917 -458204\r\n761912 -43430\r\n",
                "1\r\n3\r\n"
            ],
            [
                "4\r\n992619 655798\r\n-437531 -155617\r\n603017 -160508\r\n932576 102455\r\n",
                "1\r\n2\r\n"
            ],
            [
                "5\r\n992619 655798\r\n-437531 -155617\r\n603017 -160508\r\n932576 102455\r\n-204498 -200503\r\n",
                "1\r\n2\r\n"
            ],
            [
                "6\r\n992619 655798\r\n-437531 -155617\r\n603017 -160508\r\n932576 102455\r\n-204498 -200503\r\n-739914 -37504\r\n",
                "2\r\n2 6\r\n"
            ],
            [
                "7\r\n992619 655798\r\n-437531 -155617\r\n603017 -160508\r\n932576 102455\r\n-204498 -200503\r\n-739914 -37504\r\n568321 -115406\r\n",
                "2\r\n2 6\r\n"
            ],
            [
                "5\r\n0 0\r\n0 2\r\n1 1\r\n2 0\r\n2 2\r\n",
                "1\r\n3\r\n"
            ],
            [
                "5\r\n0 0\r\n0 1\r\n0 2\r\n0 3\r\n0 4\r\n",
                "2\r\n2 4\r\n"
            ],
            [
                "6\r\n0 -200000\r\n0 -10000\r\n0 0\r\n0 100000\r\n0 200000\r\n0 300000\r\n",
                "1\r\n2\r\n"
            ],
            [
                "6\r\n0 0\r\n1 1\r\n2 2\r\n3 3\r\n4 4\r\n5 5\r\n",
                "3\r\n2 4 6\r\n"
            ],
            [
                "6\r\n0 0\r\n1 1\r\n3 3\r\n2 2\r\n4 4\r\n0 4\r\n",
                "2\r\n2 3\r\n"
            ],
            [
                "5\r\n0 0\r\n0 2\r\n0 3\r\n0 5\r\n1 3\r\n",
                "2\r\n3 4\r\n"
            ],
            [
                "4\r\n0 1\r\n1 0\r\n2 2\r\n0 4\r\n",
                "2\r\n3 4\r\n"
            ],
            [
                "3\r\n5 5\r\n1 1\r\n3 3\r\n",
                "1\r\n3\r\n"
            ],
            [
                "2\r\n792699 540067\r\n-865275 -699230\r\n",
                "1\r\n2\r\n"
            ],
            [
                "3\r\n792878 200978\r\n-5870 -263790\r\n-134681 900147\r\n",
                "1\r\n3\r\n"
            ],
            [
                "4\r\n793057 -138110\r\n853534 171649\r\n-875103 -445650\r\n-240332 -96740\r\n",
                "1\r\n4\r\n"
            ],
            [
                "5\r\n793236 -477199\r\n-287060 607089\r\n384475 208551\r\n602636 -6788\r\n281438 549553\r\n",
                "2\r\n3 4\r\n"
            ],
            [
                "20\r\n894861 -264091\r\n-584327 939174\r\n611347 -664461\r\n700818 247138\r\n501879 -937436\r\n-298184 103409\r\n-650851 506725\r\n914464 -649649\r\n-191432 -714181\r\n789676 -885778\r\n505349 139663\r\n548371 889897\r\n-811176 -437653\r\n488463 -974291\r\n200889 -396824\r\n885545 -564882\r\n470581 -250042\r\n325241 -323593\r\n-735711 -346033\r\n-896010 418512\r\n",
                "9\r\n2 5 6 8 9 13 15 16 17\r\n"
            ],
            [
                "30\r\n356796 133718\r\n-38697 -144546\r\n752937 -464381\r\n-392266 -895367\r\n726142 440342\r\n499761 520681\r\n21493 780572\r\n-145605 -690458\r\n229737 334279\r\n-428414 -690909\r\n981381 -134684\r\n805755 -16870\r\n-195583 -163277\r\n-210762 -226125\r\n-616716 -572983\r\n-881116 774672\r\n-767924 -504231\r\n-101294 756955\r\n382879 873290\r\n625593 -529832\r\n-409482 -109743\r\n511756 830724\r\n-232114 416615\r\n56701 -874222\r\n-108567 -154846\r\n113202 -320159\r\n454244 -566417\r\n435827 567126\r\n-305427 -789943\r\n-242732 -100347\r\n",
                "21\r\n2 4 7 8 10 11 12 14 15 17 18 19 20 21 23 24 25 26 27 28 30\r\n"
            ],
            [
                "10\r\n793236 -477199\r\n-793236 477199\r\n-287060 607089\r\n287060 -607089\r\n384475 208551\r\n-384475 -208551\r\n602636 -6788\r\n-602636 6788\r\n281438 549553\r\n-281438 -549553\r\n",
                "4\r\n5 6 7 8\r\n"
            ],
            [
                "10\r\n-567074 -661902\r\n870041 22895\r\n469757 -864540\r\n-206097 -610356\r\n277616 -315215\r\n903868 -313863\r\n676804 232878\r\n-25466 -608841\r\n-612601 237358\r\n7767 919351\r\n",
                "6\r\n3 4 5 6 8 9\r\n"
            ]
        ]
    }
]