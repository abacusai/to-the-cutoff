[
    {
        "name": "Little Artem and Dance",
        "description": "Little Artem is fond of dancing. Most of all dances Artem likes rueda \u2014 Cuban\ndance that is danced by pairs of boys and girls forming a circle and dancing\ntogether. More detailed, there are n pairs of boys and girls standing in a\ncircle. Initially, boy number 1 dances with a girl number 1, boy number 2\ndances with a girl number 2 and so on. Girls are numbered in the clockwise\norder. During the dance different moves are announced and all pairs perform\nthis moves. While performing moves boys move along the circle, while girls\nalways stay at their initial position. For the purpose of this problem we\nconsider two different types of moves: Value x and some direction are\nannounced, and all boys move x positions in the corresponding direction. Boys\ndancing with even-indexed girls swap positions with boys who are dancing with\nodd-indexed girls. That is the one who was dancing with the girl 1 swaps with\nthe one who was dancing with the girl number 2, while the one who was dancing\nwith girl number 3 swaps with the one who was dancing with the girl number 4\nand so one. It's guaranteed that n is even. Your task is to determine the\nfinal position of each boy. Input The first line of the input contains two\nintegers n and q (2 \u2264 n \u2264 1 000 000, 1 \u2264 q \u2264 2 000 000) \u2014 the number of\ncouples in the rueda and the number of commands to perform, respectively. It's\nguaranteed that n is even. Next q lines contain the descriptions of the\ncommands. Each command has type as the integer 1 or 2 first. Command of the\nfirst type is given as x ( - n \u2264 x \u2264 n), where 0 \u2264 x \u2264 n means all boys moves\nx girls in clockwise direction, while - x means all boys move x positions in\ncounter-clockwise direction. There is no other input for commands of the\nsecond type. Output Output n integers, the i-th of them should be equal to the\nindex of boy the i-th girl is dancing with after performing all q moves.\nExamples Input 6 3 1 2 2 1 2 Output 4 3 6 5 2 1 Input 2 3 1 1 2 1 -2 Output 1\n2 Input 4 2 2 1 3 Output 1 4 3 2\n\n",
        "cf_contest_id": 641,
        "cf_index": "C",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 3\r\n1 2\r\n2\r\n1 2\r\n",
                "4 3 6 5 2 1 "
            ],
            [
                "2 3\r\n1 1\r\n2\r\n1 -2\r\n",
                "1 2 "
            ],
            [
                "4 2\r\n2\r\n1 3\r\n",
                "1 4 3 2 "
            ]
        ],
        "private_cases": [
            [
                "6 8\r\n1 2\r\n2\r\n2\r\n2\r\n2\r\n1 1\r\n1 -5\r\n2\r\n",
                "4 3 6 5 2 1 "
            ],
            [
                "6 8\r\n1 -1\r\n2\r\n2\r\n1 4\r\n1 0\r\n1 -1\r\n1 0\r\n1 -1\r\n",
                "6 1 2 3 4 5 "
            ],
            [
                "10 5\r\n1 8\r\n1 -3\r\n1 -3\r\n2\r\n1 5\r\n",
                "3 6 5 8 7 10 9 2 1 4 "
            ],
            [
                "10 10\r\n1 2\r\n1 -10\r\n1 -5\r\n2\r\n2\r\n1 -4\r\n2\r\n2\r\n1 -10\r\n1 -9\r\n",
                "7 8 9 10 1 2 3 4 5 6 "
            ],
            [
                "6 9\r\n2\r\n1 -2\r\n2\r\n1 -6\r\n1 -6\r\n1 4\r\n2\r\n1 -1\r\n2\r\n",
                "2 5 4 1 6 3 "
            ],
            [
                "2 5\r\n2\r\n1 -1\r\n2\r\n1 1\r\n2\r\n",
                "2 1 "
            ],
            [
                "2 8\r\n2\r\n2\r\n2\r\n1 -2\r\n1 -1\r\n1 -1\r\n2\r\n1 1\r\n",
                "2 1 "
            ],
            [
                "36 86\r\n1 -25\r\n2\r\n2\r\n2\r\n1 16\r\n1 -14\r\n1 12\r\n2\r\n1 -21\r\n2\r\n1 -12\r\n1 34\r\n1 -4\r\n1 19\r\n1 5\r\n2\r\n2\r\n2\r\n2\r\n1 -1\r\n1 -31\r\n2\r\n1 -6\r\n1 1\r\n2\r\n2\r\n1 27\r\n1 19\r\n2\r\n1 -14\r\n2\r\n1 -17\r\n2\r\n2\r\n2\r\n2\r\n1 -35\r\n1 -31\r\n1 7\r\n2\r\n2\r\n2\r\n1 -12\r\n2\r\n2\r\n2\r\n2\r\n1 7\r\n1 -9\r\n1 -2\r\n2\r\n1 -3\r\n2\r\n2\r\n1 33\r\n1 -8\r\n1 -17\r\n1 2\r\n2\r\n1 -29\r\n1 -19\r\n2\r\n1 22\r\n2\r\n2\r\n2\r\n2\r\n1 -15\r\n1 7\r\n1 -29\r\n2\r\n2\r\n1 -30\r\n2\r\n2\r\n1 -6\r\n2\r\n1 -25\r\n2\r\n1 -18\r\n2\r\n1 33\r\n1 23\r\n2\r\n2\r\n2\r\n",
                "25 22 27 24 29 26 31 28 33 30 35 32 1 34 3 36 5 2 7 4 9 6 11 8 13 10 15 12 17 14 19 16 21 18 23 20 "
            ],
            [
                "10 71\r\n1 -4\r\n1 -3\r\n2\r\n2\r\n2\r\n1 -3\r\n1 4\r\n2\r\n2\r\n2\r\n2\r\n1 5\r\n2\r\n2\r\n2\r\n2\r\n2\r\n1 1\r\n2\r\n1 2\r\n1 1\r\n2\r\n1 -5\r\n2\r\n2\r\n2\r\n2\r\n1 8\r\n1 -9\r\n1 -3\r\n1 2\r\n1 3\r\n1 -2\r\n1 -6\r\n2\r\n2\r\n1 -2\r\n2\r\n1 -6\r\n1 5\r\n1 2\r\n1 -10\r\n1 3\r\n2\r\n1 6\r\n2\r\n2\r\n1 4\r\n1 -8\r\n1 -4\r\n1 -1\r\n2\r\n2\r\n1 1\r\n2\r\n2\r\n1 3\r\n1 8\r\n1 7\r\n1 4\r\n2\r\n1 -10\r\n2\r\n2\r\n1 5\r\n1 9\r\n1 -5\r\n2\r\n2\r\n1 -2\r\n2\r\n",
                "1 2 3 4 5 6 7 8 9 10 "
            ],
            [
                "74 85\r\n2\r\n1 -69\r\n2\r\n2\r\n2\r\n2\r\n2\r\n1 74\r\n2\r\n2\r\n1 -41\r\n2\r\n2\r\n1 15\r\n2\r\n2\r\n2\r\n1 -12\r\n2\r\n1 -3\r\n1 28\r\n1 -46\r\n2\r\n1 -39\r\n2\r\n1 6\r\n2\r\n2\r\n1 -30\r\n2\r\n1 16\r\n1 30\r\n1 -50\r\n1 -17\r\n1 41\r\n1 56\r\n2\r\n1 -45\r\n1 -21\r\n1 63\r\n1 -7\r\n2\r\n1 -6\r\n1 26\r\n2\r\n1 -71\r\n2\r\n2\r\n2\r\n1 11\r\n2\r\n1 70\r\n1 13\r\n2\r\n1 -51\r\n1 -9\r\n1 -72\r\n1 55\r\n2\r\n1 3\r\n2\r\n2\r\n1 47\r\n2\r\n2\r\n2\r\n1 -6\r\n1 -37\r\n2\r\n2\r\n1 -1\r\n1 72\r\n2\r\n1 -23\r\n2\r\n2\r\n2\r\n1 70\r\n1 38\r\n2\r\n2\r\n1 74\r\n1 -1\r\n2\r\n1 -9\r\n",
                "71 18 73 20 1 22 3 24 5 26 7 28 9 30 11 32 13 34 15 36 17 38 19 40 21 42 23 44 25 46 27 48 29 50 31 52 33 54 35 56 37 58 39 60 41 62 43 64 45 66 47 68 49 70 51 72 53 74 55 2 57 4 59 6 61 8 63 10 65 12 67 14 69 16 "
            ],
            [
                "24 8\r\n1 17\r\n2\r\n1 -10\r\n2\r\n2\r\n2\r\n2\r\n1 19\r\n",
                "22 1 24 3 2 5 4 7 6 9 8 11 10 13 12 15 14 17 16 19 18 21 20 23 "
            ],
            [
                "6 5\r\n1 5\r\n1 5\r\n1 6\r\n1 6\r\n1 6\r\n",
                "3 4 5 6 1 2 "
            ]
        ]
    }
]