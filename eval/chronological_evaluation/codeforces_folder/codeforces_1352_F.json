[
    {
        "name": "Binary String Reconstruction",
        "description": "For some binary string \n    s\n (i.e. each character \n    s_i\n is either '0' or\n'1'), all pairs of consecutive (adjacent) characters were written. In other\nwords, all substrings of length \n    2\n were written. For each pair (substring\nof length \n    2\n), the number of '1' (ones) in it was calculated. You are\ngiven three numbers: \n    n_0\n \u2014 the number of such pairs of consecutive\ncharacters (substrings) where the number of ones equals \n    0\n; \n    n_1\n \u2014\nthe number of such pairs of consecutive characters (substrings) where the\nnumber of ones equals \n    1\n; \n    n_2\n \u2014 the number of such pairs of\nconsecutive characters (substrings) where the number of ones equals \n    2\n.\nFor example, for the string \n    s=\n\"1110011110\", the following substrings\nwould be written: \"11\", \"11\", \"10\", \"00\", \"01\", \"11\", \"11\", \"11\", \"10\". Thus,\n\n    n_0=1\n, \n    n_1=3\n, \n    n_2=5\n. Your task is to restore any suitable\nbinary string \n    s\n from the given values \n    n_0, n_1, n_2\n. It is\nguaranteed that at least one of the numbers \n    n_0, n_1, n_2\n is greater\nthan \n    0\n. Also, it is guaranteed that a solution exists. Input The first\nline contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of\ntest cases in the input. Then test cases follow. Each test case consists of\none line which contains three integers \n    n_0, n_1, n_2\n (\n    0 \n    \u2264 n_0,\n    n_1, n_2 \n    \u2264 100\n; \n    n_0 + n_1 + n_2 > 0\n). It is guaranteed that the\nanswer for given \n    n_0, n_1, n_2\n exists. Output Print \n    t\n lines. Each\nof the lines should contain a binary string corresponding to a test case. If\nthere are several possible solutions, print any of them. Example Input 7 1 3 5\n1 1 1 3 9 3 0 1 0 3 1 2 0 0 3 2 0 0 Output 1110011110 0011 0110001100101011 10\n0000111 1111 000\n\n",
        "cf_contest_id": 1352,
        "cf_index": "F",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n1 3 5\r\n1 1 1\r\n3 9 3\r\n0 1 0\r\n3 1 2\r\n0 0 3\r\n2 0 0\r\n",
                "1011111100\r\n1100\r\n1010101011110000\r\n10\r\n1110000\r\n1111\r\n000\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n11 10 9\r\n",
                "0101010101111111111000000000000\r\n"
            ]
        ]
    }
]