[
    {
        "name": "Maxim and Discounts",
        "description": "Maxim always goes to the supermarket on Sundays. Today the supermarket has a\nspecial offer of discount systems. There are m types of discounts. We assume\nthat the discounts are indexed from 1 to m. To use the discount number i, the\ncustomer takes a special basket, where he puts exactly qi items he buys. Under\nthe terms of the discount system, in addition to the items in the cart the\ncustomer can receive at most two items from the supermarket for free. The\nnumber of the \"free items\" (0, 1 or 2) to give is selected by the customer.\nThe only condition imposed on the selected \"free items\" is as follows: each of\nthem mustn't be more expensive than the cheapest item out of the qi items in\nthe cart. Maxim now needs to buy n items in the shop. Count the minimum sum of\nmoney that Maxim needs to buy them, if he use the discount system optimally\nwell. Please assume that the supermarket has enough carts for any actions.\nMaxim can use the same discount multiple times. Of course, Maxim can buy items\nwithout any discounts. Input The first line contains integer m (1 \u2264 m \u2264 10^5)\n\u2014 the number of discount types. The second line contains m integers: q1, q2,\n..., qm (1 \u2264 qi \u2264 10^5). The third line contains integer n (1 \u2264 n \u2264 10^5) \u2014\nthe number of items Maxim needs. The fourth line contains n integers: a1, a2,\n..., an (1 \u2264 ai \u2264 10^4) \u2014 the items' prices. The numbers in the lines are\nseparated by single spaces. Output In a single line print a single integer \u2014\nthe answer to the problem. Examples Input 1 2 4 50 50 100 100 Output 200 Input\n2 2 3 5 50 50 50 50 50 Output 150 Input 1 1 7 1 1 1 1 1 1 1 Output 3 Note In\nthe first sample Maxim needs to buy two items that cost 100 and get a discount\nfor two free items that cost 50. In that case, Maxim is going to pay 200. In\nthe second sample the best strategy for Maxim is to buy 3 items and get 2\nitems for free using the discount. In that case, Maxim is going to pay 150.\n\n",
        "cf_contest_id": 261,
        "cf_index": "A",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n2\r\n4\r\n50 50 100 100\r\n",
                "200\r\n"
            ],
            [
                "2\r\n2 3\r\n5\r\n50 50 50 50 50\r\n",
                "150\r\n"
            ],
            [
                "1\r\n1\r\n7\r\n1 1 1 1 1 1 1\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "60\r\n7 4 20 15 17 6 2 2 3 18 13 14 16 11 13 12 6 10 14 1 16 6 4 9 10 8 10 15 16 13 13 9 16 11 5 4 11 1 20 5 11 20 19 9 14 13 10 6 6 9 2 13 11 4 1 6 8 18 10 3\r\n26\r\n2481 6519 9153 741 9008 6601 6117 1689 5911 2031 2538 5553 1358 6863 7521 4869 6276 5356 5305 6761 5689 7476 5833 257 2157 218\r\n",
                "44768\r\n"
            ],
            [
                "88\r\n8 3 4 3 1 17 5 10 18 12 9 12 4 6 19 14 9 10 10 8 15 11 18 3 11 4 10 11 7 9 14 7 13 2 8 2 15 2 8 16 7 1 9 1 11 13 13 15 8 9 4 2 13 12 12 11 1 5 20 19 13 15 6 6 11 20 14 18 11 20 20 13 8 4 17 12 17 4 13 14 1 20 19 5 7 3 19 16\r\n33\r\n7137 685 2583 6751 2104 2596 2329 9948 7961 9545 1797 6507 9241 3844 5657 1887 225 7310 1165 6335 5729 5179 8166 9294 3281 8037 1063 6711 8103 7461 4226 2894 9085\r\n",
                "61832\r\n"
            ],
            [
                "46\r\n11 6 8 8 11 8 2 8 17 3 16 1 9 12 18 2 2 5 17 19 3 9 8 19 2 4 2 15 2 11 13 13 8 6 10 12 7 7 17 15 10 19 7 7 19 6\r\n71\r\n6715 8201 9324 276 8441 2378 4829 9303 5721 3895 8193 7725 1246 8845 6863 2897 5001 5055 2745 596 9108 4313 1108 982 6483 7256 4313 8981 9026 9885 2433 2009 8441 7441 9044 6969 2065 6721 424 5478 9128 5921 11 6201 3681 4876 3369 6205 4865 8201 9751 371 2881 7995 641 5841 3595 6041 2403 1361 5121 3801 8031 7909 3809 7741 1026 9633 8711 1907 6363\r\n",
                "129008\r\n"
            ],
            [
                "18\r\n16 16 20 12 13 10 14 15 4 5 6 8 4 11 12 11 16 7\r\n15\r\n371 2453 905 1366 6471 4331 4106 2570 4647 1648 7911 2147 1273 6437 3393\r\n",
                "38578\r\n"
            ],
            [
                "2\r\n12 4\r\n28\r\n5366 5346 1951 3303 1613 5826 8035 7079 7633 6155 9811 9761 3207 4293 3551 5245 7891 4463 3981 2216 3881 1751 4495 96 671 1393 1339 4241\r\n",
                "89345\r\n"
            ],
            [
                "57\r\n3 13 20 17 18 18 17 2 17 8 20 2 11 12 11 14 4 20 9 20 14 19 20 4 4 8 8 18 17 16 18 10 4 7 9 8 10 8 20 4 11 8 12 16 16 4 11 12 16 1 6 14 11 12 19 8 20\r\n7\r\n5267 7981 1697 826 6889 1949 2413\r\n",
                "11220\r\n"
            ],
            [
                "48\r\n14 2 5 3 10 10 5 6 14 8 19 13 4 4 3 13 18 19 9 16 3 1 14 9 13 10 13 4 12 11 8 2 18 20 14 11 3 11 18 11 4 2 7 2 18 19 2 8\r\n70\r\n9497 5103 1001 2399 5701 4053 3557 8481 1736 4139 5829 1107 6461 4089 5936 7961 6017 1416 1191 4635 4288 5605 8857 1822 71 1435 2837 5523 6993 2404 2840 8251 765 5678 7834 8595 3091 7073 8673 2299 2685 7729 8017 3171 9155 431 3773 7927 671 4063 1123 5384 2721 7901 2315 5199 8081 7321 8196 2887 9384 56 7501 1931 4769 2055 7489 3681 6321 8489\r\n",
                "115395\r\n"
            ],
            [
                "1\r\n1\r\n1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "1\r\n2\r\n1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "1\r\n1\r\n3\r\n3 1 1\r\n",
                "3\r\n"
            ]
        ]
    }
]