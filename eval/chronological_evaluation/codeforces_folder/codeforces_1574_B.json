[
    {
        "name": "Combinatorics Homework",
        "description": "You are given four integer values \n    a\n, \n    b\n, \n    c\n and \n    m\n. Check\nif there exists a string that contains: \n    a\n letters 'A'; \n    b\n letters\n'B'; \n    c\n letters 'C'; no other letters; exactly \n    m\n pairs of adjacent\nequal letters (exactly \n    m\n such positions \n    i\n that the \n    i\n-th\nletter is equal to the \n    (i+1)\n-th one). Input The first line contains a\nsingle integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of testcases.\nEach of the next \n    t\n lines contains the description of the testcase \u2014 four\nintegers \n    a\n, \n    b\n, \n    c\n and \n    m\n (\n    1 \n    \u2264 a, b, c \n    \u2264\n    10^8\n; \n    0 \n    \u2264 m \n    \u2264 10^8\n). Output For each testcase print \"YES\" if\nthere exists a string that satisfies all the requirements. Print \"NO\" if there\nare no such strings. You may print every letter in any case you want (so, for\nexample, the strings yEs, yes, Yes and YES will all be recognized as positive\nanswer). Example Input 3 2 2 1 0 1 1 1 1 1 2 3 2 Output YES NO YES Note In the\nfirst testcase strings \"ABCAB\" or \"BCABA\" satisfy the requirements. There\nexist other possible strings. In the second testcase there's no way to put\nadjacent equal letters if there's no letter that appears at least twice. In\nthe third testcase string \"CABBCC\" satisfies the requirements. There exist\nother possible strings.\n\n",
        "cf_contest_id": 1574,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2 2 1 0\r\n1 1 1 1\r\n1 2 3 2\r\n",
                "YES\r\nNO \r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n23 1 2 1\r\n1 1 1 46\r\n",
                "NO \r\nNO \r\n"
            ],
            [
                "1\r\n1 1 1 46\r\n",
                "NO \r\n"
            ],
            [
                "1\r\n1 2 2 114514\r\n",
                "NO \r\n"
            ],
            [
                "1\r\n114514 1 1 1919810\r\n",
                "NO \r\n"
            ],
            [
                "1\r\n1 1 1 1919810\r\n",
                "NO \r\n"
            ]
        ]
    }
]