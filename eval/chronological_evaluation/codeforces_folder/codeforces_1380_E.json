[
    {
        "name": "Merging Towers",
        "description": "You have a set of \n    n\n discs, the \n    i\n-th disc has radius \n    i\n.\nInitially, these discs are split among \n    m\n towers: each tower contains at\nleast one disc, and the discs in each tower are sorted in descending order of\ntheir radii from bottom to top. You would like to assemble one tower\ncontaining all of those discs. To do so, you may choose two different towers\n\n    i\n and \n    j\n (each containing at least one disc), take several\n(possibly all) top discs from the tower \n    i\n and put them on top of the\ntower \n    j\n in the same order, as long as the top disc of tower \n    j\n is\nbigger than each of the discs you move. You may perform this operation any\nnumber of times. For example, if you have two towers containing discs \n    [6,\n    4, 2, 1]\n and \n    [8, 7, 5, 3]\n (in order from bottom to top), there are\nonly two possible operations: move disc \n    1\n from the first tower to the\nsecond tower, so the towers are \n    [6, 4, 2]\n and \n    [8, 7, 5, 3, 1]\n;\nmove discs \n    [2, 1]\n from the first tower to the second tower, so the\ntowers are \n    [6, 4]\n and \n    [8, 7, 5, 3, 2, 1]\n. Let the difficulty of\nsome set of towers be the minimum number of operations required to assemble\none tower containing all of the discs. For example, the difficulty of the set\nof towers \n    [[3, 1], [2]]\n is \n    2\n: you may move the disc \n    1\n to the\nsecond tower, and then move both discs from the second tower to the first\ntower. You are given \n    m - 1\n queries. Each query is denoted by two numbers\n\n    a_i\n and \n    b_i\n, and means \"merge the towers \n    a_i\n and \n    b_i\n\"\n(that is, take all discs from these two towers and assemble a new tower\ncontaining all of them in descending order of their radii from top to bottom).\nThe resulting tower gets index \n    a_i\n. For each \n    k \n    \u2208 [0, m - 1]\n,\ncalculate the difficulty of the set of towers after the first \n    k\n queries\nare performed. Input The first line of the input contains two integers \n    n\n\nand \n    m\n (\n    2 \n    \u2264 m \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of\ndiscs and the number of towers, respectively. The second line contains \n    n\n\nintegers \n    t_1\n, \n    t_2\n, ..., \n    t_n\n (\n    1 \n    \u2264 t_i \n    \u2264 m\n),\nwhere \n    t_i\n is the index of the tower disc \n    i\n belongs to. Each value\nfrom \n    1\n to \n    m\n appears in this sequence at least once. Then \n    m -\n    1\n lines follow, denoting the queries. Each query is represented by two\nintegers \n    a_i\n and \n    b_i\n (\n    1 \n    \u2264 a_i, b_i \n    \u2264 m\n, \n    a_i \n    \n    b_i\n), meaning that, during the \n    i\n-th query, the towers with indices\n\n    a_i\n and \n    b_i\n are merged (\n    a_i\n and \n    b_i\n are chosen in such\na way that these towers exist before the \n    i\n-th query). Output Print\n\n    m\n integers. The \n    k\n-th integer (\n    0\n-indexed) should be equal to\nthe difficulty of the set of towers after the first \n    k\n queries are\nperformed. Example Input 7 4 1 2 3 3 1 4 3 3 1 2 3 2 4 Output 5 4 2 0 Note The\ntowers in the example are: before the queries: \n    [[5, 1], [2], [7, 4, 3],\n    [6]]\n; after the first query: \n    [[2], [7, 5, 4, 3, 1], [6]]\n; after the\nsecond query: \n    [[7, 5, 4, 3, 2, 1], [6]]\n; after the third query, there is\nonly one tower: \n    [7, 6, 5, 4, 3, 2, 1]\n.\n\n",
        "cf_contest_id": 1380,
        "cf_index": "E",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dsu",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "7 4\r\n1 2 3 3 1 4 3\r\n3 1\r\n2 3\r\n2 4\r\n",
                "5\r\n4\r\n2\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 5\r\n3 1 5 3 1 5 1 2 4 2\r\n4 5\r\n4 3\r\n4 2\r\n4 1\r\n",
                "9\r\n9\r\n8\r\n6\r\n0\r\n"
            ],
            [
                "10 10\r\n2 10 8 7 9 3 4 6 5 1\r\n10 4\r\n10 1\r\n10 6\r\n10 8\r\n10 2\r\n10 9\r\n10 7\r\n10 3\r\n10 5\r\n",
                "9\r\n9\r\n9\r\n8\r\n7\r\n6\r\n6\r\n4\r\n2\r\n0\r\n"
            ],
            [
                "2 2\r\n1 2\r\n2 1\r\n",
                "1\r\n0\r\n"
            ]
        ]
    }
]