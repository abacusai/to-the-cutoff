[
    {
        "name": "Misha and Apples",
        "description": "Schoolboy Misha got tired of doing sports programming, so he decided to quit\neverything and go to the magical forest to sell magic apples. His friend Danya\ncame to the magical forest to visit Misha. What was his surprise when he found\nout that Misha found a lot of friends there, the same former sports\nprogrammers. And all of them, like Misha, have their own shop where they sell\nmagic apples. To support his friends, who have changed their lives so\ndrastically, he decided to buy up their entire assortment. The buying process\nworks as follows: in total there are \n    n\n stalls, numbered with integers\nfrom \n    1\n to \n    n\n, and \n    m\n kinds of magic apples, numbered with\nintegers from \n    1\n to \n    m\n. Each shop sells some number of kinds of\napples. Danya visits all the shops in order of increasing number, starting\nwith the first one. Upon entering the shop he buys one magic apple of each\nkind sold in that shop and puts them in his backpack. However, magical apples\nwouldn't be magical if they were all right. The point is that when two apples\nof the same type end up together in the backpack, all of the apples in it\nmagically disappear. Importantly, the disappearance happens after Danya has\nput the apples in the backpack and left the shop. Upon returning home, Danya\nrealized that somewhere in the forest he had managed to lose his backpack.\nUnfortunately, for some shops Danya had forgotten what assortment of apples\nthere was. Remembering only for some shops, what kinds of magical apples were\nsold in them, he wants to know what is the maximum number of apples he could\nhave in his backpack after all his purchases at best. Input Each test consists\nof multiple test cases. The first line contains a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 2 \n    \u00b7 10^5\n) \u2014the number of test cases. The description of\ntest cases follows. The first line contains two integers \n    n\n and \n    m\n\n(\n    1 \n    \u2264 n, m \n    \u2264 2 \n    \u00b7 10^5\n) \u2014the number of stalls and kinds of\napples. Each of the following \n    n\n lines describes the assortment of the\nnext stall in the format described below. Each line starts with an integer\n\n    k_i\n (\n    0 \n    \u2264 k_i \n    \u2264 2 \n    \u00b7 10^5\n). This is followed by\n\n    k_i\n of different integers \n    a_ij\n (\n    1 \n    \u2264 a_ij\n    \u2264 m\n)\n\u2014the kinds of apples sold in the \n    i\n-th stall. If \n    k_i = 0\n, then\nDanya does not remember what assortment was in that shop, and the set of apple\nkinds can be anything (including empty). It is guaranteed that the sum of all\n\n    k_i\n over all test cases does not exceed \n    2 \n    \u00b7 10^5\n and the sum\nof \n    n\n over all test cases does not exceed \n    2 \n    \u00b7 10^5\n Output For\neach test case, output a single integer \u2014 the maximum number of apples that\ncould be in Dani's backpack after visiting all the shops at best. Example\nInput 4 3 4 2 1 2 2 4 1 2 1 2 4 4 2 1 2 2 3 4 0 1 1 2 5 0 0 5 3 0 3 1 2 3 2 3\n1 0 1 3 Output 2 1 5 3 Note In the first test case, Danya remembers all the\nshops, so the process will be deterministic. He will take two apples at the\nfirst shop and two more at the second, but after he puts them in his backpack,\nthey will disappear. So at the end there will only be \n    2\n apples left,\nwhich he will take at the third shop. In the second test case, if the third\nshop is empty, then after visiting the fourth shop all the apples will\ndisappear. In any other case the apples will disappear after the third shop,\nand in the fourth shop Dan can take one apple, so the answer is \n    1\n. In\nthe third test case, the first shop may sell all kinds of apples, and the\nsecond shop may sell nothing. Then all \n    5\n apples will be left at the end.\n\n",
        "cf_contest_id": 1819,
        "cf_index": "D",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "dp",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3 4\r\n2 1 2\r\n2 4 1\r\n2 1 2\r\n4 4\r\n2 1 2\r\n2 3 4\r\n0\r\n1 1\r\n2 5\r\n0\r\n0\r\n5 3\r\n0\r\n3 1 2 3\r\n2 3 1\r\n0\r\n1 3\r\n",
                "2\r\n1\r\n5\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 1\r\n1 1\r\n1 200000\r\n0\r\n",
                "1\r\n200000\r\n"
            ]
        ]
    }
]