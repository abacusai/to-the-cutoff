[
    {
        "name": "Arthur and Table",
        "description": "Arthur has bought a beautiful big table into his new flat. When he came home,\nArthur noticed that the new table is unstable. In total the table Arthur\nbought has n legs, the length of the i-th leg is li. Arthur decided to make\nthe table stable and remove some legs. For each of them Arthur determined\nnumber di \u2014 the amount of energy that he spends to remove the i-th leg. A\ntable with k legs is assumed to be stable if there are more than half legs of\nthe maximum length. For example, to make a table with 5 legs stable, you need\nto make sure it has at least three (out of these five) legs of the maximum\nlength. Also, a table with one leg is always stable and a table with two legs\nis stable if and only if they have the same lengths. Your task is to help\nArthur and count the minimum number of energy units Arthur should spend on\nmaking the table stable. Input The first line of the input contains integer n\n(1 \u2264 n \u2264 10^5) \u2014 the initial number of legs in the table Arthur bought. The\nsecond line of the input contains a sequence of n integers li (1 \u2264 li \u2264 10^5),\nwhere li is equal to the length of the i-th leg of the table. The third line\nof the input contains a sequence of n integers di (1 \u2264 di \u2264 200), where di is\nthe number of energy units that Arthur spends on removing the i-th leg off the\ntable. Output Print a single integer \u2014 the minimum number of energy units that\nArthur needs to spend in order to make the table stable. Examples Input 2 1 5\n3 2 Output 2 Input 3 2 4 4 1 1 1 Output 0 Input 6 2 2 1 1 3 3 4 3 5 5 2 1\nOutput 8\n\n",
        "cf_contest_id": 557,
        "cf_index": "C",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "dp",
            "greedy",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n1 5\r\n3 2\r\n",
                "2\r\n"
            ],
            [
                "3\r\n2 4 4\r\n1 1 1\r\n",
                "0\r\n"
            ],
            [
                "6\r\n2 2 1 1 3 3\r\n4 3 5 5 2 1\r\n",
                "8\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n20 1 15 17 11 2 15 3 16 3\r\n129 114 183 94 169 16 18 104 49 146\r\n",
                "652\r\n"
            ],
            [
                "10\r\n15 16 19 5 14 19 6 17 7 19\r\n140 183 186 195 67 25 70 56 54 132\r\n",
                "387\r\n"
            ],
            [
                "20\r\n24 15 7 18 6 18 11 22 18 20 28 8 23 17 22 22 23 23 30 23\r\n24 137 173 189 43 164 2 11 142 153 16 200 53 58 150 199 169 172 38 78\r\n",
                "1111\r\n"
            ],
            [
                "30\r\n20 27 26 17 29 9 25 13 6 21 15 1 14 22 26 2 15 18 20 23 27 9 15 29 11 2 19 23 14 12\r\n133 199 22 151 9 134 196 119 197 189 117 84 156 6 61 195 98 197 145 75 142 85 187 24 159 3 60 138 156 161\r\n",
                "2804\r\n"
            ],
            [
                "5\r\n1 1 2 2 3\r\n2 2 2 2 3\r\n",
                "5\r\n"
            ],
            [
                "5\r\n1 1 2 2 3\r\n2 2 2 2 7\r\n",
                "8\r\n"
            ],
            [
                "10\r\n1 1 3 4 5 6 7 8 9 10\r\n10 10 4 2 3 4 2 2 2 2\r\n",
                "21\r\n"
            ],
            [
                "1\r\n5\r\n4\r\n",
                "0\r\n"
            ],
            [
                "2\r\n3 3\r\n4 5\r\n",
                "0\r\n"
            ],
            [
                "2\r\n4 5\r\n3 3\r\n",
                "3\r\n"
            ],
            [
                "3\r\n3 3 3\r\n1 2 3\r\n",
                "0\r\n"
            ],
            [
                "3\r\n1 2 3\r\n3 3 3\r\n",
                "6\r\n"
            ]
        ]
    }
]