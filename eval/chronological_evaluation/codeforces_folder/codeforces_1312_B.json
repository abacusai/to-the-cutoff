[
    {
        "name": "Bogosort",
        "description": "You are given an array \n    a_1, a_2, \n    \u2026 , a_n\n. Array is good if for\neach pair of indexes \n    i < j\n the condition \n    j - a_j \n     i - a_i\n\nholds. Can you shuffle this array so that it becomes good? To shuffle an array\nmeans to reorder its elements arbitrarily (leaving the initial order is also\nan option). For example, if \n    a = [1, 1, 3, 5]\n, then shuffled arrays\n\n    [1, 3, 5, 1]\n, \n    [3, 5, 1, 1]\n and \n    [5, 3, 1, 1]\n are good, but\nshuffled arrays \n    [3, 1, 5, 1]\n, \n    [1, 1, 3, 5]\n and \n    [1, 1, 5, 3]\n\naren't. It's guaranteed that it's always possible to shuffle an array to meet\nthis condition. Input The first line contains one integer \n    t\n (\n    1 \n    \u2264\n    t \n    \u2264 100\n) \u2014 the number of test cases. The first line of each test case\ncontains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 100\n) \u2014 the length of array\n\n    a\n. The second line of each test case contains \n    n\n integers \n    a_1,\n    a_2, \n    \u2026 , a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 100\n). Output For each test case\nprint the shuffled version of the array \n    a\n which is good. Example Input 3\n1 7 4 1 1 3 5 6 3 2 1 5 6 4 Output 7 1 5 1 3 2 4 6 1 3 5\n\n",
        "cf_contest_id": 1312,
        "cf_index": "B",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1\r\n7\r\n4\r\n1 1 3 5\r\n6\r\n3 2 1 5 6 4\r\n",
                "7\r\n5 3 1 1\r\n6 5 4 3 2 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n3\r\n4 2 1\r\n",
                "4 2 1\r\n"
            ],
            [
                "1\r\n9\r\n2 4 3 5 3 1 2 3 69\r\n",
                "69 5 4 3 3 3 2 2 1\r\n"
            ],
            [
                "1\r\n8\r\n1 2 3 4 5 6 7 8\r\n",
                "8 7 6 5 4 3 2 1\r\n"
            ]
        ]
    }
]