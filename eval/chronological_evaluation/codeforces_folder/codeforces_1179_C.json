[
    {
        "name": "Serge and Dining Room",
        "description": "Serge came to the school dining room and discovered that there is a big queue\nhere. There are \n    m\n pupils in the queue. He's not sure now if he wants to\nwait until the queue will clear, so he wants to know which dish he will\nreceive if he does. As Serge is very tired, he asks you to compute it instead\nof him. Initially there are \n    n\n dishes with costs \n    a_1, a_2, \n    \u2026,\n    a_n\n. As you already know, there are the queue of \n    m\n pupils who have\n\n    b_1, \n    \u2026, b_m\n togrogs respectively (pupils are enumerated by queue\norder, i.e the first pupil in the queue has \n    b_1\n togrogs and the last one\nhas \n    b_m\n togrogs) Pupils think that the most expensive dish is the most\ndelicious one, so every pupil just buys the most expensive dish for which he\nhas money (every dish has a single copy, so when a pupil has bought it nobody\ncan buy it later), and if a pupil doesn't have money for any dish, he just\nleaves the queue (so brutal capitalism...) But money isn't a problem at all\nfor Serge, so Serge is buying the most expensive dish if there is at least one\nremaining. Moreover, Serge's school has a very unstable economic situation and\nthe costs of some dishes or number of togrogs of some pupils can change. More\nformally, you must process \n    q\n queries: change \n    a_i\n to \n    x\n. It\nmeans that the price of the \n    i\n-th dish becomes \n    x\n togrogs. change\n\n    b_i\n to \n    x\n. It means that the \n    i\n-th pupil in the queue has\n\n    x\n togrogs now. Nobody leaves the queue during those queries because a\nsaleswoman is late. After every query, you must tell Serge price of the dish\nwhich he will buy if he has waited until the queue is clear, or \n    -1\n if\nthere are no dishes at this point, according to rules described above. Input\nThe first line contains integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264\n    300\n     000\n) \u2014 number of dishes and pupils respectively. The second line\ncontains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i\n    \n    \u2264 10^6\n) \u2014 elements of array \n    a\n. The third line contains \n    m\n\nintegers \n    b_1, b_2, \n    \u2026, b_m\n (\n    1 \n    \u2264 b_i \n    \u2264 10^6\n) \u2014\nelements of array \n    b\n. The fourth line conatins integer \n    q\n (\n    1\n    \n    \u2264 q \n    \u2264 300\n     000\n) \u2014 number of queries. Each of the following\n\n    q\n lines contains as follows: if a query changes price of some dish, it\ncontains \n    1\n, and two integers \n    i\n and \n    x\n (\n    1 \n    \u2264 i \n    \u2264\n    n\n, \n    1 \n    \u2264 x \n    \u2264 10^6\n), what means \n    a_i\n becomes \n    x\n.\nif a query changes number of togrogs of some pupil, it contains \n    2\n, and\ntwo integers \n    i\n and \n    x\n (\n    1 \n    \u2264 i \n    \u2264 m\n, \n    1 \n    \u2264 x\n    \n    \u2264 10^6\n), what means \n    b_i\n becomes \n    x\n. Output For each of\n\n    q\n queries prints the answer as the statement describes, the answer of\nthe \n    i\n-th query in the \n    i\n-th line (the price of the dish which Serge\nwill buy or \n    -1\n if nothing remains) Examples Input 1 1 1 1 1 1 1 100\nOutput 100 Input 1 1 1 1 1 2 1 100 Output -1 Input 4 6 1 8 2 4 3 3 6 1 5 2 3 1\n1 1 2 5 10 1 1 6 Output 8 -1 4 Note In the first sample after the first query,\nthere is one dish with price \n    100\n togrogs and one pupil with one togrog,\nso Serge will buy the dish with price \n    100\n togrogs. In the second sample\nafter the first query, there is one dish with price one togrog and one pupil\nwith \n    100\n togrogs, so Serge will get nothing. In the third sample after\nthe first query, nobody can buy the dish with price \n    8\n, so Serge will\ntake it. After the second query, all dishes will be bought, after the third\none the third and fifth pupils will by the first and the second dishes\nrespectively and nobody will by the fourth one.\n\n",
        "cf_contest_id": 1179,
        "cf_index": "C",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "graph matchings",
            "greedy",
            "implementation",
            "math",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1 1\r\n1\r\n1\r\n1\r\n1 1 100\r\n",
                "100\r\n"
            ],
            [
                "1 1\r\n1\r\n1\r\n1\r\n2 1 100\r\n",
                "-1\r\n"
            ],
            [
                "4 6\r\n1 8 2 4\r\n3 3 6 1 5 2\r\n3\r\n1 1 1\r\n2 5 10\r\n1 1 6\r\n",
                "8\r\n-1\r\n4\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 5\r\n3 2 8\r\n1 2 8 1 1\r\n4\r\n1 3 3\r\n1 2 2\r\n2 2 10\r\n1 1 5\r\n",
                "3\r\n3\r\n2\r\n2\r\n"
            ],
            [
                "4 1\r\n7 6 1 1\r\n3\r\n3\r\n2 1 9\r\n2 1 10\r\n2 1 6\r\n",
                "6\r\n6\r\n7\r\n"
            ],
            [
                "5 1\r\n8 4 8 7 3\r\n9\r\n5\r\n2 1 3\r\n1 5 1\r\n2 1 8\r\n2 1 7\r\n2 1 3\r\n",
                "8\r\n8\r\n8\r\n8\r\n8\r\n"
            ]
        ]
    }
]