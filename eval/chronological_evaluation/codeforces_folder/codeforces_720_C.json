[
    {
        "name": "Homework",
        "description": "Today Peter has got an additional homework for tomorrow. The teacher has given\nthree integers to him: n, m and k, and asked him to mark one or more squares\non a square grid of size n \u00d7 m. The marked squares must form a connected\nfigure, and there must be exactly k triples of marked squares that form an\nL-shaped tromino \u2014 all three squares are inside a 2 \u00d7 2 square. The set of\nsquares forms a connected figure if it is possible to get from any square to\nany other one if you are allowed to move from a square to any adjacent by a\ncommon side square. Peter cannot fulfill the task, so he asks you for help.\nHelp him to create such figure. Input Input data contains one or more test\ncases. The first line contains the number of test cases t (1 \u2264 t \u2264 100). Each\nof the following t test cases is described by a line that contains three\nintegers: n, m and k (3 \u2264 n, m, n \u00d7 m \u2264 10^5, 0 \u2264 k \u2264 10^9). The sum of values\nof n \u00d7 m for all tests in one input data doesn't exceed 10^5. Output For each\ntest case print the answer. If it is possible to create such figure, print n\nlines, m characters each, use asterisk '*' to denote the marked square, and\ndot '.' to denote the unmarked one. If there is no solution, print -1. Print\nempty line between test cases. Example Input 3 3 3 4 3 3 5 3 3 3 Output .*.\n*** .*. **. **. *.. .*. *** *..\n\n",
        "cf_contest_id": 720,
        "cf_index": "C",
        "cf_rating": 3100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3 3 4\r\n3 3 5\r\n3 3 3\r\n",
                "***\r\n*.*\r\n***\r\n\r\n***\r\n**.\r\n...\r\n\r\n***\r\n*.*\r\n**.\r\n\r\n"
            ]
        ],
        "private_cases": []
    }
]