[
    {
        "name": "Likes",
        "description": "Nikita recently held a very controversial round, after which his contribution\nchanged very quickly. The announcement hung on the main page for \n    n\n\nseconds. In the \n    i\nth second \n    |a_i|\nth person either liked or removed\nthe like (Nikita was lucky in this task and there are no dislikes). If \n    a_i\n    > 0\n, then the \n    a_i\nth person put a like. If \n    a_i < 0\n, then the\nperson \n    -a_i\n removed the like. Each person put and removed the like no\nmore than once. A person could not remove a like if he had not put it before.\nSince Nikita's contribution became very bad after the round, he wanted to\nanalyze how his contribution changed while the announcement was on the main\npage. He turned to the creator of the platform with a request to give him the\nsequence \n    a_1, a_2, \n    \u2026, a_n\n. But due to the imperfection of the\nplatform, the sequence \n    a\n was shuffled. You are given a shuffled sequence\nof \n    a\n that describes user activity. You need to tell for each moment from\n\n    1\n to \n    n\n what the maximum and minimum number of likes could be on\nthe post at that moment. Input The first line of input data contains one\nnumber \n    t\n (\n    1 \n    \u2a7d t \n    \u2a7d 1000\n) \u2014 the number of test\ncases. In the first line of test case, one number is given \n    n\n (\n    1\n    \n    \u2a7d n \n    \u2a7d 100\n) \u2014 the number of seconds during which\nNikita's announcement hung on the main page. The next line contains \n    n\n\nnumbers \n    b_1, b_2, b_3, \n    \u2026, b_n\n (\n    1 \n    \u2a7d |b_i| \n    \u2a7d\n    n\n) \u2014 mixed array \n    a\n. It is guaranteed that there exists such a\npermutation of \n    b\n that it is a correct sequence of events described in\nthe condition. It is guaranteed that the sum of \n    n\n for all input test\ncases does not exceed \n    10^4\n. Output For each test case, output two lines,\neach of which contains \n    n\n numbers. In the first line, for each test case,\noutput the maximum number of likes that Nikita could have at the announcement\nat the \n    i\nth second. In the second line, for each test case, output the\nminimum number of likes that Nikita could have at the announcement at the\n\n    i\nth second. Example Input 5 3 1 2 -2 2 1 -1 6 4 3 -1 2 1 -2 5 4 2 -2 1 3\n7 -1 6 -4 3 2 4 1 Output 1 2 1 1 0 1 1 0 1 0 1 2 3 4 3 2 1 0 1 0 1 2 1 2 3 4 3\n1 0 1 2 3 1 2 3 4 5 4 3 1 0 1 0 1 2 3 Note In the first test case, the maximum\nvalues are reached with the following permutation: \n    1, 2, -2\n. And the\nminimum values for such: \n    2, -2, 1\n. In the third test case, all maximal\nvalues are reached with the following permutation: \n    4, 2, 3, 1, -1, -2\n.\nAnd the minimum values for the next permutation: \n    2, -2, 1, -1, 3, 4\n.\n\n",
        "cf_contest_id": 1802,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3\r\n1 2 -2\r\n2\r\n1 -1\r\n6\r\n4 3 -1 2 1 -2\r\n5\r\n4 2 -2 1 3\r\n7\r\n-1 6 -4 3 2 4 1\r\n",
                "1 2 1\r\n1 0 1\r\n1 0\r\n1 0\r\n1 2 3 4 3 2\r\n1 0 1 0 1 2\r\n1 2 3 4 3\r\n1 0 1 2 3\r\n1 2 3 4 5 4 3\r\n1 0 1 0 1 2 3\r\n"
            ]
        ],
        "private_cases": []
    }
]