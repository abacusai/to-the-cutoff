[
    {
        "name": "Fedor and coupons",
        "description": "All our characters have hobbies. The same is true for Fedor. He enjoys\nshopping in the neighboring supermarket. The goods in the supermarket have\nunique integer ids. Also, for every integer there is a product with id equal\nto this integer. Fedor has n discount coupons, the i-th of them can be used\nwith products with ids ranging from li to ri, inclusive. Today Fedor wants to\ntake exactly k coupons with him. Fedor wants to choose the k coupons in such a\nway that the number of such products x that all coupons can be used with this\nproduct x is as large as possible (for better understanding, see examples).\nFedor wants to save his time as well, so he asks you to choose coupons for\nhim. Help Fedor! Input The first line contains two integers n and k (1 \u2264 k \u2264 n\n\u2264 3\u00b710^5) \u2014 the number of coupons Fedor has, and the number of coupons he\nwants to choose. Each of the next n lines contains two integers li and ri ( -\n10^9 \u2264 li \u2264 ri \u2264 10^9) \u2014 the description of the i-th coupon. The coupons can\nbe equal. Output In the first line print single integer \u2014 the maximum number\nof products with which all the chosen coupons can be used. The products with\nwhich at least one coupon cannot be used shouldn't be counted. In the second\nline print k distinct integers p1, p2, ..., pk (1 \u2264 pi \u2264 n) \u2014 the ids of the\ncoupons which Fedor should choose. If there are multiple answers, print any of\nthem. Examples Input 4 2 1 100 40 70 120 130 125 180 Output 31 1 2 Input 3 2 1\n12 15 20 25 30 Output 0 1 2 Input 5 2 1 10 5 15 14 50 30 70 99 100 Output 21 3\n4 Note In the first example if we take the first two coupons then all the\nproducts with ids in range [40, 70] can be bought with both coupons. There are\n31 products in total. In the second example, no product can be bought with two\ncoupons, that is why the answer is 0. Fedor can choose any two coupons in this\nexample.\n\n",
        "cf_contest_id": 754,
        "cf_index": "D",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 2\r\n1 100\r\n40 70\r\n120 130\r\n125 180\r\n",
                "31\r\n1 2\r\n"
            ],
            [
                "3 2\r\n1 12\r\n15 20\r\n25 30\r\n",
                "0\r\n1 2\r\n"
            ],
            [
                "5 2\r\n1 10\r\n5 15\r\n14 50\r\n30 70\r\n99 100\r\n",
                "21\r\n3 4\r\n"
            ]
        ],
        "private_cases": [
            [
                "7 6\r\n-8 6\r\n7 9\r\n-10 -5\r\n-6 10\r\n-7 -3\r\n5 8\r\n4 10\r\n",
                "0\r\n1 2 3 4 5 6\r\n"
            ],
            [
                "9 6\r\n-7 -3\r\n-3 10\r\n-6 1\r\n-1 8\r\n-9 4\r\n-7 -6\r\n-5 -3\r\n-10 -2\r\n3 4\r\n",
                "1\r\n1 2 3 5 7 8\r\n"
            ],
            [
                "7 7\r\n9 10\r\n-5 3\r\n-6 2\r\n1 6\r\n-9 6\r\n-10 7\r\n-7 -5\r\n",
                "0\r\n1 2 3 4 5 6 7\r\n"
            ],
            [
                "23 2\r\n-629722518 -626148345\r\n739975524 825702590\r\n-360913153 -208398929\r\n76588954 101603025\r\n-723230356 -650106339\r\n-117490984 -101920679\r\n-39187628 -2520915\r\n717852164 720343632\r\n-611281114 -579708833\r\n-141791522 -122348148\r\n605078929 699430996\r\n-873386085 -820238799\r\n-922404067 -873522961\r\n7572046 13337057\r\n975081176 977171682\r\n901338407 964254238\r\n325388219 346712972\r\n505189756 516497863\r\n-425326983 -422098946\r\n520670681 522544433\r\n-410872616 -367919621\r\n359488350 447471156\r\n-566203447 -488202136\r\n",
                "0\r\n1 2\r\n"
            ],
            [
                "24 21\r\n240694945 246896662\r\n240694930 246896647\r\n240695065 246896782\r\n240695050 246896767\r\n240695080 246896797\r\n240694960 246896677\r\n240694975 246896692\r\n240694825 246896542\r\n240694900 246896617\r\n240694915 246896632\r\n240694885 246896602\r\n240694855 246896572\r\n240694870 246896587\r\n240694795 246896512\r\n240695095 246896812\r\n240695125 246896842\r\n240695005 246896722\r\n240694990 246896707\r\n240695140 246896857\r\n240695020 246896737\r\n240695035 246896752\r\n240694840 246896557\r\n240694810 246896527\r\n240695110 246896827\r\n",
                "6201418\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 17 18 20 21 22 23\r\n"
            ],
            [
                "1 1\r\n2 2\r\n",
                "1\r\n1\r\n"
            ],
            [
                "1 1\r\n-1000000000 1000000000\r\n",
                "2000000001\r\n1\r\n"
            ],
            [
                "2 1\r\n-1000000000 -1000000000\r\n1000000000 1000000000\r\n",
                "1\r\n1\r\n"
            ],
            [
                "7 3\r\n3 3\r\n-6 -1\r\n6 7\r\n2 8\r\n3 10\r\n-8 0\r\n-3 10\r\n",
                "6\r\n4 5 7\r\n"
            ],
            [
                "5 4\r\n4 7\r\n-4 2\r\n-7 -7\r\n-5 -2\r\n-8 -8\r\n",
                "0\r\n1 2 3 4\r\n"
            ],
            [
                "7 7\r\n0 7\r\n9 9\r\n-10 -7\r\n5 8\r\n-10 4\r\n-7 0\r\n-3 5\r\n",
                "0\r\n1 2 3 4 5 6 7\r\n"
            ],
            [
                "9 2\r\n5 10\r\n-10 -10\r\n0 10\r\n-6 3\r\n-8 7\r\n6 10\r\n-8 1\r\n5 7\r\n2 2\r\n",
                "10\r\n5 7\r\n"
            ],
            [
                "9 5\r\n-2 1\r\n-6 9\r\n-7 -2\r\n5 7\r\n-10 -7\r\n-9 -2\r\n1 4\r\n-1 10\r\n4 8\r\n",
                "0\r\n1 2 3 4 5\r\n"
            ],
            [
                "54 7\r\n-98 -39\r\n14 60\r\n-23 -5\r\n58 75\r\n14 16\r\n-40 20\r\n-6 10\r\n11 60\r\n-47 54\r\n-71 -17\r\n-48 -25\r\n-87 -46\r\n-10 99\r\n-97 -88\r\n-14 94\r\n-25 29\r\n-96 -92\r\n68 75\r\n-75 2\r\n12 84\r\n-47 3\r\n-88 49\r\n-37 88\r\n-61 -25\r\n36 67\r\n30 54\r\n12 31\r\n-71 60\r\n-18 -15\r\n-61 -47\r\n-51 -41\r\n-67 51\r\n26 37\r\n18 94\r\n-67 52\r\n-16 56\r\n-5 26\r\n27 57\r\n36 91\r\n-61 61\r\n71 86\r\n27 73\r\n-57 -39\r\n54 71\r\n-16 14\r\n-97 81\r\n-32 49\r\n-18 50\r\n-63 93\r\n51 70\r\n8 66\r\n43 45\r\n-2 99\r\n11 98\r\n",
                "111\r\n32 35 40 46 49 22 28\r\n"
            ],
            [
                "52 18\r\n-50 54\r\n35 65\r\n67 82\r\n-87 -10\r\n-39 4\r\n-55 -18\r\n-27 90\r\n-42 73\r\n18 43\r\n70 85\r\n-85 -22\r\n-1 60\r\n-89 23\r\n-78 -75\r\n-14 69\r\n-69 50\r\n-93 74\r\n-10 45\r\n-81 -72\r\n-24 86\r\n-89 100\r\n25 70\r\n-65 -61\r\n-45 100\r\n-49 -23\r\n-74 -59\r\n-81 -15\r\n-58 47\r\n-65 -58\r\n-47 16\r\n-22 91\r\n-85 19\r\n-81 77\r\n79 87\r\n-31 88\r\n26 32\r\n11 90\r\n7 46\r\n64 83\r\n-51 -20\r\n-76 44\r\n-22 75\r\n45 84\r\n-98 46\r\n-20 78\r\n-88 -47\r\n-41 65\r\n2 93\r\n-66 69\r\n-73 94\r\n-85 -44\r\n-65 -23\r\n",
                "67\r\n1 7 8 16 17 20 21 24 28 31 33 35 41 42 44 47 49 50\r\n"
            ]
        ]
    }
]