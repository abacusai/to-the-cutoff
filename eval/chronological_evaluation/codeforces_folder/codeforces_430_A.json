[
    {
        "name": "Points and Segments (easy)",
        "description": "Iahub isn't well prepared on geometry problems, but he heard that this year\nthere will be a lot of geometry problems on the IOI selection camp. Scared,\nIahub locked himself in the basement and started thinking of new problems of\nthis kind. One of them is the following. Iahub wants to draw n distinct points\nand m segments on the OX axis. He can draw each point with either red or blue.\nThe drawing is good if and only if the following requirement is met: for each\nsegment [li, ri] consider all the red points belong to it (ri points), and all\nthe blue points belong to it (bi points); each segment i should satisfy the\ninequality |ri - bi| \u2264 1. Iahub thinks that point x belongs to segment [l, r],\nif inequality l \u2264 x \u2264 r holds. Iahub gives to you all coordinates of points\nand segments. Please, help him to find any good drawing. Input The first line\nof input contains two integers: n (1 \u2264 n \u2264 100) and m (1 \u2264 m \u2264 100). The next\nline contains n space-separated integers x1, x2, ..., xn (0 \u2264 xi \u2264 100) \u2014 the\ncoordinates of the points. The following m lines contain the descriptions of\nthe m segments. Each line contains two integers li and ri (0 \u2264 li \u2264 ri \u2264 100)\n\u2014 the borders of the i-th segment. It's guaranteed that all the points are\ndistinct. Output If there is no good drawing for a given test, output a single\ninteger -1. Otherwise output n integers, each integer must be 0 or 1. The i-th\nnumber denotes the color of the i-th point (0 is red, and 1 is blue). If there\nare multiple good drawings you can output any of them. Examples Input 3 3 3 7\n14 1 5 6 10 11 15 Output 0 0 0 Input 3 4 1 2 3 1 2 2 3 5 6 2 2 Output 1 0 1\n\n",
        "cf_contest_id": 430,
        "cf_index": "A",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\n3 7 14\r\n1 5\r\n6 10\r\n11 15\r\n",
                "0\r\n1\r\n0\r\n"
            ],
            [
                "3 4\r\n1 2 3\r\n1 2\r\n2 3\r\n5 6\r\n2 2\r\n",
                "0\r\n1\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 10\r\n3 4 2 6 1 9 0 5 8 7\r\n5 7\r\n2 6\r\n0 1\r\n5 6\r\n3 4\r\n2 5\r\n2 10\r\n4 6\r\n3 6\r\n3 7\r\n",
                "1\r\n0\r\n0\r\n0\r\n1\r\n1\r\n0\r\n1\r\n0\r\n1\r\n"
            ],
            [
                "3 3\r\n50 51 52\r\n1 5\r\n6 10\r\n11 15\r\n",
                "0\r\n1\r\n0\r\n"
            ],
            [
                "3 1\r\n1 2 3\r\n2 3\r\n",
                "0\r\n1\r\n0\r\n"
            ]
        ]
    }
]