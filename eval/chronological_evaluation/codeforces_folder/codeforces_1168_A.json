[
    {
        "name": "Increasing by Modulo",
        "description": "Toad Zitz has an array of integers, each integer is between \n    0\n and\n\n    m-1\n inclusive. The integers are \n    a_1, a_2, \n    \u2026, a_n\n. In one\noperation Zitz can choose an integer \n    k\n and \n    k\n indices \n    i_1, i_2,\n    \n    \u2026, i_k\n such that \n    1 \n    \u2264 i_1 < i_2 < \n    \u2026 < i_k \n    \u2264 n\n.\nHe should then change \n    a_i_j\n to \n    ((a_i_j+1) \n     m)\n for each\nchosen integer \n    i_j\n. The integer \n    m\n is fixed for all operations and\nindices. Here \n    x \n     y\n denotes the remainder of the division of\n\n    x\n by \n    y\n. Zitz wants to make his array non-decreasing with the\nminimum number of such operations. Find this minimum number of operations.\nInput The first line contains two integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n,\n    m \n    \u2264 300\n     000\n) \u2014 the number of integers in the array and the\nparameter \n    m\n. The next line contains \n    n\n space-separated integers\n\n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i < m\n) \u2014 the given array.\nOutput Output one integer: the minimum number of described operations Zitz\nneeds to make his array non-decreasing. If no operations required, print\n\n    0\n. It is easy to see that with enough operations Zitz can always make\nhis array non-decreasing. Examples Input 5 3 0 0 0 1 2 Output 0 Input 5 7 0 6\n1 3 2 Output 1 Note In the first example, the array is already non-decreasing,\nso the answer is \n    0\n. In the second example, you can choose \n    k=2\n,\n\n    i_1 = 2\n, \n    i_2 = 5\n, the array becomes \n    [0,0,1,3,3]\n. It is non-\ndecreasing, so the answer is \n    1\n.\n\n",
        "cf_contest_id": 1168,
        "cf_index": "A",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "greedy"
        ],
        "time_limit_seconds": 2.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 3\r\n0 0 0 1 2\r\n",
                "0\r\n"
            ],
            [
                "5 7\r\n0 6 1 3 2\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 10\r\n5 0 5 9 4 6 4 5 0 0\r\n",
                "6\r\n"
            ],
            [
                "4 6\r\n0 3 5 1\r\n",
                "3\r\n"
            ],
            [
                "6 4\r\n1 3 0 2 1 0\r\n",
                "2\r\n"
            ],
            [
                "10 1000\r\n981 824 688 537 969 72 39 734 929 718\r\n",
                "463\r\n"
            ],
            [
                "10 300000\r\n111862 91787 271781 182224 260248 142019 30716 102643 141870 19206\r\n",
                "208213\r\n"
            ],
            [
                "100 10\r\n8 4 4 9 0 7 9 5 1 1 2 3 7 1 8 4 8 8 6 0 8 7 8 3 7 0 6 4 8 4 2 7 0 0 3 8 4 4 2 0 0 4 7 2 4 7 9 1 3 3 6 2 9 6 0 6 3 5 6 5 5 3 0 0 8 7 1 4 2 4 1 3 9 7 9 0 6 6 7 4 2 3 7 1 7 3 5 1 4 3 7 5 7 5 0 5 1 9 0 9\r\n",
                "8\r\n"
            ],
            [
                "100 1\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n",
                "0\r\n"
            ],
            [
                "100 2\r\n1 1 0 1 0 1 0 0 0 1 0 1 0 0 1 1 1 1 1 0 1 1 1 1 1 1 0 0 0 1 1 0 1 0 0 0 0 0 1 1 1 1 1 0 0 0 0 1 1 1 1 0 1 0 0 1 0 0 1 0 1 0 1 1 1 0 1 1 0 1 1 0 1 0 0 0 1 0 1 1 0 1 1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 1 1 1\r\n",
                "1\r\n"
            ],
            [
                "100 1000\r\n980 755 745 448 424 691 210 545 942 979 555 783 425 942 495 741 487 514 752 434 187 874 372 617 414 505 659 445 81 397 243 986 441 587 31 350 831 801 194 103 723 166 108 182 252 846 328 905 639 690 738 638 986 340 559 626 572 808 442 410 179 549 880 153 449 99 434 945 163 687 173 797 999 274 975 626 778 456 407 261 988 43 25 391 937 856 54 110 884 937 940 205 338 250 903 244 424 871 979 810\r\n",
                "860\r\n"
            ],
            [
                "1 1\r\n0\r\n",
                "0\r\n"
            ],
            [
                "10 10\r\n1 2 3 4 5 6 7 8 9 0\r\n",
                "9\r\n"
            ],
            [
                "2 1\r\n0 0\r\n",
                "0\r\n"
            ],
            [
                "2 2\r\n0 1\r\n",
                "0\r\n"
            ],
            [
                "2 2\r\n1 0\r\n",
                "1\r\n"
            ]
        ]
    }
]