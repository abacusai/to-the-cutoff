[
    {
        "name": "Ezzat and Grid",
        "description": "Moamen was drawing a grid of \n    n\n rows and \n    10^9\n columns containing\nonly digits \n    0\n and \n    1\n. Ezzat noticed what Moamen was drawing and\nbecame interested in the minimum number of rows one needs to remove to make\nthe grid beautiful. A grid is beautiful if and only if for every two\nconsecutive rows there is at least one column containing \n    1\n in these two\nrows. Ezzat will give you the number of rows \n    n\n, and \n    m\n segments of\nthe grid that contain digits \n    1\n. Every segment is represented with three\nintegers \n    i\n, \n    l\n, and \n    r\n, where \n    i\n represents the row\nnumber, and \n    l\n and \n    r\n represent the first and the last column of the\nsegment in that row. For example, if \n    n = 3\n, \n    m = 6\n, and the\nsegments are \n    (1,1,1)\n, \n    (1,7,8)\n, \n    (2,7,7)\n, \n    (2,15,15)\n,\n\n    (3,1,1)\n, \n    (3,15,15)\n, then the grid is: Your task is to tell Ezzat\nthe minimum number of rows that should be removed to make the grid beautiful.\nInput The first line contains two integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n,\n    m \n    \u2264 3\n    \u00b710^5\n). Each of the next \n    m\n lines contains three\nintegers \n    i\n, \n    l\n, and \n    r\n (\n    1 \n    \u2264 i \n    \u2264 n\n, \n    1 \n    \u2264 l\n    \n    \u2264 r \n    \u2264 10^9\n). Each of these \n    m\n lines means that row number\n\n    i\n contains digits \n    1\n in columns from \n    l\n to \n    r\n, inclusive.\nNote that the segments may overlap. Output In the first line, print a single\ninteger \n    k\n \u2014 the minimum number of rows that should be removed. In the\nsecond line print \n    k\n distinct integers \n    r_1, r_2, \n    \u2026, r_k\n,\nrepresenting the rows that should be removed (\n    1 \n    \u2264 r_i \n    \u2264 n\n), in\nany order. If there are multiple answers, print any. Examples Input 3 6 1 1 1\n1 7 8 2 7 7 2 15 15 3 1 1 3 15 15 Output 0 Input 5 4 1 2 3 2 4 6 3 3 5 5 1 1\nOutput 3 2 4 5 Note In the first test case, the grid is the one explained in\nthe problem statement. The grid has the following properties: The \n    1\n-st\nrow and the \n    2\n-nd row have a common \n    1\n in the column \n    7\n. The\n\n    2\n-nd row and the \n    3\n-rd row have a common \n    1\n in the column\n\n    15\n. As a result, this grid is beautiful and we do not need to remove any\nrow.In the second test case, the given grid is as follows:\n\n",
        "cf_contest_id": 1557,
        "cf_index": "D",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp",
            "greedy"
        ],
        "time_limit_seconds": 2.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 6\r\n1 1 1\r\n1 7 8\r\n2 7 7\r\n2 15 15\r\n3 1 1\r\n3 15 15\r\n",
                "0\r\n"
            ],
            [
                "5 4\r\n1 2 3\r\n2 4 6\r\n3 3 5\r\n5 1 1\r\n",
                "3\r\n5 4 2 "
            ]
        ],
        "private_cases": [
            [
                "3 4\r\n1 2 3\r\n2 3 6\r\n3 4 8\r\n1 7 9\r\n",
                "0\r\n"
            ],
            [
                "64 19\r\n2 9775794 295412328\r\n34 22564262 484762546\r\n47 872839411 887635088\r\n49 83594633 817611693\r\n27 604327714 712536348\r\n26 533779349 604921540\r\n27 382068872 557699922\r\n52 2730152 842526047\r\n51 646434297 820428761\r\n2 733997272 815804831\r\n34 111665087 362220147\r\n37 110660604 635463204\r\n50 107786695 903716745\r\n63 539814017 621057900\r\n62 773918219 800449448\r\n42 845633131 939443202\r\n4 920809791 986989515\r\n27 714553514 720830618\r\n45 885332416 909303283\r\n",
                "55\r\n64 62 61 60 59 58 57 56 55 54 53 48 47 46 45 44 43 42 41 40 39 38 36 35 33 32 31 30 29 28 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 "
            ],
            [
                "2 2\r\n1 2 2\r\n2 1 1\r\n",
                "1\r\n1 "
            ],
            [
                "2 2\r\n2 2 2\r\n1 1 1\r\n",
                "1\r\n2 "
            ]
        ]
    }
]