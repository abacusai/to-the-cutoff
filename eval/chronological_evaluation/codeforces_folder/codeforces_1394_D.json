[
    {
        "name": "Boboniu and Jianghu",
        "description": "Since Boboniu finished building his Jianghu, he has been doing Kungfu on these\nmountains every day. Boboniu designs a map for his \n    n\n mountains. He uses\n\n    n-1\n roads to connect all \n    n\n mountains. Every pair of mountains is\nconnected via roads. For the \n    i\n-th mountain, Boboniu estimated the\ntiredness of doing Kungfu on the top of it as \n    t_i\n. He also estimated the\nheight of each mountain as \n    h_i\n. A path is a sequence of mountains\n\n    M\n such that for each \n    i\n (\n    1 \n    \u2264 i < |M|\n), there exists a\nroad between \n    M_i\n and \n    M_i+1\n. Boboniu would regard the path as a\nchallenge if for each \n    i\n (\n    1\n    \u2264 i<|M|\n), \n    h_M_i\n    \u2264\n    h_M_i+1\n. Boboniu wants to divide all \n    n-1\n roads into several\nchallenges. Note that each road must appear in exactly one challenge, but a\nmountain may appear in several challenges. Boboniu wants to minimize the total\ntiredness to do all the challenges. The tiredness of a challenge \n    M\n is\nthe sum of tiredness of all mountains in it, i.e.\n\n    \u2211_i=1^|M|t_M_i\n. He asked you to find the minimum total\ntiredness. As a reward for your work, you'll become a guardian in his Jianghu.\nInput The first line contains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n), denoting the number of the mountains. The second line\ncontains \n    n\n integers \n    t_1, t_2, \n    \u2026, t_n\n (\n    1 \n    \u2264 t_i \n    \u2264\n    10^6\n), denoting the tiredness for Boboniu to do Kungfu on each mountain.\nThe third line contains \n    n\n integers \n    h_1, h_2, \n    \u2026, h_n\n (\n    1\n    \n    \u2264 h_i \n    \u2264 10^6\n), denoting the height of each mountain. Each of the\nfollowing \n    n - 1\n lines contains two integers \n    u_i\n, \n    v_i\n (\n    1\n    \n    \u2264 u_i, v_i \n    \u2264 n, u_i \n    \u2260 v_i\n), denoting the ends of the road.\nIt's guaranteed that all mountains are connected via roads. Output Print one\ninteger: the smallest sum of tiredness of all challenges. Examples Input 5 40\n10 30 50 20 2 3 2 3 1 1 2 1 3 2 4 2 5 Output 160 Input 5 1000000 1 1 1 1\n1000000 1 1 1 1 1 2 1 3 1 4 1 5 Output 4000004 Input 10 510916 760492 684704\n32545 484888 933975 116895 77095 127679 989957 402815 705067 705067 705067\n623759 103335 749243 138306 138306 844737 1 2 3 2 4 3 1 5 6 4 6 7 8 7 8 9 9 10\nOutput 6390572 Note For the first example: In the picture, the lighter a point\nis, the higher the mountain it represents. One of the best divisions is:\nChallenge \n    1\n: \n    3 \n    \u2192 1 \n    \u2192 2\n Challenge \n    2\n: \n    5 \n    \u2192 2\n    \n    \u2192 4\n The total tiredness of Boboniu is \n    (30 + 40 + 10) + (20 + 10 +\n    50) = 160\n. It can be shown that this is the minimum total tiredness.\n\n",
        "cf_contest_id": 1394,
        "cf_index": "D",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "greedy",
            "sortings",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n40 10 30 50 20\r\n2 3 2 3 1\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n",
                "160\r\n"
            ],
            [
                "5\r\n1000000 1 1 1 1\r\n1000000 1 1 1 1\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n",
                "4000004\r\n"
            ],
            [
                "10\r\n510916 760492 684704 32545 484888 933975 116895 77095 127679 989957\r\n402815 705067 705067 705067 623759 103335 749243 138306 138306 844737\r\n1 2\r\n3 2\r\n4 3\r\n1 5\r\n6 4\r\n6 7\r\n8 7\r\n8 9\r\n9 10\r\n",
                "6390572\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 1\r\n1 1\r\n1 2\r\n",
                "2\r\n"
            ],
            [
                "10\r\n990262 334398 114520 306166 946802 300694 304884 267968 909121 649171\r\n657865 120066 970726 495455 742298 808060 480351 277939 858994 722060\r\n1 2\r\n3 2\r\n1 4\r\n3 5\r\n6 4\r\n7 6\r\n8 2\r\n1 9\r\n3 10\r\n",
                "7618944\r\n"
            ],
            [
                "10\r\n750962 293829 276165 681420 837092 334624 336583 562875 433659 706807\r\n237314 811693 617827 516204 503877 882791 136061 672485 237314 711085\r\n2 1\r\n3 1\r\n4 1\r\n5 2\r\n6 4\r\n7 6\r\n8 6\r\n9 1\r\n7 10\r\n",
                "8015600\r\n"
            ],
            [
                "10\r\n530471 779863 564692 217932 439809 400723 787854 372472 788161 566647\r\n849467 503320 849467 232224 471545 232224 522352 700626 567579 291222\r\n1 2\r\n3 1\r\n4 2\r\n2 5\r\n6 4\r\n7 1\r\n6 8\r\n1 9\r\n10 1\r\n",
                "8037832\r\n"
            ],
            [
                "10\r\n909960 125666 808765 835556 159698 39414 931650 951483 408361 237640\r\n685812 970754 846621 492294 685812 316635 583870 223289 685812 685812\r\n1 2\r\n2 3\r\n2 4\r\n1 5\r\n3 6\r\n5 7\r\n8 7\r\n9 1\r\n9 10\r\n",
                "6569485\r\n"
            ],
            [
                "10\r\n110918 625897 878999 561401 945052 837666 363315 358361 797803 495280\r\n297965 297965 297965 695085 695085 297965 695085 717913 513043 297965\r\n2 1\r\n1 3\r\n2 4\r\n5 4\r\n3 6\r\n5 7\r\n7 8\r\n9 1\r\n10 2\r\n",
                "6711507\r\n"
            ],
            [
                "10\r\n55712 997452 133141 730607 731659 289720 187632 18245 969588 89593\r\n891582 891582 891582 891582 891582 891582 891582 891582 891582 891582\r\n1 2\r\n2 3\r\n3 4\r\n1 5\r\n1 6\r\n7 5\r\n6 8\r\n9 5\r\n2 10\r\n",
                "5988172\r\n"
            ],
            [
                "10\r\n680928 845567 501805 587575 562352 972403 695440 513733 677170 128627\r\n281540 398669 81979 623018 55387 922804 340378 971529 576344 918219\r\n2 1\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n7 6\r\n8 7\r\n8 9\r\n10 9\r\n",
                "11521645\r\n"
            ],
            [
                "10\r\n332806 765136 362919 552584 231812 656745 902619 804354 333563 107960\r\n272367 338923 775101 308842 468021 29422 512107 538566 614796 747271\r\n1 2\r\n3 2\r\n4 3\r\n4 5\r\n6 5\r\n6 7\r\n8 7\r\n8 9\r\n9 10\r\n",
                "6854558\r\n"
            ],
            [
                "10\r\n143228 270625 622743 778372 626222 527302 249590 280368 993100 38840\r\n641413 622189 709632 709632 709632 709632 709632 709632 371657 371657\r\n1 2\r\n2 3\r\n4 3\r\n5 3\r\n6 5\r\n7 6\r\n7 8\r\n8 9\r\n10 9\r\n",
                "5423758\r\n"
            ],
            [
                "10\r\n915139 754412 644 26971 125405 48187 370025 103614 840057 491138\r\n744007 744007 744007 744007 744007 744007 744007 744007 744007 744007\r\n1 2\r\n3 2\r\n4 2\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n10 8\r\n",
                "4533618\r\n"
            ],
            [
                "10\r\n644438 795485 606603 605894 355583 516678 386515 105603 675091 124533\r\n715061 715061 715061 715061 715061 715061 715061 715061 715061 715061\r\n2 1\r\n3 2\r\n3 4\r\n4 5\r\n6 4\r\n7 6\r\n8 7\r\n8 9\r\n9 10\r\n",
                "5422317\r\n"
            ],
            [
                "10\r\n233370 483292 361472 694925 341465 242948 818054 149506 164737 690428\r\n823071 627547 516234 952443 533790 770527 563200 870187 862297 719806\r\n2 1\r\n3 1\r\n4 1\r\n1 5\r\n6 1\r\n1 7\r\n8 1\r\n9 1\r\n3 10\r\n",
                "5475149\r\n"
            ],
            [
                "10\r\n847767 279849 188459 802360 740279 604789 413248 178407 435600 599490\r\n569978 475327 146529 491483 985814 50383 707247 490495 474450 411433\r\n1 2\r\n3 1\r\n4 1\r\n1 5\r\n1 6\r\n7 1\r\n8 1\r\n1 9\r\n2 10\r\n",
                "9329083\r\n"
            ],
            [
                "10\r\n878868 494868 300598 982742 620195 395989 256231 199931 240013 739168\r\n541076 290403 968312 189308 470542 619838 541076 659806 143506 21195\r\n1 2\r\n1 3\r\n4 1\r\n1 5\r\n6 1\r\n1 7\r\n1 8\r\n9 1\r\n10 9\r\n",
                "7745207\r\n"
            ],
            [
                "10\r\n987974 932397 803853 796518 857541 570495 141969 321347 777025 503438\r\n544878 544878 544878 544878 544878 395079 544878 631311 544878 919837\r\n2 1\r\n1 3\r\n4 1\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n9 1\r\n3 10\r\n",
                "9656479\r\n"
            ],
            [
                "10\r\n617661 696893 244957 947900 673721 469694 262122 723662 276687 762796\r\n483272 483272 483272 483272 242858 483272 483272 483272 483272 453095\r\n2 1\r\n3 1\r\n4 1\r\n1 5\r\n6 1\r\n7 1\r\n8 1\r\n1 9\r\n1 10\r\n",
                "8146737\r\n"
            ],
            [
                "10\r\n459046 381498 243862 61622 954647 889706 31464 63311 622749 3201\r\n714257 714257 714257 714257 714257 714257 714257 714257 714257 714257\r\n2 1\r\n3 1\r\n1 4\r\n1 5\r\n6 1\r\n1 7\r\n1 8\r\n9 1\r\n8 10\r\n",
                "5088244\r\n"
            ]
        ]
    }
]