[
    {
        "name": "Misha and Paintings",
        "description": "Misha has a square \n    n \n    \u00d7 n\n matrix, where the number in row \n    i\n\nand column \n    j\n is equal to \n    a_i, j\n. Misha wants to modify the\nmatrix to contain exactly \n    k\n distinct integers. To achieve this goal,\nMisha can perform the following operation zero or more times: choose any\nsquare submatrix of the matrix (you choose \n    (x_1,y_1)\n, \n    (x_2,y_2)\n,\nsuch that \n    x_1 \n    \u2264 x_2\n, \n    y_1 \n    \u2264 y_2\n, \n    x_2 - x_1 = y_2 -\n    y_1\n, then submatrix is a set of cells with coordinates \n    (x, y)\n, such\nthat \n    x_1 \n    \u2264 x \n    \u2264 x_2\n, \n    y_1 \n    \u2264 y \n    \u2264 y_2\n), choose an\ninteger \n    k\n, where \n    1 \n    \u2264 k \n    \u2264 n^2\n, replace all integers in\nthe submatrix with \n    k\n. Please find the minimum number of operations that\nMisha needs to achieve his goal. Input The first input line contains two\nintegers \n    n\n and \n    k\n (\n    1 \n    \u2264 n \n    \u2264 500, 1 \n    \u2264 k \n    \u2264\n    n^2\n) \u2014 the size of the matrix and the desired amount of distinct elements\nin the matrix. Then \n    n\n lines follows. The \n    i\n-th of them contains\n\n    n\n integers \n    a_i, 1, a_i, 2, \n    \u2026, a_i, n\n (\n    1 \n    \u2264\n    a_i,j\n    \u2264 n^2\n) \u2014 the elements of the \n    i\n-th row of the matrix.\nOutput Output one integer \u2014 the minimum number of operations required.\nExamples Input 3 4 1 1 1 1 1 2 3 4 5 Output 1 Input 3 2 2 1 3 2 1 1 3 1 2\nOutput 2 Input 3 3 1 1 1 1 1 2 2 2 2 Output 1 Input 3 2 1 1 1 1 2 1 2 2 2\nOutput 0 Note In the first test case the answer is \n    1\n, because one can\nchange the value in the bottom right corner of the matrix to \n    1\n. The\nresulting matrix can be found below: 111112341 In the second test case the\nanswer is \n    2\n. First, one can change the entire matrix to contain only\n\n    1\ns, and the change the value of any single cell to \n    2\n. One of the\npossible resulting matrices is displayed below: 111111112\n\n",
        "cf_contest_id": 1720,
        "cf_index": "E",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 3.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 4\r\n1 1 1\r\n1 1 2\r\n3 4 5\r\n",
                "1\r\n"
            ],
            [
                "3 2\r\n2 1 3\r\n2 1 1\r\n3 1 2\r\n",
                "2\r\n"
            ],
            [
                "3 3\r\n1 1 1\r\n1 1 2\r\n2 2 2\r\n",
                "1\r\n"
            ],
            [
                "3 2\r\n1 1 1\r\n1 2 1\r\n2 2 2\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "3 5\r\n1 2 3\r\n4 5 6\r\n7 8 9\r\n",
                "1\r\n"
            ],
            [
                "5 7\r\n6 8 9 7 1\r\n8 10 11 8 2\r\n9 11 10 9 3\r\n7 8 9 6 4\r\n1 2 3 4 5\r\n",
                "2\r\n"
            ],
            [
                "2 2\r\n4 1\r\n2 3\r\n",
                "2\r\n"
            ]
        ]
    }
]