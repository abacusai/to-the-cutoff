[
    {
        "name": "Subway Pursuit",
        "description": "This is an interactive problem. In the Wonderful Metropolis of the Future,\nthere is no need in subway train drivers. Due to the technological progress,\nthey were replaced by the Artificial Intelligence (AI). Unfortunately, one day\nthe predictions of sci-fi writers came true: the AI rebelled and now there is\nan uncontrollable train in the subway. It can be dangerous! Your task is to\nfind the train and stop the AI. The subway of the Metropolis is one line\n(regular straight line with no self-intersections) with \n    n\n stations,\nindexed consecutively from \n    1\n to \n    n\n. At each moment the train is at\nsome station. You need to determine the index of this station, so that the\ntrain would be secured. To find the train, dispatcher Sarah gave you a gadget\nthat allows you to select arbitrary numbers \n    l\n and \n    r\n (\n    l \n    \u2264\n    r\n), and then check, whether the train is located on a station with index\nbetween \n    l\n and \n    r\n, inclusive. Unfortunately, recharging of the\ngadget takes some time (and every time you use it as soon as possible), so\nbetween two applications of the gadget the train can move to any station that\nis at most \n    k\n stations away. Formally, if the train was at the station\n\n    x\n when the gadget was applied, then at the next application of the\ngadget the train can appear at any station \n    y\n such that \n    max(1, x -\n    k) \n    \u2264 y \n    \u2264\n    min(n, x + k)\n. Note that AI is not aware that you are\ntrying to catch the train, so it makes all moves according to its predefined\nplan. After an examination of the gadget you found that it is very old and can\nhold no more than \n    4500\n applications, after which it will break and your\nmission will be considered a failure. Can you find the station with the train\nusing no more than \n    4500\n applications of the gadgets? Input The first\nline contains two integers \n    n\n and \n    k\n (\n    1 \n    \u2264 n \n    \u2264\n    10^18\n, \n    0 \n    \u2264 k \n    \u2264 10\n) \u2014 the number of stations and the\nmaximum number of stations the train can move between two applications of the\ngadget. Interaction You can apply the gadget at most \n    4500\n times. In\norder to apply the gadget you need to print two space-separated integers\n\n    l\n and \n    r\n (\n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 n\n). You will then\nreceive either string \"Yes\", if the train is between stations \n    l\n and\n\n    r\n, inclusive, or string \"No\" otherwise. If \n    l = r\n and you received\n\"Yes\", then you found the train successfully, and your program must halt\nimmediately. Answer \"Bad\" instead of \"Yes\" or \"No\" means that you made an\ninvalid query or made too many queries. Exit immediately after receiving \"Bad\"\nand you will see Wrong answer verdict. Otherwise you can get an arbitrary\nverdict because your solution will continue to read from a closed stream.\nAfter printing a query do not forget to output end of line and flush the\noutput. Otherwise you will get Idleness limit exceeded. To do this, use:\nfflush(stdout) or cout.flush() in C++; System.out.flush() in Java;\nflush(output) in Pascal; stdout.flush() in Python; see documentation for other\nlanguages. Hacks In order to hack, you should present a test in the following\nformat. The first line should contain three integers \n    n\n, \n    k\n and\n\n    p\n (\n    1 \n    \u2264 n \n    \u2264 10^18\n, \n    0 \n    \u2264 k \n    \u2264 10\n, \n    1 \n    \u2264 p\n    \n    \u2264 n\n) \u2014 the number of stations, the maximum number of stations the train\ncan move between two applications of the gadget and the initial position of\nthe train, respectively. Each of the next \n    4500\n lines should contain a\nsingle integer \n    x\n (\n    1 \n    \u2264 x \n    \u2264 n\n) \u2014 the positions of the train\nafter each query. Two consecutive positions (including the initial one) should\nnot differ by more than \n    k\n. For example, the following lines are the\nfirst lines of the sample test. 10 2 5 5 3 5 7 7 ... Example Input 10 2 Yes No\nYes Yes Output 3 5 3 3 3 4 5 5 Note In the first sample, the train was\ninitially at the station \n    5\n, after the first application of the gadget it\ndid not move, after the second application it moved to the station \n    3\n,\nand after the third application moved again to the station \n    5\n.\n\n",
        "cf_contest_id": 1039,
        "cf_index": "B",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "interactive",
            "probabilities"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "10 2 5\r\n5\r\n3\r\n5\r\n7\r\n7\r\n7\r\n5\r\n3\r\n2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n3\r\n4\r\n2\r\n4\r\n2\r\n3\r\n3\r\n2\r\n1\r\n1\r\n3\r\n1\r\n1\r\n1\r\n2\r\n3\r\n2\r\n3\r\n3\r\n1\r\n3\r\n1\r\n1\r\n3\r\n1\r\n2\r\n1\r\n2\r\n1\r\n2\r\n1\r\n1\r\n3\r\n4\r\n6\r\n4\r\n6\r\n6\r\n5\r\n7\r\n6\r\n4\r\n2\r\n1\r\n3\r\n5\r\n3\r\n4\r\n6\r\n6\r\n8\r\n9\r\n9\r\n9\r\n9\r\n10\r\n10\r\n8\r\n8\r\n7\r\n7\r\n7\r\n8\r\n9\r\n10\r\n8\r\n9\r\n7\r\n9\r\n7\r\n7\r\n5\r\n7\r\n8\r\n8\r\n10\r\n8\r\n9\r\n7\r\n6\r\n6\r\n5\r\n7\r\n9\r\n8\r\n7\r\n7\r\n9\r\n8\r\n6\r\n5\r\n4\r\n2\r\n4\r\n3\r\n3\r\n4\r\n3\r\n5\r\n4\r\n6\r\n4\r\n2\r\n2\r\n4\r\n5\r\n6\r\n7\r\n9\r\n8\r\n8\r\n10\r\n8\r\n10\r\n9\r\n7\r\n8\r\n7\r\n6\r\n4\r\n4\r\n4\r\n2\r\n3\r\n3\r\n4\r\n2\r\n1\r\n1\r\n2\r\n2\r\n4\r\n5\r\n3\r\n2\r\n3\r\n4\r\n2\r\n1\r\n3\r\n1\r\n3\r\n2\r\n4\r\n2\r\n4\r\n3\r\n2\r\n1\r\n1\r\n3\r\n2\r...",
                "10 2 4500\r\n2 2\r\nNo\r\n9 9\r\nNo\r\n5 5\r\nNo\r\n3 3\r\nNo\r\n4 4\r\nNo\r\n1 1\r\nNo\r\n8 8\r\nNo\r\n10 10\r\nNo\r\n1 1\r\nNo\r\n2 2\r\nYes\r\nok 10 queries\r\n"
            ]
        ],
        "private_cases": []
    }
]