[
    {
        "name": "Listening to Music",
        "description": "Please note that the memory limit differs from the standard. You really love\nto listen to music. During the each of next s days you will listen to exactly\nm songs from the playlist that consists of exactly n songs. Let's number the\nsongs from the playlist with numbers from 1 to n, inclusive. The quality of\nsong number i is ai. On the i-th day you choose some integer v (li \u2264 v \u2264 ri)\nand listen to songs number v, v + 1, ..., v + m - 1. On the i-th day listening\nto one song with quality less than qi increases your displeasure by exactly\none. Determine what minimum displeasure you can get on each of the s next\ndays. Input The first line contains two positive integers n, m (1 \u2264 m \u2264 n \u2264\n2\u00b710^5). The second line contains n positive integers a1, a2, ..., an (0 \u2264 ai\n< 2^30) \u2014 the description of songs from the playlist. The next line contains a\nsingle number s (1 \u2264 s \u2264 2\u00b710^5) \u2014 the number of days that you consider. The\nnext s lines contain three integers each li, ri, xi (1 \u2264 li \u2264 ri \u2264 n - m + 1;\n0 \u2264 xi < 2^30) \u2014 the description of the parameters for the i-th day. In order\nto calculate value qi, you need to use formula: , where ansi is the answer to\nthe problem for day i. Assume that ans0 = 0. Output Print exactly s integers\nans1, ans2, ..., anss, where ansi is the minimum displeasure that you can get\non day i. Examples Input 5 3 1 2 1 2 3 5 1 1 2 1 3 2 1 3 3 1 3 5 1 3 1 Output\n2 0 2 3 1\n\n",
        "cf_contest_id": 543,
        "cf_index": "E",
        "cf_rating": 3200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures"
        ],
        "time_limit_seconds": 7.0,
        "memory_limit_bytes": 64.0,
        "public_cases": [
            [
                "5 3\r\n1 2 1 2 3\r\n5\r\n1 1 2\r\n1 3 2\r\n1 3 3\r\n1 3 5\r\n1 3 1\r\n",
                "2\r\n0\r\n2\r\n3\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 2\r\n0 0 0 0 0\r\n2\r\n1 3 0\r\n1 3 1\r\n",
                "0\r\n2\r\n"
            ],
            [
                "1 1\r\n5\r\n3\r\n1 1 4\r\n1 1 5\r\n1 1 6\r\n",
                "0\r\n0\r\n1\r\n"
            ],
            [
                "2 1\r\n0 1\r\n6\r\n1 1 1\r\n1 1 0\r\n1 1 2\r\n1 2 0\r\n1 2 1\r\n1 2 2\r\n",
                "1\r\n1\r\n1\r\n0\r\n0\r\n1\r\n"
            ],
            [
                "2 2\r\n1 1\r\n3\r\n1 1 4\r\n1 1 1\r\n1 1 0\r\n",
                "2\r\n2\r\n2\r\n"
            ]
        ]
    }
]