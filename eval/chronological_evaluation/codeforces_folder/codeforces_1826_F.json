[
    {
        "name": "Fading into Fog",
        "description": "This is an interactive problem. There are \n    n\n distinct hidden points with\nreal coordinates on a two-dimensional Euclidean plane. In one query, you can\nask some line \n    ax + by + c = 0\n and get the projections of all \n    n\n\npoints to this line in some order. The given projections are not exact, please\nread the interaction section for more clarity. Using the minimum number of\nqueries, guess all \n    n\n points and output them in some order. Here\nminimality means the minimum number of queries required to solve any possible\ntest case with \n    n\n points. The hidden points are fixed in advance and do\nnot change throughout the interaction. In other words, the interactor is not\nadaptive. A projection of point \n    A\n to line \n    ax + by + c = 0\n is the\npoint on the line closest to \n    A\n. Input The first line contains a single\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 50\n) \u2014 the number of test cases. The\ndescription of the test cases follows. The first line of each test case\ncontains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 25\n) \u2014 the number of\nhidden points. For each test case, it is guaranteed that for any pair of\nhidden points, their \n    x\n coordinates differ by at least \n    1\n.\nAnalogously, \n    y\n coordinates of any pair also differ by at least \n    1\n.\nCoordinates \n    x\n and \n    y\n of all hidden points do not exceed \n    100\n\nby absolute value. Interaction To query a line \n    ax + by + c = 0\n you\nshould print \"? a b c\" where all a, b and c are real numbers up to \n    100\n\nby absolute value. For less precision issues numbers \n    a\n and \n    b\n must\nsatisfy the condition \n    |a| + |b| \n    \u2265 0.1\n, where \n    |a|\n is the\nabsolute value of \n    a\n. As an answer to the query you will get \n    n\n\npoints in the form \"x_1 y_1 ... x_n y_n\", where points \n    (x_i, y_i)\n are\nprojections to the line \n    ax + by + c = 0\n. It is guaranteed that each\nprinted point is no more than \n    10^-4\n away from the real projection\npoint. Every coordinate is printed with at most 9 decimal places. See the\ninteraction example for more clarity. If you ask too many queries, you will\nget Wrong answer. To output an answer you should print \"! x_1 y_1 ... x_n\ny_n\", where \n    (x_i, y_i)\n are coordinates of the hidden points. You could\noutput the hidden points in any order. The answer would be considered correct\nif each of the printed points is no more than \n    10^-3\n away from the\ncorresponding hidden point. Printing the answer doesn't count as a query.\nAfter printing a query or the answer, do not forget to output end of line and\nflush the output. Otherwise, you will get Idleness limit exceeded. To do this,\nuse: fflush(stdout) or cout.flush() in C++; System.out.flush() in Java;\nflush(output) in Pascal; stdout.flush() in Python; see the documentation for\nother languages Hacks To make a hack, use the following test format. In the\nfirst line output a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 50\n) \u2014 the\nnumber of test cases. The description of the test cases follows. In the first\nline of each test case output a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264\n    25\n). In the next \n    n\n lines output two rational numbers each. The\nnumbers in line \n    i\n should correspond to \n    x_i\n and \n    y_i\n\nrespectively. Printed points must comply with all constraints from the input\nsection. Example Input 1 2 1 1 2.5 1 1.500000001 1.500000000 2 2 Output ? 0 1\n-1 ? 0.2 -0.2 0 ! 1 3 2.5 0.500000001 Note In the sample the hidden points are\n\n    (1, 3)\n and \n    (2.5, 0.5)\n A picture, which describes the first query:\nA picture, which describes the second query:\n\n",
        "cf_contest_id": 1826,
        "cf_index": "F",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "geometry",
            "interactive",
            "math",
            "probabilities"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n2\r\n1 3\r\n2.5 0.5\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2\r\n-15.504188564 72.223350127\r\n-94.309115219 14.984159678\r\n",
                "3\r\n"
            ],
            [
                "1\r\n3\r\n-28.842152771 -74.532166615\r\n-98.722018368 -82.733036824\r\n6.436026224 -96.805022311\r\n",
                "3\r\n"
            ],
            [
                "1\r\n15\r\n79.495403663 -39.563934388\r\n-11.905202266 9.289871640\r\n-7.469856654 -60.459128973\r\n-18.830356492 -21.911137651\r\n55.935665369 82.307597962\r\n30.724527885 -96.710023026\r\n-59.870656624 13.096499106\r\n67.048974519 39.075658158\r\n-66.049219411 88.219819992\r\n-37.760111243 47.989330905\r\n-81.661752871 -94.505833714\r\n28.289586637 20.274294852\r\n-83.155002540 62.240147180\r\n-48.814345799 -66.414932537\r\n98.338962283 -10.632129537\r\n",
                "3\r\n"
            ],
            [
                "2\r\n2\r\n29.734992951 -76.339321801\r\n78.853243850 24.051491129\r\n2\r\n29.691578554 -52.903575637\r\n13.487553260 -2.241404823\r\n",
                "3\r\n3\r\n"
            ]
        ]
    }
]