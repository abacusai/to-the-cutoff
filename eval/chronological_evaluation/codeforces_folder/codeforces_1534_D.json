[
    {
        "name": "Lost Tree",
        "description": "This is an interactive problem. Little Dormi was faced with an awkward problem\nat the carnival: he has to guess the edges of an unweighted tree of \n    n\n\nnodes! The nodes of the tree are numbered from \n    1\n to \n    n\n. The game\nmaster only allows him to ask one type of question: Little Dormi picks a node\n\n    r\n (\n    1 \n    \u2264 r \n    \u2264 n\n), and the game master will reply with an\narray \n    d_1, d_2, \n    \u2026, d_n\n, where \n    d_i\n is the length of the\nshortest path from node \n    r\n to \n    i\n, for all \n    1 \n    \u2264 i \n    \u2264\n    n\n.Additionally, to make the game unfair challenge Little Dormi the game\nmaster will allow at most \n    \u2308\n    n/2\n    \u2309\n questions, where\n\n    \u2308 x \n    \u2309\n denotes the smallest integer greater than or equal\nto \n    x\n. Faced with the stomach-churning possibility of not being able to\nguess the tree, Little Dormi needs your help to devise a winning strategy!\nNote that the game master creates the tree before the game starts, and does\nnot change it during the game. Input The first line of input contains the\ninteger \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2\n     000\n), the number of nodes in the\ntree. You will then begin interaction. Output When your program has found the\ntree, first output a line consisting of a single \"!\" followed by \n    n-1\n\nlines each with two space separated integers \n    a\n and \n    b\n, denoting an\nedge connecting nodes \n    a\n and \n    b\n (\n    1 \n    \u2264 a, b \n    \u2264 n\n). Once\nyou are done, terminate your program normally immediately after flushing the\noutput stream. You may output the edges in any order and an edge \n    (a,b)\n\nis considered the same as an edge \n    (b,a)\n. Answering is not considered as\na query. Interaction After taking input, you may make at most\n\n    \u2308\n    n/2\n    \u2309\n queries. Each query is made in the format\n\"? r\", where \n    r\n is an integer \n    1 \n    \u2264 r \n    \u2264 n\n that denotes the\nnode you want to pick for that query. You will then receive \n    n\n space\nseparated integers \n    d_1, d_2, \n    \u2026, d_n\n, where \n    d_i\n is the\nlength of the shortest path from node \n    r\n to \n    i\n, followed by a\nnewline. After printing a query do not forget to output end of line and flush\nthe output. Otherwise, you will get Idleness limit exceeded. To do this, use:\nfflush(stdout) or cout.flush() in C++; System.out.flush() in Java;\nflush(output) in Pascal; stdout.flush() in Python; see documentation for other\nlanguages. If at any point you make an invalid query or try to make more than\n\n    \u2308\n    n/2\n    \u2309\n queries, the interaction will terminate\nimmediately and you will receive a Wrong Answer verdict. Hacks To hack a\nsolution, use the following format. The first line contains the integer\n\n    n\n (\n    2 \n    \u2264 n \n    \u2264 2\n     000\n). The next \n    n\u22121\n lines contain two\nintegers \n    u\n and \n    v\n (\n    1 \n    \u2264 u,v \n    \u2264 n\n) denoting an edge\nbetween \n    u\n and \n    v\n (\n    u \n    \u2260 v\n). These \n    n-1\n edges must\nform a tree. Examples Input 4 0 1 2 2 1 0 1 1 Output ? 1 ? 2 ! 4 2 1 2 2 3\nInput 5 2 2 1 1 0 Output ? 5 ! 4 5 3 5 2 4 1 3 Note Here is the tree from the\nfirst example. Notice that the edges can be output in any order. Additionally,\nhere are the answers for querying every single node in example \n    1\n:\n\n    1\n: \n    [0,1,2,2]\n \n    2\n: \n    [1,0,1,1]\n \n    3\n: \n    [2,1,0,2]\n\n\n    4\n: \n    [2,1,2,0]\nBelow is the tree from the second example interaction.\nLastly, here are the answers for querying every single node in example\n\n    2\n: \n    1\n: \n    [0,4,1,3,2]\n \n    2\n: \n    [4,0,3,1,2]\n \n    3\n:\n\n    [1,3,0,2,1]\n \n    4\n: \n    [3,1,2,0,1]\n \n    5\n: \n    [2,2,1,1,0]\n\n\n",
        "cf_contest_id": 1534,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "interactive",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2 4\r\n3 2\r\n2 1\r\n",
                "1 2\r\n2 3\r\n2 4\r\n"
            ],
            [
                "5\r\n5 3\r\n2 4\r\n3 1\r\n4 5\r\n",
                "1 3\r\n2 4\r\n3 5\r\n4 5\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 2\r\n",
                "1 2\r\n"
            ],
            [
                "3\r\n1 2\r\n2 3\r\n",
                "1 2\r\n2 3\r\n"
            ],
            [
                "5\r\n3 4\r\n3 2\r\n3 1\r\n1 5\r\n",
                "1 3\r\n1 5\r\n2 3\r\n3 4\r\n"
            ],
            [
                "4\r\n3 4\r\n2 3\r\n3 1\r\n",
                "1 3\r\n2 3\r\n3 4\r\n"
            ],
            [
                "10\r\n8 10\r\n2 9\r\n7 8\r\n4 1\r\n7 3\r\n4 7\r\n2 5\r\n2 4\r\n4 6\r\n",
                "1 4\r\n2 4\r\n2 5\r\n2 9\r\n3 7\r\n4 6\r\n4 7\r\n7 8\r\n8 10\r\n"
            ],
            [
                "5\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n",
                "1 2\r\n1 3\r\n1 4\r\n1 5\r\n"
            ]
        ]
    }
]