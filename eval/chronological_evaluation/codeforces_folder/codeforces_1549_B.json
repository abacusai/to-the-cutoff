[
    {
        "name": "Gregor and the Pawn Game",
        "description": "There is a chessboard of size \n    n\n by \n    n\n. The square in the \n    i\n-th\nrow from top and \n    j\n-th column from the left is labelled \n    (i,j)\n.\nCurrently, Gregor has some pawns in the \n    n\n-th row. There are also enemy\npawns in the \n    1\n-st row. On one turn, Gregor moves one of his pawns. A\npawn can move one square up (from \n    (i,j)\n to \n    (i-1,j)\n) if there is no\npawn in the destination square. Additionally, a pawn can move one square\ndiagonally up (from \n    (i,j)\n to either \n    (i-1,j-1)\n or \n    (i-1,j+1)\n)\nif and only if there is an enemy pawn in that square. The enemy pawn is also\nremoved. Gregor wants to know what is the maximum number of his pawns that can\nreach row \n    1\n? Note that only Gregor takes turns in this game, and the\nenemy pawns never move. Also, when Gregor's pawn reaches row \n    1\n, it is\nstuck and cannot make any further moves. Input The first line of the input\ncontains one integer \n    t\n (\n    1\n    \u2264 t\n    \u2264 2\n    \u00b7 10^4\n) \u2014 the number\nof test cases. Then \n    t\n test cases follow. Each test case consists of\nthree lines. The first line contains a single integer \n    n\n (\n    2\n    \u2264\n    n\n    \u2264 2\n    \u00b710^5\n) \u2014 the size of the chessboard. The second line\nconsists of a string of binary digits of length \n    n\n, where a \n    1\n in\nthe \n    i\n-th position corresponds to an enemy pawn in the \n    i\n-th cell\nfrom the left, and \n    0\n corresponds to an empty cell. The third line\nconsists of a string of binary digits of length \n    n\n, where a \n    1\n in\nthe \n    i\n-th position corresponds to a Gregor's pawn in the \n    i\n-th cell\nfrom the left, and \n    0\n corresponds to an empty cell. It is guaranteed that\nthe sum of \n    n\n across all test cases is less than \n    2\n    \u00b710^5\n.\nOutput For each test case, print one integer: the maximum number of Gregor's\npawns which can reach the \n    1\n-st row. Example Input 4 3 000 111 4 1111\n1111 3 010 010 5 11001 00000 Output 3 4 0 0 Note In the first example, Gregor\ncan simply advance all \n    3\n of his pawns forward. Thus, the answer is\n\n    3\n. In the second example, Gregor can guarantee that all \n    4\n of his\npawns reach the enemy row, by following the colored paths as demonstrated in\nthe diagram below. Remember, only Gregor takes turns in this \"game\"! In the\nthird example, Gregor's only pawn is stuck behind the enemy pawn, and cannot\nreach the end. In the fourth example, Gregor has no pawns, so the answer is\nclearly \n    0\n.\n\n",
        "cf_contest_id": 1549,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dp",
            "flows",
            "graph matchings",
            "graphs",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3\r\n000\r\n111\r\n4\r\n1111\r\n1111\r\n3\r\n010\r\n010\r\n5\r\n11001\r\n00000\r\n",
                "3\r\n4\r\n0\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n20\r\n01001100111111000100\r\n00101100011010001110\r\n",
                "8\r\n"
            ]
        ]
    }
]