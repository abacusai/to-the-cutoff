[
    {
        "name": "Pink Floyd",
        "description": "This is an interactive task. Scientists are about to invent a new optimization\nfor the Floyd-Warshall algorithm, which will allow it to work in linear time.\nThere is only one part of the optimization still unfinished. It is well known\nthat the Floyd-Warshall algorithm takes a graph with \n    n\n nodes and exactly\none edge between each pair of nodes. The scientists have this graph, what is\nmore, they have directed each edge in one of the two possible directions. To\noptimize the algorithm, exactly \n    m\n edges are colored in pink color and\nall the rest are colored in green. You know the direction of all \n    m\n pink\nedges, but the direction of green edges is unknown to you. In one query you\ncan ask the scientists about the direction of exactly one green edge, however,\nyou can perform at most \n    2 \n    \u00b7 n\n such queries. Your task is to find\nthe node from which every other node can be reached by a path consisting of\nedges of same color. Be aware that the scientists may have lied that they had\nfixed the direction of all edges beforehand, so their answers may depend on\nyour queries. Input The first line contains two integers \n    n\n and \n    m\n\n(\n    1 \n    \u2264 n \n    \u2264 100\n     000\n, \n    0 \n    \u2264 m \n    \u2264 100\n     000\n) \u2014 the\nnumber of nodes and the number of pink edges. The next \n    m\n lines describe\nthe pink edges, the \n    i\n-th of these lines contains two integers \n    u_i\n,\n\n    v_i\n (\n    1 \n    \u2264 u_i, v_i \n    \u2264 n\n, \n    u_i \n     v_i\n) \u2014 the start\nand the end of the \n    i\n-th pink edge. It is guaranteed, that all unordered\npairs \n    (u_i, v_i)\n are distinct. Output When you found the answer, print\n\"!\" and the number of the node from which every other node can be reached by a\nsingle-colored path. Interaction To ask the direction of the green edge\nbetween nodes \n    a\n and \n    b\n, print \"?\", \n    a\n and \n    b\n in single\nline, separated by the space characters. In answer to this read a single\ninteger, which will be \n    1\n if the edge is directed from \n    a\n to \n    b\n\nand \n    0\n if the edge is directed from \n    b\n to \n    a\n. You can ask at\nmost \n    2 \n    \u00b7 n\n queries, otherwise you will get Wrong Answer. After\nprinting a query do not forget to output end of line and flush the output.\nOtherwise you will get Idleness limit exceeded. To do this, use:\nfflush(stdout) or cout.flush() in C++; System.out.flush() in Java;\nflush(output) in Pascal; stdout.flush() in Python; see documentation for other\nlanguages. Answer \n    -1\n instead of \n    0\n or \n    1\n means that you made\nan invalid query or exceeded the query limit. Exit immediately after receiving\n\n    -1\n and you will see Wrong answer verdict. Otherwise you can get an\narbitrary verdict because your solution will continue to read from a closed\nstream. Hacks Hacks should be formatted as follows. The first line should\ncontain two integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n \n    \u2264 300\n, \n    0\n    \n    \u2264 m \n    \u2264 n \n    \u00b7 (n - 1) / 2\n) \u2014 the number of nodes and number of\npink edges. The next \n    m\n lines should describe the pink edges, the\n\n    i\n-th line should contain 2 integers \n    a_i\n, \n    b_i\n (\n    1 \n    \u2264\n    a_i, b_i \n    \u2264 n\n, \n    a_i \n     b_i\n), which means that there is a pink\nedge from \n    a_i\n to \n    b_i\n. All unordered pairs \n    (a_i, b_i)\n should\nbe distinct. The next \n    (n \n    \u00b7 (n - 1) / 2 - m)\n lines should describe\nthe green edges, the \n    i\n-th line should contain two integers \n    a_i\n,\n\n    b_i\n (\n    1 \n    \u2264 a_i, b_i \n    \u2264 n\n, \n    a_i \n     b_i\n)), which means\nthat there is a green edge from \n    a_i\n to \n    b_i\n. All unordered pairs of\n\n    (a_i, b_i)\n should be distinct and should also be different from the\npairs for the pink edges. Example Input 4 2 1 2 3 4 0 1 1 Output ? 1 3 ? 4 2 ?\n3 2 ! 3 Note In the example above the answer for the query \"? 1 3\" is 0, so\nthe edge is directed from 3 to 1. The answer for the query \"? 4 2\" is 1, so\nthe edge is directed from 4 to 2. The answer for the query \"? 3 2\" is 1, so\nthe edge is directed from 3 to 2. So there are green paths from node 3 to\nnodes 1 and 2 and there is a pink path from node 3 to node 4.\n\n",
        "cf_contest_id": 1142,
        "cf_index": "E",
        "cf_rating": 3200,
        "difficulty": 0,
        "cf_tags": [
            "graphs",
            "interactive"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 2 samples\r\n1 2\r\n3 4\r\n4\r\n3 1\r\n3 2\r\n4 2\r\n4 1\r\n",
                "3\r\n2\r\n3 1\r\n3 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 0 random\r\n0\r\n",
                "1\r\n0\r\n"
            ]
        ]
    }
]