[
    {
        "name": "Money Transfers",
        "description": "There are n banks in the city where Vasya lives, they are located in a circle,\nsuch that any two banks are neighbouring if their indices differ by no more\nthan 1. Also, bank 1 and bank n are neighbours if n > 1. No bank is a\nneighbour of itself. Vasya has an account in each bank. Its balance may be\nnegative, meaning Vasya owes some money to this bank. There is only one type\nof operations available: transfer some amount of money from any bank to\naccount in any neighbouring bank. There are no restrictions on the size of the\nsum being transferred or balance requirements to perform this operation. Vasya\ndoesn't like to deal with large numbers, so he asks you to determine the\nminimum number of operations required to change the balance of each bank\naccount to zero. It's guaranteed, that this is possible to achieve, that is,\nthe total balance of Vasya in all banks is equal to zero. Input The first line\nof the input contains a single integer n (1 \u2264 n \u2264 100 000) \u2014 the number of\nbanks. The second line contains n integers ai ( - 10^9 \u2264 ai \u2264 10^9), the i-th\nof them is equal to the initial balance of the account in the i-th bank. It's\nguaranteed that the sum of all ai is equal to 0. Output Print the minimum\nnumber of operations required to change balance in each bank to zero. Examples\nInput 3 5 0 -5 Output 1 Input 4 -1 0 1 0 Output 2 Input 4 1 2 3 -6 Output 3\nNote In the first sample, Vasya may transfer 5 from the first bank to the\nthird. In the second sample, Vasya may first transfer 1 from the third bank to\nthe second, and then 1 from the second to the first. In the third sample, the\nfollowing sequence provides the optimal answer: transfer 1 from the first bank\nto the second bank; transfer 3 from the second bank to the third; transfer 6\nfrom the third bank to the fourth.\n\n",
        "cf_contest_id": 675,
        "cf_index": "C",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n5 0 -5\r\n",
                "1\r\n"
            ],
            [
                "4\r\n-1 0 1 0\r\n",
                "2\r\n"
            ],
            [
                "4\r\n1 2 3 -6\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n0\r\n",
                "0\r\n"
            ],
            [
                "50\r\n108431864 128274949 -554057370 -384620666 -202862975 -803855410 -482167063 -55139054 -215901009 0 0 0 0 0 94325701 730397219 358214459 -673647271 -131397668 -377892440 0 0 0 0 0 -487994257 -360271553 639988328 489338210 -281060728 250208758 0 993242346 -213071841 -59752620 -864351041 -114363541 506279952 999648597 -173503559 -144629749 -559693009 0 -46793577 511999017 -343503822 -741715911 647437511 821346413 993112810\r\n",
                "36\r\n"
            ],
            [
                "6\r\n1 -1 1 -1 1 -1\r\n",
                "3\r\n"
            ]
        ]
    }
]