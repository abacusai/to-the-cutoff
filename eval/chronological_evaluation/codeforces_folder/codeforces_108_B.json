[
    {
        "name": "Datatypes",
        "description": "Tattah's youngest brother, Tuftuf, is new to programming. Since his older\nbrother is such a good programmer, his biggest dream is to outshine him.\nTuftuf is a student at the German University in Cairo (GUC) where he learns to\nwrite programs in Gava. Today, Tuftuf was introduced to Gava's unsigned\ninteger datatypes. Gava has n unsigned integer datatypes of sizes (in bits)\na1, a2, ... an. The i-th datatype have size ai bits, so it can represent every\ninteger between 0 and 2^ai - 1 inclusive. Tuftuf is thinking of learning a\nbetter programming language. If there exists an integer x, such that x fits in\nsome type i (in ai bits) and x\u00b7x does not fit in some other type j (in aj\nbits) where ai < aj, then Tuftuf will stop using Gava. Your task is to\ndetermine Tuftuf's destiny. Input The first line contains integer n (2 \u2264 n \u2264\n10^5) \u2014 the number of Gava's unsigned integer datatypes' sizes. The second\nline contains a single-space-separated list of n integers (1 \u2264 ai \u2264 10^9) \u2014\nsizes of datatypes in bits. Some datatypes may have equal sizes. Output Print\n\"YES\" if Tuftuf will stop using Gava, and \"NO\" otherwise. Examples Input 3 64\n16 32 Output NO Input 4 4 2 1 3 Output YES Note In the second example, x = 7\n(1112) fits in 3 bits, but x^2 = 49 (1100012) does not fit in 4 bits.\n\n",
        "cf_contest_id": 108,
        "cf_index": "B",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "math",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n64 16 32\r\n",
                "NO\r\n"
            ],
            [
                "4\r\n4 2 1 3\r\n",
                "YES\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n1 5 3 3 2\r\n",
                "YES\r\n"
            ],
            [
                "52\r\n474 24 24 954 9 234 474 114 24 114 234 24 114 114 234 9 9 24 9 54 234 54 9 954 474 9 54 54 54 234 9 114 24 54 114 954 954 474 24 54 54 234 234 474 474 24 114 9 954 954 954 474\r\n",
                "NO\r\n"
            ],
            [
                "56\r\n43 641 626 984 107 521 266 835 707 220 402 406 558 199 988 685 843 808 182 73 553 17 765 979 116 178 489 271 532 889 26 263 654 680 240 392 980 267 264 46 888 444 874 519 735 301 743 526 376 793 40 110 811 184 82 96\r\n",
                "YES\r\n"
            ],
            [
                "9\r\n20 44 92 8 20 380 8 188 764\r\n",
                "NO\r\n"
            ],
            [
                "43\r\n906 652 445 325 991 682 173 290 731 528 432 615 698 132 874 38 643 301 223 442 722 529 150 659 593 22 679 178 410 978 201 559 115 533 586 790 703 596 492 591 781 761 384\r\n",
                "YES\r\n"
            ],
            [
                "8\r\n421 250 398 257 512 329 25 972\r\n",
                "YES\r\n"
            ],
            [
                "2\r\n1000000000 999999999\r\n",
                "YES\r\n"
            ],
            [
                "7\r\n1 2 3 4 8 16 32\r\n",
                "YES\r\n"
            ],
            [
                "2\r\n1 1\r\n",
                "NO\r\n"
            ],
            [
                "2\r\n1 2\r\n",
                "NO\r\n"
            ],
            [
                "3\r\n1 2 2\r\n",
                "NO\r\n"
            ],
            [
                "3\r\n1 1 2\r\n",
                "NO\r\n"
            ]
        ]
    }
]