[
    {
        "name": "Strange Operation",
        "description": "Koa the Koala has a binary string \n    s\n of length \n    n\n. Koa can perform\nno more than \n    n-1\n (possibly zero) operations of the following form: In\none operation Koa selects positions \n    i\n and \n    i+1\n for some \n    i\n\nwith \n    1 \n    \u2264 i < |s|\n and sets \n    s_i\n to \n    max(s_i, s_i+1)\n. Then\nKoa deletes position \n    i+1\n from \n    s\n (after the removal, the remaining\nparts are concatenated). Note that after every operation the length of \n    s\n\ndecreases by \n    1\n. How many different binary strings can Koa obtain by\ndoing no more than \n    n-1\n (possibly zero) operations modulo \n    10^9+7\n\n(\n    1000000007\n)? Input The only line of input contains binary string\n\n    s\n (\n    1 \n    \u2264 |s| \n    \u2264 10^6\n). For all \n    i\n (\n    1 \n    \u2264 i \n    \u2264\n    |s|\n) \n    s_i = 0\n or \n    s_i = 1\n. Output On a single line print the\nanswer to the problem modulo \n    10^9+7\n (\n    1000000007\n). Examples Input\n000 Output 3 Input 0101 Output 6 Input 0001111 Output 16 Input 00101100011100\nOutput 477 Note In the first sample Koa can obtain binary strings: \n    0\n,\n\n    00\n and \n    000\n. In the second sample Koa can obtain binary strings:\n\n    1\n, \n    01\n, \n    11\n, \n    011\n, \n    101\n and \n    0101\n. For example:\nto obtain \n    01\n from \n    0101\n Koa can operate as follows: \n    0101\n    \n    \u2192 0(10)1 \n    \u2192 011 \n    \u2192 0(11) \n    \u2192\n    01\n. to obtain \n    11\n from \n    0101\n Koa can operate as follows: \n    0101\n    \n    \u2192 (01)01 \n    \u2192 101 \n    \u2192 1(01) \n    \u2192\n    11\n. Parentheses denote the two positions Koa selected in each operation.\n\n",
        "cf_contest_id": 1383,
        "cf_index": "E",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "data structures",
            "dp"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "000\r\n",
                "3\r\n"
            ],
            [
                "0101\r\n",
                "6\r\n"
            ],
            [
                "0001111\r\n",
                "16\r\n"
            ],
            [
                "00101100011100\r\n",
                "477\r\n"
            ]
        ],
        "private_cases": [
            [
                "0\r\n",
                "1\r\n"
            ],
            [
                "11\r\n",
                "2\r\n"
            ],
            [
                "01011111111101101100000100000000100000111001011011110110110010010001011110100011000011100100010001\r\n",
                "911929203\r\n"
            ],
            [
                "0100111100100101001101111001011101011001111100110111101110001001010111100010011100011011101111010111111010010101000001110110111110010001100010101110111111000011101110000000001101010011000111111100000000000000001010011111010111\r\n",
                "975171002\r\n"
            ],
            [
                "10100011001101100010000111001011\r\n",
                "259067\r\n"
            ]
        ]
    }
]