[
    {
        "name": "Three Religions",
        "description": "During the archaeological research in the Middle East you found the traces of\nthree ancient religions: First religion, Second religion and Third religion.\nYou compiled the information on the evolution of each of these beliefs, and\nyou now wonder if the followers of each religion could coexist in peace. The\nWord of Universe is a long word containing the lowercase English characters\nonly. At each moment of time, each of the religion beliefs could be described\nby a word consisting of lowercase English characters. The three religions can\ncoexist in peace if their descriptions form disjoint subsequences of the Word\nof Universe. More formally, one can paint some of the characters of the Word\nof Universe in three colors: \n    1\n, \n    2\n, \n    3\n, so that each character\nis painted in at most one color, and the description of the \n    i\n-th\nreligion can be constructed from the Word of Universe by removing all\ncharacters that aren't painted in color \n    i\n. The religions however evolve.\nIn the beginning, each religion description is empty. Every once in a while,\neither a character is appended to the end of the description of a single\nreligion, or the last character is dropped from the description. After each\nchange, determine if the religions could coexist in peace. Input The first\nline of the input contains two integers \n    n, q\n (\n    1 \n    \u2264 n \n    \u2264\n    100\n     000\n, \n    1 \n    \u2264 q \n    \u2264 1000\n) \u2014 the length of the Word of\nUniverse and the number of religion evolutions, respectively. The following\nline contains the Word of Universe \u2014 a string of length \n    n\n consisting of\nlowercase English characters. Each of the following line describes a single\nevolution and is in one of the following formats:  \n    i\n \n    c\n (\n    i\n    \n    \u2208\n    \n    1, 2, 3\n, \n    c \n    \u2208\n    \n    \n    \ud835\ude8a, \n    \ud835\ude8b,\n    \n    \u2026, \n    \ud835\udea3\n: append the character \n    c\n to the end of\n\n    i\n-th religion description. - \n    i\n (\n    i \n    \u2208\n    \n    1, 2, 3\n) \u2013\nremove the last character from the \n    i\n-th religion description. You can\nassume that the pattern is non-empty. You can assume that no religion will\nhave description longer than \n    250\n characters. Output Write \n    q\n lines.\nThe \n    i\n-th of them should be YES if the religions could coexist in peace\nafter the \n    i\n-th evolution, or NO otherwise. You can print each character\nin any case (either upper or lower). Examples Input 6 8 abdabc  1 a  1 d\n 2 b  2 c  3 a  3 b  1 c \u00ad 2 Output YES YES YES YES YES YES NO YES\nInput 6 8 abbaab  1 a  2 a  3 a  1 b  2 b  3 b \u00ad 1  2 z Output\nYES YES YES YES YES NO YES NO Note In the first example, after the 6th\nevolution the religion descriptions are: ad, bc, and ab. The following figure\nshows how these descriptions form three disjoint subsequences of the Word of\nUniverse:\n\n",
        "cf_contest_id": 1149,
        "cf_index": "B",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 8\r\nabdabc\r\n+ 1 a\r\n+ 1 d\r\n+ 2 b\r\n+ 2 c\r\n+ 3 a\r\n+ 3 b\r\n+ 1 c\r\n- 2\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\n"
            ],
            [
                "6 8\r\nabbaab\r\n+ 1 a\r\n+ 2 a\r\n+ 3 a\r\n+ 1 b\r\n+ 2 b\r\n+ 3 b\r\n- 1\r\n+ 2 z\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\nz\r\n+ 3 z\r\n",
                "YES\r\n"
            ],
            [
                "1 1\r\nt\r\n+ 2 p\r\n",
                "NO\r\n"
            ],
            [
                "2 12\r\naa\r\n+ 1 a\r\n+ 2 a\r\n+ 3 a\r\n- 1\r\n+ 1 a\r\n- 2\r\n+ 2 a\r\n- 3\r\n+ 3 a\r\n+ 2 a\r\n- 1\r\n- 3\r\n",
                "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\n"
            ],
            [
                "2 10\r\nuh\r\n+ 1 h\r\n+ 2 u\r\n+ 3 h\r\n- 1\r\n- 2\r\n+ 2 h\r\n+ 3 u\r\n- 2\r\n+ 1 u\r\n- 3\r\n",
                "YES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\n"
            ]
        ]
    }
]