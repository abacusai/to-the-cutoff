[
    {
        "name": "Shifting Sort",
        "description": "The new generation external memory contains an array of integers \n    a[1\n    \n    \u2026 n] = [a_1, a_2, \n    \u2026, a_n]\n. This type of memory does not\nsupport changing the value of an arbitrary element. Instead, it allows you to\ncut out any segment of the given array, cyclically shift (rotate) it by any\noffset and insert it back into the same place. Technically, each cyclic shift\nconsists of two consecutive actions: You may select arbitrary indices \n    l\n\nand \n    r\n (\n    1 \n    \u2264 l < r \n    \u2264 n\n) as the boundaries of the segment.\nThen you replace the segment \n    a[l \n    \u2026 r]\n with it's cyclic shift to\nthe left by an arbitrary offset \n    d\n. The concept of a cyclic shift can be\nalso explained by following relations: the sequence \n    [1, 4, 1, 3]\n is a\ncyclic shift of the sequence \n    [3, 1, 4, 1]\n to the left by the offset\n\n    1\n and the sequence \n    [4, 1, 3, 1]\n is a cyclic shift of the sequence\n\n    [3, 1, 4, 1]\n to the left by the offset \n    2\n. For example, if \n    a =\n    [1, \n    3, 2, 8, 5]\n, then choosing \n    l = 2\n, \n    r = 4\n and\n\n    d = 2\n yields a segment \n    a[2 \n    \u2026 4] = [3, 2, 8]\n. This segment\nis then shifted by the offset \n    d = 2\n to the left, and you get a segment\n\n    [8, 3, 2]\n which then takes the place of of the original elements of the\nsegment. In the end you get \n    a = [1, \n    8, 3, 2, 5]\n. Sort\nthe given array \n    a\n using no more than \n    n\n cyclic shifts of any of its\nsegments. Note that you don't need to minimize the number of cyclic shifts.\nAny method that requires \n    n\n or less cyclic shifts will be accepted. Input\nThe first line contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014\nthe number of test cases. The next \n    2t\n lines contain the descriptions of\nthe test cases. The first line of each test case description contains an\ninteger \n    n\n (\n    2 \n    \u2264 n \n    \u2264 50\n) \u2014 the length of the array. The\nsecond line consists of space-separated elements of the array \n    a_i\n\n(\n    -10^9 \n    \u2264 a_i \n    \u2264 10^9\n). Elements of array \n    a\n may repeat and\ndon't have to be unique. Output Print \n    t\n answers to all input test cases.\nThe first line of the answer of each test case should contain an integer\n\n    k\n (\n    0 \n    \u2264 k \n    \u2264 n\n) \u2014 the number of actions to sort the array.\nThe next \n    k\n lines should contain descriptions of the actions formatted as\n\"\n    l\n \n    r\n \n    d\n\" (without quotes) where \n    l\n and \n    r\n (\n    1\n    \n    \u2264 l < r \n    \u2264 n\n) are the boundaries of the segment being shifted, while\n\n    d\n (\n    1 \n    \u2264 d \n    \u2264 r - l\n) is the offset value. Please remember\nthat only the cyclic shifts to the left are considered so the chosen segment\nwill be shifted by the offset \n    d\n to the to the left. Note that you are\nnot required to find the minimum number of cyclic shifts needed for sorting.\nAny sorting method where the number of shifts does not exceed \n    n\n will be\naccepted. If the given array \n    a\n is already sorted, one of the possible\nanswers is \n    k = 0\n and an empty sequence of cyclic shifts. If there are\nseveral possible answers, you may print any of them. Example Input 4 2 2 1 3 1\n2 1 4 2 4 1 3 5 2 5 1 4 3 Output 1 1 2 1 1 1 3 2 3 2 4 1 2 3 1 1 3 2 4 2 4 2 1\n5 3 1 2 1 1 3 1 Note Explanation of the fourth data set in the example: The\nsegment \n    a[2 \n    \u2026 4]\n is selected and is shifted to the left by\n\n    2\n: \n    [2, \n    5, 1, 4, 3] \n    \u27f6 [2,\n    \n    4, 5, 1, 3]\n The segment \n    a[1 \n    \u2026 5]\n is then\nselected and is shifted to the left by \n    3\n: \n    [\n    2, 4, 5, 1,\n    3] \n    \u27f6 [\n    1, 3, 2, 4, 5]\n After that the\nsegment \n    a[1 \n    \u2026 2]\n is selected and is shifted to the left by\n\n    1\n: \n    [\n    1, 3, 2, 4, 5] \n    \u27f6\n    [\n    3, 1, 2, 4, 5]\n And in the end the segment \n    a[1 \n    \u2026\n    3]\n is selected and is shifted to the left by \n    1\n: \n    [\n    3,\n    1, 2, 4, 5] \n    \u27f6 [\n    1, 2, 3, 4, 5]\n\n\n",
        "cf_contest_id": 1579,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2\r\n2 1\r\n3\r\n1 2 1\r\n4\r\n2 4 1 3\r\n5\r\n2 5 1 4 3\r\n",
                "1 1 2 1\r\n1 2 3 1\r\n2 1 3 2 3 4 1\r\n3 1 3 2 3 5 2 4 5 1\r\n"
            ]
        ],
        "private_cases": []
    }
]