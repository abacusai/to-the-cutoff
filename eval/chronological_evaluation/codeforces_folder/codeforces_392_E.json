[
    {
        "name": "Deleting Substrings",
        "description": "SmallR likes a game called \"Deleting Substrings\". In the game you are given a\nsequence of integers w, you can modify the sequence and get points. The only\ntype of modification you can perform is (unexpected, right?) deleting\nsubstrings. More formally, you can choose several contiguous elements of w and\ndelete them from the sequence. Let's denote the sequence of chosen elements as\nwl, wl + 1, ..., wr. They must meet the conditions: the equality |wi - wi + 1|\n= 1 must hold for all i (l \u2264 i < r); the inequality 2\u00b7wi - wi + 1 - wi - 1 \u2265 0\nmust hold for all i (l < i < r). After deleting the chosen substring of w, you\ngain vr - l + 1 points. You can perform the described operation again and\nagain while proper substrings exist. Also you can end the game at any time.\nYour task is to calculate the maximum total score you can get in the game.\nInput The first line contains a single integer n (1 \u2264 n \u2264 400) \u2014 the initial\nlength of w. The second line contains n integers v1, v2, ..., vn (0 \u2264 |vi| \u2264\n2000) \u2014 the costs of operations. The next line contains n integers w1, w2,\n..., wn (1 \u2264 wi \u2264 10^9) \u2014 the initial w. Output Print a single integer \u2014 the\nmaximum total score you can get. Examples Input 3 0 0 3 1 2 1 Output 3 Input 6\n1 4 5 6 7 1000 2 1 1 2 2 3 Output 12\n\n",
        "cf_contest_id": 392,
        "cf_index": "E",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n0 0 3\r\n1 2 1\r\n",
                "3"
            ],
            [
                "6\r\n1 4 5 6 7 1000\r\n2 1 1 2 2 3\r\n",
                "12"
            ]
        ],
        "private_cases": [
            [
                "8\r\n1 2 10 1 1 1 1 1\r\n1 1 1 2 3 2 3 2\r\n",
                "22"
            ],
            [
                "10\r\n1 2 3 10 11 12 13 1 1 1\r\n1 2 1000000000 3 2 10 3 2 1 2\r\n",
                "22"
            ],
            [
                "12\r\n-1 -1 -1 -1 100 -1 -1 -1 -1 -1 -1 -1\r\n1 2 51 101 102 101 52 53 3 2 1 999\r\n",
                "98"
            ],
            [
                "1\r\n-1\r\n12\r\n",
                "0"
            ],
            [
                "1\r\n1\r\n12\r\n",
                "1"
            ]
        ]
    }
]