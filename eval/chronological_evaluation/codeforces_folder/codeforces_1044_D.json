[
    {
        "name": "Deduction Queries",
        "description": "There is an array \n    a\n of \n    2^30\n integers, indexed from \n    0\n to\n\n    2^30-1\n. Initially, you know that \n    0 \n    \u2264 a_i < 2^30\n (\n    0\n    \n    \u2264 i < 2^30\n), but you do not know any of the values. Your task is to\nprocess queries of two types: 1 l r x: You are informed that the bitwise xor\nof the subarray \n    [l, r]\n (ends inclusive) is equal to \n    x\n. That is,\n\n    a_l \n    \u2295 a_l+1\n    \u2295\n    \u2026\n    \u2295 a_r-1\n    \u2295 a_r =\n    x\n, where \n    \u2295\n is the bitwise xor operator. In some cases, the\nreceived update contradicts past updates. In this case, you should ignore the\ncontradicting update (the current update). 2 l r: You are asked to output the\nbitwise xor of the subarray \n    [l, r]\n (ends inclusive). If it is still\nimpossible to know this value, considering all past updates, then output\n\n    -1\n.Note that the queries are encoded. That is, you need to write an\nonline solution. Input The first line contains a single integer \n    q\n (\n    1\n    \n    \u2264 q \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of queries. Each of the next\n\n    q\n lines describes a query. It contains one integer \n    t\n (\n    1 \n    \u2264\n    t \n    \u2264 2\n) \u2014 the type of query. The given queries will be encoded in the\nfollowing way: let \n    last\n be the answer to the last query of the second\ntype that you have answered (initially, \n    last = 0\n). If the last answer\nwas \n    -1\n, set \n    last = 1\n. If \n    t = 1\n, three integers follow,\n\n    l'\n, \n    r'\n, and \n    x'\n (\n    0 \n    \u2264 l', r', x' < 2^30\n), meaning\nthat you got an update. First, do the following: \n    l = l' \n    \u2295 last\n,\n\n    r = r' \n    \u2295 last\n, \n    x = x' \n    \u2295 last\n and, if \n    l > r\n,\nswap \n    l\n and \n    r\n. This means you got an update that the bitwise xor of\nthe subarray \n    [l, r]\n is equal to \n    x\n (notice that you need to ignore\nupdates that contradict previous updates). If \n    t = 2\n, two integers\nfollow, \n    l'\n and \n    r'\n (\n    0 \n    \u2264 l', r' < 2^30\n), meaning that\nyou got a query. First, do the following: \n    l = l' \n    \u2295 last\n, \n    r =\n    r' \n    \u2295 last\n and, if \n    l > r\n, swap \n    l\n and \n    r\n. For the\ngiven query, you need to print the bitwise xor of the subarray \n    [l, r]\n.\nIf it is impossible to know, print \n    -1\n. Don't forget to change the value\nof \n    last\n. It is guaranteed there will be at least one query of the second\ntype. Output After every query of the second type, output the bitwise xor of\nthe given subarray or \n    -1\n if it is still impossible to know. Examples\nInput 12 2 1 2 2 1 1073741822 1 0 3 4 2 0 0 2 3 3 2 0 3 1 6 7 3 2 4 4 1 0 2 1\n2 0 0 2 4 4 2 0 0 Output -1 -1 -1 -1 5 -1 6 3 5 Input 4 1 5 5 9 1 6 6 5 1 6 5\n10 2 6 5 Output 12 Note In the first example, the real queries (without being\nencoded) are: 12 2 1 2 2 0 1073741823 1 1 2 5 2 1 1 2 2 2 2 1 2 1 2 3 6 2 1 1\n1 1 3 0 2 1 1 2 2 2 2 3 3 The answers for the first two queries are \n    -1\n\nbecause we don't have any such information on the array initially. The first\nupdate tells us \n    a_1 \n    \u2295 a_2 = 5\n. Note that we still can't be\ncertain about the values \n    a_1\n or \n    a_2\n independently (for example, it\ncould be that \n    a_1 = 1, a_2 = 4\n, and also \n    a_1 = 3, a_2 = 6\n). After\nwe receive all three updates, we have enough information to deduce \n    a_1,\n    a_2, a_3\n independently. In the second example, notice that after the first\ntwo updates we already know that \n    a_5 \n    \u2295 a_6 = 12\n, so the third\nupdate is contradicting, and we ignore it.\n\n",
        "cf_contest_id": 1044,
        "cf_index": "D",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dsu"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "12\r\n2 1 2\r\n2 1 1073741822\r\n1 0 3 4\r\n2 0 0\r\n2 3 3\r\n2 0 3\r\n1 6 7 3\r\n2 4 4\r\n1 0 2 1\r\n2 0 0\r\n2 4 4\r\n2 0 0\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n5\r\n-1\r\n6\r\n3\r\n5\r\n"
            ],
            [
                "4\r\n1 5 5 9\r\n1 6 6 5\r\n1 6 5 10\r\n2 6 5\r\n",
                "12\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2 2 2\r\n",
                "-1\r\n"
            ],
            [
                "9\r\n1 0 0 1073741823\r\n1 1 1 987654321\r\n1 2 2 123456789\r\n2 0 0\r\n2 1073741822 1073741822\r\n2 987654323 987654323\r\n2 123456788 123456789\r\n2 86087500 86087503\r\n2 1032168868 1032168870\r\n",
                "1073741823\r\n987654321\r\n123456789\r\n86087502\r\n1032168868\r\n41572955\r\n"
            ]
        ]
    }
]