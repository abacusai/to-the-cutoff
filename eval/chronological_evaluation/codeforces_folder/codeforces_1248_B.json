[
    {
        "name": "Grow The Tree",
        "description": "Gardener Alexey teaches competitive programming to high school students. To\ncongratulate Alexey on the Teacher's Day, the students have gifted him a\ncollection of wooden sticks, where every stick has an integer length. Now\nAlexey wants to grow a tree from them. The tree looks like a polyline on the\nplane, consisting of all sticks. The polyline starts at the point \n    (0,\n    0)\n. While constructing the polyline, Alexey will attach sticks to it one by\none in arbitrary order. Each stick must be either vertical or horizontal (that\nis, parallel to \n    OX\n or \n    OY\n axis). It is not allowed for two\nconsecutive sticks to be aligned simultaneously horizontally or simultaneously\nvertically. See the images below for clarification. Alexey wants to make a\npolyline in such a way that its end is as far as possible from \n    (0, 0)\n.\nPlease help him to grow the tree this way. Note that the polyline defining the\nform of the tree may have self-intersections and self-touches, but it can be\nproved that the optimal answer does not contain any self-intersections or\nself-touches. Input The first line contains an integer \n    n\n (\n    1 \n    \u2264 n\n    \n    \u2264 100\n     000\n) \u2014 the number of sticks Alexey got as a present. The\nsecond line contains \n    n\n integers \n    a_1, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i\n    \n    \u2264 10\n     000\n) \u2014 the lengths of the sticks. Output Print one integer \u2014\nthe square of the largest possible distance from \n    (0, 0)\n to the tree end.\nExamples Input 3 1 2 3 Output 26 Input 4 1 1 2 2 Output 20 Note The following\npictures show optimal trees for example tests. The squared distance in the\nfirst example equals \n    5 \n    \u00b7 5 + 1 \n    \u00b7 1 = 26\n, and in the second\nexample \n    4 \n    \u00b7 4 + 2 \n    \u00b7 2 = 20\n.\n\n",
        "cf_contest_id": 1248,
        "cf_index": "B",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n1 2 3\r\n",
                "26\r\n"
            ],
            [
                "4\r\n1 1 2 2\r\n",
                "20\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2359\r\n",
                "5564881\r\n"
            ],
            [
                "10\r\n5957 94 8220 2463 9623 7028 9656 677 8373 1126\r\n",
                "1946850489\r\n"
            ],
            [
                "10\r\n9381 6234 2965 9236 4685 3101 5832 7369 5233 5308\r\n",
                "1901303968\r\n"
            ],
            [
                "10\r\n9961 9927 9980 9941 9992 9910 9968 9956 9925 9975\r\n",
                "4953631657\r\n"
            ],
            [
                "10\r\n9906 9903 10000 9998 9936 9952 9924 9939 9917 9966\r\n",
                "4944292421\r\n"
            ],
            [
                "10\r\n9941 9927 77 9980 9961 9992 73 26 56 28\r\n",
                "2480207201\r\n"
            ],
            [
                "10\r\n32 9903 1 9998 8 9906 33 9936 69 10000\r\n",
                "2474386498\r\n"
            ],
            [
                "11\r\n2367 2279 5630 8823 5312 8316 2915 6412 4111 7540 4263\r\n",
                "2020697314\r\n"
            ],
            [
                "11\r\n8495 8420 6184 8301 373 7093 7602 3104 4074 8619 7406\r\n",
                "2819444233\r\n"
            ],
            [
                "11\r\n9991 9968 9984 9924 9915 9925 9951 9901 9925 9903 9901\r\n",
                "6023953472\r\n"
            ],
            [
                "11\r\n9969 9945 9994 9914 9959 10000 9928 9985 9973 9939 9933\r\n",
                "6051630681\r\n"
            ],
            [
                "11\r\n15 12 9915 40 63 9984 9968 9924 9925 11 9991\r\n",
                "3564945730\r\n"
            ],
            [
                "11\r\n2 9969 10000 6 19 9994 9914 9945 9959 4 74\r\n",
                "3573778986\r\n"
            ]
        ]
    }
]