[
    {
        "name": "New Year and Social Network",
        "description": "Donghyun's new social network service (SNS) contains \n    n\n users numbered\n\n    1, 2, \n    \u2026, n\n. Internally, their network is a tree graph, so there\nare \n    n-1\n direct connections between each user. Each user can reach every\nother users by using some sequence of direct connections. From now on, we will\ndenote this primary network as \n    T_1\n. To prevent a possible server\nbreakdown, Donghyun created a backup network \n    T_2\n, which also connects\nthe same \n    n\n users via a tree graph. If a system breaks down, exactly one\nedge \n    e \n    \u2208 T_1\n becomes unusable. In this case, Donghyun will protect\nthe edge \n    e\n by picking another edge \n    f \n    \u2208 T_2\n, and add it to the\nexisting network. This new edge should make the network be connected again.\nDonghyun wants to assign a replacement edge \n    f \n    \u2208 T_2\n for as many\nedges \n    e \n    \u2208 T_1\n as possible. However, since the backup network\n\n    T_2\n is fragile, \n    f \n    \u2208 T_2\n can be assigned as the replacement\nedge for at most one edge in \n    T_1\n. With this restriction, Donghyun wants\nto protect as many edges in \n    T_1\n as possible. Formally, let \n    E(T)\n be\nan edge set of the tree \n    T\n. We consider a bipartite graph with two parts\n\n    E(T_1)\n and \n    E(T_2)\n. For \n    e \n    \u2208 E(T_1), f \n    \u2208 E(T_2)\n, there\nis an edge connecting \n    e, f\n if and only if graph \n    T_1 -\n    \n    \n    e\n    \n     + \n    \n    f\n is a tree. You should find a maximum matching in\nthis bipartite graph. Input The first line contains an integer \n    n\n (\n    2\n    \n    \u2264 n \n    \u2264 250\n     000\n), the number of users. In the next \n    n-1\n\nlines, two integers \n    a_i\n, \n    b_i\n (\n    1 \n    \u2264 a_i, b_i \n    \u2264 n\n) are\ngiven. Those two numbers denote the indices of the vertices connected by the\ncorresponding edge in \n    T_1\n. In the next \n    n-1\n lines, two integers\n\n    c_i\n, \n    d_i\n (\n    1 \n    \u2264 c_i, d_i \n    \u2264 n\n) are given. Those two\nnumbers denote the indices of the vertices connected by the corresponding edge\nin \n    T_2\n. It is guaranteed that both edge sets form a tree of size\n\n    n\n. Output In the first line, print the number \n    m\n (\n    0 \n    \u2264 m <\n    n\n), the maximum number of edges that can be protected. In the next \n    m\n\nlines, print four integers \n    a_i, b_i, c_i, d_i\n. Those four numbers denote\nthat the edge \n    (a_i, b_i)\n in \n    T_1\n is will be replaced with an edge\n\n    (c_i, d_i)\n in \n    T_2\n. All printed edges should belong to their\nrespective network, and they should link to distinct edges in their respective\nnetwork. If one removes an edge \n    (a_i, b_i)\n from \n    T_1\n and adds edge\n\n    (c_i, d_i)\n from \n    T_2\n, the network should remain connected. The\norder of printing the edges or the order of vertices in each edge does not\nmatter. If there are several solutions, you can print any. Examples Input 4 1\n2 2 3 4 3 1 3 2 4 1 4 Output 3 3 2 4 2 2 1 1 3 4 3 1 4 Input 5 1 2 2 4 3 4 4 5\n1 2 1 3 1 4 1 5 Output 4 2 1 1 2 3 4 1 3 4 2 1 4 5 4 1 5 Input 9 7 9 2 8 2 1 7\n5 4 7 2 4 9 6 3 9 1 8 4 8 2 9 9 5 7 6 1 3 4 6 5 3 Output 8 4 2 9 2 9 7 6 7 5 7\n5 9 6 9 4 6 8 2 8 4 3 9 3 5 2 1 1 8 7 4 1 3\n\n",
        "cf_contest_id": 1284,
        "cf_index": "F",
        "cf_rating": 3200,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "graph matchings",
            "graphs",
            "math",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "4\r\n1 2\r\n2 3\r\n4 3\r\n1 3\r\n2 4\r\n1 4\r\n",
                "3\r\n3 2 3 1\r\n4 3 2 4\r\n2 1 4 1\r\n"
            ],
            [
                "5\r\n1 2\r\n2 4\r\n3 4\r\n4 5\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n",
                "4\r\n2 1 2 1\r\n3 4 3 1\r\n4 2 4 1\r\n5 4 5 1\r\n"
            ],
            [
                "9\r\n7 9\r\n2 8\r\n2 1\r\n7 5\r\n4 7\r\n2 4\r\n9 6\r\n3 9\r\n1 8\r\n4 8\r\n2 9\r\n9 5\r\n7 6\r\n1 3\r\n4 6\r\n5 3\r\n",
                "8\r\n9 7 7 6\r\n6 9 6 4\r\n4 2 4 8\r\n8 2 8 1\r\n7 4 2 9\r\n5 7 9 5\r\n3 9 5 3\r\n2 1 3 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 2\r\n1 2\r\n",
                "1\r\n2 1 2 1\r\n"
            ],
            [
                "6\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n1 6\r\n6 5\r\n5 4\r\n4 3\r\n3 2\r\n",
                "5\r\n3 2 2 3\r\n4 3 3 4\r\n5 4 4 5\r\n6 5 5 6\r\n2 1 6 1\r\n"
            ],
            [
                "4\r\n1 2\r\n2 4\r\n4 3\r\n1 3\r\n1 4\r\n2 4\r\n",
                "3\r\n3 4 3 1\r\n4 2 2 4\r\n2 1 4 1\r\n"
            ],
            [
                "4\r\n1 2\r\n2 4\r\n4 3\r\n1 3\r\n1 2\r\n2 4\r\n",
                "3\r\n3 4 3 1\r\n4 2 4 2\r\n2 1 2 1\r\n"
            ]
        ]
    }
]