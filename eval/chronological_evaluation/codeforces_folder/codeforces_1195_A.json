[
    {
        "name": "Drinks Choosing",
        "description": "Old timers of Summer Informatics School can remember previous camps in which\neach student was given a drink of his choice on the vechorka (late-evening\nmeal). Or may be the story was more complicated? There are \n    n\n students\nliving in a building, and for each of them the favorite drink \n    a_i\n is\nknown. So you know \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n, where\n\n    a_i\n (\n    1 \n    \u2264 a_i \n    \u2264 k\n) is the type of the favorite drink of the\n\n    i\n-th student. The drink types are numbered from \n    1\n to \n    k\n.\nThere are infinite number of drink sets. Each set consists of exactly two\nportions of the same drink. In other words, there are \n    k\n types of drink\nsets, the \n    j\n-th type contains two portions of the drink \n    j\n. The\navailable number of sets of each of the \n    k\n types is infinite. You know\nthat students will receive the minimum possible number of sets to give all\nstudents exactly one drink. Obviously, the number of sets will be exactly\n\n    \u2308\n    n/2\n    \u2309\n, where \n    \u2308 x \n    \u2309\n is\n\n    x\n rounded up. After students receive the sets, they will distribute\ntheir portions by their choice: each student will get exactly one portion.\nNote, that if \n    n\n is odd then one portion will remain unused and the\nstudents' teacher will drink it. What is the maximum number of students that\ncan get their favorite drink if \n    \u2308\n    n/2\n    \u2309\n sets\nwill be chosen optimally and students will distribute portions between\nthemselves optimally? Input The first line of the input contains two integers\n\n    n\n and \n    k\n (\n    1 \n    \u2264 n, k \n    \u2264 1\n     000\n) \u2014 the number of\nstudents in the building and the number of different drinks. The next \n    n\n\nlines contain student's favorite drinks. The \n    i\n-th line contains a single\ninteger from \n    1\n to \n    k\n \u2014 the type of the favorite drink of the\n\n    i\n-th student. Output Print exactly one integer \u2014 the maximum number of\nstudents that can get a favorite drink. Examples Input 5 3 1 3 1 1 2 Output 4\nInput 10 3 2 1 3 2 3 3 1 3 1 2 Output 9 Note In the first example, students\ncould choose three sets with drinks \n    1\n, \n    1\n and \n    2\n (so they will\nhave two sets with two drinks of the type \n    1\n each and one set with two\ndrinks of the type \n    2\n, so portions will be \n    1, 1, 1, 1, 2, 2\n). This\nway all students except the second one will get their favorite drinks. Another\npossible answer is sets with drinks \n    1\n, \n    2\n and \n    3\n. In this case\nthe portions will be \n    1, 1, 2, 2, 3, 3\n. Then all the students except one\nwill gain their favorite drinks. The only student that will not gain the\nfavorite drink will be a student with \n    a_i = 1\n (i.e. the first, the third\nor the fourth).\n\n",
        "cf_contest_id": 1195,
        "cf_index": "A",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 3\r\n1\r\n3\r\n1\r\n1\r\n2\r\n",
                "4\r\n"
            ],
            [
                "10 3\r\n2\r\n1\r\n3\r\n2\r\n3\r\n3\r\n1\r\n3\r\n1\r\n2\r\n",
                "9\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "10 10\r\n1\r\n9\r\n7\r\n6\r\n2\r\n4\r\n7\r\n8\r\n1\r\n3\r\n",
                "7\r\n"
            ],
            [
                "1 1000\r\n548\r\n",
                "1\r\n"
            ],
            [
                "8 3\r\n1\r\n1\r\n1\r\n2\r\n2\r\n2\r\n3\r\n3\r\n",
                "7\r\n"
            ],
            [
                "15 5\r\n1\r\n1\r\n1\r\n2\r\n2\r\n2\r\n3\r\n3\r\n3\r\n4\r\n4\r\n4\r\n5\r\n5\r\n5\r\n",
                "13\r\n"
            ],
            [
                "3 1000\r\n1000\r\n1000\r\n1000\r\n",
                "3\r\n"
            ],
            [
                "20 4\r\n1\r\n1\r\n1\r\n1\r\n1\r\n2\r\n2\r\n2\r\n2\r\n2\r\n3\r\n3\r\n3\r\n3\r\n3\r\n4\r\n4\r\n4\r\n4\r\n4\r\n",
                "18\r\n"
            ],
            [
                "4 5\r\n5\r\n5\r\n5\r\n4\r\n",
                "3\r\n"
            ],
            [
                "14 4\r\n1\r\n1\r\n1\r\n1\r\n1\r\n2\r\n2\r\n2\r\n2\r\n2\r\n3\r\n3\r\n4\r\n4\r\n",
                "13\r\n"
            ],
            [
                "16 4\r\n1\r\n1\r\n1\r\n1\r\n1\r\n2\r\n2\r\n2\r\n2\r\n2\r\n3\r\n3\r\n3\r\n3\r\n4\r\n4\r\n",
                "15\r\n"
            ],
            [
                "16 6\r\n1\r\n1\r\n1\r\n2\r\n2\r\n2\r\n3\r\n3\r\n3\r\n4\r\n4\r\n4\r\n5\r\n5\r\n6\r\n6\r\n",
                "14\r\n"
            ],
            [
                "12 4\r\n1\r\n1\r\n1\r\n2\r\n2\r\n2\r\n3\r\n3\r\n3\r\n4\r\n4\r\n4\r\n",
                "10\r\n"
            ]
        ]
    }
]