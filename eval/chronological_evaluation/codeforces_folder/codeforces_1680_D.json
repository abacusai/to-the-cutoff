[
    {
        "name": "Dog Walking",
        "description": "You are walking with your dog, and now you are at the promenade. The promenade\ncan be represented as an infinite line. Initially, you are in the point\n\n    0\n with your dog. You decided to give some freedom to your dog, so you\nuntied her and let her run for a while. Also, you watched what your dog is\ndoing, so you have some writings about how she ran. During the \n    i\n-th\nminute, the dog position changed from her previous position by the value\n\n    a_i\n (it means, that the dog ran for \n    a_i\n meters during the\n\n    i\n-th minute). If \n    a_i\n is positive, the dog ran \n    a_i\n meters to\nthe right, otherwise (if \n    a_i\n is negative) she ran \n    a_i\n meters to\nthe left. During some minutes, you were chatting with your friend, so you\ndon't have writings about your dog movement during these minutes. These values\n\n    a_i\n equal zero. You want your dog to return to you after the end of the\nwalk, so the destination point of the dog after \n    n\n minutes should be\n\n    0\n. Now you are wondering: what is the maximum possible number of\ndifferent integer points of the line your dog could visit on her way, if you\nreplace every \n    0\n with some integer from \n    -k\n to \n    k\n (and your dog\nshould return to \n    0\n after the walk)? The dog visits an integer point if\nshe runs through that point or reaches in it at the end of any minute. Point\n\n    0\n is always visited by the dog, since she is initially there. If the dog\ncannot return to the point \n    0\n after \n    n\n minutes regardless of the\nintegers you place, print -1. Input The first line of the input contains two\nintegers \n    n\n and \n    k\n (\n    1 \n    \u2264 n \n    \u2264 3000; 1 \n    \u2264 k \n    \u2264\n    10^9\n) \u2014 the number of minutes and the maximum possible speed of your dog\nduring the minutes without records. The second line of the input contains\n\n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    -10^9 \n    \u2264 a_i \n    \u2264\n    10^9\n), where \n    a_i\n is the number of meters your dog ran during the\n\n    i\n-th minutes (to the left if \n    a_i\n is negative, to the right\notherwise). If \n    a_i = 0\n then this value is unknown and can be replaced\nwith any integer from the range \n    [-k; k]\n. Output If the dog cannot return\nto the point \n    0\n after \n    n\n minutes regardless of the set of integers\nyou place, print -1. Otherwise, print one integer \u2014 the maximum number of\ndifferent integer points your dog could visit if you fill all the unknown\nvalues optimally and the dog will return to the point \n    0\n at the end of\nthe walk. Examples Input 3 2 5 0 -4 Output 6 Input 6 4 1 -2 0 3 -4 5 Output 7\nInput 3 1000000000 0 0 0 Output 1000000001 Input 5 9 -7 -3 8 12 0 Output -1\nInput 5 3 -1 0 3 3 0 Output 7 Input 5 4 0 2 0 3 0 Output 9\n\n",
        "cf_contest_id": 1680,
        "cf_index": "D",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2\r\n5 0 -4\r\n",
                "6\r\n"
            ],
            [
                "6 4\r\n1 -2 0 3 -4 5\r\n",
                "7\r\n"
            ],
            [
                "3 1000000000\r\n0 0 0\r\n",
                "1000000001\r\n"
            ],
            [
                "5 9\r\n-7 -3 8 12 0\r\n",
                "-1\r\n"
            ],
            [
                "5 3\r\n-1 0 3 3 0\r\n",
                "7\r\n"
            ],
            [
                "5 4\r\n0 2 0 3 0\r\n",
                "9\r\n"
            ]
        ],
        "private_cases": [
            [
                "4 5\r\n4 5 -1 2\r\n",
                "-1\r\n"
            ],
            [
                "2 4\r\n3 0\r\n",
                "4\r\n"
            ],
            [
                "4 5\r\n-6 -2 3 6\r\n",
                "-1\r\n"
            ],
            [
                "10 99\r\n10 53 -83 -15 28 -47 -75 62 0 -8\r\n",
                "193\r\n"
            ],
            [
                "10 26\r\n-970 -422 875 234 965 0 0 -674 -186 0\r\n",
                "-1\r\n"
            ],
            [
                "10 404504\r\n0 0 -161191 -689526 -508775 345322 0 0 0 0\r\n",
                "1963339\r\n"
            ],
            [
                "10 319645572\r\n812547177 -355467212 -807957797 239781206 862552539 975802175 0 542726039 689442435 0\r\n",
                "-1\r\n"
            ],
            [
                "100 82\r\n-81 37 0 0 0 -89 87 0 0 0 0 -21 20 -13 41 41 0 -87 3 -80 -100 70 72 0 45 -71 76 81 -59 39 0 0 0 59 74 92 -42 0 -82 0 0 3 37 46 -84 -98 0 63 -62 64 30 58 0 0 0 0 44 85 -68 0 -9 0 -39 77 69 0 87 37 0 -60 5 40 -42 -52 0 -16 -64 0 -46 0 -49 0 5 0 91 -74 -87 0 48 0 0 -9 -68 -82 26 0 0 27 -57 3\r\n",
                "2007\r\n"
            ],
            [
                "100 591\r\n-888 -792 -685 -182 -102 -555 -771 -712 580 342 0 0 537 929 0 104 -624 -253 201 536 65 540 -549 248 677 0 0 328 -134 526 -500 -400 -276 570 0 0 0 486 0 0 0 0 855 0 -839 0 776 -729 20 40 -359 -766 0 0 0 -930 533 634 0 0 116 0 -664 0 0 0 0 -913 -554 993 0 795 556 0 889 0 -845 0 485 0 -160 -611 598 -805 142 -659 149 0 0 0 -605 0 0 0 -5 0 941 9 671 0\r\n",
                "14514\r\n"
            ],
            [
                "1 5\r\n0\r\n",
                "1\r\n"
            ],
            [
                "1 1\r\n0\r\n",
                "1\r\n"
            ],
            [
                "3 100\r\n1 2 -3\r\n",
                "4\r\n"
            ],
            [
                "1 2\r\n0\r\n",
                "1\r\n"
            ],
            [
                "1 114514\r\n0\r\n",
                "1\r\n"
            ]
        ]
    }
]