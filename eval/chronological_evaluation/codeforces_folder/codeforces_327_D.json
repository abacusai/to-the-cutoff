[
    {
        "name": "Block Tower",
        "description": "After too much playing on paper, Iahub has switched to computer games. The\ngame he plays is called \"Block Towers\". It is played in a rectangular grid\nwith n rows and m columns (it contains n \u00d7 m cells). The goal of the game is\nto build your own city. Some cells in the grid are big holes, where Iahub\ncan't build any building. The rest of cells are empty. In some empty cell\nIahub can build exactly one tower of two following types: Blue towers. Each\nhas population limit equal to 100. Red towers. Each has population limit equal\nto 200. However, it can be built in some cell only if in that moment at least\none of the neighbouring cells has a Blue Tower. Two cells are neighbours is\nthey share a side. Iahub is also allowed to destroy a building from any cell.\nHe can do this operation as much as he wants. After destroying a building, the\nother buildings are not influenced, and the destroyed cell becomes empty (so\nIahub can build a tower in this cell if needed, see the second example for\nsuch a case). Iahub can convince as many population as he wants to come into\nhis city. So he needs to configure his city to allow maximum population\npossible. Therefore he should find a sequence of operations that builds the\ncity in an optimal way, so that total population limit is as large as\npossible. He says he's the best at this game, but he doesn't have the optimal\nsolution. Write a program that calculates the optimal one, to show him that\nhe's not as good as he thinks. Input The first line of the input contains two\nintegers n and m (1 \u2264 n, m \u2264 500). Each of the next n lines contains m\ncharacters, describing the grid. The j-th character in the i-th line is '.' if\nyou're allowed to build at the cell with coordinates (i, j) a tower (empty\ncell) or '#' if there is a big hole there. Output Print an integer k in the\nfirst line (0 \u2264 k \u2264 10^6) \u2014 the number of operations Iahub should perform to\nobtain optimal result. Each of the following k lines must contain a single\noperation in the following format: \u00abB x y\u00bb (1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m) \u2014 building a\nblue tower at the cell (x, y); \u00abR x y\u00bb (1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m) \u2014 building a red\ntower at the cell (x, y); \u00abD x y\u00bb (1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m) \u2014 destroying a tower\nat the cell (x, y). If there are multiple solutions you can output any of\nthem. Note, that you shouldn't minimize the number of operations. Examples\nInput 2 3 ..# .#. Output 4 B 1 1 R 1 2 R 2 1 B 2 3 Input 1 3 ... Output 5 B 1\n1 B 1 2 R 1 3 D 1 2 R 1 2\n\n",
        "cf_contest_id": 327,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 3\r\n..#\r\n.#.\r\n",
                "8\r\nB 1 1\r\nB 1 2\r\nD 1 2\r\nR 1 2\r\nB 2 1\r\nD 2 1\r\nR 2 1\r\nB 2 3\r\n"
            ],
            [
                "1 3\r\n...\r\n",
                "7\r\nB 1 1\r\nB 1 2\r\nB 1 3\r\nD 1 3\r\nR 1 3\r\nD 1 2\r\nR 1 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n#\r\n",
                "0\r\n"
            ],
            [
                "1 1\r\n.\r\n",
                "1\r\nB 1 1\r\n"
            ]
        ]
    }
]