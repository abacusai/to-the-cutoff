[
    {
        "name": "Mocha and Hiking",
        "description": "The city where Mocha lives in is called Zhijiang. There are \n    n+1\n villages\nand \n    2n-1\n directed roads in this city. There are two kinds of roads:\n\n    n-1\n roads are from village \n    i\n to village \n    i+1\n, for all\n\n    1\n    \u2264 i \n    \u2264 n-1\n. \n    n\n roads can be described by a sequence\n\n    a_1,\n    \u2026,a_n\n. If \n    a_i=0\n, the \n    i\n-th of these roads goes\nfrom village \n    i\n to village \n    n+1\n, otherwise it goes from village\n\n    n+1\n to village \n    i\n, for all \n    1\n    \u2264 i\n    \u2264 n\n. Mocha plans to\ngo hiking with Taki this weekend. To avoid the trip being boring, they plan to\ngo through every village exactly once. They can start and finish at any\nvillages. Can you help them to draw up a plan? Input Each test contains\nmultiple test cases. The first line contains a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 20\n) \u2014 the number of test cases. Each test case consists of\ntwo lines. The first line of each test case contains a single integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 10^4\n) \u2014 indicates that the number of villages is\n\n    n+1\n. The second line of each test case contains \n    n\n integers \n    a_1,\n    a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 1\n). If \n    a_i=0\n, it means\nthat there is a road from village \n    i\n to village \n    n+1\n. If\n\n    a_i=1\n, it means that there is a road from village \n    n+1\n to village\n\n    i\n. It is guaranteed that the sum of \n    n\n over all test cases does not\nexceed \n    10^4\n. Output For each test case, print a line with \n    n+1\n\nintegers, where the \n    i\n-th number is the \n    i\n-th village they will go\nthrough. If the answer doesn't exist, print \n    -1\n. If there are multiple\ncorrect answers, you can print any one of them. Example Input 2 3 0 1 0 3 1 1\n0 Output 1 4 2 3 4 1 2 3 Note In the first test case, the city looks like the\nfollowing graph: So all possible answers are \n    (1 \n    \u2192 4 \n    \u2192 2 \n    \u2192\n    3)\n, \n    (1 \n    \u2192 2 \n    \u2192 3 \n    \u2192 4)\n. In the second test case, the city\nlooks like the following graph: So all possible answers are \n    (4 \n    \u2192 1\n    \n    \u2192 2 \n    \u2192 3)\n, \n    (1 \n    \u2192 2 \n    \u2192 3 \n    \u2192 4)\n, \n    (3 \n    \u2192 4 \n    \u2192 1\n    \n    \u2192 2)\n, \n    (2 \n    \u2192 3 \n    \u2192 4 \n    \u2192 1)\n.\n\n",
        "cf_contest_id": 1559,
        "cf_index": "C",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graphs"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n3\r\n0 1 0\r\n3\r\n1 1 0\r\n",
                "1 4 2 3\r\n4 1 2 3\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1\r\n1\r\n1\r\n0\r\n",
                "2 1\r\n1 2\r\n"
            ],
            [
                "1\r\n3\r\n1 1 1\r\n",
                "4 1 2 3\r\n"
            ],
            [
                "1\r\n4\r\n1 1 1 1\r\n",
                "5 1 2 3 4\r\n"
            ],
            [
                "1\r\n10\r\n1 1 1 1 1 1 1 1 1 1\r\n",
                "11 1 2 3 4 5 6 7 8 9 10\r\n"
            ],
            [
                "1\r\n5\r\n1 1 1 1 1\r\n",
                "6 1 2 3 4 5\r\n"
            ],
            [
                "1\r\n2\r\n1 1\r\n",
                "3 1 2\r\n"
            ]
        ]
    }
]