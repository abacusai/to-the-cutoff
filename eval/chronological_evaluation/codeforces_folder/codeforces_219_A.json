[
    {
        "name": "k-String",
        "description": "A string is called a k-string if it can be represented as k concatenated\ncopies of some string. For example, the string \"aabaabaabaab\" is at the same\ntime a 1-string, a 2-string and a 4-string, but it is not a 3-string, a\n5-string, or a 6-string and so on. Obviously any string is a 1-string. You are\ngiven a string s, consisting of lowercase English letters and a positive\ninteger k. Your task is to reorder the letters in the string s in such a way\nthat the resulting string is a k-string. Input The first input line contains\ninteger k (1 \u2264 k \u2264 1000). The second line contains s, all characters in s are\nlowercase English letters. The string length s satisfies the inequality 1 \u2264\n|s| \u2264 1000, where |s| is the length of string s. Output Rearrange the letters\nin string s in such a way that the result is a k-string. Print the result on a\nsingle output line. If there are multiple solutions, print any of them. If the\nsolution doesn't exist, print \"-1\" (without quotes). Examples Input 2 aazz\nOutput azaz Input 3 abcabcabz Output -1\n\n",
        "cf_contest_id": 219,
        "cf_index": "A",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\naazz\r\n",
                "azaz\r\n"
            ],
            [
                "3\r\nabcabcabz\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\na\r\n",
                "a\r\n"
            ],
            [
                "2\r\nabba\r\n",
                "abab\r\n"
            ],
            [
                "2\r\naaab\r\n",
                "-1\r\n"
            ],
            [
                "7\r\nabacaba\r\n",
                "-1\r\n"
            ],
            [
                "5\r\naaaaa\r\n",
                "aaaaa\r\n"
            ],
            [
                "3\r\naabaaaaabb\r\n",
                "-1\r\n"
            ],
            [
                "2\r\naaab\r\n",
                "-1\r\n"
            ],
            [
                "2\r\nbabac\r\n",
                "-1\r\n"
            ],
            [
                "3\r\nbbbccc\r\n",
                "bcbcbc\r\n"
            ],
            [
                "2\r\naa\r\n",
                "aa\r\n"
            ],
            [
                "250\r\ncececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececece\r\n",
                "cececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececececece\r\n"
            ],
            [
                "15\r\nabaabbbcababaaaabaabbbcababaaaabaabbbcababaaaabaabbbcababaaaabaabbbcababaaaabaabbbcababaaaabaabbbcababaaaabaabbbcababaaaabaabbbcababaaaabaabbbcababaaaabaabbbcababaaaabaabbbcababaaaabaabbbcababaaaabaabbbcababaaaabaabbbcababaaa\r\n",
                "aaaaaaaabbbbbbcaaaaaaaabbbbbbcaaaaaaaabbbbbbcaaaaaaaabbbbbbcaaaaaaaabbbbbbcaaaaaaaabbbbbbcaaaaaaaabbbbbbcaaaaaaaabbbbbbcaaaaaaaabbbbbbcaaaaaaaabbbbbbcaaaaaaaabbbbbbcaaaaaaaabbbbbbcaaaaaaaabbbbbbcaaaaaaaabbbbbbcaaaaaaaabbbbbbc\r\n"
            ],
            [
                "1\r\naaa\r\n",
                "aaa\r\n"
            ],
            [
                "1\r\naabaab\r\n",
                "aaaabb\r\n"
            ],
            [
                "2\r\naabbbbccccccdddddddd\r\n",
                "abbcccddddabbcccdddd\r\n"
            ],
            [
                "3\r\naaaaaaaaacccdddddd\r\n",
                "aaacddaaacddaaacdd\r\n"
            ],
            [
                "3\r\naaaaaaaaacccbbbbbb\r\n",
                "aaabbcaaabbcaaabbc\r\n"
            ],
            [
                "2\r\naazzzz\r\n",
                "azzazz\r\n"
            ],
            [
                "2\r\naaaa\r\n",
                "aaaa\r\n"
            ],
            [
                "2\r\naaaazz\r\n",
                "aazaaz\r\n"
            ],
            [
                "2\r\naaaabb\r\n",
                "aabaab\r\n"
            ],
            [
                "2\r\naabbbb\r\n",
                "abbabb\r\n"
            ],
            [
                "2\r\naaaazzzz\r\n",
                "aazzaazz\r\n"
            ],
            [
                "2\r\naaazz\r\n",
                "-1\r\n"
            ],
            [
                "2\r\nbbbbaa\r\n",
                "abbabb\r\n"
            ],
            [
                "2\r\naaaaaabbbb\r\n",
                "aaabbaaabb\r\n"
            ],
            [
                "2\r\naaaaaazz\r\n",
                "aaazaaaz\r\n"
            ],
            [
                "2\r\naaaabbbb\r\n",
                "aabbaabb\r\n"
            ],
            [
                "2\r\naabaab\r\n",
                "aabaab\r\n"
            ],
            [
                "1\r\naaaaa\r\n",
                "aaaaa\r\n"
            ],
            [
                "2\r\nbbaaaa\r\n",
                "aabaab\r\n"
            ],
            [
                "2\r\nacaccc\r\n",
                "accacc\r\n"
            ]
        ]
    }
]