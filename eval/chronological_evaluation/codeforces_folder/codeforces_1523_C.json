[
    {
        "name": "Compression and Expansion",
        "description": "William is a huge fan of planning ahead. That is why he starts his morning\nroutine by creating a nested list of upcoming errands. A valid nested list is\nany list which can be created from a list with one item \"1\" by applying some\noperations. Each operation inserts a new item into the list, on a new line,\njust after one of existing items \n    a_1 \n     .\n      a_2 \n     .\n      a_3 \n     .\n     \n     \n    \u22ef\n     \n     .\n     a_k\n and can be one of two types: Add an item\n\n    a_1 \n     .\n      a_2 \n     .\n      a_3 \n     .\n     \n    \u22ef\n     .\n      a_k \n     .\n     \n    1\n (starting a list of a deeper level), or Add an item \n    a_1 \n     .\n      a_2\n    \n     .\n      a_3 \n     .\n     \n    \u22ef\n     .\n      (a_k + 1)\n (continuing the\ncurrent level). Operation can only be applied if the list does not contain two\nidentical items afterwards. And also, if we consider every item as a sequence\nof numbers, then the sequence of items should always remain increasing in\nlexicographical order. Examples of valid and invalid lists that are shown in\nthe picture can found in the \"Notes\" section.When William decided to save a\nWord document with the list of his errands he accidentally hit a completely\ndifferent keyboard shortcut from the \"Ctrl-S\" he wanted to hit. It's not known\nexactly what shortcut he pressed but after triggering it all items in the list\nwere replaced by a single number: the last number originally written in the\nitem number. William wants you to help him restore a fitting original nested\nlist. Input Each test contains multiple test cases. The first line contains\nthe number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10\n). Description of\nthe test cases follows. The first line of each test case contains a single\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^3\n), which is the number of lines in\nthe list. Each of the next \n    n\n lines contains a single integer \n    a_i\n\n(\n    1 \n    \u2264 a_i \n    \u2264 n\n), which is what remains of William's nested list.\nIt is guaranteed that in each test case at least one fitting list exists. It\nis guaranteed that the sum of values \n    n\n across all test cases does not\nexceed \n    10^3\n. Output For each test case output \n    n\n lines which\nrepresent a valid nested list, which could become the data provided to you by\nWilliam. If there are multiple answers, print any. Example Input 2 4 1 1 2 3 9\n1 1 1 2 2 1 2 1 2 Output 1 1.1 1.2 1.3 1 1.1 1.1.1 1.1.2 1.2 1.2.1 2 2.1 2.2\nNote In the second example test case one example of a fitting list is: 1 1.1\n1.1.1 1.1.2 1.2 1.2.1 2 2.1 2.2 This list can be produced by using the\nsequence of operations shown below: Original list with a single item \n    1\n.\nInsert item \n    2\n by using the insertion operation of the second type after\nitem \n    1\n. Insert item \n    1.1\n by using the insertion operation of the\nfirst type after item \n    1\n. Insert item \n    1.2\n by using the insertion\noperation of the second type after item \n    1.1\n. Insert item \n    1.1.1\n by\nusing the insertion operation of the first type after item \n    1.1\n. Insert\nitem \n    1.1.2\n by using the insertion operation of the second type after\nitem \n    1.1.1\n. Insert item \n    1.2.1\n by using the insertion operation of\nthe first type after item \n    1.2\n. Insert item \n    2.1\n by using the\ninsertion operation of the first type after item \n    2\n. Insert item\n\n    2.2\n by using the insertion operation of the second type after item\n\n    2.1\n.\n\n",
        "cf_contest_id": 1523,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "greedy",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n4\r\n1\r\n1\r\n2\r\n3\r\n9\r\n1\r\n1\r\n1\r\n2\r\n2\r\n1\r\n2\r\n1\r\n2\r\n",
                "1\r\n1.1\r\n1.2\r\n1.3\r\n1\r\n1.1\r\n1.1.1\r\n1.1.2\r\n1.2\r\n1.2.1\r\n1.2.2\r\n1.2.2.1\r\n1.2.2.2\r\n"
            ]
        ],
        "private_cases": [
            [
                "7\r\n1\r\n1\r\n2\r\n1\r\n1\r\n2\r\n1\r\n2\r\n3\r\n1\r\n1\r\n1\r\n3\r\n1\r\n1\r\n2\r\n3\r\n1\r\n2\r\n1\r\n3\r\n1\r\n2\r\n3\r\n",
                "1\r\n1\r\n1.1\r\n1\r\n2\r\n1\r\n1.1\r\n1.1.1\r\n1\r\n1.1\r\n1.2\r\n1\r\n2\r\n2.1\r\n1\r\n2\r\n3\r\n"
            ],
            [
                "10\r\n4\r\n1\r\n1\r\n1\r\n1\r\n4\r\n1\r\n1\r\n1\r\n2\r\n4\r\n1\r\n1\r\n2\r\n1\r\n4\r\n1\r\n1\r\n2\r\n2\r\n4\r\n1\r\n1\r\n2\r\n3\r\n4\r\n1\r\n2\r\n1\r\n1\r\n4\r\n1\r\n2\r\n1\r\n2\r\n4\r\n1\r\n2\r\n1\r\n3\r\n4\r\n1\r\n2\r\n3\r\n1\r\n4\r\n1\r\n2\r\n3\r\n4\r\n",
                "1\r\n1.1\r\n1.1.1\r\n1.1.1.1\r\n1\r\n1.1\r\n1.1.1\r\n1.1.2\r\n1\r\n1.1\r\n1.2\r\n1.2.1\r\n1\r\n1.1\r\n1.2\r\n2\r\n1\r\n1.1\r\n1.2\r\n1.3\r\n1\r\n2\r\n2.1\r\n2.1.1\r\n1\r\n2\r\n2.1\r\n2.2\r\n1\r\n2\r\n2.1\r\n3\r\n1\r\n2\r\n3\r\n3.1\r\n1\r\n2\r\n3\r\n4\r\n"
            ]
        ]
    }
]