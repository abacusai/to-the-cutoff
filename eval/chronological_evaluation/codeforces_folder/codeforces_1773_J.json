[
    {
        "name": "Jumbled Trees",
        "description": "You are given an undirected connected graph with \n    n\n vertices and \n    m\n\nedges. Each edge has an associated counter, initially equal to \n    0\n. In one\noperation, you can choose an arbitrary spanning tree and add any value \n    v\n\nto all edges of this spanning tree. Determine if it's possible to make every\ncounter equal to its target value \n    x_i\n modulo prime \n    p\n, and provide\na sequence of operations that achieves it. Input The first line contains three\nintegers \n    n\n, \n    m\n, and \n    p\n \u2014 the number of vertices, the number of\nedges, and the prime modulus (\n    1 \n    \u2264 n \n    \u2264 500\n; \n    1 \n    \u2264 m \n    \u2264\n    1000\n; \n    2 \n    \u2264 p \n    \u2264 10^9\n, \n    p\n is prime). Next \n    m\n lines\ncontain three integers \n    u_i\n, \n    v_i\n, \n    x_i\n each \u2014 the two\nendpoints of the \n    i\n-th edge and the target value of that edge's counter\n(\n    1 \n    \u2264 u_i, v_i \n    \u2264 n\n; \n    0 \n    \u2264 x_i < p\n; \n    u_i \n    \u2260 v_i\n).\nThe graph is connected. There are no loops, but there may be multiple edges\nbetween the same two vertices. Output If the target values on counters cannot\nbe achieved, print -1. Otherwise, print \n    t\n \u2014 the number of operations,\nfollowed by \n    t\n lines, describing the sequence of operations. Each line\nstarts with integer \n    v\n (\n    0 \n    \u2264 v < p\n) \u2014 the counter increment for\nthis operation. Then, in the same line, followed by \n    n - 1\n integers\n\n    e_1\n, \n    e_2\n, ... \n    e_n - 1\n (\n    1 \n    \u2264 e_i \n    \u2264 m\n) \u2014 the\nedges of the spanning tree. The number of operations \n    t\n should not exceed\n\n    2m\n. You don't need to minimize \n    t\n. Any correct answer within the\n\n    2m\n bound is accepted. You are allowed to repeat spanning trees. Examples\nInput 3 3 101 1 2 30 2 3 40 3 1 50 Output 3 10 1 2 20 1 3 30 2 3 Input 2 2 37\n1 2 8 1 2 15 Output 2 8 1 15 2 Input 5 4 5 1 3 1 2 3 2 2 5 3 4 1 4 Output -1\n\n",
        "cf_contest_id": 1773,
        "cf_index": "J",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "math"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [],
        "private_cases": []
    }
]