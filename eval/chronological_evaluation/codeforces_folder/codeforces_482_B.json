[
    {
        "name": "Interesting Array",
        "description": "We'll call an array of n non-negative integers a[1], a[2], ..., a[n]\ninteresting, if it meets m constraints. The i-th of the m constraints consists\nof three integers li, ri, qi (1 \u2264 li \u2264 ri \u2264 n) meaning that value should be\nequal to qi. Your task is to find any interesting array of n elements or state\nthat such array doesn't exist. Expression x   y; means the bitwise AND of\nnumbers x and y. In programming languages C++, Java and Python this operation\nis represented as \"   \", in Pascal \u2014 as \"and\". Input The first line contains two\nintegers n, m (1 \u2264 n \u2264 10^5, 1 \u2264 m \u2264 10^5) \u2014 the number of elements in the\narray and the number of limits. Each of the next m lines contains three\nintegers li, ri, qi (1 \u2264 li \u2264 ri \u2264 n, 0 \u2264 qi < 2^30) describing the i-th\nlimit. Output If the interesting array exists, in the first line print \"YES\"\n(without the quotes) and in the second line print n integers a[1], a[2], ...,\na[n] (0 \u2264 a[i] < 2^30) decribing the interesting array. If there are multiple\nanswers, print any of them. If the interesting array doesn't exist, print \"NO\"\n(without the quotes) in the single line. Examples Input 3 1 1 3 3 Output YES 3\n3 3 Input 3 2 1 3 3 1 3 2 Output NO\n\n",
        "cf_contest_id": 482,
        "cf_index": "B",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 1\r\n1 3 3\r\n",
                "YES\r\n3 3 3 "
            ],
            [
                "3 2\r\n1 3 3\r\n1 3 2\r\n",
                "NO\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 2\r\n1 2 536870912\r\n2 3 536870911\r\n",
                "YES\r\n536870912 1073741823 536870911 "
            ],
            [
                "1 1\r\n1 1 10\r\n",
                "YES\r\n10 "
            ],
            [
                "1 2\r\n1 1 10\r\n1 1 5\r\n",
                "NO\r\n"
            ],
            [
                "1 2\r\n1 1 1\r\n1 1 3\r\n",
                "NO\r\n"
            ]
        ]
    }
]