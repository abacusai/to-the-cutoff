[
    {
        "name": "Ehab and a component choosing problem",
        "description": "You're given a tree consisting of \n    n\n nodes. Every node \n    u\n has a\nweight \n    a_u\n. You want to choose an integer \n    k\n \n    (1 \n    \u2264 k \n    \u2264\n    n)\n and then choose \n    k\n connected components of nodes that don't overlap\n(i.e every node is in at most 1 component). Let the set of nodes you chose be\n\n    s\n. You want to maximize: \n    \n\n    \u2211\n    _u \n    \u2208 s\n    a_u/k\n\n    \n In other words, you want to maximize the sum of weights of nodes\nin \n    s\n divided by the number of connected components you chose. Also, if\nthere are several solutions, you want to maximize \n    k\n. Note that adjacent\nnodes can belong to different components. Refer to the third sample. Input The\nfirst line contains the integer \n    n\n \n    (1 \n    \u2264 n \n    \u2264 3 \n    \u00b7\n    10^5)\n, the number of nodes in the tree. The second line contains \n    n\n\nspace-separated integers \n    a_1\n, \n    a_2\n, \n    \u2026\n, \n    a_n\n\n\n    (|a_i| \n    \u2264 10^9)\n, the weights of the nodes. The next \n    n-1\n lines,\neach contains 2 space-separated integers \n    u\n and \n    v\n \n    (1 \n    \u2264 u,v\n    \n    \u2264 n)\n which means there's an edge between \n    u\n and \n    v\n. Output\nPrint the answer as a non-reduced fraction represented by 2 space-separated\nintegers. The fraction itself should be maximized and if there are several\npossible ways, you should maximize the denominator. See the samples for a\nbetter understanding. Examples Input 3 1 2 3 1 2 1 3 Output 6 1 Input 1 -2\nOutput -2 1 Input 3 -1 -1 -1 1 2 2 3 Output -3 3 Input 3 -1 -2 -1 1 2 1 3\nOutput -2 2 Note A connected component is a set of nodes such that for any\nnode in the set, you can reach all other nodes in the set passing only nodes\nin the set. In the first sample, it's optimal to choose the whole tree. In the\nsecond sample, you only have one choice (to choose node 1) because you can't\nchoose 0 components. In the third sample, notice that we could've, for\nexample, chosen only node 1, or node 1 and node 3, or even the whole tree, and\nthe fraction would've had the same value (-1), but we want to maximize\n\n    k\n. In the fourth sample, we'll just choose nodes 1 and 3.\n\n",
        "cf_contest_id": 1088,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "greedy",
            "math",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 2 3\r\n1 2\r\n1 3\r\n",
                "6 1"
            ],
            [
                "1\r\n-2\r\n",
                "-2 1"
            ],
            [
                "3\r\n-1 -1 -1\r\n1 2\r\n2 3\r\n",
                "-3 3"
            ],
            [
                "3\r\n-1 -2 -1\r\n1 2\r\n1 3\r\n",
                "-2 2"
            ]
        ],
        "private_cases": [
            [
                "8\r\n1 4 -1 -1 -3 -3 4 1\r\n3 8\r\n4 2\r\n6 7\r\n3 6\r\n4 5\r\n5 3\r\n4 1\r\n",
                "8 2"
            ]
        ]
    }
]