[
    {
        "name": "XOR Guessing",
        "description": "This is an interactive problem. Remember to flush your output while\ncommunicating with the testing program. You may use fflush(stdout) in C++,\nsystem.out.flush() in Java, stdout.flush() in Python or flush(output) in\nPascal to flush the output. If you use some other programming language,\nconsult its documentation. You may also refer to the guide on interactive\nproblems: https://codeforces.com/blog/entry/45307. The jury picked an integer\n\n    x\n not less than \n    0\n and not greater than \n    2^14 - 1\n. You have\nto guess this integer. To do so, you may ask no more than \n    2\n queries.\nEach query should consist of \n    100\n integer numbers \n    a_1\n, \n    a_2\n,\n..., \n    a_100\n (each integer should be not less than \n    0\n and not\ngreater than \n    2^14 - 1\n). In response to your query, the jury will pick\none integer \n    i\n (\n    1 \n    \u2264 i \n    \u2264 100\n) and tell you the value of\n\n    a_i \n    \u2295 x\n (the bitwise XOR of \n    a_i\n and \n    x\n). There is an\nadditional constraint on the queries: all \n    200\n integers you use in the\nqueries should be distinct. It is guaranteed that the value of \n    x\n is\nfixed beforehand in each test, but the choice of \n    i\n in every query may\ndepend on the integers you send. Output To give the answer, your program\nshould print one line \n    !\n \n    x\n with a line break in the end. After\nthat, it should flush the output and terminate gracefully. Interaction Before\ngiving the answer, you may submit no more than \n    2\n queries. To ask a\nquery, print one line in the following format: \n    ?\n \n    a_1\n \n    a_2\n ...\n\n    a_100\n, where every \n    a_j\n should be an integer from the range\n\n    [0, 2^14 - 1]\n. The line should be ended with a line break character.\nAfter submitting a query, flush the output and read the answer to your query \u2014\nthe value of \n    a_i \n    \u2295 x\n for some \n    i \n    \u2208 [1, 100]\n. No integer\ncan be used in queries more than once. If you submit an incorrect query (or\nask more than \n    2\n queries), the answer to it will be one integer \n    -1\n.\nAfter receiving such an answer, your program should terminate immediately \u2014\notherwise you may receive verdict \"Runtime error\", \"Time limit exceeded\" or\nsome other verdict instead of \"Wrong answer\". Example Input 0 32 Output ? 3 5\n6 ? 32 24 37 ! 5 Note The example of interaction is not correct \u2014 you should\nsumbit exactly \n    100\n integers in each query. Everything else is correct.\nHacks are forbidden in this problem.\n\n",
        "cf_contest_id": 1207,
        "cf_index": "E",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "interactive",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "FIXED 5\r\n2 3\r\n",
                "5\r\n"
            ]
        ],
        "private_cases": [
            [
                "RANDOM 0\r\n",
                "0\r\n"
            ],
            [
                "RANDOM 16383\r\n",
                "16383\r\n"
            ],
            [
                "ADAPTIVE 1\r\n",
                "1\r\n"
            ],
            [
                "ADAPTIVE 16382\r\n",
                "16382\r\n"
            ],
            [
                "ADAPTIVE 12822\r\n",
                "12822\r\n"
            ],
            [
                "ADAPTIVE 2\r\n",
                "2\r\n"
            ],
            [
                "ADAPTIVE 16381\r\n",
                "16381\r\n"
            ],
            [
                "ADAPTIVE 9846\r\n",
                "9846\r\n"
            ],
            [
                "ADAPTIVE 4\r\n",
                "4\r\n"
            ],
            [
                "ADAPTIVE 16379\r\n",
                "16379\r\n"
            ],
            [
                "ADAPTIVE 3894\r\n",
                "3894\r\n"
            ],
            [
                "ADAPTIVE 8\r\n",
                "8\r\n"
            ],
            [
                "ADAPTIVE 16375\r\n",
                "16375\r\n"
            ],
            [
                "ADAPTIVE 8374\r\n",
                "8374\r\n"
            ],
            [
                "ADAPTIVE 16\r\n",
                "16\r\n"
            ],
            [
                "ADAPTIVE 16367\r\n",
                "16367\r\n"
            ],
            [
                "ADAPTIVE 5316\r\n",
                "5316\r\n"
            ],
            [
                "ADAPTIVE 32\r\n",
                "32\r\n"
            ],
            [
                "ADAPTIVE 16351\r\n",
                "16351\r\n"
            ],
            [
                "ADAPTIVE 15706\r\n",
                "15706\r\n"
            ],
            [
                "ADAPTIVE 64\r\n",
                "64\r\n"
            ],
            [
                "ADAPTIVE 16319\r\n",
                "16319\r\n"
            ],
            [
                "ADAPTIVE 7482\r\n",
                "7482\r\n"
            ],
            [
                "ADAPTIVE 128\r\n",
                "128\r\n"
            ],
            [
                "ADAPTIVE 16255\r\n",
                "16255\r\n"
            ],
            [
                "ADAPTIVE 13182\r\n",
                "13182\r\n"
            ],
            [
                "ADAPTIVE 256\r\n",
                "256\r\n"
            ],
            [
                "ADAPTIVE 16127\r\n",
                "16127\r\n"
            ],
            [
                "ADAPTIVE 14603\r\n",
                "14603\r\n"
            ],
            [
                "ADAPTIVE 512\r\n",
                "512\r\n"
            ],
            [
                "ADAPTIVE 15871\r\n",
                "15871\r\n"
            ],
            [
                "ADAPTIVE 6373\r\n",
                "6373\r\n"
            ],
            [
                "ADAPTIVE 1024\r\n",
                "1024\r\n"
            ],
            [
                "ADAPTIVE 15359\r\n",
                "15359\r\n"
            ],
            [
                "ADAPTIVE 116\r\n",
                "116\r\n"
            ],
            [
                "ADAPTIVE 2048\r\n",
                "2048\r\n"
            ],
            [
                "ADAPTIVE 14335\r\n",
                "14335\r\n"
            ],
            [
                "ADAPTIVE 2307\r\n",
                "2307\r\n"
            ],
            [
                "ADAPTIVE 4096\r\n",
                "4096\r\n"
            ],
            [
                "ADAPTIVE 12287\r\n",
                "12287\r\n"
            ],
            [
                "ADAPTIVE 2925\r\n",
                "2925\r\n"
            ],
            [
                "ADAPTIVE 8192\r\n",
                "8192\r\n"
            ],
            [
                "ADAPTIVE 8191\r\n",
                "8191\r\n"
            ],
            [
                "ADAPTIVE 9472\r\n",
                "9472\r\n"
            ],
            [
                "ADAPTIVE 0\r\n",
                "0\r\n"
            ],
            [
                "FIXED 42\r\n1 1\r\n",
                "42\r\n"
            ],
            [
                "FIXED 42\r\n100 100\r\n",
                "42\r\n"
            ],
            [
                "ADAPTIVE 42\r\n",
                "42\r\n"
            ],
            [
                "ADAPTIVE 69\r\n",
                "69\r\n"
            ],
            [
                "ADAPTIVE 13\r\n",
                "13\r\n"
            ],
            [
                "ADAPTIVE 37\r\n",
                "37\r\n"
            ],
            [
                "ADAPTIVE 1337\r\n",
                "1337\r\n"
            ]
        ]
    }
]