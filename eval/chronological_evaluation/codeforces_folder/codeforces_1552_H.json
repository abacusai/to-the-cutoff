[
    {
        "name": "Guess the Perimeter",
        "description": "Let us call a point of the plane admissible if its coordinates are positive\nintegers less than or equal to \n    200\n. There is an invisible rectangle such\nthat: its vertices are all admissible; its sides are parallel to the\ncoordinate axes; its area is strictly positive. Your task is to guess the\nperimeter of this rectangle.In order to guess it, you may ask at most \n    4\n\nqueries. In each query, you choose a nonempty subset of the admissible points\nand you are told how many of the chosen points are inside or on the boundary\nof the invisible rectangle. Interaction To ask a query (of the kind described\nin the statement), you shall print two lines: In the first line print \"?\n\n    k\n\" (without the quotes) where \n    k\n (\n    k\n    \u2265 1\n) is the number of\nchosen points. In the second line print \n    2k\n integers \n    x_1,\n      y_1,\n     \n    x_2,\n      y_2,\n     \n    \u2026,\n      x_k,\n      y_k\n (\n    1\n    \u2264 x_i,y_i\n    \u2264 200\n\nfor \n    i=1,2,\n    \u2026,k\n) where \n    (x_1, y_1),\n     (x_2, y_2),\n     (x_3,\n    y_3),\n     \n    \u2026,\n     (x_k, y_k)\n are the \n    k\n distinct admissible chosen\npoints (the order of the points is not important). After this, you should read\nan integer \u2014 the number of chosen points that are inside or on the boundary of\nthe invisible rectangle.When you have identified the perimeter \n    p\n of the\ninvisible rectangle, you must print \"! \n    p\n\" (without quotes) and terminate\nyour program. If you ask more than \n    4\n queries or if one of the queries is\nmalformed, the interactor terminates immediately and your program receives\nverdict Wrong Answer. The interactor may be adaptive (i.e., the hidden\nrectangle may not be chosen before the beginning of the interaction). After\nprinting a query do not forget to output end of line and flush the output.\nOtherwise, you will get Idleness limit exceeded. To do this, use:\nfflush(stdout) or cout.flush() in C++; System.out.flush() in Java;\nflush(output) in Pascal; stdout.flush() in Python; see documentation for other\nlanguages. Hacks To hack a solution, use the following format. The input has\nonly one line, containing the \n    4\n integers \n    x_0\n, \n    y_0\n,\n\n    x_1\n, \n    y_1\n (\n    1\n    \u2264 x_0<x_1\n    \u2264 200\n, \n    1\n    \u2264 y_0 < y_1 \n    \u2264\n    200\n) \u2014 \n    (x_0,y_0)\n is the bottom-left vertex of the hidden rectangle\nand \n    (x_1, y_1)\n is the top-right vertex of the hidden rectangle. Note\nthat for hacks the interaction won't be adaptive. Examples Input 13 5 123 80\nOutput Input 2 2 4 4 Output Input 1 1 200 200 Output Note The following is an\nexample of interaction for the first sample intended to show the format of the\nqueries. \n    \n\n    [                                           ;                 Query (contestant program)                                           ;                        Answer (interactor)                                           ;                                Explanation; ; ;                                           ;                                           ;                                       ?\n     4                                                                                      ;                We choose the 4 vertices of; ; ;                                           ;             13\n     5\n     13\n     80\n     123\n     5\n     123\n     80                                           ;                                          4;                      the hidden rectangle.; ; ;                                           ;                                           ;                                       ?\n     5                                                                                      ; We choose 4 points just outside the hidden; ; ;                                           ;    100\n    4\n     100\n     81\n     12\n     40\n     124\n     40\n     50\n     50                                           ;                                          1                                           ;      rectangle and also the point (50,50).; ; ;                                           ;                                           ;                                       ?\n     2                                                                                      ;                We choose the points (1, 1); ; ;                                           ;                             200\n     200\n     1\n     1                                           ;                                          0                                           ;                             and\n    (200,200).; ; ;                                           ;                                           ;                                     !\n     370                                                                                      ;             This is the\n    correct perimeter.;  ]\n\n    \n For the second sample, a possible\ninteraction is the following. \n    \n\n    [                                           ;                 Query\n    (contestant program)                                           ;                        Answer (interactor)                                           ;                                Explanation; ; ;                                           ;                                           ;                                       ?\n     4                                                                                      ;       We choose the points (3, 2),\n    (4, 1),; ; ;                                           ;                     3\n     2\n     4\n     1\n     5\n     2\n     4\n     3                                          2                                           ;                         (5, 2) and (4, 3).; ; ;                                           ;                                           ;                                       ?\n     7                                                                                      ;       We choose the points (1, 4), (2, 4),; ; ;                                           ;    1\n     4\n    2\n     4\n     1\n     5\n     2\n     5\n     5\n     5\n     5\n     6\n     6\n     5                                          1                                           ; (1,\n    5), (2, 5), (5, 5), (5, 6) and (6, 5).; ; ;                                           ;                                           ;                                       !\n     8                                                                                      ;             This is the correct perimeter.;  ]\n\n    \n The situation is shown in the following picture: The green points are\nthe ones belonging to the first query, while the orange points are the ones\nbelonging to the second query. One can see that there are exactly two\nrectangles consistent with the interactor's answers: the rectangle of vertices\n\n    (2, 2)\n and \n    (4, 4)\n, shown in red; the rectangle of vertices \n    (4,\n    2)\n and \n    (5, 5)\n, shown in blue. Since both of these rectangles have\nperimeter \n    8\n, this is the final answer.\n\n",
        "cf_contest_id": 1552,
        "cf_index": "H",
        "cf_rating": 3300,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "interactive",
            "number theory"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "13 5 123 80\r\n",
                ""
            ],
            [
                "2 2 4 4\r\n",
                ""
            ],
            [
                "1 1 200 200\r\n",
                ""
            ]
        ],
        "private_cases": [
            [
                "1 1 2 2\r\n",
                ""
            ],
            [
                "199 199 200 200\r\n",
                ""
            ],
            [
                "199 1 200 2\r\n",
                ""
            ],
            [
                "1 199 2 200\r\n",
                ""
            ],
            [
                "1 114 200 115\r\n",
                ""
            ],
            [
                "81 1 82 200\r\n",
                ""
            ],
            [
                "95 21 164 181\r\n",
                ""
            ],
            [
                "101 146 122 186\r\n",
                ""
            ],
            [
                "21 10 133 119\r\n",
                ""
            ],
            [
                "17 131 32 161\r\n",
                ""
            ],
            [
                "59 47 144 165\r\n",
                ""
            ],
            [
                "85 3 117 51\r\n",
                ""
            ],
            [
                "80 72 165 120\r\n",
                ""
            ],
            [
                "37 28 175 177\r\n",
                ""
            ],
            [
                "49 47 135 147\r\n",
                ""
            ],
            [
                "33 37 70 53\r\n",
                ""
            ],
            [
                "657643289 4\r\n",
                ""
            ],
            [
                "657643289 8\r\n",
                ""
            ],
            [
                "657643289 16\r\n",
                ""
            ],
            [
                "657643289 32\r\n",
                ""
            ],
            [
                "657643289 64\r\n",
                ""
            ],
            [
                "657643289 128\r\n",
                ""
            ],
            [
                "657643289 256\r\n",
                ""
            ],
            [
                "657643289 512\r\n",
                ""
            ],
            [
                "657643289 1024\r\n",
                ""
            ],
            [
                "657643289 2048\r\n",
                ""
            ],
            [
                "657643289 4096\r\n",
                ""
            ],
            [
                "657643289 8192\r\n",
                ""
            ],
            [
                "657643289 16384\r\n",
                ""
            ],
            [
                "657643289 6\r\n",
                ""
            ],
            [
                "657643289 9\r\n",
                ""
            ],
            [
                "657643289 10\r\n",
                ""
            ],
            [
                "657643289 12\r\n",
                ""
            ],
            [
                "657643289 14\r\n",
                ""
            ],
            [
                "657643289 15\r\n",
                ""
            ],
            [
                "657643289 532\r\n",
                ""
            ],
            [
                "657643289 5960\r\n",
                ""
            ],
            [
                "657643289 6909\r\n",
                ""
            ],
            [
                "657643289 4930\r\n",
                ""
            ],
            [
                "657643289 8352\r\n",
                ""
            ],
            [
                "657643289 5264\r\n",
                ""
            ],
            [
                "657643289 16128\r\n",
                ""
            ],
            [
                "657643289 20819\r\n",
                ""
            ],
            [
                "657643289 7680\r\n",
                ""
            ],
            [
                "657643289 5017\r\n",
                ""
            ],
            [
                "657643289 360\r\n",
                ""
            ],
            [
                "657643289 720\r\n",
                ""
            ],
            [
                "657643289 840\r\n",
                ""
            ],
            [
                "657643289 1008\r\n",
                ""
            ],
            [
                "657643289 1080\r\n",
                ""
            ],
            [
                "657643289 1260\r\n",
                ""
            ],
            [
                "657643289 1440\r\n",
                ""
            ],
            [
                "657643289 1680\r\n",
                ""
            ],
            [
                "657643289 1800\r\n",
                ""
            ],
            [
                "657643289 1980\r\n",
                ""
            ],
            [
                "657643289 2160\r\n",
                ""
            ],
            [
                "657643289 2520\r\n",
                ""
            ],
            [
                "657643289 2880\r\n",
                ""
            ],
            [
                "657643289 3360\r\n",
                ""
            ],
            [
                "657643289 3600\r\n",
                ""
            ],
            [
                "657643289 3780\r\n",
                ""
            ],
            [
                "657643289 3960\r\n",
                ""
            ],
            [
                "657643289 4200\r\n",
                ""
            ],
            [
                "657643289 5040\r\n",
                ""
            ]
        ]
    }
]