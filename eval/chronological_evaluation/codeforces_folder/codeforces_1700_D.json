[
    {
        "name": "River Locks",
        "description": "Recently in Divanovo, a huge river locks system was built. There are now\n\n    n\n locks, the \n    i\n-th of them has the volume of \n    v_i\n liters, so\nthat it can contain any amount of water between \n    0\n and \n    v_i\n liters.\nEach lock has a pipe attached to it. When the pipe is open, \n    1\n liter of\nwater enters the lock every second. The locks system is built in a way to\nimmediately transfer all water exceeding the volume of the lock \n    i\n to the\nlock \n    i + 1\n. If the lock \n    i + 1\n is also full, water will be\ntransferred further. Water exceeding the volume of the last lock pours out to\nthe river. The picture illustrates \n    5\n locks with two open pipes at locks\n\n    1\n and \n    3\n. Because locks \n    1\n, \n    3\n, and \n    4\n are already\nfilled, effectively the water goes to locks \n    2\n and \n    5\n. Note that the\nvolume of the \n    i\n-th lock may be greater than the volume of the \n    i +\n    1\n-th lock. To make all locks work, you need to completely fill each one of\nthem. The mayor of Divanovo is interested in \n    q\n independent queries. For\neach query, suppose that initially all locks are empty and all pipes are\nclosed. Then, some pipes are opened simultaneously. For the \n    j\n-th query\nthe mayor asks you to calculate the minimum number of pipes to open so that\nall locks are filled no later than after \n    t_j\n seconds. Please help the\nmayor to solve this tricky problem and answer his queries. Input The first\nlines contains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 200\n     000\n) \u2014 the\nnumber of locks. The second lines contains \n    n\n integers \n    v_1, v_2,\n    \n    \u2026, v_n\n (\n    1 \n    \u2264 v_i \n    \u2264 10^9\n)) \u2014 volumes of the locks. The\nthird line contains one integer \n    q\n (\n    1 \n    \u2264 q \n    \u2264 200\n     000\n) \u2014\nthe number of queries. Each of the next \n    q\n lines contains one integer\n\n    t_j\n (\n    1 \n    \u2264 t_j \n    \u2264 10^9\n) \u2014 the number of seconds you have to\nfill all the locks in the query \n    j\n. Output Print \n    q\n integers. The\n\n    j\n-th of them should be equal to the minimum number of pipes to turn on\nso that after \n    t_j\n seconds all of the locks are filled. If it is\nimpossible to fill all of the locks in given time, print \n    -1\n. Examples\nInput 5 4 1 5 4 1 6 1 6 2 3 4 5 Output -1 3 -1 -1 4 3 Input 5 4 4 4 4 4 6 1 3\n6 5 2 4 Output -1 -1 4 4 -1 5 Note There are \n    6\n queries in the first\nexample test. In the queries \n    1, 3, 4\n the answer is \n    -1\n. We need to\nwait \n    4\n seconds to fill the first lock even if we open all the pipes. In\nthe sixth query we can open pipes in locks \n    1\n, \n    3\n, and \n    4\n.\nAfter \n    4\n seconds the locks \n    1\n and \n    4\n are full. In the following\n\n    1\n second \n    1\n liter of water is transferred to the locks \n    2\n and\n\n    5\n. The lock \n    3\n is filled by its own pipe. Similarly, in the second\nquery one can open pipes in locks \n    1\n, \n    3\n, and \n    4\n. In the fifth\nquery one can open pipes \n    1, 2, 3, 4\n.\n\n",
        "cf_contest_id": 1700,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dp",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n4 1 5 4 1\r\n6\r\n1\r\n6\r\n2\r\n3\r\n4\r\n5\r\n",
                "-1 3 -1 -1 4 3 "
            ],
            [
                "5\r\n4 4 4 4 4\r\n6\r\n1\r\n3\r\n6\r\n5\r\n2\r\n4\r\n",
                "-1 -1 4 4 -1 5 "
            ]
        ],
        "private_cases": [
            [
                "1\r\n1000000000\r\n1\r\n1000000000\r\n",
                "1 "
            ],
            [
                "50\r\n13 41 88 93 19 85 19 79 56 17 9 50 73 26 46 5 8 52 77 62 71 86 2 88 4 97 85 90 95 93 5 71 51 48 26 23 5 56 52 96 7 9 70 63 15 89 55 11 97 31\r\n50\r\n19\r\n34\r\n17\r\n1\r\n64\r\n40\r\n5\r\n86\r\n47\r\n37\r\n25\r\n38\r\n71\r\n50\r\n49\r\n77\r\n62\r\n76\r\n42\r\n33\r\n51\r\n9\r\n28\r\n95\r\n65\r\n14\r\n98\r\n22\r\n84\r\n63\r\n100\r\n92\r\n36\r\n4\r\n94\r\n83\r\n60\r\n43\r\n67\r\n6\r\n21\r\n97\r\n27\r\n99\r\n79\r\n70\r\n75\r\n41\r\n39\r\n91\r\n",
                "-1 -1 -1 -1 40 -1 -1 30 -1 -1 -1 -1 36 -1 -1 33 41 34 -1 -1 -1 -1 -1 27 39 -1 26 -1 30 40 26 28 -1 -1 27 31 42 -1 38 -1 -1 26 -1 26 32 36 34 -1 -1 28 "
            ],
            [
                "50\r\n13 17 82 61 96 97 75 94 58 8 61 67 26 26 90 14 49 77 76 80 22 90 50 58 19 82 56 9 10 43 95 22 9 7 47 71 70 12 63 75 12 74 56 42 44 3 87 91 20 52\r\n50\r\n16\r\n77\r\n87\r\n9\r\n66\r\n75\r\n96\r\n51\r\n34\r\n62\r\n58\r\n67\r\n15\r\n94\r\n54\r\n76\r\n49\r\n80\r\n35\r\n42\r\n6\r\n70\r\n98\r\n40\r\n2\r\n71\r\n12\r\n26\r\n85\r\n81\r\n82\r\n84\r\n5\r\n13\r\n93\r\n14\r\n55\r\n28\r\n30\r\n36\r\n32\r\n53\r\n46\r\n23\r\n100\r\n24\r\n11\r\n29\r\n8\r\n64\r\n",
                "-1 34 30 -1 -1 35 27 -1 -1 -1 -1 39 -1 28 -1 34 -1 32 -1 -1 -1 37 27 -1 -1 37 -1 -1 31 32 32 31 -1 -1 28 -1 -1 -1 -1 -1 -1 -1 -1 -1 26 -1 -1 -1 -1 -1 "
            ],
            [
                "50\r\n13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13\r\n50\r\n93\r\n97\r\n86\r\n85\r\n60\r\n19\r\n88\r\n90\r\n51\r\n75\r\n46\r\n37\r\n67\r\n62\r\n26\r\n76\r\n96\r\n71\r\n4\r\n55\r\n50\r\n9\r\n98\r\n48\r\n92\r\n70\r\n73\r\n77\r\n8\r\n33\r\n34\r\n41\r\n89\r\n83\r\n23\r\n2\r\n100\r\n52\r\n17\r\n11\r\n5\r\n31\r\n63\r\n21\r\n79\r\n56\r\n95\r\n40\r\n7\r\n15\r\n",
                "7 7 8 8 11 35 8 8 13 9 15 18 10 11 25 9 7 10 -1 12 13 -1 7 14 8 10 9 9 -1 20 20 16 8 8 29 -1 7 13 39 -1 -1 21 11 31 9 12 7 17 -1 44 "
            ],
            [
                "50\r\n13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13\r\n50\r\n36\r\n61\r\n22\r\n77\r\n9\r\n14\r\n10\r\n70\r\n63\r\n53\r\n96\r\n76\r\n17\r\n44\r\n19\r\n7\r\n42\r\n52\r\n13\r\n3\r\n67\r\n11\r\n94\r\n15\r\n49\r\n87\r\n56\r\n82\r\n91\r\n12\r\n8\r\n90\r\n71\r\n6\r\n20\r\n95\r\n47\r\n58\r\n55\r\n50\r\n26\r\n74\r\n62\r\n5\r\n80\r\n93\r\n75\r\n97\r\n51\r\n43\r\n",
                "19 11 30 9 -1 47 -1 10 11 13 7 9 39 15 35 -1 16 13 50 -1 10 -1 7 44 14 8 12 8 8 -1 -1 8 10 -1 33 7 14 12 12 13 25 9 11 -1 9 7 9 7 13 16 "
            ],
            [
                "16\r\n1 1 2 3 5 5 3 1 6 1 5 6 3 6 2 1\r\n50\r\n50\r\n51\r\n52\r\n25\r\n26\r\n27\r\n16\r\n17\r\n18\r\n12\r\n13\r\n14\r\n10\r\n11\r\n12\r\n8\r\n9\r\n10\r\n7\r\n8\r\n9\r\n6\r\n7\r\n8\r\n5\r\n6\r\n7\r\n5\r\n6\r\n7\r\n4\r\n5\r\n6\r\n4\r\n5\r\n6\r\n3\r\n4\r\n5\r\n3\r\n4\r\n5\r\n3\r\n4\r\n5\r\n3\r\n4\r\n5\r\n83\r\n34\r\n",
                "2 1 1 3 2 2 4 3 3 5 4 4 6 5 5 7 6 6 8 7 6 9 8 7 11 9 8 11 9 8 13 11 9 13 11 9 -1 13 11 -1 13 11 -1 13 11 -1 13 11 1 2 "
            ],
            [
                "16\r\n1 1 4 3 2 1 1 6 4 4 1 1 4 4 6 4\r\n50\r\n46\r\n47\r\n48\r\n23\r\n24\r\n25\r\n15\r\n16\r\n17\r\n11\r\n12\r\n13\r\n9\r\n10\r\n11\r\n7\r\n8\r\n9\r\n6\r\n7\r\n8\r\n5\r\n6\r\n7\r\n5\r\n6\r\n7\r\n4\r\n5\r\n6\r\n4\r\n5\r\n6\r\n3\r\n4\r\n5\r\n3\r\n4\r\n5\r\n3\r\n4\r\n5\r\n3\r\n4\r\n5\r\n2\r\n3\r\n4\r\n51\r\n6\r\n",
                "2 1 1 3 2 2 4 3 3 5 4 4 6 5 5 7 6 6 8 7 6 10 8 7 10 8 7 12 10 8 12 10 8 16 12 10 16 12 10 16 12 10 16 12 10 -1 16 12 1 8 "
            ],
            [
                "50\r\n20 7 9 2 12 19 10 11 11 20 13 6 9 4 8 11 21 10 13 25 14 21 8 9 7 17 14 25 21 8 14 9 9 19 14 20 3 24 3 14 25 24 15 25 7 12 23 10 24 18\r\n50\r\n23\r\n2\r\n20\r\n30\r\n27\r\n43\r\n24\r\n26\r\n12\r\n45\r\n42\r\n9\r\n13\r\n14\r\n35\r\n1\r\n41\r\n31\r\n47\r\n44\r\n5\r\n32\r\n25\r\n49\r\n37\r\n34\r\n22\r\n50\r\n10\r\n15\r\n36\r\n11\r\n4\r\n18\r\n39\r\n48\r\n17\r\n38\r\n21\r\n46\r\n7\r\n16\r\n28\r\n6\r\n33\r\n3\r\n29\r\n19\r\n8\r\n40\r\n",
                "31 -1 35 24 26 17 30 27 -1 16 17 -1 -1 -1 20 -1 17 23 15 16 -1 22 28 15 19 21 32 14 -1 -1 20 -1 -1 -1 18 15 -1 19 34 16 -1 -1 25 -1 22 -1 25 -1 -1 18 "
            ],
            [
                "50\r\n11 11 21 25 20 9 19 20 5 7 2 18 11 11 8 3 3 1 3 16 19 15 10 3 9 12 11 24 19 8 12 17 10 2 11 7 7 16 21 20 19 16 10 25 13 17 17 24 25 1\r\n50\r\n38\r\n39\r\n8\r\n37\r\n27\r\n6\r\n9\r\n43\r\n28\r\n26\r\n4\r\n1\r\n17\r\n16\r\n2\r\n19\r\n29\r\n18\r\n30\r\n11\r\n50\r\n25\r\n21\r\n35\r\n13\r\n12\r\n44\r\n49\r\n36\r\n32\r\n48\r\n5\r\n46\r\n3\r\n33\r\n24\r\n20\r\n34\r\n47\r\n10\r\n41\r\n40\r\n7\r\n42\r\n31\r\n23\r\n45\r\n14\r\n15\r\n22\r\n",
                "17 17 -1 18 24 -1 -1 15 23 25 -1 -1 -1 -1 -1 34 23 36 22 -1 13 26 31 19 -1 -1 15 14 18 21 14 -1 14 -1 20 27 33 19 14 -1 16 17 -1 16 21 28 15 -1 -1 30 "
            ],
            [
                "50\r\n3 60 52 60 60 84 63 40 50 21 39 59 40 15 59 54 5 84 63 23 11 69 27 65 64 8 39 4 89 19 10 45 51 66 69 60 82 25 82 66 86 35 24 64 43 67 35 25 39 82\r\n50\r\n57\r\n46\r\n44\r\n70\r\n74\r\n98\r\n36\r\n48\r\n76\r\n52\r\n86\r\n40\r\n28\r\n56\r\n73\r\n64\r\n78\r\n21\r\n37\r\n54\r\n33\r\n93\r\n16\r\n18\r\n66\r\n75\r\n62\r\n77\r\n81\r\n96\r\n31\r\n41\r\n68\r\n24\r\n80\r\n67\r\n50\r\n72\r\n90\r\n29\r\n17\r\n45\r\n58\r\n84\r\n95\r\n42\r\n87\r\n14\r\n10\r\n49\r\n",
                "42 -1 -1 35 33 25 -1 -1 32 -1 28 -1 -1 43 33 38 31 -1 -1 -1 -1 26 -1 -1 37 32 39 31 30 25 -1 -1 36 -1 30 36 -1 34 27 -1 -1 -1 42 29 26 -1 28 -1 -1 -1 "
            ],
            [
                "50\r\n34 23 77 49 44 25 26 12 64 28 67 56 49 9 28 79 38 60 31 80 75 5 56 60 31 24 57 41 4 29 55 19 19 64 42 6 37 2 17 5 10 22 60 54 22 53 32 68 15 11\r\n50\r\n71\r\n61\r\n87\r\n91\r\n25\r\n45\r\n50\r\n90\r\n30\r\n89\r\n68\r\n51\r\n23\r\n34\r\n81\r\n65\r\n36\r\n82\r\n44\r\n57\r\n31\r\n21\r\n41\r\n26\r\n54\r\n55\r\n20\r\n64\r\n56\r\n46\r\n74\r\n97\r\n60\r\n39\r\n93\r\n47\r\n32\r\n52\r\n72\r\n53\r\n98\r\n92\r\n70\r\n69\r\n28\r\n88\r\n66\r\n83\r\n33\r\n75\r\n",
                "27 31 22 21 -1 -1 38 21 -1 22 28 37 -1 -1 24 29 -1 23 -1 33 -1 -1 -1 -1 35 35 -1 30 34 41 26 20 32 -1 21 40 -1 37 27 36 20 21 27 28 -1 22 29 23 -1 25 "
            ],
            [
                "50\r\n5 22 52 69 67 25 29 65 51 45 59 53 29 52 2 70 62 40 53 60 4 61 47 36 58 31 43 54 70 9 54 46 50 12 54 20 52 29 39 64 23 45 8 8 35 3 41 1 5 50\r\n50\r\n87\r\n91\r\n35\r\n52\r\n50\r\n73\r\n68\r\n96\r\n60\r\n98\r\n78\r\n74\r\n38\r\n39\r\n48\r\n92\r\n36\r\n65\r\n51\r\n57\r\n88\r\n94\r\n43\r\n41\r\n40\r\n34\r\n30\r\n93\r\n59\r\n95\r\n86\r\n90\r\n100\r\n37\r\n69\r\n44\r\n53\r\n58\r\n85\r\n66\r\n47\r\n67\r\n82\r\n76\r\n81\r\n84\r\n32\r\n54\r\n97\r\n33\r\n",
                "23 22 -1 38 40 27 29 21 33 21 26 27 -1 -1 41 22 -1 31 39 35 23 21 -1 -1 -1 -1 -1 22 34 21 23 22 20 -1 29 -1 38 34 24 30 42 30 24 26 25 24 -1 37 21 -1 "
            ],
            [
                "50\r\n36 25 58 26 54 26 53 7 46 42 47 50 6 59 7 45 30 20 51 57 52 29 42 13 33 47 14 39 59 13 4 10 49 40 50 46 43 16 16 7 55 24 48 2 28 6 18 54 7 48\r\n50\r\n69\r\n88\r\n96\r\n48\r\n93\r\n82\r\n71\r\n40\r\n76\r\n57\r\n84\r\n75\r\n79\r\n89\r\n86\r\n49\r\n90\r\n92\r\n43\r\n78\r\n77\r\n74\r\n52\r\n59\r\n41\r\n72\r\n47\r\n54\r\n87\r\n42\r\n53\r\n68\r\n45\r\n67\r\n65\r\n46\r\n63\r\n100\r\n94\r\n80\r\n70\r\n85\r\n98\r\n51\r\n91\r\n44\r\n81\r\n56\r\n99\r\n73\r\n",
                "25 19 18 35 18 21 24 42 22 30 20 23 21 19 20 34 19 19 39 22 22 23 32 29 41 24 36 31 20 40 32 25 37 25 26 37 27 17 18 21 24 20 17 33 19 38 21 30 17 23 "
            ],
            [
                "1\r\n1\r\n1\r\n1\r\n",
                "1 "
            ]
        ]
    }
]