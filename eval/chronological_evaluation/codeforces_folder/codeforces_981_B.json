[
    {
        "name": "Businessmen Problems",
        "description": "Two famous competing companies ChemForces and TopChemist decided to show their\nsets of recently discovered chemical elements on an exhibition. However they\nknow that no element should be present in the sets of both companies. In order\nto avoid this representatives of both companies decided to make an agreement\non the sets the companies should present. The sets should be chosen in the way\nthat maximizes the total income of the companies. All elements are enumerated\nwith integers. The ChemForces company has discovered \n    n\n distinct chemical\nelements with indices \n    a_1, a_2, \n    \u2026, a_n\n, and will get an income of\n\n    x_i\n Berland rubles if the \n    i\n-th element from this list is in the\nset of this company. The TopChemist company discovered \n    m\n distinct\nchemical elements with indices \n    b_1, b_2, \n    \u2026, b_m\n, and it will get\nan income of \n    y_j\n Berland rubles for including the \n    j\n-th element\nfrom this list to its set. In other words, the first company can present any\nsubset of elements from \n    a_1, a_2, \n    \u2026, a_n\n (possibly\nempty subset), the second company can present any subset of elements from\n\n    b_1, b_2, \n    \u2026, b_m\n (possibly empty subset). There\nshouldn't be equal elements in the subsets. Help the representatives select\nthe sets in such a way that no element is presented in both sets and the total\nincome is the maximum possible. Input The first line contains a single integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the number of elements discovered by\nChemForces. The \n    i\n-th of the next \n    n\n lines contains two integers\n\n    a_i\n and \n    x_i\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n, \n    1 \n    \u2264 x_i\n    \n    \u2264 10^9\n) \u2014 the index of the \n    i\n-th element and the income of its\nusage on the exhibition. It is guaranteed that all \n    a_i\n are distinct. The\nnext line contains a single integer \n    m\n (\n    1 \n    \u2264 m \n    \u2264 10^5\n) \u2014\nthe number of chemicals invented by TopChemist. The \n    j\n-th of the next\n\n    m\n lines contains two integers \n    b_j\n and \n    y_j\n, (\n    1 \n    \u2264 b_j\n    \n    \u2264 10^9\n, \n    1 \n    \u2264 y_j \n    \u2264 10^9\n) \u2014 the index of the \n    j\n-th\nelement and the income of its usage on the exhibition. It is guaranteed that\nall \n    b_j\n are distinct. Output Print the maximum total income you can\nobtain by choosing the sets for both companies in such a way that no element\nis presented in both sets. Examples Input 3 1 2 7 2 3 10 4 1 4 2 4 3 4 4 4\nOutput 24 Input 1 1000000000 239 3 14 15 92 65 35 89 Output 408 Note In the\nfirst example ChemForces can choose the set (\n    3, 7\n), while TopChemist can\nchoose (\n    1, 2, 4\n). This way the total income is \n    (10 + 2) + (4 + 4 + 4)\n    = 24\n. In the second example ChemForces can choose the only element\n\n    10^9\n, while TopChemist can choose (\n    14, 92, 35\n). This way the total\nincome is \n    (239) + (15 + 65 + 89) = 408\n.\n\n",
        "cf_contest_id": 981,
        "cf_index": "B",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 2\r\n7 2\r\n3 10\r\n4\r\n1 4\r\n2 4\r\n3 4\r\n4 4\r\n",
                "24\r\n"
            ],
            [
                "1\r\n1000000000 239\r\n3\r\n14 15\r\n92 65\r\n35 89\r\n",
                "408\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n598654597 488228616\r\n544064902 21923894\r\n329635457 980089248\r\n988262691 654502493\r\n967529230 543358150\r\n835120075 128123793\r\n809901567 613170206\r\n152157661 479980560\r\n859252956 318029856\r\n614959273 735298093\r\n10\r\n849172317 361325206\r\n341655282 740807372\r\n453949939 809030434\r\n813199219 765838311\r\n725032511 427644854\r\n631233366 115983627\r\n825067417 721190169\r\n463026366 953335259\r\n881501578 987288937\r\n500099903 427659916\r\n",
                "11272808994\r\n"
            ],
            [
                "10\r\n598654597 488228616\r\n544064902 21923894\r\n329635457 980089248\r\n988262691 654502493\r\n967529230 543358150\r\n835120075 128123793\r\n809901567 613170206\r\n152157661 479980560\r\n859252956 318029856\r\n614959273 735298093\r\n10\r\n544064902 740807372\r\n859252956 765838311\r\n835120075 115983627\r\n825067417 463026366\r\n809901567 500099903\r\n614959273 322932832\r\n33955432 657532637\r\n816892960 927933923\r\n916770606 754371712\r\n967529230 566149252\r\n",
                "8955052582\r\n"
            ],
            [
                "1\r\n259021863 682413763\r\n1\r\n554146726 693647287\r\n",
                "1376061050\r\n"
            ],
            [
                "1\r\n259021863 682413763\r\n1\r\n554146726 425883728\r\n",
                "1108297491\r\n"
            ],
            [
                "1\r\n1000000000 1\r\n1\r\n1000000000 1000000000\r\n",
                "1000000000\r\n"
            ],
            [
                "2\r\n1 4\r\n2 4\r\n2\r\n1 4\r\n2 4\r\n",
                "8\r\n"
            ],
            [
                "1\r\n14 15\r\n3\r\n35 89\r\n92 65\r\n1000000000 239\r\n",
                "408\r\n"
            ]
        ]
    }
]