[
    {
        "name": "Erase and Extend (Easy Version)",
        "description": "This is the easy version of the problem. The only difference is the\nconstraints on \n    n\n and \n    k\n. You can make hacks only if all versions of\nthe problem are solved. You have a string \n    s\n, and you can do two types of\noperations on it: Delete the last character of the string. Duplicate the\nstring: \n    s:=s+s\n, where \n    +\n denotes concatenation. You can use each\noperation any number of times (possibly none). Your task is to find the\nlexicographically smallest string of length exactly \n    k\n that can be\nobtained by doing these operations on string \n    s\n. A string \n    a\n is\nlexicographically smaller than a string \n    b\n if and only if one of the\nfollowing holds: \n    a\n is a prefix of \n    b\n, but \n    a\n     b\n; In the\nfirst position where \n    a\n and \n    b\n differ, the string \n    a\n has a\nletter that appears earlier in the alphabet than the corresponding letter in\n\n    b\n. Input The first line contains two integers \n    n\n, \n    k\n (\n    1\n    \n    \u2264 n, k \n    \u2264 5000\n) \u2014 the length of the original string \n    s\n and\nthe length of the desired string. The second line contains the string \n    s\n,\nconsisting of \n    n\n lowercase English letters. Output Print the\nlexicographically smallest string of length \n    k\n that can be obtained by\ndoing the operations on string \n    s\n. Examples Input 8 16 dbcadabc Output\ndbcadabcdbcadabc Input 4 5 abcd Output aaaaa Note In the first test, it is\noptimal to make one duplication: \"dbcadabc\" \n    \u2192\n \"dbcadabcdbcadabc\". In\nthe second test it is optimal to delete the last \n    3\n characters, then\nduplicate the string \n    3\n times, then delete the last \n    3\n characters to\nmake the string have length \n    k\n. \"abcd\" \n    \u2192\n \"abc\" \n    \u2192\n \"ab\"\n\n    \u2192\n \"a\" \n    \u2192\n \"aa\" \n    \u2192\n \"aaaa\" \n    \u2192\n \"aaaaaaaa\"\n\n    \u2192\n \"aaaaaaa\" \n    \u2192\n \"aaaaaa\" \n    \u2192\n \"aaaaa\".\n\n",
        "cf_contest_id": 1537,
        "cf_index": "E1",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "dp",
            "greedy",
            "hashing",
            "implementation",
            "string suffix structures",
            "strings",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8 16\r\ndbcadabc\r\n",
                "dbcadabcdbcadabc\r\n"
            ],
            [
                "4 5\r\nabcd\r\n",
                "aaaaa\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 10\r\ndcdcd\r\n",
                "dcdcdcdcdc\r\n"
            ],
            [
                "5 10\r\ncbcbc\r\n",
                "cbcbcbcbcb\r\n"
            ],
            [
                "4 11\r\nddcd\r\n",
                "ddcddcddcdd\r\n"
            ],
            [
                "8 20\r\nccaccaca\r\n",
                "ccaccacaccaccacaccac\r\n"
            ],
            [
                "4 11\r\nzzaz\r\n",
                "zzazzazzazz\r\n"
            ],
            [
                "5 10\r\nbbabb\r\n",
                "bbabbabbab\r\n"
            ]
        ]
    }
]