[
    {
        "name": "Koxia, Mahiru and Winter Festival",
        "description": "Wow, what a big face! Kagura Mahiru Koxia and Mahiru are enjoying the Winter\nFestival. The streets of the Winter Festival can be represented as a \n    n\n    \n    \u00d7 n\n undirected grid graph. Formally, the set of vertices is\n\n    (i,j) \n      | \n      1 \n    \u2264 i,j\n    \u2264 n\n and two vertices\n\n    (i_1,j_1)\n and \n    (i_2,j_2)\n are connected by an edge if and only if\n\n    |i_1-i_2|+|j_1-j_2|=1\n. A network with size \n    n = 3\n. Koxia and Mahiru\nare planning to visit The Winter Festival by traversing \n    2n\n routes.\nAlthough routes are not planned yet, the endpoints of the routes are already\nplanned as follows: In the \n    i\n-th route, they want to start from vertex\n\n    (1, i)\n and end at vertex \n    (n, p_i)\n, where \n    p\n is a permutation\nof length \n    n\n. In the \n    (i+n)\n-th route, they want to start from vertex\n\n    (i, 1)\n and end at vertex \n    (q_i, n)\n, where \n    q\n is a permutation\nof length \n    n\n. A network with size \n    n = 3\n, points to be connected are\nshown in the same color for \n    p = [3, 2, 1]\n and \n    q = [3, 1, 2]\n. Your\ntask is to find a routing scheme \u2014 \n    2n\n paths where each path connects the\nspecified endpoints. Let's define the congestion of an edge as the number of\ntimes it is used (both directions combined) in the routing scheme. In order to\nensure that Koxia and Mahiru won't get too bored because of traversing\nrepeated edges, please find a routing scheme that minimizes the maximum\ncongestion among all edges. An example solution \u2014 the maximum congestion is\n\n    2\n, which is optimal in this case. Input The first line contains an\ninteger \n    n\n (\n    2 \n    \u2264 n \n    \u2264 200\n) \u2014 the size of the network. The\nsecond line contains \n    n\n integers \n    p_1, p_2, \n    \u2026, p_n\n (\n    1\n    \n    \u2264 p_i \n    \u2264 n\n). The third line contains \n    n\n integers \n    q_1, q_2,\n    \n    \u2026, q_n\n (\n    1 \n    \u2264 q_i \n    \u2264 n\n). It is guaranteed that both\n\n    p\n and \n    q\n are permutations of length \n    n\n. Output Output \n    2n\n\nlines, each line describing a route. The first \n    n\n lines should describe\nthe connections from top to bottom. The \n    i\n-th line should describe the\nroute starting at vertex \n    (1, i)\n and ending at vertex \n    (n, p_i)\n. The\nnext \n    n\n lines should describe the connections from left to right. The\n\n    (i+n)\n-th line should describe the route starting at vertex \n    (i, 1)\n\nand ending at vertex \n    (q_i, n)\n. Each line describing a route should start\nwith an integer \n    k\n (\n    2 \n    \u2264 k \n    \u2264 10^5\n) \u2014 the number of vertices\nthe route passes, including the starting and ending vertices. Then output all\nthe vertices on the route in order. In other words, if the route is \n    (x_1,\n    y_1) \n    \u2192 (x_2, y_2) \n    \u2192\n    \u2026\n    \u2192 (x_k,\n    y_k)\n, then output \n    k\u00a0x_1\u00a0y_1\u00a0x_2\u00a0y_2 \n    \u2026 x_k\u00a0y_k\n. Note that\n\n    |x_i-x_i+1|+|y_i-y_i+1| = 1\n should holds for \n    1 \n    \u2264 i < k\n. If\nthere are multiple solutions that minimize the maximum congestion, you may\noutput any. Examples Input 3 3 2 1 3 1 2 Output 5 1 1 2 1 2 2 3 2 3 3 3 1 2 2\n2 3 2 5 1 3 1 2 1 1 2 1 3 1 5 1 1 1 2 1 3 2 3 3 3 4 2 1 2 2 2 3 1 3 4 3 1 3 2\n3 3 2 3 Input 4 3 4 2 1 2 4 1 3 Output 6 1 1 1 2 2 2 2 3 3 3 4 3 6 1 2 1 3 2 3\n2 4 3 4 4 4 5 1 3 2 3 2 2 3 2 4 2 7 1 4 1 3 1 2 2 2 2 1 3 1 4 1 7 1 1 2 1 3 1\n3 2 3 3 2 3 2 4 6 2 1 2 2 3 2 4 2 4 3 4 4 6 3 1 3 2 3 3 3 4 2 4 1 4 5 4 1 4 2\n4 3 3 3 3 4 Input 3 1 2 3 1 2 3 Output 3 1 1 2 1 3 1 3 1 2 2 2 3 2 3 1 3 2 3 3\n3 3 1 1 1 2 1 3 3 2 1 2 2 2 3 3 3 1 3 2 3 3 Note The first example corresponds\nto the figures in the problem statement. The output for examples \n    2\n and\n\n    3\n respectively are visualized below: Sample output for examples \n    2\n\nand \n    3\n. Maximum congestions are \n    2\n and \n    1\n respectively.\n\n",
        "cf_contest_id": 1770,
        "cf_index": "H",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3 2 1\r\n3 1 2\r\n",
                "5 1 1 2 1 3 1 3 2 3 3\r\n3 1 2 2 2 3 2\r\n5 1 3 2 3 3 3 3 2 3 1\r\n5 1 1 1 2 1 3 2 3 3 3\r\n4 2 1 1 1 1 2 1 3\r\n4 3 1 2 1 2 2 2 3\r\n"
            ],
            [
                "4\r\n3 4 2 1\r\n2 4 1 3\r\n",
                "6 1 1 2 1 3 1 4 1 4 2 4 3\r\n6 1 2 2 2 3 2 3 3 4 3 4 4\r\n5 1 3 2 3 3 3 3 2 4 2\r\n7 1 4 2 4 3 4 4 4 4 3 4 2 4 1\r\n5 1 1 1 2 1 3 1 4 2 4\r\n6 2 1 2 2 2 3 3 3 3 4 4 4\r\n6 3 1 2 1 1 1 1 2 1 3 1 4\r\n7 4 1 3 1 3 2 2 2 2 3 2 4 3 4\r\n"
            ],
            [
                "3\r\n1 2 3\r\n1 2 3\r\n",
                "3 1 1 2 1 3 1\r\n3 1 2 2 2 3 2\r\n3 1 3 2 3 3 3\r\n3 1 1 1 2 1 3\r\n3 2 1 2 2 2 3\r\n3 3 1 3 2 3 3\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 2\r\n1 2\r\n",
                "2 1 1 2 1\r\n2 1 2 2 2\r\n2 1 1 1 2\r\n2 2 1 2 2\r\n"
            ],
            [
                "2\r\n2 1\r\n2 1\r\n",
                "3 1 1 2 1 2 2\r\n3 1 2 2 2 2 1\r\n3 1 1 1 2 2 2\r\n3 2 1 1 1 1 2\r\n"
            ]
        ]
    }
]