[
    {
        "name": "The Fair Nut's getting crazy",
        "description": "The Fair Nut has found an array \n    a\n of \n    n\n integers. We call subarray\n\n    l \n    \u2026 r\n a sequence of consecutive elements of an array with indexes\nfrom \n    l\n to \n    r\n, i.e. \n    a_l, a_l+1, a_l+2, \n    \u2026, a_r-1,\n    a_r\n. No one knows the reason, but he calls a pair of subsegments good if\nand only if the following conditions are satisfied: These subsegments should\nnot be nested. That is, each of the subsegments should contain an element (as\nan index) that does not belong to another subsegment. Subsegments intersect\nand each element that belongs to the intersection belongs each of segments\nonly once.For example \n    a=[1, 2, 3, 5, 5]\n. Pairs \n    (1 \n    \u2026 3; 2\n    \n    \u2026 5)\n and \n    (1 \n    \u2026 2; 2 \n    \u2026 3)\n) \u2014 are good, but \n    (1\n    \n    \u2026 3; 2 \n    \u2026 3)\n and \n    (3 \n    \u2026 4; 4 \n    \u2026 5)\n \u2014 are not\n(subsegment \n    1 \n    \u2026 3\n contains subsegment \n    2 \n    \u2026 3\n, integer\n\n    5\n belongs both segments, but occurs twice in subsegment \n    4 \n    \u2026\n    5\n). Help the Fair Nut to find out the number of pairs of good subsegments!\nThe answer can be rather big so print it modulo \n    10^9+7\n. Input The first\nline contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the\nlength of array \n    a\n. The second line contains \n    n\n integers \n    a_1,\n    a_2, \n    \u2026, a_n\n (\n    -10^9 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the array elements.\nOutput Print single integer \u2014 the number of pairs of good subsegments modulo\n\n    10^9+7\n. Examples Input 3 1 2 3 Output 1 Input 5 1 2 1 2 3 Output 4 Note\nIn the first example, there is only one pair of good subsegments: \n    (1\n    \n    \u2026 2, 2 \n    \u2026 3)\n. In the second example, there are four pairs of\ngood subsegments: \n    (1 \n    \u2026 2, 2 \n    \u2026 3)\n \n    (2 \n    \u2026 3, 3\n    \n    \u2026 4)\n \n    (2 \n    \u2026 3, 3 \n    \u2026 5)\n \n    (3 \n    \u2026 4, 4 \n    \u2026\n    5)\n\n\n",
        "cf_contest_id": 1083,
        "cf_index": "D",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 2 3\r\n",
                "1\r\n"
            ],
            [
                "5\r\n1 2 1 2 3\r\n",
                "4\r\n"
            ]
        ],
        "private_cases": [
            [
                "6\r\n100 100 500 500 0 0\r\n",
                "0\r\n"
            ],
            [
                "1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "7\r\n1 2 1 2 1 2 1\r\n",
                "5\r\n"
            ],
            [
                "3\r\n3 3 999888777\r\n",
                "0\r\n"
            ],
            [
                "2\r\n10203040 40302010\r\n",
                "0\r\n"
            ],
            [
                "10\r\n1 1 2 1 2 3 1 2 3 4\r\n",
                "33\r\n"
            ],
            [
                "16\r\n3 6 9 3 1 10 9 1 10 10 6 6 1 9 2 2\r\n",
                "136\r\n"
            ],
            [
                "10\r\n8 3 2 1 10 3 9 1 2 2\r\n",
                "127\r\n"
            ],
            [
                "16\r\n4 7 6 6 7 3 2 2 8 6 2 7 3 8 6 8\r\n",
                "219\r\n"
            ],
            [
                "11\r\n8 3 2 2 8 2 4 4 2 10 10\r\n",
                "33\r\n"
            ],
            [
                "9\r\n2 9 2 4 8 2 7 4 7\r\n",
                "62\r\n"
            ],
            [
                "3\r\n3 3 3\r\n",
                "0\r\n"
            ],
            [
                "3\r\n1 1 1\r\n",
                "0\r\n"
            ],
            [
                "3\r\n1 2 1\r\n",
                "1\r\n"
            ],
            [
                "100\r\n1 8 3 8 10 8 5 3 10 3 5 8 4 5 5 5 10 3 6 6 6 6 6 7 2 7 2 4 7 8 3 8 7 2 5 6 1 5 5 7 9 7 6 9 1 8 1 3 6 5 1 3 6 9 5 6 8 4 8 6 10 9 2 9 3 8 7 5 2 10 2 10 3 6 5 5 3 5 10 2 3 7 10 8 8 4 3 4 9 6 10 7 6 6 6 4 9 9 8 9\r\n",
                "6613\r\n"
            ],
            [
                "100\r\n9 9 72 55 14 8 55 58 35 67 3 18 73 92 41 49 15 60 18 66 9 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 76 55 72 89 4 78 27 29 82 18 83 12 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\r\n",
                "258727\r\n"
            ],
            [
                "10\r\n1 2 3 4 5 6 7 8 9 10\r\n",
                "330\r\n"
            ],
            [
                "100\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\r\n",
                "4082925\r\n"
            ],
            [
                "50\r\n1 1 1 2 1 2 1 1 2 3 1 2 1 2 1 1 1 1 1 2 1 2 3 1 2 3 1 1 2 1 1 2 3 1 2 3 1 2 1 1 2 1 2 3 1 1 1 2 1 1\r\n",
                "308\r\n"
            ],
            [
                "50\r\n1 2 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 1 2 3 4 5 6 7 8 9 10 11 12 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1\r\n",
                "30518\r\n"
            ],
            [
                "50\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 1 2 3 4 5 6 1 2 3 4 5 6 7 8 9 1 2\r\n",
                "42997\r\n"
            ],
            [
                "50\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 1 2 3 1\r\n",
                "117873\r\n"
            ],
            [
                "100\r\n4 4 4 4 4 4 4 4 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 4 4 4 4 4 4 4 4 2 2 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 5 5 4 4 4 4 4 4 4 4 4 4 1 2 2 2 2 2 2 2 5 5 5 5 5 5 5 5 5 5 4 4 4 4 4 3 3 3 3 3 3 2 2 3 3 3 3 3 4\r\n",
                "900\r\n"
            ]
        ]
    }
]