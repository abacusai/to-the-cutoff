[
    {
        "name": "Bear and Blocks",
        "description": "Limak is a little bear who loves to play. Today he is playing by destroying\nblock towers. He built n towers in a row. The i-th tower is made of hi\nidentical blocks. For clarification see picture for the first sample. Limak\nwill repeat the following operation till everything is destroyed. Block is\ncalled internal if it has all four neighbors, i.e. it has each side (top,\nleft, down and right) adjacent to other block or to the floor. Otherwise,\nblock is boundary. In one operation Limak destroys all boundary blocks. His\npaws are very fast and he destroys all those blocks at the same time. Limak is\nready to start. You task is to count how many operations will it take him to\ndestroy all towers. Input The first line contains single integer n (1 \u2264 n \u2264\n10^5). The second line contains n space-separated integers h1, h2, ..., hn (1\n\u2264 hi \u2264 10^9) \u2014 sizes of towers. Output Print the number of operations needed\nto destroy all towers. Examples Input 6 2 1 4 6 2 2 Output 3 Input 7 3 3 3 1 3\n3 3 Output 2 Note The picture below shows all three operations for the first\nsample test. Each time boundary blocks are marked with red color. After first\noperation there are four blocks left and only one remains after second\noperation. This last block is destroyed in third operation.\n\n",
        "cf_contest_id": 573,
        "cf_index": "B",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dp",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n2 1 4 6 2 2\r\n",
                "3\r\n"
            ],
            [
                "7\r\n3 3 3 1 3 3 3\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "7\r\n5128 5672 5805 5452 5882 5567 5032\r\n",
                "4\r\n"
            ],
            [
                "10\r\n1 2 2 3 5 5 5 4 2 1\r\n",
                "5\r\n"
            ],
            [
                "14\r\n20 20 20 20 20 20 3 20 20 20 20 20 20 20\r\n",
                "5\r\n"
            ],
            [
                "50\r\n3 2 4 3 5 3 4 5 3 2 3 3 3 4 5 4 2 2 3 3 4 4 3 2 3 3 2 3 4 4 5 2 5 2 3 5 4 4 2 2 3 5 2 5 2 2 5 4 5 4\r\n",
                "4\r\n"
            ],
            [
                "1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "1\r\n1000000000\r\n",
                "1\r\n"
            ],
            [
                "2\r\n1 1\r\n",
                "1\r\n"
            ],
            [
                "2\r\n1049 1098\r\n",
                "1\r\n"
            ],
            [
                "2\r\n100 100\r\n",
                "1\r\n"
            ],
            [
                "5\r\n1 2 3 2 1\r\n",
                "3\r\n"
            ],
            [
                "15\r\n2 2 1 1 2 2 2 2 2 2 2 2 2 1 2\r\n",
                "2\r\n"
            ],
            [
                "28\r\n415546599 415546599 415546599 415546599 415546599 415546599 415546599 415546599 415546599 2 802811737 802811737 802811737 802811737 802811737 802811737 802811737 802811737 1 550595901 550595901 550595901 550595901 550595901 550595901 550595901 550595901 550595901\r\n",
                "6\r\n"
            ],
            [
                "45\r\n3 12 13 11 13 13 10 11 14 15 15 13 14 12 13 11 14 10 10 14 14 11 10 12 11 11 13 14 10 11 14 13 14 11 11 11 12 15 1 10 15 12 14 14 14\r\n",
                "13\r\n"
            ],
            [
                "84\r\n1 3 4 5 6 5 6 7 8 9 7 4 5 4 2 5 1 1 1 3 2 7 7 8 10 9 5 6 5 2 3 3 3 3 3 2 4 8 6 5 8 9 8 7 9 3 4 4 4 2 2 1 6 4 9 5 9 9 10 7 10 4 5 4 2 4 3 3 4 4 6 6 6 9 10 12 7 5 9 8 5 3 3 2\r\n",
                "8\r\n"
            ],
            [
                "170\r\n1 2 1 2 1 1 1 1 2 3 2 1 1 2 2 1 2 1 2 1 1 2 3 3 2 1 1 1 1 1 1 1 1 2 1 2 3 3 2 1 2 2 1 2 3 2 1 1 2 3 2 1 2 1 1 1 2 3 3 2 1 2 1 2 1 1 1 2 1 2 1 1 2 2 1 1 2 1 2 2 1 2 1 2 2 1 2 1 2 3 2 1 1 2 3 4 4 3 2 1 2 1 2 1 2 3 3 2 1 2 1 1 1 1 1 1 1 2 2 1 1 2 1 1 1 1 2 1 1 2 3 2 1 2 2 1 2 1 1 1 2 2 1 2 1 2 3 2 1 2 1 1 1 2 3 4 5 4 3 2 1 1 2 1 2 3 4 3 2 1\r\n",
                "5\r\n"
            ],
            [
                "1\r\n5\r\n",
                "1\r\n"
            ]
        ]
    }
]