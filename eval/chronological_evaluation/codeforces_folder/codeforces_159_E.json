[
    {
        "name": "Zebra Tower",
        "description": "Little Janet likes playing with cubes. Actually, she likes to play with\nanything whatsoever, cubes or tesseracts, as long as they are multicolored.\nEach cube is described by two parameters \u2014 color ci and size si. A Zebra Tower\nis a tower that consists of cubes of exactly two colors. Besides, the colors\nof the cubes in the tower must alternate (colors of adjacent cubes must\ndiffer). The Zebra Tower should have at least two cubes. There are no other\nlimitations. The figure below shows an example of a Zebra Tower. A Zebra\nTower's height is the sum of sizes of all cubes that form the tower. Help\nlittle Janet build the Zebra Tower of the maximum possible height, using the\navailable cubes. Input The first line contains an integer n (2 \u2264 n \u2264 10^5) \u2014\nthe number of cubes. Next n lines contain the descriptions of the cubes, one\ndescription per line. A cube description consists of two space-separated\nintegers ci and si (1 \u2264 ci, si \u2264 10^9) \u2014 the i-th cube's color and size,\ncorrespondingly. It is guaranteed that there are at least two cubes of\ndifferent colors. Output Print the description of the Zebra Tower of the\nmaximum height in the following form. In the first line print the tower's\nheight, in the second line print the number of cubes that form the tower, and\nin the third line print the space-separated indices of cubes in the order in\nwhich they follow in the tower from the bottom to the top. Assume that the\ncubes are numbered from 1 to n in the order in which they were given in the\ninput. If there are several existing Zebra Towers with maximum heights, it is\nallowed to print any of them. Please do not use the \nor write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams\nor the \nInput 2 1 1 2 1 Output 2 2 2 1\n\n",
        "cf_contest_id": 159,
        "cf_index": "E",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "data structures",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 1.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 2\r\n1 3\r\n2 4\r\n3 3\r\n",
                "9\n3\n2 3 1\n"
            ],
            [
                "2\r\n1 1\r\n2 1\r\n",
                "2\n2\n2 1\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n1 2\r\n2 2\r\n2 1\r\n",
                "5\n3\n2 1 3\n"
            ],
            [
                "4\r\n2 1\r\n2 1\r\n1 1\r\n1 2\r\n",
                "5\n4\n2 4 1 3\n"
            ],
            [
                "6\r\n1 1\r\n1 1\r\n2 2\r\n1 2\r\n1 2\r\n2 2\r\n",
                "9\n5\n5 6 4 3 2\n"
            ],
            [
                "20\r\n1 2\r\n3 2\r\n4 2\r\n2 2\r\n5 2\r\n2 5\r\n3 2\r\n3 4\r\n4 4\r\n5 3\r\n2 1\r\n5 2\r\n5 3\r\n2 1\r\n5 5\r\n2 3\r\n1 5\r\n5 2\r\n3 4\r\n3 3\r\n",
                "32\n11\n15 19 13 8 10 20 18 7 12 2 5\n"
            ],
            [
                "12\r\n1 3\r\n2 4\r\n2 1\r\n2 1\r\n3 1\r\n3 1\r\n3 1\r\n3 1\r\n3 1\r\n3 1\r\n3 1\r\n3 1\r\n",
                "10\n7\n12 2 11 4 10 3 9\n"
            ],
            [
                "4\r\n2 1000000000\r\n2 1000000000\r\n2 1000000000\r\n1 1\r\n",
                "2000000001\n3\n3 4 2\n"
            ]
        ]
    }
]