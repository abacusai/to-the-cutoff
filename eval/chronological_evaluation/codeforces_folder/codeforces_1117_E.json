[
    {
        "name": "Decypher the String",
        "description": "This is an interactive problem. Remember to flush your output while\ncommunicating with the testing program. You may use fflush(stdout) in C++,\nsystem.out.flush() in Java, stdout.flush() in Python or flush(output) in\nPascal to flush the output. If you use some other programming language,\nconsult its documentation. You may also refer to the guide on interactive\nproblems: https://codeforces.com/blog/entry/45307. You are given a string\n\n    t\n consisting of \n    n\n lowercase Latin letters. This string was\ncyphered as follows: initially, the jury had a string \n    s\n consisting of\n\n    n\n lowercase Latin letters. Then they applied a sequence of no more than\n\n    n\n (possibly zero) operations. \n    i\n-th operation is denoted by two\nintegers \n    a_i\n and \n    b_i\n (\n    1 \n    \u2264 a_i, b_i \n    \u2264 n\n), and means\nswapping two elements of the string with indices \n    a_i\n and \n    b_i\n. All\noperations were done in the order they were placed in the sequence. For\nexample, if \n    s\n is xyz and \n    2\n following operations are performed:\n\n    a_1 = 1, b_1 = 2\n; \n    a_2 = 2, b_2 = 3\n, then after the first operation\nthe current string is yxz, and after the second operation the current string\nis yzx, so \n    t\n is yzx. You are asked to restore the original string\n\n    s\n. Unfortunately, you have no information about the operations used in\nthe algorithm (you don't even know if there were any operations in the\nsequence). But you may run the same sequence of operations on any string you\nwant, provided that it contains only lowercase Latin letters and its length is\n\n    n\n, and get the resulting string after those operations. Can you guess\nthe original string \n    s\n asking the testing system to run the sequence of\nswaps no more than \n    3\n times? The string \n    s\n and the sequence of swaps\nare fixed in each test; the interactor doesn't try to adapt the test to your\nsolution. Input Initially the testing system sends one string \n    t\n,\nconsisting of lowercase Latin letters (\n    1 \n    \u2264 |t| = n \n    \u2264 10^4\n).\nOutput To give the answer, your program should print one line \n    !\n \n    s\n\nwith a line break in the end. After that, it should flush the output and\nterminate gracefully. Interaction Before giving the answer, you may submit no\nmore than \n    3\n queries. To ask a query, print one line in the following\nformat: \n    ?\n \n    s'\n, where \n    s'\n should be a string consisting of\nexaclty \n    n\n lowercase Latin letters. The line should be ended with a line\nbreak character. After submitting a query, flush the output and read the\nanswer to your query \u2014 a string \n    t'\n consisting of \n    n\n lowercase Latin\nletters, which is the result of applying the sequence of swaps to string\n\n    s'\n. This string will be given on a separate line ended by a line break\ncharacter. If you submit an incorrect query (or ask more than \n    3\n\nqueries), the answer to it will be one string 0. After receiving such an\nanswer, your program should terminate immediately \u2014 otherwise you may receive\nverdict \"Runtime error\", \"Time limit exceeded\" or some other verdict instead\nof \"Wrong answer\". Example Input yzx aab baa aba Output ? baa ? aba ? aab !\nxyz Note In the sample, the testcase described in the statement is used. The\nparticipant asks the first query with string baa, which is transformed to aab.\nThe second query contains string aba, which is transformed to baa. The third\nquery contains string aab, which is transformed to aba. The participant can\ndeduce that the initial string \n    s\n was xyz. Note for hacking phase: To\nsubmit a test in hacking phase, you should provide it in the following format:\nThe first line should contain the string \n    s\n you guess, consisting of \n    n\n    \n    \u2208 [1, 10000]\n lowercase Latin letters. The second line should contain\n\n    k\n (\n    0 \n    \u2264 k \n    \u2264 n\n) \u2014 the number of swap operations in the\nsequence. Then \n    k\n lines should follow, \n    i\n-th of them should denote\n\n    i\n-th operation with two integers \n    a_i\n and \n    b_i\n (\n    1 \n    \u2264\n    a_i, b_i \n    \u2264 n\n). For example, the sample test would look like that: xyz 2\n1 2 2 3\n\n",
        "cf_contest_id": 1117,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "chinese remainder theorem",
            "constructive algorithms",
            "interactive",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "xyz\r\n2\r\n1 2\r\n2 3\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "a\r\n1\r\n1 1\r\n",
                "1\r\n"
            ],
            [
                "aaaaaaaaaaaaaaaaaaaaaaaaaa\r\n0\r\n",
                "1\r\n"
            ],
            [
                "vbigrkjssataekqgttswovvhdm\r\n0\r\n",
                "1\r\n"
            ],
            [
                "kibcfurptlvrwhgwoihxiabvdm\r\n26\r\n5 3\r\n5 12\r\n19 1\r\n13 19\r\n19 22\r\n2 8\r\n16 21\r\n3 1\r\n12 24\r\n21 3\r\n11 21\r\n10 15\r\n3 18\r\n5 25\r\n10 16\r\n15 14\r\n14 1\r\n11 13\r\n5 16\r\n11 7\r\n2 2\r\n26 3\r\n19 4\r\n19 7\r\n12 2\r\n2 15\r\n",
                "1\r\n"
            ],
            [
                "aaaabaaaaabbaababaaabaababaabbbaabaaabbbaaababbabaabbabababbaaabaabababbbababbbabbaaaabbbbbbbaaababa\r\n50\r\n1 100\r\n2 99\r\n3 98\r\n4 97\r\n5 96\r\n6 95\r\n7 94\r\n8 93\r\n9 92\r\n10 91\r\n11 90\r\n12 89\r\n13 88\r\n14 87\r\n15 86\r\n16 85\r\n17 84\r\n18 83\r\n19 82\r\n20 81\r\n21 80\r\n22 79\r\n23 78\r\n24 77\r\n25 76\r\n26 75\r\n27 74\r\n28 73\r\n29 72\r\n30 71\r\n31 70\r\n32 69\r\n33 68\r\n34 67\r\n35 66\r\n36 65\r\n37 64\r\n38 63\r\n39 62\r\n40 61\r\n41 60\r\n42 59\r\n43 58\r\n44 57\r\n45 56\r\n46 55\r\n47 54\r\n48 53\r\n49 52\r\n50 51\r\n",
                "1\r\n"
            ],
            [
                "aaaaaaaabaabbabaabaaabbabbbbabbababbbbbaaabaaaaababbbaaaababbbabbababbabbbbabbbaabbaabbabbaabbababab\r\n0\r\n",
                "1\r\n"
            ],
            [
                "xjywrmrwqaytezhtqmcnrrjomslvcmevncvzeddnvqgkbusnbzrppdsuzsmcobmnslpvosunavayvdbxhtavvwodorwijxfjjlat\r\n50\r\n1 100\r\n2 99\r\n3 98\r\n4 97\r\n5 96\r\n6 95\r\n7 94\r\n8 93\r\n9 92\r\n10 91\r\n11 90\r\n12 89\r\n13 88\r\n14 87\r\n15 86\r\n16 85\r\n17 84\r\n18 83\r\n19 82\r\n20 81\r\n21 80\r\n22 79\r\n23 78\r\n24 77\r\n25 76\r\n26 75\r\n27 74\r\n28 73\r\n29 72\r\n30 71\r\n31 70\r\n32 69\r\n33 68\r\n34 67\r\n35 66\r\n36 65\r\n37 64\r\n38 63\r\n39 62\r\n40 61\r\n41 60\r\n42 59\r\n43 58\r\n44 57\r\n45 56\r\n46 55\r\n47 54\r\n48 53\r\n49 52\r\n50 51\r\n",
                "1\r\n"
            ],
            [
                "rbonbwjolsbxvxarphavacqsgocwkfiezfibxvjgrfgmnqulggrkhtkhgmtcbpjfwbajrhifuclyjsmhunfxckbanswnsofcxdsr\r\n0\r\n",
                "1\r\n"
            ]
        ]
    }
]