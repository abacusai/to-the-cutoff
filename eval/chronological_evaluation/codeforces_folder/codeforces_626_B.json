[
    {
        "name": "Cards",
        "description": "Catherine has a deck of n cards, each of which is either red, green, or blue.\nAs long as there are at least two cards left, she can do one of two actions:\ntake any two (not necessarily adjacent) cards with different colors and\nexchange them for a new card of the third color; take any two (not necessarily\nadjacent) cards with the same color and exchange them for a new card with that\ncolor. She repeats this process until there is only one card left. What are\nthe possible colors for the final card? Input The first line of the input\ncontains a single integer n (1 \u2264 n \u2264 200) \u2014 the total number of cards. The\nnext line contains a string s of length n \u2014 the colors of the cards. s\ncontains only the characters 'B', 'G', and 'R', representing blue, green, and\nred, respectively. Output Print a single string of up to three characters \u2014\nthe possible colors of the final card (using the same symbols as the input) in\nalphabetical order. Examples Input 2 RB Output G Input 3 GRG Output BR Input 5\nBBBBB Output B Note In the first sample, Catherine has one red card and one\nblue card, which she must exchange for a green card. In the second sample,\nCatherine has two green cards and one red card. She has two options: she can\nexchange the two green cards for a green card, then exchange the new green\ncard and the red card for a blue card. Alternatively, she can exchange a green\nand a red card for a blue card, then exchange the blue card and remaining\ngreen card for a red card. In the third sample, Catherine only has blue cards,\nso she can only exchange them for more blue cards.\n\n",
        "cf_contest_id": 626,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dp",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\nRB\r\n",
                "G"
            ],
            [
                "3\r\nGRG\r\n",
                "BR"
            ],
            [
                "5\r\nBBBBB\r\n",
                "B"
            ]
        ],
        "private_cases": [
            [
                "1\r\nR\r\n",
                "R"
            ],
            [
                "200\r\nBBRGRRBBRGGGBGBGBGRRGRGRGRBGRGRRBBGRGBGRRGRRRGGBBRGBGBGBRBBBBBBBGGBRGGRRRGGRGBGBGGBRRRRBRRRBRBBGGBGBRGRGBBBBGGBGBBBGBGRRBRRRGBGGBBBRBGRBRRGGGRRGBBBGBGRRRRRRGGRGRGBBBRGGGBGGGBRBBRRGBGRGRBRRRBRBGRGGBRBB\r\n",
                "BGR"
            ],
            [
                "101\r\nRRRRRRRRRRRRRRRRRRRBRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\r\n",
                "BG"
            ],
            [
                "7\r\nBBBGBRG\r\n",
                "BGR"
            ],
            [
                "5\r\nGRRGR\r\n",
                "BGR"
            ],
            [
                "3\r\nGBR\r\n",
                "BGR"
            ],
            [
                "1\r\nB\r\n",
                "B"
            ],
            [
                "2\r\nBB\r\n",
                "B"
            ],
            [
                "1\r\nG\r\n",
                "G"
            ],
            [
                "2\r\nBG\r\n",
                "R"
            ],
            [
                "3\r\nBGB\r\n",
                "GR"
            ],
            [
                "2\r\nGG\r\n",
                "G"
            ],
            [
                "3\r\nGBG\r\n",
                "BR"
            ],
            [
                "4\r\nBGBG\r\n",
                "BGR"
            ],
            [
                "1\r\nR\r\n",
                "R"
            ],
            [
                "2\r\nBR\r\n",
                "G"
            ],
            [
                "3\r\nBRB\r\n",
                "GR"
            ],
            [
                "2\r\nRG\r\n",
                "B"
            ],
            [
                "3\r\nBGR\r\n",
                "BGR"
            ],
            [
                "4\r\nRBGB\r\n",
                "BGR"
            ],
            [
                "3\r\nGGR\r\n",
                "BR"
            ],
            [
                "4\r\nGGRB\r\n",
                "BGR"
            ],
            [
                "5\r\nBGBGR\r\n",
                "BGR"
            ],
            [
                "2\r\nRR\r\n",
                "R"
            ],
            [
                "3\r\nRBR\r\n",
                "BG"
            ],
            [
                "4\r\nRRBB\r\n",
                "BGR"
            ],
            [
                "3\r\nRRG\r\n",
                "BG"
            ],
            [
                "4\r\nBRRG\r\n",
                "BGR"
            ],
            [
                "5\r\nRBRBG\r\n",
                "BGR"
            ],
            [
                "4\r\nRGGR\r\n",
                "BGR"
            ],
            [
                "5\r\nBRGRG\r\n",
                "BGR"
            ],
            [
                "6\r\nGRRGBB\r\n",
                "BGR"
            ],
            [
                "150\r\nGRGBBBBRBGGBGBBGBBBBGRBBRRBBGRRGGGBRBBRGRRRRGBGRRBGBGBGRBBBGBBBGBGBRGBRRRRRGGGRGRBBGBRGGGRBBRGBBGRGGGBBRBRRGRGRRGRRGRRRGBGBRRGGRGGBRBGGGBBBRGRGBRGRRRR\r\n",
                "BGR"
            ],
            [
                "16\r\nRRGRRRRRRGGRGRRR\r\n",
                "BGR"
            ],
            [
                "190\r\nBBBBBBBBBBBBBBBBBGBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n",
                "GR"
            ],
            [
                "200\r\nRGRGRRRRRGRRGRRRGRGRRRGGRGRRGGGRRGGRRRRRRRRRRRGRRGRRRGRRRGRRRRRRRGRRRRRRRRRRRGGRRGGRRRRGGRRRRRRRRRGGGRGRGRGRRGRGGRGRGRRRGRRRRRRGGRGRRRRGRRGRGGRRRRRRRGRGGRRGRRRRRRRGGRRRRGRRRRRRRGRRRGGRRRRRRGRRGGGRRRGR\r\n",
                "BGR"
            ],
            [
                "200\r\nGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG\r\n",
                "G"
            ],
            [
                "52\r\nBBBBBBBBBBBBBBBBBBBBGBGBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\r\n",
                "BGR"
            ],
            [
                "200\r\nGRGRRGRBRRRGGGRGGRRRRRBBGRRGRBBGRRGBGRRBBRBBRRBBBGRBRGGGGBGGBRRBBRGRBGGRRGGBBRBGGRGBBRRBBRGBRRBGBRBGBBRGGRRRGGGBRGGGGRRRBBRRGRGRBRRGRBBGGRBBRGRGRBGRBBRGGBBBGRGBBGGBGBGBBRRBGRGRGGBRRGRGGGGGBRGGGGBBBBRB\r\n",
                "BGR"
            ],
            [
                "102\r\nGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGRGGGGGGGGBGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG\r\n",
                "BGR"
            ],
            [
                "193\r\nRRRGGGRBGGBGGGBGGBBGRBGGRBGGBBRBGGRBBBRBRRGGBBRBRGRRRBGBBRGGRGGGBGGRRGGRGRRBRBRBRRGRGBGBRGBBRGRRRBGRGGBGBRBBBGBRBBGBGBGGGBGGGGBRBBRRBGRGGBBBRBBBBBGRRRGBRGBRRRBBBGBGGGGRGGRRBRBGRRGBGBRBGGGRBRRGG\r\n",
                "BGR"
            ],
            [
                "90\r\nBGBGGRRBGGRRRRRGGRGBBBBBRRBGBGBGBGGBBGRGGGGRBRBBRRRGBRRGBBGBBGGGRGRGRBGBBBRRGRRBRBRRGGRBRB\r\n",
                "BGR"
            ],
            [
                "3\r\nGGB\r\n",
                "BR"
            ]
        ]
    }
]