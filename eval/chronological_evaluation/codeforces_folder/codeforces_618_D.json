[
    {
        "name": "Hamiltonian Spanning Tree",
        "description": "A group of n cities is connected by a network of roads. There is an undirected\nroad between every pair of cities, so there are roads in total. It takes\nexactly y seconds to traverse any single road. A spanning tree is a set of\nroads containing exactly n - 1 roads such that it's possible to travel between\nany two cities using only these roads. Some spanning tree of the initial\nnetwork was chosen. For every road in this tree the time one needs to traverse\nthis road was changed from y to x seconds. Note that it's not guaranteed that\nx is smaller than y. You would like to travel through all the cities using the\nshortest path possible. Given n, x, y and a description of the spanning tree\nthat was chosen, find the cost of the shortest path that starts in any city,\nends in any city and visits all cities exactly once. Input The first line of\nthe input contains three integers n, x and y (2 \u2264 n \u2264 200 000, 1 \u2264 x, y \u2264\n10^9). Each of the next n - 1 lines contains a description of a road in the\nspanning tree. The i-th of these lines contains two integers ui and vi (1 \u2264\nui, vi \u2264 n) \u2014 indices of the cities connected by the i-th road. It is\nguaranteed that these roads form a spanning tree. Output Print a single\ninteger \u2014 the minimum number of seconds one needs to spend in order to visit\nall the cities exactly once. Examples Input 5 2 3 1 2 1 3 3 4 5 3 Output 9\nInput 5 3 2 1 2 1 3 3 4 5 3 Output 8 Note In the first sample, roads of the\nspanning tree have cost 2, while other roads have cost 3. One example of an\noptimal path is . In the second sample, we have the same spanning tree, but\nroads in the spanning tree cost 3, while other roads cost 2. One example of an\noptimal path is .\n\n",
        "cf_contest_id": 618,
        "cf_index": "D",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dp",
            "graph matchings",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 2 3\r\n1 2\r\n1 3\r\n3 4\r\n5 3\r\n",
                "9"
            ],
            [
                "5 3 2\r\n1 2\r\n1 3\r\n3 4\r\n5 3\r\n",
                "8"
            ]
        ],
        "private_cases": [
            [
                "50 23129 410924\r\n18 28\r\n17 23\r\n21 15\r\n18 50\r\n50 11\r\n32 3\r\n44 41\r\n50 31\r\n50 34\r\n5 14\r\n36 13\r\n22 40\r\n20 9\r\n9 43\r\n19 47\r\n48 40\r\n20 22\r\n33 45\r\n35 22\r\n33 24\r\n9 6\r\n13 1\r\n13 24\r\n49 20\r\n1 20\r\n29 38\r\n10 35\r\n25 23\r\n49 30\r\n42 8\r\n20 18\r\n32 15\r\n32 1\r\n27 10\r\n20 47\r\n41 7\r\n20 14\r\n18 26\r\n4 20\r\n20 2\r\n46 37\r\n41 16\r\n46 41\r\n12 20\r\n8 40\r\n18 37\r\n29 3\r\n32 39\r\n23 37\r\n",
                "8113631"
            ],
            [
                "2 3 4\r\n1 2\r\n",
                "3"
            ],
            [
                "50 491238 12059\r\n42 3\r\n5 9\r\n11 9\r\n41 15\r\n42 34\r\n11 6\r\n40 16\r\n23 8\r\n41 7\r\n22 6\r\n24 29\r\n7 17\r\n31 2\r\n17 33\r\n39 42\r\n42 6\r\n41 50\r\n21 45\r\n19 41\r\n1 21\r\n42 1\r\n2 25\r\n17 28\r\n49 42\r\n30 13\r\n4 12\r\n10 32\r\n48 35\r\n21 2\r\n14 6\r\n49 29\r\n18 20\r\n38 22\r\n19 37\r\n20 47\r\n3 36\r\n1 44\r\n20 7\r\n4 11\r\n39 26\r\n30 40\r\n6 7\r\n25 46\r\n2 27\r\n30 42\r\n10 11\r\n8 21\r\n42 43\r\n35 8\r\n",
                "590891"
            ],
            [
                "2 4 1\r\n1 2\r\n",
                "4"
            ],
            [
                "5 2 2\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n",
                "8"
            ],
            [
                "4 100 1\r\n1 2\r\n1 3\r\n1 4\r\n",
                "102"
            ],
            [
                "3 2 1\r\n1 2\r\n1 3\r\n",
                "3"
            ],
            [
                "5 6 1\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n",
                "9"
            ],
            [
                "3 100 1\r\n1 2\r\n2 3\r\n",
                "101"
            ],
            [
                "2 2 1\r\n1 2\r\n",
                "2"
            ],
            [
                "5 3 2\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n",
                "9"
            ],
            [
                "4 1000 1\r\n1 2\r\n1 3\r\n1 4\r\n",
                "1002"
            ],
            [
                "4 100 1\r\n1 2\r\n2 3\r\n3 4\r\n",
                "3"
            ],
            [
                "2 3 1\r\n1 2\r\n",
                "3"
            ],
            [
                "5 4 3\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n",
                "13"
            ]
        ]
    }
]