[
    {
        "name": "Gena's Code",
        "description": "It's the year 4527 and the tanks game that we all know and love still exists.\nThere also exists Great Gena's code, written in 2016. The problem this code\nsolves is: given the number of tanks that go into the battle from each\ncountry, find their product. If it is turns to be too large, then the servers\nmight have not enough time to assign tanks into teams and the whole game will\ncollapse! There are exactly n distinct countries in the world and the i-th\ncountry added ai tanks to the game. As the developers of the game are\nperfectionists, the number of tanks from each country is beautiful. A\nbeautiful number, according to the developers, is such number that its decimal\nrepresentation consists only of digits '1' and '0', moreover it contains at\nmost one digit '1'. However, due to complaints from players, some number of\ntanks of one country was removed from the game, hence the number of tanks of\nthis country may not remain beautiful. Your task is to write the program that\nsolves exactly the same problem in order to verify Gena's code correctness.\nJust in case. Input The first line of the input contains the number of\ncountries n (1 \u2264 n \u2264 100 000). The second line contains n non-negative\nintegers ai without leading zeroes \u2014 the number of tanks of the i-th country.\nIt is guaranteed that the second line contains at least n - 1 beautiful\nnumbers and the total length of all these number's representations doesn't\nexceed 100 000. Output Print a single number without leading zeroes \u2014 the\nproduct of the number of tanks presented by each country. Examples Input 3 5\n10 1 Output 50 Input 4 1 1 10 11 Output 110 Input 5 0 3 1 100 1 Output 0 Note\nIn sample 1 numbers 10 and 1 are beautiful, number 5 is not not. In sample 2\nnumber 11 is not beautiful (contains two '1's), all others are beautiful. In\nsample 3 number 3 is not beautiful, all others are beautiful.\n\n",
        "cf_contest_id": 614,
        "cf_index": "B",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "math"
        ],
        "time_limit_seconds": 0.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n5 10 1\r\n",
                "50\r\n"
            ],
            [
                "4\r\n1 1 10 11\r\n",
                "110\r\n"
            ],
            [
                "5\r\n0 3 1 100 1\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "40\r\n10 100 10 1 10 10 100 10 10 100 10 100 100 10 1824868942 100 100 1 10 100 100 10 100 100 10 100 10 1 10 100 100 100 10 1 10 1 10 10 100 100\r\n",
                "1824868942000000000000000000000000000000000000000000000000000\r\n"
            ],
            [
                "6\r\n1000000000000000000000000000000000000 6643573784 1000000000000000000000000000000000000 1000000000000000000000000000000000000 1000000000000000000000000000000000000 1000000000000000000000000000000000000\r\n",
                "6643573784000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\r\n"
            ],
            [
                "1\r\n0\r\n",
                "0\r\n"
            ],
            [
                "1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "1\r\n9\r\n",
                "9\r\n"
            ],
            [
                "2\r\n10 50\r\n",
                "500\r\n"
            ],
            [
                "3\r\n500 1 10\r\n",
                "5000\r\n"
            ]
        ]
    }
]