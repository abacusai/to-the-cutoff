[
    {
        "name": "Broken Tree",
        "description": "You are given a tree that has n vertices, which are numbered from 1 to n,\nwhere the vertex number one is the root. Each edge has weight wi and strength\npi. Botanist Innokentiy, who is the only member of the jury of the Olympiad in\nInformatics, doesn't like broken trees. The tree is broken if there is such an\nedge the strength of which is less than the sum of weight of subtree's edges\nto which it leads. It is allowed to reduce weight of any edge by arbitrary\ninteger value, but then the strength of its edge is reduced by the same value.\nIt means if the weight of the edge is 10, and the strength is 12, then by the\nreducing the weight by 7 its weight will equal 3, and the strength will equal\n5. It is not allowed to increase the weight of the edge. Your task is to get\nthe tree, which is not broken, by reducing the weight of edges of the given\ntree, and also all edged should have the positive weight, moreover, the total\nweight of all edges should be as large as possible. It is obvious that the\nstrength of edges can not be negative, however it can equal zero if the weight\nof the subtree equals zero. Input The first line contains the integer n (1 \u2264 n\n\u2264 2\u00b710^5) \u2014 the number of vertices in the tree. The next n - 1 lines contains\nthe description of edges. Each line contains four integers x, y, w, p (1 \u2264 x,\ny \u2264 n, 1 \u2264 w \u2264 10^9, 0 \u2264 p \u2264 10^9), where x and y \u2014 vertices which connect the\nedge (the vertex number x is the parent of the vertex number y), w and p are\nthe weight and the strength of the edge, accordingly. It is guaranteed that\nthe edges describe the tree with the root in the vertex 1. Output If it is\nimpossible to get unbroken tree from the given tree, print -1 in the only\nline. Otherwise, the output data should contain n lines: In the first line\nprint the number n \u2014 the number of vertices on the tree. In the next n - 1\nlines print the description of edges of the resulting tree. Each line should\ncontain four integers x, y, w, p (1 \u2264 x, y \u2264 n, 1 \u2264 w \u2264 10^9, 0 \u2264 p \u2264 10^9),\nwhere x and y \u2014 vertices, which the edge connects (the vertex number x is the\nparent of the vertex number y), w and p are the new weight and the strength of\nthe edge, accordingly. Print edges in the same order as they are given in\ninput data: the first two integers of each line should not be changed.\nExamples Input 3 1 3 5 7 3 2 4 3 Output 3 1 3 5 7 3 2 4 3 Input 4 1 3 2 3 3 4\n5 1 3 2 3 3 Output -1 Input 5 1 2 2 4 2 4 1 9 4 5 5 6 4 3 4 8 Output 5 1 2 2 4\n2 4 1 9 4 5 1 2 4 3 2 6 Input 7 1 2 5 2 2 3 4 3 1 4 3 7 4 5 4 1 4 6 3 2 6 7 1\n6 Output 7 1 2 5 2 2 3 2 1 1 4 3 7 4 5 3 0 4 6 3 2 6 7 1 6\n\n",
        "cf_contest_id": 758,
        "cf_index": "E",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 3 5 7\r\n3 2 4 3\r\n",
                "3\r\n1 3 5 7\r\n3 2 4 3\r\n"
            ],
            [
                "4\r\n1 3 2 3\r\n3 4 5 1\r\n3 2 3 3\r\n",
                "-1\r\n"
            ],
            [
                "5\r\n1 2 2 4\r\n2 4 1 9\r\n4 5 5 6\r\n4 3 4 8\r\n",
                "5\r\n1 2 2 4\r\n2 4 1 9\r\n4 5 2 3\r\n4 3 1 5\r\n"
            ],
            [
                "7\r\n1 2 5 2\r\n2 3 4 3\r\n1 4 3 7\r\n4 5 4 1\r\n4 6 3 2\r\n6 7 1 6\r\n",
                "7\r\n1 2 5 2\r\n2 3 2 1\r\n1 4 3 7\r\n4 5 4 1\r\n4 6 2 1\r\n6 7 1 6\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 2 368 164\r\n",
                "2\r\n1 2 368 164\r\n"
            ],
            [
                "1\r\n",
                "1\r\n"
            ],
            [
                "2\r\n1 2 1 0\r\n",
                "2\r\n1 2 1 0\r\n"
            ],
            [
                "3\r\n1 3 1000000000 1000000000\r\n3 2 1000000000 1000000000\r\n",
                "3\r\n1 3 1000000000 1000000000\r\n3 2 1000000000 1000000000\r\n"
            ],
            [
                "10\r\n5 3 563927776 563927754\r\n6 4 993979684 993979724\r\n5 7 75 16\r\n10 2 50 73\r\n5 6 40785689 40785757\r\n1 5 182098256 182098222\r\n1 10 902908435 902908436\r\n10 8 962033850 962033845\r\n1 9 29 87\r\n",
                "10\r\n5 3 182098161 182098139\r\n6 4 1 41\r\n5 7 59 0\r\n10 2 50 73\r\n5 6 1 69\r\n1 5 182098256 182098222\r\n1 10 902908435 902908436\r\n10 8 902908386 902908381\r\n1 9 29 87\r\n"
            ]
        ]
    }
]