[
    {
        "name": "Alyona and a tree",
        "description": "Alyona has a tree with n vertices. The root of the tree is the vertex 1. In\neach vertex Alyona wrote an positive integer, in the vertex i she wrote ai.\nMoreover, the girl wrote a positive integer to every edge of the tree\n(possibly, different integers on different edges). Let's define dist(v, u) as\nthe sum of the integers written on the edges of the simple path from v to u.\nThe vertex v controls the vertex u (v \u2260 u) if and only if u is in the subtree\nof v and dist(v, u) \u2264 au. Alyona wants to settle in some vertex. In order to\ndo this, she wants to know for each vertex v what is the number of vertices u\nsuch that v controls u. Input The first line contains single integer n (1 \u2264 n\n\u2264 2\u00b710^5). The second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 10^9)\n\u2014 the integers written in the vertices. The next (n - 1) lines contain two\nintegers each. The i-th of these lines contains integers pi and wi (1 \u2264 pi \u2264\nn, 1 \u2264 wi \u2264 10^9) \u2014 the parent of the (i + 1)-th vertex in the tree and the\nnumber written on the edge between pi and (i + 1). It is guaranteed that the\ngiven graph is a tree. Output Print n integers \u2014 the i-th of these numbers\nshould be equal to the number of vertices that the i-th vertex controls.\nExamples Input 5 2 5 1 4 6 1 7 1 1 3 5 3 6 Output 1 0 1 0 0 Input 5 9 7 8 6 5\n1 1 2 1 3 1 4 1 Output 4 3 2 1 0 Note In the example test case the vertex 1\ncontrols the vertex 3, the vertex 3 controls the vertex 5 (note that is\ndoesn't mean the vertex 1 controls the vertex 5).\n\n",
        "cf_contest_id": 739,
        "cf_index": "B",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n2 5 1 4 6\r\n1 7\r\n1 1\r\n3 5\r\n3 6\r\n",
                "1 0 1 0 0 "
            ],
            [
                "5\r\n9 7 8 6 5\r\n1 1\r\n2 1\r\n3 1\r\n4 1\r\n",
                "4 3 2 1 0 "
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n",
                "0 "
            ],
            [
                "2\r\n1 1\r\n1 1\r\n",
                "1 0 "
            ],
            [
                "10\r\n40 77 65 14 86 16 2 51 62 79\r\n1 75\r\n10 86\r\n3 52\r\n6 51\r\n10 8\r\n3 61\r\n3 53\r\n5 98\r\n2 7\r\n",
                "1 3 0 0 0 1 0 0 0 2 "
            ],
            [
                "10\r\n52 1 84 16 59 26 56 74 52 97\r\n5 7\r\n7 13\r\n3 98\r\n7 22\r\n7 19\r\n9 54\r\n4 45\r\n10 95\r\n1 94\r\n",
                "1 0 0 1 0 0 3 0 2 0 "
            ],
            [
                "10\r\n68 29 12 14 27 47 95 100 45 14\r\n10 42\r\n9 52\r\n3 44\r\n2 81\r\n5 34\r\n3 46\r\n6 40\r\n8 89\r\n1 85\r\n",
                "0 0 1 0 2 1 0 0 0 0 "
            ],
            [
                "10\r\n84 65 39 20 8 52 49 18 35 32\r\n3 70\r\n9 79\r\n1 99\r\n3 49\r\n4 41\r\n3 43\r\n3 35\r\n4 83\r\n2 72\r\n",
                "0 0 1 1 0 0 0 0 0 0 "
            ],
            [
                "10\r\n96 92 63 25 80 74 95 41 28 54\r\n6 98\r\n1 11\r\n5 45\r\n3 12\r\n7 63\r\n4 39\r\n7 31\r\n8 81\r\n2 59\r\n",
                "2 0 1 1 1 0 2 0 0 0 "
            ],
            [
                "10\r\n4 24 86 31 49 87 42 75 18 71\r\n4 37\r\n5 46\r\n9 88\r\n1 75\r\n10 74\r\n5 32\r\n4 22\r\n7 79\r\n8 50\r\n",
                "0 0 0 1 2 0 0 1 0 1 "
            ],
            [
                "10\r\n19 48 18 37 34 1 96 98 3 85\r\n7 65\r\n2 77\r\n6 34\r\n3 39\r\n1 85\r\n6 24\r\n2 9\r\n3 73\r\n2 41\r\n",
                "0 2 0 0 0 3 1 0 0 0 "
            ],
            [
                "10\r\n31 83 37 43 2 14 39 24 93 7\r\n6 1\r\n9 17\r\n8 84\r\n3 6\r\n4 100\r\n5 21\r\n1 9\r\n6 67\r\n2 29\r\n",
                "1 0 1 0 1 2 0 0 1 0 "
            ],
            [
                "10\r\n47 7 65 49 75 36 93 47 86 24\r\n3 28\r\n4 40\r\n1 35\r\n3 65\r\n3 11\r\n2 17\r\n5 96\r\n2 60\r\n8 24\r\n",
                "1 2 3 2 0 0 0 1 0 0 "
            ],
            [
                "10\r\n1 65 76 59 21 58 97 37 30 84\r\n6 4\r\n7 28\r\n9 19\r\n2 65\r\n1 53\r\n5 10\r\n5 42\r\n10 72\r\n2 89\r\n",
                "2 1 0 0 2 2 1 0 1 0 "
            ],
            [
                "5\r\n1 1 1 1 1\r\n1 1000000000\r\n2 1000000000\r\n3 1000000000\r\n4 1000000000\r\n",
                "0 0 0 0 0 "
            ],
            [
                "6\r\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\r\n1 1000000000\r\n2 1000000000\r\n3 1000000000\r\n4 1000000000\r\n5 1000000000\r\n",
                "1 1 1 1 1 0 "
            ],
            [
                "10\r\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\r\n1 1000000000\r\n2 1000000000\r\n3 1000000000\r\n4 1000000000\r\n5 1000000000\r\n6 1000000000\r\n7 1000000000\r\n8 1000000000\r\n9 1000000000\r\n",
                "1 1 1 1 1 1 1 1 1 0 "
            ],
            [
                "10\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1000000000\r\n2 1000000000\r\n3 1000000000\r\n4 1000000000\r\n5 1000000000\r\n6 1000000000\r\n7 1000000000\r\n8 1000000000\r\n9 1000000000\r\n",
                "0 0 0 0 0 0 0 0 0 0 "
            ],
            [
                "10\r\n500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000\r\n1 1000000000\r\n2 1000000000\r\n3 1000000000\r\n4 1000000000\r\n5 1000000000\r\n6 1000000000\r\n7 1000000000\r\n8 1000000000\r\n9 1000000000\r\n",
                "0 0 0 0 0 0 0 0 0 0 "
            ],
            [
                "5\r\n1000000000 1000000000 1000000000 1000000000 1000000000\r\n1 1000000000\r\n2 1000000000\r\n3 1000000000\r\n4 1000000000\r\n",
                "1 1 1 1 0 "
            ]
        ]
    }
]