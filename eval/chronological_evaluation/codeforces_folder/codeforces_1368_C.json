[
    {
        "name": "Even Picture",
        "description": "Leo Jr. draws pictures in his notebook with checkered sheets (that is, each\nsheet has a regular square grid printed on it). We can assume that the sheets\nare infinitely large in any direction. To draw a picture, Leo Jr. colors some\nof the cells on a sheet gray. He considers the resulting picture beautiful if\nthe following conditions are satisfied: The picture is connected, that is, it\nis possible to get from any gray cell to any other by following a chain of\ngray cells, with each pair of adjacent cells in the path being neighbours\n(that is, sharing a side). Each gray cell has an even number of gray\nneighbours. There are exactly \n    n\n gray cells with all gray neighbours. The\nnumber of other gray cells can be arbitrary (but reasonable, so that they can\nall be listed).Leo Jr. is now struggling to draw a beautiful picture with a\nparticular choice of \n    n\n. Help him, and provide any example of a beautiful\npicture. To output cell coordinates in your answer, assume that the sheet is\nprovided with a Cartesian coordinate system such that one of the cells is\nchosen to be the origin \n    (0, 0)\n, axes \n    0x\n and \n    0y\n are\northogonal and parallel to grid lines, and a unit step along any axis in any\ndirection takes you to a neighbouring cell. Input The only line contains a\nsingle integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 500\n) \u2014 the number of gray\ncells with all gray neighbours in a beautiful picture. Output In the first\nline, print a single integer \n    k\n \u2014 the number of gray cells in your\npicture. For technical reasons, \n    k\n should not exceed \n    5 \n    \u00b7\n    10^5\n. Each of the following \n    k\n lines should contain two integers \u2014\ncoordinates of a gray cell in your picture. All listed cells should be\ndistinct, and the picture should satisdfy all the properties listed above. All\ncoordinates should not exceed \n    10^9\n by absolute value. One can show that\nthere exists an answer satisfying all requirements with a small enough\n\n    k\n. Example Input 4 Output 12 1 0 2 0 0 1 1 1 2 1 3 1 0 2 1 2 2 2 3 2 1 3\n2 3 Note The answer for the sample is pictured below:\n\n",
        "cf_contest_id": 1368,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4\r\n",
                "16\r\n5 5\r\n1 0\r\n0 1\r\n0 0\r\n2 1\r\n1 2\r\n1 1\r\n3 2\r\n2 3\r\n2 2\r\n4 3\r\n3 4\r\n3 3\r\n5 4\r\n4 5\r\n4 4\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n",
                "7\r\n2 2\r\n1 0\r\n0 1\r\n0 0\r\n2 1\r\n1 2\r\n1 1\r\n"
            ],
            [
                "2\r\n",
                "10\r\n3 3\r\n1 0\r\n0 1\r\n0 0\r\n2 1\r\n1 2\r\n1 1\r\n3 2\r\n2 3\r\n2 2\r\n"
            ],
            [
                "3\r\n",
                "13\r\n4 4\r\n1 0\r\n0 1\r\n0 0\r\n2 1\r\n1 2\r\n1 1\r\n3 2\r\n2 3\r\n2 2\r\n4 3\r\n3 4\r\n3 3\r\n"
            ],
            [
                "5\r\n",
                "19\r\n6 6\r\n1 0\r\n0 1\r\n0 0\r\n2 1\r\n1 2\r\n1 1\r\n3 2\r\n2 3\r\n2 2\r\n4 3\r\n3 4\r\n3 3\r\n5 4\r\n4 5\r\n4 4\r\n6 5\r\n5 6\r\n5 5\r\n"
            ],
            [
                "17\r\n",
                "55\r\n18 18\r\n1 0\r\n0 1\r\n0 0\r\n2 1\r\n1 2\r\n1 1\r\n3 2\r\n2 3\r\n2 2\r\n4 3\r\n3 4\r\n3 3\r\n5 4\r\n4 5\r\n4 4\r\n6 5\r\n5 6\r\n5 5\r\n7 6\r\n6 7\r\n6 6\r\n8 7\r\n7 8\r\n7 7\r\n9 8\r\n8 9\r\n8 8\r\n10 9\r\n9 10\r\n9 9\r\n11 10\r\n10 11\r\n10 10\r\n12 11\r\n11 12\r\n11 11\r\n13 12\r\n12 13\r\n12 12\r\n14 13\r\n13 14\r\n13 13\r\n15 14\r\n14 15\r\n14 14\r\n16 15\r\n15 16\r\n15 15\r\n17 16\r\n16 17\r\n16 16\r\n18 17\r\n17 18\r\n17 17\r\n"
            ],
            [
                "6\r\n",
                "22\r\n7 7\r\n1 0\r\n0 1\r\n0 0\r\n2 1\r\n1 2\r\n1 1\r\n3 2\r\n2 3\r\n2 2\r\n4 3\r\n3 4\r\n3 3\r\n5 4\r\n4 5\r\n4 4\r\n6 5\r\n5 6\r\n5 5\r\n7 6\r\n6 7\r\n6 6\r\n"
            ],
            [
                "7\r\n",
                "25\r\n8 8\r\n1 0\r\n0 1\r\n0 0\r\n2 1\r\n1 2\r\n1 1\r\n3 2\r\n2 3\r\n2 2\r\n4 3\r\n3 4\r\n3 3\r\n5 4\r\n4 5\r\n4 4\r\n6 5\r\n5 6\r\n5 5\r\n7 6\r\n6 7\r\n6 6\r\n8 7\r\n7 8\r\n7 7\r\n"
            ],
            [
                "8\r\n",
                "28\r\n9 9\r\n1 0\r\n0 1\r\n0 0\r\n2 1\r\n1 2\r\n1 1\r\n3 2\r\n2 3\r\n2 2\r\n4 3\r\n3 4\r\n3 3\r\n5 4\r\n4 5\r\n4 4\r\n6 5\r\n5 6\r\n5 5\r\n7 6\r\n6 7\r\n6 6\r\n8 7\r\n7 8\r\n7 7\r\n9 8\r\n8 9\r\n8 8\r\n"
            ],
            [
                "9\r\n",
                "31\r\n10 10\r\n1 0\r\n0 1\r\n0 0\r\n2 1\r\n1 2\r\n1 1\r\n3 2\r\n2 3\r\n2 2\r\n4 3\r\n3 4\r\n3 3\r\n5 4\r\n4 5\r\n4 4\r\n6 5\r\n5 6\r\n5 5\r\n7 6\r\n6 7\r\n6 6\r\n8 7\r\n7 8\r\n7 7\r\n9 8\r\n8 9\r\n8 8\r\n10 9\r\n9 10\r\n9 9\r\n"
            ],
            [
                "10\r\n",
                "34\r\n11 11\r\n1 0\r\n0 1\r\n0 0\r\n2 1\r\n1 2\r\n1 1\r\n3 2\r\n2 3\r\n2 2\r\n4 3\r\n3 4\r\n3 3\r\n5 4\r\n4 5\r\n4 4\r\n6 5\r\n5 6\r\n5 5\r\n7 6\r\n6 7\r\n6 6\r\n8 7\r\n7 8\r\n7 7\r\n9 8\r\n8 9\r\n8 8\r\n10 9\r\n9 10\r\n9 9\r\n11 10\r\n10 11\r\n10 10\r\n"
            ],
            [
                "11\r\n",
                "37\r\n12 12\r\n1 0\r\n0 1\r\n0 0\r\n2 1\r\n1 2\r\n1 1\r\n3 2\r\n2 3\r\n2 2\r\n4 3\r\n3 4\r\n3 3\r\n5 4\r\n4 5\r\n4 4\r\n6 5\r\n5 6\r\n5 5\r\n7 6\r\n6 7\r\n6 6\r\n8 7\r\n7 8\r\n7 7\r\n9 8\r\n8 9\r\n8 8\r\n10 9\r\n9 10\r\n9 9\r\n11 10\r\n10 11\r\n10 10\r\n12 11\r\n11 12\r\n11 11\r\n"
            ],
            [
                "12\r\n",
                "40\r\n13 13\r\n1 0\r\n0 1\r\n0 0\r\n2 1\r\n1 2\r\n1 1\r\n3 2\r\n2 3\r\n2 2\r\n4 3\r\n3 4\r\n3 3\r\n5 4\r\n4 5\r\n4 4\r\n6 5\r\n5 6\r\n5 5\r\n7 6\r\n6 7\r\n6 6\r\n8 7\r\n7 8\r\n7 7\r\n9 8\r\n8 9\r\n8 8\r\n10 9\r\n9 10\r\n9 9\r\n11 10\r\n10 11\r\n10 10\r\n12 11\r\n11 12\r\n11 11\r\n13 12\r\n12 13\r\n12 12\r\n"
            ],
            [
                "13\r\n",
                "43\r\n14 14\r\n1 0\r\n0 1\r\n0 0\r\n2 1\r\n1 2\r\n1 1\r\n3 2\r\n2 3\r\n2 2\r\n4 3\r\n3 4\r\n3 3\r\n5 4\r\n4 5\r\n4 4\r\n6 5\r\n5 6\r\n5 5\r\n7 6\r\n6 7\r\n6 6\r\n8 7\r\n7 8\r\n7 7\r\n9 8\r\n8 9\r\n8 8\r\n10 9\r\n9 10\r\n9 9\r\n11 10\r\n10 11\r\n10 10\r\n12 11\r\n11 12\r\n11 11\r\n13 12\r\n12 13\r\n12 12\r\n14 13\r\n13 14\r\n13 13\r\n"
            ],
            [
                "14\r\n",
                "46\r\n15 15\r\n1 0\r\n0 1\r\n0 0\r\n2 1\r\n1 2\r\n1 1\r\n3 2\r\n2 3\r\n2 2\r\n4 3\r\n3 4\r\n3 3\r\n5 4\r\n4 5\r\n4 4\r\n6 5\r\n5 6\r\n5 5\r\n7 6\r\n6 7\r\n6 6\r\n8 7\r\n7 8\r\n7 7\r\n9 8\r\n8 9\r\n8 8\r\n10 9\r\n9 10\r\n9 9\r\n11 10\r\n10 11\r\n10 10\r\n12 11\r\n11 12\r\n11 11\r\n13 12\r\n12 13\r\n12 12\r\n14 13\r\n13 14\r\n13 13\r\n15 14\r\n14 15\r\n14 14\r\n"
            ],
            [
                "16\r\n",
                "52\r\n17 17\r\n1 0\r\n0 1\r\n0 0\r\n2 1\r\n1 2\r\n1 1\r\n3 2\r\n2 3\r\n2 2\r\n4 3\r\n3 4\r\n3 3\r\n5 4\r\n4 5\r\n4 4\r\n6 5\r\n5 6\r\n5 5\r\n7 6\r\n6 7\r\n6 6\r\n8 7\r\n7 8\r\n7 7\r\n9 8\r\n8 9\r\n8 8\r\n10 9\r\n9 10\r\n9 9\r\n11 10\r\n10 11\r\n10 10\r\n12 11\r\n11 12\r\n11 11\r\n13 12\r\n12 13\r\n12 12\r\n14 13\r\n13 14\r\n13 13\r\n15 14\r\n14 15\r\n14 14\r\n16 15\r\n15 16\r\n15 15\r\n17 16\r\n16 17\r\n16 16\r\n"
            ],
            [
                "23\r\n",
                "73\r\n24 24\r\n1 0\r\n0 1\r\n0 0\r\n2 1\r\n1 2\r\n1 1\r\n3 2\r\n2 3\r\n2 2\r\n4 3\r\n3 4\r\n3 3\r\n5 4\r\n4 5\r\n4 4\r\n6 5\r\n5 6\r\n5 5\r\n7 6\r\n6 7\r\n6 6\r\n8 7\r\n7 8\r\n7 7\r\n9 8\r\n8 9\r\n8 8\r\n10 9\r\n9 10\r\n9 9\r\n11 10\r\n10 11\r\n10 10\r\n12 11\r\n11 12\r\n11 11\r\n13 12\r\n12 13\r\n12 12\r\n14 13\r\n13 14\r\n13 13\r\n15 14\r\n14 15\r\n14 14\r\n16 15\r\n15 16\r\n15 15\r\n17 16\r\n16 17\r\n16 16\r\n18 17\r\n17 18\r\n17 17\r\n19 18\r\n18 19\r\n18 18\r\n20 19\r\n19 20\r\n19 19\r\n21 20\r\n20 21\r\n20 20\r\n22 21\r\n21 22\r\n21 21\r\n23 22\r\n22 23\r\n22 22\r\n24 23\r\n23 24\r\n23 23\r\n"
            ]
        ]
    }
]