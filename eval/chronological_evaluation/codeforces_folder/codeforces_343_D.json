[
    {
        "name": "Water Tree",
        "description": "Mad scientist Mike has constructed a rooted tree, which consists of n\nvertices. Each vertex is a reservoir which can be either empty or filled with\nwater. The vertices of the tree are numbered from 1 to n with the root at\nvertex 1. For each vertex, the reservoirs of its children are located below\nthe reservoir of this vertex, and the vertex is connected with each of the\nchildren by a pipe through which water can flow downwards. Mike wants to do\nthe following operations with the tree: Fill vertex v with water. Then v and\nall its children are filled with water. Empty vertex v. Then v and all its\nancestors are emptied. Determine whether vertex v is filled with water at the\nmoment. Initially all vertices of the tree are empty.Mike has already compiled\na full list of operations that he wants to perform in order. Before\nexperimenting with the tree Mike decided to run the list through a simulation.\nHelp Mike determine what results will he get after performing all the\noperations. Input The first line of the input contains an integer n (1 \u2264 n \u2264\n500000) \u2014 the number of vertices in the tree. Each of the following n - 1\nlines contains two space-separated numbers ai, bi (1 \u2264 ai, bi \u2264 n, ai \u2260 bi) \u2014\nthe edges of the tree. The next line contains a number q (1 \u2264 q \u2264 500000) \u2014\nthe number of operations to perform. Each of the following q lines contains\ntwo space-separated numbers ci (1 \u2264 ci \u2264 3), vi (1 \u2264 vi \u2264 n), where ci is the\noperation type (according to the numbering given in the statement), and vi is\nthe vertex on which the operation is performed. It is guaranteed that the\ngiven graph is a tree. Output For each type 3 operation print 1 on a separate\nline if the vertex is full, and 0 if the vertex is empty. Print the answers to\nqueries in the order in which the queries are given in the input. Examples\nInput 5 1 2 5 1 2 3 4 2 12 1 1 2 3 3 1 3 2 3 3 3 4 1 2 2 4 3 1 3 3 3 4 3 5\nOutput 0 0 0 1 0 1 0 1\n\n",
        "cf_contest_id": 343,
        "cf_index": "D",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 2\r\n5 1\r\n2 3\r\n4 2\r\n12\r\n1 1\r\n2 3\r\n3 1\r\n3 2\r\n3 3\r\n3 4\r\n1 2\r\n2 4\r\n3 1\r\n3 3\r\n3 4\r\n3 5\r\n",
                "0\r\n0\r\n0\r\n1\r\n0\r\n1\r\n0\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n3 1\r\n",
                "0\r\n"
            ],
            [
                "2\r\n1 2\r\n13\r\n1 1\r\n3 1\r\n3 2\r\n2 1\r\n3 1\r\n3 2\r\n2 2\r\n3 1\r\n3 2\r\n1 1\r\n2 2\r\n3 1\r\n3 2\r\n",
                "1\r\n1\r\n0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "3\r\n1 2\r\n1 3\r\n4\r\n1 1\r\n2 2\r\n3 1\r\n3 3\r\n",
                "0\r\n1\r\n"
            ],
            [
                "6\r\n2 1\r\n3 2\r\n3 4\r\n2 5\r\n5 6\r\n6\r\n1 5\r\n2 6\r\n2 3\r\n1 5\r\n3 5\r\n2 1\r\n",
                "1\r\n"
            ],
            [
                "10\r\n1 2\r\n2 3\r\n2 4\r\n1 5\r\n4 6\r\n3 7\r\n6 8\r\n6 9\r\n2 10\r\n10\r\n3 8\r\n3 6\r\n3 4\r\n1 2\r\n1 5\r\n3 10\r\n3 3\r\n2 8\r\n2 4\r\n3 9\r\n",
                "0\r\n0\r\n0\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "10\r\n2 1\r\n3 2\r\n4 3\r\n5 4\r\n4 6\r\n3 7\r\n4 8\r\n9 4\r\n10 2\r\n10\r\n1 3\r\n1 1\r\n3 10\r\n1 3\r\n2 6\r\n2 10\r\n3 4\r\n2 10\r\n1 2\r\n3 1\r\n",
                "1\r\n0\r\n0\r\n"
            ],
            [
                "10\r\n1 2\r\n1 3\r\n4 2\r\n5 2\r\n6 5\r\n7 6\r\n8 6\r\n2 9\r\n10 8\r\n10\r\n3 4\r\n1 2\r\n2 7\r\n1 7\r\n1 8\r\n2 2\r\n2 5\r\n3 6\r\n2 1\r\n3 4\r\n",
                "0\r\n0\r\n1\r\n"
            ],
            [
                "6\r\n2 1\r\n3 1\r\n4 1\r\n4 5\r\n2 6\r\n4\r\n1 1\r\n2 4\r\n1 4\r\n3 1\r\n",
                "0\r\n"
            ],
            [
                "7\r\n3 7\r\n3 6\r\n2 4\r\n2 5\r\n1 2\r\n2 3\r\n28\r\n1 1\r\n2 4\r\n3 2\r\n3 4\r\n2 5\r\n3 2\r\n3 5\r\n2 6\r\n3 3\r\n3 6\r\n2 7\r\n3 3\r\n3 7\r\n2 1\r\n3 1\r\n3 2\r\n3 3\r\n1 7\r\n1 6\r\n1 5\r\n1 4\r\n3 1\r\n3 2\r\n3 3\r\n3 4\r\n3 5\r\n3 6\r\n3 7\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "6\r\n4 6\r\n5 1\r\n2 6\r\n5 3\r\n1 2\r\n29\r\n1 1\r\n2 4\r\n3 1\r\n3 2\r\n3 3\r\n3 4\r\n3 5\r\n3 6\r\n1 6\r\n3 1\r\n3 2\r\n3 3\r\n3 4\r\n3 5\r\n3 6\r\n2 6\r\n3 1\r\n3 2\r\n3 3\r\n3 4\r\n3 5\r\n3 6\r\n1 1\r\n3 1\r\n3 2\r\n3 3\r\n3 4\r\n3 5\r\n3 6\r\n",
                "0\r\n0\r\n1\r\n0\r\n1\r\n0\r\n0\r\n0\r\n1\r\n1\r\n1\r\n1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "5\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n16\r\n1 1\r\n2 2\r\n1 2\r\n3 1\r\n3 2\r\n3 3\r\n3 4\r\n3 5\r\n2 2\r\n1 1\r\n2 4\r\n3 1\r\n3 2\r\n3 3\r\n3 4\r\n3 5\r\n",
                "0\r\n1\r\n1\r\n1\r\n1\r\n0\r\n1\r\n1\r\n0\r\n1\r\n"
            ]
        ]
    }
]