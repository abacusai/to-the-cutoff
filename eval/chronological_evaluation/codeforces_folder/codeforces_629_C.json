[
    {
        "name": "Famil Door and Brackets",
        "description": "As Famil Door\u2019s birthday is coming, some of his friends (like Gabi) decided to\nbuy a present for him. His friends are going to buy a string consisted of\nround brackets since Famil Door loves string of brackets of length n more than\nany other strings! The sequence of round brackets is called valid if and only\nif: the total number of opening brackets is equal to the total number of\nclosing brackets; for any prefix of the sequence, the number of opening\nbrackets is greater or equal than the number of closing brackets. Gabi bought\na string s of length m (m \u2264 n) and want to complete it to obtain a valid\nsequence of brackets of length n. He is going to pick some strings p and q\nconsisting of round brackets and merge them in a string p + s + q, that is add\nthe string p at the beginning of the string s and string q at the end of the\nstring s. Now he wonders, how many pairs of strings p and q exists, such that\nthe string p + s + q is a valid sequence of round brackets. As this number may\nbe pretty large, he wants to calculate it modulo 10^9 + 7. Input First line\ncontains n and m (1 \u2264 m \u2264 n \u2264 100 000, n - m \u2264 2000) \u2014 the desired length of\nthe string and the length of the string bought by Gabi, respectively. The\nsecond line contains string s of length m consisting of characters '(' and ')'\nonly. Output Print the number of pairs of string p and q such that p + s + q\nis a valid sequence of round brackets modulo 10^9 + 7. Examples Input 4 1 (\nOutput 4 Input 4 4 (()) Output 1 Input 4 3 ((( Output 0 Note In the first\nsample there are four different valid pairs: p = \"(\", q = \"))\" p = \"()\", q =\n\")\" p = \"\", q = \"())\" p = \"\", q = \")()\" In the second sample the only way to\nobtain a desired string is choose empty p and q. In the third sample there is\nno way to get a valid sequence of brackets.\n\n",
        "cf_contest_id": 629,
        "cf_index": "C",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 1\r\n(\r\n",
                "4\r\n"
            ],
            [
                "4 4\r\n(())\r\n",
                "1\r\n"
            ],
            [
                "4 3\r\n(((\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "875 50\r\n)))((())()))((()(())))))())))((((((()))))))()(((((\r\n",
                "0\r\n"
            ],
            [
                "1980 464\r\n))(()()))(((((((((()))))))(()(((()((()))()()())()))()))(()))))))(())((())))()())()((())())()())))(())()(()))(()())()((((()))())()(())))))(()()(()(((((()(()()))(((()))(())))))()())(())))))())()()((())))))))((()(())))))()()(()((()((()()))(()))(())(()))()((((())()()))))))()(())))()(()())()())(((((()))())))())())(()))()(()))())((())((((()(()(())))(((()()))))()()()))))((()())()((())())))())))()(()(()()(((((()((((()))()(())()))))()(()))(()(((((((()((()(())))(((((())\r\n",
                "854368836\r\n"
            ],
            [
                "1542 282\r\n())())()((()(()))()((())()))((())(()))))(()()))(())((()))()((()())())()))((())(((()(())((()()())((((())))((()((((()(()()))))(()(()()(())()((())())())))))()()())))(()((((()))(()(()(()(()))())((()()()()(()(()))())(((()(())()(())()()())))()))())(()))(((())()))((())()(())))))(())))()()\r\n",
                "631927032\r\n"
            ],
            [
                "2 2\r\n)(\r\n",
                "0\r\n"
            ],
            [
                "2 2\r\n))\r\n",
                "0\r\n"
            ]
        ]
    }
]