[
    {
        "name": "Lorry",
        "description": "A group of tourists is going to kayak and catamaran tour. A rented lorry has\narrived to the boat depot to take kayaks and catamarans to the point of\ndeparture. It's known that all kayaks are of the same size (and each of them\noccupies the space of 1 cubic metre), and all catamarans are of the same size,\nbut two times bigger than kayaks (and occupy the space of 2 cubic metres).\nEach waterborne vehicle has a particular carrying capacity, and it should be\nnoted that waterborne vehicles that look the same can have different carrying\ncapacities. Knowing the truck body volume and the list of waterborne vehicles\nin the boat depot (for each one its type and carrying capacity are known),\nfind out such set of vehicles that can be taken in the lorry, and that has the\nmaximum total carrying capacity. The truck body volume of the lorry can be\nused effectively, that is to say you can always put into the lorry a\nwaterborne vehicle that occupies the space not exceeding the free space left\nin the truck body. Input The first line contains a pair of integer numbers n\nand v (1 \u2264 n \u2264 10^5; 1 \u2264 v \u2264 10^9), where n is the number of waterborne\nvehicles in the boat depot, and v is the truck body volume of the lorry in\ncubic metres. The following n lines contain the information about the\nwaterborne vehicles, that is a pair of numbers ti, pi (1 \u2264 ti \u2264 2; 1 \u2264 pi \u2264\n10^4), where ti is the vehicle type (1 \u2013 a kayak, 2 \u2013 a catamaran), and pi is\nits carrying capacity. The waterborne vehicles are enumerated in order of\ntheir appearance in the input file. Output In the first line print the maximum\npossible carrying capacity of the set. In the second line print a string\nconsisting of the numbers of the vehicles that make the optimal set. If the\nanswer is not unique, print any of them. Examples Input 3 2 1 2 2 7 1 3 Output\n7 2\n\n",
        "cf_contest_id": 3,
        "cf_index": "B",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 64.0,
        "public_cases": [
            [
                "3 2\r\n1 2\r\n2 7\r\n1 3\r\n",
                "7\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 3\r\n1 9\r\n2 9\r\n1 9\r\n2 10\r\n1 6\r\n",
                "24\r\n3 1 5\r\n"
            ],
            [
                "10 10\r\n1 14\r\n2 15\r\n2 11\r\n2 12\r\n2 9\r\n1 14\r\n2 15\r\n1 9\r\n2 11\r\n2 6\r\n",
                "81\r\n6 1 7 2 4 9\r\n"
            ],
            [
                "20 19\r\n2 47\r\n1 37\r\n1 48\r\n2 42\r\n2 48\r\n1 38\r\n2 47\r\n1 48\r\n2 47\r\n1 41\r\n2 46\r\n1 28\r\n1 49\r\n1 45\r\n2 34\r\n1 43\r\n2 29\r\n1 46\r\n2 45\r\n2 18\r\n",
                "630\r\n13 8 3 18 14 16 10 6 2 5 9 7 1 11\r\n"
            ],
            [
                "1 1\r\n1 600\r\n",
                "600\r\n1\r\n"
            ],
            [
                "10 14\r\n2 230\r\n2 516\r\n2 527\r\n2 172\r\n2 854\r\n2 61\r\n1 52\r\n2 154\r\n2 832\r\n2 774\r\n",
                "3905\r\n5 9 10 3 2 1 4\r\n"
            ],
            [
                "8 8\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n2 100\r\n2 100\r\n2 100\r\n2 100\r\n",
                "400\r\n8 7 6 5\r\n"
            ],
            [
                "8 4\r\n1 100\r\n1 100\r\n1 100\r\n1 100\r\n2 1\r\n2 1\r\n2 1\r\n2 1\r\n",
                "400\r\n4 3 2 1\r\n"
            ]
        ]
    }
]