[
    {
        "name": "Counting Rectangles",
        "description": "You have \n    n\n rectangles, the \n    i\n-th rectangle has height \n    h_i\n and\nwidth \n    w_i\n. You are asked \n    q\n queries of the form \n    h_s \n     w_s \n    h_b \n     w_b\n. For each query output, the total area of rectangles you own\nthat can fit a rectangle of height \n    h_s\n and width \n    w_s\n while also\nfitting in a rectangle of height \n    h_b\n and width \n    w_b\n. In other\nwords, print \n    \u2211 h_i \n    \u00b7 w_i\n for \n    i\n such that \n    h_s < h_i <\n    h_b\n and \n    w_s < w_i < w_b\n. Please note, that if two rectangles have the\nsame height or the same width, then they cannot fit inside each other. Also\nnote that you cannot rotate rectangles. Please note that the answer for some\ntest cases won't fit into 32-bit integer type, so you should use at least\n64-bit integer type in your programming language (like long long for C++).\nInput The first line of the input contains an integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 100\n) \u2014 the number of test cases. The first line of each test case\ntwo integers \n    n, q\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n; \n    1 \n    \u2264 q \n    \u2264\n    10^5\n) \u2014 the number of rectangles you own and the number of queries. Then\n\n    n\n lines follow, each containing two integers \n    h_i, w_i\n (\n    1 \n    \u2264\n    h_i, w_i \n    \u2264 1000\n) \u2014 the height and width of the \n    i\n-th rectangle.\nThen \n    q\n lines follow, each containing four integers \n    h_s, w_s, h_b,\n    w_b\n (\n    1 \n    \u2264 h_s < h_b,\n     w_s < w_b \n    \u2264 1000\n) \u2014 the description\nof each query. The sum of \n    q\n over all test cases does not exceed\n\n    10^5\n, and the sum of \n    n\n over all test cases does not exceed\n\n    10^5\n. Output For each test case, output \n    q\n lines, the \n    i\n-th\nline containing the answer to the \n    i\n-th query. Example Input 3 2 1 2 3 3\n2 1 1 3 4 5 5 1 1 2 2 3 3 4 4 5 5 3 3 6 6 2 1 4 5 1 1 2 10 1 1 100 100 1 1 3 3\n3 1 999 999 999 999 999 998 1 1 1000 1000 Output 6 41 9 0 54 4 2993004 Note In\nthe first test case, there is only one query. We need to find the sum of areas\nof all rectangles that can fit a \n    1 \n    \u00d7 1\n rectangle inside of it and\nfit into a \n    3 \n    \u00d7 4\n rectangle. Only the \n    2 \n    \u00d7 3\n rectangle\nworks, because \n    1 < 2\n (comparing heights) and \n    1 < 3\n (comparing\nwidths), so the \n    1 \n    \u00d7 1\n rectangle fits inside, and \n    2 < 3\n\n(comparing heights) and \n    3 < 4\n (comparing widths), so it fits inside the\n\n    3 \n    \u00d7 4\n rectangle. The \n    3 \n    \u00d7 2\n rectangle is too tall to\nfit in a \n    3 \n    \u00d7 4\n rectangle. The total area is \n    2 \n    \u00b7 3 =\n    6\n.\n\n",
        "cf_contest_id": 1722,
        "cf_index": "E",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "dp",
            "implementation"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2 1\r\n2 3\r\n3 2\r\n1 1 3 4\r\n5 5\r\n1 1\r\n2 2\r\n3 3\r\n4 4\r\n5 5\r\n3 3 6 6\r\n2 1 4 5\r\n1 1 2 10\r\n1 1 100 100\r\n1 1 3 3\r\n3 1\r\n999 999\r\n999 999\r\n999 998\r\n1 1 1000 1000\r\n",
                "6\r\n41\r\n9\r\n0\r\n54\r\n4\r\n2993004\r\n"
            ]
        ],
        "private_cases": [
            [
                "12\r\n1 1\r\n2 2\r\n1 1 3 3\r\n1 1\r\n2 2\r\n1 1 3 3\r\n1 1\r\n2 2\r\n1 1 3 3\r\n1 1\r\n2 2\r\n1 1 3 3\r\n1 1\r\n2 2\r\n1 1 3 3\r\n1 1\r\n2 2\r\n1 1 3 3\r\n1 1\r\n2 2\r\n1 1 3 3\r\n1 1\r\n2 2\r\n1 1 3 3\r\n1 1\r\n2 2\r\n1 1 3 3\r\n1 1\r\n2 2\r\n1 1 3 3\r\n1 1\r\n2 2\r\n1 1 3 3\r\n1 1\r\n2 2\r\n1 1 3 3\r\n",
                "4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n"
            ]
        ]
    }
]