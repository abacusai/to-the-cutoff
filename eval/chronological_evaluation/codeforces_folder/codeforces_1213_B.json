[
    {
        "name": "Bad Prices",
        "description": "Polycarp analyzes the prices of the new berPhone. At his disposal are the\nprices for \n    n\n last days: \n    a_1, a_2, \n    \u2026, a_n\n, where \n    a_i\n is\nthe price of berPhone on the day \n    i\n. Polycarp considers the price on the\nday \n    i\n to be bad if later (that is, a day with a greater number) berPhone\nwas sold at a lower price. For example, if \n    n=6\n and \n    a=[3, 9, 4, 6, 7,\n    5]\n, then the number of days with a bad price is \n    3\n \u2014 these are days\n\n    2\n (\n    a_2=9\n), \n    4\n (\n    a_4=6\n) and \n    5\n (\n    a_5=7\n). Print\nthe number of days with a bad price. You have to answer \n    t\n independent\ndata sets. Input The first line contains an integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 10000\n) \u2014 the number of sets of input data in the test. Input data\nsets must be processed independently, one after another. Each input data set\nconsists of two lines. The first line contains an integer \n    n\n (\n    1 \n    \u2264\n    n \n    \u2264 150000\n) \u2014 the number of days. The second line contains \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^6\n), where\n\n    a_i\n is the price on the \n    i\n-th day. It is guaranteed that the sum of\n\n    n\n over all data sets in the test does not exceed \n    150000\n. Output\nPrint \n    t\n integers, the \n    j\n-th of which should be equal to the number\nof days with a bad price in the \n    j\n-th input data set. Example Input 5 6 3\n9 4 6 7 5 1 1000000 2 2 1 10 31 41 59 26 53 58 97 93 23 84 7 3 2 1 2 3 4 5\nOutput 3 0 1 8 2\n\n",
        "cf_contest_id": 1213,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n6\r\n3 9 4 6 7 5\r\n1\r\n1000000\r\n2\r\n2 1\r\n10\r\n31 41 59 26 53 58 97 93 23 84\r\n7\r\n3 2 1 2 3 4 5\r\n",
                "3\r\n0\r\n1\r\n8\r\n2\r\n"
            ]
        ],
        "private_cases": []
    }
]