[
    {
        "name": "Pairs of Pairs",
        "description": "You have a simple and connected undirected graph consisting of \n    n\n nodes\nand \n    m\n edges. Consider any way to pair some subset of these \n    n\n nodes\nsuch that no node is present in more than one pair. This pairing is valid if\nfor every pair of pairs, the induced subgraph containing all \n    4\n nodes,\ntwo from each pair, has at most \n    2\n edges (out of the \n    6\n possible\nedges). More formally, for any two pairs, \n    (a,b)\n and \n    (c,d)\n, the\ninduced subgraph with nodes \n    a,b,c,d\n should have at most\n\n    2\n edges. Please note that the subgraph induced by a set of nodes\ncontains nodes only from this set and edges which have both of its end points\nin this set. Now, do one of the following: Find a simple path consisting of at\nleast \n    \u2308\n    n/2\n    \u2309\n nodes. Here, a path is called\nsimple if it does not visit any node multiple times. Find a valid pairing in\nwhich at least \n    \u2308\n    n/2\n    \u2309\n nodes are paired. It can\nbe shown that it is possible to find at least one of the two in every graph\nsatisfying constraints from the statement. Input Each test contains multiple\ntest cases. The first line contains the number of test cases \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 10^5\n). Description of the test cases follows. The first line\nof each test case contains \n    2\n integers \n    n, m\n (\n    2 \n    \u2264 n \n    \u2264\n    5\n    \u00b7 10^5\n, \n    1 \n    \u2264 m \n    \u2264 10^6\n), denoting the number of nodes\nand edges, respectively. The next \n    m\n lines each contain \n    2\n integers\n\n    u\n and \n    v\n (\n    1 \n    \u2264 u, v \n    \u2264 n\n, \n    u \n    \u2260 v\n), denoting\nthat there is an undirected edge between nodes \n    u\n and \n    v\n in the\ngiven graph. It is guaranteed that the given graph is connected, and simple \u2014\nit does not contain multiple edges between the same pair of nodes, nor does it\nhave any self-loops. It is guaranteed that the sum of \n    n\n over all test\ncases does not exceed \n    5\n    \u00b7 10^5\n. It is guaranteed that the sum of\n\n    m\n over all test cases does not exceed \n    10^6\n. Output For each test\ncase, the output format is as follows. If you have found a pairing, in the\nfirst line output \"PAIRING\" (without quotes). Then, output \n    k\n\n(\n    \u2308\n    n/2\n    \u2309\n    \u2264 2\n    \u00b7 k \n    \u2264 n\n), the number\nof pairs in your pairing. Then, in each of the next \n    k\n lines, output\n\n    2\n integers \n    a\n and \n    b\n \u2014 denoting that \n    a\n and \n    b\n are\npaired with each other. Note that the graph does not have to have an edge\nbetween \n    a\n and \n    b\n! This pairing has to be valid, and every node has\nto be a part of at most \n    1\n pair. Otherwise, in the first line output\n\"PATH\" (without quotes). Then, output \n    k\n (\n    \u2308\n    n/2\n    \u2309\n    \u2264 k \n    \u2264 n\n), the number of nodes in your path. Then, in the\nsecond line, output \n    k\n integers, \n    v_1, v_2, \n    \u2026, v_k\n, in the\norder in which they appear on the path. Formally, \n    v_i\n and \n    v_i+1\n\nshould have an edge between them for every \n    i\n (\n    1 \n    \u2264 i < k\n). This\npath has to be simple, meaning no node should appear more than once. Example\nInput 4 6 5 1 4 2 5 3 6 1 5 3 5 6 5 1 4 2 5 3 6 1 5 3 5 12 14 1 2 2 3 3 4 4 1\n1 5 1 12 2 6 2 7 3 8 3 9 4 10 4 11 2 4 1 3 12 14 1 2 2 3 3 4 4 1 1 5 1 12 2 6\n2 7 3 8 3 9 4 10 4 11 2 4 1 3 Output PATH 4 1 5 3 6 PAIRING 2 1 6 2 4 PAIRING\n3 1 8 2 5 4 10 PAIRING 4 1 7 2 9 3 11 4 5 Note The path outputted in the first\ncase is the following. The pairing outputted in the second case is the\nfollowing. Here is an invalid pairing for the same graph \u2014 the subgraph\n\n    1,3,4,5\n has \n    3\n edges. Here is the pairing outputted in\nthe third case. It's valid because \u2014 The subgraph \n    1,8,2,5\n has\nedges (\n    1\n,\n    2\n) and (\n    1\n,\n    5\n). The subgraph\n\n    1,8,4,10\n has edges (\n    1\n,\n    4\n) and (\n    4\n,\n    10\n).\nThe subgraph \n    4,10,2,5\n has edges (\n    2\n,\n    4\n) and\n(\n    4\n,\n    10\n). Here is the pairing outputted in the fourth case.\n\n",
        "cf_contest_id": 1391,
        "cf_index": "E",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n6 5\r\n1 4\r\n2 5\r\n3 6\r\n1 5\r\n3 5\r\n6 5\r\n1 4\r\n2 5\r\n3 6\r\n1 5\r\n3 5\r\n12 14\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n1 5\r\n1 12\r\n2 6\r\n2 7\r\n3 8\r\n3 9\r\n4 10\r\n4 11\r\n2 4\r\n1 3\r\n12 14\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n1 5\r\n1 12\r\n2 6\r\n2 7\r\n3 8\r\n3 9\r\n4 10\r\n4 11\r\n2 4\r\n1 3\r\n",
                "PATH\r\n4\r\n6 3 5 1 \r\nPATH\r\n4\r\n6 3 5 1 \r\nPAIRING\r\n4\r\n11 10\r\n8 4\r\n6 3\r\n5 2\r\nPAIRING\r\n4\r\n11 10\r\n8 4\r\n6 3\r\n5 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n20 37\r\n17 10\r\n6 10\r\n20 14\r\n4 7\r\n3 16\r\n5 11\r\n16 17\r\n17 6\r\n10 5\r\n10 2\r\n12 9\r\n11 18\r\n11 12\r\n9 1\r\n12 18\r\n18 1\r\n2 5\r\n19 12\r\n4 8\r\n8 7\r\n5 19\r\n8 20\r\n2 19\r\n1 4\r\n18 9\r\n20 15\r\n7 14\r\n19 11\r\n14 15\r\n13 16\r\n3 13\r\n9 4\r\n1 8\r\n6 2\r\n16 6\r\n13 17\r\n7 20\r\n",
                "PATH\r\n11\r\n19 2 6 16 17 10 5 11 12 9 1 \r\n"
            ]
        ]
    }
]