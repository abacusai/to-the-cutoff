[
    {
        "name": "Tree Requests",
        "description": "Roman planted a tree consisting of n vertices. Each vertex contains a\nlowercase English letter. Vertex 1 is the root of the tree, each of the n - 1\nremaining vertices has a parent in the tree. Vertex is connected with its\nparent by an edge. The parent of vertex i is vertex pi, the parent index is\nalways less than the index of the vertex (i.e., pi < i). The depth of the\nvertex is the number of nodes on the path from the root to v along the edges.\nIn particular, the depth of the root is equal to 1. We say that vertex u is in\nthe subtree of vertex v, if we can get from u to v, moving from the vertex to\nthe parent. In particular, vertex v is in its subtree. Roma gives you m\nqueries, the i-th of which consists of two numbers vi, hi. Let's consider the\nvertices in the subtree vi located at depth hi. Determine whether you can use\nthe letters written at these vertices to make a string that is a palindrome.\nThe letters that are written in the vertexes, can be rearranged in any order\nto make a palindrome, but all letters should be used. Input The first line\ncontains two integers n, m (1 \u2264 n, m \u2264 500 000) \u2014 the number of nodes in the\ntree and queries, respectively. The following line contains n - 1 integers p2,\np3, ..., pn \u2014 the parents of vertices from the second to the n-th (1 \u2264 pi <\ni). The next line contains n lowercase English letters, the i-th of these\nletters is written on vertex i. Next m lines describe the queries, the i-th\nline contains two numbers vi, hi (1 \u2264 vi, hi \u2264 n) \u2014 the vertex and the depth\nthat appear in the i-th query. Output Print m lines. In the i-th line print\n\"Yes\" (without the quotes), if in the i-th query you can make a palindrome\nfrom the letters written on the vertices, otherwise print \"No\" (without the\nquotes). Examples Input 6 5 1 1 1 3 3 zacccd 1 1 3 3 4 1 6 1 1 2 Output Yes No\nYes Yes Yes Note String s is a palindrome if reads the same from left to right\nand from right to left. In particular, an empty string is a palindrome.\nClarification for the sample test. In the first query there exists only a\nvertex 1 satisfying all the conditions, we can form a palindrome \"z\". In the\nsecond query vertices 5 and 6 satisfy condititions, they contain letters \"\u0441\"\nand \"d\" respectively. It is impossible to form a palindrome of them. In the\nthird query there exist no vertices at depth 1 and in subtree of 4. We may\nform an empty palindrome. In the fourth query there exist no vertices in\nsubtree of 6 at depth 1. We may form an empty palindrome. In the fifth query\nthere vertices 2, 3 and 4 satisfying all conditions above, they contain\nletters \"a\", \"c\" and \"c\". We may form a palindrome \"cac\".\n\n",
        "cf_contest_id": 570,
        "cf_index": "D",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "bitmasks",
            "constructive algorithms",
            "dfs and similar",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 5\r\n1 1 1 3 3\r\nzacccd\r\n1 1\r\n3 3\r\n4 1\r\n6 1\r\n1 2\r\n",
                "Yes\r\nNo\r\nYes\r\nYes\r\nYes\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 6\r\n1 1 2 3\r\ncbcab\r\n3 1\r\n5 2\r\n1 3\r\n4 1\r\n4 2\r\n1 1\r\n",
                "Yes\r\nYes\r\nNo\r\nYes\r\nYes\r\nYes\r\n"
            ],
            [
                "5 6\r\n1 2 2 1\r\nbaabb\r\n1 1\r\n1 2\r\n5 1\r\n4 1\r\n4 2\r\n3 2\r\n",
                "Yes\r\nNo\r\nYes\r\nYes\r\nYes\r\nYes\r\n"
            ],
            [
                "5 9\r\n1 1 1 2\r\nedbcb\r\n1 3\r\n2 1\r\n1 3\r\n2 1\r\n2 2\r\n2 2\r\n1 1\r\n1 3\r\n2 1\r\n",
                "Yes\r\nYes\r\nYes\r\nYes\r\nYes\r\nYes\r\nYes\r\nYes\r\nYes\r\n"
            ],
            [
                "8 12\r\n1 1 1 2 1 1 4\r\ncbecdcce\r\n1 2\r\n1 2\r\n2 1\r\n1 1\r\n2 1\r\n1 3\r\n1 3\r\n1 3\r\n1 2\r\n2 3\r\n1 3\r\n1 1\r\n",
                "No\r\nNo\r\nYes\r\nYes\r\nYes\r\nNo\r\nNo\r\nNo\r\nNo\r\nYes\r\nNo\r\nYes\r\n"
            ],
            [
                "1 1\r\n\r\np\r\n1 1\r\n",
                "Yes\r\n"
            ],
            [
                "1 1\r\n\r\na\r\n1 1\r\n",
                "Yes\r\n"
            ]
        ]
    }
]