[
    {
        "name": "Cyclic Cipher",
        "description": "You are given n sequences. Each sequence consists of positive integers, not\nexceeding m. All integers in one sequence are distinct, but the same integer\nmay appear in multiple sequences. The length of the i-th sequence is ki. Each\nsecond integers in each of the sequences are shifted by one to the left, i.e.\nintegers at positions i > 1 go to positions i - 1, while the first integers\nbecomes the last. Each second we take the first integer of each sequence and\nwrite it down to a new array. Then, for each value x from 1 to m we compute\nthe longest segment of the array consisting of element x only. The above\noperation is performed for 10^100 seconds. For each integer from 1 to m find\nout the longest segment found at this time. Input The first line of the input\ncontains two integers n and m (1 \u2264 n, m \u2264 100 000) \u2014 the number of sequences\nand the maximum integer that can appear in the sequences. Then follow n lines\nproviding the sequences. Each of them starts with an integer ki (1 \u2264 ki \u2264 40)\n\u2014 the number of integers in the sequence, proceeded by ki positive integers \u2014\nelements of the sequence. It's guaranteed that all integers in each sequence\nare pairwise distinct and do not exceed m. The total length of all sequences\ndoesn't exceed 200 000. Output Print m integers, the i-th of them should be\nequal to the length of the longest segment of the array with all its values\nequal to i during the first 10^100 seconds. Examples Input 3 4 3 3 4 1 4 1 3 4\n2 3 3 1 4 Output 2 1 3 2 Input 5 5 2 3 1 4 5 1 3 2 4 2 1 3 5 1 3 2 5 3 Output\n3 1 4 0 1 Input 4 6 3 4 5 3 2 6 3 2 3 6 3 3 6 5 Output 0 0 2 1 1 2\n\n",
        "cf_contest_id": 722,
        "cf_index": "F",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "chinese remainder theorem",
            "data structures",
            "implementation",
            "number theory",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 4\r\n3 3 4 1\r\n4 1 3 4 2\r\n3 3 1 4\r\n",
                "2\r\n1\r\n3\r\n2\r\n"
            ],
            [
                "5 5\r\n2 3 1\r\n4 5 1 3 2\r\n4 2 1 3 5\r\n1 3\r\n2 5 3\r\n",
                "3\r\n1\r\n4\r\n0\r\n1\r\n"
            ],
            [
                "4 6\r\n3 4 5 3\r\n2 6 3\r\n2 3 6\r\n3 3 6 5\r\n",
                "0\r\n0\r\n2\r\n1\r\n1\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 5\r\n2 2 4\r\n2 4 5\r\n2 1 2\r\n4 3 1 5 2\r\n4 1 3 2 5\r\n5 3 4 5 2 1\r\n3 3 5 4\r\n1 1\r\n2 4 1\r\n1 5\r\n",
                "2\r\n2\r\n3\r\n2\r\n3\r\n"
            ],
            [
                "10 10\r\n2 1 5\r\n2 3 4\r\n4 7 1 10 4\r\n4 6 3 9 7\r\n2 3 5\r\n3 4 9 7\r\n3 6 5 9\r\n5 8 5 4 10 6\r\n3 5 7 1\r\n1 5\r\n",
                "1\r\n0\r\n1\r\n2\r\n3\r\n2\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "10 100\r\n1 76\r\n3 86 1 85\r\n1 96\r\n5 48 54 32 71 90\r\n2 27 18\r\n1 38\r\n1 73\r\n3 60 40 4\r\n4 92 77 37 80\r\n4 61 24 67 82\r\n",
                "1\r\n0\r\n0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n1\r\n1\r\n0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n0\r\n1\r\n1\r\n0\r\n0\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n0\r\n1\r\n0\r\n1\r\n0\r\n0\r\n1\r\n1\r\n0\r\n0\r\n1\r\n0\r\n1\r\n0\r\n0\r\n1\r\n1\r\n0\r\n0\r\n0\r\n1\r\n0\r\n1\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n"
            ]
        ]
    }
]