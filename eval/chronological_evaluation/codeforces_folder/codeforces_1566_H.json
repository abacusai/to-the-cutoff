[
    {
        "name": "Xor-quiz",
        "description": "This is an interactive problem. You are given two integers \n    c\n and\n\n    n\n. The jury has a randomly generated set \n    A\n of distinct positive\nintegers not greater than \n    c\n (it is generated from all such possible sets\nwith equal probability). The size of \n    A\n is equal to \n    n\n. Your task is\nto guess the set \n    A\n. In order to guess it, you can ask at most\n\n    \u2308 0.65 \n    \u00b7 c \n    \u2309\n queries. In each query, you choose a\nsingle integer \n    1 \n    \u2264 x \n    \u2264 c\n. As the answer to this query you will\nbe given the bitwise xor sum of all \n    y\n, such that \n    y \n    \u2208 A\n and\n\n    gcd(x, y) = 1\n (i.e. \n    x\n and \n    y\n are coprime). If there is no\nsuch \n    y\n this xor sum is equal to \n    0\n. You can ask all queries at the\nbeginning and you will receive the answers to all your queries. After that,\nyou won't have the possibility to ask queries. You should find any set\n\n    A'\n, such that \n    |A'| = n\n and \n    A'\n and \n    A\n have the same\nanswers for all \n    c\n possible queries. Input Firstly you are given two\nintegers \n    c\n and \n    n\n (\n    100 \n    \u2264 c \n    \u2264 10^6\n, \n    0 \n    \u2264 n \n    \u2264\n    c\n). Interaction In the first line you should print an integer \n    q\n \n    (0\n    \n    \u2264 q \n    \u2264\n    \u2308 0.65 \n    \u00b7 c \n    \u2309)\n \u2014 the number of queries you\nwant to ask. After that in the same line print \n    q\n integers \n    x_1, x_2,\n    \n    \u2026, x_q\n \n    (1 \n    \u2264 x_i \n    \u2264 c)\n \u2014 the queries. For these queries\nyou should read \n    q\n integers, \n    i\n-th of them is the answer to the\ndescribed query for \n    x = x_i\n. After that you should print \n    n\n\ndistinct integers \n    A'_1, A'_2, \n    \u2026, A'_n\n \u2014 the set \n    A'\n you\nfound. If there are different sets \n    A'\n that have the same answers for all\npossible queries, print any of them. If you will ask more than \n    \u2308\n    0.65 \n    \u00b7 c \n    \u2309\n queries or if the queries will be invalid, the\ninteractor will terminate immediately and your program will receive verdict\nWrong Answer. After printing the queries and answers do not forget to output\nend of line and flush the output buffer. Otherwise, you will get the Idleness\nlimit exceeded verdict. To do flush use: fflush(stdout) or cout.flush() in\nC++; System.out.flush() in Java; flush(output) in Pascal; stdout.flush() in\nPython; Read documentation for other languages. Hacks You cannot make hacks in\nthis problem. Example Input 10 6 1 4 2 11 4 4 4 Output 7 10 2 3 5 7 1 6 1 4 5\n6 8 10 Note The sample is made only for you to understand the interaction\nprotocol. Your solution will not be tested on the sample. In the sample \n    A =\n    \n    \n    1, 4, 5, 6, 8, 10\n. \n    7\n queries are made, \n    7 \n    \u2264\n    \u2308\n    0.65 \n    \u00b7 10 \n    \u2309 = 7\n, so the query limit is not exceeded. Answers\nfor the queries: For \n    10\n: \n    1\n is the only number in the set \n    A\n\ncoprime with \n    10\n, so the answer is \n    1\n For \n    2\n: \n    1_10\n    \u2295 5_10 = 001_2 \n    \u2295 101_2 = 4_10\n, where \n    \u2295\n is\nthe bitwise xor For \n    3\n: \n    1_10\n    \u2295 4_10\n    \u2295 5_10\n    \u2295 8_10\n    \u2295 10_10 = 0001_2 \n    \u2295 0100_2 \n    \u2295 0101_2\n    \n    \u2295 1000_2 \n    \u2295 1010_2 = 2_10\n For \n    5\n: \n    1_10\n    \u2295\n    4_10\n    \u2295 6_10\n    \u2295 8_10 = 0001_2 \n    \u2295 0100_2 \n    \u2295\n    0110_2 \n    \u2295 1000_2 = 11_10\n For \n    7\n: \n    1_10\n    \u2295 4_10\n    \u2295 5_10\n    \u2295 6_10\n    \u2295 8_10\n    \u2295 10_10 = 0001_2\n    \n    \u2295 0100_2 \n    \u2295 0101_2 \n    \u2295 0110_2 \n    \u2295 1000_2 \n    \u2295\n    1010_2 = 4_10\n For \n    1\n: \n    1_10\n    \u2295 4_10\n    \u2295 5_10\n    \u2295 6_10\n    \u2295 8_10\n    \u2295 10_10 = 0001_2 \n    \u2295 0100_2\n    \n    \u2295 0101_2 \n    \u2295 0110_2 \n    \u2295 1000_2 \n    \u2295 1010_2 = 4_10\n\nFor \n    6\n: \n    1_10\n    \u2295 5_10 = 0001_2 \n    \u2295 0101_2 = 4_10\n\n\n",
        "cf_contest_id": 1566,
        "cf_index": "H",
        "cf_rating": 3200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dp",
            "interactive",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1000000 499976\r\n3 5 11 12 13 15 22 23 25 26 27 28 33 35 36 39 40 41 42 44 46 47 48 49 50 51 54 56 57 59 60 61 62 64 67 68 72 75 76 77 78 80 83 88 92 94 95 96 97 98 99 101 102 103 104 105 106 107 110 112 115 116 120 121 122 123 130 131 132 133 134 135 137 140 141 144 147 148 149 152 153 155 158 160 164 165 167 169 170 171 173 176 178 179 181 182 184 188 193 194 195 198 199 201 203 204 208 212 213 214 218 220 224 226 227 230 231 233 234 236 237 240 242 244 246 248 249 252 253 256 260 265 266 268 272 282 283 ...",
                "607926\r\n"
            ]
        ],
        "private_cases": [
            [
                "100 46\r\n1 2 3 7 9 16 17 18 19 23 25 28 29 31 32 34 35 38 39 40 41 42 45 47 50 54 55 56 57 59 60 61 64 65 66 67 68 77 78 80 82 87 91 93 99 100\r\n",
                "61\r\n"
            ],
            [
                "103 58\r\n1 4 5 6 7 10 12 13 15 19 20 22 23 26 27 28 30 33 35 37 38 40 41 43 45 46 47 50 51 52 55 57 58 60 62 64 65 66 67 69 72 73 74 76 79 80 82 83 85 87 88 89 91 93 94 96 97 102\r\n",
                "64\r\n"
            ],
            [
                "106 44\r\n2 3 6 7 11 19 20 23 24 25 27 29 32 34 36 40 44 45 46 52 54 59 63 66 68 71 73 74 78 80 81 84 85 88 91 92 93 95 97 101 102 103 105 106\r\n",
                "66\r\n"
            ],
            [
                "107 39\r\n2 4 5 11 12 14 15 16 18 19 24 28 33 35 36 38 41 43 44 46 47 53 57 58 65 67 69 75 79 80 84 90 91 94 98 102 104 105 106\r\n",
                "67\r\n"
            ],
            [
                "109 56\r\n4 7 9 10 12 13 14 16 17 18 20 21 22 24 26 28 30 31 32 36 37 38 39 40 42 43 51 53 56 58 60 63 64 66 67 69 71 72 77 78 79 81 83 84 87 88 89 91 92 94 95 100 101 102 104 106\r\n",
                "68\r\n"
            ],
            [
                "110 59\r\n3 5 6 8 9 11 13 14 16 17 18 23 30 31 32 33 37 39 40 42 43 46 47 49 52 53 54 55 56 58 63 65 68 70 71 73 75 76 77 78 79 81 83 84 85 88 89 91 92 94 97 100 101 103 105 106 108 109 110\r\n",
                "69\r\n"
            ],
            [
                "111 59\r\n2 3 5 7 8 10 15 18 20 24 25 27 28 30 31 32 35 36 37 38 39 40 41 44 45 46 47 49 50 53 54 55 57 59 60 61 65 66 67 69 70 72 76 81 82 83 84 90 92 93 95 96 97 98 104 105 106 107 109\r\n",
                "70\r\n"
            ],
            [
                "112 50\r\n2 6 8 10 12 16 18 21 22 23 26 27 30 31 32 33 34 36 37 41 43 44 49 54 58 60 62 63 66 70 71 72 73 75 76 78 79 82 84 85 94 96 97 98 101 103 106 107 108 111\r\n",
                "70\r\n"
            ],
            [
                "113 57\r\n2 4 8 9 10 11 12 14 15 18 20 22 23 24 25 26 28 29 30 31 34 35 36 37 38 40 42 49 50 53 56 57 59 60 63 65 67 69 70 72 73 74 75 76 82 88 94 95 96 97 104 106 109 110 111 112 113\r\n",
                "71\r\n"
            ],
            [
                "114 63\r\n4 5 7 8 9 10 11 12 16 17 20 22 24 26 27 29 31 33 34 36 38 39 40 41 42 43 45 46 47 49 50 51 56 58 60 61 62 66 68 70 74 78 79 81 82 83 85 89 90 92 93 96 97 98 101 103 105 106 107 108 109 113 114\r\n",
                "72\r\n"
            ],
            [
                "115 52\r\n3 5 6 8 11 13 14 15 17 21 22 23 25 26 28 29 32 36 39 46 47 49 51 53 56 59 60 63 65 66 67 68 69 70 71 73 74 75 82 83 87 89 92 94 95 98 102 103 104 105 106 112\r\n",
                "73\r\n"
            ],
            [
                "116 60\r\n2 3 7 8 13 14 16 19 20 21 23 24 27 32 33 35 36 38 39 40 41 43 44 45 49 50 51 52 53 54 57 58 61 62 64 65 67 68 70 75 78 79 83 85 86 87 88 89 93 95 100 102 105 106 108 110 111 112 114 116\r\n",
                "73\r\n"
            ],
            [
                "118 54\r\n2 4 5 8 10 11 12 13 14 16 17 18 19 23 24 27 30 34 35 37 38 42 43 47 49 52 53 54 57 58 59 64 65 67 69 70 72 75 77 79 81 86 87 92 95 100 102 106 108 110 111 112 116 118\r\n",
                "74\r\n"
            ],
            [
                "119 68\r\n4 5 7 8 10 11 12 15 16 17 18 19 20 21 24 25 26 27 29 30 33 34 35 37 39 40 41 45 46 47 49 50 52 56 61 62 63 64 70 72 73 75 76 77 78 84 85 86 87 89 92 93 94 96 97 100 101 102 103 104 105 106 107 110 114 116 117 119\r\n",
                "75\r\n"
            ],
            [
                "123 67\r\n1 2 9 10 12 13 15 17 18 19 20 21 23 24 25 26 29 31 32 33 41 42 44 46 48 52 54 56 58 59 60 61 62 63 64 65 66 71 74 75 80 81 82 83 84 85 86 87 88 90 91 92 96 101 103 105 106 107 109 110 112 113 115 117 119 120 122\r\n",
                "77\r\n"
            ],
            [
                "200 89\r\n5 7 8 11 14 15 17 18 20 22 24 25 27 28 29 35 36 37 43 44 45 46 47 50 52 53 54 59 62 65 70 72 82 84 88 89 94 96 97 101 102 103 104 110 117 118 120 121 123 124 125 127 128 130 131 132 133 134 135 137 138 143 144 147 148 152 154 156 163 165 169 170 171 172 174 177 178 183 184 188 189 190 192 193 194 195 196 198 200\r\n",
                "122\r\n"
            ],
            [
                "101 53\r\n1 2 6 9 11 12 13 14 15 17 18 19 20 21 22 24 26 27 29 31 32 33 37 38 42 43 44 51 55 58 60 62 63 64 69 71 73 75 77 79 80 81 82 85 87 90 91 92 94 95 96 99 100\r\n",
                "62\r\n"
            ],
            [
                "102 55\r\n1 2 4 5 10 11 12 13 14 16 18 19 21 22 23 25 26 28 30 35 37 40 41 44 45 46 50 51 52 53 55 59 60 61 64 72 75 76 78 80 81 82 83 87 88 90 91 92 95 96 97 98 100 101 102\r\n",
                "63\r\n"
            ],
            [
                "104 48\r\n1 3 9 10 13 14 17 19 20 22 24 25 26 29 30 32 34 37 39 42 47 51 52 53 54 56 59 63 68 71 72 74 75 76 78 80 83 85 89 90 91 95 96 97 98 101 102 103\r\n",
                "64\r\n"
            ],
            [
                "105 55\r\n3 6 7 9 10 15 16 17 19 21 23 27 28 29 32 33 34 35 38 39 40 41 42 43 44 45 50 52 53 54 56 57 58 61 62 65 67 68 69 73 74 75 76 79 80 81 90 91 92 93 94 97 98 102 104\r\n",
                "65\r\n"
            ],
            [
                "108 51\r\n4 5 6 7 9 12 18 20 21 22 23 25 27 35 36 39 40 41 45 46 47 50 57 59 60 61 62 63 65 71 72 73 75 78 80 81 83 84 85 89 90 91 93 98 100 102 103 105 106 107 108\r\n",
                "67\r\n"
            ],
            [
                "117 50\r\n2 3 6 7 8 9 13 15 19 25 28 30 40 41 42 44 45 49 50 52 54 61 63 64 66 68 69 70 71 72 73 81 85 86 87 88 90 93 94 98 100 101 102 103 104 106 107 109 111 114\r\n",
                "73\r\n"
            ],
            [
                "120 53\r\n1 3 4 10 17 19 23 24 27 30 34 36 37 38 41 43 45 48 51 52 55 61 62 66 67 68 69 72 73 75 76 78 79 80 81 88 89 92 93 94 95 97 101 104 106 107 108 109 110 112 115 116 119\r\n",
                "75\r\n"
            ],
            [
                "121 57\r\n1 3 5 6 10 11 13 15 18 19 20 24 25 30 32 33 34 36 37 39 40 44 47 48 51 52 54 57 58 59 63 65 71 72 75 76 80 83 84 85 86 87 89 90 96 97 98 103 106 111 113 114 115 117 118 120 121\r\n",
                "75\r\n"
            ]
        ]
    }
]