[
    {
        "name": "Copying Data",
        "description": "We often have to copy large volumes of information. Such operation can take up\nmany computer resources. Therefore, in this problem you are advised to come up\nwith a way to copy some part of a number array into another one, quickly. More\nformally, you've got two arrays of integers a1, a2, ..., an and b1, b2, ...,\nbn of length n. Also, you've got m queries of two types: Copy the subsegment\nof array a of length k, starting from position x, into array b, starting from\nposition y, that is, execute by + q = ax + q for all integer q (0 \u2264 q < k).\nThe given operation is correct \u2014 both subsegments do not touch unexistent\nelements. Determine the value in position x of array b, that is, find value\nbx. For each query of the second type print the result \u2014 the value of the\ncorresponding element of array b. Input The first line contains two space-\nseparated integers n and m (1 \u2264 n, m \u2264 10^5) \u2014 the number of elements in the\narrays and the number of queries, correspondingly. The second line contains an\narray of integers a1, a2, ..., an (|ai| \u2264 10^9). The third line contains an\narray of integers b1, b2, ..., bn (|bi| \u2264 10^9). Next m lines contain the\ndescriptions of the queries. The i-th line first contains integer ti \u2014 the\ntype of the i-th query (1 \u2264 ti \u2264 2). If ti = 1, then the i-th query means the\ncopying operation. If ti = 2, then the i-th query means taking the value in\narray b. If ti = 1, then the query type is followed by three integers xi, yi,\nki (1 \u2264 xi, yi, ki \u2264 n) \u2014 the parameters of the copying query. If ti = 2, then\nthe query type is followed by integer xi (1 \u2264 xi \u2264 n) \u2014 the position in array\nb. All numbers in the lines are separated with single spaces. It is guaranteed\nthat all the queries are correct, that is, the copying borders fit into the\nborders of arrays a and b. Output For each second type query print the result\non a single line. Examples Input 5 10 1 2 0 -1 3 3 1 5 -2 0 2 5 1 3 3 3 2 5 2\n4 2 1 1 2 1 4 2 1 2 4 1 4 2 1 2 2 Output 0 3 -1 3 2 3 -1\n\n",
        "cf_contest_id": 292,
        "cf_index": "E",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 10\r\n1 2 0 -1 3\r\n3 1 5 -2 0\r\n2 5\r\n1 3 3 3\r\n2 5\r\n2 4\r\n2 1\r\n1 2 1 4\r\n2 1\r\n2 4\r\n1 4 2 1\r\n2 2\r\n",
                "0\r\n3\r\n-1\r\n3\r\n2\r\n3\r\n-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 4\r\n-2\r\n1\r\n1 1 1 1\r\n2 1\r\n1 1 1 1\r\n1 1 1 1\r\n",
                "-2\r\n"
            ],
            [
                "2 5\r\n-3 2\r\n3 -4\r\n1 1 1 2\r\n2 1\r\n2 1\r\n1 2 2 1\r\n2 1\r\n",
                "-3\r\n-3\r\n-3\r\n"
            ],
            [
                "3 6\r\n4 -3 0\r\n1 3 -5\r\n2 2\r\n2 3\r\n1 2 1 2\r\n1 2 1 2\r\n2 2\r\n2 2\r\n",
                "3\r\n-5\r\n0\r\n0\r\n"
            ],
            [
                "4 1\r\n-1 1 1 -1\r\n2 -2 -3 2\r\n2 4\r\n",
                "2\r\n"
            ],
            [
                "10 10\r\n-1 1 -1 2 -2 2 1 2 -1 0\r\n-1 -2 2 0 1 -1 -1 2 -2 1\r\n2 1\r\n2 2\r\n2 8\r\n1 6 8 1\r\n2 5\r\n2 9\r\n1 1 7 4\r\n2 5\r\n2 2\r\n2 3\r\n",
                "-1\r\n-2\r\n2\r\n1\r\n-2\r\n1\r\n-2\r\n2\r\n"
            ],
            [
                "15 5\r\n1 0 3 1 2 1 -2 0 2 3 2 -1 -1 -1 -3\r\n-1 -1 1 -2 2 -2 -2 -3 -2 -1 -1 -3 -2 1 3\r\n1 7 15 1\r\n2 8\r\n2 3\r\n1 9 15 1\r\n1 4 11 3\r\n",
                "-3\r\n1\r\n"
            ],
            [
                "20 30\r\n5 6 -6 10 10 -6 10 7 0 -10 3 1 -7 -9 1 -7 5 1 -1 1\r\n8 10 -10 -1 -9 3 9 -9 6 5 10 -2 -5 -9 1 3 -4 -1 -8 -7\r\n2 14\r\n1 8 11 1\r\n2 7\r\n1 6 17 1\r\n1 9 2 7\r\n1 12 1 7\r\n2 20\r\n2 5\r\n1 14 8 2\r\n1 8 17 4\r\n2 4\r\n1 11 12 9\r\n2 8\r\n2 3\r\n2 2\r\n1 17 7 2\r\n1 3 18 1\r\n2 11\r\n1 5 12 6\r\n1 12 7 1\r\n2 16\r\n2 11\r\n2 10\r\n2 19\r\n2 20\r\n2 18\r\n1 18 20 1\r\n2 13\r\n1 3 18 2\r\n1 20 5 1\r\n",
                "-9\r\n9\r\n-7\r\n-7\r\n1\r\n-9\r\n-9\r\n-7\r\n7\r\n0\r\n7\r\n5\r\n1\r\n-1\r\n-6\r\n-6\r\n"
            ]
        ]
    }
]