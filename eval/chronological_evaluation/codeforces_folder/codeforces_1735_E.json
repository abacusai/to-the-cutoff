[
    {
        "name": "House Planning",
        "description": "There are \n    n\n houses in your city arranged on an axis at points \n    h_1,\n    h_2, \n    \u2026, h_n\n. You want to build a new house for yourself and consider\ntwo options where to place it: points \n    p_1\n and \n    p_2\n. As you like\nvisiting friends, you have calculated in advance the distances from both\noptions to all existing houses. More formally, you have calculated two arrays\n\n    d_1\n, \n    d_2\n: \n    d_i, j = \n    |p_i - h_j\n    |\n, where\n\n    |x|\n defines the absolute value of \n    x\n. After a long time of\ninactivity you have forgotten the locations of the houses \n    h\n and the\noptions \n    p_1\n, \n    p_2\n. But your diary still keeps two arrays \u2014\n\n    d_1\n, \n    d_2\n, whose authenticity you doubt. Also, the values inside\neach array could be shuffled, so values at the same positions of \n    d_1\n and\n\n    d_2\n may correspond to different houses. Pay attention, that values from\none array could not get to another, in other words, all values in the array\n\n    d_1\n correspond the distances from \n    p_1\n to the houses, and in the\narray \n    d_2\n \u2014 from \n    p_2\n to the houses. Also pay attention, that the\nlocations of the houses \n    h_i\n and the considered options \n    p_j\n could\nmatch. For example, the next locations are correct: \n    h = \n    \n    1, 0, 3,\n    3\n, \n    p = \n    \n    1, 1\n, that could correspond to already shuffled\n\n    d_1 = \n    \n    0, 2, 1, 2\n, \n    d_2 = \n    \n    2, 2, 1, 0\n. Check\nwhether there are locations of houses \n    h\n and considered points \n    p_1\n,\n\n    p_2\n, for which the founded arrays of distances would be correct. If it\nis possible, find appropriate locations of houses and considered options.\nInput The first line of the input contains a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 10^3\n) \u2014 the number of test cases. The description of test\ncases follows. The first line of each test case contains one integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 10^3\n) \u2014 the length of arrays \n    d_1\n, \n    d_2\n. The\nnext two lines contain \n    n\n integers each: arrays \n    d_1\n and \n    d_2\n\n(\n    0 \n    \u2264 d_i, j\n    \u2264 10^9\n) respectively. It is guaranteed that the\nsum of \n    n\n over all test cases doesn't exceed \n    2 \n    \u00b7 10^3\n. Output\nFor each test case, output a single line \"NO\" if there is no answer. Otherwise\noutput three lines. The first line must contain \"YES\". In the second line,\nprint \n    n\n integers \n    h_1, h_2, \n    \u2026, h_n\n. In the third line print\ntwo integers \n    p_1\n, \n    p_2\n. It must be satisfied that \n    0 \n    \u2264 h_i,\n    p_1, p_2 \n    \u2264 2 \n    \u00b7 10^9\n. We can show that if there is an answer, then\nthere is one satisfying these constraints. If there are several answers,\noutput any of them. Example Input 4 1 5 5 2 10 12 5 20 2 10 33 26 69 4 0 2 1 2\n2 2 1 0 Output YES 5 0 10 NO YES 0 43 33 69 YES 1 0 3 3 1 1 Note In the image\nbelow you can see the sample solutions. Planned houses are shown in bright\ncolours: pink and purple. Existing houses are dim. In test case \n    1\n, the\nfirst planned house is located at point \n    0\n, the second at point \n    10\n.\nThe existing house is located at point \n    5\n and is at a distance of \n    5\n\nfrom both planned houses. It can be shown that there is no answer for test\ncase \n    2\n. In test case \n    3\n, the planned houses are located at points\n\n    33\n and \n    69\n. Note that in test case \n    4\n, both plans are located\nat point \n    1\n, where one of the existing houses is located at the same\ntime. It is a correct placement.\n\n",
        "cf_contest_id": 1735,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "graph matchings",
            "greedy"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1\r\n5\r\n5\r\n2\r\n10 12\r\n5 20\r\n2\r\n10 33\r\n26 69\r\n4\r\n0 2 1 2\r\n2 2 1 0\r\n",
                "YES\r\n1000000005 \r\n1000000000 1000000010\r\nNO\r\nYES\r\n1000000010 999999967 \r\n1000000000 1000000036\r\nYES\r\n1000000000 999999999 999999998 999999998 \r\n1000000000 1000000000\r\n"
            ]
        ],
        "private_cases": []
    }
]