[
    {
        "name": "Swap Letters",
        "description": "Monocarp has got two strings \n    s\n and \n    t\n having equal length. Both\nstrings consist of lowercase Latin letters \"a\" and \"b\". Monocarp wants to make\nthese two strings \n    s\n and \n    t\n equal to each other. He can do the\nfollowing operation any number of times: choose an index \n    pos_1\n in the\nstring \n    s\n, choose an index \n    pos_2\n in the string \n    t\n, and swap\n\n    s_pos_1\n with \n    t_pos_2\n. You have to determine the minimum number\nof operations Monocarp has to perform to make \n    s\n and \n    t\n equal, and\nprint any optimal sequence of operations \u2014 or say that it is impossible to\nmake these strings equal. Input The first line contains one integer \n    n\n\n\n    (1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5)\n \u2014 the length of \n    s\n and \n    t\n.\nThe second line contains one string \n    s\n consisting of \n    n\n characters\n\"a\" and \"b\". The third line contains one string \n    t\n consisting of \n    n\n\ncharacters \"a\" and \"b\". Output If it is impossible to make these strings\nequal, print \n    -1\n. Otherwise, in the first line print \n    k\n \u2014 the\nminimum number of operations required to make the strings equal. In each of\nthe next \n    k\n lines print two integers \u2014 the index in the string \n    s\n\nand the index in the string \n    t\n that should be used in the corresponding\nswap operation. Examples Input 4 abab aabb Output 2 3 3 3 2 Input 1 a b Output\n-1 Input 8 babbaabb abababaa Output 3 2 6 1 3 7 8 Note In the first example\ntwo operations are enough. For example, you can swap the third letter in\n\n    s\n with the third letter in \n    t\n. Then \n    s =\n \"abbb\", \n    t =\n\n\"aaab\". Then swap the third letter in \n    s\n and the second letter in\n\n    t\n. Then both \n    s\n and \n    t\n are equal to \"abab\". In the second\nexample it's impossible to make two strings equal.\n\n",
        "cf_contest_id": 1215,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\nabab\r\naabb\r\n",
                "2\r\n2 2\r\n2 3\r\n"
            ],
            [
                "1\r\na\r\nb\r\n",
                "-1\r\n"
            ],
            [
                "8\r\nbabbaabb\r\nabababaa\r\n",
                "3\r\n1 3\r\n7 8\r\n2 6\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\nbb\r\nbb\r\n",
                "0\r\n"
            ],
            [
                "10\r\naaaaabbbbb\r\nababaaaaab\r\n",
                "3\r\n6 7\r\n8 9\r\n2 4\r\n"
            ],
            [
                "10\r\nbbbbbbbbbb\r\naaaaaaaaaa\r\n",
                "5\r\n1 2\r\n3 4\r\n5 6\r\n7 8\r\n9 10\r\n"
            ],
            [
                "6\r\naaaaaa\r\naabaaa\r\n",
                "-1\r\n"
            ],
            [
                "1\r\nb\r\nb\r\n",
                "0\r\n"
            ],
            [
                "5\r\nbaaaa\r\nabaaa\r\n",
                "2\r\n1 1\r\n1 2\r\n"
            ],
            [
                "10\r\naabaaaaaab\r\nbaaaaaabbb\r\n",
                "3\r\n3 3\r\n3 1\r\n8 9\r\n"
            ],
            [
                "100\r\nbbbabbababbbbbbabbbbbbbbabbbbbbbbbbbbbbbaabbbbbbbbbbbbbabbabaababbaabbbbbbbbbbaabbbbbbaabbbbbaabbbbb\r\nbabababbbbbbabaaabbbbbbbaabbbbaabbbbbbabbbbbbbbababbbbabbbbbbbbbbbabbbbbbbbabbbbbbbbbbbbbbbbabbbbaab\r\n",
                "16\r\n2 6\r\n13 15\r\n17 26\r\n31 32\r\n39 48\r\n50 55\r\n76 93\r\n98 99\r\n7 9\r\n41 42\r\n56 59\r\n61 62\r\n64 68\r\n79 80\r\n87 88\r\n94 95\r\n"
            ],
            [
                "101\r\nbabbbbabbbbaabbbbbbbabbbababababbbbbbbbabaababbababbaaabbababbbbbbbbbaabbbababbbbbabbbbbabbbaabbbaabb\r\nbbabbbbbbabbbbbbbbbbbabbbbbbbbbbabbabbbbbbbbbbbabbababbbabbabbbbbbbbbbbbbaabbbabbbbabbabbbbababbbbbab\r\n",
                "20\r\n3 3\r\n3 2\r\n10 22\r\n33 36\r\n51 57\r\n74 79\r\n84 87\r\n92 100\r\n7 12\r\n13 21\r\n25 27\r\n29 31\r\n40 42\r\n43 45\r\n50 54\r\n55 58\r\n70 71\r\n77 83\r\n89 93\r\n98 99\r\n"
            ],
            [
                "100\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\naaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n",
                "-1\r\n"
            ],
            [
                "10\r\naaaaaaaaaa\r\nbbbbbbbbbb\r\n",
                "5\r\n1 2\r\n3 4\r\n5 6\r\n7 8\r\n9 10\r\n"
            ],
            [
                "2\r\nab\r\nba\r\n",
                "2\r\n2 2\r\n2 1\r\n"
            ]
        ]
    }
]