[
    {
        "name": "Santa Claus and a Palindrome",
        "description": "Santa Claus likes palindromes very much. There was his birthday recently. k of\nhis friends came to him to congratulate him, and each of them presented to him\na string si having the same length n. We denote the beauty of the i-th string\nby ai. It can happen that ai is negative \u2014 that means that Santa doesn't find\nthis string beautiful at all. Santa Claus is crazy about palindromes. He is\nthinking about the following question: what is the maximum possible total\nbeauty of a palindrome which can be obtained by concatenating some (possibly\nall) of the strings he has? Each present can be used at most once. Note that\nall strings have the same length n. Recall that a palindrome is a string that\ndoesn't change after one reverses it. Since the empty string is a palindrome\ntoo, the answer can't be negative. Even if all ai's are negative, Santa can\nobtain the empty string. Input The first line contains two positive integers k\nand n divided by space and denoting the number of Santa friends and the length\nof every string they've presented, respectively (1 \u2264 k, n \u2264 100 000; n\u00b7k \u2264 100\n000). k lines follow. The i-th of them contains the string si and its beauty\nai ( - 10 000 \u2264 ai \u2264 10 000). The string consists of n lowercase English\nletters, and its beauty is integer. Some of strings may coincide. Also, equal\nstrings can have different beauties. Output In the only line print the\nrequired maximum possible beauty. Examples Input 7 3 abb 2 aaa -3 bba -1 zyz\n-4 abb 5 aaa 7 xyx 4 Output 12 Input 3 1 a 1 a 2 a 3 Output 6 Input 2 5 abcde\n10000 abcde 10000 Output 0 Note In the first example Santa can obtain\nabbaaaxyxaaabba by concatenating strings 5, 2, 7, 6 and 3 (in this order).\n\n",
        "cf_contest_id": 748,
        "cf_index": "D",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 3\r\nabb 2\r\naaa -3\r\nbba -1\r\nzyz -4\r\nabb 5\r\naaa 7\r\nxyx 4\r\n",
                "12\r\n"
            ],
            [
                "3 1\r\na 1\r\na 2\r\na 3\r\n",
                "6\r\n"
            ],
            [
                "2 5\r\nabcde 10000\r\nabcde 10000\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 10\r\nnjxbzflaka -1\r\nfelbvvtkja 6\r\ngxiuztqkcw 5\r\naomvscmtti 6\r\njsqmkoyuca -2\r\nwckqtzuixg 5\r\najktvvblef -5\r\nittmcsvmoa -1\r\nakalfzbxjn 10\r\nacuyokmqsj 8\r\n",
                "31\r\n"
            ],
            [
                "10 20\r\njvyxocgomfmrtllgmagp 13\r\ngvtjnyaofrswcnnifzfq 17\r\nqisxpseggpjfoijmqnel -5\r\nlenqmjiofjpggespxsiq 14\r\nqfzfinncwsrfoaynjtvg 14\r\ncaayidazlylxyisihdhx 14\r\npgamglltrmfmogcoxyvj 11\r\nxhdhisiyxlylzadiyaac 2\r\ntbirihfpjgbbtclpxwhv 19\r\nvhwxplctbbgjpfhiribt 10\r\n",
                "109\r\n"
            ],
            [
                "1 1\r\ne -1\r\n",
                "0\r\n"
            ],
            [
                "2 1\r\nt 1\r\nt 2\r\n",
                "3\r\n"
            ],
            [
                "1 2\r\nyy 1\r\n",
                "1\r\n"
            ],
            [
                "2 2\r\nsn 1\r\nns 2\r\n",
                "3\r\n"
            ],
            [
                "3 3\r\nada -1\r\nxuv -1\r\nvux 3\r\n",
                "2\r\n"
            ],
            [
                "4 3\r\ndbd 24\r\naba 90\r\ncbc 54\r\naba 46\r\n",
                "190\r\n"
            ],
            [
                "2 3\r\naaa 5\r\naaa -2\r\n",
                "5\r\n"
            ],
            [
                "4 3\r\naba 4\r\naba 3\r\naba 3\r\naba -2\r\n",
                "10\r\n"
            ],
            [
                "4 3\r\naba 4\r\naba 2\r\naba 2\r\naba -1\r\n",
                "8\r\n"
            ],
            [
                "3 2\r\naa 5\r\naa -2\r\nbb 1\r\n",
                "5\r\n"
            ],
            [
                "2 2\r\naa 500\r\naa -50\r\n",
                "500\r\n"
            ],
            [
                "2 1\r\na 5\r\na -1\r\n",
                "5\r\n"
            ],
            [
                "2 3\r\naba 10\r\naba -3\r\n",
                "10\r\n"
            ],
            [
                "2 3\r\naba 10\r\naba -9\r\n",
                "10\r\n"
            ]
        ]
    }
]