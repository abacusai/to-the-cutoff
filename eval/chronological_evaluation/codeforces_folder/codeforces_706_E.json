[
    {
        "name": "Working routine",
        "description": "Vasiliy finally got to work, where there is a huge amount of tasks waiting for\nhim. Vasiliy is given a matrix consisting of n rows and m columns and q tasks.\nEach task is to swap two submatrices of the given matrix. For each task\nVasiliy knows six integers ai, bi, ci, di, hi, wi, where ai is the index of\nthe row where the top-left corner of the first rectangle is located, bi is the\nindex of its column, ci is the index of the row of the top-left corner of the\nsecond rectangle, di is the index of its column, hi is the height of the\nrectangle and wi is its width. It's guaranteed that two rectangles in one\nquery do not overlap and do not touch, that is, no cell belongs to both\nrectangles, and no two cells belonging to different rectangles share a side.\nHowever, rectangles are allowed to share an angle. Vasiliy wants to know how\nthe matrix will look like after all tasks are performed. Input The first line\nof the input contains three integers n, m and q (2 \u2264 n, m \u2264 1000, 1 \u2264 q \u2264 10\n000) \u2014 the number of rows and columns in matrix, and the number of tasks\nVasiliy has to perform. Then follow n lines containing m integers vi, j (1 \u2264\nvi, j \u2264 10^9) each \u2014 initial values of the cells of the matrix. Each of the\nfollowing q lines contains six integers ai, bi, ci, di, hi, wi (1 \u2264 ai, ci, hi\n\u2264 n, 1 \u2264 bi, di, wi \u2264 m). Output Print n lines containing m integers each \u2014\nthe resulting matrix. Examples Input 4 4 2 1 1 2 2 1 1 2 2 3 3 4 4 3 3 4 4 1 1\n3 3 2 2 3 1 1 3 2 2 Output 4 4 3 3 4 4 3 3 2 2 1 1 2 2 1 1 Input 4 2 1 1 1 1 1\n2 2 2 2 1 1 4 1 1 2 Output 2 2 1 1 2 2 1 1\n\n",
        "cf_contest_id": 706,
        "cf_index": "E",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 2.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 4 2\r\n1 1 2 2\r\n1 1 2 2\r\n3 3 4 4\r\n3 3 4 4\r\n1 1 3 3 2 2\r\n3 1 1 3 2 2\r\n",
                "4 4 3 3 \r\n4 4 3 3 \r\n2 2 1 1 \r\n2 2 1 1 \r\n"
            ],
            [
                "4 2 1\r\n1 1\r\n1 1\r\n2 2\r\n2 2\r\n1 1 4 1 1 2\r\n",
                "2 2 \r\n1 1 \r\n2 2 \r\n1 1 \r\n"
            ]
        ],
        "private_cases": [
            [
                "2 2 2\r\n1 2\r\n3 4\r\n1 1 2 2 1 1\r\n1 2 2 1 1 1\r\n",
                "4 3 \r\n2 1 \r\n"
            ],
            [
                "3 3 4\r\n307166825 161129606 553390545\r\n782603206 586989632 671180494\r\n639410148 318386189 431139716\r\n3 1 3 3 1 1\r\n3 2 1 3 1 1\r\n2 1 3 2 1 1\r\n3 2 1 1 1 1\r\n",
                "782603206 161129606 318386189 \r\n553390545 586989632 671180494 \r\n431139716 307166825 639410148 \r\n"
            ],
            [
                "5 5 5\r\n223546167 454313529 346070282 905155527 249460521\r\n70559607 439605137 612925767 568939919 265606244\r\n640716110 879758560 297303217 281503393 583737187\r\n691598748 608943147 816189251 62817668 977707836\r\n943983468 729359186 224371836 167298736 319745080\r\n2 4 4 3 1 1\r\n5 1 1 1 1 2\r\n1 1 1 4 1 2\r\n3 3 3 1 1 1\r\n5 1 1 4 1 2\r\n",
                "905155527 249460521 346070282 223546167 454313529 \r\n70559607 439605137 612925767 816189251 265606244 \r\n297303217 879758560 640716110 281503393 583737187 \r\n691598748 608943147 568939919 62817668 977707836 \r\n943983468 729359186 224371836 167298736 319745080 \r\n"
            ],
            [
                "6 6 6\r\n920520654 905002409 539300427 624470619 12821536 397264360\r\n629717071 64208158 953339802 43874176 916143104 607468654\r\n462033544 264261251 447416124 727978302 954154872 490331875\r\n756869732 560992419 233217982 283255546 889579740 164271704\r\n787361777 994758147 271574414 718769467 463797356 786952350\r\n733550952 365695949 798764494 136370512 392326105 710325430\r\n5 3 3 2 2 1\r\n2 2 1 5 3 2\r\n3 6 3 2 2 1\r\n4 1 2 5 3 1\r\n1 2 2 5 4 2\r\n4 6 6 5 1 1\r\n",
                "920520654 756869732 447416124 624470619 64208158 953339802 \r\n629717071 787361777 916143104 43874176 905002409 539300427 \r\n462033544 733550952 954154872 727978302 12821536 397264360 \r\n271574414 463797356 786952350 283255546 233217982 392326105 \r\n798764494 994758147 264261251 718769467 164271704 490331875 \r\n889579740 365695949 560992419 136370512 607468654 710325430 \r\n"
            ]
        ]
    }
]