[
    {
        "name": "Let's Play the Words?",
        "description": "Polycarp has \n    n\n different binary words. A word called binary if it\ncontains only characters '0' and '1'. For example, these words are binary:\n\"0001\", \"11\", \"0\" and \"0011100\". Polycarp wants to offer his set of \n    n\n\nbinary words to play a game \"words\". In this game, players name words and each\nnext word (starting from the second) must start with the last character of the\nprevious word. The first word can be any. For example, these sequence of words\ncan be named during the game: \"0101\", \"1\", \"10\", \"00\", \"00001\". Word reversal\nis the operation of reversing the order of the characters. For example, the\nword \"0111\" after the reversal becomes \"1110\", the word \"11010\" after the\nreversal becomes \"01011\". Probably, Polycarp has such a set of words that\nthere is no way to put them in the order correspondent to the game rules. In\nthis situation, he wants to reverse some words from his set so that: the final\nset of \n    n\n words still contains different words (i.e. all words are\nunique); there is a way to put all words of the final set of words in the\norder so that the final sequence of \n    n\n words is consistent with the game\nrules. Polycarp wants to reverse minimal number of words. Please, help him.\nInput The first line of the input contains one integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 10^4\n) \u2014 the number of test cases in the input. Then \n    t\n test\ncases follow. The first line of a test case contains one integer \n    n\n (\n    1\n    \n    \u2264 n \n    \u2264 2\n    \u00b710^5\n) \u2014 the number of words in the Polycarp's set.\nNext \n    n\n lines contain these words. All of \n    n\n words aren't empty and\ncontains only characters '0' and '1'. The sum of word lengths doesn't exceed\n\n    4\n    \u00b710^6\n. All words are different. Guaranteed, that the sum of\n\n    n\n for all test cases in the input doesn't exceed \n    2\n    \u00b710^5\n.\nAlso, guaranteed that the sum of word lengths for all test cases in the input\ndoesn't exceed \n    4\n    \u00b710^6\n. Output Print answer for all of \n    t\n test\ncases in the order they appear. If there is no answer for the test case, print\n-1. Otherwise, the first line of the output should contain \n    k\n (\n    0 \n    \u2264\n    k \n    \u2264 n\n) \u2014 the minimal number of words in the set which should be\nreversed. The second line of the output should contain \n    k\n distinct\nintegers \u2014 the indexes of the words in the set which should be reversed. Words\nare numerated from \n    1\n to \n    n\n in the order they appear. If \n    k=0\n\nyou can skip this line (or you can print an empty line). If there are many\nanswers you can print any of them. Example Input 4 4 0001 1000 0011 0111 3 010\n101 0 2 00000 00001 4 01 001 0001 00001 Output 1 3 -1 0 2 1 2\n\n",
        "cf_contest_id": 1277,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "hashing",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4\r\n0001\r\n1000\r\n0011\r\n0111\r\n3\r\n010\r\n101\r\n0\r\n2\r\n00000\r\n00001\r\n4\r\n01\r\n001\r\n0001\r\n00001\r\n",
                "1\r\n3 \r\n-1\r\n0\r\n\r\n2\r\n1 2 \r\n"
            ]
        ],
        "private_cases": []
    }
]