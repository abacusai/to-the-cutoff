[
    {
        "name": "Bear and Two Paths",
        "description": "Bearland has n cities, numbered 1 through n. Cities are connected via\nbidirectional roads. Each road connects two distinct cities. No two roads\nconnect the same pair of cities. Bear Limak was once in a city a and he wanted\nto go to a city b. There was no direct connection so he decided to take a long\nwalk, visiting each city exactly once. Formally: There is no road between a\nand b. There exists a sequence (path) of n distinct cities v1, v2, ..., vn\nthat v1 = a, vn = b and there is a road between vi and vi + 1 for . On the\nother day, the similar thing happened. Limak wanted to travel between a city c\nand a city d. There is no road between them but there exists a sequence of n\ndistinct cities u1, u2, ..., un that u1 = c, un = d and there is a road\nbetween ui and ui + 1 for . Also, Limak thinks that there are at most k roads\nin Bearland. He wonders whether he remembers everything correctly. Given n, k\nand four distinct cities a, b, c, d, can you find possible paths (v1, ..., vn)\nand (u1, ..., un) to satisfy all the given conditions? Find any solution or\nprint -1 if it's impossible. Input The first line of the input contains two\nintegers n and k (4 \u2264 n \u2264 1000, n - 1 \u2264 k \u2264 2n - 2) \u2014 the number of cities and\nthe maximum allowed number of roads, respectively. The second line contains\nfour distinct integers a, b, c and d (1 \u2264 a, b, c, d \u2264 n). Output Print -1 if\nit's impossible to satisfy all the given conditions. Otherwise, print two\nlines with paths descriptions. The first of these two lines should contain n\ndistinct integers v1, v2, ..., vn where v1 = a and vn = b. The second line\nshould contain n distinct integers u1, u2, ..., un where u1 = c and un = d.\nTwo paths generate at most 2n - 2 roads: (v1, v2), (v2, v3), ..., (vn - 1,\nvn), (u1, u2), (u2, u3), ..., (un - 1, un). Your answer will be considered\nwrong if contains more than k distinct roads or any other condition breaks.\nNote that (x, y) and (y, x) are the same road. Examples Input 7 11 2 4 7 3\nOutput 2 7 1 3 6 5 4 7 1 5 4 6 2 3 Input 1000 999 10 20 30 40 Output -1 Note\nIn the first sample test, there should be 7 cities and at most 11 roads. The\nprovided sample solution generates 10 roads, as in the drawing. You can also\nsee a simple path of length n between 2 and 4, and a path between 7 and 3.\n\n",
        "cf_contest_id": 643,
        "cf_index": "B",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graphs"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 11\r\n2 4 7 3\r\n",
                "2 7 5 6 1 3 4 7 2 5 6 1 4 3\r\n"
            ],
            [
                "1000 999\r\n10 20 30 40\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "4 4\r\n1 2 3 4\r\n",
                "-1\r\n"
            ],
            [
                "5 6\r\n5 2 4 1\r\n",
                "5 4 3 1 2 4 5 3 2 1\r\n"
            ],
            [
                "57 88\r\n54 30 5 43\r\n",
                "54 5 16 35 11 41 51 56 10 32 55 39 22 37 52 17 3 57 31 7 27 28 40 38 18 21 29 6 42 20 14 36 23 1 26 50 49 13 44 15 2 33 34 8 45 4 53 19 48 24 47 9 25 46 12 43 30 5 54 16 35 11 41 51 56 10 32 55 39 22 37 52 17 3 57 31 7 27 28 40 38 18 21 29 6 42 20 14 36 23 1 26 50 49 13 44 15 2 33 34 8 45 4 53 19 48 24 47 9 25 46 12 30 43\r\n"
            ],
            [
                "700 699\r\n687 69 529 616\r\n",
                "-1\r\n"
            ],
            [
                "4 5\r\n1 3 4 2\r\n",
                "-1\r\n"
            ],
            [
                "4 6\r\n1 3 2 4\r\n",
                "-1\r\n"
            ],
            [
                "5 4\r\n2 3 5 4\r\n",
                "-1\r\n"
            ],
            [
                "5 5\r\n1 4 2 5\r\n",
                "-1\r\n"
            ],
            [
                "5 7\r\n4 3 2 1\r\n",
                "4 2 5 1 3 2 4 5 3 1\r\n"
            ],
            [
                "5 8\r\n2 3 5 1\r\n",
                "2 5 4 1 3 5 2 4 3 1\r\n"
            ],
            [
                "6 5\r\n3 2 5 4\r\n",
                "-1\r\n"
            ],
            [
                "6 6\r\n1 3 4 5\r\n",
                "-1\r\n"
            ],
            [
                "6 7\r\n3 1 2 4\r\n",
                "3 2 6 5 4 1 2 3 6 5 1 4\r\n"
            ],
            [
                "6 10\r\n5 3 4 2\r\n",
                "5 4 6 1 2 3 4 5 6 1 3 2\r\n"
            ],
            [
                "7 7\r\n6 2 5 7\r\n",
                "-1\r\n"
            ],
            [
                "7 8\r\n2 7 6 5\r\n",
                "2 6 4 3 1 5 7 6 2 4 3 1 7 5\r\n"
            ],
            [
                "55 56\r\n1 2 3 4\r\n",
                "1 3 8 16 34 21 26 47 25 29 7 5 45 50 20 11 24 43 12 15 41 31 52 51 30 49 53 48 39 22 44 33 17 9 10 36 32 42 37 40 35 23 46 38 28 14 27 54 13 18 6 55 19 4 2 3 1 8 16 34 21 26 47 25 29 7 5 45 50 20 11 24 43 12 15 41 31 52 51 30 49 53 48 39 22 44 33 17 9 10 36 32 42 37 40 35 23 46 38 28 14 27 54 13 18 6 55 19 2 4\r\n"
            ],
            [
                "55 56\r\n4 1 2 3\r\n",
                "4 2 11 29 45 42 44 13 37 28 10 20 36 31 7 18 51 9 19 8 5 48 50 6 27 17 53 23 54 38 41 16 35 49 21 25 34 33 43 32 40 30 14 55 39 12 22 47 15 26 24 52 46 3 1 2 4 11 29 45 42 44 13 37 28 10 20 36 31 7 18 51 9 19 8 5 48 50 6 27 17 53 23 54 38 41 16 35 49 21 25 34 33 43 32 40 30 14 55 39 12 22 47 15 26 24 52 46 1 3\r\n"
            ],
            [
                "55 56\r\n52 53 54 55\r\n",
                "52 54 36 23 40 48 37 38 49 13 6 28 33 45 8 15 5 26 4 12 32 22 1 39 19 16 18 35 2 34 27 20 30 17 50 14 41 7 51 21 46 44 9 24 11 29 10 42 3 43 31 25 47 55 53 54 52 36 23 40 48 37 38 49 13 6 28 33 45 8 15 5 26 4 12 32 22 1 39 19 16 18 35 2 34 27 20 30 17 50 14 41 7 51 21 46 44 9 24 11 29 10 42 3 43 31 25 47 53 55\r\n"
            ],
            [
                "55 56\r\n53 54 52 55\r\n",
                "53 52 22 32 47 24 29 20 44 45 35 15 11 51 28 30 37 23 48 46 25 49 21 8 19 36 10 39 18 31 40 7 41 14 4 26 27 2 33 17 42 34 16 50 43 9 5 38 1 3 13 12 6 55 54 52 53 22 32 47 24 29 20 44 45 35 15 11 51 28 30 37 23 48 46 25 49 21 8 19 36 10 39 18 31 40 7 41 14 4 26 27 2 33 17 42 34 16 50 43 9 5 38 1 3 13 12 6 54 55\r\n"
            ],
            [
                "55 75\r\n2 3 1 4\r\n",
                "2 1 8 42 50 30 7 34 49 22 39 43 36 38 29 14 13 20 40 24 21 45 32 19 17 44 46 9 48 55 11 10 26 28 12 27 5 37 47 35 25 15 54 53 16 41 31 51 52 6 23 18 33 4 3 1 2 8 42 50 30 7 34 49 22 39 43 36 38 29 14 13 20 40 24 21 45 32 19 17 44 46 9 48 55 11 10 26 28 12 27 5 37 47 35 25 15 54 53 16 41 31 51 52 6 23 18 33 3 4\r\n"
            ],
            [
                "55 57\r\n54 55 52 53\r\n",
                "54 52 34 37 7 29 9 8 32 27 18 42 43 33 5 38 16 50 47 15 35 40 10 23 2 3 21 22 49 20 41 28 19 11 30 36 39 51 13 12 46 4 14 25 45 48 26 24 6 17 44 31 1 53 55 52 54 34 37 7 29 9 8 32 27 18 42 43 33 5 38 16 50 47 15 35 40 10 23 2 3 21 22 49 20 41 28 19 11 30 36 39 51 13 12 46 4 14 25 45 48 26 24 6 17 44 31 1 55 53\r\n"
            ],
            [
                "1000 999\r\n179 326 640 274\r\n",
                "-1\r\n"
            ],
            [
                "1000 1000\r\n89 983 751 38\r\n",
                "-1\r\n"
            ],
            [
                "999 999\r\n289 384 609 800\r\n",
                "-1\r\n"
            ],
            [
                "4 6\r\n1 2 3 4\r\n",
                "-1\r\n"
            ],
            [
                "4 5\r\n1 2 3 4\r\n",
                "-1\r\n"
            ],
            [
                "5 5\r\n1 2 3 4\r\n",
                "-1\r\n"
            ],
            [
                "5 6\r\n1 5 3 4\r\n",
                "1 3 2 4 5 3 1 2 5 4\r\n"
            ],
            [
                "5 7\r\n1 2 3 4\r\n",
                "1 3 5 4 2 3 1 5 2 4\r\n"
            ],
            [
                "10 10\r\n2 5 3 8\r\n",
                "-1\r\n"
            ],
            [
                "10 10\r\n1 10 5 7\r\n",
                "-1\r\n"
            ],
            [
                "5 8\r\n1 2 3 4\r\n",
                "1 3 5 4 2 3 1 5 2 4\r\n"
            ],
            [
                "6 6\r\n1 2 3 4\r\n",
                "-1\r\n"
            ]
        ]
    }
]