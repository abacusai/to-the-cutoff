[
    {
        "name": "Zigzag",
        "description": "The court wizard Zigzag wants to become a famous mathematician. For that, he\nneeds his own theorem, like the Cauchy theorem, or his sum, like the Minkowski\nsum. But most of all he wants to have his sequence, like the Fibonacci\nsequence, and his function, like the Euler's totient function. The Zigag's\nsequence with the zigzag factor z is an infinite sequence Si^z (i \u2265 1; z \u2265 2),\nthat is determined as follows: Si^z = 2, when ; , when ; , when . Operation\nmeans taking the remainder from dividing number x by number y. For example,\nthe beginning of sequence Si^3 (zigzag factor 3) looks as follows: 1, 2, 3, 2,\n1, 2, 3, 2, 1. Let's assume that we are given an array a, consisting of n\nintegers. Let's define element number i (1 \u2264 i \u2264 n) of the array as ai. The\nZigzag function is function , where l, r, z satisfy the inequalities 1 \u2264 l \u2264 r\n\u2264 n, z \u2265 2. To become better acquainted with the Zigzag sequence and the\nZigzag function, the wizard offers you to implement the following operations\non the given array a. The assignment operation. The operation parameters are\n(p, v). The operation denotes assigning value v to the p-th array element.\nAfter the operation is applied, the value of the array element ap equals v.\nThe Zigzag operation. The operation parameters are (l, r, z). The operation\ndenotes calculating the Zigzag function Z(l, r, z). Explore the magical powers\nof zigzags, implement the described operations. Input The first line contains\ninteger n (1 \u2264 n \u2264 10^5) \u2014 The number of elements in array a. The second line\ncontains n space-separated integers: a1, a2, ..., an (1 \u2264 ai \u2264 10^9) \u2014 the\nelements of the array. The third line contains integer m (1 \u2264 m \u2264 10^5) \u2014 the\nnumber of operations. Next m lines contain the operations' descriptions. An\noperation's description starts with integer ti (1 \u2264 ti \u2264 2) \u2014 the operation\ntype. If ti = 1 (assignment operation), then on the line follow two space-\nseparated integers: pi, vi (1 \u2264 pi \u2264 n; 1 \u2264 vi \u2264 10^9) \u2014 the parameters of the\nassigning operation. If ti = 2 (Zigzag operation), then on the line follow\nthree space-separated integers: li, ri, zi (1 \u2264 li \u2264 ri \u2264 n; 2 \u2264 zi \u2264 6) \u2014 the\nparameters of the Zigzag operation. You should execute the operations in the\norder, in which they are given in the input. Output For each Zigzag operation\nprint the calculated value of the Zigzag function on a single line. Print the\nvalues for Zigzag functions in the order, in which they are given in the\ninput. Please, do not use the \nin \u0421++. It is preferred to use cin, cout streams or the \nExamples Input 5 2 3 1 5 5 4 2 2 3 2 2 1 5 3 1 3 5 2 1 5 3 Output 5 26 38 Note\nExplanation of the sample test: Result of the first operation is Z(2, 3, 2) =\n3\u00b71 + 1\u00b72 = 5. Result of the second operation is Z(1, 5, 3) = 2\u00b71 + 3\u00b72 + 1\u00b73\n+ 5\u00b72 + 5\u00b71 = 26. After the third operation array a is equal to 2, 3, 5, 5, 5.\nResult of the forth operation is Z(1, 5, 3) = 2\u00b71 + 3\u00b72 + 5\u00b73 + 5\u00b72 + 5\u00b71 =\n38.\n\n",
        "cf_contest_id": 228,
        "cf_index": "D",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n2 3 1 5 5\r\n4\r\n2 2 3 2\r\n2 1 5 3\r\n1 3 5\r\n2 1 5 3\r\n",
                "5\r\n26\r\n38\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n581807377 848812048 848166364 134821971 713647858\r\n10\r\n2 2 3 5\r\n2 5 5 5\r\n2 5 5 2\r\n1 1 467786083\r\n2 4 5 5\r\n1 3 232276328\r\n1 5 146097986\r\n2 1 5 6\r\n2 5 5 3\r\n1 3 143011686\r\n",
                "2545144776\r\n713647858\r\n713647858\r\n1562117687\r\n4132016977\r\n146097986\r\n"
            ],
            [
                "5\r\n42665793 142698407 856080769 176604645 248258165\r\n10\r\n1 5 141156007\r\n2 5 5 3\r\n2 4 4 2\r\n2 2 5 3\r\n1 2 942795810\r\n2 5 5 3\r\n1 3 195194439\r\n1 2 698674322\r\n1 2 602158126\r\n2 2 4 2\r\n",
                "141156007\r\n176604645\r\n2666985894\r\n141156007\r\n1169151649\r\n"
            ],
            [
                "5\r\n798491505 143876925 714252070 70903672 75576312\r\n10\r\n1 4 894875534\r\n1 2 547197376\r\n1 4 190083985\r\n2 2 5 3\r\n1 5 882369084\r\n1 4 257095083\r\n2 4 5 6\r\n1 5 313038735\r\n1 5 338812312\r\n2 4 4 2\r\n",
                "2697106095\r\n2021833251\r\n257095083\r\n"
            ],
            [
                "5\r\n259349921 585246931 574682827 407653643 902894459\r\n10\r\n2 3 5 5\r\n1 3 578806357\r\n2 2 3 5\r\n1 5 556830122\r\n1 3 542486819\r\n2 4 4 5\r\n1 2 650599782\r\n2 1 5 2\r\n2 2 4 2\r\n1 4 384265705\r\n",
                "4098673490\r\n1742859645\r\n407653643\r\n3475173712\r\n2143227063\r\n"
            ]
        ]
    }
]