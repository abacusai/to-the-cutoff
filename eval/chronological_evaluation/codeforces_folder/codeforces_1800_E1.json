[
    {
        "name": "Unforgivable Curse (easy version)",
        "description": "This is an easy version of the problem. In this version, \n    k\n is always\n\n    3\n. The chief wizard of the Wizengamot once caught the evil wizard\nDrahyrt, but the evil wizard has returned and wants revenge on the chief\nwizard. So he stole spell \n    s\n from his student Harry. The spell \u2014 is a\n\n    n\n-length string of lowercase Latin letters. Drahyrt wants to replace\nspell with an unforgivable curse \u2014 string \n    t\n. Drahyrt, using ancient\nmagic, can swap letters at a distance \n    k\n or \n    k+1\n in spell as many\ntimes as he wants. In this version of the problem, you can swap letters at a\ndistance of \n    3\n or \n    4\n. In other words, Drahyrt can change letters in\npositions \n    i\n and \n    j\n in spell \n    s\n if \n    |i-j|=3\n or\n\n    |i-j|=4\n. For example, if \n    s =\n \"talant\" and \n    t =\n \"atltna\",\nDrahyrt can act as follows: swap the letters at positions \n    1\n and \n    4\n\nto get spell \"aaltnt\". swap the letters at positions \n    2\n and \n    6\n to\nget spell \"atltna\". You are given spells \n    s\n and \n    t\n. Can Drahyrt\nchange spell \n    s\n to \n    t\n? Input The first line of input gives a single\ninteger \n    T\n (\n    1 \n    \u2264 T \n    \u2264 10^4\n) \u2014 the number of test cases in the\ntest. Descriptions of the test cases are follow. The first line contains two\nintegers \n    n, k\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n, \n    k = 3\n) \u2014 the\nlength spells and the number \n    k\n such that Drahyrt can change letters in a\nspell at a distance \n    k\n or \n    k+1\n. The second line gives spell \n    s\n\n\u2014 a string of length \n    n\n consisting of lowercase Latin letters. The third\nline gives spell \n    t\n \u2014 a string of length \n    n\n consisting of lowercase\nLatin letters. It is guaranteed that the sum of \n    n\n values over all test\ncases does not exceed \n    2 \n    \u00b7 10^5\n. Note that there is no limit on the\nsum of \n    k\n values over all test cases. Output For each test case, output\non a separate line \"YES\" if Drahyrt can change spell \n    s\n to \n    t\n and\n\"NO\" otherwise. You can output the answer in any case (for example, lines\n\"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as positive answer). Example\nInput 7 6 3 talant atltna 7 3 abacaba aaaabbc 12 3 abracadabraa avadakedavra 5\n3 accio cicao 5 3 lumos molus 4 3 uwjt twju 4 3 kvpx vxpk Output YES YES NO\nYES NO YES NO Note The first example is explained in the condition. In the\nsecond example we can proceed as follows: Swap the letters at positions\n\n    2\n and \n    5\n (distance \n    3\n), then we get the spell \"aaacbba\". Swap\nthe letters at positions \n    4\n and \n    7\n (distance \n    3\n), then you get\nthe spell \"aaaabbc\". In the third example, we can show that it is impossible\nto get the string \n    t\n from the string \n    s\n by swapping the letters at a\ndistance of \n    3\n or \n    4\n. In the fourth example, for example, the\nfollowing sequence of transformations is appropriate: \"accio\"\n\n    \u2192\n \"aocic\" \n    \u2192\n \"cocia\" \n    \u2192\n\n\"iocca\" \n    \u2192\n \"aocci\" \n    \u2192\n \"aicco\"\n\n    \u2192\n \"cicao\" In the fifth example, you can show that it is\nimpossible to get the string \n    s\n from the string \n    t\n. In the sixth\nexample, it is enough to swap the two outermost letters.\n\n",
        "cf_contest_id": 1800,
        "cf_index": "E1",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "dsu",
            "graphs",
            "greedy",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n6 3\r\ntalant\r\natltna\r\n7 3\r\nabacaba\r\naaaabbc\r\n12 3\r\nabracadabraa\r\navadakedavra\r\n5 3\r\naccio\r\ncicao\r\n5 3\r\nlumos\r\nmolus\r\n4 3\r\nuwjt\r\ntwju\r\n4 3\r\nkvpx\r\nvxpk\r\n",
                "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n4 3\r\nabbb\r\nbbbb\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n5 3\r\naabcc\r\naadcc\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n5 3\r\naaaaa\r\naacaa\r\n",
                "NO\r\n"
            ]
        ]
    }
]