[
    {
        "name": "Crosses",
        "description": "There is a board with a grid consisting of n rows and m columns, the rows are\nnumbered from 1 from top to bottom and the columns are numbered from 1 from\nleft to right. In this grid we will denote the cell that lies on row number i\nand column number j as (i, j). A group of six numbers (a, b, c, d, x0, y0),\nwhere 0 \u2264 a, b, c, d, is a cross, and there is a set of cells that are\nassigned to it. Cell (x, y) belongs to this set if at least one of two\nconditions are fulfilled: |x0 - x| \u2264 a and |y0 - y| \u2264 b |x0 - x| \u2264 c and |y0 -\ny| \u2264 d The picture shows the cross (0, 1, 1, 0, 2, 3) on the grid 3 \u00d7 4. Your\ntask is to find the number of different groups of six numbers, (a, b, c, d,\nx0, y0) that determine the crosses of an area equal to s, which are placed\nentirely on the grid. The cross is placed entirely on the grid, if any of its\ncells is in the range of the grid (that is for each cell (x, y) of the cross 1\n\u2264 x \u2264 n; 1 \u2264 y \u2264 m holds). The area of the cross is the number of cells it\nhas. Note that two crosses are considered distinct if the ordered groups of\nsix numbers that denote them are distinct, even if these crosses coincide as\nsets of points. Input The input consists of a single line containing three\nintegers n, m and s (1 \u2264 n, m \u2264 500, 1 \u2264 s \u2264 n\u00b7m). The integers are separated\nby a space. Output Print a single integer \u2014 the number of distinct groups of\nsix integers that denote crosses with area s and that are fully placed on the\nn \u00d7 m grid. Please, do not use the \nintegers in \u0421++. It is preferred to use the cin, cout streams or the \nspecifier. Examples Input 2 2 1 Output 4 Input 3 4 5 Output 4 Note In the\nfirst sample the sought groups of six numbers are: (0, 0, 0, 0, 1, 1), (0, 0,\n0, 0, 1, 2), (0, 0, 0, 0, 2, 1), (0, 0, 0, 0, 2, 2). In the second sample the\nsought groups of six numbers are: (0, 1, 1, 0, 2, 2), (0, 1, 1, 0, 2, 3), (1,\n0, 0, 1, 2, 2), (1, 0, 0, 1, 2, 3).\n\n",
        "cf_contest_id": 215,
        "cf_index": "C",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 2 1\r\n",
                "4\r\n"
            ],
            [
                "3 4 5\r\n",
                "4\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 2 3\r\n",
                "0\r\n"
            ],
            [
                "5 1 3\r\n",
                "9\r\n"
            ],
            [
                "9 7 55\r\n",
                "4\r\n"
            ],
            [
                "5 10 25\r\n",
                "102\r\n"
            ],
            [
                "20 12 101\r\n",
                "424\r\n"
            ],
            [
                "21 10 155\r\n",
                "36\r\n"
            ],
            [
                "49 7 105\r\n",
                "14229\r\n"
            ],
            [
                "74 99 5057\r\n",
                "20000\r\n"
            ],
            [
                "9 10 5\r\n",
                "632\r\n"
            ],
            [
                "10 14 47\r\n",
                "256\r\n"
            ],
            [
                "6 14 23\r\n",
                "112\r\n"
            ],
            [
                "27 9 57\r\n",
                "3435\r\n"
            ],
            [
                "20 17 319\r\n",
                "4\r\n"
            ],
            [
                "2 20 37\r\n",
                "0\r\n"
            ],
            [
                "10 4 33\r\n",
                "0\r\n"
            ],
            [
                "30 8 53\r\n",
                "896\r\n"
            ],
            [
                "48 76 2921\r\n",
                "1288\r\n"
            ],
            [
                "2 78 117\r\n",
                "0\r\n"
            ],
            [
                "2 55 9\r\n",
                "846\r\n"
            ],
            [
                "56 54 2639\r\n",
                "392\r\n"
            ],
            [
                "72 65 2843\r\n",
                "25704\r\n"
            ],
            [
                "32 71 297\r\n",
                "507408\r\n"
            ],
            [
                "48 81 2573\r\n",
                "9380\r\n"
            ],
            [
                "1 1 1\r\n",
                "1\r\n"
            ],
            [
                "100 100 5\r\n",
                "115208\r\n"
            ],
            [
                "100 100 19\r\n",
                "550416\r\n"
            ],
            [
                "20 20 8\r\n",
                "0\r\n"
            ],
            [
                "30 90 29\r\n",
                "145304\r\n"
            ],
            [
                "100 100 199\r\n",
                "1788896\r\n"
            ],
            [
                "100 100 3421\r\n",
                "723136\r\n"
            ],
            [
                "2 1 1\r\n",
                "2\r\n"
            ],
            [
                "1 2 1\r\n",
                "2\r\n"
            ],
            [
                "1 2 2\r\n",
                "0\r\n"
            ],
            [
                "2 1 2\r\n",
                "0\r\n"
            ],
            [
                "500 500 1\r\n",
                "250000\r\n"
            ],
            [
                "500 499 3\r\n",
                "1491006\r\n"
            ],
            [
                "499 500 5\r\n",
                "2970032\r\n"
            ],
            [
                "499 499 5\r\n",
                "2964068\r\n"
            ],
            [
                "499 498 7\r\n",
                "4419230\r\n"
            ],
            [
                "500 500 9\r\n",
                "7640108\r\n"
            ],
            [
                "500 498 11\r\n",
                "8304516\r\n"
            ],
            [
                "498 500 13\r\n",
                "9728792\r\n"
            ],
            [
                "497 498 45\r\n",
                "74632432\r\n"
            ],
            [
                "500 499 93\r\n",
                "143189600\r\n"
            ],
            [
                "500 500 250000\r\n",
                "0\r\n"
            ],
            [
                "500 500 9999\r\n",
                "4540761776\r\n"
            ],
            [
                "500 500 9997\r\n",
                "1380438648\r\n"
            ],
            [
                "500 500 9001\r\n",
                "1254836160\r\n"
            ],
            [
                "3 3 5\r\n",
                "2\r\n"
            ],
            [
                "500 500 249999\r\n",
                "0\r\n"
            ],
            [
                "500 500 249998\r\n",
                "0\r\n"
            ],
            [
                "500 500 249997\r\n",
                "0\r\n"
            ],
            [
                "500 500 249995\r\n",
                "0\r\n"
            ],
            [
                "500 500 249993\r\n",
                "0\r\n"
            ],
            [
                "500 500 6913\r\n",
                "2147074656\r\n"
            ],
            [
                "500 500 4755\r\n",
                "2145363424\r\n"
            ],
            [
                "500 500 2639\r\n",
                "2141188528\r\n"
            ],
            [
                "500 500 2431\r\n",
                "2137019440\r\n"
            ],
            [
                "500 500 11025\r\n",
                "10736521384\r\n"
            ]
        ]
    }
]