[
    {
        "name": "Easy Tape Programming",
        "description": "There is a programming language in which every program is a non-empty sequence\nof \"<\" and \">\" signs and digits. Let's explain how the interpreter of this\nprogramming language works. A program is interpreted using movement of\ninstruction pointer (IP) which consists of two parts. Current character\npointer (CP); Direction pointer (DP) which can point left or right; Initially\nCP points to the leftmost character of the sequence and DP points to the\nright. We repeat the following steps until the first moment that CP points to\nsomewhere outside the sequence. If CP is pointing to a digit the interpreter\nprints that digit then CP moves one step according to the direction of DP.\nAfter that the value of the printed digit in the sequence decreases by one. If\nthe printed digit was 0 then it cannot be decreased therefore it's erased from\nthe sequence and the length of the sequence decreases by one. If CP is\npointing to \"<\" or \">\" then the direction of DP changes to \"left\" or \"right\"\ncorrespondingly. Then CP moves one step according to DP. If the new character\nthat CP is pointing to is \"<\" or \">\" then the previous character will be\nerased from the sequence. If at any moment the CP goes outside of the sequence\nthe execution is terminated. It's obvious the every program in this language\nterminates after some steps. We have a sequence s1, s2, ..., sn of \"<\", \">\"\nand digits. You should answer q queries. Each query gives you l and r and asks\nhow many of each digit will be printed if we run the sequence sl, sl + 1, ...,\nsr as an independent program in this language. Input The first line of input\ncontains two integers n and q (1 \u2264 n, q \u2264 100) \u2014 represents the length of the\nsequence s and the number of queries. The second line contains s, a sequence\nof \"<\", \">\" and digits (0..9) written from left to right. Note, that the\ncharacters of s are not separated with spaces. The next q lines each contains\ntwo integers li and ri (1 \u2264 li \u2264 ri \u2264 n) \u2014 the i-th query. Output For each\nquery print 10 space separated integers: x0, x1, ..., x9 where xi equals the\nnumber of times the interpreter prints i while running the corresponding\nprogram. Print answers to the queries in the order they are given in input.\nExamples Input 7 4 1>3>22< 1 3 4 7 7 7 1 7 Output 0 1 0 1 0 0 0 0 0 0 2 2 2 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 3 2 1 0 0 0 0 0 0\n\n",
        "cf_contest_id": 239,
        "cf_index": "B",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 4\r\n1>3>22<\r\n1 3\r\n4 7\r\n7 7\r\n1 7\r\n",
                "0 1 0 1 0 0 0 0 0 0 \r\n2 2 2 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 \r\n2 3 2 1 0 0 0 0 0 0 \r\n"
            ]
        ],
        "private_cases": [
            [
                "5 2\r\n>>>>>\r\n1 5\r\n1 2\r\n",
                "0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 \r\n"
            ],
            [
                "1 3\r\n9\r\n1 1\r\n1 1\r\n1 1\r\n",
                "0 0 0 0 0 0 0 0 0 1 \r\n0 0 0 0 0 0 0 0 0 1 \r\n0 0 0 0 0 0 0 0 0 1 \r\n"
            ],
            [
                "7 1\r\n0101010\r\n1 7\r\n",
                "4 3 0 0 0 0 0 0 0 0 \r\n"
            ],
            [
                "17 21\r\n187<9>82<818<4229\r\n8 14\r\n4 10\r\n11 17\r\n8 8\r\n4 12\r\n6 6\r\n5 12\r\n10 12\r\n15 16\r\n7 7\r\n3 8\r\n4 8\r\n8 9\r\n8 10\r\n5 7\r\n1 7\r\n11 12\r\n3 6\r\n6 11\r\n8 16\r\n6 9\r\n",
                "0 1 1 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 \r\n1 1 0 0 0 0 0 1 1 0 \r\n0 0 1 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 \r\n2 3 2 1 1 1 1 1 3 1 \r\n0 1 0 0 0 0 0 0 2 0 \r\n0 0 2 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 1 0 \r\n0 0 0 0 0 0 1 1 0 0 \r\n0 0 0 0 0 0 0 0 0 0 \r\n0 1 1 0 0 0 0 0 0 0 \r\n0 1 1 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 1 1 \r\n1 1 0 0 0 0 1 2 1 0 \r\n0 1 0 0 0 0 0 0 1 0 \r\n0 0 0 0 0 0 1 1 0 0 \r\n2 3 2 1 1 1 1 1 2 0 \r\n0 1 1 0 0 0 0 0 0 0 \r\n2 2 2 1 1 1 1 1 1 0 \r\n"
            ],
            [
                "1 5\r\n<\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n",
                "0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 \r\n"
            ],
            [
                "1 2\r\n>\r\n1 1\r\n1 1\r\n",
                "0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 \r\n"
            ],
            [
                "1 1\r\n0\r\n1 1\r\n",
                "1 0 0 0 0 0 0 0 0 0 \r\n"
            ],
            [
                "3 10\r\n<<<\r\n2 3\r\n3 3\r\n2 3\r\n3 3\r\n1 3\r\n1 1\r\n1 2\r\n3 3\r\n1 1\r\n2 2\r\n",
                "0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 \r\n"
            ],
            [
                "5 1\r\n1>3><\r\n4 5\r\n",
                "0 0 0 0 0 0 0 0 0 0 \r\n"
            ],
            [
                "4 1\r\n217<\r\n1 4\r\n",
                "1 2 1 0 0 0 1 1 0 0 \r\n"
            ],
            [
                "4 1\r\n34><\r\n1 4\r\n",
                "0 0 1 2 1 0 0 0 0 0 \r\n"
            ]
        ]
    }
]