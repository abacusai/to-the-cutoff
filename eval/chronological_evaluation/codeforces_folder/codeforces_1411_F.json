[
    {
        "name": "The Thorny Path",
        "description": "According to a legend the Hanoi Temple holds a permutation of integers from\n\n    1\n to \n    n\n. There are \n    n\n stones of distinct colors lying in one\nline in front of the temple. Monks can perform the following operation on\nstones: choose a position \n    i\n (\n    1 \n    \u2264 i \n    \u2264 n\n) and cyclically\nshift stones at positions \n    i\n, \n    p[i]\n, \n    p[p[i]]\n, .... That is, a\nstone from position \n    i\n will move to position \n    p[i]\n, a stone from\nposition \n    p[i]\n will move to position \n    p[p[i]]\n, and so on, a stone\nfrom position \n    j\n, such that \n    p[j] = i\n, will move to position\n\n    i\n. Each day the monks must obtain a new arrangement of stones using an\narbitrary number of these operations. When all possible arrangements will have\nbeen obtained, the world will end. You are wondering, what if some elements of\nthe permutation could be swapped just before the beginning? How many days\nwould the world last? You want to get a permutation that will allow the world\nto last as long as possible, using the minimum number of exchanges of two\nelements of the permutation. Two arrangements of stones are considered\ndifferent if there exists a position \n    i\n such that the colors of the\nstones on that position are different in these arrangements. Input Each test\nconsists of multiple test cases. The first line contains the number of test\ncases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^3\n). Description of the test cases\nfollows. The first line of each test case contains \n    n\n (\n    3 \n    \u2264 n\n    \n    \u2264 10^6\n). The next line contains \n    n\n integers \n    p_1, \n    \u2026,\n    p_n\n (\n    1 \n    \u2264 p_i \n    \u2264 n\n). It is guaranteed that \n    p\n is a\npermutation. It is guaranteed that the sum of \n    n\n over all test cases does\nnot exceed \n    10^6\n. Output For each of the \n    t\n test cases, print two\nintegers on a new line: the largest possible number of days the world can\nlast, modulo \n    10^9 + 7\n, and the minimum number of exchanges required for\nthat. Examples Input 3 3 2 3 1 3 2 1 3 3 1 2 3 Output 3 0 3 1 3 2 Input 5 4 2\n3 4 1 4 2 3 1 4 4 2 1 4 3 4 2 1 3 4 4 1 2 3 4 Output 4 0 4 1 4 0 4 1 4 2 Note\nLet's label the colors of the stones with letters. Explanations for the first\ntwo test cases of the first example: Using the permutation \n    [2, 3, 1]\n, we\ncan additionally obtain the arrangements CAB and BCA from ABC. This is already\nthe maximum possible result. Using the permutation \n    [2, 1, 3]\n, the only\nBAC can be obtained from ABC. As we saw in the previous case, two arrangements\nare not the maximum possible number of distinct arrangements for \n    n = 3\n.\nTo get an optimal permutation, for example, we can swap \n    1\n and \n    3\n,\nso we will get the permutation \n    [2, 3, 1]\n.\n\n",
        "cf_contest_id": 1411,
        "cf_index": "F",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3\r\n2 3 1\r\n3\r\n2 1 3\r\n3\r\n1 2 3\r\n",
                "3 0\r\n3 1\r\n3 2\r\n"
            ],
            [
                "5\r\n4\r\n2 3 4 1\r\n4\r\n2 3 1 4\r\n4\r\n2 1 4 3\r\n4\r\n2 1 3 4\r\n4\r\n1 2 3 4\r\n",
                "4 0\r\n4 1\r\n4 0\r\n4 1\r\n4 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "7\r\n5\r\n2 3 4 5 1\r\n5\r\n2 3 4 1 5\r\n5\r\n2 3 1 5 4\r\n5\r\n2 3 1 4 5\r\n5\r\n2 1 4 3 5\r\n5\r\n2 1 3 4 5\r\n5\r\n1 2 3 4 5\r\n",
                "6 1\r\n6 2\r\n6 0\r\n6 1\r\n6 1\r\n6 2\r\n6 3\r\n"
            ],
            [
                "11\r\n6\r\n2 3 4 5 6 1\r\n6\r\n2 3 4 5 1 6\r\n6\r\n2 3 4 1 6 5\r\n6\r\n2 3 4 1 5 6\r\n6\r\n2 3 1 5 6 4\r\n6\r\n2 3 1 5 4 6\r\n6\r\n2 3 1 4 5 6\r\n6\r\n2 1 4 3 6 5\r\n6\r\n2 1 4 3 5 6\r\n6\r\n2 1 3 4 5 6\r\n6\r\n1 2 3 4 5 6\r\n",
                "9 1\r\n9 2\r\n9 2\r\n9 3\r\n9 0\r\n9 1\r\n9 2\r\n9 3\r\n9 2\r\n9 3\r\n9 4\r\n"
            ],
            [
                "15\r\n7\r\n2 3 4 5 6 7 1\r\n7\r\n2 3 4 5 6 1 7\r\n7\r\n2 3 4 5 1 7 6\r\n7\r\n2 3 4 5 1 6 7\r\n7\r\n2 3 4 1 6 7 5\r\n7\r\n2 3 4 1 6 5 7\r\n7\r\n2 3 4 1 5 6 7\r\n7\r\n2 3 1 5 6 4 7\r\n7\r\n2 3 1 5 4 7 6\r\n7\r\n2 3 1 5 4 6 7\r\n7\r\n2 3 1 4 5 6 7\r\n7\r\n2 1 4 3 6 5 7\r\n7\r\n2 1 4 3 5 6 7\r\n7\r\n2 1 3 4 5 6 7\r\n7\r\n1 2 3 4 5 6 7\r\n",
                "12 1\r\n12 2\r\n12 1\r\n12 2\r\n12 0\r\n12 1\r\n12 2\r\n12 1\r\n12 0\r\n12 1\r\n12 2\r\n12 1\r\n12 2\r\n12 3\r\n12 4\r\n"
            ],
            [
                "22\r\n8\r\n2 3 4 5 6 7 8 1\r\n8\r\n2 3 4 5 6 7 1 8\r\n8\r\n2 3 4 5 6 1 8 7\r\n8\r\n2 3 4 5 6 1 7 8\r\n8\r\n2 3 4 5 1 7 8 6\r\n8\r\n2 3 4 5 1 7 6 8\r\n8\r\n2 3 4 5 1 6 7 8\r\n8\r\n2 3 4 1 6 7 8 5\r\n8\r\n2 3 4 1 6 7 5 8\r\n8\r\n2 3 4 1 6 5 8 7\r\n8\r\n2 3 4 1 6 5 7 8\r\n8\r\n2 3 4 1 5 6 7 8\r\n8\r\n2 3 1 5 6 4 8 7\r\n8\r\n2 3 1 5 6 4 7 8\r\n8\r\n2 3 1 5 4 7 6 8\r\n8\r\n2 3 1 5 4 6 7 8\r\n8\r\n2 3 1 4 5 6 7 8\r\n8\r\n2 1 4 3 6 5 8 7\r\n8\r\n2 1 4 3 6 5 7 8\r\n8\r\n2 1 4 3 5 6 7 8\r\n8\r\n2 1 3 4 5 6 7 8\r\n8\r\n1 2 3 4 5 6 7 8\r\n",
                "18 2\r\n18 3\r\n18 1\r\n18 2\r\n18 1\r\n18 2\r\n18 3\r\n18 3\r\n18 2\r\n18 2\r\n18 3\r\n18 4\r\n18 0\r\n18 1\r\n18 1\r\n18 2\r\n18 3\r\n18 3\r\n18 2\r\n18 3\r\n18 4\r\n18 5\r\n"
            ]
        ]
    }
]