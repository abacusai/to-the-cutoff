[
    {
        "name": "Insert Digit",
        "description": "You have a positive number of length \n    n\n and one additional digit. You can\ninsert this digit anywhere in the number, including at the beginning or at the\nend. Your task is to make the result as large as possible. For example, you\nhave the number \n    76543\n, and the additional digit is \n    4\n. Then the\nmaximum number you can get is \n    765443\n, and it can be obtained in two ways\n\u2014 by inserting a digit after the \n    3\nth or after the \n    4\nth digit of the\nnumber. Input The first line contains a single integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 10^4\n) \u2014 the number of test cases. The descriptions of the test cases\nfollow. The first line of the description of each test case contains two\nintegers \n    n\n and \n    d\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n; \n    0 \n    \u2264\n    d \n    \u2264 9\n) \u2014 the length of the number and an additional digit,\nrespectively. The second line of the description of each test case contains a\nstring consisting of \n    n\n digits \u2014 the number that you have initially. It\nis guaranteed that the number does not contain leading zeros. It is guaranteed\nthat the sum of \n    n\n for all test cases does not exceed \n    2 \n    \u00b7\n    10^5\n. Output For each test case, output a string consisting of \n    n + 1\n\ndigits \u2014 the maximum possible number that can be obtained. Example Input 11 5\n4 76543 1 0 1 2 5 44 3 6 666 5 6 13579 5 8 97531 19 4 9876543210123456789 5 7\n73737 8 1 20000000 7 0 7058959 12 1 828127127732 Output 765443 10 544 6666\n613579 987531 98765443210123456789 773737 210000000 70589590 8281271277321\n\n",
        "cf_contest_id": 1811,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "math",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "11\r\n5 4\r\n76543\r\n1 0\r\n1\r\n2 5\r\n44\r\n3 6\r\n666\r\n5 6\r\n13579\r\n5 8\r\n97531\r\n19 4\r\n9876543210123456789\r\n5 7\r\n73737\r\n8 1\r\n20000000\r\n7 0\r\n7058959\r\n12 1\r\n828127127732\r\n",
                "765443\r\n10\r\n544\r\n6666\r\n613579\r\n987531\r\n98765443210123456789\r\n773737\r\n210000000\r\n70589590\r\n8281271277321\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n1 1\r\n1\r\n1 2\r\n1\r\n1 3\r\n1\r\n1 4\r\n1\r\n1 5\r\n1\r\n1 6\r\n1\r\n1 7\r\n1\r\n1 8\r\n1\r\n1 9\r\n1\r\n2 0\r\n19\r\n",
                "11\r\n21\r\n31\r\n41\r\n51\r\n61\r\n71\r\n81\r\n91\r\n190\r\n"
            ],
            [
                "5\r\n2 0\r\n10\r\n2 1\r\n11\r\n2 2\r\n12\r\n2 3\r\n13\r\n2 4\r\n14\r\n",
                "100\r\n111\r\n212\r\n313\r\n414\r\n"
            ],
            [
                "1\r\n101 6\r\n11234567891123456789112345678911234567891123456789112345678911234567891123456789112345678911234567891\r\n",
                "611234567891123456789112345678911234567891123456789112345678911234567891123456789112345678911234567891\r\n"
            ],
            [
                "10\r\n5 4\r\n76543\r\n1 0\r\n1\r\n2 5\r\n44\r\n3 6\r\n666\r\n5 6\r\n13579\r\n5 8\r\n97531\r\n19 4\r\n9876543210123456789\r\n5 7\r\n73737\r\n8 1\r\n20000000\r\n7 0\r\n7058959\r\n",
                "765443\r\n10\r\n544\r\n6666\r\n613579\r\n987531\r\n98765443210123456789\r\n773737\r\n210000000\r\n70589590\r\n"
            ]
        ]
    }
]