[
    {
        "name": "Fixed Points",
        "description": "Consider a sequence of integers \n    a_1, a_2, \n    \u2026, a_n\n. In one move,\nyou can select any element of the sequence and delete it. After an element is\ndeleted, all elements to the right are shifted to the left by \n    1\n\nposition, so there are no empty spaces in the sequence. So after you make a\nmove, the sequence's length decreases by \n    1\n. The indices of the elements\nafter the move are recalculated. E. g. let the sequence be \n    a=[3, 2, 2, 1,\n    5]\n. Let's select the element \n    a_3=2\n in a move. Then after the move the\nsequence will be equal to \n    a=[3, 2, 1, 5]\n, so the \n    3\n-rd element of\nthe new sequence will be \n    a_3=1\n and the \n    4\n-th element will be\n\n    a_4=5\n. You are given a sequence \n    a_1, a_2, \n    \u2026, a_n\n and a\nnumber \n    k\n. You need to find the minimum number of moves you have to make\nso that in the resulting sequence there will be at least \n    k\n elements that\nare equal to their indices, i. e. the resulting sequence \n    b_1, b_2,\n    \n    \u2026, b_m\n will contain at least \n    k\n indices \n    i\n such that\n\n    b_i = i\n. Input The first line contains one integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 100\n) \u2014 the number of test cases. Then \n    t\n test cases follow. Each\ntest case consists of two consecutive lines. The first line contains two\nintegers \n    n\n and \n    k\n (\n    1 \n    \u2264 k \n    \u2264 n \n    \u2264 2000\n). The second\nline contains a sequence of integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264\n    a_i \n    \u2264 n\n). The numbers in the sequence are not necessarily different. It\nis guaranteed that the sum of \n    n\n over all test cases doesn't exceed\n\n    2000\n. Output For each test case output in a single line: \n    -1\n if\nthere's no desired move sequence; otherwise, the integer \n    x\n (\n    0 \n    \u2264 x\n    \n    \u2264 n\n) \u2014 the minimum number of the moves to be made so that the resulting\nsequence will contain at least \n    k\n elements that are equal to their\nindices. Example Input 4 7 6 1 1 2 3 4 5 6 5 2 5 1 3 2 3 5 2 5 5 5 5 4 8 4 1 2\n3 3 2 2 5 5 Output 1 2 -1 2 Note In the first test case the sequence doesn't\nsatisfy the desired condition, but it can be provided by deleting the first\nelement, hence the sequence will be \n    [1, 2, 3, 4, 5, 6]\n and \n    6\n\nelements will be equal to their indices. In the second test case there are two\nways to get the desired result in \n    2\n moves: the first one is to delete\nthe \n    1\n-st and the \n    3\n-rd elements so that the sequence will be \n    [1,\n    2, 3]\n and have \n    3\n elements equal to their indices; the second way is\nto delete the \n    2\n-nd and the \n    3\n-rd elements to get the sequence\n\n    [5, 2, 3]\n with \n    2\n desired elements.\n\n",
        "cf_contest_id": 1551,
        "cf_index": "E",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "dp"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n7 6\r\n1 1 2 3 4 5 6\r\n5 2\r\n5 1 3 2 3\r\n5 2\r\n5 5 5 5 4\r\n8 4\r\n1 2 3 3 2 2 5 5\r\n",
                "1\r\n2\r\n-1\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n15 6\r\n10 7 6 7 9 7 7 10 10 7 9 12 11 12 7\r\n8 1\r\n1 3 6 3 7 2 4 8\r\n",
                "-1\r\n0\r\n"
            ]
        ]
    }
]