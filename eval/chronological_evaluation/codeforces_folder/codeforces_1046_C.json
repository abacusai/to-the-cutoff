[
    {
        "name": "Space Formula",
        "description": "Formula 1 officials decided to introduce new competition. Cars are replaced by\nspace ships and number of points awarded can differ per race. Given the\ncurrent ranking in the competition and points distribution for the next race,\nyour task is to calculate the best possible ranking for a given astronaut\nafter the next race. It's guaranteed that given astronaut will have unique\nnumber of points before the race. Input The first line contains two integer\nnumbers \n    N\n (\n    1 \n    \u2264 N \n    \u2264 200000\n) representing number of F1\nastronauts, and current position of astronaut \n    D\n (\n    1 \n    \u2264 D \n    \u2264\n    N\n) you want to calculate best ranking for (no other competitor will have\nthe same number of points before the race). The second line contains \n    N\n\ninteger numbers \n    S_k\n (\n    0 \n    \u2264 S_k \n    \u2264 10^8\n, \n    k=1...N\n),\nseparated by a single space, representing current ranking of astronauts.\nPoints are sorted in non-increasing order. The third line contains \n    N\n\ninteger numbers \n    P_k\n (\n    0 \n    \u2264 P_k \n    \u2264 10^8\n, \n    k=1...N\n),\nseparated by a single space, representing point awards for the next race.\nPoints are sorted in non-increasing order, so winner of the race gets the\nmaximum number of points. Output Output contains one integer number \u2014 the best\npossible ranking for astronaut after the race. If multiple astronauts have the\nsame score after the race, they all share the best ranking. Example Input 4 3\n50 30 20 10 15 10 7 3 Output 2 Note If the third ranked astronaut wins the\nrace, he will have 35 points. He cannot take the leading position, but he can\novertake the second position if the second ranked astronaut finishes the race\nat the last position.\n\n",
        "cf_contest_id": 1046,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 3\r\n50 30 20 10\r\n15 10 7 3\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "4 4\r\n29 25 13 10\r\n20 9 3 0\r\n",
                "1\r\n"
            ],
            [
                "4 4\r\n29 25 13 0\r\n20 9 8 0\r\n",
                "3\r\n"
            ],
            [
                "4 4\r\n29 25 13 9\r\n20 9 8 0\r\n",
                "2\r\n"
            ],
            [
                "4 4\r\n29 25 13 9\r\n3 2 1 0\r\n",
                "4\r\n"
            ],
            [
                "4 1\r\n29 25 13 9\r\n3 2 1 0\r\n",
                "1\r\n"
            ],
            [
                "4 2\r\n29 28 13 9\r\n1 1 1 0\r\n",
                "1\r\n"
            ],
            [
                "4 2\r\n29 28 27 9\r\n1 1 1 0\r\n",
                "1\r\n"
            ],
            [
                "4 4\r\n29 25 13 10\r\n20 9 8 0\r\n",
                "2\r\n"
            ],
            [
                "1 1\r\n5\r\n5\r\n",
                "1\r\n"
            ]
        ]
    }
]