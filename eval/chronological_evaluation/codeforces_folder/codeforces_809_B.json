[
    {
        "name": "Glad to see you!",
        "description": "This is an interactive problem. In the output section below you will see the\ninformation about flushing the output. On Sunday Leha the hacker took Nura\nfrom the house where she lives and went with her to one of the most luxurious\nrestaurants in Vi\u010dkopolis. Upon arrival, they left the car in a huge parking\nlot near the restaurant and hurried inside the building. In the restaurant a\npolite waiter immediately brought the menu to Leha and Noora, consisting of n\ndishes. It is interesting that all dishes in the menu are numbered with\nintegers from 1 to n. After a little thought, the girl ordered exactly k\ndifferent dishes from available in the menu. To pass the waiting time while\nthe chefs prepare ordered dishes, the girl invited the hacker to play a game\nthat will help them get to know each other better. The game itself is very\nsimple: Noora wants Leha to guess any two dishes among all ordered. At the\nsame time, she is ready to answer only one type of questions. Leha can say two\nnumbers x and y (1 \u2264 x, y \u2264 n). After that Noora chooses some dish a for the\nnumber x such that, at first, a is among the dishes Noora ordered (x can be\nequal to a), and, secondly, the value is the minimum possible. By the same\nrules the girl chooses dish b for y. After that Noora says \u00abTAK\u00bb to Leha, if ,\nand \u00abNIE\u00bb otherwise. However, the restaurant is preparing quickly, so Leha has\nenough time to ask no more than 60 questions. After that he should name\nnumbers of any two dishes Noora ordered. Help Leha to solve this problem!\nInput There are two numbers n and k (2 \u2264 k \u2264 n \u2264 10^5) in the single line of\ninput denoting the number of dishes in the menu and the number of dishes Noora\nordered. Output If you want to provide an answer, output a string of the form\n2 x y (1 \u2264 x, y \u2264 n, x \u2260 y), if you think the dishes x and y was among dishes\nordered by Noora. After that, flush the output and terminate your program.\nInteraction While helping Leha, you can ask queries to Noora no more than 60\ntimes. Each query should be printed in it's own line and have the form 1 x y\n(1 \u2264 x, y \u2264 n). You have to both print the end-of-line character and flush the\noutput. After flushing you should read the answer for this query from input.\nAfter each query jury's program will print one line \u00abTAK\u00bb or \u00abNIE\u00bb (without\nquotes) in input stream depending on the girl's answer. To flush you can use\n(just after printing an integer and end-of-line): fflush(stdout) in C++;\nSystem.out.flush() in Java; stdout.flush() in Python; flush(output) in Pascal;\nsee the documentation for other languages.Hacking For hacking you should write\nnumbers n and k (2 \u2264 k \u2264 n \u2264 10^5) in the first line and, for describing\ndishes Noora ordered, k different integers a1, a2, ..., ak (1 \u2264 ai \u2264 n),\nwritten in ascending order in the second line. Of course, solution you want to\nhack won't be able to read the numbers of ordered dishes. Example Input 3 2\nNIE TAK NIE TAK TAK TAK Output 1 1 2 1 2 1 1 1 3 1 3 1 1 2 3 1 3 2 2 2 3 Note\nThere are three dishes in sample. Noora ordered dished numberes 2 and 3, which\nLeha should guess. If Noora receive requests for the first dish (x = 1), then\nshe'll choose the second dish (a = 2) as the dish with the minimum value . For\nthe second (x = 2) and the third (x = 3) dishes themselves will be optimal,\nbecause in that case . Let Leha asks Noora about the next couple of dishes: x\n= 1, y = 2, then he'll recieve \u00abNIE\u00bb answer, because |1 - 2| > |2 - 2| x = 2,\ny = 1, then he'll recieve \u00abTAK\u00bb answer, because |2 - 2| \u2264 |1 - 2| x = 1, y =\n3, then he'll recieve \u00abNIE\u00bb answer, because |1 - 2| > |3 - 3| x = 3, y = 1,\nthen he'll recieve \u00abTAK\u00bb answer, because |3 - 3| \u2264 |1 - 2| x = 2, y = 3, then\nhe'll recieve \u00abTAK\u00bb answer, because |2 - 2| \u2264 |3 - 3| x = 3, y = 2, then he'll\nrecieve \u00abTAK\u00bb answer, because |3 - 3| \u2264 |2 - 2| According to the available\ninformation, it is possible to say that Nura ordered dishes with numbers 2 and\n3.\n\n",
        "cf_contest_id": 809,
        "cf_index": "B",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "interactive"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2\r\n2 3\r\n",
                ""
            ]
        ],
        "private_cases": [
            [
                "3 2\r\n1 2\r\n",
                ""
            ],
            [
                "4 4\r\n1 2 3 4\r\n",
                ""
            ],
            [
                "2 2\r\n1 2\r\n",
                ""
            ],
            [
                "8 3\r\n4 5 6\r\n",
                ""
            ],
            [
                "9 5\r\n2 3 4 5 6\r\n",
                ""
            ],
            [
                "58 9\r\n19 20 27 29 32 38 41 43 44\r\n",
                ""
            ],
            [
                "40 2\r\n38 39\r\n",
                ""
            ],
            [
                "55 48\r\n1 2 3 4 5 6 7 8 9 10 11 12 14 15 17 18 19 20 21 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 44 46 47 48 49 50 52 53 54\r\n",
                ""
            ],
            [
                "90013 16\r\n36089 36617 36652 37529 38041 38817 39704 39844 39922 40554 40884 41142 41560 41886 42121 42321\r\n",
                ""
            ],
            [
                "100000 6\r\n1503 12031 21360 34372 79100 82438\r\n",
                ""
            ],
            [
                "100000 42\r\n1105 2772 8754 9410 9501 17450 17839 21277 24464 25307 28930 33244 39095 39671 40070 40860 41644 43004 45477 51309 52212 52909 53681 54115 54919 61499 61861 62253 62638 63770 64540 66362 74255 80664 81016 83978 86101 86741 94918 97132 97179 98020\r\n",
                ""
            ],
            [
                "100000 17\r\n1436 3138 7274 8118 10293 12471 28771 37363 38656 45109 57097 79652 80272 94329 94826 97663 97727\r\n",
                ""
            ],
            [
                "100000 28\r\n133 632 1349 11870 11960 13552 19461 23978 27698 27899 30744 31378 35245 40002 51824 54116 63475 67183 67735 70859 71358 72478 75709 77131 83125 83958 90457 93013\r\n",
                ""
            ],
            [
                "100000 41\r\n4863 14322 15396 17150 17670 19742 20402 20902 24232 25647 29114 31621 33356 36559 39672 44137 48066 48546 51202 52291 52624 54919 57441 60580 63944 65168 70130 72225 75405 76258 81038 81859 83941 89486 91632 92111 94839 96100 96761 97783 99060\r\n",
                ""
            ],
            [
                "100000 21\r\n9857 21297 21355 22153 23191 26132 38425 39205 41616 42525 46068 46665 48992 57161 61274 66387 67322 67655 71137 88707 89482\r\n",
                ""
            ],
            [
                "100000 11\r\n14202 16150 18605 25564 27262 33089 53882 54948 55241 59817 98708\r\n",
                ""
            ],
            [
                "100000 31\r\n2400 3614 11859 27852 34763 38328 38767 41821 42535 44655 52319 53646 56787 58433 59343 59648 60988 61158 61287 62262 63052 64412 65614 67641 68331 71216 72285 74659 81780 91841 95299\r\n",
                ""
            ],
            [
                "100000 19\r\n3382 14320 21653 23760 31916 32543 45679 50275 50930 51943 54250 58320 60539 61927 64408 67572 71331 84537 98231\r\n",
                ""
            ],
            [
                "100000 16\r\n3098 3463 6688 8161 30790 33406 33609 38303 46821 54856 57917 61921 66006 70475 70665 74287\r\n",
                ""
            ],
            [
                "100000 2\r\n57324 97740\r\n",
                ""
            ],
            [
                "100000 28\r\n2921 17869 18257 21513 23345 26059 27922 28770 33202 37501 38344 44000 45651 47895 55251 62261 63654 65698 66019 69007 73198 76041 78788 80895 82802 83675 95396 95872\r\n",
                ""
            ],
            [
                "100000 23\r\n4283 13587 14258 16212 20050 22145 31007 31176 35028 46513 47447 52469 62166 62575 64366 66012 68407 79143 79784 80097 85493 98155 99343\r\n",
                ""
            ],
            [
                "100000 26\r\n11173 25174 25548 29338 30638 35004 36286 36512 37978 38534 40439 50190 50541 53465 55231 56333 62083 70168 71415 75990 77080 79913 82870 85947 94716 96726\r\n",
                ""
            ],
            [
                "100000 23\r\n489 1545 1712 10300 21322 22558 25388 25810 34916 35089 42233 43379 46355 53560 60390 64120 65582 67132 81651 86874 89214 91546 99532\r\n",
                ""
            ],
            [
                "100000 17\r\n707 8873 10777 20110 20154 33723 36670 42705 45097 50945 57478 60193 77492 84576 92673 96330 96934\r\n",
                ""
            ],
            [
                "100000 9\r\n4274 7003 25773 27446 46428 55494 73423 81990 84260\r\n",
                ""
            ],
            [
                "100000 16\r\n2250 7560 18895 29655 31887 33622 34206 34925 39751 49788 52882 71274 78748 82420 89645 90690\r\n",
                ""
            ],
            [
                "100000 14\r\n2349 21886 27785 30715 44674 47043 60583 61103 61401 67841 75860 81472 91063 99204\r\n",
                ""
            ],
            [
                "100000 19\r\n568 2670 9068 14542 16178 22094 23002 23588 32499 35572 41067 68808 79007 80843 84730 88411 90111 90584 97256\r\n",
                ""
            ],
            [
                "2 2\r\n1 2\r\n",
                ""
            ],
            [
                "3 2\r\n1 2\r\n",
                ""
            ],
            [
                "3 2\r\n1 3\r\n",
                ""
            ],
            [
                "10 2\r\n1 10\r\n",
                ""
            ],
            [
                "100000 2\r\n1 2\r\n",
                ""
            ],
            [
                "100000 2\r\n1 100000\r\n",
                ""
            ],
            [
                "100000 2\r\n1 99999\r\n",
                ""
            ],
            [
                "100000 2\r\n99999 100000\r\n",
                ""
            ],
            [
                "99999 2\r\n2 99998\r\n",
                ""
            ],
            [
                "100000 2\r\n228 229\r\n",
                ""
            ],
            [
                "100000 2\r\n2 99999\r\n",
                ""
            ],
            [
                "100000 3\r\n1 50000 100000\r\n",
                ""
            ],
            [
                "100000 2\r\n49999 50000\r\n",
                ""
            ],
            [
                "100000 2\r\n31313 31315\r\n",
                ""
            ],
            [
                "10 5\r\n3 4 7 8 9\r\n",
                ""
            ],
            [
                "11 5\r\n2 4 6 8 10\r\n",
                ""
            ],
            [
                "11 6\r\n1 3 5 7 9 11\r\n",
                ""
            ],
            [
                "100000 6\r\n33333 33334 33335 66665 66666 66667\r\n",
                ""
            ],
            [
                "100000 10\r\n1 2 3 4 5 99996 99997 99998 99999 100000\r\n",
                ""
            ],
            [
                "11 2\r\n5 11\r\n",
                ""
            ],
            [
                "5 2\r\n3 5\r\n",
                ""
            ],
            [
                "11 2\r\n1 10\r\n",
                ""
            ]
        ]
    }
]