[
    {
        "name": "Set or Decrease",
        "description": "You are given an integer array \n    a_1, a_2, \n    \u2026, a_n\n and integer\n\n    k\n. In one step you can either choose some index \n    i\n and decrease\n\n    a_i\n by one (make \n    a_i = a_i - 1\n); or choose two indices \n    i\n and\n\n    j\n and set \n    a_i\n equal to \n    a_j\n (make \n    a_i = a_j\n). What is\nthe minimum number of steps you need to make the sum of array\n\n    \u2211\n    _i=1^na_i\n    \u2264 k\n? (You are allowed to make values\nof array negative). Input The first line contains a single integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. The first line of\neach test case contains two integers \n    n\n and \n    k\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n; \n    1 \n    \u2264 k \n    \u2264 10^15\n) \u2014 the size of array \n    a\n\nand upper bound on its sum. The second line of each test case contains \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the\narray itself. It's guaranteed that the sum of \n    n\n over all test cases\ndoesn't exceed \n    2 \n    \u00b7 10^5\n. Output For each test case, print one\ninteger \u2014 the minimum number of steps to make\n\n    \u2211\n    _i=1^na_i\n    \u2264 k\n. Example Input 4 1 10 20 2 69 6 9\n7 8 1 2 1 3 1 2 1 10 1 1 2 3 1 2 6 1 6 8 10 Output 10 0 2 7 Note In the first\ntest case, you should decrease \n    a_1\n \n    10\n times to get the sum lower\nor equal to \n    k = 10\n. In the second test case, the sum of array \n    a\n is\nalready less or equal to \n    69\n, so you don't need to change it. In the\nthird test case, you can, for example: set \n    a_4 = a_3 = 1\n; decrease\n\n    a_4\n by one, and get \n    a_4 = 0\n. As a result, you'll get array \n    [1,\n    2, 1, 0, 1, 2, 1]\n with sum less or equal to \n    8\n in \n    1 + 1 = 2\n\nsteps.In the fourth test case, you can, for example: choose \n    a_7\n and\ndecrease in by one \n    3\n times; you'll get \n    a_7 = -2\n; choose \n    4\n\nelements \n    a_6\n, \n    a_8\n, \n    a_9\n and \n    a_10\n and them equal to\n\n    a_7 = -2\n. As a result, you'll get array \n    [1, 2, 3, 1, 2, -2, -2, -2,\n    -2, -2]\n with sum less or equal to \n    1\n in \n    3 + 4 = 7\n steps.\n\n",
        "cf_contest_id": 1622,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 10\r\n20\r\n2 69\r\n6 9\r\n7 8\r\n1 2 1 3 1 2 1\r\n10 1\r\n1 2 3 1 2 6 1 6 8 10\r\n",
                "10\r\n0\r\n2\r\n7\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n174 243\r\n7 7 1 5 9 8 7 5 8 6 10 4 9 3 5 3 2 10 5 9 10 3 5 2 2 6 8 9 2 6 7 6 10 4 9 8 8 9 5 1 9 1 2 7 1 10 8 6 4 6 2 4 10 4 4 3 9 8 2 2 6 9 8 2 5 9 5 2 9 6 9 4 10 9 10 5 8 2 10 7 6 10 4 5 3 4 3 1 10 5 8 2 2 3 3 1 2 9 7 9 5 9 4 4 10 7 10 5 8 8 6 2 6 10 2 8 10 6 4 4 1 5 2 4 6 3 6 7 1 2 3 4 1 10 9 10 2 1 2 4 10 10 2 7 2 6 2 1 10 1 4 3 2 8 4 1 1 9 7 10 2 5 2 4 2 5 6 7 3 1 9 8 1 10\r\n",
                "44\r\n"
            ],
            [
                "1\r\n91 734\r\n815 147 433 982 71 972 593 712 205 267 802 60 80 482 616 963 177 457 763 874 695 988 235 413 519 805 341 453 240 541 428 39 202 206 496 69 505 80 155 333 935 71 184 253 656 722 173 331 890 959 446 429 305 939 338 531 998 577 888 610 282 276 326 784 766 28 448 55 399 775 889 997 482 233 567 465 42 754 438 360 138 750 146 712 249 630 819 941 798 999 895\r\n",
                "107\r\n"
            ],
            [
                "1\r\n77 816\r\n131 139 214 578 23 543 45 617 821 886 910 646 883 517 929 804 72 151 349 472 511 413 28 434 969 58 239 672 349 261 137 87 362 462 193 587 979 846 814 164 30 305 863 487 515 994 389 177 439 928 905 455 481 583 444 221 872 947 715 532 569 945 344 340 244 158 189 767 179 342 399 239 508 105 370 621 150\r\n",
                "86\r\n"
            ],
            [
                "1\r\n95 902\r\n670 783 456 537 294 406 958 479 769 924 864 137 865 889 560 816 383 471 790 922 575 646 47 762 278 287 841 950 246 386 197 970 581 466 212 501 577 26 208 583 703 528 284 514 101 788 409 799 650 122 148 328 878 402 112 943 821 114 500 422 269 696 863 246 111 420 473 385 342 238 112 325 726 257 176 359 311 30 529 36 814 927 816 636 614 196 859 630 802 442 446 305 899 44 591\r\n",
                "108\r\n"
            ],
            [
                "1\r\n98 282\r\n103 948 349 26 241 933 394 571 476 785 441 397 658 308 801 940 760 29 717 343 99 341 389 797 955 322 662 763 654 781 933 185 622 960 363 84 786 998 331 572 236 837 553 874 376 362 649 482 860 718 54 298 574 987 16 943 71 292 615 829 460 301 358 245 585 438 24 561 151 416 88 81 86 571 805 67 862 698 811 772 389 185 798 799 469 547 109 474 72 128 717 893 38 928 741 644 641 625\r\n",
                "106\r\n"
            ],
            [
                "1\r\n77 340\r\n616 230 33 414 33 520 881 594 173 951 566 507 792 941 244 477 260 277 162 731 833 342 13 81 726 616 890 188 708 365 427 991 14 596 878 102 258 187 135 52 891 147 50 396 576 104 947 85 895 912 439 133 948 536 253 734 375 819 797 356 141 201 482 964 885 426 359 22 452 403 694 267 64 304 884 813 308\r\n",
                "81\r\n"
            ],
            [
                "1\r\n84 781\r\n403 867 729 928 240 410 849 95 651 852 230 209 358 596 576 230 924 448 288 19 680 470 839 107 931 809 347 903 399 185 840 326 338 758 584 385 862 140 256 537 677 195 593 349 588 452 771 995 853 27 765 878 312 93 411 846 537 426 593 288 506 167 721 84 189 213 490 958 937 522 171 563 995 166 258 408 638 107 720 553 318 758 302 8\r\n",
                "80\r\n"
            ],
            [
                "1\r\n15 11\r\n1 1 4 4 4 4 2 2 5 4 4 4 1 5 1\r\n",
                "8\r\n"
            ]
        ]
    }
]