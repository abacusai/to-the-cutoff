[
    {
        "name": "Hiring Staff",
        "description": "A new Berland businessman Vitaly is going to open a household appliances'\nstore. All he's got to do now is to hire the staff. The store will work seven\ndays a week, but not around the clock. Every day at least k people must work\nin the store. Berland has a law that determines the order of working days and\nnon-working days. Namely, each employee must work for exactly n consecutive\ndays, then rest for exactly m days, then work for n more days and rest for m\nmore, and so on. Vitaly doesn't want to break the law. Fortunately, there is a\nloophole: the law comes into force on the day when the employee is hired. For\nexample, if an employee is hired on day x, then he should work on days [x, x +\n1, ..., x + n - 1], [x + m + n, x + m + n + 1, ..., x + m + 2n - 1], and so\non. Day x can be chosen arbitrarily by Vitaly. There is one more thing: the\nkey to the store. Berland law prohibits making copies of keys, so there is\nonly one key. Vitaly is planning to entrust the key to the store employees. At\nthe same time on each day the key must be with an employee who works that day\n\u2014 otherwise on this day no one can get inside the store. During the day the\nkey holder can give the key to another employee, if he also works that day.\nThe key will handed to the first hired employee at his first working day. Each\nemployee has to be paid salary. Therefore, Vitaly wants to hire as few\nemployees as possible provided that the store can operate normally on each day\nfrom 1 to infinity. In other words, on each day with index from 1 to infinity,\nthe store must have at least k working employees, and one of the working\nemployees should have the key to the store. Help Vitaly and determine the\nminimum required number of employees, as well as days on which they should be\nhired. Input The first line contains three integers n, m and k (1 \u2264 m \u2264 n \u2264\n1000, n \u2260 1, 1 \u2264 k \u2264 1000). Output In the first line print a single integer z\n\u2014 the minimum required number of employees. In the second line print z\npositive integers, separated by spaces: the i-th integer ai (1 \u2264 ai \u2264 10^4)\nshould represent the number of the day, on which Vitaly should hire the i-th\nemployee. If there are multiple answers, print any of them. Examples Input 4 3\n2 Output 4 1 1 4 5 Input 3 3 1 Output 3 1 3 5\n\n",
        "cf_contest_id": 216,
        "cf_index": "C",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 3 2\r\n",
                "4\n1 1 4 5\n"
            ],
            [
                "3 3 1\r\n",
                "3\n1 3 5\n"
            ]
        ],
        "private_cases": [
            [
                "5 5 3\r\n",
                "7\n1 1 1 5 6 6 10\n"
            ],
            [
                "7 6 8\r\n",
                "16\n1 1 1 1 1 1 1 1 7 8 8 8 8 8 8 8\n"
            ],
            [
                "8 3 2\r\n",
                "4\n1 1 8 9\n"
            ],
            [
                "5 1 1\r\n",
                "2\n1 5\n"
            ],
            [
                "6 5 1\r\n",
                "3\n1 6 11\n"
            ],
            [
                "2 1 1\r\n",
                "3\n1 2 3\n"
            ],
            [
                "2 2 1\r\n",
                "4\n1 2 3 4\n"
            ],
            [
                "3 1 1\r\n",
                "2\n1 3\n"
            ],
            [
                "3 2 1\r\n",
                "3\n1 3 5\n"
            ],
            [
                "3 3 1\r\n",
                "3\n1 3 5\n"
            ],
            [
                "4 1 1\r\n",
                "2\n1 4\n"
            ],
            [
                "4 2 1\r\n",
                "2\n1 4\n"
            ],
            [
                "4 3 1\r\n",
                "3\n1 4 7\n"
            ],
            [
                "4 4 1\r\n",
                "3\n1 4 7\n"
            ],
            [
                "183 1 1\r\n",
                "2\n1 183\n"
            ],
            [
                "284 282 1\r\n",
                "2\n1 284\n"
            ],
            [
                "359 358 1\r\n",
                "3\n1 359 717\n"
            ],
            [
                "801 801 1\r\n",
                "3\n1 801 1601\n"
            ],
            [
                "1000 1 1\r\n",
                "2\n1 1000\n"
            ],
            [
                "1000 999 1\r\n",
                "3\n1 1000 1999\n"
            ],
            [
                "1000 1000 1\r\n",
                "3\n1 1000 1999\n"
            ],
            [
                "2 1 2\r\n",
                "4\n1 1 2 3\n"
            ],
            [
                "2 2 2\r\n",
                "5\n1 1 2 3 4\n"
            ],
            [
                "3 1 2\r\n",
                "4\n1 1 3 4\n"
            ],
            [
                "3 2 2\r\n",
                "4\n1 1 3 4\n"
            ],
            [
                "3 3 2\r\n",
                "5\n1 1 3 4 6\n"
            ],
            [
                "4 1 2\r\n",
                "4\n1 1 4 5\n"
            ],
            [
                "4 2 2\r\n",
                "4\n1 1 4 5\n"
            ],
            [
                "4 3 2\r\n",
                "4\n1 1 4 5\n"
            ],
            [
                "4 4 2\r\n",
                "5\n1 1 4 5 8\n"
            ],
            [
                "17 1 3\r\n",
                "6\n1 1 1 17 18 18\n"
            ],
            [
                "38 15 10\r\n",
                "20\n1 1 1 1 1 1 1 1 1 1 38 39 39 39 39 39 39 39 39 39\n"
            ],
            [
                "1000 1 2\r\n",
                "4\n1 1 1000 1001\n"
            ],
            [
                "1000 485 2\r\n",
                "4\n1 1 1000 1001\n"
            ],
            [
                "1000 999 2\r\n",
                "4\n1 1 1000 1001\n"
            ],
            [
                "1000 1000 2\r\n",
                "5\n1 1 1000 1001 2000\n"
            ],
            [
                "2 2 5\r\n",
                "11\n1 1 1 1 1 2 3 3 3 3 4\n"
            ]
        ]
    }
]