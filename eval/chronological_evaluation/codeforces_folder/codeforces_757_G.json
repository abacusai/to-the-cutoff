[
    {
        "name": "Can Bash Save the Day?",
        "description": "Whoa! You did a great job helping Team Rocket who managed to capture all the\nPokemons sent by Bash. Meowth, part of Team Rocket, having already mastered\nthe human language, now wants to become a master in programming as well. He\nagrees to free the Pokemons if Bash can answer his questions. Initially,\nMeowth gives Bash a weighted tree containing n nodes and a sequence a1, a2...,\nan which is a permutation of 1, 2, ..., n. Now, Mewoth makes q queries of one\nof the following forms: 1 l r v: meaning Bash should report , where dist(a, b)\nis the length of the shortest path from node a to node b in the given tree. 2\nx: meaning Bash should swap ax and ax + 1 in the given sequence. This new\nsequence is used for later queries. Help Bash to answer the questions! Input\nThe first line contains two integers n and q (1 \u2264 n \u2264 2\u00b710^5, 1 \u2264 q \u2264 2\u00b710^5)\n\u2014 the number of nodes in the tree and the number of queries, respectively. The\nnext line contains n space-separated integers \u2014 the sequence a1, a2, ..., an\nwhich is a permutation of 1, 2, ..., n. Each of the next n - 1 lines contain\nthree space-separated integers u, v, and w denoting that there exists an\nundirected edge between node u and node v of weight w, (1 \u2264 u, v \u2264 n, u \u2260 v, 1\n\u2264 w \u2264 10^6). It is guaranteed that the given graph is a tree. Each query\nconsists of two lines. First line contains single integer t, indicating the\ntype of the query. Next line contains the description of the query: t = 1:\nSecond line contains three integers a, b and c (1 \u2264 a, b, c < 2^30) using\nwhich l, r and v can be generated using the formula given below: , , . t = 2:\nSecond line contains single integer a (1 \u2264 a < 2^30) using which x can be\ngenerated using the formula given below: . The ansi is the answer for the i-th\nquery, assume that ans0 = 0. If the i-th query is of type 2 then ansi = ansi -\n1. It is guaranteed that: for each query of type 1: 1 \u2264 l \u2264 r \u2264 n, 1 \u2264 v \u2264 n,\nfor each query of type 2: 1 \u2264 x \u2264 n - 1. The operation means bitwise exclusive\nOR. Output For each query of type 1, output a single integer in a separate\nline, denoting the answer to the query. Example Input 5 5 4 5 1 3 2 4 2 4 1 3\n9 4 1 4 4 5 2 1 1 5 4 1 22 20 20 2 38 2 39 1 36 38 38 Output 23 37 28 Note In\nthe sample, the actual queries are the following: 1 1 5 4 1 1 3 3 2 3 2 2 1 1\n3 3\n\n",
        "cf_contest_id": 757,
        "cf_index": "G",
        "cf_rating": 3400,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "divide and conquer",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 768.0,
        "public_cases": [
            [
                "5 5\r\n4 5 1 3 2\r\n4 2 4\r\n1 3 9\r\n4 1 4\r\n4 5 2\r\n1\r\n1 5 4\r\n1\r\n22 20 20\r\n2\r\n38\r\n2\r\n39\r\n1\r\n36 38 38\r\n",
                "23\r\n37\r\n28\r\n"
            ]
        ],
        "private_cases": [
            [
                "19 12\r\n3 2 15 4 18 13 5 17 7 12 10 14 16 19 8 9 11 6 1\r\n6 3 665\r\n13 4 734\r\n11 5 449\r\n11 6 801\r\n17 7 943\r\n9 8 118\r\n14 9 781\r\n2 10 811\r\n18 2 822\r\n1 12 209\r\n11 13 961\r\n19 14 383\r\n17 15 810\r\n18 16 147\r\n18 17 499\r\n11 18 117\r\n1 11 265\r\n1 19 509\r\n1\r\n9 11 19\r\n1\r\n5574 5572 5588\r\n1\r\n6154 6150 6145\r\n1\r\n31527 31537 31520\r\n2\r\n24461\r\n2\r\n24470\r\n1\r\n24470 24471 24470\r\n2\r\n1310\r\n2\r\n1311\r\n1\r\n1306 1284 1298\r\n1\r\n7177 7187 7187\r\n1\r\n10351 10347 10345\r\n",
                "5575\r\n6153\r\n31522\r\n24452\r\n1300\r\n7171\r\n10350\r\n11738\r\n"
            ],
            [
                "19 16\r\n17 3 12 2 13 1 15 14 5 11 7 10 16 19 9 18 4 8 6\r\n5 1 496\r\n6 3 247\r\n13 5 973\r\n7 10 794\r\n6 12 145\r\n4 6 232\r\n8 4 499\r\n11 8 114\r\n11 14 644\r\n2 11 348\r\n16 2 901\r\n16 15 978\r\n9 18 807\r\n17 9 910\r\n16 17 268\r\n7 16 152\r\n13 7 869\r\n13 19 990\r\n1\r\n3 18 6\r\n1\r\n38329 38335 38331\r\n1\r\n9575 9574 9593\r\n2\r\n1010\r\n2\r\n1005\r\n2\r\n1008\r\n2\r\n1010\r\n2\r\n1004\r\n2\r\n1022\r\n2\r\n1017\r\n1\r\n1023 1017 1020\r\n1\r\n9682 9685 9673\r\n2\r\n18247\r\n1\r\n18266 18247 18264\r\n1\r\n16835 16833 16859\r\n1\r\n4207 4200 4203\r\n",
                "38330\r\n9589\r\n1021\r\n9691\r\n18262\r\n16842\r\n4199\r\n19299\r\n"
            ],
            [
                "7 17\r\n3 4 5 6 2 1 7\r\n1 2 781\r\n5 3 352\r\n5 6 120\r\n4 5 840\r\n1 4 692\r\n1 7 615\r\n1\r\n5 5 5\r\n2\r\n2312\r\n2\r\n2315\r\n1\r\n2312 2316 2314\r\n2\r\n4682\r\n2\r\n4685\r\n2\r\n4687\r\n1\r\n4682 4687 4685\r\n1\r\n4934 4928 4935\r\n2\r\n3491\r\n1\r\n3495 3495 3494\r\n2\r\n3\r\n2\r\n5\r\n1\r\n4 7 5\r\n1\r\n4028 4025 4028\r\n2\r\n5513\r\n2\r\n5512\r\n",
                "2313\r\n4681\r\n4932\r\n3489\r\n0\r\n4031\r\n5516\r\n"
            ],
            [
                "11 1\r\n9 6 10 11 1 3 2 4 5 8 7\r\n10 1 184\r\n9 4 478\r\n9 6 875\r\n8 10 437\r\n5 8 435\r\n2 5 275\r\n7 2 90\r\n9 7 311\r\n3 9 10\r\n3 11 706\r\n1\r\n3 8 5\r\n",
                "5435\r\n"
            ],
            [
                "19 1\r\n7 6 3 4 8 17 12 11 14 19 10 15 18 9 13 5 1 16 2\r\n11 3 917\r\n2 5 952\r\n6 2 565\r\n1 8 55\r\n6 11 339\r\n6 14 309\r\n7 15 260\r\n1 7 479\r\n17 16 366\r\n12 17 245\r\n10 12 860\r\n13 10 662\r\n13 18 479\r\n9 13 320\r\n4 9 303\r\n1 4 907\r\n6 1 19\r\n6 19 158\r\n2\r\n1\r\n",
                ""
            ]
        ]
    }
]