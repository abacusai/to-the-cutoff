[
    {
        "name": "Jury Meeting",
        "description": "\n    n\n people gathered to hold a jury meeting of the upcoming competition,\nthe \n    i\n-th member of the jury came up with \n    a_i\n tasks, which they\nwant to share with each other. First, the jury decides on the order which they\nwill follow while describing the tasks. Let that be a permutation \n    p\n of\nnumbers from \n    1\n to \n    n\n (an array of size \n    n\n where each integer\nfrom \n    1\n to \n    n\n occurs exactly once). Then the discussion goes as\nfollows: If a jury member \n    p_1\n has some tasks left to tell, then they\ntell one task to others. Otherwise, they are skipped. If a jury member\n\n    p_2\n has some tasks left to tell, then they tell one task to others.\nOtherwise, they are skipped. ... If a jury member \n    p_n\n has some tasks\nleft to tell, then they tell one task to others. Otherwise, they are skipped.\nIf there are still members with tasks left, then the process repeats from the\nstart. Otherwise, the discussion ends. A permutation \n    p\n is nice if none\nof the jury members tell two or more of their own tasks in a row. Count the\nnumber of nice permutations. The answer may be really large, so print it\nmodulo \n    998\n     244\n     353\n. Input The first line contains a single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. The first\nline of the test case contains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n) \u2014 number of jury members. The second line contains \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the\nnumber of problems that the \n    i\n-th member of the jury came up with. The\nsum of \n    n\n over all test cases does not exceed \n    2 \n    \u00b7 10^5\n.\nOutput For each test case, print one integer \u2014 the number of nice\npermutations, taken modulo \n    998\n     244\n     353\n. Example Input 4 2 1 2 3 5\n5 5 4 1 3 3 7 6 3 4 2 1 3 3 Output 1 6 0 540 Note Explanation of the first\ntest case from the example: There are two possible permutations, \n    p = [1,\n    2]\n and \n    p = [2, 1]\n. For \n    p = [1, 2]\n, the process is the\nfollowing: the first jury member tells a task; the second jury member tells a\ntask; the first jury member doesn't have any tasks left to tell, so they are\nskipped; the second jury member tells a task. So, the second jury member has\ntold two tasks in a row (in succession), so the permutation is not nice. For\n\n    p = [2, 1]\n, the process is the following: the second jury member tells a\ntask; the first jury member tells a task; the second jury member tells a task.\nSo, this permutation is nice.\n\n",
        "cf_contest_id": 1569,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2\r\n1 2\r\n3\r\n5 5 5\r\n4\r\n1 3 3 7\r\n6\r\n3 4 2 1 3 3\r\n",
                "1\r\n6\r\n0\r\n540\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n74\r\n9 3 10 8 6 6 1 6 9 3 7 3 2 8 1 5 8 4 6 4 1 6 5 6 10 3 6 6 6 4 9 5 8 7 2 1 6 2 4 9 10 9 5 4 7 5 7 2 10 10 1 5 2 4 1 7 7 3 8 10 2 5 8 4 3 9 2 9 9 8 6 8 4 1\r\n",
                "420779088\r\n"
            ],
            [
                "1\r\n3\r\n11 11 154\r\n",
                "0\r\n"
            ]
        ]
    }
]