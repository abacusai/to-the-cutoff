[
    {
        "name": "Counting Rectangles is Fun",
        "description": "There is an n \u00d7 m rectangular grid, each cell of the grid contains a single\ninteger: zero or one. Let's call the cell on the i-th row and the j-th column\nas (i, j). Let's define a \"rectangle\" as four integers a, b, c, d (1 \u2264 a \u2264 c \u2264\nn; 1 \u2264 b \u2264 d \u2264 m). Rectangle denotes a set of cells of the grid (x, y) : a \u2264\nx \u2264 c, b \u2264 y \u2264 d. Let's define a \"good rectangle\" as a rectangle that\nincludes only the cells with zeros. You should answer the following q queries:\ncalculate the number of good rectangles all of which cells are in the given\nrectangle. Input There are three integers in the first line: n, m and q (1 \u2264\nn, m \u2264 40, 1 \u2264 q \u2264 3\u00b710^5). Each of the next n lines contains m characters \u2014\nthe grid. Consider grid rows are numbered from top to bottom, and grid columns\nare numbered from left to right. Both columns and rows are numbered starting\nfrom 1. Each of the next q lines contains a query \u2014 four integers that\ndescribe the current rectangle, a, b, c, d (1 \u2264 a \u2264 c \u2264 n; 1 \u2264 b \u2264 d \u2264 m).\nOutput For each query output an answer \u2014 a single integer in a separate line.\nExamples Input 5 5 5 00101 00000 00001 01000 00001 1 2 2 4 4 5 4 5 1 2 5 2 2 2\n4 5 4 2 5 3 Output 10 1 7 34 5 Input 4 7 5 0000100 0000010 0011000 0000000 1 7\n2 7 3 1 3 1 2 3 4 5 1 2 2 7 2 2 4 7 Output 3 1 16 27 52 Note For the first\nexample, there is a 5 \u00d7 5 rectangular grid, and the first, the second, and the\nthird queries are represented in the following image. For the first query,\nthere are 10 good rectangles, five 1 \u00d7 1, two 2 \u00d7 1, two 1 \u00d7 2, and one 1 \u00d7 3.\nFor the second query, there is only one 1 \u00d7 1 good rectangle. For the third\nquery, there are 7 good rectangles, four 1 \u00d7 1, two 2 \u00d7 1, and one 3 \u00d7 1.\n\n",
        "cf_contest_id": 372,
        "cf_index": "B",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "divide and conquer",
            "dp"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 5 5\r\n00101\r\n00000\r\n00001\r\n01000\r\n00001\r\n1 2 2 4\r\n4 5 4 5\r\n1 2 5 2\r\n2 2 4 5\r\n4 2 5 3\r\n",
                "10\r\n1\r\n7\r\n34\r\n5\r\n"
            ],
            [
                "4 7 5\r\n0000100\r\n0000010\r\n0011000\r\n0000000\r\n1 7 2 7\r\n3 1 3 1\r\n2 3 4 5\r\n1 2 2 7\r\n2 2 4 7\r\n",
                "3\r\n1\r\n16\r\n27\r\n52\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 10 10\r\n0010001010\r\n0011011010\r\n0100001110\r\n0010100000\r\n0000100011\r\n0100000001\r\n0000010100\r\n1000000010\r\n0000010000\r\n0110010000\r\n1 1 4 6\r\n2 6 3 10\r\n1 6 3 9\r\n6 5 8 5\r\n2 3 6 8\r\n4 7 5 8\r\n3 1 9 5\r\n2 5 4 10\r\n2 3 3 6\r\n7 4 9 5\r\n",
                "42\r\n5\r\n5\r\n6\r\n79\r\n9\r\n151\r\n27\r\n12\r\n18\r\n"
            ],
            [
                "10 10 10\r\n0001000111\r\n1101000111\r\n1100101111\r\n1011101011\r\n1011110101\r\n1110101110\r\n1101101111\r\n1111111100\r\n0110101110\r\n1011101011\r\n6 3 7 9\r\n2 6 8 7\r\n9 7 10 8\r\n3 1 5 9\r\n1 6 9 10\r\n6 3 8 8\r\n1 6 9 10\r\n5 6 8 10\r\n8 8 10 8\r\n9 6 9 10\r\n",
                "5\r\n12\r\n1\r\n12\r\n29\r\n5\r\n29\r\n9\r\n1\r\n2\r\n"
            ],
            [
                "3 2 8\r\n01\r\n00\r\n00\r\n3 2 3 2\r\n1 1 2 1\r\n2 1 3 1\r\n2 2 3 2\r\n1 1 2 2\r\n1 1 1 2\r\n1 1 3 1\r\n1 1 2 2\r\n",
                "1\r\n3\r\n3\r\n3\r\n5\r\n1\r\n6\r\n5\r\n"
            ],
            [
                "2 3 8\r\n000\r\n001\r\n1 1 2 2\r\n1 3 2 3\r\n2 2 2 3\r\n1 1 2 2\r\n2 3 2 3\r\n2 1 2 2\r\n1 2 1 3\r\n1 2 2 2\r\n",
                "9\r\n1\r\n1\r\n9\r\n0\r\n3\r\n3\r\n3\r\n"
            ]
        ]
    }
]