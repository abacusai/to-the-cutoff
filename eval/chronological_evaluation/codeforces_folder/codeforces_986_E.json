[
    {
        "name": "Prince's Problem",
        "description": "Let the main characters of this problem be personages from some recent movie.\nNew Avengers seem to make a lot of buzz. I didn't watch any part of the\nfranchise and don't know its heroes well, but it won't stop me from using them\nin this problem statement. So, Thanos and Dr. Strange are doing their\nsuperhero and supervillain stuff, but then suddenly they stumble across a\nregular competitive programming problem. You are given a tree with \n    n\n\nvertices. In each vertex \n    v\n there is positive integer \n    a_v\n. You\nhave to answer \n    q\n queries. Each query has a from \n    u\n \n    v\n \n    x\n.\nYou have to calculate \n    \u220f_w \n    \u2208 P gcd(x, a_w) \n     (10^9 +\n    7)\n, where \n    P\n is a set of vertices on path from \n    u\n to \n    v\n. In\nother words, you are to calculate the product of \n    gcd(x, a_w)\n for all\nvertices \n    w\n on the path from \n    u\n to \n    v\n. As it might be large,\ncompute it modulo \n    10^9+7\n. Here \n    gcd(s, t)\n denotes the greatest\ncommon divisor of \n    s\n and \n    t\n. Note that the numbers in vertices do\nnot change after queries. I suppose that you are more interested in superhero\nbusiness of Thanos and Dr. Strange than in them solving the problem. So you\nare invited to solve this problem instead of them. Input In the first line of\ninput there is one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the size\nof the tree. In the next \n    n-1\n lines the edges of the tree are described.\nThe \n    i\n-th edge is described with two integers \n    u_i\n and \n    v_i\n\n(\n    1 \n    \u2264 u_i, v_i\n    \u2264 n\n) and it connects the vertices \n    u_i\n\nand \n    v_i\n. It is guaranteed that graph with these edges is a tree. In\nthe next line there are \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1\n    \n    \u2264 a_v\n    \u2264 10^7\n). In the next line there is one integer \n    q\n\n(\n    1 \n    \u2264 q \n    \u2264 10^5\n) \u2014 the number of queries. And in the next\n\n    q\n lines the queries are described. Each query is described with three\nintegers \n    u_i\n, \n    v_i\n and \n    x_i\n (\n    1 \n    \u2264 u_i, v_i\n    \u2264 n\n, \n    1 \n    \u2264 x_i\n    \u2264 10^7\n). Output Print \n    q\n numbers \u2014\nthe answers to the queries in the order they are given in the input. Print\neach answer modulo \n    10^9+7 = 1000000007\n. Print each number on a separate\nline. Examples Input 4 1 2 1 3 1 4 6 4 9 5 3 2 3 6 2 3 2 3 4 7 Output 36 4 1\nInput 6 1 2 2 3 2 4 1 5 5 6 100000 200000 500000 40000 800000 250000 3 3 5\n10000000 6 2 3500000 4 1 64000 Output 196000 12250 999998215\n\n",
        "cf_contest_id": 986,
        "cf_index": "E",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "math",
            "number theory",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4\r\n1 2\r\n1 3\r\n1 4\r\n6 4 9 5\r\n3\r\n2 3 6\r\n2 3 2\r\n3 4 7\r\n",
                "36\r\n4\r\n1\r\n"
            ],
            [
                "6\r\n1 2\r\n2 3\r\n2 4\r\n1 5\r\n5 6\r\n100000 200000 500000 40000 800000 250000\r\n3\r\n3 5 10000000\r\n6 2 3500000\r\n4 1 64000\r\n",
                "196000\r\n12250\r\n999998215\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n8 9\r\n9 10\r\n10 1\r\n10 7\r\n8 3\r\n7 5\r\n1 6\r\n6 2\r\n9 4\r\n34992 7077888 600000 294912 50625 4500 524880 720 300 1728000\r\n10\r\n8 10 162000\r\n4 1 9765625\r\n4 6 324000\r\n2 2 4800000\r\n8 10 3145728\r\n9 5 7290000\r\n4 7 109350\r\n9 9 8\r\n7 2 110592\r\n3 6 23328\r\n",
                "663999923\r\n3125\r\n19063094\r\n1536\r\n884736\r\n665192177\r\n716149447\r\n4\r\n644491483\r\n677604447\r\n"
            ],
            [
                "10\r\n5 9\r\n5 7\r\n5 3\r\n5 6\r\n5 4\r\n5 8\r\n9 1\r\n5 2\r\n5 10\r\n182250 18750 5832 4718592 8100 125000 500 810000 2700 839808\r\n10\r\n7 5 393216\r\n3 8 3125\r\n5 4 225000\r\n7 9 288000\r\n9 3 2211840\r\n6 3 164025\r\n4 6 80000\r\n8 7 291600\r\n3 1 6400\r\n8 7 25000\r\n",
                "48\r\n15625\r\n64800\r\n405000000\r\n62985600\r\n36905625\r\n64000000\r\n243999818\r\n4000000\r\n250000000\r\n"
            ],
            [
                "10\r\n3 1\r\n3 8\r\n3 7\r\n3 6\r\n3 10\r\n3 2\r\n1 9\r\n3 5\r\n8 4\r\n262144 3125 15552 116640 3456000 2592000 20480 655360 1406250 108000\r\n10\r\n10 7 6000\r\n1 9 72000\r\n8 2 6328125\r\n9 9 4320000\r\n7 4 8100000\r\n2 10 8294400\r\n2 7 50625\r\n10 7 4320000\r\n7 2 6\r\n4 4 8\r\n",
                "23040000\r\n144000\r\n1265625\r\n11250\r\n963385987\r\n799359986\r\n253125\r\n878718334\r\n12\r\n8\r\n"
            ],
            [
                "5\r\n1 5\r\n1 4\r\n5 2\r\n4 3\r\n113027 24148 589022 694809 298065\r\n1\r\n5 1 599412\r\n",
                "3\r\n"
            ]
        ]
    }
]