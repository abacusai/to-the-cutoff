[
    {
        "name": "Tea Tasting",
        "description": "A tea manufacturer decided to conduct a massive tea tasting. \n    n\n sorts of\ntea will be tasted by \n    n\n tasters. Both the sorts of tea and the tasters\nare numbered from \n    1\n to \n    n\n. The manufacturer prepared \n    a_i\n\nmilliliters of the \n    i\n-th sort of tea. The \n    j\n-th taster can drink\n\n    b_j\n milliliters of tea at once. The tasting will be conducted in steps.\nDuring the first step, the \n    i\n-th taster tastes the \n    i\n-th sort of\ntea. The \n    i\n-th taster drinks \n    min(a_i, b_i)\n tea (how much is\navailable of the \n    i\n-th sort and how much the \n    i\n-th taster can\ndrink). \n    a_i\n also decreases by this amount. Then all tasters move to the\nprevious sort of tea. Thus, during the second step, the \n    i\n-th taster\ntastes the \n    (i-1)\n-st sort of tea. The \n    i\n-th taster drinks\n\n    min(a_i-1, b_i)\n tea. The \n    1\n-st person ends the tasting. During\nthe third step, the \n    i\n-th taster tastes the \n    (i-2)\n-nd sort of tea.\nThe \n    2\n-nd taster ends the tasting. This goes on until everyone ends the\ntasting. Take a look at the tasting process for \n    n = 3\n, \n    a = [10, 20,\n    15]\n, \n    b = [9, 8, 6]\n. In the left row, there are the current amounts of\neach sort of tea. In the right column, there are current amounts of tea each\ntaster has drunk in total. The arrow tells which taster each tea goes to on\nthe current step. The number on the arrow is the amount \u2014 minimum of how much\nis available of the sort of tea and how much the taster can drink. For each\ntaster, print how many milliliters of tea he/she will drink in total. Input\nThe first line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n)\n\u2014 the number of testcases. The first line of each testcase contains a single\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of sorts\nof tea and the number of tasters. The second line contains \n    n\n integers\n\n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the amount of\neach sort of tea. The third line contains \n    n\n integers \n    b_1, b_2,\n    \n    \u2026, b_n\n (\n    1 \n    \u2264 b_i \n    \u2264 10^9\n) \u2014 the amount of tea each taster\ncan drink at once. The sum of \n    n\n over all testcases doesn't exceed \n    2\n    \n    \u00b7 10^5\n. Output For each testcase, print \n    n\n integers \u2014 the\n\n    i\n-th value should be equal to the total amount of tea the \n    i\n-th\ntaster will drink. Example Input 4 3 10 20 15 9 8 6 1 5 7 4 13 8 5 4 3 4 2 1 3\n1000000000 1000000000 1000000000 1 1 1000000000 Output 9 9 12 5 3 8 6 4 1 2\n2999999997 Note The first testcase is described in the statement. Here are the\nremaining amounts of each sort of tea after each step and the total amount of\ntea each taster has drunk: \n    a = [1, 12, 9]\n, \n    \ud835\udc4e\ud835\udc5b\ud835\udc60 = [9, 8,\n    6]\n \n    a = [0, 6, 9]\n, \n    \ud835\udc4e\ud835\udc5b\ud835\udc60 = [9, 9, 12]\n \n    a = [0, 6,\n    9]\n, \n    \ud835\udc4e\ud835\udc5b\ud835\udc60 = [9, 9, 12]\n In the second testcase, the only\ntaster drinks \n    min(5, 7)\n milliliters of tea of the only sort. Here are\nthe remaining amounts of each sort of tea after each step and the total amount\nof tea each taster has drunk for the third testcase: \n    a = [10, 4, 3, 3]\n,\n\n    \ud835\udc4e\ud835\udc5b\ud835\udc60 = [3, 4, 2, 1]\n; \n    a = [6, 2, 2, 3]\n, \n    \ud835\udc4e\ud835\udc5b\ud835\udc60\n    = [3, 8, 4, 2]\n; \n    a = [4, 1, 2, 3]\n, \n    \ud835\udc4e\ud835\udc5b\ud835\udc60 = [3, 8, 6,\n    3]\n; \n    a = [3, 1, 2, 3]\n, \n    \ud835\udc4e\ud835\udc5b\ud835\udc60 = [3, 8, 6, 4]\n. Here are\nthe remaining amounts of each sort of tea after each step and the total amount\nof tea each taster has drunk for the fourth testcase: \n    a = [999999999,\n    999999999, 0]\n, \n    \ud835\udc4e\ud835\udc5b\ud835\udc60 = [1, 1, 1000000000]\n; \n    a =\n    [999999998, 0, 0]\n, \n    \ud835\udc4e\ud835\udc5b\ud835\udc60 = [1, 2, 1999999999]\n; \n    a = [0, 0,\n    0]\n, \n    \ud835\udc4e\ud835\udc5b\ud835\udc60 = [1, 2, 2999999997]\n.\n\n",
        "cf_contest_id": 1795,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3\r\n10 20 15\r\n9 8 6\r\n1\r\n5\r\n7\r\n4\r\n13 8 5 4\r\n3 4 2 1\r\n3\r\n1000000000 1000000000 1000000000\r\n1 1 1000000000\r\n",
                "9\r\n9\r\n12\r\n5\r\n3\r\n8\r\n6\r\n4\r\n1\r\n2\r\n2999999997\r\n"
            ]
        ],
        "private_cases": []
    }
]