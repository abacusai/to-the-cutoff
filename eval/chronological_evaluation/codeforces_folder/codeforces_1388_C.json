[
    {
        "name": "Uncle Bogdan and Country Happiness",
        "description": "Uncle Bogdan is in captain Flint's crew for a long time and sometimes gets\nnostalgic for his homeland. Today he told you how his country introduced a\nhappiness index. There are \n    n\n cities and \n    n\u22121\n undirected roads\nconnecting pairs of cities. Citizens of any city can reach any other city\ntraveling by these roads. Cities are numbered from \n    1\n to \n    n\n and the\ncity \n    1\n is a capital. In other words, the country has a tree structure.\nThere are \n    m\n citizens living in the country. A \n    p_i\n people live in\nthe \n    i\n-th city but all of them are working in the capital. At evening all\ncitizens return to their home cities using the shortest paths. Every person\nhas its own mood: somebody leaves his workplace in good mood but somebody are\nalready in bad mood. Moreover any person can ruin his mood on the way to the\nhometown. If person is in bad mood he won't improve it. Happiness detectors\nare installed in each city to monitor the happiness of each person who visits\nthe city. The detector in the \n    i\n-th city calculates a happiness index\n\n    h_i\n as the number of people in good mood minus the number of people in\nbad mood. Let's say for the simplicity that mood of a person doesn't change\ninside the city. Happiness detector is still in development, so there is a\nprobability of a mistake in judging a person's happiness. One late evening,\nwhen all citizens successfully returned home, the government asked uncle\nBogdan (the best programmer of the country) to check the correctness of the\ncollected happiness indexes. Uncle Bogdan successfully solved the problem. Can\nyou do the same? More formally, You need to check: \"Is it possible that, after\nall people return home, for each city \n    i\n the happiness index will be\nequal exactly to \n    h_i\n\". Input The first line contains a single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 10000\n) \u2014 the number of test cases. The first\nline of each test case contains two integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n\n    \n    \u2264 10^5\n; \n    0 \n    \u2264 m \n    \u2264 10^9\n) \u2014 the number of cities and\ncitizens. The second line of each test case contains \n    n\n integers \n    p_1,\n    p_2, \n    \u2026, p_n\n (\n    0 \n    \u2264 p_i \n    \u2264 m\n; \n    p_1 + p_2 + \n    \u2026 +\n    p_n = m\n), where \n    p_i\n is the number of people living in the\n\n    i\n-th city. The third line contains \n    n\n integers \n    h_1, h_2,\n    \n    \u2026, h_n\n (\n    -10^9 \n    \u2264 h_i \n    \u2264 10^9\n), where \n    h_i\n is the\ncalculated happiness index of the \n    i\n-th city. Next \n    n \u2212 1\n lines\ncontain description of the roads, one per line. Each line contains two\nintegers \n    x_i\n and \n    y_i\n (\n    1 \n    \u2264 x_i, y_i \n    \u2264 n\n; \n    x_i\n    \n    \u2260 y_i\n), where \n    x_i\n and \n    y_i\n are cities connected by the\n\n    i\n-th road. It's guaranteed that the sum of \n    n\n from all test cases\ndoesn't exceed \n    2 \n    \u00b7 10^5\n. Output For each test case, print YES, if\nthe collected data is correct, or NO \u2014 otherwise. You can print characters in\nYES or NO in any case. Examples Input 2 7 4 1 0 1 1 0 1 0 4 0 0 -1 0 -1 0 1 2\n1 3 1 4 3 5 3 6 3 7 5 11 1 2 5 2 1 -11 -2 -6 -2 -1 1 2 1 3 1 4 3 5 Output YES\nYES Input 2 4 4 1 1 1 1 4 1 -3 -1 1 2 1 3 1 4 3 13 3 3 7 13 1 4 1 2 1 3 Output\nNO NO Note Let's look at the first test case of the first sample: At first,\nall citizens are in the capital. Let's describe one of possible scenarios: a\nperson from city \n    1\n: he lives in the capital and is in good mood; a\nperson from city \n    4\n: he visited cities \n    1\n and \n    4\n, his mood was\nruined between cities \n    1\n and \n    4\n; a person from city \n    3\n: he\nvisited cities \n    1\n and \n    3\n in good mood; a person from city \n    6\n:\nhe visited cities \n    1\n, \n    3\n and \n    6\n, his mood was ruined between\ncities \n    1\n and \n    3\n; In total, \n    h_1 = 4 - 0 = 4\n, \n    h_2 = 0\n,\n\n    h_3 = 1 - 1 = 0\n, \n    h_4 = 0 - 1 = -1\n, \n    h_5 = 0\n, \n    h_6 = 0 - 1 =\n    -1\n, \n    h_7 = 0\n. The second case of the first test: All people have\nalready started in bad mood in the capital \u2014 this is the only possible\nscenario. The first case of the second test: The second case of the second\ntest: It can be proven that there is no way to achieve given happiness indexes\nin both cases of the second test.\n\n",
        "cf_contest_id": 1388,
        "cf_index": "C",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "greedy",
            "math",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n7 4\r\n1 0 1 1 0 1 0\r\n4 0 0 -1 0 -1 0\r\n1 2\r\n1 3\r\n1 4\r\n3 5\r\n3 6\r\n3 7\r\n5 11\r\n1 2 5 2 1\r\n-11 -2 -6 -2 -1\r\n1 2\r\n1 3\r\n1 4\r\n3 5\r\n",
                "YES\r\nYES\r\n"
            ],
            [
                "2\r\n4 4\r\n1 1 1 1\r\n4 1 -3 -1\r\n1 2\r\n1 3\r\n1 4\r\n3 13\r\n3 3 7\r\n13 1 4\r\n1 2\r\n1 3\r\n",
                "NO \r\nNO \r\n"
            ]
        ],
        "private_cases": []
    }
]