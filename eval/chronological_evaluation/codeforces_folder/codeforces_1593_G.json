[
    {
        "name": "Changing Brackets",
        "description": "A sequence of round and square brackets is given. You can change the sequence\nby performing the following operations: change the direction of a bracket from\nopening to closing and vice versa without changing the form of the bracket:\ni.e. you can change '(' to ')' and ')' to '('; you can change '[' to ']' and\n']' to '['. The operation costs \n    0\n burles. change any square bracket to\nround bracket having the same direction: i.e. you can change '[' to '(' but\nnot from '(' to '['; similarly, you can change ']' to ')' but not from ')' to\n']'. The operation costs \n    1\n burle. The operations can be performed in any\norder any number of times. You are given a string \n    s\n of the length\n\n    n\n and \n    q\n queries of the type \"l r\" where \n    1 \n    \u2264 l < r \n    \u2264\n    n\n. For every substring \n    s[l \n    \u2026 r]\n, find the minimum cost to pay\nto make it a correct bracket sequence. It is guaranteed that the substring\n\n    s[l \n    \u2026 r]\n has an even length. The queries must be processed\nindependently, i.e. the changes made in the string for the answer to a\nquestion \n    i\n don't affect the queries \n    j\n (\n    j > i\n). In other\nwords, for every query, the substring \n    s[l \n    \u2026 r]\n is given from the\ninitially given string \n    s\n. A correct bracket sequence is a sequence that\ncan be built according the following rules: an empty sequence is a correct\nbracket sequence; if \"s\" is a correct bracket sequence, the sequences \"(s)\"\nand \"[s]\" are correct bracket sequences. if \"s\" and \"t\" are correct bracket\nsequences, the sequence \"st\" (the concatenation of the sequences) is a correct\nbracket sequence. E.g. the sequences \"\", \"(()[])\", \"[()()]()\" and \"(())()\" are\ncorrect bracket sequences whereas \"(\", \"[(])\" and \")))\" are not. Input The\nfirst line contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the\nnumber of test cases. Then \n    t\n test cases follow. For each test case, the\nfirst line contains a non-empty string \n    s\n containing only round ('(',\n')') and square ('[', ']') brackets. The length of the string doesn't exceed\n\n    10^6\n. The string contains at least \n    2\n characters. The second line\ncontains one integer \n    q\n (\n    1 \n    \u2264 q \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the\nnumber of queries. Then \n    q\n lines follow, each of them contains two\nintegers \n    l\n and \n    r\n (\n    1 \n    \u2264 l < r \n    \u2264 n\n where \n    n\n is the\nlength of \n    s\n). It is guaranteed that the substring \n    s[l \n    \u2026 r]\n\nhas even length. It is guaranteed that the sum of the lengths of all strings\ngiven in all test cases doesn't exceed \n    10^6\n. The sum of all \n    q\n\ngiven in all test cases doesn't exceed \n    2 \n    \u00b7 10^5\n. Output For each\ntest case output in a separate line for each query one integer \n    x\n (\n    x\n    \n    \u2265 0\n) \u2014 the minimum cost to pay to make the given substring a correct\nbracket sequence. Example Input 3 ([))[)()][]] 3 1 12 4 9 3 6 )))))) 2 2 3 1 4\n[] 1 1 2 Output 0 2 1 0 0 0 Note Consider the first test case. The first query\ndescribes the whole given string, the string can be turned into the following\ncorrect bracket sequence: \"([()])()[[]]\". The forms of the brackets aren't\nchanged so the cost of changing is \n    0\n. The second query describes the\nsubstring \")[)()]\". It may be turned into \"(()())\", the cost is equal to\n\n    2\n. The third query describes the substring \"))[)\". It may be turned into\n\"()()\", the cost is equal to \n    1\n. The substrings of the second test case\ncontain only round brackets. It's possible to prove that any sequence of round\nbrackets having an even length may be turned into a correct bracket sequence\nfor the cost of \n    0\n burles. In the third test case, the single query\ndescribes the string \"[]\" that is already a correct bracket sequence.\n\n",
        "cf_contest_id": 1593,
        "cf_index": "G",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "dp",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n([))[)()][]]\r\n3\r\n1 12\r\n4 9\r\n3 6\r\n))))))\r\n2\r\n2 3\r\n1 4\r\n[]\r\n1\r\n1 2\r\n",
                "0\r\n2\r\n1\r\n0\r\n0\r\n0\r\n"
            ]
        ],
        "private_cases": []
    }
]