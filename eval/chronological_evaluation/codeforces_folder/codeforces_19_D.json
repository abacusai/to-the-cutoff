[
    {
        "name": "Points",
        "description": "Pete and Bob invented a new interesting game. Bob takes a sheet of paper and\nlocates a Cartesian coordinate system on it as follows: point (0, 0) is\nlocated in the bottom-left corner, Ox axis is directed right, Oy axis is\ndirected up. Pete gives Bob requests of three types: add x y \u2014 on the sheet of\npaper Bob marks a point with coordinates (x, y). For each request of this type\nit's guaranteed that point (x, y) is not yet marked on Bob's sheet at the time\nof the request. remove x y \u2014 on the sheet of paper Bob erases the previously\nmarked point with coordinates (x, y). For each request of this type it's\nguaranteed that point (x, y) is already marked on Bob's sheet at the time of\nthe request. find x y \u2014 on the sheet of paper Bob finds all the marked points,\nlying strictly above and strictly to the right of point (x, y). Among these\npoints Bob chooses the leftmost one, if it is not unique, he chooses the\nbottommost one, and gives its coordinates to Pete. Bob managed to answer the\nrequests, when they were 10, 100 or 1000, but when their amount grew up to\n2\u00b710^5, Bob failed to cope. Now he needs a program that will answer all Pete's\nrequests. Help Bob, please! Input The first input line contains number n (1 \u2264\nn \u2264 2\u00b710^5) \u2014 amount of requests. Then there follow n lines \u2014 descriptions of\nthe requests. add x y describes the request to add a point, remove x y \u2014 the\nrequest to erase a point, find x y \u2014 the request to find the bottom-left\npoint. All the coordinates in the input file are non-negative and don't exceed\n10^9. Output For each request of type find x y output in a separate line the\nanswer to it \u2014 coordinates of the bottommost among the leftmost marked points,\nlying strictly above and to the right of point (x, y). If there are no points\nstrictly above and to the right of point (x, y), output -1. Examples Input 7\nadd 1 1 add 3 4 find 0 0 remove 1 1 find 0 0 add 1 1 find 0 0 Output 1 1 3 4 1\n1 Input 13 add 5 5 add 5 6 add 5 7 add 6 5 add 6 6 add 6 7 add 7 5 add 7 6 add\n7 7 find 6 6 remove 7 7 find 6 6 find 4 4 Output 7 7 -1 5 5\n\n",
        "cf_contest_id": 19,
        "cf_index": "D",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\nadd 1 1\r\nadd 3 4\r\nfind 0 0\r\nremove 1 1\r\nfind 0 0\r\nadd 1 1\r\nfind 0 0\r\n",
                "1 1\r\n3 4\r\n1 1\r\n"
            ],
            [
                "13\r\nadd 5 5\r\nadd 5 6\r\nadd 5 7\r\nadd 6 5\r\nadd 6 6\r\nadd 6 7\r\nadd 7 5\r\nadd 7 6\r\nadd 7 7\r\nfind 6 6\r\nremove 7 7\r\nfind 6 6\r\nfind 4 4\r\n",
                "7 7\r\n-1\r\n5 5\r\n"
            ]
        ],
        "private_cases": [
            [
                "13\r\nfind 0 0\r\nadd 0 0\r\nfind 0 0\r\nadd 1 2\r\nadd 1 3\r\nadd 1 10\r\nadd 10 5\r\nadd 2 1\r\nfind 0 1\r\nfind 0 2\r\nremove 1 10\r\nremove 1 3\r\nfind 0 2\r\n",
                "-1\r\n-1\r\n1 2\r\n1 3\r\n10 5\r\n"
            ],
            [
                "10\r\nadd 5 7\r\nadd 2 1\r\nadd 8 8\r\nadd 5 10\r\nadd 2 5\r\nfind 7 5\r\nfind 8 3\r\nfind 2 2\r\nfind 5 4\r\nfind 2 6\r\n",
                "8 8\r\n-1\r\n5 7\r\n8 8\r\n5 7\r\n"
            ],
            [
                "20\r\nadd 25 93\r\nadd 36 45\r\nadd 56 30\r\nadd 1 13\r\nadd 96 33\r\nadd 27 52\r\nadd 61 35\r\nadd 49 98\r\nadd 25 80\r\nadd 37 5\r\nfind 0 25\r\nfind 98 96\r\nfind 70 76\r\nfind 58 91\r\nfind 42 13\r\nfind 85 78\r\nfind 10 97\r\nfind 30 100\r\nfind 100 93\r\nfind 2 62\r\n",
                "25 80\r\n-1\r\n-1\r\n-1\r\n49 98\r\n-1\r\n49 98\r\n-1\r\n-1\r\n25 80\r\n"
            ],
            [
                "6\r\nadd 1 4\r\nadd 0 0\r\nadd 9 3\r\nfind 2 2\r\nfind 4 7\r\nfind 10 6\r\n",
                "9 3\r\n-1\r\n-1\r\n"
            ],
            [
                "1\r\nfind 123 456\r\n",
                "-1\r\n"
            ]
        ]
    }
]