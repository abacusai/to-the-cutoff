[
    {
        "name": "Three Bags",
        "description": "You are given three bags. Each bag contains a non-empty multiset of numbers.\nYou can perform a number of operations on these bags. In one operation, you\ncan choose any two non-empty bags, and choose one number from each of the\nbags. Let's say that you choose number \n    a\n from the first bag and number\n\n    b\n from the second bag. Then, you remove \n    b\n from the second bag and\nreplace \n    a\n with \n    a-b\n in the first bag. Note that if there are\nmultiple occurrences of these numbers, then you shall only remove/replace\nexactly one occurrence. You have to perform these operations in such a way\nthat you have exactly one number remaining in exactly one of the bags (the\nother two bags being empty). It can be shown that you can always apply these\noperations to receive such a configuration in the end. Among all these\nconfigurations, find the one which has the maximum number left in the end.\nInput The first line of the input contains three space-separated integers\n\n    n_1\n, \n    n_2\n and \n    n_3\n (\n    1 \n    \u2264 n_1, n_2, n_3 \n    \u2264\n    3\n    \u00b710^5\n, \n    1 \n    \u2264 n_1+n_2+n_3 \n    \u2264 3\n    \u00b710^5\n) \u2014 the number of\nnumbers in the three bags. The \n    i\n-th of the next three lines contain\n\n    n_i\n space-separated integers \n    a_i,1\n, \n    a_i,2\n, ...,\n\n    a_i,n_i\n (\n    1 \n    \u2264 a_i,j\n    \u2264 10^9\n) \u2014 the numbers in\nthe \n    i\n-th bag. Output Print a single integer \u2014 the maximum number which\nyou can achieve in the end. Examples Input 2 4 1 1 2 6 3 4 5 5 Output 20 Input\n3 2 2 7 5 4 2 9 7 1 Output 29 Note In the first example input, let us perform\nthe following operations: \n    [1, 2], [6, 3, 4, 5], [5]\n \n    [-5, 2], [3, 4,\n    5], [5]\n (Applying an operation to \n    (1, 6)\n) \n    [-10, 2], [3, 4], [5]\n\n(Applying an operation to \n    (-5, 5)\n) \n    [2], [3, 4], [15]\n (Applying an\noperation to \n    (5, -10)\n) \n    [-1], [4], [15]\n (Applying an operation to\n\n    (2, 3)\n) \n    [-5], [], [15]\n (Applying an operation to \n    (-1, 4)\n)\n\n    [], [], [20]\n (Applying an operation to \n    (15, -5)\n) You can verify\nthat you cannot achieve a bigger number. Hence, the answer is \n    20\n.\n\n",
        "cf_contest_id": 1467,
        "cf_index": "C",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 4 1\r\n1 2\r\n6 3 4 5\r\n5\r\n",
                "20\r\n"
            ],
            [
                "3 2 2\r\n7 5 4\r\n2 9\r\n7 1\r\n",
                "29\r\n"
            ]
        ],
        "private_cases": []
    }
]