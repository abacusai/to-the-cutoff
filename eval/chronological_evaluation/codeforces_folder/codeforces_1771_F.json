[
    {
        "name": "Hossam and Range Minimum Query",
        "description": "Hossam gives you a sequence of integers \n    a_1, \n      a_2, \n     \n    \u2026, \n     \n    a_n\n of length \n    n\n. Moreover, he will give you \n    q\n queries of type\n\n    (l, \n      r)\n. For each query, consider the elements \n    a_l, \n      a_l +\n    1, \n     \n    \u2026, \n      a_r\n. Hossam wants to know the smallest number in\nthis sequence, such that it occurs in this sequence an odd number of times.\nYou need to compute the answer for each query before process the next query.\nInput The first line of the input contains one integer \n    n\n (\n    1 \n    \u2264 n\n    \n    \u2264 2 \n    \u00b7 10^5\n), the length of the sequence. The second line contains\n\n    n\n integers \n    a_1, \n      a_2, \n     \n    \u2026, \n      a_n\n (\n    1 \n    \u2264 a_i\n    \n    \u2264 10^9\n). The third line contains one integer \n    q\n (\n    1 \n    \u2264 q\n    \n    \u2264 2 \n    \u00b7 10^5\n), the number of queries. Each of the next \n    q\n\nlines contains two integers \n    a\n and \n    b\n (\n    0 \n    \u2264 a, \n      b \n    \u2264 2\n    \n    \u00b7 10^9\n), the numbers used to encode the queries. Let\n\n    ans_i\n be the answer on the \n    i\n-th query, and\n\n    ans_0\n be zero. Then \n    \n\n    l_i = a_i \n    \u2295\n    ans_i - 1,\n\n    \n \n    \n\n    r_i = b_i \n    \u2295\n    ans_i -\n    1,\n\n    \n where \n    l_i, \n      r_i\n are parameters of the \n    i\n-th query and\n\n    \u2295\n means the bitwise exclusive or operation. It is guaranteed that\n\n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 n\n. Output For each query, print the smallest\nnumber that occurs an odd number of times on the given segment of the\nsequence. If there is no such number, print \n    0\n. Examples Input 5 1 2 1 2\n2 6 1 2 0 2 0 6 0 5 2 2 3 7 Output 1 2 1 0 2 2 Input 10 51 43 69 48 23 52 48\n76 19 55 10 1 1 57 57 54 62 20 27 56 56 79 69 16 21 18 30 25 25 62 61 Output\n51 55 19 48 76 19 23 19 55 19 Note In the example, \n    \n\n    l_1 = 1, \n      r_1 =\n    2,\n\n    \n \n    \n\n    l_2 = 1, \n      r_2 = 3,\n\n    \n \n    \n\n    l_3 = 2, \n      r_3 = 4,\n\n    \n\n\n    \n\n    l_4 = 1, \n      r_4 = 4,\n\n    \n \n    \n\n    l_5 = 2, \n      r_5 = 2,\n\n    \n\n\n    \n\n    l_6 = 1, \n      r_6 = 5.\n\n    \n\n\n",
        "cf_contest_id": 1771,
        "cf_index": "F",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "bitmasks",
            "data structures",
            "hashing",
            "probabilities",
            "strings",
            "trees"
        ],
        "time_limit_seconds": 1.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 2 1 2 2\r\n6\r\n1 2\r\n0 2\r\n0 6\r\n0 5\r\n2 2\r\n3 7\r\n",
                "1\r\n2\r\n1\r\n0\r\n2\r\n2\r\n"
            ],
            [
                "10\r\n51 43 69 48 23 52 48 76 19 55\r\n10\r\n1 1\r\n57 57\r\n54 62\r\n20 27\r\n56 56\r\n79 69\r\n16 21\r\n18 30\r\n25 25\r\n62 61\r\n",
                "51\r\n55\r\n19\r\n48\r\n76\r\n19\r\n23\r\n19\r\n55\r\n19\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 1\r\n1\r\n1 2\r\n",
                "0\r\n"
            ]
        ]
    }
]