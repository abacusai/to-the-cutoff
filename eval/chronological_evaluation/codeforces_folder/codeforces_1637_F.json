[
    {
        "name": "Towers",
        "description": "You are given a tree with \n    n\n vertices numbered from \n    1\n to \n    n\n.\nThe height of the \n    i\n-th vertex is \n    h_i\n. You can place any number of\ntowers into vertices, for each tower you can choose which vertex to put it in,\nas well as choose its efficiency. Setting up a tower with efficiency \n    e\n\ncosts \n    e\n coins, where \n    e > 0\n. It is considered that a vertex \n    x\n\ngets a signal if for some pair of towers at the vertices \n    u\n and \n    v\n\n(\n    u \n    \u2260 v\n, but it is allowed that \n    x = u\n or \n    x = v\n) with\nefficiencies \n    e_u\n and \n    e_v\n, respectively, it is satisfied that\n\n    min(e_u, e_v) \n    \u2265 h_x\n and \n    x\n lies on the path between \n    u\n\nand \n    v\n. Find the minimum number of coins required to set up towers so\nthat you can get a signal at all vertices. Input The first line contains an\ninteger \n    n\n (\n    2 \n    \u2264 n \n    \u2264 200\n     000\n) \u2014 the number of vertices in\nthe tree. The second line contains \n    n\n integers \n    h_i\n (\n    1 \n    \u2264 h_i\n    \n    \u2264 10^9\n) \u2014 the heights of the vertices. Each of the next \n    n - 1\n\nlines contain a pair of numbers \n    v_i, u_i\n (\n    1 \n    \u2264 v_i, u_i \n    \u2264\n    n\n) \u2014 an edge of the tree. It is guaranteed that the given edges form a\ntree. Output Print one integer \u2014 the minimum required number of coins.\nExamples Input 3 1 2 1 1 2 2 3 Output 4 Input 5 1 3 3 1 3 1 3 5 4 4 3 2 3\nOutput 7 Input 2 6 1 1 2 Output 12 Note In the first test case it's optimal to\ninstall two towers with efficiencies \n    2\n at vertices \n    1\n and \n    3\n.\nIn the second test case it's optimal to install a tower with efficiency\n\n    1\n at vertex \n    1\n and two towers with efficiencies \n    3\n at vertices\n\n    2\n and \n    5\n. In the third test case it's optimal to install two towers\nwith efficiencies \n    6\n at vertices \n    1\n and \n    2\n.\n\n",
        "cf_contest_id": 1637,
        "cf_index": "F",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 2 1\r\n1 2\r\n2 3\r\n",
                "4\r\n"
            ],
            [
                "5\r\n1 3 3 1 3\r\n1 3\r\n5 4\r\n4 3\r\n2 3\r\n",
                "7\r\n"
            ],
            [
                "2\r\n6 1\r\n1 2\r\n",
                "12\r\n"
            ]
        ],
        "private_cases": [
            [
                "6\r\n8 8 11 3 8 9\r\n6 5\r\n2 5\r\n1 3\r\n3 6\r\n5 4\r\n",
                "25\r\n"
            ],
            [
                "8\r\n1 1 16 16 1 1 7 7\r\n1 3\r\n4 6\r\n4 8\r\n2 4\r\n2 1\r\n7 4\r\n5 7\r\n",
                "40\r\n"
            ],
            [
                "10\r\n4 8 9 4 9 9 1 6 10 9\r\n8 7\r\n8 6\r\n5 9\r\n3 6\r\n9 2\r\n4 9\r\n7 2\r\n1 8\r\n10 8\r\n",
                "37\r\n"
            ],
            [
                "2\r\n443376223 443376223\r\n2 1\r\n",
                "886752446\r\n"
            ],
            [
                "10\r\n236643682 236643682 981814768 981814768 370624978 370624978 429069244 429069244 433388743 433388743\r\n4 9\r\n2 9\r\n10 5\r\n1 3\r\n6 5\r\n10 8\r\n7 2\r\n8 3\r\n6 7\r\n",
                "1963629536\r\n"
            ],
            [
                "16\r\n723112092 723112092 723112092 487614144 487614144 487614144 133804151 133804151 133804151 770743419 770743419 770743419 128172345 128172345 128172345 220439689\r\n2 1\r\n3 1\r\n4 1\r\n5 3\r\n6 3\r\n7 1\r\n8 2\r\n9 7\r\n10 5\r\n11 4\r\n12 5\r\n13 5\r\n14 4\r\n15 9\r\n16 3\r\n",
                "4133545023\r\n"
            ],
            [
                "10\r\n138826010 138826010 634778294 634778294 164210769 164210769 689901083 689901083 384463298 384463298\r\n5 1\r\n6 1\r\n2 1\r\n3 1\r\n7 1\r\n8 1\r\n4 1\r\n9 1\r\n10 1\r\n",
                "3885532898\r\n"
            ],
            [
                "10\r\n374009420 89906019 531732118 957829856 844869602 860818181 112557169 971588952 542095661 723850163\r\n9 4\r\n9 5\r\n10 8\r\n8 2\r\n7 5\r\n6 1\r\n3 7\r\n6 3\r\n4 2\r\n",
                "1943177904\r\n"
            ],
            [
                "16\r\n39306643 800788524 267560732 74792307 153254589 793068713 431698892 142409457 552497305 702938770 412729810 672444667 887602217 696027910 163587635 541773696\r\n2 1\r\n3 1\r\n4 2\r\n5 3\r\n6 1\r\n7 6\r\n8 5\r\n9 1\r\n10 3\r\n11 1\r\n12 8\r\n13 10\r\n14 2\r\n15 7\r\n16 10\r\n",
                "4822510932\r\n"
            ],
            [
                "2\r\n442352942 614076887\r\n2 1\r\n",
                "1228153774\r\n"
            ],
            [
                "10\r\n261650447 120467666 702573547 371539862 687724416 661756151 459249065 923897844 141439045 976355624\r\n8 1\r\n9 1\r\n2 1\r\n5 1\r\n3 1\r\n6 1\r\n10 1\r\n4 1\r\n7 1\r\n",
                "5097461000\r\n"
            ],
            [
                "3\r\n7 6 5\r\n1 2\r\n1 3\r\n",
                "14\r\n"
            ]
        ]
    }
]