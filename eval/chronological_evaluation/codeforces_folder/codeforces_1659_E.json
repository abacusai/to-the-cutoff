[
    {
        "name": "AND-MEX Walk",
        "description": "There is an undirected, connected graph with \n    n\n vertices and \n    m\n\nweighted edges. A walk from vertex \n    u\n to vertex \n    v\n is defined as a\nsequence of vertices \n    p_1,p_2,\n    \u2026,p_k\n (which are not necessarily\ndistinct) starting with \n    u\n and ending with \n    v\n, such that \n    p_i\n\nand \n    p_i+1\n are connected by an edge for \n    1 \n    \u2264 i < k\n. We define\nthe length of a walk as follows: take the ordered sequence of edges and write\ndown the weights on each of them in an array. Now, write down the bitwise AND\nof every nonempty prefix of this array. The length of the walk is the MEX of\nall these values. More formally, let us have \n    [w_1,w_2,\n    \u2026,w_k-1]\n\nwhere \n    w_i\n is the weight of the edge between \n    p_i\n and \n    p_i+1\n.\nThen the length of the walk is given by \n    MEX(\n    \n    w_1,\n     w_1\n    &\n    w_2,\n     \n    \u2026,\n     w_1\n    & w_2\n    &\n    \u2026\n    & w_k-1\n    \n    )\n, where\n\n    &\n denotes the bitwise AND operation. Now you must process \n    q\n\nqueries of the form u v. For each query, find the minimum possible length of a\nwalk from \n    u\n to \n    v\n. The MEX (minimum excluded) of a set is the\nsmallest non-negative integer that does not belong to the set. For instance:\nThe MEX of \n    2,1\n is \n    0\n, because \n    0\n does not belong to\nthe set. The MEX of \n    3,1,0\n is \n    2\n, because \n    0\n and\n\n    1\n belong to the set, but \n    2\n does not. The MEX of\n\n    0,3,1,2\n is \n    4\n because \n    0\n, \n    1\n, \n    2\n and\n\n    3\n belong to the set, but \n    4\n does not. Input The first line contains\ntwo integers \n    n\n and \n    m\n (\n    2 \n    \u2264 n \n    \u2264 10^5\n; \n    n-1 \n    \u2264\n    m \n    \u2264\n    min\n    (\n    n(n-1)/2,10^5\n    )\n). Each of the\nnext \n    m\n lines contains three integers \n    a\n, \n    b\n, and \n    w\n (\n    1\n    \n    \u2264 a, b \n    \u2264 n\n, \n    a \n    \u2260 b\n; \n    0 \n    \u2264 w < 2^30\n)\nindicating an undirected edge between vertex \n    a\n and vertex \n    b\n with\nweight \n    w\n. The input will not contain self-loops or duplicate edges, and\nthe provided graph will be connected. The next line contains a single integer\n\n    q\n (\n    1 \n    \u2264 q \n    \u2264 10^5\n). Each of the next \n    q\n lines\ncontains two integers \n    u\n and \n    v\n (\n    1 \n    \u2264 u, v \n    \u2264 n\n, \n    u\n    \n    \u2260 v\n), the description of each query. Output For each query, print one\nline containing a single integer \u2014 the answer to the query. Examples Input 6 7\n1 2 1 2 3 3 3 1 5 4 5 2 5 6 4 6 4 6 3 4 1 3 1 5 1 2 5 3 Output 2 0 1 Input 9 8\n1 2 5 2 3 11 3 4 10 3 5 10 5 6 2 5 7 1 7 8 5 7 9 5 10 5 7 2 5 7 1 6 4 5 2 7 6\n4 1 6 2 4 7 2 8 Output 0 0 2 0 0 2 1 0 1 1 Note The following is an\nexplanation of the first example. The graph in the first example. Here is one\npossible walk for the first query: \n    \n\n    1 \n    5\n    \u2192 3\n    \n    3\n    \u2192 2 \n    1\n    \u2192 1\n    \n    5\n    \u2192 3 \n    1\n    \u2192 4\n    \n    2\n    \u2192 5.\n\n    \n The array of weights is\n\n    w=[5,3,1,5,1,2]\n. Now if we take the bitwise AND of every prefix of this\narray, we get the set \n    5,1,0\n. The MEX of this set is \n    2\n.\nWe cannot get a walk with a smaller length (as defined in the statement).\n\n",
        "cf_contest_id": 1659,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 7\r\n1 2 1\r\n2 3 3\r\n3 1 5\r\n4 5 2\r\n5 6 4\r\n6 4 6\r\n3 4 1\r\n3\r\n1 5\r\n1 2\r\n5 3\r\n",
                "2\r\n0\r\n1\r\n"
            ],
            [
                "9 8\r\n1 2 5\r\n2 3 11\r\n3 4 10\r\n3 5 10\r\n5 6 2\r\n5 7 1\r\n7 8 5\r\n7 9 5\r\n10\r\n5 7\r\n2 5\r\n7 1\r\n6 4\r\n5 2\r\n7 6\r\n4 1\r\n6 2\r\n4 7\r\n2 8\r\n",
                "0\r\n0\r\n2\r\n0\r\n0\r\n2\r\n1\r\n0\r\n1\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]