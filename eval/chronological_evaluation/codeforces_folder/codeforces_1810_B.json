[
    {
        "name": "Candies",
        "description": "This problem is about candy. Initially, you only have \n    1\n candy, and you\nwant to have exactly \n    n\n candies. You can use the two following spells in\nany order at most \n    40\n times in total. Assume you have \n    x\n candies\nnow. If you use the first spell, then \n    x\n candies become \n    2x-1\n\ncandies. Assume you have \n    x\n candies now. If you use the second spell,\nthen \n    x\n candies become \n    2x+1\n candies. Construct a sequence of\nspells, such that after using them in order, you will have exactly \n    n\n\ncandies, or determine it's impossible. Input Each test contains multiple test\ncases. The first line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    10^4\n) \u2014 the number of test cases. Their description follows. Each test case\ncontains one line with a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 10^9\n) \u2014\nthe required final number of candies. Output For each test case, output the\nfollowing. If it's possible to eventually have \n    n\n candies within \n    40\n\nspells, in the first line print an integer \n    m\n (\n    1 \n    \u2264 m \n    \u2264 40\n),\nrepresenting the total number of spells you use. In the second print \n    m\n\nintegers \n    a_1, a_2, \n    \u2026, a_m\n (\n    a_i\n is \n    1\n or\n\n    2\n) separated by spaces, where \n    a_i = 1\n means that you use the\nfirst spell in the \n    i\n-th step, while \n    a_i = 2\n means that you use\nthe second spell in the \n    i\n-th step. Note that you do not have to minimize\n\n    m\n, and if there are multiple solutions, you may output any one of them.\nIf it's impossible, output \n    -1\n in one line. Example Input 4 2 3 7 17\nOutput -1 1 2 2 2 2 4 2 1 1 1 Note For \n    n=3\n, you can just use the second\nspell once, and then have \n    2 \n    \u00b7 1 + 1 = 3\n candies. For \n    n=7\n,\nyou can use the second spell twice. After the first step, you will have\n\n    3\n candies. And after the second step, you will have \n    2 \n    \u00b7 3 + 1 =\n    7\n candies.\n\n",
        "cf_contest_id": 1810,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2\r\n3\r\n7\r\n17\r\n",
                "-1\r\n1 2\r\n2 2 2\r\n4 2 1 1 1\r\n"
            ]
        ],
        "private_cases": []
    }
]