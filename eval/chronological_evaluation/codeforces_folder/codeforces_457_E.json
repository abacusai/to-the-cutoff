[
    {
        "name": "Flow Optimality",
        "description": "There is a computer network consisting of n nodes numbered 1 through n. There\nare links in the network that connect pairs of nodes. A pair of nodes may have\nmultiple links between them, but no node has a link to itself. Each link\nsupports unlimited bandwidth (in either direction), however a link may only\ntransmit in a single direction at any given time. The cost of sending data\nacross a link is proportional to the square of the bandwidth. Specifically,\neach link has a positive weight, and the cost of sending data across the link\nis the weight times the square of the bandwidth. The network is connected\n(there is a series of links from any node to any other node), and furthermore\ndesigned to remain connected in the event of any single node failure. You\nneeded to send data from node 1 to node n at a bandwidth of some positive\nnumber k. That is, you wish to assign a bandwidth to each link so that the\nbandwidth into a node minus the bandwidth out of a node is - k for node 1, k\nfor node n, and 0 for all other nodes. The individual bandwidths do not need\nto be integers. Wishing to minimize the total cost, you drew a diagram of the\nnetwork, then gave the task to an intern to solve. The intern claimed to have\nsolved the task and written the optimal bandwidths on your diagram, but then\nspilled coffee on it, rendering much of it unreadable (including parts of the\noriginal diagram, and the value of k). From the information available,\ndetermine if the intern's solution may have been optimal. That is, determine\nif there exists a valid network, total bandwidth, and optimal solution which\nis a superset of the given information. Furthermore, determine the efficiency\nof the intern's solution (if possible), where efficiency is defined as total\ncost divided by total bandwidth. Input Input will begin with two integers n\nand m (2 \u2264 n \u2264 200000; 0 \u2264 m \u2264 200000), the number of nodes and number of\nknown links in the network, respectively. Following this are m lines with four\nintegers each: f, t, w, b (1 \u2264 f \u2264 n; 1 \u2264 t \u2264 n; f \u2260 t; 1 \u2264 w \u2264 100; 0 \u2264 b \u2264\n100). This indicates there is a link between nodes f and t with weight w and\ncarrying b bandwidth. The direction of bandwidth is from f to t. Output If the\nintern's solution is definitely not optimal, print \"BAD x\", where x is the\nfirst link in the input that violates the optimality of the solution. If the\nintern's solution may be optimal, print the efficiency of the solution if it\ncan be determined rounded to the nearest integer, otherwise print \"UNKNOWN\".\nExamples Input 4 5 1 2 1 2 1 3 4 1 2 3 2 1 2 4 4 1 3 4 1 2 Output 6 Input 5 5\n2 3 1 1 3 4 1 1 4 2 1 1 1 5 1 1 1 5 100 100 Output BAD 3 Input 6 4 1 3 31 41 1\n5 59 26 2 6 53 58 4 6 97 93 Output UNKNOWN Input 7 5 1 7 2 1 2 3 1 1 4 5 1 0 6\n1 10 0 1 3 1 1 Output BAD 4 Note Although the known weights and bandwidths\nhappen to always be integers, the weights and bandwidths of the remaining\nlinks are not restricted to integers.\n\n",
        "cf_contest_id": 457,
        "cf_index": "E",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "flows",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 5\r\n1 2 1 2\r\n1 3 4 1\r\n2 3 2 1\r\n2 4 4 1\r\n3 4 1 2\r\n",
                "6"
            ],
            [
                "5 5\r\n2 3 1 1\r\n3 4 1 1\r\n4 2 1 1\r\n1 5 1 1\r\n1 5 100 100\r\n",
                "BAD 3"
            ],
            [
                "6 4\r\n1 3 31 41\r\n1 5 59 26\r\n2 6 53 58\r\n4 6 97 93\r\n",
                "UNKNOWN"
            ],
            [
                "7 5\r\n1 7 2 1\r\n2 3 1 1\r\n4 5 1 0\r\n6 1 10 0\r\n1 3 1 1\r\n",
                "BAD 4"
            ]
        ],
        "private_cases": [
            [
                "2 10\r\n1 2 5 10\r\n1 2 1 50\r\n1 2 10 5\r\n1 2 2 25\r\n1 2 25 2\r\n1 2 1 25\r\n1 2 1 1\r\n1 2 1 1\r\n1 2 1 1\r\n1 2 1 1\r\n",
                "BAD 6"
            ],
            [
                "2 1\r\n2 1 1 5\r\n",
                "BAD 1"
            ],
            [
                "200000 0\r\n",
                "UNKNOWN"
            ],
            [
                "2 1\r\n1 2 100 100\r\n",
                "10000"
            ],
            [
                "2 2\r\n1 2 1 50\r\n1 2 2 25\r\n",
                "50"
            ],
            [
                "3 1\r\n3 2 100 100\r\n",
                "BAD 1"
            ],
            [
                "3 1\r\n2 1 100 100\r\n",
                "BAD 1"
            ],
            [
                "2 2\r\n1 2 25 2\r\n1 2 50 1\r\n",
                "50"
            ],
            [
                "3 3\r\n1 2 5 1\r\n2 3 7 1\r\n1 3 6 2\r\n",
                "12"
            ],
            [
                "3 1\r\n1 3 10 10\r\n",
                "100"
            ],
            [
                "3 2\r\n1 3 5 10\r\n1 2 3 16\r\n",
                "50"
            ],
            [
                "3 2\r\n1 3 10 5\r\n1 2 17 3\r\n",
                "BAD 2"
            ],
            [
                "4 2\r\n2 3 1 1\r\n3 2 1 1\r\n",
                "BAD 2"
            ],
            [
                "4 3\r\n1 2 5 5\r\n2 3 6 6\r\n3 4 4 4\r\n",
                "77"
            ],
            [
                "3 2\r\n1 2 5 5\r\n2 3 1 0\r\n",
                "BAD 2"
            ],
            [
                "3 1\r\n2 1 100 0\r\n",
                "BAD 1"
            ],
            [
                "4 1\r\n2 3 100 0\r\n",
                "UNKNOWN"
            ],
            [
                "4 2\r\n2 3 100 0\r\n1 2 1 1\r\n",
                "UNKNOWN"
            ],
            [
                "4 3\r\n1 2 100 100\r\n1 3 99 99\r\n2 3 77 0\r\n",
                "BAD 3"
            ],
            [
                "4 3\r\n1 2 99 100\r\n1 3 100 99\r\n2 3 77 0\r\n",
                "UNKNOWN"
            ],
            [
                "5 3\r\n2 3 1 1\r\n2 4 2 2\r\n3 4 1 1\r\n",
                "BAD 3"
            ],
            [
                "5 3\r\n2 3 100 0\r\n2 4 100 0\r\n3 4 1 1\r\n",
                "BAD 3"
            ],
            [
                "5 3\r\n4 2 100 100\r\n4 3 100 50\r\n3 2 50 100\r\n",
                "UNKNOWN"
            ],
            [
                "4 2\r\n1 4 10 10\r\n2 3 100 100\r\n",
                "BAD 2"
            ],
            [
                "4 3\r\n1 3 5 5\r\n2 3 6 6\r\n4 1 100 100\r\n",
                "BAD 2"
            ],
            [
                "3 2\r\n1 2 10 10\r\n2 3 10 0\r\n",
                "BAD 2"
            ],
            [
                "6 5\r\n3 4 10 0\r\n2 3 10 10\r\n4 5 10 10\r\n1 6 10 19\r\n5 6 100 100\r\n",
                "BAD 4"
            ],
            [
                "4 2\r\n1 2 1 1\r\n3 2 1 1\r\n",
                "BAD 2"
            ],
            [
                "4 2\r\n3 2 1 1\r\n1 2 1 1\r\n",
                "BAD 2"
            ],
            [
                "4 2\r\n3 4 1 1\r\n3 2 1 1\r\n",
                "BAD 2"
            ],
            [
                "4 2\r\n3 2 1 1\r\n3 4 1 1\r\n",
                "BAD 2"
            ],
            [
                "4 2\r\n2 3 5 6\r\n1 4 1 30\r\n",
                "BAD 2"
            ],
            [
                "5 2\r\n1 3 2 5\r\n2 4 1 10\r\n",
                "UNKNOWN"
            ],
            [
                "5 2\r\n2 3 1 10\r\n4 5 2 5\r\n",
                "UNKNOWN"
            ],
            [
                "2 1\r\n1 2 1 0\r\n",
                "BAD 1"
            ],
            [
                "2 1\r\n2 1 1 0\r\n",
                "BAD 1"
            ]
        ]
    }
]