[
    {
        "name": "New Year and Arbitrary Arrangement",
        "description": "You are given three integers k, pa and pb. You will construct a sequence with\nthe following algorithm: Initially, start with the empty sequence. Each\nsecond, you do the following. With probability pa / (pa + pb), add 'a' to the\nend of the sequence. Otherwise (with probability pb / (pa + pb)), add 'b' to\nthe end of the sequence. You stop once there are at least k subsequences that\nform 'ab'. Determine the expected number of times 'ab' is a subsequence in the\nresulting sequence. It can be shown that this can be represented by P / Q,\nwhere P and Q are coprime integers, and . Print the value of . Input The first\nline will contain three integers integer k, pa, pb (1 \u2264 k \u2264 1 000, 1 \u2264 pa, pb\n\u2264 1 000 000). Output Print a single integer, the answer to the problem.\nExamples Input 1 1 1 Output 2 Input 3 1 4 Output 370000006 Note The first\nsample, we will keep appending to our sequence until we get the subsequence\n'ab' at least once. For instance, we get the sequence 'ab' with probability\n1/4, 'bbab' with probability 1/16, and 'aab' with probability 1/8. Note, it's\nimpossible for us to end with a sequence like 'aabab', since we would have\nstopped our algorithm once we had the prefix 'aab'. The expected amount of\ntimes that 'ab' will occur across all valid sequences is 2. For the second\nsample, the answer is equal to .\n\n",
        "cf_contest_id": 908,
        "cf_index": "D",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "math",
            "probabilities"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1 1 1\r\n",
                "2\r\n"
            ],
            [
                "3 1 4\r\n",
                "370000006\r\n"
            ]
        ],
        "private_cases": [
            [
                "1000 123456 654321\r\n",
                "977760856\r\n"
            ],
            [
                "305 337309 378395\r\n",
                "174667130\r\n"
            ],
            [
                "108 531040 908573\r\n",
                "145579983\r\n"
            ],
            [
                "575 39377 68346\r\n",
                "899189133\r\n"
            ],
            [
                "66 199449 266025\r\n",
                "27912582\r\n"
            ],
            [
                "781 817338 452871\r\n",
                "711597307\r\n"
            ],
            [
                "99 534023 117289\r\n",
                "29694885\r\n"
            ],
            [
                "156 78149 46740\r\n",
                "114906561\r\n"
            ],
            [
                "57 339480 774350\r\n",
                "622654301\r\n"
            ],
            [
                "270 967166 795005\r\n",
                "530539317\r\n"
            ],
            [
                "628 446579 365440\r\n",
                "214808787\r\n"
            ],
            [
                "97 119368 2062\r\n",
                "2436614\r\n"
            ],
            [
                "757 869978 224540\r\n",
                "921904658\r\n"
            ],
            [
                "892 777143 664073\r\n",
                "527873013\r\n"
            ],
            [
                "177 2501 570142\r\n",
                "779148936\r\n"
            ],
            [
                "908 879494 944888\r\n",
                "114377456\r\n"
            ],
            [
                "734 32585 49636\r\n",
                "684730644\r\n"
            ],
            [
                "38 592277 400426\r\n",
                "499077928\r\n"
            ],
            [
                "192 42070 61266\r\n",
                "904814024\r\n"
            ],
            [
                "78 535199 331023\r\n",
                "684367478\r\n"
            ],
            [
                "842 171735 282219\r\n",
                "948183028\r\n"
            ],
            [
                "1000 1000000 1\r\n",
                "478180868\r\n"
            ]
        ]
    }
]