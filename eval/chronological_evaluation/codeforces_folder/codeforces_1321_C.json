[
    {
        "name": "Remove Adjacent",
        "description": "You are given a string \n    s\n consisting of lowercase Latin letters. Let the\nlength of \n    s\n be \n    |s|\n. You may perform several operations on this\nstring. In one operation, you can choose some index \n    i\n and remove the\n\n    i\n-th character of \n    s\n (\n    s_i\n) if at least one of its adjacent\ncharacters is the previous letter in the Latin alphabet for \n    s_i\n. For\nexample, the previous letter for b is a, the previous letter for s is r, the\nletter a has no previous letters. Note that after each removal the length of\nthe string decreases by one. So, the index \n    i\n should satisfy the\ncondition \n    1 \n    \u2264 i \n    \u2264 |s|\n during each operation. For the character\n\n    s_i\n adjacent characters are \n    s_i-1\n and \n    s_i+1\n. The first\nand the last characters of \n    s\n both have only one adjacent character\n(unless \n    |s| = 1\n). Consider the following example. Let \n    s=\n bacabcab.\nDuring the first move, you can remove the first character \n    s_1=\n b because\n\n    s_2=\n a. Then the string becomes \n    s=\n acabcab. During the second\nmove, you can remove the fifth character \n    s_5=\n c because \n    s_4=\n b.\nThen the string becomes \n    s=\n acabab. During the third move, you can remove\nthe sixth character \n    s_6=\n'b' because \n    s_5=\n a. Then the string\nbecomes \n    s=\n acaba. During the fourth move, the only character you can\nremove is \n    s_4=\n b, because \n    s_3=\n a (or \n    s_5=\n a). The string\nbecomes \n    s=\n acaa and you cannot do anything with it. Your task is to find\nthe maximum possible number of characters you can remove if you choose the\nsequence of operations optimally. Input The first line of the input contains\none integer \n    |s|\n (\n    1 \n    \u2264 |s| \n    \u2264 100\n) \u2014 the length of \n    s\n.\nThe second line of the input contains one string \n    s\n consisting of\n\n    |s|\n lowercase Latin letters. Output Print one integer \u2014 the maximum\npossible number of characters you can remove if you choose the sequence of\nmoves optimally. Examples Input 8 bacabcab Output 4 Input 4 bcda Output 3\nInput 6 abbbbb Output 5 Note The first example is described in the problem\nstatement. Note that the sequence of moves provided in the statement is not\nthe only, but it can be shown that the maximum possible answer to this test is\n\n    4\n. In the second example, you can remove all but one character of\n\n    s\n. The only possible answer follows. During the first move, remove the\nthird character \n    s_3=\n d, \n    s\n becomes bca. During the second move,\nremove the second character \n    s_2=\n c, \n    s\n becomes ba. And during the\nthird move, remove the first character \n    s_1=\n b, \n    s\n becomes a.\n\n",
        "cf_contest_id": 1321,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "greedy",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8\r\nbacabcab\r\n",
                "4\r\n"
            ],
            [
                "4\r\nbcda\r\n",
                "3\r\n"
            ],
            [
                "6\r\nabbbbb\r\n",
                "5\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\na\r\n",
                "0\r\n"
            ],
            [
                "1\r\nt\r\n",
                "0\r\n"
            ],
            [
                "100\r\nciftajmzqbfkvbhnyugneialytrkwjlhzwltylptheadmypbjxdzkxnqovimgmzkwpuelzbbhciinfiyspfatgoexeezolulnliu\r\n",
                "0\r\n"
            ],
            [
                "100\r\nyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\r\n",
                "99\r\n"
            ],
            [
                "100\r\naaaaaabbcccccccddffffhhhhhhhhiiiiiikkkkkkkkmmmmmmooooooopppprrrrrrrrrttttttvvvvvvvvvvvvxxxxxxxzzzzzz\r\n",
                "21\r\n"
            ],
            [
                "100\r\nbabaababbaabbabababbabbbababababbaabababaaababaababbbaaababbaabbababababbababbabaabbaabaaaaabbababba\r\n",
                "50\r\n"
            ],
            [
                "100\r\nbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n",
                "99\r\n"
            ],
            [
                "100\r\nacdfijmnorszzyyzzzzzzyzzyzzzzxwzzzzzyzzzzzzyzzzzzzzyzzzzzyzzzzzzyxzzzyzzzzzyzzzzzyzzyzzzzvutqplkhgeb\r\n",
                "99\r\n"
            ],
            [
                "100\r\nabcdeghfgefedeefcabaaabcedfefedacbbcaaabehhjlkjikjloqrtuyzxwvspnmnlkjgfdcbacdcghfedfebaacbcbcdbccaaa\r\n",
                "85\r\n"
            ],
            [
                "100\r\nababaaaabaabaaaaaaabaaaaaaaaaaaaacbaaaabaaaaaabaabaaaababaaaabaehijkmnpqvxzywutsrolgfdcbaaaabaabaaaa\r\n",
                "40\r\n"
            ],
            [
                "100\r\naaaaaaabaaaaaabcaaaaaaaaaaaaaaaaaaaabbbaaaaaaabefhklmnopsuxzywvtrqjigdcaaaaaaaaaaaaaaaaaaaaaaaabaaaa\r\n",
                "32\r\n"
            ],
            [
                "100\r\naaaaabcjkprsvxyzwutqonmlihgfedaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n",
                "26\r\n"
            ],
            [
                "100\r\nyltrygcqmgjzsxoahbvovspancmoaltdrxgjnxwxbrehubvradguoqgiodzanljxtszdutuzgcnihmwevoloceyidyvoopnqbtlb\r\n",
                "9\r\n"
            ],
            [
                "100\r\naaaabbbcccccccdddddeeeeeffgggghhhiijjjjkkkllmmnnnoooppqqqrrrrssssssttttuuuuuuuuvvvvvwwwwxxxxyyyyzzzz\r\n",
                "96\r\n"
            ],
            [
                "100\r\nrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n",
                "0\r\n"
            ],
            [
                "100\r\nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\r\n",
                "0\r\n"
            ],
            [
                "100\r\njupemetthxolktvhbmzdwlrekwmcugngajdgifwseksjlibsdgmegmqtmeeeqszqjxjhjenjxofvkesfjugbzephryjqqkxatrvl\r\n",
                "1\r\n"
            ],
            [
                "100\r\nmxjrojjwtrauhhccftvjsyfyfsnbdnwjfltyjetsylbddrkoqjxbmientcowknrecfqcvxfgsbymwyvakmbulhvrxzvzbygajtgc\r\n",
                "2\r\n"
            ],
            [
                "100\r\nbldubjepvkwhjbxrueydtpparjszjgwpxjlqlpsmdrjoaagfnrohfcabchmdwaoctmilfbpztwjrfdgdioqggokdftcniqywmvjd\r\n",
                "3\r\n"
            ],
            [
                "100\r\nzbzevxgewibujtbyvhzohoobudkghaivlbpaywiesizahkdxmcpdoqzsxqglezenmsgvsmxcrzcntauvarpakddglhrjmzylfuyq\r\n",
                "4\r\n"
            ],
            [
                "100\r\nwhkbjjjrpcgsfaxgcmktmwypyfhbzvvowkvxltbmnyndqkswixxqxriopddrygymbcvadjjheugxgikrlirnhhsmnjmzpizyltau\r\n",
                "5\r\n"
            ],
            [
                "1\r\nz\r\n",
                "0\r\n"
            ],
            [
                "5\r\nbabaa\r\n",
                "2\r\n"
            ],
            [
                "5\r\nabbdd\r\n",
                "2\r\n"
            ],
            [
                "6\r\naaaaaa\r\n",
                "0\r\n"
            ],
            [
                "6\r\nbbbbab\r\n",
                "5\r\n"
            ],
            [
                "6\r\nbaabbb\r\n",
                "4\r\n"
            ],
            [
                "6\r\ndacbab\r\n",
                "3\r\n"
            ],
            [
                "7\r\naaaaaaa\r\n",
                "0\r\n"
            ],
            [
                "7\r\nbaaabab\r\n",
                "3\r\n"
            ],
            [
                "7\r\nccababa\r\n",
                "2\r\n"
            ],
            [
                "7\r\ncddcbcb\r\n",
                "5\r\n"
            ],
            [
                "8\r\naaaaaaaa\r\n",
                "0\r\n"
            ],
            [
                "8\r\naaabbaab\r\n",
                "3\r\n"
            ],
            [
                "8\r\nabababbc\r\n",
                "5\r\n"
            ],
            [
                "8\r\nbdaacddc\r\n",
                "2\r\n"
            ],
            [
                "9\r\naaaaaaaaa\r\n",
                "0\r\n"
            ],
            [
                "9\r\naabaaabab\r\n",
                "3\r\n"
            ],
            [
                "9\r\nbaccbbaca\r\n",
                "5\r\n"
            ],
            [
                "9\r\nacacaabaa\r\n",
                "1\r\n"
            ],
            [
                "10\r\naaaaaaaaaa\r\n",
                "0\r\n"
            ],
            [
                "10\r\nbbaabaabbb\r\n",
                "6\r\n"
            ],
            [
                "10\r\ncbbbbcaaca\r\n",
                "6\r\n"
            ],
            [
                "10\r\ncadbcdddda\r\n",
                "6\r\n"
            ]
        ]
    }
]