[
    {
        "name": "Party",
        "description": "A club plans to hold a party and will invite some of its \n    n\n members. The\n\n    n\n members are identified by the numbers \n    1, 2, \n    \u2026, n\n. If\nmember \n    i\n is not invited, the party will gain an unhappiness value of\n\n    a_i\n. There are \n    m\n pairs of friends among the \n    n\n members. As\nper tradition, if both people from a friend pair are invited, they will share\na cake at the party. The total number of cakes eaten will be equal to the\nnumber of pairs of friends such that both members have been invited. However,\nthe club's oven can only cook two cakes at a time. So, the club demands that\nthe total number of cakes eaten is an even number. What is the minimum\npossible total unhappiness value of the party, respecting the constraint that\nthe total number of cakes eaten is even? Input Each test contains multiple\ntest cases. The first line contains the number of test cases \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 10^4\n). The description of the test cases follows. The first\nline of each test case contains two integers \n    n\n and \n    m\n (\n    1 \n    \u2264\n    n \n    \u2264 10^5\n, \n    0 \n    \u2264 m \n    \u2264\n    min(10^5,\n    n(n-1)/2)\n) \u2014\nthe number of club members and pairs of friends. The second line of each test\ncase contains \n    n\n integers \n    a_1,a_2, \n    \u2026,a_n\n (\n    0 \n    \u2264 a_i\n    \n    \u2264 10^4\n) \u2014 the unhappiness value array. Each of the next \n    m\n lines\ncontains two integers \n    x\n and \n    y\n (\n    1 \n    \u2264 x,y \n    \u2264 n\n, \n    x\n    \n    \u2260 y\n) indicating that \n    x\n and \n    y\n are friends. Each unordered\npair \n    (x,y)\n appears at most once in each test case. It is guaranteed that\nboth the sum of \n    n\n and the sum of \n    m\n over all test cases do not\nexceed \n    10^5\n. Output For each test case, print a line containing a single\ninteger \u2013 the minimum possible unhappiness value of a valid party. Example\nInput 4 1 0 1 3 1 2 1 3 1 3 5 5 1 2 3 4 5 1 2 1 3 1 4 1 5 2 3 5 5 1 1 1 1 1 1\n2 2 3 3 4 4 5 5 1 Output 0 2 3 2 Note In the first test case, all members can\nbe invited. So the unhappiness value is \n    0\n. In the second test case, the\nfollowing options are possible: invite \n    1\n and \n    2\n (\n    0\n cakes\neaten, unhappiness value equal to \n    3\n); invite \n    2\n and \n    3\n\n(\n    0\n cakes eaten, unhappiness value equal to \n    2\n); invite only \n    1\n\n(\n    0\n cakes eaten, unhappiness value equal to \n    4\n); invite only \n    2\n\n(\n    0\n cakes eaten, unhappiness value equal to \n    5\n); invite only \n    3\n\n(\n    0\n cakes eaten, unhappiness value equal to \n    3\n); invite nobody\n(\n    0\n cakes eaten, unhappiness value equal to \n    6\n). The minimum\nunhappiness value is achieved by inviting \n    2\n and \n    3\n.In the third\ntest case, inviting members \n    3,4,5\n generates a valid party with the\nminimum possible unhappiness value.\n\n",
        "cf_contest_id": 1711,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "graphs"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 0\r\n1\r\n3 1\r\n2 1 3\r\n1 3\r\n5 5\r\n1 2 3 4 5\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n2 3\r\n5 5\r\n1 1 1 1 1\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 1\r\n",
                "0\r\n2\r\n3\r\n2\r\n"
            ]
        ],
        "private_cases": []
    }
]