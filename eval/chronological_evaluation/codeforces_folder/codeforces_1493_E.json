[
    {
        "name": "Enormous XOR",
        "description": "You are given two integers \n    l\n and \n    r\n in binary representation. Let\n\n    g(x, y)\n be equal to the bitwise XOR of all integers from \n    x\n to\n\n    y\n inclusive (that is \n    x \n    \u2295 (x+1) \n    \u2295\n    \u2026\n    \u2295 (y-1)\n    \n    \u2295 y\n). Let's define \n    f(l, r)\n as the maximum of all values of\n\n    g(x, y)\n satisfying \n    l \n    \u2264 x \n    \u2264 y \n    \u2264 r\n. Output \n    f(l,\n    r)\n. Input The first line contains a single integer \n    n\n (\n    1 \n    \u2264 n\n    \n    \u2264 10^6\n) \u2014 the length of the binary representation of \n    r\n. The\nsecond line contains the binary representation of \n    l\n \u2014 a string of length\n\n    n\n consisting of digits \n    0\n and \n    1\n (\n    0 \n    \u2264 l < 2^n\n). The\nthird line contains the binary representation of \n    r\n \u2014 a string of length\n\n    n\n consisting of digits \n    0\n and \n    1\n (\n    0 \n    \u2264 r < 2^n\n). It\nis guaranteed that \n    l \n    \u2264 r\n. The binary representation of \n    r\n does\nnot contain any extra leading zeros (if \n    r=0\n, the binary representation\nof it consists of a single zero). The binary representation of \n    l\n is\npreceded with leading zeros so that its length is equal to \n    n\n. Output In\na single line output the value of \n    f(l, r)\n for the given pair of \n    l\n\nand \n    r\n in binary representation without extra leading zeros. Examples\nInput 7 0010011 1111010 Output 1111111 Input 4 1010 1101 Output 1101 Note In\nsample test case \n    l=19\n, \n    r=122\n. \n    f(x,y)\n is maximal and is equal\nto \n    127\n, with \n    x=27\n, \n    y=100\n, for example.\n\n",
        "cf_contest_id": 1493,
        "cf_index": "E",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "constructive algorithms",
            "greedy",
            "math",
            "strings",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n0010011\r\n1111010\r\n",
                "1111111\r\n"
            ],
            [
                "4\r\n1010\r\n1101\r\n",
                "1101\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n0\r\n0\r\n",
                "0\r\n"
            ],
            [
                "1\r\n0\r\n1\r\n",
                "1\r\n"
            ],
            [
                "2\r\n00\r\n10\r\n",
                "11\r\n"
            ],
            [
                "2\r\n01\r\n10\r\n",
                "11\r\n"
            ],
            [
                "29\r\n00001010001110100010011100110\r\n11001110001010000110111110101\r\n",
                "11111111111111111111111111111\r\n"
            ],
            [
                "168\r\n011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\r\n100100000011011000001010111010100100110100101101110111100101000010110001111111111100100011101100100110010110101110000000101000100010101100001111100110101110110010101011\r\n",
                "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\r\n"
            ],
            [
                "10\r\n1100000010\r\n1100000010\r\n",
                "1100000010\r\n"
            ],
            [
                "5\r\n00100\r\n11000\r\n",
                "11111\r\n"
            ],
            [
                "5\r\n00001\r\n10100\r\n",
                "11111\r\n"
            ],
            [
                "5\r\n01001\r\n11101\r\n",
                "11111\r\n"
            ],
            [
                "5\r\n01010\r\n10011\r\n",
                "11111\r\n"
            ],
            [
                "9\r\n011101110\r\n101010011\r\n",
                "111111111\r\n"
            ],
            [
                "2\r\n00\r\n11\r\n",
                "11\r\n"
            ],
            [
                "2\r\n01\r\n11\r\n",
                "11\r\n"
            ],
            [
                "2\r\n10\r\n11\r\n",
                "11\r\n"
            ],
            [
                "4\r\n1011\r\n1101\r\n",
                "1101\r\n"
            ],
            [
                "3\r\n101\r\n110\r\n",
                "110\r\n"
            ],
            [
                "4\r\n1011\r\n1110\r\n",
                "1111\r\n"
            ],
            [
                "5\r\n10111\r\n11100\r\n",
                "11101\r\n"
            ]
        ]
    }
]