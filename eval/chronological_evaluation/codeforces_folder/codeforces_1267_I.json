[
    {
        "name": "Intriguing Selection",
        "description": "This is an interactive problem. You are the head coach of a chess club. The\nclub has \n    2n\n players, each player has some strength which can be\nrepresented by a number, and all those numbers are distinct. The strengths of\nthe players are not known to you. You need to select \n    n\n players who would\nrepresent your club in the upcoming championship. Naturally, you want to\nselect \n    n\n players with the highest strengths. You can organize matches\nbetween the players to do that. In every match, you pick two players, they\nplay some games, and you learn which one of the two has higher strength. You\ncan wait for the outcome of a match before deciding who will participate in\nthe next one. However, you do not want to know exactly how those \n    n\n\nplayers compare between themselves, as that would make the championship itself\nless intriguing. More formally, you must reach a state where there is exactly\none way to choose \n    n\n players with the highest strengths that is\nconsistent with the outcomes of the matches you organized, but there must be\nat least two possible orderings of those \n    n\n players by strength that are\nconsistent with the outcomes of the matches you organized. Interaction Your\nprogram has to process multiple test cases in one run. First, it should read\nthe integer \n    t\n (\n    t \n    \u2265 1\n) \u2014 the number of test cases. Then, it\nshould process the test cases one by one. In each test case, your program\nshould start by reading the integer \n    n\n (\n    3 \n    \u2264 n \n    \u2264 100\n) \u2014 the\nnumber of players to select out of \n    2n\n players. The sum of squares of the\nvalues of \n    n\n over all test cases does not exceed \n    10\n     000\n. Then\nyour program can organize matches zero or more times. To organize a match,\nyour program should print a match description formatted as ? \n    i\n \n    j\n \u2014\na question mark followed by two distinct numbers of players participating in\nthe match. The players are numbered from 1 to \n    2n\n, inclusive. Remember to\nflush the output after printing the match description. Then your program\nshould read the match outcome \u2014 it will be either the greater-than character\n(>), if the first player in the match description has higher strength, or the\nless-than character (<), if the second player in the match description has\nhigher strength. Your program can organize at most \n    4n^2\n matches. After\nit is done organizing matches, it should print the exclamation mark (!) and\ncontinue to the next test case, or exit gracefully if this was the last test\ncase. Remember to flush the output after printing the exclamation mark. There\nmust be exactly one way to choose \n    n\n players with the highest strength\nthat is consistent with the outcomes of the matches you organized, but there\nmust be at least two possible orderings of those \n    n\n players by their\nstrength that are consistent with the outcomes of the matches you organized.\nThe judging program picks some distinct numbers as the strengths of all\nplayers before your program starts organizing matches and uses them to answer\nthe requests. Example Input 2 3 > < > < > > 3 < < < > > Output ? 1 3 ? 4 2 ? 4\n5 ? 6 5 ? 3 4 ? 5 6 ! ? 3 4 ? 4 2 ? 5 3 ? 6 4 ? 3 1 ! Note In the example, the\nplayers in the first test case are sorted by strength in decreasing order.\nFrom the matches in the example output, we can deduce that players 1, 2, and 3\nhave the highest strength, but we do not know how the player 1 compares to the\nplayer 2.\n\n",
        "cf_contest_id": 1267,
        "cf_index": "I",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "implementation",
            "interactive",
            "sortings"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "2\r\n3\r\n6 5 4 3 2 1\r\n3\r\n1 5 3 4 2 6\r\n",
                "1 2\r\n3 4\r\n5 6\r\n4 2\r\n4 2\r\n6 2\r\n6 4\r\n5 3\r\n5 3\r\n3 4\r\n5 2\r\n-1\r\n1 2\r\n3 4\r\n5 6\r\n3 1\r\n5 3\r\n5 1\r\n5 3\r\n6 2\r\n6 5\r\n2 3\r\n-1\r\n"
            ]
        ],
        "private_cases": []
    }
]