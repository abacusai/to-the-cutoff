[
    {
        "name": "Koxia and Bracket",
        "description": "Chiyuu has a bracket sequence\n    ^\n    \u2020\n \n    s\n of length \n    n\n. Let\n\n    k\n be the minimum number of characters that Chiyuu has to remove from\n\n    s\n to make \n    s\n balanced\n    ^\n. Now, Koxia wants you to\ncount the number of ways to remove \n    k\n characters from \n    s\n so that\n\n    s\n becomes balanced, modulo \n    998\n     244\n     353\n. Note that two ways\nof removing characters are considered distinct if and only if the set of\nindices removed is different. \n    ^\n    \u2020\n A bracket sequence is a string\ncontaining only the characters \"(\" and \")\". \n    ^\n A bracket\nsequence is called balanced if one can turn it into a valid math expression by\nadding characters + and 1. For example, sequences (())(), (), (()(())) and the\nempty string are balanced, while )(, ((), and (()))( are not. Input The first\nline of input contains a string \n    s\n (\n    1 \n    \u2264 |s| \n    \u2264 5 \n    \u00b710^5\n) \u2014 the bracket sequence. It is guaranteed that \n    s\n only contains\nthe characters \"(\" and \")\". Output Output a single integer \u2014 the number of\nways to remove \n    k\n characters from \n    s\n so that \n    s\n becomes\nbalanced, modulo \n    998\n     244\n     353\n. Examples Input ())(() Output 4 Input\n( Output 1 Note In the first test case, it can be proved that the minimum\nnumber of characters that Chiyuu has to remove is \n    2\n. There are \n    4\n\nways to remove \n    2\n characters to make \n    s\n balanced as follows. Deleted\ncharacters are noted as red. \n    \n,\n\n    \n, \n    \n, \n    \n. In the second test case, the only way to make \n    s\n\nbalanced is by deleting the only character to get an empty bracket sequence,\nwhich is considered balanced.\n\n",
        "cf_contest_id": 1770,
        "cf_index": "G",
        "cf_rating": 3400,
        "difficulty": 0,
        "cf_tags": [
            "divide and conquer",
            "fft",
            "math"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "())(()\r\n",
                "4\r\n"
            ],
            [
                "(\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "()\r\n",
                "1\r\n"
            ],
            [
                "())\r\n",
                "2\r\n"
            ],
            [
                "))()))))))\r\n",
                "7\r\n"
            ],
            [
                ")((())()()\r\n",
                "5\r\n"
            ],
            [
                "))()((()((\r\n",
                "3\r\n"
            ]
        ]
    }
]