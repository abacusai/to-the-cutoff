[
    {
        "name": "Build Permutation",
        "description": "A \n    0\n-indexed array \n    a\n of size \n    n\n is called good if\nfor all valid indices \n    i\n (\n    0 \n    \u2264 i \n    \u2264 n-1\n), \n    a_i + i\n is a\nperfect square\n    ^\n    \u2020\n. Given an integer \n    n\n. Find a\npermutation\n    ^\n \n    p\n of \n    [0,1,2,\n    \u2026,n-1]\n that is\ngood or determine that no such permutation exists. \n    ^\n    \u2020\n An integer\n\n    x\n is said to be a perfect square if there exists an integer \n    y\n such\nthat \n    x = y^2\n. \n    ^\n An array \n    b\n is a permutation of an\narray \n    a\n if \n    b\n consists of the elements of \n    a\n in arbitrary\norder. For example, \n    [4,2,3,4]\n is a permutation of \n    [3,2,4,4]\n while\n\n    [1,2,2]\n is not a permutation of \n    [1,2,3]\n. Input The first line\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of\ntest cases. The only line of each test case contains a single integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the length of the permutation \n    p\n. It is\nguaranteed that the sum of \n    n\n over all test cases does not exceed\n\n    10^5\n. Output For each test case, output \n    n\n distinct integers\n\n    p_0, p_1, \n    \u2026, p_n-1\n (\n    0 \n    \u2264 p_i \n    \u2264 n-1\n) \u2014 the\npermutation \n    p\n \u2014 if the answer exists, and \n    -1\n otherwise. Example\nInput 3 3 4 7 Output 1 0 2 0 3 2 1 1 0 2 6 5 4 3 Note In the first test case,\nwe have \n    n=3\n. The array \n    p = [1, 0, 2]\n is good since \n    1 + 0 =\n    1^2\n, \n    0 + 1 = 1^2\n, and \n    2 + 2 = 2^2\n In the second test case, we\nhave \n    n=4\n. The array \n    p = [0, 3, 2, 1]\n is good since \n    0 + 0 =\n    0^2\n, \n    3 + 1 = 2^2\n, \n    2+2 = 2^2\n, and \n    1+3 = 2^2\n.\n\n",
        "cf_contest_id": 1713,
        "cf_index": "C",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dp",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3\r\n4\r\n7\r\n",
                "1 0 2\r\n0 3 2 1\r\n1 0 2 6 5 4 3\r\n"
            ]
        ],
        "private_cases": []
    }
]