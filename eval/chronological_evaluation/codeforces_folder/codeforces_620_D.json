[
    {
        "name": "Professor GukiZ and Two Arrays",
        "description": "Professor GukiZ has two arrays of integers, a and b. Professor wants to make\nthe sum of the elements in the array a sa as close as possible to the sum of\nthe elements in the array b sb. So he wants to minimize the value v = |sa -\nsb|. In one operation professor can swap some element from the array a and\nsome element from the array b. For example if the array a is [5, 1, 3, 2, 4]\nand the array b is [3, 3, 2] professor can swap the element 5 from the array a\nand the element 2 from the array b and get the new array a [2, 1, 3, 2, 4] and\nthe new array b [3, 3, 5]. Professor doesn't want to make more than two swaps.\nFind the minimal value v and some sequence of no more than two swaps that will\nlead to the such value v. Professor makes swaps one by one, each new swap he\nmakes with the new arrays a and b. Input The first line contains integer n (1\n\u2264 n \u2264 2000) \u2014 the number of elements in the array a. The second line contains\nn integers ai ( - 10^9 \u2264 ai \u2264 10^9) \u2014 the elements of the array a. The third\nline contains integer m (1 \u2264 m \u2264 2000) \u2014 the number of elements in the array\nb. The fourth line contains m integers bj ( - 10^9 \u2264 bj \u2264 10^9) \u2014 the elements\nof the array b. Output In the first line print the minimal value v = |sa - sb|\nthat can be got with no more than two swaps. The second line should contain\nthe number of swaps k (0 \u2264 k \u2264 2). Each of the next k lines should contain two\nintegers xp, yp (1 \u2264 xp \u2264 n, 1 \u2264 yp \u2264 m) \u2014 the index of the element in the\narray a and the index of the element in the array b in the p-th swap. If there\nare several optimal solutions print any of them. Print the swaps in order the\nprofessor did them. Examples Input 5 5 4 3 2 1 4 1 1 1 1 Output 1 2 1 1 4 2\nInput 5 1 2 3 4 5 1 15 Output 0 0 Input 5 1 2 3 4 5 4 1 2 3 4 Output 1 1 3 1\n\n",
        "cf_contest_id": 620,
        "cf_index": "D",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "two pointers"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n5 4 3 2 1\r\n4\r\n1 1 1 1\r\n",
                "1\r\n2\r\n1 1\r\n3 2\r\n"
            ],
            [
                "5\r\n1 2 3 4 5\r\n1\r\n15\r\n",
                "0\r\n0\r\n"
            ],
            [
                "5\r\n1 2 3 4 5\r\n4\r\n1 2 3 4\r\n",
                "1\r\n1\r\n3 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n-42\r\n1\r\n-86\r\n",
                "44\r\n0\r\n"
            ],
            [
                "1\r\n-21\r\n10\r\n-43 6 -46 79 -21 93 -36 -38 -67 1\r\n",
                "1\r\n1\r\n1 3\r\n"
            ],
            [
                "10\r\n87 -92 -67 -100 -88 80 -82 -59 81 -72\r\n10\r\n-50 30 30 77 65 92 -60 -76 -29 -15\r\n",
                "0\r\n2\r\n4 4\r\n9 6\r\n"
            ],
            [
                "6\r\n1 2 3 4 5 11\r\n1\r\n3\r\n",
                "7\r\n1\r\n6 1\r\n"
            ],
            [
                "2\r\n-2 -17\r\n2\r\n11 -9\r\n",
                "5\r\n1\r\n1 1\r\n"
            ]
        ]
    }
]