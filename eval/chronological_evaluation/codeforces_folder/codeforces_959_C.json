[
    {
        "name": "Mahmoud and Ehab and the wrong algorithm",
        "description": "Mahmoud was trying to solve the vertex cover problem on trees. The problem\nstatement is: Given an undirected tree consisting of n nodes, find the minimum\nnumber of vertices that cover all the edges. Formally, we need to find a set\nof vertices such that for each edge (u, v) that belongs to the tree, either u\nis in the set, or v is in the set, or both are in the set. Mahmoud has found\nthe following algorithm: Root the tree at node 1. Count the number of nodes at\nan even depth. Let it be evenCnt. Count the number of nodes at an odd depth.\nLet it be oddCnt. The answer is the minimum between evenCnt and oddCnt. The\ndepth of a node in a tree is the number of edges in the shortest path between\nthis node and the root. The depth of the root is 0. Ehab told Mahmoud that\nthis algorithm is wrong, but he didn't believe because he had tested his\nalgorithm against many trees and it worked, so Ehab asked you to find 2 trees\nconsisting of n nodes. The algorithm should find an incorrect answer for the\nfirst tree and a correct answer for the second one. Input The only line\ncontains an integer n (2 \u2264 n \u2264 10^5), the number of nodes in the desired\ntrees. Output The output should consist of 2 independent sections, each\ncontaining a tree. The algorithm should find an incorrect answer for the tree\nin the first section and a correct answer for the tree in the second. If a\ntree doesn't exist for some section, output \"-1\" (without quotes) for that\nsection only. If the answer for a section exists, it should contain n - 1\nlines, each containing 2 space-separated integers u and v (1 \u2264 u, v \u2264 n),\nwhich means that there's an undirected edge between node u and node v. If the\ngiven graph isn't a tree or it doesn't follow the format, you'll receive wrong\nanswer verdict. If there are multiple answers, you can print any of them.\nExamples Input 2 Output -1 1 2 Input 8 Output 1 2 1 3 2 4 2 5 3 6 4 7 4 8 1 2\n1 3 2 4 2 5 2 6 3 7 6 8 Note In the first sample, there is only 1 tree with 2\nnodes (node 1 connected to node 2). The algorithm will produce a correct\nanswer in it so we printed - 1 in the first section, but notice that we\nprinted this tree in the second section. In the second sample: In the first\ntree, the algorithm will find an answer with 4 nodes, while there exists an\nanswer with 3 nodes like this: In the second tree, the algorithm will find an\nanswer with 3 nodes which is correct:\n\n",
        "cf_contest_id": 959,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n",
                "-1\r\n1 2\r\n"
            ],
            [
                "8\r\n",
                "1 2\r\n1 3\r\n1 4\r\n2 5\r\n2 6\r\n2 7\r\n2 8\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n",
                "-1\r\n1 2\r\n1 3\r\n"
            ],
            [
                "4\r\n",
                "-1\r\n1 2\r\n1 3\r\n1 4\r\n"
            ],
            [
                "5\r\n",
                "-1\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n"
            ],
            [
                "6\r\n",
                "1 2\r\n1 3\r\n1 4\r\n2 5\r\n2 6\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n"
            ],
            [
                "7\r\n",
                "1 2\r\n1 3\r\n1 4\r\n2 5\r\n2 6\r\n2 7\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n"
            ],
            [
                "11\r\n",
                "1 2\r\n1 3\r\n1 4\r\n2 5\r\n2 6\r\n2 7\r\n2 8\r\n2 9\r\n2 10\r\n2 11\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n1 9\r\n1 10\r\n1 11\r\n"
            ],
            [
                "13\r\n",
                "1 2\r\n1 3\r\n1 4\r\n2 5\r\n2 6\r\n2 7\r\n2 8\r\n2 9\r\n2 10\r\n2 11\r\n2 12\r\n2 13\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n1 9\r\n1 10\r\n1 11\r\n1 12\r\n1 13\r\n"
            ],
            [
                "21\r\n",
                "1 2\r\n1 3\r\n1 4\r\n2 5\r\n2 6\r\n2 7\r\n2 8\r\n2 9\r\n2 10\r\n2 11\r\n2 12\r\n2 13\r\n2 14\r\n2 15\r\n2 16\r\n2 17\r\n2 18\r\n2 19\r\n2 20\r\n2 21\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n1 9\r\n1 10\r\n1 11\r\n1 12\r\n1 13\r\n1 14\r\n1 15\r\n1 16\r\n1 17\r\n1 18\r\n1 19\r\n1 20\r\n1 21\r\n"
            ],
            [
                "31\r\n",
                "1 2\r\n1 3\r\n1 4\r\n2 5\r\n2 6\r\n2 7\r\n2 8\r\n2 9\r\n2 10\r\n2 11\r\n2 12\r\n2 13\r\n2 14\r\n2 15\r\n2 16\r\n2 17\r\n2 18\r\n2 19\r\n2 20\r\n2 21\r\n2 22\r\n2 23\r\n2 24\r\n2 25\r\n2 26\r\n2 27\r\n2 28\r\n2 29\r\n2 30\r\n2 31\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n1 9\r\n1 10\r\n1 11\r\n1 12\r\n1 13\r\n1 14\r\n1 15\r\n1 16\r\n1 17\r\n1 18\r\n1 19\r\n1 20\r\n1 21\r\n1 22\r\n1 23\r\n1 24\r\n1 25\r\n1 26\r\n1 27\r\n1 28\r\n1 29\r\n1 30\r\n1 31\r\n"
            ],
            [
                "43\r\n",
                "1 2\r\n1 3\r\n1 4\r\n2 5\r\n2 6\r\n2 7\r\n2 8\r\n2 9\r\n2 10\r\n2 11\r\n2 12\r\n2 13\r\n2 14\r\n2 15\r\n2 16\r\n2 17\r\n2 18\r\n2 19\r\n2 20\r\n2 21\r\n2 22\r\n2 23\r\n2 24\r\n2 25\r\n2 26\r\n2 27\r\n2 28\r\n2 29\r\n2 30\r\n2 31\r\n2 32\r\n2 33\r\n2 34\r\n2 35\r\n2 36\r\n2 37\r\n2 38\r\n2 39\r\n2 40\r\n2 41\r\n2 42\r\n2 43\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n1 9\r\n1 10\r\n1 11\r\n1 12\r\n1 13\r\n1 14\r\n1 15\r\n1 16\r\n1 17\r\n1 18\r\n1 19\r\n1 20\r\n1 21\r\n1 22\r\n1 23\r\n1 24\r\n1 25\r\n1 26\r\n1 27\r\n1 28\r\n1 29\r\n1 30\r\n1 31\r\n1 32\r\n1 33\r\n1 34\r\n1 35\r\n1 36\r\n1 37\r\n1 38\r\n1 39\r\n1 40\r\n1 41\r\n1 42\r\n1 43\r\n"
            ]
        ]
    }
]