[
    {
        "name": "Weighed Tree Radius",
        "description": "You are given a tree of \n    n\n vertices and \n    n - 1\n edges. The \n    i\n-th\nvertex has an initial weight \n    a_i\n. Let the distance \n    d_v(u)\n from\nvertex \n    v\n to vertex \n    u\n be the number of edges on the path from\n\n    v\n to \n    u\n. Note that \n    d_v(u) = d_u(v)\n and \n    d_v(v) = 0\n. Let\nthe weighted distance \n    w_v(u)\n from \n    v\n to \n    u\n be \n    w_v(u) =\n    d_v(u) + a_u\n. Note that \n    w_v(v) = a_v\n and \n    w_v(u) \n    \u2260 w_u(v)\n\nif \n    a_u \n    \u2260 a_v\n. Analogically to usual distance, let's define the\neccentricity \n    e(v)\n of vertex \n    v\n as the greatest weighted distance\nfrom \n    v\n to any other vertex (including \n    v\n itself), or \n    e(v) =\n    \n    max\n    _1 \n    \u2264 u \n    \u2264 nw_v(u)\n. Finally, let's define the\nradius \n    r\n of the tree as the minimum eccentricity of any vertex, or \n    r\n    = \n    min\n    _1 \n    \u2264 v \n    \u2264 ne(v)\n. You need to perform \n    m\n\nqueries of the following form: \n    v_j\n \n    x_j\n \u2014 assign \n    a_v_j =\n    x_j\n. After performing each query, print the radius \n    r\n of the current\ntree. Input The first line contains the single integer \n    n\n (\n    2 \n    \u2264 n\n    \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of vertices in the tree. The second line\ncontains \n    n\n integers \n    a_1, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264\n    10^6\n) \u2014 the initial weights of vertices. Next \n    n - 1\n lines contain\nedges of tree. The \n    i\n-th line contains two integers \n    u_i\n and\n\n    v_i\n (\n    1 \n    \u2264 u_i, v_i \n    \u2264 n\n; \n    u_i \n    \u2260 v_i\n) \u2014 the\ncorresponding edge. The given edges form a tree. The next line contains the\nsingle integer \n    m\n (\n    1 \n    \u2264 m \n    \u2264 10^5\n) \u2014 the number of queries.\nNext \n    m\n lines contain queries \u2014 one query per line. The \n    j\n-th query\ncontains two integers \n    v_j\n and \n    x_j\n (\n    1 \n    \u2264 v_j \n    \u2264 n\n; \n    0\n    \n    \u2264 x_j \n    \u2264 10^6\n) \u2014 a vertex and it's new weight. Output Print \n    m\n\nintegers \u2014 the radius \n    r\n of the tree after performing each query. Example\nInput 6 1 3 3 7 0 1 2 1 1 3 1 4 5 4 4 6 5 4 7 4 0 2 5 5 10 5 5 Output 7 4 5 10\n7 Note After the first query, you have the following tree: The marked vertex\nin the picture is the vertex with minimum \n    e(v)\n, or \n    r = e(4) = 7\n.\nThe eccentricities of the other vertices are the following: \n    e(1) = 8\n,\n\n    e(2) = 9\n, \n    e(3) = 9\n, \n    e(5) = 8\n, \n    e(6) = 8\n.The tree after\nthe second query: The radius \n    r = e(1) = 4\n.After the third query, the\nradius \n    r = e(2) = 5\n:\n\n",
        "cf_contest_id": 1783,
        "cf_index": "G",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "divide and conquer",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "6\r\n1 3 3 7 0 1\r\n2 1\r\n1 3\r\n1 4\r\n5 4\r\n4 6\r\n5\r\n4 7\r\n4 0\r\n2 5\r\n5 10\r\n5 5\r\n",
                "7\r\n4\r\n5\r\n10\r\n7\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n0 0\r\n1 2\r\n1\r\n2 1000000\r\n",
                "1000000\r\n"
            ]
        ]
    }
]