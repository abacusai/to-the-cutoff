[
    {
        "name": "Comfortably Numb",
        "description": "You are given an array \n    a\n consisting of \n    n\n non-negative integers.\nThe numbness of a subarray \n    a_l, a_l+1, \n    \u2026, a_r\n (for arbitrary\n\n    l \n    \u2264 r\n) is defined as \n    \n\n    max(a_l, a_l+1, \n    \u2026, a_r)\n    \n    \u2295 (a_l \n    \u2295 a_l+1\n    \u2295\n    \u2026\n    \u2295 a_r),\n\n    \n where\n\n    \u2295\n denotes the bitwise XOR operation. Find the maximum numbness\nover all subarrays. Input Each test contains multiple test cases. The first\nline contains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n).\nThe description of the test cases follows. The first line of each test case\ncontains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n).\nThe second line of each test case contains \n    n\n integers \n    a_1, a_2,\n    \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 10^9\n). It is guaranteed that the\nsum of \n    n\n over all test cases does not exceed \n    2 \n    \u00b7 10^5\n.\nOutput For each test case, print one integer \u2014 the maximum numbness over all\nsubarrays of the given array. Example Input 2 5 1 2 3 4 5 3 10 47 52 Output 7\n47 Note For the first test case, for the subarray \n    [3, 4, 5]\n, its maximum\nvalue is \n    5\n. Hence, its numbness is \n    3 \n    \u2295 4 \n    \u2295 5 \n    \u2295\n    5\n = \n    7\n. This is the maximum possible numbness in this array. In the\nsecond test case the subarray \n    [47, 52]\n provides the maximum numbness.\n\n",
        "cf_contest_id": 1777,
        "cf_index": "F",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "data structures",
            "divide and conquer",
            "strings",
            "trees"
        ],
        "time_limit_seconds": 8.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "2\r\n5\r\n1 2 3 4 5\r\n3\r\n10 47 52\r\n",
                "7\r\n47\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n10\r\n999999999 999999999 1000000000 999999999 1000000000 1000000000 1000000000 999999999 1000000000 999999999\r\n",
                "1000000000\r\n"
            ]
        ]
    }
]