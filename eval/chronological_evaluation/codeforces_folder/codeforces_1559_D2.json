[
    {
        "name": "Mocha and Diana (Hard Version)",
        "description": "This is the hard version of the problem. The only difference between the two\nversions is the constraint on \n    n\n. You can make hacks only if all versions\nof the problem are solved. A forest is an undirected graph without cycles (not\nnecessarily connected). Mocha and Diana are friends in Zhijiang, both of them\nhave a forest with nodes numbered from \n    1\n to \n    n\n, and they would like\nto add edges to their forests such that: After adding edges, both of their\ngraphs are still forests. They add the same edges. That is, if an edge \n    (u,\n    v)\n is added to Mocha's forest, then an edge \n    (u, v)\n is added to\nDiana's forest, and vice versa. Mocha and Diana want to know the maximum\nnumber of edges they can add, and which edges to add. Input The first line\ncontains three integers \n    n\n, \n    m_1\n and \n    m_2\n (\n    1 \n    \u2264 n \n    \u2264\n    10^5\n, \n    0 \n    \u2264 m_1, m_2 < n\n) \u2014 the number of nodes and the number of\ninitial edges in Mocha's forest and Diana's forest. Each of the next \n    m_1\n\nlines contains two integers \n    u\n and \n    v\n (\n    1 \n    \u2264 u, v \n    \u2264 n\n,\n\n    u \n    \u2260 v\n) \u2014 the edges in Mocha's forest. Each of the next \n    m_2\n\nlines contains two integers \n    u\n and \n    v\n (\n    1 \n    \u2264 u, v \n    \u2264 n\n,\n\n    u \n    \u2260 v\n) \u2014 the edges in Diana's forest. Output The first line\ncontains only one integer \n    h\n, the maximum number of edges Mocha and Diana\ncan add. Each of the next \n    h\n lines contains two integers \n    u\n and\n\n    v\n (\n    1 \n    \u2264 u, v \n    \u2264 n\n, \n    u \n    \u2260 v\n) \u2014 the edge you add each\ntime. If there are multiple correct answers, you can print any one of them.\nExamples Input 3 2 2 1 2 2 3 1 2 1 3 Output 0 Input 5 3 2 5 4 2 1 4 3 4 3 1 4\nOutput 1 2 4 Input 8 1 2 1 7 2 6 1 5 Output 5 5 2 2 3 3 4 4 7 6 8 Note In the\nfirst example, we cannot add any edge. In the second example, the initial\nforests are as follows. We can add an edge \n    (2, 4)\n.\n\n",
        "cf_contest_id": 1559,
        "cf_index": "D2",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy",
            "trees",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2 2\r\n1 2\r\n2 3\r\n1 2\r\n1 3\r\n",
                "0\r\n"
            ],
            [
                "5 3 2\r\n5 4\r\n2 1\r\n4 3\r\n4 3\r\n1 4\r\n",
                "1\r\n1 5\r\n"
            ],
            [
                "8 1 2\r\n1 7\r\n2 6\r\n1 5\r\n",
                "5\r\n1 2\r\n1 3\r\n1 4\r\n1 8\r\n5 7\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 4 4\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n",
                "0\r\n"
            ],
            [
                "1 0 0\r\n",
                "0\r\n"
            ],
            [
                "10 5 6\r\n1 5\r\n3 4\r\n6 7\r\n9 2\r\n1 7\r\n10 8\r\n7 8\r\n7 5\r\n9 6\r\n2 9\r\n8 4\r\n",
                "3\r\n1 2\r\n1 3\r\n1 8\r\n"
            ]
        ]
    }
]