[
    {
        "name": "Bad Days",
        "description": "Every day Kotlin heroes analyze the statistics of their website. For \n    n\n\ndays, they wrote out \n    n\n numbers \n    a_1, a_2, \n    \u2026, a_n\n, where\n\n    a_i\n is the number of visits on the \n    i\n-th day. They believe that a\nday is bad if there are at least \n    2\n days before it with a strictly\ngreater number of visits. For example, if \n    n=8\n and \n    a=[3, 1, 4, 1, 5,\n    9, 2, 6]\n, then the day \n    4\n is bad (because \n    a_4=1\n, but there are\n\n    a_1=3\n and \n    a_3=4\n). Also, the day with the number \n    7\n is bad\ntoo. Write a program that finds the number of bad days. Input The first line\ncontains an integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \u00b710^5\n), where\n\n    n\n is the number of days. The second line contains \n    n\n positive\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n), where\n\n    a_i\n is the number of website visits on the \n    i\n-th day. Output Print\nthe number of bad days, i.e. such days that there are at least two days before\nit with a strictly greater number of visits. Examples Input 8 3 1 4 1 5 9 2 6\nOutput 2 Input 5 1 1 1 1 1 Output 0 Input 13 2 7 1 8 2 8 1 8 2 8 4 5 9 Output\n6\n\n",
        "cf_contest_id": 1170,
        "cf_index": "B",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "implementation"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8\r\n3 1 4 1 5 9 2 6\r\n",
                "2\r\n"
            ],
            [
                "5\r\n1 1 1 1 1\r\n",
                "0\r\n"
            ],
            [
                "13\r\n2 7 1 8 2 8 1 8 2 8 4 5 9\r\n",
                "6\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1000000000\r\n",
                "0\r\n"
            ],
            [
                "2\r\n1 2\r\n",
                "0\r\n"
            ],
            [
                "3\r\n3 2 1\r\n",
                "1\r\n"
            ],
            [
                "3\r\n2 2 1\r\n",
                "1\r\n"
            ],
            [
                "3\r\n2 1 1\r\n",
                "0\r\n"
            ]
        ]
    }
]