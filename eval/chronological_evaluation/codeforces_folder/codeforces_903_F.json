[
    {
        "name": "Clear The Matrix",
        "description": "You are given a matrix f with 4 rows and n columns. Each element of the matrix\nis either an asterisk (*) or a dot (.). You may perform the following\noperation arbitrary number of times: choose a square submatrix of f with size\nk \u00d7 k (where 1 \u2264 k \u2264 4) and replace each element of the chosen submatrix with\na dot. Choosing a submatrix of size k \u00d7 k costs ak coins. What is the minimum\nnumber of coins you have to pay to replace all asterisks with dots? Input The\nfirst line contains one integer n (4 \u2264 n \u2264 1000) \u2014 the number of columns in f.\nThe second line contains 4 integers a1, a2, a3, a4 (1 \u2264 ai \u2264 1000) \u2014 the cost\nto replace the square submatrix of size 1 \u00d7 1, 2 \u00d7 2, 3 \u00d7 3 or 4 \u00d7 4,\nrespectively. Then four lines follow, each containing n characters and\ndenoting a row of matrix f. Each character is either a dot or an asterisk.\nOutput Print one integer \u2014 the minimum number of coins to replace all\nasterisks with dots. Examples Input 4 1 10 8 20 ***. ***. ***. ...* Output 9\nInput 7 2 1 8 2 .***... .***..* .***... ....*.. Output 3 Input 4 10 10 1 10\n***. *..* *..* .*** Output 2 Note In the first example you can spend 8 coins\nto replace the submatrix 3 \u00d7 3 in the top-left corner, and 1 coin to replace\nthe 1 \u00d7 1 submatrix in the bottom-right corner. In the second example the best\noption is to replace the 4 \u00d7 4 submatrix containing columns 2 \u2013 5, and the 2 \u00d7\n2 submatrix consisting of rows 2 \u2013 3 and columns 6 \u2013 7. In the third example\nyou can select submatrix 3 \u00d7 3 in the top-left corner and then submatrix 3 \u00d7 3\nconsisting of rows 2 \u2013 4 and columns 2 \u2013 4.\n\n",
        "cf_contest_id": 903,
        "cf_index": "F",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "dp"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 10 8 20\r\n***.\r\n***.\r\n***.\r\n...*\r\n",
                "9"
            ],
            [
                "7\r\n2 1 8 2\r\n.***...\r\n.***..*\r\n.***...\r\n....*..\r\n",
                "3"
            ],
            [
                "4\r\n10 10 1 10\r\n***.\r\n*..*\r\n*..*\r\n.***\r\n",
                "2"
            ]
        ],
        "private_cases": [
            [
                "5\r\n2 1 2 1\r\n*.***\r\n***.*\r\n.*..*\r\n***..\r\n",
                "2"
            ],
            [
                "4\r\n18 17 3 15\r\n**..\r\n***.\r\n*..*\r\n****\r\n",
                "9"
            ],
            [
                "6\r\n8 2 11 9\r\n.*.***\r\n..**.*\r\n.**.**\r\n*.****\r\n",
                "12"
            ],
            [
                "4\r\n1 1 1 1\r\n****\r\n****\r\n****\r\n****\r\n",
                "1"
            ],
            [
                "10\r\n433 514 452 478\r\n**********\r\n**********\r\n**********\r\n**********\r\n",
                "1434"
            ],
            [
                "4\r\n1000 1000 1000 1000\r\n****\r\n****\r\n****\r\n****\r\n",
                "1000"
            ],
            [
                "4\r\n1 4 9 16\r\n****\r\n**.*\r\n*.**\r\n..**\r\n",
                "12"
            ],
            [
                "4\r\n1 4 9 15\r\n****\r\n****\r\n****\r\n****\r\n",
                "15"
            ]
        ]
    }
]