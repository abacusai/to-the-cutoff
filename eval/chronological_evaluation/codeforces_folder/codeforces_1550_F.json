[
    {
        "name": "Jumping Around",
        "description": "There is an infinite pond that can be represented with a number line. There\nare \n    n\n rocks in the pond, numbered from \n    1\n to \n    n\n. The\n\n    i\n-th rock is located at an integer coordinate \n    a_i\n. The coordinates\nof the rocks are pairwise distinct. The rocks are numbered in the increasing\norder of the coordinate, so \n    a_1 < a_2 < \n    \u2026 < a_n\n. A robot frog sits\non the rock number \n    s\n. The frog is programmable. It has a base jumping\ndistance parameter \n    d\n. There also is a setting for the jumping distance\nrange. If the jumping distance range is set to some integer \n    k\n, then the\nfrog can jump from some rock to any rock at a distance from \n    d - k\n to\n\n    d + k\n inclusive in any direction. The distance between two rocks is an\nabsolute difference between their coordinates. You are assigned a task to\nimplement a feature for the frog. Given two integers \n    i\n and \n    k\n\ndetermine if the frog can reach a rock number \n    i\n from a rock number\n\n    s\n performing a sequence of jumps with the jumping distance range set to\n\n    k\n. The sequence can be arbitrarily long or empty. You will be given\n\n    q\n testcases for that feature, the \n    j\n-th testcase consists of two\nintegers \n    i\n and \n    k\n. Print \"Yes\" if the \n    i\n-th rock is reachable\nand \"No\" otherwise. You can output \"YES\" and \"NO\" in any case (for example,\nstrings \"yEs\", \"yes\", \"Yes\" and 'YES\"' will be recognized as a positive\nanswer). Input The first line contains four integers \n    n\n, \n    q\n, \n    s\n\nand \n    d\n (\n    1 \n    \u2264 n, q \n    \u2264 2 \n    \u00b7 10^5\n; \n    1 \n    \u2264 s \n    \u2264 n\n;\n\n    1 \n    \u2264 d \n    \u2264 10^6\n) \u2014 the number of rocks, the number of testcases,\nthe starting rock and the base jumping distance parameter. The second line\ncontains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264\n    10^6\n) \u2014 the coordinates of the rocks. The coordinates of the rocks are\npairwise distinct. The rocks are numbered in the increasing order of distance\nfrom the land, so \n    a_1 < a_2 < \n    \u2026 < a_n\n. Each of the next \n    q\n\nlines contains two integers \n    i\n and \n    k\n (\n    1 \n    \u2264 i \n    \u2264 n\n; \n    1\n    \n    \u2264 k \n    \u2264 10^6\n) \u2014 the parameters to the testcase. Output For each of\nthe testcases print an answer. If there is a sequence of jumps from a rock\nnumber \n    s\n to a rock number \n    i\n with the jumping distance range set to\n\n    k\n, then print \"Yes\". Otherwise, print \"No\". Examples Input 7 4 4 5 1 5\n10 13 20 22 28 4 1 7 2 7 3 3 2 Output Yes No Yes Yes Input 10 8 6 11 1 2 4 7 8\n9 11 13 19 20 2 13 5 8 8 1 6 15 1 15 2 7 7 6 8 9 Output Yes Yes No Yes Yes Yes\nYes Yes Input 6 9 6 6 1 2 4 9 18 19 2 17 1 18 5 4 2 11 5 17 6 8 4 3 3 3 6 6\nOutput Yes Yes Yes Yes Yes Yes No No Yes Input 4 1 1 10 1 8 10 19 2 1 Output\nYes Note Explanation of the first example: In the first testcase the\ndestination rock is the same as the starting rock, thus no jumps are required\nto reach it. In the second testcase the frog can jump any distance in the\nrange \n    [5 - 2; 5 + 2]\n. Thus, it can reach rock number \n    5\n (by jumping\n\n    7\n to the right) and rock number \n    3\n (by jumping \n    3\n to the\nleft). From rock number \n    3\n it can reach rock number \n    2\n (by jumping\n\n    5\n to the left). From rock number \n    2\n it can reach rock number\n\n    1\n (by jumping \n    4\n to the left). However, there is no way to reach\nrock number \n    7\n. In the third testcase the frog can jump any distance in\nthe range \n    [5 - 3; 5 + 3]\n. Thus, it can reach rock number \n    7\n by\njumping to rock \n    5\n first and to \n    7\n afterwards. The fourth testcase\nis shown in the explanation for the second testcase.\n\n",
        "cf_contest_id": 1550,
        "cf_index": "F",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "divide and conquer",
            "dp",
            "dsu",
            "graphs",
            "shortest paths"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 4 4 5\r\n1 5 10 13 20 22 28\r\n4 1\r\n7 2\r\n7 3\r\n3 2\r\n",
                "YES\r\nNO\r\nYES\r\nYES\r\n"
            ],
            [
                "10 8 6 11\r\n1 2 4 7 8 9 11 13 19 20\r\n2 13\r\n5 8\r\n8 1\r\n6 15\r\n1 15\r\n2 7\r\n7 6\r\n8 9\r\n",
                "YES\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\n"
            ],
            [
                "6 9 6 6\r\n1 2 4 9 18 19\r\n2 17\r\n1 18\r\n5 4\r\n2 11\r\n5 17\r\n6 8\r\n4 3\r\n3 3\r\n6 6\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\n"
            ],
            [
                "4 1 1 10\r\n1 8 10 19\r\n2 1\r\n",
                "YES\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 10 5 8\r\n16 21 63 77 78 79 81 83 96 97\r\n10 96\r\n7 52\r\n2 18\r\n9 61\r\n8 11\r\n2 91\r\n10 86\r\n3 1\r\n6 85\r\n10 99\r\n",
                "YES\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\n"
            ],
            [
                "10 30 7 88\r\n3 6 15 16 19 26 35 50 77 80\r\n1 17\r\n3 69\r\n9 30\r\n8 44\r\n6 43\r\n9 40\r\n1 28\r\n10 19\r\n5 35\r\n7 100\r\n1 34\r\n1 56\r\n8 65\r\n10 60\r\n3 41\r\n10 1\r\n4 45\r\n3 91\r\n5 93\r\n5 14\r\n4 66\r\n6 28\r\n1 15\r\n7 50\r\n3 99\r\n8 78\r\n5 21\r\n2 12\r\n4 27\r\n4 94\r\n",
                "NO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\n"
            ],
            [
                "1 1 1 1\r\n23452\r\n1 1\r\n",
                "YES\r\n"
            ]
        ]
    }
]