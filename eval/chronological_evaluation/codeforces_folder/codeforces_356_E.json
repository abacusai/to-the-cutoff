[
    {
        "name": "Xenia and String Problem",
        "description": "Xenia the coder went to The Olympiad of Informatics and got a string problem.\nUnfortunately, Xenia isn't fabulous in string algorithms. Help her solve the\nproblem. String s is a sequence of characters s1s2... s|s|, where record |s|\nshows the length of the string. Substring s[i... j] of string s is string sisi\n+ 1... sj. String s is a Gray string, if it meets the conditions: the length\nof string |s| is odd; character occurs exactly once in the string; either |s|\n= 1, or substrings and are the same and are Gray strings. For example, strings\n\"abacaba\", \"xzx\", \"g\" are Gray strings and strings \"aaa\", \"xz\", \"abaxcbc\" are\nnot. The beauty of string p is the sum of the squares of the lengths of all\nsubstrings of string p that are Gray strings. In other words, consider all\npairs of values i, j (1 \u2264 i \u2264 j \u2264 |p|). If substring p[i... j] is a Gray\nstring, you should add (j - i + 1)^2 to the beauty. Xenia has got string t\nconsisting of lowercase English letters. She is allowed to replace at most one\nletter of the string by any other English letter. The task is to get a string\nof maximum beauty. Input The first line contains a non-empty string t (1 \u2264 |t|\n\u2264 10^5). String t only consists of lowercase English letters. Output Print the\nsought maximum beauty value Xenia can get. Please do not use the \nspecifier to read or write 64-bit integers in \u0421++. It is preferred to use the\ncin, cout streams or the \naba Output 12 Input abacaba Output 83 Input aaaaaa Output 15 Note In the first\ntest sample the given string can be transformed into string p = \"zbz\". Such\nstring contains Gray strings as substrings p[1... 1], p[2... 2], p[3... 3] \u0438\np[1... 3]. In total, the beauty of string p gets equal to 1^2 + 1^2 + 1^2 +\n3^2 = 12. You can't obtain a more beautiful string. In the second test case it\nis not necessary to perform any operation. The initial string has the maximum\npossible beauty.\n\n",
        "cf_contest_id": 356,
        "cf_index": "E",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "hashing",
            "implementation",
            "string suffix structures",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "zzz\r\n",
                "12\r\n"
            ],
            [
                "aba\r\n",
                "12\r\n"
            ],
            [
                "abacaba\r\n",
                "83\r\n"
            ],
            [
                "aaaaaa\r\n",
                "15\r\n"
            ]
        ],
        "private_cases": [
            [
                "a\r\n",
                "1\r\n"
            ],
            [
                "aa\r\n",
                "2\r\n"
            ],
            [
                "abababaaababababbabb\r\n",
                "186\r\n"
            ],
            [
                "dsjasdjqwz\r\n",
                "28\r\n"
            ],
            [
                "lkjmjsjasda\r\n",
                "38\r\n"
            ],
            [
                "maeamcmlkdja\r\n",
                "48\r\n"
            ],
            [
                "babaaaababbba\r\n",
                "76\r\n"
            ],
            [
                "aababbbaaabaab\r\n",
                "68\r\n"
            ],
            [
                "baaababaabaabab\r\n",
                "96\r\n"
            ],
            [
                "baabzazababbbbaa\r\n",
                "70\r\n"
            ],
            [
                "aabaabadabacbaaca\r\n",
                "129\r\n"
            ],
            [
                "bacdabaacabadabacaba\r\n",
                "279\r\n"
            ],
            [
                "bacabadabacabaadabacabaababadabacababacabcabaaabacaadadabacabadababacabadabacaacabadabacababaabbbada\r\n",
                "1327\r\n"
            ],
            [
                "badabacaabaccabcabcabaabaccbacababacaabadababadabacabacabadabbacaccabaabacaababacacabadaabacabaaacaca\r\n",
                "998\r\n"
            ],
            [
                "cabadadabacabadabaaac\r\n",
                "474\r\n"
            ],
            [
                "abaaacaba\r\n",
                "103\r\n"
            ],
            [
                "z\r\n",
                "1\r\n"
            ],
            [
                "az\r\n",
                "2\r\n"
            ],
            [
                "zdf\r\n",
                "12\r\n"
            ],
            [
                "axx\r\n",
                "12\r\n"
            ],
            [
                "xxa\r\n",
                "12\r\n"
            ],
            [
                "abxxxba\r\n",
                "34\r\n"
            ],
            [
                "arbacaba\r\n",
                "84\r\n"
            ],
            [
                "abrcaba\r\n",
                "83\r\n"
            ],
            [
                "abaraba\r\n",
                "83\r\n"
            ],
            [
                "abacrba\r\n",
                "83\r\n"
            ],
            [
                "abacara\r\n",
                "83\r\n"
            ],
            [
                "abacabr\r\n",
                "83\r\n"
            ]
        ]
    }
]