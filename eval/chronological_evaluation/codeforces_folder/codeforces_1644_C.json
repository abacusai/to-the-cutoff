[
    {
        "name": "Increase Subarray Sums",
        "description": "You are given an array \n    a_1, a_2, \n    \u2026, a_n\n, consisting of \n    n\n\nintegers. You are also given an integer value \n    x\n. Let \n    f(k)\n be the\nmaximum sum of a contiguous subarray of \n    a\n after applying the following\noperation: add \n    x\n to the elements on exactly \n    k\n distinct positions.\nAn empty subarray should also be considered, it has sum \n    0\n. Note that the\nsubarray doesn't have to include all of the increased elements. Calculate the\nmaximum value of \n    f(k)\n for all \n    k\n from \n    0\n to \n    n\n\nindependently. Input The first line contains a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 5000\n) \u2014 the number of testcases. The first line of the\ntestcase contains two integers \n    n\n and \n    x\n (\n    1 \n    \u2264 n \n    \u2264\n    5000\n; \n    0 \n    \u2264 x \n    \u2264 10^5\n) \u2014 the number of elements in the array and\nthe value to add. The second line contains \n    n\n integers \n    a_1, a_2,\n    \n    \u2026, a_n\n (\n    -10^5 \n    \u2264 a_i \n    \u2264 10^5\n). The sum of \n    n\n over\nall testcases doesn't exceed \n    5000\n. Output For each testcase, print \n    n\n    + 1\n integers \u2014 the maximum value of \n    f(k)\n for all \n    k\n from \n    0\n\nto \n    n\n independently. Example Input 3 4 2 4 1 3 2 3 5 -2 -7 -1 10 2 -6 -1\n-2 4 -6 -1 -4 4 -5 -4 Output 10 12 14 16 18 0 4 4 5 4 6 6 7 7 7 7 8 8 8 8 Note\nIn the first testcase, it doesn't matter which elements you add \n    x\n to.\nThe subarray with the maximum sum will always be the entire array. If you\nincrease \n    k\n elements by \n    x\n, \n    k \n    \u00b7 x\n will be added to the\nsum. In the second testcase: For \n    k = 0\n, the empty subarray is the best\noption. For \n    k = 1\n, it's optimal to increase the element at position\n\n    3\n. The best sum becomes \n    -1 + 5 = 4\n for a subarray \n    [3, 3]\n.\nFor \n    k = 2\n, it's optimal to increase the element at position \n    3\n and\nany other element. The best sum is still \n    4\n for a subarray \n    [3, 3]\n.\nFor \n    k = 3\n, you have to increase all elements. The best sum becomes\n\n    (-2 + 5) + (-7 + 5) + (-1 + 5) = 5\n for a subarray \n    [1, 3]\n.\n\n",
        "cf_contest_id": 1644,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dp",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n4 2\r\n4 1 3 2\r\n3 5\r\n-2 -7 -1\r\n10 2\r\n-6 -1 -2 4 -6 -1 -4 4 -5 -4\r\n",
                "10 12 14 16 18\r\n0 4 4 5\r\n4 6 6 7 7 7 7 8 8 8 8\r\n"
            ]
        ],
        "private_cases": []
    }
]