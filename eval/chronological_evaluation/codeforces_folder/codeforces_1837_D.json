[
    {
        "name": "Bracket Coloring",
        "description": "A regular bracket sequence is a bracket sequence that can be transformed into\na correct arithmetic expression by inserting characters \"1\" and \"+\" between\nthe original characters of the sequence. For example: the bracket sequences\n\"()()\" and \"(())\" are regular (the resulting expressions are: \"(1)+(1)\" and\n\"((1+1)+1)\"); the bracket sequences \")(\", \"(\" and \")\" are not. A bracket\nsequence is called beautiful if one of the following conditions is satisfied:\nit is a regular bracket sequence; if the order of the characters in this\nsequence is reversed, it becomes a regular bracket sequence. For example, the\nbracket sequences \"()()\", \"(())\", \")))(((\", \"))()((\" are beautiful. You are\ngiven a bracket sequence \n    s\n. You have to color it in such a way that:\nevery bracket is colored into one color; for every color, there is at least\none bracket colored into that color; for every color, if you write down the\nsequence of brackets having that color in the order they appear, you will get\na beautiful bracket sequence. Color the given bracket sequence \n    s\n into\nthe minimum number of colors according to these constraints, or report that it\nis impossible. Input The first line contains one integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 10^4\n) \u2014 the number of test cases. Each test case consists of two\nlines. The first line contains one integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n) \u2014 the number of characters in \n    s\n. The second line\ncontains \n    s\n \u2014 a string of \n    n\n characters, where each character is\neither \"(\" or \")\". Additional constraint on the input: the sum of \n    n\n over\nall test cases does not exceed \n    2 \n    \u00b7 10^5\n. Output For each test\ncase, print the answer as follows: if it is impossible to color the brackets\naccording to the problem statement, print \n    -1\n; otherwise, print two\nlines. In the first line, print one integer \n    k\n (\n    1 \n    \u2264 k \n    \u2264 n\n)\n\u2014 the minimum number of colors. In the second line, print \n    n\n integers\n\n    c_1, c_2, \n    \u2026, c_n\n (\n    1 \n    \u2264 c_i \n    \u2264 k\n), where \n    c_i\n is\nthe color of the \n    i\n-th bracket. If there are multiple answers, print any\nof them. Example Input 4 8 ((())))( 4 (()) 4 ))(( 3 (() Output 2 2 2 2 1 2 2 2\n1 1 1 1 1 1 1 1 1 1 1 -1\n\n",
        "cf_contest_id": 1837,
        "cf_index": "D",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4\r\n8\r\n((())))(\r\n4\r\n(())\r\n4\r\n))((\r\n3\r\n(()\r\n",
                "2\r\n1 1 1 1 1 1 2 2 \r\n1\r\n1 1 1 1 \r\n1\r\n1 1 1 1 \r\n-1\r\n"
            ]
        ],
        "private_cases": []
    }
]