[
    {
        "name": "Magic Ship",
        "description": "You a captain of a ship. Initially you are standing in a point \n    (x_1,\n    y_1)\n (obviously, all positions in the sea can be described by cartesian\nplane) and you want to travel to a point \n    (x_2, y_2)\n. You know the\nweather forecast \u2014 the string \n    s\n of length \n    n\n, consisting only of\nletters U, D, L and R. The letter corresponds to a direction of wind.\nMoreover, the forecast is periodic, e.g. the first day wind blows to the side\n\n    s_1\n, the second day \u2014 \n    s_2\n, the \n    n\n-th day \u2014 \n    s_n\n and\n\n    (n+1)\n-th day \u2014 \n    s_1\n again and so on. Ship coordinates change the\nfollowing way: if wind blows the direction U, then the ship moves from \n    (x,\n    y)\n to \n    (x, y + 1)\n; if wind blows the direction D, then the ship moves\nfrom \n    (x, y)\n to \n    (x, y - 1)\n; if wind blows the direction L, then the\nship moves from \n    (x, y)\n to \n    (x - 1, y)\n; if wind blows the direction\nR, then the ship moves from \n    (x, y)\n to \n    (x + 1, y)\n. The ship can\nalso either go one of the four directions or stay in place each day. If it\ngoes then it's exactly 1 unit of distance. Transpositions of the ship and the\nwind add up. If the ship stays in place, then only the direction of wind\ncounts. For example, if wind blows the direction U and the ship moves the\ndirection L, then from point \n    (x, y)\n it will move to the point \n    (x - 1,\n    y + 1)\n, and if it goes the direction U, then it will move to the point\n\n    (x, y + 2)\n. You task is to determine the minimal number of days required\nfor the ship to reach the point \n    (x_2, y_2)\n. Input The first line\ncontains two integers \n    x_1, y_1\n (\n    0 \n    \u2264 x_1, y_1 \n    \u2264 10^9\n) \u2014 the\ninitial coordinates of the ship. The second line contains two integers \n    x_2,\n    y_2\n (\n    0 \n    \u2264 x_2, y_2 \n    \u2264 10^9\n) \u2014 the coordinates of the\ndestination point. It is guaranteed that the initial coordinates and\ndestination point coordinates are different. The third line contains a single\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the length of the string\n\n    s\n. The fourth line contains the string \n    s\n itself, consisting only\nof letters U, D, L and R. Output The only line should contain the minimal\nnumber of days required for the ship to reach the point \n    (x_2, y_2)\n. If\nit's impossible then print \"-1\". Examples Input 0 0 4 6 3 UUU Output 5 Input 0\n3 0 0 3 UDD Output 3 Input 0 0 0 1 1 L Output -1 Note In the first example the\nship should perform the following sequence of moves: \"RRRRU\". Then its\ncoordinates will change accordingly: \n    (0, 0)\n \n    \u2192\n \n    (1,\n    1)\n \n    \u2192\n \n    (2, 2)\n \n    \u2192\n \n    (3, 3)\n\n\n    \u2192\n \n    (4, 4)\n \n    \u2192\n \n    (4, 6)\n. In the\nsecond example the ship should perform the following sequence of moves: \"DD\"\n(the third day it should stay in place). Then its coordinates will change\naccordingly: \n    (0, 3)\n \n    \u2192\n \n    (0, 3)\n \n    \u2192\n\n\n    (0, 1)\n \n    \u2192\n \n    (0, 0)\n. In the third example the ship\ncan never reach the point \n    (0, 1)\n.\n\n",
        "cf_contest_id": 1117,
        "cf_index": "C",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "binary search"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "0 0\r\n4 6\r\n3\r\nUUU\r\n",
                "5\r\n"
            ],
            [
                "0 3\r\n0 0\r\n3\r\nUDD\r\n",
                "3\r\n"
            ],
            [
                "0 0\r\n0 1\r\n1\r\nL\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "0 0\r\n0 1\r\n2\r\nLU\r\n",
                "2\r\n"
            ],
            [
                "0 0\r\n1000000000 1000000000\r\n2\r\nDR\r\n",
                "2000000000\r\n"
            ],
            [
                "0 1\r\n2 1\r\n1\r\nR\r\n",
                "1\r\n"
            ]
        ]
    }
]