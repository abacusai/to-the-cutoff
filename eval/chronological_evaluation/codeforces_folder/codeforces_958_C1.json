[
    {
        "name": "Encryption (easy)",
        "description": "Rebel spy Heidi has just obtained the plans for the Death Star from the Empire\nand, now on her way to safety, she is trying to break the encryption of the\nplans (of course they are encrypted \u2013 the Empire may be evil, but it is not\nstupid!). The encryption has several levels of security, and here is how the\nfirst one looks. Heidi is presented with a screen that shows her a sequence of\nintegers A and a positive integer p. She knows that the encryption code is a\nsingle number S, which is defined as follows: Define the score of X to be the\nsum of the elements of X modulo p. Heidi is given a sequence A that consists\nof N integers, and also given an integer p. She needs to split A into 2 parts\nsuch that: Each part contains at least 1 element of A, and each part consists\nof contiguous elements of A. The two parts do not overlap. The total sum S of\nthe scores of those two parts is maximized. This is the encryption code.\nOutput the sum S, which is the encryption code. Input The first line of the\ninput contains two space-separated integer N and p (2 \u2264 N \u2264 100 000, 2 \u2264 p \u2264\n10 000) \u2013 the number of elements in A, and the modulo for computing scores,\nrespectively. The second line contains N space-separated integers which are\nthe elements of A. Each integer is from the interval [1, 1 000 000]. Output\nOutput the number S as described in the problem statement. Examples Input 4 10\n3 4 7 2 Output 16 Input 10 12 16 3 24 13 9 8 7 5 12 12 Output 13 Note In the\nfirst example, the score is maximized if the input sequence is split into two\nparts as (3, 4), (7, 2). It gives the total score of . In the second example,\nthe score is maximized if the first part consists of the first three elements,\nand the second part consists of the rest. Then, the score is .\n\n",
        "cf_contest_id": 958,
        "cf_index": "C1",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "brute force"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 10\r\n3 4 7 2\r\n",
                "16\r\n"
            ],
            [
                "10 12\r\n16 3 24 13 9 8 7 5 12 12\r\n",
                "13\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 2\r\n9 9\r\n",
                "2\r\n"
            ],
            [
                "2 2\r\n8 8\r\n",
                "0\r\n"
            ],
            [
                "5 50\r\n1 1 1 1 1\r\n",
                "5\r\n"
            ],
            [
                "5 50\r\n100 150 200 100 50\r\n",
                "0\r\n"
            ]
        ]
    }
]