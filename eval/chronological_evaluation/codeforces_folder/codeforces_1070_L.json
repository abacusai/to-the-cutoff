[
    {
        "name": "Odd Federalization",
        "description": "Berland has \n    n\n cities, some of which are connected by roads. Each road is\nbidirectional, connects two distinct cities and for each two cities there's at\nmost one road connecting them. The president of Berland decided to split\ncountry into \n    r\n states in such a way that each city will belong to\nexactly one of these \n    r\n states. After this split each road will connect\neither cities of the same state or cities of the different states. Let's call\nroads that connect two cities of the same state \"inner\" roads. The president\ndoesn't like odd people, odd cities and odd numbers, so he wants this split to\nbe done in such a way that each city would have even number of \"inner\" roads\nconnected to it. Please help president to find smallest possible \n    r\n for\nwhich such a split exists. Input The input contains one or several test cases.\nThe first input line contains a single integer number \n    t\n \u2014 number of test\ncases. Then, \n    t\n test cases follow. Solve test cases separately, test\ncases are completely independent and do not affect each other. Then \n    t\n\nblocks of input data follow. Each block starts from empty line which separates\nit from the remaining input data. The second line of each block contains two\nspace-separated integers \n    n\n, \n    m\n (\n    1 \n    \u2264 n \n    \u2264 2000\n, \n    0\n    \n    \u2264 m \n    \u2264 10000\n) \u2014 the number of cities and number of roads in the\nBerland. Each of the next \n    m\n lines contains two space-separated integers\n\u2014 \n    x_i\n, \n    y_i\n (\n    1 \n    \u2264 x_i, y_i \n    \u2264 n\n; \n    x_i \n     y_i\n),\nwhich denotes that the \n    i\n-th road connects cities \n    x_i\n and\n\n    y_i\n. Each pair of cities are connected by at most one road. Sum of\nvalues \n    n\n across all test cases doesn't exceed \n    2000\n. Sum of values\n\n    m\n across all test cases doesn't exceed \n    10000\n. Output For each test\ncase first print a line containing a single integer \n    r\n \u2014 smallest\npossible number of states for which required split is possible. In the next\nline print \n    n\n space-separated integers in range from \n    1\n to \n    r\n,\ninclusive, where the \n    j\n-th number denotes number of state for the\n\n    j\n-th city. If there are multiple solutions, print any. Example Input 2 5\n3 1 2 2 5 1 5 6 5 1 2 2 3 3 4 4 2 4 1 Output 1 1 1 1 1 1 2 2 1 1 1 1 1\n\n",
        "cf_contest_id": 1070,
        "cf_index": "L",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n\r\n5 3\r\n1 2\r\n2 5\r\n1 5\r\n\r\n6 5\r\n1 2\r\n2 3\r\n3 4\r\n4 2\r\n4 1\r\n",
                "1\r\n1 1 1 1 1 \r\n2\r\n2 1 1 1 1 1 \r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n\r\n5 7\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 1\r\n2 5\r\n3 5\r\n",
                "2\r\n2 1 1 2 1 \r\n"
            ],
            [
                "3\r\n\r\n4 5\r\n1 2\r\n1 3\r\n2 3\r\n3 4\r\n4 1\r\n\r\n7 6\r\n1 2\r\n1 3\r\n2 3\r\n3 4\r\n4 1\r\n5 4\r\n\r\n7 7\r\n1 2\r\n1 3\r\n1 5\r\n2 3\r\n3 4\r\n4 1\r\n5 6\r\n",
                "2\r\n1 2 1 1 \r\n2\r\n1 1 1 2 1 1 1 \r\n2\r\n1 2 1 1 2 1 1 \r\n"
            ]
        ]
    }
]