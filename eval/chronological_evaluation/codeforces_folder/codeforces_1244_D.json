[
    {
        "name": "Paint the Tree",
        "description": "You are given a tree consisting of \n    n\n vertices. A tree is an undirected\nconnected acyclic graph. Example of a tree. You have to paint each vertex into\none of three colors. For each vertex, you know the cost of painting it in\nevery color. You have to paint the vertices so that any path consisting of\nexactly three distinct vertices does not contain any vertices with equal\ncolors. In other words, let's consider all triples \n    (x, y, z)\n such that\n\n    x \n    \u2260 y, y \n    \u2260 z, x \n    \u2260 z\n, \n    x\n is connected by an edge with\n\n    y\n, and \n    y\n is connected by an edge with \n    z\n. The colours of\n\n    x\n, \n    y\n and \n    z\n should be pairwise distinct. Let's call a\npainting which meets this condition good. You have to calculate the minimum\ncost of a good painting and find one of the optimal paintings. If there is no\ngood painting, report about it. Input The first line contains one integer\n\n    n\n \n    (3 \n    \u2264 n \n    \u2264 100\n     000)\n \u2014 the number of vertices. The\nsecond line contains a sequence of integers \n    c_1, 1, c_1, 2, \n    \u2026,\n    c_1, n\n \n    (1 \n    \u2264 c_1, i\n    \u2264 10^9)\n, where \n    c_1, i\n is the\ncost of painting the \n    i\n-th vertex into the first color. The third line\ncontains a sequence of integers \n    c_2, 1, c_2, 2, \n    \u2026, c_2, n\n\n\n    (1 \n    \u2264 c_2, i\n    \u2264 10^9)\n, where \n    c_2, i\n is the cost of\npainting the \n    i\n-th vertex into the second color. The fourth line contains\na sequence of integers \n    c_3, 1, c_3, 2, \n    \u2026, c_3, n\n \n    (1 \n    \u2264\n    c_3, i\n    \u2264 10^9)\n, where \n    c_3, i\n is the cost of painting the\n\n    i\n-th vertex into the third color. Then \n    (n - 1)\n lines follow, each\ncontaining two integers \n    u_j\n and \n    v_j\n \n    (1 \n    \u2264 u_j, v_j \n    \u2264 n,\n    u_j \n    \u2260 v_j)\n \u2014 the numbers of vertices connected by the \n    j\n-th\nundirected edge. It is guaranteed that these edges denote a tree. Output If\nthere is no good painting, print \n    -1\n. Otherwise, print the minimum cost\nof a good painting in the first line. In the second line print \n    n\n\nintegers \n    b_1, b_2, \n    \u2026, b_n\n \n    (1 \n    \u2264 b_i \n    \u2264 3)\n, where the\n\n    i\n-th integer should denote the color of the \n    i\n-th vertex. If there\nare multiple good paintings with minimum cost, print any of them. Examples\nInput 3 3 2 3 4 3 2 3 1 3 1 2 2 3 Output 6 1 3 2 Input 5 3 4 2 1 2 4 2 1 5 4 5\n3 2 1 1 1 2 3 2 4 3 5 3 Output -1 Input 5 3 4 2 1 2 4 2 1 5 4 5 3 2 1 1 1 2 3\n2 4 3 5 4 Output 9 1 3 2 1 3 Note All vertices should be painted in different\ncolors in the first example. The optimal way to do it is to paint the first\nvertex into color \n    1\n, the second vertex \u2014 into color \n    3\n, and the\nthird vertex \u2014 into color \n    2\n. The cost of this painting is \n    3 + 2 + 1 =\n    6\n.\n\n",
        "cf_contest_id": 1244,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "dp",
            "graphs",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3 2 3\r\n4 3 2\r\n3 1 3\r\n1 2\r\n2 3\r\n",
                "6\r\n1 3 2 "
            ],
            [
                "5\r\n3 4 2 1 2\r\n4 2 1 5 4\r\n5 3 2 1 1\r\n1 2\r\n3 2\r\n4 3\r\n5 3\r\n",
                "-1"
            ],
            [
                "5\r\n3 4 2 1 2\r\n4 2 1 5 4\r\n5 3 2 1 1\r\n1 2\r\n3 2\r\n4 3\r\n5 4\r\n",
                "9\r\n1 3 2 1 3 "
            ]
        ],
        "private_cases": [
            [
                "4\r\n4 7 3 2\r\n2 3 7 2\r\n1 1 2 1\r\n4 3\r\n1 2\r\n3 2\r\n",
                "8\r\n3 2 1 3 "
            ],
            [
                "7\r\n1 8 3 2 6 3 2\r\n2 6 6 5 4 1 9\r\n6 4 7 1 5 5 2\r\n2 6\r\n1 6\r\n6 4\r\n3 4\r\n2 5\r\n7 1\r\n",
                "-1"
            ],
            [
                "4\r\n55 70 35 4\r\n90 10 100 6\r\n58 87 24 21\r\n3 4\r\n1 2\r\n3 2\r\n",
                "93\r\n1 2 3 1 "
            ],
            [
                "5\r\n17 51 38 4 38\r\n21 75 13 82 43\r\n62 32 84 72 29\r\n1 4\r\n4 3\r\n2 5\r\n3 2\r\n",
                "149\r\n3 3 2 1 1 "
            ],
            [
                "10\r\n100 26 100 22 4 32 29 23 41 26\r\n54 20 97 84 12 13 45 73 91 41\r\n25 53 52 33 97 80 100 7 31 36\r\n5 4\r\n10 7\r\n3 9\r\n8 2\r\n3 1\r\n1 2\r\n6 10\r\n8 5\r\n4 6\r\n",
                "364\r\n2 1 3 1 2 3 1 3 1 2 "
            ],
            [
                "15\r\n10 34 69 39 82 49 57 22 50 25 82 37 33 62 69\r\n35 14 68 31 26 8 33 98 33 95 19 22 89 18 67\r\n80 24 10 5 26 85 69 21 29 38 89 24 78 68 88\r\n13 1\r\n6 12\r\n8 4\r\n11 9\r\n14 11\r\n15 5\r\n3 15\r\n1 10\r\n13 9\r\n7 12\r\n14 6\r\n3 2\r\n2 7\r\n4 5\r\n",
                "620\r\n2 3 2 2 3 3 1 1 3 3 2 2 1 1 1 "
            ],
            [
                "14\r\n91 43 4 87 52 50 48 57 96 79 91 64 44 22\r\n69 11 42 26 61 87 4 50 19 46 52 71 27 83\r\n2 1 16 76 21 5 66 40 54 4 44 5 47 55\r\n1 10\r\n2 10\r\n4 12\r\n11 3\r\n7 2\r\n5 6\r\n12 1\r\n13 8\r\n3 6\r\n4 14\r\n8 9\r\n2 13\r\n11 7\r\n",
                "-1"
            ],
            [
                "8\r\n69 44 1 96 69 29 8 74\r\n89 77 25 99 2 32 41 40\r\n38 6 18 33 43 25 63 12\r\n1 4\r\n3 1\r\n8 5\r\n1 6\r\n6 2\r\n2 7\r\n7 5\r\n",
                "-1"
            ],
            [
                "10\r\n26 100 22 4 32 29 23 41 26 54\r\n20 97 84 12 13 45 73 91 41 25\r\n53 52 33 97 80 100 7 31 36 99\r\n8 2\r\n3 1\r\n10 4\r\n8 5\r\n1 2\r\n6 10\r\n10 7\r\n5 4\r\n3 9\r\n",
                "-1"
            ],
            [
                "15\r\n34 69 39 82 49 57 22 50 25 82 37 33 62 69 35\r\n14 68 31 26 8 33 98 33 95 19 22 89 18 67 80\r\n24 10 5 26 85 69 21 29 38 89 24 78 68 88 65\r\n5 2\r\n13 1\r\n2 7\r\n6 12\r\n14 6\r\n8 4\r\n14 11\r\n13 9\r\n15 3\r\n7 12\r\n1 10\r\n5 4\r\n15 5\r\n11 9\r\n",
                "-1"
            ],
            [
                "7\r\n2 3 1 6 4 2 3\r\n3 1 7 4 3 3 3\r\n4 6 2 2 6 3 2\r\n4 2\r\n7 5\r\n7 1\r\n2 7\r\n6 2\r\n3 4\r\n",
                "-1"
            ],
            [
                "5\r\n3 5 2 7 8\r\n1 7 2 8 8\r\n3 3 6 7 3\r\n2 3\r\n2 5\r\n2 1\r\n4 5\r\n",
                "-1"
            ],
            [
                "6\r\n3 3 1 3 2 3\r\n1 3 1 4 5 3\r\n3 1 6 3 4 4\r\n5 4\r\n6 3\r\n1 5\r\n2 5\r\n2 6\r\n",
                "-1"
            ],
            [
                "5\r\n3 5 3 4 1\r\n3 4 5 4 5\r\n1 1 1 4 4\r\n1 3\r\n4 1\r\n4 2\r\n5 2\r\n",
                "10\r\n1 3 3 2 1 "
            ],
            [
                "4\r\n2 3 5 2\r\n4 5 5 6\r\n4 2 4 3\r\n4 3\r\n1 4\r\n2 3\r\n",
                "13\r\n1 1 2 3 "
            ]
        ]
    }
]