[
    {
        "name": "Gardener and Tree",
        "description": "A tree is an undirected connected graph in which there are no cycles. This\nproblem is about non-rooted trees. A leaf of a tree is a vertex that is\nconnected to at most one vertex. The gardener Vitaly grew a tree from \n    n\n\nvertices. He decided to trim the tree. To do this, he performs a number of\noperations. In one operation, he removes all leaves of the tree. Example of a\ntree. For example, consider the tree shown in the figure above. The figure\nbelow shows the result of applying exactly one operation to the tree. The\nresult of applying the operation \"remove all leaves\" to the tree. Note the\nspecial cases of the operation: applying an operation to an empty tree (of\n\n    0\n vertices) does not change it; applying an operation to a tree of one\nvertex removes this vertex (this vertex is treated as a leaf); applying an\noperation to a tree of two vertices removes both vertices (both vertices are\ntreated as leaves). Vitaly applied \n    k\n operations sequentially to the\ntree. How many vertices remain? Input The first line contains one integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. Then \n    t\n\ntest cases follow. Each test case is preceded by an empty line. Each test case\nconsists of several lines. The first line of the test case contains two\nintegers \n    n\n and \n    k\n (\n    1 \n    \u2264 n \n    \u2264 4 \n    \u00b7 10^5\n, \n    1 \n    \u2264\n    k \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of vertices in the tree and the number\nof operations, respectively. Then \n    n - 1\n lines follow, each of them\ncontains two integers \n    u\n and \n    v\n (\n    1 \n    \u2264 u, v \n    \u2264 n\n, \n    u\n    \n    \u2260 v\n) which describe a pair of vertices connected by an edge. It is\nguaranteed that the given graph is a tree and has no loops or multiple edges.\nIt is guaranteed that the sum of \n    n\n from all test cases does not exceed\n\n    4 \n    \u00b7 10^5\n. Output For each test case output on a separate line a\nsingle integer \u2014 the number of vertices that remain in the tree after applying\n\n    k\n operations. Example Input 6 14 1 1 2 2 3 2 4 4 5 4 6 2 7 7 8 8 9 8 10\n3 11 3 12 1 13 13 14 2 200000 1 2 3 2 1 2 2 3 5 1 5 1 3 2 2 1 5 4 6 2 5 1 2 5\n5 6 4 2 3 4 7 1 4 3 5 1 1 3 6 1 1 7 2 1 Output 7 0 0 3 1 2 Note The first test\ncase is considered in the statement. The second test case contains a tree of\ntwo vertices. \n    200000\n operations are applied to it. The first one removes\nall two vertices, the other operations do not change the tree. In the third\ntest case, a tree of three vertices is given. As a result of the first\noperation, only \n    1\n vertex remains in it (with the index \n    2\n), the\nsecond operation makes the tree empty.\n\n",
        "cf_contest_id": 1593,
        "cf_index": "E",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "dfs and similar",
            "greedy",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n\r\n14 1\r\n1 2\r\n2 3\r\n2 4\r\n4 5\r\n4 6\r\n2 7\r\n7 8\r\n8 9\r\n8 10\r\n3 11\r\n3 12\r\n1 13\r\n13 14\r\n\r\n2 200000\r\n1 2\r\n\r\n3 2\r\n1 2\r\n2 3\r\n\r\n5 1\r\n5 1\r\n3 2\r\n2 1\r\n5 4\r\n\r\n6 2\r\n5 1\r\n2 5\r\n5 6\r\n4 2\r\n3 4\r\n\r\n7 1\r\n4 3\r\n5 1\r\n1 3\r\n6 1\r\n1 7\r\n2 1\r\n",
                "7\r\n0\r\n0\r\n3\r\n1\r\n2\r\n"
            ]
        ],
        "private_cases": []
    }
]