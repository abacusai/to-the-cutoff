[
    {
        "name": "Juju and Binary String",
        "description": "The cuteness of a binary string is the number of \n    \ns divided\nby the length of the string. For example, the cuteness of\n\n    \n is \n    3/5\n. Juju has a binary string\n\n    s\n of length \n    n\n. She wants to choose some non-intersecting\nsubsegments of \n    s\n such that their concatenation has length \n    m\n and it\nhas the same cuteness as the string \n    s\n. More specifically, she wants to\nfind two arrays \n    l\n and \n    r\n of equal length \n    k\n such that \n    1\n    \n    \u2264 l_1 \n    \u2264 r_1 < l_2 \n    \u2264 r_2 < \n    \u2026 < l_k \n    \u2264 r_k \n    \u2264\n    n\n, and also: \n    \u2211\n    _i=1^k (r_i - l_i + 1) = m\n; The\ncuteness of \n    s[l_1,r_1]+s[l_2,r_2]+\n    \u2026+s[l_k,r_k]\n is equal to the\ncuteness of \n    s\n, where \n    s[x, y]\n denotes the subsegment \n    s_x s_x+1\n    \u2026 s_y\n, and \n    +\n denotes string concatenation. Juju does not like\nsplitting the string into many parts, so she also wants to minimize the value\nof \n    k\n. Find the minimum value of \n    k\n such that there exist \n    l\n\nand \n    r\n that satisfy the constraints above or determine that it is\nimpossible to find such \n    l\n and \n    r\n for any \n    k\n. Input The first\nline contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the\nnumber of test cases. The first line of each test case contains two integers\n\n    n\n and \n    m\n (\n    1 \n    \u2264 m \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n). The\nsecond line of each test case contains a binary string \n    s\n of length\n\n    n\n. It is guaranteed that the sum of \n    n\n over all test cases does not\nexceed \n    2 \n    \u00b7 10^5\n. Output For each test case, if there is no valid\npair of \n    l\n and \n    r\n, print \n    -1\n. Otherwise, print \n    k + 1\n\nlines. In the first line, print a number \n    k\n (\n    1 \n    \u2264 k \n    \u2264 m\n) \u2014\nthe minimum number of subsegments required. Then print \n    k\n lines, the\n\n    i\n-th should contain \n    l_i\n and \n    r_i\n (\n    1 \n    \u2264 l_i \n    \u2264 r_i\n    \n    \u2264 n\n) \u2014 the range of the \n    i\n-th subsegment. Note that you should\noutput the subsegments such that the inequality \n    l_1 \n    \u2264 r_1 < l_2 \n    \u2264\n    r_2 < \n    \u2026 < l_k \n    \u2264 r_k\n is true. Example Input 4 4 2 0011 8 6\n11000011 4 3 0101 5 5 11111 Output 1 2 3 2 2 3 5 8 -1 1 1 5 Note In the first\nexample, the cuteness of \n    \n is the same as the cuteness of\n\n    \n. In the second example, the cuteness of\n\n    \n is \n    1/2\n and there is no subsegment of\nsize \n    6\n with the same cuteness. So we must use \n    2\n disjoint\nsubsegments \n    \n and \n    \n. In the third\nexample, there are \n    8\n ways to split the string such that\n\n    \u2211\n    _i=1^k (r_i - l_i + 1) = 3\n but none of them has the\nsame cuteness as \n    \n. In the last example, we don't have to\nsplit the string.\n\n",
        "cf_contest_id": 1658,
        "cf_index": "F",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4 2\r\n0011\r\n8 6\r\n11000011\r\n4 3\r\n0101\r\n5 5\r\n11111\r\n",
                "1 2 3\r\n2 1 1 4 8\r\n-1\r\n1 1 5\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 1\r\n0\r\n",
                "1 1 1\r\n"
            ],
            [
                "1\r\n2 1\r\n00\r\n",
                "1 1 1\r\n"
            ],
            [
                "1\r\n1 1\r\n1\r\n",
                "1 1 1\r\n"
            ],
            [
                "1\r\n2 1\r\n11\r\n",
                "1 1 1\r\n"
            ],
            [
                "1\r\n2 2\r\n00\r\n",
                "1 1 2\r\n"
            ],
            [
                "1\r\n2 2\r\n11\r\n",
                "1 1 2\r\n"
            ],
            [
                "2\r\n35 28\r\n00011010110010101110011111110110100\r\n72 63\r\n001110111011100001110010001010101000000011110100000000001011011001101110\r\n",
                "2 1 2 10 35\r\n2 1 8 18 72\r\n"
            ],
            [
                "10\r\n10 10\r\n0001110100\r\n10 6\r\n0001011100\r\n10 9\r\n1101000110\r\n10 7\r\n1010011111\r\n10 2\r\n1000101111\r\n10 9\r\n0110001111\r\n10 10\r\n1001010110\r\n10 10\r\n1100000000\r\n10 2\r\n0001110100\r\n10 10\r\n1000100010\r\n",
                "1 1 10\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n1 1 10\r\n1 1 10\r\n-1\r\n1 1 10\r\n"
            ]
        ]
    }
]