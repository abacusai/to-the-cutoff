[
    {
        "name": "Ping-Pong (Easy Version)",
        "description": "In this problem at each moment you have a set of intervals. You can move from\ninterval (a, b) from our set to interval (c, d) from our set if and only if c\n< a < d or c < b < d. Also there is a path from interval I1 from our set to\ninterval I2 from our set if there is a sequence of successive moves starting\nfrom I1 so that we can reach I2. Your program should handle the queries of the\nfollowing two types: \"1 x y\" (x < y) \u2014 add the new interval (x, y) to the set\nof intervals. The length of the new interval is guaranteed to be strictly\ngreater than all the previous intervals. \"2 a b\" (a \u2260 b) \u2014 answer the\nquestion: is there a path from a-th (one-based) added interval to b-th (one-\nbased) added interval? Answer all the queries. Note, that initially you have\nan empty set of intervals. Input The first line of the input contains integer\nn denoting the number of queries, (1 \u2264 n \u2264 100). Each of the following lines\ncontains a query as described above. All numbers in the input are integers and\ndon't exceed 10^9 by their absolute value. It's guaranteed that all queries\nare correct. Output For each query of the second type print \"YES\" or \"NO\" on a\nseparate line depending on the answer. Examples Input 5 1 1 5 1 5 11 2 1 2 1 2\n9 2 1 2 Output NO YES\n\n",
        "cf_contest_id": 320,
        "cf_index": "B",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graphs"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 1 5\r\n1 5 11\r\n2 1 2\r\n1 2 9\r\n2 1 2\r\n",
                "NO\r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n1 -311 -186\r\n1 -1070 -341\r\n1 -1506 -634\r\n1 688 1698\r\n2 2 4\r\n1 70 1908\r\n2 1 2\r\n2 2 4\r\n1 -1053 1327\r\n2 5 4\r\n",
                "NO\r\nNO\r\nNO\r\nYES\r\n"
            ],
            [
                "10\r\n1 -1365 -865\r\n1 1244 1834\r\n2 1 2\r\n1 -1508 -752\r\n2 3 2\r\n2 2 1\r\n1 -779 595\r\n1 -1316 877\r\n2 2 1\r\n1 -698 1700\r\n",
                "NO\r\nNO\r\nNO\r\nNO\r\n"
            ],
            [
                "20\r\n1 1208 1583\r\n1 -258 729\r\n1 -409 1201\r\n1 194 1938\r\n1 -958 1575\r\n1 -1466 1752\r\n2 1 2\r\n2 1 2\r\n2 6 5\r\n1 -1870 1881\r\n1 -2002 2749\r\n1 -2002 2984\r\n1 -2002 3293\r\n2 2 4\r\n2 8 10\r\n2 9 6\r\n1 -2002 3572\r\n1 -2002 4175\r\n1 -2002 4452\r\n1 -2002 4605\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\n"
            ],
            [
                "9\r\n1 1 4\r\n1 5 20\r\n1 11 30\r\n1 29 60\r\n1 59 100\r\n1 100 200\r\n2 1 5\r\n2 1 6\r\n2 2 5\r\n",
                "NO\r\nNO\r\nYES\r\n"
            ]
        ]
    }
]