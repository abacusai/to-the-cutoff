[
    {
        "name": "Broken robot",
        "description": "You received as a gift a very clever robot walking on a rectangular board.\nUnfortunately, you understood that it is broken and behaves rather strangely\n(randomly). The board consists of N rows and M columns of cells. The robot is\ninitially at some cell on the i-th row and the j-th column. Then at every step\nthe robot could go to some another cell. The aim is to go to the bottommost\n(N-th) row. The robot can stay at it's current cell, move to the left, move to\nthe right, or move to the cell below the current. If the robot is in the\nleftmost column it cannot move to the left, and if it is in the rightmost\ncolumn it cannot move to the right. At every step all possible moves are\nequally probable. Return the expected number of step to reach the bottommost\nrow. Input On the first line you will be given two space separated integers N\nand M (1 \u2264 N, M \u2264 1000). On the second line you will be given another two\nspace separated integers i and j (1 \u2264 i \u2264 N, 1 \u2264 j \u2264 M) \u2014 the number of the\ninitial row and the number of the initial column. Note that, (1, 1) is the\nupper left corner of the board and (N, M) is the bottom right corner. Output\nOutput the expected number of steps on a line of itself with at least 4 digits\nafter the decimal point. Examples Input 10 10 10 4 Output 0.0000000000 Input\n10 14 5 14 Output 18.0038068653\n\n",
        "cf_contest_id": 24,
        "cf_index": "D",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "math",
            "probabilities"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10 10\r\n10 4\r\n",
                "0.000000"
            ],
            [
                "10 14\r\n5 14\r\n",
                "18.003806"
            ]
        ],
        "private_cases": [
            [
                "126 125\r\n115 22\r\n",
                "43.999877"
            ],
            [
                "755 51\r\n205 12\r\n",
                "2178.758312"
            ],
            [
                "385 978\r\n344 18\r\n",
                "163.804443"
            ],
            [
                "663 904\r\n192 518\r\n",
                "1883.939685"
            ],
            [
                "293 183\r\n279 21\r\n",
                "55.999312"
            ],
            [
                "922 109\r\n431 55\r\n",
                "1961.845603"
            ],
            [
                "552 36\r\n199 35\r\n",
                "1387.803425"
            ],
            [
                "182 314\r\n54 201\r\n",
                "511.995520"
            ],
            [
                "812 240\r\n561 19\r\n",
                "998.837290"
            ],
            [
                "595 881\r\n417 120\r\n",
                "711.991355"
            ],
            [
                "694 685\r\n278 653\r\n",
                "1660.199669"
            ],
            [
                "793 840\r\n534 276\r\n",
                "1035.981730"
            ],
            [
                "892 996\r\n288 751\r\n",
                "2415.900859"
            ],
            [
                "990 800\r\n801 66\r\n",
                "755.986020"
            ],
            [
                "89 955\r\n4 629\r\n",
                "339.998017"
            ],
            [
                "188 759\r\n53 162\r\n",
                "539.995019"
            ],
            [
                "287 915\r\n152 177\r\n",
                "539.995019"
            ],
            [
                "738 718\r\n455 206\r\n",
                "1131.978194"
            ],
            [
                "1 1\r\n1 1\r\n",
                "0.000000"
            ],
            [
                "1 2\r\n1 1\r\n",
                "0.000000"
            ],
            [
                "1 2\r\n1 2\r\n",
                "0.000000"
            ],
            [
                "2 1\r\n1 1\r\n",
                "2.000000"
            ],
            [
                "2 1\r\n2 1\r\n",
                "0.000000"
            ],
            [
                "1000 1\r\n2 1\r\n",
                "1995.999998"
            ],
            [
                "1000 1\r\n777 1\r\n",
                "446.000000"
            ],
            [
                "1000 1\r\n1000 1\r\n",
                "0.000000"
            ],
            [
                "1000 1\r\n1 1\r\n",
                "1997.999998"
            ],
            [
                "1000 2\r\n1 1\r\n",
                "2996.998266"
            ],
            [
                "1000 2\r\n1 2\r\n",
                "2996.998267"
            ],
            [
                "1000 2\r\n987 2\r\n",
                "39.000000"
            ],
            [
                "1000 2\r\n555 1\r\n",
                "1334.999655"
            ],
            [
                "1000 2\r\n99 1\r\n",
                "2702.998589"
            ],
            [
                "1000 1000\r\n1 1\r\n",
                "3960.567793"
            ],
            [
                "1000 1000\r\n1 1000\r\n",
                "3960.637281"
            ],
            [
                "1000 1000\r\n784 234\r\n",
                "863.987283"
            ],
            [
                "890 987\r\n84 34\r\n",
                "3214.743238"
            ],
            [
                "789 1\r\n678 1\r\n",
                "222.000000"
            ],
            [
                "999 999\r\n888 777\r\n",
                "443.996627"
            ]
        ]
    }
]