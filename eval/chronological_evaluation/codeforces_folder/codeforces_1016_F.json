[
    {
        "name": "Road Projects",
        "description": "There are \n    n\n cities in the country of Berland. Some of them are connected\nby bidirectional roads in such a way that there exists exactly one path, which\nvisits each road no more than once, between every pair of cities. Each road\nhas its own length. Cities are numbered from \n    1\n to \n    n\n. The\ntravelling time between some cities \n    v\n and \n    u\n is the total length of\nthe roads on the shortest path from \n    v\n to \n    u\n. The two most important\ncities in Berland are cities \n    1\n and \n    n\n. The Berland Ministry of\nTransport decided to build a single new road to decrease the traffic between\nthe most important cities. However, lots of people are used to the current\ntravelling time between the most important cities, so the new road shouldn't\nchange it too much. The new road can only be built between such cities \n    v\n\nand \n    u\n that \n    v \n    \u2260 u\n and \n    v\n and \n    u\n aren't already\nconnected by some road. They came up with \n    m\n possible projects. Each\nproject is just the length \n    x\n of the new road. Polycarp works as a head\nanalyst at the Berland Ministry of Transport and it's his job to deal with all\nthose \n    m\n projects. For the \n    i\n-th project he is required to choose\nsome cities \n    v\n and \n    u\n to build the new road of length \n    x_i\n\nbetween such that the travelling time between the most important cities is\nmaximal possible. Unfortunately, Polycarp is not a programmer and no analyst\nin the world is capable to process all projects using only pen and paper.\nThus, he asks you to help him to calculate the maximal possible travelling\ntime between the most important cities for each project. Note that the choice\nof \n    v\n and \n    u\n can differ for different projects. Input The first line\ncontains two integers \n    n\n and \n    m\n (\n    3 \n    \u2264 n \n    \u2264 3 \n    \u00b7\n    10^5\n, \n    1 \n    \u2264 m \n    \u2264 3 \n    \u00b7 10^5\n) \u2014 the number of cities and the\nnumber of projects, respectively. Each of the next \n    n - 1\n lines contains\nthree integers \n    v_i\n, \n    u_i\n and \n    w_i\n (\n    1 \n    \u2264 v_i, u_i \n    \u2264\n    n\n, \n    1 \n    \u2264 w_i \n    \u2264 10^9\n) \u2014 the description of the \n    i\n-th road.\nIt is guaranteed that there exists exactly one path, which visits each road no\nmore than once, between every pair of cities. Each of the next \n    m\n lines\ncontains a single integer \n    x_j\n (\n    1 \n    \u2264 x_j \n    \u2264 10^9\n) \u2014 the\nlength of the road for the \n    j\n-th project. Output Print \n    m\n lines, the\n\n    j\n-th line should contain a single integer \u2014 the maximal possible\ntravelling time between the most important cities for the \n    j\n-th project.\nExample Input 7 2 1 2 18 2 3 22 3 4 24 4 7 24 2 6 4 3 5 12 1 100 Output 83 88\nNote The road network from the first example: You can build the road with\nlength \n    1\n between cities \n    5\n and \n    6\n to get \n    83\n as the\ntravelling time between \n    1\n and \n    7\n (\n    1 \n    \u2192 2\n    \n    \u2192 6 \n    \u2192 5 \n    \u2192 3 \n    \u2192 4 \n    \u2192\n    7\n \n    =\n \n    18 + 4 + 1 + 12 + 24 + 24 = 83\n). Other possible pairs of\ncities will give answers less or equal to \n    83\n.\n\n",
        "cf_contest_id": 1016,
        "cf_index": "F",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dp",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 2\r\n1 2 18\r\n2 3 22\r\n3 4 24\r\n4 7 24\r\n2 6 4\r\n3 5 12\r\n1\r\n100\r\n",
                "83\r\n88\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 4\r\n1 2 1\r\n1 3 5\r\n4\r\n1\r\n3\r\n2\r\n",
                "5\r\n2\r\n4\r\n3\r\n"
            ],
            [
                "3 4\r\n1 2 5\r\n2 3 10\r\n2\r\n4\r\n8\r\n16\r\n",
                "2\r\n4\r\n8\r\n15\r\n"
            ],
            [
                "4 1\r\n1 2 2\r\n2 3 2\r\n3 4 2\r\n1\r\n",
                "3\r\n"
            ],
            [
                "4 1\r\n1 2 1\r\n2 3 1\r\n1 4 100\r\n1\r\n",
                "100\r\n"
            ]
        ]
    }
]