[
    {
        "name": "AquaMoon and Permutations",
        "description": "Cirno has prepared \n    n\n arrays of length \n    n\n each. Each array is a\npermutation of \n    n\n integers from \n    1\n to \n    n\n. These arrays are\nspecial: for all \n    1 \n    \u2264 i \n    \u2264 n\n, if we take the \n    i\n-th element\nof each array and form another array of length \n    n\n with these elements,\nthe resultant array is also a permutation of \n    n\n integers from \n    1\n to\n\n    n\n. In the other words, if you put these \n    n\n arrays under each other\nto form a matrix with \n    n\n rows and \n    n\n columns, this matrix is a Latin\nsquare. Afterwards, Cirno added additional \n    n\n arrays, each array is a\npermutation of \n    n\n integers from \n    1\n to \n    n\n. For all \n    1 \n    \u2264 i\n    \n    \u2264 n\n, there exists at least one position \n    1 \n    \u2264 k \n    \u2264 n\n,\nsuch that for the \n    i\n-th array and the \n    (n + i)\n-th array, the\n\n    k\n-th element of both arrays is the same. Notice that the arrays indexed\nfrom \n    n + 1\n to \n    2n\n don't have to form a Latin square. Also, Cirno\nmade sure that for all \n    2n\n arrays, no two arrays are completely equal, i.\ne. for all pair of indices \n    1 \n    \u2264 i < j \n    \u2264 2n\n, there exists at\nleast one position \n    1 \n    \u2264 k \n    \u2264 n\n, such that the \n    k\n-th\nelements of the \n    i\n-th and \n    j\n-th array are different. Finally, Cirno\narbitrarily changed the order of \n    2n\n arrays. AquaMoon calls a subset of\nall \n    2n\n arrays of size \n    n\n good if these arrays from a Latin square.\nAquaMoon wants to know how many good subsets exist. Because this number may be\nparticularly large, find it modulo \n    998\n     244\n     353\n. Also, she wants to\nfind any good subset. Can you help her? Input The input consists of multiple\ntest cases. The first line contains a single integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 100\n) \u2014 the number of test cases. The first line of each test case\ncontains a single integer \n    n\n (\n    5 \n    \u2264 n \n    \u2264 500\n). Then \n    2n\n\nlines followed. The \n    i\n-th of these lines contains \n    n\n integers,\nrepresenting the \n    i\n-th array. It is guaranteed, that the sum of \n    n\n\nover all test cases does not exceed \n    500\n. Output For each test case print\ntwo lines. In the first line, print the number of good subsets by modulo\n\n    998\n     244\n     353\n. In the second line, print \n    n\n indices from\n\n    1\n to \n    2n\n \u2014 indices of the \n    n\n arrays that form a good subset\n(you can print them in any order). If there are several possible answers \u2014\nprint any of them. Example Input 3 7 1 2 3 4 5 6 7 2 3 4 5 6 7 1 3 4 5 6 7 1 2\n4 5 6 7 1 2 3 5 6 7 1 2 3 4 6 7 1 2 3 4 5 7 1 2 3 4 5 6 1 2 3 4 5 7 6 1 3 4 5\n6 7 2 1 4 5 6 7 3 2 1 5 6 7 4 2 3 1 6 7 5 2 3 4 1 7 6 2 3 4 5 1 7 2 3 4 5 6 5\n4 5 1 2 3 3 5 2 4 1 1 2 3 4 5 5 2 4 1 3 3 4 5 1 2 2 3 4 5 1 1 3 5 2 4 4 1 3 5\n2 2 4 1 3 5 5 1 2 3 4 6 2 3 4 5 6 1 3 1 2 6 4 5 6 1 2 3 4 5 5 6 1 3 2 4 4 3 6\n5 2 1 5 6 1 2 3 4 4 5 6 1 2 3 3 4 5 6 1 2 1 2 3 4 5 6 2 5 4 1 6 3 3 2 5 4 1 6\n1 4 3 6 5 2 Output 1 1 2 3 4 5 6 7 2 1 3 5 6 10 4 1 3 6 7 8 9 Note In the\nfirst test case, the number of good subsets is \n    1\n. The only such subset\nis the set of arrays with indices \n    1\n, \n    2\n, \n    3\n, \n    4\n, \n    5\n,\n\n    6\n, \n    7\n. In the second test case, the number of good subsets is\n\n    2\n. They are \n    1\n, \n    3\n, \n    5\n, \n    6\n, \n    10\n or \n    2\n,\n\n    4\n, \n    7\n, \n    8\n, \n    9\n.\n\n",
        "cf_contest_id": 1545,
        "cf_index": "C",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "2-sat",
            "brute force",
            "combinatorics",
            "constructive algorithms",
            "graph matchings",
            "graphs"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n7\r\n1 2 3 4 5 6 7\r\n2 3 4 5 6 7 1\r\n3 4 5 6 7 1 2\r\n4 5 6 7 1 2 3\r\n5 6 7 1 2 3 4\r\n6 7 1 2 3 4 5\r\n7 1 2 3 4 5 6\r\n1 2 3 4 5 7 6\r\n1 3 4 5 6 7 2\r\n1 4 5 6 7 3 2\r\n1 5 6 7 4 2 3\r\n1 6 7 5 2 3 4\r\n1 7 6 2 3 4 5\r\n1 7 2 3 4 5 6\r\n5\r\n4 5 1 2 3\r\n3 5 2 4 1\r\n1 2 3 4 5\r\n5 2 4 1 3\r\n3 4 5 1 2\r\n2 3 4 5 1\r\n1 3 5 2 4\r\n4 1 3 5 2\r\n2 4 1 3 5\r\n5 1 2 3 4\r\n6\r\n2 3 4 5 6 1\r\n3 1 2 6 4 5\r\n6 1 2 3 4 5\r\n5 6 1 3 2 4\r\n4 3 6 5 2 1\r\n5 6 1 2 3 4\r\n4 5 6 1 2 3\r\n3 4 5 6 1 2\r\n1 2 3 4 5 6\r\n2 5 4 1 6 3\r\n3 2 5 4 1 6\r\n1 4 3 6 5 2\r\n",
                "1\r\n2 3 4 5 6 1 7\r\n2\r\n1 3 6 5 10\r\n4\r\n3 6 1 7 8 9\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n5\r\n4 5 1 2 3\r\n3 5 2 4 1\r\n1 2 3 4 5\r\n5 2 4 1 3\r\n3 4 5 1 2\r\n2 3 4 5 1\r\n1 3 5 2 4\r\n4 1 3 5 2\r\n2 4 1 3 5\r\n5 1 2 3 4\r\n",
                "2\r\n1 3 6 5 10\r\n"
            ]
        ]
    }
]