[
    {
        "name": "Case of the Zeros and Ones",
        "description": "Andrewid the Android is a galaxy-famous detective. In his free time he likes\nto think about strings containing zeros and ones. Once he thought about a\nstring of length n consisting of zeroes and ones. Consider the following\noperation: we choose any two adjacent positions in the string, and if one them\ncontains 0, and the other contains 1, then we are allowed to remove these two\ndigits from the string, obtaining a string of length n - 2 as a result. Now\nAndreid thinks about what is the minimum length of the string that can remain\nafter applying the described operation several times (possibly, zero)? Help\nhim to calculate this number. Input First line of the input contains a single\ninteger n (1 \u2264 n \u2264 2\u00b710^5), the length of the string that Andreid has. The\nsecond line contains the string of length n consisting only from zeros and\nones. Output Output the minimum length of the string that may remain after\napplying the described operations several times. Examples Input 4 1100 Output\n0 Input 5 01010 Output 1 Input 8 11101111 Output 6 Note In the first sample\ntest it is possible to change the string like the following: . In the second\nsample test it is possible to change the string like the following: . In the\nthird sample test it is possible to change the string like the following: .\n\n",
        "cf_contest_id": 556,
        "cf_index": "A",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1100\r\n",
                "0\r\n"
            ],
            [
                "5\r\n01010\r\n",
                "1\r\n"
            ],
            [
                "8\r\n11101111\r\n",
                "6\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n0\r\n",
                "1\r\n"
            ],
            [
                "1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "2\r\n00\r\n",
                "2\r\n"
            ],
            [
                "2\r\n01\r\n",
                "0\r\n"
            ],
            [
                "2\r\n10\r\n",
                "0\r\n"
            ],
            [
                "2\r\n11\r\n",
                "2\r\n"
            ],
            [
                "3\r\n001\r\n",
                "1\r\n"
            ],
            [
                "6\r\n110110\r\n",
                "2\r\n"
            ],
            [
                "7\r\n0000011\r\n",
                "3\r\n"
            ],
            [
                "6\r\n110010\r\n",
                "0\r\n"
            ],
            [
                "6\r\n110100\r\n",
                "0\r\n"
            ],
            [
                "3\r\n100\r\n",
                "1\r\n"
            ],
            [
                "6\r\n010111\r\n",
                "2\r\n"
            ],
            [
                "8\r\n01011100\r\n",
                "0\r\n"
            ],
            [
                "6\r\n001011\r\n",
                "0\r\n"
            ],
            [
                "7\r\n1110000\r\n",
                "1\r\n"
            ],
            [
                "9\r\n011111101\r\n",
                "5\r\n"
            ]
        ]
    }
]