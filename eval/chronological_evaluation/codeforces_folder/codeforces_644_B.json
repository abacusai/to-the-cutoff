[
    {
        "name": "Processing Queries",
        "description": "In this problem you have to simulate the workflow of one-thread server. There\nare n queries to process, the i-th will be received at moment ti and needs to\nbe processed for di units of time. All ti are guaranteed to be distinct. When\na query appears server may react in three possible ways: If server is free and\nquery queue is empty, then server immediately starts to process this query. If\nserver is busy and there are less than b queries in the queue, then new query\nis added to the end of the queue. If server is busy and there are already b\nqueries pending in the queue, then new query is just rejected and will never\nbe processed. As soon as server finished to process some query, it picks new\none from the queue (if it's not empty, of course). If a new query comes at\nsome moment x, and the server finishes to process another query at exactly the\nsame moment, we consider that first query is picked from the queue and only\nthen new query appears. For each query find the moment when the server will\nfinish to process it or print -1 if this query will be rejected. Input The\nfirst line of the input contains two integers n and b (1 \u2264 n, b \u2264 200 000) \u2014\nthe number of queries and the maximum possible size of the query queue. Then\nfollow n lines with queries descriptions (in chronological order). Each\ndescription consists of two integers ti and di (1 \u2264 ti, di \u2264 10^9), where ti\nis the moment of time when the i-th query appears and di is the time server\nneeds to process it. It is guaranteed that ti - 1 < ti for all i > 1. Output\nPrint the sequence of n integers e1, e2, ..., en, where ei is the moment the\nserver will finish to process the i-th query (queries are numbered in the\norder they appear in the input) or - 1 if the corresponding query will be\nrejected. Examples Input 5 1 2 9 4 8 10 9 15 2 19 1 Output 11 19 -1 21 22\nInput 4 1 2 8 4 8 10 9 15 2 Output 10 18 27 -1 Note Consider the first sample.\nThe server will start to process first query at the moment 2 and will finish\nto process it at the moment 11. At the moment 4 second query appears and\nproceeds to the queue. At the moment 10 third query appears. However, the\nserver is still busy with query 1, b = 1 and there is already query 2 pending\nin the queue, so third query is just rejected. At the moment 11 server will\nfinish to process first query and will take the second query from the queue.\nAt the moment 15 fourth query appears. As the server is currently busy it\nproceeds to the queue. At the moment 19 two events occur simultaneously:\nserver finishes to proceed the second query and the fifth query appears. As\nwas said in the statement above, first server will finish to process the\nsecond query, then it will pick the fourth query from the queue and only then\nwill the fifth query appear. As the queue is empty fifth query is proceed\nthere. Server finishes to process query number 4 at the moment 21. Query\nnumber 5 is picked from the queue. Server finishes to process query number 5\nat the moment 22.\n\n",
        "cf_contest_id": 644,
        "cf_index": "B",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "constructive algorithms",
            "data structures",
            "two pointers"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 1\r\n2 9\r\n4 8\r\n10 9\r\n15 2\r\n19 1\r\n",
                "11 19 -1 21 22\r\n"
            ],
            [
                "4 1\r\n2 8\r\n4 8\r\n10 9\r\n15 2\r\n",
                "10 18 27 -1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1000000000 1000000000\r\n",
                "2000000000\r\n"
            ],
            [
                "4 3\r\n999999996 1000000000\r\n999999997 1000000000\r\n999999998 1000000000\r\n999999999 1000000000\r\n",
                "1999999996 2999999996 3999999996 4999999996\r\n"
            ],
            [
                "5 1\r\n2 1\r\n3 6\r\n4 5\r\n6 4\r\n7 2\r\n",
                "3 9 14 -1 -1\r\n"
            ],
            [
                "10 2\r\n4 14\r\n5 2\r\n6 6\r\n7 11\r\n8 6\r\n9 5\r\n10 13\r\n11 8\r\n13 2\r\n20 2\r\n",
                "18 20 26 -1 -1 -1 -1 -1 -1 28\r\n"
            ],
            [
                "6 4\r\n2 4\r\n4 2\r\n5 2\r\n6 2\r\n7 2\r\n9 2\r\n",
                "6 8 10 12 14 16\r\n"
            ],
            [
                "8 3\r\n1 2\r\n3 1\r\n4 3\r\n5 3\r\n6 1\r\n7 2\r\n8 8\r\n9 7\r\n",
                "3 4 7 10 11 13 21 -1\r\n"
            ],
            [
                "10 3\r\n1 14\r\n3 2\r\n5 4\r\n6 9\r\n9 1\r\n12 22\r\n15 11\r\n18 8\r\n28 2\r\n29 4\r\n",
                "15 17 21 30 -1 -1 41 49 51 -1\r\n"
            ],
            [
                "5 2\r\n2 7\r\n3 3\r\n7 4\r\n9 1\r\n10 2\r\n",
                "9 12 16 17 -1\r\n"
            ],
            [
                "4 1\r\n2 1\r\n6 5\r\n9 2\r\n10 3\r\n",
                "3 11 13 -1\r\n"
            ],
            [
                "4 1\r\n1 2\r\n2 1\r\n3 1\r\n4 3\r\n",
                "3 4 5 8\r\n"
            ],
            [
                "6 3\r\n1 2\r\n2 3\r\n100 200\r\n200 300\r\n10000 20000\r\n20000 30000\r\n",
                "3 6 300 600 30000 60000\r\n"
            ]
        ]
    }
]