[
    {
        "name": "Find and Replace",
        "description": "You are given a string \n    s\n consisting of lowercase Latin characters. In an\noperation, you can take a character and replace all occurrences of this\ncharacter with \n    \n or replace all occurrences of this character\nwith \n    \n. Is it possible to perform some number of moves so\nthat the resulting string is an alternating binary string\n    ^\n    \u2020\n?\nFor example, consider the string \n    \n. You can perform the\nfollowing moves: Replace \n    \n with \n    \n. Now the\nstring is\n\n    \n.\nReplace \n    \n with \n    \n. Now the string is\n\n    \n.\nReplace \n    \n with \n    \n. Now the string is\n\n    \n.\nThis is an alternating binary string. \n    ^\n    \u2020\nAn alternating binary\nstring is a string of \n    \ns and \n    \ns such that no\ntwo adjacent bits are equal. For example, \n    \n,\n\n    \n, \n    \n are alternating binary strings, but\n\n    \n, \n    \n, \n    \n are not.\nInput The input consists of multiple test cases. The first line contains an\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test cases. The\ndescription of the test cases follows. The first line of each test case\ncontains an integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2000\n) \u2014 the length of the\nstring \n    s\n. The second line of each test case contains a string consisting\nof \n    n\n lowercase Latin characters \u2014 the string \n    s\n. Output For each\ntest case, output \"YES\" (without quotes) if you can make the string into an\nalternating binary string, and \"NO\" (without quotes) otherwise. You can output\nthe answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\"\nwill be recognized as a positive answer). Example Input 8 7 abacaba 2 aa 1 y 4\nbkpt 6 ninfia 6 banana 10 codeforces 8 testcase Output YES NO YES YES NO YES\nNO NO Note The first test case is explained in the statement. In the second\ntest case, the only possible binary strings you can make are\n\n    \n and \n    \n, neither of which are alternating.\nIn the third test case, you can make \n    \n, which is an\nalternating binary string.\n\n",
        "cf_contest_id": 1807,
        "cf_index": "C",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8\r\n7\r\nabacaba\r\n2\r\naa\r\n1\r\ny\r\n4\r\nbkpt\r\n6\r\nninfia\r\n6\r\nbanana\r\n10\r\ncodeforces\r\n8\r\ntestcase\r\n",
                "YES\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n31\r\nabcdefkrpgjeigjabcdefbcdefjkdre\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n5\r\nmamad\r\n",
                "YES\r\n"
            ]
        ]
    }
]