[
    {
        "name": "Maxmina",
        "description": "You have an array \n    a\n of size \n    n\n consisting only of zeroes and ones\nand an integer \n    k\n. In one operation you can do one of the following:\nSelect \n    2\n consecutive elements of \n    a\n and replace them with their\nminimum (that is, let \n    a := [a_1, a_2, \n    \u2026, a_i-1, \n    min(a_i,\n    a_i+1), a_i+2, \n    \u2026, a_n]\n for some \n    1 \n    \u2264 i \n    \u2264 n-1\n).\nThis operation decreases the size of \n    a\n by \n    1\n. Select \n    k\n\nconsecutive elements of \n    a\n and replace them with their maximum (that is,\nlet \n    a := [a_1, a_2, \n    \u2026, a_i-1, \n    max(a_i, a_i+1, \n    \u2026,\n    a_i+k-1), a_i+k, \n    \u2026, a_n]\n for some \n    1 \n    \u2264 i \n    \u2264\n    n-k+1\n). This operation decreases the size of \n    a\n by \n    k-1\n.\nDetermine if it's possible to turn \n    a\n into \n    [1]\n after several\n(possibly zero) operations. Input Each test contains multiple test cases. The\nfirst line contains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    1000\n). The description of the test cases follows. The first line of each\ntest case contains two integers \n    n\n and \n    k\n (\n    2 \n    \u2264 k \n    \u2264 n\n    \n    \u2264 50\n), the size of array \n    a\n and the length of segments that you\ncan perform second type operation on. The second line contains \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    a_i\n is \n    0\n or\n\n    1\n), elements of array \n    a\n. Output For each test case, if it is\npossible to turn \n    a\n into \n    [1]\n, print \"YES\", otherwise print \"NO\".\nExample Input 7 3 2 0 1 0 5 3 1 0 1 1 0 2 2 1 1 4 4 0 0 0 0 6 3 0 0 1 0 0 1 7\n5 1 1 1 1 1 1 1 5 3 0 0 1 0 0 Output YES YES YES NO YES YES YES Note In the\nfirst test case, you can perform the second type operation on second and third\nelements so \n    a\n becomes \n    [0, 1]\n, then you can perform the second type\noperation on first and second elements, so \n    a\n turns to \n    [1]\n. In the\nfourth test case, it's obvious to see that you can't make any \n    1\n, no\nmatter what you do. In the fifth test case, you can first perform a type 2\noperation on the first three elements so that \n    a\n becomes \n    [1, 0, 0,\n    1]\n, then perform a type 2 operation on the elements in positions two\nthrough four, so that \n    a\n becomes \n    [1, 1]\n, and finally perform the\nfirst type operation on the remaining elements, so that \n    a\n becomes\n\n    [1]\n.\n\n",
        "cf_contest_id": 1746,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n3 2\r\n0 1 0\r\n5 3\r\n1 0 1 1 0\r\n2 2\r\n1 1\r\n4 4\r\n0 0 0 0\r\n6 3\r\n0 0 1 0 0 1\r\n7 5\r\n1 1 1 1 1 1 1\r\n5 3\r\n0 0 1 0 0\r\n",
                "YES\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n32 32\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n",
                "NO\r\n"
            ]
        ]
    }
]