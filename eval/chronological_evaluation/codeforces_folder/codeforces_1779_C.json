[
    {
        "name": "Least Prefix Sum",
        "description": "Baltic, a famous chess player who is also a mathematician, has an array\n\n    a_1,a_2, \n    \u2026, a_n\n, and he can perform the following operation\nseveral (possibly \n    0\n) times: Choose some index \n    i\n (\n    1 \n    \u2264 i\n    \n    \u2264 n\n); multiply \n    a_i\n with \n    -1\n, that is, set \n    a_i :=\n    -a_i\n. Baltic's favorite number is \n    m\n, and he wants \n    a_1 + a_2 +\n    \n    \u22ef + a_m\n to be the smallest of all non-empty prefix sums. More\nformally, for each \n    k = 1,2,\n    \u2026, n\n it should hold that \n    \n\n    a_1 +\n    a_2 + \n    \u22ef + a_k \n    \u2265 a_1 + a_2 + \n    \u22ef + a_m.\n\n    \n Please note that\nmultiple smallest prefix sums may exist and that it is only required that\n\n    a_1 + a_2 + \n    \u22ef + a_m\n is one of them. Help Baltic find the minimum\nnumber of operations required to make \n    a_1 + a_2 + \n    \u22ef + a_m\n the\nleast of all prefix sums. It can be shown that a valid sequence of operations\nalways exists. Input Each test contains multiple test cases. The first line\ncontains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10\n     000\n).\nThe description of the test cases follows. The first line of each test case\ncontains two integers \n    n\n and \n    m\n (\n    1 \n    \u2264 m \n    \u2264 n \n    \u2264\n    2\n    \u00b7 10^5\n) \u2014 the size of Baltic's array and his favorite number. The\nsecond line contains \n    n\n integers \n    a_1,a_2, \n    \u2026, a_n\n (\n    -10^9\n    \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the array. It is guaranteed that the sum of\n\n    n\n over all test cases does not exceed \n    2\n    \u00b7 10^5\n. Output For\neach test case, print a single integer \u2014 the minimum number of required\noperations. Example Input 6 4 3 -1 -2 -3 -4 4 3 1 2 3 4 1 1 1 5 5 -2 3 -5 1\n-20 5 2 -2 3 -5 -5 -20 10 4 345875723 -48 384678321 -375635768 -35867853\n-35863586 -358683842 -81725678 38576 -357865873 Output 1 1 0 0 3 4 Note In the\nfirst example, we perform the operation \n    a_4 := -a_4\n. The array becomes\n\n    [-1,-2,-3,4]\n and the prefix sums, \n    [a_1, \n     a_1+a_2, \n     a_1+a_2+a_3,\n    \n     a_1+a_2+a_3+a_4]\n, are equal to \n    [-1,-3,-6,-2]\n. Thus \n    a_1 + a_2 +\n    a_3=-6\n is the smallest of all prefix sums. In the second example, we\nperform the operation \n    a_3 := -a_3\n. The array becomes \n    [1,2,-3,4]\n\nwith prefix sums equal to \n    [1,3,0,4]\n. In the third and fourth examples,\n\n    a_1 + a_2 + \n    \u22ef + a_m\n is already the smallest of the prefix sums \u2014\nno operation needs to be performed. In the fifth example, a valid sequence of\noperations is: \n    a_3 := -a_3\n, \n    a_2 := -a_2\n, \n    a_5 := -a_5\n. The\narray becomes \n    [-2,-3,5,-5,20]\n and its prefix sums are\n\n    [-2,-5,0,-5,15]\n. Note that \n    a_1+a_2=-5\n and \n    a_1+a_2+a_3+a_4=-5\n\nare both the smallest of the prefix sums (and this is a valid solution).\n\n",
        "cf_contest_id": 1779,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n4 3\r\n-1 -2 -3 -4\r\n4 3\r\n1 2 3 4\r\n1 1\r\n1\r\n5 5\r\n-2 3 -5 1 -20\r\n5 2\r\n-2 3 -5 -5 -20\r\n10 4\r\n345875723 -48 384678321 -375635768 -35867853 -35863586 -358683842 -81725678 38576 -357865873\r\n",
                "1\r\n1\r\n0\r\n0\r\n3\r\n4\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n10 9\r\n8 1 7 4 6 4 7 7 -9 -6\r\n",
                "3\r\n"
            ]
        ]
    }
]