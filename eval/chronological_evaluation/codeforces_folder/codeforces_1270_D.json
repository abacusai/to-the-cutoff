[
    {
        "name": "Strange Device",
        "description": "This problem is interactive. We have hidden an array \n    a\n of \n    n\n\npairwise different numbers (this means that no two numbers are equal). You can\nget some information about this array using a new device you just ordered on\nAmazon. This device can answer queries of the following form: in response to\nthe positions of \n    k\n different elements of the array, it will return the\nposition and value of the \n    m\n-th among them in the ascending order.\nUnfortunately, the instruction for the device was lost during delivery.\nHowever, you remember \n    k\n, but don't remember \n    m\n. Your task is to\nfind \n    m\n using queries to this device. You can ask not more than \n    n\n\nqueries. Note that the array \n    a\n and number \n    m\n are fixed before the\nstart of the interaction and don't depend on your queries. In other words,\ninteractor is not adaptive. Note that you don't have to minimize the number of\nqueries, and you don't need to guess array \n    a\n. You just have to guess\n\n    m\n. Input The first line contains two integers \n    n\n and \n    k\n\n(\n    1\n    \u2264 k < n \n    \u2264 500\n) \u2014 the length of the array and the number of the\nelements in the query. It is guaranteed that number \n    m\n satisfies\n\n    1\n    \u2264 m \n    \u2264 k\n, elements \n    a_1, a_2, \n    \u2026, a_n\n of the array\nsatisfy \n    0\n    \u2264 a_i \n    \u2264 10^9\n, and all of them are different.\nInteraction You begin the interaction by reading \n    n\n and \n    k\n. To ask a\nquestion about elements on positions \n    x_1, x_2, \n    \u2026, x_k\n, in a\nseparate line output \n    ?\n \n    x_1\n \n    x_2\n \n    x_3\n ... \n    x_k\n\nNumbers in the query have to satisfy \n    1 \n    \u2264 x_i \n    \u2264 n\n, and all\n\n    x_i\n have to be different. Don't forget to 'flush', to get the answer. In\nresponse, you will receive two integers \n    pos\n and \n    a_pos\n \u2014 the\nposition in the array \n    a\n of the \n    m\n-th in ascending order element\namong \n    a_x_1, a_x_2, \n    \u2026, a_x_k\n, and the element on this\nposition. In case your query is invalid or you asked more than \n    n\n\nqueries, the program will print \n    -1\n and will finish interaction. You will\nreceive a Wrong answer verdict. Make sure to exit immediately to avoid getting\nother verdicts. When you determine \n    m\n, output \n    !\n \n    m\n After\nprinting a query do not forget to output end of line and flush the output.\nOtherwise, you will get Idleness limit exceeded. To do this, use:\nfflush(stdout) or cout.flush() in C++; System.out.flush() in Java;\nflush(output) in Pascal; stdout.flush() in Python; see documentation for other\nlanguages.Hack format For the hacks use the following format: The first line\nhas to contain three integers \n    n, k, m\n (\n    1 \n    \u2264 m \n    \u2264 k < n \n    \u2264\n    500\n) \u2014 the length of the array, number of elements in the query, and which\nin the ascending order number the device returns. In the next line output\n\n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0\n    \u2264 a_i \n    \u2264 10^9\n) \u2014\nthe elements of the array. They have to be pairwise different. Example Input 4\n3 4 9 4 9 4 9 1 2 Output ? 2 3 4 ? 1 3 4 ? 1 2 4 ? 1 2 3 ! 3 Note In the\nexample, \n    n = 4\n, \n    k = 3\n, \n    m = 3\n, \n    a = [2, 0, 1, 9]\n.\n\n",
        "cf_contest_id": 1270,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "interactive",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 3 3\r\n2 0 1 9\r\n",
                "? 2 3 4\r\n? 1 3 4\r\n? 1 2 4\r\n? 1 2 3\r\n! 3\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1 1\r\n534807456 124320943\r\n",
                "? 2\r\n? 1\r\n! 1\r\n"
            ],
            [
                "3 2 2\r\n421335162 750960858 577245309\r\n",
                "? 2 3\r\n? 1 3\r\n? 1 2\r\n! 2\r\n"
            ],
            [
                "4 3 2\r\n467042175 608877104 875678781 697252268\r\n",
                "? 2 3 4\r\n? 1 3 4\r\n? 1 2 4\r\n? 1 2 3\r\n! 2\r\n"
            ],
            [
                "8 6 6\r\n187704264 215121345 15424413 742242820 810688740 302235606 948963500 479616785\r\n",
                "? 2 3 4 5 6 7\r\n? 1 3 4 5 6 7\r\n? 1 2 4 5 6 7\r\n? 1 2 3 5 6 7\r\n? 1 2 3 4 6 7\r\n? 1 2 3 4 5 7\r\n? 1 2 3 4 5 6\r\n! 6\r\n"
            ],
            [
                "10 9 1\r\n321376743 64146243 670700897 575471266 303438330 113152943 114637600 468461998 868859319 744812570\r\n",
                "? 2 3 4 5 6 7 8 9 10\r\n? 1 3 4 5 6 7 8 9 10\r\n? 1 2 4 5 6 7 8 9 10\r\n? 1 2 3 5 6 7 8 9 10\r\n? 1 2 3 4 6 7 8 9 10\r\n? 1 2 3 4 5 7 8 9 10\r\n? 1 2 3 4 5 6 8 9 10\r\n? 1 2 3 4 5 6 7 9 10\r\n? 1 2 3 4 5 6 7 8 10\r\n? 1 2 3 4 5 6 7 8 9\r\n! 1\r\n"
            ],
            [
                "11 9 8\r\n814595022 582230335 322421617 575726087 777696481 48691809 44632024 183761969 460459274 253447215 169826060\r\n",
                "? 2 3 4 5 6 7 8 9 10\r\n? 1 3 4 5 6 7 8 9 10\r\n? 1 2 4 5 6 7 8 9 10\r\n? 1 2 3 5 6 7 8 9 10\r\n? 1 2 3 4 6 7 8 9 10\r\n? 1 2 3 4 5 7 8 9 10\r\n? 1 2 3 4 5 6 8 9 10\r\n? 1 2 3 4 5 6 7 9 10\r\n? 1 2 3 4 5 6 7 8 10\r\n? 1 2 3 4 5 6 7 8 9\r\n! 8\r\n"
            ]
        ]
    }
]