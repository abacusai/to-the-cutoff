[
    {
        "name": "Knowledge Cards",
        "description": "Pak Chanek, a renowned scholar, invented a card puzzle using his knowledge. In\nthe puzzle, you are given a board with \n    n\n rows and \n    m\n columns. Let\n\n    (r, c)\n represent the cell in the \n    r\n-th row and the \n    c\n-th\ncolumn. Initially, there are \n    k\n cards stacked in cell \n    (1, 1)\n. Each\ncard has an integer from \n    1\n to \n    k\n written on it. More specifically,\nthe \n    i\n-th card from the top of the stack in cell \n    (1, 1)\n has the\nnumber \n    a_i\n written on it. It is known that no two cards have the same\nnumber written on them. In other words, the numbers written on the cards are a\npermutation of integers from \n    1\n to \n    k\n. All other cells are empty.\nYou need to move the \n    k\n cards to cell \n    (n, m)\n to create another\nstack of cards. Let \n    b_i\n be the number written on the \n    i\n-th card\nfrom the top of the stack in cell \n    (n, m)\n. You should create the stack in\ncell \n    (n, m)\n in such a way so that \n    b_i = i\n for all \n    1 \n    \u2264 i\n    \n    \u2264 k\n. In one move, you can remove the top card from a cell and place it\nonto an adjacent cell (a cell that shares a common side). If the target cell\nalready contains one or more cards, you place your card on the top of the\nstack. You must do each operation while satisfying the following restrictions:\nEach cell other than \n    (1,1)\n and \n    (n,m)\n must not have more than one\ncard on it. You cannot move a card onto cell \n    (1,1)\n. You cannot move a\ncard from cell \n    (n,m)\n. Given the values of \n    n\n, \n    m\n, \n    k\n and\nthe array \n    a\n, determine if the puzzle is solvable. Input Each test\ncontains multiple test cases. The first line contains an integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 2 \n    \u00b7 10^4\n) \u2014 the number of test cases. The following\nlines contain the description of each test case. The first line of each test\ncase contains three integers \n    n\n, \n    m\n, and \n    k\n (\n    3 \n    \u2264 n, m\n    \n    \u2264 10^6\n, \n    nm \n    \u2264 10^6\n, \n    1 \n    \u2264 k \n    \u2264 10^5\n) \u2014 the size\nof the board and the number of cards. The second line of the test case\ncontains \n    k\n integers \n    a_1, a_2, \n    \u2026, a_k\n \u2014 the array \n    a\n,\nrepresenting the numbers written on the cards. The values of \n    a\n are a\npermutation of integers from \n    1\n to \n    k\n. It is guaranteed that the sum\nof \n    nm\n and \n    k\n over all test cases do not exceed \n    10^6\n and\n\n    10^5\n respectively. Output For each test case, output \"YA\" (without\nquotes) if it is possible and \"TIDAK\" (without quotes) otherwise, which mean\nyes and no in Indonesian respectively. You can output \"YA\" and \"TIDAK\" in any\ncase (for example, strings \"tiDAk\", \"tidak\", and \"Tidak\" will be recognised as\na negative response). Example Input 4 3 3 6 3 6 4 1 2 5 3 3 10 1 2 3 4 5 6 7 8\n9 10 5 4 4 2 1 3 4 3 4 10 10 4 9 3 5 6 8 2 7 1 Output YA TIDAK YA YA Note In\nthe first test case, the following is one way the puzzle can be done: Move the\ncard with \n    3\n written on it from cell \n    (1, 1)\n to cell \n    (1, 2)\n,\nthen cell \n    (1, 3)\n. Move the card with \n    6\n written on it from cell\n\n    (1, 1)\n to cell \n    (2, 1)\n, then cell \n    (3, 1)\n, then cell \n    (3,\n    2)\n, then cell \n    (3, 3)\n. Move the card with \n    4\n written on it from\ncell \n    (1, 1)\n to cell \n    (1, 2)\n. Move the card with \n    1\n written on\nit from cell \n    (1, 1)\n to cell \n    (2, 1)\n, then cell \n    (2, 2)\n, then\ncell \n    (2, 3)\n. Move the card with \n    2\n written on it from cell \n    (1,\n    1)\n to cell \n    (2, 1)\n, then cell \n    (2, 2)\n. Move the card with \n    5\n\nwritten on it from cell \n    (1, 1)\n to cell \n    (2, 1)\n, then cell \n    (3,\n    1)\n, then cell \n    (3, 2)\n, then cell \n    (3, 3)\n. Move the card with\n\n    2\n written on it from cell \n    (2, 2)\n to cell \n    (2, 1)\n. Move the\ncard with \n    4\n written on it from cell \n    (1, 2)\n to cell \n    (2, 2)\n,\nthen cell \n    (3, 2)\n, then cell \n    (3, 3)\n. Move the card with \n    3\n\nwritten on it from cell \n    (1, 3)\n to cell \n    (1, 2)\n, then cell \n    (2,\n    2)\n, then cell \n    (3, 2)\n, then cell \n    (3, 3)\n. Move the card with\n\n    2\n written on it from cell \n    (2, 1)\n to cell \n    (3, 1)\n, then cell\n\n    (3, 2)\n, then cell \n    (3, 3)\n. Move the card with \n    1\n written on it\nfrom cell \n    (2, 3)\n to cell \n    (3, 3)\n. An animated illustration\nregarding the process mentioned above is as follows:\n\n",
        "cf_contest_id": 1740,
        "cf_index": "D",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3 3 6\r\n3 6 4 1 2 5\r\n3 3 10\r\n1 2 3 4 5 6 7 8 9 10\r\n5 4 4\r\n2 1 3 4\r\n3 4 10\r\n10 4 9 3 5 6 8 2 7 1\r\n",
                "YA\r\nTIDAK\r\nYA\r\nYA\r\n"
            ]
        ],
        "private_cases": []
    }
]