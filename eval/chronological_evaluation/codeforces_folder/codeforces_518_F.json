[
    {
        "name": "Pasha and Pipe",
        "description": "On a certain meeting of a ruling party \"A\" minister Pavel suggested to improve\nthe sewer system and to create a new pipe in the city. The city is an n \u00d7 m\nrectangular squared field. Each square of the field is either empty (then the\npipe can go in it), or occupied (the pipe cannot go in such square). Empty\nsquares are denoted by character '.', occupied squares are denoted by\ncharacter '#'. The pipe must meet the following criteria: the pipe is a\npolyline of width 1, the pipe goes in empty squares, the pipe starts from the\nedge of the field, but not from a corner square, the pipe ends at the edge of\nthe field but not in a corner square, the pipe has at most 2 turns (90\ndegrees), the border squares of the field must share exactly two squares with\nthe pipe, if the pipe looks like a single segment, then the end points of the\npipe must lie on distinct edges of the field, for each non-border square of\nthe pipe there are exacly two side-adjacent squares that also belong to the\npipe, for each border square of the pipe there is exactly one side-adjacent\ncell that also belongs to the pipe. Here are some samples of allowed piping\nroutes: ....# ....# .*..# ***** ****. .***. ..#.. ..#*. ..#*. #...# #..*#\n#..*# ..... ...*. ...*. Here are some samples of forbidden piping routes:\n.**.# *...# .*.*# ..... ****. .*.*. ..#.. ..#*. .*#*. #...# #..*# #*.*# .....\n...*. .***. In these samples the pipes are represented by characters ' * '.\nYou were asked to write a program that calculates the number of distinct ways\nto make exactly one pipe in the city. The two ways to make a pipe are\nconsidered distinct if they are distinct in at least one square. Input The\nfirst line of the input contains two integers n, m (2 \u2264 n, m \u2264 2000) \u2014 the\nheight and width of Berland map. Each of the next n lines contains m\ncharacters \u2014 the map of the city. If the square of the map is marked by\ncharacter '.', then the square is empty and the pipe can through it. If the\nsquare of the map is marked by character '#', then the square is full and the\npipe can't through it. Output In the first line of the output print a single\ninteger \u2014 the number of distinct ways to create a pipe. Examples Input 3 3 ...\n..# ... Output 3 Input 4 2 .. .. .. .. Output 2 Input 4 5 #...# #...# ###.#\n###.# Output 4 Note In the first sample there are 3 ways to make a pipe (the\nsquares of the pipe are marked by characters ' * '): .*. .*. ... .*# **# **#\n.*. ... .*.\n\n",
        "cf_contest_id": 518,
        "cf_index": "F",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "combinatorics",
            "dp",
            "implementation"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3 3\r\n...\r\n..#\r\n...\r\n",
                "3"
            ],
            [
                "4 2\r\n..\r\n..\r\n..\r\n..\r\n",
                "2"
            ],
            [
                "4 5\r\n#...#\r\n#...#\r\n###.#\r\n###.#\r\n",
                "4"
            ]
        ],
        "private_cases": [
            [
                "6 4\r\n##.#\r\n##.#\r\n##.#\r\n##.#\r\n##.#\r\n##.#\r\n",
                "1"
            ],
            [
                "4 6\r\n##.###\r\n##.###\r\n##.###\r\n##.###\r\n",
                "1"
            ],
            [
                "2 2\r\n..\r\n..\r\n",
                "0"
            ]
        ]
    }
]