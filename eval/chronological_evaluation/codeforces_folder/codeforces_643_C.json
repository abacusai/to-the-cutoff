[
    {
        "name": "Levels and Regions",
        "description": "Radewoosh is playing a computer game. There are n levels, numbered 1 through\nn. Levels are divided into k regions (groups). Each region contains some\npositive number of consecutive levels. The game repeats the the following\nprocess: If all regions are beaten then the game ends immediately. Otherwise,\nthe system finds the first region with at least one non-beaten level. Let X\ndenote this region. The system creates an empty bag for tokens. Each token\nwill represent one level and there may be many tokens representing the same\nlevel. For each already beaten level i in the region X, the system adds ti\ntokens to the bag (tokens representing the i-th level). Let j denote the first\nnon-beaten level in the region X. The system adds tj tokens to the bag.\nFinally, the system takes a uniformly random token from the bag and a player\nstarts the level represented by the token. A player spends one hour and beats\nthe level, even if he has already beaten it in the past. Given n, k and values\nt1, t2, ..., tn, your task is to split levels into regions. Each level must\nbelong to exactly one region, and each region must contain non-empty\nconsecutive set of levels. What is the minimum possible expected number of\nhours required to finish the game? Input The first line of the input contains\ntwo integers n and k (1 \u2264 n \u2264 200 000, 1 \u2264 k \u2264 min(50, n)) \u2014 the number of\nlevels and the number of regions, respectively. The second line contains n\nintegers t1, t2, ..., tn (1 \u2264 ti \u2264 100 000). Output Print one real number \u2014\nthe minimum possible expected value of the number of hours spent to finish the\ngame if levels are distributed between regions in the optimal way. Your answer\nwill be considered correct if its absolute or relative error does not exceed\n10^-4. Namely: let's assume that your answer is a, and the answer of the jury\nis b. The checker program will consider your answer correct if . Examples\nInput 4 2 100 3 5 7 Output 5.7428571429 Input 6 2 1 2 4 8 16 32 Output\n8.5000000000 Note In the first sample, we are supposed to split 4 levels into\n2 regions. It's optimal to create the first region with only one level (it\nmust be the first level). Then, the second region must contain other three\nlevels. In the second sample, it's optimal to split levels into two regions\nwith 3 levels each.\n\n",
        "cf_contest_id": 643,
        "cf_index": "C",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "dp"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 2\r\n100 3 5 7\r\n",
                "5.742857143"
            ],
            [
                "6 2\r\n1 2 4 8 16 32\r\n",
                "8.500000000"
            ]
        ],
        "private_cases": [
            [
                "10 5\r\n47 56 21 20 50 47 26 10 57 58\r\n",
                "14.039896725"
            ],
            [
                "10 5\r\n39 49 99 91 66 14 32 26 83 49\r\n",
                "13.814348147"
            ],
            [
                "20 3\r\n71 85 56 41 96 52 11 71 59 8 63 87 91 51 40 60 41 59 34 93\r\n",
                "85.571730439"
            ],
            [
                "20 4\r\n25 66 10 18 67 40 66 49 3 51 61 29 10 72 71 22 63 4 74 67\r\n",
                "68.053406020"
            ],
            [
                "20 5\r\n79 44 59 91 54 28 30 35 42 95 56 58 29 89 93 73 81 53 23 45\r\n",
                "50.111568056"
            ],
            [
                "10 4\r\n100000 100000 100000 100000 100000 100000 100000 1000 15 1\r\n",
                "31.000000000"
            ],
            [
                "12 6\r\n100000 100000 10000 10000 1000 1000 100 100 10 10 1 1\r\n",
                "18.000000000"
            ],
            [
                "1 1\r\n1\r\n",
                "1.000000000"
            ],
            [
                "50 50\r\n19867 45605 40384 80338 35357 26984 42119 22894 54485 43252 73155 16988 49368 28732 94027 3201 85154 31575 3611 44646 85903 78111 63411 20408 91746 8981 59064 77033 14529 59387 47314 13004 72950 19288 42156 86108 39184 9848 72600 5110 11040 30346 33864 72442 60477 77920 96662 23854 62016 81458\r\n",
                "50.000000000"
            ],
            [
                "50 50\r\n98600 97856 94746 90361 92889 99197 92619 96786 90334 94428 97737 96351 92051 99379 94986 93158 93099 99484 92760 91214 92261 95826 96976 94365 97281 96357 90866 99013 92511 98257 95552 98091 93730 95035 92431 94150 95576 93406 90174 97817 92985 95435 92011 93452 94114 98132 97037 93952 100 1\r\n",
                "50.000000000"
            ],
            [
                "50 50\r\n94502 91117 93131 93702 97444 95558 94753 94713 98277 92507 96468 92973 98242 94798 96217 98289 95872 91058 99562 93124 94116 95119 90302 97441 92214 100 1 2 1 1 1 1 3 3 1 2 1 3 2 3 2 1 2 2 1 2 2 2 1 3\r\n",
                "50.000000003"
            ],
            [
                "50 50\r\n100000 1000 2 2 3 2 2 2 2 3 3 1 1 3 3 3 1 1 3 1 1 3 2 1 3 1 1 1 1 2 3 3 2 1 1 1 1 2 3 1 3 1 1 1 1 2 2 1 3 2\r\n",
                "50.000000000"
            ],
            [
                "200 50\r\n100000 1000 3 1 3 2 1 3 2 1 2 1 2 1 2 1 3 1 2 3 2 2 2 1 1 1 1 2 2 2 2 3 3 2 3 1 1 2 3 3 3 1 3 1 3 2 3 1 1 1 3 3 1 3 3 3 1 1 1 3 1 2 2 3 1 2 1 2 1 1 2 3 3 3 2 3 2 1 2 3 1 2 2 3 3 3 3 2 2 2 3 1 3 2 1 1 1 1 3 2 3 3 2 2 1 3 2 3 2 3 1 1 1 3 2 2 3 3 1 1 2 2 3 3 1 2 1 1 1 1 3 1 3 1 3 2 1 2 2 1 3 1 3 1 2 1 3 2 2 3 3 1 1 3 2 3 3 2 2 2 2 1 1 3 1 2 2 2 3 1 2 1 1 2 2 1 2 1 2 1 3 2 2 1 2 3 1 3 2 2 3 1 1 1 1 2 2 1 1 2\r\n",
                "458.500000011"
            ]
        ]
    }
]