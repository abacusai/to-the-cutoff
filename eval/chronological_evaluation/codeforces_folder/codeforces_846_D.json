[
    {
        "name": "Monitor",
        "description": "Recently Luba bought a monitor. Monitor is a rectangular matrix of size n \u00d7 m.\nBut then she started to notice that some pixels cease to work properly. Luba\nthinks that the monitor will become broken the first moment when it contains a\nsquare k \u00d7 k consisting entirely of broken pixels. She knows that q pixels are\nalready broken, and for each of them she knows the moment when it stopped\nworking. Help Luba to determine when the monitor became broken (or tell that\nit's still not broken even after all q pixels stopped working). Input The\nfirst line contains four integer numbers n, m, k, q (1 \u2264 n, m \u2264 500, 1 \u2264 k \u2264\nmin(n, m), 0 \u2264 q \u2264 n\u00b7m) \u2014 the length and width of the monitor, the size of a\nrectangle such that the monitor is broken if there is a broken rectangle with\nthis size, and the number of broken pixels. Each of next q lines contain three\ninteger numbers xi, yi, ti (1 \u2264 xi \u2264 n, 1 \u2264 yi \u2264 m, 0 \u2264 t \u2264 10^9) \u2014\ncoordinates of i-th broken pixel (its row and column in matrix) and the moment\nit stopped working. Each pixel is listed at most once. We consider that pixel\nis already broken at moment ti. Output Print one number \u2014 the minimum moment\nthe monitor became broken, or \"-1\" if it's still not broken after these q\npixels stopped working. Examples Input 2 3 2 5 2 1 8 2 2 8 1 2 1 1 3 4 2 3 2\nOutput 8 Input 3 3 2 5 1 2 2 2 2 1 2 3 5 3 2 10 2 1 100 Output -1\n\n",
        "cf_contest_id": 846,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 3 2 5\r\n2 1 8\r\n2 2 8\r\n1 2 1\r\n1 3 4\r\n2 3 2\r\n",
                "8\r\n"
            ],
            [
                "3 3 2 5\r\n1 2 2\r\n2 2 1\r\n2 3 5\r\n3 2 10\r\n2 1 100\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "29 50 5 29\r\n21 42 1565821\r\n21 43 53275635\r\n21 44 2717830\r\n21 45 9579585\r\n21 46 20725775\r\n22 42 2568372\r\n22 43 9584662\r\n22 44 31411635\r\n22 45 5089311\r\n22 46 4960702\r\n23 42 11362237\r\n23 43 42200296\r\n23 44 18762146\r\n23 45 8553819\r\n23 46 4819516\r\n24 42 10226552\r\n24 43 21022685\r\n24 44 32940182\r\n24 45 39208099\r\n24 46 3119232\r\n25 42 8418247\r\n25 43 4093694\r\n25 44 9162006\r\n25 45 328637\r\n25 46 13121717\r\n6 21 3147344\r\n28 26 12445148\r\n5 7 925220\r\n25 35 170187\r\n",
                "53275635\r\n"
            ],
            [
                "500 500 1 0\r\n",
                "-1\r\n"
            ],
            [
                "1 1 1 0\r\n",
                "-1\r\n"
            ],
            [
                "1 1 1 1\r\n1 1 228\r\n",
                "228\r\n"
            ],
            [
                "4 5 2 20\r\n1 2 3\r\n1 3 8\r\n4 3 6\r\n4 5 2\r\n2 2 15\r\n1 5 14\r\n3 5 10\r\n1 4 16\r\n2 3 7\r\n2 4 17\r\n2 5 1\r\n1 1 12\r\n3 4 19\r\n2 1 13\r\n3 2 18\r\n4 2 11\r\n4 1 4\r\n3 3 9\r\n3 1 0\r\n4 4 5\r\n",
                "15\r\n"
            ],
            [
                "4 2 1 4\r\n4 2 3\r\n2 2 0\r\n4 1 2\r\n1 1 1\r\n",
                "0\r\n"
            ],
            [
                "3 4 2 9\r\n3 3 8\r\n1 1 5\r\n1 2 4\r\n3 1 2\r\n1 4 7\r\n3 4 1\r\n2 4 0\r\n2 3 6\r\n1 3 3\r\n",
                "7\r\n"
            ]
        ]
    }
]