[
    {
        "name": "Random Events",
        "description": "Ron is a happy owner of a permutation \n    a\n of length \n    n\n. A permutation\nof length \n    n\n is an array consisting of \n    n\n distinct integers from\n\n    1\n to \n    n\n in arbitrary order. For example, \n    [2,3,1,5,4]\n is a\npermutation, but \n    [1,2,2]\n is not a permutation (\n    2\n appears twice in\nthe array) and \n    [1,3,4]\n is also not a permutation (\n    n=3\n but there is\n\n    4\n in the array). Ron's permutation is subjected to \n    m\n experiments\nof the following type: (\n    r_i\n, \n    p_i\n). This means that elements in\nrange \n    [1, r_i]\n (in other words, the prefix of length \n    r_i\n) have to\nbe sorted in ascending order with the probability of \n    p_i\n. All\nexperiments are performed in the same order in which they are specified in the\ninput data. As an example, let's take a look at a permutation \n    [4, 2, 1, 5,\n    3]\n and an experiment (\n    3, 0.6\n). After such an experiment with the\nprobability of \n    60\n    %\n the permutation will assume the form \n    [1, 2, 4,\n    5, 3]\n and with a \n    40\n    %\n probability it will remain unchanged. You\nhave to determine the probability of the permutation becoming completely\nsorted in ascending order after \n    m\n experiments. Input Each test contains\none or more test cases. The first line contains the number of test cases\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n). The first line of each test case contains\ntwo integers \n    n\n and \n    m\n \n    (1 \n    \u2264 n, m \n    \u2264 10^5)\n \u2014 the length\nof the permutation and the number of experiments, respectively. The second\nline of each test case contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n\n\n    (1 \n    \u2264 a_i \n    \u2264 n)\n \u2014 contents of the permutation. The following\n\n    m\n lines of each test case each contain an integer \n    r_i\n and a real\nnumber \n    p_i\n \n    (1 \n    \u2264 r_i \n    \u2264 n, 0 \n    \u2264 p_i \n    \u2264 1)\n \u2014 the length\nof the prefix and the probability of it being sorted. All probabilities are\ngiven with at most \n    6\n decimal places. It is guaranteed that the sum of\n\n    n\n and the sum of \n    m\n does not exceed \n    10^5\n (\n    \u2211 n, \n    \u2211\n    m \n    \u2264 10^5\n). Output For each test case, print a single number \u2014 the\nprobability that after all experiments the permutation becomes sorted in\nascending order. Your answer will be considered correct if its absolute or\nrelative error does not exceed \n    10^-6\n. Formally, let your answer be\n\n    a\n, and the jury's answer be \n    b\n. Your answer is accepted if and only\nif \n    |a - b|/\n    max(1, |b|)\n    \u2264 10^-6\n. Example Input 4 4 3\n4 3 2 1 1 0.3 3 1 4 0.6 5 3 4 2 1 3 5 3 0.8 4 0.6 5 0.3 6 5 1 3 2 4 5 6 4 0.9\n5 0.3 2 0.4 6 0.7 3 0.5 4 2 1 2 3 4 2 0.5 4 0.1 Output 0.600000 0.720000\n0.989500 1.000000 Note Explanation of the first test case: It can be\ndemonstrated that whether the final permutation is sorted or not depends\nsolely on sorting being performed in the \n    (4, 0.6)\n experiment.\n\n",
        "cf_contest_id": 1461,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "math",
            "probabilities"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4 3\r\n4 3 2 1\r\n1 0.3\r\n3 1\r\n4 0.6\r\n5 3\r\n4 2 1 3 5\r\n3 0.8\r\n4 0.6\r\n5 0.3\r\n6 5\r\n1 3 2 4 5 6\r\n4 0.9\r\n5 0.3\r\n2 0.4\r\n6 0.7\r\n3 0.5\r\n4 2\r\n1 2 3 4\r\n2 0.5\r\n4 0.1\r\n",
                "0.6\r\n0.72\r\n0.9895\r\n1.0\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n9 1\r\n1 2 3 4 5 6 7 8 9\r\n6 0.000000\r\n6 1\r\n1 2 3 4 5 6\r\n1 0.000033\r\n4 1\r\n1 2 3 4\r\n1 0.000048\r\n15 1\r\n2 1 3 4 5 6 7 8 9 10 11 12 13 14 15\r\n6 0.000097\r\n",
                "1.0\r\n1.0\r\n1.0\r\n9.700000000001374e-05\r\n"
            ],
            [
                "8\r\n6 1\r\n2 4 1 3 5 6\r\n5 0.036247\r\n11 1\r\n3 7 1 6 5 2 4 8 9 10 11\r\n6 0.020413\r\n5 1\r\n1 2 3 4 5\r\n5 0.031733\r\n4 1\r\n2 1 3 4\r\n4 0.011117\r\n3 1\r\n1 2 3\r\n2 0.012880\r\n6 1\r\n1 4 3 2 5 6\r\n5 0.009130\r\n13 1\r\n1 4 7 8 3 6 2 5 9 10 11 12 13\r\n7 0.064301\r\n15 1\r\n3 2 10 7 9 8 1 4 5 6 11 12 13 14 15\r\n12 0.060138\r\n",
                "0.03624700000000003\r\n0.0\r\n1.0\r\n0.011117000000000044\r\n1.0\r\n0.009129999999999971\r\n0.0\r\n0.060138000000000025\r\n"
            ],
            [
                "4\r\n15 1\r\n14 8 12 4 2 10 9 1 7 13 11 3 6 15 5\r\n15 0.044144\r\n12 1\r\n11 1 5 9 7 12 3 4 8 2 10 6\r\n6 0.458573\r\n13 1\r\n11 8 10 9 5 2 4 6 1 3 13 12 7\r\n13 0.326778\r\n15 1\r\n6 13 4 1 2 14 15 3 7 10 5 9 12 8 11\r\n11 0.657535\r\n",
                "0.04414399999999996\r\n0.0\r\n0.326778\r\n0.0\r\n"
            ],
            [
                "2\r\n5 12\r\n3 2 1 4 5\r\n4 0.024816\r\n5 0.054959\r\n2 0.063211\r\n4 0.057224\r\n3 0.033510\r\n5 0.064656\r\n4 0.080912\r\n5 0.094426\r\n2 0.065718\r\n1 0.002728\r\n2 0.047829\r\n4 0.022481\r\n15 15\r\n3 8 5 7 9 2 4 6 1 10 11 12 13 14 15\r\n7 0.035821\r\n11 0.044624\r\n4 0.014940\r\n15 0.000655\r\n12 0.002577\r\n15 0.021032\r\n9 0.087483\r\n9 0.009845\r\n13 0.010765\r\n5 0.098312\r\n10 0.040318\r\n14 0.057622\r\n11 0.029710\r\n6 0.068983\r\n15 0.044438\r\n",
                "0.36097078475712274\r\n0.3012944667873305\r\n"
            ],
            [
                "1\r\n5 5\r\n1 2 3 5 4\r\n5 0.5\r\n5 0.5\r\n5 0.5\r\n5 0.5\r\n5 0.5\r\n",
                "0.96875\r\n"
            ]
        ]
    }
]