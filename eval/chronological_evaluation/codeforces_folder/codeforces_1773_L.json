[
    {
        "name": "Lisa's Sequences",
        "description": "Lisa loves playing with the sequences of integers. When she gets a new integer\nsequence \n    a_i\n of length \n    n\n, she starts looking for all monotone\nsubsequences. A monotone subsequence \n    [l, r]\n is defined by two indices\n\n    l\n and \n    r\n (\n    1 \n    \u2264 l < r \n    \u2264 n\n) such that \n    \u2200 i =\n    l, l+1, \n    \u2026, r-1: a_i \n    \u2264 a_i+1\n or \n    \u2200 i = l, l+1,\n    \n    \u2026, r-1: a_i \n    \u2265 a_i+1\n. Lisa considers a sequence \n    a_i\n to be\nboring if there is a monotone subsequence \n    [l, r]\n that is as long as her\nboredom threshold \n    k\n, that is when \n    r - l + 1 = k\n. Lucas has a\nsequence \n    b_i\n that he wants to present to Lisa, but the sequence might be\nboring for Lisa. So, he wants to change some elements of his sequence\n\n    b_i\n, so that Lisa does not get bored playing with it. However, Lucas is\nlazy and wants to change as few elements of the sequence \n    b_i\n as\npossible. Your task is to help Lucas find the required changes. Input The\nfirst line of the input contains two integers \n    n\n and \n    k\n (\n    3 \n    \u2264\n    k \n    \u2264 n \n    \u2264 10^6\n) \u2014 the length of the sequence and Lisa's boredom\nthreshold. The second line contains \n    n\n integers \n    b_i\n (\n    1 \n    \u2264 b_i\n    \n    \u2264 99\n     999\n) \u2014 the original sequence that Lucas has. Output On the\nfirst line output an integer \n    m\n \u2014 the minimal number of elements in\n\n    b_i\n that needs to be changed to make the sequence not boring for Lisa.\nOn the second line output \n    n\n integers \n    a_i\n (\n    0 \n    \u2264 a_i \n    \u2264\n    100\n     000\n), so that the sequence of integers \n    a_i\n is not boring for\nLisa and is different from the original sequence \n    b_i\n in exactly \n    m\n\npositions. Examples Input 5 3 1 2 3 4 5 Output 2 1 0 3 0 5 Input 6 3 1 1 1 1 1\n1 Output 3 1 100000 0 1 0 1 Input 6 4 1 1 4 4 1 1 Output 1 1 1 4 0 1 1 Input 6\n4 4 4 4 2 2 2 Output 2 4 4 0 2 0 2 Input 6 4 4 4 4 3 4 4 Output 1 4 4 100000 3\n4 4 Input 8 4 2 1 1 3 3 1 1 2 Output 2 2 1 1 3 0 1 0 2 Input 10 4 1 1 1 2 2 1\n1 2 2 1 Output 2 1 1 100000 2 2 100000 1 2 2 1 Input 7 5 5 4 4 3 4 4 4 Output\n0 5 4 4 3 4 4 4 Input 10 10 1 1 1 1 1 1 1 1 1 1 Output 1 1 1 1 1 1 1 1 1 0 1\n\n",
        "cf_contest_id": 1773,
        "cf_index": "L",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "dp"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [],
        "private_cases": []
    }
]