[
    {
        "name": "Xor-tree",
        "description": "Iahub is very proud of his recent discovery, propagating trees. Right now, he\ninvented a new tree, called xor-tree. After this new revolutionary discovery,\nhe invented a game for kids which uses xor-trees. The game is played on a tree\nhaving n nodes, numbered from 1 to n. Each node i has an initial value initi,\nwhich is either 0 or 1. The root of the tree is node 1. One can perform\nseveral (possibly, zero) operations on the tree during the game. The only\navailable type of operation is to pick a node x. Right after someone has\npicked node x, the value of node x flips, the values of sons of x remain the\nsame, the values of sons of sons of x flips, the values of sons of sons of\nsons of x remain the same and so on. The goal of the game is to get each node\ni to have value goali, which can also be only 0 or 1. You need to reach the\ngoal of the game by using minimum number of operations. Input The first line\ncontains an integer n (1 \u2264 n \u2264 10^5). Each of the next n - 1 lines contains\ntwo integers ui and vi (1 \u2264 ui, vi \u2264 n; ui \u2260 vi) meaning there is an edge\nbetween nodes ui and vi. The next line contains n integer numbers, the i-th of\nthem corresponds to initi (initi is either 0 or 1). The following line also\ncontains n integer numbers, the i-th number corresponds to goali (goali is\neither 0 or 1). Output In the first line output an integer number cnt,\nrepresenting the minimal number of operations you perform. Each of the next\ncnt lines should contain an integer xi, representing that you pick a node xi.\nExamples Input 10 2 1 3 1 4 2 5 1 6 2 7 5 8 6 9 8 10 5 1 0 1 1 0 1 0 1 0 1 1 0\n1 0 0 1 1 1 0 1 Output 2 4 7\n\n",
        "cf_contest_id": 429,
        "cf_index": "A",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10\r\n2 1\r\n3 1\r\n4 2\r\n5 1\r\n6 2\r\n7 5\r\n8 6\r\n9 8\r\n10 5\r\n1 0 1 1 0 1 0 1 0 1\r\n1 0 1 0 0 1 1 1 0 1\r\n",
                "2\r\n4\r\n7\r\n"
            ]
        ],
        "private_cases": [
            [
                "15\r\n2 1\r\n3 2\r\n4 3\r\n5 4\r\n6 5\r\n7 6\r\n8 7\r\n9 8\r\n10 9\r\n11 10\r\n12 11\r\n13 12\r\n14 13\r\n15 14\r\n0 1 0 0 1 1 1 1 1 1 0 0 0 1 1\r\n1 1 1 1 0 0 1 1 0 1 0 0 1 1 0\r\n",
                "7\r\n1\r\n4\r\n7\r\n8\r\n9\r\n11\r\n13\r\n"
            ],
            [
                "20\r\n2 1\r\n3 2\r\n4 3\r\n5 4\r\n6 4\r\n7 1\r\n8 2\r\n9 4\r\n10 2\r\n11 6\r\n12 9\r\n13 2\r\n14 12\r\n15 14\r\n16 8\r\n17 9\r\n18 13\r\n19 2\r\n20 17\r\n1 0 0 1 0 0 0 1 0 1 0 0 0 1 1 0 1 0 1 0\r\n1 0 0 1 0 0 1 1 0 0 1 0 0 1 0 0 0 1 0 1\r\n",
                "8\r\n11\r\n15\r\n17\r\n20\r\n10\r\n18\r\n19\r\n7\r\n"
            ],
            [
                "30\r\n2 1\r\n3 2\r\n4 3\r\n5 3\r\n6 5\r\n7 3\r\n8 3\r\n9 2\r\n10 3\r\n11 2\r\n12 11\r\n13 6\r\n14 4\r\n15 5\r\n16 11\r\n17 9\r\n18 14\r\n19 6\r\n20 2\r\n21 19\r\n22 9\r\n23 19\r\n24 20\r\n25 14\r\n26 22\r\n27 1\r\n28 6\r\n29 13\r\n30 27\r\n1 0 1 1 1 1 0 1 0 0 1 0 0 0 1 0 0 1 0 1 0 0 1 0 0 1 1 1 1 0\r\n0 1 0 1 1 1 0 0 1 1 0 1 1 1 0 1 1 1 1 0 1 0 0 1 0 1 1 0 0 0\r\n",
                "15\r\n1\r\n2\r\n4\r\n5\r\n6\r\n13\r\n29\r\n19\r\n21\r\n23\r\n28\r\n7\r\n22\r\n26\r\n30\r\n"
            ],
            [
                "15\r\n2 1\r\n3 1\r\n4 1\r\n5 1\r\n6 3\r\n7 1\r\n8 1\r\n9 1\r\n10 5\r\n11 9\r\n12 3\r\n13 5\r\n14 5\r\n15 4\r\n1 1 0 0 0 0 1 1 1 0 1 1 1 0 0\r\n1 0 1 1 0 1 1 1 1 1 1 1 1 1 0\r\n",
                "6\r\n2\r\n3\r\n6\r\n4\r\n10\r\n14\r\n"
            ],
            [
                "20\r\n2 1\r\n3 1\r\n4 2\r\n5 2\r\n6 3\r\n7 1\r\n8 6\r\n9 2\r\n10 3\r\n11 6\r\n12 2\r\n13 3\r\n14 2\r\n15 1\r\n16 8\r\n17 15\r\n18 2\r\n19 14\r\n20 14\r\n0 0 0 0 1 1 1 1 1 1 0 1 1 1 0 0 0 1 1 1\r\n0 1 0 1 1 1 0 0 1 0 1 1 0 1 0 1 0 0 1 0\r\n",
                "10\r\n2\r\n4\r\n19\r\n18\r\n8\r\n16\r\n11\r\n10\r\n13\r\n7\r\n"
            ],
            [
                "23\r\n2 1\r\n3 2\r\n4 1\r\n5 1\r\n6 5\r\n7 3\r\n8 2\r\n9 8\r\n10 5\r\n11 6\r\n12 9\r\n13 3\r\n14 11\r\n15 5\r\n16 2\r\n17 3\r\n18 10\r\n19 16\r\n20 14\r\n21 19\r\n22 17\r\n23 7\r\n0 1 0 1 1 1 0 1 1 0 0 0 1 0 0 1 1 0 1 0 0 0 0\r\n0 0 0 0 1 1 1 1 1 0 1 0 1 0 0 1 1 0 0 0 0 0 1\r\n",
                "8\r\n2\r\n23\r\n13\r\n17\r\n9\r\n4\r\n11\r\n20\r\n"
            ],
            [
                "1\r\n0\r\n0\r\n",
                "0\r\n"
            ],
            [
                "10\r\n1 10\r\n1 9\r\n10 2\r\n10 3\r\n3 7\r\n3 8\r\n9 4\r\n9 5\r\n5 6\r\n1 0 1 1 0 1 0 1 0 1\r\n0 0 0 0 0 0 0 0 0 0\r\n",
                "6\r\n1\r\n10\r\n2\r\n7\r\n5\r\n6\r\n"
            ]
        ]
    }
]