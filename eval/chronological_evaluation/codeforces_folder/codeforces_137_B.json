[
    {
        "name": "Permutation",
        "description": "\"Hey, it's homework time\" \u2014 thought Polycarpus and of course he started with\nhis favourite subject, IT. Polycarpus managed to solve all tasks but for the\nlast one in 20 minutes. However, as he failed to solve the last task after\nsome considerable time, the boy asked you to help him. The sequence of n\nintegers is called a permutation if it contains all integers from 1 to n\nexactly once. You are given an arbitrary sequence a1, a2, ..., an containing n\nintegers. Each integer is not less than 1 and not greater than 5000. Determine\nwhat minimum number of elements Polycarpus needs to change to get a\npermutation (he should not delete or add numbers). In a single change he can\nmodify any single sequence element (i. e. replace it with another integer).\nInput The first line of the input data contains an integer n (1 \u2264 n \u2264 5000)\nwhich represents how many numbers are in the sequence. The second line\ncontains a sequence of integers ai (1 \u2264 ai \u2264 5000, 1 \u2264 i \u2264 n). Output Print\nthe only number \u2014 the minimum number of changes needed to get the permutation.\nExamples Input 3 3 1 2 Output 0 Input 2 2 2 Output 1 Input 5 5 3 3 3 1 Output\n2 Note The first sample contains the permutation, which is why no replacements\nare required. In the second sample it is enough to replace the first element\nwith the number 1 and that will make the sequence the needed permutation. In\nthe third sample we can replace the second element with number 4 and the\nfourth element with number 2.\n\n",
        "cf_contest_id": 137,
        "cf_index": "B",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3 1 2\r\n",
                "0\n"
            ],
            [
                "2\r\n2 2\r\n",
                "1\n"
            ],
            [
                "5\r\n5 3 3 3 1\r\n",
                "2\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n6 6 6 6 6\r\n",
                "5\n"
            ],
            [
                "10\r\n1 1 2 2 8 8 7 7 9 9\r\n",
                "5\n"
            ],
            [
                "8\r\n9 8 7 6 5 4 3 2\r\n",
                "1\n"
            ],
            [
                "15\r\n1 2 3 4 5 5 4 3 2 1 1 2 3 4 5\r\n",
                "10\n"
            ],
            [
                "1\r\n1\r\n",
                "0\n"
            ],
            [
                "1\r\n5000\r\n",
                "1\n"
            ],
            [
                "4\r\n5000 5000 5000 5000\r\n",
                "4\n"
            ],
            [
                "5\r\n3366 3461 4 5 4370\r\n",
                "3\n"
            ],
            [
                "10\r\n8 2 10 3 4 6 1 7 9 5\r\n",
                "0\n"
            ],
            [
                "10\r\n551 3192 3213 2846 3068 1224 3447 1 10 9\r\n",
                "7\n"
            ],
            [
                "15\r\n4 1459 12 4281 3241 2748 10 3590 14 845 3518 1721 2 2880 1974\r\n",
                "10\n"
            ],
            [
                "15\r\n15 1 8 2 13 11 12 7 3 14 6 10 9 4 5\r\n",
                "0\n"
            ],
            [
                "15\r\n2436 2354 4259 1210 2037 2665 700 3578 2880 973 1317 1024 24 3621 4142\r\n",
                "15\n"
            ],
            [
                "30\r\n28 1 3449 9 3242 4735 26 3472 15 21 2698 7 4073 3190 10 3 29 1301 4526 22 345 3876 19 12 4562 2535 2 630 18 27\r\n",
                "14\n"
            ],
            [
                "1\r\n2\r\n",
                "1\n"
            ],
            [
                "2\r\n5000 5000\r\n",
                "2\n"
            ],
            [
                "2\r\n1 2\r\n",
                "0\n"
            ],
            [
                "2\r\n1 1\r\n",
                "1\n"
            ],
            [
                "2\r\n2 3\r\n",
                "1\n"
            ],
            [
                "2\r\n3 4\r\n",
                "2\n"
            ],
            [
                "10\r\n1 2 3 4 5 6 7 1000 10 10\r\n",
                "2\n"
            ]
        ]
    }
]