[
    {
        "name": "Two-Paths",
        "description": "You are given a weighted tree (undirected connected graph with no cycles,\nloops or multiple edges) with \n    n\n vertices. The edge \n    u_j,\n    v_j\n has weight \n    w_j\n. Also each vertex \n    i\n has its own value\n\n    a_i\n assigned to it. Let's call a path starting in vertex \n    u\n and\nending in vertex \n    v\n, where each edge can appear no more than twice\n(regardless of direction), a 2-path. Vertices can appear in the 2-path\nmultiple times (even start and end vertices). For some 2-path \n    p\n profit\n\n    Pr(p) = \n    \u2211\n    _v \n    \u2208\n    distinct vertices in \n    pa_v - \n    \u2211\n    _e \n    \u2208\n    distinct edges in  pk_e \n    \u00b7\n    w_e\n, where \n    k_e\n is the number of times edge \n    e\n appears in\n\n    p\n. That is, vertices are counted once, but edges are counted the number\nof times they appear in \n    p\n. You are about to answer \n    m\n queries. Each\nquery is a pair of vertices \n    (qu, qv)\n. For each query find 2-path \n    p\n\nfrom \n    qu\n to \n    qv\n with maximal profit \n    Pr(p)\n. Input The\nfirst line contains two integers \n    n\n and \n    q\n (\n    2 \n    \u2264 n \n    \u2264 3\n    \n    \u00b7 10^5\n, \n    1 \n    \u2264 q \n    \u2264 4 \n    \u00b7 10^5\n) \u2014 the number of\nvertices in the tree and the number of queries. The second line contains\n\n    n\n space-separated integers \n    a_1, a_2, \n    \u2026, a_n\n \n    (1 \n    \u2264 a_i\n    \n    \u2264 10^9)\n \u2014 the values of the vertices. Next \n    n - 1\n lines contain\ndescriptions of edges: each line contains three space separated integers\n\n    u_i\n, \n    v_i\n and \n    w_i\n (\n    1 \n    \u2264 u_i, v_i \n    \u2264 n\n, \n    u_i\n    \n    \u2260 v_i\n, \n    1 \n    \u2264 w_i \n    \u2264 10^9\n) \u2014 there is edge \n    u_i,\n    v_i\n with weight \n    w_i\n in the tree. Next \n    q\n lines contain\nqueries (one per line). Each query contains two integers \n    qu_i\n and\n\n    qv_i\n \n    (1 \n    \u2264 qu_i, qv_i \n    \u2264 n)\n \u2014 endpoints of the 2-path you\nneed to find. Output For each query print one integer per line \u2014 maximal\nprofit \n    Pr(p)\n of the some 2-path \n    p\n with the corresponding\nendpoints. Example Input 7 6 6 5 5 3 2 1 2 1 2 2 2 3 2 2 4 1 4 5 1 6 4 2 7 3\n25 1 1 4 4 5 6 6 4 3 4 3 7 Output 9 9 9 8 12 -14 Note Explanation of queries:\n\n    (1, 1)\n \u2014 one of the optimal 2-paths is the following: \n    1 \n    \u2192\n    2 \n    \u2192 4 \n    \u2192 5 \n    \u2192 4 \n    \u2192 2\n    \n    \u2192 3 \n    \u2192 2 \n    \u2192 1\n. \n    Pr(p) = (a_1 +\n    a_2 + a_3 + a_4 + a_5) - (2 \n    \u00b7 w(1,2) + 2 \n    \u00b7 w(2,3) + 2 \n    \u00b7\n    w(2,4) + 2 \n    \u00b7 w(4,5)) = 21 - 2 \n    \u00b7 12 = 9\n. \n    (4, 4)\n: \n    4\n    \n    \u2192 2 \n    \u2192 1 \n    \u2192 2 \n    \u2192 3 \n    \u2192\n    2 \n    \u2192 4\n. \n    Pr(p) = (a_1 + a_2 + a_3 + a_4) - 2 \n    \u00b7\n    (w(1,2) + w(2,3) + w(2,4)) = 19 - 2 \n    \u00b7 10 = 9\n. \n    (5, 6)\n: \n    5\n    \n    \u2192 4 \n    \u2192 2 \n    \u2192 3 \n    \u2192 2 \n    \u2192\n    1 \n    \u2192 2 \n    \u2192 4 \n    \u2192 6\n. \n    (6, 4)\n: \n    6\n    \n    \u2192 4 \n    \u2192 2 \n    \u2192 1 \n    \u2192 2 \n    \u2192\n    3 \n    \u2192 2 \n    \u2192 4\n. \n    (3, 4)\n: \n    3 \n    \u2192 2\n    \n    \u2192 1 \n    \u2192 2 \n    \u2192 4\n. \n    (3, 7)\n: \n    3\n    \n    \u2192 2 \n    \u2192 1 \n    \u2192 2 \n    \u2192 4 \n    \u2192\n    5 \n    \u2192 4 \n    \u2192 2 \n    \u2192 3 \n    \u2192 7\n.\n\n",
        "cf_contest_id": 1000,
        "cf_index": "G",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp",
            "trees"
        ],
        "time_limit_seconds": 3.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 6\r\n6 5 5 3 2 1 2\r\n1 2 2\r\n2 3 2\r\n2 4 1\r\n4 5 1\r\n6 4 2\r\n7 3 25\r\n1 1\r\n4 4\r\n5 6\r\n6 4\r\n3 4\r\n3 7\r\n",
                "9\r\n9\r\n9\r\n8\r\n12\r\n-14\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 4\r\n5 3\r\n1 2 2\r\n1 1\r\n1 2\r\n2 1\r\n2 2\r\n",
                "5\r\n6\r\n6\r\n4\r\n"
            ],
            [
                "5 1\r\n1000000000 1000000000 1000000000 1000000000 1000000000\r\n1 2 1000000000\r\n2 3 1000000000\r\n3 4 1000000000\r\n4 5 100000000\r\n1 5\r\n",
                "1900000000\r\n"
            ],
            [
                "10 10\r\n857690534 828969071 251034796 531046374 687685084 163562337 341924810 971837553 183763940 995167403\r\n5 6 240604504\r\n5 9 168846918\r\n9 4 56601280\r\n6 1 648384581\r\n4 3 142022376\r\n6 8 826785874\r\n6 7 282111348\r\n4 2 373904031\r\n8 10 855719895\r\n4 10\r\n7 8\r\n8 9\r\n1 5\r\n9 3\r\n9 7\r\n10 4\r\n6 8\r\n4 8\r\n2 2\r\n",
                "1465665229\r\n919978481\r\n1269616441\r\n1165023797\r\n1198373711\r\n1184378224\r\n1465665229\r\n860165019\r\n1326217721\r\n1032760011\r\n"
            ]
        ]
    }
]