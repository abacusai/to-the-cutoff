[
    {
        "name": "Phone Numbers",
        "description": "Vasya has several phone books, in which he recorded the telephone numbers of\nhis friends. Each of his friends can have one or several phone numbers. Vasya\ndecided to organize information about the phone numbers of friends. You will\nbe given n strings \u2014 all entries from Vasya's phone books. Each entry starts\nwith a friend's name. Then follows the number of phone numbers in the current\nentry, and then the phone numbers themselves. It is possible that several\nidentical phones are recorded in the same record. Vasya also believes that if\nthe phone number a is a suffix of the phone number b (that is, the number b\nends up with a), and both numbers are written by Vasya as the phone numbers of\nthe same person, then a is recorded without the city code and it should not be\ntaken into account. The task is to print organized information about the phone\nnumbers of Vasya's friends. It is possible that two different people have the\nsame number. If one person has two numbers x and y, and x is a suffix of y\n(that is, y ends in x), then you shouldn't print number x. If the number of a\nfriend in the Vasya's phone books is recorded several times in the same\nformat, it is necessary to take it into account exactly once. Read the\nexamples to understand statement and format of the output better. Input First\nline contains the integer n (1 \u2264 n \u2264 20) \u2014 number of entries in Vasya's phone\nbooks. The following n lines are followed by descriptions of the records in\nthe format described in statement. Names of Vasya's friends are non-empty\nstrings whose length does not exceed 10. They consists only of lowercase\nEnglish letters. Number of phone numbers in one entry is not less than 1 is\nnot more than 10. The telephone numbers consist of digits only. If you\nrepresent a phone number as a string, then its length will be in range from 1\nto 10. Phone numbers can contain leading zeros. Output Print out the ordered\ninformation about the phone numbers of Vasya's friends. First output m \u2014\nnumber of friends that are found in Vasya's phone books. The following m lines\nmust contain entries in the following format \"name number_of_phone_numbers\nphone_numbers\". Phone numbers should be separated by a space. Each record must\ncontain all the phone numbers of current friend. Entries can be displayed in\narbitrary order, phone numbers for one record can also be printed in arbitrary\norder. Examples Input 2 ivan 1 00123 masha 1 00123 Output 2 masha 1 00123 ivan\n1 00123 Input 3 karl 2 612 12 petr 1 12 katya 1 612 Output 3 katya 1 612 petr\n1 12 karl 1 612 Input 4 ivan 3 123 123 456 ivan 2 456 456 ivan 8 789 3 23 6 56\n9 89 2 dasha 2 23 789 Output 2 dasha 2 23 789 ivan 4 789 123 2 456\n\n",
        "cf_contest_id": 898,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\nivan 1 00123\r\nmasha 1 00123\r\n",
                "2\r\nivan 1 00123\r\nmasha 1 00123\r\n"
            ],
            [
                "3\r\nkarl 2 612 12\r\npetr 1 12\r\nkatya 1 612\r\n",
                "3\r\nkatya 1 612\r\nkarl 1 612\r\npetr 1 12\r\n"
            ],
            [
                "4\r\nivan 3 123 123 456\r\nivan 2 456 456\r\nivan 8 789 3 23 6 56 9 89 2\r\ndasha 2 23 789\r\n",
                "2\r\nivan 4 789 456 123 2\r\ndasha 2 789 23\r\n"
            ]
        ],
        "private_cases": [
            [
                "20\r\nnxj 6 7 6 6 7 7 7\r\nnxj 10 8 5 1 7 6 1 0 7 0 6\r\nnxj 2 6 5\r\nnxj 10 6 7 6 6 5 8 3 6 6 8\r\nnxj 10 6 1 7 6 7 1 8 7 8 6\r\nnxj 10 8 5 8 6 5 6 1 9 6 3\r\nnxj 10 8 1 6 4 8 0 4 6 0 1\r\nnxj 9 2 6 6 8 1 1 3 6 6\r\nnxj 10 8 9 0 9 1 3 2 3 2 3\r\nnxj 6 6 7 0 8 1 2\r\nnxj 7 7 7 8 1 3 6 9\r\nnxj 10 2 7 0 1 5 1 9 1 2 6\r\nnxj 6 9 6 9 6 3 7\r\nnxj 9 0 1 7 8 2 6 6 5 6\r\nnxj 4 0 2 3 7\r\nnxj 10 0 4 0 6 1 1 8 8 4 7\r\nnxj 8 4 6 2 6 6 1 2 7\r\nnxj 10 5 3 4 2 1 0 7 0 7 6\r\nnxj 10 9 6 0 6 1 6 2 1 9 6\r\nnxj 4 2 9 0 1\r\n",
                "1\r\nnxj 10 1 0 3 2 5 4 7 6 9 8\r\n"
            ],
            [
                "20\r\nl 6 02 02 2 02 02 2\r\nl 8 8 8 8 2 62 13 31 3\r\ne 9 0 91 0 0 60 91 60 2 44\r\ne 9 69 2 1 44 2 91 66 1 70\r\nl 9 7 27 27 3 1 3 7 80 81\r\nl 9 2 1 13 7 2 10 02 3 92\r\ne 9 0 15 3 5 5 15 91 09 44\r\nl 7 2 50 4 5 98 31 98\r\nl 3 26 7 3\r\ne 6 7 5 0 62 65 91\r\nl 8 80 0 4 0 2 2 0 13\r\nl 9 19 13 02 2 1 4 19 26 02\r\nl 10 7 39 7 9 22 22 26 2 90 4\r\ne 7 65 2 36 0 34 57 9\r\ne 8 13 02 09 91 73 5 36 62\r\nl 9 75 0 10 8 76 7 82 8 34\r\nl 7 34 0 19 80 6 4 7\r\ne 5 4 2 5 7 2\r\ne 7 4 02 69 7 07 20 2\r\nl 4 8 2 1 63\r\n",
                "2\r\ne 18 20 60 62 73 65 66 70 91 69 02 13 15 07 44 09 36 34 57\r\nl 21 75 81 39 26 98 62 63 82 90 80 92 02 10 13 27 22 76 19 31 50 34\r\n"
            ],
            [
                "20\r\no 10 6 6 97 45 6 6 6 6 5 6\r\nl 8 5 5 5 19 59 5 8 5\r\nj 9 2 30 58 2 2 1 0 30 4\r\nc 10 1 1 7 51 7 7 51 1 1 1\r\no 9 7 97 87 70 2 19 2 14 6\r\ne 6 26 6 6 6 26 5\r\ng 9 3 3 3 3 3 78 69 8 9\r\nl 8 8 01 1 5 8 41 72 3\r\nz 10 1 2 2 2 9 1 9 1 6 7\r\ng 8 7 78 05 36 7 3 67 9\r\no 5 6 9 9 7 7\r\ne 10 30 2 1 1 2 5 04 0 6 6\r\ne 9 30 30 2 2 0 26 30 79 8\r\nt 10 2 2 9 29 7 7 7 9 2 9\r\nc 7 7 51 1 31 2 7 4\r\nc 9 83 1 6 78 94 74 54 8 32\r\ng 8 4 1 01 9 39 28 6 6\r\nt 7 9 2 01 4 4 9 58\r\nj 5 0 1 58 02 4\r\nw 10 80 0 91 91 06 91 9 9 27 7\r\n",
                "9\r\nc 10 83 54 31 51 7 6 32 94 74 78\r\ne 8 26 04 30 1 2 5 8 79\r\ng 10 39 01 05 67 28 36 3 4 69 78\r\nj 5 02 58 30 1 4\r\nl 8 01 59 19 41 3 5 72 8\r\no 8 14 19 45 2 6 70 87 97\r\nt 6 01 58 29 2 4 7\r\nw 5 91 27 06 9 80\r\nz 5 1 9 2 7 6\r\n"
            ],
            [
                "1\r\negew 5 3 123 23 1234 134\r\n",
                "1\r\negew 3 1234 123 134\r\n"
            ]
        ]
    }
]