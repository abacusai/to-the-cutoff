[
    {
        "name": "Restoring the Permutation",
        "description": "A permutation is a sequence of \n    n\n integers from \n    1\n to \n    n\n, in\nwhich all numbers occur exactly once. For example, \n    [1]\n, \n    [3, 5, 2, 1,\n    4]\n, \n    [1, 3, 2]\n are permutations, and \n    [2, 3, 2]\n, \n    [4, 3, 1]\n,\n\n    [0]\n are not. Polycarp was presented with a permutation \n    p\n of\nnumbers from \n    1\n to \n    n\n. However, when Polycarp came home, he noticed\nthat in his pocket, the permutation \n    p\n had turned into an array \n    q\n\naccording to the following rule: \n    q_i = \n    max(p_1, p_2, \n    \u2026, p_i)\n.\nNow Polycarp wondered what lexicographically minimal and lexicographically\nmaximal permutations could be presented to him. An array \n    a\n of length\n\n    n\n is lexicographically smaller than an array \n    b\n of length \n    n\n\nif there is an index \n    i\n (\n    1 \n    \u2264 i \n    \u2264 n\n) such that the first\n\n    i-1\n elements of arrays \n    a\n and \n    b\n are the same, and the\n\n    i\n-th element of the array \n    a\n is less than the \n    i\n-th element of\nthe array \n    b\n. For example, the array \n    a=[1, 3, 2, 3]\n is\nlexicographically smaller than the array \n    b=[1, 3, 4, 2]\n. For example, if\n\n    n=7\n and \n    p=[3, 2, 4, 1, 7, 5, 6]\n, then \n    q=[3, 3, 4, 4, 7, 7,\n    7]\n and the following permutations could have been as \n    p\n initially:\n\n    [3, 1, 4, 2, 7, 5, 6]\n (lexicographically minimal permutation); \n    [3, 1,\n    4, 2, 7, 6, 5]\n; \n    [3, 2, 4, 1, 7, 5, 6]\n; \n    [3, 2, 4, 1, 7, 6, 5]\n\n(lexicographically maximum permutation). For a given array \n    q\n, find the\nlexicographically minimal and lexicographically maximal permutations that\ncould have been originally presented to Polycarp. Input The first line\ncontains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n). Then \n    t\n test\ncases follow. The first line of each test case contains one integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n). The second line of each test case\ncontains \n    n\n integers \n    q_1, q_2, \n    \u2026, q_n\n (\n    1 \n    \u2264 q_i \n    \u2264\n    n\n). It is guaranteed that the array \n    q\n was obtained by applying the\nrule from the statement to some permutation \n    p\n. It is guaranteed that the\nsum of \n    n\n over all test cases does not exceed \n    2 \n    \u00b7 10^5\n.\nOutput For each test case, output two lines: on the first line output \n    n\n\nintegers \u2014 lexicographically minimal permutation that could have been\noriginally presented to Polycarp; on the second line print \n    n\n integers \u2014\nlexicographically maximal permutation that could have been originally\npresented to Polycarp; Example Input 4 7 3 3 4 4 7 7 7 4 1 2 3 4 7 3 4 5 5 5 7\n7 1 1 Output 3 1 4 2 7 5 6 3 2 4 1 7 6 5 1 2 3 4 1 2 3 4 3 4 5 1 2 7 6 3 4 5 2\n1 7 6 1 1\n\n",
        "cf_contest_id": 1506,
        "cf_index": "E",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n7\r\n3 3 4 4 7 7 7\r\n4\r\n1 2 3 4\r\n7\r\n3 4 5 5 5 7 7\r\n1\r\n1\r\n",
                "3 1 4 2 7 5 6 \r\n 3 2 4 1 7 6 5\r\n1 2 3 4 \r\n 1 2 3 4\r\n3 4 5 1 2 7 6 \r\n 3 4 5 2 1 7 6\r\n1 \r\n 1\r\n"
            ]
        ],
        "private_cases": []
    }
]