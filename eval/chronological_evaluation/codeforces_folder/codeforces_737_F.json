[
    {
        "name": "Dirty plates",
        "description": "After one of celebrations there is a stack of dirty plates in Nikita's\nkitchen. Nikita has to wash them and put into a dryer. In dryer, the plates\nshould be also placed in a stack also, and the plates sizes should increase\ndown up. The sizes of all plates are distinct. Nikita has no so much free\nspace, specifically, he has a place for only one more stack of plates.\nTherefore, he can perform only such two operations: Take any number of plates\nfrom 1 to a from the top of the dirty stack, wash them and put them to the\nintermediate stack. Take any number of plates from 1 to b from the top of the\nintermediate stack and put them to the stack in the dryer. Note that after\nperforming each of the operations, the plates are put in the same order as\nthey were before the operation. You are given the sizes of the plates s1, s2,\n..., sn in the down up order in the dirty stack, and integers a and b. All the\nsizes are distinct. Write a program that determines whether or not Nikita can\nput the plates in increasing down up order in the dryer. If he is able to do\nso, the program should find some sequence of operations (not necessary\noptimal) to achieve it. Input The first line contains three integers n, a and\nb (1 \u2264 n \u2264 2000, 1 \u2264 a, b \u2264 n). The second line contains integers s1, s2, ...,\nsn (1 \u2264 si \u2264 n) \u2014 the sizes of the plates in down up order. All the sizes are\ndistinct. Output In the first line print \"YES\" if there is a solution. In this\ncase, in the second line print integer k \u2014 the number of operations. Then in k\nlines print the operations, one per line. Each operation is described by two\nintegers tj and cj, where tj = 1, if the operation is to wash the top cj\nplaces from the dirty stack and put them onto the intermediate stack, and tj =\n2, if the operation is to move th top cj plates from the intermediate stack to\nthe dryer. In case there is no solution, print single line \"NO\". If there are\nmultiple solutions, print any of them. Note that it is not necessary to\nminimize the number of operations. Examples Input 6 2 3 2 3 6 4 1 5 Output YES\n8 1 2 1 1 2 1 1 2 1 1 2 1 2 1 2 3 Input 7 7 7 1 2 3 4 5 6 7 Output YES 2 1 7 2\n7 Input 7 1 1 1 2 3 4 5 6 7 Output YES 14 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 1\n2 1 2 1 2 1 2 1 2 1 Input 4 2 2 3 2 1 4 Output NO Note In the first example\nthe initial order of plates was 2, 3, 6, 4, 1, 5. Here is how the stacks look\nlike after each of the operations: [1 2]: Dirty stack: 6, 4, 1, 5.\nIntermediary stack: 2, 3. The dryer is empty. [1 1]: Dirty stack: 4, 1, 5.\nIntermediary stack: 6, 2, 3. The dryer is empty. [2 1]: Dirty stack: 4, 1, 5.\nIntermediary stack: 2, 3. Dryer stack: 6. [1 2]: Dirty stack: 5. Intermediary\nstack: 4, 1, 2, 3. Dryer stack: 6. [1 1]: There are no dirty plates.\nIntermediary stack: 5, 4, 1, 2, 3. Dryer stack: 6. [2 1]: There are no dirty\nplates. Intermediary stack: 4, 1, 2, 3. Dryer stack: 5, 6. [2 1]: There are no\ndirty plates. Intermediary stack: 1, 2, 3. Dryer stack: 4, 5, 6. [2 3]: All\nthe plates are in the dryer: 1, 2, 3, 4, 5, 6. In the second example it is\npossible to wash all the plates in one operation, and then move them all to\nthe dryer.This is not possible in the third example, because it is not\npermitted to move more than one plate at the same time. It is possible to wash\nplates one by one so that they are placed onto the intermediary stack in the\nreverse order, and then move plates one by one to the dryer. The final order\nis correct.\n\n",
        "cf_contest_id": 737,
        "cf_index": "F",
        "cf_rating": 3300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 2 3\r\n2 3 6 4 1 5\r\n",
                "YES\r\n8\r\n1 2\r\n1 1\r\n2 1\r\n1 2\r\n1 1\r\n2 1\r\n2 1\r\n2 3\r\n"
            ],
            [
                "7 7 7\r\n1 2 3 4 5 6 7\r\n",
                "YES\r\n14\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n2 1\r\n2 1\r\n2 1\r\n2 1\r\n2 1\r\n2 1\r\n2 1\r\n"
            ],
            [
                "7 1 1\r\n1 2 3 4 5 6 7\r\n",
                "YES\r\n14\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n2 1\r\n2 1\r\n2 1\r\n2 1\r\n2 1\r\n2 1\r\n2 1\r\n"
            ],
            [
                "4 2 2\r\n3 2 1 4\r\n",
                "NO"
            ]
        ],
        "private_cases": [
            [
                "7 7 7\r\n1 3 5 4 2 7 6\r\n",
                "YES\r\n11\r\n1 1\r\n1 1\r\n1 3\r\n1 1\r\n2 1\r\n1 1\r\n2 1\r\n2 1\r\n2 1\r\n2 2\r\n2 1\r\n"
            ],
            [
                "4 4 4\r\n3 1 2 4\r\n",
                "YES\r\n5\r\n1 1\r\n1 2\r\n1 1\r\n2 1\r\n2 3\r\n"
            ],
            [
                "5 5 5\r\n3 2 5 1 4\r\n",
                "YES\r\n8\r\n1 1\r\n1 1\r\n1 1\r\n2 1\r\n1 1\r\n1 1\r\n2 1\r\n2 3\r\n"
            ],
            [
                "3 3 1\r\n2 1 3\r\n",
                "YES\r\n5\r\n1 2\r\n1 1\r\n2 1\r\n2 1\r\n2 1\r\n"
            ],
            [
                "3 3 2\r\n2 1 3\r\n",
                "YES\r\n5\r\n1 1\r\n1 1\r\n1 1\r\n2 1\r\n2 2\r\n"
            ],
            [
                "7 2 4\r\n7 1 4 2 6 5 3\r\n",
                "YES\r\n13\r\n1 1\r\n2 1\r\n1 1\r\n1 2\r\n1 1\r\n2 1\r\n1 1\r\n2 1\r\n2 1\r\n1 1\r\n2 1\r\n2 1\r\n2 1\r\n"
            ],
            [
                "1 1 1\r\n1\r\n",
                "YES\r\n2\r\n1 1\r\n2 1\r\n"
            ],
            [
                "14 6 3\r\n14 13 12 11 10 8 9 5 6 7 4 3 2 1\r\n",
                "YES\r\n28\r\n1 1\r\n2 1\r\n1 1\r\n2 1\r\n1 1\r\n2 1\r\n1 1\r\n2 1\r\n1 1\r\n2 1\r\n1 1\r\n1 1\r\n2 1\r\n2 1\r\n1 1\r\n1 1\r\n1 1\r\n2 1\r\n2 1\r\n2 1\r\n1 1\r\n2 1\r\n1 1\r\n2 1\r\n1 1\r\n2 1\r\n1 1\r\n2 1\r\n"
            ],
            [
                "82 51 81\r\n20 48 21 54 12 3 59 64 17 49 36 44 30 4 15 11 58 73 25 61 26 5 13 33 53 79 32 34 52 77 28 18 62 27 10 78 71 41 29 16 47 31 8 57 46 81 7 80 50 1 70 42 76 68 69 6 72 19 24 55 40 43 65 66 63 45 39 67 74 82 51 60 23 56 22 37 38 2 75 14 9 35\r\n",
                "NO"
            ],
            [
                "7 4 3\r\n6 2 3 4 5 7 1\r\n",
                "YES\r\n8\r\n1 4\r\n1 1\r\n1 1\r\n2 1\r\n2 2\r\n2 3\r\n1 1\r\n2 1\r\n"
            ],
            [
                "6 2 2\r\n4 5 3 6 2 1\r\n",
                "YES\r\n10\r\n1 1\r\n1 2\r\n1 1\r\n2 1\r\n2 1\r\n2 2\r\n1 1\r\n2 1\r\n1 1\r\n2 1\r\n"
            ],
            [
                "5 5 2\r\n2 3 1 4 5\r\n",
                "YES\r\n7\r\n1 3\r\n1 1\r\n1 1\r\n2 1\r\n2 1\r\n2 2\r\n2 1\r\n"
            ],
            [
                "7 2 6\r\n1 2 4 5 6 3 7\r\n",
                "YES\r\n8\r\n1 2\r\n1 2\r\n1 2\r\n1 1\r\n2 1\r\n2 1\r\n2 3\r\n2 2\r\n"
            ],
            [
                "6 6 3\r\n5 4 3 1 2 6\r\n",
                "YES\r\n7\r\n1 5\r\n1 1\r\n2 1\r\n2 1\r\n2 1\r\n2 1\r\n2 2\r\n"
            ],
            [
                "30 3 19\r\n15 6 30 20 5 14 26 28 17 1 16 2 8 24 9 29 19 7 25 23 12 3 18 27 13 10 11 21 4 22\r\n",
                "NO"
            ],
            [
                "1 1 1\r\n1\r\n",
                "YES\r\n2\r\n1 1\r\n2 1\r\n"
            ],
            [
                "2 1 1\r\n1 2\r\n",
                "YES\r\n4\r\n1 1\r\n1 1\r\n2 1\r\n2 1\r\n"
            ],
            [
                "2 1 1\r\n2 1\r\n",
                "YES\r\n4\r\n1 1\r\n2 1\r\n1 1\r\n2 1\r\n"
            ],
            [
                "6 6 6\r\n2 3 4 5 6 1\r\n",
                "YES\r\n12\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n2 1\r\n2 1\r\n2 1\r\n2 1\r\n2 1\r\n1 1\r\n2 1\r\n"
            ],
            [
                "17 12 1\r\n17 16 15 14 2 1 3 13 12 11 10 9 8 7 6 5 4\r\n",
                "YES\r\n33\r\n1 1\r\n2 1\r\n1 1\r\n2 1\r\n1 1\r\n2 1\r\n1 1\r\n2 1\r\n1 2\r\n1 1\r\n1 1\r\n2 1\r\n1 1\r\n2 1\r\n1 1\r\n2 1\r\n1 1\r\n2 1\r\n1 1\r\n2 1\r\n1 1\r\n2 1\r\n1 1\r\n2 1\r\n1 1\r\n2 1\r\n1 1\r\n2 1\r\n1 1\r\n2 1\r\n2 1\r\n2 1\r\n2 1\r\n"
            ],
            [
                "65 16 11\r\n4 3 2 8 1 24 13 14 15 16 9 10 11 12 5 6 7 22 23 19 20 21 33 34 35 36 37 38 39 40 25 26 27 28 29 30 17 18 45 46 47 48 49 31 32 53 54 55 56 57 58 41 42 43 44 65 64 59 60 61 62 63 50 51 52\r\n",
                "YES\r\n39\r\n1 1\r\n1 1\r\n1 1\r\n1 2\r\n1 12\r\n1 2\r\n1 3\r\n1 16\r\n1 7\r\n1 10\r\n1 1\r\n2 1\r\n1 1\r\n2 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n2 1\r\n2 1\r\n2 1\r\n2 1\r\n2 1\r\n2 6\r\n1 1\r\n1 1\r\n1 1\r\n2 1\r\n2 1\r\n2 1\r\n2 9\r\n2 10\r\n2 6\r\n2 8\r\n2 4\r\n2 4\r\n2 4\r\n2 4\r\n"
            ],
            [
                "50 20 50\r\n49 48 47 35 36 37 38 39 40 41 42 43 44 45 46 28 29 30 31 32 33 34 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 50 1 2 3 4 5 6 7 8 9\r\n",
                "YES\r\n27\r\n1 1\r\n1 1\r\n1 1\r\n1 12\r\n1 7\r\n1 18\r\n1 1\r\n2 1\r\n2 40\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n2 1\r\n2 1\r\n2 1\r\n2 1\r\n2 1\r\n2 1\r\n2 1\r\n2 1\r\n2 1\r\n"
            ],
            [
                "100 100 100\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 68 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 83 98 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 14 69 70 71 72 73 74 75 76 77 78 79 80 81 82 44 84 85 86 87 88 89 90 91 92 93 94 95 96 97 45 99 100\r\n",
                "NO"
            ]
        ]
    }
]