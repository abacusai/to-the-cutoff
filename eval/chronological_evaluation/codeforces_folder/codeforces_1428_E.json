[
    {
        "name": "Carrots for Rabbits",
        "description": "There are some rabbits in Singapore Zoo. To feed them, Zookeeper bought\n\n    n\n carrots with lengths \n    a_1, a_2, a_3, \n    \u2026, a_n\n. However,\nrabbits are very fertile and multiply very quickly. Zookeeper now has \n    k\n\nrabbits and does not have enough carrots to feed all of them. To solve this\nproblem, Zookeeper decided to cut the carrots into \n    k\n pieces. For some\nreason, all resulting carrot lengths must be positive integers. Big carrots\nare very difficult for rabbits to handle and eat, so the time needed to eat a\ncarrot of size \n    x\n is \n    x^2\n. Help Zookeeper split his carrots while\nminimizing the sum of time taken for rabbits to eat the carrots. Input The\nfirst line contains two integers \n    n\n and \n    k\n \n    (1 \n    \u2264 n \n    \u2264 k\n    \n    \u2264 10^5)\n: the initial number of carrots and the number of rabbits. The\nnext line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n \n    (1 \n    \u2264\n    a_i \n    \u2264 10^6)\n: lengths of carrots. It is guaranteed that the sum of\n\n    a_i\n is at least \n    k\n. Output Output one integer: the minimum sum of\ntime taken for rabbits to eat carrots. Examples Input 3 6 5 3 1 Output 15\nInput 1 4 19 Output 91 Note For the first test, the optimal sizes of carrots\nare \n    1,1,1,2,2,2\n. The time taken is\n\n    1^2+1^2+1^2+2^2+2^2+2^2=15\n For the second test, the optimal sizes of\ncarrots are \n    4,5,5,5\n. The time taken is\n\n    4^2+5^2+5^2+5^2=91\n.\n\n",
        "cf_contest_id": 1428,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "greedy",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 6\r\n5 3 1\r\n",
                "15\r\n"
            ],
            [
                "1 4\r\n19\r\n",
                "91\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 3\r\n1000000\r\n",
                "333333333334\r\n"
            ],
            [
                "1 1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "10 23\r\n343 984 238 758983 231 74 231 548 893 543\r\n",
                "41149446942\r\n"
            ],
            [
                "20 40\r\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\r\n",
                "40\r\n"
            ],
            [
                "29 99047\r\n206580 305496 61753 908376 272137 803885 675070 665109 995787 667887 164508 634877 994427 270698 931765 721679 518973 65009 804367 608526 535640 117656 342804 398273 369209 298745 365459 942772 89584\r\n",
                "2192719703\r\n"
            ],
            [
                "54 42164\r\n810471 434523 262846 930807 148016 633714 247313 376546 142288 30094 599543 829013 182512 647950 512266 827248 452285 531124 257259 453752 114536 833190 737596 267349 598567 781294 390500 318098 354290 725051 978831 905185 849542 761886 55532 608148 631077 557070 355245 929381 280340 620004 285066 42159 82460 348896 446782 672690 364747 339938 715721 870099 357424 323761\r\n",
                "17049737221\r\n"
            ],
            [
                "12 21223\r\n992192 397069 263753 561788 903539 521894 818097 223467 511651 737418 975119 528954\r\n",
                "2604648091\r\n"
            ],
            [
                "1 100000\r\n100000\r\n",
                "100000\r\n"
            ]
        ]
    }
]