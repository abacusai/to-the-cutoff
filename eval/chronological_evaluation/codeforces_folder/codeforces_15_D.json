[
    {
        "name": "Map",
        "description": "There is an area map that is a rectangular matrix n \u00d7 m, each cell of the\nmatrix contains the average height of a corresponding area part. Peter works\nfor a company that has to build several cities within this area, each of the\ncities will occupy a rectangle a \u00d7 b cells on the map. To start construction\nworks in a particular place Peter needs to remove excess ground from the\nconstruction site where a new city will be built. To do so he chooses a cell\nof the minimum height within this site, and removes excess ground from other\ncells of the site down to this minimum level. Let's consider that to lower the\nground level from h2 to h1 (h1 \u2264 h2) they need to remove h2 - h1 ground units.\nLet's call a site's position optimal, if the amount of the ground removed from\nthis site is minimal compared to other possible positions. Peter constructs\ncities according to the following algorithm: from all the optimum site's\npositions he chooses the uppermost one. If this position is not unique, he\nchooses the leftmost one. Then he builds a city on this site. Peter repeats\nthis process untill he can build at least one more city. For sure, he cannot\ncarry out construction works on the occupied cells. Would you, please, help\nPeter place cities according to the algorithm? Input The first line contains\nfour space-separated integers: map sizes n, m and city sizes a, b (1 \u2264 a \u2264 n \u2264\n1000, 1 \u2264 b \u2264 m \u2264 1000). Then there follow n lines, each contains m non-\nnegative space-separated numbers, describing the height matrix. Each number\ndoesn't exceed 10^9. Output In the first line output k \u2014 the amount of\nconstructed cities. In each of the following k lines output 3 space-separated\nnumbers \u2014 the row number and the column number of the upper-left corner of a\nsubsequent construction site, and the amount of the ground to remove from it.\nOutput the sites in the order of their building up. Examples Input 2 2 1 2 1 2\n3 5 Output 2 1 1 1 2 1 2 Input 4 4 2 2 1 5 3 4 2 7 6 1 1 1 2 2 2 2 1 2 Output\n3 3 1 2 3 3 3 1 2 9\n\n",
        "cf_contest_id": 15,
        "cf_index": "D",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 128.0,
        "public_cases": [
            [
                "2 2 1 2\r\n1 2\r\n3 5\r\n",
                "2\r\n1 1 1\r\n2 1 2\r\n"
            ],
            [
                "4 4 2 2\r\n1 5 3 4\r\n2 7 6 1\r\n1 1 2 2\r\n2 2 1 2\r\n",
                "3\r\n3 1 2\r\n3 3 3\r\n1 2 9\r\n"
            ]
        ],
        "private_cases": [
            [
                "4 4 2 2\r\n9 6 0 6\r\n2 5 5 1\r\n4 3 10 5\r\n4 10 8 4\r\n",
                "3\r\n2 1 6\r\n3 3 11\r\n1 3 12\r\n"
            ],
            [
                "4 4 2 2\r\n62 49 97 1\r\n9 4 30 95\r\n43 14 8 51\r\n64 4 82 84\r\n",
                "1\r\n2 2 40\r\n"
            ],
            [
                "10 10 3 3\r\n20 30 97 51 18 21 53 48 46 35\r\n80 80 65 78 47 69 5 35 11 75\r\n67 53 95 67 9 76 68 31 100 81\r\n23 48 3 82 52 0 47 98 50 65\r\n30 74 50 30 40 22 100 46 82 56\r\n17 53 67 67 37 16 73 58 82 95\r\n94 80 50 46 83 83 50 86 81 5\r\n22 79 25 82 80 29 76 18 83 73\r\n80 72 97 50 15 61 15 88 65 90\r\n87 78 51 28 97 70 72 16 66 23\r\n",
                "7\r\n5 3 200\r\n4 8 218\r\n8 6 310\r\n1 5 321\r\n8 2 337\r\n1 2 346\r\n1 8 363\r\n"
            ],
            [
                "1 1 1 1\r\n376319595\r\n",
                "1\r\n1 1 0\r\n"
            ]
        ]
    }
]