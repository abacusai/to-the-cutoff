[
    {
        "name": "Pasha and Tea",
        "description": "Pasha decided to invite his friends to a tea party. For that occasion, he has\na large teapot with the capacity of w milliliters and 2n tea cups, each cup is\nfor one of Pasha's friends. The i-th cup can hold at most ai milliliters of\nwater. It turned out that among Pasha's friends there are exactly n boys and\nexactly n girls and all of them are going to come to the tea party. To please\neveryone, Pasha decided to pour the water for the tea as follows: Pasha can\nboil the teapot exactly once by pouring there at most w milliliters of water;\nPasha pours the same amount of water to each girl; Pasha pours the same amount\nof water to each boy; if each girl gets x milliliters of water, then each boy\ngets 2x milliliters of water. In the other words, each boy should get two\ntimes more water than each girl does. Pasha is very kind and polite, so he\nwants to maximize the total amount of the water that he pours to his friends.\nYour task is to help him and determine the optimum distribution of cups\nbetween Pasha's friends. Input The first line of the input contains two\nintegers, n and w (1 \u2264 n \u2264 10^5, 1 \u2264 w \u2264 10^9) \u2014 the number of Pasha's friends\nthat are boys (equal to the number of Pasha's friends that are girls) and the\ncapacity of Pasha's teapot in milliliters. The second line of the input\ncontains the sequence of integers ai (1 \u2264 ai \u2264 10^9, 1 \u2264 i \u2264 2n) \u2014 the\ncapacities of Pasha's tea cups in milliliters. Output Print a single real\nnumber \u2014 the maximum total amount of water in milliliters that Pasha can pour\nto his friends without violating the given conditions. Your answer will be\nconsidered correct if its absolute or relative error doesn't exceed 10^-6.\nExamples Input 2 4 1 1 1 1 Output 3 Input 3 18 4 4 4 2 2 2 Output 18 Input 1 5\n2 3 Output 4.5 Note Pasha also has candies that he is going to give to girls\nbut that is another task...\n\n",
        "cf_contest_id": 557,
        "cf_index": "B",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 4\r\n1 1 1 1\r\n",
                "3.0\r\n"
            ],
            [
                "3 18\r\n4 4 4 2 2 2\r\n",
                "18\r\n"
            ],
            [
                "1 5\r\n2 3\r\n",
                "4.5\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1000000000 1000000000\r\n",
                "1\r\n"
            ],
            [
                "4 1000000000\r\n1 1 1 1 1 1 1 1\r\n",
                "6.0\r\n"
            ],
            [
                "4 1000000000\r\n1 1 1 1 2 2 2 2\r\n",
                "12\r\n"
            ],
            [
                "4 1\r\n3 3 3 3 4 4 4 4\r\n",
                "1\r\n"
            ],
            [
                "2 19\r\n3 3 5 5\r\n",
                "15.0\r\n"
            ],
            [
                "3 31\r\n3 3 3 5 5 5\r\n",
                "22.5\r\n"
            ],
            [
                "5 15\r\n2 3 4 1 2 4 5 3 5 10\r\n",
                "15\r\n"
            ],
            [
                "5 14\r\n2 3 4 1 2 4 5 3 5 10\r\n",
                "14\r\n"
            ],
            [
                "5 16\r\n2 3 4 1 2 4 5 3 5 10\r\n",
                "15\r\n"
            ],
            [
                "1 100\r\n1 200\r\n",
                "3\r\n"
            ],
            [
                "1 1\r\n1 1\r\n",
                "1\r\n"
            ],
            [
                "2 1000000000\r\n1 1 1 100\r\n",
                "3.0\r\n"
            ],
            [
                "4 30\r\n3 3 3 3 4 5 6 7\r\n",
                "24.0\r\n"
            ],
            [
                "2 100\r\n1 1 1 10\r\n",
                "3.0\r\n"
            ],
            [
                "3 18\r\n1 1 1 1 1 5\r\n",
                "4.5\r\n"
            ]
        ]
    }
]