[
    {
        "name": "Tree Modification",
        "description": "You are given a tree with \n    n\n vertices. You are allowed to modify the\nstructure of the tree through the following multi-step operation: Choose three\nvertices \n    a\n, \n    b\n, and \n    c\n such that \n    b\n is adjacent to both\n\n    a\n and \n    c\n. For every vertex \n    d\n other than \n    b\n that is\nadjacent to \n    a\n, remove the edge connecting \n    d\n and \n    a\n and add\nthe edge connecting \n    d\n and \n    c\n. Delete the edge connecting \n    a\n\nand \n    b\n and add the edge connecting \n    a\n and \n    c\n. As an example,\nconsider the following tree: The following diagram illustrates the sequence of\nsteps that happen when we apply an operation to vertices \n    2\n, \n    4\n, and\n\n    5\n: It can be proven that after each operation, the resulting graph is\nstill a tree. Find the minimum number of operations that must be performed to\ntransform the tree into a star. A star is a tree with one vertex of degree\n\n    n - 1\n, called its center, and \n    n - 1\n vertices of degree \n    1\n.\nInput The first line contains an integer \n    n\n (\n    3 \n    \u2264 n \n    \u2264 2 \n    \u00b7\n    10^5\n) \u2014 the number of vertices in the tree. The \n    i\n-th of the following\n\n    n - 1\n lines contains two integers \n    u_i\n and \n    v_i\n (\n    1 \n    \u2264\n    u_i, v_i \n    \u2264 n\n, \n    u_i \n    \u2260 v_i\n) denoting that there exists an edge\nconnecting vertices \n    u_i\n and \n    v_i\n. It is guaranteed that the given\nedges form a tree. Output Print a single integer \u2014 the minimum number of\noperations needed to transform the tree into a star. It can be proven that\nunder the given constraints, it is always possible to transform the tree into\na star using at most \n    10^18\n operations. Examples Input 6 4 5 2 6 3 2 1\n2 2 4 Output 1 Input 4 2 4 4 1 3 4 Output 0 Note The first test case\ncorresponds to the tree shown in the statement. As we have seen before, we can\ntransform the tree into a star with center at vertex \n    5\n by applying a\nsingle operation to vertices \n    2\n, \n    4\n, and \n    5\n. In the second test\ncase, the given tree is already a star with the center at vertex \n    4\n, so\nno operations have to be performed.\n\n",
        "cf_contest_id": 1375,
        "cf_index": "G",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "graph matchings",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n4 5\r\n2 6\r\n3 2\r\n1 2\r\n2 4\r\n",
                "1"
            ],
            [
                "4\r\n2 4\r\n4 1\r\n3 4\r\n",
                "0"
            ]
        ],
        "private_cases": [
            [
                "3\r\n2 1\r\n3 2\r\n",
                "0"
            ],
            [
                "5\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n",
                "1"
            ],
            [
                "5\r\n1 2\r\n5 2\r\n2 4\r\n2 3\r\n",
                "0"
            ],
            [
                "5\r\n1 2\r\n3 2\r\n2 4\r\n2 5\r\n",
                "0"
            ],
            [
                "15\r\n2 5\r\n12 6\r\n2 14\r\n3 6\r\n15 6\r\n3 2\r\n2 11\r\n9 2\r\n4 2\r\n8 2\r\n2 13\r\n1 2\r\n10 2\r\n2 7\r\n",
                "1"
            ],
            [
                "15\r\n10 2\r\n2 11\r\n7 2\r\n2 3\r\n1 2\r\n4 2\r\n12 2\r\n6 2\r\n2 14\r\n5 2\r\n15 2\r\n2 8\r\n13 2\r\n9 2\r\n",
                "0"
            ],
            [
                "5\r\n4 3\r\n3 5\r\n1 2\r\n2 3\r\n",
                "1"
            ],
            [
                "5\r\n2 5\r\n4 2\r\n2 3\r\n1 2\r\n",
                "0"
            ],
            [
                "15\r\n12 13\r\n12 2\r\n2 6\r\n4 9\r\n2 15\r\n5 4\r\n4 11\r\n8 4\r\n1 4\r\n1 2\r\n10 6\r\n3 2\r\n7 4\r\n2 14\r\n",
                "3"
            ],
            [
                "15\r\n9 7\r\n7 15\r\n6 5\r\n12 10\r\n1 2\r\n5 11\r\n10 7\r\n3 2\r\n6 7\r\n4 8\r\n3 5\r\n9 13\r\n13 14\r\n3 4\r\n",
                "5"
            ],
            [
                "5\r\n4 1\r\n1 2\r\n5 1\r\n1 3\r\n",
                "0"
            ],
            [
                "5\r\n5 3\r\n3 4\r\n1 3\r\n1 2\r\n",
                "1"
            ],
            [
                "15\r\n1 9\r\n8 3\r\n12 2\r\n13 11\r\n14 3\r\n6 15\r\n6 7\r\n11 7\r\n2 5\r\n4 3\r\n4 6\r\n3 1\r\n1 2\r\n10 2\r\n",
                "4"
            ],
            [
                "15\r\n4 6\r\n8 4\r\n12 11\r\n7 6\r\n9 8\r\n5 1\r\n14 13\r\n6 13\r\n1 4\r\n1 2\r\n6 11\r\n10 8\r\n15 14\r\n3 1\r\n",
                "4"
            ],
            [
                "5\r\n2 4\r\n1 3\r\n1 5\r\n1 2\r\n",
                "1"
            ],
            [
                "5\r\n5 1\r\n4 1\r\n1 2\r\n1 3\r\n",
                "0"
            ],
            [
                "15\r\n5 8\r\n5 12\r\n4 10\r\n1 2\r\n6 1\r\n5 14\r\n11 4\r\n4 15\r\n3 1\r\n5 3\r\n4 3\r\n7 5\r\n9 1\r\n13 5\r\n",
                "2"
            ],
            [
                "15\r\n13 14\r\n1 12\r\n3 1\r\n5 1\r\n1 8\r\n1 7\r\n4 1\r\n1 9\r\n1 11\r\n1 2\r\n13 15\r\n5 13\r\n1 10\r\n6 1\r\n",
                "1"
            ],
            [
                "5\r\n1 4\r\n1 3\r\n1 2\r\n1 5\r\n",
                "0"
            ],
            [
                "5\r\n1 4\r\n3 1\r\n1 2\r\n5 1\r\n",
                "0"
            ],
            [
                "15\r\n1 3\r\n14 1\r\n1 7\r\n1 2\r\n4 1\r\n8 1\r\n9 1\r\n12 1\r\n1 6\r\n5 1\r\n11 1\r\n1 10\r\n1 13\r\n15 1\r\n",
                "0"
            ],
            [
                "15\r\n15 1\r\n1 10\r\n1 11\r\n7 1\r\n6 1\r\n1 2\r\n14 1\r\n1 13\r\n1 5\r\n8 1\r\n1 4\r\n1 9\r\n12 1\r\n1 3\r\n",
                "0"
            ]
        ]
    }
]