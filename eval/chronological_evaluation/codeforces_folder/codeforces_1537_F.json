[
    {
        "name": "Figure Fixing",
        "description": "You have a connected undirected graph made of \n    n\n nodes and \n    m\n edges.\nThe \n    i\n-th node has a value \n    v_i\n and a target value \n    t_i\n. In an\noperation, you can choose an edge \n    (i, j)\n and add \n    k\n to both\n\n    v_i\n and \n    v_j\n, where \n    k\n can be any integer. In particular,\n\n    k\n can be negative. Your task to determine if it is possible that by\ndoing some finite number of operations (possibly zero), you can achieve for\nevery node \n    i\n, \n    v_i = t_i\n. Input The first line contains a single\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n), the number of test cases. Then\nthe test cases follow. The first line of each test case contains two integers\n\n    n\n, \n    m\n (\n    2 \n    \u2264 n \n    \u2264 2\n    \u00b7 10^5\n, \n    n-1\n    \u2264 m\n    \u2264\n    min(2\n    \u00b7 10^5, \n    n(n-1)/2)\n) \u2014 the number of nodes and edges\nrespectively. The second line contains \n    n\n integers \n    v_1\n    \u2026, v_n\n\n(\n    -10^9 \n    \u2264 v_i \n    \u2264 10^9\n) \u2014 initial values of nodes. The third line\ncontains \n    n\n integers \n    t_1\n    \u2026, t_n\n (\n    -10^9 \n    \u2264 t_i \n    \u2264\n    10^9\n) \u2014 target values of nodes. Each of the next \n    m\n lines contains two\nintegers \n    i\n and \n    j\n representing an edge between node \n    i\n and\nnode \n    j\n (\n    1 \n    \u2264 i, j \n    \u2264 n\n, \n    i\n     j\n). It is guaranteed\nthat the graph is connected and there is at most one edge between the same\npair of nodes. It is guaranteed that the sum of \n    n\n over all testcases\ndoes not exceed \n    2 \n    \u00b7 10^5\n and the sum of \n    m\n over all testcases\ndoes not exceed \n    2 \n    \u00b7 10^5\n. Output For each test case, if it is\npossible for every node to reach its target after some number of operations,\nprint \"YES\". Otherwise, print \"NO\". Example Input 2 4 4 5 1 2 -3 3 3 10 1 1 2\n1 4 3 2 3 4 4 4 5 8 6 6 -3 1 15 4 1 2 1 4 3 2 3 4 Output YES NO Note Here is a\nvisualization of the first test case (the orange values denote the initial\nvalues and the blue ones the desired values): One possible order of operations\nto obtain the desired values for each node is the following: Operation\n\n    1\n: Add \n    2\n to nodes \n    2\n and \n    3\n. Operation \n    2\n: Add\n\n    -2\n to nodes \n    1\n and \n    4\n. Operation \n    3\n: Add \n    6\n to nodes\n\n    3\n and \n    4\n. Now we can see that in total we added \n    -2\n to node\n\n    1\n, \n    2\n to node \n    2\n, \n    8\n to node \n    3\n and \n    4\n to node\n\n    4\n which brings each node exactly to it's desired value. For the graph\nfrom the second test case it's impossible to get the target values.\n\n",
        "cf_contest_id": 1537,
        "cf_index": "F",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n4 4\r\n5 1 2 -3\r\n3 3 10 1\r\n1 2\r\n1 4\r\n3 2\r\n3 4\r\n4 4\r\n5 8 6 6\r\n-3 1 15 4\r\n1 2\r\n1 4\r\n3 2\r\n3 4\r\n",
                "YES\r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n2 1\r\n0 0\r\n2 2\r\n1 2\r\n2 1\r\n0 1\r\n2 2\r\n1 2\r\n",
                "YES\r\nNO\r\n"
            ],
            [
                "2\r\n5 6\r\n124 -884 758 -96 460\r\n-872 -807 -895 -866 -45\r\n2 3\r\n4 5\r\n1 4\r\n3 1\r\n2 4\r\n1 5\r\n5 10\r\n521 696 891 558 787\r\n-902 275 -957 818 531\r\n2 3\r\n5 4\r\n1 4\r\n1 3\r\n2 4\r\n1 2\r\n5 3\r\n2 5\r\n1 5\r\n4 3\r\n",
                "NO\r\nYES\r\n"
            ],
            [
                "1\r\n16 15\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n0 0 0 0 0 0 0 0 536870912 536870912 536870912 536870912 536870912 536870912 536870912 536870912\r\n1 9\r\n9 2\r\n2 10\r\n10 3\r\n3 11\r\n11 4\r\n4 12\r\n12 5\r\n5 13\r\n13 6\r\n6 14\r\n14 7\r\n7 15\r\n15 8\r\n8 16\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n2 1\r\n0 0\r\n1 -1\r\n1 2\r\n",
                "NO\r\n"
            ]
        ]
    }
]