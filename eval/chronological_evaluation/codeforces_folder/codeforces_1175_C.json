[
    {
        "name": "Electrification",
        "description": "At first, there was a legend related to the name of the problem, but now it's\njust a formal statement. You are given \n    n\n points \n    a_1, a_2, \n    \u2026,\n    a_n\n on the \n    OX\n axis. Now you are asked to find such an integer point\n\n    x\n on \n    OX\n axis that \n    f_k(x)\n is minimal possible. The function\n\n    f_k(x)\n can be described in the following way: form a list of distances\n\n    d_1, d_2, \n    \u2026, d_n\n where \n    d_i = |a_i - x|\n (distance between\n\n    a_i\n and \n    x\n); sort list \n    d\n in non-descending order; take\n\n    d_k + 1\n as a result. If there are multiple optimal answers you can\nprint any of them. Input The first line contains single integer \n    T\n (\n    1\n    \n    \u2264 T \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 number of queries. Next \n    2 \n    \u00b7 T\n\nlines contain descriptions of queries. All queries are independent. The first\nline of each query contains two integers \n    n\n, \n    k\n (\n    1 \n    \u2264 n \n    \u2264\n    2 \n    \u00b7 10^5\n, \n    0 \n    \u2264 k < n\n) \u2014 the number of points and constant\n\n    k\n. The second line contains \n    n\n integers \n    a_1, a_2, \n    \u2026,\n    a_n\n (\n    1 \n    \u2264 a_1 < a_2 < \n    \u2026 < a_n \n    \u2264 10^9\n) \u2014 points in\nascending order. It's guaranteed that \n    \u2211n\n doesn't exceed \n    2\n    \n    \u00b7 10^5\n. Output Print \n    T\n integers \u2014 corresponding points \n    x\n\nwhich have minimal possible value of \n    f_k(x)\n. If there are multiple\nanswers you can print any of them. Example Input 3 3 2 1 2 5 2 1 1 1000000000\n1 0 4 Output 3 500000000 4\n\n",
        "cf_contest_id": 1175,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3 2\r\n1 2 5\r\n2 1\r\n1 1000000000\r\n1 0\r\n4\r\n",
                "3 500000000 4\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2 1\r\n5 65\r\n",
                "35\r\n"
            ],
            [
                "1\r\n2 1\r\n5 55\r\n",
                "30\r\n"
            ],
            [
                "1\r\n4 2\r\n5 45 55 65\r\n",
                "55\r\n"
            ]
        ]
    }
]