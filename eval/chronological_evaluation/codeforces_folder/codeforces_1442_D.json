[
    {
        "name": "Sum",
        "description": "You are given \n    n\n non-decreasing arrays of non-negative numbers. Vasya\nrepeats the following operation \n    k\n times: Selects a non-empty array. Puts\nthe first element of the selected array in his pocket. Removes the first\nelement from the selected array. Vasya wants to maximize the sum of the\nelements in his pocket. Input The first line contains two integers \n    n\n and\n\n    k\n (\n    1 \n    \u2264 n, k \n    \u2264 3\n     000\n): the number of arrays and\noperations. Each of the next \n    n\n lines contain an array. The first integer\nin each line is \n    t_i\n (\n    1 \n    \u2264 t_i \n    \u2264 10^6\n): the size of the\n\n    i\n-th array. The following \n    t_i\n integers \n    a_i, j\n (\n    0 \n    \u2264\n    a_i, 1\n    \u2264\n    \u2026\n    \u2264 a_i, t_i\n    \u2264 10^8\n) are the elements of\nthe \n    i\n-th array. It is guaranteed that \n    k \n    \u2264\n    \u2211\n    _i=1^n\n    t_i \n    \u2264 10^6\n. Output Print one integer: the maximum possible sum of all\nelements in Vasya's pocket after \n    k\n operations. Example Input 3 3 2 5 10\n3 1 2 3 2 1 20 Output 26\n\n",
        "cf_contest_id": 1442,
        "cf_index": "D",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "divide and conquer",
            "dp",
            "greedy"
        ],
        "time_limit_seconds": 1.5,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3 3\r\n2 5 10\r\n3 1 2 3\r\n2 1 20\r\n",
                "26"
            ]
        ],
        "private_cases": [
            [
                "3 5\r\n3 1 1000 100000000\r\n2 1 100000000\r\n3 99999999 100000000 100000000\r\n",
                "400000000"
            ],
            [
                "1 1\r\n1 87246905\r\n",
                "87246905"
            ],
            [
                "10 20\r\n2 12 77\r\n14 16 27 28 35 37 38 45 51 63 69 72 92 93 100\r\n6 5 42 51 58 74 76\r\n9 20 22 28 48 61 70 73 88 91\r\n18 1 4 7 9 13 15 18 18 23 32 46 60 73 78 89 99 99 100\r\n6 2 14 31 50 71 96\r\n16 5 7 9 9 21 25 26 32 52 54 57 65 67 86 91 92\r\n11 17 17 30 33 37 39 41 57 70 91 99\r\n12 4 5 20 23 26 30 38 39 51 56 58 89\r\n6 29 34 45 70 75 96\r\n",
                "1115"
            ],
            [
                "2 11\r\n10 1 1 1 1 1 1 1 1 1 100000\r\n20 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\r\n",
                "100109"
            ]
        ]
    }
]