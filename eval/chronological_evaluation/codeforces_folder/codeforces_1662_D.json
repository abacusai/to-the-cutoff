[
    {
        "name": "Evolution of Weasels",
        "description": "A wild basilisk just appeared at your doorstep. You are not entirely sure what\na basilisk is and you wonder whether it evolved from your favorite animal, the\nweasel. How can you find out whether basilisks evolved from weasels?\nCertainly, a good first step is to sequence both of their DNAs. Then you can\ntry to check whether there is a sequence of possible mutations from the DNA of\nthe weasel to the DNA of the basilisk. Your friend Ron is a talented alchemist\nand has studied DNA sequences in many of his experiments. He has found out\nthat DNA strings consist of the letters A, B and C and that single mutations\ncan only remove or add substrings at any position in the string (a substring\nis a contiguous sequence of characters). The substrings that can be removed or\nadded by a mutation are AA, BB, CC, ABAB or BCBC. During a sequence of\nmutations a DNA string may even become empty. Ron has agreed to sequence the\nDNA of the weasel and the basilisk for you, but finding out whether there is a\nsequence of possible mutations that leads from one to the other is too\ndifficult for him, so you have to do it on your own. Input Each test contains\nmultiple test cases. The first line contains an integer \n    t\n (\n    1\n    \u2264\n    t\n    \u2264 100\n) \u2014 the number of test cases. The descriptions of the \n    t\n\ntest cases follow. The first line of each test case contains a string \n    u\n\n(\n    1\n    \u2264 |u|\n    \u2264 200\n) \u2014 the DNA of the weasel. The second line of each\ntest case contains a string \n    v\n (\n    1\n    \u2264 |v|\n    \u2264 200\n) \u2014 the DNA of\nthe basilisk. The values \n    |u|\n, \n    |v|\n denote the lengths of the\nstrings \n    u\n and \n    v\n. It is guaranteed that both strings \n    u\n and\n\n    v\n consist of the letters A, B and C. Output For each test case, print\nYES if there is a sequence of mutations to get from \n    u\n to \n    v\n and NO\notherwise. Example Input 8 A B B C C A AA BB BB CC CC AA ABAB BCBC ABC CBA\nOutput NO NO NO YES YES YES YES NO\n\n",
        "cf_contest_id": 1662,
        "cf_index": "D",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8\r\nA\r\nB\r\nB\r\nC\r\nC\r\nA\r\nAA\r\nBB\r\nBB\r\nCC\r\nCC\r\nAA\r\nABAB\r\nBCBC\r\nABC\r\nCBA\r\n",
                "NO\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "63\r\nCB\r\nB\r\nCC\r\nB\r\nB\r\nAA\r\nA\r\nBC\r\nA\r\nAB\r\nC\r\nAB\r\nBC\r\nA\r\nB\r\nCA\r\nBA\r\nC\r\nAA\r\nA\r\nC\r\nA\r\nA\r\nCB\r\nAC\r\nC\r\nAA\r\nB\r\nCC\r\nA\r\nB\r\nBB\r\nB\r\nBA\r\nA\r\nCA\r\nA\r\nA\r\nB\r\nCB\r\nC\r\nBB\r\nC\r\nB\r\nB\r\nAC\r\nA\r\nBB\r\nB\r\nBC\r\nBA\r\nB\r\nC\r\nAC\r\nB\r\nCC\r\nBB\r\nA\r\nAC\r\nA\r\nBB\r\nB\r\nAB\r\nB\r\nC\r\nCC\r\nCA\r\nB\r\nAB\r\nC\r\nC\r\nBC\r\nA\r\nAC\r\nB\r\nAB\r\nCC\r\nC\r\nA\r\nAA\r\nBA\r\nA\r\nCA\r\nC\r\nBB\r\nC\r\nC\r\nBA\r\nC\r\nAA\r\nC\r\nCA\r\nCA\r\nA\r\nAC\r\nB\r\nBC\r\nB\r\nBC\r\nC\r\nAA\r\nC\r\nC\r\nCB\r\nA\r\nBA\r\nC\r\nC\r\nCB\r\nC\r\nA\r\nB\r\nCB\r\nA\r\nB\r\nB\r\nA\r\nCC\r\nB\r\nC\r\nB\r\nA\r\nA\r\nC\r\nAB\r\nA\r\n",
                "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\n"
            ]
        ]
    }
]