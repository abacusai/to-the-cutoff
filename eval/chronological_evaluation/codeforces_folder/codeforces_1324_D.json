[
    {
        "name": "Pair of Topics",
        "description": "The next lecture in a high school requires two topics to be discussed. The\n\n    i\n-th topic is interesting by \n    a_i\n units for the teacher and by\n\n    b_i\n units for the students. The pair of topics \n    i\n and \n    j\n (\n    i\n    < j\n) is called good if \n    a_i + a_j > b_i + b_j\n (i.e. it is more\ninteresting for the teacher). Your task is to find the number of good pairs of\ntopics. Input The first line of the input contains one integer \n    n\n (\n    2\n    \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of topics. The second line of\nthe input contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264\n    a_i \n    \u2264 10^9\n), where \n    a_i\n is the interestingness of the \n    i\n-th\ntopic for the teacher. The third line of the input contains \n    n\n integers\n\n    b_1, b_2, \n    \u2026, b_n\n (\n    1 \n    \u2264 b_i \n    \u2264 10^9\n), where \n    b_i\n\nis the interestingness of the \n    i\n-th topic for the students. Output Print\none integer \u2014 the number of good pairs of topic. Examples Input 5 4 8 2 6 2 4\n5 4 1 3 Output 7 Input 4 1 3 2 4 1 3 2 4 Output 0\n\n",
        "cf_contest_id": 1324,
        "cf_index": "D",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "sortings",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n4 8 2 6 2\r\n4 5 4 1 3\r\n",
                "7\r\n"
            ],
            [
                "4\r\n1 3 2 4\r\n1 3 2 4\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "14\r\n137698508 528184026 54130884 239033739 897037197 720680829 605286542 89272810 284191042 179359950 186766648 570400677 107541072 25121211\r\n195343970 709242622 422954170 980941827 265963618 812646456 943660193 344102432 295006337 221455256 203711937 632473368 334173424 49206958\r\n",
                "12\r\n"
            ],
            [
                "3\r\n2 3 4\r\n1 2 3\r\n",
                "3\r\n"
            ],
            [
                "4\r\n289148443 478308391 848805621 903326233\r\n164110294 114400164 187849556 86077714\r\n",
                "6\r\n"
            ],
            [
                "7\r\n207890396 779834136 486233939 78683313 737666916 867859889 430916890\r\n641454151 744134965 708127703 230418753 31166164 407669156 956274630\r\n",
                "10\r\n"
            ],
            [
                "4\r\n996771900 292039463 447504490 630588334\r\n587884812 833694319 311217285 276122478\r\n",
                "3\r\n"
            ],
            [
                "12\r\n249283281 175250433 63186350 285834914 654715088 228229284 837643502 702613977 97402699 68740950 237654675 165801262\r\n825825607 737591994 803928333 982099298 883959704 933163872 593411256 920273863 886486498 789657309 493359127 259650439\r\n",
                "3\r\n"
            ],
            [
                "2\r\n335756331 677790822\r\n388993348 109229235\r\n",
                "1\r\n"
            ],
            [
                "2\r\n304182490 808127149\r\n559315964 631038346\r\n",
                "0\r\n"
            ]
        ]
    }
]