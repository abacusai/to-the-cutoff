[
    {
        "name": "Defender of Childhood Dreams",
        "description": "Even if you just leave them be, they will fall to pieces all by themselves.\nSo, someone has to protect them, right? You find yourself playing with Teucer\nagain in the city of Liyue. As you take the eccentric little kid around, you\nnotice something interesting about the structure of the city. Liyue can be\nrepresented as a directed graph containing \n    n\n nodes. Nodes are labeled\nfrom \n    1\n to \n    n\n. There is a directed edge from node \n    a\n to node\n\n    b\n if and only if \n    a < b\n. A path between nodes \n    a\n and \n    b\n\nis defined as a sequence of edges such that you can start at \n    a\n, travel\nalong all of these edges in the corresponding direction, and end at \n    b\n.\nThe length of a path is defined by the number of edges. A rainbow path of\nlength \n    x\n is defined as a path in the graph such that there exists at\nleast 2 distinct colors among the set of \n    x\n edges. Teucer's favorite\nnumber is \n    k\n. You are curious about the following scenario: If you were\nto label each edge with a color, what is the minimum number of colors needed\nto ensure that all paths of length \n    k\n or longer are rainbow paths? Teucer\nwants to surprise his older brother with a map of Liyue. He also wants to know\na valid coloring of edges that uses the minimum number of colors. Please help\nhim with this task! Input The only line of input contains two integers \n    n\n\nand \n    k\n (\n    2 \n    \u2264 k < n \n    \u2264 1000\n). Output On the first line,\noutput \n    c\n, the minimum colors you need to satisfy the above requirements.\nOn the second line, print a valid edge coloring as an array of\n\n    n(n-1)/2\n integers ranging from \n    1\n to \n    c\n. Exactly\n\n    c\n distinct colors should exist in the construction. Print the edges in\nincreasing order by the start node first, then by the second node. For\nexample, if \n    n=4\n, the edge colors will correspond to this order of edges:\n(\n    1\n, \n    2\n), (\n    1\n, \n    3\n), (\n    1\n, \n    4\n), (\n    2\n,\n\n    3\n), (\n    2\n, \n    4\n), (\n    3\n, \n    4\n) Examples Input 5 3 Output 2 1\n2 2 2 2 2 2 1 1 1 Input 5 2 Output 3 3 2 2 1 2 2 1 3 1 1 Input 8 7 Output 2 2\n2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 Input 3 2 Output 2 1 2 2\nNote The corresponding construction for the first test case looks like this:\nIt is impossible to satisfy the constraints with less than \n    2\n colors.The\ncorresponding construction for the second test case looks like this: One can\nshow there exists no construction using less than \n    3\n colors.\n\n",
        "cf_contest_id": 1583,
        "cf_index": "F",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "constructive algorithms",
            "divide and conquer"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5 3\r\n",
                "2\r\n1 1 2 2 1 2 2 2 2 1 "
            ],
            [
                "5 2\r\n",
                "3\r\n1 2 2 3 2 2 3 1 3 3 "
            ],
            [
                "8 7\r\n",
                "2\r\n1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 2 1 1 2 1 2 2 "
            ],
            [
                "3 2\r\n",
                "2\r\n1 2 2 "
            ]
        ],
        "private_cases": [
            [
                "8 2\r\n",
                "3\r\n1 2 2 3 3 3 3 2 2 3 3 3 3 1 3 3 3 3 3 3 3 3 1 2 2 2 2 1 "
            ],
            [
                "9 2\r\n",
                "4\r\n1 2 2 3 3 3 3 4 2 2 3 3 3 3 4 1 3 3 3 3 4 3 3 3 3 4 1 2 2 4 2 2 4 1 4 4 "
            ],
            [
                "18 17\r\n",
                "2\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 2 1 1 1 1 2 1 1 1 2 1 1 2 1 2 2 "
            ]
        ]
    }
]