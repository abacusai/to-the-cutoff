[
    {
        "name": "Points on Line",
        "description": "Little Petya likes points a lot. Recently his mom has presented him n points\nlying on the line OX. Now Petya is wondering in how many ways he can choose\nthree distinct points so that the distance between the two farthest of them\ndoesn't exceed d. Note that the order of the points inside the group of three\nchosen points doesn't matter. Input The first line contains two integers: n\nand d (1 \u2264 n \u2264 10^5; 1 \u2264 d \u2264 10^9). The next line contains n integers x1, x2,\n..., xn, their absolute value doesn't exceed 10^9 \u2014 the x-coordinates of the\npoints that Petya has got. It is guaranteed that the coordinates of the points\nin the input strictly increase. Output Print a single integer \u2014 the number of\ngroups of three points, where the distance between two farthest points doesn't\nexceed d. Please do not use the \nintegers in \u0421++. It is preferred to use the cin, cout streams or the \nspecifier. Examples Input 4 3 1 2 3 4 Output 4 Input 4 2 -3 -2 -1 0 Output 2\nInput 5 19 1 10 20 30 50 Output 1 Note In the first sample any group of three\npoints meets our conditions. In the seconds sample only 2 groups of three\npoints meet our conditions: -3, -2, -1 and -2, -1, 0. In the third sample\nonly one group does: 1, 10, 20.\n\n",
        "cf_contest_id": 251,
        "cf_index": "A",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "combinatorics",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 3\r\n1 2 3 4\r\n",
                "4\r\n"
            ],
            [
                "4 2\r\n-3 -2 -1 0\r\n",
                "2\r\n"
            ],
            [
                "5 19\r\n1 10 20 30 50\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 5\r\n31 36 43 47 48 50 56 69 71 86\r\n",
                "2\r\n"
            ],
            [
                "10 50\r\n1 4 20 27 65 79 82 83 99 100\r\n",
                "25\r\n"
            ],
            [
                "10 90\r\n24 27 40 41 61 69 73 87 95 97\r\n",
                "120\r\n"
            ],
            [
                "100 100\r\n-98 -97 -96 -93 -92 -91 -90 -87 -86 -84 -81 -80 -79 -78 -76 -75 -73 -71 -69 -67 -65 -64 -63 -62 -61 -54 -51 -50 -49 -48 -46 -45 -44 -37 -36 -33 -30 -28 -27 -16 -15 -13 -12 -10 -9 -7 -6 -5 -4 2 3 5 8 9 10 11 13 14 15 16 17 19 22 24 25 26 27 28 30 31 32 36 40 43 45 46 47 50 51 52 53 58 60 63 69 70 73 78 80 81 82 85 88 89 90 91 95 96 97 99\r\n",
                "79351\r\n"
            ],
            [
                "1 14751211\r\n847188590\r\n",
                "0\r\n"
            ],
            [
                "2 1000000000\r\n-907894512 -289906312\r\n",
                "0\r\n"
            ],
            [
                "2 1000000000\r\n-14348867 1760823\r\n",
                "0\r\n"
            ],
            [
                "3 1000000000\r\n-5 -1 1\r\n",
                "1\r\n"
            ]
        ]
    }
]