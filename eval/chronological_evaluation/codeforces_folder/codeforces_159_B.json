[
    {
        "name": "Matchmaker",
        "description": "Polycarpus has n markers and m marker caps. Each marker is described by two\nnumbers: xi is the color and yi is the diameter. Correspondingly, each cap is\ndescribed by two numbers: aj is the color and bj is the diameter. Cap (aj, bj)\ncan close marker (xi, yi) only if their diameters match, that is, bj = yi.\nBesides, a marker is considered to be beautifully closed, if the cap color and\nthe marker color match, that is, aj = xi. Find the way to close the maximum\nnumber of markers. If there are several such ways, then choose the one that\nhas the maximum number of beautifully closed markers. Input The first input\nline contains two space-separated integers n and m (1 \u2264 n, m \u2264 10^5) \u2014 the\nnumber of markers and the number of caps, correspondingly. Next n lines\ndescribe the markers. The i-th line contains two space-separated integers xi,\nyi (1 \u2264 xi, yi \u2264 1000) \u2014 the i-th marker's color and diameter,\ncorrespondingly. Next m lines describe the caps. The j-th line contains two\nspace-separated integers aj, bj (1 \u2264 aj, bj \u2264 1000) \u2014 the color and diameter\nof the j-th cap, correspondingly. Output Print two space-separated integers u,\nv, where u is the number of closed markers and v is the number of beautifully\nclosed markers in the sought optimal way. Remember that you have to find the\nway to close the maximum number of markers, and if there are several such\nways, you should choose the one where the number of beautifully closed markers\nis maximum. Examples Input 3 4 1 2 3 4 2 4 5 4 2 4 1 1 1 2 Output 3 2 Input 2\n2 1 2 2 1 3 4 5 1 Output 1 0 Note In the first test sample the first marker\nshould be closed by the fourth cap, the second marker should be closed by the\nfirst cap and the third marker should be closed by the second cap. Thus, three\nmarkers will be closed, and two of them will be beautifully closed \u2014 the first\nand the third markers.\n\n",
        "cf_contest_id": 159,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 4\r\n1 2\r\n3 4\r\n2 4\r\n5 4\r\n2 4\r\n1 1\r\n1 2\r\n",
                "3 2\r\n"
            ],
            [
                "2 2\r\n1 2\r\n2 1\r\n3 4\r\n5 1\r\n",
                "1 0\r\n"
            ]
        ],
        "private_cases": [
            [
                "6 7\r\n2 1\r\n2 2\r\n2 1\r\n1 1\r\n2 1\r\n1 2\r\n2 2\r\n2 2\r\n2 2\r\n1 2\r\n2 2\r\n1 1\r\n1 2\r\n",
                "3 3\r\n"
            ],
            [
                "6 7\r\n2 1\r\n1 1\r\n2 2\r\n1 2\r\n1 1\r\n1 2\r\n2 1\r\n1 1\r\n1 1\r\n1 1\r\n1 2\r\n2 2\r\n1 1\r\n",
                "5 5\r\n"
            ],
            [
                "6 7\r\n2 1\r\n2 2\r\n1 1\r\n1 2\r\n2 2\r\n1 2\r\n1 2\r\n1 1\r\n1 2\r\n2 2\r\n2 2\r\n2 2\r\n1 1\r\n",
                "6 5\r\n"
            ],
            [
                "6 7\r\n1 1\r\n1 1\r\n1 2\r\n1 2\r\n2 2\r\n1 2\r\n2 1\r\n2 1\r\n2 1\r\n2 1\r\n1 1\r\n1 1\r\n1 2\r\n",
                "3 3\r\n"
            ],
            [
                "6 2\r\n1 1\r\n2 1\r\n1 1\r\n1 1\r\n1 2\r\n1 1\r\n2 2\r\n1 2\r\n",
                "1 1\r\n"
            ],
            [
                "3 3\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n",
                "3 3\r\n"
            ],
            [
                "1 1\r\n1 1\r\n1 1\r\n",
                "1 1\r\n"
            ],
            [
                "1 1\r\n1 1\r\n2 2\r\n",
                "0 0\r\n"
            ],
            [
                "1 1\r\n1 1\r\n1 2\r\n",
                "0 0\r\n"
            ],
            [
                "1 1\r\n1 2\r\n2 2\r\n",
                "1 0\r\n"
            ],
            [
                "1 5\r\n1 1\r\n2 2\r\n1 1\r\n2 1\r\n1 2\r\n1 1\r\n",
                "1 1\r\n"
            ]
        ]
    }
]