[
    {
        "name": "Party",
        "description": "Note the unusual memory limit for the problem. People working in MDCS\n(Microsoft Development Center Serbia) like partying. They usually go to night\nclubs on Friday and Saturday. There are N people working in MDCS and there are\nN clubs in the city. Unfortunately, if there is more than one Microsoft\nemployee in night club, level of coolness goes infinitely high and party is\nover, so club owners will never let more than one Microsoft employee enter\ntheir club in the same week (just to be sure). You are organizing night life\nfor Microsoft employees and you have statistics about how much every employee\nlikes Friday and Saturday parties for all clubs. You need to match people with\nclubs maximizing overall sum of their happiness (they are happy as much as\nthey like the club), while half of people should go clubbing on Friday and the\nother half on Saturday. Input The first line contains integer N \u2014 number of\nemployees in MDCS. Then an N \u00d7 N matrix follows, where element in i-th row and\nj-th column is an integer number that represents how much i-th person likes\nj-th club\u2019s Friday party. Then another N \u00d7 N matrix follows, where element in\ni-th row and j-th column is an integer number that represents how much i-th\nperson likes j-th club\u2019s Saturday party. 2 \u2264 N \u2264 20 N is even 0 \u2264 level of\nlikeness \u2264 10^6 All values are integers Output Output should contain a single\ninteger \u2014 maximum sum of happiness possible. Examples Input 4 1 2 3 4 2 3 4 1\n3 4 1 2 4 1 2 3 5 8 7 1 6 9 81 3 55 78 1 6 1 1 1 1 Output 167 Note Here is how\nwe matched people with clubs: Friday: 1st person with 4th club (4 happiness)\nand 4th person with 1st club (4 happiness). Saturday: 2nd person with 3rd club\n(81 happiness) and 3rd person with 2nd club (78 happiness). 4+4+81+78 = 167\n\n",
        "cf_contest_id": 575,
        "cf_index": "C",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "graph matchings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 4.0,
        "public_cases": [
            [
                "4\r\n1 2 3 4\r\n2 3 4 1\r\n3 4 1 2\r\n4 1 2 3\r\n5 8 7 1\r\n6 9 81 3\r\n55 78 1 6\r\n1 1 1 1\r\n",
                "167\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n",
                "0\r\n"
            ],
            [
                "2\r\n41 18467\r\n6334 26500\r\n19169 15724\r\n11478 29358\r\n",
                "45669\r\n"
            ],
            [
                "4\r\n41 18467 6334 26500\r\n19169 15724 11478 29358\r\n26962 24464 5705 28145\r\n23281 16827 9961 491\r\n2995 11942 4827 5436\r\n32391 14604 3902 153\r\n292 12382 17421 18716\r\n19718 19895 5447 21726\r\n",
                "93139\r\n"
            ],
            [
                "6\r\n41 18467 6334 26500 19169 15724\r\n11478 29358 26962 24464 5705 28145\r\n23281 16827 9961 491 2995 11942\r\n4827 5436 32391 14604 3902 153\r\n292 12382 17421 18716 19718 19895\r\n5447 21726 14771 11538 1869 19912\r\n25667 26299 17035 9894 28703 23811\r\n31322 30333 17673 4664 15141 7711\r\n28253 6868 25547 27644 32662 32757\r\n20037 12859 8723 9741 27529 778\r\n12316 3035 22190 1842 288 30106\r\n9040 8942 19264 22648 27446 23805\r\n",
                "174707\r\n"
            ]
        ]
    }
]