[
    {
        "name": "Reset K Edges",
        "description": "You are given a rooted tree, consisting of \n    n\n vertices. The vertices are\nnumbered from \n    1\n to \n    n\n, the root is the vertex \n    1\n. You can\nperform the following operation at most \n    k\n times: choose an edge \n    (v,\n    u)\n of the tree such that \n    v\n is a parent of \n    u\n; remove the edge\n\n    (v, u)\n; add an edge \n    (1, u)\n (i. e. make \n    u\n with its subtree a\nchild of the root). The height of a tree is the maximum depth of its vertices,\nand the depth of a vertex is the number of edges on the path from the root to\nit. For example, the depth of vertex \n    1\n is \n    0\n, since it's the root,\nand the depth of all its children is \n    1\n. What's the smallest height of\nthe tree that can be achieved? Input The first line contains a single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of testcases. The first line\nof each testcase contains two integers \n    n\n and \n    k\n (\n    2 \n    \u2264 n \n    \u2264\n    2 \n    \u00b7 10^5\n; \n    0 \n    \u2264 k \n    \u2264 n - 1\n) \u2014 the number of vertices in\nthe tree and the maximum number of operations you can perform. The second line\ncontains \n    n-1\n integers \n    p_2, p_3, \n    \u2026, p_n\n (\n    1 \n    \u2264 p_i <\n    i\n) \u2014 the parent of the \n    i\n-th vertex. Vertex \n    1\n is the root. The\nsum of \n    n\n over all testcases doesn't exceed \n    2 \n    \u00b7 10^5\n. Output\nFor each testcase, print a single integer \u2014 the smallest height of the tree\nthat can achieved by performing at most \n    k\n operations. Example Input 5 5\n1 1 1 2 2 5 2 1 1 2 2 6 0 1 2 3 4 5 6 1 1 2 3 4 5 4 3 1 1 1 Output 2 1 5 3 1\n\n",
        "cf_contest_id": 1739,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "graphs",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n5 1\r\n1 1 2 2\r\n5 2\r\n1 1 2 2\r\n6 0\r\n1 2 3 4 5\r\n6 1\r\n1 2 3 4 5\r\n4 3\r\n1 1 1\r\n",
                "2\r\n1\r\n5\r\n3\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]