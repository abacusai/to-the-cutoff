[
    {
        "name": "Bits",
        "description": "Let's denote as the number of bits set ('1' bits) in the binary representation\nof the non-negative integer x. You are given multiple queries consisting of\npairs of integers l and r. For each query, find the x, such that l \u2264 x \u2264 r,\nand is maximum possible. If there are multiple such numbers find the smallest\nof them. Input The first line contains integer n \u2014 the number of queries (1 \u2264\nn \u2264 10000). Each of the following n lines contain two integers li, ri \u2014 the\narguments for the corresponding query (0 \u2264 li \u2264 ri \u2264 10^18). Output For each\nquery print the answer in a separate line. Examples Input 3 1 2 2 4 1 10\nOutput 1 3 7 Note The binary representations of numbers from 1 to 10 are\nlisted below: 110 = 12 210 = 102 310 = 112 410 = 1002 510 = 1012 610 = 1102\n710 = 1112 810 = 10002 910 = 10012 1010 = 10102\n\n",
        "cf_contest_id": 484,
        "cf_index": "A",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "constructive algorithms"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 2\r\n2 4\r\n1 10\r\n",
                "1\r\n3\r\n7\r\n"
            ]
        ],
        "private_cases": [
            [
                "55\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n1 9\r\n1 10\r\n2 2\r\n2 3\r\n2 4\r\n2 5\r\n2 6\r\n2 7\r\n2 8\r\n2 9\r\n2 10\r\n3 3\r\n3 4\r\n3 5\r\n3 6\r\n3 7\r\n3 8\r\n3 9\r\n3 10\r\n4 4\r\n4 5\r\n4 6\r\n4 7\r\n4 8\r\n4 9\r\n4 10\r\n5 5\r\n5 6\r\n5 7\r\n5 8\r\n5 9\r\n5 10\r\n6 6\r\n6 7\r\n6 8\r\n6 9\r\n6 10\r\n7 7\r\n7 8\r\n7 9\r\n7 10\r\n8 8\r\n8 9\r\n8 10\r\n9 9\r\n9 10\r\n10 10\r\n",
                "1\r\n1\r\n3\r\n3\r\n3\r\n3\r\n7\r\n7\r\n7\r\n7\r\n2\r\n3\r\n3\r\n3\r\n3\r\n7\r\n7\r\n7\r\n7\r\n3\r\n3\r\n3\r\n3\r\n7\r\n7\r\n7\r\n7\r\n4\r\n5\r\n5\r\n7\r\n7\r\n7\r\n7\r\n5\r\n5\r\n7\r\n7\r\n7\r\n7\r\n6\r\n7\r\n7\r\n7\r\n7\r\n7\r\n7\r\n7\r\n7\r\n8\r\n9\r\n9\r\n9\r\n9\r\n10\r\n"
            ],
            [
                "18\r\n1 10\r\n1 100\r\n1 1000\r\n1 10000\r\n1 100000\r\n1 1000000\r\n1 10000000\r\n1 100000000\r\n1 1000000000\r\n1 10000000000\r\n1 100000000000\r\n1 1000000000000\r\n1 10000000000000\r\n1 100000000000000\r\n1 1000000000000000\r\n1 10000000000000000\r\n1 100000000000000000\r\n1 1000000000000000000\r\n",
                "7\r\n63\r\n511\r\n8191\r\n65535\r\n524287\r\n8388607\r\n67108863\r\n536870911\r\n8589934591\r\n68719476735\r\n549755813887\r\n8796093022207\r\n70368744177663\r\n562949953421311\r\n9007199254740991\r\n72057594037927935\r\n576460752303423487\r\n"
            ],
            [
                "3\r\n0 0\r\n1 3\r\n2 4\r\n",
                "0\r\n3\r\n3\r\n"
            ],
            [
                "17\r\n0 0\r\n0 8\r\n1 8\r\n36 39\r\n3 4\r\n3 7\r\n2 17\r\n8 12\r\n9 12\r\n10 12\r\n10 15\r\n6 14\r\n8 15\r\n9 15\r\n15 15\r\n100000000000000000 1000000000000000000\r\n99999999999999999 1000000000000000000\r\n",
                "0\r\n7\r\n7\r\n39\r\n3\r\n7\r\n15\r\n11\r\n11\r\n11\r\n15\r\n7\r\n15\r\n15\r\n15\r\n576460752303423487\r\n576460752303423487\r\n"
            ]
        ]
    }
]