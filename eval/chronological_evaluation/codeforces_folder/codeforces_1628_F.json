[
    {
        "name": "Spaceship Crisis Management",
        "description": "NASA (Norwegian Astronaut Stuff Association) is developing a new steering\nsystem for spaceships. But in its current state, it wouldn't be very safe if\nthe spaceship would end up in a bunch of space junk. To make the steering\nsystem safe, they need to answer the following: Given the target position \n    t\n    = (0, 0)\n, a set of \n    n\n pieces of space junk \n    l\n described by line\nsegments \n    l_i = ((a_ix, a_iy), (b_ix, b_iy))\n, and a starting\nposition \n    s = (s_x, s_y)\n, is there a direction such that floating in that\ndirection from the starting position would lead to the target position? When\nthe spaceship hits a piece of space junk, what happens depends on the absolute\ndifference in angle between the floating direction and the line segment,\n\n    \u03b8\n: If \n    \u03b8 < 45^\n    \u2218\n, the spaceship slides along\nthe piece of space junk in the direction that minimizes the change in angle,\nand when the spaceship slides off the end of the space junk, it continues\nfloating in the direction it came in (before hitting the space junk). If\n\n    \u03b8\n    \u2265 45^\n    \u2218\n, the spaceship stops, because there is too\nmuch friction to slide along the space junk. You are only given the set of\npieces of space junk once, and the target position is always \n    (0, 0)\n, but\nthere are \n    q\n queries, each with a starting position \n    s_j = (s_jx,\n    s_jy)\n. Answer the above question for each query. Input The first line\ncontains the the integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 1500\n). Then follows\n\n    n\n lines, the \n    i\n-th of which containing the \n    4\n integers\n\n    a_ix\n, \n    a_iy\n, \n    b_ix\n, and \n    b_iy\n (\n    |a_ix|,\n    |a_iy|, |b_ix|, |b_iy| \n    \u2264 1000\n). Then follows a line containing\nthe integer \n    q\n (\n    1 \n    \u2264 q \n    \u2264 1000\n). Then follows \n    q\n lines,\nthe \n    j\n-th of which containing the \n    2\n integers \n    s_jx\n and\n\n    s_jy\n (\n    |s_jx|, |s_jy| \n    \u2264 1000\n). It is guaranteed that none\nof the segments in \n    l\n cross or touch, that \n    t\n is not on any segment\nin \n    l\n, that \n    s_j\n is not on any segment in \n    l\n, and that \n    s\n    \n    \u2260 t\n. Output For each query \n    s_j\n print an answer. If there exists\na direction such that floating from \n    s_j\n in that direction, possibly\nsliding along some pieces of space junk, leads to \n    t\n, print \"YES\".\nOtherwise, print \"NO\" (case insensitive). Example Input 3 0 1 2 4 1 3 -1 6 0\n-1 1 -1 14 -2 10 -1 10 0 10 1 10 2 10 3 10 4 10 5 10 6 10 -1 -2 0 -2 1 -2 2 -2\n3 -2 Output YES YES YES YES YES NO NO NO YES YES NO NO NO YES Note The blue\ncross represents the target location, and the other blue line segments\nrepresent the space junk. Green dots represent starting locations where the\nanswer is yes, and red dots represent starting locations where the answer is\nno. The yellow lines are possible paths to the target location for the\n\n    3\nrd and \n    14\nth queries. The black line is a possible path from the\nstarting location in the \n    6\nth query, but it barely misses the target\nlocation.\n\n",
        "cf_contest_id": 1628,
        "cf_index": "F",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "geometry",
            "sortings"
        ],
        "time_limit_seconds": 8.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n0 1 2 4\r\n1 3 -1 6\r\n0 -1 1 -1\r\n14\r\n-2 10\r\n-1 10\r\n0 10\r\n1 10\r\n2 10\r\n3 10\r\n4 10\r\n5 10\r\n6 10\r\n-1 -2\r\n0 -2\r\n1 -2\r\n2 -2\r\n3 -2\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 0 2 0\r\n1\r\n3 0\r\n",
                "YES\r\n"
            ]
        ]
    }
]