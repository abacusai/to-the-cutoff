[
    {
        "name": "GCD Compression",
        "description": "Ashish has an array \n    a\n of consisting of \n    2n\n positive integers. He\nwants to compress \n    a\n into an array \n    b\n of size \n    n-1\n. To do this,\nhe first discards exactly \n    2\n (any two) elements from \n    a\n. He then\nperforms the following operation until there are no elements left in \n    a\n:\nRemove any two elements from \n    a\n and append their sum to \n    b\n. The\ncompressed array \n    b\n has to have a special property. The greatest common\ndivisor (\n    gcd\n) of all its elements should be greater than\n\n    1\n. Recall that the \n    gcd\n of an array of positive integers\nis the biggest integer that is a divisor of all integers in the array. It can\nbe proven that it is always possible to compress array \n    a\n into an array\n\n    b\n of size \n    n-1\n such that \n    gcd(b_1, b_2..., b_n-1) > 1\n. Help\nAshish find a way to do so. Input The first line contains a single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 10\n) \u2014 the number of test cases. The\ndescription of the test cases follows. The first line of each test case\ncontains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 1000\n). The second\nline of each test case contains \n    2n\n integers \n    a_1, a_2, \n    \u2026,\n    a_2n\n (\n    1 \n    \u2264 a_i \n    \u2264 1000\n) \u2014 the elements of the array\n\n    a\n. Output For each test case, output \n    n-1\n lines \u2014 the operations\nperformed to compress the array \n    a\n to the array \n    b\n. The initial\ndiscard of the two elements is not an operation, you don't need to output\nanything about it. The \n    i\n-th line should contain two integers, the\nindices (\n    1\n \u2014based) of the two elements from the array \n    a\n that are\nused in the \n    i\n-th operation. All \n    2n-2\n indices should be distinct\nintegers from \n    1\n to \n    2n\n. You don't need to output two initially\ndiscarded elements from \n    a\n. If there are multiple answers, you can find\nany. Example Input 3 3 1 2 3 4 5 6 2 5 7 9 10 5 1 3 3 4 5 90 100 101 2 3\nOutput 3 6 4 5 3 4 1 9 2 3 4 5 6 10 Note In the first test case, \n    b =\n    \n    \n    3+6, 4+5\n    \n     = \n    \n    9, 9\n and \n    gcd(9, 9) = 9\n. In\nthe second test case, \n    b = \n    \n    9+10\n    \n     = \n    \n    19\n and\n\n    gcd(19) = 19\n. In the third test case, \n    b = \n    \n    1+2, 3+3,\n    4+5, 90+3\n    \n     = \n    \n    3, 6, 9, 93\n and \n    gcd(3, 6, 9, 93) =\n    3\n.\n\n",
        "cf_contest_id": 1370,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3\r\n1 2 3 4 5 6\r\n2\r\n5 7 9 10\r\n5\r\n1 3 3 4 5 90 100 101 2 3\r\n",
                "2 4 1 3\r\n1 2\r\n4 6 7 9 1 2 3 5\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n3\r\n2 4 6 8 10 12\r\n3\r\n1 3 5 7 9 11\r\n5\r\n2 4 6 8 10 2 4 6 8 10\r\n5\r\n1 3 5 7 9 1 3 5 7 9\r\n",
                "1 2 3 4\r\n1 2 3 4\r\n1 2 3 4 5 6 7 8\r\n1 2 3 4 5 6 7 8\r\n"
            ],
            [
                "10\r\n5\r\n1 5 5 6 3 2 3 9 4 7\r\n10\r\n2 3 7 2 3 1 2 9 5 6 2 7 5 3 10 4 3 9 1 2\r\n2\r\n5 2 7 1\r\n4\r\n2 6 9 6 10 7 9 7\r\n3\r\n8 5 1 8 8 1\r\n4\r\n1 7 3 2 1 8 7 8\r\n8\r\n6 7 3 3 5 1 9 4 4 2 6 10 5 1 1 3\r\n9\r\n7 9 5 6 1 8 6 5 9 6 4 6 5 2 1 8 9 4\r\n2\r\n7 8 9 1\r\n10\r\n3 8 5 1 6 7 1 5 10 1 8 2 2 1 8 8 2 1 4 10\r\n",
                "4 6 1 2 3 5 7 8\r\n1 4 7 10 11 15 16 20 2 3 5 6 8 9 12 13 14 17\r\n1 3\r\n1 2 4 5 3 6\r\n1 4 2 3\r\n4 6 1 2 3 5\r\n1 8 9 10 11 12 2 3 4 5 6 7 13 14\r\n4 6 7 10 11 12 14 16 1 2 3 5 8 9 13 15\r\n1 3\r\n1 3 4 6 7 8 10 14 2 5 9 11 12 13 15 16 17 19\r\n"
            ],
            [
                "10\r\n9\r\n7 6 6 3 4 5 10 3 6 5 9 8 6 10 2 1 4 7\r\n10\r\n8 10 8 1 4 4 2 2 6 7 8 4 10 2 6 10 1 4 1 7\r\n5\r\n1 10 8 2 5 8 3 10 6 8\r\n4\r\n5 7 10 9 4 8 8 1\r\n8\r\n6 4 1 1 5 6 6 9 3 10 8 7 6 2 1 2\r\n5\r\n5 6 10 4 6 10 5 2 6 6\r\n3\r\n5 4 5 2 1 2\r\n2\r\n10 9 6 3\r\n7\r\n4 2 7 3 2 9 3 3 8 8 2 3 10 1\r\n9\r\n9 10 1 1 6 4 10 7 8 4 4 1 10 8 4 3 2 5\r\n",
                "1 4 6 8 10 11 16 18 2 3 5 7 9 12 13 14\r\n4 10 17 19 1 2 3 5 6 7 8 9 11 12 13 14 15 16\r\n1 5 2 3 4 6 8 9\r\n3 5 6 7 1 2\r\n3 4 5 8 9 12 1 2 6 7 10 11 13 14\r\n1 7 2 3 4 5 6 8\r\n2 4 1 3\r\n1 3\r\n1 2 5 9 10 11 3 4 6 7 8 12\r\n1 3 4 8 12 16 2 5 6 7 9 10 11 13 14 15\r\n"
            ],
            [
                "10\r\n5\r\n4 10 8 7 6 5 5 3 2 3\r\n7\r\n3 9 9 4 4 4 3 2 2 3 8 9 1 8\r\n4\r\n3 10 5 5 1 5 8 5\r\n9\r\n1 3 10 8 1 7 4 3 2 3 5 10 8 10 8 6 3 6\r\n3\r\n6 1 6 1 2 3\r\n3\r\n2 3 6 8 7 8\r\n9\r\n10 1 5 4 9 3 4 4 8 7 6 8 6 7 9 10 4 2\r\n5\r\n5 8 8 9 8 9 9 4 1 10\r\n2\r\n8 7 4 8\r\n7\r\n6 1 8 10 1 3 5 6 1 10 6 5 4 4\r\n",
                "1 2 3 5 4 6 7 8\r\n4 5 6 8 9 11 1 2 3 7 10 12\r\n2 7 1 3 4 5\r\n1 2 5 6 8 10 11 17 3 4 7 9 12 13 14 15\r\n1 3 2 4\r\n2 5 1 3\r\n2 3 5 6 10 14 1 4 7 8 9 11 12 13 16 17\r\n2 3 5 8 1 4 6 7\r\n1 3\r\n2 5 6 7 9 12 1 3 4 8 10 11\r\n"
            ],
            [
                "10\r\n9\r\n8 8 2 6 2 7 4 1 6 5 2 4 8 3 2 3 6 8\r\n6\r\n1 8 8 2 2 7 6 7 8 9 1 7\r\n5\r\n4 2 9 6 8 7 7 5 7 4\r\n9\r\n4 10 7 7 8 5 4 9 6 5 1 1 7 6 3 3 1 10\r\n4\r\n8 8 2 2 9 7 4 8\r\n3\r\n5 2 8 2 4 2\r\n9\r\n5 8 8 10 7 3 10 8 7 9 4 2 5 9 10 4 6 1\r\n5\r\n8 1 4 1 6 6 2 2 5 10\r\n10\r\n6 5 5 3 9 10 4 8 5 1 4 7 10 4 2 2 7 8 7 3\r\n8\r\n3 8 5 5 9 3 10 7 10 6 2 5 3 4 4 9\r\n",
                "6 8 10 14 1 2 3 4 5 7 9 11 12 13 15 17\r\n2 3 4 5 7 9 1 6 8 10\r\n1 2 4 5 3 6 7 8\r\n1 2 5 7 9 14 3 4 6 8 10 11 12 13 15 16\r\n5 6 1 2 3 4\r\n2 3 4 5\r\n1 5 6 9 10 13 14 18 2 3 4 7 8 11 12 15\r\n2 4 1 3 5 6 7 8\r\n1 6 7 8 11 13 14 15 16 18 2 3 4 5 9 10 12 17\r\n2 7 9 10 11 14 1 3 4 5 6 8 12 13\r\n"
            ],
            [
                "10\r\n4\r\n6 3 9 10 7 9 6 7\r\n4\r\n8 1 1 7 7 3 10 4\r\n6\r\n9 5 7 8 10 6 7 6 8 5 4 5\r\n3\r\n10 4 1 1 10 8\r\n10\r\n3 4 10 7 8 10 2 1 6 3 6 7 2 2 5 7 1 4 5 10\r\n7\r\n3 4 3 8 4 7 7 6 9 4 1 6 2 10\r\n7\r\n10 10 6 8 5 10 7 2 4 8 10 7 4 7\r\n4\r\n3 8 3 8 9 6 8 8\r\n3\r\n7 2 9 9 7 9\r\n10\r\n9 1 3 2 10 4 5 8 9 6 10 9 2 4 7 3 10 3 2 10\r\n",
                "1 4 2 3 5 6\r\n1 7 2 3 4 5\r\n4 5 6 8 9 11 1 2 3 7\r\n3 4 1 2\r\n1 4 8 10 12 15 16 17 2 3 5 6 7 9 11 13 14 18\r\n1 3 6 7 9 11 2 4 5 8 10 12\r\n5 7 12 14 1 2 3 4 6 8 9 10\r\n1 3 2 4 6 7\r\n1 3 4 5\r\n1 2 3 7 9 12 15 16 4 5 6 8 10 11 13 14 17 19\r\n"
            ],
            [
                "10\r\n4\r\n1 6 6 4 10 5 8 9\r\n4\r\n1 5 10 1 4 3 7 8\r\n9\r\n7 6 6 2 5 1 4 3 6 3 6 9 6 6 6 7 5 7\r\n5\r\n4 3 9 3 7 7 3 2 9 3\r\n7\r\n4 1 7 1 2 7 7 4 1 8 8 10 5 3\r\n5\r\n1 1 3 8 4 3 5 2 10 2\r\n4\r\n6 3 8 7 4 6 2 9\r\n4\r\n7 8 4 6 3 10 5 10\r\n3\r\n10 9 8 4 2 3\r\n6\r\n9 1 8 5 1 8 7 9 8 10 1 1\r\n",
                "1 6 2 3 4 5\r\n3 5 1 2 4 6\r\n2 3 4 7 9 11 13 14 1 5 6 8 10 12 16 17\r\n1 8 2 3 4 5 6 7\r\n1 5 8 10 11 12 2 3 4 6 7 9\r\n4 5 8 9 1 2 3 6\r\n2 4 1 3 5 6\r\n1 5 2 3 4 6\r\n2 6 1 3\r\n3 6 9 10 1 2 4 5 7 8\r\n"
            ],
            [
                "10\r\n9\r\n7 5 4 3 1 4 8 8 2 10 5 9 6 9 4 9 8 7\r\n2\r\n4 6 4 2\r\n2\r\n9 4 7 7\r\n4\r\n9 2 3 7 6 7 6 4\r\n10\r\n1 3 7 4 6 5 8 2 7 7 1 4 2 10 3 10 9 7 3 7\r\n10\r\n6 3 6 10 10 7 6 4 4 2 8 3 9 6 4 3 2 10 3 7\r\n3\r\n7 8 7 8 3 9\r\n5\r\n7 4 4 4 7 5 9 7 7 3\r\n3\r\n7 6 4 9 8 1\r\n8\r\n6 5 7 7 10 7 2 2 9 5 10 1 2 2 10 9\r\n",
                "3 6 7 8 9 10 13 15 1 2 4 5 11 12 14 16\r\n1 2\r\n1 3\r\n2 5 7 8 1 3\r\n4 5 7 8 12 13 14 16 1 2 3 6 9 10 11 15 17 18\r\n2 6 12 13 16 19 1 3 4 5 7 8 9 10 11 14 15 17\r\n2 4 1 3\r\n2 3 1 5 6 7 8 9\r\n2 3 1 4\r\n1 5 7 8 11 13 14 15 2 3 4 6 9 10\r\n"
            ]
        ]
    }
]