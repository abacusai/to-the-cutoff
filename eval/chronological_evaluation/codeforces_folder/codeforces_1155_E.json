[
    {
        "name": "Guess the Root",
        "description": "Jury picked a polynomial \n    f(x) = a_0 + a_1 \n    \u00b7 x + a_2 \n    \u00b7 x^2 +\n    \n    \u2026 + a_k \n    \u00b7 x^k\n. \n    k \n    \u2264 10\n and all \n    a_i\n are integer\nnumbers and \n    0 \n    \u2264 a_i < 10^6 + 3\n. It's guaranteed that there is at\nleast one \n    i\n such that \n    a_i > 0\n. Now jury wants you to find such an\ninteger \n    x_0\n that \n    f(x_0) \n    \u2261 0 \n     (10^6 + 3)\n or report\nthat there is not such \n    x_0\n. You can ask no more than \n    50\n queries:\nyou ask value \n    x_q\n and jury tells you value \n    f(x_q) \n     (10^6 +\n    3)\n. Note that printing the answer doesn't count as a query. Interaction To\nask a question, print \"? \n    x_q\n\" \n    (0 \n    \u2264 x_q < 10^6 + 3)\n. The judge\nwill respond with a single integer \n    f(x_q) \n     (10^6 + 3)\n. If you ever\nget a result of \n    \u22121\n (because you printed an invalid query), exit\nimmediately to avoid getting other verdicts. After printing a query do not\nforget to output end of line and flush the output. Otherwise, you will get\nIdleness limit exceeded. To do this, use: fflush(stdout) or cout.flush() in\nC++; System.out.flush() in Java; flush(output) in Pascal; stdout.flush() in\nPython; see documentation for other languages. When you are ready to answer,\nprint \"! \n    x_0\n\" where \n    x_0\n is the answer or \n    -1\n if there is no\nsuch \n    x_0\n. You can ask at most \n    50\n questions per test case. Hack\nFormat To hack, use the following format. The only line should contain\n\n    11\n integers \n    a_0, a_1, \n    \u2026, a_10\n (\n    0 \n    \u2264 a_i < 10^6 +\n    3\n, \n    max\n    _0 \n    \u2264 i \n    \u2264 10a_i > 0\n) \u2014 corresponding\ncoefficients of the polynomial. Examples Input 1000002 0 Output ? 0 ? 1 ! 1\nInput 5 2 1 Output ? 2 ? 1 ? 0 ! -1 Note The polynomial in the first sample is\n\n    1000002 + x^2\n. The polynomial in the second sample is \n    1 + x^2\n.\n\n",
        "cf_contest_id": 1155,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "interactive",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1000002 0 1 0 0 0 0 0 0 0 0\r\n",
                "1\r\n"
            ],
            [
                "1 0 1 0 0 0 0 0 0 0 0\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "0 1 0 0 1 0 1 0 0 0 0\r\n",
                "1\r\n"
            ],
            [
                "0 1 0 1 0 1 0 0 0 0 0\r\n",
                "1\r\n"
            ],
            [
                "0 0 1 1 0 1 1 0 1 0 1\r\n",
                "1\r\n"
            ],
            [
                "0 0 1 1 1 0 1 0 0 0 1\r\n",
                "1\r\n"
            ],
            [
                "2 9 1 4 8 10 0 2 8 7 6\r\n",
                "1\r\n"
            ],
            [
                "8 6 0 8 10 10 5 2 7 2 5\r\n",
                "1\r\n"
            ],
            [
                "6 8 1 9 10 1 10 9 3 1 8\r\n",
                "-1\r\n"
            ],
            [
                "8 10 0 3 1 5 9 2 10 3 2\r\n",
                "1\r\n"
            ],
            [
                "10 0 6 6 6 5 3 9 10 9 1\r\n",
                "1\r\n"
            ],
            [
                "8 6 7 0 3 8 8 9 9 7 3\r\n",
                "-1\r\n"
            ],
            [
                "10 3 2 4 5 1 10 5 1 10 2\r\n",
                "-1\r\n"
            ],
            [
                "8 4 4 9 9 0 8 1 0 5 0\r\n",
                "1\r\n"
            ],
            [
                "3 10 9 2 3 3 9 5 0 3 6\r\n",
                "1\r\n"
            ],
            [
                "3 3 3 5 6 9 3 1 7 3 2\r\n",
                "-1\r\n"
            ],
            [
                "53 91 91 47 65 70 40 64 7 19 49\r\n",
                "1\r\n"
            ],
            [
                "66 100 11 81 19 55 96 14 66 10 49\r\n",
                "-1\r\n"
            ],
            [
                "44 8 21 71 7 29 40 65 91 70 48\r\n",
                "1\r\n"
            ],
            [
                "22 18 6 93 51 70 18 15 49 94 48\r\n",
                "-1\r\n"
            ],
            [
                "68 16 16 83 74 44 41 99 8 85 80\r\n",
                "1\r\n"
            ],
            [
                "13 93 26 73 18 29 18 16 100 76 80\r\n",
                "1\r\n"
            ],
            [
                "59 2 79 73 73 3 75 68 59 68 69\r\n",
                "1\r\n"
            ],
            [
                "37 11 89 63 28 78 19 18 17 59 0\r\n",
                "-1\r\n"
            ],
            [
                "83 21 9 85 72 29 64 69 77 50 0\r\n",
                "-1\r\n"
            ],
            [
                "7 59 25 42 31 75 85 18 75 93 1\r\n",
                "1\r\n"
            ],
            [
                "288007 302193 52871 860976 352892 803852 319011 94809 204318 893157 957912\r\n",
                "1\r\n"
            ],
            [
                "694923 910422 257297 945332 579330 821111 837512 844655 382095 134396 774393\r\n",
                "-1\r\n"
            ],
            [
                "56247 193989 877560 75275 84835 208614 985767 685676 559873 375638 545285\r\n",
                "1\r\n"
            ],
            [
                "417574 756628 81984 159631 635931 317051 134018 481108 783239 616881 991521\r\n",
                "-1\r\n"
            ],
            [
                "778901 364854 611068 614235 907959 334310 606930 230951 961017 858123 762413\r\n",
                "1\r\n"
            ],
            [
                "185814 18668 815495 698592 459052 721815 800774 396630 184380 99362 533304\r\n",
                "1\r\n"
            ],
            [
                "547141 581307 65508 782948 10146 739074 228094 146473 407747 340605 349785\r\n",
                "1\r\n"
            ],
            [
                "908468 189533 594592 912894 190995 801922 376348 987497 585524 581847 120677\r\n",
                "-1\r\n"
            ],
            [
                "269792 427514 799019 997250 742092 189425 894850 782929 438643 823089 937160\r\n",
                "1\r\n"
            ],
            [
                "171440 748794 461286 264551 856570 718230 65868 734862 498672 201040 90953\r\n",
                "1\r\n"
            ]
        ]
    }
]