[
    {
        "name": "Social Distance",
        "description": "Polycarp and his friends want to visit a new restaurant. The restaurant has\n\n    n\n tables arranged along a straight line. People are already sitting at\nsome tables. The tables are numbered from \n    1\n to \n    n\n in the order from\nleft to right. The state of the restaurant is described by a string of length\n\n    n\n which contains characters \"1\" (the table is occupied) and \"0\" (the\ntable is empty). Restaurant rules prohibit people to sit at a distance of\n\n    k\n or less from each other. That is, if a person sits at the table number\n\n    i\n, then all tables with numbers from \n    i-k\n to \n    i+k\n (except for\nthe \n    i\n-th) should be free. In other words, the absolute difference of the\nnumbers of any two occupied tables must be strictly greater than \n    k\n. For\nexample, if \n    n=8\n and \n    k=2\n, then: strings \"10010001\", \"10000010\",\n\"00000000\", \"00100000\" satisfy the rules of the restaurant; strings\n\"10100100\", \"10011001\", \"11111111\" do not satisfy to the rules of the\nrestaurant, since each of them has a pair of \"1\" with a distance less than or\nequal to \n    k=2\n. In particular, if the state of the restaurant is described\nby a string without \"1\" or a string with one \"1\", then the requirement of the\nrestaurant is satisfied. You are given a binary string \n    s\n that describes\nthe current state of the restaurant. It is guaranteed that the rules of the\nrestaurant are satisfied for the string \n    s\n. Find the maximum number of\nfree tables that you can occupy so as not to violate the rules of the\nrestaurant. Formally, what is the maximum number of \"0\" that can be replaced\nby \"1\" such that the requirement will still be satisfied? For example, if\n\n    n=6\n, \n    k=1\n, \n    s=\n \"100010\", then the answer to the problem will\nbe \n    1\n, since only the table at position \n    3\n can be occupied such that\nthe rules are still satisfied. Input The first line contains a single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases in the test.\nThen \n    t\n test cases follow. Each test case starts with a line containing\ntwo integers \n    n\n and \n    k\n (\n    1 \n    \u2264 k \n    \u2264 n \n    \u2264 2\n    \u00b7 10^5\n)\n\u2014 the number of tables in the restaurant and the minimum allowed distance\nbetween two people. The second line of each test case contains a binary string\n\n    s\n of length \n    n\n consisting of \"0\" and \"1\" \u2014 a description of the\nfree and occupied tables in the restaurant. The given string satisfy to the\nrules of the restaurant \u2014 the difference between indices of any two \"1\" is\nmore than \n    k\n. The sum of \n    n\n for all test cases in one test does not\nexceed \n    2\n    \u00b7 10^5\n. Output For each test case output one integer \u2014 the\nnumber of tables that you can occupy so as not to violate the rules of the\nrestaurant. If additional tables cannot be taken, then, obviously, you need to\noutput \n    0\n. Example Input 6 6 1 100010 6 2 000000 5 1 10101 3 1 001 2 2 00\n1 1 0 Output 1 2 0 1 1 1 Note The first test case is explained in the\nstatement. In the second test case, the answer is \n    2\n, since you can\nchoose the first and the sixth table. In the third test case, you cannot take\nany free table without violating the rules of the restaurant.\n\n",
        "cf_contest_id": 1367,
        "cf_index": "C",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n6 1\r\n100010\r\n6 2\r\n000000\r\n5 1\r\n10101\r\n3 1\r\n001\r\n2 2\r\n00\r\n1 1\r\n0\r\n",
                "1\r\n2\r\n0\r\n1\r\n1\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "7\r\n4 4\r\n0100\r\n4 4\r\n0100\r\n4 4\r\n0100\r\n4 4\r\n0100\r\n4 4\r\n0100\r\n4 4\r\n0100\r\n4 4\r\n0100\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "1\r\n13 5\r\n0000000000000\r\n",
                "3\r\n"
            ],
            [
                "3\r\n1 1\r\n0\r\n2 2\r\n00\r\n3 2\r\n000\r\n",
                "1\r\n1\r\n1\r\n"
            ],
            [
                "4\r\n1 1\r\n0\r\n1 1\r\n0\r\n1 1\r\n0\r\n1 1\r\n0\r\n",
                "1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "5\r\n1 1\r\n0\r\n1 1\r\n0\r\n1 1\r\n0\r\n1 1\r\n0\r\n1 1\r\n0\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "1\r\n12 5\r\n000000000000\r\n",
                "2\r\n"
            ]
        ]
    }
]