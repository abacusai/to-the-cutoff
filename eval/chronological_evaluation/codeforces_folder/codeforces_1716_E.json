[
    {
        "name": "Swap and Maximum Block",
        "description": "You are given an array of length \n    2^n\n. The elements of the array are\nnumbered from \n    1\n to \n    2^n\n. You have to process \n    q\n queries to\nthis array. In the \n    i\n-th query, you will be given an integer \n    k\n\n(\n    0 \n    \u2264 k \n    \u2264 n-1\n). To process the query, you should do the\nfollowing: for every \n    i \n    \u2208 [1, 2^n-2^k]\n in ascending order, do the\nfollowing: if the \n    i\n-th element was already swapped with some other\nelement during this query, skip it; otherwise, swap \n    a_i\n and\n\n    a_i+2^k\n; after that, print the maximum sum over all contiguous\nsubsegments of the array (including the empty subsegment). For example, if the\narray \n    a\n is \n    [-3, 5, -3, 2, 8, -20, 6, -1]\n, and \n    k = 1\n, the\nquery is processed as follows: the \n    1\n-st element wasn't swapped yet, so\nwe swap it with the \n    3\n-rd element; the \n    2\n-nd element wasn't swapped\nyet, so we swap it with the \n    4\n-th element; the \n    3\n-rd element was\nswapped already; the \n    4\n-th element was swapped already; the \n    5\n-th\nelement wasn't swapped yet, so we swap it with the \n    7\n-th element; the\n\n    6\n-th element wasn't swapped yet, so we swap it with the \n    8\n-th\nelement. So, the array becomes \n    [-3, 2, -3, 5, 6, -1, 8, -20]\n. The\nsubsegment with the maximum sum is \n    [5, 6, -1, 8]\n, and the answer to the\nquery is \n    18\n. Note that the queries actually change the array, i. e.\nafter a query is performed, the array does not return to its original state,\nand the next query will be applied to the modified array. Input The first line\ncontains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 18\n). The second line\ncontains \n    2^n\n integers \n    a_1, a_2, \n    \u2026, a_2^n\n (\n    -10^9 \n    \u2264\n    a_i \n    \u2264 10^9\n). The third line contains one integer \n    q\n (\n    1 \n    \u2264 q\n    \n    \u2264 2 \n    \u00b7 10^5\n). Then \n    q\n lines follow, the \n    i\n-th of them\ncontains one integer \n    k\n (\n    0 \n    \u2264 k \n    \u2264 n-1\n) describing the\n\n    i\n-th query. Output For each query, print one integer \u2014 the maximum sum\nover all contiguous subsegments of the array (including the empty subsegment)\nafter processing the query. Example Input 3 -3 5 -3 2 8 -20 6 -1 3 1 0 1\nOutput 18 8 13 Note Transformation of the array in the example: \n    [-3, 5, -3,\n    2, 8, -20, 6, -1] \n    \u2192 [-3, 2, -3, 5, 6, -1, 8, -20] \n    \u2192\n    [2, -3, 5, -3, -1, 6, -20, 8] \n    \u2192 [5, -3, 2, -3, -20, 8, -1, 6]\n.\n\n",
        "cf_contest_id": 1716,
        "cf_index": "E",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "dp"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n-3 5 -3 2 8 -20 6 -1\r\n3\r\n1\r\n0\r\n1\r\n",
                "18\r\n8\r\n13\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n-8 7\r\n10\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n",
                "7\r\n7\r\n7\r\n7\r\n7\r\n7\r\n7\r\n7\r\n7\r\n7\r\n"
            ],
            [
                "1\r\n-10 -1\r\n10\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "1\r\n-5 -3\r\n20\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "4\r\n-7 5 -5 3 -10 -9 -1 9 10 7 -3 8 -1 7 4 -6\r\n10\r\n2\r\n1\r\n3\r\n3\r\n3\r\n2\r\n2\r\n1\r\n2\r\n3\r\n",
                "31\r\n31\r\n37\r\n31\r\n37\r\n33\r\n37\r\n27\r\n32\r\n41\r\n"
            ],
            [
                "4\r\n-10 0 0 -2 2 -6 5 -5 2 -5 1 -10 -10 1 -9 -3\r\n10\r\n0\r\n2\r\n3\r\n2\r\n0\r\n0\r\n2\r\n3\r\n0\r\n2\r\n",
                "5\r\n5\r\n5\r\n5\r\n5\r\n5\r\n5\r\n5\r\n5\r\n5\r\n"
            ],
            [
                "4\r\n-1 -5 -3 8 9 -3 -6 -7 -1 3 8 -4 -8 3 -8 0\r\n20\r\n2\r\n1\r\n0\r\n1\r\n3\r\n3\r\n1\r\n1\r\n2\r\n1\r\n3\r\n2\r\n3\r\n2\r\n2\r\n3\r\n2\r\n1\r\n1\r\n0\r\n",
                "11\r\n11\r\n17\r\n9\r\n14\r\n9\r\n17\r\n9\r\n11\r\n16\r\n11\r\n17\r\n17\r\n16\r\n17\r\n17\r\n11\r\n11\r\n11\r\n9\r\n"
            ]
        ]
    }
]