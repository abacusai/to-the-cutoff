[
    {
        "name": "Delivery Bears",
        "description": "Niwel is a little golden bear. As everyone knows, bears live in forests, but\nNiwel got tired of seeing all the trees so he decided to move to the city. In\nthe city, Niwel took on a job managing bears to deliver goods. The city that\nhe lives in can be represented as a directed graph with n nodes and m edges.\nEach edge has a weight capacity. A delivery consists of a bear carrying\nweights with their bear hands on a simple path from node 1 to node n. The\ntotal weight that travels across a particular edge must not exceed the weight\ncapacity of that edge. Niwel has exactly x bears. In the interest of fairness,\nno bear can rest, and the weight that each bear carries must be exactly the\nsame. However, each bear may take different paths if they like. Niwel would\nlike to determine, what is the maximum amount of weight he can deliver (it's\nthe sum of weights carried by bears). Find the maximum weight. Input The first\nline contains three integers n, m and x (2 \u2264 n \u2264 50, 1 \u2264 m \u2264 500, 1 \u2264 x \u2264 100\n000) \u2014 the number of nodes, the number of directed edges and the number of\nbears, respectively. Each of the following m lines contains three integers ai,\nbi and ci (1 \u2264 ai, bi \u2264 n, ai \u2260 bi, 1 \u2264 ci \u2264 1 000 000). This represents a\ndirected edge from node ai to bi with weight capacity ci. There are no self\nloops and no multiple edges from one city to the other city. More formally,\nfor each i and j that i \u2260 j it's guaranteed that ai \u2260 aj or bi \u2260 bj. It is\nalso guaranteed that there is at least one path from node 1 to node n. Output\nPrint one real value on a single line \u2014 the maximum amount of weight Niwel can\ndeliver if he uses exactly x bears. Your answer will be considered correct if\nits absolute or relative error does not exceed 10^-6. Namely: let's assume\nthat your answer is a, and the answer of the jury is b. The checker program\nwill consider your answer correct if . Examples Input 4 4 3 1 2 2 2 4 1 1 3 1\n3 4 2 Output 1.5000000000 Input 5 11 23 1 2 3 2 3 4 3 4 5 4 5 6 1 3 4 2 4 5 3\n5 6 1 4 2 2 5 3 1 5 2 3 2 30 Output 10.2222222222 Note In the first sample,\nNiwel has three bears. Two bears can choose the path , while one bear can\nchoose the path . Even though the bear that goes on the path can carry one\nunit of weight, in the interest of fairness, he is restricted to carry 0.5\nunits of weight. Thus, the total weight is 1.5 units overall. Note that even\nthough Niwel can deliver more weight with just 2 bears, he must use exactly 3\nbears on this day.\n\n",
        "cf_contest_id": 653,
        "cf_index": "D",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "flows",
            "graphs"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 4 3\r\n1 2 2\r\n2 4 1\r\n1 3 1\r\n3 4 2\r\n",
                "1.500000000\r\n"
            ],
            [
                "5 11 23\r\n1 2 3\r\n2 3 4\r\n3 4 5\r\n4 5 6\r\n1 3 4\r\n2 4 5\r\n3 5 6\r\n1 4 2\r\n2 5 3\r\n1 5 2\r\n3 2 30\r\n",
                "10.222222222\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 16 63\r\n1 2 1\r\n2 10 1\r\n1 3 1\r\n3 10 1\r\n1 4 1\r\n4 10 1\r\n1 5 1\r\n5 10 1\r\n1 6 1\r\n6 10 1\r\n1 7 1\r\n7 10 1\r\n1 8 1\r\n8 10 1\r\n1 9 1\r\n9 10 1\r\n",
                "7.875000000\r\n"
            ],
            [
                "2 1 3\r\n1 2 301\r\n",
                "301.000000000\r\n"
            ],
            [
                "2 2 1\r\n1 2 48\r\n2 1 39\r\n",
                "48.000000000\r\n"
            ],
            [
                "5 9 5\r\n3 2 188619\r\n4 2 834845\r\n2 4 996667\r\n1 2 946392\r\n2 5 920935\r\n2 3 916558\r\n1 5 433923\r\n4 5 355150\r\n3 5 609814\r\n",
                "1182990.000000000\r\n"
            ],
            [
                "7 15 10\r\n1 3 776124\r\n6 7 769968\r\n2 1 797048\r\n4 3 53774\r\n2 7 305724\r\n4 1 963904\r\n4 6 877656\r\n4 5 971901\r\n1 4 803781\r\n3 1 457050\r\n3 7 915891\r\n1 7 8626\r\n5 7 961155\r\n3 4 891456\r\n5 4 756977\r\n",
                "1552248.000000000\r\n"
            ],
            [
                "3 2 100000\r\n1 2 1\r\n2 3 1\r\n",
                "1.000000000\r\n"
            ],
            [
                "3 2 100000\r\n1 2 1\r\n2 3 1000000\r\n",
                "1.000000000\r\n"
            ],
            [
                "2 1 100000\r\n1 2 1\r\n",
                "1.000000000\r\n"
            ],
            [
                "3 2 100000\r\n1 2 1\r\n2 3 100000\r\n",
                "1.000000000\r\n"
            ]
        ]
    }
]