[
    {
        "name": "Exercising Walk",
        "description": "Alice has a cute cat. To keep her cat fit, Alice wants to design an exercising\nwalk for her cat! Initially, Alice's cat is located in a cell \n    (x,y)\n of\nan infinite grid. According to Alice's theory, cat needs to move: exactly\n\n    a\n steps left: from \n    (u,v)\n to \n    (u-1,v)\n; exactly \n    b\n steps\nright: from \n    (u,v)\n to \n    (u+1,v)\n; exactly \n    c\n steps down: from\n\n    (u,v)\n to \n    (u,v-1)\n; exactly \n    d\n steps up: from \n    (u,v)\n to\n\n    (u,v+1)\n. Note that the moves can be performed in an arbitrary order. For\nexample, if the cat has to move \n    1\n step left, \n    3\n steps right and\n\n    2\n steps down, then the walk right, down, left, right, right, down is\nvalid. Alice, however, is worrying that her cat might get lost if it moves far\naway from her. So she hopes that her cat is always in the area\n\n    [x_1,x_2]\n    \u00d7 [y_1,y_2]\n, i.e. for every cat's position \n    (u,v)\n\nof a walk \n    x_1 \n    \u2264 u \n    \u2264 x_2\n and \n    y_1 \n    \u2264 v \n    \u2264 y_2\n holds.\nAlso, note that the cat can visit the same cell multiple times. Can you help\nAlice find out if there exists a walk satisfying her wishes? Formally, the\nwalk should contain exactly \n    a+b+c+d\n unit moves (\n    a\n to the left,\n\n    b\n to the right, \n    c\n to the down, \n    d\n to the up). Alice can do\nthe moves in any order. Her current position \n    (u, v)\n should always\nsatisfy the constraints: \n    x_1 \n    \u2264 u \n    \u2264 x_2\n, \n    y_1 \n    \u2264 v \n    \u2264\n    y_2\n. The staring point is \n    (x, y)\n. You are required to answer \n    t\n\ntest cases independently. Input The first line contains a single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^3\n) \u2014 the number of testcases. The first line\nof each test case contains four integers \n    a\n, \n    b\n, \n    c\n, \n    d\n\n(\n    0 \n    \u2264 a,b,c,d \n    \u2264 10^8\n, \n    a+b+c+d \n    \u2265 1\n). The second line of\nthe test case contains six integers \n    x\n, \n    y\n, \n    x_1\n, \n    y_1\n,\n\n    x_2\n, \n    y_2\n (\n    -10^8 \n    \u2264 x_1\n    \u2264 x \n    \u2264 x_2 \n    \u2264 10^8\n,\n\n    -10^8 \n    \u2264 y_1 \n    \u2264 y \n    \u2264 y_2 \n    \u2264 10^8\n). Output For each test\ncase, output \"YES\" in a separate line, if there exists a walk satisfying her\nwishes. Otherwise, output \"NO\" in a separate line. You can print each letter\nin any case (upper or lower). Example Input 6 3 2 2 2 0 0 -2 -2 2 2 3 1 4 1 0\n0 -1 -1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 1 0 0 0 0 0 1 5 1 1 1 0 0 -100 -100 0\n100 1 1 5 1 0 0 -100 -100 100 0 Output Yes No No Yes Yes Yes Note In the first\ntest case, one valid exercising walk is \n    \n\n    (0,0)\n    \u2192 (-1,0)\n    \n    \u2192 (-2,0)\n    \u2192 (-2,1) \n    \u2192 (-2,2)\n    \u2192\n    (-1,2)\n    \u2192(0,2)\n    \u2192 (0,1)\n    \u2192 (0,0) \n    \u2192\n    (-1,0)\n\n    \n\n\n",
        "cf_contest_id": 1332,
        "cf_index": "A",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "6\r\n3 2 2 2\r\n0 0 -2 -2 2 2\r\n3 1 4 1\r\n0 0 -1 -1 1 1\r\n1 1 1 1\r\n1 1 1 1 1 1\r\n0 0 0 1\r\n0 0 0 0 0 1\r\n5 1 1 1\r\n0 0 -100 -100 0 100\r\n1 1 5 1\r\n0 0 -100 -100 100 0\r\n",
                "YES\r\nNO \r\nNO \r\nYES\r\nYES\r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n83 75 18 67\r\n-4233924 24412104 -4233956 24412104 -4233832 24412181\r\n",
                "YES\r\n"
            ],
            [
                "1\r\n0 0 1 1\r\n0 0 0 0 0 0\r\n",
                "NO \r\n"
            ]
        ]
    }
]