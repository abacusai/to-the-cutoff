[
    {
        "name": "Forced Online Queries Problem",
        "description": "You are given an undirected graph with \n    n\n vertices numbered from \n    1\n\nto \n    n\n. Initially there are no edges. You are asked to perform some\nqueries on the graph. Let \n    last\n be the answer to the latest query of the\nsecond type, it is set to \n    0\n before the first such query. Then the\nqueries are the following: \n    1\u00a0x\u00a0y\n (\n    1 \n    \u2264 x, y \n    \u2264 n\n, \n    x \n    \n    y\n) \u2014 add an undirected edge between the vertices \n    (x + last - 1)\u00a0mod\u00a0n +\n    1\n and \n    (y + last - 1)\u00a0mod\u00a0n + 1\n if it doesn't exist yet, otherwise\nremove it; \n    2\u00a0x\u00a0y\n (\n    1 \n    \u2264 x, y \n    \u2264 n\n, \n    x \n     y\n) \u2014 check\nif there exists a path between the vertices \n    (x + last - 1)\u00a0mod\u00a0n + 1\n and\n\n    (y + last - 1)\u00a0mod\u00a0n + 1\n, which goes only through currently existing\nedges, and set \n    last\n to \n    1\n if so and \n    0\n otherwise. Good luck!\nInput The first line contains two integer numbers \n    n\n and \n    m\n (\n    2\n    \n    \u2264 n, m \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of vertices and the number of\nqueries, respectively. Each of the following \n    m\n lines contains a query of\none of two aforementioned types. It is guaranteed that there is at least one\nquery of the second type. Output Print a string, consisting of characters '0'\nand '1'. The \n    i\n-th character should be the answer to the \n    i\n-th query\nof the second type. Therefore the length of the string should be equal to the\nnumber of queries of the second type. Examples Input 5 9 1 1 2 1 1 3 2 3 2 1 2\n4 2 3 4 1 2 4 2 3 4 1 1 3 2 4 3 Output 1010 Input 3 9 1 1 2 1 2 3 1 3 1 2 1 3\n1 3 2 2 2 3 1 1 2 2 1 2 2 1 2 Output 1101 Note The converted queries in the\nfirst example are: 1 1 2 1 1 3 2 3 2 1 3 5 2 4 5 1 2 4 2 3 4 1 2 4 2 5 4 The\nconverted queries in the second example are: 1 1 2 1 2 3 1 3 1 2 1 3 1 1 3 2 3\n1 1 2 3 2 2 3 2 1 2\n\n",
        "cf_contest_id": 1217,
        "cf_index": "F",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "divide and conquer",
            "dsu",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 9\r\n1 1 2\r\n1 1 3\r\n2 3 2\r\n1 2 4\r\n2 3 4\r\n1 2 4\r\n2 3 4\r\n1 1 3\r\n2 4 3\r\n",
                "1010"
            ],
            [
                "3 9\r\n1 1 2\r\n1 2 3\r\n1 3 1\r\n2 1 3\r\n1 3 2\r\n2 2 3\r\n1 1 2\r\n2 1 2\r\n2 1 2\r\n",
                "1101"
            ]
        ],
        "private_cases": [
            [
                "2 5\r\n2 2 1\r\n1 1 2\r\n2 1 2\r\n1 2 1\r\n2 2 1\r\n",
                "010"
            ],
            [
                "3 7\r\n1 1 3\r\n2 2 3\r\n1 2 3\r\n2 1 2\r\n1 3 2\r\n2 2 3\r\n1 1 3\r\n",
                "010"
            ],
            [
                "2 10\r\n1 2 1\r\n1 1 2\r\n1 2 1\r\n2 2 1\r\n2 2 1\r\n2 1 2\r\n1 2 1\r\n2 2 1\r\n2 2 1\r\n2 1 2\r\n",
                "111000"
            ],
            [
                "5 5\r\n2 5 2\r\n2 3 4\r\n1 5 4\r\n1 3 1\r\n1 3 1\r\n",
                "00"
            ],
            [
                "5 5\r\n2 3 4\r\n2 5 1\r\n1 3 1\r\n1 2 1\r\n2 2 4\r\n",
                "000"
            ],
            [
                "10 10\r\n1 4 8\r\n1 5 2\r\n2 9 5\r\n1 10 4\r\n2 4 9\r\n2 9 5\r\n1 10 3\r\n1 3 5\r\n2 9 4\r\n2 3 5\r\n",
                "00001"
            ]
        ]
    }
]