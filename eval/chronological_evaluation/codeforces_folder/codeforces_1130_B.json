[
    {
        "name": "Two Cakes",
        "description": "Sasha and Dima want to buy two \n    n\n-tier cakes. Each cake should consist of\n\n    n\n different tiers: from the size of \n    1\n to the size of \n    n\n.\nTiers should go in order from the smallest to the biggest (from top to\nbottom). They live on the same street, there are \n    2 \n    \u00b7 n\n houses in a\nrow from left to right. Each house has a pastry shop where you can buy a cake\ntier. Unfortunately, in each pastry shop you can buy only one tier of only one\nspecific size: in the \n    i\n-th house you can buy a tier of the size\n\n    a_i\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n). Since the guys carry already purchased\ntiers, and it is impossible to insert a new tier in the middle of the cake,\nthey agreed to buy tiers from the smallest to the biggest. That is, each of\nthem buys tiers in order: \n    1\n, then \n    2\n, then \n    3\n and so on up to\n\n    n\n. Initially, Sasha and Dima are located near the first (leftmost)\nhouse. Output the minimum distance that they will have to walk in total to buy\nboth cakes. The distance between any two neighboring houses is exactly\n\n    1\n. Input The first line of the input contains an integer number \n    n\n\n\u2014 the number of tiers in each cake (\n    1 \n    \u2264 n \n    \u2264 10^5\n). The second\nline contains \n    2 \n    \u00b7 n\n integers \n    a_1, a_2, \n    \u2026, a_2n\n (\n    1\n    \n    \u2264 a_i \n    \u2264 n\n), where \n    a_i\n is equal to the size of the tier, which\ncan be bought in the \n    i\n-th house. Remember that in each house you can buy\nonly one tier. It is guaranteed that every number from \n    1\n to \n    n\n\noccurs in \n    a\n exactly two times. Output Print one number \u2014 the minimum\ndistance that the guys have to walk in total to buy both cakes. Guys can be\nnear same house at the same time. They begin near the first (leftmost) house.\nEach of the guys should buy \n    n\n tiers in ascending order of their sizes.\nExamples Input 3 1 1 2 2 3 3 Output 9 Input 2 2 1 1 2 Output 5 Input 4 4 1 3 2\n2 3 1 4 Output 17 Note In the first example, the possible optimal sequence of\nactions is: Sasha buys a tier of size \n    1\n near the \n    1\n-st house\n(\n    a_1=1\n); Dima goes to the house \n    2\n; Dima buys a tier of size\n\n    1\n near the \n    2\n-nd house (\n    a_2=1\n); Sasha goes to the house\n\n    4\n; Sasha buys a tier of size \n    2\n near the \n    4\n-th house\n(\n    a_4=2\n); Sasha goes to the house \n    5\n; Sasha buys a tier of size\n\n    3\n near the \n    5\n-th house (\n    a_5=3\n); Dima goes to the house\n\n    3\n; Dima buys a tier of size \n    2\n near the \n    3\n-rd house\n(\n    a_3=2\n); Dima goes to the house \n    6\n; Dima buys a tier of size\n\n    3\n near the \n    6\n-th house (\n    a_6=3\n). So, Sasha goes the distance\n\n    3+1=4\n, and Dima goes the distance \n    1+1+3=5\n. In total, they cover a\ndistance of \n    4+5=9\n. You can make sure that with any other sequence of\nactions they will walk no less distance.\n\n",
        "cf_contest_id": 1130,
        "cf_index": "B",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 1 2 2 3 3\r\n",
                "9\r\n"
            ],
            [
                "2\r\n2 1 1 2\r\n",
                "5\r\n"
            ],
            [
                "4\r\n4 1 3 2 2 3 1 4\r\n",
                "17\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 1\r\n",
                "1\r\n"
            ],
            [
                "2\r\n2 2 1 1\r\n",
                "9\r\n"
            ],
            [
                "3\r\n1 3 3 2 1 2\r\n",
                "13\r\n"
            ],
            [
                "4\r\n3 2 1 1 4 2 3 4\r\n",
                "15\r\n"
            ],
            [
                "5\r\n5 2 1 2 3 5 4 3 1 4\r\n",
                "37\r\n"
            ],
            [
                "6\r\n4 2 3 5 2 5 1 6 6 4 3 1\r\n",
                "53\r\n"
            ],
            [
                "2\r\n1 1 2 2\r\n",
                "5\r\n"
            ],
            [
                "3\r\n3 2 1 1 3 2\r\n",
                "10\r\n"
            ],
            [
                "4\r\n2 4 3 1 1 3 2 4\r\n",
                "18\r\n"
            ],
            [
                "5\r\n3 1 2 5 1 5 3 2 4 4\r\n",
                "32\r\n"
            ],
            [
                "6\r\n6 4 5 2 6 4 3 3 1 2 1 5\r\n",
                "52\r\n"
            ],
            [
                "7\r\n4 2 3 2 7 1 3 1 4 7 5 5 6 6\r\n",
                "57\r\n"
            ],
            [
                "8\r\n4 5 7 8 2 7 6 3 6 1 1 3 5 8 4 2\r\n",
                "74\r\n"
            ],
            [
                "9\r\n1 3 6 1 4 9 2 8 3 4 8 7 5 7 2 5 9 6\r\n",
                "89\r\n"
            ],
            [
                "10\r\n8 8 3 9 7 1 9 6 10 6 4 2 7 3 4 10 5 5 1 2\r\n",
                "123\r\n"
            ]
        ]
    }
]