[
    {
        "name": "Odd-Even Subsequence",
        "description": "Ashish has an array \n    a\n of size \n    n\n. A subsequence of \n    a\n is\ndefined as a sequence that can be obtained from \n    a\n by deleting some\nelements (possibly none), without changing the order of the remaining\nelements. Consider a subsequence \n    s\n of \n    a\n. He defines the cost of\n\n    s\n as the minimum between: The maximum among all elements at odd indices\nof \n    s\n. The maximum among all elements at even indices of \n    s\n. Note\nthat the index of an element is its index in \n    s\n, rather than its index in\n\n    a\n. The positions are numbered from \n    1\n. So, the cost of \n    s\n is\nequal to \n    min(max(s_1, s_3, s_5, \n    \u2026), max(s_2, s_4, s_6,\n    \n    \u2026))\n. For example, the cost of \n    7, 5, 6\n is \n    min(\n    max(7, 6), max(5) ) = min(7, 5) = 5\n. Help him find the minimum cost of a\nsubsequence of size \n    k\n. Input The first line contains two integers\n\n    n\n and \n    k\n (\n    2 \n    \u2264 k \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the\nsize of the array \n    a\n and the size of the subsequence. The next line\ncontains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i\n    \n    \u2264 10^9\n) \u2014 the elements of the array \n    a\n. Output Output a single\ninteger \u2014 the minimum cost of a subsequence of size \n    k\n. Examples Input 4\n2 1 2 3 4 Output 1 Input 4 3 1 2 3 4 Output 2 Input 5 3 5 3 4 2 6 Output 2\nInput 6 4 5 3 50 2 4 5 Output 3 Note In the first test, consider the\nsubsequence \n    s\n = \n    1, 3\n. Here the cost is equal to\n\n    min(max(1), max(3)) = 1\n. In the second test, consider the subsequence\n\n    s\n = \n    1, 2, 4\n. Here the cost is equal to \n    min(max(1, 4),\n    max(2)) = 2\n. In the fourth test, consider the subsequence \n    s\n =\n\n    3, 50, 2, 4\n. Here the cost is equal to \n    min(max(3, 2),\n    max(50, 4)) = 3\n.\n\n",
        "cf_contest_id": 1370,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dp",
            "dsu",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 2\r\n1 2 3 4\r\n",
                "1\r\n"
            ],
            [
                "4 3\r\n1 2 3 4\r\n",
                "2\r\n"
            ],
            [
                "5 3\r\n5 3 4 2 6\r\n",
                "2\r\n"
            ],
            [
                "6 4\r\n5 3 50 2 4 5\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "9 6\r\n61893 41300 6953 17157 3356 96839 77399 31252 37704\r\n",
                "31252\r\n"
            ],
            [
                "4 4\r\n99402 47701 84460 34277\r\n",
                "47701\r\n"
            ],
            [
                "3 2\r\n60105 66958 8251\r\n",
                "8251\r\n"
            ],
            [
                "8 2\r\n53334 11332 30400 32538 96555 59257 53063 32571\r\n",
                "11332\r\n"
            ],
            [
                "7 7\r\n20569 28739 17283 56309 61086 8910 52918\r\n",
                "56309\r\n"
            ],
            [
                "2 2\r\n5 10\r\n",
                "5\r\n"
            ],
            [
                "10 4\r\n91239 51189 50977 96098 56330 55725 6448 7351 60071 93359\r\n",
                "50977\r\n"
            ],
            [
                "3 3\r\n25875 65787 4273\r\n",
                "25875\r\n"
            ],
            [
                "6 3\r\n36914 69317 77398 81226 65499 13860\r\n",
                "36914\r\n"
            ],
            [
                "7 7\r\n75226 32953 72514 65185 20228 97478 86174\r\n",
                "86174\r\n"
            ],
            [
                "7 4\r\n42794 67289 74431 27073 23448 20525 18468\r\n",
                "23448\r\n"
            ],
            [
                "4 4\r\n42834 68994 51974 47316\r\n",
                "51974\r\n"
            ],
            [
                "3 2\r\n57537 28477 3814\r\n",
                "3814\r\n"
            ],
            [
                "2 2\r\n1123 82409\r\n",
                "1123\r\n"
            ],
            [
                "4 2\r\n93648 34841 31096 95128\r\n",
                "31096\r\n"
            ],
            [
                "7 7\r\n87348 10537 16568 51995 43500 80087 61886\r\n",
                "80087\r\n"
            ]
        ]
    }
]