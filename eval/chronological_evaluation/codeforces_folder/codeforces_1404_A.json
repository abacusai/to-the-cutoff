[
    {
        "name": "Balanced Bitstring",
        "description": "A bitstring is a string consisting only of the characters 0 and 1. A bitstring\nis called \n    k\n-balanced if every substring of size \n    k\n of this\nbitstring has an equal amount of 0 and 1 characters (\n    k/2\n of\neach). You are given an integer \n    k\n and a string \n    s\n which is composed\nonly of characters 0, 1, and ?. You need to determine whether you can make a\n\n    k\n-balanced bitstring by replacing every ? characters in \n    s\n with\neither 0 or 1. A string \n    a\n is a substring of a string \n    b\n if \n    a\n\ncan be obtained from \n    b\n by deletion of several (possibly, zero or all)\ncharacters from the beginning and several (possibly, zero or all) characters\nfrom the end. Input Each test contains multiple test cases. The first line\ncontains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n).\nDescription of the test cases follows. The first line of each test case\ncontains two integers \n    n\n and \n    k\n (\n    2 \n    \u2264 k \n    \u2264 n \n    \u2264 3\n    \n    \u00b7 10^5\n, \n    k\n is even) \u2014 the length of the string and the parameter\nfor a balanced bitstring. The next line contains the string \n    s\n (\n    |s| =\n    n\n). It is given that \n    s\n consists of only 0, 1, and ?. It is guaranteed\nthat the sum of \n    n\n over all test cases does not exceed \n    3 \n    \u00b7\n    10^5\n. Output For each test case, print YES if we can replace every ? in\n\n    s\n with 0 or 1 such that the resulting bitstring is \n    k\n-balanced, or\nNO if it is not possible. Example Input 9 6 4 100110 3 2 1?1 3 2 1?0 4 4 ????\n7 4 1?0??1? 10 10 11??11??11 4 2 1??1 4 4 ?0?0 6 2 ????00 Output YES YES NO\nYES YES NO NO YES NO Note For the first test case, the string is already a\n\n    4\n-balanced bitstring. For the second test case, the string can be\ntransformed into 101. For the fourth test case, the string can be transformed\ninto 0110. For the fifth test case, the string can be transformed into\n1100110.\n\n",
        "cf_contest_id": 1404,
        "cf_index": "A",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "9\r\n6 4\r\n100110\r\n3 2\r\n1?1\r\n3 2\r\n1?0\r\n4 4\r\n????\r\n7 4\r\n1?0??1?\r\n10 10\r\n11??11??11\r\n4 2\r\n1??1\r\n4 4\r\n?0?0\r\n6 2\r\n????00\r\n",
                "YES\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\n"
            ]
        ],
        "private_cases": []
    }
]