[
    {
        "name": "Forward, march!",
        "description": "Jack has become a soldier now. Unfortunately, he has trouble with the drill.\nInstead of marching beginning with the left foot and then changing legs with\neach step, as ordered, he keeps repeating a sequence of steps, in which he\nsometimes makes the wrong steps or \u2014 horror of horrors! \u2014 stops for a while.\nFor example, if Jack uses the sequence 'right, left, break', when the sergeant\nyells: 'Left! Right! Left! Right! Left! Right!', Jack first makes a step with\nthe right foot, then one with the left foot, then he is confused and stops for\na moment, then again - this time according to the order - starts with the\nright foot, then uses the left foot, then - to the sergeant's irritation - he\nstops to catch his breath, to incorrectly start with the right foot again...\nMarching this way, Jack will make the step that he is supposed to in the given\nmoment in only one third of cases. When the officers convinced him he should\ndo something about it, Jack decided to modify the basic sequence of steps that\nhe repeats. However, in order not to get too tired, he has decided that the\nonly thing he'll do is adding any number of breaks in any positions of the\noriginal sequence (a break corresponds to stopping for the duration of one\nstep). Of course, Jack can't make a step on the same foot twice in a row, if\nthere is no pause between these steps. It is, however, not impossible that the\nsequence of steps he used so far is incorrect (it would explain a lot,\nactually). Help Private Jack! Given the sequence of steps he keeps repeating,\ncalculate the maximal percentage of time that he can spend marching correctly\nafter adding some breaks to his scheme. Input The first line of input contains\na sequence consisting only of characters 'L', 'R' and 'X', where 'L'\ncorresponds to a step with the left foot, 'R' \u2014 with the right foot, and 'X' \u2014\nto a break. The length of the sequence will not exceed 10^6. Output Output the\nmaximum percentage of time that Jack can spend marching correctly, rounded\ndown to exactly six digits after the decimal point. Examples Input X Output\n0.000000 Input LXRR Output 50.000000 Note In the second example, if we add two\nbreaks to receive LXXRXR, Jack will march: LXXRXRLXXRXRL... instead of\nLRLRLRLRLRLRL... and will make the correct step in half the cases. If we\ndidn't add any breaks, the sequence would be incorrect \u2014 Jack can't step on\nhis right foot twice in a row.\n\n",
        "cf_contest_id": 11,
        "cf_index": "E",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dp",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 64.0,
        "public_cases": [
            [
                "X\r\n",
                "0.000000\r\n"
            ],
            [
                "LXRR\r\n",
                "50.000000\r\n"
            ]
        ],
        "private_cases": [
            [
                "LXRR\r\n",
                "50.000000\r\n"
            ],
            [
                "LLXRXLXRLR\r\n",
                "50.000000\r\n"
            ],
            [
                "RXRRXXXRXXRR\r\n",
                "37.500000\r\n"
            ],
            [
                "LLLRLXRXLLLXXLLXLRLLXXLXXXRRXLRRRXXRXRRXXRRXLXRLXRLRRRLLLXRRLLXXLXRXRLXXXXRXXLLR\r\n",
                "44.642857\r\n"
            ],
            [
                "RRXXRXRLXXRLXLLXLLLLXXLXRXRRRXLRRLRLXXLLLXLXXRXLRLLRXRRRRLXLXRRLRLLRLRRRLXLRRRRL\r\n",
                "52.777777\r\n"
            ],
            [
                "LXXLLRXRXXXLLLLRRXLRLXLLLXLRRRXXRXXRRXLRXRXXRXXXXXRLRXLXXLXRXXRLXLLRLRXXXXLLXLLRXRRRRRXRXRXXLLRLRRLXXXXLXLLXLRLLRLXXXRXLLRXRLLXXXXXLXXLXLLXRXRRLRRLRXXRXXRRXRRXRRXXRRXXXXRLXXLLRRXLXXRXRLRRXLRRRLLRXLRRXXLLLLRXXLXRLXXXXLRXRLRLLRXLXLRLLRLRXXLXLRRRRLRRRLRLLXRRXRRRRRRXLXLLXXLLRRXXLLLXRXXXLLRLXXXRRXRXXXXXXLLLRXLXRRRLRRXXLRXXXRRLRLXRLXLXXRLXRRXXXRLRXRLXXLLXXRLRRLXRRLRRXXRLLRRRXRXXXRLLRLLRRLLLXXXLLRXXLRRXLXLXRLXXRXLLXLRRXXXRXRXLLXRXLXXLXXLRLRLLLLLRXXLRXXLXRXXLRRXLLXRLRLXXRLXRXLLRRLXRLXLLXLLRXLXLXRXRRRLLR\r\n",
                "47.859327\r\n"
            ],
            [
                "RXLLRXXLLRLRLLXXXXRXXRLLRRRRXLLRRLXXLRXXLXLRLLLLLRXLRXLXRXLXLRRXXRRLXLXLRLRXRXLXXXLRXLLXLRRRRXRLLXRRLLRRXRRRLRLLRLRXXXRLXLXLLLRXXLLXLRXXLLLRLXRRXRLXLXXXXXXLXRXXRXXXRXLXXRRXLLXRRXLXXRRXLXXRLXLXXLXRXXRLRLLXLXLXLRXLXLXLLLRLXXLXLLRLLLLRLRRRRXRRLLRLXLXXRLRRLXRRXXXRLLXRRRXXRRRXXLRXRLLXRRRXRXRXXLLLRLRXXRLRLXRLLXLXLRRXLRXRRLLRRLRXXLXRXLLLLRRLXXXXLRRLLRXXRLLLXXLRLRLLRLLRRLXRXXRLXLRXXLRRRRXRXXXXLXLLXRXRRLLRXXXRXLRXXLRRLRXXRRRLRXLRRXLXXRRLLLRRXLRRRXXRRXRLRXLXXLLRLLRRXLRLRLXRXRXRLXXXRLLXLLXLRXXRRRLRRXXLRXXL\r\n",
                "50.155763\r\n"
            ],
            [
                "RXLXLRLXLR\r\n",
                "58.333333\r\n"
            ],
            [
                "RXLLRLRR\r\n",
                "58.333333\r\n"
            ],
            [
                "RXXRLRRLRR\r\n",
                "57.142857\r\n"
            ],
            [
                "LRLRXLXXLR\r\n",
                "60.000000\r\n"
            ],
            [
                "LRXRLLLXLRXRLXRXXRLX\r\n",
                "54.545454\r\n"
            ],
            [
                "RXLRLRRRLLLLLRLLXRLR\r\n",
                "60.000000\r\n"
            ],
            [
                "XRRLLXLRLLRLLLLXRXLL\r\n",
                "53.571428\r\n"
            ],
            [
                "XRLRXLLRRRLLRRXXRXLR\r\n",
                "53.846153\r\n"
            ],
            [
                "RXLRRLRLXRLLRRRLRLRR\r\n",
                "64.285714\r\n"
            ],
            [
                "XRRLXRRRLRLXXLRRLRXL\r\n",
                "53.846153\r\n"
            ]
        ]
    }
]