[
    {
        "name": "Fox And Snake",
        "description": "Fox Ciel starts to learn programming. The first task is drawing a fox!\nHowever, that turns out to be too hard for a beginner, so she decides to draw\na snake instead. A snake is a pattern on a n by m table. Denote c-th cell of\nr-th row as (r, c). The tail of the snake is located at (1, 1), then it's body\nextends to (1, m), then goes down 2 rows to (3, m), then goes left to (3, 1)\nand so on. Your task is to draw this snake for Fox Ciel: the empty cells\nshould be represented as dot characters ('.') and the snake cells should be\nfilled with number signs ('#'). Consider sample tests in order to understand\nthe snake pattern. Input The only line contains two integers: n and m (3 \u2264 n,\nm \u2264 50). n is an odd number. Output Output n lines. Each line should contain a\nstring consisting of m characters. Do not output spaces. Examples Input 3 3\nOutput ### ..# ### Input 3 4 Output #### ...# #### Input 5 3 Output ### ..#\n### #.. ### Input 9 9 Output ######### ........# ######### #........ #########\n........# ######### #........ #########\n\n",
        "cf_contest_id": 510,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\n",
                "###\r\n..#\r\n###\r\n"
            ],
            [
                "3 4\r\n",
                "####\r\n...#\r\n####\r\n"
            ],
            [
                "5 3\r\n",
                "###\r\n..#\r\n###\r\n#..\r\n###\r\n"
            ],
            [
                "9 9\r\n",
                "#########\r\n........#\r\n#########\r\n#........\r\n#########\r\n........#\r\n#########\r\n#........\r\n#########\r\n"
            ]
        ],
        "private_cases": [
            [
                "7 3\r\n",
                "###\r\n..#\r\n###\r\n#..\r\n###\r\n..#\r\n###\r\n"
            ],
            [
                "11 3\r\n",
                "###\r\n..#\r\n###\r\n#..\r\n###\r\n..#\r\n###\r\n#..\r\n###\r\n..#\r\n###\r\n"
            ],
            [
                "19 3\r\n",
                "###\r\n..#\r\n###\r\n#..\r\n###\r\n..#\r\n###\r\n#..\r\n###\r\n..#\r\n###\r\n#..\r\n###\r\n..#\r\n###\r\n#..\r\n###\r\n..#\r\n###\r\n"
            ],
            [
                "45 3\r\n",
                "###\r\n..#\r\n###\r\n#..\r\n###\r\n..#\r\n###\r\n#..\r\n###\r\n..#\r\n###\r\n#..\r\n###\r\n..#\r\n###\r\n#..\r\n###\r\n..#\r\n###\r\n#..\r\n###\r\n..#\r\n###\r\n#..\r\n###\r\n..#\r\n###\r\n#..\r\n###\r\n..#\r\n###\r\n#..\r\n###\r\n..#\r\n###\r\n#..\r\n###\r\n..#\r\n###\r\n#..\r\n###\r\n..#\r\n###\r\n#..\r\n###\r\n"
            ]
        ]
    }
]