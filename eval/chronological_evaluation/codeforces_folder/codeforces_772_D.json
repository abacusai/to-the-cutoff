[
    {
        "name": "Varying Kibibits",
        "description": "You are given n integers a1, a2, ..., an. Denote this list of integers as T.\nLet f(L) be a function that takes in a non-empty list of integers L. The\nfunction will output another integer as follows: First, all integers in L are\npadded with leading zeros so they are all the same length as the maximum\nlength number in L. We will construct a string where the i-th character is the\nminimum of the i-th character in padded input numbers. The output is the\nnumber representing the string interpreted in base 10. For example f(10, 9) =\n0, f(123, 321) = 121, f(530, 932, 81) = 30. Define the function Here, denotes\na subsequence.In other words, G(x) is the sum of squares of sum of elements of\nnonempty subsequences of T that evaluate to x when plugged into f modulo 1 000\n000 007, then multiplied by x. The last multiplication is not modded. You\nwould like to compute G(0), G(1), ..., G(999 999). To reduce the output size,\nprint the value , where denotes the bitwise XOR operator. Input The first line\ncontains the integer n (1 \u2264 n \u2264 1 000 000) \u2014 the size of list T. The next line\ncontains n space-separated integers, a1, a2, ..., an (0 \u2264 ai \u2264 999 999) \u2014 the\nelements of the list. Output Output a single integer, the answer to the\nproblem. Examples Input 3 123 321 555 Output 292711924 Input 1 999999 Output\n997992010006992 Input 10 1 1 1 1 1 1 1 1 1 1 Output 28160 Note For the first\nsample, the nonzero values of G are G(121) = 144 611 577, G(123) = 58 401 999,\nG(321) = 279 403 857, G(555) = 170 953 875. The bitwise XOR of these numbers\nis equal to 292 711 924. For example, , since the subsequences [123] and [123,\n555] evaluate to 123 when plugged into f. For the second sample, we have For\nthe last sample, we have , where is the binomial coefficient.\n\n",
        "cf_contest_id": 772,
        "cf_index": "D",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "dp"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n123 321 555\r\n",
                "292711924\r\n"
            ],
            [
                "1\r\n999999\r\n",
                "997992010006992\r\n"
            ],
            [
                "10\r\n1 1 1 1 1 1 1 1 1 1\r\n",
                "28160\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n534185 663311 372491\r\n",
                "1081839767962341\r\n"
            ],
            [
                "10\r\n595436 647991 285857 373944 855766 551711 399789 673915 873668 415038\r\n",
                "1076029205780999\r\n"
            ]
        ]
    }
]