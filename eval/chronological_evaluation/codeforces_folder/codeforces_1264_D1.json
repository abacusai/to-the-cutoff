[
    {
        "name": "Beautiful Bracket Sequence (easy version)",
        "description": "This is the easy version of this problem. The only difference is the limit of\n\n    n\n - the length of the input string. In this version, \n    1 \n    \u2264 n\n    \n    \u2264 2000\n. The hard version of this challenge is not offered in the round\nfor the second division. Let's define a correct bracket sequence and its depth\nas follow: An empty string is a correct bracket sequence with depth \n    0\n.\nIf \"s\" is a correct bracket sequence with depth \n    d\n then \"(s)\" is a\ncorrect bracket sequence with depth \n    d + 1\n. If \"s\" and \"t\" are both\ncorrect bracket sequences then their concatenation \"st\" is a correct bracket\nsequence with depth equal to the maximum depth of \n    s\n and \n    t\n. For a\n(not necessarily correct) bracket sequence \n    s\n, we define its depth as the\nmaximum depth of any correct bracket sequence induced by removing some\ncharacters from \n    s\n (possibly zero). For example: the bracket sequence\n\n    s =\n\"())(())\" has depth \n    2\n, because by removing the third character\nwe obtain a correct bracket sequence \"()(())\" with depth \n    2\n. Given a\nstring \n    a\n consists of only characters '(', ')' and '?'. Consider all (not\nnecessarily correct) bracket sequences obtained by replacing all characters\n'?' in \n    a\n by either '(' or ')'. Calculate the sum of all the depths of\nall these bracket sequences. As this number can be large, find it modulo\n\n    998244353\n. Hacks in this problem in the first division can be done only\nif easy and hard versions of this problem was solved. Input The only line\ncontains a non-empty string consist of only '(', ')' and '?'. The length of\nthe string is at most \n    2000\n. Output Print the answer modulo\n\n    998244353\n in a single line. Examples Input ?? Output 1 Input (?(?))\nOutput 9 Note In the first test case, we can obtain \n    4\n bracket sequences\nby replacing all characters '?' with either '(' or ')': \"((\". Its depth is\n\n    0\n; \"))\". Its depth is \n    0\n; \")(\". Its depth is \n    0\n; \"()\". Its\ndepth is \n    1\n. So, the answer is \n    1 = 0 + 0 + 0 + 1\n. In the second\ntest case, we can obtain \n    4\n bracket sequences by replacing all characters\n'?' with either '(' or ')': \"(((())\". Its depth is \n    2\n; \"()()))\". Its\ndepth is \n    2\n; \"((()))\". Its depth is \n    3\n; \"()(())\". Its depth is\n\n    2\n. So, the answer is \n    9 = 2 + 2 + 3 + 2\n.\n\n",
        "cf_contest_id": 1264,
        "cf_index": "D1",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "dp",
            "probabilities"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "??\r\n",
                "1"
            ],
            [
                "(?(?))\r\n",
                "9"
            ]
        ],
        "private_cases": [
            [
                "?\r\n",
                "0"
            ],
            [
                "(\r\n",
                "0"
            ],
            [
                ")\r\n",
                "0"
            ],
            [
                "((\r\n",
                "0"
            ],
            [
                "))\r\n",
                "0"
            ],
            [
                "???\r\n",
                "4"
            ],
            [
                "(((\r\n",
                "0"
            ],
            [
                ")))\r\n",
                "0"
            ],
            [
                "????\r\n",
                "12"
            ],
            [
                "((((\r\n",
                "0"
            ],
            [
                "))))\r\n",
                "0"
            ],
            [
                "(?(??)))((\r\n",
                "24"
            ],
            [
                "(?(??)))(()?(???)(?((?(?()))(())?))?(?)))?)?)))?)?()(\r\n",
                "2123024"
            ],
            [
                "(?(??)))(()?(???)(?((?(?()))(())?))?(?)))?)?)))?)?()())??)?()?)??))?(()??)?()))()(???)())?(??)))((?())()(?\r\n",
                "359232022"
            ],
            [
                "??????????\r\n",
                "2304"
            ],
            [
                "?????????????????????????????????????????????????????\r\n",
                "872556218"
            ],
            [
                "??????????????????????????????????????????????????????????????????????????????????????????????????????????\r\n",
                "206662035"
            ],
            [
                "(?(??(?(((\r\n",
                "24"
            ],
            [
                "(?(??(?(((??(???((?((?(?((((((?(????(??(?????(????(((\r\n",
                "771290347"
            ],
            [
                "(?(??(?(((??(???((?((?(?((((((?(????(??(?????(????((((???(?(??(??(??(((????(?(((((????(???(??(??((?(?((?(?\r\n",
                "180818340"
            ],
            [
                ")?)??)?)))\r\n",
                "31"
            ],
            [
                ")?)??)?)))??)???))?))?)?))))))?)????)??)?????)????)))\r\n",
                "469179939"
            ],
            [
                ")?)??)?)))??)???))?))?)?))))))?)????)??)?????)????))))???)?)??)??)??)))????)?)))))????)???)??)??))?)?))?)?\r\n",
                "153019280"
            ],
            [
                ")?)??)?)((\r\n",
                "24"
            ],
            [
                ")?)??)?)((??(???)(?((?(?)???()??????(?????????????(?)\r\n",
                "543515623"
            ],
            [
                "(?\r\n",
                "1"
            ],
            [
                "?)\r\n",
                "1"
            ],
            [
                "(?)\r\n",
                "2"
            ],
            [
                "(??\r\n",
                "3"
            ],
            [
                "???)\r\n",
                "8"
            ],
            [
                ")?)??)?)((??(???)(?((?(?)???()??????(?????????????(?))???)?(??)?????()?????(?)?(?(????(???(??)??()?(??(?(?\r\n",
                "930560744"
            ]
        ]
    }
]