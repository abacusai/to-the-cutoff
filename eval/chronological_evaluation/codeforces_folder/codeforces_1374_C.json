[
    {
        "name": "Move Brackets",
        "description": "You are given a bracket sequence \n    s\n of length \n    n\n, where \n    n\n is\neven (divisible by two). The string \n    s\n consists of \n    n/2\n\nopening brackets '(' and \n    n/2\n closing brackets ')'. In one\nmove, you can choose exactly one bracket and move it to the beginning of the\nstring or to the end of the string (i.e. you choose some index \n    i\n, remove\nthe \n    i\n-th character of \n    s\n and insert it before or after all\nremaining characters of \n    s\n). Your task is to find the minimum number of\nmoves required to obtain regular bracket sequence from \n    s\n. It can be\nproved that the answer always exists under the given constraints. Recall what\nthe regular bracket sequence is: \"()\" is regular bracket sequence; if \n    s\n\nis regular bracket sequence then \"(\" + \n    s\n + \")\" is regular bracket\nsequence; if \n    s\n and \n    t\n are regular bracket sequences then \n    s\n +\n\n    t\n is regular bracket sequence. For example, \"()()\", \"(())()\", \"(())\" and\n\"()\" are regular bracket sequences, but \")(\", \"()(\" and \")))\" are not. You\nhave to answer \n    t\n independent test cases. Input The first line of the\ninput contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 2000\n) \u2014 the number\nof test cases. Then \n    t\n test cases follow. The first line of the test case\ncontains one integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 50\n) \u2014 the length of\n\n    s\n. It is guaranteed that \n    n\n is even. The second line of the test\ncase containg the string \n    s\n consisting of \n    n/2\n opening and\n\n    n/2\n closing brackets. Output For each test case, print the\nanswer \u2014 the minimum number of moves required to obtain regular bracket\nsequence from \n    s\n. It can be proved that the answer always exists under\nthe given constraints. Example Input 4 2 )( 4 ()() 8 ())()()( 10 )))((((())\nOutput 1 0 1 3 Note In the first test case of the example, it is sufficient to\nmove the first bracket to the end of the string. In the third test case of the\nexample, it is sufficient to move the last bracket to the beginning of the\nstring. In the fourth test case of the example, we can choose last three\nopenning brackets, move them to the beginning of the string and obtain\n\"((()))(())\".\n\n",
        "cf_contest_id": 1374,
        "cf_index": "C",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2\r\n)(\r\n4\r\n()()\r\n8\r\n())()()(\r\n10\r\n)))((((())\r\n",
                "1\r\n0\r\n1\r\n3\r\n"
            ]
        ],
        "private_cases": []
    }
]