[
    {
        "name": "Character Swap (Hard Version)",
        "description": "This problem is different from the easy version. In this version Ujan makes at\nmost \n    2n\n swaps. In addition, \n    k \n    \u2264 1000, n \n    \u2264 50\n and it is\nnecessary to print swaps themselves. You can hack this problem if you solve\nit. But you can hack the previous problem only if you solve both problems.\nAfter struggling and failing many times, Ujan decided to try to clean up his\nhouse again. He decided to get his strings in order first. Ujan has two\ndistinct strings \n    s\n and \n    t\n of length \n    n\n consisting of only of\nlowercase English characters. He wants to make them equal. Since Ujan is lazy,\nhe will perform the following operation at most \n    2n\n times: he takes two\npositions \n    i\n and \n    j\n (\n    1 \n    \u2264 i,j \n    \u2264 n\n, the values \n    i\n\nand \n    j\n can be equal or different), and swaps the characters \n    s_i\n and\n\n    t_j\n. Ujan's goal is to make the strings \n    s\n and \n    t\n equal. He\ndoes not need to minimize the number of performed operations: any sequence of\noperations of length \n    2n\n or shorter is suitable. Input The first line\ncontains a single integer \n    k\n (\n    1 \n    \u2264 k \n    \u2264 1000\n), the number\nof test cases. For each of the test cases, the first line contains a single\ninteger \n    n\n (\n    2 \n    \u2264 n \n    \u2264 50\n), the length of the strings\n\n    s\n and \n    t\n. Each of the next two lines contains the strings \n    s\n\nand \n    t\n, each having length exactly \n    n\n. The strings consist only of\nlowercase English letters. It is guaranteed that strings are different. Output\nFor each test case, output \"Yes\" if Ujan can make the two strings equal with\nat most \n    2n\n operations and \"No\" otherwise. You can print each letter in\nany case (upper or lower). In the case of \"Yes\" print \n    m\n (\n    1 \n    \u2264 m\n    \n    \u2264 2n\n) on the next line, where \n    m\n is the number of swap operations\nto make the strings equal. Then print \n    m\n lines, each line should contain\ntwo integers \n    i, j\n (\n    1 \n    \u2264 i, j \n    \u2264 n\n) meaning that Ujan swaps\n\n    s_i\n and \n    t_j\n during the corresponding operation. You do not need to\nminimize the number of operations. Any sequence of length not more than\n\n    2n\n is suitable. Example Input 4 5 souse houhe 3 cat dog 2 aa az 3 abc\nbca Output Yes 1 1 4 No No Yes 3 1 2 3 1 2 3\n\n",
        "cf_contest_id": 1243,
        "cf_index": "B2",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n5\r\nsouse\r\nhouhe\r\n3\r\ncat\r\ndog\r\n2\r\naa\r\naz\r\n3\r\nabc\r\nbca\r\n",
                "YES\r\n1\r\n4 1\r\nNO\r\nNO\r\nYES\r\n3\r\n3 3\r\n3 1\r\n3 2\r\n"
            ]
        ],
        "private_cases": []
    }
]