[
    {
        "name": "Serval and Rooted Tree",
        "description": "Now Serval is a junior high school student in Japari Middle School, and he is\nstill thrilled on math as before. As a talented boy in mathematics, he likes\nto play with numbers. This time, he wants to play with numbers on a rooted\ntree. A tree is a connected graph without cycles. A rooted tree has a special\nvertex called the root. A parent of a node \n    v\n is the last different from\n\n    v\n vertex on the path from the root to the vertex \n    v\n. Children of\nvertex \n    v\n are all nodes for which \n    v\n is the parent. A vertex is a\nleaf if it has no children. The rooted tree Serval owns has \n    n\n nodes,\nnode \n    1\n is the root. Serval will write some numbers into all nodes of the\ntree. However, there are some restrictions. Each of the nodes except leaves\nhas an operation \n    max\n or \n    min\n written in it, indicating that\nthe number in this node should be equal to the maximum or minimum of all the\nnumbers in its sons, respectively. Assume that there are \n    k\n leaves in the\ntree. Serval wants to put integers \n    1, 2, \n    \u2026, k\n to the \n    k\n\nleaves (each number should be used exactly once). He loves large numbers, so\nhe wants to maximize the number in the root. As his best friend, can you help\nhim? Input The first line contains an integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264\n    3\n    \u00b7 10^5\n), the size of the tree. The second line contains \n    n\n\nintegers, the \n    i\n-th of them represents the operation in the node \n    i\n.\n\n    0\n represents \n    min\n and \n    1\n represents \n    max\n. If the\nnode is a leaf, there is still a number of \n    0\n or \n    1\n, but you can\nignore it. The third line contains \n    n-1\n integers \n    f_2, f_3, \n    \u2026,\n    f_n\n (\n    1 \n    \u2264 f_i \n    \u2264 i-1\n), where \n    f_i\n represents the parent\nof the node \n    i\n. Output Output one integer \u2014 the maximum possible number\nin the root of the tree. Examples Input 6 1 0 1 1 0 1 1 2 2 2 2 Output 1 Input\n5 1 0 1 0 1 1 1 1 1 Output 4 Input 8 1 0 0 1 0 1 1 0 1 1 2 2 3 3 3 Output 4\nInput 9 1 1 0 0 1 0 1 0 1 1 1 2 2 3 3 4 4 Output 5 Note Pictures below explain\nthe examples. The numbers written in the middle of the nodes are their\nindices, and the numbers written on the top are the numbers written in the\nnodes. In the first example, no matter how you arrange the numbers, the answer\nis \n    1\n. In the second example, no matter how you arrange the numbers, the\nanswer is \n    4\n. In the third example, one of the best solution to achieve\n\n    4\n is to arrange \n    4\n and \n    5\n to nodes \n    4\n and \n    5\n. In the\nfourth example, the best solution is to arrange \n    5\n to node \n    5\n.\n\n",
        "cf_contest_id": 1153,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dfs and similar",
            "dp",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n1 0 1 1 0 1\r\n1 2 2 2 2\r\n",
                "1\r\n"
            ],
            [
                "5\r\n1 0 1 0 1\r\n1 1 1 1\r\n",
                "4\r\n"
            ],
            [
                "8\r\n1 0 0 1 0 1 1 0\r\n1 1 2 2 3 3 3\r\n",
                "4\r\n"
            ],
            [
                "9\r\n1 1 0 0 1 0 1 0 1\r\n1 1 2 2 3 3 4 4\r\n",
                "5\r\n"
            ]
        ],
        "private_cases": [
            [
                "100\r\n0 1 0 0 1 0 1 0 0 0 0 0 1 0 0 1 1 1 1 0 0 1 0 1 1 0 1 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 0 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1 1 0 0 0 1\r\n1 2 3 4 2 6 5 5 4 8 10 8 1 14 5 16 3 11 13 11 12 8 11 22 8 17 19 5 15 27 14 13 12 4 6 2 10 25 36 14 16 14 19 15 37 12 45 39 34 48 18 3 4 23 1 14 39 26 22 43 17 17 16 27 24 53 57 25 21 55 12 63 12 34 4 2 54 34 5 61 72 10 83 5 28 77 61 40 18 87 21 43 3 9 15 81 70 56 65\r\n",
                "42\r\n"
            ],
            [
                "2\r\n1 0\r\n1\r\n",
                "1\r\n"
            ]
        ]
    }
]