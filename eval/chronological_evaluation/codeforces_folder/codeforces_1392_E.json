[
    {
        "name": "Omkar and Duck",
        "description": "This is an interactive problem. Omkar has just come across a duck! The duck is\nwalking on a grid with \n    n\n rows and \n    n\n columns (\n    2 \n    \u2264 n \n    \u2264\n    25\n) so that the grid contains a total of \n    n^2\n cells. Let's denote by\n\n    (x, y)\n the cell in the \n    x\n-th row from the top and the \n    y\n-th\ncolumn from the left. Right now, the duck is at the cell \n    (1, 1)\n (the\ncell in the top left corner) and would like to reach the cell \n    (n, n)\n\n(the cell in the bottom right corner) by moving either down \n    1\n cell or to\nthe right \n    1\n cell each second. Since Omkar thinks ducks are fun, he wants\nto play a game with you based on the movement of the duck. First, for each\ncell \n    (x, y)\n in the grid, you will tell Omkar a nonnegative integer\n\n    a_x,y\n not exceeding \n    10^16\n, and Omkar will then put\n\n    a_x,y\n uninteresting problems in the cell \n    (x, y)\n. After that, the\nduck will start their journey from \n    (1, 1)\n to \n    (n, n)\n. For each cell\n\n    (x, y)\n that the duck crosses during their journey (including the cells\n\n    (1, 1)\n and \n    (n, n)\n), the duck will eat the \n    a_x,y\n\nuninteresting problems in that cell. Once the duck has completed their\njourney, Omkar will measure their mass to determine the total number \n    k\n\nof uninteresting problems that the duck ate on their journey, and then tell\nyou \n    k\n. Your challenge, given \n    k\n, is to exactly reproduce the duck's\npath, i. e. to tell Omkar precisely which cells the duck crossed on their\njourney. To be sure of your mastery of this game, Omkar will have the duck\ncomplete \n    q\n different journeys (\n    1 \n    \u2264 q \n    \u2264 10^3\n). Note that\nall journeys are independent: at the beginning of each journey, the cell\n\n    (x, y)\n will still contain \n    a_x,y\n uninteresting tasks. Interaction\nThe interaction will begin with a line containing a single integer \n    n\n\n(\n    2 \n    \u2264 n \n    \u2264 25\n), the amount of rows and columns in the grid. Read\nit. Your program should then print \n    n\n lines. The \n    x\n-th line should\ncontain \n    n\n integers \n    a_x,1, a_x,2, \n    \u2026, a_x,n\n satisfying\n\n    0 \n    \u2264 a_x,y\n    \u2264 10^16\n, where \n    a_x,y\n is the amount of\nuninteresting problems Omkar should place in the cell \n    (x, y)\n. After\nthat, you will first receive a single integer \n    q\n, the amount of journeys\nthat the duck will take. \n    q\n queries will follow; each query will consist\nof a single line containing an integer \n    k\n, the amount of uninteresting\nproblems that the duck ate on that journey. After each query, given that you\nhave determined that the duck visited the cells \n    (x_1, y_1), (x_2, y_2),\n    \n    \u2026, (x_2n - 1, y_2n - 1)\n in that order (it should always be true\nthat \n    (x_1, y_1) = (1, 1)\n and \n    (x_2n - 1, y_2n - 1) = (n, n)\n),\nyou should output \n    2n - 1\n lines so that the \n    j\n-th line contains the\ntwo integers \n    x_j, y_j\n. Bear in mind that if the sum on your path is\n\n    k\n, but your path is different from the actual hidden path, then your\nsolution is still wrong! After printing each line do not forget to output end\nof line and flush the output. Otherwise, you will get Idleness limit exceeded.\nTo do this, use: fflush(stdout) or cout.flush() in C++; System.out.flush() in\nJava; flush(output) in Pascal; stdout.flush() in Python; see documentation for\nother languages.Hack Format To hack, first output a line containing \n    n\n\nand another line containing \n    q\n. It must be true that \n    2 \n    \u2264 n \n    \u2264\n    25\n and \n    1 \n    \u2264 q \n    \u2264 1000\n. Then, output the \n    q\n journeys\ntaken by the duck in the same format as described above: for each journey,\ngiven that the duck visited the cells \n    (x_1, y_1), (x_2, y_2), \n    \u2026,\n    (x_2n - 1, y_2n - 1)\n in that order, you should output \n    2n - 1\n\nlines so that the \n    j\n-th line contains the two integers \n    x_j, y_j\n. It\nmust be true that \n    (x_1, y_1) = (1, 1)\n and \n    (x_2n - 1, y_2n - 1) =\n    (n, n)\n. Additionally, for each \n    j\n such that \n    2 \n    \u2264 j \n    \u2264 2n -\n    1\n, it must be true that \n    1 \n    \u2264 x_j, y_j \n    \u2264 n\n and either\n\n    (x_j, y_j) = (x_j - 1 + 1, y_j - 1)\n or \n    (x_j, y_j) = (x_j - 1,\n    y_j - 1 + 1)\n. Example Input 4 3 23 26 27 Output 1 2 3 6 4 6 2 10 9 0 7 3\n2 8 8 2 1 1 1 2 1 3 2 3 2 4 3 4 4 4 1 1 2 1 3 1 3 2 3 3 3 4 4 4 1 1 1 2 1 3 1\n4 2 4 3 4 4 4 Note The duck's three journeys are illustrated below. \n    1 + 2 +\n    3 + 2 + 10 + 3 + 2 = 23\n \n    1 + 4 + 9 + 0 + 7 + 3 + 2 = 26\n \n    1 + 2 + 3 +\n    6 + 10 + 3 + 2 = 27\n\n\n",
        "cf_contest_id": 1392,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "constructive algorithms",
            "interactive",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3\r\n1 1\r\n1 2\r\n1 3\r\n2 3\r\n2 4\r\n3 4\r\n4 4\r\n1 1\r\n2 1\r\n3 1\r\n3 2\r\n3 3\r\n3 4\r\n4 4\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n2 4\r\n3 4\r\n4 4\r\n",
                "4\r\n0 0 0 0\r\n4 8 16 32\r\n0 0 0 0\r\n16 32 64 128\r\n3\r\n176\r\n1 1\r\n1 2\r\n1 3\r\n2 3\r\n2 4\r\n3 4\r\n4 4\r\n132\r\n1 1\r\n2 1\r\n3 1\r\n3 2\r\n3 3\r\n3 4\r\n4 4\r\n160\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n2 4\r\n3 4\r\n4 4\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n2\r\n1 1\r\n2 1\r\n2 2\r\n1 1\r\n1 2\r\n2 2\r\n",
                "2\r\n0 0\r\n4 8\r\n2\r\n12\r\n1 1\r\n2 1\r\n2 2\r\n8\r\n1 1\r\n1 2\r\n2 2\r\n"
            ],
            [
                "3\r\n6\r\n1 1\r\n1 2\r\n2 2\r\n2 3\r\n3 3\r\n1 1\r\n1 2\r\n1 3\r\n2 3\r\n3 3\r\n1 1\r\n1 2\r\n2 2\r\n3 2\r\n3 3\r\n1 1\r\n2 1\r\n2 2\r\n2 3\r\n3 3\r\n1 1\r\n2 1\r\n3 1\r\n3 2\r\n3 3\r\n1 1\r\n2 1\r\n2 2\r\n3 2\r\n3 3\r\n",
                "3\r\n0 0 0\r\n4 8 16\r\n0 0 0\r\n6\r\n24\r\n1 1\r\n1 2\r\n2 2\r\n2 3\r\n3 3\r\n16\r\n1 1\r\n1 2\r\n1 3\r\n2 3\r\n3 3\r\n8\r\n1 1\r\n1 2\r\n2 2\r\n3 2\r\n3 3\r\n28\r\n1 1\r\n2 1\r\n2 2\r\n2 3\r\n3 3\r\n4\r\n1 1\r\n2 1\r\n3 1\r\n3 2\r\n3 3\r\n12\r\n1 1\r\n2 1\r\n2 2\r\n3 2\r\n3 3\r\n"
            ],
            [
                "2\r\n1\r\n1 1\r\n2 1\r\n2 2\r\n",
                "2\r\n0 0\r\n4 8\r\n1\r\n12\r\n1 1\r\n2 1\r\n2 2\r\n"
            ]
        ]
    }
]