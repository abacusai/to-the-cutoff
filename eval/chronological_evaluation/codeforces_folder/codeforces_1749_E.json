[
    {
        "name": "Cactus Wall",
        "description": "Monocarp is playing Minecraft and wants to build a wall of cacti. He wants to\nbuild it on a field of sand of the size of \n    n \n    \u00d7 m\n cells.\nInitially, there are cacti in some cells of the field. Note that, in\nMinecraft, cacti cannot grow on cells adjacent to each other by side \u2014 and the\ninitial field meets this restriction. Monocarp can plant new cacti (they must\nalso fulfil the aforementioned condition). He can't chop down any of the cacti\nthat are already growing on the field \u2014 he doesn't have an axe, and the cacti\nare too prickly for his hands. Monocarp believes that the wall is complete if\nthere is no path from the top row of the field to the bottom row, such that:\neach two consecutive cells in the path are adjacent by side; no cell belonging\nto the path contains a cactus. Your task is to plant the minimum number of\ncacti to build a wall (or to report that this is impossible). Input The first\nline contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^3\n) \u2014 number\nof test cases. The first line of each test case contains two integers \n    n\n\nand \n    m\n (\n    2 \n    \u2264 n, m \n    \u2264 2 \n    \u00b7 10^5\n; \n    n \n    \u00d7 m \n    \u2264 4\n    \n    \u00b7 10^5\n) \u2014 the number of rows and columns, respectively. Then \n    n\n\nrows follow, \n    i\n-th row contains a string \n    s_i\n of length \n    m\n,\nwhere \n    s_i, j\n is '#', if a cactus grows at the intersection of the\n\n    i\n-th row and the \n    j\n-th column. Otherwise, \n    s_i, j\n is '.'.\nThe sum of \n    n \n    \u00d7 m\n over all test cases does not exceed \n    4 \n    \u00b7\n    10^5\n. Output For each test case, print NO in the first line if it is\nimpossible to build a cactus wall without breaking the rules. Otherwise, print\nYES in the first line, then print \n    n\n lines of \n    m\n characters each \u2014\nthe field itself, where the \n    j\n-th character of the \n    i\n-th line is\nequal to '#', if there is a cactus on the intersection of the \n    i\n-th row\nand the \n    j\n-th column, otherwise it is '.'. If there are multiple optimal\nanswers, print any of them. Example Input 4 2 4 .#.. ..#. 3 3 #.# ... .#. 5 5\n..... ..... ..... ..... ..... 4 3 #.. .#. #.# ... Output YES .#.# #.#. NO YES\n....# ...#. ..#.. .#... #.... YES #.. .#. #.# ...\n\n",
        "cf_contest_id": 1749,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs",
            "shortest paths"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2 4\r\n.#..\r\n..#.\r\n3 3\r\n#.#\r\n...\r\n.#.\r\n5 5\r\n.....\r\n.....\r\n.....\r\n.....\r\n.....\r\n4 3\r\n#..\r\n.#.\r\n#.#\r\n...\r\n",
                "YES\r\n.#.#\r\n#.#.\r\nNO\r\nYES\r\n#...#\r\n.#.#.\r\n..#..\r\n.....\r\n.....\r\nYES\r\n#..\r\n.#.\r\n#.#\r\n...\r\n"
            ]
        ],
        "private_cases": []
    }
]