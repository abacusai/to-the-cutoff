[
    {
        "name": "Social Distance",
        "description": "\n    m\n chairs are arranged in a circle sequentially. The chairs are numbered\nfrom \n    0\n to \n    m-1\n. \n    n\n people want to sit in these chairs. The\n\n    i\n-th of them wants at least \n    a[i]\n empty chairs both on his right\nand left side. More formally, if the \n    i\n-th person sits in the \n    j\n-th\nchair, then no one else should sit in the following chairs: \n    (j-a[i])\n    \n     m\n, \n    (j-a[i]+1) \n     m\n, ... \n    (j+a[i]-1) \n     m\n,\n\n    (j+a[i]) \n     m\n. Decide if it is possible to sit down for all of\nthem, under the given limitations. Input The input consists of multiple test\ncases. The first line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    5 \n    \u00b7 10^4\n) \u2014 the number of test cases. The description of the test\ncases follows. The first line of each test case contains two integers \n    n\n\nand \n    m\n (\n    2 \n    \u2264 n \n    \u2264 10^5\n, \n    1 \n    \u2264 m \n    \u2264 10^9\n) \u2014 the\nnumber of people and the number of chairs. The next line contains \n    n\n\nintegers, \n    a_1\n, \n    a_2\n, ... \n    a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n)\n\u2014 the minimum number of empty chairs, on both sides of the \n    i\n-th person.\nIt is guaranteed that the sum of \n    n\n over all test cases will not exceed\n\n    10^5\n. Output For each test case print \"YES\" (without quotes) if it is\npossible for everyone to sit down and fulfil the restrictions, and \"NO\"\n(without quotes) otherwise. You may print every letter in any case you want\n(so, for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will all be\nrecognized as positive answers). Example Input 6 3 2 1 1 1 2 4 1 1 2 5 2 1 3 8\n1 2 1 4 12 1 2 1 3 4 19 1 2 1 3 Output NO YES NO YES NO YES Note Test case\n\n    1\n: \n    n>m\n, so they can not sit down. Test case \n    2\n: the first\nperson can sit \n    2\n-nd and the second person can sit in the \n    0\n-th\nchair. Both of them want at least \n    1\n empty chair on both sides, chairs\n\n    1\n and \n    3\n are free, so this is a good solution. Test case \n    3\n:\nif the second person sits down somewhere, he needs \n    2\n empty chairs, both\non his right and on his left side, so it is impossible to find a place for the\nfirst person, because there are only \n    5\n chairs. Test case \n    4\n: they\ncan sit in the \n    1\n-st, \n    4\n-th, \n    7\n-th chairs respectively.\n\n",
        "cf_contest_id": 1668,
        "cf_index": "B",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 1.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n3 2\r\n1 1 1\r\n2 4\r\n1 1\r\n2 5\r\n2 1\r\n3 8\r\n1 2 1\r\n4 12\r\n1 2 1 3\r\n4 19\r\n1 2 1 3\r\n",
                "NO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\n"
            ]
        ],
        "private_cases": []
    }
]