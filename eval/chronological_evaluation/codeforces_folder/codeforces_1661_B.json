[
    {
        "name": "Getting Zero",
        "description": "Suppose you have an integer \n    v\n. In one operation, you can: either set\n\n    v = (v + 1) \n     32768\n or set \n    v = (2 \n    \u00b7 v) \n     32768\n.\nYou are given \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n. What is the\nminimum number of operations you need to make each \n    a_i\n equal to \n    0\n?\nInput The first line contains the single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    32768\n) \u2014 the number of integers. The second line contains \n    n\n integers\n\n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i < 32768\n). Output Print \n    n\n\nintegers. The \n    i\n-th integer should be equal to the minimum number of\noperations required to make \n    a_i\n equal to \n    0\n. Example Input 4 19\n32764 10240 49 Output 14 4 4 15 Note Let's consider each \n    a_i\n: \n    a_1 =\n    19\n. You can, firstly, increase it by one to get \n    20\n and then multiply\nit by two \n    13\n times. You'll get \n    0\n in \n    1 + 13 = 14\n steps.\n\n    a_2 = 32764\n. You can increase it by one \n    4\n times: \n    32764\n    \n    \u2192 32765 \n    \u2192 32766 \n    \u2192 32767 \n    \u2192\n    0\n. \n    a_3 = 10240\n. You can multiply it by two \n    4\n times: \n    10240\n    \n    \u2192 20480 \n    \u2192 8192 \n    \u2192 16384 \n    \u2192 0\n.\n\n    a_4 = 49\n. You can multiply it by two \n    15\n times.\n\n",
        "cf_contest_id": 1661,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "dfs and similar",
            "dp",
            "graphs",
            "greedy",
            "shortest paths"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n19 32764 10240 49\r\n",
                "14\r\n4\r\n4\r\n15\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n32767\r\n",
                "1\r\n"
            ],
            [
                "3\r\n1415 9265 3589\r\n",
                "13\r\n15\r\n15\r\n"
            ]
        ]
    }
]