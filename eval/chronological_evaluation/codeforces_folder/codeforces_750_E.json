[
    {
        "name": "New Year and Old Subsequence",
        "description": "A string t is called nice if a string \"2017\" occurs in t as a subsequence but\na string \"2016\" doesn't occur in t as a subsequence. For example, strings\n\"203434107\" and \"9220617\" are nice, while strings \"20016\", \"1234\" and \"20167\"\naren't nice. The ugliness of a string is the minimum possible number of\ncharacters to remove, in order to obtain a nice string. If it's impossible to\nmake a string nice by removing characters, its ugliness is - 1. Limak has a\nstring s of length n, with characters indexed 1 through n. He asks you q\nqueries. In the i-th query you should compute and print the ugliness of a\nsubstring (continuous subsequence) of s starting at the index ai and ending at\nthe index bi (inclusive). Input The first line of the input contains two\nintegers n and q (4 \u2264 n \u2264 200 000, 1 \u2264 q \u2264 200 000) \u2014 the length of the string\ns and the number of queries respectively. The second line contains a string s\nof length n. Every character is one of digits '0'\u2013'9'. The i-th of next q\nlines contains two integers ai and bi (1 \u2264 ai \u2264 bi \u2264 n), describing a\nsubstring in the i-th query. Output For each query print the ugliness of the\ngiven substring. Examples Input 8 3 20166766 1 8 1 7 2 8 Output 4 3 -1 Input\n15 5 012016662091670 3 4 1 14 4 15 1 13 10 15 Output -1 2 1 -1 -1 Input 4 2\n1234 2 4 1 2 Output -1 -1 Note In the first sample: In the first query,\nugliness(\"20166766\") = 4 because all four sixes must be removed. In the second\nquery, ugliness(\"2016676\") = 3 because all three sixes must be removed. In the\nthird query, ugliness(\"0166766\") = - 1 because it's impossible to remove some\ndigits to get a nice string. In the second sample: In the second query,\nugliness(\"01201666209167\") = 2. It's optimal to remove the first digit '2' and\nthe last digit '6', what gives a string \"010166620917\", which is nice. In the\nthird query, ugliness(\"016662091670\") = 1. It's optimal to remove the last\ndigit '6', what gives a nice string \"01666209170\".\n\n",
        "cf_contest_id": 750,
        "cf_index": "E",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "divide and conquer",
            "dp",
            "matrices"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8 3\r\n20166766\r\n1 8\r\n1 7\r\n2 8\r\n",
                "4\r\n3\r\n-1\r\n"
            ],
            [
                "15 5\r\n012016662091670\r\n3 4\r\n1 14\r\n4 15\r\n1 13\r\n10 15\r\n",
                "-1\r\n2\r\n1\r\n-1\r\n-1\r\n"
            ],
            [
                "4 2\r\n1234\r\n2 4\r\n1 2\r\n",
                "-1\r\n-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "50 15\r\n77767912070178428778417181176820131402667011621621\r\n8 30\r\n31 37\r\n35 36\r\n17 44\r\n23 49\r\n26 43\r\n9 46\r\n5 47\r\n13 42\r\n5 45\r\n29 47\r\n5 16\r\n16 45\r\n5 48\r\n31 35\r\n",
                "1\r\n-1\r\n-1\r\n2\r\n4\r\n2\r\n3\r\n4\r\n2\r\n4\r\n3\r\n0\r\n3\r\n5\r\n-1\r\n"
            ],
            [
                "4 1\r\n2016\r\n1 4\r\n",
                "-1\r\n"
            ],
            [
                "4 3\r\n2017\r\n1 4\r\n2 3\r\n1 4\r\n",
                "0\r\n-1\r\n0\r\n"
            ],
            [
                "4 2\r\n7777\r\n2 4\r\n1 4\r\n",
                "-1\r\n-1\r\n"
            ],
            [
                "77 10\r\n67000649361200066615616666666723276661666636666268067606676277692070666666205\r\n20 56\r\n52 64\r\n2 59\r\n16 63\r\n7 10\r\n3 35\r\n29 72\r\n34 58\r\n9 41\r\n33 47\r\n",
                "-1\r\n-1\r\n16\r\n-1\r\n-1\r\n9\r\n-1\r\n-1\r\n14\r\n-1\r\n"
            ]
        ]
    }
]