[
    {
        "name": "Bicolored Segments",
        "description": "You are given \n    n\n segments \n    [l_1, r_1], [l_2, r_2], \n    \u2026, [l_n,\n    r_n]\n. Each segment has one of two colors: the \n    i\n-th segment's color is\n\n    t_i\n. Let's call a pair of segments \n    i\n and \n    j\n bad if the\nfollowing two conditions are met: \n    t_i \n     t_j\n; the segments \n    [l_i,\n    r_i]\n and \n    [l_j, r_j]\n intersect, embed or touch, i. e. there exists an\ninteger \n    x\n such that \n    x \n    \u2208 [l_i, r_i]\n and \n    x \n    \u2208 [l_j,\n    r_j]\n. Calculate the maximum number of segments that can be selected from\nthe given ones, so that there is no bad pair among the selected ones. Input\nThe first line contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7\n    10^5\n) \u2014 number of segments. The next \n    n\n lines contains three integers\n\n    l_i, r_i, t_i\n (\n    1 \n    \u2264 l_i \n    \u2264 r_i \n    \u2264 10^9; t_i \n    \u2208\n    \n    1,\n    2\n) \u2014 description of the \n    i\n-th segment. Output Print the maximum\nnumber of segments that can be selected, so that there is no bad pair among\nthe selected segments. Examples Input 3 1 3 1 4 6 2 2 5 1 Output 2 Input 5 5 8\n1 1 3 2 3 4 2 6 6 1 2 10 2 Output 4 Input 7 19 20 1 13 15 2 6 11 2 4 10 1 14\n17 1 13 13 2 5 9 1 Output 5\n\n",
        "cf_contest_id": 1389,
        "cf_index": "F",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp",
            "graph matchings",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 3 1\r\n4 6 2\r\n2 5 1\r\n",
                "2\r\n"
            ],
            [
                "5\r\n5 8 1\r\n1 3 2\r\n3 4 2\r\n6 6 1\r\n2 10 2\r\n",
                "4\r\n"
            ],
            [
                "7\r\n19 20 1\r\n13 15 2\r\n6 11 2\r\n4 10 1\r\n14 17 1\r\n13 13 2\r\n5 9 1\r\n",
                "5\r\n"
            ]
        ],
        "private_cases": [
            [
                "12\r\n1 2 2\r\n6 7 2\r\n2 4 1\r\n3 7 2\r\n5 5 2\r\n1 5 1\r\n2 2 1\r\n4 7 2\r\n3 6 1\r\n4 6 2\r\n2 5 1\r\n4 6 1\r\n",
                "6\r\n"
            ],
            [
                "11\r\n7 12 2\r\n5 11 1\r\n1 13 1\r\n12 12 2\r\n6 10 2\r\n9 11 1\r\n8 11 1\r\n2 6 1\r\n2 10 1\r\n5 6 2\r\n1 4 2\r\n",
                "6\r\n"
            ],
            [
                "13\r\n3 7 2\r\n7 7 2\r\n5 12 2\r\n1 8 1\r\n10 12 1\r\n3 7 1\r\n10 12 1\r\n11 13 2\r\n2 3 2\r\n11 12 1\r\n1 12 2\r\n11 13 1\r\n9 11 1\r\n",
                "8\r\n"
            ],
            [
                "10\r\n1 20 1\r\n11 17 2\r\n3 15 2\r\n3 9 2\r\n3 14 1\r\n16 18 2\r\n6 9 2\r\n13 17 2\r\n10 17 2\r\n7 13 1\r\n",
                "7\r\n"
            ]
        ]
    }
]