[
    {
        "name": "Set Merging",
        "description": "You are given a permutation \n    a_1, a_2, \n    \u2026, a_n\n of numbers from\n\n    1\n to \n    n\n. Also, you have \n    n\n sets \n    S_1,S_2,\n    \u2026, S_n\n,\nwhere \n    S_i=\n    \n    a_i\n. Lastly, you have a variable \n    cnt\n,\nrepresenting the current number of sets. Initially, \n    cnt = n\n. We define\ntwo kinds of functions on sets: \n    f(S)=\n    min\n    _u\n    \u2208 S u\n;\n\n    g(S)=\n    max\n    _u\n    \u2208 S u\n. You can obtain a new set by merging\ntwo sets \n    A\n and \n    B\n, if they satisfy \n    g(A)<f(B)\n (Notice that the\nold sets do not disappear). Formally, you can perform the following sequence\nof operations: \n    cnt\n     cnt+1\n; \n    S_cnt=S_u\n    \u222a S_v\n, you are\nfree to choose \n    u\n and \n    v\n for which \n    1\n    \u2264 u, v < cnt\n and which\nsatisfy \n    g(S_u)<f(S_v)\n. You are required to obtain some specific sets.\nThere are \n    q\n requirements, each of which contains two integers\n\n    l_i\n,\n    r_i\n, which means that there must exist a set \n    S_k_i\n\n(\n    k_i\n is the ID of the set, you should determine it) which equals\n\n    a_u\n    | l_i\n    \u2264 u\n    \u2264 r_i\n, which is, the set consisting\nof all \n    a_i\n with indices between \n    l_i\n and \n    r_i\n. In the end you\nmust ensure that \n    cnt\n    \u2264 2.2\n    \u00d7 10^6\n. Note that you don't have to\nminimize \n    cnt\n. It is guaranteed that a solution under given constraints\nexists. Input The first line contains two integers \n    n,q\n \n    (1\n    \u2264 n\n    \n    \u2264 2^12,1 \n    \u2264 q \n    \u2264 2^16)\n \u2014 the length of the permutation and\nthe number of needed sets correspondently. The next line consists of \n    n\n\nintegers \n    a_1,a_2,\n    \u22ef, a_n\n (\n    1\n    \u2264 a_i\n    \u2264 n\n, \n    a_i\n are\npairwise distinct) \u2014 given permutation. \n    i\n-th of the next \n    q\n lines\ncontains two integers \n    l_i,r_i\n \n    (1\n    \u2264 l_i\n    \u2264 r_i\n    \u2264 n)\n,\ndescribing a requirement of the \n    i\n-th set. Output It is guaranteed that a\nsolution under given constraints exists. The first line should contain one\ninteger \n    cnt_E\n \n    (n\n    \u2264 cnt_E\n    \u2264 2.2\n    \u00d7 10^6)\n, representing\nthe number of sets after all operations. \n    cnt_E-n\n lines must follow, each\nline should contain two integers \n    u\n, \n    v\n (\n    1\n    \u2264 u, v\n    \u2264\n    cnt'\n, where \n    cnt'\n is the value of \n    cnt\n before this operation),\nmeaning that you choose \n    S_u\n, \n    S_v\n and perform a merging operation.\nIn an operation, \n    g(S_u)<f(S_v)\n must be satisfied. The last line should\ncontain \n    q\n integers \n    k_1,k_2,\n    \u22ef,k_q\n \n    (1\n    \u2264 k_i\n    \u2264\n    cnt_E)\n, representing that set \n    S_k_i\n is the \n    i\nth required set.\nPlease notice the large amount of output. Examples Input 3 2 1 3 2 2 3 1 3\nOutput 6 3 2 1 3 5 2 4 6 Input 2 4 2 1 1 2 1 2 1 2 1 1 Output 5 2 1 2 1 2 1 5\n3 3 1 Note In the first sample: We have\n\n    S_1=\n    \n    1\n    \n    ,S_2=\n    \n    3\n    \n    ,S_3=\n    \n    2\n initially. In the first\noperation, because \n    g(S_3)=2<f(S_2)=3\n, we can merge \n    S_3,S_2\n into\n\n    S_4=\n    \n    2,3\n. In the second operation, because\n\n    g(S_1)=1<f(S_3)=2\n, we can merge \n    S_1,S_3\n into\n\n    S_5=\n    \n    1,2\n. In the third operation, because\n\n    g(S_5)=2<f(S_2)=3\n, we can merge \n    S_5,S_2\n into\n\n    S_6=\n    \n    1,2,3\n. For the first requirement,\n\n    S_4=\n    \n    2,3\n    \n    =\n    \n    a_2,a_3\n, satisfies it, thus \n    k_1=4\n. For\nthe second requirement, \n    S_6=\n    \n    1,2,3\n    \n    =\n    \n    a_1,a_2,a_3\n,\nsatisfies it, thus \n    k_2=6\n Notice that unused sets, identical sets,\noutputting the same set multiple times, and using sets that are present\ninitially are all allowed.\n\n",
        "cf_contest_id": 1375,
        "cf_index": "H",
        "cf_rating": 3300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "divide and conquer"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2\r\n1 3 2\r\n2 3\r\n1 3\r\n",
                "6\r\n3 2\r\n1 3\r\n5 2\r\n4 6 "
            ],
            [
                "2 4\r\n2 1\r\n1 2\r\n1 2\r\n1 2\r\n1 1\r\n",
                "3\r\n2 1\r\n3 3 3 1 "
            ]
        ],
        "private_cases": [
            [
                "4 4\r\n1 2 4 3\r\n2 4\r\n1 2\r\n4 4\r\n1 2\r\n",
                "7\r\n4 3\r\n2 5\r\n1 2\r\n6 7 4 7 "
            ],
            [
                "7 7\r\n6 5 1 3 2 7 4\r\n3 5\r\n6 7\r\n1 6\r\n2 5\r\n4 5\r\n1 7\r\n2 6\r\n",
                "20\r\n3 5\r\n8 4\r\n7 6\r\n2 1\r\n11 6\r\n9 12\r\n9 2\r\n5 4\r\n4 7\r\n8 16\r\n17 12\r\n2 6\r\n9 19\r\n9 10 13 14 15 18 20 "
            ],
            [
                "1 3\r\n1\r\n1 1\r\n1 1\r\n1 1\r\n",
                "1\r\n1 1 1 "
            ],
            [
                "2 2\r\n2 1\r\n2 2\r\n1 2\r\n",
                "3\r\n2 1\r\n2 3 "
            ],
            [
                "2 3\r\n1 2\r\n1 1\r\n1 1\r\n1 1\r\n",
                "2\r\n1 1 1 "
            ],
            [
                "3 1\r\n3 2 1\r\n1 1\r\n",
                "3\r\n1 "
            ],
            [
                "3 2\r\n3 2 1\r\n1 2\r\n1 3\r\n",
                "6\r\n2 1\r\n3 2\r\n5 1\r\n4 6 "
            ],
            [
                "1 1\r\n1\r\n1 1\r\n",
                "1\r\n1 "
            ],
            [
                "2 1\r\n2 1\r\n2 2\r\n",
                "2\r\n2 "
            ],
            [
                "1 2\r\n1\r\n1 1\r\n1 1\r\n",
                "1\r\n1 1 "
            ],
            [
                "3 3\r\n3 1 2\r\n1 3\r\n2 3\r\n1 2\r\n",
                "6\r\n2 3\r\n4 1\r\n2 1\r\n5 4 6 "
            ]
        ]
    }
]