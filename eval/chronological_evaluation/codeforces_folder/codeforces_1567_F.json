[
    {
        "name": "One-Four Overload",
        "description": "Alice has an empty grid with \n    n\n rows and \n    m\n columns. Some of the\ncells are marked, and no marked cells are adjacent to the edge of the grid.\n(Two squares are adjacent if they share a side.) Alice wants to fill each cell\nwith a number such that the following statements are true: every unmarked cell\ncontains either the number \n    1\n or \n    4\n; every marked cell contains the\nsum of the numbers in all unmarked cells adjacent to it (if a marked cell is\nnot adjacent to any unmarked cell, this sum is \n    0\n); every marked cell\ncontains a multiple of \n    5\n. Alice couldn't figure it out, so she asks Bob\nto help her. Help Bob find any such grid, or state that no such grid exists.\nInput The first line of input contains two integers \n    n\n and \n    m\n (\n    1\n    \n    \u2264 n, m \n    \u2264 500\n) \u2014 the number of rows and the number of columns in\nthe grid, respectively. Then \n    n\n lines follow, each containing \n    m\n\ncharacters. Each of these characters is either '.' or 'X' \u2014 an unmarked and a\nmarked cell, respectively. No marked cells are adjacent to the edge of the\ngrid. Output Output \"'NO\" if no suitable grid exists. Otherwise, output\n\"'YES\"'. Then output \n    n\n lines of \n    m\n space-separated integers \u2014 the\nintegers in the grid. Examples Input 5 5 ..... .XXX. .X.X. .XXX. ..... Output\nYES 4 1 4 4 1 4 5 5 5 1 4 5 1 5 4 1 5 5 5 4 1 4 4 1 4 Input 5 5 ..... .XXX.\n.XXX. .XXX. ..... Output NO Input 3 2 .. .. .. Output YES 4 1 4 1 1 4 Input 9\n9 ......... .XXXXX.X. .X...X... .X.XXXXX. .X.X.X.X. .X.XXX.X. .X.....X.\n.XXXXXXX. ......... Output YES 4 4 4 1 4 1 4 1 4 1 5 5 5 5 5 4 10 1 4 5 1 4 1\n5 4 4 4 4 5 1 5 5 0 5 5 1 4 5 1 5 4 5 1 5 4 4 5 1 5 5 5 4 5 1 1 5 4 4 1 1 4 5\n1 4 5 5 5 5 5 5 5 4 1 1 1 1 4 4 1 1 4 Note It can be shown that no such grid\nexists for the second test.\n\n",
        "cf_contest_id": 1567,
        "cf_index": "F",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "2-sat",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 5\r\n.....\r\n.XXX.\r\n.X.X.\r\n.XXX.\r\n.....\r\n",
                "YES\r\n1 4 1 4 1\r\n1 5 5 5 1\r\n1 5 4 5 1\r\n1 5 5 5 1\r\n1 4 1 4 1\r\n"
            ],
            [
                "5 5\r\n.....\r\n.XXX.\r\n.XXX.\r\n.XXX.\r\n.....\r\n",
                "NO"
            ],
            [
                "3 2\r\n..\r\n..\r\n..\r\n",
                "YES\r\n1 4\r\n1 4\r\n1 4\r\n"
            ],
            [
                "9 9\r\n.........\r\n.XXXXX.X.\r\n.X...X...\r\n.X.XXXXX.\r\n.X.X.X.X.\r\n.X.XXX.X.\r\n.X.....X.\r\n.XXXXXXX.\r\n.........\r\n",
                "YES\r\n1 4 1 4 1 4 1 4 1\r\n1 5 5 5 5 5 1 10 1\r\n1 5 4 1 4 5 1 4 1\r\n1 5 4 5 5 0 5 5 1\r\n1 5 4 5 1 5 4 5 1\r\n1 5 4 5 5 5 4 5 1\r\n1 5 4 1 4 1 4 5 1\r\n1 5 5 5 5 5 5 5 1\r\n1 4 1 4 1 4 1 4 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n.\r\n",
                "YES\r\n1\r\n"
            ]
        ]
    }
]