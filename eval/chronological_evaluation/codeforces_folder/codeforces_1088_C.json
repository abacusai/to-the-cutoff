[
    {
        "name": "Ehab and a 2-operation task",
        "description": "You're given an array \n    a\n of length \n    n\n. You can perform the following\noperations on it: choose an index \n    i\n \n    (1 \n    \u2264 i \n    \u2264 n)\n, an\ninteger \n    x\n \n    (0 \n    \u2264 x \n    \u2264 10^6)\n, and replace \n    a_j\n with\n\n    a_j+x\n for all \n    (1 \n    \u2264 j \n    \u2264 i)\n, which means add \n    x\n to all\nthe elements in the prefix ending at \n    i\n. choose an index \n    i\n \n    (1\n    \n    \u2264 i \n    \u2264 n)\n, an integer \n    x\n \n    (1 \n    \u2264 x \n    \u2264 10^6)\n, and\nreplace \n    a_j\n with \n    a_j \n    % x\n for all \n    (1 \n    \u2264 j \n    \u2264 i)\n,\nwhich means replace every element in the prefix ending at \n    i\n with the\nremainder after dividing it by \n    x\n. Can you make the array strictly\nincreasing in no more than \n    n+1\n operations? Input The first line contains\nan integer \n    n\n \n    (1 \n    \u2264 n \n    \u2264 2000)\n, the number of elements in the\narray \n    a\n. The second line contains \n    n\n space-separated integers\n\n    a_1\n, \n    a_2\n, \n    \u2026\n, \n    a_n\n \n    (0 \n    \u2264 a_i \n    \u2264 10^5)\n,\nthe elements of the array \n    a\n. Output On the first line, print the number\nof operations you wish to perform. On the next lines, you should print the\noperations. To print an adding operation, use the format \"\n    1\n \n    i\n\n\n    x\n\"; to print a modding operation, use the format \"\n    2\n \n    i\n\n\n    x\n\". If \n    i\n or \n    x\n don't satisfy the limitations above, or you\nuse more than \n    n+1\n operations, you'll get wrong answer verdict. Examples\nInput 3 1 2 3 Output 0 Input 3 7 6 3 Output 2 1 1 1 2 2 4 Note In the first\nsample, the array is already increasing so we don't need any operations. In\nthe second sample: In the first step: the array becomes \n    [8,6,3]\n. In the\nsecond step: the array becomes \n    [0,2,3]\n.\n\n",
        "cf_contest_id": 1088,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 2 3\r\n",
                "4\n2 3 1\n1 3 1000000\n2 1 1000000\n2 2 999999\n"
            ],
            [
                "3\r\n7 6 3\r\n",
                "4\n2 3 1\n1 3 1000000\n2 1 1000000\n2 2 999999\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n1 4 4 3 0\r\n",
                "6\n2 5 1\n1 5 1000000\n2 1 1000000\n2 2 999999\n2 3 999998\n2 4 999997\n"
            ],
            [
                "5\r\n0 7 0 0 2\r\n",
                "6\n2 5 1\n1 5 1000000\n2 1 1000000\n2 2 999999\n2 3 999998\n2 4 999997\n"
            ],
            [
                "10\r\n6 6 5 3 3 4 2 9 9 4\r\n",
                "11\n2 10 1\n1 10 1000000\n2 1 1000000\n2 2 999999\n2 3 999998\n2 4 999997\n2 5 999996\n2 6 999995\n2 7 999994\n2 8 999993\n2 9 999992\n"
            ],
            [
                "10\r\n0 0 1 0 1 1 0 0 0 1\r\n",
                "11\n2 10 1\n1 10 1000000\n2 1 1000000\n2 2 999999\n2 3 999998\n2 4 999997\n2 5 999996\n2 6 999995\n2 7 999994\n2 8 999993\n2 9 999992\n"
            ],
            [
                "2\r\n1 0\r\n",
                "3\n2 2 1\n1 2 1000000\n2 1 1000000\n"
            ],
            [
                "2\r\n5 0\r\n",
                "3\n2 2 1\n1 2 1000000\n2 1 1000000\n"
            ],
            [
                "1\r\n0\r\n",
                "2\n2 1 1\n1 1 1000000\n"
            ]
        ]
    }
]