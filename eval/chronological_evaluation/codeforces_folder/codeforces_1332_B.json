[
    {
        "name": "Composite Coloring",
        "description": "A positive integer is called composite if it can be represented as a product\nof two positive integers, both greater than \n    1\n. For example, the\nfollowing numbers are composite: \n    6\n, \n    4\n, \n    120\n, \n    27\n. The\nfollowing numbers aren't: \n    1\n, \n    2\n, \n    3\n, \n    17\n, \n    97\n. Alice\nis given a sequence of \n    n\n composite numbers \n    a_1,a_2,\n    \u2026,a_n\n.\nShe wants to choose an integer \n    m \n    \u2264 11\n and color each element one of\n\n    m\n colors from \n    1\n to \n    m\n so that: for each color from \n    1\n to\n\n    m\n there is at least one element of this color; each element is colored\nand colored exactly one color; the greatest common divisor of any two elements\nthat are colored the same color is greater than \n    1\n, i.e. \n    (a_i,\n    a_j)>1\n for each pair \n    i, j\n if these elements are colored the same\ncolor. Note that equal elements can be colored different colors \u2014 you just\nhave to choose one of \n    m\n colors for each of the indices from \n    1\n to\n\n    n\n. Alice showed already that if all \n    a_i \n    \u2264 1000\n then she can\nalways solve the task by choosing some \n    m \n    \u2264 11\n. Help Alice to find\nthe required coloring. Note that you don't have to minimize or maximize the\nnumber of colors, you just have to find the solution with some \n    m\n from\n\n    1\n to \n    11\n. Input The first line contains a single integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of test cases. Then the descriptions\nof the test cases follow. The first line of the test case contains a single\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 1000\n) \u2014 the amount of numbers in a\nsequence \n    a\n. The second line of the test case contains \n    n\n composite\nintegers \n    a_1,a_2,\n    \u2026,a_n\n (\n    4 \n    \u2264 a_i \n    \u2264 1000\n). It is\nguaranteed that the sum of \n    n\n over all test cases doesn't exceed\n\n    10^4\n. Output For each test case print \n    2\n lines. The first line\nshould contain a single integer \n    m\n (\n    1 \n    \u2264 m \n    \u2264 11\n) \u2014 the\nnumber of used colors. Consider colors to be numbered from \n    1\n to \n    m\n.\nThe second line should contain any coloring that satisfies the above\nconditions. Print \n    n\n integers \n    c_1, c_2, \n    \u2026, c_n\n (\n    1 \n    \u2264\n    c_i \n    \u2264 m\n), where \n    c_i\n is the color of the \n    i\n-th element. If\nthere are multiple solutions then you can print any of them. Note that you\ndon't have to minimize or maximize the number of colors, you just have to find\nthe solution with some \n    m\n from \n    1\n to \n    11\n. Remember that each\ncolor from \n    1\n to \n    m\n should be used at least once. Any two elements\nof the same color should not be coprime (i.e. their GCD should be greater than\n\n    1\n). Example Input 3 3 6 10 15 2 4 9 23 437 519 865 808 909 391 194 291\n237 395 323 365 511 497 781 737 871 559 731 697 779 841 961 Output 1 1 1 1 2 2\n1 11 4 7 8 10 7 3 10 7 7 8 3 1 1 5 5 9 2 2 3 3 4 11 6 Note In the first test\ncase, \n    (6,10)=2\n, \n    (6,15)=3\n and \n    (10,15)=5\n.\nTherefore, it's valid to color all elements the same color. Note that there\nare other colorings which satisfy Alice's requirement in this test case. In\nthe second test case there is only one element of each color, so the coloring\ndefinitely satisfies Alice's requirement.\n\n",
        "cf_contest_id": 1332,
        "cf_index": "B",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n3\r\n6 10 15\r\n2\r\n4 9\r\n23\r\n437 519 865 808 909 391 194 291 237 395 323 365 511 497 781 737 871 559 731 697 779 841 961\r\n",
                "2 2 2 1\r\n2 2 1\r\n10 7 4 9 5 4 2 5 4 4 9 2 9 10 10 1 1 6 6 2 2 7 3 8\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n4\r\n",
                "1 1\r\n"
            ],
            [
                "1\r\n4\r\n529 529 529 961\r\n",
                "2 2 2 2 1\r\n"
            ]
        ]
    }
]