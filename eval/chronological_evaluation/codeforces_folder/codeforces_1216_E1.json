[
    {
        "name": "Numerical Sequence (easy version)",
        "description": "The only difference between the easy and the hard versions is the maximum\nvalue of \n    k\n. You are given an infinite sequence of form\n\"112123123412345\n    \u2026\n\" which consist of blocks of all consecutive\npositive integers written one after another. The first block consists of all\nnumbers from \n    1\n to \n    1\n, the second one \u2014 from \n    1\n to \n    2\n, the\nthird one \u2014 from \n    1\n to \n    3\n, \n    \u2026\n, the \n    i\n-th block\nconsists of all numbers from \n    1\n to \n    i\n. So the first \n    56\n\nelements of the sequence are\n\"11212312341234512345612345671234567812345678912345678910\". Elements of the\nsequence are numbered from one. For example, the \n    1\n-st element of the\nsequence is \n    1\n, the \n    3\n-rd element of the sequence is \n    2\n, the\n\n    20\n-th element of the sequence is \n    5\n, the \n    38\n-th element is\n\n    2\n, the \n    56\n-th element of the sequence is \n    0\n. Your task is to\nanswer \n    q\n independent queries. In the \n    i\n-th query you are given one\ninteger \n    k_i\n. Calculate the digit at the position \n    k_i\n of the\nsequence. Input The first line of the input contains one integer \n    q\n (\n    1\n    \n    \u2264 q \n    \u2264 500\n) \u2014 the number of queries. The \n    i\n-th of the following\n\n    q\n lines contains one integer \n    k_i\n \n    (1 \n    \u2264 k_i \n    \u2264 10^9)\n \u2014\nthe description of the corresponding query. Output Print \n    q\n lines. In the\n\n    i\n-th line print one digit \n    x_i\n \n    (0 \n    \u2264 x_i \n    \u2264 9)\n \u2014 the\nanswer to the query \n    i\n, i.e. \n    x_i\n should be equal to the element at\nthe position \n    k_i\n of the sequence. Examples Input 5 1 3 20 38 56 Output 1\n2 5 2 0 Input 4 2132 506 999999999 1000000000 Output 8 2 9 8 Note Answers on\nqueries from the first example are described in the problem statement.\n\n",
        "cf_contest_id": 1216,
        "cf_index": "E1",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1\r\n3\r\n20\r\n38\r\n56\r\n",
                "1\r\n2\r\n5\r\n2\r\n0\r\n"
            ],
            [
                "4\r\n2132\r\n506\r\n999999999\r\n1000000000\r\n",
                "8\r\n2\r\n9\r\n8\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n388645\r\n",
                "3\r\n"
            ],
            [
                "1\r\n472069\r\n",
                "4\r\n"
            ],
            [
                "1\r\n555493\r\n",
                "2\r\n"
            ],
            [
                "1\r\n671621\r\n",
                "3\r\n"
            ],
            [
                "1\r\n755045\r\n",
                "4\r\n"
            ],
            [
                "1\r\n838469\r\n",
                "4\r\n"
            ],
            [
                "1\r\n921893\r\n",
                "8\r\n"
            ],
            [
                "1\r\n123151223\r\n",
                "7\r\n"
            ],
            [
                "2\r\n555831672\r\n1395496\r\n",
                "5\r\n1\r\n"
            ],
            [
                "10\r\n1\r\n10\r\n100\r\n1000\r\n10000\r\n100000\r\n1000000\r\n10000000\r\n100000000\r\n1000000000\r\n",
                "1\r\n4\r\n1\r\n4\r\n9\r\n2\r\n6\r\n2\r\n6\r\n8\r\n"
            ]
        ]
    }
]