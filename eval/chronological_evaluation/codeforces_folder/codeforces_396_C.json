[
    {
        "name": "On Changing Tree",
        "description": "You are given a rooted tree consisting of n vertices numbered from 1 to n. The\nroot of the tree is a vertex number 1. Initially all vertices contain number\n0. Then come q queries, each query has one of the two types: The format of the\nquery: 1 v x k. In response to the query, you need to add to the number at\nvertex v number x; to the numbers at the descendants of vertex v at distance\n1, add x - k; and so on, to the numbers written in the descendants of vertex v\nat distance i, you need to add x - (i\u00b7k). The distance between two vertices is\nthe number of edges in the shortest path between these vertices. The format of\nthe query: 2 v. In reply to the query you should print the number written in\nvertex v modulo 1000000007 (10^9 + 7). Process the queries given in the input.\nInput The first line contains integer n (1 \u2264 n \u2264 3\u00b710^5) \u2014 the number of\nvertices in the tree. The second line contains n - 1 integers p2, p3, ... pn\n(1 \u2264 pi < i), where pi is the number of the vertex that is the parent of\nvertex i in the tree. The third line contains integer q (1 \u2264 q \u2264 3\u00b710^5) \u2014 the\nnumber of queries. Next q lines contain the queries, one per line. The first\nnumber in the line is type. It represents the type of the query. If type = 1,\nthen next follow space-separated integers v, x, k (1 \u2264 v \u2264 n; 0 \u2264 x < 10^9 +\n7; 0 \u2264 k < 10^9 + 7). If type = 2, then next follows integer v (1 \u2264 v \u2264 n) \u2014\nthe vertex where you need to find the value of the number. Output For each\nquery of the second type print on a single line the number written in the\nvertex from the query. Print the number modulo 1000000007 (10^9 + 7). Examples\nInput 3 1 1 3 1 1 2 1 2 1 2 2 Output 2 1 Note You can read about a rooted tree\nhere: http://en.wikipedia.org/wiki/Tree_(graph_theory).\n\n",
        "cf_contest_id": 396,
        "cf_index": "C",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 1\r\n3\r\n1 1 2 1\r\n2 1\r\n2 2\r\n",
                "2\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n1 2 3 4 4 3 3 6 7\r\n10\r\n1 6 13 98\r\n1 7 17 66\r\n1 5 32 39\r\n1 1 9 5\r\n1 7 27 11\r\n1 1 24 79\r\n1 5 87 86\r\n2 2\r\n1 5 9 38\r\n2 5\r\n",
                "999999956\r\n999999832\r\n"
            ],
            [
                "1\r\n\r\n1\r\n1 1 1 1\r\n",
                ""
            ],
            [
                "1\r\n\r\n1\r\n2 1\r\n",
                "0\r\n"
            ]
        ]
    }
]