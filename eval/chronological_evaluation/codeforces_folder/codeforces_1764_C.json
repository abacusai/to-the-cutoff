[
    {
        "name": "Doremy's City Construction",
        "description": "Doremy's new city is under construction! The city can be regarded as a simple\nundirected graph with \n    n\n vertices. The \n    i\n-th vertex has altitude\n\n    a_i\n. Now Doremy is deciding which pairs of vertices should be connected\nwith edges. Due to economic reasons, there should be no self-loops or multiple\nedges in the graph. Due to safety reasons, there should not be pairwise\ndistinct vertices \n    u\n, \n    v\n, and \n    w\n such that \n    a_u \n    \u2264 a_v\n    \n    \u2264 a_w\n and the edges \n    (u,v)\n and \n    (v,w)\n exist. Under these\nconstraints, Doremy would like to know the maximum possible number of edges in\nthe graph. Can you help her? Note that the constructed graph is allowed to be\ndisconnected. Input The input consists of multiple test cases. The first line\ncontains a single integer \n    t\n (\n    1\n    \u2264 t\n    \u2264 10^4\n) \u2014 the number of\ntest cases. The description of the test cases follows. The first line of each\ntest case contains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2\n    \u00b7\n    10^5\n) \u2014 the number of vertices. The second line of each test case contains\n\n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1\n    \u2264 a_i\n    \u2264 10^6\n) \u2014\nthe altitudes of each vertex. It is guaranteed that the sum of \n    n\n over\nall test cases does not exceed \n    2 \n    \u00b7 10^5\n. Output For each test\ncase, output the maximum possible number of edges in the graph. Example Input\n4 4 2 2 3 1 6 5 2 3 1 5 2 12 7 2 4 9 1 4 6 3 7 4 2 3 4 1000000 1000000 1000000\n1000000 Output 3 9 35 2 Note In the first test case, there can only be at most\n\n    3\n edges in the graph. A possible construction is to connect \n    (1,3)\n,\n\n    (2,3)\n, \n    (3,4)\n. In the picture below the red number above node\n\n    i\n is \n    a_i\n. The following list shows all such \n    u\n, \n    v\n,\n\n    w\n that the edges \n    (u,v)\n and \n    (v,w)\n exist. \n    u=1\n,\n\n    v=3\n, \n    w=2\n; \n    u=1\n, \n    v=3\n, \n    w=4\n; \n    u=2\n, \n    v=3\n,\n\n    w=1\n; \n    u=2\n, \n    v=3\n, \n    w=4\n; \n    u=4\n, \n    v=3\n, \n    w=1\n;\n\n    u=4\n, \n    v=3\n, \n    w=2\n. Another possible construction is to connect\n\n    (1,4)\n, \n    (2,4)\n, \n    (3,4)\n. An unacceptable construction is to\nconnect \n    (1,3)\n, \n    (2,3)\n, \n    (2,4)\n, \n    (3,4)\n. Because when\n\n    u=4\n, \n    v=2\n, \n    w=3\n, \n    a_u\n    \u2264 a_v \n    \u2264 a_w\n holds, and the\nrespective edges exist.\n\n",
        "cf_contest_id": 1764,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "graphs",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4\r\n2 2 3 1\r\n6\r\n5 2 3 1 5 2\r\n12\r\n7 2 4 9 1 4 6 3 7 4 2 3\r\n4\r\n1000000 1000000 1000000 1000000\r\n",
                "3\r\n9\r\n35\r\n2\r\n"
            ]
        ],
        "private_cases": []
    }
]