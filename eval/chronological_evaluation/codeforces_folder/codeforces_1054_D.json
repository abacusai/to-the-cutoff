[
    {
        "name": "Changing Array",
        "description": "At a break Vanya came to the class and saw an array of \n    n\n \n    k\n-bit\nintegers \n    a_1, a_2, \n    \u2026, a_n\n on the board. An integer \n    x\n is\ncalled a \n    k\n-bit integer if \n    0 \n    \u2264 x \n    \u2264 2^k - 1\n. Of course,\nVanya was not able to resist and started changing the numbers written on the\nboard. To ensure that no one will note anything, Vanya allowed himself to make\nonly one type of changes: choose an index of the array \n    i\n (\n    1 \n    \u2264 i\n    \n    \u2264 n\n) and replace the number \n    a_i\n with the number\n\n    a_i\n. We define \n    x\n for a \n    k\n-bit\ninteger \n    x\n as the \n    k\n-bit integer such that all its \n    k\n bits\ndiffer from the corresponding bits of \n    x\n. Vanya does not like the number\n\n    0\n. Therefore, he likes such segments \n    [l, r]\n (\n    1 \n    \u2264 l \n    \u2264\n    r \n    \u2264 n\n) such that \n    a_l \n    \u2295 a_l+1\n    \u2295\n    \u2026\n    \u2295\n    a_r \n    \u2260 0\n, where \n    \u2295\n denotes the bitwise XOR operation.\nDetermine the maximum number of segments he likes Vanya can get applying zero\nor more operations described above. Input The first line of the input contains\ntwo integers \n    n\n and \n    k\n (\n    1 \n    \u2264 n \n    \u2264 200\n     000\n, \n    1\n    \n    \u2264 k \n    \u2264 30\n). The next line contains \n    n\n integers \n    a_1, a_2,\n    \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 2^k - 1\n), separated by spaces \u2014\nthe array of \n    k\n-bit integers. Output Print one integer \u2014 the maximum\npossible number of segments with XOR not equal to \n    0\n that can be obtained\nby making several (possibly \n    0\n) operations described in the statement.\nExamples Input 3 2 1 3 0 Output 5 Input 6 3 1 4 4 7 3 4 Output 19 Note In the\nfirst example if Vasya does not perform any operations, he gets an array that\nhas \n    5\n segments that Vanya likes. If he performs the operation with \n    i\n    = 2\n, he gets an array \n    [1, 0, 0]\n, because \n    3 = 0\n\nwhen \n    k = 2\n. This array has \n    3\n segments that Vanya likes. Also, to\nget an array with \n    5\n segments that Vanya likes, he can perform two\noperations with \n    i = 3\n and with \n    i = 2\n. He then gets an array \n    [1,\n    0, 3]\n. It can be proven that he can't obtain \n    6\n or more segments that\nhe likes. In the second example, to get \n    19\n segments that Vanya likes, he\ncan perform \n    4\n operations with \n    i = 3\n, \n    i = 4\n, \n    i = 5\n,\n\n    i = 6\n and get an array \n    [1, 4, 3, 0, 4, 3]\n.\n\n",
        "cf_contest_id": 1054,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2\r\n1 3 0\r\n",
                "5\r\n"
            ],
            [
                "6 3\r\n1 4 4 7 3 4\r\n",
                "19\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "20 30\r\n12966621 605258806 109693421 1054599936 474064603 791793239 844397683 0 461905632 520812549 153707881 1073741823 447929235 744767749 929174361 221978300 472269622 786604661 1045132848 886945182\r\n",
                "207\r\n"
            ],
            [
                "20 30\r\n30095551 1073741823 319405832 582219539 834291739 1073741823 834291739 491522284 582219539 812740772 261001051 553222931 796331080 759003208 759003208 0 1043646272 1073741823 834291739 1073741823\r\n",
                "193\r\n"
            ],
            [
                "1 1\r\n0\r\n",
                "1\r\n"
            ],
            [
                "1 2\r\n3\r\n",
                "1\r\n"
            ],
            [
                "1 30\r\n405246759\r\n",
                "1\r\n"
            ],
            [
                "1 25\r\n0\r\n",
                "1\r\n"
            ],
            [
                "1 29\r\n266408128\r\n",
                "1\r\n"
            ],
            [
                "2 1\r\n0 0\r\n",
                "2\r\n"
            ],
            [
                "2 1\r\n1 0\r\n",
                "2\r\n"
            ],
            [
                "2 1\r\n1 1\r\n",
                "2\r\n"
            ],
            [
                "2 30\r\n566968935 0\r\n",
                "3\r\n"
            ],
            [
                "2 30\r\n1073741823 1073741823\r\n",
                "2\r\n"
            ],
            [
                "2 22\r\n0 0\r\n",
                "2\r\n"
            ],
            [
                "3 30\r\n1073741823 1073741823 599434043\r\n",
                "5\r\n"
            ],
            [
                "3 26\r\n67108863 0 0\r\n",
                "4\r\n"
            ],
            [
                "3 29\r\n509589897 536870911 536870911\r\n",
                "5\r\n"
            ],
            [
                "3 30\r\n1073741823 192052468 987641003\r\n",
                "6\r\n"
            ]
        ]
    }
]