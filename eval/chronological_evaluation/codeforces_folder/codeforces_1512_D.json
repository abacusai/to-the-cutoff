[
    {
        "name": "Corrupted Array",
        "description": "You are given a number \n    n\n and an array \n    b_1, b_2, \n    \u2026, b_n+2\n,\nobtained according to the following algorithm: some array \n    a_1, a_2,\n    \n    \u2026, a_n\n was guessed; array \n    a\n was written to array \n    b\n, i.e.\n\n    b_i = a_i\n (\n    1 \n    \u2264 i \n    \u2264 n\n); The \n    (n+1)\n-th element of the\narray \n    b\n is the sum of the numbers in the array \n    a\n, i.e. \n    b_n+1\n    = a_1+a_2+\n    \u2026+a_n\n; The \n    (n+2)\n-th element of the array \n    b\n was\nwritten some number \n    x\n (\n    1 \n    \u2264 x \n    \u2264 10^9\n), i.e. \n    b_n+2 =\n    x\n; The array \n    b\n was shuffled. For example, the array \n    b=[2, 3, 7, 12\n    ,2]\n it could be obtained in the following ways: \n    a=[2, 2, 3]\n and\n\n    x=12\n; \n    a=[3, 2, 7]\n and \n    x=2\n. For the given array \n    b\n, find\nany array \n    a\n that could have been guessed initially. Input The first line\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n). Then \n    t\n\ntest cases follow. The first line of each test case contains a single integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n). The second row of each test\ncase contains \n    n+2\n integers \n    b_1, b_2, \n    \u2026, b_n+2\n (\n    1 \n    \u2264\n    b_i \n    \u2264 10^9\n). It is guaranteed that the sum of \n    n\n over all test\ncases does not exceed \n    2 \n    \u00b7 10^5\n. Output For each test case, output:\n\"-1\", if the array \n    b\n could not be obtained from any array \n    a\n;\n\n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n, otherwise. If there are\nseveral arrays of \n    a\n, you can output any. Example Input 4 3 2 3 7 12 2 4\n9 1 7 1 6 5 5 18 2 2 3 2 9 2 3 2 6 9 2 1 Output 2 3 7 -1 2 2 2 3 9 1 2 6\n\n",
        "cf_contest_id": 1512,
        "cf_index": "D",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3\r\n2 3 7 12 2\r\n4\r\n9 1 7 1 6 5\r\n5\r\n18 2 2 3 2 9 2\r\n3\r\n2 6 9 2 1\r\n",
                "2 3 7\r\n-1\r\n2 2 2 3 9\r\n1 2 6\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n10\r\n500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 705032704 705032704\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n12\r\n500000000 500000000 500000000 500000000 147483648 500000000 500000000 500000000 500000000 147483648 500000000 500000000 1000000000 123\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n6\r\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 294967296\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n10\r\n500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 2888281 705032704\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n10\r\n500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 2888289 705032704\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n10\r\n500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 705032704 1\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n10\r\n500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 500000000 1 705032704\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n12\r\n400000000 400000000 400000000 400000000 400000000 400000000 400000000 400000000 400000000 400000000 400000000 400000000 400000000 505032704\r\n",
                "-1\r\n"
            ]
        ]
    }
]