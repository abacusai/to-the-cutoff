[
    {
        "name": "Resource Distribution",
        "description": "One department of some software company has \n    n\n servers of different\nspecifications. Servers are indexed with consecutive integers from \n    1\n to\n\n    n\n. Suppose that the specifications of the \n    j\n-th server may be\nexpressed with a single integer number \n    c_j\n of artificial resource units.\nIn order for production to work, it is needed to deploy two services \n    S_1\n\nand \n    S_2\n to process incoming requests using the servers of the\ndepartment. Processing of incoming requests of service \n    S_i\n takes\n\n    x_i\n resource units. The described situation happens in an advanced\ncompany, that is why each service may be deployed using not only one server,\nbut several servers simultaneously. If service \n    S_i\n is deployed using\n\n    k_i\n servers, then the load is divided equally between these servers and\neach server requires only \n    x_i / k_i\n (that may be a fractional number)\nresource units. Each server may be left unused at all, or be used for\ndeploying exactly one of the services (but not for two of them\nsimultaneously). The service should not use more resources than the server\nprovides. Determine if it is possible to deploy both services using the given\nservers, and if yes, determine which servers should be used for deploying each\nof the services. Input The first line contains three integers \n    n\n,\n\n    x_1\n, \n    x_2\n (\n    2 \n    \u2264 n \n    \u2264 300\n     000\n, \n    1 \n    \u2264 x_1, x_2\n    \n    \u2264 10^9\n) \u2014 the number of servers that the department may use, and\nresource units requirements for each of the services. The second line contains\n\n    n\n space-separated integers \n    c_1, c_2, \n    \u2026, c_n\n (\n    1 \n    \u2264\n    c_i \n    \u2264 10^9\n) \u2014 the number of resource units provided by each of the\nservers. Output If it is impossible to deploy both services using the given\nservers, print the only word \"No\" (without the quotes). Otherwise print the\nword \"Yes\" (without the quotes). In the second line print two integers\n\n    k_1\n and \n    k_2\n (\n    1 \n    \u2264 k_1, k_2 \n    \u2264 n\n) \u2014 the number of\nservers used for each of the services. In the third line print \n    k_1\n\nintegers, the indices of the servers that will be used for the first service.\nIn the fourth line print \n    k_2\n integers, the indices of the servers that\nwill be used for the second service. No index may appear twice among the\nindices you print in the last two lines. If there are several possible\nanswers, it is allowed to print any of them. Examples Input 6 8 16 3 5 2 9 8 7\nOutput Yes 3 2 1 2 6 5 4 Input 4 20 32 21 11 11 12 Output Yes 1 3 1 2 3 4\nInput 4 11 32 5 5 16 16 Output No Input 5 12 20 7 8 4 11 9 Output No Note In\nthe first sample test each of the servers 1, 2 and 6 will will provide \n    8 /\n    3 = 2.(6)\n resource units and each of the servers 5, 4 will provide \n    16 /\n    2 = 8\n resource units. In the second sample test the first server will\nprovide \n    20\n resource units and each of the remaining servers will provide\n\n    32 / 3 = 10.(6)\n resource units.\n\n",
        "cf_contest_id": 925,
        "cf_index": "B",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 8 16\r\n3 5 2 9 8 7\r\n",
                "Yes\r\n4 2\r\n3 1 2 6\r\n5 4\r\n"
            ],
            [
                "4 20 32\r\n21 11 11 12\r\n",
                "Yes\r\n1 3\r\n1\r\n2 3 4\r\n"
            ],
            [
                "4 11 32\r\n5 5 16 16\r\n",
                "No\r\n"
            ],
            [
                "5 12 20\r\n7 8 4 11 9\r\n",
                "No\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1 1\r\n1 1\r\n",
                "Yes\r\n1 1\r\n1\r\n2\r\n"
            ],
            [
                "2 1 1\r\n1 1000000\r\n",
                "Yes\r\n1 1\r\n1\r\n2\r\n"
            ],
            [
                "2 1 1\r\n1000000000 1000000000\r\n",
                "Yes\r\n1 1\r\n1\r\n2\r\n"
            ],
            [
                "2 1 2\r\n1 1\r\n",
                "No\r\n"
            ],
            [
                "15 250 200\r\n71 2 77 69 100 53 54 40 73 32 82 58 24 82 41\r\n",
                "Yes\r\n8 3\r\n10 8 15 6 7 12 4 1\r\n9 3 11\r\n"
            ],
            [
                "4 12 11\r\n4 4 6 11\r\n",
                "Yes\r\n3 1\r\n1 2 3\r\n4\r\n"
            ]
        ]
    }
]