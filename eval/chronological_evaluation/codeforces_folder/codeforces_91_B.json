[
    {
        "name": "Queue",
        "description": "There are n walruses standing in a queue in an airport. They are numbered\nstarting from the queue's tail: the 1-st walrus stands at the end of the queue\nand the n-th walrus stands at the beginning of the queue. The i-th walrus has\nthe age equal to ai. The i-th walrus becomes displeased if there's a younger\nwalrus standing in front of him, that is, if exists such j (i < j), that ai >\naj. The displeasure of the i-th walrus is equal to the number of walruses\nbetween him and the furthest walrus ahead of him, which is younger than the\ni-th one. That is, the further that young walrus stands from him, the stronger\nthe displeasure is. The airport manager asked you to count for each of n\nwalruses in the queue his displeasure. Input The first line contains an\ninteger n (2 \u2264 n \u2264 10^5) \u2014 the number of walruses in the queue. The second\nline contains integers ai (1 \u2264 ai \u2264 10^9). Note that some walruses can have\nthe same age but for the displeasure to emerge the walrus that is closer to\nthe head of the queue needs to be strictly younger than the other one. Output\nPrint n numbers: if the i-th walrus is pleased with everything, print \"-1\"\n(without the quotes). Otherwise, print the i-th walrus's displeasure: the\nnumber of other walruses that stand between him and the furthest from him\nyounger walrus. Examples Input 6 10 8 5 3 50 45 Output 2 1 0 -1 0 -1 Input 7\n10 4 6 3 2 8 15 Output 4 2 1 0 -1 -1 -1 Input 5 10 3 1 10 11 Output 1 0 -1 -1\n-1\n\n",
        "cf_contest_id": 91,
        "cf_index": "B",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n10 8 5 3 50 45\r\n",
                "2 1 0 -1 0 -1\r\n"
            ],
            [
                "7\r\n10 4 6 3 2 8 15\r\n",
                "4 2 1 0 -1 -1 -1\r\n"
            ],
            [
                "5\r\n10 3 1 10 11\r\n",
                "1 0 -1 -1 -1\r\n"
            ]
        ],
        "private_cases": [
            [
                "13\r\n18 9 8 9 23 20 18 18 33 25 31 37 36\r\n",
                "2 0 -1 -1 2 1 -1 -1 1 -1 -1 0 -1\r\n"
            ],
            [
                "10\r\n15 21 17 22 27 21 31 26 32 30\r\n",
                "-1 0 -1 1 2 -1 2 -1 0 -1\r\n"
            ],
            [
                "10\r\n18 20 18 17 17 13 22 20 34 29\r\n",
                "4 3 2 1 0 -1 0 -1 0 -1\r\n"
            ],
            [
                "13\r\n16 14 12 9 11 28 30 21 35 30 32 31 43\r\n",
                "3 2 1 -1 -1 1 0 -1 2 -1 0 -1 -1\r\n"
            ],
            [
                "15\r\n18 6 18 21 14 20 13 9 18 20 28 13 19 25 21\r\n",
                "10 -1 8 8 6 6 0 -1 2 2 3 -1 -1 0 -1\r\n"
            ],
            [
                "11\r\n15 17 18 18 26 22 23 33 33 21 29\r\n",
                "-1 -1 -1 -1 4 3 2 2 1 -1 -1\r\n"
            ],
            [
                "15\r\n14 4 5 12 6 19 14 19 12 22 23 17 14 21 27\r\n",
                "7 -1 -1 0 -1 6 1 4 -1 3 2 0 -1 -1 -1\r\n"
            ],
            [
                "2\r\n1 1000000000\r\n",
                "-1 -1\r\n"
            ],
            [
                "2\r\n1000000000 1\r\n",
                "0 -1\r\n"
            ],
            [
                "5\r\n15 1 8 15 3\r\n",
                "3 -1 1 0 -1\r\n"
            ],
            [
                "12\r\n5 1 2 5 100 1 1000 100 10000 20000 10000 20000\r\n",
                "4 -1 2 1 0 -1 0 -1 -1 0 -1 -1\r\n"
            ]
        ]
    }
]