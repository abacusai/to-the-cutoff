[
    {
        "name": "Bear and Forgotten Tree 2",
        "description": "A tree is a connected undirected graph consisting of n vertices and n - 1\nedges. Vertices are numbered 1 through n. Limak is a little polar bear. He\nonce had a tree with n vertices but he lost it. He still remembers something\nabout the lost tree though. You are given m pairs of vertices (a1, b1), (a2,\nb2), ..., (am, bm). Limak remembers that for each i there was no edge between\nai and bi. He also remembers that vertex 1 was incident to exactly k edges\n(its degree was equal to k). Is it possible that Limak remembers everything\ncorrectly? Check whether there exists a tree satisfying the given conditions.\nInput The first line of the input contains three integers n, m and k () \u2014 the\nnumber of vertices in Limak's tree, the number of forbidden pairs of vertices,\nand the degree of vertex 1, respectively. The i-th of next m lines contains\ntwo distinct integers ai and bi (1 \u2264 ai, bi \u2264 n, ai \u2260 bi) \u2014 the i-th pair that\nis forbidden. It's guaranteed that each pair of vertices will appear at most\nonce in the input. Output Print \"possible\" (without quotes) if there exists at\nleast one tree satisfying the given conditions. Otherwise, print \"impossible\"\n(without quotes). Examples Input 5 4 2 1 2 2 3 4 2 4 1 Output possible Input 6\n5 3 1 2 1 3 1 4 1 5 1 6 Output impossible Note In the first sample, there are\nn = 5 vertices. The degree of vertex 1 should be k = 2. All conditions are\nsatisfied for a tree with edges 1 - 5, 5 - 2, 1 - 3 and 3 - 4. In the second\nsample, Limak remembers that none of the following edges existed: 1 - 2, 1 -\n3, 1 - 4, 1 - 5 and 1 - 6. Hence, vertex 1 couldn't be connected to any other\nvertex and it implies that there is no suitable tree.\n\n",
        "cf_contest_id": 653,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dsu",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 4 2\r\n1 2\r\n2 3\r\n4 2\r\n4 1\r\n",
                "possible\r\n"
            ],
            [
                "6 5 3\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n",
                "impossible\r\n"
            ]
        ],
        "private_cases": [
            [
                "4 3 2\r\n2 3\r\n2 4\r\n3 4\r\n",
                "impossible\r\n"
            ],
            [
                "4 2 2\r\n1 2\r\n1 3\r\n",
                "impossible\r\n"
            ],
            [
                "7 11 1\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 7\r\n6 2\r\n6 3\r\n6 4\r\n6 5\r\n6 7\r\n2 3\r\n",
                "impossible\r\n"
            ],
            [
                "3 1 2\r\n1 3\r\n",
                "impossible\r\n"
            ],
            [
                "4 2 2\r\n2 1\r\n1 4\r\n",
                "impossible\r\n"
            ],
            [
                "4 2 3\r\n2 1\r\n2 4\r\n",
                "impossible\r\n"
            ],
            [
                "4 5 1\r\n2 3\r\n2 4\r\n4 3\r\n3 1\r\n1 2\r\n",
                "impossible\r\n"
            ],
            [
                "5 2 4\r\n4 3\r\n1 3\r\n",
                "impossible\r\n"
            ],
            [
                "5 3 1\r\n2 1\r\n4 3\r\n3 1\r\n",
                "possible\r\n"
            ],
            [
                "5 3 2\r\n1 2\r\n5 1\r\n1 4\r\n",
                "impossible\r\n"
            ],
            [
                "5 3 3\r\n5 4\r\n2 4\r\n2 1\r\n",
                "possible\r\n"
            ],
            [
                "5 4 2\r\n2 1\r\n4 1\r\n4 2\r\n3 5\r\n",
                "possible\r\n"
            ],
            [
                "5 4 3\r\n5 1\r\n5 3\r\n3 1\r\n4 2\r\n",
                "impossible\r\n"
            ],
            [
                "5 4 4\r\n4 5\r\n4 2\r\n1 5\r\n5 3\r\n",
                "impossible\r\n"
            ],
            [
                "5 5 2\r\n2 1\r\n3 1\r\n5 3\r\n3 2\r\n3 4\r\n",
                "impossible\r\n"
            ],
            [
                "5 6 1\r\n3 1\r\n4 5\r\n3 5\r\n4 3\r\n1 2\r\n2 4\r\n",
                "impossible\r\n"
            ],
            [
                "5 6 2\r\n3 5\r\n2 1\r\n2 5\r\n1 5\r\n1 3\r\n2 4\r\n",
                "impossible\r\n"
            ],
            [
                "5 6 3\r\n3 1\r\n4 3\r\n2 5\r\n4 5\r\n2 4\r\n3 2\r\n",
                "possible\r\n"
            ],
            [
                "5 8 1\r\n1 4\r\n4 3\r\n1 5\r\n3 5\r\n2 4\r\n1 2\r\n5 2\r\n4 5\r\n",
                "impossible\r\n"
            ],
            [
                "2 0 1\r\n",
                "possible\r\n"
            ],
            [
                "2 1 1\r\n2 1\r\n",
                "impossible\r\n"
            ],
            [
                "300000 0 1\r\n",
                "possible\r\n"
            ],
            [
                "300000 0 299999\r\n",
                "possible\r\n"
            ]
        ]
    }
]