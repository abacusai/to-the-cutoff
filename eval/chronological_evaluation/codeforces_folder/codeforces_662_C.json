[
    {
        "name": "Binary Table",
        "description": "You are given a table consisting of n rows and m columns. Each cell of the\ntable contains either 0 or 1. In one move, you are allowed to pick any row or\nany column and invert all values, that is, replace 0 by 1 and vice versa. What\nis the minimum number of cells with value 1 you can get after applying some\nnumber of operations? Input The first line of the input contains two integers\nn and m (1 \u2264 n \u2264 20, 1 \u2264 m \u2264 100 000) \u2014 the number of rows and the number of\ncolumns, respectively. Then n lines follows with the descriptions of the rows.\nEach line has length m and contains only digits '0' and '1'. Output Output a\nsingle integer \u2014 the minimum possible number of ones you can get after\napplying some sequence of operations. Example Input 3 4 0110 1010 0111 Output\n2\n\n",
        "cf_contest_id": 662,
        "cf_index": "C",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "divide and conquer",
            "dp",
            "fft",
            "math"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 4\r\n0110\r\n1010\r\n0111\r\n",
                "2"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n0\r\n",
                "0"
            ],
            [
                "1 1\r\n1\r\n",
                "0"
            ],
            [
                "2 1\r\n0\r\n1\r\n",
                "0"
            ],
            [
                "1 2\r\n10\r\n",
                "0"
            ],
            [
                "2 2\r\n01\r\n10\r\n",
                "0"
            ],
            [
                "2 2\r\n11\r\n10\r\n",
                "1"
            ],
            [
                "2 2\r\n00\r\n00\r\n",
                "0"
            ],
            [
                "2 2\r\n00\r\n11\r\n",
                "0"
            ],
            [
                "3 3\r\n100\r\n010\r\n001\r\n",
                "2"
            ],
            [
                "3 9\r\n010100100\r\n101011011\r\n101011101\r\n",
                "2"
            ],
            [
                "8 3\r\n000\r\n001\r\n010\r\n100\r\n110\r\n011\r\n101\r\n111\r\n",
                "6"
            ],
            [
                "1 10\r\n0110010001\r\n",
                "0"
            ],
            [
                "9 1\r\n0\r\n1\r\n1\r\n0\r\n1\r\n0\r\n1\r\n0\r\n1\r\n",
                "0"
            ],
            [
                "4 5\r\n01010\r\n10101\r\n01011\r\n10101\r\n",
                "1"
            ],
            [
                "5 5\r\n11110\r\n11101\r\n11011\r\n10111\r\n01111\r\n",
                "5"
            ],
            [
                "20 20\r\n00010110100100010111\r\n11110000001100101110\r\n01110101110001111000\r\n10111101000111111110\r\n10000101011000000011\r\n00010010001011010000\r\n00000110010110111111\r\n01010101000101101110\r\n01001110110001000011\r\n10111111010011101111\r\n10011010000110101101\r\n10000111011001001111\r\n11111110110100010100\r\n10111001010101001011\r\n11110011100010110000\r\n10100011011110110110\r\n01100111101101000000\r\n11100100011101100010\r\n10000110110111101100\r\n10110000101100110011\r\n",
                "138"
            ]
        ]
    }
]