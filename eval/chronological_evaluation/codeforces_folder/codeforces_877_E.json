[
    {
        "name": "Danil and a Part-time Job",
        "description": "Danil decided to earn some money, so he had found a part-time job. The\ninterview have went well, so now he is a light switcher. Danil works in a\nrooted tree (undirected connected acyclic graph) with n vertices, vertex 1 is\nthe root of the tree. There is a room in each vertex, light can be switched on\nor off in each room. Danil's duties include switching light in all rooms of\nthe subtree of the vertex. It means that if light is switched on in some room\nof the subtree, he should switch it off. Otherwise, he should switch it on.\nUnfortunately (or fortunately), Danil is very lazy. He knows that his boss is\nnot going to personally check the work. Instead, he will send Danil tasks\nusing Workforces personal messages. There are two types of tasks: pow v\ndescribes a task to switch lights in the subtree of vertex v. get v describes\na task to count the number of rooms in the subtree of v, in which the light is\nturned on. Danil should send the answer to his boss using Workforces\nmessages.A subtree of vertex v is a set of vertices for which the shortest\npath from them to the root passes through v. In particular, the vertex v is in\nthe subtree of v. Danil is not going to perform his duties. He asks you to\nwrite a program, which answers the boss instead of him. Input The first line\ncontains a single integer n (1 \u2264 n \u2264 200 000) \u2014 the number of vertices in the\ntree. The second line contains n - 1 space-separated integers p2, p3, ..., pn\n(1 \u2264 pi < i), where pi is the ancestor of vertex i. The third line contains n\nspace-separated integers t1, t2, ..., tn (0 \u2264 ti \u2264 1), where ti is 1, if the\nlight is turned on in vertex i and 0 otherwise. The fourth line contains a\nsingle integer q (1 \u2264 q \u2264 200 000) \u2014 the number of tasks. The next q lines are\nget v or pow v (1 \u2264 v \u2264 n) \u2014 the tasks described above. Output For each task\nget v print the number of rooms in the subtree of v, in which the light is\nturned on. Example Input 4 1 1 1 1 0 0 1 9 get 1 get 2 get 3 get 4 pow 1 get 1\nget 2 get 3 get 4 Output 2 0 0 1 2 1 1 0 Note The tree before the task pow 1.\nThe tree after the task pow 1.\n\n",
        "cf_contest_id": 877,
        "cf_index": "E",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "data structures",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 1 1\r\n1 0 0 1\r\n9\r\nget 1\r\nget 2\r\nget 3\r\nget 4\r\npow 1\r\nget 1\r\nget 2\r\nget 3\r\nget 4\r\n",
                "2\r\n0\r\n0\r\n1\r\n2\r\n1\r\n1\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n\r\n1\r\n4\r\npow 1\r\nget 1\r\npow 1\r\nget 1\r\n",
                "0\r\n1\r\n"
            ],
            [
                "10\r\n1 2 1 3 4 5 6 8 5\r\n1 0 0 0 1 0 0 0 1 0\r\n10\r\npow 10\r\npow 4\r\npow 10\r\npow 7\r\npow 10\r\npow 10\r\npow 4\r\npow 8\r\npow 7\r\npow 1\r\n",
                ""
            ],
            [
                "10\r\n1 2 3 4 2 4 1 7 8\r\n1 1 0 1 1 0 0 0 1 1\r\n10\r\npow 1\r\nget 2\r\npow 2\r\npow 8\r\nget 6\r\npow 6\r\npow 10\r\nget 6\r\npow 8\r\npow 3\r\n",
                "3\r\n0\r\n1\r\n"
            ],
            [
                "10\r\n1 1 1 4 5 3 5 6 3\r\n0 0 0 0 0 0 1 0 0 0\r\n10\r\nget 2\r\nget 4\r\nget 7\r\nget 3\r\npow 2\r\npow 5\r\npow 2\r\nget 7\r\npow 6\r\nget 10\r\n",
                "0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n"
            ],
            [
                "10\r\n1 1 3 1 3 1 4 6 3\r\n0 1 1 1 1 1 1 1 0 0\r\n10\r\nget 9\r\nget 10\r\nget 4\r\nget 5\r\nget 5\r\nget 5\r\nget 10\r\nget 7\r\nget 5\r\nget 2\r\n",
                "0\r\n0\r\n2\r\n1\r\n1\r\n1\r\n0\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "10\r\n1 2 3 3 5 5 7 7 8\r\n0 0 0 0 1 1 1 1 0 0\r\n10\r\npow 3\r\nget 1\r\npow 9\r\nget 1\r\nget 1\r\nget 8\r\npow 8\r\npow 4\r\nget 10\r\npow 2\r\n",
                "4\r\n3\r\n3\r\n1\r\n0\r\n"
            ],
            [
                "10\r\n1 2 3 3 5 5 7 7 9\r\n1 1 0 1 0 0 1 0 0 0\r\n10\r\nget 2\r\nget 6\r\nget 4\r\nget 2\r\nget 1\r\nget 2\r\nget 6\r\nget 9\r\nget 10\r\nget 7\r\n",
                "3\r\n0\r\n1\r\n3\r\n4\r\n3\r\n0\r\n0\r\n0\r\n1\r\n"
            ],
            [
                "10\r\n1 1 3 3 5 5 7 7 9\r\n0 0 1 1 0 0 1 1 0 0\r\n10\r\npow 8\r\npow 4\r\npow 8\r\npow 5\r\npow 1\r\npow 2\r\npow 6\r\npow 6\r\npow 3\r\npow 2\r\n",
                ""
            ],
            [
                "10\r\n1 1 2 2 3 3 5 5 6\r\n1 1 1 1 0 0 1 1 0 0\r\n10\r\nget 2\r\nget 8\r\nget 10\r\nget 5\r\nget 5\r\npow 10\r\nget 10\r\nget 1\r\nget 7\r\npow 4\r\n",
                "3\r\n1\r\n0\r\n1\r\n1\r\n1\r\n7\r\n1\r\n"
            ],
            [
                "10\r\n1 1 2 2 3 3 4 4 5\r\n1 1 0 1 0 0 0 0 0 0\r\n10\r\nget 2\r\nget 5\r\npow 2\r\npow 4\r\nget 2\r\nget 4\r\npow 7\r\nget 10\r\npow 5\r\nget 6\r\n",
                "2\r\n0\r\n3\r\n1\r\n1\r\n0\r\n"
            ]
        ]
    }
]