[
    {
        "name": "Strip",
        "description": "Alexandra has a paper strip with n numbers on it. Let's call them ai from left\nto right. Now Alexandra wants to split it into some pieces (possibly 1). For\neach piece of strip, it must satisfy: Each piece should contain at least l\nnumbers. The difference between the maximal and the minimal number on the\npiece should be at most s.Please help Alexandra to find the minimal number of\npieces meeting the condition above. Input The first line contains three space-\nseparated integers n, s, l (1 \u2264 n \u2264 10^5, 0 \u2264 s \u2264 10^9, 1 \u2264 l \u2264 10^5). The\nsecond line contains n integers ai separated by spaces ( - 10^9 \u2264 ai \u2264 10^9).\nOutput Output the minimal number of strip pieces. If there are no ways to\nsplit the strip, output -1. Examples Input 7 2 2 1 3 1 2 4 1 2 Output 3 Input\n7 2 2 1 100 1 100 1 100 1 Output -1 Note For the first sample, we can split\nthe strip into 3 pieces: [1, 3, 1], [2, 4], [1, 2]. For the second sample, we\ncan't let 1 and 100 be on the same piece, so no solution exists.\n\n",
        "cf_contest_id": 487,
        "cf_index": "B",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dp",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 2 2\r\n1 3 1 2 4 1 2\r\n",
                "3\r\n"
            ],
            [
                "7 2 2\r\n1 100 1 100 1 100 1\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 0 1\r\n0\r\n",
                "1\r\n"
            ],
            [
                "6 565 2\r\n31 76 162 -182 -251 214\r\n",
                "1\r\n"
            ],
            [
                "1 0 1\r\n0\r\n",
                "1\r\n"
            ],
            [
                "1 0 1\r\n-1000000000\r\n",
                "1\r\n"
            ],
            [
                "1 100 2\r\n42\r\n",
                "-1\r\n"
            ],
            [
                "2 1000000000 1\r\n-1000000000 1000000000\r\n",
                "2\r\n"
            ],
            [
                "2 1000000000 2\r\n-1000000000 1000000000\r\n",
                "-1\r\n"
            ],
            [
                "10 3 3\r\n1 1 1 1 1 5 6 7 8 9\r\n",
                "-1\r\n"
            ],
            [
                "10 3 3\r\n1 1 1 2 2 5 6 7 8 9\r\n",
                "3\r\n"
            ]
        ]
    }
]