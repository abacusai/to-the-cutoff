[
    {
        "name": "Block Towers",
        "description": "There are \n    n\n block towers, numbered from \n    1\n to \n    n\n. The\n\n    i\n-th tower consists of \n    a_i\n blocks. In one move, you can move one\nblock from tower \n    i\n to tower \n    j\n, but only if \n    a_i > a_j\n. That\nmove increases \n    a_j\n by \n    1\n and decreases \n    a_i\n by \n    1\n. You\ncan perform as many moves as you would like (possibly, zero). What's the\nlargest amount of blocks you can have on the tower \n    1\n after the moves?\nInput The first line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    10^4\n) \u2014 the number of testcases. The first line of each testcase contains a\nsingle integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of\ntowers. The second line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n\n(\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the number of blocks on each tower. The sum\nof \n    n\n over all testcases doesn't exceed \n    2 \n    \u00b7 10^5\n. Output For\neach testcase, print the largest amount of blocks you can have on the tower\n\n    1\n after you make any number of moves (possibly, zero). Example Input 4 3\n1 2 3 3 1 2 2 2 1 1000000000 10 3 8 6 7 4 1 2 4 10 1 Output 3 2 500000001 9\nNote In the first testcase, you can move a block from tower \n    2\n to tower\n\n    1\n, making the block counts \n    [2, 1, 3]\n. Then move a block from tower\n\n    3\n to tower \n    1\n, making the block counts \n    [3, 1, 2]\n. Tower\n\n    1\n has \n    3\n blocks in it, and you can't obtain a larger amount. In the\nsecond testcase, you can move a block from any of towers \n    2\n or \n    3\n to\ntower \n    1\n, so that it has \n    2\n blocks in it. In the third testcase, you\ncan \n    500000000\n times move a block from tower \n    2\n to tower \n    1\n.\nAfter that the block countes will be \n    [500000001, 500000000]\n.\n\n",
        "cf_contest_id": 1767,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3\r\n1 2 3\r\n3\r\n1 2 2\r\n2\r\n1 1000000000\r\n10\r\n3 8 6 7 4 1 2 4 10 1\r\n",
                "3\r\n2\r\n500000001\r\n9\r\n"
            ]
        ],
        "private_cases": []
    }
]