[
    {
        "name": "Biathlon Track",
        "description": "Recently an official statement of the world Olympic Committee said that the\nOlympic Winter Games 2030 will be held in Tomsk. The city officials decided to\nprepare for the Olympics thoroughly and to build all the necessary Olympic\nfacilities as early as possible. First, a biathlon track will be built. To\nconstruct a biathlon track a plot of land was allocated, which is a rectangle\ndivided into n \u00d7 m identical squares. Each of the squares has two coordinates:\nthe number of the row (from 1 to n), where it is located, the number of the\ncolumn (from 1 to m), where it is located. Also each of the squares is\ncharacterized by its height. During the sports the biathletes will have to\nmove from one square to another. If a biathlete moves from a higher square to\na lower one, he makes a descent. If a biathlete moves from a lower square to a\nhigher one, he makes an ascent. If a biathlete moves between two squares with\nthe same height, then he moves on flat ground. The biathlon track should be a\nborder of some rectangular area of the allocated land on which biathletes will\nmove in the clockwise direction. It is known that on one move on flat ground\nan average biathlete spends tp seconds, an ascent takes tu seconds, a descent\ntakes td seconds. The Tomsk Administration wants to choose the route so that\nthe average biathlete passes it in as close to t seconds as possible. In other\nwords, the difference between time ts of passing the selected track and t\nshould be minimum. For a better understanding you can look at the first sample\nof the input data. In this sample n = 6, m = 7, and the administration wants\nthe track covering time to be as close to t = 48 seconds as possible, also, tp\n= 3, tu = 6 and td = 2. If we consider the rectangle shown on the image by\narrows, the average biathlete can move along the boundary in a clockwise\ndirection in exactly 48 seconds. The upper left corner of this track is\nlocated in the square with the row number 4, column number 3 and the lower\nright corner is at square with row number 6, column number 7. Among other\nthings the administration wants all sides of the rectangle which boundaries\nwill be the biathlon track to consist of no less than three squares and to be\ncompletely contained within the selected land. You are given the description\nof the given plot of land and all necessary time values. You are to write the\nprogram to find the most suitable rectangle for a biathlon track. If there are\nseveral such rectangles, you are allowed to print any of them. Input The first\nline of the input contains three integers n, m and t (3 \u2264 n, m \u2264 300, 1 \u2264 t \u2264\n10^9) \u2014 the sizes of the land plot and the desired distance covering time. The\nsecond line also contains three integers tp, tu and td (1 \u2264 tp, tu, td \u2264 100)\n\u2014 the time the average biathlete needs to cover a flat piece of the track, an\nascent and a descent respectively. Then n lines follow, each line contains m\nintegers that set the heights of each square of the given plot of land. Each\nof the height values is a positive integer, not exceeding 10^6. Output In a\nsingle line of the output print four positive integers \u2014 the number of the row\nand the number of the column of the upper left corner and the number of the\nrow and the number of the column of the lower right corner of the rectangle\nthat is chosen for the track. Examples Input 6 7 48 3 6 2 5 4 8 3 3 7 9 4 1 6\n8 7 1 1 1 6 4 6 4 8 6 7 2 6 1 6 9 4 1 9 8 6 3 9 2 4 5 6 8 4 3 7 Output 4 3 6 7\n\n",
        "cf_contest_id": 424,
        "cf_index": "D",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "constructive algorithms",
            "data structures",
            "dp"
        ],
        "time_limit_seconds": 4.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 7 48\r\n3 6 2\r\n5 4 8 3 3 7 9\r\n4 1 6 8 7 1 1\r\n1 6 4 6 4 8 6\r\n7 2 6 1 6 9 4\r\n1 9 8 6 3 9 2\r\n4 5 6 8 4 3 7\r\n",
                "1 1 4 4\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 3 10\r\n1 3 2\r\n1 2 3\r\n3 4 5\r\n5 6 7\r\n",
                "1 1 3 3\r\n"
            ],
            [
                "12 10 120\r\n3 3 3\r\n10 15 12 6 10 13 10 9 15 6\r\n14 12 19 19 5 8 7 16 17 12\r\n15 14 9 12 4 4 7 15 16 9\r\n8 17 5 12 16 15 7 13 19 13\r\n13 17 13 19 4 17 11 12 12 11\r\n16 6 9 16 17 4 19 4 9 15\r\n6 18 6 17 19 6 10 8 13 16\r\n11 9 13 7 19 11 15 4 16 8\r\n19 19 5 15 13 6 8 4 4 17\r\n18 15 7 15 18 9 19 11 10 18\r\n14 8 16 14 16 10 15 19 4 11\r\n19 12 12 7 17 9 10 16 12 13\r\n",
                "1 1 12 10\r\n"
            ],
            [
                "3 3 20785\r\n80 70 73\r\n905205 329139 263778\r\n231118 685527 781999\r\n590480 165947 100042\r\n",
                "1 1 3 3\r\n"
            ],
            [
                "5 5 459\r\n3 63 12\r\n618395 369437 334229 506076 831036\r\n673101 980820 438237 572589 303362\r\n287731 530932 107204 314459 975747\r\n599625 246507 905257 860583 655096\r\n987487 937461 242262 475476 113650\r\n",
                "1 1 4 4\r\n"
            ]
        ]
    }
]