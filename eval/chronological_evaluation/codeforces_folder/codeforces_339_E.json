[
    {
        "name": "Three Swaps",
        "description": "Xenia the horse breeder has n (n > 1) horses that stand in a row. Each horse\nhas its own unique number. Initially, the i-th left horse has number i. That\nis, the sequence of numbers of horses in a row looks as follows (from left to\nright): 1, 2, 3, ..., n. Xenia trains horses before the performance. During\nthe practice sessions, she consistently gives them commands. Each command is a\npair of numbers l, r (1 \u2264 l < r \u2264 n). The command l, r means that the horses\nthat are on the l-th, (l + 1)-th, (l + 2)-th, ..., r-th places from the left\nmust be rearranged. The horses that initially stand on the l-th and r-th\nplaces will swap. The horses on the (l + 1)-th and (r - 1)-th places will\nswap. The horses on the (l + 2)-th and (r - 2)-th places will swap and so on.\nIn other words, the horses that were on the segment [l, r] change their order\nto the reverse one. For example, if Xenia commanded l = 2, r = 5, and the\nsequence of numbers of horses before the command looked as (2, 1, 3, 4, 5, 6),\nthen after the command the sequence will be (2, 5, 4, 3, 1, 6). We know that\nduring the practice Xenia gave at most three commands of the described form.\nYou have got the final sequence of numbers of horses by the end of the\npractice. Find what commands Xenia gave during the practice. Note that you do\nnot need to minimize the number of commands in the solution, find any valid\nsequence of at most three commands. Input The first line contains an integer n\n(2 \u2264 n \u2264 1000) \u2014 the number of horses in the row. The second line contains n\ndistinct integers a1, a2, ..., an (1 \u2264 ai \u2264 n), where ai is the number of the\ni-th left horse in the row after the practice. Output The first line should\ncontain integer k (0 \u2264 k \u2264 3) \u2014 the number of commads Xenia gave during the\npractice. In each of the next k lines print two integers. In the i-th line\nprint numbers li, ri (1 \u2264 li < ri \u2264 n) \u2014 Xenia's i-th command during the\npractice. It is guaranteed that a solution exists. If there are several\nsolutions, you are allowed to print any of them. Examples Input 5 1 4 3 2 5\nOutput 1 2 4 Input 6 2 1 4 3 6 5 Output 3 1 2 3 4 5 6\n\n",
        "cf_contest_id": 339,
        "cf_index": "E",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 4 3 2 5\r\n",
                "3\r\n2 4\r\n1 3\r\n1 3\r\n"
            ],
            [
                "6\r\n2 1 4 3 6 5\r\n",
                "3\r\n5 6\r\n3 4\r\n1 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 2\r\n",
                "0\r\n"
            ],
            [
                "3\r\n3 2 1\r\n",
                "1\r\n1 3\r\n"
            ],
            [
                "2\r\n2 1\r\n",
                "1\r\n1 2\r\n"
            ],
            [
                "6\r\n1 2 3 4 5 6\r\n",
                "0\r\n"
            ],
            [
                "100\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 70 71 72 73 74 26 25 24 23 22 98 99 100\r\n",
                "3\r\n47 69\r\n27 74\r\n22 97\r\n"
            ],
            [
                "99\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 40 41 42 43 44 45 46 47 48 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 91 90 89 14 15 16 17 18 92 93 94 95 96 97 98 99\r\n",
                "3\r\n14 88\r\n84 91\r\n54 62\r\n"
            ],
            [
                "98\r\n1 2 3 4 5 6 7 8 9 78 77 76 75 74 94 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 95 96 97 98\r\n",
                "3\r\n74 93\r\n38 94\r\n10 43\r\n"
            ],
            [
                "10\r\n1 4 5 6 2 10 9 8 7 3\r\n",
                "3\r\n3 6\r\n6 10\r\n2 5\r\n"
            ],
            [
                "11\r\n1 7 6 5 4 3 2 10 8 9 11\r\n",
                "3\r\n9 10\r\n8 9\r\n2 7\r\n"
            ],
            [
                "12\r\n9 10 2 1 4 5 6 7 8 3 11 12\r\n",
                "3\r\n4 8\r\n3 10\r\n1 4\r\n"
            ],
            [
                "13\r\n4 9 8 7 6 5 1 13 12 11 10 3 2\r\n",
                "3\r\n1 4\r\n2 9\r\n8 13\r\n"
            ],
            [
                "14\r\n1 2 3 5 4 6 13 7 12 11 10 9 8 14\r\n",
                "3\r\n8 13\r\n7 8\r\n4 5\r\n"
            ],
            [
                "30\r\n1 2 3 4 5 6 7 8 18 17 15 16 14 13 28 27 26 25 24 23 22 21 20 19 9 10 11 12 29 30\r\n",
                "3\r\n9 18\r\n15 28\r\n11 12\r\n"
            ],
            [
                "10\r\n10 5 4 9 8 7 6 3 2 1\r\n",
                "3\r\n5 9\r\n4 8\r\n1 10\r\n"
            ],
            [
                "11\r\n3 4 1 2 5 6 7 10 9 8 11\r\n",
                "3\r\n8 10\r\n2 4\r\n1 3\r\n"
            ],
            [
                "7\r\n6 7 1 3 2 4 5\r\n",
                "3\r\n2 3\r\n1 6\r\n2 7\r\n"
            ],
            [
                "21\r\n1 5 4 3 2 6 7 8 9 10 11 16 17 12 13 14 15 18 19 20 21\r\n",
                "3\r\n12 16\r\n13 17\r\n2 5\r\n"
            ],
            [
                "10\r\n10 9 8 7 6 5 4 3 2 1\r\n",
                "1\r\n1 10\r\n"
            ],
            [
                "30\r\n1 2 3 4 5 6 7 8 25 26 9 10 11 19 18 17 16 15 14 13 12 20 21 22 23 24 27 28 29 30\r\n",
                "3\r\n12 19\r\n9 25\r\n10 26\r\n"
            ],
            [
                "35\r\n1 2 9 8 7 6 5 4 3 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 34 35 27 28 29 30 31 32 33\r\n",
                "3\r\n27 34\r\n28 35\r\n3 9\r\n"
            ],
            [
                "30\r\n1 2 3 9 8 7 6 5 4 10 11 12 22 21 20 19 13 14 15 16 17 18 23 24 25 26 27 28 29 30\r\n",
                "3\r\n13 18\r\n13 22\r\n4 9\r\n"
            ],
            [
                "58\r\n4 3 2 1 5 6 7 8 9 10 11 12 13 14 48 49 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 50 51 52 53 54 55 56 57 58\r\n",
                "3\r\n15 48\r\n16 49\r\n1 4\r\n"
            ],
            [
                "6\r\n4 5 1 2 6 3\r\n",
                "3\r\n3 6\r\n1 3\r\n1 5\r\n"
            ],
            [
                "10\r\n5 4 3 2 10 1 9 8 7 6\r\n",
                "3\r\n6 10\r\n1 5\r\n5 6\r\n"
            ]
        ]
    }
]