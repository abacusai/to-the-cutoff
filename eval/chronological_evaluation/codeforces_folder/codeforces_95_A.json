[
    {
        "name": "Hockey",
        "description": "Petya loves hockey very much. One day, as he was watching a hockey match, he\nfell asleep. Petya dreamt of being appointed to change a hockey team's name.\nThus, Petya was given the original team name w and the collection of forbidden\nsubstrings s1, s2, ..., sn. All those strings consist of uppercase and\nlowercase Latin letters. String w has the length of |w|, its characters are\nnumbered from 1 to |w|. First Petya should find all the occurrences of\nforbidden substrings in the w string. During the search of substrings the case\nof letter shouldn't be taken into consideration. That is, strings \"aBC\" and\n\"ABc\" are considered equal. After that Petya should perform the replacement of\nall letters covered by the occurrences. More formally: a letter in the\nposition i should be replaced by any other one if for position i in string w\nthere exist pair of indices l, r (1 \u2264 l \u2264 i \u2264 r \u2264 |w|) such that substring w[l\n... r] is contained in the collection s1, s2, ..., sn, when using case\ninsensitive comparison. During the replacement the letter's case should remain\nthe same. Petya is not allowed to replace the letters that aren't covered by\nany forbidden substring. Letter letter (uppercase or lowercase) is considered\nlucky for the hockey players. That's why Petya should perform the changes so\nthat the letter occurred in the resulting string as many times as possible.\nHelp Petya to find such resulting string. If there are several such strings,\nfind the one that comes first lexicographically. Note that the process of\nreplacements is not repeated, it occurs only once. That is, if after Petya's\nreplacements the string started to contain new occurrences of bad substrings,\nPetya pays no attention to them. Input The first line contains the only\ninteger n (1 \u2264 n \u2264 100) \u2014 the number of forbidden substrings in the\ncollection. Next n lines contain these substrings. The next line contains\nstring w. All those n + 1 lines are non-empty strings consisting of uppercase\nand lowercase Latin letters whose length does not exceed 100. The last line\ncontains a lowercase letter letter. Output Output the only line \u2014 Petya's\nresulting string with the maximum number of letters letter. If there are\nseveral answers then output the one that comes first lexicographically. The\nlexicographical comparison is performed by the standard < operator in modern\nprogramming languages. The line a is lexicographically smaller than the line\nb, if a is a prefix of b, or there exists such an i (1 \u2264 i \u2264 |a|), that ai <\nbi, and for any j (1 \u2264 j < i) aj = bj. |a| stands for the length of string a.\nExamples Input 3 bers ucky elu PetrLoveLuckyNumbers t Output\nPetrLovtTttttNumtttt Input 4 hello party abefglghjdhfgj IVan petrsmatchwin a\nOutput petrsmatchwin Input 2 aCa cba abAcaba c Output abCacba\n\n",
        "cf_contest_id": 95,
        "cf_index": "A",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\nbers\r\nucky\r\nelu\r\nPetrLoveLuckyNumbers\r\nt\r\n",
                "PetrLovtTttttNumtttt"
            ],
            [
                "4\r\nhello\r\nparty\r\nabefglghjdhfgj\r\nIVan\r\npetrsmatchwin\r\na\r\n",
                "petrsmatchwin"
            ],
            [
                "2\r\naCa\r\ncba\r\nabAcaba\r\nc\r\n",
                "abCacba"
            ]
        ],
        "private_cases": [
            [
                "3\r\nlol\r\nhello\r\neho\r\nPetrUnited\r\nt\r\n",
                "PetrUnited"
            ],
            [
                "2\r\ntrsd\r\ndream\r\nPetrsDreamOh\r\ny\r\n",
                "PeyyyYyyyyOh"
            ],
            [
                "1\r\nPetrsDreamOh\r\nPetrsDreamOh\r\nh\r\n",
                "HhhhhHhhhhHa"
            ],
            [
                "3\r\netr\r\ned\r\nied\r\nPetrUnited\r\nd\r\n",
                "PdddUnitda"
            ],
            [
                "3\r\netr\r\ned\r\nied\r\nPetrUnited\r\nz\r\n",
                "PzzzUnitzz"
            ],
            [
                "3\r\nab\r\nBa\r\naB\r\nABBA\r\na\r\n",
                "BAAB"
            ],
            [
                "3\r\nab\r\nBa\r\naB\r\nABBAC\r\nb\r\n",
                "BAABC"
            ],
            [
                "7\r\na\r\nb\r\ng\r\nk\r\ne\r\nt\r\nt\r\nA\r\na\r\n",
                "B"
            ],
            [
                "4\r\nEfron\r\nKeyt\r\ncesho\r\ncool\r\nCodeForcesHockeyTeam\r\np\r\n",
                "CodeForpppPpcpppPeam"
            ],
            [
                "4\r\nEfron\r\nKeyt\r\ncesho\r\ncool\r\nCodeForcesOldHockeyNewTeam\r\np\r\n",
                "CodeForcesOldHockeyNewTeam"
            ],
            [
                "2\r\nA\r\nB\r\nabababBabaBBaBBBBAaaaAAAAA\r\na\r\n",
                "bababaAbabAAbAAAABbbbBBBBB"
            ],
            [
                "7\r\nS\r\nT\r\ng\r\ni\r\nO\r\nr\r\nq\r\nkljpfP\r\nv\r\n",
                "kljpfP"
            ],
            [
                "47\r\nV\r\nS\r\ng\r\nr\r\nC\r\nR\r\nB\r\nb\r\nl\r\nW\r\nJ\r\ni\r\nU\r\nn\r\nq\r\nq\r\nj\r\nL\r\nR\r\nu\r\nQ\r\nC\r\nf\r\nC\r\nU\r\nu\r\nx\r\nh\r\nq\r\nE\r\nY\r\nu\r\nK\r\nt\r\nM\r\nU\r\nA\r\nA\r\ns\r\ni\r\nV\r\nT\r\nj\r\nb\r\nk\r\nW\r\nN\r\nNlVwRlWzQQWoCI\r\nz\r\n",
                "ZzZzZzZzZZZoZZ"
            ],
            [
                "3\r\na\r\nA\r\na\r\nA\r\na\r\n",
                "B"
            ],
            [
                "3\r\na\r\nA\r\na\r\nA\r\nb\r\n",
                "B"
            ],
            [
                "4\r\na\r\nA\r\ni\r\nA\r\nPetyaIsVeryCoolGuy\r\np\r\n",
                "PetypPsVeryCoolGuy"
            ],
            [
                "3\r\njap\r\nthd\r\ndshipssinceW\r\nJapanisexperiencingitsgreatesthardshipssinceWorldWarIIthardshipssinceWorldWarIItesthardshixper\r\nc\r\n",
                "CccanisexperiencingitsgreatestharcccccccccacCorldWarIItharcccccccccacCorldWarIItesthardshixper"
            ],
            [
                "3\r\njap\r\nthd\r\ndshipssinceW\r\nJapanisexperiencingitsgreatesthardshipssinceWorldWarIIthardshipssinceWorldWarIItesthardshixper\r\na\r\n",
                "AbaanisexperiencingitsgreatestharaaaaaaaaaaaAorldWarIItharaaaaaaaaaaaAorldWarIItesthardshixper"
            ],
            [
                "7\r\na\r\nh\r\nu\r\np\r\nfgh\r\nwyz\r\ndefghijkl\r\nabcdefghijklmnopqrstuvwxyz\r\na\r\n",
                "bbcaaaaaaaaamnoaqrstavwxyz"
            ],
            [
                "9\r\na\r\nh\r\nu\r\np\r\nz\r\nfgh\r\nwyz\r\ndefghijkl\r\nghijklmnopqrstu\r\nabcdefghijklmnopqrstuvwxyz\r\na\r\n",
                "bbcaaaaaaaaaaaaaaaaaavwxya"
            ],
            [
                "3\r\nab\r\nBa\r\naB\r\nABBA\r\nl\r\n",
                "LLLL"
            ]
        ]
    }
]