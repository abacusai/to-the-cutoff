[
    {
        "name": "Falling Sand (Easy Version)",
        "description": "This is the easy version of the problem. The difference between the versions\nis the constraints on \n    a_i\n. You can make hacks only if all versions of\nthe problem are solved. Little Dormi has recently received a puzzle from his\nfriend and needs your help to solve it. The puzzle consists of an upright\nboard with \n    n\n rows and \n    m\n columns of cells, some empty and some\nfilled with blocks of sand, and \n    m\n non-negative integers\n\n    a_1,a_2,\n    \u2026,a_m\n (\n    0 \n    \u2264 a_i \n    \u2264 n\n). In this version of\nthe problem, \n    a_i\n will be equal to the number of blocks of sand in column\n\n    i\n. When a cell filled with a block of sand is disturbed, the block of\nsand will fall from its cell to the sand counter at the bottom of the column\n(each column has a sand counter). While a block of sand is falling, other\nblocks of sand that are adjacent at any point to the falling block of sand\nwill also be disturbed and start to fall. Specifically, a block of sand\ndisturbed at a cell \n    (i,j)\n will pass through all cells below and\nincluding the cell \n    (i,j)\n within the column, disturbing all adjacent\ncells along the way. Here, the cells adjacent to a cell \n    (i,j)\n are\ndefined as \n    (i-1,j)\n, \n    (i,j-1)\n, \n    (i+1,j)\n, and \n    (i,j+1)\n (if\nthey are within the grid). Note that the newly falling blocks can disturb\nother blocks. In one operation you are able to disturb any piece of sand. The\npuzzle is solved when there are at least \n    a_i\n blocks of sand counted in\nthe \n    i\n-th sand counter for each column from \n    1\n to \n    m\n. You are\nnow tasked with finding the minimum amount of operations in order to solve the\npuzzle. Note that Little Dormi will never give you a puzzle that is impossible\nto solve. Input The first line consists of two space-separated positive\nintegers \n    n\n and \n    m\n (\n    1 \n    \u2264 n \n    \u00b7 m \n    \u2264 400\n     000\n).\nEach of the next \n    n\n lines contains \n    m\n characters, describing each\nrow of the board. If a character on a line is '.', the corresponding cell is\nempty. If it is '#', the cell contains a block of sand. The final line\ncontains \n    m\n non-negative integers \n    a_1,a_2,\n    \u2026,a_m\n (\n    0 \n    \u2264\n    a_i \n    \u2264 n\n) \u2014 the minimum amount of blocks of sand that needs to fall\nbelow the board in each column. In this version of the problem, \n    a_i\n will\nbe equal to the number of blocks of sand in column \n    i\n. Output Print one\nnon-negative integer, the minimum amount of operations needed to solve the\npuzzle. Examples Input 5 7 #....#. .#.#... #....#. #....## #.#.... 4 1 1 1 0 3\n1 Output 3 Input 3 3 #.# #.. ##. 3 1 1 Output 1 Note For example \n    1\n, by\ndisturbing both blocks of sand on the first row from the top at the first and\nsixth columns from the left, and the block of sand on the second row from the\ntop and the fourth column from the left, it is possible to have all the\nrequired amounts of sand fall in each column. It can be proved that this is\nnot possible with fewer than \n    3\n operations, and as such the answer is\n\n    3\n. Here is the puzzle from the first example. For example \n    2\n, by\ndisturbing the cell on the top row and rightmost column, one can cause all of\nthe blocks of sand in the board to fall into the counters at the bottom. Thus,\nthe answer is \n    1\n. Here is the puzzle from the second example.\n\n",
        "cf_contest_id": 1534,
        "cf_index": "F1",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graphs",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5 7\r\n#....#.\r\n.#.#...\r\n#....#.\r\n#....##\r\n#.#....\r\n4 1 1 1 0 3 1\r\n",
                "3\r\n"
            ],
            [
                "3 3\r\n#.#\r\n#..\r\n##.\r\n3 1 1\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n.\r\n0\r\n",
                "0\r\n"
            ],
            [
                "1 1\r\n#\r\n1\r\n",
                "1\r\n"
            ]
        ]
    }
]