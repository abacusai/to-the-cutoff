[
    {
        "name": "Dreamoon and Ranking Collection",
        "description": "Dreamoon is a big fan of the Codeforces contests. One day, he claimed that he\nwill collect all the places from \n    1\n to \n    54\n after two more rated\ncontests. It's amazing! Based on this, you come up with the following problem:\nThere is a person who participated in \n    n\n Codeforces rounds. His place in\nthe first round is \n    a_1\n, his place in the second round is \n    a_2\n, ...,\nhis place in the \n    n\n-th round is \n    a_n\n. You are given a positive non-\nzero integer \n    x\n. Please, find the largest \n    v\n such that this person\ncan collect all the places from \n    1\n to \n    v\n after \n    x\n more rated\ncontests. In other words, you need to find the largest \n    v\n, such that it\nis possible, that after \n    x\n more rated contests, for each \n    1 \n    \u2264 i\n    \n    \u2264 v\n, there will exist a contest where this person took the \n    i\n-th\nplace. For example, if \n    n=6\n, \n    x=2\n and \n    a=[3,1,1,5,7,10]\n then\nanswer is \n    v=5\n, because if on the next two contest he will take places\n\n    2\n and \n    4\n, then he will collect all places from \n    1\n to \n    5\n,\nso it is possible to get \n    v=5\n. Input The first line contains an integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 5\n) denoting the number of test cases in the\ninput. Each test case contains two lines. The first line contains two integers\n\n    n, x\n (\n    1 \n    \u2264 n, x \n    \u2264 100\n). The second line contains \n    n\n\npositive non-zero integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i\n    \n    \u2264 100\n). Output For each test case print one line containing the\nlargest \n    v\n, such that it is possible that after \n    x\n other contests,\nfor each \n    1 \n    \u2264 i \n    \u2264 v\n, there will exist a contest where this\nperson took the \n    i\n-th place. Example Input 5 6 2 3 1 1 5 7 10 1 100 100\n11 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 4 57 80 60 40 20 Output 5 101 2 2 60 Note The\nfirst test case is described in the statement. In the second test case, the\nperson has one hundred future contests, so he can take place\n\n    1,2,\n    \u2026,99\n and place \n    101\n on them in some order, to collect\nplaces \n    1,2,\n    \u2026,101\n.\n\n",
        "cf_contest_id": 1330,
        "cf_index": "A",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n6 2\r\n3 1 1 5 7 10\r\n1 100\r\n100\r\n11 1\r\n1 1 1 1 1 1 1 1 1 1 1\r\n1 1\r\n1\r\n4 57\r\n80 60 40 20\r\n",
                "5\r\n101\r\n2\r\n2\r\n60\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n1 1\r\n2\r\n2 1\r\n1 1\r\n4 1\r\n3 1 3 1\r\n1 100\r\n1\r\n1 100\r\n2\r\n",
                "2\r\n2\r\n3\r\n101\r\n101\r\n"
            ],
            [
                "1\r\n3 3\r\n4 5 6\r\n",
                "6\r\n"
            ],
            [
                "1\r\n5 1\r\n1 3 4 6 6\r\n",
                "4\r\n"
            ],
            [
                "1\r\n4 5\r\n6 6 7 7\r\n",
                "7\r\n"
            ],
            [
                "1\r\n9 1\r\n1 2 3 4 5 7 8 9 10\r\n",
                "10\r\n"
            ],
            [
                "1\r\n5 3\r\n1 3 6 7 8\r\n",
                "8\r\n"
            ],
            [
                "1\r\n3 1\r\n1 3 4\r\n",
                "4\r\n"
            ],
            [
                "1\r\n6 1\r\n1 3 4 5 6 7\r\n",
                "7\r\n"
            ],
            [
                "1\r\n5 10\r\n2 11 13 14 15\r\n",
                "15\r\n"
            ],
            [
                "1\r\n5 1\r\n1 2 4 5 6\r\n",
                "6\r\n"
            ],
            [
                "1\r\n4 1\r\n1 3 4 5\r\n",
                "5\r\n"
            ],
            [
                "1\r\n2 1\r\n2 3\r\n",
                "3\r\n"
            ],
            [
                "1\r\n2 2\r\n3 4\r\n",
                "4\r\n"
            ],
            [
                "1\r\n4 3\r\n4 5 6 7\r\n",
                "7\r\n"
            ],
            [
                "1\r\n3 3\r\n1 2 6\r\n",
                "6\r\n"
            ],
            [
                "1\r\n6 2\r\n1 3 4 6 7 8\r\n",
                "8\r\n"
            ],
            [
                "1\r\n5 2\r\n3 4 5 6 7\r\n",
                "7\r\n"
            ],
            [
                "1\r\n1 5\r\n6\r\n",
                "6\r\n"
            ],
            [
                "1\r\n2 4\r\n6 5\r\n",
                "6\r\n"
            ],
            [
                "1\r\n13 1\r\n1 2 3 4 5 6 7 8 9 10 11 12 14\r\n",
                "14\r\n"
            ],
            [
                "1\r\n1 1\r\n2\r\n",
                "2\r\n"
            ]
        ]
    }
]