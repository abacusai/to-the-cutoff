[
    {
        "name": "A Tide of Riverscape",
        "description": "Walking along a riverside, Mino silently takes a note of something.\"Time,\"\nMino thinks aloud. \"What?\" \"Time and tide wait for no man,\" explains Mino. \"My\nname, taken from the river, always reminds me of this.\" \"And what are you\nrecording?\" \"You see it, tide. Everything has its own period, and I think I've\nfigured out this one,\" says Mino with confidence. Doubtfully, Kanno peeks at\nMino's records. The records are expressed as a string \n    s\n of characters\n'0', '1' and '.', where '0' denotes a low tide, '1' denotes a high tide, and\n'.' denotes an unknown one (either high or low). You are to help Mino\ndetermine whether it's possible that after replacing each '.' independently\nwith '0' or '1', a given integer \n    p\n is not a period of the resulting\nstring. In case the answer is yes, please also show such a replacement to\nMino. In this problem, a positive integer \n    p\n is considered a period of\nstring \n    s\n, if for all \n    1 \n    \u2264 i \n    \u2264\n    | s \n    | - p\n,\nthe \n    i\n-th and \n    (i + p)\n-th characters of \n    s\n are the same. Here\n\n    | s \n    |\n is the length of \n    s\n. Input The first line\ncontains two space-separated integers \n    n\n and \n    p\n (\n    1 \n    \u2264 p\n    \n    \u2264 n \n    \u2264 2000\n) \u2014 the length of the given string and the supposed\nperiod, respectively. The second line contains a string \n    s\n of \n    n\n\ncharacters \u2014 Mino's records. \n    s\n only contains characters '0', '1' and\n'.', and contains at least one '.' character. Output Output one line \u2014 if it's\npossible that \n    p\n is not a period of the resulting string, output any one\nof such strings; otherwise output \"No\" (without quotes, you can print letters\nin any case (upper or lower)). Examples Input 10 7 1.0.1.0.1. Output\n1000100010 Input 10 6 1.0.1.1000 Output 1001101000 Input 10 9 1........1\nOutput No Note In the first example, \n    7\n is not a period of the resulting\nstring because the \n    1\n-st and \n    8\n-th characters of it are different.\nIn the second example, \n    6\n is not a period of the resulting string because\nthe \n    4\n-th and \n    10\n-th characters of it are different. In the third\nexample, \n    9\n is always a period because the only constraint that the first\nand last characters are the same is already satisfied. Note that there are\nmultiple acceptable answers for the first two examples, you can print any of\nthem.\n\n",
        "cf_contest_id": 989,
        "cf_index": "B",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10 7\r\n1.0.1.0.1.\r\n",
                "1000100010\r\n"
            ],
            [
                "10 6\r\n1.0.1.1000\r\n",
                "1100101000\r\n"
            ],
            [
                "10 9\r\n1........1\r\n",
                "No\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n.\r\n",
                "No\r\n"
            ],
            [
                "17 10\r\n..1.100..1..0.100\r\n",
                "10101000010000100\r\n"
            ],
            [
                "2 1\r\n0.\r\n",
                "01\r\n"
            ],
            [
                "2 1\r\n..\r\n",
                "10\r\n"
            ],
            [
                "3 1\r\n.0.\r\n",
                "100\r\n"
            ],
            [
                "3 1\r\n00.\r\n",
                "001\r\n"
            ],
            [
                "3 2\r\n0..\r\n",
                "001\r\n"
            ],
            [
                "3 2\r\n0.0\r\n",
                "No\r\n"
            ],
            [
                "3 2\r\n1..\r\n",
                "100\r\n"
            ],
            [
                "3 2\r\n.1.\r\n",
                "110\r\n"
            ],
            [
                "3 2\r\n1.0\r\n",
                "100\r\n"
            ],
            [
                "3 3\r\n1..\r\n",
                "No\r\n"
            ],
            [
                "3 3\r\n.00\r\n",
                "No\r\n"
            ],
            [
                "5 3\r\n0.000\r\n",
                "01000\r\n"
            ],
            [
                "10 6\r\n10010.1001\r\n",
                "No\r\n"
            ],
            [
                "75 38\r\n00.0.1.0.0110.1.00010..100.1110..110..00.0.1.0.0110.1.00010..100.1110..110.\r\n",
                "001001000011001000010001000111000110000000010000110010000100010001110001100\r\n"
            ],
            [
                "5 4\r\n.101.\r\n",
                "11010\r\n"
            ],
            [
                "4 2\r\n101.\r\n",
                "1011\r\n"
            ],
            [
                "5 4\r\n.1011\r\n",
                "01011\r\n"
            ],
            [
                "2 1\r\n..\r\n",
                "10\r\n"
            ],
            [
                "5 3\r\n00.11\r\n",
                "00011\r\n"
            ],
            [
                "10 8\r\n1111.00000\r\n",
                "1111000000\r\n"
            ],
            [
                "10 3\r\n11111111.1\r\n",
                "1111111101\r\n"
            ],
            [
                "3 2\r\n1.0\r\n",
                "100\r\n"
            ],
            [
                "6 4\r\n11..10\r\n",
                "110010\r\n"
            ],
            [
                "4 2\r\n.111\r\n",
                "0111\r\n"
            ],
            [
                "3 2\r\n01.\r\n",
                "011\r\n"
            ],
            [
                "5 4\r\n10.00\r\n",
                "10000\r\n"
            ],
            [
                "2 1\r\n0.\r\n",
                "01\r\n"
            ],
            [
                "8 4\r\n111111..\r\n",
                "11111100\r\n"
            ],
            [
                "3 2\r\n0.1\r\n",
                "001\r\n"
            ],
            [
                "4 1\r\n111.\r\n",
                "1110\r\n"
            ],
            [
                "3 1\r\n01.\r\n",
                "010\r\n"
            ]
        ]
    }
]