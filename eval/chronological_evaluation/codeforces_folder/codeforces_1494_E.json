[
    {
        "name": "A-Z Graph",
        "description": "You are given a directed graph consisting of \n    n\n vertices. Each directed\nedge (or arc) labeled with a single character. Initially, the graph is empty.\nYou should process \n    m\n queries with it. Each query is one of three types:\n\"\n    +\n \n    u\n \n    v\n \n    c\n\" \u2014 add arc from \n    u\n to \n    v\n with label\n\n    c\n. It's guaranteed that there is no arc \n    (u, v)\n in the graph at\nthis moment; \"\n    -\n \n    u\n \n    v\n\" \u2014 erase arc from \n    u\n to \n    v\n.\nIt's guaranteed that the graph contains arc \n    (u, v)\n at this moment;\n\"\n    ?\n \n    k\n\" \u2014 find the sequence of \n    k\n vertices \n    v_1, v_2,\n    \n    \u2026, v_k\n such that there exist both routes \n    v_1 \n    \u2192 v_2 \n    \u2192\n    \u2026\n    \u2192 v_k\n and \n    v_k \n    \u2192 v_k - 1\n    \u2192\n    \u2026\n    \u2192 v_1\n and\nif you write down characters along both routes you'll get the same string. You\ncan visit the same vertices any number of times. Input The first line contains\ntwo integers \n    n\n and \n    m\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n; \n    1\n    \n    \u2264 m \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of vertices in the graph and the\nnumber of queries. The next \n    m\n lines contain queries \u2014 one per line. Each\nquery is one of three types: \"\n    +\n \n    u\n \n    v\n \n    c\n\" (\n    1 \n    \u2264 u,\n    v \n    \u2264 n\n; \n    u \n    \u2260 v\n; \n    c\n is a lowercase Latin letter); \"\n    -\n\n\n    u\n \n    v\n\" (\n    1 \n    \u2264 u, v \n    \u2264 n\n; \n    u \n    \u2260 v\n); \"\n    ?\n\n\n    k\n\" (\n    2 \n    \u2264 k \n    \u2264 10^5\n). It's guaranteed that you don't add\nmultiple edges and erase only existing edges. Also, there is at least one\nquery of the third type. Output For each query of the third type, print YES if\nthere exist the sequence \n    v_1, v_2, \n    \u2026, v_k\n described above, or NO\notherwise. Example Input 3 11  1 2 a  2 3 b  3 2 a  2 1 b ? 3 ? 2 \u00ad 2\n1 \u00ad 3 2  2 1 c  3 2 d ? 5 Output YES NO YES Note In the first query of\nthe third type \n    k = 3\n, we can, for example, choose a sequence \n    [1, 2,\n    3]\n, since \n    1 \n     2 \n     3\n\nand \n    3 \n     2 \n     1\n. In the\nsecond query of the third type \n    k = 2\n, and we can't find sequence \n    p_1,\n    p_2\n such that arcs \n    (p_1, p_2)\n and \n    (p_2, p_1)\n have the same\ncharacters. In the third query of the third type, we can, for example, choose\na sequence \n    [1, 2, 3, 2, 1]\n, where \n    1 \n     2\n    \n     3 \n     2\n    \n     1\n.\n\n",
        "cf_contest_id": 1494,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "graphs",
            "hashing"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 11\r\n+ 1 2 a\r\n+ 2 3 b\r\n+ 3 2 a\r\n+ 2 1 b\r\n? 3\r\n? 2\r\n- 2 1\r\n- 3 2\r\n+ 2 1 c\r\n+ 3 2 d\r\n? 5\r\n",
                "YES\r\nNO\r\nYES\r\n"
            ]
        ],
        "private_cases": []
    }
]