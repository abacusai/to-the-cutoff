[
    {
        "name": "Copium Permutation",
        "description": "You are given a permutation \n    a_1,a_2,\n    \u2026,a_n\n of the first \n    n\n\npositive integers. A subarray \n    [l,r]\n is called copium if we can rearrange\nit so that it becomes a sequence of consecutive integers, or more formally, if\n\n    \n\n    max(a_l,a_l+1,\n    \u2026,a_r)-\n    min(a_l,a_l+1,\n    \u2026,a_r)=r-l\n\n    \n\nFor each \n    k\n in the range \n    [0,n]\n, print out the maximum number of\ncopium subarrays of \n    a\n over all ways of rearranging the last \n    n-k\n\nelements of \n    a\n. Input Each test contains multiple test cases. The first\nline contains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n).\nThe description of the test cases follows. The first line of each test case\ncontains a single integer \n    n\n (\n    1\n    \u2264 n\n    \u2264 2\n    \u00b7 10^5\n). The\nsecond line of each test case contains \n    n\n integers \n    a_1, a_2, \n    \u2026,\n    a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n). It is guaranteed that the given numbers\nform a permutation of length \n    n\n. It is guaranteed that the sum of \n    n\n\nover all test cases does not exceed \n    2\n    \u00b7 10^5\n. Output For each test\ncase print \n    n+1\n integers as the answers for each \n    k\n in the range\n\n    [0,n]\n. Example Input 5 5 5 2 1 4 3 4 2 1 4 3 1 1 8 7 5 8 1 4 2 6 3 10 1\n4 5 3 7 8 9 2 10 6 Output 15 15 11 10 9 9 10 8 8 7 7 1 1 36 30 25 19 15 13 12\n9 9 55 55 41 35 35 25 22 22 19 17 17 Note In the first test case, the answer\npermutations for each \n    k\n are \n    [1,2,3,4,5]\n, \n    [5,4,3,2,1]\n,\n\n    [5,2,3,4,1]\n, \n    [5,2,1,3,4]\n, \n    [5,2,1,4,3]\n, \n    [5,2,1,4,3]\n. In\nthe second test case, the answer permutations for each \n    k\n are\n\n    [1,2,3,4]\n, \n    [2,1,3,4]\n, \n    [2,1,3,4]\n, \n    [2,1,4,3]\n,\n\n    [2,1,4,3]\n.\n\n",
        "cf_contest_id": 1827,
        "cf_index": "F",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "5\r\n5\r\n5 2 1 4 3\r\n4\r\n2 1 4 3\r\n1\r\n1\r\n8\r\n7 5 8 1 4 2 6 3\r\n10\r\n1 4 5 3 7 8 9 2 10 6\r\n",
                "15 15 11 10 9 9\r\n10 8 8 7 7\r\n1 1\r\n36 30 25 19 15 13 12 9 9\r\n55 55 41 35 35 25 22 22 19 17 17\r\n"
            ]
        ],
        "private_cases": []
    }
]