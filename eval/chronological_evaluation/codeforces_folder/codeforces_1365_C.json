[
    {
        "name": "Rotation Matching",
        "description": "After the mysterious disappearance of Ashish, his two favourite disciples\nIshika and Hriday, were each left with one half of a secret message. These\nmessages can each be represented by a permutation of size \n    n\n. Let's call\nthem \n    a\n and \n    b\n. Note that a permutation of \n    n\n elements is a\nsequence of numbers \n    a_1, a_2, \n    \u2026, a_n\n, in which every number from\n\n    1\n to \n    n\n appears exactly once. The message can be decoded by an\narrangement of sequence \n    a\n and \n    b\n, such that the number of matching\npairs of elements between them is maximum. A pair of elements \n    a_i\n and\n\n    b_j\n is said to match if: \n    i = j\n, that is, they are at the same\nindex. \n    a_i = b_j\n His two disciples are allowed to perform the following\noperation any number of times: choose a number \n    k\n and cyclically shift\none of the permutations to the left or right \n    k\n times. A single cyclic\nshift to the left on any permutation \n    c\n is an operation that sets\n\n    c_1:=c_2, c_2:=c_3, \n    \u2026, c_n:=c_1\n simultaneously. Likewise, a\nsingle cyclic shift to the right on any permutation \n    c\n is an operation\nthat sets \n    c_1:=c_n, c_2:=c_1, \n    \u2026, c_n:=c_n-1\n simultaneously.\nHelp Ishika and Hriday find the maximum number of pairs of elements that match\nafter performing the operation any (possibly zero) number of times. Input The\nfirst line of the input contains a single integer \n    n\n \n    (1 \n    \u2264 n \n    \u2264\n    2 \n    \u00b7 10^5)\n \u2014 the size of the arrays. The second line contains \n    n\n\nintegers \n    a_1\n, \n    a_2\n, ..., \n    a_n\n \n    (1 \n    \u2264 a_i \n    \u2264 n)\n \u2014\nthe elements of the first permutation. The third line contains \n    n\n\nintegers \n    b_1\n, \n    b_2\n, ..., \n    b_n\n \n    (1 \n    \u2264 b_i \n    \u2264 n)\n \u2014\nthe elements of the second permutation. Output Print the maximum number of\nmatching pairs of elements after performing the above operations some\n(possibly zero) times. Examples Input 5 1 2 3 4 5 2 3 4 5 1 Output 5 Input 5 5\n4 3 2 1 1 2 3 4 5 Output 1 Input 4 1 3 2 4 4 2 3 1 Output 2 Note For the first\ncase: \n    b\n can be shifted to the right by \n    k = 1\n. The resulting\npermutations will be \n    1, 2, 3, 4, 5\n and \n    1, 2, 3, 4,\n    5\n. For the second case: The operation is not required. For all\npossible rotations of \n    a\n and \n    b\n, the number of matching pairs won't\nexceed \n    1\n. For the third case: \n    b\n can be shifted to the left by \n    k\n    = 1\n. The resulting permutations will be \n    1, 3, 2, 4\n and\n\n    2, 3, 1, 4\n. Positions \n    2\n and \n    4\n have matching pairs\nof elements. For all possible rotations of \n    a\n and \n    b\n, the number of\nmatching pairs won't exceed \n    2\n.\n\n",
        "cf_contest_id": 1365,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 2 3 4 5\r\n2 3 4 5 1\r\n",
                "5\r\n"
            ],
            [
                "5\r\n5 4 3 2 1\r\n1 2 3 4 5\r\n",
                "1\r\n"
            ],
            [
                "4\r\n1 3 2 4\r\n4 2 3 1\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "8\r\n6 7 1 3 5 4 8 2\r\n2 8 3 1 7 6 5 4\r\n",
                "2\r\n"
            ],
            [
                "12\r\n8 1 5 7 9 11 4 2 6 12 3 10\r\n9 4 7 3 8 11 10 1 2 6 5 12\r\n",
                "2\r\n"
            ],
            [
                "20\r\n9 15 11 8 10 5 19 13 12 18 3 20 17 14 2 16 7 4 1 6\r\n12 6 7 5 4 20 15 14 1 18 10 17 9 19 16 3 13 11 2 8\r\n",
                "2\r\n"
            ],
            [
                "18\r\n11 16 18 3 7 12 10 6 14 15 5 13 9 17 4 8 1 2\r\n16 9 8 7 4 13 6 17 3 18 14 11 5 1 15 12 10 2\r\n",
                "3\r\n"
            ],
            [
                "5\r\n1 5 2 4 3\r\n5 4 2 1 3\r\n",
                "2\r\n"
            ]
        ]
    }
]