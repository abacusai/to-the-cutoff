[
    {
        "name": "Olympiad Training",
        "description": "Anton decided to get ready for an Olympiad in Informatics. Ilya prepared\n\n    n\n tasks for him to solve. It is possible to submit the solution for the\n\n    i\n-th task in the first \n    d_i\n days only. Anton cannot solve more\nthan one task a day. Ilya estimated the usefulness of the \n    i\n-th tasks as\n\n    r_i\n and divided the tasks into three topics, the topic of the\n\n    i\n-th task is \n    type_i\n. Anton wants to solve exactly \n    a\n tasks\non the first topic, \n    b\n tasks on the second topic and \n    c\n tasks on the\nthird topic. Tell Anton if it is possible to do so, and if it is, calculate\nthe maximum total usefulness of the tasks he may solve. Input The first line\nof input contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the\nnumber of test cases. The first line of each test case contains four integers\n\n    n, a, b, c\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n, \n    0 \n    \u2264 a, b, c \n    \u2264 n\n).\nThe following \n    n\n lines contain three integers each \u2014 \n    r_i, type_i,\n    d_i\n (\n    0 \n    \u2264 r_i \n    \u2264 10^9\n, \n    1 \n    \u2264 type_i \n    \u2264 3\n, \n    1\n    \n    \u2264 d_i \n    \u2264 n\n). The sum of \n    n\n over all test cases does not exceed\n\n    10^5\n. Output For each test case print \n    -1\n if Anton cannot reach his\ngoal; otherwise, print the maximum usefulness of the tasks he will solve.\nExample Input 4 4 1 1 0 1 2 1 1 1 1 0 1 2 1 2 2 3 1 1 1 1 1 2 7 2 1 9 3 2 4 2\n1 0 100 2 1 5 2 3 7 1 2 5 1 2 5 1 1 1 10 3 1 9 2 3 20 1 1 16 1 4 1 3 4 Output\n2 -1 17 35 Note In the first test case from the sample test Anton can solve\ntasks \n    2\n and \n    4\n. In the second test case from the sample test it is\nimpossible to fulfill Anton's wish. In the third test case from the sample\ntest it is optimal to solve tasks \n    2\n, \n    3\n and \n    4\n. In the last\ntest case from the sample test it is optimal to solve tasks \n    1\n, \n    2\n\nand \n    4\n.\n\n",
        "cf_contest_id": 1746,
        "cf_index": "G",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dp",
            "flows",
            "geometry",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4 1 1 0\r\n1 2 1\r\n1 1 1\r\n0 1 2\r\n1 2 2\r\n3 1 1 1\r\n1 1 2\r\n7 2 1\r\n9 3 2\r\n4 2 1 0\r\n100 2 1\r\n5 2 3\r\n7 1 2\r\n5 1 2\r\n5 1 1 1\r\n10 3 1\r\n9 2 3\r\n20 1 1\r\n16 1 4\r\n1 3 4\r\n",
                "2\r\n-1\r\n17\r\n35\r\n"
            ]
        ],
        "private_cases": [
            [
                "6\r\n4 1 1 0\r\n0 1 1\r\n1000000000 2 1\r\n0 2 2\r\n1000000000 3 2\r\n4 1 0 1\r\n0 1 1\r\n1000000000 3 1\r\n0 3 2\r\n1000000000 2 2\r\n4 1 1 0\r\n0 2 1\r\n1000000000 1 1\r\n0 1 2\r\n1000000000 3 2\r\n4 0 1 1\r\n0 2 1\r\n1000000000 3 1\r\n0 3 2\r\n1000000000 1 2\r\n4 1 0 1\r\n0 3 1\r\n1000000000 1 1\r\n0 1 2\r\n1000000000 2 2\r\n4 0 1 1\r\n0 3 1\r\n1000000000 2 1\r\n0 2 2\r\n1000000000 1 2\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ]
        ]
    }
]