[
    {
        "name": "Dynamic Diameter",
        "description": "You are given a weighted undirected tree on \n    n\n vertices and a list of\n\n    q\n updates. Each update changes the weight of one edge. The task is to\noutput the diameter of the tree after each update. (The distance between two\nvertices is the sum of the weights on the unique simple path that connects\nthem. The diameter is the largest of all those distances.) Input The first\nline contains three space-separated integers \n    n\n, \n    q\n and \n    w\n\n(\n    2 \n    \u2264 n \n    \u2264 100,000, 1 \n    \u2264 q \n    \u2264 100,000\n, \n    1 \n    \u2264 w\n    \n    \u2264 20,000,000,000,000\n) \u2013 the number of vertices in the tree, the number\nof updates and the limit on the weights of edges. The vertices are numbered\n\n    1\n through \n    n\n. Next, \n    n-1\n lines describing the initial tree\nfollow. The \n    i\n-th of these lines contains three space-separated integers\n\n    a_i\n, \n    b_i\n, \n    c_i\n (\n    1 \n    \u2264 a_i, b_i \n    \u2264 n\n, \n    0 \n    \u2264\n    c_i < w\n) meaning that initially, there is an edge between vertices\n\n    a_i\n and \n    b_i\n with weight \n    c_i\n. It is guaranteed that these\n\n    n-1\n lines describe a tree. Finally, \n    q\n lines describing queries\nfollow. The \n    j\n-th of these lines contains two space-separated integers\n\n    d_j\n, \n    e_j\n (\n    0 \n    \u2264 d_j < n - 1, 0 \n    \u2264 e_j < w\n). These two\nintegers are then transformed according to the following scheme: \n    d'_j =\n    (d_j + last) \n     (n - 1)\n \n    e'_j = (e_j + last) \n     w\n where\n\n    last\n is the result of the last query (initially \n    last=0\n). Tuple\n\n    (d'_j, e'_j)\n represents a query which takes the \n    d'_j+1\n-th edge\nfrom the input and sets its weight to \n    e'_j\n. Output Output \n    q\n lines.\nFor each \n    i\n, line \n    i\n should contain the diameter of the tree after\nthe \n    i\n-th update. Scoring Subtask 1 (11 points): \n    n,q \n    \u2264 100\n and\n\n    w \n    \u2264 10,000\n Subtask 2 (13 points): \n    n,q \n    \u2264 5,000\n and \n    w\n    \n    \u2264 10,000\n Subtask 3 (7 points): \n    w \n    \u2264 10,000\n and the edges of\nthe tree are exactly all valid edges of the form \n    1, i\n (Hence,\nthe tree is a star centered at vertex 1.) Subtask 4 (18 points): \n    w \n    \u2264\n    10,000\n, and the edges of the tree are exactly all valid edges of the forms\n\n    i, 2i\n and \n    i, 2i+1\n (Hence, if we were to root\nthe tree at vertex 1, it would be a balanced binary tree.) Subtask 5 (24\npoints): it is guaranteed that after each update a longest simple path goes\nthrough vertex \n    1\n Subtask 6 (27 points): no additional constraints\nExamples Input 4 3 2000 1 2 100 2 3 1000 2 4 1000 2 1030 1 1020 1 890 Output\n2030 2080 2050 Input 10 10 10000 1 9 1241 5 6 1630 10 5 1630 2 6 853 10 1 511\n5 3 760 8 3 1076 4 10 1483 7 10 40 8 2051 5 6294 5 4168 7 1861 0 5244 6 5156 3\n3001 8 5267 5 3102 8 3623 Output 6164 7812 8385 6737 6738 7205 6641 7062 6581\n5155 Note The first sample is depicted in the figure below. The left-most\npicture shows the initial state of the graph. Each following picture depicts\nthe situation after an update. The weight of the updated edge is painted\ngreen, and the diameter is red. The first query changes the weight of the\n\n    3\nrd edge, i.e. \n    2, 4\n, to \n    1030\n. The largest distance\nbetween any pair of vertices is \n    2030\n \u2013 the distance between \n    3\n and\n\n    4\n. As the answer is \n    2030\n, the second query is \n    \n\n    d'_2 = (1 +\n    2030) \n     3 = 0\n\n    \n \n    \n\n    e'_2 = (1020 + 2030) \n     2000 = 1050\n\n    \n\nHence the weight of the edge \n    1, 2\n is changed to \n    1050\n.\nThis causes the pair \n    1, 4\n to be the pair with the greatest\ndistance, namely \n    2080\n. The third query is decoded as \n    \n\n    d'_3 = (1 +\n    2080) \n     3 = 2\n\n    \n \n    \n\n    e'_3 = (890 + 2080) \n     2000 = 970\n\n    \n\nAs the weight of the edge \n    2, 4\n decreases to \n    970\n, the\nmost distant pair is suddenly \n    1, 3\n with \n    2050\n.\n\n",
        "cf_contest_id": 1192,
        "cf_index": "B",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "trees"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "4 3 2000\r\n1 2 100\r\n2 3 1000\r\n2 4 1000\r\n2 1030\r\n1 1020\r\n1 890\r\n",
                "2030\r\n2080\r\n2050\r\n"
            ],
            [
                "10 10 10000\r\n1 9 1241\r\n5 6 1630\r\n10 5 1630\r\n2 6 853\r\n10 1 511\r\n5 3 760\r\n8 3 1076\r\n4 10 1483\r\n7 10 40\r\n8 2051\r\n5 6294\r\n5 4168\r\n7 1861\r\n0 5244\r\n6 5156\r\n3 3001\r\n8 5267\r\n5 3102\r\n8 3623\r\n",
                "6164\r\n7812\r\n8385\r\n6737\r\n6738\r\n7205\r\n6641\r\n7062\r\n6581\r\n5155\r\n"
            ]
        ],
        "private_cases": [
            [
                "20 20 10000\r\n1 2 835\r\n1 3 57\r\n1 4 1883\r\n1 5 1349\r\n1 6 1543\r\n1 7 688\r\n1 8 272\r\n1 9 744\r\n1 10 569\r\n1 11 1019\r\n1 12 201\r\n1 13 1228\r\n1 14 1194\r\n1 15 1123\r\n1 16 48\r\n1 17 164\r\n1 18 893\r\n1 19 963\r\n1 20 818\r\n6 1\r\n0 7412\r\n10 6575\r\n15 6696\r\n0 7412\r\n4 8318\r\n18 7563\r\n15 7502\r\n1 7668\r\n13 7859\r\n14 8045\r\n2 7969\r\n12 8159\r\n11 8040\r\n2 8168\r\n12 8192\r\n0 8348\r\n14 8597\r\n13 8944\r\n0 8645\r\n",
                "3426\r\n3426\r\n3426\r\n2892\r\n2577\r\n2577\r\n2543\r\n2472\r\n2142\r\n2142\r\n2086\r\n2018\r\n1961\r\n1961\r\n1958\r\n1653\r\n1562\r\n1432\r\n1432\r\n1064\r\n"
            ],
            [
                "2 10 10000\r\n1 2 771\r\n0 151\r\n0 9855\r\n0 9999\r\n0 8476\r\n0 1455\r\n0 7763\r\n0 3304\r\n0 8286\r\n0 2481\r\n0 8467\r\n",
                "151\r\n6\r\n5\r\n8481\r\n9936\r\n7699\r\n1003\r\n9289\r\n1770\r\n237\r\n"
            ]
        ]
    }
]