[
    {
        "name": "Multiple Testcases",
        "description": "So you decided to hold a contest on Codeforces. You prepared the problems:\nstatements, solutions, checkers, validators, tests... Suddenly, your\ncoordinator asks you to change all your tests to multiple testcases in the\neasiest problem! Initially, each test in that problem is just an array. The\nmaximum size of an array is \n    k\n. For simplicity, the contents of arrays\ndon't matter. You have \n    n\n tests \u2014 the \n    i\n-th test is an array of size\n\n    m_i\n (\n    1 \n    \u2264 m_i \n    \u2264 k\n). Your coordinator asks you to distribute\nall of your arrays into multiple testcases. Each testcase can include multiple\narrays. However, each testcase should include no more than \n    c_1\n arrays of\nsize greater than or equal to \n    1\n (\n    \u2265 1\n), no more than \n    c_2\n\narrays of size greater than or equal to \n    2\n, \n    \u2026\n, no more than\n\n    c_k\n arrays of size greater than or equal to \n    k\n. Also, \n    c_1 \n    \u2265\n    c_2 \n    \u2265\n    \u2026\n    \u2265 c_k\n. So now your goal is to create the new\ntestcases in such a way that: each of the initial arrays appears in exactly\none testcase; for each testcase the given conditions hold; the number of\ntestcases is minimum possible. Print the minimum possible number of testcases\nyou can achieve and the sizes of arrays included in each testcase. Input The\nfirst line contains two integers \n    n\n and \n    k\n (\n    1 \n    \u2264 n, k \n    \u2264 2\n    \n    \u00b7 10^5\n) \u2014 the number of initial tests and the limit for the size of\neach array. The second line contains \n    n\n integers \n    m_1, m_2, \n    \u2026,\n    m_n\n (\n    1 \n    \u2264 m_i \n    \u2264 k\n) \u2014 the sizes of the arrays in the original\ntests. The third line contains \n    k\n integers \n    c_1, c_2, \n    \u2026, c_k\n\n(\n    n \n    \u2265 c_1 \n    \u2265 c_2 \n    \u2265\n    \u2026\n    \u2265 c_k \n    \u2265 1\n); \n    c_i\n is\nthe maximum number of arrays of size greater than or equal to \n    i\n you can\nhave in a single testcase. Output In the first line print a single integer\n\n    ans\n (\n    1 \n    \u2264 ans \n    \u2264 n\n) \u2014 the minimum number of testcases you\ncan achieve. Each of the next \n    ans\n lines should contain the description\nof a testcase in the following format: \n    t\n \n    a_1\n \n    a_2\n\n\n    \u2026\n \n    a_t\n (\n    1 \n    \u2264 t\n    \u2264 n\n) \u2014 the testcase includes\n\n    t\n arrays, \n    a_i\n is the size of the \n    i\n-th array in that\ntestcase. Each of the initial arrays should appear in exactly one testcase. In\nparticular, it implies that the sum of \n    t\n over all \n    ans\n testcases\nshould be equal to \n    n\n. Note that the answer always exists due to \n    c_k\n    \n    \u2265 1\n (and therefore \n    c_1 \n    \u2265 1\n). If there are multiple answers,\nyou can output any one of them. Examples Input 4 3 1 2 2 3 4 1 1 Output 3 1 2\n2 1 3 1 2 Input 6 10 5 8 1 10 8 7 6 6 4 4 3 2 2 2 1 1 Output 2 3 8 5 7 3 10 8\n1 Input 5 1 1 1 1 1 1 5 Output 1 5 1 1 1 1 1 Input 5 1 1 1 1 1 1 1 Output 5 1\n1 1 1 1 1 1 1 1 1 Note In the first example there is no way to distribute the\ntests into less than \n    3\n testcases. The given answer satisfies the\nconditions: each of the testcases includes no more than \n    4\n arrays of size\ngreater than or equal to \n    1\n and no more than \n    1\n array of sizes\ngreater than or equal to \n    2\n and \n    3\n. Note that there are multiple\nvalid answers for this test. For example, testcases with sizes \n    [[2], [1,\n    2], [3]]\n would also be correct. However, testcases with sizes \n    [[1, 2],\n    [2, 3]]\n would be incorrect because there are \n    2\n arrays of size greater\nthan or equal to \n    2\n in the second testcase. Note the difference between\nthe third and the fourth examples. You can include up to \n    5\n arrays of\nsize greater than or equal to \n    1\n in the third example, so you can put all\narrays into a single testcase. And you can have only up to \n    1\n array in\nthe fourth example. Thus, every array should be included in a separate\ntestcase.\n\n",
        "cf_contest_id": 1342,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "constructive algorithms",
            "data structures",
            "greedy",
            "sortings",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 3\r\n1 2 2 3\r\n4 1 1\r\n",
                "3\r\n2 1 3\r\n1 2\r\n1 2\r\n"
            ],
            [
                "6 10\r\n5 8 1 10 8 7\r\n6 6 4 4 3 2 2 2 1 1\r\n",
                "2\r\n3 1 7 8\r\n3 5 8 10\r\n"
            ],
            [
                "5 1\r\n1 1 1 1 1\r\n5\r\n",
                "1\r\n5 1 1 1 1 1\r\n"
            ],
            [
                "5 1\r\n1 1 1 1 1\r\n1\r\n",
                "5\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1\r\n1\r\n",
                "1\r\n1 1\r\n"
            ],
            [
                "1 10\r\n10\r\n1 1 1 1 1 1 1 1 1 1\r\n",
                "1\r\n1 10\r\n"
            ],
            [
                "10 5\r\n2 2 4 4 3 1 1 2 3 2\r\n9 6 6 4 1\r\n",
                "2\r\n5 1 2 2 3 4\r\n5 1 2 2 3 4\r\n"
            ],
            [
                "10 20\r\n20 1 15 17 11 2 15 3 16 3\r\n10 9 9 9 8 8 8 7 7 7 7 6 6 4 4 4 3 3 3 2\r\n",
                "2\r\n5 1 3 11 15 17\r\n5 2 3 15 16 20\r\n"
            ],
            [
                "100 50\r\n20 13 10 38 7 22 40 15 27 32 37 44 42 50 33 46 7 47 43 5 18 29 26 3 32 5 1 29 17 1 1 43 2 38 23 23 49 36 14 18 36 3 49 47 11 19 6 29 14 9 6 46 15 22 31 45 24 5 31 2 24 14 7 15 21 44 8 7 38 50 17 1 29 39 16 35 10 22 19 8 6 42 44 45 25 26 16 34 36 23 17 11 41 15 19 28 44 27 46 8\r\n100 97 94 93 92 91 89 87 85 83 82 79 79 78 78 68 68 66 66 66 57 55 55 53 51 49 47 47 47 45 41 38 35 30 28 26 26 25 23 22 22 22 20 19 15 9 5 5 3 2\r\n",
                "2\r\n50 1 1 2 3 5 5 6 7 7 8 8 10 11 13 14 15 15 16 17 17 18 19 20 22 22 23 24 25 26 27 29 29 31 32 33 35 36 37 38 39 41 42 43 44 44 45 46 47 49 50\r\n50 1 1 2 3 5 6 6 7 7 8 9 10 11 14 14 15 15 16 17 18 19 19 21 22 23 23 24 26 27 28 29 29 31 32 34 36 36 38 38 40 42 43 44 44 45 46 46 47 49 50\r\n"
            ],
            [
                "10 2\r\n1 2 2 2 2 2 2 2 2 2\r\n10 1\r\n",
                "9\r\n2 1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n"
            ]
        ]
    }
]