[
    {
        "name": "Ternary String",
        "description": "You are given a string \n    s\n such that each its character is either 1, 2, or\n3. You have to choose the shortest contiguous substring of \n    s\n such that\nit contains each of these three characters at least once. A contiguous\nsubstring of string \n    s\n is a string that can be obtained from \n    s\n by\nremoving some (possibly zero) characters from the beginning of \n    s\n and\nsome (possibly zero) characters from the end of \n    s\n. Input The first line\ncontains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 20000\n) \u2014 the number of\ntest cases. Each test case consists of one line containing the string \n    s\n\n(\n    1 \n    \u2264 |s| \n    \u2264 200000\n). It is guaranteed that each character of\n\n    s\n is either 1, 2, or 3. The sum of lengths of all strings in all test\ncases does not exceed \n    200000\n. Output For each test case, print one\ninteger \u2014 the length of the shortest contiguous substring of \n    s\n\ncontaining all three types of characters at least once. If there is no such\nsubstring, print \n    0\n instead. Example Input 7 123 12222133333332 112233\n332211 12121212 333333 31121 Output 3 3 4 4 0 0 4 Note Consider the example\ntest: In the first test case, the substring 123 can be used. In the second\ntest case, the substring 213 can be used. In the third test case, the\nsubstring 1223 can be used. In the fourth test case, the substring 3221 can be\nused. In the fifth test case, there is no character 3 in \n    s\n. In the sixth\ntest case, there is no character 1 in \n    s\n. In the seventh test case, the\nsubstring 3112 can be used.\n\n",
        "cf_contest_id": 1354,
        "cf_index": "B",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dp",
            "implementation",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n123\r\n12222133333332\r\n112233\r\n332211\r\n12121212\r\n333333\r\n31121\r\n",
                "3\r\n3\r\n4\r\n4\r\n0\r\n0\r\n4\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n11111111111111111111111123\r\n",
                "3\r\n"
            ],
            [
                "1\r\n1111111111111111111111123\r\n",
                "3\r\n"
            ],
            [
                "12\r\n11111122222222222223\r\n122222222222222222333\r\n33333333331111111122\r\n11111111133333333333333332\r\n111111111123333333333\r\n1\r\n2\r\n3\r\n12\r\n23\r\n123\r\n1111111111111111211111111111111111111111111111111113\r\n",
                "15\r\n19\r\n10\r\n18\r\n3\r\n0\r\n0\r\n0\r\n0\r\n0\r\n3\r\n36\r\n"
            ],
            [
                "1\r\n111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111123\r\n",
                "3\r\n"
            ]
        ]
    }
]