[
    {
        "name": "Number Game",
        "description": "Ashishgup and FastestFinger play a game. They start with a number \n    n\n and\nplay in turns. In each turn, a player can make any one of the following moves:\nDivide \n    n\n by any of its odd divisors greater than \n    1\n. Subtract\n\n    1\n from \n    n\n if \n    n\n is greater than \n    1\n. Divisors of a number\ninclude the number itself. The player who is unable to make a move loses the\ngame. Ashishgup moves first. Determine the winner of the game if both of them\nplay optimally. Input The first line contains a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test cases. The description of the\ntest cases follows. The only line of each test case contains a single integer\n\u2014 \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^9\n). Output For each test case, print\n\"Ashishgup\" if he wins, and \"FastestFinger\" otherwise (without quotes).\nExample Input 7 1 2 3 4 5 6 12 Output FastestFinger Ashishgup Ashishgup\nFastestFinger Ashishgup FastestFinger Ashishgup Note In the first test case,\n\n    n = 1\n, Ashishgup cannot make a move. He loses. In the second test case,\n\n    n = 2\n, Ashishgup subtracts \n    1\n on the first move. Now \n    n = 1\n,\nFastestFinger cannot make a move, so he loses. In the third test case, \n    n =\n    3\n, Ashishgup divides by \n    3\n on the first move. Now \n    n = 1\n,\nFastestFinger cannot make a move, so he loses. In the last test case, \n    n =\n    12\n, Ashishgup divides it by \n    3\n. Now \n    n = 4\n, FastestFinger is\nforced to subtract \n    1\n, and Ashishgup gets \n    3\n, so he wins by dividing\nit by \n    3\n.\n\n",
        "cf_contest_id": 1370,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "games",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n12\r\n",
                "FastestFinger\r\nAshishgup\r\nAshishgup\r\nFastestFinger\r\nAshishgup\r\nFastestFinger\r\nAshishgup\r\n"
            ]
        ],
        "private_cases": [
            [
                "31\r\n16777216\r\n1\r\n64\r\n268435456\r\n1024\r\n536870912\r\n131072\r\n8388608\r\n4194304\r\n1048576\r\n16\r\n8\r\n67108864\r\n128\r\n8192\r\n256\r\n16384\r\n262144\r\n512\r\n32768\r\n32\r\n4\r\n2048\r\n33554432\r\n134217728\r\n4096\r\n1000000000\r\n2097152\r\n524288\r\n2\r\n65536\r\n",
                "FastestFinger\r\nFastestFinger\r\nFastestFinger\r\nFastestFinger\r\nFastestFinger\r\nFastestFinger\r\nFastestFinger\r\nFastestFinger\r\nFastestFinger\r\nFastestFinger\r\nFastestFinger\r\nFastestFinger\r\nFastestFinger\r\nFastestFinger\r\nFastestFinger\r\nFastestFinger\r\nFastestFinger\r\nFastestFinger\r\nFastestFinger\r\nFastestFinger\r\nFastestFinger\r\nFastestFinger\r\nFastestFinger\r\nFastestFinger\r\nFastestFinger\r\nFastestFinger\r\nAshishgup\r\nFastestFinger\r\nFastestFinger\r\nAshishgup\r\nFastestFinger\r\n"
            ]
        ]
    }
]