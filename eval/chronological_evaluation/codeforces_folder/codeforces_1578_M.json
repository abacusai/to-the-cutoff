[
    {
        "name": "The Mind",
        "description": "This is an interactive problem. In this problem, you need to come up with a\nstrategy for a cooperative game. This game is played by two players. Each\nplayer receives 5 cards. Each card has a random integer between 1 and 100 on\nit. It is guaranteed that all numbers on cards are distinct. The goal of the\ngame is to play a card with a minimal number on it out of all 10 cards dealt\nto the players before any other card. The problem is that each player can only\nsee their own cards and cannot communicate with another player in any way. The\ngame consists of 5 turns. During each turn, players simultaneously make a\nmove. Each player can either play their smallest card or do nothing. If on\nsome turn the smallest card is played, and no other card is played on or\nbefore that turn, players win. If two cards are played at the same turn or if\nafter all 5 turns, no card is still played, players lose. Players cannot\ncommunicate, so a strategy for the game should only be based on 5 cards that\nthe player has. You can describe a strategy as five numbers \n    0.0 \n    \u2264 p_i\n    \n    \u2264 1.0, \n    \u2211_i=1^5p_i \n    \u2264 1\n, where \n    p_i\n \u2014 the probability\nof playing the player's smallest card in their hand on \n    i\n-th turn. If you\nknow the cards dealt to the players, and the strategies that players choose,\nyou can compute the probability of winning by a simple formula. You will be\ngiven \n    n=1000\n randomly generated hands of 5 cards. You need to generate a\nstrategy for each of the hands to maximize the probability of winning. After\nthe judge program receives all \n    n\n strategies, it generates all possible\nvalid pairs of those hands (pairs which have the same numbers are discarded),\nand computes a probability of winning based on two strategies provided by your\nprogram. To ensure that answers for different hands are independent, you must\noutput a strategy for a hand and flush the standard output before reading\ninformation about the next hand. If the average probability of winning a game\nis more than 85\nThis problem contains the sample test and \n    20\n randomly generated tests\nwith \n    n = 1000\n. Input The first line contains one integer \n    n\n \u2014 the\nnumber of hands. It is guaranteed that \n    n = 1000\n for all cases except the\nfirst sample case. Each of the next \n    n\n lines contains 5 numbers \n    a_i\n\n(\n    1 \n    \u2264 a_i \n    \u2264 100, a_i < a_i+1\n) \u2014 the cards in the hand. It is\nguaranteed that each possible set of 5 cards has an equal probability of being\nchosen. Output For each of the \n    n\n hands you need to output 5 numbers\n\n    0.0 \n    \u2264 p_i \n    \u2264 1.0, \n    \u2211_i=1^5p_i \n    \u2264 1\n, where \n    p_i\n \u2014\nprobability of playing the smallest card on \n    i\n-th turn. Example Input 2 2\n12 27 71 100 22 29 39 68 90 Output 0.8 0.2 0.0 0.0 0.0 0.0 0.2 0.2 0.2 0.3\nNote In the example test there is only one valid pair of hands. The winning\nprobability for the example output is equal to \n    0.8 + 0.2 \n    \u00b7 (1 - 0.2)\n    = 0.96\n. Also note that the second player will not play a card at all with\nprobability 0.1.\n\n",
        "cf_contest_id": 1578,
        "cf_index": "M",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "interactive",
            "probabilities"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [],
        "private_cases": []
    }
]