[
    {
        "name": "Two Melodies",
        "description": "Alice is a beginner composer and now she is ready to create another\nmasterpiece. And not even the single one but two at the same time! Alice has a\nsheet with n notes written on it. She wants to take two such non-empty non-\nintersecting subsequences that both of them form a melody and sum of their\nlengths is maximal. Subsequence is a sequence that can be derived from another\nsequence by deleting some elements without changing the order of the remaining\nelements. Subsequence forms a melody when each two adjacent notes either\ndiffers by 1 or are congruent modulo 7. You should write a program which will\ncalculate maximum sum of lengths of such two non-empty non-intersecting\nsubsequences that both of them form a melody. Input The first line contains\none integer number n (2 \u2264 n \u2264 5000). The second line contains n integer\nnumbers a1, a2, ..., an (1 \u2264 ai \u2264 10^5) \u2014 notes written on a sheet. Output\nPrint maximum sum of lengths of such two non-empty non-intersecting\nsubsequences that both of them form a melody. Examples Input 4 1 2 4 5 Output\n4 Input 6 62 22 60 61 48 49 Output 5 Note In the first example subsequences\n[1, 2] and [4, 5] give length 4 in total. In the second example subsequences\n[62, 48, 49] and [60, 61] give length 5 in total. If you choose subsequence\n[62, 61] in the first place then the second melody will have maximum length 2,\nthat gives the result of 4, which is not maximal.\n\n",
        "cf_contest_id": 813,
        "cf_index": "D",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "flows"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 2 4 5\r\n",
                "4"
            ],
            [
                "6\r\n62 22 60 61 48 49\r\n",
                "5"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 4\r\n",
                "2"
            ],
            [
                "2\r\n5 4\r\n",
                "2"
            ],
            [
                "10\r\n9 6 8 5 5 2 8 9 2 2\r\n",
                "9"
            ],
            [
                "10\r\n7776 32915 1030 71664 7542 72359 65387 75222 95899 40333\r\n",
                "6"
            ],
            [
                "10\r\n1 1 1 1 1 1 1 1 1 1\r\n",
                "10"
            ],
            [
                "4\r\n15 11 28 17\r\n",
                "2"
            ],
            [
                "3\r\n1 36 6\r\n",
                "3"
            ],
            [
                "6\r\n3 12 4 12 5 6\r\n",
                "6"
            ],
            [
                "6\r\n7 20 21 22 23 28\r\n",
                "6"
            ]
        ]
    }
]