[
    {
        "name": "Xenia and Tree",
        "description": "Xenia the programmer has a tree consisting of n nodes. We will consider the\ntree nodes indexed from 1 to n. We will also consider the first node to be\ninitially painted red, and the other nodes \u2014 to be painted blue. The distance\nbetween two tree nodes v and u is the number of edges in the shortest path\nbetween v and u. Xenia needs to learn how to quickly execute queries of two\ntypes: paint a specified blue node in red; calculate which red node is the\nclosest to the given one and print the shortest distance to the closest red\nnode. Your task is to write a program which will execute the described\nqueries. Input The first line contains two integers n and m (2 \u2264 n \u2264 10^5, 1 \u2264\nm \u2264 10^5) \u2014 the number of nodes in the tree and the number of queries. Next n\n- 1 lines contain the tree edges, the i-th line contains a pair of integers\nai, bi (1 \u2264 ai, bi \u2264 n, ai \u2260 bi) \u2014 an edge of the tree. Next m lines contain\nqueries. Each query is specified as a pair of integers ti, vi (1 \u2264 ti \u2264 2, 1 \u2264\nvi \u2264 n). If ti = 1, then as a reply to the query we need to paint a blue node\nvi in red. If ti = 2, then we should reply to the query by printing the\nshortest distance from some red node to node vi. It is guaranteed that the\ngiven graph is a tree and that all queries are correct. Output For each second\ntype query print the reply in a single line. Examples Input 5 4 1 2 2 3 2 4 4\n5 2 1 2 5 1 2 2 5 Output 0 3 2\n\n",
        "cf_contest_id": 342,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "divide and conquer",
            "trees"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 4\r\n1 2\r\n2 3\r\n2 4\r\n4 5\r\n2 1\r\n2 5\r\n1 2\r\n2 5\r\n",
                "0\r\n3\r\n2\r\n"
            ]
        ],
        "private_cases": []
    }
]