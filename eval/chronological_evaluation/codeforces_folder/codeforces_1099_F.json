[
    {
        "name": "Cookies",
        "description": "Mitya and Vasya are playing an interesting game. They have a rooted tree with\n\n    n\n vertices, and the vertices are indexed from \n    1\n to \n    n\n. The\nroot has index \n    1\n. Every other vertex \n    i \n    \u2265 2\n has its parent\n\n    p_i\n, and vertex \n    i\n is called a child of vertex \n    p_i\n. There are\nsome cookies in every vertex of the tree: there are \n    x_i\n cookies in\nvertex \n    i\n. It takes exactly \n    t_i\n time for Mitya to eat one cookie in\nvertex \n    i\n. There is also a chip, which is initially located in the root\nof the tree, and it takes \n    l_i\n time to move the chip along the edge\nconnecting vertex \n    i\n with its parent. Mitya and Vasya take turns playing,\nMitya goes first. Mitya moves the chip from the vertex, where the chip is\nlocated, to one of its children. Vasya can remove an edge from the vertex,\nwhere the chip is located, to one of its children. Vasya can also decide to\nskip his turn. Mitya can stop the game at any his turn. Once he stops the\ngame, he moves the chip up to the root, eating some cookies along his way.\nMitya can decide how many cookies he would like to eat in every vertex on his\nway. The total time spent on descend, ascend and eating cookies should not\nexceed \n    T\n. Please note that in the end of the game the chip is always\nlocated in the root of the tree: Mitya can not leave the chip in any other\nvertex, even if he has already eaten enough cookies \u2014 he must move the chip\nback to the root (and every move from vertex \n    v\n to its parent takes\n\n    l_v\n time). Find out what is the maximum number of cookies Mitya can eat,\nregardless of Vasya's actions. Input The first line contains two integers\n\n    n\n and \n    T\n \u2014 the number of vertices in the tree and the time he has\nto accomplish his task (\n    2\n    \u2264 n \n    \u2264 10^5\n; \n    1\n    \u2264\n    T\n    \u226410^18\n). The second line contains \n    n\n integers \n    x_1\n,\n\n    x_2\n, ..., \n    x_n\n \u2014 number of cookies located in the corresponding\nvertex (\n    1\n    \u2264 x_i\n    \u226410^6\n). The third line contains \n    n\n integers\n\n    t_1\n, \n    t_2\n, ..., \n    t_n\n \u2014 how much time it takes Mitya to eat one\ncookie in vertex \n    i\n (\n    1\n    \u2264 t_i\n    \u226410^6\n). Each of the following\n\n    n - 1\n lines describe the tree. For every \n    i\n from \n    2\n to\n\n    n\n, the corresponding line contains two integers \n    p_i\n and \n    l_i\n,\nwhere \n    p_i\n denotes the parent of vertex \n    i\n and \n    l_i\n denotes the\ntime it takes Mitya to move the chip along the edge from vertex \n    i\n to its\nparent (\n    1\n    \u2264 p_i < i\n, \n    0\n    \u2264 l_i \n    \u2264 10^9\n). Output Output a\nsingle integer \u2014 maximum number of cookies Mitya can eat. Examples Input 5 26\n1 5 1 7 7 1 3 2 2 2 1 1 1 1 2 0 2 0 Output 11 Input 3 179 2 2 1 6 6 6 1 3 2 3\nOutput 4 Note In the first example test case, Mitya can start by moving the\nchip to vertex \n    2\n. In this case no matter how Vasya plays, Mitya is able\nto eat at least \n    11\n cookies. Below you can find the detailed description\nof the moves: Mitya moves chip to vertex \n    2\n. Vasya removes edge to vertex\n\n    4\n. Mitya moves chip to vertex \n    5\n. Since vertex \n    5\n has no\nchildren, Vasya does not remove any edges. Mitya stops the game and moves the\nchip towards the root, eating cookies along the way (\n    7\n in vertex\n\n    5\n, \n    3\n in vertex \n    2\n, \n    1\n in vertex \n    1\n). Mitya spend\n\n    1+0\n time to go down, \n    0+1\n to go up, \n    7\n    \u00b7 2\n to eat \n    7\n\ncookies in vertex 5, \n    3\n    \u00b7 3\n to eat \n    3\n cookies in vertex 2,\n\n    1\n    \u00b7 1\n to eat \n    1\n cookie in vertex 1. Total time is\n\n    1+0+0+1+7\n    \u00b7 2+3\n    \u00b7 3+1\n    \u00b7 1=26\n.\n\n",
        "cf_contest_id": 1099,
        "cf_index": "F",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "dp",
            "games",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5 26\r\n1 5 1 7 7\r\n1 3 2 2 2\r\n1 1\r\n1 1\r\n2 0\r\n2 0\r\n",
                "11"
            ],
            [
                "3 179\r\n2 2 1\r\n6 6 6\r\n1 3\r\n2 3\r\n",
                "4"
            ]
        ],
        "private_cases": [
            [
                "6 74\r\n6 7 8 8 9 4\r\n3 6 8 6 7 10\r\n1 2\r\n2 7\r\n3 9\r\n3 9\r\n2 2\r\n",
                "13"
            ],
            [
                "5 62390580538\r\n981852 583144 924123 753740 884734\r\n390709 188535 591449 461170 921090\r\n1 726912\r\n2 127532\r\n2 410917\r\n1 367848\r\n",
                "330915"
            ],
            [
                "10 276929956970\r\n542317 952971 497826 783910 579826 884523 723046 160454 571561 538629\r\n396403 484214 292552 741926 254530 654846 306678 20740 635646 492547\r\n1 857061\r\n1 248454\r\n3 325659\r\n4 672052\r\n2 633155\r\n3 360800\r\n1 41983\r\n6 115806\r\n7 485648\r\n",
                "829028"
            ],
            [
                "2 100\r\n1 2\r\n3 4\r\n1 1\r\n",
                "3"
            ],
            [
                "3 787252991603\r\n60225 14 474960\r\n632875 942650 813919\r\n1 105514\r\n1 729744\r\n",
                "535185"
            ],
            [
                "5 695123381240\r\n691486 566687 47806 781843 3160\r\n554012 570468 365883 252934 87623\r\n1 447607\r\n2 277265\r\n2 633898\r\n3 233364\r\n",
                "1255603"
            ],
            [
                "50 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 0\r\n2 0\r\n3 0\r\n4 0\r\n5 0\r\n6 0\r\n7 0\r\n8 0\r\n9 0\r\n10 0\r\n11 0\r\n12 0\r\n13 0\r\n14 0\r\n15 0\r\n16 0\r\n17 0\r\n18 0\r\n19 0\r\n20 0\r\n21 0\r\n22 0\r\n23 0\r\n24 0\r\n25 0\r\n2 0\r\n3 0\r\n4 0\r\n5 0\r\n6 0\r\n7 0\r\n8 0\r\n9 0\r\n10 0\r\n11 0\r\n12 0\r\n13 0\r\n14 0\r\n15 0\r\n16 0\r\n17 0\r\n18 0\r\n19 0\r\n20 0\r\n21 0\r\n22 0\r\n23 0\r\n24 0\r\n25 0\r\n",
                "1"
            ]
        ]
    }
]