[
    {
        "name": "Willy-nilly, Crack, Into Release!",
        "description": "You have long dreamed of working in a large IT company and finally got a job\nthere. You have studied all existing modern technologies for a long time and\nare ready to apply all your knowledge in practice. But then you sit down at\nyour desk and see a sheet of paper with the company's motto printed in large\nletters: abcdabcdabcdabcd.... The company's motto contains four main\nprinciples\u2014 a (Willi), b (Nilli), c (Crack), d (Release). Therefore, you\nconsider strings of length \n    n\n consisting of these four Latin letters.\nUnordered pairs of letters \"ab\", \"bc\", \"cd\", and \"da\" in this motto are\nadjacent, so we will call such pairs of symbols good. So, if you are given a\nstring \n    s\n of length \n    n\n, and it is known that the unordered pair of\nsymbols \n    x, y\n is good, then you can perform one of the\nfollowing operations on the string: if \n    s_n = x\n, then you are allowed to\nreplace this symbol with \n    y\n, if there exists \n    1 \n    \u2264 i < n\n such\nthat \n    s_i = x\n and \n    s_i+1 = \n    \u2026 = s_n = y\n, then you are\nallowed to replace the \n    i\n-th symbol of the string with \n    y\n, and all\nsubsequent symbols with \n    x\n. For example, the string bacdd can be replaced\nwith one of the strings bacda, bacdc, or badcc, and the string aac can be\nreplaced with aab or aad. A non-empty sequence of operations for the string\n\n    s\n will be called correct if the following two conditions are met: after\nperforming all operations, the string becomes \n    s\n again, no string, except\nfor \n    s\n, will occur more than once during the operations. At the same\ntime, the string \n    s\n can occur exactly twice - before the start of the\noperations and after performing all operations. Now we are ready to move on to\nthe problem statement! You have a set of strings that is initially empty.\nThen, each of \n    q\n queries adds another string \n    t_i\n to the set, or\nremoves the string \n    t_i\n from the set. After each query, you need to\noutput the minimum and maximum size of a correct sequence of operations in\nwhich each word occurs at least once. The choice of the initial string \n    s\n\nis up to you. Input The first line contains two integers \n    n\n and \n    q\n\n(\n    1 \n    \u2264 n \n    \u2264 20\n, \n    1 \n    \u2264 q \n    \u2264 100\n     000\n) \u2014 the length of\nthe strings under consideration and the number of queries to modify the set of\nstrings. Each of the next \n    q\n lines contains a string \n    t_i\n\n(\n    | t_i \n    | = n\n). All strings consist of characters \"a\", \"b\",\n\"c\" and \"d\". If the string \n    t_i\n was not in the set before the query, it\nis added to the set, otherwise it is removed from the set. Output For each of\nthe \n    q\n queries, output two integers: the minimum and maximum size of a\ncorrect sequence of operations in which each word from the set appears at\nleast once. If there is no sequence of operations that satisfies the condition\nof the problem, output a single number \n    -1\n. Examples Input 2 4 aa ac dd\nac Output 2 12 4 4 -1 12 12 Input 3 2 acc bdd Output 2 44 28 44 Note Let's\nconsider the first test example. After the first query, the set of important\nwords is equal to \n    aa\n, the minimum sequence of actions\nhas the following form: aa, ab, aa. The maximum sequence of actions that fits\nis aa, ab, ba, bb, bc, cb, cc, cd, dc, dd, da, ad, aa. After the second query,\nthe set of important words is equal to \n    aa, ac\n. The\nminimum and maximum sequences of actions are: aa, ab, ac, ad, aa. After the\nthird query, the set of important words is equal to \n    aa, ac,\n    dd\n. There is no sequence of actions that fits the condition, so\n\n    -1\n should be outputted. After the fourth query, the set of important\nwords is equal to \n    aa, dd\n. The minimum and maximum\nsequences of actions are as follows: aa, ab, ba, bb, bc, cb, cc, cd, dc, dd,\nda, ad, aa.\n\n",
        "cf_contest_id": 1819,
        "cf_index": "F",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "2 4\r\naa\r\nac\r\ndd\r\nac\r\n",
                "2 12\r\n4 4\r\n-1\r\n12 12\r\n"
            ],
            [
                "3 2\r\nacc\r\nbdd\r\n",
                "2 44\r\n28 44\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 16\r\na\r\nb\r\na\r\nc\r\na\r\nb\r\na\r\nd\r\na\r\nb\r\na\r\nc\r\na\r\nb\r\na\r\nd\r\n",
                "2 4\r\n2 4\r\n2 4\r\n2 4\r\n4 4\r\n4 4\r\n2 4\r\n2 4\r\n4 4\r\n4 4\r\n4 4\r\n4 4\r\n4 4\r\n2 4\r\n2 4\r\n2 4\r\n"
            ]
        ]
    }
]