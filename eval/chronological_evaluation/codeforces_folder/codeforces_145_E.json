[
    {
        "name": "Lucky Queries",
        "description": "Petya loves lucky numbers very much. Everybody knows that lucky numbers are\npositive integers whose decimal record contains only the lucky digits 4 and 7.\nFor example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not. Petya\nbrought home string s with the length of n. The string only consists of lucky\ndigits. The digits are numbered from the left to the right starting with 1.\nNow Petya should execute m queries of the following form: switch l r \u2014\n\"switch\" digits (i.e. replace them with their opposites) at all positions with\nindexes from l to r, inclusive: each digit 4 is replaced with 7 and each digit\n7 is replaced with 4 (1 \u2264 l \u2264 r \u2264 n); count \u2014 find and print on the screen the\nlength of the longest non-decreasing subsequence of string s. Subsequence of a\nstring s is a string that can be obtained from s by removing zero or more of\nits elements. A string is called non-decreasing if each successive digit is\nnot less than the previous one. Help Petya process the requests. Input The\nfirst line contains two integers n and m (1 \u2264 n \u2264 10^6, 1 \u2264 m \u2264 3\u00b710^5) \u2014 the\nlength of the string s and the number of queries correspondingly. The second\nline contains n lucky digits without spaces \u2014 Petya's initial string. Next m\nlines contain queries in the form described in the statement. Output For each\nquery count print an answer on a single line. Examples Input 2 3 47 count\nswitch 1 2 count Output 2 1 Input 3 5 747 count switch 1 1 count switch 1 3\ncount Output 2 3 2 Note In the first sample the chronology of string s after\nsome operations are fulfilled is as follows (the sought maximum subsequence is\nmarked with bold): 47 74 74 In the second sample: 747 447 447 774 774\n\n",
        "cf_contest_id": 145,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 3\r\n47\r\ncount\r\nswitch 1 2\r\ncount\r\n",
                "2\r\n1\r\n"
            ],
            [
                "3 5\r\n747\r\ncount\r\nswitch 1 1\r\ncount\r\nswitch 1 3\r\ncount\r\n",
                "2\r\n3\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "7 10\r\n7474747\r\ncount\r\ncount\r\nswitch 1 7\r\ncount\r\nswitch 1 1\r\nswitch 3 3\r\nswitch 5 5\r\ncount\r\nswitch 1 7\r\ncount\r\n",
                "4\r\n4\r\n4\r\n6\r\n7\r\n"
            ],
            [
                "10 10\r\n7444744774\r\ncount\r\ncount\r\ncount\r\ncount\r\nswitch 6 7\r\nswitch 5 6\r\nswitch 5 7\r\nswitch 2 2\r\nswitch 6 7\r\ncount\r\n",
                "7\r\n7\r\n7\r\n7\r\n6\r\n"
            ],
            [
                "20 20\r\n47744477774747744777\r\nswitch 15 19\r\ncount\r\ncount\r\ncount\r\nswitch 11 13\r\ncount\r\ncount\r\nswitch 7 20\r\ncount\r\ncount\r\nswitch 4 10\r\nswitch 13 15\r\ncount\r\ncount\r\nswitch 11 11\r\nswitch 14 18\r\ncount\r\nswitch 1 13\r\nswitch 2 4\r\nswitch 10 15\r\n",
                "13\r\n13\r\n13\r\n14\r\n14\r\n15\r\n15\r\n15\r\n15\r\n17\r\n"
            ],
            [
                "20 7\r\n74774477774777777474\r\nswitch 1 14\r\ncount\r\nswitch 17 20\r\nswitch 14 20\r\nswitch 17 20\r\nswitch 20 20\r\ncount\r\n",
                "14\r\n14\r\n"
            ]
        ]
    }
]