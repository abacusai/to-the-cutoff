[
    {
        "name": "The Classic Problem",
        "description": "You are given a weighted undirected graph on n vertices and m edges. Find the\nshortest path from vertex s to vertex t or else state that such path doesn't\nexist. Input The first line of the input contains two space-separated integers\n\u2014 n and m (1 \u2264 n \u2264 10^5; 0 \u2264 m \u2264 10^5). Next m lines contain the description\nof the graph edges. The i-th line contains three space-separated integers \u2014\nui, vi, xi (1 \u2264 ui, vi \u2264 n; 0 \u2264 xi \u2264 10^5). That means that vertices with\nnumbers ui and vi are connected by edge of length 2^xi (2 to the power of xi).\nThe last line contains two space-separated integers \u2014 the numbers of vertices\ns and t. The vertices are numbered from 1 to n. The graph contains no multiple\nedges and self-loops. Output In the first line print the remainder after\ndividing the length of the shortest path by 1000000007 (10^9 + 7) if the path\nexists, and -1 if the path doesn't exist. If the path exists print in the\nsecond line integer k \u2014 the number of vertices in the shortest path from\nvertex s to vertex t; in the third line print k space-separated integers \u2014 the\nvertices of the shortest path in the visiting order. The first vertex should\nbe vertex s, the last vertex should be vertex t. If there are multiple\nshortest paths, print any of them. Examples Input 4 4 1 4 2 1 2 0 2 3 0 3 4 0\n1 4 Output 3 4 1 2 3 4 Input 4 3 1 2 4 2 3 5 3 4 6 1 4 Output 112 4 1 2 3 4\nInput 4 2 1 2 0 3 4 1 1 4 Output -1 Note A path from vertex s to vertex t is a\nsequence v0, ..., vk, such that v0 = s, vk = t, and for any i from 0 to k - 1\nvertices vi and vi + 1 are connected by an edge. The length of the path is the\nsum of weights of edges between vi and vi + 1 for all i from 0 to k - 1. The\nshortest path from s to t is the path which length is minimum among all\npossible paths from s to t.\n\n",
        "cf_contest_id": 464,
        "cf_index": "E",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "graphs",
            "shortest paths"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 768.0,
        "public_cases": [
            [
                "4 4\r\n1 4 2\r\n1 2 0\r\n2 3 0\r\n3 4 0\r\n1 4\r\n",
                "3\r\n4\r\n1 2 3 4 "
            ],
            [
                "4 3\r\n1 2 4\r\n2 3 5\r\n3 4 6\r\n1 4\r\n",
                "112\r\n4\r\n1 2 3 4 "
            ],
            [
                "4 2\r\n1 2 0\r\n3 4 1\r\n1 4\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "8 8\r\n8 4 3\r\n1 5 1\r\n7 4 8\r\n5 3 6\r\n7 3 8\r\n8 6 5\r\n2 1 3\r\n6 2 8\r\n7 1\r\n",
                "322\r\n4\r\n7 3 5 1 "
            ],
            [
                "4 5\r\n3 4 3\r\n2 4 5\r\n1 4 0\r\n1 3 0\r\n1 2 7\r\n3 2\r\n",
                "34\r\n4\r\n3 1 4 2 "
            ],
            [
                "8 12\r\n3 4 0\r\n1 8 2\r\n1 3 8\r\n7 3 2\r\n1 5 1\r\n3 2 10\r\n4 7 0\r\n5 3 5\r\n2 8 2\r\n5 7 4\r\n8 3 9\r\n2 6 15\r\n6 3\r\n",
                "32796\r\n8\r\n6 2 8 1 5 7 4 3 "
            ],
            [
                "10 0\r\n8 5\r\n",
                "-1\r\n"
            ],
            [
                "10 1\r\n5 1 12\r\n1 7\r\n",
                "-1\r\n"
            ],
            [
                "100000 0\r\n19752 32601\r\n",
                "-1\r\n"
            ],
            [
                "1 0\r\n1 1\r\n",
                "0\r\n1\r\n1 "
            ]
        ]
    }
]