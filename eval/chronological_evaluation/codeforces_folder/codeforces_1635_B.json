[
    {
        "name": "Avoid Local Maximums",
        "description": "You are given an array \n    a\n of size \n    n\n. Each element in this array is\nan integer between \n    1\n and \n    10^9\n. You can perform several operations\nto this array. During an operation, you can replace an element in the array\nwith any integer between \n    1\n and \n    10^9\n. Output the minimum number of\noperations needed such that the resulting array doesn't contain any local\nmaximums, and the resulting array after the operations. An element \n    a_i\n\nis a local maximum if it is strictly larger than both of its neighbors (that\nis, \n    a_i > a_i - 1\n and \n    a_i > a_i + 1\n). Since \n    a_1\n and\n\n    a_n\n have only one neighbor each, they will never be a local maximum.\nInput Each test contains multiple test cases. The first line will contain a\nsingle integer \n    t\n \n    (1 \n    \u2264 t \n    \u2264 10000)\n \u2014 the number of test\ncases. Then \n    t\n test cases follow. The first line of each test case\ncontains a single integer \n    n\n \n    (2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5)\n \u2014\nthe size of the array \n    a\n. The second line of each test case contains\n\n    n\n integers \n    a_1, a_2, \n    \u2026 ,a_n\n \n    (1 \n    \u2264 a_i \n    \u2264\n    10^9)\n, the elements of array. It is guaranteed that the sum of \n    n\n over\nall test cases does not exceed \n    2 \n    \u00b7 10^5\n. Output For each test\ncase, first output a line containing a single integer \n    m\n \u2014 minimum number\nof operations required. Then ouput a line consist of \n    n\n integers \u2014 the\nresulting array after the operations. Note that this array should differ in\nexactly \n    m\n elements from the initial array. If there are multiple\nanswers, print any. Example Input 5 3 2 1 2 4 1 2 3 1 5 1 2 1 2 1 9 1 2 1 3 2\n3 1 2 1 9 2 1 3 1 3 1 3 1 3 Output 0 2 1 2 1 1 3 3 1 1 1 2 2 2 1 2 1 2 3 3 2 3\n3 2 1 2 2 1 3 3 3 1 1 1 3 Note In the first example, the array contains no\nlocal maximum, so we don't need to perform operations. In the second example,\nwe can change \n    a_2\n to \n    3\n, then the array don't have local maximums.\n\n",
        "cf_contest_id": 1635,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3\r\n2 1 2\r\n4\r\n1 2 3 1\r\n5\r\n1 2 1 2 1\r\n9\r\n1 2 1 3 2 3 1 2 1\r\n9\r\n2 1 3 1 3 1 3 1 3\r\n",
                "0\r\n2 1 2\r\n1\r\n1 2 3 3\r\n1\r\n1 2 2 2 1\r\n2\r\n1 2 3 3 2 3 3 2 1\r\n2\r\n2 1 3 3 3 1 3 3 3\r\n"
            ]
        ],
        "private_cases": []
    }
]