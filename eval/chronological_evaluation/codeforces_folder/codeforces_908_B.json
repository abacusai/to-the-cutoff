[
    {
        "name": "New Year and Buggy Bot",
        "description": "Bob programmed a robot to navigate through a 2d maze. The maze has some\nobstacles. Empty cells are denoted by the character '.', where obstacles are\ndenoted by '#'. There is a single robot in the maze. Its start position is\ndenoted with the character 'S'. This position has no obstacle in it. There is\nalso a single exit in the maze. Its position is denoted with the character\n'E'. This position has no obstacle in it. The robot can only move up, left,\nright, or down. When Bob programmed the robot, he wrote down a string of\ndigits consisting of the digits 0 to 3, inclusive. He intended for each digit\nto correspond to a distinct direction, and the robot would follow the\ndirections in order to reach the exit. Unfortunately, he forgot to actually\nassign the directions to digits. The robot will choose some random mapping of\ndigits to distinct directions. The robot will map distinct digits to distinct\ndirections. The robot will then follow the instructions according to the given\nstring in order and chosen mapping. If an instruction would lead the robot to\ngo off the edge of the maze or hit an obstacle, the robot will crash and break\ndown. If the robot reaches the exit at any point, then the robot will stop\nfollowing any further instructions. Bob is having trouble debugging his robot,\nso he would like to determine the number of mappings of digits to directions\nthat would lead the robot to the exit. Input The first line of input will\ncontain two integers n and m (2 \u2264 n, m \u2264 50), denoting the dimensions of the\nmaze. The next n lines will contain exactly m characters each, denoting the\nmaze. Each character of the maze will be '.', '#', 'S', or 'E'. There will be\nexactly one 'S' and exactly one 'E' in the maze. The last line will contain a\nsingle string s (1 \u2264 |s| \u2264 100) \u2014 the instructions given to the robot. Each\ncharacter of s is a digit from 0 to 3. Output Print a single integer, the\nnumber of mappings of digits to directions that will lead the robot to the\nexit. Examples Input 5 6 .....# S....# .#.... .#.... ...E.. 333300012 Output 1\nInput 6 6 ...... ...... ..SE.. ...... ...... ...... 01232123212302123021\nOutput 14 Input 5 3 ... .S. ### .E. ... 3 Output 0 Note For the first sample,\nthe only valid mapping is , where D is down, L is left, U is up, R is right.\n\n",
        "cf_contest_id": 908,
        "cf_index": "B",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 6\r\n.....#\r\nS....#\r\n.#....\r\n.#....\r\n...E..\r\n333300012\r\n",
                "1\r\n"
            ],
            [
                "6 6\r\n......\r\n......\r\n..SE..\r\n......\r\n......\r\n......\r\n01232123212302123021\r\n",
                "14\r\n"
            ],
            [
                "5 3\r\n...\r\n.S.\r\n###\r\n.E.\r\n...\r\n3\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 2\r\nS.\r\n.E\r\n23\r\n",
                "4\r\n"
            ],
            [
                "2 2\r\nS.\r\n.E\r\n03\r\n",
                "4\r\n"
            ],
            [
                "2 2\r\nSE\r\n..\r\n22\r\n",
                "6\r\n"
            ],
            [
                "2 2\r\nS.\r\nE.\r\n11\r\n",
                "6\r\n"
            ],
            [
                "2 2\r\n#E\r\nS.\r\n01\r\n",
                "2\r\n"
            ],
            [
                "10 10\r\n####S.####\r\n#####.####\r\n#####.####\r\n#####.####\r\n#####..###\r\n######.###\r\n######.###\r\n######.E##\r\n##########\r\n##########\r\n0111101110\r\n",
                "2\r\n"
            ],
            [
                "10 10\r\n#####ES.##\r\n######.###\r\n##########\r\n##########\r\n##########\r\n##########\r\n##########\r\n##########\r\n##########\r\n##########\r\n3\r\n",
                "6\r\n"
            ],
            [
                "2 2\r\n..\r\nSE\r\n0\r\n",
                "6\r\n"
            ],
            [
                "2 2\r\nSE\r\n##\r\n0\r\n",
                "6\r\n"
            ],
            [
                "2 2\r\nS.\r\nE.\r\n012\r\n",
                "8\r\n"
            ],
            [
                "2 3\r\nS.E\r\n###\r\n1222\r\n",
                "0\r\n"
            ],
            [
                "2 2\r\nSE\r\n..\r\n123\r\n",
                "8\r\n"
            ],
            [
                "2 2\r\nS.\r\n.E\r\n2311\r\n",
                "4\r\n"
            ],
            [
                "2 2\r\nS.\r\n.E\r\n0012\r\n",
                "0\r\n"
            ],
            [
                "2 2\r\nS.\r\n.E\r\n1123\r\n",
                "0\r\n"
            ],
            [
                "5 2\r\n..\r\n..\r\n..\r\n..\r\nSE\r\n0\r\n",
                "6\r\n"
            ],
            [
                "2 2\r\nS#\r\nE#\r\n012\r\n",
                "6\r\n"
            ],
            [
                "2 2\r\nES\r\n..\r\n011\r\n",
                "6\r\n"
            ],
            [
                "2 2\r\nSE\r\n..\r\n011\r\n",
                "6\r\n"
            ],
            [
                "2 2\r\nS.\r\nE.\r\n102\r\n",
                "8\r\n"
            ],
            [
                "3 2\r\nE#\r\n##\r\nS#\r\n0112\r\n",
                "0\r\n"
            ]
        ]
    }
]