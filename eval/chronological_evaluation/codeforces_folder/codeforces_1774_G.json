[
    {
        "name": "Segment Covering",
        "description": "ChthollyNotaSeniorious gives DataStructures a number axis with \n    m\n\ndistinct segments on it. Let \n    f(l,r)\n be the number of ways to choose an\neven number of segments such that the union of them is exactly \n    [l,r]\n,\nand \n    g(l,r)\n be the number of ways to choose an odd number of segments\nsuch that the union of them is exactly \n    [l,r]\n. ChthollyNotaSeniorious\nasked DataStructures \n    q\n questions. In each query, ChthollyNotaSeniorious\nwill give DataStructures two numbers \n    l, r\n, and now he wishes that you\ncan help him find the value \n    f(l,r)-g(l,r)\n modulo \n    998\n     244\n     353\n\nso that he wouldn't let her down. Input The first line of input contains two\nintegers \n    m\n (\n    1 \n    \u2264 m \n    \u2264 2 \n    \u00b7 10^5\n) and \n    q\n (\n    1\n    \n    \u2264 q \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of segments and queries,\ncorrespondingly. The \n    i\n-th of the next \n    m\n lines contains two\nintegers \n    x_i\n and \n    y_i\n (\n    1 \n    \u2264 x_i < y_i \n    \u2264 10^9\n),\ndenoting a segment \n    [x_i, y_i]\n. It is guaranteed that all segments are\ndistinct. More formally, there do not exist two numbers \n    i, j\n with \n    1\n    \n    \u2264 i < j \n    \u2264 m\n such that \n    x_i = x_j\n and \n    y_i = y_j\n. The\n\n    i\n-th of the next \n    q\n lines contains two integers \n    l_i\n and\n\n    r_i\n (\n    1 \n    \u2264 l_i < r_i \n    \u2264 10^9\n), describing a query. Output\nFor each query, output a single integer \u2014 \n    f(l_i,r_i)-g(l_i,r_i)\n modulo\n\n    998\n     244\n     353\n. Example Input 4 2 1 3 4 6 2 4 3 5 1 4 1 5 Output 1 0\nNote In the first query, we have to find \n    f(1, 4) - g(1, 4)\n. The only\nsubset of segments with union \n    [1, 4]\n is \n    [1, 3], [2, 4]\n,\nso \n    f(1, 4) = 1, g(1, 4) = 0\n. In the second query, we have to find\n\n    f(1, 5) - g(1, 5)\n. The only subsets of segments with union \n    [1, 5]\n\nare \n    [1, 3], [2, 4], [3, 5]\n and \n    [1, 3], [3, 5]\n,\nso \n    f(1, 5) = 1, g(1, 5) = 1\n.\n\n",
        "cf_contest_id": 1774,
        "cf_index": "G",
        "cf_rating": 3200,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "combinatorics",
            "constructive algorithms",
            "data structures",
            "dp",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 2\r\n1 3\r\n4 6\r\n2 4\r\n3 5\r\n1 4\r\n1 5\r\n",
                "1\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "7 4\r\n1 2\r\n1 5\r\n2 3\r\n2 6\r\n4 8\r\n7 9\r\n10 11\r\n1 7\r\n2 8\r\n2 9\r\n1 3\r\n",
                "0\r\n0\r\n0\r\n1\r\n"
            ],
            [
                "3 3\r\n1 2\r\n1 1000000000\r\n999999999 1000000000\r\n1 2\r\n1 1000000000\r\n999999999 1000000000\r\n",
                "998244352\r\n0\r\n998244352\r\n"
            ],
            [
                "1 10\r\n513874817 566861798\r\n513874817 566861798\r\n513874817 566861798\r\n513874817 566861798\r\n513874817 566861798\r\n513874817 566861798\r\n513874817 566861798\r\n513874817 566861798\r\n513874817 566861798\r\n513874817 566861798\r\n103761602 669683946\r\n",
                "998244352\r\n998244352\r\n998244352\r\n998244352\r\n998244352\r\n998244352\r\n998244352\r\n998244352\r\n998244352\r\n0\r\n"
            ],
            [
                "10 50\r\n27 28\r\n19 32\r\n10 12\r\n22 36\r\n27 38\r\n29 35\r\n5 22\r\n22 30\r\n28 29\r\n7 23\r\n7 36\r\n5 38\r\n19 32\r\n5 22\r\n27 29\r\n27 36\r\n27 30\r\n22 35\r\n19 35\r\n10 30\r\n19 35\r\n7 30\r\n7 28\r\n19 36\r\n19 36\r\n19 36\r\n5 35\r\n3 9\r\n7 23\r\n28 29\r\n7 35\r\n19 28\r\n7 23\r\n19 29\r\n28 30\r\n27 32\r\n5 12\r\n29 36\r\n27 28\r\n5 23\r\n10 12\r\n29 38\r\n22 30\r\n10 30\r\n29 38\r\n19 36\r\n19 35\r\n10 28\r\n10 36\r\n28 30\r\n7 36\r\n22 30\r\n28 36\r\n29 30\r\n7 28\r\n22 28\r\n5 22\r\n5 23\r\n5 12\r\n27 29\r\n",
                "0\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n998244352\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n998244352\r\n0\r\n998244352\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n1\r\n"
            ]
        ]
    }
]