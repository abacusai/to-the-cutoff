[
    {
        "name": "Covered Points Count",
        "description": "You are given \n    n\n segments on a coordinate line; each endpoint of every\nsegment has integer coordinates. Some segments can degenerate to points.\nSegments can intersect with each other, be nested in each other or even\ncoincide. Your task is the following: for every \n    k \n    \u2208 [1..n]\n,\ncalculate the number of points with integer coordinates such that the number\nof segments that cover these points equals \n    k\n. A segment with endpoints\n\n    l_i\n and \n    r_i\n covers point \n    x\n if and only if \n    l_i \n    \u2264 x\n    \n    \u2264 r_i\n. Input The first line of the input contains one integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of segments. The next\n\n    n\n lines contain segments. The \n    i\n-th line contains a pair of\nintegers \n    l_i, r_i\n (\n    0 \n    \u2264 l_i \n    \u2264 r_i \n    \u2264 10^18\n) \u2014 the\nendpoints of the \n    i\n-th segment. Output Print \n    n\n space separated\nintegers \n    cnt_1, cnt_2, \n    \u2026, cnt_n\n, where \n    cnt_i\n is equal to the\nnumber of points such that the number of segments that cover these points\nequals to \n    i\n. Examples Input 3 0 3 1 3 3 8 Output 6 2 1 Input 3 1 3 2 4 5\n7 Output 5 2 0 Note The picture describing the first example: Points with\ncoordinates \n    [0, 4, 5, 6, 7, 8]\n are covered by one segment, points \n    [1,\n    2]\n are covered by two segments and point \n    [3]\n is covered by three\nsegments. The picture describing the second example: Points \n    [1, 4, 5, 6,\n    7]\n are covered by one segment, points \n    [2, 3]\n are covered by two\nsegments and there are no points covered by three segments.\n\n",
        "cf_contest_id": 1000,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n0 3\r\n1 3\r\n3 8\r\n",
                "6 2 1\r\n"
            ],
            [
                "3\r\n1 3\r\n2 4\r\n5 7\r\n",
                "5 2 0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n0 1000000000000000000\r\n",
                "1000000000000000001\r\n"
            ]
        ]
    }
]