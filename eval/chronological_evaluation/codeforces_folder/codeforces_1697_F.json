[
    {
        "name": "Too Many Constraints",
        "description": "You are asked to build an array \n    a\n, consisting of \n    n\n integers, each\nelement should be from \n    1\n to \n    k\n. The array should be non-decreasing\n(\n    a_i \n    \u2264 a_i+1\n for all \n    i\n from \n    1\n to \n    n-1\n). You are\nalso given additional constraints on it. Each constraint is of one of three\nfollowing types: \n    1\u00a0i\u00a0x\n: \n    a_i\n should not be equal to \n    x\n;\n\n    2\u00a0i\u00a0j\u00a0x\n: \n    a_i + a_j\n should be less than or equal to \n    x\n;\n\n    3\u00a0i\u00a0j\u00a0x\n: \n    a_i + a_j\n should be greater than or equal to \n    x\n.\nBuild any non-decreasing array that satisfies all constraints or report that\nno such array exists. Input The first line contains a single integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of testcases. The first line of each\ntestcase contains three integers \n    n, m\n and \n    k\n (\n    2 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^4\n; \n    0 \n    \u2264 m \n    \u2264 2 \n    \u00b7 10^4\n; \n    2 \n    \u2264 k \n    \u2264\n    10\n). The \n    i\n-th of the next \n    m\n lines contains a description of a\nconstraint. Each constraint is of one of three following types: \n    1\u00a0i\u00a0x\n\n(\n    1 \n    \u2264 i \n    \u2264 n\n; \n    1 \n    \u2264 x \n    \u2264 k\n): \n    a_i\n should not be\nequal to \n    x\n; \n    2\u00a0i\u00a0j\u00a0x\n (\n    1 \n    \u2264 i < j \n    \u2264 n\n; \n    2 \n    \u2264 x\n    \n    \u2264 2 \n    \u00b7 k\n): \n    a_i + a_j\n should be less than or equal to\n\n    x\n; \n    3\u00a0i\u00a0j\u00a0x\n (\n    1 \n    \u2264 i < j \n    \u2264 n\n; \n    2 \n    \u2264 x \n    \u2264 2\n    \n    \u00b7 k\n): \n    a_i + a_j\n should be greater than or equal to \n    x\n. The\nsum of \n    n\n over all testcases doesn't exceed \n    2 \n    \u00b7 10^4\n. The sum\nof \n    m\n over all testcases doesn't exceed \n    2 \n    \u00b7 10^4\n. Output For\neach testcase, determine if there exists a non-decreasing array that satisfies\nall conditions. If there is no such array, then print -1. Otherwise, print any\nvalid array \u2014 \n    n\n integers from \n    1\n to \n    k\n. Example Input 4 4 0 4\n2 2 3 3 1 2 3 1 2 2 3 3 2 1 1 1 2 2 3 2 3 2 3 2 5 5 5 3 2 5 7 2 4 5 10 3 4 5 6\n3 3 4 7 2 1 5 7 Output 1 2 3 4 1 3 -1 1 2 2 5 5\n\n",
        "cf_contest_id": 1697,
        "cf_index": "F",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "2-sat",
            "constructive algorithms",
            "graphs",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4\r\n4 0 4\r\n2 2 3\r\n3 1 2 3\r\n1 2 2\r\n3 3 2\r\n1 1 1\r\n2 2 3 2\r\n3 2 3 2\r\n5 5 5\r\n3 2 5 7\r\n2 4 5 10\r\n3 4 5 6\r\n3 3 4 7\r\n2 1 5 7\r\n",
                "1 1 1 1 \r\n1 3 \r\n-1\r\n1 2 3 4 5 \r\n"
            ]
        ],
        "private_cases": []
    }
]