[
    {
        "name": "Doe Graphs",
        "description": "John Doe decided that some mathematical object must be named after him. So he\ninvented the Doe graphs. The Doe graphs are a family of undirected graphs,\neach of them is characterized by a single non-negative number \u2014 its order.\nWe'll denote a graph of order k as D(k), and we'll denote the number of\nvertices in the graph D(k) as |D(k)|. Then let's define the Doe graphs as\nfollows: D(0) consists of a single vertex, that has number 1. D(1) consists of\ntwo vertices with numbers 1 and 2, connected by an edge. D(n) for n \u2265 2 is\nobtained from graphs D(n - 1) and D(n - 2). D(n - 1) and D(n - 2) are joined\nin one graph, at that numbers of all vertices of graph D(n - 2) increase by\n|D(n - 1)| (for example, vertex number 1 of graph D(n - 2) becomes vertex\nnumber 1 + |D(n - 1)|). After that two edges are added to the graph: the first\none goes between vertices with numbers |D(n - 1)| and |D(n - 1)| + 1, the\nsecond one goes between vertices with numbers |D(n - 1)| + 1 and 1. Note that\nthe definition of graph D(n) implies, that D(n) is a connected graph, its\nvertices are numbered from 1 to |D(n)|. The picture shows the Doe graphs of\norder 1, 2, 3 and 4, from left to right. John thinks that Doe graphs are that\ngreat because for them exists a polynomial algorithm for the search of\nHamiltonian path. However, your task is to answer queries of finding the\nshortest-length path between the vertices ai and bi in the graph D(n). A path\nbetween a pair of vertices u and v in the graph is a sequence of vertices x1,\nx2, ..., xk (k > 1) such, that x1 = u, xk = v, and for any i (i < k) vertices\nxi and xi + 1 are connected by a graph edge. The length of path x1, x2, ...,\nxk is number (k - 1). Input The first line contains two integers t and n (1 \u2264\nt \u2264 10^5; 1 \u2264 n \u2264 10^3) \u2014 the number of queries and the order of the given\ngraph. The i-th of the next t lines contains two integers ai and bi (1 \u2264 ai,\nbi \u2264 10^16, ai \u2260 bi) \u2014 numbers of two vertices in the i-th query. It is\nguaranteed that ai, bi \u2264 |D(n)|. Please, do not use the \nor write 64-bit integers in \u0421++. It is preferred to use cin, cout streams or\nthe \nline \u2014 the length of the shortest path between vertices ai and bi. Print the\nanswers to the queries in the order, in which the queries are given in the\ninput. Examples Input 10 5 1 2 1 3 1 4 1 5 2 3 2 4 2 5 3 4 3 5 4 5 Output 1 1\n1 2 1 2 3 1 2 1\n\n",
        "cf_contest_id": 232,
        "cf_index": "C",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "divide and conquer",
            "dp",
            "graphs",
            "shortest paths"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10 5\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n2 3\r\n2 4\r\n2 5\r\n3 4\r\n3 5\r\n4 5\r\n",
                "1\r\n1\r\n1\r\n2\r\n1\r\n2\r\n3\r\n1\r\n2\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "28 10\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n2 3\r\n2 4\r\n2 5\r\n2 6\r\n2 7\r\n2 8\r\n3 4\r\n3 5\r\n3 6\r\n3 7\r\n3 8\r\n4 5\r\n4 6\r\n4 7\r\n4 8\r\n5 6\r\n5 7\r\n5 8\r\n6 7\r\n6 8\r\n7 8\r\n",
                "1\r\n1\r\n1\r\n2\r\n1\r\n2\r\n2\r\n1\r\n2\r\n3\r\n2\r\n3\r\n3\r\n1\r\n2\r\n2\r\n3\r\n3\r\n1\r\n2\r\n3\r\n3\r\n1\r\n2\r\n2\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "5 1000\r\n1 10000000000000000\r\n1 9999999999999999\r\n2 9999999999999999\r\n3 9999999999999999\r\n4 9999999999999999\r\n",
                "20\r\n20\r\n21\r\n21\r\n21\r\n"
            ],
            [
                "1 6\r\n1 13\r\n",
                "2\r\n"
            ],
            [
                "78 5\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n1 9\r\n1 10\r\n1 11\r\n1 12\r\n1 13\r\n2 3\r\n2 4\r\n2 5\r\n2 6\r\n2 7\r\n2 8\r\n2 9\r\n2 10\r\n2 11\r\n2 12\r\n2 13\r\n3 4\r\n3 5\r\n3 6\r\n3 7\r\n3 8\r\n3 9\r\n3 10\r\n3 11\r\n3 12\r\n3 13\r\n4 5\r\n4 6\r\n4 7\r\n4 8\r\n4 9\r\n4 10\r\n4 11\r\n4 12\r\n4 13\r\n5 6\r\n5 7\r\n5 8\r\n5 9\r\n5 10\r\n5 11\r\n5 12\r\n5 13\r\n6 7\r\n6 8\r\n6 9\r\n6 10\r\n6 11\r\n6 12\r\n6 13\r\n7 8\r\n7 9\r\n7 10\r\n7 11\r\n7 12\r\n7 13\r\n8 9\r\n8 10\r\n8 11\r\n8 12\r\n8 13\r\n9 10\r\n9 11\r\n9 12\r\n9 13\r\n10 11\r\n10 12\r\n10 13\r\n11 12\r\n11 13\r\n12 13\r\n",
                "1\r\n1\r\n1\r\n2\r\n1\r\n2\r\n2\r\n1\r\n2\r\n2\r\n2\r\n3\r\n1\r\n2\r\n3\r\n2\r\n3\r\n3\r\n2\r\n3\r\n3\r\n3\r\n4\r\n1\r\n2\r\n2\r\n3\r\n3\r\n2\r\n3\r\n3\r\n3\r\n4\r\n1\r\n2\r\n3\r\n3\r\n2\r\n3\r\n3\r\n3\r\n4\r\n1\r\n2\r\n2\r\n3\r\n4\r\n4\r\n4\r\n5\r\n1\r\n1\r\n2\r\n3\r\n3\r\n3\r\n4\r\n1\r\n2\r\n3\r\n3\r\n3\r\n4\r\n1\r\n2\r\n2\r\n2\r\n3\r\n1\r\n1\r\n1\r\n2\r\n1\r\n2\r\n3\r\n1\r\n2\r\n1\r\n"
            ],
            [
                "1 1000\r\n1 8944394323791464\r\n",
                "2\r\n"
            ]
        ]
    }
]