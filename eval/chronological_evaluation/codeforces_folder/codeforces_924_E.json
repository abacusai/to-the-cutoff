[
    {
        "name": "Wardrobe",
        "description": "Olya wants to buy a custom wardrobe. It should have n boxes with heights a1,\na2, ..., an, stacked one on another in some order. In other words, we can\nrepresent each box as a vertical segment of length ai, and all these segments\nshould form a single segment from 0 to without any overlaps. Some of the boxes\nare important (in this case bi = 1), others are not (then bi = 0). Olya\ndefines the convenience of the wardrobe as the number of important boxes such\nthat their bottom edge is located between the heights l and r, inclusive. You\nare given information about heights of the boxes and their importance. Compute\nthe maximum possible convenience of the wardrobe if you can reorder the boxes\narbitrarily. Input The first line contains three integers n, l and r (1 \u2264 n \u2264\n10 000, 0 \u2264 l \u2264 r \u2264 10 000) \u2014 the number of boxes, the lowest and the highest\nheights for a bottom edge of an important box to be counted in convenience.\nThe second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 10 000) \u2014 the\nheights of the boxes. It is guaranteed that the sum of height of all boxes (i.\ne. the height of the wardrobe) does not exceed 10 000: Olya is not very tall\nand will not be able to reach any higher. The second line contains n integers\nb1, b2, ..., bn (0 \u2264 bi \u2264 1), where bi equals 1 if the i-th box is important,\nand 0 otherwise. Output Print a single integer \u2014 the maximum possible\nconvenience of the wardrobe. Examples Input 5 3 6 3 2 5 1 2 1 1 0 1 0 Output 2\nInput 2 2 5 3 6 1 1 Output 1 Note In the first example you can, for example,\nfirst put an unimportant box of height 2, then put an important boxes of sizes\n1, 3 and 2, in this order, and then the remaining unimportant boxes. The\nconvenience is equal to 2, because the bottom edges of important boxes of\nsizes 3 and 2 fall into the range [3, 6]. In the second example you have to\nput the short box under the tall box.\n\n",
        "cf_contest_id": 924,
        "cf_index": "E",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 3 6\r\n3 2 5 1 2\r\n1 1 0 1 0\r\n",
                "2"
            ],
            [
                "2 2 5\r\n3 6\r\n1 1\r\n",
                "1"
            ]
        ],
        "private_cases": [
            [
                "1 1 1\r\n1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "2 0 10\r\n1 1\r\n1 1\r\n",
                "2"
            ],
            [
                "10 101 196\r\n21 8 3 21 14 12 9 13 6 7\r\n1 1 1 0 1 1 1 1 1 1\r\n",
                "2"
            ],
            [
                "10 71 286\r\n61 59 99 33 2 19 72 59 45 96\r\n1 1 0 0 1 0 1 1 1 1\r\n",
                "5"
            ],
            [
                "10 258 438\r\n56 37 31 75 55 48 80 98 92 89\r\n0 1 0 1 0 1 1 0 1 1\r\n",
                "4"
            ],
            [
                "10 201 434\r\n67 97 89 35 8 43 57 89 70 82\r\n1 1 0 0 1 1 0 1 0 0\r\n",
                "5"
            ],
            [
                "1 0 1\r\n1\r\n1\r\n",
                "1"
            ],
            [
                "1 0 1\r\n1\r\n0\r\n",
                "0\r\n"
            ],
            [
                "7 61 74\r\n9 2 20 15 19 12 11\r\n0 0 0 0 1 0 0\r\n",
                "1"
            ],
            [
                "10 247 443\r\n51 79 70 55 14 33 28 74 48 49\r\n1 1 1 1 1 1 1 1 1 1\r\n",
                "6"
            ],
            [
                "94 3096 4732\r\n9 26 1 3 12 51 7 39 45 60 46 53 16 61 10 9 30 31 28 5 54 41 38 38 56 37 35 57 48 29 59 48 49 58 60 23 22 12 56 61 32 56 53 35 56 12 15 35 65 24 18 60 16 61 41 9 59 12 34 26 20 49 60 27 21 64 47 23 63 50 26 7 45 30 11 43 17 9 33 51 36 23 60 6 18 35 39 15 21 33 5 18 13 37\r\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "13"
            ],
            [
                "2 2 3\r\n2 2\r\n1 0\r\n",
                "1"
            ],
            [
                "42 893 1071\r\n8 46 26 43 50 2 10 6 8 42 5 41 4 41 31 41 4 1 33 26 8 34 47 50 44 7 13 2 26 8 51 43 34 41 10 38 48 11 9 32 29 50\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "20"
            ],
            [
                "5 84 91\r\n72 5 64 72 50\r\n1 1 1 0 1\r\n",
                "0\r\n"
            ],
            [
                "3 6 6\r\n14 5 15\r\n1 1 0\r\n",
                "0\r\n"
            ],
            [
                "1 43 63\r\n69\r\n1\r\n",
                "0\r\n"
            ]
        ]
    }
]