[
    {
        "name": "Permutation Game",
        "description": "After a long day, Alice and Bob decided to play a little game. The game board\nconsists of \n    n\n cells in a straight line, numbered from \n    1\n to\n\n    n\n, where each cell contains a number \n    a_i\n between \n    1\n and\n\n    n\n. Furthermore, no two cells contain the same number. A token is placed\nin one of the cells. They take alternating turns of moving the token around\nthe board, with Alice moving first. The current player can move from cell\n\n    i\n to cell \n    j\n only if the following two conditions are satisfied:\nthe number in the new cell \n    j\n must be strictly larger than the number in\nthe old cell \n    i\n (i.e. \n    a_j > a_i\n), and the distance that the token\ntravels during this turn must be a multiple of the number in the old cell\n(i.e. \n    |i-j|\n     a_i = 0\n). Whoever is unable to make a move, loses.\nFor each possible starting position, determine who wins if they both play\noptimally. It can be shown that the game is always finite, i.e. there always\nis a winning strategy for one of the players. Input The first line contains a\nsingle integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the number of numbers.\nThe second line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1\n    \n    \u2264 a_i \n    \u2264 n\n). Furthermore, there are no pair of indices \n    i \n    \u2260\n    j\n such that \n    a_i = a_j\n. Output Print \n    s\n \u2014 a string of \n    n\n\ncharacters, where the \n    i\n-th character represents the outcome of the game\nif the token is initially placed in the cell \n    i\n. If Alice wins, then\n\n    s_i\n has to be equal to \"A\"; otherwise, \n    s_i\n has to be equal to \"B\".\nExamples Input 8 3 6 5 4 2 7 1 8 Output BAAAABAB Input 15 3 11 2 5 10 9 7 13\n15 8 4 12 6 1 14 Output ABAAAABBBAABAAB Note In the first sample, if Bob puts\nthe token on the number (not position): \n    1\n: Alice can move to any number.\nShe can win by picking \n    7\n, from which Bob has no move. \n    2\n: Alice can\nmove to \n    3\n and \n    5\n. Upon moving to \n    5\n, Bob can win by moving to\n\n    8\n. If she chooses \n    3\n instead, she wins, as Bob has only a move to\n\n    4\n, from which Alice can move to \n    8\n. \n    3\n: Alice can only move to\n\n    4\n, after which Bob wins by moving to \n    8\n. \n    4\n, \n    5\n, or\n\n    6\n: Alice wins by moving to \n    8\n. \n    7\n, \n    8\n: Alice has no move,\nand hence she loses immediately.\n\n",
        "cf_contest_id": 1033,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dp",
            "games"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8\r\n3 6 5 4 2 7 1 8\r\n",
                "BAAAABAB\r\n"
            ],
            [
                "15\r\n3 11 2 5 10 9 7 13 15 8 4 12 6 1 14\r\n",
                "ABAAAABBBAABAAB\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n",
                "B\r\n"
            ],
            [
                "2\r\n1 2\r\n",
                "AB\r\n"
            ],
            [
                "2\r\n2 1\r\n",
                "BA\r\n"
            ],
            [
                "10\r\n1 2 3 4 5 6 7 8 9 10\r\n",
                "AAAAABBBBB\r\n"
            ],
            [
                "40\r\n5 40 6 27 39 37 17 34 3 30 28 13 12 8 11 10 31 4 1 16 38 22 29 35 33 23 7 9 24 14 18 26 19 21 15 36 2 20 32 25\r\n",
                "ABABBBABABAAAAAABAAABBBBBBAAAABABBABABBB\r\n"
            ],
            [
                "3\r\n1 2 3\r\n",
                "ABB\r\n"
            ],
            [
                "3\r\n1 3 2\r\n",
                "ABB\r\n"
            ],
            [
                "3\r\n2 1 3\r\n",
                "AAB\r\n"
            ],
            [
                "3\r\n2 3 1\r\n",
                "BBA\r\n"
            ],
            [
                "3\r\n3 1 2\r\n",
                "BAA\r\n"
            ],
            [
                "3\r\n3 2 1\r\n",
                "BBA\r\n"
            ],
            [
                "4\r\n3 4 1 2\r\n",
                "BBAA\r\n"
            ],
            [
                "5\r\n1 4 2 3 5\r\n",
                "ABABB\r\n"
            ],
            [
                "6\r\n5 3 6 1 4 2\r\n",
                "BBBAAA\r\n"
            ],
            [
                "7\r\n1 2 3 6 7 4 5\r\n",
                "AAABBBB\r\n"
            ],
            [
                "8\r\n6 2 1 8 5 7 3 4\r\n",
                "BAABBBAA\r\n"
            ],
            [
                "9\r\n1 6 4 5 9 8 7 3 2\r\n",
                "ABABBBBAA\r\n"
            ],
            [
                "10\r\n5 1 6 2 8 3 4 10 9 7\r\n",
                "BAAABABBBB\r\n"
            ],
            [
                "15\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\r\n",
                "AAAAAAABBBBBBBB\r\n"
            ],
            [
                "8\r\n7 5 1 2 3 4 6 8\r\n",
                "AAAAABBB\r\n"
            ],
            [
                "16\r\n14 15 3 11 5 4 7 8 1 6 10 2 12 9 13 16\r\n",
                "BBBBBAAAAAAAABAB\r\n"
            ]
        ]
    }
]