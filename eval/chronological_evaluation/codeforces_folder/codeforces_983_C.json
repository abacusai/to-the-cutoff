[
    {
        "name": "Elevator",
        "description": "You work in a big office. It is a 9 floor building with an elevator that can\naccommodate up to 4 people. It is your responsibility to manage this elevator.\nToday you are late, so there are queues on some floors already. For each\nperson you know the floor where he currently is and the floor he wants to\nreach. Also, you know the order in which people came to the elevator.\nAccording to the company's rules, if an employee comes to the elevator earlier\nthan another one, he has to enter the elevator earlier too (even if these\nemployees stay on different floors). Note that the employees are allowed to\nleave the elevator in arbitrary order. The elevator has two commands: Go up or\ndown one floor. The movement takes 1 second. Open the doors on the current\nfloor. During this operation all the employees who have reached their\ndestination get out of the elevator. Then all the employees on the floor get\nin the elevator in the order they are queued up while it doesn't contradict\nthe company's rules and there is enough space in the elevator. Each employee\nspends 1 second to get inside and outside the elevator. Initially the elevator\nis empty and is located on the floor 1. You are interested what is the minimum\npossible time you need to spend to deliver all the employees to their\ndestination. It is not necessary to return the elevator to the floor 1. Input\nThe first line contains an integer n (1 \u2264 n \u2264 2000) \u2014 the number of employees.\nThe i-th of the next n lines contains two integers ai and bi (1 \u2264 ai, bi \u2264 9,\nai \u2260 bi) \u2014 the floor on which an employee initially is, and the floor he wants\nto reach. The employees are given in the order they came to the elevator.\nOutput Print a single integer \u2014 the minimal possible time in seconds. Examples\nInput 2 3 5 5 3 Output 10 Input 2 5 3 3 5 Output 12 Note Explaination for the\nfirst sample t = 0 t = 2 t = 3 t = 5 t = 6 t = 7 t = 9 t = 10\n\n",
        "cf_contest_id": 983,
        "cf_index": "C",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "graphs",
            "shortest paths"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n3 5\r\n5 3\r\n",
                "10\r\n"
            ],
            [
                "2\r\n5 3\r\n3 5\r\n",
                "12\r\n"
            ]
        ],
        "private_cases": [
            [
                "9\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 1\r\n",
                "34\r\n"
            ],
            [
                "50\r\n9 5\r\n2 6\r\n5 4\r\n7 5\r\n3 6\r\n5 8\r\n1 2\r\n6 1\r\n9 7\r\n8 1\r\n9 5\r\n6 8\r\n6 8\r\n2 8\r\n4 9\r\n6 7\r\n7 8\r\n5 8\r\n1 2\r\n9 2\r\n5 9\r\n6 7\r\n3 2\r\n9 8\r\n7 8\r\n7 4\r\n6 5\r\n1 7\r\n6 5\r\n2 6\r\n3 1\r\n6 5\r\n3 7\r\n9 3\r\n8 1\r\n8 3\r\n8 2\r\n1 9\r\n9 2\r\n3 2\r\n8 7\r\n5 1\r\n6 2\r\n2 1\r\n6 1\r\n3 4\r\n4 1\r\n2 3\r\n2 6\r\n2 9\r\n",
                "278\r\n"
            ],
            [
                "50\r\n8 9\r\n6 7\r\n6 8\r\n4 1\r\n3 2\r\n9 3\r\n8 3\r\n9 7\r\n4 6\r\n4 6\r\n5 6\r\n7 2\r\n6 3\r\n1 3\r\n8 2\r\n4 6\r\n6 8\r\n7 6\r\n8 6\r\n9 4\r\n8 6\r\n9 1\r\n3 8\r\n3 1\r\n4 7\r\n4 9\r\n9 1\r\n7 4\r\n3 5\r\n1 7\r\n3 5\r\n8 9\r\n5 4\r\n2 9\r\n2 9\r\n3 9\r\n8 5\r\n4 9\r\n9 4\r\n5 6\r\n6 1\r\n4 2\r\n3 9\r\n9 1\r\n9 4\r\n4 5\r\n2 4\r\n2 6\r\n3 6\r\n1 9\r\n",
                "252\r\n"
            ],
            [
                "50\r\n3 9\r\n8 9\r\n7 2\r\n9 1\r\n5 2\r\n2 8\r\n2 4\r\n8 6\r\n4 6\r\n1 6\r\n5 3\r\n3 8\r\n8 2\r\n6 7\r\n7 1\r\n2 4\r\n2 8\r\n3 7\r\n7 1\r\n7 9\r\n9 3\r\n7 2\r\n2 7\r\n8 4\r\n5 8\r\n6 8\r\n7 1\r\n7 5\r\n5 6\r\n9 1\r\n8 6\r\n3 6\r\n7 6\r\n4 3\r\n3 2\r\n9 2\r\n4 9\r\n2 1\r\n7 9\r\n1 8\r\n4 9\r\n5 2\r\n7 2\r\n9 8\r\n3 1\r\n4 5\r\n3 4\r\n2 7\r\n2 1\r\n6 1\r\n",
                "260\r\n"
            ],
            [
                "50\r\n7 1\r\n4 8\r\n9 3\r\n9 3\r\n2 4\r\n5 9\r\n1 5\r\n1 4\r\n7 6\r\n4 8\r\n3 6\r\n2 8\r\n5 1\r\n8 9\r\n7 4\r\n7 2\r\n2 4\r\n7 9\r\n8 7\r\n3 8\r\n1 7\r\n4 5\r\n7 2\r\n6 4\r\n6 1\r\n4 8\r\n5 6\r\n4 3\r\n6 5\r\n6 4\r\n6 9\r\n2 5\r\n9 3\r\n3 4\r\n3 4\r\n9 3\r\n7 9\r\n5 8\r\n1 6\r\n5 1\r\n8 3\r\n7 4\r\n1 8\r\n5 2\r\n1 7\r\n6 1\r\n9 6\r\n3 1\r\n6 5\r\n9 7\r\n",
                "274\r\n"
            ],
            [
                "50\r\n1 9\r\n9 4\r\n4 2\r\n2 4\r\n3 8\r\n9 5\r\n3 2\r\n8 3\r\n8 1\r\n4 7\r\n5 3\r\n2 6\r\n1 8\r\n6 5\r\n4 1\r\n5 7\r\n1 4\r\n4 7\r\n5 4\r\n8 2\r\n4 6\r\n8 7\r\n1 9\r\n1 6\r\n6 4\r\n5 2\r\n5 3\r\n2 6\r\n4 6\r\n5 2\r\n6 7\r\n5 3\r\n9 5\r\n8 3\r\n1 9\r\n2 6\r\n5 1\r\n7 3\r\n4 3\r\n7 2\r\n4 3\r\n5 7\r\n6 8\r\n8 2\r\n3 6\r\n4 9\r\n1 8\r\n7 8\r\n5 4\r\n7 6\r\n",
                "258\r\n"
            ],
            [
                "50\r\n5 9\r\n1 2\r\n6 9\r\n1 6\r\n8 1\r\n5 3\r\n2 1\r\n2 7\r\n6 1\r\n4 3\r\n6 1\r\n2 6\r\n2 8\r\n2 1\r\n3 4\r\n6 2\r\n4 8\r\n6 4\r\n2 1\r\n1 5\r\n4 9\r\n6 8\r\n4 1\r\n1 6\r\n1 5\r\n5 9\r\n2 6\r\n6 9\r\n4 2\r\n4 7\r\n8 2\r\n4 6\r\n2 5\r\n9 4\r\n3 1\r\n8 4\r\n3 9\r\n1 3\r\n2 3\r\n8 7\r\n5 4\r\n2 6\r\n9 5\r\n6 2\r\n5 8\r\n2 8\r\n8 9\r\n9 2\r\n5 3\r\n9 1\r\n",
                "282\r\n"
            ],
            [
                "50\r\n9 8\r\n8 9\r\n2 3\r\n2 6\r\n7 6\r\n9 8\r\n7 5\r\n8 5\r\n2 9\r\n4 2\r\n4 6\r\n9 4\r\n1 9\r\n4 8\r\n7 9\r\n7 4\r\n4 7\r\n7 6\r\n8 9\r\n2 8\r\n1 3\r\n6 7\r\n6 3\r\n1 8\r\n9 3\r\n4 9\r\n9 6\r\n4 2\r\n6 5\r\n3 8\r\n9 3\r\n7 5\r\n9 6\r\n5 6\r\n4 7\r\n5 7\r\n9 1\r\n7 5\r\n5 6\r\n3 1\r\n4 3\r\n7 1\r\n9 8\r\n7 8\r\n3 7\r\n8 3\r\n9 6\r\n5 7\r\n1 8\r\n6 4\r\n",
                "275\r\n"
            ],
            [
                "9\r\n2 1\r\n5 9\r\n2 6\r\n2 6\r\n4 7\r\n7 3\r\n3 1\r\n3 1\r\n7 8\r\n",
                "46\r\n"
            ],
            [
                "5\r\n1 7\r\n2 5\r\n8 6\r\n3 4\r\n1 6\r\n",
                "29\r\n"
            ],
            [
                "4\r\n2 1\r\n1 7\r\n5 8\r\n8 4\r\n",
                "21\r\n"
            ],
            [
                "1\r\n1 9\r\n",
                "10\r\n"
            ],
            [
                "1\r\n9 1\r\n",
                "18\r\n"
            ],
            [
                "1\r\n1 5\r\n",
                "6\r\n"
            ],
            [
                "1\r\n8 6\r\n",
                "11\r\n"
            ]
        ]
    }
]