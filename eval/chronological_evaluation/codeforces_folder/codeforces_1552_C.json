[
    {
        "name": "Maximize the Intersections",
        "description": "On a circle lie \n    2n\n distinct points, with the following property: however\nyou choose \n    3\n chords that connect \n    3\n disjoint pairs of points, no\npoint strictly inside the circle belongs to all \n    3\n chords. The points are\nnumbered \n    1, \n      2, \n     \n    \u2026, \n      2n\n in clockwise order. Initially,\n\n    k\n chords connect \n    k\n pairs of points, in such a way that all the\n\n    2k\n endpoints of these chords are distinct. You want to draw \n    n - k\n\nadditional chords that connect the remaining \n    2(n - k)\n points (each point\nmust be an endpoint of exactly one chord). In the end, let \n    x\n be the\ntotal number of intersections among all \n    n\n chords. Compute the maximum\nvalue that \n    x\n can attain if you choose the \n    n - k\n chords optimally.\nNote that the exact position of the \n    2n\n points is not relevant, as long\nas the property stated in the first paragraph holds. Input The first line\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of\ntest cases. Then \n    t\n test cases follow. The first line of each test case\ncontains two integers \n    n\n and \n    k\n (\n    1 \n    \u2264 n \n    \u2264 100\n, \n    0\n    \n    \u2264 k \n    \u2264 n\n) \u2014 half the number of points and the number of chords\ninitially drawn. Then \n    k\n lines follow. The \n    i\n-th of them contains\ntwo integers \n    x_i\n and \n    y_i\n (\n    1 \n    \u2264 x_i, \n      y_i \n    \u2264 2n\n,\n\n    x_i \n     y_i\n) \u2014 the endpoints of the \n    i\n-th chord. It is guaranteed\nthat the \n    2k\n numbers \n    x_1, \n      y_1, \n      x_2, \n      y_2, \n     \n    \u2026,\n    \n      x_k, \n      y_k\n are all distinct. Output For each test case, output the\nmaximum number of intersections that can be obtained by drawing \n    n - k\n\nadditional chords. Example Input 4 4 2 8 2 1 5 1 1 2 1 2 0 10 6 14 6 2 20 9 10\n13 18 15 12 11 7 Output 4 0 1 14 Note In the first test case, there are three\nways to draw the \n    2\n additional chords, shown below (black chords are the\nones initially drawn, while red chords are the new ones): We see that the\nthird way gives the maximum number of intersections, namely \n    4\n. In the\nsecond test case, there are no more chords to draw. Of course, with only one\nchord present there are no intersections. In the third test case, we can make\nat most one intersection by drawing chords \n    1-3\n and \n    2-4\n, as shown\nbelow:\n\n",
        "cf_contest_id": 1552,
        "cf_index": "C",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "constructive algorithms",
            "geometry",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4 2\r\n8 2\r\n1 5\r\n1 1\r\n2 1\r\n2 0\r\n10 6\r\n14 6\r\n2 20\r\n9 10\r\n13 18\r\n15 12\r\n11 7\r\n",
                "4\r\n0\r\n1\r\n14\r\n"
            ]
        ],
        "private_cases": []
    }
]