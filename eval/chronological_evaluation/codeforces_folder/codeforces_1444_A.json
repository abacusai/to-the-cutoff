[
    {
        "name": "Division",
        "description": "Oleg's favorite subjects are History and Math, and his favorite branch of\nmathematics is division. To improve his division skills, Oleg came up with\n\n    t\n pairs of integers \n    p_i\n and \n    q_i\n and for each pair decided to\nfind the greatest integer \n    x_i\n, such that: \n    p_i\n is divisible by\n\n    x_i\n; \n    x_i\n is not divisible by \n    q_i\n. Oleg is really good at\ndivision and managed to find all the answers quickly, how about you? Input The\nfirst line contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 50\n) \u2014 the number\nof pairs. Each of the following \n    t\n lines contains two integers \n    p_i\n\nand \n    q_i\n (\n    1 \n    \u2264 p_i \n    \u2264 10^18\n; \n    2 \n    \u2264 q_i \n    \u2264\n    10^9\n) \u2014 the \n    i\n-th pair of integers. Output Print \n    t\n integers:\nthe \n    i\n-th integer is the largest \n    x_i\n such that \n    p_i\n is\ndivisible by \n    x_i\n, but \n    x_i\n is not divisible by \n    q_i\n. One can\nshow that there is always at least one value of \n    x_i\n satisfying the\ndivisibility conditions for the given constraints. Example Input 3 10 4 12 6\n179 822 Output 10 4 179 Note For the first pair, where \n    p_1 = 10\n and\n\n    q_1 = 4\n, the answer is \n    x_1 = 10\n, since it is the greatest divisor\nof \n    10\n and \n    10\n is not divisible by \n    4\n. For the second pair,\nwhere \n    p_2 = 12\n and \n    q_2 = 6\n, note that \n    12\n is not a valid\n\n    x_2\n, since \n    12\n is divisible by \n    q_2 = 6\n; \n    6\n is not valid\n\n    x_2\n as well: \n    6\n is also divisible by \n    q_2 = 6\n. The next\navailable divisor of \n    p_2 = 12\n is \n    4\n, which is the answer, since\n\n    4\n is not divisible by \n    6\n.\n\n",
        "cf_contest_id": 1444,
        "cf_index": "A",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n10 4\r\n12 6\r\n179 822\r\n",
                "10\r\n4\r\n179\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n246857872446986130 713202678\r\n857754240051582063 933416507\r\n873935277189052612 530795521\r\n557307185726829409 746530097\r\n173788420792057536 769449696\r\n101626841876448103 132345797\r\n598448092106640578 746411314\r\n733629261048200000 361714100\r\n981271355542147402 38\r\n559754147245184151 431517529\r\n",
                "123428936223493065\r\n918940509\r\n37932865019708\r\n1\r\n57929473597352512\r\n767888699\r\n299224046053320289\r\n31896924393400000\r\n490635677771073701\r\n26946235365387\r\n"
            ],
            [
                "10\r\n228282288 228282288\r\n1000000000000000000 1000000000\r\n1244094302301841 35271721\r\n998005893107997601 999002449\r\n999999874000003969 999999937\r\n956980859148255595 5\r\n1 323\r\n1 1000000000\r\n424001357601318819 537974673\r\n100000000 1000000000\r\n",
                "114141144\r\n976562500000000\r\n5939\r\n31607\r\n1\r\n191396171829651119\r\n1\r\n1\r\n424001357601318819\r\n100000000\r\n"
            ],
            [
                "1\r\n42034266112 80174\r\n",
                "1048576\r\n"
            ],
            [
                "1\r\n5 5\r\n",
                "1\r\n"
            ]
        ]
    }
]