[
    {
        "name": "LuoTianyi and Cartridge",
        "description": "LuoTianyi is watching the anime Made in Abyss. She finds that making a\nCartridge is interesting. To describe the process of making a Cartridge more\nclearly, she abstracts the original problem and gives you the following\nproblem. You are given a tree \n    T\n consisting of \n    n\n vertices. Each\nvertex has values \n    a_i\n and \n    b_i\n and each edge has values \n    c_j\n\nand \n    d_j\n. Now you are aim to build a tree \n    T'\n as follows: First,\nselect \n    p\n vertices from \n    T\n (\n    p\n is a number chosen by yourself)\nas the vertex set \n    S'\n of \n    T'\n. Next, select \n    p-1\n edges from\n\n    T\n one by one (you cannot select one edge more than once). May you have\nchosen the \n    j\n-th edge connects vertices \n    x_j\n and \n    y_j\n with\nvalues \n    (c_j,d_j)\n, then you can choose two vertices \n    u\n and \n    v\n\nin \n    S'\n that satisfy the edge \n    (x_j,y_j)\n is contained in the simple\npath from \n    u\n to \n    v\n in \n    T\n, and link \n    u\n and \n    v\n in\n\n    T'\n by the edge with values \n    (c_j,d_j)\n (\n    u\n and \n    v\n\nshouldn't be contained in one connected component before in \n    T'\n). A tree\nwith three vertices, \n    min(A,C)=1,B+D=7\n, the cost is \n    7\n. Selected\nvertices \n    2\n and \n    3\n as \n    S'\n, used the edge \n    (1,2)\n with\n\n    c_j = 2\n and \n    d_j = 1\n to link this vertices, now\n\n    min(A,C)=2,B+D=4\n, the cost is \n    8\n. Let \n    A\n be the minimum of\nvalues \n    a_i\n in \n    T'\n and \n    C\n be the minimum of values \n    c_i\n in\n\n    T'\n. Let \n    B\n be the sum of \n    b_i\n in \n    T'\n and \n    D\n be the\nsum of values \n    d_i\n in \n    T'\n. Let \n    min(A, C) \n    \u00b7 (B + D)\n be\nthe cost of \n    T'\n. You need to find the maximum possible cost of \n    T'\n.\nInput The first line contains one integer \n    n\n (\n    3\n    \u2264 n \n    \u2264 2\n    \u00b7\n    10^5\n) \u2014 the number of vertices in the tree \n    T\n. The second line\ncontains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1\n    \u2264 a_i\n    \u2264\n    2\n    \u00b7 10^5\n), where the \n    i\n-th integer represents the \n    a_i\n value\nof the \n    i\n-th vertex. The third line contains \n    n\n integers \n    b_1,\n    b_2, \n    \u2026, b_n\n (\n    1\n    \u2264 b_i\n    \u2264 2\n    \u00b7 10^5\n), where the\n\n    i\n-th integer represents the \n    b_i\n value of the \n    i\n-th vertex.\nThen \n    n-1\n lines follow, the \n    j\n-th of them contains four integers\n\n    x_j,y_j,c_j,d_j\n (\n    1\n    \u2264 x_j,y_j\n    \u2264 n,1\n    \u2264 c_j,d_j\n    \u2264 2\n    \u00b7\n    10^5\n) representing the edge \n    (x_j,y_j)\n and its values \n    c_j\n and\n\n    d_j\n respectively. It's guaranteed that edges form a tree. Output Print a\nsingle integer \u2014 the maximum possible cost of \n    T'\n. Examples Input 3 1 2 2\n1 1 2 1 2 2 1 1 3 1 2 Output 8 Input 5 2 4 2 1 1 2 4 4 4 4 2 5 3 3 3 5 2 4 4 2\n5 5 5 1 1 5 Output 35 Input 6 5 7 10 7 9 4 6 9 7 9 8 5 2 1 5 1 3 2 2 4 4 3 6 3\n5 1 7 4 6 5 6 8 Output 216 Input 5 1000 1000 1 1000 1000 1000 1000 1 1000 1000\n1 2 1 1 2 3 1000 1000 3 4 1000 1000 3 5 1000 1000 Output 7000000 Note The tree\nfrom the first example is shown in the statement. The tree from the second\nexample is shown below: \n    A = 1, B = 18, C = 1, D = 17\n, so the cost is\n\n    min(1,1) \n    \u00b7 (18 + 17) = 35\n.\n\n",
        "cf_contest_id": 1824,
        "cf_index": "E",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "3\r\n1 2 2\r\n1 1 2\r\n1 2 2 1\r\n1 3 1 2\r\n",
                "8"
            ],
            [
                "5\r\n2 4 2 1 1\r\n2 4 4 4 4\r\n2 5 3 3\r\n3 5 2 4\r\n4 2 5 5\r\n5 1 1 5\r\n",
                "35"
            ],
            [
                "6\r\n5 7 10 7 9 4\r\n6 9 7 9 8 5\r\n2 1 5 1\r\n3 2 2 4\r\n4 3 6 3\r\n5 1 7 4\r\n6 5 6 8\r\n",
                "216"
            ],
            [
                "5\r\n1000 1000 1 1000 1000\r\n1000 1000 1 1000 1000\r\n1 2 1 1\r\n2 3 1000 1000\r\n3 4 1000 1000\r\n3 5 1000 1000\r\n",
                "7000000"
            ]
        ],
        "private_cases": [
            [
                "20\r\n325 211 95 449 89 408 156 372 191 161 71 115 405 415 384 17 40 53 485 263\r\n266 376 205 57 193 393 401 487 5 397 289 98 439 193 380 27 23 321 421 211\r\n2 15 334 32\r\n3 12 181 364\r\n4 19 145 404\r\n5 1 221 318\r\n6 15 473 133\r\n7 4 394 446\r\n8 5 206 240\r\n9 16 28 434\r\n10 13 8 235\r\n11 16 495 164\r\n12 7 148 86\r\n13 5 113 293\r\n14 16 155 137\r\n15 13 234 479\r\n16 12 164 320\r\n17 11 101 455\r\n18 8 409 169\r\n19 8 161 427\r\n20 13 7 478\r\n",
                "1021235"
            ],
            [
                "6\r\n100 100 1 100 1 100\r\n1 1 1 1 1 1\r\n1 3 1 1\r\n2 3 1 1\r\n3 4 1 1\r\n3 5 100 1\r\n5 6 1 1\r\n",
                "300"
            ],
            [
                "5\r\n2 1 5 1 5\r\n5 3 2 3 2\r\n2 1 2 3\r\n3 5 4 3\r\n4 2 2 3\r\n5 4 5 2\r\n",
                "30"
            ],
            [
                "5\r\n2 1 3 2 1\r\n4 1 1 3 3\r\n2 1 3 3\r\n3 4 2 5\r\n4 2 4 2\r\n5 4 1 1\r\n",
                "32"
            ],
            [
                "5\r\n24403 193487 36644 150557 6990\r\n122021 23737 89765 31548 192984\r\n1 2 166600 112366\r\n2 3 191412 175325\r\n3 4 155492 47102\r\n3 5 147993 105849\r\n",
                "34719949770"
            ],
            [
                "4\r\n5 1 4 1\r\n3 1 4 2\r\n1 2 2 4\r\n1 3 1 3\r\n3 4 4 2\r\n",
                "19"
            ]
        ]
    }
]