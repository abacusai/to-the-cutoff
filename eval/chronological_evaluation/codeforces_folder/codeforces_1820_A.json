[
    {
        "name": "Yura's New Name",
        "description": "After holding one team contest, boy Yura got very tired and wanted to change\nhis life and move to Japan. In honor of such a change, Yura changed his name\nto something nice. Fascinated by this idea he already thought up a name\n\n    s\n consisting only of characters \"_\" and \"^\". But there's a problem \u2014\nYura likes smiley faces \"^_^\" and \"^^\". Therefore any character of the name\nmust be a part of at least one such smiley. Note that only the consecutive\ncharacters of the name can be a smiley face. More formally, consider all\noccurrences of the strings \"^_^\" and \"^^\" in the string \n    s\n. Then all such\noccurrences must cover the whole string \n    s\n, possibly with intersections.\nFor example, in the string \"^^__^_^^__^\" the characters at positions\n\n    3,4,9,10\n and \n    11\n are not contained inside any smileys, and the\nother characters at positions \n    1,2,5,6,7\n and \n    8\n are contained inside\nsmileys. In one operation Jura can insert one of the characters \"_\" and \"^\"\ninto his name \n    s\n (you can insert it at any position in the string). He\nasks you to tell him the minimum number of operations you need to do to make\nthe name fit Yura's criteria. Input Each test consists of multiple test cases.\nThe first line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n)\n\u2014the number of test cases. The description of test cases follows. The first\nand only line of each test case contains a single string \n    s\n (\n    1 \n    \u2264\n    |s| \n    \u2264 100\n), consisting of characters \"_\" and \"^\", \u2014 the name to\nchange. Output For each test case, output a single integer \u2014 the minimum\nnumber of characters you need to add to the name to make it fit for Yura. If\nyou don't need to change anything in the name, print \n    0\n. Example Input 7\n^______^ ___^_^^^_^___^ ^_ ^ ^_^^^^^_^_^^ ___^^ _ Output 5 5 1 1 0 3 2 Note In\nthe first test case, you can get the following name by adding \n    5\n\ncharacters: ^_^_^_^_^_^_^ In the third test case, we can add one character \"^\"\nto the end of the name, then we get the name: ^_^ In the fourth test case, we\ncan add one character \"^\" to the end of the name, then we get the name: ^^ In\nthe fifth test case, all of the characters are already contained in smiley\nfaces, so the answer is \n    0\n. In the seventh test case, you can add one\ncharacter \"^\" at the beginning of the name and one character \"^\" at the end of\nthe name, then you get the name: ^_^\n\n",
        "cf_contest_id": 1820,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n^______^\r\n___^_^^^_^___^\r\n^_\r\n^\r\n^_^^^^^_^_^^\r\n___^^\r\n_\r\n",
                "5\r\n5\r\n1\r\n1\r\n0\r\n3\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "7\r\n^\r\n^\r\n^\r\n^\r\n^\r\n^\r\n^\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n"
            ]
        ]
    }
]