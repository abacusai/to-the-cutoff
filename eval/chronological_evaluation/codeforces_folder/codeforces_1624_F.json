[
    {
        "name": "Interacdive Problem",
        "description": "This problem is interactive. We decided to play a game with you and guess the\nnumber \n    x\n (\n    1 \n    \u2264 x < n\n), where you know the number \n    n\n. You\ncan make queries like this:  c: this command assigns \n    x = x + c\n (\n    1\n    \n    \u2264 c < n\n) and then returns you the value\n\n    \u230a\n    x/n\n    \u230b\n (\n    x\n divide by \n    n\n and round\ndown).You win if you guess the current number with no more than \n    10\n\nqueries. Interaction The interaction begins by reading an integer \n    n\n\n(\n    2 < n \n    \u2264 1000\n), which is written in the input data on its own line.\nThen you can make no more than \n    10\n queries. To make a query, print on a\nseparate line:  c: this command will assign \n    x = x + c\n (\n    1 \n    \u2264 c <\n    n\n) and then print \n    \u230a\n    x/n\n    \u230b\n (divide \n    x\n by\n\n    n\n and round down) on a separate line. Print the answer, like the\nqueries, on a separate line. The answer doesn't count in number of queries. To\noutput it, use the following format: ! x: the current value of \n    x\n. After\nthat, your program should exit. You have to use a flush operation right after\nprinting each line. For example, in C++ you should use the function\nfflush(stdout), in Java \u2014 System.out.flush(), in Pascal \u2014 flush(output) and in\nPython \u2014 sys.stdout.flush(). Note that the interactor is not responsive. To\nmake a hack, use the following format: a single line must contain two numbers\n\n    x\n and \n    n\n, separated by a space. Examples Input 3 1 Output  1 ! 3\nInput 5 0 0 1 Output  1  1  1 ! 5 Input 10 0 0 1 2 Output  2  2  3\n 8 ! 20 Note In the first sample initially \n    x = 2\n. After the first\nquery \n    x = 3\n, \n    \u230a\n    x/n\n    \u230b = 1\n. In the second\nsample also initially \n    x = 2\n. After the first query \n    x = 3\n,\n\n    \u230a\n    x/n\n    \u230b = 0\n. After the second query \n    x = 4\n,\n\n    \u230a\n    x/n\n    \u230b = 0\n. After the third query \n    x=5\n,\n\n    \u230a\n    x/n\n    \u230b = 1\n.\n\n",
        "cf_contest_id": 1624,
        "cf_index": "F",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "constructive algorithms",
            "interactive"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 3\r\n",
                "1\r\n"
            ],
            [
                "2 5\r\n",
                "2\r\n"
            ],
            [
                "5 10\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 12\r\n",
                "3\r\n"
            ],
            [
                "2 12\r\n",
                "3\r\n"
            ],
            [
                "4 13\r\n",
                "3\r\n"
            ],
            [
                "6 14\r\n",
                "4\r\n"
            ],
            [
                "1 14\r\n",
                "3\r\n"
            ],
            [
                "1 4\r\n",
                "1\r\n"
            ],
            [
                "2 4\r\n",
                "2\r\n"
            ],
            [
                "27 30\r\n",
                "5\r\n"
            ],
            [
                "14 30\r\n",
                "5\r\n"
            ],
            [
                "21 29\r\n",
                "5\r\n"
            ],
            [
                "22 29\r\n",
                "4\r\n"
            ],
            [
                "3 97\r\n",
                "7\r\n"
            ],
            [
                "1 37\r\n",
                "5\r\n"
            ],
            [
                "1 43\r\n",
                "5\r\n"
            ],
            [
                "3 49\r\n",
                "6\r\n"
            ],
            [
                "19 86\r\n",
                "6\r\n"
            ],
            [
                "24 28\r\n",
                "5\r\n"
            ],
            [
                "87 96\r\n",
                "6\r\n"
            ],
            [
                "81 90\r\n",
                "6\r\n"
            ],
            [
                "80 84\r\n",
                "7\r\n"
            ],
            [
                "73 78\r\n",
                "6\r\n"
            ],
            [
                "40 41\r\n",
                "6\r\n"
            ],
            [
                "3 989\r\n",
                "10\r\n"
            ],
            [
                "2 378\r\n",
                "8\r\n"
            ],
            [
                "1 280\r\n",
                "8\r\n"
            ],
            [
                "1 666\r\n",
                "9\r\n"
            ],
            [
                "1 54\r\n",
                "5\r\n"
            ],
            [
                "2 1000\r\n",
                "10\r\n"
            ],
            [
                "3 1000\r\n",
                "10\r\n"
            ],
            [
                "4 1000\r\n",
                "10\r\n"
            ],
            [
                "5 1000\r\n",
                "10\r\n"
            ],
            [
                "6 1000\r\n",
                "10\r\n"
            ],
            [
                "7 1000\r\n",
                "10\r\n"
            ],
            [
                "499 1000\r\n",
                "10\r\n"
            ],
            [
                "500 1000\r\n",
                "9\r\n"
            ],
            [
                "501 1000\r\n",
                "10\r\n"
            ],
            [
                "511 1000\r\n",
                "10\r\n"
            ],
            [
                "512 1000\r\n",
                "10\r\n"
            ],
            [
                "513 1000\r\n",
                "10\r\n"
            ],
            [
                "997 1000\r\n",
                "10\r\n"
            ],
            [
                "998 1000\r\n",
                "10\r\n"
            ],
            [
                "999 1000\r\n",
                "10\r\n"
            ],
            [
                "228 1000\r\n",
                "10\r\n"
            ],
            [
                "586 749\r\n",
                "9\r\n"
            ],
            [
                "445 452\r\n",
                "9\r\n"
            ],
            [
                "547 550\r\n",
                "9\r\n"
            ],
            [
                "163 164\r\n",
                "8\r\n"
            ],
            [
                "774 775\r\n",
                "10\r\n"
            ],
            [
                "387 390\r\n",
                "9\r\n"
            ],
            [
                "1 1000\r\n",
                "9\r\n"
            ]
        ]
    }
]