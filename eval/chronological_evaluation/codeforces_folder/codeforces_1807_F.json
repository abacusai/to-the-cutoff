[
    {
        "name": "Bouncy Ball",
        "description": "You are given a room that can be represented by a \n    n \n    \u00d7 m\n grid.\nThere is a ball at position \n    (i_1, j_1)\n (the intersection of row\n\n    i_1\n and column \n    j_1\n), and it starts going diagonally in one of the\nfour directions: The ball is going down and right, denoted by\n\n    \n; it means that after a step, the ball's location goes from\n\n    (i, j)\n to \n    (i+1, j+1)\n. The ball is going down and left, denoted by\n\n    \n; it means that after a step, the ball's location goes from\n\n    (i, j)\n to \n    (i+1, j-1)\n. The ball is going up and right, denoted by\n\n    \n; it means that after a step, the ball's location goes from\n\n    (i, j)\n to \n    (i-1, j+1)\n. The ball is going up and left, denoted by\n\n    \n; it means that after a step, the ball's location goes from\n\n    (i, j)\n to \n    (i-1, j-1)\n. After each step, the ball maintains its\ndirection unless it hits a wall (that is, the direction takes it out of the\nroom's bounds in the next step). In this case, the ball's direction gets\nflipped along the axis of the wall; if the ball hits a corner, both directions\nget flipped. Any instance of this is called a bounce. The ball never stops\nmoving. In the above example, the ball starts at \n    (1, 7)\n and goes\n\n    \n until it reaches the bottom wall, then it bounces and\ncontinues in the direction \n    \n. After reaching the left wall,\nthe ball bounces and continues to go in the direction \n    \n.\nWhen the ball reaches the upper wall, it bounces and continues in the\ndirection \n    \n. After reaching the bottom-right corner, it\nbounces once and continues in direction \n    \n, and so on. Your\ntask is to find how many bounces the ball will go through until it reaches\ncell \n    (i_2, j_2)\n in the room, or report that it never reaches cell\n\n    (i_2, j_2)\n by printing \n    -1\n. Note that the ball first goes in a cell\nand only after that bounces if it needs to. Input The first line contains a\nsingle integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of test\ncases. The first line of each test case contains six integers and a string\n\n    n, m, i_1, j_1, i_2, j_2, d\n (\n    2 \n    \u2264 n, m \n    \u2264 25000\n; \n    1\n    \n    \u2264 i_1, i_2 \n    \u2264 n\n; \n    1 \n    \u2264 j_1, j_2 \n    \u2264 m\n; \n    d \n    \u2208\n    \n    \n    , \n    , \n    ,\n) \u2014 the\ndimensions of the grid, the starting coordinates of the ball, the coordinates\nof the final cell and the starting direction of the ball. It is guaranteed\nthat the sum of \n    n \n    \u00b7 m\n over all test cases does not exceed \n    5\n    \n    \u00b7 10^4\n. Output For each test case, output a single integer \u2014 the\nnumber of bounces the ball does until it reaches cell \n    (i_2, j_2)\n for the\nfirst time, or \n    -1\n if the ball never reaches the final cell. Example\nInput 6 5 7 1 7 2 4 DL 5 7 1 7 3 2 DL 3 3 1 3 2 2 UR 2 4 2 1 2 2 DR 4 3 1 1 1\n3 UL 6 4 1 2 3 4 DR Output 3 -1 1 -1 4 0\n\n",
        "cf_contest_id": 1807,
        "cf_index": "F",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dfs and similar",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n5 7 1 7 2 4 DL\r\n5 7 1 7 3 2 DL\r\n3 3 1 3 2 2 UR\r\n2 4 2 1 2 2 DR\r\n4 3 1 1 1 3 UL\r\n6 4 1 2 3 4 DR\r\n",
                "3\r\n-1\r\n1\r\n-1\r\n4\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n14 4 11 2 10 2 DL\r\n6 8 5 8 5 1 UR\r\n15 9 2 5 8 5 UR\r\n26 3 21 1 3 1 UL\r\n18 6 3 5 7 2 UR\r\n31 32 14 25 20 4 DR\r\n4 5 2 4 2 4 DL\r\n13 13 8 4 4 11 UR\r\n4 2 3 1 3 1 DR\r\n12 15 9 4 2 9 DL\r\n",
                "-1\r\n-1\r\n2\r\n35\r\n-1\r\n-1\r\n0\r\n-1\r\n0\r\n12\r\n"
            ],
            [
                "1\r\n144 180 38 40 127 130 UR\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n214 220 101 24 24 13 UR\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n163 216 67 185 125 81 UL\r\n",
                "302\r\n"
            ],
            [
                "1\r\n2 25000 2 1 1 24999 UL\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n2 25000 2 1 1 25000 UL\r\n",
                "24999\r\n"
            ],
            [
                "1\r\n2 25000 2 2 1 1 UR\r\n",
                "49996\r\n"
            ],
            [
                "1\r\n24999 2 21765 1 23407 1 UL\r\n",
                "45170\r\n"
            ],
            [
                "1\r\n4 11111 3 23 1 1 UR\r\n",
                "22216\r\n"
            ],
            [
                "1\r\n24999 2 24430 2 6848 1 UL\r\n",
                "-1\r\n"
            ]
        ]
    }
]