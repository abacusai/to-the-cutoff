[
    {
        "name": "Gnomes of Might and Magic",
        "description": "Vasya plays a popular game the Gnomes of Might and Magic. In this game Vasya\nmanages the kingdom of gnomes, consisting of several castles, connected by\nbidirectional roads. The kingdom road network has a special form. The kingdom\nhas m main castles a1, a2, ..., am, which form the Good Path. This path\nconsists of roads between the castles ai, ai + 1 (1 \u2264 i < m) as well as the\nroad between am and a1. There are no other roads between the castles of the\nGood Path. In addition, for each pair of neighboring Good Path castles u and v\nthere is exactly one Evil Shortcut \u2014 a path that goes along the roads leading\nfrom the first castle (u) to the second one (v) and not having any common\nvertexes with the Good Path except for the vertexes u and v. It is known that\nthere are no other roads and castles in the kingdom there, that is, every road\nand every castle lies either on the Good Path or the Evil Shortcut (castles\ncan lie in both of them). In addition, no two Evil Shortcuts have any common\ncastles, different than the castles of the Good Path. At the beginning of each\nweek in the kingdom appears one very bad gnome who stands on one of the roads\nof the kingdom, and begins to rob the corovans going through this road. One\nroad may accumulate multiple very bad gnomes. Vasya cares about his corovans,\nso sometimes he sends the Mission of Death from one castle to another. Let's\nsuggest that the Mission of Death should get from castle s to castle t. Then\nit will move from castle s to castle t, destroying all very bad gnomes, which\nare on the roads of the Mission's path. Vasya is so tough that his Mission of\nDeath can destroy any number of gnomes on its way. However, Vasya is very\nkind, so he always chooses such path between castles s and t, following which\nhe will destroy the smallest number of gnomes. If there are multiple such\npaths, then Vasya chooses the path that contains the smallest number of roads\namong them. If there are multiple such paths still, Vasya chooses the\nlexicographically minimal one among them. Help Vasya to simulate the life of\nthe kingdom in the Gnomes of Might and Magic game. A path is a sequence of\ncastles, such that each pair of the neighboring castles on the path is\nconnected by a road. Also, path x1, x2, ... , xp is lexicographically less\nthan path y1, y2, ... , yq, if either p < q and x1 = y1, x2 = y2, ... , xp =\nyp, or exists such number r (r < p, r < q), that x1 = y1, x2 = y2, ... , xr =\nyr and xr + 1 < yr + 1. Input The first line contains two integers n and m (3\n\u2264 m \u2264 n \u2264 100000) \u2014 the number of castles in the kingdom, and the number of\ncastles on the Good Path, respectively. The second line contains m integers,\nwhich are numbers of Good Path castles (the castles are numbered from 1 to n)\nin the order of occurrence on the Path, starting with some castle. All Good\nPath castles are different. Each of the following m lines describes an Evil\nShortcut. First a line contains an integer ki (3 \u2264 ki \u2264 100000) \u2014 the number\nof castles on the corresponding Evil Shortcut (with the two castles which are\non the Good Path), followed by a ki integers \u2014 number of castles in the order\nof occurrence in the given Shortcut. All castles in one Evil Shortcut are\ndifferent. It is guaranteed that the first and the last castles from the\nShortcut are on the Good Path and the first castles in the Evil Shortcuts form\nthe Good Path and are presented in the same order in which the Path was\nrepresented on the second line. The next line contains an integer q (1 \u2264 q \u2264\n100000) \u2014 the number of events in the life of the kingdom. Each of the\nfollowing q lines describes a single event. An event is described by the\nsymbol cj and two numbers or castles sj and tj (the character and numbers of\ncastles are separated by a single space). If the character of cj is equal to\n\"+\" (a plus), it means that a very bad gnome (probably not the first one) has\nappeared on the road between castles sj and tj. If cj equals \"?\" (a question),\nthen Vasya sent a Mission of Death from castle sj to castle tj. It is\nguaranteed that for each request \"+\", the road between castles sj and tj\nexists. The events are given in chronological order, starting with the\nearliest one. Initially there are no very bad gnomes on the roads. All numbers\nin all lines are separated by single spaces. It is guaranteed that all the\ngiven Evil Shortcuts and Good Path fit in the limitations given in the problem\nstatement. Output For each query \"?\" print a single number on a single line \u2014\nthe number of very bad gnomes destroyed by the corresponding Mission of Death.\nPrint the answers to queries in the chronological order. Examples Input 6 3 1\n2 3 3 1 4 2 3 2 5 3 3 3 6 1 10  1 2  4 2  1 3  2 3 ? 1 2  2 5 ? 1 2\n? 1 2  1 2 ? 1 2 Output 0 1 0 1 Note In the example after the first four\nrequests there is only one path from castle 1 to castle 2, which does not\ncontain roads with very bad gnomes: 1 6 3 5 2. After a gnome stood on the road\n(2, 5), the next Mission of Death moves along path 1 2, and destroys the\ngnome, who was on the road (1, 2). The next Mission of Death follows the same\npath which is already free of gnomes. After yet another gnome stood on the\nroad (1, 2), the next Mission of Death goes on the path 1 2, and kills the\ngnome.\n\n",
        "cf_contest_id": 175,
        "cf_index": "F",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "graphs",
            "implementation",
            "shortest paths"
        ],
        "time_limit_seconds": 8.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 3\r\n1 2 3\r\n3 1 4 2\r\n3 2 5 3\r\n3 3 6 1\r\n10\r\n+ 1 2\r\n+ 4 2\r\n+ 1 3\r\n+ 2 3\r\n? 1 2\r\n+ 2 5\r\n? 1 2\r\n? 1 2\r\n+ 1 2\r\n? 1 2\r\n",
                "0\r\n1\r\n0\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "11 4\r\n1 2 3 4\r\n3 1 5 2\r\n3 2 6 3\r\n5 3 7 8 9 4\r\n4 4 10 11 1\r\n50\r\n+ 6 2\r\n+ 8 9\r\n+ 10 4\r\n+ 3 2\r\n+ 2 5\r\n+ 3 6\r\n+ 4 10\r\n+ 1 5\r\n+ 9 8\r\n+ 9 8\r\n+ 9 8\r\n+ 7 8\r\n+ 4 1\r\n+ 3 4\r\n+ 6 2\r\n+ 8 9\r\n+ 4 3\r\n+ 5 1\r\n+ 8 7\r\n+ 5 2\r\n+ 1 5\r\n+ 7 8\r\n+ 1 4\r\n+ 8 9\r\n+ 11 10\r\n+ 2 5\r\n+ 5 2\r\n+ 4 9\r\n+ 7 8\r\n+ 3 6\r\n+ 1 2\r\n+ 7 3\r\n+ 3 2\r\n+ 3 7\r\n+ 10 4\r\n+ 3 7\r\n+ 3 2\r\n+ 10 4\r\n+ 1 11\r\n+ 1 5\r\n+ 9 8\r\n+ 6 2\r\n+ 2 1\r\n+ 9 8\r\n+ 9 8\r\n? 7 6\r\n? 1 6\r\n? 3 9\r\n? 8 8\r\n? 7 6\r\n",
                "5\r\n4\r\n1\r\n0\r\n0\r\n"
            ],
            [
                "10 4\r\n5 10 9 8\r\n4 5 1 3 10\r\n4 10 7 4 9\r\n3 9 6 8\r\n3 8 2 5\r\n50\r\n+ 9 6\r\n+ 8 6\r\n+ 2 8\r\n+ 9 6\r\n+ 10 9\r\n+ 5 10\r\n+ 2 8\r\n+ 2 8\r\n+ 5 2\r\n+ 6 8\r\n+ 10 9\r\n+ 10 9\r\n+ 9 4\r\n+ 8 6\r\n+ 2 8\r\n+ 4 7\r\n+ 6 8\r\n+ 5 10\r\n+ 9 6\r\n+ 7 10\r\n+ 1 5\r\n+ 3 10\r\n+ 3 1\r\n+ 5 10\r\n+ 1 5\r\n+ 8 5\r\n+ 9 10\r\n+ 1 3\r\n+ 5 10\r\n+ 5 10\r\n+ 3 10\r\n+ 1 5\r\n+ 7 10\r\n+ 4 7\r\n+ 5 8\r\n+ 6 9\r\n+ 5 1\r\n+ 7 4\r\n+ 8 6\r\n+ 1 3\r\n+ 8 2\r\n+ 5 2\r\n+ 8 9\r\n+ 10 3\r\n+ 3 1\r\n? 4 8\r\n? 7 10\r\n? 4 2\r\n? 3 8\r\n? 5 9\r\n",
                "2\r\n2\r\n4\r\n6\r\n0\r\n"
            ],
            [
                "6 3\r\n1 2 3\r\n3 1 4 2\r\n3 2 5 3\r\n3 3 6 1\r\n40\r\n+ 4 2\r\n+ 3 1\r\n+ 2 3\r\n+ 3 2\r\n+ 3 2\r\n+ 3 6\r\n+ 1 2\r\n+ 2 4\r\n+ 3 6\r\n+ 2 3\r\n+ 1 2\r\n+ 4 2\r\n+ 3 6\r\n+ 6 1\r\n+ 5 2\r\n+ 6 1\r\n+ 5 3\r\n+ 1 4\r\n+ 6 1\r\n+ 4 1\r\n+ 1 6\r\n+ 6 3\r\n+ 3 2\r\n+ 1 6\r\n+ 4 2\r\n+ 2 5\r\n+ 3 2\r\n+ 2 3\r\n+ 2 1\r\n+ 1 4\r\n+ 2 5\r\n+ 1 6\r\n+ 1 2\r\n+ 6 1\r\n+ 2 5\r\n? 2 5\r\n? 2 3\r\n? 4 4\r\n? 6 3\r\n? 2 5\r\n",
                "4\r\n1\r\n0\r\n4\r\n0\r\n"
            ],
            [
                "12 5\r\n2 10 3 11 12\r\n3 2 5 10\r\n3 10 7 3\r\n3 3 9 11\r\n3 11 8 12\r\n5 12 4 6 1 2\r\n40\r\n+ 12 8\r\n+ 2 10\r\n+ 3 10\r\n+ 3 9\r\n+ 3 7\r\n+ 6 4\r\n+ 1 6\r\n+ 12 2\r\n+ 9 3\r\n+ 9 3\r\n+ 9 11\r\n+ 12 4\r\n+ 8 11\r\n+ 11 9\r\n+ 7 10\r\n+ 4 12\r\n+ 11 12\r\n+ 5 2\r\n+ 9 11\r\n+ 3 9\r\n+ 12 4\r\n+ 11 8\r\n+ 12 11\r\n+ 11 3\r\n+ 6 1\r\n+ 12 8\r\n+ 3 7\r\n+ 10 3\r\n+ 2 10\r\n+ 11 3\r\n? 7 1\r\n? 6 11\r\n? 12 8\r\n? 6 4\r\n? 1 2\r\n? 4 3\r\n? 4 2\r\n? 2 6\r\n? 2 6\r\n? 11 12\r\n",
                "2\r\n5\r\n2\r\n1\r\n0\r\n2\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "7 3\r\n1 2 3\r\n3 1 4 2\r\n3 2 5 3\r\n4 3 7 6 1\r\n3\r\n? 1 3\r\n+ 7 6\r\n? 7 6\r\n",
                "0\r\n0\r\n"
            ],
            [
                "7 3\r\n1 2 3\r\n3 1 4 2\r\n3 2 5 3\r\n4 3 7 6 1\r\n3\r\n+ 1 3\r\n+ 7 6\r\n? 7 6\r\n",
                "0\r\n"
            ],
            [
                "7 3\r\n1 2 3\r\n3 1 4 2\r\n3 2 5 3\r\n4 3 7 6 1\r\n3\r\n? 1 3\r\n+ 7 6\r\n? 7 1\r\n",
                "0\r\n0\r\n"
            ],
            [
                "7 3\r\n1 2 3\r\n3 1 4 2\r\n3 2 5 3\r\n4 3 7 6 1\r\n3\r\n+ 1 3\r\n+ 7 6\r\n? 7 1\r\n",
                "0\r\n"
            ],
            [
                "6 3\r\n1 2 3\r\n3 1 4 2\r\n3 2 5 3\r\n3 3 6 1\r\n10\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 4\r\n+ 1 4\r\n+ 1 4\r\n+ 1 3\r\n+ 1 3\r\n+ 1 6\r\n? 1 4\r\n",
                "1\r\n"
            ],
            [
                "18 4\r\n7 17 1 10\r\n5 7 8 3 5 17\r\n6 17 2 11 13 9 1\r\n6 1 6 4 14 16 10\r\n5 10 18 15 12 7\r\n25\r\n+ 6 4\r\n+ 7 12\r\n+ 10 1\r\n+ 14 4\r\n+ 1 10\r\n+ 8 7\r\n+ 5 17\r\n+ 5 17\r\n+ 9 13\r\n+ 12 15\r\n+ 10 7\r\n+ 2 11\r\n+ 10 16\r\n+ 15 12\r\n+ 10 18\r\n+ 15 18\r\n+ 17 7\r\n+ 14 4\r\n+ 3 8\r\n+ 16 14\r\n? 2 13\r\n? 16 17\r\n? 1 7\r\n? 4 9\r\n? 13 5\r\n",
                "1\r\n3\r\n1\r\n1\r\n2\r\n"
            ],
            [
                "11 3\r\n4 9 11\r\n5 4 3 7 8 9\r\n4 9 6 1 11\r\n5 11 5 2 10 4\r\n25\r\n+ 4 9\r\n+ 3 4\r\n+ 9 8\r\n+ 9 11\r\n+ 2 10\r\n+ 4 11\r\n+ 5 11\r\n+ 7 8\r\n+ 1 6\r\n+ 6 9\r\n+ 3 4\r\n+ 10 2\r\n+ 7 3\r\n+ 2 10\r\n+ 9 11\r\n+ 10 2\r\n+ 7 8\r\n+ 4 10\r\n+ 11 5\r\n+ 11 5\r\n? 1 8\r\n? 9 7\r\n? 8 6\r\n? 2 10\r\n? 10 7\r\n",
                "3\r\n2\r\n0\r\n4\r\n2\r\n"
            ],
            [
                "18 4\r\n16 6 17 18\r\n6 16 7 13 4 14 6\r\n4 6 11 5 17\r\n6 17 12 2 15 1 18\r\n6 18 9 8 3 10 16\r\n24\r\n+ 13 4\r\n+ 18 9\r\n+ 11 5\r\n+ 11 5\r\n+ 18 16\r\n+ 2 12\r\n+ 10 3\r\n+ 9 18\r\n+ 6 17\r\n+ 11 6\r\n+ 4 13\r\n+ 12 17\r\n+ 2 15\r\n+ 16 10\r\n+ 5 17\r\n+ 2 15\r\n+ 1 18\r\n+ 18 17\r\n+ 17 6\r\n+ 14 6\r\n? 6 14\r\n? 9 2\r\n? 6 5\r\n? 5 13\r\n",
                "1\r\n5\r\n3\r\n0\r\n"
            ],
            [
                "7 3\r\n3 2 4\r\n4 3 5 7 2\r\n3 2 1 4\r\n3 4 6 3\r\n24\r\n+ 2 4\r\n+ 4 6\r\n+ 2 4\r\n+ 5 3\r\n+ 4 2\r\n+ 5 7\r\n+ 4 6\r\n+ 5 7\r\n+ 7 2\r\n+ 3 5\r\n+ 7 2\r\n+ 2 4\r\n+ 3 2\r\n+ 4 1\r\n+ 1 2\r\n+ 5 7\r\n+ 6 4\r\n+ 3 2\r\n+ 4 6\r\n+ 3 5\r\n? 5 5\r\n? 4 2\r\n? 7 2\r\n? 1 7\r\n",
                "0\r\n2\r\n2\r\n0\r\n"
            ],
            [
                "11 4\r\n1 2 3 4\r\n3 1 5 2\r\n3 2 6 3\r\n5 3 7 8 9 4\r\n4 4 10 11 1\r\n50\r\n+ 1 5\r\n+ 11 10\r\n+ 3 7\r\n+ 3 6\r\n+ 9 8\r\n+ 6 2\r\n+ 5 1\r\n+ 1 11\r\n+ 1 5\r\n+ 8 7\r\n+ 3 2\r\n+ 10 4\r\n+ 3 2\r\n+ 9 8\r\n+ 5 2\r\n? 3 9\r\n+ 5 2\r\n+ 3 2\r\n+ 4 1\r\n+ 8 9\r\n+ 3 4\r\n+ 4 3\r\n+ 7 8\r\n+ 3 6\r\n+ 7 8\r\n+ 4 10\r\n+ 1 5\r\n+ 2 5\r\n+ 8 9\r\n+ 8 9\r\n+ 6 2\r\n? 1 6\r\n+ 10 4\r\n+ 7 3\r\n+ 9 8\r\n? 8 8\r\n+ 4 9\r\n+ 2 5\r\n+ 10 4\r\n? 7 6\r\n+ 9 8\r\n+ 1 2\r\n? 7 6\r\n+ 3 7\r\n+ 9 8\r\n+ 7 8\r\n+ 6 2\r\n+ 9 8\r\n+ 1 4\r\n+ 2 1\r\n",
                "0\r\n2\r\n0\r\n4\r\n0\r\n"
            ],
            [
                "10 4\r\n5 10 9 8\r\n4 5 1 3 10\r\n4 10 7 4 9\r\n3 9 6 8\r\n3 8 2 5\r\n50\r\n+ 9 4\r\n+ 6 9\r\n+ 5 8\r\n+ 5 2\r\n+ 8 6\r\n+ 8 5\r\n+ 5 10\r\n+ 3 10\r\n+ 7 10\r\n? 4 8\r\n+ 8 6\r\n+ 1 3\r\n? 7 10\r\n+ 8 9\r\n+ 1 5\r\n+ 8 2\r\n+ 2 8\r\n+ 4 7\r\n+ 5 10\r\n+ 5 1\r\n+ 6 8\r\n+ 9 6\r\n+ 2 8\r\n? 4 2\r\n+ 7 4\r\n+ 7 10\r\n+ 10 9\r\n+ 10 3\r\n+ 1 3\r\n+ 1 5\r\n+ 5 2\r\n+ 5 10\r\n+ 1 5\r\n+ 3 1\r\n? 3 8\r\n+ 10 9\r\n+ 3 1\r\n+ 9 6\r\n+ 3 10\r\n+ 4 7\r\n+ 2 8\r\n+ 9 10\r\n+ 6 8\r\n? 5 9\r\n+ 10 9\r\n+ 5 10\r\n+ 2 8\r\n+ 5 10\r\n+ 8 6\r\n+ 9 6\r\n",
                "1\r\n0\r\n3\r\n4\r\n2\r\n"
            ],
            [
                "6 3\r\n1 2 3\r\n3 1 4 2\r\n3 2 5 3\r\n3 3 6 1\r\n40\r\n+ 1 4\r\n+ 6 1\r\n+ 1 4\r\n+ 3 1\r\n+ 2 5\r\n? 2 5\r\n+ 3 6\r\n+ 2 3\r\n+ 2 3\r\n+ 6 1\r\n+ 6 1\r\n+ 3 2\r\n+ 6 3\r\n+ 1 6\r\n+ 4 2\r\n+ 2 5\r\n+ 2 5\r\n+ 3 6\r\n+ 6 1\r\n+ 2 4\r\n+ 2 1\r\n+ 3 2\r\n? 6 3\r\n? 2 3\r\n+ 1 2\r\n+ 1 2\r\n+ 5 2\r\n? 4 4\r\n? 2 5\r\n+ 5 3\r\n+ 2 3\r\n+ 1 6\r\n+ 4 2\r\n+ 3 2\r\n+ 3 2\r\n+ 3 6\r\n+ 1 6\r\n+ 1 2\r\n+ 4 1\r\n+ 4 2\r\n",
                "0\r\n3\r\n2\r\n0\r\n2\r\n"
            ],
            [
                "12 5\r\n2 10 3 11 12\r\n3 2 5 10\r\n3 10 7 3\r\n3 3 9 11\r\n3 11 8 12\r\n5 12 4 6 1 2\r\n40\r\n? 4 2\r\n? 7 1\r\n+ 6 4\r\n+ 2 10\r\n+ 3 7\r\n+ 11 3\r\n? 2 6\r\n+ 3 9\r\n+ 1 6\r\n+ 11 8\r\n+ 12 4\r\n+ 5 2\r\n? 2 6\r\n+ 9 3\r\n+ 11 3\r\n? 4 3\r\n+ 7 10\r\n? 6 4\r\n+ 3 9\r\n+ 9 11\r\n? 12 8\r\n+ 12 8\r\n+ 12 11\r\n+ 2 10\r\n+ 12 2\r\n+ 3 7\r\n+ 12 4\r\n+ 9 3\r\n+ 4 12\r\n+ 10 3\r\n? 11 12\r\n? 1 2\r\n+ 9 11\r\n? 6 11\r\n+ 3 10\r\n+ 12 8\r\n+ 11 12\r\n+ 8 11\r\n+ 6 1\r\n+ 11 9\r\n",
                "0\r\n0\r\n0\r\n1\r\n2\r\n0\r\n0\r\n1\r\n0\r\n1\r\n"
            ],
            [
                "18 4\r\n7 17 1 10\r\n5 7 8 3 5 17\r\n6 17 2 11 13 9 1\r\n6 1 6 4 14 16 10\r\n5 10 18 15 12 7\r\n25\r\n+ 10 16\r\n? 1 7\r\n+ 9 13\r\n? 4 9\r\n+ 12 15\r\n+ 2 11\r\n+ 6 4\r\n+ 14 4\r\n? 13 5\r\n+ 10 18\r\n+ 7 12\r\n+ 10 1\r\n? 2 13\r\n+ 1 10\r\n+ 5 17\r\n+ 16 14\r\n+ 10 7\r\n+ 15 12\r\n+ 5 17\r\n+ 3 8\r\n+ 8 7\r\n+ 15 18\r\n? 16 17\r\n+ 17 7\r\n+ 14 4\r\n",
                "0\r\n0\r\n1\r\n0\r\n2\r\n"
            ],
            [
                "11 3\r\n4 9 11\r\n5 4 3 7 8 9\r\n4 9 6 1 11\r\n5 11 5 2 10 4\r\n25\r\n+ 4 10\r\n+ 7 8\r\n? 2 10\r\n+ 11 5\r\n+ 3 4\r\n+ 9 11\r\n+ 7 3\r\n+ 6 9\r\n+ 2 10\r\n+ 1 6\r\n+ 4 9\r\n? 1 8\r\n+ 2 10\r\n+ 3 4\r\n+ 10 2\r\n? 9 7\r\n+ 7 8\r\n? 10 7\r\n+ 11 5\r\n+ 10 2\r\n? 8 6\r\n+ 9 8\r\n+ 5 11\r\n+ 9 11\r\n+ 4 11\r\n",
                "0\r\n1\r\n1\r\n2\r\n1\r\n"
            ],
            [
                "18 4\r\n16 6 17 18\r\n6 16 7 13 4 14 6\r\n4 6 11 5 17\r\n6 17 12 2 15 1 18\r\n6 18 9 8 3 10 16\r\n24\r\n+ 6 17\r\n+ 9 18\r\n+ 14 6\r\n+ 2 12\r\n+ 5 17\r\n+ 11 6\r\n+ 11 5\r\n+ 2 15\r\n+ 18 16\r\n+ 16 10\r\n+ 17 6\r\n? 5 13\r\n+ 2 15\r\n? 6 14\r\n+ 13 4\r\n+ 10 3\r\n+ 12 17\r\n+ 18 17\r\n+ 4 13\r\n+ 1 18\r\n+ 11 5\r\n+ 18 9\r\n? 9 2\r\n? 6 5\r\n",
                "2\r\n0\r\n5\r\n1\r\n"
            ],
            [
                "7 3\r\n3 2 4\r\n4 3 5 7 2\r\n3 2 1 4\r\n3 4 6 3\r\n24\r\n+ 5 7\r\n+ 3 2\r\n+ 4 6\r\n+ 5 7\r\n+ 4 2\r\n? 1 7\r\n+ 5 7\r\n+ 5 3\r\n+ 6 4\r\n? 7 2\r\n? 4 2\r\n+ 2 4\r\n+ 2 4\r\n+ 4 6\r\n+ 3 5\r\n? 5 5\r\n+ 1 2\r\n+ 4 1\r\n+ 3 5\r\n+ 7 2\r\n+ 2 4\r\n+ 7 2\r\n+ 4 6\r\n+ 3 2\r\n",
                "0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "8 4\r\n1 2 3 4\r\n3 1 5 2\r\n3 2 6 3\r\n3 3 7 4\r\n3 4 8 1\r\n50\r\n+ 8 1\r\n+ 7 3\r\n+ 7 3\r\n+ 8 4\r\n? 5 3\r\n+ 7 3\r\n? 1 4\r\n? 8 3\r\n+ 6 2\r\n+ 6 3\r\n+ 7 4\r\n? 4 8\r\n+ 6 2\r\n+ 5 2\r\n+ 2 5\r\n+ 6 3\r\n+ 2 1\r\n+ 4 8\r\n+ 1 4\r\n? 7 7\r\n+ 2 1\r\n? 6 5\r\n+ 7 3\r\n+ 4 7\r\n+ 1 2\r\n+ 4 1\r\n? 6 6\r\n? 1 1\r\n+ 2 6\r\n? 5 8\r\n? 2 4\r\n+ 4 1\r\n+ 3 4\r\n+ 8 4\r\n+ 1 4\r\n? 7 2\r\n+ 4 8\r\n+ 6 3\r\n+ 8 1\r\n+ 3 6\r\n? 5 8\r\n? 8 8\r\n? 1 1\r\n+ 1 2\r\n+ 2 1\r\n+ 2 5\r\n+ 2 3\r\n+ 4 8\r\n+ 3 7\r\n? 8 6\r\n",
                "0\r\n0\r\n1\r\n0\r\n0\r\n3\r\n0\r\n0\r\n1\r\n0\r\n3\r\n1\r\n0\r\n0\r\n5\r\n"
            ],
            [
                "8 4\r\n1 2 3 4\r\n3 1 5 2\r\n3 2 6 3\r\n3 3 7 4\r\n3 4 8 1\r\n20\r\n+ 7 3\r\n+ 3 4\r\n+ 8 4\r\n+ 3 7\r\n+ 3 7\r\n+ 1 4\r\n? 3 7\r\n? 8 5\r\n+ 4 1\r\n? 3 5\r\n? 7 6\r\n+ 6 3\r\n+ 1 8\r\n+ 3 6\r\n+ 4 7\r\n+ 6 3\r\n? 7 3\r\n+ 1 4\r\n+ 8 4\r\n+ 6 2\r\n",
                "1\r\n0\r\n0\r\n0\r\n1\r\n"
            ]
        ]
    }
]