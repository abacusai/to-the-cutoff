[
    {
        "name": "Tree Folding",
        "description": "Vanya wants to minimize a tree. He can perform the following operation\nmultiple times: choose a vertex v, and two disjoint (except for v) paths of\nequal length a0 = v, a1, ..., ak, and b0 = v, b1, ..., bk. Additionally,\nvertices a1, ..., ak, b1, ..., bk must not have any neighbours in the tree\nother than adjacent vertices of corresponding paths. After that, one of the\npaths may be merged into the other, that is, the vertices b1, ..., bk can be\neffectively erased: Help Vanya determine if it possible to make the tree into\na path via a sequence of described operations, and if the answer is positive,\nalso determine the shortest length of such path. Input The first line of input\ncontains the number of vertices n (2 \u2264 n \u2264 2\u00b710^5). Next n - 1 lines describe\nedges of the tree. Each of these lines contains two space-separated integers u\nand v (1 \u2264 u, v \u2264 n, u \u2260 v) \u2014 indices of endpoints of the corresponding edge.\nIt is guaranteed that the given graph is a tree. Output If it is impossible to\nobtain a path, print -1. Otherwise, print the minimum number of edges in a\npossible path. Examples Input 6 1 2 2 3 2 4 4 5 1 6 Output 3 Input 7 1 2 1 3 3\n4 1 5 5 6 6 7 Output -1 Note In the first sample case, a path of three edges\nis obtained after merging paths 2 - 1 - 6 and 2 - 4 - 5. It is impossible to\nperform any operation in the second sample case. For example, it is impossible\nto merge paths 1 - 3 - 4 and 1 - 5 - 6, since vertex 6 additionally has a\nneighbour 7 that is not present in the corresponding path.\n\n",
        "cf_contest_id": 765,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dp",
            "greedy",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "6\r\n1 2\r\n2 3\r\n2 4\r\n4 5\r\n1 6\r\n",
                "3"
            ],
            [
                "7\r\n1 2\r\n1 3\r\n3 4\r\n1 5\r\n5 6\r\n6 7\r\n",
                "-1"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 2\r\n",
                "1"
            ],
            [
                "3\r\n3 1\r\n1 2\r\n",
                "1"
            ],
            [
                "10\r\n5 10\r\n7 8\r\n8 3\r\n2 6\r\n3 2\r\n9 7\r\n4 5\r\n10 1\r\n6 4\r\n",
                "9"
            ],
            [
                "11\r\n11 9\r\n6 7\r\n7 1\r\n8 11\r\n5 6\r\n3 5\r\n9 3\r\n10 8\r\n2 4\r\n4 10\r\n",
                "5"
            ],
            [
                "10\r\n4 2\r\n7 4\r\n2 6\r\n2 5\r\n4 8\r\n10 3\r\n2 9\r\n9 1\r\n5 10\r\n",
                "-1"
            ],
            [
                "11\r\n8 9\r\n2 7\r\n1 11\r\n3 2\r\n9 1\r\n8 5\r\n8 6\r\n5 4\r\n4 10\r\n8 3\r\n",
                "1"
            ],
            [
                "12\r\n12 6\r\n6 7\r\n8 11\r\n4 8\r\n10 4\r\n12 3\r\n2 10\r\n6 2\r\n12 9\r\n4 1\r\n9 5\r\n",
                "-1"
            ],
            [
                "4\r\n4 1\r\n4 3\r\n4 2\r\n",
                "1"
            ],
            [
                "5\r\n1 5\r\n2 3\r\n2 4\r\n1 2\r\n",
                "3"
            ],
            [
                "6\r\n1 6\r\n3 1\r\n6 4\r\n5 3\r\n2 5\r\n",
                "5"
            ],
            [
                "7\r\n5 6\r\n5 7\r\n5 1\r\n7 4\r\n6 3\r\n3 2\r\n",
                "-1"
            ],
            [
                "8\r\n6 1\r\n4 7\r\n4 8\r\n8 5\r\n7 6\r\n4 3\r\n4 2\r\n",
                "-1"
            ],
            [
                "3\r\n1 3\r\n3 2\r\n",
                "1"
            ],
            [
                "5\r\n5 4\r\n4 3\r\n3 1\r\n5 2\r\n",
                "1"
            ],
            [
                "9\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n6 7\r\n6 8\r\n8 9\r\n",
                "3"
            ]
        ]
    }
]