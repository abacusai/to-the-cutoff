[
    {
        "name": "Permutation recovery",
        "description": "Vasya has written some permutation \n    p_1, p_2, \n    \u2026, p_n\n of integers\nfrom \n    1\n to \n    n\n, so for all \n    1 \n    \u2264 i \n    \u2264 n\n it is true that\n\n    1 \n    \u2264 p_i \n    \u2264 n\n and all \n    p_1, p_2, \n    \u2026, p_n\n are\ndifferent. After that he wrote \n    n\n numbers \n    next_1, next_2, \n    \u2026,\n    next_n\n. The number \n    next_i\n is equal to the minimal index \n    i < j\n    \n    \u2264 n\n, such that \n    p_j > p_i\n. If there is no such \n    j\n let's\nlet's define as \n    next_i = n + 1\n. In the evening Vasya went home from\nschool and due to rain, his notebook got wet. Now it is impossible to read\nsome written numbers. Permutation and some values \n    next_i\n are completely\nlost! If for some \n    i\n the value \n    next_i\n is lost, let's say that\n\n    next_i = -1\n. You are given numbers \n    next_1, next_2, \n    \u2026,\n    next_n\n (maybe some of them are equal to \n    -1\n). Help Vasya to find such\npermutation \n    p_1, p_2, \n    \u2026, p_n\n of integers from \n    1\n to \n    n\n,\nthat he can write it to the notebook and all numbers \n    next_i\n, which are\nnot equal to \n    -1\n, will be correct. Input The first line contains one\ninteger \n    t\n \u2014 the number of test cases (\n    1 \n    \u2264 t \n    \u2264\n    100\n     000\n). Next \n    2 \n    \u00b7 t\n lines contains the description of test\ncases,two lines for each. The first line contains one integer \n    n\n \u2014 the\nlength of the permutation, written by Vasya (\n    1 \n    \u2264 n \n    \u2264\n    500\n     000\n). The second line contains \n    n\n integers \n    next_1, next_2,\n    \n    \u2026, next_n\n, separated by spaces (\n    next_i = -1\n or \n    i < next_i\n    \n    \u2264 n + 1\n). It is guaranteed, that the sum of \n    n\n in all test cases\ndoesn't exceed \n    500\n     000\n. In hacks you can only use one test case, so\n\n    T = 1\n. Output Print \n    T\n lines, in \n    i\n-th of them answer to the\n\n    i\n-th test case. If there is no such permutations \n    p_1, p_2, \n    \u2026,\n    p_n\n of integers from \n    1\n to \n    n\n, that Vasya could write, print the\nonly number \n    -1\n. In the other case print \n    n\n different integers\n\n    p_1, p_2, \n    \u2026, p_n\n, separated by spaces (\n    1 \n    \u2264 p_i \n    \u2264\n    n\n). All defined values of \n    next_i\n which are not equal to \n    -1\n\nshould be computed correctly \n    p_1, p_2, \n    \u2026, p_n\n using defenition\ngiven in the statement of the problem. If there exists more than one solution\nyou can find any of them. Example Input 6 3 2 3 4 2 3 3 3 -1 -1 -1 3 3 4 -1 1\n2 4 4 -1 4 5 Output 1 2 3 2 1 2 1 3 -1 1 3 2 1 4 Note In the first test case\nfor permutation \n    p = [1, 2, 3]\n Vasya should write \n    next = [2, 3, 4]\n,\nbecause each number in permutation is less than next. It's easy to see, that\nit is the only satisfying permutation. In the third test case, any permutation\ncan be the answer because all numbers \n    next_i\n are lost. In the fourth\ntest case, there is no satisfying permutation, so the answer is \n    -1\n.\n\n",
        "cf_contest_id": 1158,
        "cf_index": "C",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "dfs and similar",
            "graphs",
            "greedy",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n3\r\n2 3 4\r\n2\r\n3 3\r\n3\r\n-1 -1 -1\r\n3\r\n3 4 -1\r\n1\r\n2\r\n4\r\n4 -1 4 5\r\n",
                "1 2 3 \r\n2 1 \r\n1 2 3 \r\n-1\r\n1 \r\n3 1 2 4 \r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n4\r\n2 4 4 5\r\n4\r\n2 -1 4 -1\r\n4\r\n4 5 5 5\r\n4\r\n2 3 4 5\r\n4\r\n2 3 4 5\r\n4\r\n-1 3 4 5\r\n4\r\n-1 3 4 5\r\n4\r\n3 3 4 5\r\n4\r\n3 5 5 5\r\n4\r\n5 4 5 5\r\n",
                "2 3 1 4 \r\n1 2 3 4 \r\n-1\r\n1 2 3 4 \r\n1 2 3 4 \r\n1 2 3 4 \r\n1 2 3 4 \r\n2 1 3 4 \r\n-1\r\n-1\r\n"
            ]
        ]
    }
]