[
    {
        "name": "Lucky Tickets",
        "description": "Gerald has a friend, Pollard. Pollard is interested in lucky tickets (ticket\nis a sequence of digits). At first he thought that a ticket is lucky if\nbetween some its digits we can add arithmetic signs and brackets so that the\nresult obtained by the arithmetic expression was number 100. But he quickly\nanalyzed all such tickets and moved on to a more general question. Now he\nexplores k-lucky tickets. Pollard sais that a ticket is k-lucky if we can add\narithmetic operation signs between its digits to the left or right of them\n(i.e., \"+\", \"-\", \" \u00d7 \") and brackets so as to obtain the correct arithmetic\nexpression whose value would equal k. For example, ticket \"224201016\" is\n1000-lucky as ( - 2 - (2 + 4)) \u00d7 (2 + 0) + 1016 = 1000. Pollard was so carried\naway by the lucky tickets that he signed up for a seminar on lucky tickets\nand, as far as Gerald knows, Pollard will attend it daily at 7 pm in some\nfamous institute and will commute to it in the same tram for m days. In this\ntram tickets have eight digits. And Gerald wants to make a surprise for\nPollard: each day Pollard will receive a tram k-lucky ticket. The conductor\nhas already agreed to give Pollard certain tickets during all these m days and\nhe only wants Gerald to tell him what kind of tickets to give out. In this\nregard, help Gerald pick exactly m distinct k-lucky tickets. Input The single\nline contains two integers k and m (0 \u2264 k \u2264 10^4, 1 \u2264 m \u2264 3\u00b710^5). Output\nPrint m lines. Each line must contain exactly 8 digits \u2014 the k-winning ticket.\nThe tickets may begin with 0, all tickets must be distinct. If there are more\nthan m distinct k-lucky tickets, print any m of them. It is guaranteed that at\nleast m distinct k-lucky tickets exist. The tickets can be printed in any\norder. Examples Input 0 3 Output 00000000 00000001 00000002 Input 7 4 Output\n00000007 00000016 00000017 00000018\n\n",
        "cf_contest_id": 333,
        "cf_index": "C",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "0 3\r\n",
                "00000000\r\n00010001\r\n00010000\r\n"
            ],
            [
                "7 4\r\n",
                "00000007\r\n00010006\r\n00010007\r\n00020005\r\n"
            ]
        ],
        "private_cases": [
            [
                "0 1\r\n",
                "00000000\r\n"
            ],
            [
                "10000 1\r\n",
                "00019999\r\n"
            ]
        ]
    }
]