[
    {
        "name": "Red-Blue Graph",
        "description": "You are given a bipartite graph: the first part of this graph contains\n\n    n_1\n vertices, the second part contains \n    n_2\n vertices, and there are\n\n    m\n edges. The graph can contain multiple edges. Initially, each edge is\ncolorless. For each edge, you may either leave it uncolored (it is free),\npaint it red (it costs \n    r\n coins) or paint it blue (it costs \n    b\n\ncoins). No edge can be painted red and blue simultaneously. There are three\ntypes of vertices in this graph \u2014 colorless, red and blue. Colored vertices\nimpose additional constraints on edges' colours: for each red vertex, the\nnumber of red edges indicent to it should be strictly greater than the number\nof blue edges incident to it; for each blue vertex, the number of blue edges\nindicent to it should be strictly greater than the number of red edges\nincident to it. Colorless vertices impose no additional constraints. Your goal\nis to paint some (possibly none) edges so that all constraints are met, and\namong all ways to do so, you should choose the one with minimum total cost.\nInput The first line contains five integers \n    n_1\n, \n    n_2\n, \n    m\n,\n\n    r\n and \n    b\n (\n    1 \n    \u2264 n_1, n_2, m, r, b \n    \u2264 200\n) \u2014 the number\nof vertices in the first part, the number of vertices in the second part, the\nnumber of edges, the amount of coins you have to pay to paint an edge red, and\nthe amount of coins you have to pay to paint an edge blue, respectively. The\nsecond line contains one string consisting of \n    n_1\n characters. Each\ncharacter is either U, R or B. If the \n    i\n-th character is U, then the\n\n    i\n-th vertex of the first part is uncolored; R corresponds to a red\nvertex, and B corresponds to a blue vertex. The third line contains one string\nconsisting of \n    n_2\n characters. Each character is either U, R or B. This\nstring represents the colors of vertices of the second part in the same way.\nThen \n    m\n lines follow, the \n    i\n-th line contains two integers \n    u_i\n\nand \n    v_i\n (\n    1 \n    \u2264 u_i \n    \u2264 n_1\n, \n    1 \n    \u2264 v_i \n    \u2264 n_2\n)\ndenoting an edge connecting the vertex \n    u_i\n from the first part and the\nvertex \n    v_i\n from the second part. The graph may contain multiple edges.\nOutput If there is no coloring that meets all the constraints, print one\ninteger \n    -1\n. Otherwise, print an integer \n    c\n denoting the total cost\nof coloring, and a string consisting of \n    m\n characters. The \n    i\n-th\ncharacter should be U if the \n    i\n-th edge should be left uncolored, R if\nthe \n    i\n-th edge should be painted red, or B if the \n    i\n-th edge should\nbe painted blue. If there are multiple colorings with minimum possible cost,\nprint any of them. Examples Input 3 2 6 10 15 RRB UB 3 2 2 2 1 2 1 1 2 1 1 1\nOutput 35 BUURRU Input 3 1 3 4 5 RRR B 2 1 1 1 3 1 Output -1 Input 3 1 3 4 5\nURU B 2 1 1 1 3 1 Output 14 RBB\n\n",
        "cf_contest_id": 1288,
        "cf_index": "F",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "flows"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3 2 6 10 15\r\nRRB\r\nUB\r\n3 2\r\n2 2\r\n1 2\r\n1 1\r\n2 1\r\n1 1\r\n",
                "35\r\nBUUURR"
            ],
            [
                "3 1 3 4 5\r\nRRR\r\nB\r\n2 1\r\n1 1\r\n3 1\r\n",
                "-1\r\n"
            ],
            [
                "3 1 3 4 5\r\nURU\r\nB\r\n2 1\r\n1 1\r\n3 1\r\n",
                "14\r\nRBB"
            ]
        ],
        "private_cases": [
            [
                "5 5 10 23 45\r\nRRUBB\r\nURRRR\r\n4 3\r\n4 3\r\n4 1\r\n5 5\r\n5 4\r\n4 4\r\n5 2\r\n2 5\r\n2 5\r\n1 4\r\n",
                "-1\r\n"
            ],
            [
                "10 5 10 81 97\r\nUURRUURUBB\r\nBRBUR\r\n7 1\r\n1 4\r\n10 2\r\n6 5\r\n7 4\r\n6 5\r\n9 5\r\n7 1\r\n4 3\r\n2 4\r\n",
                "-1\r\n"
            ],
            [
                "5 10 10 27 55\r\nUBUBU\r\nUBRUBRUBUB\r\n2 4\r\n5 5\r\n5 8\r\n3 5\r\n2 3\r\n4 6\r\n1 3\r\n2 6\r\n1 1\r\n5 10\r\n",
                "-1\r\n"
            ],
            [
                "5 5 10 51 85\r\nBUBBB\r\nUBRBR\r\n5 5\r\n2 5\r\n1 1\r\n3 5\r\n3 1\r\n2 2\r\n2 4\r\n4 5\r\n4 1\r\n2 2\r\n",
                "-1\r\n"
            ],
            [
                "10 5 10 5 49\r\nURRBRRURBR\r\nUURBB\r\n6 4\r\n9 4\r\n4 2\r\n5 2\r\n5 2\r\n7 1\r\n5 1\r\n1 2\r\n2 2\r\n2 5\r\n",
                "-1\r\n"
            ],
            [
                "5 10 10 51 99\r\nUBUBB\r\nBURUBUBURR\r\n1 6\r\n3 3\r\n2 2\r\n4 2\r\n3 4\r\n4 7\r\n2 1\r\n3 7\r\n3 6\r\n2 9\r\n",
                "-1\r\n"
            ],
            [
                "5 5 10 38 35\r\nBRRBR\r\nBURRR\r\n2 2\r\n5 3\r\n1 5\r\n1 1\r\n5 3\r\n5 1\r\n2 3\r\n3 3\r\n3 2\r\n4 5\r\n",
                "-1\r\n"
            ],
            [
                "10 5 10 96 87\r\nRUUBURRRRR\r\nUUBBR\r\n9 4\r\n7 4\r\n1 4\r\n9 2\r\n3 1\r\n7 1\r\n8 4\r\n4 2\r\n9 2\r\n8 2\r\n",
                "-1\r\n"
            ],
            [
                "5 10 10 42 45\r\nURBBB\r\nRRRBBRRRRB\r\n1 1\r\n4 1\r\n4 4\r\n2 10\r\n3 10\r\n2 1\r\n3 9\r\n1 3\r\n5 4\r\n5 7\r\n",
                "-1\r\n"
            ],
            [
                "5 5 10 62 75\r\nRRRRB\r\nBURBU\r\n2 1\r\n5 5\r\n3 3\r\n3 5\r\n1 1\r\n4 1\r\n4 1\r\n4 4\r\n5 4\r\n5 1\r\n",
                "-1\r\n"
            ],
            [
                "10 5 10 20 31\r\nBBUBRUBRUR\r\nURUBB\r\n9 1\r\n9 4\r\n8 3\r\n3 4\r\n1 2\r\n6 2\r\n8 5\r\n5 5\r\n5 5\r\n7 2\r\n",
                "-1\r\n"
            ],
            [
                "5 10 10 66 89\r\nRUUBU\r\nBBURBBRRUB\r\n3 9\r\n3 1\r\n1 3\r\n1 5\r\n1 1\r\n3 3\r\n4 5\r\n4 4\r\n2 3\r\n4 1\r\n",
                "-1\r\n"
            ],
            [
                "5 5 10 68 98\r\nBUURR\r\nBURBB\r\n4 5\r\n1 4\r\n2 4\r\n2 3\r\n3 4\r\n2 5\r\n1 4\r\n3 1\r\n2 2\r\n3 4\r\n",
                "-1\r\n"
            ],
            [
                "10 5 10 22 54\r\nUUURUUBRRU\r\nBRBUB\r\n5 5\r\n9 5\r\n6 3\r\n3 1\r\n4 1\r\n6 2\r\n3 3\r\n2 3\r\n1 4\r\n1 4\r\n",
                "-1\r\n"
            ],
            [
                "5 10 10 67 12\r\nURBRU\r\nRBBUUBURRU\r\n4 5\r\n3 3\r\n4 1\r\n5 3\r\n3 4\r\n5 6\r\n5 3\r\n4 8\r\n2 1\r\n4 5\r\n",
                "-1\r\n"
            ],
            [
                "5 5 10 96 47\r\nRBBBU\r\nRURBU\r\n2 4\r\n1 1\r\n1 3\r\n1 4\r\n1 1\r\n2 4\r\n3 4\r\n4 3\r\n4 2\r\n5 4\r\n",
                "333\r\nUURURBBUBU"
            ],
            [
                "10 5 10 50 99\r\nBUBUURUBUR\r\nBBUBB\r\n8 4\r\n8 4\r\n7 5\r\n6 2\r\n3 3\r\n9 1\r\n4 1\r\n2 3\r\n7 2\r\n2 5\r\n",
                "-1\r\n"
            ],
            [
                "5 10 10 95 57\r\nBBUUU\r\nBBBUBRURBU\r\n4 7\r\n3 1\r\n5 1\r\n5 10\r\n1 5\r\n2 7\r\n5 10\r\n2 7\r\n3 10\r\n3 4\r\n",
                "-1\r\n"
            ],
            [
                "5 5 10 82 88\r\nRRUBR\r\nURRRU\r\n1 3\r\n4 5\r\n3 3\r\n1 1\r\n2 2\r\n1 4\r\n5 4\r\n1 5\r\n3 4\r\n2 1\r\n",
                "334\r\nRBUURURUUU"
            ],
            [
                "10 5 10 36 40\r\nRRUURUUBBB\r\nBRBRR\r\n7 3\r\n5 2\r\n10 5\r\n6 5\r\n10 4\r\n6 1\r\n6 1\r\n5 5\r\n2 5\r\n8 2\r\n",
                "-1\r\n"
            ],
            [
                "5 10 10 82 98\r\nUUUUU\r\nRRBRURBURR\r\n3 10\r\n3 8\r\n4 3\r\n4 1\r\n4 6\r\n4 7\r\n1 3\r\n4 9\r\n3 4\r\n4 2\r\n",
                "688\r\nRUBRRBURRR"
            ],
            [
                "5 5 10 10 29\r\nRBUUB\r\nBBRRR\r\n1 4\r\n2 2\r\n3 5\r\n3 4\r\n1 5\r\n3 3\r\n2 3\r\n3 5\r\n4 5\r\n1 2\r\n",
                "-1\r\n"
            ],
            [
                "10 5 10 64 85\r\nBRRRBBBUBR\r\nUBBBR\r\n1 4\r\n10 4\r\n8 1\r\n10 2\r\n8 5\r\n1 3\r\n4 1\r\n4 2\r\n10 1\r\n6 2\r\n",
                "-1\r\n"
            ],
            [
                "5 10 10 10 43\r\nRUURR\r\nRRBURUUUBU\r\n1 8\r\n4 1\r\n3 3\r\n2 2\r\n2 4\r\n4 3\r\n2 3\r\n1 10\r\n5 7\r\n5 2\r\n",
                "-1\r\n"
            ]
        ]
    }
]