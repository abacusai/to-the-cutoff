[
    {
        "name": "3-palindrome",
        "description": "In the beginning of the new year Keivan decided to reverse his name. He\ndoesn't like palindromes, so he changed Naviek to Navick. He is too selfish,\nso for a given n he wants to obtain a string of n characters, each of which is\neither 'a', 'b' or 'c', with no palindromes of length 3 appearing in the\nstring as a substring. For example, the strings \"abc\" and \"abca\" suit him,\nwhile the string \"aba\" doesn't. He also want the number of letters 'c' in his\nstring to be as little as possible. Input The first line contains single\ninteger n (1 \u2264 n \u2264 2\u00b710^5) \u2014 the length of the string. Output Print the string\nthat satisfies all the constraints. If there are multiple answers, print any\nof them. Examples Input 2 Output aa Input 3 Output bba Note A palindrome is a\nsequence of characters which reads the same backward and forward.\n\n",
        "cf_contest_id": 805,
        "cf_index": "B",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n",
                "aa\r\n"
            ],
            [
                "3\r\n",
                "aab\r\n"
            ]
        ],
        "private_cases": [
            [
                "38\r\n",
                "aabbaabbaabbaabbaabbaabbaabbaabbaabbaa\r\n"
            ],
            [
                "47\r\n",
                "aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaab\r\n"
            ],
            [
                "59\r\n",
                "aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaab\r\n"
            ],
            [
                "67\r\n",
                "aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaab\r\n"
            ],
            [
                "77\r\n",
                "aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba\r\n"
            ],
            [
                "89\r\n",
                "aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba\r\n"
            ],
            [
                "98\r\n",
                "aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaa\r\n"
            ],
            [
                "109\r\n",
                "aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba\r\n"
            ],
            [
                "117\r\n",
                "aabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabbaabba\r\n"
            ],
            [
                "1\r\n",
                "a\r\n"
            ],
            [
                "6\r\n",
                "aabbaa\r\n"
            ],
            [
                "4\r\n",
                "aabb\r\n"
            ]
        ]
    }
]