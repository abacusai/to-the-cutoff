[
    {
        "name": "Fools and Foolproof Roads",
        "description": "You must have heard all about the Foolland on your Geography lessons.\nSpecifically, you must know that federal structure of this country has been\nthe same for many centuries. The country consists of n cities, some pairs of\ncities are connected by bidirectional roads, each road is described by its\nlength li. The fools lived in their land joyfully, but a recent revolution\nchanged the king. Now the king is Vasily the Bear. Vasily divided the country\ncities into regions, so that any two cities of the same region have a path\nalong the roads between them and any two cities of different regions don't\nhave such path. Then Vasily decided to upgrade the road network and construct\nexactly p new roads in the country. Constructing a road goes like this: We\nchoose a pair of distinct cities u, v that will be connected by a new road (at\nthat, it is possible that there already is a road between these cities). We\ndefine the length of the new road: if cities u, v belong to distinct regions,\nthen the length is calculated as min(10^9, S + 1) (S \u2014 the total length of all\nroads that exist in the linked regions), otherwise we assume that the length\nequals 1000. We build a road of the specified length between the chosen\ncities. If the new road connects two distinct regions, after construction of\nthe road these regions are combined into one new region. Vasily wants the road\nconstructing process to result in the country that consists exactly of q\nregions. Your task is to come up with such road constructing plan for Vasily\nthat it meets the requirement and minimizes the total length of the built\nroads. Input The first line contains four integers n (1 \u2264 n \u2264 10^5), m (0 \u2264 m\n\u2264 10^5), p (0 \u2264 p \u2264 10^5), q (1 \u2264 q \u2264 n) \u2014 the number of cities in the\nFoolland, the number of existing roads, the number of roads that are planned\nto construct and the required number of regions. Next m lines describe the\nroads that exist by the moment upgrading of the roads begun. Each of these\nlines contains three integers xi, yi, li: xi, yi \u2014 the numbers of the cities\nconnected by this road (1 \u2264 xi, yi \u2264 n, xi \u2260 yi), li \u2014 length of the road (1 \u2264\nli \u2264 10^9). Note that one pair of cities can be connected with multiple roads.\nOutput If constructing the roads in the required way is impossible, print a\nsingle string \"NO\" (without the quotes). Otherwise, in the first line print\nword \"YES\" (without the quotes), and in the next p lines print the road\nconstruction plan. Each line of the plan must consist of two distinct\nintegers, giving the numbers of the cities connected by a road. The road must\noccur in the plan in the order they need to be constructed. If there are\nmultiple optimal solutions, you can print any of them. Examples Input 9 6 2 2\n1 2 2 3 2 1 4 6 20 1 3 8 7 8 3 5 7 2 Output YES 9 5 1 9 Input 2 0 1 2 Output\nNO Input 2 0 0 2 Output YES Note Consider the first sample. Before the reform\nthe Foolland consists of four regions. The first region includes cities 1, 2,\n3, the second region has cities 4 and 6, the third region has cities 5, 7, 8,\nthe fourth region has city 9. The total length of the roads in these cities is\n11, 20, 5 and 0, correspondingly. According to the plan, we first build the\nroad of length 6 between cities 5 and 9, then the road of length 23 between\ncities 1 and 9. Thus, the total length of the built roads equals 29.\n\n",
        "cf_contest_id": 362,
        "cf_index": "D",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "9 6 2 2\r\n1 2 2\r\n3 2 1\r\n4 6 20\r\n1 3 8\r\n7 8 3\r\n5 7 2\r\n",
                "YES\r\n9 8\r\n2 9\r\n"
            ],
            [
                "2 0 1 2\r\n",
                "NO\r\n"
            ],
            [
                "2 0 0 2\r\n",
                "YES\r\n"
            ]
        ],
        "private_cases": [
            [
                "9 6 2 3\r\n1 2 2\r\n3 2 1\r\n4 6 20\r\n1 3 8\r\n7 8 3\r\n5 7 2\r\n",
                "YES\r\n9 8\r\n9 8\r\n"
            ],
            [
                "9 6 2 5\r\n1 2 2\r\n3 2 1\r\n4 6 20\r\n1 3 8\r\n7 8 3\r\n5 7 2\r\n",
                "NO\r\n"
            ],
            [
                "6 5 2 1\r\n1 2 1\r\n2 3 1\r\n3 4 1\r\n4 5 1\r\n5 6 1\r\n",
                "YES\r\n5 6\r\n5 6\r\n"
            ],
            [
                "6 5 0 1\r\n1 2 1\r\n2 3 1\r\n3 4 1\r\n4 5 1\r\n5 6 1\r\n",
                "YES\r\n"
            ],
            [
                "15 15 10 1\r\n3 2 1000000000\r\n1 4 1000000000\r\n1 5 1000000000\r\n7 9 1000000000\r\n8 9 1000000000\r\n2 6 1000000000\r\n3 6 1000000000\r\n4 5 1000000000\r\n13 15 1000000000\r\n14 13 1000000000\r\n15 14 1000000000\r\n7 8 1000000000\r\n10 11 1000000000\r\n11 12 1000000000\r\n10 12 1000000000\r\n",
                "YES\r\n5 9\r\n15 12\r\n6 5\r\n15 6\r\n15 6\r\n15 6\r\n15 6\r\n15 6\r\n15 6\r\n15 6\r\n"
            ],
            [
                "10 0 1 10\r\n",
                "NO\r\n"
            ],
            [
                "10 0 10 9\r\n",
                "YES\r\n1 3\r\n1 3\r\n1 3\r\n1 3\r\n1 3\r\n1 3\r\n1 3\r\n1 3\r\n1 3\r\n1 3\r\n"
            ],
            [
                "10 0 10 1\r\n",
                "YES\r\n1 3\r\n7 10\r\n9 6\r\n8 2\r\n5 4\r\n7 8\r\n5 1\r\n9 7\r\n5 9\r\n5 9\r\n"
            ],
            [
                "1 0 0 1\r\n",
                "YES\r\n"
            ],
            [
                "1 0 1 1\r\n",
                "NO\r\n"
            ],
            [
                "1 0 12345 1\r\n",
                "NO\r\n"
            ],
            [
                "1 0 100000 1\r\n",
                "NO\r\n"
            ],
            [
                "2 0 0 1\r\n",
                "NO\r\n"
            ],
            [
                "2 0 1 1\r\n",
                "YES\r\n1 2\r\n"
            ],
            [
                "2 1 0 2\r\n1 2 3\r\n",
                "NO\r\n"
            ],
            [
                "2 1 0 1\r\n1 2 1\r\n",
                "YES\r\n"
            ],
            [
                "2 1 1 1\r\n2 1 4\r\n",
                "YES\r\n2 1\r\n"
            ],
            [
                "2 1 100000 2\r\n1 2 10\r\n",
                "NO\r\n"
            ],
            [
                "2 1 1 1\r\n1 2 1000000000\r\n",
                "YES\r\n1 2\r\n"
            ],
            [
                "2 10 1 1\r\n1 2 1000000000\r\n2 1 1000000000\r\n2 1 1000000000\r\n1 2 1000000000\r\n1 2 56556756\r\n2 1 1\r\n1 2 1000000000\r\n2 1 1000000000\r\n2 1 1000000000\r\n1 2 1000000000\r\n",
                "YES\r\n1 2\r\n"
            ],
            [
                "14 14 1 1\r\n1 2 1\r\n2 3 1\r\n5 6 1\r\n7 9 1\r\n8 7 1\r\n11 10 1\r\n8 9 1\r\n12 14 1\r\n11 12 1\r\n14 13 1\r\n10 13 2\r\n1 6 2\r\n4 5 3\r\n3 4 1\r\n",
                "NO\r\n"
            ],
            [
                "9 6 1 2\r\n1 2 2\r\n3 2 1\r\n4 6 20\r\n1 3 8\r\n7 8 3\r\n5 7 2\r\n",
                "NO\r\n"
            ],
            [
                "14 14 2 1\r\n1 2 1\r\n2 3 1\r\n5 6 1\r\n7 9 1\r\n8 7 1\r\n11 10 1\r\n8 9 1\r\n12 14 1\r\n11 12 1\r\n14 13 1\r\n10 13 2\r\n1 6 2\r\n4 5 3\r\n3 4 1\r\n",
                "YES\r\n9 13\r\n6 9\r\n"
            ],
            [
                "6 1 2 5\r\n3 4 1000\r\n",
                "YES\r\n3 4\r\n3 4\r\n"
            ],
            [
                "10 9 3 2\r\n2 8 3\r\n4 1 6\r\n5 10 1\r\n7 8 2\r\n7 2 1\r\n5 6 1\r\n10 6 2\r\n9 6 1\r\n5 9 1\r\n",
                "YES\r\n3 6\r\n1 8\r\n1 8\r\n"
            ],
            [
                "10 7 2 4\r\n9 2 20\r\n5 4 11\r\n10 3 12\r\n7 1 13\r\n9 5 14\r\n10 6 10\r\n10 8 10\r\n",
                "NO\r\n"
            ],
            [
                "10 5 2 2\r\n4 6 20\r\n1 10 15\r\n1 7 20\r\n6 5 20\r\n9 3 17\r\n",
                "NO\r\n"
            ],
            [
                "10 5 4 2\r\n2 5 19\r\n9 4 11\r\n6 2 11\r\n6 1 15\r\n4 10 14\r\n",
                "YES\r\n3 7\r\n8 3\r\n8 10\r\n8 10\r\n"
            ],
            [
                "20 11 10 4\r\n17 12 216334157\r\n15 19 279000438\r\n18 20 456753771\r\n9 15 830129118\r\n9 14 477792844\r\n4 11 86100846\r\n15 4 594066440\r\n9 6 290215734\r\n8 5 321999322\r\n18 1 862312250\r\n2 3 402775619\r\n",
                "YES\r\n7 10\r\n13 16\r\n7 13\r\n7 12\r\n5 3\r\n5 3\r\n5 3\r\n5 3\r\n5 3\r\n5 3\r\n"
            ],
            [
                "20 7 10 3\r\n13 16 56437790\r\n2 15 926419249\r\n19 18 129620195\r\n17 7 107548920\r\n6 10 967554396\r\n20 1 612214937\r\n5 13 204765409\r\n",
                "YES\r\n3 4\r\n9 8\r\n14 11\r\n12 3\r\n9 14\r\n12 9\r\n12 7\r\n18 12\r\n16 1\r\n18 15\r\n"
            ],
            [
                "999 0 0 999\r\n",
                "YES\r\n"
            ],
            [
                "1000 0 1 1000\r\n",
                "NO\r\n"
            ],
            [
                "100000 0 100000 100000\r\n",
                "NO\r\n"
            ],
            [
                "100000 0 0 100000\r\n",
                "YES\r\n"
            ],
            [
                "100000 0 2 99997\r\n",
                "NO\r\n"
            ]
        ]
    }
]