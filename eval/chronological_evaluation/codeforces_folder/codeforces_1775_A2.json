[
    {
        "name": "Gardener and the Capybaras (hard version)",
        "description": "This is an hard version of the problem. The difference between the versions is\nthat the string can be longer than in the easy version. You can only do hacks\nif both versions of the problem are passed. Kazimir Kazimirovich is a Martian\ngardener. He has a huge orchard of binary balanced apple trees. Recently\nCasimir decided to get himself three capybaras. The gardener even came up with\ntheir names and wrote them down on a piece of paper. The name of each capybara\nis a non-empty line consisting of letters \"a\" and \"b\". Denote the names of the\ncapybaras by the lines \n    a\n, \n    b\n, and \n    c\n. Then Casimir wrote the\nnonempty lines \n    a\n, \n    b\n, and \n    c\n in a row without spaces. For\nexample, if the capybara's name was \"aba\", \"ab\", and \"bb\", then the string the\ngardener wrote down would look like \"abaabbb\". The gardener remembered an\ninteresting property: either the string \n    b\n is lexicographically not\nsmaller than the strings \n    a\n and \n    c\n at the same time, or the string\n\n    b\n is lexicographically not greater than the strings \n    a\n and \n    c\n\nat the same time. In other words, either \n    a \n    \u2264 b\n and \n    c \n    \u2264 b\n\nare satisfied, or \n    b \n    \u2264 a\n and \n    b \n    \u2264 c\n are satisfied (or\npossibly both conditions simultaneously). Here \n    \u2264\n denotes the\nlexicographic \"less than or equal to\" for strings. Thus, \n    a \n    \u2264 b\n means\nthat the strings must either be equal, or the string \n    a\n must stand\nearlier in the dictionary than the string \n    b\n. For a more detailed\nexplanation of this operation, see \"Notes\" section. Today the gardener looked\nat his notes and realized that he cannot recover the names because they are\nwritten without spaces. He is no longer sure if he can recover the original\nstrings \n    a\n, \n    b\n, and \n    c\n, so he wants to find any triplet of\nnames that satisfy the above property. Input Each test contains multiple test\ncases. The first line contains the number of test cases \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 10^4\n). The description of the test cases follows. The only line of a\ntest case contains the string \n    s\n (\n    3 \n    \u2264 |s| \n    \u2264 2 \n    \u00b7 10^5\n)\n\u2014 the names of the capybaras, written together. The string consists of English\nletters 'a' and 'b' only. It is guaranteed that the sum of string lengths over\nall test cases does not exceed \n    4 \n    \u00b7 10^5\n. Output For each test\ncase, print three strings \n    a\n, \n    b\n and \n    c\n on a single line,\nseparated by spaces \u2014 names of capybaras, such that writing them without\nspaces results in a line \n    s\n. Either \n    a \n    \u2264 b\n and \n    c \n    \u2264 b\n,\nor \n    b \n    \u2264 a\n and \n    b \n    \u2264 c\n must be satisfied. If there are several\nways to restore the names, print any of them. If the names cannot be\nrecovered, print \":(\" (without quotes). Example Input 5 bbba aba aaa abba abbb\nOutput b bb a a b a a a a ab b a a bb b Note A string \n    x\n is\nlexicographically smaller than a string \n    y\n if and only if one of the\nfollowing holds: \n    x\n is a prefix of \n    y\n, but \n    x \n     y\n; in the\nfirst position where \n    x\n and \n    y\n differ, the string \n    x\n has the\nletter 'a', and the string \n    y\n has the letter 'b'. Now let's move on to\nthe examples. In the first test case, one of the possible ways to split the\nline \n    s\n into three lines \u2014is \"b\", \"bb\", \"a\". In the third test case, we\ncan see that the split satisfies two conditions at once (i.e., \n    a \n    \u2264\n    b\n, \n    c \n    \u2264 b\n, \n    b \n    \u2264 a\n and \n    b \n    \u2264 c\n are true\nsimultaneously).\n\n",
        "cf_contest_id": 1775,
        "cf_index": "A2",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\nbbba\r\naba\r\naaa\r\nabba\r\nabbb\r\n",
                "b bb a\r\na b a\r\na a a\r\na bb a\r\na bb b\r\n"
            ]
        ],
        "private_cases": []
    }
]