[
    {
        "name": "Passable Paths (easy version)",
        "description": "This is an easy version of the problem. The only difference between an easy\nand a hard version is in the number of queries. Polycarp grew a tree from\n\n    n\n vertices. We remind you that a tree of \n    n\n vertices is an\nundirected connected graph of \n    n\n vertices and \n    n-1\n edges that does\nnot contain cycles. He calls a set of vertices passable if there is such a\npath in the tree that passes through each vertex of this set without passing\nthrough any edge twice. The path can visit other vertices (not from this set).\nIn other words, a set of vertices is called passable if there is a simple path\nthat passes through all the vertices of this set (and possibly some other).\nFor example, for a tree below sets \n    3, 2, 5\n, \n    1, 5,\n    4\n, \n    1, 4\n are passable, and \n    1, 3, 5\n,\n\n    1, 2, 3, 4, 5\n are not. Polycarp asks you to answer \n    q\n\nqueries. Each query is a set of vertices. For each query, you need to\ndetermine whether the corresponding set of vertices is passable. Input The\nfirst line of input contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n) \u2014 number of vertices. Following \n    n - 1\n lines a\ndescription of the tree.. Each line contains two integers \n    u\n and \n    v\n\n(\n    1 \n    \u2264 u, v \n    \u2264 n\n, \n    u \n     v\n) \u2014 indices of vertices connected\nby an edge. Following line contains single integer \n    q\n (\n    1 \n    \u2264 q \n    \u2264\n    5\n) \u2014 number of queries. The following \n    2 \n    \u00b7 q\n lines contain\ndescriptions of sets. The first line of the description contains an integer\n\n    k\n (\n    1 \n    \u2264 k \n    \u2264 n\n) \u2014 the size of the set. The second line of\nthe description contains \n    k\n of distinct integers \n    p_1, p_2, \n    \u2026,\n    p_k\n (\n    1 \n    \u2264 p_i \n    \u2264 n\n) \u2014 indices of the vertices of the set. It is\nguaranteed that the sum of \n    k\n values for all queries does not exceed \n    2\n    \n    \u00b7 10^5\n. Output Output \n    q\n lines, each of which contains the\nanswer to the corresponding query. As an answer, output \"YES\" if the set is\npassable, and \"NO\" otherwise. You can output the answer in any case (for\nexample, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a\npositive answer). Examples Input 5 1 2 2 3 2 4 4 5 5 3 3 2 5 5 1 2 3 4 5 2 1 4\n3 1 3 5 3 1 5 4 Output YES NO YES NO YES Input 5 1 2 3 2 2 4 5 2 4 2 3 1 3 3 4\n5 3 2 3 5 1 1 Output YES NO YES YES\n\n",
        "cf_contest_id": 1702,
        "cf_index": "G1",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 2\r\n2 3\r\n2 4\r\n4 5\r\n5\r\n3\r\n3 2 5\r\n5\r\n1 2 3 4 5\r\n2\r\n1 4\r\n3\r\n1 3 5\r\n3\r\n1 5 4\r\n",
                "YES\r\nNO\r\nYES\r\nNO\r\nYES\r\n"
            ],
            [
                "5\r\n1 2\r\n3 2\r\n2 4\r\n5 2\r\n4\r\n2\r\n3 1\r\n3\r\n3 4 5\r\n3\r\n2 3 5\r\n1\r\n1\r\n",
                "YES\r\nNO\r\nYES\r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n2 4\r\n4 1\r\n3 2\r\n4\r\n4\r\n2 1 4 3\r\n3\r\n4 3 2\r\n2\r\n3 4\r\n2\r\n1 2\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\n"
            ],
            [
                "3\r\n3 1\r\n2 1\r\n1\r\n2\r\n1 2\r\n",
                "YES\r\n"
            ],
            [
                "1\r\n1\r\n1\r\n1\r\n",
                "YES\r\n"
            ],
            [
                "5\r\n4 2\r\n5 4\r\n1 4\r\n3 5\r\n1\r\n4\r\n1 3 5 2\r\n",
                "NO\r\n"
            ],
            [
                "2\r\n1 2\r\n5\r\n1\r\n2\r\n1\r\n1\r\n1\r\n1\r\n2\r\n2 1\r\n2\r\n1 2\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\n"
            ],
            [
                "1\r\n2\r\n1\r\n1\r\n1\r\n1\r\n",
                "YES\r\nYES\r\n"
            ],
            [
                "25\r\n12 14\r\n14 23\r\n14 18\r\n14 25\r\n17 14\r\n14 19\r\n16 14\r\n22 14\r\n20 14\r\n5 14\r\n14 2\r\n10 14\r\n6 1\r\n6 14\r\n21 13\r\n14 11\r\n14 21\r\n15 14\r\n14 7\r\n14 8\r\n14 24\r\n21 4\r\n9 21\r\n21 3\r\n2\r\n2\r\n15 17\r\n3\r\n9 23 24\r\n",
                "YES\r\nNO\r\n"
            ],
            [
                "19\r\n15 19\r\n19 1\r\n12 19\r\n18 9\r\n13 19\r\n4 18\r\n19 11\r\n19 17\r\n5 9\r\n14 19\r\n8 19\r\n19 6\r\n16 9\r\n19 7\r\n3 19\r\n19 9\r\n19 10\r\n9 2\r\n5\r\n19\r\n11 12 18 14 2 3 16 15 4 17 8 9 19 1 10 13 7 6 5\r\n12\r\n1 2 4 5 7 8 9 12 13 14 15 16\r\n19\r\n5 17 2 19 1 18 7 12 15 14 4 9 16 10 11 3 13 8 6\r\n12\r\n2 3 4 5 6 7 9 10 12 14 16 18\r\n19\r\n8 10 18 1 14 2 11 13 12 5 19 17 16 3 6 15 4 9 7\r\n",
                "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\n"
            ],
            [
                "41\r\n34 4\r\n40 37\r\n29 17\r\n12 14\r\n32 31\r\n5 3\r\n35 30\r\n35 26\r\n26 8\r\n10 36\r\n39 6\r\n15 32\r\n40 21\r\n40 32\r\n5 39\r\n2 7\r\n17 21\r\n35 3\r\n41 27\r\n1 18\r\n18 26\r\n1 23\r\n36 40\r\n20 35\r\n9 40\r\n41 18\r\n26 34\r\n25 32\r\n14 18\r\n1 13\r\n6 24\r\n21 22\r\n3 7\r\n19 17\r\n11 26\r\n38 18\r\n40 41\r\n17 28\r\n16 12\r\n33 26\r\n1\r\n3\r\n23 26 29\r\n",
                "NO\r\n"
            ],
            [
                "10\r\n2 9\r\n8 6\r\n5 8\r\n4 7\r\n10 1\r\n4 9\r\n3 5\r\n6 1\r\n2 10\r\n3\r\n4\r\n2 3 5 7\r\n5\r\n3 4 6 8 9\r\n2\r\n4 9\r\n",
                "YES\r\nYES\r\nYES\r\n"
            ],
            [
                "12\r\n12 4\r\n8 11\r\n4 5\r\n4 10\r\n9 2\r\n1 2\r\n5 8\r\n11 3\r\n1 6\r\n9 7\r\n12 6\r\n2\r\n11\r\n1 8 5 11 6 2 7 10 4 12 9\r\n12\r\n12 5 4 2 3 6 7 11 8 9 10 1\r\n",
                "NO\r\nNO\r\n"
            ],
            [
                "11\r\n8 6\r\n2 7\r\n11 1\r\n10 9\r\n6 3\r\n2 3\r\n8 4\r\n4 11\r\n2 10\r\n6 5\r\n3\r\n11\r\n10 9 4 11 8 5 3 1 2 7 6\r\n11\r\n7 2 4 8 3 1 11 10 6 5 9\r\n11\r\n2 5 7 4 1 6 10 9 3 11 8\r\n",
                "NO\r\nNO\r\nNO\r\n"
            ],
            [
                "12\r\n9 5\r\n1 5\r\n5 7\r\n5 12\r\n5 11\r\n5 2\r\n5 10\r\n5 8\r\n6 5\r\n5 4\r\n3 5\r\n5\r\n1\r\n11\r\n1\r\n3\r\n1\r\n2\r\n1\r\n11\r\n1\r\n5\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\n"
            ],
            [
                "8\r\n1 3\r\n5 1\r\n2 1\r\n1 6\r\n1 4\r\n7 1\r\n8 1\r\n2\r\n8\r\n6 7 3 4 5 8 1 2\r\n8\r\n1 4 7 2 6 8 5 3\r\n",
                "NO\r\nNO\r\n"
            ],
            [
                "7\r\n1 2\r\n2 3\r\n3 4\r\n1 5\r\n5 6\r\n5 7\r\n1\r\n3\r\n4 6 7\r\n",
                "NO\r\n"
            ],
            [
                "9\r\n9 2\r\n1 5\r\n4 5\r\n1 9\r\n7 1\r\n8 9\r\n1 3\r\n6 5\r\n1\r\n3\r\n8 6 4\r\n",
                "NO\r\n"
            ],
            [
                "6\r\n1 6\r\n6 5\r\n1 2\r\n2 3\r\n2 4\r\n1\r\n4\r\n5 2 4 3\r\n",
                "NO\r\n"
            ],
            [
                "6\r\n1 2\r\n2 3\r\n1 4\r\n4 5\r\n4 6\r\n1\r\n4\r\n3 4 5 6\r\n",
                "NO\r\n"
            ],
            [
                "9\r\n9 2\r\n1 5\r\n4 5\r\n1 9\r\n7 1\r\n8 9\r\n1 3\r\n6 5\r\n1\r\n4\r\n2 4 6 8\r\n",
                "NO\r\n"
            ],
            [
                "13\r\n2 13\r\n10 2\r\n3 2\r\n1 3\r\n12 3\r\n8 3\r\n4 8\r\n5 4\r\n7 5\r\n9 2\r\n6 12\r\n11 10\r\n1\r\n4\r\n5 7 6 4\r\n",
                "YES\r\n"
            ],
            [
                "5\r\n1 2\r\n2 3\r\n2 4\r\n2 5\r\n5\r\n3\r\n3 2 5\r\n5\r\n1 2 3 4 5\r\n2\r\n1 4\r\n4\r\n2 3 5 4\r\n4\r\n3 4 5 2\r\n",
                "YES\r\nNO\r\nYES\r\nNO\r\nNO\r\n"
            ],
            [
                "9\r\n9 2\r\n1 5\r\n4 5\r\n1 9\r\n7 1\r\n8 9\r\n1 3\r\n6 5\r\n1\r\n4\r\n1 6 8 9\r\n",
                "YES\r\n"
            ],
            [
                "9\r\n9 2\r\n1 5\r\n4 5\r\n1 9\r\n7 1\r\n8 9\r\n1 3\r\n6 5\r\n1\r\n4\r\n2 4 8 9\r\n",
                "NO\r\n"
            ]
        ]
    }
]