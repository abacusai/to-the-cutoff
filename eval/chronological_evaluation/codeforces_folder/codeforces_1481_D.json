[
    {
        "name": "AB Graph",
        "description": "Your friend Salem is Warawreh's brother and only loves math and geometry\nproblems. He has solved plenty of such problems, but according to Warawreh, in\norder to graduate from university he has to solve more graph problems. Since\nSalem is not good with graphs he asked your help with the following problem.\nYou are given a complete directed graph with \n    n\n vertices without self-\nloops. In other words, you have \n    n\n vertices and each pair of vertices\n\n    u\n and \n    v\n (\n    u \n    \u2260 v\n) has both directed edges \n    (u, v)\n\nand \n    (v, u)\n. Every directed edge of the graph is labeled with a single\ncharacter: either 'a' or 'b' (edges \n    (u, v)\n and \n    (v, u)\n may have\ndifferent labels). You are also given an integer \n    m > 0\n. You should find\na path of length \n    m\n such that the string obtained by writing out edges'\nlabels when going along the path is a palindrome. The length of the path is\nthe number of edges in it. You can visit the same vertex and the same directed\nedge any number of times. Input The first line contains a single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 500\n) \u2014 the number of test cases. The first line\nof each test case contains two integers \n    n\n and \n    m\n (\n    2 \n    \u2264 n\n    \n    \u2264 1000\n; \n    1 \n    \u2264 m \n    \u2264 10^5\n) \u2014 the number of vertices in\nthe graph and desirable length of the palindrome. Each of the next \n    n\n\nlines contains \n    n\n characters. The \n    j\n-th character of the \n    i\n-th\nline describes the character on the edge that is going from node \n    i\n to\nnode \n    j\n. Every character is either 'a' or 'b' if \n    i \n    \u2260 j\n, or '*'\nif \n    i = j\n, since the graph doesn't contain self-loops. It's guaranteed\nthat the sum of \n    n\n over test cases doesn't exceed \n    1000\n and the sum\nof \n    m\n doesn't exceed \n    10^5\n. Output For each test case, if it is\npossible to find such path, print \"YES\" and the path itself as a sequence of\n\n    m + 1\n integers: indices of vertices in the path in the appropriate\norder. If there are several valid paths, print any of them. Otherwise, (if\nthere is no answer) print \"NO\". Example Input 5 3 1 *ba b*b ab* 3 3 *ba b*b\nab* 3 4 *ba b*b ab* 4 6 *aaa b*ba ab*a bba* 2 6 *a b* Output YES 1 2 YES 2 1 3\n2 YES 1 3 1 3 1 YES 1 2 1 3 4 1 4 NO Note The graph from the first three test\ncases is shown below: In the first test case, the answer sequence is\n\n    [1,2]\n which means that the path is: \n    \n\n    1 \n    \n    2\n\n    \n So the string that is obtained by the given path is b. In the second\ntest case, the answer sequence is \n    [2,1,3,2]\n which means that the path\nis: \n    \n\n    2 \n     1 \n     3\n    \n     2\n\n    \n So the string that is obtained by the given\npath is bab. In the third test case, the answer sequence is \n    [1,3,1,3,1]\n\nwhich means that the path is: \n    \n\n    1 \n     3\n    \n     1 \n     3\n    \n     1\n\n    \n So the string that is obtained by the given\npath is aaaa. The string obtained in the fourth test case is abaaba.\n\n",
        "cf_contest_id": 1481,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "graphs",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3 1\r\n*ba\r\nb*b\r\nab*\r\n3 3\r\n*ba\r\nb*b\r\nab*\r\n3 4\r\n*ba\r\nb*b\r\nab*\r\n4 6\r\n*aaa\r\nb*ba\r\nab*a\r\nbba*\r\n2 6\r\n*a\r\nb*\r\n",
                "YES\r\n1 2 \r\nYES\r\n1 2 1 2 \r\nYES\r\n3 1 2 3 1 \r\nYES\r\n1 2 3 1 2 3 1 \r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n3 4\r\n*aa\r\nb*a\r\nbb*\r\n",
                "YES\r\n3 1 2 3 1 \r\n"
            ]
        ]
    }
]