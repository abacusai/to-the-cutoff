[
    {
        "name": "Phoenix and Odometers",
        "description": "In Fire City, there are \n    n\n intersections and \n    m\n one-way roads. The\n\n    i\n-th road goes from intersection \n    a_i\n to \n    b_i\n and has length\n\n    l_i\n miles. There are \n    q\n cars that may only drive along those roads.\nThe \n    i\n-th car starts at intersection \n    v_i\n and has an odometer that\nbegins at \n    s_i\n, increments for each mile driven, and resets to \n    0\n\nwhenever it reaches \n    t_i\n. Phoenix has been tasked to drive cars along\nsome roads (possibly none) and return them to their initial intersection with\nthe odometer showing \n    0\n. For each car, please find if this is possible. A\ncar may visit the same road or intersection an arbitrary number of times. The\nodometers don't stop counting the distance after resetting, so odometers may\nalso be reset an arbitrary number of times. Input The first line of the input\ncontains two integers \n    n\n and \n    m\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7\n    10^5\n; \n    1 \n    \u2264 m \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of intersections\nand the number of roads, respectively. Each of the next \n    m\n lines contain\nthree integers \n    a_i\n, \n    b_i\n, and \n    l_i\n (\n    1 \n    \u2264 a_i, b_i \n    \u2264\n    n\n; \n    a_i \n    \u2260 b_i\n; \n    1 \n    \u2264 l_i \n    \u2264 10^9\n) \u2014 the information\nabout the \n    i\n-th road. The graph is not necessarily connected. It is\nguaranteed that between any two intersections, there is at most one road for\neach direction. The next line contains an integer \n    q\n (\n    1 \n    \u2264 q \n    \u2264\n    2 \n    \u00b7 10^5\n) \u2014 the number of cars. Each of the next \n    q\n lines\ncontains three integers \n    v_i\n, \n    s_i\n, and \n    t_i\n (\n    1 \n    \u2264 v_i\n    \n    \u2264 n\n; \n    0 \n    \u2264 s_i < t_i \n    \u2264 10^9\n) \u2014 the initial intersection of\nthe \n    i\n-th car, the initial number on the \n    i\n-th odometer, and the\nnumber at which the \n    i\n-th odometer resets, respectively. Output Print\n\n    q\n answers. If the \n    i\n-th car's odometer may be reset to \n    0\n by\ndriving through some roads (possibly none) and returning to its starting\nintersection \n    v_i\n, print YES. Otherwise, print NO. Examples Input 4 4 1 2\n1 2 3 1 3 1 2 1 4 3 3 1 1 3 1 2 4 4 0 1 Output YES NO YES Input 4 5 1 2 1 2 3\n1 3 1 2 1 4 1 4 3 2 2 1 2 4 4 3 5 Output YES YES Note The illustration for the\nfirst example is below: In the first query, Phoenix can drive through the\nfollowing cities: \n    1\n \n    \u2192\n \n    2\n \n    \u2192\n\n\n    3\n \n    \u2192\n \n    1\n \n    \u2192\n \n    2\n\n\n    \u2192\n \n    3\n \n    \u2192\n \n    1\n. The odometer will\nhave reset \n    3\n times, but it displays \n    0\n at the end. In the second\nquery, we can show that there is no way to reset the odometer to \n    0\n and\nreturn to intersection \n    1\n. In the third query, the odometer already\ndisplays \n    0\n, so there is no need to drive through any roads. Below is the\nillustration for the second example:\n\n",
        "cf_contest_id": 1515,
        "cf_index": "G",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graphs",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 4\r\n1 2 1\r\n2 3 1\r\n3 1 2\r\n1 4 3\r\n3\r\n1 1 3\r\n1 2 4\r\n4 0 1\r\n",
                "YES\r\nNO\r\nYES\r\n"
            ],
            [
                "4 5\r\n1 2 1\r\n2 3 1\r\n3 1 2\r\n1 4 1\r\n4 3 2\r\n2\r\n1 2 4\r\n4 3 5\r\n",
                "YES\r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1\r\n2 1 1\r\n1\r\n2 1 2\r\n",
                "NO\r\n"
            ]
        ]
    }
]