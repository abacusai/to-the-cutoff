[
    {
        "name": "Neural Network country",
        "description": "Due to the recent popularity of the Deep learning new countries are starting\nto look like Neural Networks. That is, the countries are being built deep with\nmany layers, each layer possibly having many cities. They also have one entry,\nand one exit point. There are exactly L layers, each having N cities. Let us\nlook at the two adjacent layers L1 and L2. Each city from the layer L1 is\nconnected to each city from the layer L2 with the traveling cost cij for , and\neach pair of adjacent layers has the same cost in between their cities as any\nother pair (they just stacked the same layers, as usual). Also, the traveling\ncosts to each city from the layer L2 are same for all cities in the L1, that\nis cij is the same for , and fixed j. Doctor G. needs to speed up his\ncomputations for this country so he asks you to find the number of paths he\ncan take from entry to exit point such that his traveling cost is divisible by\ngiven number M. Input The first line of input contains N (1 \u2264 N \u2264 10^6), L (2\n\u2264 L \u2264 10^5) and M (2 \u2264 M \u2264 100), the number of cities in each layer, the\nnumber of layers and the number that travelling cost should be divisible by,\nrespectively. Second, third and fourth line contain N integers each denoting\ncosts 0 \u2264 cost \u2264 M from entry point to the first layer, costs between adjacent\nlayers as described above, and costs from the last layer to the exit point.\nOutput Output a single integer, the number of paths Doctor G. can take which\nhave total cost divisible by M, modulo 10^9 + 7. Example Input 2 3 13 4 6 2 1\n3 4 Output 2 Note This is a country with 3 layers, each layer having 2 cities.\nPaths , and are the only paths having total cost divisible by 13. Notice that\ninput edges for layer cities have the same cost, and that they are same for\nall layers.\n\n",
        "cf_contest_id": 852,
        "cf_index": "B",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "matrices"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 3 13\r\n4 6\r\n2 1\r\n3 4\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 4 5\r\n1 1\r\n1 1\r\n1 1\r\n",
                "16\r\n"
            ],
            [
                "1 1234 5\r\n1\r\n1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "3 2 2\r\n0 1 0\r\n0 0 1\r\n1 1 0\r\n",
                "3\r\n"
            ],
            [
                "5 4 3\r\n2 1 0 1 2\r\n0 1 2 1 0\r\n1 2 1 0 2\r\n",
                "209\r\n"
            ],
            [
                "4 4 4\r\n0 1 3 2\r\n1 2 0 3\r\n2 3 1 0\r\n",
                "64\r\n"
            ]
        ]
    }
]