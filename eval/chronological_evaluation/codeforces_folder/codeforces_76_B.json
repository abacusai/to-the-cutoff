[
    {
        "name": "Mice",
        "description": "Modern researches has shown that a flock of hungry mice searching for a piece\nof cheese acts as follows: if there are several pieces of cheese then each\nmouse chooses the closest one. After that all mice start moving towards the\nchosen piece of cheese. When a mouse or several mice achieve the destination\npoint and there is still a piece of cheese in it, they eat it and become well-\nfed. Each mice that reaches this point after that remains hungry. Moving\nspeeds of all mice are equal. If there are several ways to choose closest\npieces then mice will choose it in a way that would minimize the number of\nhungry mice. To check this theory scientists decided to conduct an experiment.\nThey located N mice and M pieces of cheese on a cartesian plane where all mice\nare located on the line y = Y0 and all pieces of cheese \u2014 on another line y =\nY1. To check the results of the experiment the scientists need a program which\nsimulates the behavior of a flock of hungry mice. Write a program that\ncomputes the minimal number of mice which will remain hungry, i.e. without\ncheese. Input The first line of the input contains four integer numbers N (1 \u2264\nN \u2264 10^5), M (0 \u2264 M \u2264 10^5), Y0 (0 \u2264 Y0 \u2264 10^7), Y1 (0 \u2264 Y1 \u2264 10^7, Y0 \u2260 Y1).\nThe second line contains a strictly increasing sequence of N numbers \u2014 x\ncoordinates of mice. Third line contains a strictly increasing sequence of M\nnumbers \u2014 x coordinates of cheese. All coordinates are integers and do not\nexceed 10^7 by absolute value. Output The only line of output should contain\none number \u2014 the minimal number of mice which will remain without cheese.\nExamples Input 3 2 0 2 0 1 3 2 5 Output 1 Note All the three mice will choose\nthe first piece of cheese. Second and third mice will eat this piece. The\nfirst one will remain hungry, because it was running towards the same piece,\nbut it was late. The second piece of cheese will remain uneaten.\n\n",
        "cf_contest_id": 76,
        "cf_index": "B",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "two pointers"
        ],
        "time_limit_seconds": 0.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2 0 2\r\n0 1 3\r\n2 5\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "7 11 10 20\r\n6 18 32 63 66 68 87\r\n6 8 15 23 25 41 53 59 60 75 90\r\n",
                "1\r\n"
            ],
            [
                "13 17 14 1\r\n6 9 10 12 17 25 91 100 118 136 145 163 172\r\n0 1 2 3 4 10 12 13 16 17 19 22 26 27 28 109 154\r\n",
                "4\r\n"
            ],
            [
                "19 23 13 11\r\n3 6 7 15 21 22 23 33 35 37 40 44 79 86 100 114 121 135 142\r\n2 3 5 6 7 14 15 17 18 19 20 22 25 27 28 34 36 38 39 41 42 93 128\r\n",
                "4\r\n"
            ],
            [
                "20 18 1 2\r\n-9999944 -9999861 -9999850 -9999763 -9999656 -9999517 -9999375 -9999275 -9999203 -9999080 -9998988 -9998887 -9998714 -9998534 -9998475 -9998352 -9998164 -9998016 -9998002 -9997882\r\n-9999976 -9999912 -9999788 -9999738 -9999574 -9999460 -9999290 -9999260 -9999146 -9999014 -9998962 -9998812 -9998616 -9998452 -9998252 -9998076 -9997928 -9997836\r\n",
                "2\r\n"
            ]
        ]
    }
]