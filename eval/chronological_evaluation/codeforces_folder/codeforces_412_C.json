[
    {
        "name": "Pattern",
        "description": "Developers often face with regular expression patterns. A pattern is usually\ndefined as a string consisting of characters and metacharacters that sets the\nrules for your search. These patterns are most often used to check whether a\nparticular string meets the certain rules. In this task, a pattern will be a\nstring consisting of small English letters and question marks ('?'). The\nquestion mark in the pattern is a metacharacter that denotes an arbitrary\nsmall letter of the English alphabet. We will assume that a string matches the\npattern if we can transform the string into the pattern by replacing the\nquestion marks by the appropriate characters. For example, string aba matches\npatterns: ???, ??a, a?a, aba. Programmers that work for the R1 company love\npuzzling each other (and themselves) with riddles. One of them is as follows:\nyou are given n patterns of the same length, you need to find a pattern that\ncontains as few question marks as possible, and intersects with each of the\ngiven patterns. Two patterns intersect if there is a string that matches both\nthe first and the second pattern. Can you solve this riddle? Input The first\nline contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of patterns. Next\nn lines contain the patterns. It is guaranteed that the patterns can only\nconsist of small English letters and symbols '?'. All patterns are non-empty\nand have the same length. The total length of all the patterns does not exceed\n10^5 characters. Output In a single line print the answer to the problem \u2014 the\npattern with the minimal number of signs '?', which intersects with each of\nthe given ones. If there are several answers, print any of them. Examples\nInput 2 ?ab ??b Output xab Input 2 a b Output ? Input 1 ?a?b Output cacb Note\nConsider the first example. Pattern xab intersects with each of the given\npatterns. Pattern ??? also intersects with each of the given patterns, but it\ncontains more question signs, hence it is not an optimal answer. Clearly, xab\nis the optimal answer, because it doesn't contain any question sign. There are\na lot of other optimal answers, for example: aab, bab, cab, dab and so on.\n\n",
        "cf_contest_id": 412,
        "cf_index": "C",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n?ab\r\n??b\r\n",
                "aab"
            ],
            [
                "2\r\na\r\nb\r\n",
                "?"
            ],
            [
                "1\r\n?a?b\r\n",
                "aaab"
            ]
        ],
        "private_cases": [
            [
                "1\r\n?\r\n",
                "a"
            ],
            [
                "3\r\nabacaba\r\nabacaba\r\nabacaba\r\n",
                "abacaba"
            ],
            [
                "3\r\nabc?t\r\n?bc?z\r\nab??t\r\n",
                "abca?"
            ],
            [
                "4\r\nabc\r\ndef\r\n???\r\nxyz\r\n",
                "???"
            ],
            [
                "2\r\n?????\r\n?????\r\n",
                "aaaaa"
            ],
            [
                "2\r\na\r\na\r\n",
                "a"
            ],
            [
                "3\r\nabc\r\n???\r\naxc\r\n",
                "a?c"
            ],
            [
                "1\r\n?m??x?xxexxx?xxmxx??\r\n",
                "amaaxaxxexxxaxxmxxaa"
            ],
            [
                "2\r\nhszhh?zszs\r\nhhzhz?zzhs\r\n",
                "h?zh?az??s"
            ],
            [
                "3\r\neddzde\r\needded\r\nzdde?z\r\n",
                "??d???"
            ],
            [
                "4\r\nff?o?\r\nfk?of\r\nk?kof\r\nfk?oo\r\n",
                "??ko?"
            ],
            [
                "5\r\nyigi\r\ne?gi\r\niig?\r\n?eg?\r\n??gi\r\n",
                "??gi"
            ],
            [
                "100\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\nz\r\n",
                "z"
            ],
            [
                "100\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\nb?\r\n",
                "ba"
            ],
            [
                "1\r\nq\r\n",
                "q"
            ],
            [
                "2\r\n?\r\n?\r\n",
                "a"
            ],
            [
                "2\r\n?\r\na\r\n",
                "a"
            ],
            [
                "2\r\n?\r\nb\r\n",
                "b"
            ],
            [
                "3\r\n?\r\na\r\na\r\n",
                "a"
            ],
            [
                "3\r\na\r\n?\r\na\r\n",
                "a"
            ],
            [
                "3\r\na\r\nb\r\n?\r\n",
                "?"
            ],
            [
                "3\r\n?\r\na\r\nb\r\n",
                "?"
            ],
            [
                "3\r\nb\r\n?\r\na\r\n",
                "?"
            ],
            [
                "2\r\n???\r\naaa\r\n",
                "aaa"
            ],
            [
                "2\r\n??\r\nss\r\n",
                "ss"
            ]
        ]
    }
]