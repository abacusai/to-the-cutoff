[
    {
        "name": "Red-Black Pepper",
        "description": "Monocarp is going to host a party for his friends. He prepared \n    n\n dishes\nand is about to serve them. First, he has to add some powdered pepper to each\nof them \u2014 otherwise, the dishes will be pretty tasteless. The \n    i\n-th dish\nhas two values \n    a_i\n and \n    b_i\n \u2014 its tastiness with red pepper added\nor black pepper added, respectively. Monocarp won't add both peppers to any\ndish, won't add any pepper multiple times, and won't leave any dish without\nthe pepper added. Before adding the pepper, Monocarp should first purchase the\nsaid pepper in some shop. There are \n    m\n shops in his local area. The\n\n    j\n-th of them has packages of red pepper sufficient for \n    x_j\n\nservings and packages of black pepper sufficient for \n    y_j\n servings.\nMonocarp goes to exactly one shop, purchases multiple (possibly, zero)\npackages of each pepper in such a way that each dish will get the pepper added\nonce, and no pepper is left. More formally, if he purchases \n    x\n red pepper\npackages and \n    y\n black pepper packages, then \n    x\n and \n    y\n should be\nnon-negative and \n    x \n    \u00b7 x_j + y \n    \u00b7 y_j\n should be equal to\n\n    n\n. For each shop, determine the maximum total tastiness of the dishes\nafter Monocarp buys pepper packages only in this shop and adds the pepper to\nthe dishes. If it's impossible to purchase the packages in the said way, print\n-1. Input The first line contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    3 \n    \u00b7 10^5\n) \u2014 the number of dishes. The \n    i\n-th of the next \n    n\n\nlines contains two integers \n    a_i\n and \n    b_i\n (\n    1 \n    \u2264 a_i, b_i \n    \u2264\n    10^9\n) \u2014 the tastiness of the \n    i\n-th dish with red pepper added or black\npepper added, respectively. The next line contains a single integer \n    m\n\n(\n    1 \n    \u2264 m \n    \u2264 3 \n    \u00b7 10^5\n) \u2014 the number of shops. The \n    j\n-th\nof the next \n    m\n lines contains two integers \n    x_j\n and \n    y_j\n (\n    1\n    \n    \u2264 x_j, y_j \n    \u2264 n\n) \u2014 the number of servings the red and the black\npepper packages are sufficient for in the \n    j\n-th shop, respectively.\nOutput Print \n    m\n integers. For each shop, print the maximum total\ntastiness of the dishes after Monocarp buys pepper packages only in this shop\nand adds the pepper to the dishes. If it's impossible to purchase the packages\nso that each dish will get the pepper added once and no pepper is left, print\n-1. Examples Input 3 5 10 100 50 2 2 4 2 3 1 1 3 2 2 2 Output 62 112 107 -1\nInput 10 3 1 2 3 1 1 2 1 6 3 1 4 4 3 1 3 5 3 5 4 10 8 10 9 3 1 4 2 5 8 3 3 5 1\n6 7 2 6 7 3 1 Output 26 -1 36 30 -1 26 34 26 -1 36 Note Consider the first\nexample. In the first shop, Monocarp can only buy \n    0\n red pepper packages\nand \n    1\n black pepper package. Black pepper added to all dishes will sum up\nto \n    10 + 50 + 2 = 62\n. In the second shop, Monocarp can buy any number of\nred and black pepper packages: \n    0\n and \n    3\n, \n    1\n and \n    2\n,\n\n    2\n and \n    1\n or \n    3\n and \n    0\n. The optimal choice turns out to be\neither \n    1\n and \n    2\n or \n    2\n and \n    1\n. Monocarp can add black\npepper to the first dish, red pepper to the second dish and any pepper to the\nthird dish, the total is \n    10 + 100 + 2 = 112\n. In the third shop, Monocarp\ncan only buy \n    1\n red pepper package and \n    0\n black pepper packages. Red\npepper added to all dishes will sum up to \n    5 + 100 + 2 = 107\n. In the\nfourth shop, Monocarp can only buy an even total number of packages. Since\n\n    n\n is odd, it's impossible to get exactly \n    n\n packages. Thus, the\nanswer is \n    -1\n.\n\n",
        "cf_contest_id": 1728,
        "cf_index": "E",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "greedy",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n5 10\r\n100 50\r\n2 2\r\n4\r\n2 3\r\n1 1\r\n3 2\r\n2 2\r\n",
                "62\r\n112\r\n107\r\n-1\r\n"
            ],
            [
                "10\r\n3 1\r\n2 3\r\n1 1\r\n2 1\r\n6 3\r\n1 4\r\n4 3\r\n1 3\r\n5 3\r\n5 4\r\n10\r\n8 10\r\n9 3\r\n1 4\r\n2 5\r\n8 3\r\n3 5\r\n1 6\r\n7 2\r\n6 7\r\n3 1\r\n",
                "26\r\n-1\r\n36\r\n30\r\n-1\r\n26\r\n34\r\n26\r\n-1\r\n36\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n1 9\r\n2 6\r\n6 1\r\n2 9\r\n7 2\r\n5\r\n4 5\r\n3 2\r\n2 5\r\n4 1\r\n2 5\r\n",
                "27\r\n33\r\n27\r\n27\r\n27\r\n"
            ],
            [
                "10\r\n33 48\r\n77 96\r\n59 67\r\n15 35\r\n86 14\r\n46 27\r\n41 79\r\n5 29\r\n90 89\r\n97 43\r\n10\r\n4 1\r\n2 2\r\n1 6\r\n10 10\r\n1 3\r\n9 3\r\n5 7\r\n1 6\r\n6 5\r\n7 6\r\n",
                "673\r\n673\r\n673\r\n549\r\n673\r\n-1\r\n549\r\n673\r\n527\r\n-1\r\n"
            ]
        ]
    }
]