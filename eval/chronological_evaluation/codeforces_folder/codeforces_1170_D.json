[
    {
        "name": "Decoding of Integer Sequences",
        "description": "Polycarp is developing a method for transmitting \n    n\n integer sequences\nover a network. This method should support the transmission of an arbitrary\nnumber of integer sequences; sequences can have different lengths. The\nsequences contain arbitrary non-negative integers. Polycarp developed the\nfollowing encoding procedure: We assume that the sequences are numbered from\n\n    1\n to \n    n\n. We add a special terminating marker to each sequence at\nthe end, an element equal to -1. The encoding result is a new single sequence\nthat contains all the elements of the specified \n    n\n in a special order:\nfirst, add to the result of coding all the first elements of the sequences (in\nthe order from the \n    1\n-st to the \n    n\n-th), then all the second elements\n(in the order from the \n    1\n-st to the \n    n\n-th) and so on, if the\nsequence does not have the corresponding element, then it is simply skipped.\nThe process ends when all elements of all sequences are added. For example, if\nyou want to encode three sequences \n    [3, 1, 4]\n, \n    [2, 7]\n and \n    [1, 2,\n    3, 4]\n, then the sequence of actions will be as follows: we modify all three\nsequences by appending -1: \n    [3, 1, 4, -1]\n, \n    [2, 7, -1]\n and \n    [1, 2,\n    3, 4, -1]\n; we write out all the first elements, we get \n    [3, 2, 1]\n;\nthen write down all the second elements, we get \n    [3, 2, 1, 1, 7, 2]\n; then\nwrite down all the third elements, we get \n    [3, 2, 1, 1, 7, 2, 4, -1, 3]\n;\nthen write down all fourth elements, get \n    [3, 2, 1, 1, 7, 2, 4, -1, 3, -1,\n    4]\n (note that the second sequence has already ended); then write down all\nthe fifth elements, we get \n    [3, 2, 1, 1, 7, 2, 4, -1, 3, -1, 4, -1]\n (note\nthat the first and second sequences have already ended); all the sequences are\nended now, and the encoding process is finished; the encoding result is:\n\n    [3, 2, 1, 1, 7, 2, 4, -1, 3, -1, 4, -1]\n. Your task is to implement\ndecoding by a given encoding result. Input The first line contains integer\nnumber \n    m\n (\n    1 \n    \u2264 m \n    \u2264 3\n    \u00b710^5\n), denoting the length of\nthe encoding result. The second line contains the result of encoding as a\nsequence of integers \n    b_1, b_2, \n    \u2026, b_m\n (\n    -1 \n    \u2264 b_i \n    \u2264\n    100\n). It is guaranteed that in the initial sequences before encoding\ncontains only non-negative integers from \n    0\n to \n    100\n, that you are in\nfact given the result of correct encoding (in other words, it is guaranteed\nthat the answer exists). It is possible that one or more initial sequences\nwere empty before encoding. Output Print \n    n\n, where \n    n\n is the number\nof encoded sequences. Then print \n    n\n lines in the format \n    k_i, a_i1,\n    a_i2, \n    \u2026, a_ik_i\n, where \n    k_i\n is the length of the \n    i\n-th\nsequence, and \n    a_i1, a_i2, \n    \u2026, a_ik_i\n are its elements.\nSeparate the numbers in the lines with spaces. Please note that the encoding\nprocedure is such that every possible encoding result can be decoded in only\none way. Examples Input 12 3 2 1 1 7 2 4 -1 3 -1 4 -1 Output 3 3 3 1 4 2 2 7 4\n1 2 3 4 Input 6 2 -1 2 -1 3 -1 Output 3 1 2 0 2 2 3\n\n",
        "cf_contest_id": 1170,
        "cf_index": "D",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "12\r\n3 2 1 1 7 2 4 -1 3 -1 4 -1\r\n",
                "3\r\n3 3 1 4\r\n2 2 7\r\n4 1 2 3 4\r\n"
            ],
            [
                "6\r\n2 -1 2 -1 3 -1\r\n",
                "3\r\n1 2\r\n0 \r\n2 2 3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n-1\r\n",
                "1\r\n0 \r\n"
            ],
            [
                "2\r\n100 -1\r\n",
                "1\r\n1 100\r\n"
            ],
            [
                "2\r\n-1 -1\r\n",
                "2\r\n0 \r\n0 \r\n"
            ],
            [
                "3\r\n-1 1 -1\r\n",
                "2\r\n0 \r\n1 1\r\n"
            ],
            [
                "3\r\n1 -1 -1\r\n",
                "2\r\n1 1\r\n0 \r\n"
            ],
            [
                "4\r\n-1 -1 -1 -1\r\n",
                "4\r\n0 \r\n0 \r\n0 \r\n0 \r\n"
            ],
            [
                "13\r\n65 75 94 81 -1 86 56 12 -1 22 -1 1 -1\r\n",
                "4\r\n1 65\r\n2 75 86\r\n4 94 56 22 1\r\n2 81 12\r\n"
            ]
        ]
    }
]