[
    {
        "name": "Lemmings",
        "description": "As you know, lemmings like jumping. For the next spectacular group jump n\nlemmings gathered near a high rock with k comfortable ledges on it. The first\nledge is situated at the height of h meters, the second one is at the height\nof 2h meters, and so on (the i-th ledge is at the height of i\u00b7h meters). The\nlemmings are going to jump at sunset, and there's not much time left. Each\nlemming is characterized by its climbing speed of vi meters per minute and its\nweight mi. This means that the i-th lemming can climb to the j-th ledge in\nminutes. To make the jump beautiful, heavier lemmings should jump from higher\nledges: if a lemming of weight mi jumps from ledge i, and a lemming of weight\nmj jumps from ledge j (for i < j), then the inequation mi \u2264 mj should be\nfulfilled. Since there are n lemmings and only k ledges (k \u2264 n), the k\nlemmings that will take part in the jump need to be chosen. The chosen\nlemmings should be distributed on the ledges from 1 to k, one lemming per\nledge. The lemmings are to be arranged in the order of non-decreasing weight\nwith the increasing height of the ledge. In addition, each lemming should have\nenough time to get to his ledge, that is, the time of his climb should not\nexceed t minutes. The lemmings climb to their ledges all at the same time and\nthey do not interfere with each other. Find the way to arrange the lemmings'\njump so that time t is minimized. Input The first line contains space-\nseparated integers n, k and h (1 \u2264 k \u2264 n \u2264 10^5, 1 \u2264 h \u2264 10^4) \u2014 the total\nnumber of lemmings, the number of ledges and the distance between adjacent\nledges. The second line contains n space-separated integers m1, m2, ..., mn (1\n\u2264 mi \u2264 10^9), where mi is the weight of i-th lemming. The third line contains\nn space-separated integers v1, v2, ..., vn (1 \u2264 vi \u2264 10^9), where vi is the\nspeed of i-th lemming. Output Print k different numbers from 1 to n \u2014 the\nnumbers of the lemmings who go to ledges at heights h, 2h, ..., kh,\ncorrespondingly, if the jump is organized in an optimal way. If there are\nmultiple ways to select the lemmings, pick any of them. Examples Input 5 3 2 1\n2 3 2 1 1 2 1 2 10 Output 5 2 4 Input 5 3 10 3 4 3 2 1 5 4 3 2 1 Output 4 3 1\nNote Let's consider the first sample case. The fifth lemming (speed 10) gets\nto the ledge at height 2 in minutes; the second lemming (speed 2) gets to the\nledge at height 4 in 2 minutes; the fourth lemming (speed 2) gets to the ledge\nat height 6 in 3 minutes. All lemmings manage to occupy their positions in 3\nminutes.\n\n",
        "cf_contest_id": 163,
        "cf_index": "B",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "binary search"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 3 2\r\n1 2 3 2 1\r\n1 2 1 2 10\r\n",
                "5 4 2 "
            ],
            [
                "5 3 10\r\n3 4 3 2 1\r\n5 4 3 2 1\r\n",
                "4 3 1 "
            ]
        ],
        "private_cases": [
            [
                "10 5 2\r\n2 3 3 2 3 2 1 1 2 3\r\n2 2 2 2 3 3 3 2 2 1\r\n",
                "9 4 1 6 5 "
            ],
            [
                "50 25 3\r\n1 3 1 2 1 2 1 2 3 1 1 2 2 3 3 1 1 3 2 3 2 1 2 1 2 1 3 2 1 3 3 3 2 3 1 1 1 2 3 3 1 3 1 2 2 2 3 1 3 1\r\n1 2 2 3 3 1 3 2 2 2 2 2 2 3 3 2 1 2 3 2 3 2 1 3 2 1 3 3 3 3 2 3 2 2 1 3 3 3 2 3 1 3 2 2 2 1 3 2 2 2\r\n",
                "29 7 23 6 46 8 33 25 44 12 45 13 28 4 38 21 19 14 15 47 27 30 32 42 40 "
            ],
            [
                "10 9 1\r\n2 3 4 1 1 1 1 1 1 1\r\n79999993 1000000000 89999992 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\r\n",
                "10 9 8 7 6 5 4 1 2 "
            ],
            [
                "10 9 1\r\n2 3 4 1 1 1 1 1 1 1\r\n98765424 1000000000 111111103 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\r\n",
                "9 8 7 6 5 4 1 2 3 "
            ],
            [
                "2 1 1\r\n5 6\r\n100000000 1000000000\r\n",
                "2 "
            ],
            [
                "2 1 1\r\n1 1\r\n1000000000 999999999\r\n",
                "1 "
            ],
            [
                "2 1 1\r\n1 2\r\n1000000000 999999999\r\n",
                "1 "
            ],
            [
                "2 1 1\r\n1 1\r\n500000000 1000000000\r\n",
                "2 "
            ],
            [
                "2 1 1\r\n1 2\r\n500000000 1000000000\r\n",
                "2 "
            ],
            [
                "3 3 1\r\n1 1 1\r\n1 1 1\r\n",
                "3 2 1 "
            ],
            [
                "2 1 1\r\n1 1\r\n999999999 1000000000\r\n",
                "2 "
            ],
            [
                "2 1 1\r\n1 2\r\n1000000000 99999999\r\n",
                "1 "
            ],
            [
                "2 1 1\r\n1 2\r\n1000000000 900000000\r\n",
                "1 "
            ]
        ]
    }
]