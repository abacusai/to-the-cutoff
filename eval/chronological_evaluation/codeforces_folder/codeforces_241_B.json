[
    {
        "name": "Friends",
        "description": "You have n friends and you want to take m pictures of them. Exactly two of\nyour friends should appear in each picture and no two pictures should contain\nthe same pair of your friends. So if you have n = 3 friends you can take 3\ndifferent pictures, each containing a pair of your friends. Each of your\nfriends has an attractiveness level which is specified by the integer number\nai for the i-th friend. You know that the attractiveness of a picture\ncontaining the i-th and the j-th friends is equal to the exclusive-or (xor\noperation) of integers ai and aj. You want to take pictures in a way that the\ntotal sum of attractiveness of your pictures is maximized. You have to\ncalculate this value. Since the result may not fit in a 32-bit integer number,\nprint it modulo 1000000007 (10^9 + 7). Input The first line of input contains\ntwo integers n and m \u2014 the number of friends and the number of pictures that\nyou want to take. Next line contains n space-separated integers a1, a2, ...,\nan (0 \u2264 ai \u2264 10^9) \u2014 the values of attractiveness of the friends. Output The\nonly line of output should contain an integer \u2014 the optimal total sum of\nattractiveness of your pictures. Examples Input 3 1 1 2 3 Output 3 Input 3 2 1\n2 3 Output 5 Input 3 3 1 2 3 Output 6\n\n",
        "cf_contest_id": 241,
        "cf_index": "B",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "bitmasks",
            "data structures",
            "math"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 1\r\n1 2 3\r\n",
                "3\r\n"
            ],
            [
                "3 2\r\n1 2 3\r\n",
                "5\r\n"
            ],
            [
                "3 3\r\n1 2 3\r\n",
                "6\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 0\r\n1 2 3\r\n",
                "0\r\n"
            ],
            [
                "51 785\r\n255 192 147 264 213 111 175 75 213 44 106 112 61 209 181 105 217 21 45 160 15 134 232 49 174 96 157 195 205 52 71 71 74 146 26 151 168 198 244 71 222 230 269 15 103 185 255 151 252 129 62\r\n",
                "163200\r\n"
            ],
            [
                "39 510\r\n381 71 235 164 379 384 342 2 44 173 379 270 295 274 260 410 158 220 46 30 375 203 280 11 324 377 212 124 177 293 208 33 90 187 244 398 287 104 57\r\n",
                "171016\r\n"
            ],
            [
                "98 3869\r\n156 222 507 831 617 746 781 626 380 214 443 659 674 339 476 579 330 194 263 117 582 503 280 46 779 825 108 69 748 447 672 164 418 500 213 68 454 51 175 180 853 394 593 19 299 123 865 273 456 822 522 754 13 32 245 650 191 399 526 833 387 651 773 207 288 270 713 257 192 196 142 690 174 396 904 82 24 564 685 418 590 192 887 373 449 675 159 369 68 707 674 11 526 313 448 526 950 526\r\n",
                "2293416\r\n"
            ],
            [
                "49 893\r\n36 179 17 81 90 9 120 29 77 4 50 52 9 50 10 53 169 5 104 162 71 175 76 187 157 124 122 58 68 176 95 117 26 30 127 4 2 177 51 181 27 150 51 173 55 156 7 69 16\r\n",
                "119516\r\n"
            ],
            [
                "54 1245\r\n262 294 143 21 21 242 96 288 139 181 36 149 298 264 242 113 280 257 16 72 302 91 238 221 109 116 221 197 191 19 42 112 190 216 5 118 235 244 187 91 261 186 122 72 159 260 1 255 292 274 49 79 102 24\r\n",
                "301673\r\n"
            ],
            [
                "22 226\r\n95 63 136 4 67 57 122 135 26 71 73 1 130 65 70 55 56 91 133 134 91 38\r\n",
                "25088\r\n"
            ],
            [
                "64 1898\r\n253 193 161 165 124 78 152 253 176 52 210 55 266 106 194 143 38 54 47 122 143 25 151 131 73 206 37 49 131 140 117 215 168 174 228 46 156 143 247 155 142 117 171 167 40 60 47 99 186 26 131 220 42 255 74 63 244 229 241 165 11 220 39 46\r\n",
                "268640\r\n"
            ],
            [
                "32 57\r\n698 577 934 249 117 805 502 429 732 201 555 557 494 248 852 889 2 630 847 829 776 516 904 266 751 222 345 80 338 941 660 753\r\n",
                "55131\r\n"
            ],
            [
                "20 137\r\n33 106 258 429 266 464 432 305 427 477 135 444 201 374 334 573 584 20 96 341\r\n",
                "62845\r\n"
            ],
            [
                "45 542\r\n530 367 623 640 2 233 205 369 342 534 387 35 84 488 2 574 152 158 439 598 427 225 554 341 246 503 19 362 577 440 571 154 522 366 243 4 629 50 334 549 356 158 475 266 430\r\n",
                "370638\r\n"
            ]
        ]
    }
]