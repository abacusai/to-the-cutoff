[
    {
        "name": "Heap Operations",
        "description": "Petya has recently learned data structure named \"Binary heap\". The heap he is\nnow operating with allows the following operations: put the given number into\nthe heap; get the value of the minimum element in the heap; extract the\nminimum element from the heap; Thus, at any moment of time the heap contains\nseveral integers (possibly none), some of them might be equal. In order to\nbetter learn this data structure Petya took an empty heap and applied some\noperations above to it. Also, he carefully wrote down all the operations and\ntheir results to his event log, following the format: insert x \u2014 put the\nelement with value x in the heap; getMin x \u2014 the value of the minimum element\ncontained in the heap was equal to x; removeMin \u2014 the minimum element was\nextracted from the heap (only one instance, if there were many). All the\noperations were correct, i.e. there was at least one element in the heap each\ntime getMin or removeMin operations were applied. While Petya was away for a\nlunch, his little brother Vova came to the room, took away some of the pages\nfrom Petya's log and used them to make paper boats. Now Vova is worried, if he\nmade Petya's sequence of operations inconsistent. For example, if one apply\noperations one-by-one in the order they are written in the event log, results\nof getMin operations might differ from the results recorded by Petya, and some\nof getMin or removeMin operations may be incorrect, as the heap is empty at\nthe moment they are applied. Now Vova wants to add some new operation records\nto the event log in order to make the resulting sequence of operations\ncorrect. That is, the result of each getMin operation is equal to the result\nin the record, and the heap is non-empty when getMin ad removeMin are applied.\nVova wants to complete this as fast as possible, as the Petya may get back at\nany moment. He asks you to add the least possible number of operation records\nto the current log. Note that arbitrary number of operations may be added at\nthe beginning, between any two other operations, or at the end of the log.\nInput The first line of the input contains the only integer n (1 \u2264 n \u2264 100\n000) \u2014 the number of the records left in Petya's journal. Each of the\nfollowing n lines describe the records in the current log in the order they\nare applied. Format described in the statement is used. All numbers in the\ninput are integers not exceeding 10^9 by their absolute value. Output The\nfirst line of the output should contain a single integer m \u2014 the minimum\npossible number of records in the modified sequence of operations. Next m\nlines should contain the corrected sequence of records following the format of\nthe input (described in the statement), one per line and in the order they are\napplied. All the numbers in the output should be integers not exceeding 10^9\nby their absolute value. Note that the input sequence of operations must be\nthe subsequence of the output sequence. It's guaranteed that there exists the\ncorrect answer consisting of no more than 1 000 000 operations. Examples Input\n2 insert 3 getMin 4 Output 4 insert 3 removeMin insert 4 getMin 4 Input 4\ninsert 1 insert 1 removeMin getMin 2 Output 6 insert 1 insert 1 removeMin\nremoveMin insert 2 getMin 2 Note In the first sample, after number 3 is\ninserted into the heap, the minimum number is 3. To make the result of the\nfirst getMin equal to 4 one should firstly remove number 3 from the heap and\nthen add number 4 into the heap. In the second sample case number 1 is\ninserted two times, so should be similarly removed twice.\n\n",
        "cf_contest_id": 681,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\ninsert 3\r\ngetMin 4\r\n",
                "4\r\ninsert 3\r\nremoveMin\r\ninsert 4\r\ngetMin 4\r\n"
            ],
            [
                "4\r\ninsert 1\r\ninsert 1\r\nremoveMin\r\ngetMin 2\r\n",
                "6\r\ninsert 1\r\ninsert 1\r\nremoveMin\r\nremoveMin\r\ninsert 2\r\ngetMin 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\ninsert 1\r\n",
                "1\r\ninsert 1\r\n"
            ],
            [
                "1\r\ngetMin 31\r\n",
                "2\r\ninsert 31\r\ngetMin 31\r\n"
            ],
            [
                "1\r\nremoveMin\r\n",
                "2\r\ninsert 1\r\nremoveMin\r\n"
            ],
            [
                "2\r\ninsert 2\r\ngetMin 2\r\n",
                "2\r\ninsert 2\r\ngetMin 2\r\n"
            ],
            [
                "2\r\ninsert 31\r\nremoveMin\r\n",
                "2\r\ninsert 31\r\nremoveMin\r\n"
            ],
            [
                "2\r\ngetMin 31\r\nremoveMin\r\n",
                "3\r\ninsert 31\r\ngetMin 31\r\nremoveMin\r\n"
            ],
            [
                "2\r\nremoveMin\r\ngetMin 31\r\n",
                "4\r\ninsert 1\r\nremoveMin\r\ninsert 31\r\ngetMin 31\r\n"
            ],
            [
                "8\r\ninsert 219147240\r\nremoveMin\r\ngetMin 923854124\r\nremoveMin\r\ngetMin -876779400\r\nremoveMin\r\ninsert 387686853\r\ngetMin 749998368\r\n",
                "12\r\ninsert 219147240\r\nremoveMin\r\ninsert 923854124\r\ngetMin 923854124\r\nremoveMin\r\ninsert -876779400\r\ngetMin -876779400\r\nremoveMin\r\ninsert 387686853\r\nremoveMin\r\ninsert 749998368\r\ngetMin 749998368\r\n"
            ],
            [
                "2\r\nremoveMin\r\ninsert 450653162\r\n",
                "3\r\ninsert 1\r\nremoveMin\r\ninsert 450653162\r\n"
            ],
            [
                "6\r\ninsert -799688192\r\ngetMin 491561656\r\nremoveMin\r\ninsert -805250162\r\ninsert -945439443\r\nremoveMin\r\n",
                "8\r\ninsert -799688192\r\nremoveMin\r\ninsert 491561656\r\ngetMin 491561656\r\nremoveMin\r\ninsert -805250162\r\ninsert -945439443\r\nremoveMin\r\n"
            ],
            [
                "9\r\ninsert 3\r\ninsert 4\r\ninsert 5\r\nremoveMin\r\ngetMin 3\r\nremoveMin\r\ngetMin 4\r\nremoveMin\r\ngetMin 5\r\n",
                "10\r\ninsert 3\r\ninsert 4\r\ninsert 5\r\nremoveMin\r\ninsert 3\r\ngetMin 3\r\nremoveMin\r\ngetMin 4\r\nremoveMin\r\ngetMin 5\r\n"
            ],
            [
                "9\r\ninsert 3\r\ninsert 4\r\ninsert 5\r\nremoveMin\r\ngetMin 5\r\nremoveMin\r\ngetMin 4\r\nremoveMin\r\ngetMin 3\r\n",
                "12\r\ninsert 3\r\ninsert 4\r\ninsert 5\r\nremoveMin\r\nremoveMin\r\ngetMin 5\r\nremoveMin\r\ninsert 4\r\ngetMin 4\r\nremoveMin\r\ninsert 3\r\ngetMin 3\r\n"
            ],
            [
                "1\r\ngetMin 0\r\n",
                "2\r\ninsert 0\r\ngetMin 0\r\n"
            ],
            [
                "3\r\ninsert 3\r\ninsert 4\r\ngetMin 4\r\n",
                "4\r\ninsert 3\r\ninsert 4\r\nremoveMin\r\ngetMin 4\r\n"
            ],
            [
                "3\r\ninsert 1\r\ninsert 2\r\ngetMin 2\r\n",
                "4\r\ninsert 1\r\ninsert 2\r\nremoveMin\r\ngetMin 2\r\n"
            ],
            [
                "3\r\ninsert -1\r\ninsert 0\r\ngetMin 0\r\n",
                "4\r\ninsert -1\r\ninsert 0\r\nremoveMin\r\ngetMin 0\r\n"
            ],
            [
                "2\r\ninsert 0\r\ngetMin 0\r\n",
                "2\r\ninsert 0\r\ngetMin 0\r\n"
            ],
            [
                "1\r\ninsert -1\r\n",
                "1\r\ninsert -1\r\n"
            ],
            [
                "3\r\ninsert 1\r\ninsert 0\r\ngetMin 1\r\n",
                "4\r\ninsert 1\r\ninsert 0\r\nremoveMin\r\ngetMin 1\r\n"
            ]
        ]
    }
]