[
    {
        "name": "Dima and Magic Guitar",
        "description": "Dima loves Inna very much. He decided to write a song for her. Dima has a\nmagic guitar with n strings and m frets. Dima makes the guitar produce sounds\nlike that: to play a note, he needs to hold one of the strings on one of the\nfrets and then pull the string. When Dima pulls the i-th string holding it on\nthe j-th fret the guitar produces a note, let's denote it as aij. We know that\nDima's guitar can produce k distinct notes. It is possible that some notes can\nbe produced in multiple ways. In other words, it is possible that aij = apq at\n(i, j) \u2260 (p, q). Dima has already written a song \u2014 a sequence of s notes. In\norder to play the song, you need to consecutively produce the notes from the\nsong on the guitar. You can produce each note in any available way. Dima\nunderstood that there are many ways to play a song and he wants to play it so\nas to make the song look as complicated as possible (try to act like Cobein).\nWe'll represent a way to play a song as a sequence of pairs (xi, yi) (1 \u2264 i \u2264\ns), such that the xi-th string on the yi-th fret produces the i-th note from\nthe song. The complexity of moving between pairs (x1, y1) and (x2, y2) equals\n+ . The complexity of a way to play a song is the maximum of complexities of\nmoving between adjacent pairs. Help Dima determine the maximum complexity of\nthe way to play his song! The guy's gotta look cool! Input The first line of\nthe input contains four integers n, m, k and s (1 \u2264 n, m \u2264 2000, 1 \u2264 k \u2264 9, 2\n\u2264 s \u2264 10^5). Then follow n lines, each containing m integers aij (1 \u2264 aij \u2264\nk). The number in the i-th row and the j-th column (aij) means a note that the\nguitar produces on the i-th string and the j-th fret. The last line of the\ninput contains s integers qi (1 \u2264 qi \u2264 k) \u2014 the sequence of notes of the song.\nOutput In a single line print a single number \u2014 the maximum possible\ncomplexity of the song. Examples Input 4 6 5 7 3 1 2 2 3 1 3 2 2 2 5 5 4 2 2 2\n5 3 3 2 2 1 4 3 2 3 1 4 1 5 1 Output 8 Input 4 4 9 5 4 7 9 5 1 2 1 7 8 3 4 9 5\n7 7 2 7 1 9 2 5 Output 4\n\n",
        "cf_contest_id": 366,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 6 5 7\r\n3 1 2 2 3 1\r\n3 2 2 2 5 5\r\n4 2 2 2 5 3\r\n3 2 2 1 4 3\r\n2 3 1 4 1 5 1\r\n",
                "8"
            ],
            [
                "4 4 9 5\r\n4 7 9 5\r\n1 2 1 7\r\n8 3 4 9\r\n5 7 7 2\r\n7 1 9 2 5\r\n",
                "4"
            ]
        ],
        "private_cases": [
            [
                "5 5 2 2\r\n2 2 2 1 2\r\n2 1 2 2 2\r\n2 2 2 2 2\r\n1 2 2 2 2\r\n2 2 2 2 1\r\n1 1\r\n",
                "6"
            ],
            [
                "5 5 2 2\r\n2 1 2 2 2\r\n2 2 2 2 2\r\n2 2 2 2 1\r\n2 2 2 2 2\r\n1 2 2 2 2\r\n1 1\r\n",
                "6"
            ],
            [
                "11 11 9 11\r\n1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 2 2 1\r\n1 1 1 1 1 1 1 1 3 1 1\r\n1 1 1 1 1 1 1 3 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 2 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1\r\n3 3 3 3 3 3 3 3 3 2 2\r\n",
                "14"
            ],
            [
                "1 10 9 5\r\n1 2 3 4 5 6 7 8 9 1\r\n1 1 9 2 3\r\n",
                "9"
            ],
            [
                "10 1 9 5\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n1\r\n1 1 9 2 3\r\n",
                "9"
            ]
        ]
    }
]