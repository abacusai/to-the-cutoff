[
    {
        "name": "Partial Virtual Trees",
        "description": "Kawashiro Nitori is a girl who loves competitive programming. One day she\nfound a rooted tree consisting of \n    n\n vertices. The root is vertex\n\n    1\n. As an advanced problem setter, she quickly thought of a problem.\nKawashiro Nitori has a vertex set \n    U=\n    \n    1,2,\n    \u2026,n\n. She's\ngoing to play a game with the tree and the set. In each operation, she will\nchoose a vertex set \n    T\n, where \n    T\n is a partial virtual tree of\n\n    U\n, and change \n    U\n into \n    T\n. A vertex set \n    S_1\n is a partial\nvirtual tree of a vertex set \n    S_2\n, if \n    S_1\n is a subset of \n    S_2\n,\n\n    S_1 \n    \u2260 S_2\n, and for all pairs of vertices \n    i\n and \n    j\n in\n\n    S_1\n, \n    LCA(i,j)\n is in \n    S_1\n, where\n\n    LCA(x,y)\n denotes the lowest common ancestor of vertices\n\n    x\n and \n    y\n on the tree. Note that a vertex set can have many\ndifferent partial virtual trees. Kawashiro Nitori wants to know for each\npossible \n    k\n, if she performs the operation exactly \n    k\n times, in how\nmany ways she can make \n    U=\n    \n    1\n in the end? Two ways are considered\ndifferent if there exists an integer \n    z\n (\n    1 \n    \u2264 z \n    \u2264 k\n) such\nthat after \n    z\n operations the sets \n    U\n are different. Since the answer\ncould be very large, you need to find it modulo \n    p\n. It's guaranteed that\n\n    p\n is a prime number. Input The first line contains two integers \n    n\n\nand \n    p\n (\n    2 \n    \u2264 n \n    \u2264 2000\n, \n    10^8 + 7 \n    \u2264 p \n    \u2264 10^9+9\n).\nIt's guaranteed that \n    p\n is a prime number. Each of the next \n    n-1\n\nlines contains two integers \n    u_i\n, \n    v_i\n (\n    1 \n    \u2264 u_i, v_i \n    \u2264\n    n\n), representing an edge between \n    u_i\n and \n    v_i\n. It is guaranteed\nthat the given edges form a tree. Output The only line contains \n    n-1\n\nintegers \u2014 the answer modulo \n    p\n for \n    k=1,2,\n    \u2026,n-1\n. Examples\nInput 4 998244353 1 2 2 3 1 4 Output 1 6 6 Input 7 100000007 1 2 1 3 2 4 2 5 3\n6 3 7 Output 1 47 340 854 880 320 Input 8 1000000007 1 2 2 3 3 4 4 5 5 6 6 7 7\n8 Output 1 126 1806 8400 16800 15120 5040 Note In the first test case, when\n\n    k=1\n, the only possible way is: \n    1,2,3,4\n    \n    \n    \u2192\n    \n    1\n. When \n    k=2\n, there are \n    6\n possible ways:\n\n    1,2,3,4\n    \n    \n    \u2192\n    \n    1,2\n    \n    \n    \u2192\n    \n    1\n;\n\n    1,2,3,4\n    \n    \n    \u2192\n    \n    1,2,3\n    \n    \n    \u2192\n    \n    1\n;\n\n    1,2,3,4\n    \n    \n    \u2192\n    \n    1,2,4\n    \n    \n    \u2192\n    \n    1\n;\n\n    1,2,3,4\n    \n    \n    \u2192\n    \n    1,3\n    \n    \n    \u2192\n    \n    1\n;\n\n    1,2,3,4\n    \n    \n    \u2192\n    \n    1,3,4\n    \n    \n    \u2192\n    \n    1\n;\n\n    1,2,3,4\n    \n    \n    \u2192\n    \n    1,4\n    \n    \n    \u2192\n    \n    1\n. When \n    k=3\n,\nthere are \n    6\n possible ways: \n    1,2,3,4\n    \n    \n    \u2192\n    \n    1,2,3\n    \n    \n    \u2192\n    \n    1,2\n    \n    \n    \u2192\n    \n    1\n; \n    1,2,3,4\n    \n    \n    \u2192\n    \n    1,2,3\n    \n    \n    \u2192\n    \n    1,3\n    \n    \n    \u2192\n    \n    1\n; \n    1,2,3,4\n    \n    \n    \u2192\n    \n    1,2,4\n    \n    \n    \u2192\n    \n    1,2\n    \n    \n    \u2192\n    \n    1\n;\n\n    1,2,3,4\n    \n    \n    \u2192\n    \n    1,2,4\n    \n    \n    \u2192\n    \n    1,4\n    \n    \n    \u2192\n    \n    1\n; \n    1,2,3,4\n    \n    \n    \u2192\n    \n    1,3,4\n    \n    \n    \u2192\n    \n    1,3\n    \n    \n    \u2192\n    \n    1\n; \n    1,2,3,4\n    \n    \n    \u2192\n    \n    1,3,4\n    \n    \n    \u2192\n    \n    1,4\n    \n    \n    \u2192\n    \n    1\n.\n\n",
        "cf_contest_id": 1707,
        "cf_index": "D",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "dfs and similar",
            "dp",
            "math",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 998244353\r\n1 2\r\n2 3\r\n1 4\r\n",
                "1 6 6 "
            ],
            [
                "7 100000007\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n3 7\r\n",
                "1 47 340 854 880 320 "
            ],
            [
                "8 1000000007\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n",
                "1 126 1806 8400 16800 15120 5040 "
            ]
        ],
        "private_cases": [
            [
                "5 998244853\r\n2 1\r\n3 2\r\n4 3\r\n5 2\r\n",
                "1 11 24 14 "
            ],
            [
                "5 998244853\r\n2 1\r\n3 1\r\n4 2\r\n5 2\r\n",
                "1 12 27 16 "
            ],
            [
                "5 100000037\r\n2 1\r\n3 1\r\n4 3\r\n5 3\r\n",
                "1 12 27 16 "
            ],
            [
                "10 998244853\r\n2 1\r\n3 2\r\n4 1\r\n5 4\r\n6 1\r\n7 6\r\n8 5\r\n9 6\r\n10 6\r\n",
                "1 382 11973 113652 480060 1048320 1234800 745920 181440 "
            ],
            [
                "20 100000039\r\n2 1\r\n3 1\r\n4 1\r\n5 4\r\n6 5\r\n7 2\r\n8 4\r\n9 6\r\n10 9\r\n11 6\r\n12 9\r\n13 2\r\n14 6\r\n15 10\r\n16 9\r\n17 13\r\n18 14\r\n19 15\r\n20 13\r\n",
                "1 100890 18053534 78148289 75545422 44104808 28956788 63756844 46837883 95233833 44728217 63698657 49874222 45864635 32448095 36374391 46751861 52651778 36738063 "
            ],
            [
                "2 100000193\r\n2 1\r\n",
                "1 "
            ],
            [
                "20 998244353\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n1 9\r\n1 10\r\n1 11\r\n1 12\r\n1 13\r\n1 14\r\n1 15\r\n1 16\r\n1 17\r\n1 18\r\n1 19\r\n1 20\r\n",
                "1 524286 162444253 706031490 861098627 394193592 477013291 636609694 878646973 946288257 67306992 855421727 404092831 451006412 775503623 556037463 880988076 829568272 868586527 "
            ],
            [
                "50 998244353\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n3 7\r\n4 8\r\n4 9\r\n5 10\r\n5 11\r\n6 12\r\n6 13\r\n7 14\r\n7 15\r\n8 16\r\n8 17\r\n9 18\r\n9 19\r\n10 20\r\n10 21\r\n11 22\r\n11 23\r\n12 24\r\n12 25\r\n13 26\r\n13 27\r\n14 28\r\n14 29\r\n15 30\r\n15 31\r\n16 32\r\n16 33\r\n17 34\r\n17 35\r\n18 36\r\n18 37\r\n19 38\r\n19 39\r\n20 40\r\n20 41\r\n21 42\r\n21 43\r\n22 44\r\n22 45\r\n23 46\r\n23 47\r\n24 48\r\n24 49\r\n25 50\r\n",
                "1 3220923 909904834 431084497 927375903 60109849 250617560 789600841 865368267 644994968 303928479 870788928 782918618 740843195 990653317 602971609 793119149 580873799 19180792 298752213 773658041 316630699 507624809 828389992 392848526 218070052 261461655 538920691 965444538 35126730 585046276 748668100 828985142 959798830 532224297 685976995 554370727 359153068 84057101 135884809 796603036 342938758 630513025 871679978 391006493 863219568 614499781 123560575 286338006 "
            ]
        ]
    }
]