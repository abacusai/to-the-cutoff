[
    {
        "name": "Sort with Step",
        "description": "Let's define a permutation of length \n    n\n as an array \n    p\n of length\n\n    n\n, which contains every number from \n    1\n to \n    n\n exactly once. You\nare given a permutation \n    p_1, p_2, \n    \u2026, p_n\n and a number \n    k\n. You\nneed to sort this permutation in the ascending order. In order to do it, you\ncan repeat the following operation any number of times (possibly, zero): pick\ntwo elements of the permutation \n    p_i\n and \n    p_j\n such that \n    |i - j| =\n    k\n, and swap them. Unfortunately, some permutations can't be sorted with\nsome fixed numbers \n    k\n. For example, it's impossible to sort \n    [2, 4, 3,\n    1]\n with \n    k = 2\n. That's why, before starting the sorting, you can make\nat most one preliminary exchange: choose any pair \n    p_i\n and \n    p_j\n and\nswap them. Your task is to: check whether is it possible to sort the\npermutation without any preliminary exchanges, if it's not, check, whether is\nit possible to sort the permutation using exactly one preliminary exchange.\nFor example, if \n    k = 2\n and permutation is \n    [2, 4, 3, 1]\n, then you\ncan make a preliminary exchange of \n    p_1\n and \n    p_4\n, which will produce\npermutation \n    [1, 4, 3, 2]\n, which is possible to sort with given \n    k\n.\nInput Each test contains multiple test cases. The first line contains the\nnumber of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n). The description of\nthe test cases follows. The first line of each test case contains two integers\n\n    n\n and \n    k\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n; \n    1 \n    \u2264 k \n    \u2264\n    n - 1\n) \u2014 length of the permutation, and a distance between elements that\ncan be swapped. The second line of each test case contains \n    n\n integers\n\n    p_1, p_2, \n    \u2026, p_n\n (\n    1 \n    \u2264 p_i \n    \u2264 n\n) \u2014 elements of the\npermutation \n    p\n. It is guaranteed that the sum of \n    n\n over all test\ncases does not exceed \n    2 \n    \u00b7 10 ^ 5\n. Output For each test case print\n0, if it is possible to sort the permutation without preliminary exchange; 1,\nif it is possible to sort the permutation with one preliminary exchange, but\nnot possible without preliminary exchange; -1, if it is not possible to sort\nthe permutation with at most one preliminary exchange. Example Input 6 4 1 3 1\n2 4 4 2 3 4 1 2 4 2 3 1 4 2 10 3 4 5 9 1 8 6 10 2 3 7 10 3 4 6 9 1 8 5 10 2 3\n7 10 3 4 6 9 1 8 5 10 3 2 7 Output 0 0 1 0 1 -1 Note In the first test case,\nthere is no need in preliminary exchange, as it is possible to swap \n    (p_1,\n    p_2)\n and then \n    (p_2, p_3)\n. In the second test case, there is no need\nin preliminary exchange, as it is possible to swap \n    (p_1, p_3)\n and then\n\n    (p_2, p_4)\n. In the third test case, you need to apply preliminary\nexchange to \n    (p_2, p_3)\n. After that the permutation becomes \n    [3, 4, 1,\n    2]\n and can be sorted with \n    k = 2\n.\n\n",
        "cf_contest_id": 1823,
        "cf_index": "B",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n4 1\r\n3 1 2 4\r\n4 2\r\n3 4 1 2\r\n4 2\r\n3 1 4 2\r\n10 3\r\n4 5 9 1 8 6 10 2 3 7\r\n10 3\r\n4 6 9 1 8 5 10 2 3 7\r\n10 3\r\n4 6 9 1 8 5 10 3 2 7\r\n",
                "0\r\n0\r\n1\r\n0\r\n1\r\n-1\r\n"
            ]
        ],
        "private_cases": []
    }
]