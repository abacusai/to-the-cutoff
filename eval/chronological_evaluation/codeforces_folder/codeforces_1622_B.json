[
    {
        "name": "Berland Music",
        "description": "Berland Music is a music streaming service built specifically to support\nBerland local artist. Its developers are currently working on a song\nrecommendation module. So imagine Monocarp got recommended \n    n\n songs,\nnumbered from \n    1\n to \n    n\n. The \n    i\n-th song had its predicted rating\nequal to \n    p_i\n, where \n    1 \n    \u2264 p_i \n    \u2264 n\n and every integer from\n\n    1\n to \n    n\n appears exactly once. In other words, \n    p\n is a\npermutation. After listening to each of them, Monocarp pressed either a like\nor a dislike button. Let his vote sequence be represented with a string\n\n    s\n, such that \n    s_i=0\n means that he disliked the \n    i\n-th song, and\n\n    s_i=1\n means that he liked it. Now the service has to re-evaluate the\nsong ratings in such a way that: the new ratings \n    q_1, q_2, \n    \u2026, q_n\n\nstill form a permutation (\n    1 \n    \u2264 q_i \n    \u2264 n\n; each integer from \n    1\n\nto \n    n\n appears exactly once); every song that Monocarp liked should have a\ngreater rating than every song that Monocarp disliked (formally, for all \n    i,\n    j\n such that \n    s_i=1\n and \n    s_j=0\n, \n    q_i>q_j\n should hold). Among\nall valid permutations \n    q\n find the one that has the smallest value of\n\n    \u2211\n    _i=1^n |p_i-q_i|\n, where \n    |x|\n is an absolute value\nof \n    x\n. Print the permutation \n    q_1, q_2, \n    \u2026, q_n\n. If there are\nmultiple answers, you can print any of them. Input The first line contains a\nsingle integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of testcases.\nThe first line of each testcase contains a single integer \n    n\n (\n    1 \n    \u2264\n    n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of songs. The second line of each\ntestcase contains \n    n\n integers \n    p_1, p_2, \n    \u2026, p_n\n (\n    1 \n    \u2264\n    p_i \n    \u2264 n\n) \u2014 the permutation of the predicted ratings. The third line\ncontains a single string \n    s\n, consisting of \n    n\n characters. Each\ncharacter is either a \n    0\n or a \n    1\n. \n    0\n means that Monocarp\ndisliked the song, and \n    1\n means that he liked it. The sum of \n    n\n over\nall testcases doesn't exceed \n    2 \n    \u00b7 10^5\n. Output For each testcase,\nprint a permutation \n    q\n \u2014 the re-evaluated ratings of the songs. If there\nare multiple answers such that \n    \u2211\n    _i=1^n |p_i-q_i|\n is\nminimum possible, you can print any of them. Example Input 3 2 1 2 10 3 3 1 2\n111 8 2 3 1 8 5 4 7 6 01110001 Output 2 1 3 1 2 1 6 5 8 3 2 4 7 Note In the\nfirst testcase, there exists only one permutation \n    q\n such that each liked\nsong is rating higher than each disliked song: song \n    1\n gets rating\n\n    2\n and song \n    2\n gets rating \n    1\n. \n    \u2211\n    _i=1^n |p_i-\n    q_i|=|1-2|+|2-1|=2\n. In the second testcase, Monocarp liked all songs, so\nall permutations could work. The permutation with the minimum sum of absolute\ndifferences is the permutation equal to \n    p\n. Its cost is \n    0\n.\n\n",
        "cf_contest_id": 1622,
        "cf_index": "B",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2\r\n1 2\r\n10\r\n3\r\n3 1 2\r\n111\r\n8\r\n2 3 1 8 5 4 7 6\r\n01110001\r\n",
                "2 1\r\n3 1 2\r\n1 6 5 8 3 2 4 7\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n2\r\n1 2\r\n10\r\n7\r\n1 2 3 4 5 6 7\r\n0101010\r\n8\r\n2 3 1 8 5 4 7 6\r\n01110001\r\n",
                "2 1\r\n1 5 2 6 3 7 4\r\n1 6 5 8 3 2 4 7\r\n"
            ],
            [
                "1\r\n7\r\n1 2 3 4 5 6 7\r\n0101010\r\n",
                "1 5 2 6 3 7 4\r\n"
            ],
            [
                "1\r\n50\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\r\n10101010101010101010101010101010101010101010101010\r\n",
                "26 1 27 2 28 3 29 4 30 5 31 6 32 7 33 8 34 9 35 10 36 11 37 12 38 13 39 14 40 15 41 16 42 17 43 18 44 19 45 20 46 21 47 22 48 23 49 24 50 25\r\n"
            ]
        ]
    }
]