[
    {
        "name": "Two Segments",
        "description": "Nick has some permutation consisting of p integers from 1 to n. A segment [l,\nr] (l \u2264 r) is a set of elements pi satisfying l \u2264 i \u2264 r. Nick calls a pair of\nsegments [a0, a1] and [b0, b1] (1 \u2264 a0 \u2264 a1 < b0 \u2264 b1 \u2264 n) good if all their\n(a1 - a0 + b1 - b0 + 2) elements, when sorted in ascending order, form an\narithmetic progression with a difference of 1. That is, when they sorted in\nascending order, the elements are in the form x, x + 1, x + 2, ..., x + m -\n1, for some x and m. Your task is to find the number of distinct pairs of\ngood segments in the given permutation. Two pairs of segments are considered\ndistinct if the sets of elements contained in these pairs of segments are\ndistinct. For example, any segment [l, r] (l < r) can be represented as a pair\nof segments, as [l, i] and [i + 1, r] (l \u2264 i \u2264 r). As all these pairs consist\nof the same set of elements, they are considered identical. See the notes\naccompanying the sample tests for clarification. Input The first line contains\ninteger n (1 \u2264 n \u2264 3\u00b710^5) \u2014 the permutation size. The second line contains n\nspace-separated distinct integers pi, (1 \u2264 pi \u2264 n). Output Print a single\ninteger \u2014 the number of good pairs of segments of permutation p. Please, do\nnot use the \npreferred to use the cin, cout streams or the \n3 1 2 3 Output 3 Input 5 1 4 5 3 2 Output 10 Input 5 5 4 3 1 2 Output 10 Note\nIn the first sample the following pairs of segments are good: ([1, 1], [2,\n2]); ([2, 2], [3, 3]); ([1, 2], [3, 3]). Pair of segments ([1, 1], [2, 3]) is\nby definition equivalent to pair ([1, 2], [3, 3]), since both of them covers\nthe same set of elements, namely 1, 2, 3. In the third sample the following\npairs of segments are good: ([4, 4], [5, 5]); ([3, 3],[4, 5]); ([2, 2],[3,\n5]); ([1, 1],[2, 5]); ([3, 3],[5, 5]); ([2, 3],[5, 5]); ([1, 3],[5, 5]); ([2,\n2],[3, 3]); ([1, 1],[2, 3]); ([1, 1],[2, 2]).\n\n",
        "cf_contest_id": 193,
        "cf_index": "D",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 2 3\r\n",
                "3\r\n"
            ],
            [
                "5\r\n1 4 5 3 2\r\n",
                "10\r\n"
            ],
            [
                "5\r\n5 4 3 1 2\r\n",
                "10\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n10 9 8 7 6 5 4 3 2 1\r\n",
                "45\r\n"
            ],
            [
                "2\r\n1 2\r\n",
                "1\r\n"
            ],
            [
                "1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "10\r\n2 9 5 3 10 7 8 6 1 4\r\n",
                "22\r\n"
            ],
            [
                "10\r\n6 5 2 8 9 10 4 3 7 1\r\n",
                "29\r\n"
            ],
            [
                "10\r\n1 2 5 4 3 6 9 7 8 10\r\n",
                "41\r\n"
            ],
            [
                "5\r\n5 3 4 2 1\r\n",
                "10\r\n"
            ],
            [
                "5\r\n2 4 1 5 3\r\n",
                "9\r\n"
            ],
            [
                "5\r\n2 3 5 1 4\r\n",
                "10\r\n"
            ],
            [
                "5\r\n1 4 3 2 5\r\n",
                "10\r\n"
            ],
            [
                "5\r\n1 3 5 2 4\r\n",
                "10\r\n"
            ],
            [
                "5\r\n3 1 5 4 2\r\n",
                "10\r\n"
            ],
            [
                "5\r\n1 3 4 2 5\r\n",
                "10\r\n"
            ],
            [
                "6\r\n6 2 1 5 3 4\r\n",
                "14\r\n"
            ],
            [
                "6\r\n4 3 2 5 6 1\r\n",
                "15\r\n"
            ],
            [
                "6\r\n2 1 5 3 6 4\r\n",
                "12\r\n"
            ],
            [
                "7\r\n5 3 6 4 7 1 2\r\n",
                "16\r\n"
            ],
            [
                "7\r\n5 1 6 4 7 2 3\r\n",
                "13\r\n"
            ],
            [
                "7\r\n3 5 1 2 6 7 4\r\n",
                "15\r\n"
            ],
            [
                "6\r\n3 5 1 4 6 2\r\n",
                "11\r\n"
            ],
            [
                "11\r\n1 6 10 11 5 3 7 2 9 8 4\r\n",
                "22\r\n"
            ],
            [
                "3\r\n1 3 2\r\n",
                "3\r\n"
            ],
            [
                "3\r\n2 1 3\r\n",
                "3\r\n"
            ],
            [
                "3\r\n2 3 1\r\n",
                "3\r\n"
            ],
            [
                "3\r\n3 1 2\r\n",
                "3\r\n"
            ],
            [
                "3\r\n3 2 1\r\n",
                "3\r\n"
            ]
        ]
    }
]