[
    {
        "name": "Maximum Xor Secondary",
        "description": "Bike loves looking for the second maximum element in the sequence. The second\nmaximum element in the sequence of distinct numbers x1, x2, ..., xk (k > 1) is\nsuch maximum element xj, that the following inequality holds: . The lucky\nnumber of the sequence of distinct positive integers x1, x2, ..., xk (k > 1)\nis the number that is equal to the bitwise excluding OR of the maximum element\nof the sequence and the second maximum element of the sequence. You've got a\nsequence of distinct positive integers s1, s2, ..., sn (n > 1). Let's denote\nsequence sl, sl + 1, ..., sr as s[l..r] (1 \u2264 l < r \u2264 n). Your task is to find\nthe maximum number among all lucky numbers of sequences s[l..r]. Note that as\nall numbers in sequence s are distinct, all the given definitions make sence.\nInput The first line contains integer n (1 < n \u2264 10^5). The second line\ncontains n distinct integers s1, s2, ..., sn (1 \u2264 si \u2264 10^9). Output Print a\nsingle integer \u2014 the maximum lucky number among all lucky numbers of sequences\ns[l..r]. Examples Input 5 5 2 1 4 3 Output 7 Input 5 9 8 3 5 7 Output 15 Note\nFor the first sample you can choose s[4..5] = 4, 3 and its lucky number is\n(4 xor 3) = 7. You can also choose s[1..2]. For the second sample you must\nchoose s[2..5] = 8, 3, 5, 7.\n\n",
        "cf_contest_id": 280,
        "cf_index": "B",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "implementation",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n5 2 1 4 3\r\n",
                "7\r\n"
            ],
            [
                "5\r\n9 8 3 5 7\r\n",
                "15\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n76969694 71698884 32888447 31877010 65564584 87864180 7850891 1505323 17879621 15722446\r\n",
                "128869996\r\n"
            ],
            [
                "10\r\n4547989 39261040 94929326 38131456 26174500 7152864 71295827 77784626 89898294 68006331\r\n",
                "134189790\r\n"
            ],
            [
                "10\r\n30301275 19973434 63004643 54007648 93722492 91677384 58694045 41546981 15552151 5811338\r\n",
                "112066588\r\n"
            ],
            [
                "10\r\n47606126 65484553 142643 35352821 26622058 5603080 7296801 53938188 34750256 97196502\r\n",
                "131671782\r\n"
            ],
            [
                "10\r\n82942694 74816699 72957520 1634864 60842992 60103606 61079517 41624114 13932450 24035648\r\n",
                "133874061\r\n"
            ],
            [
                "10\r\n73622246 45316865 2066146 61168230 1258786 69603039 64470479 72811017 72683016 97992629\r\n",
                "133280528\r\n"
            ],
            [
                "10\r\n29272229 8752316 10025994 52398694 57994948 49609605 28150935 66061676 44865054 87041483\r\n",
                "127710165\r\n"
            ],
            [
                "10\r\n3106954 3413954 3854371 85952704 17834583 20954227 58810981 7460648 97908613 97965110\r\n",
                "111078053\r\n"
            ],
            [
                "3\r\n11 10 8\r\n",
                "2\r\n"
            ],
            [
                "2\r\n5 6\r\n",
                "3\r\n"
            ],
            [
                "2\r\n16 17\r\n",
                "1\r\n"
            ],
            [
                "3\r\n8 9 10\r\n",
                "3\r\n"
            ]
        ]
    }
]