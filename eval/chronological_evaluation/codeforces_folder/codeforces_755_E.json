[
    {
        "name": "PolandBall and White-Red graph",
        "description": "PolandBall has an undirected simple graph consisting of n vertices.\nUnfortunately, it has no edges. The graph is very sad because of that.\nPolandBall wanted to make it happier, adding some red edges. Then, he will add\nwhite edges in every remaining place. Therefore, the final graph will be a\nclique in two colors: white and red. Colorfulness of the graph is a value\nmin(dr, dw), where dr is the diameter of the red subgraph and dw is the\ndiameter of white subgraph. The diameter of a graph is a largest value d such\nthat shortest path between some pair of vertices in it is equal to d. If the\ngraph is not connected, we consider its diameter to be -1. PolandBall wants\nthe final graph to be as neat as possible. He wants the final colorfulness to\nbe equal to k. Can you help him and find any graph which satisfies\nPolandBall's requests? Input The only one input line contains two integers n\nand k (2 \u2264 n \u2264 1000, 1 \u2264 k \u2264 1000), representing graph's size and sought\ncolorfulness. Output If it's impossible to find a suitable graph, print -1.\nOtherwise, you can output any graph which fulfills PolandBall's requirements.\nFirst, output m \u2014 the number of red edges in your graph. Then, you should\noutput m lines, each containing two integers ai and bi, (1 \u2264 ai, bi \u2264 n, ai \u2260\nbi) which means that there is an undirected red edge between vertices ai and\nbi. Every red edge should be printed exactly once, you can print the edges and\nthe vertices of every edge in arbitrary order. Remember that PolandBall's\ngraph should remain simple, so no loops or multiple edges are allowed.\nExamples Input 4 1 Output -1 Input 5 2 Output 4 1 2 2 3 3 4 4 5 Note In the\nfirst sample case, no graph can fulfill PolandBall's requirements. In the\nsecond sample case, red graph is a path from 1 to 5. Its diameter is 4.\nHowever, white graph has diameter 2, because it consists of edges 1-3, 1-4,\n1-5, 2-4, 2-5, 3-5.\n\n",
        "cf_contest_id": 755,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graphs",
            "shortest paths"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 1\r\n",
                "-1\r\n"
            ],
            [
                "5 2\r\n",
                "4\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 2\r\n",
                "9\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n"
            ],
            [
                "1000 5\r\n",
                "-1\r\n"
            ],
            [
                "5 3\r\n",
                "4\r\n1 2\r\n2 3\r\n3 4\r\n3 5\r\n"
            ],
            [
                "100 49\r\n",
                "-1\r\n"
            ],
            [
                "4 2\r\n",
                "-1\r\n"
            ],
            [
                "4 3\r\n",
                "3\r\n1 2\r\n2 3\r\n3 4\r\n"
            ],
            [
                "5 4\r\n",
                "-1\r\n"
            ],
            [
                "5 1\r\n",
                "-1\r\n"
            ],
            [
                "7 2\r\n",
                "6\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n"
            ],
            [
                "1000 1\r\n",
                "-1\r\n"
            ],
            [
                "1000 4\r\n",
                "-1\r\n"
            ],
            [
                "999 1\r\n",
                "-1\r\n"
            ],
            [
                "999 4\r\n",
                "-1\r\n"
            ],
            [
                "999 5\r\n",
                "-1\r\n"
            ],
            [
                "8 2\r\n",
                "7\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n"
            ],
            [
                "9 2\r\n",
                "8\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n"
            ],
            [
                "6 3\r\n",
                "5\r\n1 2\r\n2 3\r\n3 4\r\n3 5\r\n3 6\r\n"
            ],
            [
                "7 3\r\n",
                "6\r\n1 2\r\n2 3\r\n3 4\r\n3 5\r\n3 6\r\n3 7\r\n"
            ],
            [
                "8 3\r\n",
                "7\r\n1 2\r\n2 3\r\n3 4\r\n3 5\r\n3 6\r\n3 7\r\n3 8\r\n"
            ],
            [
                "9 3\r\n",
                "8\r\n1 2\r\n2 3\r\n3 4\r\n3 5\r\n3 6\r\n3 7\r\n3 8\r\n3 9\r\n"
            ],
            [
                "10 3\r\n",
                "9\r\n1 2\r\n2 3\r\n3 4\r\n3 5\r\n3 6\r\n3 7\r\n3 8\r\n3 9\r\n3 10\r\n"
            ],
            [
                "11 2\r\n",
                "10\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 11\r\n"
            ],
            [
                "40 2\r\n",
                "39\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 11\r\n11 12\r\n12 13\r\n13 14\r\n14 15\r\n15 16\r\n16 17\r\n17 18\r\n18 19\r\n19 20\r\n20 21\r\n21 22\r\n22 23\r\n23 24\r\n24 25\r\n25 26\r\n26 27\r\n27 28\r\n28 29\r\n29 30\r\n30 31\r\n31 32\r\n32 33\r\n33 34\r\n34 35\r\n35 36\r\n36 37\r\n37 38\r\n38 39\r\n39 40\r\n"
            ],
            [
                "2 1\r\n",
                "-1\r\n"
            ],
            [
                "2 2\r\n",
                "-1\r\n"
            ],
            [
                "2 3\r\n",
                "-1\r\n"
            ],
            [
                "2 4\r\n",
                "-1\r\n"
            ],
            [
                "3 1\r\n",
                "-1\r\n"
            ],
            [
                "3 2\r\n",
                "-1\r\n"
            ],
            [
                "3 3\r\n",
                "-1\r\n"
            ],
            [
                "3 4\r\n",
                "-1\r\n"
            ]
        ]
    }
]