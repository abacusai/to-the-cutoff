[
    {
        "name": "Equal Product",
        "description": "You are given four integers \n    n\n, \n    m\n, \n    l\n and \n    r\n. Let's name\na tuple \n    (x_1, y_1, x_2, y_2)\n as good if: \n    1 \n    \u2264 x_1 < x_2 \n    \u2264\n    n\n; \n    1 \n    \u2264 y_2 < y_1 \n    \u2264 m\n; \n    x_1 \n    \u00b7 y_1 = x_2 \n    \u00b7\n    y_2\n; \n    l \n    \u2264 x_1 \n    \u00b7 y_1 \n    \u2264 r\n. Find any good tuple for each\n\n    x_1\n from \n    1\n to \n    n\n inclusive. Input The first line contains two\nintegers \n    n\n and \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 2 \n    \u00b7 10^5\n). The\nsecond line contains two integers \n    l\n and \n    r\n (\n    1 \n    \u2264 l \n    \u2264 r\n    \n    \u2264 nm\n). Output For each \n    x_1\n from \n    1\n to \n    n\n inclusive: if\nthere are no such four integers, print \n    -1\n; otherwise, print four\nintegers \n    x_1\n, \n    y_1\n, \n    x_2\n and \n    y_2\n. If there are multiple\nanswers, print any of them. Examples Input 8 20 91 100 Output -1 -1 -1 -1 -1 6\n16 8 12 -1 -1 Input 4 5 1 10 Output 1 2 2 1 2 3 3 2 -1 -1 Input 5 12 16 60\nOutput -1 2 9 3 6 3 8 4 6 4 5 5 4 -1\n\n",
        "cf_contest_id": 1418,
        "cf_index": "F",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "math",
            "number theory",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8 20\r\n91 100\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n6 16 8 12\r\n-1\r\n-1\r\n"
            ],
            [
                "4 5\r\n1 10\r\n",
                "1 4 2 2\r\n2 4 4 2\r\n-1\r\n-1\r\n"
            ],
            [
                "5 12\r\n16 60\r\n",
                "-1\r\n2 12 4 6\r\n3 12 4 9\r\n4 10 5 8\r\n-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 12\r\n10 10\r\n",
                "1 10 2 5\r\n-1\r\n"
            ],
            [
                "16 12\r\n22 156\r\n",
                "-1\r\n2 12 4 6\r\n3 12 6 6\r\n4 12 8 6\r\n5 12 10 6\r\n6 12 12 6\r\n7 12 14 6\r\n8 12 16 6\r\n9 12 12 9\r\n10 12 15 8\r\n11 12 12 11\r\n12 12 16 9\r\n-1\r\n14 8 16 7\r\n-1\r\n-1\r\n"
            ],
            [
                "11 4\r\n38 39\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "5 16\r\n63 63\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "20 8\r\n89 123\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n12 8 16 6\r\n-1\r\n14 8 16 7\r\n15 8 20 6\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "14 8\r\n24 83\r\n",
                "-1\r\n-1\r\n3 8 6 4\r\n4 8 8 4\r\n5 8 10 4\r\n6 8 12 4\r\n7 8 14 4\r\n8 6 12 4\r\n9 8 12 6\r\n10 6 12 5\r\n-1\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "8 20\r\n44 84\r\n",
                "-1\r\n-1\r\n3 20 6 10\r\n4 20 8 10\r\n5 12 6 10\r\n6 12 8 9\r\n7 8 8 7\r\n-1\r\n"
            ],
            [
                "3 12\r\n10 16\r\n",
                "1 12 2 6\r\n2 6 3 4\r\n-1\r\n"
            ],
            [
                "17 4\r\n16 29\r\n",
                "-1\r\n-1\r\n-1\r\n4 4 8 2\r\n5 4 10 2\r\n6 4 12 2\r\n7 4 14 2\r\n8 2 16 1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "16 7\r\n5 10\r\n",
                "1 6 2 3\r\n2 4 4 2\r\n3 2 6 1\r\n4 2 8 1\r\n5 2 10 1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "14 9\r\n53 79\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n6 9 9 6\r\n7 8 14 4\r\n8 9 12 6\r\n9 8 12 6\r\n10 6 12 5\r\n-1\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "14 20\r\n174 200\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n9 20 12 15\r\n10 18 12 15\r\n-1\r\n-1\r\n13 14 14 13\r\n-1\r\n"
            ],
            [
                "6 14\r\n73 84\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "18 13\r\n99 192\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n8 13 13 8\r\n9 12 18 6\r\n10 12 15 8\r\n11 12 12 11\r\n12 12 18 8\r\n-1\r\n14 8 16 7\r\n15 12 18 10\r\n16 9 18 8\r\n-1\r\n-1\r\n"
            ],
            [
                "18 15\r\n21 56\r\n",
                "-1\r\n2 14 4 7\r\n3 14 6 7\r\n4 14 8 7\r\n5 10 10 5\r\n6 8 12 4\r\n7 8 14 4\r\n8 6 16 3\r\n9 6 18 3\r\n10 3 15 2\r\n-1\r\n12 3 18 2\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "10 16\r\n108 149\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n7 16 8 14\r\n8 15 10 12\r\n-1\r\n-1\r\n"
            ],
            [
                "20 5\r\n54 84\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n12 5 20 3\r\n-1\r\n-1\r\n15 4 20 3\r\n16 5 20 4\r\n-1\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "15 17\r\n106 144\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n7 16 14 8\r\n8 15 12 10\r\n9 16 12 12\r\n10 12 15 8\r\n11 12 12 11\r\n12 10 15 8\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "14 8\r\n102 107\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "18 19\r\n263 295\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n15 18 18 15\r\n16 18 18 16\r\n-1\r\n-1\r\n"
            ]
        ]
    }
]