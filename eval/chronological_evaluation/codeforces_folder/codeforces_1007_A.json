[
    {
        "name": "Reorder the Array",
        "description": "You are given an array of integers. Vasya can permute (change order) its\nintegers. He wants to do it so that as many as possible integers will become\non a place where a smaller integer used to stand. Help Vasya find the maximal\nnumber of such integers. For instance, if we are given an array \n    [10, 20,\n    30, 40]\n, we can permute it so that it becomes \n    [20, 40, 10, 30]\n. Then\non the first and the second positions the integers became larger (\n    20>10\n,\n\n    40>20\n) and did not on the third and the fourth, so for this permutation,\nthe number that Vasya wants to maximize equals \n    2\n. Read the note for the\nfirst example, there is one more demonstrative test case. Help Vasya to\npermute integers in such way that the number of positions in a new array,\nwhere integers are greater than in the original one, is maximal. Input The\nfirst line contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n) \u2014\nthe length of the array. The second line contains \n    n\n integers \n    a_1,\n    a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the elements of the\narray. Output Print a single integer \u2014 the maximal number of the array's\nelements which after a permutation will stand on the position where a smaller\nelement stood in the initial array. Examples Input 7 10 1 1 1 5 5 3 Output 4\nInput 5 1 1 1 1 1 Output 0 Note In the first sample, one of the best\npermutations is \n    [1, 5, 5, 3, 10, 1, 1]\n. On the positions from second to\nfifth the elements became larger, so the answer for this permutation is 4. In\nthe second sample, there is no way to increase any element with a permutation,\nso the answer is 0.\n\n",
        "cf_contest_id": 1007,
        "cf_index": "A",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "data structures",
            "math",
            "sortings",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n10 1 1 1 5 5 3\r\n",
                "4\r\n"
            ],
            [
                "5\r\n1 1 1 1 1\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "6\r\n300000000 200000000 300000000 200000000 1000000000 300000000\r\n",
                "3\r\n"
            ],
            [
                "10\r\n1 2 3 4 5 6 7 8 9 10\r\n",
                "9\r\n"
            ],
            [
                "1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "7\r\n3 5 2 2 5 2 4\r\n",
                "4\r\n"
            ],
            [
                "5\r\n1 5 4 2 3\r\n",
                "4\r\n"
            ]
        ]
    }
]