[
    {
        "name": "Multitest Generator",
        "description": "Let's call an array \n    b_1, b_2, \n    \u2026, b_m\n a test if \n    b_1 = m - 1\n.\nLet's call an array \n    b_1, b_2, \n    \u2026, b_m\n a multitest if the array\n\n    b_2, b_3, \n    \u2026, b_m\n can be split into \n    b_1\n non-empty subarrays\nso that each of these subarrays is a test. Note that each element of the array\nmust be included in exactly one subarray, and the subarrays must consist of\nconsecutive elements. Let's define the function \n    f\n from the array \n    b_1,\n    b_2, \n    \u2026, b_m\n as the minimum number of operations of the form \"Replace\nany \n    b_i\n with any non-negative integer \n    x\n\", which needs to be done\nso that the array \n    b_1, b_2, \n    \u2026, b_m\n becomes a multitest. You are\ngiven an array of positive integers \n    a_1, a_2, \n    \u2026, a_n\n. For each\n\n    i\n from \n    1\n to \n    n - 1\n, find \n    f([a_i, a_i+1, \n    \u2026,\n    a_n])\n. Below are some examples of tests and multitests. Tests:\n\n    [\n    1, 5]\n, \n    [\n    2, 2, 2]\n,\n\n    [\n    3, 4, 1, 1]\n, \n    [\n    5, 0, 0, 0, 0, 0]\n,\n\n    [\n    7, 1, 2, 3, 4, 5, 6, 7]\n, \n    [\n    0]\n. These\narrays are tests since their first element (underlined) is equal to the length\nof the array minus one. Multitests: \n    [1, \n    \n    1,\n    1]\n, \n    [2, \n    \n    3, 0, 0, 1,\n    \n    \n    1, 12]\n, \n    [3, \n    \n    2, 2,\n    7, \n    \n    1, 1, \n    \n    3, 4, 4,\n    4]\n, \n    [4, \n    \n    0, \n    \n    3, 1,\n    7, 9, \n    \n    4, 2, 0, 0, 9,\n    \n    \n    1, 777]\n. Underlined are the subarrays after the\nsplit, and double underlined are the first elements of each subarray. Input\nEach test contains multiple test cases. The first line contains the number of\ntest cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 300\n     000\n). The description of the\ntest cases follows. The first line of each test case contains a single integer\n\n    n\n (\n    2 \n    \u2264 n \n    \u2264 300\n     000\n) \u2014 the length of the array \n    a\n.\nThe second line of each test case contains \n    n\n integers \n    a_1, a_2,\n    \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 300\n     000\n) \u2014 elements of the array\n\n    a\n. It is guaranteed that the sum of \n    n\n over all test cases does not\nexceed \n    300\n     000\n. Output For each test case print \n    n - 1\n numbers \u2014\n\n    f([a_i, a_i+1, \n    \u2026, a_n])\n for each \n    i\n from \n    1\n to \n    n -\n    1\n. Examples Input 3 4 1 2 1 7 7 3 1 3 1 2 1 1 4 2 7 1 1 Output 0 1 1 0 1 1\n0 1 1 1 1 1 Input 1 19 3 4 1 2 1 7 7 3 1 3 1 2 1 1 4 2 7 1 1 Output 0 0 1 1 1\n1 1 1 1 0 1 0 1 0 2 1 1 1 Note In the first test case of the first test the\narray \n    [1, 2, 1, 7]\n is a multitest since the array \n    [2, 1, 7]\n is a\ntest. The array \n    [2, 1, 7]\n is not a multitest, but after replacing the\nfirst number with \n    1\n, an array \n    [1, 1, 7]\n is obtained, which is a\nmultitest. The array \n    [1, 7]\n is also not a multitest, but the array\n\n    [1, 0]\n is, so \n    f([1, 7]) = 1\n. In the second test case of first\ntest, for \n    i = 2\n, \n    f([a_i, a_i+1, \n    \u2026, a_n]) = f([1, 3, 1, 2, 1,\n    1]) = 1\n, since the array itself is not a multitest, but after replacing the\nsecond element with \n    4\n you get multitest. In the third test case of first\ntest, for \n    i = 1\n, \n    f([a_i, a_i+1, \n    \u2026, a_n]) = f([2, 7, 1, 1]) =\n    1\n, since the array itself is not a multitest, but after replacing the\nsecond element with \n    0\n you get multitest. The second test is an array\ncomposed of all the numbers of the first test. Therefore \n    f([a_1, a_2,\n    \n    \u2026, a_n])\n naturally equals to \n    0\n.\n\n",
        "cf_contest_id": 1798,
        "cf_index": "E",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dp"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n4\r\n1 2 1 7\r\n7\r\n3 1 3 1 2 1 1\r\n4\r\n2 7 1 1\r\n",
                "0 1 1\r\n0 1 1 0 1 1\r\n1 1 1\r\n"
            ],
            [
                "1\r\n19\r\n3 4 1 2 1 7 7 3 1 3 1 2 1 1 4 2 7 1 1\r\n",
                "0 0 1 1 1 1 1 1 1 0 1 0 1 0 2 1 1 1\r\n"
            ]
        ],
        "private_cases": []
    }
]