[
    {
        "name": "Modernization of Treeland",
        "description": "Treeland consists of \n    n\n cities and \n    n-1\n two-way roads connecting\npairs of cities. From every city, you can reach every other city moving only\nby the roads. You are right, the system of cities and roads in this country\nforms an undirected tree. The government has announced a program for the\nmodernization of urban infrastructure of some cities. You have been assigned\nto select an arbitrary subset of cities \n    S\n to upgrade (potentially all\nthe cities) that satisfies the following requirements: the subset of cities\nmust be \"connected\", that is, from any city of the subset \n    S\n you can get\nto any other city of the subset \n    S\n by roads, moving only through cities\nfrom \n    S\n, the number of \"dead-ends\" in \n    S\n must be equal to the given\nnumber \n    k\n. A city is a \"dead-end\" if it is the only city in \n    S\n or\nconnected to exactly one another city from \n    S\n. This shows one of the\npossible ways to select \n    S\n (blue vertices) for a given configuration and\n\n    k=4\n. Dead-ends are vertices with numbers \n    1\n, \n    4\n, \n    6\n and\n\n    7\n. Help Treeland upgrade its cities. Find any of the possible subsets\n\n    S\n or determine that such a subset does not exist. Input The first line\ncontains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test\ncases in the input. This is followed by the test cases themselves. Each test\ncase begins with a line that contains two integers \n    n\n and \n    k\n (\n    2\n    \n    \u2264 n \n    \u2264 3 \n    \u00b7 10^5\n, \n    1 \n    \u2264 k \n    \u2264 n\n) \u2014 the number of\ncities in Treeland and the number of \"dead-end\" cities required in the subset\n\n    S\n. This is followed by \n    n-1\n lines with road descriptions. Each road\nis given by two integers \n    x\n and \n    y\n (\n    1 \n    \u2264 x, y \n    \u2264 n\n; \n    x\n    \n     y\n) \u2014 the numbers of the cities that are connected by this road. It is\nguaranteed that from every city you can reach any other, moving only by the\nroads. The sum of the values of \n    n\n for all test cases in the input does\nnot exceed \n    3 \n    \u00b7 10^5\n. Output For each test case print Yes or No (in\nany case, upper or lower), depending on whether the answer exists or not. If\nthe answer exists, then print an integer \n    m\n (\n    1 \n    \u2264 m \n    \u2264 n\n) \u2014\nthe number of cities in the found subset. Then print \n    m\n different numbers\nfrom \n    1\n to \n    n\n \u2014 the numbers of the cities in the found subset. City\nnumbers can be printed in any order. If there are several answers, print any\nof them. Example Input 4 10 4 4 5 5 2 2 1 1 3 1 9 9 10 2 7 7 8 5 6 4 3 1 2 2 3\n3 4 5 3 1 2 1 3 1 4 1 5 4 1 1 2 2 4 2 3 Output Yes 9 1 2 4 5 6 7 8 9 10 No Yes\n4 1 3 4 5 Yes 1 4\n\n",
        "cf_contest_id": 1297,
        "cf_index": "E",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "dfs and similar",
            "trees"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n10 4\r\n4 5\r\n5 2\r\n2 1\r\n1 3\r\n1 9\r\n9 10\r\n2 7\r\n7 8\r\n5 6\r\n4 3\r\n1 2\r\n2 3\r\n3 4\r\n5 3\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n4 1\r\n1 2\r\n2 4\r\n2 3\r\n",
                "Yes\n8\n1 2 3 4 5 6 7 8\r\nNo\r\nYes\n4\n1 2 3 4\r\nYes\n1\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]