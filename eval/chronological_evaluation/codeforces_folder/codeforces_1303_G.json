[
    {
        "name": "Sum of Prefix Sums",
        "description": "We define the sum of prefix sums of an array \n    [s_1, s_2, \n    \u2026, s_k]\n as\n\n    s_1 + (s_1 + s_2) + (s_1 + s_2 + s_3) + \n    \u2026 + (s_1 + s_2 + \n    \u2026 +\n    s_k)\n. You are given a tree consisting of \n    n\n vertices. Each vertex\n\n    i\n has an integer \n    a_i\n written on it. We define the value of the\nsimple path from vertex \n    u\n to vertex \n    v\n as follows: consider all\nvertices appearing on the path from \n    u\n to \n    v\n, write down all the\nnumbers written on these vertices in the order they appear on the path, and\ncompute the sum of prefix sums of the resulting sequence. Your task is to\ncalculate the maximum value over all paths in the tree. Input The first line\ncontains one integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 150000\n) \u2014 the number of\nvertices in the tree. Then \n    n - 1\n lines follow, representing the edges of\nthe tree. Each line contains two integers \n    u_i\n and \n    v_i\n (\n    1 \n    \u2264\n    u_i, v_i \n    \u2264 n\n, \n    u_i \n     v_i\n), denoting an edge between vertices\n\n    u_i\n and \n    v_i\n. It is guaranteed that these edges form a tree. The\nlast line contains \n    n\n integers \n    a_1\n, \n    a_2\n, ..., \n    a_n\n (\n    1\n    \n    \u2264 a_i \n    \u2264 10^6\n). Output Print one integer \u2014 the maximum value over\nall paths in the tree. Example Input 4 4 2 3 2 4 1 1 3 3 7 Output 36 Note The\nbest path in the first example is from vertex \n    3\n to vertex \n    1\n. It\ngives the sequence \n    [3, 3, 7, 1]\n, and the sum of prefix sums is \n    36\n.\n\n",
        "cf_contest_id": 1303,
        "cf_index": "G",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "divide and conquer",
            "geometry",
            "trees"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4\r\n4 2\r\n3 2\r\n4 1\r\n1 3 3 7\r\n",
                "36\r\n"
            ]
        ],
        "private_cases": [
            [
                "13\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n3 7\r\n4 8\r\n5 9\r\n6 10\r\n7 11\r\n9 12\r\n10 13\r\n1 1 1 1000000 1 1 1000000 1 1 1 1 1 1\r\n",
                "8000020\r\n"
            ],
            [
                "2\r\n1 2\r\n1 2\r\n",
                "5\r\n"
            ],
            [
                "2\r\n1 2\r\n2 1\r\n",
                "5\r\n"
            ]
        ]
    }
]