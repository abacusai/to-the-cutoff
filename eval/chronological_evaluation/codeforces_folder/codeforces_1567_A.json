[
    {
        "name": "Domino Disaster",
        "description": "Alice has a grid with \n    2\n rows and \n    n\n columns. She fully covers the\ngrid using \n    n\n dominoes of size \n    1 \n    \u00d7 2\n \u2014 Alice may place them\nvertically or horizontally, and each cell should be covered by exactly one\ndomino. Now, she decided to show one row of the grid to Bob. Help Bob and\nfigure out what the other row of the grid looks like! Input The input consists\nof multiple test cases. The first line contains an integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 5000\n) \u2014 the number of test cases. The description of the\ntest cases follows. The first line of each test case contains an integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 100\n) \u2014 the width of the grid. The second line\nof each test case contains a string \n    s\n consisting of \n    n\n characters,\neach of which is either L, R, U, or D, representing the left, right, top, or\nbottom half of a domino, respectively (see notes for better understanding).\nThis string represents one of the rows of the grid. Additional constraint on\nthe input: each input corresponds to at least one valid tiling. Output For\neach test case, output one string \u2014 the other row of the grid, using the same\nformat as the input string. If there are multiple answers, print any. Example\nInput 4 1 U 2 LR 5 LRDLR 6 UUUUUU Output D LR LRULR DDDDDD Note In the first\ntest case, Alice shows Bob the top row, the whole grid may look like: In the\nsecond test case, Alice shows Bob the bottom row, the whole grid may look\nlike: In the third test case, Alice shows Bob the bottom row, the whole grid\nmay look like: In the fourth test case, Alice shows Bob the top row, the whole\ngrid may look like:\n\n",
        "cf_contest_id": 1567,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1\r\nU\r\n2\r\nLR\r\n5\r\nLRDLR\r\n6\r\nUUUUUU\r\n",
                "D\r\nLR\r\nLRULR\r\nDDDDDD\r\n\r\n"
            ]
        ],
        "private_cases": []
    }
]