[
    {
        "name": "Interactive Bulls and Cows (Easy)",
        "description": "This problem is a little bit unusual. Here you are to implement an interaction\nwith a testing system. That means that you can make queries and get responses\nin the online mode. Please be sure to use the stream flushing operation after\neach query's output in order not to leave part of your output in some buffer.\nFor example, in C++ you've got to use the fflush(stdout) function, in Java \u2014\ncall System.out.flush(), and in Pascal \u2014 flush(output). Bulls and Cows (also\nknown as Cows and Bulls or Pigs and Bulls or Bulls and Cleots) is an old code-\nbreaking paper and pencil game for two players, predating the similar\ncommercially marketed board game Mastermind. On a sheet of paper, the first\nplayer thinks a secret string. This string consists only of digits and has the\nlength 4. The digits in the string must be all different, no two or more equal\ndigits are allowed. Then the second player tries to guess his opponent's\nstring. For every guess the first player gives the number of matches. If the\nmatching digits are on their right positions, they are \"bulls\", if on\ndifferent positions, they are \"cows\". Thus a response is a pair of numbers \u2014\nthe number of \"bulls\" and the number of \"cows\". A try can contain equal\ndigits. More formally, let's the secret string is s and the second player are\ntrying to guess it with a string x. The number of \"bulls\" is a number of such\npositions i (1 \u2264 i \u2264 4) where s[i] = x[i]. The number of \"cows\" is a number of\nsuch digits c that s contains c in the position i (i.e. s[i] = c), x contains\nc, but x[i] \u2260 c. For example, the secret string is \"0427\", the opponent's try\nis \"0724\", then the answer is 2 bulls and 2 cows (the bulls are \"0\" and \"2\",\nthe cows are \"4\" and \"7\"). If the secret string is \"0123\", the opponent's try\nis \"0330\", then the answer is 1 bull and 1 cow. In this problem you are to\nguess the string s that the system has chosen. You only know that the chosen\nstring consists of 4 distinct digits. You can make queries to the testing\nsystem, each query is the output of a single 4-digit string. The answer to the\nquery is the number of bulls and number of cows. If the system's response\nequals \"4 0\", that means the interaction with your problem is over and the\nprogram must terminate. That is possible for two reasons \u2014 the program either\nguessed the number x or made an invalid action (for example, printed letters\ninstead of digits). Your program is allowed to do at most 50 queries. You can\nhack solutions of other participants providing a 4-digit string containing\ndistinct digits \u2014 the secret string. Input To read answers to the queries, the\nprogram must use the standard input. The program will receive pairs of non-\nnegative integers in the input, one pair per line. The first number in a pair\nis a number of bulls and the second one is a number of cows of the string s\nand the string xi printed by your program. If the system response equals \"4\n0\", then your solution should terminate. The testing system will let your\nprogram read the i-th pair of integers from the input only after your program\ndisplays the corresponding system query in the output: prints value xi in a\nsingle line and executes operation flush. Output The program must use the\nstandard output to print queries. Your program must output requests \u2014 4-digit\nstrings x1, x2, ..., one per line. After the output of each line the program\nmust execute flush operation. The program should read the answer to the query\nfrom the standard input. Your program is allowed to do at most 50 queries.\nExamples Input 0 1 2 0 1 1 0 4 2 1 4 0 Output 8000 0179 3159 3210 0112 0123\nNote The secret string s in the example is \"0123\".\n\n",
        "cf_contest_id": 753,
        "cf_index": "B",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "0123\r\n",
                "34\r\n"
            ]
        ],
        "private_cases": [
            [
                "1234\r\n",
                "35\r\n"
            ],
            [
                "9876\r\n",
                "37\r\n"
            ],
            [
                "7158\r\n",
                "39\r\n"
            ],
            [
                "7590\r\n",
                "30\r\n"
            ],
            [
                "7325\r\n",
                "36\r\n"
            ],
            [
                "7524\r\n",
                "35\r\n"
            ],
            [
                "7269\r\n",
                "40\r\n"
            ],
            [
                "7802\r\n",
                "33\r\n"
            ],
            [
                "7436\r\n",
                "37\r\n"
            ],
            [
                "7190\r\n",
                "30\r\n"
            ],
            [
                "7390\r\n",
                "30\r\n"
            ],
            [
                "2548\r\n",
                "39\r\n"
            ],
            [
                "2193\r\n",
                "34\r\n"
            ],
            [
                "2491\r\n",
                "32\r\n"
            ],
            [
                "2469\r\n",
                "40\r\n"
            ],
            [
                "2659\r\n",
                "40\r\n"
            ],
            [
                "2405\r\n",
                "36\r\n"
            ],
            [
                "2058\r\n",
                "39\r\n"
            ],
            [
                "2580\r\n",
                "29\r\n"
            ],
            [
                "2316\r\n",
                "37\r\n"
            ],
            [
                "2516\r\n",
                "37\r\n"
            ],
            [
                "8796\r\n",
                "37\r\n"
            ],
            [
                "8534\r\n",
                "35\r\n"
            ],
            [
                "9067\r\n",
                "38\r\n"
            ],
            [
                "8712\r\n",
                "33\r\n"
            ],
            [
                "9023\r\n",
                "34\r\n"
            ],
            [
                "8645\r\n",
                "36\r\n"
            ],
            [
                "8623\r\n",
                "34\r\n"
            ],
            [
                "8923\r\n",
                "34\r\n"
            ],
            [
                "8567\r\n",
                "38\r\n"
            ],
            [
                "8756\r\n",
                "37\r\n"
            ],
            [
                "0351\r\n",
                "32\r\n"
            ],
            [
                "9863\r\n",
                "34\r\n"
            ],
            [
                "0518\r\n",
                "39\r\n"
            ],
            [
                "0263\r\n",
                "34\r\n"
            ],
            [
                "0462\r\n",
                "33\r\n"
            ],
            [
                "0429\r\n",
                "40\r\n"
            ],
            [
                "0629\r\n",
                "40\r\n"
            ],
            [
                "0374\r\n",
                "35\r\n"
            ],
            [
                "3209\r\n",
                "40\r\n"
            ]
        ]
    }
]