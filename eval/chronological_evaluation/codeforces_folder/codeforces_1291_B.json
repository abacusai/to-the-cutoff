[
    {
        "name": "Array Sharpening",
        "description": "You're given an array \n    a_1, \n    \u2026, a_n\n of \n    n\n non-negative\nintegers. Let's call it sharpened if and only if there exists an integer \n    1\n    \n    \u2264 k \n    \u2264 n\n such that \n    a_1 < a_2 < \n    \u2026 < a_k\n and \n    a_k >\n    a_k+1 > \n    \u2026 > a_n\n. In particular, any strictly increasing or\nstrictly decreasing array is sharpened. For example: The arrays \n    [4]\n,\n\n    [0, 1]\n, \n    [12, 10, 8]\n and \n    [3, 11, 15, 9, 7, 4]\n are sharpened;\nThe arrays \n    [2, 8, 2, 8, 6, 5]\n, \n    [0, 1, 1, 0]\n and \n    [2, 5, 6, 9, 8,\n    8]\n are not sharpened. You can do the following operation as many times as\nyou want: choose any strictly positive element of the array, and decrease it\nby one. Formally, you can choose any \n    i\n (\n    1 \n    \u2264 i \n    \u2264 n\n) such\nthat \n    a_i>0\n and assign \n    a_i := a_i - 1\n. Tell if it's possible to\nmake the given array sharpened using some number (possibly zero) of these\noperations. Input The input consists of multiple test cases. The first line\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 15\n     000\n) \u2014 the\nnumber of test cases. The description of the test cases follows. The first\nline of each test case contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 3\n    \n    \u00b7 10^5\n). The second line of each test case contains a sequence of\n\n    n\n non-negative integers \n    a_1, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264\n    10^9\n). It is guaranteed that the sum of \n    n\n over all test cases does\nnot exceed \n    3 \n    \u00b7 10^5\n. Output For each test case, output a single\nline containing \"Yes\" (without quotes) if it's possible to make the given\narray sharpened using the described operations, or \"No\" (without quotes)\notherwise. Example Input 10 1 248618 3 12 10 8 6 100 11 15 9 7 8 4 0 1 1 0 2 0\n0 2 0 1 2 1 0 2 1 1 3 0 1 0 3 1 0 1 Output Yes Yes Yes No No Yes Yes Yes Yes\nNo Note In the first and the second test case of the first test, the given\narray is already sharpened. In the third test case of the first test, we can\ntransform the array into \n    [3, 11, 15, 9, 7, 4]\n (decrease the first\nelement \n    97\n times and decrease the last element \n    4\n times). It is\nsharpened because \n    3 < 11 < 15\n and \n    15 > 9 > 7 > 4\n. In the fourth\ntest case of the first test, it's impossible to make the given array\nsharpened.\n\n",
        "cf_contest_id": 1291,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10\r\n1\r\n248618\r\n3\r\n12 10 8\r\n6\r\n100 11 15 9 7 8\r\n4\r\n0 1 1 0\r\n2\r\n0 0\r\n2\r\n0 1\r\n2\r\n1 0\r\n2\r\n1 1\r\n3\r\n0 1 0\r\n3\r\n1 0 1\r\n",
                "Yes\r\nYes\r\nYes\r\nNo\r\nNo\r\nYes\r\nYes\r\nYes\r\nYes\r\nNo\r\n"
            ]
        ],
        "private_cases": []
    }
]