[
    {
        "name": "MUH and Cube Walls",
        "description": "Polar bears Menshykov and Uslada from the zoo of St. Petersburg and elephant\nHorace from the zoo of Kiev got hold of lots of wooden cubes somewhere. They\nstarted making cube towers by placing the cubes one on top of the other. They\ndefined multiple towers standing in a line as a wall. A wall can consist of\ntowers of different heights. Horace was the first to finish making his wall.\nHe called his wall an elephant. The wall consists of w towers. The bears also\nfinished making their wall but they didn't give it a name. Their wall consists\nof n towers. Horace looked at the bears' tower and wondered: in how many parts\nof the wall can he \"see an elephant\"? He can \"see an elephant\" on a segment of\nw contiguous towers if the heights of the towers on the segment match as a\nsequence the heights of the towers in Horace's wall. In order to see as many\nelephants as possible, Horace can raise and lower his wall. He even can lower\nthe wall below the ground level (see the pictures to the samples for\nclarification). Your task is to count the number of segments where Horace can\n\"see an elephant\". Input The first line contains two integers n and w (1 \u2264 n,\nw \u2264 2\u00b710^5) \u2014 the number of towers in the bears' and the elephant's walls\ncorrespondingly. The second line contains n integers ai (1 \u2264 ai \u2264 10^9) \u2014 the\nheights of the towers in the bears' wall. The third line contains w integers\nbi (1 \u2264 bi \u2264 10^9) \u2014 the heights of the towers in the elephant's wall. Output\nPrint the number of segments in the bears' wall where Horace can \"see an\nelephant\". Examples Input 13 5 2 4 5 5 4 3 2 2 2 3 3 2 1 3 4 4 3 2 Output 2\nNote The picture to the left shows Horace's wall from the sample, the picture\nto the right shows the bears' wall. The segments where Horace can \"see an\nelephant\" are in gray.\n\n",
        "cf_contest_id": 471,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "string suffix structures",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "13 5\r\n2 4 5 5 4 3 2 2 2 3 3 2 1\r\n3 4 4 3 2\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 1\r\n8 71 1 24 2\r\n31\r\n",
                "5\r\n"
            ],
            [
                "6 3\r\n2 2 2 2 2 2\r\n5 5 5\r\n",
                "4\r\n"
            ],
            [
                "1 1\r\n576560149\r\n691846236\r\n",
                "1\r\n"
            ],
            [
                "10 5\r\n5 10 8 10 11 9 11 12 10 15\r\n4 2 4 5 3\r\n",
                "2\r\n"
            ],
            [
                "10 10\r\n6 8 1 2 5 1 4 24 2 4\r\n6 8 1 2 5 1 4 24 2 4\r\n",
                "1\r\n"
            ],
            [
                "10 10\r\n6 8 1 2 5 1 14 24 12 4\r\n7 9 2 3 6 2 15 25 13 5\r\n",
                "1\r\n"
            ],
            [
                "8 4\r\n1 2 3 4 5 6 7 8\r\n10 11 12 13\r\n",
                "5\r\n"
            ],
            [
                "10 5\r\n172960147 951061917 502625539 319177159 720665763 402410416 880790711 734191412 452846733 449904402\r\n640219326 792464591 173792179 691347674 125427306\r\n",
                "0\r\n"
            ],
            [
                "10 3\r\n2 3 3 2 1 1 3 1 3 1\r\n2 1 2\r\n",
                "0\r\n"
            ],
            [
                "10 5\r\n260725416 260725506 260725422 260725512 260725428 260725518 260725434 260725524 260725440 260725530\r\n925033135 925033225 925033141 925033231 925033147\r\n",
                "3\r\n"
            ],
            [
                "2 2\r\n1000000000 10\r\n1 20\r\n",
                "0\r\n"
            ],
            [
                "7 3\r\n1 1 1 1 1 1 1\r\n1000 1256 1512\r\n",
                "0\r\n"
            ],
            [
                "3 3\r\n1 132 3\r\n2 1 3\r\n",
                "0\r\n"
            ],
            [
                "53 3\r\n1 3 4 4 5 7 10 14 19 25 32 40 49 59 70 82 95 109 124 140 157 175 194 214 235 257 280 304 329 355 382 410 439 469 500 532 565 599 634 670 707 745 784 824 865 907 950 994 1039 1085 1132 1180 1229\r\n1 2 40\r\n",
                "0\r\n"
            ]
        ]
    }
]