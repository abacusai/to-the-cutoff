[
    {
        "name": "Minimum Array",
        "description": "You are given two arrays \n    a\n and \n    b\n, both of length \n    n\n. All\nelements of both arrays are from \n    0\n to \n    n-1\n. You can reorder\nelements of the array \n    b\n (if you want, you may leave the order of\nelements as it is). After that, let array \n    c\n be the array of length\n\n    n\n, the \n    i\n-th element of this array is \n    c_i = (a_i + b_i) \n    %\n    n\n, where \n    x \n    % y\n is \n    x\n modulo \n    y\n. Your task is to reorder\nelements of the array \n    b\n to obtain the lexicographically minimum possible\narray \n    c\n. Array \n    x\n of length \n    n\n is lexicographically less than\narray \n    y\n of length \n    n\n, if there exists such \n    i\n (\n    1 \n    \u2264 i\n    \n    \u2264 n\n), that \n    x_i < y_i\n, and for any \n    j\n (\n    1 \n    \u2264 j < i\n)\n\n    x_j = y_j\n. Input The first line of the input contains one integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of elements in\n\n    a\n, \n    b\n and \n    c\n. The second line of the input contains \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i < n\n), where \n    a_i\n\nis the \n    i\n-th element of \n    a\n. The third line of the input contains\n\n    n\n integers \n    b_1, b_2, \n    \u2026, b_n\n (\n    0 \n    \u2264 b_i < n\n), where\n\n    b_i\n is the \n    i\n-th element of \n    b\n. Output Print the\nlexicographically minimum possible array \n    c\n. Recall that your task is to\nreorder elements of the array \n    b\n and obtain the lexicographically minimum\npossible array \n    c\n, where the \n    i\n-th element of \n    c\n is \n    c_i =\n    (a_i + b_i) \n    % n\n. Examples Input 4 0 1 2 1 3 2 1 1 Output 1 0 0 2 Input 7\n2 5 1 5 3 4 3 2 4 3 5 6 5 1 Output 0 0 0 1 0 2 4\n\n",
        "cf_contest_id": 1157,
        "cf_index": "E",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n0 1 2 1\r\n3 2 1 1\r\n",
                "1 0 0 2 "
            ],
            [
                "7\r\n2 5 1 5 3 4 3\r\n2 4 3 5 6 5 1\r\n",
                "0 0 0 1 0 2 4 "
            ]
        ],
        "private_cases": [
            [
                "1\r\n0\r\n0\r\n",
                "0 "
            ],
            [
                "2\r\n0 0\r\n1 1\r\n",
                "1 1 "
            ],
            [
                "3\r\n0 1 1\r\n0 1 0\r\n",
                "0 1 2 "
            ],
            [
                "2\r\n1 1\r\n0 1\r\n",
                "0 1 "
            ],
            [
                "6\r\n0 2 1 5 1 4\r\n0 0 3 0 5 1\r\n",
                "0 1 1 0 1 1 "
            ],
            [
                "3\r\n2 0 0\r\n1 0 2\r\n",
                "0 0 2 "
            ],
            [
                "3\r\n2 0 0\r\n2 2 0\r\n",
                "1 0 2 "
            ],
            [
                "4\r\n1 2 1 1\r\n1 3 0 2\r\n",
                "0 0 1 2 "
            ],
            [
                "4\r\n1 2 3 2\r\n3 0 1 0\r\n",
                "0 2 0 2 "
            ],
            [
                "4\r\n1 1 0 3\r\n2 0 2 2\r\n",
                "1 3 2 1 "
            ],
            [
                "5\r\n2 1 3 0 4\r\n1 0 3 2 3\r\n",
                "0 1 0 1 2 "
            ],
            [
                "5\r\n1 3 1 2 3\r\n1 4 2 0 4\r\n",
                "0 0 0 2 4 "
            ],
            [
                "5\r\n1 4 2 1 3\r\n3 3 1 0 1\r\n",
                "1 0 0 2 1 "
            ],
            [
                "10\r\n6 3 0 5 4 5 5 5 8 5\r\n3 8 2 9 5 4 1 0 3 6\r\n",
                "0 1 0 0 0 4 6 7 1 8 "
            ]
        ]
    }
]