[
    {
        "name": "Binary Deque",
        "description": "Slavic has an array of length \n    n\n consisting only of zeroes and ones. In\none operation, he removes either the first or the last element of the array.\nWhat is the minimum number of operations Slavic has to perform such that the\ntotal sum of the array is equal to \n    s\n after performing all the\noperations? In case the sum \n    s\n can't be obtained after any amount of\noperations, you should output -1. Input The first line contains a single\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. The\nfirst line of each test case contains two integers \n    n\n and \n    s\n (\n    1\n    \n    \u2264 n, s \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the length of the array and the needed\nsum of elements. The second line of each test case contains \n    n\n integers\n\n    a_i\n (\n    0 \n    \u2264 a_i \n    \u2264 1\n) \u2014 the elements of the array. It is\nguaranteed that the sum of \n    n\n over all test cases doesn't exceed \n    2\n    \n    \u00b7 10^5\n. Output For each test case, output a single integer \u2014 the\nminimum amount of operations required to have the total sum of the array equal\nto \n    s\n, or -1 if obtaining an array with sum \n    s\n isn't possible.\nExample Input 7 3 1 1 0 0 3 1 1 1 0 9 3 0 1 0 1 1 1 0 0 1 6 4 1 1 1 1 1 1 5 1\n0 0 1 1 0 16 2 1 1 0 0 1 0 0 1 1 0 0 0 0 0 1 1 6 3 1 0 1 0 0 0 Output 0 1 3 2\n2 7 -1 Note In the first test case, the sum of the whole array is \n    1\n from\nthe beginning, so we don't have to make any operations. In the second test\ncase, the sum of the array is \n    2\n and we want it to be equal to \n    1\n,\nso we should remove the first element. The array turns into \n    [1, 0]\n,\nwhich has a sum equal to \n    1\n. In the third test case, the sum of the array\nis \n    5\n and we need it to be \n    3\n. We can obtain such a sum by removing\nthe first two elements and the last element, doing a total of three\noperations. The array turns into \n    [0, 1, 1, 1, 0, 0]\n, which has a sum\nequal to \n    3\n.\n\n",
        "cf_contest_id": 1692,
        "cf_index": "E",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "implementation",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n3 1\r\n1 0 0\r\n3 1\r\n1 1 0\r\n9 3\r\n0 1 0 1 1 1 0 0 1\r\n6 4\r\n1 1 1 1 1 1\r\n5 1\r\n0 0 1 1 0\r\n16 2\r\n1 1 0 0 1 0 0 1 1 0 0 0 0 0 1 1\r\n6 3\r\n1 0 1 0 0 0\r\n",
                "0\r\n1\r\n3\r\n2\r\n2\r\n7\r\n-1\r\n"
            ]
        ],
        "private_cases": []
    }
]