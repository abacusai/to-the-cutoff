[
    {
        "name": "Median",
        "description": "A median in an array with the length of n is an element which occupies\nposition number after we sort the elements in the non-decreasing order (the\narray elements are numbered starting with 1). A median of an array (2, 6, 1,\n2, 3) is the number 2, and a median of array (0, 96, 17, 23) \u2014 the number 17.\nWe define an expression as the integer part of dividing number a by number b.\nOne day Vasya showed Petya an array consisting of n integers and suggested\nfinding the array's median. Petya didn't even look at the array and said that\nit equals x. Petya is a very honest boy, so he decided to add several numbers\nto the given array so that the median of the resulting array would be equal to\nx. Petya can add any integers from 1 to 10^5 to the array, including the same\nnumbers. Of course, he can add nothing to the array. If a number is added\nmultiple times, then we should consider it the number of times it occurs. It\nis not allowed to delete of change initial numbers of the array. While Petya\nis busy distracting Vasya, your task is to find the minimum number of elements\nhe will need. Input The first input line contains two space-separated integers\nn and x (1 \u2264 n \u2264 500, 1 \u2264 x \u2264 10^5) \u2014 the initial array's length and the\nrequired median's value. The second line contains n space-separated numbers \u2014\nthe initial array. The elements of the array are integers from 1 to 10^5. The\narray elements are not necessarily different. Output Print the only integer \u2014\nthe minimum number of elements Petya needs to add to the array so that its\nmedian equals x. Examples Input 3 10 10 20 30 Output 1 Input 3 4 1 2 3 Output\n4 Note In the first sample we can add number 9 to array (10, 20, 30). The\nresulting array (9, 10, 20, 30) will have a median in position , that is, 10.\nIn the second sample you should add numbers 4, 5, 5, 5. The resulting array\nhas median equal to 4.\n\n",
        "cf_contest_id": 166,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 10\r\n10 20 30\r\n",
                "1\r\n"
            ],
            [
                "3 4\r\n1 2 3\r\n",
                "4\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 2\r\n3 2\r\n",
                "0\r\n"
            ],
            [
                "5 1\r\n1 1 2 1 2\r\n",
                "0\r\n"
            ],
            [
                "5 4\r\n5 5 4 3 5\r\n",
                "1\r\n"
            ],
            [
                "10 2\r\n2 2 1 3 2 1 2 1 1 3\r\n",
                "0\r\n"
            ],
            [
                "10 55749\r\n46380 58202 54935 26290 18295 83040 6933 89652 75187 93963\r\n",
                "1\r\n"
            ],
            [
                "10 809\r\n949 31 175 118 640 588 809 398 792 743\r\n",
                "7\r\n"
            ],
            [
                "50 1\r\n1 2 1 2 1 1 1 2 2 2 2 2 1 1 2 2 2 2 1 2 2 2 1 2 1 1 2 1 1 1 2 2 2 2 2 2 2 2 1 2 2 1 1 1 2 2 1 2 2 2\r\n",
                "12\r\n"
            ],
            [
                "100 6\r\n7 5 2 8 4 9 4 8 6 1 7 8 7 8 1 5 4 10 9 10 7 5 6 2 1 6 9 10 6 5 10 9 9 5 1 4 4 5 4 4 1 1 6 7 4 9 3 5 6 5 6 3 7 6 9 4 4 8 7 10 6 10 4 6 6 5 1 9 6 7 10 1 9 4 5 3 7 7 4 4 7 4 7 3 3 7 2 5 5 3 8 9 6 9 4 5 5 9 1 7\r\n",
                "0\r\n"
            ],
            [
                "1 1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "1 2\r\n1\r\n",
                "2\r\n"
            ],
            [
                "1 1\r\n2\r\n",
                "1\r\n"
            ],
            [
                "4 1\r\n2 3 4 5\r\n",
                "4\r\n"
            ],
            [
                "9 228\r\n1 1 1 1 1 1 228 228 228\r\n",
                "4\r\n"
            ]
        ]
    }
]