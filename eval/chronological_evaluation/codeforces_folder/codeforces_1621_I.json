[
    {
        "name": "Two Sequences",
        "description": "Consider an array of integers \n    C = [c_1, c_2, \n    \u2026, c_n]\n of length\n\n    n\n. Let's build the sequence of arrays \n    D_0, D_1, D_2, \n    \u2026,\n    D_n\n of length \n    n+1\n in the following way: The first element of this\nsequence will be equals \n    C\n: \n    D_0 = C\n. For each \n    1 \n    \u2264 i \n    \u2264\n    n\n array \n    D_i\n will be constructed from \n    D_i-1\n in the following\nway: Let's find the lexicographically smallest subarray of \n    D_i-1\n of\nlength \n    i\n. Then, the first \n    n-i\n elements of \n    D_i\n will be equals\nto the corresponding \n    n-i\n elements of array \n    D_i-1\n and the last\n\n    i\n elements of \n    D_i\n will be equals to the corresponding elements of\nthe found subarray of length \n    i\n. Array \n    x\n is subarray of array\n\n    y\n, if \n    x\n can be obtained by deletion of several (possibly, zero or\nall) elements from the beginning of \n    y\n and several (possibly, zero or\nall) elements from the end of \n    y\n. For array \n    C\n let's denote array\n\n    D_n\n as \n    op(C)\n. Alice has an array of integers \n    A = [a_1, a_2,\n    \n    \u2026, a_n]\n of length \n    n\n. She will build the sequence of arrays\n\n    B_0, B_1, \n    \u2026, B_n\n of length \n    n+1\n in the following way: The\nfirst element of this sequence will be equals \n    A\n: \n    B_0 = A\n. For each\n\n    1 \n    \u2264 i \n    \u2264 n\n array \n    B_i\n will be equals \n    op(B_i-1)\n,\nwhere \n    op\n is the transformation described above. She will ask you \n    q\n\nqueries about elements of sequence of arrays \n    B_0, B_1, \n    \u2026, B_n\n.\nEach query consists of two integers \n    i\n and \n    j\n, and the answer to\nthis query is the value of the \n    j\n-th element of array \n    B_i\n. Input\nThe first line contains the single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    10^5\n) \u2014 the length of array \n    A\n. The second line contains \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n) \u2014 the\narray \n    A\n. The third line contains the single integer \n    q\n (\n    1 \n    \u2264\n    q \n    \u2264 10^6\n) \u2014 the number of queries. Each of the next \n    q\n lines\ncontains two integers \n    i\n, \n    j\n (\n    1 \n    \u2264 i, j \n    \u2264 n\n) \u2014\nparameters of queries. Output Output \n    q\n integers: values of \n    B_i,\n    j\n for required \n    i\n, \n    j\n. Example Input 4 2 1 3 1 4 1 1 1 2 1 3 1 4\nOutput 2 1 1 3 Note In the first test case \n    B_0 = A = [2, 1, 3, 1]\n.\n\n    B_1\n is constructed in the following way: Initially, \n    D_0 = [2, 1, 3,\n    1]\n. For \n    i=1\n the lexicographically smallest subarray of \n    D_0\n of\nlength \n    1\n is \n    [1]\n, so \n    D_1\n will be \n    [2, 1, 3, 1]\n. For\n\n    i=2\n the lexicographically smallest subarray of \n    D_1\n of length\n\n    2\n is \n    [1, 3]\n, so \n    D_2\n will be \n    [2, 1, 1, 3]\n. For\n\n    i=3\n the lexicographically smallest subarray of \n    D_2\n of length\n\n    3\n is \n    [1, 1, 3]\n, so \n    D_3\n will be \n    [2, 1, 1, 3]\n. For\n\n    i=4\n the lexicographically smallest subarray of \n    D_3\n of length\n\n    4\n is \n    [2, 1, 1, 3]\n, so \n    D_4\n will be \n    [2, 1, 1, 3]\n. So,\n\n    B_1 = op(B_0) = op([2, 1, 3, 1]) = [2, 1, 1, 3]\n.\n\n",
        "cf_contest_id": 1621,
        "cf_index": "I",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "hashing",
            "string suffix structures"
        ],
        "time_limit_seconds": 8.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2 1 3 1\r\n4\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n",
                "2\r\n1\r\n1\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "20\r\n1 2 1 1 3 1 1 2 1 1 2 2 1 3 1 1 1 2 3 1\r\n30\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n1 9\r\n1 10\r\n1 11\r\n1 12\r\n1 13\r\n1 14\r\n1 15\r\n1 16\r\n1 17\r\n1 18\r\n1 19\r\n1 20\r\n2 3\r\n2 5\r\n2 8\r\n2 12\r\n2 20\r\n3 5\r\n3 9\r\n15 2\r\n18 18\r\n20 20\r\n",
                "1\r\n1\r\n2\r\n1\r\n1\r\n1\r\n1\r\n1\r\n3\r\n1\r\n1\r\n1\r\n1\r\n1\r\n2\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "10\r\n1 2 1 1 2 1 2 1 2 2\r\n10\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n1 9\r\n1 10\r\n",
                "1\r\n1\r\n2\r\n1\r\n1\r\n1\r\n1\r\n1\r\n2\r\n1\r\n"
            ],
            [
                "1\r\n1\r\n1\r\n1 1\r\n",
                "1\r\n"
            ],
            [
                "6\r\n2 2 1 1 1 1\r\n18\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n2 1\r\n2 2\r\n2 3\r\n2 4\r\n2 5\r\n2 6\r\n3 1\r\n3 2\r\n3 3\r\n3 4\r\n3 5\r\n3 6\r\n",
                "2\r\n2\r\n1\r\n1\r\n1\r\n1\r\n2\r\n2\r\n1\r\n1\r\n1\r\n1\r\n2\r\n2\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "4\r\n2 2 2 1\r\n1\r\n1 4\r\n",
                "1\r\n"
            ],
            [
                "10\r\n2 2 2 2 2 2 2 2 2 1\r\n1\r\n1 10\r\n",
                "1\r\n"
            ]
        ]
    }
]