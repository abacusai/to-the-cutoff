[
    {
        "name": "Arpa\u2019s letter-marked tree and Mehrdad\u2019s Dokhtar-kosh paths",
        "description": "Just in case somebody missed it: we have wonderful girls in Arpa\u2019s land. Arpa\nhas a rooted tree (connected acyclic graph) consisting of n vertices. The\nvertices are numbered 1 through n, the vertex 1 is the root. There is a letter\nwritten on each edge of this tree. Mehrdad is a fan of Dokhtar-kosh things. He\ncall a string Dokhtar-kosh, if we can shuffle the characters in string such\nthat it becomes palindrome. He asks Arpa, for each vertex v, what is the\nlength of the longest simple path in subtree of v that form a Dokhtar-kosh\nstring. Input The first line contains integer n (1 \u2264 n \u2264 5\u00b710^5) \u2014 the number\nof vertices in the tree. (n - 1) lines follow, the i-th of them contain an\ninteger pi + 1 and a letter ci + 1 (1 \u2264 pi + 1 \u2264 i, ci + 1 is lowercase\nEnglish letter, between a and v, inclusively), that mean that there is an edge\nbetween nodes pi + 1 and i + 1 and there is a letter ci + 1 written on this\nedge. Output Print n integers. The i-th of them should be the length of the\nlongest simple path in subtree of the i-th vertex that form a Dokhtar-kosh\nstring. Examples Input 4 1 s 2 a 3 s Output 3 1 1 0 Input 5 1 a 2 h 1 a 4 h\nOutput 4 1 0 1 0\n\n",
        "cf_contest_id": 741,
        "cf_index": "D",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 s\r\n2 a\r\n3 s\r\n",
                "3 1 1 0\r\n"
            ],
            [
                "5\r\n1 a\r\n2 h\r\n1 a\r\n4 h\r\n",
                "4 1 0 1 0\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n1 d\r\n1 d\r\n2 d\r\n3 e\r\n1 d\r\n1 d\r\n2 b\r\n7 e\r\n4 c\r\n",
                "4 1 1 1 0 0 1 0 0 0\r\n"
            ],
            [
                "10\r\n1 d\r\n2 b\r\n3 e\r\n2 d\r\n3 d\r\n4 a\r\n2 a\r\n7 b\r\n9 a\r\n",
                "5 5 3 3 0 0 1 0 1 0\r\n"
            ],
            [
                "10\r\n1 b\r\n2 a\r\n3 b\r\n4 d\r\n5 d\r\n5 b\r\n7 d\r\n5 d\r\n1 b\r\n",
                "7 5 4 3 3 0 1 0 0 0\r\n"
            ],
            [
                "10\r\n1 b\r\n2 a\r\n3 c\r\n4 d\r\n5 a\r\n3 c\r\n7 d\r\n6 e\r\n6 c\r\n",
                "5 5 5 1 1 1 1 0 0 0\r\n"
            ],
            [
                "10\r\n1 b\r\n2 d\r\n2 a\r\n4 b\r\n1 a\r\n2 e\r\n3 e\r\n2 c\r\n6 c\r\n",
                "5 3 1 1 0 1 0 0 0 0\r\n"
            ],
            [
                "1\r\n",
                "0\r\n"
            ],
            [
                "2\r\n1 s\r\n",
                "1 0\r\n"
            ],
            [
                "3\r\n1 e\r\n2 e\r\n",
                "2 1 0\r\n"
            ]
        ]
    }
]