[
    {
        "name": "Magician and Pigs (Easy Version)",
        "description": "This is the easy version of the problem. The only difference between the two\nversions is the constraint on \n    n\n and \n    x\n. You can make hacks only if\nboth versions of the problem are solved. Little09 has been interested in magic\nfor a long time, and it's so lucky that he meets a magician! The magician will\nperform \n    n\n operations, each of them is one of the following three:\n\n    1\n     x\n: Create a pig with \n    x\n Health Points. \n    2\n     x\n: Reduce\nthe Health Point of all living pigs by \n    x\n. \n    3\n: Repeat all previous\noperations. Formally, assuming that this is the \n    i\n-th operation in the\noperation sequence, perform the first \n    i-1\n operations (including \"Repeat\"\noperations involved) in turn.A pig will die when its Health Point is less than\nor equal to \n    0\n. Little09 wants to know how many living pigs there are\nafter all the operations. Please, print the answer modulo\n\n    998\n     244\n     353\n. Input The first line contains a single integer\n\n    n\n (\n    1\n    \u2264 n\n    \u2264 2\n    \u00b7 10^5\n) \u2014 the number of operations. Each\nof the following \n    n\n lines contains an operation given in the form\ndescribed in the problem statement. It's guaranteed that \n    1\n    \u2264 x\n    \u2264\n    2\n    \u00b7 10^5\n in operations of the first two types. Output Print a single\ninteger \u2014 the number of living pigs after all the operations, modulo\n\n    998\n     244\n     353\n. Examples Input 4 1 8 2 3 3 3 Output 2 Input 6 1 5 1 6\n2 2 3 1 4 3 Output 5 Input 12 2 1 1 15 1 9 3 1 12 2 2 1 13 3 2 1 1 9 1 8 3\nOutput 17 Note In the first example, the operations are equivalent to\nrepeating four times: create a pig with \n    8\n Health Points and then reduce\nthe Health Points of all living pigs by \n    3\n. It is easy to find that there\nare two living pigs in the end with \n    2\n and \n    5\n Health Points.\n\n",
        "cf_contest_id": 1774,
        "cf_index": "F1",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 8\r\n2 3\r\n3\r\n3\r\n",
                "2\r\n"
            ],
            [
                "6\r\n1 5\r\n1 6\r\n2 2\r\n3\r\n1 4\r\n3\r\n",
                "5\r\n"
            ],
            [
                "12\r\n2 1\r\n1 15\r\n1 9\r\n3\r\n1 12\r\n2 2\r\n1 13\r\n3\r\n2 1\r\n1 9\r\n1 8\r\n3\r\n",
                "17\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n3\r\n",
                "0\r\n"
            ],
            [
                "2\r\n2 114\r\n2 514\r\n",
                "0\r\n"
            ],
            [
                "1\r\n1 1919\r\n",
                "1\r\n"
            ]
        ]
    }
]