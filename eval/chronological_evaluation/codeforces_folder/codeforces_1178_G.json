[
    {
        "name": "The Awesomest Vertex",
        "description": "You are given a rooted tree on \n    n\n vertices. The vertices are numbered\nfrom \n    1\n to \n    n\n; the root is the vertex number \n    1\n. Each vertex\nhas two integers associated with it: \n    a_i\n and \n    b_i\n. We denote the\nset of all ancestors of \n    v\n (including \n    v\n itself) by \n    R(v)\n. The\nawesomeness of a vertex \n    v\n is defined as \n    \n\n    | \n    \u2211_w \n    \u2208\n    R(v) a_w\n    | \n    \u00b7\n    |\n    \u2211_w \n    \u2208 R(v) b_w\n    |,\n\n    \n\nwhere \n    |x|\n denotes the absolute value of \n    x\n. Process \n    q\n queries\nof one of the following forms: 1 v x \u2014 increase \n    a_v\n by a positive\ninteger \n    x\n. 2 v \u2014 report the maximum awesomeness in the subtree of vertex\n\n    v\n. Input The first line contains two integers \n    n\n and \n    q\n (\n    1\n    \n    \u2264 n \n    \u2264 2\n    \u00b7 10^5, 1 \n    \u2264 q \n    \u2264 10^5\n) \u2014 the number of\nvertices in the tree and the number of queries, respectively. The second line\ncontains \n    n - 1\n integers \n    p_2, p_3, \n    \u2026, p_n\n (\n    1 \n    \u2264 p_i <\n    i\n), where \n    p_i\n means that there is an edge between vertices \n    i\n\nand \n    p_i\n. The third line contains \n    n\n integers \n    a_1, a_2, \n    \u2026,\n    a_n\n (\n    -5000 \n    \u2264 a_i \n    \u2264 5000\n), the initial values of \n    a_i\n\nfor each vertex. The fourth line contains \n    n\n integers \n    b_1, b_2,\n    \n    \u2026, b_n\n (\n    -5000 \n    \u2264 b_i \n    \u2264 5000\n), the values of \n    b_i\n\nfor each vertex. Each of the next \n    q\n lines describes a query. It has one\nof the following forms: 1 v x (\n    1 \n    \u2264 v \n    \u2264 n\n, \n    1\n    \u2264 x \n    \u2264\n    5000\n). 2 v (\n    1 \n    \u2264 v \n    \u2264 n\n). Output For each query of the second\ntype, print a single line with the maximum awesomeness in the respective\nsubtree. Example Input 5 6 1 1 2 2 10 -3 -7 -3 -10 10 3 9 3 6 2 1 2 2 1 2 6 2\n1 1 2 5 2 1 Output 100 91 169 240 Note The initial awesomeness of the vertices\nis \n    [100, 91, 57, 64, 57]\n. The most awesome vertex in the subtree of\nvertex \n    1\n (the first query) is \n    1\n, and the most awesome vertex in\nthe subtree of vertex \n    2\n (the second query) is \n    2\n. After the first\nupdate (the third query), the awesomeness changes to \n    [100, 169, 57, 160,\n    57]\n and thus the most awesome vertex in the whole tree (the fourth query)\nis now \n    2\n. After the second update (the fifth query), the awesomeness\nbecomes \n    [100, 234, 57, 240, 152]\n, hence the most awesome vertex (the\nsixth query) is now \n    4\n.\n\n",
        "cf_contest_id": 1178,
        "cf_index": "G",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 6\r\n1 1 2 2\r\n10 -3 -7 -3 -10\r\n10 3 9 3 6\r\n2 1\r\n2 2\r\n1 2 6\r\n2 1\r\n1 2 5\r\n2 1\r\n",
                "100\r\n91\r\n169\r\n240\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n\r\n-42\r\n-86\r\n2 1\r\n",
                "3612\r\n"
            ],
            [
                "2 3\r\n1\r\n0 0\r\n1 1\r\n1 1 1\r\n1 2 1\r\n2 1\r\n",
                "4\r\n"
            ],
            [
                "1 1\r\n\r\n0\r\n0\r\n1 1 1\r\n",
                ""
            ],
            [
                "8 17\r\n1 2 3 4 5 6 7\r\n4000 -4001 -1 -1 -1 -1 -1 -1\r\n1 1 1 1 1 1 1 1\r\n2 1\r\n1 1 1\r\n2 1\r\n1 1 1\r\n2 1\r\n1 1 1\r\n2 1\r\n1 1 1\r\n2 1\r\n1 1 1\r\n2 1\r\n1 1 1\r\n2 1\r\n1 1 1\r\n2 1\r\n1 1 1\r\n2 1\r\n",
                "4000\r\n4001\r\n4002\r\n4003\r\n4004\r\n4005\r\n4006\r\n4007\r\n4008\r\n"
            ],
            [
                "3 10\r\n1 1\r\n5 -5 -1\r\n-3 -3 -3\r\n1 1 5\r\n1 1 2\r\n2 3\r\n2 3\r\n1 2 1\r\n1 1 4\r\n1 2 4\r\n2 1\r\n1 3 3\r\n1 3 1\r\n",
                "66\r\n66\r\n96\r\n"
            ]
        ]
    }
]