[
    {
        "name": "The Winter Hike",
        "description": "Circular land is an \n    2n \n    \u00d7 2n\n grid. Rows of this grid are numbered\nby integers from \n    1\n to \n    2n\n from top to bottom and columns of this\ngrid are numbered by integers from \n    1\n to \n    2n\n from left to right. The\ncell \n    (x, y)\n is the cell on the intersection of row \n    x\n and column\n\n    y\n for \n    1 \n    \u2264 x \n    \u2264 2n\n and \n    1 \n    \u2264 y \n    \u2264 2n\n. There\nare \n    n^2\n of your friends in the top left corner of the grid. That is, in\neach cell \n    (x, y)\n with \n    1 \n    \u2264 x, y \n    \u2264 n\n there is exactly one\nfriend. Some of the other cells are covered with snow. Your friends want to\nget to the bottom right corner of the grid. For this in each cell \n    (x, y)\n\nwith \n    n+1 \n    \u2264 x, y \n    \u2264 2n\n there should be exactly one friend. It\ndoesn't matter in what cell each of friends will be. You have decided to help\nyour friends to get to the bottom right corner of the grid. For this, you can\ngive instructions of the following types: You select a row \n    x\n. All\nfriends in this row should move to the next cell in this row. That is, friend\nfrom the cell \n    (x, y)\n with \n    1 \n    \u2264 y < 2n\n will move to the cell\n\n    (x, y + 1)\n and friend from the cell \n    (x, 2n)\n will move to the cell\n\n    (x, 1)\n. You select a row \n    x\n. All friends in this row should move to\nthe previous cell in this row. That is, friend from the cell \n    (x, y)\n with\n\n    1 < y \n    \u2264 2n\n will move to the cell \n    (x, y - 1)\n and friend from\nthe cell \n    (x, 1)\n will move to the cell \n    (x, 2n)\n. You select a column\n\n    y\n. All friends in this column should move to the next cell in this\ncolumn. That is, friend from the cell \n    (x, y)\n with \n    1 \n    \u2264 x < 2n\n\nwill move to the cell \n    (x + 1, y)\n and friend from the cell \n    (2n, y)\n\nwill move to the cell \n    (1, y)\n. You select a column \n    y\n. All friends\nin this column should move to the previous cell in this column. That is,\nfriend from the cell \n    (x, y)\n with \n    1 < x \n    \u2264 2n\n will move to the\ncell \n    (x - 1, y)\n and friend from the cell \n    (1, y)\n will move to the\ncell \n    (2n, y)\n. Note how friends on the grid border behave in these\ninstructions. Example of applying the third operation to the second column.\nHere, colorful circles denote your friends and blue cells are covered with\nsnow. You can give such instructions any number of times. You can give\ninstructions of different types. If after any instruction one of your friends\nis in the cell covered with snow he becomes ill. In order to save your friends\nyou can remove snow from some cells before giving the first instruction: You\ncan select the cell \n    (x, y)\n that is covered with snow now and remove snow\nfrom this cell for \n    c_x, y\n coins. You can do this operation any number\nof times. You want to spend the minimal number of coins and give some\ninstructions to your friends. After this, all your friends should be in the\nbottom right corner of the grid and none of them should be ill. Please, find\nhow many coins you will spend. Input The first line contains a single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test cases. The first\nline of each test case contains the single integer \n    n\n (\n    1 \n    \u2264 n\n    \n    \u2264 250\n). Each of the next \n    2n\n lines contains \n    2n\n integers\n\n    c_i, 1, c_i, 2, \n    \u2026, c_i, 2n\n (\n    0 \n    \u2264 c_i, j\n    \u2264\n    10^9\n) \u2014 costs of removing snow from cells. If \n    c_i, j = 0\n for some\n\n    i, j\n than there is no snow in cell \n    (i, j)\n. Otherwise, cell \n    (i,\n    j)\n is covered with snow. It is guaranteed that \n    c_i, j = 0\n for \n    1\n    \n    \u2264 i, j \n    \u2264 n\n. It is guaranteed that the sum of \n    n\n over all\ntest cases doesn't exceed \n    250\n. Output For each test case output one\ninteger \u2014 the minimal number of coins you should spend. Example Input 4 1 0 8\n1 99 2 0 0 0 0 0 0 0 0 9 9 2 2 9 9 9 9 2 0 0 4 2 0 0 2 4 4 2 4 2 2 4 2 4 4 0 0\n0 0 0 0 0 2 0 0 0 0 0 0 2 0 0 0 0 0 0 2 0 0 0 0 0 0 2 0 0 0 0 0 0 2 2 0 2 2 0\n0 2 0 1 6 2 1 0 2 0 0 2 4 7 4 2 0 0 0 2 0 1 6 Output 100 22 14 42 Note In the\nfirst test case you can remove snow from the cells \n    (2, 1)\n and \n    (2,\n    2)\n for \n    100\n coins. Then you can give instructions All friends in the\nfirst collum should move to the previous cell. After this, your friend will be\nin the cell \n    (2, 1)\n. All friends in the second row should move to the\nnext cell. After this, your friend will be in the cell \n    (2, 2)\n. In the\nsecond test case you can remove all snow from the columns \n    3\n and \n    4\n\nfor \n    22\n coins. Then you can give instructions All friends in the first\nrow should move to the next cell. All friends in the first row should move to\nthe next cell. All friends in the second row should move to the next cell. All\nfriends in the second row should move to the next cell. All friends in the\nthird column should move to the next cell. All friends in the third column\nshould move to the next cell. All friends in the fourth column should move to\nthe next cell. All friends in the fourth column should move to the next cell.\nIt can be shown that none of the friends will become ill and that it is\nimpossible to spend less coins.\n\n",
        "cf_contest_id": 1621,
        "cf_index": "D",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1\r\n0 8\r\n1 99\r\n2\r\n0 0 0 0\r\n0 0 0 0\r\n9 9 2 2\r\n9 9 9 9\r\n2\r\n0 0 4 2\r\n0 0 2 4\r\n4 2 4 2\r\n2 4 2 4\r\n4\r\n0 0 0 0 0 0 0 2\r\n0 0 0 0 0 0 2 0\r\n0 0 0 0 0 2 0 0\r\n0 0 0 0 2 0 0 0\r\n0 0 0 2 2 0 2 2\r\n0 0 2 0 1 6 2 1\r\n0 2 0 0 2 4 7 4\r\n2 0 0 0 2 0 1 6\r\n",
                "100\r\n22\r\n14\r\n42\r\n"
            ]
        ],
        "private_cases": []
    }
]