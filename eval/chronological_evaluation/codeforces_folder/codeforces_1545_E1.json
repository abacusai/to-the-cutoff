[
    {
        "name": "AquaMoon and Time Stop (easy version)",
        "description": "Note that the differences between easy and hard versions are the constraints\non \n    n\n and the time limit. You can make hacks only if both versions are\nsolved. AquaMoon knew through foresight that some ghosts wanted to curse\ntourists on a pedestrian street. But unfortunately, this time, these ghosts\nwere hiding in a barrier, and she couldn't enter this barrier in a short time\nand destroy them. Therefore, all that can be done is to save any unfortunate\nperson on the street from the ghosts. The pedestrian street can be represented\nas a one-dimensional coordinate system. There is one person hanging out on the\npedestrian street. At the time \n    0\n he is at coordinate \n    x\n, moving\nwith a speed of \n    1\n unit per second. In particular, at time \n    i\n the\nperson will be at coordinate \n    x+i\n. The ghosts are going to cast \n    n\n\ncurses on the street. The \n    i\n-th curse will last from time\n\n    tl_i-1+10^-18\n to time \n    tr_i+1-10^-18\n (exclusively) and will\nkill people with coordinates from \n    l_i-1+10^-18\n to \n    r_i+1-10^-18\n\n(exclusively). Formally that means, that the person, whose coordinate is\nbetween \n    (l_i-1+10^-18,r_i+1-10^-18)\n in the time range\n\n    (tl_i-1+10^-18,tr_i+1-10^-18)\n will die. To save the person on the\nstreet, AquaMoon can stop time at any moment \n    t\n, and then move the person\nfrom his current coordinate \n    x\n to any coordinate \n    y\n (\n    t\n,\n\n    x\n and \n    y\n are not necessarily integers). The movement costs AquaMoon\n\n    |x-y|\n energy. The movement is continuous, so if there exists some cursed\narea between points \n    x\n and \n    y\n at time \n    t\n, the person will die\ntoo. AquaMoon wants to know what is the minimum amount of energy she needs to\nspend in order to save the person on the street from all \n    n\n curses. But\nshe is not good at programming. As her friend, can you help her? Input The\nfirst line contains a single integer \n    n\n (\n    1\n    \u2264 n\n    \u2264 2000\n) \u2014 the\nnumber of curses. The next line contains a single integer \n    x\n (\n    1\n    \u2264\n    x\n    \u2264 10^6\n) \u2014 the initial coordinate of the person. The following \n    n\n\nlines contain four integers \n    tl_i\n, \n    tr_i\n, \n    l_i\n, \n    r_i\n each\n(\n    1\n    \u2264 tl_i\n    \u2264 tr_i\n    \u2264 10^6\n, \n    1\n    \u2264 l_i\n    \u2264 r_i\n    \u2264 10^6\n).\nOutput Print a single integer \u2014 the minimum energy which AquaMoon needs to\nspent, rounded up to the nearest integer (in case there are two nearest\nintegers you should round the answer to the highest of them). Examples Input 2\n1 1 2 1 2 2 3 2 3 Output 2 Input 3 4 1 4 1 2 1 4 4 15 6 7 1 4 Output 8 Input 4\n3 1 5 1 1 4 10 1 4 1 2 3 13 1 10 7 19 Output 14 Input 7 5 78 96 76 91 6 16 18\n37 53 63 40 56 83 88 21 38 72 75 17 24 63 63 53 60 34 46 60 60 Output 20\n\n",
        "cf_contest_id": 1545,
        "cf_index": "E1",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "2\r\n1\r\n1 2 1 2\r\n2 3 2 3\r\n",
                "2\r\n"
            ],
            [
                "3\r\n4\r\n1 4 1 2\r\n1 4 4 15\r\n6 7 1 4\r\n",
                "8\r\n"
            ],
            [
                "4\r\n3\r\n1 5 1 1\r\n4 10 1 4\r\n1 2 3 13\r\n1 10 7 19\r\n",
                "14\r\n"
            ],
            [
                "7\r\n5\r\n78 96 76 91\r\n6 16 18 37\r\n53 63 40 56\r\n83 88 21 38\r\n72 75 17 24\r\n63 63 53 60\r\n34 46 60 60\r\n",
                "20\r\n"
            ]
        ],
        "private_cases": [
            [
                "7\r\n7\r\n16 20 5 5\r\n12 13 14 16\r\n15 18 19 21\r\n3 3 2 2\r\n4 7 14 15\r\n10 11 9 13\r\n18 22 20 22\r\n",
                "5\r\n"
            ],
            [
                "5\r\n7\r\n2 2 4 8\r\n7 11 4 7\r\n4 8 9 11\r\n10 14 7 7\r\n2 2 8 8\r\n",
                "2\r\n"
            ],
            [
                "1\r\n1\r\n1 10 1 10\r\n",
                "10\r\n"
            ]
        ]
    }
]