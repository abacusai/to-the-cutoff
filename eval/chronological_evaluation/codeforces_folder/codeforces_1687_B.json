[
    {
        "name": "Railway System",
        "description": "As for the technology in the outside world, it is really too advanced for\nGensokyo to even look up to. \u2014Yasaka Kanako, Symposium of Post-mysticism This\nis an interactive problem. Under the direct supervision of Kanako and the\nMoriya Shrine, the railway system of Gensokyo is finally finished. GSKR\n(Gensokyo Railways) consists of \n    n\n stations with \n    m\n bidirectional\ntracks connecting them. The \n    i\n-th track has length \n    l_i\n (\n    1\n    \u2264\n    l_i\n    \u2264 10^6\n). Due to budget limits, the railway system may not be\nconnected, though there may be more than one track between two stations. The\nvalue of a railway system is defined as the total length of its all tracks.\nThe maximum (or minimum) capacity of a railway system is defined as the\nmaximum (or minimum) value among all of the currently functional system's full\nspanning forest. In brief, full spanning forest of a graph is a spanning\nforest with the same connectivity as the given graph. Kanako has a simulator\nonly able to process no more than \n    2m\n queries. The input of the simulator\nis a string \n    s\n of length \n    m\n, consisting of characters 0 and/or 1.\nThe simulator will assume the \n    i\n-th track functional if \n    s_i=\n 1. The\ndevice will then tell Kanako the maximum capacity of the system in the\nsimulated state. Kanako wants to know the the minimum capacity of the system\nwith all tracks functional with the help of the simulator. The structure of\nthe railway system is fixed in advance. In other words, the interactor is not\nadaptive. Input The first and only line of input contains two integers\n\n    n,m\n (\n    2 \n    \u2264 n \n    \u2264 200\n, \n    1\n    \u2264 m \n    \u2264 500\n) \u2014 the number\nof stations and tracks. Interaction Begin the interaction by reading\n\n    n,m\n. To make a query, print \"? \n    s\n\" (without quotes, \n    s\n is a\nstring of length \n    m\n, consisting of characters 0 and/or 1). Then you\nshould read our response from standard input \u2014 the maximum capacity of the\nsystem in the simulated state. If your program has made an invalid query or\nhas run out of tries, the interactor will terminate immediately and your\nprogram will get a verdict Wrong answer. To give the final answer, print \"!\n\n    L\n\" (without the quotes, \n    L\n is the minimum capacity of the system\nwith all tracks functional). Note that giving this answer is not counted\ntowards the limit of \n    2m\n queries. After printing a query do not forget to\noutput end of line and flush the output. Otherwise, you will get Idleness\nlimit exceeded. To do this, use: fflush(stdout) or cout.flush() in C++;\nSystem.out.flush() in Java; flush(output) in Pascal; stdout.flush() in Python;\nsee documentation for other languages. Hacks The first line of input must\ncontain two integers \n    n,m\n (\n    2 \n    \u2264 n \n    \u2264 200\n, \n    1\n    \u2264 m \n    \u2264\n    500\n) \u2014 the number of stations and tracks. The next \n    m\n lines of input\nmust contain exactly \n    3\n space-separated integers \n    u_i\n, \n    v_i\n,\n\n    l_i\n (\n    1\n    \u2264 u_i,v_i \n    \u2264 n\n, \n    u_i\n     v_i\n, \n    1 \n    \u2264 l_i\n    \n    \u2264 10^6\n) \u2014 the endpoints and the length of the \n    i\n-th track.\nExample Input 5 4 0 5 9 7 Output ? 0000 ? 1110 ? 1111 ? 1101 ! 7 Note Here is\nthe graph of the example, satisfying \n    l_i=i\n.\n\n",
        "cf_contest_id": 1687,
        "cf_index": "B",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graphs",
            "greedy",
            "interactive",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 4\r\n1 2 1\r\n2 3 2\r\n1 3 3\r\n4 5 4\r\n",
                ""
            ]
        ],
        "private_cases": [
            [
                "7 10\r\n6 2 525\r\n4 2 363\r\n4 6 122\r\n5 3 492\r\n2 1 248\r\n7 6 472\r\n4 1 219\r\n5 6 37\r\n1 4 592\r\n5 6 589\r\n",
                ""
            ],
            [
                "2 1\r\n2 1 1\r\n",
                ""
            ],
            [
                "2 1\r\n2 1 277212\r\n",
                ""
            ],
            [
                "2 2\r\n1 2 1\r\n1 2 1\r\n",
                ""
            ],
            [
                "2 2\r\n2 1 307319\r\n1 2 885628\r\n",
                ""
            ],
            [
                "2 3\r\n2 1 1\r\n1 2 1\r\n1 2 1\r\n",
                ""
            ],
            [
                "2 3\r\n2 1 2\r\n1 2 2\r\n1 2 2\r\n",
                ""
            ],
            [
                "2 3\r\n2 1 185198\r\n2 1 480652\r\n2 1 494991\r\n",
                ""
            ],
            [
                "2 4\r\n1 2 1\r\n1 2 1\r\n2 1 1\r\n2 1 1\r\n",
                ""
            ],
            [
                "2 4\r\n1 2 1\r\n1 2 1\r\n1 2 2\r\n1 2 2\r\n",
                ""
            ],
            [
                "2 4\r\n1 2 2\r\n1 2 2\r\n2 1 2\r\n1 2 3\r\n",
                ""
            ],
            [
                "2 4\r\n2 1 536\r\n1 2 834\r\n1 2 275\r\n1 2 416\r\n",
                ""
            ],
            [
                "7 10\r\n6 7 5\r\n2 4 5\r\n7 2 3\r\n6 4 1\r\n5 2 3\r\n5 2 5\r\n7 5 4\r\n3 7 5\r\n7 4 5\r\n1 7 5\r\n",
                ""
            ],
            [
                "200 50\r\n84 5 3\r\n77 55 2\r\n136 80 10\r\n6 166 1\r\n74 108 9\r\n188 190 10\r\n126 137 3\r\n27 6 9\r\n112 59 1\r\n189 138 6\r\n149 64 3\r\n26 42 4\r\n177 15 1\r\n105 131 10\r\n178 170 7\r\n5 20 5\r\n61 141 9\r\n171 50 10\r\n151 70 3\r\n179 128 6\r\n70 96 3\r\n85 9 7\r\n161 11 4\r\n46 96 4\r\n117 13 10\r\n170 34 9\r\n81 119 6\r\n100 186 4\r\n44 89 5\r\n156 93 1\r\n61 71 9\r\n16 135 4\r\n195 104 7\r\n13 101 3\r\n62 83 10\r\n47 68 3\r\n78 125 4\r\n56 57 1\r\n98 57 4\r\n22 66 1\r\n43 47 6\r\n96 157 8\r\n81 144 2\r\n57 88 1\r\n62 160 8\r\n13 81 4\r\n130 76 4\r\n171 70 8\r\n31 102 5\r\n132 183 5\r\n",
                ""
            ],
            [
                "200 50\r\n109 144 1\r\n120 99 1\r\n124 195 1\r\n98 99 1\r\n6 3 1\r\n164 136 1\r\n67 102 1\r\n65 133 1\r\n87 197 1\r\n173 162 1\r\n22 37 1\r\n40 63 1\r\n46 102 1\r\n62 164 1\r\n37 51 1\r\n55 52 1\r\n148 178 1\r\n84 154 1\r\n82 165 1\r\n115 91 1\r\n4 41 1\r\n51 141 1\r\n196 53 1\r\n186 70 1\r\n145 30 1\r\n198 89 1\r\n191 49 1\r\n98 118 1\r\n14 161 1\r\n42 136 1\r\n120 163 1\r\n17 60 1\r\n30 8 1\r\n137 118 1\r\n2 25 1\r\n99 191 1\r\n196 56 1\r\n57 61 1\r\n198 189 1\r\n186 42 1\r\n89 102 1\r\n148 169 1\r\n165 196 1\r\n63 149 1\r\n75 67 1\r\n40 83 1\r\n118 192 1\r\n84 177 1\r\n43 169 1\r\n71 144 1\r\n",
                ""
            ],
            [
                "200 1\r\n142 118 516966\r\n",
                ""
            ]
        ]
    }
]