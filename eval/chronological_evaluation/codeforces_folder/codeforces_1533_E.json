[
    {
        "name": "Chess Team Forming",
        "description": "Polycarp is coaching a team for an upcoming game at the chess tournament. A\ncomplete team for the tournament should consist of \n    n+1\n members. There\nare \n    n\n members in his team, the \n    i\n-th member's skill value is\n\n    a_i\n. Polycarp is yet to choose the final member for the team. The\nopposing team has \n    n+1\n members, the \n    j\n-th member's skill value is\n\n    b_j\n. Polycarp has \n    m\n options for the final player of the team. The\n\n    k\n-th of them has a skill value \n    c_k\n. Before the game starts,\nPolycarp pairs up the members of his team with the members of the opposing\nteam. Every member of both teams is in exactly one pair. The difficulty of a\ngame for a certain player is the difference between his paired opponent's\nskill and his own skill. So if the \n    i\n-th player of the Polycarp's team is\npaired up with the \n    j\n-th member of the opposing team, then the difficulty\nis equal to \n    b_j - a_i\n. The difficulty of the game for a team is the\nmaximum difficulty of all its players. So, before the game starts, Polycarp\nwants to pair up the players in such a way that the difficulty of the game for\nhis team is minimized. For each of the \n    m\n options for the final player\nprint the smallest difficulty of the game for the team Polycarp can achieve.\nInput The first line contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n) \u2014 the number of members in the Polycarp's team. The second\nline contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i\n    \n    \u2264 10^9\n), where \n    a_i\n is the skill value of the \n    i\n-th player of\nthe Polycarp's team. The third line contains \n    n+1\n integers \n    b_1, b_2,\n    \n    \u2026, b_n+1\n (\n    1 \n    \u2264 b_j \n    \u2264 10^9\n), where \n    b_j\n is the\nskill value of the \n    j\n-th player of the opposing team. The fourth line\ncontains a single integer \n    m\n (\n    1 \n    \u2264 m \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the\nnumber of options for the final player. The fifth line contains \n    m\n\nintegers \n    c_1, c_2, \n    \u2026, c_m\n (\n    1 \n    \u2264 c_k \n    \u2264 10^9\n), where\n\n    c_k\n is the skill value of the \n    k\n-th of the options for the final\nplayer of the Polycarp's team. Output Print \n    m\n integers \u2014 the \n    k\n-th\nof them should be equal to the smallest difficulty of the game for the team\nPolycarp can achieve if he picks the \n    k\n-th option player as the final\none. Examples Input 5 10 3 4 6 1 9 4 2 5 9 8 5 1 7 6 4 8 Output 4 2 3 4 2\nInput 3 5 1 8 8 2 10 1 10 1 2 3 4 5 6 7 8 9 10 Output 3 3 3 3 3 2 2 2 1 0\nInput 1 10 10 5 2 5 15 Output 0 -5 Note In the first example the optimal\npairings for the first three options are the following. Note that there might\nbe multiple valid pairing for the minimum answer. First option: Polycarp's\nteam: 6 1 3 1 10 4 Opposing team: 9 4 2 5 9 8 The respective difficulties of\nthe game for each player are: 3, 3, -1, 4, -1, 4. The maximum is 4, thus it's\nthe difficulty of the game for the team. Second option: Polycarp's team: 10 4\n1 3 7 6 Opposing team: 9 4 2 5 9 8 Third option: Polycarp's team: 6 3 1 4 10 6\nOpposing team: 9 4 2 5 9 8\n\n",
        "cf_contest_id": 1533,
        "cf_index": "E",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "binary search",
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n10 3 4 6 1\r\n9 4 2 5 9 8\r\n5\r\n1 7 6 4 8\r\n",
                "4 2 3 4 2\r\n"
            ],
            [
                "3\r\n5 1 8\r\n8 2 10 1\r\n10\r\n1 2 3 4 5 6 7 8 9 10\r\n",
                "3 3 3 3 3 2 2 2 1 0\r\n"
            ],
            [
                "1\r\n10\r\n10 5\r\n2\r\n5 15\r\n",
                "0 -5\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n9 1 6 2 1\r\n6 9 2 2 7 10\r\n5\r\n9 2 8 10 2\r\n",
                "4 5 4 4 5\r\n"
            ],
            [
                "10\r\n6 9 6 7 6 1 10 10 9 5\r\n3 9 2 10 7 5 9 10 5 10 8\r\n10\r\n7 4 7 6 1 2 7 3 9 7\r\n",
                "2 2 2 2 2 2 2 2 1 2\r\n"
            ],
            [
                "10\r\n17 25 22 29 30 3 23 14 16 7\r\n21 27 3 24 29 16 7 22 23 16 3\r\n20\r\n10 19 15 11 21 15 10 3 4 14 25 18 5 27 22 14 5 1 16 5\r\n",
                "4 2 4 4 0 4 4 4 4 4 0 3 4 0 0 4 4 4 4 4\r\n"
            ],
            [
                "1\r\n1\r\n1 2\r\n1\r\n2\r\n",
                "0\r\n"
            ]
        ]
    }
]