[
    {
        "name": "RPD and Rap Sheet (Easy Version)",
        "description": "This is the easy version of the problem. The only difference is that here\n\n    k=2\n. You can make hacks only if both the versions of the problem are\nsolved. This is an interactive problem. Every decimal number has a base\n\n    k\n equivalent. The individual digits of a base \n    k\n number are called\n\n    k\n-its. Let's define the \n    k\n-itwise XOR of two \n    k\n-its \n    a\n\nand \n    b\n as \n    (a + b)\n     k\n. The \n    k\n-itwise XOR of two base\n\n    k\n numbers is equal to the new number formed by taking the \n    k\n-itwise\nXOR of their corresponding \n    k\n-its. The \n    k\n-itwise XOR of two decimal\nnumbers \n    a\n and \n    b\n is denoted by \n    a\n    \u2295_k b\n and is equal\nto the decimal representation of the \n    k\n-itwise XOR of the base \n    k\n\nrepresentations of \n    a\n and \n    b\n. All further numbers used in the\nstatement below are in decimal unless specified. When \n    k = 2\n (it is\nalways true in this version), the \n    k\n-itwise XOR is the same as the\nbitwise XOR. You have hacked the criminal database of Rockport Police\nDepartment (RPD), also known as the Rap Sheet. But in order to access it, you\nrequire a password. You don't know it, but you are quite sure that it lies\nbetween \n    0\n and \n    n-1\n inclusive. So, you have decided to guess it.\nLuckily, you can try at most \n    n\n times without being blocked by the\nsystem. But the system is adaptive. Each time you make an incorrect guess, it\nchanges the password. Specifically, if the password before the guess was\n\n    x\n, and you guess a different number \n    y\n, then the system changes the\npassword to a number \n    z\n such that \n    x\n    \u2295_k z=y\n. Guess the\npassword and break into the system. Input The first line of input contains a\nsingle integer \n    t\n (\n    1\n    \u2264 t\n    \u2264 10\n     000\n) denoting the number\nof test cases. \n    t\n test cases follow. The first line of each test case\ncontains two integers \n    n\n (\n    1\n    \u2264 n\n    \u2264 2\n    \u00b7 10^5\n) and\n\n    k\n (\n    k=2\n). It is guaranteed that the sum of \n    n\n over all test\ncases does not exceed \n    2\n    \u00b7 10^5\n. Interaction For each test case,\nfirst read two integers \n    n\n and \n    k\n. Then you may ask up to \n    n\n\nqueries. For each query, print a single integer \n    y\n (\n    0\n    \u2264 y\n    \u2264\n    2\n    \u00b7 10^7\n). Let the current password be \n    x\n. After that, read an\ninteger \n    r\n. If \n    x=y\n, you will read \n    r=1\n and the test case is\nsolved. You must then continue solving the remaining test cases. Else, you\nwill read \n    r=0\n. At this moment the password is changed to a number\n\n    z\n such that \n    x\n    \u2295_k z=y\n. After printing a query, do not\nforget to output the end of line and flush the output. Otherwise, you will get\nthe Idleness limit exceeded verdict. To do this, use: fflush(stdout) or\ncout.flush() in C++; System.out.flush() in Java; flush(output) in Pascal;\nstdout.flush() in Python; see documentation for other languages. If you ask an\ninvalid query or exceed \n    n\n queries, you will read \n    r=-1\n and you will\nreceive the Wrong Answer verdict. Make sure to exit immediately to avoid\nunexpected verdicts. Note that the interactor is adaptive. That is, the\noriginal password is not fixed in the beginning and may depend on your\nqueries. But it is guaranteed that at any moment there is at least one initial\npassword such that all the answers to the queries are consistent. Hacks: To\nuse hacks, use the following format of tests: The first line should contain a\nsingle integer \n    t\n (\n    1\n    \u2264 t\n    \u2264 10\n     000\n) \u2014 the number of test\ncases. The first and only line of each test case should contain two integers\n\n    n\n (\n    1\n    \u2264 n\n    \u2264 2\n    \u00b7 10^5\n) and \n    k\n (\n    k=2\n) denoting\nthe number of queries and the base respectively. The optimal original password\nis automatically decided by the adaptive interactor. You must ensure that the\nsum of \n    n\n over all test cases does not exceed \n    2\n    \u00b7 10^5\n.\nExample Input 1 5 2 0 0 1 Output 3 4 5 Note In the example test case, the\nhidden password is \n    2\n. The first query is \n    3\n. It is not equal to the\ncurrent password. So, \n    0\n is returned, and the password is changed to\n\n    1\n since \n    2\n    \u2295_2 1=3\n. The second query is \n    4\n. It is not\nequal to the current password. So, \n    0\n is returned, and the password is\nchanged to \n    5\n since \n    1\n    \u2295_2 5=4\n. The third query is \n    5\n. It\nis equal to the current password. So, \n    1\n is returned, and the job is\ndone. Note that this initial password is taken just for the sake of\nexplanation. When you submit, the interactor might behave differently because\nit is adaptive.\n\n",
        "cf_contest_id": 1543,
        "cf_index": "D1",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "constructive algorithms",
            "interactive",
            "math"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n5 2\r\n",
                ""
            ]
        ],
        "private_cases": [
            [
                "1\r\n200000 2\r\n",
                ""
            ],
            [
                "32\r\n8581 2\r\n6058 2\r\n3019 2\r\n2151 2\r\n4140 2\r\n4553 2\r\n5920 2\r\n9883 2\r\n9170 2\r\n318 2\r\n1527 2\r\n6945 2\r\n5345 2\r\n5007 2\r\n6709 2\r\n7960 2\r\n7659 2\r\n7507 2\r\n7188 2\r\n3939 2\r\n4849 2\r\n3336 2\r\n7426 2\r\n9064 2\r\n4765 2\r\n9262 2\r\n9265 2\r\n8162 2\r\n8985 2\r\n2298 2\r\n9285 2\r\n7280 2\r\n",
                ""
            ],
            [
                "18\r\n19135 2\r\n18239 2\r\n12273 2\r\n12416 2\r\n10316 2\r\n5837 2\r\n75 2\r\n14065 2\r\n19609 2\r\n10062 2\r\n4721 2\r\n13378 2\r\n5668 2\r\n2924 2\r\n14431 2\r\n2414 2\r\n18381 2\r\n14452 2\r\n",
                ""
            ],
            [
                "8\r\n17692 2\r\n10864 2\r\n23137 2\r\n40234 2\r\n13161 2\r\n7801 2\r\n45246 2\r\n36612 2\r\n",
                ""
            ],
            [
                "3\r\n41764 2\r\n97259 2\r\n54586 2\r\n",
                ""
            ],
            [
                "3\r\n104982 2\r\n915 2\r\n52978 2\r\n",
                ""
            ],
            [
                "18\r\n1 2\r\n2 2\r\n4 2\r\n8 2\r\n16 2\r\n32 2\r\n64 2\r\n128 2\r\n256 2\r\n512 2\r\n1024 2\r\n2048 2\r\n4096 2\r\n8192 2\r\n16384 2\r\n32768 2\r\n65536 2\r\n68929 2\r\n",
                ""
            ],
            [
                "2\r\n100001 2\r\n99999 2\r\n",
                ""
            ]
        ]
    }
]