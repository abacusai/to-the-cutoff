[
    {
        "name": "Buttons",
        "description": "Manao is trying to open a rather challenging lock. The lock has n buttons on\nit and to open it, you should press the buttons in a certain order to open the\nlock. When you push some button, it either stays pressed into the lock (that\nmeans that you've guessed correctly and pushed the button that goes next in\nthe sequence), or all pressed buttons return to the initial position. When all\nbuttons are pressed into the lock at once, the lock opens. Consider an example\nwith three buttons. Let's say that the opening sequence is: 2, 3, 1. If you\nfirst press buttons 1 or 3, the buttons unpress immediately. If you first\npress button 2, it stays pressed. If you press 1 after 2, all buttons unpress.\nIf you press 3 after 2, buttons 3 and 2 stay pressed. As soon as you've got\ntwo pressed buttons, you only need to press button 1 to open the lock. Manao\ndoesn't know the opening sequence. But he is really smart and he is going to\nact in the optimal way. Calculate the number of times he's got to push a\nbutton in order to open the lock in the worst-case scenario. Input A single\nline contains integer n (1 \u2264 n \u2264 2000) \u2014 the number of buttons the lock has.\nOutput In a single line print the number of times Manao has to push a button\nin the worst-case scenario. Examples Input 2 Output 3 Input 3 Output 7 Note\nConsider the first test sample. Manao can fail his first push and push the\nwrong button. In this case he will already be able to guess the right one with\nhis second push. And his third push will push the second right button. Thus,\nin the worst-case scenario he will only need 3 pushes.\n\n",
        "cf_contest_id": 268,
        "cf_index": "B",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n",
                "3\r\n"
            ],
            [
                "3\r\n",
                "7\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n",
                "14\r\n"
            ],
            [
                "1\r\n",
                "1\r\n"
            ],
            [
                "10\r\n",
                "175\r\n"
            ],
            [
                "2000\r\n",
                "1333335000\r\n"
            ],
            [
                "1747\r\n",
                "888644743\r\n"
            ],
            [
                "889\r\n",
                "117099969\r\n"
            ],
            [
                "1999\r\n",
                "1331335999\r\n"
            ],
            [
                "914\r\n",
                "127259419\r\n"
            ],
            [
                "996\r\n",
                "164675486\r\n"
            ],
            [
                "17\r\n",
                "833\r\n"
            ],
            [
                "50\r\n",
                "20875\r\n"
            ],
            [
                "91\r\n",
                "125671\r\n"
            ],
            [
                "92\r\n",
                "129858\r\n"
            ],
            [
                "256\r\n",
                "2796416\r\n"
            ],
            [
                "512\r\n",
                "22370048\r\n"
            ],
            [
                "666\r\n",
                "49235271\r\n"
            ],
            [
                "667\r\n",
                "49457383\r\n"
            ],
            [
                "314\r\n",
                "5160119\r\n"
            ],
            [
                "1241\r\n",
                "318541121\r\n"
            ],
            [
                "1500\r\n",
                "562501250\r\n"
            ],
            [
                "1837\r\n",
                "1033182073\r\n"
            ],
            [
                "1000\r\n",
                "166667500\r\n"
            ]
        ]
    }
]