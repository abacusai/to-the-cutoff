[
    {
        "name": "Divisor Paths",
        "description": "You are given a positive integer \n    D\n. Let's build the following graph from\nit: each vertex is a divisor of \n    D\n (not necessarily prime, \n    1\n and\n\n    D\n itself are also included); two vertices \n    x\n and \n    y\n (\n    x >\n    y\n) have an undirected edge between them if \n    x\n is divisible by \n    y\n\nand \n    x/y\n is a prime; the weight of an edge is the number of\ndivisors of \n    x\n that are not divisors of \n    y\n. For example, here is the\ngraph for \n    D=12\n: Edge \n    (4,12)\n has weight \n    3\n because \n    12\n\nhas divisors \n    [1,2,3,4,6,12]\n and \n    4\n has divisors \n    [1,2,4]\n.\nThus, there are \n    3\n divisors of \n    12\n that are not divisors of \n    4\n\n\u2014 \n    [3,6,12]\n. There is no edge between \n    3\n and \n    2\n because \n    3\n\nis not divisible by \n    2\n. There is no edge between \n    12\n and \n    3\n\nbecause \n    12/3=4\n is not a prime. Let the length of the path\nbetween some vertices \n    v\n and \n    u\n in the graph be the total weight of\nedges on it. For example, path \n    [(1, 2), (2, 6), (6, 12), (12, 4), (4, 2),\n    (2, 6)]\n has length \n    1+2+2+3+1+2=11\n. The empty path has length \n    0\n.\nSo the shortest path between two vertices \n    v\n and \n    u\n is the path that\nhas the minimal possible length. Two paths \n    a\n and \n    b\n are different\nif there is either a different number of edges in them or there is a position\n\n    i\n such that \n    a_i\n and \n    b_i\n are different edges. You are given\n\n    q\n queries of the following form: \n    v\n \n    u\n \u2014 calculate the number\nof the shortest paths between vertices \n    v\n and \n    u\n. The answer for\neach query might be large so print it modulo \n    998244353\n. Input The first\nline contains a single integer \n    D\n (\n    1 \n    \u2264 D \n    \u2264 10^15\n) \u2014 the\nnumber the graph is built from. The second line contains a single integer\n\n    q\n (\n    1 \n    \u2264 q \n    \u2264 3 \n    \u00b7 10^5\n) \u2014 the number of queries. Each\nof the next \n    q\n lines contains two integers \n    v\n and \n    u\n (\n    1\n    \n    \u2264 v, u \n    \u2264 D\n). It is guaranteed that \n    D\n is divisible by both\n\n    v\n and \n    u\n (both \n    v\n and \n    u\n are divisors of \n    D\n). Output\nPrint \n    q\n integers \u2014 for each query output the number of the shortest\npaths between the two given vertices modulo \n    998244353\n. Examples Input 12\n3 4 4 12 1 3 4 Output 1 3 1 Input 1 1 1 1 Output 1 Input 288807105787200 4 46\n482955026400 12556830686400 897 414 12556830686400 4443186242880 325 Output\n547558588 277147129 457421435 702277623 Note In the first example: The first\nquery is only the empty path \u2014 length \n    0\n; The second query are paths\n\n    [(12, 4), (4, 2), (2, 1)]\n (length \n    3+1+1=5\n), \n    [(12, 6), (6, 2),\n    (2, 1)]\n (length \n    2+2+1=5\n) and \n    [(12, 6), (6, 3), (3, 1)]\n (length\n\n    2+2+1=5\n). The third query is only the path \n    [(3, 1), (1, 2), (2,\n    4)]\n (length \n    1+1+1=3\n).\n\n",
        "cf_contest_id": 1334,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "graphs",
            "greedy",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "12\r\n3\r\n4 4\r\n12 1\r\n3 4\r\n",
                "1\r\n3\r\n1\r\n"
            ],
            [
                "1\r\n1\r\n1 1\r\n",
                "1\r\n"
            ],
            [
                "288807105787200\r\n4\r\n46 482955026400\r\n12556830686400 897\r\n414 12556830686400\r\n4443186242880 325\r\n",
                "547558588\r\n277147129\r\n457421435\r\n702277623\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n4\r\n1 1\r\n1 2\r\n2 1\r\n2 2\r\n",
                "1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "18\r\n36\r\n1 1\r\n1 2\r\n1 3\r\n1 6\r\n1 9\r\n1 18\r\n2 1\r\n2 2\r\n2 3\r\n2 6\r\n2 9\r\n2 18\r\n3 1\r\n3 2\r\n3 3\r\n3 6\r\n3 9\r\n3 18\r\n6 1\r\n6 2\r\n6 3\r\n6 6\r\n6 9\r\n6 18\r\n9 1\r\n9 2\r\n9 3\r\n9 6\r\n9 9\r\n9 18\r\n18 1\r\n18 2\r\n18 3\r\n18 6\r\n18 9\r\n18 18\r\n",
                "1\r\n1\r\n1\r\n2\r\n1\r\n3\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n2\r\n2\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n3\r\n1\r\n2\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "17592186044416\r\n1\r\n17592186044416 1\r\n",
                "1\r\n"
            ]
        ]
    }
]