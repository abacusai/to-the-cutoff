[
    {
        "name": "Three Chairs",
        "description": "One day Kira found \n    n\n friends from Morioh and decided to gather them\naround a table to have a peaceful conversation. The height of friend \n    i\n\nis equal to \n    a_i\n. It so happened that the height of each of the friends\nis unique. Unfortunately, there were only \n    3\n chairs in Kira's house, and\nobviously, it will not be possible to seat all friends! So, Kira has to invite\nonly \n    3\n of his friends. But everything is not so simple! If the heights\nof the lowest and the tallest of the invited friends are not coprime, then the\nfriends will play tricks on each other, which will greatly anger Kira. Kira\nbecame interested, how many ways are there to choose \n    3\n of his friends so\nthat they don't play tricks? Two ways are considered different if there is a\nfriend invited in one way, but not in the other. Formally, if Kira invites\nfriends \n    i\n, \n    j\n, and \n    k\n, then the following should be true:\n\n    (\n    min(a_i, a_j, a_k), \n    max(a_i, a_j, a_k)) = 1\n, where\n\n    (x, y)\n denotes the greatest common divisor (GCD) of the numbers\n\n    x\n and \n    y\n. Kira is not very strong in computer science, so he asks\nyou to count the number of ways to invide friends. Input The first line\ncontains the number \n    n\n (\n    3 \n    \u2264 n \n    \u2264 3\n    \u00b710^5\n) \u2014 the number\nof Kira's friends. The next line contains \n    n\n distinct integers \n    a_1,\n    a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 3\n    \u00b710^5\n) \u2014 heights of\nKira's friends. Output In a single line output the number of ways to invite\nthree friends. Examples Input 3 1 2 3 Output 1 Input 4 1 6 2 3 Output 3 Input\n4 16 4 8 2 Output 0 Input 10 10 1 6 7 9 8 4 3 5 2 Output 77 Note In the first\nexample, only one way is suitable: invite friends \n    1\n, \n    2\n, and\n\n    3\n. Here \n    1 < 2 < 3\n, and the numbers \n    1\n and \n    3\n are\ncoprime.\n\n",
        "cf_contest_id": 1780,
        "cf_index": "F",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "combinatorics",
            "data structures",
            "dp",
            "number theory",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 2 3\r\n",
                "1\r\n"
            ],
            [
                "4\r\n1 6 2 3\r\n",
                "3\r\n"
            ],
            [
                "4\r\n16 4 8 2\r\n",
                "0\r\n"
            ],
            [
                "10\r\n10 1 6 7 9 8 4 3 5 2\r\n",
                "77\r\n"
            ]
        ],
        "private_cases": [
            [
                "18\r\n1 131072 2 65536 4 32768 8 16384 16 8192 32 4096 64 2048 128 1024 256 512\r\n",
                "136\r\n"
            ],
            [
                "64\r\n1 7560 2 3780 3 2520 4 1890 5 1512 6 1260 7 1080 8 945 9 840 10 756 12 630 14 540 15 504 18 420 20 378 21 360 24 315 27 280 28 270 30 252 35 216 36 210 40 189 42 180 45 168 54 140 56 135 60 126 63 120 70 108 72 105 84 90\r\n",
                "4674\r\n"
            ],
            [
                "32\r\n1 840 2 420 3 280 4 210 5 168 6 140 7 120 8 105 10 84 12 70 14 60 15 56 20 42 21 40 24 35 28 30\r\n",
                "985\r\n"
            ],
            [
                "10\r\n71 17 72 18 25 73 54 52 81 90\r\n",
                "76\r\n"
            ],
            [
                "10\r\n969 650 61 451 520 548 923 487 255 481\r\n",
                "94\r\n"
            ],
            [
                "10\r\n4747 5091 7546 9792 2042 1028 8400 7253 2853 5982\r\n",
                "46\r\n"
            ],
            [
                "10\r\n208898 74866 226175 227573 205848 137134 241714 15002 4524 229003\r\n",
                "64\r\n"
            ],
            [
                "100\r\n70 54 10 72 81 84 56 15 27 19 43 100 49 44 52 33 63 40 95 17 58 2 51 39 22 18 82 1 16 99 32 29 24 94 9 98 5 37 47 14 42 73 41 31 79 64 12 6 53 26 68 67 89 13 90 4 21 93 46 74 75 88 66 57 23 7 25 48 92 62 30 8 50 61 38 87 71 34 97 28 80 11 60 91 3 35 86 96 36 20 59 65 83 45 76 77 78 69 85 55\r\n",
                "98499\r\n"
            ],
            [
                "100\r\n713 716 230 416 3 2 597 216 779 839 13 156 723 793 168 368 232 316 98 257 170 27 746 9 616 147 792 890 796 362 852 117 993 556 885 73 131 475 121 753 508 158 473 931 527 282 541 325 606 321 159 17 682 290 586 685 529 11 645 224 821 53 152 966 269 754 672 523 386 347 719 525 92 315 832 393 893 83 956 725 258 851 112 38 601 782 324 210 642 818 56 485 679 10 922 469 36 990 14 742\r\n",
                "99409\r\n"
            ],
            [
                "100\r\n7651 5181 1875 932 9911 9452 3114 4786 6557 2322 6175 1115 3348 7097 3354 8364 7027 388 6950 2485 3897 1516 2803 1997 614 7560 2393 9246 8814 4937 4138 3273 3098 238 7829 6075 2359 4878 1311 584 5161 7928 6594 9121 6555 9333 5490 9557 7900 1265 8180 2569 3127 6873 6913 7347 8386 9505 3611 1505 9199 917 62 4492 1321 4200 1382 5898 3042 5890 3655 5149 6978 3066 8238 3840 4501 7737 1803 5758 9203 1000 3740 753 3564 8116 785 7562 8680 2255 5492 4983 8952 8612 7397 5527 258 8494 6714 9670\r\n",
                "94965\r\n"
            ]
        ]
    }
]