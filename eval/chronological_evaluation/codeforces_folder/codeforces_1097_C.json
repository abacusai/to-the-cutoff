[
    {
        "name": "Yuhao and a Parenthesis",
        "description": "One day, Yuhao came across a problem about checking if some bracket sequences\nare correct bracket sequences. A bracket sequence is any non-empty sequence of\nopening and closing parentheses. A bracket sequence is called a correct\nbracket sequence if it's possible to obtain a correct arithmetic expression by\ninserting characters \"+\" and \"1\" into this sequence. For example, the\nsequences \"(())()\", \"()\" and \"(()(()))\" are correct, while the bracket\nsequences \")(\", \"(()\" and \"(()))(\" are not correct. Yuhao found this problem\ntoo simple for him so he decided to make the problem harder. You are given\nmany (not necessarily correct) bracket sequences. The task is to connect some\nof them into ordered pairs so that each bracket sequence occurs in at most one\npair and the concatenation of the bracket sequences in each pair is a correct\nbracket sequence. The goal is to create as many pairs as possible. This\nproblem unfortunately turned out to be too difficult for Yuhao. Can you help\nhim and solve it? Input The first line contains one integer \n    n\n (\n    1\n    \n    \u2264 n \n    \u2264 10^5\n) \u2014 the number of bracket sequences. Each of the\nfollowing \n    n\n lines contains one bracket sequence \u2014 a non-empty string\nwhich consists only of characters \"(\" and \")\". The sum of lengths of all\nbracket sequences in the input is at most \n    5 \n    \u00b7 10^5\n. Note that a\nbracket sequence may appear in the input multiple times. In this case, you can\nuse each copy of the sequence separately. Also note that the order in which\nstrings appear in the input doesn't matter. Output Print a single integer \u2014\nthe maximum number of pairs which can be made, adhering to the conditions in\nthe statement. Examples Input 7 )()) ) (( (( ( ) ) Output 2 Input 4 ( (( (((\n(()) Output 0 Input 2 (()) () Output 1 Note In the first example, it's optimal\nto construct two pairs: \"(( )())\" and \"( )\".\n\n",
        "cf_contest_id": 1097,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n)())\r\n)\r\n((\r\n((\r\n(\r\n)\r\n)\r\n",
                "2\r\n"
            ],
            [
                "4\r\n(\r\n((\r\n(((\r\n(())\r\n",
                "0\r\n"
            ],
            [
                "2\r\n(())\r\n()\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n)))\r\n())))\r\n(((\r\n((()\r\n()(\r\n)((())\r\n(((((\r\n)())(\r\n)()((()\r\n((((()()(\r\n",
                "1\r\n"
            ],
            [
                "30\r\n)(((())()())()(\r\n))(()()()(\r\n))()((\r\n)())(()\r\n())())((\r\n((((())\r\n(((()))(\r\n(())\r\n)()(((()(()\r\n((())))(\r\n)()()())((\r\n))))(()\r\n()(((()\r\n)()()(\r\n(())())\r\n(()()(())(\r\n)()((\r\n)(()(())))\r\n))))(())((\r\n)()(()(((((\r\n(()))((\r\n()())\r\n((()()()))\r\n()((((((((()\r\n)(()(\r\n)(((())(()\r\n)((((()(\r\n(((()()((\r\n())()(\r\n)))()()))))\r\n",
                "2\r\n"
            ],
            [
                "3\r\n)\r\n(\r\n)\r\n",
                "1\r\n"
            ],
            [
                "2\r\n((((((\r\n))))))\r\n",
                "1\r\n"
            ],
            [
                "2\r\n((((((((((\r\n))))))))))\r\n",
                "1\r\n"
            ],
            [
                "2\r\n)())())\r\n(()(()(\r\n",
                "1\r\n"
            ],
            [
                "2\r\n(((\r\n)))\r\n",
                "1\r\n"
            ],
            [
                "2\r\n(((((((((((\r\n)))))))))))\r\n",
                "1\r\n"
            ],
            [
                "2\r\n())((((\r\n(((\r\n",
                "0\r\n"
            ]
        ]
    }
]