[
    {
        "name": "Countdown",
        "description": "You are given a digital clock with \n    n\n digits. Each digit shows an integer\nfrom \n    0\n to \n    9\n, so the whole clock shows an integer from \n    0\n to\n\n    10^n-1\n. The clock will show leading zeroes if the number is smaller than\n\n    10^n-1\n. You want the clock to show \n    0\n with as few operations as\npossible. In an operation, you can do one of the following: decrease the\nnumber on the clock by \n    1\n, or swap two digits (you can choose which\ndigits to swap, and they don't have to be adjacent). Your task is to determine\nthe minimum number of operations needed to make the clock show \n    0\n. Input\nEach test contains multiple test cases. The first line contains the number of\ntest cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^3\n). The first line of each test\ncase contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 100\n) \u2014 number of\ndigits on the clock. The second line of each test case contains a string of\n\n    n\n digits \n    s_1, s_2, \n    \u2026, s_n\n (\n    0 \n    \u2264 s_1, s_2, \n    \u2026,\n    s_n \n    \u2264 9\n) \u2014 the number on the clock. Note: If the number is smaller than\n\n    10^n-1\n the clock will show leading zeroes. Output For each test case,\nprint one integer: the minimum number of operations needed to make the clock\nshow \n    0\n. Example Input 7 3 007 4 1000 5 00000 3 103 4 2020 9 123456789 30\n001678294039710047203946100020 Output 7 2 0 5 6 53 115 Note In the first\nexample, it's optimal to just decrease the number \n    7\n times. In the second\nexample, we can first swap the first and last position and then decrease the\nnumber by \n    1\n. In the third example, the clock already shows \n    0\n, so\nwe don't have to perform any operations.\n\n",
        "cf_contest_id": 1573,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n3\r\n007\r\n4\r\n1000\r\n5\r\n00000\r\n3\r\n103\r\n4\r\n2020\r\n9\r\n123456789\r\n30\r\n001678294039710047203946100020\r\n",
                "7\r\n2\r\n0\r\n5\r\n6\r\n53\r\n115\r\n"
            ]
        ],
        "private_cases": []
    }
]