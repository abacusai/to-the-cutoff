[
    {
        "name": "Yet Another Tetris Problem",
        "description": "You are given some Tetris field consisting of \n    n\n columns. The initial\nheight of the \n    i\n-th column of the field is \n    a_i\n blocks. On top of\nthese columns you can place only figures of size \n    2 \n    \u00d7 1\n (i.e. the\nheight of this figure is \n    2\n blocks and the width of this figure is\n\n    1\n block). Note that you cannot rotate these figures. Your task is to say\nif you can clear the whole field by placing such figures. More formally, the\nproblem can be described like this: The following process occurs while at\nleast one \n    a_i\n is greater than \n    0\n: You place one figure \n    2\n    \n    \u00d7 1\n (choose some \n    i\n from \n    1\n to \n    n\n and replace\n\n    a_i\n with \n    a_i + 2\n); then, while all \n    a_i\n are greater than\nzero, replace each \n    a_i\n with \n    a_i - 1\n. And your task is to determine\nif it is possible to clear the whole field (i.e. finish the described\nprocess), choosing the places for new figures properly. You have to answer\n\n    t\n independent test cases. Input The first line of the input contains one\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test cases. The\nnext \n    2t\n lines describe test cases. The first line of the test case\ncontains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 100\n) \u2014 the number of\ncolumns in the Tetris field. The second line of the test case contains \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 100\n), where\n\n    a_i\n is the initial height of the \n    i\n-th column of the Tetris field.\nOutput For each test case, print the answer \u2014 \"YES\" (without quotes) if you\ncan clear the whole Tetris field and \"NO\" otherwise. Example Input 4 3 1 1 3 4\n1 1 2 1 2 11 11 1 100 Output YES NO YES YES Note The first test case of the\nexample field is shown below: Gray lines are bounds of the Tetris field. Note\nthat the field has no upper bound. One of the correct answers is to first\nplace the figure in the first column. Then after the second step of the\nprocess, the field becomes \n    [2, 0, 2]\n. Then place the figure in the\nsecond column and after the second step of the process, the field becomes\n\n    [0, 0, 0]\n. And the second test case of the example field is shown below:\nIt can be shown that you cannot do anything to end the process. In the third\ntest case of the example, you first place the figure in the second column\nafter the second step of the process, the field becomes \n    [0, 2]\n. Then\nplace the figure in the first column and after the second step of the process,\nthe field becomes \n    [0, 0]\n. In the fourth test case of the example, place\nthe figure in the first column, then the field becomes \n    [102]\n after the\nfirst step of the process, and then the field becomes \n    [0]\n after the\nsecond step of the process.\n\n",
        "cf_contest_id": 1324,
        "cf_index": "A",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3\r\n1 1 3\r\n4\r\n1 1 2 1\r\n2\r\n11 11\r\n1\r\n100\r\n",
                "YES\r\nNO\r\nYES\r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n12\r\n2 2 2 2 1 2 2 2 2 2 2 2\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n3\r\n1 1 2\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n1\r\n1\r\n",
                "YES\r\n"
            ]
        ]
    }
]