[
    {
        "name": "Spy-string",
        "description": "You are given \n    n\n strings \n    a_1, a_2, \n    \u2026, a_n\n: all of them have\nthe same length \n    m\n. The strings consist of lowercase English letters.\nFind any string \n    s\n of length \n    m\n such that each of the given \n    n\n\nstrings differs from \n    s\n in at most one position. Formally, for each given\nstring \n    a_i\n, there is no more than one position \n    j\n such that\n\n    a_i[j] \n     s[j]\n. Note that the desired string \n    s\n may be equal to\none of the given strings \n    a_i\n, or it may differ from all the given\nstrings. For example, if you have the strings abac and zbab, then the answer\nto the problem might be the string abab, which differs from the first only by\nthe last character, and from the second only by the first. Input The first\nline contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of\ntest cases. Then \n    t\n test cases follow. Each test case starts with a line\ncontaining two positive integers \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10\n) and\n\n    m\n (\n    1 \n    \u2264 m \n    \u2264 10\n) \u2014 the number of strings and their length.\nThen follow \n    n\n strings \n    a_i\n, one per line. Each of them has length\n\n    m\n and consists of lowercase English letters. Output Print \n    t\n\nanswers to the test cases. Each answer (if it exists) is a string of length\n\n    m\n consisting of lowercase English letters. If there are several answers,\nprint any of them. If the answer does not exist, print \"-1\" (\"minus one\",\nwithout quotes). Example Input 5 2 4 abac zbab 2 4 aaaa bbbb 3 3 baa aaa aab 2\n2 ab bb 3 1 a b c Output abab -1 aaa ab z Note The first test case was\nexplained in the statement. In the second test case, the answer does not\nexist.\n\n",
        "cf_contest_id": 1360,
        "cf_index": "F",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "constructive algorithms",
            "dp",
            "hashing",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n2 4\r\nabac\r\nzbab\r\n2 4\r\naaaa\r\nbbbb\r\n3 3\r\nbaa\r\naaa\r\naab\r\n2 2\r\nab\r\nbb\r\n3 1\r\na\r\nb\r\nc\r\n",
                "abab\r\n-1\r\naaa\r\ncb\r\nz\r\n"
            ]
        ],
        "private_cases": []
    }
]