[
    {
        "name": "Game on Sum (Hard Version)",
        "description": "This is the hard version of the problem. The difference is the constraints on\n\n    n\n, \n    m\n and \n    t\n. You can make hacks only if all versions of the\nproblem are solved. Alice and Bob are given the numbers \n    n\n, \n    m\n and\n\n    k\n, and play a game as follows: The game has a score that Alice tries to\nmaximize, and Bob tries to minimize. The score is initially \n    0\n. The game\nconsists of \n    n\n turns. Each turn, Alice picks a real number from \n    0\n\nto \n    k\n (inclusive) which Bob either adds to or subtracts from the score of\nthe game. But throughout the game, Bob has to choose to add at least \n    m\n\nout of the \n    n\n turns. Bob gets to know which number Alice picked before\ndeciding whether to add or subtract the number from the score, and Alice gets\nto know whether Bob added or subtracted the number for the previous turn\nbefore picking the number for the current turn (except on the first turn since\nthere was no previous turn). If Alice and Bob play optimally, what will the\nfinal score of the game be? Input The first line of the input contains a\nsingle integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^5\n) \u2014 the number of test\ncases. The description of test cases follows. Each test case consists of a\nsingle line containing the three integers, \n    n\n, \n    m\n, and \n    k\n (\n    1\n    \n    \u2264 m \n    \u2264 n \n    \u2264 10^6, 0 \n    \u2264 k < 10^9 + 7\n) \u2014 the number of turns,\nhow many of those turns Bob has to add, and the biggest number Alice can\nchoose, respectively. It is guaranteed that the sum of \n    n\n over all test\ncases does not exceed \n    10^6\n. Output For each test case output a single\ninteger number \u2014 the score of the optimal game modulo \n    10^9 + 7\n.\nFormally, let \n    M = 10^9 + 7\n. It can be shown that the answer can be\nexpressed as an irreducible fraction \n    p/q\n, where \n    p\n and\n\n    q\n are integers and \n    q \n    \u2261 0 \n    M\n. Output the\ninteger equal to \n    p \n    \u00b7 q^-1\n     M\n. In other words, output such\nan integer \n    x\n that \n    0 \n    \u2264 x < M\n and \n    x \n    \u00b7 q \n    \u2261 p\n    \n    M\n. Example Input 7 3 3 2 2 1 10 6 3 10 6 4 10 100 1 1 4 4 0 69 4\n20 Output 6 5 375000012 500000026 958557139 0 49735962 Note In the first test\ncase, the entire game has \n    3\n turns, and since \n    m = 3\n, Bob has to add\nin each of them. Therefore Alice should pick the biggest number she can, which\nis \n    k = 2\n, every turn. In the third test case, Alice has a strategy to\nguarantee a score of \n    75/8\n    \u2261 375000012 \n    10^9 +\n    7\n. In the fourth test case, Alice has a strategy to guarantee a score of\n\n    45/2\n    \u2261 500000026 \n    10^9 + 7\n.\n\n",
        "cf_contest_id": 1628,
        "cf_index": "D2",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "dp",
            "games",
            "math"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n3 3 2\r\n2 1 10\r\n6 3 10\r\n6 4 10\r\n100 1 1\r\n4 4 0\r\n69 4 20\r\n",
                "6\r\n5\r\n375000012\r\n500000026\r\n958557139\r\n0\r\n49735962\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2000 1139 818658270\r\n",
                "523403915\r\n"
            ],
            [
                "2\r\n1398 1034 726329524\r\n602 156 640769482\r\n",
                "656360164\r\n969738279\r\n"
            ],
            [
                "3\r\n763 499 769431935\r\n827 50 784148915\r\n410 241 11071818\r\n",
                "110484376\r\n461261753\r\n447772647\r\n"
            ],
            [
                "4\r\n182 35 698699275\r\n261 76 289531051\r\n426 177 711219530\r\n1131 598 478721433\r\n",
                "261616945\r\n595868694\r\n164718978\r\n495212861\r\n"
            ],
            [
                "5\r\n195 38 344268105\r\n155 39 594828671\r\n607 423 610562547\r\n983 443 383820254\r\n60 48 222143654\r\n",
                "643187245\r\n480784257\r\n82515174\r\n739321531\r\n593390993\r\n"
            ],
            [
                "1\r\n1000000 1000000 1\r\n",
                "1000000\r\n"
            ],
            [
                "1\r\n1000000 500000 1000000006\r\n",
                "708738821\r\n"
            ],
            [
                "1\r\n1000000 959139 818658270\r\n",
                "694370633\r\n"
            ],
            [
                "2\r\n521875 319971 726329524\r\n478125 123 640769482\r\n",
                "492879396\r\n912347682\r\n"
            ],
            [
                "3\r\n165875 87141 769431935\r\n772393 167214 784148915\r\n61732 48591 11071818\r\n",
                "915837440\r\n14432719\r\n862828622\r\n"
            ],
            [
                "4\r\n232556 181131 698699275\r\n43124 15534 289531051\r\n535238 311739 711219530\r\n189082 133216 478721433\r\n",
                "966384955\r\n685945994\r\n578938334\r\n832558516\r\n"
            ],
            [
                "5\r\n189969 160562 344268105\r\n315975 194109 594828671\r\n100783 84549 610562547\r\n275703 192662 383820254\r\n117570 28278 222143654\r\n",
                "157791320\r\n155699338\r\n774071048\r\n439402882\r\n45257364\r\n"
            ],
            [
                "6\r\n130119 122006 327769810\r\n79271 17211 935338598\r\n515257 129047 900388601\r\n147774 99 743886338\r\n73004 43456 441745288\r\n54575 39883 787487619\r\n",
                "811493277\r\n514044195\r\n741878216\r\n426185801\r\n143130813\r\n568563049\r\n"
            ],
            [
                "7\r\n95492 12344 473552784\r\n101833 9075 637093008\r\n274911 171646 428016819\r\n67407 49038 966904935\r\n10789 2475 174077614\r\n429334 210609 754133635\r\n20234 15076 765556850\r\n",
                "506121470\r\n108071585\r\n727964075\r\n215252294\r\n654108668\r\n101760732\r\n699215939\r\n"
            ],
            [
                "8\r\n258726 145849 864490398\r\n193818 78307 30883759\r\n63536 55732 659988243\r\n54883 52588 970042566\r\n23539 7369 63181265\r\n196532 135035 161470966\r\n198092 127893 232773743\r\n10874 8427 434282496\r\n",
                "256226711\r\n840011928\r\n316144447\r\n813848128\r\n424134771\r\n676922115\r\n512012324\r\n858285995\r\n"
            ],
            [
                "9\r\n106599 3537 368656200\r\n178640 106760 476008649\r\n96041 5063 707870944\r\n104282 66654 284626015\r\n164293 153028 993371714\r\n168571 16667 575420230\r\n67 44 63993142\r\n34769 13594 908378823\r\n146738 139956 733972182\r\n",
                "265832506\r\n442942040\r\n258659615\r\n134200706\r\n133945665\r\n41367721\r\n441504448\r\n210680494\r\n183407806\r\n"
            ],
            [
                "10\r\n6479 2534 762901908\r\n19281 18741 181918820\r\n106340 8553 213830486\r\n74389 6092 373479158\r\n256601 15602 98863599\r\n87996 42909 351650459\r\n303732 31268 450755091\r\n2156 1950 748825922\r\n107460 61228 594595004\r\n35566 30391 282125334\r\n",
                "825444168\r\n909701068\r\n161475000\r\n860426487\r\n87370028\r\n337192740\r\n815492351\r\n141773803\r\n45056578\r\n633642835\r\n"
            ]
        ]
    }
]