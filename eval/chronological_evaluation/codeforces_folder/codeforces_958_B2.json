[
    {
        "name": "Maximum Control (medium)",
        "description": "The Resistance is trying to take control over as many planets of a particular\nsolar system as possible. Princess Heidi is in charge of the fleet, and she\nmust send ships to some planets in order to maximize the number of controlled\nplanets. The Galaxy contains N planets, connected by bidirectional hyperspace\ntunnels in such a way that there is a unique path between every pair of the\nplanets. A planet is controlled by the Resistance if there is a Resistance\nship in its orbit, or if the planet lies on the shortest path between some two\nplanets that have Resistance ships in their orbits. Heidi has not yet made up\nher mind as to how many ships to use. Therefore, she is asking you to compute,\nfor every K = 1, 2, 3, ..., N, the maximum number of planets that can be\ncontrolled with a fleet consisting of K ships. Input The first line of the\ninput contains an integer N (1 \u2264 N \u2264 10^5) \u2013 the number of planets in the\ngalaxy. The next N - 1 lines describe the hyperspace tunnels between the\nplanets. Each of the N - 1 lines contains two space-separated integers u and v\n(1 \u2264 u, v \u2264 N) indicating that there is a bidirectional hyperspace tunnel\nbetween the planets u and v. It is guaranteed that every two planets are\nconnected by a path of tunnels, and that each tunnel connects a different pair\nof planets. Output On a single line, print N space-separated integers. The\nK-th number should correspond to the maximum number of planets that can be\ncontrolled by the Resistance using a fleet of K ships. Examples Input 3 1 2 2\n3 Output 1 3 3 Input 4 1 2 3 2 4 2 Output 1 3 4 4 Note Consider the first\nexample. If K = 1, then Heidi can only send one ship to some planet and\ncontrol it. However, for K \u2265 2, sending ships to planets 1 and 3 will allow\nthe Resistance to control all planets.\n\n",
        "cf_contest_id": 958,
        "cf_index": "B2",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "graphs",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 2\r\n2 3\r\n",
                "1 3 3 "
            ],
            [
                "4\r\n1 2\r\n3 2\r\n4 2\r\n",
                "1 3 4 4 "
            ]
        ],
        "private_cases": [
            [
                "19\r\n2 19\r\n7 15\r\n8 10\r\n16 1\r\n12 5\r\n11 5\r\n6 18\r\n12 14\r\n14 15\r\n2 6\r\n9 14\r\n4 17\r\n16 10\r\n4 2\r\n7 18\r\n3 2\r\n9 13\r\n11 10\r\n",
                "1 14 16 17 18 19 19 19 19 19 19 19 19 19 19 19 19 19 19 "
            ],
            [
                "20\r\n12 10\r\n5 19\r\n12 18\r\n4 2\r\n3 16\r\n11 8\r\n3 2\r\n17 4\r\n14 7\r\n6 5\r\n10 20\r\n14 9\r\n16 12\r\n9 13\r\n13 4\r\n1 15\r\n11 6\r\n15 19\r\n14 8\r\n",
                "1 17 18 19 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 "
            ],
            [
                "21\r\n10 12\r\n12 9\r\n16 8\r\n18 11\r\n17 15\r\n4 11\r\n7 19\r\n10 14\r\n10 19\r\n8 5\r\n1 5\r\n20 3\r\n19 18\r\n2 20\r\n19 15\r\n9 16\r\n6 4\r\n4 13\r\n20 6\r\n13 21\r\n",
                "1 14 16 18 19 20 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 "
            ],
            [
                "23\r\n5 14\r\n6 7\r\n6 17\r\n2 4\r\n6 13\r\n9 17\r\n14 10\r\n23 9\r\n1 18\r\n3 12\r\n15 11\r\n21 15\r\n10 23\r\n4 3\r\n8 15\r\n22 18\r\n22 16\r\n15 5\r\n12 22\r\n4 6\r\n19 16\r\n20 10\r\n",
                "1 15 17 18 19 20 21 22 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 "
            ],
            [
                "24\r\n19 14\r\n8 15\r\n13 4\r\n18 16\r\n1 17\r\n10 3\r\n22 21\r\n10 14\r\n6 11\r\n9 12\r\n15 22\r\n11 3\r\n21 7\r\n2 12\r\n7 4\r\n4 19\r\n16 9\r\n24 17\r\n5 15\r\n8 2\r\n23 10\r\n20 6\r\n18 24\r\n",
                "1 21 22 23 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 "
            ]
        ]
    }
]