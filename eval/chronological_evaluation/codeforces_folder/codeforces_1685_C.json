[
    {
        "name": "Bring Balance",
        "description": "Alina has a bracket sequence \n    s\n of length \n    2n\n, consisting of \n    n\n\nopening brackets '(' and \n    n\n closing brackets ')'. As she likes balance,\nshe wants to turn this bracket sequence into a balanced bracket sequence. In\none operation, she can reverse any substring of \n    s\n. What's the smallest\nnumber of operations that she needs to turn \n    s\n into a balanced bracket\nsequence? It can be shown that it's always possible in at most \n    n\n\noperations. As a reminder, a sequence of brackets is called balanced if one\ncan turn it into a valid math expression by adding characters + and 1. For\nexample, sequences (())(), (), and (()(())) are balanced, while )(, ((), and\n(()))( are not. Input The first line of the input contains a single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 2 \n    \u00b7 10^4\n) \u2014 the number of test cases. The\ndescription of the test cases follows. The first line of each test case\ncontains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n). The second\nline of each test case contains a string \n    s\n of length \n    2n\n,\nconsisting of \n    n\n opening and \n    n\n closing brackets. The sum of \n    n\n\nover all test cases doesn't exceed \n    2\n    \u00b7 10^5\n. Output For each test\ncase, in the first line output a single integer \n    k\n \n    (0 \n    \u2264 k \n    \u2264\n    n)\n \u2014 the smallest number of operations required. The \n    i\n-th of the next\n\n    k\n lines should contain two integers \n    l_i, r_i\n (\n    1 \n    \u2264 l_i \n    \u2264\n    r_i \n    \u2264 2n\n), indicating that in the \n    i\n-th operation, Alina will\nreverse the substring \n    s_ls_l+1\n    \u2026 s_r-1s_r\n. Here the\nnumeration starts from \n    1\n. If there are multiple sequences of operations\nwith the smallest length which transform the sequence into a balanced one, you\ncan output any of them. Example Input 3 2 (()) 5 ())((()))( 6 ())((()))(()\nOutput 0 2 3 4 9 10 1 2 11 Note In the first test case, the string is already\nbalanced. In the second test case, the string will be transformed as follows:\n())((()))( \n    \u2192\n ()()(()))( \n    \u2192\n ()()(())(), where the last\nstring is balanced. In the third test case, the string will be transformed to\n((()))((())), which is balanced.\n\n",
        "cf_contest_id": 1685,
        "cf_index": "C",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2\r\n(())\r\n5\r\n())((()))(\r\n6\r\n())((()))(()\r\n",
                "0\r\n2\r\n1 6\r\n7 10\r\n1\r\n2 11\r\n"
            ]
        ],
        "private_cases": []
    }
]