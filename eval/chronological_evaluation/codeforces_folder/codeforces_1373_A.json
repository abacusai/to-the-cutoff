[
    {
        "name": "Donut Shops",
        "description": "There are two rival donut shops. The first shop sells donuts at retail: each\ndonut costs \n    a\n dollars. The second shop sells donuts only in bulk: box of\n\n    b\n donuts costs \n    c\n dollars. So if you want to buy \n    x\n donuts\nfrom this shop, then you have to buy the smallest number of boxes such that\nthe total number of donuts in them is greater or equal to \n    x\n. You want to\ndetermine two positive integer values: how many donuts can you buy so that\nthey are strictly cheaper in the first shop than in the second shop? how many\ndonuts can you buy so that they are strictly cheaper in the second shop than\nin the first shop? If any of these values doesn't exist then that value should\nbe equal to \n    -1\n. If there are multiple possible answers, then print any\nof them. The printed values should be less or equal to \n    10^9\n. It can be\nshown that under the given constraints such values always exist if any values\nexist at all. Input The first line contains a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of testcases. Each of the next \n    t\n\nlines contains three integers \n    a\n, \n    b\n and \n    c\n (\n    1 \n    \u2264 a \n    \u2264\n    10^9\n, \n    2 \n    \u2264 b \n    \u2264 10^9\n, \n    1 \n    \u2264 c \n    \u2264 10^9\n). Output For\neach testcase print two positive integers. For both shops print such \n    x\n\nthat buying \n    x\n donuts in this shop is strictly cheaper than buying\n\n    x\n donuts in the other shop. \n    x\n should be greater than \n    0\n and\nless or equal to \n    10^9\n. If there is no such \n    x\n, then print \n    -1\n.\nIf there are multiple answers, then print any of them. Example Input 4 5 10 4\n4 5 20 2 2 3 1000000000 1000000000 1000000000 Output -1 20 8 -1 1 2 -1\n1000000000 Note In the first testcase buying any number of donuts will be\ncheaper in the second shop. For example, for \n    3\n or \n    5\n donuts you'll\nhave to buy a box of \n    10\n donuts for \n    4\n dollars. \n    3\n or \n    5\n\ndonuts in the first shop would cost you \n    15\n or \n    25\n dollars,\nrespectively, however. For \n    20\n donuts you'll have to buy two boxes for\n\n    8\n dollars total. Note that \n    3\n and \n    5\n are also valid answers\nfor the second shop, along with many other answers. In the second testcase\nbuying any number of donuts will be either cheaper in the first shop or the\nsame price. \n    8\n donuts cost \n    32\n dollars in the first shop and\n\n    40\n dollars in the second shop (because you have to buy two boxes).\n\n    10\n donuts will cost \n    40\n dollars in both shops, so \n    10\n is not a\nvalid answer for any of the shops. In the third testcase \n    1\n donut costs\n\n    2\n and \n    3\n dollars, respectively. \n    2\n donuts cost \n    4\n and\n\n    3\n dollars. Thus, \n    1\n is a valid answer for the first shop and\n\n    2\n is a valid answer for the second shop. In the fourth testcase\n\n    10^9\n donuts cost \n    10^18\n dollars in the first shop and \n    10^9\n\ndollars in the second shop.\n\n",
        "cf_contest_id": 1373,
        "cf_index": "A",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n5 10 4\r\n4 5 20\r\n2 2 3\r\n1000000000 1000000000 1000000000\r\n",
                "-1 10\r\n1 -1\r\n1 2\r\n-1 1000000000\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n165 165 165\r\n",
                "-1 165\r\n"
            ],
            [
                "1\r\n768 34 1231290\r\n",
                "1 -1\r\n"
            ],
            [
                "4\r\n29102004 6699 29102004\r\n124 4438 29102004\r\n29102004 1358 29102004\r\n29102004 92385 29102004\r\n",
                "-1 6699\r\n1 -1\r\n-1 1358\r\n-1 92385\r\n"
            ],
            [
                "1\r\n12313 2 2\r\n",
                "-1 2\r\n"
            ],
            [
                "7\r\n5 10 4\r\n4 5 20\r\n2 2 3\r\n1 100000007 100000008\r\n1 100000007 100000009\r\n1 100000007 100000006\r\n5 10 4\r\n",
                "-1 10\r\n1 -1\r\n1 2\r\n1 -1\r\n1 -1\r\n1 100000007\r\n-1 10\r\n"
            ],
            [
                "1\r\n1 300000 299999\r\n",
                "1 300000\r\n"
            ],
            [
                "1\r\n1 499999999 499999998\r\n",
                "1 499999999\r\n"
            ],
            [
                "1\r\n1 100000000 10000000\r\n",
                "1 100000000\r\n"
            ],
            [
                "1\r\n1 1000000000 100000000\r\n",
                "1 1000000000\r\n"
            ],
            [
                "1\r\n1 999999999 999999998\r\n",
                "1 999999999\r\n"
            ],
            [
                "1\r\n2 1000000 1999999\r\n",
                "1 1000000\r\n"
            ],
            [
                "3\r\n33333333 2 66666665\r\n33333333 2 66666666\r\n33333333 2 66666667\r\n",
                "1 2\r\n1 -1\r\n1 -1\r\n"
            ],
            [
                "1\r\n1 1000000000 1000000000\r\n",
                "1 -1\r\n"
            ],
            [
                "1\r\n1 300000000 299999999\r\n",
                "1 300000000\r\n"
            ],
            [
                "7\r\n5 10 4\r\n4 5 20\r\n2 2 3\r\n1 100000007 100000008\r\n1 100000007 100000009\r\n1 100000007 100000006\r\n1 1000000000 1000000000\r\n",
                "-1 10\r\n1 -1\r\n1 2\r\n1 -1\r\n1 -1\r\n1 100000007\r\n1 -1\r\n"
            ],
            [
                "1\r\n1 1000000000 550000000\r\n",
                "1 1000000000\r\n"
            ],
            [
                "1\r\n1 1000000000 999999999\r\n",
                "1 1000000000\r\n"
            ],
            [
                "9\r\n5 10 4\r\n4 5 20\r\n2 2 3\r\n1 100000007 100000008\r\n1 100000007 100000009\r\n1 100000007 100000008\r\n1 1000000000 1000000000\r\n1 1000000000 999999999\r\n3 4 12\r\n",
                "-1 10\r\n1 -1\r\n1 2\r\n1 -1\r\n1 -1\r\n1 -1\r\n1 -1\r\n1 1000000000\r\n1 -1\r\n"
            ],
            [
                "10\r\n5 10 4\r\n4 5 20\r\n2 2 3\r\n1 100000007 100000008\r\n1 100000007 100000009\r\n1 100000007 100000008\r\n1 1000000000 1000000000\r\n3 1000000000 1000000000\r\n1 1000000000 999999999\r\n3 4 12\r\n",
                "-1 10\r\n1 -1\r\n1 2\r\n1 -1\r\n1 -1\r\n1 -1\r\n1 -1\r\n1 1000000000\r\n1 1000000000\r\n1 -1\r\n"
            ],
            [
                "10\r\n2 5 11\r\n4 5 20\r\n2 2 3\r\n1 100000007 100000008\r\n1 100000007 100000009\r\n1 100000007 100000008\r\n1 1000000000 1000000000\r\n3 1000000000 1000000000\r\n1 1000000000 999999999\r\n3 4 12\r\n",
                "1 -1\r\n1 -1\r\n1 2\r\n1 -1\r\n1 -1\r\n1 -1\r\n1 -1\r\n1 1000000000\r\n1 1000000000\r\n1 -1\r\n"
            ],
            [
                "1\r\n1 2 1000000000\r\n",
                "1 -1\r\n"
            ],
            [
                "20\r\n2 1000000000 1000000000\r\n2 1000000000 1000000000\r\n2 1000000000 1000000000\r\n2 1000000000 1000000000\r\n2 1000000000 1000000000\r\n2 1000000000 1000000000\r\n2 1000000000 1000000000\r\n2 1000000000 1000000000\r\n2 1000000000 1000000000\r\n2 1000000000 1000000000\r\n2 1000000000 1000000000\r\n2 1000000000 1000000000\r\n2 1000000000 1000000000\r\n2 1000000000 1000000000\r\n2 1000000000 1000000000\r\n2 1000000000 1000000000\r\n2 1000000000 1000000000\r\n2 1000000000 1000000000\r\n2 1000000000 1000000000\r\n2 1000000000 1000000000\r\n",
                "1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n1 1000000000\r\n"
            ],
            [
                "1\r\n1 100000007 100000006\r\n",
                "1 100000007\r\n"
            ],
            [
                "1\r\n2 999999999 1000000000\r\n",
                "1 999999999\r\n"
            ],
            [
                "3\r\n1 999999999 1000000000\r\n1 1000000000 1000000000\r\n1 1000000000 999999999\r\n",
                "1 -1\r\n1 -1\r\n1 1000000000\r\n"
            ],
            [
                "1\r\n999999999 1000000000 999999999\r\n",
                "-1 1000000000\r\n"
            ],
            [
                "10\r\n2 5 11\r\n4 5 20\r\n2 2 3\r\n1 100000007 100000008\r\n1 100000007 100000009\r\n1 100000007 100000008\r\n1 1000000000 1000000000\r\n3 1000000000 1000000000\r\n10 1000000000 5\r\n3 4 12\r\n",
                "1 -1\r\n1 -1\r\n1 2\r\n1 -1\r\n1 -1\r\n1 -1\r\n1 -1\r\n1 1000000000\r\n-1 1000000000\r\n1 -1\r\n"
            ],
            [
                "1\r\n1 900000000 1000000000\r\n",
                "1 -1\r\n"
            ],
            [
                "10\r\n1 1000000000 1000000000\r\n1 1000000000 1000000000\r\n1 1000000000 1000000000\r\n1 1000000000 1000000000\r\n1 1000000000 1000000000\r\n1 1000000000 1000000000\r\n1 1000000000 1000000000\r\n1 1000000000 1000000000\r\n1 1000000000 1000000000\r\n1 1000000000 1000000000\r\n",
                "1 -1\r\n1 -1\r\n1 -1\r\n1 -1\r\n1 -1\r\n1 -1\r\n1 -1\r\n1 -1\r\n1 -1\r\n1 -1\r\n"
            ],
            [
                "1\r\n999999999 1000000000 1000000000\r\n",
                "1 1000000000\r\n"
            ],
            [
                "1\r\n1 900000001 900000000\r\n",
                "1 900000001\r\n"
            ]
        ]
    }
]