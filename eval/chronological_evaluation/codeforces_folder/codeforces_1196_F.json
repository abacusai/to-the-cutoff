[
    {
        "name": "K-th Path",
        "description": "You are given a connected undirected weighted graph consisting of \n    n\n\nvertices and \n    m\n edges. You need to print the \n    k\n-th smallest shortest\npath in this graph (paths from the vertex to itself are not counted, paths\nfrom \n    i\n to \n    j\n and from \n    j\n to \n    i\n are counted as one). More\nformally, if \n    d\n is the matrix of shortest paths, where \n    d_i, j\n is\nthe length of the shortest path between vertices \n    i\n and \n    j\n (\n    1\n    \n    \u2264 i < j \n    \u2264 n\n), then you need to print the \n    k\n-th element in the\nsorted array consisting of all \n    d_i, j\n, where \n    1 \n    \u2264 i < j \n    \u2264\n    n\n. Input The first line of the input contains three integers \n    n, m\n and\n\n    k\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n, \n    n - 1 \n    \u2264 m \n    \u2264\n    min\n    (\n    n(n-1)/2, 2 \n    \u00b7 10^5\n    )\n, \n    1 \n    \u2264 k \n    \u2264\n    min\n    (\n    n(n-1)/2, 400\n    )\n \u2014 the number of vertices in the\ngraph, the number of edges in the graph and the value of \n    k\n,\ncorrespondingly. Then \n    m\n lines follow, each containing three integers\n\n    x\n, \n    y\n and \n    w\n (\n    1 \n    \u2264 x, y \n    \u2264 n\n, \n    1 \n    \u2264 w \n    \u2264\n    10^9\n, \n    x \n     y\n) denoting an edge between vertices \n    x\n and\n\n    y\n of weight \n    w\n. It is guaranteed that the given graph is connected\n(there is a path between any pair of vertices), there are no self-loops (edges\nconnecting the vertex with itself) and multiple edges (for each pair of\nvertices \n    x\n and \n    y\n, there is at most one edge between this pair of\nvertices in the graph). Output Print one integer \u2014 the length of the\n\n    k\n-th smallest shortest path in the given graph (paths from the vertex to\nitself are not counted, paths from \n    i\n to \n    j\n and from \n    j\n to\n\n    i\n are counted as one). Examples Input 6 10 5 2 5 1 5 3 9 6 2 2 1 3 1 5 1\n8 6 5 10 1 6 5 6 4 6 3 6 2 3 4 5 Output 3 Input 7 15 18 2 6 3 5 7 4 6 5 4 3 6\n9 6 7 7 1 6 4 7 1 6 7 2 1 4 3 2 3 2 8 5 3 6 2 5 5 3 7 9 4 1 8 2 1 1 Output 9\n\n",
        "cf_contest_id": 1196,
        "cf_index": "F",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "shortest paths",
            "sortings"
        ],
        "time_limit_seconds": 2.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 10 5\r\n2 5 1\r\n5 3 9\r\n6 2 2\r\n1 3 1\r\n5 1 8\r\n6 5 10\r\n1 6 5\r\n6 4 6\r\n3 6 2\r\n3 4 5\r\n",
                "3"
            ],
            [
                "7 15 18\r\n2 6 3\r\n5 7 4\r\n6 5 4\r\n3 6 9\r\n6 7 7\r\n1 6 4\r\n7 1 6\r\n7 2 1\r\n4 3 2\r\n3 2 8\r\n5 3 6\r\n2 5 5\r\n3 7 9\r\n4 1 8\r\n2 1 1\r\n",
                "9"
            ]
        ],
        "private_cases": [
            [
                "8 7 19\r\n1 2 1000000000\r\n2 3 999999999\r\n3 4 999999998\r\n4 5 999999997\r\n5 6 999999996\r\n6 7 999999995\r\n7 8 999999994\r\n",
                "3999999982"
            ],
            [
                "2 1 1\r\n1 2 123456789\r\n",
                "123456789"
            ],
            [
                "28 27 378\r\n1 2 1000000000\r\n2 3 1000000000\r\n3 4 1000000000\r\n4 5 1000000000\r\n5 6 1000000000\r\n6 7 1000000000\r\n7 8 1000000000\r\n8 9 1000000000\r\n9 10 1000000000\r\n10 11 1000000000\r\n11 12 1000000000\r\n12 13 1000000000\r\n13 14 1000000000\r\n14 15 1000000000\r\n15 16 1000000000\r\n16 17 1000000000\r\n17 18 1000000000\r\n18 19 1000000000\r\n19 20 1000000000\r\n20 21 1000000000\r\n21 22 1000000000\r\n22 23 1000000000\r\n23 24 1000000000\r\n24 25 1000000000\r\n25 26 1000000000\r\n26 27 1000000000\r\n27 28 1000000000\r\n",
                "27000000000"
            ]
        ]
    }
]