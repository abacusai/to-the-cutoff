[
    {
        "name": "Card Constructions",
        "description": "A card pyramid of height \n    1\n is constructed by resting two cards against\neach other. For \n    h>1\n, a card pyramid of height \n    h\n is constructed by\nplacing a card pyramid of height \n    h-1\n onto a base. A base consists of\n\n    h\n pyramids of height \n    1\n, and \n    h-1\n cards on top. For example,\ncard pyramids of heights \n    1\n, \n    2\n, and \n    3\n look as follows: You\nstart with \n    n\n cards and build the tallest pyramid that you can. If there\nare some cards remaining, you build the tallest pyramid possible with the\nremaining cards. You repeat this process until it is impossible to build\nanother pyramid. In the end, how many pyramids will you have constructed?\nInput Each test consists of multiple test cases. The first line contains a\nsingle integer \n    t\n (\n    1\n    \u2264 t\n    \u2264 1000\n) \u2014 the number of test cases.\nNext \n    t\n lines contain descriptions of test cases. Each test case contains\na single integer \n    n\n (\n    1\n    \u2264 n\n    \u2264 10^9\n) \u2014 the number of cards. It\nis guaranteed that the sum of \n    n\n over all test cases does not exceed\n\n    10^9\n. Output For each test case output a single integer \u2014 the number of\npyramids you will have constructed in the end. Example Input 5 3 14 15 24 1\nOutput 1 2 1 3 0 Note In the first test, you construct a pyramid of height\n\n    1\n with \n    2\n cards. There is \n    1\n card remaining, which is not\nenough to build a pyramid. In the second test, you build two pyramids, each of\nheight \n    2\n, with no cards remaining. In the third test, you build one\npyramid of height \n    3\n, with no cards remaining. In the fourth test, you\nbuild one pyramid of height \n    3\n with \n    9\n cards remaining. Then you\nbuild a pyramid of height \n    2\n with \n    2\n cards remaining. Then you build\na final pyramid of height \n    1\n with no cards remaining. In the fifth test,\none card is not enough to build any pyramids.\n\n",
        "cf_contest_id": 1345,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "dp",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3\r\n14\r\n15\r\n24\r\n1\r\n",
                "1\r\n2\r\n1\r\n3\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1000000000\r\n",
                "6\r\n"
            ],
            [
                "2\r\n486008999\r\n486009000\r\n",
                "7\r\n1\r\n"
            ],
            [
                "3\r\n333333332\r\n333333333\r\n333333334\r\n",
                "5\r\n6\r\n6\r\n"
            ],
            [
                "10\r\n99999990\r\n99999991\r\n99999992\r\n99999993\r\n99999994\r\n99999995\r\n99999996\r\n99999997\r\n99999998\r\n99999999\r\n",
                "6\r\n4\r\n3\r\n3\r\n4\r\n4\r\n5\r\n5\r\n6\r\n4\r\n"
            ],
            [
                "20\r\n34695316\r\n68869398\r\n29130245\r\n24255383\r\n85582755\r\n15408251\r\n1867545\r\n26144921\r\n175585558\r\n130060452\r\n23770736\r\n188173941\r\n590485\r\n1428733\r\n24628576\r\n2391240\r\n23427813\r\n59688436\r\n50550200\r\n33750016\r\n",
                "5\r\n4\r\n5\r\n7\r\n6\r\n4\r\n3\r\n5\r\n4\r\n5\r\n4\r\n7\r\n5\r\n3\r\n4\r\n5\r\n5\r\n4\r\n2\r\n5\r\n"
            ],
            [
                "30\r\n113947563\r\n21485587\r\n10401395\r\n31180372\r\n3432066\r\n14013728\r\n47854843\r\n19519350\r\n31324526\r\n46613418\r\n13072064\r\n14564853\r\n15814975\r\n66589983\r\n38242894\r\n34273779\r\n58830530\r\n21931631\r\n40577358\r\n36582871\r\n30936905\r\n122238769\r\n3111682\r\n20677188\r\n34735194\r\n12701719\r\n4120263\r\n41385989\r\n15704844\r\n34133661\r\n",
                "4\r\n5\r\n4\r\n5\r\n4\r\n3\r\n5\r\n4\r\n6\r\n4\r\n6\r\n6\r\n4\r\n6\r\n4\r\n4\r\n4\r\n5\r\n3\r\n5\r\n4\r\n4\r\n5\r\n5\r\n5\r\n6\r\n5\r\n3\r\n6\r\n5\r\n"
            ],
            [
                "50\r\n11833308\r\n5211498\r\n64660\r\n9077929\r\n2699416\r\n2432035\r\n234901\r\n1337830\r\n8457191\r\n10523566\r\n5722429\r\n5452712\r\n5511654\r\n8587879\r\n348160\r\n3141182\r\n2661936\r\n395300\r\n6950223\r\n2119926\r\n4407089\r\n3559060\r\n10228325\r\n5752720\r\n1607500\r\n647047\r\n8904557\r\n1954681\r\n698061\r\n9852830\r\n1972893\r\n13760200\r\n5944868\r\n9527673\r\n2618168\r\n3756659\r\n529603\r\n2175632\r\n4911798\r\n2239490\r\n3161527\r\n777133\r\n7550912\r\n20650506\r\n3763676\r\n2915688\r\n1997807\r\n24309425\r\n9190068\r\n7870669\r\n",
                "4\r\n5\r\n4\r\n6\r\n4\r\n5\r\n4\r\n5\r\n4\r\n6\r\n6\r\n4\r\n5\r\n5\r\n3\r\n3\r\n3\r\n5\r\n5\r\n3\r\n5\r\n4\r\n5\r\n6\r\n5\r\n5\r\n4\r\n6\r\n3\r\n4\r\n5\r\n4\r\n6\r\n3\r\n4\r\n5\r\n5\r\n4\r\n3\r\n6\r\n4\r\n4\r\n5\r\n5\r\n6\r\n5\r\n3\r\n5\r\n2\r\n6\r\n"
            ],
            [
                "100\r\n1\r\n12\r\n4\r\n1\r\n2\r\n1\r\n8\r\n2\r\n9\r\n9\r\n5\r\n1\r\n2\r\n11\r\n14\r\n4\r\n1\r\n9\r\n2\r\n2\r\n8\r\n1\r\n1\r\n4\r\n1\r\n4\r\n4\r\n5\r\n11\r\n1\r\n4\r\n6\r\n13\r\n4\r\n1\r\n5\r\n21\r\n1\r\n1\r\n2\r\n12\r\n6\r\n3\r\n6\r\n3\r\n1\r\n1\r\n10\r\n2\r\n2\r\n1\r\n1\r\n3\r\n5\r\n2\r\n5\r\n1\r\n7\r\n3\r\n4\r\n9\r\n5\r\n2\r\n3\r\n14\r\n8\r\n1\r\n6\r\n5\r\n2\r\n3\r\n3\r\n7\r\n2\r\n2\r\n7\r\n5\r\n14\r\n4\r\n10\r\n3\r\n4\r\n25\r\n3\r\n6\r\n13\r\n2\r\n3\r\n7\r\n6\r\n1\r\n2\r\n1\r\n4\r\n1\r\n4\r\n1\r\n3\r\n17\r\n6\r\n",
                "0\r\n3\r\n2\r\n0\r\n1\r\n0\r\n1\r\n1\r\n2\r\n2\r\n2\r\n0\r\n1\r\n3\r\n2\r\n2\r\n0\r\n2\r\n1\r\n1\r\n1\r\n0\r\n0\r\n2\r\n0\r\n2\r\n2\r\n2\r\n3\r\n0\r\n2\r\n3\r\n4\r\n2\r\n0\r\n2\r\n4\r\n0\r\n0\r\n1\r\n3\r\n3\r\n1\r\n3\r\n1\r\n0\r\n0\r\n2\r\n1\r\n1\r\n0\r\n0\r\n1\r\n2\r\n1\r\n2\r\n0\r\n1\r\n1\r\n2\r\n2\r\n2\r\n1\r\n1\r\n2\r\n1\r\n0\r\n3\r\n2\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n2\r\n2\r\n2\r\n2\r\n1\r\n2\r\n3\r\n1\r\n3\r\n4\r\n1\r\n1\r\n1\r\n3\r\n0\r\n1\r\n0\r\n2\r\n0\r\n2\r\n0\r\n1\r\n2\r\n3\r\n"
            ]
        ]
    }
]