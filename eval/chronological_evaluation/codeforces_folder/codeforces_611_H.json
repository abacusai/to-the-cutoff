[
    {
        "name": "New Year  and Forgotten Tree",
        "description": "A tree is a connected undirected graph with n - 1 edges, where n denotes the\nnumber of vertices. Vertices are numbered 1 through n. Limak is a little polar\nbear. His bear family prepares a New Year tree every year. One year ago their\ntree was more awesome than usually. Thus, they decided to prepare the same\ntree in the next year. Limak was responsible for remembering that tree. It\nwould be hard to remember a whole tree. Limak decided to describe it in his\nnotebook instead. He took a pen and wrote n - 1 lines, each with two integers\n\u2014 indices of two vertices connected by an edge. Now, the New Year is just\naround the corner and Limak is asked to reconstruct that tree. Of course,\nthere is a problem. He was a very little bear a year ago, and he didn't know\ndigits and the alphabet, so he just replaced each digit with a question mark \u2014\nthe only character he knew. That means, for any vertex index in his notes he\nknows only the number of digits in it. At least he knows there were no leading\nzeroes. Limak doesn't want to disappoint everyone. Please, take his notes and\nreconstruct a New Year tree. Find any tree matching Limak's records and print\nits edges in any order. It's also possible that Limak made a mistake and there\nis no suitable tree \u2013 in this case print \"-1\" (without the quotes). Input The\nfirst line contains a single integer n (2 \u2264 n \u2264 200 000) \u2014 the number of\nvertices. Each of the next n - 1 lines contains two space-separated non-empty\nstrings, both consisting of questions marks only. No string has more\ncharacters than the number of digits in n. Output If there is no tree matching\nLimak's records, print the only line with \"-1\" (without the quotes).\nOtherwise, describe any tree matching Limak's notes. Print n - 1 lines, each\nwith two space-separated integers \u2013 indices of vertices connected by an edge.\nYou can print edges in any order. Examples Input 12 ? ? ? ? ? ? ? ?? ?? ? ??\n?? ? ?? ? ? ? ? ? ? ? ? Output 3 1 1 6 9 1 2 10 1 7 8 1 1 4 1 10 5 1 10 11 12\n1 Input 12 ?? ?? ? ? ? ? ? ?? ?? ? ?? ?? ? ?? ? ? ? ? ?? ?? ? ? Output -1\n\n",
        "cf_contest_id": 611,
        "cf_index": "H",
        "cf_rating": 3200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "flows",
            "graphs"
        ],
        "time_limit_seconds": 7.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "12\r\n? ?\r\n? ?\r\n? ?\r\n? ??\r\n?? ?\r\n?? ??\r\n? ??\r\n? ?\r\n? ?\r\n? ?\r\n? ?\r\n",
                "9 1\r\n8 1\r\n7 1\r\n6 1\r\n5 1\r\n4 1\r\n3 1\r\n2 10\r\n1 10\r\n12 1\r\n11 10\r\n"
            ],
            [
                "12\r\n?? ??\r\n? ?\r\n? ?\r\n? ??\r\n?? ?\r\n?? ??\r\n? ??\r\n? ?\r\n? ?\r\n?? ??\r\n? ?\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n? ?\r\n? ?\r\n? ?\r\n? ?\r\n",
                "5 1\r\n4 1\r\n3 1\r\n2 1\r\n"
            ],
            [
                "2\r\n? ?\r\n",
                "2 1\r\n"
            ],
            [
                "3\r\n? ?\r\n? ?\r\n",
                "3 1\r\n2 1\r\n"
            ],
            [
                "15\r\n? ?\r\n? ?\r\n? ?\r\n?? ?\r\n? ?\r\n? ?\r\n? ??\r\n? ??\r\n?? ??\r\n?? ?\r\n? ?\r\n? ?\r\n? ??\r\n? ?\r\n",
                "9 1\r\n8 1\r\n7 1\r\n6 1\r\n5 1\r\n4 1\r\n3 1\r\n2 1\r\n1 10\r\n15 1\r\n14 1\r\n13 1\r\n12 1\r\n11 10\r\n"
            ],
            [
                "15\r\n? ??\r\n? ?\r\n? ?\r\n?? ??\r\n?? ??\r\n?? ?\r\n?? ?\r\n?? ?\r\n? ?\r\n? ??\r\n?? ?\r\n? ?\r\n? ?\r\n? ??\r\n",
                "9 1\r\n8 1\r\n7 1\r\n6 1\r\n5 1\r\n4 10\r\n3 10\r\n2 10\r\n1 10\r\n15 1\r\n14 1\r\n13 1\r\n12 10\r\n11 10\r\n"
            ],
            [
                "15\r\n?? ??\r\n? ?\r\n?? ?\r\n? ??\r\n? ?\r\n? ?\r\n? ??\r\n?? ??\r\n? ??\r\n? ??\r\n?? ??\r\n?? ??\r\n?? ?\r\n?? ?\r\n",
                "9 1\r\n8 1\r\n7 1\r\n6 10\r\n5 10\r\n4 10\r\n3 10\r\n2 10\r\n1 10\r\n15 1\r\n14 10\r\n13 10\r\n12 10\r\n11 10\r\n"
            ],
            [
                "15\r\n? ?\r\n? ?\r\n? ??\r\n? ??\r\n?? ?\r\n? ??\r\n? ?\r\n? ?\r\n? ?\r\n? ?\r\n? ??\r\n? ?\r\n?? ?\r\n? ??\r\n",
                "9 1\r\n8 1\r\n7 1\r\n6 1\r\n5 1\r\n4 1\r\n3 1\r\n2 10\r\n1 10\r\n15 1\r\n14 1\r\n13 1\r\n12 1\r\n11 1\r\n"
            ],
            [
                "15\r\n? ??\r\n? ??\r\n? ??\r\n? ??\r\n? ??\r\n?? ??\r\n? ??\r\n? ?\r\n? ?\r\n?? ??\r\n?? ?\r\n?? ?\r\n? ?\r\n? ??\r\n",
                "9 1\r\n8 1\r\n7 1\r\n6 10\r\n5 10\r\n4 10\r\n3 10\r\n2 10\r\n1 10\r\n15 1\r\n14 1\r\n13 1\r\n12 10\r\n11 10\r\n"
            ],
            [
                "15\r\n?? ??\r\n?? ??\r\n?? ??\r\n?? ?\r\n? ?\r\n? ??\r\n? ??\r\n? ?\r\n?? ?\r\n? ??\r\n? ??\r\n?? ?\r\n?? ?\r\n? ?\r\n",
                "9 1\r\n8 1\r\n7 1\r\n6 10\r\n5 10\r\n4 10\r\n3 10\r\n2 10\r\n1 10\r\n15 1\r\n14 1\r\n13 10\r\n12 10\r\n11 10\r\n"
            ],
            [
                "25\r\n?? ?\r\n? ?\r\n? ??\r\n? ?\r\n? ?\r\n?? ??\r\n?? ??\r\n?? ?\r\n? ??\r\n? ?\r\n? ?\r\n?? ??\r\n?? ??\r\n? ??\r\n? ?\r\n? ?\r\n?? ??\r\n?? ?\r\n?? ?\r\n?? ??\r\n? ?\r\n?? ??\r\n? ??\r\n?? ??\r\n",
                "9 1\r\n8 1\r\n7 1\r\n6 1\r\n5 1\r\n4 1\r\n3 1\r\n2 1\r\n1 10\r\n25 1\r\n24 1\r\n23 1\r\n22 1\r\n21 1\r\n20 1\r\n19 1\r\n18 10\r\n17 10\r\n16 10\r\n15 10\r\n14 10\r\n13 10\r\n12 10\r\n11 10\r\n"
            ],
            [
                "25\r\n?? ??\r\n? ??\r\n?? ?\r\n?? ??\r\n? ??\r\n?? ??\r\n?? ??\r\n?? ??\r\n?? ??\r\n?? ??\r\n?? ??\r\n?? ??\r\n? ??\r\n?? ?\r\n? ??\r\n?? ??\r\n?? ??\r\n?? ??\r\n?? ??\r\n?? ?\r\n?? ??\r\n? ?\r\n? ??\r\n? ?\r\n",
                "9 1\r\n8 1\r\n7 10\r\n6 10\r\n5 10\r\n4 10\r\n3 10\r\n2 10\r\n1 10\r\n25 1\r\n24 10\r\n23 10\r\n22 10\r\n21 10\r\n20 10\r\n19 10\r\n18 10\r\n17 10\r\n16 10\r\n15 10\r\n14 10\r\n13 10\r\n12 10\r\n11 10\r\n"
            ],
            [
                "25\r\n?? ?\r\n?? ??\r\n?? ??\r\n?? ?\r\n?? ??\r\n?? ??\r\n?? ??\r\n? ??\r\n?? ?\r\n?? ??\r\n?? ??\r\n? ??\r\n?? ??\r\n?? ??\r\n?? ?\r\n?? ??\r\n?? ??\r\n?? ?\r\n?? ?\r\n? ??\r\n?? ??\r\n?? ??\r\n?? ??\r\n?? ??\r\n",
                "9 10\r\n8 10\r\n7 10\r\n6 10\r\n5 10\r\n4 10\r\n3 10\r\n2 10\r\n1 10\r\n25 10\r\n24 10\r\n23 10\r\n22 10\r\n21 10\r\n20 10\r\n19 10\r\n18 10\r\n17 10\r\n16 10\r\n15 10\r\n14 10\r\n13 10\r\n12 10\r\n11 10\r\n"
            ],
            [
                "25\r\n?? ?\r\n? ??\r\n? ?\r\n?? ?\r\n?? ?\r\n? ??\r\n? ?\r\n?? ??\r\n?? ??\r\n?? ??\r\n? ?\r\n? ?\r\n?? ?\r\n?? ??\r\n?? ?\r\n?? ?\r\n? ?\r\n?? ??\r\n? ??\r\n? ?\r\n?? ?\r\n? ?\r\n?? ?\r\n? ??\r\n",
                "9 1\r\n8 1\r\n7 1\r\n6 1\r\n5 1\r\n4 1\r\n3 1\r\n2 10\r\n1 10\r\n25 1\r\n24 1\r\n23 1\r\n22 1\r\n21 1\r\n20 1\r\n19 1\r\n18 1\r\n17 1\r\n16 1\r\n15 10\r\n14 10\r\n13 10\r\n12 10\r\n11 10\r\n"
            ],
            [
                "25\r\n? ??\r\n?? ?\r\n? ?\r\n?? ?\r\n? ??\r\n?? ??\r\n? ??\r\n? ??\r\n?? ??\r\n?? ??\r\n?? ??\r\n? ??\r\n?? ?\r\n? ??\r\n?? ??\r\n? ??\r\n?? ?\r\n?? ?\r\n?? ?\r\n? ??\r\n?? ?\r\n?? ??\r\n?? ??\r\n? ??\r\n",
                "9 1\r\n8 10\r\n7 10\r\n6 10\r\n5 10\r\n4 10\r\n3 10\r\n2 10\r\n1 10\r\n25 1\r\n24 1\r\n23 1\r\n22 1\r\n21 1\r\n20 1\r\n19 1\r\n18 1\r\n17 10\r\n16 10\r\n15 10\r\n14 10\r\n13 10\r\n12 10\r\n11 10\r\n"
            ],
            [
                "25\r\n?? ??\r\n?? ??\r\n?? ??\r\n?? ?\r\n?? ??\r\n?? ?\r\n?? ??\r\n? ?\r\n? ??\r\n?? ?\r\n? ??\r\n?? ?\r\n? ?\r\n? ?\r\n?? ??\r\n? ??\r\n?? ??\r\n?? ??\r\n?? ??\r\n?? ?\r\n? ?\r\n?? ??\r\n?? ?\r\n?? ??\r\n",
                "9 1\r\n8 1\r\n7 1\r\n6 1\r\n5 10\r\n4 10\r\n3 10\r\n2 10\r\n1 10\r\n25 1\r\n24 1\r\n23 1\r\n22 1\r\n21 10\r\n20 10\r\n19 10\r\n18 10\r\n17 10\r\n16 10\r\n15 10\r\n14 10\r\n13 10\r\n12 10\r\n11 10\r\n"
            ]
        ]
    }
]