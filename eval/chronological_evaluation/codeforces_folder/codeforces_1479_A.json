[
    {
        "name": "Searching Local Minimum",
        "description": "This is an interactive problem. Homer likes arrays a lot and he wants to play\na game with you. Homer has hidden from you a permutation \n    a_1, a_2, \n    \u2026,\n    a_n\n of integers \n    1\n to \n    n\n. You are asked to find any index \n    k\n\n(\n    1 \n    \u2264 k \n    \u2264 n\n) which is a local minimum. For an array \n    a_1,\n    a_2, \n    \u2026, a_n\n, an index \n    i\n (\n    1 \n    \u2264 i \n    \u2264 n\n) is said to\nbe a local minimum if \n    a_i < \n    min\n    \n    a_i-1,a_i+1\n, where\n\n    a_0 = a_n+1 = +\n    \u221e\n. An array is said to be a permutation of\nintegers \n    1\n to \n    n\n, if it contains all integers from \n    1\n to\n\n    n\n exactly once. Initially, you are only given the value of \n    n\n\nwithout any other information about this permutation. At each interactive\nstep, you are allowed to choose any \n    i\n (\n    1 \n    \u2264 i \n    \u2264 n\n) and\nmake a query with it. As a response, you will be given the value of \n    a_i\n.\nYou are asked to find any index \n    k\n which is a local minimum after at most\n\n    100\n queries. Interaction You begin the interaction by reading an integer\n\n    n\n (\n    1\n    \u2264 n \n    \u2264 10^5\n) on a separate line. To make a query on\nindex \n    i\n (\n    1 \n    \u2264 i \n    \u2264 n\n), you should output \"? \n    i\n\" in a\nseparate line. Then read the value of \n    a_i\n in a separate line. The number\nof the \"?\" queries is limited within \n    100\n. When you find an index \n    k\n\n(\n    1 \n    \u2264 k \n    \u2264 n\n) which is a local minimum, output \"! \n    k\n\" in a\nseparate line and terminate your program. In case your query format is\ninvalid, or you have made more than \n    100\n \"?\" queries, you will receive\nWrong Answer verdict. After printing a query do not forget to output end of\nline and flush the output. Otherwise, you will get Idleness limit exceeded. To\ndo this, use: fflush(stdout) or cout.flush() in C++; System.out.flush() in\nJava; flush(output) in Pascal; stdout.flush() in Python; see documentation for\nother languages.Hack Format The first line of the hack should contain a single\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n). The second line should contain\n\n    n\n distinct integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264\n    n\n). Example Input 5 3 2 1 4 5 Output ? 1 ? 2 ? 3 ? 4 ? 5 ! 3 Note In the\nexample, the first line contains an integer \n    5\n indicating that the length\nof the array is \n    n = 5\n. The example makes five \"?\" queries, after which\nwe conclude that the array is \n    a = [3,2,1,4,5]\n and \n    k = 3\n is local\nminimum.\n\n",
        "cf_contest_id": 1479,
        "cf_index": "A",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "interactive",
            "ternary search"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5\r\n3 2 1 4 5\r\n",
                ""
            ]
        ],
        "private_cases": [
            [
                "73\r\n14 61 69 73 59 26 8 2 65 51 68 3 22 31 30 36 5 64 60 62 9 24 48 46 12 19 18 52 39 67 42 50 71 66 16 28 25 70 27 53 32 35 34 57 21 41 55 11 33 40 17 63 1 13 58 49 6 54 38 44 7 47 72 56 29 20 37 4 10 15 23 45 43\r\n",
                ""
            ],
            [
                "41\r\n21 13 22 36 12 32 18 34 37 7 20 2 41 23 15 24 40 25 33 14 11 19 17 10 26 35 28 9 3 4 38 31 39 5 30 8 6 29 27 1 16\r\n",
                ""
            ],
            [
                "83\r\n27 40 70 41 34 18 80 56 12 71 24 22 8 47 79 1 10 61 68 43 63 78 51 5 81 7 13 42 21 46 30 14 82 52 58 57 23 73 31 17 38 36 33 64 60 26 75 55 54 16 3 9 83 67 59 2 39 32 44 45 53 62 28 49 15 35 11 25 4 19 37 74 29 76 6 65 72 50 48 69 77 66 20\r\n",
                ""
            ],
            [
                "51\r\n47 32 43 46 49 23 17 2 45 21 27 13 15 26 36 44 9 4 19 31 33 29 8 20 18 42 48 35 51 38 25 5 12 41 7 3 10 1 50 16 30 37 11 6 34 28 14 40 24 39 22\r\n",
                ""
            ],
            [
                "1\r\n1\r\n",
                ""
            ],
            [
                "26\r\n26 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 21 22 23 24 25\r\n",
                ""
            ],
            [
                "10\r\n7 6 5 4 3 2 1 8 9 10\r\n",
                ""
            ],
            [
                "30\r\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 21 22 23 24 25 26 27 28 29 30\r\n",
                ""
            ],
            [
                "9\r\n9 8 7 1 2 3 4 5 6\r\n",
                ""
            ],
            [
                "9\r\n1 9 8 5 3 2 6 7 4\r\n",
                ""
            ],
            [
                "10\r\n10 9 8 1 2 3 4 5 6 7\r\n",
                ""
            ],
            [
                "2\r\n2 1\r\n",
                ""
            ],
            [
                "10\r\n6 2 3 1 4 5 7 8 9 10\r\n",
                ""
            ],
            [
                "10\r\n2 1 10 9 8 7 6 5 4 3\r\n",
                ""
            ],
            [
                "2\r\n1 2\r\n",
                ""
            ],
            [
                "26\r\n12 8 5 1 3 4 6 7 9 10 13 14 15 16 18 19 20 2 11 17 21 22 23 24 25 26\r\n",
                ""
            ],
            [
                "31\r\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 1 22 23 24 25 26 27 28 29 30 31\r\n",
                ""
            ],
            [
                "26\r\n1 3 4 5 6 7 12 8 9 10 13 14 15 16 18 19 20 2 11 17 21 22 23 24 25 26\r\n",
                ""
            ],
            [
                "100\r\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 1 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\r\n",
                ""
            ]
        ]
    }
]