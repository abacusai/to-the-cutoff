[
    {
        "name": "Garden of the Sun",
        "description": "There are many sunflowers in the Garden of the Sun. Garden of the Sun is a\nrectangular table with \n    n\n rows and \n    m\n columns, where the cells of\nthe table are farmlands. All of the cells grow a sunflower on it.\nUnfortunately, one night, the lightning stroke some (possibly zero) cells, and\nsunflowers on those cells were burned into ashes. In other words, those cells\nstruck by the lightning became empty. Magically, any two empty cells have no\ncommon points (neither edges nor corners). Now the owner wants to remove some\n(possibly zero) sunflowers to reach the following two goals: When you are on\nan empty cell, you can walk to any other empty cell. In other words, those\nempty cells are connected. There is exactly one simple path between any two\nempty cells. In other words, there is no cycle among the empty cells. You can\nwalk from an empty cell to another if they share a common edge. Could you\nplease give the owner a solution that meets all her requirements? Note that\nyou are not allowed to plant sunflowers. You don't need to minimize the number\nof sunflowers you remove. It can be shown that the answer always exists. Input\nThe input consists of multiple test cases. The first line contains a single\ninteger \n    t\n (\n    1\n    \u2264 t\n    \u2264 10^4\n) \u2014 the number of test cases. The\ndescription of the test cases follows. The first line contains two integers\n\n    n\n, \n    m\n (\n    1 \n    \u2264 n,m \n    \u2264 500\n) \u2014 the number of rows and\ncolumns. Each of the next \n    n\n lines contains \n    m\n characters. Each\ncharacter is either 'X' or '.', representing an empty cell and a cell that\ngrows a sunflower, respectively. It is guaranteed that the sum of \n    n \n    \u00b7\n    m\n for all test cases does not exceed \n    250\n     000\n. Output For each test\ncase, print \n    n\n lines. Each should contain \n    m\n characters,\nrepresenting one row of the table. Each character should be either 'X' or '.',\nrepresenting an empty cell and a cell with a sunflower, respectively. If there\nare multiple answers, you can print any. It can be shown that the answer\nalways exists. Example Input 5 3 3 X.X ... X.X 4 4 .... .X.X .... .X.X 5 5\n.X... ....X .X... ..... X.X.X 1 10 ....X.X.X. 2 2 .. .. Output XXX ..X XXX\nXXXX .X.X .X.. .XXX .X... .XXXX .X... .X... XXXXX XXXXXXXXXX .. .. Note Let's\nuse \n    (x,y)\n to describe the cell on \n    x\n-th row and \n    y\n-th column.\nIn the following pictures white, yellow, and blue cells stand for the cells\nthat grow a sunflower, the cells lightning stroke, and the cells sunflower on\nwhich are removed, respectively. In the first test case, one possible solution\nis to remove sunflowers on \n    (1,2)\n, \n    (2,3)\n and \n    (3 ,2)\n. Another\nacceptable solution is to remove sunflowers on \n    (1,2)\n, \n    (2,2)\n and\n\n    (3,2)\n. This output is considered wrong because there are 2 simple paths\nbetween any pair of cells (there is a cycle). For example, there are 2 simple\npaths between \n    (1,1)\n and \n    (3,3)\n. \n    (1,1)\n    \u2192 (1,2)\n    \u2192 (1,3)\n    \u2192\n    (2,3)\n    \u2192 (3,3)\n \n    (1,1)\n    \u2192 (2,1)\n    \u2192 (3,1)\n    \u2192 (3,2)\n    \u2192 (3,3)\n\nThis output is considered wrong because you can't walk from \n    (1,1)\n to\n\n    (3,3)\n.\n\n",
        "cf_contest_id": 1495,
        "cf_index": "C",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graphs"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3 3\r\nX.X\r\n...\r\nX.X\r\n4 4\r\n....\r\n.X.X\r\n....\r\n.X.X\r\n5 5\r\n.X...\r\n....X\r\n.X...\r\n.....\r\nX.X.X\r\n1 10\r\n....X.X.X.\r\n2 2\r\n..\r\n..\r\n",
                "X.X\r\nXXX\r\nX.X\r\nXXXX\r\n.X.X\r\n.X..\r\nXXXX\r\nXXXXX\r\n.X..X\r\n.X...\r\nXXXXX\r\nX.X.X\r\nXXXXXXXXXX\r\nXX\r\n..\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 1\r\n.\r\n",
                "X\r\n"
            ]
        ]
    }
]