[
    {
        "name": "Graph Coloring",
        "description": "You are given a bipartite graph consisting of \n    n_1\n vertices in the first\npart, \n    n_2\n vertices in the second part, and \n    m\n edges, numbered from\n\n    1\n to \n    m\n. You have to color each edge into one of two colors, red\nand blue. You have to minimize the following value: \n    \u2211\n    _v\n    \n    \u2208 V |r(v) - b(v)|\n, where \n    V\n is the set of vertices of the graph,\n\n    r(v)\n is the number of red edges incident to \n    v\n, and \n    b(v)\n is\nthe number of blue edges incident to \n    v\n. Sounds classical and easy,\nright? Well, you have to process \n    q\n queries of the following format:\n\n    1\n \n    v_1\n \n    v_2\n \u2014 add a new edge connecting the vertex \n    v_1\n\nof the first part with the vertex \n    v_2\n of the second part. This edge gets\na new index as follows: the first added edge gets the index \n    m + 1\n, the\nsecond \u2014 \n    m + 2\n, and so on. After adding the edge, you have to print the\nhash of the current optimal coloring (if there are multiple optimal colorings,\nprint the hash of any of them). Actually, this hash won't be verified, you may\nprint any number as the answer to this query, but you may be asked to produce\nthe coloring having this hash; \n    2\n \u2014 print the optimal coloring of the\ngraph with the same hash you printed while processing the previous query. The\nquery of this type will only be asked after a query of type \n    1\n, and there\nwill be at most \n    10\n queries of this type. If there are multiple optimal\ncolorings corresponding to this hash, print any of them. Note that if an edge\nwas red or blue in some coloring, it may change its color in next colorings.\nThe hash of the coloring is calculated as follows: let \n    R\n be the set of\nindices of red edges, then the hash is \n    (\n    \u2211\n    _i \n    \u2208 R 2^i)\n    \n     998244353\n. Note that you should solve the problem in online mode.\nIt means that you can't read the whole input at once. You can read each query\nonly after writing the answer for the last query. Use functions fflush in C++\nand BufferedWriter.flush in Java languages after each writing in your program.\nInput The first line contains three integers \n    n_1\n, \n    n_2\n and \n    m\n\n(\n    1 \n    \u2264 n_1, n_2, m \n    \u2264 2 \n    \u00b7 10^5\n). Then \n    m\n lines follow,\nthe \n    i\n-th of them contains two integers \n    x_i\n and \n    y_i\n (\n    1\n    \n    \u2264 x_i \n    \u2264 n_1\n; \n    1 \n    \u2264 y_i \n    \u2264 n_2\n) meaning that the\n\n    i\n-th edge connects the vertex \n    x_i\n from the first part and the\nvertex \n    y_i\n from the second part. The next line contains one integer\n\n    q\n (\n    1 \n    \u2264 q \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of queries you\nhave to process. The next \n    q\n lines contain the queries in the format\nintroduced in the statement. Additional constraints on the input: at any\nmoment, the graph won't contain any multiple edges; the queries of type\n\n    2\n are only asked if the previous query had type \n    1\n; there are at\nmost \n    10\n queries of type \n    2\n. Output To answer a query of type\n\n    1\n, print one integer \u2014 the hash of the optimal coloring. To answer a\nquery of type \n    2\n, print one line. It should begin with the integer\n\n    k\n \u2014 the number of red edges. Then, \n    k\n distinct integer should\nfollow \u2014 the indices of red edges in your coloring, in any order. Each index\nshould correspond to an existing edge, and the hash of the coloring you\nproduce should be equal to the hash you printed as the answer to the previous\nquery. If there are multiple answers to a query, you may print any of them.\nExample Input 3 4 2 1 2 3 4 10 1 1 3 1 2 3 2 1 3 3 2 1 2 4 2 1 2 1 1 1 1 2\nOutput 8 8 1 3 40 2 3 5 104 3 5 6 3 104 360 4 5 6 3 8\n\n",
        "cf_contest_id": 1499,
        "cf_index": "G",
        "cf_rating": 3100,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "graphs",
            "interactive"
        ],
        "time_limit_seconds": 7.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "3 4 2\r\n1 2\r\n3 4\r\n10\r\n1 1 3\r\n1 2 3\r\n2\r\n1 3 3\r\n2\r\n1 2 4\r\n2\r\n1 2 1\r\n1 1 1\r\n2\r\n",
                "2\r\n8\r\n1 3\r\n12\r\n2 2 3\r\n22\r\n3 1 2 4\r\n22\r\n150\r\n4 1 2 4 7\r\n"
            ]
        ],
        "private_cases": [
            [
                "20 20 20\r\n8 3\r\n2 11\r\n2 2\r\n9 11\r\n5 10\r\n6 10\r\n17 8\r\n6 19\r\n19 18\r\n10 1\r\n17 18\r\n20 18\r\n17 20\r\n2 6\r\n20 16\r\n10 11\r\n8 15\r\n12 17\r\n20 11\r\n4 8\r\n20\r\n1 3 3\r\n2\r\n1 4 17\r\n2\r\n1 10 20\r\n2\r\n1 16 15\r\n2\r\n1 14 19\r\n2\r\n1 16 10\r\n2\r\n1 17 19\r\n2\r\n1 6 16\r\n2\r\n1 15 19\r\n2\r\n1 19 11\r\n2\r\n",
                "70342\r\n7 1 2 6 7 9 12 16\r\n1382470\r\n8 1 2 6 11 12 16 18 20\r\n1390662\r\n9 1 2 6 11 12 13 16 18 20\r\n3618884\r\n10 2 6 11 12 13 16 17 18 20 21\r\n3619108\r\n11 2 5 8 11 12 13 16 17 18 20 21\r\n18168102\r\n11 1 2 5 8 11 12 13 16 18 20 24\r\n18168102\r\n11 1 2 5 8 11 12 13 16 18 20 24\r\n18196774\r\n11 1 2 5 8 11 13 15 16 18 20 24\r\n160794918\r\n12 1 2 5 8 11 15 16 18 20 23 24 27\r\n163677094\r\n12 1 2 5 7 8 9 15 16 22 23 24 27\r\n"
            ],
            [
                "5 5 5\r\n4 5\r\n5 3\r\n5 1\r\n3 2\r\n3 4\r\n5\r\n1 4 4\r\n1 3 5\r\n2\r\n1 1 5\r\n2\r\n",
                "38\r\n38\r\n3 1 2 5\r\n38\r\n3 1 2 5\r\n"
            ],
            [
                "5 5 5\r\n1 3\r\n1 5\r\n3 1\r\n4 1\r\n5 4\r\n5\r\n1 4 3\r\n2\r\n1 5 2\r\n1 5 3\r\n2\r\n",
                "18\r\n2 1 4\r\n50\r\n50\r\n3 1 4 5\r\n"
            ]
        ]
    }
]