[
    {
        "name": "Leha and security system",
        "description": "Bankopolis, the city you already know, finally got a new bank opened!\nUnfortunately, its security system is not yet working fine... Meanwhile hacker\nLeha arrived in Bankopolis and decided to test the system! Bank has n cells\nfor clients' money. A sequence from n numbers a1, a2, ..., an describes the\namount of money each client has. Leha wants to make requests to the database\nof the bank, finding out the total amount of money on some subsegments of the\nsequence and changing values of the sequence on some subsegments. Using a bug\nin the system, Leha can requests two types of queries to the database: 1 l r x\ny denoting that Leha changes each digit x to digit y in each element of\nsequence ai, for which l \u2264 i \u2264 r is holds. For example, if we change in number\n11984381 digit 8 to 4, we get 11944341. It's worth noting that Leha, in order\nto stay in the shadow, never changes digits in the database to 0, i.e. y \u2260 0.\n2 l r denoting that Leha asks to calculate and print the sum of such elements\nof sequence ai, for which l \u2264 i \u2264 r holds. As Leha is a white-hat hacker, he\ndon't want to test this vulnerability on a real database. You are to write a\nsimilar database for Leha to test. Input The first line of input contains two\nintegers n and q (1 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) denoting amount of cells in the\nbank and total amount of queries respectively. The following line contains n\nintegers a1, a2, ..., an (1 \u2264 ai < 10^9) denoting the amount of money in each\ncell initially. These integers do not contain leading zeros. Each of the\nfollowing q lines has one of the formats: 1 l r x y (1 \u2264 l \u2264 r \u2264 n, 0 \u2264 x \u2264 9,\n1 \u2264 y \u2264 9), denoting Leha asks to change each digit x on digit y for each\nelement ai of the sequence for which l \u2264 i \u2264 r holds; 2 l r (1 \u2264 l \u2264 r \u2264 n),\ndenoting you have to calculate and print the sum of elements ai for which l \u2264\ni \u2264 r holds. Output For each second type query print a single number denoting\nthe required sum. Examples Input 5 5 38 43 4 12 70 1 1 3 4 8 2 2 4 1 4 5 0 8 1\n2 5 8 7 2 1 5 Output 103 207 Input 5 5 25 36 39 40 899 1 1 3 2 7 2 1 2 1 3 5 9\n1 1 4 4 0 9 2 1 5 Output 111 1002 Note Let's look at the example testcase.\nInitially the sequence is [38, 43, 4, 12, 70]. After the first change each\ndigit equal to 4 becomes 8 for each element with index in interval [1; 3].\nThus, the new sequence is [38, 83, 8, 12, 70]. The answer for the first sum's\nquery is the sum in the interval [2; 4], which equal 83 + 8 + 12 = 103, so the\nanswer to this query is 103. The sequence becomes [38, 83, 8, 12, 78] after\nthe second change and [38, 73, 7, 12, 77] after the third. The answer for the\nsecond sum's query is 38 + 73 + 7 + 12 + 77 = 207.\n\n",
        "cf_contest_id": 794,
        "cf_index": "F",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5 5\r\n38 43 4 12 70\r\n1 1 3 4 8\r\n2 2 4\r\n1 4 5 0 8\r\n1 2 5 8 7\r\n2 1 5\r\n",
                "103\r\n207\r\n"
            ],
            [
                "5 5\r\n25 36 39 40 899\r\n1 1 3 2 7\r\n2 1 2\r\n1 3 5 9 1\r\n1 4 4 0 9\r\n2 1 5\r\n",
                "111\r\n1002\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 3\r\n16 40616 26475 2385506 9467\r\n1 3 5 3 4\r\n1 2 4 1 2\r\n2 3 5\r\n",
                "2521448\r\n"
            ],
            [
                "5 5\r\n42 40230 142470 99398 403\r\n2 1 5\r\n1 2 3 7 7\r\n2 1 4\r\n2 5 5\r\n1 1 1 8 1\r\n",
                "282543\r\n282140\r\n403\r\n"
            ],
            [
                "9 20\r\n36440862 5931 6573823 27 5 80610 7 55735831 93\r\n2 4 9\r\n1 8 9 7 1\r\n1 1 3 2 2\r\n2 3 7\r\n1 1 6 3 5\r\n2 1 6\r\n2 4 7\r\n2 1 6\r\n1 7 8 7 2\r\n1 7 9 4 9\r\n1 4 6 6 5\r\n2 5 8\r\n2 1 9\r\n1 7 9 4 2\r\n1 7 9 0 1\r\n1 7 8 2 1\r\n2 1 2\r\n2 2 9\r\n2 5 9\r\n2 3 5\r\n",
                "55816573\r\n6654472\r\n63103280\r\n80649\r\n63103280\r\n55216348\r\n118239106\r\n56446813\r\n61798243\r\n55216440\r\n6575857\r\n"
            ],
            [
                "9 20\r\n9 9 9 9 9 9 9 9 9\r\n2 5 9\r\n2 5 9\r\n2 3 9\r\n1 2 9 8 9\r\n2 4 9\r\n1 1 9 9 9\r\n2 1 8\r\n2 1 6\r\n2 6 9\r\n1 5 8 8 9\r\n2 6 9\r\n2 3 8\r\n1 1 8 9 9\r\n1 1 7 9 9\r\n2 6 9\r\n2 4 7\r\n2 3 7\r\n2 5 8\r\n1 6 9 8 9\r\n1 2 7 8 9\r\n",
                "45\r\n45\r\n63\r\n54\r\n72\r\n54\r\n36\r\n36\r\n54\r\n36\r\n36\r\n45\r\n36\r\n"
            ],
            [
                "9 20\r\n99 98 99 98 98 99 99 98 98\r\n2 2 7\r\n2 5 9\r\n1 5 9 9 9\r\n1 5 9 9 9\r\n1 4 8 8 9\r\n2 2 9\r\n2 1 5\r\n1 2 9 9 9\r\n2 1 9\r\n1 1 6 9 9\r\n2 5 9\r\n1 4 8 9 9\r\n2 1 5\r\n1 4 8 8 9\r\n2 1 7\r\n1 1 7 9 9\r\n1 2 6 8 9\r\n2 3 9\r\n1 2 6 9 9\r\n2 4 9\r\n",
                "591\r\n492\r\n790\r\n494\r\n889\r\n494\r\n494\r\n692\r\n692\r\n593\r\n"
            ],
            [
                "10 10\r\n9845 55587 4473 63 899945 548 98598 7637 74 73\r\n1 2 6 4 4\r\n2 5 9\r\n1 7 10 9 6\r\n1 1 5 4 8\r\n1 3 6 5 8\r\n2 7 10\r\n2 5 9\r\n1 5 8 5 9\r\n2 7 10\r\n1 1 10 7 5\r\n",
                "1006802\r\n76352\r\n977115\r\n76752\r\n"
            ]
        ]
    }
]