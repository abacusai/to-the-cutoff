[
    {
        "name": "Dima and Containers",
        "description": "Dima has a birthday soon! It's a big day! Saryozha's present to Dima is that\nSeryozha won't be in the room and won't disturb Dima and Inna as they\ncelebrate the birthday. Inna's present to Dima is a stack, a queue and a deck.\nInna wants her present to show Dima how great a programmer he is. For that,\nshe is going to give Dima commands one by one. There are two types of\ncommands: Add a given number into one of containers. For the queue and the\nstack, you can add elements only to the end. For the deck, you can add\nelements to the beginning and to the end. Extract a number from each of at\nmost three distinct containers. Tell all extracted numbers to Inna and then\nempty all containers. In the queue container you can extract numbers only from\nthe beginning. In the stack container you can extract numbers only from the\nend. In the deck number you can extract numbers from the beginning and from\nthe end. You cannot extract numbers from empty containers. Every time Dima\nmakes a command of the second type, Inna kisses Dima some (possibly zero)\nnumber of times. Dima knows Inna perfectly well, he is sure that this number\nequals the sum of numbers he extracts from containers during this operation.\nAs we've said before, Dima knows Inna perfectly well and he knows which\ncommands Inna will give to Dima and the order of the commands. Help Dima find\nthe strategy that lets him give as more kisses as possible for his birthday!\nInput The first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the number of Inna's\ncommands. Then n lines follow, describing Inna's commands. Each line consists\nan integer: Integer a (1 \u2264 a \u2264 10^5) means that Inna gives Dima a command to\nadd number a into one of containers. Integer 0 shows that Inna asks Dima to\nmake at most three extractions from different containers. Output Each command\nof the input must correspond to one line of the output \u2014 Dima's action. For\nthe command of the first type (adding) print one word that corresponds to\nDima's choice: pushStack \u2014 add to the end of the stack; pushQueue \u2014 add to the\nend of the queue; pushFront \u2014 add to the beginning of the deck; pushBack \u2014 add\nto the end of the deck. For a command of the second type first print an\ninteger k (0 \u2264 k \u2264 3), that shows the number of extract operations, then print\nk words separated by space. The words can be: popStack \u2014 extract from the end\nof the stack; popQueue \u2014 extract from the beginning of the line; popFront \u2014\nextract from the beginning from the deck; popBack \u2014 extract from the end of\nthe deck. The printed operations mustn't extract numbers from empty\ncontainers. Also, they must extract numbers from distinct containers. The\nprinted sequence of actions must lead to the maximum number of kisses. If\nthere are multiple sequences of actions leading to the maximum number of\nkisses, you are allowed to print any of them. Examples Input 10 0 1 0 1 2 0 1\n2 3 0 Output 0 pushStack 1 popStack pushStack pushQueue 2 popStack popQueue\npushStack pushQueue pushFront 3 popStack popQueue popFront Input 4 1 2 3 0\nOutput pushStack pushQueue pushFront 3 popStack popQueue popFront\n\n",
        "cf_contest_id": 358,
        "cf_index": "C",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10\r\n0\r\n1\r\n0\r\n1\r\n2\r\n0\r\n1\r\n2\r\n3\r\n0\r\n",
                "0\r\npushQueue\r\n1 popQueue\r\npushQueue\r\npushStack\r\n2 popQueue popStack\r\npushQueue\r\npushStack\r\npushBack\r\n3 popQueue popStack popBack\r\n"
            ],
            [
                "4\r\n1\r\n2\r\n3\r\n0\r\n",
                "pushQueue\r\npushStack\r\npushBack\r\n3 popQueue popStack popBack\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n0\r\n1\r\n",
                "0\r\npushQueue\r\n"
            ],
            [
                "5\r\n1\r\n1\r\n1\r\n2\r\n1\r\n",
                "pushQueue\r\npushQueue\r\npushQueue\r\npushQueue\r\npushQueue\r\n"
            ],
            [
                "5\r\n3\r\n2\r\n3\r\n1\r\n0\r\n",
                "pushQueue\r\npushStack\r\npushBack\r\npushQueue\r\n3 popQueue popStack popBack\r\n"
            ],
            [
                "10\r\n1\r\n2\r\n3\r\n5\r\n4\r\n9\r\n8\r\n6\r\n7\r\n0\r\n",
                "pushStack\r\npushStack\r\npushStack\r\npushStack\r\npushStack\r\npushQueue\r\npushStack\r\npushQueue\r\npushBack\r\n3 popQueue popStack popBack\r\n"
            ],
            [
                "10\r\n1\r\n3\r\n4\r\n2\r\n6\r\n8\r\n5\r\n7\r\n10\r\n9\r\n",
                "pushQueue\r\npushQueue\r\npushQueue\r\npushQueue\r\npushQueue\r\npushQueue\r\npushQueue\r\npushQueue\r\npushQueue\r\npushQueue\r\n"
            ],
            [
                "1\r\n0\r\n",
                "0\r\n"
            ]
        ]
    }
]