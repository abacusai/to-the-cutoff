[
    {
        "name": "Divine Array",
        "description": "Black is gifted with a Divine array \n    a\n consisting of \n    n\n (\n    1 \n    \u2264\n    n \n    \u2264 2000\n) integers. Each position in \n    a\n has an initial value.\nAfter shouting a curse over the array, it becomes angry and starts an\nunstoppable transformation. The transformation consists of infinite steps.\nArray \n    a\n changes at the \n    i\n-th step in the following way: for every\nposition \n    j\n, \n    a_j\n becomes equal to the number of occurrences of\n\n    a_j\n in \n    a\n before starting this step. Here is an example to help you\nunderstand the process better: Initial array:\n    2\n \n    1\n \n    1\n \n    4\n\n\n    3\n \n    1\n \n    2\nAfter the \n    1\n-st step:\n    2\n \n    3\n \n    3\n\n\n    1\n \n    1\n \n    3\n \n    2\nAfter the \n    2\n-nd step:\n    2\n \n    3\n\n\n    3\n \n    2\n \n    2\n \n    3\n \n    2\nAfter the \n    3\n-rd step:\n    4\n\n\n    3\n \n    3\n \n    4\n \n    4\n \n    3\n \n    4\n...... In the initial array, we\nhad two \n    2\n-s, three \n    1\n-s, only one \n    4\n and only one \n    3\n, so\nafter the first step, each element became equal to the number of its\noccurrences in the initial array: all twos changed to \n    2\n, all ones\nchanged to \n    3\n, four changed to \n    1\n and three changed to \n    1\n. The\ntransformation steps continue forever. You have to process \n    q\n queries: in\neach query, Black is curious to know the value of \n    a_x\n after the\n\n    k\n-th step of transformation. Input Each test contains multiple test\ncases. The first line contains the number of test cases \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 1000\n). Description of the test cases follows. The first line of each\ntest case contains an integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2000\n) \u2014 the size\nof the array \n    a\n. The second line of each test case contains \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n) \u2014 the\ninitial values of array \n    a\n. The third line of each test case contains a\nsingle integer \n    q\n (\n    1 \n    \u2264 q \n    \u2264 100\n     000\n) \u2014 the number of\nqueries. Next \n    q\n lines contain the information about queries \u2014 one query\nper line. The \n    i\n-th line contains two integers \n    x_i\n and \n    k_i\n\n(\n    1 \n    \u2264 x_i \n    \u2264 n\n; \n    0 \n    \u2264 k_i \n    \u2264 10^9\n), meaning that Black\nis asking for the value of \n    a_x_i\n after the \n    k_i\n-th step of\ntransformation. \n    k_i = 0\n means that Black is interested in values of the\ninitial array. It is guaranteed that the sum of \n    n\n over all test cases\ndoesn't exceed \n    2000\n and the sum of \n    q\n over all test cases doesn't\nexceed \n    100\n     000\n. Output For each test case, print \n    q\n answers. The\n\n    i\n-th of them should be the value of \n    a_x_i\n after the \n    k_i\n-th\nstep of transformation. It can be shown that the answer to each query is\nunique. Example Input 2 7 2 1 1 4 3 1 2 4 3 0 1 1 2 2 6 1 2 1 1 2 1 0 2\n1000000000 Output 1 2 3 3 1 2 Note The first test case was described ih the\nstatement. It can be seen that: \n    k_1 = 0\n (initial array): \n    a_3 = 1\n;\n\n    k_2 = 1\n (after the \n    1\n-st step): \n    a_1 = 2\n; \n    k_3 = 2\n (after\nthe \n    2\n-nd step): \n    a_2 = 3\n; \n    k_4 = 1\n (after the \n    1\n-st\nstep): \n    a_6 = 3\n. For the second test case, Initial array:\n    1\n\n\n    1\nAfter the \n    1\n-st step:\n    2\n \n    2\nAfter the \n    2\n-nd\nstep:\n    2\n \n    2\n...... It can be seen that: \n    k_1 = 0\n (initial array):\n\n    a_1 = 1\n; \n    k_2 = 1000000000\n: \n    a_2 = 2\n;\n\n",
        "cf_contest_id": 1602,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n7\r\n2 1 1 4 3 1 2\r\n4\r\n3 0\r\n1 1\r\n2 2\r\n6 1\r\n2\r\n1 1\r\n2\r\n1 0\r\n2 1000000000\r\n",
                "1\r\n2\r\n3\r\n3\r\n1\r\n2\r\n"
            ]
        ],
        "private_cases": []
    }
]