[
    {
        "name": "Majority",
        "description": "Everyone was happy coding, until suddenly a power shortage happened and the\nbest competitive programming site went down. Fortunately, a system\nadministrator bought some new equipment recently, including some UPSs. Thus\nthere are some servers that are still online, but we need all of them to be\nworking in order to keep the round rated. Imagine the servers being a binary\nstring \n    s\n of length \n    n\n. If the \n    i\n-th server is online, then\n\n    s_i = 1\n, and \n    s_i = 0\n otherwise. A system administrator can do the\nfollowing operation called electricity spread, that consists of the following\nphases: Select two servers at positions \n    1 \n    \u2264 i < j \n    \u2264 n\n such that\nboth are online (i.e. \n    s_i=s_j=1\n). The spread starts only from online\nservers. Check if we have enough power to make the spread. We consider having\nenough power if the number of turned on servers in range \n    [i, j]\n is at\nleast the number of turned off servers in range \n    [i, j]\n. More formally,\ncheck whether \n    2 \n    \u00b7 (s_i + s_i+1 + \n    \u2026 + s_j) \n    \u2265 j - i +\n    1\n. If the check is positive, turn on all the offline servers in range\n\n    [i, j]\n. More formally, make \n    s_k := 1\n for all \n    k\n from \n    i\n\nto \n    j\n. We call a binary string \n    s\n of length \n    n\n rated if we can\nturn on all servers (i.e. make \n    s_i = 1\n for \n    1 \n    \u2264 i \n    \u2264 n\n)\nusing the electricity spread operation any number of times (possibly,\n\n    0\n). Your task is to find the number of rated strings of length \n    n\n\nmodulo \n    m\n. Input The first and only line contains two integers \n    n\n\nand \n    m\n (\n    1 \n    \u2264 n \n    \u2264 5000\n, \n    10 \n    \u2264 m \n    \u2264 10^9\n) \u2014 the\nlength of the string and the required module. Output Print a single integer \u2014\nthe number of rated binary strings of length \n    n\n. Since this number can be\nlarge, print it modulo \n    m\n. Examples Input 2 100 Output 1 Input 3 10\nOutput 2 Input 4 3271890 Output 4 Input 17 123456 Output 32347 Note In the\nfirst example, the only rated string is 11. So the answer is \n    1\n. In the\nsecond example, the rated strings are: 111; 101, because we can perform an\noperation with \n    i = 1\n and \n    j = 3\n. So the answer is \n    2\n.In the\nthird sample, the rated strings are: 1001; 1111; 1011; 1101. So the answer is\n\n    4\n.\n\n",
        "cf_contest_id": 1750,
        "cf_index": "F",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "dp",
            "math",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "2 100\r\n",
                "1\r\n"
            ],
            [
                "3 10\r\n",
                "2\r\n"
            ],
            [
                "4 3271890\r\n",
                "4\r\n"
            ],
            [
                "17 123456\r\n",
                "32347\r\n"
            ]
        ],
        "private_cases": [
            [
                "500 302\r\n",
                "97\r\n"
            ],
            [
                "2000 52\r\n",
                "10\r\n"
            ],
            [
                "4000 10\r\n",
                "2\r\n"
            ],
            [
                "5000 20\r\n",
                "5\r\n"
            ],
            [
                "1 1000000000\r\n",
                "1\r\n"
            ],
            [
                "5 913141852\r\n",
                "7\r\n"
            ],
            [
                "50 153445697\r\n",
                "69633830\r\n"
            ],
            [
                "500 564638320\r\n",
                "113252099\r\n"
            ],
            [
                "5000 79328209\r\n",
                "6893621\r\n"
            ],
            [
                "100 230559827\r\n",
                "24104579\r\n"
            ],
            [
                "400 259893222\r\n",
                "46787182\r\n"
            ],
            [
                "3053 992452883\r\n",
                "201436840\r\n"
            ],
            [
                "4000 551324644\r\n",
                "91818380\r\n"
            ],
            [
                "4100 561102442\r\n",
                "214640984\r\n"
            ],
            [
                "4500 973328790\r\n",
                "154351147\r\n"
            ],
            [
                "4900 90587838\r\n",
                "34924083\r\n"
            ],
            [
                "4950 34777388\r\n",
                "25002245\r\n"
            ],
            [
                "35 46449121\r\n",
                "42193837\r\n"
            ],
            [
                "59 173698101\r\n",
                "116002958\r\n"
            ]
        ]
    }
]