[
    {
        "name": "Kevin and Permutation",
        "description": "For his birthday, Kevin received the set of pairwise distinct numbers \n    1, 2,\n    3, \n    \u2026, n\n as a gift. He is going to arrange these numbers in a way\nsuch that the minimum absolute difference between two consecutive numbers be\nmaximum possible. More formally, if he arranges numbers in order \n    p_1, p_2,\n    \n    \u2026, p_n\n, he wants to maximize the value \n    \n\n    min\n    _i=1^n - 1\n    | p_i + 1 - p_i \n    |,\n\n    \n where\n\n    |x|\n denotes the absolute value of \n    x\n. Help Kevin to do that. Input\nEach test consists of multiple test cases. The first line contains a single\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test cases.\nDescription of the test cases follows. The only line of each test case\ncontains an integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 1\n     000\n) \u2014 the size of\nthe set. Output For each test case print a single line containing \n    n\n\ndistinct integers \n    p_1, p_2, \n    \u2026, p_n\n (\n    1 \n    \u2264 p_i \n    \u2264 n\n)\ndescribing the arrangement that maximizes the minimum absolute difference of\nconsecutive elements. Formally, you have to print a permutation \n    p\n which\nmaximizes the value \n    min\n    _i=1^n - 1\n    | p_i + 1 - p_i\n    \n    |\n. If there are multiple optimal solutions, print any of them.\nExample Input 2 4 3 Output 2 4 1 3 1 2 3 Note In the first test case the\nminimum absolute difference of consecutive elements equals \n    min\n    \n    \n    | 4 - 2 \n    |, \n    | 1 - 4 \n    |, \n    | 3 - 1 \n    |\n    \n     = \n    min\n    \n    2, 3, 2\n    \n     = 2\n. It's easy to prove that this answer\nis optimal. In the second test case each permutation of numbers \n    1, 2, 3\n\nis an optimal answer. The minimum absolute difference of consecutive elements\nequals to \n    1\n.\n\n",
        "cf_contest_id": 1754,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n4\r\n3\r\n",
                "2 4 1 3\r\n2 3 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2\r\n",
                "1 2\r\n"
            ]
        ]
    }
]