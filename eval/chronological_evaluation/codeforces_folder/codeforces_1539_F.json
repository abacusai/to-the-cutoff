[
    {
        "name": "Strange Array",
        "description": "Vasya has an array of \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n. Vasya\nthinks that all numbers in his array are strange for some reason. To calculate\nhow strange the \n    i\n-th number is, Vasya created the following algorithm.\nHe chooses a subsegment \n    a_l, a_l+1, \n    \u2026, a_r\n, such that \n    1\n    \n    \u2264 l \n    \u2264 i \n    \u2264 r \n    \u2264 n\n, sort its elements in increasing order in\nhis head (he can arrange equal elements arbitrary). After that he finds the\ncenter of the segment. The center of a segment is the element at position\n\n    (l + r) / 2\n, if the length of the segment is odd, and at position \n    (l\n    + r + 1) / 2\n otherwise. Now Vasya finds the element that was at position\n\n    i\n before the sorting, and calculates the distance between its current\nposition and the center of the subsegment (the distance between the elements\nwith indices \n    j\n and \n    k\n is \n    |j - k|\n). The strangeness of the\nnumber at position \n    i\n is the maximum distance among all suitable choices\nof \n    l\n and \n    r\n. Vasya wants to calculate the strangeness of each\nnumber in his array. Help him to do it. Input The first line contains a single\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 200\n     000\n) \u2014 the size of the array.\nThe second line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1\n    \n    \u2264 a_i \n    \u2264 n\n) \u2014 Vasya's array. Output Print a single line with \n    n\n\nnumbers. The \n    i\n-th of them must be equal to the strangeness of the\n\n    i\n-th element of the array. Examples Input 5 5 4 3 2 1 Output 2 1 1 2 2\nInput 7 3 6 5 6 2 1 3 Output 2 3 1 3 2 3 1 Note In the first example: For the\nfirst position we choose the segment from \n    1\n to \n    5\n. After sorting,\nit looks like \n    [1, 2, 3, 4, 5]\n, the center is \n    3\n. The distance from\nthe center to \n    5\n is \n    2\n. For the second position we choose the\nsegment from \n    2\n to \n    4\n. For the third position we choose the segment\nfrom \n    3\n to \n    5\n. For the fourth position we choose the segment from\n\n    1\n to \n    4\n. After sorting, it looks like \n    [2, 3, 4, 5]\n, the\ncenter is \n    4\n. The distance from the center to \n    2\n is \n    2\n. For the\nfifth position we choose the segment from \n    1\n to \n    5\n.\n\n",
        "cf_contest_id": 1539,
        "cf_index": "F",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n5 4 3 2 1\r\n",
                "2 1 1 2 2 "
            ],
            [
                "7\r\n3 6 5 6 2 1 3\r\n",
                "2 3 1 3 2 3 1 "
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n",
                "0 "
            ],
            [
                "50\r\n9 2 36 40 5 48 12 7 18 27 15 24 41 39 35 4 38 44 17 37 46 25 42 23 10 19 22 8 34 20 3 28 1 11 31 14 45 6 30 33 47 21 43 13 32 49 29 26 16 50\r\n",
                "17 24 11 15 21 23 15 19 9 3 12 4 16 14 10 22 13 19 10 12 21 3 17 4 17 8 5 18 9 7 23 4 25 16 6 13 20 20 5 8 22 6 18 14 7 24 4 3 11 24 "
            ],
            [
                "50\r\n47 3 42 46 3 48 11 21 46 37 9 49 46 25 22 10 42 46 21 22 50 10 41 43 41 10 46 41 10 4 19 5 37 46 10 46 48 41 19 32 43 17 19 4 23 10 10 42 47 42\r\n",
                "20 25 10 19 25 22 12 7 19 4 20 23 19 3 5 19 10 19 7 5 24 19 8 12 8 19 19 8 19 23 10 21 4 19 19 19 22 8 10 3 12 11 10 23 3 19 19 10 20 10 "
            ],
            [
                "50\r\n37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37\r\n",
                "25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 "
            ],
            [
                "50\r\n13 34 47 19 15 36 7 21 30 29 44 43 42 14 47 16 8 11 44 19 11 32 50 43 8 24 11 45 21 32 20 19 14 4 27 46 42 20 26 41 41 50 45 16 27 20 12 13 3 5\r\n",
                "16 8 22 10 13 9 23 5 6 5 17 15 13 15 22 12 22 20 17 10 20 8 24 15 22 3 20 19 5 8 7 10 15 24 5 20 13 7 3 11 11 24 19 12 5 7 17 16 25 23 "
            ],
            [
                "50\r\n2 2 1 2 2 2 1 2 2 2 1 1 2 1 2 2 1 2 1 1 1 2 1 1 2 2 1 1 2 1 1 2 1 1 1 1 1 1 1 1 2 2 2 1 1 2 2 2 2 1\r\n",
                "24 24 25 24 24 24 25 24 24 24 25 25 24 25 24 24 25 24 25 25 25 24 25 25 24 24 25 25 24 25 25 24 25 25 25 25 25 25 25 25 24 24 24 25 25 24 24 24 24 25 "
            ],
            [
                "50\r\n1 2 6 4 9 6 3 1 7 10 3 7 2 2 3 1 1 4 9 6 7 9 3 7 5 6 4 9 1 2 9 8 4 9 2 1 7 6 5 1 6 4 3 6 4 7 7 4 9 10\r\n",
                "25 18 9 9 23 9 14 25 15 24 14 15 18 18 14 25 25 9 23 9 15 23 14 15 4 9 9 23 25 18 23 16 9 23 18 25 15 9 4 25 9 9 14 9 9 15 15 9 23 24 "
            ],
            [
                "50\r\n17 19 20 20 34 12 48 36 40 31 50 7 44 31 50 26 2 20 35 36 34 41 31 10 24 11 7 18 1 20 30 36 3 34 48 2 1 3 17 31 20 30 46 13 2 13 13 13 13 13\r\n",
                "10 8 7 7 12 14 22 16 17 9 24 18 19 9 24 5 23 7 13 16 12 18 9 16 6 15 18 9 25 7 8 16 20 12 22 23 25 20 10 9 7 8 20 13 23 13 13 13 13 13 "
            ],
            [
                "50\r\n38 38 38 38 38 4 4 4 4 1 1 2 3 4 5 6 7 8 9 10 11 29 29 29 35 1 2 3 4 5 6 7 8 9 10 11 12 13 14 21 17 5 18 1 49 4 1 1 1 1\r\n",
                "23 23 23 23 23 15 15 15 15 25 25 19 17 15 10 8 6 6 8 9 11 20 20 20 21 25 19 17 15 10 8 6 6 8 9 11 12 13 14 17 15 10 16 25 24 15 25 25 25 25 "
            ],
            [
                "50\r\n2 5 5 1 4 7 1 7 3 5 5 3 10 6 5 9 2 10 4 6 5 8 2 7 1 5 8 7 5 5 9 4 5 1 3 6 4 9 1 4 3 3 3 3 3 3 1 2 9 2\r\n",
                "19 9 9 25 9 16 25 16 15 9 9 15 24 12 9 22 19 24 9 12 9 18 19 16 25 9 18 16 9 9 22 9 9 25 15 12 9 22 25 9 15 15 15 15 15 15 25 19 22 19 "
            ],
            [
                "1\r\n1\r\n",
                "0 "
            ]
        ]
    }
]