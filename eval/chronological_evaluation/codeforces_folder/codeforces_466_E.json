[
    {
        "name": "Information Graph",
        "description": "There are n employees working in company \"X\" (let's number them from 1 to n\nfor convenience). Initially the employees didn't have any relationships among\neach other. On each of m next days one of the following events took place:\neither employee y became the boss of employee x (at that, employee x didn't\nhave a boss before); or employee x gets a packet of documents and signs them;\nthen he gives the packet to his boss. The boss signs the documents and gives\nthem to his boss and so on (the last person to sign the documents sends them\nto the archive); or comes a request of type \"determine whether employee x\nsigns certain documents\". Your task is to write a program that will, given the\nevents, answer the queries of the described type. At that, it is guaranteed\nthat throughout the whole working time the company didn't have cyclic\ndependencies. Input The first line contains two integers n and m (1 \u2264 n, m \u2264\n10^5) \u2014 the number of employees and the number of events. Each of the next m\nlines contains the description of one event (the events are given in the\nchronological order). The first number of the line determines the type of\nevent t (1 \u2264 t \u2264 3). If t = 1, then next follow two integers x and y (1 \u2264 x, y\n\u2264 n) \u2014 numbers of the company employees. It is guaranteed that employee x\ndoesn't have the boss currently. If t = 2, then next follow integer x (1 \u2264 x \u2264\nn) \u2014 the number of the employee who got a document packet. If t = 3, then next\nfollow two integers x and i (1 \u2264 x \u2264 n; 1 \u2264 i \u2264 [number of packets that have\nalready been given]) \u2014 the employee and the number of the document packet for\nwhich you need to find out information. The document packets are numbered\nstarted from 1 in the chronological order. It is guaranteed that the input has\nat least one query of the third type. Output For each query of the third type\nprint \"YES\" if the employee signed the document package and \"NO\" otherwise.\nPrint all the words without the quotes. Examples Input 4 9 1 4 3 2 4 3 3 1 1 2\n3 2 2 3 1 2 1 3 1 2 2 3 1 3 Output YES NO YES\n\n",
        "cf_contest_id": 466,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dsu",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4 9\r\n1 4 3\r\n2 4\r\n3 3 1\r\n1 2 3\r\n2 2\r\n3 1 2\r\n1 3 1\r\n2 2\r\n3 1 3\r\n",
                "YES\r\nNO\r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 2\r\n2 1\r\n3 1 1\r\n",
                "YES\r\n"
            ],
            [
                "2 3\r\n1 2 1\r\n2 1\r\n3 2 1\r\n",
                "NO\r\n"
            ],
            [
                "2 3\r\n1 1 2\r\n2 1\r\n3 2 1\r\n",
                "YES\r\n"
            ],
            [
                "10 10\r\n2 9\r\n1 2 1\r\n1 3 2\r\n3 1 1\r\n3 1 1\r\n2 3\r\n3 1 1\r\n3 1 1\r\n3 1 2\r\n3 1 1\r\n",
                "NO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\n"
            ],
            [
                "10 10\r\n1 1 2\r\n2 1\r\n2 1\r\n2 1\r\n1 2 3\r\n2 1\r\n3 2 4\r\n1 3 4\r\n2 1\r\n2 1\r\n",
                "YES\r\n"
            ],
            [
                "10 10\r\n2 4\r\n3 7 1\r\n3 10 1\r\n3 7 1\r\n1 6 3\r\n3 4 1\r\n2 6\r\n1 7 6\r\n2 7\r\n3 5 2\r\n",
                "NO\r\nNO\r\nNO\r\nYES\r\nNO\r\n"
            ],
            [
                "5 10\r\n2 1\r\n1 4 3\r\n1 5 2\r\n3 4 1\r\n3 4 1\r\n2 3\r\n1 2 1\r\n1 3 1\r\n3 3 2\r\n2 3\r\n",
                "NO\r\nNO\r\nYES\r\n"
            ],
            [
                "10 5\r\n1 5 4\r\n2 5\r\n2 3\r\n3 7 2\r\n1 8 4\r\n",
                "NO\r\n"
            ],
            [
                "8 8\r\n2 4\r\n2 7\r\n2 6\r\n3 1 3\r\n3 8 2\r\n2 4\r\n1 3 1\r\n3 7 2\r\n",
                "NO\r\nNO\r\nYES\r\n"
            ],
            [
                "2 10\r\n2 2\r\n1 2 1\r\n3 1 1\r\n3 1 1\r\n3 1 1\r\n2 2\r\n3 1 2\r\n3 1 1\r\n3 1 1\r\n3 1 2\r\n",
                "NO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\n"
            ],
            [
                "2 10\r\n2 1\r\n1 1 2\r\n3 1 1\r\n2 1\r\n3 1 2\r\n2 1\r\n3 1 2\r\n2 1\r\n2 1\r\n3 1 2\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\n"
            ],
            [
                "5 10\r\n1 2 1\r\n1 3 2\r\n2 3\r\n1 4 3\r\n1 5 4\r\n2 5\r\n3 1 2\r\n2 5\r\n2 5\r\n2 5\r\n",
                "YES\r\n"
            ],
            [
                "5 10\r\n2 1\r\n1 1 2\r\n1 2 3\r\n2 1\r\n3 2 2\r\n3 2 2\r\n2 1\r\n3 2 1\r\n2 1\r\n1 3 4\r\n",
                "YES\r\nYES\r\nNO\r\n"
            ]
        ]
    }
]