[
    {
        "name": "Anna, Svyatoslav and Maps",
        "description": "The main characters have been omitted to be short. You are given a directed\nunweighted graph without loops with \n    n\n vertexes and a path in it (that\npath is not necessary simple) given by a sequence \n    p_1, p_2, \n    \u2026,\n    p_m\n of \n    m\n vertexes; for each \n    1 \n    \u2264 i < m\n there is an arc from\n\n    p_i\n to \n    p_i+1\n. Define the sequence \n    v_1, v_2, \n    \u2026, v_k\n\nof \n    k\n vertexes as good, if \n    v\n is a subsequence of \n    p\n, \n    v_1 =\n    p_1\n, \n    v_k = p_m\n, and \n    p\n is one of the shortest paths passing\nthrough the vertexes \n    v_1\n, \n    \u2026\n, \n    v_k\n in that order. A\nsequence \n    a\n is a subsequence of a sequence \n    b\n if \n    a\n can be\nobtained from \n    b\n by deletion of several (possibly, zero or all) elements.\nIt is obvious that the sequence \n    p\n is good but your task is to find the\nshortest good subsequence. If there are multiple shortest good subsequences,\noutput any of them. Input The first line contains a single integer \n    n\n\n(\n    2 \n    \u2264 n \n    \u2264 100\n) \u2014 the number of vertexes in a graph. The next\n\n    n\n lines define the graph by an adjacency matrix: the \n    j\n-th\ncharacter in the \n    i\n-st line is equal to \n    1\n if there is an arc from\nvertex \n    i\n to the vertex \n    j\n else it is equal to \n    0\n. It is\nguaranteed that the graph doesn't contain loops. The next line contains a\nsingle integer \n    m\n (\n    2 \n    \u2264 m \n    \u2264 10^6\n) \u2014 the number of vertexes\nin the path. The next line contains \n    m\n integers \n    p_1, p_2, \n    \u2026,\n    p_m\n (\n    1 \n    \u2264 p_i \n    \u2264 n\n) \u2014 the sequence of vertexes in the path. It\nis guaranteed that for any \n    1 \n    \u2264 i < m\n there is an arc from \n    p_i\n\nto \n    p_i+1\n. Output In the first line output a single integer \n    k\n\n(\n    2 \n    \u2264 k \n    \u2264 m\n) \u2014 the length of the shortest good subsequence. In\nthe second line output \n    k\n integers \n    v_1\n, \n    \u2026\n, \n    v_k\n\n(\n    1 \n    \u2264 v_i \n    \u2264 n\n) \u2014 the vertexes in the subsequence. If there are\nmultiple shortest subsequences, print any. Any two consecutive numbers should\nbe distinct. Examples Input 4 0110 0010 0001 1000 4 1 2 3 4 Output 3 1 2 4\nInput 4 0110 0010 1001 1000 20 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 Output\n11 1 2 4 2 4 2 4 2 4 2 4 Input 3 011 101 110 7 1 2 3 1 3 2 1 Output 7 1 2 3 1\n3 2 1 Input 4 0110 0001 0001 1000 3 1 2 4 Output 2 1 4 Note Below you can see\nthe graph from the first example: The given path is passing through vertexes\n\n    1\n, \n    2\n, \n    3\n, \n    4\n. The sequence \n    1-2-4\n is good because\nit is the subsequence of the given path, its first and the last elements are\nequal to the first and the last elements of the given path respectively, and\nthe shortest path passing through vertexes \n    1\n, \n    2\n and \n    4\n in\nthat order is \n    1-2-3-4\n. Note that subsequences \n    1-4\n and \n    1-3-4\n\naren't good because in both cases the shortest path passing through the\nvertexes of these sequences is \n    1-3-4\n. In the third example, the graph is\nfull so any sequence of vertexes in which any two consecutive elements are\ndistinct defines a path consisting of the same number of vertexes. In the\nfourth example, the paths \n    1-2-4\n and \n    1-3-4\n are the shortest paths\npassing through the vertexes \n    1\n and \n    4\n.\n\n",
        "cf_contest_id": 1204,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "graphs",
            "greedy",
            "shortest paths"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n0110\r\n0010\r\n0001\r\n1000\r\n4\r\n1 2 3 4\r\n",
                "3\r\n1 2 4 "
            ],
            [
                "4\r\n0110\r\n0010\r\n1001\r\n1000\r\n20\r\n1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4\r\n",
                "11\r\n1 2 4 2 4 2 4 2 4 2 4 "
            ],
            [
                "3\r\n011\r\n101\r\n110\r\n7\r\n1 2 3 1 3 2 1\r\n",
                "7\r\n1 2 3 1 3 2 1 "
            ],
            [
                "4\r\n0110\r\n0001\r\n0001\r\n1000\r\n3\r\n1 2 4\r\n",
                "2\r\n1 4 "
            ]
        ],
        "private_cases": [
            [
                "2\r\n01\r\n00\r\n2\r\n1 2\r\n",
                "2\r\n1 2 "
            ],
            [
                "16\r\n0011101010011011\r\n1001011001110111\r\n1101110110011000\r\n0010010011001011\r\n1011010000010010\r\n0110001000001011\r\n1001110000010011\r\n0111110001001101\r\n0101000100110010\r\n0010000110101011\r\n0111110011010101\r\n1100000101100101\r\n0110101000000101\r\n1111100010000001\r\n1101001010000100\r\n0111111101100010\r\n20\r\n4 16 4 16 11 3 1 5 6 2 7 12 14 16 6 2 7 15 2 7\r\n",
                "14\r\n4 16 4 11 1 6 2 7 14 6 2 7 2 7 "
            ],
            [
                "5\r\n00001\r\n00000\r\n11001\r\n10001\r\n11000\r\n11\r\n3 5 1 5 1 5 1 5 1 5 2\r\n",
                "10\r\n3 5 1 5 1 5 1 5 1 2 "
            ],
            [
                "20\r\n01001100001100011011\r\n00111101001100001101\r\n01010010000010000110\r\n10101001000000000110\r\n00110110111101100000\r\n00111010110011100011\r\n01101000111001110100\r\n11111100011110000100\r\n11111010011110011000\r\n10001100000101100101\r\n11001111010010100011\r\n00001111001001111111\r\n10011110000101001110\r\n10001101010000111010\r\n11010010001101010100\r\n10101110000001001000\r\n11110011110101100000\r\n10110100101110010011\r\n11101010110011110101\r\n10010100000101110010\r\n20\r\n19 10 18 9 2 12 16 17 9 2 5 3 19 18 12 17 7 2 6 5\r\n",
                "14\r\n19 10 9 2 16 9 2 5 19 12 17 7 6 5 "
            ],
            [
                "16\r\n0100001011000101\r\n0001010100010111\r\n1100010111110111\r\n0000010011111101\r\n1001010110011110\r\n0011001110110110\r\n0011110011111010\r\n0010100011100101\r\n1001010101100100\r\n1001110110111111\r\n1000010011001010\r\n1010001011000001\r\n1100011010000111\r\n1111110110110001\r\n0101111100000000\r\n0001100100110100\r\n20\r\n3 16 8 9 11 13 7 3 2 8 3 11 6 7 10 15 5 14 8 3\r\n",
                "14\r\n3 16 9 13 3 2 3 11 7 10 15 14 8 3 "
            ],
            [
                "5\r\n01000\r\n00100\r\n00010\r\n00001\r\n00000\r\n5\r\n1 2 3 4 5\r\n",
                "2\r\n1 5 "
            ],
            [
                "4\r\n0100\r\n0010\r\n0001\r\n0000\r\n4\r\n1 2 3 4\r\n",
                "2\r\n1 4 "
            ],
            [
                "4\r\n0010\r\n0000\r\n0001\r\n0100\r\n4\r\n1 3 4 2\r\n",
                "2\r\n1 2 "
            ],
            [
                "7\r\n0100000\r\n0010000\r\n0001000\r\n0000100\r\n0000010\r\n0000001\r\n0000000\r\n7\r\n1 2 3 4 5 6 7\r\n",
                "2\r\n1 7 "
            ],
            [
                "8\r\n01000000\r\n00100000\r\n00010000\r\n00001000\r\n00000100\r\n00000010\r\n00000001\r\n00000000\r\n8\r\n1 2 3 4 5 6 7 8\r\n",
                "2\r\n1 8 "
            ],
            [
                "9\r\n010000000\r\n001000000\r\n000100000\r\n000010000\r\n000001000\r\n000000100\r\n000000010\r\n000000001\r\n000000000\r\n9\r\n1 2 3 4 5 6 7 8 9\r\n",
                "2\r\n1 9 "
            ],
            [
                "10\r\n0100000000\r\n0010000000\r\n0001000000\r\n0000100000\r\n0000010000\r\n0000001000\r\n0000000100\r\n0000000010\r\n0000000001\r\n0000000000\r\n10\r\n1 2 3 4 5 6 7 8 9 10\r\n",
                "2\r\n1 10 "
            ],
            [
                "6\r\n010000\r\n001000\r\n000100\r\n000010\r\n000001\r\n000000\r\n6\r\n1 2 3 4 5 6\r\n",
                "2\r\n1 6 "
            ],
            [
                "11\r\n01000000000\r\n00100000000\r\n00010000000\r\n00001000000\r\n00000100000\r\n00000010000\r\n00000001000\r\n00000000100\r\n00000000010\r\n00000000001\r\n00000000000\r\n11\r\n1 2 3 4 5 6 7 8 9 10 11\r\n",
                "2\r\n1 11 "
            ],
            [
                "4\r\n0101\r\n0010\r\n0001\r\n0000\r\n4\r\n1 2 3 4\r\n",
                "3\r\n1 3 4 "
            ]
        ]
    }
]