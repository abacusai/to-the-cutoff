[
    {
        "name": "Du\u0161an's Railway",
        "description": "As you may already know, Du\u0161an is keen on playing with railway models. He has\na big map with cities that are connected with railways. His map can be seen as\na graph where vertices are cities and the railways connecting them are the\nedges. So far, the graph corresponding to his map is a tree. As you already\nknow, a tree is a connected acyclic undirected graph. He is curious to find\nout whether his railway can be optimized somehow. He wants to add so-called\nshortcuts, which are also railways connecting pairs of cities. This shortcut\nwill represent the railways in the unique path in the tree between the pair of\ncities it connects. Since Du\u0161an doesn't like repeating the railways, he has\nalso defined good paths in his newly obtained network (notice that after\nadding the shortcuts, his graph is no more a tree). He calls a path good, if\nno edge appears more than once, either as a regular railway edge or as an edge\nrepresented by some shortcut (Every shortcut in a good path has length 1, but\nuses up all the edges it represents - they can't appear again in that path).\nHaving defined good paths, he defines good distance between two cities to be\nthe length of the shortest good path between them. Finally, the shortcutting\ndiameter of his network is the largest good distance between any two cities.\nNow he is curious to find out whether it is possible to achieve shortcutting\ndiameter less or equal than \n    k\n, while adding as few shortcuts as\npossible. Your solution should add no more than \n    10 \n    \u00b7 \ud835\udc27\n\nshortcuts. Input The first line in the standard input contains an integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^4\n), representing the number of the cities in\nDu\u0161an's railway map, and an integer k (\n    3 \n    \u2264 k \n    \u2264 n\n) representing\nthe shortcutting diameter that he wants to achieve. Each of the following \n    n\n    - 1\n lines will contain two integers \n    u_i\n and \n    v_i\n (\n    1 \n    \u2264\n    u_i, v_i \n    \u2264 n, u_i \n    \u2260 v_i\n), meaning that there is a railway between\ncities \n    u_i\n and \n    v_i\n. Output The first line of the output should\ncontain a number \n    t\n representing the number of the shortcuts that were\nadded. Each of the following \n    t\n lines should contain two integers\n\n    u_i\n and \n    v_i\n, signifying that a shortcut is added between cities\n\n    u_i\n and \n    v_i\n. Example Input 10 3 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9\n10 Output 8 3 7 3 5 3 6 3 1 7 9 7 10 7 4 7 5 Note Notice that adding a\nshortcut between all cities and city 1 will make a graph theoretic diameter\nbecome 2. On the other hand, the paths obtained that way might not be good,\nsince some of the edges might get duplicated. In the example, adding a\nshortcut between all cities and city 1 doesn't create a valid solution,\nbecause for cities 5 and 10 the path that uses shortcuts 5-1 and 1-10 is not\nvalid because it uses edges 1-2, 2-3, 3-4, 4-5 twice.\n\n",
        "cf_contest_id": 1423,
        "cf_index": "C",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "divide and conquer",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10 3\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n",
                "17\r\n5 8\r\n2 8\r\n2 5\r\n8 7\r\n8 6\r\n8 9\r\n8 10\r\n5 4\r\n5 3\r\n5 6\r\n5 7\r\n2 1\r\n2 3\r\n2 4\r\n3 4\r\n6 7\r\n9 10\r\n"
            ]
        ],
        "private_cases": [
            [
                "20 3\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 11\r\n11 12\r\n12 13\r\n13 14\r\n14 15\r\n15 16\r\n16 17\r\n17 18\r\n18 19\r\n19 20\r\n",
                "52\r\n13 17\r\n9 17\r\n9 13\r\n5 17\r\n5 13\r\n5 9\r\n1 17\r\n1 13\r\n1 9\r\n1 5\r\n17 16\r\n17 15\r\n17 14\r\n17 18\r\n17 19\r\n17 20\r\n13 12\r\n13 11\r\n13 10\r\n13 14\r\n13 15\r\n13 16\r\n9 8\r\n9 7\r\n9 6\r\n9 10\r\n9 11\r\n9 12\r\n5 4\r\n5 3\r\n5 2\r\n5 6\r\n5 7\r\n5 8\r\n1 2\r\n1 3\r\n1 4\r\n3 4\r\n2 4\r\n2 3\r\n7 8\r\n6 8\r\n6 7\r\n11 12\r\n10 12\r\n10 11\r\n15 16\r\n14 16\r\n14 15\r\n19 20\r\n18 20\r\n18 19\r\n"
            ]
        ]
    }
]