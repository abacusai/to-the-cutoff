[
    {
        "name": "Find Pair",
        "description": "You've got another problem dealing with arrays. Let's consider an arbitrary\nsequence containing n (not necessarily different) integers a1, a2, ..., an. We\nare interested in all possible pairs of numbers (ai, aj), (1 \u2264 i, j \u2264 n). In\nother words, let's consider all n^2 pairs of numbers, picked from the given\narray. For example, in sequence a = 3, 1, 5 are 9 pairs of numbers: (3, 3),\n(3, 1), (3, 5), (1, 3), (1, 1), (1, 5), (5, 3), (5, 1), (5, 5). Let's sort all\nresulting pairs lexicographically by non-decreasing. Let us remind you that\npair (p1, q1) is lexicographically less than pair (p2, q2) only if either p1 <\np2, or p1 = p2 and q1 < q2. Then the sequence, mentioned above, will be sorted\nlike that: (1, 1), (1, 3), (1, 5), (3, 1), (3, 3), (3, 5), (5, 1), (5, 3), (5,\n5) Let's number all the pair in the sorted list from 1 to n^2. Your task is\nformulated like this: you should find the k-th pair in the ordered list of all\npossible pairs of the array you've been given. Input The first line contains\ntwo integers n and k (1 \u2264 n \u2264 10^5, 1 \u2264 k \u2264 n^2). The second line contains the\narray containing n integers a1, a2, ..., an ( - 10^9 \u2264 ai \u2264 10^9). The numbers\nin the array can coincide. All numbers are separated with spaces. Please do\nnot use the \npreferred to use cin, cout, streams or the \nIn the single line print two numbers \u2014 the sought k-th pair. Examples Input 2\n4 2 1 Output 2 2 Input 3 2 3 1 5 Output 1 3 Note In the first sample the\nsorted sequence for the given array looks as: (1, 1), (1, 2), (2, 1), (2, 2).\nThe 4-th of them is pair (2, 2). The sorted sequence for the array from the\nsecond sample is given in the statement. The 2-nd pair there is (1, 3).\n\n",
        "cf_contest_id": 160,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 4\r\n2 1\r\n",
                "2 2\r\n"
            ],
            [
                "3 2\r\n3 1 5\r\n",
                "1 3\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 3\r\n1 1 2\r\n",
                "1 1\r\n"
            ],
            [
                "1 1\r\n-4\r\n",
                "-4 -4\r\n"
            ],
            [
                "3 7\r\n5 4 3\r\n",
                "5 3\r\n"
            ],
            [
                "3 6\r\n10 1 3\r\n",
                "3 10\r\n"
            ],
            [
                "4 12\r\n-1 -2 -3 -4\r\n",
                "-2 -1\r\n"
            ],
            [
                "5 10\r\n1 2 2 1 3\r\n",
                "1 3\r\n"
            ],
            [
                "5 13\r\n3 3 3 4 5\r\n",
                "3 5\r\n"
            ],
            [
                "8 26\r\n4 4 1 1 1 3 3 5\r\n",
                "3 1\r\n"
            ],
            [
                "10 90\r\n2 1 1 1 1 1 2 1 2 2\r\n",
                "2 2\r\n"
            ],
            [
                "10 6\r\n3 1 1 3 2 2 2 3 3 3\r\n",
                "1 2\r\n"
            ],
            [
                "10 18\r\n1 1 1 3 4 4 4 1 2 3\r\n",
                "1 2\r\n"
            ],
            [
                "50 622\r\n4 9 8 1 3 7 1 2 3 8 9 8 8 5 2 10 5 8 1 3 1 8 2 3 7 9 10 2 9 9 7 3 8 6 10 6 5 4 8 1 1 5 6 8 9 5 9 5 3 2\r\n",
                "3 3\r\n"
            ],
            [
                "50 2069\r\n9 97 15 22 69 27 7 23 84 73 74 60 94 43 98 13 4 63 49 7 31 93 23 6 75 32 63 49 32 99 43 68 48 16 54 20 38 40 65 34 28 21 55 79 50 2 18 22 95 25\r\n",
                "75 28\r\n"
            ],
            [
                "100 9043\r\n4 1 4 2 1 4 2 2 1 1 4 2 4 2 4 1 4 2 2 1 2 2 2 2 1 1 2 3 2 1 1 3 2 3 1 4 2 2 2 4 1 4 3 3 4 3 4 1 1 4 2 2 4 4 4 4 4 1 1 2 3 1 3 4 1 3 1 4 1 3 2 2 3 2 3 1 2 3 4 3 3 2 3 4 4 4 2 3 2 1 1 2 2 4 1 2 3 2 2 1\r\n",
                "4 3\r\n"
            ],
            [
                "100 4755\r\n5 4 3 5 1 2 5 1 1 3 5 4 4 1 1 1 1 5 4 4 5 1 5 5 1 2 1 3 1 5 1 3 3 3 2 2 2 1 1 5 1 3 4 1 1 3 2 5 2 2 5 5 4 4 1 3 4 3 3 4 5 3 3 3 1 2 1 4 2 4 4 1 5 1 3 5 5 5 5 3 4 4 3 1 2 5 2 3 5 4 2 4 5 3 2 4 2 4 3 1\r\n",
                "3 3\r\n"
            ],
            [
                "100 6819\r\n4 3 4 6 2 5 2 2 5 6 6 6 1 3 1 3 2 2 2 3 4 5 2 1 6 4 5 3 2 3 4 4 4 3 5 6 3 2 4 5 2 3 2 1 1 6 4 1 5 6 4 3 4 2 4 1 3 2 3 1 2 2 5 1 3 2 5 1 3 2 4 5 1 3 5 5 5 2 6 6 6 3 1 5 4 6 3 3 4 3 1 4 1 1 1 1 2 4 2 6\r\n",
                "4 4\r\n"
            ],
            [
                "10 50\r\n1 1 -9 -9 -9 7 7 7 7 7\r\n",
                "1 7\r\n"
            ],
            [
                "9 76\r\n1 1 2 2 2 2 3 3 9\r\n",
                "9 2\r\n"
            ],
            [
                "5 15\r\n1 1 1 2 2\r\n",
                "1 2\r\n"
            ],
            [
                "5 7\r\n1 3 3 3 5\r\n",
                "3 1\r\n"
            ],
            [
                "10 91\r\n1 1 1 1 1 1 1 1 1 2\r\n",
                "2 1\r\n"
            ],
            [
                "5 20\r\n1 2 2 3 3\r\n",
                "3 2\r\n"
            ],
            [
                "6 36\r\n1 1 2 2 2 2\r\n",
                "2 2\r\n"
            ],
            [
                "5 16\r\n1 1 2 2 3\r\n",
                "2 2\r\n"
            ],
            [
                "5 17\r\n1 3 3 5 5\r\n",
                "5 1\r\n"
            ],
            [
                "5 17\r\n1 3 3 3 5\r\n",
                "3 3\r\n"
            ],
            [
                "10 25\r\n1 2 2 3 4 5 6 7 8 9\r\n",
                "2 7\r\n"
            ],
            [
                "10 90\r\n1 1 1 1 1 1 1 1 1 2\r\n",
                "1 2\r\n"
            ],
            [
                "4 5\r\n3 1 3 1\r\n",
                "1 3\r\n"
            ],
            [
                "3 5\r\n1 1 2\r\n",
                "1 2\r\n"
            ],
            [
                "5 3\r\n0 1 2 3 4\r\n",
                "0 2\r\n"
            ]
        ]
    }
]