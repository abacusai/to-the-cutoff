[
    {
        "name": "Red Blue Tree",
        "description": "You are given a tree of \n    n\n nodes. The tree is rooted at node \n    1\n,\nwhich is not considered as a leaf regardless of its degree. Each leaf of the\ntree has one of the two colors: red or blue. Leaf node \n    v\n initially has\ncolor \n    s_v\n. The color of each of the internal nodes (including the\nroot) is determined as follows. Let \n    b\n be the number of blue immediate\nchildren, and \n    r\n be the number of red immediate children of a given\nvertex. Then the color of this vertex is blue if and only if \n    b - r \n    \u2265\n    k\n, otherwise red. Integer \n    k\n is a parameter that is same for all the\nnodes. You need to handle the following types of queries: 1 v: print the color\nof node \n    v\n; 2 v c: change the color of leaf \n    v\n to \n    c\n (\n    c =\n    0\n means red, \n    c = 1\n means blue); 3 h: update the current value of\n\n    k\n to \n    h\n. Input The first line of the input consists of two integers\n\n    n\n and \n    k\n (\n    2 \n    \u2264 n \n    \u2264 10^5\n, \n    -n \n    \u2264 k \n    \u2264 n\n) \u2014\nthe number of nodes and the initial parameter \n    k\n. Each of the next \n    n -\n    1\n lines contains two integers \n    u\n and \n    v\n (\n    1 \n    \u2264 u,v \n    \u2264\n    n\n), denoting that there is an edge between vertices \n    u\n and \n    v\n.\nThe next line consists of \n    n\n space separated integers \u2014 the initial array\n\n    s\n (\n    -1 \n    \u2264 s_i \n    \u2264 1\n). \n    s_i = 0\n means that the color of\nnode \n    i\n is red. \n    s_i = 1\n means that the color of node \n    i\n is\nblue. \n    s_i = -1\n means that the node \n    i\n is not a leaf. The next\nline contains an integer \n    q\n (\n    1 \n    \u2264 q \n    \u2264 10^5\n), the number of\nqueries. \n    q\n lines follow, each containing a query in one of the following\nqueries: 1 v (\n    1 \n    \u2264 v \n    \u2264 n\n): print the color of node \n    v\n; 2 v c\n(\n    1 \n    \u2264 v \n    \u2264 n\n, \n    c = 0\n or \n    c = 1\n): change the color of\nleaf \n    v\n to \n    c\n (\n    c = 0\n means red, \n    c = 1\n means blue). It is\nguaranteed that \n    v\n is a leaf; 3 h (\n    -n \n    \u2264 h \n    \u2264 n\n): update the\ncurrent value of \n    k\n to \n    h\n. Output For each query of the first type,\nprint \n    0\n if the color of vertex \n    v\n is red, and \n    1\n otherwise.\nExample Input 5 2 1 2 1 3 2 4 2 5 -1 -1 0 1 0 9 1 1 1 2 3 -2 1 1 1 2 3 1 2 5 1\n1 1 1 2 Output 0 0 1 1 0 1 Note Figures:(i) The initial tree (ii) The tree\nafter the 3rd query (iii) The tree after the 7th query\n\n",
        "cf_contest_id": 1208,
        "cf_index": "H",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 2\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n-1 -1 0 1 0\r\n9\r\n1 1\r\n1 2\r\n3 -2\r\n1 1\r\n1 2\r\n3 1\r\n2 5 1\r\n1 1\r\n1 2\r\n",
                "0\r\n0\r\n1\r\n1\r\n0\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "6 1\r\n6 5\r\n3 2\r\n6 3\r\n4 2\r\n1 3\r\n-1 -1 -1 1 0 -1\r\n2\r\n2 4 0\r\n1 2\r\n",
                "0\r\n"
            ],
            [
                "8 8\r\n1 6\r\n1 7\r\n8 4\r\n5 3\r\n1 5\r\n4 2\r\n4 5\r\n-1 0 0 -1 -1 0 1 1\r\n3\r\n1 1\r\n1 6\r\n1 7\r\n",
                "0\r\n0\r\n1\r\n"
            ],
            [
                "10 -9\r\n2 7\r\n6 10\r\n8 5\r\n1 5\r\n2 10\r\n4 1\r\n9 8\r\n1 2\r\n6 3\r\n-1 -1 0 1 -1 -1 0 -1 0 -1\r\n3\r\n3 -8\r\n1 2\r\n1 4\r\n",
                "1\r\n1\r\n"
            ],
            [
                "2 -2\r\n2 1\r\n-1 0\r\n2\r\n3 0\r\n2 2 1\r\n",
                ""
            ]
        ]
    }
]