[
    {
        "name": "Chocolate Bunny",
        "description": "This is an interactive problem. We hid from you a permutation \n    p\n of\nlength \n    n\n, consisting of the elements from \n    1\n to \n    n\n. You want\nto guess it. To do that, you can give us 2 different indices \n    i\n and\n\n    j\n, and we will reply with \n    p_i\n     p_j\n (remainder of\ndivision \n    p_i\n by \n    p_j\n). We have enough patience to answer at\nmost \n    2 \n    \u00b7 n\n queries, so you should fit in this constraint. Can you\ndo it? As a reminder, a permutation of length \n    n\n is an array consisting\nof \n    n\n distinct integers from \n    1\n to \n    n\n in arbitrary order. For\nexample, \n    [2,3,1,5,4]\n is a permutation, but \n    [1,2,2]\n is not a\npermutation (\n    2\n appears twice in the array) and \n    [1,3,4]\n is also not\na permutation (\n    n=3\n but there is \n    4\n in the array). Input The only\nline of the input contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    10^4\n) \u2014 length of the permutation. Interaction The interaction starts with\nreading \n    n\n. Then you are allowed to make at most \n    2 \n    \u00b7 n\n\nqueries in the following way: \"? x y\" (\n    1 \n    \u2264 x, y \n    \u2264 n, x \n     y\n).\nAfter each one, you should read an integer \n    k\n, that equals \n    p_x \n    \n    p_y\n. When you have guessed the permutation, print a single line \"! \"\n(without quotes), followed by array \n    p\n and quit. After printing a query\ndo not forget to output end of line and flush the output. Otherwise, you will\nget Idleness limit exceeded. To do this, use: fflush(stdout) or cout.flush()\nin C++; System.out.flush() in Java; flush(output) in Pascal; stdout.flush() in\nPython; see documentation for other languages.Exit immediately after receiving\n\"-1\" and you will see Wrong answer verdict. Otherwise you can get an arbitrary\nverdict because your solution will continue to read from a closed stream. Hack\nformat In the first line output \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^4\n). In the\nsecond line print the permutation of \n    n\n integers \n    p_1, p_2, \n    \u2026,\n    p_n\n. Example Input 3 1 2 1 0 Output ? 1 2 ? 3 2 ? 1 3 ? 2 1 ! 1 3 2\n\n",
        "cf_contest_id": 1407,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "interactive",
            "math",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 3 2\r\n",
                "1 3 2 "
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n",
                "1 "
            ],
            [
                "2\r\n2 1\r\n",
                "2 1 "
            ],
            [
                "5\r\n5 4 3 2 1\r\n",
                "5 4 3 2 1 "
            ],
            [
                "4\r\n3 4 1 2\r\n",
                "3 4 1 2 "
            ],
            [
                "4\r\n1 4 2 3\r\n",
                "1 4 2 3 "
            ],
            [
                "100\r\n98 52 63 2 18 96 31 58 84 40 41 45 66 100 46 71 26 48 81 20 73 91 68 76 13 93 17 29 64 95 79 21 55 75 19 85 54 51 89 78 15 87 43 59 36 1 90 35 65 56 62 28 86 5 82 49 3 99 33 9 92 32 74 69 27 22 77 16 44 94 34 6 57 70 23 12 61 25 8 11 67 47 83 88 10 14 30 7 97 60 42 37 24 38 53 50 4 80 72 39\r\n",
                "98 52 63 2 18 96 31 58 84 40 41 45 66 100 46 71 26 48 81 20 73 91 68 76 13 93 17 29 64 95 79 21 55 75 19 85 54 51 89 78 15 87 43 59 36 1 90 35 65 56 62 28 86 5 82 49 3 99 33 9 92 32 74 69 27 22 77 16 44 94 34 6 57 70 23 12 61 25 8 11 67 47 83 88 10 14 30 7 97 60 42 37 24 38 53 50 4 80 72 39 "
            ],
            [
                "10\r\n5 1 6 2 8 3 4 10 9 7\r\n",
                "5 1 6 2 8 3 4 10 9 7 "
            ],
            [
                "10\r\n5 9 6 10 2 4 1 7 3 8\r\n",
                "5 9 6 10 2 4 1 7 3 8 "
            ],
            [
                "5\r\n1 4 2 3 5\r\n",
                "1 4 2 3 5 "
            ],
            [
                "7\r\n6 1 2 3 4 5 7\r\n",
                "6 1 2 3 4 5 7 "
            ],
            [
                "8\r\n4 8 2 6 3 1 5 7\r\n",
                "4 8 2 6 3 1 5 7 "
            ],
            [
                "10\r\n10 1 2 3 4 5 9 8 7 6\r\n",
                "10 1 2 3 4 5 9 8 7 6 "
            ],
            [
                "2\r\n1 2\r\n",
                "1 2 "
            ]
        ]
    }
]