[
    {
        "name": "Hexadecimal's Numbers",
        "description": "One beautiful July morning a terrible thing happened in Mainframe: a mean\nvirus Megabyte somehow got access to the memory of his not less mean sister\nHexadecimal. He loaded there a huge amount of n different natural numbers from\n1 to n to obtain total control over her energy. But his plan failed. The\nreason for this was very simple: Hexadecimal didn't perceive any information,\napart from numbers written in binary format. This means that if a number in a\ndecimal representation contained characters apart from 0 and 1, it was not\nstored in the memory. Now Megabyte wants to know, how many numbers were loaded\nsuccessfully. Input Input data contains the only number n (1 \u2264 n \u2264 10^9).\nOutput Output the only number \u2014 answer to the problem. Examples Input 10\nOutput 2 Note For n = 10 the answer includes numbers 1 and 10.\n\n",
        "cf_contest_id": 9,
        "cf_index": "C",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 64.0,
        "public_cases": [
            [
                "10\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "20\r\n",
                "3\r\n"
            ],
            [
                "72\r\n",
                "3\r\n"
            ],
            [
                "99\r\n",
                "3\r\n"
            ],
            [
                "100\r\n",
                "4\r\n"
            ],
            [
                "101\r\n",
                "5\r\n"
            ],
            [
                "102\r\n",
                "5\r\n"
            ],
            [
                "111\r\n",
                "7\r\n"
            ],
            [
                "112\r\n",
                "7\r\n"
            ],
            [
                "745\r\n",
                "7\r\n"
            ],
            [
                "23536\r\n",
                "31\r\n"
            ],
            [
                "1\r\n",
                "1\r\n"
            ],
            [
                "1010011\r\n",
                "83\r\n"
            ],
            [
                "312410141\r\n",
                "511\r\n"
            ],
            [
                "1000000000\r\n",
                "512\r\n"
            ],
            [
                "999999999\r\n",
                "511\r\n"
            ],
            [
                "111111111\r\n",
                "511\r\n"
            ],
            [
                "101010101\r\n",
                "341\r\n"
            ],
            [
                "121212121\r\n",
                "511\r\n"
            ],
            [
                "106341103\r\n",
                "383\r\n"
            ],
            [
                "901556123\r\n",
                "511\r\n"
            ],
            [
                "832513432\r\n",
                "511\r\n"
            ],
            [
                "3\r\n",
                "1\r\n"
            ],
            [
                "732875234\r\n",
                "511\r\n"
            ],
            [
                "7\r\n",
                "1\r\n"
            ],
            [
                "9\r\n",
                "1\r\n"
            ],
            [
                "2\r\n",
                "1\r\n"
            ],
            [
                "11\r\n",
                "3\r\n"
            ],
            [
                "12\r\n",
                "3\r\n"
            ],
            [
                "13\r\n",
                "3\r\n"
            ],
            [
                "101020101\r\n",
                "351\r\n"
            ],
            [
                "111100100\r\n",
                "484\r\n"
            ],
            [
                "110110101\r\n",
                "437\r\n"
            ],
            [
                "100111001\r\n",
                "313\r\n"
            ],
            [
                "100100\r\n",
                "36\r\n"
            ],
            [
                "110100102\r\n",
                "421\r\n"
            ]
        ]
    }
]