[
    {
        "name": "Holy Diver ",
        "description": "You are given an array which is initially empty. You need to perform \n    n\n\noperations of the given format: \"\n    a\n \n    l\n \n    r\n \n    k\n\": append\n\n    a\n to the end of the array. After that count the number of integer pairs\n\n    x, y\n such that \n    l \n    \u2264 x \n    \u2264 y \n    \u2264 r\n and\n\n    mex(a_x, a_x+1, \n    \u2026, a_y) = k\n. The elements\nof the array are numerated from \n    1\n in the order they are added to the\narray. To make this problem more tricky we don't say your real parameters of\nthe queries. Instead your are given \n    a'\n, \n    l'\n, \n    r'\n, \n    k'\n. To\nget \n    a\n, \n    l\n, \n    r\n, \n    k\n on the \n    i\n-th operation you need to\nperform the following: \n    a := (a' + lans) \n    (n + 1)\n, \n    l := (l' +\n    lans) \n    i + 1\n, \n    r := (r' + lans) \n    i + 1\n, if \n    l > r\n\nswap \n    l\n and \n    r\n, \n    k := (k' + lans) \n    (n + 1)\n, where\n\n    lans\n is the answer to the previous operation, initially \n    lans\n is\nequal to zero. \n    i\n is the id of the operation, operations are numbered\nfrom \n    1\n.The \n    mex(S)\n, where \n    S\n is a multiset of\nnon-negative integers, is the smallest non-negative integer which does not\nappear in the set. For example, \n    mex(\n    \n    2, 2, 3\n    \n    ) =\n    0\n and \n    mex (\n    \n    0, 1, 4, 1, 6\n    \n    ) = 2\n. Input The\nfirst line contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7\n    10^5\n) \u2014 the length of the array. The next \n    n\n lines contain the\ndescription of queries. Each of them \n    n\n lines contains four non-negative\nintegers \n    a'\n, \n    l'\n, \n    r'\n, \n    k'\n (\n    0, \n    \u2264 a', l', r', k'\n    \n    \u2264 10^9\n), describing one operation. Output For each query print a\nsingle integer \u2014 the answer to this query. Examples Input 5 0 0 0 1 0 1 0 5 5\n2 1 0 5 2 1 0 2 4 3 3 Output 1 1 2 6 3 Input 5 2 0 0 2 2 0 1 1 0 0 2 0 3 2 2 0\n0 2 3 0 Output 0 0 3 0 0 Note For the first example the decoded values of\n\n    a\n, \n    l\n, \n    r\n, \n    k\n are the following:\n\n    a_1=0,l_1=1,r_1=1,k_1=1\n \n    a_2=1,l_2=1,r_2=2,k_2=0\n\n\n    a_3=0,l_3=1,r_3=3,k_3=1\n \n    a_4=1,l_4=1,r_4=4,k_4=2\n\n\n    a_5=2,l_5=1,r_5=5,k_5=3\n For the second example the decoded values of\n\n    a\n, \n    l\n, \n    r\n, \n    k\n are the following:\n\n    a_1=2,l_1=1,r_1=1,k_1=2\n \n    a_2=2,l_2=1,r_2=2,k_2=1\n\n\n    a_3=0,l_3=1,r_3=3,k_3=0\n \n    a_4=0,l_4=2,r_4=2,k_4=3\n\n\n    a_5=0,l_5=3,r_5=4,k_5=0\n\n\n",
        "cf_contest_id": 1148,
        "cf_index": "H",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "5\r\n0 0 0 1\r\n0 1 0 5\r\n5 2 1 0\r\n5 2 1 0\r\n2 4 3 3\r\n",
                "1\r\n1\r\n2\r\n6\r\n3\r\n"
            ],
            [
                "5\r\n2 0 0 2\r\n2 0 1 1\r\n0 0 2 0\r\n3 2 2 0\r\n0 2 3 0\r\n",
                "0\r\n0\r\n3\r\n0\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n0 0 0 0\r\n",
                "0\r\n"
            ],
            [
                "2\r\n1 0 0 0\r\n0 0 0 0\r\n",
                "1\r\n0\r\n"
            ],
            [
                "10\r\n7 7 0 3\r\n0 1 6 0\r\n7 3 2 1\r\n8 2 6 6\r\n7 6 5 0\r\n10 1 2 2\r\n4 7 3 5\r\n1 3 6 7\r\n7 4 3 5\r\n5 9 4 0\r\n",
                "0\r\n1\r\n0\r\n0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n11\r\n"
            ],
            [
                "20\r\n5 3 0 18\r\n13 13 13 8\r\n2 19 15 14\r\n20 17 17 7\r\n1 19 0 5\r\n4 11 18 16\r\n13 13 4 0\r\n10 5 19 1\r\n4 13 6 6\r\n11 16 6 11\r\n15 8 5 2\r\n6 12 12 18\r\n0 7 5 10\r\n17 19 6 9\r\n5 15 12 16\r\n2 6 4 16\r\n14 18 9 0\r\n7 18 1 20\r\n5 3 0 16\r\n20 3 12 13\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n6\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n45\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "20\r\n4 0 0 5\r\n2 0 1 0\r\n20 0 0 1\r\n1 1 2 3\r\n4 1 4 2\r\n4 3 5 0\r\n17 1 5 15\r\n8 5 0 9\r\n4 4 8 4\r\n0 5 7 1\r\n1 4 7 5\r\n4 2 9 2\r\n0 4 5 3\r\n2 1 5 0\r\n8 5 7 7\r\n3 1 7 2\r\n1 8 11 3\r\n4 3 8 0\r\n4 3 12 3\r\n4 17 17 3\r\n",
                "0\r\n3\r\n0\r\n0\r\n0\r\n6\r\n15\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n15\r\n0\r\n0\r\n0\r\n21\r\n21\r\n0\r\n"
            ],
            [
                "30\r\n15 23 22 23\r\n23 16 21 9\r\n17 27 16 2\r\n6 22 9 13\r\n5 21 23 18\r\n28 16 0 16\r\n30 19 2 29\r\n28 14 11 11\r\n6 27 29 8\r\n15 25 21 29\r\n8 0 0 14\r\n17 3 21 24\r\n16 0 24 4\r\n24 15 28 21\r\n24 4 3 0\r\n21 13 7 26\r\n6 22 3 4\r\n6 25 22 11\r\n6 27 6 30\r\n26 11 26 8\r\n21 27 14 25\r\n2 27 18 22\r\n0 3 22 24\r\n8 3 4 13\r\n23 16 17 9\r\n13 4 9 21\r\n3 10 15 11\r\n13 21 7 16\r\n23 14 11 6\r\n28 18 19 29\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n3\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "40\r\n31 18 20 25\r\n8 15 22 22\r\n29 28 9 3\r\n35 15 21 13\r\n0 35 19 37\r\n19 20 18 20\r\n6 4 5 37\r\n37 10 34 27\r\n26 30 37 19\r\n23 22 27 14\r\n9 37 32 1\r\n31 14 9 17\r\n30 21 2 23\r\n0 14 18 39\r\n31 12 2 18\r\n8 36 34 0\r\n38 31 20 24\r\n21 20 39 9\r\n19 11 37 32\r\n19 3 5 1\r\n5 13 18 35\r\n26 14 34 21\r\n39 1 15 38\r\n2 11 26 38\r\n1 13 11 16\r\n32 22 18 7\r\n38 6 10 15\r\n6 4 24 32\r\n16 25 24 27\r\n16 19 16 19\r\n30 35 4 36\r\n12 7 24 14\r\n34 17 1 39\r\n8 38 37 29\r\n9 39 29 32\r\n2 3 26 20\r\n40 20 14 0\r\n38 37 22 1\r\n19 27 7 0\r\n7 25 30 6\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n7\r\n0\r\n0\r\n0\r\n0\r\n3\r\n0\r\n0\r\n0\r\n4\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n13\r\n0\r\n90\r\n0\r\n"
            ]
        ]
    }
]