[
    {
        "name": "Cirno's Perfect Bitmasks Classroom",
        "description": "Even if it's a really easy question, she won't be able to answer it \u2014 Perfect\nMemento in Strict Sense Cirno's perfect bitmasks classroom has just started!\nCirno gave her students a positive integer \n    x\n. As an assignment, her\nstudents need to find the minimum positive integer \n    y\n, which satisfies\nthe following two conditions: \n    \n\n    x\n     \n    \n     y > 0\n\n    \n\n\n    \n\n    x\n     \n    \n     y > 0\n\n    \n Where \n    \n is the\nbitwise AND operation, and \n    \n is the bitwise XOR operation.\nAmong the students was Mystia, who was truly baffled by all these new\noperators. Please help her! Input The first line of input contains a single\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^3\n) \u2014 the number of input test\ncases. For each test case, the only line of input contains one integer \n    x\n\n(\n    1 \n    \u2264 x \n    \u2264 2^30\n). Output For each test case, print a single\ninteger \u2014 the minimum number of \n    y\n. Example Input 7 1 2 5 9 16 114514\n1000000 Output 3 3 1 1 17 2 64 Note Test case 1: \n    1\n     \n    \n     \n    3=1>0\n, \n    1\n     \n    \n      3=2>0\n. Test case 2: \n    2\n     \n    \n      3=2>0\n, \n    2\n     \n    \n      3=1>0\n.\n\n",
        "cf_contest_id": 1688,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n1\r\n2\r\n5\r\n9\r\n16\r\n114514\r\n1000000\r\n",
                "3\r\n3\r\n1\r\n1\r\n17\r\n2\r\n64\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1073741824\r\n",
                "1073741825\r\n"
            ],
            [
                "10\r\n1073741824\r\n1073741824\r\n1073741824\r\n1073741824\r\n1073741824\r\n1073741824\r\n1073741824\r\n1073741824\r\n1073741824\r\n1073741824\r\n",
                "1073741825\r\n1073741825\r\n1073741825\r\n1073741825\r\n1073741825\r\n1073741825\r\n1073741825\r\n1073741825\r\n1073741825\r\n1073741825\r\n"
            ],
            [
                "10\r\n536870912\r\n536870912\r\n536870912\r\n536870912\r\n536870912\r\n536870912\r\n536870912\r\n536870912\r\n536870912\r\n536870912\r\n",
                "536870913\r\n536870913\r\n536870913\r\n536870913\r\n536870913\r\n536870913\r\n536870913\r\n536870913\r\n536870913\r\n536870913\r\n"
            ],
            [
                "20\r\n1073741824\r\n1073741824\r\n1073741824\r\n1073741824\r\n1073741824\r\n1073741824\r\n1073741824\r\n1073741824\r\n1073741824\r\n1073741824\r\n1073741824\r\n1073741824\r\n1073741824\r\n1073741824\r\n1073741824\r\n1073741824\r\n1073741824\r\n1073741824\r\n1073741824\r\n1073741824\r\n",
                "1073741825\r\n1073741825\r\n1073741825\r\n1073741825\r\n1073741825\r\n1073741825\r\n1073741825\r\n1073741825\r\n1073741825\r\n1073741825\r\n1073741825\r\n1073741825\r\n1073741825\r\n1073741825\r\n1073741825\r\n1073741825\r\n1073741825\r\n1073741825\r\n1073741825\r\n1073741825\r\n"
            ]
        ]
    }
]