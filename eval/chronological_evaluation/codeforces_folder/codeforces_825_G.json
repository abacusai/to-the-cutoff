[
    {
        "name": "Tree Queries",
        "description": "You are given a tree consisting of n vertices (numbered from 1 to n).\nInitially all vertices are white. You have to process q queries of two\ndifferent types: 1 x \u2014 change the color of vertex x to black. It is guaranteed\nthat the first query will be of this type. 2 x \u2014 for the vertex x, find the\nminimum index y such that the vertex with index y belongs to the simple path\nfrom x to some black vertex (a simple path never visits any vertex more than\nonce). For each query of type 2 print the answer to it. Note that the queries\nare given in modified way. Input The first line contains two numbers n and q\n(3 \u2264 n, q \u2264 10^6). Then n - 1 lines follow, each line containing two numbers\nxi and yi (1 \u2264 xi < yi \u2264 n) and representing the edge between vertices xi and\nyi. It is guaranteed that these edges form a tree. Then q lines follow. Each\nline contains two integers ti and zi, where ti is the type of ith query, and\nzi can be used to restore xi for this query in this way: you have to keep\ntrack of the answer to the last query of type 2 (let's call this answer last,\nand initially last = 0); then xi = (zi + last) mod n + 1. It is guaranteed\nthat the first query is of type 1, and there is at least one query of type 2.\nOutput For each query of type 2 output the answer to it. Example Input 4 6 1 2\n2 3 3 4 1 2 1 2 2 2 1 3 2 2 2 2 Output 3 2 1\n\n",
        "cf_contest_id": 825,
        "cf_index": "G",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 6\r\n1 2\r\n2 3\r\n3 4\r\n1 2\r\n1 2\r\n2 2\r\n1 3\r\n2 2\r\n2 2\r\n",
                "3\r\n2\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 10\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n1 3\r\n2 10\r\n1 8\r\n1 7\r\n1 6\r\n1 4\r\n2 9\r\n2 7\r\n1 5\r\n1 5\r\n",
                "1\r\n1\r\n4\r\n"
            ],
            [
                "10 10\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n1 10\r\n1 4\r\n1 1\r\n2 7\r\n2 4\r\n1 2\r\n2 6\r\n2 4\r\n2 3\r\n1 3\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "10 10\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n1 9\r\n1 6\r\n2 10\r\n2 5\r\n1 5\r\n1 9\r\n1 5\r\n2 10\r\n1 8\r\n2 7\r\n",
                "1\r\n7\r\n3\r\n1\r\n"
            ],
            [
                "5 4\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n1 3\r\n2 2\r\n2 2\r\n1 4\r\n",
                "3\r\n1\r\n"
            ],
            [
                "10 10\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n1 9\r\n1 10\r\n1 3\r\n2 10\r\n1 5\r\n2 10\r\n1 2\r\n2 3\r\n1 8\r\n1 4\r\n1 1\r\n1 1\r\n",
                "1\r\n1\r\n1\r\n"
            ]
        ]
    }
]