[
    {
        "name": "M-tree",
        "description": "A rooted tree is called good if every vertex of the tree either is a leaf (a\nvertex with no children) or has exactly \n    m\n children. For a good tree,\neach leaf \n    u\n has a positive integer \n    c_u\n written on it, and we\ndefine the value of the leaf as \n    c_u + \n    dep_u\n, where\n\n    dep_u\n represents the number of edges of the path from\nvertex \n    u\n to the root (also known as the depth of \n    u\n). The value of\na good tree is the maximum value of all its leaves. Now, you are given an\narray of \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n, which are the\nintegers that should be written on the leaves. You need to construct a good\ntree with \n    n\n leaves and write the integers from the array \n    a\n to all\nthe leaves. Formally, you should assign each leaf \n    u\n an index\n\n    b_u\n, where \n    b\n is a permutation of length \n    n\n, and represent\nthat the integer written on leaf \n    u\n is \n    c_u = a_b_u\n. Under these\nconstraints, you need to minimize the value of the good tree. You have \n    q\n\nqueries. Each query gives you \n    x\n, \n    y\n and changes \n    a_x\n to\n\n    y\n, and after that, you should output the minimum value of a good tree\nbased on the current array \n    a\n. A permutation of length \n    n\n is an\narray consisting of \n    n\n distinct integers from \n    1\n to \n    n\n in\narbitrary order. For example, \n    [2,3,1,5,4]\n is a permutation, but\n\n    [1,2,2]\n is not a permutation (\n    2\n appears twice in the array), and\n\n    [1,3,4]\n is also not a permutation (\n    n=3\n but there is \n    4\n in the\narray). Input Each test contains multiple test cases. The first line contains\na single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test\ncases. Their description follows. The first line contains three integers\n\n    n\n, \n    m\n, and \n    q\n (\n    1\n    \u2264 n,q \n    \u2264 2 \n    \u00b7 10^5\n,\n\n    2\n    \u2264 m \n    \u2264 2\n    \u00b7 10^5\n, \n    n \n    \u2261 1 \n    m - 1\n) \u2014 the\nnumber of the leaves, the constant \n    m\n, and the number of queries. The\nsecond line contains \n    n\n integers \n    a_1,a_2, \n    \u2026, a_n\n (\n    1\n    \n    \u2264 a_i\n    \u2264 n\n) \u2014 the initial array. For the following \n    q\n lines,\neach line contains two integers \n    x\n and \n    y\n (\n    1\n    \u2264 x,y\n    \u2264 n\n),\nrepresenting a query changing \n    a_x\n to \n    y\n. It is guaranteed that\nboth the sum of \n    n\n and the sum of \n    q\n do not exceed \n    2\n    \u00b7\n    10^5\n. Output For each test case, output \n    q\n integers in one line, the\n\n    i\n-th of which is the minimum tree value after the \n    i\n-th change.\nExample Input 3 5 3 3 3 3 4 4 5 1 4 2 4 3 5 5 2 4 3 3 4 4 5 1 4 2 5 3 5 4 5 7\n3 4 1 2 2 3 3 3 4 1 4 2 1 5 5 6 6 Output 6 6 6 7 7 7 8 6 6 6 7 Note In the\nfirst test case, after the first query, the current array \n    a\n is\n\n    [4,3,4,4,5]\n. We can construct such a good tree: The first number inside\na vertex is its index (in this problem, the indices do not matter, but help to\nunderstand the figure). If a vertex is a leaf, the second number inside the\nvertex is the integer written on it. We can tell that\n\n    dep_3=\n    dep_4=1,\n    dep_5=\n    dep_6=\n    dep_7=2\n\nand the value of the tree, which is the maximum value over all leaves, is\n\n    5+1=6\n. The value of leaves \n    5\n, \n    6\n, \n    7\n is also equal to\n\n    6\n. It can be shown that this tree has the minimum value over all valid\ntrees.\n\n",
        "cf_contest_id": 1810,
        "cf_index": "F",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "math",
            "sortings",
            "trees"
        ],
        "time_limit_seconds": 2.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n5 3 3\r\n3 3 4 4 5\r\n1 4\r\n2 4\r\n3 5\r\n5 2 4\r\n3 3 4 4 5\r\n1 4\r\n2 5\r\n3 5\r\n4 5\r\n7 3 4\r\n1 2 2 3 3 3 4\r\n1 4\r\n2 1\r\n5 5\r\n6 6\r\n",
                "6 6 6 \r\n7 7 7 8 \r\n6 6 6 7 \r\n"
            ]
        ],
        "private_cases": []
    }
]