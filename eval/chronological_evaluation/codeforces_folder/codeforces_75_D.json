[
    {
        "name": "Big Maximum Sum",
        "description": "Ahmed and Mostafa used to compete together in many programming contests for\nseveral years. Their coach Fegla asked them to solve one challenging problem,\nof course Ahmed was able to solve it but Mostafa couldn't. This problem is\nsimilar to a standard problem but it has a different format and constraints.\nIn the standard problem you are given an array of integers, and you have to\nfind one or more consecutive elements in this array where their sum is the\nmaximum possible sum. But in this problem you are given n small arrays, and\nyou will create one big array from the concatenation of one or more instances\nof the small arrays (each small array could occur more than once). The big\narray will be given as an array of indexes (1-based) of the small arrays, and\nthe concatenation should be done in the same order as in this array. Then you\nshould apply the standard problem mentioned above on the resulting big array.\nFor example let's suppose that the small arrays are 1, 6, -2, 3, 3 and\n-5, 1. And the indexes in the big array are 2, 3, 1, 3. So the actual\nvalues in the big array after formatting it as concatenation of the small\narrays will be 3, 3, -5, 1, 1, 6, -2, -5, 1. In this example the maximum sum\nis 9. Can you help Mostafa solve this problem? Input The first line contains\ntwo integers n and m, n is the number of the small arrays (1 \u2264 n \u2264 50), and m\nis the number of indexes in the big array (1 \u2264 m \u2264 250000). Then follow n\nlines, the i-th line starts with one integer l which is the size of the i-th\narray (1 \u2264 l \u2264 5000), followed by l integers each one will be greater than or\nequal -1000 and less than or equal 1000. The last line contains m integers\nwhich are the indexes in the big array, and you should concatenate the small\narrays in the same order, and each index will be greater than or equal to 1\nand less than or equal to n. The small arrays are numbered from 1 to n in the\nsame order as given in the input. Some of the given small arrays may not be\nused in big array. Note, that the array is very big. So if you try to build it\nstraightforwardly, you will probably get time or/and memory limit exceeded.\nOutput Print one line containing the maximum sum in the big array after\nformatting it as described above. You must choose at least one element for the\nsum, i. e. it cannot be empty. Please, do not use \n64-bit integers in C++. It is preferred to use cout (also you may use \nExamples Input 3 4 3 1 6 -2 2 3 3 2 -5 1 2 3 1 3 Output 9 Input 6 1 4 0 8 -3\n-10 8 3 -2 -5 10 8 -9 -5 -4 1 0 1 -3 3 -8 5 6 2 9 6 1 Output 8\n\n",
        "cf_contest_id": 75,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp",
            "greedy",
            "implementation",
            "math",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 4\r\n3 1 6 -2\r\n2 3 3\r\n2 -5 1\r\n2 3 1 3\r\n",
                "9\r\n"
            ],
            [
                "6 1\r\n4 0 8 -3 -10\r\n8 3 -2 -5 10 8 -9 -5 -4\r\n1 0\r\n1 -3\r\n3 -8 5 6\r\n2 9 6\r\n1\r\n",
                "8\r\n"
            ]
        ],
        "private_cases": [
            [
                "4 3\r\n6 6 8 -5 4 10 -2\r\n1 -2\r\n1 -10\r\n5 -10 10 8 -7 -10\r\n2 4 1\r\n",
                "24\r\n"
            ],
            [
                "7 7\r\n2 -8 -7\r\n5 2 -10 10 -2 4\r\n7 10 -8 9 8 9 -10 -3\r\n6 0 6 -9 9 -6 -9\r\n4 -6 -9 10 -6\r\n3 -8 4 10\r\n7 -1 -3 10 -8 -6 -3 6\r\n4 5 4 6 6 1 7\r\n",
                "20\r\n"
            ],
            [
                "4 8\r\n8 0 3 -9 -10 0 -1 6 -4\r\n3 -10 -7 2\r\n10 6 -2 -9 0 -7 -4 -7 7 -1 2\r\n3 -5 1 -4\r\n1 1 1 1 4 4 3 3\r\n",
                "14\r\n"
            ],
            [
                "2 1\r\n2 -4 -6\r\n5 6 8 3 5 -2\r\n1\r\n",
                "-4\r\n"
            ],
            [
                "9 4\r\n4 8 -2 -10 6\r\n10 -4 9 6 -2 -8 6 7 2 -6 2\r\n8 -10 1 9 9 -10 2 -10 -9\r\n7 3 -10 -10 -6 3 -7 0\r\n5 -4 -8 2 -5 2\r\n1 -3\r\n4 -9 0 7 -4\r\n7 4 -5 4 -8 -4 0 -1\r\n9 2 5 -10 4 -10 -2 6 5 10\r\n3 6 4 6\r\n",
                "19\r\n"
            ],
            [
                "3 1\r\n7 4 8 1 -7 -9 -8 -9\r\n10 5 -5 -5 -9 -1 7 4 -1 -4 4\r\n8 -7 7 4 10 -6 3 -6 9\r\n2\r\n",
                "11\r\n"
            ],
            [
                "7 3\r\n7 -9 -6 0 -6 -5 1 -9\r\n9 4 4 3 -6 -4 8 4 5 -6\r\n1 -4\r\n7 -3 -9 -9 1 -4 8 7\r\n2 6 3\r\n7 0 -5 -5 -2 -8 2 -1\r\n8 4 1 6 -7 -2 10 -8 -2\r\n3 1 5\r\n",
                "9\r\n"
            ],
            [
                "6 9\r\n8 -10 10 3 4 -9 0 3 9\r\n4 9 2 -1 6\r\n3 -10 -10 -5\r\n7 10 -6 7 1 -8 3 4\r\n8 -8 9 3 -1 0 1 -7 -7\r\n1 -4\r\n3 2 3 2 4 4 1 1 1\r\n",
                "68\r\n"
            ],
            [
                "3 6\r\n3 -1 -1 -1\r\n4 -2 -2 -2 -2\r\n5 -3 -3 -3 -3 -3\r\n1 2 3 1 2 3\r\n",
                "-1\r\n"
            ],
            [
                "2 2\r\n11 -1 -1 -1 -1 10 -1 -1 -1 -1 -1 -1\r\n10 -1 -1 -1 10 -1 -1 -1 -1 -1 -1\r\n1 2\r\n",
                "11\r\n"
            ],
            [
                "1 1\r\n1 1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "1 1\r\n1 -1\r\n1\r\n",
                "-1\r\n"
            ],
            [
                "1 1\r\n1 0\r\n1\r\n",
                "0\r\n"
            ],
            [
                "2 2\r\n6 -1 -1 -1 1 1 1\r\n6 1 1 1 -1 -1 -1\r\n1 2\r\n",
                "6\r\n"
            ],
            [
                "2 2\r\n6 -1 -1 -1 1 1 1\r\n6 -1 -1 -1 -1 -1 -1\r\n1 2\r\n",
                "3\r\n"
            ],
            [
                "2 2\r\n6 -1 -1 -1 -1 -1 -1\r\n6 1 1 1 -1 -1 -1\r\n1 2\r\n",
                "3\r\n"
            ],
            [
                "2 2\r\n6 -1 -1 -1 -1 -1 -1\r\n6 -1 -1 -1 -1 -1 -1\r\n1 2\r\n",
                "-1\r\n"
            ],
            [
                "2 2\r\n6 -1 -1 0 -1 -1 -1\r\n6 -1 -1 -1 -1 -1 -1\r\n1 2\r\n",
                "0\r\n"
            ],
            [
                "2 2\r\n6 -1 -1 0 1 0 -1\r\n6 -1 -1 -1 -1 -1 -1\r\n1 2\r\n",
                "1\r\n"
            ],
            [
                "2 2\r\n6 0 0 0 0 0 0\r\n6 0 0 0 0 0 0\r\n1 2\r\n",
                "0\r\n"
            ],
            [
                "14 14\r\n6 -1 1 1 1 1 1\r\n6 1 1 1 1 1 1\r\n6 1 1 1 1 1 1\r\n6 1 1 1 1 1 1\r\n6 1 1 1 1 1 1\r\n6 1 1 1 1 1 1\r\n6 1 1 1 1 1 1\r\n6 1 1 1 1 1 1\r\n6 1 1 1 1 1 1\r\n6 1 1 1 1 1 1\r\n6 1 1 1 1 1 1\r\n6 1 1 1 1 1 1\r\n6 1 1 1 1 1 1\r\n6 1 1 1 1 1 -1\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14\r\n",
                "82\r\n"
            ]
        ]
    }
]