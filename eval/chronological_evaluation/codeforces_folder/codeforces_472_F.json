[
    {
        "name": "Design Tutorial: Change the Goal",
        "description": "There are some tasks which have the following structure: you are given a\nmodel, and you can do some operations, you should use these operations to\nachive the goal. One way to create a new task is to use the same model and\nsame operations, but change the goal. Let's have a try. I have created the\nfollowing task for Topcoder SRM 557 Div1-Hard: you are given n integers x1,\nx2, ..., xn. You are allowed to perform the assignments (as many as you want)\nof the following form xi ^= xj (in the original task i and j must be\ndifferent, but in this task we allow i to equal j). The goal is to maximize\nthe sum of all xi. Now we just change the goal. You are also given n integers\ny1, y2, ..., yn. You should make x1, x2, ..., xn exactly equal to y1, y2, ...,\nyn. In other words, for each i number xi should be equal to yi. Input The\nfirst line contains an integer n (1 \u2264 n \u2264 10000). The second line contains n\nintegers: x1 to xn (0 \u2264 xi \u2264 10^9). The third line contains n integers: y1 to\nyn (0 \u2264 yi \u2264 10^9). Output If there is no solution, output -1. If there is a\nsolution, then in the first line output an integer m (0 \u2264 m \u2264 1000000) \u2013 the\nnumber of assignments you need to perform. Then print m lines, each line\nshould contain two integers i and j (1 \u2264 i, j \u2264 n), which denote assignment xi\n^= xj. If there are multiple solutions you can print any of them. We can prove\nthat under these constraints if there exists a solution then there always\nexists a solution with no more than 10^6 operations. Examples Input 2 3 5 6 0\nOutput 2 1 2 2 2 Input 5 0 0 0 0 0 1 2 3 4 5 Output -1 Input 3 4 5 6 1 2 3\nOutput 5 3 1 1 2 2 2 2 3 3 1 Input 3 1 2 3 4 5 6 Output -1 Note Assignment a\n^= b denotes assignment a = a ^ b, where operation \"^\" is bitwise XOR of two\nintegers.\n\n",
        "cf_contest_id": 472,
        "cf_index": "F",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "math",
            "matrices"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n3 5\r\n6 0\r\n",
                "5\r\n1 2\r\n2 1\r\n1 2\r\n1 2\r\n2 2\r\n"
            ],
            [
                "5\r\n0 0 0 0 0\r\n1 2 3 4 5\r\n",
                "-1\r\n"
            ],
            [
                "3\r\n4 5 6\r\n1 2 3\r\n",
                "15\r\n2 1\r\n3 1\r\n2 3\r\n3 2\r\n2 3\r\n1 1\r\n1 2\r\n2 2\r\n2 3\r\n3 3\r\n3 2\r\n3 1\r\n1 2\r\n2 1\r\n1 2\r\n"
            ],
            [
                "3\r\n1 2 3\r\n4 5 6\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n123456789\r\n987654321\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n19911120\r\n0\r\n",
                "1\r\n1 1\r\n"
            ],
            [
                "2\r\n123456 654321\r\n530865 530865\r\n",
                "6\r\n1 2\r\n2 1\r\n1 2\r\n1 2\r\n2 2\r\n2 1\r\n"
            ],
            [
                "2\r\n6 5\r\n1 6\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n178203160\r\n0\r\n",
                "1\r\n1 1\r\n"
            ],
            [
                "9\r\n154697206 103214516 129085182 521688678 457160909 159555837 521165710 213309194 225941944\r\n0 0 0 0 0 0 0 0 0\r\n",
                "47\r\n1 4\r\n4 1\r\n1 4\r\n5 1\r\n7 1\r\n2 4\r\n4 2\r\n2 4\r\n1 2\r\n6 2\r\n8 2\r\n9 2\r\n1 3\r\n4 3\r\n5 3\r\n8 3\r\n9 3\r\n4 5\r\n5 4\r\n4 5\r\n3 4\r\n8 4\r\n9 4\r\n1 5\r\n2 5\r\n4 5\r\n8 5\r\n2 6\r\n5 6\r\n7 9\r\n9 7\r\n7 9\r\n3 8\r\n5 8\r\n6 8\r\n7 8\r\n3 9\r\n8 9\r\n1 1\r\n2 2\r\n3 3\r\n4 4\r\n5 5\r\n6 6\r\n7 7\r\n8 8\r\n9 9\r\n"
            ],
            [
                "8\r\n233173797 161972374 280623074 7002792 308667453 481505406 490032550 271367041\r\n0 0 0 0 0 0 0 0\r\n",
                "40\r\n1 3\r\n3 1\r\n1 3\r\n5 1\r\n6 1\r\n7 1\r\n8 1\r\n3 2\r\n6 2\r\n7 2\r\n6 3\r\n7 3\r\n4 5\r\n5 4\r\n4 5\r\n5 6\r\n6 5\r\n5 6\r\n2 5\r\n6 8\r\n8 6\r\n6 8\r\n1 6\r\n4 6\r\n5 6\r\n2 7\r\n3 7\r\n4 7\r\n5 7\r\n8 7\r\n3 8\r\n5 8\r\n1 1\r\n2 2\r\n3 3\r\n4 4\r\n5 5\r\n6 6\r\n7 7\r\n8 8\r\n"
            ],
            [
                "30\r\n8536131 8519683 180418 147666 8388752 16578 32897 8568915 180368 147 131202 8568896 8552640 8437826 8437827 32833 64 8568960 8405075 32771 131139 131089 8388754 8568962 2 147664 180371 82 180224 131089\r\n8549510 2158629 278933603 177174 277012563 8564932 2158769 270677075 268611685 276828355 2228304 57473 268498084 278937687 270582932 268595379 276975687 268595301 8568993 8438995 279114791 270570513 10617024 276987986 2113776 270553185 268440768 278934771 10518694 276857027\r\n",
                "-1\r\n"
            ]
        ]
    }
]