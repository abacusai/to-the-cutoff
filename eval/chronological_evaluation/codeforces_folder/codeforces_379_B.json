[
    {
        "name": "New Year Present",
        "description": "The New Year is coming! That's why many people today are busy preparing New\nYear presents. Vasily the Programmer is no exception. Vasily knows that the\nbest present is (no, it's not a contest) money. He's put n empty wallets from\nleft to right in a row and decided how much money to put in what wallet.\nVasily decided to put ai coins to the i-th wallet from the left. Vasily is a\nvery busy man, so the money are sorted into the bags by his robot. Initially,\nthe robot stands by the leftmost wallet in the row. The robot can follow\ninstructions of three types: go to the wallet that is to the left of the\ncurrent one (if such wallet exists), go to the wallet that is to the right of\nthe current one (if such wallet exists), put a coin to the current wallet. Due\nto some technical malfunctions the robot cannot follow two \"put a coin\"\ninstructions in a row. Vasily doesn't want to wait for long, so he wants to\nwrite a program for the robot that contains at most 10^6 operations (not\nnecessarily minimum in length) the robot can use to put coins into the\nwallets. Help him. Input The first line contains integer n (2 \u2264 n \u2264 300) \u2014 the\nnumber of wallets. The next line contains n integers a1, a2, ..., an (0 \u2264 ai \u2264\n300). It is guaranteed that at least one ai is positive. Output Print the\nsequence that consists of k (1 \u2264 k \u2264 10^6) characters, each of them equals:\n\"L\", \"R\" or \"P\". Each character of the sequence is an instruction to the\nrobot. Character \"L\" orders to move to the left, character \"R\" orders to move\nto the right, character \"P\" orders the robot to put a coin in the wallet. The\nrobot is not allowed to go beyond the wallet line. In other words, you cannot\ngive instructions \"L\" if the robot is at wallet 1, or \"R\" at wallet n. As a\nresult of the performed operations, the i-th wallet from the left must contain\nexactly ai coins. If there are multiple answers, you can print any of them.\nExamples Input 2 1 2 Output PRPLRP Input 4 0 2 0 2 Output RPRRPLLPLRRRP\n\n",
        "cf_contest_id": 379,
        "cf_index": "B",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n1 2\r\n",
                "RLPRLRPLRP\r\n"
            ],
            [
                "4\r\n0 2 0 2\r\n",
                "RRLPRLPRRLRPLRP\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n2 3 4 0 0 1 1 3 4 2\r\n",
                "RLPRLPRRLPRLPRLPRRLPRLPRLPRLPRRRRLPRRLPRRLPRLPRLPRRLPRLPRLPRLPRLRPLRP\r\n"
            ],
            [
                "10\r\n0 0 0 0 0 0 0 0 1 0\r\n",
                "RRRRRRRRRLPR\r\n"
            ],
            [
                "5\r\n2 2 2 2 2\r\n",
                "RLPRLPRRLPRLPRRLPRLPRRLPRLPRLRPLRP\r\n"
            ],
            [
                "2\r\n6 0\r\n",
                "RLPRLPRLPRLPRLPRLPR\r\n"
            ]
        ]
    }
]