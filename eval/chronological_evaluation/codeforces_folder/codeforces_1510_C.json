[
    {
        "name": "Cactus Not Enough",
        "description": "There was no problem about a cactus at the NERC 2020 online round. That's a\nbad mistake, so judges decided to fix it. You shall not pass to the World\nFinals 2021 without solving a problem about a cactus! A cactus is a connected\nundirected graph in which every edge lies on at most one simple cycle.\nIntuitively, a cactus is a generalization of a tree where some cycles are\nallowed. Multiedges (multiple edges between a pair of vertices) and loops\n(edges that connect a vertex to itself) are not allowed in a cactus. Cher has\ngot a cactus. She calls cactus strong if it is impossible to add an edge to it\nin such a way that it still remains a cactus. But Cher thinks her cactus is\nnot strong enough. She wants to add the smallest possible number of edges to\nit to make it strong, i. e. to create a new cactus with the same vertices, so\nthat the original cactus is a subgraph of the new one, and it is impossible to\nadd another edge to it so that the graph remains a cactus. Cher hired you to\ndo this job for her. So... it's on you! Input The input consists of one or\nmore independent test cases. The first line of each test case contains two\nintegers \n    n\n and \n    m\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n, \n    0 \n    \u2264 m \n    \u2264\n    10^5\n), where \n    n\n is the number of vertices in the graph. Vertices are\nnumbered from \n    1\n to \n    n\n. Edges of the graph are represented by a set\nof edge-distinct paths, where \n    m\n is the number of such paths. Each of the\nfollowing \n    m\n lines contains a path in the graph. A path starts with an\ninteger number \n    s_i\n (\n    2 \n    \u2264 s_i \n    \u2264 1000\n) followed by \n    s_i\n\nintegers from \n    1\n to \n    n\n. These \n    s_i\n integers represent vertices\nof a path. Adjacent vertices in a path are distinct. The path can go through\nthe same vertex multiple times, but every edge is traversed exactly once in\nthe whole test case. There are no multiedges in the graph (there is at most\none edge between any two vertices). The last line of the input after all test\ncases always contains two zeros. It does not define a test case. It just marks\nthe end of the input and does not require any output. All graphs in the input\nare cacti. The total sum of all values of \n    n\n and the total sum of all\nvalues of \n    m\n throughout the input both do not exceed \n    10^5\n. Output\nFor each test case, first output the line with the minimal possible number of\nadditional edges \n    A\n. Then output \n    A\n lines, each describing one edge\nas \n    u_i\n \n    v_i\n, where \n    u_i\n and \n    v_i\n are the numbers of\nvertices to connect. After adding these edges, the resulting graph must be a\nstrong cactus. Example Input 6 1 7 1 2 5 6 2 3 4 3 1 4 1 2 3 1 5 2 3 1 3 5 3 1\n2 4 7 2 6 1 2 3 4 5 3 3 6 5 7 0 0 Output 1 1 4 0 1 5 4 2 1 3 6 7\n\n",
        "cf_contest_id": 1510,
        "cf_index": "C",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graph matchings",
            "graphs"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "6 1\r\n7 1 2 5 6 2 3 4\r\n3 1\r\n4 1 2 3 1\r\n5 2\r\n3 1 3 5\r\n3 1 2 4\r\n7 2\r\n6 1 2 3 4 5 3\r\n3 6 5 7\r\n0 0\r\n",
                "1\r\n1 4\r\n0\r\n1\r\n4 5\r\n2\r\n6 7\r\n1 3\r\n"
            ]
        ],
        "private_cases": []
    }
]