[
    {
        "name": "Berserk And Fireball",
        "description": "There are \n    n\n warriors in a row. The power of the \n    i\n-th warrior is\n\n    a_i\n. All powers are pairwise distinct. You have two types of spells\nwhich you may cast: Fireball: you spend \n    x\n mana and destroy exactly\n\n    k\n consecutive warriors; Berserk: you spend \n    y\n mana, choose two\nconsecutive warriors, and the warrior with greater power destroys the warrior\nwith smaller power. For example, let the powers of warriors be \n    [2, 3, 7, 8,\n    11, 5, 4]\n, and \n    k = 3\n. If you cast Berserk on warriors with powers\n\n    8\n and \n    11\n, the resulting sequence of powers becomes \n    [2, 3, 7,\n    11, 5, 4]\n. Then, for example, if you cast Fireball on consecutive warriors\nwith powers \n    [7, 11, 5]\n, the resulting sequence of powers becomes \n    [2,\n    3, 4]\n. You want to turn the current sequence of warriors powers \n    a_1,\n    a_2, \n    \u2026, a_n\n into \n    b_1, b_2, \n    \u2026, b_m\n. Calculate the minimum\namount of mana you need to spend on it. Input The first line contains two\nintegers \n    n\n and \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the\nlength of sequence \n    a\n and the length of sequence \n    b\n respectively.\nThe second line contains three integers \n    x, k, y\n (\n    1 \n    \u2264 x, y, \n    \u2264\n    10^9; 1 \n    \u2264 k \n    \u2264 n\n) \u2014 the cost of fireball, the range of fireball and\nthe cost of berserk respectively. The third line contains \n    n\n integers\n\n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n). It is guaranteed\nthat all integers \n    a_i\n are pairwise distinct. The fourth line contains\n\n    m\n integers \n    b_1, b_2, \n    \u2026, b_m\n (\n    1 \n    \u2264 b_i \n    \u2264 n\n). It\nis guaranteed that all integers \n    b_i\n are pairwise distinct. Output Print\nthe minimum amount of mana for turning the sequnce \n    a_1, a_2, \n    \u2026,\n    a_n\n into \n    b_1, b_2, \n    \u2026, b_m\n, or \n    -1\n if it is impossible.\nExamples Input 5 2 5 2 3 3 1 4 5 2 3 5 Output 8 Input 4 4 5 1 4 4 3 1 2 2 4 3\n1 Output -1 Input 4 4 2 1 11 1 3 2 4 1 3 2 4 Output 0\n\n",
        "cf_contest_id": 1380,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "implementation",
            "math",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 2\r\n5 2 3\r\n3 1 4 5 2\r\n3 5\r\n",
                "8\r\n"
            ],
            [
                "4 4\r\n5 1 4\r\n4 3 1 2\r\n2 4 3 1\r\n",
                "-1\r\n"
            ],
            [
                "4 4\r\n2 1 11\r\n1 3 2 4\r\n1 3 2 4\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "23 5\r\n10 3 3\r\n2 1 4 11 8 10 5 6 7 9 12 3 14 13 16 18 21 15 17 19 20 23 22\r\n4 6 3 18 23\r\n",
                "56\r\n"
            ],
            [
                "23 5\r\n10 3 4\r\n2 1 4 11 8 10 5 6 7 9 12 3 14 13 16 18 21 15 17 19 20 23 22\r\n4 6 3 18 23\r\n",
                "64\r\n"
            ],
            [
                "1 1\r\n2 1 2\r\n1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "4 4\r\n10 1 5\r\n1 2 3 4\r\n1 3 2 4\r\n",
                "-1\r\n"
            ],
            [
                "5 2\r\n5 2 3\r\n3 1 4 2 5\r\n3 2\r\n",
                "-1\r\n"
            ]
        ]
    }
]