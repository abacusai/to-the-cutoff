[
    {
        "name": "Painting Edges",
        "description": "Note the unusual memory limit for this problem. You are given an undirected\ngraph consisting of n vertices and m edges. The vertices are numbered with\nintegers from 1 to n, the edges are numbered with integers from 1 to m. Each\nedge can be unpainted or be painted in one of the k colors, which are numbered\nwith integers from 1 to k. Initially, none of the edges is painted in any of\nthe colors. You get queries of the form \"Repaint edge ei to color ci\". At any\ntime the graph formed by the edges of the same color must be bipartite. If\nafter the repaint this condition is violated, then the query is considered to\nbe invalid and edge ei keeps its color. Otherwise, edge ei is repainted in\ncolor ci, and the query is considered to valid. Recall that the graph is\ncalled bipartite if the set of its vertices can be divided into two parts so\nthat no edge connected vertices of the same parts. For example, suppose you\nare given a triangle graph, that is a graph with three vertices and edges (1,\n2), (2, 3) and (3, 1). Suppose that the first two edges are painted color 1,\nand the third one is painted color 2. Then the query of \"repaint the third\nedge in color 1\" will be incorrect because after its execution the graph\nformed by the edges of color 1 will not be bipartite. On the other hand, it is\npossible to repaint the second edge in color 2. You receive q queries. For\neach query, you should either apply it, and report that the query is valid, or\nreport that the query is invalid. Input The first line contains integers n, m,\nk, q (2 \u2264 n \u2264 5\u00b710^5, 1 \u2264 m, q \u2264 5\u00b710^5, 1 \u2264 k \u2264 50) \u2014 the number of vertices,\nthe number of edges, the number of colors and the number of queries. Then\nfollow m edges of the graph in the form ai, bi (1 \u2264 ai, bi \u2264 n). Then follow q\nqueries of the form ei, ci (1 \u2264 ei \u2264 m, 1 \u2264 ci \u2264 k). It is guaranteed that the\ngraph doesn't contain multiple edges and loops. Output For each query print\n\"YES\" (without the quotes), if it is valid, or \"NO\" (without the quotes), if\nthis query destroys the bipartivity of the graph formed by the edges of some\ncolor. Examples Input 3 3 2 5 1 2 2 3 1 3 1 1 2 1 3 2 3 1 2 2 Output YES YES\nYES NO YES\n\n",
        "cf_contest_id": 576,
        "cf_index": "E",
        "cf_rating": 3300,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 600.0,
        "public_cases": [
            [
                "3 3 2 5\r\n1 2\r\n2 3\r\n1 3\r\n1 1\r\n2 1\r\n3 2\r\n3 1\r\n2 2\r\n",
                "YES\r\nYES\r\nYES\r\nNO\r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "4 5 2 6\r\n1 2\r\n2 3\r\n1 3\r\n1 4\r\n3 4\r\n1 1\r\n2 1\r\n4 2\r\n5 2\r\n3 1\r\n3 2\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\n"
            ],
            [
                "2 1 1 2\r\n1 2\r\n1 1\r\n1 1\r\n",
                "YES\r\nYES\r\n"
            ],
            [
                "2 1 50 4\r\n1 2\r\n1 1\r\n1 1\r\n1 50\r\n1 50\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\n"
            ],
            [
                "3 3 50 7\r\n1 2\r\n2 3\r\n1 3\r\n1 50\r\n2 50\r\n3 50\r\n2 50\r\n3 49\r\n2 49\r\n1 49\r\n",
                "YES\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\n"
            ],
            [
                "2 1 1 1\r\n1 2\r\n1 1\r\n",
                "YES\r\n"
            ]
        ]
    }
]