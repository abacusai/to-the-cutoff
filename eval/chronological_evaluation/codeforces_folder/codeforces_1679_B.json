[
    {
        "name": "Stone Age Problem",
        "description": "Once upon a time Mike and Mike decided to come up with an outstanding problem\nfor some stage of ROI (rare olympiad in informatics). One of them came up with\na problem prototype but another stole the idea and proposed that problem for\nanother stage of the same olympiad. Since then the first Mike has been waiting\nfor an opportunity to propose the original idea for some other contest... Mike\nwaited until this moment! You are given an array \n    a\n of \n    n\n integers.\nYou are also given \n    q\n queries of two types: Replace \n    i\n-th element in\nthe array with integer \n    x\n. Replace each element in the array with integer\n\n    x\n. After performing each query you have to calculate the sum of all\nelements in the array. Input The first line contains two integers \n    n\n and\n\n    q\n (\n    1 \n    \u2264 n, q \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of elements in\nthe array and the number of queries, respectively. The second line contains\n\n    n\n integers \n    a_1, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014\nelements of the array \n    a\n. Each of the following \n    q\n lines contains a\ndescription of the corresponding query. Description begins with integer\n\n    t\n (\n    t \n    \u2208\n    \n    1, 2\n) which denotes a type of the query: If\n\n    t = 1\n, then two integers \n    i\n and \n    x\n are following (\n    1 \n    \u2264 i\n    \n    \u2264 n\n, \n    1 \n    \u2264 x \n    \u2264 10^9\n) \u2014 position of replaced element and\nit's new value. If \n    t = 2\n, then integer \n    x\n is following (\n    1 \n    \u2264\n    x \n    \u2264 10^9\n) \u2014 new value of each element in the array. Output Print\n\n    q\n integers, each on a separate line. In the \n    i\n-th line print the\nsum of all elements in the array after performing the first \n    i\n queries.\nExample Input 5 5 1 2 3 4 5 1 1 5 2 10 1 5 11 1 4 1 2 1 Output 19 50 51 42 5\nNote Consider array from the example and the result of performing each query:\nInitial array is \n    [1, 2, 3, 4, 5]\n. After performing the first query,\narray equals to \n    [5, 2, 3, 4, 5]\n. The sum of all elements is \n    19\n.\nAfter performing the second query, array equals to \n    [10, 10, 10, 10, 10]\n.\nThe sum of all elements is \n    50\n. After performing the third query, array\nequals to \n    [10, 10, 10, 10, 11\n]. The sum of all elements is \n    51\n.\nAfter performing the fourth query, array equals to \n    [10, 10, 10, 1, 11]\n.\nThe sum of all elements is \n    42\n. After performing the fifth query, array\nequals to \n    [1, 1, 1, 1, 1]\n. The sum of all elements is \n    5\n.\n\n",
        "cf_contest_id": 1679,
        "cf_index": "B",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 5\r\n1 2 3 4 5\r\n1 1 5\r\n2 10\r\n1 5 11\r\n1 4 1\r\n2 1\r\n",
                "19\r\n50\r\n51\r\n42\r\n5\r\n"
            ]
        ],
        "private_cases": [
            [
                "4 5\r\n6 9 5 1\r\n1 4 9\r\n1 3 9\r\n1 4 7\r\n2 10\r\n2 7\r\n",
                "29\r\n33\r\n31\r\n40\r\n28\r\n"
            ],
            [
                "4 5\r\n5 2 6 1\r\n2 8\r\n2 7\r\n1 4 4\r\n2 9\r\n1 3 9\r\n",
                "32\r\n28\r\n25\r\n36\r\n36\r\n"
            ],
            [
                "5 4\r\n4 8 3 4 10\r\n1 4 10\r\n1 4 6\r\n1 3 10\r\n2 1\r\n",
                "35\r\n31\r\n38\r\n5\r\n"
            ],
            [
                "4 4\r\n1 7 4 7\r\n1 4 3\r\n2 10\r\n2 2\r\n1 3 3\r\n",
                "15\r\n40\r\n8\r\n9\r\n"
            ],
            [
                "5 5\r\n5 6 2 10 10\r\n1 2 7\r\n2 4\r\n1 1 10\r\n2 8\r\n1 3 4\r\n",
                "34\r\n20\r\n26\r\n40\r\n36\r\n"
            ],
            [
                "5 6\r\n1 2 3 4 5\r\n2 10\r\n1 1 5\r\n2 10\r\n1 1 6\r\n2 10\r\n1 1 7\r\n",
                "50\r\n45\r\n50\r\n46\r\n50\r\n47\r\n"
            ]
        ]
    }
]