[
    {
        "name": "Sequence of Comparisons",
        "description": "Once upon a time, Petya had an array of integers \n    a\n of length \n    n\n.\nBut over time, the array itself was lost, and only \n    n-1\n results of\ncomparisons of neighboring array elements remained. In other words, for every\n\n    i\n from \n    1\n to \n    n-1\n, Petya knows exactly one of these three\nfacts: \n    a_i < a_i+1\n; \n    a_i = a_i+1\n; \n    a_i > a_i+1\n. Petya\nwonders if it is possible to uniquely determine the result of comparing\n\n    a_1\n and \n    a_n\n. You have to help Petya determine the result of\ncomparing \n    a_1\n and \n    a_n\n or report that the result cannot be\ndetermined unambiguously. Input The first line contains a single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 500\n) \u2014 the number of test cases. The only line\nof the test case contains the string \n    s\n (\n    1 \n    \u2264 |s| \n    \u2264 100\n),\nwhere \n    s_i\n is: <, if \n    a_i < a_i + 1\n; >, if \n    a_i > a_i + 1\n;\n=, if \n    a_i = a_i + 1\n. Output For each test case, print a single string\nequal to: <, if \n    a_1 < a_n\n; >, if \n    a_1 > a_n\n; =, if \n    a_1 = a_n\n;\n?, if it is impossible to uniquely determine the result of the comparison.\nExample Input 4 >>> <><=< = <<== Output > ? = < Note Consider the test cases\nof the example: in the first test case, it's easy to see that \n    a_1 > a_4\n\nsince \n    a_1 > a_2 > a_3 > a_4\n; in the second test case, both sequences\n\n    [1, 2, 0, 10, 10, 15]\n and \n    [10, 11, 1, 2, 2, 5]\n meet the\nconstraints; in the first one, \n    a_1 < a_6\n, and in the second one, \n    a_1\n    > a_6\n, so it's impossible to compare \n    a_1\n and \n    a_6\n; in the third\ntest case, we already know that \n    a_1 = a_2\n; in the fourth test case, it's\neasy to see that \n    a_3 = a_4 = a_5\n, and \n    a_1 < a_2 < a_3\n, so \n    a_1 <\n    a_5\n.\n\n",
        "cf_contest_id": 1571,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "*special"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n>>>\r\n<><=<\r\n=\r\n<<==\r\n",
                ">\r\n?\r\n=\r\n<\r\n"
            ]
        ],
        "private_cases": []
    }
]