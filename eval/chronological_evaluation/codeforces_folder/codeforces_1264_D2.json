[
    {
        "name": "Beautiful Bracket Sequence (hard version)",
        "description": "This is the hard version of this problem. The only difference is the limit of\n\n    n\n - the length of the input string. In this version, \n    1 \n    \u2264 n\n    \n    \u2264 10^6\n. Let's define a correct bracket sequence and its depth as\nfollow: An empty string is a correct bracket sequence with depth \n    0\n. If\n\"s\" is a correct bracket sequence with depth \n    d\n then \"(s)\" is a correct\nbracket sequence with depth \n    d + 1\n. If \"s\" and \"t\" are both correct\nbracket sequences then their concatenation \"st\" is a correct bracket sequence\nwith depth equal to the maximum depth of \n    s\n and \n    t\n. For a (not\nnecessarily correct) bracket sequence \n    s\n, we define its depth as the\nmaximum depth of any correct bracket sequence induced by removing some\ncharacters from \n    s\n (possibly zero). For example: the bracket sequence\n\n    s =\n\"())(())\" has depth \n    2\n, because by removing the third character\nwe obtain a correct bracket sequence \"()(())\" with depth \n    2\n. Given a\nstring \n    a\n consists of only characters '(', ')' and '?'. Consider all (not\nnecessarily correct) bracket sequences obtained by replacing all characters\n'?' in \n    a\n by either '(' or ')'. Calculate the sum of all the depths of\nall these bracket sequences. As this number can be large, find it modulo\n\n    998244353\n. Hacks in this problem can be done only if easy and hard\nversions of this problem was solved. Input The only line contains a non-empty\nstring consist of only '(', ')' and '?'. The length of the string is at most\n\n    10^6\n. Output Print the answer modulo \n    998244353\n in a single line.\nExamples Input ?? Output 1 Input (?(?)) Output 9 Note In the first test case,\nwe can obtain \n    4\n bracket sequences by replacing all characters '?' with\neither '(' or ')': \"((\". Its depth is \n    0\n; \"))\". Its depth is \n    0\n;\n\")(\". Its depth is \n    0\n; \"()\". Its depth is \n    1\n. So, the answer is \n    1\n    = 0 + 0 + 0 + 1\n. In the second test case, we can obtain \n    4\n bracket\nsequences by replacing all characters '?' with either '(' or ')': \"(((())\".\nIts depth is \n    2\n; \"()()))\". Its depth is \n    2\n; \"((()))\". Its depth is\n\n    3\n; \"()(())\". Its depth is \n    2\n. So, the answer is \n    9 = 2 + 2 + 3 +\n    2\n.\n\n",
        "cf_contest_id": 1264,
        "cf_index": "D2",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "probabilities"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "??\r\n",
                "1\r\n"
            ],
            [
                "(?(?))\r\n",
                "9\r\n"
            ]
        ],
        "private_cases": [
            [
                "?\r\n",
                "0\r\n"
            ],
            [
                "(\r\n",
                "0\r\n"
            ],
            [
                ")\r\n",
                "0\r\n"
            ],
            [
                "((\r\n",
                "0\r\n"
            ],
            [
                "))\r\n",
                "0\r\n"
            ],
            [
                "???\r\n",
                "4\r\n"
            ],
            [
                "(((\r\n",
                "0\r\n"
            ],
            [
                ")))\r\n",
                "0\r\n"
            ],
            [
                "????\r\n",
                "12\r\n"
            ],
            [
                "((((\r\n",
                "0\r\n"
            ],
            [
                "))))\r\n",
                "0\r\n"
            ],
            [
                "(?(??)))(()?(???)(?((?(?()))(())?))?(?)))?)?)))?)?()())??)?()?)??))?(()??)?()))()(???)())?(??)))((?())()(?\r\n",
                "359232022\r\n"
            ],
            [
                "??????????????????????????????????????????????????????????????????????????????????????????????????????????\r\n",
                "206662035\r\n"
            ],
            [
                "(?(??(?(((??(???((?((?(?((((((?(????(??(?????(????((((???(?(??(??(??(((????(?(((((????(???(??(??((?(?((?(?\r\n",
                "180818340\r\n"
            ],
            [
                ")?)??)?)))??)???))?))?)?))))))?)????)??)?????)????))))???)?)??)??)??)))????)?)))))????)???)??)??))?)?))?)?\r\n",
                "153019280\r\n"
            ],
            [
                ")?)??)?)((??(???)(?((?(?)???()??????(?????????????(?))???)?(??)?????()?????(?)?(?(????(???(??)??()?(??(?(?\r\n",
                "930560744\r\n"
            ],
            [
                "(?\r\n",
                "1\r\n"
            ],
            [
                "?)\r\n",
                "1\r\n"
            ],
            [
                "(?)\r\n",
                "2\r\n"
            ],
            [
                "(??\r\n",
                "3\r\n"
            ],
            [
                "???)\r\n",
                "8\r\n"
            ]
        ]
    }
]