[
    {
        "name": "Two Strings Swaps",
        "description": "You are given two strings \n    a\n and \n    b\n consisting of lowercase English\nletters, both of length \n    n\n. The characters of both strings have indices\nfrom \n    1\n to \n    n\n, inclusive. You are allowed to do the following\nchanges: Choose any index \n    i\n (\n    1 \n    \u2264 i \n    \u2264 n\n) and swap\ncharacters \n    a_i\n and \n    b_i\n; Choose any index \n    i\n (\n    1 \n    \u2264 i\n    \n    \u2264 n\n) and swap characters \n    a_i\n and \n    a_n - i + 1\n; Choose any\nindex \n    i\n (\n    1 \n    \u2264 i \n    \u2264 n\n) and swap characters \n    b_i\n and\n\n    b_n - i + 1\n. Note that if \n    n\n is odd, you are formally allowed to\nswap \n    a_\n    \u2308\n    n/2\n    \u2309\n with\n\n    a_\n    \u2308\n    n/2\n    \u2309\n (and the same with the string \n    b\n)\nbut this move is useless. Also you can swap two equal characters but this\noperation is useless as well. You have to make these strings equal by applying\nany number of changes described above, in any order. But it is obvious that it\nmay be impossible to make two strings equal by these swaps. In one preprocess\nmove you can replace a character in \n    a\n with another character. In other\nwords, in a single preprocess move you can choose any index \n    i\n (\n    1\n    \n    \u2264 i \n    \u2264 n\n), any character \n    c\n and set \n    a_i := c\n. Your task\nis to find the minimum number of preprocess moves to apply in such a way that\nafter them you can make strings \n    a\n and \n    b\n equal by applying some\nnumber of changes described in the list above. Note that the number of changes\nyou make after the preprocess moves does not matter. Also note that you cannot\napply preprocess moves to the string \n    b\n or make any preprocess moves\nafter the first change is made. Input The first line of the input contains one\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the length of strings \n    a\n\nand \n    b\n. The second line contains the string \n    a\n consisting of exactly\n\n    n\n lowercase English letters. The third line contains the string \n    b\n\nconsisting of exactly \n    n\n lowercase English letters. Output Print a single\ninteger \u2014 the minimum number of preprocess moves to apply before changes, so\nthat it is possible to make the string \n    a\n equal to string \n    b\n with a\nsequence of changes from the list above. Examples Input 7 abacaba bacabaa\nOutput 4 Input 5 zcabd dbacz Output 0 Note In the first example preprocess\nmoves are as follows: \n    a_1 :=\n'b', \n    a_3 :=\n'c', \n    a_4 :=\n'a' and\n\n    a_5:=\n'b'. Afterwards, \n    a =\n\"bbcabba\". Then we can obtain equal\nstrings by the following sequence of changes: \n    swap(a_2, b_2)\n and\n\n    swap(a_2, a_6)\n. There is no way to use fewer than \n    4\n preprocess\nmoves before a sequence of changes to make string equal, so the answer in this\nexample is \n    4\n. In the second example no preprocess moves are required. We\ncan use the following sequence of changes to make \n    a\n and \n    b\n equal:\n\n    swap(b_1, b_5)\n, \n    swap(a_2, a_4)\n.\n\n",
        "cf_contest_id": 1006,
        "cf_index": "D",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\nabacaba\r\nbacabaa\r\n",
                "4\r\n"
            ],
            [
                "5\r\nzcabd\r\ndbacz\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\na\r\nb\r\n",
                "1\r\n"
            ],
            [
                "5\r\nahmad\r\nyogaa\r\n",
                "3\r\n"
            ]
        ]
    }
]