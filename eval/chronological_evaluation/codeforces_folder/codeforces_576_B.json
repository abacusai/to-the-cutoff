[
    {
        "name": "Invariance of Tree",
        "description": "A tree of size n is an undirected connected graph consisting of n vertices\nwithout cycles. Consider some tree with n vertices. We call a tree invariant\nrelative to permutation p = p1p2... pn, if for any two vertices of the tree u\nand v the condition holds: \"vertices u and v are connected by an edge if and\nonly if vertices pu and pv are connected by an edge\". You are given\npermutation p of size n. Find some tree size n, invariant relative to the\ngiven permutation. Input The first line contains number n (1 \u2264 n \u2264 10^5) \u2014 the\nsize of the permutation (also equal to the size of the sought tree). The\nsecond line contains permutation pi (1 \u2264 pi \u2264 n). Output If the sought tree\ndoes not exist, print \"NO\" (without the quotes). Otherwise, print \"YES\", and\nthen print n - 1 lines, each of which contains two integers \u2014 the numbers of\nvertices connected by an edge of the tree you found. The vertices are numbered\nfrom 1, the order of the edges and the order of the vertices within the edges\ndoes not matter. If there are multiple solutions, output any of them. Examples\nInput 4 4 3 2 1 Output YES 4 1 4 2 1 3 Input 3 3 1 2 Output NO Note In the\nfirst sample test a permutation transforms edge (4, 1) into edge (1, 4), edge\n(4, 2) into edge (1, 3) and edge (1, 3) into edge (4, 2). These edges all\nappear in the resulting tree. It can be shown that in the second sample test\nno tree satisfies the given condition.\n\n",
        "cf_contest_id": 576,
        "cf_index": "B",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4 3 2 1\r\n",
                "YES\r\n4 1\r\n4 2\r\n1 3\r\n"
            ],
            [
                "3\r\n3 1 2\r\n",
                "NO\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n3 2 1\r\n",
                "YES\r\n2 1\r\n2 3\r\n"
            ],
            [
                "4\r\n3 4 1 2\r\n",
                "YES\r\n4 2\r\n4 1\r\n2 3\r\n"
            ],
            [
                "5\r\n5 3 2 1 4\r\n",
                "NO\r\n"
            ],
            [
                "8\r\n1 2 6 4 5 7 8 3\r\n",
                "YES\r\n1 2\r\n1 3\r\n1 6\r\n1 7\r\n1 8\r\n1 4\r\n1 5\r\n"
            ],
            [
                "11\r\n7 3 5 2 10 1 9 6 8 4 11\r\n",
                "YES\r\n11 1\r\n11 7\r\n11 9\r\n11 8\r\n11 6\r\n11 2\r\n11 3\r\n11 5\r\n11 10\r\n11 4\r\n"
            ],
            [
                "1\r\n1\r\n",
                "YES\r\n"
            ],
            [
                "2\r\n1 2\r\n",
                "YES\r\n1 2\r\n"
            ],
            [
                "2\r\n2 1\r\n",
                "YES\r\n2 1\r\n"
            ],
            [
                "6\r\n2 1 6 5 3 4\r\n",
                "YES\r\n2 1\r\n2 3\r\n1 6\r\n2 4\r\n1 5\r\n"
            ],
            [
                "6\r\n2 1 4 5 6 3\r\n",
                "YES\r\n2 1\r\n2 3\r\n1 4\r\n2 5\r\n1 6\r\n"
            ],
            [
                "4\r\n2 3 4 1\r\n",
                "NO\r\n"
            ],
            [
                "6\r\n2 3 4 1 6 5\r\n",
                "YES\r\n6 5\r\n6 1\r\n5 2\r\n6 3\r\n5 4\r\n"
            ],
            [
                "6\r\n4 1 2 3 6 5\r\n",
                "YES\r\n6 5\r\n6 1\r\n5 4\r\n6 3\r\n5 2\r\n"
            ]
        ]
    }
]