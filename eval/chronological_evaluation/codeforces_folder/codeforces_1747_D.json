[
    {
        "name": "Yet Another Problem",
        "description": "You are given an array \n    a\n of \n    n\n integers \n    a_1, a_2, a_3, \n    \u2026,\n    a_n\n. You have to answer \n    q\n independent queries, each consisting of two\nintegers \n    l\n and \n    r\n. Consider the subarray \n    a[l:r]\n \n    =\n\n\n    [a_l, a_l+1, \n    \u2026, a_r]\n. You can apply the following operation to\nthe subarray any number of times (possibly zero)- Choose two integers \n    L\n,\n\n    R\n such that \n    l \n    \u2264 L \n    \u2264 R \n    \u2264 r\n and \n    R - L + 1\n is odd.\nReplace each element in the subarray from \n    L\n to \n    R\n with the XOR of\nthe elements in the subarray \n    [L, R]\n. The answer to the query is the\nminimum number of operations required to make all elements of the subarray\n\n    a[l:r]\n equal to \n    0\n or \n    -1\n if it is impossible to make all of\nthem equal to \n    0\n. You can find more details about XOR operation here.\nInput The first line contains two integers \n    n\n and \n    q\n \n    (1 \n    \u2264 n,\n    q \n    \u2264 2 \n    \u00b7 10^5)\n \u2014 the length of the array \n    a\n and the number of\nqueries. The next line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n\n\n    (0 \n    \u2264 a_i \n     2^30)\n \u2014 the elements of the array \n    a\n. The\n\n    i\n-th of the next \n    q\n lines contains two integers \n    l_i\n and\n\n    r_i\n \n    (1 \n    \u2264 l_i \n    \u2264 r_i \n    \u2264 n)\n \u2014 the description of the\n\n    i\n-th query. Output For each query, output a single integer \u2014 the answer\nto that query. Example Input 7 6 3 0 3 3 1 2 3 3 4 4 6 3 7 5 6 1 6 2 2 Output\n-1 1 1 -1 2 0 Note In the first query, \n    l = 3, r = 4\n, subarray = \n    [3,\n    3]\n. We can apply operation only to the subarrays of length \n    1\n, which\nwon't change the array; hence it is impossible to make all elements equal to\n\n    0\n. In the second query, \n    l = 4, r = 6\n, subarray = \n    [3, 1, 2]\n.\nWe can choose the whole subarray \n    (L = 4, R = 6)\n and replace all elements\nby their XOR \n    (3 \n    \u2295 1 \n    \u2295 2) = 0\n, making the subarray \n    [0,\n    0, 0]\n. In the fifth query, \n    l = 1, r = 6\n, subarray = \n    [3, 0, 3, 3,\n    1, 2]\n. We can make the operations as follows: Choose \n    L = 4, R = 6\n,\nmaking the subarray \n    [3, 0, 3, 0, 0, 0]\n. Choose \n    L = 1, R = 5\n,\nmaking the subarray \n    [0, 0, 0, 0, 0, 0]\n.\n\n",
        "cf_contest_id": 1747,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "bitmasks",
            "constructive algorithms",
            "data structures"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 6\r\n3 0 3 3 1 2 3\r\n3 4\r\n4 6\r\n3 7\r\n5 6\r\n1 6\r\n2 2\r\n",
                "-1\r\n1\r\n1\r\n-1\r\n2\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n0\r\n1 1\r\n",
                "0\r\n"
            ],
            [
                "2 3\r\n1073741823 1073741823\r\n1 1\r\n2 2\r\n1 2\r\n",
                "-1\r\n-1\r\n-1\r\n"
            ]
        ]
    }
]