[
    {
        "name": "Grasshopper on a Line",
        "description": "You are given two integers \n    x\n and \n    k\n. Grasshopper starts in a point\n\n    0\n on an OX axis. In one move, it can jump some integer distance, that is\nnot divisible by \n    k\n, to the left or to the right. What's the smallest\nnumber of moves it takes the grasshopper to reach point \n    x\n? What are\nthese moves? If there are multiple answers, print any of them. Input The first\nline contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the\nnumber of testcases. The only line of each testcase contains two integers\n\n    x\n and \n    k\n (\n    1 \n    \u2264 x \n    \u2264 100\n; \n    2 \n    \u2264 k \n    \u2264 100\n) \u2014\nthe endpoint and the constraint on the jumps, respectively. Output For each\ntestcase, in the first line, print a single integer \n    n\n \u2014 the smallest\nnumber of moves it takes the grasshopper to reach point \n    x\n. In the second\nline, print \n    n\n integers, each of them not divisible by \n    k\n. A\npositive integer would mean jumping to the right, a negative integer would\nmean jumping to the left. The endpoint after the jumps should be exactly\n\n    x\n. Each jump distance should be from \n    -10^9\n to \n    10^9\n. In can\nbe shown that, for any solution with the smallest number of jumps, there\nexists a solution with the same number of jumps such that each jump is from\n\n    -10^9\n to \n    10^9\n. It can be shown that the answer always exists under\nthe given constraints. If there are multiple answers, print any of them.\nExample Input 3 10 2 10 3 3 4 Output 2 7 3 1 10 1 3\n\n",
        "cf_contest_id": 1837,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n10 2\r\n10 3\r\n3 4\r\n",
                "2 9 1\r\n1 10\r\n1 3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n10 2\r\n",
                "2 9 1\r\n"
            ],
            [
                "2\r\n10 2\r\n10 3\r\n",
                "2 9 1\r\n1 10\r\n"
            ],
            [
                "1\r\n5 11\r\n",
                "1 5\r\n"
            ],
            [
                "2\r\n5 11\r\n6 8\r\n",
                "1 5\r\n1 6\r\n"
            ],
            [
                "2\r\n10 4\r\n3 4\r\n",
                "1 10\r\n1 3\r\n"
            ]
        ]
    }
]