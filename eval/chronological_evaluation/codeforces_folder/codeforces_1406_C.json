[
    {
        "name": "Link Cut Centroids",
        "description": "Fishing Prince loves trees, and he especially loves trees with only one\ncentroid. The tree is a connected graph without cycles. A vertex is a centroid\nof a tree only when you cut this vertex (remove it and remove all edges from\nthis vertex), the size of the largest connected component of the remaining\ngraph is the smallest possible. For example, the centroid of the following\ntree is \n    2\n, because when you cut it, the size of the largest connected\ncomponent of the remaining graph is \n    2\n and it can't be smaller. However,\nin some trees, there might be more than one centroid, for example: Both vertex\n\n    1\n and vertex \n    2\n are centroids because the size of the largest\nconnected component is \n    3\n after cutting each of them. Now Fishing Prince\nhas a tree. He should cut one edge of the tree (it means to remove the edge).\nAfter that, he should add one edge. The resulting graph after these two\noperations should be a tree. He can add the edge that he cut. He wants the\ncentroid of the resulting tree to be unique. Help him and find any possible\nway to make the operations. It can be proved, that at least one such way\nalways exists. Input The input consists of multiple test cases. The first line\ncontains an integer \n    t\n (\n    1\n    \u2264 t\n    \u2264 10^4\n) \u2014 the number of test\ncases. The description of the test cases follows. The first line of each test\ncase contains an integer \n    n\n (\n    3\n    \u2264 n\n    \u2264 10^5\n) \u2014 the number of\nvertices. Each of the next \n    n-1\n lines contains two integers \n    x, y\n\n(\n    1\n    \u2264 x,y\n    \u2264 n\n). It means, that there exists an edge connecting\nvertices \n    x\n and \n    y\n. It's guaranteed that the given graph is a tree.\nIt's guaranteed that the sum of \n    n\n for all test cases does not exceed\n\n    10^5\n. Output For each test case, print two lines. In the first line\nprint two integers \n    x_1, y_1\n (\n    1 \n    \u2264 x_1, y_1 \n    \u2264 n\n), which\nmeans you cut the edge between vertices \n    x_1\n and \n    y_1\n. There should\nexist edge connecting vertices \n    x_1\n and \n    y_1\n. In the second line\nprint two integers \n    x_2, y_2\n (\n    1 \n    \u2264 x_2, y_2 \n    \u2264 n\n), which\nmeans you add the edge between vertices \n    x_2\n and \n    y_2\n. The graph\nafter these two operations should be a tree. If there are multiple solutions\nyou can print any. Example Input 2 5 1 2 1 3 2 4 2 5 6 1 2 1 3 1 4 2 5 2 6\nOutput 1 2 1 2 1 3 2 3 Note Note that you can add the same edge that you cut.\nIn the first test case, after cutting and adding the same edge, the vertex\n\n    2\n is still the only centroid. In the second test case, the vertex\n\n    2\n becomes the only centroid after cutting the edge between vertices\n\n    1\n and \n    3\n and adding the edge between vertices \n    2\n and \n    3\n.\n\n",
        "cf_contest_id": 1406,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "2\r\n5\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n6\r\n1 2\r\n1 3\r\n1 4\r\n2 5\r\n2 6\r\n",
                "1 2\r\n1 2\r\n2 5\r\n5 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "15\r\n4\r\n1 2\r\n2 3\r\n3 4\r\n4\r\n1 2\r\n2 4\r\n3 4\r\n4\r\n1 2\r\n1 3\r\n1 4\r\n4\r\n1 3\r\n2 3\r\n4 3\r\n4\r\n1 4\r\n3 4\r\n2 3\r\n4\r\n4 1\r\n3 2\r\n2 1\r\n5\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5\r\n1 2\r\n2 3\r\n4 1\r\n5 1\r\n5\r\n1 2\r\n3 1\r\n4 1\r\n1 5\r\n6\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6\r\n1 3\r\n2 3\r\n3 4\r\n4 5\r\n4 6\r\n3\r\n1 2\r\n1 3\r\n3\r\n2 1\r\n2 3\r\n3\r\n3 1\r\n3 2\r\n4\r\n1 2\r\n2 3\r\n2 4\r\n",
                "3 4\r\n4 2\r\n4 3\r\n3 2\r\n1 2\r\n1 2\r\n1 3\r\n1 3\r\n3 2\r\n2 4\r\n2 3\r\n3 1\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n4 5\r\n5 3\r\n4 5\r\n5 3\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 3\r\n1 3\r\n1 2\r\n1 2\r\n"
            ]
        ]
    }
]