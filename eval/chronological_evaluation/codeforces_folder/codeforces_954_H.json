[
    {
        "name": "Path Counting",
        "description": "You are given a rooted tree. Let's denote d(x) as depth of node x: depth of\nthe root is 1, depth of any other node x is d(y) + 1, where y is a parent of\nx. The tree has the following property: every node x with d(x) = i has exactly\nai children. Maximum possible depth of a node is n, and an = 0. We define fk\nas the number of unordered pairs of vertices in the tree such that the number\nof edges on the simple path between them is equal to k. Calculate fk modulo\n10^9 + 7 for every 1 \u2264 k \u2264 2n - 2. Input The first line of input contains an\ninteger n (2 \u2264 n \u2264 5 000) \u2014 the maximum depth of a node. The second line of\ninput contains n - 1 integers a1, a2, ..., an - 1 (2 \u2264 ai \u2264 10^9), where ai is\nthe number of children of every node x such that d(x) = i. Since an = 0, it is\nnot given in the input. Output Print 2n - 2 numbers. The k-th of these numbers\nmust be equal to fk modulo 10^9 + 7. Examples Input 4 2 2 2 Output 14 19 20 20\n16 16 Input 3 2 3 Output 8 13 6 9 Note This the tree from the first sample:\n\n",
        "cf_contest_id": 954,
        "cf_index": "H",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "dp"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2 2 2\r\n",
                "14 19 20 20 16 16\r\n"
            ],
            [
                "3\r\n2 3\r\n",
                "8 13 6 9\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n2\r\n",
                "2 1\r\n"
            ],
            [
                "6\r\n2 2 4 2 4\r\n",
                "182 415 420 980 1216 2432 1536 3328 2048 4096\r\n"
            ]
        ]
    }
]