[
    {
        "name": "Range and Partition",
        "description": "Given an array \n    a\n of \n    n\n integers, find a range of values \n    [x,\n    y]\n (\n    x \n    \u2264 y\n), and split \n    a\n into exactly \n    k\n (\n    1 \n    \u2264 k\n    \n    \u2264 n\n) subarrays in such a way that: Each subarray is formed by several\ncontinuous elements of \n    a\n, that is, it is equal to \n    a_l, a_l+1,\n    \n    \u2026, a_r\n for some \n    l\n and \n    r\n (\n    1 \n    \u2264 l \n    \u2264 r \n    \u2264\n    n\n). Each element from \n    a\n belongs to exactly one subarray. In each\nsubarray the number of elements inside the range \n    [x, y]\n (inclusive) is\nstrictly greater than the number of elements outside the range. An element\nwith index \n    i\n is inside the range \n    [x, y]\n if and only if \n    x \n    \u2264\n    a_i \n    \u2264 y\n. Print any solution that minimizes \n    y - x\n. Input The input\nconsists of multiple test cases. The first line contains a single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 3 \n    \u00b7 10^4\n) \u2014 the number of test cases.\nDescription of the test cases follows. The first line of each test case\ncontains two integers \n    n\n and \n    k\n (\n    1 \n    \u2264 k \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n) \u2014 the length of the array \n    a\n and the number of subarrays\nrequired in the partition. The second line of each test case contains \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n) where\n\n    a_i\n is the \n    i\n-th element of the array. It is guaranteed that the\nsum of \n    n\n over all test cases does not exceed \n    2\n    \u00b710^5\n. Output\nFor each test case, print \n    k+1\n lines. In the first line, print \n    x\n\nand \n    y\n \u2014 the limits of the found range. Then print \n    k\n lines, the\n\n    i\n-th should contain \n    l_i\n and \n    r_i\n (\n    1\n    \u2264 l_i \n    \u2264 r_i\n    \n    \u2264 n\n) \u2014 the limits of the \n    i\n-th subarray. You can print the\nsubarrays in any order. Example Input 3 2 1 1 2 4 2 1 2 2 2 11 3 5 5 5 1 5 5 1\n5 5 5 1 Output 1 2 1 2 2 2 1 3 4 4 5 5 1 1 2 2 3 11 Note In the first test,\nthere should be only one subarray, which must be equal to the whole array.\nThere are \n    2\n elements inside the range \n    [1, 2]\n and \n    0\n elements\noutside, if the chosen range is \n    [1, 1]\n, there will be \n    1\n element\ninside (\n    a_1\n) and \n    1\n element outside (\n    a_2\n), and the answer\nwill be invalid. In the second test, it is possible to choose the range \n    [2,\n    2]\n, and split the array in subarrays \n    (1, 3)\n and \n    (4, 4)\n, in\nsubarray \n    (1, 3)\n there are \n    2\n elements inside the range (\n    a_2\n\nand \n    a_3\n) and \n    1\n element outside (\n    a_1\n), in subarray \n    (4,\n    4)\n there is only \n    1\n element (\n    a_4\n), and it is inside the range.\nIn the third test, it is possible to choose the range \n    [5, 5]\n, and split\nthe array in subarrays \n    (1, 4)\n, \n    (5, 7)\n and \n    (8, 11)\n, in the\nsubarray \n    (1, 4)\n there are \n    3\n elements inside the range and \n    1\n\nelement outside, in the subarray \n    (5, 7)\n there are \n    2\n elements\ninside and \n    1\n element outside and in the subarray \n    (8, 11)\n there are\n\n    3\n elements inside and \n    1\n element outside.\n\n",
        "cf_contest_id": 1630,
        "cf_index": "B",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "constructive algorithms",
            "data structures",
            "greedy",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2 1\r\n1 2\r\n4 2\r\n1 2 2 2\r\n11 3\r\n5 5 5 1 5 5 1 5 5 5 1\r\n",
                "1 2\r\n1 2\r\n2 2\r\n1 3\r\n4 4\r\n5 5\r\n1 1\r\n2 2\r\n3 11\r\n"
            ]
        ],
        "private_cases": []
    }
]