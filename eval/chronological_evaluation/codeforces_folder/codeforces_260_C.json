[
    {
        "name": "Balls and Boxes",
        "description": "Little Vasya had n boxes with balls in the room. The boxes stood in a row and\nwere numbered with numbers from 1 to n from left to right. Once Vasya chose\none of the boxes, let's assume that its number is i, took all balls out from\nit (it is guaranteed that this box originally had at least one ball), and\nbegan putting balls (one at a time) to the boxes with numbers i + 1, i + 2, i\n+ 3 and so on. If Vasya puts a ball into the box number n, then the next ball\ngoes to box 1, the next one goes to box 2 and so on. He did it until he had no\nballs left in his hands. It is possible that Vasya puts multiple balls to the\nsame box, and it is also possible that one or more balls will go to the box\nnumber i. If i = n, Vasya puts the first ball into the box number 1, then the\nnext ball goes to box 2 and so on. For example, let's suppose that initially\nVasya had four boxes, and the first box had 3 balls, the second one had 2, the\nthird one had 5 and the fourth one had 4 balls. Then, if i = 3, then Vasya\nwill take all five balls out of the third box and put them in the boxes with\nnumbers: 4, 1, 2, 3, 4. After all Vasya's actions the balls will lie in the\nboxes as follows: in the first box there are 4 balls, 3 in the second one, 1\nin the third one and 6 in the fourth one. At this point Vasya has completely\nforgotten the original arrangement of the balls in the boxes, but he knows how\nthey are arranged now, and the number x \u2014 the number of the box, where he put\nthe last of the taken out balls. He asks you to help to find the initial\narrangement of the balls in the boxes. Input The first line of the input\ncontains two integers n and x (2 \u2264 n \u2264 10^5, 1 \u2264 x \u2264 n), that represent the\nnumber of the boxes and the index of the box that got the last ball from\nVasya, correspondingly. The second line contains n space-separated integers\na1, a2, ..., an, where integer ai (0 \u2264 ai \u2264 10^9, ax \u2260 0) represents the\nnumber of balls in the box with index i after Vasya completes all the actions.\nPlease, do not use the \nIt is preferred to use the cin, cout streams or the \nPrint n integers, where the i-th one represents the number of balls in the box\nnumber i before Vasya starts acting. Separate the numbers in the output by\nspaces. If there are multiple correct solutions, you are allowed to print any\nof them. Examples Input 4 4 4 3 1 6 Output 3 2 5 4 Input 5 2 3 2 0 2 7 Output\n2 1 4 1 6 Input 3 3 2 3 1 Output 1 2 3\n\n",
        "cf_contest_id": 260,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 4\r\n4 3 1 6\r\n",
                "3 2 5 4\n"
            ],
            [
                "5 2\r\n3 2 0 2 7\r\n",
                "2 1 4 1 6\n"
            ],
            [
                "3 3\r\n2 3 1\r\n",
                "1 2 3\n"
            ]
        ],
        "private_cases": [
            [
                "10 3\r\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\r\n",
                "0 0 10000000000 0 0 0 0 0 0 0\n"
            ],
            [
                "5 4\r\n0 554459682 978416312 784688178 954779973\r\n",
                "3 554459681 978416311 784688177 954779973\n"
            ],
            [
                "5 2\r\n1 554459683 978416312 784688178 954779974\r\n",
                "6 554459681 978416311 784688177 954779973\n"
            ],
            [
                "10 8\r\n994538714 617271264 168716105 915909382 338220996 533154890 507276501 323171960 121635370 33140162\r\n",
                "961398551 584131101 135575942 882769219 305080833 500014727 474136338 290031797 88495208 331401628\n"
            ],
            [
                "10 5\r\n994538715 617271265 168716106 915909383 338220997 533154890 507276501 323171960 121635371 33140163\r\n",
                "961398551 584131101 135575942 882769219 305080833 500014727 474136338 290031797 88495208 331401635\n"
            ],
            [
                "15 12\r\n256121252 531930087 157210108 921323934 786210452 0 962820592 824495629 642702951 556399489 660627699 454443499 406577817 234814732 387536495\r\n",
                "256121252 531930087 157210108 921323934 786210452 6 962820591 824495628 642702950 556399488 660627698 454443498 406577817 234814732 387536495\n"
            ],
            [
                "15 8\r\n256121253 531930088 157210109 921323935 786210453 1 962820593 824495630 642702951 556399489 660627699 454443499 406577818 234814733 387536496\r\n",
                "256121252 531930087 157210108 921323934 786210452 17 962820591 824495628 642702950 556399488 660627698 454443498 406577817 234814732 387536495\n"
            ],
            [
                "48 34\r\n227460647 746912226 53993109 682685525 621533698 666833117 492590398 167395931 678377836 66509684 638633255 713194369 386921920 34175132 704550051 220688091 499436760 495071385 102952101 137372655 0 720974146 209203457 946682102 237312198 943872065 957150897 357568282 367006748 0 730509325 68523190 726721460 85037180 620964625 219537305 396613042 39840356 91947418 566463810 791505982 87036026 446282153 912204581 895882687 284561729 35994526 423462628\r\n",
                "227460647 746912226 53993109 682685525 621533698 666833117 492590398 167395931 678377836 66509684 638633255 713194369 386921920 34175132 704550051 220688091 499436760 495071385 102952101 137372655 0 720974146 209203457 946682102 237312198 943872065 957150897 357568282 367006748 4 730509324 68523189 726721459 85037179 620964625 219537305 396613042 39840356 91947418 566463810 791505982 87036026 446282153 912204581 895882687 284561729 35994526 423462628\n"
            ],
            [
                "48 19\r\n227460648 746912227 53993110 682685526 621533699 666833118 492590399 167395932 678377837 66509685 638633256 713194370 386921921 34175133 704550052 220688092 499436761 495071386 102952102 137372655 0 720974146 209203457 946682102 237312198 943872065 957150897 357568282 367006748 0 730509325 68523190 726721460 85037180 620964626 219537306 396613043 39840357 91947419 566463811 791505983 87036027 446282154 912204582 895882688 284561730 35994527 423462629\r\n",
                "227460647 746912226 53993109 682685525 621533698 666833117 492590398 167395931 678377836 66509684 638633255 713194369 386921920 34175132 704550051 220688091 499436760 495071385 102952101 137372655 0 720974146 209203457 946682102 237312198 943872065 957150897 357568282 367006748 37 730509324 68523189 726721459 85037179 620964625 219537305 396613042 39840356 91947418 566463810 791505982 87036026 446282153 912204581 895882687 284561729 35994526 423462628\n"
            ],
            [
                "10 5\r\n3 3 3 3 4 3 3 3 3 3\r\n",
                "0 0 0 31 0 0 0 0 0 0\n"
            ],
            [
                "5 4\r\n3 1 3 1 3\r\n",
                "2 0 2 5 2\n"
            ]
        ]
    }
]