[
    {
        "name": "Autocompletion",
        "description": "You are given a set of strings \n    S\n. Each string consists of lowercase\nLatin letters. For each string in this set, you want to calculate the minimum\nnumber of seconds required to type this string. To type a string, you have to\nstart with an empty string and transform it into the string you want to type\nusing the following actions: if the current string is \n    t\n, choose some\nlowercase Latin letter \n    c\n and append it to the back of \n    t\n, so the\ncurrent string becomes \n    t + c\n. This action takes \n    1\n second; use\nautocompletion. When you try to autocomplete the current string \n    t\n, a\nlist of all strings \n    s \n    \u2208 S\n such that \n    t\n is a prefix of \n    s\n\nis shown to you. This list includes \n    t\n itself, if \n    t\n is a string\nfrom \n    S\n, and the strings are ordered lexicographically. You can transform\n\n    t\n into the \n    i\n-th string from this list in \n    i\n seconds. Note\nthat you may choose any string from this list you want, it is not necessarily\nthe string you are trying to type. What is the minimum number of seconds that\nyou have to spend to type each string from \n    S\n? Note that the strings from\n\n    S\n are given in an unusual way. Input The first line contains one integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^6\n). Then \n    n\n lines follow, the\n\n    i\n-th line contains one integer \n    p_i\n (\n    0 \n    \u2264 p_i < i\n) and one\nlowercase Latin character \n    c_i\n. These lines form some set of strings such\nthat \n    S\n is its subset as follows: there are \n    n + 1\n strings, numbered\nfrom \n    0\n to \n    n\n; the \n    0\n-th string is an empty string, and the\n\n    i\n-th string (\n    i \n    \u2265 1\n) is the result of appending the character\n\n    c_i\n to the string \n    p_i\n. It is guaranteed that all these strings are\ndistinct. The next line contains one integer \n    k\n (\n    1 \n    \u2264 k \n    \u2264 n\n)\n\u2014 the number of strings in \n    S\n. The last line contains \n    k\n integers\n\n    a_1\n, \n    a_2\n, ..., \n    a_k\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n, all \n    a_i\n\nare pairwise distinct) denoting the indices of the strings generated by above-\nmentioned process that form the set \n    S\n \u2014 formally, if we denote the\n\n    i\n-th generated string as \n    s_i\n, then \n    S = s_a_1, s_a_2,\n    \n    \u2026, s_a_k\n. Output Print \n    k\n integers, the \n    i\n-th of them\nshould be equal to the minimum number of seconds required to type the string\n\n    s_a_i\n. Examples Input 10 0 i 1 q 2 g 0 k 1 e 5 r 4 m 5 h 3 p 3 e 5 8 9\n1 10 6 Output 2 4 1 3 3 Input 8 0 a 1 b 2 a 2 b 4 a 4 b 5 c 6 d 5 2 3 4 7 8\nOutput 1 2 2 4 4 Note In the first example, \n    S\n consists of the following\nstrings: ieh, iqgp, i, iqge, ier.\n\n",
        "cf_contest_id": 1312,
        "cf_index": "G",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "dp"
        ],
        "time_limit_seconds": 7.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "10\r\n0 i\r\n1 q\r\n2 g\r\n0 k\r\n1 e\r\n5 r\r\n4 m\r\n5 h\r\n3 p\r\n3 e\r\n5\r\n8 9 1 10 6\r\n",
                "2 4 1 3 3 "
            ],
            [
                "8\r\n0 a\r\n1 b\r\n2 a\r\n2 b\r\n4 a\r\n4 b\r\n5 c\r\n6 d\r\n5\r\n2 3 4 7 8\r\n",
                "1 2 2 4 4 "
            ]
        ],
        "private_cases": [
            [
                "1\r\n0 z\r\n1\r\n1\r\n",
                "1 "
            ]
        ]
    }
]