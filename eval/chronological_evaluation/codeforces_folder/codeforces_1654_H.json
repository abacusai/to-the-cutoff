[
    {
        "name": "Three Minimums",
        "description": "Given a list of distinct values, we denote with first minimum, second minimum,\nand third minimum the three smallest values (in increasing order). A\npermutation \n    p_1, p_2, \n    \u2026, p_n\n is good if the following statement\nholds for all pairs \n    (l,r)\n with \n    1\n    \u2264 l < l+2 \n    \u2264 r\n    \u2264 n\n. If\n\n    p_l, p_r\n are (not necessarily in this order) the first and\nsecond minimum of \n    p_l, p_l+1, \n    \u2026, p_r\n then the third minimum of\n\n    p_l, p_l+1,\n    \u2026, p_r\n is either \n    p_l+1\n or \n    p_r-1\n. You\nare given an integer \n    n\n and a string \n    s\n of length \n    m\n consisting\nof characters \"<\" and \">\". Count the number of good permutations \n    p_1,\n    p_2,\n    \u2026, p_n\n such that, for all \n    1\n    \u2264 i\n    \u2264 m\n, \n    p_i <\n    p_i+1\n if \n    s_i =\n \"<\"; \n    p_i > p_i+1\n if \n    s_i =\n \">\". As the\nresult can be very large, you should print it modulo \n    998\n     244\n     353\n.\nInput The first line contains two integers \n    n\n and \n    m\n (\n    2 \n    \u2264 n\n    \n    \u2264 2 \n    \u00b7 10^5\n, \n    1 \n    \u2264 m \n    \u2264\n    min(100, n-1)\n). The second\nline contains a string \n    s\n of length \n    m\n, consisting of characters \"<\"\nand \">\". Output Print a single integer: the number of good permutations\nsatisfying the constraints described in the statement, modulo\n\n    998\n     244\n     353\n. Examples Input 5 3 >>> Output 5 Input 5 1 < Output 56\nInput 6 5 <<><> Output 23 Input 10 5 ><<>< Output 83154 Input 1008 20\n<><<>>><<<<<>>>>>>>> Output 284142857 Note In the first test, there are\n\n    5\n good permutations satisfying the constraints given by the string\n\n    s\n: \n    [4, 3, 2, 1, 5]\n, \n    [5, 3, 2, 1, 4]\n, \n    [5, 4, 2, 1, 3]\n,\n\n    [5, 4, 3, 1, 2]\n, \n    [5, 4, 3, 2, 1]\n. Each of them is good; satisfies\n\n    p_1 > p_2\n; satisfies \n    p_2 > p_3\n; satisfies \n    p_3 > p_4\n. In the\nsecond test, there are \n    60\n permutations such that \n    p_1 < p_2\n. Only\n\n    56\n of them are good: the permutations \n    [1, 4, 3, 5, 2]\n, \n    [1, 5,\n    3, 4, 2]\n, \n    [2, 4, 3, 5, 1]\n, \n    [2, 5, 3, 4, 1]\n are not good because\nthe required condition doesn't hold for \n    (l, r)\n = \n    (1, 5)\n. For\nexample, for the permutation \n    [2, 4, 3, 5, 1]\n, the first minimum and the\nsecond minimum are \n    p_5\n and \n    p_1\n, respectively (so they are\n\n    p_l, p_r\n up to reordering); the third minimum is \n    p_3\n\n(neither \n    p_l+1\n nor \n    p_r-1\n). In the third test, there are\n\n    23\n good permutations satisfying the constraints given by the string\n\n    s\n: \n    [1, 2, 4, 3, 6, 5]\n, \n    [1, 2, 5, 3, 6, 4]\n, \n    [1, 2, 6, 3,\n    5, 4]\n, \n    [1, 3, 4, 2, 6, 5]\n, \n    [1, 3, 5, 2, 6, 4]\n, \n    [1, 3, 6, 2,\n    5, 4]\n, \n    [1, 4, 5, 2, 6, 3]\n, \n    [1, 4, 6, 2, 5, 3]\n, \n    [1, 5, 6, 2,\n    4, 3]\n, \n    [2, 3, 4, 1, 6, 5]\n, \n    [2, 3, 5, 1, 6, 4]\n, \n    [2, 3, 6, 1,\n    5, 4]\n, \n    [2, 4, 5, 1, 6, 3]\n, \n    [2, 4, 6, 1, 5, 3]\n, \n    [2, 5, 6, 1,\n    4, 3]\n, \n    [3, 4, 5, 1, 6, 2]\n, \n    [3, 4, 5, 2, 6, 1]\n, \n    [3, 4, 6, 1,\n    5, 2]\n, \n    [3, 4, 6, 2, 5, 1]\n, \n    [3, 5, 6, 1, 4, 2]\n, \n    [3, 5, 6, 2,\n    4, 1]\n, \n    [4, 5, 6, 1, 3, 2]\n, \n    [4, 5, 6, 2, 3, 1]\n.\n\n",
        "cf_contest_id": 1654,
        "cf_index": "H",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "constructive algorithms",
            "divide and conquer",
            "dp",
            "fft",
            "math"
        ],
        "time_limit_seconds": 8.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "5 3\r\n>>>\r\n",
                "5\r\n"
            ],
            [
                "5 1\r\n<\r\n",
                "56\r\n"
            ],
            [
                "6 5\r\n<<><>\r\n",
                "23\r\n"
            ],
            [
                "10 5\r\n><<><\r\n",
                "83154\r\n"
            ],
            [
                "1008 20\r\n<><<>>><<<<<>>>>>>>>\r\n",
                "284142857\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1\r\n>\r\n",
                "1\r\n"
            ],
            [
                "200000 100\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n",
                "558429690\r\n"
            ],
            [
                "200000 100\r\n>>><<><<><>><><<>><>><>>>><>><<<<<<><<><>>><<>><><><<<<<<<<<<>>><<<<>>>>><><<><>><>><<<>><>><>>><<<>\r\n",
                "514701939\r\n"
            ],
            [
                "200000 100\r\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\r\n",
                "335390773\r\n"
            ],
            [
                "200000 99\r\n>>>>>>>>><<<>>>>>>>>><>>>>>>>>>>>>>>>>><>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><>>>>>>>>>>>>>>>>>\r\n",
                "549103852\r\n"
            ],
            [
                "200000 99\r\n>>>><<>>><><<><>>><>>>>>><>><><<>>>><><>>><<<><><>>>>>>><<<<<><><>>>><><>><<<>><>>><<><><>>>>><<<<>\r\n",
                "92245305\r\n"
            ],
            [
                "200000 99\r\n<<<<<<<<<<<<<><<<<<<><<<<<<<<<<<<<<<<<<<<<><<<<<<<<<<><<<<><<<<<><<<<<<<><<<<<<<<<><<<<<<<<<<<<<<<<\r\n",
                "79495857\r\n"
            ],
            [
                "131072 100\r\n>><<>>><><<<><<><<>>>><>>><>>><>>><<><>><>>>>><>>>>>><>>><>>><<<>>><<>>>>>>>>>>><>>>>>>>>>>>>><>>>>>\r\n",
                "396943717\r\n"
            ],
            [
                "131073 100\r\n<><<<<<<<<<><<<<<<<<><<<<><><<<>>><>><><<><<<<<<<<>>><<<><<<<<<><<><<><<>><<>>><<<<<<<<>>><<<><><><>\r\n",
                "54663482\r\n"
            ],
            [
                "200000 1\r\n>\r\n",
                "292050226\r\n"
            ],
            [
                "3 2\r\n<<\r\n",
                "1\r\n"
            ],
            [
                "200000 100\r\n>>>>>>>><>>>>>>>>>>>>>><><>>>>><>><><><>>>>>>>>>>>>>>>><>>>>><>>>>>>>>>>><><>><<>>>>>><>>>><>>>>>>>>\r\n",
                "610112187\r\n"
            ],
            [
                "200000 100\r\n>>>>>>>>><<<>>>>><<><><><><>>><<>><<>><>>><<>>>><><<>><><<<<><>><><>><<<<><><>>><<><>>><<<><>>><><<>\r\n",
                "878804246\r\n"
            ],
            [
                "200000 100\r\n<<<<><<<<<<<<<><<<<<<<<<<<<<><<<>><<<<<<<<<<<<<<<<<<<<<><<><<<<<<<<<<<<<<<<><<<><<<<<<<><<<<<<><<<<<\r\n",
                "653948678\r\n"
            ],
            [
                "200000 99\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n",
                "957233105\r\n"
            ],
            [
                "200000 99\r\n<><<<>><<><>><<<<<<><><<><<>><>>>>><>><>><<>>>><>><>>>><<>>>>>>><>>><<<<<><<<><<<>><<<<<>>>><<<<<<<\r\n",
                "324874861\r\n"
            ],
            [
                "200000 99\r\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\r\n",
                "845311507\r\n"
            ],
            [
                "131072 100\r\n<<>><<<<<<><<<><><<><<><><<<<>><<><><<<<<<<<<<<><><>><<<<<<<<>><<><>><<>><<><<><<>><<<<><<<<<<<<<<<>\r\n",
                "126435889\r\n"
            ],
            [
                "131073 100\r\n>>>>>>><><>>>>>>>><<>>>>><<>><<><>><>>>><<>>>>>><>>>><>><><>>>>><<>>><>>>>>><<>>>>>>>>>><>>>>><<<<><\r\n",
                "897469336\r\n"
            ],
            [
                "199999 1\r\n>\r\n",
                "437132736\r\n"
            ]
        ]
    }
]