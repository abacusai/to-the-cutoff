[
    {
        "name": "Prefix Enlightenment",
        "description": "There are \n    n\n lamps on a line, numbered from \n    1\n to \n    n\n. Each one\nhas an initial state off (\n    0\n) or on (\n    1\n). You're given \n    k\n\nsubsets \n    A_1, \n    \u2026, A_k\n of \n    1, 2, \n    \u2026, n\n, such\nthat the intersection of any three subsets is empty. In other words, for all\n\n    1 \n    \u2264 i_1 < i_2 < i_3 \n    \u2264 k\n, \n    A_i_1\n    \u2229 A_i_2\n    \u2229\n    A_i_3 = \n    \u2205\n. In one operation, you can choose one of these\n\n    k\n subsets and switch the state of all lamps in it. It is guaranteed\nthat, with the given subsets, it's possible to make all lamps be\nsimultaneously on using this type of operation. Let \n    m_i\n be the minimum\nnumber of operations you have to do in order to make the \n    i\n first lamps\nbe simultaneously on. Note that there is no condition upon the state of other\nlamps (between \n    i+1\n and \n    n\n), they can be either off or on. You have\nto compute \n    m_i\n for all \n    1 \n    \u2264 i \n    \u2264 n\n. Input The first line\ncontains two integers \n    n\n and \n    k\n (\n    1 \n    \u2264 n, k \n    \u2264 3 \n    \u00b7\n    10^5\n). The second line contains a binary string of length \n    n\n,\nrepresenting the initial state of each lamp (the lamp \n    i\n is off if \n    s_i\n    = 0\n, on if \n    s_i = 1\n). The description of each one of the \n    k\n\nsubsets follows, in the following format: The first line of the description\ncontains a single integer \n    c\n (\n    1 \n    \u2264 c \n    \u2264 n\n) \u2014 the number of\nelements in the subset. The second line of the description contains \n    c\n\ndistinct integers \n    x_1, \n    \u2026, x_c\n (\n    1 \n    \u2264 x_i \n    \u2264 n\n) \u2014 the\nelements of the subset. It is guaranteed that: The intersection of any three\nsubsets is empty; It's possible to make all lamps be simultaneously on using\nsome operations. Output You must output \n    n\n lines. The \n    i\n-th line\nshould contain a single integer \n    m_i\n \u2014 the minimum number of operations\nrequired to make the lamps \n    1\n to \n    i\n be simultaneously on. Examples\nInput 7 3 0011100 3 1 4 6 3 3 4 7 2 2 3 Output 1 2 3 3 3 3 3 Input 8 6\n00110011 3 1 3 8 5 1 2 5 6 7 2 6 8 2 3 5 2 4 7 1 2 Output 1 1 1 1 1 1 4 4\nInput 5 3 00011 3 1 2 3 1 4 3 3 4 5 Output 1 1 1 1 1 Input 19 5\n1001001001100000110 2 2 3 2 5 6 2 8 9 5 12 13 14 15 16 1 19 Output 0 1 1 1 2 2\n2 3 3 3 3 4 4 4 4 4 4 4 5 Note In the first example: For \n    i = 1\n, we can\njust apply one operation on \n    A_1\n, the final states will be \n    1010110\n;\nFor \n    i = 2\n, we can apply operations on \n    A_1\n and \n    A_3\n, the final\nstates will be \n    1100110\n; For \n    i \n    \u2265 3\n, we can apply operations on\n\n    A_1\n, \n    A_2\n and \n    A_3\n, the final states will be \n    1111111\n. In\nthe second example: For \n    i \n    \u2264 6\n, we can just apply one operation on\n\n    A_2\n, the final states will be \n    11111101\n; For \n    i \n    \u2265 7\n, we\ncan apply operations on \n    A_1, A_3, A_4, A_6\n, the final states will be\n\n    11111111\n.\n\n",
        "cf_contest_id": 1290,
        "cf_index": "C",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dsu",
            "graphs"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 3\r\n0011100\r\n3\r\n1 4 6\r\n3\r\n3 4 7\r\n2\r\n2 3\r\n",
                "1\r\n2\r\n3\r\n3\r\n3\r\n3\r\n3\r\n"
            ],
            [
                "8 6\r\n00110011\r\n3\r\n1 3 8\r\n5\r\n1 2 5 6 7\r\n2\r\n6 8\r\n2\r\n3 5\r\n2\r\n4 7\r\n1\r\n2\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n4\r\n4\r\n"
            ],
            [
                "5 3\r\n00011\r\n3\r\n1 2 3\r\n1\r\n4\r\n3\r\n3 4 5\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "19 5\r\n1001001001100000110\r\n2\r\n2 3\r\n2\r\n5 6\r\n2\r\n8 9\r\n5\r\n12 13 14 15 16\r\n1\r\n19\r\n",
                "0\r\n1\r\n1\r\n1\r\n2\r\n2\r\n2\r\n3\r\n3\r\n3\r\n3\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n5\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1\r\n1\r\n1\r\n",
                "0\r\n"
            ]
        ]
    }
]