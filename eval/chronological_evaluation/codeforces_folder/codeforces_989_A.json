[
    {
        "name": "A Blend of Springtime",
        "description": "When the curtains are opened, a canvas unfolds outside. Kanno marvels at all\nthe blonde colours along the riverside \u2014 not tangerines, but blossoms\ninstead.\"What a pity it's already late spring,\" sighs Mino with regret, \"one\nmore drizzling night and they'd be gone.\" \"But these blends are at their best,\naren't they?\" Absorbed in the landscape, Kanno remains optimistic. The\nlandscape can be expressed as a row of consecutive cells, each of which either\ncontains a flower of colour amber or buff or canary yellow, or is empty. When\na flower withers, it disappears from the cell that it originally belonged to,\nand it spreads petals of its colour in its two neighbouring cells (or outside\nthe field if the cell is on the side of the landscape). In case petals fall\noutside the given cells, they simply become invisible. You are to help Kanno\ndetermine whether it's possible that after some (possibly none or all) flowers\nshed their petals, at least one of the cells contains all three colours,\nconsidering both petals and flowers. Note that flowers can wither in arbitrary\norder. Input The first and only line of input contains a non-empty string\n\n    s\n consisting of uppercase English letters 'A', 'B', 'C' and characters\n'.' (dots) only (\n    | s \n    |\n    \u2264 100\n) \u2014 denoting cells\ncontaining an amber flower, a buff one, a canary yellow one, and no flowers,\nrespectively. Output Output \"Yes\" if it's possible that all three colours\nappear in some cell, and \"No\" otherwise. You can print each letter in any case\n(upper or lower). Examples Input .BAC. Output Yes Input AA..CB Output No Note\nIn the first example, the buff and canary yellow flowers can leave their\npetals in the central cell, blending all three colours in it. In the second\nexample, it's impossible to satisfy the requirement because there is no way\nthat amber and buff meet in any cell.\n\n",
        "cf_contest_id": 989,
        "cf_index": "A",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                ".BAC.\r\n",
                "Yes"
            ],
            [
                "AA..CB\r\n",
                "No"
            ]
        ],
        "private_cases": [
            [
                ".\r\n",
                "No"
            ],
            [
                "ACB.AAAAAA\r\n",
                "Yes"
            ],
            [
                "B.BC.BBBCA\r\n",
                "Yes"
            ],
            [
                "BA..CAB..B\r\n",
                "Yes"
            ],
            [
                "CACCBAA.BC\r\n",
                "Yes"
            ],
            [
                ".CAACCBBA.CBB.AC..BABCCBCCB..B.BC..CBC.CA.CC.C.CC.B.A.CC.BBCCBB..ACAACAC.CBCCB.AABAAC.CBCC.BA..CCBC.\r\n",
                "Yes"
            ],
            [
                "A\r\n",
                "No"
            ],
            [
                "..\r\n",
                "No"
            ],
            [
                "BC\r\n",
                "No"
            ],
            [
                "CAB\r\n",
                "Yes"
            ],
            [
                "A.CB\r\n",
                "No"
            ],
            [
                "CA.ABB.CC.B.C.BBBABAAB.BBBAACACAAA.C.AACA.AAC.C.BCCB.CCBC.C..CCACA.CBCCB.CCAABAAB.AACAA..A.AAA.\r\n",
                "No"
            ],
            [
                "BC.ABACAACC..AC.A..CCCAABBCCACAC.AA.CC.BAABABABBCBB.BA..C.C.C.A.BBA.C..BC.ACACCC.AAAACCCCC.AAC.AC.AB\r\n",
                "Yes"
            ],
            [
                "CC.ACCC.BCCCCAA.BBAACB.ABABAAAA.A.CBAB.CBACBBC..C.CA.AAA..AA..ABBB.A.C..CBBCAAACC.B..CC.AC..CAABACB.\r\n",
                "Yes"
            ],
            [
                ".BAB.\r\n",
                "No"
            ],
            [
                "BBBBBBBBB\r\n",
                "No"
            ],
            [
                "..AAC..\r\n",
                "No"
            ],
            [
                ".AAABBBCCC.\r\n",
                "No"
            ],
            [
                "AAABC\r\n",
                "Yes"
            ],
            [
                "BBB\r\n",
                "No"
            ],
            [
                "AAAAABABAAAAA\r\n",
                "No"
            ],
            [
                "AABBCC\r\n",
                "No"
            ],
            [
                ".BA\r\n",
                "No"
            ],
            [
                "CAAAAB\r\n",
                "No"
            ]
        ]
    }
]