[
    {
        "name": "Binary String Minimizing",
        "description": "You are given a binary string of length \n    n\n (i. e. a string consisting of\n\n    n\n characters '0' and '1'). In one move you can swap two adjacent\ncharacters of the string. What is the lexicographically minimum possible\nstring you can obtain from the given one if you can perform no more than\n\n    k\n moves? It is possible that you do not perform any moves at all. Note\nthat you can swap the same pair of adjacent characters with indices \n    i\n\nand \n    i+1\n arbitrary (possibly, zero) number of times. Each such swap is\nconsidered a separate move. You have to answer \n    q\n independent test cases.\nInput The first line of the input contains one integer \n    q\n (\n    1 \n    \u2264 q\n    \n    \u2264 10^4\n) \u2014 the number of test cases. The first line of the test case\ncontains two integers \n    n\n and \n    k\n (\n    1 \n    \u2264 n \n    \u2264 10^6, 1 \n    \u2264 k\n    \n    \u2264 n^2\n) \u2014 the length of the string and the number of moves you can\nperform. The second line of the test case contains one string consisting of\n\n    n\n characters '0' and '1'. It is guaranteed that the sum of \n    n\n over\nall test cases does not exceed \n    10^6\n (\n    \u2211 n \n    \u2264 10^6\n). Output\nFor each test case, print the answer on it: the lexicographically minimum\npossible string of length \n    n\n you can obtain from the given one if you can\nperform no more than \n    k\n moves. Example Input 3 8 5 11011010 7 9 1111100 7\n11 1111100 Output 01011110 0101111 0011111 Note In the first example, you can\nchange the string as follows: \n    1\n    1011010 \n    \u2192\n    10111010 \n    \u2192 0111\n    1010 \n    \u2192\n    011\n    10110 \n    \u2192 01\n    101110 \n    \u2192\n    01011110\n. In the third example, there are enough operations to make the\nstring sorted.\n\n",
        "cf_contest_id": 1256,
        "cf_index": "D",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n8 5\r\n11011010\r\n7 9\r\n1111100\r\n7 11\r\n1111100\r\n",
                "01011110\r\n0101111\r\n0011111\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n8 5\r\n11011010\r\n7 9\r\n1111100\r\n",
                "01011110\r\n0101111\r\n"
            ],
            [
                "1\r\n2 1\r\n00\r\n",
                "00\r\n"
            ]
        ]
    }
]