[
    {
        "name": "Road Improvement",
        "description": "The country has n cities and n - 1 bidirectional roads, it is possible to get\nfrom every city to any other one if you move only along the roads. The cities\nare numbered with integers from 1 to n inclusive. All the roads are initially\nbad, but the government wants to improve the state of some roads. We will\nassume that the citizens are happy about road improvement if the path from the\ncapital located in city x to any other city contains at most one bad road.\nYour task is \u2014 for every possible x determine the number of ways of improving\nthe quality of some roads in order to meet the citizens' condition. As those\nvalues can be rather large, you need to print each value modulo 1 000 000 007\n(10^9 + 7). Input The first line of the input contains a single integer n (2 \u2264\nn \u2264 2\u00b710^5) \u2014 the number of cities in the country. Next line contains n - 1\npositive integers p2, p3, p4, ..., pn (1 \u2264 pi \u2264 i - 1) \u2014 the description of\nthe roads in the country. Number pi means that the country has a road\nconnecting city pi and city i. Output Print n integers a1, a2, ..., an, where\nai is the sought number of ways to improve the quality of the roads modulo 1\n000 000 007 (10^9 + 7), if the capital of the country is at city number i.\nExamples Input 3 1 1 Output 4 3 3 Input 5 1 2 3 4 Output 5 8 9 8 5\n\n",
        "cf_contest_id": 543,
        "cf_index": "D",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 1\r\n",
                "4 3 3\r\n"
            ],
            [
                "5\r\n1 2 3 4\r\n",
                "5 8 9 8 5\r\n"
            ]
        ],
        "private_cases": [
            [
                "31\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "73741817 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913 536870913\r\n"
            ],
            [
                "29\r\n1 2 2 4 4 6 6 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\r\n",
                "191 380 191 470 236 506 254 506 504 500 494 486 476 464 450 434 416 396 374 350 324 296 266 234 200 164 126 86 44\r\n"
            ],
            [
                "2\r\n1\r\n",
                "2 2\r\n"
            ],
            [
                "3\r\n1 2\r\n",
                "3 4 3\r\n"
            ]
        ]
    }
]