[
    {
        "name": "Challenging Cliffs",
        "description": "You are a game designer and want to make an obstacle course. The player will\nwalk from left to right. You have \n    n\n heights of mountains already\nselected and want to arrange them so that the absolute difference of the\nheights of the first and last mountains is as small as possible. In addition,\nyou want to make the game difficult, and since walking uphill or flat is\nharder than walking downhill, the difficulty of the level will be the number\nof mountains \n    i\n (\n    1 \n    \u2264 i < n\n) such that \n    h_i \n    \u2264 h_i+1\n\nwhere \n    h_i\n is the height of the \n    i\n-th mountain. You don't want to\nwaste any of the mountains you modelled, so you have to use all of them. From\nall the arrangements that minimize \n    |h_1-h_n|\n, find one that is the most\ndifficult. If there are multiple orders that satisfy these requirements, you\nmay find any. Input The first line will contain a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test cases. Then \n    t\n test cases\nfollow. The first line of each test case contains a single integer \n    n\n\n(\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of mountains. The second\nline of each test case contains \n    n\n integers \n    h_1,\n    \u2026,h_n\n (\n    1\n    \n    \u2264 h_i \n    \u2264 10^9\n), where \n    h_i\n is the height of the \n    i\n-th\nmountain. It is guaranteed that the sum of \n    n\n over all test cases does\nnot exceed \n    2 \n    \u00b7 10^5\n. Output For each test case, output \n    n\n\nintegers \u2014 the given heights in an order that maximizes the difficulty score\namong all orders that minimize \n    |h_1-h_n|\n. If there are multiple orders\nthat satisfy these requirements, you may output any. Example Input 2 4 4 2 1 2\n2 3 1 Output 2 4 1 2 1 3 Note In the first test case: The player begins at\nheight \n    2\n, next going up to height \n    4\n increasing the difficulty by\n\n    1\n. After that he will go down to height \n    1\n and the difficulty\ndoesn't change because he is going downhill. Finally the player will go up to\nheight \n    2\n and the difficulty will increase by \n    1\n. The absolute\ndifference between the starting height and the end height is equal to \n    0\n\nand it's minimal. The difficulty is maximal. In the second test case: The\nplayer begins at height \n    1\n, next going up to height \n    3\n increasing\nthe difficulty by \n    1\n. The absolute difference between the starting height\nand the end height is equal to \n    2\n and it's minimal as they are the only\nheights. The difficulty is maximal.\n\n",
        "cf_contest_id": 1537,
        "cf_index": "C",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n4\r\n4 2 1 2\r\n2\r\n3 1\r\n",
                "2 4 1 2\r\n1 3\r\n"
            ]
        ],
        "private_cases": []
    }
]