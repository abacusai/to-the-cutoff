[
    {
        "name": "Art Union",
        "description": "A well-known art union called \"Kalevich is Alive!\" manufactures objects d'art\n(pictures). The union consists of n painters who decided to organize their\nwork as follows. Each painter uses only the color that was assigned to him.\nThe colors are distinct for all painters. Let's assume that the first painter\nuses color 1, the second one uses color 2, and so on. Each picture will\ncontain all these n colors. Adding the j-th color to the i-th picture takes\nthe j-th painter tij units of time. Order is important everywhere, so the\npainters' work is ordered by the following rules: Each picture is first\npainted by the first painter, then by the second one, and so on. That is,\nafter the j-th painter finishes working on the picture, it must go to the (j +\n1)-th painter (if j < n); each painter works on the pictures in some order:\nfirst, he paints the first picture, then he paints the second picture and so\non; each painter can simultaneously work on at most one picture. However, the\npainters don't need any time to have a rest; as soon as the j-th painter\nfinishes his part of working on the picture, the picture immediately becomes\navailable to the next painter. Given that the painters start working at time\n0, find for each picture the time when it is ready for sale. Input The first\nline of the input contains integers m, n (1 \u2264 m \u2264 50000, 1 \u2264 n \u2264 5), where m\nis the number of pictures and n is the number of painters. Then follow the\ndescriptions of the pictures, one per line. Each line contains n integers ti1,\nti2, ..., tin (1 \u2264 tij \u2264 1000), where tij is the time the j-th painter needs\nto work on the i-th picture. Output Print the sequence of m integers r1, r2,\n..., rm, where ri is the moment when the n-th painter stopped working on the\ni-th picture. Examples Input 5 1 1 2 3 4 5 Output 1 3 6 10 15 Input 4 2 2 5 3\n1 5 3 10 1 Output 7 8 13 21\n\n",
        "cf_contest_id": 416,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dp",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 1\r\n1\r\n2\r\n3\r\n4\r\n5\r\n",
                "1\r\n3\r\n6\r\n10\r\n15\r\n"
            ],
            [
                "4 2\r\n2 5\r\n3 1\r\n5 3\r\n10 1\r\n",
                "7\r\n8\r\n13\r\n21\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n66\r\n",
                "66\r\n"
            ],
            [
                "2 2\r\n1 1\r\n1 1\r\n",
                "2\r\n3\r\n"
            ],
            [
                "2 2\r\n10 1\r\n10 1\r\n",
                "11\r\n21\r\n"
            ],
            [
                "1 5\r\n1 95 44 14 35\r\n",
                "189\r\n"
            ],
            [
                "7 1\r\n80\r\n92\r\n24\r\n88\r\n40\r\n45\r\n7\r\n",
                "80\r\n172\r\n196\r\n284\r\n324\r\n369\r\n376\r\n"
            ],
            [
                "1 2\r\n51 44\r\n",
                "95\r\n"
            ],
            [
                "2 1\r\n19\r\n4\r\n",
                "19\r\n23\r\n"
            ],
            [
                "2 2\r\n1 10\r\n1 1\r\n",
                "11\r\n12\r\n"
            ],
            [
                "3 3\r\n3 9 4\r\n5 10 8\r\n4 4 7\r\n",
                "16\r\n30\r\n37\r\n"
            ],
            [
                "10 3\r\n6 10 3\r\n2 7 9\r\n10 4 7\r\n6 3 4\r\n6 2 6\r\n8 4 4\r\n5 9 8\r\n6 9 7\r\n2 7 10\r\n2 6 2\r\n",
                "19\r\n32\r\n39\r\n43\r\n49\r\n53\r\n61\r\n68\r\n78\r\n80\r\n"
            ]
        ]
    }
]