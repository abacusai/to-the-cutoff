[
    {
        "name": "Valera and Queries",
        "description": "Valera loves segments. He has recently come up with one interesting problem.\nThe Ox axis of coordinates has n segments, the i-th segment starts in position\nli and ends in position ri (we will mark it as [li, ri]). Your task is to\nprocess m queries, each consists of number cnti and a set of cnti coordinates\nof points located on the Ox axis. The answer to the query is the number of\nsegments, such that each of them contains at least one point from the query.\nSegment [l, r] contains point q, if l \u2264 q \u2264 r. Valera found the solution of\nthis problem too difficult. So he asked you to help him. Help Valera. Input\nThe first line contains two integers n, m (1 \u2264 n, m \u2264 3\u00b710^5) \u2014 the number of\nsegments on the axis of coordinates and the number of queries. Next n lines\ncontain the descriptions of the segments. The i-th line contains two positive\nintegers li, ri (1 \u2264 li \u2264 ri \u2264 10^6) \u2014 the borders of the i-th segment. Next m\nlines contain the description of the queries, one per line. Each line starts\nfrom integer cnti (1 \u2264 cnti \u2264 3\u00b710^5) \u2014 the number of points in the i-th\nquery. Then the line contains cnti distinct positive integers p1, p2, ...,\npcnti (1 \u2264 p1 < p2 < ... < pcnti \u2264 10^6) \u2014 the coordinates of points in the\ni-th query. It is guaranteed that the total number of points in all queries\ndoesn't exceed 3\u00b710^5. Output Print m non-negative integers, where the i-th\nnumber is the response to the i-th query. Examples Input 3 3 1 3 4 5 6 7 3 1 4\n7 2 4 5 1 8 Output 3 1 0\n\n",
        "cf_contest_id": 369,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3 3\r\n1 3\r\n4 5\r\n6 7\r\n3 1 4 7\r\n2 4 5\r\n1 8\r\n",
                "3\r\n1\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n172921 894619\r\n1 14141\r\n",
                "0\r\n"
            ],
            [
                "3 1\r\n439010 864662\r\n377278 743032\r\n771051 955458\r\n1 568232\r\n",
                "2\r\n"
            ],
            [
                "3 3\r\n328789 478281\r\n248154 348247\r\n820715 860013\r\n1 344703\r\n1 592310\r\n1 104937\r\n",
                "2\r\n0\r\n0\r\n"
            ],
            [
                "5 3\r\n529971 921435\r\n466874 801474\r\n178558 921765\r\n193565 251465\r\n346414 727740\r\n5 328292 498601 509140 588519 820032\r\n5 221904 249439 491524 570871 945281\r\n5 357080 543431 566949 932654 947658\r\n",
                "4\r\n5\r\n4\r\n"
            ],
            [
                "5 1\r\n678201 810289\r\n778357 940848\r\n778406 946358\r\n151271 684580\r\n203524 382911\r\n5 358312 424531 460539 542697 775332\r\n",
                "3\r\n"
            ],
            [
                "5 1\r\n862248 965768\r\n78738 994773\r\n236426 318177\r\n186078 241439\r\n76304 568725\r\n1 509307\r\n",
                "2\r\n"
            ],
            [
                "5 3\r\n547230 805495\r\n810625 899397\r\n203912 240535\r\n432981 477594\r\n229222 465101\r\n1 908682\r\n1 942879\r\n1 808024\r\n",
                "0\r\n0\r\n0\r\n"
            ],
            [
                "5 5\r\n643450 686584\r\n30981 862245\r\n68908 575075\r\n558374 713102\r\n480946 865118\r\n1 680156\r\n1 557501\r\n1 95807\r\n1 972121\r\n1 262787\r\n",
                "4\r\n3\r\n2\r\n0\r\n2\r\n"
            ],
            [
                "10 3\r\n172267 379903\r\n546621 772370\r\n581059 880021\r\n321531 376831\r\n229673 432639\r\n106645 948268\r\n855783 967973\r\n541573 920416\r\n7682 695665\r\n492612 836502\r\n1 873101\r\n1 818922\r\n1 198181\r\n",
                "4\r\n4\r\n3\r\n"
            ],
            [
                "10 3\r\n356907 564385\r\n519660 960519\r\n84077 747040\r\n374095 956206\r\n476778 728678\r\n278858 977832\r\n158558 723270\r\n130593 261834\r\n125493 250966\r\n307770 792762\r\n3 56100 382258 579673\r\n3 40029 266600 440635\r\n3 36944 414002 843837\r\n",
                "8\r\n6\r\n7\r\n"
            ],
            [
                "10 10\r\n366228 895993\r\n228160 722127\r\n400056 671311\r\n683144 765009\r\n196492 360241\r\n304744 916576\r\n450846 764055\r\n211322 967136\r\n696553 766931\r\n282539 425248\r\n1 130996\r\n1 682994\r\n1 183255\r\n1 165896\r\n1 396547\r\n1 558594\r\n1 894712\r\n1 945830\r\n1 842172\r\n1 704247\r\n",
                "0\r\n5\r\n0\r\n0\r\n5\r\n6\r\n3\r\n1\r\n3\r\n7\r\n"
            ],
            [
                "3 4\r\n1000000 1000000\r\n5000 5000\r\n1 1\r\n1 1\r\n1 1000000\r\n1 999999\r\n1 2\r\n",
                "1\r\n1\r\n0\r\n0\r\n"
            ],
            [
                "3 4\r\n1 1000000\r\n5000 5000\r\n1 1\r\n1 1\r\n1 1000000\r\n1 999999\r\n1 2\r\n",
                "2\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "1 1\r\n1000000 1000000\r\n1 1000000\r\n",
                "1\r\n"
            ],
            [
                "1 1\r\n1 1\r\n1 1\r\n",
                "1\r\n"
            ]
        ]
    }
]