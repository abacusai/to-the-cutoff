[
    {
        "name": "New Road Network",
        "description": "The king of some country \n    N\n decided to completely rebuild the road\nnetwork. There are \n    n\n people living in the country, they are enumerated\nfrom \n    1\n to \n    n\n. It is possible to construct a road between the house\nof any citizen \n    a\n to the house of any other citizen \n    b\n. There should\nnot be more than one road between any pair of citizens. The road network must\nbe connected, i.e. it should be possible to reach every citizen starting from\nanyone using roads. To save funds, it was decided to build exactly \n    n-1\n\nroad, so the road network should be a tree. However, it is not that easy as it\nsounds, that's why the king addressed you for help. There are \n    m\n secret\ncommunities in the country, each of them unites a non-empty subset of\ncitizens. The king does not want to conflict with any of the communities, so\nhe wants to build the network such that the houses of members of each society\nform a connected subtree in network. A set of vertices forms a connected\nsubtree if and only if the graph remains connected when we delete all the\nother vertices and all edges but ones that connect the vertices from the set.\nHelp the king to determine if it is possible to build the desired road\nnetwork, and if it is, build it. Input Each test consists of one or more test\ncases. The first line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    2000\n) \u2014 the number of test cases. The following lines describe the test\ncases, each in the following format. The first line contains two integers\n\n    n\n and \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 2000\n) \u2014 the number of citizens\nand the number of secret communities. The next \n    m\n lines contain the\ndescription of the communities. The \n    i\n-th of these lines contains a\nstring \n    s_i\n of length \n    n\n, consisting of characters '0' and '1'. The\ncitizen with number \n    j\n is a member of the \n    i\n-th community if and\nonly if \n    s_ij=1\n. It is guaranteed that the string \n    s_i\n\ncontains at least one character '1' for each \n    1 \n    \u2264 i \n    \u2264 m\n. It is\nguaranteed that the sum of \n    n\n for all test cases does not exceed\n\n    2000\n and the sum of \n    m\n for all test cases does not exceed\n\n    2000\n. Output Print the answer for all test cases in the order they are\ngiven in the input, each in the following format. If there is no way to build\nthe desired road network, print \"NO\" (without quotes). Otherwise in the first\nline print \"YES\" (without quotes). In the next \n    n-1\n lines print the\ndescription of the road network: each line should contain two integers \n    a\n\nand \n    b\n (\n    1 \n    \u2264 a, b \n    \u2264 n\n, \n    a \n    \u2260 b\n) that denote you\nbuild a road between houses of citizens \n    a\n and \n    b\n. The roads should\nform a connected tree, and each community should form a connected subtree.\nExample Input 2 4 3 0011 1110 0111 3 3 011 101 110 Output YES 1 3 2 3 3 4 NO\nNote In the first example you can build the following network: It is easy to\nsee that for each community all the houses of its members form a connected\nsubtree. For example, the \n    2\n-nd community unites the citizens \n    1\n,\n\n    2\n, \n    3\n. They form a connected subtree, because if we delete\neverything except the houses \n    1\n, \n    2\n, \n    3\n and the roads between\nthem, two roads will remain: between \n    1\n and \n    3\n and between \n    2\n\nand \n    3\n, forming a connected graph. There is no network in the second\nexample suitable for the king.\n\n",
        "cf_contest_id": 1054,
        "cf_index": "G",
        "cf_rating": 3300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n4 3\r\n0011\r\n1110\r\n0111\r\n3 3\r\n011\r\n101\r\n110\r\n",
                "YES\r\n2 3\r\n3 4\r\n1 2\r\nNO\r\n"
            ]
        ],
        "private_cases": []
    }
]