[
    {
        "name": "Geolocation",
        "description": "You are working for the Gryzzl company, headquartered in Pawnee, Indiana. The\nnew national park has been opened near Pawnee recently and you are to\nimplement a geolocation system, so people won't get lost. The concept you\ndeveloped is innovative and minimalistic. There will be \n    n\n antennas\nlocated somewhere in the park. When someone would like to know their current\nlocation, their Gryzzl hologram phone will communicate with antennas and\nobtain distances from a user's current location to all antennas. Knowing those\ndistances and antennas locations it should be easy to recover a user's\nlocation... Right? Well, almost. The only issue is that there is no way to\ndistinguish antennas, so you don't know, which distance corresponds to each\nantenna. Your task is to find a user's location given as little as all\nantennas location and an unordered multiset of distances. Input The first line\nof input contains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 10^5\n)\nwhich is the number of antennas. The following \n    n\n lines contain\ncoordinates of antennas, \n    i\n-th line contain two integers \n    x_i\n and\n\n    y_i\n (\n    0 \n    \u2264 x_i,y_i \n    \u2264 10^8\n). It is guaranteed that no two\nantennas coincide. The next line of input contains integer \n    m\n (\n    1\n    \n    \u2264 n \n    \u00b7 m \n    \u2264 10^5\n), which is the number of queries to\ndetermine the location of the user. Following \n    m\n lines contain \n    n\n\nintegers \n    0 \n    \u2264 d_1 \n    \u2264 d_2 \n    \u2264\n    \u2026\n    \u2264 d_n \n    \u2264 2 \n    \u00b7\n    10^16\n each. These integers form a multiset of squared distances from\nunknown user's location \n    (x;y)\n to antennas. For all test cases except the\nexamples it is guaranteed that all user's locations \n    (x;y)\n were chosen\nuniformly at random, independently from each other among all possible integer\nlocations having \n    0 \n    \u2264 x, y \n    \u2264 10^8\n. Output For each query output\n\n    k\n, the number of possible a user's locations matching the given input\nand then output the list of these locations in lexicographic order. It is\nguaranteed that the sum of all \n    k\n over all points does not exceed\n\n    10^6\n. Examples Input 3 0 0 0 1 1 0 1 1 1 2 Output 1 1 1 Input 4 0 0 0 1\n1 0 1 1 2 0 1 1 2 2 5 5 8 Output 4 0 0 0 1 1 0 1 1 4 -1 -1 -1 2 2 -1 2 2 Note\nAs you see in the second example, although initially a user's location is\npicked to have non-negative coordinates, you have to output all possible\ninteger locations.\n\n",
        "cf_contest_id": 1220,
        "cf_index": "G",
        "cf_rating": 3400,
        "difficulty": 0,
        "cf_tags": [
            "geometry"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n0 0\r\n0 1\r\n1 0\r\n1\r\n1 1 2\r\n",
                "1 1 1"
            ],
            [
                "4\r\n0 0\r\n0 1\r\n1 0\r\n1 1\r\n2\r\n0 1 1 2\r\n2 5 5 8\r\n",
                "4 0 0 0 1 1 0 1 1\r\n4 -1 -1 -1 2 2 -1 2 2"
            ]
        ],
        "private_cases": []
    }
]