[
    {
        "name": "Equal Binary Subsequences",
        "description": "Everool has a binary string \n    s\n of length \n    2n\n. Note that a binary\nstring is a string consisting of only characters \n    0\n and \n    1\n. He wants\nto partition \n    s\n into two disjoint equal subsequences. He needs your help\nto do it. You are allowed to do the following operation exactly once. You can\nchoose any subsequence (possibly empty) of \n    s\n and rotate it right by one\nposition. In other words, you can select a sequence of indices \n    b_1, b_2,\n    \n    \u2026, b_m\n, where \n    1 \n    \u2264 b_1 < b_2 < \n    \u2026 < b_m \n    \u2264 2n\n.\nAfter that you simultaneously set \n    \n\n    s_b_1 := s_b_m,\n\n    \n\n\n    \n\n    s_b_2 := s_b_1,\n\n    \n \n    \n\n    \u2026,\n\n    \n \n    \n\n    s_b_m :=\n    s_b_m-1.\n\n    \n Can you partition \n    s\n into two disjoint equal\nsubsequences after performing the allowed operation exactly once? A partition\nof \n    s\n into two disjoint equal subsequences \n    s^p\n and \n    s^q\n is two\nincreasing arrays of indices \n    p_1, p_2, \n    \u2026, p_n\n and \n    q_1, q_2,\n    \n    \u2026, q_n\n, such that each integer from \n    1\n to \n    2n\n is\nencountered in either \n    p\n or \n    q\n exactly once, \n    s^p = s_p_1\n    s_p_2\n    \u2026 s_p_n\n, \n    s^q = s_q_1 s_q_2\n    \u2026 s_q_n\n, and\n\n    s^p = s^q\n. If it is not possible to partition after performing any kind\nof operation, report \n    -1\n. If it is possible to do the operation and\npartition \n    s\n into two disjoint subsequences \n    s^p\n and \n    s^q\n, such\nthat \n    s^p = s^q\n, print elements of \n    b\n and indices of \n    s^p\n, i.\ne. the values \n    p_1, p_2, \n    \u2026, p_n\n. Input Each test contains multiple\ntest cases. The first line contains the number of test cases \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 10^5\n). Description of the test cases follows. The first line\nof each test case contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    10^5\n), where \n    2n\n is the length of the binary string. The second line\nof each test case contains the binary string \n    s\n of length \n    2n\n. It is\nguaranteed that the sum of \n    n\n over all test cases does not exceed\n\n    10^5\n. Output For each test case, follow the following output format. If\nthere is no solution, print \n    -1\n. Otherwise, In the first line, print an\ninteger \n    m\n (\n    0 \n    \u2264 m \n    \u2264 2n\n), followed by \n    m\n distinct\nindices \n    b_1\n, \n    b_2\n, ..., \n    b_m\n(in increasing order). In the\nsecond line, print \n    n\n distinct indices \n    p_1\n, \n    p_2\n, ...,\n\n    p_n\n (in increasing order). If there are multiple solutions, print any.\nExample Input 4 2 1010 3 100010 2 1111 2 1110 Output 0 1 2 2 3 5 1 2 5 3 2 3 4\n1 4 -1 Note In the first test case, \n    b\n is empty. So string \n    s\n is not\nchanged. Now \n    s^p = s_1 s_2 = \n    10\n, and \n    s^q = s_3s_4 =\n    \n    10\n. In the second test case, \n    b=[3,5]\n. Initially\n\n    s_3=\n    0\n, and \n    s_5=\n    1\n. On performing the\noperation, we simultaneously set \n    s_3=\n    1\n, and\n\n    s_5=\n    0\n. So \n    s\n is updated to 101000 on performing the\noperation. Now if we take characters at indices \n    [1,2,5]\n in \n    s^p\n, we\nget \n    s_1=\n    100\n. Also characters at indices \n    [3,4,6]\n are in\n\n    s^q\n. Thus \n    s^q=100\n. We are done as \n    s^p=s^q\n. In fourth test\ncase, it can be proved that it is not possible to partition the string after\nperforming any operation.\n\n",
        "cf_contest_id": 1736,
        "cf_index": "D",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "geometry",
            "greedy",
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2\r\n1010\r\n3\r\n100010\r\n2\r\n1111\r\n2\r\n1110\r\n",
                "2 2 3\r\n1 3\r\n2 2 5\r\n1 3 5\r\n0\r\n1 3\r\n-1\r\n"
            ]
        ],
        "private_cases": []
    }
]