[
    {
        "name": "Toy Sum",
        "description": "Little Chris is very keen on his toy blocks. His teacher, however, wants Chris\nto solve more problems, so he decided to play a trick on Chris. There are\nexactly s blocks in Chris's set, each block has a unique number from 1 to s.\nChris's teacher picks a subset of blocks X and keeps it to himself. He will\ngive them back only if Chris can pick such a non-empty subset Y from the\nremaining blocks, that the equality holds: \"Are you kidding me?\", asks\nChris.For example, consider a case where s = 8 and Chris's teacher took the\nblocks with numbers 1, 4 and 5. One way for Chris to choose a set is to pick\nthe blocks with numbers 3 and 6, see figure. Then the required sums would be\nequal: (1 - 1) + (4 - 1) + (5 - 1) = (8 - 3) + (8 - 6) = 7. However, now Chris\nhas exactly s = 10^6 blocks. Given the set X of blocks his teacher chooses,\nhelp Chris to find the required set Y! Input The first line of input contains\na single integer n (1 \u2264 n \u2264 5\u00b710^5), the number of blocks in the set X. The\nnext line contains n distinct space-separated integers x1, x2, ..., xn (1 \u2264 xi\n\u2264 10^6), the numbers of the blocks in X. Note: since the size of the input and\noutput could be very large, don't use slow output techniques in your language.\nFor example, do not use input and output streams (cin, cout) in C++. Output In\nthe first line of output print a single integer m (1 \u2264 m \u2264 10^6 - n), the\nnumber of blocks in the set Y. In the next line output m distinct space-\nseparated integers y1, y2, ..., ym (1 \u2264 yi \u2264 10^6), such that the required\nequality holds. The sets X and Y should not intersect, i.e. xi \u2260 yj for all i,\nj (1 \u2264 i \u2264 n; 1 \u2264 j \u2264 m). It is guaranteed that at least one solution always\nexists. If there are multiple solutions, output any of them. Examples Input 3\n1 4 5 Output 2 999993 1000000 Input 1 1 Output 1 1000000\n\n",
        "cf_contest_id": 405,
        "cf_index": "D",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 4 5\r\n",
                "3\r\n1000000 999997 999996 "
            ],
            [
                "1\r\n1\r\n",
                "1\r\n1000000 "
            ]
        ],
        "private_cases": [
            [
                "1\r\n1000000\r\n",
                "1\r\n1 "
            ],
            [
                "2\r\n2 999999\r\n",
                "2\r\n1 1000000 "
            ],
            [
                "9\r\n1 2 3 100 500000 500001 999901 999997 999999\r\n",
                "9\r\n1000000 999998 4 5 999996 6 999995 7 999994 "
            ],
            [
                "3\r\n999998 999999 1000000\r\n",
                "3\r\n3 2 1 "
            ],
            [
                "3\r\n1 2 3\r\n",
                "3\r\n1000000 999999 999998 "
            ],
            [
                "3\r\n5 345435 999996\r\n",
                "3\r\n654566 1 1000000 "
            ],
            [
                "6\r\n1 10 100 1000 10000 1000000\r\n",
                "6\r\n999991 999901 999001 990001 2 999999 "
            ],
            [
                "2\r\n1 1000000\r\n",
                "2\r\n2 999999 "
            ],
            [
                "2\r\n500000 500001\r\n",
                "2\r\n1 1000000 "
            ],
            [
                "4\r\n1 2 999999 1000000\r\n",
                "4\r\n3 999998 4 999997 "
            ],
            [
                "10\r\n63649 456347 779 458642 201571 534312 583774 283450 377377 79066\r\n",
                "10\r\n999222 936352 920935 798430 716551 622624 543654 541359 465689 416227 "
            ],
            [
                "10\r\n1 100000 199999 299998 399997 499996 599995 699994 799993 899992\r\n",
                "10\r\n1000000 900001 800002 700003 600004 500005 400006 300007 200008 100009 "
            ]
        ]
    }
]