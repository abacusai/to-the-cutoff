[
    {
        "name": "Subway",
        "description": "A subway scheme, classic for all Berland cities is represented by a set of n\nstations connected by n passages, each of which connects exactly two stations\nand does not pass through any others. Besides, in the classic scheme one can\nget from any station to any other one along the passages. The passages can be\nused to move in both directions. Between each pair of stations there is no\nmore than one passage. Berland mathematicians have recently proved a theorem\nthat states that any classic scheme has a ringroad. There can be only one\nringroad. In other words, in any classic scheme one can find the only scheme\nconsisting of stations (where any two neighbouring ones are linked by a\npassage) and this cycle doesn't contain any station more than once. This\ninvention had a powerful social impact as now the stations could be compared\naccording to their distance from the ringroad. For example, a citizen could\nsay \"I live in three passages from the ringroad\" and another one could reply\n\"you loser, I live in one passage from the ringroad\". The Internet soon got\nfilled with applications that promised to count the distance from the station\nto the ringroad (send a text message to a short number...). The Berland\ngovernment decided to put an end to these disturbances and start to control\nthe situation. You are requested to write a program that can determine the\nremoteness from the ringroad for each station by the city subway scheme. Input\nThe first line contains an integer n (3 \u2264 n \u2264 3000), n is the number of\nstations (and trains at the same time) in the subway scheme. Then n lines\ncontain descriptions of the trains, one per line. Each line contains a pair of\nintegers xi, yi (1 \u2264 xi, yi \u2264 n) and represents the presence of a passage from\nstation xi to station yi. The stations are numbered from 1 to n in an\narbitrary order. It is guaranteed that xi \u2260 yi and that no pair of stations\ncontain more than one passage. The passages can be used to travel both ways.\nIt is guaranteed that the given description represents a classic subway\nscheme. Output Print n numbers. Separate the numbers by spaces, the i-th one\nshould be equal to the distance of the i-th station from the ringroad. For the\nringroad stations print number 0. Examples Input 4 1 3 4 3 4 2 1 2 Output 0 0\n0 0 Input 6 1 2 3 4 6 4 2 3 1 3 3 5 Output 0 0 0 1 1 2\n\n",
        "cf_contest_id": 131,
        "cf_index": "D",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graphs"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 3\r\n4 3\r\n4 2\r\n1 2\r\n",
                "0 0 0 0\r\n"
            ],
            [
                "6\r\n1 2\r\n3 4\r\n6 4\r\n2 3\r\n1 3\r\n3 5\r\n",
                "0 0 0 1 1 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n1 2\r\n1 3\r\n2 3\r\n",
                "0 0 0\r\n"
            ],
            [
                "4\r\n3 1\r\n3 4\r\n2 1\r\n4 2\r\n",
                "0 0 0 0\r\n"
            ],
            [
                "4\r\n4 3\r\n1 3\r\n2 1\r\n2 3\r\n",
                "0 0 0 1\r\n"
            ],
            [
                "5\r\n2 5\r\n4 5\r\n4 3\r\n4 2\r\n1 4\r\n",
                "1 0 1 0 0\r\n"
            ],
            [
                "8\r\n1 2\r\n2 3\r\n3 1\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n6 8\r\n",
                "0 0 0 1 2 3 4 4\r\n"
            ],
            [
                "5\r\n1 3\r\n1 5\r\n4 2\r\n2 3\r\n5 2\r\n",
                "0 0 0 1 0\r\n"
            ],
            [
                "5\r\n4 1\r\n1 3\r\n5 3\r\n2 4\r\n5 2\r\n",
                "0 0 0 0 0\r\n"
            ],
            [
                "10\r\n8 2\r\n10 5\r\n9 5\r\n3 9\r\n4 7\r\n3 1\r\n7 2\r\n10 6\r\n7 8\r\n1 4\r\n",
                "2 0 3 1 5 7 0 0 4 6\r\n"
            ],
            [
                "10\r\n10 7\r\n1 5\r\n2 1\r\n4 1\r\n1 10\r\n3 1\r\n9 7\r\n1 8\r\n7 6\r\n7 1\r\n",
                "0 1 1 1 1 1 0 1 1 0\r\n"
            ],
            [
                "6\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n4 6\r\n",
                "3 2 1 0 0 0\r\n"
            ]
        ]
    }
]