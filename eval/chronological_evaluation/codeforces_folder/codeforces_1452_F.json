[
    {
        "name": "Divide Powers",
        "description": "You are given a multiset of powers of two. More precisely, for each \n    i\n\nfrom \n    0\n to \n    n\n exclusive you have \n    cnt_i\n elements equal to\n\n    2^i\n. In one operation, you can choose any one element \n    2^l > 1\n and\ndivide it into two elements \n    2^l - 1\n. You should perform \n    q\n\nqueries. Each query has one of two types: \"\n    1\n \n    pos\n \n    val\n\" \u2014\nassign \n    cnt_pos := val\n; \"\n    2\n \n    x\n \n    k\n\" \u2014 calculate the\nminimum number of operations you need to make at least \n    k\n elements with\nvalue lower or equal to \n    2^x\n. Note that all queries of the second type\ndon't change the multiset; that is, you just calculate the minimum number of\noperations, you don't perform them. Input The first line contains two integers\n\n    n\n and \n    q\n (\n    1 \n    \u2264 n \n    \u2264 30\n; \n    1 \n    \u2264 q \n    \u2264 2 \n    \u00b7\n    10^5\n) \u2014 the size of array \n    cnt\n and the number of queries. The second\nline contains \n    n\n integers \n    cnt_0, cnt_1, \n    \u2026, cnt_n - 1\n (\n    0\n    \n    \u2264 cnt_i \n    \u2264 10^6\n). Next \n    q\n lines contain queries: one per line.\nEach query has one of two types: \"\n    1\n \n    pos\n \n    val\n\" (\n    0 \n    \u2264 pos\n    < n\n; \n    0 \n    \u2264 val \n    \u2264 10^6\n); \"\n    2\n \n    x\n \n    k\n\" (\n    0 \n    \u2264 x\n    < n\n; \n    1 \n    \u2264 k \n    \u2264 10^15\n). It's guaranteed that there is at least\none query of the second type. Output For each query of the second type, print\nthe minimum number of operations you need to make at least \n    k\n elements\nwith a value lower or equal to \n    2^x\n or \n    -1\n if there is no way to do\nit. Example Input 6 11 0 1 0 0 1 0 2 1 5 2 4 18 1 1 0 2 2 5 2 0 17 1 0 3 2 1 2\n1 1 4 1 4 0 1 5 1 2 2 8 Output 4 16 4 -1 0 1\n\n",
        "cf_contest_id": 1452,
        "cf_index": "F",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 11\r\n0 1 0 0 1 0\r\n2 1 5\r\n2 4 18\r\n1 1 0\r\n2 2 5\r\n2 0 17\r\n1 0 3\r\n2 1 2\r\n1 1 4\r\n1 4 0\r\n1 5 1\r\n2 2 8\r\n",
                "4\r\n16\r\n4\r\n-1\r\n0\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "6 10\r\n1 3 3 3 3 0\r\n1 2 1\r\n2 5 6\r\n2 2 4\r\n2 4 174\r\n2 1 57\r\n2 3 187\r\n1 1 3\r\n1 4 2\r\n1 2 3\r\n2 4 118\r\n",
                "0\r\n0\r\n-1\r\n46\r\n-1\r\n-1\r\n"
            ],
            [
                "6 10\r\n1 3 0 0 1 1\r\n2 2 187\r\n1 5 1\r\n1 2 3\r\n1 5 3\r\n1 2 0\r\n1 0 3\r\n2 0 140\r\n2 1 43\r\n2 1 27\r\n1 0 0\r\n",
                "-1\r\n-1\r\n35\r\n20\r\n"
            ],
            [
                "6 10\r\n3 1 0 2 3 2\r\n1 1 1\r\n1 0 2\r\n1 2 3\r\n2 3 50\r\n1 2 1\r\n2 0 49\r\n1 1 2\r\n1 4 2\r\n1 1 3\r\n1 3 0\r\n",
                "37\r\n44\r\n"
            ]
        ]
    }
]