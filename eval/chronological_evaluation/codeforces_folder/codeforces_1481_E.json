[
    {
        "name": "Sorting Books",
        "description": "One day you wanted to read something, so you went to your bookshelf to grab\nsome book. But when you saw how messy the bookshelf was you decided to clean\nit up first. There are \n    n\n books standing in a row on the shelf, the\n\n    i\n-th book has color \n    a_i\n. You'd like to rearrange the books to make\nthe shelf look beautiful. The shelf is considered beautiful if all books of\nthe same color are next to each other. In one operation you can take one book\nfrom any position on the shelf and move it to the right end of the shelf. What\nis the minimum number of operations you need to make the shelf beautiful?\nInput The first line contains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 5\n    \n    \u00b7 10^5\n) \u2014 the number of books. The second line contains \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n) \u2014 the book\ncolors. Output Output the minimum number of operations to make the shelf\nbeautiful. Examples Input 5 1 2 2 1 3 Output 2 Input 5 1 2 2 1 1 Output 1 Note\nIn the first example, we have the bookshelf \n    [1, 2, 2, 1, 3]\n and can, for\nexample: take a book on position \n    4\n and move to the right end: we'll get\n\n    [1, 2, 2, 3, 1]\n; take a book on position \n    1\n and move to the right\nend: we'll get \n    [2, 2, 3, 1, 1]\n. In the second example, we can move the\nfirst book to the end of the bookshelf and get \n    [2,2,1,1,1]\n.\n\n",
        "cf_contest_id": 1481,
        "cf_index": "E",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 2 2 1 3\r\n",
                "2"
            ],
            [
                "5\r\n1 2 2 1 1\r\n",
                "1"
            ]
        ],
        "private_cases": [
            [
                "100\r\n7 4 5 5 10 10 5 8 5 7 4 5 4 6 8 8 2 6 3 3 10 7 10 8 6 2 7 3 9 7 7 2 4 5 2 4 9 5 10 1 10 5 10 4 1 3 4 2 6 9 9 9 10 6 2 5 6 1 8 10 4 10 3 4 10 5 5 4 10 4 5 3 7 10 2 7 3 6 9 6 1 6 5 5 4 6 6 4 4 1 5 1 6 6 6 8 8 6 2 6\r\n",
                "77"
            ],
            [
                "100\r\n82 51 81 14 37 17 78 92 64 15 8 86 89 8 87 77 66 10 15 12 100 25 92 47 21 78 20 63 13 49 41 36 41 79 16 87 87 69 3 76 80 60 100 49 70 59 72 8 38 71 45 97 71 14 76 54 81 4 59 46 39 29 92 3 49 22 53 99 59 52 74 31 92 43 42 23 44 9 82 47 7 40 12 9 3 55 37 85 46 22 84 52 98 41 21 77 63 17 62 91\r\n",
                "60"
            ]
        ]
    }
]