[
    {
        "name": "Chips Puzzle",
        "description": "Egor came up with a new chips puzzle and suggests you to play. The puzzle has\nthe form of a table with \n    n\n rows and \n    m\n columns, each cell can\ncontain several black or white chips placed in a row. Thus, the state of the\ncell can be described by a string consisting of characters '0' (a white chip)\nand '1' (a black chip), possibly empty, and the whole puzzle can be described\nas a table, where each cell is a string of zeros and ones. The task is to get\nfrom one state of the puzzle some other state. To do this, you can use the\nfollowing operation. select 2 different cells \n    (x_1, y_1)\n and \n    (x_2,\n    y_2)\n: the cells must be in the same row or in the same column of the table,\nand the string in the cell \n    (x_1, y_1)\n must be non-empty; in one\noperation you can move the last character of the string at the cell \n    (x_1,\n    y_1)\n to the beginning of the string at the cell \n    (x_2, y_2)\n. Egor came\nup with two states of the table for you: the initial state and the final one.\nIt is guaranteed that the number of zeros and ones in the tables are the same.\nYour goal is with several operations get the final state from the initial\nstate. Of course, Egor does not want the number of operations to be very\nlarge. Let's denote as \n    s\n the number of characters in each of the tables\n(which are the same). Then you should use no more than \n    4 \n    \u00b7 s\n\noperations. Input The first line contains two integers \n    n\n and \n    m\n\n(\n    2 \n    \u2264 n, m \n    \u2264 300\n) \u2014 the number of rows and columns of the\ntable, respectively. The following \n    n\n lines describe the initial state of\nthe table in the following format: each line contains \n    m\n non-empty\nstrings consisting of zeros and ones. In the \n    i\n-th of these lines, the\n\n    j\n-th string is the string written at the cell \n    (i, j)\n. The rows are\nenumerated from \n    1\n to \n    n\n, the columns are numerated from \n    1\n to\n\n    m\n. The following \n    n\n lines describe the final state of the table in\nthe same format. Let's denote the total length of strings in the initial state\nas \n    s\n. It is guaranteed that \n    s \n    \u2264 100\n      000\n. It is also\nguaranteed that the numbers of zeros and ones coincide in the initial and\nfinal states. Output On the first line print \n    q\n \u2014 the number of\noperations used. You should find such a solution that \n    0 \n    \u2264 q \n    \u2264 4\n    \n    \u00b7 s\n. In each the next \n    q\n lines print 4 integers \n    x_1\n,\n\n    y_1\n, \n    x_2\n, \n    y_2\n. On the \n    i\n-th line you should print the\ndescription of the \n    i\n-th operation. These integers should satisfy the\nconditions \n    1 \n    \u2264 x_1, x_2 \n    \u2264 n\n, \n    1 \n    \u2264 y_1, y_2 \n    \u2264 m\n,\n\n    (x_1, y_1) \n    \u2260 (x_2, y_2)\n, \n    x_1 = x_2\n or \n    y_1 = y_2\n. The\nstring in the cell \n    (x_1, y_1)\n should be non-empty. This sequence of\noperations should transform the initial state of the table to the final one.\nWe can show that a solution exists. If there is more than one solution, find\nany of them. Examples Input 2 2 00 10 01 11 10 01 10 01 Output 4 2 1 1 1 1 1 1\n2 1 2 2 2 2 2 2 1 Input 2 3 0 0 0 011 1 0 0 0 1 011 0 0 Output 4 2 2 1 2 1 2 2\n2 1 2 1 3 1 3 1 2 Note Consider the first example. The current state of the\ntable: 00 10 01 11 The first operation. The cell \n    (2, 1)\n contains the\nstring \n    01\n. Applying the operation to cells \n    (2, 1)\n and \n    (1,\n    1)\n, we move the \n    1\n from the end of the string \n    01\n to the\nbeginning of the string \n    00\n and get the string \n    100\n. The current\nstate of the table: 100 10 0 11 The second operation. The cell \n    (1, 1)\n\ncontains the string \n    100\n. Applying the operation to cells \n    (1, 1)\n\nand \n    (1, 2)\n, we move the \n    0\n from the end of the string \n    100\n to\nthe beginning of the string \n    10\n and get the string \n    010\n. The current\nstate of the table: 10 010 0 11 The third operation. The cell \n    (1, 2)\n\ncontains the string \n    010\n. Applying the operation to cells \n    (1, 2)\n\nand \n    (2, 2)\n, we move the \n    0\n from the end of the string \n    010\n to\nthe beginning of the string \n    11\n and get the string \n    011\n. The current\nstate of the table: 10 01 0 011 The fourth operation. The cell \n    (2, 2)\n\ncontains the string \n    011\n. Applying the operation to cells \n    (2, 2)\n\nand \n    (2, 1)\n, we move the \n    1\n from the end of the string \n    011\n to\nthe beginning of the string \n    0\n and get the string \n    10\n. The current\nstate of the table: 10 01 10 01 It's easy to see that we have reached the\nfinal state of the table.\n\n",
        "cf_contest_id": 1054,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 2\r\n00 10\r\n01 11\r\n10 01\r\n10 01\r\n",
                "24\r\n1 1 1 2\r\n1 1 1 2\r\n1 2 1 1\r\n1 2 2 2\r\n2 1 2 2\r\n2 1 1 1\r\n2 2 2 1\r\n2 2 2 1\r\n1 2 1 1\r\n1 2 1 1\r\n2 2 2 1\r\n2 2 2 1\r\n2 1 2 2\r\n2 1 2 2\r\n1 1 1 2\r\n1 1 1 2\r\n2 1 2 2\r\n1 2 2 2\r\n1 1 2 1\r\n2 2 2 1\r\n2 2 1 2\r\n1 1 1 2\r\n1 2 1 1\r\n2 1 1 1\r\n"
            ],
            [
                "2 3\r\n0 0 0\r\n011 1 0\r\n0 0 1\r\n011 0 0\r\n",
                "26\r\n1 1 1 2\r\n1 2 1 1\r\n1 3 1 1\r\n2 1 2 2\r\n2 1 2 2\r\n2 1 1 1\r\n2 2 2 1\r\n2 3 1 3\r\n1 2 1 1\r\n1 3 1 1\r\n2 2 2 1\r\n2 2 2 1\r\n2 1 2 3\r\n2 1 2 2\r\n2 1 2 2\r\n1 1 1 3\r\n1 1 1 2\r\n1 1 1 2\r\n1 3 2 3\r\n1 2 2 2\r\n2 2 2 1\r\n2 2 2 1\r\n1 1 2 1\r\n2 3 1 3\r\n1 1 1 2\r\n1 2 1 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 2\r\n0 1\r\n1 0\r\n0 1\r\n1 0\r\n",
                "16\r\n1 1 1 2\r\n1 2 2 2\r\n2 1 2 2\r\n2 2 1 2\r\n1 2 1 1\r\n1 2 1 1\r\n2 2 2 1\r\n2 2 2 1\r\n2 1 2 2\r\n2 1 2 2\r\n1 1 1 2\r\n1 1 1 2\r\n1 2 2 2\r\n2 2 2 1\r\n2 2 1 2\r\n1 2 1 1\r\n"
            ],
            [
                "2 2\r\n1 1\r\n0 0\r\n0 1\r\n1 0\r\n",
                "14\r\n1 1 2 1\r\n1 2 2 2\r\n2 1 1 1\r\n2 2 1 2\r\n1 2 1 1\r\n2 2 2 1\r\n2 1 2 2\r\n2 1 2 2\r\n1 1 1 2\r\n1 1 1 2\r\n1 2 2 2\r\n2 2 2 1\r\n2 2 1 2\r\n1 2 1 1\r\n"
            ],
            [
                "2 2\r\n0 1\r\n0 1\r\n0 1\r\n0 1\r\n",
                "12\r\n1 1 1 2\r\n1 2 2 2\r\n2 1 1 1\r\n2 2 2 1\r\n1 2 1 1\r\n2 2 2 1\r\n2 1 2 2\r\n1 1 1 2\r\n2 1 2 2\r\n1 1 2 1\r\n2 2 1 2\r\n1 2 1 1\r\n"
            ],
            [
                "2 2\r\n1 0\r\n1 1\r\n1 1\r\n1 0\r\n",
                "12\r\n1 1 2 1\r\n1 2 1 1\r\n2 1 2 2\r\n2 2 2 1\r\n2 2 2 1\r\n2 1 2 2\r\n2 1 2 2\r\n1 1 1 2\r\n1 2 2 2\r\n2 2 2 1\r\n2 2 1 2\r\n2 1 1 1\r\n"
            ]
        ]
    }
]