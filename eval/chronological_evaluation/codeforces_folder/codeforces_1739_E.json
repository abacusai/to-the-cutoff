[
    {
        "name": "Cleaning Robot",
        "description": "Consider a hallway, which can be represented as the matrix with \n    2\n rows\nand \n    n\n columns. Let's denote the cell on the intersection of the\n\n    i\n-th row and the \n    j\n-th column as \n    (i, j)\n. The distance between\nthe cells \n    (i_1, j_1)\n and \n    (i_2, j_2)\n is \n    |i_1 - i_2| + |j_1 -\n    j_2|\n. There is a cleaning robot in the cell \n    (1, 1)\n. Some cells of the\nhallway are clean, other cells are dirty (the cell with the robot is clean).\nYou want to clean the hallway, so you are going to launch the robot to do\nthis. After the robot is launched, it works as follows. While at least one\ncell is dirty, the robot chooses the closest (to its current cell) cell among\nthose which are dirty, moves there and cleans it (so the cell is no longer\ndirty). After cleaning a cell, the robot again finds the closest dirty cell to\nits current cell, and so on. This process repeats until the whole hallway is\nclean. However, there is a critical bug in the robot's program. If at some\nmoment, there are multiple closest (to the robot's current position) dirty\ncells, the robot malfunctions. You want to clean the hallway in such a way\nthat the robot doesn't malfunction. Before launching the robot, you can clean\nsome (possibly zero) of the dirty cells yourself. However, you don't want to\ndo too much dirty work yourself while you have this nice, smart (yet buggy)\nrobot to do this. Note that you cannot make a clean cell dirty. Calculate the\nmaximum possible number of cells you can leave dirty before launching the\nrobot, so that it doesn't malfunction. Input The first line contains one\ninteger \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of columns\nin the hallway. Then two lines follow, denoting the \n    1\n-st and the\n\n    2\n-nd row of the hallway. These lines contain \n    n\n characters each,\nwhere 0 denotes a clean cell and 1 denotes a dirty cell. The starting cell of\nthe robot \n    (1, 1)\n is clean. Output Print one integer \u2014 the maximum\npossible number of cells you can leave dirty before launching the robot, so\nthat it doesn't malfunction. Examples Input 2 01 11 Output 2 Input 2 01 01\nOutput 2 Input 4 0101 1011 Output 4 Input 4 0000 0000 Output 0 Input 5 00011\n10101 Output 4 Input 6 011111 111111 Output 8 Input 10 0101001010 1010100110\nOutput 6 Note In the first example, you can clean the cell \n    (1, 2)\n, so\nthe path of the robot is \n    (1, 1) \n    \u2192 (2, 1) \n    \u2192 (2,\n    2)\n. In the second example, you can leave the hallway as it is, so the path\nof the robot is \n    (1, 1) \n    \u2192 (1, 2) \n    \u2192 (2, 2)\n. In the\nthird example, you can clean the cell \n    (1, 2)\n, so the path of the robot\nis \n    (1, 1) \n    \u2192 (2, 1) \n    \u2192 (2, 3) \n    \u2192 (2, 4)\n    \n    \u2192 (1, 4)\n. In the fourth example, the hallway is already clean.\nMaybe you have launched the robot earlier?\n\n",
        "cf_contest_id": 1739,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "dp"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "2\r\n01\r\n11\r\n",
                "2"
            ],
            [
                "2\r\n01\r\n01\r\n",
                "2"
            ],
            [
                "4\r\n0101\r\n1011\r\n",
                "4"
            ],
            [
                "4\r\n0000\r\n0000\r\n",
                "0"
            ],
            [
                "5\r\n00011\r\n10101\r\n",
                "4"
            ],
            [
                "6\r\n011111\r\n111111\r\n",
                "8"
            ],
            [
                "10\r\n0101001010\r\n1010100110\r\n",
                "6"
            ]
        ],
        "private_cases": [
            [
                "20\r\n00111010000011110111\r\n01101100000111101000\r\n",
                "15"
            ],
            [
                "78\r\n000000000000000000000010000000000000000000000000000000000000000000000000000110\r\n100000000000000000000000000000000000000000000000000000000000000000000000001101\r\n",
                "6"
            ]
        ]
    }
]