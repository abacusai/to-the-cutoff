[
    {
        "name": "Wizards and Minimal Spell",
        "description": "Let's dive into one of the most interesting areas of magic \u2014 writing spells.\nLearning this exciting but challenging science is very troublesome, so now you\nwill not learn the magic words, but only get to know the basic rules of\nwriting spells. Each spell consists of several lines. The line, whose first\nnon-space character is character \"#\" is an amplifying line and it is\nresponsible for spell power. The remaining lines are common, and determine the\neffect of the spell. You came across the text of some spell. Spell was too\nlong, so you cannot understand its meaning. So you want to make it as short as\npossible without changing the meaning. The only way to shorten a spell that\nyou know is the removal of some spaces and line breaks. We know that when it\ncomes to texts of spells, the spaces carry meaning only in the amplifying\nlines, so we should remove all spaces in other lines. Newlines also do not\nmatter, unless any of the two separated lines is amplifying. Thus, if two\nconsecutive lines are not amplifying, they need to be joined into one (i.e. we\nshould concatenate the second line to the first one). Removing spaces in\namplifying lines and concatenating the amplifying lines to anything is\nforbidden. Note that empty lines must be processed just like all the others:\nthey must be joined to the adjacent non-amplifying lines, or preserved in the\noutput, if they are surrounded with amplifying lines on both sides (i.e. the\nline above it, if there is one, is amplifying, and the line below it, if there\nis one, is amplifying too). For now those are the only instructions for\nremoving unnecessary characters that you have to follow (oh yes, a newline is\na character, too). The input contains the text of the spell, which should be\nreduced. Remove the extra characters and print the result to the output. Input\nThe input contains multiple lines. All characters in the lines have codes from\n32 to 127 (inclusive). Please note that the lines may begin with or end with\none or more spaces. The size of the input does not exceed 1048576 ( = 2^20)\nbytes. Newlines are included in this size. In the Windows operating system\nused on the testing computer, a newline is a sequence of characters with codes\n#13#10. It is guaranteed that after each line of input there is a newline. In\nparticular, the input ends with a newline. Note that the newline is the end of\nthe line, and not the beginning of the next one. It is guaranteed that the\ninput contains at least one character other than a newline. It is recommended\nto organize the input-output line by line, in this case the newlines will be\nprocessed correctly by the language means. Output Print the text of the spell\nwhere all extra characters are deleted. Please note that each output line\nshould be followed by a newline. Please be careful: your answers will be\nvalidated by comparing them to the jury's answer byte-by-byte. So, all spaces\nand newlines matter. Examples Input # include  using namespace std; int main (\n) puts(\"Hello # World\"); # #  Output # include\nusingnamespacestd;intmain()puts(\"Hello#World\");# #  Input # # Output # #\nNote In the first sample the amplifying lines are lines 1 and 7. So, lines 2\nto 6 are concatenated to each other, all spaces are deleted from them. In the\nsecond sample the amplifying lines are lines 1 and 3. So, no lines are\nconcatenated to each other.\n\n",
        "cf_contest_id": 168,
        "cf_index": "B",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "   #   include <cstdio>\r\n\r\nusing namespace std;\r\n\r\nint main     (   ){\r\nputs(\"Hello # World\"); #\r\n#\r\n}\r\n",
                "   #   include <cstdio>\r\nusingnamespacestd;intmain(){puts(\"Hello#World\");#\r\n#\r\n}\r\n"
            ],
            [
                "#\r\n\r\n#\r\n",
                "#\r\n\r\n#\r\n"
            ]
        ],
        "private_cases": [
            [
                "\r\n#\r\n  \r\n#\r\n",
                "\r\n#\r\n\r\n#\r\n"
            ],
            [
                "#a\r\n#a\r\n\r\n#a\r\n\r\n\r\n#a\r\n \r\n#a\r\n \r\n\r\n#a\r\n\r\n \r\n#a\r\n \r\n \r\n#a\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
                "#a\r\n#a\r\n\r\n#a\r\n\r\n#a\r\n\r\n#a\r\n\r\n#a\r\n\r\n#a\r\n\r\n#a\r\n\r\n"
            ],
            [
                "     #        a          \r\n     #       a        \r\n\r\n          #         a               \r\n\r\n\r\n         #        a              \r\n \r\n   #         a         \r\n \r\n\r\n        #           a          \r\n\r\n \r\n     #            a\r\n \r\n \r\n #                    a             \r\n\r\n\r\n               \r\n\r\n         \r\n             \r\n",
                "     #        a          \r\n     #       a        \r\n\r\n          #         a               \r\n\r\n         #        a              \r\n\r\n   #         a         \r\n\r\n        #           a          \r\n\r\n     #            a\r\n\r\n #                    a             \r\n\r\n"
            ],
            [
                "fdg\r\n",
                "fdg\r\n"
            ],
            [
                "abc\r\n\r\n.\r\n\r\nabc\r\n\r\n#\r\nabc\r\nabc\r\n#\r\n",
                "abc.abc\r\n#\r\nabcabc\r\n#\r\n"
            ],
            [
                "#\r\n\r\n#\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
                "#\r\n\r\n#\r\n\r\n"
            ]
        ]
    }
]