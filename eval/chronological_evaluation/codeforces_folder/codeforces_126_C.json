[
    {
        "name": "E-reader Display",
        "description": "After years of hard work scientists invented an absolutely new e-reader\ndisplay. The new display has a larger resolution, consumes less energy and its\nproduction is cheaper. And besides, one can bend it. The only inconvenience is\nhighly unusual management. For that very reason the developers decided to\nleave the e-readers' software to programmers. The display is represented by n\n\u00d7 n square of pixels, each of which can be either black or white. The display\nrows are numbered with integers from 1 to n upside down, the columns are\nnumbered with integers from 1 to n from the left to the right. The display can\nperform commands like \"x, y\". When a traditional display fulfills such\ncommand, it simply inverts a color of (x, y), where x is the row number and y\nis the column number. But in our new display every pixel that belongs to at\nleast one of the segments (x, x) - (x, y) and (y, y) - (x, y) (both ends of\nboth segments are included) inverts a color. For example, if initially a\ndisplay 5 \u00d7 5 in size is absolutely white, then the sequence of commands (1,\n4), (3, 5), (5, 1), (3, 3) leads to the following changes: You are an e-reader\nsoftware programmer and you should calculate minimal number of commands needed\nto display the picture. You can regard all display pixels as initially white.\nInput The first line contains number n (1 \u2264 n \u2264 2000). Next n lines contain n\ncharacters each: the description of the picture that needs to be shown. \"0\"\nrepresents the white color and \"1\" represents the black color. Output Print\none integer z \u2014 the least number of commands needed to display the picture.\nExamples Input 5 01110 10010 10001 10011 11110 Output 4\n\n",
        "cf_contest_id": 126,
        "cf_index": "C",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n01110\r\n10010\r\n10001\r\n10011\r\n11110\r\n",
                "4\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n0000\r\n0111\r\n0001\r\n0001\r\n",
                "1\r\n"
            ],
            [
                "6\r\n100000\r\n010000\r\n001000\r\n000100\r\n000000\r\n000001\r\n",
                "5\r\n"
            ],
            [
                "10\r\n0000000000\r\n0000110000\r\n1001000000\r\n1000011110\r\n1011111101\r\n1011110011\r\n1011000111\r\n1011000001\r\n1111000010\r\n0000111110\r\n",
                "20\r\n"
            ],
            [
                "1\r\n0\r\n",
                "0\r\n"
            ],
            [
                "1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "2\r\n00\r\n00\r\n",
                "0\r\n"
            ],
            [
                "2\r\n10\r\n00\r\n",
                "1\r\n"
            ],
            [
                "2\r\n11\r\n00\r\n",
                "2\r\n"
            ],
            [
                "2\r\n11\r\n10\r\n",
                "3\r\n"
            ],
            [
                "2\r\n11\r\n11\r\n",
                "4\r\n"
            ],
            [
                "3\r\n000\r\n000\r\n000\r\n",
                "0\r\n"
            ],
            [
                "3\r\n011\r\n110\r\n001\r\n",
                "5\r\n"
            ],
            [
                "3\r\n001\r\n100\r\n101\r\n",
                "8\r\n"
            ],
            [
                "4\r\n1001\r\n0000\r\n1001\r\n0110\r\n",
                "10\r\n"
            ],
            [
                "5\r\n01010\r\n01101\r\n11110\r\n00111\r\n10100\r\n",
                "22\r\n"
            ],
            [
                "6\r\n110000\r\n000010\r\n001011\r\n011011\r\n100001\r\n111000\r\n",
                "13\r\n"
            ],
            [
                "7\r\n0000010\r\n0100101\r\n0010011\r\n0111111\r\n0100000\r\n0110010\r\n0000101\r\n",
                "19\r\n"
            ],
            [
                "10\r\n0000000000\r\n0000000000\r\n0000000000\r\n0000000000\r\n0000000000\r\n0000000000\r\n0000000000\r\n0000000000\r\n0000000000\r\n0000000000\r\n",
                "0\r\n"
            ],
            [
                "10\r\n1111100000\r\n0010100000\r\n0110111000\r\n0000001000\r\n1011001010\r\n0010100001\r\n0010111000\r\n0011001010\r\n0000110010\r\n0000001100\r\n",
                "20\r\n"
            ],
            [
                "10\r\n1100011000\r\n0000101000\r\n1001000011\r\n0000100010\r\n1101010011\r\n1100100101\r\n1000011101\r\n1001110011\r\n1110111100\r\n1000111100\r\n",
                "40\r\n"
            ],
            [
                "10\r\n1100111010\r\n1000011011\r\n0110000000\r\n1001111011\r\n0011011010\r\n1100001001\r\n0011010110\r\n1100011110\r\n0000101011\r\n1110101011\r\n",
                "75\r\n"
            ],
            [
                "10\r\n1101010101\r\n1110101010\r\n0111010101\r\n1011101010\r\n0101110101\r\n1010111010\r\n0101011101\r\n1010101110\r\n0101010111\r\n1010101011\r\n",
                "100\r\n"
            ]
        ]
    }
]