[
    {
        "name": "Mercenaries",
        "description": "Polycarp plays a (yet another!) strategic computer game. In this game, he\nleads an army of mercenaries. Polycarp wants to gather his army for a quest.\nThere are \n    n\n mercenaries for hire, and the army should consist of some\nsubset of them. The \n    i\n-th mercenary can be chosen if the resulting number\nof chosen mercenaries is not less than \n    l_i\n (otherwise he deems the quest\nto be doomed) and not greater than \n    r_i\n (he doesn't want to share the\ntrophies with too many other mercenaries). Furthermore, \n    m\n pairs of\nmercenaries hate each other and cannot be chosen for the same quest. How many\nnon-empty subsets does Polycarp need to consider? In other words, calculate\nthe number of non-empty subsets of mercenaries such that the size of this\nsubset belongs to \n    [l_i, r_i]\n for each chosen mercenary, and there are no\ntwo mercenaries in the subset that hate each other. The answer may be large,\nso calculate it modulo \n    998244353\n. Input The first line contains two\nintegers \n    n\n and \n    m\n (\n    1 \n    \u2264 n \n    \u2264 3 \n    \u00b7 10^5\n, \n    0 \n    \u2264\n    m \n    \u2264\n    min(20, \n    n(n-1)2)\n) \u2014 the number of mercenaries and\nthe number of pairs of mercenaries that hate each other. Then \n    n\n lines\nfollow, the \n    i\n-th of them contains two integers \n    l_i\n and \n    r_i\n\n(\n    1 \n    \u2264 l_i \n    \u2264 r_i \n    \u2264 n\n). Then \n    m\n lines follow, the\n\n    i\n-th of them contains two integers \n    a_i\n and \n    b_i\n (\n    1 \n    \u2264\n    a_i < b_i \n    \u2264 n\n) denoting that the mercenaries \n    a_i\n and \n    b_i\n\nhate each other. There are no two equal pairs in this list. Output Print one\ninteger \u2014 the number of non-empty subsets meeting the constraints, taken\nmodulo \n    998244353\n. Examples Input 3 0 1 1 2 3 1 3 Output 3 Input 3 1 1 1\n2 3 1 3 2 3 Output 2\n\n",
        "cf_contest_id": 1400,
        "cf_index": "G",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "combinatorics",
            "dp",
            "dsu",
            "math",
            "two pointers"
        ],
        "time_limit_seconds": 7.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3 0\r\n1 1\r\n2 3\r\n1 3\r\n",
                "3\r\n"
            ],
            [
                "3 1\r\n1 1\r\n2 3\r\n1 3\r\n2 3\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 0\r\n1 4\r\n4 6\r\n4 7\r\n3 10\r\n3 10\r\n4 9\r\n3 7\r\n3 5\r\n1 7\r\n1 5\r\n",
                "384\r\n"
            ],
            [
                "10 10\r\n6 9\r\n6 7\r\n1 6\r\n10 10\r\n5 9\r\n3 9\r\n2 10\r\n5 7\r\n9 10\r\n5 10\r\n9 10\r\n2 6\r\n1 7\r\n3 8\r\n6 10\r\n5 9\r\n1 5\r\n1 4\r\n5 6\r\n7 8\r\n",
                "3\r\n"
            ],
            [
                "10 20\r\n2 7\r\n6 6\r\n8 9\r\n3 6\r\n6 10\r\n8 9\r\n1 1\r\n7 10\r\n1 7\r\n5 10\r\n6 7\r\n7 9\r\n4 9\r\n1 2\r\n9 10\r\n5 9\r\n1 6\r\n6 9\r\n2 7\r\n4 5\r\n2 6\r\n5 10\r\n4 6\r\n1 10\r\n3 6\r\n4 7\r\n3 9\r\n3 10\r\n1 5\r\n3 8\r\n",
                "3\r\n"
            ],
            [
                "10 20\r\n5 5\r\n3 4\r\n2 3\r\n4 8\r\n1 9\r\n9 10\r\n6 8\r\n1 7\r\n2 9\r\n3 4\r\n1 8\r\n1 9\r\n9 10\r\n2 7\r\n4 10\r\n4 9\r\n7 8\r\n3 10\r\n7 9\r\n3 6\r\n4 6\r\n2 4\r\n2 8\r\n2 3\r\n3 7\r\n1 3\r\n1 10\r\n1 2\r\n2 10\r\n4 8\r\n",
                "14\r\n"
            ],
            [
                "20 20\r\n2 13\r\n10 11\r\n7 20\r\n6 13\r\n2 7\r\n1 20\r\n3 15\r\n7 11\r\n1 13\r\n9 14\r\n11 18\r\n1 16\r\n3 13\r\n4 7\r\n10 16\r\n12 14\r\n3 17\r\n12 15\r\n8 14\r\n6 11\r\n9 16\r\n9 12\r\n1 9\r\n8 13\r\n7 11\r\n12 18\r\n12 13\r\n7 8\r\n1 12\r\n8 12\r\n13 16\r\n1 11\r\n8 11\r\n8 18\r\n1 16\r\n7 13\r\n9 11\r\n1 18\r\n12 16\r\n9 18\r\n",
                "505\r\n"
            ],
            [
                "20 20\r\n13 17\r\n13 19\r\n10 14\r\n15 17\r\n8 11\r\n7 13\r\n16 17\r\n6 10\r\n6 19\r\n1 14\r\n14 19\r\n1 14\r\n6 8\r\n3 18\r\n8 13\r\n10 11\r\n2 3\r\n13 13\r\n5 17\r\n2 6\r\n6 13\r\n3 17\r\n2 5\r\n8 18\r\n9 14\r\n7 12\r\n2 16\r\n7 20\r\n4 14\r\n4 8\r\n13 19\r\n14 19\r\n10 16\r\n10 17\r\n2 13\r\n11 14\r\n2 11\r\n2 4\r\n11 17\r\n10 12\r\n",
                "11\r\n"
            ],
            [
                "1 0\r\n1 1\r\n",
                "1\r\n"
            ],
            [
                "2 1\r\n1 2\r\n1 2\r\n1 2\r\n",
                "2\r\n"
            ],
            [
                "2 0\r\n2 2\r\n1 2\r\n",
                "2\r\n"
            ],
            [
                "30 20\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n2 3\r\n4 5\r\n5 6\r\n7 8\r\n8 9\r\n10 11\r\n11 12\r\n13 14\r\n14 15\r\n16 17\r\n17 18\r\n19 20\r\n20 21\r\n22 23\r\n23 24\r\n25 26\r\n26 27\r\n28 29\r\n29 30\r\n",
                "445\r\n"
            ]
        ]
    }
]