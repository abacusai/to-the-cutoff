[
    {
        "name": "Yet Another Array Restoration",
        "description": "We have a secret array. You don't know this array and you have to restore it.\nHowever, you know some facts about this array: The array consists of \n    n\n\ndistinct positive (greater than \n    0\n) integers. The array contains two\nelements \n    x\n and \n    y\n (these elements are known for you) such that \n    x\n    < y\n. If you sort the array in increasing order (such that \n    a_1 < a_2 <\n    \n    \u2026 < a_n\n), differences between all adjacent (consecutive) elements\nare equal (i.e. \n    a_2 - a_1 = a_3 - a_2 = \n    \u2026 = a_n - a_n-1)\n. It\ncan be proven that such an array always exists under the constraints given\nbelow. Among all possible arrays that satisfy the given conditions, we ask you\nto restore one which has the minimum possible maximum element. In other words,\nyou have to minimize \n    max(a_1, a_2, \n    \u2026, a_n)\n. You have to answer\n\n    t\n independent test cases. Input The first line of the input contains one\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test cases. Then\n\n    t\n test cases follow. The only line of the test case contains three\nintegers \n    n\n, \n    x\n and \n    y\n (\n    2 \n    \u2264 n \n    \u2264 50\n; \n    1 \n    \u2264 x\n    < y \n    \u2264 50\n) \u2014 the length of the array and two elements that are present\nin the array, respectively. Output For each test case, print the answer:\n\n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n),\nwhere \n    a_i\n is the \n    i\n-th element of the required array. If there are\nseveral answers, you can print any (it also means that the order of elements\ndoesn't matter). It can be proven that such an array always exists under the\ngiven constraints. Example Input 5 2 1 49 5 20 50 6 20 50 5 3 8 9 13 22 Output\n1 49 20 40 30 50 10 26 32 20 38 44 50 8 23 18 13 3 1 10 13 4 19 22 25 16 7\n\n",
        "cf_contest_id": 1409,
        "cf_index": "C",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n2 1 49\r\n5 20 50\r\n6 20 50\r\n5 3 8\r\n9 13 22\r\n",
                "1 49\r\n10 20 30 40 50\r\n20 26 32 38 44 50\r\n3 8 13 18 23\r\n1 4 7 10 13 16 19 22 25\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2 1 49\r\n",
                "1 49\r\n"
            ]
        ]
    }
]