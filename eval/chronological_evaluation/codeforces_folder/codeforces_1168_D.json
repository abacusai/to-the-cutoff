[
    {
        "name": "Anagram Paths",
        "description": "Toad Ilya has a rooted binary tree with vertex \n    1\n being the root. A tree\nis a connected graph without cycles. A tree is rooted if one vertex is\nselected and called the root. A vertex \n    u\n is a child of a vertex \n    v\n\nif \n    u\n and \n    v\n are connected by an edge and \n    v\n is closer to the\nroot than \n    u\n. A leaf is a non-root vertex that has no children. In the\ntree Ilya has each vertex has at most two children, and each edge has some\ncharacter written on it. The character can be a lowercase English letter or\nthe question mark '?'. Ilya will \n    q\n times update the tree a bit. Each\nupdate will replace exactly one character on some edge. After each update Ilya\nneeds to find if the tree is anagrammable and if yes, find its anagramnity for\neach letter. Well, that's difficult to explain, but we'll try. To start with,\na string \n    a\n is an anagram of a string \n    b\n if it is possible to\nrearrange letters in \n    a\n (without changing the letters itself) so that it\nbecomes \n    b\n. For example, the string \"fortyfive\" is an anagram of the\nstring \"overfifty\", but the string \"aabb\" is not an anagram of the string\n\"bbba\". Consider a path from the root of the tree to a leaf. The characters on\nthe edges on this path form a string, we say that this string is associated\nwith this leaf. The tree is anagrammable if and only if it is possible to\nreplace each question mark with a lowercase English letter so that for all\npair of leaves the associated strings for these leaves are anagrams of each\nother. If the tree is anagrammable, then its anagramnity for the letter\n\n    c\n is the maximum possible number of letters \n    c\n in a string\nassociated with some leaf in a valid replacement of all question marks. Please\nafter each update find if the tree is anagrammable and if yes, find the\n\n    \u2211f(c) \n    \u00b7 ind(c)\n for all letters \n    c\n, where \n    f(c)\n is\nthe anagramnity for the letter \n    c\n, and \n    ind(x)\n is the index of this\nletter in the alphabet (\n    ind(\n\"a\"\n    ) = 1\n, \n    ind(\n\"b\"\n    ) = 2\n,\n..., \n    ind(\n\"z\"\n    ) = 26\n). Input The first line of input contains two\nintegers \n    n\n and \n    q\n (\n    2 \n    \u2264 n \n    \u2264 150\n     000\n, \n    1 \n    \u2264\n    q \n    \u2264 150\n     000\n) \u2014 the number of vertices in the tree and the number of\nqueries. The next \n    n-1\n lines describe the initial tree. The \n    i\n-th of\nthem contains an integer \n    p_i\n and a character \n    c_i\n (\n    1 \n    \u2264 p_i\n    \n    \u2264 i\n, \n    c_i\n is a lowercase English letter or the question mark '?')\ndescribing an edge between vertices \n    p_i\n and \n    i+1\n with character\n\n    c_i\n written on it. The root of this tree is the vertex \n    1\n, and each\nvertex has at most two children. The next \n    q\n lines describe the queries.\nThe \n    i\n-th of them contains two integers \n    v\n and \n    c\n (\n    2 \n    \u2264\n    v \n    \u2264 n\n, \n    c\n is a lowercase English letter or the question mark\n'?'), meaning that updated character on the edge between \n    p_v-1\n to\n\n    v\n is \n    c\n. The updated character can be the same as was written\nbefore. Output Output \n    q\n lines. In the \n    i\n-th of them print \"Fou\" if\nthe tree is not anagrammable after the first \n    i\n updates. Otherwise output\n\"Shi\" and the \n    \u2211f(c) \n    \u00b7 ind(c)\n for all letters \n    c\n.\nExamples Input 3 4 1 ? 1 ? 2 ? 2 a 3 b 2 b Output Shi 351 Shi 1 Fou Shi 2\nInput 5 2 1 ? 1 ? 2 ? 3 ? 4 a 5 b Output Shi 352 Shi 3 Note In the first\nexample after the first query, for each character, you can set all edges equal\nto that character, and you will get \n    1\n such character on each path, so\nthe answer is \n    1 \n    \u00b7 (1+2+\n    \u2026+26) = 351\n. In the first example\nafter the second query, you know that all paths should be an anagram of \"a\",\nso all paths should be \"a\", so the answer is \n    1 \n    \u00b7 1 = 1\n. In the\nfirst example after the third query, you have two paths with strings \"a\" and\n\"b\", but these strings are not anagrams, so the answer is \"Fou\". In the first\nexample after the fourth query, you know that all paths should be \"b\", so the\nanswer is \n    1 \n    \u00b7 2 = 2\n. In the second example after the first query,\nyou know that \n    f(\n'a'\n    ) = 2\n and \n    f(c) = 1\n for all other\ncharacters, so the answer is \n    1 \n    \u00b7 (2 + 3 + \n    \u2026 + 26) + 2 =\n    352\n. In the second example after the second query, you know that each path\nshould contain one 'a' and one 'b', so the answer is \n    1 \n    \u00b7 1 + 1\n    \n    \u00b7 2 = 3\n.\n\n",
        "cf_contest_id": 1168,
        "cf_index": "D",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 4\r\n1 ?\r\n1 ?\r\n2 ?\r\n2 a\r\n3 b\r\n2 b\r\n",
                "Shi 351\r\nShi 1\r\nFou\r\nShi 2\r\n"
            ],
            [
                "5 2\r\n1 ?\r\n1 ?\r\n2 ?\r\n3 ?\r\n4 a\r\n5 b\r\n",
                "Shi 352\r\nShi 3\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1\r\n1 ?\r\n2 ?\r\n",
                "Shi 351\r\n"
            ],
            [
                "5 5\r\n1 ?\r\n2 w\r\n3 ?\r\n3 w\r\n4 q\r\n4 ?\r\n5 ?\r\n3 v\r\n5 g\r\n",
                "Fou\r\nShi 397\r\nShi 725\r\nShi 724\r\nShi 380\r\n"
            ]
        ]
    }
]