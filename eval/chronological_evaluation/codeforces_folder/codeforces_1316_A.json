[
    {
        "name": "Grade Allocation",
        "description": "\n    n\n students are taking an exam. The highest possible score at this exam\nis \n    m\n. Let \n    a_i\n be the score of the \n    i\n-th student. You have\naccess to the school database which stores the results of all students. You\ncan change each student's score as long as the following conditions are\nsatisfied: All scores are integers \n    0 \n    \u2264 a_i\n    \u2264 m\n The average\nscore of the class doesn't change. You are student \n    1\n and you would like\nto maximize your own score. Find the highest possible score you can assign to\nyourself such that all conditions are satisfied. Input Each test contains\nmultiple test cases. The first line contains the number of test cases \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 200\n). The description of the test cases follows. The\nfirst line of each test case contains two integers \n    n\n and \n    m\n (\n    1\n    \n    \u2264 n \n    \u2264 10^3\n, \n    1 \n    \u2264 m \n    \u2264 10^5\n) \u2014 the number of\nstudents and the highest possible score respectively. The second line of each\ntestcase contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264\n    a_i\n    \u2264 m\n) \u2014 scores of the students. Output For each testcase, output\none integer \u2014 the highest possible score you can assign to yourself such that\nboth conditions are satisfied._ Example Input 2 4 10 1 2 3 4 4 5 1 2 3 4\nOutput 10 5 Note In the first case, \n    a = [1,2,3,4]\n, with average of\n\n    2.5\n. You can change array \n    a\n to \n    [10,0,0,0]\n. Average remains\n\n    2.5\n, and all conditions are satisfied. In the second case, \n    0 \n    \u2264\n    a_i\n    \u2264 5\n. You can change \n    a\n to \n    [5,1,1,3]\n. You cannot\nincrease \n    a_1\n further as it will violate condition \n    0\n    \u2264 a_i\n    \u2264\n    m\n.\n\n",
        "cf_contest_id": 1316,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n4 10\r\n1 2 3 4\r\n4 5\r\n1 2 3 4\r\n",
                "10\r\n5\r\n"
            ]
        ],
        "private_cases": [
            [
                "27\r\n1 1\r\n0\r\n1 2\r\n0\r\n1 5\r\n0\r\n1 10\r\n0\r\n1 50\r\n0\r\n1 100\r\n0\r\n1 500\r\n0\r\n1 1000\r\n0\r\n1 5000\r\n0\r\n1 10000\r\n0\r\n1 50000\r\n0\r\n1 100000\r\n0\r\n1 5\r\n4\r\n1 5\r\n5\r\n1 10\r\n9\r\n1 10\r\n10\r\n1 100000\r\n9999\r\n1 100000\r\n100000\r\n1 4999\r\n386\r\n1 100000\r\n1\r\n4 5\r\n1 0 0 0\r\n4 5\r\n0 1 0 0\r\n4 5\r\n0 0 0 0\r\n4 5\r\n5 5 5 5\r\n4 5\r\n4 4 5 5\r\n4 5\r\n5 4 4 4\r\n4 5\r\n4 0 0 0\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n4\r\n5\r\n9\r\n10\r\n9999\r\n100000\r\n386\r\n1\r\n1\r\n1\r\n0\r\n5\r\n5\r\n5\r\n4\r\n"
            ]
        ]
    }
]