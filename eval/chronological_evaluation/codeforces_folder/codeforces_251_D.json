[
    {
        "name": "Two Sets",
        "description": "Little Petya likes numbers a lot. Recently his mother has presented him a\ncollection of n non-negative integers. There's only one thing Petya likes more\nthan numbers: playing with little Masha. He immediately decided to give a part\nof his new collection to her. To make the game even more interesting, Petya\ndecided to give Masha such collection of numbers for which the following\nconditions fulfill: Let's introduce x1 to denote the xor of all numbers Petya\nhas got left; and let's introduce x2 to denote the xor of all numbers he gave\nto Masha. Value (x1 + x2) must be as large as possible. If there are multiple\nways to divide the collection so that the previous condition fulfilled, then\nPetya minimizes the value x1. The xor operation is a bitwise excluding \"OR\",\nthat is denoted as \"xor\" in the Pascal language and \"^\" in C/C++/Java. Help\nPetya divide the collection as described above. If there are multiple suitable\nways to divide it, find any of them. Please note that after Petya gives a part\nof his numbers to Masha, he may have no numbers left. The reverse situation is\nalso possible, when Petya gives nothing to Masha. In both cases we must assume\nthat the xor of an empty set of numbers equals 0. Input The first line\ncontains integer n (1 \u2264 n \u2264 10^5), showing how many numbers Petya's mother\ngave him. The second line contains the actual space-separated numbers. They\nare all integer, non-negative and do not exceed 10^18. Output Print n space-\nseparated integers, the i-th of them should equal either 1, if Petya keeps the\nnumber that follows i-th in his collection, or it should equal 2, if Petya\ngives the corresponding number to Masha. The numbers are indexed in the order\nin which they are given in the input. Examples Input 6 1 2 3 4 5 6 Output 2 2\n2 2 2 2 Input 3 1000000000000 1000000000000 1000000000000 Output 2 2 2 Input 8\n1 1 2 2 3 3 4 4 Output 1 2 1 2 2 2 1 2\n\n",
        "cf_contest_id": 251,
        "cf_index": "D",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n1 2 3 4 5 6\r\n",
                "2 2 2 2 2 2 "
            ],
            [
                "3\r\n1000000000000 1000000000000 1000000000000\r\n",
                "2 2 2 "
            ],
            [
                "8\r\n1 1 2 2 3 3 4 4\r\n",
                "1 2 1 2 2 2 1 2 "
            ]
        ],
        "private_cases": [
            [
                "10\r\n1 2 1 0 0 1 100 1 3 1\r\n",
                "1 1 2 2 2 2 2 2 2 2 "
            ],
            [
                "5\r\n0 0 1 3 128\r\n",
                "2 2 1 2 2 "
            ],
            [
                "17\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 13 13 17 16\r\n",
                "2 1 2 1 2 2 2 1 2 2 2 2 2 2 2 1 2 "
            ],
            [
                "30\r\n285 214 1 421 145 3 52 54 62 24 2 245 2 28 8 2 2 20 2 0 3333 171 172 173 174 175 176 666 219 30\r\n",
                "2 2 1 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 "
            ],
            [
                "11\r\n1 2 4 8 16 32 64 128 256 512 1024\r\n",
                "2 2 2 2 2 2 2 2 2 2 2 "
            ],
            [
                "1\r\n123456789123456789\r\n",
                "2 "
            ],
            [
                "2\r\n123456789123456789 123456789123456789\r\n",
                "1 2 "
            ],
            [
                "2\r\n1024 2048\r\n",
                "2 2 "
            ]
        ]
    }
]