[
    {
        "name": "Graph Traveler",
        "description": "Gildong is experimenting with an interesting machine Graph Traveler. In Graph\nTraveler, there is a directed graph consisting of \n    n\n vertices numbered\nfrom \n    1\n to \n    n\n. The \n    i\n-th vertex has \n    m_i\n outgoing edges\nthat are labeled as \n    e_i[0]\n, \n    e_i[1]\n, \n    \u2026\n,\n\n    e_i[m_i-1]\n, each representing the destination vertex of the edge. The\ngraph can have multiple edges and self-loops. The \n    i\n-th vertex also has\nan integer \n    k_i\n written on itself. A travel on this graph works as\nfollows. Gildong chooses a vertex to start from, and an integer to start with.\nSet the variable \n    c\n to this integer. After arriving at the vertex\n\n    i\n, or when Gildong begins the travel at some vertex \n    i\n, add\n\n    k_i\n to \n    c\n. The next vertex is \n    e_i[x]\n where \n    x\n is an\ninteger \n    0 \n    \u2264 x \n    \u2264 m_i-1\n satisfying \n    x \n    \u2261 c \n    m_i\n. Go to the next vertex and go back to step 2. It's obvious that a\ntravel never ends, since the 2nd and the 3rd step will be repeated endlessly.\nFor example, assume that Gildong starts at vertex \n    1\n with \n    c = 5\n,\nand \n    m_1 = 2\n, \n    e_1[0] = 1\n, \n    e_1[1] = 2\n, \n    k_1 = -3\n. Right\nafter he starts at vertex \n    1\n, \n    c\n becomes \n    2\n. Since the only\ninteger \n    x\n (\n    0 \n    \u2264 x \n    \u2264 1\n) where \n    x \n    \u2261 c \n    m_i\n is \n    0\n, Gildong goes to vertex \n    e_1[0] = 1\n. After arriving\nat vertex \n    1\n again, \n    c\n becomes \n    -1\n. The only integer \n    x\n\nsatisfying the conditions is \n    1\n, so he goes to vertex \n    e_1[1] = 2\n,\nand so on. Since Gildong is quite inquisitive, he's going to ask you \n    q\n\nqueries. He wants to know how many distinct vertices will be visited\ninfinitely many times, if he starts the travel from a certain vertex with a\ncertain value of \n    c\n. Note that you should not count the vertices that\nwill be visited only finite times. Input The first line of the input contains\nan integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 1000\n), the number of vertices in the\ngraph. The second line contains \n    n\n integers. The \n    i\n-th integer is\n\n    k_i\n (\n    -10^9 \n    \u2264 k_i \n    \u2264 10^9\n), the integer written on the\n\n    i\n-th vertex. Next \n    2 \n    \u00b7 n\n lines describe the edges of each\nvertex. The \n    (2 \n    \u00b7 i + 1)\n-st line contains an integer \n    m_i\n\n(\n    1 \n    \u2264 m_i \n    \u2264 10\n), the number of outgoing edges of the \n    i\n-th\nvertex. The \n    (2 \n    \u00b7 i + 2)\n-nd line contains \n    m_i\n integers\n\n    e_i[0]\n, \n    e_i[1]\n, \n    \u2026\n, \n    e_i[m_i-1]\n, each having an\ninteger value between \n    1\n and \n    n\n, inclusive. Next line contains an\ninteger \n    q\n (\n    1 \n    \u2264 q \n    \u2264 10^5\n), the number of queries Gildong\nwants to ask. Next \n    q\n lines contains two integers \n    x\n and \n    y\n\n(\n    1 \n    \u2264 x \n    \u2264 n\n, \n    -10^9 \n    \u2264 y \n    \u2264 10^9\n) each, which mean\nthat the start vertex is \n    x\n and the starting value of \n    c\n is \n    y\n.\nOutput For each query, print the number of distinct vertices that will be\nvisited infinitely many times, if Gildong starts at vertex \n    x\n with\nstarting integer \n    y\n. Examples Input 4 0 0 0 0 2 2 3 1 2 3 2 4 1 4 3 1 2 1\n6 1 0 2 0 3 -1 4 -2 1 1 1 5 Output 1 1 2 1 3 2 Input 4 4 -5 -3 -1 2 2 3 1 2 3\n2 4 1 4 3 1 2 1 6 1 0 2 0 3 -1 4 -2 1 1 1 5 Output 1 1 1 3 1 1 Note The first\nexample can be shown like the following image: Three integers are marked on\n\n    i\n-th vertex: \n    i\n, \n    k_i\n, and \n    m_i\n respectively. The\noutgoing edges are labeled with an integer representing the edge number of\n\n    i\n-th vertex. The travel for each query works as follows. It is described\nas a sequence of phrases, each in the format \"vertex (\n    c\n after \n    k_i\n\nadded)\". \n    1(0) \n    \u2192 2(0) \n    \u2192 2(0) \n    \u2192\n    \u2026\n \n    2(0) \n    \u2192 2(0)\n    \n    \u2192\n    \u2026\n \n    3(-1) \n    \u2192 1(-1) \n    \u2192 3(-1) \n    \u2192\n    \u2026\n \n    4(-2)\n    \n    \u2192 2(-2) \n    \u2192 2(-2) \n    \u2192\n    \u2026\n \n    1(1) \n    \u2192 3(1) \n    \u2192 4(1) \n    \u2192\n    1(1) \n    \u2192\n    \u2026\n \n    1(5) \n    \u2192 3(5) \n    \u2192 1(5) \n    \u2192\n    \u2026\n The\nsecond example is same as the first example, except that the vertices have\nnon-zero values. Therefore the answers to the queries also differ from the\nfirst example. The queries for the second example works as follows: \n    1(4)\n    \n    \u2192 2(-1) \n    \u2192 2(-6) \n    \u2192\n    \u2026\n \n    2(-5) \n    \u2192 2(-10) \n    \u2192\n    \u2026\n \n    3(-4) \n    \u2192 1(0) \n    \u2192 2(-5) \n    \u2192 2(-10) \n    \u2192\n    \u2026\n\n\n    4(-3) \n    \u2192 1(1) \n    \u2192 3(-2) \n    \u2192 4(-3) \n    \u2192\n    \u2026\n \n    1(5) \n    \u2192\n    3(2) \n    \u2192 1(6) \n    \u2192 2(1) \n    \u2192 2(-4) \n    \u2192\n    \u2026\n \n    1(9) \n    \u2192 3(6)\n    \n    \u2192 2(1) \n    \u2192 2(-4) \n    \u2192\n    \u2026\n\n\n",
        "cf_contest_id": 1200,
        "cf_index": "F",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "graphs",
            "implementation",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4\r\n0 0 0 0\r\n2\r\n2 3\r\n1\r\n2\r\n3\r\n2 4 1\r\n4\r\n3 1 2 1\r\n6\r\n1 0\r\n2 0\r\n3 -1\r\n4 -2\r\n1 1\r\n1 5\r\n",
                "1\r\n1\r\n2\r\n1\r\n3\r\n2\r\n"
            ],
            [
                "4\r\n4 -5 -3 -1\r\n2\r\n2 3\r\n1\r\n2\r\n3\r\n2 4 1\r\n4\r\n3 1 2 1\r\n6\r\n1 0\r\n2 0\r\n3 -1\r\n4 -2\r\n1 1\r\n1 5\r\n",
                "1\r\n1\r\n1\r\n3\r\n1\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n0\r\n1\r\n1\r\n1\r\n1 0\r\n",
                "1\r\n"
            ]
        ]
    }
]