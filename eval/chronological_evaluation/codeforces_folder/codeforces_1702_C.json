[
    {
        "name": "Train and Queries",
        "description": "Along the railroad there are stations indexed from \n    1\n to \n    10^9\n. An\nexpress train always travels along a route consisting of \n    n\n stations with\nindices \n    u_1, u_2, \n    \u2026, u_n\n, where (\n    1 \n    \u2264 u_i \n    \u2264 10^9\n).\nThe train travels along the route from left to right. It starts at station\n\n    u_1\n, then stops at station \n    u_2\n, then at \n    u_3\n, and so on.\nStation \n    u_n\n \u2014 the terminus. It is possible that the train will visit the\nsame station more than once. That is, there may be duplicates among the values\n\n    u_1, u_2, \n    \u2026, u_n\n. You are given \n    k\n queries, each containing\ntwo different integers \n    a_j\n and \n    b_j\n (\n    1 \n    \u2264 a_j, b_j \n    \u2264\n    10^9\n). For each query, determine whether it is possible to travel by train\nfrom the station with index \n    a_j\n to the station with index \n    b_j\n. For\nexample, let the train route consist of \n    6\n of stations with indices\n[\n    3, 7, 1, 5, 1, 4\n] and give \n    3\n of the following queries: \n    a_1 =\n    3\n, \n    b_1 = 5\nIt is possible to travel from station \n    3\n to station\n\n    5\n by taking a section of the route consisting of stations [\n    3, 7, 1,\n    5\n]. Answer: YES. \n    a_2 = 1\n, \n    b_2 = 7\nYou cannot travel from station\n\n    1\n to station \n    7\n because the train cannot travel in the opposite\ndirection. Answer: NO. \n    a_3 = 3\n, \n    b_3 = 10\nIt is not possible to\ntravel from station \n    3\n to station \n    10\n because station \n    10\n is\nnot part of the train's route. Answer: NO. Input The first line of the input\ncontains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014the number of test\ncases in the test. The descriptions of the test cases follow. The first line\nof each test case is empty. The second line of each test case contains two\nintegers: \n    n\n and \n    k\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5, 1 \n    \u2264 k\n    \n    \u2264 2 \n    \u00b7 10^5\n) \u2014the number of stations the train route consists of\nand the number of queries. The third line of each test case contains exactly\n\n    n\n integers \n    u_1, u_2, \n    \u2026, u_n\n (\n    1 \n    \u2264 u_i \n    \u2264 10^9\n).\nThe values \n    u_1, u_2, \n    \u2026, u_n\n are not necessarily different. The\nfollowing \n    k\n lines contain two different integers \n    a_j\n and \n    b_j\n\n(\n    1 \n    \u2264 a_j, b_j \n    \u2264 10^9\n) describing the query with index \n    j\n.\nIt is guaranteed that the sum of \n    n\n values over all test cases in the\ntest does not exceed \n    2 \n    \u00b7 10^5\n. Similarly, it is guaranteed that\nthe sum of \n    k\n values over all test cases in the test also does not exceed\n\n    2 \n    \u00b7 10^5\n Output For each test case, output on a separate line:\nYES, if you can travel by train from the station with index \n    a_j\n to the\nstation with index \n    b_j\n NO otherwise. You can output YES and NO in any\ncase (for example, strings yEs, yes, Yes and YES will be recognized as a\npositive response). Example Input 3 6 3 3 7 1 5 1 4 3 5 1 7 3 10 3 3 1 2 1 2 1\n1 2 4 5 7 5 2 1 1 1 2 4 4 1 3 1 4 2 1 4 1 1 2 Output YES NO NO YES YES NO NO\nYES YES NO YES Note The first test case is explained in the problem statement.\n\n",
        "cf_contest_id": 1702,
        "cf_index": "C",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n\r\n6 3\r\n3 7 1 5 1 4\r\n3 5\r\n1 7\r\n3 10\r\n\r\n3 3\r\n1 2 1\r\n2 1\r\n1 2\r\n4 5\r\n\r\n7 5\r\n2 1 1 1 2 4 4\r\n1 3\r\n1 4\r\n2 1\r\n4 1\r\n1 2\r\n",
                "YES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n\r\n3 3\r\n1 2 1\r\n2 1\r\n1 2\r\n4 5\r\n\r\n2 3\r\n262 399\r\n2 1\r\n1 2\r\n4 5\r\n\r\n7 5\r\n2 1 1 1 2 4 4\r\n1 3\r\n1 4\r\n2 1\r\n4 1\r\n1 2\r\n",
                "YES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\n"
            ]
        ]
    }
]