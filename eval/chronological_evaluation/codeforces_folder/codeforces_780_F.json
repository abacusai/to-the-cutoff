[
    {
        "name": "Axel and Marston in Bitland",
        "description": "A couple of friends, Axel and Marston are travelling across the country of\nBitland. There are n towns in Bitland, with some pairs of towns connected by\none-directional roads. Each road in Bitland is either a pedestrian road or a\nbike road. There can be multiple roads between any pair of towns, and may even\nbe a road from a town to itself. However, no pair of roads shares the starting\nand the destination towns along with their types simultaneously. The friends\nare now located in the town 1 and are planning the travel route. Axel enjoys\nwalking, while Marston prefers biking. In order to choose a route diverse and\nequally interesting for both friends, they have agreed upon the following\nprocedure for choosing the road types during the travel: The route starts with\na pedestrian route. Suppose that a beginning of the route is written in a\nstring s of letters P (pedestrain road) and B (biking road). Then, the string\nis appended to s, where stands for the string s with each character changed to\nopposite (that is, all pedestrian roads changed to bike roads, and vice\nversa).In the first few steps the route will look as follows: P, PB, PBBP,\nPBBPBPPB, PBBPBPPBBPPBPBBP, and so on. After that the friends start travelling\nfrom the town 1 via Bitlandian roads, choosing the next road according to the\nnext character of their route type each time. If it is impossible to choose\nthe next road, the friends terminate their travel and fly home instead. Help\nthe friends to find the longest possible route that can be travelled along\nroads of Bitland according to the road types choosing procedure described\nabove. If there is such a route with more than 10^18 roads in it, print -1\ninstead. Input The first line contains two integers n and m (1 \u2264 n \u2264 500, 0 \u2264\nm \u2264 2n^2) \u2014 the number of towns and roads in Bitland respectively. Next m\nlines describe the roads. i-th of these lines contains three integers vi, ui\nand ti (1 \u2264 vi, ui \u2264 n, 0 \u2264 ti \u2264 1), where vi and ui denote start and\ndestination towns indices of the i-th road, and ti decribes the type of i-th\nroad (0 for a pedestrian road, 1 for a bike road). It is guaranteed that for\neach pair of distinct indices i, j such that 1 \u2264 i, j \u2264 m, either vi \u2260 vj, or\nui \u2260 uj, or ti \u2260 tj holds. Output If it is possible to find a route with\nlength strictly greater than 10^18, print -1. Otherwise, print the maximum\nlength of a suitable path. Examples Input 2 2 1 2 0 2 2 1 Output 3 Input 2 3 1\n2 0 2 2 1 2 2 0 Output -1 Note In the first sample we can obtain a route of\nlength 3 by travelling along the road 1 from town 1 to town 2, and then\nfollowing the road 2 twice from town 2 to itself. In the second sample we can\nobtain an arbitrarily long route by travelling the road 1 first, and then\nchoosing road 2 or 3 depending on the necessary type.\n\n",
        "cf_contest_id": 780,
        "cf_index": "F",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "dp",
            "graphs",
            "matrices"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 2\r\n1 2 0\r\n2 2 1\r\n",
                "3"
            ],
            [
                "2 3\r\n1 2 0\r\n2 2 1\r\n2 2 0\r\n",
                "-1"
            ]
        ],
        "private_cases": [
            [
                "1 2\r\n1 1 0\r\n1 1 1\r\n",
                "-1"
            ],
            [
                "1 1\r\n1 1 0\r\n",
                "1"
            ],
            [
                "3 6\r\n3 1 1\r\n1 2 1\r\n2 1 1\r\n1 3 0\r\n3 2 1\r\n2 2 0\r\n",
                "30"
            ],
            [
                "3 13\r\n1 3 1\r\n1 1 0\r\n1 1 1\r\n2 3 1\r\n2 2 0\r\n3 2 1\r\n3 1 0\r\n1 2 1\r\n2 1 0\r\n1 3 0\r\n2 3 0\r\n2 2 1\r\n3 3 0\r\n",
                "-1"
            ],
            [
                "5 0\r\n",
                "0"
            ],
            [
                "2 2\r\n2 1 1\r\n1 2 0\r\n",
                "2"
            ]
        ]
    }
]