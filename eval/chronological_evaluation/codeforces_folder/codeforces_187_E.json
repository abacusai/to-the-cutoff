[
    {
        "name": "Heaven Tour",
        "description": "The story was not finished as PMP thought. God offered him one more chance to\nreincarnate and come back to life. But before he can come back, God told him\nthat PMP should ask n great men including prominent programmers about their\nlife experiences. The men are standing on a straight line. They are numbered 1\nthrough n from left to right. The coordinate of the i-th man is xi (xi < xi +\n1, i < n). PMP should visit all these people one by one in arbitrary order.\nEach men should be visited exactly once. At the beginning of his tour, he\nstarts at location of s-th man and asks him about his experiences. Each time\nPMP wants to change his location, he should give a ticket to an angel and the\nangel carries him to his destination. Angels take PMP from one location, fly\nto his destination and put him down there. Nobody else is visited in this\nmovement. Moving from i-th man to j-th man, takes |xi - xj| time. PMP can get\nback to life as soon as he visits all men. There are two types of angels: Some\nangels are going to the right and they only accept right tickets. Others are\ngoing the left and they only accept left tickets. There are an unlimited\nnumber of angels of each type. PMP has l left tickets and n - 1 - l right\ntickets. PMP wants to get back to life as soon as possible to be able to\ncompete in this year's final instead of the final he missed last year. He\nwants to know the quickest way to visit all the men exactly once. He also\nneeds to know the exact sequence moves he should make. Input The first line of\ninput contains three space-separated integers n, l, s (2 \u2264 n \u2264 10^5, 0 \u2264 l <\nn, 1 \u2264 s \u2264 n) \u2014 the number of people to visit, the number left tickets PMP\ngot, and initial location of PMP. Next line contains n space-separated\nintegers. The i-th integer in this line is xi (0 = x1 < x2 < ... < xn \u2264 10^9)\n\u2014 the location of i-th man. Output If PMP cannot visit all men with the\ntickets he got print -1 in the only line of output. Otherwise, in the first\nline you should print the minimum time PMP can visit all men. In the second\nline you should print n - 1 integers that are the numbers of the men that PMP\nshould visit in order in one optimal solution. If there are multiple answers,\noutput any of them. Please do not use the \n64-bit integers in \u0421++. It is preferred to use cin, cout streams or the \nspecifier. Examples Input 5 2 2 0 10 11 21 22 Output 33 1 3 5 4 Input 4 3 1 0\n1 2 3 Output -1 Input 7 3 2 0 100 200 201 301 303 305 Output 409 1 3 4 7 6 5\nNote Let us remind here, a great contestant of all times, who left us about a\nyear ago. May Renat Mullakhanov rest in peace.\n\n",
        "cf_contest_id": 187,
        "cf_index": "E",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 2 2\r\n0 10 11 21 22\r\n",
                "33\r\n1 3 5 4\r\n"
            ],
            [
                "4 3 1\r\n0 1 2 3\r\n",
                "-1\r\n"
            ],
            [
                "7 3 2\r\n0 100 200 201 301 303 305\r\n",
                "409\r\n1 4 3 5 7 6\r\n"
            ]
        ],
        "private_cases": [
            [
                "4 0 1\r\n0 1 8 9\r\n",
                "9\r\n2 3 4\r\n"
            ],
            [
                "4 0 3\r\n0 3 9 14\r\n",
                "-1\r\n"
            ],
            [
                "4 3 4\r\n0 3 12 13\r\n",
                "13\r\n3 2 1\r\n"
            ],
            [
                "4 0 1\r\n0 2 8 16\r\n",
                "16\r\n2 3 4\r\n"
            ],
            [
                "4 0 2\r\n0 5 8 20\r\n",
                "-1\r\n"
            ],
            [
                "4 0 4\r\n0 6 12 17\r\n",
                "-1\r\n"
            ],
            [
                "10 1 7\r\n0 6 49 80 101 116 118 151 172 174\r\n",
                "292\r\n1 2 3 4 5 6 8 9 10\r\n"
            ],
            [
                "10 1 2\r\n0 5 66 73 90 101 107 160 163 196\r\n",
                "201\r\n1 3 4 5 6 7 8 9 10\r\n"
            ],
            [
                "10 6 10\r\n0 25 88 106 113 138 144 145 167 168\r\n",
                "196\r\n9 6 7 8 4 5 3 2 1\r\n"
            ],
            [
                "10 8 5\r\n0 47 57 77 102 112 124 125 164 196\r\n",
                "290\r\n10 9 8 7 6 4 3 2 1\r\n"
            ],
            [
                "12 11 8\r\n0 12405295 132046131 237466190 271351687 309779304 362835040 636480281 708479962 733712050 766613556 788635381\r\n",
                "-1\r\n"
            ],
            [
                "12 11 1\r\n0 105866866 119447054 220929346 485816539 678212206 711009927 720649824 847820595 887119821 955815578 973577648\r\n",
                "-1\r\n"
            ],
            [
                "12 7 11\r\n0 65959597 82385000 153731380 168766908 268219966 279065311 416718487 489096053 530020943 804819367 814003591\r\n",
                "907800367\r\n12 10 9 8 6 7 4 5 2 3 1\r\n"
            ],
            [
                "12 4 4\r\n0 132425986 140432867 156082091 156261345 285119164 434898482 445204091 743764718 855534219 925378922 986596189\r\n",
                "1163289498\r\n3 2 1 5 6 8 7 9 10 11 12\r\n"
            ],
            [
                "12 8 5\r\n0 145944682 182466972 248464040 307613064 432003127 534507289 595970785 598982798 763085534 813636994 827934261\r\n",
                "1329347070\r\n4 3 2 1 6 9 8 7 12 11 10\r\n"
            ],
            [
                "12 4 7\r\n0 59587452 91272586 193362342 291119303 379991606 454029114 455036280 464371462 474793260 624520840 863247842\r\n",
                "1317276956\r\n6 5 4 1 2 3 8 9 10 11 12\r\n"
            ]
        ]
    }
]