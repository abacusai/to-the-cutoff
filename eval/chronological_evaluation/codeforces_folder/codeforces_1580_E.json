[
    {
        "name": "Railway Construction",
        "description": "Because the railway system in Gensokyo is often congested, as an enthusiastic\nengineer, Kawasiro Nitori plans to construct more railway to ease the\ncongestion. There are \n    n\n stations numbered from \n    1\n to \n    n\n and\n\n    m\n two-way railways in Gensokyo. Every two-way railway connects two\ndifferent stations and has a positive integer length \n    d\n. No two two-way\nrailways connect the same two stations. Besides, it is possible to travel from\nany station to any other using those railways. Among these \n    n\n stations,\nstation \n    1\n is the main station. You can get to any station from any other\nstation using only two-way railways. Because of the technological limitation,\nNitori can only construct one-way railways, whose length can be arbitrary\npositive integer. Constructing a one-way railway from station \n    u\n will\ncosts \n    w_u\n units of resources, no matter where the railway ends. To ease\nthe congestion, Nitori plans that after construction there are at least two\nshortest paths from station \n    1\n to any other station, and these two\nshortest paths do not pass the same station except station \n    1\n and the\nterminal. Besides, Nitori also does not want to change the distance of the\nshortest path from station \n    1\n to any other station. Due to various\nreasons, sometimes the cost of building a new railway will increase\nuncontrollably. There will be a total of \n    q\n occurrences of this kind of\nincident, and the \n    i\n-th event will add additional amount of \n    x_i\n to\nthe cost of building a new railway from the station \n    k_i\n. To save\nresources, before all incidents and after each incident, Nitori wants you to\nhelp her calculate the minimal cost of railway construction. Input The first\nline contains three integers \n    n\n, \n    m\n, and \n    q\n (\n    1 \n    \u2264 n \n    \u2264\n    2 \n    \u00b7 10^5\n, \n    1 \n    \u2264 m \n    \u2264 3 \n    \u00b7 10^5\n, \n    0 \n    \u2264 q \n    \u2264\n    2\n    \u00b710^5\n). The second line contains \n    n\n integers\n\n    w_1,w_2,\n    \u2026,w_n\n (\n    1 \n    \u2264 w_i \n    \u2264 10^9\n). Each of the next\n\n    m\n lines contains three integers \n    u\n, \n    v\n, \n    d\n (\n    1 \n    \u2264\n    u,v \n    \u2264 n\n, \n    u \n     v\n, \n    1 \n    \u2264 d \n    \u2264 10^9\n), denoting a two-\nway railway connecting station \n    u\n and station \n    v\n, with length\n\n    d\n. The \n    i\n-th of the next \n    q\n lines contains two integers\n\n    k_i,x_i\n (\n    1 \n    \u2264 k_i \n    \u2264 n, 1 \n    \u2264 x_i \n    \u2264 4 \n    \u00d7 10^8\n).\nOutput Print \n    q+1\n lines, and the \n    i\n-th of these lines contains one\ninteger, denoting the minimal cost of railway construction after the\n\n    i-1\n-th incident (especially, the \n    0\n-th incident means no incident\noccurred). Examples Input 5 5 1 1 1 1 1 1 1 2 1 2 3 1 2 4 1 3 5 1 4 5 1 1 2\nOutput 3 9 Input 8 11 0 14 4 16 15 1 3 1 14 4 2 1 1 2 3 7 5 4 2 3 1 8 6 2 8 5\n5 5 4 5 7 6 7 3 5 5 1 6 6 8 1 4 Output 46 Input 10 16 8 29 1 75 73 51 69 24 17\n1 97 1 2 18 2 3 254 2 4 546 2 5 789 5 6 998 6 7 233 7 8 433 1 9 248 5 10 488 2\n6 1787 10 8 1176 3 8 2199 4 8 1907 2 10 1277 4 10 731 9 10 1047 1 11 1 9 8 8 1\n3 2 19 9 5 9 4 7 6 Output 34 45 54 54 57 76 96 112 112 Note In the second\nexample, Nitori can build railways as follows: \n    1 \n    \u2192 2\n, \n    1\n    \n    \u2192 3\n, \n    1 \n    \u2192 4\n, \n    2 \n    \u2192 8\n, and the\ncost is \n    14 + 14 + 14 + 4 = 46\n.\n\n",
        "cf_contest_id": 1580,
        "cf_index": "E",
        "cf_rating": 3400,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "data structures",
            "graphs",
            "shortest paths"
        ],
        "time_limit_seconds": 2.5,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5 5 1\r\n1 1 1 1 1\r\n1 2 1\r\n2 3 1\r\n2 4 1\r\n3 5 1\r\n4 5 1\r\n1 2\r\n",
                "3\r\n9\r\n"
            ],
            [
                "8 11 0\r\n14 4 16 15 1 3 1 14\r\n4 2 1\r\n1 2 3\r\n7 5 4\r\n2 3 1\r\n8 6 2\r\n8 5 5\r\n5 4 5\r\n7 6 7\r\n3 5 5\r\n1 6 6\r\n8 1 4\r\n",
                "46\r\n"
            ],
            [
                "10 16 8\r\n29 1 75 73 51 69 24 17 1 97\r\n1 2 18\r\n2 3 254\r\n2 4 546\r\n2 5 789\r\n5 6 998\r\n6 7 233\r\n7 8 433\r\n1 9 248\r\n5 10 488\r\n2 6 1787\r\n10 8 1176\r\n3 8 2199\r\n4 8 1907\r\n2 10 1277\r\n4 10 731\r\n9 10 1047\r\n1 11\r\n1 9\r\n8 8\r\n1 3\r\n2 19\r\n9 5\r\n9 4\r\n7 6\r\n",
                "34\r\n45\r\n54\r\n54\r\n57\r\n76\r\n96\r\n112\r\n112\r\n"
            ]
        ],
        "private_cases": []
    }
]