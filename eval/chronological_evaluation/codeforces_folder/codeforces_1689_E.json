[
    {
        "name": "ANDfinity",
        "description": "Bit Lightyear, to the ANDfinity and beyond! After graduating from computer\nsciences, Vlad has been awarded an array \n    a_1,a_2,\n    \u2026,a_n\n of \n    n\n\nnon-negative integers. As it is natural, he wanted to construct a graph\nconsisting of \n    n\n vertices, numbered \n    1, 2,\n    \u2026, n\n. He decided to\nadd an edge between \n    i\n and \n    j\n if and only if \n    a_i \n    & a_j > 0\n,\nwhere \n    &\n denotes the bitwise AND operation. Vlad also wants the graph\nto be connected, which might not be the case initially. In order to satisfy\nthat, he can do the following two types of operations on the array: Choose\nsome element \n    a_i\n and increment it by \n    1\n. Choose some element\n\n    a_i\n and decrement it by \n    1\n (possible only if \n    a_i > 0\n). It can\nbe proven that there exists a finite sequence of operations such that the\ngraph will be connected. So, can you please help Vlad find the minimum\npossible number of operations to do that and also provide the way how to do\nthat? Input There are several test cases in the input data. The first line\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number\nof test cases. This is followed by the test cases description. The first line\nof each test case contains an integer \n    n\n (\n    2\n    \u2264 n \n    \u2264 2000\n).\nThe second line of each test case contains \n    n\n integers \n    a_1, a_2,\n    \n    \u2026, a_n\n (\n    0\n    \u2264 a_i < 2^30\n) \u2014 the elements of the array. It\nis guaranteed that the sum of \n    n\n over all test cases does not exceed\n\n    2000\n. Output For each test case, print a single integer \n    m\n in the\nfirst line \u2014 the minimum number of operations. In the second line print the\narray after a valid sequence of operations that have been done such that the\ngraph from the task becomes connected. If there are multiple solutions, output\nany. Example Input 4 5 1 2 3 4 5 2 0 2 2 3 12 4 3 0 0 0 Output 0 1 2 3 4 5 2 2\n2 1 3 11 3 3 1 1 1 Note In the first test case, the graph is already\nconnected. In the second test case, we can increment \n    0\n twice and end up\nwith the array \n    [2,2]\n. Since \n    2 \n    & 2 = 2 > 0\n, the graph is\nconnected. It can be shown that one operation is not enough. In the third test\ncase, we can decrement \n    12\n once and we end up with an array \n    [3,11]\n.\n\n    3 \n    & 11 = 3 > 0\n hence the graph is connected. One operation has to be\ndone since the graph is not connected at the beginning.\n\n",
        "cf_contest_id": 1689,
        "cf_index": "E",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n5\r\n1 2 3 4 5\r\n2\r\n0 2\r\n2\r\n3 12\r\n4\r\n3 0 0 0\r\n",
                "0\n1\n2\n3\n4\n5\n2\n2\n2\n1\n4\n12\n3\n3\n1\n1\n1\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n4\r\n24 64 8 70\r\n",
                "1\n24\n63\n8\n70\n"
            ]
        ]
    }
]