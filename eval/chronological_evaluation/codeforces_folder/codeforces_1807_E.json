[
    {
        "name": "Interview",
        "description": "This is an interactive problem. If you are unsure how interactive problems\nwork, then it is recommended to read the guide for participants. Before the\nlast stage of the exam, the director conducted an interview. He gave Gon\n\n    n\n piles of stones, the \n    i\n-th pile having \n    a_i\n stones. Each\nstone is identical and weighs \n    1\n grams, except for one special stone that\nis part of an unknown pile and weighs \n    2\n grams. A picture of the first\ntest case. Pile \n    2\n has the special stone. The piles have weights of\n\n    1,3,3,4,5\n, respectively. Gon can only ask the director questions of one\nkind: he can choose \n    k\n piles, and the director will tell him the total\nweight of the piles chosen. More formally, Gon can choose an integer \n    k\n\n(\n    1 \n    \u2264 k \n    \u2264 n\n) and \n    k\n unique piles \n    p_1, p_2, \n    \u2026,\n    p_k\n (\n    1 \n    \u2264 p_i \n    \u2264 n\n), and the director will return the total\nweight \n    m_p_1 + m_p_2 + \n    \u2026 + m_p_k\n, where \n    m_i\n denotes\nthe weight of pile \n    i\n. Gon is tasked with finding the pile that contains\nthe special stone. However, the director is busy. Help Gon find this pile in\nat most \n    30\n queries. Input The input data contains several\ntest cases. The first line contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    1000\n) \u2014 the number of test cases. The description of the test cases\nfollows. The first line of each test case contains a single integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of piles. The second\nline of each test case contains \n    n\n integers \n    a_i\n (\n    1 \n    \u2264 a_i\n    \n    \u2264 10^4\n) \u2014 the number of stones in each pile. It is guaranteed that the\nsum of \n    n\n over all test cases does not exceed \n    2 \n    \u00b7 10^5\n. After\nreading the input for each test case, proceed with the interaction as follows.\nInteraction You can perform the operation at most \n    30\n times to\nguess the pile. To make a guess, print a line with the following format:\n\n    k \n     p_1 \n     p_2 \n     p_3 \n     ... \n     p_k-1\n     p_k\n\n(\n    1 \n    \u2264 k \n    \u2264 n\n; \n    1 \n    \u2264 p_i \n    \u2264 n\n; all \n    p_i\n are\ndistinct) \u2014 the indices of the piles. After each operation, you should read a\nline containing a single integer \n    x\n \u2014 the sum of weights of the chosen\npiles. (Formally, \n    x = m_p_1 + m_p_2 + \n    \u2026 + m_p_k\n.)When you\nknow the index of the pile with the special stone, print one line in the\nfollowing format: \n    m\n (\n    1 \n    \u2264 m \n    \u2264 n\n). After\nthat, move on to the next test case, or terminate the program if there are no\nmore test cases remaining. If your program performs more than \n    30\n\noperations for one test case or makes an invalid query, you may receive a\nWrong Answer verdict. After you print a query or the answer, please remember\nto output the end of the line and flush the output. Otherwise, you may get\nIdleness limit exceeded or some other verdict. To do this, use the following:\nfflush(stdout) or cout.flush() in C++; System.out.flush() in Java;\nflush(output) in Pascal; stdout.flush() in Python; see the documentation for\nother languages. It is additionally recommended to read the interactive\nproblems guide for participants. Hacks To make a hack, use the following\nformat. The first line should contain a single integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 1000\n) \u2014 the number of test cases. The first line of each test case\nshould contain two integers \n    n, m\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7\n    10^5\n) \u2013 the number of piles and the pile with the special stone. The second\nline of each test case should contain \n    n\n integers \n    a_i\n (\n    1 \n    \u2264\n    a_i \n    \u2264 10^4\n) \u2014 the number of stones in each pile. Note that the\ninteractor is not adaptive, meaning that the answer is known before the\nparticipant asks the queries and doesn't depend on the queries asked by the\nparticipant. Example Input 2 5 1 2 3 4 5 11 6 3 7 1 2 3 5 3 4 2 12 6 Output ?\n4 1 2 3 4 ? 2 2 3 ? 1 2 ! 2 ? 4 2 3 5 6 ? 2 1 4 ! 7 Note In the first test\ncase, the stone with weight two is located in pile \n    2\n, as shown in the\npicture. We perform the following interaction: \n    \n \u2014\nask the total weight of piles \n    1\n, \n    2\n, \n    3\n, and \n    4\n. The\ntotal weight we receive back is \n    1+3+3+4=11\n. \n    \n \u2014\nask the total weight of piles \n    2\n and \n    3\n. The total weight we receive\nback is \n    3+3=6\n. \n    \n \u2014 ask the total weight of pile\n\n    2\n. The total weight we receive back is \n    3\n. \n    \n \u2014\nwe have figured out that pile \n    2\n contains the special stone, so we output\nit and move on to the next test case. In the second test case, the stone with\nweight two is located on index \n    7\n. We perform the following interaction:\n\n    \n \u2014 ask the total weight of piles \n    2\n, \n    3\n,\n\n    5\n, and \n    6\n. The total weight we receive back is \n    2+3+3+4=12\n.\n\n    \n \u2014 ask the total weight of piles \n    1\n and \n    4\n.\nThe total weight we receive back is \n    1+5=6\n. \n    \n \u2014 we\nhave somehow figured out that pile \n    7\n contains the special stone, so we\noutput it and end the interaction.\n\n",
        "cf_contest_id": 1807,
        "cf_index": "E",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "implementation",
            "interactive"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n5 2\r\n1 2 3 4 5\r\n7 7\r\n1 2 3 5 3 4 2\r\n",
                "2\r\n7\r\n"
            ]
        ],
        "private_cases": []
    }
]