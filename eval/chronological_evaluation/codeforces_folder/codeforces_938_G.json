[
    {
        "name": "Shortest Path Queries",
        "description": "You are given an undirected connected graph with weighted edges. The length of\nsome path between two vertices is the bitwise xor of weights of all edges\nbelonging to this path (if some edge is traversed more than once, then it is\nincluded in bitwise xor the same number of times). There are three types of\nqueries you have to process: 1 x y d \u2014 add an edge connecting vertex x to\nvertex y with weight d. It is guaranteed that there is no edge connecting x to\ny before this query; 2 x y \u2014 remove an edge connecting vertex x to vertex y.\nIt is guaranteed that there was such edge in the graph, and the graph stays\nconnected after this query; 3 x y \u2014 calculate the length of the shortest path\n(possibly non-simple) from vertex x to vertex y. Print the answers for all\nqueries of type 3. Input The first line contains two numbers n and m (1 \u2264 n, m\n\u2264 200000) \u2014 the number of vertices and the number of edges in the graph,\nrespectively. Then m lines follow denoting the edges of the graph. Each line\ncontains three integers x, y and d (1 \u2264 x < y \u2264 n, 0 \u2264 d \u2264 2^30 - 1). Each\npair (x, y) is listed at most once. The initial graph is connected. Then one\nline follows, containing an integer q (1 \u2264 q \u2264 200000) \u2014 the number of queries\nyou have to process. Then q lines follow, denoting queries in the following\nform: 1 x y d (1 \u2264 x < y \u2264 n, 0 \u2264 d \u2264 2^30 - 1) \u2014 add an edge connecting\nvertex x to vertex y with weight d. It is guaranteed that there is no edge\nconnecting x to y before this query; 2 x y (1 \u2264 x < y \u2264 n) \u2014 remove an edge\nconnecting vertex x to vertex y. It is guaranteed that there was such edge in\nthe graph, and the graph stays connected after this query; 3 x y (1 \u2264 x < y \u2264\nn) \u2014 calculate the length of the shortest path (possibly non-simple) from\nvertex x to vertex y. It is guaranteed that at least one query has type 3.\nOutput Print the answers for all queries of type 3 in the order they appear in\ninput. Example Input 5 5 1 2 3 2 3 4 3 4 5 4 5 6 1 5 1 5 3 1 5 1 1 3 1 3 1 5 2\n1 5 3 1 5 Output 1 1 2\n\n",
        "cf_contest_id": 938,
        "cf_index": "G",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "data structures",
            "dsu",
            "graphs"
        ],
        "time_limit_seconds": 3.5,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5 5\r\n1 2 3\r\n2 3 4\r\n3 4 5\r\n4 5 6\r\n1 5 1\r\n5\r\n3 1 5\r\n1 1 3 1\r\n3 1 5\r\n2 1 5\r\n3 1 5\r\n",
                "1\r\n1\r\n2\r\n"
            ]
        ],
        "private_cases": []
    }
]