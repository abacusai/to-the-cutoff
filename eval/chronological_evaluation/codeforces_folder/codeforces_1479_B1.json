[
    {
        "name": "Painting the Array I",
        "description": "The only difference between the two versions is that this version asks the\nmaximal possible answer. Homer likes arrays a lot. Today he is painting an\narray \n    a_1, a_2, \n    \u2026, a_n\n with two kinds of colors, white and black.\nA painting assignment for \n    a_1, a_2, \n    \u2026, a_n\n is described by an\narray \n    b_1, b_2, \n    \u2026, b_n\n that \n    b_i\n indicates the color of\n\n    a_i\n (\n    0\n for white and \n    1\n for black). According to a painting\nassignment \n    b_1, b_2, \n    \u2026, b_n\n, the array \n    a\n is split into two\nnew arrays \n    a^(0)\n and \n    a^(1)\n, where \n    a^(0)\n is the sub-\nsequence of all white elements in \n    a\n and \n    a^(1)\n is the sub-\nsequence of all black elements in \n    a\n. For example, if \n    a =\n    [1,2,3,4,5,6]\n and \n    b = [0,1,0,1,0,0]\n, then \n    a^(0) = [1,3,5,6]\n\nand \n    a^(1) = [2,4]\n. The number of segments in an array \n    c_1, c_2,\n    \n    \u2026, c_k\n, denoted \n    \ud835\udc60\ud835\udc52\ud835\udc54(c)\n, is the number of elements if\nwe merge all adjacent elements with the same value in \n    c\n. For example,\nthe number of segments in \n    [1,1,2,2,3,3,3,2]\n is \n    4\n, because the\narray will become \n    [1,2,3,2]\n after merging adjacent elements with the\nsame value. Especially, the number of segments in an empty array is \n    0\n.\nHomer wants to find a painting assignment \n    b\n, according to which the\nnumber of segments in both \n    a^(0)\n and \n    a^(1)\n, i.e.\n\n    \ud835\udc60\ud835\udc52\ud835\udc54(a^(0))+\n    \ud835\udc60\ud835\udc52\ud835\udc54(a^(1))\n, is as large as\npossible. Find this number. Input The first line contains an integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 10^5\n). The second line contains \n    n\n integers\n\n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n). Output Output a\nsingle integer, indicating the maximal possible total number of segments.\nExamples Input 7 1 1 2 2 3 3 3 Output 6 Input 7 1 2 3 4 5 6 7 Output 7 Note In\nthe first example, we can choose \n    a^(0) = [1,2,3,3]\n, \n    a^(1) =\n    [1,2,3]\n and \n    \ud835\udc60\ud835\udc52\ud835\udc54(a^(0)) = \n    \ud835\udc60\ud835\udc52\ud835\udc54(a^(1)) = 3\n. So\nthe answer is \n    3+3 = 6\n. In the second example, we can choose \n    a^(0) =\n    [1,2,3,4,5,6,7]\n and \n    a^(1)\n is empty. We can see that\n\n    \ud835\udc60\ud835\udc52\ud835\udc54(a^(0)) = 7\n and \n    \ud835\udc60\ud835\udc52\ud835\udc54(a^(1)) = 0\n. So\nthe answer is \n    7+0 = 7\n.\n\n",
        "cf_contest_id": 1479,
        "cf_index": "B1",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "dp",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "7\r\n1 1 2 2 3 3 3\r\n",
                "6\r\n"
            ],
            [
                "7\r\n1 2 3 4 5 6 7\r\n",
                "7\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "11\r\n2 3 10 3 3 8 9 2 11 10 3\r\n",
                "11\r\n"
            ],
            [
                "11\r\n10 5 8 8 2 7 9 3 5 1 10\r\n",
                "11\r\n"
            ],
            [
                "15\r\n3 5 2 5 3 2 2 5 5 4 5 5 1 3 1\r\n",
                "14\r\n"
            ],
            [
                "8\r\n1 2 4 1 4 5 4 4\r\n",
                "8\r\n"
            ]
        ]
    }
]