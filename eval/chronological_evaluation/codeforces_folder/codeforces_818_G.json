[
    {
        "name": "Four Melodies",
        "description": "Author note: I think some of you might remember the problem \"Two Melodies\"\nfrom Eductational Codeforces Round 22. Now it's time to make it a bit more\ndifficult! Alice is a composer, and recently she had recorded two tracks that\nbecame very popular. Now she has got a lot of fans who are waiting for new\ntracks. This time Alice wants to form four melodies for her tracks. Alice has\na sheet with n notes written on it. She wants to take four such non-empty non-\nintersecting subsequences that all of them form a melody and sum of their\nlengths is maximal. Subsequence is a sequence that can be derived from another\nsequence by deleting some elements without changing the order of the remaining\nelements. Subsequence forms a melody when each two adjacent notes either\ndiffer by 1 or are congruent modulo 7. You should write a program which will\ncalculate maximum sum of lengths of such four non-empty non-intersecting\nsubsequences that all of them form a melody. Input The first line contains one\ninteger number n (4 \u2264 n \u2264 3000). The second line contains n integer numbers\na1, a2, ..., an (1 \u2264 ai \u2264 10^5) \u2014 notes written on a sheet. Output Print\nmaximum sum of lengths of such four non-empty non-intersecting subsequences\nthat all of them form a melody. Examples Input 5 1 3 5 7 9 Output 4 Input 5 1\n3 5 7 2 Output 5 Note In the first example it is possible to compose 4\nmelodies by choosing any 4 notes (and each melody will consist of only one\nnote). In the second example it is possible to compose one melody with 2 notes\n\u2014 1, 2. Remaining notes are used in other three melodies (one note per each\nmelody).\n\n",
        "cf_contest_id": 818,
        "cf_index": "G",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "flows",
            "graphs"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "5\r\n1 3 5 7 9\r\n",
                "4"
            ],
            [
                "5\r\n1 3 5 7 2\r\n",
                "5"
            ]
        ],
        "private_cases": [
            [
                "4\r\n1 3 5 7\r\n",
                "4"
            ],
            [
                "4\r\n1 1 1 1\r\n",
                "4"
            ],
            [
                "4\r\n1 1 2 1\r\n",
                "4"
            ],
            [
                "4\r\n3 2 3 1\r\n",
                "4"
            ],
            [
                "4\r\n3 4 2 2\r\n",
                "4"
            ],
            [
                "4\r\n5 3 4 3\r\n",
                "4"
            ],
            [
                "4\r\n5 3 1 4\r\n",
                "4"
            ],
            [
                "4\r\n3 5 2 4\r\n",
                "4"
            ],
            [
                "4\r\n8 6 8 1\r\n",
                "4"
            ],
            [
                "4\r\n6 3 6 4\r\n",
                "4"
            ],
            [
                "5\r\n8 1 4 8 2\r\n",
                "5"
            ],
            [
                "6\r\n2 7 8 6 5 7\r\n",
                "6"
            ],
            [
                "7\r\n9 12 12 1 8 12 12\r\n",
                "7"
            ],
            [
                "8\r\n16 1 8 13 14 5 4 4\r\n",
                "8"
            ],
            [
                "9\r\n5 4 10 10 13 17 15 15 12\r\n",
                "9"
            ],
            [
                "10\r\n19 18 20 1 7 1 3 14 1 11\r\n",
                "9"
            ],
            [
                "11\r\n6 13 20 20 3 12 8 21 3 19 18\r\n",
                "11"
            ],
            [
                "12\r\n21 20 4 4 4 15 13 12 17 15 11 13\r\n",
                "12"
            ],
            [
                "13\r\n4 17 14 24 5 17 22 25 20 3 19 12 25\r\n",
                "11"
            ],
            [
                "14\r\n8 14 20 7 26 22 7 26 2 16 19 20 5 6\r\n",
                "12"
            ],
            [
                "15\r\n3 16 14 2 24 6 11 7 9 23 13 10 7 27 27\r\n",
                "14"
            ],
            [
                "16\r\n19 9 4 4 9 21 10 18 27 9 5 3 6 12 21 18\r\n",
                "13"
            ],
            [
                "17\r\n16 26 6 8 6 25 4 31 25 23 30 21 5 34 19 8 13\r\n",
                "14"
            ],
            [
                "18\r\n17 31 24 19 7 36 23 16 28 1 22 3 20 3 12 5 10 25\r\n",
                "14"
            ],
            [
                "19\r\n8 18 34 1 25 23 22 29 12 36 10 23 21 22 8 35 1 31 29\r\n",
                "16"
            ],
            [
                "20\r\n26 5 4 29 39 3 5 16 36 18 36 11 16 8 36 4 15 37 25 13\r\n",
                "18"
            ]
        ]
    }
]