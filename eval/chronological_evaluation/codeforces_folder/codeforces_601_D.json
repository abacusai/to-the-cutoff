[
    {
        "name": "Acyclic Organic Compounds",
        "description": "You are given a tree T with n vertices (numbered 1 through n) and a letter in\neach vertex. The tree is rooted at vertex 1. Let's look at the subtree Tv of\nsome vertex v. It is possible to read a string along each simple path starting\nat v and ending at some vertex in Tv (possibly v itself). Let's denote the\nnumber of distinct strings which can be read this way as . Also, there's a\nnumber cv assigned to each vertex v. We are interested in vertices with the\nmaximum value of . You should compute two statistics: the maximum value of and\nthe number of vertices v with the maximum . Input The first line of the input\ncontains one integer n (1 \u2264 n \u2264 300 000) \u2014 the number of vertices of the tree.\nThe second line contains n space-separated integers ci (0 \u2264 ci \u2264 10^9). The\nthird line contains a string s consisting of n lowercase English letters \u2014 the\ni-th character of this string is the letter in vertex i. The following n - 1\nlines describe the tree T. Each of them contains two space-separated integers\nu and v (1 \u2264 u, v \u2264 n) indicating an edge between vertices u and v. It's\nguaranteed that the input will describe a tree. Output Print two lines. On the\nfirst line, print over all 1 \u2264 i \u2264 n. On the second line, print the number of\nvertices v for which . Examples Input 10 1 2 7 20 20 30 40 50 50 50 cacabbcddd\n1 2 6 8 7 2 6 2 5 4 5 9 3 10 2 5 2 3 Output 51 3 Input 6 0 2 4 1 1 1 raaaba 1\n2 2 3 2 4 2 5 3 6 Output 6 2 Note In the first sample, the tree looks like\nthis: The sets of strings that can be read from individual vertices are:\nFinally, the values of are: In the second sample, the values of are (5, 4, 2,\n1, 1, 1). The distinct strings read in T2 are ; note that can be read down to\nvertices 3 or 4.\n\n",
        "cf_contest_id": 601,
        "cf_index": "D",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "dsu",
            "hashing",
            "strings",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "10\r\n1 2 7 20 20 30 40 50 50 50\r\ncacabbcddd\r\n1 2\r\n6 8\r\n7 2\r\n6 2\r\n5 4\r\n5 9\r\n3 10\r\n2 5\r\n2 3\r\n",
                "51 3\r\n"
            ],
            [
                "6\r\n0 2 4 1 1 1\r\nraaaba\r\n1 2\r\n2 3\r\n2 4\r\n2 5\r\n3 6\r\n",
                "6 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "16\r\n186427765 186427335 186426882 186427151 186427355 186427547 186427780 186426890 186426952 186427412 186426996 186427780 186427370 186426915 186426997 186427778\r\njogkjtcexuevqevc\r\n16 13\r\n1 15\r\n9 10\r\n2 15\r\n7 9\r\n15 9\r\n8 2\r\n12 9\r\n11 6\r\n11 16\r\n14 5\r\n4 15\r\n14 15\r\n3 13\r\n13 1\r\n",
                "186427781 4\r\n"
            ],
            [
                "1\r\n1000000000\r\na\r\n",
                "1000000001 1\r\n"
            ],
            [
                "1\r\n0\r\nz\r\n",
                "1 1\r\n"
            ],
            [
                "2\r\n1 2\r\naa\r\n1 2\r\n",
                "3 2\r\n"
            ],
            [
                "2\r\n1 2\r\nab\r\n1 2\r\n",
                "3 2\r\n"
            ]
        ]
    }
]