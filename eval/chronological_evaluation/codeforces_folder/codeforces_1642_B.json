[
    {
        "name": "Power Walking",
        "description": "Sam is a kindergartener, and there are \n    n\n children in his group. He\ndecided to create a team with some of his children to play \"brawl:go 2\". Sam\nhas \n    n\n power-ups, the \n    i\n-th has type \n    a_i\n. A child's strength\nis equal to the number of different types among power-ups he has. For a team\nof size \n    k\n, Sam will distribute all \n    n\n power-ups to \n    k\n children\nin such a way that each of the \n    k\n children receives at least one power-\nup, and each power-up is given to someone. For each integer \n    k\n from\n\n    1\n to \n    n\n, find the minimum sum of strengths of a team of \n    k\n\nchildren Sam can get. Input Each test contains multiple test cases. The first\nline contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 3 \n    \u00b7 10^5\n)\n\u2014 the number of test cases. Description of the test cases follows. The first\nline of each test case contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 3\n    \n    \u00b7 10^5\n). The second line contains \n    n\n integers \n    a_1, a_2,\n    \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 types of Sam's power-ups. It\nis guaranteed that the sum of \n    n\n over all test cases does not exceed \n    3\n    \n    \u00b7 10^5\n. Output For every test case print \n    n\n integers. The\n\n    k\n-th integer should be equal to the minimum sum of strengths of children\nin the team of size \n    k\n that Sam can get. Example Input 2 3 1 1 2 6 5 1 2\n2 2 4 Output 2 2 3 4 4 4 4 5 6 Note One of the ways to give power-ups to\nminimise the sum of strengths in the first test case: \n    k = 1: \n    \n    1, 1,\n    2\n \n    k = 2: \n    \n    1, 1\n    \n    , \n    \n    2\n \n    k = 3: \n    \n    1\n    \n    ,\n    \n    \n    1\n    \n    , \n    \n    2\n One of the ways to give power-ups to minimise the\nsum of strengths in the second test case: \n    k = 1: \n    \n    1, 2, 2, 2, 4,\n    5\n \n    k = 2: \n    \n    2, 2, 2, 4, 5\n    \n    , \n    \n    1\n \n    k = 3: \n    \n    2,\n    2, 2, 5\n    \n    , \n    \n    1\n    \n    , \n    \n    4\n \n    k = 4: \n    \n    2, 2, 2\n    \n    ,\n    \n    \n    1\n    \n    , \n    \n    4\n    \n    , \n    \n    5\n \n    k = 5: \n    \n    2, 2\n    \n    ,\n    \n    \n    1\n    \n    , \n    \n    2\n    \n    , \n    \n    4\n    \n    , \n    \n    5\n \n    k = 6: \n    \n    1\n    \n    ,\n    \n    \n    2\n    \n    , \n    \n    2\n    \n    , \n    \n    2\n    \n    , \n    \n    4\n    \n    , \n    \n    5\n\n\n",
        "cf_contest_id": 1642,
        "cf_index": "B",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n3\r\n1 1 2\r\n6\r\n5 1 2 2 2 4\r\n",
                "2 2 3\r\n4 4 4 4 5 6\r\n"
            ]
        ],
        "private_cases": []
    }
]