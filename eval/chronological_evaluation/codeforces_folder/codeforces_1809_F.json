[
    {
        "name": "Traveling in Berland",
        "description": "There are \n    n\n cities in Berland, arranged in a circle and numbered from\n\n    1\n to \n    n\n in clockwise order. You want to travel all over Berland,\nstarting in some city, visiting all the other cities and returning to the\nstarting city. Unfortunately, you can only drive along the Berland Ring\nHighway, which connects all \n    n\n cities. The road was designed by a very\ntitled and respectable minister, so it is one-directional \u2014 it can only be\ntraversed clockwise, only from the city \n    i\n to the city \n    (i \n     n) +\n    1\n (i.e. from \n    1\n to \n    2\n, from \n    2\n in \n    3\n, ..., from \n    n\n\nto \n    1\n). The fuel tank of your car holds up to \n    k\n liters of fuel. To\ndrive from the \n    i\n-th city to the next one, \n    a_i\n liters of fuel are\nneeded (and are consumed in the process). Every city has a fuel station; a\nliter of fuel in the \n    i\n-th city costs \n    b_i\n burles. Refueling between\ncities is not allowed; if fuel has run out between cities, then your journey\nis considered incomplete. For each city, calculate the minimum cost of the\njourney if you start and finish it in that city. Input The first line contains\na single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test\ncases. The first line of each test case contains two integers \n    n\n and\n\n    k\n (\n    3 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n; \n    1 \n    \u2264 k \n    \u2264 10^9\n) \u2014\nthe number of cities and the volume of fuel tank, respectively. The second\nline contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i\n    \n    \u2264 k\n). The third line contains \n    n\n integers \n    b_1, b_2, \n    \u2026,\n    b_n\n (\n    1 \n    \u2264 b_i \n    \u2264 2\n). The sum of \n    n\n over all test cases\ndoesn't exceed \n    2 \n    \u00b7 10^5\n. Output For each test case, print \n    n\n\nintegers, where the \n    i\n-th of them is equal to the minimum cost of the\njourney if you start and finish in the \n    i\n-th city. Example Input 4 3 5 3\n4 4 1 2 2 5 7 1 3 2 5 1 2 1 1 1 2 4 3 1 2 1 3 2 2 2 2 3 2 2 2 2 1 2 1 Output\n17 19 17 13 12 12 12 14 14 14 14 14 8 8 8\n\n",
        "cf_contest_id": 1809,
        "cf_index": "F",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "graphs",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3 5\r\n3 4 4\r\n1 2 2\r\n5 7\r\n1 3 2 5 1\r\n2 1 1 1 2\r\n4 3\r\n1 2 1 3\r\n2 2 2 2\r\n3 2\r\n2 2 2\r\n1 2 1\r\n",
                "17 19 17\r\n13 12 12 12 14\r\n14 14 14 14\r\n8 8 8\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n4 5\r\n1 3 1 2\r\n1 1 1 2\r\n5 1\r\n1 1 1 1 1\r\n1 1 1 2 2\r\n4 5\r\n4 3 1 2\r\n1 1 1 2\r\n5 2\r\n2 1 2 2 1\r\n1 1 2 1 1\r\n",
                "7 7 7 9\r\n7 7 7 7 7\r\n10 10 10 12\r\n9 9 10 9 9\r\n"
            ]
        ]
    }
]