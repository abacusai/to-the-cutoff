[
    {
        "name": "Coins",
        "description": "In Berland, there are two types of coins, having denominations of \n    2\n and\n\n    k\n burles. Your task is to determine whether it is possible to represent\n\n    n\n burles in coins, i. e. whether there exist non-negative integers\n\n    x\n and \n    y\n such that \n    2 \n    \u00b7 x + k \n    \u00b7 y = n\n. Input The\nfirst line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014\nthe number of test cases. The only line of each test case contains two\nintegers \n    n\n and \n    k\n (\n    1 \n    \u2264 k \n    \u2264 n \n    \u2264 10^18\n; \n    k\n    \n     2\n). Output For each test case, print YES if it is possible to\nrepresent \n    n\n burles in coins; otherwise, print NO. You may print each\nletter in any case (YES, yes, Yes will all be recognized as positive answer,\nNO, no and nO will all be recognized as negative answer). Example Input 4 5 3\n6 1 7 4 8 8 Output YES YES NO YES Note In the first test case, you can take\none coin with denomination \n    2\n and one coin with denomination \n    k = 3\n.\nIn the second test case, you can take three coins with denomination \n    2\n.\nAlternatively, you can take six coins with denomination \n    k = 1\n. In the\nthird test case, there is no way to represent \n    7\n burles. In the fourth\ntest case, you can take one coin with denomination \n    k = 8\n.\n\n",
        "cf_contest_id": 1814,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n5 3\r\n6 1\r\n7 4\r\n8 8\r\n",
                "YES\r\nYES\r\nNO\r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1000000000000000000 3\r\n",
                "YES\r\n"
            ],
            [
                "1\r\n100000000000000001 4\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n99999999999999999 4\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n999999999999999 4\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n100000000000001 4\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n999999999999999999 4\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n100000000001 4\r\n",
                "NO\r\n"
            ],
            [
                "4\r\n100000000001 4\r\n100000000001 3\r\n100000000000 4\r\n100000000000 3\r\n",
                "NO\r\nYES\r\nYES\r\nYES\r\n"
            ],
            [
                "1\r\n1000000000000001 4\r\n",
                "NO\r\n"
            ],
            [
                "10\r\n99999999999999999 4\r\n99999999999999999 6\r\n99999999999999999 8\r\n99999999999999999 10\r\n99999999999999999 12\r\n99999999999999999 14\r\n99999999999999999 16\r\n99999999999999999 18\r\n99999999999999999 20\r\n99999999999999997 4\r\n",
                "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\n"
            ],
            [
                "1\r\n10000000000000001 4\r\n",
                "NO\r\n"
            ],
            [
                "5\r\n100000000000000001 4\r\n100000000000000003 4\r\n100000000000000007 4\r\n100000000000000005 4\r\n100000000000000000 4\r\n",
                "NO\r\nNO\r\nNO\r\nNO\r\nYES\r\n"
            ]
        ]
    }
]