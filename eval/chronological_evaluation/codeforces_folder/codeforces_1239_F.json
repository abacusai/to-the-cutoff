[
    {
        "name": "Swiper, no swiping!",
        "description": "I'm the Map, I'm the Map! I'm the MAP!!! Map In anticipation of new adventures\nBoots wanted to do a good deed. After discussion with the Map and Backpack,\nthey decided to gift Dora a connected graph. After a long search, Boots chose\n\n    t\n graph's variants, which Dora might like. However fox Swiper wants to\nspoil his plan. The Swiper knows, that Dora now is only able to count up to\n\n    3\n, so he has came up with a following idea. He wants to steal some non-\nempty set of vertices, so that the Dora won't notice the loss. He has decided\nto steal some non-empty set of vertices, so that after deletion of the stolen\nvertices and edges adjacent to them, every remaining vertex wouldn't change\nit's degree modulo \n    3\n. The degree of a vertex is the number of edges it\nis adjacent to. It would've been suspicious to steal all the vertices, so\nSwiper needs another plan. Boots are sure, that the crime can not be allowed.\nHowever they are afraid, that they won't be able to handle this alone. So\nBoots decided to ask for your help. Please determine for every graph's variant\nwhether the Swiper can perform the theft or not. Input The first line contains\na single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n     000\n) \u2014 the number of\ngraph variants. The first line of each variant contains integers \n    n\n,\n\n    m\n (\n    1 \n    \u2264 n \n    \u2264 500\n     000\n, \n    0 \n    \u2264 m \n    \u2264 500\n     000\n),\nthe number of vertexes and edges in the graph. Then \n    m\n lines follow, each\ncontaining integers \n    a_i\n, \n    b_i\n (\n    1 \n    \u2264 a_i, b_i \n    \u2264 n\n), the\nindices of the vertices connected with a corresponding edge. It's guaranteed,\nthat the graph is connected and doesn't contain multiple edges or self-loops.\nIt's guaranteed, that the sum of \n    n\n over all variants is at most\n\n    500\n     000\n and that the sum of \n    m\n over all variants is at most\n\n    500\n     000\n. Descriptions of graph's variants are separated with an empty\nline. Output For each variant: In case the answer exists, print \"Yes\" and then\nthe answer itself.The first line should contain an integer \n    c\n (\n    1 < c <\n    n\n), the number of vertices the Crook can steal, without Dora noticing the\nloss. On the next line print \n    c\n distinct integers, the indices of the\ngraph's vertices in arbitrary order. Otherwise print \"No\". In case there are\nseveral correct ways to steal the vertices, print any of them. Please note,\nthat it's not required to maximize the number of stolen vertices. Example\nInput 3 3 3 1 2 2 3 3 1 6 6 1 2 1 3 2 3 2 5 2 6 2 4 8 12 1 2 1 3 2 3 1 4 4 5 5\n1 3 6 3 7 3 8 6 1 7 1 8 1 Output No Yes 3 4 5 6 Yes 3 6 7 8 Note The picture\nbelow shows the third variant from the example test. The set of the vertices\nthe Crook can steal is denoted with bold.\n\n",
        "cf_contest_id": 1239,
        "cf_index": "F",
        "cf_rating": 3400,
        "difficulty": 0,
        "cf_tags": [
            "graphs",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n3 3\r\n1 2\r\n2 3\r\n3 1\r\n\r\n6 6\r\n1 2\r\n1 3\r\n2 3\r\n2 5\r\n2 6\r\n2 4\r\n\r\n8 12\r\n1 2\r\n1 3\r\n2 3\r\n1 4\r\n4 5\r\n5 1\r\n3 6\r\n3 7\r\n3 8\r\n6 1\r\n7 1\r\n8 1\r\n",
                "No\r\nYes\r\n3\r\n1 3 4 \r\nYes\r\n3\r\n6 7 8 \r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n18 35\r\n16 14\r\n14 10\r\n17 6\r\n1 10\r\n2 5\r\n17 18\r\n13 4\r\n18 15\r\n3 15\r\n4 8\r\n7 10\r\n7 14\r\n4 14\r\n1 18\r\n14 1\r\n2 3\r\n2 14\r\n17 13\r\n18 16\r\n3 16\r\n1 9\r\n10 17\r\n14 12\r\n3 13\r\n2 13\r\n14 6\r\n7 11\r\n9 6\r\n6 4\r\n12 8\r\n3 5\r\n2 7\r\n16 13\r\n11 18\r\n1 4\r\n",
                "Yes\r\n16\r\n1 2 3 4 5 7 8 9 10 11 12 13 14 15 16 18 \r\n"
            ],
            [
                "1\r\n20 23\r\n10 15\r\n4 10\r\n2 16\r\n9 13\r\n11 6\r\n6 13\r\n17 15\r\n16 20\r\n15 13\r\n6 9\r\n1 18\r\n19 10\r\n20 17\r\n6 12\r\n17 10\r\n7 18\r\n5 11\r\n15 14\r\n1 4\r\n5 17\r\n3 13\r\n2 8\r\n13 14\r\n",
                "Yes\r\n18\r\n1 2 3 4 5 6 7 8 9 11 12 13 14 15 16 17 18 20 \r\n"
            ],
            [
                "1\r\n11 18\r\n1 2\r\n1 3\r\n2 3\r\n1 4\r\n1 5\r\n1 7\r\n1 8\r\n1 9\r\n1 10\r\n1 11\r\n1 6\r\n11 6\r\n4 5\r\n2 4\r\n4 7\r\n4 8\r\n2 9\r\n2 10\r\n",
                "Yes\r\n6\r\n4 5 7 8 9 10 \r\n"
            ]
        ]
    }
]