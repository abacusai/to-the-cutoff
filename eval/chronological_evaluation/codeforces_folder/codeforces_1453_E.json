[
    {
        "name": "Dog Snacks",
        "description": "Gildong is playing with his dog, Badugi. They're at a park that has \n    n\n\nintersections and \n    n-1\n bidirectional roads, each \n    1\n meter in length\nand connecting two intersections with each other. The intersections are\nnumbered from \n    1\n to \n    n\n, and for every \n    a\n and \n    b\n (\n    1\n    \n    \u2264 a, b \n    \u2264 n\n), it is possible to get to the \n    b\n-th intersection\nfrom the \n    a\n-th intersection using some set of roads. Gildong has put one\nsnack at every intersection of the park. Now Gildong will give Badugi a\nmission to eat all of the snacks. Badugi starts at the \n    1\n-st\nintersection, and he will move by the following rules: Badugi looks for snacks\nthat are as close to him as possible. Here, the distance is the length of the\nshortest path from Badugi's current location to the intersection with the\nsnack. However, Badugi's sense of smell is limited to \n    k\n meters, so he\ncan only find snacks that are less than or equal to \n    k\n meters away from\nhimself. If he cannot find any such snack, he fails the mission. Among all the\nsnacks that Badugi can smell from his current location, he chooses a snack\nthat minimizes the distance he needs to travel from his current intersection.\nIf there are multiple such snacks, Badugi will choose one arbitrarily. He\nrepeats this process until he eats all \n    n\n snacks. After that, he has to\nfind the \n    1\n-st intersection again which also must be less than or equal\nto \n    k\n meters away from the last snack he just ate. If he manages to find\nit, he completes the mission. Otherwise, he fails the mission. Unfortunately,\nGildong doesn't know the value of \n    k\n. So, he wants you to find the\nminimum value of \n    k\n that makes it possible for Badugi to complete his\nmission, if Badugi moves optimally. Input Each test contains one or more test\ncases. The first line contains the number of test cases \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 10^4\n). The first line of each test case contains one integer \n    n\n\n(\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of intersections of the\npark. The next \n    n-1\n lines contain two integers \n    u\n and \n    v\n (\n    1\n    \n    \u2264 u,v \n    \u2264 n\n, \n    u \n     v\n) each, which means there is a road\nbetween intersection \n    u\n and \n    v\n. All roads are bidirectional and\ndistinct. It is guaranteed that: For each test case, for every \n    a\n and\n\n    b\n (\n    1 \n    \u2264 a, b \n    \u2264 n\n), it is possible to get to the \n    b\n-th\nintersection from the \n    a\n-th intersection. The sum of \n    n\n in all test\ncases doesn't exceed \n    2 \n    \u00b7 10^5\n. Output For each test case, print\none integer \u2014 the minimum possible value of \n    k\n such that Badugi can\ncomplete the mission. Example Input 3 3 1 2 1 3 4 1 2 2 3 3 4 8 1 2 2 3 3 4 1\n5 5 6 6 7 5 8 Output 2 3 3 Note In the first case, Badugi can complete his\nmission with \n    k=2\n by moving as follows: Initially, Badugi is at the\n\n    1\n-st intersection. The closest snack is obviously at the \n    1\n-st\nintersection, so he just eats it. Next, he looks for the closest snack, which\ncan be either the one at the \n    2\n-nd or the one at the \n    3\n-rd\nintersection. Assume that he chooses the \n    2\n-nd intersection. He moves to\nthe \n    2\n-nd intersection, which is \n    1\n meter away, and eats the snack.\nNow the only remaining snack is on the \n    3\n-rd intersection, and he needs\nto move along \n    2\n paths to get to it. After eating the snack at the\n\n    3\n-rd intersection, he needs to find the \n    1\n-st intersection again,\nwhich is only \n    1\n meter away. As he gets back to it, he completes the\nmission. In the second case, the only possible sequence of moves he can make\nis \n    1\n \u2013 \n    2\n \u2013 \n    3\n \u2013 \n    4\n \u2013 \n    1\n. Since the distance between\nthe \n    4\n-th intersection and the \n    1\n-st intersection is \n    3\n,\n\n    k\n needs to be at least \n    3\n for Badugi to complete his mission. In\nthe third case, Badugi can make his moves as follows: \n    1\n \u2013 \n    5\n \u2013\n\n    6\n \u2013 \n    7\n \u2013 \n    8\n \u2013 \n    2\n \u2013 \n    3\n \u2013 \n    4\n \u2013 \n    1\n. It can be\nshown that this is the only possible sequence of moves for Badugi to complete\nhis mission with \n    k=3\n.\n\n",
        "cf_contest_id": 1453,
        "cf_index": "E",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dfs and similar",
            "dp",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n3\r\n1 2\r\n1 3\r\n4\r\n1 2\r\n2 3\r\n3 4\r\n8\r\n1 2\r\n2 3\r\n3 4\r\n1 5\r\n5 6\r\n6 7\r\n5 8\r\n",
                "2\r\n3\r\n3\r\n"
            ]
        ],
        "private_cases": []
    }
]