[
    {
        "name": "TMT Document",
        "description": "The student council has a shared document file. Every day, some members of the\nstudent council write the sequence TMT (short for Towa Maji Tenshi) in it.\nHowever, one day, the members somehow entered the sequence into the document\nat the same time, creating a jumbled mess. Therefore, it is Suguru Doujima's\ntask to figure out whether the document has malfunctioned. Specifically, he is\ngiven a string of length \n    n\n whose characters are all either T or M, and\nhe wants to figure out if it is possible to partition it into some number of\ndisjoint subsequences, all of which are equal to TMT. That is, each character\nof the string should belong to exactly one of the subsequences. A string\n\n    a\n is a subsequence of a string \n    b\n if \n    a\n can be obtained from\n\n    b\n by deletion of several (possibly, zero) characters. Input The first\nline contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 5000\n) \u2014 the number of\ntest cases. The first line of each test case contains an integer \n    n\n (\n    3\n    \n    \u2264 n < 10^5\n), the number of characters in the string entered in the\ndocument. It is guaranteed that \n    n\n is divisible by \n    3\n. The second\nline of each test case contains a string of length \n    n\n consisting of only\nthe characters T and M. It is guaranteed that the sum of \n    n\n over all test\ncases does not exceed \n    10^5\n. Output For each test case, print a single\nline containing YES if the described partition exists, and a single line\ncontaining NO otherwise. Example Input 5 3 TMT 3 MTT 6 TMTMTT 6 TMTTTT 6\nTTMMTT Output YES NO YES NO YES Note In the first test case, the string itself\nis already a sequence equal to TMT. In the third test case, we may partition\nthe string into the subsequences TMTMTT. Both the bolded and the non-bolded\nsubsequences are equal to TMT.\n\n",
        "cf_contest_id": 1509,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3\r\nTMT\r\n3\r\nMTT\r\n6\r\nTMTMTT\r\n6\r\nTMTTTT\r\n6\r\nTTMMTT\r\n",
                "YES\r\nNO\r\nYES\r\nNO\r\nYES\r\n"
            ]
        ],
        "private_cases": []
    }
]