[
    {
        "name": "Manipulating History",
        "description": "As a human, she can erase history of its entirety. As a Bai Ze (Hakutaku), she\ncan create history out of nothingness. \u2014Perfect Memento in Strict Sense Keine\nhas the ability to manipulate history. The history of Gensokyo is a string\n\n    s\n of length \n    1\n initially. To fix the chaos caused by Yukari, she\nneeds to do the following operations \n    n\n times, for the \n    i\n-th time:\nShe chooses a non-empty substring \n    t_2i-1\n of \n    s\n. She replaces\n\n    t_2i-1\n with a non-empty string, \n    t_2i\n. Note that the lengths of\nstrings \n    t_2i-1\n and \n    t_2i\n can be different.Note that if\n\n    t_2i-1\n occurs more than once in \n    s\n, exactly one of them will be\nreplaced. For example, let \n    s=\n\"marisa\", \n    t_2i-1=\n\"a\", and\n\n    t_2i=\n\"z\". After the operation, \n    s\n becomes \"mzrisa\" or \"marisz\".\nAfter \n    n\n operations, Keine got the final string and an operation sequence\n\n    t\n of length \n    2n\n. Just as Keine thinks she has finished, Yukari\nappears again and shuffles the order of \n    t\n. Worse still, Keine forgets\nthe initial history. Help Keine find the initial history of Gensokyo! Recall\nthat a substring is a sequence of consecutive characters of the string. For\nexample, for string \"abc\" its substrings are: \"ab\", \"c\", \"bc\" and some others.\nBut the following strings are not its substring: \"ac\", \"cba\", \"acb\". Hacks You\ncannot make hacks in this problem. Input Each test contains multiple test\ncases. The first line contains a single integer \n    T\n (\n    1 \n    \u2264 T \n    \u2264\n    10^3\n) \u2014 the number of test cases. The description of the test cases\nfollows. The first line of each test case contains a single integer \n    n\n\n(\n    1 \n    \u2264 n < 10 ^ 5\n) \u2014 the number of operations. The next \n    2n\n lines\ncontains one non-empty string \n    t_i\n \u2014 the \n    i\n-th string of the\nshuffled sequence \n    t\n. The next line contains one non-empty string \n    s\n\n\u2014 the final string. It is guaranteed that the total length of given strings\n(including \n    t_i\n and \n    s\n) over all test cases does not exceed \n    2\n    \n    \u00b7 10 ^ 5\n. All given strings consist of lowercase English letters\nonly. It is guaranteed that the initial string exists. It can be shown that\nthe initial string is unique. Output For each test case, print the initial\nstring in one line. Example Input 2 2 a ab b cd acd 3 z a a aa yakumo ran\nyakumoran Output a z Note Test case 1: Initially \n    s\n is \"a\". In the first\noperation, Keine chooses \"a\", and replaces it with \"ab\". \n    s\n becomes \"ab\".\nIn the second operation, Keine chooses \"b\", and replaces it with \"cd\". \n    s\n\nbecomes \"acd\".So the final string is \"acd\", and \n    t=[\n\"a\", \"ab\", \"b\",\n\"cd\"\n    ]\n before being shuffled. Test case 2: Initially \n    s\n is \"z\". In\nthe first operation, Keine chooses \"z\", and replaces it with \"aa\". \n    s\n\nbecomes \"aa\". In the second operation, Keine chooses \"a\", and replaces it with\n\"ran\". \n    s\n becomes \"aran\". In the third operation, Keine chooses \"a\", and\nreplaces it with \"yakumo\". \n    s\n becomes \"yakumoran\".So the final string is\n\"yakumoran\", and \n    t=[\n\"z\", \"aa\", \"a\", \"ran\", \"a\", \"yakumo\"\n    ]\n before\nbeing shuffled.\n\n",
        "cf_contest_id": 1688,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n2\r\na\r\nab\r\nb\r\ncd\r\nacd\r\n3\r\nz\r\na\r\na\r\naa\r\nyakumo\r\nran\r\nyakumoran\r\n",
                "a\r\nz\r\n"
            ]
        ],
        "private_cases": []
    }
]