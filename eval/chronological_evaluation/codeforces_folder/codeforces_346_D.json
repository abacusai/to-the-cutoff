[
    {
        "name": "Robot Control",
        "description": "The boss of the Company of Robot is a cruel man. His motto is \"Move forward Or\nDie!\". And that is exactly what his company's product do. Look at the behavior\nof the company's robot when it is walking in the directed graph. This behavior\nhas been called \"Three Laws of Robotics\": Law 1. The Robot will destroy itself\nwhen it visits a vertex of the graph which it has already visited. Law 2. The\nRobot will destroy itself when it has no way to go (that is when it reaches a\nvertex whose out-degree is zero). Law 3. The Robot will move randomly when it\nhas multiple ways to move (that is when it reach a vertex whose out-degree is\nmore than one). Of course, the robot can move only along the directed edges of\nthe graph. Can you imagine a robot behaving like that? That's why they are\nsold at a very low price, just for those who are short of money, including\nmzry1992, of course. mzry1992 has such a robot, and she wants to move it from\nvertex s to vertex t in a directed graph safely without self-destruction.\nLuckily, she can send her robot special orders at each vertex. A special order\nshows the robot which way to move, if it has multiple ways to move (to prevent\nrandom moving of the robot according to Law 3). When the robot reaches vertex\nt, mzry1992 takes it off the graph immediately. So you can see that, as long\nas there exists a path from s to t, she can always find a way to reach the\ngoal (whatever the vertex t has the outdegree of zero or not). Sample 2\nHowever, sending orders is expensive, so your task is to find the minimum\nnumber of orders mzry1992 needs to send in the worst case. Please note that\nmzry1992 can give orders to the robot while it is walking on the graph. Look\nat the first sample to clarify that part of the problem. Input The first line\ncontains two integers n (1 \u2264 n \u2264 10^6) \u2014 the number of vertices of the graph,\nand m (1 \u2264 m \u2264 10^6) \u2014 the number of edges. Then m lines follow, each with two\nintegers ui and vi (1 \u2264 ui, vi \u2264 n; vi \u2260 ui), these integers denote that there\nis a directed edge from vertex ui to vertex vi. The last line contains two\nintegers s and t (1 \u2264 s, t \u2264 n). It is guaranteed that there are no multiple\nedges and self-loops. Output If there is a way to reach a goal, print the\nrequired minimum number of orders in the worst case. Otherwise, print -1.\nExamples Input 4 6 1 2 2 1 1 3 3 1 2 4 3 4 1 4 Output 1 Input 4 5 1 2 2 1 1 3\n2 4 3 4 1 4 Output 1 Note Consider the first test sample. Initially the robot\nis on vertex 1. So, on the first step the robot can go to vertex 2 or 3. No\nmatter what vertex the robot chooses, mzry1992 must give an order to the\nrobot. This order is to go to vertex 4. If mzry1992 doesn't give an order to\nthe robot at vertex 2 or 3, the robot can choose the \"bad\" outgoing edge\n(return to vertex 1) according Law 3. So, the answer is one.\n\n",
        "cf_contest_id": 346,
        "cf_index": "D",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "graphs",
            "shortest paths"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 6\r\n1 2\r\n2 1\r\n1 3\r\n3 1\r\n2 4\r\n3 4\r\n1 4\r\n",
                "1"
            ],
            [
                "4 5\r\n1 2\r\n2 1\r\n1 3\r\n2 4\r\n3 4\r\n1 4\r\n",
                "1"
            ]
        ],
        "private_cases": [
            [
                "10 10\r\n4 5\r\n9 3\r\n3 2\r\n3 8\r\n2 9\r\n9 8\r\n9 2\r\n7 9\r\n6 4\r\n9 4\r\n3 2\r\n",
                "1"
            ],
            [
                "20 50\r\n7 17\r\n5 6\r\n2 15\r\n16 3\r\n14 5\r\n17 16\r\n1 17\r\n15 3\r\n14 20\r\n5 4\r\n16 5\r\n19 14\r\n3 2\r\n11 2\r\n8 18\r\n16 6\r\n14 1\r\n16 14\r\n4 16\r\n10 12\r\n18 17\r\n3 12\r\n15 5\r\n2 6\r\n6 15\r\n9 4\r\n7 20\r\n9 10\r\n1 6\r\n19 7\r\n19 12\r\n9 17\r\n19 1\r\n17 18\r\n4 19\r\n11 14\r\n17 5\r\n8 17\r\n18 9\r\n17 1\r\n18 8\r\n16 2\r\n12 15\r\n10 15\r\n2 1\r\n9 2\r\n1 15\r\n13 16\r\n15 1\r\n5 9\r\n19 8\r\n",
                "4"
            ],
            [
                "15 16\r\n1 2\r\n2 3\r\n2 4\r\n2 5\r\n3 6\r\n5 9\r\n3 7\r\n5 8\r\n7 10\r\n8 11\r\n7 12\r\n8 12\r\n4 13\r\n13 14\r\n14 15\r\n15 12\r\n1 12\r\n",
                "1"
            ]
        ]
    }
]