[
    {
        "name": "Kirei and the Linear Function",
        "description": "Given the string \n    s\n of decimal digits (0-9) of length \n    n\n. A\nsubstring is a sequence of consecutive characters of a string. The substring\nof this string is defined by a pair of indexes \u2014 with its left and right ends.\nSo, each pair of indexes (\n    l, r\n), where \n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 n\n,\ncorresponds to a substring of the string \n    s\n. We will define as\n\n    v(l,r)\n the numeric value of the corresponding substring (leading zeros\nare allowed in it). For example, if \n    n=7\n, \n    s=\n\"1003004\", then\n\n    v(1,3)=100\n, \n    v(2,3)=0\n and \n    v(2,7)=3004\n. You are given \n    n\n,\n\n    s\n and an integer \n    w\n (\n    1 \n    \u2264 w < n\n). You need to process\n\n    m\n queries, each of which is characterized by \n    3\n numbers \n    l_i,\n    r_i, k_i\n (\n    1 \n    \u2264 l_i \n    \u2264 r_i \n    \u2264 n; 0 \n    \u2264 k_i \n    \u2264 8\n). The\nanswer to the \n    i\nth query is such a pair of substrings of length \n    w\n\nthat if we denote them as \n    (L_1, L_1+w-1)\n and \n    (L_2, L_2+w-1)\n, then:\n\n    L_1 \n     L_2\n, that is, the substrings are different; the remainder of\ndividing a number \n    v(L_1, L_1+w-1) \n    \u00b7 v(l_i, r_i) + v(L_2, L_2 + w -\n    1)\n by \n    9\n is equal to \n    k_i\n. If there are many matching substring\npairs, then find a pair where \n    L_1\n is as small as possible. If there are\nmany matching pairs in this case, then minimize \n    L_2\n. Note that the\nanswer may not exist. Input The first line contains a single integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 number of input test cases. The first line of\neach test case contains a string \n    s\n, which contains only the characters\n0-9 and has a length \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n). The\nsecond line contains two integers \n    w, m\n (\n    1 \n    \u2264 w < n, 1 \n    \u2264 m\n    \n    \u2264 2 \n    \u00b7 10^5\n), where \n    n\n \u2014 is the length of the given string\n\n    s\n. The number \n    w\n denotes the lengths of the substrings being\nsearched for, and \n    m\n is the number of queries to be processed. The\nfollowing \n    m\n lines contain integers \n    l_i, r_i, k_i\n (\n    1 \n    \u2264 l_i\n    \n    \u2264 r_i \n    \u2264 n\n, \n    0 \n    \u2264 k_i \n    \u2264 8\n) \u2014 \n    i\nth query parameters.\nIt is guaranteed that the sum of \n    n\n over all test cases does not exceed\n\n    2 \n    \u00b7 10^5\n. It is also guaranteed that the sum of \n    m\n over all\ntest cases does not exceed \n    2 \n    \u00b7 10^5\n. Output For each request,\nprint in a separate line: left borders of the required substrings: \n    L_1\n\nand \n    L_2\n; -1 -1 otherwise, if there is no solution. If there are several\nsolutions, minimize \n    L_1\n first, and minimize \n    L_2\n second. Example\nInput 5 1003004 4 1 1 2 1 179572007 4 2 2 7 3 2 7 4 111 2 1 2 2 6 0000 1 2 1 4\n0 1 4 1 484 1 5 2 2 0 2 3 7 1 2 5 3 3 8 2 2 6 Output 2 4 1 5 1 2 -1 -1 1 2 -1\n-1 1 3 1 3 -1 -1 -1 -1 -1 -1 Note Consider the first test case of example\ninputs. In this test case \n    n=7\n, \n    s=\n\"1003004\", \n    w=4\n and one\nquery \n    l_1=1\n, \n    r_1=2\n, \n    k_1=1\n. Note that \n    v(1,2)=10\n. We\nneed to find a pair of substrings of length \n    4\n such that \n    v(L_1,\n    L_1+3)\n    \u00b710+v(L_2,L_2+3)\n has a remainder of \n    k_1=1\n when divided by\n\n    9\n. The values \n    L_1=2, L_2=4\n actually satisfy all the requirements:\n\n    v(L_1, L_1+w-1)=v(2,5)=30\n, \n    v(L_2, L_2+w-1)=v(4,7)=3004\n. Indeed,\n\n    30\n    \u00b710+3004=3304\n, which has a remainder of \n    1\n when divided by\n\n    9\n. It can be shown that \n    L_1=2\n is the minimum possible value, and\n\n    L_2=4\n is the minimum possible with \n    L_1=2\n.\n\n",
        "cf_contest_id": 1729,
        "cf_index": "F",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "hashing",
            "math"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1003004\r\n4 1\r\n1 2 1\r\n179572007\r\n4 2\r\n2 7 3\r\n2 7 4\r\n111\r\n2 1\r\n2 2 6\r\n0000\r\n1 2\r\n1 4 0\r\n1 4 1\r\n484\r\n1 5\r\n2 2 0\r\n2 3 7\r\n1 2 5\r\n3 3 8\r\n2 2 6\r\n",
                "2 4\r\n1 5\r\n1 2\r\n-1 -1\r\n1 2\r\n-1 -1\r\n1 3\r\n1 3\r\n-1 -1\r\n-1 -1\r\n-1 -1\r\n"
            ]
        ],
        "private_cases": []
    }
]