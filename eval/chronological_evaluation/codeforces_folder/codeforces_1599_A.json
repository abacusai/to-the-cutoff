[
    {
        "name": "Weights",
        "description": "You are given an array \n    A\n of length \n    N\n weights of masses \n    A_1\n,\n\n    A_2\n...\n    A_N\n. No two weights have the same mass. You can put every\nweight on one side of the balance (left or right). You don't have to put\nweights in order \n    A_1\n,...,\n    A_N\n. There is also a string \n    S\n\nconsisting of characters \"L\" and \"R\", meaning that after putting the\n\n    i-th\n weight (not \n    A_i\n, but \n    i-th\n weight of your choice) left\nor right side of the balance should be heavier. Find the order of putting the\nweights on the balance such that rules of string \n    S\n are satisfied. Input\nThe first line contains one integer \n    N\n (\n    1 \n    \u2264 N \n    \u2264 2*10^5\n) -\nthe length of the array \n    A\n The second line contains \n    N\n distinct\nintegers: \n    A_1\n, \n    A_2\n,...,\n    A_N\n (\n    1 \n    \u2264 A_i \n    \u2264 10^9\n)\n- the weights given The third line contains string \n    S\n of length \n    N\n\nconsisting only of letters \"L\" and \"R\" - string determining which side of the\nbalance should be heavier after putting the \n    i-th\n weight of your choice\nOutput The output contains \n    N\n lines. In every line, you should print one\ninteger and one letter - integer representing the weight you are putting on\nthe balance in that move and the letter representing the side of the balance\nwhere you are putting the weight. If there is no solution, print \n    -1\n.\nExample Input 5 3 8 2 13 7 LLRLL Output 3 L 2 R 8 R 13 L 7 L Note Explanation\nfor the test case: after the 1st weight: 3 L (left side is heavier) after the\n2nd weight: 2 R (left side is heavier) after the 3rd weight: 8 R (right side\nis heavier) after the 4th weight: 13 L (left side is heavier) after the 5th\nweight: 7 L (left side is heavier) So, the rules given by string \n    S\n are\nfulfilled and our order of putting the weights is correct.\n\n",
        "cf_contest_id": 1599,
        "cf_index": "A",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3 8 2 13 7\r\nLLRLL\r\n",
                "7 L\r\n3 R\r\n8 R\r\n13 L\r\n2 L\r\n"
            ]
        ],
        "private_cases": []
    }
]