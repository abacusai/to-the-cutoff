[
    {
        "name": "Checker for Array Shuffling",
        "description": "oolimry has an array \n    a\n of length \n    n\n which he really likes. Today,\nyou have changed his array to \n    b\n, a permutation of \n    a\n, to make him\nsad. Because oolimry is only a duck, he can only perform the following\noperation to restore his array: Choose two integers \n    i,j\n such that \n    1\n    \n    \u2264 i,j \n    \u2264 n\n. Swap \n    b_i\n and \n    b_j\n. The sadness of the array\n\n    b\n is the minimum number of operations needed to transform \n    b\n into\n\n    a\n. Given the arrays \n    a\n and \n    b\n, where \n    b\n is a permutation\nof \n    a\n, determine if \n    b\n has the maximum sadness over all permutations\nof \n    a\n. Input Each test contains multiple test cases. The first line\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number\nof test cases. The description of the test cases follows. The first line of\neach test case contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n) \u2014 the length of the array. The second line of each test case\ncontains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i\n    \n    \u2264 n\n) \u2014 the elements of the array \n    a\n. The third line of each test\ncase contains \n    n\n integers \n    b_1, b_2, \n    \u2026, b_n\n (\n    1 \n    \u2264 b_i\n    \n    \u2264 n\n) \u2014 the elements of the array \n    b\n. It is guaranteed that\n\n    b\n is a permutation of \n    a\n. It is guaranteed that the sum of \n    n\n\nover all test cases does not exceed \n    2 \n    \u00b7 10^5\n. Output For each test\ncase, print \"AC\" (without quotes) if \n    b\n has the maximum sadness over all\npermutations of \n    a\n, and \"WA\" (without quotes) otherwise. Example Input 4\n2 2 1 1 2 4 1 2 3 3 3 3 2 1 2 2 1 2 1 4 1 2 3 3 3 2 3 1 Output AC AC WA WA\nNote In the first test case, the array \n    [1,2]\n has sadness \n    1\n. We can\ntransform \n    [1,2]\n into \n    [2,1]\n using one operation with\n\n    (i,j)=(1,2)\n. In the second test case, the array \n    [3,3,2,1]\n has\nsadness \n    2\n. We can transform \n    [3,3,2,1]\n into \n    [1,2,3,3]\n with\ntwo operations with \n    (i,j)=(1,4)\n and \n    (i,j)=(2,3)\n respectively. In\nthe third test case, the array \n    [2,1]\n has sadness \n    0\n. In the fourth\ntest case, the array \n    [3,2,3,1]\n has sadness \n    1\n.\n\n",
        "cf_contest_id": 1672,
        "cf_index": "F2",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2\r\n2 1\r\n1 2\r\n4\r\n1 2 3 3\r\n3 3 2 1\r\n2\r\n2 1\r\n2 1\r\n4\r\n1 2 3 3\r\n3 2 3 1\r\n",
                "AC\r\nAC\r\nWA\r\nWA\r\n"
            ]
        ],
        "private_cases": []
    }
]