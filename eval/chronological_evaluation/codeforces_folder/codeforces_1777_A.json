[
    {
        "name": "Everybody Likes Good Arrays!",
        "description": "An array \n    a\n is good if for all pairs of adjacent elements, \n    a_i\n and\n\n    a_i+1\n (\n    1\n    \u2264 i \n     n\n) are of different parity. Note that an\narray of size \n    1\n is trivially good. You are given an array of size\n\n    n\n. In one operation you can select any pair of adjacent elements in\nwhich both elements are of the same parity, delete them, and insert their\nproduct in the same position. Find the minimum number of operations to form a\ngood array. Input Each test contains multiple test cases. The first line\ncontains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 500\n). The\ndescription of the test cases follows. The first line of each test case\ncontains an integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 100\n). The second line of\neach test case contains \n    n\n integers \n    a_1,a_2,\n    \u2026,a_n\n (\n    1\n    \n    \u2264 a_i \n    \u2264 10^9\n). Output For each test case print an integer, the\nminimum number of operations required to form a good array. Example Input 3 5\n1 7 11 2 13 4 1 2 3 4 6 1 1 1 2 2 3 Output 2 0 3 Note Consider the first test\ncase. Select the \n    2\n-nd and the \n    3\n-rd integers and apply the\noperation on them. The array changes from \n    [1, \n    7,\n    \n    11, 2, 13]\n to \n    [1, \n    77, 2, 13]\n. Next,\nselect the \n    1\n-st and the \n    2\n-nd integers, array changes from\n\n    [\n    1, \n    77, 2, 13]\n to \n    [\n    77,\n    2, 13]\n. Thus we require \n    2\n operations. It can be proved that this is\nthe minimum number of operations. In the second test case, the given array is\nalready good. So we require \n    0\n operations.\n\n",
        "cf_contest_id": 1777,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n5\r\n1 7 11 2 13\r\n4\r\n1 2 3 4\r\n6\r\n1 1 1 2 2 3\r\n",
                "2\r\n0\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "30\r\n1\r\n1\r\n1\r\n2\r\n2\r\n1 1\r\n2\r\n1 2\r\n2\r\n2 1\r\n2\r\n2 2\r\n3\r\n1 1 1\r\n3\r\n1 1 2\r\n3\r\n1 2 1\r\n3\r\n1 2 2\r\n3\r\n2 1 1\r\n3\r\n2 1 2\r\n3\r\n2 2 1\r\n3\r\n2 2 2\r\n4\r\n1 1 1 1\r\n4\r\n1 1 1 2\r\n4\r\n1 1 2 1\r\n4\r\n1 1 2 2\r\n4\r\n1 2 1 1\r\n4\r\n1 2 1 2\r\n4\r\n1 2 2 1\r\n4\r\n1 2 2 2\r\n4\r\n2 1 1 1\r\n4\r\n2 1 1 2\r\n4\r\n2 1 2 1\r\n4\r\n2 1 2 2\r\n4\r\n2 2 1 1\r\n4\r\n2 2 1 2\r\n4\r\n2 2 2 1\r\n4\r\n2 2 2 2\r\n",
                "0\r\n0\r\n1\r\n0\r\n0\r\n1\r\n2\r\n1\r\n0\r\n1\r\n1\r\n0\r\n1\r\n2\r\n3\r\n2\r\n1\r\n2\r\n1\r\n0\r\n1\r\n2\r\n2\r\n1\r\n0\r\n1\r\n2\r\n1\r\n2\r\n3\r\n"
            ],
            [
                "2\r\n10\r\n1 1 1 1 1 5 5 5 5 5\r\n11\r\n9 9 9 9 9 10 9 9 9 9 9\r\n",
                "9\r\n8\r\n"
            ],
            [
                "1\r\n10\r\n4 4 4 4 4 4 4 4 4 5\r\n",
                "8\r\n"
            ],
            [
                "1\r\n1\r\n9\r\n",
                "0\r\n"
            ],
            [
                "1\r\n20\r\n1 2 3 4 4 5 5 6 6 7 7 9 9 9 9 10 10 124 241 241\r\n",
                "11\r\n"
            ]
        ]
    }
]