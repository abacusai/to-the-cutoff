[
    {
        "name": "Ordering Pizza",
        "description": "It's another Start[c]up finals, and that means there is pizza to order for the\nonsite contestants. There are only 2 types of pizza (obviously not, but let's\njust pretend for the sake of the problem), and all pizzas contain exactly S\nslices. It is known that the i-th contestant will eat si slices of pizza, and\ngain ai happiness for each slice of type 1 pizza they eat, and bi happiness\nfor each slice of type 2 pizza they eat. We can order any number of type 1 and\ntype 2 pizzas, but we want to buy the minimum possible number of pizzas for\nall of the contestants to be able to eat their required number of slices.\nGiven that restriction, what is the maximum possible total happiness that can\nbe achieved? Input The first line of input will contain integers N and S (1 \u2264\nN \u2264 10^5, 1 \u2264 S \u2264 10^5), the number of contestants and the number of slices\nper pizza, respectively. N lines follow. The i-th such line contains integers\nsi, ai, and bi (1 \u2264 si \u2264 10^5, 1 \u2264 ai \u2264 10^5, 1 \u2264 bi \u2264 10^5), the number of\nslices the i-th contestant will eat, the happiness they will gain from each\ntype 1 slice they eat, and the happiness they will gain from each type 2 slice\nthey eat, respectively. Output Print the maximum total happiness that can be\nachieved. Examples Input 3 12 3 5 7 4 6 7 5 9 5 Output 84 Input 6 10 7 4 7 5 8\n8 12 5 8 6 11 6 3 3 7 5 9 6 Output 314 Note In the first example, you only\nneed to buy one pizza. If you buy a type 1 pizza, the total happiness will be\n3\u00b75 + 4\u00b76 + 5\u00b79 = 84, and if you buy a type 2 pizza, the total happiness will\nbe 3\u00b77 + 4\u00b77 + 5\u00b75 = 74.\n\n",
        "cf_contest_id": 865,
        "cf_index": "B",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "sortings",
            "ternary search"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 12\r\n3 5 7\r\n4 6 7\r\n5 9 5\r\n",
                "84\r\n"
            ],
            [
                "6 10\r\n7 4 7\r\n5 8 8\r\n12 5 8\r\n6 11 6\r\n3 3 7\r\n5 9 6\r\n",
                "314\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 100\r\n97065 97644 98402\r\n",
                "9551390130\r\n"
            ],
            [
                "1 100000\r\n1 82372 5587\r\n",
                "82372\r\n"
            ],
            [
                "25 6\r\n1 10 5\r\n1 8 4\r\n1 8 2\r\n4 8 9\r\n3 2 8\r\n1 9 5\r\n2 10 10\r\n3 9 6\r\n3 5 4\r\n2 7 8\r\n2 3 2\r\n2 6 8\r\n3 7 8\r\n4 3 7\r\n1 8 1\r\n3 6 4\r\n3 2 8\r\n2 2 1\r\n4 8 8\r\n4 8 4\r\n3 10 2\r\n3 6 6\r\n2 2 5\r\n1 6 2\r\n4 1 5\r\n",
                "449\r\n"
            ],
            [
                "3 10\r\n10 3 4\r\n5 1 100\r\n5 100 1\r\n",
                "1035\r\n"
            ],
            [
                "3 3\r\n6 5 6\r\n2 5 4\r\n2 4 5\r\n",
                "56\r\n"
            ],
            [
                "3 5\r\n6 4 5\r\n6 5 5\r\n8 7 5\r\n",
                "116\r\n"
            ],
            [
                "3 5\r\n2 7 4\r\n6 5 9\r\n6 5 6\r\n",
                "102\r\n"
            ],
            [
                "2 100000\r\n50000 1 100000\r\n50000 100000 1\r\n",
                "5000050000\r\n"
            ],
            [
                "2 9\r\n6 1 7\r\n6 7 1\r\n",
                "84\r\n"
            ],
            [
                "10 8\r\n7 1 4\r\n4 8 9\r\n3 4 10\r\n5 5 9\r\n1 5 6\r\n1 8 5\r\n5 7 4\r\n5 4 6\r\n10 5 7\r\n9 7 3\r\n",
                "351\r\n"
            ],
            [
                "2 10\r\n7 2 1\r\n7 1 2\r\n",
                "28\r\n"
            ],
            [
                "2 3\r\n5 10 5\r\n5 5 10\r\n",
                "100\r\n"
            ],
            [
                "2 3\r\n5 5 10\r\n5 10 5\r\n",
                "100\r\n"
            ],
            [
                "2 3\r\n2 10 1\r\n2 1 10\r\n",
                "40\r\n"
            ],
            [
                "2 10\r\n9 1 2\r\n9 2 1\r\n",
                "36\r\n"
            ],
            [
                "3 4\r\n2 1 10\r\n1 2 1\r\n1 3 1\r\n",
                "22\r\n"
            ]
        ]
    }
]