[
    {
        "name": "Alice, Bob and Candies",
        "description": "There are \n    n\n candies in a row, they are numbered from left to right from\n\n    1\n to \n    n\n. The size of the \n    i\n-th candy is \n    a_i\n. Alice and\nBob play an interesting and tasty game: they eat candy. Alice will eat candy\nfrom left to right, and Bob \u2014 from right to left. The game ends if all the\ncandies are eaten. The process consists of moves. During a move, the player\neats one or more sweets from her/his side (Alice eats from the left, Bob \u2014\nfrom the right). Alice makes the first move. During the first move, she will\neat \n    1\n candy (its size is \n    a_1\n). Then, each successive move the\nplayers alternate \u2014 that is, Bob makes the second move, then Alice, then again\nBob and so on. On each move, a player counts the total size of candies eaten\nduring the current move. Once this number becomes strictly greater than the\ntotal size of candies eaten by the other player on their previous move, the\ncurrent player stops eating and the move ends. In other words, on a move, a\nplayer eats the smallest possible number of candies such that the sum of the\nsizes of candies eaten on this move is strictly greater than the sum of the\nsizes of candies that the other player ate on the previous move. If there are\nnot enough candies to make a move this way, then the player eats up all the\nremaining candies and the game ends. For example, if \n    n=11\n and\n\n    a=[3,1,4,1,5,9,2,6,5,3,5]\n, then: move 1: Alice eats one candy of size\n\n    3\n and the sequence of candies becomes \n    [1,4,1,5,9,2,6,5,3,5]\n. move\n2: Alice ate \n    3\n on the previous move, which means Bob must eat \n    4\n or\nmore. Bob eats one candy of size \n    5\n and the sequence of candies becomes\n\n    [1,4,1,5,9,2,6,5,3]\n. move 3: Bob ate \n    5\n on the previous move, which\nmeans Alice must eat \n    6\n or more. Alice eats three candies with the total\nsize of \n    1+4+1=6\n and the sequence of candies becomes \n    [5,9,2,6,5,3]\n.\nmove 4: Alice ate \n    6\n on the previous move, which means Bob must eat\n\n    7\n or more. Bob eats two candies with the total size of \n    3+5=8\n and\nthe sequence of candies becomes \n    [5,9,2,6]\n. move 5: Bob ate \n    8\n on\nthe previous move, which means Alice must eat \n    9\n or more. Alice eats two\ncandies with the total size of \n    5+9=14\n and the sequence of candies\nbecomes \n    [2,6]\n. move 6 (the last): Alice ate \n    14\n on the previous\nmove, which means Bob must eat \n    15\n or more. It is impossible, so Bob eats\nthe two remaining candies and the game ends. Print the number of moves in the\ngame and two numbers: \n    a\n \u2014 the total size of all sweets eaten by Alice\nduring the game; \n    b\n \u2014 the total size of all sweets eaten by Bob during\nthe game. Input The first line contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    5000\n) \u2014 the number of test cases in the input. The following are\ndescriptions of the \n    t\n test cases. Each test case consists of two lines.\nThe first line contains an integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 1000\n) \u2014 the\nnumber of candies. The second line contains a sequence of integers \n    a_1,\n    a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 1000\n) \u2014 the sizes of candies in\nthe order they are arranged from left to right. It is guaranteed that the sum\nof the values of \n    n\n for all sets of input data in a test does not exceed\n\n    2\n    \u00b710^5\n. Output For each set of input data print three integers \u2014\nthe number of moves in the game and the required values \n    a\n and \n    b\n.\nExample Input 7 11 3 1 4 1 5 9 2 6 5 3 5 1 1000 3 1 1 1 13 1 2 3 4 5 6 7 8 9\n10 11 12 13 2 2 1 6 1 1 1 1 1 1 7 1 1 1 1 1 1 1 Output 6 23 21 1 1000 0 2 1 2\n6 45 46 2 2 1 3 4 2 4 4 3\n\n",
        "cf_contest_id": 1352,
        "cf_index": "D",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n11\r\n3 1 4 1 5 9 2 6 5 3 5\r\n1\r\n1000\r\n3\r\n1 1 1\r\n13\r\n1 2 3 4 5 6 7 8 9 10 11 12 13\r\n2\r\n2 1\r\n6\r\n1 1 1 1 1 1\r\n7\r\n1 1 1 1 1 1 1\r\n",
                "6 23 21\r\n1 1000 0\r\n2 1 2\r\n6 45 46\r\n2 2 1\r\n3 4 2\r\n4 4 3\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n",
                "1 1 0\r\n1 1 0\r\n1 1 0\r\n"
            ]
        ]
    }
]