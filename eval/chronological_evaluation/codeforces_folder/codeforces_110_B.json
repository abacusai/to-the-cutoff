[
    {
        "name": "Lucky String",
        "description": "Petya loves lucky numbers. We all know that lucky numbers are the positive\nintegers whose decimal representations contain only the lucky digits 4 and 7.\nFor example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not. Petya\nrecently learned to determine whether a string of lowercase Latin letters is\nlucky. For each individual letter all its positions in the string are written\nout in the increasing order. This results in 26 lists of numbers; some of them\ncan be empty. A string is considered lucky if and only if in each list the\nabsolute difference of any two adjacent numbers is a lucky number. For\nexample, let's consider string \"zbcdzefdzc\". The lists of positions of equal\nletters are: b: 2 c: 3, 10 d: 4, 8 e: 6 f: 7 z: 1, 5, 9 Lists of positions of\nletters a, g, h, ..., y are empty.This string is lucky as all differences are\nlucky numbers. For letters z: 5 - 1 = 4, 9 - 5 = 4, for letters c: 10 - 3 = 7,\nfor letters d: 8 - 4 = 4. Note that if some letter occurs only once in a\nstring, it doesn't influence the string's luckiness after building the lists\nof positions of equal letters. The string where all the letters are distinct\nis considered lucky. Find the lexicographically minimal lucky string whose\nlength equals n. Input The single line contains a positive integer n (1 \u2264 n \u2264\n10^5) \u2014 the length of the sought string. Output Print on the single line the\nlexicographically minimal lucky string whose length equals n. Examples Input 5\nOutput abcda Input 3 Output abc Note The lexical comparison of strings is\nperformed by the < operator in modern programming languages. String a is\nlexicographically less than string b if exists such i (1 \u2264 i \u2264 n), that ai <\nbi, and for any j (1 \u2264 j < i) aj = bj.\n\n",
        "cf_contest_id": 110,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n",
                "abcda\r\n"
            ],
            [
                "3\r\n",
                "abc\r\n"
            ]
        ],
        "private_cases": [
            [
                "8\r\n",
                "abcdabcd\r\n"
            ],
            [
                "10\r\n",
                "abcdabcdab\r\n"
            ],
            [
                "16\r\n",
                "abcdabcdabcdabcd\r\n"
            ],
            [
                "64\r\n",
                "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\r\n"
            ],
            [
                "128\r\n",
                "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\r\n"
            ],
            [
                "100\r\n",
                "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd\r\n"
            ],
            [
                "47\r\n",
                "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabc\r\n"
            ],
            [
                "74\r\n",
                "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab\r\n"
            ],
            [
                "1\r\n",
                "a\r\n"
            ],
            [
                "2\r\n",
                "ab\r\n"
            ],
            [
                "7\r\n",
                "abcdabc\r\n"
            ],
            [
                "4\r\n",
                "abcd\r\n"
            ],
            [
                "99\r\n",
                "abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabc\r\n"
            ],
            [
                "6\r\n",
                "abcdab\r\n"
            ],
            [
                "9\r\n",
                "abcdabcda\r\n"
            ]
        ]
    }
]