[
    {
        "name": "Corners",
        "description": "You are given a matrix consisting of \n    n\n rows and \n    m\n columns. Each\ncell of this matrix contains \n    0\n or \n    1\n. Let's call a square of size\n\n    2 \n    \u00d7 2\n without one corner cell an L-shape figure. In one operation\nyou can take one L-shape figure, with at least one cell containing \n    1\n and\nreplace all numbers in it with zeroes. Find the maximum number of operations\nthat you can do with the given matrix. Input The first line contains one\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 500\n) \u2014 the number of test cases. Then\nfollow the descriptions of each test case. The first line of each test case\ncontains two integers \n    n\n and \n    m\n (\n    2 \n    \u2264 n, m \n    \u2264 500\n) \u2014\nthe size of the matrix. Each of the following \n    n\n lines contains a binary\nstring of length \n    m\n \u2014 the description of the matrix. It is guaranteed\nthat the sum of \n    n\n and the sum of \n    m\n over all test cases does not\nexceed \n    1000\n. Output For each test case output the maximum number of\noperations you can do with the given matrix. Example Input 4 4 3 101 111 011\n110 3 4 1110 0111 0111 2 2 00 00 2 2 11 11 Output 8 9 0 2 Note In the first\ntestcase one of the optimal sequences of operations is the following (bold\nfont shows l-shape figure on which operation was performed): Matrix before any\noperation was performed: 101111011110 Matrix after \n    1\n operation was\nperformed: 100101011110 Matrix after \n    2\n operations were performed:\n100100011110 Matrix after \n    3\n operations were performed: 100100010110\nMatrix after \n    4\n operations were performed: 100000010110 Matrix after\n\n    5\n operations were performed: 100000010100 Matrix after \n    6\n\noperations were performed: 100000000100 Matrix after \n    7\n operations were\nperformed: 000000000100 Matrix after \n    8\n operations were performed:\n000000000000 In the third testcase from the sample we can not perform any\noperation because the matrix doesn't contain any ones. In the fourth testcase\nit does not matter which L-shape figure we pick in our first operation. We\nwill always be left with single one. So we will perform \n    2\n operations.\n\n",
        "cf_contest_id": 1720,
        "cf_index": "C",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4 3\r\n101\r\n111\r\n011\r\n110\r\n3 4\r\n1110\r\n0111\r\n0111\r\n2 2\r\n00\r\n00\r\n2 2\r\n11\r\n11\r\n",
                "8\r\n9\r\n0\r\n2\r\n"
            ]
        ],
        "private_cases": []
    }
]