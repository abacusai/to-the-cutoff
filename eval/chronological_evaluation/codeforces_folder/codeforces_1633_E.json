[
    {
        "name": "Spanning Tree Queries",
        "description": "You are given a connected weighted undirected graph, consisting of \n    n\n\nvertices and \n    m\n edges. You are asked \n    k\n queries about it. Each query\nconsists of a single integer \n    x\n. For each query, you select a spanning\ntree in the graph. Let the weights of its edges be \n    w_1, w_2, \n    \u2026,\n    w_n-1\n. The cost of a spanning tree is \n    \u2211\n    _i=1^n-1\n    |w_i - x|\n (the sum of absolute differences between the weights and\n\n    x\n). The answer to a query is the lowest cost of a spanning tree. The\nqueries are given in a compressed format. The first \n    p\n \n    (1 \n    \u2264 p\n    \n    \u2264 k)\n queries \n    q_1, q_2, \n    \u2026, q_p\n are provided explicitly. For\nqueries from \n    p+1\n to \n    k\n, \n    q_j = (q_j-1\n    \u00b7 a + b) \n    \n    c\n. Print the xor of answers to all queries. Input The first line contains\ntwo integers \n    n\n and \n    m\n (\n    2 \n    \u2264 n \n    \u2264 50\n; \n    n - 1 \n    \u2264 m\n    \n    \u2264 300\n) \u2014 the number of vertices and the number of edges in the graph.\nEach of the next \n    m\n lines contains a description of an undirected edge:\nthree integers \n    v\n, \n    u\n and \n    w\n (\n    1 \n    \u2264 v, u \n    \u2264 n\n; \n    v\n    \n    \u2260 u\n; \n    0 \n    \u2264 w \n    \u2264 10^8\n) \u2014 the vertices the edge connects and\nits weight. Note that there might be multiple edges between a pair of\nvertices. The edges form a connected graph. The next line contains five\nintegers \n    p, k, a, b\n and \n    c\n (\n    1 \n    \u2264 p \n    \u2264 10^5\n; \n    p \n    \u2264\n    k \n    \u2264 10^7\n; \n    0 \n    \u2264 a, b \n    \u2264 10^8\n; \n    1 \n    \u2264 c \n    \u2264 10^8\n) \u2014\nthe number of queries provided explicitly, the total number of queries and\nparameters to generate the queries. The next line contains \n    p\n integers\n\n    q_1, q_2, \n    \u2026, q_p\n (\n    0 \n    \u2264 q_j < c\n) \u2014 the first \n    p\n\nqueries. Output Print a single integer \u2014 the xor of answers to all queries.\nExamples Input 5 8 4 1 4 3 1 0 3 5 3 2 5 4 3 4 8 4 3 4 4 2 8 5 3 9 3 11 1 1 10\n0 1 2 Output 4 Input 6 7 2 4 0 5 4 7 2 4 0 2 1 7 2 6 1 3 4 4 1 4 8 4 10 3 3 7\n3 0 2 1 Output 5 Input 3 3 1 2 50 2 3 100 1 3 150 1 10000000 0 0 100000000 75\nOutput 164 Note The queries in the first example are \n    0, 1, 2, 3, 4, 5, 6,\n    7, 8, 9, 0\n. The answers are \n    11, 9, 7, 3, 1, 5, 8, 7, 5, 7, 11\n. The\nqueries in the second example are \n    3, 0, 2, 1, 6, 0, 3, 5, 4, 1\n. The\nanswers are \n    14, 19, 15, 16, 11, 19, 14, 12, 13, 16\n. The queries in the\nthird example are \n    75, 0, 0, \n    \u2026\n. The answers are \n    50, 150, 150,\n    \n    \u2026\n.\n\n",
        "cf_contest_id": 1633,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy",
            "math",
            "sortings",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 8\r\n4 1 4\r\n3 1 0\r\n3 5 3\r\n2 5 4\r\n3 4 8\r\n4 3 4\r\n4 2 8\r\n5 3 9\r\n3 11 1 1 10\r\n0 1 2\r\n",
                "4"
            ],
            [
                "6 7\r\n2 4 0\r\n5 4 7\r\n2 4 0\r\n2 1 7\r\n2 6 1\r\n3 4 4\r\n1 4 8\r\n4 10 3 3 7\r\n3 0 2 1\r\n",
                "5"
            ],
            [
                "3 3\r\n1 2 50\r\n2 3 100\r\n1 3 150\r\n1 10000000 0 0 100000000\r\n75\r\n",
                "164"
            ]
        ],
        "private_cases": [
            [
                "5 8\r\n3 2 4\r\n1 2 0\r\n1 2 1\r\n1 2 6\r\n2 4 4\r\n5 4 2\r\n4 2 3\r\n5 3 4\r\n5 5 2 3 8\r\n2 3 1 2 0\r\n",
                "11"
            ],
            [
                "10 20\r\n5 7 24\r\n8 6 8\r\n7 3 32\r\n8 9 34\r\n8 4 9\r\n4 5 37\r\n2 9 15\r\n5 8 4\r\n1 9 50\r\n4 8 30\r\n3 5 50\r\n6 4 31\r\n8 10 0\r\n6 4 21\r\n10 8 45\r\n3 4 16\r\n10 7 28\r\n6 4 36\r\n1 7 16\r\n8 2 32\r\n20 20 6 34 2\r\n0 0 0 1 0 1 0 1 1 0 1 0 0 0 1 1 0 1 1 0\r\n",
                "9"
            ],
            [
                "5 8\r\n4 1 4\r\n3 1 0\r\n3 5 3\r\n2 5 4\r\n3 4 8\r\n4 3 4\r\n4 2 8\r\n5 3 9\r\n1 1 1 1 10\r\n0\r\n",
                "11"
            ]
        ]
    }
]