[
    {
        "name": "Region Separation",
        "description": "There are \n    n\n cities in the Kingdom of Autumn, numbered from \n    1\n to\n\n    n\n. People can travel between any two cities using \n    n-1\n two-\ndirectional roads. This year, the government decides to separate the kingdom.\nThere will be regions of different levels. The whole kingdom will be the\nregion of level \n    1\n. Each region of \n    i\n-th level should be separated\ninto several (at least two) regions of \n    i+1\n-th level, unless \n    i\n-th\nlevel is the last level. Each city should belong to exactly one region of each\nlevel and for any two cities in the same region, it should be possible to\ntravel between them passing the cities in the same region only. According to\nresearch, for each city \n    i\n, there is a value \n    a_i\n, which describes\nthe importance of this city. All regions of the same level should have an\nequal sum of city importances. Your task is to find how many plans there are\nto determine the separation of the regions that all the conditions are\nsatisfied. Two plans are considered different if and only if their numbers of\nlevels are different or there exist two cities in the same region of one level\nin one plan but in different regions of this level in the other plan. Since\nthe answer may be very large, output it modulo \n    10^9+7\n. Input The first\nline contains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^6\n) \u2014 the number\nof the cities. The second line contains \n    n\n integers, the \n    i\n-th of\nwhich is \n    a_i\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the value of each city.\nThe third line contains \n    n-1\n integers, \n    p_1, p_2, \n    \u2026, p_n-1\n;\n\n    p_i\n (\n    p_i \n    \u2264 i\n) describes a road between cities \n    p_i\n and\n\n    i+1\n. Output Print one integer \u2014 the number of different plans modulo\n\n    10^9+7\n. Examples Input 4 1 1 1 1 1 2 3 Output 4 Input 4 1 1 1 1 1 2 2\nOutput 2 Input 4 1 2 1 2 1 1 3 Output 3 Note For the first example, there are\n\n    4\n different plans: Plan \n    1\n: Level-\n    1\n: \n    1,2,3,4\n.\nPlan \n    2\n: Level-\n    1\n: \n    1,2,3,4\n, Level-\n    2\n:\n\n    1,2\n,\n    3,4\n. Plan \n    3\n: Level-\n    1\n:\n\n    1,2,3,4\n, Level-\n    2\n:\n\n    1\n,\n    2\n,\n    3\n,\n    4\n. Plan\n\n    4\n: Level-\n    1\n: \n    1,2,3,4\n, Level-\n    2\n:\n\n    1,2\n,\n    3,4\n, Level-\n    3\n:\n\n    1\n,\n    2\n,\n    3\n,\n    4\n. For\nthe second example, there are \n    2\n different plans: Plan \n    1\n:\nLevel-\n    1\n: \n    1,2,3,4\n. Plan \n    2\n: Level-\n    1\n:\n\n    1,2,3,4\n, Level-\n    2\n:\n\n    1\n,\n    2\n,\n    3\n,\n    4\n. For\nthe third example, there are \n    3\n different plans: Plan \n    1\n:\nLevel-\n    1\n: \n    1,2,3,4\n. Plan \n    2\n: Level-\n    1\n:\n\n    1,2,3,4\n, Level-\n    2\n:\n\n    1,2\n,\n    3,4\n. Plan \n    3\n: Level-\n    1\n:\n\n    1,2,3,4\n, Level-\n    2\n:\n\n    1,3\n,\n    2\n,\n    4\n.\n\n",
        "cf_contest_id": 1034,
        "cf_index": "C",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "dp",
            "number theory",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 1 1 1\r\n1 2 3\r\n",
                "4"
            ],
            [
                "4\r\n1 1 1 1\r\n1 2 2\r\n",
                "2"
            ],
            [
                "4\r\n1 2 1 2\r\n1 1 3\r\n",
                "3"
            ]
        ],
        "private_cases": [
            [
                "9\r\n7 5 4 8 8 1 3 8 4\r\n1 2 3 4 5 6 6 8\r\n",
                "5"
            ],
            [
                "10\r\n2 1 8 2 8 5 3 1 1 1\r\n1 1 2 4 2 6 1 4 1\r\n",
                "2"
            ],
            [
                "11\r\n1 1 3 5 20 66 891 792 977 310 463\r\n1 2 1 4 2 3 4 3 5 9\r\n",
                "1"
            ],
            [
                "20\r\n33 1 34 47 397 36 6 55 19 397 33 397 50 397 397 18 397 33 3 29\r\n1 2 3 4 4 4 4 6 5 8 1 11 12 9 2 5 9 2 11\r\n",
                "2"
            ],
            [
                "1\r\n1000000000\r\n",
                "1"
            ]
        ]
    }
]