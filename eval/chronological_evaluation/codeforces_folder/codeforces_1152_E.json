[
    {
        "name": "Neko and Flashback",
        "description": "A permutation of length \n    k\n is a sequence of \n    k\n integers from \n    1\n\nto \n    k\n containing each integer exactly once. For example, the sequence\n\n    [3, 1, 2]\n is a permutation of length \n    3\n. When Neko was five, he\nthought of an array \n    a\n of \n    n\n positive integers and a permutation\n\n    p\n of length \n    n - 1\n. Then, he performed the following: Constructed\nan array \n    b\n of length \n    n-1\n, where \n    b_i = \n    min(a_i, a_i+1)\n.\nConstructed an array \n    c\n of length \n    n-1\n, where \n    c_i = \n    max(a_i,\n    a_i+1)\n. Constructed an array \n    b'\n of length \n    n-1\n, where \n    b'_i\n    = b_p_i\n. Constructed an array \n    c'\n of length \n    n-1\n, where \n    c'_i\n    = c_p_i\n. For example, if the array \n    a\n was \n    [3, 4, 6, 5, 7]\n and\npermutation \n    p\n was \n    [2, 4, 1, 3]\n, then Neko would have constructed\nthe following arrays: \n    b = [3, 4, 5, 5]\n \n    c = [4, 6, 6, 7]\n \n    b' =\n    [4, 5, 3, 5]\n \n    c' = [6, 7, 4, 6]\n Then, he wrote two arrays \n    b'\n and\n\n    c'\n on a piece of paper and forgot about it. 14 years later, when he was\ncleaning up his room, he discovered this old piece of paper with two arrays\n\n    b'\n and \n    c'\n written on it. However he can't remember the array\n\n    a\n and permutation \n    p\n he used. In case Neko made a mistake and there\nis no array \n    a\n and permutation \n    p\n resulting in such \n    b'\n and\n\n    c'\n, print -1. Otherwise, help him recover any possible array \n    a\n.\nInput The first line contains an integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264\n    10^5\n) \u2014 the number of elements in array \n    a\n. The second line contains\n\n    n-1\n integers \n    b'_1, b'_2, \n    \u2026, b'_n-1\n (\n    1 \n    \u2264 b'_i\n    \n    \u2264 10^9\n). The third line contains \n    n-1\n integers \n    c'_1, c'_2,\n    \n    \u2026, c'_n-1\n (\n    1 \n    \u2264 c'_i \n    \u2264 10^9\n). Output If Neko made a\nmistake and there is no array \n    a\n and a permutation \n    p\n leading to the\n\n    b'\n and \n    c'\n, print -1. Otherwise, print \n    n\n positive integers\n\n    a_i\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n), denoting the elements of the array\n\n    a\n. If there are multiple possible solutions, print any of them. Examples\nInput 5 4 5 3 5 6 7 4 6 Output 3 4 6 5 7 Input 3 2 4 3 2 Output -1 Input 8 2 3\n1 1 2 4 3 3 4 4 2 5 5 4 Output 3 4 5 2 1 4 3 2 Note The first example is\nexplained is the problem statement. In the third example, for \n    a = [3, 4, 5,\n    2, 1, 4, 3, 2]\n, a possible permutation \n    p\n is \n    [7, 1, 5, 4, 3, 2,\n    6]\n. In that case, Neko would have constructed the following arrays: \n    b =\n    [3, 4, 2, 1, 1, 3, 2]\n \n    c = [4, 5, 5, 2, 4, 4, 3]\n \n    b' = [2, 3, 1, 1,\n    2, 4, 3]\n \n    c' = [3, 4, 4, 2, 5, 5, 4]\n\n\n",
        "cf_contest_id": 1152,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n4 5 3 5\r\n6 7 4 6\r\n",
                "7 5 6 4 3 \r\n"
            ],
            [
                "3\r\n2 4\r\n3 2\r\n",
                "-1\r\n"
            ],
            [
                "8\r\n2 3 1 1 2 4 3\r\n3 4 4 2 5 5 4\r\n",
                "3 4 5 2 3 4 1 2 \r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1\r\n1000000000\r\n",
                "1000000000 1 \r\n"
            ],
            [
                "10\r\n1 1 1 3 2 1 1 2 1\r\n3 2 3 3 3 2 3 3 3\r\n",
                "1 3 3 2 3 1 3 1 2 1 \r\n"
            ],
            [
                "10\r\n1 1 4 2 2 1 7 6 7\r\n8 9 7 4 6 3 8 7 9\r\n",
                "3 1 9 7 6 2 4 7 8 1 \r\n"
            ],
            [
                "20\r\n2 3 2 6 1 1 2 5 2 3 3 1 2 2 3 2 6 1 3\r\n2 7 3 6 5 7 3 5 3 6 7 7 7 9 5 2 7 2 9\r\n",
                "1 7 3 7 6 6 3 9 2 7 1 5 5 3 2 3 2 2 2 1 \r\n"
            ],
            [
                "20\r\n10 10 8 9 7 4 9 9 8 9 12 1 1 10 19 5 17 5 9\r\n13 19 9 19 9 12 19 19 19 9 19 4 13 10 19 19 19 7 10\r\n",
                "17 19 19 12 4 1 13 10 10 19 9 19 9 9 8 19 5 7 9 10 \r\n"
            ],
            [
                "30\r\n13 1 11 2 1 1 6 2 12 1 6 5 6 1 1 1 6 6 6 12 1 5 3 8 1 4 6 3 2\r\n14 6 14 6 12 4 6 5 14 13 6 8 7 7 6 2 10 10 14 13 12 13 14 14 6 13 13 5 11\r\n",
                "6 10 6 6 6 13 14 12 1 12 13 5 8 14 11 2 6 7 1 6 1 13 4 1 6 14 3 5 2 1 \r\n"
            ],
            [
                "30\r\n12 3 2 20 12 78 2 25 12 12 31 19 56 34 9 25 20 31 2 12 24 8 6 19 21 89 6 7 2\r\n85 9 12 70 97 93 6 51 24 19 95 51 95 56 21 34 37 37 6 89 78 89 7 85 97 93 89 8 70\r\n",
                "19 85 12 89 8 7 6 89 93 78 24 12 19 51 25 34 56 95 31 37 20 70 2 6 2 12 97 21 9 3 \r\n"
            ],
            [
                "10\r\n2 2 1 1 3 2 1 4 2\r\n3 2 1 3 4 3 2 4 4\r\n",
                "1 3 4 4 2 3 2 2 1 1 \r\n"
            ],
            [
                "10\r\n5 32 2 2 15 10 5 20 20\r\n10 48 11 15 20 34 11 20 48\r\n",
                "34 10 5 11 2 15 20 20 48 32 \r\n"
            ],
            [
                "20\r\n1 3 2 5 2 1 3 2 3 2 3 1 2 1 3 3 5 5 3\r\n2 5 4 5 5 3 3 3 4 5 3 5 5 5 3 5 5 5 5\r\n",
                "1 5 5 5 5 3 5 2 5 3 3 3 3 4 2 5 1 3 2 1 \r\n"
            ],
            [
                "20\r\n22 10 1 38 8 7 47 13 1 18 7 6 6 20 20 23 7 8 20\r\n49 20 18 48 13 43 47 26 34 48 34 43 22 49 26 47 38 23 47\r\n",
                "10 20 47 47 23 8 13 26 20 49 22 6 43 7 38 48 18 1 34 7 \r\n"
            ],
            [
                "30\r\n14 20 2 18 17 14 13 2 2 12 9 2 9 15 26 11 20 23 6 9 22 1 6 19 17 1 9 15 15\r\n23 27 15 20 29 22 25 11 26 14 27 19 15 29 27 29 23 27 13 29 26 15 21 23 26 14 25 21 18\r\n",
                "20 27 26 17 29 15 21 6 13 25 9 27 23 19 2 26 22 14 23 20 18 15 9 29 11 2 15 1 14 12 \r\n"
            ],
            [
                "30\r\n5 3 3 3 2 2 5 1 3 5 5 1 5 1 5 1 4 7 5 7 2 2 3 7 2 2 5 3 3\r\n7 5 7 4 7 6 5 4 7 10 7 10 7 7 5 4 7 7 9 9 7 6 9 10 5 6 9 6 7\r\n",
                "10 7 7 9 5 7 5 9 3 7 3 7 2 7 5 5 5 3 6 2 6 2 5 10 1 7 4 1 4 3 \r\n"
            ]
        ]
    }
]