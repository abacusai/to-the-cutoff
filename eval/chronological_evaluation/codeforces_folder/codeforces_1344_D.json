[
    {
        "name": "R\u00e9sum\u00e9 Review",
        "description": "Uh oh! Applications to tech companies are due soon, and you've been\nprocrastinating by doing contests instead! (Let's pretend for now that it is\nactually possible to get a job in these uncertain times.) You have completed\nmany programming projects. In fact, there are exactly \n    n\n types of\nprogramming projects, and you have completed \n    a_i\n projects of type\n\n    i\n. Your r\u00e9sum\u00e9 has limited space, but you want to carefully choose them\nin such a way that maximizes your chances of getting hired. You want to\ninclude several projects of the same type to emphasize your expertise, but you\nalso don't want to include so many that the low-quality projects start\nslipping in. Specifically, you determine the following quantity to be a good\nindicator of your chances of getting hired: \n    \n\n    f(b_1,\n    \u2026,b_n)=\n    \u2211\n    _i=1^n b_i(a_i-b_i^2).\n\n    \n Here,\n\n    b_i\n denotes the number of projects of type \n    i\n you include in your\nr\u00e9sum\u00e9. Of course, you cannot include more projects than you have completed,\nso you require \n    0\n    \u2264 b_i \n    \u2264 a_i\n for all \n    i\n. Your r\u00e9sum\u00e9 only\nhas enough room for \n    k\n projects, and you will absolutely not be hired if\nyour r\u00e9sum\u00e9 has empty space, so you require \n    \u2211\n    _i=1^n\n    b_i=k\n. Find values for \n    b_1,\n    \u2026, b_n\n that maximize the value of\n\n    f(b_1,\n    \u2026,b_n)\n while satisfying the above two constraints. Input\nThe first line contains two integers \n    n\n and \n    k\n (\n    1\n    \u2264 n\n    \u2264\n    10^5\n, \n    1\n    \u2264 k\n    \u2264\n    \u2211\n    _i=1^n a_i\n) \u2014 the number of\ntypes of programming projects and the r\u00e9sum\u00e9 size, respectively. The next line\ncontains \n    n\n integers \n    a_1,\n    \u2026,a_n\n (\n    1\n    \u2264 a_i\n    \u2264 10^9\n)\n\u2014 \n    a_i\n is equal to the number of completed projects of type \n    i\n.\nOutput In a single line, output \n    n\n integers \n    b_1,\n    \u2026, b_n\n that\nachieve the maximum value of \n    f(b_1,\n    \u2026,b_n)\n, while satisfying the\nrequirements \n    0\n    \u2264 b_i\n    \u2264 a_i\n and \n    \u2211\n    _i=1^n\n    b_i=k\n. If there are multiple solutions, output any. Note that you do not\nhave to output the value \n    f(b_1,\n    \u2026,b_n)\n. Examples Input 10 32 1 2 3\n4 5 5 5 5 5 5 Output 1 2 3 3 3 4 4 4 4 4 Input 5 8 4 4 8 2 1 Output 2 2 2 1 1\nNote For the first test, the optimal answer is \n    f=-269\n. Note that a\nlarger \n    f\n value is possible if we ignored the constraint\n\n    \u2211\n    _i=1^n b_i=k\n. For the second test, the optimal answer\nis \n    f=9\n.\n\n",
        "cf_contest_id": 1344,
        "cf_index": "D",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10 32\r\n1 2 3 4 5 5 5 5 5 5\r\n",
                "1 2 3 3 4 4 4 4 4 3 "
            ],
            [
                "5 8\r\n4 4 8 2 1\r\n",
                "2 2 2 1 1 "
            ]
        ],
        "private_cases": [
            [
                "5 353\r\n191 148 145 73 150\r\n",
                "71 71 70 70 71 "
            ],
            [
                "100 12436\r\n827 238 69 955 468 828 762 562 285 690 406 39 814 447 871 560 224 677 65 764 864 827 659 43 512 547 619 313 206 605 446 471 980 115 561 746 150 787 963 426 239 984 752 212 732 977 831 521 943 921 661 221 133 309 897 113 265 873 85 89 799 492 459 110 417 423 190 885 886 465 653 950 6 990 851 62 327 235 410 45 939 660 139 33 64 767 151 737 334 414 513 83 509 561 122 759 68 170 516 402\r\n",
                "136 135 69 136 135 136 135 135 135 135 135 39 136 135 136 135 135 135 65 135 136 136 135 43 135 135 135 135 135 135 135 135 136 115 135 135 135 135 136 135 135 136 135 135 135 136 136 135 136 136 135 135 133 135 136 113 135 136 85 89 135 135 135 110 135 135 135 136 136 135 135 136 6 136 136 62 135 135 135 45 136 135 135 33 64 135 135 135 135 135 135 83 135 135 122 135 68 135 135 135 "
            ],
            [
                "100 52010\r\n722 943 547 336 1342 426 621 1319 1666 1843 1899 1744 1767 201 1144 1514 1114 1422 1539 1545 524 824 1839 1190 866 1585 1460 813 518 1256 508 30 180 1358 1639 1021 1422 794 1927 594 1849 1286 1045 1914 1662 415 650 868 553 408 1319 1588 1150 504 686 1267 79 791 566 941 263 357 1722 961 82 1588 1819 1269 562 841 938 736 972 319 1407 1726 201 1107 1701 1664 1046 313 843 1961 1492 806 500 802 1624 1651 904 230 940 49 769 1239 1564 1903 47 1559\r\n",
                "585 585 547 336 585 426 585 585 585 585 585 585 585 201 585 585 585 585 585 585 524 585 585 585 585 585 585 585 518 585 508 30 180 585 585 585 585 585 586 585 585 585 585 585 585 415 585 585 553 408 585 585 585 504 585 585 79 585 566 585 263 357 585 585 82 585 585 585 562 585 585 585 585 319 585 585 201 585 585 585 585 313 585 586 585 585 500 585 585 585 585 230 585 49 585 585 585 585 47 585 "
            ],
            [
                "100 75533\r\n1535 204 1393 1665 561 1702 1961 35 1609 604 1884 242 1259 1302 710 814 17 1548 572 1627 1783 860 404 1041 1693 1160 152 1611 25 1926 1815 1561 1698 574 1268 110 1702 400 1893 2 709 123 805 481 1619 215 1330 986 986 188 735 1984 870 489 804 13 1719 542 793 1818 1586 1458 159 1657 305 109 1719 299 654 1583 264 1370 1292 40 1933 448 638 1550 1653 1950 318 810 1938 823 1016 475 170 1730 1980 433 137 203 1263 1331 861 1794 842 1626 1273 890\r\n",
                "1077 204 1077 1078 561 1078 1078 35 1078 604 1078 242 1077 1077 710 814 17 1077 572 1078 1078 860 404 1041 1078 1077 152 1078 25 1078 1078 1078 1078 574 1077 110 1078 400 1078 2 709 123 805 481 1078 215 1077 986 986 188 735 1078 870 489 804 13 1078 542 793 1078 1078 1077 159 1078 305 109 1078 299 654 1078 264 1077 1077 40 1078 448 638 1077 1078 1078 318 810 1078 823 1016 475 170 1078 1078 433 137 203 1077 1077 861 1078 842 1078 1077 890 "
            ],
            [
                "100 89826\r\n1076 402 6 202 1196 687 966 243 1715 847 608 1446 1901 106 1622 222 865 204 1700 1001 1834 726 1158 1497 1928 1787 254 275 1788 1972 687 611 1983 1085 1876 311 1979 1845 1706 1360 528 1842 1041 1636 657 443 895 158 725 1884 13 1916 326 406 216 1040 677 620 785 1424 596 454 990 1303 186 1170 1783 1425 675 46 681 1347 494 512 1302 464 1469 494 467 1349 856 134 633 1390 474 151 1333 1902 1794 1830 937 172 756 891 1560 1344 1222 1713 1181 1418\r\n",
                "1076 402 6 202 1196 687 966 243 1406 847 608 1406 1407 106 1406 222 865 204 1406 1001 1407 726 1158 1406 1407 1406 254 275 1406 1407 687 611 1407 1085 1407 311 1407 1407 1406 1360 528 1407 1041 1406 657 443 895 158 725 1407 13 1407 326 406 216 1040 677 620 785 1406 596 454 990 1303 186 1170 1406 1406 675 46 681 1347 494 512 1302 464 1406 494 467 1349 856 134 633 1390 474 151 1333 1407 1407 1407 937 172 756 891 1406 1344 1222 1406 1181 1406 "
            ],
            [
                "1 1000000000\r\n1000000000\r\n",
                "1000000000 "
            ],
            [
                "1 1\r\n4\r\n",
                "1 "
            ],
            [
                "1 2\r\n1000000000\r\n",
                "2 "
            ]
        ]
    }
]