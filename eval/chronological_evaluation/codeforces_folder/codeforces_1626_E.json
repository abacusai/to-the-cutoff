[
    {
        "name": "Black and White Tree",
        "description": "You are given a tree consisting of \n    n\n vertices. Some of the vertices (at\nleast two) are black, all the other vertices are white. You place a chip on\none of the vertices of the tree, and then perform the following operations:\nlet the current vertex where the chip is located is \n    x\n. You choose a\nblack vertex \n    y\n, and then move the chip along the first edge on the\nsimple path from \n    x\n to \n    y\n. You are not allowed to choose the same\nblack vertex \n    y\n in two operations in a row (i. e., for every two\nconsecutive operations, the chosen black vertex should be different). You end\nyour operations when the chip moves to the black vertex (if it is initially\nplaced in a black vertex, you don't perform the operations at all), or when\nthe number of performed operations exceeds \n    100^500\n. For every vertex\n\n    i\n, you have to determine if there exists a (possibly empty) sequence of\noperations that moves the chip to some black vertex, if the chip is initially\nplaced on the vertex \n    i\n. Input The first line contains one integer\n\n    n\n (\n    3 \n    \u2264 n \n    \u2264 3 \n    \u00b7 10^5\n) \u2014 the number of vertices in the\ntree. The second line contains \n    n\n integers \n    c_1, c_2, \n    \u2026, c_n\n\n(\n    0 \n    \u2264 c_i \n    \u2264 1\n), where \n    c_i = 0\n means that the \n    i\n-th\nvertex is white, and \n    c_i = 1\n means that the \n    i\n-th vertex is black.\nAt least two values of \n    c_i\n are equal to \n    1\n. Then \n    n-1\n lines\nfollow, each of them contains two integers \n    u_i\n and \n    v_i\n (\n    1 \n    \u2264\n    u_i, v_i \n    \u2264 n\n; \n    u_i \n     v_i\n) \u2014 the endpoints of some edge. These\nedges form a tree. Output Print \n    n\n integers. The \n    i\n-th integer\nshould be equal to \n    1\n if there exists a (possibly empty) sequence of\noperations that moves the chip to some black vertex if it is placed on the\nvertex \n    i\n, and \n    0\n if no such sequence of operations exists. Example\nInput 8 0 1 0 0 0 0 1 0 8 6 2 5 7 8 6 5 4 5 6 1 7 3 Output 0 1 1 1 1 0 1 1\n\n",
        "cf_contest_id": 1626,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "8\r\n0 1 0 0 0 0 1 0\r\n8 6\r\n2 5\r\n7 8\r\n6 5\r\n4 5\r\n6 1\r\n7 3\r\n",
                "0 1 1 1 1 0 1 1 "
            ]
        ],
        "private_cases": [
            [
                "3\r\n1 0 1\r\n1 2\r\n2 3\r\n",
                "1 1 1 "
            ],
            [
                "8\r\n1 0 0 0 0 0 1 1\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n4 8\r\n",
                "1 1 1 1 1 1 1 1 "
            ],
            [
                "6\r\n1 0 0 0 0 1\r\n6 5\r\n5 4\r\n5 3\r\n3 2\r\n2 1\r\n",
                "1 1 0 1 1 1 "
            ],
            [
                "6\r\n0 0 0 1 0 1\r\n1 2\r\n2 3\r\n3 4\r\n3 5\r\n5 6\r\n",
                "1 1 1 1 1 1 "
            ],
            [
                "10\r\n0 1 0 0 0 1 0 0 0 1\r\n1 2\r\n1 3\r\n3 4\r\n4 5\r\n5 6\r\n4 7\r\n1 8\r\n8 9\r\n4 10\r\n",
                "1 1 1 1 1 1 1 1 1 1 "
            ],
            [
                "10\r\n1 0 0 0 0 1 0 0 1 0\r\n1 2\r\n1 3\r\n1 4\r\n4 5\r\n2 6\r\n2 7\r\n1 8\r\n3 9\r\n4 10\r\n",
                "1 1 1 1 1 1 1 1 1 1 "
            ],
            [
                "10\r\n1 0 0 1 0 0 0 0 0 1\r\n1 2\r\n2 3\r\n1 4\r\n2 5\r\n1 6\r\n2 7\r\n7 8\r\n7 9\r\n8 10\r\n",
                "1 1 1 1 1 1 1 1 1 1 "
            ],
            [
                "10\r\n0 1 0 1 0 0 0 0 0 0\r\n1 2\r\n2 3\r\n2 4\r\n4 5\r\n1 6\r\n1 7\r\n3 8\r\n1 9\r\n4 10\r\n",
                "1 1 1 1 1 1 1 1 1 1 "
            ],
            [
                "10\r\n0 0 1 1 0 0 0 0 1 0\r\n1 2\r\n1 3\r\n2 4\r\n1 5\r\n5 6\r\n5 7\r\n6 8\r\n6 9\r\n3 10\r\n",
                "1 1 1 1 1 1 1 1 1 1 "
            ],
            [
                "15\r\n1 0 0 0 0 0 0 1 0 0 0 0 0 0 0\r\n1 2\r\n1 3\r\n1 4\r\n2 5\r\n2 6\r\n2 7\r\n6 8\r\n1 9\r\n4 10\r\n6 11\r\n2 12\r\n6 13\r\n3 14\r\n14 15\r\n",
                "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 "
            ],
            [
                "15\r\n0 0 0 0 0 0 0 0 0 1 0 0 1 1 0\r\n1 2\r\n2 3\r\n3 4\r\n3 5\r\n5 6\r\n1 7\r\n2 8\r\n1 9\r\n6 10\r\n4 11\r\n2 12\r\n12 13\r\n6 14\r\n5 15\r\n",
                "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 "
            ],
            [
                "15\r\n1 0 0 1 0 0 0 0 0 0 0 0 0 0 0\r\n1 2\r\n2 3\r\n1 4\r\n2 5\r\n2 6\r\n5 7\r\n3 8\r\n2 9\r\n6 10\r\n1 11\r\n1 12\r\n2 13\r\n5 14\r\n11 15\r\n",
                "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 "
            ],
            [
                "15\r\n0 0 0 0 0 0 1 1 0 0 0 0 0 0 0\r\n1 2\r\n1 3\r\n1 4\r\n3 5\r\n2 6\r\n5 7\r\n3 8\r\n3 9\r\n2 10\r\n8 11\r\n6 12\r\n5 13\r\n11 14\r\n10 15\r\n",
                "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 "
            ],
            [
                "10\r\n1 0 0 0 0 0 1 1 0 1\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n4 9\r\n9 8\r\n9 10\r\n",
                "1 1 1 1 1 1 1 1 1 1 "
            ],
            [
                "4\r\n0 1 0 1\r\n1 2\r\n1 3\r\n2 4\r\n",
                "1 1 1 1 "
            ]
        ]
    }
]