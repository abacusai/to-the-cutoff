[
    {
        "name": "Omkar and Time Travel",
        "description": "El Psy Kongroo. Omkar is watching Steins;Gate. In Steins;Gate, Okabe Rintarou\nneeds to complete \n    n\n tasks (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n).\nUnfortunately, he doesn't know when he needs to complete the tasks. Initially,\nthe time is \n    0\n. Time travel will now happen according to the following\nrules: For each \n    k = 1, 2, \n    \u2026, n\n, Okabe will realize at time\n\n    b_k\n that he was supposed to complete the \n    k\n-th task at time\n\n    a_k\n (\n    a_k < b_k\n). When he realizes this, if \n    k\n-th task was\nalready completed at time \n    a_k\n, Okabe keeps the usual flow of time.\nOtherwise, he time travels to time \n    a_k\n then immediately completes the\ntask. If Okabe time travels to time \n    a_k\n, all tasks completed after this\ntime will become incomplete again. That is, for every \n    j\n, if\n\n    a_j>a_k\n, the \n    j\n-th task will become incomplete, if it was complete\n(if it was incomplete, nothing will change). Okabe has bad memory, so he can\ntime travel to time \n    a_k\n only immediately after getting to time \n    b_k\n\nand learning that he was supposed to complete the \n    k\n-th task at time\n\n    a_k\n. That is, even if Okabe already had to perform \n    k\n-th task\nbefore, he wouldn't remember it before stumbling on the info about this task\nat time \n    b_k\n again. Please refer to the notes for an example of time\ntravelling. There is a certain set \n    s\n of tasks such that the first moment\nthat all of the tasks in \n    s\n are simultaneously completed (regardless of\nwhether any other tasks are currently completed), a funny scene will take\nplace. Omkar loves this scene and wants to know how many times Okabe will time\ntravel before this scene takes place. Find this number modulo \n    10^9 + 7\n.\nIt can be proven that eventually all \n    n\n tasks will be completed and so\nthe answer always exists. Input The first line contains an integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of tasks that Okabe\nneeds to complete. \n    n\n lines follow. The \n    k\n-th of these lines contain\ntwo integers \n    a_k\n and \n    b_k\n (\n    1 \n    \u2264 a_k < b_k \n    \u2264 2n\n) \u2014\nthe time at which Okabe needs to complete the \n    k\n-th task and the time\nthat he realizes this respectively. All \n    2n\n of these times are distinct\n(so every time from \n    1\n to \n    2n\n inclusive appears exactly once in the\ninput). The next line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    n\n) \u2014 the size of the set \n    s\n of tasks that lead to the funny scene. The\nlast line contains \n    t\n integers \n    s_1, s_2, \n    \u2026, s_t\n \u2014 (\n    1\n    \n    \u2264 s_k \n    \u2264 n\n, the numbers \n    s_1, s_2, \n    \u2026, s_t\n are\ndistinct) \u2014 the set \n    s\n of tasks. Output Output a single integer \u2014 the\nnumber of times that Okabe time travels until all tasks in the set \n    s\n are\nsimultaneously completed, modulo \n    10^9 + 7\n. Examples Input 2 1 4 2 3 2 1\n2 Output 3 Input 2 1 4 2 3 1 1 Output 2 Input 1 1 2 1 1 Output 1 Input 6 10 12\n3 7 4 6 2 9 5 8 1 11 3 2 4 6 Output 17 Input 16 31 32 3 26 17 19 4 24 1 28 15\n21 12 16 18 29 20 23 7 8 11 14 9 22 6 30 5 10 25 27 2 13 6 3 8 2 5 12 11\nOutput 138 Note For the first sample, all tasks need to be completed in order\nfor the funny scene to occur. Initially, the time is \n    0\n. Nothing happens\nuntil time \n    3\n, when Okabe realizes that he should have done the\n\n    2\n-nd task at time \n    2\n. He then time travels to time \n    2\n and\ncompletes the task. As the task is done now, he does not time travel again\nwhen the time is again \n    3\n. However, at time \n    4\n, he travels to time\n\n    1\n to complete the \n    1\n-st task. This undoes the \n    2\n-nd task. This\nmeans that the \n    2\n-nd task is not currently completed, meaning that the\nfunny scene will not occur at this point even though the \n    1\n-st task is\ncurrently completed and Okabe had previously completed the \n    2\n-nd task.\nOnce it is again time \n    3\n he travels back to time \n    2\n once more and\ndoes the \n    2\n-nd task again. Now all tasks are complete, with Okabe having\ntime travelled \n    3\n times. The second sample has the same tasks for Okabe\nto complete. However, this time the funny scene only needs the first task to\nbe completed in order to occur. From reading the above sample you can see that\nthis occurs once Okabe has time travelled \n    2\n times.\n\n",
        "cf_contest_id": 1583,
        "cf_index": "G",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n1 4\r\n2 3\r\n2\r\n1 2\r\n",
                "3\r\n"
            ],
            [
                "2\r\n1 4\r\n2 3\r\n1\r\n1\r\n",
                "2\r\n"
            ],
            [
                "1\r\n1 2\r\n1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "6\r\n10 12\r\n3 7\r\n4 6\r\n2 9\r\n5 8\r\n1 11\r\n3\r\n2 4 6\r\n",
                "17\r\n"
            ],
            [
                "16\r\n31 32\r\n3 26\r\n17 19\r\n4 24\r\n1 28\r\n15 21\r\n12 16\r\n18 29\r\n20 23\r\n7 8\r\n11 14\r\n9 22\r\n6 30\r\n5 10\r\n25 27\r\n2 13\r\n6\r\n3 8 2 5 12 11\r\n",
                "138\r\n"
            ]
        ],
        "private_cases": [
            [
                "17\r\n8 29\r\n10 16\r\n11 19\r\n4 28\r\n15 25\r\n9 34\r\n21 24\r\n17 32\r\n3 30\r\n22 31\r\n7 18\r\n2 6\r\n1 5\r\n14 33\r\n13 23\r\n12 27\r\n20 26\r\n8\r\n9 5 17 11 14 7 3 4\r\n",
                "117\r\n"
            ],
            [
                "18\r\n3 25\r\n26 30\r\n2 22\r\n13 27\r\n7 31\r\n19 34\r\n14 18\r\n16 28\r\n32 33\r\n29 35\r\n12 17\r\n15 21\r\n5 8\r\n6 23\r\n1 9\r\n4 36\r\n10 11\r\n20 24\r\n1\r\n13\r\n",
                "1\r\n"
            ],
            [
                "19\r\n11 34\r\n15 21\r\n12 19\r\n10 23\r\n16 30\r\n5 32\r\n2 27\r\n1 13\r\n14 38\r\n22 28\r\n18 33\r\n36 37\r\n3 6\r\n17 20\r\n25 35\r\n7 9\r\n24 31\r\n4 8\r\n26 29\r\n3\r\n5 1 13\r\n",
                "69\r\n"
            ],
            [
                "20\r\n10 32\r\n7 29\r\n23 26\r\n4 25\r\n28 34\r\n21 38\r\n13 31\r\n18 22\r\n11 14\r\n9 35\r\n8 12\r\n5 40\r\n1 16\r\n17 20\r\n2 3\r\n27 37\r\n19 33\r\n24 30\r\n6 39\r\n15 36\r\n15\r\n5 8 13 19 9 2 6 10 1 7 11 17 20 3 16\r\n",
                "161\r\n"
            ],
            [
                "21\r\n7 18\r\n19 32\r\n22 38\r\n27 39\r\n4 41\r\n15 20\r\n14 35\r\n3 42\r\n6 30\r\n26 34\r\n25 31\r\n12 29\r\n5 37\r\n9 16\r\n8 13\r\n10 33\r\n1 28\r\n24 36\r\n17 40\r\n11 21\r\n2 23\r\n7\r\n17 5 13 1 3 19 21\r\n",
                "240\r\n"
            ],
            [
                "30\r\n2 16\r\n47 60\r\n28 31\r\n3 37\r\n20 34\r\n25 59\r\n5 26\r\n4 8\r\n39 46\r\n6 14\r\n38 42\r\n27 55\r\n36 58\r\n12 48\r\n18 50\r\n40 57\r\n19 29\r\n11 45\r\n17 54\r\n13 22\r\n1 52\r\n7 15\r\n33 56\r\n21 44\r\n23 41\r\n32 43\r\n24 53\r\n9 49\r\n30 35\r\n10 51\r\n30\r\n29 20 9 25 19 15 1 6 27 12 18 23 14 24 28 10 13 26 21 30 2 3 17 16 7 8 11 4 5 22\r\n",
                "641\r\n"
            ],
            [
                "40\r\n5 35\r\n8 66\r\n33 51\r\n56 70\r\n43 78\r\n44 57\r\n3 20\r\n25 71\r\n7 64\r\n21 40\r\n24 28\r\n47 60\r\n61 72\r\n38 53\r\n16 63\r\n2 58\r\n41 52\r\n26 74\r\n11 48\r\n14 15\r\n22 75\r\n46 68\r\n29 31\r\n9 10\r\n23 77\r\n19 80\r\n62 73\r\n13 37\r\n6 30\r\n39 67\r\n55 59\r\n50 76\r\n17 79\r\n27 54\r\n18 42\r\n45 49\r\n4 34\r\n12 36\r\n32 65\r\n1 69\r\n20\r\n23 7 8 35 31 32 37 27 25 40 1 9 18 14 11 29 26 13 12 24\r\n",
                "2526\r\n"
            ],
            [
                "50\r\n38 51\r\n26 42\r\n11 22\r\n9 16\r\n34 54\r\n19 49\r\n36 88\r\n66 92\r\n48 87\r\n23 86\r\n14 41\r\n45 81\r\n30 83\r\n13 24\r\n73 82\r\n10 96\r\n80 100\r\n5 97\r\n47 85\r\n43 55\r\n50 52\r\n3 32\r\n6 17\r\n31 89\r\n37 67\r\n56 64\r\n63 91\r\n33 75\r\n20 68\r\n15 27\r\n18 78\r\n4 40\r\n60 65\r\n69 99\r\n74 93\r\n58 94\r\n35 53\r\n1 12\r\n29 95\r\n46 79\r\n7 72\r\n44 76\r\n2 77\r\n28 98\r\n8 39\r\n57 70\r\n62 71\r\n59 84\r\n21 90\r\n25 61\r\n27\r\n28 40 34 42 2 9 11 50 23 19 46 35 17 27 29 5 32 30 41 39 20 8 48 26 10 14 16\r\n",
                "9235\r\n"
            ]
        ]
    }
]