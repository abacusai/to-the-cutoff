[
    {
        "name": "Li Hua and Chess",
        "description": "This is an interactive problem. Li Ming and Li Hua are playing a game. Li Hua\nhas a chessboard of size \n    n\n    \u00d7 m\n. Denote \n    (r, c)\n (\n    1\n    \u2264\n    r\n    \u2264 n, 1\n    \u2264 c\n    \u2264 m\n) as the cell on the \n    r\n-th row from the top\nand on the \n    c\n-th column from the left. Li Ming put a king on the\nchessboard and Li Hua needs to guess its position. Li Hua can ask Li Ming no\nmore than \n    3\n questions. In each question, he can choose a cell and ask\nthe minimum steps needed to move the king to the chosen cell. Each question is\nindependent, which means the king doesn't actually move. A king can move from\n\n    (x,y)\n to \n    (x',y')\n if and only if\n\n    max\n    \n    |x-x'|,|y-y'|\n    \n    =1\n (shown in the following picture). The\nposition of the king is chosen before the interaction. Suppose you were Li\nHua, please solve this problem. Interaction The first line contains the number\nof test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^3\n). The first line of each\ntest case contains two integers \n    n,m\n (\n    1\n    \u2264 n,m\n    \u2264 10^9\n) \u2014 the\nsize of the chessboard, and then the interaction begins. To ask a question,\nprint \"? \n    r\n \n    c\n\" (without quotes, \n    1 \n    \u2264 r \n    \u2264 n, 1 \n    \u2264 c\n    \n    \u2264 m\n). Then you should input the response from standard input \u2014 the\nminimum steps the king needs to move to the chosen cell. If your program has\nasked an invalid question or has run out of questions, the interactor will\nterminate immediately and your program will get a verdict Wrong answer. To\ngive the final answer, print \"! \n    r\n \n    c\n\" (without the quotes,\n\n    (r,c)\n is the king's initial coordinate). Note that giving this answer is\nnot counted towards the limit of \n    3\n questions. After asking a question do\nnot forget to output the end of line and flush the output. Otherwise, you will\nget Idleness limit exceeded. To do this, use: fflush(stdout) or cout.flush()\nin C++; System.out.flush() in Java; flush(output) in Pascal; stdout.flush() in\nPython; see the documentation for other languages. Hacks To hack, use the\nfollowing format. The first line should contain a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 10^3\n). The first and only line of each test case should\ncontain four integers \n    n,m,r,c\n (\n    1\n    \u2264 r\n    \u2264 n\n    \u2264 10^9,1\n    \u2264\n    c\n    \u2264 m\n    \u2264 10^9\n). Example Input 2 3 4 1 2 5 3 3 1 2 Output ? 2 3 ? 2 4 !\n2 2 ? 2 2 ? 5 2 ? 5 3 ! 5 1 Note In test case 1, the king is at \n    (2,2)\n.\nIt takes \n    1\n step to move to \n    (2,3)\n and \n    2\n steps to move to\n\n    (2,4)\n. Note that the questions may not seem sensible. They are just a\nsample of questions you may ask.\n\n",
        "cf_contest_id": 1797,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "interactive"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n3 4 2 2\r\n5 3 5 1\r\n",
                "2 2 3\r\n5 1 3\r\n"
            ]
        ],
        "private_cases": []
    }
]