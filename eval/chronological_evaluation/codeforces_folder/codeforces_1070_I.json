[
    {
        "name": "Privatization of Roads in Berland",
        "description": "There are \n    n\n cities and \n    m\n two-way roads in Berland, each road\nconnecting two distinct cities. Recently the Berland government has made a\ntough decision to transfer ownership of the roads to private companies. In\ntotal, there are \n    100500\n private companies in Berland, numbered by\nintegers from \n    1\n to \n    100500\n. After the privatization, every road\nshould belong to exactly one company. The anti-monopoly committee demands that\nafter the privatization each company can own at most two roads. The urbanists\nof Berland also stated their opinion: each city should be adjacent to the\nroads owned by at most \n    k\n companies. Help the government to distribute\nthe roads between the companies so that both conditions are satisfied. That\nis, each company gets at most two roads, and each city has roads of at most\n\n    k\n distinct companies adjacent to it. Input Input contains one or several\ntest cases. The first line contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    300\n) \u2014 the number of test cases in the input. Solve test cases separately,\ntest cases are completely independent and do not affect each other. The\nfollowing lines describe the test cases. Each case starts with a line\nconsisting of three space-separated integers \n    n\n, \n    m\n and \n    k\n\n(\n    2 \n    \u2264 n \n    \u2264 600\n, \n    1 \n    \u2264 m \n    \u2264 600\n, \n    1 \n    \u2264 k \n    \u2264 n -\n    1\n) \u2014 the number of cities, the number of roads and the maximum diversity of\nthe roads adjacent to a city. Then \n    m\n lines follow, each having a pair of\nspace-separated integers \n    a_i\n, \n    b_i\n (\n    1 \n    \u2264 a_i, b_i \n    \u2264 n\n;\n\n    a_i \n     b_i\n). It means that the \n    i\n-th road connects cities\n\n    a_i\n and \n    b_i\n. All roads are two-way. There is at most one road\nbetween a pair of the cities. The sum of \n    n\n values for all test cases\ndoesn't exceed \n    600\n. The sum of \n    m\n values for all test cases doesn't\nexceed \n    600\n. Output Print \n    t\n lines: the \n    i\n-th line should\ncontain the answer for the \n    i\n-th test case. For a test case, print a\nsequence of integers \n    c_1, c_2, \n    \u2026, c_m\n separated by space, where\n\n    c_i\n (\n    1 \n    \u2264 c_i \n    \u2264 100500\n) is the company which owns the\n\n    i\n-th road in your plan. If there are multiple solutions, output any of\nthem. If there is no solution for a test case, print\n\n    c_1=c_2=\n    \u2026=c_m=0\n. Example Input 3 3 3 2 1 2 2 3 3 1 4 5 2 1 2 1 3\n1 4 2 3 2 4 4 6 2 1 2 1 3 1 4 2 3 2 4 3 4 Output 1 2 3 2 1 1 2 3 0 0 0 0 0 0\n\n",
        "cf_contest_id": 1070,
        "cf_index": "I",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "flows",
            "graph matchings",
            "graphs"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3 3 2\r\n1 2\r\n2 3\r\n3 1\r\n4 5 2\r\n1 2\r\n1 3\r\n1 4\r\n2 3\r\n2 4\r\n4 6 2\r\n1 2\r\n1 3\r\n1 4\r\n2 3\r\n2 4\r\n3 4\r\n",
                "1 2 3 \r\n1 1 3 2 2 \r\n0 0 0 0 0 0 \r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2 1 1\r\n1 2\r\n",
                "1 \r\n"
            ],
            [
                "3\r\n3 2 1\r\n1 2\r\n2 3\r\n3 2 2\r\n1 2\r\n2 3\r\n3 3 2\r\n1 2\r\n2 3\r\n3 1\r\n",
                "1 1 \r\n1 2 \r\n1 2 3 \r\n"
            ],
            [
                "1\r\n10 40 6\r\n1 8\r\n1 4\r\n3 6\r\n4 7\r\n8 6\r\n10 2\r\n3 7\r\n5 3\r\n4 3\r\n7 9\r\n7 5\r\n9 2\r\n2 5\r\n10 7\r\n9 10\r\n8 5\r\n9 3\r\n4 2\r\n5 9\r\n6 7\r\n1 7\r\n7 8\r\n6 10\r\n10 5\r\n5 6\r\n7 2\r\n2 8\r\n3 2\r\n6 2\r\n6 1\r\n3 1\r\n8 3\r\n1 5\r\n2 1\r\n4 9\r\n9 6\r\n4 10\r\n6 4\r\n10 8\r\n3 10\r\n",
                "1 1 5 14 11 19 14 5 6 15 9 2 2 15 18 9 6 3 10 11 16 16 12 19 12 3 4 7 13 13 7 17 10 4 8 18 20 8 17 20 \r\n"
            ]
        ]
    }
]