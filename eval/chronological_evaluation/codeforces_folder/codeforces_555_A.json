[
    {
        "name": "Case of Matryoshkas",
        "description": "Andrewid the Android is a galaxy-famous detective. He is now investigating the\ncase of vandalism at the exhibition of contemporary art. The main exhibit is a\nconstruction of n matryoshka dolls that can be nested one into another. The\nmatryoshka dolls are numbered from 1 to n. A matryoshka with a smaller number\ncan be nested in a matryoshka with a higher number, two matryoshkas can not be\ndirectly nested in the same doll, but there may be chain nestings, for\nexample, 1 \u2192 2 \u2192 4 \u2192 5. In one second, you can perform one of the two\nfollowing operations: Having a matryoshka a that isn't nested in any other\nmatryoshka and a matryoshka b, such that b doesn't contain any other\nmatryoshka and is not nested in any other matryoshka, you may put a in b;\nHaving a matryoshka a directly contained in matryoshka b, such that b is not\nnested in any other matryoshka, you may get a out of b. According to the\nmodern aesthetic norms the matryoshka dolls on display were assembled in a\nspecific configuration, i.e. as several separate chains of nested matryoshkas,\nbut the criminal, following the mysterious plan, took out all the dolls and\nassembled them into a single large chain (1 \u2192 2 \u2192 ... \u2192 n). In order to\ncontinue the investigation Andrewid needs to know in what minimum time it is\npossible to perform this action. Input The first line contains integers n (1 \u2264\nn \u2264 10^5) and k (1 \u2264 k \u2264 10^5) \u2014 the number of matryoshkas and matryoshka\nchains in the initial configuration. The next k lines contain the descriptions\nof the chains: the i-th line first contains number mi (1 \u2264 mi \u2264 n), and then\nmi numbers ai1, ai2, ..., aimi \u2014 the numbers of matryoshkas in the chain\n(matryoshka ai1 is nested into matryoshka ai2, that is nested into matryoshka\nai3, and so on till the matryoshka aimi that isn't nested into any other\nmatryoshka). It is guaranteed that m1 + m2 + ... + mk = n, the numbers of\nmatryoshkas in all the chains are distinct, in each chain the numbers of\nmatryoshkas follow in the ascending order. Output In the single line print the\nminimum number of seconds needed to assemble one large chain from the initial\nconfiguration. Examples Input 3 2 2 1 2 1 3 Output 1 Input 7 3 3 1 3 7 2 2 5 2\n4 6 Output 10 Note In the first sample test there are two chains: 1 \u2192 2 and 3.\nIn one second you can nest the first chain into the second one and get 1 \u2192 2 \u2192\n3. In the second sample test you need to disassemble all the three chains into\nindividual matryoshkas in 2 + 1 + 1 = 4 seconds and then assemble one big\nchain in 6 seconds.\n\n",
        "cf_contest_id": 555,
        "cf_index": "A",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2\r\n2 1 2\r\n1 3\r\n",
                "1\r\n"
            ],
            [
                "7 3\r\n3 1 3 7\r\n2 2 5\r\n2 4 6\r\n",
                "10\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1 1\r\n",
                "0\r\n"
            ],
            [
                "3 2\r\n1 2\r\n2 1 3\r\n",
                "3\r\n"
            ],
            [
                "5 3\r\n1 4\r\n3 1 2 3\r\n1 5\r\n",
                "2\r\n"
            ],
            [
                "8 5\r\n2 1 2\r\n2 3 4\r\n1 5\r\n2 6 7\r\n1 8\r\n",
                "8\r\n"
            ],
            [
                "10 10\r\n1 5\r\n1 4\r\n1 10\r\n1 3\r\n1 7\r\n1 1\r\n1 8\r\n1 6\r\n1 9\r\n1 2\r\n",
                "9\r\n"
            ],
            [
                "20 6\r\n3 8 9 13\r\n3 4 14 20\r\n2 15 17\r\n3 2 5 11\r\n5 7 10 12 18 19\r\n4 1 3 6 16\r\n",
                "33\r\n"
            ],
            [
                "50 10\r\n6 17 21 31 42 45 49\r\n6 11 12 15 22 26 38\r\n3 9 29 36\r\n3 10 23 43\r\n5 14 19 28 46 48\r\n2 30 39\r\n6 13 20 24 33 37 47\r\n8 1 2 3 4 5 6 7 8\r\n7 16 18 25 27 34 40 44\r\n4 32 35 41 50\r\n",
                "75\r\n"
            ],
            [
                "13 8\r\n1 5\r\n2 8 10\r\n1 13\r\n4 1 2 3 11\r\n1 7\r\n2 6 12\r\n1 4\r\n1 9\r\n",
                "13\r\n"
            ],
            [
                "21 13\r\n1 18\r\n2 8 13\r\n1 21\r\n1 17\r\n2 7 9\r\n1 20\r\n1 19\r\n1 4\r\n1 16\r\n2 5 6\r\n3 12 14 15\r\n3 1 2 3\r\n2 10 11\r\n",
                "24\r\n"
            ],
            [
                "50 50\r\n1 2\r\n1 5\r\n1 28\r\n1 46\r\n1 42\r\n1 24\r\n1 3\r\n1 37\r\n1 33\r\n1 50\r\n1 23\r\n1 40\r\n1 43\r\n1 26\r\n1 49\r\n1 34\r\n1 8\r\n1 45\r\n1 15\r\n1 1\r\n1 22\r\n1 18\r\n1 27\r\n1 25\r\n1 13\r\n1 39\r\n1 38\r\n1 10\r\n1 44\r\n1 6\r\n1 17\r\n1 47\r\n1 7\r\n1 35\r\n1 20\r\n1 36\r\n1 31\r\n1 21\r\n1 32\r\n1 29\r\n1 4\r\n1 12\r\n1 19\r\n1 16\r\n1 11\r\n1 41\r\n1 9\r\n1 14\r\n1 30\r\n1 48\r\n",
                "49\r\n"
            ],
            [
                "100 3\r\n45 1 2 3 4 5 6 7 8 9 19 21 24 27 28 30 34 35 37 39 40 41 42 43 46 47 48 51 52 55 58 59 61 63 64 66 69 71 76 80 85 86 88 89 94 99\r\n26 10 11 15 18 23 29 31 33 36 38 44 49 54 56 60 62 65 75 78 82 83 84 95 96 97 98\r\n29 12 13 14 16 17 20 22 25 26 32 45 50 53 57 67 68 70 72 73 74 77 79 81 87 90 91 92 93 100\r\n",
                "180\r\n"
            ],
            [
                "100 19\r\n6 62 72 83 91 94 97\r\n3 61 84 99\r\n1 63\r\n5 46 53 56 69 78\r\n5 41 43 49 74 89\r\n5 55 57 79 85 87\r\n3 47 59 98\r\n3 64 76 82\r\n3 48 66 75\r\n2 60 88\r\n2 67 77\r\n4 40 51 73 95\r\n41 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 44 71 81\r\n4 58 65 90 93\r\n1 100\r\n5 39 45 52 80 86\r\n2 50 68\r\n1 92\r\n4 42 54 70 96\r\n",
                "106\r\n"
            ]
        ]
    }
]