[
    {
        "name": "Orac and Medians",
        "description": "Slime has a sequence of positive integers \n    a_1, a_2, \n    \u2026, a_n\n. In\none operation Orac can choose an arbitrary subsegment \n    [l \n    \u2026 r]\n of\nthis sequence and replace all values \n    a_l, a_l + 1, \n    \u2026, a_r\n to\nthe value of median of \n    a_l, a_l + 1, \n    \u2026, a_r\n. In this\nproblem, for the integer multiset \n    s\n, the median of \n    s\n is equal to\nthe \n    \u230a\n    |s|+1/2\n    \u230b\n-th smallest number in it. For\nexample, the median of \n    1,4,4,6,5\n is \n    4\n, and the median of\n\n    1,7,5,8\n is \n    5\n. Slime wants Orac to make \n    a_1 = a_2 =\n    \n    \u2026 = a_n = k\n using these operations. Orac thinks that it is\nimpossible, and he does not want to waste his time, so he decided to ask you\nif it is possible to satisfy the Slime's requirement, he may ask you these\nquestions several times. Input The first line of the input is a single integer\n\n    t\n: the number of queries. The first line of each query contains two\nintegers \n    n\n     (1\n    \u2264 n\n    \u2264 100\n     000)\n and \n    k\n     (1\n    \u2264 k\n    \u2264\n    10^9)\n, the second line contains \n    n\n positive integers\n\n    a_1,a_2,\n    \u2026,a_n\n     (1\n    \u2264 a_i\n    \u2264 10^9)\n The total sum of \n    n\n\nis at most \n    100\n     000\n. Output The output should contain \n    t\n lines.\nThe \n    i\n-th line should be equal to 'yes' if it is possible to make all\nintegers \n    k\n in some number of operations or 'no', otherwise. You can\nprint each letter in lowercase or uppercase. Example Input 5 5 3 1 5 2 6 1 1 6\n6 3 2 1 2 3 4 3 3 1 2 3 10 3 1 2 3 4 5 6 7 8 9 10 Output no yes yes no yes\nNote In the first query, Orac can't turn all elements into \n    3\n. In the\nsecond query, \n    a_1=6\n is already satisfied. In the third query, Orac can\nselect the complete array and turn all elements into \n    2\n. In the fourth\nquery, Orac can't turn all elements into \n    3\n. In the fifth query, Orac can\nselect \n    [1,6]\n at first and then select \n    [2,10]\n.\n\n",
        "cf_contest_id": 1349,
        "cf_index": "B",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n5 3\r\n1 5 2 6 1\r\n1 6\r\n6\r\n3 2\r\n1 2 3\r\n4 3\r\n3 1 2 3\r\n10 3\r\n1 2 3 4 5 6 7 8 9 10\r\n",
                "no\r\nyes\r\nyes\r\nno\r\nyes\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 1\r\n1000000000\r\n3 1000000000\r\n1000000000 996 251\r\n",
                "no\r\nno\r\n"
            ],
            [
                "1\r\n7 2\r\n5 5 1 1 2 1 1\r\n",
                "yes\r\n"
            ],
            [
                "1\r\n10 2\r\n1 1 2 1 1 1 1 5 1 5\r\n",
                "yes\r\n"
            ],
            [
                "1\r\n10 10\r\n10 1 1 1 1 1 1 11 1 11\r\n",
                "yes\r\n"
            ],
            [
                "1\r\n9 3\r\n3 1 1 1 1 1 4 1 4\r\n",
                "yes\r\n"
            ],
            [
                "1\r\n7 3\r\n3 2 2 2 4 2 4\r\n",
                "yes\r\n"
            ],
            [
                "1\r\n9 5\r\n6 4 6 1 1 1 1 1 5\r\n",
                "yes\r\n"
            ],
            [
                "1\r\n6 3\r\n3 1 1 6 1 6\r\n",
                "yes\r\n"
            ],
            [
                "1\r\n6 3\r\n4 1 4 1 1 3\r\n",
                "yes\r\n"
            ],
            [
                "1\r\n7 2\r\n2 1 1 1 3 1 3\r\n",
                "yes\r\n"
            ],
            [
                "1\r\n5 2\r\n2 1 5 1 1\r\n",
                "yes\r\n"
            ],
            [
                "1\r\n7 3\r\n4 1 4 1 1 1 3\r\n",
                "yes\r\n"
            ],
            [
                "1\r\n7 3\r\n3 1 1 1 4 1 4\r\n",
                "yes\r\n"
            ],
            [
                "1\r\n6 2\r\n3 1 3 1 1 2\r\n",
                "yes\r\n"
            ],
            [
                "1\r\n6 3\r\n5 1 5 2 2 3\r\n",
                "yes\r\n"
            ],
            [
                "1\r\n7 2\r\n3 3 1 1 2 1 1\r\n",
                "yes\r\n"
            ],
            [
                "1\r\n14 3\r\n1 1 10 1 13 1 1 1 1 1 3 1 1 3\r\n",
                "yes\r\n"
            ],
            [
                "1\r\n7 10\r\n15 1 15 1 1 1 10\r\n",
                "yes\r\n"
            ],
            [
                "1\r\n10 2\r\n2 1 1 1 1 1 1 1 3 3\r\n",
                "yes\r\n"
            ],
            [
                "1\r\n17 15\r\n3 5 4 6 10 2 16 10 18 8 5 1 2 7 15 14 8\r\n",
                "yes\r\n"
            ],
            [
                "1\r\n6 5\r\n5 1 1 7 1 7\r\n",
                "yes\r\n"
            ],
            [
                "1\r\n10 2\r\n3 1 3 1 1 1 1 1 1 2\r\n",
                "yes\r\n"
            ],
            [
                "1\r\n7 2\r\n3 1 3 1 1 1 2\r\n",
                "yes\r\n"
            ],
            [
                "1\r\n26 2\r\n2 1 1 1 3 1 4 1 1 5 1 1 6 1 1 7 1 1 8 1 1 9 1 1 10 1\r\n",
                "yes\r\n"
            ]
        ]
    }
]