[
    {
        "name": "Tree Calendar",
        "description": "Yuu Koito and Touko Nanami are newlyweds! On the wedding day, Yuu gifted Touko\na directed tree with \n    n\n nodes and rooted at \n    1\n, and a labeling\n\n    a\n which is some DFS order of the tree. Every edge in this tree is\ndirected away from the root. After calling dfs(1) the following algorithm\nreturns \n    a\n as a DFS order of a tree rooted at \n    1\n : order := 0 a :=\narray of length n function dfs(u): order := order + 1 a[u] := order for all v\nsuch that there is a directed edge (u -> v): dfs(v) Note that there may be\ndifferent DFS orders for a given tree. Touko likes the present so much she\ndecided to play with it! On each day following the wedding day, Touko performs\nthis procedure once: Among all directed edges \n    u \n    \u2192 v\n such\nthat \n    a_u < a_v\n, select the edge \n    u' \n    \u2192 v'\n with the\nlexicographically smallest pair \n    (a_u', a_v')\n. Swap \n    a_u'\n and\n\n    a_v'\n.Days have passed since their wedding, and Touko has somehow\nforgotten which date the wedding was and what was the original labeling\n\n    a\n! Fearing that Yuu might get angry, Touko decided to ask you to derive\nthese two pieces of information using the current labeling. Being her good\nfriend, you need to find the number of days that have passed since the\nwedding, and the original labeling of the tree. However, there is a chance\nthat Touko might have messed up her procedures, which result in the current\nlabeling being impossible to obtain from some original labeling; in that case,\nplease inform Touko as well. Input The first line of the input contains an\ninteger \n    n\n (\n    2 \n    \u2264 n \n    \u2264 3 \n    \u00b7 10^5\n) \u2014 the number of nodes\non the tree. The second line contains \n    n\n integers \n    a_1\n, \n    a_2\n,\n..., \n    a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n, all \n    a_i\n are distinct) \u2014 the\ncurrent labeling of the tree. Each of the next \n    n - 1\n lines contains two\nintegers \n    u_i\n and \n    v_i\n (\n    1 \n    \u2264 u, v \n    \u2264 n\n, \n    u \n    \u2260\n    v\n), describing an directed edge from \n    u_i\n to \n    v_i\n. The edges form\na directed tree rooted at \n    1\n. Output If the current labeling is\nimpossible to arrive at from any DFS order, print NO. Else, on the first line,\nprint YES. On the second line, print a single integer denoting the number of\ndays since the wedding. On the third line, print \n    n\n numbers space-\nseparated denoting the original labeling of the tree. If there are multiple\ncorrect outputs, print any. This means: you are allowed to output any pair\n(DFS order, number of days), such that we get the current configuration from\nthe DFS order you provided in exactly the number of days you provided.\nExamples Input 7 4 5 2 1 7 6 3 1 5 7 6 1 2 2 7 3 4 1 3 Output YES 5 1 4 2 3 7\n6 5 Input 7 7 6 5 3 1 4 2 4 3 2 5 3 7 1 4 7 2 2 6 Output NO Note The following\nanimation showcases the first sample test case. The white label inside the\nnode represents the index of the node \n    i\n, while the boxed orange label\nrepresents the value \n    a_i\n.\n\n",
        "cf_contest_id": 1508,
        "cf_index": "E",
        "cf_rating": 3100,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "data structures",
            "dfs and similar",
            "sortings",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "7\r\n4 5 2 1 7 6 3\r\n1 5\r\n7 6\r\n1 2\r\n2 7\r\n3 4\r\n1 3\r\n",
                "YES\r\n5\r\n1 4 2 3 7 6 5 "
            ],
            [
                "7\r\n7 6 5 3 1 4 2\r\n4 3\r\n2 5\r\n3 7\r\n1 4\r\n7 2\r\n2 6\r\n",
                "NO\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n6 5 9 10 8 3 1 2 4 7\r\n10 5\r\n10 3\r\n3 4\r\n4 8\r\n4 6\r\n2 9\r\n1 10\r\n5 7\r\n4 2\r\n",
                "NO\r\n"
            ],
            [
                "10\r\n5 3 9 7 10 4 1 6 8 2\r\n1 8\r\n8 10\r\n9 3\r\n10 7\r\n1 9\r\n8 2\r\n2 6\r\n2 4\r\n9 5\r\n",
                "NO\r\n"
            ],
            [
                "2\r\n2 1\r\n1 2\r\n",
                "YES\r\n1\r\n1 2 "
            ],
            [
                "5\r\n3 2 5 4 1\r\n1 4\r\n1 2\r\n4 3\r\n4 5\r\n",
                "NO\r\n"
            ],
            [
                "5\r\n3 5 4 1 2\r\n1 2\r\n2 3\r\n3 4\r\n3 5\r\n",
                "NO\r\n"
            ]
        ]
    }
]