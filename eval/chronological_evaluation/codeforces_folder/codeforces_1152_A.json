[
    {
        "name": "Neko Finds Grapes",
        "description": "On a random day, Neko found \n    n\n treasure chests and \n    m\n keys. The\n\n    i\n-th chest has an integer \n    a_i\n written on it and the \n    j\n-th key\nhas an integer \n    b_j\n on it. Neko knows those chests contain the powerful\nmysterious green Grapes, thus Neko wants to open as many treasure chests as\npossible. The \n    j\n-th key can be used to unlock the \n    i\n-th chest if and\nonly if the sum of the key number and the chest number is an odd number.\nFormally, \n    a_i + b_j \n    \u2261 1 \n    2\n. One key can be used to open\nat most one chest, and one chest can be opened at most once. Find the maximum\nnumber of chests Neko can open. Input The first line contains integers \n    n\n\nand \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 10^5\n) \u2014 the number of chests and the\nnumber of keys. The second line contains \n    n\n integers \n    a_1, a_2,\n    \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the numbers written on the\ntreasure chests. The third line contains \n    m\n integers \n    b_1, b_2,\n    \n    \u2026, b_m\n (\n    1 \n    \u2264 b_i \n    \u2264 10^9\n) \u2014 the numbers written on the\nkeys. Output Print the maximum number of chests you can open. Examples Input 5\n4 9 14 6 2 11 8 4 7 20 Output 3 Input 5 1 2 4 6 8 10 5 Output 1 Input 1 4 10\n20 30 40 50 Output 0 Note In the first example, one possible way to unlock\n\n    3\n chests is as follows: Use first key to unlock the fifth chest, Use\nthird key to unlock the second chest, Use fourth key to unlock the first\nchest. In the second example, you can use the only key to unlock any single\nchest (note that one key can't be used twice). In the third example, no key\ncan unlock the given chest.\n\n",
        "cf_contest_id": 1152,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 4\r\n9 14 6 2 11\r\n8 4 7 20\r\n",
                "3\r\n"
            ],
            [
                "5 1\r\n2 4 6 8 10\r\n5\r\n",
                "1\r\n"
            ],
            [
                "1 4\r\n10\r\n20 30 40 50\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "27 9\r\n72 105 100 105 110 103 32 109 101 115 115 97 103 101 115 32 105 110 32 116 101 115 116 99 97 115 101\r\n83 110 101 97 107 32 49 48 48\r\n",
                "9\r\n"
            ],
            [
                "3 10\r\n107 117 110\r\n71 114 101 101 110 71 114 97 112 101\r\n",
                "3\r\n"
            ],
            [
                "7 4\r\n116 111 117 114 105 115 116\r\n112 101 116 114\r\n",
                "4\r\n"
            ],
            [
                "10 10\r\n522312461 931001459 598654597 488228616 544064902 21923894 329635457 980089248 988262691 654502493\r\n967529230 543358150 835120075 128123793 809901567 613170206 152157661 479980560 859252956 318029856\r\n",
                "10\r\n"
            ],
            [
                "1 10\r\n1\r\n1 2 3 4 5 6 7 8 9 10\r\n",
                "1\r\n"
            ],
            [
                "5 1\r\n1 2 3 4 5\r\n1\r\n",
                "1\r\n"
            ],
            [
                "7 4\r\n2 2 1 1 1 1 1\r\n2 2 2 1\r\n",
                "4\r\n"
            ],
            [
                "4 1\r\n1 1 1 2\r\n2\r\n",
                "1\r\n"
            ],
            [
                "4 1\r\n3 5 7 8\r\n2\r\n",
                "1\r\n"
            ],
            [
                "5 2\r\n1 2 2 2 2\r\n1 1\r\n",
                "2\r\n"
            ],
            [
                "4 2\r\n3 2 1 4\r\n2 3\r\n",
                "2\r\n"
            ],
            [
                "2 4\r\n1 2\r\n1 1 2 2\r\n",
                "2\r\n"
            ],
            [
                "4 1\r\n2 2 3 3\r\n2\r\n",
                "1\r\n"
            ],
            [
                "5 1\r\n2 2 2 3 3\r\n3\r\n",
                "1\r\n"
            ],
            [
                "4 1\r\n1 1 2 2\r\n2\r\n",
                "1\r\n"
            ],
            [
                "1 5\r\n3\r\n3 4 4 4 4\r\n",
                "1\r\n"
            ],
            [
                "6 4\r\n2 4 6 1 3 5\r\n8 10 7 9\r\n",
                "4\r\n"
            ]
        ]
    }
]