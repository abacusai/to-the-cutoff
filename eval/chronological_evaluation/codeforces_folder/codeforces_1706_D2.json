[
    {
        "name": "Chopping Carrots (Hard Version)",
        "description": "This is the hard version of the problem. The only difference between the\nversions is the constraints on \n    n\n, \n    k\n, \n    a_i\n, and the sum of\n\n    n\n over all test cases. You can make hacks only if both versions of the\nproblem are solved. Note the unusual memory limit. You are given an array of\nintegers \n    a_1, a_2, \n    \u2026, a_n\n of length \n    n\n, and an integer\n\n    k\n. The cost of an array of integers \n    p_1, p_2, \n    \u2026, p_n\n of\nlength \n    n\n is \n    \n\n    max\n    _1 \n    \u2264 i \n    \u2264 n\n    (\n    \n    \u230a\n    a_i/p_i\n    \n    \u230b\n    ) - \n    min\n    _1\n    \n    \u2264 i \n    \u2264 n\n    (\n    \n    \u230a\n    a_i/p_i\n    \n    \u230b\n    ).\n\n    \n Here, \n    \u230a\n    x/y\n    \u230b\n denotes the\ninteger part of the division of \n    x\n by \n    y\n. Find the minimum cost of\nan array \n    p\n such that \n    1 \n    \u2264 p_i \n    \u2264 k\n for all \n    1 \n    \u2264 i\n    \n    \u2264 n\n. Input The first line contains a single integer \n    t\n (\n    1 \n    \u2264\n    t \n    \u2264 100\n) \u2014 the number of test cases. The first line of each test case\ncontains two integers \n    n\n and \n    k\n (\n    1 \n    \u2264 n, k \n    \u2264 10^5\n). The\nsecond line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1\n    \n    \u2264 a_1 \n    \u2264 a_2 \n    \u2264\n    \u2026\n    \u2264 a_n \n    \u2264 10^5\n). It is guaranteed\nthat the sum of \n    n\n over all test cases does not exceed \n    10^5\n. Output\nFor each test case, print a single integer \u2014 the minimum possible cost of an\narray \n    p\n satisfying the condition above. Example Input 7 5 2 4 5 6 8 11 5\n12 4 5 6 8 11 3 1 2 9 15 7 3 2 3 5 5 6 9 10 6 56 54 286 527 1436 2450 2681 3\n95 16 340 2241 2 2 1 3 Output 2 0 13 1 4 7 0 Note In the first test case, the\noptimal array is \n    p = [1, 1, 1, 2, 2]\n. The resulting array of values of\n\n    \u230a\n    a_i/p_i\n    \u230b\n is \n    [4, 5, 6, 4, 5]\n. The cost\nof \n    p\n is \n    max\n    _1 \n    \u2264 i \n    \u2264 n(\n    \u230a\n    a_i/p_i\n    \u230b) - \n    min\n    _1 \n    \u2264 i \n    \u2264 n(\n    \u230a\n    a_i/p_i\n    \u230b) = 6 - 4 = 2\n. We can show that there is no\narray (satisfying the condition from the statement) with a smaller cost. In\nthe second test case, one of the optimal arrays is \n    p = [12, 12, 12, 12,\n    12]\n, which results in all \n    \u230a\n    a_i/p_i\n    \u230b\n being\n\n    0\n. In the third test case, the only possible array is \n    p = [1, 1,\n    1]\n.\n\n",
        "cf_contest_id": 1706,
        "cf_index": "D2",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "data structures",
            "dp",
            "greedy",
            "math",
            "number theory",
            "two pointers"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 64.0,
        "public_cases": [
            [
                "7\r\n5 2\r\n4 5 6 8 11\r\n5 12\r\n4 5 6 8 11\r\n3 1\r\n2 9 15\r\n7 3\r\n2 3 5 5 6 9 10\r\n6 56\r\n54 286 527 1436 2450 2681\r\n3 95\r\n16 340 2241\r\n2 2\r\n1 3\r\n",
                "2\r\n0\r\n13\r\n1\r\n4\r\n7\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 1\r\n1\r\n",
                "0\r\n"
            ]
        ]
    }
]