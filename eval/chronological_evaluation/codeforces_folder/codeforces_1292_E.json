[
    {
        "name": "Rin and The Unknown Flower",
        "description": "MisoilePunch\u266a - \u5f69 This is an interactive problem! On a normal day at the\nhidden office in A.R.C. Markland-N, Rin received an artifact, given to her by\nthe exploration captain Sagar. After much analysis, she now realizes that this\nartifact contains data about a strange flower, which has existed way before\nthe New Age. However, the information about its chemical structure has been\nencrypted heavily. The chemical structure of this flower can be represented as\na string \n    p\n. From the unencrypted papers included, Rin already knows the\nlength \n    n\n of that string, and she can also conclude that the string\ncontains at most three distinct letters: \"C\" (as in Carbon), \"H\" (as in\nHydrogen), and \"O\" (as in Oxygen). At each moment, Rin can input a string\n\n    s\n of an arbitrary length into the artifact's terminal, and it will\nreturn every starting position of \n    s\n as a substring of \n    p\n. However,\nthe artifact has limited energy and cannot be recharged in any way, since the\ntechnology is way too ancient and is incompatible with any current A.R.C.'s\ndevices. To be specific: The artifact only contains \n    7/5\n units\nof energy. For each time Rin inputs a string \n    s\n of length \n    t\n, the\nartifact consumes \n    1/t^2\n units of energy. If the amount of\nenergy reaches below zero, the task will be considered failed immediately, as\nthe artifact will go black forever. Since the artifact is so precious yet\nfragile, Rin is very nervous to attempt to crack the final data. Can you give\nher a helping hand? Interaction The interaction starts with a single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 500\n), the number of test cases. The interaction\nfor each testcase is described below: First, read an integer \n    n\n (\n    4\n    \n    \u2264 n \n    \u2264 50\n), the length of the string \n    p\n. Then you can make\nqueries of type \"? s\" (\n    1 \n    \u2264 |s| \n    \u2264 n\n) to find the occurrences of\n\n    s\n as a substring of \n    p\n. After the query, you need to read its\nresult as a series of integers in a line: The first integer \n    k\n denotes\nthe number of occurrences of \n    s\n as a substring of \n    p\n (\n    -1 \n    \u2264 k\n    \n    \u2264 n\n). If \n    k = -1\n, it means you have exceeded the energy limit or\nprinted an invalid query, and you need to terminate immediately, to guarantee\na \"Wrong answer\" verdict, otherwise you might get an arbitrary verdict because\nyour solution will continue to read from a closed stream. The following\n\n    k\n integers \n    a_1, a_2, \n    \u2026, a_k\n (\n    1 \n    \u2264 a_1 < a_2 <\n    \n    \u2026 < a_k \n    \u2264 n\n) denote the starting positions of the substrings\nthat match the string \n    s\n.When you find out the string \n    p\n, print \"!\n\n    p\n\" to finish a test case. This query doesn't consume any energy. The\ninteractor will return an integer \n    1\n or \n    0\n. If the interactor\nreturns \n    1\n, you can proceed to the next test case, or terminate the\nprogram if it was the last testcase. If the interactor returns \n    0\n, it\nmeans that your guess is incorrect, and you should to terminate to guarantee a\n\"Wrong answer\" verdict. Note that in every test case the string \n    p\n is\nfixed beforehand and will not change during the queries, i.e. the interactor\nis not adaptive. After printing any query do not forget to print end of line\nand flush the output. Otherwise, you might get Idleness limit exceeded. To do\nthis, use: fflush(stdout) or cout.flush() in C++; System.out.flush() in Java;\nflush(output) in Pascal; stdout.flush() in Python; see the documentation for\nother languages.Hacks For hack, use the following format. Note that you can\nonly hack with one test case: The first line should contain a single integer\n\n    t\n (\n    t = 1\n). The second line should contain an integer \n    n\n (\n    4\n    \n    \u2264 n \n    \u2264 50\n) \u2014 the string's size. The third line should contain a\nstring of size \n    n\n, consisting of characters \"C\", \"H\" and \"O\" only. This\nis the string contestants will have to find out. Examples Input 1 4 2 1 2 1 2\n0 1 Output ? C ? CH ? CCHO ! CCHH Input 2 5 0 2 2 3 1 8 1 5 1 5 1 3 2 1 2 1\nOutput ? O ? HHH ! CHHHH ? COO ? COOH ? HCCOO ? HH ! HHHCCOOH Note Note that\nthe example interaction contains extra empty lines so that it's easier to\nread. The real interaction doesn't contain any empty lines and you shouldn't\nprint any extra empty lines as well.\n\n",
        "cf_contest_id": 1292,
        "cf_index": "E",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "interactive",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n4\r\nCCHH\r\n",
                "1.3125000000000000\r\n"
            ],
            [
                "2\r\n5\r\nCHHHH\r\n8\r\nHHHCCOOH\r\n",
                "1.2900000000000000\r\n1.2968750000000000\r\n"
            ]
        ],
        "private_cases": []
    }
]