[
    {
        "name": "a-Good String",
        "description": "You are given a string \n    s[1 \n    \u2026 n]\n consisting of lowercase Latin\nletters. It is guaranteed that \n    n = 2^k\n for some integer \n    k \n    \u2265 0\n.\nThe string \n    s[1 \n    \u2026 n]\n is called \n    c\n-good if at least one of the\nfollowing three conditions is satisfied: The length of \n    s\n is \n    1\n, and\nit consists of the character \n    c\n (i.e. \n    s_1=c\n); The length of \n    s\n\nis greater than \n    1\n, the first half of the string consists of only the\ncharacter \n    c\n (i.e. \n    s_1=s_2=\n    \u2026=s_\n    n/2=c\n) and the\nsecond half of the string (i.e. the string \n    s_\n    n/2 +\n    1s_\n    n/2 + 2\n    \u2026 s_n\n) is a \n    (c+1)\n-good string; The\nlength of \n    s\n is greater than \n    1\n, the second half of the string\nconsists of only the character \n    c\n (i.e. \n    s_\n    n/2 +\n    1=s_\n    n/2 + 2=\n    \u2026=s_n=c\n) and the first half of the string\n(i.e. the string \n    s_1s_2 \n    \u2026 s_\n    n/2\n) is a \n    (c+1)\n-good\nstring. For example: \"aabc\" is 'a'-good, \"ffgheeee\" is 'e'-good. In one move,\nyou can choose one index \n    i\n from \n    1\n to \n    n\n and replace \n    s_i\n\nwith any lowercase Latin letter (any character from 'a' to 'z'). Your task is\nto find the minimum number of moves required to obtain an 'a'-good string from\n\n    s\n (i.e. \n    c\n-good string for \n    c=\n 'a'). It is guaranteed that the\nanswer always exists. You have to answer \n    t\n independent test cases.\nAnother example of an 'a'-good string is as follows. Consider the string \n    s\n    =\n\"cdbbaaaa\". It is an 'a'-good string, because: the second half of the\nstring (\"aaaa\") consists of only the character 'a'; the first half of the\nstring (\"cdbb\") is 'b'-good string, because: the second half of the string\n(\"bb\") consists of only the character 'b'; the first half of the string (\"cd\")\nis 'c'-good string, because: the first half of the string (\"c\") consists of\nonly the character 'c'; the second half of the string (\"d\") is 'd'-good\nstring. Input The first line of the input contains one integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 2 \n    \u00b7 10^4\n) \u2014 the number of test cases. Then \n    t\n test\ncases follow. The first line of the test case contains one integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 131\u00a0072\n) \u2014 the length of \n    s\n. It is guaranteed that\n\n    n = 2^k\n for some integer \n    k \n    \u2265 0\n. The second line of the test\ncase contains the string \n    s\n consisting of \n    n\n lowercase Latin\nletters. It is guaranteed that the sum of \n    n\n does not exceed \n    2 \n    \u00b7\n    10^5\n (\n    \u2211 n \n    \u2264 2 \n    \u00b7 10^5\n). Output For each test case,\nprint the answer \u2014 the minimum number of moves required to obtain an 'a'-good\nstring from \n    s\n (i.e. \n    c\n-good string with \n    c =\n 'a'). It is\nguaranteed that the answer exists. Example Input 6 8 bbdcaaaa 8 asdfghjk 8\nceaaaabb 8 bbaaddcc 1 z 2 ac Output 0 7 4 5 1 1\n\n",
        "cf_contest_id": 1385,
        "cf_index": "D",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "divide and conquer",
            "dp",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n8\r\nbbdcaaaa\r\n8\r\nasdfghjk\r\n8\r\nceaaaabb\r\n8\r\nbbaaddcc\r\n1\r\nz\r\n2\r\nac\r\n",
                "0\r\n7\r\n4\r\n5\r\n1\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]