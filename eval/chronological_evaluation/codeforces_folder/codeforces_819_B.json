[
    {
        "name": "Mister B and PR Shifts",
        "description": "Some time ago Mister B detected a strange signal from the space, which he\nstarted to study. After some transformation the signal turned out to be a\npermutation p of length n or its cyclic shift. For the further investigation\nMister B need some basis, that's why he decided to choose cyclic shift of this\npermutation which has the minimum possible deviation. Let's define the\ndeviation of a permutation p as . Find a cyclic shift of permutation p with\nminimum possible deviation. If there are multiple solutions, print any of\nthem. Let's denote id k (0 \u2264 k < n) of a cyclic shift of permutation p as the\nnumber of right shifts needed to reach this shift, for example: k = 0: shift\np1, p2, ... pn, k = 1: shift pn, p1, ... pn - 1, ..., k = n - 1: shift p2, p3,\n... pn, p1. Input First line contains single integer n (2 \u2264 n \u2264 10^6) \u2014 the\nlength of the permutation. The second line contains n space-separated integers\np1, p2, ..., pn (1 \u2264 pi \u2264 n) \u2014 the elements of the permutation. It is\nguaranteed that all elements are distinct. Output Print two integers: the\nminimum deviation of cyclic shifts of permutation p and the id of such shift.\nIf there are multiple solutions, print any of them. Examples Input 3 1 2 3\nOutput 0 0 Input 3 2 3 1 Output 0 1 Input 3 3 2 1 Output 2 1 Note In the first\nsample test the given permutation p is the identity permutation, that's why\nits deviation equals to 0, the shift id equals to 0 as well. In the second\nsample test the deviation of p equals to 4, the deviation of the 1-st cyclic\nshift (1, 2, 3) equals to 0, the deviation of the 2-nd cyclic shift (3, 1, 2)\nequals to 4, the optimal is the 1-st cyclic shift. In the third sample test\nthe deviation of p equals to 4, the deviation of the 1-st cyclic shift (1, 3,\n2) equals to 2, the deviation of the 2-nd cyclic shift (2, 1, 3) also equals\nto 2, so the optimal are both 1-st and 2-nd cyclic shifts.\n\n",
        "cf_contest_id": 819,
        "cf_index": "B",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 2 3\r\n",
                "0 0\n"
            ],
            [
                "3\r\n2 3 1\r\n",
                "0 1\n"
            ],
            [
                "3\r\n3 2 1\r\n",
                "2 1\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 2\r\n",
                "0 0\n"
            ],
            [
                "2\r\n2 1\r\n",
                "0 1\n"
            ],
            [
                "10\r\n10 1 9 2 8 3 7 4 6 5\r\n",
                "24 7\n"
            ],
            [
                "108\r\n1 102 33 99 6 83 4 20 61 100 76 71 44 9 24 87 57 2 81 82 90 85 12 30 66 53 47 36 43 29 31 64 96 84 77 23 93 78 58 68 42 55 13 70 62 19 92 14 10 65 63 75 91 48 11 105 37 50 32 94 18 26 52 89 104 106 86 97 80 95 17 72 40 22 79 103 25 101 35 51 15 98 67 5 34 69 54 27 45 88 56 16 46 60 74 108 21 41 73 39 107 59 3 8 28 49 7 38\r\n",
                "3428 30\n"
            ],
            [
                "4\r\n1 2 3 4\r\n",
                "0 0\n"
            ],
            [
                "4\r\n1 2 4 3\r\n",
                "2 0\n"
            ],
            [
                "4\r\n1 3 2 4\r\n",
                "2 0\n"
            ],
            [
                "4\r\n1 3 4 2\r\n",
                "2 1\n"
            ],
            [
                "4\r\n1 4 2 3\r\n",
                "4 0\n"
            ],
            [
                "4\r\n1 4 3 2\r\n",
                "4 0\n"
            ],
            [
                "4\r\n2 1 3 4\r\n",
                "2 0\n"
            ],
            [
                "4\r\n2 1 4 3\r\n",
                "4 0\n"
            ],
            [
                "4\r\n2 3 1 4\r\n",
                "4 0\n"
            ],
            [
                "4\r\n2 3 4 1\r\n",
                "0 1\n"
            ],
            [
                "4\r\n2 4 1 3\r\n",
                "2 2\n"
            ],
            [
                "4\r\n2 4 3 1\r\n",
                "2 1\n"
            ],
            [
                "4\r\n3 1 2 4\r\n",
                "2 3\n"
            ],
            [
                "4\r\n3 1 4 2\r\n",
                "4 1\n"
            ],
            [
                "4\r\n3 2 1 4\r\n",
                "4 0\n"
            ],
            [
                "4\r\n3 2 4 1\r\n",
                "2 1\n"
            ],
            [
                "4\r\n3 4 1 2\r\n",
                "0 2\n"
            ],
            [
                "4\r\n3 4 2 1\r\n",
                "2 2\n"
            ],
            [
                "4\r\n4 1 2 3\r\n",
                "0 3\n"
            ],
            [
                "4\r\n4 1 3 2\r\n",
                "2 3\n"
            ],
            [
                "4\r\n4 2 1 3\r\n",
                "2 3\n"
            ],
            [
                "4\r\n4 2 3 1\r\n",
                "4 1\n"
            ],
            [
                "4\r\n4 3 1 2\r\n",
                "2 2\n"
            ],
            [
                "4\r\n4 3 2 1\r\n",
                "4 1\n"
            ],
            [
                "10\r\n1 2 3 4 6 5 7 9 10 8\r\n",
                "6 0\n"
            ],
            [
                "10\r\n1 2 10 9 7 4 8 3 6 5\r\n",
                "26 5\n"
            ],
            [
                "10\r\n1 3 10 9 4 7 5 8 6 2\r\n",
                "22 1\n"
            ],
            [
                "10\r\n1 4 10 8 9 2 3 6 7 5\r\n",
                "20 5\n"
            ],
            [
                "10\r\n1 5 10 8 4 3 9 2 7 6\r\n",
                "26 6\n"
            ],
            [
                "10\r\n1 6 10 7 9 5 3 8 4 2\r\n",
                "24 4\n"
            ],
            [
                "10\r\n1 7 10 6 5 2 3 8 9 4\r\n",
                "26 6\n"
            ],
            [
                "10\r\n1 8 10 6 2 4 9 3 7 5\r\n",
                "24 6\n"
            ],
            [
                "10\r\n1 9 10 5 6 7 3 8 4 2\r\n",
                "26 1\n"
            ],
            [
                "10\r\n1 10 9 5 3 2 4 7 8 6\r\n",
                "20 7\n"
            ],
            [
                "10\r\n2 1 10 5 8 4 9 3 7 6\r\n",
                "28 0\n"
            ],
            [
                "10\r\n2 3 10 5 4 8 6 9 7 1\r\n",
                "14 1\n"
            ],
            [
                "10\r\n2 4 10 3 9 1 5 7 8 6\r\n",
                "28 0\n"
            ],
            [
                "10\r\n2 5 10 3 6 4 9 1 8 7\r\n",
                "28 0\n"
            ],
            [
                "10\r\n2 6 10 1 9 7 4 8 5 3\r\n",
                "28 1\n"
            ],
            [
                "10\r\n2 7 10 1 6 3 4 8 9 5\r\n",
                "20 7\n"
            ]
        ]
    }
]