[
    {
        "name": "Cyclic Shifts",
        "description": "You are given a matrix consisting of \n    n\n rows and \n    m\n columns. The\nmatrix contains lowercase letters of the Latin alphabet. You can perform the\nfollowing operation any number of times you want to: choose two integers\n\n    i\n (\n    1 \n    \u2264 i \n    \u2264 m\n) and \n    k\n (\n    0 < k < n\n), and shift\nevery column \n    j\n such that \n    i \n    \u2264 j \n    \u2264 m\n cyclically by \n    k\n.\nThe shift is performed upwards. For example, if you have a matrix \n    (\n    \n    [ ; ; a b c; ; ; d e f; ; ; g h i;  ]\n    )\n and perform an operation with \n    i = 2\n, \n    k =\n    1\n, then it becomes: \n    ( \n    [ ; ; a e f; ; ; d h i; ; ; g b c;  ]\n    )\n You have to process\n\n    q\n queries. Each of the queries is a string of length \n    m\n consisting\nof lowercase letters of the Latin alphabet. For each query, you have to\ncalculate the minimum number of operations described above you have to perform\nso that at least one row of the matrix is equal to the string from the query.\nNote that all queries are independent, that is, the operations you perform in\na query don't affect the initial matrix in other queries. Input The first line\ncontains three integers \n    n\n, \n    m\n, \n    q\n (\n    2 \n    \u2264 n, m, q \n    \u2264\n    2.5 \n    \u00b7 10^5\n; \n    n \n    \u00b7 m \n    \u2264 5 \n    \u00b7 10^5\n; \n    q \n    \u00b7 m\n    \n    \u2264 5 \n    \u00b7 10^5\n) \u2014 the number of rows and columns in the matrix and\nthe number of queries, respectively. The next \n    n\n lines contains \n    m\n\nlowercase Latin letters each \u2014 elements of the matrix. The following \n    q\n\nlines contains a description of queries \u2014 strings of length \n    m\n consisting\nof lowercase letters of the Latin alphabet. Output Print \n    q\n integers. The\n\n    i\n-th integer should be equal to the minimum number of operations you\nhave to perform so that the matrix contains a string from the \n    i\n-th query\nor \n    -1\n if the specified string cannot be obtained. Examples Input 3 5 4\nabacc ccbba ccabc abacc acbbc ababa acbbc Output 0 2 1 2 Input 6 4 4 daac bcba\nacad cbdc aaaa bcbb dcdd acba bbbb dbcd Output 3 1 2 -1 Input 5 10 5\nltjksdyfgg cbhpsereqn ijndtzbzcf ghgcgeadep bfzdgxqmqe ibgcgzyfep bbhdgxqmqg\nltgcgxrzep ljnpseldgn ghhpseyzcf Output 5 3 5 -1 3\n\n",
        "cf_contest_id": 1431,
        "cf_index": "I",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "strings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3 5 4\r\nabacc\r\nccbba\r\nccabc\r\nabacc\r\nacbbc\r\nababa\r\nacbbc\r\n",
                "0\n2\n1\n2\n\r\n"
            ],
            [
                "6 4 4\r\ndaac\r\nbcba\r\nacad\r\ncbdc\r\naaaa\r\nbcbb\r\ndcdd\r\nacba\r\nbbbb\r\ndbcd\r\n",
                "3\n1\n2\n-1\n\r\n"
            ],
            [
                "5 10 5\r\nltjksdyfgg\r\ncbhpsereqn\r\nijndtzbzcf\r\nghgcgeadep\r\nbfzdgxqmqe\r\nibgcgzyfep\r\nbbhdgxqmqg\r\nltgcgxrzep\r\nljnpseldgn\r\nghhpseyzcf\r\n",
                "5\n3\n5\n-1\n3\n\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 7 20\r\nzfzzzzf\r\nzzzzzfz\r\nzzzffzf\r\nzfzfffz\r\nfzzzzzz\r\nfzzzzzz\r\nfzzfzff\r\nfzzzzzz\r\nffzzfzz\r\nzfzzzzf\r\nzfzffzf\r\nzfzzzzf\r\nfzzfffz\r\nzfzfffz\r\nzfzzzfz\r\nzzzzfzz\r\nfzzzzzz\r\nzzzzffz\r\nzzzffzf\r\nzfzzzzf\r\nzzzffzf\r\nfzzzzzz\r\nzzzzzfz\r\nzzzzffz\r\nzfzfzzf\r\n",
                "0\n3\n0\n3\n0\n1\n0\n1\n0\n1\n2\n0\n1\n0\n0\n0\n0\n0\n1\n1\n\r\n"
            ]
        ]
    }
]