[
    {
        "name": "Interesting Function",
        "description": "You are given two integers \n    l\n and \n    r\n, where \n    l < r\n. We will add\n\n    1\n to \n    l\n until the result is equal to \n    r\n. Thus, there will be\nexactly \n    r-l\n additions performed. For each such addition, let's look at\nthe number of digits that will be changed after it. For example: if\n\n    l=909\n, then adding one will result in \n    910\n and \n    2\n digits will\nbe changed; if you add one to \n    l=9\n, the result will be \n    10\n and\n\n    2\n digits will also be changed; if you add one to \n    l=489999\n, the\nresult will be \n    490000\n and \n    5\n digits will be changed. Changed digits\nalways form a suffix of the result written in the decimal system. Output the\ntotal number of changed digits, if you want to get \n    r\n from \n    l\n,\nadding \n    1\n each time. Input The first line contains an integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 10^4\n). Then \n    t\n test cases follow. Each test case\nis characterized by two integers \n    l\n and \n    r\n (\n    1 \n    \u2264 l < r \n    \u2264\n    10^9\n). Output For each test case, calculate the total number of changed\ndigits if you want to get \n    r\n from \n    l\n, adding one each time. Example\nInput 4 1 9 9 10 10 20 1 1000000000 Output 8 2 11 1111111110\n\n",
        "cf_contest_id": 1538,
        "cf_index": "F",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dp",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 9\r\n9 10\r\n10 20\r\n1 1000000000\r\n",
                "8\r\n2\r\n11\r\n1111111110\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n101 10001\r\n",
                "11000\r\n"
            ],
            [
                "1\r\n1001 10001\r\n",
                "10000\r\n"
            ],
            [
                "1\r\n5487453 6487453\r\n",
                "1111111\r\n"
            ]
        ]
    }
]