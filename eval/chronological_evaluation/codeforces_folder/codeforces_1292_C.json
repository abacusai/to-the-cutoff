[
    {
        "name": "Xenon's Attack on the Gangs",
        "description": "INSPION FullBand Master - INSPION INSPION - IOLITE-SUNSTONE On another floor\nof the A.R.C. Markland-N, the young man Simon \"Xenon\" Jackson, takes a break\nafter finishing his project early (as always). Having a lot of free time, he\ndecides to put on his legendary hacker \"X\" instinct and fight against the\ngangs of the cyber world. His target is a network of \n    n\n small gangs. This\nnetwork contains exactly \n    n - 1\n direct links, each of them connecting two\ngangs together. The links are placed in such a way that every pair of gangs is\nconnected through a sequence of direct links. By mining data, Xenon figured\nout that the gangs used a form of cross-encryption to avoid being busted:\nevery link was assigned an integer from \n    0\n to \n    n - 2\n such that all\nassigned integers are distinct and every integer was assigned to some link. If\nan intruder tries to access the encrypted data, they will have to surpass\n\n    S\n password layers, with \n    S\n being defined by the following formula:\n\n    \n\n    S = \n    \u2211_1 \n    \u2264 u < v \n    \u2264 n mex(u, v)\n\n    \n Here, \n    mex(u,\n    v)\n denotes the smallest non-negative integer that does not appear on any\nlink on the unique simple path from gang \n    u\n to gang \n    v\n. Xenon\ndoesn't know the way the integers are assigned, but it's not a problem. He\ndecides to let his AI's instances try all the passwords on his behalf, but\nbefore that, he needs to know the maximum possible value of \n    S\n, so that\nthe AIs can be deployed efficiently. Now, Xenon is out to write the AI\nscripts, and he is expected to finish them in two hours. Can you find the\nmaximum possible \n    S\n before he returns? Input The first line contains an\ninteger \n    n\n (\n    2 \n    \u2264 n \n    \u2264 3000\n), the number of gangs in the\nnetwork. Each of the next \n    n - 1\n lines contains integers \n    u_i\n and\n\n    v_i\n (\n    1 \n    \u2264 u_i, v_i \n    \u2264 n\n; \n    u_i \n    \u2260 v_i\n), indicating\nthere's a direct link between gangs \n    u_i\n and \n    v_i\n. It's guaranteed\nthat links are placed in such a way that each pair of gangs will be connected\nby exactly one simple path. Output Print the maximum possible value of \n    S\n\n\u2014 the number of password layers in the gangs' network. Examples Input 3 1 2 2\n3 Output 3 Input 5 1 2 1 3 1 4 3 5 Output 10 Note In the first example, one\ncan achieve the maximum \n    S\n with the following assignment: With this\nassignment, \n    mex(1, 2) = 0\n, \n    mex(1, 3) = 2\n and \n    mex(2, 3) = 1\n.\nTherefore, \n    S = 0 + 2 + 1 = 3\n. In the second example, one can achieve the\nmaximum \n    S\n with the following assignment: With this assignment, all non-\nzero mex value are listed below: \n    mex(1, 3) = 1\n \n    mex(1, 5) = 2\n\n\n    mex(2, 3) = 1\n \n    mex(2, 5) = 2\n \n    mex(3, 4) = 1\n \n    mex(4, 5) =\n    3\n Therefore, \n    S = 1 + 2 + 1 + 2 + 1 + 3 = 10\n.\n\n",
        "cf_contest_id": 1292,
        "cf_index": "C",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "dfs and similar",
            "dp",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n1 2\r\n2 3\r\n",
                "3"
            ],
            [
                "5\r\n1 2\r\n1 3\r\n1 4\r\n3 5\r\n",
                "10"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 2\r\n",
                "1"
            ],
            [
                "10\r\n1 10\r\n7 1\r\n6 2\r\n1 3\r\n8 4\r\n1 9\r\n1 4\r\n1 6\r\n5 1\r\n",
                "27"
            ],
            [
                "10\r\n7 4\r\n7 1\r\n3 7\r\n6 1\r\n1 8\r\n1 9\r\n9 2\r\n7 5\r\n10 9\r\n",
                "41"
            ],
            [
                "10\r\n2 8\r\n5 10\r\n3 4\r\n1 6\r\n3 9\r\n1 7\r\n4 8\r\n10 8\r\n1 8\r\n",
                "46"
            ],
            [
                "10\r\n4 5\r\n9 7\r\n1 6\r\n2 5\r\n7 4\r\n6 10\r\n8 3\r\n4 3\r\n6 7\r\n",
                "50"
            ],
            [
                "10\r\n4 3\r\n2 6\r\n10 1\r\n5 7\r\n5 8\r\n10 6\r\n5 9\r\n9 3\r\n2 9\r\n",
                "64"
            ],
            [
                "50\r\n21 10\r\n30 22\r\n3 37\r\n37 32\r\n4 27\r\n18 7\r\n2 30\r\n29 19\r\n6 37\r\n12 39\r\n47 25\r\n41 49\r\n45 9\r\n25 48\r\n16 14\r\n9 7\r\n33 28\r\n3 31\r\n34 16\r\n35 37\r\n27 40\r\n45 16\r\n29 44\r\n16 15\r\n26 15\r\n1 12\r\n2 13\r\n15 21\r\n43 14\r\n9 33\r\n44 15\r\n46 1\r\n38 5\r\n15 5\r\n1 32\r\n42 35\r\n20 27\r\n23 8\r\n1 16\r\n15 17\r\n36 50\r\n13 8\r\n49 45\r\n11 2\r\n24 4\r\n36 15\r\n15 30\r\n16 4\r\n25 37\r\n",
                "1525"
            ],
            [
                "10\r\n8 1\r\n10 1\r\n1 5\r\n4 2\r\n1 3\r\n1 9\r\n1 4\r\n4 7\r\n6 8\r\n",
                "31"
            ],
            [
                "10\r\n5 1\r\n1 7\r\n2 1\r\n1 9\r\n6 1\r\n1 4\r\n3 1\r\n1 8\r\n1 10\r\n",
                "10"
            ],
            [
                "10\r\n1 10\r\n5 1\r\n1 2\r\n9 4\r\n1 7\r\n6 1\r\n8 9\r\n3 1\r\n9 1\r\n",
                "29"
            ],
            [
                "10\r\n1 7\r\n1 5\r\n1 4\r\n1 9\r\n6 1\r\n2 1\r\n1 8\r\n10 7\r\n3 1\r\n",
                "25"
            ],
            [
                "10\r\n4 8\r\n1 10\r\n1 9\r\n1 4\r\n2 5\r\n1 2\r\n3 7\r\n2 6\r\n1 7\r\n",
                "31"
            ],
            [
                "10\r\n8 2\r\n1 8\r\n3 4\r\n7 8\r\n1 10\r\n1 9\r\n9 5\r\n1 6\r\n3 1\r\n",
                "31"
            ],
            [
                "10\r\n7 4\r\n5 1\r\n3 1\r\n5 8\r\n10 9\r\n1 6\r\n10 1\r\n2 1\r\n4 1\r\n",
                "27"
            ],
            [
                "10\r\n1 5\r\n9 2\r\n10 8\r\n9 8\r\n3 10\r\n6 10\r\n10 7\r\n4 8\r\n9 1\r\n",
                "53"
            ],
            [
                "10\r\n9 5\r\n9 3\r\n8 1\r\n4 5\r\n8 2\r\n7 2\r\n7 5\r\n3 6\r\n10 5\r\n",
                "67"
            ],
            [
                "10\r\n10 8\r\n9 2\r\n3 2\r\n10 6\r\n1 3\r\n10 4\r\n5 9\r\n7 8\r\n10 2\r\n",
                "43"
            ],
            [
                "10\r\n8 4\r\n3 5\r\n9 5\r\n10 9\r\n4 6\r\n4 3\r\n7 6\r\n10 1\r\n2 8\r\n",
                "78"
            ],
            [
                "10\r\n1 10\r\n2 9\r\n5 6\r\n4 10\r\n3 6\r\n2 5\r\n7 5\r\n9 4\r\n9 8\r\n",
                "72"
            ],
            [
                "10\r\n5 2\r\n7 8\r\n8 4\r\n3 5\r\n3 6\r\n8 9\r\n7 1\r\n6 10\r\n4 6\r\n",
                "72"
            ],
            [
                "10\r\n10 8\r\n3 7\r\n2 10\r\n6 4\r\n2 4\r\n4 3\r\n9 5\r\n1 8\r\n5 6\r\n",
                "67"
            ]
        ]
    }
]