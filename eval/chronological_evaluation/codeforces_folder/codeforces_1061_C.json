[
    {
        "name": "Multiplicity",
        "description": "You are given an integer array \n    a_1, a_2, \n    \u2026, a_n\n. The array\n\n    b\n is called to be a subsequence of \n    a\n if it is possible to remove\nsome elements from \n    a\n to get \n    b\n. Array \n    b_1, b_2, \n    \u2026, b_k\n\nis called to be good if it is not empty and for every \n    i\n (\n    1 \n    \u2264 i\n    \n    \u2264 k\n) \n    b_i\n is divisible by \n    i\n. Find the number of good\nsubsequences in \n    a\n modulo \n    10^9 + 7\n. Two subsequences are considered\ndifferent if index sets of numbers included in them are different. That is,\nthe values \u200bof the elements \u200bdo not matter in the comparison of subsequences.\nIn particular, the array \n    a\n has exactly \n    2^n - 1\n different\nsubsequences (excluding an empty subsequence). Input The first line contains\nan integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 100\n     000\n) \u2014 the length of the\narray \n    a\n. The next line contains integers \n    a_1, a_2, \n    \u2026, a_n\n\n(\n    1 \n    \u2264 a_i \n    \u2264 10^6\n). Output Print exactly one integer \u2014 the number\nof good subsequences taken modulo \n    10^9 + 7\n. Examples Input 2 1 2 Output\n3 Input 5 2 2 1 22 14 Output 13 Note In the first example, all three non-empty\npossible subsequences are good: \n    1\n, \n    1, 2\n,\n\n    2\n In the second example, the possible good subsequences are:\n\n    2\n, \n    2, 2\n, \n    2, 22\n, \n    2,\n    14\n, \n    2\n, \n    2, 22\n, \n    2, 14\n,\n\n    1\n, \n    1, 22\n, \n    1, 14\n,\n\n    22\n, \n    22, 14\n, \n    14\n. Note, that\nsome subsequences are listed more than once, since they occur in the original\narray multiple times.\n\n",
        "cf_contest_id": 1061,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp",
            "implementation",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n1 2\r\n",
                "3"
            ],
            [
                "5\r\n2 2 1 22 14\r\n",
                "13"
            ]
        ],
        "private_cases": [
            [
                "1\r\n519612\r\n",
                "1"
            ],
            [
                "15\r\n513046 683844 914823 764255 815301 790234 184972 93547 388028 211665 554415 713159 183950 200951 842336\r\n",
                "161"
            ],
            [
                "50\r\n170081 797965 40736 224325 102476 20832 954026 923972 391400 247099 95141 927386 79799 749285 104039 200818 623552 872203 355273 838168 352783 850365 389351 930945 847154 608047 727586 549184 520573 608953 338849 536466 345479 589848 882827 771475 874283 787115 992590 128903 97800 74550 674140 282514 510849 106786 267881 163456 753022 925051\r\n",
                "20918"
            ],
            [
                "12\r\n230070 37311 92074 618927 991732 129711 612126 541583 552857 299118 773097 33928\r\n",
                "140"
            ],
            [
                "5\r\n325539 329221 106895 882089 718673\r\n",
                "5"
            ],
            [
                "11\r\n146646 521171 278816 989449 899375 650934 615950 390299 618702 962232 512657\r\n",
                "92"
            ],
            [
                "2\r\n9859 748096\r\n",
                "3"
            ],
            [
                "16\r\n629174 232688 695377 426437 164554 460498 956955 310239 322183 515847 847559 240199 792552 770488 4147 573082\r\n",
                "176"
            ],
            [
                "13\r\n313494 586155 96820 472596 340986 799976 416813 725571 487013 603301 832 626376 583769\r\n",
                "142"
            ]
        ]
    }
]