[
    {
        "name": "Colored Subgraphs",
        "description": "Monocarp has a tree, consisting of \n    n\n vertices. He is going to select\nsome vertex \n    r\n and perform the following operations on each vertex\n\n    v\n from \n    1\n to \n    n\n: set \n    d_v\n equal to the distance from\n\n    v\n to \n    r\n (the number of edges on the shortest path); color \n    v\n\nsome color. A nice coloring satisfies two conditions: for each pair of\nvertices of the same color \n    (v, u)\n, there exists a path from \n    v\n to\n\n    u\n that only visits vertices of the same color; for each pair of vertices\nof the same color \n    (v, u)\n, \n    d_v \n    \u2260 d_u\n. Note that Monocarp can\nchoose any amount of different colors he wants to use. For each used color, he\nthen counts the number of vertices of this color. The cost of the tree is the\nminimum of these numbers. What can be the maximum cost of the tree? Input The\nfirst line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014\nthe number of testcases. The first line of each testcase contains a single\ninteger \n    n\n (\n    3 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of\nvertices in the tree. Each of the next \n    n-1\n lines contains two integers\n\n    v\n and \n    u\n (\n    1 \n    \u2264 v, u \n    \u2264 n\n) \u2014 the description of an edge.\nThe given edges form a tree. The sum of \n    n\n over all testcases doesn't\nexceed \n    2 \n    \u00b7 10^5\n. Output For each testcase print a single integer \u2014\nthe maximum possible cost of the tree. Example Input 4 4 1 2 2 3 3 4 5 1 2 1 3\n1 4 1 5 3 1 3 3 2 7 3 2 2 5 7 5 3 1 1 6 1 4 Output 4 1 3 3\n\n",
        "cf_contest_id": 1796,
        "cf_index": "E",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dp",
            "games",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4\r\n1 2\r\n2 3\r\n3 4\r\n5\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n3\r\n1 3\r\n3 2\r\n7\r\n3 2\r\n2 5\r\n7 5\r\n3 1\r\n1 6\r\n1 4\r\n",
                "4\r\n1\r\n3\r\n3\r\n"
            ]
        ],
        "private_cases": []
    }
]