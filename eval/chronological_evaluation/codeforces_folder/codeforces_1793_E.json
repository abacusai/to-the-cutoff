[
    {
        "name": "Velepin and Marketing",
        "description": "The famous writer Velepin is very productive. Recently, he signed a contract\nwith a well-known publication and now he needs to write \n    k_i\n books for\n\n    i\n-th year. This is not a problem for him at all, he can write as much as\nhe wants about samurai, space, emptiness, insects and werewolves. He has\n\n    n\n regular readers, each of whom in the \n    i\n-th year will read one of\nthe \n    k_i\n books published by Velepin. Readers are very fond of discussing\nbooks, so the \n    j\n-th of them will be satisfied within a year if at least\n\n    a_j\n persons read the same book as him (including himself). Velepin has\nobvious problems with marketing, so he turned to you! A well-known book\nreading service can control what each of Velepin's regular readers will read,\nbut he does not want books to be wasted, so someone should read each book. And\nso they turned to you with a request to tell you what the maximum number of\nregular readers can be made satisfied during each of the years, if you can\nchoose each person the book he will read. Input The first line contains a\nsingle integer \n    n\n \n    (2 \n    \u2264 n \n    \u2264 3 \n    \u00b7 10^5)\n \u2014 the number of\nregular readers of Velepin. The second line contains \n    n\n integers \n    a_1,\n    a_2, \n    \u2026, a_n\n \n    (1 \n    \u2264 a_i \n    \u2264 n)\n \u2014 the number of necessary\nreaders of the same book for the happiness of the \n    i\n-th person. The third\nline contains a single integer \n    q\n \n    (1 \n    \u2264 q \n    \u2264 3 \n    \u00b7 10^5)\n\n\u2014 the number of years to analyze. Each of the following \n    q\n lines contains\na single integer \n    k_j\n \n    (2 \n    \u2264 k_j \n    \u2264 n)\n \u2014 the number of books\nthat Velepin must write in \n    j\n-th a year. Output Print \n    q\n lines, each\nof them has exactly one number \u2014 the maximum number of people who can be\nsatisfied in \n    j\n-th a year if Velepin releases \n    k_j\n books. Examples\nInput 5 1 2 2 2 2 3 2 3 4 Output 5 5 3 Input 6 1 2 3 4 5 6 2 2 3 Output 5 4\nInput 6 4 4 1 4 4 4 3 2 3 4 Output 6 5 1 Note In the first example, in the\nfirst year, the optimal division is \n    1, 2, 2, 2, 2\n (the first book is\nread by the first person, and everyone else reads the second). In the second\nyear, the optimal solution is \n    1, 2, 2, 3, 3\n (the first book is read by\nthe first person, the second book is read by the second and third person, and\nall the others read the third book). In the third year, the optimal split will\nbe \n    1, 2, 3, 4, 2\n. Accordingly, the number of satisfied people over the\nyears will be \n    5, 5, 3\n. In the second example, in the first year, the\noptimal division is \n    1, 1, 1, 1, 1, 2\n, then everyone will be happy except\nthe \n    6\n-th person. In the second year, the optimal division is \n    1, 1, 1,\n    1, 2, 3\n, then everyone will be happy except the \n    5\n-th and \n    6\n-th\nperson.\n\n",
        "cf_contest_id": 1793,
        "cf_index": "E",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dp",
            "greedy",
            "sortings",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 2 2 2 2\r\n3\r\n2\r\n3\r\n4\r\n",
                "5\r\n5\r\n3\r\n"
            ],
            [
                "6\r\n1 2 3 4 5 6\r\n2\r\n2\r\n3\r\n",
                "5\r\n4\r\n"
            ],
            [
                "6\r\n4 4 1 4 4 4\r\n3\r\n2\r\n3\r\n4\r\n",
                "6\r\n5\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 1\r\n2\r\n2\r\n2\r\n",
                "2\r\n2\r\n"
            ],
            [
                "50\r\n1 1 1 1 1 2 1 2 1 2 1 2 1 2 1 2 1 1 2 2 2 2 2 2 1 1 1 2 1 2 1 1 2 1 1 1 1 2 2 1 2 2 1 2 2 1 2 1 2 1\r\n40\r\n22\r\n29\r\n2\r\n46\r\n8\r\n21\r\n9\r\n50\r\n25\r\n11\r\n48\r\n15\r\n26\r\n43\r\n16\r\n18\r\n42\r\n40\r\n30\r\n35\r\n4\r\n34\r\n37\r\n38\r\n14\r\n13\r\n45\r\n3\r\n32\r\n27\r\n47\r\n19\r\n5\r\n41\r\n24\r\n36\r\n20\r\n6\r\n31\r\n10\r\n",
                "50\r\n50\r\n50\r\n35\r\n50\r\n50\r\n50\r\n27\r\n50\r\n50\r\n31\r\n50\r\n50\r\n41\r\n50\r\n50\r\n43\r\n47\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n37\r\n50\r\n50\r\n50\r\n33\r\n50\r\n50\r\n45\r\n50\r\n50\r\n50\r\n50\r\n50\r\n50\r\n"
            ],
            [
                "2\r\n1 2\r\n1\r\n2\r\n",
                "1\r\n"
            ],
            [
                "2\r\n2 2\r\n5\r\n2\r\n2\r\n2\r\n2\r\n2\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "10\r\n8 6 7 10 7 3 3 1 3 7\r\n20\r\n3\r\n7\r\n9\r\n4\r\n6\r\n9\r\n4\r\n8\r\n7\r\n6\r\n7\r\n5\r\n2\r\n2\r\n2\r\n4\r\n10\r\n8\r\n3\r\n5\r\n",
                "9\r\n4\r\n1\r\n8\r\n4\r\n1\r\n8\r\n4\r\n4\r\n4\r\n4\r\n5\r\n9\r\n9\r\n9\r\n8\r\n1\r\n4\r\n9\r\n5\r\n"
            ],
            [
                "50\r\n23 13 24 25 23 13 22 23 28 47 11 22 36 30 21 28 14 20 28 27 26 30 4 32 1 25 24 22 22 18 32 21 29 21 17 26 18 24 49 27 9 33 21 16 24 18 24 40 20 23\r\n40\r\n21\r\n32\r\n22\r\n11\r\n3\r\n24\r\n19\r\n40\r\n18\r\n48\r\n41\r\n6\r\n34\r\n25\r\n13\r\n46\r\n4\r\n43\r\n5\r\n50\r\n9\r\n15\r\n30\r\n36\r\n16\r\n2\r\n26\r\n10\r\n47\r\n20\r\n42\r\n27\r\n37\r\n31\r\n14\r\n38\r\n45\r\n35\r\n8\r\n29\r\n",
                "31\r\n12\r\n30\r\n41\r\n49\r\n28\r\n33\r\n4\r\n34\r\n1\r\n3\r\n46\r\n9\r\n27\r\n39\r\n2\r\n48\r\n2\r\n47\r\n1\r\n43\r\n37\r\n18\r\n7\r\n36\r\n50\r\n26\r\n42\r\n2\r\n32\r\n3\r\n25\r\n7\r\n14\r\n38\r\n6\r\n2\r\n8\r\n44\r\n22\r\n"
            ],
            [
                "2\r\n1 1\r\n10\r\n2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n",
                "2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n"
            ]
        ]
    }
]