[
    {
        "name": "Reberland Linguistics",
        "description": "First-rate specialists graduate from Berland State Institute of Peace and\nFriendship. You are one of the most talented students in this university. The\neducation is not easy because you need to have fundamental knowledge in\ndifferent areas, which sometimes are not related to each other. For example,\nyou should know linguistics very well. You learn a structure of Reberland\nlanguage as foreign language. In this language words are constructed according\nto the following rules. First you need to choose the \"root\" of the word \u2014 some\nstring which has more than 4 letters. Then several strings with the length 2\nor 3 symbols are appended to this word. The only restriction \u2014 it is not\nallowed to append the same string twice in a row. All these strings are\nconsidered to be suffixes of the word (this time we use word \"suffix\" to\ndescribe a morpheme but not the few last characters of the string as you may\nused to). Here is one exercise that you have found in your task list. You are\ngiven the word s. Find all distinct strings with the length 2 or 3, which can\nbe suffixes of this word according to the word constructing rules in Reberland\nlanguage. Two strings are considered distinct if they have different length or\nthere is a position in which corresponding characters do not match. Let's look\nat the example: the word abacabaca is given. This word can be obtained in the\nfollowing ways: , where the root of the word is overlined, and suffixes are\nmarked by \"corners\". Thus, the set of possible suffixes for this word is aca,\nba, ca. Input The only line contains a string s (5 \u2264 |s| \u2264 10^4) consisting\nof lowercase English letters. Output On the first line print integer k \u2014 a\nnumber of distinct possible suffixes. On the next k lines print suffixes.\nPrint suffixes in lexicographical (alphabetical) order. Examples Input\nabacabaca Output 3 aca ba ca Input abaca Output 0 Note The first test was\nanalysed in the problem statement. In the second example the length of the\nstring equals 5. The length of the root equals 5, so no string can be used as\na suffix.\n\n",
        "cf_contest_id": 666,
        "cf_index": "A",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "abacabaca\r\n",
                "3\r\naca\r\nba\r\nca\r\n"
            ],
            [
                "abaca\r\n",
                "0\r\n\r\n"
            ]
        ],
        "private_cases": [
            [
                "gzqgchv\r\n",
                "1\r\nhv\r\n"
            ],
            [
                "iosdwvzerqfi\r\n",
                "9\r\ner\r\nerq\r\nfi\r\nqfi\r\nrq\r\nvz\r\nvze\r\nze\r\nzer\r\n"
            ],
            [
                "oawtxikrpvfuzugjweki\r\n",
                "25\r\neki\r\nfu\r\nfuz\r\ngj\r\ngjw\r\nik\r\nikr\r\njw\r\njwe\r\nki\r\nkr\r\nkrp\r\npv\r\npvf\r\nrp\r\nrpv\r\nug\r\nugj\r\nuz\r\nuzu\r\nvf\r\nvfu\r\nwe\r\nzu\r\nzug\r\n"
            ],
            [
                "abcdexyzzzz\r\n",
                "5\r\nxyz\r\nyz\r\nyzz\r\nzz\r\nzzz\r\n"
            ],
            [
                "affviytdmexpwfqplpyrlniprbdphrcwlboacoqec\r\n",
                "67\r\nac\r\naco\r\nbd\r\nbdp\r\nbo\r\nboa\r\nco\r\ncoq\r\ncw\r\ncwl\r\ndm\r\ndme\r\ndp\r\ndph\r\nec\r\nex\r\nexp\r\nfq\r\nfqp\r\nhr\r\nhrc\r\nip\r\nipr\r\nlb\r\nlbo\r\nln\r\nlni\r\nlp\r\nlpy\r\nme\r\nmex\r\nni\r\nnip\r\noa\r\noac\r\noq\r\nph\r\nphr\r\npl\r\nplp\r\npr\r\nprb\r\npw\r\npwf\r\npy\r\npyr\r\nqec\r\nqp\r\nqpl\r\nrb\r\nrbd\r\nrc\r\nrcw\r\nrl\r\nrln\r\ntd\r\ntdm\r\nwf\r\nwfq\r\nwl\r\nwlb\r\nxp\r\nxpw\r\nyr\r\nyrl\r\nyt\r\nytd\r\n"
            ],
            [
                "lmnxtobrknqjvnzwadpccrlvisxyqbxxmghvl\r\n",
                "59\r\nad\r\nadp\r\nbr\r\nbrk\r\nbx\r\nbxx\r\ncc\r\nccr\r\ncr\r\ncrl\r\ndp\r\ndpc\r\ngh\r\nhvl\r\nis\r\nisx\r\njv\r\njvn\r\nkn\r\nknq\r\nlv\r\nlvi\r\nmg\r\nmgh\r\nnq\r\nnqj\r\nnz\r\nnzw\r\nob\r\nobr\r\npc\r\npcc\r\nqb\r\nqbx\r\nqj\r\nqjv\r\nrk\r\nrkn\r\nrl\r\nrlv\r\nsx\r\nsxy\r\nvi\r\nvis\r\nvl\r\nvn\r\nvnz\r\nwa\r\nwad\r\nxm\r\nxmg\r\nxx\r\nxxm\r\nxy\r\nxyq\r\nyq\r\nyqb\r\nzw\r\nzwa\r\n"
            ],
            [
                "hzobjysjhbebobkoror\r\n",
                "20\r\nbe\r\nbeb\r\nbko\r\nbo\r\nbob\r\neb\r\nebo\r\nhb\r\nhbe\r\njh\r\njhb\r\nko\r\nkor\r\nob\r\nor\r\nror\r\nsj\r\nsjh\r\nys\r\nysj\r\n"
            ],
            [
                "glaoyryxrgsysy\r\n",
                "10\r\ngs\r\ngsy\r\nrgs\r\nry\r\nryx\r\nsy\r\nxr\r\nysy\r\nyx\r\nyxr\r\n"
            ],
            [
                "aaaaaxyxxxx\r\n",
                "5\r\nxx\r\nxxx\r\nxyx\r\nyx\r\nyxx\r\n"
            ],
            [
                "aaaaax\r\n",
                "0\r\n\r\n"
            ],
            [
                "aaaaaxx\r\n",
                "1\r\nxx\r\n"
            ],
            [
                "aaaaaaa\r\n",
                "1\r\naa\r\n"
            ],
            [
                "aaaaaxxx\r\n",
                "2\r\nxx\r\nxxx\r\n"
            ],
            [
                "aaaaayxx\r\n",
                "2\r\nxx\r\nyxx\r\n"
            ],
            [
                "aaaaaxyz\r\n",
                "2\r\nxyz\r\nyz\r\n"
            ],
            [
                "aaaaaxyxy\r\n",
                "2\r\nxy\r\nyxy\r\n"
            ],
            [
                "aaaxyyxyy\r\n",
                "3\r\nxyy\r\nyx\r\nyy\r\n"
            ],
            [
                "aaaaaxxxxxx\r\n",
                "2\r\nxx\r\nxxx\r\n"
            ],
            [
                "aaaaaxxxxx\r\n",
                "2\r\nxx\r\nxxx\r\n"
            ],
            [
                "aaaaaxyzxyxy\r\n",
                "5\r\nxy\r\nyxy\r\nyzx\r\nzx\r\nzxy\r\n"
            ],
            [
                "aaaaadddgggg\r\n",
                "6\r\ndd\r\nddg\r\ndg\r\ndgg\r\ngg\r\nggg\r\n"
            ],
            [
                "abcdeabzzzzzzzz\r\n",
                "5\r\nab\r\nabz\r\nbz\r\nzz\r\nzzz\r\n"
            ],
            [
                "bbbbbccaaaaaa\r\n",
                "4\r\naa\r\naaa\r\nca\r\ncca\r\n"
            ],
            [
                "xxxxxababc\r\n",
                "5\r\nab\r\naba\r\nabc\r\nba\r\nbc\r\n"
            ],
            [
                "dddddaabbbbbb\r\n",
                "4\r\naab\r\nab\r\nbb\r\nbbb\r\n"
            ],
            [
                "xxxxxababe\r\n",
                "5\r\nab\r\naba\r\nabe\r\nba\r\nbe\r\n"
            ],
            [
                "aaaaababaaaaaaaaaaaa\r\n",
                "6\r\naa\r\naaa\r\nab\r\nba\r\nbaa\r\nbab\r\n"
            ]
        ]
    }
]