[
    {
        "name": "Fish Graph",
        "description": "You are given a simple undirected graph with \n    n\n nodes and \n    m\n edges.\nNote that the graph is not necessarily connected. The nodes are labeled from\n\n    1\n to \n    n\n. We define a graph to be a Fish Graph if it contains a\nsimple cycle with a special node \n    u\n belonging to the cycle. Apart from\nthe edges in the cycle, the graph should have exactly \n    2\n extra edges.\nBoth edges should connect to node \n    u\n, but they should not be connected to\nany other node of the cycle. Determine if the graph contains a subgraph that\nis a Fish Graph, and if so, find any such subgraph. In this problem, we define\na subgraph as a graph obtained by taking any subset of the edges of the\noriginal graph. Visualization of example 1. The red edges form one possible\nsubgraph that is a Fish Graph. Input The first line of input contains the\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n), the number of test cases. The\ndescription of test cases follows. The first line of each test case contains\ntwo integers, \n    n\n and \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 2\n     000\n) \u2014 the\nnumber of nodes and the number of edges. Each of the next \n    m\n lines\ncontains the description of an edge. Each line contains two integers \n    u_i\n\nand \n    v_i\n (\n    1 \n    \u2264 u_i, v_i \n    \u2264 n\n, \n    u_i\n    \u2260 v_i\n) \u2014 an\nedge connects node \n    u_i\n to node \n    v_i\n. It is guaranteed that no two\nedges connect the same unordered pair of nodes. Furthermore, it is guaranteed\nthat the sum of \n    n\n and the sum of \n    m\n over all test cases both do not\nexceed \n    2\n     000\n. Output For each testcase, output \"YES\" if the graph\ncontains a subgraph that is a Fish Graph, otherwise print \"NO\". If the answer\nis \"YES\", on the following lines output a description of the subgraph. The\nfirst line of the description contains one integer \n    k\n \u2014 the number of\nedges of the subgraph. On the next \n    k\n lines, output the edges of the\nchosen subgraph. Each of the \n    k\n lines should contains two integers\n\n    u\n and \n    v\n (\n    1\n    \u2264 u, v\n    \u2264 n\n, \n    u\n    \u2260 v\n) \u2014 the edge\nbetween \n    u\n and \n    v\n belongs to the subgraph. The order in which\n\n    u\n and \n    v\n are printed does not matter, as long as the two nodes are\nconnected by an edge in the original graph. The order in which you print the\nedges does not matter, as long as the resulting subgraph is a fish graph. If\nthere are multiple solutions, print any. Example Input 3 7 8 1 2 2 3 3 4 4 1 4\n5 4 6 4 2 6 7 7 7 6 7 1 2 2 3 3 4 4 1 1 3 3 5 4 4 1 3 3 4 4 1 1 2 Output YES 6\n5 4 6 4 4 3 1 4 2 1 3 2 YES 5 5 3 2 3 3 1 4 3 1 4 NO Note In the first\nexample, a possible valid subgraph contains the cycle \n    1 \n    \u2192 2\n    \n    \u2192 3 \n    \u2192 4 \n    \u2192 1\n. The special node of this\ncycle is node \n    4\n. The two extra edges \n    4 - 5\n and \n    4 - 6\n are\nboth connected to \n    4\n, completing the Fish Graph. In the second example, a\npossible valid subgraph contains the cycle \n    1 \n    \u2192 3 \n    \u2192\n    4 \n    \u2192 1\n. The special node of this cycle is node \n    3\n. The two\nextra edges \n    3 - 2\n and \n    3 - 5\n are both connected to \n    3\n,\ncompleting the Fish Graph. In the last example, it can be proven that there is\nno valid subgraph.\n\n",
        "cf_contest_id": 1817,
        "cf_index": "B",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "graphs"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n7 8\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n4 5\r\n4 6\r\n4 2\r\n6 7\r\n7 7\r\n6 7\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n1 3\r\n3 5\r\n4 4\r\n1 3\r\n3 4\r\n4 1\r\n1 2\r\n",
                "YES\r\n5\r\n4 1\r\n4 5\r\n4 2\r\n2 3\r\n3 4\r\nYES\r\n5\r\n3 4\r\n3 5\r\n3 1\r\n1 2\r\n2 3\r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2 1\r\n1 2\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n10 10\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n2 6\r\n2 10\r\n7 10\r\n6 7\r\n7 8\r\n7 9\r\n",
                "YES\r\n6\r\n7 8\r\n7 9\r\n7 6\r\n6 2\r\n2 10\r\n10 7\r\n"
            ]
        ]
    }
]