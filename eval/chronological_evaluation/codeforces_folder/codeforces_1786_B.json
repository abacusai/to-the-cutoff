[
    {
        "name": "Cake Assembly Line",
        "description": "A cake assembly line in a bakery was once again optimized, and now \n    n\n\ncakes are made at a time! In the last step, each of the \n    n\n cakes should\nbe covered with chocolate. Consider a side view on the conveyor belt, let it\nbe a number line. The \n    i\n-th cake occupies the segment \n    [a_i - w, a_i +\n    w]\n on this line, each pair of these segments does not have common points.\nAbove the conveyor, there are \n    n\n dispensers, and when a common button is\npressed, chocolate from the \n    i\n-th dispenser will cover the conveyor\nsegment \n    [b_i - h, b_i + h]\n. Each pair of these segments also does not\nhave common points. Cakes and dispensers corresponding to the first example.\nThe calibration of this conveyor belt part has not yet been performed, so you\nare to make it. Determine if it's possible to shift the conveyor so that each\ncake has some chocolate on it, and there is no chocolate outside the cakes.\nYou can assume that the conveyour is long enough, so the cakes never fall.\nAlso note that the button can only be pressed once. In the first example we\ncan shift the cakes as shown in the picture. Input Each test contains multiple\ntest cases. The first line contains the number of test cases \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 10^5\n). The description of the test cases follows. The first\nline of each test case contains three integers \n    n\n, \n    w\n, and \n    h\n\n(\n    1 \n    \u2264 n \n    \u2264 10^5\n; \n    1 \n    \u2264 w, h \n    \u2264 10^5\n; \n    h \n    \u2264 w\n) \u2014\nthe number of cakes and dispensers, as well as the halfwidths of cakes and\nsegments on which the chocolate is dispensed. The second line contains \n    n\n\nintegers \n    a_1\n, \n    a_2\n, ..., \n    a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014\nthe positions of the cakes centers. It is guaranteed that \n    a_i + w < a_i +\n    1 - w\n for all \n    i\n. The third line contains \n    n\n integers \n    b_1\n,\n\n    b_2\n, ..., \n    b_n\n (\n    1 \n    \u2264 b_i \n    \u2264 10^9\n) \u2014 the positions of\nthe dispensers. It is guaranteed that \n    b_i + h < b_i + 1 - h\n for all\n\n    i\n. It is guaranteed that the sum of \n    n\n over all test cases does not\nexceed \n    10^5\n. Output For each test case output \"YES\", if it's possible to\nshift the conveyor in such a way that each cake ends up with some chocolate,\nand no chocolate is outside the cakes, and \"NO\" otherwise. You can output the\nanswer in any case (upper or lower). For example, the strings \"yEs\", \"yes\",\n\"Yes\", and \"YES\" will be recognized as positive responses. Example Input 4 3\n10 5 65 95 165 40 65 145 5 2 1 1 6 11 16 21 4 9 14 19 24 3 3 2 13 22 29 5 16\n25 4 4 1 27 36 127 136 35 50 141 144 Output YES YES NO YES Note The first\nexample is shown in the figures in the statement. In the second example, we\ncan move the conveyor, for example, so that the centers of the cakes are at\n\n    4, 9, 14, 19, 24\n. In the third example, we can't move the conveyor\naccordingly.\n\n",
        "cf_contest_id": 1786,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3 10 5\r\n65 95 165\r\n40 65 145\r\n5 2 1\r\n1 6 11 16 21\r\n4 9 14 19 24\r\n3 3 2\r\n13 22 29\r\n5 16 25\r\n4 4 1\r\n27 36 127 136\r\n35 50 141 144\r\n",
                "YES\r\nYES\r\nNO\r\nYES\r\n"
            ]
        ],
        "private_cases": []
    }
]