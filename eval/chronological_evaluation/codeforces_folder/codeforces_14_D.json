[
    {
        "name": "Two Paths",
        "description": "As you know, Bob's brother lives in Flatland. In Flatland there are n cities,\nconnected by n - 1 two-way roads. The cities are numbered from 1 to n. You can\nget from one city to another moving along the roads. The \u00abTwo Paths\u00bb company,\nwhere Bob's brother works, has won a tender to repair two paths in Flatland. A\npath is a sequence of different cities, connected sequentially by roads. The\ncompany is allowed to choose by itself the paths to repair. The only condition\nthey have to meet is that the two paths shouldn't cross (i.e. shouldn't have\ncommon cities). It is known that the profit, the \u00abTwo Paths\u00bb company will get,\nequals the product of the lengths of the two paths. Let's consider the length\nof each road equals 1, and the length of a path equals the amount of roads in\nit. Find the maximum possible profit for the company. Input The first line\ncontains an integer n (2 \u2264 n \u2264 200), where n is the amount of cities in the\ncountry. The following n - 1 lines contain the information about the roads.\nEach line contains a pair of numbers of the cities, connected by the road ai,\nbi (1 \u2264 ai, bi \u2264 n). Output Output the maximum possible profit. Examples Input\n4 1 2 2 3 3 4 Output 1 Input 7 1 2 1 3 1 4 1 5 1 6 1 7 Output 0 Input 6 1 2 2\n3 2 4 5 4 6 4 Output 4\n\n",
        "cf_contest_id": 14,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "shortest paths",
            "trees",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 64.0,
        "public_cases": [
            [
                "4\r\n1 2\r\n2 3\r\n3 4\r\n",
                "1\r\n"
            ],
            [
                "7\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n",
                "0\r\n"
            ],
            [
                "6\r\n1 2\r\n2 3\r\n2 4\r\n5 4\r\n6 4\r\n",
                "4\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n2 1\r\n",
                "0\r\n"
            ],
            [
                "3\r\n3 1\r\n1 2\r\n",
                "0\r\n"
            ],
            [
                "3\r\n1 3\r\n2 1\r\n",
                "0\r\n"
            ],
            [
                "4\r\n4 2\r\n2 3\r\n2 1\r\n",
                "0\r\n"
            ],
            [
                "4\r\n2 3\r\n1 3\r\n2 4\r\n",
                "1\r\n"
            ],
            [
                "4\r\n3 2\r\n3 4\r\n1 4\r\n",
                "1\r\n"
            ],
            [
                "5\r\n1 5\r\n5 2\r\n4 2\r\n3 1\r\n",
                "2\r\n"
            ],
            [
                "5\r\n2 4\r\n2 5\r\n1 5\r\n2 3\r\n",
                "2\r\n"
            ],
            [
                "5\r\n1 2\r\n5 1\r\n3 2\r\n3 4\r\n",
                "2\r\n"
            ],
            [
                "5\r\n5 3\r\n3 1\r\n4 1\r\n4 2\r\n",
                "2\r\n"
            ],
            [
                "6\r\n1 2\r\n2 5\r\n4 5\r\n4 6\r\n3 2\r\n",
                "4\r\n"
            ],
            [
                "7\r\n1 6\r\n4 6\r\n5 6\r\n6 7\r\n2 6\r\n3 7\r\n",
                "2\r\n"
            ],
            [
                "8\r\n7 2\r\n7 1\r\n6 7\r\n4 1\r\n7 3\r\n6 8\r\n2 5\r\n",
                "4\r\n"
            ],
            [
                "8\r\n8 6\r\n1 8\r\n7 8\r\n3 1\r\n2 6\r\n5 3\r\n8 4\r\n",
                "6\r\n"
            ],
            [
                "9\r\n8 4\r\n7 8\r\n6 4\r\n8 3\r\n1 4\r\n3 9\r\n5 7\r\n2 5\r\n",
                "10\r\n"
            ],
            [
                "9\r\n4 7\r\n5 4\r\n2 7\r\n5 6\r\n3 7\r\n7 1\r\n9 2\r\n8 3\r\n",
                "8\r\n"
            ],
            [
                "10\r\n7 6\r\n6 8\r\n10 7\r\n5 10\r\n5 3\r\n2 8\r\n4 5\r\n1 7\r\n4 9\r\n",
                "12\r\n"
            ],
            [
                "10\r\n10 7\r\n7 5\r\n10 8\r\n6 5\r\n7 2\r\n9 7\r\n1 10\r\n3 5\r\n4 10\r\n",
                "6\r\n"
            ],
            [
                "15\r\n15 1\r\n15 10\r\n11 1\r\n1 13\r\n10 12\r\n1 8\r\n15 9\r\n14 13\r\n10 2\r\n7 10\r\n5 15\r\n8 4\r\n11 3\r\n6 15\r\n",
                "12\r\n"
            ],
            [
                "15\r\n10 12\r\n12 4\r\n15 12\r\n15 6\r\n5 15\r\n10 1\r\n8 15\r\n13 12\r\n14 6\r\n8 3\r\n11 5\r\n12 7\r\n15 9\r\n2 7\r\n",
                "16\r\n"
            ],
            [
                "15\r\n13 14\r\n10 14\r\n5 10\r\n10 6\r\n9 10\r\n10 7\r\n15 6\r\n8 7\r\n2 6\r\n1 10\r\n3 1\r\n3 11\r\n4 3\r\n14 12\r\n",
                "10\r\n"
            ],
            [
                "30\r\n2 4\r\n14 2\r\n2 3\r\n23 14\r\n30 2\r\n6 14\r\n13 4\r\n24 30\r\n17 30\r\n25 2\r\n26 23\r\n28 3\r\n6 8\r\n23 29\r\n18 25\r\n10 2\r\n25 7\r\n9 26\r\n6 27\r\n13 12\r\n22 3\r\n1 28\r\n11 10\r\n25 20\r\n30 19\r\n16 14\r\n22 5\r\n21 30\r\n15 18\r\n",
                "30\r\n"
            ],
            [
                "50\r\n7 34\r\n5 34\r\n5 11\r\n11 23\r\n42 5\r\n41 11\r\n12 41\r\n41 49\r\n1 49\r\n12 6\r\n7 15\r\n17 42\r\n20 6\r\n17 46\r\n20 19\r\n46 22\r\n46 40\r\n44 40\r\n43 46\r\n22 8\r\n17 29\r\n44 18\r\n31 18\r\n46 9\r\n7 16\r\n32 11\r\n13 41\r\n20 36\r\n34 25\r\n46 28\r\n39 34\r\n30 42\r\n11 47\r\n45 15\r\n37 17\r\n4 23\r\n35 17\r\n17 48\r\n2 17\r\n34 24\r\n1 10\r\n21 5\r\n2 3\r\n50 16\r\n33 5\r\n20 14\r\n26 19\r\n16 27\r\n38 43\r\n",
                "88\r\n"
            ],
            [
                "5\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n",
                "2\r\n"
            ]
        ]
    }
]