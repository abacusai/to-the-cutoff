[
    {
        "name": "String Transformation 1",
        "description": "Note that the only difference between String Transformation 1 and String\nTransformation 2 is in the move Koa does. In this version the letter \n    y\n\nKoa selects must be strictly greater alphabetically than \n    x\n (read\nstatement for better understanding). You can make hacks in these problems\nindependently. Koa the Koala has two strings \n    A\n and \n    B\n of the same\nlength \n    n\n (\n    |A|=|B|=n\n) consisting of the first \n    20\n lowercase\nEnglish alphabet letters (ie. from a to t). In one move Koa: selects some\nsubset of positions \n    p_1, p_2, \n    \u2026, p_k\n (\n    k \n    \u2265 1; 1 \n    \u2264 p_i\n    \n    \u2264 n; p_i \n    \u2260 p_j\n if \n    i \n    \u2260 j\n) of \n    A\n such that\n\n    A_p_1 = A_p_2 = \n    \u2026 = A_p_k = x\n (ie. all letters on this\npositions are equal to some letter \n    x\n). selects a letter \n    y\n (from\nthe first \n    20\n lowercase letters in English alphabet) such that \n    y>x\n\n(ie. letter \n    y\n is strictly greater alphabetically than \n    x\n). sets\neach letter in positions \n    p_1, p_2, \n    \u2026, p_k\n to letter \n    y\n. More\nformally: for each \n    i\n (\n    1 \n    \u2264 i \n    \u2264 k\n) Koa sets \n    A_p_i =\n    y\n. Note that you can only modify letters in string \n    A\n. Koa wants to\nknow the smallest number of moves she has to do to make strings equal to each\nother (\n    A = B\n) or to determine that there is no way to make them equal.\nHelp her! Input Each test contains multiple test cases. The first line\ncontains \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10\n) \u2014 the number of test cases.\nDescription of the test cases follows. The first line of each test case\ncontains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the length of\nstrings \n    A\n and \n    B\n. The second line of each test case contains string\n\n    A\n (\n    |A|=n\n). The third line of each test case contains string\n\n    B\n (\n    |B|=n\n). Both strings consists of the first \n    20\n lowercase\nEnglish alphabet letters (ie. from a to t). It is guaranteed that the sum of\n\n    n\n over all test cases does not exceed \n    10^5\n. Output For each test\ncase: Print on a single line the smallest number of moves she has to do to\nmake strings equal to each other (\n    A = B\n) or \n    -1\n if there is no way\nto make them equal. Example Input 5 3 aab bcc 4 cabc abcb 3 abc tsr 4 aabd\ncccd 5 abcbd bcdda Output 2 -1 3 2 -1 Note In the \n    1\n-st test case Koa:\nselects positions \n    1\n and \n    2\n and sets \n    A_1 = A_2 =\n b\n(\n    aab \n    \u2192\n    bbb\n). selects\npositions \n    2\n and \n    3\n and sets \n    A_2 = A_3 =\n c\n(\n    b\n    bb\n    \u2192 b\n    cc\n). In the\n\n    2\n-nd test case Koa has no way to make string \n    A\n equal \n    B\n. In\nthe \n    3\n-rd test case Koa: selects position \n    1\n and sets \n    A_1 =\n t\n(\n    abc \n    \u2192\n    tbc\n). selects position\n\n    2\n and sets \n    A_2 =\n s (\n    t\n    bc \n    \u2192\n    t\n    sc\n). selects position \n    3\n and sets \n    A_3 =\n r\n(\n    ts\n    c\n    \u2192 ts\n    r\n).\n\n",
        "cf_contest_id": 1383,
        "cf_index": "A",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "dsu",
            "graphs",
            "greedy",
            "sortings",
            "strings",
            "trees",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3\r\naab\r\nbcc\r\n4\r\ncabc\r\nabcb\r\n3\r\nabc\r\ntsr\r\n4\r\naabd\r\ncccd\r\n5\r\nabcbd\r\nbcdda\r\n",
                "2\r\n-1\r\n3\r\n2\r\n-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n1\r\na\r\nb\r\n1\r\nb\r\na\r\n3\r\nabc\r\ndef\r\n1\r\nt\r\nt\r\n2\r\nrt\r\ntr\r\n2\r\nrt\r\ntt\r\n2\r\nrt\r\nrr\r\n3\r\nasd\r\nqrt\r\n1\r\ns\r\nt\r\n1\r\nr\r\nt\r\n",
                "1\r\n-1\r\n3\r\n0\r\n-1\r\n1\r\n-1\r\n-1\r\n1\r\n1\r\n"
            ],
            [
                "3\r\n2\r\nab\r\nab\r\n1\r\nc\r\nd\r\n4\r\nqqqq\r\nrrrr\r\n",
                "0\r\n1\r\n1\r\n"
            ],
            [
                "4\r\n2\r\nee\r\nfe\r\n3\r\nlml\r\nmji\r\n3\r\nqoq\r\nqpp\r\n1\r\nd\r\ne\r\n",
                "1\r\n-1\r\n-1\r\n1\r\n"
            ]
        ]
    }
]