[
    {
        "name": "Optimal Insertion",
        "description": "You are given two arrays of integers \n    a_1, a_2, \n    \u2026, a_n\n and \n    b_1,\n    b_2, \n    \u2026, b_m\n. You need to insert all elements of \n    b\n into \n    a\n\nin an arbitrary way. As a result you will get an array \n    c_1, c_2, \n    \u2026,\n    c_n+m\n of size \n    n + m\n. Note that you are not allowed to change the\norder of elements in \n    a\n, while you can insert elements of \n    b\n at\narbitrary positions. They can be inserted at the beginning, between any\nelements of \n    a\n, or at the end. Moreover, elements of \n    b\n can appear\nin the resulting array in any order. What is the minimum possible number of\ninversions in the resulting array \n    c\n? Recall that an inversion is a pair\nof indices \n    (i, j)\n such that \n    i < j\n and \n    c_i > c_j\n. Input Each\ntest contains multiple test cases. The first line contains the number of test\ncases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n). Description of the test cases\nfollows. The first line of each test case contains two integers \n    n\n and\n\n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 10^6\n). The second line of each test case\ncontains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i\n    \n    \u2264 10^9\n). The third line of each test case contains \n    m\n integers\n\n    b_1, b_2, \n    \u2026, b_m\n (\n    1 \n    \u2264 b_i \n    \u2264 10^9\n). It is\nguaranteed that the sum of \n    n\n for all tests cases in one input doesn't\nexceed \n    10^6\n. The sum of \n    m\n for all tests cases doesn't exceed\n\n    10^6\n as well. Output For each test case, print one integer \u2014 the minimum\npossible number of inversions in the resulting array \n    c\n. Example Input 3\n3 4 1 2 3 4 3 2 1 3 3 3 2 1 1 2 3 5 4 1 3 5 3 1 4 3 6 1 Output 0 4 6 Note\nBelow is given the solution to get the optimal answer for each of the example\ntest cases (elements of \n    a\n are underscored). In the first test case, \n    c\n    = [\n    1, 1, \n    2, 2, \n    3, 3, 4]\n. In the\nsecond test case, \n    c = [1, 2, \n    3, \n    2,\n    \n    1, 3]\n. In the third test case, \n    c = [\n    1, 1, 3,\n    \n    3, \n    5, \n    3, \n    1, 4, 6]\n.\n\n",
        "cf_contest_id": 1601,
        "cf_index": "C",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "divide and conquer",
            "dp",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n3 4\r\n1 2 3\r\n4 3 2 1\r\n3 3\r\n3 2 1\r\n1 2 3\r\n5 4\r\n1 3 5 3 1\r\n4 3 6 1\r\n",
                "0\r\n4\r\n6\r\n"
            ]
        ],
        "private_cases": []
    }
]