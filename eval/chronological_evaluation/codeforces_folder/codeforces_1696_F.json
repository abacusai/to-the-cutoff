[
    {
        "name": "Tree Recovery",
        "description": "Fishingprince loves trees. A tree is a connected undirected graph without\ncycles. Fishingprince has a tree of \n    n\n vertices. The vertices are\nnumbered \n    1\n through \n    n\n. Let \n    d(x,y)\n denote the shortest\ndistance on the tree from vertex \n    x\n to vertex \n    y\n, assuming that the\nlength of each edge is \n    1\n. However, the tree was lost in an accident.\nFortunately, Fishingprince still remembers some information about the tree.\nMore specifically, for every triple of integers \n    x,y,z\n (\n    1\n    \u2264 x50\n;\nthere are at most \n    5\n test cases that have \n    n>20\n. Output For each\ntest case: if no answer exists, output No; otherwise, on the first line output\nYes. Then output \n    n-1\n lines. Each line should contain two integers\n\n    x,y\n (\n    1\n    \u2264 x,y\n    \u2264 n\n), denoting an edge between vertices \n    x\n\nand \n    y\n of the tree. If there are multiple solutions, print any. When\nprinting Yes and No, you can print each letter in any case (upper or lower).\nExample Input 5 2 00 2 10 3 001 000 000 3 001 010 000 5 00000 01001 00000\n01100 00000 10000 00000 00000 11010 00000 Output Yes 1 2 No Yes 1 3 2 3 No Yes\n1 2 1 4 2 3 2 5\n\n",
        "cf_contest_id": 1696,
        "cf_index": "F",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5\r\n2\r\n00\r\n2\r\n10\r\n3\r\n001 000\r\n000\r\n3\r\n001 010\r\n000\r\n5\r\n00000 01001 00000 01100\r\n00000 10000 00000\r\n00000 11010\r\n00000\r\n",
                "Yes\r\n1 2\r\nNo\r\nYes\r\n1 3\r\n2 3\r\nNo\r\nYes\r\n1 2\r\n1 4\r\n2 3\r\n2 5\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n4\r\n0010 0100 0000\r\n1000 0000\r\n0000\r\n",
                "No\r\n"
            ],
            [
                "1\r\n5\r\n00100 01001 00000 01000\r\n10000 00000 00000\r\n00000 01000\r\n00000\r\n",
                "No\r\n"
            ]
        ]
    }
]