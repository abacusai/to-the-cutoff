[
    {
        "name": "The Contest",
        "description": "A team of three programmers is going to play a contest. The contest consists\nof \n    n\n problems, numbered from \n    1\n to \n    n\n. Each problem is printed\non a separate sheet of paper. The participants have decided to divide the\nproblem statements into three parts: the first programmer took some prefix of\nthe statements (some number of first paper sheets), the third contestant took\nsome suffix of the statements (some number of last paper sheets), and the\nsecond contestant took all remaining problems. But something went wrong \u2014 the\nstatements were printed in the wrong order, so the contestants have received\nthe problems in some random order. The first contestant has received problems\n\n    a_1, 1, a_1, 2, \n    \u2026, a_1, k_1\n. The second one has received\nproblems \n    a_2, 1, a_2, 2, \n    \u2026, a_2, k_2\n. The third one has\nreceived all remaining problems (\n    a_3, 1, a_3, 2, \n    \u2026, a_3,\n    k_3\n). The contestants don't want to play the contest before they\nredistribute the statements. They want to redistribute them so that the first\ncontestant receives some prefix of the problemset, the third contestant\nreceives some suffix of the problemset, and the second contestant receives all\nthe remaining problems. During one move, some contestant may give one of their\nproblems to other contestant. What is the minimum number of moves required to\nredistribute the problems? It is possible that after redistribution some\nparticipant (or even two of them) will not have any problems. Input The first\nline contains three integers \n    k_1, k_2\n and \n    k_3\n (\n    1 \n    \u2264 k_1,\n    k_2, k_3 \n    \u2264 2 \n    \u00b7 10^5, k_1 + k_2 + k_3 \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the\nnumber of problems initially taken by the first, the second and the third\nparticipant, respectively. The second line contains \n    k_1\n integers\n\n    a_1, 1, a_1, 2, \n    \u2026, a_1, k_1\n \u2014 the problems initially taken\nby the first participant. The third line contains \n    k_2\n integers \n    a_2,\n    1, a_2, 2, \n    \u2026, a_2, k_2\n \u2014 the problems initially taken by the\nsecond participant. The fourth line contains \n    k_3\n integers \n    a_3, 1,\n    a_3, 2, \n    \u2026, a_3, k_3\n \u2014 the problems initially taken by the third\nparticipant. It is guaranteed that no problem has been taken by two (or three)\nparticipants, and each integer \n    a_i, j\n meets the condition \n    1 \n    \u2264\n    a_i, j\n    \u2264 n\n, where \n    n = k_1 + k_2 + k_3\n. Output Print one integer\n\u2014 the minimum number of moves required to redistribute the problems so that\nthe first participant gets the prefix of the problemset, the third participant\ngets the suffix of the problemset, and the second participant gets all of the\nremaining problems. Examples Input 2 1 2 3 1 4 2 5 Output 1 Input 3 2 1 3 2 1\n5 4 6 Output 0 Input 2 1 3 5 6 4 1 2 3 Output 3 Input 1 5 1 6 5 1 2 4 7 3\nOutput 2 Note In the first example the third contestant should give the\nproblem \n    2\n to the first contestant, so the first contestant has \n    3\n\nfirst problems, the third contestant has \n    1\n last problem, and the second\ncontestant has \n    1\n remaining problem. In the second example the\ndistribution of problems is already valid: the first contestant has \n    3\n\nfirst problems, the third contestant has \n    1\n last problem, and the second\ncontestant has \n    2\n remaining problems. The best course of action in the\nthird example is to give all problems to the third contestant. The best course\nof action in the fourth example is to give all problems to the second\ncontestant.\n\n",
        "cf_contest_id": 1257,
        "cf_index": "E",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "2 1 2\r\n3 1\r\n4\r\n2 5\r\n",
                "1"
            ],
            [
                "3 2 1\r\n3 2 1\r\n5 4\r\n6\r\n",
                "0"
            ],
            [
                "2 1 3\r\n5 6\r\n4\r\n1 2 3\r\n",
                "3"
            ],
            [
                "1 5 1\r\n6\r\n5 1 2 4 7\r\n3\r\n",
                "2"
            ]
        ],
        "private_cases": [
            [
                "11 7 9\r\n4 8 9 12 14 16 19 21 22 23 27\r\n1 2 3 11 17 18 26\r\n5 6 7 10 13 15 20 24 25\r\n",
                "15"
            ],
            [
                "5 10 6\r\n14 3 6 12 21\r\n7 1 5 8 10 11 13 17 18 20\r\n9 2 4 15 16 19\r\n",
                "11"
            ],
            [
                "1 1 1\r\n3\r\n1\r\n2\r\n",
                "1"
            ]
        ]
    }
]