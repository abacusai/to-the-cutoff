[
    {
        "name": "Centroids",
        "description": "Tree is a connected acyclic graph. Suppose you are given a tree consisting of\nn vertices. The vertex of this tree is called centroid if the size of each\nconnected component that appears if this vertex is removed from the tree\ndoesn't exceed . You are given a tree of size n and can perform no more than\none edge replacement. Edge replacement is the operation of removing one edge\nfrom the tree (without deleting incident vertices) and inserting one new edge\n(without adding new vertices) in such a way that the graph remains a tree. For\neach vertex you have to determine if it's possible to make it centroid by\nperforming no more than one edge replacement. Input The first line of the\ninput contains an integer n (2 \u2264 n \u2264 400 000) \u2014 the number of vertices in the\ntree. Each of the next n - 1 lines contains a pair of vertex indices ui and vi\n(1 \u2264 ui, vi \u2264 n) \u2014 endpoints of the corresponding edge. Output Print n\nintegers. The i-th of them should be equal to 1 if the i-th vertex can be made\ncentroid by replacing no more than one edge, and should be equal to 0\notherwise. Examples Input 3 1 2 2 3 Output 1 1 1 Input 5 1 2 1 3 1 4 1 5\nOutput 1 0 0 0 0 Note In the first sample each vertex can be made a centroid.\nFor example, in order to turn vertex 1 to centroid one have to replace the\nedge (2, 3) with the edge (1, 3).\n\n",
        "cf_contest_id": 708,
        "cf_index": "C",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "dp",
            "graphs",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n1 2\r\n2 3\r\n",
                "1 1 1 \r\n"
            ],
            [
                "5\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n",
                "1 0 0 0 0 \r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n1 2\r\n1 5\r\n5 6\r\n1 3\r\n3 4\r\n2 7\r\n7 8\r\n2 9\r\n9 10\r\n",
                "1 1 1 1 1 1 1 1 1 1 \r\n"
            ],
            [
                "8\r\n1 2\r\n1 3\r\n1 4\r\n2 5\r\n3 6\r\n4 7\r\n7 8\r\n",
                "1 1 1 1 1 1 1 0 \r\n"
            ],
            [
                "13\r\n1 2\r\n2 3\r\n3 4\r\n1 5\r\n5 6\r\n6 7\r\n1 8\r\n8 9\r\n9 10\r\n4 11\r\n7 12\r\n10 13\r\n",
                "1 1 1 0 1 1 0 1 1 0 0 0 0 \r\n"
            ],
            [
                "10\r\n6 9\r\n9 2\r\n4 7\r\n5 4\r\n7 9\r\n8 5\r\n9 10\r\n2 1\r\n8 3\r\n",
                "1 1 1 1 1 1 1 1 1 1 \r\n"
            ],
            [
                "50\r\n28 44\r\n19 36\r\n15 20\r\n49 33\r\n27 18\r\n48 34\r\n5 35\r\n31 3\r\n32 25\r\n22 33\r\n8 7\r\n3 49\r\n32 12\r\n34 29\r\n4 24\r\n5 41\r\n17 24\r\n43 27\r\n11 22\r\n6 33\r\n32 28\r\n27 22\r\n10 43\r\n39 9\r\n45 14\r\n32 46\r\n28 45\r\n7 37\r\n47 42\r\n42 33\r\n5 21\r\n40 39\r\n9 25\r\n23 8\r\n10 29\r\n7 4\r\n41 50\r\n26 33\r\n49 17\r\n12 24\r\n1 8\r\n17 19\r\n41 16\r\n42 20\r\n30 34\r\n13 7\r\n38 29\r\n7 50\r\n19 2\r\n",
                "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \r\n"
            ],
            [
                "4\r\n4 1\r\n1 3\r\n3 2\r\n",
                "1 1 1 1 \r\n"
            ],
            [
                "2\r\n1 2\r\n",
                "1 1 \r\n"
            ],
            [
                "4\r\n3 1\r\n3 2\r\n3 4\r\n",
                "1 1 1 1 \r\n"
            ],
            [
                "8\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n2 6\r\n2 7\r\n2 8\r\n",
                "1 1 1 1 1 1 1 1 \r\n"
            ],
            [
                "14\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n2 7\r\n6 8\r\n7 9\r\n7 10\r\n8 11\r\n8 12\r\n8 13\r\n8 14\r\n",
                "1 1 1 1 1 1 1 1 1 1 0 0 0 0 \r\n"
            ],
            [
                "9\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n2 6\r\n5 7\r\n7 8\r\n7 9\r\n",
                "1 1 1 1 1 1 1 0 0 \r\n"
            ],
            [
                "9\r\n2 1\r\n2 3\r\n2 4\r\n2 5\r\n1 6\r\n5 7\r\n7 8\r\n7 9\r\n",
                "1 1 1 1 1 1 1 0 0 \r\n"
            ],
            [
                "9\r\n3 2\r\n3 1\r\n3 4\r\n3 5\r\n2 6\r\n5 7\r\n7 8\r\n7 9\r\n",
                "1 1 1 1 1 1 1 0 0 \r\n"
            ],
            [
                "9\r\n4 2\r\n4 3\r\n4 1\r\n4 5\r\n2 6\r\n5 7\r\n7 8\r\n7 9\r\n",
                "1 1 1 1 1 1 1 0 0 \r\n"
            ],
            [
                "9\r\n5 2\r\n5 3\r\n5 4\r\n5 1\r\n2 6\r\n1 7\r\n7 8\r\n7 9\r\n",
                "1 1 1 1 1 1 1 0 0 \r\n"
            ],
            [
                "9\r\n6 2\r\n6 3\r\n6 4\r\n6 5\r\n2 1\r\n5 7\r\n7 8\r\n7 9\r\n",
                "1 1 1 1 1 1 1 0 0 \r\n"
            ],
            [
                "9\r\n7 2\r\n7 3\r\n7 4\r\n7 5\r\n2 6\r\n5 1\r\n1 8\r\n1 9\r\n",
                "1 1 1 1 1 1 1 0 0 \r\n"
            ],
            [
                "9\r\n8 2\r\n8 3\r\n8 4\r\n8 5\r\n2 6\r\n5 7\r\n7 1\r\n7 9\r\n",
                "0 1 1 1 1 1 1 1 0 \r\n"
            ],
            [
                "9\r\n9 2\r\n9 3\r\n9 4\r\n9 5\r\n2 6\r\n5 7\r\n7 8\r\n7 1\r\n",
                "0 1 1 1 1 1 1 0 1 \r\n"
            ],
            [
                "10\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n",
                "1 1 1 1 1 1 1 1 1 1 \r\n"
            ],
            [
                "10\r\n10 1\r\n1 4\r\n4 2\r\n2 3\r\n3 6\r\n6 9\r\n9 5\r\n5 8\r\n8 7\r\n",
                "1 1 1 1 1 1 1 1 1 1 \r\n"
            ],
            [
                "7\r\n1 2\r\n1 3\r\n1 4\r\n2 5\r\n3 6\r\n4 7\r\n",
                "1 1 1 1 0 0 0 \r\n"
            ],
            [
                "5\r\n3 4\r\n4 2\r\n5 2\r\n5 1\r\n",
                "1 1 1 1 1 \r\n"
            ],
            [
                "5\r\n2 3\r\n2 5\r\n3 1\r\n2 4\r\n",
                "0 1 1 1 1 \r\n"
            ]
        ]
    }
]