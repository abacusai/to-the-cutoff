[
    {
        "name": "Sanae and Giant Robot",
        "description": "Is it really?! The robot only existing in my imagination?! The Colossal\nWalking Robot?!! \u2014 Kochiya Sanae Sanae made a giant robot \u2014 Hisoutensoku, but\nsomething is wrong with it. To make matters worse, Sanae can not figure out\nhow to stop it, and she is forced to fix it on-the-fly.The state of a robot\ncan be represented by an array of integers of length \n    n\n. Initially, the\nrobot is at state \n    a\n. She wishes to turn it into state \n    b\n. As a\ngreat programmer, Sanae knows the art of copy-and-paste. In one operation, she\ncan choose some segment from given segments, copy the segment from \n    b\n and\npaste it into the same place of the robot, replacing the original state there.\nHowever, she has to ensure that the sum of \n    a\n does not change after each\ncopy operation in case the robot go haywire. Formally, Sanae can choose\nsegment \n    [l,r]\n and assign \n    a_i = b_i\n (\n    l\n    \u2264 i\n    \u2264 r\n) if\n\n    \u2211\n    _i=1^n a_i\n does not change after the operation.\nDetermine whether it is possible for Sanae to successfully turn the robot from\nthe initial state \n    a\n to the desired state \n    b\n with any (possibly,\nzero) operations. Input Each test contains multiple test cases. The first line\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 2\n    \u00b7 10^4\n) \u2014\nthe number of test cases. The descriptions of the test cases follow. The first\nline of each test case contains two integers \n    n\n, \n    m\n (\n    2 \n    \u2264\n    n\n    \u2264 2\n    \u00b7 10^5\n, \n    1 \n    \u2264 m\n    \u2264 2\n    \u00b7 10^5\n) \u2014 the length\nof \n    a\n, \n    b\n and the number of segments. The second line contains\n\n    n\n intergers \n    a_1,a_2,\n    \u2026,a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n)\n\u2014 the initial state \n    a\n. The third line contains \n    n\n intergers\n\n    b_1,b_2,\n    \u2026,b_n\n (\n    1 \n    \u2264 b_i \n    \u2264 10^9\n) \u2014 the desired\nstate \n    b\n. Then \n    m\n lines follow, the \n    i\n-th line contains two\nintergers \n    l_i,r_i\n (\n    1 \n    \u2264 l_i < r_i \n    \u2264 n\n) \u2014 the segments\nthat can be copy-pasted by Sanae. It is guaranteed that both the sum of\n\n    n\n and the sum of \n    m\n over all test cases does not exceed \n    2\n    \n    \u00b7 10 ^ 5\n. Output For each test case, print \"YES\" (without quotes) if\n\n    a\n can be turned into \n    b\n, or \"NO\" (without quotes) otherwise. You\ncan output \"YES\" and \"NO\" in any case (for example, strings \"yEs\", \"yes\" and\n\"Yes\" will be recognized as a positive response). Example Input 2 5 2 1 5 4 2\n3 3 2 5 4 1 1 3 2 5 5 2 1 5 4 2 3 3 2 4 5 1 1 2 2 4 Output YES NO Note Test\ncase 1: One possible way of turning \n    a\n to \n    b\n: First, select\n\n    [1,3]\n. After the operation, \n    a=[3,2,5,2,3]\n. Then, select\n\n    [2,5]\n. After the operation, \n    a=[3,2,5,4,1]=b\n. Test case 2: It can\nbe shown that it is impossible to turn \n    a\n into \n    b\n.\n\n",
        "cf_contest_id": 1687,
        "cf_index": "C",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "data structures",
            "dsu",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n5 2\r\n1 5 4 2 3\r\n3 2 5 4 1\r\n1 3\r\n2 5\r\n5 2\r\n1 5 4 2 3\r\n3 2 4 5 1\r\n1 2\r\n2 4\r\n",
                "YES\r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n6 1\r\n1 1 1 1 1 1\r\n987654322 999888778 159940551 987654322 999888778 159940551\r\n1 6\r\n6 1\r\n987654322 999888778 159940551 987654322 999888778 159940551\r\n1 1 1 1 1 1\r\n1 6\r\n",
                "NO\r\nNO\r\n"
            ]
        ]
    }
]