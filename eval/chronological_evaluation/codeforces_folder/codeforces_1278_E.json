[
    {
        "name": "Tests for problem D",
        "description": "We had a really tough time generating tests for problem D. In order to prepare\nstrong tests, we had to solve the following problem. Given an undirected\nlabeled tree consisting of \n    n\n vertices, find a set of segments such that:\nboth endpoints of each segment are integers from \n    1\n to \n    2n\n, and each\ninteger from \n    1\n to \n    2n\n should appear as an endpoint of exactly one\nsegment; all segments are non-degenerate; for each pair \n    (i, j)\n such that\n\n    i \n     j\n, \n    i \n    \u2208 [1, n]\n and \n    j \n    \u2208 [1, n]\n, the vertices\n\n    i\n and \n    j\n are connected with an edge if and only if the segments\n\n    i\n and \n    j\n intersect, but neither segment \n    i\n is fully contained\nin segment \n    j\n, nor segment \n    j\n is fully contained in segment \n    i\n.\nCan you solve this problem too? Input The first line contains one integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 5 \n    \u00b7 10^5\n) \u2014 the number of vertices in the\ntree. Then \n    n - 1\n lines follow, each containing two integers \n    x_i\n\nand \n    y_i\n (\n    1 \n    \u2264 x_i, y_i \n    \u2264 n\n, \n    x_i \n     y_i\n) denoting\nthe endpoints of the \n    i\n-th edge. It is guaranteed that the given graph is\na tree. Output Print \n    n\n pairs of integers, the \n    i\n-th pair should\ncontain two integers \n    l_i\n and \n    r_i\n (\n    1 \n    \u2264 l_i < r_i \n    \u2264\n    2n\n) \u2014 the endpoints of the \n    i\n-th segment. All \n    2n\n integers you\nprint should be unique. It is guaranteed that the answer always exists.\nExamples Input 6 1 2 1 3 3 4 3 5 2 6 Output 9 12 7 10 3 11 1 5 2 4 6 8 Input 1\nOutput 1 2\n\n",
        "cf_contest_id": 1278,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "divide and conquer",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n1 2\r\n1 3\r\n3 4\r\n3 5\r\n2 6\r\n",
                "1 4\r\n3 6\r\n2 10\r\n9 11\r\n8 12\r\n5 7\r\n"
            ],
            [
                "1\r\n",
                "1 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n2 1\r\n",
                "1 3\r\n2 4\r\n"
            ],
            [
                "20\r\n1 16\r\n12 1\r\n16 6\r\n6 9\r\n16 3\r\n18 3\r\n3 7\r\n18 5\r\n3 17\r\n4 1\r\n15 7\r\n10 3\r\n20 1\r\n13 7\r\n19 15\r\n8 3\r\n5 11\r\n11 14\r\n4 2\r\n",
                "1 6\r\n37 39\r\n7 18\r\n3 38\r\n19 22\r\n8 11\r\n16 28\r\n13 35\r\n10 12\r\n14 34\r\n21 24\r\n4 36\r\n26 32\r\n23 25\r\n27 30\r\n5 9\r\n15 33\r\n17 20\r\n29 31\r\n2 40\r\n"
            ],
            [
                "20\r\n9 18\r\n9 20\r\n20 13\r\n17 18\r\n9 1\r\n4 18\r\n1 10\r\n20 19\r\n20 5\r\n3 13\r\n20 12\r\n15 20\r\n9 7\r\n4 6\r\n9 14\r\n3 16\r\n11 3\r\n8 18\r\n1 2\r\n",
                "1 5\r\n2 40\r\n26 30\r\n12 17\r\n22 34\r\n16 18\r\n7 37\r\n11 19\r\n4 10\r\n3 39\r\n28 32\r\n21 35\r\n24 27\r\n6 38\r\n20 36\r\n29 31\r\n13 15\r\n9 14\r\n23 33\r\n8 25\r\n"
            ],
            [
                "20\r\n5 10\r\n18 10\r\n4 18\r\n7 4\r\n4 12\r\n4 6\r\n8 7\r\n19 10\r\n8 16\r\n4 11\r\n16 9\r\n15 9\r\n17 12\r\n13 15\r\n11 14\r\n2 16\r\n17 1\r\n20 11\r\n20 3\r\n",
                "1 3\r\n24 32\r\n38 40\r\n6 12\r\n16 18\r\n9 33\r\n10 21\r\n20 23\r\n25 28\r\n13 17\r\n8 36\r\n4 7\r\n29 31\r\n35 37\r\n27 30\r\n22 26\r\n2 5\r\n11 14\r\n15 19\r\n34 39\r\n"
            ]
        ]
    }
]