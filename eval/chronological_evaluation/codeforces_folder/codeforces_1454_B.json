[
    {
        "name": "Unique Bid Auction",
        "description": "There is a game called \"Unique Bid Auction\". You can read more about it here:\nhttps://en.wikipedia.org/wiki/Unique_bid_auction (though you don't have to do\nit to solve this problem). Let's simplify this game a bit. Formally, there are\n\n    n\n participants, the \n    i\n-th participant chose the number \n    a_i\n.\nThe winner of the game is such a participant that the number he chose is\nunique (i. e. nobody else chose this number except him) and is minimal (i. e.\namong all unique values of \n    a\n the minimum one is the winning one). Your\ntask is to find the index of the participant who won the game (or -1 if there\nis no winner). Indexing is \n    1\n-based, i. e. the participants are numbered\nfrom \n    1\n to \n    n\n. You have to answer \n    t\n independent test cases.\nInput The first line of the input contains one integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 2 \n    \u00b7 10^4\n) \u2014 the number of test cases. Then \n    t\n test cases\nfollow. The first line of the test case contains one integer \n    n\n (\n    1\n    \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of participants. The second line\nof the test case contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1\n    \n    \u2264 a_i \n    \u2264 n\n), where \n    a_i\n is the \n    i\n-th participant chosen\nnumber. It is guaranteed that the sum of \n    n\n does not exceed \n    2 \n    \u00b7\n    10^5\n (\n    \u2211 n \n    \u2264 2 \n    \u00b7 10^5\n). Output For each test case,\nprint the answer \u2014 the index of the participant who won the game (or -1 if\nthere is no winner). Note that the answer is always unique. Example Input 6 2\n1 1 3 2 1 3 4 2 2 2 3 1 1 5 2 3 2 4 2 6 1 1 5 5 4 4 Output -1 2 4 1 2 -1\n\n",
        "cf_contest_id": 1454,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n2\r\n1 1\r\n3\r\n2 1 3\r\n4\r\n2 2 2 3\r\n1\r\n1\r\n5\r\n2 3 2 4 2\r\n6\r\n1 1 5 5 4 4\r\n",
                "-1\r\n2\r\n4\r\n1\r\n2\r\n-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n6\r\n1 1 1 3 3 3\r\n4\r\n1 1 1 3\r\n",
                "-1\r\n4\r\n"
            ],
            [
                "4\r\n19\r\n16 3 11 9 3 13 11 9 14 10 10 19 19 15 11 8 8 7 3\r\n10\r\n8 6 1 4 1 4 2 9 7 10\r\n7\r\n7 1 1 4 4 1 2\r\n1\r\n1\r\n",
                "18\r\n7\r\n7\r\n1\r\n"
            ],
            [
                "8\r\n12\r\n10 1 3 2 11 5 12 11 12 12 9 4\r\n11\r\n10 9 7 6 6 3 8 10 1 7 9\r\n12\r\n3 11 8 9 5 9 6 5 11 12 8 7\r\n15\r\n6 6 13 12 7 6 6 7 14 7 14 13 11 3 11\r\n40\r\n31 32 2 37 19 39 21 19 24 14 17 11 33 7 17 30 33 27 16 26 37 29 19 32 20 32 24 20 20 24 32 2 7 33 30 25 23 11 35 39\r\n16\r\n11 9 16 2 10 5 10 4 13 11 8 1 13 7 4 12\r\n46\r\n7 3 24 2 18 14 41 10 43 43 12 7 11 15 4 6 22 39 11 26 14 22 4 20 39 6 22 19 37 7 6 38 10 23 39 27 37 33 30 27 24 41 33 34 3 30\r\n3\r\n1 1 2\r\n",
                "2\r\n9\r\n1\r\n14\r\n10\r\n12\r\n4\r\n3\r\n"
            ],
            [
                "2\r\n2\r\n1 1\r\n1\r\n1\r\n",
                "-1\r\n1\r\n"
            ]
        ]
    }
]