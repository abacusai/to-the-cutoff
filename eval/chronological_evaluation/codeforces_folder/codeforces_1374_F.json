[
    {
        "name": "Cyclic Shifts Sorting",
        "description": "You are given an array \n    a\n consisting of \n    n\n integers. In one move,\nyou can choose some index \n    i\n (\n    1 \n    \u2264 i \n    \u2264 n - 2\n) and shift the\nsegment \n    [a_i, a_i + 1, a_i + 2]\n cyclically to the right (i.e.\nreplace the segment \n    [a_i, a_i + 1, a_i + 2]\n with \n    [a_i + 2, a_i,\n    a_i + 1]\n). Your task is to sort the initial array by no more than\n\n    n^2\n such operations or say that it is impossible to do that. You have to\nanswer \n    t\n independent test cases. Input The first line of the input\ncontains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test\ncases. Then \n    t\n test cases follow. The first line of the test case\ncontains one integer \n    n\n (\n    3 \n    \u2264 n \n    \u2264 500\n) \u2014 the length of\n\n    a\n. The second line of the test case contains \n    n\n integers \n    a_1,\n    a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 500\n), where \n    a_i\n is the\n\n    i\n-th element \n    a\n. It is guaranteed that the sum of \n    n\n does not\nexceed \n    500\n. Output For each test case, print the answer: -1 on the only\nline if it is impossible to sort the given array using operations described in\nthe problem statement, or the number of operations \n    ans\n on the first line\nand \n    ans\n integers \n    idx_1, idx_2, \n    \u2026, idx_ans\n (\n    1 \n    \u2264\n    idx_i \n    \u2264 n - 2\n), where \n    idx_i\n is the index of left border of the\nsegment for the \n    i\n-th operation. You should print indices in order of\nperforming operations. Example Input 5 5 1 2 3 4 5 5 5 4 3 2 1 8 8 4 5 2 3 6 7\n3 7 5 2 1 6 4 7 3 6 1 2 3 3 6 4 Output 0 6 3 1 3 2 2 3 13 2 1 1 6 4 2 4 3 3 4\n4 6 6 -1 4 3 3 4 4\n\n",
        "cf_contest_id": 1374,
        "cf_index": "F",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n5\r\n1 2 3 4 5\r\n5\r\n5 4 3 2 1\r\n8\r\n8 4 5 2 3 6 7 3\r\n7\r\n5 2 1 6 4 7 3\r\n6\r\n1 2 3 3 6 4\r\n",
                "0\r\n\r\n8\r\n1 1 2 3 1 1 2 1\r\n12\r\n1 1 2 3 4 5 6 1 1 4 5 2\r\n-1\r\n2\r\n4 3\r\n"
            ]
        ],
        "private_cases": []
    }
]