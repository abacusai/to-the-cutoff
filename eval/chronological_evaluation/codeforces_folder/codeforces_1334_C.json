[
    {
        "name": "Circle of Monsters",
        "description": "You are playing another computer game, and now you have to slay \n    n\n\nmonsters. These monsters are standing in a circle, numbered clockwise from\n\n    1\n to \n    n\n. Initially, the \n    i\n-th monster has \n    a_i\n health.\nYou may shoot the monsters to kill them. Each shot requires exactly one bullet\nand decreases the health of the targeted monster by \n    1\n (deals \n    1\n\ndamage to it). Furthermore, when the health of some monster \n    i\n becomes\n\n    0\n or less than \n    0\n, it dies and explodes, dealing \n    b_i\n damage\nto the next monster (monster \n    i + 1\n, if \n    i < n\n, or monster \n    1\n,\nif \n    i = n\n). If the next monster is already dead, then nothing happens. If\nthe explosion kills the next monster, it explodes too, damaging the monster\nafter it and possibly triggering another explosion, and so on. You have to\ncalculate the minimum number of bullets you have to fire to kill all \n    n\n\nmonsters in the circle. Input The first line contains one integer \n    T\n\n(\n    1 \n    \u2264 T \n    \u2264 150000\n) \u2014 the number of test cases. Then the test cases\nfollow, each test case begins with a line containing one integer \n    n\n (\n    2\n    \n    \u2264 n \n    \u2264 300000\n) \u2014 the number of monsters. Then \n    n\n lines follow,\neach containing two integers \n    a_i\n and \n    b_i\n (\n    1 \n    \u2264 a_i, b_i\n    \n    \u2264 10^12\n) \u2014 the parameters of the \n    i\n-th monster in the circle. It\nis guaranteed that the total number of monsters in all test cases does not\nexceed \n    300000\n. Output For each test case, print one integer \u2014 the\nminimum number of bullets you have to fire to kill all of the monsters.\nExample Input 1 3 7 15 2 14 5 3 Output 6\n\n",
        "cf_contest_id": 1334,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n3\r\n7 15\r\n2 14\r\n5 3\r\n",
                "6\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n8\r\n7 4\r\n9 10\r\n4 8\r\n3 1\r\n1 7\r\n9 5\r\n1 4\r\n2 5\r\n8\r\n9 8\r\n4 7\r\n7 7\r\n3 6\r\n8 9\r\n2 5\r\n4 9\r\n2 8\r\n7\r\n2 2\r\n2 7\r\n2 10\r\n8 6\r\n7 4\r\n2 6\r\n3 10\r\n4\r\n4 10\r\n7 5\r\n6 10\r\n9 8\r\n7\r\n8 9\r\n8 1\r\n3 4\r\n5 1\r\n3 10\r\n9 3\r\n5 5\r\n5\r\n6 1\r\n7 3\r\n6 5\r\n6 1\r\n1 8\r\n2\r\n7 8\r\n7 10\r\n4\r\n6 8\r\n9 3\r\n8 1\r\n9 7\r\n4\r\n8 7\r\n5 4\r\n10 10\r\n8 8\r\n6\r\n6 5\r\n7 10\r\n7 1\r\n10 4\r\n8 7\r\n2 7\r\n",
                "10\r\n5\r\n3\r\n5\r\n11\r\n11\r\n7\r\n15\r\n10\r\n16\r\n"
            ],
            [
                "1\r\n3\r\n1000000000000 1000000000000\r\n1000000000000 1000000000000\r\n1000000000000 1000000000000\r\n",
                "1000000000000\r\n"
            ]
        ]
    }
]