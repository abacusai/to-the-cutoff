[
    {
        "name": "Asterism (Easy Version)",
        "description": "This is the easy version of the problem. The difference between versions is\nthe constraints on \n    n\n and \n    a_i\n. You can make hacks only if all\nversions of the problem are solved. First, Aoi came up with the following idea\nfor the competitive programming problem: Yuzu is a girl who collecting\ncandies. Originally, she has \n    x\n candies. There are also \n    n\n enemies\nnumbered with integers from \n    1\n to \n    n\n. Enemy \n    i\n has \n    a_i\n\ncandies. Yuzu is going to determine a permutation \n    P\n. A permutation is an\narray consisting of \n    n\n distinct integers from \n    1\n to \n    n\n in\narbitrary order. For example, \n    2,3,1,5,4\n is a permutation, but\n\n    1,2,2\n is not a permutation (\n    2\n appears twice in the\narray) and \n    1,3,4\n is also not a permutation (because \n    n=3\n\nbut there is the number \n    4\n in the array). After that, she will do \n    n\n\nduels with the enemies with the following rules: If Yuzu has equal or more\nnumber of candies than enemy \n    P_i\n, she wins the duel and gets \n    1\n\ncandy. Otherwise, she loses the duel and gets nothing. The candy which Yuzu\ngets will be used in the next duels. Yuzu wants to win all duels. How many\nvalid permutations \n    P\n exist? This problem was easy and wasn't interesting\nfor Akari, who is a friend of Aoi. And Akari made the following problem from\nthe above idea: Let's define \n    f(x)\n as the number of valid permutations\nfor the integer \n    x\n. You are given \n    n\n, \n    a\n and a prime number\n\n    p \n    \u2264 n\n. Let's call a positive integer \n    x\n good, if the value\n\n    f(x)\n is not divisible by \n    p\n. Find all good integers \n    x\n. Your\ntask is to solve this problem made by Akari. Input The first line contains two\nintegers \n    n\n, \n    p\n \n    (2 \n    \u2264 p \n    \u2264 n \n    \u2264 2000)\n. It is\nguaranteed, that the number \n    p\n is prime (it has exactly two divisors\n\n    1\n and \n    p\n). The second line contains \n    n\n integers \n    a_1, a_2,\n    \n    \u2026, a_n\n \n    (1 \n    \u2264 a_i \n    \u2264 2000)\n. Output In the first line,\nprint the number of good integers \n    x\n. In the second line, output all good\nintegers \n    x\n in the ascending order. It is guaranteed that the number of\ngood integers \n    x\n does not exceed \n    10^5\n. Examples Input 3 2 3 4 5\nOutput 1 3 Input 4 3 2 3 5 6 Output 2 3 4 Input 4 3 9 1 1 1 Output 0 Note In\nthe first test, \n    p=2\n. If \n    x \n    \u2264 2\n, there are no valid permutations\nfor Yuzu. So \n    f(x)=0\n for all \n    x \n    \u2264 2\n. The number \n    0\n is\ndivisible by \n    2\n, so all integers \n    x \n    \u2264 2\n are not good. If \n    x =\n    3\n, \n    1,2,3\n is the only valid permutation for Yuzu. So\n\n    f(3)=1\n, so the number \n    3\n is good. If \n    x = 4\n,\n\n    1,2,3\n    \n     , \n    \n    1,3,2\n    \n     , \n    \n    2,1,3\n    \n     , \n    \n    2,3,1\n\nare all valid permutations for Yuzu. So \n    f(4)=4\n, so the number \n    4\n is\nnot good. If \n    x \n    \u2265 5\n, all \n    6\n permutations are valid for Yuzu. So\n\n    f(x)=6\n for all \n    x \n    \u2265 5\n, so all integers \n    x \n    \u2265 5\n are not\ngood. So, the only good number is \n    3\n. In the third test, for all positive\nintegers \n    x\n the value \n    f(x)\n is divisible by \n    p = 3\n.\n\n",
        "cf_contest_id": 1371,
        "cf_index": "E1",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "combinatorics",
            "math",
            "number theory",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2\r\n3 4 5\r\n",
                "1\r\n3\r\n"
            ],
            [
                "4 3\r\n2 3 5 6\r\n",
                "2\r\n3 4\r\n"
            ],
            [
                "4 3\r\n9 1 1 1\r\n",
                "0\r\n\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 2\r\n654 1162\r\n",
                "1\r\n1161\r\n"
            ],
            [
                "5 5\r\n1182 1182 1182 1183 1182\r\n",
                "1\r\n1182\r\n"
            ],
            [
                "5 2\r\n1834 1833 1836 1836 1836\r\n",
                "0\r\n\r\n"
            ],
            [
                "5 2\r\n679 678 679 678 677\r\n",
                "0\r\n\r\n"
            ],
            [
                "5 3\r\n818 819 820 819 820\r\n",
                "0\r\n\r\n"
            ],
            [
                "3 2\r\n795 611 751\r\n",
                "0\r\n\r\n"
            ],
            [
                "4 2\r\n1639 1165 228 810\r\n",
                "0\r\n\r\n"
            ],
            [
                "5 5\r\n1187 1719 1898 575 1692\r\n",
                "4\r\n1894 1895 1896 1897\r\n"
            ],
            [
                "123 79\r\n49 100 128 149 148 22 89 81 46 142 119 70 22 134 134 80 69 145 144 33 28 127 70 27 91 94 98 29 153 53 102 138 113 123 135 143 87 77 84 27 106 8 156 27 97 150 53 31 126 135 40 79 150 79 69 7 3 49 84 14 24 39 13 103 54 98 122 95 71 157 79 114 136 101 38 25 150 103 150 79 109 121 74 76 3 46 133 31 38 73 37 81 139 94 39 150 131 31 144 75 23 113 65 22 9 24 106 26 120 81 83 58 50 37 145 139 45 95 133 16 7 27 97\r\n",
                "64\r\n36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\r\n"
            ],
            [
                "2 2\r\n1084 1084\r\n",
                "0\r\n\r\n"
            ],
            [
                "2 2\r\n633 631\r\n",
                "1\r\n632\r\n"
            ],
            [
                "3 2\r\n1711 1711 1710\r\n",
                "0\r\n\r\n"
            ],
            [
                "3 2\r\n1850 1851 1849\r\n",
                "1\r\n1849\r\n"
            ],
            [
                "3 2\r\n695 695 694\r\n",
                "0\r\n\r\n"
            ],
            [
                "4 3\r\n929 928 929 929\r\n",
                "0\r\n\r\n"
            ],
            [
                "4 2\r\n1070 1070 1069 1069\r\n",
                "0\r\n\r\n"
            ],
            [
                "4 2\r\n1912 1912 1911 1913\r\n",
                "0\r\n\r\n"
            ],
            [
                "4 2\r\n756 757 758 754\r\n",
                "1\r\n755\r\n"
            ],
            [
                "6 3\r\n1557 1558 1557 1557 1557 1557\r\n",
                "0\r\n\r\n"
            ],
            [
                "6 3\r\n1104 1106 1104 1104 1105 1104\r\n",
                "0\r\n\r\n"
            ],
            [
                "6 5\r\n1244 1243 1246 1243 1246 1243\r\n",
                "2\r\n1243 1244\r\n"
            ],
            [
                "6 3\r\n1897 1898 1899 1895 1896 1896\r\n",
                "1\r\n1895\r\n"
            ],
            [
                "6 2\r\n739 742 738 741 743 738\r\n",
                "0\r\n\r\n"
            ],
            [
                "6 5\r\n880 883 884 882 878 881\r\n",
                "4\r\n879 880 881 882\r\n"
            ],
            [
                "10 7\r\n1 1 1 5 6 6 7 8 8 9\r\n",
                "4\r\n2 3 4 5\r\n"
            ]
        ]
    }
]