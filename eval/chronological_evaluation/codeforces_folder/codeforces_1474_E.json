[
    {
        "name": "What Is It?",
        "description": "Lunar rover finally reached planet X. After landing, he met an obstacle, that\ncontains permutation \n    p\n of length \n    n\n. Scientists found out, that to\novercome an obstacle, the robot should make \n    p\n an identity permutation\n(make \n    p_i = i\n for all \n    i\n). Unfortunately, scientists can't control\nthe robot. Thus the only way to make \n    p\n an identity permutation is\napplying the following operation to \n    p\n multiple times: Select two indices\n\n    i\n and \n    j\n (\n    i \n    \u2260 j\n), such that \n    p_j = i\n and swap the\nvalues of \n    p_i\n and \n    p_j\n. It takes robot \n    (j - i)^2\n seconds to\ndo this operation. Positions \n    i\n and \n    j\n are selected by the robot\n(scientists can't control it). He will apply this operation while \n    p\n\nisn't an identity permutation. We can show that the robot will make no more\nthan \n    n\n operations regardless of the choice of \n    i\n and \n    j\n on\neach operation.Scientists asked you to find out the maximum possible time it\nwill take the robot to finish making \n    p\n an identity permutation (i. e.\nworst-case scenario), so they can decide whether they should construct a new\nlunar rover or just rest and wait. They won't believe you without proof, so\nyou should build an example of \n    p\n and robot's operations that maximizes\nthe answer. For a better understanding of the statement, read the sample\ndescription. Input The first line of input contains a single integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. Each of next\n\n    t\n lines contains the single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264\n    10^5\n) \u2013 the length of \n    p\n. Note, that \n    p\n is not given to you. You\nshould find the maximum possible time over all permutations of length \n    n\n.\nIt is guaranteed, that the total sum of \n    n\n over all test cases doesn't\nexceed \n    10^5\n. Output For each test case in the first line, print how many\nseconds will the robot spend in the worst case. In the next line, print the\ninitial value of \n    p\n that you used to construct an answer. In the next\nline, print the number of operations \n    m \n    \u2264 n\n that the robot makes in\nyour example. In the each of next \n    m\n lines print two integers \n    i\n and\n\n    j\n \u2014 indices of positions that the robot will swap on this operation.\nNote that \n    p_j = i\n must holds (at the time of operation). Example Input 3\n2 3 3 Output 1 2 1 1 2 1 5 2 3 1 2 1 3 3 2 5 2 3 1 2 1 3 2 3 Note For \n    n =\n    2\n, \n    p\n can be either \n    [1, 2]\n or \n    [2, 1]\n. In the first case\n\n    p\n is already identity, otherwise robot will make it an identity\npermutation in \n    1\n second regardless of choise \n    i\n and \n    j\n on the\nfirst operation. For \n    n = 3\n, \n    p\n can be equals \n    [2, 3, 1]\n. If\nrobot will select \n    i = 3, j = 2\n on the first operation, \n    p\n will\nbecome \n    [2, 1, 3]\n in one second. Now robot can select only \n    i = 1, j =\n    2\n or \n    i = 2, j = 1\n. In both cases, \n    p\n will become identity in one\nmore second (\n    2\n seconds in total). If robot will select \n    i = 1, j =\n    3\n on the first operation, \n    p\n will become \n    [1, 3, 2]\n in four\nseconds. Regardless of choise of \n    i\n and \n    j\n on the second operation,\n\n    p\n will become identity in five seconds. We can show, that for\npermutation of length \n    3\n robot will always finish all operation in no\nmore than \n    5\n seconds.\n\n",
        "cf_contest_id": 1474,
        "cf_index": "E",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2\r\n3\r\n3\r\n",
                "1\r\n2 1 \r\n1\r\n1 2\r\n5\r\n2 3 1 \r\n2\r\n2 1\r\n1 3\r\n5\r\n2 3 1 \r\n2\r\n2 1\r\n1 3\r\n"
            ]
        ],
        "private_cases": []
    }
]