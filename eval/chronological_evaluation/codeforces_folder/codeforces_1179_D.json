[
    {
        "name": "Fedor Runs for President",
        "description": "Fedor runs for president of Byteland! In the debates, he will be asked how to\nsolve Byteland's transport problem. It's a really hard problem because of\nByteland's transport system is now a tree (connected graph without cycles).\nFedor's team has found out in the ministry of transport of Byteland that there\nis money in the budget only for one additional road. In the debates, he is\ngoing to say that he will build this road as a way to maximize the number of\ndistinct simple paths in the country. A simple path is a path which goes\nthrough every vertex no more than once. Two simple paths are named distinct if\nsets of their edges are distinct. But Byteland's science is deteriorated, so\nFedor's team hasn't succeeded to find any scientists to answer how many\ndistinct simple paths they can achieve after adding exactly one edge on the\ntransport system? Help Fedor to solve it. An edge can be added between\nvertices that are already connected, but it can't be a loop. In this problem,\nwe consider only simple paths of length at least two. Input The first line\ncontains one integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 500\n     000\n) \u2014 number of\nvertices in Byteland's transport system. Each of the following \n    n - 1\n\nlines contains two integers \n    v_i\n and \n    u_i\n (\n    1 \n    \u2264 v_i, u_i\n    \n    \u2264 n\n). It's guaranteed that the graph is tree. Output Print exactly one\ninteger \u2014 a maximal number of simple paths that can be achieved after adding\none edge. Examples Input 2 1 2 Output 2 Input 4 1 2 1 3 1 4 Output 11 Input 6\n1 2 1 3 3 4 3 5 4 6 Output 29\n\n",
        "cf_contest_id": 1179,
        "cf_index": "D",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n1 2\r\n",
                "2"
            ],
            [
                "4\r\n1 2\r\n1 3\r\n1 4\r\n",
                "11"
            ],
            [
                "6\r\n1 2\r\n1 3\r\n3 4\r\n3 5\r\n4 6\r\n",
                "29"
            ]
        ],
        "private_cases": [
            [
                "10\r\n1 2\r\n1 3\r\n1 4\r\n4 5\r\n6 5\r\n7 1\r\n8 5\r\n9 5\r\n10 1\r\n",
                "81"
            ],
            [
                "10\r\n1 2\r\n2 3\r\n3 4\r\n3 5\r\n6 5\r\n7 4\r\n8 5\r\n9 1\r\n10 1\r\n",
                "85"
            ],
            [
                "10\r\n1 2\r\n1 3\r\n3 4\r\n2 5\r\n6 4\r\n7 4\r\n8 3\r\n9 5\r\n10 5\r\n",
                "87"
            ]
        ]
    }
]