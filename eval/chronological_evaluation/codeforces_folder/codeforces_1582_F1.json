[
    {
        "name": "Korney Korneevich and XOR (easy version)",
        "description": "This is an easier version of the problem with smaller constraints. Korney\nKorneevich dag up an array \n    a\n of length \n    n\n. Korney Korneevich has\nrecently read about the operation bitwise XOR, so he wished to experiment with\nit. For this purpose, he decided to find all integers \n    x \n    \u2265 0\n such\nthat there exists an increasing subsequence of the array \n    a\n, in which the\nbitwise XOR of numbers is equal to \n    x\n. It didn't take a long time for\nKorney Korneevich to find all such \n    x\n, and he wants to check his result.\nThat's why he asked you to solve this problem! A sequence \n    s\n is a\nsubsequence of a sequence \n    b\n if \n    s\n can be obtained from \n    b\n by\ndeletion of several (possibly, zero or all) elements. A sequence \n    s_1, s_2,\n    \n    \u2026 , s_m\n is called increasing if \n    s_1 < s_2 < \n    \u2026 < s_m\n.\nInput The first line contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    10^5\n). The second line contains \n    n\n integers \n    a_1, a_2, \n    \u2026,\n    a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 500\n) \u2014 the elements of the array \n    a\n.\nOutput In the first line print a single integer \n    k\n \u2014 the number of found\n\n    x\n values. In the second line print \n    k\n integers in increasing order\n\n    x_1, x_2, \n    \u2026 x_k\n (\n    0 \n    \u2264 x_1 < \n    \u2026 < x_k\n) \u2014 found\n\n    x\n values. Examples Input 4 4 2 2 4 Output 4 0 2 4 6 Input 8 1 0 1 7 12 5\n3 2 Output 12 0 1 2 3 4 5 6 7 10 11 12 13 Note In the first test case: To get\nvalue \n    x = 0\n it is possible to choose and empty subsequence To get value\n\n    x = 2\n it is possible to choose a subsequence \n    [2]\n To get value \n    x\n    = 4\n it is possible to choose a subsequence \n    [4]\n To get value \n    x =\n    6\n it is possible to choose a subsequence \n    [2, 4]\n\n\n",
        "cf_contest_id": 1582,
        "cf_index": "F1",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "dp",
            "greedy"
        ],
        "time_limit_seconds": 1.5,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4\r\n4 2 2 4\r\n",
                "4\r\n0 2 4 6\r\n"
            ],
            [
                "8\r\n1 0 1 7 12 5 3 2\r\n",
                "12\r\n0 1 2 3 4 5 6 7 10 11 12 13\r\n"
            ]
        ],
        "private_cases": [
            [
                "20\r\n28 42 36 59 26 37 42 57 1 33 15 4 14 47 1 49 1 5 53 54\r\n",
                "64\r\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63\r\n"
            ],
            [
                "100\r\n207 103 13 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n",
                "5\r\n0 1 13 103 207\r\n"
            ],
            [
                "100\r\n50 13 42 41 8 21 50 18 21 50 9 27 51 10 43 26 29 6 52 44 52 19 39 47 59 35 42 6 27 41 8 25 32 32 45 18 57 5 46 32 60 24 63 56 31 32 58 15 0 36 31 33 31 50 14 45 31 27 15 55 8 53 10 5 8 24 15 35 45 34 16 31 44 51 34 13 30 49 0 4 62 6 8 30 44 29 59 60 45 40 1 0 40 29 35 18 42 52 15 28\r\n",
                "64\r\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63\r\n"
            ],
            [
                "100\r\n111 100 64 49 104 95 18 10 118 34 2 55 54 118 79 115 39 40 91 61 46 9 44 88 18 110 108 76 0 49 106 99 8 46 23 45 30 71 10 124 26 97 125 104 56 101 77 77 25 64 125 72 64 99 52 62 22 67 58 85 103 90 127 121 99 36 21 88 30 35 49 103 16 92 46 90 21 88 9 47 109 36 102 36 61 81 9 61 13 116 94 64 73 39 115 56 64 6 120 117\r\n",
                "128\r\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127\r\n"
            ],
            [
                "1\r\n0\r\n",
                "1\r\n0\r\n"
            ],
            [
                "1\r\n500\r\n",
                "2\r\n0 500\r\n"
            ],
            [
                "5\r\n2 1 2 4 2\r\n",
                "8\r\n0 1 2 3 4 5 6 7\r\n"
            ],
            [
                "5\r\n4 2 4 8 4\r\n",
                "8\r\n0 2 4 6 8 10 12 14\r\n"
            ]
        ]
    }
]