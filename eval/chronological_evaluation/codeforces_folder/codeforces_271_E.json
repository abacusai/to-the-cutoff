[
    {
        "name": "Three Horses",
        "description": "There are three horses living in a horse land: one gray, one white and one\ngray-and-white. The horses are really amusing animals, which is why they adore\nspecial cards. Each of those cards must contain two integers, the first one on\ntop, the second one in the bottom of the card. Let's denote a card with a on\nthe top and b in the bottom as (a, b). Each of the three horses can paint the\nspecial cards. If you show an (a, b) card to the gray horse, then the horse\ncan paint a new (a + 1, b + 1) card. If you show an (a, b) card, such that a\nand b are even integers, to the white horse, then the horse can paint a new\ncard. If you show two cards (a, b) and (b, c) to the gray-and-white horse,\nthen he can paint a new (a, c) card. Polycarpus really wants to get n special\ncards (1, a1), (1, a2), ..., (1, an). For that he is going to the horse land.\nHe can take exactly one (x, y) card to the horse land, such that 1 \u2264 x < y \u2264\nm. How many ways are there to choose the card so that he can perform some\nactions in the horse land and get the required cards? Polycarpus can get cards\nfrom the horses only as a result of the actions that are described above.\nPolycarpus is allowed to get additional cards besides the cards that he\nrequires. Input The first line contains two integers n, m (1 \u2264 n \u2264 10^5, 2 \u2264 m\n\u2264 10^9). The second line contains the sequence of integers a1, a2, ..., an (2\n\u2264 ai \u2264 10^9). Note, that the numbers in the sequence can coincide. The numbers\nin the lines are separated by single spaces. Output Print a single integer \u2014\nthe answer to the problem. Please, do not use the \nwrite 64-bit integers in C++. It is preferred to use the cin, cout streams or\nthe \nInput 2 10 13 7 Output 36\n\n",
        "cf_contest_id": 271,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1 6\r\n2\r\n",
                "11\r\n"
            ],
            [
                "1 6\r\n7\r\n",
                "14\r\n"
            ],
            [
                "2 10\r\n13 7\r\n",
                "36\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 10\r\n9 3 6 6 3 3 6 3 6 9\r\n",
                "25\r\n"
            ],
            [
                "10 10\r\n4 8 4 10 2 10 8 10 4 6\r\n",
                "25\r\n"
            ],
            [
                "2 1000000000\r\n2 1000000000\r\n",
                "28926258177\r\n"
            ],
            [
                "5 1000000000\r\n812747000 266266300 444091950 694572960 414735290\r\n",
                "28926258177\r\n"
            ],
            [
                "5 22\r\n14 7 14 21 14\r\n",
                "79\r\n"
            ],
            [
                "6 23\r\n16 16 16 8 8 8\r\n",
                "84\r\n"
            ],
            [
                "2 20\r\n9 9\r\n",
                "69\r\n"
            ],
            [
                "1 24\r\n10\r\n",
                "161\r\n"
            ],
            [
                "5 20\r\n11 11 11 11 11\r\n",
                "94\r\n"
            ],
            [
                "5 21\r\n12 12 12 12 12\r\n",
                "84\r\n"
            ],
            [
                "1 1000000000\r\n1000000000\r\n",
                "281663002102\r\n"
            ],
            [
                "1 922296375\r\n922296375\r\n",
                "27056297616\r\n"
            ],
            [
                "1 1000000000\r\n12\r\n",
                "54449863180\r\n"
            ]
        ]
    }
]