[
    {
        "name": "Mahmoud and Ehab and the bipartiteness",
        "description": "Mahmoud and Ehab continue their adventures! As everybody in the evil land\nknows, Dr. Evil likes bipartite graphs, especially trees. A tree is a\nconnected acyclic graph. A bipartite graph is a graph, whose vertices can be\npartitioned into 2 sets in such a way, that for each edge (u, v) that belongs\nto the graph, u and v belong to different sets. You can find more formal\ndefinitions of a tree and a bipartite graph in the notes section below. Dr.\nEvil gave Mahmoud and Ehab a tree consisting of n nodes and asked them to add\nedges to it in such a way, that the graph is still bipartite. Besides, after\nadding these edges the graph should be simple (doesn't contain loops or\nmultiple edges). What is the maximum number of edges they can add? A loop is\nan edge, which connects a node with itself. Graph doesn't contain multiple\nedges when for each pair of nodes there is no more than one edge between them.\nA cycle and a loop aren't the same . Input The first line of input contains an\ninteger n \u2014 the number of nodes in the tree (1 \u2264 n \u2264 10^5). The next n - 1\nlines contain integers u and v (1 \u2264 u, v \u2264 n, u \u2260 v) \u2014 the description of the\nedges of the tree. It's guaranteed that the given graph is a tree. Output\nOutput one integer \u2014 the maximum number of edges that Mahmoud and Ehab can add\nto the tree while fulfilling the conditions. Examples Input 3 1 2 1 3 Output 0\nInput 5 1 2 2 3 3 4 4 5 Output 2 Note Tree definition:\nhttps://en.wikipedia.org/wiki/Tree_(graph_theory) Bipartite graph definition:\nhttps://en.wikipedia.org/wiki/Bipartite_graph In the first test case the only\nedge that can be added in such a way, that graph won't contain loops or\nmultiple edges is (2, 3), but adding this edge will make the graph non-\nbipartite so the answer is 0. In the second test case Mahmoud and Ehab can add\nedges (1, 4) and (2, 5).\n\n",
        "cf_contest_id": 862,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 2\r\n1 3\r\n",
                "0"
            ],
            [
                "5\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n",
                "2"
            ]
        ],
        "private_cases": [
            [
                "10\r\n3 8\r\n6 2\r\n9 7\r\n10 1\r\n3 5\r\n1 3\r\n6 7\r\n5 4\r\n3 6\r\n",
                "16"
            ],
            [
                "10\r\n7 6\r\n2 7\r\n4 1\r\n8 5\r\n9 4\r\n5 3\r\n8 7\r\n10 8\r\n10 4\r\n",
                "16"
            ],
            [
                "10\r\n2 6\r\n3 7\r\n8 4\r\n4 10\r\n6 9\r\n9 7\r\n3 10\r\n1 2\r\n5 8\r\n",
                "16"
            ],
            [
                "10\r\n6 9\r\n9 7\r\n9 4\r\n10 9\r\n9 1\r\n9 8\r\n9 2\r\n9 5\r\n3 9\r\n",
                "0"
            ],
            [
                "2\r\n1 2\r\n",
                "0"
            ]
        ]
    }
]