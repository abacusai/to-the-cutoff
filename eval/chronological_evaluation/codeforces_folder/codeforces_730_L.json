[
    {
        "name": "Expression Queries",
        "description": "A simplified arithmetic expression (SAE) is an arithmetic expression defined\nby the following grammar:  ::=  | + | * | ()  ::=  |  ::= 0 | 1 | 2 | 3 | 4 |\n5 | 6 | 7 | 8 | 9 In other words it's a correct arithmetic expression that is\nallowed to contain brackets, numbers (possibly with leading zeros),\nmultiplications and additions. For example expressions \"(0+01)\", \"0\" and\n\"1*(0)\" are simplified arithmetic expressions, but expressions \"2-1\", \"+1\" and\n\"1+2)\" are not. Given a string s1s2...s|s| that represents a SAE; si denotes\nthe i-th character of the string which can be either a digit ('0'-'9'), a plus\nsign ('+'), a multiplication sign ('*'), an opening round bracket '(' or a\nclosing round bracket ')'. A part slsl + 1...sr of this string is called a\nsub-expression if and only if it is a SAE. You task is to answer m queries,\neach of which is a pair of integers li, ri (1 \u2264 li \u2264 ri \u2264 |s|). For each query\ndetermine whether the corresponding part of the given string is a sub-\nexpression and in case it's a sub-expression calculate its value modulo\n1000000007 (10^9 + 7). The values should be calculated using standard operator\npriorities. Input The first line of the input contains non-empty string s (1 \u2264\n|s| \u2264 4\u00b710^5) which represents a correct SAE. Each character of the string can\nbe one of the following characters: '*', '+', '(', ')' or a digit ('0'-'9').\nThe expression might contain extra-huge numbers. The second line contains an\ninteger m (1 \u2264 m \u2264 4\u00b710^5) which is the number of queries. Each of the next m\nlines contains two space-separated integers li, ri (1 \u2264 li \u2264 ri \u2264 |s|) \u2014 the\ni-th query. Output The i-th number of output should be the answer for the i-th\nquery. If the i-th query corresponds to a valid sub-expression output the\nvalue of the sub-expression modulo 1000000007 (10^9 + 7). Otherwise output -1\nas an answer for the query. Print numbers on separate lines. Examples Input\n((1+2)*3+101*2) 6 8 14 1 6 2 10 11 14 5 5 4 5 Output 205 -1 10 2 2 -1 Input\n(01) 1 1 4 Output 1\n\n",
        "cf_contest_id": 730,
        "cf_index": "L",
        "cf_rating": 3200,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "((1+2)*3+101*2)\r\n6\r\n8 14\r\n1 6\r\n2 10\r\n11 14\r\n5 5\r\n4 5\r\n",
                "205\r\n-1\r\n10\r\n2\r\n2\r\n-1\r\n"
            ],
            [
                "(01)\r\n1\r\n1 4\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n1 1\r\n",
                "1\r\n"
            ],
            [
                "(1)\r\n4\r\n2 2\r\n1 2\r\n2 3\r\n1 3\r\n",
                "1\r\n-1\r\n-1\r\n1\r\n"
            ],
            [
                "104+12\r\n1\r\n2 5\r\n",
                "5\r\n"
            ],
            [
                "(435+234234*234234*(2134+2323))\r\n8\r\n2 30\r\n1 31\r\n5 8\r\n3 14\r\n13 17\r\n10 30\r\n3 4\r\n3 7\r\n",
                "829320182\r\n829320182\r\n-1\r\n5387417\r\n23423\r\n495351647\r\n35\r\n58\r\n"
            ],
            [
                "(1)\r\n6\r\n1 1\r\n1 2\r\n1 3\r\n2 2\r\n2 3\r\n3 3\r\n",
                "-1\r\n-1\r\n1\r\n1\r\n-1\r\n-1\r\n"
            ]
        ]
    }
]