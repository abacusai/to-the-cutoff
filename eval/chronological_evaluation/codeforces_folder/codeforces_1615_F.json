[
    {
        "name": "LEGOndary Grandmaster",
        "description": "After getting bored by playing with crayons, you decided to switch to Legos!\nToday, you're working with a long strip, with height \n    1\n and length\n\n    n\n, some positions of which are occupied by \n    1\n by \n    1\n Lego\npieces. In one second, you can either remove two adjacent Lego pieces from the\nstrip (if both are present), or add two Lego pieces to adjacent positions (if\nboth are absent). You can only add or remove Lego's at two adjacent positions\nat the same time, as otherwise your chubby fingers run into precision issues.\nYou want to know exactly how much time you'll spend playing with Legos. You\nvalue efficiency, so given some starting state and some ending state, you'll\nalways spend the least number of seconds to transform the starting state into\nthe ending state. If it's impossible to transform the starting state into the\nending state, you just skip it (so you spend \n    0\n seconds). The issue is\nthat, for some positions, you don't remember whether there were Legos there or\nnot (in either the starting state, the ending state, or both). Over all pairs\nof (starting state, ending state) that are consistent with your memory, find\nthe total amount of time it will take to transform the starting state to the\nending state. Print this value modulo \n    1\n     000\n     000\n     007\n (\n    10^9 +\n    7\n). Input The first line contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    1000\n) \u2014 the number of test cases. Then \n    t\n cases follow. The first line\nof each test case contains one integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2000\n)\n\u2014 the size of the Lego strip. The second line of each test case contains a\nstring \n    s\n of length \n    n\n, consisting of the characters 0, 1, and ? \u2014\nyour memory of the starting state: 1 represents a position that definitely has\na Lego piece, 0 represents a position that definitely does not have a Lego\npiece, and ? represents a position that you don't remember. The third line of\neach test case contains a string \n    t\n of length \n    n\n, consisting of the\ncharacters 0, 1, and ? \u2014 your memory of the ending state. It follows a similar\nformat to the starting state. It's guaranteed that the sum of \n    n\n over all\ntest cases doesn't exceed \n    2000\n. Output For each test case, output a\nsingle integer \u2014 the answer to the problem modulo \n    1\n     000\n     000\n     007\n\n(\n    10^9 + 7\n). Example Input 6 2 00 11 3 ??? ??? 3 ??1 0?0 4 ??0? ??11 5\n????? 0??1? 10 ?01??01?1? ??100?1??? Output 1 16 1 14 101 1674 Note For the\nfirst test case, \n    00\n is the only possible starting state, and \n    11\n is\nthe only possible ending state. It takes exactly one operation to change\n\n    00\n to \n    11\n. For the second test case, some of the possible starting\nand ending state pairs are: \n    (000, 011)\n \u2014 takes \n    1\n operation.\n\n    (001, 100)\n \u2014 takes \n    2\n operations. \n    (010, 000)\n \u2014 takes \n    0\n\noperations, as it's impossible to achieve the ending state.\n\n",
        "cf_contest_id": 1615,
        "cf_index": "F",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "dp",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "6\r\n2\r\n00\r\n11\r\n3\r\n???\r\n???\r\n3\r\n??1\r\n0?0\r\n4\r\n??0?\r\n??11\r\n5\r\n?????\r\n0??1?\r\n10\r\n?01??01?1?\r\n??100?1???\r\n",
                "1\r\n16\r\n1\r\n14\r\n101\r\n1674\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n2\r\n01\r\n0?\r\n4\r\n??00\r\n?01?\r\n2\r\n01\r\n?1\r\n2\r\n??\r\n00\r\n",
                "0\r\n6\r\n0\r\n1\r\n"
            ]
        ]
    }
]