[
    {
        "name": "Vessels",
        "description": "There is a system of n vessels arranged one above the other as shown in the\nfigure below. Assume that the vessels are numbered from 1 to n, in the order\nfrom the highest to the lowest, the volume of the i-th vessel is ai liters.\nInitially, all the vessels are empty. In some vessels water is poured. All the\nwater that overflows from the i-th vessel goes to the (i + 1)-th one. The\nliquid that overflows from the n-th vessel spills on the floor. Your task is\nto simulate pouring water into the vessels. To do this, you will need to\nhandle two types of queries: Add xi liters of water to the pi-th vessel; Print\nthe number of liters of water in the ki-th vessel. When you reply to the\nsecond request you can assume that all the water poured up to this point, has\nalready overflown between the vessels. Input The first line contains integer n\n\u2014 the number of vessels (1 \u2264 n \u2264 2\u00b710^5). The second line contains n integers\na1, a2, ..., an \u2014 the vessels' capacities (1 \u2264 ai \u2264 10^9). The vessels'\ncapacities do not necessarily increase from the top vessels to the bottom ones\n(see the second sample). The third line contains integer m \u2014 the number of\nqueries (1 \u2264 m \u2264 2\u00b710^5). Each of the next m lines contains the description of\none query. The query of the first type is represented as \"1 pi xi\", the query\nof the second type is represented as \"2 ki\" (1 \u2264 pi \u2264 n, 1 \u2264 xi \u2264 10^9, 1 \u2264 ki\n\u2264 n). Output For each query, print on a single line the number of liters of\nwater in the corresponding vessel. Examples Input 2 5 10 6 1 1 4 2 1 1 2 5 1 1\n4 2 1 2 2 Output 4 5 8 Input 3 5 10 8 6 1 1 12 2 2 1 1 6 1 3 2 2 2 2 3 Output\n7 10 5\n\n",
        "cf_contest_id": 371,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dsu",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n5 10\r\n6\r\n1 1 4\r\n2 1\r\n1 2 5\r\n1 1 4\r\n2 1\r\n2 2\r\n",
                "4\r\n5\r\n8\r\n"
            ],
            [
                "3\r\n5 10 8\r\n6\r\n1 1 12\r\n2 2\r\n1 1 6\r\n1 3 2\r\n2 2\r\n2 3\r\n",
                "7\r\n10\r\n5\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n71 59 88 55 18 98 38 73 53 58\r\n20\r\n1 5 93\r\n1 7 69\r\n2 3\r\n1 1 20\r\n2 10\r\n1 6 74\r\n1 7 100\r\n1 9 14\r\n2 3\r\n2 4\r\n2 7\r\n1 3 31\r\n2 4\r\n1 6 64\r\n2 2\r\n2 2\r\n1 3 54\r\n2 9\r\n2 1\r\n1 6 86\r\n",
                "0\r\n0\r\n0\r\n0\r\n38\r\n0\r\n0\r\n0\r\n53\r\n20\r\n"
            ],
            [
                "10\r\n3 7 10 1 5 4 4 3 3 1\r\n20\r\n2 4\r\n2 4\r\n1 1 10\r\n1 1 10\r\n2 4\r\n2 3\r\n1 4 2\r\n1 4 6\r\n2 2\r\n1 8 9\r\n2 2\r\n2 5\r\n2 9\r\n1 2 1\r\n1 6 9\r\n1 1 6\r\n2 5\r\n2 2\r\n2 3\r\n1 4 10\r\n",
                "0\r\n0\r\n0\r\n10\r\n7\r\n7\r\n5\r\n3\r\n5\r\n7\r\n10\r\n"
            ],
            [
                "50\r\n57 63 98 44 22 63 5 65 36 69 49 54 61 15 29 79 50 30 43 93 18 94 46 92 72 67 67 51 34 40 50 77 58 53 79 72 72 34 91 75 83 67 71 80 11 51 85 20 6 3\r\n20\r\n2 40\r\n1 14 102\r\n2 22\r\n2 15\r\n2 43\r\n1 29 532\r\n2 27\r\n2 47\r\n1 24 107\r\n1 20 720\r\n1 21 315\r\n2 20\r\n1 2 787\r\n1 27 532\r\n2 38\r\n1 32 445\r\n1 38 17\r\n1 26 450\r\n2 40\r\n1 45 192\r\n",
                "0\r\n0\r\n29\r\n0\r\n0\r\n0\r\n93\r\n34\r\n75\r\n"
            ],
            [
                "1\r\n1\r\n1\r\n2 1\r\n",
                "0\r\n"
            ]
        ]
    }
]