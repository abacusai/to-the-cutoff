[
    {
        "name": "Bracket Sequence Deletion",
        "description": "You are given a bracket sequence consisting of \n    n\n characters '(' and/or\n)'. You perform several operations with it. During one operation, you choose\nthe shortest prefix of this string (some amount of first characters of the\nstring) that is good and remove it from the string. The prefix is considered\ngood if one of the following two conditions is satisfied: this prefix is a\nregular bracket sequence; this prefix is a palindrome of length at least two.\nA bracket sequence is called regular if it is possible to obtain a correct\narithmetic expression by inserting characters '+' and '1' into this sequence.\nFor example, sequences (())(), () and (()(())) are regular, while )(, (() and\n(()))( are not. The bracket sequence is called palindrome if it reads the same\nback and forth. For example, the bracket sequences )), (( and )(() are\npalindromes, while bracket sequences (), )( and ))( are not palindromes. You\nstop performing the operations when it's not possible to find a good prefix.\nYour task is to find the number of operations you will perform on the given\nstring and the number of remaining characters in the string. You have to\nanswer \n    t\n independent test cases. Input The first line of the input\ncontains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test\ncases. The next \n    2t\n lines describe test cases. The first line of the test\ncase contains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 5 \n    \u00b7 10^5\n) \u2014 the\nlength of the bracket sequence. The second line of the test case contains\n\n    n\n characters '(' and/or ')' \u2014 the bracket sequence itself. It is\nguaranteed that the sum of \n    n\n over all test cases do not exceed \n    5\n    \n    \u00b7 10^5\n (\n    \u2211 n \n    \u2264 5 \n    \u00b7 10^5\n). Output For each test\ncase, print two integers \n    c\n and \n    r\n \u2014 the number of operations you\nwill perform on the given bracket sequence and the number of characters that\nremain in the string after performing all operations. Example Input 5 2 () 3\n()) 4 (((( 5 )((() 6 )((()( Output 1 0 1 1 2 0 1 0 1 1\n\n",
        "cf_contest_id": 1657,
        "cf_index": "C",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n2\r\n()\r\n3\r\n())\r\n4\r\n((((\r\n5\r\n)((()\r\n6\r\n)((()(\r\n",
                "1 0\r\n1 1\r\n2 0\r\n1 0\r\n1 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n18\r\n()()())(())(())(()\r\n",
                "6 0\r\n"
            ],
            [
                "1\r\n14\r\n()(((())((()))\r\n",
                "7 0\r\n"
            ],
            [
                "1\r\n15\r\n((((()))))(((((\r\n",
                "7 1\r\n"
            ],
            [
                "1\r\n16\r\n((((()))))((((((\r\n",
                "8 0\r\n"
            ],
            [
                "5\r\n3\r\n)()\r\n8\r\n)()()(((\r\n4\r\n(()(\r\n5\r\n(())(\r\n6\r\n))((()\r\n",
                "1 0\r\n3 1\r\n1 2\r\n2 1\r\n3 0\r\n"
            ],
            [
                "8\r\n3\r\n)()\r\n8\r\n)()()(((\r\n4\r\n(()(\r\n5\r\n(())(\r\n6\r\n))((()\r\n5\r\n))())\r\n1\r\n)\r\n2\r\n)(\r\n",
                "1 0\r\n3 1\r\n1 2\r\n2 1\r\n3 0\r\n2 1\r\n0 1\r\n0 2\r\n"
            ]
        ]
    }
]