[
    {
        "name": "DIY Garland",
        "description": "Polycarp has decided to decorate his room because the New Year is soon. One of\nthe main decorations that Polycarp will install is the garland he is going to\nsolder himself. Simple garlands consisting of several lamps connected by one\nwire are too boring for Polycarp. He is going to solder a garland consisting\nof \n    n\n lamps and \n    n - 1\n wires. Exactly one lamp will be connected to\npower grid, and power will be transmitted from it to other lamps by the wires.\nEach wire connectes exactly two lamps; one lamp is called the main lamp for\nthis wire (the one that gets power from some other wire and transmits it to\nthis wire), the other one is called the auxiliary lamp (the one that gets\npower from this wire). Obviously, each lamp has at most one wire that brings\npower to it (and this lamp is the auxiliary lamp for this wire, and the main\nlamp for all other wires connected directly to it). Each lamp has a brightness\nvalue associated with it, the \n    i\n-th lamp has brightness \n    2^i\n. We\ndefine the importance of the wire as the sum of brightness values over all\nlamps that become disconnected from the grid if the wire is cut (and all other\nwires are still working). Polycarp has drawn the scheme of the garland he\nwants to make (the scheme depicts all \n    n\n lamp and \n    n - 1\n wires, and\nthe lamp that will be connected directly to the grid is marked; the wires are\nplaced in such a way that the power can be transmitted to each lamp). After\nthat, Polycarp calculated the importance of each wire, enumerated them from\n\n    1\n to \n    n - 1\n in descending order of their importance, and then wrote\nthe index of the main lamp for each wire (in the order from the first wire to\nthe last one). The following day Polycarp bought all required components of\nthe garland and decided to solder it \u2014 but he could not find the scheme.\nFortunately, Polycarp found the list of indices of main lamps for all wires.\nCan you help him restore the original scheme? Input The first line contains\none integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of\nlamps. The second line contains \n    n - 1\n integers \n    a_1\n, \n    a_2\n,\n..., \n    a_n - 1\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n), where \n    a_i\n is the index\nof the main lamp for the \n    i\n-th wire (wires are numbered in descending\norder of importance). Output If it is impossible to restore the original\nscheme, print one integer \n    -1\n. Otherwise print the scheme as follows. In\nthe first line, print one integer \n    k\n (\n    1 \n    \u2264 k \n    \u2264 n\n) \u2014 the\nindex of the lamp that is connected to the power grid. Then print \n    n - 1\n\nlines, each containing two integers \n    x_i\n and \n    y_i\n (\n    1 \n    \u2264 x_i,\n    y_i \n    \u2264 n\n, \n    x_i \n     y_i\n) \u2014 the indices of the lamps connected by\nsome wire. The descriptions of the wires (and the lamps connected by a wire)\ncan be printed in any order. The printed description must correspond to a\nscheme of a garland such that Polycarp could have written the list \n    a_1\n,\n\n    a_2\n, ..., \n    a_n - 1\n from it. If there are multiple such schemes,\noutput any of them. Example Input 6 3 6 3 1 5 Output 3 6 3 6 5 1 3 1 4 5 2\nNote The scheme for the first example (R denotes the lamp connected to the\ngrid, the numbers on wires are their importance values):\n\n",
        "cf_contest_id": 1283,
        "cf_index": "F",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n3 6 3 1 5\r\n",
                "3\r\n6 3\r\n6 5\r\n1 3\r\n1 4\r\n5 2\r\n"
            ]
        ],
        "private_cases": []
    }
]