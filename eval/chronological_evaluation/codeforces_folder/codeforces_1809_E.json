[
    {
        "name": "Two Tanks",
        "description": "There are two water tanks, the first one fits \n    a\n liters of water, the\nsecond one fits \n    b\n liters of water. The first tank has \n    c\n (\n    0\n    \n    \u2264 c \n    \u2264 a\n) liters of water initially, the second tank has \n    d\n\n(\n    0 \n    \u2264 d \n    \u2264 b\n) liters of water initially. You want to perform\n\n    n\n operations on them. The \n    i\n-th operation is specified by a single\nnon-zero integer \n    v_i\n. If \n    v_i > 0\n, then you try to pour \n    v_i\n\nliters of water from the first tank into the second one. If \n    v_i < 0\n, you\ntry to pour \n    -v_i\n liters of water from the second tank to the first one.\nWhen you try to pour \n    x\n liters of water from the tank that has \n    y\n\nliters currently available to the tank that can fit \n    z\n more liters of\nwater, the operation only moves \n    min(x, y, z)\n liters of water. For all\npairs of the initial volumes of water \n    (c, d)\n such that \n    0 \n    \u2264 c\n    \n    \u2264 a\n and \n    0 \n    \u2264 d \n    \u2264 b\n, calculate the volume of water in the\nfirst tank after all operations are performed. Input The first line contains\nthree integers \n    n, a\n and \n    b\n (\n    1 \n    \u2264 n \n    \u2264 10^4\n; \n    1 \n    \u2264\n    a, b \n    \u2264 1000\n) \u2014 the number of operations and the capacities of the\ntanks, respectively. The second line contains \n    n\n integers \n    v_1, v_2,\n    \n    \u2026, v_n\n (\n    -1000 \n    \u2264 v_i \n    \u2264 1000\n; \n    v_i \n    \u2260 0\n) \u2014 the\nvolume of water you try to pour in each operation. Output For all pairs of the\ninitial volumes of water \n    (c, d)\n such that \n    0 \n    \u2264 c \n    \u2264 a\n and\n\n    0 \n    \u2264 d \n    \u2264 b\n, calculate the volume of water in the first tank after\nall operations are performed. Print \n    a + 1\n lines, each line should\ncontain \n    b + 1\n integers. The \n    j\n-th value in the \n    i\n-th line\nshould be equal to the answer for \n    c = i - 1\n and \n    d = j - 1\n.\nExamples Input 3 4 4 -2 1 2 Output 0 0 0 0 0 0 0 0 0 1 0 0 1 1 2 0 1 1 2 3 1 1\n2 3 4 Input 3 9 5 1 -2 2 Output 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 1 1 2 1 2 2 2 2\n3 2 3 3 3 3 4 3 4 4 4 4 5 4 5 5 5 5 6 5 6 6 6 6 7 6 7 7 7 7 8 7 7 7 7 8 9 Note\nConsider \n    c = 3\n and \n    d = 2\n from the first example: The first\noperation tries to move \n    2\n liters of water from the second tank to the\nfirst one, the second tank has \n    2\n liters available, the first tank can\nfit \n    1\n more liter. Thus, \n    min(2, 2, 1) = 1\n liter is moved, the\nfirst tank now contains \n    4\n liters, the second tank now contains \n    1\n\nliter. The second operation tries to move \n    1\n liter of water from the\nfirst tank to the second one. \n    min(1, 4, 3) = 1\n liter is moved, the\nfirst tank now contains \n    3\n liters, the second tank now contains \n    2\n\nliter. The third operation tries to move \n    2\n liter of water from the first\ntank to the second one. \n    min(2, 3, 2) = 2\n liters are moved, the first\ntank now contains \n    1\n liter, the second tank now contains \n    4\n liters.\nThere's \n    1\n liter of water in the first tank at the end. Thus, the third\nvalue in the fourth row is \n    1\n.\n\n",
        "cf_contest_id": 1809,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dp",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 4 4\r\n-2 1 2\r\n",
                "0 0 0 0 0 \r\n0 0 0 0 1 \r\n0 0 1 1 2 \r\n0 1 1 2 3 \r\n1 1 2 3 4 \r\n"
            ],
            [
                "3 9 5\r\n1 -2 2\r\n",
                "0 0 0 0 0 0 \r\n0 0 0 0 0 1 \r\n0 1 1 1 1 2 \r\n1 2 2 2 2 3 \r\n2 3 3 3 3 4 \r\n3 4 4 4 4 5 \r\n4 5 5 5 5 6 \r\n5 6 6 6 6 7 \r\n6 7 7 7 7 8 \r\n7 7 7 7 8 9 \r\n"
            ]
        ],
        "private_cases": [
            [
                "2 10 15\r\n1 -1\r\n",
                "0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 \r\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 \r\n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 \r\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 \r\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 \r\n6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 \r\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 \r\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 \r\n9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 \r\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 \r\n"
            ],
            [
                "2 10 15\r\n1 1\r\n",
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 \r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 \r\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 4 \r\n3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 5 \r\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 6 \r\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 7 \r\n6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 8 \r\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 9 \r\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 10 \r\n"
            ],
            [
                "2 10 15\r\n-3 1\r\n",
                "0 0 1 2 2 2 2 2 2 2 2 2 2 2 2 2 \r\n0 1 2 3 3 3 3 3 3 3 3 3 3 3 3 3 \r\n1 2 3 4 4 4 4 4 4 4 4 4 4 4 4 4 \r\n2 3 4 5 5 5 5 5 5 5 5 5 5 5 5 5 \r\n3 4 5 6 6 6 6 6 6 6 6 6 6 6 6 6 \r\n4 5 6 7 7 7 7 7 7 7 7 7 7 7 7 7 \r\n5 6 7 8 8 8 8 8 8 8 8 8 8 8 8 8 \r\n6 7 8 9 9 9 9 9 9 9 9 9 9 9 9 9 \r\n7 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 \r\n8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 \r\n9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 \r\n"
            ],
            [
                "2 15 10\r\n-1 1\r\n",
                "0 0 0 0 0 0 0 0 0 0 0 \r\n0 1 1 1 1 1 1 1 1 1 1 \r\n1 2 2 2 2 2 2 2 2 2 2 \r\n2 3 3 3 3 3 3 3 3 3 3 \r\n3 4 4 4 4 4 4 4 4 4 4 \r\n4 5 5 5 5 5 5 5 5 5 5 \r\n5 6 6 6 6 6 6 6 6 6 6 \r\n6 7 7 7 7 7 7 7 7 7 7 \r\n7 8 8 8 8 8 8 8 8 8 8 \r\n8 9 9 9 9 9 9 9 9 9 9 \r\n9 10 10 10 10 10 10 10 10 10 10 \r\n10 11 11 11 11 11 11 11 11 11 11 \r\n11 12 12 12 12 12 12 12 12 12 12 \r\n12 13 13 13 13 13 13 13 13 13 13 \r\n13 14 14 14 14 14 14 14 14 14 14 \r\n14 14 14 14 14 14 14 14 14 14 15 \r\n"
            ],
            [
                "2 15 10\r\n1 1\r\n",
                "0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 1 \r\n0 0 0 0 0 0 0 0 0 1 2 \r\n1 1 1 1 1 1 1 1 1 2 3 \r\n2 2 2 2 2 2 2 2 2 3 4 \r\n3 3 3 3 3 3 3 3 3 4 5 \r\n4 4 4 4 4 4 4 4 4 5 6 \r\n5 5 5 5 5 5 5 5 5 6 7 \r\n6 6 6 6 6 6 6 6 6 7 8 \r\n7 7 7 7 7 7 7 7 7 8 9 \r\n8 8 8 8 8 8 8 8 8 9 10 \r\n9 9 9 9 9 9 9 9 9 10 11 \r\n10 10 10 10 10 10 10 10 10 11 12 \r\n11 11 11 11 11 11 11 11 11 12 13 \r\n12 12 12 12 12 12 12 12 12 13 14 \r\n13 13 13 13 13 13 13 13 13 14 15 \r\n"
            ],
            [
                "2 10 15\r\n-1 1\r\n",
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \r\n1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 \r\n2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 \r\n3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 \r\n4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 \r\n5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 \r\n6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 \r\n7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 \r\n8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 \r\n9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 \r\n"
            ],
            [
                "2 10 15\r\n2 -4\r\n",
                "0 1 2 3 4 4 4 4 4 4 4 4 4 4 4 4 \r\n1 2 3 4 4 4 4 4 4 4 4 4 4 4 4 5 \r\n2 3 4 4 4 4 4 4 4 4 4 4 4 4 5 6 \r\n3 4 5 5 5 5 5 5 5 5 5 5 5 5 6 7 \r\n4 5 6 6 6 6 6 6 6 6 6 6 6 6 7 8 \r\n5 6 7 7 7 7 7 7 7 7 7 7 7 7 8 9 \r\n6 7 8 8 8 8 8 8 8 8 8 8 8 8 9 10 \r\n7 8 9 9 9 9 9 9 9 9 9 9 9 9 10 10 \r\n8 9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 \r\n9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 \r\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 \r\n"
            ],
            [
                "2 10 15\r\n-2 4\r\n",
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 \r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 \r\n0 0 1 1 1 1 1 1 1 1 1 1 1 1 2 3 \r\n0 1 2 2 2 2 2 2 2 2 2 2 2 2 3 4 \r\n1 2 3 3 3 3 3 3 3 3 3 3 3 3 4 5 \r\n2 3 4 4 4 4 4 4 4 4 4 4 4 4 5 6 \r\n3 4 5 5 5 5 5 5 5 5 5 5 5 5 6 7 \r\n4 5 6 6 6 6 6 6 6 6 6 6 6 6 7 8 \r\n5 6 6 6 6 6 6 6 6 6 6 6 6 7 8 9 \r\n6 6 6 6 6 6 6 6 6 6 6 6 7 8 9 10 \r\n"
            ],
            [
                "2 15 10\r\n-2 2\r\n",
                "0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 1 1 1 1 1 1 1 1 1 \r\n0 1 2 2 2 2 2 2 2 2 2 \r\n1 2 3 3 3 3 3 3 3 3 3 \r\n2 3 4 4 4 4 4 4 4 4 4 \r\n3 4 5 5 5 5 5 5 5 5 5 \r\n4 5 6 6 6 6 6 6 6 6 6 \r\n5 6 7 7 7 7 7 7 7 7 7 \r\n6 7 8 8 8 8 8 8 8 8 8 \r\n7 8 9 9 9 9 9 9 9 9 9 \r\n8 9 10 10 10 10 10 10 10 10 10 \r\n9 10 11 11 11 11 11 11 11 11 11 \r\n10 11 12 12 12 12 12 12 12 12 12 \r\n11 12 13 13 13 13 13 13 13 13 13 \r\n12 13 13 13 13 13 13 13 13 13 14 \r\n13 13 13 13 13 13 13 13 13 14 15 \r\n"
            ],
            [
                "2 15 10\r\n-3 6\r\n",
                "0 0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 1 \r\n0 0 0 0 0 0 0 0 0 1 2 \r\n0 0 0 0 0 0 0 0 1 2 3 \r\n0 0 0 1 1 1 1 1 2 3 4 \r\n0 0 1 2 2 2 2 2 3 4 5 \r\n0 1 2 3 3 3 3 3 4 5 6 \r\n1 2 3 4 4 4 4 4 5 6 7 \r\n2 3 4 5 5 5 5 5 6 7 8 \r\n3 4 5 6 6 6 6 6 7 8 9 \r\n4 5 6 7 7 7 7 7 8 9 10 \r\n5 6 7 8 8 8 8 8 9 10 11 \r\n6 7 8 9 9 9 9 9 10 11 12 \r\n7 8 9 9 9 9 9 10 11 12 13 \r\n8 9 9 9 9 9 10 11 12 13 14 \r\n9 9 9 9 9 10 11 12 13 14 15 \r\n"
            ],
            [
                "4 1 2\r\n1 1 -1 2\r\n",
                "0 0 0 \r\n0 0 1 \r\n"
            ],
            [
                "4 1 2\r\n1 1 2 -1\r\n",
                "0 1 1 \r\n1 1 1 \r\n"
            ]
        ]
    }
]