[
    {
        "name": "Guess the Permutation",
        "description": "Bob has a permutation of integers from 1 to n. Denote this permutation as p.\nThe i-th element of p will be denoted as pi. For all pairs of distinct\nintegers i, j between 1 and n, he wrote the number ai, j = min(pi, pj). He\nwrites ai, i = 0 for all integer i from 1 to n. Bob gave you all the values of\nai, j that he wrote down. Your job is to reconstruct any permutation that\ncould have generated these values. The input will be formed so that it is\nguaranteed that there is at least one solution that is consistent with the\ninformation given. Input The first line of the input will contain a single\ninteger n (2 \u2264 n \u2264 50). The next n lines will contain the values of ai, j. The\nj-th number on the i-th line will represent ai, j. The i-th number on the i-th\nline will be 0. It's guaranteed that ai, j = aj, i and there is at least one\nsolution consistent with the information given. Output Print n space separated\nintegers, which represents a permutation that could have generated these\nvalues. If there are multiple possible solutions, print any of them. Examples\nInput 2 0 1 1 0 Output 2 1 Input 5 0 2 2 1 2 2 0 4 1 3 2 4 0 1 3 1 1 1 0 1 2 3\n3 1 0 Output 2 5 4 1 3 Note In the first case, the answer can be 1, 2 or 2,\n1. In the second case, another possible answer is 2, 4, 5, 1, 3.\n\n",
        "cf_contest_id": 618,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n0 1\r\n1 0\r\n",
                "2 1\r\n"
            ],
            [
                "5\r\n0 2 2 1 2\r\n2 0 4 1 3\r\n2 4 0 1 3\r\n1 1 1 0 1\r\n2 3 3 1 0\r\n",
                "2 5 4 1 3\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n0 1 5 2 5 3 4 5 5 5\r\n1 0 1 1 1 1 1 1 1 1\r\n5 1 0 2 6 3 4 6 6 6\r\n2 1 2 0 2 2 2 2 2 2\r\n5 1 6 2 0 3 4 8 8 7\r\n3 1 3 2 3 0 3 3 3 3\r\n4 1 4 2 4 3 0 4 4 4\r\n5 1 6 2 8 3 4 0 9 7\r\n5 1 6 2 8 3 4 9 0 7\r\n5 1 6 2 7 3 4 7 7 0\r\n",
                "5 1 6 2 8 3 4 10 9 7\r\n"
            ],
            [
                "4\r\n0 1 3 2\r\n1 0 1 1\r\n3 1 0 2\r\n2 1 2 0\r\n",
                "4 1 3 2\r\n"
            ],
            [
                "7\r\n0 3 2 4 1 4 4\r\n3 0 2 3 1 3 3\r\n2 2 0 2 1 2 2\r\n4 3 2 0 1 5 5\r\n1 1 1 1 0 1 1\r\n4 3 2 5 1 0 6\r\n4 3 2 5 1 6 0\r\n",
                "4 3 2 5 1 7 6\r\n"
            ],
            [
                "10\r\n0 4 4 1 4 4 4 2 3 4\r\n4 0 5 1 6 8 9 2 3 7\r\n4 5 0 1 5 5 5 2 3 5\r\n1 1 1 0 1 1 1 1 1 1\r\n4 6 5 1 0 6 6 2 3 6\r\n4 8 5 1 6 0 8 2 3 7\r\n4 9 5 1 6 8 0 2 3 7\r\n2 2 2 1 2 2 2 0 2 2\r\n3 3 3 1 3 3 3 2 0 3\r\n4 7 5 1 6 7 7 2 3 0\r\n",
                "4 10 5 1 6 8 9 2 3 7\r\n"
            ],
            [
                "13\r\n0 5 5 2 5 4 5 5 3 5 5 5 1\r\n5 0 6 2 6 4 6 6 3 6 6 6 1\r\n5 6 0 2 10 4 7 10 3 8 10 9 1\r\n2 2 2 0 2 2 2 2 2 2 2 2 1\r\n5 6 10 2 0 4 7 12 3 8 11 9 1\r\n4 4 4 2 4 0 4 4 3 4 4 4 1\r\n5 6 7 2 7 4 0 7 3 7 7 7 1\r\n5 6 10 2 12 4 7 0 3 8 11 9 1\r\n3 3 3 2 3 3 3 3 0 3 3 3 1\r\n5 6 8 2 8 4 7 8 3 0 8 8 1\r\n5 6 10 2 11 4 7 11 3 8 0 9 1\r\n5 6 9 2 9 4 7 9 3 8 9 0 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 0\r\n",
                "5 6 10 2 13 4 7 12 3 8 11 9 1\r\n"
            ]
        ]
    }
]