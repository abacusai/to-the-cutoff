[
    {
        "name": "Ehab and the Big Finale",
        "description": "This is an interactive problem. You're given a tree consisting of \n    n\n\nnodes, rooted at node \n    1\n. A tree is a connected graph with no cycles. We\nchose a hidden node \n    x\n. In order to find this node, you can ask queries\nof two types: d \n    u\n (\n    1 \n    \u2264 u \n    \u2264 n\n). We will answer with the\ndistance between nodes \n    u\n and \n    x\n. The distance between two nodes is\nthe number of edges in the shortest path between them. s \n    u\n (\n    1 \n    \u2264 u\n    \n    \u2264 n\n). We will answer with the second node on the path from \n    u\n to\n\n    x\n. However, there's a plot twist. If \n    u\n is not an ancestor of\n\n    x\n, you'll receive \"Wrong answer\" verdict! Node \n    a\n is called an\nancestor of node \n    b\n if \n    a \n     b\n and the shortest path from node\n\n    1\n to node \n    b\n passes through node \n    a\n. Note that in this problem\na node is not an ancestor of itself. Can you find \n    x\n in no more than\n\n    36\n queries? The hidden node is fixed in each test beforehand and does\nnot depend on your queries. Input The first line contains the integer \n    n\n\n(\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of nodes in the tree. Each\nof the next \n    n-1\n lines contains two space-separated integers \n    u\n and\n\n    v\n (\n    1 \n    \u2264 u,v \n    \u2264 n\n) that mean there's an edge between nodes\n\n    u\n and \n    v\n. It's guaranteed that the given graph is a tree. Output To\nprint the answer, print \"! x\" (without quotes). Interaction To ask a question,\nprint it in one of the formats above: d \n    u\n (\n    1 \n    \u2264 u \n    \u2264 n\n), or\ns \n    u\n (\n    1 \n    \u2264 u \n    \u2264 n\n). After each question, you should read the\nanswer: either the distance or the second vertex on the path, as mentioned in\nthe legend. If we answer with \n    -1\n instead of a valid answer, that means\nyou exceeded the number of queries, made an invalid query, or violated the\ncondition in the second type of queries. Exit immediately after receiving\n\n    -1\n and you will see Wrong answer verdict. Otherwise, you can get an\narbitrary verdict because your solution will continue to read from a closed\nstream. After printing a query, do not forget to output end of line and flush\nthe output. Otherwise, you will get Idleness limit exceeded. To do this, use:\nfflush(stdout) or cout.flush() in C++; System.out.flush() in Java;\nflush(output) in Pascal; stdout.flush() in Python; See the documentation for\nother languages.Hacks: The first line should contain two integers \n    n\n and\n\n    x\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n, \n    1 \n    \u2264 x \n    \u2264 n\n). Each\nof the next \n    n-1\n lines should contain two integers \n    u\n and \n    v\n\n(\n    1 \n    \u2264 u,v \n    \u2264 n\n) that mean there is an edge between nodes \n    u\n\nand \n    v\n. The edges must form a tree. Example Input 5 1 2 1 3 3 4 3 5 3 5\nOutput d 2 s 3 ! 5 Note In the first example, the hidden node is node \n    5\n.\nWe first ask about the distance between node \n    x\n and node \n    2\n. The\nanswer is \n    3\n, so node \n    x\n is either \n    4\n or \n    5\n. We then ask\nabout the second node in the path from node \n    3\n to node \n    x\n. Note here\nthat node \n    3\n is an ancestor of node \n    5\n. We receive node \n    5\n as\nthe answer. Finally, we report that the hidden node is node \n    5\n.\n\n",
        "cf_contest_id": 1174,
        "cf_index": "F",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "divide and conquer",
            "graphs",
            "implementation",
            "interactive",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 5\r\n1 2\r\n1 3\r\n3 4\r\n3 5\r\n",
                "4\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 7\r\n1 5\r\n5 8\r\n9 7\r\n5 2\r\n3 8\r\n1 4\r\n9 10\r\n9 5\r\n10 6\r\n",
                "4\r\n"
            ],
            [
                "2 2\r\n1 2\r\n",
                "2\r\n"
            ],
            [
                "3 2\r\n3 2\r\n1 2\r\n",
                "2\r\n"
            ]
        ]
    }
]