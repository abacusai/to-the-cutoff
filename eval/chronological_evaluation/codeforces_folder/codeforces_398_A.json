[
    {
        "name": "Cards",
        "description": "User ainta loves to play with cards. He has a cards containing letter \"o\" and\nb cards containing letter \"x\". He arranges the cards in a row, and calculates\nthe score of the deck by the formula below. At first, the score is 0. For each\nblock of contiguous \"o\"s with length x the score increases by x^2. For each\nblock of contiguous \"x\"s with length y the score decreases by y^2. For\nexample, if a = 6, b = 3 and ainta have arranged the cards in the order, that\nis described by string \"ooxoooxxo\", the score of the deck equals 2^2 - 1^2 +\n3^2 - 2^2 + 1^2 = 9. That is because the deck has 5 blocks in total: \"oo\",\n\"x\", \"ooo\", \"xx\", \"o\". User ainta likes big numbers, so he wants to maximize\nthe score with the given cards. Help ainta make the score as big as possible.\nNote, that he has to arrange all his cards. Input The first line contains two\nspace-separated integers a and b (0 \u2264 a, b \u2264 10^5; a + b \u2265 1) \u2014 the number of\n\"o\" cards and the number of \"x\" cards. Output In the first line print a single\ninteger v \u2014 the maximum score that ainta can obtain. In the second line print\na + b characters describing the deck. If the k-th card of the deck contains\n\"o\", the k-th character must be \"o\". If the k-th card of the deck contains\n\"x\", the k-th character must be \"x\". The number of \"o\" characters must be\nequal to a, and the number of \"x \" characters must be equal to b. If there are\nmany ways to maximize v, print any. Please, do not write the \nread or write 64-bit integers in \u0421++. It is preferred to use the cin, cout\nstreams or the \nOutput 16 oooo Input 0 4 Output -16 xxxx\n\n",
        "cf_contest_id": 398,
        "cf_index": "A",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 3\r\n",
                "-1\r\nxxoox\r\n"
            ],
            [
                "4 0\r\n",
                "16\r\noooo\r\n"
            ],
            [
                "0 4\r\n",
                "-16\r\nxxxx\r\n"
            ]
        ],
        "private_cases": [
            [
                "8 6\r\n",
                "46\r\nxxxooooooooxxx\r\n"
            ],
            [
                "1 1\r\n",
                "0\r\nox\r\n"
            ],
            [
                "38 5\r\n",
                "1431\r\nxxxooooooooooooooooooooooooooooooooooooooxx\r\n"
            ],
            [
                "2 122\r\n",
                "-4960\r\nxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\r\n"
            ],
            [
                "4 2\r\n",
                "14\r\nxoooox\r\n"
            ],
            [
                "4 9\r\n",
                "-13\r\nxxoxxoxxoxxox\r\n"
            ],
            [
                "8 10\r\n",
                "16\r\nxxxxoxxxoooooooxxx\r\n"
            ],
            [
                "206 209\r\n",
                "34847\r\nxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoxxxxxxxxxxxxxxxxxxxoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooxxxxxxxxxxxxxxxxxxx\r\n"
            ],
            [
                "5 17\r\n",
                "-44\r\nxxxoxxxoxxxoxxxoxxxoxx\r\n"
            ],
            [
                "1 2\r\n",
                "-1\r\nxox\r\n"
            ],
            [
                "2 1\r\n",
                "3\r\noox\r\n"
            ],
            [
                "1 1\r\n",
                "0\r\nox\r\n"
            ],
            [
                "1 0\r\n",
                "1\r\no\r\n"
            ],
            [
                "0 1\r\n",
                "-1\r\nx\r\n"
            ],
            [
                "2 2\r\n",
                "2\r\nxoox\r\n"
            ],
            [
                "4 1\r\n",
                "15\r\noooox\r\n"
            ],
            [
                "4 2\r\n",
                "14\r\nxoooox\r\n"
            ],
            [
                "4 3\r\n",
                "11\r\nxxoooox\r\n"
            ],
            [
                "4 4\r\n",
                "8\r\nxxooooxx\r\n"
            ],
            [
                "4 5\r\n",
                "3\r\nxxxooooxx\r\n"
            ],
            [
                "4 6\r\n",
                "-2\r\nxxxooooxxx\r\n"
            ],
            [
                "4 7\r\n",
                "-7\r\nxxxoxxoooxx\r\n"
            ]
        ]
    }
]