[
    {
        "name": "Island Puzzle",
        "description": "A remote island chain contains n islands, labeled 1 through n. Bidirectional\nbridges connect the islands to form a simple cycle \u2014 a bridge connects islands\n1 and 2, islands 2 and 3, and so on, and additionally a bridge connects\nislands n and 1. The center of each island contains an identical pedestal, and\nall but one of the islands has a fragile, uniquely colored statue currently\nheld on the pedestal. The remaining island holds only an empty pedestal. The\nislanders want to rearrange the statues in a new order. To do this, they\nrepeat the following process: First, they choose an island directly adjacent\nto the island containing an empty pedestal. Then, they painstakingly carry the\nstatue on this island across the adjoining bridge and place it on the empty\npedestal. Determine if it is possible for the islanders to arrange the statues\nin the desired order. Input The first line contains a single integer n (2 \u2264 n\n\u2264 200 000) \u2014 the total number of islands. The second line contains n space-\nseparated integers ai (0 \u2264 ai \u2264 n - 1) \u2014 the statue currently placed on the\ni-th island. If ai = 0, then the island has no statue. It is guaranteed that\nthe ai are distinct. The third line contains n space-separated integers bi (0\n\u2264 bi \u2264 n - 1) \u2014 the desired statues of the ith island. Once again, bi = 0\nindicates the island desires no statue. It is guaranteed that the bi are\ndistinct. Output Print \"YES\" (without quotes) if the rearrangement can be done\nin the existing network, and \"NO\" otherwise. Examples Input 3 1 0 2 2 0 1\nOutput YES Input 2 1 0 0 1 Output YES Input 4 1 2 3 0 0 3 2 1 Output NO Note\nIn the first sample, the islanders can first move statue 1 from island 1 to\nisland 2, then move statue 2 from island 3 to island 1, and finally move\nstatue 1 from island 2 to island 3. In the second sample, the islanders can\nsimply move statue 1 from island 1 to island 2. In the third sample, no\nsequence of movements results in the desired position.\n\n",
        "cf_contest_id": 634,
        "cf_index": "A",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 0 2\r\n2 0 1\r\n",
                "YES\r\n"
            ],
            [
                "2\r\n1 0\r\n0 1\r\n",
                "YES\r\n"
            ],
            [
                "4\r\n1 2 3 0\r\n0 3 2 1\r\n",
                "NO\r\n"
            ]
        ],
        "private_cases": [
            [
                "9\r\n3 8 4 6 7 1 5 2 0\r\n6 4 8 5 3 1 2 0 7\r\n",
                "NO\r\n"
            ],
            [
                "4\r\n2 3 1 0\r\n2 0 1 3\r\n",
                "NO\r\n"
            ],
            [
                "4\r\n0 1 2 3\r\n2 0 1 3\r\n",
                "NO\r\n"
            ],
            [
                "4\r\n3 0 1 2\r\n1 0 2 3\r\n",
                "YES\r\n"
            ],
            [
                "3\r\n0 2 1\r\n1 2 0\r\n",
                "YES\r\n"
            ],
            [
                "2\r\n0 1\r\n0 1\r\n",
                "YES\r\n"
            ],
            [
                "6\r\n3 1 5 4 0 2\r\n0 4 3 5 2 1\r\n",
                "NO\r\n"
            ],
            [
                "4\r\n2 0 3 1\r\n3 1 0 2\r\n",
                "YES\r\n"
            ],
            [
                "5\r\n3 0 2 1 4\r\n4 3 0 1 2\r\n",
                "NO\r\n"
            ],
            [
                "3\r\n2 0 1\r\n1 0 2\r\n",
                "YES\r\n"
            ],
            [
                "10\r\n6 2 3 8 0 4 9 1 5 7\r\n2 3 8 4 0 9 1 5 7 6\r\n",
                "YES\r\n"
            ],
            [
                "10\r\n2 4 8 3 6 1 9 0 5 7\r\n3 6 1 9 0 5 7 2 8 4\r\n",
                "NO\r\n"
            ],
            [
                "10\r\n2 0 1 6 4 9 8 5 3 7\r\n6 4 9 0 5 3 7 2 1 8\r\n",
                "NO\r\n"
            ],
            [
                "3\r\n0 1 2\r\n0 1 2\r\n",
                "YES\r\n"
            ],
            [
                "4\r\n0 1 2 3\r\n1 0 2 3\r\n",
                "YES\r\n"
            ],
            [
                "3\r\n0 1 2\r\n1 0 2\r\n",
                "YES\r\n"
            ],
            [
                "5\r\n1 2 0 3 4\r\n4 0 1 2 3\r\n",
                "YES\r\n"
            ],
            [
                "4\r\n1 0 2 3\r\n1 0 2 3\r\n",
                "YES\r\n"
            ],
            [
                "3\r\n0 1 2\r\n0 2 1\r\n",
                "YES\r\n"
            ],
            [
                "4\r\n0 1 2 3\r\n2 3 1 0\r\n",
                "YES\r\n"
            ],
            [
                "4\r\n0 2 3 1\r\n1 2 3 0\r\n",
                "YES\r\n"
            ],
            [
                "3\r\n0 2 1\r\n2 0 1\r\n",
                "YES\r\n"
            ],
            [
                "2\r\n1 0\r\n1 0\r\n",
                "YES\r\n"
            ],
            [
                "4\r\n1 2 3 0\r\n1 0 2 3\r\n",
                "YES\r\n"
            ],
            [
                "4\r\n0 1 3 2\r\n2 1 3 0\r\n",
                "YES\r\n"
            ],
            [
                "4\r\n1 2 3 0\r\n1 2 0 3\r\n",
                "YES\r\n"
            ]
        ]
    }
]