[
    {
        "name": "Om Nom and Necklace",
        "description": "One day Om Nom found a thread with n beads of different colors. He decided to\ncut the first several beads from this thread to make a bead necklace and\npresent it to his girlfriend Om Nelly. Om Nom knows that his girlfriend loves\nbeautiful patterns. That's why he wants the beads on the necklace to form a\nregular pattern. A sequence of beads S is regular if it can be represented as\nS = A + B + A + B + A + ... + A + B + A, where A and B are some bead\nsequences, \" + \" is the concatenation of sequences, there are exactly 2k + 1\nsummands in this sum, among which there are k + 1 \"A\" summands and k \"B\"\nsummands that follow in alternating order. Om Nelly knows that her friend is\nan eager mathematician, so she doesn't mind if A or B is an empty sequence.\nHelp Om Nom determine in which ways he can cut off the first several beads\nfrom the found thread (at least one; probably, all) so that they form a\nregular pattern. When Om Nom cuts off the beads, he doesn't change their\norder. Input The first line contains two integers n, k (1 \u2264 n, k \u2264 1 000 000)\n\u2014 the number of beads on the thread that Om Nom found and number k from the\ndefinition of the regular sequence above. The second line contains the\nsequence of n lowercase Latin letters that represent the colors of the beads.\nEach color corresponds to a single letter. Output Print a string consisting of\nn zeroes and ones. Position i (1 \u2264 i \u2264 n) must contain either number one if\nthe first i beads on the thread form a regular sequence, or a zero otherwise.\nExamples Input 7 2 bcabcab Output 0000011 Input 21 2 ababaababaababaababaa\nOutput 000110000111111000011 Note In the first sample test a regular sequence\nis both a sequence of the first 6 beads (we can take A = \"\", B = \"bca\"), and a\nsequence of the first 7 beads (we can take A = \"b\", B = \"ca\"). In the second\nsample test, for example, a sequence of the first 13 beads is regular, if we\ntake A = \"aba\", B = \"ba\".\n\n",
        "cf_contest_id": 526,
        "cf_index": "D",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "hashing",
            "string suffix structures",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 2\r\nbcabcab\r\n",
                "0000011"
            ],
            [
                "21 2\r\nababaababaababaababaa\r\n",
                "000110000111111000011"
            ]
        ],
        "private_cases": [
            [
                "321 2\r\nabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaaba\r\n",
                "000001111001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
            ],
            [
                "153 2\r\nabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaabaaa\r\n",
                "000000011111000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
            ],
            [
                "2 1\r\nab\r\n",
                "11"
            ],
            [
                "2 2\r\nab\r\n",
                "00"
            ],
            [
                "2 3\r\nab\r\n",
                "00"
            ],
            [
                "5 6\r\naaaaa\r\n",
                "00000"
            ],
            [
                "5 5\r\naaaaa\r\n",
                "00001"
            ],
            [
                "5 4\r\naaaaa\r\n",
                "00011"
            ],
            [
                "1 1\r\na\r\n",
                "1"
            ],
            [
                "1 2\r\na\r\n",
                "0"
            ],
            [
                "1 42\r\na\r\n",
                "0"
            ]
        ]
    }
]