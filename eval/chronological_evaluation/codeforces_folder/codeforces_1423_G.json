[
    {
        "name": "Growing flowers",
        "description": "Sarah has always been a lover of nature, and a couple of years ago she saved\nup enough money to travel the world and explore all the things built by nature\nover its lifetime on earth. During this time she visited some truly special\nplaces which were left untouched for centuries, from watching icebergs in\nfreezing weather to scuba-diving in oceans and admiring the sea life, residing\nunseen. These experiences were enhanced with breathtaking views built by\nmountains over time and left there for visitors to see for years on end. Over\ntime, all these expeditions took a toll on Sarah and culminated in her\ndecision to settle down in the suburbs and live a quiet life. However, as\nSarah's love for nature never faded, she started growing flowers in her garden\nin an attempt to stay connected with nature. At the beginning she planted only\nblue orchids, but over time she started using different flower types to add\nvariety to her collection of flowers. This collection of flowers can be\nrepresented as an array of \n    N\n flowers and the \n    i\n-th of them has a\ntype associated with it, denoted as \n    A_i\n. Each resident, passing by her\ncollection and limited by the width of his view, can only see \n    K\n\ncontiguous flowers at each moment in time. To see the whole collection, the\nresident will look at the first \n    K\n contiguous flowers \n    A_1, A_2, ...,\n    A_K\n, then shift his view by one flower and look at the next section of K\ncontiguous flowers \n    A_2, A_3, ..., A_K+1\n and so on until they scan the\nwhole collection, ending with section \n    A_N-K+1, ..., A_N-1, A_N\n. Each\nresident determines the beautiness of a section of \n    K\n flowers as the\nnumber of distinct flower types in that section. Furthermore, the beautiness\nof the whole collection is calculated by summing the beautiness values of each\ncontiguous section. Formally, beautiness \n    B_i\n of a section starting at\nthe \n    i\n-th position is calculated as \n    B_i = distinct(A_i, A_i+1, ...,\n    A_i+K-1)\n, and beautiness of the collection \n    B\n is calculated as\n\n    B=B_1 + B_2 + ... + B_N-K+1\n. In addition, as Sarah wants to keep her\ncollection of flowers have a fresh feel, she can also pick two points \n    L\n\nand \n    R\n, dispose flowers between those two points and plant new flowers,\nall of them being the same type. You will be given \n    Q\n queries and each of\nthose queries will be of the following two types: You will be given three\nintegers \n    L, R, X\n describing that Sarah has planted flowers of type\n\n    X\n between positions \n    L\n and \n    R\n inclusive. Formally collection\nis changed such that \n    A[i]=X\n for all \n    i\n in range \n    [L.. R]\n. You\nwill be given integer \n    K\n, width of the resident's view and you have to\ndetermine the beautiness value \n    B\n resident has associated with the\ncollection For each query of second type print the result \u2013 beautiness \n    B\n\nof the collection. Input First line contains two integers \n    N\n and \n    Q\n    \n     (1 \n    \u2264 N, Q \n    \u2264 10^5)\n \u2014 number of flowers and the number of\nqueries, respectively. The second line contains \n    N\n integers \n    A_1, A_2,\n    ..., A_N\n     (1 \n    \u2264 A_i \n    \u2264 10^9)\n \u2014 where \n    A_i\n represents\ntype of the \n    i\n-th flower. Each of the next \n    Q\n lines describe queries\nand start with integer \n    T\n    \u2208\n    \n    1, 2\n. If \n    T = 1\n, there will\nbe three more integers in the line \n    L, R, X\n     (1 \n    \u2264 L, R \n    \u2264 N;\n     \n    1 \n    \u2264 X \n    \u2264 10^9)\n \u2014 \n    L\n and \n    R\n describing boundaries and\n\n    X\n describing the flower type If \n    T = 2\n, there will be one more\ninteger in the line \n    K\n     (1 \n    \u2264 K \n    \u2264 N)\n \u2014 resident's width of\nview Output For each query of the second type print the beautiness \n    B\n of\nthe collection. Example Input 5 5 1 2 3 4 5 2 3 1 1 2 5 2 4 1 2 4 5 2 2 Output\n9 6 4 Note Let's look at the example. Initially the collection is \n    [1, 2, 3,\n    4, 5]\n. In the first query \n    K = 3\n, we consider sections of three\nflowers with the first being \n    [1, 2, 3]\n. Since beautiness of the section\nis the number of distinct flower types in that section, \n    B_1 = 3\n. Second\nsection is \n    [2, 3, 4]\n and \n    B_2 = 3\n. Third section is \n    [3, 4, 5]\n\nand \n    B_3 = 3\n, since the flower types are all distinct. The beautiness\nvalue resident has associated with the collection is \n    B = B_1 + B_2 + B_3 =\n    3 + 3 + 3 = 9\n. After the second query, the collection becomes \n    [5, 5, 3,\n    4, 5]\n. For the third query \n    K = 4\n, so we consider sections of four\nflowers with the first being \n    [5, 5, 3, 4]\n. There are three distinct\nflower types \n    [5, 3, 4]\n in this section, so \n    B_1 = 3\n. Second section\n\n    [5, 3, 4, 5]\n also has \n    3\n distinct flower types, so \n    B_2 = 3\n.\nThe beautiness value resident has associated with the collection is \n    B = B_1\n    + B_2 = 3 + 3 = 6\n After the fourth query, the collection becomes \n    [5, 5,\n    5, 5, 5]\n. For the fifth query \n    K = 2\n and in this case all the four\nsections are same with each of them being \n    [5, 5]\n. Beautiness of \n    [5,\n    5]\n is \n    1\n since there is only one distinct element in this section\n\n    [5]\n. Beautiness of the whole collection is \n    B = B_1 + B_2 + B_3 + B_4\n    = 1 + 1 + 1 + 1 = 4\n\n\n",
        "cf_contest_id": 1423,
        "cf_index": "G",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 5\r\n1 2 3 4 5\r\n2 3\r\n1 1 2 5\r\n2 4\r\n1 2 4 5\r\n2 2\r\n",
                "9\r\n6\r\n4\r\n"
            ]
        ],
        "private_cases": []
    }
]