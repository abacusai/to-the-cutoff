[
    {
        "name": "Special Permutation",
        "description": "A permutation of length \n    n\n is an array \n    p=[p_1,p_2,\n    \u2026, p_n]\n\nwhich contains every integer from \n    1\n to \n    n\n (inclusive) exactly once.\nFor example, \n    p=[4, 2, 6, 5, 3, 1]\n is a permutation of length \n    6\n.\nYou are given three integers \n    n\n, \n    a\n and \n    b\n, where \n    n\n is an\neven number. Print any permutation of length \n    n\n that the minimum among\nall its elements of the left half equals \n    a\n and the maximum among all its\nelements of the right half equals \n    b\n. Print -1 if no such permutation\nexists. Input The first line of the input contains one integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 1000\n), the number of test cases in the test. The following\n\n    t\n lines contain test case descriptions. Each test case description\ncontains three integers \n    n\n, \n    a\n, \n    b\n (\n    2 \n    \u2264 n \n    \u2264 100\n;\n\n    1 \n    \u2264 a,b \n    \u2264 n\n; \n    a \n     b\n), where \n    n\n is an even number\n(i.e. \n    n \n     2 = 0\n). Output For each test case, print a single line\ncontaining any suitable permutation. Print -1 no such permutation exists. If\nthere are multiple answers, print any of them. Example Input 7 6 2 5 6 1 3 6 4\n3 4 2 4 10 5 3 2 1 2 2 2 1 Output 4 2 6 5 3 1 -1 6 4 5 1 3 2 3 2 4 1 -1 1 2 2\n1\n\n",
        "cf_contest_id": 1612,
        "cf_index": "B",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "7\r\n6 2 5\r\n6 1 3\r\n6 4 3\r\n4 2 4\r\n10 5 3\r\n2 1 2\r\n2 2 1\r\n",
                "6 2 4 3 5 1\r\n-1\r\n6 5 4 3 2 1\r\n2 3 4 1\r\n-1\r\n1 2\r\n2 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n58 37 58\r\n",
                "-1\r\n"
            ]
        ]
    }
]