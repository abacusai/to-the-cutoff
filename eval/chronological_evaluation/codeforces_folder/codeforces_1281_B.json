[
    {
        "name": "Azamon Web Services",
        "description": "Your friend Jeff Zebos has been trying to run his new online company, but it's\nnot going very well. He's not getting a lot of sales on his website which he\ndecided to call Azamon. His big problem, you think, is that he's not ranking\nhigh enough on the search engines. If only he could rename his products to\nhave better names than his competitors, then he'll be at the top of the search\nresults and will be a millionaire. After doing some research, you find out\nthat search engines only sort their results lexicographically. If your friend\ncould rename his products to lexicographically smaller strings than his\ncompetitor's, then he'll be at the top of the rankings! To make your strategy\nless obvious to his competitors, you decide to swap no more than two letters\nof the product names. Please help Jeff to find improved names for his products\nthat are lexicographically smaller than his competitor's! Given the string\n\n    s\n representing Jeff's product name and the string \n    c\n representing\nhis competitor's product name, find a way to swap at most one pair of\ncharacters in \n    s\n (that is, find two distinct indices \n    i\n and \n    j\n\nand swap \n    s_i\n and \n    s_j\n) such that the resulting new name becomes\nstrictly lexicographically smaller than \n    c\n, or determine that it is\nimpossible. Note: String \n    a\n is strictly lexicographically smaller than\nstring \n    b\n if and only if one of the following holds: \n    a\n is a proper\nprefix of \n    b\n, that is, \n    a\n is a prefix of \n    b\n such that \n    a\n    \n    \u2260 b\n; There exists an integer \n    1 \n    \u2264 i \n    \u2264\n    min(|a|, |b|)\n\nsuch that \n    a_i < b_i\n and \n    a_j = b_j\n for \n    1 \n    \u2264 j < i\n. Input\nThe first line of input contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    1500\n) denoting the number of test cases. The next lines contain\ndescriptions of the test cases. Each test case consists of a single line\ncontaining two space-separated strings \n    s\n and \n    c\n (\n    2 \n    \u2264 |s|\n    \n    \u2264 5000, 1 \n    \u2264 |c| \n    \u2264 5000\n). The strings \n    s\n and \n    c\n\nconsists of uppercase English letters. It is guaranteed that the sum of\n\n    |s|\n in the input is at most \n    5000\n and the sum of the \n    |c|\n in\nthe input is at most \n    5000\n. Output For each test case, output a single\nline containing a single string, which is either the new name which is\nobtained after swapping no more than one pair of characters that is strictly\nlexicographically smaller than \n    c\n. In case there are many possible such\nstrings, you can output any of them; three dashes (the string \"\u2014\" without\nquotes) if it is impossible. Example Input 3 AZAMON APPLE AZAMON\nAAAAAAAAAAALIBABA APPLE BANANA Output AMAZON \u00ad\u2013 APPLE Note In the first test\ncase, it is possible to swap the second and the fourth letters of the string\nand the resulting string \"AMAZON\" is lexicographically smaller than \"APPLE\".\nIt is impossible to improve the product's name in the second test case and\nsatisfy all conditions. In the third test case, it is possible not to swap a\npair of characters. The name \"APPLE\" is lexicographically smaller than\n\"BANANA\". Note that there are other valid answers, e.g., \"APPEL\".\n\n",
        "cf_contest_id": 1281,
        "cf_index": "B",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\nAZAMON APPLE\r\nAZAMON AAAAAAAAAAALIBABA\r\nAPPLE BANANA\r\n",
                "AAZMON\r\n---\r\nAEPLP\r\n"
            ]
        ],
        "private_cases": []
    }
]