[
    {
        "name": "Pok\u00e9mon Army (easy version)",
        "description": "This is the easy version of the problem. The difference between the versions\nis that the easy version has no swap operations. You can make hacks only if\nall versions of the problem are solved. Pikachu is a cute and friendly pok\u00e9mon\nliving in the wild pikachu herd. But it has become known recently that\ninfamous team R wanted to steal all these pok\u00e9mon! Pok\u00e9mon trainer Andrew\ndecided to help Pikachu to build a pok\u00e9mon army to resist. First, Andrew\ncounted all the pok\u00e9mon \u2014 there were exactly \n    n\n pikachu. The strength of\nthe \n    i\n-th pok\u00e9mon is equal to \n    a_i\n, and all these numbers are\ndistinct. As an army, Andrew can choose any non-empty subsequence of pokemons.\nIn other words, Andrew chooses some array \n    b\n from \n    k\n indices such\nthat \n    1 \n    \u2264 b_1 < b_2 < \n    \u2026 < b_k \n    \u2264 n\n, and his army will\nconsist of pok\u00e9mons with forces \n    a_b_1, a_b_2, \n    \u2026, a_b_k\n. The\nstrength of the army is equal to the alternating sum of elements of the\nsubsequence; that is, \n    a_b_1 - a_b_2 + a_b_3 - a_b_4 + \n    \u2026\n.\nAndrew is experimenting with pok\u00e9mon order. He performs \n    q\n operations. In\n\n    i\n-th operation Andrew swaps \n    l_i\n-th and \n    r_i\n-th pok\u00e9mon. Note:\n\n    q=0\n in this version of the task. Andrew wants to know the maximal\nstregth of the army he can achieve with the initial pok\u00e9mon placement. He also\nneeds to know the maximal strength after each operation. Help Andrew and the\npok\u00e9mon, or team R will realize their tricky plan! Input Each test contains\nmultiple test cases. The first line contains one positive integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 10^3\n) denoting the number of test cases. Description of\nthe test cases follows. The first line of each test case contains two integers\n\n    n\n and \n    q\n (\n    1 \n    \u2264 n \n    \u2264 3 \n    \u00b7 10^5, q = 0\n) denoting the\nnumber of pok\u00e9mon and number of operations respectively. The second line\ncontains \n    n\n distinct positive integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1\n    \n    \u2264 a_i \n    \u2264 n\n) denoting the strengths of the pok\u00e9mon. \n    i\n-th of the\nlast \n    q\n lines contains two positive integers \n    l_i\n and \n    r_i\n\n(\n    1 \n    \u2264 l_i \n    \u2264 r_i \n    \u2264 n\n) denoting the indices of pok\u00e9mon that\nwere swapped in the \n    i\n-th operation. It is guaranteed that the sum of\n\n    n\n over all test cases does not exceed \n    3 \n    \u00b7 10^5\n, and the sum\nof \n    q\n over all test cases does not exceed \n    3 \n    \u00b7 10^5\n. Output\nFor each test case, print \n    q+1\n integers: the maximal strength of army\nbefore the swaps and after each swap. Example Input 3 3 0 1 3 2 2 0 1 2 7 0 1\n2 5 4 3 6 7 Output 3 2 9 Note In third test case we can build an army in such\nway: [1 2 5 4 3 6 7], its strength will be \n    5\u22123+7=9\n.\n\n",
        "cf_contest_id": 1420,
        "cf_index": "C1",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dp",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3 0\r\n1 3 2\r\n2 0\r\n1 2\r\n7 0\r\n1 2 5 4 3 6 7\r\n",
                "3\r\n2\r\n9\r\n"
            ]
        ],
        "private_cases": []
    }
]