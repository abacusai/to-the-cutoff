[
    {
        "name": "Shinju and the Lost Permutation",
        "description": "Shinju loves permutations very much! Today, she has borrowed a permutation\n\n    p\n from Juju to play with. The \n    i\n-th cyclic shift of a permutation\n\n    p\n is a transformation on the permutation such that \n    p = [p_1, p_2,\n    \n    \u2026, p_n]\n will now become \n    p = [p_n-i+1, \n    \u2026, p_n, p_1,p_2,\n    \n    \u2026, p_n-i]\n. Let's define the power of permutation \n    p\n as the\nnumber of distinct elements in the prefix maximums array \n    b\n of the\npermutation. The prefix maximums array \n    b\n is the array of length \n    n\n\nsuch that \n    b_i = \n    max(p_1, p_2, \n    \u2026, p_i)\n. For example, the power\nof \n    [1, 2, 5, 4, 6, 3]\n is \n    4\n since \n    b=[1,2,5,5,6,6]\n and there\nare \n    4\n distinct elements in \n    b\n. Unfortunately, Shinju has lost the\npermutation \n    p\n! The only information she remembers is an array \n    c\n,\nwhere \n    c_i\n is the power of the \n    (i-1)\n-th cyclic shift of the\npermutation \n    p\n. She's also not confident that she remembers it correctly,\nso she wants to know if her memory is good enough. Given the array \n    c\n,\ndetermine if there exists a permutation \n    p\n that is consistent with\n\n    c\n. You do not have to construct the permutation \n    p\n. A permutation\nis an array consisting of \n    n\n distinct integers from \n    1\n to \n    n\n in\narbitrary order. For example, \n    [2,3,1,5,4]\n is a permutation, but\n\n    [1,2,2]\n is not a permutation (\n    2\n appears twice in the array) and\n\n    [1,3, 4]\n is also not a permutation (\n    n=3\n but there is \n    4\n in\nthe array). Input The input consists of multiple test cases. The first line\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 5 \n    \u00b7 10^3\n) \u2014\nthe number of test cases. The first line of each test case contains an integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n). The second line of each test case\ncontains \n    n\n integers \n    c_1,c_2,\n    \u2026,c_n\n (\n    1 \n    \u2264 c_i \n    \u2264\n    n\n). It is guaranteed that the sum of \n    n\n over all test cases does not\nexceed \n    10^5\n. Output For each test case, print \"YES\" if there is a\npermutation \n    p\n exists that satisfies the array \n    c\n, and \"NO\"\notherwise. You can output \"YES\" and \"NO\" in any case (for example, strings\n\"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive response).\nExample Input 6 1 1 2 1 2 2 2 2 6 1 2 4 6 3 5 6 2 3 1 2 3 4 3 3 2 1 Output YES\nYES NO NO YES NO Note In the first test case, the permutation \n    [1]\n\nsatisfies the array \n    c\n. In the second test case, the permutation\n\n    [2,1]\n satisfies the array \n    c\n. In the fifth test case, the\npermutation \n    [5, 1, 2, 4, 6, 3]\n satisfies the array \n    c\n. Let's see\nwhy this is true. The zeroth cyclic shift of \n    p\n is \n    [5, 1, 2, 4, 6,\n    3]\n. Its power is \n    2\n since \n    b = [5, 5, 5, 5, 6, 6]\n and there are\n\n    2\n distinct elements \u2014 \n    5\n and \n    6\n. The first cyclic shift of\n\n    p\n is \n    [3, 5, 1, 2, 4, 6]\n. Its power is \n    3\n since\n\n    b=[3,5,5,5,5,6]\n. The second cyclic shift of \n    p\n is \n    [6, 3, 5, 1,\n    2, 4]\n. Its power is \n    1\n since \n    b=[6,6,6,6,6,6]\n. The third cyclic\nshift of \n    p\n is \n    [4, 6, 3, 5, 1, 2]\n. Its power is \n    2\n since\n\n    b=[4,6,6,6,6,6]\n. The fourth cyclic shift of \n    p\n is \n    [2, 4, 6, 3,\n    5, 1]\n. Its power is \n    3\n since \n    b = [2, 4, 6, 6, 6, 6]\n. The fifth\ncyclic shift of \n    p\n is \n    [1, 2, 4, 6, 3, 5]\n. Its power is \n    4\n\nsince \n    b = [1, 2, 4, 6, 6, 6]\n. Therefore, \n    c = [2, 3, 1, 2, 3, 4]\n.\nIn the third, fourth, and sixth testcases, we can show that there is no\npermutation that satisfies array \n    c\n.\n\n",
        "cf_contest_id": 1658,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n1\r\n1\r\n2\r\n1 2\r\n2\r\n2 2\r\n6\r\n1 2 4 6 3 5\r\n6\r\n2 3 1 2 3 4\r\n3\r\n3 2 1\r\n",
                "YES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\n"
            ]
        ],
        "private_cases": []
    }
]