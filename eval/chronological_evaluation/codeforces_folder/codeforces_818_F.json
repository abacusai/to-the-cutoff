[
    {
        "name": "Level Generation",
        "description": "Ivan is developing his own computer game. Now he tries to create some levels\nfor his game. But firstly for each level he needs to draw a graph representing\nthe structure of the level. Ivan decided that there should be exactly ni\nvertices in the graph representing level i, and the edges have to be\nbidirectional. When constructing the graph, Ivan is interested in special\nedges called bridges. An edge between two vertices u and v is called a bridge\nif this edge belongs to every path between u and v (and these vertices will\nbelong to different connected components if we delete this edge). For each\nlevel Ivan wants to construct a graph where at least half of the edges are\nbridges. He also wants to maximize the number of edges in each constructed\ngraph. So the task Ivan gave you is: given q numbers n1, n2, ..., nq, for each\ni tell the maximum number of edges in a graph with ni vertices, if at least\nhalf of the edges are bridges. Note that the graphs cannot contain multiple\nedges or self-loops. Input The first line of input file contains a positive\ninteger q (1 \u2264 q \u2264 100 000) \u2014 the number of graphs Ivan needs to construct.\nThen q lines follow, i-th line contains one positive integer ni (1 \u2264 ni \u2264\n2\u00b710^9) \u2014 the number of vertices in i-th graph. Note that in hacks you have to\nuse q = 1. Output Output q numbers, i-th of them must be equal to the maximum\nnumber of edges in i-th graph. Example Input 3 3 4 6 Output 2 3 6 Note In the\nfirst example it is possible to construct these graphs: 1 - 2, 1 - 3; 1 - 2, 1\n- 3, 2 - 4; 1 - 2, 1 - 3, 2 - 3, 1 - 4, 2 - 5, 3 - 6.\n\n",
        "cf_contest_id": 818,
        "cf_index": "F",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "math",
            "ternary search"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3\r\n4\r\n6\r\n",
                "2\r\n3\r\n6\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n",
                "0\r\n1\r\n2\r\n3\r\n4\r\n6\r\n7\r\n8\r\n10\r\n12\r\n"
            ],
            [
                "1\r\n212055293\r\n",
                "424069398\r\n"
            ],
            [
                "1\r\n508427854\r\n",
                "1016791932\r\n"
            ],
            [
                "1\r\n398561321\r\n",
                "797066176\r\n"
            ],
            [
                "1\r\n322647200\r\n",
                "645243594\r\n"
            ],
            [
                "1\r\n827388716\r\n",
                "1654696074\r\n"
            ],
            [
                "1\r\n596007358\r\n",
                "1191945664\r\n"
            ]
        ]
    }
]