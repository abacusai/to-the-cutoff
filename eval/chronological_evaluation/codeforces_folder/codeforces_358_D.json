[
    {
        "name": "Dima and Hares",
        "description": "Dima liked the present he got from Inna very much. He liked the present he got\nfrom Seryozha even more. Dima felt so grateful to Inna about the present that\nhe decided to buy her n hares. Inna was very happy. She lined up the hares in\na row, numbered them from 1 to n from left to right and started feeding them\nwith carrots. Inna was determined to feed each hare exactly once. But in what\norder should she feed them? Inna noticed that each hare radiates joy when she\nfeeds it. And the joy of the specific hare depends on whether Inna fed its\nadjacent hares before feeding it. Inna knows how much joy a hare radiates if\nit eats when either both of his adjacent hares are hungry, or one of the\nadjacent hares is full (that is, has been fed), or both of the adjacent hares\nare full. Please note that hares number 1 and n don't have a left and a right-\nadjacent hare correspondingly, so they can never have two full adjacent hares.\nHelp Inna maximize the total joy the hares radiate. :) Input The first line of\nthe input contains integer n (1 \u2264 n \u2264 3000) \u2014 the number of hares. Then three\nlines follow, each line has n integers. The first line contains integers a1 a2\n... an. The second line contains b1, b2, ..., bn. The third line contains c1,\nc2, ..., cn. The following limits are fulfilled: 0 \u2264 ai, bi, ci \u2264 10^5. Number\nai in the first line shows the joy that hare number i gets if his adjacent\nhares are both hungry. Number bi in the second line shows the joy that hare\nnumber i radiates if he has exactly one full adjacent hare. Number \u0441i in the\nthird line shows the joy that hare number i radiates if both his adjacent\nhares are full. Output In a single line, print the maximum possible total joy\nof the hares Inna can get by feeding them. Examples Input 4 1 2 3 4 4 3 2 1 0\n1 1 0 Output 13 Input 7 8 5 7 6 1 8 9 2 7 9 5 4 3 1 2 3 3 4 1 1 3 Output 44\nInput 3 1 1 1 1 2 1 1 1 1 Output 4\n\n",
        "cf_contest_id": 358,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 2 3 4\r\n4 3 2 1\r\n0 1 1 0\r\n",
                "13\r\n"
            ],
            [
                "7\r\n8 5 7 6 1 8 9\r\n2 7 9 5 4 3 1\r\n2 3 3 4 1 1 3\r\n",
                "44\r\n"
            ],
            [
                "3\r\n1 1 1\r\n1 2 1\r\n1 1 1\r\n",
                "4\r\n"
            ]
        ],
        "private_cases": [
            [
                "7\r\n1 3 8 9 3 4 4\r\n6 0 6 6 1 8 4\r\n9 6 3 7 8 8 2\r\n",
                "42\r\n"
            ],
            [
                "2\r\n3 5\r\n9 8\r\n4 0\r\n",
                "14\r\n"
            ],
            [
                "7\r\n3 6 1 5 4 2 0\r\n9 7 3 7 2 6 0\r\n1 6 5 7 5 4 1\r\n",
                "37\r\n"
            ],
            [
                "1\r\n0\r\n1\r\n4\r\n",
                "0\r\n"
            ],
            [
                "1\r\n7\r\n1\r\n7\r\n",
                "7\r\n"
            ],
            [
                "8\r\n7 3 3 5 9 9 8 1\r\n8 2 6 6 0 3 8 0\r\n1 2 5 0 9 4 7 8\r\n",
                "49\r\n"
            ],
            [
                "6\r\n1 2 0 1 6 4\r\n0 6 1 8 9 8\r\n4 1 4 3 9 8\r\n",
                "33\r\n"
            ],
            [
                "1\r\n0\r\n0\r\n0\r\n",
                "0\r\n"
            ],
            [
                "1\r\n100000\r\n100000\r\n100000\r\n",
                "100000\r\n"
            ]
        ]
    }
]