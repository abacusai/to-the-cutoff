[
    {
        "name": "Comparing Strings",
        "description": "Some dwarves that are finishing the StUDY (State University for Dwarven\nYoungsters) Bachelor courses, have been told \"no genome, no degree\". That\nmeans that all dwarves should write a thesis on genome. Dwarven genome is far\nfrom simple. It is represented by a string that consists of lowercase Latin\nletters. Dwarf Misha has already chosen the subject for his thesis:\ndetermining by two dwarven genomes, whether they belong to the same race. Two\ndwarves belong to the same race if we can swap two characters in the first\ndwarf's genome and get the second dwarf's genome as a result. Help Dwarf Misha\nand find out whether two gnomes belong to the same race or not. Input The\nfirst line contains the first dwarf's genome: a non-empty string, consisting\nof lowercase Latin letters. The second line contains the second dwarf's\ngenome: a non-empty string, consisting of lowercase Latin letters. The number\nof letters in each genome doesn't exceed 10^5. It is guaranteed that the\nstrings that correspond to the genomes are different. The given genomes may\nhave different length. Output Print \"YES\", if the dwarves belong to the same\nrace. Otherwise, print \"NO\". Examples Input ab ba Output YES Input aa ab\nOutput NO Note First example: you can simply swap two letters in string \"ab\".\nSo we get \"ba\". Second example: we can't change string \"aa\" into string \"ab\",\nbecause \"aa\" does not contain letter \"b\".\n\n",
        "cf_contest_id": 186,
        "cf_index": "A",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "ab\r\nba\r\n",
                "YES\r\n"
            ],
            [
                "aa\r\nab\r\n",
                "NO\r\n"
            ]
        ],
        "private_cases": [
            [
                "a\r\nza\r\n",
                "NO\r\n"
            ],
            [
                "vvea\r\nvvae\r\n",
                "YES\r\n"
            ],
            [
                "rtfabanpc\r\natfabrnpc\r\n",
                "YES\r\n"
            ],
            [
                "mt\r\ntm\r\n",
                "YES\r\n"
            ],
            [
                "qxolmbkkt\r\naovlajmlf\r\n",
                "NO\r\n"
            ],
            [
                "b\r\ng\r\n",
                "NO\r\n"
            ],
            [
                "ab\r\naba\r\n",
                "NO\r\n"
            ],
            [
                "ba\r\na\r\n",
                "NO\r\n"
            ],
            [
                "a\r\nab\r\n",
                "NO\r\n"
            ],
            [
                "a\r\naa\r\n",
                "NO\r\n"
            ],
            [
                "a\r\nz\r\n",
                "NO\r\n"
            ],
            [
                "aabb\r\nbbaa\r\n",
                "NO\r\n"
            ],
            [
                "ab\r\nbd\r\n",
                "NO\r\n"
            ],
            [
                "bac\r\ndae\r\n",
                "NO\r\n"
            ],
            [
                "abc\r\nakl\r\n",
                "NO\r\n"
            ],
            [
                "cb\r\naa\r\n",
                "NO\r\n"
            ],
            [
                "abaab\r\naabba\r\n",
                "NO\r\n"
            ],
            [
                "aab\r\naaa\r\n",
                "NO\r\n"
            ],
            [
                "abcde\r\nedcba\r\n",
                "NO\r\n"
            ],
            [
                "abab\r\nbaba\r\n",
                "NO\r\n"
            ],
            [
                "ab\r\nbac\r\n",
                "NO\r\n"
            ],
            [
                "abcd\r\naqcb\r\n",
                "NO\r\n"
            ],
            [
                "abc\r\nbad\r\n",
                "NO\r\n"
            ],
            [
                "ab\r\nca\r\n",
                "NO\r\n"
            ],
            [
                "abc\r\nab\r\n",
                "NO\r\n"
            ],
            [
                "ab\r\nbae\r\n",
                "NO\r\n"
            ],
            [
                "aaaabcccca\r\naaaadccccb\r\n",
                "NO\r\n"
            ],
            [
                "acaa\r\nabca\r\n",
                "NO\r\n"
            ],
            [
                "aba\r\naab\r\n",
                "YES\r\n"
            ],
            [
                "ah\r\nla\r\n",
                "NO\r\n"
            ],
            [
                "aab\r\naa\r\n",
                "NO\r\n"
            ],
            [
                "abab\r\nabcd\r\n",
                "NO\r\n"
            ],
            [
                "ed\r\nab\r\n",
                "NO\r\n"
            ]
        ]
    }
]