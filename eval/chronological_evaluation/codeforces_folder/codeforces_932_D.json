[
    {
        "name": "Tree",
        "description": "You are given a node of the tree with index 1 and with weight 0. Let cnt be\nthe number of nodes in the tree at any instant (initially, cnt is set to 1).\nSupport Q queries of following two types: Add a new node (index cnt + 1) with\nweight W and add edge between node R and this node. Output the maximum length\nof sequence of nodes which starts with R. Every node in the sequence is an\nancestor of its predecessor. Sum of weight of nodes in sequence does not\nexceed X. For some nodes i, j that are consecutive in the sequence if i is an\nancestor of j then w[i] \u2265 w[j] and there should not exist a node k on simple\npath from i to j such that w[k] \u2265 w[j] The tree is rooted at node 1 at any\ninstant. Note that the queries are given in a modified way. Input First line\ncontaining the number of queries Q (1 \u2264 Q \u2264 400000). Let last be the answer\nfor previous query of type 2 (initially last equals 0). Each of the next Q\nlines contains a query of following form: 1 p q (1 \u2264 p, q \u2264 10^18): This is\nquery of first type where and . It is guaranteed that 1 \u2264 R \u2264 cnt and 0 \u2264 W \u2264\n10^9. 2 p q (1 \u2264 p, q \u2264 10^18): This is query of second type where and . It is\nguaranteed that 1 \u2264 R \u2264 cnt and 0 \u2264 X \u2264 10^15. denotes bitwise XOR of a and b.\nIt is guaranteed that at least one query of type 2 exists. Output Output the\nanswer to each query of second type in separate line. Examples Input 6 1 1 1 2\n2 0 2 2 1 1 3 0 2 2 0 2 2 2 Output 0 1 1 2 Input 6 1 1 0 2 2 0 2 0 3 1 0 2 2 1\n3 2 1 6 Output 2 2 3 2 Input 7 1 1 2 1 2 3 2 3 3 1 0 0 1 5 1 2 5 0 2 4 0\nOutput 1 1 2 Input 7 1 1 3 1 2 3 2 3 4 1 2 0 1 5 3 2 5 5 2 7 22 Output 1 2 3\nNote In the first example, last = 0 \u00ad Query 1: 1 1 1, Node 2 with weight 1 is\nadded to node 1. \u00ad Query 2: 2 2 0, No sequence of nodes starting at 2 has\nweight less than or equal to 0. last = 0 \u00ad Query 3: 2 2 1, Answer is 1 as\nsequence will be 2. last = 1 \u00ad Query 4: 1 2 1, Node 3 with weight 1 is\nadded to node 2. \u00ad Query 5: 2 3 1, Answer is 1 as sequence will be 3. Node\n2 cannot be added as sum of weights cannot be greater than 1. last = 1 \u00ad\nQuery 6: 2 3 3, Answer is 2 as sequence will be 3, 2. last = 2\n\n",
        "cf_contest_id": 932,
        "cf_index": "D",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dp",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "6\r\n1 1 1\r\n2 2 0\r\n2 2 1\r\n1 3 0\r\n2 2 0\r\n2 2 2\r\n",
                "0\r\n1\r\n1\r\n2\r\n"
            ],
            [
                "6\r\n1 1 0\r\n2 2 0\r\n2 0 3\r\n1 0 2\r\n2 1 3\r\n2 1 6\r\n",
                "2\r\n2\r\n3\r\n2\r\n"
            ],
            [
                "7\r\n1 1 2\r\n1 2 3\r\n2 3 3\r\n1 0 0\r\n1 5 1\r\n2 5 0\r\n2 4 0\r\n",
                "1\r\n1\r\n2\r\n"
            ],
            [
                "7\r\n1 1 3\r\n1 2 3\r\n2 3 4\r\n1 2 0\r\n1 5 3\r\n2 5 5\r\n2 7 22\r\n",
                "1\r\n2\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n2 1 763067550989283\r\n1 0 404066435\r\n2 0 350165872150325\r\n1 0 831080886\r\n2 0 47563543064530\r\n1 3 609986253\r\n2 0 151075754777266\r\n1 3 606995641\r\n2 4 527728826230421\r\n1 3 681313421\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "10\r\n2 1 633078426977137\r\n1 0 800912454\r\n2 3 727618790065827\r\n1 3 948480822\r\n2 3 585770542458810\r\n1 3 133293607\r\n2 3 130260797368909\r\n1 5 60738455\r\n2 3 745688604384907\r\n1 3 913945672\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n"
            ]
        ]
    }
]