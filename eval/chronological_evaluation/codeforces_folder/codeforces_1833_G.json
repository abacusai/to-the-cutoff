[
    {
        "name": "Ksyusha and Chinchilla",
        "description": "Ksyusha has a pet chinchilla, a tree on \n    n\n vertices and huge scissors. A\ntree is a connected graph without cycles. During a boring physics lesson\nKsyusha thought about how to entertain her pet. Chinchillas like to play with\nbranches. A branch is a tree of \n    3\n vertices. The branch looks like this.\nA cut is the removal of some (not yet cut) edge in the tree. Ksyusha has\nplenty of free time, so she can afford to make enough cuts so that the tree\nsplits into branches. In other words, after several (possibly zero) cuts, each\nvertex must belong to exactly one branch. Help Ksyusha choose the edges to be\ncut or tell that it is impossible. Input The first line contains a single\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 number of testcases. The first\nline of each testcase contains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n) \u2014 the number of vertices in the tree. The next \n    n - 1\n\nrows of each testcase contain integers \n    v_i\n and \n    u_i\n (\n    1 \n    \u2264\n    v_i, u_i \n    \u2264 n\n) \u2014 the numbers of vertices that the \n    i\n-th edge\nconnects. It is guaranteed that this set of edges forms a tree. It is also\nguaranteed that the sum of \n    n\n over all testcases does not exceed \n    2\n    \n    \u00b7 10^5\n. Output Print the answer for each testcase. If the desired way\nto cut the tree does not exist, print \n    -1\n. Otherwise, print an integer\n\n    k\n \u2014 the number of edges to be cut. In the next line, print \n    k\n\ndifferent integers \n    e_i\n (\n    1 \n    \u2264 e_i < n\n) \u2014 numbers of the edges to\nbe cut. If \n    k = 0\n, print an empty string instead. If there are several\nsolutions, you can print any. Examples Input 4 9 1 2 4 3 7 9 5 4 4 6 3 2 8 7 1\n7 6 1 2 1 3 4 3 1 5 6 1 6 1 2 3 2 3 4 4 5 6 5 5 1 3 5 3 5 2 3 4 Output 2 2 8\n-1 1 3 -1 Input 4 2 1 2 3 1 2 3 1 6 1 2 3 1 3 4 3 5 6 1 9 2 6 6 9 9 1 9 7 1 8\n7 3 8 5 4 7 Output -1 0 1 2 2 4 3 Note The first testcase in first test.\n\n",
        "cf_contest_id": 1833,
        "cf_index": "G",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "dsu",
            "greedy",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n9\r\n1 2\r\n4 3\r\n7 9\r\n5 4\r\n4 6\r\n3 2\r\n8 7\r\n1 7\r\n6\r\n1 2\r\n1 3\r\n4 3\r\n1 5\r\n6 1\r\n6\r\n1 2\r\n3 2\r\n3 4\r\n4 5\r\n6 5\r\n5\r\n1 3\r\n5 3\r\n5 2\r\n3 4\r\n",
                "2\r\n2 8 \r\n-1\r\n1\r\n3 \r\n-1\r\n"
            ],
            [
                "4\r\n2\r\n1 2\r\n3\r\n1 2\r\n3 1\r\n6\r\n1 2\r\n3 1\r\n3 4\r\n3 5\r\n6 1\r\n9\r\n2 6\r\n6 9\r\n9 1\r\n9 7\r\n1 8\r\n7 3\r\n8 5\r\n4 7\r\n",
                "-1\r\n0\r\n\r\n1\r\n2 \r\n2\r\n4 3 \r\n"
            ]
        ],
        "private_cases": []
    }
]