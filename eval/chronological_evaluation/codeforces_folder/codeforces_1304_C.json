[
    {
        "name": "Air Conditioner",
        "description": "Gildong owns a bulgogi restaurant. The restaurant has a lot of customers, so\nmany of them like to make a reservation before visiting it. Gildong tries so\nhard to satisfy the customers that he even memorized all customers' preferred\ntemperature ranges! Looking through the reservation list, he wants to satisfy\nall customers by controlling the temperature of the restaurant. The restaurant\nhas an air conditioner that has 3 states: off, heating, and cooling. When it's\noff, the restaurant's temperature remains the same. When it's heating, the\ntemperature increases by 1 in one minute. Lastly, when it's cooling, the\ntemperature decreases by 1 in one minute. Gildong can change the state as many\ntimes as he wants, at any integer minutes. The air conditioner is off\ninitially. Each customer is characterized by three values: \n    t_i\n \u2014 the\ntime (in minutes) when the \n    i\n-th customer visits the restaurant,\n\n    l_i\n \u2014 the lower bound of their preferred temperature range, and\n\n    h_i\n \u2014 the upper bound of their preferred temperature range. A customer\nis satisfied if the temperature is within the preferred range at the instant\nthey visit the restaurant. Formally, the \n    i\n-th customer is satisfied if\nand only if the temperature is between \n    l_i\n and \n    h_i\n (inclusive) in\nthe \n    t_i\n-th minute. Given the initial temperature, the list of reserved\ncustomers' visit times and their preferred temperature ranges, you're going to\nhelp him find if it's possible to satisfy all customers. Input Each test\ncontains one or more test cases. The first line contains the number of test\ncases \n    q\n (\n    1 \n    \u2264 q \n    \u2264 500\n). Description of the test cases\nfollows. The first line of each test case contains two integers \n    n\n and\n\n    m\n (\n    1 \n    \u2264 n \n    \u2264 100\n, \n    -10^9 \n    \u2264 m \n    \u2264 10^9\n), where\n\n    n\n is the number of reserved customers and \n    m\n is the initial\ntemperature of the restaurant. Next, \n    n\n lines follow. The \n    i\n-th line\nof them contains three integers \n    t_i\n, \n    l_i\n, and \n    h_i\n (\n    1\n    \n    \u2264 t_i \n    \u2264 10^9\n, \n    -10^9 \n    \u2264 l_i \n    \u2264 h_i \n    \u2264 10^9\n), where\n\n    t_i\n is the time when the \n    i\n-th customer visits, \n    l_i\n is the\nlower bound of their preferred temperature range, and \n    h_i\n is the upper\nbound of their preferred temperature range. The preferred temperature ranges\nare inclusive. The customers are given in non-decreasing order of their visit\ntime, and the current time is \n    0\n. Output For each test case, print \"YES\"\nif it is possible to satisfy all customers. Otherwise, print \"NO\". You can\nprint each letter in any case (upper or lower). Example Input 4 3 0 5 1 2 7 3\n5 10 -1 0 2 12 5 7 10 10 16 20 3 -100 100 0 0 100 -50 50 200 100 100 1 100 99\n-100 0 Output YES NO YES NO Note In the first case, Gildong can control the\nair conditioner to satisfy all customers in the following way: At \n    0\n-th\nminute, change the state to heating (the temperature is 0). At \n    2\n-nd\nminute, change the state to off (the temperature is 2). At \n    5\n-th minute,\nchange the state to heating (the temperature is 2, the \n    1\n-st customer is\nsatisfied). At \n    6\n-th minute, change the state to off (the temperature is\n3). At \n    7\n-th minute, change the state to cooling (the temperature is 3,\nthe \n    2\n-nd customer is satisfied). At \n    10\n-th minute, the temperature\nwill be 0, which satisfies the last customer. In the third case, Gildong can\nchange the state to heating at \n    0\n-th minute and leave it be. Then all\ncustomers will be satisfied. Note that the \n    1\n-st customer's visit time\nequals the \n    2\n-nd customer's visit time. In the second and the fourth\ncase, Gildong has to make at least one customer unsatisfied.\n\n",
        "cf_contest_id": 1304,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "greedy",
            "implementation",
            "sortings",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3 0\r\n5 1 2\r\n7 3 5\r\n10 -1 0\r\n2 12\r\n5 7 10\r\n10 16 20\r\n3 -100\r\n100 0 0\r\n100 -50 50\r\n200 100 100\r\n1 100\r\n99 -100 0\r\n",
                "YES\r\nNO\r\nYES\r\nNO\r\n"
            ]
        ],
        "private_cases": []
    }
]