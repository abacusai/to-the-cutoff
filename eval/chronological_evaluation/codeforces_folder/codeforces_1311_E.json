[
    {
        "name": "Construct the Binary Tree",
        "description": "You are given two integers \n    n\n and \n    d\n. You need to construct a rooted\nbinary tree consisting of \n    n\n vertices with a root at the vertex \n    1\n\nand the sum of depths of all vertices equals to \n    d\n. A tree is a connected\ngraph without cycles. A rooted tree has a special vertex called the root. A\nparent of a vertex \n    v\n is the last different from \n    v\n vertex on the\npath from the root to the vertex \n    v\n. The depth of the vertex \n    v\n is\nthe length of the path from the root to the vertex \n    v\n. Children of vertex\n\n    v\n are all vertices for which \n    v\n is the parent. The binary tree is\nsuch a tree that no vertex has more than \n    2\n children. You have to answer\n\n    t\n independent test cases. Input The first line of the input contains one\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of test cases. The\nonly line of each test case contains two integers \n    n\n and \n    d\n (\n    2\n    \n    \u2264 n, d \n    \u2264 5000\n) \u2014 the number of vertices in the tree and the\nrequired sum of depths of all vertices. It is guaranteed that the sum of\n\n    n\n and the sum of \n    d\n both does not exceed \n    5000\n (\n    \u2211 n\n    \n    \u2264 5000, \n    \u2211 d \n    \u2264 5000\n). Output For each test case, print the\nanswer. If it is impossible to construct such a tree, print \"NO\" (without\nquotes) in the first line. Otherwise, print \"YES\" in the first line. Then\nprint \n    n-1\n integers \n    p_2, p_3, \n    \u2026, p_n\n in the second line,\nwhere \n    p_i\n is the parent of the vertex \n    i\n. Note that the sequence of\nparents you print should describe some binary tree. Example Input 3 5 7 10 19\n10 18 Output YES 1 2 1 3 YES 1 2 3 3 9 9 2 1 6 NO Note Pictures corresponding\nto the first and the second test cases of the example:\n\n",
        "cf_contest_id": 1311,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n5 7\r\n10 19\r\n10 18\r\n",
                "YES\r\n1 1 2 4 \r\nYES\r\n1 1 2 2 3 3 4 4 5 \r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n5000 5000\r\n",
                "NO\r\n"
            ]
        ]
    }
]