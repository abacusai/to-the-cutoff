[
    {
        "name": "Irreducible Anagrams",
        "description": "Let's call two strings \n    s\n and \n    t\n anagrams of each other if it is\npossible to rearrange symbols in the string \n    s\n to get a string, equal to\n\n    t\n. Let's consider two strings \n    s\n and \n    t\n which are anagrams of\neach other. We say that \n    t\n is a reducible anagram of \n    s\n if there\nexists an integer \n    k \n    \u2265 2\n and \n    2k\n non-empty strings \n    s_1, t_1,\n    s_2, t_2, \n    \u2026, s_k, t_k\n that satisfy the following conditions: If we\nwrite the strings \n    s_1, s_2, \n    \u2026, s_k\n in order, the resulting string\nwill be equal to \n    s\n; If we write the strings \n    t_1, t_2, \n    \u2026, t_k\n\nin order, the resulting string will be equal to \n    t\n; For all integers\n\n    i\n between \n    1\n and \n    k\n inclusive, \n    s_i\n and \n    t_i\n are\nanagrams of each other. If such strings don't exist, then \n    t\n is said to\nbe an irreducible anagram of \n    s\n. Note that these notions are only defined\nwhen \n    s\n and \n    t\n are anagrams of each other. For example, consider the\nstring \n    s =\n \"gamegame\". Then the string \n    t =\n \"megamage\" is a\nreducible anagram of \n    s\n, we may choose for example \n    s_1 =\n \"game\",\n\n    s_2 =\n \"gam\", \n    s_3 =\n \"e\" and \n    t_1 =\n \"mega\", \n    t_2 =\n\n\"mag\", \n    t_3 =\n \"e\": On the other hand, we can prove that \n    t =\n\n\"memegaga\" is an irreducible anagram of \n    s\n. You will be given a string\n\n    s\n and \n    q\n queries, represented by two integers \n    1 \n    \u2264 l \n    \u2264 r\n    \n    \u2264 |s|\n (where \n    |s|\n is equal to the length of the string \n    s\n).\nFor each query, you should find if the substring of \n    s\n formed by\ncharacters from the \n    l\n-th to the \n    r\n-th has at least one irreducible\nanagram. Input The first line contains a string \n    s\n, consisting of\nlowercase English characters (\n    1 \n    \u2264 |s| \n    \u2264 2 \n    \u00b7 10^5\n). The\nsecond line contains a single integer \n    q\n (\n    1 \n    \u2264 q \n    \u2264 10^5\n) \u2014\nthe number of queries. Each of the following \n    q\n lines contain two\nintegers \n    l\n and \n    r\n (\n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 |s|\n), representing\na query for the substring of \n    s\n formed by characters from the \n    l\n-th\nto the \n    r\n-th. Output For each query, print a single line containing \"Yes\"\n(without quotes) if the corresponding substring has at least one irreducible\nanagram, and a single line containing \"No\" (without quotes) otherwise.\nExamples Input aaaaa 3 1 1 2 4 5 5 Output Yes No Yes Input aabbbbbbc 6 1 2 2 4\n2 2 1 9 5 7 3 5 Output No Yes Yes Yes No No Note In the first sample, in the\nfirst and third queries, the substring is \"a\", which has itself as an\nirreducible anagram since two or more non-empty strings cannot be put together\nto obtain \"a\". On the other hand, in the second query, the substring is \"aaa\",\nwhich has no irreducible anagrams: its only anagram is itself, and we may\nchoose \n    s_1 =\n \"a\", \n    s_2 =\n \"aa\", \n    t_1 =\n \"a\", \n    t_2 =\n\n\"aa\" to show that it is a reducible anagram. In the second query of the second\nsample, the substring is \"abb\", which has, for example, \"bba\" as an\nirreducible anagram.\n\n",
        "cf_contest_id": 1290,
        "cf_index": "B",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "constructive algorithms",
            "data structures",
            "strings",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "aaaaa\r\n3\r\n1 1\r\n2 4\r\n5 5\r\n",
                "Yes\r\nNo\r\nYes\r\n"
            ],
            [
                "aabbbbbbc\r\n6\r\n1 2\r\n2 4\r\n2 2\r\n1 9\r\n5 7\r\n3 5\r\n",
                "No\r\nYes\r\nYes\r\nYes\r\nNo\r\nNo\r\n"
            ]
        ],
        "private_cases": [
            [
                "f\r\n1\r\n1 1\r\n",
                "Yes\r\n"
            ],
            [
                "abca\r\n1\r\n1 4\r\n",
                "Yes\r\n"
            ]
        ]
    }
]