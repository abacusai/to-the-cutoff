[
    {
        "name": "Wrong Subtraction",
        "description": "Little girl Tanya is learning how to decrease a number by one, but she does it\nwrong with a number consisting of two or more digits. Tanya subtracts one from\na number by the following algorithm: if the last digit of the number is non-\nzero, she decreases the number by one; if the last digit of the number is\nzero, she divides the number by 10 (i.e. removes the last digit). You are\ngiven an integer number \n    n\n. Tanya will subtract one from it \n    k\n\ntimes. Your task is to print the result after all \n    k\n subtractions. It is\nguaranteed that the result will be positive integer number. Input The first\nline of the input contains two integer numbers \n    n\n and \n    k\n (\n    2 \n    \u2264\n    n \n    \u2264 10^9\n, \n    1 \n    \u2264 k \n    \u2264 50\n) \u2014 the number from which Tanya will\nsubtract and the number of subtractions correspondingly. Output Print one\ninteger number \u2014 the result of the decreasing \n    n\n by one \n    k\n times. It\nis guaranteed that the result will be positive integer number. Examples Input\n512 4 Output 50 Input 1000000000 9 Output 1 Note The first example corresponds\nto the following sequence: \n    512 \n    \u2192 511 \n    \u2192 510\n    \n    \u2192 51 \n    \u2192 50\n.\n\n",
        "cf_contest_id": 977,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "512 4\r\n",
                "50\r\n"
            ],
            [
                "1000000000 9\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "131203 11\r\n",
                "12\r\n"
            ],
            [
                "999999999 50\r\n",
                "9999\r\n"
            ],
            [
                "999999999 49\r\n",
                "99990\r\n"
            ],
            [
                "131203 9\r\n",
                "130\r\n"
            ],
            [
                "900000000 16\r\n",
                "1\r\n"
            ],
            [
                "909090909 50\r\n",
                "3\r\n"
            ],
            [
                "1001 2\r\n",
                "100\r\n"
            ],
            [
                "5 2\r\n",
                "3\r\n"
            ],
            [
                "2 1\r\n",
                "1\r\n"
            ]
        ]
    }
]