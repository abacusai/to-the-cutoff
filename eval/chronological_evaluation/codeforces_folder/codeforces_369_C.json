[
    {
        "name": "Valera and Elections",
        "description": "The city Valera lives in is going to hold elections to the city Parliament.\nThe city has n districts and n - 1 bidirectional roads. We know that from any\ndistrict there is a path along the roads to any other district. Let's\nenumerate all districts in some way by integers from 1 to n, inclusive.\nFurthermore, for each road the residents decided if it is the problem road or\nnot. A problem road is a road that needs to be repaired. There are n\ncandidates running the elections. Let's enumerate all candidates in some way\nby integers from 1 to n, inclusive. If the candidate number i will be elected\nin the city Parliament, he will perform exactly one promise \u2014 to repair all\nproblem roads on the way from the i-th district to the district 1, where the\ncity Parliament is located. Help Valera and determine the subset of candidates\nsuch that if all candidates from the subset will be elected to the city\nParliament, all problem roads in the city will be repaired. If there are\nseveral such subsets, you should choose the subset consisting of the minimum\nnumber of candidates. Input The first line contains a single integer n (2 \u2264 n\n\u2264 10^5) \u2014 the number of districts in the city. Then n - 1 lines follow. Each\nline contains the description of a city road as three positive integers xi,\nyi, ti (1 \u2264 xi, yi \u2264 n, 1 \u2264 ti \u2264 2) \u2014 the districts connected by the i-th\nbidirectional road and the road type. If ti equals to one, then the i-th road\nisn't the problem road; if ti equals to two, then the i-th road is the problem\nroad. It's guaranteed that the graph structure of the city is a tree. Output\nIn the first line print a single non-negative number k \u2014 the minimum size of\nthe required subset of candidates. Then on the second line print k space-\nseparated integers a1, a2, ... ak \u2014 the numbers of the candidates that form\nthe required subset. If there are multiple solutions, you are allowed to print\nany of them. Examples Input 5 1 2 2 2 3 2 3 4 2 4 5 2 Output 1 5 Input 5 1 2 1\n2 3 2 2 4 1 4 5 1 Output 1 3 Input 5 1 2 2 1 3 2 1 4 2 1 5 2 Output 4 5 4 3 2\n\n",
        "cf_contest_id": 369,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 2 2\r\n2 3 2\r\n3 4 2\r\n4 5 2\r\n",
                "1\r\n5 "
            ],
            [
                "5\r\n1 2 1\r\n2 3 2\r\n2 4 1\r\n4 5 1\r\n",
                "1\r\n3 "
            ],
            [
                "5\r\n1 2 2\r\n1 3 2\r\n1 4 2\r\n1 5 2\r\n",
                "4\r\n5 4 3 2 "
            ]
        ],
        "private_cases": [
            [
                "5\r\n1 5 1\r\n5 4 2\r\n4 3 1\r\n3 2 2\r\n",
                "1\r\n2 "
            ],
            [
                "2\r\n1 2 1\r\n",
                "0\r\n"
            ],
            [
                "10\r\n7 5 1\r\n2 1 2\r\n8 7 2\r\n2 4 1\r\n4 5 2\r\n9 5 1\r\n3 2 2\r\n2 10 1\r\n6 5 2\r\n",
                "3\r\n3 6 8 "
            ],
            [
                "2\r\n2 1 1\r\n",
                "0\r\n"
            ],
            [
                "2\r\n1 2 2\r\n",
                "1\r\n2 "
            ],
            [
                "5\r\n3 1 1\r\n4 5 1\r\n1 4 1\r\n1 2 1\r\n",
                "0\r\n"
            ],
            [
                "5\r\n1 3 2\r\n5 4 2\r\n2 1 2\r\n4 3 2\r\n",
                "2\r\n2 5 "
            ],
            [
                "10\r\n1 9 1\r\n3 2 2\r\n1 2 2\r\n4 7 2\r\n3 5 2\r\n4 3 2\r\n10 3 2\r\n7 8 2\r\n3 6 1\r\n",
                "3\r\n10 8 5 "
            ],
            [
                "10\r\n7 9 2\r\n2 6 2\r\n7 4 1\r\n5 4 2\r\n3 2 1\r\n8 5 2\r\n4 3 2\r\n7 10 1\r\n1 2 2\r\n",
                "3\r\n8 9 6 "
            ],
            [
                "10\r\n3 9 1\r\n2 10 2\r\n1 7 1\r\n3 4 1\r\n7 8 2\r\n1 2 1\r\n5 3 1\r\n5 6 2\r\n2 3 2\r\n",
                "3\r\n6 10 8 "
            ],
            [
                "10\r\n1 10 2\r\n10 9 2\r\n10 8 2\r\n9 7 2\r\n8 6 1\r\n7 5 1\r\n6 4 1\r\n5 3 1\r\n4 2 1\r\n",
                "2\r\n8 7 "
            ],
            [
                "10\r\n1 10 2\r\n10 9 2\r\n10 8 2\r\n9 7 2\r\n8 6 2\r\n7 5 2\r\n6 4 2\r\n5 3 2\r\n4 2 2\r\n",
                "2\r\n2 3 "
            ],
            [
                "4\r\n1 2 2\r\n2 3 1\r\n2 4 2\r\n",
                "1\r\n4 "
            ]
        ]
    }
]