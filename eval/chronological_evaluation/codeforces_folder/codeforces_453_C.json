[
    {
        "name": "Little Pony and Summer Sun Celebration",
        "description": "Twilight Sparkle learnt that the evil Nightmare Moon would return during the\nupcoming Summer Sun Celebration after one thousand years of imprisonment on\nthe moon. She tried to warn her mentor Princess Celestia, but the princess\nignored her and sent her to Ponyville to check on the preparations for the\ncelebration. Twilight Sparkle wanted to track the path of Nightmare Moon.\nUnfortunately, she didn't know the exact path. What she knew is the parity of\nthe number of times that each place Nightmare Moon visited. Can you help\nTwilight Sparkle to restore any path that is consistent with this information?\nPonyville can be represented as an undirected graph (vertices are places,\nedges are roads between places) without self-loops and multi-edges. The path\ncan start and end at any place (also it can be empty). Each place can be\nvisited multiple times. The path must not visit more than 4n places. Input The\nfirst line contains two integers n and m (2 \u2264 n \u2264 10^5; 0 \u2264 m \u2264 10^5) \u2014 the\nnumber of places and the number of roads in Ponyville. Each of the following m\nlines contains two integers ui, vi (1 \u2264 ui, vi \u2264 n; ui \u2260 vi), these integers\ndescribe a road between places ui and vi. The next line contains n integers:\nx1, x2, ..., xn (0 \u2264 xi \u2264 1) \u2014 the parity of the number of times that each\nplace must be visited. If xi = 0, then the i-th place must be visited even\nnumber of times, else it must be visited odd number of times. Output Output\nthe number of visited places k in the first line (0 \u2264 k \u2264 4n). Then output k\nintegers \u2014 the numbers of places in the order of path. If xi = 0, then the\ni-th place must appear in the path even number of times, else i-th place must\nappear in the path odd number of times. Note, that given road system has no\nself-loops, therefore any two neighbouring places in the path must be\ndistinct. If there is no required path, output -1. If there multiple possible\npaths, you can output any of them. Examples Input 3 2 1 2 2 3 1 1 1 Output 3 1\n2 3 Input 5 7 1 2 1 3 1 4 1 5 3 4 3 5 4 5 0 1 0 1 0 Output 10 2 1 3 4 5 4 5 4\n3 1 Input 2 0 0 0 Output 0\n\n",
        "cf_contest_id": 453,
        "cf_index": "C",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2\r\n1 2\r\n2 3\r\n1 1 1\r\n",
                "7\r\n1 2 3 2 1 2 1 "
            ],
            [
                "5 7\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n3 4\r\n3 5\r\n4 5\r\n0 1 0 1 0\r\n",
                "10\r\n2 1 5 4 3 4 3 4 5 1 "
            ],
            [
                "2 0\r\n0 0\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 10\r\n2 1\r\n2 3\r\n4 2\r\n4 5\r\n3 6\r\n5 7\r\n8 4\r\n4 9\r\n5 10\r\n4 7\r\n0 0 1 0 1 1 1 0 1 0\r\n",
                "27\r\n3 6 3 2 4 7 5 10 5 10 5 7 4 7 4 9 4 8 4 8 4 2 1 2 1 2 3 "
            ],
            [
                "10 10\r\n2 1\r\n3 1\r\n4 1\r\n3 5\r\n6 2\r\n5 7\r\n1 8\r\n5 9\r\n10 5\r\n7 2\r\n1 0 0 0 1 1 1 0 0 1\r\n",
                "31\r\n1 8 1 8 1 4 1 4 1 3 5 10 5 9 5 9 5 7 2 6 2 7 5 7 5 3 5 3 1 3 1 "
            ],
            [
                "10 10\r\n1 2\r\n1 3\r\n3 4\r\n3 5\r\n6 1\r\n7 6\r\n8 7\r\n9 7\r\n10 1\r\n2 4\r\n0 1 0 1 1 0 0 1 1 0\r\n",
                "29\r\n2 4 3 5 3 1 10 1 10 1 6 7 9 7 8 7 6 7 6 1 6 1 3 1 3 4 2 4 2 "
            ],
            [
                "10 10\r\n1 2\r\n2 3\r\n3 4\r\n2 5\r\n3 6\r\n7 4\r\n8 7\r\n9 1\r\n7 10\r\n5 3\r\n1 0 0 1 1 0 0 1 1 1\r\n",
                "26\r\n1 9 1 2 5 3 6 3 6 3 4 7 10 7 8 7 4 7 4 3 5 2 5 2 1 2 "
            ],
            [
                "10 10\r\n1 2\r\n3 1\r\n4 2\r\n2 5\r\n6 2\r\n7 4\r\n4 8\r\n2 9\r\n10 4\r\n5 10\r\n0 0 1 0 1 1 1 1 0 0\r\n",
                "29\r\n3 1 2 9 2 9 2 6 2 5 10 4 8 4 7 4 10 4 10 5 10 5 2 1 2 1 3 1 3 "
            ],
            [
                "10 10\r\n1 2\r\n2 3\r\n4 1\r\n2 5\r\n3 6\r\n7 6\r\n8 1\r\n9 4\r\n1 10\r\n7 1\r\n0 1 1 0 1 1 1 1 1 1\r\n",
                "22\r\n2 5 2 3 6 7 1 10 1 8 1 4 9 4 1 7 6 7 6 3 2 3 "
            ],
            [
                "10 10\r\n1 2\r\n3 1\r\n4 3\r\n1 5\r\n6 5\r\n7 4\r\n8 7\r\n9 5\r\n10 4\r\n6 10\r\n1 0 0 1 1 0 0 1 0 0\r\n",
                "30\r\n1 5 9 5 9 5 6 10 4 7 8 7 4 3 4 3 4 10 4 10 6 10 6 5 6 5 1 2 1 2 "
            ],
            [
                "2 0\r\n0 1\r\n",
                "1\r\n2 "
            ],
            [
                "2 0\r\n1 0\r\n",
                "1\r\n1 "
            ],
            [
                "2 0\r\n1 1\r\n",
                "-1\r\n"
            ],
            [
                "4 1\r\n3 4\r\n0 0 1 1\r\n",
                "2\r\n3 4 "
            ],
            [
                "4 2\r\n1 3\r\n2 4\r\n0 1 0 1\r\n",
                "2\r\n2 4 "
            ],
            [
                "3 1\r\n2 3\r\n0 1 1\r\n",
                "2\r\n2 3 "
            ],
            [
                "4 2\r\n1 2\r\n3 4\r\n0 0 0 1\r\n",
                "5\r\n4 3 4 3 4 "
            ]
        ]
    }
]