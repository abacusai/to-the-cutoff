[
    {
        "name": "Tourist",
        "description": "Tourist walks along the X axis. He can choose either of two directions and any\nspeed not exceeding V. He can also stand without moving anywhere. He knows\nfrom newspapers that at time t1 in the point with coordinate x1 an interesting\nevent will occur, at time t2 in the point with coordinate x2 \u2014 another one,\nand so on up to (xn, tn). Interesting events are short so we can assume they\nare immediate. Event i counts visited if at time ti tourist was at point with\ncoordinate xi. Write program tourist that will find maximum number of events\ntourist if: at the beginning (when time is equal to 0) tourist appears at\npoint 0, tourist can choose initial point for himself. Yes, you should answer\non two similar but different questions. Input The first line of input contains\nsingle integer number N (1 \u2264 N \u2264 100000) \u2014 number of interesting events. The\nfollowing N lines contain two integers xi and ti \u2014 coordinate and time of the\ni-th event. The last line of the input contains integer V \u2014 maximum speed of\nthe tourist. All xi will be within range - 2\u00b710^8 \u2264 xi \u2264 2\u00b710^8, all ti will\nbe between 1 and 2\u00b710^6 inclusive. V will be positive and will not exceed\n1000. The input may contain events that happen at the same time or in the same\nplace but not in the same place at the same time. Output The only line of the\noutput should contain two space-sepatated integers \u2014 maximum number of events\ntourist can visit in he starts moving from point 0 at time 0, and maximum\nnumber of events tourist can visit if he chooses the initial point for\nhimself. Examples Input 3 -1 1 42 7 40 8 2 Output 1 2\n\n",
        "cf_contest_id": 76,
        "cf_index": "F",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dp"
        ],
        "time_limit_seconds": 0.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n-1 1\r\n42 7\r\n40 8\r\n2\r\n",
                "1 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n1 5\r\n6 7\r\n17127 17\r\n17072 42\r\n17042 77\r\n3\r\n",
                "2 3\r\n"
            ],
            [
                "7\r\n-976754 20479\r\n79929143 911181\r\n9598220 82517\r\n-51609349 810257\r\n67416551 266544\r\n-14170975 307690\r\n-15476178 491195\r\n352\r\n",
                "5 5\r\n"
            ],
            [
                "12\r\n-6712 6\r\n2375 73\r\n4643 197\r\n-5660 215\r\n-378 223\r\n2228 307\r\n3305 340\r\n3449 468\r\n-4389 707\r\n-7161 729\r\n-1838 921\r\n-1655 985\r\n730\r\n",
                "11 12\r\n"
            ],
            [
                "22\r\n-5301 602\r\n-1400 194\r\n-8512 987\r\n-282 962\r\n6484 494\r\n9091 523\r\n-7744 92\r\n6002 461\r\n5053 305\r\n-1339 272\r\n-821 165\r\n9308 785\r\n929 421\r\n8384 883\r\n1266 157\r\n8411 923\r\n-2949 885\r\n7725 687\r\n6859 197\r\n-7630 867\r\n5031 918\r\n5662 410\r\n41\r\n",
                "9 9\r\n"
            ]
        ]
    }
]