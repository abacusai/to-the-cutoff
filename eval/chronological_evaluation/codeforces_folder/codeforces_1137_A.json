[
    {
        "name": "Skyscrapers",
        "description": "Dora loves adventures quite a lot. During some journey she encountered an\namazing city, which is formed by \n    n\n streets along the Eastern direction\nand \n    m\n streets across the Southern direction. Naturally, this city has\n\n    nm\n intersections. At any intersection of \n    i\n-th Eastern street and\n\n    j\n-th Southern street there is a monumental skyscraper. Dora instantly\nbecame curious and decided to explore the heights of the city buildings. When\nDora passes through the intersection of the \n    i\n-th Eastern and \n    j\n-th\nSouthern street she examines those two streets. After Dora learns the heights\nof all the skyscrapers on those two streets she wonders: how one should\nreassign heights to the skyscrapers on those two streets, so that the maximum\nheight would be as small as possible and the result of comparing the heights\nof any two skyscrapers on one street wouldn't change. Formally, on every of\n\n    nm\n intersections Dora solves an independent problem. She sees \n    n + m -\n    1\n skyscrapers and for each of them she knows its real height. Moreover, any\ntwo heights can be compared to get a result \"greater\", \"smaller\" or \"equal\".\nNow Dora wants to select some integer \n    x\n and assign every skyscraper a\nheight from \n    1\n to \n    x\n. When assigning heights, Dora wants to preserve\nthe relative order of the skyscrapers in both streets. That is, the result of\nany comparison of heights of two skyscrapers in the current Eastern street\nshouldn't change and the result of any comparison of heights of two\nskyscrapers in current Southern street shouldn't change as well. Note that\nskyscrapers located on the Southern street are not compared with skyscrapers\nlocated on the Eastern street only. However, the skyscraper located at the\nstreets intersection can be compared with both Southern and Eastern\nskyscrapers. For every intersection Dora wants to independently calculate the\nminimum possible \n    x\n. For example, if the intersection and the two streets\ncorresponding to it look as follows: Then it is optimal to replace the heights\nof the skyscrapers as follows (note that all comparisons \"less\", \"equal\",\n\"greater\" inside the Eastern street and inside the Southern street are\npreserved) The largest used number is \n    5\n, hence the answer for this\nintersection would be \n    5\n. Help Dora to compute the answers for each\nintersection. Input The first line contains two integers \n    n\n and \n    m\n\n(\n    1 \n    \u2264 n, m \n    \u2264 1000\n) \u2014 the number of streets going in the Eastern\ndirection and the number of the streets going in Southern direction. Each of\nthe following \n    n\n lines contains \n    m\n integers \n    a_i,1\n,\n\n    a_i,2\n, ..., \n    a_i,m\n (\n    1 \n    \u2264 a_i,j\n    \u2264 10^9\n). The\ninteger \n    a_i,j\n, located on \n    j\n-th position in the \n    i\n-th line\ndenotes the height of the skyscraper at the intersection of the \n    i\n-th\nEastern street and \n    j\n-th Southern direction. Output Print \n    n\n lines\ncontaining \n    m\n integers each. The integer \n    x_i,j\n, located on\n\n    j\n-th position inside the \n    i\n-th line is an answer for the problem at\nthe intersection of \n    i\n-th Eastern street and \n    j\n-th Southern street.\nExamples Input 2 3 1 2 1 2 1 2 Output 2 2 2 2 2 2 Input 2 2 1 2 3 4 Output 2 3\n3 2 Note In the first example, it's not possible to decrease the maximum used\nheight for the problem at any intersection, hence we don't have to change any\nheights. In the second example, the answers are as follows: For the\nintersection of the first line and the first column For the intersection of\nthe first line and the second column For the intersection of the second line\nand the first column For the intersection of the second line and the second\ncolumn\n\n",
        "cf_contest_id": 1137,
        "cf_index": "A",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "2 3\r\n1 2 1\r\n2 1 2\r\n",
                "2 2 2 \r\n2 2 2 \r\n"
            ],
            [
                "2 2\r\n1 2\r\n3 4\r\n",
                "2 3 \r\n3 2 \r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1543\r\n",
                "1 \r\n"
            ],
            [
                "2 1\r\n179\r\n1329\r\n",
                "2 \r\n2 \r\n"
            ],
            [
                "1 2\r\n66 699\r\n",
                "2 2 \r\n"
            ],
            [
                "2 2\r\n2 2\r\n2 2\r\n",
                "1 1 \r\n1 1 \r\n"
            ],
            [
                "2 2\r\n1 1000000000\r\n1 1000000000\r\n",
                "2 2 \r\n2 2 \r\n"
            ],
            [
                "1 4\r\n1 5 4 3\r\n",
                "4 4 4 4 \r\n"
            ],
            [
                "3 1\r\n1\r\n7\r\n9\r\n",
                "3 \r\n3 \r\n3 \r\n"
            ],
            [
                "2 1\r\n179\r\n179\r\n",
                "1 \r\n1 \r\n"
            ],
            [
                "1 2\r\n57 57\r\n",
                "1 1 \r\n"
            ],
            [
                "2 2\r\n1 2\r\n3 1\r\n",
                "2 2 \r\n2 2 \r\n"
            ],
            [
                "2 2\r\n1 1\r\n1 2\r\n",
                "1 2 \r\n2 2 \r\n"
            ],
            [
                "2 2\r\n17 56\r\n12 8\r\n",
                "3 2 \r\n3 2 \r\n"
            ],
            [
                "2 2\r\n351 910\r\n958 555\r\n",
                "2 2 \r\n2 2 \r\n"
            ],
            [
                "2 2\r\n955933963 48131784\r\n834485410 137462264\r\n",
                "2 2 \r\n3 3 \r\n"
            ],
            [
                "2 2\r\n1 2\r\n2 1\r\n",
                "2 2 \r\n2 2 \r\n"
            ],
            [
                "2 2\r\n1 2\r\n2 1\r\n",
                "2 2 \r\n2 2 \r\n"
            ],
            [
                "2 2\r\n1 1\r\n1 1\r\n",
                "1 1 \r\n1 1 \r\n"
            ],
            [
                "2 2\r\n1 1\r\n1 2\r\n",
                "1 2 \r\n2 2 \r\n"
            ],
            [
                "1 100\r\n855 693 601 329 311 798 783 920 504 868 521 358 367 467 623 767 481 635 855 608 157 95 273 261 110 713 948 897 546 476 855 337 93 321 648 441 215 979 505 69 858 99 877 337 237 116 824 98 955 192 773 99 485 385 861 849 772 993 470 215 792 635 986 515 84 7 476 831 903 74 79 545 308 675 342 947 403 952 237 731 934 607 207 556 677 701 861 844 690 179 310 772 182 771 473 11 26 7 796 556\r\n",
                "88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 88 \r\n"
            ],
            [
                "5 5\r\n1 2 10 1 1\r\n2 1 20 2 1\r\n11 13 14 15 16\r\n2 5 10 3 7\r\n1 1 1 1 1\r\n",
                "3 4 5 4 3 \r\n3 4 4 4 3 \r\n7 7 5 5 5 \r\n6 5 7 6 5 \r\n3 4 4 4 3 \r\n"
            ],
            [
                "4 3\r\n1 2 3\r\n10 11 4\r\n9 12 5\r\n8 7 6\r\n",
                "4 5 6 \r\n5 4 4 \r\n4 4 5 \r\n5 4 6 \r\n"
            ]
        ]
    }
]