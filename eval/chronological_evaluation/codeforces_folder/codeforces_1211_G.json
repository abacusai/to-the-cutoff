[
    {
        "name": "King's Path",
        "description": "There are \n    n\n cities and \n    n-1\n two-way roads in Treeland. Each road\nconnects a pair of different cities. From any city you can drive to any other,\nmoving only along the roads. Cities are numbered from \n    1\n to \n    n\n. Yes,\nof course, you recognized an undirected tree in this description. There is\nexactly one flag in each city, in the \n    i\n-th city the flag color is\n\n    c_i\n. The colors of the flags in different cities may be the same. If the\nKing travels along the route \n    [u_1, u_2, u_3, \n    \u2026, u_k]\n, then this\nmeans that he starts in the city \n    u_1\n, then moves to the city \n    u_2\n\n(\n    u_2\n is connected by road with \n    u_1\n), then from \n    u_2\n to\n\n    u_3\n (\n    u_3\n is connected by road to \n    u_2\n), and so on until he\narrives in the city of \n    u_k\n. It is possible that during this route the\nKing will visit the same city more than once. In other words, the route\n\n    [u_1, u_2, u_3, \n    \u2026, u_k]\n does not necessarily consist of different\ncities. In terms of graph theory \u2014 the King moves from \n    u_1\n to \n    u_k\n\nalong some path \n    [u_1, u_2, u_3, \n    \u2026, u_k]\n, which is not necessarily\nsimple (for all \n    j\n from \n    1\n to \n    k-1\n of the city \n    u_j\n and\n\n    u_j+1\n are connected by road). When the King moves from one city to\nanother, city heads exchange flags as a sign of their friendship. Example of\nmoving the King along the route \n    [1, 4, 2, 6]\n. The color of the vertex\nmatches the color of the flag at that vertex. For aesthetic reasons, the King\nwants the flag color in the city \n    i\n to be equal to \n    d_i\n for all\n\n    i\n from \n    1\n to \n    n\n. Determine whether the King can choose some\nroute and drive along it so that for each city the flag color in it turns out\nto be equal to the desired color \n    d_i\n. Note that the King can choose (and\ndrive) exactly one route. If yes, find the shortest possible route for the\nKing. If the initial colors of the flags already match the King's requirements\n(i.e. \n    c_i=d_i\n for all \n    i\n), then consider that the King makes a\nroute of length \n    k=0\n. Input The first line contains an integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 10^5\n) \u2014 the number of test cases to solve. The\nfollowing are the cases. Each case begins with a line containing an integer\n\n    n\n (\n    2 \n    \u2264 n \n    \u2264 2\n    \u00b710^5\n) \u2014 the number of cities in\nTreeland. The following is a line of \n    n\n integers \n    c_1, c_2, \n    \u2026,\n    c_n\n (\n    1 \n    \u2264 c_i \n    \u2264 10^6\n), where \n    c_i\n denotes the color of\nthe flag at the \n    i\n-th vertex before the King's journey. The following is\na line of \n    n\n integers \n    d_1, d_2, \n    \u2026, d_n\n (\n    1 \n    \u2264 d_i \n    \u2264\n    10^6\n), where \n    d_i\n denotes the required flag color at the \n    i\n-th\nvertex after the completion of the King's journey. Further, in the \n    n-1\n\nline, the Treeland's roads are listed. Each road is given by a line containing\ntwo integers \n    x_j, y_j\n (\n    1 \n    \u2264 x_j, y_j \n    \u2264 n\n) \u2014 numbers of\ncities that are connected by the \n    j\n th road. It is guaranteed that from\nevery city you can get to any other by road (in other words, the system of\ncities and roads forms an undirected tree). The sum of all \n    n\n values\n\u200b\u200bfor all cases in one test does not exceed \n    2\n    \u00b710^5\n. Output Print\nthe answers to all cases in the order of their appearance in the input data.\nEach answer must begin with a line containing \"Yes\" (in the case of a positive\nanswer) or \"No\" (in the case that the required route does not exist). In the\ncase of a positive answer, the following line must contain an integer \n    k\n\n\u2014 the number of cities in the shortest possible route of the King. The next\nline should contain the required route \n    u_1, u_2, \n    \u2026, u_k\n (\n    1\n    \n    \u2264 u_i \n    \u2264 n\n). You can skip the line if \n    k=0\n. Examples Input 1 7\n2 3 2 7 1 1 3 7 1 2 3 1 2 3 1 7 4 1 2 6 2 3 2 4 5 4 Output Yes 4 1 4 2 6 Input\n1 5 1 2 2 2 2 2 2 2 2 1 1 2 2 3 3 4 4 5 Output Yes 5 1 2 3 4 5 Input 3 4 10 20\n10 20 20 10 20 10 1 2 1 3 1 4 2 1000000 1000000 1000000 1000000 1 2 10 4 2 2 4\n2 4 1 2 3 4 4 2 4 4 3 2 1 2 4 2 5 8 6 9 10 5 1 10 7 10 3 4 5 9 3 10 2 4 Output\nNo Yes 0 Yes 5 3 10 5 9 6\n\n",
        "cf_contest_id": 1211,
        "cf_index": "G",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "math",
            "trees"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n7\r\n2 3 2 7 1 1 3\r\n7 1 2 3 1 2 3\r\n1 7\r\n4 1\r\n2 6\r\n2 3\r\n2 4\r\n5 4\r\n",
                "Yes\n4\n1 4 2 6\r\n"
            ],
            [
                "1\r\n5\r\n1 2 2 2 2\r\n2 2 2 2 1\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n",
                "Yes\n5\n1 2 3 4 5\r\n"
            ],
            [
                "3\r\n4\r\n10 20 10 20\r\n20 10 20 10\r\n1 2\r\n1 3\r\n1 4\r\n2\r\n1000000 1000000\r\n1000000 1000000\r\n1 2\r\n10\r\n4 2 2 4 2 4 1 2 3 4\r\n4 2 4 4 3 2 1 2 4 2\r\n5 8\r\n6 9\r\n10 5\r\n1 10\r\n7 10\r\n3 4\r\n5 9\r\n3 10\r\n2 4\r\n",
                "No\r\nYes\n0\r\nYes\n5\n3 10 5 9 6\r\n"
            ]
        ],
        "private_cases": []
    }
]