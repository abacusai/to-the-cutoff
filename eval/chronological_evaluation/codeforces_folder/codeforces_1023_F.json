[
    {
        "name": "Mobile Phone Network",
        "description": "You are managing a mobile phone network, and want to offer competitive prices\nto connect a network. The network has \n    n\n nodes. Your competitor has\nalready offered some connections between some nodes, with some fixed prices.\nThese connections are bidirectional. There are initially \n    m\n connections\nthe competitor is offering. The \n    i\n-th connection your competitor is\noffering will connect nodes \n    fa_i\n and \n    fb_i\n and costs \n    fw_i\n.\nYou have a list of \n    k\n connections that you want to offer. It is\nguaranteed that this set of connection does not form any cycle. The \n    j\n-th\nof these connections will connect nodes \n    ga_j\n and \n    gb_j\n. These\nconnections are also bidirectional. The cost of these connections have not\nbeen decided yet. You can set the prices of these connections to any arbitrary\ninteger value. These prices are set independently for each connection. After\nsetting the prices, the customer will choose such \n    n - 1\n connections that\nall nodes are connected in a single network and the total cost of chosen\nconnections is minimum possible. If there are multiple ways to choose such\nnetworks, the customer will choose an arbitrary one that also maximizes the\nnumber of your connections in it. You want to set prices in such a way such\nthat all your \n    k\n connections are chosen by the customer, and the sum of\nprices of your connections is maximized. Print the maximum profit you can\nachieve, or \n    -1\n if it is unbounded. Input The first line of input will\ncontain three integers \n    n\n, \n    k\n and \n    m\n (\n    1 \n    \u2264 n, k, m\n    \n    \u2264 5 \n    \u00b7 10^5, k \n    \u2264 n-1\n), the number of nodes, the number of\nyour connections, and the number of competitor connections, respectively. The\nnext \n    k\n lines contain two integers \n    ga_i\n and \n    gb_i\n (\n    1 \n    \u2264\n    ga_i, gb_i \n    \u2264 n\n, \n    ga_i \n    \u2260 gb_i\n), representing one of your\nconnections between nodes \n    ga_i\n and \n    gb_i\n. Your set of connections\nis guaranteed to be acyclic. The next \n    m\n lines contain three integers\neach, \n    fa_i\n, \n    fb_i\n and \n    fw_i\n (\n    1 \n    \u2264 fa_i, fb_i \n    \u2264\n    n\n, \n    fa_i \n    \u2260 fb_i\n, \n    1 \n    \u2264 fw_i \n    \u2264 10^9\n), denoting one\nof your competitor's connections between nodes \n    fa_i\n and \n    fb_i\n with\ncost \n    fw_i\n. None of these connections connects a node to itself, and no\npair of these connections connect the same pair of nodes. In addition, these\nconnections are given by non-decreasing order of cost (that is, \n    fw_i-1\n    \u2264 fw_i\n for all valid \n    i\n). Note that there may be some connections\nthat appear in both your set and your competitor's set (though no connection\nwill appear twice in one of this sets). It is guaranteed that the union of all\nof your connections and your competitor's connections form a connected\nnetwork. Output Print a single integer, the maximum possible profit you can\nachieve if you set the prices on your connections appropriately. If the profit\nis unbounded, print \n    -1\n. Examples Input 4 3 6 1 2 3 4 1 3 2 3 3 3 1 4 1 2\n4 4 2 8 4 3 8 4 1 10 Output 14 Input 3 2 1 1 2 2 3 1 2 30 Output -1 Input 4 3\n3 1 2 1 3 1 4 4 1 1000000000 4 2 1000000000 4 3 1000000000 Output 3000000000\nNote In the first sample, it's optimal to give connection \n    1-3\n cost\n\n    3\n, connection \n    1-2\n cost \n    3\n, and connection \n    3-4\n cost\n\n    8\n. In this case, the cheapest connected network has cost \n    14\n, and\nthe customer will choose one that chooses all of your connections. In the\nsecond sample, as long as your first connection costs \n    30\n or less, the\ncustomer chooses both your connections no matter what is the cost of the\nsecond connection, so you can get unbounded profit in this case.\n\n",
        "cf_contest_id": 1023,
        "cf_index": "F",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dsu",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 3 6\r\n1 2\r\n3 4\r\n1 3\r\n2 3 3\r\n3 1 4\r\n1 2 4\r\n4 2 8\r\n4 3 8\r\n4 1 10\r\n",
                "14\r\n"
            ],
            [
                "3 2 1\r\n1 2\r\n2 3\r\n1 2 30\r\n",
                "-1\r\n"
            ],
            [
                "4 3 3\r\n1 2\r\n1 3\r\n1 4\r\n4 1 1000000000\r\n4 2 1000000000\r\n4 3 1000000000\r\n",
                "3000000000\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 2 3\r\n1 2\r\n4 5\r\n2 3 100\r\n3 4 100\r\n1 5 1000\r\n",
                "2000\r\n"
            ],
            [
                "4 1 3\r\n1 2\r\n2 3 1\r\n3 4 1\r\n4 1 5\r\n",
                "5\r\n"
            ],
            [
                "2 1 1\r\n2 1\r\n2 1 973813182\r\n",
                "973813182\r\n"
            ],
            [
                "10 5 30\r\n9 5\r\n8 6\r\n2 7\r\n8 4\r\n4 9\r\n9 2 17099\r\n9 4 2118772\r\n3 1 3017524\r\n3 7 3723843\r\n5 4 4102200\r\n4 1 5198784\r\n3 5 7388009\r\n10 2 7412721\r\n5 7 9482310\r\n8 4 10676514\r\n4 7 11765694\r\n10 6 11818340\r\n5 2 12833742\r\n10 1 15136475\r\n6 4 17528902\r\n9 1 25213542\r\n5 6 25705810\r\n9 8 26890281\r\n4 10 30645622\r\n5 1 30868792\r\n5 8 32340192\r\n7 1 33147896\r\n10 7 34657250\r\n10 8 48637710\r\n7 2 50025201\r\n3 8 50346442\r\n3 2 57558231\r\n4 2 83072958\r\n4 3 83655105\r\n3 6 150607030\r\n",
                "33914610\r\n"
            ],
            [
                "5 4 1\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 1 12345\r\n",
                "49380\r\n"
            ],
            [
                "10 8 20\r\n8 2\r\n10 6\r\n8 9\r\n5 10\r\n6 7\r\n4 2\r\n1 4\r\n3 5\r\n10 1 122124\r\n3 1 491581\r\n1 9 1445545\r\n1 5 2692125\r\n8 10 3366070\r\n10 9 3465053\r\n1 2 4229561\r\n7 2 4659425\r\n5 9 5193865\r\n8 7 5690479\r\n6 3 7757414\r\n6 9 7851664\r\n7 4 10214833\r\n7 10 10318011\r\n3 8 10883926\r\n9 2 13267955\r\n8 9 15272333\r\n7 3 18654393\r\n1 8 25834717\r\n4 5 30486913\r\n",
                "16084192\r\n"
            ],
            [
                "20 15 20\r\n4 15\r\n3 20\r\n16 17\r\n9 18\r\n17 2\r\n12 4\r\n14 9\r\n8 13\r\n7 6\r\n11 18\r\n1 8\r\n20 13\r\n3 19\r\n5 6\r\n2 10\r\n17 18 949420724\r\n20 3 952411375\r\n7 14 956652250\r\n7 18 967130632\r\n1 10 975398038\r\n4 9 983132077\r\n15 3 983620272\r\n11 2 984133663\r\n14 1 984997556\r\n16 6 985771021\r\n17 19 987359633\r\n13 11 989117139\r\n8 19 990503585\r\n9 12 990896317\r\n2 5 991162563\r\n5 20 991183155\r\n18 4 993610739\r\n16 7 996185180\r\n8 15 997099436\r\n12 10 999702883\r\n",
                "14713488489\r\n"
            ]
        ]
    }
]