[
    {
        "name": "GCD Master (hard version)",
        "description": "This is the hard version of the problem. The only difference between the two\nversions is the constraint on \n    m\n. You can make hacks only if both\nversions of the problem are solved. You are given an array \n    a\n of length\n\n    n\n and two integers \n    m\n and \n    k\n. Each element in \n    a\n\nsatisfies \n    1\n    \u2264 a_i \n    \u2264 m\n. In one operation, you choose two indices\n\n    i\n and \n    j\n such that \n    1 \n    \u2264 i < j \n    \u2264 |a|\n, then append\n\n    (a_i,a_j)\n to the back of the array and delete \n    a_i\n and\n\n    a_j\n from the array. Note that the length of the array decreases by one\nafter this operation. Find the maximum possible sum of the array after\nperforming exactly \n    k\n operations. Input The first line contains a single\ninteger \n    t\n (\n    1\n    \u2264 t\n    \u2264 10^5\n) \u2014 the number of test cases. The\ndescription of test cases follows. The first line of each test case contains\nthree integers \n    n\n, \n    m\n and \n    k\n (\n    2 \n    \u2264 n \n    \u2264 10^6\n;\n\n    1\n    \u2264 m \n    \u2264 9\n    \u00b7 10^18\n; \n    1 \n    \u2264 k \n    \u2264 n-1\n). The second\nline of each test case contains \n    n\n integers \n    a_1,a_2,\n    \u2026,a_n\n\n(\n    1 \n    \u2264 a_i \n    \u2264 m\n). It is guaranteed that the sum of \n    n\n over all\ntest cases does not exceed \n    10^6\n. Output For each test case, output the\nmaximum possible sum of the array after performing \n    k\n operations\noptimally. Example Input 4 3 8 1 4 7 8 5 114514 2 7 2 4 1 6 3 1919810 2 2 3 3\n3 9000000000000000000 1 9000000000000000000 9000000000000000000\n9000000000000000000 Output 11 14 1 18000000000000000000 Note In the first test\ncase, the best way is to choose \n    i=1\n, \n    j=3\n in the first operation.\nThe final sequence is \n    [7,4]\n.\n\n",
        "cf_contest_id": 1806,
        "cf_index": "F2",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "4\r\n3 8 1\r\n4 7 8\r\n5 114514 2\r\n7 2 4 1 6\r\n3 1919810 2\r\n2 3 3\r\n3 9000000000000000000 1\r\n9000000000000000000 9000000000000000000 9000000000000000000\r\n",
                "11\r\n14\r\n1\r\n18000000000000000000\r\n"
            ]
        ],
        "private_cases": []
    }
]