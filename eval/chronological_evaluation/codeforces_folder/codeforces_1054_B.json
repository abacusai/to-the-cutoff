[
    {
        "name": "Appending Mex",
        "description": "Initially Ildar has an empty array. He performs \n    n\n steps. On each step he\ntakes a subset of integers already added to the array and appends the mex of\nthis subset to the array. The mex of an multiset of integers is the smallest\nnon-negative integer not presented in the multiset. For example, the mex of\nthe multiset \n    [0, 2, 3]\n is \n    1\n, while the mex of the multiset \n    [1,\n    2, 1]\n is \n    0\n. More formally, on the step \n    m\n, when Ildar already\nhas an array \n    a_1, a_2, \n    \u2026, a_m-1\n, he chooses some subset of\nindices \n    1 \n    \u2264 i_1 < i_2 < \n    \u2026 < i_k < m\n (possibly, empty), where\n\n    0 \n    \u2264 k < m\n, and appends the \n    mex(a_i_1, a_i_2, \n    \u2026\n    a_i_k)\n to the end of the array. After performing all the steps Ildar\nthinks that he might have made a mistake somewhere. He asks you to determine\nfor a given array \n    a_1, a_2, \n    \u2026, a_n\n the minimum step \n    t\n such\nthat he has definitely made a mistake on at least one of the steps \n    1, 2,\n    \n    \u2026, t\n, or determine that he could have obtained this array without\nmistakes. Input The first line contains a single integer \n    n\n (\n    1 \n    \u2264\n    n \n    \u2264 100\n     000\n) \u2014 the number of steps Ildar made. The second line\ncontains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i\n    \n    \u2264 10^9\n) \u2014 the array Ildar obtained. Output If Ildar could have chosen\nthe subsets on each step in such a way that the resulting array is \n    a_1,\n    a_2, \n    \u2026, a_n\n, print \n    -1\n. Otherwise print a single integer\n\n    t\n \u2014 the smallest index of a step such that a mistake was made on at\nleast one step among steps \n    1, 2, \n    \u2026, t\n. Examples Input 4 0 1 2 1\nOutput -1 Input 3 1 0 1 Output 1 Input 4 0 1 2 239 Output 4 Note In the first\nexample it is possible that Ildar made no mistakes. Here is the process he\ncould have followed. \n    1\n-st step. The initial array is empty. He can\nchoose an empty subset and obtain \n    0\n, because the mex of an empty set is\n\n    0\n. Appending this value to the end he gets the array \n    [0]\n.\n\n    2\n-nd step. The current array is \n    [0]\n. He can choose a subset\n\n    [0]\n and obtain an integer \n    1\n, because \n    mex(0) = 1\n. Appending\nthis value to the end he gets the array \n    [0,1]\n. \n    3\n-rd step. The\ncurrent array is \n    [0,1]\n. He can choose a subset \n    [0,1]\n and obtain an\ninteger \n    2\n, because \n    mex(0,1) = 2\n. Appending this value to the end\nhe gets the array \n    [0,1,2]\n. \n    4\n-th step. The current array is\n\n    [0,1,2]\n. He can choose a subset \n    [0]\n and obtain an integer \n    1\n,\nbecause \n    mex(0) = 1\n. Appending this value to the end he gets the array\n\n    [0,1,2,1]\n. Thus, he can get the array without mistakes, so the answer is\n\n    -1\n. In the second example he has definitely made a mistake on the very\nfirst step, because he could not have obtained anything different from\n\n    0\n. In the third example he could have obtained \n    [0, 1, 2]\n without\nmistakes, but \n    239\n is definitely wrong.\n\n",
        "cf_contest_id": 1054,
        "cf_index": "B",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n0 1 2 1\r\n",
                "-1\r\n"
            ],
            [
                "3\r\n1 0 1\r\n",
                "1\r\n"
            ],
            [
                "4\r\n0 1 2 239\r\n",
                "4\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n0\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "1\r\n1000000000\r\n",
                "1\r\n"
            ],
            [
                "2\r\n0 0\r\n",
                "-1\r\n"
            ],
            [
                "2\r\n0 1\r\n",
                "-1\r\n"
            ],
            [
                "2\r\n0 1000000000\r\n",
                "2\r\n"
            ],
            [
                "2\r\n0 2\r\n",
                "2\r\n"
            ],
            [
                "2\r\n1 1\r\n",
                "1\r\n"
            ],
            [
                "2\r\n1 2\r\n",
                "1\r\n"
            ],
            [
                "2\r\n0 2\r\n",
                "2\r\n"
            ],
            [
                "2\r\n1 1\r\n",
                "1\r\n"
            ],
            [
                "5\r\n0 0 0 0 0\r\n",
                "-1\r\n"
            ],
            [
                "3\r\n0 0 2\r\n",
                "3\r\n"
            ],
            [
                "2\r\n0 0\r\n",
                "-1\r\n"
            ],
            [
                "3\r\n0 1 1000000000\r\n",
                "3\r\n"
            ],
            [
                "5\r\n0 0 2 3 4\r\n",
                "3\r\n"
            ],
            [
                "4\r\n0 0 2 1\r\n",
                "3\r\n"
            ],
            [
                "1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "3\r\n0 2 4\r\n",
                "2\r\n"
            ],
            [
                "3\r\n3 4 5\r\n",
                "1\r\n"
            ],
            [
                "5\r\n0 0 2 2 3\r\n",
                "3\r\n"
            ]
        ]
    }
]