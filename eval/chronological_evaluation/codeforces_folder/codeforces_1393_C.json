[
    {
        "name": "Pinkie Pie Eats Patty-cakes",
        "description": "Pinkie Pie has bought a bag of patty-cakes with different fillings! But it\nappeared that not all patty-cakes differ from one another with filling. In\nother words, the bag contains some patty-cakes with the same filling. Pinkie\nPie eats the patty-cakes one-by-one. She likes having fun so she decided not\nto simply eat the patty-cakes but to try not to eat the patty-cakes with the\nsame filling way too often. To achieve this she wants the minimum distance\nbetween the eaten with the same filling to be the largest possible. Herein\nPinkie Pie called the distance between two patty-cakes the number of eaten\npatty-cakes strictly between them. Pinkie Pie can eat the patty-cakes in any\norder. She is impatient about eating all the patty-cakes up so she asks you to\nhelp her to count the greatest minimum distance between the eaten patty-cakes\nwith the same filling amongst all possible orders of eating! Pinkie Pie is\ngoing to buy more bags of patty-cakes so she asks you to solve this problem\nfor several bags! Input The first line contains a single integer \n    T\n (\n    1\n    \n    \u2264 T \n    \u2264 100\n): the number of bags for which you need to solve the\nproblem. The first line of each bag description contains a single integer\n\n    n\n (\n    2 \n    \u2264 n \n    \u2264 10^5\n): the number of patty-cakes in it. The\nsecond line of the bag description contains \n    n\n integers \n    a_1, a_2,\n    \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n): the information of patty-cakes'\nfillings: same fillings are defined as same integers, different fillings are\ndefined as different integers. It is guaranteed that each bag contains at\nleast two patty-cakes with the same filling. It is guaranteed that the sum of\n\n    n\n over all bags does not exceed \n    10^5\n. Output For each bag print in\nseparate line one single integer: the largest minimum distance between the\neaten patty-cakes with the same filling amongst all possible orders of eating\nfor that bag. Example Input 4 7 1 7 1 6 4 4 6 8 1 1 4 6 4 6 4 7 3 3 3 3 6 2 5\n2 3 1 4 Output 3 2 0 4 Note For the first bag Pinkie Pie can eat the patty-\ncakes in the following order (by fillings): \n    1\n, \n    6\n, \n    4\n,\n\n    7\n, \n    1\n, \n    6\n, \n    4\n (in this way, the minimum distance is equal\nto \n    3\n). For the second bag Pinkie Pie can eat the patty-cakes in the\nfollowing order (by fillings): \n    1\n, \n    4\n, \n    6\n, \n    7\n, \n    4\n,\n\n    1\n, \n    6\n, \n    4\n (in this way, the minimum distance is equal to\n\n    2\n).\n\n",
        "cf_contest_id": 1393,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n7\r\n1 7 1 6 4 4 6\r\n8\r\n1 1 4 6 4 6 4 7\r\n3\r\n3 3 3\r\n6\r\n2 5 2 3 1 4\r\n",
                "3\r\n2\r\n0\r\n4\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n15\r\n1 2 3 4 5 1 2 3 4 5 1 2 3 4 5\r\n",
                "4\r\n"
            ]
        ]
    }
]