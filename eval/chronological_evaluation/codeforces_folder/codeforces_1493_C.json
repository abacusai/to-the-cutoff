[
    {
        "name": "K-beautiful Strings",
        "description": "You are given a string \n    s\n consisting of lowercase English letters and a\nnumber \n    k\n. Let's call a string consisting of lowercase English letters\nbeautiful if the number of occurrences of each letter in that string is\ndivisible by \n    k\n. You are asked to find the lexicographically smallest\nbeautiful string of length \n    n\n, which is lexicographically greater or\nequal to string \n    s\n. If such a string does not exist, output \n    -1\n. A\nstring \n    a\n is lexicographically smaller than a string \n    b\n if and only\nif one of the following holds: \n    a\n is a prefix of \n    b\n, but \n    a \n    \n    b\n; in the first position where \n    a\n and \n    b\n differ, the string\n\n    a\n has a letter that appears earlier in the alphabet than the\ncorresponding letter in \n    b\n. Input The first line contains a single\ninteger \n    T\n (\n    1 \n    \u2264 T \n    \u2264 10\n     000\n) \u2014 the number of test cases.\nThe next \n    2 \n    \u00b7 T\n lines contain the description of test cases. The\ndescription of each test case consists of two lines. The first line of the\ndescription contains two integers \n    n\n and \n    k\n (\n    1 \n    \u2264 k \n    \u2264 n\n    \n    \u2264 10^5\n) \u2014 the length of string \n    s\n and number \n    k\n respectively.\nThe second line contains string \n    s\n consisting of lowercase English\nletters. It is guaranteed that the sum of \n    n\n over all test cases does not\nexceed \n    10^5\n. Output For each test case output in a separate line\nlexicographically smallest beautiful string of length \n    n\n, which is\ngreater or equal to string \n    s\n, or \n    -1\n if such a string does not\nexist. Example Input 4 4 2 abcd 3 1 abc 4 3 aaaa 9 3 abaabaaaa Output acac abc\n-1 abaabaaab Note In the first test case \"acac\" is greater than or equal to\n\n    s\n, and each letter appears \n    2\n or \n    0\n times in it, so it is\nbeautiful. In the second test case each letter appears \n    0\n or \n    1\n\ntimes in \n    s\n, so \n    s\n itself is the answer. We can show that there is\nno suitable string in the third test case. In the fourth test case each letter\nappears \n    0\n, \n    3\n, or \n    6\n times in \"abaabaaab\". All these integers\nare divisible by \n    3\n.\n\n",
        "cf_contest_id": 1493,
        "cf_index": "C",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "constructive algorithms",
            "greedy",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4 2\r\nabcd\r\n3 1\r\nabc\r\n4 3\r\naaaa\r\n9 3\r\nabaabaaaa\r\n",
                "acac\r\nabc\r\n-1\r\nabaabaaab\r\n"
            ]
        ],
        "private_cases": [
            [
                "12\r\n12 3\r\nzazasqzqsasq\r\n1 1\r\nz\r\n1 1\r\na\r\n15 4\r\nabccbaabccbazaa\r\n16 8\r\ncadjfdsljfdkljds\r\n6 2\r\nbaazaa\r\n6 3\r\nbosszb\r\n6 1\r\nqwerty\r\n7 7\r\ndaaaaaa\r\n14 2\r\nacabcbdeffewzd\r\n18 6\r\nzzzzzzzzzzzzyyyyyz\r\n9 4\r\naabaabbbc\r\n",
                "zazasqzqsasq\r\nz\r\na\r\n-1\r\ncbbbbbbbbccccccc\r\nbaazbz\r\nbpbbpp\r\nqwerty\r\nddddddd\r\nacabcbdeffexdx\r\nzzzzzzzzzzzzzzzzzz\r\n-1\r\n"
            ]
        ]
    }
]