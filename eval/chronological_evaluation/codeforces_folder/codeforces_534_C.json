[
    {
        "name": "Polycarpus' Dice",
        "description": "Polycarp has n dice d1, d2, ..., dn. The i-th dice shows numbers from 1 to di.\nPolycarp rolled all the dice and the sum of numbers they showed is A.\nAgrippina didn't see which dice showed what number, she knows only the sum A\nand the values d1, d2, ..., dn. However, she finds it enough to make a series\nof statements of the following type: dice i couldn't show number r. For\nexample, if Polycarp had two six-faced dice and the total sum is A = 11, then\nAgrippina can state that each of the two dice couldn't show a value less than\nfive (otherwise, the remaining dice must have a value of at least seven, which\nis impossible). For each dice find the number of values for which it can be\nguaranteed that the dice couldn't show these values if the sum of the shown\nvalues is A. Input The first line contains two integers n, A (1 \u2264 n \u2264 2\u00b710^5,\nn \u2264 A \u2264 s) \u2014 the number of dice and the sum of shown values where s = d1 + d2\n+ ... + dn. The second line contains n integers d1, d2, ..., dn (1 \u2264 di \u2264\n10^6), where di is the maximum value that the i-th dice can show. Output Print\nn integers b1, b2, ..., bn, where bi is the number of values for which it is\nguaranteed that the i-th dice couldn't show them. Examples Input 2 8 4 4\nOutput 3 3 Input 1 3 5 Output 4 Input 2 3 2 3 Output 0 1 Note In the first\nsample from the statement A equal to 8 could be obtained in the only case when\nboth the first and the second dice show 4. Correspondingly, both dice couldn't\nshow values 1, 2 or 3. In the second sample from the statement A equal to 3\ncould be obtained when the single dice shows 3. Correspondingly, it couldn't\nshow 1, 2, 4 or 5. In the third sample from the statement A equal to 3 could\nbe obtained when one dice shows 1 and the other dice shows 2. That's why the\nfirst dice doesn't have any values it couldn't show and the second dice\ncouldn't show 3.\n\n",
        "cf_contest_id": 534,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 8\r\n4 4\r\n",
                "3 3\r\n"
            ],
            [
                "1 3\r\n5\r\n",
                "4\r\n"
            ],
            [
                "2 3\r\n2 3\r\n",
                "0 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n3\r\n",
                "2\r\n"
            ],
            [
                "1 2\r\n3\r\n",
                "2\r\n"
            ],
            [
                "2 2\r\n2 3\r\n",
                "1 2\r\n"
            ],
            [
                "2 4\r\n2 3\r\n",
                "0 1\r\n"
            ],
            [
                "3 3\r\n5 1 5\r\n",
                "4 0 4\r\n"
            ],
            [
                "3 4\r\n5 1 5\r\n",
                "3 0 3\r\n"
            ],
            [
                "3 5\r\n5 1 5\r\n",
                "2 0 2\r\n"
            ],
            [
                "3 6\r\n5 1 5\r\n",
                "1 0 1\r\n"
            ],
            [
                "3 7\r\n5 1 5\r\n",
                "0 0 0\r\n"
            ],
            [
                "3 8\r\n5 1 5\r\n",
                "1 0 1\r\n"
            ],
            [
                "3 5\r\n1 2 100\r\n",
                "0 0 98\r\n"
            ],
            [
                "10 20\r\n1 1 1 1 5 100 1 1 1 1\r\n",
                "0 0 0 0 0 95 0 0 0 0\r\n"
            ],
            [
                "5 50\r\n1 1 1 1 1000000\r\n",
                "0 0 0 0 999999\r\n"
            ],
            [
                "5 50\r\n2 2 2 2 1000000\r\n",
                "0 0 0 0 999995\r\n"
            ],
            [
                "5 50\r\n10 10 10 10 1000000\r\n",
                "0 0 0 0 999963\r\n"
            ],
            [
                "10 19\r\n1 5 6 1 6 4 1 2 9 5\r\n",
                "0 0 0 0 0 0 0 0 0 0\r\n"
            ],
            [
                "10 40\r\n1 5 6 1 6 4 1 2 9 5\r\n",
                "0 4 5 0 5 3 0 1 8 4\r\n"
            ],
            [
                "10 16\r\n5 7 7 5 9 3 8 5 7 2\r\n",
                "0 0 0 0 2 0 1 0 0 0\r\n"
            ],
            [
                "10 58\r\n5 7 7 5 9 3 8 5 7 2\r\n",
                "4 6 6 4 8 2 7 4 6 1\r\n"
            ],
            [
                "10 13\r\n9 9 6 9 10 4 5 10 8 9\r\n",
                "5 5 2 5 6 0 1 6 4 5\r\n"
            ],
            [
                "10 79\r\n9 9 6 9 10 4 5 10 8 9\r\n",
                "8 8 5 8 9 3 4 9 7 8\r\n"
            ],
            [
                "10 16\r\n4 1 8 3 3 3 4 3 6 6\r\n",
                "0 0 1 0 0 0 0 0 0 0\r\n"
            ],
            [
                "10 41\r\n4 1 8 3 3 3 4 3 6 6\r\n",
                "3 0 7 2 2 2 3 2 5 5\r\n"
            ],
            [
                "10 18\r\n8 1 9 8 4 1 1 8 6 2\r\n",
                "0 0 0 0 0 0 0 0 0 0\r\n"
            ],
            [
                "10 48\r\n8 1 9 8 4 1 1 8 6 2\r\n",
                "7 0 8 7 3 0 0 7 5 1\r\n"
            ],
            [
                "1 5\r\n5\r\n",
                "4\r\n"
            ]
        ]
    }
]