[
    {
        "name": "Tourists",
        "description": "A double tourist path, located at a park in Ultima Thule, is working by the\nfollowing principle: We introduce the Cartesian coordinate system. At some\npoints of time there are two tourists going (for a walk) from points ( - 1, 0)\nand (1, 0) simultaneously. The first one is walking from ( - 1, 0), the second\none is walking from (1, 0). Both tourists in a pair move at the same speed 1\n(distance unit per second), the first one moves along line x = - 1, the second\none moves along line x = 1, both of them are moving in the positive direction\nof the Oy axis. At some points of time walls appear. Wall (li, ri) is a\nsegment between points (0, li) and (0, ri). Each wall appears immediately. The\nUltima Thule government wants to learn this for each pair of tourists that\nwalk simultaneously: for how long (in seconds) will they not see each other?\nTwo tourists don't see each other if the segment that connects their positions\non the plane intersects at least one wall. Two segments intersect if they\nshare at least one point. We assume that the segments' ends belong to the\nsegments. Help the government count the required time. Note that the walls can\nintersect (in any way) or coincide. Input The first line contains two space-\nseparated integers n and m (1 \u2264 n, m \u2264 10^5) \u2014 the number of pairs of tourists\nand the number of built walls. The next m lines contain three space-separated\nintegers li, ri and ti each (0 \u2264 li < ri \u2264 10^9, 0 \u2264 ti \u2264 10^9) \u2014 the wall\nends and the time it appeared. The last line contains n distinct space-\nseparated strictly increasing integers q1, q2, ..., qn (0 \u2264 qi \u2264 10^9) \u2014 the\npoints of time when pairs of tourists walk. All points of time are given in\nseconds. Output For each pair of tourists print on a single line a single\ninteger \u2014 the time in seconds when the two tourists from the corresponding\npair won't see each other. Print the numbers in the order in which the they go\nin the input. Examples Input 2 2 1 4 3 3 6 5 0 1 Output 2 4 Input 3 3 0 3 4 0\n1 2 2 4 0 1 3 4 Output 2 4 4\n\n",
        "cf_contest_id": 286,
        "cf_index": "D",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 2\r\n1 4 3\r\n3 6 5\r\n0 1\r\n",
                "2\r\n4\r\n"
            ],
            [
                "3 3\r\n0 3 4\r\n0 1 2\r\n2 4 0\r\n1 3 4\r\n",
                "2\r\n4\r\n4\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 5\r\n33977873 33977882 27401269\r\n20525281 20525283 41116563\r\n1122519 1122528 45838798\r\n27492943 27492952 16240101\r\n44993738 44993747 39515481\r\n13905814 44412781 46034755 46783410 48111104\r\n",
                "27\r\n29\r\n38\r\n38\r\n38\r\n"
            ],
            [
                "5 5\r\n36383211 36383219 13455472\r\n5353197 5353204 15686456\r\n10707708 10707715 47436525\r\n5817210 5817211 42473644\r\n7523123 7523128 18145538\r\n40985574 46829799 47220015 48069213 49482322\r\n",
                "28\r\n28\r\n28\r\n28\r\n28\r\n"
            ],
            [
                "5 5\r\n36383211 36383219 13455472\r\n5353197 5353204 15686456\r\n10707708 10707715 47436525\r\n5817210 5817211 42473644\r\n7523123 7523128 18145538\r\n40985574 46829799 47220015 48069213 49482322\r\n",
                "28\r\n28\r\n28\r\n28\r\n28\r\n"
            ],
            [
                "5 5\r\n31655060 31655066 43793602\r\n11833592 11833601 15518041\r\n10644815 10644817 25955340\r\n12665559 12665564 40402317\r\n16277253 16277254 39181338\r\n48317106 49161089 49499818 49773138 49865628\r\n",
                "23\r\n23\r\n23\r\n23\r\n23\r\n"
            ],
            [
                "5 5\r\n2609130 2609139 40772800\r\n11900138 11900142 15785147\r\n5201502 5201507 11999999\r\n34628721 34628724 41087151\r\n15754288 15754294 20322127\r\n13579001 48508273 49846415 49991510 49998518\r\n",
                "18\r\n27\r\n27\r\n27\r\n27\r\n"
            ],
            [
                "4 4\r\n32898177 33592319 32963372\r\n10652592 10675206 35312266\r\n15762425 15979927 40432055\r\n23246159 24023640 48526211\r\n35888371 38167485 47630840 48783772\r\n",
                "1711739\r\n1711739\r\n1711739\r\n1711739\r\n"
            ],
            [
                "10 10\r\n9085 499994808 554408165\r\n942778528 942784569 73189516\r\n966512755 966516493 349571733\r\n27945 499987223 554425252\r\n22789 499988381 554416387\r\n718915288 718923165 262932755\r\n15907 499988388 554415253\r\n538535164 538537977 130825464\r\n601355180 601359736 438641001\r\n14673 499994621 554409202\r\n174930931 402988377 474864201 493520226 496024722 497603819 498040307 499536111 499938569 499996440\r\n",
                "120542599\r\n348600045\r\n420475869\r\n439131894\r\n441636390\r\n443215487\r\n443651975\r\n445147779\r\n445550237\r\n445608108\r\n"
            ],
            [
                "10 10\r\n500009085 999994808 554408165\r\n442778528 442784569 323189516\r\n466512755 466516493 599571733\r\n500027945 999987223 554425252\r\n500022789 999988381 554416387\r\n218915288 218923165 512932755\r\n500015907 999988388 554415253\r\n38535164 38537977 380825464\r\n101355180 101359736 688641001\r\n500014673 999994621 554409202\r\n424090826 441386968 463865074 489641230 490961020 495018731 495239062 495759894 499290516 499870419\r\n",
                "500006192\r\n500006192\r\n500006192\r\n500006192\r\n500006192\r\n500006192\r\n500006192\r\n500006192\r\n500006192\r\n500006192\r\n"
            ]
        ]
    }
]