[
    {
        "name": "Luke is a Foodie",
        "description": "Luke likes to eat. There are \n    n\n piles of food aligned in a straight line\nin front of him. The \n    i\n-th pile contains \n    a_i\n units of food. Luke\nwill walk from the \n    1\n-st pile towards the \n    n\n-th pile, and he wants\nto eat every pile of food without walking back. When Luke reaches the\n\n    i\n-th pile, he can eat that pile if and only if \n    |v - a_i| \n    \u2264 x\n,\nwhere \n    x\n is a fixed integer, and \n    v\n is Luke's food affinity. Before\nLuke starts to walk, he can set \n    v\n to any integer. Also, for each \n    i\n\n(\n    1 \n    \u2264 i \n    \u2264 n\n), Luke can change his food affinity to any integer\nbefore he eats the \n    i\n-th pile. Find the minimum number of changes needed\nto eat every pile of food. Note that the initial choice for \n    v\n is not\nconsidered as a change. Input The input consists of multiple test cases. The\nfirst line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014\nthe number of test cases. The description of test cases follows. For each test\ncase, the first line contains two integers, \n    n, x\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n, \n    1 \n    \u2264 x \n    \u2264 10^9\n) \u2014 the number of piles, and the\nmaximum difference between the size of a pile and Luke's food affinity, such\nthat Luke can eat the pile. The second line contains \n    n\n integers \n    a_1,\n    a_2, \n    \u2026 , a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n). It is guaranteed that\nthe sum of \n    n\n over all test cases does not exceed \n    2 \n    \u00b7 10^5\n.\nOutput For each test case, output an integer on a separate line, which is the\nminimum number of changes needed. Example Input 7 5 3 3 8 5 6 7 5 3 3 10 9 8 7\n12 8 25 3 3 17 8 6 1 16 15 25 17 23 10 2 1 2 3 4 5 6 7 8 9 10 8 2 2 4 6 8 6 4\n12 14 8 2 2 7 8 9 6 13 21 28 15 5 11 4 13 23 7 10 5 21 20 11 17 5 29 16 11\nOutput 0 1 2 1 2 4 6 Note In the first test case, Luke can set \n    v\n to\n\n    5\n before he starts to walk. And he can walk straight to eat every piles\nof food without changing \n    v\n. In the second test case, Luke can set\n\n    v\n to \n    3\n before he starts to walk. And he could change \n    v\n to\n\n    10\n before he eats the second pile. After that, he can walk straight to\neat remaining food without changing \n    v\n. In the fourth test case, Luke can\nset \n    v\n to \n    3\n before he starts to walk. And he could change \n    v\n\nto \n    8\n before he eats the sixth pile. After that, he can walk straight to\neat remaining food without changing \n    v\n. In the fifth test case, Luke can\nset \n    v\n to \n    4\n before he starts to walk. And he could change \n    v\n\nto \n    6\n before he eats the fourth pile. Then he could change \n    v\n to\n\n    12\n before he eats the seventh pile. After that, he can walk straight to\neat remaining food without changing \n    v\n.\n\n",
        "cf_contest_id": 1704,
        "cf_index": "B",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n5 3\r\n3 8 5 6 7\r\n5 3\r\n3 10 9 8 7\r\n12 8\r\n25 3 3 17 8 6 1 16 15 25 17 23\r\n10 2\r\n1 2 3 4 5 6 7 8 9 10\r\n8 2\r\n2 4 6 8 6 4 12 14\r\n8 2\r\n2 7 8 9 6 13 21 28\r\n15 5\r\n11 4 13 23 7 10 5 21 20 11 17 5 29 16 11\r\n",
                "0\r\n1\r\n2\r\n1\r\n2\r\n4\r\n6\r\n"
            ]
        ],
        "private_cases": []
    }
]