[
    {
        "name": "Labyrinth Adventures",
        "description": "You found a map of a weirdly shaped labyrinth. The map is a grid, consisting\nof \n    n\n rows and \n    n\n columns. The rows of the grid are numbered from\n\n    1\n to \n    n\n from bottom to top. The columns of the grid are numbered\nfrom \n    1\n to \n    n\n from left to right. The labyrinth has \n    n\n layers.\nThe first layer is the bottom left corner (cell \n    (1, 1)\n). The second\nlayer consists of all cells that are in the grid and adjacent to the first\nlayer by a side or a corner. The third layer consists of all cells that are in\nthe grid and adjacent to the second layer by a side or a corner. And so on.\nThe labyrinth with \n    5\n layers, for example, is shaped as follows: The\nlayers are separated from one another with walls. However, there are doors in\nthese walls. Each layer (except for layer \n    n\n) has exactly two doors to\nthe next layer. One door is placed on the top wall of the layer and another\ndoor is placed on the right wall of the layer. For each layer from \n    1\n to\n\n    n-1\n you are given positions of these two doors. The doors can be passed\nin both directions: either from layer \n    i\n to layer \n    i+1\n or from layer\n\n    i+1\n to layer \n    i\n. If you are standing in some cell, you can move to\nan adjacent by a side cell if a wall doesn't block your move (e.g. you can't\nmove to a cell in another layer if there is no door between the cells). Now\nyou have \n    m\n queries of sort: what's the minimum number of moves one has\nto make to go from cell \n    (x_1, y_1)\n to cell \n    (x_2, y_2)\n. Input The\nfirst line contains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 10^5\n) \u2014\nthe number of layers in the labyrinth. The \n    i\n-th of the next \n    n-1\n\nlines contains four integers \n    d_1,x, d_1,y, d_2,x\n and \n    d_2,y\n\n(\n    1 \n    \u2264 d_1,x, d_1,y, d_2,x, d_2,y\n    \u2264 n\n) \u2014 the coordinates\nof the doors. Both cells are on the \n    i\n-th layer. The first cell is\nadjacent to the top wall of the \n    i\n-th layer by a side \u2014 that side is\nwhere the door is. The second cell is adjacent to the right wall of the\n\n    i\n-th layer by a side \u2014 that side is where the door is. The next line\ncontains a single integer \n    m\n (\n    1 \n    \u2264 m \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the\nnumber of queries. The \n    j\n-th of the next \n    m\n lines contains four\nintegers \n    x_1, y_1, x_2\n and \n    y_2\n (\n    1 \n    \u2264 x_1, y_1, x_2, y_2\n    \n    \u2264 n\n) \u2014 the coordinates of the cells in the \n    j\n-th query. Output For\neach query, print a single integer \u2014 the minimum number of moves one has to\nmake to go from cell \n    (x_1, y_1)\n to cell \n    (x_2, y_2)\n. Examples Input\n2 1 1 1 1 10 1 1 1 1 1 1 1 2 1 1 2 1 1 1 2 2 1 2 1 2 1 2 2 1 1 2 2 2 2 1 2 1 2\n1 2 2 2 2 2 2 Output 0 1 1 2 0 2 1 0 1 0 Input 4 1 1 1 1 2 1 2 2 3 2 1 3 5 2 4\n4 3 4 4 3 3 1 2 3 3 2 2 4 4 1 4 2 3 Output 3 4 3 6 2 Note Here is the map of\nthe labyrinth from the second example. The doors are marked red.\n\n",
        "cf_contest_id": 1681,
        "cf_index": "E",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp",
            "matrices",
            "shortest paths"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "2\r\n1 1 1 1\r\n10\r\n1 1 1 1\r\n1 1 1 2\r\n1 1 2 1\r\n1 1 2 2\r\n1 2 1 2\r\n1 2 2 1\r\n1 2 2 2\r\n2 1 2 1\r\n2 1 2 2\r\n2 2 2 2\r\n",
                "0\r\n1\r\n1\r\n2\r\n0\r\n2\r\n1\r\n0\r\n1\r\n0\r\n"
            ],
            [
                "4\r\n1 1 1 1\r\n2 1 2 2\r\n3 2 1 3\r\n5\r\n2 4 4 3\r\n4 4 3 3\r\n1 2 3 3\r\n2 2 4 4\r\n1 4 2 3\r\n",
                "3\r\n4\r\n3\r\n6\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n1 1 1 1\r\n2 1 1 2\r\n3\r\n3 3 1 1\r\n2 2 3 2\r\n1 1 2 3\r\n",
                "4\r\n3\r\n3\r\n"
            ],
            [
                "5\r\n1 1 1 1\r\n2 1 1 2\r\n3 1 3 3\r\n4 3 4 4\r\n5\r\n2 5 1 2\r\n1 1 5 2\r\n5 4 3 3\r\n2 2 1 2\r\n2 5 3 5\r\n",
                "8\r\n7\r\n5\r\n1\r\n1\r\n"
            ],
            [
                "10\r\n1 1 1 1\r\n2 2 1 2\r\n3 1 2 3\r\n4 4 1 4\r\n5 3 1 5\r\n6 2 4 6\r\n7 2 2 7\r\n8 6 7 8\r\n9 6 6 9\r\n10\r\n3 3 6 6\r\n2 2 6 7\r\n1 9 4 9\r\n7 6 4 1\r\n9 6 9 7\r\n6 3 7 8\r\n2 2 10 8\r\n9 10 7 9\r\n9 4 1 3\r\n4 2 2 6\r\n",
                "10\r\n13\r\n3\r\n12\r\n1\r\n10\r\n20\r\n5\r\n17\r\n8\r\n"
            ],
            [
                "2\r\n1 1 1 1\r\n1\r\n1 2 1 1\r\n",
                "1\r\n"
            ]
        ]
    }
]