[
    {
        "name": "Good Key, Bad Key",
        "description": "There are \n    n\n chests. The \n    i\n-th chest contains \n    a_i\n coins. You\nneed to open all \n    n\n chests in order from chest \n    1\n to chest \n    n\n.\nThere are two types of keys you can use to open a chest: a good key, which\ncosts \n    k\n coins to use; a bad key, which does not cost any coins, but will\nhalve all the coins in each unopened chest, including the chest it is about to\nopen. The halving operation will round down to the nearest integer for each\nchest halved. In other words using a bad key to open chest \n    i\n will do\n\n    a_i = \n    \u230a\n    a_i/2\n    \u230b\n, \n    a_i+1 =\n    \n    \u230a\n    a_i+1/2\n    \u230b, \n    \u2026, a_n = \n    \u230a\n    a_n/2\n    \u230b\n; any key (both good and bad) breaks after a usage,\nthat is, it is a one-time use. You need to use in total \n    n\n keys, one for\neach chest. Initially, you have no coins and no keys. If you want to use a\ngood key, then you need to buy it. During the process, you are allowed to go\ninto debt; for example, if you have \n    1\n coin, you are allowed to buy a\ngood key worth \n    k=3\n coins, and your balance will become \n    -2\n coins.\nFind the maximum number of coins you can have after opening all \n    n\n chests\nin order from chest \n    1\n to chest \n    n\n. Input The first line contains a\nsingle integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test\ncases. The first line of each test case contains two integers \n    n\n and\n\n    k\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n; \n    0 \n    \u2264 k \n    \u2264 10^9\n) \u2014 the\nnumber of chests and the cost of a good key respectively. The second line of\neach test case contains \n    n\n integers \n    a_i\n (\n    0 \n    \u2264 a_i \n    \u2264\n    10^9\n) \u2014 the amount of coins in each chest. The sum of \n    n\n over all test\ncases does not exceed \n    10^5\n. Output For each test case output a single\ninteger \u2014 the maximum number of coins you can obtain after opening the chests\nin order from chest \n    1\n to chest \n    n\n. Please note, that the answer for\nsome test cases won't fit into 32-bit integer type, so you should use at least\n64-bit integer type in your programming language (like long long for C++).\nExample Input 5 4 5 10 10 3 1 1 2 1 3 12 10 10 29 12 51 5 74 89 45 18 69 67 67\n11 96 23 59 2 57 85 60 Output 11 0 13 60 58 Note In the first test case, one\npossible strategy is as follows: Buy a good key for \n    5\n coins, and open\nchest \n    1\n, receiving \n    10\n coins. Your current balance is \n    0 + 10 - 5\n    = 5\n coins. Buy a good key for \n    5\n coins, and open chest \n    2\n,\nreceiving \n    10\n coins. Your current balance is \n    5 + 10 - 5 = 10\n coins.\nUse a bad key and open chest \n    3\n. As a result of using a bad key, the\nnumber of coins in chest \n    3\n becomes \n    \u230a\n    3/2\n    \n    \u230b = 1\n, and the number of coins in chest \n    4\n becomes\n\n    \u230a\n    1/2\n    \n    \u230b = 0\n. Your current\nbalance is \n    10 + 1 = 11\n. Use a bad key and open chest \n    4\n. As a\nresult of using a bad key, the number of coins in chest \n    4\n becomes\n\n    \u230a\n    0/2\n    \n    \u230b = 0\n. Your current\nbalance is \n    11 + 0 = 11\n. At the end of the process, you have \n    11\n\ncoins, which can be proven to be maximal.\n\n",
        "cf_contest_id": 1703,
        "cf_index": "G",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "dp",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n4 5\r\n10 10 3 1\r\n1 2\r\n1\r\n3 12\r\n10 10 29\r\n12 51\r\n5 74 89 45 18 69 67 67 11 96 23 59\r\n2 57\r\n85 60\r\n",
                "11\r\n0\r\n13\r\n60\r\n58\r\n"
            ]
        ],
        "private_cases": []
    }
]