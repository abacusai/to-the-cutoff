[
    {
        "name": "Hide and Seek",
        "description": "Alice and Bob are playing a game on a line with \n    n\n cells. There are\n\n    n\n cells labeled from \n    1\n through \n    n\n. For each \n    i\n from\n\n    1\n to \n    n-1\n, cells \n    i\n and \n    i+1\n are adjacent. Alice\ninitially has a token on some cell on the line, and Bob tries to guess where\nit is. Bob guesses a sequence of line cell numbers \n    x_1, x_2, \n    \u2026,\n    x_k\n in order. In the \n    i\n-th question, Bob asks Alice if her token is\ncurrently on cell \n    x_i\n. That is, Alice can answer either \"YES\" or \"NO\" to\neach Bob's question. At most one time in this process, before or after\nanswering a question, Alice is allowed to move her token from her current cell\nto some adjacent cell. Alice acted in such a way that she was able to answer\n\"NO\" to all of Bob's questions. Note that Alice can even move her token before\nanswering the first question or after answering the last question. Alice can\nalso choose to not move at all. You are given \n    n\n and Bob's questions\n\n    x_1, \n    \u2026, x_k\n. You would like to count the number of scenarios that\nlet Alice answer \"NO\" to all of Bob's questions. Let \n    (a,b)\n denote a\nscenario where Alice starts at cell \n    a\n and ends at cell \n    b\n. Two\nscenarios \n    (a_i, b_i)\n and \n    (a_j, b_j)\n are different if \n    a_i \n    \u2260\n    a_j\n or \n    b_i \n    \u2260 b_j\n. Input The first line contains two integers\n\n    n\n and \n    k\n (\n    1 \n    \u2264 n,k \n    \u2264 10^5\n) \u2014 the number of cells and\nthe number of questions Bob asked. The second line contains \n    k\n integers\n\n    x_1, x_2, \n    \u2026, x_k\n (\n    1 \n    \u2264 x_i \n    \u2264 n\n) \u2014 Bob's questions.\nOutput Print a single integer, the number of scenarios that let Alice answer\n\"NO\" to all of Bob's questions. Examples Input 5 3 5 1 4 Output 9 Input 4 8 1\n2 3 4 4 3 2 1 Output 0 Input 100000 1 42 Output 299997 Note The notation\n\n    (i,j)\n denotes a scenario where Alice starts at cell \n    i\n and ends at\ncell \n    j\n. In the first example, the valid scenarios are \n    (1, 2), (2, 1),\n    (2, 2), (2, 3), (3, 2), (3, 3), (3, 4), (4, 3), (4, 5)\n. For example,\n\n    (3,4)\n is valid since Alice can start at cell \n    3\n, stay there for the\nfirst three questions, then move to cell \n    4\n after the last question.\n\n    (4,5)\n is valid since Alice can start at cell \n    4\n, stay there for the\nfirst question, the move to cell \n    5\n for the next two questions. Note that\n\n    (4,5)\n is only counted once, even though there are different questions\nthat Alice can choose to do the move, but remember, we only count each pair of\nstarting and ending positions once. In the second example, Alice has no valid\nscenarios. In the last example, all \n    (i,j)\n where \n    |i-j| \n    \u2264 1\n\nexcept for \n    (42, 42)\n are valid scenarios.\n\n",
        "cf_contest_id": 1147,
        "cf_index": "A",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "graphs"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 3\r\n5 1 4\r\n",
                "9"
            ],
            [
                "4 8\r\n1 2 3 4 4 3 2 1\r\n",
                "0"
            ],
            [
                "100000 1\r\n42\r\n",
                "299997"
            ]
        ],
        "private_cases": [
            [
                "1 2\r\n1 1\r\n",
                "0"
            ],
            [
                "50 75\r\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50\r\n",
                "0"
            ],
            [
                "50000 30\r\n33549 17601 44000 7481 38819 15862 27683 21020 24720 399 14593 35601 41380 25049 46665 32822 24640 11058 26495 34522 49913 18477 12333 4947 30203 26721 3805 7259 42643 4522\r\n",
                "149968"
            ],
            [
                "300 20\r\n283 157 216 37 287 120 17 154 90 138 96 222 171 273 269 230 198 247 87 299\r\n",
                "878"
            ]
        ]
    }
]