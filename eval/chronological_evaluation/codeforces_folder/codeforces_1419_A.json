[
    {
        "name": "Digit Game",
        "description": "Everyone knows that agents in Valorant decide, who will play as attackers, and\nwho will play as defenders. To do that Raze and Breach decided to play \n    t\n\nmatches of a digit game... In each of \n    t\n matches of the digit game, a\npositive integer is generated. It consists of \n    n\n digits. The digits of\nthis integer are numerated from \n    1\n to \n    n\n from the highest-order\ndigit to the lowest-order digit. After this integer is announced, the match\nstarts. Agents play in turns. Raze starts. In one turn an agent can choose any\nunmarked digit and mark it. Raze can choose digits on odd positions, but can\nnot choose digits on even positions. Breach can choose digits on even\npositions, but can not choose digits on odd positions. The match ends, when\nthere is only one unmarked digit left. If the single last digit is odd, then\nRaze wins, else Breach wins. It can be proved, that before the end of the\nmatch (for every initial integer with \n    n\n digits) each agent has an\nability to make a turn, i.e. there is at least one unmarked digit, that stands\non a position of required parity. For each of \n    t\n matches find out, which\nagent wins, if both of them want to win and play optimally. Input First line\nof input contains an integer \n    t\n \n    (1 \n    \u2264 t \n    \u2264 100)\n \u2014 the number\nof matches. The first line of each match description contains an integer\n\n    n\n \n    (1 \n    \u2264 n \n    \u2264 10^3)\n \u2014 the number of digits of the generated\nnumber. The second line of each match description contains an \n    n\n-digit\npositive integer without leading zeros. Output For each match print \n    1\n,\nif Raze wins, and \n    2\n, if Breach wins. Example Input 4 1 2 1 3 3 102 4\n2069 Output 2 1 1 2 Note In the first match no one can make a turn, the only\ndigit left is \n    2\n, it's even, so Breach wins. In the second match the only\ndigit left is \n    3\n, it's odd, so Raze wins. In the third match Raze can\nmark the last digit, after that Breach can only mark \n    0\n. \n    1\n will be\nthe last digit left, it's odd, so Raze wins. In the fourth match no matter how\nRaze plays, Breach can mark \n    9\n, and in the end there will be digit\n\n    0\n. It's even, so Breach wins.\n\n",
        "cf_contest_id": 1419,
        "cf_index": "A",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "games",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1\r\n2\r\n1\r\n3\r\n3\r\n102\r\n4\r\n2069\r\n",
                "2\r\n1\r\n1\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n3\r\n212\r\n2\r\n11\r\n",
                "2\r\n1\r\n"
            ],
            [
                "1\r\n33\r\n200000000000000000000000000000022\r\n",
                "2\r\n"
            ],
            [
                "1\r\n3\r\n101\r\n",
                "1\r\n"
            ],
            [
                "1\r\n3\r\n999\r\n",
                "1\r\n"
            ],
            [
                "1\r\n2\r\n11\r\n",
                "1\r\n"
            ],
            [
                "1\r\n3\r\n212\r\n",
                "2\r\n"
            ],
            [
                "1\r\n3\r\n222\r\n",
                "2\r\n"
            ],
            [
                "1\r\n2\r\n21\r\n",
                "1\r\n"
            ],
            [
                "1\r\n4\r\n1212\r\n",
                "2\r\n"
            ],
            [
                "4\r\n1\r\n2\r\n1\r\n3\r\n4\r\n2068\r\n4\r\n2069\r\n",
                "2\r\n1\r\n2\r\n2\r\n"
            ],
            [
                "1\r\n4\r\n2121\r\n",
                "1\r\n"
            ],
            [
                "1\r\n4\r\n1101\r\n",
                "1\r\n"
            ],
            [
                "1\r\n3\r\n224\r\n",
                "2\r\n"
            ],
            [
                "1\r\n4\r\n2323\r\n",
                "1\r\n"
            ],
            [
                "1\r\n5\r\n21212\r\n",
                "2\r\n"
            ],
            [
                "1\r\n2\r\n13\r\n",
                "1\r\n"
            ],
            [
                "1\r\n4\r\n2169\r\n",
                "1\r\n"
            ],
            [
                "1\r\n2\r\n15\r\n",
                "1\r\n"
            ],
            [
                "1\r\n5\r\n15293\r\n",
                "1\r\n"
            ],
            [
                "1\r\n2\r\n39\r\n",
                "1\r\n"
            ],
            [
                "1\r\n4\r\n1111\r\n",
                "1\r\n"
            ],
            [
                "1\r\n5\r\n22222\r\n",
                "2\r\n"
            ]
        ]
    }
]