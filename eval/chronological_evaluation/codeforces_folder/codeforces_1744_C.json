[
    {
        "name": "Traffic Light",
        "description": "You find yourself on an unusual crossroad with a weird traffic light. That\ntraffic light has three possible colors: red (r), yellow (y), green (g). It is\nknown that the traffic light repeats its colors every \n    n\n seconds and at\nthe \n    i\n-th second the color \n    s_i\n is on. That way, the order of the\ncolors is described by a string. For example, if \n    s=\n\"rggry\", then the\ntraffic light works as the following: red-green-green-red-yellow-red-green-\ngreen-red-yellow- ... and so on. More formally, you are given a string \n    s_1,\n    s_2, \n    \u2026, s_n\n of length \n    n\n. At the first second the color\n\n    s_1\n is on, at the second \u2014 \n    s_2\n, ..., at the \n    n\n-th second the\ncolor \n    s_n\n is on, at the \n    n + 1\n-st second the color \n    s_1\n is on\nand so on. You need to cross the road and that can only be done when the green\ncolor is on. You know which color is on the traffic light at the moment, but\nyou don't know the current moment of time. You need to find the minimum amount\nof time in which you are guaranteed to cross the road. You can assume that you\ncross the road immediately. For example, with \n    s=\n\"rggry\" and the current\ncolor r there are two options: either the green color will be on after \n    1\n\nsecond, or after \n    3\n. That way, the answer is equal to \n    3\n \u2014 that is\nthe number of seconds that we are guaranteed to cross the road, if the current\ncolor is r. Input The first line contains a single integer \n    t\n \n    (1\n    \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. Then the description of\nthe test cases follows. The first line of each test case contains an integer\n\n    n\n and a symbol \n    c\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n, \n    c\n\nis one of allowed traffic light colors r, y or g)\u2014 the length of the string\n\n    s\n and the current color of the traffic light. The second line of each\ntest case contains a string \n    s\n of the length \n    n\n, consisting of the\nletters r, y and g. It is guaranteed that the symbol g is in the string\n\n    s\n and the symbol \n    c\n is in the string \n    s\n. It is guaranteed,\nthat the sum of \n    n\n over all test cases does not exceed\n\n    2\n    \u00b710^5\n. Output For each test case output the minimal number of\nsecond in which you are guaranteed to cross the road. Example Input 6 5 r\nrggry 1 g g 3 r rrg 5 y yrrgy 7 r rgrgyrg 9 y rrrgyyygy Output 3 0 2 4 1 4\nNote The first test case is explained in the statement. In the second test\ncase the green color is on so you can cross the road immediately. In the third\ntest case, if the red color was on at the second second, then we would wait\nfor the green color for one second, and if the red light was on at the first\nsecond, then we would wait for the green light for two seconds. In the fourth\ntest case the longest we would wait for the green color is if we wait for it\nstarting from the fifth second.\n\n",
        "cf_contest_id": 1744,
        "cf_index": "C",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "implementation",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n5 r\r\nrggry\r\n1 g\r\ng\r\n3 r\r\nrrg\r\n5 y\r\nyrrgy\r\n7 r\r\nrgrgyrg\r\n9 y\r\nrrrgyyygy\r\n",
                "3\r\n0\r\n2\r\n4\r\n1\r\n4\r\n"
            ]
        ],
        "private_cases": []
    }
]