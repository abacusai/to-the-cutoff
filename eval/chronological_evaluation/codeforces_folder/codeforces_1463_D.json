[
    {
        "name": "Pairs",
        "description": "You have \n    2n\n integers \n    1, 2, \n    \u2026, 2n\n. You have to redistribute\nthese \n    2n\n elements into \n    n\n pairs. After that, you choose \n    x\n\npairs and take minimum elements from them, and from the other \n    n - x\n\npairs, you take maximum elements. Your goal is to obtain the set of numbers\n\n    b_1, b_2, \n    \u2026, b_n\n as the result of taking elements from\nthe pairs. What is the number of different \n    x\n-s (\n    0 \n    \u2264 x \n    \u2264 n\n)\nsuch that it's possible to obtain the set \n    b\n if for each \n    x\n you can\nchoose how to distribute numbers into pairs and from which \n    x\n pairs\nchoose minimum elements? Input The first line contains a single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of test cases. The first\nline of each test case contains the integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n). The second line of each test case contains \n    n\n integers\n\n    b_1, b_2, \n    \u2026, b_n\n (\n    1 \n    \u2264 b_1 < b_2 < \n    \u2026 < b_n \n    \u2264\n    2n\n) \u2014 the set you'd like to get. It's guaranteed that the sum of \n    n\n\nover test cases doesn't exceed \n    2 \n    \u00b7 10^5\n. Output For each test\ncase, print one number \u2014 the number of different \n    x\n-s such that it's\npossible to obtain the set \n    b\n. Example Input 3 1 1 5 1 4 5 9 10 2 3 4\nOutput 1 3 1 Note In the first test case, \n    x = 1\n is the only option: you\nhave one pair \n    (1, 2)\n and choose the minimum from this pair. In the\nsecond test case, there are three possible \n    x\n-s. If \n    x = 1\n, then you\ncan form the following pairs: \n    (1, 6)\n, \n    (2, 4)\n, \n    (3, 5)\n, \n    (7,\n    9)\n, \n    (8, 10)\n. You can take minimum from \n    (1, 6)\n (equal to\n\n    1\n) and the maximum elements from all other pairs to get set \n    b\n. If\n\n    x = 2\n, you can form pairs \n    (1, 2)\n, \n    (3, 4)\n, \n    (5, 6)\n,\n\n    (7, 9)\n, \n    (8, 10)\n and take the minimum elements from \n    (1, 2)\n,\n\n    (5, 6)\n and the maximum elements from the other pairs. If \n    x = 3\n,\nyou can form pairs \n    (1, 3)\n, \n    (4, 6)\n, \n    (5, 7)\n, \n    (2, 9)\n,\n\n    (8, 10)\n and take the minimum elements from \n    (1, 3)\n, \n    (4, 6)\n,\n\n    (5, 7)\n. In the third test case, \n    x = 0\n is the only option: you can\nform pairs \n    (1, 3)\n, \n    (2, 4)\n and take the maximum elements from both\nof them.\n\n",
        "cf_contest_id": 1463,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "constructive algorithms",
            "greedy",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1\r\n1\r\n5\r\n1 4 5 9 10\r\n2\r\n3 4\r\n",
                "1\r\n3\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]