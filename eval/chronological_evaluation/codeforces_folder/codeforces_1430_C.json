[
    {
        "name": "Numbers on Whiteboard",
        "description": "Numbers \n    1, 2, 3, \n    \u2026 n\n (each integer from \n    1\n to \n    n\n once)\nare written on a board. In one operation you can erase any two numbers \n    a\n\nand \n    b\n from the board and write one integer \n    a + b/2\n\nrounded up instead. You should perform the given operation \n    n - 1\n times\nand make the resulting number that will be left on the board as small as\npossible. For example, if \n    n = 4\n, the following course of action is\noptimal: choose \n    a = 4\n and \n    b = 2\n, so the new number is \n    3\n, and\nthe whiteboard contains \n    [1, 3, 3]\n; choose \n    a = 3\n and \n    b = 3\n,\nso the new number is \n    3\n, and the whiteboard contains \n    [1, 3]\n; choose\n\n    a = 1\n and \n    b = 3\n, so the new number is \n    2\n, and the whiteboard\ncontains \n    [2]\n. It's easy to see that after \n    n - 1\n operations, there\nwill be left only one number. Your goal is to minimize it. Input The first\nline contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of\ntest cases. The only line of each test case contains one integer \n    n\n (\n    2\n    \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of integers written on the board\ninitially. It's guaranteed that the total sum of \n    n\n over test cases\ndoesn't exceed \n    2 \n    \u00b7 10^5\n. Output For each test case, in the first\nline, print the minimum possible number left on the board after \n    n - 1\n\noperations. Each of the next \n    n - 1\n lines should contain two integers \u2014\nnumbers \n    a\n and \n    b\n chosen and erased in each operation. Example Input\n1 4 Output 2 2 4 3 3 3 1\n\n",
        "cf_contest_id": 1430,
        "cf_index": "C",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n4\r\n",
                "2\r\n3 4\r\n2 4\r\n1 3\r\n"
            ]
        ],
        "private_cases": []
    }
]