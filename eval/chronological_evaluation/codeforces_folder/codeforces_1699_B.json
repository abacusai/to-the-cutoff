[
    {
        "name": "Almost Ternary Matrix",
        "description": "You are given two even integers \n    n\n and \n    m\n. Your task is to find any\nbinary matrix \n    a\n with \n    n\n rows and \n    m\n columns where every cell\n\n    (i,j)\n has exactly two neighbours with a different value than\n\n    a_i,j\n. Two cells in the matrix are considered neighbours if and only\nif they share a side. More formally, the neighbours of cell \n    (x,y)\n are:\n\n    (x-1,y)\n, \n    (x,y+1)\n, \n    (x+1,y)\n and \n    (x,y-1)\n. It can be\nproven that under the given constraints, an answer always exists. Input Each\ntest contains multiple test cases. The first line of input contains a single\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test cases. The\nfollowing lines contain the descriptions of the test cases. The only line of\neach test case contains two even integers \n    n\n and \n    m\n (\n    2 \n    \u2264 n,m\n    \n    \u2264 50\n) \u2014 the height and width of the binary matrix, respectively. Output\nFor each test case, print \n    n\n lines, each of which contains \n    m\n\nnumbers, equal to \n    0\n or \n    1\n \u2014 any binary matrix which satisfies the\nconstraints described in the statement. It can be proven that under the given\nconstraints, an answer always exists. Example Input 3 2 4 2 2 4 4 Output 1 0 0\n1 0 1 1 0 1 0 0 1 1 0 1 0 0 0 1 1 1 1 0 0 0 1 0 1 Note White means \n    0\n,\nblack means \n    1\n. The binary matrix from the first test caseThe binary\nmatrix from the second test caseThe binary matrix from the third test case\n\n",
        "cf_contest_id": 1699,
        "cf_index": "B",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "constructive algorithms",
            "matrices"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2 4\r\n2 2\r\n4 4\r\n",
                " 0 1 1 0 1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0"
            ]
        ],
        "private_cases": []
    }
]