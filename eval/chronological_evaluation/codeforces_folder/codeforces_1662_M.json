[
    {
        "name": "Bottle Arrangements",
        "description": "Gabriella has been instructed to organize a renowned wine tasting event which\nwill be attended by \n    m\n critics. On display, there will be \n    n\n\ndifferent varieties of wine, each of which can either be a red wine or a white\nwine. The wines will come in \n    n\n bottles arranged in a line on the table,\nand, for convenience, each critic will sip from a contiguous interval of\nbottles: that is, he/she will taste exactly the bottles at position \n    a, \n     \n    a + 1, \n     \n    \u2026, \n      b\n for some \n    1 \n    \u2264 a \n    \u2264 b \n    \u2264 n\n. The\ninterval depends on the critic, who will select it on the spot according to\ntheir preferences. In fact, the \n    i\n-th critic (\n    1 \n    \u2264 i \n    \u2264 m\n)\nhas requested that he/she wants to taste exactly \n    r_i\n red wines and\n\n    w_i\n white wines. Gabriella has yet to choose how many bottles of red\nwine and white wine there will be, and in what order they will appear. Help\nher find an arrangement (that is, a sequence of \n    n\n bottles of either red\nor white wine) that satisfies the requests of all the critics, or state that\nno such arrangement exists. Input Each test contains multiple test cases. The\nfirst line contains an integer \n    t\n (\n    1\n    \u2264 t\n    \u2264 100\n) \u2014 the number\nof test cases. The descriptions of the \n    t\n test cases follow. The first\nline of each test case contains two integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n\n    \n    \u2264 100\n, \n    1 \n    \u2264 m \n    \u2264 100\n) \u2014 the number of bottles of wine and\nthe number of critics. Each of the next \n    m\n lines contains two integers\n\n    r_i\n and \n    w_i\n (\n    0 \n    \u2264 r_i, \n      w_i \n    \u2264 100\n, \n    r_i + w_i\n    \n    \u2265 1\n) \u2014 the number of red and white wines that the \n    i\n-th critic\nwants to taste. Output For each test case, if at least one solution exists,\nprint a string of length \n    n\n made up of the characters R and W, where the\n\n    j\n-th character (\n    1 \n    \u2264 j \n    \u2264 n\n) denotes the type of the wine in\nthe \n    j\n-th bottle of the arrangement (R for red and W for white). If there\nare multiple solutions, print any. If no solution exists, print the string\nIMPOSSIBLE. Example Input 3 5 3 1 0 3 2 2 2 4 3 2 1 1 1 0 3 3 2 0 2 0 3 Output\nRWRRW IMPOSSIBLE WWW Note In the first test case, there are \n    n = 5\n\nbottles of wine to be arranged and \n    m = 3\n critics. The arrangement RWRRW\nsatisfies the requests of all three critics. Indeed: the first critic can\nchoose the interval \n    [3, \n      3]\n, which contains exactly one bottle of\nred wine (note that \n    [1, \n      1]\n and \n    [4, \n      4]\n are other valid\nchoices); the second critic can choose the interval \n    [1, \n      5]\n, which\ncontains \n    3\n bottles of red wine and \n    2\n bottles of white wine; the\nthird critic can choose the interval \n    [2, \n      5]\n, which contains \n    2\n\nbottles of red wine and \n    2\n bottles of white wine.\n\n",
        "cf_contest_id": 1662,
        "cf_index": "M",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n5 3\r\n1 0\r\n3 2\r\n2 2\r\n4 3\r\n2 1\r\n1 1\r\n0 3\r\n3 2\r\n0 2\r\n0 3\r\n",
                "RRRWW\r\nIMPOSSIBLE\r\nWWW\r\n"
            ]
        ],
        "private_cases": []
    }
]