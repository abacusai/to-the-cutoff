[
    {
        "name": "Phone Code",
        "description": "Polycarpus has n friends in Tarasov city. Polycarpus knows phone numbers of\nall his friends: they are strings s1, s2, ..., sn. All these strings consist\nonly of digits and have the same length. Once Polycarpus needed to figure out\nTarasov city phone code. He assumed that the phone code of the city is the\nlongest common prefix of all phone numbers of his friends. In other words, it\nis the longest string c which is a prefix (the beginning) of each si for all i\n(1 \u2264 i \u2264 n). Help Polycarpus determine the length of the city phone code.\nInput The first line of the input contains an integer n (2 \u2264 n \u2264 3\u00b710^4) \u2014 the\nnumber of Polycarpus's friends. The following n lines contain strings s1, s2,\n..., sn \u2014 the phone numbers of Polycarpus's friends. It is guaranteed that all\nstrings consist only of digits and have the same length from 1 to 20,\ninclusive. It is also guaranteed that all strings are different. Output Print\nthe number of digits in the city phone code. Examples Input 4 00209 00219\n00999 00909 Output 2 Input 2 1 2 Output 0 Input 3 77012345678999999999\n77012345678901234567 77012345678998765432 Output 12 Note A prefix of string t\nis a string that is obtained by deleting zero or more digits from the end of\nstring t. For example, string \"00209\" has 6 prefixes: \"\" (an empty prefix),\n\"0\", \"00\", \"002\", \"0020\", \"00209\". In the first sample the city phone code is\nstring \"00\". In the second sample the city phone code is an empty string. In\nthe third sample the city phone code is string \"770123456789\".\n\n",
        "cf_contest_id": 172,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "brute force",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n00209\r\n00219\r\n00999\r\n00909\r\n",
                "2\r\n"
            ],
            [
                "2\r\n1\r\n2\r\n",
                "0\r\n"
            ],
            [
                "3\r\n77012345678999999999\r\n77012345678901234567\r\n77012345678998765432\r\n",
                "12\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n4491183345\r\n4491184811\r\n4491162340\r\n4491233399\r\n4491449214\r\n",
                "4\r\n"
            ],
            [
                "10\r\n15424\r\n10953\r\n19176\r\n15514\r\n16284\r\n18680\r\n19305\r\n13816\r\n16168\r\n15924\r\n",
                "1\r\n"
            ],
            [
                "10\r\n4906361343\r\n8985777485\r\n1204265609\r\n7088384855\r\n4127287014\r\n7904807820\r\n3032139021\r\n5999959109\r\n6477458281\r\n3244359368\r\n",
                "0\r\n"
            ],
            [
                "10\r\n3717208309\r\n3717208306\r\n3717208302\r\n3717208301\r\n3717208303\r\n3717208308\r\n3717208304\r\n3717208307\r\n3717208300\r\n3717208305\r\n",
                "9\r\n"
            ],
            [
                "9\r\n2881\r\n2808\r\n2868\r\n2874\r\n2894\r\n2870\r\n2818\r\n2896\r\n2890\r\n",
                "2\r\n"
            ],
            [
                "2\r\n4\r\n9\r\n",
                "0\r\n"
            ],
            [
                "2\r\n29867863763143509570\r\n59261213969200291523\r\n",
                "0\r\n"
            ],
            [
                "2\r\n84\r\n62\r\n",
                "0\r\n"
            ],
            [
                "2\r\n75970434466248453472\r\n75970434466248453476\r\n",
                "19\r\n"
            ],
            [
                "10\r\n17254072509168593435\r\n17254072509168593433\r\n17254072509168593430\r\n17254072509168593432\r\n17254072509168593439\r\n17254072509168593436\r\n17254072509168593438\r\n17254072509168593437\r\n17254072509168593431\r\n17254072509168593434\r\n",
                "19\r\n"
            ]
        ]
    }
]