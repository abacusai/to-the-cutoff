[
    {
        "name": "Moment of Bloom",
        "description": "She does her utmost to flawlessly carry out a person's last rites and preserve\nthe world's balance of yin and yang. Hu Tao, being the little prankster she\nis, has tried to scare you with this graph problem! You are given a connected\nundirected graph of \n    n\n nodes with \n    m\n edges. You also have \n    q\n\nqueries. Each query consists of two nodes \n    a\n and \n    b\n. Initially, all\nedges in the graph have a weight of \n    0\n. For each query, you must choose a\nsimple path starting from \n    a\n and ending at \n    b\n. Then you add \n    1\n\nto every edge along this path. Determine if it's possible, after processing\nall \n    q\n queries, for all edges in this graph to have an even weight. If\nso, output the choice of paths for each query. If it is not possible,\ndetermine the smallest number of extra queries you could add to make it\npossible. It can be shown that this number will not exceed \n    10^18\n under\nthe given constraints. A simple path is defined as any path that does not\nvisit a node more than once. An edge is said to have an even weight if its\nvalue is divisible by \n    2\n. Input The first line contains two integers\n\n    n\n and \n    m\n (\n    2 \n    \u2264 n \n    \u2264 3 \n    \u00b7 10^5\n, \n    n-1 \n    \u2264 m\n    \n    \u2264\n    min\n    (\n    n(n-1)/2, 3 \n    \u00b7 10^5\n    )\n). Each\nof the next \n    m\n lines contains two integers \n    x\n and \n    y\n (\n    1\n    \n    \u2264 x, y \n    \u2264 n\n, \n    x\n    \u2260 y\n) indicating an undirected edge\nbetween node \n    x\n and \n    y\n. The input will not contain self-loops or\nduplicate edges, and the provided graph will be connected. The next line\ncontains a single integer \n    q\n (\n    1 \n    \u2264 q \n    \u2264 3 \n    \u00b7 10^5\n).\nEach of the next \n    q\n lines contains two integers \n    a\n and \n    b\n (\n    1\n    \n    \u2264 a, b \n    \u2264 n, a \n    \u2260 b\n), the description of each query. It is\nguaranteed that \n    nq \n    \u2264 3 \n    \u00b7 10^5\n. Output If it is possible to\nforce all edge weights to be even, print \"YES\" on the first line, followed by\n\n    2q\n lines indicating the choice of path for each query in the same order\nthe queries are given. For each query, the first line should contain a single\ninteger \n    x\n: the number of nodes in the chosen path. The next line should\nthen contain \n    x\n spaced separated integers \n    p_i\n indicating the path\nyou take (\n    p_1 = a, p_x = b\n and all numbers should fall between \n    1\n\nand \n    n\n). This path cannot contain duplicate nodes and must be a valid\nsimple path in the graph. If it is impossible to force all edge weights to be\neven, print \"NO\" on the first line and the minimum number of added queries on\nthe second line. Examples Input 6 7 2 1 2 3 3 5 1 4 6 1 5 6 4 5 3 1 4 5 1 4 5\nOutput YES 2 1 4 4 5 3 2 1 5 4 1 2 3 5 Input 5 7 4 3 4 5 2 1 1 4 1 3 3 5 3 2 4\n4 2 3 5 5 1 4 5 Output NO 2 Note Here is what the queries look like for the\nfirst test case (red corresponds to the 1st query, blue 2nd query, and green\n3rd query): Notice that every edge in the graph is part of either \n    0\n or\n\n    2\n colored query edges.The graph in the second test case looks like this:\nThere does not exist an assignment of paths that will force all edges to have\neven weights with the given queries. One must add at least \n    2\n new queries\nto obtain a set of queries that can satisfy the condition.\n\n",
        "cf_contest_id": 1583,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "graph matchings",
            "graphs",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "6 7\r\n2 1\r\n2 3\r\n3 5\r\n1 4\r\n6 1\r\n5 6\r\n4 5\r\n3\r\n1 4\r\n5 1\r\n4 5\r\n",
                "YES\r\n2\r\n1 4\r\n4\r\n5 3 2 1\r\n5\r\n4 1 2 3 5\r\n"
            ],
            [
                "5 7\r\n4 3\r\n4 5\r\n2 1\r\n1 4\r\n1 3\r\n3 5\r\n3 2\r\n4\r\n4 2\r\n3 5\r\n5 1\r\n4 5\r\n",
                "NO\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1\r\n2 1\r\n1\r\n2 1\r\n",
                "NO\r\n1\r\n"
            ]
        ]
    }
]