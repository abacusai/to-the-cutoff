[
    {
        "name": "Timofey and cubes",
        "description": "Young Timofey has a birthday today! He got kit of n cubes as a birthday\npresent from his parents. Every cube has a number ai, which is written on it.\nTimofey put all the cubes in a row and went to unpack other presents. In this\ntime, Timofey's elder brother, Dima reordered the cubes using the following\nrule. Suppose the cubes are numbered from 1 to n in their order. Dima performs\nseveral steps, on step i he reverses the segment of cubes from i-th to (n - i\n+ 1)-th. He does this while i \u2264 n - i + 1. After performing the operations\nDima went away, being very proud of himself. When Timofey returned to his\ncubes, he understood that their order was changed. Help Timofey as fast as you\ncan and save the holiday \u2014 restore the initial order of the cubes using\ninformation of their current location. Input The first line contains single\ninteger n (1 \u2264 n \u2264 2\u00b710^5) \u2014 the number of cubes. The second line contains n\nintegers a1, a2, ..., an ( - 10^9 \u2264 ai \u2264 10^9), where ai is the number written\non the i-th cube after Dima has changed their order. Output Print n integers,\nseparated by spaces \u2014 the numbers written on the cubes in their initial order.\nIt can be shown that the answer is unique. Examples Input 7 4 3 7 6 9 1 2\nOutput 2 3 9 6 7 1 4 Input 8 6 1 4 2 5 6 9 2 Output 2 1 6 2 5 4 9 6 Note\nConsider the first sample. At the begining row was [2, 3, 9, 6, 7, 1, 4].\nAfter first operation row was [4, 1, 7, 6, 9, 3, 2]. After second operation\nrow was [4, 3, 9, 6, 7, 1, 2]. After third operation row was [4, 3, 7, 6, 9,\n1, 2]. At fourth operation we reverse just middle element, so nothing has\nchanged. The final row is [4, 3, 7, 6, 9, 1, 2]. So the answer for this case\nis row [2, 3, 9, 6, 7, 1, 4].\n\n",
        "cf_contest_id": 764,
        "cf_index": "B",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n4 3 7 6 9 1 2\r\n",
                "2 3 9 6 7 1 4\r\n"
            ],
            [
                "8\r\n6 1 4 2 5 6 9 2\r\n",
                "2 1 6 2 5 4 9 6\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1424\r\n",
                "1424\r\n"
            ],
            [
                "9\r\n-7 9 -4 9 -6 11 15 2 -10\r\n",
                "-10 9 15 9 -6 11 -4 2 -7\r\n"
            ],
            [
                "2\r\n21968 5686\r\n",
                "5686 21968\r\n"
            ],
            [
                "5\r\n241218936 -825949895 -84926813 491336344 -872198236\r\n",
                "-872198236 -825949895 -84926813 491336344 241218936\r\n"
            ],
            [
                "42\r\n-557774624 828320986 -345782722 -62979938 -681259411 -945983652 -139095040 832293378 -82572118 432027535 88438103 568183540 961782904 73543295 615958219 -5050584 322982437 -146046730 759453379 129267920 -819827396 -348156048 805080102 390723009 -771277251 -79011872 -592313207 528489973 656201270 -127795621 17284747 145139617 -565641608 83452176 -223074608 545811186 -657981923 -204657836 154779765 -476867246 180386291 202782486\r\n",
                "202782486 828320986 -476867246 -62979938 -204657836 -945983652 545811186 832293378 83452176 432027535 145139617 568183540 -127795621 73543295 528489973 -5050584 -79011872 -146046730 390723009 129267920 -348156048 -819827396 805080102 759453379 -771277251 322982437 -592313207 615958219 656201270 961782904 17284747 88438103 -565641608 -82572118 -223074608 -139095040 -657981923 -681259411 154779765 -345782722 180386291 -557774624\r\n"
            ],
            [
                "2\r\n1 2\r\n",
                "2 1\r\n"
            ],
            [
                "6\r\n1 2 3 4 5 6\r\n",
                "6 2 4 3 5 1\r\n"
            ],
            [
                "4\r\n0 1 2 3\r\n",
                "3 1 2 0\r\n"
            ],
            [
                "10\r\n1 2 3 4 5 6 7 8 9 10\r\n",
                "10 2 8 4 6 5 7 3 9 1\r\n"
            ],
            [
                "2\r\n4 5\r\n",
                "5 4\r\n"
            ],
            [
                "2\r\n1 5\r\n",
                "5 1\r\n"
            ],
            [
                "2\r\n2 5\r\n",
                "5 2\r\n"
            ],
            [
                "2\r\n3 4\r\n",
                "4 3\r\n"
            ],
            [
                "2\r\n10 0\r\n",
                "0 10\r\n"
            ],
            [
                "66\r\n8229 5299 5562 1259 2258 1126 5026 8796 3497 7111 6680 1180 1426 4821 3322 3502 400 2951 4187 417 5234 1266 7525 7648 417 9297 174 670 1790 4121 9737 938 4616 3402 2009 2461 474 3728 327 3353 9773 6818 8781 874 2209 1260 1647 6126 9287 9638 5049 1256 4459 863 1835 4822 6809 348 5053 7784 6927 2140 9173 7817 5095 4184\r\n",
                "4184 5299 7817 1259 2140 1126 7784 8796 348 7111 4822 1180 863 4821 1256 3502 9638 2951 6126 417 1260 1266 874 7648 6818 9297 3353 670 3728 4121 2461 938 3402 4616 2009 9737 474 1790 327 174 9773 417 8781 7525 2209 5234 1647 4187 9287 400 5049 3322 4459 1426 1835 6680 6809 3497 5053 5026 6927 2258 9173 5562 5095 8229\r\n"
            ]
        ]
    }
]