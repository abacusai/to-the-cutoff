[
    {
        "name": "Find String in a Grid",
        "description": "You have a grid \n    G\n containing \n    R\n rows (numbered from \n    1\n to\n\n    R\n, top to bottom) and \n    C\n columns (numbered from \n    1\n to \n    C\n,\nleft to right) of uppercase characters. The character in the \n    r^th\n row\nand the \n    c^th\n column is denoted by \n    G_r, c\n. You also have\n\n    Q\n strings containing uppercase characters. For each of the string, you\nwant to find the number of occurrences of the string in the grid. An\noccurrence of string \n    S\n in the grid is counted if \n    S\n can be\nconstructed by starting at one of the cells in the grid, going right \n    0\n\nor more times, and then going down \n    0\n or more times. Two occurrences are\ndifferent if the set of cells used to construct the string is different.\nFormally, for each string \n    S\n, you would like to count the number of\ntuples \n    \u27e8 r, c, \n    \u0394 r, \n    \u0394 c \n    \u27e9\n such that: \n    1\n    \n    \u2264 r \n    \u2264 R\n and \n    r \n    \u2264 r + \n    \u0394 r \n    \u2264 R\n \n    1 \n    \u2264 c \n    \u2264\n    C\n and \n    c \n    \u2264 c + \n    \u0394 c \n    \u2264 C\n \n    S = G_r, c G_r, c + 1\n    \u2026 G_r, c + \n    \u0394 c G_r + 1, c + \n    \u0394 c\n    \u2026 G_r +\n    \n    \u0394 r, c + \n    \u0394 c\n Input Input begins with a line containing three\nintegers: \n    R\n \n    C\n \n    Q\n (\n    1 \n    \u2264 R, C \n    \u2264 500\n; \n    1 \n    \u2264 Q\n    \n    \u2264 200\n     000\n) representing the size of the grid and the number of\nstrings, respectively. The next \n    R\n lines each contains \n    C\n uppercase\ncharacters representing the grid. The \n    c^th\n character on the\n\n    r^th\n line is \n    G_r, c\n. The next \n    Q\n lines each contains a\nstring \n    S\n containing uppercase characters. The length of this string is a\npositive integer not more than \n    200\n     000\n. The sum of the length of all\n\n    Q\n strings combined is not more than \n    200\n     000\n. Output For each\nquery in the same order as input, output in a line an integer representing the\nnumber of occurrences of the string in the grid. Examples Input 3 3 5 ABC BCD\nDAB ABC BC BD AC A Output 2 3 1 0 2 Input 2 3 3 AAA AAA A AAA AAAAA Output 6 4\n0 Note Explanation for the sample input/output #1 There are \n    2\n\noccurrences of \"ABC\", represented by the tuples \n    \u27e8 1, 1, 1, 1\n    \n    \u27e9\n and \n    \u27e8 1, 1, 0, 2 \n    \u27e9\n. There are \n    3\n\noccurrences of \"BC\", represented by the tuples \n    \u27e8 1, 2, 0, 1\n    \n    \u27e9\n, \n    \u27e8 1, 2, 1, 0 \n    \u27e9\n, and \n    \u27e8 2, 1, 0,\n    1 \n    \u27e9\n. There is \n    1\n occurrence of \"BD\", represented by the tuple\n\n    \u27e8 2, 1, 1, 0 \n    \u27e9\n. There is no occurrence of \"AC\". There\nare \n    2\n occurrences of \"A\", represented by the tuples \n    \u27e8 1, 1,\n    0, 0 \n    \u27e9\n and \n    \u27e8 3, 2, 0, 0 \n    \u27e9\n.\n\n",
        "cf_contest_id": 1252,
        "cf_index": "D",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp",
            "strings",
            "trees"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [],
        "private_cases": []
    }
]