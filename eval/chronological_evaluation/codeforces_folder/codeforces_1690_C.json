[
    {
        "name": "Restoring the Duration of Tasks",
        "description": "Recently, Polycarp completed \n    n\n successive tasks. For each completed\ntask, the time \n    s_i\n is known when it was given, no two tasks were given\nat the same time. Also given is the time \n    f_i\n when the task was\ncompleted. For each task, there is an unknown value \n    d_i\n (\n    d_i>0\n) \u2014\nduration of task execution. It is known that the tasks were completed in the\norder in which they came. Polycarp performed the tasks as follows: As soon as\nthe very first task came, Polycarp immediately began to carry it out. If a new\ntask arrived before Polycarp finished the previous one, he put the new task at\nthe end of the queue. When Polycarp finished executing the next task and the\nqueue was not empty, he immediately took a new task from the head of the queue\n(if the queue is empty \u2014 he just waited for the next task). Find \n    d_i\n\n(duration) of each task. Input The first line contains a single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. The\ndescriptions of the input data sets follow. The first line of each test case\ncontains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n). The\nsecond line of each test case contains exactly \n    n\n integers \n    s_1 < s_2 <\n    \n    \u2026 < s_n\n (\n    0 \n    \u2264 s_i \n    \u2264 10^9\n). The third line of each test\ncase contains exactly \n    n\n integers \n    f_1 < f_2 < \n    \u2026 < f_n\n (\n    s_i\n    < f_i \n    \u2264 10^9\n). It is guaranteed that the sum of \n    n\n over all test\ncases does not exceed \n    2 \n    \u00b7 10^5\n. Output For each of \n    t\n test\ncases print \n    n\n positive integers \n    d_1, d_2, \n    \u2026, d_n\n \u2014 the\nduration of each task. Example Input 4 3 0 3 7 2 10 11 2 10 15 11 16 9 12 16\n90 195 1456 1569 3001 5237 19275 13 199 200 260 9100 10000 10914 91066 5735533\n1 0 1000000000 Output 2 7 1 1 1 1 183 1 60 7644 900 914 80152 5644467\n1000000000 Note First test case: The queue is empty at the beginning: \n    [\n    ]\n. And that's where the first task comes in. At time \n    2\n, Polycarp\nfinishes doing the first task, so the duration of the first task is \n    2\n.\nThe queue is empty so Polycarp is just waiting. At time \n    3\n, the second\ntask arrives. And at time \n    7\n, the third task arrives, and now the queue\nlooks like this: \n    [7]\n. At the time \n    10\n, Polycarp finishes doing the\nsecond task, as a result, the duration of the second task is \n    7\n. And at\ntime \n    10\n, Polycarp immediately starts doing the third task and finishes\nat time \n    11\n. As a result, the duration of the third task is \n    1\n. An\nexample of the first test case.\n\n",
        "cf_contest_id": 1690,
        "cf_index": "C",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3\r\n0 3 7\r\n2 10 11\r\n2\r\n10 15\r\n11 16\r\n9\r\n12 16 90 195 1456 1569 3001 5237 19275\r\n13 199 200 260 9100 10000 10914 91066 5735533\r\n1\r\n0\r\n1000000000\r\n",
                "2 7 1\r\n1 1\r\n1 183 1 60 7644 900 914 80152 5644467\r\n1000000000\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n4\r\n1 15 1234 4210\r\n9 16 1250 5100\r\n",
                "8 1 16 890\r\n"
            ]
        ]
    }
]