[
    {
        "name": "Travelling Salesman Problem",
        "description": "There are \n    n\n cities numbered from \n    1\n to \n    n\n, and city \n    i\n\nhas beauty \n    a_i\n. A salesman wants to start at city \n    1\n, visit every\ncity exactly once, and return to city \n    1\n. For all \n    i\n     j\n, a\nflight from city \n    i\n to city \n    j\n costs \n    max(c_i,a_j-a_i)\n\ndollars, where \n    c_i\n is the price floor enforced by city \n    i\n. Note\nthat there is no absolute value. Find the minimum total cost for the salesman\nto complete his trip. Input The first line contains a single integer \n    n\n\n(\n    2\n    \u2264 n\n    \u2264 10^5\n) \u2014 the number of cities. The \n    i\n-th of the next\n\n    n\n lines contains two integers \n    a_i\n, \n    c_i\n (\n    0\n    \u2264\n    a_i,c_i\n    \u2264 10^9\n) \u2014 the beauty and price floor of the \n    i\n-th city.\nOutput Output a single integer \u2014 the minimum total cost. Examples Input 3 1 9\n2 1 4 1 Output 11 Input 6 4 2 8 4 3 0 2 3 7 1 0 1 Output 13 Note In the first\ntest case, we can travel in order \n    1\n    \u2192 3\n    \u2192 2\n    \u2192 1\n. The flight\n\n    1\n    \u2192 3\n costs \n    max(c_1,a_3-a_1)=\n    max(9,4-1)=9\n. The flight\n\n    3\n    \u2192 2\n costs \n    max(c_3, a_2-a_3)=\n    max(1,2-4)=1\n. The flight\n\n    2\n    \u2192 1\n costs \n    max(c_2,a_1-a_2)=\n    max(1,1-2)=1\n. The total cost\nis \n    11\n, and we cannot do better.\n\n",
        "cf_contest_id": 1503,
        "cf_index": "C",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dp",
            "greedy",
            "shortest paths",
            "sortings",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 9\r\n2 1\r\n4 1\r\n",
                "11\r\n"
            ],
            [
                "6\r\n4 2\r\n8 4\r\n3 0\r\n2 3\r\n7 1\r\n0 1\r\n",
                "13\r\n"
            ]
        ],
        "private_cases": [
            [
                "7\r\n569310119 79567967\r\n449035799 396713817\r\n394225976 502573394\r\n525802264 768636555\r\n620993905 708159609\r\n983715981 484392815\r\n460196326 336206040\r\n",
                "3276250197\r\n"
            ],
            [
                "2\r\n4 0\r\n5 0\r\n",
                "1\r\n"
            ],
            [
                "2\r\n743693950 521961538\r\n467874496 880255155\r\n",
                "1402216693\r\n"
            ],
            [
                "30\r\n59 1\r\n59 2\r\n50 5\r\n61 0\r\n76 98\r\n60 1\r\n17 1\r\n3 10\r\n72 38\r\n75 90\r\n16 5\r\n80 6\r\n57 0\r\n47 12\r\n34 13\r\n61 93\r\n3 1\r\n83 100\r\n89 94\r\n88 20\r\n42 8\r\n93 94\r\n56 5\r\n81 48\r\n31 6\r\n33 0\r\n11 3\r\n69 1\r\n58 1\r\n23 17\r\n",
                "777\r\n"
            ],
            [
                "3\r\n2 1\r\n0 4\r\n4 1\r\n",
                "6\r\n"
            ],
            [
                "3\r\n143757750 43097231\r\n509800305 187308871\r\n29994173 572950383\r\n",
                "803356485\r\n"
            ],
            [
                "3\r\n1 1\r\n0 100\r\n100 0\r\n",
                "101\r\n"
            ],
            [
                "3\r\n1 1\r\n0 3\r\n3 1\r\n",
                "5\r\n"
            ],
            [
                "3\r\n5 0\r\n1 10\r\n10 0\r\n",
                "10\r\n"
            ],
            [
                "5\r\n3 2\r\n2 2\r\n6 4\r\n0 3\r\n1 5\r\n",
                "16\r\n"
            ]
        ]
    }
]