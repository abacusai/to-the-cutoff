[
    {
        "name": "Dune II: Battle For Arrakis",
        "description": "You're at the last mission in one very old and very popular strategy game Dune\nII: Battle For Arrakis. The map of the mission can be represented as a\nrectangular matrix of size \n    n \n    \u00d7 m\n. Initially, there are \n    a_i,\n    j\n units of your army in the cell \n    (i, j)\n. You want to prepare for the\nfinal battle, so you want to move all your army into exactly one cell of the\nmap (i.e. \n    nm-1\n cells should contain \n    0\n units of the army and the\nremaining cell should contain the entire army). To do this, you can do some\n(possibly, zero) number of moves. During one move, you can select exactly one\nunit from some cell and move it to one of the adjacent by side cells. I.e.\nfrom the cell \n    (i, j)\n you can move the unit to cells: \n    (i - 1, j)\n;\n\n    (i, j - 1)\n; \n    (i + 1, j)\n; \n    (i, j + 1)\n. Of course, you want to\nmove all your army into exactly one cell as fast as possible. So, you want to\nknow the minimum number of moves you need to do that. And, of course, life\ngoes on, so the situation on the map changes. There are \n    q\n updates, the\n\n    i\n-th update is denoted by three integers \n    x, y, z\n. This update\naffects the army in the cell \n    (x, y)\n: after this update, the number of\nunits in the cell \n    (x, y)\n becomes \n    z\n (i.e. you replace \n    a_x,\n    y\n with \n    z\n). Also, you want to determine, for each \n    i\n, the\nminimum number of moves needed to move your entire army into exactly one cell\nwith the first \n    i\n updates applied to the initial map. In other words, the\nmap after the \n    i\n-th update equals the initial map with the first \n    i\n\nupdates applied to it. Input The first line of the input contains three\nintegers \n    n, m\n and \n    q\n (\n    1 \n    \u2264 n, m \n    \u2264 1000; 1 \n    \u2264 q \n    \u2264\n    5000\n) \u2014 the size of the matrix and the number of updates correspondingly.\nThe next \n    n\n lines contain \n    m\n integers each, where the \n    j\n-th\ninteger in the \n    i\n-th line is \n    a_i, j\n (\n    1 \n    \u2264 a_i, j\n    \u2264\n    10^9\n) \u2014 the number of units in the cell \n    (i, j)\n. The next \n    q\n\nlines contain three integers each, where the \n    i\n-th line contains three\nintegers \n    x_i, y_i\n and \n    z_i\n (\n    1 \n    \u2264 x_i \n    \u2264 n; 1 \n    \u2264 y_i\n    \n    \u2264 m; 1 \n    \u2264 z_i \n    \u2264 10^9\n) \u2014 the cell in which the number of units\nupdates and the new number of units in this cell correspondingly. Output Print\n\n    q+1\n integers \n    r_0, r_1, r_2, \n    \u2026, r_n\n, where \n    r_0\n is the\nminimum number of moves you need to move all your army into exactly one cell,\nand \n    r_i\n for all \n    i\n from \n    1\n to \n    q\n is the minimum number of\nmoves you need to move all your army into exactly one cell after the first\n\n    i\n updates. Examples Input 3 3 1 1 2 3 2 1 2 1 1 2 2 3 100 Output 21 22\nInput 4 4 3 2 5 6 3 4 8 10 5 2 6 7 1 8 4 2 1 1 1 8 2 3 4 4 4 5 Output 123 135\n129 145\n\n",
        "cf_contest_id": 1346,
        "cf_index": "F",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "data structures",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3 1\r\n1 2 3\r\n2 1 2\r\n1 1 2\r\n2 3 100\r\n",
                "21 22 "
            ],
            [
                "4 4 3\r\n2 5 6 3\r\n4 8 10 5\r\n2 6 7 1\r\n8 4 2 1\r\n1 1 8\r\n2 3 4\r\n4 4 5\r\n",
                "123 135 129 145 "
            ]
        ],
        "private_cases": [
            [
                "19 1 15\r\n9\r\n23\r\n10\r\n9\r\n25\r\n25\r\n12\r\n20\r\n1\r\n18\r\n9\r\n2\r\n1\r\n30\r\n14\r\n2\r\n10\r\n6\r\n18\r\n9 1 3\r\n6 1 17\r\n5 1 21\r\n12 1 15\r\n1 1 7\r\n7 1 13\r\n18 1 8\r\n12 1 18\r\n19 1 4\r\n19 1 16\r\n16 1 21\r\n4 1 12\r\n13 1 23\r\n7 1 25\r\n2 1 23\r\n",
                "1143 1145 1129 1117 1164 1147 1150 1166 1172 1034 1154 1268 1286 1347 1388 1388 "
            ],
            [
                "11 3 20\r\n19 21 15\r\n8 29 29\r\n5 30 13\r\n21 27 27\r\n4 29 15\r\n17 7 23\r\n18 29 19\r\n16 6 23\r\n12 25 23\r\n22 14 8\r\n3 3 2\r\n4 1 15\r\n7 3 28\r\n4 2 26\r\n9 3 21\r\n9 1 26\r\n8 1 6\r\n5 3 3\r\n3 2 22\r\n4 1 26\r\n8 3 4\r\n2 2 25\r\n9 2 14\r\n8 3 23\r\n3 1 8\r\n2 1 13\r\n1 1 8\r\n7 2 3\r\n11 2 25\r\n3 1 11\r\n9 3 19\r\n",
                "1753 1741 1768 1767 1757 1821 1787 1767 1743 1776 1705 1693 1649 1725 1734 1754 1698 1647 1779 1788 1778 "
            ],
            [
                "10 11 14\r\n7 12 1 16 13 7 18 17 8 5 13\r\n25 11 14 19 26 22 19 13 1 8 28\r\n23 2 1 24 30 5 14 1 10 27 1\r\n22 15 6 11 8 25 9 16 4 1 22\r\n29 6 26 25 26 28 10 5 9 18 19\r\n13 20 20 25 17 24 1 12 3 7 16\r\n22 20 9 19 16 15 3 30 16 25 8\r\n19 13 4 7 27 6 30 11 28 16 17\r\n12 25 13 1 30 13 4 29 6 24 12\r\n13 12 27 21 29 27 8 27 30 6 6\r\n6 2 8\r\n8 5 28\r\n2 9 2\r\n2 4 24\r\n4 4 28\r\n5 3 25\r\n9 7 3\r\n9 2 14\r\n7 6 29\r\n1 3 18\r\n10 9 24\r\n4 10 14\r\n9 1 24\r\n4 5 22\r\n",
                "8523 8475 8478 8485 8515 8583 8579 8575 8498 8512 8648 8606 8684 8780 8812 "
            ],
            [
                "2 1 20\r\n18\r\n6\r\n1 1 28\r\n2 1 8\r\n1 1 24\r\n2 1 13\r\n1 1 27\r\n1 1 30\r\n2 1 29\r\n2 1 25\r\n1 1 12\r\n2 1 12\r\n1 1 12\r\n1 1 13\r\n2 1 26\r\n1 1 27\r\n2 1 3\r\n1 1 25\r\n1 1 6\r\n2 1 17\r\n1 1 29\r\n2 1 16\r\n",
                "6 6 8 8 13 13 13 29 25 12 12 12 12 13 26 3 3 3 6 17 16 "
            ]
        ]
    }
]