[
    {
        "name": "Coprime Permutation",
        "description": "Two positive integers are coprime if and only if they don't have a common\ndivisor greater than 1. Some bear doesn't want to tell Radewoosh how to solve\nsome algorithmic problem. So, Radewoosh is going to break into that bear's\nsafe with solutions. To pass through the door, he must enter a permutation of\nnumbers 1 through n. The door opens if and only if an entered permutation p1,\np2, ..., pn satisfies: In other words, two different elements are coprime if\nand only if their indices are coprime. Some elements of a permutation may be\nalready fixed. In how many ways can Radewoosh fill the remaining gaps so that\nthe door will open? Print the answer modulo 10^9 + 7. Input The first line of\nthe input contains one integer n (2 \u2264 n \u2264 1 000 000). The second line contains\nn integers p1, p2, ..., pn (0 \u2264 pi \u2264 n) where pi = 0 means a gap to fill, and\npi \u2265 1 means a fixed number. It's guaranteed that if i \u2260 j and pi, pj \u2265 1 then\npi \u2260 pj. Output Print the number of ways to fill the gaps modulo 10^9 + 7\n(i.e. modulo 1000000007). Examples Input 4 0 0 0 0 Output 4 Input 5 0 0 1 2 0\nOutput 2 Input 6 0 0 1 2 0 0 Output 0 Input 5 5 3 4 2 1 Output 0 Note In the\nfirst sample test, none of four element is fixed. There are four permutations\nsatisfying the given conditions: (1,2,3,4), (1,4,3,2), (3,2,1,4), (3,4,1,2).\nIn the second sample test, there must be p3 = 1 and p4 = 2. The two\npermutations satisfying the conditions are: (3,4,1,2,5), (5,4,1,2,3).\n\n",
        "cf_contest_id": 698,
        "cf_index": "F",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n0 0 0 0\r\n",
                "4"
            ],
            [
                "5\r\n0 0 1 2 0\r\n",
                "2"
            ],
            [
                "6\r\n0 0 1 2 0 0\r\n",
                "0"
            ],
            [
                "5\r\n5 3 4 2 1\r\n",
                "0"
            ]
        ],
        "private_cases": [
            [
                "2\r\n0 0\r\n",
                "2"
            ],
            [
                "2\r\n1 0\r\n",
                "1"
            ],
            [
                "2\r\n2 0\r\n",
                "1"
            ],
            [
                "2\r\n2 1\r\n",
                "1"
            ],
            [
                "2\r\n1 2\r\n",
                "1"
            ],
            [
                "7\r\n0 0 0 0 0 0 0\r\n",
                "12"
            ],
            [
                "7\r\n1 4 3 2 5 6 7\r\n",
                "1"
            ],
            [
                "3\r\n0 0 0\r\n",
                "6"
            ],
            [
                "3\r\n0 0 1\r\n",
                "2"
            ],
            [
                "5\r\n0 2 0 4 0\r\n",
                "6"
            ],
            [
                "3\r\n0 3 2\r\n",
                "1"
            ],
            [
                "3\r\n1 2 3\r\n",
                "1"
            ],
            [
                "10\r\n1 0 3 0 0 6 0 8 0 0\r\n",
                "2"
            ],
            [
                "15\r\n0 4 0 0 5 12 7 0 9 10 13 0 1 0 0\r\n",
                "2"
            ],
            [
                "100\r\n61 0 0 8 25 54 0 32 81 0 0 0 0 0 45 0 0 18 17 50 0 44 0 0 0 0 9 56 0 60 0 0 0 38 0 72 0 34 0 10 47 42 0 0 0 0 0 0 0 40 0 26 97 0 0 0 51 0 89 0 67 0 0 0 65 0 79 0 0 70 0 0 0 0 75 68 0 0 0 0 0 0 1 0 0 0 0 22 71 90 91 0 0 0 85 36 0 28 33 20\r\n",
                "53084160"
            ],
            [
                "14\r\n0 0 0 0 7 0 0 0 0 0 0 0 0 14\r\n",
                "0"
            ]
        ]
    }
]