[
    {
        "name": "Treasure Island",
        "description": "All of us love treasures, right? That's why young Vasya is heading for a\nTreasure Island. Treasure Island may be represented as a rectangular table\n\n    n \n    \u00d7 m\n which is surrounded by the ocean. Let us number rows of the\nfield with consecutive integers from \n    1\n to \n    n\n from top to bottom and\ncolumns with consecutive integers from \n    1\n to \n    m\n from left to right.\nDenote the cell in \n    r\n-th row and \n    c\n-th column as \n    (r, c)\n. Some\nof the island cells contain impassable forests, and some cells are free and\npassable. Treasure is hidden in cell \n    (n, m)\n. Vasya got off the ship in\ncell \n    (1, 1)\n. Now he wants to reach the treasure. He is hurrying up, so\nhe can move only from cell to the cell in next row (downwards) or next column\n(rightwards), i.e. from cell \n    (x, y)\n he can move only to cells \n    (x+1,\n    y)\n and \n    (x, y+1)\n. Of course Vasya can't move through cells with\nimpassable forests. Evil Witch is aware of Vasya's journey and she is going to\nprevent him from reaching the treasure. Before Vasya's first move she is able\nto grow using her evil magic impassable forests in previously free cells.\nWitch is able to grow a forest in any number of any free cells except cells\n\n    (1, 1)\n where Vasya got off his ship and \n    (n, m)\n where the treasure\nis hidden. Help Evil Witch by finding out the minimum number of cells she has\nto turn into impassable forests so that Vasya is no longer able to reach the\ntreasure. Input First line of input contains two positive integers \n    n\n,\n\n    m\n (\n    3 \n    \u2264 n \n    \u00b7 m \n    \u2264 1\n     000\n     000\n), sizes of the\nisland. Following \n    n\n lines contains strings \n    s_i\n of length \n    m\n\ndescribing the island, \n    j\n-th character of string \n    s_i\n equals \"#\" if\ncell \n    (i, j)\n contains an impassable forest and \".\" if the cell is free\nand passable. Let us remind you that Vasya gets of his ship at the cell \n    (1,\n    1)\n, i.e. the first cell of the first row, and he wants to reach cell \n    (n,\n    m)\n, i.e. the last cell of the last row. It's guaranteed, that cells \n    (1,\n    1)\n and \n    (n, m)\n are empty. Output Print the only integer \n    k\n, which\nis the minimum number of cells Evil Witch has to turn into impassable forest\nin order to prevent Vasya from reaching the treasure. Examples Input 2 2 .. ..\nOutput 2 Input 4 4 .... #.#. .... .#.. Output 1 Input 3 4 .... .##. ....\nOutput 2 Note The following picture illustrates the island in the third\nexample. Blue arrows show possible paths Vasya may use to go from \n    (1, 1)\n\nto \n    (n, m)\n. Red illustrates one possible set of cells for the Witch to\nturn into impassable forest to make Vasya's trip from \n    (1, 1)\n to \n    (n,\n    m)\n impossible.\n\n",
        "cf_contest_id": 1214,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dp",
            "flows",
            "hashing"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "2 2\r\n..\r\n..\r\n",
                "2"
            ],
            [
                "4 4\r\n....\r\n#.#.\r\n....\r\n.#..\r\n",
                "1"
            ],
            [
                "3 4\r\n....\r\n.##.\r\n....\r\n",
                "2"
            ]
        ],
        "private_cases": [
            [
                "5 1\r\n.\r\n.\r\n.\r\n.\r\n.\r\n",
                "1"
            ],
            [
                "1 3\r\n.#.\r\n",
                "0"
            ],
            [
                "6 1\r\n.\r\n.\r\n#\r\n.\r\n.\r\n.\r\n",
                "0"
            ],
            [
                "5 2\r\n..\r\n..\r\n..\r\n..\r\n#.\r\n",
                "1"
            ],
            [
                "4 2\r\n..\r\n#.\r\n..\r\n..\r\n",
                "1"
            ],
            [
                "2 2\r\n.#\r\n..\r\n",
                "1"
            ],
            [
                "4 5\r\n.####\r\n#####\r\n#####\r\n####.\r\n",
                "0"
            ],
            [
                "5 4\r\n.###\r\n####\r\n####\r\n####\r\n###.\r\n",
                "0"
            ],
            [
                "3 6\r\n.#####\r\n######\r\n#####.\r\n",
                "0"
            ],
            [
                "6 3\r\n.##\r\n###\r\n###\r\n###\r\n###\r\n##.\r\n",
                "0"
            ],
            [
                "6 3\r\n.##\r\n###\r\n.##\r\n.##\r\n#.#\r\n#..\r\n",
                "0"
            ],
            [
                "6 3\r\n.##\r\n###\r\n.##\r\n..#\r\n..#\r\n#..\r\n",
                "0"
            ],
            [
                "6 3\r\n.##\r\n.##\r\n.##\r\n..#\r\n..#\r\n#..\r\n",
                "1"
            ],
            [
                "10 2\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n",
                "2"
            ],
            [
                "20 1\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n#\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n",
                "0"
            ],
            [
                "20 1\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n",
                "1"
            ]
        ]
    }
]