[
    {
        "name": "Bully Sort",
        "description": "On a permutation \n    p\n of length \n    n\n, we define a bully swap as follows:\nLet \n    i\n be the index of the largest element \n    p_i\n such that \n    p_i\n    \n    \u2260 i\n. Let \n    j\n be the index of the smallest element \n    p_j\n such\nthat \n    i < j\n. Swap \n    p_i\n and \n    p_j\n. We define \n    f(p)\n as the\nnumber of bully swaps we need to perform until \n    p\n becomes sorted. Note\nthat if \n    p\n is the identity permutation, \n    f(p)=0\n. You are given\n\n    n\n and a permutation \n    p\n of length \n    n\n. You need to process the\nfollowing \n    q\n updates. In each update, you are given two integers \n    x\n\nand \n    y\n. You will swap \n    p_x\n and \n    p_y\n and then find the value of\n\n    f(p)\n. Note that the updates are persistent. Changes made to the\npermutation \n    p\n will apply when processing future updates. Input The first\nline of the input contains two integers \n    n\n and \n    q\n (\n    2 \n    \u2264 n\n    \n    \u2264 5 \n    \u00b7 10^5\n, \n    1 \n    \u2264 q \n    \u2264 5 \n    \u00b7 10^4\n) \u2014 the length of\nthe permutation and the number of updates. The second line of input contains\n\n    n\n integer \n    p_1,p_2,\n    \u2026,p_n\n (\n    1 \n    \u2264 p_i \n    \u2264 n\n) \u2014 the\npermutation \n    p\n. All elements of \n    p\n are distinct. The \n    i\n-th of\nthe next \n    q\n lines of input contains two integers \n    x_i\n and \n    y_i\n\n(\n    1 \n    \u2264 x_i < y_i \n    \u2264 n\n) \u2014 describing the \n    i\n-th update. Output\nAfter each update, output \n    f(p)\n. Example Input 8 5 6 2 1 5 3 4 7 8 1 8 2\n3 4 7 7 8 3 6 Output 5 6 9 8 7 Note After the first update, we have\n\n    f(p)=5\n. The \n    5\n bully swaps are illustrated below. \n    [\n    1,\n    2, \n    8, 5, 3, 4, 7, 6]\n, \n    [1, 2, \n    3, 5, \n    8,\n    4, 7, 6]\n, \n    [1, 2, 3, 5, \n    4, \n    8, 7, 6]\n, \n    [1, 2,\n    3, 5, 4, \n    6, 7, \n    8]\n, \n    [1, 2, 3, \n    4,\n    \n    5, 6, 7, 8]\n.\n\n",
        "cf_contest_id": 1830,
        "cf_index": "E",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "math"
        ],
        "time_limit_seconds": 10.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "8 5\r\n6 2 1 5 3 4 7 8\r\n1 8\r\n2 3\r\n4 7\r\n7 8\r\n3 6\r\n",
                "5\r\n6\r\n9\r\n8\r\n7\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1\r\n1 2\r\n1 2\r\n",
                "1\r\n"
            ]
        ]
    }
]