[
    {
        "name": "Array Equalizer",
        "description": "Jeevan has two arrays \n    a\n and \n    b\n of size \n    n\n. He is fond of\nperforming weird operations on arrays. This time, he comes up with two types\nof operations: Choose any \n    i\n (\n    1 \n    \u2264 i \n    \u2264 n\n) and increment\n\n    a_j\n by \n    1\n for every \n    j\n which is a multiple of \n    i\n and \n    1\n    \n    \u2264 j \n    \u2264 n\n. Choose any \n    i\n (\n    1 \n    \u2264 i \n    \u2264 n\n) and decrement\n\n    a_j\n by \n    1\n for every \n    j\n which is a multiple of \n    i\n and \n    1\n    \n    \u2264 j \n    \u2264 n\n. He wants to convert array \n    a\n into an array \n    b\n\nusing the minimum total number of operations. However, Jeevan seems to have\nforgotten the value of \n    b_1\n. So he makes some guesses. He will ask you\n\n    q\n questions corresponding to his \n    q\n guesses, the \n    i\n-th of\nwhich is of the form: If \n    b_1 = x_i\n, what is the minimum number of\noperations required to convert \n    a\n to \n    b\n? Help him by answering each\nquestion. Input The first line contains a single integer \n    n\n \n    (1 \n    \u2264 n\n    \n    \u2264 2 \n    \u00b7 10^5)\n \u2014 the size of arrays \n    a\n and \n    b\n. The\nsecond line contains \n    n\n integers \n    a_1, a_2, ..., a_n\n \n    (1 \n    \u2264 a_i\n    \n    \u2264 10^6)\n. The third line contains \n    n\n integers \n    b_1, b_2, ...,\n    b_n\n \n    (1 \n    \u2264 b_i \n    \u2264 10^6\n for \n    i \n    \u2260 1\n; \n    b_1 = -1\n,\nrepresenting that the value of \n    b_1\n is unknown\n    )\n. The fourth line\ncontains a single integer \n    q\n \n    (1 \n    \u2264 q \n    \u2264 2 \n    \u00b7 10^5)\n \u2014\nthe number of questions. Each of the following \n    q\n lines contains a single\ninteger \n    x_i\n \n    (1 \n    \u2264 x_i \n    \u2264 10^6)\n \u2014 representing the \n    i\n-th\nquestion. Output Output \n    q\n integers \u2014 the answers to each of his \n    q\n\nquestions. Examples Input 2 3 7 -1 5 3 1 4 3 Output 2 4 2 Input 6 2 5 4 1 3 6\n-1 4 6 2 3 5 3 1 8 4 Output 10 29 9 Note Consider the first test case. \n    b_1\n    = 1\n: We need to convert \n    [3, 7] \n    \u2192 [1, 5]\n. We can perform\nthe following operations:\n    [3, 7]\n\n\n    \n \n    [2, 6]\n\n\n    \n \n    [1, 5]\n Hence the\nanswer is \n    2\n. \n    b_1 = 4\n: We need to convert \n    [3, 7] \n    \u2192\n    [4, 5]\n. We can perform the following operations: \n    [3, 7]\n\n\n    \n \n    [3, 6]\n\n\n    \n \n    [3, 5]\n\n\n    \n \n    [4, 6]\n\n\n    \n \n    [4, 5]\n Hence the\nanswer is \n    4\n. \n    b_1 = 3\n: We need to convert \n    [3, 7] \n    \u2192\n    [3, 5]\n. We can perform the following operations:\n    [3, 7]\n\n\n    \n \n    [3, 6]\n\n\n    \n \n    [3, 5]\n Hence the\nanswer is \n    2\n.\n\n",
        "cf_contest_id": 1605,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "greedy",
            "implementation",
            "math",
            "number theory",
            "sortings",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n3 7\r\n-1 5\r\n3\r\n1\r\n4\r\n3\r\n",
                "2\r\n4\r\n2\r\n"
            ],
            [
                "6\r\n2 5 4 1 3 6\r\n-1 4 6 2 3 5\r\n3\r\n1\r\n8\r\n4\r\n",
                "10\r\n29\r\n9\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n2 4 1 3\r\n-1 4 4 2\r\n4\r\n3\r\n5\r\n3\r\n2\r\n",
                "5\r\n7\r\n5\r\n4\r\n"
            ],
            [
                "4\r\n4 4 3 2\r\n-1 4 4 2\r\n4\r\n4\r\n3\r\n4\r\n4\r\n",
                "1\r\n4\r\n1\r\n1\r\n"
            ],
            [
                "4\r\n3 4 4 5\r\n-1 3 5 2\r\n4\r\n5\r\n1\r\n3\r\n4\r\n",
                "8\r\n8\r\n4\r\n5\r\n"
            ],
            [
                "6\r\n6 1 3 10 7 2\r\n-1 2 1 9 8 5\r\n7\r\n3\r\n10\r\n9\r\n8\r\n4\r\n9\r\n4\r\n",
                "15\r\n26\r\n21\r\n16\r\n12\r\n21\r\n12\r\n"
            ],
            [
                "6\r\n1 8 7 7 2 1\r\n-1 9 2 9 9 1\r\n7\r\n10\r\n2\r\n1\r\n4\r\n6\r\n2\r\n8\r\n",
                "47\r\n19\r\n18\r\n25\r\n31\r\n19\r\n37\r\n"
            ],
            [
                "6\r\n8 5 8 5 2 6\r\n-1 9 10 3 1 6\r\n7\r\n1\r\n9\r\n6\r\n2\r\n6\r\n1\r\n5\r\n",
                "52\r\n18\r\n27\r\n47\r\n27\r\n52\r\n32\r\n"
            ],
            [
                "7\r\n7 5 4 3 1 4 8\r\n-1 8 2 10 5 9 6\r\n7\r\n9\r\n4\r\n9\r\n8\r\n7\r\n7\r\n4\r\n",
                "23\r\n23\r\n23\r\n21\r\n19\r\n19\r\n23\r\n"
            ]
        ]
    }
]