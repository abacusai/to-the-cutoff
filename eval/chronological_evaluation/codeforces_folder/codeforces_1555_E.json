[
    {
        "name": "Boring Segments",
        "description": "You are given \n    n\n segments on a number line, numbered from \n    1\n to\n\n    n\n. The \n    i\n-th segments covers all integer points from \n    l_i\n to\n\n    r_i\n and has a value \n    w_i\n. You are asked to select a subset of these\nsegments (possibly, all of them). Once the subset is selected, it's possible\nto travel between two integer points if there exists a selected segment that\ncovers both of them. A subset is good if it's possible to reach point \n    m\n\nstarting from point \n    1\n in arbitrary number of moves. The cost of the\nsubset is the difference between the maximum and the minimum values of\nsegments in it. Find the minimum cost of a good subset. In every test there\nexists at least one good subset. Input The first line contains two integers\n\n    n\n and \n    m\n (\n    1 \n    \u2264 n \n    \u2264 3 \n    \u00b7 10^5\n; \n    2 \n    \u2264 m \n    \u2264\n    10^6\n) \u2014 the number of segments and the number of integer points. Each of\nthe next \n    n\n lines contains three integers \n    l_i\n, \n    r_i\n and\n\n    w_i\n (\n    1 \n    \u2264 l_i < r_i \n    \u2264 m\n; \n    1 \n    \u2264 w_i \n    \u2264 10^6\n) \u2014\nthe description of the \n    i\n-th segment. In every test there exists at least\none good subset. Output Print a single integer \u2014 the minimum cost of a good\nsubset. Examples Input 5 12 1 5 5 3 4 10 4 10 6 11 12 5 10 12 3 Output 3 Input\n1 10 1 10 23 Output 0\n\n",
        "cf_contest_id": 1555,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "sortings",
            "trees",
            "two pointers"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 12\r\n1 5 5\r\n3 4 10\r\n4 10 6\r\n11 12 5\r\n10 12 3\r\n",
                "3\r\n"
            ],
            [
                "1 10\r\n1 10 23\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "9 10\r\n6 7 10\r\n2 3 16\r\n5 6 13\r\n7 8 20\r\n9 10 6\r\n4 5 4\r\n3 4 10\r\n1 2 6\r\n8 9 20\r\n",
                "16\r\n"
            ],
            [
                "4 10\r\n6 10 4\r\n1 5 7\r\n2 6 5\r\n5 9 8\r\n",
                "3\r\n"
            ],
            [
                "7 10\r\n1 4 13\r\n5 6 10\r\n4 7 1\r\n7 8 14\r\n6 9 9\r\n4 5 8\r\n7 10 6\r\n",
                "7\r\n"
            ],
            [
                "45 100\r\n86 90 344\r\n67 71 63\r\n84 87 423\r\n96 98 297\r\n85 86 144\r\n75 80 489\r\n24 25 17\r\n75 78 363\r\n1 3 349\r\n17 19 146\r\n35 38 39\r\n90 93 236\r\n34 35 463\r\n59 64 259\r\n97 100 185\r\n71 75 214\r\n80 84 124\r\n63 67 324\r\n85 88 204\r\n47 51 420\r\n22 24 38\r\n30 34 41\r\n94 96 42\r\n3 6 312\r\n51 56 440\r\n84 85 337\r\n10 14 3\r\n30 31 390\r\n46 47 337\r\n55 60 102\r\n4 9 219\r\n3 4 414\r\n34 36 412\r\n49 53 194\r\n17 20 479\r\n90 94 167\r\n40 41 51\r\n25 30 259\r\n53 54 239\r\n13 15 332\r\n35 40 313\r\n8 11 122\r\n15 17 441\r\n18 22 163\r\n41 46 98\r\n",
                "486\r\n"
            ],
            [
                "18 100\r\n90 92 434\r\n23 43 334\r\n49 64 385\r\n1 5 284\r\n50 62 210\r\n78 91 52\r\n77 97 457\r\n42 53 48\r\n93 100 499\r\n60 80 34\r\n11 31 250\r\n57 76 47\r\n3 14 237\r\n22 32 333\r\n5 16 59\r\n96 99 165\r\n62 71 223\r\n41 44 331\r\n",
                "465\r\n"
            ],
            [
                "8 100\r\n20 78 322\r\n1 22 263\r\n50 88 163\r\n80 98 394\r\n62 100 116\r\n87 90 243\r\n20 99 473\r\n45 86 292\r\n",
                "206\r\n"
            ],
            [
                "10 100000\r\n1 49856 954208\r\n98389 98970 222740\r\n78151 99991 323776\r\n63089 100000 263298\r\n19955 99994 342017\r\n27228 99998 310177\r\n13398 98500 187599\r\n95925 99993 643614\r\n36475 99999 556166\r\n1224 98485 55420\r\n",
                "690910\r\n"
            ],
            [
                "1 2\r\n1 2 10\r\n",
                "0\r\n"
            ]
        ]
    }
]