[
    {
        "name": "Visit of the Great",
        "description": "The Great Mushroom King descended to the dwarves, but not everyone managed to\nsee him. Only the few chosen ones could see the King. We know that only\nLCM(k^2^l + 1, k^2^l+1 + 1, ..., k^2^r + 1) dwarves can see the Great Mushroom\nKing. Numbers k, l, r are chosen by the Great Mushroom King himself in some\ncomplicated manner which is unclear to common dwarves. The dwarven historians\ndecided to document all visits of the Great Mushroom King. For each visit the\ndwarven historians know three integers ki, li, ri, chosen by the Great\nMushroom King for this visit. They also know a prime number pi. Help them to\ncount the remainder of dividing the number of dwarves who can see the King, by\nnumber pi, for each visit. Input The first line contains the single integer t\n(1 \u2264 t \u2264 10^5) \u2014 the number of the King's visits. Each of the following t\ninput lines contains four space-separated integers ki, li, ri and pi (1 \u2264 ki \u2264\n10^6; 0 \u2264 li \u2264 ri \u2264 10^18; 2 \u2264 pi \u2264 10^9) \u2014 the numbers, chosen by the Great\nMushroom King and the prime module, correspondingly. It is guaranteed that for\nall visits number pi is prime. Please do not use the \nwrite 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or\nthe \nthe remainder of dividing the number of the dwarves who can see the King this\ntime, by number pi. Print the answers for the visits in the order, in which\nthe visits are described in the input. Examples Input 2 3 1 10 2 5 0 4 3\nOutput 0 0 Note We consider that LCM(a1, a2, ..., an) represents the least\ncommon multiple of numbers a1, a2, ..., an. We consider that x^0 = 1, for any\nx.\n\n",
        "cf_contest_id": 185,
        "cf_index": "D",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "math",
            "number theory"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n3 1 10 2\r\n5 0 4 3\r\n",
                "0\r\n0\r\n"
            ]
        ],
        "private_cases": []
    }
]