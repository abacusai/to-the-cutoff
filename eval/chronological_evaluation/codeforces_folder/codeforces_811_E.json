[
    {
        "name": "Vladik and Entertaining Flags",
        "description": "In his spare time Vladik estimates beauty of the flags. Every flag could be\nrepresented as the matrix n \u00d7 m which consists of positive integers. Let's\ndefine the beauty of the flag as number of components in its matrix. We call\ncomponent a set of cells with same numbers and between any pair of cells from\nthat set there exists a path through adjacent cells from same component. Here\nis the example of the partitioning some flag matrix into components: But this\ntime he decided to change something in the process. Now he wants to estimate\nnot the entire flag, but some segment. Segment of flag can be described as a\nsubmatrix of the flag matrix with opposite corners at (1, l) and (n, r), where\nconditions 1 \u2264 l \u2264 r \u2264 m are satisfied. Help Vladik to calculate the beauty\nfor some segments of the given flag. Input First line contains three space-\nseparated integers n, m, q (1 \u2264 n \u2264 10, 1 \u2264 m, q \u2264 10^5) \u2014 dimensions of flag\nmatrix and number of segments respectively. Each of next n lines contains m\nspace-separated integers \u2014 description of flag matrix. All elements of flag\nmatrix is positive integers not exceeding 10^6. Each of next q lines contains\ntwo space-separated integers l, r (1 \u2264 l \u2264 r \u2264 m) \u2014 borders of segment which\nbeauty Vladik wants to know. Output For each segment print the result on the\ncorresponding line. Example Input 4 5 4 1 1 1 1 1 1 2 2 3 3 1 1 1 2 5 4 4 5 5\n5 1 5 2 5 1 2 4 5 Output 6 7 3 4 Note Partitioning on components for every\nsegment from first test case:\n\n",
        "cf_contest_id": 811,
        "cf_index": "E",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dsu",
            "graphs"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 5 4\r\n1 1 1 1 1\r\n1 2 2 3 3\r\n1 1 1 2 5\r\n4 4 5 5 5\r\n1 5\r\n2 5\r\n1 2\r\n4 5\r\n",
                "6\r\n7\r\n3\r\n4\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 2 9\r\n6 1\r\n6 6\r\n6 6\r\n6 6\r\n5 6\r\n1 2\r\n1 1\r\n1 2\r\n1 2\r\n1 2\r\n1 1\r\n1 1\r\n1 2\r\n1 1\r\n",
                "3\r\n2\r\n3\r\n3\r\n3\r\n2\r\n2\r\n3\r\n2\r\n"
            ],
            [
                "5 4 10\r\n5 5 5 5\r\n5 5 5 5\r\n5 5 5 5\r\n5 5 5 5\r\n5 5 5 5\r\n2 4\r\n2 2\r\n1 2\r\n1 4\r\n1 1\r\n1 3\r\n2 4\r\n2 3\r\n1 3\r\n3 3\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "8 4 12\r\n7 20 20 29\r\n29 7 29 29\r\n29 20 20 29\r\n29 20 20 29\r\n29 8 29 29\r\n20 29 29 29\r\n29 29 32 29\r\n29 29 29 29\r\n2 4\r\n1 4\r\n2 3\r\n2 3\r\n1 4\r\n2 4\r\n1 1\r\n3 3\r\n3 3\r\n2 3\r\n3 4\r\n1 2\r\n",
                "6\r\n9\r\n7\r\n7\r\n9\r\n6\r\n4\r\n6\r\n6\r\n7\r\n4\r\n8\r\n"
            ],
            [
                "7 8 14\r\n8 8 36 8 36 36 5 36\r\n25 36 36 8 36 25 36 36\r\n36 36 36 8 36 36 36 36\r\n36 36 36 36 36 36 8 55\r\n8 8 36 36 36 36 36 36\r\n49 36 36 36 8 36 36 36\r\n36 36 5 44 5 36 36 48\r\n2 3\r\n1 4\r\n6 8\r\n1 2\r\n5 8\r\n2 8\r\n1 5\r\n5 8\r\n6 7\r\n1 3\r\n2 6\r\n1 6\r\n3 6\r\n2 4\r\n",
                "4\r\n8\r\n7\r\n6\r\n8\r\n13\r\n10\r\n8\r\n5\r\n6\r\n9\r\n11\r\n7\r\n6\r\n"
            ],
            [
                "1 6 9\r\n1 2 3 4 5 6\r\n2 6\r\n4 5\r\n3 4\r\n3 5\r\n6 6\r\n3 6\r\n4 6\r\n2 3\r\n1 6\r\n",
                "5\r\n2\r\n2\r\n3\r\n1\r\n4\r\n3\r\n2\r\n6\r\n"
            ],
            [
                "4 8 6\r\n23 23 23 23 23 13 23 23\r\n23 23 23 23 23 23 23 23\r\n23 23 23 23 13 23 23 23\r\n23 23 26 23 23 23 23 23\r\n5 8\r\n2 8\r\n6 8\r\n5 5\r\n7 7\r\n2 4\r\n",
                "3\r\n4\r\n2\r\n3\r\n1\r\n2\r\n"
            ],
            [
                "2 10 7\r\n8 13 13 8 8 8 8 8 8 8\r\n8 8 8 8 8 8 8 8 8 8\r\n4 9\r\n1 7\r\n6 6\r\n7 8\r\n4 4\r\n1 8\r\n2 10\r\n",
                "1\r\n2\r\n1\r\n1\r\n1\r\n2\r\n2\r\n"
            ],
            [
                "5 12 6\r\n25 24 24 53 53 53 53 53 5 20 53 53\r\n24 53 24 53 53 3 5 53 53 53 53 53\r\n24 53 53 5 53 5 53 53 53 17 53 60\r\n49 53 53 24 53 53 53 53 53 53 53 35\r\n53 53 5 53 53 53 53 53 53 53 53 53\r\n6 8\r\n8 10\r\n4 11\r\n4 8\r\n6 12\r\n8 9\r\n",
                "4\r\n4\r\n9\r\n6\r\n9\r\n2\r\n"
            ],
            [
                "4 14 4\r\n8 8 8 8 46 46 48 8 8 8 8 13 24 40\r\n8 46 46 46 8 8 46 8 8 8 8 24 24 24\r\n8 46 46 8 8 8 23 23 8 8 8 8 8 8\r\n8 8 8 8 8 8 8 8 8 8 8 8 8 55\r\n10 10\r\n10 14\r\n3 5\r\n10 12\r\n",
                "1\r\n5\r\n4\r\n3\r\n"
            ],
            [
                "1 16 10\r\n2 2 2 2 6 2 8 2 2 12 10 9 9 2 16 2\r\n9 9\r\n5 5\r\n6 9\r\n6 8\r\n7 11\r\n6 16\r\n4 7\r\n6 15\r\n7 9\r\n11 11\r\n",
                "1\r\n1\r\n3\r\n3\r\n4\r\n9\r\n4\r\n8\r\n2\r\n1\r\n"
            ],
            [
                "7 12 11\r\n73 14 4 73 42 42 73 73 73 67 73 24\r\n73 73 73 73 73 73 72 73 73 73 73 11\r\n73 73 4 72 73 73 73 73 73 73 67 72\r\n73 74 73 72 73 73 73 73 73 73 73 73\r\n4 73 73 73 73 73 73 73 73 57 73 73\r\n72 73 73 4 73 73 73 73 33 73 73 73\r\n73 73 73 15 42 72 67 67 33 67 73 73\r\n9 12\r\n6 6\r\n10 11\r\n8 10\r\n1 9\r\n6 9\r\n3 5\r\n2 4\r\n2 4\r\n7 11\r\n1 12\r\n",
                "9\r\n3\r\n5\r\n7\r\n16\r\n6\r\n8\r\n9\r\n9\r\n8\r\n23\r\n"
            ],
            [
                "5 16 10\r\n32 4 4 4 4 4 4 52 4 4 4 4 29 30 4 4\r\n4 4 67 52 4 4 4 67 4 4 4 4 4 4 4 4\r\n4 52 52 52 4 4 4 67 67 52 32 4 4 4 4 52\r\n4 52 4 4 4 4 4 4 67 52 49 4 4 4 4 62\r\n49 4 4 4 4 72 55 4 4 52 49 52 4 62 4 62\r\n5 16\r\n9 13\r\n2 12\r\n3 13\r\n8 14\r\n7 7\r\n3 9\r\n1 4\r\n1 5\r\n7 7\r\n",
                "15\r\n8\r\n12\r\n13\r\n11\r\n2\r\n8\r\n6\r\n5\r\n2\r\n"
            ]
        ]
    }
]