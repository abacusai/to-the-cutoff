[
    {
        "name": "Stations",
        "description": "There are \n    n\n cities in a row numbered from \n    1\n to \n    n\n. The cities\nwill be building broadcasting stations. The station in the \n    i\n-th city has\nheight \n    h_i\n and range \n    w_i\n. It can broadcast information to city\n\n    j\n if the following constraints are met: \n    i \n    \u2264 j \n    \u2264 w_i\n, and\nfor each \n    k\n such that \n    i < k \n    \u2264 j\n, the following condition holds:\n\n    h_k < h_i\n. In other words, the station in city \n    i\n can broadcast\ninformation to city \n    j\n if \n    j \n    \u2265 i\n, \n    j\n is in the range of\n\n    i\n-th station, and \n    i\n is strictly highest on the range from \n    i\n\nto \n    j\n (including city \n    j\n).At the beginning, for every city \n    i\n,\n\n    h_i = 0\n and \n    w_i = i\n. Then \n    q\n events will take place. During\n\n    i\n-th event one of the following will happen: City \n    c_i\n will rebuild\nits station so that its height will be strictly highest among all stations and\n\n    w_c_i\n will be set to \n    g_i\n. Let \n    b_j\n be the number of\nstations that can broadcast information to city \n    j\n. Print the sum of\n\n    b_j\n over all \n    j\n satisfying \n    l_i \n    \u2264 j \n    \u2264 r_i\n. Your task\nis to react to all events and print answers to all queries. Input The first\nline contains two integers \n    n\n and \n    q\n (\n    1 \n    \u2264 n, q \n    \u2264\n    2\n    \u00b710^5\n) \u2014 number of cities and number of events. Then \n    q\n lines\nfollow. The \n    i\n-th line begins with an integer \n    p_i\n (\n    p_i = 1\n or\n\n    p_i = 2\n). If \n    p_i = 1\n a station will be rebuilt. Then two integers\n\n    c_i\n and \n    g_i\n (\n    1 \n    \u2264 c_i \n    \u2264 g_i \n    \u2264 n\n) follow \u2014 the\ncity in which the station is rebuilt and its new broadcasting range. If \n    p_i\n    = 2\n you are given a query. Then two integers \n    l_i\n and \n    r_i\n (\n    1\n    \n    \u2264 l_i \n    \u2264 r_i \n    \u2264 n\n) follow \u2014 the range of cities in the query.\nOutput For each query, print in a single line the sum of \n    b_j\n over the\ngiven interval. Examples Input 1 3 2 1 1 1 1 1 2 1 1 Output 1 1 Input 5 10 1 3\n4 2 3 5 1 1 5 2 1 5 1 4 5 2 2 4 1 2 3 2 1 3 1 5 5 2 2 5 Output 4 10 5 4 5 Note\nIn the first test case, only station \n    1\n reaches city \n    1\n before and\nafter it is rebuilt. In the second test case, after each rebuild, the array\n\n    b\n looks as follows: \n    [1, 1, 1, 2, 1]\n; \n    [1, 2, 2, 3, 2]\n; \n    [1,\n    2, 2, 1, 2]\n; \n    [1, 1, 2, 1, 2]\n; \n    [1, 1, 2, 1, 1]\n.\n\n",
        "cf_contest_id": 1572,
        "cf_index": "F",
        "cf_rating": 3400,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 2.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1 3\r\n2 1 1\r\n1 1 1\r\n2 1 1\r\n",
                "1\r\n1\r\n"
            ],
            [
                "5 10\r\n1 3 4\r\n2 3 5\r\n1 1 5\r\n2 1 5\r\n1 4 5\r\n2 2 4\r\n1 2 3\r\n2 1 3\r\n1 5 5\r\n2 2 5\r\n",
                "4\r\n10\r\n5\r\n4\r\n5\r\n"
            ]
        ],
        "private_cases": []
    }
]