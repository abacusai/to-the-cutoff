[
    {
        "name": "Game with Cards",
        "description": "The Alice's computer is broken, so she can't play her favorite card game now.\nTo help Alice, Bob wants to answer \n    n\n her questions. Initially, Bob holds\none card with number \n    0\n in the left hand and one in the right hand. In\nthe \n    i\n-th question, Alice asks Bob to replace a card in the left or right\nhand with a card with number \n    k_i\n (Bob chooses which of two cards he\nchanges, Bob must replace exactly one card). After this action, Alice wants\nthe numbers on the left and right cards to belong to given segments (segments\nfor left and right cards can be different). Formally, let the number on the\nleft card be \n    x\n, and on the right card be \n    y\n. Then after the\n\n    i\n-th swap the following conditions must be satisfied: \n    a_l, i\n    \u2264\n    x \n    \u2264 b_l, i\n, and \n    a_r, i\n    \u2264 y \n    \u2264 b_r,i\n. Please\ndetermine if Bob can answer all requests. If it is possible, find a way to do\nit. Input The first line contains two integers \n    n\n and \n    m\n (\n    2 \n    \u2264\n    n \n    \u2264 100\n     000\n, \n    2 \n    \u2264 m \n    \u2264 10^9\n) \u2014 the number of questions\nand the maximum possible value on the card. Then \n    n\n queries are\ndescribed. Every description contains 3 lines. The first line of the\ndescription of the \n    i\n-th query contains a single integer \n    k_i\n (\n    0\n    \n    \u2264 k_i \n    \u2264 m\n) \u2014 the number on a new card. The second line of the\ndescription of the \n    i\n-th query contains two integers \n    a_l, i\n and\n\n    b_l, i\n (\n    0 \n    \u2264 a_l, i\n    \u2264 b_l, i\n    \u2264 m\n) \u2014 the minimum\nand maximum values of the card at the left hand after the replacement. The\nthird line of the description of the \n    i\n-th query contains two integers\n\n    a_r, i\n and \n    b_r,i\n (\n    0 \n    \u2264 a_r, i\n    \u2264 b_r,i\n    \u2264\n    m\n) \u2014 the minimum and maximum values of the card at the right hand after the\nreplacement. Output At the first line, print \"Yes\", if Bob can answer all\nqueries, and \"No\" otherwise. If Bob can answer all \n    n\n queries, then at\nthe second line print \n    n\n numbers: a way to satisfy all requirements. If\nin \n    i\n-th query Bob needs to replace the card in the left hand, print\n\n    0\n, otherwise print \n    1\n. If there are multiple answers, print any.\nExamples Input 2 10 3 0 3 0 2 2 0 4 0 2 Output Yes 0 1 Input 2 10 3 0 3 0 2 2\n3 4 0 1 Output No Input 5 10 3 0 3 0 3 7 4 7 1 3 2 2 3 3 7 8 1 8 1 8 6 1 6 7\n10 Output Yes 1 0 0 1 0\n\n",
        "cf_contest_id": 1539,
        "cf_index": "E",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "constructive algorithms",
            "data structures",
            "dp",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 10\r\n3\r\n0 3\r\n0 2\r\n2\r\n0 4\r\n0 2\r\n",
                "Yes\r\n0 1 "
            ],
            [
                "2 10\r\n3\r\n0 3\r\n0 2\r\n2\r\n3 4\r\n0 1\r\n",
                "No\r\n"
            ],
            [
                "5 10\r\n3\r\n0 3\r\n0 3\r\n7\r\n4 7\r\n1 3\r\n2\r\n2 3\r\n3 7\r\n8\r\n1 8\r\n1 8\r\n6\r\n1 6\r\n7 10\r\n",
                "Yes\r\n1 0 0 1 0 "
            ]
        ],
        "private_cases": [
            [
                "2 100\r\n2\r\n0 10\r\n1 99\r\n3\r\n3 3\r\n3 5\r\n",
                "No\r\n"
            ],
            [
                "2 2\r\n1\r\n0 2\r\n0 0\r\n2\r\n0 2\r\n2 2\r\n",
                "Yes\r\n0 1 "
            ],
            [
                "6 10\r\n5\r\n0 0\r\n5 5\r\n2\r\n2 2\r\n5 5\r\n7\r\n2 2\r\n7 7\r\n1\r\n2 2\r\n1 1\r\n0\r\n0 0\r\n1 1\r\n2\r\n2 2\r\n1 1\r\n",
                "Yes\r\n1 0 1 1 0 0 "
            ],
            [
                "8 30\r\n3\r\n0 3\r\n0 3\r\n0\r\n0 3\r\n0 3\r\n5\r\n0 4\r\n3 5\r\n5\r\n5 5\r\n5 5\r\n2\r\n1 5\r\n3 5\r\n1\r\n1 5\r\n1 5\r\n3\r\n1 5\r\n3 5\r\n2\r\n2 2\r\n3 3\r\n",
                "Yes\r\n1 0 1 0 0 1 1 0 "
            ],
            [
                "15 100\r\n15\r\n15 15\r\n0 0\r\n13\r\n13 13\r\n0 0\r\n17\r\n17 17\r\n0 0\r\n7\r\n17 17\r\n7 7\r\n19\r\n19 19\r\n7 7\r\n2\r\n19 19\r\n2 2\r\n4\r\n19 19\r\n4 4\r\n23\r\n19 19\r\n23 23\r\n19\r\n19 19\r\n19 19\r\n3\r\n3 3\r\n19 19\r\n5\r\n5 5\r\n19 19\r\n2\r\n5 5\r\n2 2\r\n4\r\n5 5\r\n4 4\r\n4\r\n4 4\r\n4 4\r\n3\r\n3 3\r\n4 4\r\n",
                "Yes\r\n0 0 0 1 0 1 1 1 1 0 0 1 1 0 0 "
            ],
            [
                "10 30\r\n9\r\n9 9\r\n0 0\r\n1\r\n9 9\r\n1 1\r\n5\r\n9 9\r\n5 5\r\n0\r\n0 0\r\n5 5\r\n12\r\n12 12\r\n5 5\r\n11\r\n11 11\r\n5 5\r\n18\r\n11 11\r\n18 18\r\n2\r\n11 11\r\n2 2\r\n9\r\n11 11\r\n9 9\r\n23\r\n11 11\r\n23 23\r\n",
                "Yes\r\n0 1 1 0 0 0 1 1 1 1 "
            ],
            [
                "15 100\r\n34\r\n34 34\r\n0 0\r\n100\r\n100 100\r\n0 0\r\n64\r\n64 64\r\n0 0\r\n67\r\n64 67\r\n0 67\r\n45\r\n64 64\r\n45 45\r\n17\r\n17 64\r\n17 45\r\n1\r\n1 64\r\n1 45\r\n94\r\n1 94\r\n1 94\r\n66\r\n66 66\r\n1 94\r\n53\r\n66 66\r\n53 53\r\n76\r\n66 76\r\n53 76\r\n78\r\n66 78\r\n53 78\r\n83\r\n66 83\r\n53 83\r\n58\r\n66 66\r\n58 58\r\n79\r\n66 79\r\n58 79\r\n",
                "Yes\r\n0 0 0 1 1 0 1 0 0 1 1 1 1 1 0 "
            ],
            [
                "15 100\r\n42\r\n0 0\r\n42 42\r\n49\r\n0 49\r\n42 49\r\n64\r\n64 64\r\n42 49\r\n39\r\n39 64\r\n39 49\r\n41\r\n39 64\r\n39 49\r\n87\r\n39 87\r\n41 87\r\n35\r\n35 87\r\n35 87\r\n61\r\n35 87\r\n35 87\r\n85\r\n35 87\r\n35 87\r\n89\r\n85 89\r\n35 89\r\n24\r\n24 89\r\n24 61\r\n46\r\n46 46\r\n41 42\r\n45\r\n45 45\r\n41 41\r\n15\r\n45 45\r\n15 15\r\n76\r\n45 76\r\n15 76\r\n",
                "Yes\r\n1 0 0 1 1 0 0 0 0 0 0 0 0 1 0 "
            ],
            [
                "15 100\r\n69\r\n69 69\r\n0 0\r\n50\r\n50 69\r\n0 50\r\n10\r\n10 69\r\n10 50\r\n32\r\n32 50\r\n32 50\r\n74\r\n32 74\r\n32 74\r\n100\r\n32 100\r\n32 100\r\n80\r\n32 100\r\n50 100\r\n59\r\n32 100\r\n59 100\r\n9\r\n9 100\r\n9 100\r\n12\r\n12 100\r\n12 100\r\n53\r\n12 100\r\n53 53\r\n0\r\n0 100\r\n0 53\r\n79\r\n59 100\r\n0 79\r\n58\r\n58 100\r\n58 79\r\n96\r\n58 100\r\n58 96\r\n",
                "Yes\r\n0 1 0 0 1 0 1 0 1 1 1 0 0 1 0 "
            ],
            [
                "15 100\r\n58\r\n0 0\r\n58 58\r\n99\r\n0 99\r\n58 99\r\n14\r\n0 99\r\n14 99\r\n18\r\n14 18\r\n14 18\r\n82\r\n82 82\r\n18 18\r\n65\r\n65 65\r\n18 18\r\n19\r\n19 65\r\n18 19\r\n37\r\n19 37\r\n18 37\r\n72\r\n19 72\r\n18 72\r\n15\r\n15 72\r\n15 18\r\n41\r\n15 72\r\n15 41\r\n22\r\n15 72\r\n15 41\r\n99\r\n15 99\r\n18 99\r\n100\r\n99 99\r\n100 100\r\n98\r\n98 99\r\n98 100\r\n",
                "Yes\r\n1 0 0 1 0 0 1 0 1 1 0 1 0 1 0 "
            ],
            [
                "15 100\r\n18\r\n0 0\r\n18 18\r\n1\r\n0 1\r\n1 18\r\n74\r\n74 74\r\n18 18\r\n10\r\n10 74\r\n10 18\r\n84\r\n84 84\r\n10 10\r\n9\r\n9 9\r\n10 10\r\n67\r\n67 67\r\n10 10\r\n42\r\n42 67\r\n10 42\r\n43\r\n67 67\r\n43 43\r\n82\r\n82 82\r\n43 43\r\n8\r\n8 82\r\n8 43\r\n11\r\n11 11\r\n43 43\r\n27\r\n11 11\r\n27 27\r\n74\r\n74 74\r\n27 27\r\n96\r\n74 96\r\n27 96\r\n",
                "Yes\r\n1 0 0 1 0 0 0 1 1 0 0 0 1 0 1 "
            ],
            [
                "15 10\r\n6\r\n0 6\r\n0 6\r\n10\r\n10 10\r\n0 6\r\n0\r\n0 10\r\n0 0\r\n5\r\n10 10\r\n5 5\r\n4\r\n4 4\r\n5 5\r\n10\r\n4 10\r\n5 10\r\n2\r\n2 2\r\n5 5\r\n3\r\n2 3\r\n3 5\r\n4\r\n2 4\r\n3 5\r\n6\r\n2 6\r\n3 6\r\n9\r\n2 9\r\n3 9\r\n5\r\n4 6\r\n5 5\r\n8\r\n4 8\r\n5 8\r\n0\r\n0 0\r\n5 8\r\n2\r\n0 2\r\n2 5\r\n",
                "Yes\r\n1 0 1 1 0 0 0 1 0 1 1 1 0 0 1 "
            ],
            [
                "15 3\r\n2\r\n0 2\r\n0 2\r\n2\r\n2 2\r\n0 0\r\n2\r\n2 2\r\n0 2\r\n3\r\n2 3\r\n0 3\r\n3\r\n2 3\r\n0 3\r\n1\r\n1 1\r\n2 3\r\n1\r\n1 1\r\n2 2\r\n1\r\n1 1\r\n1 2\r\n1\r\n1 1\r\n1 1\r\n0\r\n0 1\r\n0 1\r\n1\r\n1 1\r\n0 1\r\n3\r\n1 3\r\n0 3\r\n1\r\n1 1\r\n0 3\r\n3\r\n1 3\r\n0 3\r\n3\r\n1 3\r\n0 3\r\n",
                "Yes\r\n0 0 1 0 0 0 0 1 0 1 0 1 0 1 0 "
            ],
            [
                "15 40\r\n27\r\n0 27\r\n0 27\r\n31\r\n31 31\r\n27 27\r\n16\r\n16 16\r\n27 27\r\n13\r\n13 13\r\n27 27\r\n27\r\n27 27\r\n27 27\r\n15\r\n15 15\r\n27 27\r\n10\r\n10 15\r\n10 27\r\n35\r\n10 35\r\n10 35\r\n36\r\n36 36\r\n35 35\r\n37\r\n36 36\r\n37 37\r\n9\r\n36 36\r\n9 9\r\n30\r\n30 30\r\n9 9\r\n5\r\n5 30\r\n5 9\r\n5\r\n5 30\r\n5 9\r\n22\r\n5 22\r\n9 22\r\n",
                "Yes\r\n1 0 0 0 0 0 1 1 0 1 1 0 1 0 1 "
            ],
            [
                "15 100\r\n94\r\n94 94\r\n0 0\r\n2\r\n2 94\r\n0 2\r\n69\r\n69 69\r\n0 2\r\n73\r\n69 73\r\n0 73\r\n75\r\n73 73\r\n75 75\r\n9\r\n73 73\r\n9 9\r\n41\r\n73 73\r\n41 41\r\n95\r\n73 73\r\n95 95\r\n23\r\n23 73\r\n23 95\r\n22\r\n22 73\r\n22 23\r\n4\r\n4 73\r\n4 23\r\n57\r\n57 57\r\n4 23\r\n77\r\n77 77\r\n4 23\r\n51\r\n89 89\r\n0 22\r\n70\r\n70 77\r\n23 70\r\n",
                "No\r\n"
            ],
            [
                "15 100\r\n45\r\n0 45\r\n0 45\r\n12\r\n0 45\r\n0 45\r\n40\r\n0 45\r\n0 45\r\n62\r\n62 62\r\n12 12\r\n54\r\n54 62\r\n12 54\r\n22\r\n22 22\r\n12 54\r\n3\r\n3 3\r\n54 54\r\n72\r\n95 99\r\n65 66\r\n9\r\n3 9\r\n9 54\r\n92\r\n92 92\r\n9 54\r\n50\r\n50 92\r\n9 54\r\n22\r\n22 92\r\n22 54\r\n81\r\n22 22\r\n81 81\r\n71\r\n71 71\r\n81 81\r\n9\r\n9 9\r\n81 81\r\n",
                "No\r\n"
            ],
            [
                "15 100\r\n84\r\n0 84\r\n0 84\r\n92\r\n92 92\r\n84 84\r\n87\r\n99 99\r\n6 78\r\n83\r\n92 92\r\n83 83\r\n81\r\n81 92\r\n81 83\r\n17\r\n17 92\r\n17 83\r\n25\r\n25 25\r\n17 83\r\n100\r\n100 100\r\n17 17\r\n16\r\n16 100\r\n16 17\r\n96\r\n100 100\r\n96 96\r\n28\r\n28 100\r\n28 96\r\n49\r\n28 100\r\n28 96\r\n22\r\n28 100\r\n22 22\r\n29\r\n28 49\r\n22 29\r\n64\r\n29 29\r\n64 64\r\n",
                "No\r\n"
            ]
        ]
    }
]