[
    {
        "name": "Parking Lot",
        "description": "Nowadays it is becoming increasingly difficult to park a car in cities\nsuccessfully. Let's imagine a segment of a street as long as L meters along\nwhich a parking lot is located. Drivers should park their cars strictly\nparallel to the pavement on the right side of the street (remember that in the\ncountry the authors of the tasks come from the driving is right side!). Every\ndriver when parking wants to leave for themselves some extra space to move\ntheir car freely, that's why a driver is looking for a place where the\ndistance between his car and the one behind his will be no less than b meters\nand the distance between his car and the one in front of his will be no less\nthan f meters (if there's no car behind then the car can be parked at the\nparking lot segment edge; the same is true for the case when there're no cars\nparked in front of the car). Let's introduce an axis of coordinates along the\npavement. Let the parking lot begin at point 0 and end at point L. The drivers\ndrive in the direction of the coordinates' increasing and look for the\nearliest place (with the smallest possible coordinate) where they can park the\ncar. In case there's no such place, the driver drives on searching for his\nperfect peaceful haven. Sometimes some cars leave the street and free some\nspace for parking. Considering that there never are two moving cars on a\nstreet at a time write a program that can use the data on the drivers,\nentering the street hoping to park there and the drivers leaving it, to model\nthe process and determine a parking lot space for each car. Input The first\nline contains three integers L, b \u0438 f (10 \u2264 L \u2264 100000, 1 \u2264 b, f \u2264 100). The\nsecond line contains an integer n (1 \u2264 n \u2264 100) that indicates the number of\nrequests the program has got. Every request is described on a single line and\nis given by two numbers. The first number represents the request type. If the\nrequest type is equal to 1, then in that case the second number indicates the\nlength of a car (in meters) that enters the street looking for a place to\npark. And if the request type is equal to 2, then the second number identifies\nthe number of such a request (starting with 1) that the car whose arrival to\nthe parking lot was described by a request with this number, leaves the\nparking lot. It is guaranteed that that car was parked at the moment the\nrequest of the 2 type was made. The lengths of cars are integers from 1 to\n1000. Output For every request of the 1 type print number -1 on the single\nline if the corresponding car couldn't find place to park along the street.\nOtherwise, print a single number equal to the distance between the back of the\ncar in its parked position and the beginning of the parking lot zone. Examples\nInput 30 1 2 6 1 5 1 4 1 5 2 2 1 5 1 4 Output 0 6 11 17 23 Input 30 1 1 6 1 5\n1 4 1 5 2 2 1 5 1 4 Output 0 6 11 17 6 Input 10 1 1 1 1 12 Output -1\n\n",
        "cf_contest_id": 46,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "30 1 2\r\n6\r\n1 5\r\n1 4\r\n1 5\r\n2 2\r\n1 5\r\n1 4\r\n",
                "0\r\n6\r\n11\r\n17\r\n23\r\n"
            ],
            [
                "30 1 1\r\n6\r\n1 5\r\n1 4\r\n1 5\r\n2 2\r\n1 5\r\n1 4\r\n",
                "0\r\n6\r\n11\r\n17\r\n6\r\n"
            ],
            [
                "10 1 1\r\n1\r\n1 12\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 1 1\r\n1\r\n1 9\r\n",
                "0\r\n"
            ],
            [
                "10 1 1\r\n1\r\n1 10\r\n",
                "0\r\n"
            ],
            [
                "10 1 1\r\n2\r\n1 3\r\n1 6\r\n",
                "0\r\n4\r\n"
            ],
            [
                "10 1 1\r\n2\r\n1 3\r\n1 7\r\n",
                "0\r\n-1\r\n"
            ],
            [
                "10 1 1\r\n5\r\n1 1\r\n1 2\r\n1 3\r\n2 2\r\n1 4\r\n",
                "0\r\n2\r\n5\r\n-1\r\n"
            ],
            [
                "10 1 1\r\n5\r\n1 4\r\n2 1\r\n1 3\r\n2 3\r\n1 1\r\n",
                "0\r\n0\r\n0\r\n"
            ],
            [
                "10 1 1\r\n5\r\n1 2\r\n1 3\r\n1 1\r\n1 4\r\n1 2\r\n",
                "0\r\n3\r\n7\r\n-1\r\n-1\r\n"
            ],
            [
                "20 1 2\r\n10\r\n1 3\r\n1 2\r\n2 2\r\n2 1\r\n1 4\r\n1 2\r\n1 2\r\n2 7\r\n1 2\r\n1 1\r\n",
                "0\r\n4\r\n0\r\n5\r\n8\r\n8\r\n11\r\n"
            ],
            [
                "20 2 1\r\n10\r\n1 5\r\n1 2\r\n1 1\r\n1 1\r\n1 2\r\n2 4\r\n1 3\r\n1 1\r\n2 5\r\n1 5\r\n",
                "0\r\n7\r\n11\r\n14\r\n17\r\n-1\r\n14\r\n-1\r\n"
            ],
            [
                "20 2 2\r\n10\r\n1 2\r\n1 3\r\n1 3\r\n1 5\r\n1 5\r\n1 1\r\n1 2\r\n1 5\r\n1 5\r\n1 5\r\n",
                "0\r\n4\r\n9\r\n14\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "30 2 1\r\n10\r\n1 4\r\n2 1\r\n1 1\r\n1 3\r\n1 1\r\n1 1\r\n1 2\r\n1 5\r\n2 4\r\n2 7\r\n",
                "0\r\n0\r\n3\r\n8\r\n11\r\n14\r\n18\r\n"
            ],
            [
                "30 1 2\r\n10\r\n1 1\r\n1 1\r\n2 1\r\n1 5\r\n1 2\r\n2 4\r\n1 6\r\n2 5\r\n2 2\r\n2 7\r\n",
                "0\r\n2\r\n4\r\n10\r\n13\r\n"
            ],
            [
                "50 2 3\r\n15\r\n1 7\r\n1 6\r\n1 1\r\n2 3\r\n2 1\r\n2 2\r\n1 1\r\n1 4\r\n1 6\r\n1 2\r\n1 8\r\n1 6\r\n2 7\r\n1 8\r\n2 9\r\n",
                "0\r\n9\r\n17\r\n0\r\n3\r\n9\r\n17\r\n21\r\n31\r\n39\r\n"
            ],
            [
                "50 2 4\r\n15\r\n1 4\r\n1 4\r\n2 1\r\n2 2\r\n1 8\r\n1 7\r\n2 5\r\n1 2\r\n1 7\r\n2 8\r\n1 7\r\n2 11\r\n1 3\r\n2 6\r\n2 9\r\n",
                "0\r\n6\r\n0\r\n10\r\n0\r\n19\r\n28\r\n0\r\n"
            ],
            [
                "50 3 3\r\n20\r\n1 4\r\n2 1\r\n1 1\r\n2 3\r\n1 1\r\n2 5\r\n1 7\r\n2 7\r\n1 4\r\n1 1\r\n1 10\r\n1 5\r\n1 2\r\n2 9\r\n2 11\r\n1 1\r\n1 9\r\n2 13\r\n1 8\r\n1 1\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n7\r\n11\r\n24\r\n32\r\n0\r\n11\r\n32\r\n43\r\n"
            ],
            [
                "50 3 2\r\n20\r\n1 6\r\n1 1\r\n2 2\r\n1 2\r\n1 3\r\n1 1\r\n1 2\r\n2 4\r\n1 7\r\n1 1\r\n2 6\r\n1 9\r\n2 12\r\n2 9\r\n1 8\r\n1 6\r\n1 1\r\n1 8\r\n2 15\r\n1 2\r\n",
                "0\r\n9\r\n9\r\n14\r\n20\r\n24\r\n29\r\n9\r\n39\r\n29\r\n40\r\n20\r\n-1\r\n29\r\n"
            ],
            [
                "50 3 1\r\n30\r\n1 9\r\n2 1\r\n1 6\r\n1 5\r\n1 8\r\n1 1\r\n2 6\r\n1 7\r\n2 3\r\n2 8\r\n1 7\r\n2 4\r\n2 5\r\n2 11\r\n1 2\r\n2 15\r\n1 6\r\n1 3\r\n2 17\r\n1 9\r\n1 3\r\n2 18\r\n1 3\r\n2 23\r\n2 21\r\n1 8\r\n1 2\r\n2 27\r\n1 8\r\n2 29\r\n",
                "0\r\n0\r\n9\r\n17\r\n28\r\n28\r\n0\r\n0\r\n0\r\n9\r\n15\r\n0\r\n6\r\n0\r\n11\r\n27\r\n"
            ]
        ]
    }
]