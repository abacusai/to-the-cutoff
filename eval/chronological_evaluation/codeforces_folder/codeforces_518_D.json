[
    {
        "name": "Ilya and Escalator",
        "description": "Ilya got tired of sports programming, left university and got a job in the\nsubway. He was given the task to determine the escalator load factor. Let's\nassume that n people stand in the queue for the escalator. At each second one\nof the two following possibilities takes place: either the first person in the\nqueue enters the escalator with probability p, or the first person in the\nqueue doesn't move with probability (1 - p), paralyzed by his fear of\nescalators and making the whole queue wait behind him. Formally speaking, the\ni-th person in the queue cannot enter the escalator until people with indices\nfrom 1 to i - 1 inclusive enter it. In one second only one person can enter\nthe escalator. The escalator is infinite, so if a person enters it, he never\nleaves it, that is he will be standing on the escalator at any following\nsecond. Ilya needs to count the expected value of the number of people\nstanding on the escalator after t seconds. Your task is to help him solve this\ncomplicated task. Input The first line of the input contains three numbers n,\np, t (1 \u2264 n, t \u2264 2000, 0 \u2264 p \u2264 1). Numbers n and t are integers, number p is\nreal, given with exactly two digits after the decimal point. Output Print a\nsingle real number \u2014 the expected number of people who will be standing on the\nescalator after t seconds. The absolute or relative error mustn't exceed\n10^-6. Examples Input 1 0.50 1 Output 0.5 Input 1 0.50 4 Output 0.9375 Input 4\n0.20 2 Output 0.4\n\n",
        "cf_contest_id": 518,
        "cf_index": "D",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "dp",
            "math",
            "probabilities"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1 0.50 1\r\n",
                "0.5\r\n"
            ],
            [
                "1 0.50 4\r\n",
                "0.9375\r\n"
            ],
            [
                "4 0.20 2\r\n",
                "0.4\r\n"
            ]
        ],
        "private_cases": [
            [
                "2000 0.61 2000\r\n",
                "1219.9999999999898\r\n"
            ],
            [
                "100 1.00 200\r\n",
                "100.0\r\n"
            ],
            [
                "417 0.57 742\r\n",
                "414.07444214206157\r\n"
            ],
            [
                "100 0.01 53\r\n",
                "0.5299999999999999\r\n"
            ],
            [
                "300 0.05 55\r\n",
                "2.749999999999998\r\n"
            ],
            [
                "1400 0.02 200\r\n",
                "3.999999999999993\r\n"
            ],
            [
                "2000 0.01 234\r\n",
                "2.3399999999999967\r\n"
            ],
            [
                "1 0.01 2000\r\n",
                "0.9999999981362436\r\n"
            ],
            [
                "300 0.99 1000\r\n",
                "299.9999999999999\r\n"
            ],
            [
                "400 0.96 1754\r\n",
                "399.9999999999998\r\n"
            ],
            [
                "2000 0.93 100\r\n",
                "93.00000000000009\r\n"
            ],
            [
                "1000 0.90 1733\r\n",
                "1000.0\r\n"
            ],
            [
                "1 1.00 1\r\n",
                "1.0\r\n"
            ],
            [
                "2000 1.00 2000\r\n",
                "2000.0\r\n"
            ],
            [
                "2000 0.00 2000\r\n",
                "0.0\r\n"
            ],
            [
                "2000 0.01 2000\r\n",
                "19.999999999999712\r\n"
            ],
            [
                "2000 0.99 2000\r\n",
                "1979.999999999998\r\n"
            ],
            [
                "654 0.67 999\r\n",
                "652.8219251262063\r\n"
            ],
            [
                "132 0.34 241\r\n",
                "81.939999999977\r\n"
            ],
            [
                "984 0.19 1565\r\n",
                "297.3500000000197\r\n"
            ],
            [
                "439 0.83 790\r\n",
                "438.99999999999784\r\n"
            ],
            [
                "559 0.92 1006\r\n",
                "558.9999999999987\r\n"
            ],
            [
                "887 0.69 1596\r\n",
                "886.9999999999961\r\n"
            ],
            [
                "211 0.78 379\r\n",
                "210.99999999999994\r\n"
            ],
            [
                "539 0.54 970\r\n",
                "522.4592966160332\r\n"
            ],
            [
                "659 0.97 1186\r\n",
                "658.9999999999993\r\n"
            ],
            [
                "87 0.95 156\r\n",
                "87.0\r\n"
            ],
            [
                "415 0.72 747\r\n",
                "414.999999999999\r\n"
            ],
            [
                "639 0.81 1150\r\n",
                "638.9999999999997\r\n"
            ],
            [
                "818 0.99 1472\r\n",
                "817.9999999999998\r\n"
            ],
            [
                "246 0.98 442\r\n",
                "245.99999999999994\r\n"
            ],
            [
                "470 0.74 846\r\n",
                "469.99999999999864\r\n"
            ]
        ]
    }
]