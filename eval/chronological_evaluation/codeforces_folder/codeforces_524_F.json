[
    {
        "name": "And Yet Another Bracket Sequence",
        "description": "Polycarpus has a finite sequence of opening and closing brackets. In order not\nto fall asleep in a lecture, Polycarpus is having fun with his sequence. He is\nable to perform two operations: adding any bracket in any position (in the\nbeginning, the end, or between any two existing brackets); cyclic shift \u2014\nmoving the last bracket from the end of the sequence to the beginning.\nPolycarpus can apply any number of operations to his sequence and adding a\ncyclic shift in any order. As a result, he wants to get the correct bracket\nsequence of the minimum possible length. If there are several such sequences,\nPolycarpus is interested in the lexicographically smallest one. Help him find\nsuch a sequence. Acorrect bracket sequence is a sequence of opening and\nclosing brackets, from which you can get a correct arithmetic expression by\nadding characters \"1\" and \"+\" . Each opening bracket must correspond to a\nclosed one. For example, the sequences \"(())()\", \"()\", \"(()(()))\" are correct\nand \")(\", \"(()\" and \"(()))(\" are not. The sequence a1 a2... an is\nlexicographically smaller than sequence b1 b2... bn, if there is such number i\nfrom 1 to n, thatak = bk for 1 \u2264 k < i and ai < bi. Consider that \"(\" < \")\".\nInput The first line contains Polycarpus's sequence consisting of characters\n\"(\" and \")\". The length of a line is from 1 to 1 000 000. Output Print a\ncorrect bracket sequence of the minimum length that Polycarpus can obtain by\nhis operations. If there are multiple such sequences, print the\nlexicographically minimum one. Examples Input ()(()) Output (())() Input ()(\nOutput (()) Note The sequence in the first example is already correct, but to\nget the lexicographically minimum answer, you need to perform four cyclic\nshift operations. In the second example you need to add a closing parenthesis\nbetween the second and third brackets and make a cyclic shift. You can first\nmake the shift, and then add the bracket at the end.\n\n",
        "cf_contest_id": 524,
        "cf_index": "F",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "hashing",
            "string suffix structures",
            "strings"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "()(())\r\n",
                "(())()"
            ],
            [
                "()(\r\n",
                "(())"
            ]
        ],
        "private_cases": [
            [
                "(\r\n",
                "()"
            ],
            [
                ")\r\n",
                "()"
            ],
            [
                "()\r\n",
                "()"
            ],
            [
                ")(\r\n",
                "()"
            ],
            [
                "))(\r\n",
                "(())"
            ],
            [
                "(()()\r\n",
                "(()())"
            ],
            [
                ")(()()))((\r\n",
                "(()(()()))"
            ],
            [
                "(((())))))()(()\r\n",
                "((()(((())))))()"
            ],
            [
                ")())))(((())))())))))))()())(())))))))())))(((())))())()()))(())())((()())(((((()()()())()()()))((()\r\n",
                "(((((((((((((((((((((((())))())()()))(())())((()())(((((()()()())()()()))((())())))(((())))())))))))()())(())))))))())))"
            ]
        ]
    }
]