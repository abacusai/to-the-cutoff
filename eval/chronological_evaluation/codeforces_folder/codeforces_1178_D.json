[
    {
        "name": "Prime Graph",
        "description": "Every person likes prime numbers. Alice is a person, thus she also shares the\nlove for them. Bob wanted to give her an affectionate gift but couldn't think\nof anything inventive. Hence, he will be giving her a graph. How original,\nBob! Alice will surely be thrilled! When building the graph, he needs four\nconditions to be satisfied: It must be a simple undirected graph, i.e. without\nmultiple (parallel) edges and self-loops. The number of vertices must be\nexactly \n    n\n \u2014 a number he selected. This number is not necessarily prime.\nThe total number of edges must be prime. The degree (i.e. the number of edges\nconnected to the vertex) of each vertex must be prime. Below is an example for\n\n    n = 4\n. The first graph (left one) is invalid as the degree of vertex\n\n    2\n (and \n    4\n) equals to \n    1\n, which is not prime. The second graph\n(middle one) is invalid as the total number of edges is \n    4\n, which is not\na prime number. The third graph (right one) is a valid answer for \n    n = 4\n.\nNote that the graph can be disconnected. Please help Bob to find any such\ngraph! Input The input consists of a single integer \n    n\n (\n    3 \n    \u2264 n\n    \n    \u2264 1\n     000\n) \u2014 the number of vertices. Output If there is no graph\nsatisfying the conditions, print a single line containing the integer\n\n    -1\n. Otherwise, first print a line containing a prime number \n    m\n\n(\n    2 \n    \u2264 m \n    \u2264\n    n(n-1)/2\n) \u2014 the number of edges in the\ngraph. Then, print \n    m\n lines, the \n    i\n-th of which containing two\nintegers \n    u_i\n, \n    v_i\n (\n    1 \n    \u2264 u_i, v_i \n    \u2264 n\n) \u2014 meaning\nthat there is an edge between vertices \n    u_i\n and \n    v_i\n. The degree of\neach vertex must be prime. There must be no multiple (parallel) edges or self-\nloops. If there are multiple solutions, you may print any of them. Note that\nthe graph can be disconnected. Examples Input 4 Output 5 1 2 1 3 2 3 2 4 3 4\nInput 8 Output 13 1 2 1 3 2 3 1 4 2 4 1 5 2 5 1 6 2 6 1 7 1 8 5 8 7 8 Note The\nfirst example was described in the statement. In the second example, the\ndegrees of vertices are \n    [7, 5, 2, 2, 3, 2, 2, 3]\n. Each of these numbers\nis prime. Additionally, the number of edges, \n    13\n, is also a prime number,\nhence both conditions are satisfied.\n\n",
        "cf_contest_id": 1178,
        "cf_index": "D",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n",
                "5\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n1 3\r\n"
            ],
            [
                "8\r\n",
                "11\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 1\r\n1 5\r\n2 6\r\n3 7\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n",
                "3\r\n1 2\r\n2 3\r\n3 1\r\n"
            ],
            [
                "16\r\n",
                "17\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 11\r\n11 12\r\n12 13\r\n13 14\r\n14 15\r\n15 16\r\n16 1\r\n1 9\r\n"
            ],
            [
                "9\r\n",
                "11\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 1\r\n1 5\r\n2 6\r\n"
            ],
            [
                "10\r\n",
                "11\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 1\r\n1 6\r\n"
            ],
            [
                "11\r\n",
                "11\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 11\r\n11 1\r\n"
            ],
            [
                "12\r\n",
                "13\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 11\r\n11 12\r\n12 1\r\n1 7\r\n"
            ],
            [
                "13\r\n",
                "13\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 11\r\n11 12\r\n12 13\r\n13 1\r\n"
            ],
            [
                "14\r\n",
                "17\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 11\r\n11 12\r\n12 13\r\n13 14\r\n14 1\r\n1 8\r\n2 9\r\n3 10\r\n"
            ],
            [
                "15\r\n",
                "17\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 11\r\n11 12\r\n12 13\r\n13 14\r\n14 15\r\n15 1\r\n1 8\r\n2 9\r\n"
            ],
            [
                "17\r\n",
                "17\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 11\r\n11 12\r\n12 13\r\n13 14\r\n14 15\r\n15 16\r\n16 17\r\n17 1\r\n"
            ],
            [
                "18\r\n",
                "19\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 11\r\n11 12\r\n12 13\r\n13 14\r\n14 15\r\n15 16\r\n16 17\r\n17 18\r\n18 1\r\n1 10\r\n"
            ],
            [
                "19\r\n",
                "19\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 11\r\n11 12\r\n12 13\r\n13 14\r\n14 15\r\n15 16\r\n16 17\r\n17 18\r\n18 19\r\n19 1\r\n"
            ],
            [
                "20\r\n",
                "23\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 11\r\n11 12\r\n12 13\r\n13 14\r\n14 15\r\n15 16\r\n16 17\r\n17 18\r\n18 19\r\n19 20\r\n20 1\r\n1 11\r\n2 12\r\n3 13\r\n"
            ],
            [
                "21\r\n",
                "23\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 11\r\n11 12\r\n12 13\r\n13 14\r\n14 15\r\n15 16\r\n16 17\r\n17 18\r\n18 19\r\n19 20\r\n20 21\r\n21 1\r\n1 11\r\n2 12\r\n"
            ],
            [
                "22\r\n",
                "23\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 11\r\n11 12\r\n12 13\r\n13 14\r\n14 15\r\n15 16\r\n16 17\r\n17 18\r\n18 19\r\n19 20\r\n20 21\r\n21 22\r\n22 1\r\n1 12\r\n"
            ],
            [
                "23\r\n",
                "23\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 11\r\n11 12\r\n12 13\r\n13 14\r\n14 15\r\n15 16\r\n16 17\r\n17 18\r\n18 19\r\n19 20\r\n20 21\r\n21 22\r\n22 23\r\n23 1\r\n"
            ],
            [
                "24\r\n",
                "29\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 11\r\n11 12\r\n12 13\r\n13 14\r\n14 15\r\n15 16\r\n16 17\r\n17 18\r\n18 19\r\n19 20\r\n20 21\r\n21 22\r\n22 23\r\n23 24\r\n24 1\r\n1 13\r\n2 14\r\n3 15\r\n4 16\r\n5 17\r\n"
            ],
            [
                "25\r\n",
                "29\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 11\r\n11 12\r\n12 13\r\n13 14\r\n14 15\r\n15 16\r\n16 17\r\n17 18\r\n18 19\r\n19 20\r\n20 21\r\n21 22\r\n22 23\r\n23 24\r\n24 25\r\n25 1\r\n1 13\r\n2 14\r\n3 15\r\n4 16\r\n"
            ],
            [
                "5\r\n",
                "5\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 1\r\n"
            ],
            [
                "6\r\n",
                "7\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 1\r\n1 4\r\n"
            ],
            [
                "7\r\n",
                "7\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 1\r\n"
            ]
        ]
    }
]