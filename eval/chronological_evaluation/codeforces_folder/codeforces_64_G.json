[
    {
        "name": "Path Canonization",
        "description": "A path in some Unix-similar file system is given. The path consists of\nelements separated with characters \"/\". For example:\n\"/usr/share/mysql/../tomcat6/conf/server.xml\". The path starts with the root\ndirectory (i.e. starts with the character \"/\"). Each element means a name of\nfile or directory, or it is one of two special elements: \".\" \u0438\u043b\u0438 \"..\". First\nof them stands for the current directory (for example, path \"/./usr/././share\"\nis equal to \"/usr/share\"). The second element \"..\" stands for the moving to\nthe parent directory (for example, path \"/usr/share/../lib\" is equal to\n\"/usr/lib\"). You task is to convert the given path to such a path, which\ndoesn't contain special elements \".\" and/or \"..\". If it is impossible, print\n\"-1\". The only reason for it is an attempt to move to the parent directory\nfrom the root. Input The only line contains the given path. The path starts\nwith \"/\" and consists of elements separated with \"/\". No two \"/\" follow one\nafter another (consecutively). The only path which can end with \"/\" is the\nroot directory path equal to \"/\". Each element may contain \"a\"-\"z\", \"0\"-\"9\"\nand dots. Any element different from specials \".\" and \"..\" contains at least\none character different from the dots. The path length is between 1 and 1000\ninclusively. Output Print the required path or \"-1\". Examples Input\n/usr/share/mysql/../tomcat6/conf/server.xml Output\n/usr/share/tomcat6/conf/server.xml Input /a/./././.. Output /\n\n",
        "cf_contest_id": 64,
        "cf_index": "G",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "*special"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 64.0,
        "public_cases": [
            [
                "/usr/share/mysql/../tomcat6/conf/server.xml\r\n",
                "/usr/share/tomcat6/conf/server.xml\r\n"
            ],
            [
                "/a/./././..\r\n",
                "/\r\n"
            ]
        ],
        "private_cases": [
            [
                "/\r\n",
                "/\r\n"
            ],
            [
                "/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c\r\n",
                "/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c/a/b/c\r\n"
            ],
            [
                "/a00\r\n",
                "/a00\r\n"
            ],
            [
                "/.a./..\r\n",
                "/\r\n"
            ],
            [
                "/0/a/.\r\n",
                "/0/a\r\n"
            ],
            [
                "/././0/0\r\n",
                "/0/0\r\n"
            ],
            [
                "/aba0/../a000/ab/..a\r\n",
                "/a000/ab/..a\r\n"
            ],
            [
                "/./././a../00/..\r\n",
                "/a..\r\n"
            ],
            [
                "/a../a/./b/.a././..a\r\n",
                "/a../a/b/.a./..a\r\n"
            ],
            [
                "/.a./.a./.a./././aba0/.c/0/../ba.cab\r\n",
                "/.a./.a./.a./aba0/.c/ba.cab\r\n"
            ],
            [
                "/a../../.a./..a/../00/../../0/ca/.a./.././..\r\n",
                "/0\r\n"
            ],
            [
                "/.caba0/../.a./..a/00/aba.ca/.a./../../a/a.c/.././..a/a.././.a./../.ca/a../.././a../.a./..a/..a/./../00/.\r\n",
                "/.a./..a/00/a/..a/a../.ca/a../.a./..a/00\r\n"
            ]
        ]
    }
]