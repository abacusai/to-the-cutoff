[
    {
        "name": "Circular RMQ",
        "description": "You are given circular array a0, a1, ..., an - 1. There are two types of\noperations with it: inc(lf, rg, v) \u2014 this operation increases each element on\nthe segment [lf, rg] (inclusively) by v; rmq(lf, rg) \u2014 this operation returns\nminimal value on the segment [lf, rg] (inclusively). Assume segments to be\ncircular, so if n = 5 and lf = 3, rg = 1, it means the index sequence: 3, 4,\n0, 1. Write program to process given sequence of operations. Input The first\nline contains integer n (1 \u2264 n \u2264 200000). The next line contains initial state\nof the array: a0, a1, ..., an - 1 ( - 10^6 \u2264 ai \u2264 10^6), ai are integer. The\nthird line contains integer m (0 \u2264 m \u2264 200000), m \u2014 the number of operartons.\nNext m lines contain one operation each. If line contains two integer lf, rg\n(0 \u2264 lf, rg \u2264 n - 1) it means rmq operation, it contains three integers lf,\nrg, v (0 \u2264 lf, rg \u2264 n - 1; - 10^6 \u2264 v \u2264 10^6) \u2014 inc operation. Output For each\nrmq operation write result for it. Please, do not use \nread or write 64-bit integers in C++. It is preffered to use cout (also you\nmay use \n\n",
        "cf_contest_id": 52,
        "cf_index": "C",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 1.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 2 3 4\r\n4\r\n3 0\r\n3 0 -1\r\n0 1\r\n2 1\r\n",
                "1\r\n0\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n1\r\n0 0 0\r\n",
                ""
            ],
            [
                "1\r\n-1\r\n10\r\n0 0 -1\r\n0 0\r\n0 0 1\r\n0 0\r\n0 0 1\r\n0 0\r\n0 0 0\r\n0 0\r\n0 0 -1\r\n0 0 1\r\n",
                "-2\r\n-1\r\n0\r\n0\r\n"
            ],
            [
                "2\r\n-1 -1\r\n10\r\n0 0\r\n0 0\r\n0 0 1\r\n0 0\r\n1 1\r\n0 0 -1\r\n0 0 0\r\n0 0 1\r\n1 1 0\r\n0 0 -1\r\n",
                "-1\r\n-1\r\n0\r\n-1\r\n"
            ]
        ]
    }
]