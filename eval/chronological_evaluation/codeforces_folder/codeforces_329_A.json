[
    {
        "name": "Purification",
        "description": "You are an adventurer currently journeying inside an evil temple. After\ndefeating a couple of weak zombies, you arrived at a square room consisting of\ntiles forming an n \u00d7 n grid. The rows are numbered 1 through n from top to\nbottom, and the columns are numbered 1 through n from left to right. At the\nfar side of the room lies a door locked with evil magical forces. The\nfollowing inscriptions are written on the door: The cleaning of all evil will\nawaken the door! Being a very senior adventurer, you immediately realize what\nthis means. You notice that every single cell in the grid are initially evil.\nYou should purify all of these cells. The only method of tile purification\nknown to you is by casting the \"Purification\" spell. You cast this spell on a\nsingle tile \u2014 then, all cells that are located in the same row and all cells\nthat are located in the same column as the selected tile become purified\n(including the selected tile)! It is allowed to purify a cell more than once.\nYou would like to purify all n \u00d7 n cells while minimizing the number of times\nyou cast the \"Purification\" spell. This sounds very easy, but you just noticed\nthat some tiles are particularly more evil than the other tiles. You cannot\ncast the \"Purification\" spell on those particularly more evil tiles, not even\nafter they have been purified. They can still be purified if a cell sharing\nthe same row or the same column gets selected by the \"Purification\" spell.\nPlease find some way to purify all the cells with the minimum number of spells\ncast. Print -1 if there is no such way. Input The first line will contain a\nsingle integer n (1 \u2264 n \u2264 100). Then, n lines follows, each contains n\ncharacters. The j-th character in the i-th row represents the cell located at\nrow i and column j. It will be the character 'E' if it is a particularly more\nevil cell, and '.' otherwise. Output If there exists no way to purify all the\ncells, output -1. Otherwise, if your solution casts x \"Purification\" spells\n(where x is the minimum possible number of spells), output x lines. Each line\nshould consist of two integers denoting the row and column numbers of the cell\non which you should cast the \"Purification\" spell. Examples Input 3 .E. E.E\n.E. Output 1 1 2 2 3 3 Input 3 EEE E.. E.E Output -1 Input 5 EE.EE E.EE. E...E\n.EE.E EE.EE Output 3 3 1 3 2 2 4 4 5 3 Note The first example is illustrated\nas follows. Purple tiles are evil tiles that have not yet been purified. Red\ntile is the tile on which \"Purification\" is cast. Yellow tiles are the tiles\nbeing purified as a result of the current \"Purification\" spell. Green tiles\nare tiles that have been purified previously. In the second example, it is\nimpossible to purify the cell located at row 1 and column 1. For the third\nexample:\n\n",
        "cf_contest_id": 329,
        "cf_index": "A",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n.E.\r\nE.E\r\n.E.\r\n",
                "1 1\r\n2 2\r\n3 1\r\n"
            ],
            [
                "3\r\nEEE\r\nE..\r\nE.E\r\n",
                "-1\r\n"
            ],
            [
                "5\r\nEE.EE\r\nE.EE.\r\nE...E\r\n.EE.E\r\nEE.EE\r\n",
                "1 3\r\n2 2\r\n3 2\r\n4 1\r\n5 3\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n.EE\r\n.EE\r\n.EE\r\n",
                "1 1\r\n2 1\r\n3 1\r\n"
            ],
            [
                "5\r\nEE.EE\r\nEE..E\r\nEEE..\r\nEE..E\r\nEE.EE\r\n",
                "1 3\r\n2 3\r\n3 4\r\n4 3\r\n5 3\r\n"
            ],
            [
                "1\r\nE\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n.\r\n",
                "1 1\r\n"
            ],
            [
                "2\r\nEE\r\nEE\r\n",
                "-1\r\n"
            ],
            [
                "2\r\n.E\r\n.E\r\n",
                "1 1\r\n2 1\r\n"
            ],
            [
                "3\r\n.EE\r\nEEE\r\nEEE\r\n",
                "-1\r\n"
            ],
            [
                "3\r\nE..\r\nEEE\r\nE..\r\n",
                "-1\r\n"
            ],
            [
                "4\r\nEEEE\r\n..E.\r\n..E.\r\n..E.\r\n",
                "-1\r\n"
            ],
            [
                "3\r\n..E\r\n.EE\r\n.EE\r\n",
                "1 1\r\n2 1\r\n3 1\r\n"
            ]
        ]
    }
]