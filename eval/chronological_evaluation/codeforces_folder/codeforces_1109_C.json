[
    {
        "name": "Sasha and a Patient Friend",
        "description": "Fedya and Sasha are friends, that's why Sasha knows everything about Fedya.\nFedya keeps his patience in an infinitely large bowl. But, unlike the bowl,\nFedya's patience isn't infinite, that is why let \n    v\n be the number of\nliters of Fedya's patience, and, as soon as \n    v\n becomes equal to \n    0\n,\nthe bowl will burst immediately. There is one tap in the bowl which pumps\n\n    s\n liters of patience per second. Notice that \n    s\n can be negative, in\nthat case, the tap pumps out the patience. Sasha can do different things, so\nhe is able to change the tap's speed. All actions that Sasha does can be\nrepresented as \n    q\n queries. There are three types of queries: \"1 t s\" \u2014\nadd a new event, means that starting from the \n    t\n-th second the tap's\nspeed will be equal to \n    s\n. \"2 t\" \u2014 delete the event which happens at the\n\n    t\n-th second. It is guaranteed that such event exists. \"3 l r v\" \u2014 Sasha\nwonders: if you take all the events for which \n    l \n    \u2264 t \n    \u2264 r\n and\nsimulate changes of Fedya's patience from the very beginning of the \n    l\n-th\nsecond till the very beginning of the \n    r\n-th second inclusive (the initial\nvolume of patience, at the beginning of the \n    l\n-th second, equals to\n\n    v\n liters) then when will be the moment when the bowl will burst. If that\ndoes not happen, then the answer will be \n    -1\n. Since Sasha does not want\nto check what will happen when Fedya's patience ends, and he has already come\nup with the queries, he is asking you to help him and find the answer for each\nquery of the \n    3\n-rd type. It is guaranteed that at any moment of time,\nthere won't be two events which happen at the same second. Input The first\nline contans one integer \n    q\n (\n    1 \n    \u2264 q \n    \u2264 10^5\n) \u2014 the number of\nqueries. Each of the next \n    q\n lines have one of the following formats: 1 t\ns (\n    1 \n    \u2264 t \n    \u2264 10^9\n, \n    -10^9 \n    \u2264 s \n    \u2264 10^9\n), means that a\nnew event is added, which means that starting from the \n    t\n-th second the\ntap's speed will be equal to \n    s\n. 2 t (\n    1 \n    \u2264 t \n    \u2264 10^9\n), means\nthat the event which happens at the \n    t\n-th second must be deleted.\nGuaranteed that such exists. 3 l r v (\n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 10^9\n, \n    0\n    \n    \u2264 v \n    \u2264 10^9\n), means that you should simulate the process from the\nvery beginning of the \n    l\n-th second till the very beginning of the\n\n    r\n-th second inclusive, and to say when will the bowl burst. It is\nguaranteed that \n    t\n, \n    s\n, \n    l\n, \n    r\n, \n    v\n in all the queries\nare integers. Also, it is guaranteed that there is at least one query of the\n\n    3\n-rd type, and there won't be a query of the \n    1\n-st type with such\n\n    t\n, that there already exists an event which happens at that second\n\n    t\n. Output For each query of the \n    3\n-rd type, print in a new line the\nmoment when the bowl will burst or print \n    -1\n if it won't happen. Your\nanswer will be considered correct if it's absolute or relative error does not\nexceed \n    10^-6\n. Formally, let your answer be \n    a\n, and the jury's\nanswer be \n    b\n. Your answer is accepted if and only if \n    |a -\n    b|/\n    max(1, |b|)\n    \u2264 10^-6\n. Examples Input 6 1 2 1 1 4 -3 3 1 6 1\n3 1 6 3 3 1 6 4 3 1 6 5 Output 5 5.666667 6 -1 Input 10 1 2 2 1 4 4 1 7 -10 3\n2 4 1 3 5 6 0 3 1 15 1 2 4 3 1 15 1 1 8 1 3 1 15 1 Output -1 5 8.7 8.1 -1\nInput 5 1 1000 9999999 1 2000 -9999 3 1000 2000 0 2 1000 3 1000 2002 1 Output\n1000 2000.0001 Note In the first example all the queries of the \n    3\n-rd\ntype cover all the events, it's simulation is following:\n\n",
        "cf_contest_id": 1109,
        "cf_index": "C",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 1.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n1 2 1\r\n1 4 -3\r\n3 1 6 1\r\n3 1 6 3\r\n3 1 6 4\r\n3 1 6 5\r\n",
                "5.0000000000\r\n5.6666666667\r\n6.0000000000\r\n-1\r\n"
            ],
            [
                "10\r\n1 2 2\r\n1 4 4\r\n1 7 -10\r\n3 2 4 1\r\n3 5 6 0\r\n3 1 15 1\r\n2 4\r\n3 1 15 1\r\n1 8 1\r\n3 1 15 1\r\n",
                "-1\r\n5\r\n8.7000000000\r\n8.1000000000\r\n-1\r\n"
            ],
            [
                "5\r\n1 1000 9999999\r\n1 2000 -9999\r\n3 1000 2000 0\r\n2 1000\r\n3 1000 2002 1\r\n",
                "1000\r\n2000.0001000100\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 4 -5\r\n3 4 5 5\r\n",
                "5.0000000000\r\n"
            ],
            [
                "4\r\n1 4 -1\r\n3 3 4 1\r\n2 4\r\n3 3 4 1\r\n",
                "-1\r\n-1\r\n"
            ],
            [
                "2\r\n1 4 5\r\n3 4 10 0\r\n",
                "4\r\n"
            ],
            [
                "1\r\n3 1000000000 1000000000 1000000000\r\n",
                "-1\r\n"
            ],
            [
                "15\r\n1 1 -1000000000\r\n1 1000000000 1000000000\r\n3 1 1000000000 1000000000\r\n2 1000000000\r\n2 1\r\n1 1 1000000000\r\n1 2 1000000000\r\n1 3 1000000000\r\n1 4 1000000000\r\n1 500 1000000000\r\n1 322 1000000000\r\n1 500000000 -1000000000\r\n3 1 1000000000 1\r\n3 1 1000000000 1000000000\r\n3 100 1000000000 1\r\n",
                "2.0000000000\r\n999999999.0000000000\r\n1000000000.0000000000\r\n999999678.0000000000\r\n"
            ]
        ]
    }
]