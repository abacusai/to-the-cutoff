[
    {
        "name": "Books Queries",
        "description": "You have got a shelf and want to put some books on it. You are given \n    q\n\nqueries of three types: L \n    id\n \u2014 put a book having index \n    id\n on the\nshelf to the left from the leftmost existing book; R \n    id\n \u2014 put a book\nhaving index \n    id\n on the shelf to the right from the rightmost existing\nbook; ? \n    id\n \u2014 calculate the minimum number of books you need to pop from\nthe left or from the right in such a way that the book with index \n    id\n\nwill be leftmost or rightmost. You can assume that the first book you will put\ncan have any position (it does not matter) and queries of type \n    3\n are\nalways valid (it is guaranteed that the book in each such query is already\nplaced). You can also assume that you don't put the same book on the shelf\ntwice, so \n    id\ns don't repeat in queries of first two types. Your problem\nis to answer all the queries of type \n    3\n in order they appear in the\ninput. Note that after answering the query of type \n    3\n all the books\nremain on the shelf and the relative order of books does not change. If you\nare Python programmer, consider using PyPy instead of Python when you submit\nyour code. Input The first line of the input contains one integer \n    q\n\n(\n    1 \n    \u2264 q \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of queries. Then \n    q\n\nlines follow. The \n    i\n-th line contains the \n    i\n-th query in format as\nin the problem statement. It is guaranteed that queries are always valid (for\nquery type \n    3\n, it is guaranteed that the book in each such query is\nalready placed, and for other types, it is guaranteed that the book was not\nplaced before). It is guaranteed that there is at least one query of type\n\n    3\n in the input. In each query the constraint \n    1 \n    \u2264 id \n    \u2264 2\n    \n    \u00b7 10^5\n is met. Output Print answers to queries of the type \n    3\n in\norder they appear in the input. Examples Input 8 L 1 R 2 R 3 ? 2 L 4 ? 1 L 5 ?\n1 Output 1 1 2 Input 10 L 100 R 100000 R 123 L 101 ? 123 L 10 R 115 ? 100 R\n110 ? 115 Output 0 2 1 Note Let's take a look at the first example and let's\nconsider queries: The shelf will look like \n    [1]\n; The shelf will look like\n\n    [1, 2]\n; The shelf will look like \n    [1, 2, 3]\n; The shelf looks like\n\n    [1, \n    2, 3]\n so the answer is \n    1\n; The shelf will look like\n\n    [4, 1, 2, 3]\n; The shelf looks like \n    [4, \n    1, 2, 3]\n so the\nanswer is \n    1\n; The shelf will look like \n    [5, 4, 1, 2, 3]\n; The shelf\nlooks like \n    [5, 4, \n    1, 2, 3]\n so the answer is \n    2\n. Let's\ntake a look at the second example and let's consider queries: The shelf will\nlook like \n    [100]\n; The shelf will look like \n    [100, 100000]\n; The shelf\nwill look like \n    [100, 100000, 123]\n; The shelf will look like \n    [101,\n    100, 100000, 123]\n; The shelf looks like \n    [101, 100, 100000,\n    \n    123]\n so the answer is \n    0\n; The shelf will look like \n    [10,\n    101, 100, 100000, 123]\n; The shelf will look like \n    [10, 101, 100, 100000,\n    123, 115]\n; The shelf looks like \n    [10, 101, \n    100, 100000, 123,\n    115]\n so the answer is \n    2\n; The shelf will look like \n    [10, 101, 100,\n    100000, 123, 115, 110]\n; The shelf looks like \n    [10, 101, 100, 100000, 123,\n    \n    115, 110]\n so the answer is \n    1\n.\n\n",
        "cf_contest_id": 1066,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8\r\nL 1\r\nR 2\r\nR 3\r\n? 2\r\nL 4\r\n? 1\r\nL 5\r\n? 1\r\n",
                "1\r\n1\r\n2\r\n"
            ],
            [
                "10\r\nL 100\r\nR 100000\r\nR 123\r\nL 101\r\n? 123\r\nL 10\r\nR 115\r\n? 100\r\nR 110\r\n? 115\r\n",
                "0\r\n2\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "6\r\nL 1\r\nR 2\r\nR 3\r\n? 2\r\nL 4\r\n? 1\r\n",
                "1\r\n1\r\n"
            ],
            [
                "7\r\nL 1\r\nR 2\r\nR 3\r\nL 4\r\nL 5\r\n? 1\r\n? 2\r\n",
                "2\r\n1\r\n"
            ]
        ]
    }
]