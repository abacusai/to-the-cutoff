[
    {
        "name": "Subway Innovation",
        "description": "Berland is going through tough times \u2014 the dirt price has dropped and that is\na blow to the country's economy. Everybody knows that Berland is the top world\ndirt exporter! The President of Berland was forced to leave only k of the\ncurrently existing n subway stations. The subway stations are located on a\nstraight line one after another, the trains consecutively visit the stations\nas they move. You can assume that the stations are on the Ox axis, the i-th\nstation is at point with coordinate xi. In such case the distance between\nstations i and j is calculated by a simple formula |xi - xj|. Currently, the\nMinistry of Transport is choosing which stations to close and which ones to\nleave. Obviously, the residents of the capital won't be too enthusiastic about\nthe innovation, so it was decided to show the best side to the people. The\nMinistry of Transport wants to choose such k stations that minimize the\naverage commute time in the subway! Assuming that the train speed is constant\n(it is a fixed value), the average commute time in the subway is calculated as\nthe sum of pairwise distances between stations, divided by the number of pairs\n(that is ) and divided by the speed of the train. Help the Minister of\nTransport to solve this difficult problem. Write a program that, given the\nlocation of the stations selects such k stations that the average commute time\nin the subway is minimized. Input The first line of the input contains integer\nn (3 \u2264 n \u2264 3\u00b710^5) \u2014 the number of the stations before the innovation. The\nsecond line contains the coordinates of the stations x1, x2, ..., xn ( - 10^8\n\u2264 xi \u2264 10^8). The third line contains integer k (2 \u2264 k \u2264 n - 1) \u2014 the number\nof stations after the innovation. The station coordinates are distinct and not\nnecessarily sorted. Output Print a sequence of k distinct integers t1, t2,\n..., tk (1 \u2264 tj \u2264 n) \u2014 the numbers of the stations that should be left after\nthe innovation in arbitrary order. Assume that the stations are numbered 1\nthrough n in the order they are given in the input. The number of stations you\nprint must have the minimum possible average commute time among all possible\nways to choose k stations. If there are multiple such ways, you are allowed to\nprint any of them. Examples Input 3 1 100 101 2 Output 2 3 Note In the sample\ntestcase the optimal answer is to destroy the first station (with x = 1). The\naverage commute time will be equal to 1 in this way.\n\n",
        "cf_contest_id": 371,
        "cf_index": "E",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "math",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 100 101\r\n2\r\n",
                "2 3\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n11 21 30 40 50\r\n3\r\n",
                "1 2 3\r\n"
            ],
            [
                "3\r\n0 -4 -3\r\n2\r\n",
                "2 3\r\n"
            ],
            [
                "4\r\n5 -7 8 1\r\n2\r\n",
                "1 3\r\n"
            ],
            [
                "5\r\n-4 -2 10 -9 -10\r\n2\r\n",
                "5 4\r\n"
            ],
            [
                "6\r\n9 8 4 -4 -6 -8\r\n2\r\n",
                "2 1\r\n"
            ],
            [
                "7\r\n10 -6 0 -5 -2 -8 7\r\n2\r\n",
                "2 4\r\n"
            ],
            [
                "5\r\n-10 -5 3 4 -3\r\n3\r\n",
                "1 2 5\r\n"
            ],
            [
                "6\r\n8 -7 1 5 -8 4\r\n3\r\n",
                "3 6 4\r\n"
            ],
            [
                "7\r\n-5 1 3 2 -9 -1 -4\r\n3\r\n",
                "2 4 3\r\n"
            ],
            [
                "100\r\n237 -708 796 -645 75 387 992 343 -219 -696 777 -722 844 -409 6 989 39 -151 -182 -936 749 -971 -283 -929 668 317 545 -483 58 -715 197 -461 -631 -194 569 636 -24 842 -181 848 156 269 500 781 904 -512 621 -834 -892 -550 -805 -137 -220 164 198 -930 614 241 590 193 -636 144 415 -49 546 818 982 311 677 579 906 -795 912 -387 255 -742 606 122 672 869 -475 -628 644 -517 -73 -317 153 980 -571 57 -526 -278 451 -556 -266 365 358 -815 522 846\r\n2\r\n",
                "56 24\r\n"
            ],
            [
                "100\r\n713 -567 -923 200 -476 -730 -458 926 -683 -637 -818 -565 791 593 -108 970 -173 -633 320 23 220 595 454 -824 -608 252 -756 -933 -863 176 652 -520 -600 550 -540 -140 -611 -304 528 928 339 112 -539 477 -663 -114 363 -687 253 -124 887 48 111 -662 -146 -66 635 519 -350 469 815 321 316 -32 95 62 896 822 -830 481 -729 294 -6 206 -887 -708 -642 69 185 -292 906 667 -974 348 344 842 737 473 -131 288 -610 905 722 -979 -415 -460 -889 -486 -156 837\r\n4\r\n",
                "37 91 25 33\r\n"
            ],
            [
                "100\r\n-167 577 599 -770 -68 -805 604 -776 -136 373 433 -662 -583 52 606 -606 337 250 -412 901 -737 472 -686 -955 243 125 -248 -457 794 655 630 578 -530 891 467 -192 -304 975 -722 -290 -765 -887 966 314 -155 409 -909 -265 -843 -395 -993 -755 449 -844 821 940 597 902 -480 -566 990 427 -899 -587 538 -405 656 485 340 881 -217 684 -854 855 -329 -465 -150 863 441 -730 857 938 114 86 843 443 81 -474 -61 356 503 -188 761 -246 -445 -827 -316 -390 790 647\r\n8\r\n",
                "62 11 79 86 53 35 22 68\r\n"
            ],
            [
                "100\r\n857 603 431 535 -564 421 -637 -615 -484 888 467 -534 -72 13 579 699 362 911 675 925 902 677 -938 -776 618 741 614 -138 283 -134 -82 -854 854 -391 923 20 264 267 22 -857 -58 746 834 -253 -140 21 -260 -944 37 668 -818 47 880 -827 -835 -309 106 -336 580 832 405 257 -459 981 -166 -879 964 -662 -388 -211 394 -45 -973 -332 -685 -708 -605 -578 -46 576 562 278 -448 -946 -438 885 351 -207 987 442 184 481 -444 -807 793 105 74 -50 573 -217\r\n16\r\n",
                "42 95 60 43 33 1 53 86 10 21 18 35 20 67 64 89\r\n"
            ],
            [
                "100\r\n-608 705 341 641 -64 309 -990 319 -240 -350 -570 813 537 -296 -388 131 187 98 573 -572 484 -774 176 -906 -579 -991 434 -248 1000 803 -619 504 -566 898 58 337 -505 356 265 -201 -868 -752 236 804 -273 -335 -485 -190 18 -338 -419 831 -170 142 -946 -861 -847 -278 650 587 -519 492 880 -503 -992 133 590 840 104 354 227 262 440 -104 704 149 410 -843 -116 635 317 -139 40 -753 -515 555 417 -928 164 -538 611 20 -610 -193 151 397 593 -150 79 -507\r\n32\r\n",
                "49 92 83 35 99 18 69 16 66 54 76 95 89 23 17 71 43 72 39 6 81 8 36 3 70 38 96 77 87 27 73 21\r\n"
            ],
            [
                "100\r\n-683 303 245 -975 345 -159 529 -752 -349 -318 -275 -62 -449 -601 -687 691 491 -297 -576 425 -468 -235 446 536 143 152 -402 -491 363 -842 676 360 -461 -170 727 53 10 823 665 716 110 450 -154 -265 -926 636 -577 99 -719 -786 373 -286 994 -756 644 -800 220 -771 860 610 -613 -51 -398 -206 826 355 696 897 -957 -28 117 -750 -917 -253 718 -373 -222 -892 -316 603 -427 -936 -820 -566 158 43 -314 -972 618 -501 653 -688 684 -777 -885 -997 427 505 -995 142\r\n64\r\n",
                "96 99 4 88 69 82 45 73 78 95 30 83 56 50 94 58 54 8 72 49 92 15 1 61 14 47 19 84 90 28 21 33 13 81 27 63 76 9 10 79 87 18 52 11 44 74 22 77 64 34 6 43 12 62 70 37 86 36 48 41 71 100 25 26\r\n"
            ],
            [
                "3\r\n-100000000 0 100000000\r\n2\r\n",
                "1 2\r\n"
            ]
        ]
    }
]