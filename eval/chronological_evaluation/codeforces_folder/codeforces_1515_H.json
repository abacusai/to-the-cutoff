[
    {
        "name": "Phoenix and Bits",
        "description": "Phoenix loves playing with bits \u2014 specifically, by using the bitwise\noperations AND, OR, and XOR. He has \n    n\n integers \n    a_1, a_2, \n    \u2026,\n    a_n\n, and will perform \n    q\n of the following queries: replace all numbers\n\n    a_i\n where \n    l \n    \u2264 a_i \n    \u2264 r\n with \n    a_i\n AND \n    x\n; replace\nall numbers \n    a_i\n where \n    l \n    \u2264 a_i \n    \u2264 r\n with \n    a_i\n OR\n\n    x\n; replace all numbers \n    a_i\n where \n    l \n    \u2264 a_i \n    \u2264 r\n with\n\n    a_i\n XOR \n    x\n; output how many distinct integers \n    a_i\n where \n    l\n    \n    \u2264 a_i \n    \u2264 r\n. For each query, Phoenix is given \n    l\n, \n    r\n, and\n\n    x\n. Note that he is considering the values of the numbers, not their\nindices. Input The first line contains two integers \n    n\n and \n    q\n (\n    1\n    \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n; \n    1 \n    \u2264 q \n    \u2264 10^5\n) \u2014 the number of\nintegers and the number of queries, respectively. The second line contains\n\n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i < 2^20\n) \u2014\nthe integers that Phoenix starts with. The next \n    q\n lines contain the\nqueries. For each query, the first integer of each line is \n    t\n (\n    1 \n    \u2264\n    t \n    \u2264 4\n) \u2014 the type of query. If \n    t \n    \u2208\n    \n    1, 2, 3\n, then\nthree integers \n    l_i\n, \n    r_i\n, and \n    x_i\n will follow (\n    0 \n    \u2264\n    l_i, r_i, x_i < 2^20\n; \n    l_i \n    \u2264 r_i\n). Otherwise, if \n    t=4\n, two\nintegers \n    l_i\n and \n    r_i\n will follow (\n    0 \n    \u2264 l_i \n    \u2264 r_i <\n    2^20\n). It is guaranteed that there is at least one query where \n    t=4\n.\nOutput Print the answer for each query where \n    t=4\n. Examples Input 5 6 5 4\n3 2 1 1 2 3 2 4 2 5 3 2 5 3 4 1 6 2 1 1 8 4 8 10 Output 3 2 1 Input 6 7 6 0 2\n3 2 7 1 0 4 3 2 6 8 4 4 0 7 3 2 5 3 1 0 1 2 4 0 3 4 2 7 Output 5 1 2 Note In\nthe first example: For the first query, \n    2\n is replaced by \n    2\n AND\n\n    2 = 2\n and \n    3\n is replaced with \n    3\n AND \n    2 = 2\n. The set of\nnumbers is \n    1, 2, 4, 5\n. For the second query, there are \n    3\n\ndistinct numbers between \n    2\n and \n    5\n: \n    2\n, \n    4\n, and \n    5\n.\nFor the third query, \n    2\n is replaced by \n    2\n XOR \n    3 = 1\n, \n    4\n\nis replaced by \n    4\n XOR \n    3 = 7\n, and \n    5\n is replaced by \n    5\n XOR\n\n    3 = 6\n. The set of numbers is \n    1, 6, 7\n. For the fourth\nquery, there are \n    2\n distinct numbers between \n    1\n and \n    6\n: \n    1\n\nand \n    6\n. For the fifth query, \n    1\n is replaced by \n    1\n OR \n    8 =\n    9\n. The set of numbers is \n    6, 7, 9\n. For the sixth query,\nthere is one distinct number between \n    8\n and \n    10\n: \n    9\n.\n\n",
        "cf_contest_id": 1515,
        "cf_index": "H",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "data structures",
            "sortings"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5 6\r\n5 4 3 2 1\r\n1 2 3 2\r\n4 2 5\r\n3 2 5 3\r\n4 1 6\r\n2 1 1 8\r\n4 8 10\r\n",
                "3\r\n2\r\n1\r\n"
            ],
            [
                "6 7\r\n6 0 2 3 2 7\r\n1 0 4 3\r\n2 6 8 4\r\n4 0 7\r\n3 2 5 3\r\n1 0 1 2\r\n4 0 3\r\n4 2 7\r\n",
                "5\r\n1\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 5\r\n2 0 5 2 0\r\n3 4 4 4\r\n4 1 5\r\n1 0 0 5\r\n3 3 4 1\r\n4 1 3\r\n",
                "2\r\n1\r\n"
            ],
            [
                "5 5\r\n3 1 3 9 0\r\n2 0 5 8\r\n1 7 10 3\r\n4 4 10\r\n4 3 6\r\n3 1 6 6\r\n",
                "0\r\n0\r\n"
            ],
            [
                "5 5\r\n51989 112699 641265 904734 417105\r\n1 333773 405840 487648\r\n1 252510 429994 534513\r\n4 308328 366349\r\n1 563770 899755 613764\r\n3 423718 744537 750800\r\n",
                "0\r\n"
            ]
        ]
    }
]