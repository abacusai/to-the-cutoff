[
    {
        "name": "Black Cells",
        "description": "You are playing with a really long strip consisting of \n    10^18\n white\ncells, numbered from left to right as \n    0\n, \n    1\n, \n    2\n and so on. You\nare controlling a special pointer that is initially in cell \n    0\n. Also, you\nhave a \"Shift\" button you can press and hold. In one move, you can do one of\nthree actions: move the pointer to the right (from cell \n    x\n to cell \n    x +\n    1\n); press and hold the \"Shift\" button; release the \"Shift\" button: the\nmoment you release \"Shift\", all cells that were visited while \"Shift\" was\npressed are colored in black. (Of course, you can't press Shift if you already\nhold it. Similarly, you can't release Shift if you haven't pressed it.)Your\ngoal is to color at least \n    k\n cells, but there is a restriction: you are\ngiven \n    n\n segments \n    [l_i, r_i]\n \u2014 you can color cells only inside\nthese segments, i. e. you can color the cell \n    x\n if and only if \n    l_i\n    \n    \u2264 x \n    \u2264 r_i\n for some \n    i\n. What is the minimum number of moves you\nneed to make in order to color at least \n    k\n cells black? Input The first\nline contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the\nnumber of test cases. The first line of each test case contains two integers\n\n    n\n and \n    k\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n; \n    1 \n    \u2264 k \n    \u2264\n    10^9\n) \u2014 the number of segments and the desired number of black cells,\nrespectively. The second line contains \n    n\n integers \n    l_1, l_2, \n    \u2026,\n    l_n\n (\n    1 \n    \u2264 l_1 < l_2 < \n    \u2026 < l_n \n    \u2264 10^9\n), where \n    l_i\n\nis the left border of the \n    i\n-th segment. The third line contains \n    n\n\nintegers \n    r_1, r_2, \n    \u2026, r_n\n (\n    1 \n    \u2264 r_i \n    \u2264 10^9\n; \n    l_i\n    \n    \u2264 r_i < l_i + 1 - 1\n), where \n    r_i\n is the right border of the\n\n    i\n-th segment. Additional constraints on the input: every cell belongs to\nat most one segment; the sum of \n    n\n doesn't exceed \n    2 \n    \u00b7 10^5\n.\nOutput For each test case, print the minimum number of moves to color at least\n\n    k\n cells black, or \n    -1\n if it's impossible. Example Input 4 2 3 1 3 1\n4 4 20 10 13 16 19 11 14 17 20 2 3 1 3 1 10 2 4 99 999999999 100 1000000000\nOutput 8 -1 7 1000000004 Note In the first test case, one of the optimal\nsequences of operations is the following: Move right: pointer is moving into\ncell \n    1\n; Press Shift; Release Shift: cell \n    1\n is colored black; Move\nright: pointer is moving into cell \n    2\n; Move right: pointer is moving into\ncell \n    3\n; Press Shift; Move right: pointer is moving into cell \n    4\n;\nRelease Shift: cells \n    3\n and \n    4\n are colored in black. We've colored\n\n    3\n cells in \n    8\n moves.In the second test case, we can color at most\n\n    8\n cells, while we need \n    20\n cell to color. In the third test case,\none of the optimal sequences of operations is the following: Move right:\npointer is moving into cell \n    1\n; Move right: pointer is moving into cell\n\n    2\n; Move right: pointer is moving into cell \n    3\n; Press Shift; Move\nright: pointer is moving into cell \n    4\n; Move right: pointer is moving into\ncell \n    5\n; Release Shift: cells \n    3\n, \n    4\n and \n    5\n are colored in\nblack. We've colored \n    3\n cells in \n    7\n moves.\n\n",
        "cf_contest_id": 1821,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2 3\r\n1 3\r\n1 4\r\n4 20\r\n10 13 16 19\r\n11 14 17 20\r\n2 3\r\n1 3\r\n1 10\r\n2 4\r\n99 999999999\r\n100 1000000000\r\n",
                "8\r\n-1\r\n7\r\n1000000004\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 1000000000\r\n999999999\r\n1000000000\r\n",
                "-1\r\n"
            ],
            [
                "2\r\n2 52\r\n1 6\r\n1 7\r\n2 52\r\n1 6\r\n1 7\r\n",
                "-1\r\n-1\r\n"
            ]
        ]
    }
]