[
    {
        "name": "Anti-Increasing Addicts",
        "description": "You are given an \n    n \n    \u00d7 n\n grid. We write \n    (i, j)\n to denote the\ncell in the \n    i\n-th row and \n    j\n-th column. For each cell, you are told\nwhether yon can delete it or not. Given an integer \n    k\n, you are asked to\ndelete exactly \n    (n-k+1)^2\n cells from the grid such that the following\ncondition holds. You cannot find \n    k\n not deleted cells \n    (x_1, y_1),\n    (x_2, y_2), \n    \u2026, (x_k, y_k)\n that are strictly increasing, i.e., \n    x_i\n    < x_i+1\n and \n    y_i < y_i+1\n for all \n    1 \n    \u2264 i < k\n. Your task\nis to find a solution, or report that it is impossible. Input Each test\ncontains multiple test cases. The first line contains an integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 10^5\n) \u2014 the number of test cases. The following lines\ncontain the description of each test case. The first line of each test case\ncontains two integers \n    n\n and \n    k\n (\n    2 \n    \u2264 k \n    \u2264 n \n    \u2264\n    1000\n). Then \n    n\n lines follow. The \n    i\n-th line contains a binary\nstring \n    s_i\n of length \n    n\n. The \n    j\n-th character of \n    s_i\n is 1\nif you can delete cell \n    (i, j)\n, and 0 otherwise. It's guaranteed that the\nsum of \n    n^2\n over all test cases does not exceed \n    10^6\n. Output For\neach test case, if there is no way to delete exactly \n    (n-k+1)^2\n cells to\nmeet the condition, output \"NO\" (without quotes). Otherwise, output \"YES\"\n(without quotes). Then, output \n    n\n lines. The \n    i\n-th line should\ncontain a binary string \n    t_i\n of length \n    n\n. The \n    j\n-th character\nof \n    t_i\n is 0 if cell \n    (i, j)\n is deleted, and 1 otherwise. If there\nare multiple solutions, you can output any of them. You can output \"YES\" and\n\"NO\" in any case (for example, strings \"yEs\", \"yes\" and \"Yes\" will be\nrecognized as a positive response). Example Input 4 2 2 10 01 4 3 1110 0101\n1010 0111 5 5 01111 10111 11011 11101 11110 5 2 10000 01111 01111 01111 01111\nOutput YES 01 11 YES 0011 1111 1111 1100 NO YES 01111 11000 10000 10000 10000\nNote For the first test case, you only have to delete cell \n    (1, 1)\n. For\nthe second test case, you could choose to delete cells \n    (1,1)\n,\n\n    (1,2)\n, \n    (4,3)\n and \n    (4,4)\n. For the third test case, it is no\nsolution because the cells in the diagonal will always form a strictly\nincreasing sequence of length \n    5\n.\n\n",
        "cf_contest_id": 1738,
        "cf_index": "G",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dp",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4\r\n2 2\r\n10\r\n01\r\n4 3\r\n1110\r\n0101\r\n1010\r\n0111\r\n5 5\r\n01111\r\n10111\r\n11011\r\n11101\r\n11110\r\n5 2\r\n10000\r\n01111\r\n01111\r\n01111\r\n01111\r\n",
                "YES\r\n01\r\n11\r\nYES\r\n0011\r\n1111\r\n1111\r\n1100\r\nNO\r\nYES\r\n01111\r\n11000\r\n10000\r\n10000\r\n10000\r\n"
            ]
        ],
        "private_cases": []
    }
]