[
    {
        "name": "Berpizza",
        "description": "Monocarp and Polycarp are working as waiters in Berpizza, a pizzeria located\nnear the center of Bertown. Since they are waiters, their job is to serve the\ncustomers, but they choose whom they serve first differently. At the start of\nthe working day, there are no customers at the Berpizza. They come there one\nby one. When a customer comes into the pizzeria, she sits and waits for\nMonocarp or Polycarp to serve her. Monocarp has been working in Berpizza for\njust two weeks, so whenever he serves a customer, he simply chooses the one\nwho came to Berpizza first, and serves that customer. On the other hand,\nPolycarp is an experienced waiter at Berpizza, and he knows which customers\nare going to spend a lot of money at the pizzeria (and which aren't) as soon\nas he sees them. For each customer, Polycarp estimates the amount of money\nthis customer can spend, and when he serves a customer, he chooses the one\nthat is expected to leave the most money at Berpizza (in case there are\nseveral such customers, he chooses the one who came first among them).\nObviously, no customer can be served twice, so Monocarp and Polycarp choose\nwhich customer to serve only among those who haven't been served yet. When the\nnumber of customers gets really high, it becomes difficult for both Monocarp\nand Polycarp to choose the customer they are going to serve. Your task is to\nwrite a program that makes these choices for them. Formally, your program\nshould be able to process three types of queries: \n    1\n \n    m\n \u2014 a customer\ncomes to Berpizza, and Polycarp estimates the amount of money that they will\nspend as \n    m\n; \n    2\n \u2014 Monocarp serves a customer which came to the\npizzeria first; \n    3\n \u2014 Polycarp serves a customer which is expected to\nspend the largest amount of money at the pizzeria (if there are several such\ncustomers, the one that came to the pizzeria first is chosen). For each query\nof types \n    2\n and \n    3\n, report the number of the customer who was served\n(the customers are numbered in the order they come to the pizzeria, starting\nfrom \n    1\n). Input The first line contains one integer \n    q\n (\n    2 \n    \u2264 q\n    \n    \u2264 5 \n    \u00b7 10^5\n) \u2014 the number of queries. Then \n    q\n lines follow,\neach describing a query in one of the following formats: \n    1\n \n    m\n (\n    1\n    \n    \u2264 m \n    \u2264 5 \n    \u00b7 10^5\n) \u2014 a customer comes to Berpizza, and Polycarp\nestimates the amount of money that they will spend as \n    m\n; \n    2\n \u2014\nMonocarp serves a customer which came to the pizzeria first; \n    3\n \u2014\nPolycarp serves a customer which is expected to spend the largest amount of\nmoney at the pizzeria (if there are multiple such customers, the one that came\nto the pizzeria first is chosen). Queries of type \n    2\n and \n    3\n are\nasked only when there exists at least one customer that hasn't been served\nyet. There is at least one query of type \n    2\n or \n    3\n in the input.\nOutput For each query of type \n    2\n or \n    3\n, print one integer \u2014 the\nnumber of the customer that has been served in that event. The customers are\nnumbered in the order in which they come to the pizzeria, starting from\n\n    1\n. Examples Input 8 1 8 1 10 1 6 3 2 1 9 2 3 Output 2 1 3 4 Input 6 1 8\n1 10 1 8 3 3 3 Output 2 1 3 Input 8 1 103913 3 1 103913 1 103913 3 1 103913 1\n103913 2 Output 1 2 3\n\n",
        "cf_contest_id": 1468,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "8\r\n1 8\r\n1 10\r\n1 6\r\n3\r\n2\r\n1 9\r\n2\r\n3\r\n",
                "2\r\n1\r\n3\r\n4\r\n"
            ],
            [
                "6\r\n1 8\r\n1 10\r\n1 8\r\n3\r\n3\r\n3\r\n",
                "2\r\n1\r\n3\r\n"
            ],
            [
                "8\r\n1 103913\r\n3\r\n1 103913\r\n1 103913\r\n3\r\n1 103913\r\n1 103913\r\n2\r\n",
                "1\r\n2\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 10\r\n2\r\n",
                "1\r\n"
            ],
            [
                "2\r\n1 500000\r\n3\r\n",
                "1\r\n"
            ]
        ]
    }
]