[
    {
        "name": "Doremy's Experimental Tree",
        "description": "Doremy has an edge-weighted tree with \n    n\n vertices whose weights are\nintegers between \n    1\n and \n    10^9\n. She does \n    n(n+1)/2\n\nexperiments on it. In each experiment, Doremy chooses vertices \n    i\n and\n\n    j\n such that \n    j \n    \u2264 i\n and connects them directly with an edge\nwith weight \n    1\n. Then, there is exactly one cycle (or self-loop when\n\n    i=j\n) in the graph. Doremy defines \n    f(i,j)\n as the sum of lengths of\nshortest paths from every vertex to the cycle. Formally, let\n\n    dis_i,j(x,y)\n be the length of the shortest path between\nvertex \n    x\n and \n    y\n when the edge \n    (i,j)\n of weight \n    1\n is\nadded, and \n    S_i,j\n be the set of vertices that are on the cycle when\nedge \n    (i,j)\n is added. Then, \n    \n\n    f(i,j)=\n    \u2211_x=1^n\n    (\n    min_y\n    \u2208\n    S_i,j\n    dis_i,j(x,y)\n    ).\n\n    \n Doremy writes down all\nvalues of \n    f(i,j)\n such that \n    1 \n    \u2264 j \n    \u2264 i \n    \u2264 n\n, then goes\nto sleep. However, after waking up, she finds that the tree has gone missing.\nFortunately, the values of \n    f(i,j)\n are still in her notebook, and she\nknows which \n    i\n and \n    j\n they belong to. Given the values of\n\n    f(i,j)\n, can you help her restore the tree? It is guaranteed that at\nleast one suitable tree exists. Input The first line of input contains a\nsingle integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2000\n) \u2014 the number of vertices\nin the tree. The following \n    n\n lines contain a lower-triangular matrix\nwith \n    i\n integers on the \n    i\n-th line; the \n    j\n-th integer on the\n\n    i\n-th line is \n    f(i,j)\n (\n    0 \n    \u2264 f(i,j) \n    \u2264 2\n    \u00b7 10^15\n).\nIt is guaranteed that there exists a tree whose weights are integers between\n\n    1\n and \n    10^9\n such that the values of \n    f(i,j)\n of the tree match\nthose given in the input. Output Print \n    n-1\n lines describing the tree. In\nthe \n    i\n-th line of the output, output three integers \n    u_i\n, \n    v_i\n,\n\n    w_i\n (\n    1 \n    \u2264 u_i,v_i \n    \u2264 n\n, \n    1 \n    \u2264 w_i \n    \u2264 10^9\n),\nrepresenting an edge \n    (u_i,v_i)\n whose weight is \n    w_i\n. If there are\nmultiple answers, you may output any. All edges must form a tree and all\nvalues of \n    f(i,j)\n must match those given in the input. Examples Input 3 7\n3 5 0 2 8 Output 2 3 3 1 2 2 Input 9 8081910646 8081902766 8081903751\n8081902555 8081903540 8081905228 3090681001 3090681986 3090681775 7083659398\n7083657913 7083658898 7083658687 2092437133 15069617722 1748216295 1748217280\n1748217069 5741194692 749972427 10439821163 2377558289 2377559274 2377559063\n6370536686 1379314421 5028071980 8866466178 1746983932 1746984917 1746984706\n5739962329 748740064 10438588800 5026839617 10448447704 2341942133 2341943118\n2341942907 6334920530 1343698265 4992455824 8830850022 4991223461 9115779270\nOutput 1 2 985 2 3 211 2 4 998244353 2 5 998244853 4 6 671232353 6 8 1232363 4\n7 356561356 7 9 35616156 Note In the first test case, the picture below, from\nleft to right, from top to bottom, shows the graph when pairs \n    (1,1)\n,\n\n    (1,2)\n, \n    (1,3)\n, \n    (2,2)\n, \n    (2,3)\n, \n    (3,3)\n are connected\nwith an edge, respectively. The nodes colored yellow are on the cycle.\n\n",
        "cf_contest_id": 1764,
        "cf_index": "F",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "sortings",
            "trees"
        ],
        "time_limit_seconds": 2.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n7\r\n3 5\r\n0 2 8\r\n",
                "1 2 2\r\n2 3 3\r\n"
            ],
            [
                "9\r\n8081910646\r\n8081902766 8081903751\r\n8081902555 8081903540 8081905228\r\n3090681001 3090681986 3090681775 7083659398\r\n7083657913 7083658898 7083658687 2092437133 15069617722\r\n1748216295 1748217280 1748217069 5741194692 749972427 10439821163\r\n2377558289 2377559274 2377559063 6370536686 1379314421 5028071980 8866466178\r\n1746983932 1746984917 1746984706 5739962329 748740064 10438588800 5026839617 10448447704\r\n2341942133 2341943118 2341942907 6334920530 1343698265 4992455824 8830850022 4991223461 9115779270\r\n",
                "1 2 985\r\n2 3 211\r\n2 4 998244353\r\n4 7 356561356\r\n7 9 35616156\r\n4 6 671232353\r\n6 8 1232363\r\n2 5 998244853\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n18\r\n17 26\r\n11 10 14\r\n8 7 11 18\r\n10 9 13 10 22\r\n17 16 10 7 9 26\r\n6 5 9 16 8 5 24\r\n10 9 13 10 12 9 8 22\r\n5 4 8 15 7 4 23 7 32\r\n10 9 13 10 12 9 8 12 7 22\r\n",
                "1 2 1\r\n1 3 1\r\n3 4 1\r\n3 5 1\r\n1 6 1\r\n4 7 1\r\n3 8 1\r\n7 9 1\r\n3 10 1\r\n"
            ],
            [
                "10\r\n84\r\n57 120\r\n78 51 92\r\n49 112 43 184\r\n69 42 83 34 164\r\n80 53 74 45 65 96\r\n74 47 68 39 59 90 144\r\n68 41 82 33 73 64 58 172\r\n80 53 74 45 65 76 70 64 116\r\n47 110 41 102 32 43 37 31 43 200\r\n",
                "1 3 2\r\n1 6 2\r\n1 9 4\r\n6 7 6\r\n1 2 9\r\n2 4 8\r\n3 5 9\r\n3 8 10\r\n2 10 10\r\n"
            ],
            [
                "2\r\n1000000000\r\n0 1000000000\r\n",
                "1 2 1000000000\r\n"
            ],
            [
                "4\r\n26\r\n25 28\r\n21 20 36\r\n6 5 1 66\r\n",
                "1 2 1\r\n1 3 5\r\n1 4 20\r\n"
            ],
            [
                "4\r\n46\r\n27 84\r\n27 8 84\r\n38 19 19 62\r\n",
                "1 4 8\r\n1 2 19\r\n1 3 19\r\n"
            ]
        ]
    }
]