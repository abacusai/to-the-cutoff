[
    {
        "name": "Inconvenient Pairs",
        "description": "There is a city that can be represented as a square grid with corner points in\n\n    (0, 0)\n and \n    (10^6, 10^6)\n. The city has \n    n\n vertical and \n    m\n\nhorizontal streets that goes across the whole city, i. e. the \n    i\n-th\nvertical streets goes from \n    (x_i, 0)\n to \n    (x_i, 10^6)\n and the\n\n    j\n-th horizontal street goes from \n    (0, y_j)\n to \n    (10^6, y_j)\n.\nAll streets are bidirectional. Borders of the city are streets as well. There\nare \n    k\n persons staying on the streets: the \n    p\n-th person at point\n\n    (x_p, y_p)\n (so either \n    x_p\n equal to some \n    x_i\n or \n    y_p\n\nequal to some \n    y_j\n, or both). Let's say that a pair of persons form an\ninconvenient pair if the shortest path from one person to another going only\nby streets is strictly greater than the Manhattan distance between them.\nCalculate the number of inconvenient pairs of persons (pairs \n    (x, y)\n and\n\n    (y, x)\n are the same pair). Let's recall that Manhattan distance between\npoints \n    (x_1, y_1)\n and \n    (x_2, y_2)\n is \n    |x_1 - x_2| + |y_1 -\n    y_2|\n. Input The first line contains a single integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 1000\n) \u2014 the number of test cases. The first line of each test case\ncontains three integers \n    n\n, \n    m\n and \n    k\n (\n    2 \n    \u2264 n, m \n    \u2264 2\n    \n    \u00b7 10^5\n; \n    2 \n    \u2264 k \n    \u2264 3 \n    \u00b7 10^5\n) \u2014 the number of\nvertical and horizontal streets and the number of persons. The second line of\neach test case contains \n    n\n integers \n    x_1, x_2, \n    \u2026, x_n\n (\n    0 =\n    x_1 < x_2 < \n    \u2026 < x_n - 1 < x_n = 10^6\n) \u2014 the \n    x\n-coordinates of\nvertical streets. The third line contains \n    m\n integers \n    y_1, y_2,\n    \n    \u2026, y_m\n (\n    0 = y_1 < y_2 < \n    \u2026 < y_m - 1 < y_m = 10^6\n) \u2014 the\n\n    y\n-coordinates of horizontal streets. Next \n    k\n lines contains\ndescription of people. The \n    p\n-th line contains two integers \n    x_p\n and\n\n    y_p\n (\n    0 \n    \u2264 x_p, y_p \n    \u2264 10^6\n; \n    x_p \n    \u2208\n    \n    x_1, \n    \u2026,\n    x_n\n or \n    y_p \n    \u2208\n    \n    y_1, \n    \u2026, y_m\n) \u2014 the coordinates\nof the \n    p\n-th person. All points are distinct. It guaranteed that sum of\n\n    n\n doesn't exceed \n    2 \n    \u00b7 10^5\n, sum of \n    m\n doesn't exceed\n\n    2 \n    \u00b7 10^5\n and sum of \n    k\n doesn't exceed \n    3 \n    \u00b7 10^5\n.\nOutput For each test case, print the number of inconvenient pairs. Example\nInput 2 2 2 4 0 1000000 0 1000000 1 0 1000000 1 999999 1000000 0 999999 5 4 9\n0 1 2 6 1000000 0 4 8 1000000 4 4 2 5 2 2 6 3 1000000 1 3 8 5 8 8 8 6 8 Output\n2 5 Note The second test case is pictured below: For example, points \n    3\n\nand \n    4\n form an inconvenient pair, since the shortest path between them\n(shown red and equal to \n    7\n) is greater than its Manhattan distance (equal\nto \n    5\n). Points \n    3\n and \n    5\n also form an inconvenient pair: the\nshortest path equal to \n    1000001\n (shown green) is greater than the\nManhattan distance equal to \n    999999\n. But points \n    5\n and \n    9\n don't\nform an inconvenient pair, since the shortest path (shown purple) is equal to\nits Manhattan distance.\n\n",
        "cf_contest_id": 1569,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "implementation",
            "sortings",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n2 2 4\r\n0 1000000\r\n0 1000000\r\n1 0\r\n1000000 1\r\n999999 1000000\r\n0 999999\r\n5 4 9\r\n0 1 2 6 1000000\r\n0 4 8 1000000\r\n4 4\r\n2 5\r\n2 2\r\n6 3\r\n1000000 1\r\n3 8\r\n5 8\r\n8 8\r\n6 8\r\n",
                "2\r\n5\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2 2 2\r\n0 1000000\r\n0 1000000\r\n1556 1000000\r\n0 34\r\n",
                "0\r\n"
            ]
        ]
    }
]