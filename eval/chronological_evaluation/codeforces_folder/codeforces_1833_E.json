[
    {
        "name": "Round Dance",
        "description": "\n    n\n people came to the festival and decided to dance a few round dances.\nThere are at least \n    2\n people in the round dance and each person has\nexactly two neighbors. If there are \n    2\n people in the round dance then\nthey have the same neighbor on each side. You decided to find out exactly how\nmany dances there were. But each participant of the holiday remembered exactly\none neighbor. Your task is to determine what the minimum and maximum number of\nround dances could be. For example, if there were \n    6\n people at the\nholiday, and the numbers of the neighbors they remembered are equal \n    [2, 1,\n    4, 3, 6, 5]\n, then the minimum number of round dances is\n    1\n: \n    1 - 2 -\n    3 - 4 - 5 - 6 - 1\n and the maximum is \n    3\n: \n    1 - 2 - 1\n \n    3 - 4 -\n    3\n \n    5 - 6 - 5\n Input The first line contains a positive number \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. The following is a\ndescription of the test cases. The first line of the description of each test\ncase contains a positive number \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n)\n\u2014 the number of people at the holiday. The second line of the description of\neach test case contains \n    n\n integers \n    a_i\n (\n    1 \n    \u2264 a_i \n    \u2264 n,\n    a_i \n    \u2260 i\n) \u2014 the number of the neighbor that the \n    i\nth person\nremembered. It is guaranteed that the test cases are correct and corresponds\nto at least one division of people into round dances. It is guaranteed that\nthe sum of \n    n\n for all test cases does not exceed \n    2 \n    \u00b7 10^5\n.\nOutput For each test case, output two integers \u2014 the minimum and maximum\nnumber of round dances that could be. Example Input 10 6 2 1 4 3 6 5 6 2 3 1 5\n6 4 9 2 3 2 5 6 5 8 9 8 2 2 1 4 4 3 2 1 5 2 3 4 5 1 6 5 3 4 1 1 2 5 3 5 4 1 2\n6 6 3 2 5 4 3 6 5 1 4 3 4 2 Output 1 3 2 2 1 3 1 1 1 2 1 1 1 1 2 2 1 2 1 1\n\n",
        "cf_contest_id": 1833,
        "cf_index": "E",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dsu",
            "graphs",
            "shortest paths"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10\r\n6\r\n2 1 4 3 6 5\r\n6\r\n2 3 1 5 6 4\r\n9\r\n2 3 2 5 6 5 8 9 8\r\n2\r\n2 1\r\n4\r\n4 3 2 1\r\n5\r\n2 3 4 5 1\r\n6\r\n5 3 4 1 1 2\r\n5\r\n3 5 4 1 2\r\n6\r\n6 3 2 5 4 3\r\n6\r\n5 1 4 3 4 2\r\n",
                "1 3\r\n2 2\r\n1 3\r\n1 1\r\n1 2\r\n1 1\r\n1 1\r\n2 2\r\n1 2\r\n1 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n12\r\n2 4 6 5 4 3 5 6 11 7 9 10\r\n",
                "1 3\r\n"
            ],
            [
                "1\r\n15\r\n15 1 4 5 6 7 6 12 7 13 8 11 10 9 1\r\n",
                "2 4\r\n"
            ],
            [
                "1\r\n15\r\n14 1 15 6 7 4 5 6 10 11 10 3 14 1 3\r\n",
                "1 5\r\n"
            ],
            [
                "1\r\n15\r\n2 3 2 3 8 4 9 14 7 11 10 13 12 5 1\r\n",
                "2 5\r\n"
            ],
            [
                "1\r\n100\r\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\r\n",
                "1 50\r\n"
            ],
            [
                "1\r\n100\r\n2 1 4 3 6 5 8 7 10 9 12 11 14 13 16 15 18 17 20 19 22 21 24 23 26 25 28 27 30 29 32 31 34 33 36 35 38 37 40 39 42 41 44 43 46 45 48 47 50 49 52 51 54 53 56 55 58 57 60 59 62 61 64 63 66 65 68 67 70 69 72 71 74 73 76 75 78 77 80 79 82 81 84 83 86 85 88 87 90 89 92 91 94 93 96 95 98 97 4 5\r\n",
                "1 49\r\n"
            ]
        ]
    }
]