[
    {
        "name": "Propagating tree",
        "description": "Iahub likes trees very much. Recently he discovered an interesting tree named\npropagating tree. The tree consists of n nodes numbered from 1 to n, each node\ni having an initial value ai. The root of the tree is node 1. This tree has a\nspecial property: when a value val is added to a value of node i, the value\n-val is added to values of all the children of node i. Note that when you add\nvalue -val to a child of node i, you also add -(-val) to all children of the\nchild of node i and so on. Look an example explanation to understand better\nhow it works. This tree supports two types of queries: \"1 x val\" \u2014 val is\nadded to the value of node x; \"2 x\" \u2014 print the current value of node x. In\norder to help Iahub understand the tree better, you must answer m queries of\nthe preceding type. Input The first line contains two integers n and m (1 \u2264 n,\nm \u2264 200000). The second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264\n1000). Each of the next n\u20131 lines contains two integers vi and ui (1 \u2264 vi, ui\n\u2264 n), meaning that there is an edge between nodes vi and ui. Each of the next\nm lines contains a query in the format described above. It is guaranteed that\nthe following constraints hold for all queries: 1 \u2264 x \u2264 n, 1 \u2264 val \u2264 1000.\nOutput For each query of type two (print the value of node x) you must print\nthe answer to the query on a separate line. The queries must be answered in\nthe order given in the input. Examples Input 5 5 1 2 1 1 2 1 2 1 3 2 4 2 5 1 2\n3 1 1 2 2 1 2 2 2 4 Output 3 3 0 Note The values of the nodes are [1, 2, 1, 1,\n2] at the beginning. Then value 3 is added to node 2. It propagates and value\n-3 is added to it's sons, node 4 and node 5. Then it cannot propagate any\nmore. So the values of the nodes are [1, 5, 1, - 2, - 1]. Then value 2 is\nadded to node 1. It propagates and value -2 is added to it's sons, node 2 and\nnode 3. From node 2 it propagates again, adding value 2 to it's sons, node 4\nand node 5. Node 3 has no sons, so it cannot propagate from there. The values\nof the nodes are [3, 3, - 1, 0, 1]. You can see all the definitions about the\ntree at the following link: http://en.wikipedia.org/wiki/Tree_(graph_theory)\n\n",
        "cf_contest_id": 383,
        "cf_index": "C",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 5\r\n1 2 1 1 2\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n1 2 3\r\n1 1 2\r\n2 1\r\n2 2\r\n2 4\r\n",
                "3\r\n3\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 10\r\n137 197 856 768 825 894 86 174 218 326\r\n7 8\r\n4 7\r\n8 9\r\n7 10\r\n1 2\r\n2 4\r\n3 6\r\n3 5\r\n2 3\r\n1 9 624\r\n2 1\r\n2 4\r\n1 6 505\r\n1 8 467\r\n1 3 643\r\n2 1\r\n1 8 631\r\n2 4\r\n1 7 244\r\n",
                "137\r\n768\r\n137\r\n768\r\n"
            ],
            [
                "10 10\r\n418 45 865 869 745 901 177 773 854 462\r\n4 8\r\n1 4\r\n3 6\r\n1 5\r\n1 10\r\n5 9\r\n1 2\r\n4 7\r\n1 3\r\n2 2\r\n1 6 246\r\n1 4 296\r\n1 2 378\r\n1 8 648\r\n2 6\r\n1 5 288\r\n1 6 981\r\n1 2 868\r\n2 7\r\n",
                "45\r\n1147\r\n-119\r\n"
            ]
        ]
    }
]