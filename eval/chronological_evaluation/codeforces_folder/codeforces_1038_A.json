[
    {
        "name": "Equality",
        "description": "You are given a string \n    s\n of length \n    n\n, which consists only of the\nfirst \n    k\n letters of the Latin alphabet. All letters in string \n    s\n are\nuppercase. A subsequence of string \n    s\n is a string that can be derived\nfrom \n    s\n by deleting some of its symbols without changing the order of the\nremaining symbols. For example, \"ADE\" and \"BD\" are subsequences of \"ABCDE\",\nbut \"DEA\" is not. A subsequence of \n    s\n called good if the number of\noccurences of each of the first \n    k\n letters of the alphabet is the same.\nFind the length of the longest good subsequence of \n    s\n. Input The first\nline of the input contains integers \n    n\n (\n    1\n    \u2264 n \n    \u2264 10^5\n) and\n\n    k\n (\n    1 \n    \u2264 k \n    \u2264 26\n). The second line of the input contains the\nstring \n    s\n of length \n    n\n. String \n    s\n only contains uppercase\nletters from 'A' to the \n    k\n-th letter of Latin alphabet. Output Print the\nonly integer \u2014 the length of the longest good subsequence of string \n    s\n.\nExamples Input 9 3 ACAABCCAB Output 6 Input 9 4 ABCABCABC Output 0 Note In the\nfirst example, \"ACBCAB\" (\"ACAABCCAB\") is one of the subsequences that has the\nsame frequency of 'A', 'B' and 'C'. Subsequence \"CAB\" also has the same\nfrequency of these letters, but doesn't have the maximum possible length. In\nthe second example, none of the subsequences can have 'D', hence the answer is\n\n    0\n.\n\n",
        "cf_contest_id": 1038,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "9 3\r\nACAABCCAB\r\n",
                "6\r\n"
            ],
            [
                "9 4\r\nABCABCABC\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 26\r\nA\r\n",
                "0\r\n"
            ],
            [
                "22 1\r\nAAAAAAAAAAAAAAAAAAAAAA\r\n",
                "22\r\n"
            ],
            [
                "15 26\r\nWEYYDIADTLCOUEG\r\n",
                "0\r\n"
            ],
            [
                "2 2\r\nBA\r\n",
                "2\r\n"
            ],
            [
                "6 3\r\nAABBCC\r\n",
                "6\r\n"
            ],
            [
                "1 5\r\nA\r\n",
                "0\r\n"
            ],
            [
                "10 2\r\nABBBBBBBBB\r\n",
                "2\r\n"
            ],
            [
                "1 1\r\nA\r\n",
                "1\r\n"
            ],
            [
                "6 3\r\nABBCCC\r\n",
                "3\r\n"
            ],
            [
                "7 2\r\nAABBBBB\r\n",
                "4\r\n"
            ],
            [
                "76 26\r\nABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYABCDEFGHIJKLMNOPQRSTUVWXY\r\n",
                "26\r\n"
            ],
            [
                "5 3\r\nAABBC\r\n",
                "3\r\n"
            ],
            [
                "3 3\r\nAAC\r\n",
                "0\r\n"
            ],
            [
                "1 4\r\nD\r\n",
                "0\r\n"
            ],
            [
                "3 2\r\nBBB\r\n",
                "0\r\n"
            ],
            [
                "3 3\r\nCBA\r\n",
                "3\r\n"
            ],
            [
                "3 5\r\nABC\r\n",
                "0\r\n"
            ]
        ]
    }
]