[
    {
        "name": "Tubular Bells",
        "description": "Do you know what tubular bells are? They are a musical instrument made up of\ncylindrical metal tubes. In an orchestra, tubular bells are used to mimic the\nringing of bells. Mike has tubular bells, too! They consist of \n    n\n tubes,\nand each of the tubes has a length that can be expressed by a integer from\n\n    l\n to \n    r\n inclusive. It is clear that the lengths of all the tubes\nare different (it makes no sense to make the same tubes). It is also known\nthat \n    r-l+1 = n\n. Formally, we can say that Mike's tubular bells are\ndescribed by a permutation \n    a\n of length \n    n\n that contains all numbers\nfrom \n    l\n to \n    r\n inclusive, with \n    a_i\n denoting the length of the\n\n    i\n-th tube. You are offered an interesting task: to guess what Mike's\ninstrument looks like. Simply, you must guess the permutation. Mike won't tell\nyou \n    l\n or \n    r\n. He will only tell you \n    n\n, and will allow you to\nask no more than \n    n + 5000\n queries. In each query, you name two positive\nintegers \n    x\n, \n    y\n such that \n    1 \n    \u2264 x, y \n    \u2264 n, x \n    \u2260 y\n. In\nresponse to this query, the program written by Mike will give you\n\n    lcm(a_x, a_y)\n, where \n    lcm(c,d)\n denotes the\nleast common multiple of \n    c\n and \n    d\n. Solve Mike's problem! Input Each\ntest contains multiple test cases. The first line contains one positive\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 20\n), denoting the number of test cases.\nDescription of the test cases follows. The single line of each test case\ncontains one positive integer \n    n\n (\n    3 \n    \u2264 n \n    \u2264 10^5\n) \u2014 number of\ntubes in Mike's tubular bells. Also \n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 2 \n    \u00b7\n    10^5\n, i.e. the lengths of the tubes do not exceed \n    2 \n    \u00b7 10^5\n. It\nis guaranteed that the sum of maximal number of queries (i.e. \n    n + 5000\n)\nover all test cases does not exceed \n    10^5 + 5000\n. It means that sum of\n\n    n\n does not exceed \n    10^5 + 5000 - t \n    \u00b7 5000\n. Interaction For\neach set of input data, read one integer \n    n\n. You are allowed to make no\nmore than \n    n + 5000\n queries. If you want to make a query, output it in\nthe format \"? \n    x\n \n    y\n\", where \n    x\n and \n    y\n \u2014 the numbers of\ntubes for which you learn the lcm (least common multiple) of their lengths.\nNote that \n    1 \n    \u2264 x, y \n    \u2264 n, x \n    \u2260 y\n must be satisfied. The\ninteractor will return a single integer \u2014the answer to your query. If you are\nready to print the answer, print it in the format \"! \n    a_1\n \n    a_2\n ...\n\n    a_n\n\". The output of the answer is not considered a query and is not\nincluded in the number of queries. After each query and answer output, don't\nforget to output the line translation and reset the output buffer. Otherwise\nyou will get the verdict \"Idleness limit exceeded\". To reset the buffer use:\nfflush(stdout) or cout.flush() in C++; System.out.flush() in Java;\nflush(output) in Pascal; stdout.flush() in Python; see documentation for other\nlanguages. Note that the interactor is not adaptive. That is, the original\npermutation is fixed in the beginning and don't depend on your queries. Hacks:\nUse the following format for hacks: The first line contains a single positive\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 20\n) \u2014 the number of input datasets. A\ndescription of the input data sets is given below. The first line of each test\ncase contains one positive integer \n    n\n (\n    3 \n    \u2264 n \n    \u2264 10^5\n) \u2014the\nnumber of tubes. It is known that \n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 2 \n    \u00b7\n    10^5\n, i.e. the lengths of the tubes do not exceed \n    2 \n    \u00b7 10^5\n. The\nsecond line of each test case contains an array \n    a\n of \n    n\n positive\nintegers \u2014 the lengths of the tubes in each input dataset. Remember that \n    l\n    \n    \u2264 a_i \n    \u2264 r\n and \n    r-l+1 = n\n, and that all \n    a_i\n are\ndifferent. Example Input 3 5 8 10 7 6 9 5 24 25 28 27 26 7 1 2 3 4 5 6 7\nOutput ? 1 2 40 ? 2 5 90 ? 3 1 56 ? 4 5 18 ! 8 10 7 6 9 ? 1 5 312 ? 2 4 675 !\n24 25 28 27 26 ? 1 4 4 ? 2 5 10 ? 3 7 21 ? 6 2 6 ? 2 5 10 ? 1 2 2 ? 1 2 2 ? 1\n2 2 ? 1 2 2 ? 1 2 2 ! 1 2 3 4 5 6 7\n\n",
        "cf_contest_id": 1562,
        "cf_index": "F",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "interactive",
            "math",
            "number theory",
            "probabilities"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n5\r\n8 10 7 6 9\r\n5\r\n24 25 28 27 26\r\n7\r\n1 2 3 4 5 6 7\r\n",
                ""
            ]
        ],
        "private_cases": [
            [
                "20\r\n4\r\n1 4 3 2\r\n3\r\n3 1 2\r\n3\r\n2 3 1\r\n3\r\n3 2 1\r\n3\r\n2 3 1\r\n3\r\n3 2 1\r\n5\r\n5 4 2 1 3\r\n4\r\n1 3 2 4\r\n5\r\n5 2 4 3 1\r\n4\r\n4 2 1 3\r\n3\r\n2 1 3\r\n5\r\n3 2 1 4 5\r\n3\r\n1 2 3\r\n3\r\n2 3 1\r\n5\r\n3 5 4 2 1\r\n4\r\n3 1 4 2\r\n4\r\n3 4 1 2\r\n5\r\n2 5 1 3 4\r\n5\r\n2 1 4 5 3\r\n3\r\n3 2 1\r\n",
                ""
            ],
            [
                "20\r\n7\r\n5 1 7 2 6 3 4\r\n6\r\n5 6 1 4 2 3\r\n5\r\n5 2 1 4 3\r\n6\r\n6 4 3 2 1 5\r\n5\r\n2 3 5 1 4\r\n3\r\n2 3 1\r\n4\r\n2 3 4 1\r\n7\r\n3 7 5 4 6 1 2\r\n6\r\n1 2 6 5 3 4\r\n6\r\n3 1 2 4 6 5\r\n4\r\n2 3 1 4\r\n6\r\n6 3 2 5 1 4\r\n3\r\n1 2 3\r\n7\r\n7 3 5 4 2 1 6\r\n7\r\n1 4 6 5 3 2 7\r\n6\r\n3 5 1 6 4 2\r\n7\r\n4 2 6 3 1 7 5\r\n6\r\n5 2 3 1 6 4\r\n4\r\n2 1 3 4\r\n7\r\n2 3 5 1 4 7 6\r\n",
                ""
            ],
            [
                "20\r\n4\r\n3 2 4 1\r\n5\r\n2 4 1 3 5\r\n7\r\n4 1 2 5 6 7 3\r\n9\r\n3 1 4 2 8 7 6 9 5\r\n7\r\n4 5 3 2 6 1 7\r\n5\r\n5 4 2 3 1\r\n5\r\n1 2 3 5 4\r\n8\r\n6 3 5 7 8 1 4 2\r\n6\r\n2 3 5 6 4 1\r\n8\r\n2 1 3 7 5 4 6 8\r\n4\r\n3 2 1 4\r\n5\r\n1 3 4 2 5\r\n5\r\n2 3 1 4 5\r\n10\r\n7 5 1 6 10 2 8 3 9 4\r\n3\r\n2 1 3\r\n10\r\n3 5 8 10 9 6 2 7 1 4\r\n4\r\n1 4 2 3\r\n10\r\n6 9 10 2 4 8 3 7 5 1\r\n5\r\n2 3 5 4 1\r\n4\r\n3 2 4 1\r\n",
                ""
            ]
        ]
    }
]