[
    {
        "name": "Multithreading (Hard Version)",
        "description": "The only difference between the two versions of the problem is that there are\nno updates in the easy version. There are \n    n\n spools of thread placed on\nthe rim of a circular table. The spools come in two types of thread: the first\nthread is black and the second thread is white. For any two spools of the same\ncolor, you can attach them with a thread of that color in a straight line\nsegment. Define a matching as a way to attach spools together so that each\nspool is attached to exactly one other spool. Coloring is an assignment of\ncolors (white and black) to the spools. A coloring is called valid if it has\nat least one matching. That is if the number of black spools and the number of\nwhite spools are both even. Given a matching, we can find the number of times\nsome white thread intersects some black thread. We compute the number of pairs\nof differently colored threads that intersect instead of the number of\nintersection points, so one intersection point may be counted multiple times\nif different pairs of threads intersect at the same point. If \n    c\n is a\nvalid coloring, let \n    f(c)\n denote the minimum number of such intersections\nout of all possible matchings. The circle above is described by the coloring\nbwbbbwww. After matching the spools as shown, there is one intersection\nbetween differently colored threads. It can be proven that it is the minimum\npossible, so \n    f(\n    bwbbbwww) = 1\n. You are given a string \n    s\n\nrepresenting an unfinished coloring, with black, white, and uncolored spools.\nA coloring \n    c\n is called \n    s\n-reachable if you can achieve it by\nassigning colors to the uncolored spools of \n    s\n without changing the\nothers. A coloring \n    c\n is chosen uniformly at random among all valid,\n\n    s\n-reachable colorings. Compute the expected value of \n    f(c)\n. You\nshould find it by modulo \n    998244353\n. There will be \n    m\n updates to\nchange one character of \n    s\n. After each update, you should again compute\nthe expected value of \n    f(c)\n. We can show that each answer can be written\nin the form \n    p/q\n where \n    p\n and \n    q\n are relatively prime\nintegers and \n    q\n    \u2261 0\n    998244353\n. The answer by modulo\n\n    998244353\n is equal to \n    (p\n    \u00b7 q^-1)\n modulo \n    998244353\n.\nInput The first line contains two integers \n    n\n, \n    m\n (\n    2\n    \u2264 n\n    \u2264\n    2\n    \u00b7 10^5\n, \n    n\n is even, \n    0\n    \u2264 m\n    \u2264 2\n    \u00b7 10^5\n) \u2014 the\nnumber of spools and the number of updates, respectively. The second line\ncontains a string \n    s\n of length \n    n\n \u2014 the unfinished coloring of the\nspools. The \n    i\n-th character will be 'w', 'b', or '?', describing if the\n\n    i\n-th spool is white, black, or uncolored, respectively. Each of the next\n\n    m\n lines contains an integer \n    i\n (\n    1 \n    \u2264 i \n    \u2264 n\n) \u2014 the\nposition of the character in \n    s\n to be updated, and a character \n    c\n\n(\n    c \n    \u2208\n    \n    \n    w, \n    b, \n    ?\n) \u2014 the new color\nof the spool \n    i\n after the update. It is guaranteed there exists at least\none uncolored spool initially and after each update. Output Print \n    m+1\n\nlines: the expected value of \n    f(c)\n initially and after each update. All\nvalues should be found by modulo \n    998244353\n. Examples Input 8 0 bwbb?www\nOutput 1 Input 10 3 ???ww?wb?? 4 ? 5 ? 2 w Output 436731905 218365953\n374341633 530317313 Input 4 3 bw?b 1 w 2 b 1 w Output 0 0 1 1 Note The first\ntest corresponds closely to the image. Coloring '?' as 'w' does not create a\nvalid coloring because the number of black spools is odd. Then the only\nreachable valid coloring is 'bwbbbwww' and \n    f(\n    bwbbbwww) = 1\n, so\nthe expected value is \n    1\n. In the second test, the string after each\nupdate is: ????w?wb?? ??????wb?? ?w????wb?? In the third test, the string\nafter each update is: ww?b wb?b wb?b\n\n",
        "cf_contest_id": 1450,
        "cf_index": "H2",
        "cf_rating": 3300,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8 0\r\nbwbb?www\r\n",
                "1\r\n"
            ],
            [
                "10 3\r\n???ww?wb??\r\n4 ?\r\n5 ?\r\n2 w\r\n",
                "436731905\r\n218365953\r\n374341633\r\n530317313\r\n"
            ],
            [
                "4 3\r\nbw?b\r\n1 w\r\n2 b\r\n1 w\r\n",
                "0\r\n0\r\n1\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 5\r\n??\r\n2 b\r\n2 w\r\n2 ?\r\n1 b\r\n1 w\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "10 6\r\nbwbwbw????\r\n3 ?\r\n4 b\r\n9 w\r\n2 ?\r\n1 ?\r\n8 w\r\n",
                "499122178\r\n748683266\r\n249561089\r\n499122177\r\n623902721\r\n623902721\r\n623902721\r\n"
            ],
            [
                "10 10\r\nwbb?wbwbwb\r\n5 b\r\n3 ?\r\n8 w\r\n3 ?\r\n2 w\r\n9 b\r\n8 ?\r\n1 b\r\n5 b\r\n6 w\r\n",
                "2\r\n1\r\n499122178\r\n1\r\n1\r\n499122177\r\n0\r\n748683265\r\n748683265\r\n748683265\r\n249561089\r\n"
            ],
            [
                "2 1\r\n??\r\n1 w\r\n",
                "0\r\n0\r\n"
            ],
            [
                "100 0\r\nwbbbwbbbbwwbbbbbwbbwbbwbwbwwbwwwbwwbbwbbbbwwbbwbwbbbwbbwbbwwbbwwbwbbbbbbwwwwwbbwwbwbbbbbwwwwbbb?bwbb\r\n",
                "2\r\n"
            ],
            [
                "100 0\r\nbbbwwwwwwbwwwbbwbwwwbwbwwbwbwbbwbwbbwbwbwwbb?bwbbbbbwwbwbbwbbwbbbbwwwwbwwbbwbbwbwwwbwbwbbwwwwwbwwwwb\r\n",
                "1\r\n"
            ],
            [
                "100 0\r\nwbbbbbwbwbbbwwbbwbbbbbwbbwbwwbwbwbbwwbbbbwbwwbbbbwbwwwbbwbb?wbbbwwwbbwwbbwwwbbbbwbwbwwwbbbwwwbwwwbwb\r\n",
                "5\r\n"
            ],
            [
                "100 0\r\nwwbwbbbbwwwbwwbbwbbwbbbbwbbbwwwbwwwbbb?wbbbwwbbwbbwwwwbwwbwwwbbbwwwbwwbbbbbwbwbwwwwwbwwbwbbbwbbwbbwb\r\n",
                "1\r\n"
            ],
            [
                "100 0\r\nwbwbwwbbwwbbbbwwbwbbbbwbbwbbbwwbwbwwbwwbwbwwbbbw?bwwbbwwbbwwwbwbwwbwwwwbbbbbbbwwbwwwwwwbbwbbwbbwbbbb\r\n",
                "2\r\n"
            ],
            [
                "100 0\r\n???????bb????w?bw?????????bw?w??w???w?????????w????b???bwb??????w?w?????b????b?w???b?????ww?????b?b?\r\n",
                "396794456\r\n"
            ],
            [
                "100 0\r\nbwbbbbbbwbbbbwbwwwbwwbwbwwwbwwbbbbwbwwbwbwwwwwwwwwwbwbwwwwbbwbwbwbbbbwbwwwbwbwwwbwbwwwb?bbbbbbbbbwbw\r\n",
                "2\r\n"
            ],
            [
                "100 0\r\nbww??wbbbwwbwwbbbb?www?bwb?wwwbbwbbbw?www?ww??wwbw?wbwbbwbwwbbbbbwbw?b?wwbbwbbbbbbwwbwbwwwwww?bw?bww\r\n",
                "994832387\r\n"
            ],
            [
                "10 0\r\nb?bwbbbwbw\r\n",
                "2\r\n"
            ],
            [
                "10 0\r\nbw?wwwbbwb\r\n",
                "0\r\n"
            ],
            [
                "10 0\r\nbbb?bwbbww\r\n",
                "1\r\n"
            ],
            [
                "10 0\r\nwwbb?wwbbb\r\n",
                "0\r\n"
            ],
            [
                "10 0\r\nbbbbb?bbbw\r\n",
                "1\r\n"
            ],
            [
                "10 0\r\nbbbwbb?bwb\r\n",
                "0\r\n"
            ]
        ]
    }
]