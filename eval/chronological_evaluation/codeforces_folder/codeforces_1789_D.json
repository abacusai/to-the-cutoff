[
    {
        "name": "Serval and Shift-Shift-Shift",
        "description": "Serval has two \n    n\n-bit binary integer numbers \n    a\n and \n    b\n. He\nwants to share those numbers with Toxel. Since Toxel likes the number \n    b\n\nmore, Serval decides to change \n    a\n into \n    b\n by some (possibly zero)\noperations. In an operation, Serval can choose any positive integer \n    k\n\nbetween \n    1\n and \n    n\n, and change \n    a\n into one of the following\nnumber: \n    a\n    \u2295(a\n    \u226a k)\n \n    a\n    \u2295(a\n    \u226b k)\n In other words,\nthe operation moves every bit of \n    a\n left or right by \n    k\n positions,\nwhere the overflowed bits are removed, and the missing bits are padded with\n\n    0\n. The bitwise XOR of the shift result and the original \n    a\n is\nassigned back to \n    a\n. Serval does not have much time. He wants to perform\nno more than \n    n\n operations to change \n    a\n into \n    b\n. Please help\nhim to find out an operation sequence, or determine that it is impossible to\nchange \n    a\n into \n    b\n in at most \n    n\n operations. You do not need to\nminimize the number of operations. In this problem, \n    x\n    \u2295 y\n denotes\nthe bitwise XOR operation of \n    x\n and \n    y\n. \n    a\n    \u226a k\n and \n    a\n    \u226b\n    k\n denote the logical left shift and logical right shift. Input Each test\ncontains multiple test cases. The first line contains the number of test cases\n\n    t\n (\n    1\n    \u2264 t\n    \u22642\n    \u00b710^3\n). The description of the test cases\nfollows. The first line of each test case contains a single integer \n    n\n\n(\n    1\n    \u2264 n\n    \u22642\n    \u00b710^3\n) \u2014 the number of bits in numbers \n    a\n\nand \n    b\n. The second and the third line of each test case contain a binary\nstring of length \n    n\n, representing \n    a\n and \n    b\n, respectively. The\nstrings contain only characters 0 and 1. It is guaranteed that the sum of\n\n    n\n over all test cases does not exceed \n    2\n    \u00b710^3\n. Output For\neach test case, if it is impossible to change \n    a\n into \n    b\n in at most\n\n    n\n operations, print a single integer \n    -1\n. Otherwise, in the first\nline, print the number of operations \n    m\n (\n    0\n    \u2264 m\n    \u2264 n\n). If\n\n    m>0\n, in the second line, print \n    m\n integers\n\n    k_1,k_2,\n    \u2026,k_m\n representing the operations. If \n    1\n    \u2264\n    k_i\n    \u2264 n\n, it means logical left shift \n    a\n by \n    k_i\n positions.\nIf \n    -n\n    \u2264 k_i\n    \u2264-1\n, it means logical right shift \n    a\n by\n\n    -k_i\n positions. If there are multiple solutions, print any of them.\nExample Input 3 5 00111 11000 1 1 1 3 001 000 Output 2 3 -2 0 -1 Note In the\nfirst test case: The first operation changes \n    a\n into\n\n    cancel00111\n    \u2295\n    00111\n    000=11111\n.\nThe second operation changes \n    a\n into\n\n    cancel11111\n    \u2295\n    00111\n    11=11000\n.\nThe bits with strikethroughs are overflowed bits that are removed. The bits\nwith underline are padded bits. In the second test case, \n    a\n is already\nequal to \n    b\n, so no operations are needed. In the third test case, it can\nbe shown that \n    a\n cannot be changed into \n    b\n.\n\n",
        "cf_contest_id": 1789,
        "cf_index": "D",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n5\r\n00111\r\n11000\r\n1\r\n1\r\n1\r\n3\r\n001\r\n000\r\n",
                "4\r\n4 -1 -2 -3\r\n0\r\n\r\n-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n1\r\n0\r\n0\r\n1\r\n0\r\n1\r\n1\r\n1\r\n0\r\n1\r\n1\r\n1\r\n",
                "0\r\n-1\r\n-1\r\n0\r\n\r\n"
            ],
            [
                "16\r\n2\r\n00\r\n00\r\n2\r\n00\r\n10\r\n2\r\n00\r\n01\r\n2\r\n00\r\n11\r\n2\r\n10\r\n00\r\n2\r\n10\r\n10\r\n2\r\n10\r\n01\r\n2\r\n10\r\n11\r\n2\r\n01\r\n00\r\n2\r\n01\r\n10\r\n2\r\n01\r\n01\r\n2\r\n01\r\n11\r\n2\r\n11\r\n00\r\n2\r\n11\r\n10\r\n2\r\n11\r\n01\r\n2\r\n11\r\n11\r\n",
                "0\r\n-1\r\n-1\r\n-1\r\n-1\r\n0\r\n\r\n2\r\n-1 1\r\n1\r\n-1\r\n-1\r\n2\r\n1 -1\r\n0\r\n\r\n1\r\n1\r\n-1\r\n1\r\n-1\r\n1\r\n1\r\n0\r\n\r\n"
            ]
        ]
    }
]