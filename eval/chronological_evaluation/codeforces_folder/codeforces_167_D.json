[
    {
        "name": "Wizards and Roads",
        "description": "In some country live wizards. They love to build cities and roads. The country\nused to have k cities, the j-th city (1 \u2264 j \u2264 k) was located at a point (xj,\nyj). It was decided to create another n - k cities. And the i-th one (k < i \u2264\nn) was created at a point with coordinates (xi, yi): xi = (a\u00b7xi - 1 + b) mod\n(10^9 + 9) yi = (c\u00b7yi - 1 + d) mod (10^9 + 9) Here a, b, c, d are primes.\nAlso, a \u2260 c, b \u2260 d. After the construction of all n cities, the wizards have\nnoticed something surprising. It turned out that for every two different\ncities i and j, xi \u2260 xj and yi \u2260 yj holds. The cities are built, it's time to\nbuild roads! It was decided to use the most difficult (and, of course, the\nmost powerful) spell for the construction of roads. Using this spell creates a\nroad between the towns of u, v (yu > yv) if and only if for any city w which\nlies strictly inside the corner at the point u, v (see below), there is a city\ns that does not lie in the corner, which is located along the x-coordinate\nstrictly between w and u and simultaneously ys > yv. A corner on the points\np2(x2, y2), p1(x1, y1) (y1 < y2) is the set of points (x, y), for which at\nleast one of the two conditions is fulfilled: min(x1, x2) \u2264 x \u2264 max(x1, x2)\nand y \u2265 y1 y1 \u2264 y \u2264 y2 and (x - x2)\u00b7(x1 - x2) \u2265 0 The pictures showing two\ndifferent corners In order to test the spell, the wizards will apply it to all\nthe cities that lie on the x-coordinate in the interval [L, R]. After the\nconstruction of roads the national government wants to choose the maximum\nnumber of pairs of cities connected by the road, so that no city occurs in two\nor more pairs. Your task is for each m offered variants of values L, R to\ncalculate the maximum number of such pairs after the construction of the\nroads. Please note that the cities that do not lie in the interval [L, R] on\nthe x-coordinate, do not affect the construction of roads in any way. Input\nThe first line contains two space-separated integers n, k (1 \u2264 k \u2264 n \u2264 10^5, k\n\u2264 30). Next k lines contain coordinates of the cities' location points from\nthe first to the k-th one. The j-th line contains space-separated pair of\nintegers xj, yj (0 \u2264 xj, yj < 10^9 + 9) \u2014 coordinates of the j-th city. The\nnext line contains space-separated integers a, b, c, d (2 \u2264 a, b, c, d < 10^9\n+ 9). It is guaranteed that those numbers are prime and also that a \u2260 c, b \u2260\nd. It's guaranteed, that for every two different cities i and j, xi \u2260 xj and\nyi \u2260 yj holds. The next line contains integer m (1 \u2264 m \u2264 10^5) \u2014 the number of\nvariants to build the roads. Next m lines contain pairs of space-separated\nintegers Li, Ri (0 \u2264 Li \u2264 Ri < 10^9 + 9) \u2014 the variants of choosing the cities\nto build the roads. Output For any pair of numbers Li, Ri print the answer to\nthe problem on a single line. Print the answers for the pairs in the order, in\nwhich the pairs are given in the input data. Examples Input 6 6 0 0 1 1 2 2 3\n3 4 4 5 5 2 3 3 2 4 0 5 1 4 2 3 3 3 Output 3 2 1 0 Input 6 1 0 0 3 5 23917 11\n4 0 1000000008 0 10 100 150 200 10000 Output 2 1 0 1 Note In the first sample\nthe roads connect the cities in a chain in the order of increasing of x. In\nthe second sample the remaining 5 cities will be located at points (5, 11);\n(20, 263098); (65, 292514823); (200, 76958738); (605, 622120197).\n\n",
        "cf_contest_id": 167,
        "cf_index": "D",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "divide and conquer",
            "graph matchings",
            "graphs",
            "greedy"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 6\r\n0 0\r\n1 1\r\n2 2\r\n3 3\r\n4 4\r\n5 5\r\n2 3 3 2\r\n4\r\n0 5\r\n1 4\r\n2 3\r\n3 3\r\n",
                "3\r\n2\r\n1\r\n0\r\n"
            ],
            [
                "6 1\r\n0 0\r\n3 5 23917 11\r\n4\r\n0 1000000008\r\n0 10\r\n100 150\r\n200 10000\r\n",
                "2\r\n1\r\n0\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "215 12\r\n805151423 805151423\r\n144283341 144283341\r\n95788196 95788196\r\n979746653 979746653\r\n824017123 824017123\r\n880115243 880115243\r\n846206253 846206253\r\n67786931 67786931\r\n317581984 317581984\r\n206398906 206398906\r\n384531304 384531304\r\n864214412 864214412\r\n2 3 3 2\r\n8\r\n468034213 607009202\r\n387043833 876646701\r\n490443864 521993409\r\n285662119 543460431\r\n252824992 403648616\r\n465856765 487428623\r\n114736384 318148073\r\n805186766 827614142\r\n",
                "14\r\n44\r\n2\r\n26\r\n13\r\n4\r\n21\r\n2\r\n"
            ]
        ]
    }
]