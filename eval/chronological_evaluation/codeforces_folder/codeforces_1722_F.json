[
    {
        "name": "L-shapes",
        "description": "An L-shape is a figure on gridded paper that looks like the first four\npictures below. An L-shape contains exactly three shaded cells (denoted by *),\nwhich can be rotated in any way. You are given a rectangular grid. Determine\nif it contains L-shapes only, where L-shapes can't touch an edge or corner.\nMore formally: Each shaded cell in the grid is part of exactly one L-shape,\nand no two L-shapes are adjacent by edge or corner. For example, the last two\ngrids in the picture above do not satisfy the condition because the two\nL-shapes touch by corner and edge, respectively. Input The input consists of\nmultiple test cases. The first line contains an integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 100\n) \u2014 the number of test cases. The description of the test cases\nfollows. The first line of each test case contains two integers \n    n\n and\n\n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 50\n) \u2014 the number of rows and columns in\nthe grid, respectively. Then \n    n\n lines follow, each containing \n    m\n\ncharacters. Each of these characters is either '.' or '*' \u2014 an empty cell or a\nshaded cell, respectively. Output For each test case, output \"YES\" if the grid\nis made up of L-shape that don't share edges or corners, and \"NO\" otherwise.\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\",\n\"Yes\" and \"YES\" will be recognized as a positive answer). Example Input 10 6\n10 ........** .**......* ..*..*.... .....**... ...*.....* ..**....** 6 10\n....*...** .**......* ..*..*.... .....**... ...*.....* ..**....** 3 3 ... ***\n... 4 4 .*.. **.. ..** ..*. 5 4 .*.. **.. .... ..** ..*. 3 2 .* ** *. 2 3 *..\n.** 3 2 .. ** *. 3 3 .** *.* **. 3 3 ..* .** ..* Output YES NO NO NO YES NO NO\nYES NO NO\n\n",
        "cf_contest_id": 1722,
        "cf_index": "F",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10\r\n6 10\r\n........**\r\n.**......*\r\n..*..*....\r\n.....**...\r\n...*.....*\r\n..**....**\r\n6 10\r\n....*...**\r\n.**......*\r\n..*..*....\r\n.....**...\r\n...*.....*\r\n..**....**\r\n3 3\r\n...\r\n***\r\n...\r\n4 4\r\n.*..\r\n**..\r\n..**\r\n..*.\r\n5 4\r\n.*..\r\n**..\r\n....\r\n..**\r\n..*.\r\n3 2\r\n.*\r\n**\r\n*.\r\n2 3\r\n*..\r\n.**\r\n3 2\r\n..\r\n**\r\n*.\r\n3 3\r\n.**\r\n*.*\r\n**.\r\n3 3\r\n..*\r\n.**\r\n..*\r\n",
                "YES NO NO NO YES NO NO YES NO NO "
            ]
        ],
        "private_cases": [
            [
                "1\r\n4 4\r\n.**.\r\n*..*\r\n*..*\r\n.**.\r\n",
                "NO "
            ],
            [
                "1\r\n4 5\r\n..*..\r\n.*.*.\r\n.*.*.\r\n..*..\r\n",
                "NO "
            ]
        ]
    }
]