[
    {
        "name": "Interesting Sum",
        "description": "You are given an array \n    a\n that contains \n    n\n integers. You can choose\nany proper subsegment \n    a_l, a_l + 1, \n    \u2026, a_r\n of this array,\nmeaning you can choose any two integers \n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 n\n, where\n\n    r - l + 1 < n\n. We define the beauty of a given subsegment as the value\nof the following expression: \n    \n\n    max(a_1, a_2, \n    \u2026, a_l-1,\n    a_r+1, a_r+2, \n    \u2026, a_n) - \n    min(a_1, a_2, \n    \u2026, a_l-1,\n    a_r+1, a_r+2, \n    \u2026, a_n) + \n    max(a_l, \n    \u2026, a_r) -\n    \n    min(a_l, \n    \u2026, a_r).\n\n    \n Please find the maximum beauty among all\nproper subsegments. Input The first line contains one integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of test cases. Then follow the\ndescriptions of each test case. The first line of each test case contains a\nsingle integer \n    n\n \n    (4 \n    \u2264 n \n    \u2264 10^5)\n \u2014 the length of the\narray. The second line of each test case contains \n    n\n integers \n    a_1,\n    a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i\n    \u2264 10^9\n) \u2014 the elements of the\ngiven array. It is guaranteed that the sum of \n    n\n over all test cases does\nnot exceed \n    10^5\n. Output For each testcase print a single integer \u2014 the\nmaximum beauty of a proper subsegment. Example Input 4 8 1 2 2 3 1 5 6 1 5 1 2\n3 100 200 4 3 3 3 3 6 7 8 3 1 1 8 Output 9 297 0 14 Note In the first test\ncase, the optimal segment is \n    l = 7\n, \n    r = 8\n. The beauty of this\nsegment equals to \n    (6 - 1) + (5 - 1) = 9\n. In the second test case, the\noptimal segment is \n    l = 2\n, \n    r = 4\n. The beauty of this segment equals\n\n    (100 - 2) + (200 - 1) = 297\n.\n\n",
        "cf_contest_id": 1720,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "greedy",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n8\r\n1 2 2 3 1 5 6 1\r\n5\r\n1 2 3 100 200\r\n4\r\n3 3 3 3\r\n6\r\n7 8 3 1 1 8\r\n",
                "9\r\n297\r\n0\r\n14\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n4\r\n1000000000 1000000000 1000000000 1000000000\r\n",
                "0\r\n"
            ]
        ]
    }
]