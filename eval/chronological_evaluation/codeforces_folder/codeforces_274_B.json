[
    {
        "name": "Zero Tree",
        "description": "A tree is a graph with n vertices and exactly n - 1 edges; this graph should\nmeet the following condition: there exists exactly one shortest (by number of\nedges) path between any pair of its vertices. A subtree of a tree T is a tree\nwith both vertices and edges as subsets of vertices and edges of T. You're\ngiven a tree with n vertices. Consider its vertices numbered with integers\nfrom 1 to n. Additionally an integer is written on every vertex of this tree.\nInitially the integer written on the i-th vertex is equal to vi. In one move\nyou can apply the following operation: Select the subtree of the given tree\nthat includes the vertex with number 1. Increase (or decrease) by one all the\nintegers which are written on the vertices of that subtree. Calculate the\nminimum number of moves that is required to make all the integers written on\nthe vertices of the given tree equal to zero. Input The first line of the\ninput contains n (1 \u2264 n \u2264 10^5). Each of the next n - 1 lines contains two\nintegers ai and bi (1 \u2264 ai, bi \u2264 n; ai \u2260 bi) indicating there's an edge\nbetween vertices ai and bi. It's guaranteed that the input graph is a tree.\nThe last line of the input contains a list of n space-separated integers v1,\nv2, ..., vn (|vi| \u2264 10^9). Output Print the minimum number of operations\nneeded to solve the task. Please, do not write the \nwrite 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or\nthe \n\n",
        "cf_contest_id": 274,
        "cf_index": "B",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dp",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 2\r\n1 3\r\n1 -1 1\r\n",
                "3"
            ]
        ],
        "private_cases": [
            [
                "5\r\n2 3\r\n4 5\r\n2 5\r\n1 3\r\n0 2 1 4 3\r\n",
                "8"
            ],
            [
                "10\r\n5 6\r\n8 2\r\n9 3\r\n4 1\r\n6 10\r\n9 8\r\n7 10\r\n7 4\r\n5 2\r\n0 -6 -9 -1 -5 -4 -2 -7 -8 -3\r\n",
                "18"
            ],
            [
                "5\r\n3 1\r\n2 4\r\n3 4\r\n2 5\r\n0 -3 -1 2 4\r\n",
                "20"
            ],
            [
                "12\r\n1 6\r\n10 1\r\n4 1\r\n7 1\r\n1 2\r\n5 1\r\n1 8\r\n1 11\r\n3 1\r\n12 1\r\n9 1\r\n580660007 861441526 -264928594 488291045 253254575 -974301934 709266786 926718320 87511873 514836444 -702876508 848928657\r\n",
                "2529263875"
            ]
        ]
    }
]