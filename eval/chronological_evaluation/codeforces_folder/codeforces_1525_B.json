[
    {
        "name": "Permutation Sort",
        "description": "You are given a permutation \n    a\n consisting of \n    n\n numbers \n    1\n,\n\n    2\n, ..., \n    n\n (a permutation is an array in which each element from\n\n    1\n to \n    n\n occurs exactly once). You can perform the following\noperation: choose some subarray (contiguous subsegment) of \n    a\n and\nrearrange the elements in it in any way you want. But this operation cannot be\napplied to the whole array. For example, if \n    a = [2, 1, 4, 5, 3]\n and we\nwant to apply the operation to the subarray \n    a[2, 4]\n (the subarray\ncontaining all elements from the \n    2\n-nd to the \n    4\n-th), then after the\noperation, the array can become \n    a = [2, 5, 1, 4, 3]\n or, for example,\n\n    a = [2, 1, 5, 4, 3]\n. Your task is to calculate the minimum number of\noperations described above to sort the permutation \n    a\n in ascending order.\nInput The first line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    2000\n) \u2014 the number of test cases. The first line of the test case contains\na single integer \n    n\n (\n    3 \n    \u2264 n \n    \u2264 50\n) \u2014 the number of elements\nin the permutation. The second line of the test case contains \n    n\n distinct\nintegers from \n    1\n to \n    n\n \u2014 the given permutation \n    a\n. Output For\neach test case, output a single integer \u2014 the minimum number of operations\ndescribed above to sort the array \n    a\n in ascending order. Example Input 3\n4 1 3 2 4 3 1 2 3 5 2 1 4 5 3 Output 1 0 2 Note In the explanations, \n    a[i,\n    j]\n defines the subarray of \n    a\n that starts from the \n    i\n-th element\nand ends with the \n    j\n-th element. In the first test case of the example,\nyou can select the subarray \n    a[2, 3]\n and swap the elements in it. In the\nsecond test case of the example, the permutation is already sorted, so you\ndon't need to apply any operations. In the third test case of the example, you\ncan select the subarray \n    a[3, 5]\n and reorder the elements in it so\n\n    a\n becomes \n    [2, 1, 3, 4, 5]\n, and then select the subarray \n    a[1,\n    2]\n and swap the elements in it, so \n    a\n becomes \n    [1, 2, 3, 4, 5]\n.\n\n",
        "cf_contest_id": 1525,
        "cf_index": "B",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n4\r\n1 3 2 4\r\n3\r\n1 2 3\r\n5\r\n2 1 4 5 3\r\n",
                "1\r\n0\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n8\r\n6 2 3 1 8 4 5 7\r\n",
                "2\r\n"
            ]
        ]
    }
]