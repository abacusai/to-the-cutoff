[
    {
        "name": "Cannon",
        "description": "Bertown is under siege! The attackers have blocked all the ways out and their\ncannon is bombarding the city. Fortunately, Berland intelligence managed to\nintercept the enemies' shooting plan. Let's introduce the Cartesian system of\ncoordinates, the origin of which coincides with the cannon's position, the Ox\naxis is directed rightwards in the city's direction, the Oy axis is directed\nupwards (to the sky). The cannon will make n more shots. The cannon balls'\ninitial speeds are the same in all the shots and are equal to V, so that every\nshot is characterized by only one number alphai which represents the angle at\nwhich the cannon fires. Due to the cannon's technical peculiarities this angle\ndoes not exceed 45 angles (\u03c0 / 4). We disregard the cannon sizes and consider\nthe firing made from the point (0, 0). The balls fly according to the known\nphysical laws of a body thrown towards the horizon at an angle: vx(t) =\nV\u00b7cos(alpha) vy(t) = V\u00b7sin(alpha) \u2013 g\u00b7t x(t) = V\u00b7cos(alpha)\u00b7t y(t) =\nV\u00b7sin(alpha)\u00b7t \u2013 g\u00b7t^2 / 2 Think of the acceleration of gravity g as equal to\n9.8. Bertown defends m walls. The i-th wall is represented as a vertical\nsegment (xi, 0) - (xi, yi). When a ball hits a wall, it gets stuck in it and\ndoesn't fly on. If a ball doesn't hit any wall it falls on the ground (y = 0)\nand stops. If the ball exactly hits the point (xi, yi), it is considered\nstuck. Your task is to find for each ball the coordinates of the point where\nit will be located in the end. Input The first line contains integers n and V\n(1 \u2264 n \u2264 10^4, 1 \u2264 V \u2264 1000) which represent the number of shots and the\ninitial speed of every ball. The second line contains n space-separated real\nnumbers alphai (0 < alphai < \u03c0 / 4) which represent the angles in radians at\nwhich the cannon will fire. The third line contains integer m (1 \u2264 m \u2264 10^5)\nwhich represents the number of walls. Then follow m lines, each containing two\nreal numbers xi and yi (1 \u2264 xi \u2264 1000, 0 \u2264 yi \u2264 1000) which represent the\nwall\u2019s coordinates. All the real numbers have no more than 4 decimal digits.\nThe walls may partially overlap or even coincide. Output Print n lines\ncontaining two real numbers each \u2014 calculate for every ball the coordinates of\nits landing point. Your answer should have the relative or absolute error less\nthan 10^-4. Examples Input 2 10 0.7853 0.3 3 5.0 5.0 4.0 2.4 6.0 1.9 Output\n5.000000000 2.549499369 4.000000000 0.378324889 Input 2 10 0.7853 0.3 2 4.0\n2.4 6.0 1.9 Output 10.204081436 0.000000000 4.000000000 0.378324889\n\n",
        "cf_contest_id": 47,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "geometry",
            "sortings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 10\r\n0.7853\r\n0.3\r\n3\r\n5.0 5.0\r\n4.0 2.4\r\n6.0 1.9\r\n",
                "5.000000000 2.549499369\r\n4.000000000 0.378324889\r\n"
            ],
            [
                "2 10\r\n0.7853\r\n0.3\r\n2\r\n4.0 2.4\r\n6.0 1.9\r\n",
                "10.204081436 0.000000000\r\n4.000000000 0.378324889\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 186\r\n0.4084\r\n0.4559\r\n0.1203\r\n3\r\n978.8435 234.6507\r\n343.6961 128.6128\r\n611.2897 458.9593\r\n",
                "611.289700000 201.687561175\r\n611.289700000 234.096418112\r\n343.696100000 24.571869439\r\n"
            ],
            [
                "4 851\r\n0.3178\r\n0.5635\r\n0.1335\r\n0.5107\r\n4\r\n685.3785 249.6264\r\n681.8946 242.4571\r\n917.2937 600.3285\r\n150.5685 135.5137\r\n",
                "150.568500000 49.359453403\r\n150.568500000 94.919970010\r\n150.568500000 20.065007118\r\n150.568500000 84.158687413\r\n"
            ],
            [
                "2 875\r\n0.7537\r\n0.4375\r\n5\r\n445.8822 355.9854\r\n29.3463 12.5104\r\n845.7334 537.7371\r\n494.5914 322.9145\r\n799.3183 315.1701\r\n",
                "77968.056705539 0.000000000\r\n445.882200000 207.001740252\r\n"
            ],
            [
                "6 417\r\n0.0303\r\n0.7536\r\n0.7225\r\n0.2404\r\n0.2432\r\n0.4583\r\n3\r\n979.9372 477.1436\r\n469.9804 408.1158\r\n923.2564 220.5522\r\n",
                "469.980400000 8.014848928\r\n17707.905316391 0.000000000\r\n469.980400000 403.227402023\r\n469.980400000 108.613087969\r\n469.980400000 109.999956153\r\n469.980400000 224.117928434\r\n"
            ]
        ]
    }
]