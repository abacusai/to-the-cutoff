[
    {
        "name": "CopyCopyCopyCopyCopy",
        "description": "Ehab has an array \n    a\n of length \n    n\n. He has just enough free time to\nmake a new array consisting of \n    n\n copies of the old array, written back-\nto-back. What will be the length of the new array's longest increasing\nsubsequence? A sequence \n    a\n is a subsequence of an array \n    b\n if\n\n    a\n can be obtained from \n    b\n by deletion of several (possibly, zero or\nall) elements. The longest increasing subsequence of an array is the longest\nsubsequence such that its elements are ordered in strictly increasing order.\nInput The first line contains an integer \n    t\n \u2014 the number of test cases\nyou need to solve. The description of the test cases follows. The first line\nof each test case contains an integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n) \u2014\nthe number of elements in the array \n    a\n. The second line contains \n    n\n\nspace-separated integers \n    a_1\n, \n    a_2\n, \n    \u2026\n, \n    a_n\n\n(\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the elements of the array \n    a\n. The sum of\n\n    n\n across the test cases doesn't exceed \n    10^5\n. Output For each\ntestcase, output the length of the longest increasing subsequence of \n    a\n\nif you concatenate it to itself \n    n\n times. Example Input 2 3 3 2 1 6 3 1 4\n1 5 9 Output 3 5 Note In the first sample, the new array is\n\n    [3,2,\n    1,3,\n    2,1,\n    3,2,1]\n. The longest\nincreasing subsequence is marked in bold. In the second sample, the longest\nincreasing subsequence will be \n    [1,3,4,5,9]\n.\n\n",
        "cf_contest_id": 1325,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n3\r\n3 2 1\r\n6\r\n3 1 4 1 5 9\r\n",
                "3\r\n5\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n7\r\n6 6 8 8 6 6 6\r\n1\r\n2\r\n5\r\n4 5 9 8 7\r\n7\r\n1 2 7 1 6 10 2\r\n",
                "2\r\n1\r\n5\r\n5\r\n"
            ],
            [
                "2\r\n5\r\n5 5 5 5 5\r\n3\r\n1 2 5\r\n",
                "1\r\n3\r\n"
            ],
            [
                "2\r\n5\r\n1 2 3 4 5\r\n4\r\n2 3 4 5\r\n",
                "5\r\n4\r\n"
            ],
            [
                "1\r\n3\r\n1 1 274005660\r\n",
                "2\r\n"
            ],
            [
                "2\r\n2\r\n1 1\r\n1\r\n1\r\n",
                "1\r\n1\r\n"
            ],
            [
                "2\r\n4\r\n1 3 3 3\r\n3\r\n1 2 3\r\n",
                "2\r\n3\r\n"
            ],
            [
                "2\r\n3\r\n1 1 1\r\n2\r\n1 1\r\n",
                "1\r\n1\r\n"
            ],
            [
                "1\r\n5\r\n1 3 4 5 2\r\n",
                "5\r\n"
            ]
        ]
    }
]