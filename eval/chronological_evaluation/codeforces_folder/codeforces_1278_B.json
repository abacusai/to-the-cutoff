[
    {
        "name": "A and B",
        "description": "You are given two integers \n    a\n and \n    b\n. You can perform a sequence of\noperations: during the first operation you choose one of these numbers and\nincrease it by \n    1\n; during the second operation you choose one of these\nnumbers and increase it by \n    2\n, and so on. You choose the number of these\noperations yourself. For example, if \n    a = 1\n and \n    b = 3\n, you can\nperform the following sequence of three operations: add \n    1\n to \n    a\n,\nthen \n    a = 2\n and \n    b = 3\n; add \n    2\n to \n    b\n, then \n    a = 2\n and\n\n    b = 5\n; add \n    3\n to \n    a\n, then \n    a = 5\n and \n    b = 5\n.\nCalculate the minimum number of operations required to make \n    a\n and\n\n    b\n equal. Input The first line contains one integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 100\n) \u2014 the number of test cases. The only line of each test case\ncontains two integers \n    a\n and \n    b\n (\n    1 \n    \u2264 a, b \n    \u2264 10^9\n).\nOutput For each test case print one integer \u2014 the minimum numbers of\noperations required to make \n    a\n and \n    b\n equal. Example Input 3 1 3 11\n11 30 20 Output 3 0 4 Note First test case considered in the statement. In the\nsecond test case integers \n    a\n and \n    b\n are already equal, so you don't\nneed to perform any operations. In the third test case you have to apply the\nfirst, the second, the third and the fourth operation to \n    b\n (\n    b\n\nturns into \n    20 + 1 + 2 + 3 + 4 = 30\n).\n\n",
        "cf_contest_id": 1278,
        "cf_index": "B",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 3\r\n11 11\r\n30 20\r\n",
                "3\r\n0\r\n4\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 139282\r\n",
                "529\r\n"
            ],
            [
                "1\r\n1999 1998\r\n",
                "1\r\n"
            ]
        ]
    }
]