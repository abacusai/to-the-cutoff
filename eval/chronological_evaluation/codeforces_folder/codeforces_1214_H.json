[
    {
        "name": "Tiles Placement",
        "description": "The new pedestrian zone in Moscow city center consists of \n    n\n squares\nconnected with each other by \n    n - 1\n footpaths. We define a simple path as\na sequence of squares such that no square appears in this sequence twice and\nany two adjacent squares in this sequence are directly connected with a\nfootpath. The size of a simple path is the number of squares in it. The\nfootpaths are designed in a such a way that there is exactly one simple path\nbetween any pair of different squares. During preparations for Moscow City Day\nthe city council decided to renew ground tiles on all \n    n\n squares. There\nare \n    k\n tile types of different colors, numbered from \n    1\n to \n    k\n.\nFor each square exactly one tile type must be selected and then used to cover\nthis square surface. To make walking through the city center more fascinating,\nit was decided to select tiles types for each square in such a way that any\npossible simple path of size exactly \n    k\n contains squares with all \n    k\n\npossible tile colors. You need to find out whether it is possible to place the\ntiles this way or not. Input The first line contains two integers \n    n\n,\n\n    k\n (\n    2 \n    \u2264 k \n    \u2264 n \n    \u2264 200\n     000\n) \u2014 the number of squares in\nthe new pedestrian zone, the number of different tile colors. Each of the\nfollowing \n    n - 1\n lines contains two integers \n    v_i\n and \n    u_i\n\n(\n    1 \n    \u2264 v_i, u_i \n    \u2264 n\n) \u2014 numbers of the squares connected by the\ncorresponding road. It's guaranteed, that it's possible to go from any square\nto any other square, moreover there is exactly one such simple path. Output\nPrint \"Yes\" if it is possible to assign tile colors this way and \"No\"\notherwise. In case your answer is \"Yes\", print \n    n\n integers from \n    1\n\nto \n    k\n each, the color of the tile for every square. Examples Input 7 4 1\n3 2 3 3 4 4 5 5 6 5 7 Output Yes 1 1 2 3 4 1 1 Input 7 3 1 3 2 3 3 4 4 5 5 6 5\n7 Output No Note The following pictures illustrate the pedestrian zone in\nfirst and second examples. The second picture also shows one possible\ndistribution of colors among the squares for \n    k = 4\n.\n\n",
        "cf_contest_id": 1214,
        "cf_index": "H",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "7 4\r\n1 3\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n5 7\r\n",
                "Yes\r\n2 2 1 4 3 2 2\r\n"
            ],
            [
                "7 3\r\n1 3\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n5 7\r\n",
                "No\r\n"
            ]
        ],
        "private_cases": [
            [
                "7 4\r\n1 3\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n5 7\r\n",
                "Yes\r\n2 2 1 4 3 2 2\r\n"
            ],
            [
                "7 2\r\n1 3\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n5 7\r\n",
                "Yes\r\n2 2 1 2 1 2 2\r\n"
            ],
            [
                "7 6\r\n1 3\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n5 7\r\n",
                "Yes\r\n4 4 5 6 1 2 6\r\n"
            ],
            [
                "3 2\r\n2 1\r\n2 3\r\n",
                "Yes\r\n2 1 2\r\n"
            ],
            [
                "6 4\r\n6 4\r\n6 1\r\n4 2\r\n1 3\r\n4 5\r\n",
                "Yes\r\n1 2 2 3 2 4\r\n"
            ],
            [
                "5 3\r\n5 1\r\n5 4\r\n4 3\r\n3 2\r\n",
                "Yes\r\n3 2 3 1 2\r\n"
            ],
            [
                "4 2\r\n3 2\r\n3 1\r\n3 4\r\n",
                "Yes\r\n2 2 1 2\r\n"
            ],
            [
                "2 2\r\n1 2\r\n",
                "Yes\r\n1 2\r\n"
            ],
            [
                "5 5\r\n4 5\r\n5 2\r\n5 1\r\n1 3\r\n",
                "Yes\r\n5 5 4 2 1\r\n"
            ],
            [
                "7 3\r\n2 5\r\n5 7\r\n7 3\r\n2 4\r\n4 1\r\n2 6\r\n",
                "No\r\n"
            ],
            [
                "5 2\r\n3 1\r\n1 4\r\n4 2\r\n2 5\r\n",
                "Yes\r\n1 1 2 2 2\r\n"
            ],
            [
                "5 2\r\n1 3\r\n1 2\r\n3 4\r\n4 5\r\n",
                "Yes\r\n1 2 2 1 2\r\n"
            ],
            [
                "3 2\r\n2 1\r\n2 3\r\n",
                "Yes\r\n2 1 2\r\n"
            ],
            [
                "7 4\r\n2 3\r\n3 5\r\n3 7\r\n7 4\r\n2 1\r\n5 6\r\n",
                "No\r\n"
            ],
            [
                "7 4\r\n6 5\r\n6 3\r\n6 1\r\n3 7\r\n1 2\r\n2 4\r\n",
                "No\r\n"
            ],
            [
                "7 5\r\n4 6\r\n4 5\r\n5 2\r\n6 3\r\n4 7\r\n2 1\r\n",
                "Yes\r\n2 1 2 4 5 3 3\r\n"
            ],
            [
                "7 2\r\n6 2\r\n6 7\r\n6 5\r\n6 3\r\n6 1\r\n6 4\r\n",
                "Yes\r\n2 2 2 2 2 1 2\r\n"
            ],
            [
                "7 3\r\n7 3\r\n7 2\r\n7 1\r\n7 5\r\n7 6\r\n7 4\r\n",
                "No\r\n"
            ],
            [
                "7 4\r\n5 6\r\n5 4\r\n5 7\r\n5 3\r\n5 1\r\n5 2\r\n",
                "Yes\r\n4 4 4 4 1 2 4\r\n"
            ],
            [
                "7 4\r\n2 4\r\n4 6\r\n6 3\r\n3 7\r\n7 1\r\n1 5\r\n",
                "Yes\r\n3 2 1 3 4 4 2\r\n"
            ],
            [
                "7 7\r\n5 2\r\n2 7\r\n7 3\r\n3 6\r\n6 4\r\n4 1\r\n",
                "Yes\r\n1 3 5 7 2 6 4\r\n"
            ],
            [
                "7 3\r\n7 2\r\n2 5\r\n5 1\r\n1 3\r\n2 4\r\n1 6\r\n",
                "No\r\n"
            ],
            [
                "7 5\r\n7 1\r\n1 4\r\n4 5\r\n4 2\r\n2 6\r\n2 3\r\n",
                "Yes\r\n5 3 2 4 5 2 1\r\n"
            ],
            [
                "64 45\r\n8 39\r\n8 42\r\n39 9\r\n8 37\r\n8 1\r\n42 12\r\n37 7\r\n7 5\r\n1 29\r\n9 40\r\n29 3\r\n8 50\r\n5 14\r\n14 6\r\n6 23\r\n23 25\r\n25 51\r\n25 34\r\n7 48\r\n1 35\r\n7 58\r\n58 57\r\n57 18\r\n40 54\r\n51 4\r\n5 53\r\n3 49\r\n29 33\r\n6 45\r\n51 24\r\n53 43\r\n43 62\r\n39 26\r\n8 52\r\n7 20\r\n25 27\r\n35 46\r\n18 13\r\n25 15\r\n53 56\r\n12 44\r\n8 38\r\n57 59\r\n5 32\r\n38 11\r\n46 47\r\n51 61\r\n56 63\r\n11 19\r\n56 10\r\n32 60\r\n19 22\r\n42 17\r\n42 2\r\n33 36\r\n11 30\r\n20 28\r\n14 31\r\n17 64\r\n54 16\r\n31 21\r\n2 41\r\n3 55\r\n",
                "Yes\r\n12 13 14 2 8 6 9 11 13 11 13 13 13 7 5 16 13 12 14 10 9 15 5 4 4 13 5 11 13 14 8 9 14 5 13 15 10 12 12 14 14 12 10 14 7 14 15 10 15 12 3 12 9 15 15 10 11 10 12 10 4 11 11 14\r\n"
            ],
            [
                "13 10\r\n1 5\r\n5 3\r\n5 10\r\n10 2\r\n3 12\r\n1 9\r\n10 4\r\n5 7\r\n12 11\r\n3 13\r\n10 8\r\n12 6\r\n",
                "Yes\r\n8 7 10 7 9 10 8 7 7 8 2 1 9\r\n"
            ]
        ]
    }
]