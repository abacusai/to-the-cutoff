[
    {
        "name": "Matrix and Shifts",
        "description": "You are given a binary matrix \n    A\n of size \n    n \n    \u00d7 n\n. Rows are\nnumbered from top to bottom from \n    1\n to \n    n\n, columns are numbered from\nleft to right from \n    1\n to \n    n\n. The element located at the intersection\nof row \n    i\n and column \n    j\n is called \n    A_ij\n. Consider a set of\n\n    4\n operations: Cyclically shift all rows up. The row with index \n    i\n\nwill be written in place of the row \n    i-1\n (\n    2 \n    \u2264 i \n    \u2264 n\n), the\nrow with index \n    1\n will be written in place of the row \n    n\n. Cyclically\nshift all rows down. The row with index \n    i\n will be written in place of\nthe row \n    i+1\n (\n    1 \n    \u2264 i \n    \u2264 n - 1\n), the row with index \n    n\n\nwill be written in place of the row \n    1\n. Cyclically shift all columns to\nthe left. The column with index \n    j\n will be written in place of the column\n\n    j-1\n (\n    2 \n    \u2264 j \n    \u2264 n\n), the column with index \n    1\n will be\nwritten in place of the column \n    n\n. Cyclically shift all columns to the\nright. The column with index \n    j\n will be written in place of the column\n\n    j+1\n (\n    1 \n    \u2264 j \n    \u2264 n - 1\n), the column with index \n    n\n will be\nwritten in place of the column \n    1\n. The \n    3 \n    \u00d7 3\n matrix is shown\non the left before the \n    3\n-rd operation is applied to it, on the right \u2014\nafter. You can perform an arbitrary (possibly zero) number of operations on\nthe matrix; the operations can be performed in any order. After that, you can\nperform an arbitrary (possibly zero) number of new xor-operations: Select any\nelement \n    A_ij\n and assign it with new value \n    A_ij\n    \u2295 1\n. In\nother words, the value of \n    (A_ij + 1) \n     2\n will have to be written\ninto element \n    A_ij\n. Each application of this xor-operation costs one\nburl. Note that the \n    4\n shift operations \u2014 are free. These \n    4\n\noperations can only be performed before xor-operations are performed. Output\nthe minimum number of burles you would have to pay to make the \n    A\n matrix\nunitary. A unitary matrix is a matrix with ones on the main diagonal and the\nrest of its elements are zeros (that is, \n    A_ij = 1\n if \n    i = j\n and\n\n    A_ij = 0\n otherwise). Input The first line of the input contains an\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014the number of test cases in the\ntest. The descriptions of the test cases follow. Before each test case, an\nempty line is written in the input. The first line of each test case contains\na single number \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2000\n) This is followed by\n\n    n\n lines, each containing exactly \n    n\n characters and consisting only\nof zeros and ones. These lines describe the values in the elements of the\nmatrix. It is guaranteed that the sum of \n    n^2\n values over all test cases\ndoes not exceed \n    4 \n    \u00b7 10^6\n. Output For each test case, output the\nminimum number of burles you would have to pay to make the \n    A\n matrix\nunitary. In other words, print the minimum number of xor-operations it will\ntake after applying cyclic shifts to the matrix for the \n    A\n matrix to\nbecome unitary. Example Input 4 3 010 011 100 5 00010 00001 10000 01000 00100\n2 10 10 4 1111 1011 1111 1111 Output 1 0 2 11 Note In the first test case, you\ncan do the following: first, shift all the rows down cyclically, then the main\ndiagonal of the matrix will contain only \"1\". Then it will be necessary to\napply xor-operation to the only \"1\" that is not on the main diagonal. In the\nsecond test case, you can make a unitary matrix by applying the operation\n\n    2\n \u2014 cyclic shift of rows upward twice to the matrix.\n\n",
        "cf_contest_id": 1660,
        "cf_index": "E",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n\r\n3\r\n010\r\n011\r\n100\r\n\r\n5\r\n00010\r\n00001\r\n10000\r\n01000\r\n00100\r\n\r\n2\r\n10\r\n10\r\n\r\n4\r\n1111\r\n1011\r\n1111\r\n1111\r\n",
                "1\r\n0\r\n2\r\n11\r\n"
            ]
        ],
        "private_cases": []
    }
]