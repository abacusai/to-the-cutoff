[
    {
        "name": "Wizard of Orz",
        "description": "There are \n    n\n digital panels placed in a straight line. Each panel can\nshow any digit from \n    0\n to \n    9\n. Initially, all panels show \n    0\n.\nEvery second, the digit shown by each panel increases by \n    1\n. In other\nwords, at the end of every second, a panel that showed \n    9\n would now show\n\n    0\n, a panel that showed \n    0\n would now show \n    1\n, a panel that\nshowed \n    1\n would now show \n    2\n, and so on. When a panel is paused, the\ndigit displayed on the panel does not change in the subsequent seconds. You\nmust pause exactly one of these panels, at any second you wish. Then, the\npanels adjacent to it get paused one second later, the panels adjacent to\nthose get paused \n    2\n seconds later, and so on. In other words, if you\npause panel \n    x\n, panel \n    y\n (for all valid \n    y\n) would be paused\nexactly \n    |x\u2212y|\n seconds later. For example, suppose there are \n    4\n\npanels, and the \n    3\n-rd panel is paused when the digit \n    9\n is on it.\nThe panel \n    1\n pauses \n    2\n seconds later, so it has the digit \n    1\n;\nthe panel \n    2\n pauses \n    1\n second later, so it has the digit \n    0\n;\nthe panel \n    4\n pauses \n    1\n second later, so it has the digit \n    0\n.\nThe resulting \n    4\n-digit number is \n    1090\n. Note that this example is\nnot optimal for \n    n = 4\n. Once all panels have been paused, you write the\ndigits displayed on them from left to right, to form an \n    n\n digit number\n(it can consist of leading zeros). What is the largest possible number you can\nget? Initially, all panels show \n    0\n. Input The first line of the input\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of\ntest cases. Each test case consists of a single line containing a single\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \u00b710^5\n). It is guaranteed that\nthe sum of \n    n\n over all test cases does not exceed \n    2\n    \u00b710^5\n.\nOutput For each test case, print the largest number you can achieve, if you\npause one panel optimally. Example Input 2 1 2 Output 9 98 Note In the first\ntest case, it is optimal to pause the first panel when the number \n    9\n is\ndisplayed on it. In the second test case, it is optimal to pause the second\npanel when the number \n    8\n is displayed on it.\n\n",
        "cf_contest_id": 1467,
        "cf_index": "A",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n1\r\n2\r\n",
                "9\r\n98\r\n"
            ]
        ],
        "private_cases": []
    }
]