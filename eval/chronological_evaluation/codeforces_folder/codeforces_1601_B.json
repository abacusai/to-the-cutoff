[
    {
        "name": "Frog Traveler",
        "description": "Frog Gorf is traveling through Swamp kingdom. Unfortunately, after a poor\njump, he fell into a well of \n    n\n meters depth. Now Gorf is on the bottom\nof the well and has a long way up. The surface of the well's walls vary in\nquality: somewhere they are slippery, but somewhere have convenient ledges. In\nother words, if Gorf is on \n    x\n meters below ground level, then in one jump\nhe can go up on any integer distance from \n    0\n to \n    a_x\n meters\ninclusive. (Note that Gorf can't jump down, only up). Unfortunately, Gorf has\nto take a break after each jump (including jump on \n    0\n meters). And after\njumping up to position \n    x\n meters below ground level, he'll slip exactly\n\n    b_x\n meters down while resting. Calculate the minimum number of jumps\nGorf needs to reach ground level. Input The first line contains a single\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 300\n     000\n) \u2014 the depth of the well.\nThe second line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0\n    \n    \u2264 a_i \n    \u2264 i\n), where \n    a_i\n is the maximum height Gorf can jump\nfrom \n    i\n meters below ground level. The third line contains \n    n\n\nintegers \n    b_1, b_2, \n    \u2026, b_n\n (\n    0 \n    \u2264 b_i \n    \u2264 n - i\n), where\n\n    b_i\n is the distance Gorf will slip down if he takes a break on \n    i\n\nmeters below ground level. Output If Gorf can't reach ground level, print\n\n    -1\n. Otherwise, firstly print integer \n    k\n \u2014 the minimum possible\nnumber of jumps. Then print the sequence\n\n    d_1,\n     d_2,\n     \n    \u2026,\n     d_k\n where \n    d_j\n is the depth Gorf'll\nreach after the \n    j\n-th jump, but before he'll slip down during the break.\nGround level is equal to \n    0\n. If there are multiple answers, print any of\nthem. Examples Input 3 0 2 2 1 1 0 Output 2 1 0 Input 2 1 1 1 0 Output -1\nInput 10 0 1 2 3 5 5 6 7 8 5 9 8 7 1 5 4 3 2 0 0 Output 3 9 4 0 Note In the\nfirst example, Gorf is on the bottom of the well and jump to the height\n\n    1\n meter below ground level. After that he slip down by meter and stays\non height \n    2\n meters below ground level. Now, from here, he can reach\nground level in one jump. In the second example, Gorf can jump to one meter\nbelow ground level, but will slip down back to the bottom of the well. That's\nwhy he can't reach ground level. In the third example, Gorf can reach ground\nlevel only from the height \n    5\n meters below the ground level. And Gorf can\nreach this height using a series of jumps \n    10 \n    \u21d2 9\n    \n     9 \n    \u21d2 4 \n     5\n where\n\n    \u21d2\n is the jump and \n    \n is slipping during\nbreaks.\n\n",
        "cf_contest_id": 1601,
        "cf_index": "B",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "dp",
            "graphs",
            "shortest paths",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n0 2 2\r\n1 1 0\r\n",
                "2\r\n1 0 "
            ],
            [
                "2\r\n1 1\r\n1 0\r\n",
                "-1"
            ],
            [
                "10\r\n0 1 2 3 5 5 6 7 8 5\r\n9 8 7 1 5 4 3 2 0 0\r\n",
                "3\r\n9 4 0 "
            ]
        ],
        "private_cases": [
            [
                "5\r\n0 0 1 4 2\r\n0 2 0 1 0\r\n",
                "3\r\n3 2 0 "
            ],
            [
                "1\r\n1\r\n0\r\n",
                "1\r\n0 "
            ],
            [
                "10\r\n1 1 1 0 3 0 6 2 4 5\r\n7 6 2 3 5 1 2 0 1 0\r\n",
                "-1"
            ],
            [
                "10\r\n1 0 2 2 5 0 0 0 2 7\r\n4 3 1 0 4 3 3 2 1 0\r\n",
                "3\r\n4 2 0 "
            ],
            [
                "19\r\n1 1 3 4 5 3 5 7 0 6 5 3 10 3 13 9 1 4 17\r\n3 0 6 3 8 6 8 7 8 6 0 0 5 0 0 1 1 1 0\r\n",
                "3\r\n2 1 0 "
            ],
            [
                "12\r\n1 0 0 1 2 5 5 1 9 6 2 9\r\n8 8 8 1 1 4 4 0 3 1 1 0\r\n",
                "3\r\n5 1 0 "
            ]
        ]
    }
]