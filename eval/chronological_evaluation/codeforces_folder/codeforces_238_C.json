[
    {
        "name": "World Eater Brothers",
        "description": "You must have heard of the two brothers dreaming of ruling the world. With all\ntheir previous plans failed, this time they decided to cooperate with each\nother in order to rule the world. As you know there are n countries in the\nworld. These countries are connected by n - 1 directed roads. If you don't\nconsider direction of the roads there is a unique path between every pair of\ncountries in the world, passing through each road at most once. Each of the\nbrothers wants to establish his reign in some country, then it's possible for\nhim to control the countries that can be reached from his country using\ndirected roads. The brothers can rule the world if there exists at most two\ncountries for brothers to choose (and establish their reign in these\ncountries) so that any other country is under control of at least one of them.\nIn order to make this possible they want to change the direction of minimum\nnumber of roads. Your task is to calculate this minimum number of roads. Input\nThe first line of input contains an integer n (1 \u2264 n \u2264 3000). Each of the next\nn - 1 lines contains two space-separated integers ai and bi (1 \u2264 ai, bi \u2264 n;\nai \u2260 bi) saying there is a road from country ai to country bi. Consider that\ncountries are numbered from 1 to n. It's guaranteed that if you don't consider\ndirection of the roads there is a unique path between every pair of countries\nin the world, passing through each road at most once. Output In the only line\nof output print the minimum number of roads that their direction should be\nchanged so that the brothers will be able to rule the world. Examples Input 4\n2 1 3 1 4 1 Output 1 Input 5 2 1 2 3 4 3 4 5 Output 0\n\n",
        "cf_contest_id": 238,
        "cf_index": "C",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dp",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2 1\r\n3 1\r\n4 1\r\n",
                "1\r\n"
            ],
            [
                "5\r\n2 1\r\n2 3\r\n4 3\r\n4 5\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n",
                "0\r\n"
            ],
            [
                "10\r\n7 10\r\n9 7\r\n9 4\r\n2 4\r\n2 6\r\n5 6\r\n8 5\r\n8 3\r\n1 3\r\n",
                "2\r\n"
            ],
            [
                "10\r\n9 8\r\n9 10\r\n9 5\r\n8 6\r\n6 7\r\n5 4\r\n6 3\r\n3 2\r\n2 1\r\n",
                "0\r\n"
            ],
            [
                "47\r\n41 11\r\n5 41\r\n7 41\r\n8 7\r\n43 11\r\n18 5\r\n31 43\r\n44 43\r\n42 8\r\n33 7\r\n6 7\r\n30 7\r\n19 43\r\n35 30\r\n2 42\r\n4 35\r\n14 18\r\n28 31\r\n17 33\r\n24 18\r\n20 41\r\n21 6\r\n38 4\r\n40 28\r\n3 2\r\n26 11\r\n25 17\r\n15 18\r\n32 40\r\n12 14\r\n34 42\r\n13 17\r\n16 19\r\n1 21\r\n39 5\r\n9 1\r\n22 4\r\n29 28\r\n36 4\r\n10 13\r\n47 29\r\n27 36\r\n23 44\r\n45 27\r\n46 15\r\n37 23\r\n",
                "33\r\n"
            ],
            [
                "74\r\n50 67\r\n14 67\r\n36 50\r\n67 18\r\n47 36\r\n9 36\r\n62 47\r\n46 47\r\n47 31\r\n35 62\r\n22 35\r\n31 57\r\n57 25\r\n52 35\r\n27 22\r\n52 63\r\n20 63\r\n27 73\r\n63 39\r\n4 73\r\n42 73\r\n44 4\r\n4 30\r\n42 16\r\n30 12\r\n58 44\r\n66 12\r\n23 12\r\n12 55\r\n69 16\r\n2 66\r\n69 1\r\n7 2\r\n7 5\r\n28 7\r\n7 71\r\n29 71\r\n13 71\r\n55 6\r\n19 29\r\n43 6\r\n70 6\r\n6 26\r\n3 26\r\n3 15\r\n15 41\r\n54 41\r\n15 53\r\n8 53\r\n8 72\r\n8 17\r\n32 17\r\n11 32\r\n68 72\r\n49 68\r\n10 68\r\n68 37\r\n49 61\r\n40 10\r\n59 37\r\n64 61\r\n34 40\r\n38 59\r\n56 34\r\n60 64\r\n33 60\r\n38 45\r\n56 65\r\n65 48\r\n74 65\r\n21 48\r\n24 21\r\n51 24\r\n",
                "32\r\n"
            ],
            [
                "13\r\n1 4\r\n1 5\r\n2 6\r\n2 7\r\n3 8\r\n3 9\r\n4 10\r\n5 11\r\n6 11\r\n7 12\r\n8 12\r\n9 13\r\n",
                "2\r\n"
            ],
            [
                "13\r\n1 2\r\n2 3\r\n3 4\r\n5 4\r\n5 6\r\n6 7\r\n8 7\r\n9 8\r\n9 10\r\n11 10\r\n12 11\r\n13 12\r\n",
                "2\r\n"
            ],
            [
                "10\r\n1 6\r\n1 9\r\n2 10\r\n4 2\r\n4 3\r\n5 8\r\n6 3\r\n7 4\r\n8 2\r\n",
                "2\r\n"
            ],
            [
                "7\r\n2 1\r\n3 1\r\n4 3\r\n5 1\r\n4 6\r\n7 5\r\n",
                "1\r\n"
            ],
            [
                "5\r\n1 2\r\n2 3\r\n4 3\r\n5 4\r\n",
                "0\r\n"
            ],
            [
                "7\r\n1 2\r\n2 3\r\n5 4\r\n4 3\r\n7 6\r\n6 3\r\n",
                "2\r\n"
            ],
            [
                "5\r\n1 4\r\n3 4\r\n4 2\r\n5 4\r\n",
                "1\r\n"
            ],
            [
                "10\r\n1 2\r\n2 10\r\n3 1\r\n3 4\r\n5 2\r\n6 2\r\n7 1\r\n8 6\r\n9 5\r\n",
                "3\r\n"
            ],
            [
                "15\r\n2 1\r\n3 2\r\n4 3\r\n4 5\r\n6 5\r\n7 6\r\n8 7\r\n9 1\r\n10 9\r\n11 10\r\n11 12\r\n13 12\r\n14 13\r\n15 14\r\n",
                "2\r\n"
            ]
        ]
    }
]