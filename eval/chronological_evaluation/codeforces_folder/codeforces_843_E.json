[
    {
        "name": "Maximum Flow",
        "description": "You are given a directed graph, consisting of n vertices and m edges. The\nvertices s and t are marked as source and sink correspondingly. Additionally,\nthere are no edges ending at s and there are no edges beginning in t. The\ngraph was constructed in a following way: initially each edge had capacity ci\n> 0. A maximum flow with source at s and sink at t was constructed in this\nflow network. Let's denote fi as the value of flow passing through edge with\nindex i. Next, all capacities ci and flow value fi were erased. Instead,\nindicators gi were written on edges \u2014 if flow value passing through edge i was\npositive, i.e. 1 if fi > 0 and 0 otherwise. Using the graph and values gi,\nfind out what is the minimum possible number of edges in the initial flow\nnetwork that could be saturated (the passing flow is equal to capacity, i.e.\nfi = ci). Also construct the corresponding flow network with maximum flow in\nit. A flow in directed graph is described by flow values fi on each of the\nedges so that the following conditions are satisfied: for each vertex, except\nsource and sink, total incoming flow and total outcoming flow are equal, for\neach edge 0 \u2264 fi \u2264 ci A flow is maximum if the difference between the sum of\nflow values on edges from the source, and the sum of flow values on edges to\nthe source (there are no such in this problem), is maximum possible. Input The\nfirst line of input data contains four positive integers n, m, s, t (2 \u2264 n \u2264\n100, 1 \u2264 m \u2264 1000, 1 \u2264 s, t \u2264 n, s \u2260 t) \u2014 the number of vertices, the number\nof edges, index of source vertex and index of sink vertex correspondingly.\nEach of next m lines of input data contain non-negative integers ui, vi, gi (1\n\u2264 ui, vi \u2264 n, ) \u2014 the beginning of edge i, the end of edge i and indicator,\nwhich equals to 1 if flow value passing through edge i was positive and 0 if\nnot. It's guaranteed that no edge connects vertex with itself. Also it's\nguaranteed that there are no more than one edge between each ordered pair of\nvertices and that there exists at least one network flow that satisfies all\nthe constrains from input data. Output In the first line print single non-\nnegative integer k \u2014 minimum number of edges, which should be saturated in\nmaximum flow. In each of next m lines print two integers fi, ci (1 \u2264 ci \u2264\n10^9, 0 \u2264 fi \u2264 ci) \u2014 the flow value passing through edge i and capacity of\nedge i. This data should form a correct maximum flow in flow network. Also\nthere must be exactly k edges with statement fi = ci satisfied. Also statement\nfi > 0 must be true if and only if gi = 1. If there are several possible\nanswers, print any of them. Example Input 5 6 1 5 1 2 1 2 3 1 3 5 1 1 4 1 4 3\n0 4 5 1 Output 2 3 3 3 8 3 4 4 4 0 5 4 9 Note The illustration for second\nsample case. The saturated edges are marked dark, while edges with gi = 0 are\nmarked with dotted line. The integer on edge is the index of this edge in\ninput list.\n\n",
        "cf_contest_id": 843,
        "cf_index": "E",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "flows",
            "graphs"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 6 1 5\r\n1 2 1\r\n2 3 1\r\n3 5 1\r\n1 4 1\r\n4 3 0\r\n4 5 1\r\n",
                "2\r\n1 1\r\n1 114514\r\n1 114514\r\n1 1\r\n0 114514\r\n1 114514\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 10 1 6\r\n10 5 0\r\n5 6 1\r\n1 9 0\r\n4 10 0\r\n7 4 0\r\n1 5 1\r\n2 4 0\r\n7 6 0\r\n3 5 0\r\n5 9 0\r\n",
                "1\r\n0 114514\r\n1 114514\r\n0 114514\r\n0 114514\r\n0 114514\r\n1 1\r\n0 114514\r\n0 114514\r\n0 114514\r\n0 114514\r\n"
            ]
        ]
    }
]