[
    {
        "name": "Planning",
        "description": "Helen works in Metropolis airport. She is responsible for creating a departure\nschedule. There are n flights that must depart today, the i-th of them is\nplanned to depart at the i-th minute of the day. Metropolis airport is the\nmain transport hub of Metropolia, so it is difficult to keep the schedule\nintact. This is exactly the case today: because of technical issues, no\nflights were able to depart during the first k minutes of the day, so now the\nnew departure schedule must be created. All n scheduled flights must now\ndepart at different minutes between (k + 1)-th and (k + n)-th, inclusive.\nHowever, it's not mandatory for the flights to depart in the same order they\nwere initially scheduled to do so \u2014 their order in the new schedule can be\ndifferent. There is only one restriction: no flight is allowed to depart\nearlier than it was supposed to depart in the initial schedule. Helen knows\nthat each minute of delay of the i-th flight costs airport ci burles. Help her\nfind the order for flights to depart in the new schedule that minimizes the\ntotal cost for the airport. Input The first line contains two integers n and k\n(1 \u2264 k \u2264 n \u2264 300 000), here n is the number of flights, and k is the number of\nminutes in the beginning of the day that the flights did not depart. The\nsecond line contains n integers c1, c2, ..., cn (1 \u2264 ci \u2264 10^7), here ci is\nthe cost of delaying the i-th flight for one minute. Output The first line\nmust contain the minimum possible total cost of delaying the flights. The\nsecond line must contain n different integers t1, t2, ..., tn (k + 1 \u2264 ti \u2264 k\n+ n), here ti is the minute when the i-th flight must depart. If there are\nseveral optimal schedules, print any of them. Example Input 5 2 4 2 1 10 2\nOutput 20 3 6 7 4 5 Note Let us consider sample test. If Helen just moves all\nflights 2 minutes later preserving the order, the total cost of delaying the\nflights would be (3 - 1)\u00b74 + (4 - 2)\u00b72 + (5 - 3)\u00b71 + (6 - 4)\u00b710 + (7 - 5)\u00b72 =\n38 burles. However, the better schedule is shown in the sample answer, its\ncost is (3 - 1)\u00b74 + (6 - 2)\u00b72 + (7 - 3)\u00b71 + (4 - 4)\u00b710 + (5 - 5)\u00b72 = 20\nburles.\n\n",
        "cf_contest_id": 853,
        "cf_index": "A",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5 2\r\n4 2 1 10 2\r\n",
                "20\r\n3 6 7 4 5 "
            ]
        ],
        "private_cases": [
            [
                "3 2\r\n3 1 2\r\n",
                "11\r\n3 5 4 "
            ],
            [
                "5 5\r\n5 5 9 100 3\r\n",
                "321\r\n9 8 7 6 10 "
            ],
            [
                "1 1\r\n1\r\n",
                "1\r\n2 "
            ],
            [
                "1 1\r\n10000000\r\n",
                "10000000\r\n2 "
            ],
            [
                "6 4\r\n85666 52319 21890 51912 90704 10358\r\n",
                "1070345\r\n6 7 9 8 5 10 "
            ],
            [
                "10 5\r\n66220 81797 38439 54881 86879 94346 8802 59094 57095 41949\r\n",
                "2484818\r\n9 8 14 12 7 6 15 10 11 13 "
            ],
            [
                "8 1\r\n3669 11274 87693 33658 58862 78334 42958 30572\r\n",
                "29352\r\n9 2 3 4 5 6 7 8 "
            ],
            [
                "2 2\r\n16927 73456\r\n",
                "124237\r\n4 3 "
            ],
            [
                "6 6\r\n21673 27126 94712 82700 59725 46310\r\n",
                "1616325\r\n12 11 7 8 9 10 "
            ],
            [
                "10 6\r\n2226 89307 11261 28772 23196 30298 10832 43119 74662 24028\r\n",
                "1246672\r\n16 7 14 11 13 10 15 8 9 12 "
            ],
            [
                "9 7\r\n6972 18785 36323 7549 27884 14286 20795 80005 67805\r\n",
                "1034082\r\n16 13 10 15 11 14 12 8 9 "
            ],
            [
                "3 1\r\n20230 80967 85577\r\n",
                "60690\r\n4 2 3 "
            ],
            [
                "7 1\r\n783 77740 34830 89295 96042 14966 21810\r\n",
                "5481\r\n8 2 3 4 5 6 7 "
            ],
            [
                "7 3\r\n94944 94750 49432 83079 89532 78359 91885\r\n",
                "1572031\r\n4 5 10 8 6 9 7 "
            ]
        ]
    }
]