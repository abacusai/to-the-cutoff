[
    {
        "name": "New Year and Domino",
        "description": "They say \"years are like dominoes, tumbling one after the other\". But would a\nyear fit into a grid? I don't think so. Limak is a little polar bear who loves\nto play. He has recently got a rectangular grid with h rows and w columns.\nEach cell is a square, either empty (denoted by '.') or forbidden (denoted by\n'#'). Rows are numbered 1 through h from top to bottom. Columns are numbered 1\nthrough w from left to right. Also, Limak has a single domino. He wants to put\nit somewhere in a grid. A domino will occupy exactly two adjacent cells,\nlocated either in one row or in one column. Both adjacent cells must be empty\nand must be inside a grid. Limak needs more fun and thus he is going to\nconsider some queries. In each query he chooses some rectangle and wonders,\nhow many way are there to put a single domino inside of the chosen rectangle?\nInput The first line of the input contains two integers h and w (1 \u2264 h, w \u2264\n500) \u2013 the number of rows and the number of columns, respectively. The next h\nlines describe a grid. Each line contains a string of the length w. Each\ncharacter is either '.' or '#' \u2014 denoting an empty or forbidden cell,\nrespectively. The next line contains a single integer q (1 \u2264 q \u2264 100 000) \u2014\nthe number of queries. Each of the next q lines contains four integers r1i,\nc1i, r2i, c2i (1 \u2264 r1i \u2264 r2i \u2264 h, 1 \u2264 c1i \u2264 c2i \u2264 w) \u2014 the i-th query. Numbers\nr1i and c1i denote the row and the column (respectively) of the upper left\ncell of the rectangle. Numbers r2i and c2i denote the row and the column\n(respectively) of the bottom right cell of the rectangle. Output Print q\nintegers, i-th should be equal to the number of ways to put a single domino\ninside the i-th rectangle. Examples Input 5 8 ....#..# .#...... ##.#....\n##..#.## ........ 4 1 1 2 3 4 1 4 1 1 2 4 5 2 5 5 8 Output 4 0 10 15 Input 7\n39 .......................................\n.###..###..#..###.....###..###..#..###.\n...#..#.#..#..#.........#..#.#..#..#...\n.###..#.#..#..###.....###..#.#..#..###.\n.#....#.#..#....#.....#....#.#..#..#.#.\n.###..###..#..###.....###..###..#..###.\n....................................... 6 1 1 3 20 2 10 6 30 2 10 7 30 2 2 7 7\n1 7 7 7 1 8 7 8 Output 53 89 120 23 0 2 Note A red frame below corresponds to\nthe first query of the first sample. A domino can be placed in 4 possible\nways.\n\n",
        "cf_contest_id": 611,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "implementation"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 8\r\n....#..#\r\n.#......\r\n##.#....\r\n##..#.##\r\n........\r\n4\r\n1 1 2 3\r\n4 1 4 1\r\n1 2 4 5\r\n2 5 5 8\r\n",
                "4\r\n0\r\n10\r\n15\r\n"
            ],
            [
                "7 39\r\n.......................................\r\n.###..###..#..###.....###..###..#..###.\r\n...#..#.#..#..#.........#..#.#..#..#...\r\n.###..#.#..#..###.....###..#.#..#..###.\r\n.#....#.#..#....#.....#....#.#..#..#.#.\r\n.###..###..#..###.....###..###..#..###.\r\n.......................................\r\n6\r\n1 1 3 20\r\n2 10 6 30\r\n2 10 7 30\r\n2 2 7 7\r\n1 7 7 7\r\n1 8 7 8\r\n",
                "53\r\n89\r\n120\r\n23\r\n0\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n.\r\n1\r\n1 1 1 1\r\n",
                "0\r\n"
            ],
            [
                "1 1\r\n#\r\n1\r\n1 1 1 1\r\n",
                "0\r\n"
            ]
        ]
    }
]