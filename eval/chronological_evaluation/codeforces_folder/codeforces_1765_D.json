[
    {
        "name": "Watch the Videos",
        "description": "Monocarp wants to watch \n    n\n videos. Each video is only one minute long,\nbut its size may be arbitrary. The \n    i\n-th video has the size \n    a_i\n\nmegabytes. All videos are published on the Internet. A video should be\ndownloaded before it can be watched. Monocarp has poor Internet connection \u2014\nit takes exactly \n    1\n minute to download \n    1\n megabyte of data, so it\nwill require \n    a_i\n minutes to download the \n    i\n-th video. Monocarp's\ncomputer has a hard disk of \n    m\n megabytes. The disk is used to store the\ndownloaded videos. Once Monocarp starts the download of a video of size\n\n    s\n, the \n    s\n megabytes are immediately reserved on a hard disk. If\nthere are less than \n    s\n megabytes left, the download cannot be started\nuntil the required space is freed. Each single video can be stored on the hard\ndisk, since \n    a_i \n    \u2264 m\n for all \n    i\n. Once the download is started,\nit cannot be interrupted. It is not allowed to run two or more downloads in\nparallel. Once a video is fully downloaded to the hard disk, Monocarp can\nwatch it. Watching each video takes exactly \n    1\n minute and does not occupy\nthe Internet connection, so Monocarp can start downloading another video while\nwatching the current one. When Monocarp finishes watching a video, he doesn't\nneed it on the hard disk anymore, so he can delete the video, instantly\nfreeing the space it occupied on a hard disk. Deleting a video takes\nnegligible time. Monocarp wants to watch all \n    n\n videos as quickly as\npossible. The order of watching does not matter, since Monocarp needs to watch\nall of them anyway. Please calculate the minimum possible time required for\nthat. Input The first line contains two integers \n    n\n and \n    m\n (\n    1\n    \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n; \n    1 \n    \u2264 m \n    \u2264 10^9\n) \u2014 the number of\nvideos Monocarp wants to watch and the size of the hard disk, respectively.\nThe second line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1\n    \n    \u2264 a_i \n    \u2264 m\n) \u2014 the sizes of the videos. Output Print one integer \u2014\nthe minimum time required to watch all \n    n\n videos. Examples Input 5 6 1 2\n3 4 5 Output 16 Input 5 5 1 2 3 4 5 Output 17 Input 4 3 1 3 2 3 Output 12\n\n",
        "cf_contest_id": 1765,
        "cf_index": "D",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "constructive algorithms",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5 6\r\n1 2 3 4 5\r\n",
                "16\r\n"
            ],
            [
                "5 5\r\n1 2 3 4 5\r\n",
                "17\r\n"
            ],
            [
                "4 3\r\n1 3 2 3\r\n",
                "12\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 1000000000\r\n500000000 500000000 500000000 500000000 500000000\r\n",
                "2500000001\r\n"
            ],
            [
                "5 999999999\r\n500000000 500000000 500000000 500000000 500000000\r\n",
                "2500000005\r\n"
            ],
            [
                "6 1000000000\r\n999999995 999999996 999999997 999999998 999999999 1000000000\r\n",
                "5999999991\r\n"
            ],
            [
                "1 294\r\n132\r\n",
                "133\r\n"
            ],
            [
                "1 1\r\n1\r\n",
                "2\r\n"
            ],
            [
                "2 15\r\n14 1\r\n",
                "16\r\n"
            ],
            [
                "2 15\r\n14 2\r\n",
                "18\r\n"
            ],
            [
                "4 100\r\n11 3 3 6\r\n",
                "24\r\n"
            ],
            [
                "10 3\r\n3 1 1 2 2 3 3 2 1 1\r\n",
                "23\r\n"
            ],
            [
                "10 10\r\n2 3 2 6 8 6 6 8 8 7\r\n",
                "60\r\n"
            ],
            [
                "10 100\r\n100 100 99 20 23 22 75 80 77 77\r\n",
                "677\r\n"
            ]
        ]
    }
]