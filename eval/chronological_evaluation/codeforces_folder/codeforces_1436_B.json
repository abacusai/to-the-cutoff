[
    {
        "name": "Prime Square",
        "description": "Sasha likes investigating different math objects, for example, magic squares.\nBut Sasha understands that magic squares have already been studied by hundreds\nof people, so he sees no sense of studying them further. Instead, he invented\nhis own type of square \u2014 a prime square. A square of size \n    n \n    \u00d7 n\n\nis called prime if the following three conditions are held simultaneously: all\nnumbers on the square are non-negative integers not exceeding \n    10^5\n;\nthere are no prime numbers in the square; sums of integers in each row and\neach column are prime numbers. Sasha has an integer \n    n\n. He asks you to\nfind any prime square of size \n    n \n    \u00d7 n\n. Sasha is absolutely sure\nsuch squares exist, so just help him! Input The first line contains a single\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10\n) \u2014 the number of test cases. Each of\nthe next \n    t\n lines contains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264\n    100\n) \u2014 the required size of a square. Output For each test case print\n\n    n\n lines, each containing \n    n\n integers \u2014 the prime square you built.\nIf there are multiple answers, print any. Example Input 2 4 2 Output 4 6 8 1 4\n9 9 9 4 10 10 65 1 4 4 4 1 1 1 1\n\n",
        "cf_contest_id": 1436,
        "cf_index": "B",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "math"
        ],
        "time_limit_seconds": 1.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n4\r\n2\r\n",
                "1 1 0 0\r\n1 0 0 1\r\n0 0 1 1\r\n0 1 1 0\r\n1 1\r\n1 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n2\r\n3\r\n3\r\n2\r\n2\r\n3\r\n2\r\n3\r\n2\r\n3\r\n",
                "1 1\r\n1 1\r\n1 1 0\r\n1 0 1\r\n0 1 1\r\n1 1 0\r\n1 0 1\r\n0 1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1 0\r\n1 0 1\r\n0 1 1\r\n1 1\r\n1 1\r\n1 1 0\r\n1 0 1\r\n0 1 1\r\n1 1\r\n1 1\r\n1 1 0\r\n1 0 1\r\n0 1 1\r\n"
            ],
            [
                "1\r\n13\r\n",
                "1 1 0 0 0 0 0 0 0 0 0 0 0\r\n1 0 0 0 0 0 0 0 0 0 0 0 1\r\n0 0 0 0 0 0 0 0 0 0 0 1 1\r\n0 0 0 0 0 0 0 0 0 0 1 1 0\r\n0 0 0 0 0 0 0 0 0 1 1 0 0\r\n0 0 0 0 0 0 0 0 1 1 0 0 0\r\n0 0 0 0 0 0 0 1 1 0 0 0 0\r\n0 0 0 0 0 0 1 1 0 0 0 0 0\r\n0 0 0 0 0 1 1 0 0 0 0 0 0\r\n0 0 0 0 1 1 0 0 0 0 0 0 0\r\n0 0 0 1 1 0 0 0 0 0 0 0 0\r\n0 0 1 1 0 0 0 0 0 0 0 0 0\r\n0 1 1 0 0 0 0 0 0 0 0 0 0\r\n"
            ],
            [
                "1\r\n15\r\n",
                "1 1 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 1\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 1 1\r\n0 0 0 0 0 0 0 0 0 0 0 0 1 1 0\r\n0 0 0 0 0 0 0 0 0 0 0 1 1 0 0\r\n0 0 0 0 0 0 0 0 0 0 1 1 0 0 0\r\n0 0 0 0 0 0 0 0 0 1 1 0 0 0 0\r\n0 0 0 0 0 0 0 0 1 1 0 0 0 0 0\r\n0 0 0 0 0 0 0 1 1 0 0 0 0 0 0\r\n0 0 0 0 0 0 1 1 0 0 0 0 0 0 0\r\n0 0 0 0 0 1 1 0 0 0 0 0 0 0 0\r\n0 0 0 0 1 1 0 0 0 0 0 0 0 0 0\r\n0 0 0 1 1 0 0 0 0 0 0 0 0 0 0\r\n0 0 1 1 0 0 0 0 0 0 0 0 0 0 0\r\n0 1 1 0 0 0 0 0 0 0 0 0 0 0 0\r\n"
            ]
        ]
    }
]