[
    {
        "name": "Journey",
        "description": "The territory of Berland is represented by a rectangular field n \u00d7 m in size.\nThe king of Berland lives in the capital, located on the upper left square (1,\n1). The lower right square has coordinates (n, m). One day the king decided to\ntravel through the whole country and return back to the capital, having\nvisited every square (except the capital) exactly one time. The king must\nvisit the capital exactly two times, at the very beginning and at the very end\nof his journey. The king can only move to the side-neighboring squares.\nHowever, the royal advise said that the King possibly will not be able to do\nit. But there is a way out \u2014 one can build the system of one way teleporters\nbetween some squares so that the king could fulfill his plan. No more than one\nteleporter can be installed on one square, every teleporter can be used any\nnumber of times, however every time it is used, it transports to the same\ngiven for any single teleporter square. When the king reaches a square with an\ninstalled teleporter he chooses himself whether he is or is not going to use\nthe teleport. What minimum number of teleporters should be installed for the\nking to complete the journey? You should also compose the journey path route\nfor the king. Input The first line contains two space-separated integers n and\nm (1 \u2264 n, m \u2264 100, 2 \u2264 n \u00b7 m) \u2014 the field size. The upper left square has\ncoordinates (1, 1), and the lower right square has coordinates of (n, m).\nOutput On the first line output integer k \u2014 the minimum number of teleporters.\nThen output k lines each containing 4 integers x1 y1 x2 y2 (1 \u2264 x1, x2 \u2264 n, 1\n\u2264 y1, y2 \u2264 m) \u2014 the coordinates of the square where the teleporter is\ninstalled (x1, y1), and the coordinates of the square where the teleporter\nleads (x2, y2). Then print nm + 1 lines containing 2 numbers each \u2014 the\ncoordinates of the squares in the order in which they are visited by the king.\nThe travel path must start and end at (1, 1). The king can move to side-\nneighboring squares and to the squares where a teleporter leads. Besides, he\nalso should visit the capital exactly two times and he should visit other\nsquares exactly one time. Examples Input 2 2 Output 0 1 1 1 2 2 2 2 1 1 1\nInput 3 3 Output 1 3 3 1 1 1 1 1 2 1 3 2 3 2 2 2 1 3 1 3 2 3 3 1 1\n\n",
        "cf_contest_id": 43,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 2\r\n",
                "0\n1 1\n1 2\n2 2\n2 1\n1 1\n"
            ],
            [
                "3 3\r\n",
                "1\n3 3 1 3\n1 1\n2 1\n3 1\n3 2\n2 2\n2 3\n3 3\n1 3\n1 2\n1 1\n"
            ]
        ],
        "private_cases": [
            [
                "3 2\r\n",
                "0\n1 1\n2 1\n3 1\n3 2\n2 2\n1 2\n1 1\n"
            ],
            [
                "2 3\r\n",
                "0\n1 1\n1 2\n1 3\n2 3\n2 2\n2 1\n1 1\n"
            ],
            [
                "3 4\r\n",
                "0\n1 1\n2 1\n3 1\n3 2\n2 2\n2 3\n3 3\n3 4\n2 4\n1 4\n1 3\n1 2\n1 1\n"
            ],
            [
                "6 3\r\n",
                "0\n1 1\n1 2\n1 3\n2 3\n2 2\n3 2\n3 3\n4 3\n4 2\n5 2\n5 3\n6 3\n6 2\n6 1\n5 1\n4 1\n3 1\n2 1\n1 1\n"
            ],
            [
                "4 3\r\n",
                "0\n1 1\n1 2\n1 3\n2 3\n2 2\n3 2\n3 3\n4 3\n4 2\n4 1\n3 1\n2 1\n1 1\n"
            ],
            [
                "1 2\r\n",
                "0\n1 1\n1 2\n1 1\n"
            ],
            [
                "1 3\r\n",
                "1\n1 3 1 1\n1 1\n1 2\n1 3\n1 1\n"
            ],
            [
                "2 1\r\n",
                "0\n1 1\n2 1\n1 1\n"
            ],
            [
                "3 1\r\n",
                "1\n3 1 1 1\n1 1\n2 1\n3 1\n1 1\n"
            ],
            [
                "2 4\r\n",
                "0\n1 1\n1 2\n1 3\n1 4\n2 4\n2 3\n2 2\n2 1\n1 1\n"
            ],
            [
                "4 2\r\n",
                "0\n1 1\n1 2\n2 2\n3 2\n4 2\n4 1\n3 1\n2 1\n1 1\n"
            ],
            [
                "36 1\r\n",
                "1\n36 1 1 1\n1 1\n2 1\n3 1\n4 1\n5 1\n6 1\n7 1\n8 1\n9 1\n10 1\n11 1\n12 1\n13 1\n14 1\n15 1\n16 1\n17 1\n18 1\n19 1\n20 1\n21 1\n22 1\n23 1\n24 1\n25 1\n26 1\n27 1\n28 1\n29 1\n30 1\n31 1\n32 1\n33 1\n34 1\n35 1\n36 1\n1 1\n"
            ]
        ]
    }
]