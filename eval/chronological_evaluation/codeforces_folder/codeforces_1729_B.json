[
    {
        "name": "Decode String",
        "description": "Polycarp has a string \n    s\n consisting of lowercase Latin letters. He\nencodes it using the following algorithm. He goes through the letters of the\nstring \n    s\n from left to right and for each letter Polycarp considers its\nnumber in the alphabet: if the letter number is single-digit number (less than\n\n    10\n), then just writes it out; if the letter number is a two-digit number\n(greater than or equal to \n    10\n), then it writes it out and adds the number\n0 after. For example, if the string \n    s\n is code, then Polycarp will encode\nthis string as follows: 'c' \u2014 is the \n    3\n-rd letter of the alphabet.\nConsequently, Polycarp adds 3 to the code (the code becomes equal to 3); 'o' \u2014\nis the \n    15\n-th letter of the alphabet. Consequently, Polycarp adds 15 to\nthe code and also 0 (the code becomes 3150); 'd' \u2014 is the \n    4\n-th letter of\nthe alphabet. Consequently, Polycarp adds 4 to the code (the code becomes\n31504); 'e' \u2014 is the \n    5\n-th letter of the alphabet. Therefore, Polycarp\nadds 5 to the code (the code becomes 315045). Thus, code of string code is\n315045. You are given a string \n    t\n resulting from encoding the string\n\n    s\n. Your task is to decode it (get the original string \n    s\n by\n\n    t\n). Input The first line of the input contains an integer \n    q\n (\n    1\n    \n    \u2264 q \n    \u2264 10^4\n) \u2014 the number of test cases in the input. The\ndescriptions of the test cases follow. The first line of description of each\ntest case contains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 50\n) \u2014 the length\nof the given code. The second line of the description of each test case\ncontains a string \n    t\n of length \n    n\n \u2014 the given code. It is guaranteed\nthat there exists such a string of lowercase Latin letters, as a result of\nencoding which the string \n    t\n is obtained. Output For each test case\noutput the required string \n    s\n \u2014 the string that gives string \n    t\n as\nthe result of encoding. It is guaranteed that such a string always exists. It\ncan be shown that such a string is always unique. Example Input 9 6 315045 4\n1100 7 1213121 6 120120 18 315045615018035190 7 1111110 7 1111100 5 11111 4\n2606 Output code aj abacaba ll codeforces aaaak aaaaj aaaaa zf Note The first\ntest case is explained above. In the second test case, the answer is aj.\nIndeed, the number of the letter a is equal to \n    1\n, so 1 will be appended\nto the code. The number of the letter j is \n    10\n, so 100 will be appended\nto the code. The resulting code is 1100. There are no zeros in the third test\ncase, which means that the numbers of all letters are less than \n    10\n and\nare encoded as one digit. The original string is abacaba. In the fourth test\ncase, the string \n    s\n is equal to ll. The letter l has the number \n    12\n\nand is encoded as 120. So ll is indeed 120120.\n\n",
        "cf_contest_id": 1729,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "9\r\n6\r\n315045\r\n4\r\n1100\r\n7\r\n1213121\r\n6\r\n120120\r\n18\r\n315045615018035190\r\n7\r\n1111110\r\n7\r\n1111100\r\n5\r\n11111\r\n4\r\n2606\r\n",
                "code\r\naj\r\nabacaba\r\nll\r\ncodeforces\r\naaaak\r\naaaaj\r\naaaaa\r\nzf\r\n"
            ]
        ],
        "private_cases": [
            [
                "31\r\n6\r\n315045\r\n4\r\n1100\r\n7\r\n1213121\r\n6\r\n120120\r\n18\r\n315045615018035190\r\n7\r\n1111110\r\n7\r\n1111100\r\n5\r\n11111\r\n4\r\n2606\r\n6\r\n315045\r\n4\r\n1100\r\n7\r\n1213121\r\n6\r\n120120\r\n18\r\n315045615018035190\r\n7\r\n1111110\r\n7\r\n1111100\r\n5\r\n11111\r\n4\r\n2606\r\n6\r\n315045\r\n4\r\n1100\r\n7\r\n1213121\r\n6\r\n120120\r\n18\r\n315045615018035190\r\n7\r\n1111110\r\n7\r\n1111100\r\n5\r\n11111\r\n4\r\n2606\r\n3\r\n134\r\n5\r\n87465\r\n2\r\n34\r\n3\r\n100\r\n",
                "code\r\naj\r\nabacaba\r\nll\r\ncodeforces\r\naaaak\r\naaaaj\r\naaaaa\r\nzf\r\ncode\r\naj\r\nabacaba\r\nll\r\ncodeforces\r\naaaak\r\naaaaj\r\naaaaa\r\nzf\r\ncode\r\naj\r\nabacaba\r\nll\r\ncodeforces\r\naaaak\r\naaaaj\r\naaaaa\r\nzf\r\nacd\r\nhgdfe\r\ncd\r\nj\r\n"
            ],
            [
                "1\r\n10\r\n1111111111\r\n",
                "aaaaaaaaaa\r\n"
            ]
        ]
    }
]