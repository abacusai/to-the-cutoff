[
    {
        "name": "Restore the Permutation by Sorted Segments",
        "description": "We guessed a permutation \n    p\n consisting of \n    n\n integers. The\npermutation of length \n    n\n is the array of length \n    n\n where each\nelement from \n    1\n to \n    n\n appears exactly once. This permutation is a\nsecret for you. For each position \n    r\n from \n    2\n to \n    n\n we chose\nsome other index \n    l\n (\n    l < r\n) and gave you the segment \n    p_l, p_l +\n    1, \n    \u2026, p_r\n in sorted order (i.e. we rearranged the elements of this\nsegment in a way that the elements of this segment are sorted). Thus, you are\ngiven exactly \n    n-1\n segments of the initial permutation but elements\ninside each segment are sorted. The segments are given to you in random order.\nFor example, if the secret permutation is \n    p=[3, 1, 4, 6, 2, 5]\n then the\npossible given set of segments can be: \n    [2, 5, 6]\n \n    [4, 6]\n \n    [1, 3,\n    4]\n \n    [1, 3]\n \n    [1, 2, 4, 6]\n Your task is to find any suitable\npermutation (i.e. any permutation corresponding to the given input data). It\nis guaranteed that the input data corresponds to some permutation (i.e. such\npermutation exists). You have to answer \n    t\n independent test cases. Input\nThe first line of the input contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    100\n) \u2014 the number of test cases. Then \n    t\n test cases follow. The first\nline of the test case contains one integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 200\n)\n\u2014 the length of the permutation. The next \n    n-1\n lines describe given\nsegments. The \n    i\n-th line contains the description of the \n    i\n-th\nsegment. The line starts with the integer \n    k_i\n (\n    2 \n    \u2264 k_i \n    \u2264\n    n\n) \u2014 the length of the \n    i\n-th segment. Then \n    k_i\n integers follow.\nAll integers in a line are distinct, sorted in ascending order, between\n\n    1\n and \n    n\n, inclusive. It is guaranteed that the required \n    p\n\nexists for each test case. It is also guaranteed that the sum of \n    n\n over\nall test cases does not exceed \n    200\n (\n    \u2211 n \n    \u2264 200\n). Output\nFor each test case, print the answer: \n    n\n integers \n    p_1, p_2, \n    \u2026,\n    p_n\n (\n    1 \n    \u2264 p_i \n    \u2264 n\n, all \n    p_i\n should be distinct) \u2014 any\nsuitable permutation (i.e. any permutation corresponding to the test case\ninput). Example Input 5 6 3 2 5 6 2 4 6 3 1 3 4 2 1 3 4 1 2 4 6 5 2 2 3 2 1 2\n2 1 4 2 4 5 7 3 1 2 6 4 1 3 5 6 2 1 2 3 4 5 7 6 1 2 3 4 5 6 3 1 3 6 2 2 1 2 5\n2 2 5 3 2 3 5 4 2 3 4 5 5 1 2 3 4 5 Output 3 1 4 6 2 5 3 2 1 4 5 2 1 6 3 5 4 7\n1 2 2 5 3 4 1\n\n",
        "cf_contest_id": 1343,
        "cf_index": "F",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "data structures",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n6\r\n3 2 5 6\r\n2 4 6\r\n3 1 3 4\r\n2 1 3\r\n4 1 2 4 6\r\n5\r\n2 2 3\r\n2 1 2\r\n2 1 4\r\n2 4 5\r\n7\r\n3 1 2 6\r\n4 1 3 5 6\r\n2 1 2\r\n3 4 5 7\r\n6 1 2 3 4 5 6\r\n3 1 3 6\r\n2\r\n2 1 2\r\n5\r\n2 2 5\r\n3 2 3 5\r\n4 2 3 4 5\r\n5 1 2 3 4 5\r\n",
                "3 1 4 6 2 5\r\n3 2 1 4 5\r\n2 1 6 3 5 4 7\r\n1 2\r\n2 5 3 4 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n6\r\n4 2 3 4 5\r\n2 1 2\r\n2 3 5\r\n2 2 5\r\n6 1 2 3 4 5 6\r\n",
                "1 2 5 3 4 6\r\n"
            ]
        ]
    }
]