[
    {
        "name": "Ski Accidents",
        "description": "Arthur owns a ski resort on a mountain. There are \n    n\n landing spots on the\nmountain numbered from \n    1\n to \n    n\n from the top to the foot of the\nmountain. The spots are connected with one-directional ski tracks. All tracks\ngo towards the foot of the mountain, so there are no directed cycles formed by\nthe tracks. There are at most two tracks leaving each spot, but many tracks\nmay enter the same spot. A skier can start skiing from one spot and stop in\nanother spot if there is a sequence of tracks that lead from the starting spot\nand end in the ending spot. Unfortunately, recently there were many accidents,\nbecause the structure of the resort allows a skier to go through dangerous\npaths, by reaching high speed and endangering himself and the other customers.\nHere, a path is called dangerous, if it consists of at least two tracks.\nArthur wants to secure his customers by closing some of the spots in a way\nthat there are no dangerous paths in the resort. When a spot is closed, all\ntracks entering and leaving that spot become unusable. Formally, after closing\nsome of the spots, there should not be a path that consists of two or more\ntracks. Arthur doesn't want to close too many spots. He will be happy to find\nany way to close at most \n    4/7n\n spots so that the remaining part\nis safe. Help him find any suitable way to do so. Input The first line\ncontains a single positive integer \n    T\n \u2014 the number of test cases. \n    T\n\ntest case description follows. The first line of each description contains two\nintegers \n    n\n and \n    m\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the\nnumber of landing spots and tracks respectively. The following \n    m\n lines\ndescribe the tracks. Each of these lines contains two integers \n    x\n and\n\n    y\n (\n    1 \n    \u2264 x < y \n    \u2264 n\n) \u2014 indices of the starting and\nfinishing spots for the respective track. It is guaranteed that at most two\ntracks start at each spot. There may be tracks in which starting and finishing\nspots both coincide. It is guaranteed that the sum of \n    n\n over all test\ncases does not exceed \n    2 \n    \u00b7 10^5\n. Output For each test case, print a\nsingle integer \n    k\n (\n    0 \n    \u2264 k \n    \u2264\n    4/7n\n) \u2014 the number\nof spots to be closed. In the next line, print \n    k\n distinct integers \u2014\nindices of all spots to be closed, in any order. If there are several answers,\nyou may output any of them. Note that you don't have to minimize \n    k\n. It\ncan be shown that a suitable answer always exists. Example Input 2 4 6 1 2 1 3\n2 3 2 4 3 4 3 4 7 6 1 2 1 3 2 4 2 5 3 6 3 7 Output 2 3 4 4 4 5 6 7 Note In the\nfirst sample case, closing any two spots is suitable. In the second sample\ncase, closing only the spot \n    1\n is also suitable.\n\n",
        "cf_contest_id": 1368,
        "cf_index": "E",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graphs",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "2\r\n4 6\r\n1 2\r\n1 3\r\n2 3\r\n2 4\r\n3 4\r\n3 4\r\n7 6\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n3 7\r\n",
                "2\r\n3 4\r\n4\r\n4 5 6 7\r\n"
            ]
        ],
        "private_cases": []
    }
]