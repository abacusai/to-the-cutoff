[
    {
        "name": "Longest Saw",
        "description": "You are given the sequence \n    a_1, a_2, \n    \u2026, a_n\n. You can choose any\nsubset of elements and then reorder them to create a \"saw\". The sequence\n\n    b_1, b_2, \n    \u2026, b_m\n is called a \"saw\" if the elements satisfy one of\nthe following series of inequalities: \n    b_1>b_2b_4<\n    \u2026\n or\n\n    b_1b_3\n    \u2026\n. Find the longest saw which can be obtained from a given\narray. Note that both the given sequence \n    a\n and the required saw \n    b\n\ncan contain duplicated (non-unique) values. Input The first line contains an\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^5\n) \u2014 the number of test cases in the\ninput. Then the descriptions of the \n    t\n test cases follow. Each test case\nbegins with a line containing integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    2\n    \u00b710^5\n). Then a line containing \n    n\n integers \n    a_1, a_2,\n    \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) follows. It's guaranteed that\n\n    \u2211n\n doesn't exceed \n    2 \n    \u00b7 10^5\n. Output For each test\ncase, print two lines: print the length of the longest saw in the first line,\nand the saw itself in the second line. If there are several solutions, print\nany of them. Example Input 3 10 10 9 8 7 6 5 4 3 2 1 7 1 2 2 2 3 2 2 3 100 100\n100 Output 10 1 6 2 7 3 8 4 9 5 10 4 2 1 3 2 1 100\n\n",
        "cf_contest_id": 1170,
        "cf_index": "H",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "constructive algorithms"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n10\r\n10 9 8 7 6 5 4 3 2 1\r\n7\r\n1 2 2 2 3 2 2\r\n3\r\n100 100 100\r\n",
                "10\r\n6 1 7 2 8 3 9 4 10 5\r\n4\r\n2 1 3 2\r\n1\r\n100\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n2\r\n1 1\r\n2\r\n2 1\r\n1\r\n2\r\n1\r\n1\r\n1\r\n1\r\n1\r\n2\r\n2\r\n2 1\r\n2\r\n1 2\r\n1\r\n1\r\n1\r\n2\r\n",
                "1\r\n1\r\n2\r\n2 1\r\n1\r\n2\r\n1\r\n1\r\n1\r\n1\r\n1\r\n2\r\n2\r\n2 1\r\n2\r\n2 1\r\n1\r\n1\r\n1\r\n2\r\n"
            ],
            [
                "7\r\n1\r\n1000000000\r\n2\r\n1000000000 1000000000\r\n2\r\n1 1000000000\r\n2\r\n1000000000 1\r\n3\r\n1000000000 1000000000 1000000000\r\n3\r\n1000000000 1000000000 1\r\n3\r\n1000000000 1 1\r\n",
                "1\r\n1000000000\r\n1\r\n1000000000\r\n2\r\n1000000000 1\r\n2\r\n1000000000 1\r\n1\r\n1000000000\r\n3\r\n1000000000 1 1000000000\r\n3\r\n1 1000000000 1\r\n"
            ]
        ]
    }
]