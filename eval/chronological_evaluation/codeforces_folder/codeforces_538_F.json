[
    {
        "name": "A Heap of Heaps",
        "description": "Andrew skipped lessons on the subject 'Algorithms and Data Structures' for the\nentire term. When he came to the final test, the teacher decided to give him a\ndifficult task as a punishment. The teacher gave Andrew an array of n numbers\na1, ..., an. After that he asked Andrew for each k from 1 to n - 1 to build a\nk-ary heap on the array and count the number of elements for which the\nproperty of the minimum-rooted heap is violated, i.e. the value of an element\nis less than the value of its parent. Andrew looked up on the Wikipedia that a\nk-ary heap is a rooted tree with vertices in elements of the array. If the\nelements of the array are indexed from 1 to n, then the children of element v\nare elements with indices k(v - 1) + 2, ..., kv + 1 (if some of these elements\nlie outside the borders of the array, the corresponding children are absent).\nIn any k-ary heap every element except for the first one has exactly one\nparent; for the element 1 the parent is absent (this element is the root of\nthe heap). Denote p(v) as the number of the parent of the element with the\nnumber v. Let's say that for a non-root element v the property of the heap is\nviolated if av < ap(v). Help Andrew cope with the task! Input The first line\ncontains a single integer n (2 \u2264 n \u2264 2\u00b710^5). The second line contains n\nspace-separated integers a1, ..., an ( - 10^9 \u2264 ai \u2264 10^9). Output in a single\nline print n - 1 integers, separate the consecutive numbers with a single\nspace \u2014 the number of elements for which the property of the k-ary heap is\nviolated, for k = 1, 2, ..., n - 1. Examples Input 5 1 5 4 3 2 Output 3 2 1 0\nInput 6 2 2 2 2 2 2 Output 0 0 0 0 0 Note Pictures with the heaps for the\nfirst sample are given below; elements for which the property of the heap is\nviolated are marked with red. In the second sample all elements are equal, so\nthe property holds for all pairs.\n\n",
        "cf_contest_id": 538,
        "cf_index": "F",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5\r\n1 5 4 3 2\r\n",
                "3 2 1 0 "
            ],
            [
                "6\r\n2 2 2 2 2 2\r\n",
                "0 0 0 0 0 "
            ]
        ],
        "private_cases": [
            [
                "2\r\n0 0\r\n",
                "0 "
            ],
            [
                "2\r\n1 2\r\n",
                "0 "
            ],
            [
                "2\r\n10 -1\r\n",
                "1 "
            ],
            [
                "5\r\n934 235 171 111 197\r\n",
                "3 4 4 4 "
            ],
            [
                "100\r\n0 1 1 1 0 0 0 2 1 2 2 1 2 2 2 0 0 2 1 2 0 1 1 0 2 0 1 2 2 0 2 0 1 0 1 2 0 2 1 1 0 1 0 1 0 0 1 2 2 2 2 1 1 1 0 2 1 0 0 0 0 0 1 0 2 0 1 0 0 2 0 2 2 1 0 2 2 0 2 0 2 1 2 1 1 1 0 2 1 0 2 1 1 2 1 2 0 1 2 2\r\n",
                "36 29 38 33 35 33 34 31 28 21 21 21 17 14 17 18 21 22 23 24 24 25 25 26 25 25 25 25 24 24 23 23 22 22 22 21 21 21 21 20 20 19 19 18 17 17 17 17 17 17 17 17 17 16 16 16 15 14 13 12 11 11 10 10 9 9 8 7 7 6 6 6 6 5 5 5 4 4 3 3 3 3 3 3 3 2 2 2 1 1 1 1 1 1 1 0 0 0 0 "
            ],
            [
                "2\r\n-492673762 -496405053\r\n",
                "1 "
            ],
            [
                "100\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n",
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
            ]
        ]
    }
]