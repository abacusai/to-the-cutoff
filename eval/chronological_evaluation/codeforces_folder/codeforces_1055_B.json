[
    {
        "name": "Alice and Hairdresser",
        "description": "Alice's hair is growing by leaps and bounds. Maybe the cause of it is the\nexcess of vitamins, or maybe it is some black magic... To prevent this, Alice\ndecided to go to the hairdresser. She wants for her hair length to be at most\n\n    l\n centimeters after haircut, where \n    l\n is her favorite number.\nSuppose, that the Alice's head is a straight line on which \n    n\n hairlines\ngrow. Let's number them from \n    1\n to \n    n\n. With one swing of the\nscissors the hairdresser can shorten all hairlines on any segment to the\nlength \n    l\n, given that all hairlines on that segment had length strictly\ngreater than \n    l\n. The hairdresser wants to complete his job as fast as\npossible, so he will make the least possible number of swings of scissors,\nsince each swing of scissors takes one second. Alice hasn't decided yet when\nshe would go to the hairdresser, so she asked you to calculate how much time\nthe haircut would take depending on the time she would go to the hairdresser.\nIn particular, you need to process queries of two types: \n    0\n \u2014 Alice asks\nhow much time the haircut would take if she would go to the hairdresser now.\n\n    1\n \n    p\n \n    d\n \u2014 \n    p\n-th hairline grows by \n    d\n centimeters.\nNote, that in the request \n    0\n Alice is interested in hypothetical scenario\nof taking a haircut now, so no hairlines change their length. Input The first\nline contains three integers \n    n\n, \n    m\n and \n    l\n (\n    1 \n    \u2264 n, m\n    \n    \u2264 100\n     000\n, \n    1 \n    \u2264 l \n    \u2264 10^9\n) \u2014 the number of hairlines,\nthe number of requests and the favorite number of Alice. The second line\ncontains \n    n\n integers \n    a_i\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the\ninitial lengths of all hairlines of Alice. Each of the following \n    m\n lines\ncontains a request in the format described in the statement. The request\ndescription starts with an integer \n    t_i\n. If \n    t_i = 0\n, then you need\nto find the time the haircut would take. Otherwise, \n    t_i = 1\n and in this\nmoment one hairline grows. The rest of the line than contains two more\nintegers: \n    p_i\n and \n    d_i\n (\n    1 \n    \u2264 p_i \n    \u2264 n\n, \n    1 \n    \u2264 d_i\n    \n    \u2264 10^9\n) \u2014 the number of the hairline and the length it grows by. Output\nFor each query of type \n    0\n print the time the haircut would take. Example\nInput 4 7 3 1 2 3 4 0 1 2 3 0 1 1 3 0 1 3 1 0 Output 1 2 2 1 Note Consider the\nfirst example: Initially lengths of hairlines are equal to \n    1, 2, 3, 4\n\nand only \n    4\n-th hairline is longer \n    l=3\n, and hairdresser can cut it\nin \n    1\n second. Then Alice's second hairline grows, the lengths of\nhairlines are now equal to \n    1, 5, 3, 4\n Now haircut takes two seonds: two\nswings are required: for the \n    4\n-th hairline and for the \n    2\n-nd. Then\nAlice's first hairline grows, the lengths of hairlines are now equal to \n    4,\n    5, 3, 4\n The haircut still takes two seconds: with one swing hairdresser can\ncut \n    4\n-th hairline and with one more swing cut the segment from\n\n    1\n-st to \n    2\n-nd hairline. Then Alice's third hairline grows, the\nlengths of hairlines are now equal to \n    4, 5, 4, 4\n Now haircut takes only\none second: with one swing it is possible to cut the segment from \n    1\n-st\nhairline to the \n    4\n-th.\n\n",
        "cf_contest_id": 1055,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "dsu",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 7 3\r\n1 2 3 4\r\n0\r\n1 2 3\r\n0\r\n1 1 3\r\n0\r\n1 3 1\r\n0\r\n",
                "1\r\n2\r\n2\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 3 1\r\n1\r\n0\r\n1 1 1\r\n0\r\n",
                "0\r\n1\r\n"
            ],
            [
                "10 15 10\r\n12 6 4 7 5 11 15 9 20 10\r\n0\r\n1 4 3\r\n0\r\n1 4 1\r\n0\r\n1 10 2\r\n0\r\n1 8 2\r\n0\r\n1 3 9\r\n0\r\n1 2 10\r\n0\r\n1 5 2\r\n0\r\n",
                "3\r\n3\r\n4\r\n4\r\n3\r\n3\r\n2\r\n2\r\n"
            ],
            [
                "10 1 5\r\n6 7 2 5 3 8 10 5 6 1\r\n0\r\n",
                "3\r\n"
            ],
            [
                "10 24 2\r\n1 1 1 1 1 1 1 1 1 1\r\n0\r\n1 1 1\r\n0\r\n1 1 1\r\n0\r\n1 3 2\r\n1 5 2\r\n1 7 2\r\n1 9 2\r\n0\r\n1 10 1\r\n0\r\n1 10 1\r\n0\r\n1 10 1\r\n0\r\n1 1 1\r\n0\r\n1 2 2\r\n1 4 2\r\n0\r\n1 6 2\r\n1 8 2\r\n0\r\n",
                "0\r\n0\r\n1\r\n5\r\n5\r\n5\r\n5\r\n5\r\n3\r\n1\r\n"
            ],
            [
                "10 30 2\r\n1 1 1 1 1 1 1 1 1 1\r\n0\r\n1 1 1\r\n1 10 1\r\n0\r\n1 1 1\r\n1 10 1\r\n0\r\n1 2 2\r\n0\r\n1 9 2\r\n0\r\n1 2 2\r\n1 9 2\r\n0\r\n1 3 2\r\n1 8 2\r\n0\r\n1 4 2\r\n1 7 2\r\n0\r\n1 5 1\r\n1 6 1\r\n1 5 1\r\n0\r\n1 6 1\r\n0\r\n1 10 2\r\n0\r\n1 1 1\r\n0\r\n",
                "0\r\n0\r\n2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "4 20 1000000000\r\n1000000000 1000000000 1000000000 1000000000\r\n1 1 1\r\n1 4 1\r\n0\r\n1 1 1000000000\r\n1 4 1000000000\r\n0\r\n1 1 1000000000\r\n1 4 1000000000\r\n1 1 1000000000\r\n1 4 1000000000\r\n1 1 1000000000\r\n1 4 1000000000\r\n1 1 1000000000\r\n1 4 1000000000\r\n0\r\n1 2 1\r\n0\r\n1 3 1\r\n0\r\n1 2 1\r\n",
                "2\r\n2\r\n2\r\n2\r\n1\r\n"
            ],
            [
                "3 1 3\r\n7 7 7\r\n0\r\n",
                "1\r\n"
            ],
            [
                "2 2 100\r\n50 150\r\n1 1 100\r\n0\r\n",
                "1\r\n"
            ]
        ]
    }
]