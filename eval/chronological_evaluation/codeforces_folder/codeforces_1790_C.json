[
    {
        "name": "Premutation",
        "description": "A sequence of \n    n\n numbers is called permutation if it contains all\nintegers from \n    1\n to \n    n\n exactly once. For example, the sequences\n[\n    3, 1, 4, 2\n], [\n    1\n] and [\n    2,1\n] are permutations, but\n[\n    1,2,1\n], [\n    0,1\n] and [\n    1,3,4\n] \u2014 are not. Kristina had a\npermutation \n    p\n of \n    n\n elements. She wrote it on the whiteboard\n\n    n\n times in such a way that: while writing the permutation at the\n\n    i\n-th (\n    1 \n    \u2264 i \n    \u2264 n)\n time she skipped the element \n    p_i\n\nSo, she wrote in total \n    n\n sequences of length \n    n-1\n each.For example,\nsuppose Kristina had a permutation \n    p\n = \n    [4,2,1,3]\n of length\n\n    4\n. Then she did the following: Wrote the sequence \n    [2, 1, 3]\n,\nskipping the element \n    p_1=4\n from the original permutation. Wrote the\nsequence \n    [4, 1, 3]\n, skipping the element \n    p_2=2\n from the original\npermutation. Wrote the sequence \n    [4, 2, 3]\n, skipping the element\n\n    p_3=1\n from the original permutation. Wrote the sequence \n    [4, 2, 1]\n,\nskipping the element \n    p_4=3\n from the original permutation. You know all\n\n    n\n of sequences that have been written on the whiteboard, but you do not\nknow the order in which they were written. They are given in arbitrary order.\nReconstruct the original permutation from them. For example, if you know the\nsequences \n    [4, 2, 1]\n, \n    [4, 2, 3]\n, \n    [2, 1, 3]\n, \n    [4, 1, 3]\n,\nthen the original permutation will be \n    p\n = \n    [4, 2, 1, 3]\n. Input The\nfirst line of input data contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    10^4\n) \u2014 the number of test cases. The description of the test cases\nfollows. The first line of each test case contains one integer \n    n\n (\n    3\n    \n    \u2264 n \n    \u2264 100\n). This is followed by \n    n\n lines, each containing\nexactly \n    n-1\n integers and describing one of the sequences written out on\nthe whiteboard. It is guaranteed that all sequences could be obtained from\nsome permutation \n    p\n, and that the sum \n    n^2\n over all input sets does\nnot exceed \n    2 \n    \u00b7 10^5\n. Output For each test case, output on a\nseparate line a permutation \n    p\n such that the given \n    n\n sequences\ncould be obtained from it. It is guaranteed that the answer exists and it is\nthe only one. In other words, for each test case the required permutation is\nsure to exist. Example Input 5 4 4 2 1 4 2 3 2 1 3 4 1 3 3 2 3 1 3 1 2 5 4 2 1\n3 2 1 3 5 4 2 3 5 4 1 3 5 4 2 1 5 4 2 3 4 1 3 4 1 2 3 1 2 4 3 2 1 1 3 2 3\nOutput 4 2 1 3 1 2 3 4 2 1 3 5 1 2 3 4 2 1 3 Note The first test case is\ndescribed in the problem statement. In the second test case, the sequences are\nwritten in the correct order.\n\n",
        "cf_contest_id": 1790,
        "cf_index": "C",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n4\r\n4 2 1\r\n4 2 3\r\n2 1 3\r\n4 1 3\r\n3\r\n2 3\r\n1 3\r\n1 2\r\n5\r\n4 2 1 3\r\n2 1 3 5\r\n4 2 3 5\r\n4 1 3 5\r\n4 2 1 5\r\n4\r\n2 3 4\r\n1 3 4\r\n1 2 3\r\n1 2 4\r\n3\r\n2 1\r\n1 3\r\n2 3\r\n",
                "4 2 1 3\r\n1 2 3\r\n4 2 1 3 5\r\n1 2 3 4\r\n2 1 3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n4\r\n4 2 1\r\n4 2 3\r\n2 1 3\r\n4 1 3\r\n",
                "4 2 1 3\r\n"
            ]
        ]
    }
]