[
    {
        "name": "Two Hundred Twenty One (easy version)",
        "description": "This is the easy version of the problem. The difference between the versions\nis that the easy version does not require you to output the numbers of the\nrods to be removed. You can make hacks only if all versions of the problem are\nsolved. Stitch likes experimenting with different machines with his friend\nSparky. Today they built another machine. The main element of this machine are\n\n    n\n rods arranged along one straight line and numbered from \n    1\n to\n\n    n\n inclusive. Each of these rods must carry an electric charge\nquantitatively equal to either \n    1\n or \n    -1\n (otherwise the machine will\nnot work). Another condition for this machine to work is that the sign-\nvariable sum of the charge on all rods must be zero. More formally, the rods\ncan be represented as an array of \n    n\n numbers characterizing the charge:\neither \n    1\n or \n    -1\n. Then the condition must hold: \n    a_1 - a_2 + a_3 -\n    a_4 + \n    \u2026 = 0\n, or \n    \u2211\n    _i=1^n (-1)^i-1\n    \u00b7 a_i =\n    0\n. Sparky charged all \n    n\n rods with an electric current, but\nunfortunately it happened that the rods were not charged correctly (the sign-\nvariable sum of the charge is not zero). The friends decided to leave only\nsome of the rods in the machine. Sparky has \n    q\n questions. In the\n\n    i\nth question Sparky asks: if the machine consisted only of rods with\nnumbers \n    l_i\n to \n    r_i\n inclusive, what minimal number of rods could be\nremoved from the machine so that the sign-variable sum of charges on the\nremaining ones would be zero? Perhaps the friends got something wrong, and the\nsign-variable sum is already zero. In that case, you don't have to remove the\nrods at all. If the number of rods is zero, we will assume that the sign-\nvariable sum of charges is zero, that is, we can always remove all rods. Help\nyour friends and answer all of Sparky's questions! Input Each test contains\nmultiple test cases. The first line contains one positive integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 10^3\n), denoting the number of test cases. Description\nof the test cases follows. The first line of each test case contains two\npositive integers \n    n\n and \n    q\n (\n    1 \n    \u2264 n, q \n    \u2264 3 \n    \u00b7\n    10^5\n) \u2014 the number of rods and the number of questions. The second line of\neach test case contains a non-empty string \n    s\n of length \n    n\n, where\nthe charge of the \n    i\n-th rod is \n    1\n if \n    s_i\n is the \"+\" symbol, or\n\n    -1\n if \n    s_i\n is the \"-\" symbol. Each next line from the next \n    q\n\nlines contains two positive integers \n    l_i\n ans \n    r_i\n (\n    1 \n    \u2264 l_i\n    \n    \u2264 r_i \n    \u2264 n\n) \u2014 numbers, describing Sparky's questions. It is\nguaranteed that the sum of \n    n\n over all test cases does not exceed \n    3\n    \n    \u00b7 10^5\n, and the sum of \n    q\n over all test cases does not exceed\n\n    3 \n    \u00b7 10^5\n. Output For each test case, print a single integer \u2014 the\nminimal number of rods that can be removed. Example Input 3 14 1\n+\u2013++\u2014++-++- 1 14 14 3 +\u2013++\u2014+++\u2014 1 14 6 12 3 10 4 10 +-+- 1 1 1 2 1 3 1\n4 2 2 2 3 2 4 3 3 3 4 4 4 Output 2 2 1 0 1 2 1 2 1 2 1 1 2 1 Note In the first\ntest case for the first query you can remove the rods numbered \n    5\n and\n\n    8\n, then the following set of rods will remain: +\u2013+\u2013++-++-. It is easy\nto see that here the sign-variable sum is zero. In the second test case: For\nthe first query, we can remove the rods numbered \n    1\n and \n    11\n, then\nthe following set of rods will remain: \u2013++\u2014++\u2014. It is easy to see that\nhere the sign-variable sum is zero. For the second query we can remove the rod\nnumbered \n    9\n, then the following set of rods will remain: \u2014++-. It is\neasy to see that here the variable sum is zero. For the third query we can not\nremove the rods at all.\n\n",
        "cf_contest_id": 1562,
        "cf_index": "D1",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n14 1\r\n+--++---++-++-\r\n1 14\r\n14 3\r\n+--++---+++---\r\n1 14\r\n6 12\r\n3 10\r\n4 10\r\n+-+-\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n2 2\r\n2 3\r\n2 4\r\n3 3\r\n3 4\r\n4 4\r\n",
                "2\r\n2\r\n1\r\n0\r\n1\r\n2\r\n1\r\n2\r\n1\r\n2\r\n1\r\n1\r\n2\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]