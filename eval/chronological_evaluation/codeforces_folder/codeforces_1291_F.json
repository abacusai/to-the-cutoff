[
    {
        "name": "Coffee Varieties (easy version)",
        "description": "This is the easy version of the problem. You can find the hard version in the\nDiv. 1 contest. Both versions only differ in the number of times you can ask\nyour friend to taste coffee. This is an interactive problem. You're\nconsidering moving to another city, where one of your friends already lives.\nThere are \n    n\n caf\u00e9s in this city, where \n    n\n is a power of two. The\n\n    i\n-th caf\u00e9 produces a single variety of coffee \n    a_i\n. As you're a\ncoffee-lover, before deciding to move or not, you want to know the number\n\n    d\n of distinct varieties of coffees produced in this city. You don't know\nthe values \n    a_1, \n    \u2026, a_n\n. Fortunately, your friend has a memory of\nsize \n    k\n, where \n    k\n is a power of two. Once per day, you can ask him\nto taste a cup of coffee produced by the caf\u00e9 \n    c\n, and he will tell you if\nhe tasted a similar coffee during the last \n    k\n days. You can also ask him\nto take a medication that will reset his memory. He will forget all previous\ncups of coffee tasted. You can reset his memory at most \n    30\n     000\n times.\nMore formally, the memory of your friend is a queue \n    S\n. Doing a query on\ncaf\u00e9 \n    c\n will: Tell you if \n    a_c\n is in \n    S\n; Add \n    a_c\n at the\nback of \n    S\n; If \n    |S| > k\n, pop the front element of \n    S\n. Doing a\nreset request will pop all elements out of \n    S\n. Your friend can taste at\nmost \n    2n^2k\n cups of coffee in total. Find the diversity\n\n    d\n (number of distinct values in the array \n    a\n). Note that asking\nyour friend to reset his memory does not count towards the number of times you\nask your friend to taste a cup of coffee. In some test cases the behavior of\nthe interactor is adaptive. It means that the array \n    a\n may be not fixed\nbefore the start of the interaction and may depend on your queries. It is\nguaranteed that at any moment of the interaction, there is at least one array\n\n    a\n consistent with all the answers given so far. Input The first line\ncontains two integers \n    n\n and \n    k\n (\n    1 \n    \u2264 k \n    \u2264 n \n    \u2264 1024\n,\n\n    k\n and \n    n\n are powers of two). It is guaranteed that\n\n    2n^2k\n    \u2264 20\n     000\n. Interaction You begin the interaction\nby reading \n    n\n and \n    k\n. To ask your friend to taste a cup of coffee\nproduced by the caf\u00e9 \n    c\n, in a separate line output? \n    c\n Where \n    c\n\nmust satisfy \n    1 \n    \u2264 c \n    \u2264 n\n. Don't forget to flush, to get the\nanswer. In response, you will receive a single letter Y (yes) or N (no),\ntelling you if variety \n    a_c\n is one of the last \n    k\n varieties of\ncoffee in his memory. To reset the memory of your friend, in a separate line\noutput the single letter R in upper case. You can do this operation at most\n\n    30\n     000\n times. When you determine the number \n    d\n of different\ncoffee varieties, output! \n    d\n In case your query is invalid, you asked\nmore than \n    2n^2/k\n queries of type ? or you asked more than\n\n    30\n     000\n queries of type R, the program will print the letter E and\nwill finish interaction. You will receive a Wrong Answer verdict. Make sure to\nexit immediately to avoid getting other verdicts. After printing a query do\nnot forget to output end of line and flush the output. Otherwise, you will get\nIdleness limit exceeded. To do this, use: fflush(stdout) or cout.flush() in\nC++; System.out.flush() in Java; flush(output) in Pascal; stdout.flush() in\nPython; see documentation for other languages. Hack format The first line\nshould contain the word fixed The second line should contain two integers\n\n    n\n and \n    k\n, separated by space (\n    1 \n    \u2264 k \n    \u2264 n \n    \u2264 1024\n,\n\n    k\n and \n    n\n are powers of two). It must hold that \n    2n^2k\n    \u2264 20\n     000\n. The third line should contain \n    n\n integers \n    a_1,\n    a_2, \n    \u2026, a_n\n, separated by spaces (\n    1 \n    \u2264 a_i \n    \u2264 n\n).\nExamples Input 4 2 N N Y N N N N Output ? 1 ? 2 ? 3 ? 4 R ? 4 ? 1 ? 2 ! 3\nInput 8 8 N N N N Y Y Output ? 2 ? 6 ? 4 ? 5 ? 2 ? 5 ! 6 Note In the first\nexample, the array is \n    a = [1, 4, 1, 3]\n. The city produces \n    3\n\ndifferent varieties of coffee (\n    1\n, \n    3\n and \n    4\n). The successive\nvarieties of coffee tasted by your friend are \n    1, 4, \n    1, 3, 3, 1,\n    4\n (bold answers correspond to Y answers). Note that between the two ? 4\nasks, there is a reset memory request R, so the answer to the second ? 4 ask\nis N. Had there been no reset memory request, the answer to the second ? 4 ask\nis Y. In the second example, the array is \n    a = [1, 2, 3, 4, 5, 6, 6, 6]\n.\nThe city produces \n    6\n different varieties of coffee. The successive\nvarieties of coffee tasted by your friend are \n    2, 6, 4, 5, \n    2,\n    \n    5\n.\n\n",
        "cf_contest_id": 1291,
        "cf_index": "F",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "graphs",
            "interactive"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "fixed\r\n4 2\r\n1 4 1 3\r\n",
                "? 1\r\n? 2\r\n? 3\r\n? 4\r\nR\r\n? 1\r\n? 3\r\nR\r\n? 2\r\n? 4\r\nR\r\n? 1\r\n? 4\r\nR\r\n? 2\r\nR\r\n? 3\r\nR\r\n! 3\r\n"
            ],
            [
                "fixed\r\n8 8\r\n1 2 3 4 5 6 6 6\r\n",
                "? 1\r\n? 2\r\n? 3\r\n? 4\r\n? 5\r\n? 6\r\n? 7\r\n? 8\r\nR\r\n! 6\r\n"
            ]
        ],
        "private_cases": [
            [
                "fixed\r\n1 1\r\n1\r\n",
                "! 1\r\n"
            ],
            [
                "fixed\r\n2 1\r\n1 1\r\n",
                "? 1\r\n? 2\r\nR\r\n! 1\r\n"
            ],
            [
                "fixed\r\n2 1\r\n1 2\r\n",
                "? 1\r\n? 2\r\nR\r\n! 2\r\n"
            ],
            [
                "fixed\r\n2 2\r\n1 1\r\n",
                "? 1\r\n? 2\r\nR\r\n! 1\r\n"
            ],
            [
                "fixed\r\n2 2\r\n1 2\r\n",
                "? 1\r\n? 2\r\nR\r\n! 2\r\n"
            ],
            [
                "fixed\r\n8 4\r\n1 2 3 1 2 1 3 2\r\n",
                "? 1\r\n? 2\r\n? 3\r\n? 4\r\n? 5\r\n? 6\r\n? 7\r\n? 8\r\nR\r\n? 1\r\n? 2\r\n? 5\r\n? 6\r\nR\r\n? 3\r\n? 4\r\n? 7\r\n? 8\r\nR\r\n? 1\r\n? 2\r\n? 7\r\n? 8\r\nR\r\n? 3\r\n? 4\r\nR\r\n? 5\r\n? 6\r\nR\r\n! 3\r\n"
            ],
            [
                "adaptcheck\r\n64 64\r\n16 28 51 10 13 22 25 52 26 31 57 44 49 5 58 12 50 21 60 3 54 17 1 35 9 2 37 39 32 59 14 4 15 53 40 42 24 46 61 8 43 36 62 45 33 6 1 23 55 30 18 19 34 41 20 11 56 48 38 27 47 63 7 29\r\n",
                "? 1\r\n? 2\r\n? 3\r\n? 4\r\n? 5\r\n? 6\r\n? 7\r\n? 8\r\n? 9\r\n? 10\r\n? 11\r\n? 12\r\n? 13\r\n? 14\r\n? 15\r\n? 16\r\n? 17\r\n? 18\r\n? 19\r\n? 20\r\n? 21\r\n? 22\r\n? 23\r\n? 24\r\n? 25\r\n? 26\r\n? 27\r\n? 28\r\n? 29\r\n? 30\r\n? 31\r\n? 32\r\n? 33\r\n? 34\r\n? 35\r\n? 36\r\n? 37\r\n? 38\r\n? 39\r\n? 40\r\n? 41\r\n? 42\r\n? 43\r\n? 44\r\n? 45\r\n? 46\r\n? 47\r\n? 48\r\n? 49\r\n? 50\r\n? 51\r\n? 52\r\n? 53\r\n? 54\r\n? 55\r\n? 56\r\n? 57\r\n? 58\r\n? 59\r\n? 60\r\n? 61\r\n? 62\r\n? 63\r\n? 64\r\nR\r\n! 63\r\n"
            ]
        ]
    }
]