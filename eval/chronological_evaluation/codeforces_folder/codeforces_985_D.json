[
    {
        "name": "Sand Fortress",
        "description": "You are going to the beach with the idea to build the greatest sand castle\never in your head! The beach is not as three-dimensional as you could have\nimagined, it can be decribed as a line of spots to pile up sand pillars. Spots\nare numbered 1 through infinity from left to right. Obviously, there is not\nenough sand on the beach, so you brought n packs of sand with you. Let height\nhi of the sand pillar on some spot i be the number of sand packs you spent on\nit. You can't split a sand pack to multiple pillars, all the sand from it\nshould go to a single one. There is a fence of height equal to the height of\npillar with H sand packs to the left of the first spot and you should prevent\nsand from going over it. Finally you ended up with the following conditions to\nbuilding the castle: h1 \u2264 H: no sand from the leftmost spot should go over the\nfence; For any |hi - hi + 1| \u2264 1: large difference in heights of two\nneighboring pillars can lead sand to fall down from the higher one to the\nlower, you really don't want this to happen; : you want to spend all the sand\nyou brought with you. As you have infinite spots to build, it is always\npossible to come up with some valid castle structure. Though you want the\ncastle to be as compact as possible. Your task is to calculate the minimum\nnumber of spots you can occupy so that all the aforementioned conditions hold.\nInput The only line contains two integer numbers n and H (1 \u2264 n, H \u2264 10^18) \u2014\nthe number of sand packs you have and the height of the fence, respectively.\nOutput Print the minimum number of spots you can occupy so the all the castle\nbuilding conditions hold. Examples Input 5 2 Output 3 Input 6 8 Output 3 Note\nHere are the heights of some valid castles: n = 5, H = 2, [2, 2, 1, 0, ...],\n[2, 1, 1, 1, 0, ...], [1, 0, 1, 2, 1, 0, ...] n = 6, H = 8, [3, 2, 1, 0, ...],\n[2, 2, 1, 1, 0, ...], [0, 1, 0, 1, 2, 1, 1, 0...] (this one has 5 spots\noccupied) The first list for both cases is the optimal answer, 3 spots are\noccupied in them. And here are some invalid ones: n = 5, H = 2, [3, 2, 0,\n...], [2, 3, 0, ...], [1, 0, 2, 2, ...] n = 6, H = 8, [2, 2, 2, 0, ...], [6,\n0, ...], [1, 4, 1, 0...], [2, 2, 1, 0, ...]\n\n",
        "cf_contest_id": 985,
        "cf_index": "D",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "constructive algorithms",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 2\r\n",
                "3\r\n"
            ],
            [
                "6 8\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "20 4\r\n",
                "7\r\n"
            ],
            [
                "1000000000000000000 1000000000000000000\r\n",
                "1414213562\r\n"
            ],
            [
                "1 1\r\n",
                "1\r\n"
            ],
            [
                "1 1000000000000000000\r\n",
                "1\r\n"
            ],
            [
                "1000000000000000000 1\r\n",
                "1999999999\r\n"
            ],
            [
                "1036191544337895 45523434\r\n",
                "45523434\r\n"
            ],
            [
                "1036191544337896 45523434\r\n",
                "45523435\r\n"
            ],
            [
                "1036191544337895 45523433\r\n",
                "45523435\r\n"
            ],
            [
                "1036191544337895 1\r\n",
                "64379858\r\n"
            ],
            [
                "1036191544337895 1000000000000000000\r\n",
                "45523434\r\n"
            ],
            [
                "30 3\r\n",
                "9\r\n"
            ],
            [
                "30 4\r\n",
                "8\r\n"
            ],
            [
                "6 100\r\n",
                "3\r\n"
            ],
            [
                "7 100\r\n",
                "4\r\n"
            ],
            [
                "1000000000000000000 99999999999\r\n",
                "1414213562\r\n"
            ],
            [
                "999999997351043581 1000000000000000000\r\n",
                "1414213561\r\n"
            ],
            [
                "911343366122896086 1416605974\r\n",
                "1350069158\r\n"
            ],
            [
                "828974163639871882 2010864527\r\n",
                "1287613423\r\n"
            ],
            [
                "696616491401388220 958775125\r\n",
                "1191798158\r\n"
            ],
            [
                "999999999000000000 1\r\n",
                "1999999998\r\n"
            ],
            [
                "961245465290770608 1687994843\r\n",
                "1386539192\r\n"
            ],
            [
                "692106376966414549 974053139\r\n",
                "1186035874\r\n"
            ],
            [
                "12 1\r\n",
                "6\r\n"
            ],
            [
                "806680349368385877 1068656310\r\n",
                "1278847474\r\n"
            ]
        ]
    }
]