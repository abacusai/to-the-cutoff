[
    {
        "name": "Treeland and Viruses",
        "description": "There are \n    n\n cities in Treeland connected with \n    n - 1\n bidirectional\nroads in such that a way that any city is reachable from any other; in other\nwords, the graph of cities and roads is a tree. Treeland is preparing for a\nseasonal virus epidemic, and currently, they are trying to evaluate different\ninfection scenarios. In each scenario, several cities are initially infected\nwith different virus species. Suppose that there are \n    k_i\n virus species\nin the \n    i\n-th scenario. Let us denote \n    v_j\n the initial city for the\nvirus \n    j\n, and \n    s_j\n the propagation speed of the virus \n    j\n. The\nspread of the viruses happens in turns: first virus \n    1\n spreads, followed\nby virus \n    2\n, and so on. After virus \n    k_i\n spreads, the process starts\nagain from virus \n    1\n. A spread turn of virus \n    j\n proceeds as follows.\nFor each city \n    x\n not infected with any virus at the start of the turn, at\nthe end of the turn it becomes infected with virus \n    j\n if and only if\nthere is such a city \n    y\n that: city \n    y\n was infected with virus\n\n    j\n at the start of the turn; the path between cities \n    x\n and \n    y\n\ncontains at most \n    s_j\n edges; all cities on the path between cities\n\n    x\n and \n    y\n (excluding \n    y\n) were uninfected with any virus at the\nstart of the turn.Once a city is infected with a virus, it stays infected\nindefinitely and can not be infected with any other virus. The spread stops\nonce all cities are infected. You need to process \n    q\n independent\nscenarios. Each scenario is described by \n    k_i\n virus species and \n    m_i\n\nimportant cities. For each important city determine which the virus it will be\ninfected by in the end. Input The first line contains a single integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of cities in Treeland.\nThe following \n    n - 1\n lines describe the roads. The \n    i\n-th of these\nlines contains two integers \n    x_i\n and \n    y_i\n (\n    1 \n    \u2264 x_i, y_i\n    \n    \u2264 n\n) \u2014 indices of cities connecting by the \n    i\n-th road. It is\nguaranteed that the given graph of cities and roads is a tree. The next line\ncontains a single integer \n    q\n (\n    1 \n    \u2264 q \n    \u2264 2 \n    \u00b7 10^5\n) \u2014\nthe number of infection scenarios. \n    q\n scenario descriptions follow. The\ndescription of the \n    i\n-th scenario starts with a line containing two\nintegers \n    k_i\n and \n    m_i\n (\n    1 \n    \u2264 k_i, m_i \n    \u2264 n\n) \u2014 the\nnumber of virus species and the number of important cities in this scenario\nrespectively. It is guaranteed that \n    \u2211_i = 1^ q k_i\n and\n\n    \u2211_i = 1^ q m_i\n do not exceed \n    2 \n    \u00b7 10^5\n. The following\n\n    k_i\n lines describe the virus species. The \n    j\n-th of these lines\ncontains two integers \n    v_j\n and \n    s_j\n (\n    1 \n    \u2264 v_j \n    \u2264 n\n,\n\n    1 \n    \u2264 s_j \n    \u2264 10^6\n) \u2013 the initial city and the propagation speed\nof the virus species \n    j\n. It is guaranteed that the initial cities of all\nvirus species within a scenario are distinct. The following line contains\n\n    m_i\n distinct integers \n    u_1, \n    \u2026, u_m_i\n (\n    1 \n    \u2264 u_j\n    \n    \u2264 n\n) \u2014 indices of important cities. Output Print \n    q\n lines. The\n\n    i\n-th line should contain \n    m_i\n integers \u2014 indices of virus species\nthat cities \n    u_1, \n    \u2026, u_m_i\n are infected with at the end of the\n\n    i\n-th scenario. Example Input 7 1 2 1 3 2 4 2 5 3 6 3 7 3 2 2 4 1 7 1 1 3\n2 2 4 3 7 1 1 3 3 3 1 1 4 100 7 100 1 2 3 Output 1 2 1 1 1 1 1\n\n",
        "cf_contest_id": 1320,
        "cf_index": "E",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "dp",
            "shortest paths",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "7\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n3 7\r\n3\r\n2 2\r\n4 1\r\n7 1\r\n1 3\r\n2 2\r\n4 3\r\n7 1\r\n1 3\r\n3 3\r\n1 1\r\n4 100\r\n7 100\r\n1 2 3\r\n",
                "1 2 \r\n1 1 \r\n1 1 1 \r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n1 1\r\n1 1\r\n1\r\n",
                "1 \r\n"
            ],
            [
                "2\r\n2 1\r\n2\r\n2 2\r\n1 1\r\n2 1\r\n2 1\r\n2 2\r\n1 1\r\n2 1\r\n2 1\r\n",
                "2 1 \r\n2 1 \r\n"
            ],
            [
                "10\r\n2 4\r\n7 8\r\n6 3\r\n9 2\r\n6 8\r\n7 1\r\n9 8\r\n9 10\r\n5 4\r\n10\r\n1 8\r\n8 1\r\n10 2 3 4 1 9 8 5\r\n8 1\r\n9 2\r\n3 1\r\n10 4\r\n8 5\r\n5 3\r\n6 2\r\n4 2\r\n2 4\r\n9\r\n8 5\r\n7 1\r\n9 2\r\n5 1\r\n2 5\r\n10 3\r\n4 4\r\n6 1\r\n1 1\r\n2 8 6 4 10\r\n4 2\r\n6 5\r\n4 3\r\n1 2\r\n3 1\r\n8 1\r\n8 2\r\n7 5\r\n8 3\r\n6 2\r\n5 3\r\n3 5\r\n9 3\r\n10 1\r\n4 1\r\n6 1\r\n3 4\r\n1 2\r\n7 3\r\n8 1\r\n7 1 8 6\r\n2 7\r\n5 5\r\n4 4\r\n7 3 9 8 6 4 2\r\n4 7\r\n4 2\r\n9 2\r\n2 2\r\n3 3\r\n2 9 10 7 5 6 3\r\n6 9\r\n4 4\r\n5 4\r\n9 1\r\n2 3\r\n7 5\r\n10 2\r\n6 3 9 10 4 8 2 5 7\r\n4 8\r\n4 4\r\n6 1\r\n3 3\r\n2 5\r\n3 4 10 8 6 1 9 7\r\n",
                "1 1 1 1 1 1 1 1 \r\n1 \r\n4 1 7 6 5 \r\n1 3 \r\n3 1 \r\n2 1 3 3 \r\n2 2 2 2 2 2 2 \r\n3 2 2 2 1 2 4 \r\n3 3 3 6 1 3 4 2 5 \r\n3 1 4 2 2 2 4 2 \r\n"
            ]
        ]
    }
]