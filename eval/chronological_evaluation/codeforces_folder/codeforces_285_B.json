[
    {
        "name": "Find Marble",
        "description": "Petya and Vasya are playing a game. Petya's got n non-transparent glasses,\nstanding in a row. The glasses' positions are indexed with integers from 1 to\nn from left to right. Note that the positions are indexed but the glasses are\nnot. First Petya puts a marble under the glass in position s. Then he performs\nsome (possibly zero) shuffling operations. One shuffling operation means\nmoving the glass from the first position to position p1, the glass from the\nsecond position to position p2 and so on. That is, a glass goes from position\ni to position pi. Consider all glasses are moving simultaneously during one\nshuffling operation. When the glasses are shuffled, the marble doesn't travel\nfrom one glass to another: it moves together with the glass it was initially\nbeen put in. After all shuffling operations Petya shows Vasya that the ball\nhas moved to position t. Vasya's task is to say what minimum number of\nshuffling operations Petya has performed or determine that Petya has made a\nmistake and the marble could not have got from position s to position t. Input\nThe first line contains three integers: n, s, t (1 \u2264 n \u2264 10^5; 1 \u2264 s, t \u2264 n) \u2014\nthe number of glasses, the ball's initial and final position. The second line\ncontains n space-separated integers: p1, p2, ..., pn (1 \u2264 pi \u2264 n) \u2014 the\nshuffling operation parameters. It is guaranteed that all pi's are distinct.\nNote that s can equal t. Output If the marble can move from position s to\nposition t, then print on a single line a non-negative integer \u2014 the minimum\nnumber of shuffling operations, needed to get the marble to position t. If it\nis impossible, print number -1. Examples Input 4 2 1 2 3 4 1 Output 3 Input 4\n3 3 4 1 3 2 Output 0 Input 4 3 4 1 2 3 4 Output -1 Input 3 1 3 2 1 3 Output -1\n\n",
        "cf_contest_id": 285,
        "cf_index": "B",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 2 1\r\n2 3 4 1\r\n",
                "3\r\n"
            ],
            [
                "4 3 3\r\n4 1 3 2\r\n",
                "0\r\n"
            ],
            [
                "4 3 4\r\n1 2 3 4\r\n",
                "-1\r\n"
            ],
            [
                "3 1 3\r\n2 1 3\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1 1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "10 6 7\r\n10 7 8 1 5 6 2 9 4 3\r\n",
                "-1\r\n"
            ],
            [
                "10 3 6\r\n5 6 7 3 8 4 2 1 10 9\r\n",
                "3\r\n"
            ],
            [
                "10 10 4\r\n4 2 6 9 5 3 8 1 10 7\r\n",
                "4\r\n"
            ],
            [
                "100 90 57\r\n19 55 91 50 31 23 60 84 38 1 22 51 27 76 28 98 11 44 61 63 15 93 52 3 66 16 53 36 18 62 35 85 78 37 73 64 87 74 46 26 82 69 49 33 83 89 56 67 71 25 39 94 96 17 21 6 47 68 34 42 57 81 13 10 54 2 48 80 20 77 4 5 59 30 90 95 45 75 8 88 24 41 40 14 97 32 7 9 65 70 100 99 72 58 92 29 79 12 86 43\r\n",
                "-1\r\n"
            ],
            [
                "100 11 20\r\n80 25 49 55 22 98 35 59 88 14 91 20 68 66 53 50 77 45 82 63 96 93 85 46 37 74 84 9 7 95 41 86 23 36 33 27 81 39 18 13 12 92 24 71 3 48 83 61 31 87 28 79 75 38 11 21 29 69 44 100 72 62 32 43 30 16 47 56 89 60 42 17 26 70 94 99 4 6 2 73 8 52 65 1 15 90 67 51 78 10 5 76 57 54 34 58 19 64 40 97\r\n",
                "26\r\n"
            ],
            [
                "100 84 83\r\n30 67 53 89 94 54 92 17 26 57 15 5 74 85 10 61 18 70 91 75 14 11 93 41 25 78 88 81 20 51 35 4 62 1 97 39 68 52 47 77 64 3 2 72 60 80 8 83 65 98 21 22 45 7 58 31 43 38 90 99 49 87 55 36 29 6 37 23 66 76 59 79 40 86 63 44 82 32 48 16 50 100 28 96 46 12 27 13 24 9 19 84 73 69 71 42 56 33 34 95\r\n",
                "71\r\n"
            ],
            [
                "100 6 93\r\n74 62 67 81 40 85 35 42 59 72 80 28 79 41 16 19 33 63 13 10 69 76 70 93 49 84 89 94 8 37 11 90 26 52 47 7 36 95 86 75 56 15 61 99 88 12 83 21 20 3 100 17 32 82 6 5 43 25 66 68 73 78 18 77 92 27 23 2 4 39 60 48 22 24 14 97 29 34 54 64 71 57 87 38 9 50 30 53 51 45 44 31 58 91 98 65 55 1 46 96\r\n",
                "-1\r\n"
            ],
            [
                "100 27 56\r\n58 18 50 41 33 37 14 87 77 73 61 53 15 8 70 68 45 96 54 78 39 67 51 60 80 12 93 99 20 92 17 79 4 13 62 91 69 29 49 36 98 34 90 35 84 64 38 83 28 89 97 94 9 16 26 48 10 57 23 75 27 88 44 21 72 76 30 43 32 2 71 24 100 1 31 81 42 40 47 55 86 85 66 5 52 22 95 74 11 19 7 82 6 25 56 63 65 59 46 3\r\n",
                "20\r\n"
            ],
            [
                "87 42 49\r\n45 55 24 44 56 72 74 23 4 7 37 67 22 6 58 76 40 36 3 20 26 87 64 75 49 70 62 42 31 1 80 33 25 59 78 27 32 2 41 61 66 28 19 85 15 69 52 77 50 14 16 34 18 43 73 83 11 39 29 9 35 13 81 54 79 21 60 46 71 57 12 17 5 47 38 30 10 84 53 63 68 8 51 65 48 86 82\r\n",
                "-1\r\n"
            ],
            [
                "2 1 2\r\n1 2\r\n",
                "-1\r\n"
            ],
            [
                "2 1 2\r\n2 1\r\n",
                "1\r\n"
            ],
            [
                "2 2 2\r\n1 2\r\n",
                "0\r\n"
            ],
            [
                "2 2 2\r\n2 1\r\n",
                "0\r\n"
            ],
            [
                "2 1 1\r\n2 1\r\n",
                "0\r\n"
            ]
        ]
    }
]