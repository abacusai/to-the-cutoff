[
    {
        "name": "Help BerLine",
        "description": "Very soon, the new cell phone services provider \"BerLine\" will begin its work\nin Berland! The start of customer service is planned along the main street of\nthe capital. There are \n    n\n base stations that are already installed. They\nare located one after another along the main street in the order from the\n\n    1\n-st to the \n    n\n-th from left to right. Currently, all these base\nstations are turned off. They will be turned on one by one, one base station\nper day, according to some permutation \n    p = [p_1, p_2, \n    \u2026, p_n]\n (\n    1 \n    \u2264 p_i \n    \u2264 n\n), where \n    p_i\n is the index of a base station that\nwill be turned on on the \n    i\n-th day. Thus, it will take \n    n\n days to\nturn on all base stations. Each base station is characterized by its operating\nfrequency \n    f_i\n \u2014 an integer between \n    1\n and \n    24\n, inclusive.\nThere is an important requirement for operating frequencies of base stations.\nConsider an arbitrary moment in time. For any phone owner, if we consider all\nbase stations turned on in the access area of their phone, then in this set of\nbase stations there should be at least one whose operating frequency is unique\namong the frequencies of these stations. Since the power of the phone and the\nposition are not known in advance, this means that for any nonempty subsegment\nof turned on base stations, at least one of them has to have the operating\nfrequency that is unique among the stations of this subsegment. For example,\nlet's take a look at a case of \n    n = 7\n, all \n    n\n stations are turned\non, and their frequencies are equal to \n    f = [1, 2, 1, 3, 1, 2, 1]\n.\nConsider any subsegment of the base stations \u2014 there is a base station with a\nunique frequency within this subsegment. However, if \n    f = [1, 2, 1, 2, 3, 2,\n    1]\n, then there is no unique frequency on the segment \n    [1, 2, 1, 2]\n\nfrom the index \n    1\n to the index \n    4\n, inclusive. Your task is to assign\na frequency from \n    1\n to \n    24\n to each of \n    n\n base stations in such\na way that the frequency requirement is met at every moment. Remember that the\nbase stations are turned on in the order of the given permutation \n    p\n.\nInput The first line of the input contains an integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 50\n) \u2014 the number of test cases in the input. Then \n    t\n test case\ndescriptions follow. The first line of a test case contains an integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 8\n     500\n) \u2014 the number of \"BerLine\" base stations. The\nfollowing line contains \n    n\n distinct integers \n    p_1, p_2, \n    \u2026, p_n\n\n(\n    1 \n    \u2264 p_i \n    \u2264 n\n) \u2014 the order in which the base stations are turned\non, i. e. on the \n    i\n-th day the base station with the index \n    p_i\n is\nturned on. It is guaranteed that a correct answer exists for all test cases in\nthe input. Output Print exactly \n    t\n lines, where the \n    j\n-th line\ncontains the answer for the \n    j\n-th test case in the input. Print the\nrequired frequencies \n    f_1, f_2, \n    \u2026, f_n\n (\n    1 \n    \u2264 f_i \n    \u2264\n    24\n). If there are several possible answers, print any of them. Example\nInput 5 3 1 3 2 3 1 2 3 1 1 10 6 10 4 2 7 9 5 8 3 1 10 2 4 6 9 1 8 10 5 3 7\nOutput 1 3 2 10 20 10 1 2 3 4 5 3 1 3 5 4 2 1 2 3 4 5 6 7 8 9 10 Note In the\nfirst test case \n    n = 3\n and \n    p = [1, 3, 2]\n. The base stations can be\nassigned frequencies \n    [1, 3, 2]\n. Day 1: only the base station \n    1\n is\nturned on, its frequency is \n    1\n. Day 2: the base stations \n    1\n and\n\n    3\n are turned on, their frequencies are \n    [1, 2]\n. Day 3: all base\nstations are turned on, their frequencies are \n    [1, 3, 2]\n (in the\ndirection along the street). On each day, each nonempty subsegment of turned\non base stations has a base station with a unique frequency among this\nsubsegment. It can be shown that three distinct frequencies are necessary in\nthis test case.\n\n",
        "cf_contest_id": 1267,
        "cf_index": "H",
        "cf_rating": 3200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5\r\n3\r\n1 3 2\r\n3\r\n1 2 3\r\n1\r\n1\r\n10\r\n6 10 4 2 7 9 5 8 3 1\r\n10\r\n2 4 6 9 1 8 10 5 3 7\r\n",
                "3 1 2 \r\n1 2 1 \r\n1 \r\n1 2 1 4 1 2 3 1 2 1 \r\n1 3 1 2 1 4 1 2 3 1 \r\n"
            ]
        ],
        "private_cases": [
            [
                "50\r\n2\r\n2 1\r\n2\r\n1 2\r\n2\r\n1 2\r\n2\r\n2 1\r\n2\r\n1 2\r\n2\r\n2 1\r\n2\r\n2 1\r\n2\r\n2 1\r\n2\r\n1 2\r\n2\r\n2 1\r\n2\r\n2 1\r\n2\r\n2 1\r\n2\r\n2 1\r\n2\r\n2 1\r\n2\r\n1 2\r\n2\r\n2 1\r\n2\r\n2 1\r\n2\r\n2 1\r\n2\r\n1 2\r\n2\r\n2 1\r\n2\r\n1 2\r\n2\r\n2 1\r\n2\r\n1 2\r\n2\r\n1 2\r\n2\r\n1 2\r\n2\r\n1 2\r\n2\r\n1 2\r\n2\r\n2 1\r\n2\r\n2 1\r\n2\r\n1 2\r\n2\r\n1 2\r\n2\r\n1 2\r\n2\r\n2 1\r\n2\r\n2 1\r\n2\r\n2 1\r\n2\r\n1 2\r\n2\r\n2 1\r\n2\r\n1 2\r\n2\r\n2 1\r\n2\r\n2 1\r\n2\r\n2 1\r\n2\r\n2 1\r\n2\r\n1 2\r\n2\r\n2 1\r\n2\r\n1 2\r\n2\r\n2 1\r\n2\r\n1 2\r\n2\r\n1 2\r\n2\r\n1 2\r\n2\r\n1 2\r\n",
                "1 2 \r\n2 1 \r\n2 1 \r\n1 2 \r\n2 1 \r\n1 2 \r\n1 2 \r\n1 2 \r\n2 1 \r\n1 2 \r\n1 2 \r\n1 2 \r\n1 2 \r\n1 2 \r\n2 1 \r\n1 2 \r\n1 2 \r\n1 2 \r\n2 1 \r\n1 2 \r\n2 1 \r\n1 2 \r\n2 1 \r\n2 1 \r\n2 1 \r\n2 1 \r\n2 1 \r\n1 2 \r\n1 2 \r\n2 1 \r\n2 1 \r\n2 1 \r\n1 2 \r\n1 2 \r\n1 2 \r\n2 1 \r\n1 2 \r\n2 1 \r\n1 2 \r\n1 2 \r\n1 2 \r\n1 2 \r\n2 1 \r\n1 2 \r\n2 1 \r\n1 2 \r\n2 1 \r\n2 1 \r\n2 1 \r\n2 1 \r\n"
            ],
            [
                "50\r\n3\r\n2 3 1\r\n3\r\n1 2 3\r\n3\r\n1 3 2\r\n3\r\n2 3 1\r\n3\r\n3 2 1\r\n3\r\n3 2 1\r\n3\r\n3 2 1\r\n3\r\n1 2 3\r\n3\r\n3 1 2\r\n3\r\n1 3 2\r\n3\r\n3 1 2\r\n3\r\n1 3 2\r\n3\r\n1 3 2\r\n3\r\n2 3 1\r\n3\r\n1 2 3\r\n3\r\n2 1 3\r\n3\r\n1 2 3\r\n3\r\n1 2 3\r\n3\r\n3 1 2\r\n3\r\n2 3 1\r\n3\r\n2 3 1\r\n3\r\n3 2 1\r\n3\r\n1 2 3\r\n3\r\n1 3 2\r\n3\r\n3 2 1\r\n3\r\n3 1 2\r\n3\r\n1 3 2\r\n3\r\n3 1 2\r\n3\r\n1 2 3\r\n3\r\n3 2 1\r\n3\r\n1 3 2\r\n3\r\n3 1 2\r\n3\r\n2 1 3\r\n3\r\n3 2 1\r\n3\r\n3 2 1\r\n3\r\n3 2 1\r\n3\r\n2 1 3\r\n3\r\n3 1 2\r\n3\r\n3 2 1\r\n3\r\n3 2 1\r\n3\r\n1 3 2\r\n3\r\n2 1 3\r\n3\r\n3 1 2\r\n3\r\n3 2 1\r\n3\r\n1 2 3\r\n3\r\n1 3 2\r\n3\r\n2 3 1\r\n3\r\n2 3 1\r\n3\r\n3 1 2\r\n3\r\n1 3 2\r\n",
                "1 2 1 \r\n1 2 1 \r\n3 1 2 \r\n1 2 1 \r\n1 2 1 \r\n1 2 1 \r\n1 2 1 \r\n1 2 1 \r\n2 1 3 \r\n3 1 2 \r\n2 1 3 \r\n3 1 2 \r\n3 1 2 \r\n1 2 1 \r\n1 2 1 \r\n1 2 1 \r\n1 2 1 \r\n1 2 1 \r\n2 1 3 \r\n1 2 1 \r\n1 2 1 \r\n1 2 1 \r\n1 2 1 \r\n3 1 2 \r\n1 2 1 \r\n2 1 3 \r\n3 1 2 \r\n2 1 3 \r\n1 2 1 \r\n1 2 1 \r\n3 1 2 \r\n2 1 3 \r\n1 2 1 \r\n1 2 1 \r\n1 2 1 \r\n1 2 1 \r\n1 2 1 \r\n2 1 3 \r\n1 2 1 \r\n1 2 1 \r\n3 1 2 \r\n1 2 1 \r\n2 1 3 \r\n1 2 1 \r\n1 2 1 \r\n3 1 2 \r\n1 2 1 \r\n1 2 1 \r\n2 1 3 \r\n3 1 2 \r\n"
            ]
        ]
    }
]