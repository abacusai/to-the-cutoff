[
    {
        "name": "Let's Go Rolling!",
        "description": "On a number axis directed from the left rightwards, n marbles with coordinates\nx1, x2, ..., xn are situated. Let's assume that the sizes of the marbles are\ninfinitely small, that is in this task each of them is assumed to be a\nmaterial point. You can stick pins in some of them and the cost of sticking in\nthe marble number i is equal to ci, number ci may be negative. After you\nchoose and stick the pins you need, the marbles will start to roll left\naccording to the rule: if a marble has a pin stuck in it, then the marble\ndoesn't move, otherwise the marble rolls all the way up to the next marble\nwhich has a pin stuck in it and stops moving there. If there is no pinned\nmarble on the left to the given unpinned one, it is concluded that the marble\nrolls to the left to infinity and you will pay an infinitely large fine for\nit. If no marble rolled infinitely to the left, then the fine will consist of\ntwo summands: the sum of the costs of stuck pins; the sum of the lengths of\nthe paths of each of the marbles, that is the sum of absolute values of\ndifferences between their initial and final positions. Your task is to choose\nand pin some marbles in the way that will make the fine for you to pay as\nlittle as possible. Input The first input line contains an integer n (1 \u2264 n \u2264\n3000) which is the number of marbles. The next n lines contain the\ndescriptions of the marbles in pairs of integers xi, ci ( - 10^9 \u2264 xi, ci \u2264\n10^9). The numbers are space-separated. Each description is given on a\nseparate line. No two marbles have identical initial positions. Output Output\nthe single number \u2014 the least fine you will have to pay. Examples Input 3 2 3\n3 4 1 2 Output 5 Input 4 1 7 3 1 5 10 6 1 Output 11\n\n",
        "cf_contest_id": 38,
        "cf_index": "E",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2 3\r\n3 4\r\n1 2\r\n",
                "5\r\n"
            ],
            [
                "4\r\n1 7\r\n3 1\r\n5 10\r\n6 1\r\n",
                "11\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n-948943148 10\r\n",
                "10\r\n"
            ],
            [
                "5\r\n864449017 54\r\n864449026 504\r\n864449027 308\r\n864449028 284\r\n864449030 249\r\n",
                "97\r\n"
            ],
            [
                "10\r\n439333887 2\r\n439333930 1\r\n439333947 2\r\n439333949 3\r\n439333950 1\r\n439333952 3\r\n439333953 1\r\n439333954 2\r\n439333955 2\r\n439333956 1\r\n",
                "15\r\n"
            ],
            [
                "15\r\n-793387817 -4\r\n-793387816 4\r\n-793387815 8\r\n-793387813 -5\r\n-793387812 3\r\n-793387811 8\r\n-793387810 2\r\n-793387809 3\r\n-793387808 8\r\n-793387807 5\r\n-793387806 -1\r\n-793387805 -2\r\n-793387804 -1\r\n-793387803 3\r\n-793387802 -3\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n-358012391 0\r\n",
                "0\r\n"
            ],
            [
                "1\r\n-59873019 0\r\n",
                "0\r\n"
            ]
        ]
    }
]