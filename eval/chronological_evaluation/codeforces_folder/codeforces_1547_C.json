[
    {
        "name": "Pair Programming",
        "description": "Monocarp and Polycarp are learning new programming techniques. Now they\ndecided to try pair programming. It's known that they have worked together on\nthe same file for \n    n + m\n minutes. Every minute exactly one of them made\none change to the file. Before they started, there were already \n    k\n lines\nwritten in the file. Every minute exactly one of them does one of two actions:\nadds a new line to the end of the file or changes one of its lines. Monocarp\nworked in total for \n    n\n minutes and performed the sequence of actions\n\n    [a_1, a_2, \n    \u2026, a_n]\n. If \n    a_i = 0\n, then he adds a new line to\nthe end of the file. If \n    a_i > 0\n, then he changes the line with the\nnumber \n    a_i\n. Monocarp performed actions strictly in this order:\n\n    a_1\n, then \n    a_2\n, ..., \n    a_n\n. Polycarp worked in total for\n\n    m\n minutes and performed the sequence of actions \n    [b_1, b_2, \n    \u2026,\n    b_m]\n. If \n    b_j = 0\n, then he adds a new line to the end of the file. If\n\n    b_j > 0\n, then he changes the line with the number \n    b_j\n. Polycarp\nperformed actions strictly in this order: \n    b_1\n, then \n    b_2\n, ...,\n\n    b_m\n. Restore their common sequence of actions of length \n    n + m\n such\nthat all actions would be correct \u2014 there should be no changes to lines that\ndo not yet exist. Keep in mind that in the common sequence Monocarp's actions\nshould form the subsequence \n    [a_1, a_2, \n    \u2026, a_n]\n and Polycarp's \u2014\nsubsequence \n    [b_1, b_2, \n    \u2026, b_m]\n. They can replace each other at the\ncomputer any number of times. Let's look at an example. Suppose \n    k = 3\n.\nMonocarp first changed the line with the number \n    2\n and then added a new\nline (thus, \n    n = 2, \n      a = [2, 0]\n). Polycarp first added a new line and\nthen changed the line with the number \n    5\n (thus, \n    m = 2, \n      b = [0,\n    5]\n). Since the initial length of the file was \n    3\n, in order for\nPolycarp to change line number \n    5\n two new lines must be added beforehand.\nExamples of correct sequences of changes, in this case, would be \n    [0, 2, 0,\n    5]\n and \n    [2, 0, 0, 5]\n. Changes \n    [0, 0, 5, 2]\n (wrong order of\nactions) and \n    [0, 5, 2, 0]\n (line \n    5\n cannot be edited yet) are not\ncorrect. Input The first line contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    1000\n). Then \n    t\n test cases follow. Before each test case, there is an\nempty line. Each test case contains three lines. The first line contains three\nintegers \n    k\n, \n    n\n, \n    m\n (\n    0 \n    \u2264 k \n    \u2264 100\n, \n    1 \n    \u2264 n, m\n    \n    \u2264 100\n) \u2014 the initial number of lines in file and lengths of Monocarp's\nand Polycarp's sequences of changes respectively. The second line contains\n\n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 300\n).\nThe third line contains \n    m\n integers \n    b_1, b_2, \n    \u2026, b_m\n (\n    0\n    \n    \u2264 b_j \n    \u2264 300\n). Output For each test case print any correct common\nsequence of Monocarp's and Polycarp's actions of length \n    n + m\n or -1 if\nsuch sequence doesn't exist. Example Input 5 3 2 2 2 0 0 5 4 3 2 2 0 5 0 6 0 2\n2 1 0 2 3 5 4 4 6 0 8 0 0 7 0 9 5 4 1 8 7 8 0 0 Output 2 0 0 5 0 2 0 6 5 -1 0\n6 0 7 0 8 0 9 -1\n\n",
        "cf_contest_id": 1547,
        "cf_index": "C",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5\r\n\r\n3 2 2\r\n2 0\r\n0 5\r\n\r\n4 3 2\r\n2 0 5\r\n0 6\r\n\r\n0 2 2\r\n1 0\r\n2 3\r\n\r\n5 4 4\r\n6 0 8 0\r\n0 7 0 9\r\n\r\n5 4 1\r\n8 7 8 0\r\n0\r\n",
                "0 2 0 5 \r\n0 2 0 5 6 \r\n-1\r\n0 6 0 7 0 8 0 9 \r\n-1\r\n"
            ]
        ],
        "private_cases": []
    }
]