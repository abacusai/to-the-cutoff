[
    {
        "name": "City Union",
        "description": "You are given \n    n \n    \u00d7 m\n grid. Some cells are filled and some are\nempty. A city is a maximal (by inclusion) set of filled cells such that it is\npossible to get from any cell in the set to any other cell in the set by\nmoving to adjacent (by side) cells, without moving into any cells not in the\nset. In other words, a city is a connected component of filled cells with\nedges between adjacent (by side) cells. Initially, there are two cities on the\ngrid. You want to change some empty cells into filled cells so that both of\nthe following are satisfied: There is one city on the resulting grid. The\nshortest path between any two filled cells, achievable only by moving onto\nfilled cells, is equal to the Manhattan distance between them. The Manhattan\ndistance between two cells \n    (a, b)\n and \n    (c, d)\n is equal to \n    |a -\n    c| + |b - d|\n. Find a way to add filled cells that satisfies these\nconditions and minimizes the total number of filled cells. Input Input\nconsists of multiple test cases. The first line contains a single integer\n\n    t\n, the number of test cases (\n    1 \n    \u2264 t \n    \u2264 5000\n). The first line\nof each test case contains two integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n, m\n    \n    \u2264 50\n, \n    nm \n    \u2265 3\n). The next \n    n\n lines describe the grid. The\n\n    i\n-th line contains a string \n    s_i\n of length \n    m\n. \n    s_i,j\n\nis '#' if the cell in position \n    (i, j)\n is filled, and '.' if it is empty.\nIt is guaranteed that there are exactly two cities in the initial grid. It is\nguaranteed that the sum of \n    n\n    \u00b7 m\n over all test cases does not\nexceed \n    25\n     000\n. Output For each test case, output \n    n\n lines, each\ncontaining a string of length \n    m\n, describing the grid you create in the\nsame format as the input. If there are multiple possible answers with the\nminimum number of filled cells print any. Example Input 11 1 3 #.# 2 2 .# #. 4\n4 ..## ...# #... ##.. 6 6 .##... ##.... ...... ....## .....# ...### 6 5 .#..#\n.#..# .#..# .#.## .#... ##... 5 5 ##### #...# #.#.# #...# ##### 4 4 .##. ##.#\n#.## .##. 5 5 ..### ....# ..... #.... #.... 5 6 .##... ##.... #....# ....##\n...##. 6 5 ..##. ...## ....# #.... ##... .##.. 5 4 ..## ..#. ..#. #... #...\nOutput ### .# ## ..## ..## ###. ##.. .##... ###... ..#... ..#### ...### ...###\n.#### .#### .#### .#### .#... ##... ##### ##### ##### ##### ##### .##. ####\n#### .##. ..### ..### ..#.. ###.. #.... .##... ###... ###### ...### ...##.\n..##. ..### ..### ###.. ###.. .##.. ..## ..#. ..#. ###. #... Note In the first\ntest case, we can add a single filled cell between the two cities to connect\nthem. We can verify that the second condition is satisfied. In the second test\ncase, we can also connect the cities with a single filled cell, while\nsatisfying the second condition. In the third test case, note that if we\nfilled the 3 cells in the top left, the cities would be connected, but the\nsecond condition would not be satisfied for cells \n    (4, 2)\n and \n    (2,\n    4)\n.\n\n",
        "cf_contest_id": 1799,
        "cf_index": "E",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "geometry",
            "greedy",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "11\r\n1 3\r\n#.#\r\n2 2\r\n.#\r\n#.\r\n4 4\r\n..##\r\n...#\r\n#...\r\n##..\r\n6 6\r\n.##...\r\n##....\r\n......\r\n....##\r\n.....#\r\n...###\r\n6 5\r\n.#..#\r\n.#..#\r\n.#..#\r\n.#.##\r\n.#...\r\n##...\r\n5 5\r\n#####\r\n#...#\r\n#.#.#\r\n#...#\r\n#####\r\n4 4\r\n.##.\r\n##.#\r\n#.##\r\n.##.\r\n5 5\r\n..###\r\n....#\r\n.....\r\n#....\r\n#....\r\n5 6\r\n.##...\r\n##....\r\n#....#\r\n....##\r\n...##.\r\n6 5\r\n..##.\r\n...##\r\n....#\r\n#....\r\n##...\r\n.##..\r\n5 4\r\n..##\r\n..#.\r\n..#.\r\n#...\r\n#...\r\n",
                "###\r\n##\r\n#.\r\n..##\r\n.###\r\n##..\r\n##..\r\n.##...\r\n####..\r\n...#..\r\n...###\r\n...###\r\n...###\r\n.####\r\n.####\r\n.####\r\n.####\r\n.#...\r\n##...\r\n#####\r\n#####\r\n#####\r\n#####\r\n#####\r\n.##.\r\n####\r\n####\r\n.##.\r\n..###\r\n#####\r\n#....\r\n#....\r\n#....\r\n.##...\r\n###...\r\n######\r\n...###\r\n...##.\r\n..##.\r\n..###\r\n..###\r\n###..\r\n###..\r\n.##..\r\n..##\r\n..#.\r\n###.\r\n#...\r\n#...\r\n"
            ]
        ],
        "private_cases": []
    }
]