[
    {
        "name": "Candies!",
        "description": "Consider a sequence of digits of length \n    2^k\n \n    [a_1, a_2, \n    \u2026,\n    a_2^k]\n. We perform the following operation with it: replace pairs\n\n    (a_2i+1, a_2i+2)\n with \n    (a_2i+1 + a_2i+2)\n     10\n for\n\n    0\n    \u2264 i<2^k-1\n. For every \n    i\n where \n    a_2i+1 + a_2i+2\n    \u2265\n    10\n we get a candy! As a result, we will get a sequence of length\n\n    2^k-1\n. Less formally, we partition sequence of length \n    2^k\n into\n\n    2^k-1\n pairs, each consisting of 2 numbers: the first pair consists of\nthe first and second numbers, the second of the third and fourth\n\n    \u2026\n, the last pair consists of the (\n    2^k-1\n)-th and\n(\n    2^k\n)-th numbers. For every pair such that sum of numbers in it is at\nleast \n    10\n, we get a candy. After that, we replace every pair of numbers\nwith a remainder of the division of their sum by \n    10\n (and don't change\nthe order of the numbers). Perform this operation with a resulting array until\nit becomes of length \n    1\n. Let \n    f([a_1, a_2, \n    \u2026, a_2^k])\n\ndenote the number of candies we get in this process. For example: if the\nstarting sequence is \n    [8, 7, 3, 1, 7, 0, 9, 4]\n then: After the first\noperation the sequence becomes \n    [(8 + 7)\n     10, (3 + 1)\n     10, (7 +\n    0)\n     10, (9 + 4)\n     10]\n \n    =\n \n    [5, 4, 7, 3]\n, and we get\n\n    2\n candies as \n    8 + 7 \n    \u2265 10\n and \n    9 + 4 \n    \u2265 10\n. After the\nsecond operation the sequence becomes \n    [(5 + 4)\n     10, (7 + 3)\n    \n    10]\n \n    =\n \n    [9, 0]\n, and we get one more candy as \n    7 + 3 \n    \u2265\n    10\n. After the final operation sequence becomes \n    [(9 + 0) \n     10]\n\n\n    =\n \n    [9]\n. Therefore, \n    f([8, 7, 3, 1, 7, 0, 9, 4]) = 3\n as we got\n\n    3\n candies in total. You are given a sequence of digits of length \n    n\n\n\n    s_1, s_2, \n    \u2026 s_n\n. You have to answer \n    q\n queries of the form\n\n    (l_i, r_i)\n, where for \n    i\n-th query you have to output \n    f([s_l_i,\n    s_l_i+1, \n    \u2026, s_r_i])\n. It is guaranteed that \n    r_i-l_i+1\n is of\nform \n    2^k\n for some nonnegative integer \n    k\n. Input The first line\ncontains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the length of\nthe sequence. The second line contains \n    n\n digits \n    s_1, s_2, \n    \u2026,\n    s_n\n (\n    0 \n    \u2264 s_i \n    \u2264 9\n). The third line contains a single integer\n\n    q\n (\n    1 \n    \u2264 q \n    \u2264 10^5\n) \u2014 the number of queries. Each of the next\n\n    q\n lines contains two integers \n    l_i\n, \n    r_i\n (\n    1 \n    \u2264 l_i \n    \u2264\n    r_i \n    \u2264 n\n) \u2014 \n    i\n-th query. It is guaranteed that \n    r_i-l_i+1\n is a\nnonnegative integer power of \n    2\n. Output Output \n    q\n lines, in\n\n    i\n-th line output single integer \u2014 \n    f([s_l_i, s_l_i + 1, \n    \u2026,\n    s_r_i])\n, answer to the \n    i\n-th query. Examples Input 8 8 7 3 1 7 0 9 4\n3 1 8 2 5 7 7 Output 3 1 0 Input 6 0 1 2 3 3 5 3 1 2 1 4 3 6 Output 0 0 1 Note\nThe first example illustrates an example from the statement. \n    f([7, 3, 1,\n    7]) = 1\n: sequence of operations is \n    [7, 3, 1, 7] \n    \u2192 [(7 + 3)\n    \n    10, (1 + 7)\n     10]\n \n    =\n \n    [0, 8]\n and one candy as \n    7 + 3 \n    \u2265\n    10\n \n    \u2192\n \n    [(0 + 8) \n     10]\n \n    =\n \n    [8]\n, so we get only\n\n    1\n candy. \n    f([9]) = 0\n as we don't perform operations with it.\n\n",
        "cf_contest_id": 1189,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8\r\n8 7 3 1 7 0 9 4\r\n3\r\n1 8\r\n2 5\r\n7 7\r\n",
                "3\n1\n0\n"
            ],
            [
                "6\r\n0 1 2 3 3 5\r\n3\r\n1 2\r\n1 4\r\n3 6\r\n",
                "0\n0\n1\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n8\r\n1\r\n1 1\r\n",
                "0\n"
            ],
            [
                "2\r\n9 9\r\n2\r\n1 1\r\n1 2\r\n",
                "0\n1\n"
            ],
            [
                "4\r\n8 5 6 6\r\n3\r\n2 3\r\n2 3\r\n3 4\r\n",
                "1\n1\n1\n"
            ],
            [
                "10\r\n6 6 8 8 2 5 0 1 2 1\r\n5\r\n5 6\r\n3 6\r\n8 9\r\n7 8\r\n2 9\r\n",
                "0\n2\n0\n0\n3\n"
            ],
            [
                "20\r\n4 8 6 6 3 0 1 8 3 6 1 4 3 2 1 3 6 4 5 4\r\n15\r\n16 19\r\n3 10\r\n9 9\r\n3 18\r\n6 7\r\n15 18\r\n12 19\r\n17 18\r\n12 12\r\n6 9\r\n3 10\r\n1 2\r\n2 3\r\n4 19\r\n16 16\r\n",
                "1\n3\n0\n5\n0\n1\n2\n1\n0\n1\n3\n1\n1\n5\n0\n"
            ]
        ]
    }
]