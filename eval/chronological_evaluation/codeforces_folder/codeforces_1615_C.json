[
    {
        "name": "Menorah",
        "description": "There are \n    n\n candles on a Hanukkah menorah, and some of its candles are\ninitially lit. We can describe which candles are lit with a binary string\n\n    s\n, where the \n    i\n-th candle is lit if and only if \n    s_i=1\n.\nInitially, the candle lights are described by a string \n    a\n. In an\noperation, you select a candle that is currently lit. By doing so, the candle\nyou selected will remain lit, and every other candle will change (if it was\nlit, it will become unlit and if it was unlit, it will become lit). You would\nlike to make the candles look the same as string \n    b\n. Your task is to\ndetermine if it is possible, and if it is, find the minimum number of\noperations required. Input The first line contains an integer \n    t\n\n(\n    1\n    \u2264 t\n    \u2264 10^4\n) \u2014 the number of test cases. Then \n    t\n cases\nfollow. The first line of each test case contains a single integer \n    n\n\n(\n    1\n    \u2264 n\n    \u2264 10^5\n) \u2014 the number of candles. The second line contains a\nstring \n    a\n of length \n    n\n consisting of symbols 0 and 1 \u2014 the initial\npattern of lights. The third line contains a string \n    b\n of length \n    n\n\nconsisting of symbols 0 and 1 \u2014 the desired pattern of lights. It is\nguaranteed that the sum of \n    n\n does not exceed \n    10^5\n. Output For each\ntest case, output the minimum number of operations required to transform\n\n    a\n to \n    b\n, or \n    -1\n if it's impossible. Example Input 5 5 11010\n11010 2 01 11 3 000 101 9 100010111 101101100 9 001011011 011010101 Output 0 1\n-1 3 4 Note In the first test case, the two strings are already equal, so we\ndon't have to perform any operations. In the second test case, we can perform\na single operation selecting the second candle to transform \n    01\n into\n\n    11\n. In the third test case, it's impossible to perform any operations\nbecause there are no lit candles to select. In the fourth test case, we can\nperform the following operations to transform \n    a\n into \n    b\n: Select the\n\n    7\n-th candle: \n    100010\n    111\n    \u2192 011101\n    \n    100\n. Select the \n    2\n-nd candle: \n    0\n     11101100\n    \u2192\n    1\n     10010011\n. Select the \n    1\n-st candle:\n\n    110010011\n    \u2192\n    101101100\n. In the fifth\ntest case, we can perform the following operations to transform \n    a\n into\n\n    b\n: Select the \n    6\n-th candle: \n    00101\n    1011\n    \u2192\n    11010\n    1100\n Select the \n    2\n-nd candle:\n\n    1\n    10101100\n    \u2192 0\n    11010011\n Select the\n\n    8\n-th candle: \n    0110100\n    11\n    \u2192\n    1001011\n    10\n Select the \n    7\n-th candle:\n\n    100101\n    110\n    \u2192 011010\n    101\n\n\n",
        "cf_contest_id": 1615,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "graphs",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n5\r\n11010\r\n11010\r\n2\r\n01\r\n11\r\n3\r\n000\r\n101\r\n9\r\n100010111\r\n101101100\r\n9\r\n001011011\r\n011010101\r\n",
                "0\r\n1\r\n-1\r\n3\r\n4\r\n"
            ]
        ],
        "private_cases": []
    }
]