[
    {
        "name": "Equal or Not Equal",
        "description": "You had \n    n\n positive integers \n    a_1, a_2, \n    \u2026, a_n\n arranged in a\ncircle. For each pair of neighboring numbers (\n    a_1\n and \n    a_2\n,\n\n    a_2\n and \n    a_3\n, ..., \n    a_n - 1\n and \n    a_n\n, and \n    a_n\n and\n\n    a_1\n), you wrote down: are the numbers in the pair equal or not.\nUnfortunately, you've lost a piece of paper with the array \n    a\n. Moreover,\nyou are afraid that even information about equality of neighboring elements\nmay be inconsistent. So, you are wondering: is there any array \n    a\n which\nis consistent with information you have about equality or non-equality of\ncorresponding pairs? Input The first line contains a single integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of test cases. Next \n    t\n cases\nfollow. The first and only line of each test case contains a non-empty string\n\n    s\n consisting of characters E and/or N. The length of \n    s\n is equal to\nthe size of array \n    n\n and \n    2 \n    \u2264 n \n    \u2264 50\n. For each \n    i\n from\n\n    1\n to \n    n\n: if \n    s_i =\n E then \n    a_i\n is equal to \n    a_i +\n    1\n (\n    a_n = a_1\n for \n    i = n\n); if \n    s_i =\n N then \n    a_i\n is\nnot equal to \n    a_i + 1\n (\n    a_n \n    \u2260 a_1\n for \n    i = n\n). Output\nFor each test case, print YES if it's possible to choose array \n    a\n that\nare consistent with information from \n    s\n you know. Otherwise, print NO. It\ncan be proved, that if there exists some array \n    a\n, then there exists an\narray \n    a\n of positive integers with values less or equal to \n    10^9\n.\nExample Input 4 EEE EN ENNEENE NENN Output YES NO YES YES Note In the first\ntest case, you can choose, for example, \n    a_1 = a_2 = a_3 = 5\n. In the\nsecond test case, there is no array \n    a\n, since, according to \n    s_1\n,\n\n    a_1\n is equal to \n    a_2\n, but, according to \n    s_2\n, \n    a_2\n is not\nequal to \n    a_1\n. In the third test case, you can, for example, choose array\n\n    a = [20, 20, 4, 50, 50, 50, 20]\n. In the fourth test case, you can, for\nexample, choose \n    a = [1, 3, 3, 7]\n.\n\n",
        "cf_contest_id": 1620,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dsu",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\nEEE\r\nEN\r\nENNEENE\r\nNENN\r\n",
                "YES\r\nNO\r\nYES\r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\nEEEEEN\r\nEEEEEN\r\n",
                "NO\r\nNO\r\n"
            ],
            [
                "2\r\nEEEEEEN\r\nEEEEEEEN\r\n",
                "NO\r\nNO\r\n"
            ],
            [
                "2\r\nEEEEEN\r\nEE\r\n",
                "NO\r\nYES\r\n"
            ],
            [
                "1\r\nNEEEEEEEEEEEEEEEEEEEEEEEEEEEEENNNNEENNE\r\n",
                "YES\r\n"
            ]
        ]
    }
]