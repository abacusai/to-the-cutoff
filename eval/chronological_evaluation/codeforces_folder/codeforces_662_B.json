[
    {
        "name": "Graph Coloring",
        "description": "You are given an undirected graph that consists of n vertices and m edges.\nInitially, each edge is colored either red or blue. Each turn a player picks a\nsingle vertex and switches the color of all edges incident to it. That is, all\nred edges with an endpoint in this vertex change the color to blue, while all\nblue edges with an endpoint in this vertex change the color to red. Find the\nminimum possible number of moves required to make the colors of all edges\nequal. Input The first line of the input contains two integers n and m (1 \u2264 n,\nm \u2264 100 000) \u2014 the number of vertices and edges, respectively. The following m\nlines provide the description of the edges, as the i-th of them contains two\nintegers ui and vi (1 \u2264 ui, vi \u2264 n, ui \u2260 vi) \u2014 the indices of the vertices\nconnected by the i-th edge, and a character ci () providing the initial color\nof this edge. If ci equals 'R', then this edge is initially colored red.\nOtherwise, ci is equal to 'B' and this edge is initially colored blue. It's\nguaranteed that there are no self-loops and multiple edges. Output If there is\nno way to make the colors of all edges equal output - 1 in the only line of\nthe output. Otherwise first output k \u2014 the minimum number of moves required to\nachieve the goal, then output k integers a1, a2, ..., ak, where ai is equal to\nthe index of the vertex that should be used at the i-th move. If there are\nmultiple optimal sequences of moves, output any of them. Examples Input 3 3 1\n2 B 3 1 R 3 2 B Output 1 2 Input 6 5 1 3 R 2 3 R 3 4 B 4 5 R 4 6 R Output 2 3\n4 Input 4 5 1 2 R 1 3 R 2 3 B 3 4 B 1 4 B Output -1\n\n",
        "cf_contest_id": 662,
        "cf_index": "B",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graphs"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\n1 2 B\r\n3 1 R\r\n3 2 B\r\n",
                "1\r\n2 \r\n"
            ],
            [
                "6 5\r\n1 3 R\r\n2 3 R\r\n3 4 B\r\n4 5 R\r\n4 6 R\r\n",
                "2\r\n3 4 \r\n"
            ],
            [
                "4 5\r\n1 2 R\r\n1 3 R\r\n2 3 B\r\n3 4 B\r\n1 4 B\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "6 6\r\n1 2 R\r\n1 3 R\r\n2 3 R\r\n4 5 B\r\n4 6 B\r\n5 6 B\r\n",
                "-1\r\n"
            ],
            [
                "3 3\r\n1 2 R\r\n1 3 R\r\n2 3 R\r\n",
                "0\r\n\r\n"
            ],
            [
                "11 7\r\n1 2 B\r\n1 3 R\r\n3 2 R\r\n4 5 R\r\n6 7 R\r\n8 9 R\r\n10 11 R\r\n",
                "5\r\n3 4 6 8 10 \r\n"
            ],
            [
                "2 1\r\n1 2 B\r\n",
                "0\r\n\r\n"
            ]
        ]
    }
]