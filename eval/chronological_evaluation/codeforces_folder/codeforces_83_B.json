[
    {
        "name": "Doctor",
        "description": "There are n animals in the queue to Dr. Dolittle. When an animal comes into\nthe office, the doctor examines him, gives prescriptions, appoints tests and\nmay appoint extra examination. Doc knows all the forest animals perfectly well\nand therefore knows exactly that the animal number i in the queue will have to\nvisit his office exactly ai times. We will assume that an examination takes\nmuch more time than making tests and other extra procedures, and therefore we\nwill assume that once an animal leaves the room, it immediately gets to the\nend of the queue to the doctor. Of course, if the animal has visited the\ndoctor as many times as necessary, then it doesn't have to stand at the end of\nthe queue and it immediately goes home. Doctor plans to go home after\nreceiving k animals, and therefore what the queue will look like at that\nmoment is important for him. Since the doctor works long hours and she can't\nget distracted like that after all, she asked you to figure it out. Input The\nfirst line of input data contains two space-separated integers n and k (1 \u2264 n\n\u2264 10^5, 0 \u2264 k \u2264 10^14). In the second line are given space-separated integers\na1, a2, ..., an (1 \u2264 ai \u2264 10^9). Please do not use the \nread or write 64-bit numbers in C++. It is recommended to use cin, cout\nstreams (you can also use the \noverall carry out less than k examinations, print a single number \"-1\"\n(without quotes). Otherwise, print the sequence of numbers \u2014 number of animals\nin the order in which they stand in the queue. Note that this sequence may be\nempty. This case is present in pretests. You can just print nothing or print\none \"End of line\"-character. Both will be accepted. Examples Input 3 3 1 2 1\nOutput 2 Input 4 10 3 3 2 1 Output -1 Input 7 10 1 3 3 1 2 3 1 Output 6 2 3\nNote In the first sample test: Before examination: 1, 2, 3 After the first\nexamination: 2, 3 After the second examination: 3, 2 After the third\nexamination: 2 In the second sample test: Before examination: 1, 2, 3, 4,\n5, 6, 7 After the first examination: 2, 3, 4, 5, 6, 7 After the second\nexamination: 3, 4, 5, 6, 7, 2 After the third examination: 4, 5, 6, 7, 2,\n3 After the fourth examination: 5, 6, 7, 2, 3 After the fifth examination:\n6, 7, 2, 3, 5 After the sixth examination: 7, 2, 3, 5, 6 After the seventh\nexamination: 2, 3, 5, 6 After the eighth examination: 3, 5, 6, 2 After the\nninth examination: 5, 6, 2, 3 After the tenth examination: 6, 2, 3\n\n",
        "cf_contest_id": 83,
        "cf_index": "B",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\n1 2 1\r\n",
                "2 \r\n"
            ],
            [
                "4 10\r\n3 3 2 1\r\n",
                "-1\r\n"
            ],
            [
                "7 10\r\n1 3 3 1 2 3 1\r\n",
                "6 2 3 \r\n"
            ]
        ],
        "private_cases": [
            [
                "1 0\r\n1\r\n",
                "1 \r\n"
            ],
            [
                "1 1\r\n1\r\n",
                "\r\n"
            ],
            [
                "6 101\r\n9 78 54 62 2 91\r\n",
                "4 6 2 3 \r\n"
            ],
            [
                "9 100\r\n11 11 11 11 11 11 11 11 11\r\n",
                "-1\r\n"
            ],
            [
                "10 77\r\n7 45 10 10 9 8 1 2 3 1\r\n",
                "2 \r\n"
            ],
            [
                "5 12\r\n1 3 4 1 5\r\n",
                "5 \r\n"
            ],
            [
                "5 23\r\n7 1 4 7 9\r\n",
                "1 4 5 \r\n"
            ],
            [
                "5 13\r\n1 1 1 5 5\r\n",
                "\r\n"
            ],
            [
                "5 41\r\n19 19 19 15 20\r\n",
                "2 3 4 5 1 \r\n"
            ],
            [
                "10 7\r\n5 1 2 5 4 3 5 2 2 4\r\n",
                "8 9 10 1 3 4 5 6 7 \r\n"
            ],
            [
                "10 109\r\n5 5 4 4 8 10 9 10 9 8\r\n",
                "-1\r\n"
            ],
            [
                "10 22\r\n2 2 1 4 4 3 1 1 2 2\r\n",
                "\r\n"
            ],
            [
                "10 1872\r\n195 187 177 197 183 169 192 194 200 178\r\n",
                "\r\n"
            ],
            [
                "20 430\r\n25 27 25 24 24 49 11 30 24 50 48 40 41 5 19 45 16 43 43 12\r\n",
                "12 13 16 18 19 2 6 8 10 11 \r\n"
            ],
            [
                "20 314\r\n7 14 13 11 11 11 14 14 9 9 12 11 13 13 10 13 11 12 10 10\r\n",
                "-1\r\n"
            ],
            [
                "20 252\r\n2 8 13 3 12 15 1 7 11 14 5 7 2 12 5 12 10 5 6 1\r\n",
                "-1\r\n"
            ],
            [
                "20 329\r\n21 48 18 162 100 7 83 104 32 145 24 122 5 25 16 99 53 116 164 79\r\n",
                "16 17 18 19 20 1 2 4 5 7 8 9 10 11 12 14 \r\n"
            ],
            [
                "50 892\r\n50 50 43 50 44 50 44 44 49 50 50 47 50 50 48 50 40 45 50 42 46 50 49 48 47 49 44 45 44 46 48 45 48 43 45 48 48 47 47 49 47 37 45 31 44 45 39 50 48 50\r\n",
                "43 44 45 46 47 48 49 50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 \r\n"
            ],
            [
                "50 68\r\n12 6 15 15 7 4 1 18 11 2 3 4 9 6 8 2 6 10 1 2 16 10 22 28 23 2 17 33 3 3 5 1 5 6 5 5 2 6 2 10 2 14 1 24 12 12 4 4 2 10\r\n",
                "21 22 23 24 25 26 27 28 29 30 31 33 34 35 36 37 38 39 40 41 42 44 45 46 47 48 49 50 1 2 3 4 5 6 8 9 11 12 13 14 15 17 18 \r\n"
            ],
            [
                "50 272\r\n7 4 4 5 2 1 8 2 8 7 7 8 3 3 4 10 1 5 10 7 2 1 3 1 6 3 7 1 5 8 5 10 1 7 9 9 4 9 8 2 6 10 4 6 4 10 10 2 8 5\r\n",
                "\r\n"
            ],
            [
                "50 224\r\n5 4 5 5 5 5 5 3 5 5 5 5 4 5 5 4 5 5 5 5 5 5 5 5 4 5 5 4 5 5 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 4 4 4 4\r\n",
                "33 34 35 36 37 38 39 40 41 42 43 44 45 46 \r\n"
            ],
            [
                "50 479\r\n15 64 28 16 6 4 28 3 20 55 4 43 48 21 23 75 2 42 14 6 51 27 50 7 26 13 5 12 7 36 19 3 11 1 9 1 6 23 12 7 19 24 25 19 11 11 42 15 14 40\r\n",
                "39 41 42 43 44 47 48 49 50 1 2 3 4 7 9 10 12 13 14 15 16 18 19 21 22 23 25 26 30 31 38 \r\n"
            ],
            [
                "150 2476\r\n70 21 114 127 22 11 29 59 51 59 35 3 53 88 5 8 44 4 8 100 1 27 1 25 27 56 48 22 23 103 85 66 14 58 20 7 176 11 19 26 105 97 83 3 29 30 52 92 59 11 135 37 59 8 66 20 47 19 143 16 93 18 57 71 1 13 141 1 119 6 2 87 40 68 28 22 20 53 31 19 15 33 32 9 70 63 16 26 77 7 45 52 73 25 22 21 68 79 16 3 164 22 3 42 15 6 1 18 59 3 55 110 33 2 93 11 31 23 92 24 35 116 38 101 53 3 70 4 76 46 2 45 1 3 14 35 57 21 113 8 45 36 32 45 60 13 68 27 40 17\r\n",
                "26 27 28 29 30 31 32 34 37 40 41 42 43 45 46 47 48 49 51 52 53 55 57 59 61 63 64 67 69 72 73 74 75 76 78 79 82 83 85 86 88 89 91 92 93 94 95 96 97 98 101 102 104 109 111 112 113 115 117 118 119 120 121 122 123 124 125 127 129 130 132 136 137 138 139 141 142 143 144 145 147 148 149 1 3 4 5 7 8 9 10 11 13 14 17 20 22 24 25 \r\n"
            ]
        ]
    }
]