[
    {
        "name": "Fibonacci Additions",
        "description": "One of my most productive days was throwing away 1,000 lines of code. \u2014 Ken\nThompson Fibonacci addition is an operation on an array \n    X\n of integers,\nparametrized by indices \n    l\n and \n    r\n. Fibonacci addition increases\n\n    X_l\n by \n    F_1\n, increases \n    X_l + 1\n by \n    F_2\n, and so on up\nto \n    X_r\n which is increased by \n    F_r - l + 1\n. \n    F_i\n denotes the\n\n    i\n-th Fibonacci number (\n    F_1 = 1\n, \n    F_2 = 1\n, \n    F_i = F_i -\n    1 + F_i - 2\n for \n    i > 2\n), and all operations are performed modulo\n\n    MOD\n. You are given two arrays \n    A\n and \n    B\n of the same length. We\nwill ask you to perform several Fibonacci additions on these arrays with\ndifferent parameters, and after each operation you have to report whether\narrays \n    A\n and \n    B\n are equal modulo \n    MOD\n. Input The first line\ncontains 3 numbers \n    n\n, \n    q\n and \n    MOD\n (\n    1 \n    \u2264 n, q \n    \u2264\n    3\n    \u00b7 10^5, 1 \n    \u2264 MOD \n    \u2264 10^9+7\n) \u2014 the length of the arrays, the\nnumber of operations, and the number modulo which all operations are\nperformed. The second line contains \n    n\n numbers \u2014 array \n    A\n (\n    0\n    \n    \u2264 A_i < MOD\n). The third line also contains \n    n\n numbers \u2014 array\n\n    B\n (\n    0 \n    \u2264 B_i < MOD\n). The next \n    q\n lines contain character\n\n    c\n and two numbers \n    l\n and \n    r\n (\n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 n\n)\n\u2014 operation parameters. If \n    c\n is \"A\", Fibonacci addition is to be\nperformed on array \n    A\n, and if it is is \"B\", the operation is to be\nperformed on \n    B\n. Output After each operation, print \"YES\" (without\nquotes) if the arrays are equal and \"NO\" otherwise. Letter case does not\nmatter. Examples Input 3 5 3 2 2 1 0 0 0 A 1 3 A 1 3 B 1 1 B 2 2 A 3 3 Output\nYES NO NO NO YES Input 5 3 10 2 5 0 3 5 3 5 8 2 5 B 2 3 B 3 4 A 1 2 Output NO\nNO YES Note Explanation of the test from the condition: Initially\n\n    A=[2,2,1]\n, \n    B=[0,0,0]\n. After operation \"A 1 3\": \n    A=[0,0,0]\n,\n\n    B=[0,0,0]\n (addition is modulo 3). After operation \"A 1 3\":\n\n    A=[1,1,2]\n, \n    B=[0,0,0]\n. After operation \"B 1 1\": \n    A=[1,1,2]\n,\n\n    B=[1,0,0]\n. After operation \"B 2 2\": \n    A=[1,1,2]\n, \n    B=[1,1,0]\n.\nAfter operation \"A 3 3\": \n    A=[1,1,0]\n, \n    B=[1,1,0]\n.\n\n",
        "cf_contest_id": 1634,
        "cf_index": "F",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "hashing",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 5 3\r\n2 2 1\r\n0 0 0\r\nA 1 3\r\nA 1 3\r\nB 1 1\r\nB 2 2\r\nA 3 3\r\n",
                "YES\r\nNO\r\nNO\r\nNO\r\nYES\r\n"
            ],
            [
                "5 3 10\r\n2 5 0 3 5\r\n3 5 8 2 5\r\nB 2 3\r\nB 3 4\r\nA 1 2\r\n",
                "NO\r\nNO\r\nYES\r\n"
            ]
        ],
        "private_cases": []
    }
]