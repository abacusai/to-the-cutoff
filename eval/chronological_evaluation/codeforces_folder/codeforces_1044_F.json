[
    {
        "name": "DFS",
        "description": "Let \n    T\n be a tree on \n    n\n vertices. Consider a graph \n    G_0\n,\ninitially equal to \n    T\n. You are given a sequence of \n    q\n updates, where\nthe \n    i\n-th update is given as a pair of two distinct integers \n    u_i\n\nand \n    v_i\n. For every \n    i\n from \n    1\n to \n    q\n, we define the graph\n\n    G_i\n as follows: If \n    G_i-1\n contains an edge \n    u_i,\n    v_i\n, then remove this edge to form \n    G_i\n. Otherwise, add this edge\nto \n    G_i-1\n to form \n    G_i\n. Formally, \n    G_i := G_i-1\n    \n    \n    \n    \n    u_i, v_i\n where \n    \n denotes the set\nsymmetric difference. Furthermore, it is guaranteed that \n    T\n is always a\nsubgraph of \n    G_i\n. In other words, an update never removes an edge of\n\n    T\n. Consider a connected graph \n    H\n and run a depth-first search on\nit. One can see that the tree edges (i.e. the edges leading to a not yet\nvisited vertex at the time of traversal) form a spanning tree of the graph\n\n    H\n. This spanning tree is not generally fixed for a particular graph \u2014 it\ndepends on the starting vertex, and on the order in which the neighbors of\neach vertex are traversed. We call vertex \n    w\n good if one can order the\nneighbors of each vertex in such a way that the depth-first search started\nfrom \n    w\n produces \n    T\n as the spanning tree. For every \n    i\n from\n\n    1\n to \n    q\n, find and report the number of good vertices. Input The\nfirst line contains two integers \n    n\n and \n    q\n (\n    3 \n    \u2264 n \n    \u2264\n    2\n    \u00b7 10^5\n, \n    1 \n    \u2264 q \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of nodes\nand the number of updates, respectively. Each of the next \n    n-1\n lines\ncontains two integers \n    u\n and \n    v\n (\n    1 \n    \u2264 u, v \n    \u2264 n\n, \n    u\n    \n     v\n) \u2014 vertices connected by an edge in \n    T\n. It is guaranteed that\nthis graph is a tree. Each of the next \n    q\n lines contains two integers\n\n    u\n and \n    v\n (\n    1 \n    \u2264 u, v \n    \u2264 n\n, \n    u \n     v\n) \u2014 the\nendpoints of the edge that is added or removed. It is guaranteed that this\nedge does not belong to \n    T\n. Output For each update, print one integer\n\n    k\n \u2014 the number of good vertices \n    w\n after the corresponding update.\nExamples Input 3 2 1 2 1 3 2 3 3 2 Output 2 3 Input 6 6 1 2 2 3 1 4 4 5 1 6 2\n5 3 4 5 2 6 4 3 4 6 5 Output 3 2 3 2 3 2 Note The first sample is depicted in\nthe following figure. After the first update, \n    G\n contains all three\npossible edges. The result of a DFS is as follows: Let the starting vertex be\n\n    1\n. We have two choices of ordering the neighbors of \n    1\n, either\n\n    [2, 3]\n or \n    [3, 2]\n. If we choose the former, then we reach vertex\n\n    2\n. Regardless of the ordering of its neighbors, the next visited vertex\nwill be \n    3\n. Thus, the spanning tree generated by this DFS will contain\nedges \n    1, 2\n and \n    2, 3\n, which does not equal to\n\n    T\n. If we choose the latter, we obtain a spanning tree with edges\n\n    1, 3\n and \n    2, 3\n. Hence, there is no way of\nordering the neighbors of vertices such that the DFS produces \n    T\n, and\nsubsequently \n    1\n is not a good vertex. Let the starting vertex be \n    2\n.\nWe have two choices of traversing its neighbors. If we visit \n    3\n first,\nthen the spanning tree will consist of edges \n    2,3\n and\n\n    1,3\n, which is not equal to \n    T\n. If we, however, visit\n\n    1\n first, then we can only continue to \n    3\n from here, and the\nspanning tree will consist of edges \n    1, 2\n and\n\n    1,3\n, which equals to \n    T\n. Hence, \n    2\n is a good vertex.\nThe case when we start in the vertex \n    3\n is symmetrical to starting in\n\n    2\n, and hence \n    3\n is a good vertex. Therefore, the answer is\n\n    2\n.After the second update, the edge between \n    2\n and \n    3\n is\nremoved, and \n    G = T\n. It follows that the spanning tree generated by DFS\nwill be always equal to \n    T\n independent of the choice of the starting\nvertex. Thus, the answer is \n    3\n. In the second sample, the set of good\nvertices after the corresponding query is: \n    2, 3, 5\n \n    3,\n    5\n \n    3, 4, 5\n \n    4, 5\n \n    4, 5, 6\n\n\n    5, 6\n\n\n",
        "cf_contest_id": 1044,
        "cf_index": "F",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3 2\r\n1 2\r\n1 3\r\n2 3\r\n3 2\r\n",
                "2\r\n3\r\n"
            ],
            [
                "6 6\r\n1 2\r\n2 3\r\n1 4\r\n4 5\r\n1 6\r\n2 5\r\n3 4\r\n5 2\r\n6 4\r\n3 4\r\n6 5\r\n",
                "3\r\n2\r\n3\r\n2\r\n3\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 3\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n2 4\r\n2 4\r\n2 5\r\n",
                "4\r\n5\r\n3\r\n"
            ],
            [
                "20 10\r\n12 1\r\n8 10\r\n6 4\r\n13 20\r\n2 16\r\n14 18\r\n8 3\r\n4 17\r\n5 1\r\n11 15\r\n19 16\r\n19 11\r\n13 12\r\n17 2\r\n18 3\r\n9 5\r\n20 7\r\n15 9\r\n10 7\r\n12 18\r\n10 1\r\n11 1\r\n18 2\r\n18 13\r\n13 2\r\n10 5\r\n12 4\r\n8 14\r\n2 9\r\n",
                "14\r\n13\r\n10\r\n6\r\n6\r\n6\r\n6\r\n4\r\n3\r\n3\r\n"
            ],
            [
                "20 10\r\n20 8\r\n3 10\r\n15 7\r\n4 7\r\n19 16\r\n11 20\r\n8 17\r\n19 9\r\n17 2\r\n3 13\r\n6 11\r\n6 12\r\n12 13\r\n4 5\r\n15 14\r\n5 10\r\n16 18\r\n2 18\r\n9 1\r\n15 3\r\n20 12\r\n20 18\r\n4 16\r\n17 6\r\n20 17\r\n20 14\r\n8 3\r\n18 12\r\n7 17\r\n",
                "16\r\n14\r\n11\r\n6\r\n6\r\n6\r\n5\r\n5\r\n5\r\n5\r\n"
            ],
            [
                "20 10\r\n4 11\r\n7 2\r\n20 8\r\n10 19\r\n15 14\r\n8 9\r\n2 6\r\n18 16\r\n9 10\r\n17 13\r\n12 16\r\n5 18\r\n6 15\r\n14 4\r\n3 1\r\n13 3\r\n11 19\r\n12 20\r\n1 7\r\n17 15\r\n9 5\r\n18 12\r\n1 13\r\n9 16\r\n20 18\r\n8 10\r\n7 14\r\n16 5\r\n17 15\r\n",
                "14\r\n9\r\n9\r\n9\r\n9\r\n9\r\n8\r\n7\r\n7\r\n10\r\n"
            ],
            [
                "20 10\r\n8 11\r\n2 18\r\n8 14\r\n19 6\r\n18 11\r\n15 10\r\n12 9\r\n7 1\r\n9 4\r\n12 20\r\n15 14\r\n7 13\r\n19 16\r\n20 2\r\n13 5\r\n17 16\r\n1 4\r\n10 17\r\n3 5\r\n5 1\r\n14 19\r\n15 16\r\n14 16\r\n15 6\r\n16 15\r\n15 17\r\n6 8\r\n9 7\r\n1 5\r\n",
                "18\r\n14\r\n14\r\n14\r\n13\r\n13\r\n13\r\n12\r\n10\r\n12\r\n"
            ],
            [
                "20 3\r\n3 10\r\n2 9\r\n10 11\r\n1 19\r\n8 3\r\n12 20\r\n8 14\r\n17 4\r\n10 16\r\n13 2\r\n5 13\r\n4 6\r\n15 19\r\n19 3\r\n18 4\r\n8 13\r\n18 20\r\n20 7\r\n14 18\r\n9 11\r\n7 5\r\n9 11\r\n",
                "2\r\n0\r\n2\r\n"
            ],
            [
                "20 9\r\n2 18\r\n14 20\r\n12 6\r\n15 8\r\n2 10\r\n17 20\r\n12 18\r\n7 14\r\n9 7\r\n6 8\r\n2 1\r\n20 13\r\n19 18\r\n11 19\r\n14 6\r\n8 4\r\n7 3\r\n5 15\r\n16 19\r\n4 7\r\n16 15\r\n20 5\r\n20 4\r\n18 17\r\n7 4\r\n15 16\r\n17 18\r\n20 5\r\n",
                "4\r\n0\r\n0\r\n0\r\n0\r\n0\r\n1\r\n3\r\n4\r\n"
            ],
            [
                "20 4\r\n7 6\r\n5 13\r\n12 9\r\n8 4\r\n11 13\r\n17 1\r\n16 19\r\n10 19\r\n16 11\r\n2 20\r\n3 20\r\n7 9\r\n12 18\r\n6 14\r\n17 8\r\n15 10\r\n14 1\r\n4 15\r\n3 5\r\n19 17\r\n14 11\r\n14 11\r\n19 17\r\n",
                "16\r\n12\r\n16\r\n20\r\n"
            ],
            [
                "20 10\r\n19 17\r\n3 13\r\n17 5\r\n14 15\r\n18 7\r\n10 12\r\n2 14\r\n6 10\r\n3 11\r\n13 16\r\n1 15\r\n4 19\r\n9 4\r\n2 8\r\n20 5\r\n6 16\r\n1 11\r\n12 9\r\n7 20\r\n2 9\r\n19 14\r\n3 4\r\n13 2\r\n4 6\r\n3 4\r\n2 9\r\n2 13\r\n19 14\r\n6 4\r\n",
                "10\r\n8\r\n8\r\n8\r\n8\r\n8\r\n8\r\n9\r\n17\r\n20\r\n"
            ],
            [
                "20 20\r\n7 13\r\n16 3\r\n17 6\r\n14 15\r\n18 2\r\n7 1\r\n14 19\r\n17 10\r\n3 10\r\n8 11\r\n6 9\r\n16 4\r\n18 20\r\n4 5\r\n15 11\r\n9 12\r\n1 8\r\n19 20\r\n13 12\r\n4 3\r\n5 9\r\n15 9\r\n13 20\r\n3 6\r\n16 8\r\n5 14\r\n19 9\r\n17 11\r\n20 8\r\n5 14\r\n9 15\r\n17 11\r\n8 20\r\n20 13\r\n4 3\r\n9 19\r\n9 5\r\n6 3\r\n16 8\r\n",
                "19\r\n14\r\n8\r\n5\r\n5\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n5\r\n5\r\n9\r\n11\r\n11\r\n20\r\n"
            ],
            [
                "20 3\r\n19 10\r\n16 9\r\n15 11\r\n1 17\r\n18 3\r\n12 5\r\n8 14\r\n17 6\r\n11 16\r\n10 2\r\n5 2\r\n7 6\r\n15 1\r\n19 4\r\n20 4\r\n3 13\r\n13 20\r\n12 7\r\n8 18\r\n9 11\r\n7 5\r\n9 11\r\n",
                "19\r\n18\r\n19\r\n"
            ],
            [
                "20 9\r\n20 2\r\n18 6\r\n10 1\r\n3 5\r\n9 3\r\n13 17\r\n15 4\r\n16 11\r\n4 11\r\n17 10\r\n8 14\r\n16 1\r\n7 15\r\n13 9\r\n7 20\r\n14 18\r\n19 8\r\n19 2\r\n12 6\r\n4 7\r\n16 15\r\n5 20\r\n10 2\r\n4 20\r\n5 20\r\n2 10\r\n4 20\r\n15 16\r\n",
                "19\r\n17\r\n9\r\n8\r\n8\r\n13\r\n16\r\n17\r\n19\r\n"
            ],
            [
                "20 8\r\n8 19\r\n6 4\r\n10 20\r\n2 13\r\n12 11\r\n13 18\r\n3 6\r\n15 16\r\n1 10\r\n17 2\r\n5 20\r\n12 1\r\n19 9\r\n14 8\r\n9 18\r\n5 3\r\n4 7\r\n7 15\r\n11 14\r\n15 2\r\n7 16\r\n9 20\r\n16 10\r\n11 2\r\n10 16\r\n11 2\r\n15 2\r\n",
                "4\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n12\r\n"
            ],
            [
                "20 5\r\n9 20\r\n3 11\r\n8 1\r\n12 19\r\n14 3\r\n20 15\r\n10 5\r\n6 5\r\n2 1\r\n17 4\r\n13 18\r\n6 16\r\n7 8\r\n11 7\r\n14 15\r\n4 16\r\n2 13\r\n19 18\r\n12 17\r\n7 14\r\n19 14\r\n17 3\r\n19 4\r\n2 7\r\n",
                "18\r\n12\r\n10\r\n9\r\n9\r\n"
            ],
            [
                "20 5\r\n8 6\r\n9 4\r\n13 6\r\n2 20\r\n18 8\r\n14 17\r\n3 14\r\n1 4\r\n18 1\r\n7 15\r\n10 19\r\n5 9\r\n19 20\r\n11 15\r\n7 10\r\n12 17\r\n16 3\r\n11 13\r\n12 2\r\n16 12\r\n12 3\r\n17 4\r\n5 2\r\n7 16\r\n",
                "17\r\n17\r\n4\r\n2\r\n2\r\n"
            ]
        ]
    }
]