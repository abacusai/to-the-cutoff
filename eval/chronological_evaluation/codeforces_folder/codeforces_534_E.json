[
    {
        "name": "Berland Local Positioning System",
        "description": "In Berland a bus travels along the main street of the capital. The street\nbegins from the main square and looks like a very long segment. There are n\nbus stops located along the street, the i-th of them is located at the\ndistance ai from the central square, all distances are distinct, the stops are\nnumbered in the order of increasing distance from the square, that is, ai < ai\n+ 1 for all i from 1 to n - 1. The bus starts its journey from the first stop,\nit passes stops 2, 3 and so on. It reaches the stop number n, turns around and\ngoes in the opposite direction to stop 1, passing all the intermediate stops\nin the reverse order. After that, it again starts to move towards stop n.\nDuring the day, the bus runs non-stop on this route. The bus is equipped with\nthe Berland local positioning system. When the bus passes a stop, the system\nnotes down its number. One of the key features of the system is that it can\nrespond to the queries about the distance covered by the bus for the parts of\nits path between some pair of stops. A special module of the system takes the\ninput with the information about a set of stops on a segment of the path, a\nstop number occurs in the set as many times as the bus drove past it. This\nmodule returns the length of the traveled segment of the path (or -1 if it is\nimpossible to determine the length uniquely). The operation of the module is\ncomplicated by the fact that stop numbers occur in the request not in the\norder they were visited but in the non-decreasing order. For example, if the\nnumber of stops is 6, and the part of the bus path starts at the bus stop\nnumber 5, ends at the stop number 3 and passes the stops as follows: , then\nthe request about this segment of the path will have form: 3, 4, 5, 5, 6. If\nthe bus on the segment of the path from stop 5 to stop 3 has time to drive\npast the 1-th stop (i.e., if we consider a segment that ends with the second\nvisit to stop 3 on the way from 5), then the request will have form: 1, 2, 2,\n3, 3, 4, 5, 5, 6. You will have to repeat the Berland programmers achievement\nand implement this function. Input The first line contains integer n (2 \u2264 n \u2264\n2\u00b710^5) \u2014 the number of stops. The second line contains n integers (1 \u2264 ai \u2264\n10^9) \u2014 the distance from the i-th stop to the central square. The numbers in\nthe second line go in the increasing order. The third line contains integer m\n(1 \u2264 m \u2264 4\u00b710^5) \u2014 the number of stops the bus visited on some segment of the\npath. The fourth line contains m integers (1 \u2264 bi \u2264 n) \u2014 the sorted list of\nnumbers of the stops visited by the bus on the segment of the path. The number\nof a stop occurs as many times as it was visited by a bus. It is guaranteed\nthat the query corresponds to some segment of the path. Output In the single\nline please print the distance covered by a bus. If it is impossible to\ndetermine it unambiguously, print - 1. Examples Input 6 2 3 5 7 11 13 5 3 4 5\n5 6 Output 10 Input 6 2 3 5 7 11 13 9 1 2 2 3 3 4 5 5 6 Output 16 Input 3 10\n200 300 4 1 2 2 3 Output -1 Input 3 1 2 3 4 1 2 2 3 Output 3 Note The first\ntest from the statement demonstrates the first example shown in the statement\nof the problem. The second test from the statement demonstrates the second\nexample shown in the statement of the problem. In the third sample there are\ntwo possible paths that have distinct lengths, consequently, the sought length\nof the segment isn't defined uniquely. In the fourth sample, even though two\ndistinct paths correspond to the query, they have the same lengths, so the\nsought length of the segment is defined uniquely.\n\n",
        "cf_contest_id": 534,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "hashing",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n2 3 5 7 11 13\r\n5\r\n3 4 5 5 6\r\n",
                "10\r\n"
            ],
            [
                "6\r\n2 3 5 7 11 13\r\n9\r\n1 2 2 3 3 4 5 5 6\r\n",
                "16\r\n"
            ],
            [
                "3\r\n10 200 300\r\n4\r\n1 2 2 3\r\n",
                "-1\r\n"
            ],
            [
                "3\r\n1 2 3\r\n4\r\n1 2 2 3\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 1000000000\r\n1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "2\r\n1 1000000000\r\n1\r\n2\r\n",
                "0\r\n"
            ],
            [
                "2\r\n1 1000000000\r\n2\r\n1 2\r\n",
                "999999999\r\n"
            ],
            [
                "2\r\n1 1000000000\r\n3\r\n1 1 2\r\n",
                "1999999998\r\n"
            ],
            [
                "2\r\n1 1000000000\r\n3\r\n1 2 2\r\n",
                "1999999998\r\n"
            ],
            [
                "2\r\n1 1000000000\r\n4\r\n1 1 2 2\r\n",
                "2999999997\r\n"
            ],
            [
                "3\r\n1 3 11\r\n2\r\n1 2\r\n",
                "2\r\n"
            ],
            [
                "3\r\n1 3 11\r\n2\r\n2 3\r\n",
                "8\r\n"
            ],
            [
                "3\r\n1 3 11\r\n3\r\n1 2 3\r\n",
                "10\r\n"
            ],
            [
                "3\r\n1 3 11\r\n3\r\n1 2 2\r\n",
                "4\r\n"
            ],
            [
                "3\r\n1 3 11\r\n6\r\n1 1 2 2 2 3\r\n",
                "22\r\n"
            ],
            [
                "3\r\n1 3 11\r\n6\r\n1 2 2 2 3 3\r\n",
                "28\r\n"
            ],
            [
                "4\r\n2 3 5 7\r\n6\r\n1 2 2 3 3 4\r\n",
                "-1\r\n"
            ],
            [
                "4\r\n2 3 5 7\r\n9\r\n1 1 2 2 2 3 3 3 4\r\n",
                "13\r\n"
            ],
            [
                "4\r\n2 3 5 7\r\n8\r\n1 2 2 2 3 3 3 4\r\n",
                "12\r\n"
            ],
            [
                "6\r\n2 3 5 7 9 11\r\n11\r\n1 2 2 3 3 4 4 5 5 5 6\r\n",
                "18\r\n"
            ]
        ]
    }
]