[
    {
        "name": "Different Arrays",
        "description": "You are given an array \n    a\n consisting of \n    n\n integers. You have to\nperform the sequence of \n    n-2\n operations on this array: during the first\noperation, you either add \n    a_2\n to \n    a_1\n and subtract \n    a_2\n from\n\n    a_3\n, or add \n    a_2\n to \n    a_3\n and subtract \n    a_2\n from\n\n    a_1\n; during the second operation, you either add \n    a_3\n to \n    a_2\n\nand subtract \n    a_3\n from \n    a_4\n, or add \n    a_3\n to \n    a_4\n and\nsubtract \n    a_3\n from \n    a_2\n; ... during the last operation, you either\nadd \n    a_n-1\n to \n    a_n-2\n and subtract \n    a_n-1\n from \n    a_n\n,\nor add \n    a_n-1\n to \n    a_n\n and subtract \n    a_n-1\n from\n\n    a_n-2\n. So, during the \n    i\n-th operation, you add the value of\n\n    a_i+1\n to one of its neighbors, and subtract it from the other\nneighbor. For example, if you have the array \n    [1, 2, 3, 4, 5]\n, one of the\npossible sequences of operations is: subtract \n    2\n from \n    a_3\n and add\nit to \n    a_1\n, so the array becomes \n    [3, 2, 1, 4, 5]\n; subtract \n    1\n\nfrom \n    a_2\n and add it to \n    a_4\n, so the array becomes \n    [3, 1, 1, 5,\n    5]\n; subtract \n    5\n from \n    a_3\n and add it to \n    a_5\n, so the array\nbecomes \n    [3, 1, -4, 5, 10]\n. So, the resulting array is \n    [3, 1, -4, 5,\n    10]\n. An array is reachable if it can be obtained by performing the\naforementioned sequence of operations on \n    a\n. You have to calculate the\nnumber of reachable arrays, and print it modulo \n    998244353\n. Input The\nfirst line contains one integer \n    n\n (\n    3 \n    \u2264 n \n    \u2264 300\n). The\nsecond line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264\n    a_i \n    \u2264 300\n). Output Print one integer \u2014 the number of reachable arrays.\nSince the answer can be very large, print its remainder modulo\n\n    998244353\n. Examples Input 4 1 1 1 1 Output 3 Input 5 1 2 3 5 0 Output 7\n\n",
        "cf_contest_id": 1783,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dp",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4\r\n1 1 1 1\r\n",
                "3\r\n"
            ],
            [
                "5\r\n1 2 3 5 0\r\n",
                "7\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n66 18 29\r\n",
                "2\r\n"
            ],
            [
                "10\r\n75 31 22 40 74 60 10 3 9 48\r\n",
                "256\r\n"
            ],
            [
                "18\r\n74 92 52 36 48 51 33 64 43 95 92 78 35 77 55 25 50 6\r\n",
                "64960\r\n"
            ],
            [
                "3\r\n44 61 71\r\n",
                "2\r\n"
            ],
            [
                "10\r\n53 41 43 29 86 34 100 54 68 6\r\n",
                "256\r\n"
            ],
            [
                "18\r\n87 0 95 59 3 25 22 47 35 87 59 57 44 45 75 58 80 61\r\n",
                "32648\r\n"
            ],
            [
                "3\r\n57 37 24\r\n",
                "2\r\n"
            ],
            [
                "10\r\n67 17 85 63 40 87 44 4 60 31\r\n",
                "256\r\n"
            ],
            [
                "18\r\n65 9 14 48 58 66 67 98 83 78 91 69 19 35 5 57 19 71\r\n",
                "65182\r\n"
            ],
            [
                "3\r\n35 35 34\r\n",
                "2\r\n"
            ],
            [
                "10\r\n45 27 95 53 96 60 67 55 51 22\r\n",
                "256\r\n"
            ],
            [
                "18\r\n10 76 57 82 2 51 79 48 42 69 91 36 95 4 25 67 15 24\r\n",
                "64998\r\n"
            ],
            [
                "3\r\n81 12 54\r\n",
                "2\r\n"
            ],
            [
                "10\r\n23 36 14 75 40 34 45 5 10 13\r\n",
                "256\r\n"
            ],
            [
                "18\r\n89 17 67 72 57 58 68 99 33 60 23 81 2 95 56 66 12 34\r\n",
                "65018\r\n"
            ]
        ]
    }
]