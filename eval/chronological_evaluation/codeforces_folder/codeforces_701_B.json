[
    {
        "name": "Cells Not Under Attack",
        "description": "Vasya has the square chessboard of size n \u00d7 n and m rooks. Initially the\nchessboard is empty. Vasya will consequently put the rooks on the board one\nafter another. The cell of the field is under rook's attack, if there is at\nleast one rook located in the same row or in the same column with this cell.\nIf there is a rook located in the cell, this cell is also under attack. You\nare given the positions of the board where Vasya will put rooks. For each rook\nyou have to determine the number of cells which are not under attack after\nVasya puts it on the board. Input The first line of the input contains two\nintegers n and m (1 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 min(100 000, n^2)) \u2014 the size of\nthe board and the number of rooks. Each of the next m lines contains integers\nxi and yi (1 \u2264 xi, yi \u2264 n) \u2014 the number of the row and the number of the\ncolumn where Vasya will put the i-th rook. Vasya puts rooks on the board in\nthe order they appear in the input. It is guaranteed that any cell will\ncontain no more than one rook. Output Print m integer, the i-th of them should\nbe equal to the number of cells that are not under attack after first i rooks\nare put. Examples Input 3 3 1 1 3 1 2 2 Output 4 2 0 Input 5 2 1 5 5 1 Output\n16 9 Input 100000 1 300 400 Output 9999800001 Note On the picture below show\nthe state of the board after put each of the three rooks. The cells which\npainted with grey color is not under the attack.\n\n",
        "cf_contest_id": 701,
        "cf_index": "B",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\n1 1\r\n3 1\r\n2 2\r\n",
                "4\r\n2\r\n0\r\n"
            ],
            [
                "5 2\r\n1 5\r\n5 1\r\n",
                "16\r\n9\r\n"
            ],
            [
                "100000 1\r\n300 400\r\n",
                "9999800001\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 4\r\n2 8\r\n1 8\r\n9 8\r\n6 9\r\n",
                "81\r\n72\r\n63\r\n48\r\n"
            ],
            [
                "30 30\r\n3 13\r\n27 23\r\n18 24\r\n18 19\r\n14 20\r\n7 10\r\n27 13\r\n20 27\r\n11 1\r\n21 10\r\n2 9\r\n28 12\r\n29 19\r\n28 27\r\n27 29\r\n30 12\r\n27 2\r\n4 5\r\n8 19\r\n21 2\r\n24 27\r\n14 22\r\n20 3\r\n18 3\r\n23 9\r\n28 6\r\n15 12\r\n2 2\r\n16 27\r\n1 14\r\n",
                "841\r\n784\r\n729\r\n702\r\n650\r\n600\r\n600\r\n552\r\n506\r\n484\r\n441\r\n400\r\n380\r\n380\r\n361\r\n342\r\n324\r\n289\r\n272\r\n272\r\n255\r\n240\r\n225\r\n225\r\n210\r\n196\r\n182\r\n182\r\n168\r\n143\r\n"
            ],
            [
                "70 31\r\n22 39\r\n33 43\r\n50 27\r\n70 9\r\n20 67\r\n61 24\r\n60 4\r\n60 28\r\n4 25\r\n30 29\r\n46 47\r\n51 48\r\n37 5\r\n14 29\r\n45 44\r\n68 35\r\n52 21\r\n7 37\r\n18 43\r\n44 22\r\n26 12\r\n39 37\r\n51 55\r\n50 23\r\n51 16\r\n16 49\r\n22 62\r\n35 45\r\n56 2\r\n20 51\r\n3 37\r\n",
                "4761\r\n4624\r\n4489\r\n4356\r\n4225\r\n4096\r\n3969\r\n3906\r\n3782\r\n3660\r\n3540\r\n3422\r\n3306\r\n3249\r\n3136\r\n3025\r\n2916\r\n2809\r\n2756\r\n2652\r\n2550\r\n2499\r\n2450\r\n2401\r\n2352\r\n2256\r\n2208\r\n2115\r\n2024\r\n1978\r\n1935\r\n"
            ],
            [
                "330 17\r\n259 262\r\n146 20\r\n235 69\r\n84 74\r\n131 267\r\n153 101\r\n32 232\r\n214 212\r\n239 157\r\n121 156\r\n10 45\r\n266 78\r\n52 258\r\n109 279\r\n193 276\r\n239 142\r\n321 89\r\n",
                "108241\r\n107584\r\n106929\r\n106276\r\n105625\r\n104976\r\n104329\r\n103684\r\n103041\r\n102400\r\n101761\r\n101124\r\n100489\r\n99856\r\n99225\r\n98910\r\n98282\r\n"
            ],
            [
                "500 43\r\n176 85\r\n460 171\r\n233 260\r\n73 397\r\n474 35\r\n290 422\r\n309 318\r\n280 415\r\n485 169\r\n106 22\r\n355 129\r\n180 301\r\n205 347\r\n197 93\r\n263 318\r\n336 382\r\n314 350\r\n476 214\r\n367 277\r\n333 166\r\n500 376\r\n236 17\r\n94 73\r\n116 204\r\n166 50\r\n168 218\r\n144 369\r\n340 91\r\n274 360\r\n171 360\r\n41 251\r\n262 478\r\n27 163\r\n151 491\r\n208 415\r\n448 386\r\n293 486\r\n371 479\r\n330 435\r\n220 374\r\n163 316\r\n155 158\r\n26 126\r\n",
                "249001\r\n248004\r\n247009\r\n246016\r\n245025\r\n244036\r\n243049\r\n242064\r\n241081\r\n240100\r\n239121\r\n238144\r\n237169\r\n236196\r\n235710\r\n234740\r\n233772\r\n232806\r\n231842\r\n230880\r\n229920\r\n228962\r\n228006\r\n227052\r\n226100\r\n225150\r\n224202\r\n223256\r\n222312\r\n221840\r\n220899\r\n219960\r\n219023\r\n218088\r\n217620\r\n216688\r\n215758\r\n214830\r\n213904\r\n212980\r\n212058\r\n211138\r\n210220\r\n"
            ],
            [
                "99999 1\r\n54016 16192\r\n",
                "9999600004\r\n"
            ],
            [
                "99991 9\r\n80814 65974\r\n12100 98787\r\n9390 76191\r\n5628 47659\r\n80075 25361\r\n75330 1630\r\n38758 99962\r\n33848 40352\r\n43732 52281\r\n",
                "9998000100\r\n9997800121\r\n9997600144\r\n9997400169\r\n9997200196\r\n9997000225\r\n9996800256\r\n9996600289\r\n9996400324\r\n"
            ],
            [
                "1 1\r\n1 1\r\n",
                "0\r\n"
            ]
        ]
    }
]