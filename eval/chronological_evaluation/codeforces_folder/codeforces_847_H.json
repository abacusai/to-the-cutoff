[
    {
        "name": "Load Testing",
        "description": "Polycarp plans to conduct a load testing of its new project Fakebook. He\nalready agreed with his friends that at certain points in time they will send\nrequests to Fakebook. The load testing will last n minutes and in the i-th\nminute friends will send ai requests. Polycarp plans to test Fakebook under a\nspecial kind of load. In case the information about Fakebook gets into the\nmass media, Polycarp hopes for a monotone increase of the load, followed by a\nmonotone decrease of the interest to the service. Polycarp wants to test this\nform of load. Your task is to determine how many requests Polycarp must add so\nthat before some moment the load on the server strictly increases and after\nthat moment strictly decreases. Both the increasing part and the decreasing\npart can be empty (i. e. absent). The decrease should immediately follow the\nincrease. In particular, the load with two equal neigbouring values is\nunacceptable. For example, if the load is described with one of the arrays [1,\n2, 8, 4, 3], [1, 3, 5] or [10], then such load satisfies Polycarp (in each of\nthe cases there is an increasing part, immediately followed with a decreasing\npart). If the load is described with one of the arrays [1, 2, 2, 1], [2, 1, 2]\nor [10, 10], then such load does not satisfy Polycarp. Help Polycarp to make\nthe minimum number of additional requests, so that the resulting load\nsatisfies Polycarp. He can make any number of additional requests at any\nminute from 1 to n. Input The first line contains a single integer n (1 \u2264 n \u2264\n100 000) \u2014 the duration of the load testing. The second line contains n\nintegers a1, a2, ..., an (1 \u2264 ai \u2264 10^9), where ai is the number of requests\nfrom friends in the i-th minute of the load testing. Output Print the minimum\nnumber of additional requests from Polycarp that would make the load strictly\nincreasing in the beginning and then strictly decreasing afterwards. Examples\nInput 5 1 4 3 2 5 Output 6 Input 5 1 2 2 2 1 Output 1 Input 7 10 20 40 50 70\n90 30 Output 0 Note In the first example Polycarp must make two additional\nrequests in the third minute and four additional requests in the fourth\nminute. So the resulting load will look like: [1, 4, 5, 6, 5]. In total,\nPolycarp will make 6 additional requests. In the second example it is enough\nto make one additional request in the third minute, so the answer is 1. In the\nthird example the load already satisfies all conditions described in the\nstatement, so the answer is 0.\n\n",
        "cf_contest_id": 847,
        "cf_index": "H",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 4 3 2 5\r\n",
                "6\r\n"
            ],
            [
                "5\r\n1 2 2 2 1\r\n",
                "1\r\n"
            ],
            [
                "7\r\n10 20 40 50 70 90 30\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "2\r\n1 15\r\n",
                "0\r\n"
            ],
            [
                "4\r\n36 54 55 9\r\n",
                "0\r\n"
            ],
            [
                "5\r\n984181411 215198610 969039668 60631313 85746445\r\n",
                "778956192\r\n"
            ],
            [
                "10\r\n12528139 986722043 1595702 997595062 997565216 997677838 999394520 999593240 772077 998195916\r\n",
                "1982580029\r\n"
            ],
            [
                "100\r\n9997 9615 4045 2846 7656 2941 2233 9214 837 2369 5832 578 6146 8773 164 7303 3260 8684 2511 6608 9061 9224 7263 7279 1361 1823 8075 5946 2236 6529 6783 7494 510 1217 1135 8745 6517 182 8180 2675 6827 6091 2730 897 1254 471 1990 1806 1706 2571 8355 5542 5536 1527 886 2093 1532 4868 2348 7387 5218 3181 3140 3237 4084 9026 504 6460 9256 6305 8827 840 2315 5763 8263 5068 7316 9033 7552 9939 8659 6394 4566 3595 2947 2434 1790 2673 6291 6736 8549 4102 953 8396 8985 1053 5906 6579 5854 6805\r\n",
                "478217\r\n"
            ]
        ]
    }
]