[
    {
        "name": "Heroes of Making Magic III",
        "description": "I\u2019m strolling on sunshine, yeah-ah! And doesn\u2019t it feel good! Well, it\ncertainly feels good for our Heroes of Making Magic, who are casually walking\non a one-directional road, fighting imps. Imps are weak and feeble creatures\nand they are not good at much. However, Heroes enjoy fighting them. For fun,\nif nothing else. Our Hero, Ignatius, simply adores imps. He is observing a\nline of imps, represented as a zero-indexed array of integers a of length n,\nwhere ai denotes the number of imps at the i-th position. Sometimes, imps can\nappear out of nowhere. When heroes fight imps, they select a segment of the\nline, start at one end of the segment, and finish on the other end, without\never exiting the segment. They can move exactly one cell left or right from\ntheir current position and when they do so, they defeat one imp on the cell\nthat they moved to, so, the number of imps on that cell decreases by one. This\nalso applies when heroes appear at one end of the segment, at the beginning of\ntheir walk. Their goal is to defeat all imps on the segment, without ever\nmoving to an empty cell in it (without imps), since they would get bored.\nSince Ignatius loves imps, he doesn\u2019t really want to fight them, so no imps\nare harmed during the events of this task. However, he would like you to tell\nhim whether it would be possible for him to clear a certain segment of imps in\nthe above mentioned way if he wanted to. You are given q queries, which have\ntwo types: 1 a b k \u2014 denotes that k imps appear at each cell from the interval\n[a, b] 2 a b - asks whether Ignatius could defeat all imps on the interval [a,\nb] in the way described above Input The first line contains a single integer n\n(1 \u2264 n \u2264 200 000), the length of the array a. The following line contains n\nintegers a1, a2, ..., an (0 \u2264 ai \u2264 5 000), the initial number of imps in each\ncell. The third line contains a single integer q (1 \u2264 q \u2264 300 000), the number\nof queries. The remaining q lines contain one query each. Each query is\nprovided by integers a, b and, possibly, k (0 \u2264 a \u2264 b < n, 0 \u2264 k \u2264 5 000).\nOutput For each second type of query output 1 if it is possible to clear the\nsegment, and 0 if it is not. Example Input 3 2 2 2 3 2 0 2 1 1 1 1 2 0 2\nOutput 0 1 Note For the first query, one can easily check that it is indeed\nimpossible to get from the first to the last cell while clearing everything.\nAfter we add 1 to the second position, we can clear the segment, for example\nby moving in the following way: .\n\n",
        "cf_contest_id": 717,
        "cf_index": "F",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2 2 2\r\n3\r\n2 0 2\r\n1 1 1 1\r\n2 0 2\r\n",
                "0\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n1 2 1\r\n3\r\n2 0 2\r\n1 2 2 1\r\n2 0 2\r\n",
                "0\r\n1\r\n"
            ],
            [
                "2\r\n1 2\r\n5\r\n2 0 1\r\n1 0 0 2\r\n2 0 1\r\n1 1 1 1\r\n2 0 1\r\n",
                "0\r\n0\r\n1\r\n"
            ],
            [
                "3\r\n7 1 2\r\n5\r\n2 1 2\r\n1 1 1 2\r\n2 1 2\r\n1 2 2 1\r\n2 1 2\r\n",
                "0\r\n0\r\n1\r\n"
            ],
            [
                "50\r\n5 7 2 6 10 6 6 7 2 4 9 1 7 7 10 6 6 3 10 3 5 2 8 9 1 8 8 7 4 3 7 4 5 8 4 7 2 7 2 2 4 1 4 8 10 7 1 8 7 8\r\n2\r\n2 48 49\r\n2 38 39\r\n",
                "0\r\n1\r\n"
            ]
        ]
    }
]