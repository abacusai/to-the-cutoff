[
    {
        "name": "More Queries to Array...",
        "description": "You've got an array, consisting of n integers: a1, a2, ..., an. Your task is\nto quickly run the queries of two types: Assign value x to all elements from l\nto r inclusive. After such query the values of the elements of array al, al +\n1, ..., ar become equal to x. Calculate and print sum , where k doesn't exceed\n5. As the value of the sum can be rather large, you should print it modulo\n1000000007 (10^9 + 7). Input The first line contains two integers n and m (1 \u2264\nn, m \u2264 10^5), showing, how many numbers are in the array and the number of\nqueries, correspondingly. The second line contains n integers: a1, a2, ..., an\n(0 \u2264 ai \u2264 10^9) \u2014 the initial values of the array elements. Then m queries\nfollow, one per line: The assign query has the following format: \"\", (1 \u2264 l \u2264\nr \u2264 n; 0 \u2264 x \u2264 10^9). The query to calculate the sum has the following format:\n\"\", (1 \u2264 l \u2264 r \u2264 n; 0 \u2264 k \u2264 5).All numbers in the input are integers. Output\nFor each query to calculate the sum print an integer \u2014 the required sum modulo\n1000000007 (10^9 + 7). Examples Input 4 5 5 10 2 1 ? 1 2 1 = 2 2 0 ? 2 4 3 = 1\n4 1 ? 1 4 5 Output 25 43 1300 Input 3 1 1000000000 1000000000 1000000000 ? 1 3\n0 Output 999999986\n\n",
        "cf_contest_id": 266,
        "cf_index": "E",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "math"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 5\r\n5 10 2 1\r\n? 1 2 1\r\n= 2 2 0\r\n? 2 4 3\r\n= 1 4 1\r\n? 1 4 5\r\n",
                "25\r\n43\r\n1300\r\n"
            ],
            [
                "3 1\r\n1000000000 1000000000 1000000000\r\n? 1 3 0\r\n",
                "999999986\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 10\r\n6 9 10 9 9 10 0 0 4 6\r\n? 1 2 1\r\n? 7 9 0\r\n? 3 10 0\r\n? 6 9 0\r\n? 8 10 0\r\n? 6 6 1\r\n= 5 8 10\r\n? 7 10 0\r\n= 7 8 10\r\n? 2 4 0\r\n",
                "24\r\n4\r\n48\r\n14\r\n10\r\n10\r\n30\r\n28\r\n"
            ],
            [
                "10 10\r\n6 4 1 8 7 10 3 5 1 5\r\n= 2 3 1\r\n= 1 3 0\r\n? 2 5 3\r\n? 8 8 5\r\n? 1 4 5\r\n= 4 9 1\r\n= 5 9 1\r\n? 3 3 4\r\n= 1 6 9\r\n? 5 9 5\r\n",
                "664\r\n5\r\n8192\r\n0\r\n4689\r\n"
            ],
            [
                "10 10\r\n8 7 3 8 5 2 6 5 10 0\r\n? 2 7 5\r\n= 3 8 5\r\n= 9 10 5\r\n? 1 6 4\r\n= 2 8 8\r\n= 1 5 2\r\n= 6 6 5\r\n? 7 8 1\r\n= 3 5 1\r\n= 7 8 0\r\n",
                "60073\r\n11410\r\n24\r\n"
            ],
            [
                "1 2\r\n0\r\n? 1 1 0\r\n? 1 1 5\r\n",
                "0\r\n0\r\n"
            ],
            [
                "1 2\r\n1000000000\r\n? 1 1 0\r\n? 1 1 5\r\n",
                "1000000000\r\n1000000000\r\n"
            ]
        ]
    }
]