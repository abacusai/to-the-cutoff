[
    {
        "name": "Just Kingdom",
        "description": "The Just Kingdom is ruled by a king and his \n    n\n lords, numbered \n    1\n to\n\n    n\n. Each of the lords is a vassal of some overlord, who might be the king\nhimself, or a different lord closer to the king. The king, and all his lords,\nare just and kind. Each lord has certain needs, which can be expressed as a\ncertain amount of money they need. However, if a lord, or the king, receives\nany money, they will first split it equally between all their vassals who\nstill have unmet needs. Only if all the needs of all their vassals are met,\nthey will take the money to fulfill their own needs. If there is any money\nleft over, they will return the excess to their overlord (who follows the\nstandard procedure for distributing money). At the beginning of the year, the\nking receives a certain sum of tax money and proceeds to split it according to\nthe rules above. If the amount of tax money is greater than the total needs of\nall the lords, the procedure guarantees everybody's needs will be fulfilled,\nand the excess money will be left with the king. However, if there is not\nenough money, some lords will not have their needs met. For each lord,\ndetermine the minimum amount of tax money the king has to receive so that this\nlord's needs are met. Input The first line of the input contains the number of\nlords \n    n\n (\n    0 \n    \u2264 n \n    \u2264 3 \n    \u00b7 10^5\n). Each of the next \n    n\n\nlines describes one of the lords. The \n    i\n-th line contains two integers:\n\n    o_i\n (\n    0 \n    \u2264 o_i < i\n) \u2014 the index of the overlord of the\n\n    i\n-th lord (with zero meaning the king is the overlord), and \n    m_i\n\n(\n    1 \n    \u2264 m_i \n    \u2264 10^6\n) \u2014 the amount of money the \n    i\n-th lord\nneeds. Output Print \n    n\n integer numbers \n    t_i\n. The \n    i\n-th number\nshould be the minimum integer amount of tax money the king has to receive for\nwhich the needs of the \n    i\n-th lord will be met. Example Input 5 0 2 1 2 0\n1 1 1 0 5 Output 11 7 3 5 11 Note In the sample input, if the king receives\n\n    5\n units of tax money, he will split it equally between his vassals \u2014 the\nlords \n    1\n, \n    3\n, and \n    5\n, with each receiving \n    5/3\n\nof money. Lord \n    1\n will split the money equally between his vassals \u2014\n\n    2\n and \n    4\n, with each receiving \n    5/6\n. Lord \n    5\n\nwill keep the money (having no vassals). Lord \n    3\n will keep \n    1\n unit\nof money, and give the remaining \n    2/3\n to the king. The king\nwill then split the \n    2/3\n between the vassals with unmet needs \u2014\n\n    1\n and \n    5\n, passing \n    1/3\n to each. Lord \n    5\n will\nkeep the extra cash (now having a total of \n    2\n, still not enough to meet\nhis needs). Lord \n    1\n will split it equally between his vassals, and the\nextra \n    1/6\n will be enough to meet the needs of lord \n    4\n.\n\n",
        "cf_contest_id": 1578,
        "cf_index": "J",
        "cf_rating": 3100,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "dfs and similar"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [],
        "private_cases": []
    }
]