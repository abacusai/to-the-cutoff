[
    {
        "name": "Secure Password",
        "description": "This is an interactive problem. Ayush devised yet another scheme to set the\npassword of his lock. The lock has \n    n\n slots where each slot can hold any\nnon-negative integer. The password \n    P\n is a sequence of \n    n\n integers,\n\n    i\n-th element of which goes into the \n    i\n-th slot of the lock. To set\nthe password, Ayush comes up with an array \n    A\n of \n    n\n integers each in\nthe range \n    [0, 2^63-1]\n. He then sets the \n    i\n-th element of \n    P\n\nas the bitwise OR of all integers in the array except \n    A_i\n. You need to\nguess the password. To make a query, you can choose a non-empty subset of\nindices of the array and ask the bitwise OR all elements of the array with\nindex in this subset. You can ask no more than 13 queries. Input The first\nline of input contains one integer \n    n\n \n    (2 \n    \u2264 n \n    \u2264 1000)\n \u2014 the\nnumber of slots in the lock. Interaction To ask a query print a single line:\nIn the beginning print \"? c \" (without quotes) where \n    c\n \n    (1 \n    \u2264 c\n    \n    \u2264 n)\n denotes the size of the subset of indices being queried, followed\nby \n    c\n distinct space-separated integers in the range \n    [1, n]\n. For\neach query, you will receive an integer \n    x\n \u2014 the bitwise OR of values in\nthe array among all the indices queried. If the subset of indices queried is\ninvalid or you exceeded the number of queries then you will get \n    x = -1\n.\nIn this case, you should terminate the program immediately. When you have\nguessed the password, print a single line \"! \" (without quotes), followed by\n\n    n\n space-separated integers \u2014 the password sequence. Guessing the\npassword does not count towards the number of queries asked. The interactor is\nnot adaptive. The array \n    A\n does not change with queries. After printing a\nquery do not forget to output the end of the line and flush the output.\nOtherwise, you will get Idleness limit exceeded. To do this, use:\nfflush(stdout) or cout.flush() in C++; System.out.flush() in Java;\nflush(output) in Pascal; stdout.flush() in Python; see the documentation for\nother languages.Hacks To hack the solution, use the following test format: On\nthe first line print a single integer \n    n\n \n    (2 \n    \u2264 n \n    \u2264 1000)\n \u2014\nthe number of slots in the lock. The next line should contain \n    n\n space-\nseparated integers in the range \n    [0, 2^63 - 1]\n \u2014 the array \n    A\n.\nExample Input 3 1 2 4 Output ? 1 1 ? 1 2 ? 1 3 ! 6 5 3 Note The array \n    A\n\nin the example is \n    1, 2, 4\n. The first element of the password\nis bitwise OR of \n    A_2\n and \n    A_3\n, the second element is bitwise OR of\n\n    A_1\n and \n    A_3\n and the third element is bitwise OR of \n    A_1\n and\n\n    A_2\n. Hence the password sequence is \n    6, 5, 3\n.\n\n",
        "cf_contest_id": 1365,
        "cf_index": "G",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "combinatorics",
            "constructive algorithms",
            "interactive",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 2 4\r\n",
                "7\r\n6\r\n5\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n1 2 3\r\n",
                "7\r\n3\r\n3\r\n3\r\n"
            ],
            [
                "4\r\n0 0 0 1\r\n",
                "7\r\n1\r\n1\r\n1\r\n0\r\n"
            ],
            [
                "2\r\n0 1\r\n",
                "7\r\n1\r\n0\r\n"
            ],
            [
                "10\r\n822981260158260519 28316250877914571 779547116602436424 578223540024979436 335408917861648766 74859962623690078 252509054433933439 9223372036854775807 760713016476190622 919845426262703496\r\n",
                "8\r\n9223372036854775807\r\n9223372036854775807\r\n9223372036854775807\r\n9223372036854775807\r\n9223372036854775807\r\n9223372036854775807\r\n9223372036854775807\r\n1152921504606846975\r\n9223372036854775807\r\n9223372036854775807\r\n"
            ]
        ]
    }
]