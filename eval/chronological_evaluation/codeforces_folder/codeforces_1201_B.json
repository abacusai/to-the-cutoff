[
    {
        "name": "Zero Array",
        "description": "You are given an array \n    a_1, a_2, \n    \u2026, a_n\n. In one operation you can\nchoose two elements \n    a_i\n and \n    a_j\n (\n    i \n     j\n) and decrease\neach of them by one. You need to check whether it is possible to make all the\nelements equal to zero or not. Input The first line contains a single integer\n\n    n\n (\n    2 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the size of the array. The second line\ncontains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264\n    10^9\n) \u2014 the elements of the array. Output Print \"YES\" if it is possible to\nmake all elements zero, otherwise print \"NO\". Examples Input 4 1 1 2 2 Output\nYES Input 6 1 2 3 4 5 6 Output NO Note In the first example, you can make all\nelements equal to zero in \n    3\n operations: Decrease \n    a_1\n and\n\n    a_2\n, Decrease \n    a_3\n and \n    a_4\n, Decrease \n    a_3\n and \n    a_4\n\nIn the second example, one can show that it is impossible to make all elements\nequal to zero.\n\n",
        "cf_contest_id": 1201,
        "cf_index": "B",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 1 2 2\r\n",
                "YES\r\n"
            ],
            [
                "6\r\n1 2 3 4 5 6\r\n",
                "NO\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 1\r\n",
                "YES\r\n"
            ],
            [
                "2\r\n1 2\r\n",
                "NO\r\n"
            ],
            [
                "5\r\n1000000000 1000000000 1000000000 1000000000 1000000000\r\n",
                "YES\r\n"
            ],
            [
                "2\r\n641009859 641009859\r\n",
                "YES\r\n"
            ],
            [
                "2\r\n9859 9859\r\n",
                "YES\r\n"
            ],
            [
                "2\r\n10051 9859\r\n",
                "NO\r\n"
            ],
            [
                "2\r\n10052 9859\r\n",
                "NO\r\n"
            ],
            [
                "2\r\n9860 9859\r\n",
                "NO\r\n"
            ],
            [
                "3\r\n319728747 773363571 580543238\r\n",
                "YES\r\n"
            ],
            [
                "3\r\n10224 4237 5987\r\n",
                "YES\r\n"
            ],
            [
                "3\r\n772674020 797853944 81685387\r\n",
                "NO\r\n"
            ],
            [
                "3\r\n10406 5987 4237\r\n",
                "NO\r\n"
            ],
            [
                "3\r\n10407 5987 4237\r\n",
                "NO\r\n"
            ],
            [
                "3\r\n10225 4237 5987\r\n",
                "NO\r\n"
            ],
            [
                "4\r\n673102149 496813081 561219907 702209411\r\n",
                "YES\r\n"
            ],
            [
                "6\r\n7926 6259 770 7448 25457 3054\r\n",
                "YES\r\n"
            ],
            [
                "5\r\n564718673 365329221 412106895 291882089 585325539\r\n",
                "NO\r\n"
            ],
            [
                "7\r\n2532 23007 2387 4898 4636 5422 2988\r\n",
                "NO\r\n"
            ],
            [
                "8\r\n3343 33870 9537 1563 709 8515 5451 4713\r\n",
                "NO\r\n"
            ],
            [
                "9\r\n9486 407 8791 38849 4191 197 5807 8030 1939\r\n",
                "NO\r\n"
            ],
            [
                "2\r\n999999954 999999992\r\n",
                "NO\r\n"
            ],
            [
                "3\r\n999999932 999999969 999999907\r\n",
                "YES\r\n"
            ],
            [
                "4\r\n2 3 3 4\r\n",
                "YES\r\n"
            ]
        ]
    }
]