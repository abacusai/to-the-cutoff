[
    {
        "name": "Snow Walking Robot",
        "description": "Recently you have bought a snow walking robot and brought it home. Suppose\nyour home is a cell \n    (0, 0)\n on an infinite grid. You also have the\nsequence of instructions of this robot. It is written as the string \n    s\n\nconsisting of characters 'L', 'R', 'U' and 'D'. If the robot is in the cell\n\n    (x, y)\n right now, he can move to one of the adjacent cells (depending on\nthe current instruction). If the current instruction is 'L', then the robot\ncan move to the left to \n    (x - 1, y)\n; if the current instruction is 'R',\nthen the robot can move to the right to \n    (x + 1, y)\n; if the current\ninstruction is 'U', then the robot can move to the top to \n    (x, y + 1)\n; if\nthe current instruction is 'D', then the robot can move to the bottom to\n\n    (x, y - 1)\n. You've noticed the warning on the last page of the manual:\nif the robot visits some cell (except \n    (0, 0)\n) twice then it breaks. So\nthe sequence of instructions is valid if the robot starts in the cell \n    (0,\n    0)\n, performs the given instructions, visits no cell other than \n    (0, 0)\n\ntwo or more times and ends the path in the cell \n    (0, 0)\n. Also cell \n    (0,\n    0)\n should be visited at most two times: at the beginning and at the end (if\nthe path is empty then it is visited only once). For example, the following\nsequences of instructions are considered valid: \"UD\", \"RL\",\n\"UUURULLDDDDLDDRRUU\", and the following are considered invalid: \"U\" (the\nendpoint is not \n    (0, 0)\n) and \"UUDD\" (the cell \n    (0, 1)\n is visited\ntwice). The initial sequence of instructions, however, might be not valid. You\ndon't want your robot to break so you decided to reprogram it in the following\nway: you will remove some (possibly, all or none) instructions from the\ninitial sequence of instructions, then rearrange the remaining instructions as\nyou wish and turn on your robot to move. Your task is to remove as few\ninstructions from the initial sequence as possible and rearrange the remaining\nones so that the sequence is valid. Report the valid sequence of the maximum\nlength you can obtain. Note that you can choose any order of remaining\ninstructions (you don't need to minimize the number of swaps or any other\nsimilar metric). You have to answer \n    q\n independent test cases. Input The\nfirst line of the input contains one integer \n    q\n (\n    1 \n    \u2264 q \n    \u2264 2\n    \n    \u00b7 10^4\n) \u2014 the number of test cases. The next \n    q\n lines contain\ntest cases. The \n    i\n-th test case is given as the string \n    s\n consisting\nof at least \n    1\n and no more than \n    10^5\n characters 'L', 'R', 'U' and\n'D' \u2014 the initial sequence of instructions. It is guaranteed that the sum of\n\n    |s|\n (where \n    |s|\n is the length of \n    s\n) does not exceed\n\n    10^5\n over all test cases (\n    \u2211 |s| \n    \u2264 10^5\n). Output For each\ntest case print the answer on it. In the first line print the maximum number\nof remaining instructions. In the second line print the valid sequence of\nremaining instructions \n    t\n the robot has to perform. The moves are\nperformed from left to right in the order of the printed sequence. If there\nare several answers, you can print any. If the answer is \n    0\n, you are\nallowed to print an empty line (but you can don't print it). Example Input 6\nLRU DURLDRUDRULRDURDDL LRUDDLRUDRUL LLLLRRRR URDUR LLL Output 2 LR 14\nRUURDDDDLLLUUR 12 ULDDDRRRUULL 2 LR 2 UD 0 Note There are only two possible\nanswers in the first test case: \"LR\" and \"RL\". The picture corresponding to\nthe second test case: Note that the direction of traverse does not matter\nAnother correct answer to the third test case: \"URDDLLLUURDR\".\n\n",
        "cf_contest_id": 1272,
        "cf_index": "B",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\nLRU\r\nDURLDRUDRULRDURDDL\r\nLRUDDLRUDRUL\r\nLLLLRRRR\r\nURDUR\r\nLLL\r\n",
                "2 LR\r\n14 LLLUUUURRRDDDD\r\n12 LLLUUURRRDDD\r\n2 LR\r\n2 UD\r\n0 \r\n"
            ]
        ],
        "private_cases": []
    }
]