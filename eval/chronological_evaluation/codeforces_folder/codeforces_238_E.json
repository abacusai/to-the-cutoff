[
    {
        "name": "Meeting Her",
        "description": "Urpal lives in a big city. He has planned to meet his lover tonight. The city\nhas n junctions numbered from 1 to n. The junctions are connected by m\ndirected streets, all the roads have equal length. Urpal lives in junction a\nand the date is planned in a restaurant in junction b. He wants to use public\ntransportation to get to junction b. There are k bus transportation companies.\nAt the beginning of every second, a bus from the i-th company chooses a random\nshortest path between junction si and junction ti and passes through it. There\nmight be no path from si to ti. In that case no bus will leave from si to ti.\nIf a bus passes through a junction where Urpal stands, he can get on the bus.\nHe can also get o\u001bff the bus at any junction along the path. Now Urpal wants\nto know if it's possible to go to the date using public transportation in a\nfinite amount of time (the time of travel is the sum of length of the traveled\nroads) and what is the minimum number of buses he should take in the worst\ncase. At any moment Urpal knows only his own position and the place where the\ndate will be. When he gets on the bus he knows only the index of the company\nof this bus. Of course Urpal knows the city map and the the pairs (si, ti) for\neach company. Note that Urpal doesn't know buses velocity. Input The first\nline of the input contains four integers n, m, a, b (2 \u2264 n \u2264 100; 0 \u2264 m \u2264 n\u00b7(n\n- 1); 1 \u2264 a, b \u2264 n; a \u2260 b). The next m lines contain two integers each ui and\nvi (1 \u2264 ui, vi \u2264 n; ui \u2260 vi) describing a directed road from junction ui to\njunction vi. All roads in the input will be distinct. The next line contains\nan integer k (0 \u2264 k \u2264 100). There will be k lines after this, each containing\ntwo integers si and ti (1 \u2264 si, ti \u2264 n; si \u2260 ti) saying there is a bus route\nstarting at si and ending at ti. Please note that there might be no path from\nsi to ti, this case is described in the problem statement. Output In the only\nline of output print the minimum number of buses Urpal should get on on his\nway in the worst case. If it's not possible to reach the destination in the\nworst case print -1. Examples Input 7 8 1 7 1 2 1 3 2 4 3 4 4 6 4 5 6 7 5 7 3\n2 7 1 4 5 7 Output 2 Input 4 4 1 2 1 2 1 3 2 4 3 4 1 1 4 Output -1\n\n",
        "cf_contest_id": 238,
        "cf_index": "E",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "graphs",
            "shortest paths"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 8 1 7\r\n1 2\r\n1 3\r\n2 4\r\n3 4\r\n4 6\r\n4 5\r\n6 7\r\n5 7\r\n3\r\n2 7\r\n1 4\r\n5 7\r\n",
                "2\r\n"
            ],
            [
                "4 4 1 2\r\n1 2\r\n1 3\r\n2 4\r\n3 4\r\n1\r\n1 4\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "4 8 1 4\r\n1 2\r\n1 4\r\n2 1\r\n2 3\r\n3 1\r\n3 2\r\n3 4\r\n4 1\r\n2\r\n2 1\r\n2 4\r\n",
                "-1\r\n"
            ],
            [
                "4 4 1 2\r\n1 2\r\n1 3\r\n2 4\r\n3 4\r\n1\r\n1 4\r\n",
                "-1\r\n"
            ],
            [
                "2 1 1 2\r\n2 1\r\n1\r\n1 2\r\n",
                "-1\r\n"
            ],
            [
                "4 8 1 4\r\n1 2\r\n1 4\r\n2 1\r\n2 3\r\n3 1\r\n3 2\r\n3 4\r\n4 1\r\n2\r\n2 1\r\n2 4\r\n",
                "-1\r\n"
            ],
            [
                "5 6 1 5\r\n1 2\r\n1 3\r\n3 4\r\n2 4\r\n2 5\r\n3 5\r\n3\r\n1 4\r\n2 5\r\n3 5\r\n",
                "2\r\n"
            ],
            [
                "11 14 6 7\r\n1 2\r\n1 3\r\n3 4\r\n2 4\r\n2 5\r\n3 5\r\n6 1\r\n5 7\r\n6 8\r\n8 9\r\n9 10\r\n10 7\r\n1 11\r\n8 11\r\n6\r\n1 4\r\n2 5\r\n3 5\r\n2 7\r\n6 11\r\n8 7\r\n",
                "4\r\n"
            ],
            [
                "11 14 6 7\r\n1 2\r\n1 3\r\n3 4\r\n2 4\r\n2 5\r\n3 5\r\n6 1\r\n5 7\r\n6 8\r\n8 9\r\n9 10\r\n10 7\r\n1 11\r\n8 11\r\n5\r\n1 4\r\n2 5\r\n3 5\r\n2 7\r\n6 11\r\n",
                "-1\r\n"
            ],
            [
                "11 14 6 7\r\n1 2\r\n1 3\r\n3 4\r\n2 4\r\n2 5\r\n3 5\r\n6 1\r\n5 7\r\n6 8\r\n8 9\r\n9 10\r\n10 7\r\n1 11\r\n8 11\r\n5\r\n1 4\r\n3 5\r\n5 7\r\n6 11\r\n8 7\r\n",
                "-1\r\n"
            ],
            [
                "11 14 6 7\r\n1 2\r\n1 3\r\n3 4\r\n2 4\r\n2 5\r\n3 5\r\n6 1\r\n5 7\r\n6 8\r\n8 9\r\n9 10\r\n10 7\r\n1 11\r\n8 11\r\n5\r\n1 4\r\n3 5\r\n2 7\r\n6 11\r\n8 7\r\n",
                "4\r\n"
            ],
            [
                "2 0 2 1\r\n2\r\n1 2\r\n2 1\r\n",
                "-1\r\n"
            ],
            [
                "2 0 2 1\r\n2\r\n1 2\r\n2 1\r\n",
                "-1\r\n"
            ],
            [
                "2 0 2 1\r\n2\r\n2 1\r\n1 2\r\n",
                "-1\r\n"
            ],
            [
                "2 0 2 1\r\n2\r\n1 2\r\n2 1\r\n",
                "-1\r\n"
            ],
            [
                "2 0 1 2\r\n2\r\n1 2\r\n2 1\r\n",
                "-1\r\n"
            ],
            [
                "2 0 1 2\r\n2\r\n2 1\r\n1 2\r\n",
                "-1\r\n"
            ],
            [
                "2 0 2 1\r\n2\r\n2 1\r\n1 2\r\n",
                "-1\r\n"
            ],
            [
                "2 0 2 1\r\n2\r\n1 2\r\n2 1\r\n",
                "-1\r\n"
            ],
            [
                "2 0 1 2\r\n2\r\n1 2\r\n2 1\r\n",
                "-1\r\n"
            ],
            [
                "2 0 1 2\r\n2\r\n2 1\r\n1 2\r\n",
                "-1\r\n"
            ],
            [
                "10 10 7 2\r\n6 10\r\n5 3\r\n8 7\r\n4 3\r\n8 9\r\n2 4\r\n10 2\r\n2 5\r\n7 6\r\n9 6\r\n56\r\n5 4\r\n3 4\r\n5 9\r\n10 8\r\n7 10\r\n7 9\r\n8 1\r\n9 3\r\n8 4\r\n10 6\r\n1 9\r\n5 8\r\n10 3\r\n2 8\r\n4 6\r\n5 1\r\n8 2\r\n6 1\r\n8 9\r\n6 5\r\n5 7\r\n7 3\r\n4 2\r\n6 3\r\n9 6\r\n9 10\r\n2 7\r\n6 7\r\n2 5\r\n6 8\r\n4 7\r\n9 2\r\n7 2\r\n5 10\r\n3 9\r\n8 5\r\n7 8\r\n3 2\r\n4 5\r\n3 8\r\n8 7\r\n9 1\r\n4 1\r\n3 7\r\n1 8\r\n1 2\r\n4 9\r\n1 10\r\n1 6\r\n9 8\r\n9 4\r\n9 5\r\n4 3\r\n2 10\r\n4 10\r\n6 9\r\n",
                "1\r\n"
            ],
            [
                "10 10 4 5\r\n5 9\r\n9 2\r\n2 3\r\n10 6\r\n2 4\r\n8 6\r\n7 8\r\n3 7\r\n4 7\r\n7 10\r\n6\r\n3 2\r\n5 2\r\n4 6\r\n9 2\r\n1 3\r\n5 1\r\n",
                "-1\r\n"
            ],
            [
                "10 8 9 3\r\n7 4\r\n3 4\r\n5 8\r\n8 6\r\n10 5\r\n10 2\r\n8 9\r\n2 8\r\n62\r\n9 6\r\n7 6\r\n10 1\r\n8 3\r\n5 1\r\n4 3\r\n1 4\r\n1 8\r\n6 7\r\n1 7\r\n4 2\r\n7 1\r\n6 10\r\n3 4\r\n6 3\r\n7 9\r\n4 7\r\n2 10\r\n6 1\r\n5 4\r\n9 5\r\n5 7\r\n6 9\r\n6 8\r\n3 7\r\n9 2\r\n5 9\r\n2 6\r\n9 10\r\n3 10\r\n1 6\r\n7 3\r\n4 6\r\n3 5\r\n7 2\r\n10 6\r\n8 5\r\n2 9\r\n5 8\r\n8 10\r\n9 1\r\n6 2\r\n1 3\r\n2 8\r\n9 4\r\n10 2\r\n3 9\r\n8 7\r\n8 6\r\n4 1\r\n1 5\r\n3 8\r\n4 8\r\n5 2\r\n8 9\r\n2 7\r\n2 4\r\n10 8\r\n8 4\r\n3 1\r\n10 5\r\n7 8\r\n",
                "-1\r\n"
            ],
            [
                "10 8 5 9\r\n9 10\r\n6 4\r\n6 8\r\n3 2\r\n5 3\r\n7 3\r\n2 10\r\n3 9\r\n54\r\n7 8\r\n10 1\r\n5 3\r\n9 3\r\n5 10\r\n10 2\r\n2 4\r\n4 2\r\n2 3\r\n3 9\r\n4 1\r\n2 6\r\n10 3\r\n6 10\r\n3 10\r\n1 7\r\n5 6\r\n7 5\r\n3 5\r\n4 5\r\n5 2\r\n6 9\r\n7 10\r\n6 5\r\n4 9\r\n3 6\r\n7 1\r\n4 10\r\n1 3\r\n4 8\r\n8 10\r\n10 5\r\n6 7\r\n2 7\r\n6 2\r\n9 5\r\n2 1\r\n8 3\r\n1 4\r\n3 4\r\n10 4\r\n9 1\r\n5 7\r\n1 5\r\n8 1\r\n10 6\r\n6 1\r\n6 8\r\n2 9\r\n4 7\r\n1 10\r\n7 9\r\n9 10\r\n8 6\r\n",
                "2\r\n"
            ],
            [
                "10 10 4 6\r\n8 4\r\n4 7\r\n2 8\r\n10 7\r\n9 3\r\n8 10\r\n5 6\r\n6 3\r\n5 9\r\n3 2\r\n4\r\n7 4\r\n6 9\r\n6 1\r\n10 6\r\n",
                "-1\r\n"
            ],
            [
                "10 12 2 3\r\n8 5\r\n10 5\r\n6 5\r\n9 5\r\n3 9\r\n5 2\r\n7 5\r\n3 7\r\n2 4\r\n3 10\r\n3 6\r\n3 8\r\n9\r\n1 3\r\n8 5\r\n9 7\r\n2 8\r\n7 1\r\n1 9\r\n3 5\r\n10 7\r\n9 6\r\n",
                "-1\r\n"
            ]
        ]
    }
]