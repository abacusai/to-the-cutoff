[
    {
        "name": "Deadly Laser",
        "description": "The robot is placed in the top left corner of a grid, consisting of \n    n\n\nrows and \n    m\n columns, in a cell \n    (1, 1)\n. In one step, it can move\ninto a cell, adjacent by a side to the current one: \n    (x, y) \n    \u2192\n    (x, y + 1)\n; \n    (x, y) \n    \u2192 (x + 1, y)\n; \n    (x, y) \n    \u2192\n    (x, y - 1)\n; \n    (x, y) \n    \u2192 (x - 1, y)\n. The robot can't move\noutside the grid. The cell \n    (s_x, s_y)\n contains a deadly laser. If the\nrobot comes into some cell that has distance less than or equal to \n    d\n to\nthe laser, it gets evaporated. The distance between two cells \n    (x_1, y_1)\n\nand \n    (x_2, y_2)\n is \n    |x_1 - x_2| + |y_1 - y_2|\n. Print the smallest\nnumber of steps that the robot can take to reach the cell \n    (n, m)\n without\ngetting evaporated or moving outside the grid. If it's not possible to reach\nthe cell \n    (n, m)\n, print -1. The laser is neither in the starting cell,\nnor in the ending cell. The starting cell always has distance greater than\n\n    d\n to the laser. Input The first line contains a single integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of testcases. The only line of each\ntestcase contains five integers \n    n, m, s_x, s_y, d\n (\n    2 \n    \u2264 n, m \n    \u2264\n    1000\n; \n    1 \n    \u2264 s_x \n    \u2264 n\n; \n    1 \n    \u2264 s_y \n    \u2264 m\n; \n    0 \n    \u2264 d\n    \n    \u2264 n + m\n) \u2014 the size of the grid, the cell that contains the laser and\nthe evaporating distance of the laser. The laser is neither in the starting\ncell, nor in the ending cell (\n    (s_x, s_y) \n    \u2260 (1, 1)\n and \n    (s_x, s_y)\n    \n    \u2260 (n, m)\n). The starting cell \n    (1, 1)\n always has distance greater\nthan \n    d\n to the laser (\n    |s_x - 1| + |s_y - 1| > d\n). Output For each\ntestcase, print a single integer. If it's possible to reach the cell \n    (n,\n    m)\n from \n    (1, 1)\n without getting evaporated or moving outside the grid,\nthen print the smallest amount of steps it can take the robot to reach it.\nOtherwise, print -1. Example Input 3 2 3 1 3 0 2 3 1 3 1 5 5 3 4 1 Output 3 -1\n8\n\n",
        "cf_contest_id": 1721,
        "cf_index": "B",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2 3 1 3 0\r\n2 3 1 3 1\r\n5 5 3 4 1\r\n",
                "3\r\n-1\r\n8\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n776 123 5 7 3\r\n",
                "897\r\n"
            ],
            [
                "1\r\n1000 1000 99 99 2\r\n",
                "1998\r\n"
            ],
            [
                "1\r\n1000 1000 99 9 21\r\n",
                "1998\r\n"
            ],
            [
                "1\r\n1000 1000 10 10 0\r\n",
                "1998\r\n"
            ],
            [
                "1\r\n2 3 1 3 0\r\n",
                "3\r\n"
            ],
            [
                "2\r\n2 3 1 3 0\r\n2 3 1 3 1\r\n",
                "3\r\n-1\r\n"
            ],
            [
                "1\r\n2 3 1 3 1\r\n",
                "-1\r\n"
            ],
            [
                "2\r\n3 3 2 2 1\r\n5 5 3 3 1\r\n",
                "-1\r\n8\r\n"
            ],
            [
                "1\r\n972 439 242 299 296\r\n",
                "1409\r\n"
            ],
            [
                "2\r\n3 5 2 3 1\r\n5 3 3 2 1\r\n",
                "-1\r\n-1\r\n"
            ]
        ]
    }
]