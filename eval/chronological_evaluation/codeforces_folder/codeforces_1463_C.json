[
    {
        "name": "Busy Robot",
        "description": "You have a robot that can move along a number line. At time moment \n    0\n it\nstands at point \n    0\n. You give \n    n\n commands to the robot: at time\n\n    t_i\n seconds you command the robot to go to point \n    x_i\n. Whenever the\nrobot receives a command, it starts moving towards the point \n    x_i\n with\nthe speed of \n    1\n unit per second, and he stops when he reaches that point.\nHowever, while the robot is moving, it ignores all the other commands that you\ngive him. For example, suppose you give three commands to the robot: at time\n\n    1\n move to point \n    5\n, at time \n    3\n move to point \n    0\n and at\ntime \n    6\n move to point \n    4\n. Then the robot stands at \n    0\n until\ntime \n    1\n, then starts moving towards \n    5\n, ignores the second command,\nreaches \n    5\n at time \n    6\n and immediately starts moving to \n    4\n to\nexecute the third command. At time \n    7\n it reaches \n    4\n and stops there.\nYou call the command \n    i\n successful, if there is a time moment in the\nrange \n    [t_i, t_i + 1]\n (i. e. after you give this command and before you\ngive another one, both bounds inclusive; we consider \n    t_n + 1 =\n    +\n    \u221e\n) when the robot is at point \n    x_i\n. Count the number of\nsuccessful commands. Note that it is possible that an ignored command is\nsuccessful. Input The first line contains a single integer \n    t\n (\n    1 \n    \u2264\n    t \n    \u2264 1000\n) \u2014 the number of test cases. The next lines describe the test\ncases. The first line of a test case contains a single integer \n    n\n (\n    1\n    \n    \u2264 n \n    \u2264 10^5\n) \u2014 the number of commands. The next \n    n\n lines\ndescribe the commands. The \n    i\n-th of these lines contains two integers\n\n    t_i\n and \n    x_i\n (\n    1 \n    \u2264 t_i \n    \u2264 10^9\n, \n    -10^9 \n    \u2264 x_i\n    \n    \u2264 10^9\n) \u2014 the time and the point of the \n    i\n-th command. The\ncommands are ordered by time, that is, \n    t_i < t_i + 1\n for all possible\n\n    i\n. The sum of \n    n\n over test cases does not exceed \n    10^5\n. Output\nFor each testcase output a single integer \u2014 the number of successful commands.\nExample Input 8 3 1 5 3 0 6 4 3 1 5 2 4 10 -5 5 2 -5 3 1 4 1 5 1 6 1 4 3 3 5\n-3 9 2 12 0 8 1 1 2 -6 7 2 8 3 12 -9 14 2 18 -1 23 9 5 1 -4 4 -7 6 -1 7 -3 8\n-7 2 1 2 2 -2 6 3 10 5 5 8 0 12 -4 14 -7 19 -5 Output 1 2 0 2 1 1 0 2 Note The\nmovements of the robot in the first test case are described in the problem\nstatement. Only the last command is successful. In the second test case the\nsecond command is successful: the robot passes through target point \n    4\n at\ntime \n    5\n. Also, the last command is eventually successful. In the third\ntest case no command is successful, and the robot stops at \n    -5\n at time\nmoment \n    7\n. Here are the \n    0\n-indexed sequences of the positions of the\nrobot in each second for each testcase of the example. After the cut all the\npositions are equal to the last one: \n    [0, 0, 1, 2, 3, 4, 5, 4, 4,\n    \n    \u2026]\n \n    [0, 0, 1, 2, 3, 4, 5, 5, 5, 5, 5, 4, 3, 2, 1, 0, -1, -2, -3,\n    -4, -5, -5, \n    \u2026]\n \n    [0, 0, 0, -1, -2, -3, -4, -5, -5, \n    \u2026]\n\n\n    [0, 0, 0, 0, 1, 2, 3, 3, 3, 3, 2, 2, 2, 1, 0, 0, \n    \u2026]\n \n    [0, 0, 1,\n    0, -1, -2, -3, -4, -5, -6, -6, -6, -6, -7, -8, -9, -9, -9, -9, -8, -7, -6, -5,\n    -4, -3, -2, -1, -1, \n    \u2026]\n \n    [0, 0, -1, -2, -3, -4, -4, -3, -2, -1, -1,\n    \n    \u2026]\n \n    [0, 0, 1, 2, 2, \n    \u2026]\n \n    [0, 0, 0, 0, 1, 2, 3, 4, 5, 6,\n    7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -7,\n    \n    \u2026]\n\n\n",
        "cf_contest_id": 1463,
        "cf_index": "C",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8\r\n3\r\n1 5\r\n3 0\r\n6 4\r\n3\r\n1 5\r\n2 4\r\n10 -5\r\n5\r\n2 -5\r\n3 1\r\n4 1\r\n5 1\r\n6 1\r\n4\r\n3 3\r\n5 -3\r\n9 2\r\n12 0\r\n8\r\n1 1\r\n2 -6\r\n7 2\r\n8 3\r\n12 -9\r\n14 2\r\n18 -1\r\n23 9\r\n5\r\n1 -4\r\n4 -7\r\n6 -1\r\n7 -3\r\n8 -7\r\n2\r\n1 2\r\n2 -2\r\n6\r\n3 10\r\n5 5\r\n8 0\r\n12 -4\r\n14 -7\r\n19 -5\r\n",
                "1\r\n2\r\n0\r\n2\r\n1\r\n1\r\n0\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2\r\n1 -99999999\r\n1000000000 1000000000\r\n",
                "2\r\n"
            ],
            [
                "1\r\n2\r\n1 999999998\r\n999999999 -999999999\r\n",
                "2\r\n"
            ],
            [
                "1\r\n2\r\n1 999999999\r\n1000000000 -999999999\r\n",
                "2\r\n"
            ],
            [
                "1\r\n2\r\n1 -199999999\r\n1000000000 1000000000\r\n",
                "2\r\n"
            ],
            [
                "1\r\n2\r\n1 999999998\r\n999999999 -1000000000\r\n",
                "2\r\n"
            ],
            [
                "1\r\n2\r\n1 -999999999\r\n1000000000 1000000000\r\n",
                "2\r\n"
            ],
            [
                "1\r\n3\r\n1 999999998\r\n999999999 -1000000000\r\n1000000000 1000000000\r\n",
                "1\r\n"
            ],
            [
                "1\r\n2\r\n1 999999999\r\n1000000000 -1000000000\r\n",
                "2\r\n"
            ],
            [
                "1\r\n1\r\n1 -1000000000\r\n",
                "1\r\n"
            ],
            [
                "1\r\n2\r\n1 -999999997\r\n1000000000 100000000\r\n",
                "2\r\n"
            ],
            [
                "1\r\n3\r\n1 999999998\r\n999999999 -1000000000\r\n1000000000 -1000000000\r\n",
                "2\r\n"
            ],
            [
                "1\r\n3\r\n1 -999999999\r\n2 1\r\n1000000000 1000000000\r\n",
                "1\r\n"
            ],
            [
                "1\r\n3\r\n1 999999999\r\n999999999 -1000000000\r\n1000000000 -1000000000\r\n",
                "1\r\n"
            ],
            [
                "1\r\n2\r\n1 -999999999\r\n1000000000 147483648\r\n",
                "2\r\n"
            ],
            [
                "1\r\n2\r\n1 999999996\r\n999999999 -999999999\r\n",
                "2\r\n"
            ],
            [
                "1\r\n2\r\n1 999999995\r\n1000000000 -1000000000\r\n",
                "2\r\n"
            ],
            [
                "1\r\n2\r\n1 -999999995\r\n1000000000 1000000000\r\n",
                "2\r\n"
            ],
            [
                "1\r\n2\r\n1 999999998\r\n1000000000 -1000000000\r\n",
                "2\r\n"
            ],
            [
                "2\r\n6\r\n1 -999999990\r\n999999993 999999997\r\n999999995 999999996\r\n999999996 999999997\r\n999999997 999999998\r\n999999998 999999999\r\n3\r\n1 999999998\r\n999999999 -1000000000\r\n1000000000 1000000000\r\n",
                "1\r\n1\r\n"
            ]
        ]
    }
]