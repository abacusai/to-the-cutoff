[
    {
        "name": "Diverging Directions",
        "description": "You are given a directed weighted graph with n nodes and 2n - 2 edges. The\nnodes are labeled from 1 to n, while the edges are labeled from 1 to 2n - 2.\nThe graph's edges can be split into two parts. The first n - 1 edges will form\na rooted spanning tree, with node 1 as the root. All these edges will point\naway from the root. The last n - 1 edges will be from node i to node 1, for\nall 2 \u2264 i \u2264 n. You are given q queries. There are two types of queries 1 i w:\nChange the weight of the i-th edge to w 2 u v: Print the length of the\nshortest path between nodes u to v Given these queries, print the shortest\npath lengths. Input The first line of input will contain two integers n, q (2\n\u2264 n, q \u2264 200 000), the number of nodes, and the number of queries,\nrespectively. The next 2n - 2 integers will contain 3 integers ai, bi, ci,\ndenoting a directed edge from node ai to node bi with weight ci. The first n -\n1 of these lines will describe a rooted spanning tree pointing away from node\n1, while the last n - 1 of these lines will have bi = 1. More specifically,\nThe edges (a1, b1), (a2, b2), ... (an - 1, bn - 1) will describe a rooted\nspanning tree pointing away from node 1. bj = 1 for n \u2264 j \u2264 2n - 2. an, an +\n1, ..., a2n - 2 will be distinct and between 2 and n. The next q lines will\ncontain 3 integers, describing a query in the format described in the\nstatement. All edge weights will be between 1 and 10^6. Output For each type 2\nquery, print the length of the shortest path in its own line. Example Input 5\n9 1 3 1 3 2 2 1 4 3 3 5 4 5 1 5 3 1 6 2 1 7 4 1 8 2 1 1 2 1 3 2 3 5 2 5 2 1 1\n100 2 1 3 1 8 30 2 4 2 2 2 4 Output 0 1 4 8 100 132 10\n\n",
        "cf_contest_id": 838,
        "cf_index": "B",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 9\r\n1 3 1\r\n3 2 2\r\n1 4 3\r\n3 5 4\r\n5 1 5\r\n3 1 6\r\n2 1 7\r\n4 1 8\r\n2 1 1\r\n2 1 3\r\n2 3 5\r\n2 5 2\r\n1 1 100\r\n2 1 3\r\n1 8 30\r\n2 4 2\r\n2 2 4\r\n",
                "0\r\n1\r\n4\r\n8\r\n100\r\n132\r\n10\r\n"
            ]
        ],
        "private_cases": []
    }
]