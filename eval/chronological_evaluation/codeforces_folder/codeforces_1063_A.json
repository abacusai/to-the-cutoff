[
    {
        "name": "Oh Those Palindromes",
        "description": "A non-empty string is called palindrome, if it reads the same from the left to\nthe right and from the right to the left. For example, \"abcba\", \"a\", and\n\"abba\" are palindromes, while \"abab\" and \"xy\" are not. A string is called a\nsubstring of another string, if it can be obtained from that string by\ndropping some (possibly zero) number of characters from the beginning and from\nthe end of it. For example, \"abc\", \"ab\", and \"c\" are substrings of the string\n\"abc\", while \"ac\" and \"d\" are not. Let's define a palindromic count of the\nstring as the number of its substrings that are palindromes. For example, the\npalindromic count of the string \"aaa\" is \n    6\n because all its substrings\nare palindromes, and the palindromic count of the string \"abc\" is \n    3\n\nbecause only its substrings of length \n    1\n are palindromes. You are given a\nstring \n    s\n. You can arbitrarily rearrange its characters. You goal is to\nobtain a string with the maximum possible value of palindromic count. Input\nThe first line contains an integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 100\n     000\n)\n\u2014 the length of string \n    s\n. The second line contains string \n    s\n that\nconsists of exactly \n    n\n lowercase characters of Latin alphabet. Output\nPrint string \n    t\n, which consists of the same set of characters (and each\ncharacters appears exactly the same number of times) as string \n    s\n.\nMoreover, \n    t\n should have the maximum possible value of palindromic count\namong all such strings strings. If there are multiple such strings, print any\nof them. Examples Input 5 oolol Output ololo Input 16 gagadbcgghhchbdf Output\nabccbaghghghgdfd Note In the first example, string \"ololo\" has \n    9\n\npalindromic substrings: \"o\", \"l\", \"o\", \"l\", \"o\", \"olo\", \"lol\", \"olo\", \"ololo\".\nNote, that even though some substrings coincide, they are counted as many\ntimes as they appear in the resulting string. In the second example, the\npalindromic count of string \"abccbaghghghgdfd\" is \n    29\n.\n\n",
        "cf_contest_id": 1063,
        "cf_index": "A",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\noolol\r\n",
                "llooo\r\n"
            ],
            [
                "16\r\ngagadbcgghhchbdf\r\n",
                "aabbccddfgggghhh\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\nz\r\n",
                "z\r\n"
            ],
            [
                "2\r\naz\r\n",
                "az\r\n"
            ],
            [
                "2\r\naa\r\n",
                "aa\r\n"
            ],
            [
                "15\r\nabacabadabacaba\r\n",
                "aaaaaaaabbbbccd\r\n"
            ],
            [
                "21\r\narozaupalanalapuazora\r\n",
                "aaaaaaaallnoopprruuzz\r\n"
            ],
            [
                "9\r\nabcabcabc\r\n",
                "aaabbbccc\r\n"
            ],
            [
                "10\r\nmsunonames\r\n",
                "aemmnnossu\r\n"
            ],
            [
                "4\r\nmems\r\n",
                "emms\r\n"
            ],
            [
                "6\r\nmsucmc\r\n",
                "ccmmsu\r\n"
            ],
            [
                "7\r\nlolikek\r\n",
                "eikkllo\r\n"
            ]
        ]
    }
]