[
    {
        "name": "The hat",
        "description": "This is an interactive problem. Imur Ishakov decided to organize a club for\npeople who love to play the famous game \u00abThe hat\u00bb. The club was visited by n\nstudents, where n is even. Imur arranged them all in a circle and held a draw\nto break the students in pairs, but something went wrong. The participants are\nnumbered so that participant i and participant i + 1 (1 \u2264 i \u2264 n - 1) are\nadjacent, as well as participant n and participant 1. Each student was given a\npiece of paper with a number in such a way, that for every two adjacent\nstudents, these numbers differ exactly by one. The plan was to form students\nwith the same numbers in a pair, but it turned out that not all numbers\nappeared exactly twice. As you know, the most convenient is to explain the\nwords to the partner when he is sitting exactly across you. Students with\nnumbers i and sit across each other. Imur is wondering if there are two people\nsitting across each other with the same numbers given. Help him to find such\npair of people if it exists. You can ask questions of form \u00abwhich number was\nreceived by student i?\u00bb, and the goal is to determine whether the desired pair\nexists in no more than 60 questions. Input At the beginning the even integer n\n(2 \u2264 n \u2264 100 000) is given \u2014 the total number of students. You are allowed to\nask no more than 60 questions. Output To ask the question about the student i\n(1 \u2264 i \u2264 n), you should print \u00ab? i\u00bb. Then from standard output you can read\nthe number ai received by student i ( - 10^9 \u2264 ai \u2264 10^9). When you find the\ndesired pair, you should print \u00ab! i\u00bb, where i is any student who belongs to\nthe pair (1 \u2264 i \u2264 n). If you determined that such pair doesn't exist, you\nshould output \u00ab! -1\u00bb. In both cases you should immediately terminate the\nprogram. The query that contains your answer is not counted towards the limit\nof 60 queries. Please make sure to flush the standard output after each\ncommand. For example, in C++ use function fflush(stdout), in Java call\nSystem.out.flush(), in Pascal use flush(output) and stdout.flush() for Python\nlanguage. Hacking Use the following format for hacking: In the first line,\nprint one even integer n (2 \u2264 n \u2264 100 000) \u2014 the total number of students. In\nthe second line print n integers ai ( - 10^9 \u2264 ai \u2264 10^9) separated by spaces,\nwhere ai is the number to give to i-th student. Any two adjacent elements,\nincluding n and 1, must differ by 1 or - 1. The hacked solution will not have\ndirect access to the sequence ai. Examples Input 8 2 2 Output ? 4 ? 8 ! 4\nInput 6 1 2 3 2 1 0 Output ? 1 ? 2 ? 3 ? 4 ? 5 ? 6 ! -1 Note Input-output in\nstatements illustrates example interaction. In the first sample the selected\nsequence is 1, 2, 1, 2, 3, 4, 3, 2 In the second sample the selection sequence\nis 1, 2, 3, 2, 1, 0.\n\n",
        "cf_contest_id": 1019,
        "cf_index": "B",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "interactive"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8\r\n1 2 1 2 3 4 3 2\r\n",
                "3\r\n6\r\n"
            ],
            [
                "6\r\n1 2 3 2 1 0\r\n",
                "-1\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n1 2 1 0 -1 0 -1 -2 -1 0\r\n",
                "-1\r\n0\r\n"
            ],
            [
                "100\r\n-1 -2 -1 -2 -3 -2 -1 0 1 0 -1 0 1 0 1 2 1 0 1 0 1 0 1 0 -1 -2 -1 -2 -3 -4 -5 -6 -5 -6 -7 -6 -5 -4 -3 -2 -1 -2 -3 -4 -3 -4 -3 -4 -3 -2 -3 -4 -5 -6 -7 -6 -7 -6 -5 -6 -7 -6 -5 -6 -7 -6 -7 -8 -7 -6 -7 -6 -5 -6 -5 -4 -3 -4 -3 -2 -1 -2 -1 0 1 2 1 0 -1 -2 -1 0 1 2 1 0 1 0 1 0\r\n",
                "78\r\n14\r\n"
            ],
            [
                "100\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\r\n",
                "24\r\n12\r\n"
            ],
            [
                "10\r\n-1 0 -1 -2 -3 -2 -1 0 1 0\r\n",
                "-1\r\n0\r\n"
            ],
            [
                "10\r\n447979281 447979282 447979281 447979280 447979279 447979280 447979279 447979278 447979279 447979280\r\n",
                "-1\r\n0\r\n"
            ],
            [
                "10\r\n-426734852 -426734851 -426734852 -426734853 -426734854 -426734853 -426734852 -426734851 -426734850 -426734851\r\n",
                "-1\r\n0\r\n"
            ],
            [
                "10\r\n1 2 3 4 5 4 3 2 1 0\r\n",
                "-1\r\n0\r\n"
            ],
            [
                "10\r\n1 0 1 0 1 0 1 0 1 0\r\n",
                "-1\r\n0\r\n"
            ],
            [
                "100\r\n-1 -2 -1 -2 -3 -4 -3 -4 -5 -6 -5 -4 -5 -6 -7 -6 -7 -8 -7 -8 -7 -6 -7 -8 -7 -6 -5 -4 -5 -4 -3 -2 -1 0 1 2 1 2 3 2 3 4 5 6 5 6 5 6 7 6 5 4 3 4 3 4 5 6 7 8 7 6 5 6 7 6 7 6 5 4 3 2 3 2 3 2 3 4 3 4 5 6 7 6 5 4 3 4 5 4 3 4 3 2 3 2 1 0 -1 0\r\n",
                "40\r\n12\r\n"
            ],
            [
                "100\r\n1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0\r\n",
                "0\r\n14\r\n"
            ]
        ]
    }
]