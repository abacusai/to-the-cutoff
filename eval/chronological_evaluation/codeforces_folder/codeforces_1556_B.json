[
    {
        "name": "Take Your Places!",
        "description": "William has an array of \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n. In one\nmove he can swap two neighboring items. Two items \n    a_i\n and \n    a_j\n are\nconsidered neighboring if the condition \n    |i - j| = 1\n is satisfied.\nWilliam wants you to calculate the minimal number of swaps he would need to\nperform to make it so that the array does not contain two neighboring items\nwith the same parity. Input Each test contains multiple test cases. The first\nline contains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n).\nDescription of the test cases follows. The first line of each test case\ncontains an integer \n    n\n \n    (1 \n    \u2264 n \n    \u2264 10^5)\n which is the total\nnumber of items in William's array. The second line contains \n    n\n integers\n\n    a_1, a_2, \n    \u2026, a_n\n \n    (1 \n    \u2264 a_i \n    \u2264 10^9)\n which are\nWilliam's array. It is guaranteed that the sum of \n    n\n over all test cases\ndoes not exceed \n    10^5\n. Output For each test case output the minimal\nnumber of operations needed or \n    -1\n if it is impossible to get the array\nto a state when no neighboring numbers have the same parity. Example Input 5 3\n6 6 1 1 9 6 1 1 1 2 2 2 2 8 6 6 6 2 3 4 5 1 Output 1 0 3 -1 2 Note In the\nfirst test case the following sequence of operations would satisfy the\nrequirements: swap(2, 3). Array after performing the operation: \n    [6, 1,\n    6]\n In the second test case the array initially does not contain two\nneighboring items of the same parity. In the third test case the following\nsequence of operations would satisfy the requirements: swap(3, 4). Array after\nperforming the operation: \n    [1, 1, 2, 1, 2, 2]\n swap(2, 3). Array after\nperforming the operation: \n    [1, 2, 1, 1, 2, 2]\n swap(4, 5). Array after\nperforming the operation: \n    [1, 2, 1, 2, 1, 2]\n In the fourth test case it\nis impossible to satisfy the requirements. In the fifth test case the\nfollowing sequence of operations would satisfy the requirements: swap(2, 3).\nArray after performing the operation: \n    [6, 3, 2, 4, 5, 1]\n swap(4, 5).\nArray after performing the operation: \n    [6, 3, 2, 5, 4, 1]\n\n\n",
        "cf_contest_id": 1556,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3\r\n6 6 1\r\n1\r\n9\r\n6\r\n1 1 1 2 2 2\r\n2\r\n8 6\r\n6\r\n6 2 3 4 5 1\r\n",
                "1\r\n0\r\n3\r\n-1\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n7\r\n3 3 4 4 4 4 4\r\n",
                "-1\r\n"
            ],
            [
                "5\r\n3\r\n2 4 6\r\n5\r\n4 4 4 4 4\r\n5\r\n1 3 5 7 9\r\n5\r\n1 1 1 1 1\r\n5\r\n4 8 10 6 2\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "1\r\n3\r\n1 1 1\r\n",
                "-1\r\n"
            ]
        ]
    }
]