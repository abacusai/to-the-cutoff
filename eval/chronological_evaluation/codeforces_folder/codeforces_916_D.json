[
    {
        "name": "Jamie and To-do List",
        "description": "Why I have to finish so many assignments??? Jamie is getting very busy with\nhis school life. He starts to forget the assignments that he has to do. He\ndecided to write the things down on a to-do list. He assigns a value priority\nfor each of his assignment (lower value means more important) so he can decide\nwhich he needs to spend more time on. After a few days, Jamie finds out the\nlist is too large that he can't even manage the list by himself! As you are a\ngood friend of Jamie, help him write a program to support the following\noperations on the to-do list: set ai xi \u2014 Add assignment ai to the to-do list\nif it is not present, and set its priority to xi. If assignment ai is already\nin the to-do list, its priority is changed to xi. remove ai \u2014 Remove\nassignment ai from the to-do list if it is present in it. query ai \u2014 Output\nthe number of assignments that are more important (have a smaller priority\nvalue) than assignment ai, so Jamie can decide a better schedule. Output - 1\nif ai is not in the to-do list. undo di \u2014 Undo all changes that have been made\nin the previous di days (not including the day of this operation) At day 0,\nthe to-do list is empty. In each of the following q days, Jamie will do\nexactly one out of the four operations. If the operation is a query, you\nshould output the result of the query before proceeding to the next day, or\npoor Jamie cannot make appropriate decisions. Input The first line consists of\na single integer q (1 \u2264 q \u2264 10^5) \u2014 the number of operations. The following q\nlines consists of the description of the operations. The i-th line consists of\nthe operation that Jamie has done in the i-th day. The query has the following\nformat: The first word in the line indicates the type of operation. It must be\none of the following four: set, remove, query, undo. If it is a set operation,\na string ai and an integer xi follows (1 \u2264 xi \u2264 10^9). ai is the assignment\nthat need to be set to priority xi. If it is a remove operation, a string ai\nfollows. ai is the assignment that need to be removed. If it is a query\noperation, a string ai follows. ai is the assignment that needs to be queried.\nIf it is a undo operation, an integer di follows (0 \u2264 di < i). di is the\nnumber of days that changes needed to be undone. All assignment names ai only\nconsists of lowercase English letters and have a length 1 \u2264 |ai| \u2264 15. It is\nguaranteed that the last operation is a query operation. Output For each query\noperation, output a single integer \u2014 the number of assignments that have a\npriority lower than assignment ai, or - 1 if ai is not in the to-do list.\nInteraction If the operation is a query, you should output the result of the\nquery and flush the output stream before proceeding to the next operation.\nOtherwise, you may get the verdict Idleness Limit Exceed. For flushing the\noutput stream, please refer to the documentation of your chosen programming\nlanguage. The flush functions of some common programming languages are listed\nbelow: C: fflush(stdout); C++: cout \u00ab flush; Java: System.out.flush();\nExamples Input 8 set chemlabreport 1 set physicsexercise 2 set chinesemockexam\n3 query physicsexercise query chinesemockexam remove physicsexercise query\nphysicsexercise query chinesemockexam Output 1 2 -1 1 Input 8 set\nphysicsexercise 2 set chinesemockexam 3 set physicsexercise 1 query\nphysicsexercise query chinesemockexam undo 4 query physicsexercise query\nchinesemockexam Output 0 1 0 -1 Input 5 query economicsessay remove\neconomicsessay query economicsessay undo 2 query economicsessay Output -1 -1\n-1 Input 5 set economicsessay 1 remove economicsessay undo 1 undo 1 query\neconomicsessay Output -1\n\n",
        "cf_contest_id": 916,
        "cf_index": "D",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "interactive",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "8\r\nset chemlabreport 1\r\nset physicsexercise 2\r\nset chinesemockexam 3\r\nquery physicsexercise\r\nquery chinesemockexam\r\nremove physicsexercise\r\nquery physicsexercise\r\nquery chinesemockexam\r\n",
                "1\r\n2\r\n-1\r\n1\r\n"
            ],
            [
                "8\r\nset physicsexercise 2\r\nset chinesemockexam 3\r\nset physicsexercise 1\r\nquery physicsexercise\r\nquery chinesemockexam\r\nundo 4\r\nquery physicsexercise\r\nquery chinesemockexam\r\n",
                "0\r\n1\r\n0\r\n-1\r\n"
            ],
            [
                "5\r\nquery economicsessay\r\nremove economicsessay\r\nquery economicsessay\r\nundo 2\r\nquery economicsessay\r\n",
                "-1\r\n-1\r\n-1\r\n"
            ],
            [
                "5\r\nset economicsessay 1\r\nremove economicsessay\r\nundo 1\r\nundo 1\r\nquery economicsessay\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\nremove zldrn\r\nset fao 119602000\r\nremove iapyj\r\nset iapyj 593479446\r\nset fao 165144523\r\nset zldrn 647531329\r\nquery zldrn\r\nset iapyj 551036304\r\nundo 0\r\nquery fao\r\n",
                "2\r\n0\r\n"
            ],
            [
                "10\r\nremove zuixgakalfzb\r\nremove ktvvblefwckq\r\nundo 0\r\nquery maahp\r\nquery a\r\nremove rkfso\r\nremove uyokmqsjjlfouyn\r\nquery a\r\nundo 0\r\nquery ittmcsvmoaa\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "1\r\nquery nothing\r\n",
                "-1\r\n"
            ],
            [
                "2\r\nset aaaaaaaaaaaaaaa 1\r\nquery aaaaaaaaaaaaaaa\r\n",
                "0\r\n"
            ],
            [
                "2\r\nundo 0\r\nquery nothing\r\n",
                "-1\r\n"
            ],
            [
                "2\r\nremove nothing\r\nquery nothing\r\n",
                "-1\r\n"
            ]
        ]
    }
]