[
    {
        "name": "Perfect Permutation",
        "description": "You are given a positive integer \n    n\n. The weight of a permutation \n    p_1,\n    p_2, \n    \u2026, p_n\n is the number of indices \n    1\n    \u2264 i\n    \u2264 n\n such that\n\n    i\n divides \n    p_i\n. Find a permutation \n    p_1,p_2,\n    \u2026, p_n\n with\nthe minimum possible weight (among all permutations of length \n    n\n). A\npermutation is an array consisting of \n    n\n distinct integers from \n    1\n\nto \n    n\n in arbitrary order. For example, \n    [2,3,1,5,4]\n is a\npermutation, but \n    [1,2,2]\n is not a permutation (\n    2\n appears twice in\nthe array) and \n    [1,3,4]\n is also not a permutation (\n    n=3\n but there is\n\n    4\n in the array). Input Each test contains multiple test cases. The first\nline contains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n).\nThe description of the test cases follows. The only line of each test case\ncontains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the length\nof permutation. It is guaranteed that the sum of \n    n\n over all test cases\ndoes not exceed \n    10^5\n. Output For each test case, print a line containing\n\n    n\n integers \n    p_1, p_2,\n    \u2026, p_n\n so that the permutation \n    p\n\nhas the minimum possible weight. If there are several possible answers, you\ncan print any of them. Example Input 2 1 4 Output 1 2 1 4 3 Note In the first\ntest case, the only valid permutation is \n    p=[1]\n. Its weight is \n    1\n.\nIn the second test case, one possible answer is the permutation\n\n    p=[2,1,4,3]\n. One can check that \n    1\n divides \n    p_1\n and \n    i\n\ndoes not divide \n    p_i\n for \n    i=2,3,4\n, so the weight of this permutation\nis \n    1\n. It is impossible to find a permutation of length \n    4\n with a\nstrictly smaller weight.\n\n",
        "cf_contest_id": 1711,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n1\r\n4\r\n",
                "1\r\n4\r\n1 2 3 "
            ]
        ],
        "private_cases": []
    }
]