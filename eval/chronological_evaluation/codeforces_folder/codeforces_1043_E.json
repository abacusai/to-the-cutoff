[
    {
        "name": "Train Hard, Win Easy",
        "description": "Zibi is a competitive programming coach. There are \n    n\n competitors who\nwant to be prepared well. The training contests are quite unusual \u2013 there are\ntwo people in a team, two problems, and each competitor will code exactly one\nof them. Of course, people in one team will code different problems. Rules of\nscoring also aren't typical. The first problem is always an implementation\nproblem: you have to implement some well-known algorithm very fast and the\ntime of your typing is rated. The second one is an awful geometry task and you\njust have to get it accepted in reasonable time. Here the length and\ndifficulty of your code are important. After that, Zibi will give some penalty\npoints (possibly negative) for each solution and the final score of the team\nis the sum of them (the less the score is, the better). We know that the\n\n    i\n-th competitor will always have score \n    x_i\n when he codes the first\ntask and \n    y_i\n when he codes the second task. We can assume, that all\ncompetitors know each other's skills and during the contest distribute the\nproblems in the way that minimizes their final score. Remember that each\nperson codes exactly one problem in a contest. Zibi wants all competitors to\nwrite a contest with each other. However, there are \n    m\n pairs of people\nwho really don't like to cooperate and they definitely won't write a contest\ntogether. Still, the coach is going to conduct trainings for all possible\npairs of people, such that the people in pair don't hate each other. The coach\nis interested for each participant, what will be his or her sum of scores of\nall teams he trained in? Input The first line contains two integers \n    n\n\nand \n    m\n (\n    2 \n    \u2264 n \n    \u2264 300\n     000\n, \n    0 \n    \u2264 m \n    \u2264\n    300\n     000\n) \u2014 the number of participants and the number of pairs of people\nwho will not write a contest together. Each of the next \n    n\n lines contains\ntwo integers \n    x_i\n and \n    y_i\n (\n    -10^9 \n    \u2264 x_i, y_i \n    \u2264 10^9\n) \u2014\nthe scores which will the \n    i\n-th competitor get on the first problem and\non the second problem. It is guaranteed that there are no two people having\nboth \n    x_i\n and \n    y_i\n same. Each of the next \n    m\n lines contain two\nintegers \n    u_i\n and \n    v_i\n (\n    1 \n    \u2264 u_i, v_i \n    \u2264 n\n, \n    u_i \n    \n    v_i\n) \u2014 indices of people who don't want to write a contest in one team.\nEach unordered pair of indices will appear at most once. Output Output \n    n\n\nintegers \u2014 the sum of scores for all participants in the same order as they\nappear in the input. Examples Input 3 2 1 2 2 3 1 3 1 2 2 3 Output 3 0 3 Input\n3 3 1 2 2 3 1 3 1 2 2 3 1 3 Output 0 0 0 Input 5 3 -1 3 2 4 1 1 3 5 2 2 1 4 2\n3 3 5 Output 4 14 4 16 10 Note In the first example, there will be only one\nteam consisting of persons \n    1\n and \n    3\n. The optimal strategy for them\nis to assign the first task to the \n    3\n-rd person and the second task to\nthe \n    1\n-st person, this will lead to score equal to \n    1 + 2 = 3\n. In\nthe second example, nobody likes anyone, so there won't be any trainings. It\nseems that Zibi won't be titled coach in that case...\n\n",
        "cf_contest_id": 1043,
        "cf_index": "E",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2\r\n1 2\r\n2 3\r\n1 3\r\n1 2\r\n2 3\r\n",
                "3 0 3 "
            ],
            [
                "3 3\r\n1 2\r\n2 3\r\n1 3\r\n1 2\r\n2 3\r\n1 3\r\n",
                "0 0 0 "
            ],
            [
                "5 3\r\n-1 3\r\n2 4\r\n1 1\r\n3 5\r\n2 2\r\n1 4\r\n2 3\r\n3 5\r\n",
                "4 14 4 16 10 "
            ]
        ],
        "private_cases": [
            [
                "4 0\r\n-1000000000 -1000000000\r\n1000000000 -1000000000\r\n-1000000000 1000000000\r\n1000000000 1000000000\r\n",
                "-4000000000 -4000000000 -4000000000 0 "
            ],
            [
                "4 4\r\n-1000000000 -1000000000\r\n1000000000 -1000000000\r\n-1000000000 1000000000\r\n1000000000 1000000000\r\n1 2\r\n1 3\r\n2 4\r\n3 4\r\n",
                "0 -2000000000 -2000000000 0 "
            ],
            [
                "2 0\r\n0 0\r\n1 1\r\n",
                "1 1 "
            ],
            [
                "2 1\r\n0 0\r\n10 10\r\n1 2\r\n",
                "0 0 "
            ],
            [
                "2 0\r\n-1 -1\r\n1 1\r\n",
                "0 0 "
            ],
            [
                "20 19\r\n0 1\r\n3 2\r\n0 0\r\n2 2\r\n1 -3\r\n0 -2\r\n-1 -1\r\n-2 0\r\n2 0\r\n-1 0\r\n-3 0\r\n3 -3\r\n2 -1\r\n-3 -2\r\n-2 2\r\n0 3\r\n1 3\r\n-1 -3\r\n1 -1\r\n2 -2\r\n1 2\r\n3 2\r\n4 2\r\n5 2\r\n6 2\r\n2 7\r\n8 2\r\n9 2\r\n2 10\r\n11 2\r\n12 2\r\n2 13\r\n14 2\r\n2 15\r\n2 16\r\n2 17\r\n2 18\r\n2 19\r\n2 20\r\n",
                "-17 0 -24 10 -56 -44 -41 -47 -10 -34 -62 -56 -24 -68 -45 -11 4 -61 -27 -39 "
            ],
            [
                "40 39\r\n0 -2\r\n-2 3\r\n3 3\r\n3 -2\r\n-1 1\r\n2 0\r\n-3 2\r\n-2 1\r\n0 -3\r\n-1 -3\r\n1 -1\r\n-3 -1\r\n2 1\r\n0 2\r\n1 -3\r\n-2 -1\r\n1 2\r\n-1 -2\r\n-1 0\r\n3 2\r\n1 3\r\n-3 1\r\n-2 -3\r\n-3 -2\r\n3 0\r\n-1 3\r\n3 1\r\n-2 2\r\n0 3\r\n3 -1\r\n2 -3\r\n1 1\r\n-1 -1\r\n0 1\r\n-3 0\r\n1 0\r\n-3 3\r\n-3 -3\r\n2 2\r\n-1 2\r\n1 29\r\n29 2\r\n29 3\r\n29 4\r\n5 29\r\n29 6\r\n7 29\r\n8 29\r\n29 9\r\n29 10\r\n11 29\r\n12 29\r\n29 13\r\n14 29\r\n29 15\r\n16 29\r\n17 29\r\n18 29\r\n19 29\r\n29 20\r\n29 21\r\n22 29\r\n23 29\r\n29 24\r\n25 29\r\n26 29\r\n27 29\r\n29 28\r\n29 30\r\n31 29\r\n32 29\r\n33 29\r\n29 34\r\n35 29\r\n36 29\r\n37 29\r\n38 29\r\n39 29\r\n29 40\r\n",
                "-94 -75 66 -85 -53 -20 -112 -82 -126 -131 -57 -127 7 -16 -123 -102 9 -104 -65 44 21 -114 -141 -139 -15 -40 17 -77 0 -49 -122 -8 -82 -28 -119 -30 -112 -156 29 -45 "
            ],
            [
                "20 1\r\n-2 -2\r\n-2 -1\r\n-1 0\r\n2 2\r\n0 0\r\n1 2\r\n0 -1\r\n-2 0\r\n0 -2\r\n1 0\r\n1 -2\r\n2 -1\r\n2 1\r\n-2 1\r\n0 1\r\n2 0\r\n-1 -2\r\n1 1\r\n-2 2\r\n-1 2\r\n4 13\r\n",
                "-51 -44 -26 18 -15 10 -26 -41 -41 -8 -40 -22 7 -39 -8 -5 -44 3 -39 -21 "
            ],
            [
                "40 3\r\n-1 -3\r\n0 3\r\n-2 -1\r\n1 2\r\n-3 3\r\n-3 1\r\n1 1\r\n3 -1\r\n3 -2\r\n2 3\r\n3 -3\r\n2 2\r\n-3 2\r\n-2 -3\r\n2 1\r\n-2 -2\r\n-1 -1\r\n2 -1\r\n-1 3\r\n0 1\r\n-1 0\r\n1 -2\r\n0 -2\r\n-3 0\r\n-3 -2\r\n2 -2\r\n1 0\r\n3 0\r\n2 -3\r\n0 -1\r\n-1 -2\r\n0 0\r\n3 2\r\n3 3\r\n0 2\r\n-1 2\r\n-1 1\r\n1 3\r\n-3 -3\r\n0 -3\r\n34 33\r\n34 10\r\n33 10\r\n",
                "-130 -12 -103 11 -122 -123 -4 -42 -78 40 -116 34 -122 -140 12 -118 -80 -46 -47 -27 -65 -84 -92 -126 -141 -80 -26 -8 -116 -64 -102 -42 41 62 -18 -50 -56 20 -156 -122 "
            ],
            [
                "20 0\r\n-2 0\r\n0 2\r\n1 2\r\n-2 1\r\n2 1\r\n0 0\r\n-1 2\r\n-2 2\r\n-2 -2\r\n2 -1\r\n0 -2\r\n2 0\r\n0 -1\r\n0 1\r\n1 -1\r\n-1 -2\r\n-2 -1\r\n1 1\r\n2 -2\r\n2 2\r\n",
                "-40 -4 10 -38 10 -15 -20 -38 -51 -21 -40 -4 -26 -8 -22 -44 -44 3 -39 21 "
            ],
            [
                "40 10\r\n-1 0\r\n0 2\r\n2 2\r\n-2 2\r\n-3 -1\r\n-3 -3\r\n0 -1\r\n3 3\r\n0 1\r\n2 -2\r\n-2 -3\r\n-2 -1\r\n3 -1\r\n2 0\r\n-3 3\r\n1 3\r\n1 -3\r\n0 -3\r\n0 3\r\n-3 -2\r\n-2 1\r\n-1 -3\r\n-1 1\r\n1 2\r\n-1 2\r\n0 -2\r\n3 0\r\n0 0\r\n-2 -2\r\n-2 3\r\n1 -2\r\n1 1\r\n-3 2\r\n1 0\r\n-1 -2\r\n3 2\r\n2 -1\r\n-1 3\r\n3 -2\r\n-2 0\r\n4 7\r\n4 37\r\n4 15\r\n19 4\r\n7 37\r\n7 15\r\n19 7\r\n15 37\r\n19 37\r\n19 15\r\n",
                "-67 -17 30 -76 -131 -160 -60 68 -29 -87 -145 -105 -49 -21 -109 21 -125 -128 -9 -143 -86 -135 -55 9 -48 -97 -14 -46 -122 -80 -90 -8 -118 -31 -107 45 -43 -44 -87 -93 "
            ]
        ]
    }
]