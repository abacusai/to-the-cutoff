[
    {
        "name": "Photo to Remember",
        "description": "One day n friends met at a party, they hadn't seen each other for a long time\nand so they decided to make a group photo together. Simply speaking, the\nprocess of taking photos can be described as follows. On the photo, each\nphotographed friend occupies a rectangle of pixels: the i-th of them occupies\nthe rectangle of width wi pixels and height hi pixels. On the group photo\neverybody stands in a line, thus the minimum pixel size of the photo including\nall the photographed friends, is W \u00d7 H, where W is the total sum of all widths\nand H is the maximum height of all the photographed friends. As is usually the\ncase, the friends made n photos \u2014 the j-th (1 \u2264 j \u2264 n) photo had everybody\nexcept for the j-th friend as he was the photographer. Print the minimum size\nof each made photo in pixels. Input The first line contains integer n (2 \u2264 n \u2264\n200 000) \u2014 the number of friends. Then n lines follow: the i-th line contains\ninformation about the i-th friend. The line contains a pair of integers wi, hi\n(1 \u2264 wi \u2264 10, 1 \u2264 hi \u2264 1000) \u2014 the width and height in pixels of the\ncorresponding rectangle. Output Print n space-separated numbers b1, b2, ...,\nbn, where bi \u2014 the total number of pixels on the minimum photo containing all\nfriends expect for the i-th one. Examples Input 3 1 10 5 5 10 1 Output 75 110\n60 Input 3 2 1 1 2 2 1 Output 6 4 6\n\n",
        "cf_contest_id": 522,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "data structures",
            "dp",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 10\r\n5 5\r\n10 1\r\n",
                "75 110 60\r\n"
            ],
            [
                "3\r\n2 1\r\n1 2\r\n2 1\r\n",
                "6 4 6\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 5\r\n2 3\r\n",
                "6 5\r\n"
            ],
            [
                "2\r\n2 3\r\n1 1\r\n",
                "1 6\r\n"
            ],
            [
                "3\r\n1 10\r\n2 10\r\n3 10\r\n",
                "50 40 30\r\n"
            ],
            [
                "3\r\n2 10\r\n1 9\r\n3 7\r\n",
                "36 50 30\r\n"
            ],
            [
                "3\r\n1 1\r\n3 2\r\n2 3\r\n",
                "15 9 8\r\n"
            ],
            [
                "3\r\n3 123\r\n1 456\r\n2 789\r\n",
                "2367 3945 1824\r\n"
            ],
            [
                "3\r\n2 987\r\n3 654\r\n1 321\r\n",
                "2616 2961 4935\r\n"
            ],
            [
                "3\r\n3 143\r\n2 543\r\n1 893\r\n",
                "2679 3572 2715\r\n"
            ],
            [
                "2\r\n1 1\r\n1 2\r\n",
                "2 1\r\n"
            ],
            [
                "3\r\n2 22\r\n1 11\r\n2 22\r\n",
                "66 88 66\r\n"
            ],
            [
                "3\r\n1 11\r\n1 12\r\n1 13\r\n",
                "26 26 24\r\n"
            ],
            [
                "3\r\n1 11\r\n1 12\r\n2 10\r\n",
                "36 33 24\r\n"
            ],
            [
                "10\r\n6 20\r\n1 175\r\n1 758\r\n1 169\r\n2 490\r\n2 600\r\n4 463\r\n7 377\r\n9 40\r\n4 961\r\n",
                "29791 34596 34596 34596 33635 33635 31713 28830 26908 25014\r\n"
            ],
            [
                "10\r\n8 158\r\n1 709\r\n6 766\r\n4 335\r\n5 356\r\n2 972\r\n1 108\r\n4 235\r\n3 631\r\n1 414\r\n",
                "26244 33048 28188 30132 29160 25278 33048 30132 31104 33048\r\n"
            ],
            [
                "10\r\n7 549\r\n9 115\r\n8 141\r\n3 650\r\n5 730\r\n3 841\r\n7 18\r\n9 170\r\n2 217\r\n1 155\r\n",
                "39527 37845 38686 42891 41209 37230 39527 37845 43732 44573\r\n"
            ],
            [
                "10\r\n6 386\r\n9 816\r\n9 268\r\n9 481\r\n8 284\r\n10 715\r\n9 351\r\n7 580\r\n4 327\r\n7 392\r\n",
                "58752 49335 56304 56304 57120 55488 56304 57936 60384 57936\r\n"
            ],
            [
                "10\r\n9 292\r\n4 6\r\n6 638\r\n8 461\r\n10 970\r\n10 488\r\n9 769\r\n10 644\r\n8 280\r\n5 334\r\n",
                "67900 72750 70810 68870 53061 66930 67900 66930 68870 71780\r\n"
            ],
            [
                "10\r\n10 1000\r\n10 1000\r\n10 1000\r\n10 1000\r\n10 1000\r\n10 1000\r\n10 1000\r\n10 1000\r\n10 1000\r\n10 1000\r\n",
                "90000 90000 90000 90000 90000 90000 90000 90000 90000 90000\r\n"
            ]
        ]
    }
]