[
    {
        "name": "Bits of merry old England",
        "description": "Another feature of Shakespeare language is that the variables are named after\ncharacters of plays by Shakespeare, and all operations on them (value\nassignment, output etc.) look like a dialog with other characters. New values\nof variables are defined in a rather lengthy way, so a programmer should try\nto minimize their usage. You have to print the given sequence of n integers.\nTo do this, you have m variables and two types of operations on them:\nvariable=integer print(variable) Any of the m variables can be used as\nvariable. Variables are denoted by lowercase letters between \"a\" and \"z\",\ninclusive. Any integer number can be used as integer. Let's say that the\npenalty for using first type of operations equals to the number of set bits in\nthe number integer. There is no penalty on using second type of operations.\nFind and output the program which minimizes the penalty for printing the given\nsequence of numbers. Input The first line of input contains integers n and m\n(1 \u2264 n \u2264 250, 1 \u2264 m \u2264 26). The second line contains the sequence to be\nprinted. Each element of the sequence is an integer between 1 and 10^9,\ninclusive. The sequence has to be printed in the given order (from left to\nright). Output Output the number of lines in the optimal program and the\noptimal penalty. Next, output the program itself, one command per line. If\nthere are several programs with minimal penalty, output any of them (you have\nonly to minimize the penalty). Examples Input 7 2 1 2 2 4 2 1 2 Output 11 4\nb=1 print(b) a=2 print(a) print(a) b=4 print(b) print(a) b=1 print(b) print(a)\nInput 6 3 1 2 3 1 2 3 Output 9 4 c=1 print(c) b=2 print(b) a=3 print(a)\nprint(c) print(b) print(a)\n\n",
        "cf_contest_id": 132,
        "cf_index": "E",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "flows",
            "graphs"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 2\r\n1 2 2 4 2 1 2\r\n",
                "11 4\r\na=1\r\nprint(a)\r\nb=2\r\nprint(b)\r\nprint(b)\r\nb=4\r\nprint(b)\r\nb=2\r\nprint(b)\r\nprint(a)\r\nprint(b)\r\n"
            ],
            [
                "6 3\r\n1 2 3 1 2 3\r\n",
                "9 4\r\na=1\r\nprint(a)\r\nb=2\r\nprint(b)\r\nc=3\r\nprint(c)\r\nprint(a)\r\nprint(b)\r\nprint(c)\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1\r\n",
                "2 1\r\na=1\r\nprint(a)\r\n"
            ],
            [
                "1 1\r\n95076\r\n",
                "2 9\r\na=95076\r\nprint(a)\r\n"
            ],
            [
                "2 1\r\n1 1\r\n",
                "3 1\r\na=1\r\nprint(a)\r\nprint(a)\r\n"
            ],
            [
                "2 1\r\n2 8\r\n",
                "4 2\r\na=2\r\nprint(a)\r\na=8\r\nprint(a)\r\n"
            ],
            [
                "10 3\r\n6 10 9 9 9 9 2 5 10 9\r\n",
                "15 9\r\na=6\r\nprint(a)\r\na=10\r\nprint(a)\r\nb=9\r\nprint(b)\r\nprint(b)\r\nprint(b)\r\nprint(b)\r\nc=2\r\nprint(c)\r\nc=5\r\nprint(c)\r\nprint(a)\r\nprint(b)\r\n"
            ],
            [
                "8 4\r\n5 6 3 1 5 4 7 4\r\n",
                "14 11\r\na=5\r\nprint(a)\r\nb=6\r\nprint(b)\r\nb=3\r\nprint(b)\r\nb=1\r\nprint(b)\r\nprint(a)\r\na=4\r\nprint(a)\r\nb=7\r\nprint(b)\r\nprint(a)\r\n"
            ]
        ]
    }
]