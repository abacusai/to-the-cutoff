[
    {
        "name": "Encoding",
        "description": "Polycarp invented a new way to encode strings. Let's assume that we have\nstring T, consisting of lowercase English letters. Let's choose several pairs\nof letters of the English alphabet in such a way that each letter occurs in at\nmost one pair. Then let's replace each letter in T with its pair letter if\nthere is a pair letter for it. For example, if you chose pairs (l, r), (p, q)\nand (a, o), then word \"parallelogram\" according to the given encoding\nprinciple transforms to word \"qolorreraglom\". Polycarpus already has two\nstrings, S and T. He suspects that string T was obtained after applying the\ngiven encoding method from some substring of string S. Find all positions mi\nin S (1 \u2264 mi \u2264 |S| - |T| + 1), such that T can be obtained fro substring\nSmiSmi + 1... Smi + |T| - 1 by applying the described encoding operation by\nusing some set of pairs of English alphabet letters Input The first line of\nthe input contains two integers, |S| and |T| (1 \u2264 |T| \u2264 |S| \u2264 2\u00b710^5) \u2014 the\nlengths of string S and string T, respectively. The second and third line of\nthe input contain strings S and T, respectively. Both strings consist only of\nlowercase English letters. Output Print number k \u2014 the number of suitable\npositions in string S. In the next line print k integers m1, m2, ..., mk \u2014 the\nnumbers of the suitable positions in the increasing order. Examples Input 11 5\nabacabadaba acaba Output 3 1 3 7 Input 21 13 paraparallelogramgram\nqolorreraglom Output 1 5\n\n",
        "cf_contest_id": 533,
        "cf_index": "F",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "hashing",
            "string suffix structures",
            "strings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "11 5\r\nabacabadaba\r\nacaba\r\n",
                "3\r\n1 3 7 "
            ],
            [
                "21 13\r\nparaparallelogramgram\r\nqolorreraglom\r\n",
                "1\r\n5 "
            ]
        ],
        "private_cases": [
            [
                "1 1\r\na\r\na\r\n",
                "1\r\n1 "
            ],
            [
                "1 1\r\na\r\nb\r\n",
                "1\r\n1 "
            ],
            [
                "1 1\r\nz\r\ny\r\n",
                "1\r\n1 "
            ],
            [
                "1 1\r\nz\r\nz\r\n",
                "1\r\n1 "
            ],
            [
                "2 1\r\nab\r\nz\r\n",
                "2\r\n1 2 "
            ],
            [
                "2 2\r\nab\r\nzz\r\n",
                "0\r\n"
            ],
            [
                "2 2\r\nab\r\nzy\r\n",
                "1\r\n1 "
            ],
            [
                "3 2\r\naba\r\npq\r\n",
                "2\r\n1 2 "
            ],
            [
                "3 2\r\naba\r\nqq\r\n",
                "0\r\n"
            ],
            [
                "4 3\r\nabcd\r\nbca\r\n",
                "1\r\n2 "
            ],
            [
                "20 4\r\nbaccbbbbaaaabbbbbbbc\r\nbbbb\r\n",
                "6\r\n5 9 13 14 15 16 "
            ],
            [
                "20 4\r\nbabbbbaaabbbaaabbbba\r\nabbb\r\n",
                "5\r\n2 6 9 12 15 "
            ],
            [
                "20 2\r\nbaaaabbaaaaabbbaaaab\r\nbb\r\n",
                "13\r\n2 3 4 6 8 9 10 11 13 14 16 17 18 "
            ],
            [
                "20 7\r\nabccbabbbbbbbbbcbbab\r\nbbbbbcb\r\n",
                "1\r\n11 "
            ],
            [
                "100 10\r\nbcbeabdedddeeacecdeeeeeaeccacaedddeeacecddeeaceccbbcaeedccbddadddaaceaebdcccddaedebdadeaeeadddaaceae\r\ncdddccaece\r\n",
                "5\r\n8 31 62 73 91 "
            ],
            [
                "100 10\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\naaaaaaaaaa\r\n",
                "91\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 "
            ],
            [
                "100 1\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\na\r\n",
                "100\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 "
            ],
            [
                "100 100\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n",
                "1\r\n1 "
            ],
            [
                "20 5\r\nacbcbcccbbabbbababaa\r\nbcbcb\r\n",
                "2\r\n2 14 "
            ],
            [
                "20 5\r\nacbcbcccbbbababbabaa\r\nbcbcb\r\n",
                "2\r\n2 11 "
            ]
        ]
    }
]