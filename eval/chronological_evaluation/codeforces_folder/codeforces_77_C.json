[
    {
        "name": "Beavermuncher-0xFF",
        "description": "\"Eat a beaver, save a tree!\" \u2014 That will be the motto of ecologists' urgent\nmeeting in Beaverley Hills. And the whole point is that the population of\nbeavers on the Earth has reached incredible sizes! Each day their number\nincreases in several times and they don't even realize how much their\nunhealthy obsession with trees harms the nature and the humankind. The amount\nof oxygen in the atmosphere has dropped to 17 per cent and, as the best minds\nof the world think, that is not the end. In the middle of the 50-s of the\nprevious century a group of soviet scientists succeed in foreseeing the\nsituation with beavers and worked out a secret technology to clean territory.\nThe technology bears a mysterious title \"Beavermuncher-0xFF\". Now the fate of\nthe planet lies on the fragile shoulders of a small group of people who has\ndedicated their lives to science. The prototype is ready, you now need to\nurgently carry out its experiments in practice. You are given a tree,\ncompletely occupied by beavers. A tree is a connected undirected graph without\ncycles. The tree consists of n vertices, the i-th vertex contains ki beavers.\n\"Beavermuncher-0xFF\" works by the following principle: being at some vertex u,\nit can go to the vertex v, if they are connected by an edge, and eat exactly\none beaver located at the vertex v. It is impossible to move to the vertex v\nif there are no beavers left in v. \"Beavermuncher-0xFF\" cannot just stand at\nsome vertex and eat beavers in it. \"Beavermuncher-0xFF\" must move without\nstops. Why does the \"Beavermuncher-0xFF\" works like this? Because the\ndevelopers have not provided place for the battery in it and eating beavers is\nnecessary for converting their mass into pure energy. It is guaranteed that\nthe beavers will be shocked by what is happening, which is why they will not\nbe able to move from a vertex of the tree to another one. As for the\n\"Beavermuncher-0xFF\", it can move along each edge in both directions while\nconditions described above are fulfilled. The root of the tree is located at\nthe vertex s. This means that the \"Beavermuncher-0xFF\" begins its mission at\nthe vertex s and it must return there at the end of experiment, because no one\nis going to take it down from a high place. Determine the maximum number of\nbeavers \"Beavermuncher-0xFF\" can eat and return to the starting vertex. Input\nThe first line contains integer n \u2014 the number of vertices in the tree (1 \u2264 n\n\u2264 10^5). The second line contains n integers ki (1 \u2264 ki \u2264 10^5) \u2014 amounts of\nbeavers on corresponding vertices. Following n - 1 lines describe the tree.\nEach line contains two integers separated by space. These integers represent\ntwo vertices connected by an edge. Vertices are numbered from 1 to n. The last\nline contains integer s \u2014 the number of the starting vertex (1 \u2264 s \u2264 n).\nOutput Print the maximum number of beavers munched by the\n\"Beavermuncher-0xFF\". Please, do not use \nintegers in C++. It is preferred to use cout (also you may use \nExamples Input 5 1 3 1 3 2 2 5 3 4 4 5 1 5 4 Output 6 Input 3 2 1 1 3 2 1 2 3\nOutput 2\n\n",
        "cf_contest_id": 77,
        "cf_index": "C",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dp",
            "dsu",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 3 1 3 2\r\n2 5\r\n3 4\r\n4 5\r\n1 5\r\n4\r\n",
                "6\r\n"
            ],
            [
                "3\r\n2 1 1\r\n3 2\r\n1 2\r\n3\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "6\r\n3 3 1 2 3 5\r\n2 6\r\n1 6\r\n4 5\r\n5 1\r\n3 4\r\n5\r\n",
                "16\r\n"
            ],
            [
                "4\r\n1 1 1 1\r\n4 1\r\n2 1\r\n3 4\r\n2\r\n",
                "2\r\n"
            ],
            [
                "1\r\n6\r\n1\r\n",
                "0\r\n"
            ],
            [
                "2\r\n5 6\r\n2 1\r\n2\r\n",
                "10\r\n"
            ],
            [
                "2\r\n1 1\r\n1 2\r\n2\r\n",
                "2\r\n"
            ],
            [
                "3\r\n91 72 109\r\n1 3\r\n3 2\r\n2\r\n",
                "218\r\n"
            ],
            [
                "15\r\n7 5 4 1 2 4 2 8 1 7 1 3 8 2 7\r\n2 3\r\n8 5\r\n14 5\r\n4 14\r\n1 5\r\n10 12\r\n11 8\r\n15 13\r\n7 5\r\n13 5\r\n9 8\r\n3 12\r\n6 12\r\n5 12\r\n6\r\n",
                "28\r\n"
            ],
            [
                "15\r\n1 2 1 2 3 3 1 1 2 1 1 1 1 2 2\r\n15 2\r\n13 5\r\n7 12\r\n6 7\r\n1 3\r\n10 1\r\n2 11\r\n9 10\r\n12 3\r\n11 1\r\n8 11\r\n14 5\r\n4 14\r\n5 7\r\n7\r\n",
                "8\r\n"
            ],
            [
                "1\r\n96389\r\n1\r\n",
                "0\r\n"
            ],
            [
                "3\r\n98400 93909 99994\r\n1 2\r\n3 2\r\n2\r\n",
                "187818\r\n"
            ],
            [
                "10\r\n91739 91402 94944 92279 91149 91709 96966 91401 97398 98822\r\n3 6\r\n9 6\r\n5 6\r\n1 6\r\n8 6\r\n7 6\r\n10 6\r\n4 6\r\n2 6\r\n2\r\n",
                "183418\r\n"
            ],
            [
                "5\r\n97215 99026 95812 92076 91892\r\n2 4\r\n5 4\r\n1 4\r\n3 4\r\n1\r\n",
                "184152\r\n"
            ],
            [
                "7\r\n1 1 1 100 1 1 100\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n4 7\r\n1\r\n",
                "200\r\n"
            ],
            [
                "5\r\n1 3 1 1 2\r\n2 5\r\n4 5\r\n3 4\r\n1 5\r\n4\r\n",
                "4\r\n"
            ],
            [
                "5\r\n1 1 1 5 5\r\n1 2\r\n1 4\r\n4 5\r\n1 3\r\n1\r\n",
                "10\r\n"
            ],
            [
                "7\r\n1 1 1 5 5 5 5\r\n1 2\r\n1 4\r\n4 5\r\n1 3\r\n2 6\r\n6 7\r\n1\r\n",
                "10\r\n"
            ]
        ]
    }
]