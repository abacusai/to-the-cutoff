[
    {
        "name": "Hero to Zero",
        "description": "There are no heroes in this problem. I guess we should have named it \"To\nZero\". You are given two arrays \n    a\n and \n    b\n, each of these arrays\ncontains \n    n\n non-negative integers. Let \n    c\n be a matrix of size \n    n\n    \n    \u00d7 n\n such that \n    c_i,j = |a_i - b_j|\n for every \n    i \n    \u2208 [1,\n    n]\n and every \n    j \n    \u2208 [1, n]\n. Your goal is to transform the matrix\n\n    c\n so that it becomes the zero matrix, i. e. a matrix where every element\nis exactly \n    0\n. In order to do so, you may perform the following\noperations any number of times, in any order: choose an integer \n    i\n, then\ndecrease \n    c_i,j\n by \n    1\n for every \n    j \n    \u2208 [1, n]\n (i. e.\ndecrease all elements in the \n    i\n-th row by \n    1\n). In order to perform\nthis operation, you pay \n    1\n coin; choose an integer \n    j\n, then decrease\n\n    c_i,j\n by \n    1\n for every \n    i \n    \u2208 [1, n]\n (i. e. decrease all\nelements in the \n    j\n-th column by \n    1\n). In order to perform this\noperation, you pay \n    1\n coin; choose two integers \n    i\n and \n    j\n, then\ndecrease \n    c_i,j\n by \n    1\n. In order to perform this operation, you pay\n\n    1\n coin; choose an integer \n    i\n, then increase \n    c_i,j\n by\n\n    1\n for every \n    j \n    \u2208 [1, n]\n (i. e. increase all elements in the\n\n    i\n-th row by \n    1\n). When you perform this operation, you receive\n\n    1\n coin; choose an integer \n    j\n, then increase \n    c_i,j\n by\n\n    1\n for every \n    i \n    \u2208 [1, n]\n (i. e. increase all elements in the\n\n    j\n-th column by \n    1\n). When you perform this operation, you receive\n\n    1\n coin. You have to calculate the minimum number of coins required to\ntransform the matrix \n    c\n into the zero matrix. Note that all elements of\n\n    c\n should be equal to \n    0\n simultaneously after the operations. Input\nThe first line contains one integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7\n    10^5\n). The second line contains \n    n\n integers \n    a_1, a_2, \n    \u2026,\n    a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 10^8\n). The third line contains \n    n\n\nintegers \n    b_1, b_2, \n    \u2026, b_n\n (\n    0 \n    \u2264 b_j \n    \u2264 10^8\n). Output\nPrint one integer \u2014 the minimum number of coins required to transform the\nmatrix \n    c\n into the zero matrix. Examples Input 3 1 2 3 2 2 2 Output 2\nInput 3 3 1 3 1 1 2 Output 5 Input 2 1 0 2 1 Output 2 Input 2 1 4 2 3 Output 4\nInput 4 1 3 3 7 6 9 4 2 Output 29 Note In the first example, the matrix looks\nas follows: 111000111 You can turn it into a zero matrix using \n    2\n coins\nas follows: subtract \n    1\n from the first row, paying \n    1\n coin; subtract\n\n    1\n from the third row, paying \n    1\n coin. In the second example, the\nmatrix looks as follows: 221001221 You can turn it into a zero matrix using\n\n    5\n coins as follows: subtract \n    1\n from the first row, paying \n    1\n\ncoin; subtract \n    1\n from the third row, paying \n    1\n coin; subtract\n\n    1\n from the third row, paying \n    1\n coin; subtract \n    1\n from\n\n    a_2,3\n, paying \n    1\n coin; add \n    1\n to the third column, receiving\n\n    1\n coin; subtract \n    1\n from the first row, paying \n    1\n coin;\nsubtract \n    1\n from \n    a_2,3\n, paying \n    1\n coin.\n\n",
        "cf_contest_id": 1765,
        "cf_index": "J",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "graph matchings",
            "math"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n1 2 3\r\n2 2 2\r\n",
                "2\r\n"
            ],
            [
                "3\r\n3 1 3\r\n1 1 2\r\n",
                "5\r\n"
            ],
            [
                "2\r\n1 0\r\n2 1\r\n",
                "2\r\n"
            ],
            [
                "2\r\n1 4\r\n2 3\r\n",
                "4\r\n"
            ],
            [
                "4\r\n1 3 3 7\r\n6 9 4 2\r\n",
                "29\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n4 4 4 9 2\r\n2 10 7 8 1\r\n",
                "49\r\n"
            ],
            [
                "5\r\n9 4 10 10 5\r\n6 8 1 3 3\r\n",
                "37\r\n"
            ],
            [
                "5\r\n3 6 8 8 3\r\n3 9 9 3 5\r\n",
                "59\r\n"
            ],
            [
                "5\r\n1 7 3 9 7\r\n6 2 1 8 7\r\n",
                "69\r\n"
            ],
            [
                "5\r\n5 1 7 9 10\r\n5 1 5 8 10\r\n",
                "77\r\n"
            ],
            [
                "5\r\n9 9 3 7 2\r\n6 1 7 7 2\r\n",
                "57\r\n"
            ],
            [
                "5\r\n3 10 10 4 5\r\n8 10 5 3 4\r\n",
                "70\r\n"
            ],
            [
                "5\r\n1 4 4 2 5\r\n7 3 3 8 6\r\n",
                "27\r\n"
            ],
            [
                "5\r\n5 7 4 3 6\r\n4 7 1 8 9\r\n",
                "40\r\n"
            ],
            [
                "5\r\n4 7 1 1 8\r\n7 8 6 5 10\r\n",
                "33\r\n"
            ]
        ]
    }
]