[
    {
        "name": "Beautiful IP Addresses",
        "description": "The problem uses a simplified TCP/IP address model, please read the statement\ncarefully. An IP address is a 32-bit integer, represented as a group of four\ndecimal 8-bit integers (without leading zeroes), separated by commas. For\nexample, record 0.255.1.123 shows a correct IP address and records 0.256.1.123\nand 0.255.1.01 do not. In the given problem an arbitrary group of four 8-bit\nintegers is a correct IP address. Our hero Polycarpus still works as a system\nadministrator in some large corporation. He likes beautiful IP addresses. To\ncheck if some IP address is beautiful, he should do the following: write out\nin a line four 8-bit numbers of the IP address, without the commas; check if\nthe resulting string is a palindrome. Let us remind you that a palindrome is a\nstring that reads the same from right to left and from left to right. For\nexample, IP addresses 12.102.20.121 and 0.3.14.130 are beautiful (as strings\n\"1210220121\" and \"0314130\" are palindromes), and IP addresses 1.20.20.1 and\n100.4.4.1 are not. Polycarpus wants to find all beautiful IP addresses that\nhave the given set of digits. Each digit from the set must occur in the IP\naddress at least once. IP address must not contain any other digits. Help him\nto cope with this difficult task. Input The first line contains a single\ninteger n (1 \u2264 n \u2264 10) \u2014 the number of digits in the set. The second line\ncontains the set of integers a1, a2, ..., an (0 \u2264 ai \u2264 9). It is guaranteed\nthat all digits in the set are distinct. Output In the first line print a\nsingle integer k \u2014 the number of beautiful IP addresses that contain the given\nset of digits. In the following k lines print the IP addresses, one per line\nin the arbitrary order. Examples Input 6 0 1 2 9 8 7 Output 6 78.190.209.187\n79.180.208.197 87.190.209.178 89.170.207.198 97.180.208.179 98.170.207.189\nInput 1 4 Output 16 4.4.4.4 4.4.4.44 4.4.44.4 4.4.44.44 4.44.4.4 4.44.4.44\n4.44.44.4 4.44.44.44 44.4.4.4 44.4.4.44 44.4.44.4 44.4.44.44 44.44.4.4\n44.44.4.44 44.44.44.4 44.44.44.44\n\n",
        "cf_contest_id": 292,
        "cf_index": "C",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "brute force"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n0 1 2 9 8 7\r\n",
                "6\r\n87.190.209.178\r\n78.190.209.187\r\n89.170.207.198\r\n79.180.208.197\r\n98.170.207.189\r\n97.180.208.179\r\n"
            ],
            [
                "1\r\n4\r\n",
                "16\r\n44.44.4.44\r\n4.44.44.44\r\n4.4.44.44\r\n44.4.4.4\r\n4.44.4.4\r\n4.44.4.44\r\n44.4.44.4\r\n4.4.44.4\r\n4.44.44.4\r\n4.4.4.44\r\n44.44.4.4\r\n44.4.4.44\r\n44.4.44.44\r\n44.44.44.4\r\n4.4.4.4\r\n44.44.44.44\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n0\r\n",
                "1\r\n0.0.0.0\r\n"
            ],
            [
                "10\r\n0 1 2 3 4 5 6 7 8 9\r\n",
                "0\r\n"
            ],
            [
                "5\r\n4 0 5 6 9\r\n",
                "0\r\n"
            ],
            [
                "6\r\n0 1 4 7 8 6\r\n",
                "0\r\n"
            ],
            [
                "6\r\n0 8 9 2 4 5\r\n",
                "0\r\n"
            ],
            [
                "6\r\n8 4 6 5 2 0\r\n",
                "0\r\n"
            ],
            [
                "7\r\n7 5 1 8 0 9 2\r\n",
                "0\r\n"
            ],
            [
                "7\r\n3 6 9 5 0 4 7\r\n",
                "0\r\n"
            ],
            [
                "8\r\n2 4 0 1 9 8 6 3\r\n",
                "0\r\n"
            ],
            [
                "8\r\n6 9 1 7 8 2 5 0\r\n",
                "0\r\n"
            ],
            [
                "9\r\n4 0 7 3 9 5 6 8 1\r\n",
                "0\r\n"
            ],
            [
                "9\r\n7 0 6 5 1 3 8 2 4\r\n",
                "0\r\n"
            ],
            [
                "1\r\n6\r\n",
                "16\r\n66.66.6.6\r\n66.6.66.66\r\n6.6.6.66\r\n66.6.66.6\r\n66.66.66.66\r\n6.66.6.66\r\n6.6.6.6\r\n66.6.6.6\r\n66.66.66.6\r\n6.66.66.66\r\n66.6.6.66\r\n6.66.66.6\r\n6.6.66.66\r\n6.66.6.6\r\n6.6.66.6\r\n66.66.6.66\r\n"
            ],
            [
                "6\r\n7 8 9 1 2 3\r\n",
                "6\r\n89.173.237.198\r\n79.183.238.197\r\n87.193.239.178\r\n98.173.237.189\r\n97.183.238.179\r\n78.193.239.187\r\n"
            ],
            [
                "6\r\n6 7 8 2 1 0\r\n",
                "6\r\n67.180.208.176\r\n76.180.208.167\r\n86.170.207.168\r\n68.170.207.186\r\n87.160.206.178\r\n78.160.206.187\r\n"
            ]
        ]
    }
]