[
    {
        "name": "Rorororobot",
        "description": "There is a grid, consisting of \n    n\n rows and \n    m\n columns. The rows are\nnumbered from \n    1\n to \n    n\n from bottom to top. The columns are numbered\nfrom \n    1\n to \n    m\n from left to right. The \n    i\n-th column has the\nbottom \n    a_i\n cells blocked (the cells in rows \n    1, 2, \n    \u2026, a_i\n),\nthe remaining \n    n - a_i\n cells are unblocked. A robot is travelling across\nthis grid. You can send it commands \u2014 move up, right, down or left. If a robot\nattempts to move into a blocked cell or outside the grid, it explodes.\nHowever, the robot is broken \u2014 it executes each received command \n    k\n\ntimes. So if you tell it to move up, for example, it will move up \n    k\n\ntimes (\n    k\n cells). You can't send it commands while the robot executes the\ncurrent one. You are asked \n    q\n queries about the robot. Each query has a\nstart cell, a finish cell and a value \n    k\n. Can you send the robot an\narbitrary number of commands (possibly, zero) so that it reaches the finish\ncell from the start cell, given that it executes each command \n    k\n times?\nThe robot must stop in the finish cell. If it visits the finish cell while\nstill executing commands, it doesn't count. Input The first line contains two\nintegers \n    n\n and \n    m\n (\n    1 \n    \u2264 n \n    \u2264 10^9\n; \n    1 \n    \u2264 m \n    \u2264 2\n    \n    \u00b7 10^5\n) \u2014 the number of rows and columns of the grid. The second line\ncontains \n    m\n integers \n    a_1, a_2, \n    \u2026, a_m\n (\n    0 \n    \u2264 a_i \n    \u2264\n    n\n) \u2014 the number of blocked cells on the bottom of the \n    i\n-th column.\nThe third line contains a single integer \n    q\n (\n    1 \n    \u2264 q \n    \u2264 2 \n    \u00b7\n    10^5\n) \u2014 the number of queries. Each of the next \n    q\n lines contain five\nintegers \n    x_s, y_s, x_f, y_f\n and \n    k\n (\n    a[y_s] < x_s \n    \u2264 n\n;\n\n    1 \n    \u2264 y_s \n    \u2264 m\n; \n    a[y_f] < x_f \n    \u2264 n\n; \n    1 \n    \u2264 y_f \n    \u2264\n    m\n; \n    1 \n    \u2264 k \n    \u2264 10^9\n) \u2014 the row and the column of the start cell,\nthe row and the column of the finish cell and the number of times each your\ncommand is executed. The start and the finish cell of each query are\nunblocked. Output For each query, print \"YES\" if you can send the robot an\narbitrary number of commands (possibly, zero) so that it reaches the finish\ncell from the start cell, given that it executes each command \n    k\n times.\nOtherwise, print \"NO\". Example Input 11 10 9 0 0 10 3 4 8 11 10 8 6 1 2 1 3 1\n1 2 1 3 2 4 3 4 5 2 5 3 11 5 3 5 3 11 5 2 11 9 9 10 1 Output YES NO NO NO YES\nYES\n\n",
        "cf_contest_id": 1709,
        "cf_index": "D",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "11 10\r\n9 0 0 10 3 4 8 11 10 8\r\n6\r\n1 2 1 3 1\r\n1 2 1 3 2\r\n4 3 4 5 2\r\n5 3 11 5 3\r\n5 3 11 5 2\r\n11 9 9 10 1\r\n",
                "YES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 10\r\n4 1 6 3 7 7 7 0 8 2\r\n10\r\n4 2 9 7 4\r\n7 4 9 1 2\r\n9 8 8 8 7\r\n3 8 8 2 8\r\n8 8 4 4 1\r\n10 5 9 3 10\r\n2 2 7 3 3\r\n7 3 10 4 9\r\n7 8 9 3 9\r\n6 10 5 10 7\r\n",
                "NO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\n"
            ],
            [
                "10 10\r\n2 7 1 5 2 0 6 6 2 7\r\n10\r\n10 4 10 4 8\r\n1 6 8 6 7\r\n9 7 9 7 8\r\n8 1 8 10 3\r\n7 7 7 1 3\r\n6 4 6 4 8\r\n3 5 3 9 4\r\n5 9 3 1 1\r\n5 6 5 6 9\r\n8 9 2 3 6\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\n"
            ],
            [
                "10 10\r\n2 10 1 5 2 0 6 10 2 7\r\n10\r\n10 4 10 4 8\r\n1 6 8 6 7\r\n9 7 9 7 8\r\n8 1 8 10 3\r\n7 7 7 1 3\r\n6 4 6 4 8\r\n3 5 3 9 4\r\n5 9 3 1 1\r\n5 6 5 6 9\r\n8 9 2 3 6\r\n",
                "YES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\n"
            ]
        ]
    }
]