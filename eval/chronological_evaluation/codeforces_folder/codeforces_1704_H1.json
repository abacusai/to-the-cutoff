[
    {
        "name": "Game of AI (easy version)",
        "description": "This is the easy version of this problem. The difference between easy and hard\nversions is the constraint on \n    k\n and the time limit. Also, in this\nversion of the problem, you only need to calculate the answer when \n    n=k\n.\nYou can make hacks only if both versions of the problem are solved. Cirno is\nplaying a war simulator game with \n    n\n towers (numbered from \n    1\n to\n\n    n\n) and \n    n\n bots (numbered from \n    1\n to \n    n\n). The \n    i\n-th\ntower is initially occupied by the \n    i\n-th bot for \n    1 \n    \u2264 i \n    \u2264 n\n.\nBefore the game, Cirno first chooses a permutation \n    p = [p_1, p_2, \n    \u2026,\n    p_n]\n of length \n    n\n (A permutation of length \n    n\n is an array of\nlength \n    n\n where each integer between \n    1\n and \n    n\n appears exactly\nonce). After that, she can choose a sequence \n    a = [a_1, a_2, \n    \u2026,\n    a_n]\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n and \n    a_i \n     i\n for all \n    1 \n    \u2264 i\n    \n    \u2264 n\n). The game has \n    n\n rounds of attacks. In the \n    i\n-th round,\nif the \n    p_i\n-th bot is still in the game, it will begin its attack, and as\nthe result the \n    a_p_i\n-th tower becomes occupied by the \n    p_i\n-th\nbot; the bot that previously occupied the \n    a_p_i\n-th tower will no\nlonger occupy it. If the \n    p_i\n-th bot is not in the game, nothing will\nhappen in this round. After each round, if a bot doesn't occupy any towers, it\nwill be eliminated and leave the game. Please note that no tower can be\noccupied by more than one bot, but one bot can occupy more than one tower\nduring the game. At the end of the game, Cirno will record the result as a\nsequence \n    b = [b_1, b_2, \n    \u2026, b_n]\n, where \n    b_i\n is the number of\nthe bot that occupies the \n    i\n-th tower at the end of the game. However, as\na mathematics master, she wants you to solve the following counting problem\ninstead of playing games: Count the number of different pairs of sequences\n\n    a\n and \n    b\n that we can get from all possible choices of sequence\n\n    a\n and permutation \n    p\n. Since this number may be large, output it\nmodulo \n    M\n. Input The only line contains two positive integers \n    k\n and\n\n    M\n (\n    1\n    \u2264 k\n    \u2264 5000\n, \n    2\n    \u2264 M\n    \u2264 10^9\n ). It is\nguaranteed that \n    2^18\n is a divisor of \n    M-1\n and \n    M\n is a prime\nnumber. You need to calculate the answer for \n    n=k\n. Output Output a single\ninteger \u2014 the number of different pairs of sequences for \n    n=k\n modulo\n\n    M\n. Examples Input 1 998244353 Output 0 Input 2 998244353 Output 2 Input\n3 998244353 Output 24 Input 8 998244353 Output 123391016 Note For \n    n=1\n,\nno valid sequence \n    a\n exists. We regard the answer as \n    0\n. For\n\n    n=2\n, there is only one possible array \n    a\n: \n    [2, 1]\n. For array\n\n    a\n is \n    [2, 1]\n and permutation \n    p\n is \n    [1, 2]\n, the sequence\n\n    b\n will be \n    [1, 1]\n after all rounds have finished. The details for\neach rounds: In the first round, the first bot will begin its attack and\nsuccessfully capture the tower \n    2\n. After this round, the second bot will\nbe eliminated and leave the game as all of its towers are occupied by other\nbots. In the second round, the second bot is not in the game. For array\n\n    a\n is \n    [2, 1]\n and permutation \n    p\n is \n    [2, 1]\n, the sequence\n\n    b\n will be \n    [2, 2]\n after all rounds have finished. The details for\neach rounds: In the first round, the second bot will begin its attack and\nsuccessfully capture the tower \n    1\n. After this round, the first bot will\nbe eliminated and leave the game as all of its towers are occupied by other\nbots. In the second round, the first bot is not in the game. So the number of\ndifferent pairs of sequences \n    (a,b)\n is \n    2\n (\n    [2, 1]\n, \n    [1,\n    1]\n and \n    [2, 1]\n, \n    [2, 2]\n) for \n    n=2\n.\n\n",
        "cf_contest_id": 1704,
        "cf_index": "H1",
        "cf_rating": 3200,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "constructive algorithms",
            "dp",
            "fft",
            "math"
        ],
        "time_limit_seconds": 2.5,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "1 998244353\r\n",
                "0"
            ],
            [
                "2 998244353\r\n",
                "2"
            ],
            [
                "3 998244353\r\n",
                "24"
            ],
            [
                "8 998244353\r\n",
                "123391016"
            ]
        ],
        "private_cases": [
            [
                "2000 998244353\r\n",
                "567618578"
            ],
            [
                "5000 825753601\r\n",
                "371664895"
            ],
            [
                "2000 85196801\r\n",
                "43917624"
            ],
            [
                "2000 285474817\r\n",
                "144927889"
            ],
            [
                "1023 998244353\r\n",
                "790426975"
            ],
            [
                "1024 998244353\r\n",
                "340841823"
            ],
            [
                "2000 786433\r\n",
                "768605"
            ],
            [
                "2000 447741953\r\n",
                "17773730"
            ],
            [
                "5000 85196801\r\n",
                "32012563"
            ],
            [
                "4999 285474817\r\n",
                "66347236"
            ],
            [
                "4998 786433\r\n",
                "103919"
            ],
            [
                "2000 605028353\r\n",
                "112430648"
            ],
            [
                "2000 825753601\r\n",
                "254101902"
            ],
            [
                "2000 950009857\r\n",
                "595437455"
            ],
            [
                "5000 998244353\r\n",
                "844270517"
            ],
            [
                "4102 825753601\r\n",
                "433078699"
            ]
        ]
    }
]