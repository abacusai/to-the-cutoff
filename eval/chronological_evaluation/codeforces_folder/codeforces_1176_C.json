[
    {
        "name": "Lose it!",
        "description": "You are given an array \n    a\n consisting of \n    n\n integers. Each \n    a_i\n\nis one of the six following numbers: \n    4, 8, 15, 16, 23, 42\n. Your task is\nto remove the minimum number of elements to make this array good. An array of\nlength \n    k\n is called good if \n    k\n is divisible by \n    6\n and it is\npossible to split it into \n    k/6\n subsequences \n    4, 8, 15, 16,\n    23, 42\n. Examples of good arrays: \n    [4, 8, 15, 16, 23, 42]\n (the whole\narray is a required sequence); \n    [4, 8, 4, 15, 16, 8, 23, 15, 16, 42, 23,\n    42]\n (the first sequence is formed from first, second, fourth, fifth,\nseventh and tenth elements and the second one is formed from remaining\nelements); \n    []\n (the empty array is good). Examples of bad arrays: \n    [4,\n    8, 15, 16, 42, 23]\n (the order of elements should be exactly \n    4, 8, 15,\n    16, 23, 42\n); \n    [4, 8, 15, 16, 23, 42, 4]\n (the length of the array is\nnot divisible by \n    6\n); \n    [4, 8, 15, 16, 23, 42, 4, 8, 15, 16, 23, 23]\n\n(the first sequence can be formed from first six elements but the remaining\narray cannot form the required sequence). Input The first line of the input\ncontains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 5 \n    \u00b7 10^5\n) \u2014 the\nnumber of elements in \n    a\n. The second line of the input contains \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (each \n    a_i\n is one of the following\nnumbers: \n    4, 8, 15, 16, 23, 42\n), where \n    a_i\n is the \n    i\n-th\nelement of \n    a\n. Output Print one integer \u2014 the minimum number of elements\nyou have to remove to obtain a good array. Examples Input 5 4 8 15 16 23\nOutput 5 Input 12 4 8 4 15 16 8 23 15 16 42 23 42 Output 0 Input 15 4 8 4 8 15\n16 8 16 23 15 16 4 42 23 42 Output 3\n\n",
        "cf_contest_id": 1176,
        "cf_index": "C",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n4 8 15 16 23\r\n",
                "5\r\n"
            ],
            [
                "12\r\n4 8 4 15 16 8 23 15 16 42 23 42\r\n",
                "0\r\n"
            ],
            [
                "15\r\n4 8 4 8 15 16 8 16 23 15 16 4 42 23 42\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n4\r\n",
                "1\r\n"
            ],
            [
                "1\r\n42\r\n",
                "1\r\n"
            ],
            [
                "100\r\n4 42 23 23 8 42 16 23 42 16 42 8 4 23 4 4 23 42 16 42 23 23 23 42 4 42 8 8 16 23 15 23 16 4 42 15 15 23 16 15 16 4 4 15 23 42 42 15 8 23 8 23 4 15 16 15 42 8 23 16 15 42 23 8 4 16 15 16 23 16 16 4 23 16 8 23 16 15 23 4 4 8 15 4 4 15 8 23 23 4 4 8 8 4 42 15 4 4 42 16\r\n",
                "64\r\n"
            ],
            [
                "123\r\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\r\n",
                "123\r\n"
            ]
        ]
    }
]