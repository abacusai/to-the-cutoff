[
    {
        "name": "Flipping Range",
        "description": "You are given an array \n    a\n of \n    n\n integers and a set \n    B\n of\n\n    m\n positive integers such that \n    1 \n    \u2264 b_i \n    \u2264\n    \u230a\n    n/2\n    \u230b\n for \n    1\n    \u2264 i\n    \u2264 m\n, where \n    b_i\n is the\n\n    i\n-th element of \n    B\n. You can make the following operation on\n\n    a\n: Select some \n    x\n such that \n    x\n appears in \n    B\n. Select an\ninterval from array \n    a\n of size \n    x\n and multiply by \n    -1\n every\nelement in the interval. Formally, select \n    l\n and \n    r\n such that\n\n    1\n    \u2264 l\n    \u2264 r \n    \u2264 n\n and \n    r-l+1=x\n, then assign\n\n    a_i:=-a_i\n for every \n    i\n such that \n    l\n    \u2264 i\n    \u2264 r\n. Consider\nthe following example, let \n    a=[0,6,-2,1,-4,5]\n and \n    B=\n    \n    1,2\n:\n\n    [0,6,-2,-1,4,5]\n is obtained after choosing size \n    2\n and \n    l=4\n,\n\n    r=5\n. \n    [0,6,2,-1,4,5]\n is obtained after choosing size \n    1\n and\n\n    l=3\n, \n    r=3\n. Find the maximum \n    \u2211\n    _i=1^n a_i\n you\ncan get after applying such operation any number of times (possibly zero).\nInput The input consists of multiple test cases. The first line contains a\nsingle integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^5\n) \u2014 the number of test\ncases. Description of the test cases follows. The first line of each test case\ncontains two integers \n    n\n and \n    m\n (\n    2\n    \u2264 n \n    \u2264 10^6\n, \n    1\n    \n    \u2264 m \n    \u2264\n    \u230a\n    n/2\n    \u230b\n) \u2014 the number of elements\nof \n    a\n and \n    B\n respectively. The second line of each test case\ncontains \n    n\n integers \n    a_1,a_2,\n    \u2026,a_n\n (\n    -10^9\n    \u2264 a_i\n    \n    \u2264 10^9\n). The third line of each test case contains \n    m\n distinct\npositive integers \n    b_1,b_2,\n    \u2026,b_m\n (\n    1 \n    \u2264 b_i \n    \u2264\n    \u230a\n    n/2\n    \u230b\n) \u2014 the elements in the set \n    B\n. It's guaranteed\nthat the sum of \n    n\n over all test cases does not exceed \n    10^6\n. Output\nFor each test case print a single integer \u2014 the maximum possible sum of all\n\n    a_i\n after applying such operation any number of times. Example Input 3 6\n2 0 6 -2 1 -4 5 1 2 7 1 1 -1 1 -1 1 -1 1 2 5 1 -1000000000 -1000000000\n-1000000000 -1000000000 -1000000000 1 Output 18 5 5000000000 Note In the first\ntest, you can apply the operation \n    x=1\n, \n    l=3\n, \n    r=3\n, and the\noperation \n    x=1\n, \n    l=5\n, \n    r=5\n, then the array becomes \n    [0, 6, 2,\n    1, 4, 5]\n. In the second test, you can apply the operation \n    x=2\n,\n\n    l=2\n, \n    r=3\n, and the array becomes \n    [1, 1, -1, -1, 1, -1, 1]\n,\nthen apply the operation \n    x=2\n, \n    l=3\n, \n    r=4\n, and the array\nbecomes \n    [1, 1, 1, 1, 1, -1, 1]\n. There is no way to achieve a sum bigger\nthan \n    5\n.\n\n",
        "cf_contest_id": 1630,
        "cf_index": "D",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dp",
            "greedy",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n6 2\r\n0 6 -2 1 -4 5\r\n1 2\r\n7 1\r\n1 -1 1 -1 1 -1 1\r\n2\r\n5 1\r\n-1000000000 -1000000000 -1000000000 -1000000000 -1000000000\r\n1\r\n",
                "18\r\n5\r\n5000000000\r\n"
            ]
        ],
        "private_cases": []
    }
]