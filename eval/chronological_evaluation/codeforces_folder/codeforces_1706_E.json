[
    {
        "name": "Qpwoeirut and Vertices",
        "description": "You are given a connected undirected graph with \n    n\n vertices and \n    m\n\nedges. Vertices of the graph are numbered by integers from \n    1\n to \n    n\n\nand edges of the graph are numbered by integers from \n    1\n to \n    m\n. Your\ntask is to answer \n    q\n queries, each consisting of two integers \n    l\n and\n\n    r\n. The answer to each query is the smallest non-negative integer \n    k\n\nsuch that the following condition holds: For all pairs of integers \n    (a,\n    b)\n such that \n    l\n    \u2264 a\n    \u2264 b\n    \u2264 r\n, vertices \n    a\n and \n    b\n are\nreachable from one another using only the first \n    k\n edges (that is, edges\n\n    1, 2, \n    \u2026, k\n). Input The first line contains a single integer\n\n    t\n (\n    1\n    \u2264 t\n    \u2264 1000\n) \u2014 the number of test cases. The first line\nof each test case contains three integers \n    n\n, \n    m\n, and \n    q\n\n(\n    2\n    \u2264 n\n    \u2264 10^5\n, \n    1\n    \u2264 m, q\n    \u2264 2\n    \u00b7 10^5\n) \u2014 the number\nof vertices, edges, and queries respectively. Each of the next \n    m\n lines\ncontains two integers \n    u_i\n and \n    v_i\n (\n    1\n    \u2264 u_i, v_i\n    \u2264 n\n) \u2014\nends of the \n    i\n-th edge. It is guaranteed that the graph is connected and\nthere are no multiple edges or self-loops. Each of the next \n    q\n lines\ncontains two integers \n    l\n and \n    r\n (\n    1\n    \u2264 l\n    \u2264 r\n    \u2264 n\n) \u2014\ndescriptions of the queries. It is guaranteed that that the sum of \n    n\n\nover all test cases does not exceed \n    10^5\n, the sum of \n    m\n over all\ntest cases does not exceed \n    2\n    \u00b7 10^5\n, and the sum of \n    q\n over\nall test cases does not exceed \n    2\n    \u00b7 10^5\n. Output For each test case,\nprint \n    q\n integers \u2014 the answers to the queries. Example Input 3 2 1 2 1 2\n1 1 1 2 5 5 5 1 2 1 3 2 4 3 4 3 5 1 4 3 4 2 2 2 5 3 5 3 2 1 1 3 2 3 1 3 Output\n0 1 3 3 0 5 5 2 Note Graph from the first test case. The integer near the edge\nis its number. In the first test case, the graph contains \n    2\n vertices and\na single edge connecting vertices \n    1\n and \n    2\n. In the first query,\n\n    l=1\n and \n    r=1\n. It is possible to reach any vertex from itself, so\nthe answer to this query is \n    0\n. In the second query, \n    l=1\n and\n\n    r=2\n. Vertices \n    1\n and \n    2\n are reachable from one another using\nonly the first edge, through the path \n    1 \n    \u27f7 2\n. It is\nimpossible to reach vertex \n    2\n from vertex \n    1\n using only the first\n\n    0\n edges. So, the answer to this query is \n    1\n. Graph from the second\ntest case. The integer near the edge is its number. In the second test case,\nthe graph contains \n    5\n vertices and \n    5\n edges. In the first query,\n\n    l=1\n and \n    r=4\n. It is enough to use the first \n    3\n edges to\nsatisfy the condition from the statement: Vertices \n    1\n and \n    2\n are\nreachable from one another through the path \n    1 \n    \u27f7 2\n\n(edge \n    1\n). Vertices \n    1\n and \n    3\n are reachable from one another\nthrough the path \n    1 \n    \u27f7 3\n (edge \n    2\n). Vertices\n\n    1\n and \n    4\n are reachable from one another through the path \n    1\n    \n    \u27f7 2 \n    \u27f7 4\n (edges \n    1\n and\n\n    3\n). Vertices \n    2\n and \n    3\n are reachable from one another through\nthe path \n    2 \n    \u27f7 1 \n    \u27f7 3\n (edges\n\n    1\n and \n    2\n). Vertices \n    2\n and \n    4\n are reachable from one\nanother through the path \n    2 \n    \u27f7 4\n (edge \n    3\n).\nVertices \n    3\n and \n    4\n are reachable from one another through the path\n\n    3 \n    \u27f7 1 \n    \u27f7 2 \n    \u27f7\n    4\n (edges \n    2\n, \n    1\n, and \n    3\n). If we use less than \n    3\n of the\nfirst edges, then the condition won't be satisfied. For example, it is\nimpossible to reach vertex \n    4\n from vertex \n    1\n using only the first\n\n    2\n edges. So, the answer to this query is \n    3\n. In the second query,\n\n    l=3\n and \n    r=4\n. Vertices \n    3\n and \n    4\n are reachable from one\nanother through the path \n    3 \n    \u27f7 1 \n    \u27f7 2\n    \n    \u27f7 4\n (edges \n    2\n, \n    1\n, and \n    3\n). If we use\nany fewer of the first edges, nodes \n    3\n and \n    4\n will not be reachable\nfrom one another.\n\n",
        "cf_contest_id": 1706,
        "cf_index": "E",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "dsu",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2 1 2\r\n1 2\r\n1 1\r\n1 2\r\n5 5 5\r\n1 2\r\n1 3\r\n2 4\r\n3 4\r\n3 5\r\n1 4\r\n3 4\r\n2 2\r\n2 5\r\n3 5\r\n3 2 1\r\n1 3\r\n2 3\r\n1 3\r\n",
                "0 1\r\n3 3 0 5 5\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2 1 1\r\n1 2\r\n1 2\r\n",
                "1\r\n"
            ]
        ]
    }
]