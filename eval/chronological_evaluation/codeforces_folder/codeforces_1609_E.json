[
    {
        "name": "William The Oblivious ",
        "description": "Before becoming a successful trader William got a university degree. During\nhis education an interesting situation happened, after which William started\nto listen to homework assignments much more attentively. What follows is a\nformal description of the homework assignment as William heard it: You are\ngiven a string \n    s\n of length \n    n\n only consisting of characters \"a\",\n\"b\" and \"c\". There are \n    q\n queries of format (\n    pos, c\n), meaning\nreplacing the element of string \n    s\n at position \n    pos\n with character\n\n    c\n. After each query you must output the minimal number of characters in\nthe string, which have to be replaced, so that the string doesn't contain\nstring \"abc\" as a subsequence. A valid replacement of a character is replacing\nit with \"a\", \"b\" or \"c\". A string \n    x\n is said to be a subsequence of\nstring \n    y\n if \n    x\n can be obtained from \n    y\n by deleting some\ncharacters without changing the ordering of the remaining characters. Input\nThe first line contains two integers \n    n\n and \n    q\n \n    (1 \n    \u2264 n, q\n    \n    \u2264 10^5)\n, the length of the string and the number of queries,\nrespectively. The second line contains the string \n    s\n, consisting of\ncharacters \"a\", \"b\" and \"c\". Each of the next \n    q\n lines contains an\ninteger \n    i\n and character \n    c\n \n    (1 \n    \u2264 i \n    \u2264 n)\n, index and the\nvalue of the new item in the string, respectively. It is guaranteed that\ncharacter's \n    c\n value is \"a\", \"b\" or \"c\". Output For each query output the\nminimal number of characters that would have to be replaced so that the string\ndoesn't contain \"abc\" as a subsequence. Example Input 9 12 aaabccccc 4 a 4 b 2\nb 5 a 1 b 6 b 5 c 2 a 1 a 5 a 6 b 7 b Output 0 1 2 2 1 2 1 2 2 2 2 2 Note\nLet's consider the state of the string after each query: \n    s =\n\"aaaaccccc\". In this case the string does not contain \"abc\" as a\nsubsequence and no replacements are needed. \n    s =\n\"aaabccccc\". In this\ncase 1 replacements can be performed to get, for instance, string \n    s =\n\"aaaaccccc\". This string does not contain \"abc\" as a subsequence. \n    s =\n\"ababccccc\". In this case 2 replacements can be performed to get, for\ninstance, string \n    s =\naaaaccccc\". This string does not contain \"abc\" as a\nsubsequence. \n    s =\n\"ababacccc\". In this case 2 replacements can be\nperformed to get, for instance, string \n    s =\n\"aaaaacccc\". This string does\nnot contain \"abc\" as a subsequence. \n    s =\n\"bbabacccc\". In this case 1\nreplacements can be performed to get, for instance, string \n    s =\n\"bbacacccc\". This string does not contain \"abc\" as a subsequence. \n    s =\n\"bbababccc\". In this case 2 replacements can be performed to get, for\ninstance, string \n    s =\n\"bbacacccc\". This string does not contain \"abc\" as\na subsequence. \n    s =\n\"bbabcbccc\". In this case 1 replacements can be\nperformed to get, for instance, string \n    s =\n\"bbcbcbccc\". This string does\nnot contain \"abc\" as a subsequence. \n    s =\n\"baabcbccc\". In this case 2\nreplacements can be performed to get, for instance, string \n    s =\n\"bbbbcbccc\". This string does not contain \"abc\" as a subsequence. \n    s =\n\"aaabcbccc\". In this case 2 replacements can be performed to get, for\ninstance, string \n    s =\n\"aaacccccc\". This string does not contain \"abc\" as\na subsequence. \n    s =\n\"aaababccc\". In this case 2 replacements can be\nperformed to get, for instance, string \n    s =\n\"aaacacccc\". This string does\nnot contain \"abc\" as a subsequence. \n    s =\n\"aaababccc\". In this case 2\nreplacements can be performed to get, for instance, string \n    s =\n\"aaacacccc\". This string does not contain \"abc\" as a subsequence. \n    s =\n\"aaababbcc\". In this case 2 replacements can be performed to get, for\ninstance, string \n    s =\n\"aaababbbb\". This string does not contain \"abc\" as\na subsequence.\n\n",
        "cf_contest_id": 1609,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "data structures",
            "dp",
            "matrices"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "9 12\r\naaabccccc\r\n4 a\r\n4 b\r\n2 b\r\n5 a\r\n1 b\r\n6 b\r\n5 c\r\n2 a\r\n1 a\r\n5 a\r\n6 b\r\n7 b\r\n",
                "0\r\n1\r\n2\r\n2\r\n1\r\n2\r\n1\r\n2\r\n2\r\n2\r\n2\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "8 10\r\nacbaabbb\r\n1 c\r\n3 c\r\n8 b\r\n1 b\r\n4 a\r\n8 a\r\n7 b\r\n4 b\r\n7 b\r\n8 c\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n1\r\n"
            ],
            [
                "1 10\r\na\r\n1 b\r\n1 c\r\n1 a\r\n1 c\r\n1 b\r\n1 a\r\n1 b\r\n1 b\r\n1 c\r\n1 b\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "2 100\r\naa\r\n2 b\r\n2 c\r\n1 b\r\n2 a\r\n2 b\r\n2 c\r\n1 c\r\n2 a\r\n2 b\r\n2 c\r\n1 b\r\n1 c\r\n2 b\r\n2 a\r\n1 a\r\n1 b\r\n1 a\r\n1 b\r\n1 a\r\n2 b\r\n1 c\r\n2 a\r\n2 b\r\n2 c\r\n1 c\r\n2 a\r\n2 a\r\n2 c\r\n2 a\r\n2 b\r\n1 b\r\n2 c\r\n1 c\r\n2 c\r\n1 a\r\n2 c\r\n1 b\r\n2 a\r\n2 a\r\n1 b\r\n1 b\r\n1 c\r\n2 c\r\n2 a\r\n2 a\r\n2 a\r\n1 c\r\n1 a\r\n2 a\r\n1 a\r\n2 b\r\n2 c\r\n2 c\r\n1 b\r\n1 a\r\n1 b\r\n2 a\r\n1 a\r\n1 b\r\n1 a\r\n2 a\r\n1 a\r\n2 c\r\n1 a\r\n1 c\r\n2 c\r\n1 a\r\n1 a\r\n2 b\r\n2 b\r\n2 a\r\n1 b\r\n1 a\r\n1 c\r\n1 b\r\n1 a\r\n2 b\r\n2 b\r\n2 c\r\n2 a\r\n2 a\r\n2 c\r\n1 a\r\n1 a\r\n1 c\r\n2 a\r\n2 b\r\n2 c\r\n1 b\r\n1 c\r\n1 a\r\n1 a\r\n1 b\r\n1 a\r\n1 b\r\n1 b\r\n1 a\r\n2 a\r\n2 b\r\n2 a\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ]
        ]
    }
]