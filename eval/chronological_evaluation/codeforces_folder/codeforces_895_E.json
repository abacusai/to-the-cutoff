[
    {
        "name": "Eyes Closed",
        "description": "Vasya and Petya were tired of studying so they decided to play a game. Before\nthe game begins Vasya looks at array a consisting of n integers. As soon as he\nremembers all elements of a the game begins. Vasya closes his eyes and Petya\ndoes q actions of one of two types: 1) Petya says 4 integers l1, r1, l2, r2 \u2014\nboundaries of two non-intersecting segments. After that he swaps one random\nelement from the [l1, r1] segment with another random element from the [l2,\nr2] segment. 2) Petya asks Vasya the sum of the elements of a in the [l, r]\nsegment. Vasya is a mathematician so he answers Petya the mathematical\nexpectation of the sum of the elements in the segment. Your task is to write a\nprogram which will answer the second type questions as Vasya would do it. In\nother words your program should print the mathematical expectation of the sum\nof the elements of a in the [l, r] segment for every second type query. Input\nThe first line contains two integers n, q (2 \u2264 n \u2264 10^5, 1 \u2264 q \u2264 10^5) \u2014 the\nnumber of elements in the array and the number of queries you need to handle.\nThe second line contains n integers ai (1 \u2264 ai \u2264 10^9) \u2014 elements of the\narray. The next q lines contain Petya's actions of type 1 or 2. If it is a\ntype 1 action then the line contains 5 integers 1, l1, r1, l2, r2 (1 \u2264 l1 \u2264 r1\n\u2264 n, 1 \u2264 l2 \u2264 r2 \u2264 n). If it is a type 2 query then the line contains 3\nintegers 2, l, r (1 \u2264 l \u2264 r \u2264 n). It is guaranteed that there is at least one\ntype 2 query and segments [l1, r1], [l2, r2] don't have common elements.\nOutput For each type 2 query print one real number \u2014 the mathematical\nexpectation of the sum of elements in the segment. Your answer will be\nconsidered correct if its absolute or relative error doesn't exceed 10^-4 \u2014\nformally, the answer is correct if where x is jury's answer and y is yours.\nExamples Input 4 4 1 1 2 2 1 2 2 3 3 2 1 2 1 1 2 3 4 2 1 2 Output 3.0000000\n3.0000000 Input 10 5 1 1 1 1 1 2 2 2 2 2 1 1 5 6 10 2 1 5 1 1 5 6 10 1 1 5 6\n10 2 6 10 Output 6.0000000 8.0400000 Input 10 10 1 2 3 4 5 6 7 8 9 10 1 1 5 6\n10 1 1 5 6 10 2 1 5 1 1 3 6 9 2 1 3 1 5 7 8 10 1 1 1 10 10 2 1 5 2 7 10 2 1 10\nOutput 23.0000000 14.0000000 28.0133333 21.5733333 55.0000000\n\n",
        "cf_contest_id": 895,
        "cf_index": "E",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "probabilities"
        ],
        "time_limit_seconds": 2.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 4\r\n1 1 2 2\r\n1 2 2 3 3\r\n2 1 2\r\n1 1 2 3 4\r\n2 1 2\r\n",
                "3.0000000\r\n3.0000000\r\n"
            ],
            [
                "10 5\r\n1 1 1 1 1 2 2 2 2 2\r\n1 1 5 6 10\r\n2 1 5\r\n1 1 5 6 10\r\n1 1 5 6 10\r\n2 6 10\r\n",
                "6.0000000\r\n8.0400000\r\n"
            ],
            [
                "10 10\r\n1 2 3 4 5 6 7 8 9 10\r\n1 1 5 6 10\r\n1 1 5 6 10\r\n2 1 5\r\n1 1 3 6 9\r\n2 1 3\r\n1 5 7 8 10\r\n1 1 1 10 10\r\n2 1 5\r\n2 7 10\r\n2 1 10\r\n",
                "23.0000000\r\n14.0000000\r\n28.0133333\r\n21.5733333\r\n55.0000000\r\n"
            ]
        ],
        "private_cases": [
            [
                "6 5\r\n35 46 57 83 100 33\r\n2 2 5\r\n1 1 1 3 3\r\n2 2 6\r\n1 5 5 6 6\r\n2 1 6\r\n",
                "286.0000000\r\n297.0000000\r\n354.0000000\r\n"
            ],
            [
                "6 10\r\n17 41 84 21 96 11\r\n1 5 5 6 6\r\n1 1 4 5 6\r\n1 4 5 6 6\r\n2 3 3\r\n2 5 5\r\n1 5 5 6 6\r\n2 3 3\r\n1 3 3 4 6\r\n2 6 6\r\n2 1 6\r\n",
                "76.3750000\r\n47.1250000\r\n76.3750000\r\n56.8750000\r\n270.0000000\r\n"
            ],
            [
                "10 10\r\n61 59 97 16 2 94 57 48 91 93\r\n2 10 10\r\n1 9 9 10 10\r\n2 6 8\r\n1 1 2 7 10\r\n1 4 4 9 9\r\n2 6 7\r\n1 9 9 10 10\r\n1 9 9 10 10\r\n2 2 2\r\n2 1 10\r\n",
                "93.0000000\r\n199.0000000\r\n151.7500000\r\n65.6250000\r\n618.0000000\r\n"
            ],
            [
                "10 20\r\n80 41 15 77 91 82 15 83 36 3\r\n1 2 3 9 9\r\n2 8 9\r\n1 8 8 10 10\r\n2 10 10\r\n2 7 7\r\n1 7 9 10 10\r\n2 6 7\r\n2 10 10\r\n2 9 9\r\n1 8 8 9 10\r\n1 4 5 6 9\r\n2 1 8\r\n1 4 4 6 10\r\n1 9 9 10 10\r\n1 2 6 7 8\r\n1 4 6 7 9\r\n1 4 6 8 8\r\n1 3 4 6 10\r\n2 8 9\r\n2 1 10\r\n",
                "111.0000000\r\n83.0000000\r\n15.0000000\r\n119.6666667\r\n15.3333333\r\n46.3333333\r\n451.0000000\r\n94.0380185\r\n523.0000000\r\n"
            ],
            [
                "10 50\r\n32 98 70 70 65 52 11 5 60 34\r\n2 3 10\r\n1 8 8 9 9\r\n2 7 9\r\n2 3 7\r\n2 5 9\r\n1 2 6 10 10\r\n2 2 5\r\n2 3 10\r\n2 4 6\r\n2 3 5\r\n1 2 6 7 10\r\n2 10 10\r\n2 3 9\r\n2 8 8\r\n2 6 7\r\n1 1 2 3 6\r\n1 9 9 10 10\r\n2 3 10\r\n1 5 7 9 9\r\n2 5 6\r\n1 3 3 5 6\r\n1 4 8 9 10\r\n2 7 8\r\n1 1 1 6 9\r\n2 10 10\r\n1 3 3 8 8\r\n2 4 9\r\n2 6 6\r\n2 3 8\r\n2 10 10\r\n1 5 7 8 9\r\n1 7 7 9 9\r\n2 7 9\r\n2 8 10\r\n2 8 9\r\n2 7 8\r\n2 4 5\r\n2 3 6\r\n1 4 5 8 8\r\n1 4 4 5 8\r\n1 2 5 6 8\r\n1 2 5 7 7\r\n1 1 2 10 10\r\n1 6 6 7 10\r\n2 10 10\r\n2 7 8\r\n1 2 4 5 10\r\n1 2 3 4 5\r\n2 6 8\r\n2 1 10\r\n",
                "367.0000000\r\n76.0000000\r\n268.0000000\r\n193.0000000\r\n269.6000000\r\n379.8000000\r\n170.0000000\r\n184.4000000\r\n69.1500000\r\n320.3400000\r\n60.9000000\r\n70.2200000\r\n389.3350000\r\n114.2483333\r\n92.3948333\r\n36.8686667\r\n295.6724792\r\n48.8744375\r\n300.7662292\r\n36.8686667\r\n141.9519722\r\n132.0369688\r\n95.1683021\r\n98.7203924\r\n103.8138437\r\n205.6323194\r\n52.7721615\r\n105.6723661\r\n155.1092535\r\n497.0000000\r\n"
            ],
            [
                "2 1\r\n1 2\r\n2 1 2\r\n",
                "3.0000000\r\n"
            ],
            [
                "6 10\r\n1 1 1 1000000000 1000000000 1000000000\r\n1 1 3 4 6\r\n1 1 3 4 6\r\n1 1 3 4 6\r\n1 1 3 4 6\r\n1 1 3 4 6\r\n1 1 3 4 6\r\n1 1 3 4 6\r\n1 1 3 4 6\r\n1 1 3 4 6\r\n2 1 3\r\n",
                "1499923793.6049383\r\n"
            ],
            [
                "7 5\r\n1 1 2 3 5 8 13\r\n1 1 3 4 5\r\n1 1 2 5 6\r\n1 6 7 1 5\r\n2 1 3\r\n2 2 5\r\n",
                "13.6000000\r\n16.1666667\r\n"
            ]
        ]
    }
]