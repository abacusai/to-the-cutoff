[
    {
        "name": "Furukawa Nagisa's Tree",
        "description": "One day, Okazaki Tomoya has bought a tree for Furukawa Nagisa's birthday. The\ntree is so strange that every node of the tree has a value. The value of the\ni-th node is vi. Now Furukawa Nagisa and Okazaki Tomoya want to play a game on\nthe tree. Let (s, e) be the path from node s to node e, we can write down the\nsequence of the values of nodes on path (s, e), and denote this sequence as\nS(s, e). We define the value of the sequence G(S(s, e)) as follows. Suppose\nthat the sequence is z0, z1...zl - 1, where l is the length of the sequence.\nWe define G(S(s, e)) = z0 \u00d7 k^0 + z1 \u00d7 k^1 + ... + zl - 1 \u00d7 k^l-1. If the path\n(s, e) satisfies , then the path (s, e) belongs to Furukawa Nagisa, otherwise\nit belongs to Okazaki Tomoya. Calculating who has more paths is too easy, so\nthey want to play something more difficult. Furukawa Nagisa thinks that if\npaths (p1, p2) and (p2, p3) belong to her, then path (p1, p3) belongs to her\nas well. Also, she thinks that if paths (p1, p2) and (p2, p3) belong to\nOkazaki Tomoya, then path (p1, p3) belongs to Okazaki Tomoya as well. But in\nfact, this conclusion isn't always right. So now Furukawa Nagisa wants to know\nhow many triplets (p1, p2, p3) are correct for the conclusion, and this is\nyour task. Input The first line contains four integers n, y, k and x (1 \u2264 n \u2264\n10^5; 2 \u2264 y \u2264 10^9; 1 \u2264 k < y; 0 \u2264 x < y) \u2014 n being the number of nodes on the\ntree. It is guaranteed that y is a prime number. The second line contains n\nintegers, the i-th integer is vi (0 \u2264 vi < y). Then follow n - 1 lines, each\nline contains two integers, denoting an edge of the tree. The nodes of the\ntree are numbered from 1 to n. Output Output a single integer \u2014 the number of\ntriplets that are correct for Furukawa Nagisa's conclusion. Examples Input 1 2\n1 0 1 Output 1 Input 3 5 2 1 4 3 1 1 2 2 3 Output 14 Input 8 13 8 12 0 12 7 4\n12 0 8 12 1 8 8 4 4 6 6 2 2 3 8 5 2 7 Output 341\n\n",
        "cf_contest_id": 434,
        "cf_index": "E",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "divide and conquer",
            "sortings",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "1 2 1 0\r\n1\r\n",
                "1\r\n"
            ],
            [
                "3 5 2 1\r\n4 3 1\r\n1 2\r\n2 3\r\n",
                "14\r\n"
            ],
            [
                "8 13 8 12\r\n0 12 7 4 12 0 8 12\r\n1 8\r\n8 4\r\n4 6\r\n6 2\r\n2 3\r\n8 5\r\n2 7\r\n",
                "341\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 11 10 7\r\n3 10\r\n1 2\r\n",
                "4\r\n"
            ],
            [
                "5 3 1 1\r\n0 0 0 0 1\r\n1 5\r\n5 4\r\n4 3\r\n3 2\r\n",
                "59\r\n"
            ],
            [
                "3 3 1 2\r\n2 1 1\r\n1 2\r\n2 3\r\n",
                "9\r\n"
            ],
            [
                "5 2 1 1\r\n1 0 0 0 0\r\n1 2\r\n1 5\r\n5 3\r\n1 4\r\n",
                "65\r\n"
            ],
            [
                "8 5 1 1\r\n0 3 4 3 0 3 2 0\r\n1 5\r\n1 7\r\n7 3\r\n5 4\r\n3 2\r\n1 6\r\n6 8\r\n",
                "326\r\n"
            ],
            [
                "10 3 2 0\r\n2 0 1 1 2 2 2 2 2 0\r\n1 10\r\n10 3\r\n10 8\r\n3 7\r\n1 2\r\n1 5\r\n10 9\r\n10 6\r\n6 4\r\n",
                "454\r\n"
            ],
            [
                "4 13 5 9\r\n11 9 2 11\r\n1 2\r\n2 3\r\n2 4\r\n",
                "55\r\n"
            ],
            [
                "3 13 9 0\r\n5 9 3\r\n1 2\r\n1 3\r\n",
                "27\r\n"
            ],
            [
                "6 19 5 16\r\n18 0 12 5 0 9\r\n1 2\r\n1 5\r\n2 6\r\n6 3\r\n6 4\r\n",
                "216\r\n"
            ],
            [
                "9 5 4 2\r\n0 1 0 3 1 4 2 2 4\r\n1 5\r\n5 8\r\n5 9\r\n5 4\r\n5 7\r\n4 2\r\n1 6\r\n5 3\r\n",
                "436\r\n"
            ],
            [
                "13 11 7 5\r\n1 0 0 6 9 5 3 1 7 0 5 3 0\r\n1 10\r\n10 13\r\n10 12\r\n12 7\r\n7 8\r\n8 4\r\n12 6\r\n4 9\r\n13 5\r\n5 3\r\n10 11\r\n8 2\r\n",
                "1689\r\n"
            ],
            [
                "16 17 3 14\r\n3 10 6 3 8 8 7 16 0 9 1 4 3 1 6 11\r\n1 6\r\n1 4\r\n1 11\r\n6 5\r\n5 14\r\n5 3\r\n1 8\r\n1 2\r\n6 15\r\n4 16\r\n1 12\r\n2 9\r\n12 13\r\n5 7\r\n15 10\r\n",
                "3610\r\n"
            ],
            [
                "22 7 1 2\r\n0 4 3 3 1 5 3 3 1 4 2 5 3 1 4 1 0 6 5 1 3 6\r\n1 18\r\n18 22\r\n1 8\r\n8 3\r\n3 13\r\n8 12\r\n22 21\r\n1 4\r\n13 7\r\n7 6\r\n4 2\r\n3 11\r\n18 15\r\n13 5\r\n18 17\r\n4 16\r\n11 10\r\n3 14\r\n4 19\r\n22 20\r\n10 9\r\n",
                "6757\r\n"
            ],
            [
                "11 70327 50222 52541\r\n8473 14143 6080 32594 6028 25465 32146 17052 21168 31052 25500\r\n1 4\r\n4 11\r\n1 6\r\n4 5\r\n5 2\r\n6 8\r\n4 3\r\n8 10\r\n5 7\r\n5 9\r\n",
                "1331\r\n"
            ],
            [
                "5 41897 23399 13294\r\n21304 8954 19233 2773 26606\r\n1 4\r\n4 3\r\n4 2\r\n2 5\r\n",
                "125\r\n"
            ],
            [
                "29 1277 344 649\r\n187 1241 309 20 768 381 1043 804 588 263 795 172 203 849 779 58 110 337 291 894 601 77 943 528 21 167 457 126 957\r\n1 29\r\n29 28\r\n1 21\r\n28 5\r\n29 8\r\n1 10\r\n1 2\r\n28 17\r\n5 18\r\n29 27\r\n27 15\r\n8 12\r\n8 11\r\n1 7\r\n27 23\r\n10 19\r\n29 24\r\n1 3\r\n18 20\r\n24 22\r\n10 4\r\n17 25\r\n1 16\r\n4 9\r\n9 13\r\n24 6\r\n22 14\r\n22 26\r\n",
                "24389\r\n"
            ],
            [
                "30 73121 39984 53821\r\n19482 6851 15101 14876 20487 31835 30036 30719 12522 26197 31937 20457 9178 19895 30019 3245 25587 28287 8941 14815 1799 7562 1085 9435 2703 29110 26282 28425 11496 2116\r\n1 21\r\n1 26\r\n26 30\r\n26 15\r\n15 17\r\n1 27\r\n27 9\r\n27 22\r\n15 18\r\n18 16\r\n22 29\r\n18 25\r\n30 24\r\n15 2\r\n29 8\r\n18 11\r\n21 19\r\n17 23\r\n21 12\r\n1 20\r\n26 6\r\n11 5\r\n26 10\r\n30 14\r\n16 7\r\n23 13\r\n11 4\r\n25 3\r\n27 28\r\n",
                "27000\r\n"
            ],
            [
                "10 815165809 4938204 366175867\r\n30926 25854 8579 5159 336 29062 9475 15525 25633 21617\r\n1 2\r\n1 8\r\n2 4\r\n4 10\r\n1 3\r\n10 6\r\n2 5\r\n5 9\r\n2 7\r\n",
                "1000\r\n"
            ]
        ]
    }
]