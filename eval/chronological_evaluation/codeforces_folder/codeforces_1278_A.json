[
    {
        "name": "Shuffle Hashing",
        "description": "Polycarp has built his own web service. Being a modern web service it includes\nlogin feature. And that always implies password security problems. Polycarp\ndecided to store the hash of the password, generated by the following\nalgorithm: take the password \n    p\n, consisting of lowercase Latin letters,\nand shuffle the letters randomly in it to obtain \n    p'\n (\n    p'\n can still\nbe equal to \n    p\n); generate two random strings, consisting of lowercase\nLatin letters, \n    s_1\n and \n    s_2\n (any of these strings can be empty);\nthe resulting hash \n    h = s_1 + p' + s_2\n, where addition is string\nconcatenation. For example, let the password \n    p =\n \"abacaba\". Then\n\n    p'\n can be equal to \"aabcaab\". Random strings \n    s1 =\n \"zyx\" and \n    s2\n    =\n \"kjh\". Then \n    h =\n \"zyxaabcaabkjh\". Note that no letters could be\ndeleted or added to \n    p\n to obtain \n    p'\n, only the order could be\nchanged. Now Polycarp asks you to help him to implement the password check\nmodule. Given the password \n    p\n and the hash \n    h\n, check that \n    h\n\ncan be the hash for the password \n    p\n. Your program should answer \n    t\n\nindependent test cases. Input The first line contains one integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test cases. The first line of each\ntest case contains a non-empty string \n    p\n, consisting of lowercase Latin\nletters. The length of \n    p\n does not exceed \n    100\n. The second line of\neach test case contains a non-empty string \n    h\n, consisting of lowercase\nLatin letters. The length of \n    h\n does not exceed \n    100\n. Output For\neach test case print the answer to it \u2014 \"YES\" if the given hash \n    h\n could\nbe obtained from the given password \n    p\n or \"NO\" otherwise. Example Input 5\nabacaba zyxaabcaabkjh onetwothree threetwoone one zzonneyy one none twenty ten\nOutput YES YES NO YES NO Note The first test case is explained in the\nstatement. In the second test case both \n    s_1\n and \n    s_2\n are empty and\n\n    p'=\n \"threetwoone\" is \n    p\n shuffled. In the third test case the hash\ncould not be obtained from the password. In the fourth test case \n    s_1=\n\n\"n\", \n    s_2\n is empty and \n    p'=\n \"one\" is \n    p\n shuffled (even thought\nit stayed the same). In the fifth test case the hash could not be obtained\nfrom the password.\n\n",
        "cf_contest_id": 1278,
        "cf_index": "A",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\nabacaba\r\nzyxaabcaabkjh\r\nonetwothree\r\nthreetwoone\r\none\r\nzzonneyy\r\none\r\nnone\r\ntwenty\r\nten\r\n",
                "YES\r\nYES\r\nNO \r\nYES\r\nNO \r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\nabacaba\r\nzyxaabcaabkjh\r\nonetwothree\r\nthreetwoone\r\n",
                "YES\r\nYES\r\n"
            ],
            [
                "1\r\na\r\nabcd\r\n",
                "YES\r\n"
            ],
            [
                "1\r\ndaaaaaaaa\r\nbbbbbbbbb\r\n",
                "NO \r\n"
            ]
        ]
    }
]