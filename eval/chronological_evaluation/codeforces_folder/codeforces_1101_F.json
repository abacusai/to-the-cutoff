[
    {
        "name": "Trucks and Cities",
        "description": "There are \n    n\n cities along the road, which can be represented as a\nstraight line. The \n    i\n-th city is situated at the distance of \n    a_i\n\nkilometers from the origin. All cities are situated in the same direction from\nthe origin. There are \n    m\n trucks travelling from one city to another. Each\ntruck can be described by \n    4\n integers: starting city \n    s_i\n, finishing\ncity \n    f_i\n, fuel consumption \n    c_i\n and number of possible refuelings\n\n    r_i\n. The \n    i\n-th truck will spend \n    c_i\n litres of fuel per one\nkilometer. When a truck arrives in some city, it can be refueled (but\nrefueling is impossible in the middle of nowhere). The \n    i\n-th truck can be\nrefueled at most \n    r_i\n times. Each refueling makes truck's gas-tank full.\nAll trucks start with full gas-tank. All trucks will have gas-tanks of the\nsame size \n    V\n litres. You should find minimum possible \n    V\n such that\nall trucks can reach their destinations without refueling more times than\nallowed. Input First line contains two integers \n    n\n and \n    m\n (\n    2\n    \n    \u2264 n \n    \u2264 400\n, \n    1 \n    \u2264 m \n    \u2264 250000\n) \u2014 the number of cities and\ntrucks. The second line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n\n(\n    1 \n    \u2264 a_i \n    \u2264 10^9\n, \n    a_i < a_i+1\n) \u2014 positions of cities in\nthe ascending order. Next \n    m\n lines contains \n    4\n integers each. The\n\n    i\n-th line contains integers \n    s_i\n, \n    f_i\n, \n    c_i\n, \n    r_i\n\n(\n    1 \n    \u2264 s_i < f_i \n    \u2264 n\n, \n    1 \n    \u2264 c_i \n    \u2264 10^9\n, \n    0 \n    \u2264 r_i\n    \n    \u2264 n\n) \u2014 the description of the \n    i\n-th truck. Output Print the only\ninteger \u2014 minimum possible size of gas-tanks \n    V\n such that all trucks can\nreach their destinations. Example Input 7 6 2 5 7 10 14 15 17 1 3 10 0 1 7 12\n7 4 5 13 3 4 7 10 1 4 7 10 1 1 5 11 2 Output 55 Note Let's look at queries in\ndetails: the \n    1\n-st truck must arrive at position \n    7\n from \n    2\n\nwithout refuelling, so it needs gas-tank of volume at least \n    50\n. the\n\n    2\n-nd truck must arrive at position \n    17\n from \n    2\n and can be\nrefueled at any city (if it is on the path between starting point and ending\npoint), so it needs gas-tank of volume at least \n    48\n. the \n    3\n-rd truck\nmust arrive at position \n    14\n from \n    10\n, there is no city between, so\nit needs gas-tank of volume at least \n    52\n. the \n    4\n-th truck must\narrive at position \n    17\n from \n    10\n and can be refueled only one time:\nit's optimal to refuel at \n    5\n-th city (position \n    14\n) so it needs gas-\ntank of volume at least \n    40\n. the \n    5\n-th truck has the same\ndescription, so it also needs gas-tank of volume at least \n    40\n. the\n\n    6\n-th truck must arrive at position \n    14\n from \n    2\n and can be\nrefueled two times: first time in city \n    2\n or \n    3\n and second time in\ncity \n    4\n so it needs gas-tank of volume at least \n    55\n.\n\n",
        "cf_contest_id": 1101,
        "cf_index": "F",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dp"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 6\r\n2 5 7 10 14 15 17\r\n1 3 10 0\r\n1 7 12 7\r\n4 5 13 3\r\n4 7 10 1\r\n4 7 10 1\r\n1 5 11 2\r\n",
                "55"
            ]
        ],
        "private_cases": [
            [
                "10 10\r\n2 3 4 8 9 10 12 13 15 19\r\n3 8 3 1\r\n3 4 3 2\r\n1 9 2 1\r\n1 9 3 1\r\n6 10 2 1\r\n3 9 2 0\r\n3 7 2 1\r\n2 3 3 0\r\n3 9 2 0\r\n4 10 3 0\r\n",
                "33"
            ]
        ]
    }
]