[
    {
        "name": "Load Balancing",
        "description": "In the school computer room there are n servers which are responsible for\nprocessing several computing tasks. You know the number of scheduled tasks for\neach server: there are mi tasks assigned to the i-th server. In order to\nbalance the load for each server, you want to reassign some tasks to make the\ndifference between the most loaded server and the least loaded server as small\nas possible. In other words you want to minimize expression ma - mb, where a\nis the most loaded server and b is the least loaded one. In one second you can\nreassign a single task. Thus in one second you can choose any pair of servers\nand move a single task from one server to another. Write a program to find the\nminimum number of seconds needed to balance the load of servers. Input The\nfirst line contains positive number n (1 \u2264 n \u2264 10^5) \u2014 the number of the\nservers. The second line contains the sequence of non-negative integers m1,\nm2, ..., mn (0 \u2264 mi \u2264 2\u00b710^4), where mi is the number of tasks assigned to the\ni-th server. Output Print the minimum number of seconds required to balance\nthe load. Examples Input 2 1 6 Output 2 Input 7 10 11 10 11 10 11 11 Output 0\nInput 5 1 2 3 4 5 Output 3 Note In the first example two seconds are needed.\nIn each second, a single task from server #2 should be moved to server #1.\nAfter two seconds there should be 3 tasks on server #1 and 4 tasks on server\n#2. In the second example the load is already balanced. A possible sequence of\ntask movements for the third example is: move a task from server #4 to server\n#1 (the sequence m becomes: 2 2 3 3 5); then move task from server #5 to\nserver #1 (the sequence m becomes: 3 2 3 3 4); then move task from server #5\nto server #2 (the sequence m becomes: 3 3 3 3 3). The above sequence is one of\nseveral possible ways to balance the load of servers in three seconds.\n\n",
        "cf_contest_id": 609,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n1 6\r\n",
                "2\r\n"
            ],
            [
                "7\r\n10 11 10 11 10 11 11\r\n",
                "0\r\n"
            ],
            [
                "5\r\n1 2 3 4 5\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n0 0 0 0 0 0 0 0 0 0\r\n",
                "0\r\n"
            ],
            [
                "1\r\n0\r\n",
                "0\r\n"
            ],
            [
                "1\r\n20000\r\n",
                "0\r\n"
            ],
            [
                "3\r\n1 10000 20000\r\n",
                "9999\r\n"
            ],
            [
                "10\r\n19999 19999 20000 20000 19999 20000 20000 20000 19999 19999\r\n",
                "0\r\n"
            ],
            [
                "10\r\n8 5 5 5 6 6 6 6 5 5\r\n",
                "2\r\n"
            ],
            [
                "2\r\n10 3\r\n",
                "3\r\n"
            ],
            [
                "5\r\n6 5 9 7 6\r\n",
                "2\r\n"
            ],
            [
                "5\r\n2 10 20 30 50\r\n",
                "34\r\n"
            ],
            [
                "7\r\n2 2 2 2 2 3 4\r\n",
                "1\r\n"
            ]
        ]
    }
]