[
    {
        "name": "Qpwoeirut And The City",
        "description": "Qpwoeirut has taken up architecture and ambitiously decided to remodel his\ncity. Qpwoeirut's city can be described as a row of \n    n\n buildings, the\n\n    i\n-th (\n    1 \n    \u2264 i \n    \u2264 n\n) of which is \n    h_i\n floors high. You\ncan assume that the height of every floor in this problem is equal. Therefore,\nbuilding \n    i\n is taller than the building \n    j\n if and only if the number\nof floors \n    h_i\n in building \n    i\n is larger than the number of floors\n\n    h_j\n in building \n    j\n. Building \n    i\n is cool if it is taller than\nboth building \n    i-1\n and building \n    i+1\n (and both of them exist). Note\nthat neither the \n    1\n-st nor the \n    n\n-th building can be cool. To\nremodel the city, Qpwoeirut needs to maximize the number of cool buildings. To\ndo this, Qpwoeirut can build additional floors on top of any of the buildings\nto make them taller. Note that he cannot remove already existing floors. Since\nbuilding new floors is expensive, Qpwoeirut wants to minimize the number of\nfloors he builds. Find the minimum number of floors Qpwoeirut needs to build\nin order to maximize the number of cool buildings. Input The first line\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of\ntest cases. The first line of each test case contains the single integer\n\n    n\n (\n    3 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the number of buildings in Qpwoeirut's\ncity. The second line of each test case contains \n    n\n integers \n    h_1, h_2,\n    \n    \u2026, h_n\n (\n    1 \n    \u2264 h_i \n    \u2264 10^9\n) \u2014 the number of floors in each\nof the buildings of the city. It is guaranteed that the sum of \n    n\n over\nall test cases does not exceed \n    2 \n    \u00b7 10^5\n. Output For each test\ncase, print a single integer \u2014 the minimum number of additional floors\nQpwoeirut needs to build in order to maximize the number of cool buildings.\nExample Input 6 3 2 1 2 5 1 2 1 4 3 6 3 1 4 5 5 2 8 4 2 1 3 5 3 6 1 6 1 10 1 1\n10 1 8 1 10 11 1 10 11 10 1 Output 2 0 3 3 0 4 Note In the first test case, it\nis optimal for Qpwoeirut to make the second building cool by building \n    2\n\nadditional floors on top of it, making it taller than both of its adjacent\nbuildings. The final heights of buildings will be \n    [2, \n    3,\n    2]\n. In the second test case, the number of cool buildings is already\nmaximized, so Qpwoeirut does not need to do anything. In the third test case,\nit is optimal for Qpwoeirut to make the third and fifth buildings cool by\nbuilding \n    2\n additional floors onto the third building and \n    1\n\nadditional floor onto the fifth building. The final heights of buildings will\nbe \n    [3, 1, \n    6, 5, \n    6, 2]\n. It can be shown that\nit is impossible to make more than \n    2\n of the buildings cool, or to make\n\n    2\n buildings cool using fewer than \n    3\n additional floors. In the\nfourth test case, Qpwoeirut can either make the second building cool, or he\ncan make the third building cool. Either way, he will be building \n    3\n\nadditional floors and maximizing the number of cool buildings. The final\nheights of buildings will be \n    [4, 2, \n    4, 3, 5, 3, 6, 1]\n or\n\n    [4, \n    5, 1, 3, 5, 3, 6, 1]\n.\n\n",
        "cf_contest_id": 1706,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "flows",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n3\r\n2 1 2\r\n5\r\n1 2 1 4 3\r\n6\r\n3 1 4 5 5 2\r\n8\r\n4 2 1 3 5 3 6 1\r\n6\r\n1 10 1 1 10 1\r\n8\r\n1 10 11 1 10 11 10 1\r\n",
                "2\r\n0\r\n3\r\n3\r\n0\r\n4\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n3\r\n1 1 1\r\n",
                "1\r\n"
            ]
        ]
    }
]