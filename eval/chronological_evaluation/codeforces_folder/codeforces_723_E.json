[
    {
        "name": "One-Way Reform",
        "description": "There are n cities and m two-way roads in Berland, each road connects two\ncities. It is known that there is no more than one road connecting each pair\nof cities, and there is no road which connects the city with itself. It is\npossible that there is no way to get from one city to some other city using\nonly these roads. The road minister decided to make a reform in Berland and to\norient all roads in the country, i.e. to make each road one-way. The minister\nwants to maximize the number of cities, for which the number of roads that\nbegins in the city equals to the number of roads that ends in it. Input The\nfirst line contains a positive integer t (1 \u2264 t \u2264 200) \u2014 the number of\ntestsets in the input. Each of the testsets is given in the following way. The\nfirst line contains two integers n and m (1 \u2264 n \u2264 200, 0 \u2264 m \u2264 n\u00b7(n - 1) / 2)\n\u2014 the number of cities and the number of roads in Berland. The next m lines\ncontain the description of roads in Berland. Each line contains two integers u\nand v (1 \u2264 u, v \u2264 n) \u2014 the cities the corresponding road connects. It's\nguaranteed that there are no self-loops and multiple roads. It is possible\nthat there is no way along roads between a pair of cities. It is guaranteed\nthat the total number of cities in all testset of input data doesn't exceed\n200. Pay attention that for hacks, you can only use tests consisting of one\ntestset, so t should be equal to one. Output For each testset print the\nmaximum number of such cities that the number of roads that begins in the\ncity, is equal to the number of roads that ends in it. In the next m lines\nprint oriented roads. First print the number of the city where the road begins\nand then the number of the city where the road ends. If there are several\nanswers, print any of them. It is allowed to print roads in each test in\narbitrary order. Each road should be printed exactly once. Example Input 2 5 5\n2 1 4 5 2 3 1 3 3 5 7 2 3 7 4 2 Output 3 1 3 3 5 5 4 3 2 2 1 3 2 4 3 7\n\n",
        "cf_contest_id": 723,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "flows",
            "graphs",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n5 5\r\n2 1\r\n4 5\r\n2 3\r\n1 3\r\n3 5\r\n7 2\r\n3 7\r\n4 2\r\n",
                "3\r\n3 1\r\n1 2\r\n2 3\r\n3 5\r\n5 4\r\n3\r\n2 4\r\n3 7\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n9 17\r\n3 6\r\n2 6\r\n6 9\r\n4 1\r\n2 8\r\n1 9\r\n7 9\r\n8 5\r\n1 7\r\n4 9\r\n6 7\r\n3 4\r\n9 3\r\n8 4\r\n2 1\r\n3 8\r\n2 7\r\n5 6\r\n2 5\r\n3 4\r\n1 3\r\n4 5\r\n5 3\r\n2 3\r\n12 8\r\n10 2\r\n9 2\r\n6 9\r\n10 6\r\n8 2\r\n4 10\r\n11 2\r\n4 11\r\n19 10\r\n6 2\r\n3 12\r\n17 7\r\n2 19\r\n17 4\r\n1 13\r\n7 1\r\n13 7\r\n6 8\r\n11 7\r\n",
                "7\r\n5 8\r\n8 2\r\n2 1\r\n1 4\r\n4 3\r\n3 6\r\n6 2\r\n2 7\r\n7 1\r\n1 9\r\n3 8\r\n8 4\r\n4 9\r\n9 3\r\n6 7\r\n7 9\r\n9 6\r\n3\r\n1 3\r\n3 2\r\n2 5\r\n3 4\r\n4 5\r\n5 3\r\n10\r\n8 2\r\n2 9\r\n9 6\r\n6 10\r\n2 10\r\n10 4\r\n4 11\r\n11 2\r\n13\r\n3 12\r\n4 17\r\n17 7\r\n7 1\r\n1 13\r\n13 7\r\n7 11\r\n8 6\r\n6 2\r\n2 19\r\n"
            ],
            [
                "1\r\n200 0\r\n",
                "200\r\n"
            ],
            [
                "1\r\n13 9\r\n13 12\r\n3 11\r\n12 10\r\n12 9\r\n2 11\r\n3 8\r\n1 3\r\n2 13\r\n13 11\r\n",
                "5\r\n1 3\r\n8 3\r\n3 11\r\n9 12\r\n10 12\r\n12 13\r\n2 11\r\n11 13\r\n13 2\r\n"
            ],
            [
                "1\r\n4 6\r\n1 3\r\n4 1\r\n3 2\r\n1 2\r\n4 3\r\n4 2\r\n",
                "0\r\n1 2\r\n3 1\r\n1 4\r\n2 3\r\n3 4\r\n4 2\r\n"
            ],
            [
                "1\r\n6 7\r\n3 2\r\n3 1\r\n6 4\r\n1 2\r\n5 4\r\n3 4\r\n5 6\r\n",
                "4\r\n3 1\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 4\r\n"
            ],
            [
                "1\r\n5 4\r\n1 2\r\n2 3\r\n2 4\r\n2 5\r\n",
                "1\r\n1 2\r\n2 3\r\n4 2\r\n2 5\r\n"
            ]
        ]
    }
]