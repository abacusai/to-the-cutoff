[
    {
        "name": "Sweets",
        "description": "Anya came to her friend's birthday party. There are \n    n\n delicious sweets\non a circle table (for convenience, we will number them from \n    1\n to\n\n    n\n in clockwise direction). For each of the sweets, it is known whether\nAnya likes it or not. Anya decided that she should eat all the sweets that are\non the table, and she likes them. However, eating all the sweets in some\nrandom order is too boring. Therefore, Anya came up with a game that will make\nthe process of eating sweets more interesting. The game is played according to\nthe following rules: if there are no sweets that Anya likes left on the table,\nthen the game ends; at the very beginning of the game, if there is at least\none sweet on the table that Anya wants to eat, she eats the sweet number\n\n    1\n; after Anya has eaten some sweet, she counts \n    k\n sweets clockwise,\nstarting from the next sweet in the circle, and eats the \n    k\n-th sweet in\nthe count (if there are less than \n    k\n sweets in the circle, some sweets\ncan participate in the count more than once, and the last sweet in the count\nis picked). Obviously, the sweets that have already been eaten do not\nparticipate in the count. For example, let \n    6\n sweets be arranged in a\ncircle, Anya likes sweets \n    4\n, \n    5\n and \n    6\n, \n    k = 4\n. Then the\ngame goes as follows: initially there are sweets \n    [1, 2, 3, 4, 5, 6]\n on\nthe table, Anya chooses the sweet number \n    1\n. Anya eats the sweet number\n\n    1\n, after that, there are sweets \n    [2, 3, 4, 5, 6]\n on the table. Anya\ncounts \n    4\n sweets, starting with the \n    2\n-nd sweet, and stops at the\n\n    5\n-th sweet. Anya eats the \n    5\n-th sweet, after that, there are sweets\n\n    [2, 3, 4, 6]\n on the table. Anya counts \n    4\n sweets, starting with the\n\n    6\n-th sweet, and stops at the \n    4\n-th sweet. Anya eats the sweet\nnumber \n    4\n, after that, there are sweets \n    [2, 3, 6]\n on the table.\nAnya counts \n    4\n sweets, starting with the \n    6\n-th sweet, and stops at\nthe \n    6\n-th sweet. Anya eats the sweet number \n    6\n, after that, there\nare sweets \n    [2, 3]\n on the table. There are no sweets that Anya likes on\nthe table, so the game ends. Your task is to calculate the number of sweets\nthat Anya will eat. Input The first line contains a single integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 5000\n) \u2014 the number of test cases. The first line of\neach test case contains two integers \n    n\n and \n    k\n (\n    1 \n    \u2264 k \n    \u2264 n\n    \n    \u2264 5000\n) \u2014 the number of sweets and the parameter \n    k\n. The next line\ncontains the string \n    s\n, where \n    s_i = 1\n if Anya likes \n    i\n-th\nsweet, and \n    s_i = 0\n otherwise. It is guaranteed that the sum of \n    n\n\nover all test cases does not exceed \n    5000\n. Output For each test case,\nprint one integer \u2014 the number of sweets that Anya will eat. Example Input 4 6\n4 000111 7 3 0000100 3 2 000 5 1 10011 Output 4 4 0 5 Note The first test case\nof the example is described in the statement.\n\n",
        "cf_contest_id": 1533,
        "cf_index": "C",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n6 4\r\n000111\r\n7 3\r\n0000100\r\n3 2\r\n000\r\n5 1\r\n10011\r\n",
                "4\r\n4\r\n0\r\n5\r\n"
            ]
        ],
        "private_cases": []
    }
]