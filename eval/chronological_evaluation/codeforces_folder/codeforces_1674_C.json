[
    {
        "name": "Infinite Replacement",
        "description": "You are given a string \n    s\n, consisting only of Latin letters 'a', and a\nstring \n    t\n, consisting of lowercase Latin letters. In one move, you can\nreplace any letter 'a' in the string \n    s\n with a string \n    t\n. Note that\nafter the replacement string \n    s\n might contain letters other than 'a'. You\ncan perform an arbitrary number of moves (including zero). How many different\nstrings can you obtain? Print the number, or report that it is infinitely\nlarge. Two strings are considered different if they have different length, or\nthey differ at some index. Input The first line contains a single integer\n\n    q\n (\n    1 \n    \u2264 q \n    \u2264 10^4\n) \u2014 the number of testcases. The first line\nof each testcase contains a non-empty string \n    s\n, consisting only of Latin\nletters 'a'. The length of \n    s\n doesn't exceed \n    50\n. The second line\ncontains a non-empty string \n    t\n, consisting of lowercase Latin letters.\nThe length of \n    t\n doesn't exceed \n    50\n. Output For each testcase, print\nthe number of different strings \n    s\n that can be obtained after an\narbitrary amount of moves (including zero). If the number is infinitely large,\nprint -1. Otherwise, print the number. Example Input 3 aaaa a aa abc a b\nOutput 1 -1 2 Note In the first example, you can replace any letter 'a' with\nthe string \"a\", but that won't change the string. So no matter how many moves\nyou make, you can't obtain a string other than the initial one. In the second\nexample, you can replace the second letter 'a' with \"abc\". String \n    s\n\nbecomes equal to \"aabc\". Then the second letter 'a' again. String \n    s\n\nbecomes equal to \"aabcbc\". And so on, generating infinitely many different\nstrings. In the third example, you can either leave string \n    s\n as is,\nperforming zero moves, or replace the only 'a' with \"b\". String \n    s\n\nbecomes equal to \"b\", so you can't perform more moves on it.\n\n",
        "cf_contest_id": 1674,
        "cf_index": "C",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\naaaa\r\na\r\naa\r\nabc\r\na\r\nb\r\n",
                "1\r\n-1\r\n2\r\n"
            ]
        ],
        "private_cases": []
    }
]