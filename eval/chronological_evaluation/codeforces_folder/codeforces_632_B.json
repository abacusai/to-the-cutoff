[
    {
        "name": "Alice, Bob, Two Teams",
        "description": "Alice and Bob are playing a game. The game involves splitting up game pieces\ninto two teams. There are n pieces, and the i-th piece has a strength pi. The\nway to split up game pieces is split into several steps: First, Alice will\nsplit the pieces into two different groups A and B. This can be seen as\nwriting the assignment of teams of a piece in an n character string, where\neach character is A or B. Bob will then choose an arbitrary prefix or suffix\nof the string, and flip each character in that suffix (i.e. change A to B and\nB to A). He can do this step at most once. Alice will get all the pieces\nmarked A and Bob will get all the pieces marked B. The strength of a player is\nthen the sum of strengths of the pieces in the group. Given Alice's initial\nsplit into two teams, help Bob determine an optimal strategy. Return the\nmaximum strength he can achieve. Input The first line contains integer n (1 \u2264\nn \u2264 5\u00b710^5) \u2014 the number of game pieces. The second line contains n integers\npi (1 \u2264 pi \u2264 10^9) \u2014 the strength of the i-th piece. The third line contains n\ncharacters A or B \u2014 the assignment of teams after the first step (after\nAlice's step). Output Print the only integer a \u2014 the maximum strength Bob can\nachieve. Examples Input 5 1 2 3 4 5 ABABA Output 11 Input 5 1 2 3 4 5 AAAAA\nOutput 15 Input 1 1 B Output 1 Note In the first sample Bob should flip the\nsuffix of length one. In the second sample Bob should flip the prefix or the\nsuffix (here it is the same) of length 5. In the third sample Bob should do\nnothing.\n\n",
        "cf_contest_id": 632,
        "cf_index": "B",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms"
        ],
        "time_limit_seconds": 1.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 2 3 4 5\r\nABABA\r\n",
                "11\r\n"
            ],
            [
                "5\r\n1 2 3 4 5\r\nAAAAA\r\n",
                "15\r\n"
            ],
            [
                "1\r\n1\r\nB\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n1 9 7 6 2 4 7 8 1 3\r\nABBABAABBB\r\n",
                "33\r\n"
            ],
            [
                "100\r\n591 417 888 251 792 847 685 3 182 461 102 348 555 956 771 901 712 878 580 631 342 333 285 899 525 725 537 718 929 653 84 788 104 355 624 803 253 853 201 995 536 184 65 205 540 652 549 777 248 405 677 950 431 580 600 846 328 429 134 983 526 103 500 963 400 23 276 704 570 757 410 658 507 620 984 244 486 454 802 411 985 303 635 283 96 597 855 775 139 839 839 61 219 986 776 72 729 69 20 917\r\nBBBAAABBBABAAABBBBAAABABBBBAAABAAABBABABAAABABABBABBABABAAAABAABABBBBBBBABBAAAABAABABABAABABABAABBAB\r\n",
                "30928\r\n"
            ],
            [
                "3\r\n1 1 1\r\nBAA\r\n",
                "3\r\n"
            ],
            [
                "3\r\n2 1 2\r\nBAB\r\n",
                "4\r\n"
            ],
            [
                "2\r\n1 1\r\nBB\r\n",
                "2\r\n"
            ],
            [
                "1\r\n1\r\nA\r\n",
                "1\r\n"
            ],
            [
                "2\r\n1 1\r\nAB\r\n",
                "2\r\n"
            ]
        ]
    }
]