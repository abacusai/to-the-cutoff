[
    {
        "name": "Exposition",
        "description": "There are several days left before the fiftieth birthday of a famous Berland's\nwriter Berlbury. In this connection the local library decided to make an\nexposition of the works of this famous science-fiction writer. It was decided\nas well that it is necessary to include into the exposition only those books\nthat were published during a particular time period. It is obvious that if the\nbooks differ much in size, the visitors will not like it. That was why the\norganizers came to the opinion, that the difference between the highest and\nthe lowest books in the exposition should be not more than k millimeters. The\nlibrary has n volumes of books by Berlbury, arranged in chronological order of\ntheir appearance. The height of each book in millimeters is know, it is hi. As\nBerlbury is highly respected in the city, the organizers want to include into\nthe exposition as many books as possible, and to find out what periods of his\ncreative work they will manage to cover. You are asked to help the organizers\ncope with this hard task. Input The first line of the input data contains two\ninteger numbers separated by a space n (1 \u2264 n \u2264 10^5) and k (0 \u2264 k \u2264 10^6) \u2014\nthe amount of books by Berlbury in the library, and the maximum allowed height\ndifference between the lowest and the highest books. The second line contains\nn integer numbers separated by a space. Each number hi (1 \u2264 hi \u2264 10^6) is the\nheight of the i-th book in millimeters. Output In the first line of the output\ndata print two numbers a and b (separate them by a space), where a is the\nmaximum amount of books the organizers can include into the exposition, and b\n\u2014 the amount of the time periods, during which Berlbury published a books, and\nthe height difference between the lowest and the highest among these books is\nnot more than k milllimeters. In each of the following b lines print two\ninteger numbers separated by a space \u2014 indexes of the first and the last\nvolumes from each of the required time periods of Berlbury's creative work.\nExamples Input 3 3 14 12 10 Output 2 2 1 2 2 3 Input 2 0 10 10 Output 2 1 1 2\nInput 4 5 8 19 10 13 Output 2 1 3 4\n\n",
        "cf_contest_id": 6,
        "cf_index": "E",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dsu",
            "trees",
            "two pointers"
        ],
        "time_limit_seconds": 1.5,
        "memory_limit_bytes": 64.0,
        "public_cases": [
            [
                "3 3\r\n14 12 10\r\n",
                "2 2\r\n1 2\r\n2 3\r\n"
            ],
            [
                "2 0\r\n10 10\r\n",
                "2 1\r\n1 2\r\n"
            ],
            [
                "4 5\r\n8 19 10 13\r\n",
                "2 1\r\n3 4\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1\r\n",
                "1 1\r\n1 1\r\n"
            ],
            [
                "2 10\r\n35 45\r\n",
                "2 1\r\n1 2\r\n"
            ],
            [
                "4 8\r\n89 33 54 75\r\n",
                "1 4\r\n1 1\r\n2 2\r\n3 3\r\n4 4\r\n"
            ],
            [
                "5 1\r\n9 6 8 7 5\r\n",
                "2 1\r\n3 4\r\n"
            ],
            [
                "3 3\r\n3 8 6\r\n",
                "2 1\r\n2 3\r\n"
            ],
            [
                "4 1000000\r\n100001 1 200001 300001\r\n",
                "4 1\r\n1 4\r\n"
            ],
            [
                "4 1000\r\n11497 9999 10730 12280\r\n",
                "2 1\r\n2 3\r\n"
            ],
            [
                "3 0\r\n1000000 1000000 1000000\r\n",
                "3 1\r\n1 3\r\n"
            ],
            [
                "4 50\r\n165 182 157 132\r\n",
                "4 1\r\n1 4\r\n"
            ],
            [
                "5 173\r\n350 250 200 300 400\r\n",
                "4 1\r\n1 4\r\n"
            ],
            [
                "4 0\r\n1 1 1 1\r\n",
                "4 1\r\n1 4\r\n"
            ],
            [
                "2 1000000\r\n1 1000000\r\n",
                "2 1\r\n1 2\r\n"
            ],
            [
                "7 14\r\n28 28 29 35 25 29 28\r\n",
                "7 1\r\n1 7\r\n"
            ],
            [
                "10 163\r\n7541 2535 5883 5775 2821 5962 4489 5548 2852 4595\r\n",
                "2 1\r\n3 4\r\n"
            ],
            [
                "15 793\r\n98580 27440 3719 73977 34819 64092 89939 75329 72884 66502 17464 73662 6666 47984 45348\r\n",
                "1 15\r\n1 1\r\n2 2\r\n3 3\r\n4 4\r\n5 5\r\n6 6\r\n7 7\r\n8 8\r\n9 9\r\n10 10\r\n11 11\r\n12 12\r\n13 13\r\n14 14\r\n15 15\r\n"
            ],
            [
                "28 543\r\n1921 1700 1363 2580 2693 3144 2269 908 3863 3750 2151 3039 1581 3395 1133 1804 1464 2040 2372 2475 1240 800 3521 3270 2815 1026 3625 2930\r\n",
                "3 1\r\n18 20\r\n"
            ],
            [
                "55 1000\r\n2612 1306 4300 1790 3173 9493 7209 7763 8563 4534 7466 1281 4483 6863 3787 7292 3957 8775 7221 4016 5743 6556 2070 2119 4795 9094 1913 2077 8786 4520 1865 2357 7871 3288 8231 5808 9383 9820 9974 3056 5343 2169 5177 6299 5805 8132 9315 6747 5226 3531 1206 4073 8290 1423 6720\r\n",
                "3 1\r\n37 39\r\n"
            ]
        ]
    }
]