[
    {
        "name": "Songwriter",
        "description": "Andi is a mathematician, a computer scientist, and a songwriter. After\nspending so much time writing songs, he finally writes a catchy melody that he\nthought as his best creation. However, the singer who will sing the\nsong/melody has a unique vocal range, thus, an adjustment may be needed. A\nmelody is defined as a sequence of \n    N\n notes which are represented by\nintegers. Let \n    A\n be the original melody written by Andi. Andi needs to\nadjust \n    A\n into a new melody \n    B\n such that for every \n    i\n where\n\n    1 \n    \u2264 i < N\n: If \n    A_i < A_i+1\n, then \n    B_i < B_i+1\n. If\n\n    A_i = A_i+1\n, then \n    B_i = B_i+1\n. If \n    A_i > A_i+1\n, then\n\n    B_i > B_i+1\n. \n    |B_i - B_i+1| \n    \u2264 K\n, i.e. the difference\nbetween two successive notes is no larger than \n    K\n. Moreover, the singer\nalso requires that all notes are within her vocal range, i.e. \n    L \n    \u2264 B_i\n    \n    \u2264 R\n for all \n    1 \n    \u2264 i \n    \u2264 N\n.Help Andi to determine whether such\n\n    B\n exists, and find the lexicographically smallest \n    B\n if it exists.\nA melody \n    X\n is lexicographically smaller than melody \n    Y\n if and only\nif there exists \n    j\n (\n    1 \n    \u2264 j \n    \u2264 N\n) such that \n    X_i = Y_i\n\nfor all \n    i < j\n and \n    X_j < Y_j\n. For example, consider a melody\n\n    A = \n    \n    1,3,5,6,7,8,9,10,3,7,8,9,10,11,12,12\n as shown in the\nfollowing figure. The diagonal arrow up in the figure implies that \n    A_i <\n    A_i+1\n, the straight right arrow implies that \n    A_i = A_i+1\n, and the\ndiagonal arrow down implies that \n    A_i > A_i+1\n. Supposed we want to make\na new melody with \n    L = 1\n, \n    R = 8\n, and \n    K = 6\n. The new melody\n\n    B = \n    \n    1,2,3,4,5,6,7,8,2,3,4,5,6,7,8,8\n as shown in the figure\nsatisfies all the requirements, and it is the lexicographically smallest\npossible. Input Input begins with a line containing four integers: \n    N\n\n\n    L\n \n    R\n \n    K\n (\n    1 \n    \u2264 N \n    \u2264 100\n     000\n; \n    1 \n    \u2264 L \n    \u2264\n    R \n    \u2264 10^9\n; \n    1 \n    \u2264 K \n    \u2264 10^9\n) representing the number of notes\nin the melody, the vocal range (\n    L\n and \n    R\n), and the maximum\ndifference between two successive notes in the new melody, respectively. The\nnext line contains \n    N\n integers: \n    A_i\n (\n    1 \n    \u2264 A_i \n    \u2264 10^9\n)\nrepresenting the original melody. Output Output in a line \n    N\n integers\n(each separated by a single space) representing the lexicographically smallest\nmelody satisfying all the requirements, or output -1 if there is no melody\nsatisfying all the requirements. Note that it might be possible that the\nlexicographically smallest melody which satisfies all the requirements to be\nthe same as the original melody. Examples Input 16 1 8 6 1 3 5 6 7 8 9 10 3 7\n8 9 10 11 12 12 Output 1 2 3 4 5 6 7 8 2 3 4 5 6 7 8 8 Input 16 1 8 6 1 3 5 6\n7 8 9 10 3 7 8 9 10 11 12 13 Output -1 Input 16 1 10 10 1 3 5 6 7 8 9 10 3 7 8\n9 1 11 12 13 Output 1 2 3 4 5 6 7 8 1 2 3 4 1 2 3 4 Note Explanation for the\nsample input/output #1 This is the example from the problem description.\n\n",
        "cf_contest_id": 1252,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [],
        "private_cases": []
    }
]