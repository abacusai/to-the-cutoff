[
    {
        "name": "Fixed Prefix Permutations",
        "description": "You are given \n    n\n permutations \n    a_1, a_2, \n    \u2026, a_n\n, each of\nlength \n    m\n. Recall that a permutation of length \n    m\n is a sequence of\n\n    m\n distinct integers from \n    1\n to \n    m\n. Let the beauty of a\npermutation \n    p_1, p_2, \n    \u2026, p_m\n be the largest \n    k\n such that\n\n    p_1 = 1, p_2 = 2, \n    \u2026, p_k = k\n. If \n    p_1 \n    \u2260 1\n, then the\nbeauty is \n    0\n. The product of two permutations \n    p \n    \u00b7 q\n is a\npermutation \n    r\n such that \n    r_j = q_p_j\n. For each \n    i\n from\n\n    1\n to \n    n\n, print the largest beauty of a permutation \n    a_i \n    \u00b7\n    a_j\n over all \n    j\n from \n    1\n to \n    n\n (possibly, \n    i = j\n). Input\nThe first line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n)\n\u2014 the number of testcases. The first line of each testcase contains two\nintegers \n    n\n and \n    m\n (\n    1 \n    \u2264 n \n    \u2264 5 \n    \u00b7 10^4\n; \n    1 \n    \u2264\n    m \n    \u2264 10\n) \u2014 the number of permutations and the length of each\npermutation. The \n    i\n-th of the next \n    n\n lines contains a permutation\n\n    a_i\n \u2014 \n    m\n distinct integers from \n    1\n to \n    m\n. The sum of\n\n    n\n doesn't exceed \n    5 \n    \u00b7 10^4\n over all testcases. Output For\neach testcase, print \n    n\n integers. The \n    i\n-th value should be equal to\nthe largest beauty of a permutation \n    a_i \n    \u00b7 a_j\n over all \n    j\n\n(\n    1 \n    \u2264 j \n    \u2264 n\n). Example Input 3 3 4 2 4 1 3 1 2 4 3 2 1 3 4 2 2 1 2\n2 1 8 10 3 4 9 6 10 2 7 8 1 5 3 9 1 8 5 7 4 10 2 6 3 10 1 7 5 9 6 4 2 8 1 2 3\n4 8 6 10 7 9 5 1 2 3 4 10 6 8 5 7 9 9 6 1 2 10 4 7 8 3 5 7 9 3 2 5 6 4 8 1 10\n9 4 3 7 5 6 1 10 8 2 Output 1 4 4 2 2 10 8 1 6 8 10 1 7\n\n",
        "cf_contest_id": 1792,
        "cf_index": "D",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "bitmasks",
            "data structures",
            "hashing",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3 4\r\n2 4 1 3\r\n1 2 4 3\r\n2 1 3 4\r\n2 2\r\n1 2\r\n2 1\r\n8 10\r\n3 4 9 6 10 2 7 8 1 5\r\n3 9 1 8 5 7 4 10 2 6\r\n3 10 1 7 5 9 6 4 2 8\r\n1 2 3 4 8 6 10 7 9 5\r\n1 2 3 4 10 6 8 5 7 9\r\n9 6 1 2 10 4 7 8 3 5\r\n7 9 3 2 5 6 4 8 1 10\r\n9 4 3 7 5 6 1 10 8 2\r\n",
                "1 4 4 \r\n2 2 \r\n10 8 1 6 8 10 1 7 \r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n3 10\r\n1 2 3 4 7 9 8 5 6 10\r\n6 8 9 4 2 5 7 3 1 10\r\n1 2 3 4 8 10 5 7 6 9\r\n",
                "8 0 5 \r\n"
            ]
        ]
    }
]