[
    {
        "name": "Deletions of Two Adjacent Letters",
        "description": "The string \n    s\n is given, the string length is odd number. The string\nconsists of lowercase letters of the Latin alphabet. As long as the string\nlength is greater than \n    1\n, the following operation can be performed on\nit: select any two adjacent letters in the string \n    s\n and delete them from\nthe string. For example, from the string \"lemma\" in one operation, you can get\nany of the four strings: \"mma\", \"lma\", \"lea\" or \"lem\" In particular, in one\noperation, the length of the string reduces by \n    2\n. Formally, let the\nstring \n    s\n have the form \n    s=s_1s_2 \n    \u2026 s_n\n (\n    n>1\n). During\none operation, you choose an arbitrary index \n    i\n (\n    1 \n    \u2264 i < n\n) and\nreplace \n    s=s_1s_2 \n    \u2026 s_i-1s_i+2\n    \u2026 s_n\n. For the given\nstring \n    s\n and the letter \n    c\n, determine whether it is possible to\nmake such a sequence of operations that in the end the equality \n    s=c\n will\nbe true? In other words, is there such a sequence of operations that the\nprocess will end with a string of length \n    1\n, which consists of the letter\n\n    c\n? Input The first line of input data contains an integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 10^3\n) \u2014 the number of input test cases. The descriptions of\nthe \n    t\n cases follow. Each test case is represented by two lines: string\n\n    s\n, which has an odd length from \n    1\n to \n    49\n inclusive and\nconsists of lowercase letters of the Latin alphabet; is a string containing\none letter \n    c\n, where \n    c\n is a lowercase letter of the Latin alphabet.\nOutput For each test case in a separate line output: YES, if the string\n\n    s\n can be converted so that \n    s=c\n is true; NO otherwise. You can\noutput YES and NO in any case (for example, the strings yEs, yes, Yes and YES\nwill be recognized as a positive response). Example Input 5 abcde c abcde b x\ny aaaaaaaaaaaaaaa a contest t Output YES NO NO YES YES Note In the first test\ncase, \n    s\n=\"abcde\". You need to get \n    s\n=\"c\". For the first operation,\ndelete the first two letters, we get \n    s\n=\"cde\". In the second operation,\nwe delete the last two letters, so we get the expected value of \n    s\n=\"c\".\nIn the third test case, \n    s\n=\"x\", it is required to get \n    s\n=\"y\".\nObviously, this cannot be done.\n\n",
        "cf_contest_id": 1650,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\nabcde\r\nc\r\nabcde\r\nb\r\nx\r\ny\r\naaaaaaaaaaaaaaa\r\na\r\ncontest\r\nt\r\n",
                "YES\r\nNO \r\nNO \r\nYES\r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\nabcde\r\nc\r\nabcde\r\nb\r\nx\r\ny\r\nabobobussss\r\ns\r\ncontest\r\nt\r\n",
                "YES\r\nNO \r\nNO \r\nYES\r\nYES\r\n"
            ],
            [
                "1\r\nwabalabadubdu\r\nw\r\n",
                "YES\r\n"
            ],
            [
                "1\r\nasdfghjklqwertyuiop\r\ne\r\n",
                "NO \r\n"
            ],
            [
                "1\r\nqwertyuioppoiuytrewqplkmnjiuhbs\r\nz\r\n",
                "NO \r\n"
            ],
            [
                "1\r\nadsfdxvxvsdfdgxcvsdfd\r\nc\r\n",
                "NO \r\n"
            ],
            [
                "1\r\nhghjhgvdvkhbgtftfvgvp\r\nj\r\n",
                "NO \r\n"
            ],
            [
                "1\r\nasdfghjklqwertyuiop\r\nf\r\n",
                "NO \r\n"
            ]
        ]
    }
]