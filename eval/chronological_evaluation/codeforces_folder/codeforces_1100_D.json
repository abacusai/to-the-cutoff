[
    {
        "name": "Dasha and Chess",
        "description": "This is an interactive task. Dasha and NN like playing chess. While playing a\nmatch they decided that normal chess isn't interesting enough for them, so\nthey invented a game described below. There are \n    666\n black rooks and\n\n    1\n white king on the chess board of size \n    999 \n    \u00d7 999\n. The\nwhite king wins if he gets checked by rook, or, in other words, if he moves\nonto the square which shares either a row or column with a black rook. The\nsides take turns, starting with white. NN plays as a white king and on each of\nhis turns he moves a king to one of the squares that are adjacent to his\ncurrent position either by side or diagonally, or, formally, if the king was\non the square \n    (x, y)\n, it can move to the square \n    (nx, ny)\n if and\nonly \n    max (|nx - x|, |ny - y|) = 1\n , \n    1 \n    \u2264 nx, ny \n    \u2264 999\n.\nNN is also forbidden from moving onto the squares occupied with black rooks,\nhowever, he can move onto the same row or column as a black rook. Dasha,\nhowever, neglects playing by the chess rules, and instead of moving rooks\nnormally she moves one of her rooks on any space devoid of other chess pieces.\nIt is also possible that the rook would move onto the same square it was\nbefore and the position wouldn't change. However, she can't move the rook on\nthe same row or column with the king. Each player makes \n    2000\n turns, if\nthe white king wasn't checked by a black rook during those turns, black wins.\nNN doesn't like losing, but thinks the task is too difficult for him, so he\nasks you to write a program that will always win playing for the white king.\nNote that Dasha can see your king and play depending on its position. Input In\nthe beginning your program will receive \n    667\n lines from input. Each line\ncontains two integers \n    x\n and \n    y\n (\n    1 \n    \u2264 x, y \n    \u2264 999\n) \u2014\nthe piece's coordinates. The first line contains the coordinates of the king\nand the next \n    666\n contain the coordinates of the rooks. The first\ncoordinate denotes the number of the row where the piece is located, the\nsecond denotes the column. It is guaranteed that initially the king isn't in\ncheck and that all pieces occupy different squares. Output After getting king\nchecked, you program should terminate immediately without printing anything\nextra. Interaction To make a move with the king, output two integers \n    x\n\nand \n    y\n (\n    1 \n    \u2264 x, y \n    \u2264 999\n) \u2014 the square to which the king\nwould be moved. The king cannot move onto the square already occupied by a\nrook. It is guaranteed that the king would always have a valid move. After\neach of your turns read the rook's turn in the following format: a single line\ncontaining three integers \n    k\n, \n    x\n and \n    y\n (\n    1 \n    \u2264 k \n    \u2264\n    666\n, \n    1 \n    \u2264 x_i, y_i \n    \u2264 999\n) \u2014 the number of the rook that\nwould move and the square it would move to. It is guaranteed that the rook\nwouldn't move to a square already occupied by another chess piece, but it can\nmove onto the square where it was before the turn so that its position\nwouldn't change. It is guaranteed that the move does not put your king into a\ncheck. If your king got in check, all three integers would be equal to\n\n    -1\n and in that case your program should terminate immediately. After\nprinting your turn do not forget to output end of line and flush the output.\nOtherwise you will get Idleness limit exceeded. To do this, use:\nfflush(stdout) or cout.flush() in C++; System.out.flush() in Java;\nflush(output) in Pascal; stdout.flush() in Python; see documentation for other\nlanguages.Answer \"0 0 0\" instead of a correct answer means that you made an\ninvalid query. Exit immediately after receiving \"0 0 0\" and you will see Wrong\nanswer verdict. Otherwise you can get an arbitrary verdict because your\nsolution will continue to read from a closed stream. Hacks are not allowed for\nthis problem. Example Input 999 999 1 1 1 2 2 1 2 2 1 3 2 3 <...> 26 13 26 14\n26 15 26 16 1 700 800 2 1 2 <...> -1 -1 -1 Output 999 998 999 997 <...> 999 26\nNote The example is trimmed. The full initial positions of the rooks in the\nfirst test are available at https://pastebin.com/qQCTXgKP. It is not\nguaranteed that they will behave as in the example.\n\n",
        "cf_contest_id": 1100,
        "cf_index": "D",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "games",
            "interactive"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "999 999\r\n1 1\r\n1 2\r\n2 1\r\n2 2\r\n1 3\r\n2 3\r\n3 1\r\n3 2\r\n3 3\r\n1 4\r\n2 4\r\n3 4\r\n4 1\r\n4 2\r\n4 3\r\n4 4\r\n1 5\r\n2 5\r\n3 5\r\n4 5\r\n5 1\r\n5 2\r\n5 3\r\n5 4\r\n5 5\r\n1 6\r\n2 6\r\n3 6\r\n4 6\r\n5 6\r\n6 1\r\n6 2\r\n6 3\r\n6 4\r\n6 5\r\n6 6\r\n1 7\r\n2 7\r\n3 7\r\n4 7\r\n5 7\r\n6 7\r\n7 1\r\n7 2\r\n7 3\r\n7 4\r\n7 5\r\n7 6\r\n7 7\r\n1 8\r\n2 8\r\n3 8\r\n4 8\r\n5 8\r\n6 8\r\n7 8\r\n8 1\r\n8 2\r\n8 3\r\n8 4\r\n8 5\r\n8 6\r\n8 7\r\n8 8\r\n1 9\r\n2 9\r\n3 9\r\n4 9\r\n5 9\r\n6 9\r\n7 9\r\n8 9\r\n9 1\r\n9 2\r\n9 3\r\n9 4\r\n9 5\r\n9 6\r\n9 7\r\n9 8\r\n9 9\r\n1 10\r\n2 10\r\n3 10\r\n4 10\r\n5 10\r\n6 10\r\n7 10\r\n8 10\r\n9 10\r\n10 1\r\n10 2\r\n10 3\r\n10 4\r\n10 5\r\n10 6\r\n10 7\r\n1...",
                null
            ]
        ],
        "private_cases": []
    }
]