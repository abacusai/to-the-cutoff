[
    {
        "name": "Just Eat It!",
        "description": "Today, Yasser and Adel are at the shop buying cupcakes. There are \n    n\n\ncupcake types, arranged from \n    1\n to \n    n\n on the shelf, and there are\ninfinitely many of each type. The tastiness of a cupcake of type \n    i\n is an\ninteger \n    a_i\n. There are both tasty and nasty cupcakes, so the tastiness\ncan be positive, zero or negative. Yasser, of course, wants to try them all,\nso he will buy exactly one cupcake of each type. On the other hand, Adel will\nchoose some segment \n    [l, r]\n \n    (1 \n    \u2264 l \n    \u2264 r \n    \u2264 n)\n that does\nnot include all of cupcakes (he can't choose \n    [l, r] = [1, n]\n) and buy\nexactly one cupcake of each of types \n    l, l + 1, \n    \u2026, r\n. After that\nthey will compare the total tastiness of the cupcakes each of them have\nbought. Yasser will be happy if the total tastiness of cupcakes he buys is\nstrictly greater than the total tastiness of cupcakes Adel buys regardless of\nAdel's choice. For example, let the tastinesses of the cupcakes be \n    [7, 4,\n    -1]\n. Yasser will buy all of them, the total tastiness will be \n    7 + 4 - 1\n    = 10\n. Adel can choose segments \n    [7], [4], [-1], [7, 4]\n or \n    [4,\n    -1]\n, their total tastinesses are \n    7, 4, -1, 11\n and \n    3\n,\nrespectively. Adel can choose segment with tastiness \n    11\n, and as \n    10\n\nis not strictly greater than \n    11\n, Yasser won't be happy :( Find out if\nYasser will be happy after visiting the shop. Input Each test contains\nmultiple test cases. The first line contains the number of test cases \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 10^4\n). The description of the test cases follows. The\nfirst line of each test case contains \n    n\n (\n    2 \n    \u2264 n \n    \u2264 10^5\n).\nThe second line of each test case contains \n    n\n integers \n    a_1, a_2,\n    \n    \u2026, a_n\n (\n    -10^9 \n    \u2264 a_i \n    \u2264 10^9\n), where \n    a_i\n represents\nthe tastiness of the \n    i\n-th type of cupcake. It is guaranteed that the sum\nof \n    n\n over all test cases doesn't exceed \n    10^5\n. Output For each test\ncase, print \"YES\", if the total tastiness of cupcakes Yasser buys will always\nbe strictly greater than the total tastiness of cupcakes Adel buys regardless\nof Adel's choice. Otherwise, print \"NO\". Example Input 3 4 1 2 3 4 3 7 4 -1 3\n5 -5 5 Output YES NO NO Note In the first example, the total tastiness of any\nsegment Adel can choose is less than the total tastiness of all cupcakes. In\nthe second example, Adel will choose the segment \n    [1, 2]\n with total\ntastiness \n    11\n, which is not less than the total tastiness of all\ncupcakes, which is \n    10\n. In the third example, Adel can choose the segment\n\n    [3, 3]\n with total tastiness of \n    5\n. Note that Yasser's cupcakes'\ntotal tastiness is also \n    5\n, so in that case, the total tastiness of\nYasser's cupcakes isn't strictly greater than the total tastiness of Adel's\ncupcakes.\n\n",
        "cf_contest_id": 1285,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n4\r\n1 2 3 4\r\n3\r\n7 4 -1\r\n3\r\n5 -5 5\r\n",
                "YES\r\nNO\r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "12\r\n3\r\n7 -4 5\r\n3\r\n7 -5 4\r\n3\r\n4 -5 7\r\n3\r\n5 -4 7\r\n4\r\n5 -5 -6 6\r\n5\r\n100 100 100 -50 50\r\n10\r\n10 5 -12 7 -10 20 30 -10 50 60\r\n10\r\n10 5 -14 7 -7 20 30 -50 50 60\r\n2\r\n1 1\r\n2\r\n-1 -1\r\n3\r\n1000000000 1000000000 1000000000\r\n3\r\n-1000000000 -1000000000 -1000000000\r\n",
                "YES\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\n"
            ],
            [
                "1\r\n2\r\n0 0\r\n",
                "NO\r\n"
            ]
        ]
    }
]