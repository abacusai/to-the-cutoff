[
    {
        "name": "Tree Queries",
        "description": "Hanh is a famous biologist. He loves growing trees and doing experiments on\nhis own garden. One day, he got a tree consisting of \n    n\n vertices.\nVertices are numbered from \n    1\n to \n    n\n. A tree with \n    n\n vertices is\nan undirected connected graph with \n    n-1\n edges. Initially, Hanh sets the\nvalue of every vertex to \n    0\n. Now, Hanh performs \n    q\n operations, each\nis either of the following types: Type \n    1\n: Hanh selects a vertex \n    v\n\nand an integer \n    d\n. Then he chooses some vertex \n    r\n uniformly at\nrandom, lists all vertices \n    u\n such that the path from \n    r\n to \n    u\n\npasses through \n    v\n. Hanh then increases the value of all such vertices\n\n    u\n by \n    d\n. Type \n    2\n: Hanh selects a vertex \n    v\n and calculates\nthe expected value of \n    v\n. Since Hanh is good at biology but not math, he\nneeds your help on these operations. Input The first line contains two\nintegers \n    n\n and \n    q\n (\n    1 \n    \u2264 n, q \n    \u2264 150\n     000\n) \u2014 the\nnumber of vertices on Hanh's tree and the number of operations he performs.\nEach of the next \n    n - 1\n lines contains two integers \n    u\n and \n    v\n\n(\n    1 \n    \u2264 u, v \n    \u2264 n\n), denoting that there is an edge connecting two\nvertices \n    u\n and \n    v\n. It is guaranteed that these \n    n - 1\n edges\nform a tree. Each of the last \n    q\n lines describes an operation in either\nformats: \n    1\n \n    v\n \n    d\n (\n    1 \n    \u2264 v \n    \u2264 n, 0 \n    \u2264 d \n    \u2264\n    10^7\n), representing a first-type operation. \n    2\n \n    v\n (\n    1 \n    \u2264 v\n    \n    \u2264 n\n), representing a second-type operation. It is guaranteed that\nthere is at least one query of the second type. Output For each operation of\nthe second type, write the expected value on a single line. Let \n    M =\n    998244353\n, it can be shown that the expected value can be expressed as an\nirreducible fraction \n    p/q\n, where \n    p\n and \n    q\n are\nintegers and \n    q \n    \u2261 0 \n    M\n. Output the integer equal to\n\n    p \n    \u00b7 q^-1\n     M\n. In other words, output such an integer\n\n    x\n that \n    0 \n    \u2264 x < M\n and \n    x \n    \u00b7 q \n    \u2261 p \n    M\n.\nExample Input 5 12 1 2 1 3 2 4 2 5 1 1 1 2 1 2 2 2 3 2 4 2 5 1 2 2 2 1 2 2 2 3\n2 4 2 5 Output 1 199648871 399297742 199648871 199648871 598946614 199648873 2\n2 2 Note The image below shows the tree in the example: For the first query,\nwhere \n    v = 1\n and \n    d = 1\n: If \n    r = 1\n, the values of all vertices\nget increased. If \n    r = 2\n, the values of vertices \n    1\n and \n    3\n get\nincreased. If \n    r = 3\n, the values of vertices \n    1\n, \n    2\n, \n    4\n\nand \n    5\n get increased. If \n    r = 4\n, the values of vertices \n    1\n and\n\n    3\n get increased. If \n    r = 5\n, the values of vertices \n    1\n and\n\n    3\n get increased. Hence, the expected values of all vertices after this\nquery are (\n    1, 0.4, 0.8, 0.4, 0.4\n). For the second query, where \n    v =\n    2\n and \n    d = 2\n: If \n    r = 1\n, the values of vertices \n    2\n, \n    4\n\nand \n    5\n get increased. If \n    r = 2\n, the values of all vertices get\nincreased. If \n    r = 3\n, the values of vertices \n    2\n, \n    4\n and \n    5\n\nget increased. If \n    r = 4\n, the values of vertices \n    1\n, \n    2\n,\n\n    3\n and \n    5\n get increased. If \n    r = 5\n, the values of vertices\n\n    1\n, \n    2\n, \n    3\n and \n    4\n get increased. Hence, the expected\nvalues of all vertices after this query are (\n    2.2, 2.4, 2, 2, 2\n).\n\n",
        "cf_contest_id": 1254,
        "cf_index": "D",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "probabilities",
            "trees"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5 12\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n1 1 1\r\n2 1\r\n2 2\r\n2 3\r\n2 4\r\n2 5\r\n1 2 2\r\n2 1\r\n2 2\r\n2 3\r\n2 4\r\n2 5\r\n",
                "1\r\n199648871\r\n399297742\r\n199648871\r\n199648871\r\n598946614\r\n199648873\r\n2\r\n2\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 19\r\n1 1 0\r\n2 1\r\n1 1 10\r\n2 1\r\n1 1 2\r\n2 1\r\n1 1 5\r\n1 1 6\r\n1 1 9\r\n2 1\r\n1 1 1\r\n2 1\r\n1 1 3\r\n1 1 3\r\n2 1\r\n2 1\r\n1 1 9\r\n1 1 10\r\n1 1 0\r\n",
                "0\r\n10\r\n12\r\n32\r\n33\r\n39\r\n39\r\n"
            ],
            [
                "6 8\r\n5 3\r\n5 6\r\n5 4\r\n2 6\r\n1 3\r\n2 4\r\n1 2 8\r\n1 3 5\r\n1 3 5\r\n2 3\r\n1 2 0\r\n1 4 4\r\n1 1 0\r\n",
                "0\r\n332748129\r\n"
            ],
            [
                "4 17\r\n1 2\r\n1 4\r\n2 3\r\n1 1 7\r\n1 1 3\r\n1 2 2\r\n1 3 3\r\n1 3 2\r\n2 2\r\n2 3\r\n1 1 10\r\n2 3\r\n1 3 4\r\n1 4 9\r\n1 3 7\r\n1 4 10\r\n2 2\r\n1 3 0\r\n2 3\r\n2 3\r\n",
                "748683273\r\n499122188\r\n499122193\r\n249561109\r\n748683297\r\n748683297\r\n"
            ],
            [
                "1 1\r\n2 1\r\n",
                "0\r\n"
            ]
        ]
    }
]