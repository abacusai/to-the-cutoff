[
    {
        "name": "Tournament",
        "description": "Recently a tournament in k kinds of sports has begun in Berland. Vasya wants\nto make money on the bets. The scheme of the tournament is very mysterious and\nnot fully disclosed. Competitions are held back to back, each of them involves\ntwo sportsmen who have not left the tournament yet. Each match can be held in\nany of the k kinds of sport. Loser leaves the tournament. The last remaining\nsportsman becomes the winner. Apart of this, the scheme can be arbitrary, it\nis not disclosed in advance. Vasya knows powers of sportsmen in each kind of\nsport. He believes that the sportsmen with higher power always wins. The\ntournament is held every year, and each year one new participant joins it. In\nthe first tournament, only one sportsman has participated, in the second there\nwere two sportsmen, and so on. Vasya has been watching the tournament for the\nlast n years. Help him to find the number of possible winners for each of the\nn tournaments. Input The first line contains two integers n and k (1 \u2264 n \u2264\n5\u00b710^4, 1 \u2264 k \u2264 10) \u2014 the number of tournaments and the number of kinds of\nsport, respectively. Each of the next n lines contains k integers si1, si2,\n..., sik (1 \u2264 sij \u2264 10^9), where sij is the power of the i-th sportsman in the\nj-th kind of sport. The sportsman with higher powers always wins. It's\nguaranteed that for any kind of sport all of these powers are distinct. Output\nFor each of the n tournaments output the number of contenders who can win.\nExamples Input 3 2 1 5 5 1 10 10 Output 1 2 1 Input 3 2 2 2 3 3 1 10 Output 1\n1 3 Input 3 2 2 3 1 1 3 2 Output 1 1 2 Note In the first sample: In the first\ntournament there is only one sportsman, and he is the winner. In the second\ntournament, there are two sportsmen, and everyone can defeat another,\ndepending on kind of sports. In the third tournament, the third sportsman in\nthe strongest in both kinds of sports, so he is the winner regardless of the\nscheme.\n\n",
        "cf_contest_id": 878,
        "cf_index": "C",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "graphs"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2\r\n1 5\r\n5 1\r\n10 10\r\n",
                "1\r\n2\r\n1\r\n"
            ],
            [
                "3 2\r\n2 2\r\n3 3\r\n1 10\r\n",
                "1\r\n1\r\n3\r\n"
            ],
            [
                "3 2\r\n2 3\r\n1 1\r\n3 2\r\n",
                "1\r\n1\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 1\r\n2\r\n1\r\n3\r\n",
                "1\r\n1\r\n1\r\n"
            ],
            [
                "1 3\r\n2 1 3\r\n",
                "1\r\n"
            ],
            [
                "1 1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "1 1\r\n1000000000\r\n",
                "1\r\n"
            ],
            [
                "5 2\r\n2 4\r\n1 1\r\n4 5\r\n5 3\r\n3 2\r\n",
                "1\r\n1\r\n1\r\n3\r\n4\r\n"
            ],
            [
                "10 2\r\n34 37\r\n22 6\r\n40 92\r\n85 29\r\n1 100\r\n70 21\r\n35 45\r\n60 16\r\n11 48\r\n49 39\r\n",
                "1\r\n1\r\n1\r\n3\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n"
            ],
            [
                "10 10\r\n48 33 96 77 67 59 35 15 14 86\r\n27 46 79 41 29 5 89 90 43 97\r\n21 44 22 62 86 21 90 50 83 41\r\n13 69 17 85 96 51 85 76 66 67\r\n22 15 89 14 76 97 61 9 36 96\r\n78 57 51 94 13 61 31 70 25 39\r\n24 55 59 64 22 64 25 41 63 47\r\n76 5 85 27 43 87 74 21 70 92\r\n98 27 76 96 40 25 83 61 58 60\r\n20 73 38 32 57 66 29 34 11 11\r\n",
                "1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n"
            ],
            [
                "10 3\r\n1 1 1\r\n2 2 2\r\n3 3 3\r\n4 4 4\r\n5 5 5\r\n6 6 6\r\n7 7 7\r\n8 8 8\r\n9 9 9\r\n10 10 10\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "10 3\r\n10 10 10\r\n9 9 9\r\n8 8 8\r\n7 7 7\r\n6 6 6\r\n5 5 5\r\n4 4 4\r\n3 3 3\r\n2 2 2\r\n1 1 1\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "10 3\r\n4 4 4\r\n10 10 10\r\n5 5 5\r\n1 1 1\r\n6 6 6\r\n8 8 8\r\n9 9 9\r\n2 2 2\r\n3 3 3\r\n7 7 7\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "30 3\r\n30 30 30\r\n29 29 29\r\n28 28 28\r\n27 27 27\r\n26 26 26\r\n25 25 25\r\n24 24 24\r\n23 23 23\r\n22 22 22\r\n21 21 21\r\n20 20 20\r\n19 19 19\r\n18 18 18\r\n17 17 17\r\n16 16 16\r\n15 15 15\r\n14 14 14\r\n13 13 13\r\n12 12 12\r\n11 11 11\r\n1 1 10\r\n2 2 9\r\n3 3 8\r\n4 4 7\r\n5 5 6\r\n6 6 5\r\n7 7 4\r\n8 8 3\r\n9 9 2\r\n10 10 1\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n"
            ]
        ]
    }
]