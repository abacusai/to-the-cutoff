[
    {
        "name": "Tesla",
        "description": "Allen dreams of one day owning a enormous fleet of electric cars, the car of\nthe future! He knows that this will give him a big status boost. As Allen is\nplanning out all of the different types of cars he will own and how he will\narrange them, he realizes that he has a problem. Allen's future parking lot\ncan be represented as a rectangle with \n    4\n rows and \n    n\n (\n    n \n    \u2264\n    50\n) columns of rectangular spaces, each of which can contain at most one\ncar at any time. He imagines having \n    k\n (\n    k \n    \u2264 2n\n) cars in the\ngrid, and all the cars are initially in the second and third rows. Each of the\ncars also has a different designated parking space in the first or fourth row.\nAllen has to put the cars into corresponding parking places. Illustration to\nthe first example. However, since Allen would never entrust his cars to anyone\nelse, only one car can be moved at a time. He can drive a car from a space in\nany of the four cardinal directions to a neighboring empty space. Furthermore,\nAllen can only move one of his cars into a space on the first or fourth rows\nif it is the car's designated parking space. Allen knows he will be a very\nbusy man, and will only have time to move cars at most \n    20000\n times\nbefore he realizes that moving cars is not worth his time. Help Allen\ndetermine if he should bother parking his cars or leave it to someone less\nimportant. Input The first line of the input contains two space-separated\nintegers \n    n\n and \n    k\n (\n    1 \n    \u2264 n \n    \u2264 50\n, \n    1 \n    \u2264 k \n    \u2264\n    2n\n), representing the number of columns and the number of cars,\nrespectively. The next four lines will contain \n    n\n integers each between\n\n    0\n and \n    k\n inclusive, representing the initial state of the parking\nlot. The rows are numbered \n    1\n to \n    4\n from top to bottom and the\ncolumns are numbered \n    1\n to \n    n\n from left to right. In the first and\nlast line, an integer \n    1 \n    \u2264 x \n    \u2264 k\n represents a parking spot\nassigned to car \n    x\n (you can only move this car to this place), while the\ninteger \n    0\n represents a empty space (you can't move any car to this\nplace). In the second and third line, an integer \n    1 \n    \u2264 x \n    \u2264 k\n\nrepresents initial position of car \n    x\n, while the integer \n    0\n\nrepresents an empty space (you can move any car to this place). Each \n    x\n\nbetween \n    1\n and \n    k\n appears exactly once in the second and third line,\nand exactly once in the first and fourth line. Output If there is a sequence\nof moves that brings all of the cars to their parking spaces, with at most\n\n    20000\n car moves, then print \n    m\n, the number of moves, on the first\nline. On the following \n    m\n lines, print the moves (one move per line) in\nthe format \n    i\n \n    r\n \n    c\n, which corresponds to Allen moving car\n\n    i\n to the neighboring space at row \n    r\n and column \n    c\n. If it is\nnot possible for Allen to move all the cars to the correct spaces with at most\n\n    20000\n car moves, print a single line with the integer \n    -1\n. Examples\nInput 4 5 1 2 0 4 1 2 0 4 5 0 0 3 0 5 0 3 Output 6 1 1 1 2 1 2 4 1 4 3 4 4 5 3\n2 5 4 2 Input 1 2 1 2 1 2 Output -1 Input 1 2 1 1 2 2 Output 2 1 1 1 2 4 1\nNote In the first sample test case, all cars are in front of their spots\nexcept car \n    5\n, which is in front of the parking spot adjacent. The\nexample shows the shortest possible sequence of moves, but any sequence of\nlength at most \n    20000\n will be accepted. In the second sample test case,\nthere is only one column, and the cars are in the wrong order, so no cars can\nmove and the task is impossible.\n\n",
        "cf_contest_id": 995,
        "cf_index": "A",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 5\r\n1 2 0 4\r\n1 2 0 4\r\n5 0 0 3\r\n0 5 0 3\r\n",
                "6\r\n2 1 2\r\n4 1 4\r\n3 4 4\r\n5 3 2\r\n1 1 1\r\n5 4 2\r\n"
            ],
            [
                "1 2\r\n1\r\n2\r\n1\r\n2\r\n",
                "-1"
            ],
            [
                "1 2\r\n1\r\n1\r\n2\r\n2\r\n",
                "2\r\n2 4 1\r\n1 1 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 2\r\n1 0\r\n0 2\r\n0 1\r\n0 2\r\n",
                "7\r\n2 2 1\r\n1 2 2\r\n2 3 1\r\n1 2 1\r\n2 3 2\r\n1 1 1\r\n2 4 2\r\n"
            ],
            [
                "7 14\r\n2 11 1 14 9 8 5\r\n12 6 7 1 10 2 3\r\n14 13 9 8 5 4 11\r\n13 6 4 3 12 7 10\r\n",
                "-1"
            ],
            [
                "2 1\r\n0 0\r\n0 0\r\n0 1\r\n0 1\r\n",
                "1\r\n1 4 2\r\n"
            ],
            [
                "2 3\r\n0 2\r\n0 1\r\n3 2\r\n3 1\r\n",
                "7\r\n1 2 1\r\n2 2 2\r\n3 4 1\r\n1 3 1\r\n2 1 2\r\n1 3 2\r\n1 4 2\r\n"
            ],
            [
                "1 1\r\n0\r\n1\r\n0\r\n1\r\n",
                "2\r\n1 3 1\r\n1 4 1\r\n"
            ],
            [
                "2 4\r\n3 4\r\n2 1\r\n3 4\r\n2 1\r\n",
                "-1"
            ],
            [
                "3 5\r\n2 1 5\r\n5 3 2\r\n4 0 1\r\n0 4 3\r\n",
                "18\r\n4 3 2\r\n5 3 1\r\n3 2 1\r\n2 2 2\r\n1 2 3\r\n4 4 2\r\n5 3 2\r\n3 3 1\r\n2 2 1\r\n1 2 2\r\n5 3 3\r\n3 3 2\r\n2 1 1\r\n1 1 2\r\n5 2 3\r\n3 3 3\r\n5 1 3\r\n3 4 3\r\n"
            ],
            [
                "10 1\r\n0 0 1 0 0 0 0 0 0 0\r\n0 0 1 0 0 0 0 0 0 0\r\n0 0 0 0 0 0 0 0 0 0\r\n0 0 0 0 0 0 0 0 0 0\r\n",
                "1\r\n1 1 3\r\n"
            ],
            [
                "50 1\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n",
                "34\r\n1 3 27\r\n1 3 28\r\n1 3 29\r\n1 3 30\r\n1 3 31\r\n1 3 32\r\n1 3 33\r\n1 3 34\r\n1 3 35\r\n1 3 36\r\n1 3 37\r\n1 3 38\r\n1 3 39\r\n1 3 40\r\n1 3 41\r\n1 3 42\r\n1 3 43\r\n1 3 44\r\n1 3 45\r\n1 3 46\r\n1 3 47\r\n1 3 48\r\n1 3 49\r\n1 3 50\r\n1 2 50\r\n1 2 49\r\n1 2 48\r\n1 2 47\r\n1 2 46\r\n1 2 45\r\n1 2 44\r\n1 2 43\r\n1 2 42\r\n1 1 42\r\n"
            ],
            [
                "22 2\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0\r\n0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 2 0 0 0 0\r\n",
                "65\r\n2 2 13\r\n1 3 21\r\n2 2 12\r\n1 3 22\r\n2 2 11\r\n1 2 22\r\n2 2 10\r\n1 2 21\r\n2 2 9\r\n1 2 20\r\n2 2 8\r\n1 2 19\r\n2 2 7\r\n1 2 18\r\n2 2 6\r\n1 2 17\r\n2 2 5\r\n1 2 16\r\n2 2 4\r\n1 2 15\r\n2 2 3\r\n1 2 14\r\n2 2 2\r\n1 2 13\r\n2 2 1\r\n1 2 12\r\n2 3 1\r\n1 2 11\r\n2 3 2\r\n1 2 10\r\n2 3 3\r\n1 2 9\r\n2 3 4\r\n1 2 8\r\n2 3 5\r\n1 2 7\r\n2 3 6\r\n1 2 6\r\n2 3 7\r\n1 2 5\r\n2 3 8\r\n1 2 4\r\n2 3 9\r\n1 2 3\r\n2 3 10\r\n1 2 2\r\n2 3 11\r\n1 2 1\r\n2 3 12\r\n1 3 1\r\n2 3 13\r\n1 3 2\r\n2 3 14\r\n1 3 3\r\n2 3 15\r\n1 3 4\r\n2 3 16\r\n1 3 5\r\n2 3 17\r\n1 3 6\r\n2 3 18\r\n1 3 7\r\n2 4 18\r\n1 3 8\r\n1 4 8\r\n"
            ],
            [
                "12 3\r\n0 0 0 0 0 0 0 0 0 0 0 0\r\n0 0 0 0 0 0 0 0 0 0 0 0\r\n2 0 0 0 0 3 0 0 0 1 0 0\r\n0 0 0 0 0 0 0 1 3 0 2 0\r\n",
                "38\r\n1 3 11\r\n3 3 7\r\n2 3 2\r\n1 3 12\r\n3 3 8\r\n2 3 3\r\n1 2 12\r\n3 3 9\r\n2 3 4\r\n1 2 11\r\n3 4 9\r\n2 3 5\r\n1 2 10\r\n2 3 6\r\n1 2 9\r\n2 3 7\r\n1 2 8\r\n2 3 8\r\n1 2 7\r\n2 3 9\r\n1 2 6\r\n2 3 10\r\n1 2 5\r\n2 3 11\r\n1 2 4\r\n2 4 11\r\n1 2 3\r\n1 2 2\r\n1 2 1\r\n1 3 1\r\n1 3 2\r\n1 3 3\r\n1 3 4\r\n1 3 5\r\n1 3 6\r\n1 3 7\r\n1 3 8\r\n1 4 8\r\n"
            ],
            [
                "10 20\r\n18 9 4 5 12 14 16 1 15 20\r\n11 13 16 6 18 5 20 17 4 3\r\n12 9 15 14 8 10 2 19 1 7\r\n6 11 13 2 7 19 10 3 8 17\r\n",
                "-1"
            ],
            [
                "15 30\r\n20 24 17 13 26 8 5 6 27 14 18 22 25 2 15\r\n4 12 6 25 3 5 28 11 15 21 9 26 7 17 13\r\n19 20 24 16 2 23 8 29 22 30 1 27 10 14 18\r\n9 29 3 7 12 28 10 16 23 19 21 1 30 11 4\r\n",
                "-1"
            ]
        ]
    }
]