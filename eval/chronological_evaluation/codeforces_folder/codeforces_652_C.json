[
    {
        "name": "Foe Pairs",
        "description": "You are given a permutation p of length n. Also you are given m foe pairs (ai,\nbi) (1 \u2264 ai, bi \u2264 n, ai \u2260 bi). Your task is to count the number of different\nintervals (x, y) (1 \u2264 x \u2264 y \u2264 n) that do not contain any foe pairs. So you\nshouldn't count intervals (x, y) that contain at least one foe pair in it (the\npositions and order of the values from the foe pair are not important).\nConsider some example: p = [1, 3, 2, 4] and foe pairs are (3, 2), (4, 2).\nThe interval (1, 3) is incorrect because it contains a foe pair (3, 2). The\ninterval (1, 4) is also incorrect because it contains two foe pairs (3, 2) and\n(4, 2). But the interval (1, 2) is correct because it doesn't contain any foe\npair. Input The first line contains two integers n and m (1 \u2264 n, m \u2264 3\u00b710^5) \u2014\nthe length of the permutation p and the number of foe pairs. The second line\ncontains n distinct integers pi (1 \u2264 pi \u2264 n) \u2014 the elements of the permutation\np. Each of the next m lines contains two integers (ai, bi) (1 \u2264 ai, bi \u2264 n, ai\n\u2260 bi) \u2014 the i-th foe pair. Note a foe pair can appear multiple times in the\ngiven list. Output Print the only integer c \u2014 the number of different\nintervals (x, y) that does not contain any foe pairs. Note that the answer can\nbe too large, so you should use 64-bit integer type to store it. In C++ you\ncan use the long long integer type and in Java you can use long integer type.\nExamples Input 4 2 1 3 2 4 3 2 2 4 Output 5 Input 9 5 9 7 2 3 1 4 6 5 8 1 6 4\n5 2 7 7 2 2 7 Output 20 Note In the first example the intervals from the\nanswer are (1, 1), (1, 2), (2, 2), (3, 3) and (4, 4).\n\n",
        "cf_contest_id": 652,
        "cf_index": "C",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "sortings",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 2\r\n1 3 2 4\r\n3 2\r\n2 4\r\n",
                "5\r\n"
            ],
            [
                "9 5\r\n9 7 2 3 1 4 6 5 8\r\n1 6\r\n4 5\r\n2 7\r\n7 2\r\n2 7\r\n",
                "20\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1\r\n1 2\r\n1 2\r\n",
                "2\r\n"
            ],
            [
                "10 3\r\n4 10 5 1 6 8 9 2 3 7\r\n10 5\r\n2 10\r\n4 1\r\n",
                "39\r\n"
            ],
            [
                "50 10\r\n41 15 17 1 5 31 7 38 30 39 43 35 2 26 20 42 48 25 19 32 50 4 8 10 44 12 9 18 13 36 28 6 27 23 40 24 3 14 29 11 49 47 45 46 34 21 37 16 22 33\r\n13 48\r\n24 12\r\n2 32\r\n36 7\r\n19 20\r\n9 45\r\n35 47\r\n10 16\r\n4 49\r\n46 2\r\n",
                "608\r\n"
            ],
            [
                "100 10\r\n19 55 91 50 31 23 60 84 38 1 22 51 27 76 28 98 11 44 61 63 15 93 52 3 66 16 53 36 18 62 35 85 78 37 73 64 87 74 46 26 82 69 49 33 83 89 56 67 71 25 39 94 96 17 21 6 47 68 34 42 57 81 13 10 54 2 48 80 20 77 4 5 59 30 90 95 45 75 8 88 24 41 40 14 97 32 7 9 65 70 100 99 72 58 92 29 79 12 86 43\r\n58 26\r\n10 52\r\n26 75\r\n51 9\r\n49 33\r\n55 6\r\n52 62\r\n82 53\r\n90 24\r\n12 7\r\n",
                "1589\r\n"
            ],
            [
                "3 8\r\n1 2 3\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 2\r\n1 3\r\n2 3\r\n",
                "3\r\n"
            ],
            [
                "3 4\r\n1 2 3\r\n1 3\r\n1 2\r\n1 3\r\n2 3\r\n",
                "3\r\n"
            ]
        ]
    }
]