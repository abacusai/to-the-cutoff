[
    {
        "name": "Four Vertices",
        "description": "You are given an undirected weighted graph, consisting of \n    n\n vertices and\n\n    m\n edges. Some queries happen with this graph: Delete an existing edge\nfrom the graph. Add a non-existing edge to the graph. At the beginning and\nafter each query, you should find four different vertices \n    a\n, \n    b\n,\n\n    c\n, \n    d\n such that there exists a path between \n    a\n and \n    b\n,\nthere exists a path between \n    c\n and \n    d\n, and the sum of lengths of two\nshortest paths from \n    a\n to \n    b\n and from \n    c\n to \n    d\n is minimal.\nThe answer to the query is the sum of the lengths of these two shortest paths.\nThe length of the path is equal to the sum of weights of edges in this path.\nInput The first line contains two integers \n    n\n and \n    m\n \n    (4 \n    \u2264 n,\n    m \n    \u2264 10^5)\n \u2014 the number of vertices and edges in the graph respectively.\nEach of the next \n    m\n lines contain three integers \n    v\n, \n    u\n,\n\n    w\n (\n    1 \n    \u2264 v, u \n    \u2264 n, v \n    \u2260 u\n, \n    1 \n    \u2264 w \n    \u2264 10^9\n) \u2014\nthis triple means that there is an edge between vertices \n    v\n and \n    u\n\nwith weight \n    w\n. The next line contains a single integer \n    q\n \n    (0\n    \n    \u2264 q \n    \u2264 10^5)\n \u2014 the number of queries. The next \n    q\n lines contain\nthe queries of two types: \n    0\n \n    v\n \n    u\n \u2014 this query means deleting\nan edge between \n    v\n and \n    u\n \n    (1 \n    \u2264 v, u \n    \u2264 n, v \n    \u2260 u)\n.\nIt is guaranteed that such edge exists in the graph. \n    1\n \n    v\n \n    u\n\n\n    w\n \u2014 this query means adding an edge between vertices \n    v\n and \n    u\n\nwith weight \n    w\n (\n    1 \n    \u2264 v, u \n    \u2264 n, v \n    \u2260 u\n, \n    1 \n    \u2264 w\n    \n    \u2264 10^9\n). It is guaranteed that there was no such edge in the graph. It\nis guaranteed that the initial graph does not contain multiple edges. At the\nbeginning and after each query, the graph doesn't need to be connected. It is\nguaranteed that at each moment the number of edges will be at least \n    4\n.\nIt can be proven, that at each moment there exist some four vertices \n    a\n,\n\n    b\n, \n    c\n, \n    d\n such that there exists a path between vertices\n\n    a\n and \n    b\n, and there exists a path between vertices \n    c\n and\n\n    d\n. Output Print \n    q + 1\n integers \u2014 the minimal sum of lengths of\nshortest paths between chosen pairs of vertices before the queries and after\neach of them. Example Input 6 6 1 3 6 4 3 1 1 4 1 2 6 4 2 4 2 5 4 3 4 1 2 5 2\n0 1 4 0 3 4 1 6 1 3 Output 4 3 3 7 5 Note Before the queries you can choose\nvertices \n    (a, b) = (3, 2)\n and \n    (c, d) = (1, 4)\n. The sum of lengths\nof two shortest paths is \n    3 + 1 = 4\n. After the first query you can choose\nvertices \n    (a, b) = (2, 5)\n and \n    (c, d) = (1, 4)\n. The sum of lengths\nof two shortest paths is \n    2 + 1 = 3\n. After the second query you can\nchoose vertices \n    (a, b) = (3, 4)\n and \n    (c, d) = (2, 5)\n. The sum of\nlengths of two shortest paths is \n    1 + 2 = 3\n. After the third query, you\ncan choose vertices \n    (a, b) = (2, 6)\n and \n    (c, d) = (4, 5)\n. The sum\nof lengths of two shortest paths is \n    4 + 3 = 7\n. After the last query you\ncan choose vertices \n    (a, b) = (1, 6)\n and \n    (c, d) = (2, 5)\n. The sum\nof lengths of two shortest paths is \n    3 + 2 = 5\n.\n\n",
        "cf_contest_id": 1566,
        "cf_index": "G",
        "cf_rating": 3100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "graphs",
            "greedy",
            "implementation",
            "shortest paths"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 6\r\n1 3 6\r\n4 3 1\r\n1 4 1\r\n2 6 4\r\n2 4 2\r\n5 4 3\r\n4\r\n1 2 5 2\r\n0 1 4\r\n0 3 4\r\n1 6 1 3\r\n",
                "4\r\n3\r\n3\r\n7\r\n5\r\n"
            ]
        ],
        "private_cases": [
            [
                "4 4\r\n1 4 893349014\r\n1 3 80788722\r\n4 3 403806711\r\n3 2 851299133\r\n0\r\n",
                "1335894566\r\n"
            ],
            [
                "4 5\r\n1 3 183714413\r\n3 2 9113374\r\n4 2 138518228\r\n4 3 513450320\r\n2 1 617842189\r\n0\r\n",
                "322232641\r\n"
            ],
            [
                "4 6\r\n3 1 442228919\r\n4 2 818678361\r\n4 1 236842689\r\n3 2 354486856\r\n1 2 680197301\r\n4 3 82662218\r\n0\r\n",
                "591329545\r\n"
            ],
            [
                "100000 4\r\n93489 72442 764134104\r\n84918 15431 441437022\r\n15431 69065 51817176\r\n50985 69065 242704743\r\n0\r\n",
                "684141765\r\n"
            ],
            [
                "4 4\r\n1 2 10\r\n1 3 11\r\n1 4 12\r\n2 3 13\r\n0\r\n",
                "25\r\n"
            ]
        ]
    }
]