[
    {
        "name": "Lord of the Values",
        "description": "While trading on his favorite exchange trader William realized that he found a\nvulnerability. Using this vulnerability he could change the values of certain\ninternal variables to his advantage. To play around he decided to change the\nvalues of all internal variables from \n    a_1, a_2, \n    \u2026, a_n\n to\n\n    -a_1, -a_2, \n    \u2026, -a_n\n. For some unknown reason, the number of\nservice variables is always an even number. William understands that with his\nevery action he attracts more and more attention from the exchange's security\nteam, so the number of his actions must not exceed \n    5\n     000\n and after\nevery operation no variable can have an absolute value greater than\n\n    10^18\n. William can perform actions of two types for two chosen\nvariables with indices \n    i\n and \n    j\n, where \n    i < j\n: Perform\nassignment \n    a_i = a_i + a_j\n Perform assignment \n    a_j = a_j - a_i\n\nWilliam wants you to develop a strategy that will get all the internal\nvariables to the desired values. Input Each test contains multiple test cases.\nThe first line contains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    20\n). Description of the test cases follows. The first line of each test\ncase contains a single even integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 10^3\n),\nwhich is the number of internal variables. The second line of each test case\ncontains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n \n    (1 \n    \u2264 a_i \n    \u2264\n    10^9)\n, which are initial values of internal variables. Output For each test\ncase print the answer in the following format: The first line of output must\ncontain the total number of actions \n    k\n, which the strategy will perform.\nNote that you do not have to minimize \n    k\n. The inequality \n    k \n    \u2264\n    5\n     000\n must be satisfied. Each of the next \n    k\n lines must contain\nactions formatted as \"type i j\", where \"type\" is equal to \"1\" if the strategy\nneeds to perform an assignment of the first type and \"2\" if the strategy needs\nto perform an assignment of the second type. Note that \n    i < j\n should\nhold. We can show that an answer always exists. Example Input 2 4 1 1 1 1 4 4\n3 1 2 Output 8 2 1 2 2 1 2 2 1 3 2 1 3 2 1 4 2 1 4 1 1 2 1 1 2 8 2 1 4 1 2 4 1\n2 4 1 2 4 1 3 4 1 1 2 1 1 2 1 1 4 Note For the first sample test case one\npossible sequence of operations is as follows: \"2 1 2\". Values of variables\nafter performing the operation: [1, 0, 1, 1] \"2 1 2\". Values of variables\nafter performing the operation: [1, -1, 1, 1] \"2 1 3\". Values of variables\nafter performing the operation: [1, -1, 0, 1] \"2 1 3\". Values of variables\nafter performing the operation: [1, -1, -1, 1] \"2 1 4\". Values of variables\nafter performing the operation: [1, -1, -1, 0] \"2 1 4\". Values of variables\nafter performing the operation: [1, -1, -1, -1] \"1 1 2\". Values of variables\nafter performing the operation: [0, -1, -1, -1] \"1 1 2\". Values of variables\nafter performing the operation: [-1, -1, -1, -1] For the second sample test\ncase one possible sequence of operations is as follows: \"2 1 4\". Values of\nvariables after performing the operation: [4, 3, 1, -2] \"1 2 4\". Values of\nvariables after performing the operation: [4, 1, 1, -2] \"1 2 4\". Values of\nvariables after performing the operation: [4, -1, 1, -2] \"1 2 4\". Values of\nvariables after performing the operation: [4, -3, 1, -2] \"1 3 4\". Values of\nvariables after performing the operation: [4, -3, -1, -2] \"1 1 2\". Values of\nvariables after performing the operation: [1, -3, -1, -2] \"1 1 2\". Values of\nvariables after performing the operation: [-2, -3, -1, -2] \"1 1 4\". Values of\nvariables after performing the operation: [-4, -3, -1, -2]\n\n",
        "cf_contest_id": 1523,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n4\r\n1 1 1 1\r\n4\r\n4 3 1 2\r\n",
                "12\r\n1 1 2\r\n2 1 2\r\n1 1 2\r\n2 1 2\r\n1 1 2\r\n2 1 2\r\n1 3 4\r\n2 3 4\r\n1 3 4\r\n2 3 4\r\n1 3 4\r\n2 3 4\r\n12\r\n1 1 2\r\n2 1 2\r\n1 1 2\r\n2 1 2\r\n1 1 2\r\n2 1 2\r\n1 3 4\r\n2 3 4\r\n1 3 4\r\n2 3 4\r\n1 3 4\r\n2 3 4\r\n"
            ]
        ],
        "private_cases": []
    }
]