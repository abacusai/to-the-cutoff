[
    {
        "name": "Diverse Segments",
        "description": "You are given an array \n    a\n of \n    n\n integers. Also you are given \n    m\n\nsubsegments of that array. The left and the right endpoints of the \n    j\n-th\nsegment are \n    l_j\n and \n    r_j\n respectively. You are allowed to make no\nmore than one operation. In that operation you choose any subsegment of the\narray \n    a\n and replace each value on this segment with any integer (you are\nalso allowed to keep elements the same). You have to apply this operation so\nthat for the given \n    m\n segments, the elements on each segment are\ndistinct. More formally, for each \n    1 \n    \u2264 j \n    \u2264 m\n all elements\n\n    a_l_j, a_l_j+1, \n    \u2026, a_r_j-1, a_r_j\n should be\ndistinct. You don't want to use the operation on a big segment, so you have to\nfind the smallest length of a segment, so that you can apply the operation to\nthis segment and meet the above-mentioned conditions. If it is not needed to\nuse this operation, the answer is \n    0\n. Input The input consists of\nmultiple test cases. The first line contains a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test cases. Description of the test\ncases follows. The first line of each test case contains two integers \n    n\n\nand \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the size of the array\nand the number of segments respectively. The next line contains \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the\nelements of \n    a\n. Each of the next \n    m\n lines contains two integers\n\n    l_j\n, \n    r_j\n (\n    1 \n    \u2264 l_j \n    \u2264 r_j \n    \u2264 n\n) \u2014 the left and the\nright endpoints of the \n    j\n-th segment. It's guaranteed that the sum of\n\n    n\n and the sum of \n    m\n over all test cases does not exceed \n    2\n    \n    \u00b7 10^5\n. Output For each test case output a single integer \u2014 the\nsmallest length of a segment you can apply an operation on making the elements\non all given segments distinct. If it is not needed to use the operation,\noutput \n    0\n. Example Input 5 7 3 1 1 2 1 3 3 5 1 4 4 5 2 4 5 2 10 1 6 14 1\n4 5 2 4 4 5 5 7 5 6 2 2 1 3 2 4 3 3 3 4 7 3 2 2 2 7 8 2 2 4 4 4 4 5 5 1 1 123\n1 1 Output 2 0 1 0 0 Note In the first test case you can perform the operation\non the segment \n    [1, 2]\n and make \n    a = [5, 6, 2, 1, 3, 3, 5]\n. Then the\nelements on each segment are distinct. On the segment \n    [1, 4]\n there are\n\n    [5, 6, 2, 1]\n. On the segment \n    [4, 5]\n there are \n    [1, 3]\n. On the\nsegment \n    [2, 4]\n there are \n    [6, 2, 1, 3]\n. This way on each of the\ngiven segments all elements are distinct. Also, it is impossible to change any\nsingle integer to make elements distinct on each segment. That is why the\nanswer is \n    2\n. In the second test case the elements on each segment are\nalready distinct, so we should not perform the operation. In the third test\ncase we can replace the first \n    5\n by \n    1\n. This way we will get \n    [1,\n    7, 5, 6]\n where all elements are distinct so on each given segment all\nelements are distinct.\n\n",
        "cf_contest_id": 1684,
        "cf_index": "F",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n7 3\r\n1 1 2 1 3 3 5\r\n1 4\r\n4 5\r\n2 4\r\n5 2\r\n10 1 6 14 1\r\n4 5\r\n2 4\r\n4 5\r\n5 7 5 6\r\n2 2\r\n1 3\r\n2 4\r\n3 3\r\n3 4\r\n7 3\r\n2 2 2 7 8 2 2\r\n4 4\r\n4 4\r\n5 5\r\n1 1\r\n123\r\n1 1\r\n",
                "2\r\n0\r\n1\r\n0\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n3 3\r\n1 1 1\r\n1 1\r\n2 2\r\n3 3\r\n",
                "0\r\n"
            ],
            [
                "1\r\n2 1\r\n3 3\r\n1 2\r\n",
                "1\r\n"
            ],
            [
                "1\r\n7 5\r\n5 5 5 5 1 1 5\r\n5 7\r\n4 4\r\n6 7\r\n2 2\r\n4 6\r\n",
                "1\r\n"
            ]
        ]
    }
]