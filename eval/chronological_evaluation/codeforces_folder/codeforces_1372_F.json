[
    {
        "name": "Omkar and Modes",
        "description": "Ray lost his array and needs to find it by asking Omkar. Omkar is willing to\ndisclose that the array has the following qualities: The array has \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) elements. Every element in the array\n\n    a_i\n is an integer in the range \n    1 \n    \u2264 a_i \n    \u2264 10^9.\n The array\nis sorted in nondecreasing order. Ray is allowed to send Omkar a series of\nqueries. A query consists of two integers, \n    l\n and \n    r\n such that \n    1\n    \n    \u2264 l \n    \u2264 r \n    \u2264 n\n. Omkar will respond with two integers, \n    x\n and\n\n    f\n. \n    x\n is the mode of the subarray from index \n    l\n to index\n\n    r\n inclusive. The mode of an array is defined by the number that appears\nthe most frequently. If there are multiple numbers that appear the most number\nof times, the smallest such number is considered to be the mode. \n    f\n is\nthe amount of times that \n    x\n appears in the queried subarray. The array\nhas \n    k\n (\n    1 \n    \u2264 k \n    \u2264\n    min(25000,n)\n) distinct elements.\nHowever, due to Ray's sins, Omkar will not tell Ray what \n    k\n is. Ray is\nallowed to send at most \n    4k\n queries. Help Ray find his lost array. Input\nThe only line of the input contains a single integer \n    n\n (\n    1 \n    \u2264 n\n    \n    \u2264 2 \n    \u00b7 10^5\n), which equals to the length of the array that you are\ntrying to find. Interaction The interaction starts with reading \n    n\n. Then\nyou can make one type of query: \"\n    ? \n     l \n     r\n\" (\n    1\n    \n    \u2264 l \n    \u2264 r \n    \u2264 n\n) where \n    l\n and \n    r\n are the bounds of the\nsubarray that you wish to query. The answer to each query will be in the form\n\"\n    x \n     f\n\" where \n    x\n is the mode of the subarray and \n    f\n\nis the number of times \n    x\n appears in the subarray. \n    x\n satisfies\n(\n    1 \n    \u2264 x \n    \u2264 10^9\n). \n    f\n satisfies (\n    1 \n    \u2264 f \n    \u2264\n    r-l+1\n). If you make more than \n    4k\n queries or violate the number range\nin the query, you will get an output \"-1.\" If you terminate after receiving\nthe response \"\n    -1\n\", you will get the \"Wrong answer\" verdict. Otherwise\nyou can get an arbitrary verdict because your solution will continue to read\nfrom a closed stream. To output your answer, print: \"\n    ! \n     a_1\n    \n     a_2 \n    \n    \u2026\n     a_n-1\n     a_n\n\" which\nis an exclamation point followed by the array with a space between every\nelement. And quit after that. This query is not counted towards the \n    4k\n\nqueries limit. After printing a query do not forget to output end of line and\nflush the output. Otherwise, you will get Idleness limit exceeded. To do this,\nuse: fflush(stdout) or cout.flush() in C++; System.out.flush() in Java;\nflush(output) in Pascal; stdout.flush() in Python; see documentation for other\nlanguages.Hack Format To hack, output \n    1\n integer on the first line,\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n). On the second line output\n\n    n\n integers \n    a_1, a_2, \n    \u2026, a_n-1, a_n\n separated by a space\nsuch that there are at most \n    25000\n distinct numbers and \n    a_j \n    \u2264\n    a_j+1\n for all \n    j\n from \n    1\n to \n    n-1\n. Example Input 6 2 2 2 2\n3 2 2 1 Output ? 1 6 ? 1 3 ? 4 6 ? 3 4 ! 1 2 2 3 3 4 Note The first query is\n\n    l=1\n and \n    r=6\n. The mode is \n    2\n, and \n    2\n appears \n    2\n\ntimes, so \n    x=2\n and \n    f=2\n. Note that \n    3\n also appears two times,\nbut \n    2\n is outputted because \n    2\n is smaller. The second query is\n\n    l=1\n and \n    r=3\n. The mode is \n    2\n and \n    2\n appears twice in the\nsubarray with indices \n    [1,3]\n. The third query is \n    l=4\n and \n    r=6\n.\nThe mode is \n    3\n and \n    3\n appears twice in the subarray with indices\n\n    [4,6]\n. The fourth query is \n    l=3\n and \n    r=4\n. The mode is \n    2\n,\nwhich appears once in the subarray with indices \n    [3,4]\n. Note that \n    3\n\nalso appears once in that range, but \n    2\n is smaller than \n    3\n.\n\n",
        "cf_contest_id": 1372,
        "cf_index": "F",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "divide and conquer",
            "interactive"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n1 2 2 3 3 4\r\n",
                "7\r\n1 2 2 3 3 4 \r\n"
            ]
        ],
        "private_cases": [
            [
                "6\r\n1 2 2 3 4 4\r\n",
                "7\r\n1 2 2 3 4 4 \r\n"
            ],
            [
                "7\r\n1 2 3 4 5 7 8\r\n",
                "13\r\n1 2 3 4 5 7 8 \r\n"
            ],
            [
                "10\r\n9 9 9 9 9 9 9 9 9 9\r\n",
                "1\r\n9 9 9 9 9 9 9 9 9 9 \r\n"
            ],
            [
                "20\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 15 16 16 16 16\r\n",
                "33\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 15 16 16 16 16 \r\n"
            ],
            [
                "8\r\n1 1 1 2 3 3 3 3\r\n",
                "5\r\n1 1 1 2 3 3 3 3 \r\n"
            ],
            [
                "13\r\n1 1 1 2 2 2 3 3 3 4 4 4 4\r\n",
                "11\r\n1 1 1 2 2 2 3 3 3 4 4 4 4 \r\n"
            ],
            [
                "1\r\n1000000000\r\n",
                "1\r\n1000000000 \r\n"
            ],
            [
                "4\r\n3 3 3 3\r\n",
                "1\r\n3 3 3 3 \r\n"
            ],
            [
                "15\r\n23600550 23600550 23600550 23600550 486693464 486693464 491237991 491237991 491237991 491237991 491237991 688437245 949742598 949742598 949742598\r\n",
                "11\r\n23600550 23600550 23600550 23600550 486693464 486693464 491237991 491237991 491237991 491237991 491237991 688437245 949742598 949742598 949742598 \r\n"
            ]
        ]
    }
]