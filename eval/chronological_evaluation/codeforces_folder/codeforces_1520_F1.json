[
    {
        "name": "Guess the K-th Zero (Easy version)",
        "description": "This is an interactive problem. This is an easy version of the problem. The\ndifference from the hard version is that in the easy version \n    t=1\n and the\nnumber of queries is limited to \n    20\n. Polycarp is playing a computer game.\nIn this game, an array consisting of zeros and ones is hidden. Polycarp wins\nif he guesses the position of the \n    k\n-th zero from the left \n    t\n times.\nPolycarp can make no more than \n    20\n requests of the following type: ?\n\n    l\n \n    r\n \u2014 find out the sum of all elements in positions from \n    l\n\nto \n    r\n (\n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 n\n) inclusive. In this (easy version)\nof the problem, this paragraph doesn't really make sense since \n    t=1\n\nalways. To make the game more interesting, each guessed zero turns into one\nand the game continues on the changed array. More formally, if the position of\nthe \n    k\n-th zero was \n    x\n, then after Polycarp guesses this position,\nthe \n    x\n-th element of the array will be replaced from \n    0\n to \n    1\n.\nOf course, this feature affects something only for \n    t>1\n. Help Polycarp\nwin the game. Interaction First, your program must read two integers \n    n\n\nand \n    t\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n, \n    t=1\n). Then \n    t\n\nlines follow, each of which contains one integer \n    k\n (\n    1 \n    \u2264 k \n    \u2264\n    n\n). It is guaranteed that at the moment of the request the array contains\nat least \n    k\n zeros. In order to get the next value of \n    k\n, you must\noutput the answer for the current value of \n    k\n. After that, you can make\nno more than \n    20\n requests. Use the following format to output the answer\n(it is not a request, it doesn't count in \n    20\n): ! \n    x\n \u2014 position of\nthe \n    k\n-th zero. Positions in the array are numbered from left to right\nfrom \n    1\n to \n    n\n inclusive. After printing \n    t\n answers, your\nprogram should exit immediately. In this task, the interactor is not adaptive.\nThis means that within the same test, the hidden array and the queries do not\nchange. In case of an incorrect query, -1 will be displayed. When this value\nis received, your program must immediately exit normally (for example, by\ncalling exit(0)), otherwise, the testing system may issue an arbitrary\nverdict. If the number of requests is exceeded, the verdict wrong answer will\nbe displayed. Your solution may get the verdict Idleness limit exceeded if you\ndon't print anything or forget to flush the output buffer. To flush the output\nbuffer, you need to do the following immediately after the query output and\nthe end-of-line character: fflush(stdout) or cout.flush() in C ++;\nSystem.out.flush() in Java; flush(output) in Pascal; stdout.flush() in Python;\nsee the documentation for other languages. Hacks Use the following format for\nhacks: On the first line print the string \n    s\n (\n    1 \n    \u2264 |s| \n    \u2264 2\n    \n    \u00b7 10^5\n), consisting of zeros and ones, and an integer \n    t\n (\n    t =\n    1\n) \u2014 hidden array and number of requests, respectively. In the next \n    t\n\nlines output the number \n    k\n (\n    1 \n    \u2264 k \n    \u2264 |s|\n). The hacked\nsolution will not have direct access to the hidden array. Example Input 6 1 2\n2 1 1 0 0 Output ? 4 6 ? 1 1 ? 1 2 ? 2 2 ? 5 5 ! 5 Note In the first test, the\n\n    [1, 0, 1, 1, 0, 1]\n array is hidden. In this test \n    k=2\n.\n\n",
        "cf_contest_id": 1520,
        "cf_index": "F1",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "interactive"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "101101 1\r\n2\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "0 1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "10 1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "00 1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "101 1\r\n1\r\n",
                "2\r\n"
            ],
            [
                "100 1\r\n1\r\n",
                "2\r\n"
            ],
            [
                "000 1\r\n3\r\n",
                "1\r\n"
            ],
            [
                "0111 1\r\n1\r\n",
                "2\r\n"
            ],
            [
                "0011 1\r\n1\r\n",
                "2\r\n"
            ],
            [
                "0001 1\r\n2\r\n",
                "2\r\n"
            ],
            [
                "0000 1\r\n4\r\n",
                "2\r\n"
            ],
            [
                "01111 1\r\n1\r\n",
                "3\r\n"
            ],
            [
                "10110 1\r\n2\r\n",
                "2\r\n"
            ],
            [
                "10100 1\r\n1\r\n",
                "3\r\n"
            ],
            [
                "10000 1\r\n1\r\n",
                "3\r\n"
            ],
            [
                "00000 1\r\n3\r\n",
                "2\r\n"
            ],
            [
                "0100000000000000000000000 1\r\n1\r\n",
                "5\r\n"
            ]
        ]
    }
]