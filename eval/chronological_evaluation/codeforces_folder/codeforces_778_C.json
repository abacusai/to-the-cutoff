[
    {
        "name": "Peterson Polyglot",
        "description": "Peterson loves to learn new languages, but his favorite hobby is making new\nones. Language is a set of words, and word is a sequence of lowercase Latin\nletters. Peterson makes new language every morning. It is difficult task to\nstore the whole language, so Peterson have invented new data structure for\nstoring his languages which is called broom. Broom is rooted tree with edges\nmarked with letters. Initially broom is represented by the only vertex \u2014 the\nroot of the broom. When Peterson wants to add new word to the language he\nstands at the root and processes the letters of new word one by one. Consider\nthat Peterson stands at the vertex u. If there is an edge from u marked with\ncurrent letter, Peterson goes through this edge. Otherwise Peterson adds new\nedge from u to the new vertex v, marks it with the current letter and goes\nthrough the new edge. Size of broom is the number of vertices in it. In the\nevening after working day Peterson can't understand the language he made this\nmorning. It is too difficult for bored Peterson and he tries to make it\nsimpler. Simplification of the language is the process of erasing some letters\nfrom some words of this language. Formally, Peterson takes some positive\ninteger p and erases p-th letter from all the words of this language having\nlength at least p. Letters in words are indexed starting by 1. Peterson\nconsiders that simplification should change at least one word, i.e. there has\nto be at least one word of length at least p. Peterson tries to make his\nlanguage as simple as possible, so he wants to choose p such that the size of\nthe broom for his simplified language is as small as possible. Peterson is\npretty annoyed with this task so he asks you for help. Write a program to find\nthe smallest possible size of the broom and integer p. Input The first line of\ninput contains integer n (2 \u2264 n \u2264 3\u00b710^5) \u2014 the size of the broom. Next n - 1\nlines describe the broom: i-th of them contains integers ui, vi and letter xi\n\u2014 describing the edge from ui to vi marked with letter xi. Vertices are\nnumbered from 1 to n. All xi are lowercase latin letters. Vertex 1 is the root\nof the broom. Edges describe correct broom which is made from Peterson's\nlanguage. Output The first line of output should contain the minimum possible\nsize of the broom after its simplification. The second line of output should\ncontain integer p to choose. If there are several suitable p values, print the\nsmallest one. Examples Input 5 1 2 c 2 3 a 3 4 t 2 5 t Output 3 2 Input 16 1 2\no 2 3 f 1 4 p 4 5 i 5 6 e 6 7 c 7 8 e 4 9 r 9 10 e 10 11 t 11 12 t 12 13 y 10\n14 f 14 15 i 15 16 x Output 12 2 Note Broom from the second sample test can be\nbuilt using language \"piece\", \"of\", \"pie\", \"pretty\", \"prefix\". Its\nsimplification with p = 2 obtains the language of words \"pece\", \"o\", \"pe\",\n\"petty\", \"pefix\". This language gives us the broom with minimum possible size.\n\n",
        "cf_contest_id": 778,
        "cf_index": "C",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dfs and similar",
            "dsu",
            "hashing",
            "strings",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5\r\n1 2 c\r\n2 3 a\r\n3 4 t\r\n2 5 t\r\n",
                "3\r\n2"
            ],
            [
                "16\r\n1 2 o\r\n2 3 f\r\n1 4 p\r\n4 5 i\r\n5 6 e\r\n6 7 c\r\n7 8 e\r\n4 9 r\r\n9 10 e\r\n10 11 t\r\n11 12 t\r\n12 13 y\r\n10 14 f\r\n14 15 i\r\n15 16 x\r\n",
                "12\r\n2"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 2 o\r\n",
                "1\r\n1"
            ],
            [
                "3\r\n2 3 w\r\n1 2 o\r\n",
                "2\r\n1"
            ],
            [
                "3\r\n1 3 g\r\n1 2 o\r\n",
                "1\r\n1"
            ],
            [
                "5\r\n1 2 s\r\n1 5 p\r\n5 4 w\r\n2 3 a\r\n",
                "3\r\n1"
            ],
            [
                "5\r\n1 2 m\r\n1 4 v\r\n4 5 x\r\n2 3 x\r\n",
                "2\r\n1"
            ]
        ]
    }
]