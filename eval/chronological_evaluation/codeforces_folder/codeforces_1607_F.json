[
    {
        "name": "Robot on the Board 2",
        "description": "The robot is located on a checkered rectangular board of size \n    n \n    \u00d7\n    m\n (\n    n\n rows, \n    m\n columns). The rows in the board are numbered from\n\n    1\n to \n    n\n from top to bottom, and the columns \u2014 from \n    1\n to\n\n    m\n from left to right. The robot is able to move from the current cell to\none of the four cells adjacent by side. Each cell has one of the symbols 'L',\n'R', 'D' or 'U' written on it, indicating the direction in which the robot\nwill move when it gets in that cell \u2014 left, right, down or up, respectively.\nThe robot can start its movement in any cell. He then moves to the adjacent\nsquare in the direction indicated on the current square in one move. If the\nrobot moves beyond the edge of the board, it falls and breaks. If the robot\nappears in the cell it already visited before, it breaks (it stops and doesn't\nmove anymore). Robot can choose any cell as the starting cell. Its goal is to\nmake the maximum number of steps before it breaks or stops. Determine from\nwhich square the robot should start its movement in order to execute as many\ncommands as possible. A command is considered successfully completed if the\nrobot has moved from the square on which that command was written (it does not\nmatter whether to another square or beyond the edge of the board). Input The\nfirst line contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10000\n) \u2014 the\nnumber of test cases in the test. Each test case's description is preceded by\na blank line. Next is a line that contains integers \n    n\n and \n    m\n (\n    1\n    \n    \u2264 n \n    \u2264 2000\n; \n    1 \n    \u2264 m \n    \u2264 2000\n) \u2014 the height and width of\nthe board. This line followed by \n    n\n lines, the \n    i\n-th of which\ndescribes the \n    i\n-th line of the board. Each of them is exactly \n    m\n\nletters long and consists of symbols 'L', 'R', 'D' and 'U'. It is guaranteed\nthat the sum of sizes of all boards in the input does not exceed\n\n    4\n    \u00b710^6\n. Output For each test case, output three integers \n    r\n,\n\n    c\n and \n    d\n (\n    1 \n    \u2264 r \n    \u2264 n\n; \n    1 \n    \u2264 c \n    \u2264 m\n; \n    d\n    \n    \u2265 0\n), which denote that the robot should start moving from cell \n    (r,\n    c)\n to make the maximum number of moves \n    d\n. If there are several\nanswers, output any of them. Example Input 7 1 1 R 1 3 RRL 2 2 DL RU 2 2 UD RU\n3 2 DL UL RU 4 4 RRRD RUUD URUD ULLR 4 4 DDLU RDDU UUUU RDLD Output 1 1 1 1 1\n3 1 1 4 2 1 3 3 1 5 4 3 12 1 1 4\n\n",
        "cf_contest_id": 1607,
        "cf_index": "F",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dfs and similar",
            "graphs",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n\r\n1 1\r\nR\r\n\r\n1 3\r\nRRL\r\n\r\n2 2\r\nDL\r\nRU\r\n\r\n2 2\r\nUD\r\nRU\r\n\r\n3 2\r\nDL\r\nUL\r\nRU\r\n\r\n4 4\r\nRRRD\r\nRUUD\r\nURUD\r\nULLR\r\n\r\n4 4\r\nDDLU\r\nRDDU\r\nUUUU\r\nRDLD\r\n",
                "1 1 1\r\n1 1 3\r\n1 1 4\r\n2 1 3\r\n3 1 5\r\n4 3 12\r\n1 1 4\r\n"
            ]
        ],
        "private_cases": []
    }
]