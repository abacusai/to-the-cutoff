[
    {
        "name": "Writing Code",
        "description": "Programmers working on a large project have just received a task to write\nexactly m lines of code. There are n programmers working on a project, the\ni-th of them makes exactly ai bugs in every line of code that he writes. Let's\ncall a sequence of non-negative integers v1, v2, ..., vn a plan, if v1 + v2 +\n... + vn = m. The programmers follow the plan like that: in the beginning the\nfirst programmer writes the first v1 lines of the given task, then the second\nprogrammer writes v2 more lines of the given task, and so on. In the end, the\nlast programmer writes the remaining lines of the code. Let's call a plan\ngood, if all the written lines of the task contain at most b bugs in total.\nYour task is to determine how many distinct good plans are there. As the\nnumber of plans can be large, print the remainder of this number modulo given\npositive integer mod. Input The first line contains four integers n, m, b, mod\n(1 \u2264 n, m \u2264 500, 0 \u2264 b \u2264 500; 1 \u2264 mod \u2264 10^9 + 7) \u2014 the number of programmers,\nthe number of lines of code in the task, the maximum total number of bugs\nrespectively and the modulo you should use when printing the answer. The next\nline contains n space-separated integers a1, a2, ..., an (0 \u2264 ai \u2264 500) \u2014 the\nnumber of bugs per line for each programmer. Output Print a single integer \u2014\nthe answer to the problem modulo mod. Examples Input 3 3 3 100 1 1 1 Output 10\nInput 3 6 5 1000000007 1 2 3 Output 0 Input 3 5 6 11 1 2 1 Output 0\n\n",
        "cf_contest_id": 543,
        "cf_index": "A",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "dp"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3 3 100\r\n1 1 1\r\n",
                "10\r\n"
            ],
            [
                "3 6 5 1000000007\r\n1 2 3\r\n",
                "0\r\n"
            ],
            [
                "3 5 6 11\r\n1 2 1\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 3 3 1000\r\n1 2\r\n",
                "1\r\n"
            ],
            [
                "3 10 10 150691913\r\n8 7 10\r\n",
                "0\r\n"
            ],
            [
                "100 500 500 895583345\r\n20 39 5 5 41 47 36 33 34 22 21 33 7 4 15 35 16 37 39 46 27 4 12 35 43 26 23 40 16 50 27 7 49 28 17 28 16 22 18 12 25 34 28 24 10 21 38 10 40 50 35 18 23 38 10 42 22 19 24 45 33 34 50 24 29 36 39 11 37 18 10 2 9 38 17 36 49 1 32 6 20 5 37 18 31 44 1 36 24 35 13 35 8 10 26 45 43 28 38 22\r\n",
                "501\r\n"
            ],
            [
                "100 100 100 960694994\r\n1 0 0 0 1 0 0 0 0 1 0 0 0 1 0 1 1 0 1 0 0 0 1 1 0 0 1 1 0 1 1 0 1 1 0 1 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 1 1 1 0 0 1 0 0 1 1 0 1 0 1 0 1 1 0 1 1 0 1 1 0 0 1 0 1 0 1 1 0 1 0 1\r\n",
                "527886216\r\n"
            ],
            [
                "123 432 342 1000000007\r\n72 20 34 115 65 29 114 41 18 16 122 104 88 37 119 11 108 91 13 110 47 73 80 35 62 12 9 116 55 66 54 113 50 57 8 25 98 105 0 120 93 78 61 17 84 48 42 106 63 103 7 59 90 89 28 49 53 71 51 83 75 67 64 95 107 3 32 85 69 99 33 79 109 56 10 23 87 19 121 94 44 82 102 27 112 52 21 1 5 74 117 111 76 24 4 101 30 36 97 60 92 46 22 68 118 58 38 70 39 26 43 77 6 2 40 100 81 96 14 31 15 45 86\r\n",
                "902925242\r\n"
            ],
            [
                "100 500 499 1000000007\r\n72 20 34 92 65 29 40 41 18 16 86 14 88 37 31 11 39 91 13 43 47 73 80 35 62 12 9 81 55 66 54 2 50 57 8 25 98 58 0 15 93 78 61 17 84 48 42 38 63 68 7 59 90 89 28 49 53 71 51 83 75 67 64 95 70 3 32 85 69 99 33 79 26 56 10 23 87 19 45 94 44 82 22 27 6 52 21 1 5 74 96 77 76 24 4 46 30 36 97 60\r\n",
                "416898599\r\n"
            ],
            [
                "1 1 0 1000\r\n0\r\n",
                "1\r\n"
            ],
            [
                "1 4 25 1000\r\n6\r\n",
                "1\r\n"
            ],
            [
                "1 5 1 10\r\n1\r\n",
                "0\r\n"
            ],
            [
                "1 5 5 1000\r\n1\r\n",
                "1\r\n"
            ],
            [
                "1 5 5 1000\r\n500\r\n",
                "0\r\n"
            ],
            [
                "2 500 250 100\r\n100 200\r\n",
                "0\r\n"
            ],
            [
                "2 500 50 10000\r\n0 50\r\n",
                "2\r\n"
            ],
            [
                "100 500 500 1000000007\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n",
                "925584498\r\n"
            ],
            [
                "10 9 20 48620\r\n1 1 1 1 1 1 1 1 2 2\r\n",
                "0\r\n"
            ],
            [
                "21 63 40 1009\r\n4 4 2 2 4 4 3 2 4 2 0 3 3 4 3 4 3 0 4 2 4\r\n",
                "1002\r\n"
            ],
            [
                "29 157 50 1\r\n3 0 0 3 1 1 2 0 4 4 1 2 2 1 0 0 2 0 3 2 2 3 3 1 4 1 1 4 1\r\n",
                "0\r\n"
            ],
            [
                "1 1 1 1\r\n0\r\n",
                "0\r\n"
            ],
            [
                "1 1 1 1\r\n2\r\n",
                "0\r\n"
            ]
        ]
    }
]