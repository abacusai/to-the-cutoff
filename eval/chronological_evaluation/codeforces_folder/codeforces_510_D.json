[
    {
        "name": "Fox And Jumping",
        "description": "Fox Ciel is playing a game. In this game there is an infinite long tape with\ncells indexed by integers (positive, negative and zero). At the beginning she\nis standing at the cell 0. There are also n cards, each card has 2 attributes:\nlength li and cost ci. If she pays ci dollars then she can apply i-th card.\nAfter applying i-th card she becomes able to make jumps of length li, i. e.\nfrom cell x to cell (x - li) or cell (x + li). She wants to be able to jump to\nany cell on the tape (possibly, visiting some intermediate cells). For\nachieving this goal, she wants to buy some cards, paying as little money as\npossible. If this is possible, calculate the minimal cost. Input The first\nline contains an integer n (1 \u2264 n \u2264 300), number of cards. The second line\ncontains n numbers li (1 \u2264 li \u2264 10^9), the jump lengths of cards. The third\nline contains n numbers ci (1 \u2264 ci \u2264 10^5), the costs of cards. Output If it\nis impossible to buy some cards and become able to jump to any cell, output\n-1. Otherwise output the minimal cost of buying such set of cards. Examples\nInput 3 100 99 9900 1 1 1 Output 2 Input 5 10 20 30 40 50 1 1 1 1 1 Output -1\nInput 7 15015 10010 6006 4290 2730 2310 1 1 1 1 1 1 1 10 Output 6 Input 8 4264\n4921 6321 6984 2316 8432 6120 1026 4264 4921 6321 6984 2316 8432 6120 1026\nOutput 7237 Note In first sample test, buying one card is not enough: for\nexample, if you buy a card with length 100, you can't jump to any cell whose\nindex is not a multiple of 100. The best way is to buy first and second card,\nthat will make you be able to jump to any cell. In the second sample test,\neven if you buy all cards, you can't jump to any cell whose index is not a\nmultiple of 10, so you should output -1.\n\n",
        "cf_contest_id": 510,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "dp",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n100 99 9900\r\n1 1 1\r\n",
                "2\r\n"
            ],
            [
                "5\r\n10 20 30 40 50\r\n1 1 1 1 1\r\n",
                "-1\r\n"
            ],
            [
                "7\r\n15015 10010 6006 4290 2730 2310 1\r\n1 1 1 1 1 1 10\r\n",
                "6\r\n"
            ],
            [
                "8\r\n4264 4921 6321 6984 2316 8432 6120 1026\r\n4264 4921 6321 6984 2316 8432 6120 1026\r\n",
                "7237\r\n"
            ]
        ],
        "private_cases": [
            [
                "6\r\n1 2 4 8 16 32\r\n32 16 8 4 2 1\r\n",
                "32\r\n"
            ],
            [
                "1\r\n1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "1\r\n2\r\n2\r\n",
                "-1\r\n"
            ],
            [
                "8\r\n2 3 5 7 11 13 17 19\r\n4 8 7 1 5 2 6 3\r\n",
                "3\r\n"
            ],
            [
                "1\r\n1000000000\r\n100000\r\n",
                "-1\r\n"
            ],
            [
                "2\r\n1000000000 999999999\r\n100000 100000\r\n",
                "200000\r\n"
            ],
            [
                "39\r\n692835 4849845 22610 1995 19019 114 6270 15 85085 27170 1365 1155 7410 238 3135 546 373065 715 110 969 15 10374 2730 19019 85 65 5187 26 3233230 1122 399 1122 53295 910 110 12597 16302 125970 67830\r\n4197 6490 2652 99457 65400 96257 33631 23456 14319 22288 16179 74656 89713 31503 45895 31777 64534 27989 60861 69846 44586 87185 96589 62279 62478 6180 26977 12112 9975 72933 73239 65856 98253 18875 55266 55867 36397 40743 47977\r\n",
                "18961\r\n"
            ],
            [
                "35\r\n512 268435456 8 128 134217728 8192 33554432 33554432 536870912 512 65536 1048576 32768 512 524288 1024 536870912 536870912 16 32 33554432 134217728 2 16 16777216 8192 262144 65536 33554432 128 4096 2097152 33554432 2097152 2\r\n36157 67877 79710 63062 12683 36255 61053 83828 93590 74236 5281 28143 7350 45953 96803 15998 11240 45207 63010 74076 85227 83498 68320 77288 48100 51373 87843 70054 28986 25365 98581 11195 43674 75769 22053\r\n",
                "-1\r\n"
            ]
        ]
    }
]