[
    {
        "name": "Shifting Dominoes",
        "description": "Bill likes to play with dominoes. He took an \n    n \n    \u00d7 m\n board divided\ninto equal square cells, and covered it with dominoes. Each domino covers two\nadjacent cells of the board either horizontally or vertically, and each cell\nis covered exactly once with a half of one domino (that is, there are no\nuncovered cells, and no two dominoes cover the same cell twice). After that\nBill decided to play with the covered board and share some photos of it on\nsocial media. First, he removes exactly one domino from the board, freeing two\nof the cells. Next, he moves dominoes around. A domino can only be moved along\nthe line parallel to its longer side. A move in the chosen direction is\npossible if the next cell in this direction is currently free. Bill doesn't\nwant to lose track of what the original tiling looks like, so he makes sure\nthat at any point each domino shares at least one cell with its original\nposition. After removing a domino and making several (possibly, zero) moves\nBill takes a photo of the board and posts it. However, with the amount of\nfilters Bill is using, domino borders are not visible, so only the two free\ncells of the board can be identified. When the photo is posted, Bill reverts\nthe board to its original state and starts the process again. Bill wants to\npost as many photos as possible, but he will not post any photo twice. How\nmany distinct photos can he take? Recall that photos are different if the\npairs of free cells in the photos are different. Input The first line contains\ntwo positive integers \n    n\n and \n    m\n (\n    nm \n    \u2264 2 \n    \u00b7 10^5\n) \u2014\nheight and width of the board respectively. The next \n    n\n lines describe\nthe tiling of the board, row by row from top to bottom. Each of these lines\ncontains \n    m\n characters, describing the cells in the corresponding row\nleft to right. Each character is one of U, D, L, or R, meaning that the cell\nis covered with a top, bottom, left, or right half of a domino respectively.\nIt is guaranteed that the described tiling is valid, that is, each half-domino\nhas a counterpart in the relevant location. In particular, since tiling is\npossible, the number of cells in the board is even. Output Print a single\ninteger \u2014 the number of distinct photos Bill can take. Examples Input 2 4 UUUU\nDDDD Output 4 Input 2 3 ULR DLR Output 6 Input 6 6 ULRUUU DUUDDD UDDLRU DLRLRD\nULRULR DLRDLR Output 133 Note In the first sample case, no moves are possible\nafter removing any domino, thus there are four distinct photos. In the second\nsample case, four photos are possible after removing the leftmost domino by\nindependently moving/not moving the remaining two dominoes. Two more different\nphotos are obtained by removing one of the dominoes on the right.\n\n",
        "cf_contest_id": 1368,
        "cf_index": "G",
        "cf_rating": 3200,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "geometry",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "2 4\r\nUUUU\r\nDDDD\r\n",
                "4\r\n"
            ],
            [
                "2 3\r\nULR\r\nDLR\r\n",
                "6\r\n"
            ],
            [
                "6 6\r\nULRUUU\r\nDUUDDD\r\nUDDLRU\r\nDLRLRD\r\nULRULR\r\nDLRDLR\r\n",
                "133\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 2\r\nLR\r\n",
                "1\r\n"
            ],
            [
                "2 1\r\nU\r\nD\r\n",
                "1\r\n"
            ],
            [
                "2 2\r\nUU\r\nDD\r\n",
                "2\r\n"
            ],
            [
                "1 100\r\nLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLR\r\n",
                "1275\r\n"
            ],
            [
                "100 2\r\nLR\r\nLR\r\nUU\r\nDD\r\nUU\r\nDD\r\nUU\r\nDD\r\nLR\r\nLR\r\nUU\r\nDD\r\nUU\r\nDD\r\nLR\r\nUU\r\nDD\r\nLR\r\nLR\r\nUU\r\nDD\r\nLR\r\nLR\r\nLR\r\nUU\r\nDD\r\nLR\r\nLR\r\nLR\r\nLR\r\nUU\r\nDD\r\nUU\r\nDD\r\nUU\r\nDD\r\nLR\r\nLR\r\nUU\r\nDD\r\nUU\r\nDD\r\nLR\r\nLR\r\nUU\r\nDD\r\nLR\r\nLR\r\nLR\r\nLR\r\nLR\r\nLR\r\nLR\r\nUU\r\nDD\r\nLR\r\nLR\r\nUU\r\nDD\r\nUU\r\nDD\r\nUU\r\nDD\r\nLR\r\nUU\r\nDD\r\nLR\r\nLR\r\nLR\r\nUU\r\nDD\r\nUU\r\nDD\r\nLR\r\nLR\r\nLR\r\nLR\r\nLR\r\nLR\r\nUU\r\nDD\r\nLR\r\nLR\r\nLR\r\nUU\r\nDD\r\nLR\r\nLR\r\nLR\r\nUU\r\nDD\r\nLR\r\nLR\r\nUU\r\nDD\r\nLR\r\nLR\r\nLR\r\nUU\r\nDD\r\n",
                "335\r\n"
            ],
            [
                "10 10\r\nLRLRUUUULR\r\nLRLRDDDDUU\r\nUULRUULRDD\r\nDDLRDDLRUU\r\nUULRUUUUDD\r\nDDUUDDDDLR\r\nLRDDLRLRLR\r\nULRULRULRU\r\nDLRDUUDLRD\r\nLRLRDDLRLR\r\n",
                "617\r\n"
            ],
            [
                "6 6\r\nULRULR\r\nDLRDLR\r\nUULRUU\r\nDDLRDD\r\nLRUUUU\r\nLRDDDD\r\n",
                "120\r\n"
            ]
        ]
    }
]