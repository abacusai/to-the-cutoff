[
    {
        "name": "LuoTianyi and the Show",
        "description": "There are \n    n\n people taking part in a show about VOCALOID. They will sit\nin the row of seats, numbered \n    1\n to \n    m\n from left to right. The\n\n    n\n people come and sit in order. Each person occupies a seat in one of\nthree ways: Sit in the seat next to the left of the leftmost person who is\nalready sitting, or if seat \n    1\n is taken, then leave the show. If there is\nno one currently sitting, sit in seat \n    m\n. Sit in the seat next to the\nright of the rightmost person who is already sitting, or if seat \n    m\n is\ntaken, then leave the show. If there is no one currently sitting, sit in seat\n\n    1\n. Sit in the seat numbered \n    x_i\n. If this seat is taken, then leave\nthe show. Now you want to know what is the maximum number of people that can\ntake a seat, if you can let people into the show in any order? Input Each test\nconsists of multiple test cases. The first line contains a single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. The\ndescription of test cases follows. The first line of each test case contains\ntwo integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 10^5\n) \u2014 the number\nof people and the number of seats. The second line of each test case contains\n\n    n\n integers \n    x_1, x_2, \n    \u2026, x_n\n (\n    -2 \n    \u2264 x_i \n    \u2264 m\n,\n\n    x_i \n     0\n), the \n    i\n-th of which describes the way in which the\n\n    i\n-th person occupies a seat: If \n    x_i=-1\n, then \n    i\n-th person\ntakes the seat in the first way. If \n    x_i=-2\n, then \n    i\n-th person takes\nthe seat in the second way. If \n    x_i > 0\n, then the \n    i\n-th person takes\na seat in the third way, i.e. he wants to sit in the seat with the number\n\n    x_i\n or leave the show if it is occupied.. It is guaranteed that sum of\n\n    n\n and the sum of \n    m\n over all test cases don't exceed \n    10^5\n.\nOutput For each test case output a single integer \u2014 the maximum number of\npeople who can occupy a seat. Example Input 10 3 10 5 5 5 4 6 1 -2 -2 1 5 7 -1\n-1 4 -2 -2 6 7 5 -2 -2 -2 -2 -2 6 6 -1 1 4 5 -1 4 6 8 -1 -1 -1 3 -1 -2 6 7 5\n-1 -2 -2 -2 -2 3 1 -2 -2 1 2 5 5 -2 1 2 -1 Output 1 3 5 6 5 5 5 1 2 1 Note In\nthe first test case, all the people want to occupy the \n    5\n seat, so only\n\n    1\n people can occupy the seat. In the second test case, we can let people\nin order \n    1, 2, 3, 4\n, then all but the last person can take a seat. In\nthe third test case, we can let people into the show in that order: Let the\nthird person in: \u2013\u2013\u20133\u2013\u2013\u2013 Let the fourth person in: \u2013\u2013\u201334\u2013\u2013 Let the fifth\nperson in: \u2013\u2013\u2013345\u2013 Let the first person in: \u2013\u20131345\u2013 Let the second person in:\n\u201321345\u2013 Thus, all \n    5\n people took seats. In the fifth test case, we can\nlet people into the show in this order: Let the fourth person in: \u2013\u2013\u2013\u20134\u2013 Let\nthe third person in: \u2013\u2013\u201334\u2013 Let the sixth person in, he'll leave the show\nbecause he takes the third seat the third way and has to sit in the \n    4\n\nseat, but it's already taken: \u2013\u2013\u201334\u2013 Let the fifth person in: \u2013\u2013534\u2013 Let the\nfirst person in: \u20131534\u2013 Let the second person in: 21534\u2013 Thus, \n    5\n of\npeople took seats. In the seventh test case, we can let people into the show\nin this order: Let the third person in: 3\u2013\u2013\u2013\u2013\u2013\u2013 Let the fourth person in:\n34\u2013\u2013\u2013\u2013\u2013 Let the fifth person in: 345\u2013\u2013\u2013\u2013 Let the sixth person in: 3456\u2013\u2013\u2013 Let\nthe first person in: 34561\u2013\u2013 Let the second person in, he will leave the show\nbecause he occupies the first way, but the \n    1\n seat is taken: 34561\u2013\u2013\nThus, \n    5\n people took seats.\n\n",
        "cf_contest_id": 1824,
        "cf_index": "A",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10\r\n3 10\r\n5 5 5\r\n4 6\r\n1 -2 -2 1\r\n5 7\r\n-1 -1 4 -2 -2\r\n6 7\r\n5 -2 -2 -2 -2 -2\r\n6 6\r\n-1 1 4 5 -1 4\r\n6 8\r\n-1 -1 -1 3 -1 -2\r\n6 7\r\n5 -1 -2 -2 -2 -2\r\n3 1\r\n-2 -2 1\r\n2 5\r\n5 -2\r\n1 2\r\n-1\r\n",
                "1\r\n3\r\n5\r\n6\r\n5\r\n5\r\n5\r\n1\r\n2\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]