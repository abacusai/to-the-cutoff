[
    {
        "name": "Petya and Post",
        "description": "Little Vasya's uncle is a postman. The post offices are located on one\ncircular road. Besides, each post office has its own gas station located next\nto it. Petya's uncle works as follows: in the morning he should leave the\nhouse and go to some post office. In the office he receives a portion of\nletters and a car. Then he must drive in the given car exactly one round along\nthe circular road and return to the starting post office (the uncle can drive\nalong the circle in any direction, counterclockwise or clockwise). Besides,\nsince the car belongs to the city post, it should also be fuelled with\ngasoline only at the Post Office stations. The total number of stations equals\nto n. One can fuel the car at the i-th station with no more than ai liters of\ngasoline. Besides, one can fuel the car no more than once at each station.\nAlso, the distance between the 1-st and the 2-nd station is b1 kilometers, the\ndistance between the 2-nd and the 3-rd one is b2 kilometers, ..., between the\n(n - 1)-th and the n-th ones the distance is bn - 1 kilometers and between the\nn-th and the 1-st one the distance is bn kilometers. Petya's uncle's high-tech\ncar uses only one liter of gasoline per kilometer. It is known that the\nstations are located so that the sum of all ai is equal to the sum of all bi.\nThe i-th gas station and i-th post office are very close, so the distance\nbetween them is 0 kilometers. Thus, it becomes clear that if we start from\nsome post offices, then it is not always possible to drive one round along a\ncircular road. The uncle faces the following problem: to what stations can he\ngo in the morning to be able to ride exactly one circle along the circular\nroad and visit all the post offices that are on it? Petya, who used to attend\nprogramming classes, has volunteered to help his uncle, but his knowledge\nturned out to be not enough, so he asks you to help him write the program that\nwill solve the posed problem. Input The first line contains integer n (1 \u2264 n \u2264\n10^5). The second line contains n integers ai \u2014 amount of gasoline on the i-th\nstation. The third line contains n integers b1, b2, ..., bn. They are the\ndistances between the 1-st and the 2-nd gas stations, between the 2-nd and the\n3-rd ones, ..., between the n-th and the 1-st ones, respectively. The sum of\nall bi equals to the sum of all ai and is no more than 10^9. Each of the\nnumbers ai, bi is no less than 1 and no more than 10^9. Output Print on the\nfirst line the number k \u2014 the number of possible post offices, from which the\ncar can drive one circle along a circular road. Print on the second line k\nnumbers in the ascending order \u2014 the numbers of offices, from which the car\ncan start. Examples Input 4 1 7 2 3 8 1 1 3 Output 2 2 4 Input 8 1 2 1 2 1 2 1\n2 2 1 2 1 2 1 2 1 Output 8 1 2 3 4 5 6 7 8\n\n",
        "cf_contest_id": 66,
        "cf_index": "E",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 7 2 3\r\n8 1 1 3\r\n",
                "2\r\n2 4\r\n"
            ],
            [
                "8\r\n1 2 1 2 1 2 1 2\r\n2 1 2 1 2 1 2 1\r\n",
                "8\r\n1 2 3 4 5 6 7 8\r\n"
            ]
        ],
        "private_cases": [
            [
                "20\r\n31 16 20 30 19 35 8 11 20 45 10 26 21 39 29 52 8 10 37 49\r\n16 33 41 32 43 24 35 48 19 37 28 26 7 10 23 48 18 2 1 25\r\n",
                "4\r\n1 2 12 13\r\n"
            ],
            [
                "20\r\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\r\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10\r\n",
                "20\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\r\n"
            ],
            [
                "1\r\n1\r\n1\r\n",
                "1\r\n1\r\n"
            ],
            [
                "1\r\n1000000000\r\n1000000000\r\n",
                "1\r\n1\r\n"
            ],
            [
                "3\r\n3 3 3\r\n3 2 4\r\n",
                "3\r\n1 2 3\r\n"
            ],
            [
                "10\r\n1 5 4 3 2 1 5 8 2 3\r\n1 1 1 1 5 5 5 5 5 5\r\n",
                "3\r\n1 2 5\r\n"
            ],
            [
                "10\r\n44 22 14 9 93 81 52 64 3 99\r\n43 23 13 10 92 82 51 65 2 100\r\n",
                "6\r\n1 3 5 7 9 10\r\n"
            ]
        ]
    }
]