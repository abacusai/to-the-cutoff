[
    {
        "name": "Optimal Polygon Perimeter",
        "description": "You are given \n    n\n points on the plane. The polygon formed from all the\n\n    n\n points is strictly convex, that is, the polygon is convex, and there\nare no three collinear points (i.e. lying in the same straight line). The\npoints are numbered from \n    1\n to \n    n\n, in clockwise order. We define the\ndistance between two points \n    p_1 = (x_1, y_1)\n and \n    p_2 = (x_2, y_2)\n\nas their Manhattan distance: \n    \n\n    d(p_1, p_2) = |x_1 - x_2| + |y_1 -\n    y_2|.\n\n    \n Furthermore, we define the perimeter of a polygon, as the sum of\nManhattan distances between all adjacent pairs of points on it; if the points\non the polygon are ordered as \n    p_1, p_2, \n    \u2026, p_k\n \n    (k \n    \u2265\n    3)\n, then the perimeter of the polygon is \n    d(p_1, p_2) + d(p_2, p_3) +\n    \n    \u2026 + d(p_k, p_1)\n. For some parameter \n    k\n, let's consider all the\npolygons that can be formed from the given set of points, having any \n    k\n\nvertices, such that the polygon is not self-intersecting. For each such\npolygon, let's consider its perimeter. Over all such perimeters, we define\n\n    f(k)\n to be the maximal perimeter. Please note, when checking whether a\npolygon is self-intersecting, that the edges of a polygon are still drawn as\nstraight lines. For instance, in the following pictures: In the middle\npolygon, the order of points (\n    p_1, p_3, p_2, p_4\n) is not valid, since it\nis a self-intersecting polygon. The right polygon (whose edges resemble the\nManhattan distance) has the same order and is not self-intersecting, but we\nconsider edges as straight lines. The correct way to draw this polygon is\n(\n    p_1, p_2, p_3, p_4\n), which is the left polygon. Your task is to compute\n\n    f(3), f(4), \n    \u2026, f(n)\n. In other words, find the maximum possible\nperimeter for each possible number of points (i.e. \n    3\n to \n    n\n). Input\nThe first line contains a single integer \n    n\n (\n    3 \n    \u2264 n \n    \u2264\n    3\n    \u00b7 10^5\n) \u2014 the number of points. Each of the next \n    n\n lines\ncontains two integers \n    x_i\n and \n    y_i\n (\n    -10^8 \n    \u2264 x_i, y_i \n    \u2264\n    10^8\n) \u2014 the coordinates of point \n    p_i\n. The set of points is guaranteed\nto be convex, all points are distinct, the points are ordered in clockwise\norder, and there will be no three collinear points. Output For each \n    i\n\n(\n    3\n    \u2264 i\n    \u2264 n\n), output \n    f(i)\n. Examples Input 4 2 4 4 3 3 0 1 3\nOutput 12 14 Input 3 0 0 0 2 2 0 Output 8 Note In the first example, for\n\n    f(3)\n, we consider four possible polygons: (\n    p_1, p_2, p_3\n), with\nperimeter \n    12\n. (\n    p_1, p_2, p_4\n), with perimeter \n    8\n. (\n    p_1,\n    p_3, p_4\n), with perimeter \n    12\n. (\n    p_2, p_3, p_4\n), with perimeter\n\n    12\n. For \n    f(4)\n, there is only one option, taking all the given\npoints. Its perimeter \n    14\n. In the second example, there is only one\npossible polygon. Its perimeter is \n    8\n.\n\n",
        "cf_contest_id": 1044,
        "cf_index": "C",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "geometry"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2 4\r\n4 3\r\n3 0\r\n1 3\r\n",
                "12 14 \r\n"
            ],
            [
                "3\r\n0 0\r\n0 2\r\n2 0\r\n",
                "8 \r\n"
            ]
        ],
        "private_cases": [
            [
                "8\r\n0 3\r\n2 2\r\n3 0\r\n2 -2\r\n0 -3\r\n-2 -2\r\n-3 0\r\n-2 2\r\n",
                "20 24 24 24 24 24 \r\n"
            ],
            [
                "4\r\n-100000000 -100000000\r\n-100000000 100000000\r\n100000000 100000000\r\n100000000 -100000000\r\n",
                "800000000 800000000 \r\n"
            ],
            [
                "4\r\n0 0\r\n10 10\r\n10 9\r\n1 0\r\n",
                "40 40 \r\n"
            ],
            [
                "4\r\n12345678 99999999\r\n12345679 100000000\r\n12345680 99999999\r\n12345679 99999998\r\n",
                "6 8 \r\n"
            ],
            [
                "6\r\n-1000 1000\r\n-998 1001\r\n-996 1000\r\n-996 996\r\n-997 995\r\n-1001 997\r\n",
                "20 22 22 22 \r\n"
            ],
            [
                "3\r\n51800836 -5590860\r\n51801759 -5590419\r\n51801320 -5590821\r\n",
                "2728 \r\n"
            ],
            [
                "3\r\n97972354 -510322\r\n97972814 -510361\r\n97972410 -510528\r\n",
                "1332 \r\n"
            ],
            [
                "4\r\n-95989415 -89468419\r\n-95989014 -89468179\r\n-95989487 -89468626\r\n-95989888 -89468866\r\n",
                "3122 3122 \r\n"
            ],
            [
                "4\r\n100000000 0\r\n0 -100000000\r\n-100000000 0\r\n0 100000000\r\n",
                "600000000 800000000 \r\n"
            ],
            [
                "3\r\n77445196 95326351\r\n77444301 95326820\r\n77444705 95326693\r\n",
                "2728 \r\n"
            ],
            [
                "3\r\n-99297393 80400183\r\n-99297475 80399631\r\n-99297428 80399972\r\n",
                "1268 \r\n"
            ],
            [
                "10\r\n811055 21220458\r\n813063 21222323\r\n815154 21220369\r\n817067 21218367\r\n815214 21216534\r\n813198 21214685\r\n803185 21212343\r\n805063 21214436\r\n806971 21216475\r\n808966 21218448\r\n",
                "47724 47724 47724 47724 47724 47724 47724 47724 \r\n"
            ],
            [
                "12\r\n-83240790 -33942371\r\n-83240805 -33942145\r\n-83240821 -33941752\r\n-83240424 -33941833\r\n-83240107 -33942105\r\n-83239958 -33942314\r\n-83239777 -33942699\r\n-83239762 -33942925\r\n-83239746 -33943318\r\n-83240143 -33943237\r\n-83240460 -33942965\r\n-83240609 -33942756\r\n",
                "5282 5282 5282 5282 5282 5282 5282 5282 5282 5282 \r\n"
            ],
            [
                "20\r\n-2967010 48581504\r\n-2967318 48581765\r\n-2967443 48581988\r\n-2967541 48582265\r\n-2967443 48582542\r\n-2967318 48582765\r\n-2967010 48583026\r\n-2966691 48583154\r\n-2966252 48583234\r\n-2965813 48583154\r\n-2965494 48583026\r\n-2965186 48582765\r\n-2965061 48582542\r\n-2964963 48582265\r\n-2965061 48581988\r\n-2965186 48581765\r\n-2965494 48581504\r\n-2965813 48581376\r\n-2966252 48581296\r\n-2966691 48581376\r\n",
                "7648 9032 9032 9032 9032 9032 9032 9032 9032 9032 9032 9032 9032 9032 9032 9032 9032 9032 \r\n"
            ],
            [
                "4\r\n0 99999999\r\n0 100000000\r\n1 -99999999\r\n1 -100000000\r\n",
                "400000002 400000002 \r\n"
            ]
        ]
    }
]