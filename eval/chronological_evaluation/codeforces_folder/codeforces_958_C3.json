[
    {
        "name": "Encryption (hard)",
        "description": "Heidi is now just one code away from breaking the encryption of the Death Star\nplans. The screen that should be presenting her with the description of the\nnext code looks almost like the previous one, though who would have thought\nthat the evil Empire engineers would fill this small screen with several\nmillion digits! It is just ridiculous to think that anyone would read them\nall... Heidi is once again given a sequence A and two integers k and p. She\nneeds to find out what the encryption key S is. Let X be a sequence of\nintegers, and p a positive integer. We define the score of X to be the sum of\nthe elements of X modulo p. Heidi is given a sequence A that consists of N\nintegers, and also given integers k and p. Her goal is to split A into k parts\nsuch that: Each part contains at least 1 element of A, and each part consists\nof contiguous elements of A. No two parts overlap. The total sum S of the\nscores of those parts is minimized (not maximized!). Output the sum S, which\nis the encryption code. Input The first line of the input contains three\nspace-separated integers N, k and p (k \u2264 N \u2264 500 000, 2 \u2264 k \u2264 100, 2 \u2264 p \u2264\n100) \u2013 the number of elements in A, the number of parts A should be split\ninto, and the modulo for computing scores, respectively. The second line\ncontains N space-separated integers that are the elements of A. Each integer\nis from the interval [1, 1 000 000]. Output Output the number S as described\nin the problem statement. Examples Input 4 3 10 3 4 7 2 Output 6 Input 10 5 12\n16 3 24 13 9 8 7 5 12 12 Output 13 Note In the first example, if the input\nsequence is split as (3), (4, 7), (2), the total score would be . It is easy\nto see that this score is the smallest possible. In the second example, one\npossible way to obtain score 13 is to make the following split: (16, 3), (24),\n(13), (9, 8), (7, 5, 12, 12).\n\n",
        "cf_contest_id": 958,
        "cf_index": "C3",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp"
        ],
        "time_limit_seconds": 2.2,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4 3 10\r\n3 4 7 2\r\n",
                "6\r\n"
            ],
            [
                "10 5 12\r\n16 3 24 13 9 8 7 5 12 12\r\n",
                "13\r\n"
            ]
        ],
        "private_cases": []
    }
]