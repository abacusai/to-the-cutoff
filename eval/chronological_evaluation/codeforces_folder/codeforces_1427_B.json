[
    {
        "name": "Chess Cheater",
        "description": "You like playing chess tournaments online. In your last tournament you played\n\n    n\n games. For the sake of this problem, each chess game is either won or\nlost (no draws). When you lose a game you get \n    0\n points. When you win you\nget \n    1\n or \n    2\n points: if you have won also the previous game you get\n\n    2\n points, otherwise you get \n    1\n point. If you win the very first\ngame of the tournament you get \n    1\n point (since there is not a \"previous\ngame\"). The outcomes of the \n    n\n games are represented by a string \n    s\n\nof length \n    n\n: the \n    i\n-th character of \n    s\n is W if you have won\nthe \n    i\n-th game, while it is L if you have lost the \n    i\n-th game. After\nthe tournament, you notice a bug on the website that allows you to change the\noutcome of at most \n    k\n of your games (meaning that at most \n    k\n times\nyou can change some symbol L to W, or W to L). Since your only goal is to\nimprove your chess rating, you decide to cheat and use the bug. Compute the\nmaximum score you can get by cheating in the optimal way. Input Each test\ncontains multiple test cases. The first line contains an integer \n    t\n\n(\n    1\n    \u2264 t \n    \u2264 20,000\n) \u2014 the number of test cases. The description of\nthe test cases follows. The first line of each testcase contains two integers\n\n    n, k\n (\n    1\n    \u2264 n\n    \u2264 100,000\n, \n    0\n    \u2264 k\n    \u2264 n\n) \u2013 the number\nof games played and the number of outcomes that you can change. The second\nline contains a string \n    s\n of length \n    n\n containing only the\ncharacters W and L. If you have won the \n    i\n-th game then \n    s_i=\nW,\nif you have lost the \n    i\n-th game then \n    s_i=\nL. It is guaranteed\nthat the sum of \n    n\n over all testcases does not exceed \n    200,000\n.\nOutput For each testcase, print a single integer \u2013 the maximum score you can\nget by cheating in the optimal way. Example Input 8 5 2 WLWLL 6 5 LLLWWL 7 1\nLWLWLWL 15 5 WWWLLLWWWLLLWWW 40 7 LLWLWLWWWLWLLWLWWWLWLLWLLWLLLLWLLWWWLWWL 1 0\nL 1 1 L 6 1 WLLWLW Output 7 11 6 26 46 0 1 6 Note Explanation of the first\ntestcase. Before changing any outcome, the score is \n    2\n. Indeed, you won\nthe first game, so you got \n    1\n point, and you won also the third, so you\ngot another \n    1\n point (and not \n    2\n because you lost the second game).\nAn optimal way to cheat is to change the outcomes of the second and fourth\ngame. Doing so, you end up winning the first four games (the string of the\noutcomes becomes WWWWL). Hence, the new score is \n    7=1+2+2+2\n: \n    1\n\npoint for the first game and \n    2\n points for the second, third and fourth\ngame. Explanation of the second testcase. Before changing any outcome, the\nscore is \n    3\n. Indeed, you won the fourth game, so you got \n    1\n point,\nand you won also the fifth game, so you got \n    2\n more points (since you won\nalso the previous game). An optimal way to cheat is to change the outcomes of\nthe first, second, third and sixth game. Doing so, you end up winning all\ngames (the string of the outcomes becomes WWWWWW). Hence, the new score is\n\n    11 = 1+2+2+2+2+2\n: \n    1\n point for the first game and \n    2\n points\nfor all the other games.\n\n",
        "cf_contest_id": 1427,
        "cf_index": "B",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8\r\n5 2\r\nWLWLL\r\n6 5\r\nLLLWWL\r\n7 1\r\nLWLWLWL\r\n15 5\r\nWWWLLLWWWLLLWWW\r\n40 7\r\nLLWLWLWWWLWLLWLWWWLWLLWLLWLLLLWLLWWWLWWL\r\n1 0\r\nL\r\n1 1\r\nL\r\n6 1\r\nWLLWLW\r\n",
                "7\r\n11\r\n6\r\n26\r\n46\r\n0\r\n1\r\n6\r\n"
            ]
        ],
        "private_cases": []
    }
]