[
    {
        "name": "Double Profiles",
        "description": "You have been offered a job in a company developing a large social network.\nYour first task is connected with searching profiles that most probably belong\nto the same user. The social network contains n registered profiles, numbered\nfrom 1 to n. Some pairs there are friends (the \"friendship\" relationship is\nmutual, that is, if i is friends with j, then j is also friends with i). Let's\nsay that profiles i and j (i \u2260 j) are doubles, if for any profile k (k \u2260 i, k\n\u2260 j) one of the two statements is true: either k is friends with i and j, or k\nisn't friends with either of them. Also, i and j can be friends or not be\nfriends. Your task is to count the number of different unordered pairs (i, j),\nsuch that the profiles i and j are doubles. Note that the pairs are unordered,\nthat is, pairs (a, b) and (b, a) are considered identical. Input The first\nline contains two space-separated integers n and m (1 \u2264 n \u2264 10^6, 0 \u2264 m \u2264\n10^6), \u2014 the number of profiles and the number of pairs of friends,\ncorrespondingly. Next m lines contains descriptions of pairs of friends in the\nformat \"v u\", where v and u (1 \u2264 v, u \u2264 n, v \u2260 u) are numbers of profiles that\nare friends with each other. It is guaranteed that each unordered pair of\nfriends occurs no more than once and no profile is friends with itself. Output\nPrint the single integer \u2014 the number of unordered pairs of profiles that are\ndoubles. Please do not use the \nintegers in \u0421++. It is preferred to use the \n3 3 1 2 2 3 1 3 Output 3 Input 3 0 Output 3 Input 4 1 1 3 Output 2 Note In the\nfirst and second sample any two profiles are doubles. In the third sample the\ndoubles are pairs of profiles (1, 3) and (2, 4).\n\n",
        "cf_contest_id": 154,
        "cf_index": "C",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "graphs",
            "hashing",
            "sortings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\n1 2\r\n2 3\r\n1 3\r\n",
                "3\r\n"
            ],
            [
                "3 0\r\n",
                "3\r\n"
            ],
            [
                "4 1\r\n1 3\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 0\r\n",
                "0\r\n"
            ],
            [
                "2 0\r\n",
                "1\r\n"
            ],
            [
                "2 1\r\n1 2\r\n",
                "1\r\n"
            ],
            [
                "10 9\r\n8 3\r\n3 1\r\n3 4\r\n4 10\r\n4 7\r\n7 3\r\n8 4\r\n10 3\r\n4 1\r\n",
                "13\r\n"
            ],
            [
                "20 50\r\n2 15\r\n20 1\r\n3 16\r\n3 4\r\n15 4\r\n19 3\r\n11 6\r\n1 15\r\n18 19\r\n12 9\r\n12 16\r\n15 12\r\n2 12\r\n4 12\r\n15 14\r\n14 18\r\n7 11\r\n15 3\r\n6 7\r\n15 20\r\n19 15\r\n16 2\r\n12 3\r\n18 3\r\n19 2\r\n20 16\r\n7 13\r\n2 3\r\n18 16\r\n18 12\r\n14 3\r\n6 13\r\n16 14\r\n19 12\r\n14 9\r\n9 15\r\n12 14\r\n1 16\r\n11 13\r\n19 14\r\n9 19\r\n3 9\r\n14 4\r\n19 16\r\n4 16\r\n16 9\r\n2 14\r\n16 15\r\n4 19\r\n15 18\r\n",
                "26\r\n"
            ],
            [
                "100 50\r\n52 14\r\n73 21\r\n42 58\r\n80 37\r\n92 44\r\n20 52\r\n76 35\r\n14 62\r\n77 59\r\n81 33\r\n85 75\r\n35 5\r\n4 30\r\n82 20\r\n93 25\r\n28 84\r\n35 16\r\n14 85\r\n65 84\r\n5 45\r\n8 79\r\n58 51\r\n57 12\r\n88 69\r\n82 71\r\n43 78\r\n6 20\r\n37 10\r\n98 72\r\n10 77\r\n47 63\r\n39 68\r\n62 30\r\n56 70\r\n61 9\r\n33 24\r\n53 25\r\n34 18\r\n79 3\r\n59 73\r\n52 96\r\n56 74\r\n38 31\r\n9 20\r\n10 85\r\n94 10\r\n27 92\r\n90 95\r\n12 72\r\n56 54\r\n",
                "545\r\n"
            ],
            [
                "1000 0\r\n",
                "499500\r\n"
            ],
            [
                "6666 0\r\n",
                "22214445\r\n"
            ],
            [
                "500000 0\r\n",
                "124999750000\r\n"
            ],
            [
                "1000000 10\r\n812866 512688\r\n465337 450053\r\n35648 527231\r\n937971 160561\r\n467150 1188\r\n83248 388747\r\n608511 71844\r\n447069 373624\r\n802473 300350\r\n63052 903606\r\n",
                "499979500220\r\n"
            ],
            [
                "1000000 0\r\n",
                "499999500000\r\n"
            ],
            [
                "1000000 0\r\n",
                "499999500000\r\n"
            ],
            [
                "1000000 4\r\n1 100\r\n1 200\r\n2 131\r\n2 199\r\n",
                "499993500023\r\n"
            ],
            [
                "1000000 4\r\n3 1\r\n3 100\r\n4 2\r\n4 59\r\n",
                "499993500023\r\n"
            ],
            [
                "1000 2\r\n1 2\r\n257 258\r\n",
                "495512\r\n"
            ]
        ]
    }
]