[
    {
        "name": "Game on Sum (Easy Version)",
        "description": "This is the easy version of the problem. The difference is the constraints on\n\n    n\n, \n    m\n and \n    t\n. You can make hacks only if all versions of the\nproblem are solved. Alice and Bob are given the numbers \n    n\n, \n    m\n and\n\n    k\n, and play a game as follows: The game has a score that Alice tries to\nmaximize, and Bob tries to minimize. The score is initially \n    0\n. The game\nconsists of \n    n\n turns. Each turn, Alice picks a real number from \n    0\n\nto \n    k\n (inclusive) which Bob either adds to or subtracts from the score of\nthe game. But throughout the game, Bob has to choose to add at least \n    m\n\nout of the \n    n\n turns. Bob gets to know which number Alice picked before\ndeciding whether to add or subtract the number from the score, and Alice gets\nto know whether Bob added or subtracted the number for the previous turn\nbefore picking the number for the current turn (except on the first turn since\nthere was no previous turn). If Alice and Bob play optimally, what will the\nfinal score of the game be? Input The first line of the input contains a\nsingle integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of test\ncases. The description of test cases follows. Each test case consists of a\nsingle line containing the three integers, \n    n\n, \n    m\n, and \n    k\n (\n    1\n    \n    \u2264 m \n    \u2264 n \n    \u2264 2000, 0 \n    \u2264 k < 10^9 + 7\n) \u2014 the number of turns,\nhow many of those turns Bob has to add, and the biggest number Alice can\nchoose, respectively. It is guaranteed that the sum of \n    n\n over all test\ncases does not exceed \n    2000\n. Output For each test case output a single\ninteger number \u2014 the score of the optimal game modulo \n    10^9 + 7\n.\nFormally, let \n    M = 10^9 + 7\n. It can be shown that the answer can be\nexpressed as an irreducible fraction \n    p/q\n, where \n    p\n and\n\n    q\n are integers and \n    q \n    \u2261 0 \n    M\n. Output the\ninteger equal to \n    p \n    \u00b7 q^-1\n     M\n. In other words, output such\nan integer \n    x\n that \n    0 \n    \u2264 x < M\n and \n    x \n    \u00b7 q \n    \u2261 p\n    \n    M\n. Example Input 7 3 3 2 2 1 10 6 3 10 6 4 10 100 1 1 4 4 0 69 4\n20 Output 6 5 375000012 500000026 958557139 0 49735962 Note In the first test\ncase, the entire game has \n    3\n turns, and since \n    m = 3\n, Bob has to add\nin each of them. Therefore Alice should pick the biggest number she can, which\nis \n    k = 2\n, every turn. In the third test case, Alice has a strategy to\nguarantee a score of \n    75/8\n    \u2261 375000012 \n    10^9 +\n    7\n. In the fourth test case, Alice has a strategy to guarantee a score of\n\n    45/2\n    \u2261 500000026 \n    10^9 + 7\n.\n\n",
        "cf_contest_id": 1628,
        "cf_index": "D1",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "dp",
            "games",
            "math"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n3 3 2\r\n2 1 10\r\n6 3 10\r\n6 4 10\r\n100 1 1\r\n4 4 0\r\n69 4 20\r\n",
                "6\r\n5\r\n375000012\r\n500000026\r\n958557139\r\n0\r\n49735962\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2000 2000 1000000006\r\n",
                "999998007\r\n"
            ],
            [
                "1\r\n2000 1139 818658270\r\n",
                "523403915\r\n"
            ],
            [
                "2\r\n1398 1034 726329524\r\n602 156 640769482\r\n",
                "656360164\r\n969738279\r\n"
            ],
            [
                "3\r\n763 499 769431935\r\n827 50 784148915\r\n410 241 11071818\r\n",
                "110484376\r\n461261753\r\n447772647\r\n"
            ],
            [
                "4\r\n182 35 698699275\r\n261 76 289531051\r\n426 177 711219530\r\n1131 598 478721433\r\n",
                "261616945\r\n595868694\r\n164718978\r\n495212861\r\n"
            ],
            [
                "5\r\n195 38 344268105\r\n155 39 594828671\r\n607 423 610562547\r\n983 443 383820254\r\n60 48 222143654\r\n",
                "643187245\r\n480784257\r\n82515174\r\n739321531\r\n593390993\r\n"
            ],
            [
                "6\r\n861 440 327769810\r\n63 39 935338598\r\n433 173 900388601\r\n110 99 743886338\r\n516 304 441745288\r\n17 16 787487619\r\n",
                "893768456\r\n944404685\r\n341012571\r\n904298627\r\n766951951\r\n110589769\r\n"
            ],
            [
                "7\r\n44 32 473552784\r\n795 600 637093008\r\n19 19 428016819\r\n659 9 966904935\r\n121 102 174077614\r\n298 203 754133635\r\n64 12 765556850\r\n",
                "828095175\r\n435963037\r\n132319505\r\n807665429\r\n83836393\r\n634834480\r\n529567882\r\n"
            ],
            [
                "8\r\n129 4 864490398\r\n155 114 30883759\r\n59 19 659988243\r\n597 155 970042566\r\n539 153 63181265\r\n172 59 161470966\r\n218 13 232773743\r\n131 18 434282496\r\n",
                "803487778\r\n473945936\r\n150266190\r\n77032922\r\n818879241\r\n988721558\r\n681576673\r\n183058708\r\n"
            ],
            [
                "9\r\n127 109 368656200\r\n176 104 476008649\r\n194 123 707870944\r\n397 189 284626015\r\n116 58 993371714\r\n224 113 575420230\r\n67 44 63993142\r\n337 304 908378823\r\n362 134 733972182\r\n",
                "976777005\r\n294987892\r\n807434195\r\n626232183\r\n970383471\r\n579948867\r\n441504448\r\n552004339\r\n152037367\r\n"
            ],
            [
                "10\r\n74 66 762901908\r\n543 237 181918820\r\n455 298 213830486\r\n54 35 373479158\r\n85 72 98863599\r\n85 72 351650459\r\n106 18 450755091\r\n344 26 748825922\r\n65 48 594595004\r\n189 52 282125334\r\n",
                "271485562\r\n845881147\r\n625043331\r\n624104397\r\n478865056\r\n346406768\r\n733766402\r\n149326158\r\n296003967\r\n345448913\r\n"
            ]
        ]
    }
]