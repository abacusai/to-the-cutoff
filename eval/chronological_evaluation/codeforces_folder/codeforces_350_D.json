[
    {
        "name": "Looking for Owls",
        "description": "Emperor Palpatine loves owls very much. The emperor has some blueprints with\nthe new Death Star, the blueprints contain n distinct segments and m distinct\ncircles. We will consider the segments indexed from 1 to n in some way and the\ncircles \u2014 indexed from 1 to m in some way. Palpatine defines an owl as a set\nof a pair of distinct circles (i, j) (i < j) and one segment k, such that:\ncircles i and j are symmetrical relatively to the straight line containing\nsegment k; circles i and j don't have any common points; circles i and j have\nthe same radius; segment k intersects the segment that connects the centers of\ncircles i and j. Help Palpatine, count the number of distinct owls on the\npicture. Input The first line contains two integers \u2014 n and m (1 \u2264 n \u2264 3\u00b710^5,\n2 \u2264 m \u2264 1500). The next n lines contain four integers each, x1, y1, x2, y2 \u2014\nthe coordinates of the two endpoints of the segment. It's guaranteed that each\nsegment has positive length. The next m lines contain three integers each, xi,\nyi, ri \u2014 the coordinates of the center and the radius of the i-th circle. All\ncoordinates are integers of at most 10^4 in their absolute value. The radius\nis a positive integer of at most 10^4. It is guaranteed that all segments and\nall circles are dictinct. Output Print a single number \u2014 the answer to the\nproblem. Please, do not use the \n\u0421++. It is preferred to use the cout stream or the \nInput 1 2 3 2 3 -2 0 0 2 6 0 2 Output 1 Input 3 2 0 0 0 1 0 -1 0 1 0 -1 0 0 2\n0 1 -2 0 1 Output 3 Input 1 2 -1 0 1 0 -100 0 1 100 0 1 Output 0 Note Here's\nan owl from the first sample. The owl is sitting and waiting for you to count\nit.\n\n",
        "cf_contest_id": 350,
        "cf_index": "D",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "geometry",
            "hashing",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1 2\r\n3 2 3 -2\r\n0 0 2\r\n6 0 2\r\n",
                "1\r\n"
            ],
            [
                "3 2\r\n0 0 0 1\r\n0 -1 0 1\r\n0 -1 0 0\r\n2 0 1\r\n-2 0 1\r\n",
                "3\r\n"
            ],
            [
                "1 2\r\n-1 0 1 0\r\n-100 0 1\r\n100 0 1\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "6 3\r\n-68 -85 -31 -16\r\n-68 -85 6 53\r\n-68 -85 43 122\r\n-31 -16 6 53\r\n-31 -16 43 122\r\n6 53 43 122\r\n-137 -48 1\r\n-68 -85 1\r\n1 -122 1\r\n",
                "3\r\n"
            ],
            [
                "6 16\r\n-8963 0 -4686 0\r\n-6865 0 3048 0\r\n-6331 0 738 0\r\n-6264 0 -4674 0\r\n-6093 0 2185 0\r\n-4851 0 440 0\r\n-5934 -7827 2378\r\n-5934 7827 2378\r\n-2442 -8622 4429\r\n-2442 8622 4429\r\n1954 -9141 3758\r\n1954 9141 3758\r\n4317 -2561 171\r\n4317 2561 171\r\n5657 -1333 199\r\n5657 1333 199\r\n6384 -1831 310\r\n6384 1831 310\r\n7349 -1300 1002\r\n7349 1300 1002\r\n9164 -6926 3581\r\n9164 6926 3581\r\n",
                "11\r\n"
            ],
            [
                "4 10\r\n-8631 0 2233 0\r\n-8099 0 -451 0\r\n-6274 0 31 0\r\n-3604 0 8763 0\r\n-6515 -6559 2289\r\n-6515 6559 2289\r\n-3942 -2032 966\r\n-3942 2032 966\r\n-3885 -8951 7726\r\n-3885 8951 7726\r\n1934 -2861 324\r\n1934 2861 324\r\n2605 -167 93\r\n2605 167 93\r\n",
                "11\r\n"
            ]
        ]
    }
]