[
    {
        "name": "Phoenix and Distribution",
        "description": "Phoenix has a string \n    s\n consisting of lowercase Latin letters. He wants\nto distribute all the letters of his string into \n    k\n non-empty strings\n\n    a_1, a_2, \n    \u2026, a_k\n such that every letter of \n    s\n goes to exactly\none of the strings \n    a_i\n. The strings \n    a_i\n do not need to be\nsubstrings of \n    s\n. Phoenix can distribute letters of \n    s\n and rearrange\nthe letters within each string \n    a_i\n however he wants. For example, if\n\n    s =\n baba and \n    k=2\n, Phoenix may distribute the letters of his\nstring in many ways, such as: ba and ba a and abb ab and ab aa and bb But\nthese ways are invalid: baa and ba b and ba baba and empty string (\n    a_i\n\nshould be non-empty) Phoenix wants to distribute the letters of his string\n\n    s\n into \n    k\n strings \n    a_1, a_2, \n    \u2026, a_k\n to minimize the\nlexicographically maximum string among them, i. e. minimize \n    max(a_1, a_2,\n    \n    \u2026, a_k)\n. Help him find the optimal distribution and print the minimal\npossible value of \n    max(a_1, a_2, \n    \u2026, a_k)\n. String \n    x\n is\nlexicographically less than string \n    y\n if either \n    x\n is a prefix of\n\n    y\n and \n    x \n     y\n, or there exists an index \n    i\n (\n    1 \n    \u2264 i\n    \n    \u2264 min(|x|, |y|))\n such that \n    x_i\n < \n    y_i\n and for every \n    j\n\n\n    (1 \n    \u2264 j < i)\n \n    x_j = y_j\n. Here \n    |x|\n denotes the length of\nthe string \n    x\n. Input The input consists of multiple test cases. The first\nline contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of\ntest cases. Each test case consists of two lines. The first line of each test\ncase consists of two integers \n    n\n and \n    k\n (\n    1 \n    \u2264 k \n    \u2264 n \n    \u2264\n    10^5\n) \u2014 the length of string \n    s\n and the number of non-empty strings,\ninto which Phoenix wants to distribute letters of \n    s\n, respectively. The\nsecond line of each test case contains a string \n    s\n of length \n    n\n\nconsisting only of lowercase Latin letters. It is guaranteed that the sum of\n\n    n\n over all test cases is \n    \u2264 10^5\n. Output Print \n    t\n answers\n\u2014 one per test case. The \n    i\n-th answer should be the minimal possible\nvalue of \n    max(a_1, a_2, \n    \u2026, a_k)\n in the \n    i\n-th test case.\nExample Input 6 4 2 baba 5 2 baacb 5 3 baacb 5 3 aaaaa 6 4 aaxxzz 7 1 phoenix\nOutput ab abbc b aa x ehinopx Note In the first test case, one optimal\nsolution is to distribute baba into ab and ab. In the second test case, one\noptimal solution is to distribute baacb into abbc and a. In the third test\ncase, one optimal solution is to distribute baacb into ac, ab, and b. In the\nfourth test case, one optimal solution is to distribute aaaaa into aa, aa, and\na. In the fifth test case, one optimal solution is to distribute aaxxzz into\naz, az, x, and x. In the sixth test case, one optimal solution is to\ndistribute phoenix into ehinopx.\n\n",
        "cf_contest_id": 1348,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "sortings",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n4 2\r\nbaba\r\n5 2\r\nbaacb\r\n5 3\r\nbaacb\r\n5 3\r\naaaaa\r\n6 4\r\naaxxzz\r\n7 1\r\nphoenix\r\n",
                "ab\r\nabbc\r\nb\r\naa\r\nx\r\nehinopx\r\n"
            ]
        ],
        "private_cases": [
            [
                "9\r\n8 2\r\nchefspam\r\n11 7\r\nmonkeyeight\r\n8 2\r\nvcubingx\r\n6 1\r\namazed\r\n4 4\r\nhebs\r\n8 1\r\narolakiv\r\n9 7\r\nhidavidhu\r\n33 33\r\ngosubtovcubingxheneedssubscribers\r\n7 4\r\nhiimbad\r\n",
                "c\r\nm\r\nc\r\naademz\r\ns\r\naaiklorv\r\ni\r\nx\r\nh\r\n"
            ]
        ]
    }
]