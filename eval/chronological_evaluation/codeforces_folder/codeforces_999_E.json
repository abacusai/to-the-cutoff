[
    {
        "name": "Reachability from the Capital",
        "description": "There are \n    n\n cities and \n    m\n roads in Berland. Each road connects a\npair of cities. The roads in Berland are one-way. What is the minimum number\nof new roads that need to be built to make all the cities reachable from the\ncapital? New roads will also be one-way. Input The first line of input\nconsists of three integers \n    n\n, \n    m\n and \n    s\n (\n    1 \n    \u2264 n \n    \u2264\n    5000, 0 \n    \u2264 m \n    \u2264 5000, 1 \n    \u2264 s \n    \u2264 n\n) \u2014 the number of cities, the\nnumber of roads and the index of the capital. Cities are indexed from \n    1\n\nto \n    n\n. The following \n    m\n lines contain roads: road \n    i\n is given\nas a pair of cities \n    u_i\n, \n    v_i\n (\n    1 \n    \u2264 u_i, v_i \n    \u2264 n\n,\n\n    u_i \n     v_i\n). For each pair of cities \n    (u, v)\n, there can be at\nmost one road from \n    u\n to \n    v\n. Roads in opposite directions between a\npair of cities are allowed (i.e. from \n    u\n to \n    v\n and from \n    v\n to\n\n    u\n). Output Print one integer \u2014 the minimum number of extra roads needed\nto make all the cities reachable from city \n    s\n. If all the cities are\nalready reachable from \n    s\n, print 0. Examples Input 9 9 1 1 2 1 3 2 3 1 5\n5 6 6 1 1 8 9 8 7 1 Output 3 Input 5 4 5 1 2 2 3 3 4 4 1 Output 1 Note The\nfirst example is illustrated by the following: For example, you can add roads\n(\n    6, 4\n), (\n    7, 9\n), (\n    1, 7\n) to make all the cities reachable from\n\n    s = 1\n. The second example is illustrated by the following: In this\nexample, you can add any one of the roads (\n    5, 1\n), (\n    5, 2\n), (\n    5,\n    3\n), (\n    5, 4\n) to make all the cities reachable from \n    s = 5\n.\n\n",
        "cf_contest_id": 999,
        "cf_index": "E",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graphs",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "9 9 1\r\n1 2\r\n1 3\r\n2 3\r\n1 5\r\n5 6\r\n6 1\r\n1 8\r\n9 8\r\n7 1\r\n",
                "3"
            ],
            [
                "5 4 5\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n",
                "1"
            ]
        ],
        "private_cases": [
            [
                "5000 0 2956\r\n",
                "4999"
            ],
            [
                "2 0 2\r\n",
                "1"
            ],
            [
                "2 1 1\r\n1 2\r\n",
                "0"
            ],
            [
                "2 1 2\r\n1 2\r\n",
                "1"
            ],
            [
                "2 2 2\r\n1 2\r\n2 1\r\n",
                "0"
            ],
            [
                "5000 2 238\r\n3212 238\r\n238 3212\r\n",
                "4998"
            ],
            [
                "5000 2 3810\r\n3225 1137\r\n1137 3225\r\n",
                "4998"
            ],
            [
                "100 1 30\r\n69 81\r\n",
                "98"
            ],
            [
                "500 1 209\r\n183 107\r\n",
                "498"
            ],
            [
                "1000 1 712\r\n542 916\r\n",
                "998"
            ],
            [
                "39 40 38\r\n4 8\r\n24 28\r\n16 17\r\n7 25\r\n4 29\r\n34 35\r\n16 24\r\n21 10\r\n23 36\r\n36 14\r\n28 16\r\n34 19\r\n15 21\r\n22 38\r\n22 37\r\n37 27\r\n28 33\r\n3 29\r\n32 22\r\n12 30\r\n9 15\r\n5 19\r\n23 27\r\n19 17\r\n25 17\r\n24 11\r\n39 10\r\n6 20\r\n16 6\r\n3 18\r\n34 21\r\n15 38\r\n11 19\r\n11 3\r\n32 4\r\n15 13\r\n16 11\r\n11 7\r\n33 7\r\n3 33\r\n",
                "12"
            ],
            [
                "8 8 1\r\n3 2\r\n3 4\r\n4 5\r\n5 3\r\n6 4\r\n6 7\r\n7 8\r\n8 6\r\n",
                "1"
            ],
            [
                "7 7 1\r\n2 3\r\n4 2\r\n7 4\r\n5 7\r\n4 5\r\n4 6\r\n6 4\r\n",
                "1"
            ],
            [
                "2333 1 1\r\n1 2\r\n",
                "2331"
            ],
            [
                "7 4 2\r\n1 2\r\n3 4\r\n5 6\r\n7 1\r\n",
                "3"
            ],
            [
                "1 0 1\r\n",
                "0"
            ],
            [
                "9 9 1\r\n2 3\r\n3 4\r\n4 5\r\n6 2\r\n7 6\r\n8 7\r\n6 8\r\n5 9\r\n9 2\r\n",
                "1"
            ],
            [
                "30 30 29\r\n29 9\r\n1 3\r\n15 5\r\n14 24\r\n7 18\r\n17 12\r\n5 9\r\n22 7\r\n26 20\r\n7 29\r\n8 2\r\n10 12\r\n17 18\r\n17 24\r\n8 12\r\n23 28\r\n10 15\r\n18 2\r\n29 13\r\n25 29\r\n9 2\r\n7 13\r\n11 5\r\n19 26\r\n10 5\r\n25 5\r\n20 10\r\n5 26\r\n24 23\r\n22 8\r\n",
                "13"
            ],
            [
                "30 30 28\r\n16 28\r\n5 30\r\n7 17\r\n6 1\r\n12 28\r\n15 28\r\n14 30\r\n25 11\r\n25 10\r\n25 8\r\n12 30\r\n27 5\r\n30 10\r\n22 14\r\n30 13\r\n20 27\r\n15 25\r\n24 20\r\n20 15\r\n1 30\r\n3 10\r\n3 4\r\n3 18\r\n15 14\r\n18 22\r\n20 26\r\n10 3\r\n15 27\r\n23 29\r\n10 24\r\n",
                "9"
            ]
        ]
    }
]