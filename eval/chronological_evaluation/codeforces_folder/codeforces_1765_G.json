[
    {
        "name": "Guess the String",
        "description": "This is an interactive problem. You have to use flush operation right after\nprinting each line. For example, in C++ you should use the function\nfflush(stdout), in Java or Kotlin \u2014 System.out.flush(), and in Python \u2014\nsys.stdout.flush(). The jury has a string \n    s\n consisting of characters 0\nand/or 1. The first character of this string is 0. The length of this string\nis \n    n\n. You have to guess this string. Let's denote \n    s[l..r]\n as the\nsubstring of \n    s\n from \n    l\n to \n    r\n (i. e. \n    s[l..r]\n is the\nstring \n    s_ls_l+1\n    \u2026 s_r\n). Let the prefix function of the string\n\n    s\n be an array \n    [p_1, p_2, \n    \u2026, p_n]\n, where \n    p_i\n is the\ngreatest integer \n    j \n    \u2208 [0, i-1]\n such that \n    s[1..j] = s[i-j+1..i]\n.\nAlso, let the antiprefix function of the string \n    s\n be an array \n    [q_1,\n    q_2, \n    \u2026, q_n]\n, where \n    q_i\n is the greatest integer \n    j \n    \u2208 [0,\n    i-1]\n such that \n    s[1..j]\n differs from \n    s[i-j+1..i]\n in every\nposition. For example, for the string 011001, its prefix function is \n    [0, 0,\n    0, 1, 1, 2]\n, and its antiprefix function is \n    [0, 1, 1, 2, 3, 4]\n. You\ncan ask queries of two types to guess the string \n    s\n: \n    1\n \n    i\n \u2014\n\"what is the value of \n    p_i\n?\"; \n    2\n \n    i\n \u2014 \"what is the value of\n\n    q_i\n?\". You have to guess the string by asking no more than \n    789\n\nqueries. Note that giving the answer does not count as a query. In every test\nand in every test case, the string \n    s\n is fixed beforehand. Interaction\nInitially, the jury program sends one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    100\n) \u2014 the number of test cases. At the start of each test case, the jury\nprogram sends one integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 1000\n) \u2014 the length of\nthe string. After that, your program can submit queries to the jury program by\nprinting one of the following lines (do not forget to flush the output after\nprinting a line!): \n    1\n \n    i\n \u2014 the query \"what is the value of\n\n    p_i\n?\"; \n    2\n \n    i\n \u2014 the query \"what is the value of \n    q_i\n?\".\nFor every query, the jury prints one integer on a separate line. It is either:\nthe answer for your query, if the query is correct and you haven't exceeded\nthe query limit; or the integer \n    -1\n, if your query is incorrect (for\nexample, the constraint \n    1 \n    \u2264 i \n    \u2264 n\n is not met) or if you have\nasked too many queries while processing the current test case. To submit the\nanswer, your program should send a line in the following format (do not forget\nto flush the output after printing a line!): \n    0\n \n    s\n, where \n    s\n is\na sequence of \n    n\n characters 0 and/or 1. If your guess is correct, the\njury program will print one integer \n    1\n on a separate line, indicating\nthat you may proceed to the next test case (or terminate the program, if it\nwas the last test case) and that the number of queries you have asked is\nreset. If it is not correct, the jury program will print one integer \n    -1\n\non a separate line. After your program receives \n    -1\n as the answer, it\nshould immediately terminate. This will lead to your submission receiving the\nverdict \"Wrong Answer\". If your program does not terminate, the verdict of\nyour submission is undefined. Example Input 2 // 2 test cases 6 // n = 6 0 //\np[3] = 0 1 // q[2] = 1 4 // q[6] = 4 1 // p[4] = 1 1 // answer is correct 5 //\nn = 5 1 // p[2] = 1 2 // q[4] = 2 2 // q[5] = 2 1 // answer is correct Output\n1 3 // what is p[3]? 2 2 // what is q[2]? 2 6 // what is q[6]? 1 4 // what is\np[4]? 0 011001 // the guess is 011001 1 2 // what is p[2]? 2 4 // what is\nq[4]? 2 5 // what is q[5]? 0 00111 // the guess is 00111 Note The example\ncontains one possible way of interaction in a test where \n    t = 2\n, and the\nstrings guessed by the jury are 011001 and 00111. Note that everything after\nthe // sign is a comment that explains which line means what in the\ninteraction. The jury program won't print these comments in the actual\nproblem, and you shouldn't print them. The empty lines are also added for your\nconvenience, the jury program won't print them, and your solution should not\nprint any empty lines.\n\n",
        "cf_contest_id": 1765,
        "cf_index": "G",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "interactive",
            "probabilities"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "2\r\n6\r\n011001\r\n5\r\n00111\r\n",
                "1\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]