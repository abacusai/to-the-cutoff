[
    {
        "name": "Italian Data Centers",
        "description": "An Italian data center consists of a set of servers, each colored green,\nwhite, or red, and a set of wires connecting them. Each wire connects two\ndistinct servers and two servers are connected by at most one wire.\nAdditionally, the data center is connected, i.e. there is a way to transmit\ninformation between any two servers through a sequence of wires. To judge all\nof the contestant submissions, SWERC has an Italian data center. Since every\nyear the number of contestants doubles, the data center needs to grow to adapt\nto the extra load. To address this, SWERC builds a new data center based on\nthe previous year's one by following these steps: For each server \n    s\n in\nthe old data center, the new data center contains two servers \n    s_1\n and\n\n    s_2\n of the same color as \n    s\n. A wire is placed connecting the two\nservers \n    s_1\n and \n    s_2\n. For each wire connecting servers \n    s\n and\n\n    t\n in the old data center: if \n    s\n and \n    t\n have the same color,\nthen a wire is placed in the new data center connecting \n    s_1\n and\n\n    t_1\n and another wire connecting \n    s_2\n and \n    t_2\n; otherwise, a\nwire is placed in the new data center connecting \n    s_1\n and \n    t_2\n and\nanother one connecting \n    s_2\n and \n    t_1\n. One can show that if the old\ndata center is connected than the new data center is also connected. You are\ngiven the Italian data center that SWERC currently has, which contains \n    n\n\nservers (indexed by \n    1, \n      2, \n     \n    \u2026, \n      n\n) and \n    m\n wires\nconnecting them. The organization wants to know how good their data center\nwill be after \n    k\n years, so you should determine the diameter of the data\ncenter SWERC will have in \n    k\n years. The diameter of the data center is\nthe largest distance between any two servers, i.e. the shortest number of\nwires that have to be used to transmit something between the two servers.\nInput The first line contains three integers \n    n\n, \n    m\n and \n    k\n\n(\n    2 \n    \u2264 n \n    \u2264 100\n, \n    n - 1 \n    \u2264 m \n    \u2264 n (n - 1) / 2\n, \n    0\n    \n    \u2264 k \n    \u2264 100\n) \u2014 the number of servers, the number of wires, and the\nnumber of years to consider. The second line contains \n    n\n integers \n    c_1,\n    \n      c_2, \n     \n    \u2026, \n      c_n\n (\n    1 \n    \u2264 c_i \n    \u2264 3\n) \u2014 \n    c_i\n\nis the color of server \n    i\n (where \n    1\n stands for green, \n    2\n for\nwhite and \n    3\n for red). Each of the next \n    m\n lines contains two\nintegers \n    s_i\n and \n    t_i\n (\n    1 \n    \u2264 s_i, t_i \n    \u2264 n\n) \u2014 the two\nservers the \n    i\n-th wire connects. It is guaranteed that the data center is\nconnected, the endpoints of each wire are distinct, and that there are no\nrepeated wires. Output Print the diameter of SWERC's data center after \n    k\n\nyears. Examples Input 3 3 0 1 2 3 1 2 2 3 3 1 Output 1 Input 3 3 1 1 2 3 1 2 2\n3 3 1 Output 2 Input 3 3 2 1 2 1 1 2 2 3 3 1 Output 3 Input 8 14 100 3 3 2 2 1\n2 2 1 2 7 1 5 7 8 4 6 2 8 1 8 2 6 6 7 1 6 1 4 3 5 1 3 4 5 5 7 Output 53 Note\nIn the first sample, the Italian data center is the following: The distance\nbetween any pair of servers is \n    1\n so the diameter is \n    1\n. In the\nsecond sample, the initial Italian data center is the one from the first\nsample. After one year we obtain the following (where the numbers indicate\nwhich copy the server refers to): Consider the highlighted servers. The\ndistance between them is \n    2\n and there is no pair of servers with greater\ndistance, so the diameter is \n    2\n. In the third sample, the data center\nafter one year is the following: After one more year: Consider the highlighted\nservers. The distance between them is \n    3\n and there is no pair of servers\nwith greater distance, so the diameter is \n    3\n.\n\n",
        "cf_contest_id": 1776,
        "cf_index": "J",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "graphs",
            "shortest paths"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3 0\r\n1 2 3\r\n1 2\r\n2 3\r\n3 1\r\n",
                "1\r\n"
            ],
            [
                "3 3 1\r\n1 2 3\r\n1 2\r\n2 3\r\n3 1\r\n",
                "2\r\n"
            ],
            [
                "3 3 2\r\n1 2 1\r\n1 2\r\n2 3\r\n3 1\r\n",
                "3\r\n"
            ],
            [
                "8 14 100\r\n3 3 2 2 1 2 2 1\r\n2 7\r\n1 5\r\n7 8\r\n4 6\r\n2 8\r\n1 8\r\n2 6\r\n6 7\r\n1 6\r\n1 4\r\n3 5\r\n1 3\r\n4 5\r\n5 7\r\n",
                "53\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1 0\r\n2 1\r\n1 2\r\n",
                "1\r\n"
            ],
            [
                "2 1 1\r\n3 2\r\n1 2\r\n",
                "2\r\n"
            ],
            [
                "3 2 0\r\n1 1 3\r\n1 2\r\n1 3\r\n",
                "2\r\n"
            ],
            [
                "3 2 1\r\n2 1 3\r\n2 3\r\n1 3\r\n",
                "3\r\n"
            ],
            [
                "3 3 2\r\n2 2 3\r\n3 2\r\n2 1\r\n3 1\r\n",
                "3\r\n"
            ],
            [
                "3 3 4\r\n2 1 3\r\n3 1\r\n3 2\r\n2 1\r\n",
                "3\r\n"
            ],
            [
                "40 50 2\r\n3 1 1 2 1 2 1 2 2 2 1 3 2 3 2 3 3 2 3 1 2 1 2 1 1 3 2 2 1 2 1 1 3 2 2 3 1 3 1 2\r\n36 14\r\n14 35\r\n37 12\r\n15 21\r\n2 1\r\n39 5\r\n28 35\r\n32 40\r\n6 13\r\n4 24\r\n11 26\r\n30 31\r\n20 22\r\n3 27\r\n40 19\r\n34 29\r\n8 21\r\n38 12\r\n38 7\r\n23 29\r\n26 18\r\n4 6\r\n17 22\r\n12 10\r\n38 10\r\n19 14\r\n17 28\r\n27 7\r\n11 8\r\n34 20\r\n25 37\r\n2 34\r\n24 18\r\n16 25\r\n16 2\r\n5 30\r\n13 33\r\n24 36\r\n24 8\r\n25 39\r\n18 3\r\n15 14\r\n31 23\r\n26 9\r\n33 9\r\n3 5\r\n39 20\r\n35 16\r\n4 11\r\n36 32\r\n",
                "11\r\n"
            ],
            [
                "13 14 0\r\n1 1 1 1 1 1 1 1 1 1 3 3 1\r\n7 8\r\n5 6\r\n2 12\r\n4 5\r\n6 7\r\n3 4\r\n1 13\r\n1 3\r\n11 12\r\n8 9\r\n1 11\r\n9 10\r\n2 10\r\n2 13\r\n",
                "6\r\n"
            ],
            [
                "13 14 3\r\n1 1 1 1 1 1 2 1 3 3 1 2 3\r\n11 12\r\n12 13\r\n9 10\r\n1 7\r\n2 10\r\n2 13\r\n3 4\r\n2 6\r\n8 9\r\n5 6\r\n4 5\r\n7 8\r\n1 11\r\n1 3\r\n",
                "8\r\n"
            ],
            [
                "13 14 6\r\n1 1 1 2 2 1 2 1 1 1 1 3 1\r\n9 10\r\n7 8\r\n6 7\r\n10 11\r\n1 3\r\n8 9\r\n1 13\r\n4 5\r\n2 12\r\n2 3\r\n11 12\r\n2 13\r\n5 6\r\n1 4\r\n",
                "12\r\n"
            ],
            [
                "13 14 50\r\n1 1 1 1 3 1 2 1 2 3 1 3 1\r\n2 4\r\n10 11\r\n8 9\r\n3 4\r\n9 10\r\n7 8\r\n1 5\r\n11 12\r\n5 6\r\n1 3\r\n6 7\r\n2 13\r\n2 12\r\n1 13\r\n",
                "31\r\n"
            ],
            [
                "13 14 75\r\n1 1 1 2 1 1 2 3 1 2 3 1 2\r\n8 9\r\n4 5\r\n2 13\r\n10 11\r\n1 4\r\n9 10\r\n6 7\r\n11 12\r\n7 8\r\n2 5\r\n12 13\r\n1 6\r\n2 3\r\n1 3\r\n",
                "81\r\n"
            ],
            [
                "13 14 100\r\n1 1 1 1 1 1 1 1 1 1 1 2 3\r\n2 8\r\n1 9\r\n5 6\r\n6 7\r\n3 4\r\n7 8\r\n1 3\r\n12 13\r\n2 13\r\n1 11\r\n2 10\r\n4 5\r\n11 12\r\n9 10\r\n",
                "56\r\n"
            ]
        ]
    }
]