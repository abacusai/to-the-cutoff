[
    {
        "name": "Doors Breaking and Repairing",
        "description": "You are policeman and you are playing a game with Slavik. The game is turn-\nbased and each turn consists of two phases. During the first phase you make\nyour move and during the second phase Slavik makes his move. There are \n    n\n\ndoors, the \n    i\n-th door initially has durability equal to \n    a_i\n. During\nyour move you can try to break one of the doors. If you choose door \n    i\n\nand its current durability is \n    b_i\n then you reduce its durability to\n\n    max(0, b_i - x)\n (the value \n    x\n is given). During Slavik's move he\ntries to repair one of the doors. If he chooses door \n    i\n and its current\ndurability is \n    b_i\n then he increases its durability to \n    b_i + y\n (the\nvalue \n    y\n is given). Slavik cannot repair doors with current durability\nequal to \n    0\n. The game lasts \n    10^100\n turns. If some player cannot\nmake his move then he has to skip it. Your goal is to maximize the number of\ndoors with durability equal to \n    0\n at the end of the game. You can assume\nthat Slavik wants to minimize the number of such doors. What is the number of\nsuch doors in the end if you both play optimally? Input The first line of the\ninput contains three integers \n    n\n, \n    x\n and \n    y\n (\n    1 \n    \u2264 n \n    \u2264\n    100\n, \n    1 \n    \u2264 x, y \n    \u2264 10^5\n) \u2014 the number of doors, value \n    x\n\nand value \n    y\n, respectively. The second line of the input contains \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^5\n), where\n\n    a_i\n is the initial durability of the \n    i\n-th door. Output Print one\ninteger \u2014 the number of doors with durability equal to \n    0\n at the end of\nthe game, if you and Slavik both play optimally. Examples Input 6 3 2 2 3 1 3\n4 2 Output 6 Input 5 3 3 1 2 4 2 3 Output 2 Input 5 5 6 1 2 6 10 3 Output 2\nNote Clarifications about the optimal strategy will be ignored.\n\n",
        "cf_contest_id": 1102,
        "cf_index": "C",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "games"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 3 2\r\n2 3 1 3 4 2\r\n",
                "6\r\n"
            ],
            [
                "5 3 3\r\n1 2 4 2 3\r\n",
                "2\r\n"
            ],
            [
                "5 5 6\r\n1 2 6 10 3\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "100 2 1\r\n2 1 2 2 2 2 1 1 2 1 2 2 2 1 2 2 1 1 2 1 1 1 1 1 2 1 1 2 2 2 2 1 1 2 1 1 1 1 2 2 1 1 2 1 1 1 1 1 2 1 1 2 1 1 1 1 1 2 1 1 2 2 2 1 2 1 2 1 2 1 2 1 1 2 1 1 1 2 2 2 2 2 1 1 1 2 1 2 1 1 2 2 1 1 2 1 1 2 2 2\r\n",
                "100\r\n"
            ],
            [
                "100 1 2\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "50\r\n"
            ],
            [
                "100 2 2\r\n1 73456 13268 11914 2 1 2 1 1 2 1 1 87480 65464 2 40468 7016 70750 28675 92808 74100 22702 47484 22345 61255 1 93900 62017 89058 61094 76626 1 87221 98876 97451 18228 2 2 1 38979 1 76284 1 43289 73591 2 1 91061 89577 19767 1 2 2 57020 2 82044 24974 1 1 958 8399 1 98709 7661 1 66150 2 79527 2 2 36570 2 36184 49694 10684 1 58367 1 4764 1 69648 27938 30022 81474 40472 3180 58977 12594 25682 75280 22585 35248 1 2 10355 1 64044 1 2 92565\r\n",
                "20\r\n"
            ],
            [
                "100 2 3\r\n2 1 2 6122 1 2 71284 6042 2 1 50670 1 1 1 2 4334 95254 1 12952 42027 2 2 41291 2 2639 1 2 53081 97236 2 99607 18546 1 41492 2 5898 1 75708 65710 1 22220 2 81641 94567 54243 77576 49899 52969 5758 61800 79653 8181 2 29282 2 70781 12715 24342 5490 93616 46453 2 72229 75435 20987 5552 52391 87390 2 2 1 50777 12773 34319 44711 91385 40959 1 22832 1 1 2 2 1 19216 47343 18088 1 2 1 1 2 16852 68299 2 34066 91794 3912 2 45868\r\n",
                "21\r\n"
            ],
            [
                "1 1 1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "1 2 3\r\n3\r\n",
                "0\r\n"
            ],
            [
                "69 2 3\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "35\r\n"
            ]
        ]
    }
]