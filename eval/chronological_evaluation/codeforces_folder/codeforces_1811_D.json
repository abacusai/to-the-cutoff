[
    {
        "name": "Umka and a Long Flight",
        "description": "The girl Umka loves to travel and participate in math olympiads. One day she\nwas flying by plane to the next olympiad and out of boredom explored a huge\ncheckered sheet of paper. Denote the \n    n\n-th Fibonacci number as \n    F_n =\n    \n     1,     n = 0; \n    \n    \n     1,     n = 1; \n    \n    \n     F_n-2 + F_n-1,     n\n    \n    \u2265 2.\n A checkered rectangle with a height of \n    F_n\n and\na width of \n    F_n+1\n is called a Fibonacci rectangle of order \n    n\n.\nUmka has a Fibonacci rectangle of order \n    n\n. Someone colored a cell in it\nat the intersection of the row \n    x\n and the column \n    y\n. It is necessary\nto cut this rectangle exactly into \n    n+1\n squares in such way that the\npainted cell was in a square with a side of \n    1\n; there was at most one\npair of squares with equal sides; the side of each square was equal to a\nFibonacci number. Will Umka be able to cut this rectangle in that way? Input\nThe first line contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 2 \n    \u00b7\n    10^5\n) \u2014 number of test cases. For each test case the integers \n    n\n,\n\n    x\n, \n    y\n are given (\n    1 \n    \u2264 n \n    \u2264 44\n, \n    1 \n    \u2264 x \n    \u2264\n    F_n\n, \n    1 \n    \u2264 y \n    \u2264 F_n+1\n) \u2014 the order of the Fibonacci rectangle\nand the coordinates of the colored cell. Output For each test case, print\n\"YES\" if the answer is positive, and \"NO\" otherwise. You can print \"YES\" and\n\"NO\" in any case (for example, the strings \"yEs\", \"yes\" and \"Yes\" will be\nrecognized as a positive answer). Example Input 12 1 1 1 2 1 2 3 1 4 3 3 2 4 4\n6 4 3 3 5 6 5 5 4 12 5 2 12 4 2 1 1 1 2 44 758465880 1277583853 Output YES NO\nYES YES YES NO YES NO NO YES YES NO Note The first, third and fourth test\ncases.\n\n",
        "cf_contest_id": 1811,
        "cf_index": "D",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "12\r\n1 1 1\r\n2 1 2\r\n3 1 4\r\n3 3 2\r\n4 4 6\r\n4 3 3\r\n5 6 5\r\n5 4 12\r\n5 2 12\r\n4 2 1\r\n1 1 2\r\n44 758465880 1277583853\r\n",
                "YES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "19\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\n"
            ]
        ]
    }
]