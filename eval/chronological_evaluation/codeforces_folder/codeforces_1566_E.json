[
    {
        "name": "Buds Re-hanging",
        "description": "A tree is a connected graph without cycles. A rooted tree has a special vertex\ncalled the root. The parent of a vertex \n    v\n (different from root) is the\nprevious to \n    v\n vertex on the shortest path from the root to the vertex\n\n    v\n. Children of the vertex \n    v\n are all vertices for which \n    v\n is\nthe parent. A vertex is a leaf if it has no children. We call a vertex a bud,\nif the following three conditions are satisfied: it is not a root, it has at\nleast one child, and all its children are leaves. You are given a rooted tree\nwith \n    n\n vertices. The vertex \n    1\n is the root. In one operation you\ncan choose any bud with all its children (they are leaves) and re-hang them to\nany other vertex of the tree. By doing that you delete the edge connecting the\nbud and its parent and add an edge between the bud and the chosen vertex of\nthe tree. The chosen vertex cannot be the bud itself or any of its children.\nAll children of the bud stay connected to the bud. What is the minimum number\nof leaves it is possible to get if you can make any number of the above-\nmentioned operations (possibly zero)? Input The input consists of multiple\ntest cases. The first line contains a single integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 10^4\n) \u2014 the number of test cases. Description of the test cases\nfollows. The first line of each test case contains a single integer \n    n\n\n(\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of the vertices in the\ngiven tree. Each of the next \n    n-1\n lines contains two integers \n    u\n and\n\n    v\n (\n    1 \n    \u2264 u, v \n    \u2264 n\n, \n    u \n    \u2260 v\n) meaning that there is\nan edge between vertices \n    u\n and \n    v\n in the tree. It is guaranteed\nthat the given graph is a tree. It is guaranteed that the sum of \n    n\n over\nall test cases doesn't exceed \n    2 \n    \u00b7 10^5\n. Output For each test case\nprint a single integer \u2014 the minimal number of leaves that is possible to get\nafter some operations. Example Input 5 7 1 2 1 3 1 4 2 5 2 6 4 7 6 1 2 1 3 2 4\n2 5 3 6 2 1 2 7 7 3 1 5 1 3 4 6 4 7 2 1 6 2 1 2 3 4 5 3 4 3 6 Output 2 2 1 2 1\nNote In the first test case the tree looks as follows: Firstly you can choose\na bud vertex \n    4\n and re-hang it to vertex \n    3\n. After that you can\nchoose a bud vertex \n    2\n and re-hang it to vertex \n    7\n. As a result, you\nwill have the following tree with \n    2\n leaves: It can be proved that it is\nthe minimal number of leaves possible to get. In the second test case the tree\nlooks as follows: You can choose a bud vertex \n    3\n and re-hang it to vertex\n\n    5\n. As a result, you will have the following tree with \n    2\n leaves: It\ncan be proved that it is the minimal number of leaves possible to get.\n\n",
        "cf_contest_id": 1566,
        "cf_index": "E",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n7\r\n1 2\r\n1 3\r\n1 4\r\n2 5\r\n2 6\r\n4 7\r\n6\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n2\r\n1 2\r\n7\r\n7 3\r\n1 5\r\n1 3\r\n4 6\r\n4 7\r\n2 1\r\n6\r\n2 1\r\n2 3\r\n4 5\r\n3 4\r\n3 6\r\n",
                "2\r\n2\r\n1\r\n2\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]