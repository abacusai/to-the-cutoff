[
    {
        "name": "The Tag Game",
        "description": "Alice got tired of playing the tag game by the usual rules so she offered Bob\na little modification to it. Now the game should be played on an undirected\nrooted tree of n vertices. Vertex 1 is the root of the tree. Alice starts at\nvertex 1 and Bob starts at vertex x (x \u2260 1). The moves are made in turns, Bob\ngoes first. In one move one can either stay at the current vertex or travel to\nthe neighbouring one. The game ends when Alice goes to the same vertex where\nBob is standing. Alice wants to minimize the total number of moves and Bob\nwants to maximize it. You should write a program which will determine how many\nmoves will the game last. Input The first line contains two integer numbers n\nand x (2 \u2264 n \u2264 2\u00b710^5, 2 \u2264 x \u2264 n). Each of the next n - 1 lines contains two\ninteger numbers a and b (1 \u2264 a, b \u2264 n) \u2014 edges of the tree. It is guaranteed\nthat the edges form a valid tree. Output Print the total number of moves Alice\nand Bob will make. Examples Input 4 3 1 2 2 3 2 4 Output 4 Input 5 2 1 2 2 3 3\n4 2 5 Output 6 Note In the first example the tree looks like this: The red\nvertex is Alice's starting position, the blue one is Bob's. Bob will make the\ngame run the longest by standing at the vertex 3 during all the game. So here\nare the moves: B: stay at vertex 3 A: go to vertex 2 B: stay at vertex 3 A: go\nto vertex 3 In the second example the tree looks like this: The moves in the\noptimal strategy are: B: go to vertex 3 A: go to vertex 2 B: go to vertex 4 A:\ngo to vertex 3 B: stay at vertex 4 A: go to vertex 4\n\n",
        "cf_contest_id": 813,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graphs"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 3\r\n1 2\r\n2 3\r\n2 4\r\n",
                "4"
            ],
            [
                "5 2\r\n1 2\r\n2 3\r\n3 4\r\n2 5\r\n",
                "6"
            ]
        ],
        "private_cases": [
            [
                "2 2\r\n2 1\r\n",
                "2"
            ],
            [
                "3 3\r\n2 1\r\n3 1\r\n",
                "2"
            ],
            [
                "3 3\r\n1 2\r\n3 2\r\n",
                "4"
            ],
            [
                "10 4\r\n5 4\r\n8 3\r\n4 6\r\n5 3\r\n7 9\r\n1 3\r\n5 10\r\n2 9\r\n9 8\r\n",
                "8"
            ],
            [
                "10 7\r\n8 7\r\n2 8\r\n2 3\r\n10 6\r\n4 6\r\n4 1\r\n10 5\r\n7 5\r\n9 8\r\n",
                "16"
            ],
            [
                "8 3\r\n2 1\r\n3 1\r\n4 3\r\n5 1\r\n6 1\r\n7 1\r\n8 6\r\n",
                "4"
            ],
            [
                "34 33\r\n2 1\r\n3 2\r\n4 3\r\n5 2\r\n6 3\r\n7 2\r\n8 5\r\n9 7\r\n10 8\r\n11 7\r\n12 7\r\n13 8\r\n14 2\r\n15 10\r\n16 1\r\n17 9\r\n18 14\r\n19 1\r\n20 2\r\n21 8\r\n22 21\r\n23 9\r\n24 6\r\n25 2\r\n26 20\r\n27 5\r\n28 20\r\n29 2\r\n30 10\r\n31 14\r\n32 12\r\n33 15\r\n34 8\r\n",
                "12"
            ]
        ]
    }
]