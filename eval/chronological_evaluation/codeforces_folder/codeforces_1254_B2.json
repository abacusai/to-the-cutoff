[
    {
        "name": "Send Boxes to Alice (Hard Version)",
        "description": "This is the harder version of the problem. In this version, \n    1 \n    \u2264 n \n    \u2264\n    10^6\n and \n    0 \n    \u2264 a_i \n    \u2264 10^6\n. You can hack this problem if you\nlocked it. But you can hack the previous problem only if you locked both\nproblems Christmas is coming, and our protagonist, Bob, is preparing a\nspectacular present for his long-time best friend Alice. This year, he decides\nto prepare \n    n\n boxes of chocolate, numbered from \n    1\n to \n    n\n.\nInitially, the \n    i\n-th box contains \n    a_i\n chocolate pieces. Since Bob\nis a typical nice guy, he will not send Alice \n    n\n empty boxes. In other\nwords, at least one of \n    a_1, a_2, \n    \u2026, a_n\n is positive. Since Alice\ndislikes coprime sets, she will be happy only if there exists some integer\n\n    k > 1\n such that the number of pieces in each box is divisible by\n\n    k\n. Note that Alice won't mind if there exists some empty boxes. Charlie,\nAlice's boyfriend, also is Bob's second best friend, so he decides to help Bob\nby rearranging the chocolate pieces. In one second, Charlie can pick up a\npiece in box \n    i\n and put it into either box \n    i-1\n or box \n    i+1\n (if\nsuch boxes exist). Of course, he wants to help his friend as quickly as\npossible. Therefore, he asks you to calculate the minimum number of seconds he\nwould need to make Alice happy. Input The first line contains a single integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^6\n) \u2014 the number of chocolate boxes. The\nsecond line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0\n    \n    \u2264 a_i \n    \u2264 10^6\n) \u2014 the number of chocolate pieces in the \n    i\n-th\nbox. It is guaranteed that at least one of \n    a_1, a_2, \n    \u2026, a_n\n is\npositive. Output If there is no way for Charlie to make Alice happy, print\n\n    -1\n. Otherwise, print a single integer \n    x\n \u2014 the minimum number of\nseconds for Charlie to help Bob make Alice happy. Examples Input 3 4 8 5\nOutput 9 Input 5 3 10 2 1 5 Output 2 Input 4 0 5 15 10 Output 0 Input 1 1\nOutput -1 Note In the first example, Charlie can move all chocolate pieces to\nthe second box. Each box will be divisible by \n    17\n. In the second example,\nCharlie can move a piece from box \n    2\n to box \n    3\n and a piece from box\n\n    4\n to box \n    5\n. Each box will be divisible by \n    3\n. In the third\nexample, each box is already divisible by \n    5\n. In the fourth example,\nsince Charlie has no available move, he cannot help Bob make Alice happy.\n\n",
        "cf_contest_id": 1254,
        "cf_index": "B2",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory",
            "ternary search",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n4 8 5\r\n",
                "9\r\n"
            ],
            [
                "5\r\n3 10 2 1 5\r\n",
                "2\r\n"
            ],
            [
                "4\r\n0 5 15 10\r\n",
                "0\r\n"
            ],
            [
                "1\r\n1\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n0 0 17\r\n",
                "0\r\n"
            ],
            [
                "3\r\n0 0 1\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n2103\r\n",
                "0\r\n"
            ],
            [
                "10\r\n3 3 3 5 6 9 3 1 7 3\r\n",
                "90\r\n"
            ],
            [
                "100\r\n61 28 67 53 13 6 70 5 79 82 60 60 84 17 80 25 82 82 69 76 81 43 58 86 18 78 4 25 8 30 33 87 91 18 90 26 62 11 28 66 9 33 58 66 47 48 80 38 25 57 4 84 79 71 54 84 63 32 97 62 26 68 5 69 54 93 25 26 100 73 24 94 80 39 30 45 95 80 0 29 57 98 92 15 17 76 69 11 57 56 48 10 28 7 63 66 53 58 12 58\r\n",
                "68\r\n"
            ],
            [
                "11\r\n42 20 19 6 25 0 20 33 40 38 35\r\n",
                "5\r\n"
            ],
            [
                "14\r\n41 24 6 2 7 24 23 2 13 21 25 14 23 7\r\n",
                "8\r\n"
            ],
            [
                "15\r\n17 7 1 8 2 2 0 18 0 12 11 0 12 12 5\r\n",
                "432\r\n"
            ],
            [
                "16\r\n12 0 9 14 12 26 21 24 3 13 7 4 26 1 17 21\r\n",
                "9\r\n"
            ],
            [
                "11\r\n0 3 3 5 5 5 4 3 6 4 1\r\n",
                "6\r\n"
            ],
            [
                "17\r\n64 26 39 57 12 0 64 26 35 8 50 3 64 16 4 42 33\r\n",
                "6\r\n"
            ],
            [
                "16\r\n47 14 19 48 2 41 38 25 5 24 38 22 1 30 38 41\r\n",
                "1860\r\n"
            ],
            [
                "11\r\n59 15 45 18 19 39 63 17 18 58 65\r\n",
                "7\r\n"
            ],
            [
                "19\r\n51 65 42 25 41 45 68 58 2 33 9 17 28 41 5 0 70 28 26\r\n",
                "8\r\n"
            ],
            [
                "20\r\n55 21 46 36 40 11 12 59 58 2 48 7 86 52 47 48 17 4 72 30\r\n",
                "3736\r\n"
            ],
            [
                "15\r\n1 1 1 0 0 0 1 1 1 0 0 0 1 1 1\r\n",
                "6\r\n"
            ]
        ]
    }
]