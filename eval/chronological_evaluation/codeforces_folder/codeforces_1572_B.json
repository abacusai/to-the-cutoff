[
    {
        "name": "Xor of 3",
        "description": "You are given a sequence \n    a\n of length \n    n\n consisting of \n    0\ns and\n\n    1\ns. You can perform the following operation on this sequence: Pick an\nindex \n    i\n from \n    1\n to \n    n-2\n (inclusive). Change all of\n\n    a_i\n, \n    a_i+1\n, \n    a_i+2\n to \n    a_i\n    \u2295 a_i+1\n    \u2295 a_i+2\n simultaneously, where \n    \u2295\n denotes the bitwise\nXOR operation Find a sequence of at most \n    n\n operations that changes all\nelements of \n    a\n to \n    0\ns or report that it's impossible.We can prove\nthat if there exists a sequence of operations of any length that changes all\nelements of \n    a\n to \n    0\ns, then there is also such a sequence of length\nnot greater than \n    n\n. Input Each test contains multiple test cases. The\nfirst line contains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    10^4\n). The first line of each test case contains a single integer \n    n\n\n(\n    3 \n    \u2264 n \n    \u2264 2\n    \u00b710^5\n) \u2014 the length of \n    a\n. The second line\nof each test case contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n\n(\n    a_i = 0\n or \n    a_i = 1\n) \u2014 elements of \n    a\n. It is guaranteed that\nthe sum of \n    n\n over all test cases does not exceed \n    2\n    \u00b710^5\n.\nOutput For each test case, do the following: if there is no way of making all\nthe elements of \n    a\n equal to \n    0\n after performing the above operation\nsome number of times, print \"NO\". otherwise, in the first line print \"YES\", in\nthe second line print \n    k\n (\n    0 \n    \u2264 k \n    \u2264 n\n) \u2014 the number of\noperations that you want to perform on \n    a\n, and in the third line print a\nsequence \n    b_1, b_2, \n    \u2026, b_k\n (\n    1 \n    \u2264 b_i \n    \u2264 n - 2\n) \u2014 the\nindices on which the operation should be applied. If there are multiple\nsolutions, you may print any. Example Input 3 3 0 0 0 5 1 1 1 1 0 4 1 0 0 1\nOutput YES 0 YES 2 3 1 NO Note In the first example, the sequence contains\nonly \n    0\ns so we don't need to change anything. In the second example, we\ncan transform \n    [1, 1, 1, 1, 0]\n to \n    [1, 1, 0, 0, 0]\n and then to\n\n    [0, 0, 0, 0, 0]\n by performing the operation on the third element of\n\n    a\n and then on the first element of \n    a\n. In the third example, no\nmatter whether we first perform the operation on the first or on the second\nelement of \n    a\n we will get \n    [1, 1, 1, 1]\n, which cannot be transformed\nto \n    [0, 0, 0, 0]\n.\n\n",
        "cf_contest_id": 1572,
        "cf_index": "B",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "greedy",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3\r\n0 0 0\r\n5\r\n1 1 1 1 0\r\n4\r\n1 0 0 1\r\n",
                "YES\r\n2\r\n1 1\r\nYES\r\n4\r\n1 3 3 1\r\nNO\r\n"
            ]
        ],
        "private_cases": []
    }
]