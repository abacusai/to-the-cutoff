[
    {
        "name": "Two Avenues",
        "description": "In order to make the capital of Berland a more attractive place for tourists,\nthe great king came up with the following plan: choose two streets of the city\nand call them avenues. Certainly, these avenues will be proclaimed extremely\nimportant historical places, which should attract tourists from all over the\nworld. The capital of Berland can be represented as a graph, the vertices of\nwhich are crossroads, and the edges are streets connecting two crossroads. In\ntotal, there are \n    n\n vertices and \n    m\n edges in the graph, you can move\nin both directions along any street, you can get from any crossroad to any\nother by moving only along the streets, each street connects two different\ncrossroads, and no two streets connect the same pair of crossroads. In order\nto reduce the flow of ordinary citizens moving along the great avenues, it was\ndecided to introduce a toll on each avenue in both directions. Now you need to\npay \n    1\n tugrik for one passage along the avenue. You don't have to pay for\nthe rest of the streets. Analysts have collected a sample of \n    k\n citizens,\n\n    i\n-th of them needs to go to work from the crossroad \n    a_i\n to the\ncrossroad \n    b_i\n. After two avenues are chosen, each citizen will go to\nwork along the path with minimal cost. In order to earn as much money as\npossible, it was decided to choose two streets as two avenues, so that the\ntotal number of tugriks paid by these \n    k\n citizens is maximized. Help the\nking: according to the given scheme of the city and a sample of citizens, find\nout which two streets should be made avenues, and how many tugriks the\ncitizens will pay according to this choice. Input Each test consists of\nmultiple test cases. The first line contains one integer \n    t\n (\n    1 \n    \u2264\n    t \n    \u2264 10^5\n) \u2014 the number of test cases. The first line of each test case\ncontains two integers \n    n\n and \n    m\n (\n    3 \n    \u2264 n \n    \u2264 500\n     000\n,\n\n    n - 1 \n    \u2264 m \n    \u2264 500\n     000\n, \n    m \n    \u2264\n    n (n - 1)/2\n) \u2014\nthe number of crossroads and streets, respectively. The next \n    m\n lines\ncontain the description of streets, \n    i\n-th line contains two integers\n\n    s_i\n and \n    f_i\n (\n    1 \n    \u2264 s_i, f_i \n    \u2264 n\n, \n    s_i \n    \u2260\n    f_i\n) \u2014 indexes of crossroads which are connected by \n    i\n-th street. It\nis guaranteed that no two streets connect the same pair of crossroads, you can\nget from any crossroad to any other by moving only along the streets. The next\nline contains a single integer \n    k\n (\n    1 \n    \u2264 k \n    \u2264 500\n     000\n) \u2014\nthe amount of citizens in the sample. The next \n    k\n lines contain the\ndescription of citizens, \n    i\n-th line contains two integers \n    a_i\n and\n\n    b_i\n (\n    1 \n    \u2264 a_i, b_i \n    \u2264 n\n, \n    a_i \n    \u2260 b_i\n) \u2014\n\n    i\n-th citizen goes to work from crossroad \n    a_i\n to crossroad\n\n    b_i\n. Let \n    M\n be the sum of \n    m\n over all test cases and \n    K\n\nbe the sum of \n    k\n over all test cases. It is guaranteed that \n    M, K \n    \u2264\n    500\n     000\n. Output For each test case print the answer to the problem. In\nthe first line print the total amount of tugriks that will be paid by\ncitizens. In the second line print two integers \n    x_1\n and \n    y_1\n \u2014 the\nnumbers of crossroads that will be connected by the first avenue. In the third\nline print two integers \n    x_2\n and \n    y_2\n \u2014 the numbers of crossroads\nthat will be connected by the second avenue. The numbers of crossroads\nconnected by an avenue can be printed in any order, each of the printed\nstreets should be among \n    m\n streets of the city, chosen streets should be\ndifferent. Example Input 3 6 5 1 2 2 3 2 4 4 5 4 6 3 1 6 5 3 2 5 5 5 1 2 2 3 3\n4 4 5 5 1 6 1 5 1 3 1 3 2 4 2 5 5 3 8 10 1 2 2 3 3 4 4 5 5 6 6 7 7 8 7 1 1 8 3\n6 4 2 5 3 7 2 5 7 8 Output 5 4 2 5 4 5 1 5 3 2 3 7 6 2 3\n\n",
        "cf_contest_id": 1648,
        "cf_index": "F",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "graphs"
        ],
        "time_limit_seconds": 8.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n6 5\r\n1 2\r\n2 3\r\n2 4\r\n4 5\r\n4 6\r\n3\r\n1 6\r\n5 3\r\n2 5\r\n5 5\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 1\r\n6\r\n1 5\r\n1 3\r\n1 3\r\n2 4\r\n2 5\r\n5 3\r\n8 10\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n7 1\r\n1 8\r\n3 6\r\n4\r\n2 5\r\n3 7\r\n2 5\r\n7 8\r\n",
                "5\r\n2 4\r\n4 5\r\n5\r\n2 3\r\n5 1\r\n3\r\n2 3\r\n6 7\r\n"
            ]
        ],
        "private_cases": []
    }
]