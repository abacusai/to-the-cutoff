[
    {
        "name": "Ambiguous Dominoes",
        "description": "Polycarp and Monocarp are both solving the same puzzle with dominoes. They are\ngiven the same set of \n    n\n dominoes, the \n    i\n-th of which contains two\nnumbers \n    x_i\n and \n    y_i\n. They are also both given the same \n    m\n by\n\n    k\n grid of values \n    a_ij\n such that \n    m\n    \u00b7 k = 2n\n. The\npuzzle asks them to place the \n    n\n dominoes on the grid in such a way that\nnone of them overlap, and the values on each domino match the \n    a_ij\n\nvalues that domino covers. Dominoes can be rotated arbitrarily before being\nplaced on the grid, so the domino \n    (x_i, y_i)\n is equivalent to the domino\n\n    (y_i, x_i)\n. They have both solved the puzzle, and compared their\nanswers, but noticed that not only did their solutions not match, but none of\nthe \n    n\n dominoes were in the same location in both solutions! Formally, if\ntwo squares were covered by the same domino in Polycarp's solution, they were\ncovered by different dominoes in Monocarp's solution. The diagram below shows\none potential \n    a\n grid, along with the two players' solutions. Polycarp\nand Monocarp remember the set of dominoes they started with, but they have\nlost the grid \n    a\n. Help them reconstruct one possible grid \n    a\n, along\nwith both of their solutions, or determine that no such grid exists. Input The\nfirst line contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 3\n    \u00b7\n    10^5\n). The \n    i\n-th of the next \n    n\n lines contains two integers\n\n    x_i\n and \n    y_i\n (\n    1 \n    \u2264 x_i, y_i \n    \u2264 2n\n). Output If there is\nno solution, print a single integer \n    -1\n. Otherwise, print \n    m\n and\n\n    k\n, the height and width of the puzzle grid, on the first line of output.\nThese should satisfy \n    m\n    \u00b7 k = 2n\n. The \n    i\n-th of the next \n    m\n\nlines should contain \n    k\n integers, the \n    j\n-th of which is\n\n    a_ij\n. The next \n    m\n lines describe Polycarp's solution. Print\n\n    m\n lines of \n    k\n characters each. For each square, if it is covered by\nthe upper half of a domino in Polycarp's solution, it should contain a \"U\".\nSimilarly, if it is covered by the bottom, left, or right half of a domino, it\nshould contain \"D\", \"L\", or \"R\", respectively. The next \n    m\n lines should\ndescribe Monocarp's solution, in the same format as Polycarp's solution. If\nthere are multiple answers, print any. Examples Input 1 1 2 Output -1 Input 2\n1 1 1 2 Output 2 2 2 1 1 1 LR LR UU DD Input 10 1 3 1 1 2 1 3 4 1 5 1 5 3 1 2\n4 3 3 4 1 Output 4 5 1 2 5 1 5 3 4 1 3 1 1 2 4 4 1 1 3 3 3 1 LRULR LRDLR ULRLR\nDLRLR UULRU DDUUD LRDDU LRLRD Note Extra blank lines are added to the output\nfor clarity, but are not required. The third sample case corresponds to the\nimage from the statement.\n\n",
        "cf_contest_id": 1695,
        "cf_index": "E",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs"
        ],
        "time_limit_seconds": 8.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n1 2\r\n",
                "-1\r\n"
            ],
            [
                "2\r\n1 1\r\n1 2\r\n",
                "2 2\r\n1 1 \r\n2 1 \r\nLR\r\nLR\r\nUU\r\nDD\r\n"
            ],
            [
                "10\r\n1 3\r\n1 1\r\n2 1\r\n3 4\r\n1 5\r\n1 5\r\n3 1\r\n2 4\r\n3 3\r\n4 1\r\n",
                "2 10\r\n1 3 4 2 1 2 4 1 4 3 \r\n5 1 5 1 1 1 3 3 3 1 \r\nLRLRLRLRLR\r\nLRLRLRLRLR\r\nULRLRLRLRU\r\nDLRLRLRLRD\r\n"
            ]
        ],
        "private_cases": [
            [
                "41\r\n1 1\r\n1 1\r\n2 2\r\n2 3\r\n4 5\r\n5 6\r\n7 8\r\n8 7\r\n9 10\r\n9 11\r\n9 12\r\n13 14\r\n15 16\r\n15 14\r\n17 18\r\n19 17\r\n18 19\r\n20 21\r\n22 21\r\n21 20\r\n24 23\r\n24 23\r\n23 24\r\n25 25\r\n25 25\r\n25 25\r\n26 26\r\n27 26\r\n26 27\r\n28 29\r\n30 29\r\n29 29\r\n31 32\r\n32 32\r\n33 31\r\n34 34\r\n34 34\r\n35 34\r\n36 36\r\n37 37\r\n36 37\r\n",
                "2 41\r\n1 1 2 2 4 5 7 8 9 10 9 13 14 15 17 18 19 20 21 22 23 24 23 25 25 25 26 26 26 28 29 30 31 32 32 34 34 34 36 36 36 \r\n1 1 3 2 5 6 8 7 12 9 11 14 15 16 18 19 17 21 20 21 24 23 24 25 25 25 27 26 27 29 29 29 33 31 32 35 34 34 37 37 37 \r\nLRLRLRLRLRULRULRULRULRULRULRULRULRULRULRU\r\nLRLRLRLRLRDLRDLRDLRDLRDLRDLRDLRDLRDLRDLRD\r\nUUUUUUUUULRULRULRULRULRULRULRULRULRULRULR\r\nDDDDDDDDDLRDLRDLRDLRDLRDLRDLRDLRDLRDLRDLR\r\n"
            ],
            [
                "45\r\n1 72\r\n88 33\r\n70 15\r\n22 15\r\n88 49\r\n56 6\r\n68 6\r\n76 15\r\n3 76\r\n2 69\r\n17 20\r\n33 44\r\n20 73\r\n32 29\r\n35 73\r\n29 88\r\n69 17\r\n82 29\r\n72 73\r\n59 63\r\n74 49\r\n49 15\r\n17 20\r\n36 15\r\n61 20\r\n15 58\r\n36 29\r\n18 69\r\n14 56\r\n30 66\r\n58 73\r\n71 36\r\n84 51\r\n64 29\r\n66 1\r\n55 22\r\n6 22\r\n44 14\r\n18 36\r\n63 22\r\n51 49\r\n44 58\r\n52 49\r\n11 2\r\n58 84\r\n",
                "2 45\r\n1 72 73 20 17 69 2 11 2 69 18 36 15 70 15 22 55 22 6 56 14 44 33 88 49 74 49 15 49 51 84 58 15 58 73 58 44 58 84 51 49 52 49 88 29 \r\n66 30 66 1 72 73 35 73 20 61 20 17 20 17 69 18 36 71 36 15 76 3 76 15 22 63 59 63 22 6 68 6 56 14 44 33 88 29 64 29 36 29 82 29 32 \r\nLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRU\r\nLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRD\r\nULRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLR\r\nDLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLRLR\r\n"
            ]
        ]
    }
]