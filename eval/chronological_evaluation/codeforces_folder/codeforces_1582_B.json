[
    {
        "name": "Luntik and Subsequences",
        "description": "Luntik came out for a morning stroll and found an array \n    a\n of length\n\n    n\n. He calculated the sum \n    s\n of the elements of the array (\n    s=\n    \n    \u2211_i=1^n a_i\n). Luntik calls a subsequence of the array \n    a\n\nnearly full if the sum of the numbers in that subsequence is equal to\n\n    s-1\n. Luntik really wants to know the number of nearly full subsequences\nof the array \n    a\n. But he needs to come home so he asks you to solve that\nproblem! A sequence \n    x\n is a subsequence of a sequence \n    y\n if \n    x\n\ncan be obtained from \n    y\n by deletion of several (possibly, zero or all)\nelements. Input The first line contains a single integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 1000\n) \u2014 the number of test cases. The next \n    2 \n    \u00b7 t\n lines\ncontain descriptions of test cases. The description of each test case consists\nof two lines. The first line of each test case contains a single integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 60\n) \u2014 the length of the array. The second line\ncontains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264\n    10^9\n) \u2014 the elements of the array \n    a\n. Output For each test case print\nthe number of nearly full subsequences of the array. Example Input 5 5 1 2 3 4\n5 2 1000 1000 2 1 0 5 3 0 2 1 1 5 2 1 0 3 0 Output 1 0 2 4 4 Note In the first\ntest case, \n    s=1+2+3+4+5=15\n, only \n    (2,3,4,5)\n is a nearly full\nsubsequence among all subsequences, the sum in it is equal to\n\n    2+3+4+5=14=15-1\n. In the second test case, there are no nearly full\nsubsequences. In the third test case, \n    s=1+0=1\n, the nearly full\nsubsequences are \n    (0)\n and \n    ()\n (the sum of an empty subsequence is\n\n    0\n).\n\n",
        "cf_contest_id": 1582,
        "cf_index": "B",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n5\r\n1 2 3 4 5\r\n2\r\n1000 1000\r\n2\r\n1 0\r\n5\r\n3 0 2 1 1\r\n5\r\n2 1 0 3 0\r\n",
                "1\r\n0\r\n2\r\n4\r\n4\r\n"
            ]
        ],
        "private_cases": []
    }
]