[
    {
        "name": "Present",
        "description": "Little beaver is a beginner programmer, so informatics is his favorite\nsubject. Soon his informatics teacher is going to have a birthday and the\nbeaver has decided to prepare a present for her. He planted n flowers in a row\non his windowsill and started waiting for them to grow. However, after some\ntime the beaver noticed that the flowers stopped growing. The beaver thinks it\nis bad manners to present little flowers. So he decided to come up with some\nsolutions. There are m days left to the birthday. The height of the i-th\nflower (assume that the flowers in the row are numbered from 1 to n from left\nto right) is equal to ai at the moment. At each of the remaining m days the\nbeaver can take a special watering and water w contiguous flowers (he can do\nthat only once at a day). At that each watered flower grows by one height unit\non that day. The beaver wants the height of the smallest flower be as large as\npossible in the end. What maximum height of the smallest flower can he get?\nInput The first line contains space-separated integers n, m and w (1 \u2264 w \u2264 n \u2264\n10^5; 1 \u2264 m \u2264 10^5). The second line contains space-separated integers a1, a2,\n..., an (1 \u2264 ai \u2264 10^9). Output Print a single integer \u2014 the maximum final\nheight of the smallest flower. Examples Input 6 2 3 2 2 2 2 1 1 Output 2 Input\n2 5 1 5 8 Output 9 Note In the first sample beaver can water the last 3\nflowers at the first day. On the next day he may not to water flowers at all.\nIn the end he will get the following heights: [2, 2, 2, 3, 2, 2]. The smallest\nflower has height equal to 2. It's impossible to get height 3 in this test.\n\n",
        "cf_contest_id": 460,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 2 3\r\n2 2 2 2 1 1\r\n",
                "2\r\n"
            ],
            [
                "2 5 1\r\n5 8\r\n",
                "9\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1 1\r\n1\r\n",
                "2\r\n"
            ],
            [
                "3 2 3\r\n999999998 999999998 999999998\r\n",
                "1000000000\r\n"
            ],
            [
                "10 8 3\r\n499 498 497 497 497 497 497 497 498 499\r\n",
                "500\r\n"
            ],
            [
                "11 18 8\r\n4996 4993 4988 4982 4982 4982 4982 4982 4986 4989 4994\r\n",
                "5000\r\n"
            ],
            [
                "1 100000 1\r\n1000000000\r\n",
                "1000100000\r\n"
            ],
            [
                "4 100 3\r\n1 100000 100000 1\r\n",
                "51\r\n"
            ]
        ]
    }
]