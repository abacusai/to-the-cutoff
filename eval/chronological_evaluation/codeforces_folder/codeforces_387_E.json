[
    {
        "name": "George and Cards",
        "description": "George is a cat, so he loves playing very much. Vitaly put n cards in a row in\nfront of George. Each card has one integer written on it. All cards had\ndistinct numbers written on them. Let's number the cards from the left to the\nright with integers from 1 to n. Then the i-th card from the left contains\nnumber pi (1 \u2264 pi \u2264 n). Vitaly wants the row to have exactly k cards left. He\nalso wants the i-th card from left to have number bi written on it. Vitaly\ngave a task to George, to get the required sequence of cards using the remove\noperation n - k times. In one remove operation George can choose w (1 \u2264 w; w\nis not greater than the current number of cards in the row) contiguous cards\n(contiguous subsegment of cards). Let's denote the numbers written on these\ncard as x1, x2, ..., xw (from the left to the right). After that, George can\nremove the card xi, such that xi \u2264 xj for each j (1 \u2264 j \u2264 w). After the\ndescribed operation George gets w pieces of sausage. George wondered: what\nmaximum number of pieces of sausage will he get in total if he reaches his\ngoal and acts optimally well? Help George, find an answer to his question!\nInput The first line contains integers n and k (1 \u2264 k \u2264 n \u2264 10^6) \u2014 the\ninitial and the final number of cards. The second line contains n distinct\nspace-separated integers p1, p2, ..., pn (1 \u2264 pi \u2264 n) \u2014 the initial row of\ncards. The third line contains k space-separated integers b1, b2, ..., bk \u2014\nthe row of cards that you need to get. It is guaranteed that it's possible to\nobtain the given row by using the remove operation for n - k times. Output\nPrint a single integer \u2014 the maximum number of pieces of sausage that George\ncan get if he acts optimally well. Examples Input 3 2 2 1 3 1 3 Output 1 Input\n10 5 1 2 3 4 5 6 7 8 9 10 2 4 6 8 10 Output 30\n\n",
        "cf_contest_id": 387,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2\r\n2 1 3\r\n1 3\r\n",
                "1\r\n"
            ],
            [
                "10 5\r\n1 2 3 4 5 6 7 8 9 10\r\n2 4 6 8 10\r\n",
                "30\r\n"
            ]
        ],
        "private_cases": [
            [
                "14 6\r\n7 6 10 9 11 8 14 3 1 13 12 4 5 2\r\n7 10 11 12 4 5\r\n",
                "64\r\n"
            ],
            [
                "10 4\r\n4 3 10 9 8 2 5 7 1 6\r\n9 8 7 1\r\n",
                "28\r\n"
            ],
            [
                "20 8\r\n19 12 4 6 2 17 9 20 18 16 10 1 14 3 15 7 13 5 11 8\r\n19 17 20 18 10 3 15 11\r\n",
                "98\r\n"
            ],
            [
                "15 11\r\n10 1 11 13 12 9 8 14 2 7 4 6 15 5 3\r\n10 11 13 12 9 8 14 2 4 6 15\r\n",
                "25\r\n"
            ],
            [
                "11 3\r\n10 8 11 7 1 6 9 5 3 4 2\r\n10 8 6\r\n",
                "51\r\n"
            ],
            [
                "3 1\r\n1 2 3\r\n1\r\n",
                "3\r\n"
            ],
            [
                "4 2\r\n2 3 1 4\r\n3 1\r\n",
                "3\r\n"
            ],
            [
                "4 1\r\n4 3 2 1\r\n4\r\n",
                "9\r\n"
            ],
            [
                "3 1\r\n2 3 1\r\n3\r\n",
                "5\r\n"
            ],
            [
                "1 1\r\n1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "3 1\r\n3 1 2\r\n3\r\n",
                "5\r\n"
            ],
            [
                "4 2\r\n2 4 1 3\r\n2 3\r\n",
                "5\r\n"
            ],
            [
                "2 2\r\n1 2\r\n1 2\r\n",
                "0\r\n"
            ],
            [
                "2 1\r\n2 1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "4 3\r\n2 4 1 3\r\n2 1 3\r\n",
                "1\r\n"
            ],
            [
                "4 4\r\n1 2 3 4\r\n1 2 3 4\r\n",
                "0\r\n"
            ],
            [
                "1 1\r\n1\r\n1\r\n",
                "0\r\n"
            ]
        ]
    }
]