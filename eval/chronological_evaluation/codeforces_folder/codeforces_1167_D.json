[
    {
        "name": "Bicolored RBS",
        "description": "A string is called bracket sequence if it does not contain any characters\nother than \"(\" and \")\". A bracket sequence is called regular (shortly, RBS) if\nit is possible to obtain correct arithmetic expression by inserting characters\n\"+\" and \"1\" into this sequence. For example, \"\", \"(())\" and \"()()\" are RBS and\n\")(\" and \"(()\" are not. We can see that each opening bracket in RBS is paired\nwith some closing bracket, and, using this fact, we can define nesting depth\nof the RBS as maximum number of bracket pairs, such that the \n    2\n-nd pair\nlies inside the \n    1\n-st one, the \n    3\n-rd one \u2014 inside the \n    2\n-nd one\nand so on. For example, nesting depth of \"\" is \n    0\n, \"()()()\" is \n    1\n\nand \"()((())())\" is \n    3\n. Now, you are given RBS \n    s\n of even length\n\n    n\n. You should color each bracket of \n    s\n into one of two colors: red\nor blue. Bracket sequence \n    r\n, consisting only of red brackets, should be\nRBS, and bracket sequence, consisting only of blue brackets \n    b\n, should be\nRBS. Any of them can be empty. You are not allowed to reorder characters in\n\n    s\n, \n    r\n or \n    b\n. No brackets can be left uncolored. Among all\npossible variants you should choose one that minimizes maximum of \n    r\n's\nand \n    b\n's nesting depth. If there are multiple solutions you can print any\nof them. Input The first line contains an even integer \n    n\n (\n    2 \n    \u2264 n\n    \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the length of RBS \n    s\n. The second line contains\nregular bracket sequence \n    s\n (\n    |s| = n\n, \n    s_i \n    \u2208\n    \n    \"(\",\n    \")\"\n). Output Print single string \n    t\n of length \n    n\n\nconsisting of \"0\"-s and \"1\"-s. If \n    t_i\n is equal to 0 then character\n\n    s_i\n belongs to RBS \n    r\n, otherwise \n    s_i\n belongs to \n    b\n.\nExamples Input 2 () Output 11 Input 4 (()) Output 0101 Input 10 ((()())())\nOutput 0110001111 Note In the first example one of optimal solutions is \n    s =\n \"\n    ()\n\". \n    r\n is empty and \n    b =\n \"\n    ()\n\".\nThe answer is \n    max(0, 1) = 1\n. In the second example it's optimal to\nmake \n    s =\n\n\"\n    (\n    (\n    )\n    )\n\".\n\n    r = b =\n \"\n    ()\n\" and the answer is \n    1\n. In the third example we\ncan make \n    s =\n\n\"\n    (\n    ((\n    )()\n    )())\n\".\n\n    r =\n \"\n    ()()\n\" and \n    b =\n \"\n    (()())\n\" and the answer is\n\n    2\n.\n\n",
        "cf_contest_id": 1167,
        "cf_index": "D",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n()\r\n",
                "11"
            ],
            [
                "4\r\n(())\r\n",
                "1001"
            ],
            [
                "10\r\n((()())())\r\n",
                "1011110001"
            ]
        ],
        "private_cases": [
            [
                "20\r\n(())(()()())(())()()\r\n",
                "10011000000110011111"
            ],
            [
                "20\r\n(()()()())(()())()()\r\n",
                "10000000011000011111"
            ],
            [
                "20\r\n(())(())(())()(())()\r\n",
                "10011001100111100111"
            ],
            [
                "20\r\n()((())((()))())(())\r\n",
                "11101100100100011001"
            ],
            [
                "20\r\n(()((()()())()()))()\r\n",
                "10001000000111110111"
            ],
            [
                "20\r\n(()(((())(()))(())))\r\n",
                "10001011001101100101"
            ],
            [
                "20\r\n((((()(((())))()))))\r\n",
                "10101110100101110101"
            ],
            [
                "8\r\n((()))()\r\n",
                "10110111"
            ],
            [
                "14\r\n((()(()()())))\r\n",
                "10111000000101"
            ],
            [
                "12\r\n(()())((()))\r\n",
                "100001101101"
            ]
        ]
    }
]