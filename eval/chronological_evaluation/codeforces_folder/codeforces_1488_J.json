[
    {
        "name": "Flower Shop",
        "description": "Your friend is running a flower shop. In order to be prepared for the next\nholidays (when, as usual, sales skyrocket) she asked you to write her a\nspecial program that will help to analyze the stocks she has. There are\n\n    n\n different types of flowers she can order and each flower of the type\n\n    i\n costs \n    w_i\n. The last holidays were a great success, she sold all\nflowers she had, so right now all her stocks are empty. From this point, she\nstarts routine operations of ordering and selling flowers, while trying to\nanalyze what she has at hand. All of this can be represented as \n    m\n\nqueries of three types: \"\n    1\n \n    i\n \n    c\n\" \u2014 she bought \n    c\n flowers\nof type \n    i\n; \"\n    2\n \n    i\n \n    c\n\" \u2014 she disposed of \n    c\n flowers\nof type \n    i\n; \"\n    3\n \n    l\n \n    r\n \n    k\n\" \u2014 how many variants of\nbouquets she can make using only flowers of types \n    l, l + 1, \n    \u2026, r\n\nwith the total cost no more than \n    k\n. For simplicity, you can think that a\nbouquet is a multiset of flowers, and two bouquets are different if they are\ndifferent as multisets. The cost of a bouquet is the sum of all flowers it\nhas. Help your friend and write the program that can process all these\nqueries. Input The first line contains two integers \n    n\n and \n    m\n (\n    1\n    \n    \u2264 n \n    \u2264 1000\n; \n    1 \n    \u2264 m \n    \u2264 1000\n) \u2014 the number of flower\ntypes and the number of queries. The second line contains \n    n\n integers\n\n    w_1, w_2, \n    \u2026, w_n\n (\n    1 \n    \u2264 w_i \n    \u2264 1000\n) \u2014 the cost of one\nflower of each type. The next \n    m\n lines contains queries \u2014 one per line.\nEach query has one of three types: \n    1\n \n    i\n \n    c\n (\n    1 \n    \u2264 i \n    \u2264\n    n\n; \n    1 \n    \u2264 c \n    \u2264 5000\n); \n    2\n \n    i\n \n    c\n (\n    1 \n    \u2264 i \n    \u2264\n    n\n; \n    1 \n    \u2264 c \n    \u2264 5000\n). It's guaranteed that there are at least\n\n    c\n flowers of type \n    i\n at this moment; \n    3\n \n    l\n \n    r\n\n\n    k\n (\n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 n\n; \n    1 \n    \u2264 k \n    \u2264 5000\n) It's\nguaranteed that the total cost of all flowers in stock after each query\ndoesn't exceed \n    5000\n. Output For each query of the third type, print how\nmany variants of bouquets she can make using only flowers of types \n    l, l +\n    1, \n    \u2026, r\n with the total cost no more than \n    k\n. Since the answer\nmay be too large, print it modulo \n    998\n     244\n     353\n. Example Input 5 12\n1 2 3 2 1 1 1 5 1 2 3 1 3 1 3 1 5 10 3 4 5 100 1 4 4 1 5 1 3 2 5 7 3 1 1 3 3 1\n5 100 2 1 5 3 1 5 100 Output 40 0 28 3 479 79\n\n",
        "cf_contest_id": 1488,
        "cf_index": "J",
        "cf_rating": 3100,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "data structures",
            "fft",
            "math"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 12\r\n1 2 3 2 1\r\n1 1 5\r\n1 2 3\r\n1 3 1\r\n3 1 5 10\r\n3 4 5 100\r\n1 4 4\r\n1 5 1\r\n3 2 5 7\r\n3 1 1 3\r\n3 1 5 100\r\n2 1 5\r\n3 1 5 100\r\n",
                "40\r\n0\r\n28\r\n3\r\n479\r\n79\r\n"
            ]
        ],
        "private_cases": []
    }
]