[
    {
        "name": "And Matching",
        "description": "You are given a set of \n    n\n (\n    n\n is always a power of \n    2\n) elements\ncontaining all integers \n    0, 1, 2, \n    \u2026, n-1\n exactly once. Find\n\n    n/2\n pairs of elements such that: Each element in the set is in\nexactly one pair. The sum over all pairs of the bitwise AND of its elements\nmust be exactly equal to \n    k\n. Formally, if \n    a_i\n and \n    b_i\n are the\nelements of the \n    i\n-th pair, then the following must hold:\n\n    \n\n    \u2211_i=1^n/2a_i \n    & b_i = k,\n\n    \n where \n    &\n denotes the\nbitwise AND operation. If there are many solutions, print any of them, if\nthere is no solution, print \n    -1\n instead. Input The input consists of\nmultiple test cases. The first line contains a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 400\n) \u2014 the number of test cases. Description of the test\ncases follows. Each test case consists of a single line with two integers\n\n    n\n and \n    k\n (\n    4 \n    \u2264 n \n    \u2264 2^16\n, \n    n\n is a power of\n\n    2\n, \n    0 \n    \u2264 k \n    \u2264 n-1\n). The sum of \n    n\n over all test cases\ndoes not exceed \n    2^16\n. All test cases in each individual input will be\npairwise different. Output For each test case, if there is no solution, print\na single line with the integer \n    -1\n. Otherwise, print \n    n/2\n\nlines, the \n    i\n-th of them must contain \n    a_i\n and \n    b_i\n, the\nelements in the \n    i\n-th pair. If there are many solutions, print any of\nthem. Print the pairs and the elements in the pairs in any order. Example\nInput 4 4 0 4 1 4 2 4 3 Output 0 3 1 2 0 2 1 3 0 1 2 3 -1 Note In the first\ntest, \n    (0\n    &3)+(1\n    &2) = 0\n. In the second test, \n    (0\n    &2)+(1\n    &3) =\n    1\n. In the third test, \n    (0\n    &1)+(2\n    &3) = 2\n. In the fourth test,\nthere is no solution.\n\n",
        "cf_contest_id": 1630,
        "cf_index": "A",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "constructive algorithms"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4 0\r\n4 1\r\n4 2\r\n4 3\r\n",
                "0 3\r\n1 2\r\n1 3\r\n0 2\r\n2 3\r\n1 0\r\n-1\r\n"
            ]
        ],
        "private_cases": []
    }
]