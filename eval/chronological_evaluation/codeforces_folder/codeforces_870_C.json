[
    {
        "name": "Maximum splitting",
        "description": "You are given several queries. In the i-th query you are given a single\npositive integer ni. You are to represent ni as a sum of maximum possible\nnumber of composite summands and print this maximum number, or print -1, if\nthere are no such splittings. An integer greater than 1 is composite, if it is\nnot prime, i.e. if it has positive divisors not equal to 1 and the integer\nitself. Input The first line contains single integer q (1 \u2264 q \u2264 10^5) \u2014 the\nnumber of queries. q lines follow. The (i + 1)-th line contains single integer\nni (1 \u2264 ni \u2264 10^9) \u2014 the i-th query. Output For each query print the maximum\npossible number of summands in a valid splitting to composite summands, or -1,\nif there are no such splittings. Examples Input 1 12 Output 3 Input 2 6 8\nOutput 1 2 Input 3 1 2 3 Output -1 -1 -1 Note 12 = 4 + 4 + 4 = 4 + 8 = 6 + 6 =\n12, but the first splitting has the maximum possible number of summands. 8 = 4\n+ 4, 6 can't be split into several composite summands. 1, 2, 3 are less than\nany composite number, so they do not have valid splittings.\n\n",
        "cf_contest_id": 870,
        "cf_index": "C",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "greedy",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n12\r\n",
                "3\r\n"
            ],
            [
                "2\r\n6\r\n8\r\n",
                "1\r\n2\r\n"
            ],
            [
                "3\r\n1\r\n2\r\n3\r\n",
                "-1\r\n-1\r\n-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "6\r\n1\r\n2\r\n3\r\n5\r\n7\r\n11\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "3\r\n4\r\n6\r\n9\r\n",
                "1\r\n1\r\n1\r\n"
            ],
            [
                "20\r\n8\r\n13\r\n20\r\n12\r\n9\r\n16\r\n4\r\n19\r\n7\r\n15\r\n10\r\n6\r\n14\r\n11\r\n3\r\n2\r\n5\r\n17\r\n18\r\n1\r\n",
                "2\r\n2\r\n5\r\n3\r\n1\r\n4\r\n1\r\n3\r\n-1\r\n2\r\n2\r\n1\r\n3\r\n-1\r\n-1\r\n-1\r\n-1\r\n3\r\n4\r\n-1\r\n"
            ],
            [
                "100\r\n611\r\n513\r\n544\r\n463\r\n38\r\n778\r\n347\r\n317\r\n848\r\n664\r\n382\r\n108\r\n718\r\n33\r\n334\r\n876\r\n234\r\n22\r\n944\r\n305\r\n159\r\n245\r\n513\r\n691\r\n639\r\n135\r\n308\r\n324\r\n813\r\n459\r\n304\r\n116\r\n331\r\n993\r\n184\r\n224\r\n853\r\n769\r\n121\r\n687\r\n93\r\n930\r\n751\r\n308\r\n485\r\n914\r\n400\r\n695\r\n95\r\n981\r\n175\r\n972\r\n121\r\n654\r\n242\r\n610\r\n617\r\n999\r\n237\r\n548\r\n742\r\n767\r\n613\r\n172\r\n223\r\n391\r\n102\r\n907\r\n673\r\n116\r\n230\r\n355\r\n189\r\n552\r\n399\r\n493\r\n903\r\n201\r\n985\r\n459\r\n776\r\n641\r\n693\r\n919\r\n253\r\n540\r\n427\r\n394\r\n655\r\n101\r\n461\r\n854\r\n417\r\n249\r\n66\r\n380\r\n213\r\n906\r\n212\r\n528\r\n",
                "151\r\n127\r\n136\r\n114\r\n9\r\n194\r\n85\r\n78\r\n212\r\n166\r\n95\r\n27\r\n179\r\n7\r\n83\r\n219\r\n58\r\n5\r\n236\r\n75\r\n38\r\n60\r\n127\r\n171\r\n158\r\n32\r\n77\r\n81\r\n202\r\n113\r\n76\r\n29\r\n81\r\n247\r\n46\r\n56\r\n212\r\n191\r\n29\r\n170\r\n22\r\n232\r\n186\r\n77\r\n120\r\n228\r\n100\r\n172\r\n22\r\n244\r\n42\r\n243\r\n29\r\n163\r\n60\r\n152\r\n153\r\n248\r\n58\r\n137\r\n185\r\n190\r\n152\r\n43\r\n54\r\n96\r\n25\r\n225\r\n167\r\n29\r\n57\r\n87\r\n46\r\n138\r\n98\r\n122\r\n224\r\n49\r\n245\r\n113\r\n194\r\n159\r\n172\r\n228\r\n62\r\n135\r\n105\r\n98\r\n162\r\n24\r\n114\r\n213\r\n103\r\n61\r\n16\r\n95\r\n52\r\n226\r\n53\r\n132\r\n"
            ],
            [
                "1\r\n10000001\r\n",
                "2499999\r\n"
            ]
        ]
    }
]