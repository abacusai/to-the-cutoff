[
    {
        "name": "Elevator",
        "description": "And now the numerous qualifying tournaments for one of the most prestigious\nRussian contests Russian Codec Cup are over. All n participants who have made\nit to the finals found themselves in a huge m-floored 10^8-star hotel. Of\ncourse the first thought to come in a place like this is \"How about checking\nout the elevator?\". The hotel's elevator moves between floors according to one\nnever changing scheme. Initially (at the moment of time 0) the elevator is\nlocated on the 1-st floor, then it moves to the 2-nd floor, then \u2014 to the 3-rd\nfloor and so on until it reaches the m-th floor. After that the elevator moves\nto floor m - 1, then to floor m - 2, and so on until it reaches the first\nfloor. This process is repeated infinitely. We know that the elevator has\ninfinite capacity; we also know that on every floor people get on the elevator\nimmediately. Moving between the floors takes a unit of time. For each of the n\nparticipant you are given si, which represents the floor where the i-th\nparticipant starts, fi, which represents the floor the i-th participant wants\nto reach, and ti, which represents the time when the i-th participant starts\non the floor si. For each participant print the minimum time of his/her\narrival to the floor fi. If the elevator stops on the floor si at the time ti,\nthen the i-th participant can enter the elevator immediately. If the\nparticipant starts on the floor si and that's the floor he wanted to reach\ninitially (si = fi), then the time of arrival to the floor fi for this\nparticipant is considered equal to ti. Input The first line contains two\nspace-separated integers n and m (1 \u2264 n \u2264 10^5, 2 \u2264 m \u2264 10^8). Next n lines\ncontain information about the participants in the form of three space-\nseparated integers si fi ti (1 \u2264 si, fi \u2264 m, 0 \u2264 ti \u2264 10^8), described in the\nproblem statement. Output Print n lines each containing one integer \u2014 the time\nof the arrival for each participant to the required floor. Examples Input 7 4\n2 4 3 1 2 0 2 2 0 1 2 1 4 3 5 1 2 2 4 2 0 Output 9 1 0 7 10 7 5 Input 5 5 1 5\n4 1 3 1 1 3 4 3 1 5 4 2 5 Output 12 10 10 8 7 Note Let's consider the first\nsample. The first participant starts at floor s = 2 by the time equal to t =\n3. To get to the floor f = 4, he has to wait until the time equals 7, that's\nthe time when the elevator will go upwards for the second time. Then the first\nparticipant should get on the elevator and go two floors up. In this case the\nfirst participant gets to the floor f at time equal to 9. The second\nparticipant starts at the time t = 0 on the floor s = 1, enters the elevator\nimmediately, and arrives to the floor f = 2. The third participant doesn't\nwait for the elevator, because he needs to arrive to the same floor where he\nstarts.\n\n",
        "cf_contest_id": 117,
        "cf_index": "A",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 4\r\n2 4 3\r\n1 2 0\r\n2 2 0\r\n1 2 1\r\n4 3 5\r\n1 2 2\r\n4 2 0\r\n",
                "9\r\n1\r\n0\r\n7\r\n10\r\n7\r\n5\r\n"
            ],
            [
                "5 5\r\n1 5 4\r\n1 3 1\r\n1 3 4\r\n3 1 5\r\n4 2 5\r\n",
                "12\r\n10\r\n10\r\n8\r\n7\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 5\r\n1 3 4\r\n4 4 2\r\n3 2 1\r\n2 4 0\r\n1 5 3\r\n",
                "10\r\n2\r\n7\r\n3\r\n12\r\n"
            ],
            [
                "8 5\r\n2 2 91\r\n5 1 97\r\n5 1 36\r\n5 4 19\r\n2 5 50\r\n4 2 1\r\n1 4 9\r\n3 2 32\r\n",
                "91\r\n104\r\n40\r\n21\r\n60\r\n7\r\n19\r\n39\r\n"
            ],
            [
                "7 5\r\n2 2 85\r\n4 3 76\r\n4 1 17\r\n5 4 70\r\n2 5 3\r\n3 3 14\r\n3 1 51\r\n",
                "85\r\n78\r\n24\r\n77\r\n12\r\n14\r\n56\r\n"
            ],
            [
                "5 2\r\n1 2 0\r\n2 1 1\r\n2 2 0\r\n2 2 5\r\n2 1 4\r\n",
                "1\r\n2\r\n0\r\n5\r\n6\r\n"
            ],
            [
                "1 2\r\n1 1 3\r\n",
                "3\r\n"
            ],
            [
                "2 2\r\n2 2 3\r\n2 1 5\r\n",
                "3\r\n6\r\n"
            ],
            [
                "3 4\r\n2 4 7\r\n3 3 1\r\n2 2 9\r\n",
                "9\r\n1\r\n9\r\n"
            ],
            [
                "2 100000000\r\n2 1 3\r\n99999999 100000000 100000000\r\n",
                "199999998\r\n299999997\r\n"
            ]
        ]
    }
]