[
    {
        "name": "Chessboard",
        "description": "Magnus decided to play a classic chess game. Though what he saw in his locker\nshocked him! His favourite chessboard got broken into 4 pieces, each of size n\nby n, n is always odd. And what's even worse, some squares were of wrong\ncolor. j-th square of the i-th row of k-th piece of the board has color ak, i,\nj; 1 being black and 0 being white. Now Magnus wants to change color of some\nsquares in such a way that he recolors minimum number of squares and obtained\npieces form a valid chessboard. Every square has its color different to each\nof the neightbouring by side squares in a valid board. Its size should be 2n\nby 2n. You are allowed to move pieces but not allowed to rotate or flip them.\nInput The first line contains odd integer n (1 \u2264 n \u2264 100) \u2014 the size of all\npieces of the board. Then 4 segments follow, each describes one piece of the\nboard. Each consists of n lines of n characters; j-th one of i-th line is\nequal to 1 if the square is black initially and 0 otherwise. Segments are\nseparated by an empty line. Output Print one number \u2014 minimum number of\nsquares Magnus should recolor to be able to obtain a valid chessboard.\nExamples Input 1 0 0 1 0 Output 1 Input 3 101 010 101 101 000 101 010 101 011\n010 101 010 Output 2\n\n",
        "cf_contest_id": 961,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n0\r\n\r\n0\r\n\r\n1\r\n\r\n0\r\n",
                "1\n"
            ],
            [
                "3\r\n101\r\n010\r\n101\r\n\r\n101\r\n000\r\n101\r\n\r\n010\r\n101\r\n011\r\n\r\n010\r\n101\r\n010\r\n",
                "2\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n000\r\n000\r\n000\r\n\r\n111\r\n111\r\n111\r\n\r\n111\r\n111\r\n111\r\n\r\n000\r\n000\r\n000\r\n",
                "16\n"
            ],
            [
                "3\r\n101\r\n010\r\n101\r\n\r\n101\r\n010\r\n101\r\n\r\n101\r\n010\r\n101\r\n\r\n101\r\n010\r\n101\r\n",
                "18\n"
            ],
            [
                "1\r\n1\r\n\r\n0\r\n\r\n1\r\n\r\n0\r\n",
                "0\n"
            ],
            [
                "1\r\n0\r\n\r\n0\r\n\r\n1\r\n\r\n1\r\n",
                "0\n"
            ],
            [
                "1\r\n1\r\n\r\n1\r\n\r\n0\r\n\r\n1\r\n",
                "1\n"
            ],
            [
                "1\r\n0\r\n\r\n0\r\n\r\n0\r\n\r\n0\r\n",
                "2\n"
            ],
            [
                "1\r\n1\r\n\r\n1\r\n\r\n0\r\n\r\n0\r\n",
                "0\n"
            ]
        ]
    }
]