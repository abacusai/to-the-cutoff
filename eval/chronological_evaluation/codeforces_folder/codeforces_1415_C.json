[
    {
        "name": "Bouncing Ball",
        "description": "You're creating a game level for some mobile game. The level should contain\nsome number of cells aligned in a row from left to right and numbered with\nconsecutive integers starting from \n    1\n, and in each cell you can either\nput a platform or leave it empty. In order to pass a level, a player must\nthrow a ball from the left so that it first lands on a platform in the cell\n\n    p\n, then bounces off it, then bounces off a platform in the cell \n    (p +\n    k)\n, then a platform in the cell \n    (p + 2k)\n, and so on every \n    k\n-th\nplatform until it goes farther than the last cell. If any of these cells has\nno platform, you can't pass the level with these \n    p\n and \n    k\n. You\nalready have some level pattern \n    a_1\n, \n    a_2\n, \n    a_3\n, ...,\n\n    a_n\n, where \n    a_i = 0\n means there is no platform in the cell \n    i\n,\nand \n    a_i = 1\n means there is one. You want to modify it so that the level\ncan be passed with given \n    p\n and \n    k\n. In \n    x\n seconds you can add a\nplatform in some empty cell. In \n    y\n seconds you can remove the first cell\ncompletely, reducing the number of cells by one, and renumerating the other\ncells keeping their order. You can't do any other operation. You can not\nreduce the number of cells to less than \n    p\n. Illustration for the third\nexample test case. Crosses mark deleted cells. Blue platform is the newly\nadded. What is the minimum number of seconds you need to make this level\npassable with given \n    p\n and \n    k\n? Input The first line contains the\nnumber of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n). Description of test\ncases follows. The first line of each test case contains three integers\n\n    n\n, \n    p\n, and \n    k\n (\n    1 \n    \u2264 p \n    \u2264 n \n    \u2264 10^5\n, \n    1 \n    \u2264\n    k \n    \u2264 n\n) \u2014 the number of cells you have, the first cell that should\ncontain a platform, and the period of ball bouncing required. The second line\nof each test case contains a string \n    a_1 a_2 a_3 \n    \u2026 a_n\n (\n    a_i =\n    0\n or \n    a_i = 1\n) \u2014 the initial pattern written without spaces. The last\nline of each test case contains two integers \n    x\n and \n    y\n (\n    1 \n    \u2264\n    x, y \n    \u2264 10^4\n) \u2014 the time required to add a platform and to remove the\nfirst cell correspondingly. The sum of \n    n\n over test cases does not exceed\n\n    10^5\n. Output For each test case output a single integer \u2014 the minimum\nnumber of seconds you need to modify the level accordingly. It can be shown\nthat it is always possible to make the level passable. Example Input 3 10 3 2\n0101010101 2 2 5 4 1 00000 2 10 11 2 3 10110011000 4 3 Output 2 4 10 Note In\nthe first test case it's best to just remove the first cell, after that all\nrequired platforms are in their places: 0101010101. The stroked out digit is\nremoved, the bold ones are where platforms should be located. The time\nrequired is \n    y = 2\n. In the second test case it's best to add a platform\nto both cells \n    4\n and \n    5\n: 00000 \n    \u2192\n 00011. The time required\nis \n    x \n    \u00b7 2 = 4\n. In the third test case it's best to to remove the\nfirst cell twice and then add a platform to the cell which was initially\n\n    10\n-th: 10110011000 \n    \u2192\n 10110011010. The time required is \n    y\n    \n    \u00b7 2 + x = 10\n.\n\n",
        "cf_contest_id": 1415,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dp",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n10 3 2\r\n0101010101\r\n2 2\r\n5 4 1\r\n00000\r\n2 10\r\n11 2 3\r\n10110011000\r\n4 3\r\n",
                "2\r\n4\r\n10\r\n"
            ]
        ],
        "private_cases": [
            [
                "16\r\n2 2 1\r\n10\r\n11 1\r\n2 1 2\r\n01\r\n5 6\r\n2 2 2\r\n11\r\n9 11\r\n2 2 2\r\n00\r\n8 3\r\n2 2 2\r\n10\r\n9 10\r\n2 1 2\r\n11\r\n7 2\r\n2 2 1\r\n01\r\n3 1\r\n2 1 2\r\n00\r\n5 4\r\n2 2 2\r\n01\r\n2 7\r\n2 1 1\r\n11\r\n6 3\r\n2 1 2\r\n10\r\n7 1\r\n2 1 1\r\n01\r\n9 10\r\n2 2 1\r\n00\r\n11 3\r\n2 1 1\r\n00\r\n4 10\r\n2 2 1\r\n11\r\n7 8\r\n2 1 1\r\n10\r\n10 4\r\n",
                "11\r\n5\r\n0\r\n8\r\n9\r\n0\r\n0\r\n5\r\n0\r\n0\r\n0\r\n9\r\n11\r\n8\r\n0\r\n10\r\n"
            ],
            [
                "2\r\n10 1 1\r\n0000000000\r\n1 1\r\n5 4 1\r\n00000\r\n2 10\r\n",
                "10\r\n4\r\n"
            ],
            [
                "2\r\n18 1 3\r\n001001001001001001\r\n2 5\r\n6 1 3\r\n001001\r\n2 5\r\n",
                "10\r\n4\r\n"
            ],
            [
                "2\r\n14 1 1\r\n00000000000000\r\n1224 1124\r\n1 1 1\r\n1\r\n12 12\r\n",
                "15836\r\n0\r\n"
            ]
        ]
    }
]