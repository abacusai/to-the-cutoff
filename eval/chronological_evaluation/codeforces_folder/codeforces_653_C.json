[
    {
        "name": "Bear and Up-Down",
        "description": "The life goes up and down, just like nice sequences. Sequence t1, t2, ..., tn\nis called nice if the following two conditions are satisfied: ti < ti + 1 for\neach odd i < n; ti > ti + 1 for each even i < n. For example, sequences (2,\n8), (1, 5, 1) and (2, 5, 1, 100, 99, 120) are nice, while (1, 1), (1, 2, 3)\nand (2, 5, 3, 2) are not. Bear Limak has a sequence of positive integers t1,\nt2, ..., tn. This sequence is not nice now and Limak wants to fix it by a\nsingle swap. He is going to choose two indices i < j and swap elements ti and\ntj in order to get a nice sequence. Count the number of ways to do so. Two\nways are considered different if indices of elements chosen for a swap are\ndifferent. Input The first line of the input contains one integer n (2 \u2264 n \u2264\n150 000) \u2014 the length of the sequence. The second line contains n integers t1,\nt2, ..., tn (1 \u2264 ti \u2264 150 000) \u2014 the initial sequence. It's guaranteed that\nthe given sequence is not nice. Output Print the number of ways to swap two\nelements exactly once in order to get a nice sequence. Examples Input 5 2 8 4\n7 7 Output 2 Input 4 200 150 100 50 Output 1 Input 10 3 2 1 4 1 4 1 4 1 4\nOutput 8 Input 9 1 2 3 4 5 6 7 8 9 Output 0 Note In the first sample, there\nare two ways to get a nice sequence with one swap: Swap t2 = 8 with t4 = 7.\nSwap t1 = 2 with t5 = 7. In the second sample, there is only one way \u2014 Limak\nshould swap t1 = 200 with t4 = 50.\n\n",
        "cf_contest_id": 653,
        "cf_index": "C",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n2 8 4 7 7\r\n",
                "2\n"
            ],
            [
                "4\r\n200 150 100 50\r\n",
                "1\n"
            ],
            [
                "10\r\n3 2 1 4 1 4 1 4 1 4\r\n",
                "8\n"
            ],
            [
                "9\r\n1 2 3 4 5 6 7 8 9\r\n",
                "0\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n1 1 1 4 3\r\n",
                "1\n"
            ],
            [
                "10\r\n7 7 8 10 5 10 1 5 2 6\r\n",
                "2\n"
            ],
            [
                "50\r\n11836 28308 72527 92281 139289 93797 134555 148444 40866 111317 21564 87813 65466 20541 99238 2287 74647 128071 18163 61672 39766 55589 138385 147443 138100 142683 60703 15444 52566 72976 147412 116006 115986 110545 79993 100440 9876 71470 75209 62443 64906 88987 72232 2246 63160 45041 729 148611 103397 78474\r\n",
                "0\n"
            ],
            [
                "10\r\n522 309 276 454 566 978 175 388 289 276\r\n",
                "0\n"
            ],
            [
                "20\r\n8 9 1 10 7 9 5 8 5 7 5 6 1 3 2 7 3 2 6 9\r\n",
                "3\n"
            ],
            [
                "25\r\n25 20 58 95 47 68 38 39 24 83 36 68 28 67 25 40 62 99 11 88 74 75 38 90 42\r\n",
                "1\n"
            ],
            [
                "30\r\n18647 31594 58075 122543 49766 65303 48728 102863 22542 140297 5300 90685 50141 86948 27074 40214 17945 147095 97758 140835 121469 139920 63817 138623 85609 110002 70046 128002 122139 116109\r\n",
                "1\n"
            ],
            [
                "39\r\n18329 39326 21115 36341 3916 40060 23262 41923 17476 42107 17052 23198 10756 32540 14873 28454 23912 35765 9459 45834 85 46756 31859 40087 35420 47585 9781 46544 31859 49453 7394 17459 2816 34051 12519 4077 692 44098 23345\r\n",
                "15\n"
            ],
            [
                "2\r\n5 1\r\n",
                "1\n"
            ],
            [
                "2\r\n10 10\r\n",
                "0\n"
            ],
            [
                "6\r\n1 1 1 2 2 2\r\n",
                "1\n"
            ],
            [
                "12\r\n10 15 10 15 10 8 10 15 10 20 30 20\r\n",
                "1\n"
            ]
        ]
    }
]