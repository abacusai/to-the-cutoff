[
    {
        "name": "Smaller",
        "description": "Alperen has two strings, \n    s\n and \n    t\n which are both initially equal to\n\"a\". He will perform \n    q\n operations of two types on the given strings:\n\n    1 \n     \n      k \n     \n      x\n \u2014 Append the string \n    x\n exactly \n    k\n\ntimes at the end of string \n    s\n. In other words, \n    s := s +\n    \n    x + \n    \u2026 + x_k \n     times\n. \n    2 \n     \n      k\n    \n     \n      x\n \u2014 Append the string \n    x\n exactly \n    k\n times at the end of\nstring \n    t\n. In other words, \n    t := t + \n    x + \n    \u2026 + x_k\n    \n     times\n. After each operation, determine if it is possible to\nrearrange the characters of \n    s\n and \n    t\n such that \n    s\n is\nlexicographically smaller\n    ^\n    \u2020\n than \n    t\n. Note that the\nstrings change after performing each operation and don't go back to their\ninitial states. \n    ^\n    \u2020\n Simply speaking, the lexicographical order\nis the order in which words are listed in a dictionary. A formal definition is\nas follows: string \n    p\n is lexicographically smaller than string \n    q\n if\nthere exists a position \n    i\n such that \n    p_i < q_i\n, and for all \n    j <\n    i\n, \n    p_j = q_j\n. If no such \n    i\n exists, then \n    p\n is\nlexicographically smaller than \n    q\n if the length of \n    p\n is less than\nthe length of \n    q\n. For example, \n    <\n and\n\n    <\n, where we write \n    p < q\n if \n    p\n\nis lexicographically smaller than \n    q\n. Input The first line of the input\ncontains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of\ntest cases. The first line of each test case contains an integer \n    q\n \n    (1\n    \n    \u2264 q \n    \u2264 10^5)\n \u2014 the number of operations Alperen will perform. Then\n\n    q\n lines follow, each containing two positive integers \n    d\n and\n\n    k\n (\n    1 \n    \u2264 d \n    \u2264 2\n; \n    1 \n    \u2264 k \n    \u2264 10^5\n) and a non-\nempty string \n    x\n consisting of lowercase English letters \u2014 the type of the\noperation, the number of times we will append string \n    x\n and the string we\nneed to append respectively. It is guaranteed that the sum of \n    q\n over all\ntest cases doesn't exceed \n    10^5\n and that the sum of lengths of all\nstrings \n    x\n in the input doesn't exceed \n    5 \n    \u00b7 10^5\n. Output For\neach operation, output \"YES\", if it is possible to arrange the elements in\nboth strings in such a way that \n    s\n is lexicographically smaller than\n\n    t\n and \"NO\" otherwise. Example Input 3 5 2 1 aa 1 2 a 2 3 a 1 2 b 2 3\nabca 2 1 5 mihai 2 2 buiucani 3 1 5 b 2 3 a 2 4 paiu Output YES NO YES NO YES\nNO YES NO NO YES Note In the first test case, the strings are initially \n    s =\n \"a\" and \n    t =\n \"a\". After the first operation the string \n    t\n\nbecomes \"aaa\". Since \"a\" is already lexicographically smaller than \"aaa\", the\nanswer for this operation should be \"YES\". After the second operation string\n\n    s\n becomes \"aaa\", and since \n    t\n is also equal to \"aaa\", we can't\narrange \n    s\n in any way such that it is lexicographically smaller than\n\n    t\n, so the answer is \"NO\". After the third operation string \n    t\n\nbecomes \"aaaaaa\" and \n    s\n is already lexicographically smaller than it so\nthe answer is \"YES\". After the fourth operation \n    s\n becomes \"aaabb\" and\nthere is no way to make it lexicographically smaller than \"aaaaaa\" so the\nanswer is \"NO\". After the fifth operation the string \n    t\n becomes\n\"aaaaaaabcaabcaabca\", and we can rearrange the strings to: \"bbaaa\" and\n\"caaaaaabcaabcaabaa\" so that \n    s\n is lexicographically smaller than\n\n    t\n, so we should answer \"YES\".\n\n",
        "cf_contest_id": 1742,
        "cf_index": "F",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n5\r\n2 1 aa\r\n1 2 a\r\n2 3 a\r\n1 2 b\r\n2 3 abca\r\n2\r\n1 5 mihai\r\n2 2 buiucani\r\n3\r\n1 5 b\r\n2 3 a\r\n2 4 paiu\r\n",
                "YES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n5\r\n2 1 bb\r\n1 2 b\r\n2 3 b\r\n1 2 c\r\n2 3 bcdbweakpretests\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\n"
            ],
            [
                "1\r\n2\r\n1 1 ab\r\n2 1 ab\r\n",
                "NO\r\nYES\r\n"
            ],
            [
                "1\r\n2\r\n1 3 c\r\n2 3 b\r\n",
                "NO\r\nYES\r\n"
            ],
            [
                "1\r\n3\r\n2 1 z\r\n2 1 a\r\n1 1 z\r\n",
                "YES\r\nYES\r\nYES\r\n"
            ],
            [
                "1\r\n2\r\n1 1 b\r\n2 1 b\r\n",
                "NO\r\nYES\r\n"
            ],
            [
                "1\r\n2\r\n2 1 b\r\n1 1 b\r\n",
                "YES\r\nYES\r\n"
            ],
            [
                "1\r\n2\r\n1 2 zz\r\n2 2 zz\r\n",
                "NO\r\nYES\r\n"
            ],
            [
                "1\r\n2\r\n1 1 c\r\n2 1 b\r\n",
                "NO\r\nYES\r\n"
            ],
            [
                "1\r\n2\r\n1 1 z\r\n2 1 z\r\n",
                "NO\r\nYES\r\n"
            ],
            [
                "1\r\n4\r\n1 1 b\r\n1 1 c\r\n2 1 b\r\n2 1 c\r\n",
                "NO\r\nNO\r\nYES\r\nYES\r\n"
            ],
            [
                "1\r\n2\r\n2 1 b\r\n1 2 bb\r\n",
                "YES\r\nYES\r\n"
            ],
            [
                "1\r\n2\r\n2 1 bb\r\n1 2 b\r\n",
                "YES\r\nYES\r\n"
            ],
            [
                "1\r\n2\r\n1 1 c\r\n2 1 c\r\n",
                "NO\r\nYES\r\n"
            ],
            [
                "1\r\n2\r\n1 3 c\r\n2 3 c\r\n",
                "NO\r\nYES\r\n"
            ],
            [
                "1\r\n2\r\n2 1 a\r\n1 1 z\r\n",
                "YES\r\nNO\r\n"
            ],
            [
                "1\r\n8\r\n2 7 z\r\n1 2 xpt\r\n2 5 aosu\r\n2 3 veel\r\n1 3 dnx\r\n1 8 tgly\r\n2 5 rqlmvchcir\r\n1 10 qklu\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\nYES\r\n"
            ]
        ]
    }
]