[
    {
        "name": "Half Queen Cover",
        "description": "You are given a board with \n    n\n rows and \n    n\n columns, numbered from\n\n    1\n to \n    n\n. The intersection of the \n    a\n-th row and \n    b\n-th\ncolumn is denoted by \n    (a, b)\n. A half-queen attacks cells in the same row,\nsame column, and on one diagonal. More formally, a half-queen on \n    (a, b)\n\nattacks the cell \n    (c, d)\n if \n    a=c\n or \n    b=d\n or \n    a-b=c-d\n. The\nblue cells are under attack. What is the minimum number of half-queens that\ncan be placed on that board so as to ensure that each square is attacked by at\nleast one half-queen?Construct an optimal solution. Input The first line\ncontains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the size of\nthe board. Output In the first line print a single integer \n    k\n \u2014 the\nminimum number of half-queens. In each of the next \n    k\n lines print two\nintegers \n    a_i\n, \n    b_i\n (\n    1 \n    \u2264 a_i, b_i \n    \u2264 n\n) \u2014 the position\nof the \n    i\n-th half-queen. If there are multiple solutions, print any.\nExamples Input 1 Output 1 1 1 Input 2 Output 1 1 1 Input 3 Output 2 1 1 1 2\nNote Example \n    1\n: one half-queen is enough. Note: a half-queen on \n    (1,\n    1)\n attacks \n    (1, 1)\n. Example \n    2\n: one half-queen is enough too.\n\n    (1, 2)\n or \n    (2, 1)\n would be wrong solutions, because a half-queen on\n\n    (1, 2)\n does not attack the cell \n    (2, 1)\n and vice versa. \n    (2,\n    2)\n is also a valid solution. Example \n    3\n: it is impossible to cover the\nboard with one half queen. There are multiple solutions for \n    2\n half-\nqueens; you can print any of them.\n\n",
        "cf_contest_id": 1667,
        "cf_index": "C",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n",
                "1\r\n1 1\r\n"
            ],
            [
                "2\r\n",
                "1\r\n1 1\r\n"
            ],
            [
                "3\r\n",
                "2\r\n1 1\r\n2 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "100\r\n",
                "67\r\n1 1\r\n2 3\r\n3 5\r\n4 7\r\n5 9\r\n6 11\r\n7 13\r\n8 15\r\n9 17\r\n10 19\r\n11 21\r\n12 23\r\n13 25\r\n14 27\r\n15 29\r\n16 31\r\n17 33\r\n18 35\r\n19 37\r\n20 39\r\n21 41\r\n22 43\r\n23 45\r\n24 47\r\n25 49\r\n26 51\r\n27 53\r\n28 55\r\n29 57\r\n30 59\r\n31 61\r\n32 63\r\n33 65\r\n34 67\r\n35 2\r\n36 4\r\n37 6\r\n38 8\r\n39 10\r\n40 12\r\n41 14\r\n42 16\r\n43 18\r\n44 20\r\n45 22\r\n46 24\r\n47 26\r\n48 28\r\n49 30\r\n50 32\r\n51 34\r\n52 36\r\n53 38\r\n54 40\r\n55 42\r\n56 44\r\n57 46\r\n58 48\r\n59 50\r\n60 52\r\n61 54\r\n62 56\r\n63 58\r\n64 60\r\n65 62\r\n66 64\r\n67 66\r\n"
            ],
            [
                "101\r\n",
                "67\r\n1 1\r\n2 3\r\n3 5\r\n4 7\r\n5 9\r\n6 11\r\n7 13\r\n8 15\r\n9 17\r\n10 19\r\n11 21\r\n12 23\r\n13 25\r\n14 27\r\n15 29\r\n16 31\r\n17 33\r\n18 35\r\n19 37\r\n20 39\r\n21 41\r\n22 43\r\n23 45\r\n24 47\r\n25 49\r\n26 51\r\n27 53\r\n28 55\r\n29 57\r\n30 59\r\n31 61\r\n32 63\r\n33 65\r\n34 67\r\n35 2\r\n36 4\r\n37 6\r\n38 8\r\n39 10\r\n40 12\r\n41 14\r\n42 16\r\n43 18\r\n44 20\r\n45 22\r\n46 24\r\n47 26\r\n48 28\r\n49 30\r\n50 32\r\n51 34\r\n52 36\r\n53 38\r\n54 40\r\n55 42\r\n56 44\r\n57 46\r\n58 48\r\n59 50\r\n60 52\r\n61 54\r\n62 56\r\n63 58\r\n64 60\r\n65 62\r\n66 64\r\n67 66\r\n"
            ],
            [
                "102\r\n",
                "68\r\n1 1\r\n2 3\r\n3 5\r\n4 7\r\n5 9\r\n6 11\r\n7 13\r\n8 15\r\n9 17\r\n10 19\r\n11 21\r\n12 23\r\n13 25\r\n14 27\r\n15 29\r\n16 31\r\n17 33\r\n18 35\r\n19 37\r\n20 39\r\n21 41\r\n22 43\r\n23 45\r\n24 47\r\n25 49\r\n26 51\r\n27 53\r\n28 55\r\n29 57\r\n30 59\r\n31 61\r\n32 63\r\n33 65\r\n34 67\r\n35 2\r\n36 4\r\n37 6\r\n38 8\r\n39 10\r\n40 12\r\n41 14\r\n42 16\r\n43 18\r\n44 20\r\n45 22\r\n46 24\r\n47 26\r\n48 28\r\n49 30\r\n50 32\r\n51 34\r\n52 36\r\n53 38\r\n54 40\r\n55 42\r\n56 44\r\n57 46\r\n58 48\r\n59 50\r\n60 52\r\n61 54\r\n62 56\r\n63 58\r\n64 60\r\n65 62\r\n66 64\r\n67 66\r\n68 68\r\n"
            ],
            [
                "4\r\n",
                "3\r\n1 1\r\n2 3\r\n3 2\r\n"
            ],
            [
                "7\r\n",
                "5\r\n1 1\r\n2 3\r\n3 5\r\n4 2\r\n5 4\r\n"
            ],
            [
                "5\r\n",
                "3\r\n1 1\r\n2 3\r\n3 2\r\n"
            ],
            [
                "6\r\n",
                "4\r\n1 1\r\n2 3\r\n3 2\r\n4 4\r\n"
            ],
            [
                "20\r\n",
                "13\r\n1 1\r\n2 3\r\n3 5\r\n4 7\r\n5 9\r\n6 11\r\n7 13\r\n8 2\r\n9 4\r\n10 6\r\n11 8\r\n12 10\r\n13 12\r\n"
            ],
            [
                "21\r\n",
                "14\r\n1 1\r\n2 3\r\n3 5\r\n4 7\r\n5 9\r\n6 11\r\n7 13\r\n8 2\r\n9 4\r\n10 6\r\n11 8\r\n12 10\r\n13 12\r\n14 14\r\n"
            ],
            [
                "22\r\n",
                "15\r\n1 1\r\n2 3\r\n3 5\r\n4 7\r\n5 9\r\n6 11\r\n7 13\r\n8 15\r\n9 2\r\n10 4\r\n11 6\r\n12 8\r\n13 10\r\n14 12\r\n15 14\r\n"
            ]
        ]
    }
]