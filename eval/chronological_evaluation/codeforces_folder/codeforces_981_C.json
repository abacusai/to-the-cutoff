[
    {
        "name": "Useful Decomposition",
        "description": "Ramesses knows a lot about problems involving trees (undirected connected\ngraphs without cycles)! He created a new useful tree decomposition, but he\ndoes not know how to construct it, so he asked you for help! The decomposition\nis the splitting the edges of the tree in some simple paths in such a way that\neach two paths have at least one common vertex. Each edge of the tree should\nbe in exactly one path. Help Remesses, find such a decomposition of the tree\nor derermine that there is no such decomposition. Input The first line\ncontains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 10^5\n) the number\nof nodes in the tree. Each of the next \n    n - 1\n lines contains two integers\n\n    a_i\n and \n    b_i\n (\n    1 \n    \u2264 a_i, b_i \n    \u2264 n\n, \n    a_i \n    \u2260\n    b_i\n) \u2014 the edges of the tree. It is guaranteed that the given edges form a\ntree. Output If there are no decompositions, print the only line containing\n\"No\". Otherwise in the first line print \"Yes\", and in the second line print\nthe number of paths in the decomposition \n    m\n. Each of the next \n    m\n\nlines should contain two integers \n    u_i\n, \n    v_i\n (\n    1 \n    \u2264 u_i, v_i\n    \n    \u2264 n\n, \n    u_i \n    \u2260 v_i\n) denoting that one of the paths in the\ndecomposition is the simple path between nodes \n    u_i\n and \n    v_i\n. Each\npair of paths in the decomposition should have at least one common vertex, and\neach edge of the tree should be presented in exactly one path. You can print\nthe paths and the ends of each path in arbitrary order. If there are multiple\ndecompositions, print any. Examples Input 4 1 2 2 3 3 4 Output Yes 1 1 4 Input\n6 1 2 2 3 3 4 2 5 3 6 Output No Input 5 1 2 1 3 1 4 1 5 Output Yes 4 1 2 1 3 1\n4 1 5 Note The tree from the first example is shown on the picture below: The\nnumber next to each edge corresponds to the path number in the decomposition.\nIt is easy to see that this decomposition suits the required conditions. The\ntree from the second example is shown on the picture below: We can show that\nthere are no valid decompositions of this tree. The tree from the third\nexample is shown on the picture below: The number next to each edge\ncorresponds to the path number in the decomposition. It is easy to see that\nthis decomposition suits the required conditions.\n\n",
        "cf_contest_id": 981,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 2\r\n2 3\r\n3 4\r\n",
                "Yes\r\n1\r\n4 1\r\n"
            ],
            [
                "6\r\n1 2\r\n2 3\r\n3 4\r\n2 5\r\n3 6\r\n",
                "No"
            ],
            [
                "5\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n",
                "Yes\r\n4\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 2\r\n",
                "Yes\r\n1\r\n2 1\r\n"
            ],
            [
                "8\r\n1 2\r\n1 3\r\n1 4\r\n1 8\r\n7 8\r\n6 8\r\n5 8\r\n",
                "No"
            ],
            [
                "9\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n6 7\r\n7 8\r\n7 9\r\n",
                "No"
            ],
            [
                "3\r\n2 3\r\n1 2\r\n",
                "Yes\r\n1\r\n3 1\r\n"
            ]
        ]
    }
]