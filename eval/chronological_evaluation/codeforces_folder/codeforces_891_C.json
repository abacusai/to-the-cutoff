[
    {
        "name": "Envy",
        "description": "For a connected undirected weighted graph G, MST (minimum spanning tree) is a\nsubgraph of G that contains all of G's vertices, is a tree, and sum of its\nedges is minimum possible. You are given a graph G. If you run a MST algorithm\non graph it would give you only one MST and it causes other edges to become\njealous. You are given some queries, each query contains a set of edges of\ngraph G, and you should determine whether there is a MST containing all these\nedges or not. Input The first line contains two integers n, m (2 \u2264 n, m \u2264\n5\u00b710^5, n - 1 \u2264 m) \u2014 the number of vertices and edges in the graph and the\nnumber of queries. The i-th of the next m lines contains three integers ui,\nvi, wi (ui \u2260 vi, 1 \u2264 wi \u2264 5\u00b710^5) \u2014 the endpoints and weight of the i-th edge.\nThere can be more than one edges between two vertices. It's guaranteed that\nthe given graph is connected. The next line contains a single integer q (1 \u2264 q\n\u2264 5\u00b710^5) \u2014 the number of queries. q lines follow, the i-th of them contains\nthe i-th query. It starts with an integer ki (1 \u2264 ki \u2264 n - 1) \u2014 the size of\nedges subset and continues with ki distinct space-separated integers from 1 to\nm \u2014 the indices of the edges. It is guaranteed that the sum of ki for 1 \u2264 i \u2264\nq does not exceed 5\u00b710^5. Output For each query you should print \"YES\"\n(without quotes) if there's a MST containing these edges and \"NO\" (of course\nwithout quotes again) otherwise. Example Input 5 7 1 2 2 1 3 2 2 3 1 2 4 1 3 4\n1 3 5 2 4 5 2 4 2 3 4 3 3 4 5 2 1 7 2 1 2 Output YES NO YES NO Note This is\nthe graph of sample: Weight of minimum spanning tree on this graph is 6. MST\nwith edges (1, 3, 4, 6), contains all of edges from the first query, so answer\non the first query is \"YES\". Edges from the second query form a cycle of\nlength 3, so there is no spanning tree including these three edges. Thus,\nanswer is \"NO\".\n\n",
        "cf_contest_id": 891,
        "cf_index": "C",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dsu",
            "graphs"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 7\r\n1 2 2\r\n1 3 2\r\n2 3 1\r\n2 4 1\r\n3 4 1\r\n3 5 2\r\n4 5 2\r\n4\r\n2 3 4\r\n3 3 4 5\r\n2 1 7\r\n2 1 2\r\n",
                "YES\r\nNO\r\nYES\r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 8\r\n2 1 4\r\n3 1 4\r\n4 1 5\r\n5 2 3\r\n4 5 2\r\n4 5 4\r\n1 4 4\r\n3 4 2\r\n10\r\n1 1\r\n3 4 1 5\r\n1 2\r\n3 4 1 3\r\n2 4 3\r\n3 2 5 4\r\n2 2 4\r\n4 3 2 1 4\r\n1 3\r\n2 2 1\r\n",
                "YES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\n"
            ],
            [
                "12 29\r\n2 1 1\r\n3 1 2\r\n4 1 5\r\n5 1 3\r\n6 3 5\r\n7 3 3\r\n8 7 4\r\n9 4 2\r\n10 2 4\r\n11 1 4\r\n12 2 5\r\n5 9 2\r\n6 9 3\r\n12 5 1\r\n2 10 1\r\n10 11 5\r\n5 7 4\r\n2 12 5\r\n10 11 3\r\n5 9 3\r\n2 12 2\r\n11 12 1\r\n1 6 4\r\n2 10 4\r\n12 7 1\r\n6 12 4\r\n7 10 1\r\n4 7 3\r\n12 4 5\r\n10\r\n10 12 6 3 8 7 5 11 10 9 1\r\n9 12 9 10 7 4 6 1 8 3\r\n2 5 3\r\n7 7 11 10 12 6 5 9\r\n9 3 8 10 2 9 12 6 11 7\r\n2 6 2\r\n8 4 1 7 10 12 2 9 11\r\n10 5 9 3 1 4 7 6 2 10 8\r\n9 10 8 6 11 1 4 7 3 2\r\n3 7 6 11\r\n",
                "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\n"
            ],
            [
                "14 16\r\n2 1 3\r\n3 1 5\r\n4 3 4\r\n5 3 5\r\n6 3 5\r\n7 2 1\r\n8 6 5\r\n9 2 5\r\n10 2 2\r\n11 1 4\r\n12 5 2\r\n13 12 4\r\n14 12 4\r\n8 11 2\r\n13 14 2\r\n12 14 5\r\n10\r\n12 3 12 6 1 13 8 4 9 5 10 11 14\r\n6 3 7 10 12 11 2\r\n1 8\r\n5 14 13 11 4 1\r\n3 9 4 2\r\n11 1 2 11 8 7 5 9 12 13 4 10\r\n13 7 10 5 6 4 9 12 1 3 8 14 11 13\r\n3 3 9 12\r\n10 13 1 14 11 9 10 6 12 8 3\r\n4 8 11 4 1\r\n",
                "NO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\n"
            ],
            [
                "5 9\r\n2 1 2\r\n3 1 3\r\n4 2 4\r\n5 3 3\r\n4 5 5\r\n4 5 1\r\n1 3 3\r\n1 5 1\r\n5 4 3\r\n10\r\n4 4 5 3 2\r\n3 4 5 1\r\n3 1 3 4\r\n1 1\r\n4 1 4 5 2\r\n4 2 3 1 5\r\n3 2 3 4\r\n3 5 2 1\r\n4 5 1 4 2\r\n3 3 2 5\r\n",
                "NO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\n"
            ],
            [
                "20 24\r\n2 1 3\r\n3 1 5\r\n4 1 5\r\n5 1 13\r\n6 2 7\r\n7 4 7\r\n8 6 7\r\n9 8 12\r\n10 4 11\r\n11 5 12\r\n12 10 12\r\n13 2 11\r\n14 12 8\r\n15 7 1\r\n16 10 7\r\n17 4 4\r\n18 13 9\r\n19 2 11\r\n20 10 10\r\n16 19 2\r\n1 5 14\r\n19 20 17\r\n3 7 11\r\n15 17 11\r\n20\r\n3 16 9 20\r\n3 24 9 12\r\n1 5\r\n2 9 12\r\n3 1 6 11\r\n3 2 5 21\r\n4 13 17 7 3\r\n3 21 11 20\r\n4 3 19 12 18\r\n2 22 17\r\n1 12\r\n3 1 24 13\r\n4 14 11 5 21\r\n4 5 7 13 11\r\n3 1 7 22\r\n1 12\r\n4 9 15 22 24\r\n3 19 15 21\r\n4 18 8 7 20\r\n4 17 11 3 19\r\n",
                "YES\r\nNO\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\n"
            ],
            [
                "16 29\r\n2 1 1\r\n3 2 5\r\n4 2 1\r\n5 3 7\r\n6 1 2\r\n7 4 6\r\n8 4 4\r\n9 3 10\r\n10 8 3\r\n11 8 8\r\n12 2 7\r\n13 2 6\r\n14 11 1\r\n15 4 2\r\n16 3 4\r\n14 16 8\r\n9 15 5\r\n3 6 6\r\n11 15 10\r\n11 15 6\r\n11 13 8\r\n2 6 8\r\n11 13 1\r\n13 15 10\r\n13 15 10\r\n10 13 7\r\n1 9 9\r\n10 13 8\r\n1 15 2\r\n20\r\n2 26 6\r\n2 18 10\r\n1 1\r\n4 12 13 21 28\r\n1 28\r\n4 10 27 26 16\r\n3 10 1 9\r\n3 17 10 16\r\n1 23\r\n2 14 6\r\n4 25 24 6 3\r\n2 3 23\r\n3 24 22 8\r\n1 7\r\n1 29\r\n3 20 28 1\r\n4 10 5 11 17\r\n3 1 8 22\r\n1 15\r\n1 4\r\n",
                "NO\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\n"
            ],
            [
                "2 2\r\n1 2 1\r\n1 2 2\r\n2\r\n1 1\r\n1 2\r\n",
                "YES\r\nNO\r\n"
            ],
            [
                "3 2\r\n1 2 3\r\n2 3 6\r\n3\r\n1 1\r\n1 2\r\n2 1 2\r\n",
                "YES\r\nYES\r\nYES\r\n"
            ]
        ]
    }
]