[
    {
        "name": "Recover it!",
        "description": "Authors guessed an array \n    a\n consisting of \n    n\n integers; each integer\nis not less than \n    2\n and not greater than \n    2 \n    \u00b7 10^5\n. You don't\nknow the array \n    a\n, but you know the array \n    b\n which is formed from it\nwith the following sequence of operations: Firstly, let the array \n    b\n be\nequal to the array \n    a\n; Secondly, for each \n    i\n from \n    1\n to\n\n    n\n: if \n    a_i\n is a prime number, then one integer \n    p_a_i\n is\nappended to array \n    b\n, where \n    p\n is an infinite sequence of prime\nnumbers (\n    2, 3, 5, \n    \u2026\n); otherwise (if \n    a_i\n is not a prime\nnumber), the greatest divisor of \n    a_i\n which is not equal to \n    a_i\n is\nappended to \n    b\n; Then the obtained array of length \n    2n\n is shuffled\nand given to you in the input. Here \n    p_a_i\n means the \n    a_i\n-th prime\nnumber. The first prime \n    p_1 = 2\n, the second one is \n    p_2 = 3\n, and so\non. Your task is to recover any suitable array \n    a\n that forms the given\narray \n    b\n. It is guaranteed that the answer exists (so the array \n    b\n\nis obtained from some suitable array \n    a\n). If there are multiple answers,\nyou can print any. Input The first line of the input contains one integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of elements in\n\n    a\n. The second line of the input contains \n    2n\n integers \n    b_1, b_2,\n    \n    \u2026, b_2n\n (\n    2 \n    \u2264 b_i \n    \u2264 2750131\n), where \n    b_i\n is the\n\n    i\n-th element of \n    b\n. \n    2750131\n is the \n    199999\n-th prime\nnumber. Output In the only line of the output print \n    n\n integers \n    a_1,\n    a_2, \n    \u2026, a_n\n (\n    2 \n    \u2264 a_i \n    \u2264 2 \n    \u00b7 10^5\n) in any order \u2014\nthe array \n    a\n from which the array \n    b\n can be obtained using the\nsequence of moves given in the problem statement. If there are multiple\nanswers, you can print any. Examples Input 3 3 5 2 3 2 4 Output 3 4 2 Input 1\n2750131 199999 Output 199999 Input 1 3 6 Output 6\n\n",
        "cf_contest_id": 1176,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "number theory",
            "sortings"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3 5 2 3 2 4\r\n",
                "3 4 2 "
            ],
            [
                "1\r\n2750131 199999\r\n",
                "199999 "
            ],
            [
                "1\r\n3 6\r\n",
                "6 "
            ]
        ],
        "private_cases": [
            [
                "1\r\n3 2\r\n",
                "2 "
            ],
            [
                "1\r\n815 1630\r\n",
                "1630 "
            ],
            [
                "1\r\n68914 137828\r\n",
                "137828 "
            ],
            [
                "1\r\n99917 199834\r\n",
                "199834 "
            ],
            [
                "1\r\n200000 100000\r\n",
                "200000 "
            ],
            [
                "2\r\n3 2 3 2\r\n",
                "2 2 "
            ],
            [
                "2\r\n1327 1847 2654 283\r\n",
                "2654 283 "
            ],
            [
                "2\r\n1118003 93212 87037 186424\r\n",
                "87037 186424 "
            ],
            [
                "2\r\n97908 66299 198897 195816\r\n",
                "198897 195816 "
            ],
            [
                "2\r\n200000 100000 200000 100000\r\n",
                "200000 200000 "
            ],
            [
                "10\r\n3 3 3 2 3 3 3 3 2 2 2 2 3 2 2 2 2 3 2 3\r\n",
                "2 2 2 2 2 2 2 2 2 2 "
            ],
            [
                "10\r\n1999 1983 305 566 1044 2088 283 645 943 1645 329 215 299 525 1050 661 23 17387 610 41\r\n",
                "1999 2088 1983 1645 1050 943 645 610 566 299 "
            ],
            [
                "10\r\n17726 109910 31153 155765 80159 101196 58175 174525 188607 123148 50598 61574 8161 14403 62869 35452 1129 28806 83617 54955\r\n",
                "188607 174525 155765 123148 109910 101196 8161 80159 35452 28806 "
            ],
            [
                "10\r\n192758 199327 193073 98226 66541 196327 199623 4241 199932 99966 197438 96379 98719 10333 196452 2647331 18181 39857 199991 199285\r\n",
                "193073 199991 199932 199623 199327 199285 197438 196452 196327 192758 "
            ],
            [
                "10\r\n100000 100000 100000 200000 100000 100000 200000 200000 100000 200000 200000 100000 200000 200000 200000 100000 200000 100000 200000 100000\r\n",
                "200000 200000 200000 200000 200000 200000 200000 200000 200000 200000 "
            ],
            [
                "100\r\n3 3 2 2 3 2 3 2 2 2 2 3 3 2 2 2 2 2 3 3 3 2 3 3 3 2 2 2 3 3 2 3 2 2 3 2 3 2 2 2 3 2 3 3 3 2 3 3 3 2 2 3 3 3 3 3 2 3 2 2 2 3 3 3 2 3 3 3 3 2 2 3 2 3 2 3 2 3 3 2 3 2 3 3 3 2 2 2 2 3 2 2 3 2 3 2 3 3 2 2 3 2 3 3 2 2 2 2 3 2 3 2 2 2 3 3 2 3 3 3 3 2 2 3 2 3 3 2 3 3 3 2 3 2 3 2 2 3 2 2 2 2 2 2 3 3 2 3 2 3 2 2 3 3 2 2 2 2 3 2 3 2 2 3 2 2 2 3 3 3 3 2 3 3 2 2 3 3 2 2 2 3 2 2 3 3 3 2 2 2 3 3 3 3 3 3 2 2 3 3\r\n",
                "2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 "
            ]
        ]
    }
]