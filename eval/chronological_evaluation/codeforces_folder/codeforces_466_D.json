[
    {
        "name": "Increase Sequence",
        "description": "Peter has a sequence of integers a1, a2, ..., an. Peter wants all numbers in\nthe sequence to equal h. He can perform the operation of \"adding one on the\nsegment [l, r]\": add one to all elements of the sequence with indices from l\nto r (inclusive). At that, Peter never chooses any element as the beginning of\nthe segment twice. Similarly, Peter never chooses any element as the end of\nthe segment twice. In other words, for any two segments [l1, r1] and [l2, r2],\nwhere Peter added one, the following inequalities hold: l1 \u2260 l2 and r1 \u2260 r2.\nHow many distinct ways are there to make all numbers in the sequence equal h?\nPrint this number of ways modulo 1000000007 (10^9 + 7). Two ways are\nconsidered distinct if one of them has a segment that isn't in the other way.\nInput The first line contains two integers n, h (1 \u2264 n, h \u2264 2000). The next\nline contains n integers a1, a2, ..., an (0 \u2264 ai \u2264 2000). Output Print a\nsingle integer \u2014 the answer to the problem modulo 1000000007 (10^9 + 7).\nExamples Input 3 2 1 1 1 Output 4 Input 5 1 1 1 1 1 1 Output 1 Input 4 3 3 2 1\n1 Output 0\n\n",
        "cf_contest_id": 466,
        "cf_index": "D",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "dp"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2\r\n1 1 1\r\n",
                "4\n"
            ],
            [
                "5 1\r\n1 1 1 1 1\r\n",
                "1\n"
            ],
            [
                "4 3\r\n3 2 1 1\r\n",
                "0\n"
            ]
        ],
        "private_cases": [
            [
                "1 2000\r\n2000\r\n",
                "1\n"
            ],
            [
                "3 2\r\n2 1 1\r\n",
                "2\n"
            ],
            [
                "3 4\r\n4 3 2\r\n",
                "0\n"
            ],
            [
                "10 6\r\n5 4 4 4 5 4 4 4 4 5\r\n",
                "972\n"
            ],
            [
                "10 6\r\n5 4 4 4 5 4 4 4 4 5\r\n",
                "972\n"
            ],
            [
                "7 4\r\n3 3 4 4 4 3 3\r\n",
                "4\n"
            ],
            [
                "3 6\r\n5 6 5\r\n",
                "1\n"
            ],
            [
                "3 2\r\n1 0 1\r\n",
                "2\n"
            ],
            [
                "6 1\r\n0 1 0 0 0 1\r\n",
                "4\n"
            ],
            [
                "6 3\r\n2 1 2 2 1 2\r\n",
                "8\n"
            ],
            [
                "99 1999\r\n1999 1998 1997 1996 1995 1994 1993 1992 1991 1990 1989 1988 1987 1986 1985 1984 1983 1982 1981 1980 1979 1978 1977 1976 1975 1974 1973 1972 1971 1970 1969 1968 1967 1966 1965 1964 1963 1962 1961 1960 1959 1958 1957 1956 1955 1954 1953 1952 1951 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999\r\n",
                "726372166\n"
            ],
            [
                "9 4\r\n2 3 2 2 2 3 3 3 2\r\n",
                "0\n"
            ],
            [
                "1 349\r\n348\r\n",
                "1\n"
            ],
            [
                "10 20\r\n20 19 18 17 16 15 16 17 18 19\r\n",
                "120\n"
            ],
            [
                "19 10\r\n10 9 8 7 6 5 4 3 2 10 2 3 4 5 6 7 8 9 10\r\n",
                "0\n"
            ],
            [
                "19 11\r\n10 9 8 7 6 5 4 3 3 3 3 3 4 5 6 7 8 9 10\r\n",
                "264539520\n"
            ],
            [
                "7 3\r\n2 1 1 2 1 1 2\r\n",
                "36\n"
            ]
        ]
    }
]