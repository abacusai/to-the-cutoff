[
    {
        "name": "Tokens on Graph",
        "description": "You are given an undirected connected graph, some vertices of which contain\ntokens and/or bonuses. Consider a game involving one player \u2014 you. You can\nmove tokens according to the following rules: At the beginning of the game,\nyou can make exactly one turn: move any token to any adjacent vertex. If the\nmovement of the token ended on the bonus, then you are allowed to make another\nturn with any other token. You can use different bonuses in any order. The\nsame bonus can be used an unlimited number of times. Bonuses do not move\nduring the game. There can be several tokens in one vertex at the same time,\nbut initially there is no more than one token in each vertex. The vertex with\nnumber \n    1\n is the finish vertex, and your task is to determine whether it\nis possible to hit it with any token by making turns with the tiles according\nto the rules described above. If a token is initially located at the vertex of\n\n    1\n, then the game is considered already won. The finish line is in black,\nthe bonuses are in red, the chips are in grey. For example, for a given graph,\nyou can reach the finish line with a chip from the \n    8\nth vertex by making\nthe following sequence of turns: Move from the \n    8\n-th vertex to the\n\n    6\n-th. Move from the \n    7\n-th vertex to the \n    5\n-th. Move from the\n\n    6\n-th vertex to the \n    4\n-th. Move from the \n    5\n-th vertex to the\n\n    6\n-th. Move from the \n    4\n-th vertex to the \n    2\n-nd. Move from the\n\n    6\n-th vertex to the \n    4\n-th. Move from the \n    2\n-nd vertex to the\n\n    1\n-st vertex, which is the finish. Input The first line of input data\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 number of\ntest cases in the test. The descriptions of the test cases follow. The first\nline of the description of each test case contains two integers \n    n\n and\n\n    m\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n, \n    0 \n    \u2264 m \n    \u2264 2 \n    \u00b7\n    10^5\n) \u2014 the number of vertices and edges in the graph, respectively. The\nsecond line of the description of each test case contains two integers \n    p\n\nand \n    b\n (\n    1 \n    \u2264 p \n    \u2264 n, 0 \n    \u2264 b \n    \u2264 n\n) \u2014 the number of\ntokens and bonuses, respectively. The third line of the description of each\ntest case contains \n    p\n different integers from \n    1\n to \n    n\n \u2014 the\nindices of the vertices in which the tokens are located. The fourth line of\nthe description of each input data set contains \n    b\n different integers\nfrom \n    1\n to \n    n\n \u2014 the indices of the vertices in which the bonuses are\nlocated. Note that the value of \n    b\n can be equal to \n    0\n. In this case,\nthis line is empty. There can be both a token and a bonus in one vertex at the\nsame time. The next \n    m\n lines of the description of each test case contain\ntwo integers \n    u_i\n and \n    v_i\n (\n    1 \n    \u2264 u_i, v_i \n    \u2264 n\n, \n    u_i\n    \n     v_i\n) \u2014 vertices connected by the \n    i\n-th edge. There is at most\none edge between each pair of vertices. The given graph is connected, that is,\nfrom any vertex you can get to any one by moving along the edges. The test\ncases are separated by an empty string. It is guaranteed that the sum of\n\n    n\n over all test cases does not exceed \n    2 \n    \u00b7 10^5\n. Similarly,\nit is guaranteed that the sum of \n    m\n over all input data sets does not\nexceed \n    2 \n    \u00b7 10^5\n. Output For each test case, print YES in a\nseparate line if you can reach the finish with some token, and NO otherwise.\nYou can output YES and NO in any case (for example, the strings yEs, yes, Yes\nand YES will be recognized as a positive response). Example Input 6 8 10 2 4 7\n8 2 4 5 6 1 2 2 3 2 4 3 4 3 5 4 6 5 6 5 7 6 8 7 8 5 4 1 1 5 3 1 2 2 3 3 4 4 5\n2 1 1 0 2 1 2 4 3 1 2 2 3 4 1 2 2 3 2 4 5 4 3 2 5 3 4 2 4 1 2 2 3 3 4 4 5 1 0\n1 1 1 1 Output YES NO YES YES YES YES Note The first test case is explained in\nthe statement. In the second test case, there is only one token which can make\nonly one turn, and it cannot reach the finish. In the third test case, the\ntoken can reach the finish line in \n    1\n turn. In the fourth test case, you\nneed to make just one turn from \n    2\n to \n    1\n. In the sixth test case,\nthe token is initially at node number \n    1\n, so we win immediately.\n\n",
        "cf_contest_id": 1790,
        "cf_index": "G",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs",
            "shortest paths"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n8 10\r\n2 4\r\n7 8\r\n2 4 5 6\r\n1 2\r\n2 3\r\n2 4\r\n3 4\r\n3 5\r\n4 6\r\n5 6\r\n5 7\r\n6 8\r\n7 8\r\n\r\n5 4\r\n1 1\r\n5\r\n3\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n\r\n2 1\r\n1 0\r\n2\r\n\r\n1 2\r\n\r\n4 3\r\n1 2\r\n2\r\n3 4\r\n1 2\r\n2 3\r\n2 4\r\n\r\n5 4\r\n3 2\r\n5 3 4\r\n2 4\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n\r\n1 0\r\n1 1\r\n1\r\n1\r\n",
                "YES\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\n"
            ]
        ],
        "private_cases": []
    }
]