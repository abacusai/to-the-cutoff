[
    {
        "name": "Full Binary Tree Queries",
        "description": "You have a full binary tree having infinite levels. Each node has an initial\nvalue. If a node has value x, then its left child has value 2\u00b7x and its right\nchild has value 2\u00b7x + 1. The value of the root is 1. You need to answer Q\nqueries. There are 3 types of queries: Cyclically shift the values of all\nnodes on the same level as node with value X by K units. (The values/nodes of\nany other level are not affected). Cyclically shift the nodes on the same\nlevel as node with value X by K units. (The subtrees of these nodes will move\nalong with them). Print the value of every node encountered on the simple path\nfrom the node with value X to the root.Positive K implies right cyclic shift\nand negative K implies left cyclic shift. It is guaranteed that atleast one\ntype 3 query is present. Input The first line contains a single integer Q (1 \u2264\nQ \u2264 10^5). Then Q queries follow, one per line: Queries of type 1 and 2 have\nthe following format: T X K (1 \u2264 T \u2264 2; 1 \u2264 X \u2264 10^18; 0 \u2264 |K| \u2264 10^18), where\nT is type of the query. Queries of type 3 have the following format: 3 X (1 \u2264\nX \u2264 10^18). Output For each query of type 3, print the values of all nodes\nencountered in descending order. Examples Input 5 3 12 1 2 1 3 12 2 4 -1 3 8\nOutput 12 6 3 1 12 6 2 1 8 4 2 1 Input 5 3 14 1 5 -3 3 14 1 3 1 3 14 Output 14\n7 3 1 14 6 3 1 14 6 2 1 Note Following are the images of the first 4 levels of\nthe tree in the first test case: Original: After query 1 2 1: After query 2 4\n-1:\n\n",
        "cf_contest_id": 960,
        "cf_index": "D",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3 12\r\n1 2 1\r\n3 12\r\n2 4 -1\r\n3 8\r\n",
                "12 6 3 1\r\n12 6 2 1\r\n8 4 2 1\r\n"
            ],
            [
                "5\r\n3 14\r\n1 5 -3\r\n3 14\r\n1 3 1\r\n3 14\r\n",
                "14 7 3 1\r\n14 6 3 1\r\n14 6 2 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "6\r\n3 1\r\n2 1 0\r\n3 10\r\n2 1 -4\r\n3 10\r\n2 10 -5\r\n",
                "1\r\n10 5 2 1\r\n10 5 2 1\r\n"
            ],
            [
                "10\r\n3 999\r\n3 822\r\n2 339 -75\r\n2 924 -56\r\n3 863\r\n3 311\r\n1 269 84\r\n2 604 9\r\n2 788 -98\r\n1 233 60\r\n",
                "999 499 249 124 62 31 15 7 3 1\r\n822 411 205 102 51 25 12 6 3 1\r\n863 403 164 82 41 20 10 5 2 1\r\n311 246 123 61 30 15 7 3 1\r\n"
            ],
            [
                "2\r\n2 1 100000000000000000\r\n3 1000000000000000\r\n",
                "1000000000000000 500000000000000 250000000000000 125000000000000 62500000000000 31250000000000 15625000000000 7812500000000 3906250000000 1953125000000 976562500000 488281250000 244140625000 122070312500 61035156250 30517578125 15258789062 7629394531 3814697265 1907348632 953674316 476837158 238418579 119209289 59604644 29802322 14901161 7450580 3725290 1862645 931322 465661 232830 116415 58207 29103 14551 7275 3637 1818 909 454 227 113 56 28 14 7 3 1\r\n"
            ]
        ]
    }
]