[
    {
        "name": "Beard Graph",
        "description": "Let's define a non-oriented connected graph of n vertices and n - 1 edges as a\nbeard, if all of its vertices except, perhaps, one, have the degree of 2 or 1\n(that is, there exists no more than one vertex, whose degree is more than\ntwo). Let us remind you that the degree of a vertex is the number of edges\nthat connect to it. Let each edge be either black or white. Initially all\nedges are black. You are given the description of the beard graph. Your task\nis to analyze requests of the following types: paint the edge number i black.\nThe edge number i is the edge that has this number in the description. It is\nguaranteed that by the moment of this request the i-th edge is white paint the\nedge number i white. It is guaranteed that by the moment of this request the\ni-th edge is black find the length of the shortest path going only along the\nblack edges between vertices a and b or indicate that no such path exists\nbetween them (a path's length is the number of edges in it) The vertices are\nnumbered with integers from 1 to n, and the edges are numbered with integers\nfrom 1 to n - 1. Input The first line of the input contains an integer n (2 \u2264\nn \u2264 10^5) \u2014 the number of vertices in the graph. Next n - 1 lines contain\nedges described as the numbers of vertices vi, ui (1 \u2264 vi, ui \u2264 n, vi \u2260 ui)\nconnected by this edge. It is guaranteed that the given graph is connected and\nforms a beard graph, and has no self-loops or multiple edges. The next line\ncontains an integer m (1 \u2264 m \u2264 3\u00b710^5) \u2014 the number of requests. Next m lines\ncontain requests in the following form: first a line contains an integer type,\nwhich takes values \u200b\u200bfrom 1 to 3, and represents the request type. If type =\n1, then the current request is a request to paint the edge black. In this\ncase, in addition to number type the line should contain integer id (1 \u2264 id \u2264\nn - 1), which represents the number of the edge to paint. If type = 2, then\nthe current request is a request to paint the edge white, its form is similar\nto the previous request. If type = 3, then the current request is a request to\nfind the distance. In this case, in addition to type, the line should contain\ntwo integers a, b (1 \u2264 a, b \u2264 n, a can be equal to b) \u2014 the numbers of\nvertices, the distance between which must be found. The numbers in all lines\nare separated by exactly one space. The edges are numbered in the order in\nwhich they are given in the input. Output For each request to \"find the\ndistance between vertices a and b\" print the result. If there is no path going\nonly along the black edges between vertices a and b, then print \"-1\" (without\nthe quotes). Print the results in the order of receiving the requests,\nseparate the numbers with spaces or line breaks. Examples Input 3 1 2 2 3 7 3\n1 2 3 1 3 3 2 3 2 2 3 1 2 3 1 3 3 2 3 Output 1 2 1 1 -1 -1 Input 6 1 5 6 4 2 3\n3 5 5 6 6 3 3 4 2 5 3 2 6 3 1 2 2 3 3 3 1 Output 3 -1 3 2 Note In the first\nsample vertices 1 and 2 are connected with edge number 1, and vertices 2 and 3\nare connected with edge number 2. Before the repainting edge number 2 each\nvertex is reachable from each one along the black edges. Specifically, the\nshortest path between 1 and 3 goes along both edges. If we paint edge number 2\nwhite, vertex 3 will end up cut off from other vertices, that is, no path\nexists from it to any other vertex along the black edges.\n\n",
        "cf_contest_id": 165,
        "cf_index": "D",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dsu",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 2\r\n2 3\r\n7\r\n3 1 2\r\n3 1 3\r\n3 2 3\r\n2 2\r\n3 1 2\r\n3 1 3\r\n3 2 3\r\n",
                "1\r\n2\r\n1\r\n1\r\n-1\r\n-1\r\n"
            ],
            [
                "6\r\n1 5\r\n6 4\r\n2 3\r\n3 5\r\n5 6\r\n6\r\n3 3 4\r\n2 5\r\n3 2 6\r\n3 1 2\r\n2 3\r\n3 3 1\r\n",
                "3\r\n-1\r\n3\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n2 3\r\n1 3\r\n4\r\n3 3 1\r\n3 2 2\r\n3 1 3\r\n2 2\r\n",
                "1\r\n0\r\n1\r\n"
            ],
            [
                "5\r\n3 4\r\n1 2\r\n2 4\r\n5 3\r\n10\r\n3 4 1\r\n3 5 5\r\n3 3 3\r\n2 3\r\n3 1 1\r\n3 4 4\r\n3 3 1\r\n3 2 3\r\n3 4 3\r\n2 1\r\n",
                "2\r\n0\r\n0\r\n0\r\n0\r\n-1\r\n-1\r\n1\r\n"
            ],
            [
                "10\r\n8 9\r\n4 1\r\n3 4\r\n2 6\r\n7 6\r\n1 5\r\n9 3\r\n10 2\r\n5 6\r\n3\r\n3 5 6\r\n3 5 6\r\n3 9 10\r\n",
                "1\r\n1\r\n7\r\n"
            ],
            [
                "10\r\n10 8\r\n9 1\r\n2 9\r\n1 7\r\n5 4\r\n6 7\r\n3 7\r\n4 7\r\n8 7\r\n10\r\n2 9\r\n3 3 10\r\n2 4\r\n2 5\r\n2 8\r\n1 8\r\n2 7\r\n2 1\r\n1 5\r\n2 6\r\n",
                "-1\r\n"
            ]
        ]
    }
]