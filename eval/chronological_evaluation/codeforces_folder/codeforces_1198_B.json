[
    {
        "name": "Welfare State",
        "description": "There is a country with \n    n\n citizens. The \n    i\n-th of them initially has\n\n    a_i\n money. The government strictly controls the wealth of its\ncitizens. Whenever a citizen makes a purchase or earns some money, they must\nsend a receipt to the social services mentioning the amount of money they\ncurrently have. Sometimes the government makes payouts to the poor: all\ncitizens who have strictly less money than \n    x\n are paid accordingly so\nthat after the payout they have exactly \n    x\n money. In this case the\ncitizens don't send a receipt. You know the initial wealth of every citizen\nand the log of all events: receipts and payouts. Restore the amount of money\neach citizen has after all events. Input The first line contains a single\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the numer of\ncitizens. The next line contains \n    n\n integers \n    a_1\n, \n    a_2\n, ...,\n\n    a_n\n (\n    0 \n    \u2264 a_i\n    \u2264 10^9\n) \u2014 the initial balances of\ncitizens. The next line contains a single integer \n    q\n (\n    1 \n    \u2264 q \n    \u2264\n    2 \n    \u00b7 10^5\n) \u2014 the number of events. Each of the next \n    q\n lines\ncontains a single event. The events are given in chronological order. Each\nevent is described as either 1 p x (\n    1 \n    \u2264 p \n    \u2264 n\n, \n    0 \n    \u2264 x\n    \n    \u2264 10^9\n), or 2 x (\n    0 \n    \u2264 x \n    \u2264 10^9\n). In the first case we\nhave a receipt that the balance of the \n    p\n-th person becomes equal to\n\n    x\n. In the second case we have a payoff with parameter \n    x\n. Output\nPrint \n    n\n integers \u2014 the balances of all citizens after all events.\nExamples Input 4 1 2 3 4 3 2 3 1 2 2 2 1 Output 3 2 3 4 Input 5 3 50 2 1 10 3\n1 2 0 2 8 1 3 20 Output 8 8 20 8 10 Note In the first example the balances\nchange as follows: 1 2 3 4 \n    \u2192\n 3 3 3 4 \n    \u2192\n 3 2\n3 4 \n    \u2192\n 3 2 3 4 In the second example the balances change as\nfollows: 3 50 2 1 10 \n    \u2192\n 3 0 2 1 10 \n    \u2192\n 8 8 8\n8 10 \n    \u2192\n 8 8 20 8 10\n\n",
        "cf_contest_id": 1198,
        "cf_index": "B",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "data structures",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 2 3 4\r\n3\r\n2 3\r\n1 2 2\r\n2 1\r\n",
                "3 2 3 4\r\n"
            ],
            [
                "5\r\n3 50 2 1 10\r\n3\r\n1 2 0\r\n2 8\r\n1 3 20\r\n",
                "8 8 20 8 10\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n1 2 3 4 5 6 7 8 9 10\r\n10\r\n2 1\r\n2 2\r\n2 3\r\n2 4\r\n2 5\r\n2 6\r\n2 7\r\n2 8\r\n2 9\r\n2 10\r\n",
                "10 10 10 10 10 10 10 10 10 10\r\n"
            ],
            [
                "5\r\n1 2 3 4 5\r\n10\r\n1 1 0\r\n2 1\r\n1 2 0\r\n2 2\r\n1 3 0\r\n2 3\r\n1 4 0\r\n2 4\r\n1 5 0\r\n2 5\r\n",
                "5 5 5 5 5\r\n"
            ],
            [
                "10\r\n7 9 4 4 7 6 3 7 9 8\r\n10\r\n1 3 2\r\n1 10 5\r\n1 5 3\r\n1 5 2\r\n1 2 9\r\n1 2 9\r\n1 2 10\r\n1 5 7\r\n1 6 10\r\n1 10 9\r\n",
                "7 10 2 4 7 10 3 7 9 9\r\n"
            ],
            [
                "1\r\n1\r\n3\r\n2 4\r\n1 1 2\r\n2 10\r\n",
                "10\r\n"
            ],
            [
                "4\r\n1 2 3 4\r\n2\r\n2 1000\r\n2 1\r\n",
                "1000 1000 1000 1000\r\n"
            ],
            [
                "4\r\n1 2 3 4\r\n2\r\n2 3\r\n2 2\r\n",
                "3 3 3 4\r\n"
            ]
        ]
    }
]