[
    {
        "name": "Xenia and Ringroad",
        "description": "Xenia lives in a city that has n houses built along the main ringroad. The\nringroad houses are numbered 1 through n in the clockwise order. The ringroad\ntraffic is one way and also is clockwise. Xenia has recently moved into the\nringroad house number 1. As a result, she's got m things to do. In order to\ncomplete the i-th task, she needs to be in the house number ai and complete\nall tasks with numbers less than i. Initially, Xenia is in the house number 1,\nfind the minimum time she needs to complete all her tasks if moving from a\nhouse to a neighboring one along the ringroad takes one unit of time. Input\nThe first line contains two integers n and m (2 \u2264 n \u2264 10^5, 1 \u2264 m \u2264 10^5). The\nsecond line contains m integers a1, a2, ..., am (1 \u2264 ai \u2264 n). Note that Xenia\ncan have multiple consecutive tasks in one house. Output Print a single\ninteger \u2014 the time Xenia needs to complete all tasks. Please, do not use the\n\nthe cin, cout streams or the \n6 Input 4 3 2 3 3 Output 2 Note In the first test example the sequence of\nXenia's moves along the ringroad looks as follows: 1 \u2192 2 \u2192 3 \u2192 4 \u2192 1 \u2192 2 \u2192 3.\nThis is optimal sequence. So, she needs 6 time units.\n\n",
        "cf_contest_id": 339,
        "cf_index": "B",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 3\r\n3 2 3\r\n",
                "6"
            ],
            [
                "4 3\r\n2 3 3\r\n",
                "2"
            ]
        ],
        "private_cases": [
            [
                "2 2\r\n1 1\r\n",
                "0"
            ],
            [
                "2 2\r\n1 2\r\n",
                "1"
            ],
            [
                "2 2\r\n1 2\r\n",
                "1"
            ],
            [
                "100 100\r\n56 46 1 47 5 86 45 35 81 1 31 70 67 70 62 99 100 47 44 33 78 35 32 37 92 12 95 18 3 22 54 24 22 90 25 22 78 88 51 92 46 84 15 29 28 40 8 5 93 68 77 47 45 76 85 39 84 94 52 69 93 64 31 60 99 17 51 59 62 37 46 47 86 60 88 14 68 22 47 93 50 10 55 87 46 50 43 63 44 43 61 65 91 43 33 97 67 57 66 70\r\n",
                "4869"
            ],
            [
                "78 58\r\n23 14 73 45 47 14 27 59 65 39 15 23 5 1 50 37 3 51 46 69 75 65 45 68 48 59 77 39 53 21 72 33 46 32 34 5 69 55 56 53 47 31 32 5 42 23 76 15 2 77 65 24 16 68 61 28 55 10\r\n",
                "2505"
            ],
            [
                "14 54\r\n9 13 14 9 5 12 4 7 3 14 5 12 13 1 1 11 10 2 7 9 5 2 2 8 10 7 3 9 5 11 2 2 6 12 11 5 4 11 11 6 2 11 14 13 8 7 13 9 4 9 11 3 7 13\r\n",
                "362"
            ],
            [
                "100 100\r\n48 73 63 16 49 88 36 17 66 6 87 13 94 52 58 70 71 52 7 70 25 42 24 36 57 9 79 26 75 39 13 14 38 26 33 66 88 28 75 98 53 48 67 54 63 25 69 87 88 32 72 17 36 35 29 67 74 89 70 47 20 90 78 13 94 57 32 73 29 74 45 78 85 64 81 56 12 65 19 67 34 86 55 71 41 33 76 13 100 47 44 76 86 78 37 15 26 98 83 98\r\n",
                "4997"
            ],
            [
                "99 100\r\n88 65 10 91 18 35 58 49 42 2 22 57 74 31 53 24 27 93 45 4 71 2 69 39 21 90 97 89 45 73 20 45 82 98 35 90 37 76 68 26 21 65 95 63 24 74 50 59 3 93 65 6 30 37 62 71 18 88 40 12 56 40 89 56 38 71 90 41 97 43 44 23 19 22 10 80 3 24 32 85 26 65 70 60 76 85 66 68 74 11 64 88 12 63 16 15 79 57 93 58\r\n",
                "4809"
            ],
            [
                "65 100\r\n53 14 5 10 32 60 31 52 52 56 38 6 8 17 52 23 59 3 18 28 15 2 46 26 8 2 40 6 58 30 28 46 49 23 47 24 9 53 3 47 55 12 36 49 12 24 54 55 58 7 50 42 15 4 58 49 34 40 19 4 59 19 31 17 35 65 36 50 45 5 33 11 29 52 55 40 48 11 32 41 31 7 46 55 32 41 56 51 39 13 5 59 58 34 38 50 55 10 43 30\r\n",
                "3149"
            ],
            [
                "10 100\r\n7 6 2 10 7 2 3 8 10 4 6 1 4 5 7 10 1 2 3 5 4 10 8 2 3 3 6 8 3 9 4 1 9 10 1 2 5 1 8 8 5 9 2 8 1 2 3 2 1 10 10 7 1 3 2 2 7 1 6 6 6 9 2 3 1 7 2 2 9 7 3 3 2 10 7 4 7 3 3 3 2 4 4 2 2 8 4 1 10 10 5 10 6 10 6 10 3 10 8 9\r\n",
                "428"
            ],
            [
                "2 100\r\n1 1 2 2 2 2 1 2 1 2 2 2 1 1 2 2 2 2 1 1 2 1 2 2 1 1 2 2 2 1 2 1 1 1 2 1 2 2 2 1 2 2 2 2 1 2 1 1 1 2 1 1 2 1 1 2 2 1 2 1 2 2 2 1 1 1 1 1 2 2 2 1 1 2 2 1 1 2 2 1 1 2 1 1 1 1 2 2 1 1 1 2 1 1 1 1 1 1 1 2\r\n",
                "47"
            ],
            [
                "67 100\r\n49 5 25 48 37 55 5 33 14 30 59 28 57 46 45 32 47 22 40 28 58 34 27 29 4 52 63 44 31 65 42 61 11 17 32 17 18 1 12 33 38 11 59 46 43 55 23 30 23 2 42 21 45 51 30 19 35 15 10 30 13 21 32 34 33 3 5 59 23 63 6 9 20 43 64 3 42 41 40 4 14 20 40 33 25 44 1 2 50 46 13 10 3 20 22 64 28 42 58 30\r\n",
                "3245"
            ],
            [
                "100 100\r\n81 62 26 90 7 87 60 35 75 81 54 94 53 71 64 80 58 83 53 70 40 96 87 50 37 63 5 77 83 75 53 28 22 98 52 45 72 70 62 21 1 99 37 93 16 98 68 27 96 37 21 83 92 23 62 96 85 31 85 66 38 77 45 16 90 86 6 21 75 42 18 60 2 17 51 61 94 68 97 79 17 59 66 14 87 78 70 40 63 78 58 22 87 7 90 17 20 97 9 31\r\n",
                "5530"
            ],
            [
                "2 1\r\n1\r\n",
                "0"
            ],
            [
                "2 10\r\n1 1 1 1 1 1 1 1 1 1\r\n",
                "0"
            ],
            [
                "2 10\r\n1 1 1 2 2 2 1 1 1 2\r\n",
                "3"
            ],
            [
                "3 6\r\n1 2 3 3 2 1\r\n",
                "6"
            ]
        ]
    }
]