[
    {
        "name": "Unordered Swaps",
        "description": "Alice had a permutation \n    p\n of numbers from \n    1\n to \n    n\n. Alice can\nswap a pair \n    (x, y)\n which means swapping elements at positions \n    x\n\nand \n    y\n in \n    p\n (i.e. swap \n    p_x\n and \n    p_y\n). Alice recently\nlearned her first sorting algorithm, so she decided to sort her permutation in\nthe minimum number of swaps possible. She wrote down all the swaps in the\norder in which she performed them to sort the permutation on a piece of paper.\nFor example, \n    [(2, 3), (1, 3)]\n is a valid swap sequence by Alice for\npermutation \n    p = [3, 1, 2]\n whereas \n    [(1, 3), (2, 3)]\n is not because\nit doesn't sort the permutation. Note that we cannot sort the permutation in\nless than \n    2\n swaps. \n    [(1, 2), (2, 3), (2, 4), (2, 3)]\n cannot be a\nsequence of swaps by Alice for \n    p = [2, 1, 4, 3]\n even if it sorts the\npermutation because \n    p\n can be sorted in \n    2\n swaps, for example using\nthe sequence \n    [(4, 3), (1, 2)]\n. Unfortunately, Bob shuffled the sequence\nof swaps written by Alice. You are given Alice's permutation \n    p\n and the\nswaps performed by Alice in arbitrary order. Can you restore the correct\nsequence of swaps that sorts the permutation \n    p\n? Since Alice wrote\ncorrect swaps before Bob shuffled them up, it is guaranteed that there exists\nsome order of swaps that sorts the permutation. Input The first line contains\n\n    2\n integers \n    n\n and \n    m\n \n    (2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5, 1\n    \n    \u2264 m \n    \u2264 n - 1)\n \u2014 the size of permutation and the minimum number of\nswaps required to sort the permutation. The next line contains \n    n\n\nintegers \n    p_1, p_2, ..., p_n\n (\n    1 \n    \u2264 p_i \n    \u2264 n\n, all \n    p_i\n\nare distinct) \u2014 the elements of \n    p\n. It is guaranteed that \n    p\n forms a\npermutation. Then \n    m\n lines follow. The \n    i\n-th of the next \n    m\n\nlines contains two integers \n    x_i\n and \n    y_i\n \u2014 the \n    i\n-th swap\n\n    (x_i, y_i)\n. It is guaranteed that it is possible to sort \n    p\n with\nthese \n    m\n swaps and that there is no way to sort \n    p\n with less than\n\n    m\n swaps. Output Print a permutation of \n    m\n integers \u2014 a valid order\nof swaps written by Alice that sorts the permutation \n    p\n. See sample\nexplanation for better understanding. In case of multiple possible answers,\noutput any. Examples Input 4 3 2 3 4 1 1 4 2 1 1 3 Output 2 3 1 Input 6 4 6 5\n1 3 2 4 3 1 2 5 6 3 6 4 Output 4 1 3 2 Note In the first example, \n    p = [2,\n    3, 4, 1]\n, \n    m = 3\n and given swaps are \n    [(1, 4), (2, 1), (1, 3)]\n.\nThere is only one correct order of swaps i.e \n    [2, 3, 1]\n. First we perform\nthe swap \n    2\n from the input i.e \n    (2, 1)\n, \n    p\n becomes \n    [3, 2, 4,\n    1]\n. Then we perform the swap \n    3\n from the input i.e \n    (1, 3)\n,\n\n    p\n becomes \n    [4, 2, 3, 1]\n. Finally we perform the swap \n    1\n from\nthe input i.e \n    (1, 4)\n and \n    p\n becomes \n    [1, 2, 3, 4]\n which is\nsorted. In the second example, \n    p = [6, 5, 1, 3, 2, 4]\n, \n    m = 4\n and\nthe given swaps are \n    [(3, 1), (2, 5), (6, 3), (6, 4)]\n. One possible\ncorrect order of swaps is \n    [4, 2, 1, 3]\n. Perform the swap \n    4\n from\nthe input i.e \n    (6, 4)\n, \n    p\n becomes \n    [6, 5, 1, 4, 2, 3]\n. Perform\nthe swap \n    2\n from the input i.e \n    (2, 5)\n, \n    p\n becomes \n    [6, 2, 1,\n    4, 5, 3]\n. Perform the swap \n    1\n from the input i.e \n    (3, 1)\n, \n    p\n\nbecomes \n    [1, 2, 6, 4, 5, 3]\n. Perform the swap \n    3\n from the input i.e\n\n    (6, 3)\n and \n    p\n becomes \n    [1, 2, 3, 4, 5, 6]\n which is sorted.\nThere can be other possible answers such as \n    [1, 2, 4, 3]\n.\n\n",
        "cf_contest_id": 1682,
        "cf_index": "E",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs",
            "greedy",
            "math",
            "sortings",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 3\r\n2 3 4 1\r\n1 4\r\n2 1\r\n1 3\r\n",
                "2 3 1 "
            ],
            [
                "6 4\r\n6 5 1 3 2 4\r\n3 1\r\n2 5\r\n6 3\r\n6 4\r\n",
                "1 2 4 3 "
            ]
        ],
        "private_cases": [
            [
                "5 4\r\n3 5 4 2 1\r\n4 1\r\n2 4\r\n1 5\r\n1 3\r\n",
                "4 2 1 3 "
            ],
            [
                "2 1\r\n2 1\r\n1 2\r\n",
                "1 "
            ],
            [
                "4 3\r\n2 3 4 1\r\n1 2\r\n2 4\r\n3 4\r\n",
                "2 1 3 "
            ],
            [
                "49 47\r\n18 10 8 30 23 2 16 27 39 19 46 31 49 48 44 11 24 35 47 32 22 4 45 26 29 12 37 1 40 13 43 41 36 38 28 14 34 20 33 9 21 5 6 25 15 3 42 7 17\r\n11 46\r\n40 9\r\n37 14\r\n13 17\r\n22 32\r\n41 21\r\n37 9\r\n45 42\r\n4 24\r\n20 29\r\n20 9\r\n31 2\r\n43 2\r\n25 47\r\n27 8\r\n14 39\r\n17 4\r\n35 1\r\n34 9\r\n25 20\r\n38 34\r\n49 13\r\n15 42\r\n36 14\r\n12 47\r\n25 42\r\n12 19\r\n16 3\r\n31 12\r\n48 27\r\n23 5\r\n45 23\r\n43 6\r\n28 35\r\n26 12\r\n14 27\r\n16 46\r\n42 44\r\n3 48\r\n32 21\r\n47 22\r\n10 19\r\n7 3\r\n35 18\r\n39 33\r\n13 30\r\n24 26\r\n",
                "12 33 13 34 18 29 27 42 44 20 14 41 25 8 23 38 26 32 31 10 7 21 19 11 2 45 36 3 16 24 39 30 43 37 28 1 15 40 5 6 17 35 47 9 22 4 46 "
            ],
            [
                "17 16\r\n4 6 8 3 9 12 15 13 14 17 2 7 5 16 10 11 1\r\n13 4\r\n2 1\r\n12 17\r\n15 10\r\n10 7\r\n4 5\r\n17 6\r\n1 6\r\n8 3\r\n16 14\r\n17 7\r\n4 8\r\n9 5\r\n11 2\r\n16 5\r\n1 16\r\n",
                "16 2 7 8 12 1 13 15 6 9 10 14 3 5 11 4 "
            ],
            [
                "49 43\r\n48 4 21 38 1 19 30 25 47 31 12 44 6 35 28 10 42 7 8 26 37 15 49 34 9 20 16 23 41 24 27 32 40 39 3 14 2 45 11 18 5 46 13 33 22 36 43 17 29\r\n29 4\r\n44 12\r\n20 26\r\n21 29\r\n29 3\r\n13 47\r\n22 28\r\n8 13\r\n11 30\r\n41 14\r\n24 11\r\n30 40\r\n36 1\r\n16 10\r\n41 35\r\n38 45\r\n8 19\r\n27 31\r\n22 15\r\n37 29\r\n36 46\r\n8 9\r\n48 17\r\n1 5\r\n34 39\r\n49 4\r\n5 14\r\n35 29\r\n25 9\r\n49 23\r\n47 43\r\n2 29\r\n33 44\r\n24 39\r\n36 42\r\n7 30\r\n42 17\r\n28 45\r\n18 30\r\n11 33\r\n45 49\r\n6 13\r\n16 31\r\n",
                "13 24 3 14 40 9 12 39 36 42 35 37 23 22 8 17 18 43 34 11 25 29 21 31 6 10 27 33 2 28 15 5 4 20 32 26 1 38 41 16 19 7 30 "
            ],
            [
                "17 15\r\n3 8 13 6 4 17 14 12 10 1 9 5 7 11 2 15 16\r\n5 4\r\n12 15\r\n12 16\r\n12 4\r\n6 16\r\n10 3\r\n9 7\r\n7 10\r\n3 13\r\n3 1\r\n2 8\r\n14 11\r\n17 6\r\n2 15\r\n9 14\r\n",
                "11 14 9 6 10 4 3 2 1 7 8 12 15 13 5 "
            ],
            [
                "17 12\r\n6 13 11 15 16 1 10 14 2 5 9 17 3 7 4 8 12\r\n6 1\r\n8 16\r\n4 15\r\n13 2\r\n16 7\r\n10 16\r\n14 7\r\n10 5\r\n12 17\r\n3 13\r\n13 9\r\n9 11\r\n",
                "10 11 4 1 3 8 9 2 5 6 12 7 "
            ],
            [
                "17 15\r\n10 11 13 8 17 5 14 12 4 15 6 3 1 7 2 9 16\r\n11 6\r\n4 9\r\n15 1\r\n1 17\r\n13 3\r\n8 13\r\n2 17\r\n4 17\r\n2 5\r\n15 10\r\n16 9\r\n6 5\r\n3 12\r\n1 8\r\n7 14\r\n",
                "3 8 4 6 14 15 10 9 7 12 1 2 11 5 13 "
            ],
            [
                "17 13\r\n15 2 11 1 7 9 6 17 5 16 8 13 4 3 12 14 10\r\n8 17\r\n1 12\r\n14 11\r\n11 3\r\n5 6\r\n14 10\r\n7 6\r\n4 13\r\n16 10\r\n15 1\r\n17 10\r\n4 1\r\n9 5\r\n",
                "3 4 10 2 12 5 13 7 9 6 11 1 8 "
            ],
            [
                "49 44\r\n8 39 1 18 27 16 3 32 22 19 49 24 42 37 28 45 9 10 38 29 23 36 13 6 25 17 47 26 48 35 21 4 15 5 41 34 33 31 43 30 7 20 44 11 14 46 12 40 2\r\n45 27\r\n47 16\r\n31 21\r\n7 10\r\n40 7\r\n35 41\r\n12 47\r\n4 18\r\n20 31\r\n1 18\r\n24 12\r\n13 42\r\n39 44\r\n17 26\r\n15 26\r\n45 5\r\n19 20\r\n27 16\r\n14 9\r\n1 32\r\n2 39\r\n45 36\r\n49 11\r\n29 19\r\n38 31\r\n18 3\r\n33 17\r\n6 47\r\n37 33\r\n3 10\r\n14 33\r\n49 44\r\n42 21\r\n10 48\r\n23 13\r\n48 19\r\n15 28\r\n34 45\r\n7 30\r\n30 41\r\n32 8\r\n39 43\r\n9 22\r\n22 45\r\n",
                "42 32 13 21 44 22 38 16 20 26 10 41 18 1 11 7 28 2 8 23 34 4 30 17 24 36 33 3 9 25 27 31 43 19 29 12 35 37 14 15 5 40 39 6 "
            ]
        ]
    }
]