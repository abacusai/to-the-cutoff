[
    {
        "name": "Cows and Cool Sequences",
        "description": "Bessie and the cows have recently been playing with \"cool\" sequences and are\ntrying to construct some. Unfortunately they are bad at arithmetic, so they\nneed your help! A pair (x, y) of positive integers is \"cool\" if x can be\nexpressed as the sum of y consecutive integers (not necessarily positive). A\nsequence (a1, a2, ..., an) is \"cool\" if the pairs (a1, a2), (a2, a3), ..., (an\n- 1, an) are all cool. The cows have a sequence of n positive integers, a1,\na2, ..., an. In one move, they may replace some ai with any other positive\ninteger (there are no other limits on the new value of ai). Determine the\nsmallest number of moves needed to make the resulting sequence cool. Input The\nfirst line contains a single integer, n (2 \u2264 n \u2264 5000). The next line contains\nn space-separated integers, a1, a2, ..., an (1 \u2264 ai \u2264 10^15). Please do not\nuse the \npreferred to use the cin, cout streams or the \ninteger, the minimum number of ai that must be changed to make the sequence\ncool. Examples Input 3 6 4 1 Output 0 Input 4 20 6 3 4 Output 2 Note In the\nfirst sample, the sequence is already cool, so we don't need to change any\nelements. In the second sample, we can change a2 to 5 and a3 to 10 to make\n(20, 5, 10, 4) which is cool. This changes 2 elements.\n\n",
        "cf_contest_id": 283,
        "cf_index": "D",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n6 4 1\r\n",
                "0\r\n"
            ],
            [
                "4\r\n20 6 3 4\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n1 8 1 7 9\r\n",
                "3\r\n"
            ],
            [
                "3\r\n5 1 3\r\n",
                "1\r\n"
            ],
            [
                "200\r\n2 1 1 1 2 1 2 1 1 1 2 1 2 2 2 1 1 2 1 2 1 1 1 2 2 1 2 1 1 2 1 1 1 2 1 1 2 2 2 2 2 2 2 2 2 2 1 2 2 1 2 1 2 2 1 1 2 2 2 2 2 2 2 1 1 1 2 1 2 2 1 1 2 1 2 2 2 1 2 1 1 1 2 1 1 2 2 1 2 2 1 2 2 1 1 2 1 1 1 1 1 2 2 1 1 2 1 2 2 2 1 2 1 1 1 2 2 1 2 2 2 1 1 2 1 2 2 1 2 2 2 1 1 2 2 1 2 1 1 2 2 1 2 1 2 1 2 2 2 1 1 2 2 1 1 2 1 1 1 2 2 2 1 2 2 2 1 2 1 1 1 1 2 1 2 1 2 1 1 1 2 2 2 1 2 1 1 2 2 1 1 1 1 1 2 2 2 1 2 2\r\n",
                "33\r\n"
            ],
            [
                "200\r\n2 2 3 2 1 2 1 2 6 1 6 2 6 1 2 6 5 1 3 6 2 2 4 4 5 5 3 2 2 3 4 2 1 2 2 5 3 6 3 4 5 5 2 2 2 4 6 6 4 4 5 6 6 1 6 6 5 5 6 3 6 2 2 4 1 5 5 5 5 4 2 6 1 2 1 2 2 3 5 5 5 1 5 4 2 1 3 2 5 5 6 4 2 5 2 5 2 2 2 4 3 5 2 2 1 2 1 6 4 3 2 3 6 1 5 5 4 1 2 2 5 3 1 3 6 2 6 4 3 3 1 3 3 5 2 1 3 4 6 4 3 6 3 4 3 1 3 4 6 3 4 1 5 3 5 4 2 1 6 1 6 5 4 6 6 2 3 6 5 2 6 4 5 1 2 5 4 1 5 2 5 5 4 3 1 6 3 2 5 2 2 3 3 1 1 3 6 6 6 2\r\n",
                "122\r\n"
            ],
            [
                "200\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "0\r\n"
            ],
            [
                "200\r\n1 2 1 2 2 1 2 2 2 1 1 1 2 2 1 2 2 1 2 1 1 2 1 2 1 2 2 1 2 2 1 2 1 2 1 2 1 2 2 1 1 1 1 2 1 1 2 2 1 2 1 1 2 2 2 1 2 1 1 1 1 1 1 1 2 1 2 2 2 2 2 2 1 1 1 2 2 2 2 2 1 2 1 2 1 2 2 2 1 1 1 1 2 1 1 1 2 2 1 2 1 1 1 2 2 1 1 2 1 2 1 2 1 1 1 2 2 2 1 1 1 2 2 2 1 2 1 2 2 1 2 2 2 1 1 1 1 1 2 2 2 2 2 2 1 1 1 2 1 1 1 1 2 1 2 2 2 2 1 2 2 1 1 1 1 1 2 1 2 2 2 2 1 1 1 2 1 2 1 2 1 1 2 1 1 2 1 2 1 1 1 1 2 1 2 1 1 1 2 2\r\n",
                "30\r\n"
            ],
            [
                "10\r\n3 3 3 3 3 3 3 3 3 3\r\n",
                "0\r\n"
            ],
            [
                "100\r\n24 33 88 55 4 24 19 19 63 90 9 47 24 74 21 43 20 100 58 15 36 66 13 4 9 51 24 96 50 27 100 41 92 9 67 94 17 11 98 24 72 57 96 85 50 9 45 41 63 76 80 59 25 67 21 84 88 15 62 60 79 65 5 66 1 85 92 100 61 75 44 96 53 97 2 28 83 42 60 42 34 73 44 99 58 46 75 100 75 55 35 52 93 80 69 75 50 67 100 77\r\n",
                "91\r\n"
            ],
            [
                "3\r\n9 4 4\r\n",
                "1\r\n"
            ],
            [
                "4\r\n6 7 4 5\r\n",
                "3\r\n"
            ],
            [
                "4\r\n3 1 5 5\r\n",
                "2\r\n"
            ],
            [
                "5\r\n36 37 6 18 36\r\n",
                "2\r\n"
            ],
            [
                "10\r\n104105246720 52052623360 213207545282560 426415090565120 6354080 832841973760 26650943160320 6506577920 50832640 832841973760\r\n",
                "8\r\n"
            ]
        ]
    }
]