[
    {
        "name": "String Multiplication",
        "description": "Roman and Denis are on the trip to the programming competition. Since the trip\nwas long, they soon got bored, and hence decided to came up with something.\nRoman invented a pizza's recipe, while Denis invented a string multiplication.\nAccording to Denis, the result of multiplication (product) of strings \n    s\n\nof length \n    m\n and \n    t\n is a string \n    t + s_1 + t + s_2 + \n    \u2026 + t\n    + s_m + t\n, where \n    s_i\n denotes the \n    i\n-th symbol of the string\n\n    s\n, and \"+\" denotes string concatenation. For example, the product of\nstrings \"abc\" and \"de\" is a string \"deadebdecde\", while the product of the\nstrings \"ab\" and \"z\" is a string \"zazbz\". Note, that unlike the numbers\nmultiplication, the product of strings \n    s\n and \n    t\n is not necessarily\nequal to product of \n    t\n and \n    s\n. Roman was jealous of Denis, since he\ninvented such a cool operation, and hence decided to invent something string-\nrelated too. Since Roman is beauty-lover, he decided to define the beauty of\nthe string as the length of the longest substring, consisting of only one\nletter. For example, the beauty of the string \"xayyaaabca\" is equal to\n\n    3\n, since there is a substring \"aaa\", while the beauty of the string\n\"qwerqwer\" is equal to \n    1\n, since all neighboring symbols in it are\ndifferent. In order to entertain Roman, Denis wrote down \n    n\n strings\n\n    p_1, p_2, p_3, \n    \u2026, p_n\n on the paper and asked him to calculate the\nbeauty of the string \n    ( \n    \u2026 (((p_1 \n    \u00b7 p_2) \n    \u00b7 p_3) \n    \u00b7\n    \u2026 ) \n    \u00b7 p_n\n, where \n    s \n    \u00b7 t\n denotes a multiplication of\nstrings \n    s\n and \n    t\n. Roman hasn't fully realized how Denis's\nmultiplication works, so he asked you for a help. Denis knows, that Roman is\nvery impressionable, he guarantees, that the beauty of the resulting string is\nat most \n    10^9\n. Input The first line contains a single integer \n    n\n\n(\n    2 \n    \u2264 n \n    \u2264 100\n     000\n) \u2014 the number of strings, wroted by Denis.\nNext \n    n\n lines contain non-empty strings \n    p_1, p_2, \n    \u2026, p_n\n,\nconsisting of lowercase english letters. It's guaranteed, that the total\nlength of the strings \n    p_i\n is at most \n    100\n     000\n, and that's the\nbeauty of the resulting product is at most \n    10^9\n. Output Print exactly\none integer \u2014 the beauty of the product of the strings. Examples Input 3 a b a\nOutput 3 Input 2 bnn a Output 1 Note In the first example, the product of\nstrings is equal to \"abaaaba\". In the second example, the product of strings\nis equal to \"abanana\".\n\n",
        "cf_contest_id": 1131,
        "cf_index": "E",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "greedy",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\na\r\nb\r\na\r\n",
                "3\r\n"
            ],
            [
                "2\r\nbnn\r\na\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "6\r\nw\r\ng\r\nc\r\nj\r\ny\r\nf\r\n",
                "1\r\n"
            ],
            [
                "5\r\nm\r\ng\r\nu\r\nt\r\ntttt\r\n",
                "9\r\n"
            ],
            [
                "4\r\nr\r\no\r\nw\r\nwwwwwwwwww\r\n",
                "21\r\n"
            ],
            [
                "4\r\nvr\r\nhp\r\nl\r\nllbn\r\n",
                "3\r\n"
            ],
            [
                "9\r\nlfpgbnlzyn\r\nc\r\ns\r\nw\r\nr\r\nm\r\nq\r\ny\r\nyinfblfcdhidphyfvgkxyuwomahiibbhnigdslsguhjkplibnhhrshtekwgefxeugyyyyy\r\n",
                "7\r\n"
            ],
            [
                "3\r\nj\r\nk\r\nkkailgwqnxtdsttkkkkkkk\r\n",
                "10\r\n"
            ],
            [
                "2\r\nn\r\nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\r\n",
                "93\r\n"
            ],
            [
                "2\r\nzxwp\r\nppppctfisvflhtjggg\r\n",
                "5\r\n"
            ],
            [
                "6\r\nu\r\np\r\nm\r\nz\r\nv\r\nvv\r\n",
                "5\r\n"
            ],
            [
                "3\r\nlt\r\nen\r\neeeeeeeeee\r\n",
                "21\r\n"
            ],
            [
                "4\r\no\r\nyhnx\r\ne\r\nennn\r\n",
                "4\r\n"
            ],
            [
                "6\r\nnf\r\nysvchtjkfgsbyfzxjaykey\r\nadvqnf\r\nwl\r\npi\r\nppppfvvmaebvhkoagppppp\r\n",
                "10\r\n"
            ],
            [
                "4\r\nqe\r\nnd\r\niqryhukieskfvaeettersinksrmazelxtgvartuz\r\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\r\n",
                "541\r\n"
            ],
            [
                "10\r\nj\r\ndyfu\r\nudzj\r\nwwow\r\nxtnw\r\nf\r\nc\r\nq\r\no\r\ngggg\r\n",
                "4\r\n"
            ]
        ]
    }
]