[
    {
        "name": "Au Pont Rouge",
        "description": "VK just opened its second HQ in St. Petersburg! Side of its office building\nhas a huge string \n    s\n written on its side. This part of the office is\nsupposed to be split into \n    m\n meeting rooms in such way that meeting room\nwalls are strictly between letters on the building. Obviously, meeting rooms\nshould not be of size 0, but can be as small as one letter wide. Each meeting\nroom will be named after the substring of \n    s\n written on its side. For\neach possible arrangement of \n    m\n meeting rooms we ordered a test meeting\nroom label for the meeting room with lexicographically minimal name. When\ndelivered, those labels got sorted backward lexicographically. What is printed\non \n    k\nth label of the delivery? Input In the first line, you are given\nthree integer numbers \n    n, m, k\n \u2014 length of string \n    s\n, number of\nplanned meeting rooms to split \n    s\n into and number of the interesting\nlabel (\n    2 \n    \u2264 n \n    \u2264 1\n     000; 1 \n    \u2264 m \n    \u2264 1\n     000; 1 \n    \u2264 k \n    \u2264\n    10^18\n). Second input line has string \n    s\n, consisting of \n    n\n\nlowercase english letters. For given \n    n, m, k\n there are at least \n    k\n\nways to split \n    s\n into \n    m\n substrings. Output Output single string \u2013\nname of meeting room printed on \n    k\n-th label of the delivery. Examples\nInput 4 2 1 abac Output aba Input 19 5 1821 aupontrougevkoffice Output au Note\nIn the first example, delivery consists of the labels \"aba\", \"ab\", \"a\". In the\nsecond example, delivery consists of \n    3060\n labels. The first label is\n\"aupontrougevkof\" and the last one is \"a\".\n\n",
        "cf_contest_id": 1310,
        "cf_index": "C",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dp",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4 2 1\r\nabac\r\n",
                "aba"
            ],
            [
                "19 5 1821\r\naupontrougevkoffice\r\n",
                "au"
            ]
        ],
        "private_cases": [
            [
                "5 1 1\r\ntrrbl\r\n",
                "trrbl"
            ],
            [
                "5 2 1\r\nidumy\r\n",
                "idum"
            ],
            [
                "5 2 2\r\nasgnj\r\n",
                "asg"
            ],
            [
                "18 3 30\r\nkbckbbhnqzzlpmtwdl\r\n",
                "kbckbbhn"
            ],
            [
                "21 4 100\r\nvqjdhhvufczemdrnwdfid\r\n",
                "id"
            ],
            [
                "136 10 10000\r\nzmfiiksfsiajfsmocfxcbpwmykfbvcjesvugomczchzhynsajyvslmfgfawvuhjukrcusaqemqsddraefeesenqylqhgkphstkufhqhhhmnvqxjutxhjsqawsskjxdtkhyrdednd\r\n",
                "vugomc"
            ],
            [
                "154 81 10000\r\nyocpcoifeqijjlxfpirerbdvhodniwreecnidrubisoewivmwynhvnwzywnntlerhvluvgtiijivurdznkmijgpvetolnheoxwgdgltcekbxtafredhjhlhfaurwivdatyrzwavvqdlyvjhajkugoiqyfe\r\n",
                "kb"
            ],
            [
                "401 150 1000000000000000000\r\nabacabafabacabadabacabaeabacabadabacabahabacabadabacabaeabacabadabacabafabacabadabacabaeabacabadabacabagabacabadabacabaeabacabadabacabafabacabadabacabaeabacabadabacabajabacabadabacabaeabacabadabacabafabacabadabacabaeabacabadabacabagabacabadabacabaeabacabadabacabafabacabadabacabaeabacabadabacabahabacabadabacabaeabacabadabacabafabacabadabacabaeabacabadabacabagabacabadabacabaeabacabadabacabafabacabada\r\n",
                "abacabafabacabadabacabaeabacabadabacabahabacabadabacabaeabacabadabacabafabacabadabacabaeabacabadabacaba"
            ]
        ]
    }
]