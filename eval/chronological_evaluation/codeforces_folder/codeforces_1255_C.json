[
    {
        "name": "League of Leesins",
        "description": "Bob is an avid fan of the video game \"League of Leesins\", and today he\ncelebrates as the League of Leesins World Championship comes to an end! The\ntournament consisted of \n    n\n (\n    n \n    \u2265 5\n) teams around the world.\nBefore the tournament starts, Bob has made a prediction of the rankings of\neach team, from \n    1\n-st to \n    n\n-th. After the final, he compared the\nprediction with the actual result and found out that the \n    i\n-th team\naccording to his prediction ended up at the \n    p_i\n-th position (\n    1 \n    \u2264\n    p_i \n    \u2264 n\n, all \n    p_i\n are unique). In other words, \n    p\n is a\npermutation of \n    1, 2, \n    \u2026, n\n. As Bob's favorite League player is the\nfamous \"3ga\", he decided to write down every \n    3\n consecutive elements of\nthe permutation \n    p\n. Formally, Bob created an array \n    q\n of \n    n-2\n\ntriples, where \n    q_i = (p_i, p_i+1, p_i+2)\n for each \n    1 \n    \u2264 i \n    \u2264\n    n-2\n. Bob was very proud of his array, so he showed it to his friend Alice.\nAfter learning of Bob's array, Alice declared that she could retrieve the\npermutation \n    p\n even if Bob rearranges the elements of \n    q\n and the\nelements within each triple. Of course, Bob did not believe in such magic, so\nhe did just the same as above to see Alice's respond. For example, if \n    n =\n    5\n and \n    p = [1, 4, 2, 3, 5]\n, then the original array \n    q\n will be\n\n    [(1, 4, 2), (4, 2, 3), (2, 3, 5)]\n. Bob can then rearrange the numbers\nwithin each triple and the positions of the triples to get \n    [(4, 3, 2), (2,\n    3, 5), (4, 1, 2)]\n. Note that \n    [(1, 4, 2), (4, 2, 2), (3, 3, 5)]\n is not\na valid rearrangement of \n    q\n, as Bob is not allowed to swap numbers belong\nto different triples. As Alice's friend, you know for sure that Alice was just\ntrying to show off, so you decided to save her some face by giving her any\npermutation \n    p\n that is consistent with the array \n    q\n she was given.\nInput The first line contains a single integer \n    n\n (\n    5 \n    \u2264 n \n    \u2264\n    10^5\n) \u2014 the size of permutation \n    p\n. The \n    i\n-th of the next\n\n    n-2\n lines contains \n    3\n integers \n    q_i, 1\n, \n    q_i, 2\n,\n\n    q_i, 3\n (\n    1 \n    \u2264 q_i, j\n    \u2264 n\n) \u2014 the elements of the\n\n    i\n-th triple of the rearranged (shuffled) array \n    q_i\n, in random\norder. Remember, that the numbers within each triple can be rearranged and\nalso the positions of the triples can be rearranged. It is guaranteed that\nthere is at least one permutation \n    p\n that is consistent with the input.\nOutput Print \n    n\n distinct integers \n    p_1, p_2, \n    \u2026, p_n\n (\n    1\n    \n    \u2264 p_i \n    \u2264 n\n) such that \n    p\n is consistent with array \n    q\n. If\nthere are multiple answers, print any. Example Input 5 4 3 2 2 3 5 4 1 2\nOutput 1 4 2 3 5\n\n",
        "cf_contest_id": 1255,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n4 3 2\r\n2 3 5\r\n4 1 2\r\n",
                "5 3 2 4 1 "
            ]
        ],
        "private_cases": [
            [
                "5\r\n4 5 3\r\n2 5 1\r\n1 3 5\r\n",
                "4 3 5 1 2 "
            ],
            [
                "6\r\n1 6 5\r\n4 5 1\r\n2 4 1\r\n4 2 3\r\n",
                "6 5 1 4 2 3 "
            ],
            [
                "7\r\n7 6 5\r\n7 2 1\r\n6 7 1\r\n1 2 3\r\n5 4 6\r\n",
                "4 5 6 7 1 2 3 "
            ],
            [
                "5\r\n1 2 3\r\n2 3 4\r\n3 4 5\r\n",
                "5 4 3 2 1 "
            ],
            [
                "5\r\n5 4 3\r\n4 3 2\r\n3 2 1\r\n",
                "5 4 3 2 1 "
            ],
            [
                "5\r\n5 2 3\r\n4 5 3\r\n1 5 4\r\n",
                "2 3 5 4 1 "
            ],
            [
                "5\r\n2 3 1\r\n5 1 3\r\n5 3 4\r\n",
                "4 5 3 1 2 "
            ],
            [
                "5\r\n2 3 4\r\n2 4 1\r\n5 3 2\r\n",
                "5 3 2 4 1 "
            ],
            [
                "6\r\n4 1 5\r\n1 6 3\r\n1 6 4\r\n3 2 6\r\n",
                "5 4 1 6 3 2 "
            ],
            [
                "6\r\n4 2 3\r\n6 5 1\r\n5 1 4\r\n4 1 3\r\n",
                "6 5 1 4 3 2 "
            ],
            [
                "6\r\n4 3 5\r\n3 4 6\r\n4 6 2\r\n2 6 1\r\n",
                "5 3 4 6 2 1 "
            ],
            [
                "7\r\n2 5 3\r\n5 2 4\r\n1 7 4\r\n1 6 7\r\n4 7 5\r\n",
                "6 1 7 4 5 2 3 "
            ],
            [
                "7\r\n1 4 7\r\n2 1 7\r\n4 7 5\r\n5 4 3\r\n2 6 1\r\n",
                "6 2 1 7 4 5 3 "
            ],
            [
                "8\r\n2 5 4\r\n3 5 2\r\n3 1 5\r\n1 8 3\r\n6 7 8\r\n8 7 1\r\n",
                "6 7 8 1 3 5 2 4 "
            ],
            [
                "8\r\n3 7 6\r\n6 2 3\r\n2 6 8\r\n2 4 8\r\n4 1 8\r\n1 5 4\r\n",
                "7 3 6 2 8 4 1 5 "
            ],
            [
                "8\r\n3 7 5\r\n2 1 6\r\n3 7 6\r\n8 2 1\r\n6 3 1\r\n4 2 8\r\n",
                "5 7 3 6 1 2 8 4 "
            ],
            [
                "8\r\n8 3 1\r\n3 4 6\r\n8 5 1\r\n7 4 6\r\n8 6 3\r\n7 4 2\r\n",
                "5 1 8 3 6 4 7 2 "
            ],
            [
                "9\r\n7 5 3\r\n8 9 4\r\n8 1 7\r\n8 9 1\r\n1 5 7\r\n2 3 5\r\n6 3 2\r\n",
                "6 2 3 5 7 1 8 9 4 "
            ],
            [
                "9\r\n1 8 9\r\n9 6 4\r\n2 1 3\r\n1 2 8\r\n3 5 2\r\n6 7 4\r\n8 9 4\r\n",
                "7 6 4 9 8 1 2 3 5 "
            ],
            [
                "9\r\n6 9 8\r\n2 3 4\r\n2 3 1\r\n5 6 8\r\n4 6 5\r\n7 8 9\r\n3 5 4\r\n",
                "7 9 8 6 5 4 3 2 1 "
            ]
        ]
    }
]