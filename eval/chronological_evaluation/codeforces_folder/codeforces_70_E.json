[
    {
        "name": "Information Reform",
        "description": "Thought it is already the XXI century, the Mass Media isn't very popular in\nWalrusland. The cities get news from messengers who can only travel along\nroads. The network of roads in Walrusland is built so that it is possible to\nget to any city from any other one in exactly one way, and the roads' lengths\nare equal. The North Pole governor decided to carry out an information reform.\nSeveral cities were decided to be chosen and made regional centers.\nMaintaining a region center takes k fishlars (which is a local currency) per\nyear. It is assumed that a regional center always has information on the\nlatest news. For every city which is not a regional center, it was decided to\nappoint a regional center which will be responsible for keeping this city\ninformed. In that case the maintenance costs will be equal to dlen fishlars\nper year, where len is the distance from a city to the corresponding regional\ncenter, measured in the number of roads along which one needs to go. Your task\nis to minimize the costs to carry out the reform. Input The first line\ncontains two given numbers n and k (1 \u2264 n \u2264 180, 1 \u2264 k \u2264 10^5). The second\nline contains n - 1 integers di, numbered starting with 1 (di \u2264 di + 1, 0 \u2264 di\n\u2264 10^5). Next n - 1 lines contain the pairs of cities connected by a road.\nOutput On the first line print the minimum number of fishlars needed for a\nyear's maintenance. On the second line print n numbers, where the i-th number\nwill represent the number of the regional center, appointed to the i-th city.\nIf the i-th city is a regional center itself, then you should print number i.\nIf there are several solutions to that problem, print any of them. Examples\nInput 8 10 2 5 9 11 15 19 20 1 4 1 3 1 7 4 6 2 8 2 3 3 5 Output 38 3 3 3 4 3 4\n3 3\n\n",
        "cf_contest_id": 70,
        "cf_index": "E",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8 10\r\n2 5 9 11 15 19 20\r\n1 4\r\n1 3\r\n1 7\r\n4 6\r\n2 8\r\n2 3\r\n3 5\r\n",
                "38\r\n1 2 2 1 2 1 1 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "6 10\r\n4 8 10 11 12\r\n3 6\r\n2 6\r\n3 5\r\n2 4\r\n1 6\r\n",
                "38\r\n6 6 6 6 6 6\r\n"
            ],
            [
                "6 10\r\n1 4 7 11 13\r\n4 6\r\n3 4\r\n3 5\r\n1 2\r\n2 4\r\n",
                "21\r\n4 4 4 4 4 4\r\n"
            ],
            [
                "6 10\r\n2 4 5 9 13\r\n1 2\r\n1 5\r\n3 4\r\n1 4\r\n2 6\r\n",
                "24\r\n1 1 1 1 1 1\r\n"
            ],
            [
                "6 10\r\n1 6 11 16 20\r\n4 6\r\n2 3\r\n1 2\r\n2 4\r\n2 5\r\n",
                "20\r\n2 2 2 2 2 2\r\n"
            ],
            [
                "10 151\r\n70 78 159 212 281 369 431 440 444\r\n1 6\r\n8 9\r\n1 4\r\n5 10\r\n7 8\r\n9 10\r\n2 8\r\n3 7\r\n1 10\r\n",
                "878\r\n1 8 8 1 1 1 8 8 8 1\r\n"
            ],
            [
                "10 223\r\n45 71 127 173 239 296 344 444 465\r\n4 6\r\n3 10\r\n2 3\r\n4 5\r\n3 8\r\n6 8\r\n4 9\r\n1 7\r\n1 10\r\n",
                "884\r\n10 10 10 4 4 4 10 4 4 10\r\n"
            ],
            [
                "10 287\r\n74 156 247 285 380 387 439 537 621\r\n1 9\r\n2 8\r\n1 7\r\n5 6\r\n2 7\r\n3 8\r\n1 4\r\n5 9\r\n1 10\r\n",
                "1379\r\n1 8 8 1 5 5 1 8 5 1\r\n"
            ],
            [
                "10 195\r\n45 55 115 143 168 172 249 327 414\r\n3 8\r\n5 10\r\n2 3\r\n1 9\r\n4 8\r\n3 9\r\n6 8\r\n7 10\r\n7 8\r\n",
                "770\r\n8 8 8 8 8 8 8 8 8 8\r\n"
            ],
            [
                "10 172\r\n67 157 223 307 383 451 510 587 684\r\n6 7\r\n4 6\r\n2 10\r\n1 6\r\n7 9\r\n1 5\r\n1 2\r\n3 4\r\n4 8\r\n",
                "1075\r\n1 1 4 4 1 4 7 4 7 1\r\n"
            ],
            [
                "3 1\r\n1 1\r\n1 2\r\n2 3\r\n",
                "3\r\n1 2 3\r\n"
            ],
            [
                "1 1\r\n",
                "1\r\n1\r\n"
            ],
            [
                "1 100000\r\n",
                "100000\r\n1\r\n"
            ],
            [
                "5 1000\r\n0 0 100 100\r\n1 2\r\n2 5\r\n5 3\r\n3 4\r\n",
                "1000\r\n5 5 5 5 5\r\n"
            ],
            [
                "20 1837\r\n94 187 208 280 299 379 395 447 456 518 616 624 638 649 674 760 778 780 849\r\n3 14\r\n17 19\r\n12 20\r\n2 20\r\n7 16\r\n15 16\r\n6 20\r\n10 15\r\n1 11\r\n7 18\r\n2 9\r\n3 9\r\n6 17\r\n12 15\r\n8 19\r\n1 18\r\n5 17\r\n6 13\r\n3 4\r\n",
                "6100\r\n20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20\r\n"
            ],
            [
                "9 1\r\n0 100 100 100 100 100 100 100\r\n1 2\r\n2 3\r\n2 4\r\n4 5\r\n5 6\r\n2 7\r\n7 8\r\n8 9\r\n",
                "3\r\n2 2 2 5 5 5 8 8 8\r\n"
            ]
        ]
    }
]