[
    {
        "name": "Finals in arithmetic",
        "description": "Vitya is studying in the third grade. During the last math lesson all the\npupils wrote on arithmetic quiz. Vitya is a clever boy, so he managed to\nfinish all the tasks pretty fast and Oksana Fillipovna gave him a new one,\nthat is much harder. Let's denote a flip operation of an integer as follows:\nnumber is considered in decimal notation and then reverted. If there are any\nleading zeroes afterwards, they are thrown away. For example, if we flip 123\nthe result is the integer 321, but flipping 130 we obtain 31, and by flipping\n31 we come to 13. Oksana Fillipovna picked some number a without leading\nzeroes, and flipped it to get number ar. Then she summed a and ar, and told\nVitya the resulting value n. His goal is to find any valid a. As Oksana\nFillipovna picked some small integers as a and ar, Vitya managed to find the\nanswer pretty fast and became interested in finding some general algorithm to\ndeal with this problem. Now, he wants you to write the program that for given\nn finds any a without leading zeroes, such that a + ar = n or determine that\nsuch a doesn't exist. Input The first line of the input contains a single\ninteger n (1 \u2264 n \u2264 10^100000). Output If there is no such positive integer a\nwithout leading zeroes that a + ar = n then print 0. Otherwise, print any\nvalid a. If there are many possible answers, you are allowed to pick any.\nExamples Input 4 Output 2 Input 11 Output 10 Input 5 Output 0 Input 33 Output\n21 Note In the first sample 4 = 2 + 2, a = 2 is the only possibility. In the\nsecond sample 11 = 10 + 1, a = 10 \u2014 the only valid solution. Note, that a = 01\nis incorrect, because a can't have leading zeroes. It's easy to check that\nthere is no suitable a in the third sample. In the fourth sample 33 = 30 + 3 =\n12 + 21, so there are three possibilities for a: a = 30, a = 12, a = 21. Any\nof these is considered to be correct answer.\n\n",
        "cf_contest_id": 625,
        "cf_index": "D",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n",
                "2\r\n"
            ],
            [
                "11\r\n",
                "10\r\n"
            ],
            [
                "5\r\n",
                "0\r\n"
            ],
            [
                "33\r\n",
                "21\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n",
                "0\r\n"
            ],
            [
                "99\r\n",
                "54\r\n"
            ],
            [
                "100\r\n",
                "0\r\n"
            ],
            [
                "101\r\n",
                "100\r\n"
            ],
            [
                "111\r\n",
                "0\r\n"
            ],
            [
                "121\r\n",
                "110\r\n"
            ],
            [
                "161\r\n",
                "130\r\n"
            ],
            [
                "165\r\n",
                "87\r\n"
            ],
            [
                "1430\r\n",
                "0\r\n"
            ],
            [
                "32822\r\n",
                "0\r\n"
            ],
            [
                "42914\r\n",
                "0\r\n"
            ],
            [
                "67075\r\n",
                "0\r\n"
            ],
            [
                "794397\r\n",
                "0\r\n"
            ],
            [
                "870968\r\n",
                "0\r\n"
            ],
            [
                "990089\r\n",
                "0\r\n"
            ],
            [
                "686686\r\n",
                "343343\r\n"
            ],
            [
                "928818\r\n",
                "469854\r\n"
            ],
            [
                "165355\r\n",
                "87677\r\n"
            ],
            [
                "365662\r\n",
                "183281\r\n"
            ],
            [
                "30092\r\n",
                "15541\r\n"
            ],
            [
                "95948\r\n",
                "47974\r\n"
            ],
            [
                "189108\r\n",
                "95049\r\n"
            ],
            [
                "970068\r\n",
                "485484\r\n"
            ],
            [
                "230021\r\n",
                "165460\r\n"
            ],
            [
                "999999\r\n",
                "555444\r\n"
            ],
            [
                "199998\r\n",
                "99999\r\n"
            ],
            [
                "119801\r\n",
                "109900\r\n"
            ],
            [
                "100001\r\n",
                "100000\r\n"
            ],
            [
                "891297\r\n",
                "0\r\n"
            ],
            [
                "110401\r\n",
                "0\r\n"
            ],
            [
                "177067\r\n",
                "0\r\n"
            ],
            [
                "1000000\r\n",
                "0\r\n"
            ],
            [
                "201262002\r\n",
                "0\r\n"
            ],
            [
                "813594318\r\n",
                "0\r\n"
            ],
            [
                "643303246\r\n",
                "0\r\n"
            ],
            [
                "2277107722\r\n",
                "0\r\n"
            ],
            [
                "1094093901\r\n",
                "0\r\n"
            ],
            [
                "1063002601\r\n",
                "0\r\n"
            ],
            [
                "5593333955\r\n",
                "3352211422\r\n"
            ],
            [
                "1624637326\r\n",
                "817818608\r\n"
            ],
            [
                "8292112917\r\n",
                "4696555953\r\n"
            ],
            [
                "9012332098\r\n",
                "4556665544\r\n"
            ],
            [
                "1432011233\r\n",
                "766505566\r\n"
            ],
            [
                "1898999897\r\n",
                "999999898\r\n"
            ],
            [
                "9009890098\r\n",
                "4555444544\r\n"
            ],
            [
                "4321001234\r\n",
                "2211000112\r\n"
            ],
            [
                "1738464936\r\n",
                "869281968\r\n"
            ],
            [
                "4602332064\r\n",
                "2301211032\r\n"
            ],
            [
                "1001760001\r\n",
                "1000880000\r\n"
            ],
            [
                "1000000001\r\n",
                "1000000000\r\n"
            ],
            [
                "6149019415\r\n",
                "0\r\n"
            ],
            [
                "7280320916\r\n",
                "0\r\n"
            ],
            [
                "1111334001\r\n",
                "0\r\n"
            ],
            [
                "6762116775\r\n",
                "0\r\n"
            ],
            [
                "10000000000\r\n",
                "0\r\n"
            ],
            [
                "3031371285404035821731303\r\n",
                "0\r\n"
            ],
            [
                "3390771275149315721770933\r\n",
                "0\r\n"
            ],
            [
                "8344403107710167013044438\r\n",
                "0\r\n"
            ],
            [
                "398213879352153978312893\r\n",
                "0\r\n"
            ],
            [
                "319183517960959715381913\r\n",
                "0\r\n"
            ],
            [
                "447341993380073399143744\r\n",
                "0\r\n"
            ],
            [
                "2300941052398832501490032\r\n",
                "1200521031249411200240011\r\n"
            ],
            [
                "1931812635088771537217148\r\n",
                "970956818049830718558069\r\n"
            ],
            [
                "2442173122931392213712431\r\n",
                "1776586566965695556855660\r\n"
            ],
            [
                "1098765432101101234567900\r\n",
                "554433221101000112233445\r\n"
            ],
            [
                "1123456789876678987654320\r\n",
                "566778899988788988776655\r\n"
            ],
            [
                "9009900990099009900990098\r\n",
                "4555455545554454445444544\r\n"
            ],
            [
                "9012320990123209901232098\r\n",
                "4556665545566554445565544\r\n"
            ],
            [
                "1789878987898898789878986\r\n",
                "899989998999898889888988\r\n"
            ],
            [
                "1625573270595486073374436\r\n",
                "812786635347742536687218\r\n"
            ],
            [
                "1000000177157517600000001\r\n",
                "1000000088578758800000000\r\n"
            ],
            [
                "1000000000000000000000001\r\n",
                "1000000000000000000000000\r\n"
            ],
            [
                "4038996154923294516988304\r\n",
                "0\r\n"
            ],
            [
                "3454001245690964432004542\r\n",
                "0\r\n"
            ],
            [
                "5200592971632471682861014\r\n",
                "0\r\n"
            ],
            [
                "7899445300286737036548887\r\n",
                "0\r\n"
            ],
            [
                "10000000000000000000000000\r\n",
                "0\r\n"
            ]
        ]
    }
]