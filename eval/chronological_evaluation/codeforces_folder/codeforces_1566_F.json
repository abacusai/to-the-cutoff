[
    {
        "name": "Points Movement",
        "description": "There are \n    n\n points and \n    m\n segments on the coordinate line. The\ninitial coordinate of the \n    i\n-th point is \n    a_i\n. The endpoints of the\n\n    j\n-th segment are \n    l_j\n and \n    r_j\n \u2014 left and right endpoints,\nrespectively. You can move the points. In one move you can move any point from\nits current coordinate \n    x\n to the coordinate \n    x - 1\n or the coordinate\n\n    x + 1\n. The cost of this move is \n    1\n. You should move the points in\nsuch a way that each segment is visited by at least one point. A point visits\nthe segment \n    [l, r]\n if there is a moment when its coordinate was on the\nsegment \n    [l, r]\n (including endpoints). You should find the minimal\npossible total cost of all moves such that all segments are visited. Input The\ninput consists of multiple test cases. The first line contains a single\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases.\nDescription of the test cases follows. The first line of each test case\ncontains two integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 2 \n    \u00b7\n    10^5\n) \u2014 the number of points and segments respectively. The next line\ncontains \n    n\n distinct integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    -10^9\n    \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the initial coordinates of the points. Each of the\nnext \n    m\n lines contains two integers \n    l_j\n, \n    r_j\n (\n    -10^9 \n    \u2264\n    l_j \n    \u2264 r_j \n    \u2264 10^9\n) \u2014 the left and the right endpoints of the\n\n    j\n-th segment. It's guaranteed that the sum of \n    n\n and the sum of\n\n    m\n over all test cases does not exceed \n    2 \n    \u00b7 10^5\n. Output For\neach test case print a single integer \u2014 the minimal total cost of all moves\nsuch that all segments are visited. Example Input 2 4 11 2 6 14 18 0 3 4 5 11\n15 3 5 10 13 16 16 1 4 8 12 17 19 7 13 14 19 4 12 -9 -16 12 3 -20 -18 -14 -13\n-10 -7 -3 -1 0 4 6 11 7 9 8 10 13 15 14 18 16 17 18 19 Output 5 22 Note In the\nfirst test case the points can be moved as follows: Move the second point from\nthe coordinate \n    6\n to the coordinate \n    5\n. Move the third point from\nthe coordinate \n    14\n to the coordinate \n    13\n. Move the fourth point from\nthe coordinate \n    18\n to the coordinate \n    17\n. Move the third point from\nthe coordinate \n    13\n to the coordinate \n    12\n. Move the fourth point from\nthe coordinate \n    17\n to the coordinate \n    16\n. The total cost of moves is\n\n    5\n. It is easy to see, that all segments are visited by these movements.\nFor example, the tenth segment (\n    [7, 13]\n) is visited after the second\nmove by the third point. Here is the image that describes the first test case:\n\n",
        "cf_contest_id": 1566,
        "cf_index": "F",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp",
            "greedy",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n4 11\r\n2 6 14 18\r\n0 3\r\n4 5\r\n11 15\r\n3 5\r\n10 13\r\n16 16\r\n1 4\r\n8 12\r\n17 19\r\n7 13\r\n14 19\r\n4 12\r\n-9 -16 12 3\r\n-20 -18\r\n-14 -13\r\n-10 -7\r\n-3 -1\r\n0 4\r\n6 11\r\n7 9\r\n8 10\r\n13 15\r\n14 18\r\n16 17\r\n18 19\r\n",
                "5\r\n22\r\n"
            ]
        ],
        "private_cases": []
    }
]