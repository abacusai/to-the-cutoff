[
    {
        "name": "Memory and Crow",
        "description": "There are n integers b1, b2, ..., bn written in a row. For all i from 1 to n,\nvalues ai are defined by the crows performing the following procedure: The\ncrow sets ai initially 0. The crow then adds bi to ai, subtracts bi + 1, adds\nthe bi + 2 number, and so on until the n'th number. Thus, ai = bi - bi + 1 +\nbi + 2 - bi + 3.... Memory gives you the values a1, a2, ..., an, and he now\nwants you to find the initial numbers b1, b2, ..., bn written in the row? Can\nyou do it? Input The first line of the input contains a single integer n (2 \u2264\nn \u2264 100 000) \u2014 the number of integers written in the row. The next line\ncontains n, the i'th of which is ai ( - 10^9 \u2264 ai \u2264 10^9) \u2014 the value of the\ni'th number. Output Print n integers corresponding to the sequence b1, b2,\n..., bn. It's guaranteed that the answer is unique and fits in 32-bit integer\ntype. Examples Input 5 6 -4 8 -2 3 Output 2 4 6 1 3 Input 5 3 -2 -1 5 6 Output\n1 -3 4 11 6 Note In the first sample test, the crows report the numbers 6, -\n4, 8, - 2, and 3 when he starts at indices 1, 2, 3, 4 and 5 respectively. It\nis easy to check that the sequence 2 4 6 1 3 satisfies the reports. For\nexample, 6 = 2 - 4 + 6 - 1 + 3, and - 4 = 4 - 6 + 1 - 3. In the second sample\ntest, the sequence 1, - 3, 4, 11, 6 satisfies the reports. For example, 5 = 11\n- 6 and 6 = 6.\n\n",
        "cf_contest_id": 712,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n6 -4 8 -2 3\r\n",
                "2 4 6 1 3\r\n"
            ],
            [
                "5\r\n3 -2 -1 5 6\r\n",
                "1 -3 4 11 6\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n13 -2 532 -63 -23 -63 -64 -23 12 10\r\n",
                "11 530 469 -86 -86 -127 -87 -11 22 10\r\n"
            ],
            [
                "10\r\n0 0 0 0 0 0 0 0 0 0\r\n",
                "0 0 0 0 0 0 0 0 0 0\r\n"
            ],
            [
                "10\r\n1 -1 1 -1 1 -1 1 -1 1 -1\r\n",
                "0 0 0 0 0 0 0 0 0 -1\r\n"
            ],
            [
                "10\r\n-1000000000 1000000000 -1000000000 1000000000 -1000000000 1000000000 -1000000000 1000000000 -1000000000 1000000000\r\n",
                "0 0 0 0 0 0 0 0 0 1000000000\r\n"
            ],
            [
                "10\r\n124 532 -642 6482 -124 952 -235 7594 34 -12\r\n",
                "656 -110 5840 6358 828 717 7359 7628 22 -12\r\n"
            ],
            [
                "10\r\n1294 35852 32749 537295 12048 53729 29357 58320 64739 1240\r\n",
                "37146 68601 570044 549343 65777 83086 87677 123059 65979 1240\r\n"
            ]
        ]
    }
]