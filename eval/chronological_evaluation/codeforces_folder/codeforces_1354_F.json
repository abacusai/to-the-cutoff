[
    {
        "name": "Summoning Minions",
        "description": "Polycarp plays a computer game. In this game, the players summon armies of\nmagical minions, which then fight each other. Polycarp can summon \n    n\n\ndifferent minions. The initial power level of the \n    i\n-th minion is\n\n    a_i\n, and when it is summoned, all previously summoned minions' power\nlevels are increased by \n    b_i\n. The minions can be summoned in any order.\nUnfortunately, Polycarp cannot have more than \n    k\n minions under his\ncontrol. To get rid of unwanted minions after summoning them, he may destroy\nthem. Each minion can be summoned (and destroyed) only once. Polycarp's goal\nis to summon the strongest possible army. Formally, he wants to maximize the\nsum of power levels of all minions under his control (those which are summoned\nand not destroyed). Help Polycarp to make up a plan of actions to summon the\nstrongest possible army! Input The first line contains one integer \n    T\n\n(\n    1 \n    \u2264 T \n    \u2264 75\n) \u2014 the number of test cases. Each test case begins\nwith a line containing two integers \n    n\n and \n    k\n (\n    1 \n    \u2264 k \n    \u2264 n\n    \n    \u2264 75\n) \u2014 the number of minions availible for summoning, and the maximum\nnumber of minions that can be controlled by Polycarp, respectively. Then\n\n    n\n lines follow, the \n    i\n-th line contains \n    2\n integers \n    a_i\n\nand \n    b_i\n (\n    1 \n    \u2264 a_i \n    \u2264 10^5\n, \n    0 \n    \u2264 b_i \n    \u2264 10^5\n) \u2014\nthe parameters of the \n    i\n-th minion. Output For each test case print the\noptimal sequence of actions as follows: Firstly, print \n    m\n \u2014 the number of\nactions which Polycarp has to perform (\n    0 \n    \u2264 m \n    \u2264 2n\n). Then print\n\n    m\n integers \n    o_1\n, \n    o_2\n, ..., \n    o_m\n, where \n    o_i\n denotes\nthe \n    i\n-th action as follows: if the \n    i\n-th action is to summon the\nminion \n    x\n, then \n    o_i = x\n, and if the \n    i\n-th action is to destroy\nthe minion \n    x\n, then \n    o_i = -x\n. Each minion can be summoned at most\nonce and cannot be destroyed before being summoned (and, obviously, cannot be\ndestroyed more than once). The number of minions in Polycarp's army should be\nnot greater than \n    k\n after every action. If there are multiple optimal\nsequences, print any of them. Example Input 3 5 2 5 3 7 0 5 0 4 0 10 0 2 1 10\n100 50 10 5 5 1 5 2 4 3 3 4 2 5 1 Output 4 2 1 -1 5 1 2 5 5 4 3 2 1 Note\nConsider the example test. In the first test case, Polycarp can summon the\nminion \n    2\n with power level \n    7\n, then summon the minion \n    1\n, which\nwill increase the power level of the previous minion by \n    3\n, then destroy\nthe minion \n    1\n, and finally, summon the minion \n    5\n. After this,\nPolycarp will have two minions with power levels of \n    10\n. In the second\ntest case, Polycarp can control only one minion, so he should choose the\nstrongest of them and summon it. In the third test case, Polycarp is able to\nsummon and control all five minions.\n\n",
        "cf_contest_id": 1354,
        "cf_index": "F",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dp",
            "flows",
            "graph matchings",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n5 2\r\n5 3\r\n7 0\r\n5 0\r\n4 0\r\n10 0\r\n2 1\r\n10 100\r\n50 10\r\n5 5\r\n1 5\r\n2 4\r\n3 3\r\n4 2\r\n5 1\r\n",
                "8\r\n2 3 -3 4 -4 1 -1 5\r\n3\r\n1 -1 2\r\n5\r\n5 4 3 2 1\r\n"
            ]
        ],
        "private_cases": []
    }
]