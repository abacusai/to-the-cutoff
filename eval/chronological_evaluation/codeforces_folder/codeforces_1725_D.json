[
    {
        "name": "Deducing Sortability",
        "description": "Let's say Pak Chanek has an array \n    A\n consisting of \n    N\n positive\nintegers. Pak Chanek will do a number of operations. In each operation, Pak\nChanek will do the following: Choose an index \n    p\n (\n    1 \n    \u2264 p \n    \u2264\n    N\n). Let \n    c\n be the number of operations that have been done on index\n\n    p\n before this operation. Decrease the value of \n    A_p\n by \n    2^c\n.\nMultiply the value of \n    A_p\n by \n    2\n. After each operation, all elements\nof \n    A\n must be positive integers. An array \n    A\n is said to be sortable\nif and only if Pak Chanek can do zero or more operations so that \n    A_1 < A_2\n    < A_3 < A_4 < \n    \u2026 < A_N\n. Pak Chanek must find an array \n    A\n that is\nsortable with length \n    N\n such that \n    A_1 + A_2 + A_3 + A_4 + \n    \u2026 +\n    A_N\n is the minimum possible. If there are more than one possibilities, Pak\nChanek must choose the array that is lexicographically minimum among them. Pak\nChanek must solve the following things: Pak Chanek must print the value of\n\n    A_1 + A_2 + A_3 + A_4 + \n    \u2026 + A_N\n for that array. \n    Q\n questions\nwill be given. For the \n    i\n-th question, an integer \n    P_i\n is given. Pak\nChanek must print the value of \n    A_P_i\n. Help Pak Chanek solve the\nproblem. Note: an array \n    B\n of size \n    N\n is said to be\nlexicographically smaller than an array \n    C\n that is also of size \n    N\n\nif and only if there exists an index \n    i\n such that \n    B_i < C_i\n and for\neach \n    j < i\n, \n    B_j = C_j\n. Input The first line contains two integers\n\n    N\n and \n    Q\n (\n    1 \n    \u2264 N \n    \u2264 10^9\n, \n    0 \n    \u2264 Q \n    \u2264\n    min(N, 10^5)\n) \u2014 the required length of array \n    A\n and the number of\nquestions. The \n    i\n-th of the next \n    Q\n lines contains a single integer\n\n    P_i\n (\n    1 \n    \u2264 P_1 < P_2 < \n    \u2026 < P_Q \n    \u2264 N\n) \u2014 the index\nasked in the \n    i\n-th question. Output Print \n    Q+1\n lines. The \n    1\n-st\nline contains an integer representing \n    A_1 + A_2 + A_3 + A_4 + \n    \u2026 +\n    A_N\n. For each \n    1 \n    \u2264 i \n    \u2264 Q\n, the \n    (i+1)\n-th line contains\nan integer representing \n    A_P_i\n. Examples Input 6 3 1 4 5 Output 17 1 3\n4 Input 1 0 Output 1 Note In the first example, the array \n    A\n obtained is\n\n    [1, 2, 3, 3, 4, 4]\n. We can see that the array is sortable by doing the\nfollowing operations: Choose index \n    5\n, then \n    A = [1, 2, 3, 3, 6, 4]\n.\nChoose index \n    6\n, then \n    A = [1, 2, 3, 3, 6, 6]\n. Choose index \n    4\n,\nthen \n    A = [1, 2, 3, 4, 6, 6]\n. Choose index \n    6\n, then \n    A = [1, 2, 3,\n    4, 6, 8]\n.\n\n",
        "cf_contest_id": 1725,
        "cf_index": "D",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "bitmasks",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "6 3\r\n1\r\n4\r\n5\r\n",
                "17\r\n1\r\n3\r\n4\r\n"
            ],
            [
                "1 0\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1000000000 0\r\n",
                "42163202144757\r\n"
            ],
            [
                "1 1\r\n1\r\n",
                "1\r\n1\r\n"
            ],
            [
                "2 2\r\n1\r\n2\r\n",
                "3\r\n1\r\n2\r\n"
            ],
            [
                "3 3\r\n1\r\n2\r\n3\r\n",
                "6\r\n1\r\n2\r\n3\r\n"
            ],
            [
                "4 4\r\n1\r\n2\r\n3\r\n4\r\n",
                "9\r\n1\r\n2\r\n3\r\n3\r\n"
            ],
            [
                "5 5\r\n1\r\n2\r\n3\r\n4\r\n5\r\n",
                "13\r\n1\r\n2\r\n3\r\n3\r\n4\r\n"
            ],
            [
                "6 6\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n",
                "17\r\n1\r\n2\r\n3\r\n3\r\n4\r\n4\r\n"
            ],
            [
                "7 7\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n",
                "22\r\n1\r\n2\r\n3\r\n3\r\n4\r\n4\r\n5\r\n"
            ],
            [
                "8 8\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n",
                "27\r\n1\r\n2\r\n3\r\n3\r\n4\r\n4\r\n5\r\n5\r\n"
            ]
        ]
    }
]