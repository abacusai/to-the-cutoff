[
    {
        "name": "String Reconstruction",
        "description": "Ivan had string s consisting of small English letters. However, his friend\nJulia decided to make fun of him and hid the string s. Ivan preferred making a\nnew string to finding the old one. Ivan knows some information about the\nstring s. Namely, he remembers, that string ti occurs in string s at least ki\ntimes or more, he also remembers exactly ki positions where the string ti\noccurs in string s: these positions are xi, 1, xi, 2, ..., xi, ki. He\nremembers n such strings ti. You are to reconstruct lexicographically minimal\nstring s such that it fits all the information Ivan remembers. Strings ti and\nstring s consist of small English letters only. Input The first line contains\nsingle integer n (1 \u2264 n \u2264 10^5) \u2014 the number of strings Ivan remembers. The\nnext n lines contain information about the strings. The i-th of these lines\ncontains non-empty string ti, then positive integer ki, which equal to the\nnumber of times the string ti occurs in string s, and then ki distinct\npositive integers xi, 1, xi, 2, ..., xi, ki in increasing order \u2014 positions,\nin which occurrences of the string ti in the string s start. It is guaranteed\nthat the sum of lengths of strings ti doesn't exceed 10^6, 1 \u2264 xi, j \u2264 10^6, 1\n\u2264 ki \u2264 10^6, and the sum of all ki doesn't exceed 10^6. The strings ti can\ncoincide. It is guaranteed that the input data is not self-contradictory, and\nthus at least one answer always exists. Output Print lexicographically minimal\nstring that fits all the information Ivan remembers. Examples Input 3 a 4 1 3\n5 7 ab 2 1 5 ca 1 4 Output abacaba Input 1 a 1 3 Output aaa Input 3 ab 1 1 aba\n1 3 ab 2 3 5 Output ababab\n\n",
        "cf_contest_id": 827,
        "cf_index": "A",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "sortings",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\na 4 1 3 5 7\r\nab 2 1 5\r\nca 1 4\r\n",
                "abacaba\r\n"
            ],
            [
                "1\r\na 1 3\r\n",
                "aaa\r\n"
            ],
            [
                "3\r\nab 1 1\r\naba 1 3\r\nab 2 3 5\r\n",
                "ababab\r\n"
            ]
        ],
        "private_cases": [
            [
                "6\r\nba 2 16 18\r\na 1 12\r\nb 3 4 13 20\r\nbb 2 6 8\r\nababbbbbaab 1 3\r\nabababbbbb 1 1\r\n",
                "abababbbbbaabaababab\r\n"
            ],
            [
                "17\r\na 4 2 7 8 9\r\nbbaa 1 5\r\nba 2 1 6\r\naa 2 7 8\r\nb 6 1 3 4 5 6 10\r\nbbbaa 1 4\r\nbbba 1 4\r\nbab 1 1\r\nbba 1 5\r\nbbb 2 3 4\r\nbb 3 3 4 5\r\nab 1 2\r\nabbb 1 2\r\nbbbb 1 3\r\nabb 1 2\r\nabbbba 1 2\r\nbbbbaaa 1 3\r\n",
                "babbbbaaab\r\n"
            ],
            [
                "9\r\nfab 1 32\r\nb 2 38 54\r\nbadab 1 38\r\nba 1 62\r\na 1 25\r\nab 1 37\r\nbacaba 1 26\r\ncabaeab 1 12\r\nacab 1 3\r\n",
                "aaacabaaaaacabaeabaaaaaaabacabafabaaabadabaaaaaaaaaaabaaaaaaaba\r\n"
            ],
            [
                "18\r\nabacab 2 329 401\r\nabadabacabae 1 293\r\nbacab 1 2\r\nabacabadabacabaga 1 433\r\nc 1 76\r\nbaca 1 26\r\ndab 1 72\r\nabagabaca 1 445\r\nabaea 1 397\r\ndabac 1 280\r\nab 2 201 309\r\nca 1 396\r\nabacabadab 1 497\r\nac 1 451\r\ncaba 1 444\r\nad 1 167\r\nbadab 1 358\r\naba 1 421\r\n",
                "abacabaaaaaaaaaaaaaaaaaaabacaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadabacaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadabacaaaaaaaaabadabacabaeaaaaabaaaaaaaaaaaaaaaaaaabacabaaaaaaaaaaaaaaaaaaaaaaabadabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaacabaeabacabaaaaaaaaaaaaaaabaaaaaaaaaaabacabadabacabagabacaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabacabadab\r\n"
            ],
            [
                "10\r\ndabacabafa 1 24\r\nbacabadab 1 18\r\ndabaca 1 8\r\nbacabaea 1 42\r\nbacaba 1 34\r\nabadabaca 1 5\r\nbadabacaba 1 54\r\nbacabaeaba 1 10\r\nabacabaeab 1 9\r\nadabacaba 1 23\r\n",
                "aaaaabadabacabaeabacabadabacabafabacabaaabacabaeaaaaabadabacaba\r\n"
            ],
            [
                "20\r\nadabacabaeabacabada 1 359\r\nabadabacabafabaca 1 213\r\nacabagabacaba 1 315\r\ncabaeabacabadabacab 1 268\r\nfabacabadabacabaeab 1 352\r\ncabafabacabada 1 28\r\nacabadabacabaea 1 67\r\ncabadabacabaeabacaba 1 484\r\nabacabadabacaba 1 209\r\nacabaiabacaba 1 251\r\nacabafabacabadabac 1 475\r\nabacabaeabacabadaba 1 105\r\ncabadabacabaeaba 1 68\r\nafabacabadabacab 1 287\r\nacabafab 1 91\r\ndabacabaea 1 328\r\nabaeabacabadab 1 461\r\nabadabacabaeabaca 1 421\r\nabadabacabafabac 1 277\r\nfabacabadabac 1 96\r\n",
                "aaaaaaaaaaaaaaaaaaaaaaaaaaacabafabacabadaaaaaaaaaaaaaaaaaaaaaaaaaaacabadabacabaeabaaaaaaaaacabafabacabadabacabaeabacabadabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabacabadabacabafabacaaaaaaaaaaaaaaaaaaaaaaacabaiabacabaaaaacabaeabacabadabacabafabacabadabacabaaaaaaaaaaaaacabagabacabadabacabaeaaaaaaaaaaaaaaafabacabadabacabaeabacabadaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabadabacabaeabacaaaaaaaaaaaaaaaaaaaaaaaaabaeabacabadabacabafabacabadabacabaeabacaba\r\n"
            ],
            [
                "4\r\na 2 1 10\r\na 3 1 2 9\r\na 2 3 8\r\na 2 4 7\r\n",
                "aaaaaaaaaa\r\n"
            ],
            [
                "2\r\naba 1 1\r\nb 1 2\r\n",
                "aba\r\n"
            ]
        ]
    }
]