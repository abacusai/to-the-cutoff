[
    {
        "name": "The minimal unique substring",
        "description": "Let \n    s\n be some string consisting of symbols \"0\" or \"1\". Let's call a\nstring \n    t\n a substring of string \n    s\n, if there exists such number \n    1\n    \n    \u2264 l \n    \u2264 |s| - |t| + 1\n that \n    t = s_l s_l+1\n    \u2026 s_l + |t| -\n    1\n. Let's call a substring \n    t\n of string \n    s\n unique, if there exist\nonly one such \n    l\n. For example, let \n    s =\n\"1010111\". A string \n    t =\n\"010\" is an unique substring of \n    s\n, because \n    l = 2\n is the only\none suitable number. But, for example \n    t =\n\"10\" isn't a unique substring\nof \n    s\n, because \n    l = 1\n and \n    l = 3\n are suitable. And for example\n\n    t =\n\"00\" at all isn't a substring of \n    s\n, because there is no\nsuitable \n    l\n. Today Vasya solved the following problem at the informatics\nlesson: given a string consisting of symbols \"0\" and \"1\", the task is to find\nthe length of its minimal unique substring. He has written a solution to this\nproblem and wants to test it. He is asking you to help him. You are given\n\n    2\n positive integers \n    n\n and \n    k\n, such that \n    (n \n     2) = (k\n    \n     2)\n, where \n    (x \n     2)\n is operation of taking remainder of\n\n    x\n by dividing on \n    2\n. Find any string \n    s\n consisting of \n    n\n\nsymbols \"0\" or \"1\", such that the length of its minimal unique substring is\nequal to \n    k\n. Input The first line contains two integers \n    n\n and\n\n    k\n, separated by spaces (\n    1 \n    \u2264 k \n    \u2264 n \n    \u2264 100\n     000\n,\n\n    (k \n     2) = (n \n     2)\n). Output Print a string \n    s\n of length\n\n    n\n, consisting of symbols \"0\" and \"1\". Minimal length of the unique\nsubstring of \n    s\n should be equal to \n    k\n. You can find any suitable\nstring. It is guaranteed, that there exists at least one such string. Examples\nInput 4 4 Output 1111 Input 5 3 Output 01010 Input 7 3 Output 1011011 Note In\nthe first test, it's easy to see, that the only unique substring of string\n\n    s =\n\"1111\" is all string \n    s\n, which has length \n    4\n. In the\nsecond test a string \n    s =\n\"01010\" has minimal unique substring \n    t\n    =\n\"101\", which has length \n    3\n. In the third test a string \n    s =\n\"1011011\" has minimal unique substring \n    t =\n\"110\", which has length\n\n    3\n.\n\n",
        "cf_contest_id": 1158,
        "cf_index": "B",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "math",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 4\r\n",
                "1111\n"
            ],
            [
                "5 3\r\n",
                "01010\n"
            ],
            [
                "7 3\r\n",
                "0010010\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n",
                "1\n"
            ],
            [
                "100 80\r\n",
                "0000000000100000000001000000000010000000000100000000001000000000010000000000100000000001000000000010\n"
            ],
            [
                "2 2\r\n",
                "11\n"
            ],
            [
                "3 3\r\n",
                "111\n"
            ],
            [
                "3 1\r\n",
                "010\n"
            ],
            [
                "4 2\r\n",
                "0101\n"
            ],
            [
                "5 5\r\n",
                "11111\n"
            ],
            [
                "5 1\r\n",
                "00100\n"
            ],
            [
                "6 6\r\n",
                "111111\n"
            ],
            [
                "6 4\r\n",
                "010101\n"
            ],
            [
                "6 2\r\n",
                "001001\n"
            ],
            [
                "30 22\r\n",
                "000010000100001000010000100001\n"
            ],
            [
                "79 61\r\n",
                "0000000001000000000100000000010000000001000000000100000000010000000001000000000\n"
            ],
            [
                "87 43\r\n",
                "000000000000000000000010000000000000000000000100000000000000000000001000000000000000000\n"
            ],
            [
                "81 1\r\n",
                "000000000000000000000000000000000000000010000000000000000000000000000000000000000\n"
            ],
            [
                "101 3\r\n",
                "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000010\n"
            ],
            [
                "11 3\r\n",
                "00001000010\n"
            ]
        ]
    }
]