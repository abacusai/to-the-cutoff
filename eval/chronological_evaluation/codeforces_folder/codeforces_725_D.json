[
    {
        "name": "Contest Balloons",
        "description": "One tradition of ACM-ICPC contests is that a team gets a balloon for every\nsolved problem. We assume that the submission time doesn't matter and teams\nare sorted only by the number of balloons they have. It means that one's place\nis equal to the number of teams with more balloons, increased by 1. For\nexample, if there are seven teams with more balloons, you get the eight place.\nTies are allowed. You should know that it's important to eat before a contest.\nIf the number of balloons of a team is greater than the weight of this team,\nthe team starts to float in the air together with their workstation. They\neventually touch the ceiling, what is strictly forbidden by the rules. The\nteam is then disqualified and isn't considered in the standings. A contest has\njust finished. There are n teams, numbered 1 through n. The i-th team has ti\nballoons and weight wi. It's guaranteed that ti doesn't exceed wi so nobody\nfloats initially. Limak is a member of the first team. He doesn't like\ncheating and he would never steal balloons from other teams. Instead, he can\ngive his balloons away to other teams, possibly making them float. Limak can\ngive away zero or more balloons of his team. Obviously, he can't give away\nmore balloons than his team initially has. What is the best place Limak can\nget? Input The first line of the standard input contains one integer n (2 \u2264 n\n\u2264 300 000) \u2014 the number of teams. The i-th of n following lines contains two\nintegers ti and wi (0 \u2264 ti \u2264 wi \u2264 10^18) \u2014 respectively the number of balloons\nand the weight of the i-th team. Limak is a member of the first team. Output\nPrint one integer denoting the best place Limak can get. Examples Input 8 20\n1000 32 37 40 1000 45 50 16 16 16 16 14 1000 2 1000 Output 3 Input 7 4 4 4 4 4\n4 4 4 4 4 4 4 5 5 Output 2 Input 7 14000000003 1000000000000000000 81000000000\n88000000000 5000000000 7000000000 15000000000 39000000000 46000000000\n51000000000 0 1000000000 0 0 Output 2 Note In the first sample, Limak has 20\nballoons initially. There are three teams with more balloons (32, 40 and 45\nballoons), so Limak has the fourth place initially. One optimal strategy is:\nLimak gives 6 balloons away to a team with 32 balloons and weight 37, which is\njust enough to make them fly. Unfortunately, Limak has only 14 balloons now\nand he would get the fifth place. Limak gives 6 balloons away to a team with\n45 balloons. Now they have 51 balloons and weight 50 so they fly and get\ndisqualified. Limak gives 1 balloon to each of two teams with 16 balloons\ninitially. Limak has 20 - 6 - 6 - 1 - 1 = 6 balloons. There are three other\nteams left and their numbers of balloons are 40, 14 and 2. Limak gets the\nthird place because there are two teams with more balloons. In the second\nsample, Limak has the second place and he can't improve it. In the third\nsample, Limak has just enough balloons to get rid of teams 2, 3 and 5 (the\nteams with 81 000 000 000, 5 000 000 000 and 46 000 000 000 balloons\nrespectively). With zero balloons left, he will get the second place (ex-aequo\nwith team 6 and team 7).\n\n",
        "cf_contest_id": 725,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8\r\n20 1000\r\n32 37\r\n40 1000\r\n45 50\r\n16 16\r\n16 16\r\n14 1000\r\n2 1000\r\n",
                "3\r\n"
            ],
            [
                "7\r\n4 4\r\n4 4\r\n4 4\r\n4 4\r\n4 4\r\n4 4\r\n5 5\r\n",
                "2\r\n"
            ],
            [
                "7\r\n14000000003 1000000000000000000\r\n81000000000 88000000000\r\n5000000000 7000000000\r\n15000000000 39000000000\r\n46000000000 51000000000\r\n0 1000000000\r\n0 0\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n100 150\r\n5 100000\r\n",
                "1\r\n"
            ],
            [
                "9\r\n4 70\r\n32 56\r\n32 65\r\n77 78\r\n5 29\r\n72 100\r\n0 55\r\n42 52\r\n66 72\r\n",
                "7\r\n"
            ],
            [
                "3\r\n1 2\r\n12 19\r\n25 45\r\n",
                "3\r\n"
            ],
            [
                "5\r\n2 23\r\n1 13\r\n3 9\r\n0 20\r\n6 7\r\n",
                "3\r\n"
            ],
            [
                "10\r\n19 22\r\n10 77\r\n3 52\r\n16 42\r\n25 67\r\n14 42\r\n44 85\r\n37 39\r\n36 62\r\n6 85\r\n",
                "4\r\n"
            ],
            [
                "15\r\n143 698\r\n269 879\r\n100 728\r\n86 855\r\n368 478\r\n174 368\r\n442 980\r\n812 825\r\n121 220\r\n137 198\r\n599 706\r\n423 586\r\n96 647\r\n177 439\r\n54 620\r\n",
                "9\r\n"
            ],
            [
                "3\r\n1000 1000\r\n1001 1001\r\n700 1000000\r\n",
                "1\r\n"
            ],
            [
                "5\r\n4 100\r\n10 11\r\n10 11\r\n3 3\r\n3 3\r\n",
                "2\r\n"
            ]
        ]
    }
]