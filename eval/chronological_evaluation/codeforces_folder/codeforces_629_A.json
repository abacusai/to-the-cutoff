[
    {
        "name": "Far Relative\u2019s Birthday Cake",
        "description": "Door's family is going celebrate Famil Doors's birthday party. They love Famil\nDoor so they are planning to make his birthday cake weird! The cake is a n \u00d7 n\nsquare consisting of equal squares with side length 1. Each square is either\nempty or consists of a single chocolate. They bought the cake and randomly\nstarted to put the chocolates on the cake. The value of Famil Door's happiness\nwill be equal to the number of pairs of cells with chocolates that are in the\nsame row or in the same column of the cake. Famil Doors's family is wondering\nwhat is the amount of happiness of Famil going to be? Please, note that any\npair can be counted no more than once, as two different cells can't share both\nthe same row and the same column. Input In the first line of the input, you\nare given a single integer n (1 \u2264 n \u2264 100) \u2014 the length of the side of the\ncake. Then follow n lines, each containing n characters. Empty cells are\ndenoted with '.', while cells that contain chocolates are denoted by 'C'.\nOutput Print the value of Famil Door's happiness, i.e. the number of pairs of\nchocolate pieces that share the same row or the same column. Examples Input 3\n.CC C.. C.C Output 4 Input 4 CC.. C..C .CC. .CC. Output 9 Note If we number\nrows from top to bottom and columns from left to right, then, pieces that\nshare the same row in the first sample are: (1, 2) and (1, 3) (3, 1) and (3,\n3) Pieces that share the same column are: (2, 1) and (3, 1) (1, 3) and (3, 3)\n\n",
        "cf_contest_id": 629,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "combinatorics",
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n.CC\r\nC..\r\nC.C\r\n",
                "4\r\n"
            ],
            [
                "4\r\nCC..\r\nC..C\r\n.CC.\r\n.CC.\r\n",
                "9\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n.\r\n",
                "0\r\n"
            ],
            [
                "3\r\n.CC\r\nC..\r\nC.C\r\n",
                "4\r\n"
            ],
            [
                "2\r\nCC\r\nCC\r\n",
                "4\r\n"
            ],
            [
                "3\r\nC..\r\nC..\r\nC..\r\n",
                "3\r\n"
            ]
        ]
    }
]