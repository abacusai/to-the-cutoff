[
    {
        "name": "Cactus Lady and her Cing",
        "description": "Cactus lady loves her cactuses very much. Especially she likes a small cactus\nnamed Cing. Cing can be seen as a connected undirected graph in which every\nvertex lies on at most one simple cycle. Intuitively, a cactus is a\ngeneralization of a tree where some cycles are allowed. Multiedges (multiple\nedges between a pair of vertices) and loops (edges that connect a vertex to\nitself) are not allowed. She bought a special grid for her special little\ncactus Cing. This grid can be represented as a graph consisting of two paths\nof length \n    400\n     000\n, \n    u_(0, -200\n     000) - u_(0, -199\n     999) -\n    \n    \u2026 - u_(0, 200\n     000)\n and \n    u_(1, -200\n     000) - u_(1,\n    -199\n     999) - \n    \u2026 - u_(1, 200\n     000)\n, connected together by\n\n    400\n     001\n edges \n    (u_(0, i), u_(1, i))\n for each \n    i\n. In\nother words, a grid can be seen as a ladder. Cactus lady wants to know whether\nshe can embed Cing into this grid, i.e., map each vertex of the cactus onto a\nseparate vertex of the grid while each edge of the cactus will be mapped onto\nsome edge of the grid. Input The first line contains an integer \n    t\n \u2014 the\nnumber of test cases. Each test case begins with a line containing two\nintegers \n    n\n and \n    m\n \u2014 the number of vertices and the number of edges\nin a given cactus, respectively (\n    1 \n    \u2264 n \n    \u2264 200\n     000\n; \n    0 \n    \u2264\n    m \n    \u2264 250\n     000\n). Each of the following \n    m\n lines contains two\nintegers \n    v\n and \n    u\n, describing the edges of the cactus (\n    1 \n    \u2264\n    v, u \n    \u2264 n, u \n     v\n). The total sum of all \n    n\n in the input doesn't\nexceed \n    200\n     000\n. Output Print an answer for each test case in the same\norder the cases appear in the input. For each test case print \"No\" in the\nfirst line, if no layout exists. Otherwise print \"Yes\" in the first line, and\nthe following \n    n\n lines describing the layout. The \n    i\n-th of these\n\n    n\n lines should contain two integers \n    x_i\n and \n    y_i\n, the\nlocation of the \n    i\n-th vertex (\n    0 \n    \u2264 x_i \n    \u2264 1\n; \n    -200\n     000\n    \n    \u2264 y_i \n    \u2264 200\n     000\n). Example Input 5 4 3 1 2 2 3 3 4 8 7 1 2 3 2 2\n4 4 5 4 6 6 7 6 8 5 4 1 2 1 3 1 4 1 5 8 9 1 2 2 3 3 4 1 4 4 5 5 6 6 7 7 8 5 8\n10 10 1 2 2 3 3 4 4 5 5 6 6 1 3 7 4 8 1 9 6 10 Output Yes 0 0 0 1 1 1 1 2 Yes\n0 3 1 3 1 4 1 2 0 2 1 1 0 1 1 0 No Yes 0 0 1 0 1 1 0 1 0 2 0 3 1 3 1 2 Yes 1 1\n1 2 1 3 0 3 0 2 0 1 1 4 0 4 1 0 0 0 Note Empty lines between test cases are\nfor clarity. In real test cases there are no empty lines. In these notes, we\nconsider the embeddings for tests 2 and 4. We start with the embedding for\ntest 2. Here goes the embedding for test 4.\n\n",
        "cf_contest_id": 1578,
        "cf_index": "C",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [],
        "private_cases": []
    }
]