[
    {
        "name": "Mrs. Hudson's Pancakes",
        "description": "Mrs. Hudson hasn't made her famous pancakes for quite a while and finally she\ndecided to make them again. She has learned m new recipes recently and she\ncan't wait to try them. Those recipes are based on n special spices. Mrs.\nHudson has these spices in the kitchen lying in jars numbered with integers\nfrom 0 to n - 1 (each spice lies in an individual jar). Each jar also has the\nprice of the corresponding spice inscribed \u2014 some integer ai. We know three\nvalues for the i-th pancake recipe: di, si, ci. Here di and ci are integers,\nand si is the pattern of some integer written in the numeral system with radix\ndi. The pattern contains digits, Latin letters (to denote digits larger than\nnine) and question marks. Number x in the di-base numeral system matches the\npattern si, if we can replace question marks in the pattern with digits and\nletters so that we obtain number x (leading zeroes aren't taken into\nconsideration when performing the comparison). More formally: each question\nmark should be replaced by exactly one digit or exactly one letter. If after\nwe replace all question marks we get a number with leading zeroes, we can\ndelete these zeroes. For example, number 40A9875 in the 11-base numeral system\nmatches the pattern \"??4??987?\", and number 4A9875 does not. To make the\npancakes by the i-th recipe, Mrs. Hudson should take all jars with numbers\nwhose representation in the di-base numeral system matches the pattern si. The\ncontrol number of the recipe (zi) is defined as the sum of number ci and the\nproduct of prices of all taken jars. More formally: (where j is all such\nnumbers whose representation in the di-base numeral system matches the pattern\nsi). Mrs. Hudson isn't as interested in the control numbers as she is in their\nminimum prime divisors. Your task is: for each recipe i find the minimum prime\ndivisor of number zi. If this divisor exceeds 100, then you do not have to\nfind it, print -1. Input The first line contains the single integer n (1 \u2264 n \u2264\n10^4). The second line contains space-separated prices of the spices a0, a1,\n..., an - 1, where ai is an integer (1 \u2264 ai \u2264 10^18). The third line contains\nthe single integer m (1 \u2264 m \u2264 3\u00b710^4) \u2014 the number of recipes Mrs. Hudson has\nlearned. Next m lines describe the recipes, one per line. First you are given\nan integer di, written in the decimal numeral system (2 \u2264 di \u2264 16). Then after\na space follows the si pattern \u2014 a string from 1 to 30 in length, inclusive,\nconsisting of digits from \"0\" to \"9\", letters from \"A\" to \"F\" and signs \"?\".\nLetters from \"A\" to \"F\" should be considered as digits from 10 to 15\ncorrespondingly. It is guaranteed that all digits of the pattern (including\nthe digits that are represented by letters) are strictly less than di. Then\nafter a space follows an integer ci, written in the decimal numeral system (1\n\u2264 ci \u2264 10^18). Please do not use the \nintegers in \u0421++, in is preferred to use cin, cout, strings or the \nspecificator instead. Output For each recipe count by what minimum prime\nnumber the control number is divided and print this prime number on the single\nline. If this number turns out larger than 100, print -1. Examples Input 1 1 1\n2 ? 1 Output 2 Input 4 2 3 5 7 4 2 ?0 11 2 ?1 13 2 0? 17 2 1? 19 Output 3 2 23\n2 Input 1 1000000000000000000 1 16 ?????????????? 1 Output -1 Note In the\nfirst test any one-digit number in the binary system matches. The jar is only\none and its price is equal to 1, the number c is also equal to 1, the control\nnumber equals 2. The minimal prime divisor of 2 is 2. In the second test there\nare 4 jars with numbers from 0 to 3, and the prices are equal 2, 3, 5 and 7\ncorrespondingly \u2014 the first four prime numbers. In all recipes numbers should\nbe two-digit. In the first recipe the second digit always is 0, in the second\nrecipe the second digit always is 1, in the third recipe the first digit must\nbe 0, in the fourth recipe the first digit always is 1. Consequently, the\ncontrol numbers \u200b\u200bare as follows: in the first recipe 2 \u00d7 5 + 11 = 21 (the\nminimum prime divisor is 3), in the second recipe 3 \u00d7 7 + 13 = 44 (the minimum\nprime divisor is 2), in the third recipe 2 \u00d7 3 + 17 = 23 (the minimum prime\ndivisor is 23) and, finally, in the fourth recipe 5 \u00d7 7 + 19 = 54 (the minimum\nprime divisor is 2). In the third test, the number should consist of fourteen\ndigits and be recorded in a sixteen-base numeral system. Number 0 (the number\nof the single bottles) matches, the control number will be equal to 10^18 + 1.\nThe minimum prime divisor of this number is equal to 101 and you should print\n-1.\n\n",
        "cf_contest_id": 156,
        "cf_index": "E",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dp"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n1\r\n1\r\n2 ? 1\r\n",
                "2\r\n"
            ],
            [
                "4\r\n2 3 5 7\r\n4\r\n2 ?0 11\r\n2 ?1 13\r\n2 0? 17\r\n2 1? 19\r\n",
                "3\r\n2\r\n23\r\n2\r\n"
            ],
            [
                "1\r\n1000000000000000000\r\n1\r\n16 ?????????????? 1\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n100\r\n1\r\n2 ???000???0??0 1\r\n",
                "-1\r\n"
            ]
        ]
    }
]