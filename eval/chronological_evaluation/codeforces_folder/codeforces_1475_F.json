[
    {
        "name": "Unusual Matrix",
        "description": "You are given two binary square matrices \n    a\n and \n    b\n of size \n    n\n    \n    \u00d7 n\n. A matrix is called binary if each of its elements is equal to\n\n    0\n or \n    1\n. You can do the following operations on the matrix \n    a\n\narbitrary number of times (0 or more): vertical xor. You choose the number\n\n    j\n (\n    1 \n    \u2264 j \n    \u2264 n\n) and for all \n    i\n (\n    1 \n    \u2264 i \n    \u2264\n    n\n) do the following: \n    a_i, j := a_i, j\n    \u2295 1\n (\n    \u2295\n\n\u2014 is the operation xor (exclusive or)). horizontal xor. You choose the number\n\n    i\n (\n    1 \n    \u2264 i \n    \u2264 n\n) and for all \n    j\n (\n    1 \n    \u2264 j \n    \u2264\n    n\n) do the following: \n    a_i, j := a_i, j\n    \u2295 1\n. Note that the\nelements of the \n    a\n matrix change after each operation. For example, if\n\n    n=3\n and the matrix \n    a\n is: \n    \n\n    [ 1 1 0; ; ; 0 0 1; ; ; 1 1 0;  ]\n\n    \n Then the following\nsequence of operations shows an example of transformations: vertical xor,\n\n    j=1\n. \n    \n\n    a= \n    [ 0 1 0; ; ; 1 0 1; ; ; 0 1 0;  ]\n\n    \n horizontal xor, \n    i=2\n. \n    \n\n    a=\n    \n    [ 0 1 0; ; ; 0 1 0; ; ; 0 1 0;  ]\n\n    \n vertical xor, \n    j=2\n. \n    \n\n    a= \n    [ 0 0 0; ; ; 0 0 0; ; ; 0 0 0;  ]\n\n    \n Check if\nthere is a sequence of operations such that the matrix \n    a\n becomes equal\nto the matrix \n    b\n. Input The first line contains one integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of test cases. Then \n    t\n test cases\nfollow. The first line of each test case contains one integer \n    n\n (\n    1\n    \n    \u2264 n \n    \u2264 1000\n) \u2014 the size of the matrices. The following \n    n\n\nlines contain strings of length \n    n\n, consisting of the characters '0' and\n'1' \u2014 the description of the matrix \n    a\n. An empty line follows. The\nfollowing \n    n\n lines contain strings of length \n    n\n, consisting of the\ncharacters '0' and '1' \u2014 the description of the matrix \n    b\n. It is\nguaranteed that the sum of \n    n\n over all test cases does not exceed\n\n    1000\n. Output For each test case, output on a separate line: \"YES\", there\nis such a sequence of operations that the matrix \n    a\n becomes equal to the\nmatrix \n    b\n; \"NO\" otherwise. You can output \"YES\" and \"NO\" in any case (for\nexample, the strings yEs, yes, Yes and YES will be recognized as positive).\nExample Input 3 3 110 001 110 000 000 000 3 101 010 101 010 101 010 2 01 11 10\n10 Output YES YES NO Note The first test case is explained in the statements.\nIn the second test case, the following sequence of operations is suitable:\nhorizontal xor, \n    i=1\n; horizontal xor, \n    i=2\n; horizontal xor,\n\n    i=3\n; It can be proved that there is no sequence of operations in the\nthird test case so that the matrix \n    a\n becomes equal to the matrix\n\n    b\n.\n\n",
        "cf_contest_id": 1475,
        "cf_index": "F",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "2-sat",
            "brute force",
            "constructive algorithms"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3\r\n110\r\n001\r\n110\r\n\r\n000\r\n000\r\n000\r\n3\r\n101\r\n010\r\n101\r\n\r\n010\r\n101\r\n010\r\n2\r\n01\r\n11\r\n\r\n10\r\n10\r\n",
                "YES\r\nYES\r\nNO\r\n"
            ]
        ],
        "private_cases": []
    }
]