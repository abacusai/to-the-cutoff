[
    {
        "name": "Presents in Bankopolis",
        "description": "Bankopolis is an incredible city in which all the n crossroads are located on\na straight line and numbered from 1 to n along it. On each crossroad there is\na bank office. The crossroads are connected with m oriented bicycle lanes (the\ni-th lane goes from crossroad ui to crossroad vi), the difficulty of each of\nthe lanes is known. Oleg the bank client wants to gift happiness and joy to\nthe bank employees. He wants to visit exactly k offices, in each of them he\nwants to gift presents to the employees. The problem is that Oleg don't want\nto see the reaction on his gifts, so he can't use a bicycle lane which passes\nnear the office in which he has already presented his gifts (formally, the\ni-th lane passes near the office on the x-th crossroad if and only if min(ui,\nvi) < x < max(ui, vi))). Of course, in each of the offices Oleg can present\ngifts exactly once. Oleg is going to use exactly k - 1 bicycle lane to move\nbetween offices. Oleg can start his path from any office and finish it in any\noffice. Oleg wants to choose such a path among possible ones that the total\ndifficulty of the lanes he will use is minimum possible. Find this minimum\npossible total difficulty. Input The first line contains two integers n and k\n(1 \u2264 n, k \u2264 80) \u2014 the number of crossroads (and offices) and the number of\noffices Oleg wants to visit. The second line contains single integer m (0 \u2264 m\n\u2264 2000) \u2014 the number of bicycle lanes in Bankopolis. The next m lines contain\ninformation about the lanes. The i-th of these lines contains three integers\nui, vi and ci (1 \u2264 ui, vi \u2264 n, 1 \u2264 ci \u2264 1000), denoting the crossroads\nconnected by the i-th road and its difficulty. Output In the only line print\nthe minimum possible total difficulty of the lanes in a valid path, or -1 if\nthere are no valid paths. Examples Input 7 4 4 1 6 2 6 2 2 2 4 2 2 7 1 Output\n6 Input 4 3 4 2 1 2 1 3 2 3 4 2 4 1 1 Output 3 Note In the first example Oleg\nvisiting banks by path 1 \u2192 6 \u2192 2 \u2192 4. Path 1 \u2192 6 \u2192 2 \u2192 7 with smaller\ndifficulity is incorrect because crossroad 2 \u2192 7 passes near already visited\noffice on the crossroad 6. In the second example Oleg can visit banks by path\n4 \u2192 1 \u2192 3.\n\n",
        "cf_contest_id": 793,
        "cf_index": "D",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "graphs",
            "shortest paths"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 4\r\n4\r\n1 6 2\r\n6 2 2\r\n2 4 2\r\n2 7 1\r\n",
                "6\r\n"
            ],
            [
                "4 3\r\n4\r\n2 1 2\r\n1 3 2\r\n3 4 2\r\n4 1 1\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 2\r\n10\r\n2 3 290\r\n3 1 859\r\n3 1 852\r\n1 2 232\r\n1 2 358\r\n2 1 123\r\n1 3 909\r\n2 1 296\r\n1 3 119\r\n1 2 584\r\n",
                "119\r\n"
            ],
            [
                "3 3\r\n4\r\n1 2 545\r\n1 3 716\r\n3 1 3\r\n2 3 338\r\n",
                "548\r\n"
            ],
            [
                "5 3\r\n20\r\n5 2 515\r\n4 1 865\r\n3 4 570\r\n1 5 371\r\n3 1 420\r\n5 2 464\r\n4 3 130\r\n4 1 381\r\n1 2 702\r\n5 1 97\r\n5 2 402\r\n5 2 314\r\n1 4 272\r\n3 1 505\r\n5 4 662\r\n2 3 893\r\n1 3 20\r\n4 2 601\r\n1 3 4\r\n4 2 474\r\n",
                "101\r\n"
            ],
            [
                "5 5\r\n20\r\n2 5 174\r\n4 3 496\r\n5 2 103\r\n2 1 345\r\n2 4 942\r\n3 5 131\r\n3 2 451\r\n5 2 299\r\n2 4 285\r\n4 5 241\r\n4 5 706\r\n2 1 639\r\n1 5 94\r\n1 2 844\r\n3 4 194\r\n2 4 812\r\n2 5 566\r\n3 5 293\r\n3 4 356\r\n2 5 717\r\n",
                "978\r\n"
            ],
            [
                "5 5\r\n10\r\n2 4 420\r\n4 5 974\r\n5 1 910\r\n1 3 726\r\n1 2 471\r\n5 2 94\r\n3 2 307\r\n2 5 982\r\n5 4 848\r\n3 5 404\r\n",
                "-1\r\n"
            ],
            [
                "3 2\r\n4\r\n2 3 716\r\n3 2 239\r\n3 2 646\r\n3 2 39\r\n",
                "39\r\n"
            ],
            [
                "5 4\r\n4\r\n5 4 614\r\n4 1 177\r\n1 3 66\r\n5 2 43\r\n",
                "857\r\n"
            ],
            [
                "10 4\r\n10\r\n1 4 662\r\n4 7 555\r\n7 9 172\r\n1 8 481\r\n8 10 609\r\n1 2 705\r\n1 10 225\r\n8 2 939\r\n2 10 329\r\n6 10 477\r\n",
                "1389\r\n"
            ],
            [
                "10 7\r\n50\r\n4 7 655\r\n7 3 220\r\n3 5 15\r\n5 10 811\r\n10 1 490\r\n1 2 800\r\n7 10 200\r\n1 5 377\r\n1 4 656\r\n6 4 432\r\n3 7 563\r\n1 8 122\r\n2 9 777\r\n3 2 157\r\n5 8 912\r\n9 8 496\r\n9 2 740\r\n3 2 201\r\n6 7 653\r\n1 7 554\r\n6 9 660\r\n3 2 622\r\n6 10 227\r\n9 1 42\r\n2 6 346\r\n2 7 944\r\n3 10 654\r\n5 2 501\r\n1 6 786\r\n3 8 306\r\n6 1 998\r\n6 2 581\r\n10 1 843\r\n10 9 993\r\n10 9 93\r\n2 9 770\r\n1 5 89\r\n1 7 761\r\n6 1 387\r\n7 1 24\r\n5 9 922\r\n1 8 480\r\n9 7 814\r\n4 3 682\r\n9 3 73\r\n9 6 436\r\n4 1 685\r\n10 8 46\r\n8 2 725\r\n4 1 892\r\n",
                "1760\r\n"
            ],
            [
                "6 4\r\n10\r\n2 5 609\r\n5 6 805\r\n6 4 814\r\n5 6 322\r\n4 3 689\r\n4 6 30\r\n2 1 949\r\n2 1 650\r\n2 4 217\r\n4 2 362\r\n",
                "1826\r\n"
            ],
            [
                "1 1\r\n0\r\n",
                "0\r\n"
            ]
        ]
    }
]