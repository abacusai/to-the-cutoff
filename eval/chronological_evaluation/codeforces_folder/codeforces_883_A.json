[
    {
        "name": "Automatic Door",
        "description": "There is an automatic door at the entrance of a factory. The door works in the\nfollowing way: when one or several people come to the door and it is closed,\nthe door immediately opens automatically and all people immediately come\ninside, when one or several people come to the door and it is open, all people\nimmediately come inside, opened door immediately closes in d seconds after its\nopening, if the door is closing and one or several people are coming to the\ndoor at the same moment, then all of them will have enough time to enter and\nonly after that the door will close. For example, if d = 3 and four people are\ncoming at four different moments of time t1 = 4, t2 = 7, t3 = 9 and t4 = 13\nthen the door will open three times: at moments 4, 9 and 13. It will close at\nmoments 7 and 12. It is known that n employees will enter at moments a, 2\u00b7a,\n3\u00b7a, ..., n\u00b7a (the value a is positive integer). Also m clients will enter at\nmoments t1, t2, ..., tm. Write program to find the number of times the\nautomatic door will open. Assume that the door is initially closed. Input The\nfirst line contains four integers n, m, a and d (1 \u2264 n, a \u2264 10^9, 1 \u2264 m \u2264\n10^5, 1 \u2264 d \u2264 10^18) \u2014 the number of the employees, the number of the clients,\nthe moment of time when the first employee will come and the period of time in\nwhich the door closes. The second line contains integer sequence t1, t2, ...,\ntm (1 \u2264 ti \u2264 10^18) \u2014 moments of time when clients will come. The values ti\nare given in non-decreasing order. Output Print the number of times the door\nwill open. Examples Input 1 1 3 4 7 Output 1 Input 4 3 4 2 7 9 11 Output 4\nNote In the first example the only employee will come at moment 3. At this\nmoment the door will open and will stay open until the moment 7. At the same\nmoment of time the client will come, so at first he will enter and only after\nit the door will close. Thus the door will open one time.\n\n",
        "cf_contest_id": 883,
        "cf_index": "A",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1 1 3 4\r\n7\r\n",
                "1"
            ],
            [
                "4 3 4 2\r\n7 9 11\r\n",
                "4"
            ]
        ],
        "private_cases": [
            [
                "10 10 51 69\r\n154 170 170 183 251 337 412 426 445 452\r\n",
                "6"
            ],
            [
                "70 10 26 17\r\n361 371 579 585 629 872 944 1017 1048 1541\r\n",
                "70"
            ],
            [
                "100 20 49 52\r\n224 380 690 1585 1830 1973 2490 2592 3240 3341 3406 3429 3549 3560 3895 3944 4344 4390 4649 4800\r\n",
                "55"
            ],
            [
                "100 30 36 47\r\n44 155 275 390 464 532 1186 1205 1345 1349 1432 1469 1482 1775 1832 1856 1869 2049 2079 2095 2374 2427 2577 2655 2792 2976 3020 3317 3482 3582\r\n",
                "51"
            ],
            [
                "97 60 1 1\r\n5 6 6 7 9 10 10 11 11 11 12 13 13 13 13 14 14 15 16 18 20 23 23 24 25 26 29 31 32 35 38 41 43 43 46 47 48 48 49 52 53 54 55 56 58 59 68 70 72 74 78 81 81 82 91 92 96 96 97 98\r\n",
                "49"
            ],
            [
                "1000000000 1 157 468\r\n57575875712\r\n",
                "333333334"
            ],
            [
                "1000000000 1 1000000000 1000000000000000000\r\n1000000000000000000\r\n",
                "1"
            ]
        ]
    }
]