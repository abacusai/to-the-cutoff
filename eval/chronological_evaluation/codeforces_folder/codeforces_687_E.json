[
    {
        "name": "TOF",
        "description": "Today Pari gave Arya a cool graph problem. Arya wrote a non-optimal solution\nfor it, because he believes in his ability to optimize non-optimal solutions.\nIn addition to being non-optimal, his code was buggy and he tried a lot to\noptimize it, so the code also became dirty! He keeps getting Time Limit\nExceeds and he is disappointed. Suddenly a bright idea came to his mind! Here\nis how his dirty code looks like: dfs(v)  set count[v] = count[v] + 1\nif(count[v] < 1000)  foreach u in neighbors[v]  if(visited[u] is equal to\nfalse)  dfs(u)  break   set visited[v] = true  main()  input the\ndigraph() TOF() foreach 1<=i<=n  set count[i] = 0 , visited[i] = false \nforeach 1 <= v <= n  if(visited[v] is equal to false)  dfs(v)   ... // And\ndo something cool and magical but we can't tell you what!  He asks you to\nwrite the TOF function in order to optimize the running time of the code with\nminimizing the number of calls of the dfs function. The input is a directed\ngraph and in the TOF function you have to rearrange the edges of the graph in\nthe list neighbors for each vertex. The number of calls of dfs function\ndepends on the arrangement of neighbors of each vertex. Input The first line\nof the input contains two integers n and m (1 \u2264 n, m \u2264 5000) \u2014 the number of\nvertices and then number of directed edges in the input graph. Each of the\nnext m lines contains a pair of integers ui and vi (1 \u2264 ui, vi \u2264 n), meaning\nthere is a directed edge in the input graph. You may assume that the graph\nwon't contain any self-loops and there is at most one edge between any\nunordered pair of vertices. Output Print a single integer \u2014 the minimum\npossible number of dfs calls that can be achieved with permuting the edges.\nExamples Input 3 3 1 2 2 3 3 1 Output 2998 Input 6 7 1 2 2 3 3 1 3 4 4 5 5 6 6\n4 Output 3001\n\n",
        "cf_contest_id": 687,
        "cf_index": "E",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graphs"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\n1 2\r\n2 3\r\n3 1\r\n",
                "2998\r\n"
            ],
            [
                "6 7\r\n1 2\r\n2 3\r\n3 1\r\n3 4\r\n4 5\r\n5 6\r\n6 4\r\n",
                "3001\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 1\r\n3 2\r\n",
                "3\r\n"
            ],
            [
                "4 2\r\n4 1\r\n2 3\r\n",
                "4\r\n"
            ],
            [
                "4 5\r\n4 3\r\n1 2\r\n1 3\r\n2 3\r\n4 2\r\n",
                "4\r\n"
            ],
            [
                "4 3\r\n4 3\r\n1 4\r\n1 2\r\n",
                "4\r\n"
            ],
            [
                "6 10\r\n4 5\r\n2 3\r\n5 1\r\n2 4\r\n1 3\r\n5 2\r\n4 1\r\n2 1\r\n4 3\r\n5 3\r\n",
                "6\r\n"
            ],
            [
                "6 6\r\n3 4\r\n3 1\r\n2 5\r\n4 6\r\n5 4\r\n1 6\r\n",
                "6\r\n"
            ],
            [
                "6 6\r\n6 2\r\n6 3\r\n5 3\r\n2 5\r\n1 4\r\n5 4\r\n",
                "6\r\n"
            ],
            [
                "10 23\r\n2 9\r\n7 5\r\n9 7\r\n7 2\r\n1 9\r\n2 10\r\n6 5\r\n6 7\r\n10 7\r\n1 6\r\n6 4\r\n10 1\r\n8 7\r\n8 4\r\n2 1\r\n9 4\r\n4 1\r\n10 6\r\n9 6\r\n9 8\r\n3 2\r\n8 3\r\n8 5\r\n",
                "10\r\n"
            ],
            [
                "10 30\r\n2 3\r\n2 1\r\n5 8\r\n3 6\r\n1 5\r\n1 9\r\n9 6\r\n8 3\r\n3 7\r\n10 5\r\n2 10\r\n6 5\r\n1 6\r\n8 10\r\n6 7\r\n4 5\r\n7 4\r\n9 4\r\n5 2\r\n3 4\r\n1 3\r\n7 8\r\n7 1\r\n8 2\r\n6 4\r\n9 8\r\n4 10\r\n7 9\r\n10 3\r\n3 5\r\n",
                "3005\r\n"
            ],
            [
                "10 19\r\n4 7\r\n5 1\r\n5 3\r\n1 4\r\n3 2\r\n8 6\r\n8 5\r\n10 5\r\n9 1\r\n8 4\r\n2 8\r\n6 7\r\n8 9\r\n1 10\r\n8 7\r\n10 6\r\n10 3\r\n5 9\r\n9 7\r\n",
                "10\r\n"
            ],
            [
                "7 16\r\n6 7\r\n2 1\r\n4 2\r\n3 5\r\n2 3\r\n6 4\r\n3 4\r\n7 5\r\n5 1\r\n2 6\r\n7 4\r\n3 7\r\n5 2\r\n4 1\r\n1 3\r\n5 6\r\n",
                "3002\r\n"
            ],
            [
                "7 9\r\n3 4\r\n2 5\r\n6 7\r\n4 1\r\n6 4\r\n5 1\r\n1 2\r\n2 3\r\n3 1\r\n",
                "3002\r\n"
            ],
            [
                "6 6\r\n1 2\r\n2 3\r\n3 1\r\n4 5\r\n5 6\r\n6 4\r\n",
                "5996\r\n"
            ],
            [
                "10 3\r\n2 10\r\n9 2\r\n5 10\r\n",
                "10\r\n"
            ],
            [
                "10 7\r\n10 3\r\n6 4\r\n3 9\r\n4 2\r\n9 8\r\n1 5\r\n5 6\r\n",
                "10\r\n"
            ],
            [
                "10 7\r\n10 9\r\n6 10\r\n2 7\r\n8 6\r\n9 1\r\n1 2\r\n7 8\r\n",
                "6997\r\n"
            ],
            [
                "10 9\r\n9 4\r\n3 7\r\n8 1\r\n2 9\r\n4 5\r\n10 3\r\n5 8\r\n1 10\r\n7 2\r\n",
                "8993\r\n"
            ]
        ]
    }
]