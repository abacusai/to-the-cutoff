[
    {
        "name": "Iahub and Xors",
        "description": "Iahub does not like background stories, so he'll tell you exactly what this\nproblem asks you for. You are given a matrix a with n rows and n columns.\nInitially, all values of the matrix are zeros. Both rows and columns are\n1-based, that is rows are numbered 1, 2, ..., n and columns are numbered 1, 2,\n..., n. Let's denote an element on the i-th row and j-th column as ai, j. We\nwill call a submatrix (x0, y0, x1, y1) such elements ai, j for which two\ninequalities hold: x0 \u2264 i \u2264 x1, y0 \u2264 j \u2264 y1. Write a program to perform two\nfollowing operations: Query(x0, y0, x1, y1): print the xor sum of the elements\nof the submatrix (x0, y0, x1, y1). Update(x0, y0, x1, y1, v): each element\nfrom submatrix (x0, y0, x1, y1) gets xor-ed by value v. Input The first line\ncontains two integers: n (1 \u2264 n \u2264 1000) and m (1 \u2264 m \u2264 10^5). The number m\nrepresents the number of operations you need to perform. Each of the next m\nlines contains five or six integers, depending on operation type. If the i-th\noperation from the input is a query, the first number from i-th line will be\n1. It will be followed by four integers x0, y0, x1, y1. If the i-th operation\nis an update, the first number from the i-th line will be 2. It will be\nfollowed by five integers x0, y0, x1, y1, v. It is guaranteed that for each\nupdate operation, the following inequality holds: 0 \u2264 v < 2^62. It is\nguaranteed that for each operation, the following inequalities hold: 1 \u2264 x0 \u2264\nx1 \u2264 n, 1 \u2264 y0 \u2264 y1 \u2264 n. Output For each query operation, output on a new line\nthe result. Examples Input 3 5 2 1 1 2 2 1 2 1 3 2 3 2 2 3 1 3 3 3 1 2 2 3 3 1\n2 2 3 2 Output 3 2 Note After the first 3 operations, the matrix will look\nlike this: 1 1 2 1 1 2 3 3 3 The fourth operation asks us to compute 1 xor 2\nxor 3 xor 3 = 3. The fifth operation asks us to compute 1 xor 3 = 2.\n\n",
        "cf_contest_id": 341,
        "cf_index": "D",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 5\r\n2 1 1 2 2 1\r\n2 1 3 2 3 2\r\n2 3 1 3 3 3\r\n1 2 2 3 3\r\n1 2 2 3 2\r\n",
                "3\r\n2\r\n"
            ]
        ],
        "private_cases": []
    }
]