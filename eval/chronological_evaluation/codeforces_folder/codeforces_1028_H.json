[
    {
        "name": "Make Square",
        "description": "We call an array \n    b_1, b_2, \n    \u2026, b_m\n good, if there exist two\nindices \n    i < j\n such that \n    b_i \n    \u00b7 b_j\n is a perfect square. Given\nan array \n    b_1, b_2, \n    \u2026, b_m\n, in one action you can perform one of\nthe following: multiply any element \n    b_i\n by any prime \n    p\n; divide any\nelement \n    b_i\n by prime \n    p\n, if \n    b_i\n is divisible by \n    p\n. Let\n\n    f(b_1, b_2, \n    \u2026, b_m)\n be the minimum number of actions needed to\nmake the array \n    b\n good. You are given an array of \n    n\n integers\n\n    a_1, a_2, \n    \u2026, a_n\n and \n    q\n queries of the form \n    l_i, r_i\n.\nFor each query output \n    f(a_l_i, a_l_i + 1, \n    \u2026, a_r_i)\n. Input\nThe first line contains two integers \n    n\n and \n    q\n (\n    2 \n    \u2264 n \n    \u2264\n    194\n     598\n, \n    1 \n    \u2264 q \n    \u2264 1\n     049\n     658\n) \u2014 the length of the\narray and the number of queries. The second line contains \n    n\n integers\n\n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 5\n     032\n     107\n) \u2014 the\nelements of the array. Each of the next \n    q\n lines contains two integers\n\n    l_i\n and \n    r_i\n (\n    1 \n    \u2264 l_i < r_i \n    \u2264 n\n) \u2014 the parameters of\na query. Output Output \n    q\n lines \u2014 the answers for each query in the order\nthey are given in the input. Example Input 10 10 34 37 28 16 44 36 43 50 22 13\n1 3 4 8 6 10 9 10 3 10 8 9 5 6 1 4 1 7 2 6 Output 2 0 1 3 0 1 1 1 0 0 Note In\nthe first query of the first sample you can multiply second number by 7 to get\n259 and multiply the third one by 37 to get 1036. Then \n    a_2 \n    \u00b7 a_3 =\n    268\n     324 = 518^2\n. In the second query subarray is already good because\n\n    a_4 \n    \u00b7 a_6 = 24^2\n. In the third query you can divide 50 by 2 to get\n25. Then \n    a_6 \n    \u00b7 a_8 = 30^2\n.\n\n",
        "cf_contest_id": 1028,
        "cf_index": "H",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "math"
        ],
        "time_limit_seconds": 7.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "10 10\r\n34 37 28 16 44 36 43 50 22 13\r\n1 3\r\n4 8\r\n6 10\r\n9 10\r\n3 10\r\n8 9\r\n5 6\r\n1 4\r\n1 7\r\n2 6\r\n",
                "2\r\n0\r\n1\r\n3\r\n0\r\n1\r\n1\r\n1\r\n0\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1\r\n1 1\r\n1 2\r\n",
                "0\r\n"
            ],
            [
                "10 10\r\n6 6 6 6 6 6 6 6 6 6\r\n2 8\r\n3 5\r\n2 8\r\n2 5\r\n3 4\r\n2 7\r\n2 9\r\n8 10\r\n3 4\r\n4 5\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "10 5\r\n5031049 1 5031049 1 5031049 1 5031049 1 5031049 1\r\n1 2\r\n3 4\r\n5 6\r\n7 8\r\n9 10\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "5 4\r\n5032107 5032107 5032107 5032107 5032107\r\n1 5\r\n2 3\r\n3 5\r\n1 3\r\n",
                "0\r\n0\r\n0\r\n0\r\n"
            ]
        ]
    }
]