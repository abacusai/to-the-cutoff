[
    {
        "name": "Tavas on the Path",
        "description": "Tavas lives in Tavaspolis. Tavaspolis has n cities numbered from 1 to n\nconnected by n - 1 bidirectional roads. There exists a path between any two\ncities. Also each road has a length. Tavas' favorite strings are binary\nstrings (they contain only 0 and 1). For any binary string like s = s1s2...\nsk, T(s) is its Goodness. T(s) can be calculated as follows: Consider there\nare exactly m blocks of 1s in this string (a block of 1s in s is a maximal\nconsecutive substring of s that only contains 1) with lengths x1, x2, ..., xm.\nDefine where f is a given sequence (if m = 0, then T(s) = 0). Tavas loves\nqueries. He asks you to answer q queries. In each query he gives you numbers\nv, u, l and you should print following number: Consider the roads on the path\nfrom city v to city u: e1, e2, ..., ex. Build the binary string b of length x\nsuch that: bi = 1 if and only if l \u2264 w(ei) where w(e) is the length of road e.\nYou should print T(b) for this query. Input The first line of input contains\nintegers n and q (2 \u2264 n \u2264 10^5 and 1 \u2264 q \u2264 10^5). The next line contains n - 1\nspace separated integers f1, f2, ..., fn - 1 (|fi| \u2264 1000). The next n - 1\nlines contain the details of the roads. Each line contains integers v, u and w\nand it means that there's a road between cities v and u of length w (1 \u2264 v, u\n\u2264 n and 1 \u2264 w \u2264 10^9). The next q lines contain the details of the queries.\nEach line contains integers v, u, l (1 \u2264 v, u \u2264 n, v \u2260 u and 1 \u2264 l \u2264 10^9).\nOutput Print the answer of each query in a single line. Examples Input 2 3 10\n1 2 3 1 2 2 1 2 3 1 2 4 Output 10 10 0 Input 6 6 -5 0 0 2 10 1 2 1 2 3 2 3 4 5\n4 5 1 5 6 5 1 6 1 1 6 2 1 6 5 3 6 5 4 6 4 1 4 2 Output 10 -5 -10 -10 -5 0\n\n",
        "cf_contest_id": 536,
        "cf_index": "E",
        "cf_rating": 3100,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "divide and conquer",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 3\r\n10\r\n1 2 3\r\n1 2 2\r\n1 2 3\r\n1 2 4\r\n",
                "10\r\n10\r\n0\r\n"
            ],
            [
                "6 6\r\n-5 0 0 2 10\r\n1 2 1\r\n2 3 2\r\n3 4 5\r\n4 5 1\r\n5 6 5\r\n1 6 1\r\n1 6 2\r\n1 6 5\r\n3 6 5\r\n4 6 4\r\n1 4 2\r\n",
                "10\r\n-5\r\n-10\r\n-10\r\n-5\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 5\r\n1\r\n1 2 2\r\n1 2 1\r\n2 1 1\r\n1 2 2\r\n1 2 3\r\n1 2 4\r\n",
                "1\r\n1\r\n1\r\n0\r\n0\r\n"
            ]
        ]
    }
]