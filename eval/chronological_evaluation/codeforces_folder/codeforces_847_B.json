[
    {
        "name": "Preparing for Merge Sort",
        "description": "Ivan has an array consisting of n different integers. He decided to reorder\nall elements in increasing order. Ivan loves merge sort so he decided to\nrepresent his array with one or several increasing sequences which he then\nplans to merge into one sorted array. Ivan represent his array with increasing\nsequences with help of the following algorithm. While there is at least one\nunused number in array Ivan repeats the following procedure: iterate through\narray from the left to the right; Ivan only looks at unused numbers on current\niteration; if current number is the first unused number on this iteration or\nthis number is greater than previous unused number on current iteration, then\nIvan marks the number as used and writes it down. For example, if Ivan's array\nlooks like [1, 3, 2, 5, 4] then he will perform two iterations. On first\niteration Ivan will use and write numbers [1, 3, 5], and on second one \u2014 [2,\n4]. Write a program which helps Ivan and finds representation of the given\narray with one or several increasing sequences in accordance with algorithm\ndescribed above. Input The first line contains a single integer n (1 \u2264 n \u2264\n2\u00b710^5) \u2014 the number of elements in Ivan's array. The second line contains a\nsequence consisting of distinct integers a1, a2, ..., an (1 \u2264 ai \u2264 10^9) \u2014\nIvan's array. Output Print representation of the given array in the form of\none or more increasing sequences in accordance with the algorithm described\nabove. Each sequence must be printed on a new line. Examples Input 5 1 3 2 5 4\nOutput 1 3 5 2 4 Input 4 4 3 2 1 Output 4 3 2 1 Input 4 10 30 50 101 Output 10\n30 50 101\n\n",
        "cf_contest_id": 847,
        "cf_index": "B",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 3 2 5 4\r\n",
                "1 3 5\r\n2 4\r\n"
            ],
            [
                "4\r\n4 3 2 1\r\n",
                "4\r\n3\r\n2\r\n1\r\n"
            ],
            [
                "4\r\n10 30 50 101\r\n",
                "10 30 50 101\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "1\r\n200000\r\n",
                "200000\r\n"
            ],
            [
                "2\r\n1 2\r\n",
                "1 2\r\n"
            ],
            [
                "2\r\n2 1\r\n",
                "2\r\n1\r\n"
            ],
            [
                "2\r\n1 200000\r\n",
                "1 200000\r\n"
            ],
            [
                "2\r\n200000 1\r\n",
                "200000\r\n1\r\n"
            ],
            [
                "10\r\n71550121 446173607 640274071 402690754 802030518 598196518 796619138 96204862 983359971 799843967\r\n",
                "71550121 446173607 640274071 802030518 983359971\r\n402690754 598196518 796619138 799843967\r\n96204862\r\n"
            ],
            [
                "3\r\n1 100 1000000000\r\n",
                "1 100 1000000000\r\n"
            ],
            [
                "3\r\n1000000000 100 1\r\n",
                "1000000000\r\n100\r\n1\r\n"
            ]
        ]
    }
]