[
    {
        "name": "Max Mex",
        "description": "Once Grisha found a tree (connected graph without cycles) with a root in node\n\n    1\n. But this tree was not just a tree. A permutation \n    p\n of integers\nfrom \n    0\n to \n    n - 1\n is written in nodes, a number \n    p_i\n is written\nin node \n    i\n. As Grisha likes to invent some strange and interesting\nproblems for himself, but not always can solve them, you need to help him deal\nwith two types of queries on this tree. Let's define a function \n    MEX(S)\n,\nwhere \n    S\n is a set of non-negative integers, as a smallest non-negative\ninteger that is not included in this set. Let \n    l\n be a simple path in this\ntree. So let's define indices of nodes which lie on \n    l\n as \n    u_1\n,\n\n    u_2\n, \n    \u2026\n, \n    u_k\n. Define \n    V(l)\n as a set\n\n    p_u_1\n, \n    p_u_2\n, \n    \u2026\n , \n    p_u_k\n. Then queries\nare: For two nodes \n    i\n and \n    j\n, swap \n    p_i\n and \n    p_j\n. Find the\nmaximum value of \n    MEX(V(l))\n in all possible \n    l\n. Input The first line\ncontains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014\nthe number of nodes of a tree. The second line contains \n    n\n integers \u2014\n\n    p_1\n, \n    p_2\n, \n    \u2026\n, \n    p_n\n (\n    0\n    \u2264 p_i < n\n) \u2014 the\npermutation \n    p\n, it's guaranteed that all numbers are different . The\nthird line contains \n    n - 1\n integers \u2014 \n    d_2\n, \n    d_3\n,\n\n    \u2026\n, \n    d_n\n (\n    1 \n    \u2264 d_i < i\n), where \n    d_i\n is a\ndirect ancestor of node \n    i\n in a tree. The fourth line contains a single\ninteger \n    q\n (\n    1 \n    \u2264 q \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of\nqueries. The following \n    q\n lines contain the description of queries: At\nthe beginning of each of next \n    q\n lines, there is a single integer \n    t\n\n(\n    1\n or \n    2\n) \u2014 the type of a query: If \n    t = 1\n, the line also\ncontains two integers \n    i\n and \n    j\n (\n    1 \n    \u2264 i, j \n    \u2264 n\n) \u2014 the\nindices of nodes, where values of the permutation should be swapped. If \n    t =\n    2\n, you need to find the maximum value of \n    MEX(V(l))\n in all possible\n\n    l\n. Output For each type 2 query print a single integer \u2014 the answer for\nthis query. Examples Input 6 2 5 0 3 1 4 1 1 3 3 3 3 2 1 6 3 2 Output 3 2\nInput 6 5 2 1 4 3 0 1 1 1 3 3 9 2 1 5 3 2 1 6 1 2 1 4 2 2 1 1 6 2 Output 3 2 4\n4 2 Note Number written in brackets is a permutation value of a node. In the\nfirst example, for the first query, optimal path is a path from node \n    1\n\nto node \n    5\n. For it, set of values is \n    0, 1, 2\n and\n\n    MEX\n is \n    3\n. For the third query, optimal path is a path from node\n\n    5\n to node \n    6\n. For it, set of values is \n    0, 1, 4\n and\n\n    MEX\n is \n    2\n. In the second example, for the first query, optimal path\nis a path from node \n    2\n to node \n    6\n. For it, set of values is\n\n    0, 1, 2, 5\n and \n    MEX\n is \n    3\n. For the third query,\noptimal path is a path from node \n    5\n to node \n    6\n. For it, set of\nvalues is \n    0, 1, 3\n and \n    MEX\n is \n    2\n. For the fifth\nquery, optimal path is a path from node \n    5\n to node \n    2\n. For it, set\nof values is \n    0, 1, 2, 3\n and \n    MEX\n is \n    4\n. For the\nseventh query, optimal path is a path from node \n    5\n to node \n    4\n. For\nit, set of values is \n    0, 1, 2, 3\n and \n    MEX\n is \n    4\n. For\nthe ninth query, optimal path is a path from node \n    6\n to node \n    5\n. For\nit, set of values is \n    0, 1, 3\n and \n    MEX\n is \n    2\n.\n\n",
        "cf_contest_id": 1083,
        "cf_index": "C",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n2 5 0 3 1 4\r\n1 1 3 3 3\r\n3\r\n2\r\n1 6 3\r\n2\r\n",
                "3\r\n2\r\n"
            ],
            [
                "6\r\n5 2 1 4 3 0\r\n1 1 1 3 3\r\n9\r\n2\r\n1 5 3\r\n2\r\n1 6 1\r\n2\r\n1 4 2\r\n2\r\n1 1 6\r\n2\r\n",
                "3\r\n2\r\n4\r\n4\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n0 1\r\n1\r\n1\r\n2\r\n",
                "2\r\n"
            ],
            [
                "10\r\n2 9 3 6 7 1 0 5 8 4\r\n1 2 3 4 5 6 7 3 5\r\n10\r\n1 5 10\r\n2\r\n1 9 3\r\n2\r\n1 6 1\r\n2\r\n1 4 9\r\n2\r\n1 1 2\r\n2\r\n",
                "7\r\n3\r\n3\r\n6\r\n6\r\n"
            ]
        ]
    }
]