[
    {
        "name": "Tasty Dishes",
        "description": "Note that the memory limit is unusual. There are \n    n\n chefs numbered \n    1,\n    2, \n    \u2026, n\n that must prepare dishes for a king. Chef \n    i\n has skill\n\n    i\n and initially has a dish of tastiness \n    a_i\n where \n    |a_i| \n    \u2264\n    i\n. Each chef has a list of other chefs that he is allowed to copy from. To\nstop chefs from learning bad habits, the king makes sure that chef \n    i\n can\nonly copy from chefs of larger skill. There are a sequence of days that pass\nduring which the chefs can work on their dish. During each day, there are two\nstages during which a chef can change the tastiness of their dish. At the\nbeginning of each day, each chef can choose to work (or not work) on their own\ndish, thereby multiplying the tastiness of their dish of their skill (\n    a_i\n    := i \n    \u00b7 a_i\n) (or doing nothing). After all chefs (who wanted) worked\non their own dishes, each start observing the other chefs. In particular, for\neach chef \n    j\n on chef \n    i\n's list, chef \n    i\n can choose to copy (or\nnot copy) \n    j\n's dish, thereby adding the tastiness of the \n    j\n's dish\nto \n    i\n's dish (\n    a_i := a_i + a_j\n) (or doing nothing). It can be\nassumed that all copying occurs simultaneously. Namely, if chef \n    i\n\nchooses to copy from chef \n    j\n he will copy the tastiness of chef \n    j\n's\ndish at the end of stage \n    1\n.All chefs work to maximize the tastiness of\ntheir own dish in order to please the king. Finally, you are given \n    q\n\nqueries. Each query is one of two types. \n    1\n \n    k\n \n    l\n \n    r\n \u2014\nfind the sum of tastiness \n    a_l, a_l+1, \n    \u2026, a_r\n after the\n\n    k\n-th day. Because this value can be large, find it modulo \n    10^9 +\n    7\n. \n    2\n \n    i\n \n    x\n \u2014 the king adds \n    x\n tastiness to the\n\n    i\n-th chef's dish before the \n    1\n-st day begins (\n    a_i := a_i +\n    x\n). Note that, because the king wants to see tastier dishes, he only adds\npositive tastiness (\n    x > 0\n). Note that queries of type \n    1\n are\nindependent of each all other queries. Specifically, each query of type\n\n    1\n is a scenario and does not change the initial tastiness \n    a_i\n of\nany dish for future queries. Note that queries of type \n    2\n are cumulative\nand only change the initial tastiness \n    a_i\n of a dish. See notes for an\nexample of queries. Input The first line contains a single integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 300\n) \u2014 the number of chefs. The second line contains\n\n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    -i \n    \u2264 a_i \n    \u2264 i\n).\nThe next \n    n\n lines each begin with a integer \n    c_i\n (\n    0 \n    \u2264 c_i <\n    n\n), denoting the number of chefs the \n    i\n-th chef can copy from. This\nnumber is followed by \n    c_i\n distinct integers \n    d\n (\n    i < d \n    \u2264\n    n\n), signifying that chef \n    i\n is allowed to copy from chef \n    d\n\nduring stage \n    2\n of each day. The next line contains a single integer\n\n    q\n (\n    1 \n    \u2264 q \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of queries. Each\nof the next \n    q\n lines contains a query of one of two types: \n    1\n\n\n    k\n \n    l\n \n    r\n (\n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 n\n; \n    1 \n    \u2264 k \n    \u2264\n    1000\n); \n    2\n \n    i\n \n    x\n (\n    1 \n    \u2264 i \n    \u2264 n\n; \n    1 \n    \u2264 x \n    \u2264\n    1000\n). It is guaranteed that there is at least one query of the first type.\nOutput For each query of the first type, print a single integer \u2014 the answer\nto the query. Example Input 5 1 0 -2 -2 4 4 2 3 4 5 1 3 1 4 1 5 0 7 1 1 1 5 2\n4 3 1 1 1 5 2 3 2 1 2 2 4 2 5 1 1 981 4 5 Output 57 71 316 278497818 Note\nBelow is the set of chefs that each chef is allowed to copy from: \n    1\n:\n\n    2, 3, 4, 5\n \n    2\n: \n    3\n \n    3\n:\n\n    4\n \n    4\n: \n    5\n \n    5\n: \n    \u2205\n (no\nother chefs)Following is a description of the sample. For the first query of\ntype \n    1\n, the initial tastiness values are \n    [1, 0, -2, -2, 4]\n. The\nfinal result of the first day is shown below: \n    [1, 0, -2, -2, 20]\n (chef\n\n    5\n works on his dish). \n    [21, 0, -2, 18, 20]\n (chef \n    1\n and chef\n\n    4\n copy from chef \n    5\n). So, the answer for the \n    1\n-st query is\n\n    21 + 0 - 2 + 18 + 20 = 57\n. For the \n    5\n-th query (\n    3\n-rd of type\n\n    1\n). The initial tastiness values are now \n    [1, 0, 0, 1, 4]\n. Day 1\n\n    [1, 0, 0, 4, 20]\n (chefs \n    4\n and \n    5\n work on their dishes).\n\n    [25,0, 4, 24, 20]\n (chef \n    1\n copies from chefs \n    4\n and \n    5\n,\nchef \n    3\n copies from chef \n    4\n, chef \n    4\n copies from chef \n    5\n).\nDay 2 \n    [25, 0, 12, 96, 100]\n (all chefs but chef \n    2\n work on their\ndish). \n    [233, 12, 108, 196, 100]\n (chef \n    1\n copies from chefs \n    3\n,\n\n    4\n and \n    5\n, chef \n    2\n from \n    3\n, chef \n    3\n from \n    4\n,\nchef \n    4\n from chef \n    5\n).So, the answer for the \n    5\n-th query is\n\n    12+108+196=316\n. It can be shown that, in each step we described, all\nchefs moved optimally.\n\n",
        "cf_contest_id": 1540,
        "cf_index": "E",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "math",
            "matrices"
        ],
        "time_limit_seconds": 10.0,
        "memory_limit_bytes": 64.0,
        "public_cases": [
            [
                "5\r\n1 0 -2 -2 4\r\n4 2 3 4 5\r\n1 3\r\n1 4\r\n1 5\r\n0\r\n7\r\n1 1 1 5\r\n2 4 3\r\n1 1 1 5\r\n2 3 2\r\n1 2 2 4\r\n2 5 1\r\n1 981 4 5\r\n",
                "57\r\n71\r\n316\r\n278497818\r\n"
            ]
        ],
        "private_cases": []
    }
]