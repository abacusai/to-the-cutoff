[
    {
        "name": "Ant on the Tree",
        "description": "Connected undirected graph without cycles is called a tree. Trees is a class\nof graphs which is interesting not only for people, but for ants too. An ant\nstands at the root of some tree. He sees that there are n vertexes in the\ntree, and they are connected by n - 1 edges so that there is a path between\nany pair of vertexes. A leaf is a distinct from root vertex, which is\nconnected with exactly one other vertex. The ant wants to visit every vertex\nin the tree and return to the root, passing every edge twice. In addition, he\nwants to visit the leaves in a specific order. You are to find some possible\nroute of the ant. Input The first line contains integer n (3 \u2264 n \u2264 300) \u2014\namount of vertexes in the tree. Next n - 1 lines describe edges. Each edge is\ndescribed with two integers \u2014 indexes of vertexes which it connects. Each edge\ncan be passed in any direction. Vertexes are numbered starting from 1. The\nroot of the tree has number 1. The last line contains k integers, where k is\namount of leaves in the tree. These numbers describe the order in which the\nleaves should be visited. It is guaranteed that each leaf appears in this\norder exactly once. Output If the required route doesn't exist, output -1.\nOtherwise, output 2n - 1 numbers, describing the route. Every time the ant\ncomes to a vertex, output it's index. Examples Input 3 1 2 2 3 3 Output 1 2 3\n2 1 Input 6 1 2 1 3 2 4 4 5 4 6 5 6 3 Output 1 2 4 5 4 6 4 2 1 3 1 Input 6 1 2\n1 3 2 4 4 5 4 6 5 3 6 Output -1\n\n",
        "cf_contest_id": 29,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 2\r\n2 3\r\n3\r\n",
                "1 2 3 2 1 "
            ],
            [
                "6\r\n1 2\r\n1 3\r\n2 4\r\n4 5\r\n4 6\r\n5 6 3\r\n",
                "1 2 4 5 4 6 4 2 1 3 1 "
            ],
            [
                "6\r\n1 2\r\n1 3\r\n2 4\r\n4 5\r\n4 6\r\n5 3 6\r\n",
                "-1"
            ]
        ],
        "private_cases": [
            [
                "10\r\n8 10\r\n2 1\r\n7 5\r\n5 4\r\n6 10\r\n2 3\r\n3 10\r\n2 9\r\n7 2\r\n6 9 4 8\r\n",
                "-1"
            ],
            [
                "8\r\n4 3\r\n6 7\r\n8 6\r\n6 1\r\n4 6\r\n6 5\r\n6 2\r\n3 2 7 8 5\r\n",
                "1 6 4 3 4 6 2 6 7 6 8 6 5 6 1 "
            ],
            [
                "8\r\n4 3\r\n1 4\r\n8 5\r\n7 6\r\n3 5\r\n7 3\r\n4 2\r\n2 6 8\r\n",
                "1 4 2 4 3 7 6 7 3 5 8 5 3 4 1 "
            ],
            [
                "20\r\n4 13\r\n17 7\r\n19 10\r\n18 1\r\n5 15\r\n2 6\r\n11 7\r\n3 6\r\n5 1\r\n20 16\r\n12 5\r\n10 17\r\n14 18\r\n8 13\r\n13 15\r\n19 1\r\n9 19\r\n6 13\r\n17 20\r\n14 12 4 2 3 9 8 11 16\r\n",
                "-1"
            ],
            [
                "37\r\n27 3\r\n27 35\r\n6 8\r\n12 21\r\n4 7\r\n32 27\r\n27 17\r\n24 14\r\n1 10\r\n3 23\r\n20 8\r\n12 4\r\n16 33\r\n2 34\r\n15 36\r\n5 31\r\n31 14\r\n5 9\r\n8 28\r\n29 12\r\n33 35\r\n24 10\r\n18 25\r\n33 18\r\n2 37\r\n17 5\r\n36 29\r\n12 26\r\n20 26\r\n22 11\r\n23 8\r\n15 30\r\n34 6\r\n13 7\r\n22 4\r\n23 19\r\n37 11 9 32 28 16 21 30 25 19 13\r\n",
                "-1"
            ],
            [
                "51\r\n28 3\r\n42 40\r\n40 51\r\n48 20\r\n13 28\r\n18 40\r\n44 40\r\n22 5\r\n22 27\r\n45 34\r\n40 9\r\n34 46\r\n40 34\r\n22 1\r\n22 11\r\n40 7\r\n28 40\r\n40 22\r\n14 40\r\n34 30\r\n40 20\r\n47 40\r\n12 34\r\n28 23\r\n40 24\r\n40 43\r\n41 40\r\n28 15\r\n49 32\r\n40 8\r\n32 10\r\n40 50\r\n40 36\r\n40 21\r\n16 33\r\n40 38\r\n34 2\r\n28 16\r\n34 4\r\n17 34\r\n19 40\r\n32 35\r\n40 29\r\n6 40\r\n40 39\r\n22 26\r\n37 40\r\n32 40\r\n31 20\r\n34 25\r\n35 15 7 9 12 31 36 50 19 17 29 46 5 42 8 13 10 24 44 25 41 2 38 23 43 30 18 3 26 47 37 11 39 33 49 14 4 45 6 51 48 21 27\r\n",
                "-1"
            ],
            [
                "3\r\n1 2\r\n1 3\r\n2 3\r\n",
                "1 2 1 3 1 "
            ],
            [
                "3\r\n1 2\r\n1 3\r\n3 2\r\n",
                "1 3 1 2 1 "
            ],
            [
                "4\r\n1 2\r\n1 3\r\n1 4\r\n4 3 2\r\n",
                "1 4 1 3 1 2 1 "
            ],
            [
                "5\r\n1 2\r\n4 3\r\n1 4\r\n4 5\r\n5 2 3\r\n",
                "-1"
            ]
        ]
    }
]