[
    {
        "name": "Imitating the Key Tree",
        "description": "Pak Chanek has a tree called the key tree. This tree consists of \n    N\n\nvertices and \n    N-1\n edges. The edges of the tree are numbered from \n    1\n\nto \n    N-1\n with edge \n    i\n connecting vertices \n    U_i\n and \n    V_i\n.\nInitially, each edge of the key tree does not have a weight. Formally, a path\nwith length \n    k\n in a graph is a sequence \n    [v_1, e_1, v_2, e_2, v_3, e_3,\n    \n    \u2026, v_k, e_k, v_k+1]\n such that: For each \n    i\n, \n    v_i\n is a\nvertex and \n    e_i\n is an edge. For each \n    i\n, \n    e_i\n connects vertices\n\n    v_i\n and \n    v_i+1\n. A circuit is a path that starts and ends on the\nsame vertex. A path in a graph is said to be simple if and only if the path\ndoes not use the same edge more than once. Note that a simple path can use the\nsame vertex more than once. The cost of a simple path in a weighted graph is\ndefined as the maximum weight of all edges it traverses. Count the number of\ndistinct undirected weighted graphs that satisfy the following conditions: The\ngraph has \n    N\n vertices and \n    2N-2\n edges. For each pair of different\nvertices \n    (x, y)\n, there exists a simple circuit that goes through\nvertices \n    x\n and \n    y\n in the graph. The weight of each edge in the\ngraph is an integer between \n    1\n and \n    2N-2\n inclusive. Each edge has\ndistinct weights. The graph is formed in a way such that there is a way to\nassign a weight \n    W_i\n to each edge \n    i\n in the key tree that satisfies\nthe following conditions: For each pair of edges \n    (i, j)\n, if \n    i<j\n,\nthen \n    W_i<W_j\n. For each pair of different vertex indices \n    (x, y)\n,\nthe cost of the only simple path from vertex \n    x\n to \n    y\n in the key\ntree is equal to the minimum cost of a simple circuit that goes through\nvertices \n    x\n and \n    y\n in the graph. Note that the graph is allowed to\nhave multi-edges, but is not allowed to have self-loops. Print the answer\nmodulo \n    998\n     244\n     353\n. Two graphs are considered distinct if and only\nif there exists a triple \n    (a, b, c)\n such that there exists an edge that\nconnects vertices \n    a\n and \n    b\n with weight \n    c\n in one graph, but\nnot in the other. Input The first line contains a single integer \n    N\n (\n    2\n    \n    \u2264 N \n    \u2264 10^5\n) \u2014 the number of vertices in the key tree. The\n\n    i\n-th of the next \n    N-1\n lines contains two integers \n    U_i\n and\n\n    V_i\n (\n    1 \n    \u2264 U_i, V_i \n    \u2264 N\n) \u2014 an edge connecting vertices\n\n    U_i\n and \n    V_i\n. The graph in the input is a tree. Output An integer\nrepresenting the number of distinct undirected weighted graphs that satisfy\nthe conditions of the problem modulo \n    998\n     244\n     353\n. Example Input 4\n3 2 1 3 4 3 Output 540 Note The following is an example of a graph that\nsatisfies. The following is an assignment of edge weights in the key tree that\ncorresponds to the graph above. As an example, consider a pair of vertex\nindices \n    (1, 4)\n. The circuit in the graph for this pair of vertices is\n\n    3 \n     2 \n     4 \n     2\n    \n     1 \n     3\n with a cost of \n    6\n. The path in\nthe key tree for this pair of vertices is \n    1 \n     3\n    \n     4\n with a cost of \n    6\n.\n\n",
        "cf_contest_id": 1725,
        "cf_index": "I",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "dsu",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3 2\r\n1 3\r\n4 3\r\n",
                "540\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 2\r\n",
                "1\r\n"
            ],
            [
                "4\r\n2 4\r\n3 1\r\n1 4\r\n",
                "240\r\n"
            ],
            [
                "4\r\n3 4\r\n1 3\r\n3 2\r\n",
                "540\r\n"
            ]
        ]
    }
]