[
    {
        "name": "Stack",
        "description": "In this problem we'll use a stack which supports two types of operations: Push\na given number on the stack. Pop two numbers from the stack, perform a given\noperation (addition or multiplication) on them and push the result on the\nstack. You are given a string which describes the sequence of operations to be\nperformed on the stack. i-th character corresponds to i-th operation: If i-th\ncharacter is a digit, push the corresponding number on the stack. If i-th\ncharacter is \u00ab+\u00bb or \u00ab*\u00bb, perform the corresponding operation. Initially the\nstack is empty. Output the topmost number on the stack after executing all\ngiven operations. Input The only line of input contains a string of\noperations, consisting of characters \u00ab+\u00bb, \u00ab*\u00bb and digits (0..9). The length of\nthe string will be between 1 and 20 characters, inclusive. The given sequence\nof operations is guaranteed to be correct, i.e. the stack will have at least\ntwo elements before every math operation. The numbers on the stack will never\nexceed 10^6. Output Output a single number \u2014 the topmost element of the stack\nafter performing all given operations. Examples Input 12+3*66*+ Output 45\nInput 149 Output 9 Note In the first case the stack will end up containing a\nsingle number \u2014 the result of calculating (1+2)*3+6*6. In the second case\nthere are no math operations, so the answer will be the last number pushed on\nthe stack.\n\n",
        "cf_contest_id": 188,
        "cf_index": "H",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "expression parsing",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "12+3*66*+\r\n",
                "45\r\n"
            ],
            [
                "149\r\n",
                "9\r\n"
            ]
        ],
        "private_cases": [
            [
                "0\r\n",
                "0\r\n"
            ],
            [
                "5555532+444********\r\n",
                "1000000\r\n"
            ],
            [
                "99999****\r\n",
                "59049\r\n"
            ],
            [
                "09876543211234509876\r\n",
                "6\r\n"
            ],
            [
                "12+3*4+5*6+7*9+0*1+\r\n",
                "1\r\n"
            ],
            [
                "342*15+23***+\r\n",
                "291\r\n"
            ],
            [
                "9191919191+*+*+*+*+\r\n",
                "46\r\n"
            ],
            [
                "9191919191*+*+*+*+*\r\n",
                "66429\r\n"
            ],
            [
                "12+3+4+5+6+65*4*3*2*\r\n",
                "720\r\n"
            ],
            [
                "34+5+8*97+34*50+29*3\r\n",
                "3\r\n"
            ],
            [
                "213**009++27*+46+**\r\n",
                "1380\r\n"
            ],
            [
                "535**6*2+492+++\r\n",
                "467\r\n"
            ],
            [
                "10+10++10+101++0+++\r\n",
                "5\r\n"
            ],
            [
                "49+\r\n",
                "13\r\n"
            ],
            [
                "88*\r\n",
                "64\r\n"
            ],
            [
                "18+23+*45+09+**\r\n",
                "3645\r\n"
            ],
            [
                "1357913579+*+*+*+*+\r\n",
                "1948\r\n"
            ],
            [
                "84962++++\r\n",
                "29\r\n"
            ],
            [
                "00000000*******\r\n",
                "0\r\n"
            ],
            [
                "2841++*75**26*+\r\n",
                "922\r\n"
            ],
            [
                "9485++739++++457+++\r\n",
                "61\r\n"
            ],
            [
                "248++2*48++2*48++2*\r\n",
                "184\r\n"
            ],
            [
                "55+55+*55+55+*55+**\r\n",
                "100000\r\n"
            ],
            [
                "692*2\r\n",
                "2\r\n"
            ],
            [
                "696**\r\n",
                "324\r\n"
            ],
            [
                "40+0+\r\n",
                "4\r\n"
            ],
            [
                "41*8+\r\n",
                "12\r\n"
            ],
            [
                "4613+\r\n",
                "4\r\n"
            ],
            [
                "06*2*1+1*7\r\n",
                "7\r\n"
            ],
            [
                "632+9*26+8\r\n",
                "8\r\n"
            ],
            [
                "44+21**2*8\r\n",
                "8\r\n"
            ],
            [
                "57+2+1*63*\r\n",
                "18\r\n"
            ],
            [
                "3470*7+*+7\r\n",
                "7\r\n"
            ],
            [
                "55*4+161*25**4+*6**6\r\n",
                "6\r\n"
            ],
            [
                "55*0*3*4*47++6*2*695\r\n",
                "5\r\n"
            ],
            [
                "37+6+3075+++19*5+*73\r\n",
                "3\r\n"
            ],
            [
                "34838672+*00248+1750\r\n",
                "0\r\n"
            ],
            [
                "8039883101+4533394**\r\n",
                "108\r\n"
            ],
            [
                "85*322+*+4*0+3745341\r\n",
                "1\r\n"
            ],
            [
                "85*37+14*9+0*1+*12+2\r\n",
                "2\r\n"
            ],
            [
                "67+9*24*+06*1+5**107\r\n",
                "7\r\n"
            ],
            [
                "641*9++5+43254***+*0\r\n",
                "0\r\n"
            ]
        ]
    }
]