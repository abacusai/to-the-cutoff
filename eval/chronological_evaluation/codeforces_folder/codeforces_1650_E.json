[
    {
        "name": "Rescheduling the Exam",
        "description": "Now Dmitry has a session, and he has to pass \n    n\n exams. The session starts\non day \n    1\n and lasts \n    d\n days. The \n    i\nth exam will take place on\nthe day of \n    a_i\n (\n    1 \n    \u2264 a_i \n    \u2264 d\n), all \n    a_i\n \u2014 are\ndifferent. Sample, where \n    n=3\n, \n    d=12\n, \n    a=[3,5,9]\n. Orange \u2014 exam\ndays. Before the first exam Dmitry will rest \n    2\n days, before the second\nhe will rest \n    1\n day and before the third he will rest \n    3\n days. For\nthe session schedule, Dmitry considers a special value \n    \u03bc\n \u2014 the\nsmallest of the rest times before the exam for all exams. For example, for the\nimage above, \n    \u03bc=1\n. In other words, for the schedule, he counts\nexactly \n    n\n numbers \u2014 how many days he rests between the exam \n    i-1\n\nand \n    i\n (for \n    i=0\n between the start of the session and the exam\n\n    i\n). Then it finds \n    \u03bc\n \u2014 the minimum among these \n    n\n numbers.\nDmitry believes that he can improve the schedule of the session. He may ask to\nchange the date of one exam (change one arbitrary value of \n    a_i\n). Help\nhim change the date so that all \n    a_i\n remain different, and the value of\n\n    \u03bc\n is as large as possible. For example, for the schedule above, it\nis most advantageous for Dmitry to move the second exam to the very end of the\nsession. The new schedule will take the form: Now the rest periods before\nexams are equal to \n    [2,2,5]\n. So, \n    \u03bc=2\n. Dmitry can leave the\nproposed schedule unchanged (if there is no way to move one exam so that it\nwill lead to an improvement in the situation). Input The first line of input\ndata contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of\ninput test cases. The descriptions of test cases follow. An empty line is\nwritten in the test before each case. The first line of each test case\ncontains two integers \n    n\n and \n    d\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5,\n    1 \n    \u2264 d \n    \u2264 10^9\n) \u2014 the number of exams and the length of the session,\nrespectively. The second line of each test case contains \n    n\n integers\n\n    a_i\n (\n    1 \n    \u2264 a_i \n    \u2264 d, a_i < a_i+1\n), where the \n    i\n-th\nnumber means the date of the \n    i\n-th exam. It is guaranteed that the sum of\n\n    n\n for all test cases does not exceed \n    2 \n    \u00b7 10^5\n. Output For\neach test case, output the maximum possible value of \n    \u03bc\n if Dmitry can\nmove any one exam to an arbitrary day. All values of \n    a_i\n should remain\ndistinct. Example Input 9 3 12 3 5 9 2 5 1 5 2 100 1 2 5 15 3 6 9 12 15 3\n1000000000 1 400000000 500000000 2 10 3 4 2 2 1 2 4 15 6 11 12 13 2 20 17 20\nOutput 2 1 1 2 99999999 3 0 1 9 Note The first sample is parsed in statement.\nOne of the optimal schedule changes for the second sample: Initial schedule.\nNew schedule. In the third sample, we need to move the exam from day \n    1\n\nto any day from \n    4\n to \n    100\n. In the fourth sample, any change in the\nschedule will only reduce \n    \u03bc\n, so the schedule should be left as it\nis. In the fifth sample, we need to move the exam from day \n    1\n to any day\nfrom \n    100000000\n to \n    300000000\n. One of the optimal schedule changes\nfor the sixth sample: Initial schedule. New schedule. In the seventh sample,\nevery day is exam day, and it is impossible to rearrange the schedule.\n\n",
        "cf_contest_id": 1650,
        "cf_index": "E",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "greedy",
            "implementation",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "9\r\n\r\n3 12\r\n3 5 9\r\n\r\n2 5\r\n1 5\r\n\r\n2 100\r\n1 2\r\n\r\n5 15\r\n3 6 9 12 15\r\n\r\n3 1000000000\r\n1 400000000 500000000\r\n\r\n2 10\r\n3 4\r\n\r\n2 2\r\n1 2\r\n\r\n4 15\r\n6 11 12 13\r\n\r\n2 20\r\n17 20\r\n",
                "2\r\n1\r\n1\r\n2\r\n99999999\r\n3\r\n0\r\n1\r\n9\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n\r\n2 1000000000\r\n500000000 1000000000\r\n",
                "499999999\r\n"
            ]
        ]
    }
]