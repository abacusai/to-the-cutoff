[
    {
        "name": "Antifibonacci Cut",
        "description": "Note that the memory limit is unusual. Let's define the sequence of Fibonacci\nstrings as follows: \n    f_0\n is 0, \n    f_1\n is 1, \n    f_i\n is \n    f_i-1 +\n    f_i-2\n for \n    i>1\n (\n    +\n denotes the concatenation of two strings).\nSo, for example, \n    f_2\n is 10, \n    f_3\n is 101, \n    f_4\n is 10110. For a\ngiven string \n    s\n, let's define \n    g(s)\n as the number of ways to cut it\ninto several (any number, possibly even just one) strings such that none of\nthese strings are Fibonacci strings. For example, if \n    s\n is 10110101,\n\n    g(s) = 3\n since there are three ways to cut it: 101101 \n    +\n 01; 1011\n\n    +\n 0101; 1011 \n    +\n 01 \n    +\n 01. You are given a sequence of strings\n\n    s_1, s_2, \n    \u2026, s_n\n. Calculate \n    g(s_1), g(s_1 + s_2), \n    \u2026,\n    g(s_1 + s_2 + \n    \u2026 + s_n)\n. Since these values can be huge, print them\nmodulo \n    998244353\n. Input The first line of the input contains one integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 3 \n    \u00b7 10^3\n). Then, \n    n\n lines follow.\nThe \n    i\n-th line contains the string \n    s_i\n (\n    1 \n    \u2264 |s_i| \n    \u2264\n    10^3\n), consisting of characters 0 and/or 1. Output Print \n    n\n integers,\nwhere the \n    i\n-th integer is \n    g(s_1 + s_2 + \n    \u2026 + s_i) \n    \n    998244353\n. Examples Input 1 10110101 Output 3 Input 3 1111 1 0 Output 2 3 3\nInput 6 10110101 100100001110 0000001100010001 1111 1001010100101010101001\n000100000010101111 Output 3 561 1466229 9887505 972227653 52128355\n\n",
        "cf_contest_id": 1743,
        "cf_index": "G",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "combinatorics",
            "constructive algorithms",
            "data structures",
            "dp",
            "hashing",
            "math"
        ],
        "time_limit_seconds": 12.0,
        "memory_limit_bytes": 4.0,
        "public_cases": [
            [
                "1\r\n10110101\r\n",
                "3\r\n"
            ],
            [
                "3\r\n1111\r\n1\r\n0\r\n",
                "2\r\n3\r\n3\r\n"
            ],
            [
                "6\r\n10110101\r\n100100001110\r\n0000001100010001\r\n1111\r\n1001010100101010101001\r\n000100000010101111\r\n",
                "3\r\n561\r\n1466229\r\n9887505\r\n972227653\r\n52128355\r\n"
            ]
        ],
        "private_cases": []
    }
]