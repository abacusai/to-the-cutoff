[
    {
        "name": "Script Generation",
        "description": "The Smart Beaver from ABBYY was offered a job of a screenwriter for the\nongoing TV series. In particular, he needs to automate the hard decision:\nwhich main characters will get married by the end of the series. There are n\nsingle men and n single women among the main characters. An opinion poll\nshowed that viewers like several couples, and a marriage of any of them will\nmake the audience happy. The Smart Beaver formalized this fact as k triples of\nnumbers (h, w, r), where h is the index of the man, w is the index of the\nwoman, and r is the measure of the audience's delight in case of the marriage\nof this couple. The same poll showed that the marriage of any other couple\nwill leave the audience indifferent, so the screenwriters decided not to\ninclude any such marriages in the plot. The script allows you to arrange\nseveral marriages between the heroes or not to arrange marriages at all. A\nsubset of some of the k marriages is considered acceptable if each man and\neach woman is involved in at most one marriage of the subset (the series won't\nallow any divorces). The value of the acceptable set of marriages is the total\ndelight the spectators will get from the marriages included in this set.\nObviously, there is a finite number of acceptable sets, and they all describe\nsome variants of the script. The screenwriters do not want to choose a set\nwith maximum value \u2014 it would make the plot too predictable. So the Smart\nBeaver offers the following option: sort all the acceptable sets in increasing\norder of value and choose the t-th set from the sorted list. Thus, t = 1\ncorresponds to a plot without marriages, t = 2 \u2014 to a single marriage\nresulting in minimal delight for the audience, and so on. Help the Beaver to\nimplement the algorithm for selecting the desired set. Input The first input\nline contains integers n, k and t (1 \u2264 k \u2264 min(100, n^2), 1 \u2264 t \u2264 2\u00b710^5),\nseparated by single spaces. Next k lines contain triples of integers (h, w, r)\n(1 \u2264 h, w \u2264 n; 1 \u2264 r \u2264 1000), separated by single spaces, which describe the\npossible marriages. It is guaranteed that the input data is correct: t doesn't\nexceed the total number of acceptable sets, and each pair (h, w) is present in\nat most one triple. The input limitations for getting 30 points are: 1 \u2264 n \u2264 5\nThe input limitations for getting 100 points are: 1 \u2264 n \u2264 20 Output Print a\nsingle number \u2014 the value of the t-th acceptable variant. Examples Input 2 4 3\n1 1 1 1 2 2 2 1 3 2 2 7 Output 2 Input 2 4 7 1 1 1 1 2 2 2 1 3 2 2 7 Output 8\nNote The figure shows 7 acceptable sets of marriages that exist in the first\nsample.\n\n",
        "cf_contest_id": 177,
        "cf_index": "F1",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 4 3\r\n1 1 1\r\n1 2 2\r\n2 1 3\r\n2 2 7\r\n",
                "2\r\n"
            ],
            [
                "2 4 7\r\n1 1 1\r\n1 2 2\r\n2 1 3\r\n2 2 7\r\n",
                "8\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 2 1\r\n1 2 8\r\n2 2 1\r\n",
                "0\r\n"
            ],
            [
                "5 25 140\r\n3 5 40\r\n3 3 42\r\n4 5 62\r\n2 4 7\r\n4 2 57\r\n1 5 69\r\n3 2 37\r\n2 5 43\r\n2 3 14\r\n1 3 67\r\n5 2 62\r\n3 1 13\r\n5 5 55\r\n1 2 71\r\n4 1 69\r\n1 4 32\r\n4 4 58\r\n5 3 2\r\n2 2 31\r\n5 1 20\r\n2 1 38\r\n1 1 69\r\n5 4 66\r\n3 4 27\r\n4 3 90\r\n",
                "80\r\n"
            ],
            [
                "3 7 8\r\n1 1 4\r\n2 2 14\r\n2 1 26\r\n3 2 12\r\n2 3 1\r\n1 3 6\r\n3 3 16\r\n",
                "14\r\n"
            ],
            [
                "3 9 21\r\n3 2 40\r\n1 3 39\r\n3 1 18\r\n1 2 34\r\n2 1 27\r\n1 1 12\r\n2 2 4\r\n3 3 7\r\n2 3 16\r\n",
                "50\r\n"
            ],
            [
                "3 9 34\r\n3 2 37\r\n3 1 16\r\n1 2 1\r\n1 3 2\r\n2 2 23\r\n2 3 34\r\n2 1 2\r\n3 3 1\r\n1 1 23\r\n",
                "94\r\n"
            ],
            [
                "4 11 61\r\n3 1 39\r\n4 1 14\r\n2 3 38\r\n2 2 24\r\n2 1 4\r\n3 4 18\r\n3 2 16\r\n4 3 40\r\n4 2 10\r\n2 4 24\r\n1 1 3\r\n",
                "69\r\n"
            ],
            [
                "4 14 110\r\n3 2 27\r\n4 1 49\r\n3 1 36\r\n1 3 39\r\n3 3 23\r\n1 2 8\r\n2 2 16\r\n4 4 7\r\n1 1 36\r\n2 3 5\r\n2 4 37\r\n2 1 29\r\n1 4 44\r\n3 4 14\r\n",
                "85\r\n"
            ],
            [
                "4 16 105\r\n2 4 15\r\n1 1 16\r\n2 2 57\r\n3 4 31\r\n1 2 47\r\n2 3 28\r\n1 3 70\r\n4 2 50\r\n3 1 10\r\n4 1 11\r\n4 4 27\r\n1 4 56\r\n3 3 28\r\n3 2 28\r\n2 1 33\r\n4 3 63\r\n",
                "94\r\n"
            ],
            [
                "5 15 90\r\n2 3 71\r\n5 1 72\r\n3 2 29\r\n2 5 35\r\n5 4 49\r\n2 1 5\r\n3 3 37\r\n5 2 3\r\n1 1 24\r\n1 3 50\r\n5 3 45\r\n2 2 31\r\n4 3 71\r\n3 1 30\r\n2 4 18\r\n",
                "95\r\n"
            ],
            [
                "5 20 110\r\n1 4 29\r\n2 3 87\r\n1 1 19\r\n5 1 56\r\n3 5 71\r\n4 5 60\r\n5 3 10\r\n1 3 35\r\n1 5 29\r\n1 2 28\r\n2 5 33\r\n5 2 21\r\n5 5 61\r\n3 1 26\r\n3 2 70\r\n2 4 10\r\n4 1 16\r\n3 3 78\r\n5 4 30\r\n3 4 83\r\n",
                "78\r\n"
            ]
        ]
    }
]