[
    {
        "name": "Cinema",
        "description": "Moscow is hosting a major international conference, which is attended by n\nscientists from different countries. Each of the scientists knows exactly one\nlanguage. For convenience, we enumerate all languages of the world with\nintegers from 1 to 10^9. In the evening after the conference, all n scientists\ndecided to go to the cinema. There are m movies in the cinema they came to.\nEach of the movies is characterized by two distinct numbers \u2014 the index of\naudio language and the index of subtitles language. The scientist, who came to\nthe movie, will be very pleased if he knows the audio language of the movie,\nwill be almost satisfied if he knows the language of subtitles and will be not\nsatisfied if he does not know neither one nor the other (note that the audio\nlanguage and the subtitles language for each movie are always different).\nScientists decided to go together to the same movie. You have to help them\nchoose the movie, such that the number of very pleased scientists is maximum\npossible. If there are several such movies, select among them one that will\nmaximize the number of almost satisfied scientists. Input The first line of\nthe input contains a positive integer n (1 \u2264 n \u2264 200 000) \u2014 the number of\nscientists. The second line contains n positive integers a1, a2, ..., an (1 \u2264\nai \u2264 10^9), where ai is the index of a language, which the i-th scientist\nknows. The third line contains a positive integer m (1 \u2264 m \u2264 200 000) \u2014 the\nnumber of movies in the cinema. The fourth line contains m positive integers\nb1, b2, ..., bm (1 \u2264 bj \u2264 10^9), where bj is the index of the audio language\nof the j-th movie. The fifth line contains m positive integers c1, c2, ..., cm\n(1 \u2264 cj \u2264 10^9), where cj is the index of subtitles language of the j-th\nmovie. It is guaranteed that audio languages and subtitles language are\ndifferent for each movie, that is bj \u2260 cj. Output Print the single integer \u2014\nthe index of a movie to which scientists should go. After viewing this movie\nthe number of very pleased scientists should be maximum possible. If in the\ncinema there are several such movies, you need to choose among them one, after\nviewing which there will be the maximum possible number of almost satisfied\nscientists. If there are several possible answers print any of them. Examples\nInput 3 2 3 2 2 3 2 2 3 Output 2 Input 6 6 3 1 1 3 7 5 1 2 3 4 5 2 3 4 5 1\nOutput 1 Note In the first sample, scientists must go to the movie with the\nindex 2, as in such case the 1-th and the 3-rd scientists will be very pleased\nand the 2-nd scientist will be almost satisfied. In the second test case\nscientists can go either to the movie with the index 1 or the index 3. After\nviewing any of these movies exactly two scientists will be very pleased and\nall the others will be not satisfied.\n\n",
        "cf_contest_id": 670,
        "cf_index": "C",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2 3 2\r\n2\r\n3 2\r\n2 3\r\n",
                "2\r\n"
            ],
            [
                "6\r\n6 3 1 1 3 7\r\n5\r\n1 2 3 4 5\r\n2 3 4 5 1\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n10\r\n1\r\n10\r\n3\r\n",
                "1\r\n"
            ],
            [
                "2\r\n1 6\r\n1\r\n6\r\n1\r\n",
                "1\r\n"
            ],
            [
                "1\r\n5\r\n2\r\n2 2\r\n5 5\r\n",
                "2\r\n"
            ],
            [
                "2\r\n4 4\r\n2\r\n4 7\r\n7 5\r\n",
                "1\r\n"
            ],
            [
                "10\r\n3 1 8 8 1 1 5 1 3 5\r\n2\r\n1 4\r\n3 1\r\n",
                "1\r\n"
            ],
            [
                "10\r\n7 6 1 2 7 3 9 7 7 9\r\n10\r\n2 9 6 5 9 3 10 3 1 6\r\n4 6 7 9 7 4 1 9 2 5\r\n",
                "5\r\n"
            ],
            [
                "20\r\n2 2 1 6 6 5 10 2 5 5 4 8 6 8 8 10 2 1 5 6\r\n20\r\n1 9 1 1 5 1 9 10 1 10 9 9 8 7 5 1 1 10 2 7\r\n3 5 9 10 10 8 2 9 6 7 8 8 6 5 3 4 6 3 7 4\r\n",
                "5\r\n"
            ],
            [
                "2\r\n10 8\r\n10\r\n8 3 10 8 8 8 3 8 8 8\r\n10 10 8 3 10 3 8 3 10 10\r\n",
                "10\r\n"
            ],
            [
                "5\r\n9 9 2 4 2\r\n5\r\n4 1 1 1 2\r\n2 4 4 9 7\r\n",
                "5\r\n"
            ],
            [
                "1\r\n320994883\r\n1\r\n332200603\r\n942930950\r\n",
                "1\r\n"
            ],
            [
                "3\r\n1000000000 1 1000000000\r\n2\r\n1000000000 1\r\n1 1000000000\r\n",
                "1\r\n"
            ],
            [
                "5\r\n1 2 3 3 4\r\n2\r\n1 2\r\n3 4\r\n",
                "1\r\n"
            ],
            [
                "3\r\n1 3 2\r\n2\r\n1 3\r\n2 4\r\n",
                "1\r\n"
            ],
            [
                "5\r\n2 2 3 3 4\r\n3\r\n5 2 2\r\n6 3 4\r\n",
                "2\r\n"
            ],
            [
                "2\r\n1 2\r\n2\r\n3 3\r\n4 1\r\n",
                "2\r\n"
            ],
            [
                "12\r\n3 2 1 1 4 4 5 1 6 6 7 7\r\n4\r\n3 2 4 7\r\n2 1 5 6\r\n",
                "4\r\n"
            ],
            [
                "14\r\n1 1 2 2 2 3 3 3 4 5 5 5 6 6\r\n3\r\n1 3 5\r\n2 6 4\r\n",
                "2\r\n"
            ]
        ]
    }
]