[
    {
        "name": "Game",
        "description": "Two players play the following game. Initially, the players have a knife and a\nrectangular sheet of paper, divided into equal square grid cells of unit size.\nThe players make moves in turn, the player who can't make a move loses. In one\nmove, a player can take the knife and cut the paper along any segment of the\ngrid line (not necessarily from border to border). The part of the paper, that\ntouches the knife at least once, is considered cut. There is one limit not to\nturn the game into an infinite cycle: each move has to cut the paper, that is\nthe knife has to touch the part of the paper that is not cut before.\nObviously, the game ends when the entire sheet is cut into 1 \u00d7 1 blocks.\nDuring the game, the pieces of the sheet are not allowed to move. It is also\nprohibited to cut along the border. The coordinates of the ends of each cut\nmust be integers. You are given an n \u00d7 m piece of paper, somebody has already\nmade k cuts there. Your task is to determine who will win if the players start\nto play on this sheet. You can consider that both players play optimally well.\nIf the first player wins, you also need to find the winning first move. Input\nThe first line contains three integers n, m, k (1 \u2264 n, m \u2264 10^9, 0 \u2264 k \u2264 10^5)\n\u2014 the sizes of the piece of paper and the number of cuts. Then follow k lines,\neach containing 4 integers xbi, ybi, xei, yei (0 \u2264 xbi, xei \u2264 n, 0 \u2264 ybi, yei\n\u2264 m) \u2014 the coordinates of the ends of the existing cuts. It is guaranteed that\neach cut has a non-zero length, is either vertical or horizontal and doesn't\ngo along the sheet border. The cuts may intersect, overlap and even be the\nsame. That is, it is not guaranteed that the cuts were obtained during any\ncorrect game. Output If the second player wins, print \"SECOND\". Otherwise, in\nthe first line print \"FIRST\", and in the second line print any winning move of\nthe first player (the coordinates of the cut ends, follow input format to\nprint them). Examples Input 2 1 0 Output FIRST 1 0 1 1 Input 2 2 4 0 1 2 1 0 1\n2 1 1 2 1 0 1 1 1 2 Output SECOND\n\n",
        "cf_contest_id": 277,
        "cf_index": "C",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "games",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 1 0\r\n",
                "FIRST\r\n1 0 1 1\r\n"
            ],
            [
                "2 2 4\r\n0 1 2 1\r\n0 1 2 1\r\n1 2 1 0\r\n1 1 1 2\r\n",
                "SECOND\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1 0\r\n",
                "SECOND\r\n"
            ],
            [
                "1 2 1\r\n0 1 1 1\r\n",
                "SECOND\r\n"
            ],
            [
                "2 2 0\r\n",
                "SECOND\r\n"
            ],
            [
                "2 2 1\r\n0 1 1 1\r\n",
                "FIRST\r\n1 0 1 1\r\n"
            ],
            [
                "3 4 2\r\n1 0 1 4\r\n2 0 2 4\r\n",
                "FIRST\r\n0 1 3 1\r\n"
            ],
            [
                "1000000000 1000000000 0\r\n",
                "SECOND\r\n"
            ],
            [
                "1000000000 999999999 0\r\n",
                "FIRST\r\n1 0 1 999999999\r\n"
            ],
            [
                "1000000000 999999999 1\r\n314159265 0 314159265 999999999\r\n",
                "SECOND\r\n"
            ],
            [
                "999999999 999999999 0\r\n",
                "SECOND\r\n"
            ],
            [
                "4 4 10\r\n3 0 3 1\r\n2 1 4 1\r\n1 1 2 1\r\n3 1 2 1\r\n3 1 2 1\r\n3 3 4 3\r\n2 3 2 0\r\n4 2 0 2\r\n3 2 2 2\r\n2 2 2 1\r\n",
                "FIRST\r\n1 0 1 4\r\n"
            ],
            [
                "4 3 10\r\n1 0 1 1\r\n0 1 1 1\r\n0 2 1 2\r\n1 3 1 2\r\n2 0 2 1\r\n2 3 2 2\r\n4 1 3 1\r\n3 0 3 1\r\n4 2 3 2\r\n3 3 3 2\r\n",
                "FIRST\r\n1 0 1 2\r\n"
            ],
            [
                "5 5 0\r\n",
                "SECOND\r\n"
            ],
            [
                "5 5 2\r\n4 3 4 0\r\n5 4 1 4\r\n",
                "FIRST\r\n4 0 4 4\r\n"
            ],
            [
                "5 5 3\r\n1 2 1 0\r\n0 2 3 2\r\n2 1 0 1\r\n",
                "FIRST\r\n2 0 2 3\r\n"
            ],
            [
                "5 5 10\r\n4 3 4 0\r\n3 5 3 4\r\n2 4 2 3\r\n3 3 3 0\r\n4 4 5 4\r\n1 2 0 2\r\n4 3 1 3\r\n1 1 1 3\r\n2 3 4 3\r\n4 1 1 1\r\n",
                "FIRST\r\n2 0 2 5\r\n"
            ],
            [
                "10 11 13\r\n0 4 1 4\r\n2 8 2 10\r\n10 4 5 4\r\n2 4 10 4\r\n9 6 8 6\r\n10 9 7 9\r\n3 2 3 1\r\n1 8 1 0\r\n2 10 2 5\r\n8 1 1 1\r\n10 3 3 3\r\n7 10 3 10\r\n2 1 2 4\r\n",
                "FIRST\r\n1 0 1 11\r\n"
            ],
            [
                "1 1000000000 0\r\n",
                "FIRST\r\n0 1 1 1\r\n"
            ],
            [
                "5 5 42\r\n4 2 1 2\r\n2 4 2 3\r\n3 4 5 4\r\n3 5 3 4\r\n3 4 3 1\r\n1 4 1 0\r\n3 3 3 4\r\n3 3 4 3\r\n1 4 1 5\r\n2 2 4 2\r\n1 2 1 5\r\n5 2 1 2\r\n4 2 3 2\r\n4 3 2 3\r\n5 4 3 4\r\n3 1 3 4\r\n2 1 2 3\r\n1 1 1 5\r\n1 0 1 4\r\n4 4 4 1\r\n4 1 1 1\r\n4 4 0 4\r\n1 3 1 0\r\n4 3 4 5\r\n2 3 2 5\r\n2 5 2 4\r\n1 3 1 0\r\n3 4 3 3\r\n3 1 4 1\r\n3 4 5 4\r\n2 2 2 0\r\n2 0 2 4\r\n0 1 5 1\r\n3 2 3 0\r\n5 2 4 2\r\n1 4 4 4\r\n2 2 2 0\r\n4 4 5 4\r\n2 2 2 3\r\n2 3 2 2\r\n4 1 0 1\r\n3 3 3 2\r\n",
                "FIRST\r\n0 3 5 3\r\n"
            ],
            [
                "5 5 17\r\n4 4 4 1\r\n3 2 1 2\r\n1 3 3 3\r\n4 4 4 3\r\n4 4 4 5\r\n5 4 4 4\r\n5 3 2 3\r\n1 5 1 4\r\n4 0 4 4\r\n2 3 2 4\r\n1 0 1 5\r\n3 2 3 0\r\n3 1 4 1\r\n1 4 4 4\r\n1 2 1 1\r\n3 1 3 5\r\n1 3 4 3\r\n",
                "FIRST\r\n0 2 5 2\r\n"
            ],
            [
                "5 5 44\r\n4 0 4 4\r\n4 4 4 1\r\n3 0 3 4\r\n1 5 1 4\r\n1 4 1 1\r\n1 5 1 4\r\n4 4 4 5\r\n2 0 2 2\r\n1 2 0 2\r\n1 1 1 0\r\n1 1 2 1\r\n2 1 2 0\r\n4 3 4 0\r\n4 4 4 3\r\n1 0 1 5\r\n1 4 3 4\r\n1 2 1 3\r\n4 2 1 2\r\n3 1 3 3\r\n0 1 3 1\r\n2 1 0 1\r\n0 3 1 3\r\n5 1 2 1\r\n4 4 4 5\r\n1 3 1 0\r\n4 3 0 3\r\n5 2 2 2\r\n2 2 0 2\r\n1 1 0 1\r\n3 4 2 4\r\n1 5 1 1\r\n4 3 4 1\r\n2 3 2 5\r\n1 3 1 5\r\n3 4 3 5\r\n1 2 4 2\r\n4 4 4 3\r\n3 3 2 3\r\n4 0 4 4\r\n3 5 3 4\r\n0 2 1 2\r\n3 0 3 1\r\n4 0 4 3\r\n3 4 1 4\r\n",
                "FIRST\r\n0 4 5 4\r\n"
            ],
            [
                "5 5 38\r\n4 5 4 4\r\n5 1 0 1\r\n0 2 2 2\r\n4 3 2 3\r\n5 3 1 3\r\n2 2 2 4\r\n1 2 0 2\r\n0 2 4 2\r\n3 3 3 2\r\n3 1 3 0\r\n4 3 3 3\r\n0 1 1 1\r\n2 4 2 5\r\n2 5 2 2\r\n1 3 1 0\r\n2 5 2 1\r\n5 2 1 2\r\n0 1 4 1\r\n2 4 3 4\r\n3 3 4 3\r\n2 3 2 0\r\n2 3 2 5\r\n1 3 3 3\r\n4 1 2 1\r\n4 3 4 2\r\n3 1 5 1\r\n4 4 4 2\r\n0 2 1 2\r\n2 2 2 5\r\n4 2 4 3\r\n3 3 2 3\r\n4 0 4 5\r\n4 2 0 2\r\n3 1 3 3\r\n2 5 2 0\r\n1 1 1 0\r\n1 3 2 3\r\n4 0 4 3\r\n",
                "FIRST\r\n0 4 4 4\r\n"
            ],
            [
                "5 5 20\r\n3 1 3 3\r\n1 2 2 2\r\n4 3 4 2\r\n3 2 2 2\r\n3 4 2 4\r\n4 1 4 5\r\n4 3 5 3\r\n5 1 0 1\r\n0 1 5 1\r\n3 5 3 1\r\n3 1 3 2\r\n1 5 1 0\r\n3 4 3 3\r\n3 3 3 4\r\n1 3 3 3\r\n2 5 2 1\r\n0 2 1 2\r\n2 1 0 1\r\n4 3 5 3\r\n1 4 1 5\r\n",
                "FIRST\r\n0 4 4 4\r\n"
            ],
            [
                "5 5 19\r\n4 0 4 1\r\n3 2 2 2\r\n0 3 3 3\r\n4 1 4 0\r\n5 4 2 4\r\n2 5 2 0\r\n5 3 2 3\r\n5 1 4 1\r\n4 0 4 5\r\n1 4 5 4\r\n3 0 3 1\r\n2 1 2 3\r\n1 1 1 3\r\n2 2 2 0\r\n4 5 4 1\r\n0 3 5 3\r\n5 3 1 3\r\n3 2 3 4\r\n5 1 1 1\r\n",
                "FIRST\r\n0 2 4 2\r\n"
            ],
            [
                "5 5 46\r\n3 5 3 1\r\n2 1 2 0\r\n1 2 1 0\r\n4 1 0 1\r\n4 3 4 1\r\n0 4 5 4\r\n3 0 3 4\r\n3 2 0 2\r\n4 5 4 3\r\n4 1 3 1\r\n1 4 1 1\r\n1 1 2 1\r\n3 2 1 2\r\n3 2 3 4\r\n2 0 2 2\r\n1 0 1 2\r\n1 1 4 1\r\n0 4 3 4\r\n3 0 3 3\r\n3 1 3 4\r\n5 1 3 1\r\n3 0 3 5\r\n4 1 1 1\r\n2 5 2 3\r\n4 2 4 1\r\n1 3 1 5\r\n1 2 1 4\r\n4 2 4 1\r\n3 2 3 0\r\n0 4 3 4\r\n1 3 2 3\r\n4 5 4 3\r\n1 2 1 1\r\n4 3 3 3\r\n2 0 2 1\r\n3 0 3 2\r\n3 1 3 0\r\n2 4 2 0\r\n2 5 2 3\r\n1 3 1 2\r\n0 2 5 2\r\n0 4 2 4\r\n3 4 3 2\r\n4 3 4 2\r\n4 2 3 2\r\n2 1 1 1\r\n",
                "FIRST\r\n0 3 3 3\r\n"
            ],
            [
                "4 1 0\r\n",
                "FIRST\r\n1 0 1 1\r\n"
            ]
        ]
    }
]