[
    {
        "name": "Harmony Analysis",
        "description": "The semester is already ending, so Danil made an effort and decided to visit a\nlesson on harmony analysis to know how does the professor look like, at least.\nDanil was very bored on this lesson until the teacher gave the group a simple\ntask: find 4 vectors in 4-dimensional space, such that every coordinate of\nevery vector is 1 or - 1 and any two vectors are orthogonal. Just as a\nreminder, two vectors in n-dimensional space are considered to be orthogonal\nif and only if their scalar product is equal to zero, that is: .Danil quickly\nmanaged to come up with the solution for this problem and the teacher noticed\nthat the problem can be solved in a more general case for 2^k vectors in\n2^k-dimensinoal space. When Danil came home, he quickly came up with the\nsolution for this problem. Can you cope with it? Input The only line of the\ninput contains a single integer k (0 \u2264 k \u2264 9). Output Print 2^k lines\nconsisting of 2^k characters each. The j-th character of the i-th line must be\nequal to ' * ' if the j-th coordinate of the i-th vector is equal to - 1, and\nmust be equal to ' + ' if it's equal to + 1. It's guaranteed that the answer\nalways exists. If there are many correct answers, print any. Examples Input 2\nOutput ++** +*+* ++++ +**+ Note Consider all scalar products in example:\nVectors 1 and 2: ( + 1)\u00b7( + 1) + ( + 1)\u00b7( - 1) + ( - 1)\u00b7( + 1) + ( - 1)\u00b7( - 1)\n= 0 Vectors 1 and 3: ( + 1)\u00b7( + 1) + ( + 1)\u00b7( + 1) + ( - 1)\u00b7( + 1) + ( - 1)\u00b7(\n+ 1) = 0 Vectors 1 and 4: ( + 1)\u00b7( + 1) + ( + 1)\u00b7( - 1) + ( - 1)\u00b7( - 1) + ( -\n1)\u00b7( + 1) = 0 Vectors 2 and 3: ( + 1)\u00b7( + 1) + ( - 1)\u00b7( + 1) + ( + 1)\u00b7( + 1) +\n( - 1)\u00b7( + 1) = 0 Vectors 2 and 4: ( + 1)\u00b7( + 1) + ( - 1)\u00b7( - 1) + ( + 1)\u00b7( -\n1) + ( - 1)\u00b7( + 1) = 0 Vectors 3 and 4: ( + 1)\u00b7( + 1) + ( + 1)\u00b7( - 1) + ( +\n1)\u00b7( - 1) + ( + 1)\u00b7( + 1) = 0\n\n",
        "cf_contest_id": 610,
        "cf_index": "C",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n",
                "+*+*\r\n++**\r\n*++*\r\n****\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n",
                "+*\r\n**\r\n"
            ],
            [
                "3\r\n",
                "+*+*+*+*\r\n++**++**\r\n*++**++*\r\n++++****\r\n*+*++*+*\r\n**++++**\r\n+**+*++*\r\n********\r\n"
            ],
            [
                "0\r\n",
                "*\r\n"
            ],
            [
                "4\r\n",
                "+*+*+*+*+*+*+*+*\r\n++**++**++**++**\r\n*++**++**++**++*\r\n++++****++++****\r\n*+*++*+**+*++*+*\r\n**++++****++++**\r\n+**+*++*+**+*++*\r\n++++++++********\r\n*+*+*+*++*+*+*+*\r\n**++**++++**++**\r\n+**++**+*++**++*\r\n****++++++++****\r\n+*+**+*+*+*++*+*\r\n++****++**++++**\r\n*++*+**++**+*++*\r\n****************\r\n"
            ]
        ]
    }
]