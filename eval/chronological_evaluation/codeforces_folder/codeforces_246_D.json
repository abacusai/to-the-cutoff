[
    {
        "name": "Colorful Graph",
        "description": "You've got an undirected graph, consisting of n vertices and m edges. We will\nconsider the graph's vertices numbered with integers from 1 to n. Each vertex\nof the graph has a color. The color of the i-th vertex is an integer ci. Let's\nconsider all vertices of the graph, that are painted some color k. Let's\ndenote a set of such as V(k). Let's denote the value of the neighbouring color\ndiversity for color k as the cardinality of the set Q(k) = cu : cu \u2260 k and\nthere is vertex v belonging to set V(k) such that nodes v and u are connected\nby an edge of the graph. Your task is to find such color k, which makes the\ncardinality of set Q(k) maximum. In other words, you want to find the color\nthat has the most diverse neighbours. Please note, that you want to find such\ncolor k, that the graph has at least one vertex with such color. Input The\nfirst line contains two space-separated integers n, m (1 \u2264 n, m \u2264 10^5) \u2014 the\nnumber of vertices end edges of the graph, correspondingly. The second line\ncontains a sequence of integers c1, c2, ..., cn (1 \u2264 ci \u2264 10^5) \u2014 the colors\nof the graph vertices. The numbers on the line are separated by spaces. Next m\nlines contain the description of the edges: the i-th line contains two space-\nseparated integers ai, bi (1 \u2264 ai, bi \u2264 n; ai \u2260 bi) \u2014 the numbers of the\nvertices, connected by the i-th edge. It is guaranteed that the given graph\nhas no self-loops or multiple edges. Output Print the number of the color\nwhich has the set of neighbours with the maximum cardinality. It there are\nmultiple optimal colors, print the color with the minimum number. Please note,\nthat you want to find such color, that the graph has at least one vertex with\nsuch color. Examples Input 6 6 1 1 2 3 5 8 1 2 3 2 1 4 4 3 4 5 4 6 Output 3\nInput 5 6 4 2 5 2 4 1 2 2 3 3 1 5 3 5 4 3 4 Output 2\n\n",
        "cf_contest_id": 246,
        "cf_index": "D",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dfs and similar",
            "graphs"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 6\r\n1 1 2 3 5 8\r\n1 2\r\n3 2\r\n1 4\r\n4 3\r\n4 5\r\n4 6\r\n",
                "3\r\n"
            ],
            [
                "5 6\r\n4 2 5 2 4\r\n1 2\r\n2 3\r\n3 1\r\n5 3\r\n5 4\r\n3 4\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 1\r\n13 13 4\r\n1 2\r\n",
                "4\r\n"
            ],
            [
                "2 1\r\n500 300\r\n1 2\r\n",
                "300\r\n"
            ],
            [
                "6 5\r\n2 2 2 1 2 2\r\n4 5\r\n4 2\r\n5 2\r\n4 1\r\n2 3\r\n",
                "1\r\n"
            ],
            [
                "8 8\r\n3 3 2 3 3 3 1 3\r\n8 2\r\n6 3\r\n2 3\r\n2 6\r\n5 6\r\n4 2\r\n7 5\r\n1 6\r\n",
                "3\r\n"
            ],
            [
                "10 27\r\n1 1 3 2 4 1 3 2 4 1\r\n9 3\r\n7 8\r\n9 7\r\n6 5\r\n7 6\r\n7 4\r\n6 9\r\n3 8\r\n6 10\r\n8 5\r\n3 1\r\n4 6\r\n8 1\r\n10 8\r\n9 5\r\n10 1\r\n5 10\r\n3 6\r\n4 3\r\n8 2\r\n10 7\r\n10 9\r\n10 3\r\n8 4\r\n3 2\r\n2 4\r\n6 1\r\n",
                "1\r\n"
            ],
            [
                "50 47\r\n21 17 47 15 50 47 47 41 28 18 27 47 29 28 32 26 16 26 8 22 27 10 45 21 17 30 31 38 14 8 9 40 29 35 41 24 22 14 40 46 44 34 40 31 48 40 8 50 1 28\r\n7 5\r\n50 2\r\n42 5\r\n36 28\r\n8 44\r\n36 3\r\n40 15\r\n33 18\r\n5 50\r\n1 6\r\n25 20\r\n39 24\r\n45 35\r\n14 27\r\n14 39\r\n17 47\r\n19 49\r\n28 7\r\n7 13\r\n34 3\r\n22 26\r\n5 6\r\n8 17\r\n32 18\r\n40 31\r\n4 40\r\n17 21\r\n37 18\r\n30 41\r\n2 47\r\n4 48\r\n36 32\r\n45 20\r\n39 28\r\n39 43\r\n7 33\r\n44 48\r\n21 47\r\n14 26\r\n15 47\r\n16 14\r\n23 18\r\n50 12\r\n28 8\r\n10 6\r\n12 46\r\n41 5\r\n",
                "47\r\n"
            ],
            [
                "5 4\r\n300 300 300 300 300\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n",
                "300\r\n"
            ],
            [
                "5 2\r\n4 4 10 3 3\r\n1 2\r\n4 5\r\n",
                "3\r\n"
            ],
            [
                "6 1\r\n10 1 1 2 3 4\r\n2 3\r\n",
                "1\r\n"
            ],
            [
                "10 9\r\n1 1 1 1 1 1 1 1 1 1\r\n5 8\r\n8 6\r\n1 8\r\n8 4\r\n3 7\r\n1 10\r\n1 9\r\n2 5\r\n6 9\r\n",
                "1\r\n"
            ],
            [
                "10 15\r\n1 1 1 1 2 2 2 2 1 2\r\n8 5\r\n9 1\r\n8 6\r\n3 5\r\n2 7\r\n2 9\r\n10 3\r\n3 2\r\n3 6\r\n4 2\r\n5 9\r\n7 3\r\n6 7\r\n5 10\r\n4 7\r\n",
                "1\r\n"
            ],
            [
                "7 6\r\n1 2 3 4 3 3 3\r\n5 1\r\n6 1\r\n7 1\r\n1 2\r\n2 3\r\n2 4\r\n",
                "2\r\n"
            ],
            [
                "2 1\r\n100000 100000\r\n1 2\r\n",
                "100000\r\n"
            ]
        ]
    }
]