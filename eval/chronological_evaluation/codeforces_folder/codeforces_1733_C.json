[
    {
        "name": "Parity Shuffle Sorting",
        "description": "You are given an array \n    a\n with \n    n\n non-negative integers. You can\napply the following operation on it. Choose two indices \n    l\n and \n    r\n\n(\n    1 \n    \u2264 l < r \n    \u2264 n\n). If \n    a_l + a_r\n is odd, do \n    a_r := a_l\n.\nIf \n    a_l + a_r\n is even, do \n    a_l := a_r\n. Find any sequence of at most\n\n    n\n operations that makes \n    a\n non-decreasing. It can be proven that it\nis always possible. Note that you do not have to minimize the number of\noperations. An array \n    a_1, a_2, \n    \u2026, a_n\n is non-decreasing if and\nonly if \n    a_1 \n    \u2264 a_2 \n    \u2264\n    \u2026\n    \u2264 a_n\n. Input The first line\ncontains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^5\n) \u2014 the number of test\ncases. Each test case consists of two lines. The first line of each test case\ncontains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the length of the\narray. The second line of each test case contains \n    n\n integers \n    a_1,\n    a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the array itself. It is\nguaranteed that the sum of \n    n\n over all test cases doesn't exceed\n\n    10^5\n. Output For each test case, print one integer \n    m\n (\n    0 \n    \u2264 m\n    \n    \u2264 n\n), the number of operations, in the first line. Then print \n    m\n\nlines. Each line must contain two integers \n    l_i, r_i\n, which are the\nindices you chose in the \n    i\n-th operation (\n    1 \n    \u2264 l_i < r_i \n    \u2264\n    n\n). If there are multiple solutions, print any of them. Example Input 3 2 7\n8 5 1 1000000000 3 0 5 1 0 Output 0 2 3 4 1 2 0 Note In the second test case,\n\n    a\n changes like this: Select indices \n    3\n and \n    4\n. \n    a_3 + a_4 =\n    3\n is odd, so do \n    a_4 := a_3\n. \n    a = [1, 1000000000, 3, 3, 5]\n now.\nSelect indices \n    1\n and \n    2\n. \n    a_1 + a_2 = 1000000001\n is odd, so do\n\n    a_2 := a_1\n. \n    a = [1, 1, 3, 3, 5]\n now, and it is non-decreasing. In\nthe first and third test cases, \n    a\n is already non-decreasing.\n\n",
        "cf_contest_id": 1733,
        "cf_index": "C",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2\r\n7 8\r\n5\r\n1 1000000000 3 0 5\r\n1\r\n0\r\n",
                "1\r\n1 2\r\n4\r\n1 5\r\n1 2\r\n3 5\r\n1 4\r\n0\r\n"
            ]
        ],
        "private_cases": []
    }
]