[
    {
        "name": "Village (Minimum)",
        "description": "This problem is split into two tasks. In this task, you are required to find\nthe minimum possible answer. In the task Village (Maximum) you are required to\nfind the maximum possible answer. Each task is worth \n    50\n points. There\nare \n    N\n houses in a certain village. A single villager lives in each of\nthe houses. The houses are connected by roads. Each road connects two houses\nand is exactly \n    1\n kilometer long. From each house it is possible to reach\nany other using one or several consecutive roads. In total there are \n    N-1\n\nroads in the village. One day all villagers decided to move to different\nhouses \u2014 that is, after moving each house should again have a single villager\nliving in it, but no villager should be living in the same house as before. We\nwould like to know the smallest possible total length in kilometers of the\nshortest paths between the old and the new houses for all villagers. Example\nvillage with seven houses For example, if there are seven houses connected by\nroads as shown on the figure, the smallest total length is \n    8\n km (this\ncan be achieved by moving \n    1 \n    \u2192 6\n, \n    2 \n    \u2192 4\n, \n    3 \n    \u2192 1\n,\n\n    4 \n    \u2192 2\n, \n    5 \n    \u2192 7\n, \n    6 \n    \u2192 3\n, \n    7 \n    \u2192 5\n). Write a\nprogram that finds the smallest total length of the shortest paths in\nkilometers and an example assignment of the new houses to the villagers. Input\nThe first line contains an integer \n    N\n (\n    1 < N \n    \u2264 10^5\n). Houses\nare numbered by consecutive integers \n    1, 2, \n    \u2026, N\n. Then \n    N-1\n\nlines follow that describe the roads. Each line contains two integers \n    a\n\nand \n    b\n (\n    1 \n    \u2264 a, b \n    \u2264 N\n, \n    a \n    \u2260 b\n) denoting that there\nis a road connecting houses \n    a\n and \n    b\n. Output In the first line\noutput the smallest total length of the shortest paths in kilometers. In the\nsecond line describe one valid assignment of the new houses with the smallest\ntotal length: \n    N\n space-separated distinct integers \n    v_1, v_2, \n    \u2026,\n    v_N\n. For each \n    i\n, \n    v_i\n is the house number where the villager\nfrom the house \n    i\n should move (\n    v_i \n    \u2260 i\n). If there are several\nvalid assignments, output any of those. Scoring Subtasks: (6 points) \n    N\n    \n    \u2264 10\n (19 points) \n    N \n    \u2264 1\n     000\n (25 points) No further\nconstraints Examples Input 4 1 2 2 3 3 4 Output 4 2 1 4 3 Input 7 4 2 5 7 3 4\n6 3 1 3 4 5 Output 8 3 4 6 2 7 1 5\n\n",
        "cf_contest_id": 1387,
        "cf_index": "B1",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "dp",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 0.75,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 2\r\n2 3\r\n3 4\r\n",
                "4\r\n2 1 4 3 "
            ],
            [
                "7\r\n4 2\r\n5 7\r\n3 4\r\n6 3\r\n1 3\r\n4 5\r\n",
                "8\r\n6 4 1 2 7 3 5 "
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 2\r\n",
                "2\r\n2 1 "
            ],
            [
                "7\r\n4 1\r\n7 6\r\n7 5\r\n1 3\r\n3 2\r\n1 6\r\n",
                "8\r\n6 3 2 1 7 4 5 "
            ],
            [
                "7\r\n2 7\r\n5 2\r\n6 1\r\n1 4\r\n4 5\r\n7 3\r\n",
                "8\r\n4 5 7 6 2 1 3 "
            ],
            [
                "7\r\n5 3\r\n3 6\r\n3 1\r\n1 7\r\n1 4\r\n5 2\r\n",
                "8\r\n4 5 6 7 2 3 1 "
            ],
            [
                "7\r\n7 3\r\n4 7\r\n1 7\r\n7 2\r\n5 7\r\n7 6\r\n",
                "12\r\n6 4 7 3 2 5 1 "
            ],
            [
                "8\r\n4 8\r\n5 2\r\n6 2\r\n3 8\r\n4 7\r\n2 8\r\n2 1\r\n",
                "10\r\n6 1 8 7 2 5 4 3 "
            ],
            [
                "9\r\n8 1\r\n3 5\r\n8 3\r\n6 8\r\n7 8\r\n3 9\r\n8 4\r\n2 3\r\n",
                "14\r\n4 9 2 7 3 8 6 1 5 "
            ],
            [
                "10\r\n9 8\r\n1 3\r\n7 5\r\n8 6\r\n8 10\r\n6 4\r\n1 6\r\n10 2\r\n6 5\r\n",
                "10\r\n3 10 1 6 7 4 5 9 8 2 "
            ],
            [
                "10\r\n9 2\r\n10 4\r\n10 5\r\n2 5\r\n8 3\r\n3 6\r\n7 4\r\n9 8\r\n1 6\r\n",
                "10\r\n6 9 8 7 10 1 4 3 2 5 "
            ],
            [
                "10\r\n5 7\r\n4 1\r\n10 5\r\n9 3\r\n7 9\r\n8 2\r\n6 1\r\n8 6\r\n2 7\r\n",
                "10\r\n4 7 9 1 10 8 2 6 3 5 "
            ],
            [
                "10\r\n6 10\r\n2 7\r\n10 1\r\n10 8\r\n4 2\r\n1 5\r\n1 9\r\n2 3\r\n10 2\r\n",
                "14\r\n9 3 4 7 1 10 2 6 5 8 "
            ],
            [
                "10\r\n5 6\r\n3 5\r\n8 5\r\n5 7\r\n5 1\r\n2 5\r\n9 5\r\n5 4\r\n5 10\r\n",
                "18\r\n10 7 6 9 1 5 8 3 2 4 "
            ],
            [
                "10\r\n4 1\r\n5 4\r\n5 10\r\n6 1\r\n8 5\r\n9 4\r\n3 1\r\n7 4\r\n1 2\r\n",
                "14\r\n2 3 6 7 8 1 9 10 4 5 "
            ],
            [
                "10\r\n10 2\r\n4 10\r\n1 10\r\n5 10\r\n10 7\r\n9 10\r\n3 10\r\n1 6\r\n8 1\r\n",
                "16\r\n8 10 9 2 4 1 5 6 7 3 "
            ],
            [
                "10\r\n5 9\r\n8 1\r\n6 2\r\n4 3\r\n6 7\r\n1 5\r\n3 10\r\n6 8\r\n3 1\r\n",
                "12\r\n8 6 10 3 9 7 2 1 5 4 "
            ]
        ]
    }
]