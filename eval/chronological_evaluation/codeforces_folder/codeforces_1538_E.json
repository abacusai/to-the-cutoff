[
    {
        "name": "Funny Substrings",
        "description": "Polycarp came up with a new programming language. There are only two types of\nstatements in it: \"x := s\": assign the variable named x the value s (where s\nis a string). For example, the statement var := hello assigns the variable\nnamed var the value hello. Note that s is the value of a string, not the name\nof a variable. Between the variable name, the := operator and the string\ncontains exactly one space each. \"x = a + b\": assign the variable named x the\nconcatenation of values of two variables a and b. For example, if the program\nconsists of three statements a := hello, b := world, c = a + b, then the\nvariable c will contain the string helloworld. It is guaranteed that the\nprogram is correct and the variables a and b were previously defined. There is\nexactly one space between the variable names and the = and + operators. All\nvariable names and strings only consist of lowercase letters of the English\nalphabet and do not exceed \n    5\n characters. The result of the program is\nthe number of occurrences of string haha in the string that was written to the\nvariable in the last statement. Polycarp was very tired while inventing that\nlanguage. He asks you to implement it. Your task is \u2014 for given program\nstatements calculate the number of occurrences of string haha in the last\nassigned variable. Input The first line contains an integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 10^3\n). Then \n    t\n test cases follow. The first line of each\ntest case contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 50\n) \u2014 the\nnumber of statements in the program. All variable names and strings are\nguaranteed to consist only of lowercase letters of the English alphabet and do\nnot exceed \n    5\n characters. This is followed by \n    n\n lines describing\nthe statements in the format described above. It is guaranteed that the\nprogram is correct. Output For each set of input data, output the number of\noccurrences of the haha substring in the string that was written to the\nvariable in the last statement. Example Input 4 6 a := h b := aha c = a + b c\n= c + c e = c + c d = a + c 15 x := haha x = x + x x = x + x x = x + x x = x +\nx x = x + x x = x + x x = x + x x = x + x x = x + x x = x + x x = x + x x = x\n+ x x = x + x x = x + x 1 haha := hah 5 haahh := aaaha ahhhh = haahh + haahh\nhaahh = haahh + haahh ahhhh = ahhhh + haahh ahhaa = haahh + ahhhh Output 3\n32767 0 0 Note In the first test case the resulting value of d is hhahahaha.\n\n",
        "cf_contest_id": 1538,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "hashing",
            "implementation",
            "matrices",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n6\r\na := h\r\nb := aha\r\nc = a + b\r\nc = c + c\r\ne = c + c\r\nd = a + c\r\n15\r\nx := haha\r\nx = x + x\r\nx = x + x\r\nx = x + x\r\nx = x + x\r\nx = x + x\r\nx = x + x\r\nx = x + x\r\nx = x + x\r\nx = x + x\r\nx = x + x\r\nx = x + x\r\nx = x + x\r\nx = x + x\r\nx = x + x\r\n1\r\nhaha := hah\r\n5\r\nhaahh := aaaha\r\nahhhh = haahh + haahh\r\nhaahh = haahh + haahh\r\nahhhh = ahhhh + haahh\r\nahhaa = haahh + ahhhh\r\n",
                "3\r\n32767\r\n0\r\n0\r\n"
            ]
        ],
        "private_cases": []
    }
]