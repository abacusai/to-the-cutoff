[
    {
        "name": "Cancel the Trains",
        "description": "Gildong's town has a train system that has \n    100\n trains that travel from\nthe bottom end to the top end and \n    100\n trains that travel from the left\nend to the right end. The trains starting from each side are numbered from\n\n    1\n to \n    100\n, respectively, and all trains have the same speed. Let's\ntake a look at the picture below. The train system can be represented as\ncoordinates on a 2D plane. The \n    i\n-th train starting at the bottom end is\ninitially at \n    (i,0)\n and will be at \n    (i,T)\n after \n    T\n minutes, and\nthe \n    i\n-th train starting at the left end is initially at \n    (0,i)\n and\nwill be at \n    (T,i)\n after \n    T\n minutes. All trains arrive at their\ndestinations after \n    101\n minutes. However, Gildong found that some trains\nscheduled to depart at a specific time, simultaneously, are very dangerous. At\nthis time, \n    n\n trains are scheduled to depart from the bottom end and\n\n    m\n trains are scheduled to depart from the left end. If two trains are\nboth at \n    (x,y)\n at the same time for some \n    x\n and \n    y\n, they will\ncrash into each other. Therefore, he is asking you to find the minimum number\nof trains that should be cancelled to prevent all such crashes. Input Each\ntest contains one or more test cases. The first line contains the number of\ntest cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n). Each test case contains three\nlines. The first line of each test case consists of two integers \n    n\n and\n\n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 100\n) \u2014 the number of trains scheduled to\ndepart from the bottom end, and the number of trains scheduled to depart from\nthe left end, respectively. The second line of each test case contains \n    n\n\nintegers. Each integer is a train number that is scheduled to start from the\nbottom end. The numbers are given in strictly increasing order, and are\nbetween \n    1\n and \n    100\n, inclusive. The third line of each test case\ncontains \n    m\n integers. Each integer is a train number that is scheduled to\nstart from the left end. The numbers are given in strictly increasing order,\nand are between \n    1\n and \n    100\n, inclusive. Output For each test case,\nprint a single integer: the minimum number of trains that should be canceled\nin order to prevent all crashes. Example Input 3 1 2 1 3 4 3 2 1 3 4 2 4 9 14\n2 7 16 28 33 57 59 86 99 3 9 14 19 25 26 28 35 41 59 85 87 99 100 Output 0 1 3\nNote In the first case, we can show that there will be no crashes if the\ncurrent schedule is followed. Therefore, the answer is zero. In the second\ncase, at \n    T=4\n, there will be a crash, as can be seen in the picture\nbelow. We can prove that after canceling one of these trains, the remaining\ntrains will not crash. Therefore, the answer is one.\n\n",
        "cf_contest_id": 1453,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n1 2\r\n1\r\n3 4\r\n3 2\r\n1 3 4\r\n2 4\r\n9 14\r\n2 7 16 28 33 57 59 86 99\r\n3 9 14 19 25 26 28 35 41 59 85 87 99 100\r\n",
                "0\r\n1\r\n3\r\n"
            ]
        ],
        "private_cases": []
    }
]