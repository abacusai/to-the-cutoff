[
    {
        "name": "Fake Plastic Trees",
        "description": "We are given a rooted tree consisting of \n    n\n vertices numbered from\n\n    1\n to \n    n\n. The root of the tree is the vertex \n    1\n and the parent\nof the vertex \n    v\n is \n    p_v\n. There is a number written on each vertex,\ninitially all numbers are equal to \n    0\n. Let's denote the number written on\nthe vertex \n    v\n as \n    a_v\n. For each \n    v\n, we want \n    a_v\n to be\nbetween \n    l_v\n and \n    r_v\n \n    (l_v \n    \u2264 a_v \n    \u2264 r_v)\n. In a single\noperation we do the following: Choose some vertex \n    v\n. Let \n    b_1, b_2,\n    \n    \u2026, b_k\n be vertices on the path from the vertex \n    1\n to vertex\n\n    v\n (meaning \n    b_1 = 1\n, \n    b_k = v\n and \n    b_i = p_b_i + 1\n).\nChoose a non-decreasing array \n    c\n of length \n    k\n of nonnegative\nintegers: \n    0 \n    \u2264 c_1 \n    \u2264 c_2 \n    \u2264\n    \u2026\n    \u2264 c_k\n. For each\n\n    i\n \n    (1 \n    \u2264 i \n    \u2264 k)\n, increase \n    a_b_i\n by \n    c_i\n.\nWhat's the minimum number of operations needed to achieve our goal? Input The\nfirst line contains an integer \n    t\n \n    (1\n    \u2264 t\n    \u2264 1000)\n \u2014 the number\nof test cases. The description of the test cases follows. The first line of\neach test case contains a single integer \n    n\n \n    (2\n    \u2264 n\n    \u2264 2 \n    \u00b7\n    10^5)\n \u2014 the number of the vertices in the tree. The second line of each\ntest case contains \n    n - 1\n integers, \n    p_2, p_3, \n    \u2026, p_n\n \n    (1\n    \n    \u2264 p_i < i)\n, where \n    p_i\n denotes the parent of the vertex \n    i\n.\nThe \n    i\n-th of the following \n    n\n lines contains two integers \n    l_i\n\nand \n    r_i\n \n    (1 \n    \u2264 l_i \n    \u2264 r_i \n    \u2264 10^9)\n. It is guaranteed that\nthe sum of \n    n\n over all test cases doesn't exceed \n    2 \n    \u00b7 10^5\n.\nOutput For each test case output the minimum number of operations needed.\nExample Input 4 2 1 1 5 2 9 3 1 1 4 5 2 4 6 10 4 1 2 1 6 9 5 6 4 5 2 4 5 1 2 3\n4 5 5 4 4 3 3 2 2 1 1 Output 1 2 2 5 Note In the first test case, we can\nachieve the goal with a single operation: choose \n    v = 2\n and \n    c = [1,\n    2]\n, resulting in \n    a_1 = 1, a_2 = 2\n. In the second test case, we can\nachieve the goal with two operations: first, choose \n    v = 2\n and \n    c = [3,\n    3]\n, resulting in \n    a_1 = 3, a_2 = 3, a_3 = 0\n. Then, choose \n    v = 3, c\n    = [2, 7]\n, resulting in \n    a_1 = 5, a_2 = 3, a_3 = 7\n.\n\n",
        "cf_contest_id": 1693,
        "cf_index": "B",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dp",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2\r\n1\r\n1 5\r\n2 9\r\n3\r\n1 1\r\n4 5\r\n2 4\r\n6 10\r\n4\r\n1 2 1\r\n6 9\r\n5 6\r\n4 5\r\n2 4\r\n5\r\n1 2 3 4\r\n5 5\r\n4 4\r\n3 3\r\n2 2\r\n1 1\r\n",
                "1\r\n2\r\n2\r\n5\r\n"
            ]
        ],
        "private_cases": []
    }
]