[
    {
        "name": "Wet Shark and Blocks",
        "description": "There are b blocks of digits. Each one consisting of the same n digits, which\nare given to you in the input. Wet Shark must choose exactly one digit from\neach block and concatenate all of those digits together to form one large\ninteger. For example, if he chooses digit 1 from the first block and digit 2\nfrom the second block, he gets the integer 12. Wet Shark then takes this\nnumber modulo x. Please, tell him how many ways he can choose one digit from\neach block so that he gets exactly k as the final result. As this number may\nbe too large, print it modulo 10^9 + 7. Note, that the number of ways to\nchoose some digit in the block is equal to the number of it's occurrences. For\nexample, there are 3 ways to choose digit 5 from block 3 5 6 7 8 9 5 1 1 1 1\n5. Input The first line of the input contains four space-separated integers,\nn, b, k and x (2 \u2264 n \u2264 50 000, 1 \u2264 b \u2264 10^9, 0 \u2264 k < x \u2264 100, x \u2265 2) \u2014 the\nnumber of digits in one block, the number of blocks, interesting remainder\nmodulo x and modulo x itself. The next line contains n space separated\nintegers ai (1 \u2264 ai \u2264 9), that give the digits contained in each block. Output\nPrint the number of ways to pick exactly one digit from each blocks, such that\nthe resulting integer equals k modulo x. Examples Input 12 1 5 10 3 5 6 7 8 9\n5 1 1 1 1 5 Output 3 Input 3 2 1 2 6 2 2 Output 0 Input 3 2 1 2 3 1 2 Output 6\nNote In the second sample possible integers are 22, 26, 62 and 66. None of\nthem gives the remainder 1 modulo 2. In the third sample integers 11, 13, 21,\n23, 31 and 33 have remainder 1 modulo 2. There is exactly one way to obtain\neach of these integers, so the total answer is 6.\n\n",
        "cf_contest_id": 621,
        "cf_index": "E",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "matrices"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "12 1 5 10\r\n3 5 6 7 8 9 5 1 1 1 1 5\r\n",
                "3\r\n"
            ],
            [
                "3 2 1 2\r\n6 2 2\r\n",
                "0\r\n"
            ],
            [
                "3 2 1 2\r\n3 1 2\r\n",
                "6\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 2 1 2\r\n6 3 2\r\n",
                "3\r\n"
            ],
            [
                "3 2 1 2\r\n3 6 3\r\n",
                "6\r\n"
            ],
            [
                "3 2 0 2\r\n3 3 9\r\n",
                "0\r\n"
            ],
            [
                "3 2 0 2\r\n4 5 1\r\n",
                "3\r\n"
            ],
            [
                "3 2 0 2\r\n1 3 2\r\n",
                "3\r\n"
            ],
            [
                "3 2 1 2\r\n5 9 3\r\n",
                "9\r\n"
            ],
            [
                "3 2 1 2\r\n7 2 4\r\n",
                "3\r\n"
            ],
            [
                "6 5 2 12\r\n2 8 9 6 6 1\r\n",
                "1017\r\n"
            ],
            [
                "6 5 9 11\r\n8 1 2 1 8 2\r\n",
                "640\r\n"
            ],
            [
                "6 5 7 10\r\n9 6 9 8 8 8\r\n",
                "0\r\n"
            ],
            [
                "6 5 12 23\r\n5 8 2 6 5 5\r\n",
                "294\r\n"
            ],
            [
                "6 5 6 22\r\n6 1 6 1 4 1\r\n",
                "680\r\n"
            ],
            [
                "100 1000000000 42 97\r\n2 5 1 8 8 1 5 2 1 2 5 1 8 8 1 5 2 1 2 5 1 8 8 1 5 2 1 2 5 1 8 8 1 5 2 1 2 5 1 8 8 1 5 2 1 2 5 1 8 8 1 5 2 1 2 5 1 8 8 1 5 2 1 2 5 1 8 8 1 5 2 1 2 5 1 8 8 1 5 2 1 2 5 1 8 8 1 5 2 1 2 5 1 8 8 1 5 2 1 2\r\n",
                "590949100\r\n"
            ]
        ]
    }
]