[
    {
        "name": "Diluc and Kaeya",
        "description": "The tycoon of a winery empire in Mondstadt, unmatched in every possible way. A\nthinker in the Knights of Favonius with an exotic appearance. This time, the\nbrothers are dealing with a strange piece of wood marked with their names.\nThis plank of wood can be represented as a string of \n    n\n characters. Each\ncharacter is either a 'D' or a 'K'. You want to make some number of cuts\n(possibly \n    0\n) on this string, partitioning it into several contiguous\npieces, each with length at least \n    1\n. Both brothers act with dignity, so\nthey want to split the wood as evenly as possible. They want to know the\nmaximum number of pieces you can split the wood into such that the ratios of\nthe number of occurrences of 'D' to the number of occurrences of 'K' in each\nchunk are the same. Kaeya, the curious thinker, is interested in the solution\nfor multiple scenarios. He wants to know the answer for every prefix of the\ngiven string. Help him to solve this problem! For a string we define a ratio\nas \n    a:b\n where 'D' appears in it \n    a\n times, and 'K' appears \n    b\n\ntimes. Note that \n    a\n or \n    b\n can equal \n    0\n, but not both. Ratios\n\n    a:b\n and \n    c:d\n are considered equal if and only if \n    a\n    \u00b7 d =\n    b\n    \u00b7 c\n. For example, for the string 'DDD' the ratio will be \n    3:0\n,\nfor 'DKD' \u2014 \n    2:1\n, for 'DKK' \u2014 \n    1:2\n, and for 'KKKKDD' \u2014 \n    2:4\n.\nNote that the ratios of the latter two strings are equal to each other, but\nthey are not equal to the ratios of the first two strings. Input Each test\ncontains multiple test cases. The first line contains the number of test cases\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n). Description of the test cases follows.\nThe first line of each test case contains an integer \n    n\n (\n    1 \n    \u2264 n\n    \n    \u2264 5 \n    \u00b7 10^5\n) \u2014 the length of the wood. The second line of each\ntest case contains a string \n    s\n of length \n    n\n. Every character of\n\n    s\n will be either 'D' or 'K'. It is guaranteed that the sum of \n    n\n\nover all test cases does not exceed \n    5 \n    \u00b7 10^5\n. Output For each test\ncase, output \n    n\n space separated integers. The \n    i\n-th of these numbers\nshould equal the answer for the prefix \n    s_1,s_2,\n    \u2026,s_i\n.\nExample Input 5 3 DDK 6 DDDDDD 4 DKDK 1 D 9 DKDKDDDDK Output 1 2 1 1 2 3 4 5 6\n1 1 1 2 1 1 1 1 2 1 2 1 1 3 Note For the first test case, there is no way to\npartition 'D' or 'DDK' into more than one block with equal ratios of numbers\nof 'D' and 'K', while you can split 'DD' into 'D' and 'D'. For the second test\ncase, you can split each prefix of length \n    i\n into \n    i\n blocks 'D'.\n\n",
        "cf_contest_id": 1536,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp",
            "hashing",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3\r\nDDK\r\n6\r\nDDDDDD\r\n4\r\nDKDK\r\n1\r\nD\r\n9\r\nDKDKDDDDK\r\n",
                "1 2 1 1 2 3 4 5 6 1 1 1 2 1 1 1 1 2 1 2 1 1 3 "
            ]
        ],
        "private_cases": [
            [
                "10\r\n9\r\nDDDDDDKDD\r\n10\r\nKKDDDDKKDK\r\n7\r\nKKDDKDK\r\n13\r\nKKKDDKDDDKKKD\r\n14\r\nKDDDDKDDKDKDKK\r\n9\r\nKKDDKDDKD\r\n14\r\nDKDKKKKKDDDKKK\r\n10\r\nKDKKDKKKKD\r\n11\r\nDDKDKKDDKKD\r\n3\r\nKKK\r\n",
                "1 2 3 4 5 6 1 1 1 1 2 1 1 1 1 1 2 1 3 1 2 1 1 1 2 1 1 2 3 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 2 3 1 1 4 1 1 1 2 1 1 1 2 1 3 1 1 1 1 2 1 1 1 1 2 2 1 1 1 1 1 1 1 1 1 2 1 2 1 1 1 2 1 1 1 1 1 1 1 2 1 1 2 3 "
            ],
            [
                "20\r\n5\r\nDKDKD\r\n4\r\nKDKD\r\n2\r\nKD\r\n2\r\nKD\r\n1\r\nD\r\n3\r\nKDK\r\n3\r\nDKD\r\n4\r\nKDKD\r\n3\r\nDKD\r\n2\r\nDK\r\n1\r\nK\r\n4\r\nKDKD\r\n1\r\nD\r\n2\r\nKD\r\n3\r\nKDK\r\n3\r\nDKD\r\n1\r\nK\r\n2\r\nKD\r\n2\r\nKD\r\n2\r\nKD\r\n",
                "1 1 1 2 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 "
            ]
        ]
    }
]