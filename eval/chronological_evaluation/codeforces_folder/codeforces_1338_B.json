[
    {
        "name": "Edge Weight Assignment",
        "description": "You have unweighted tree of \n    n\n vertices. You have to assign a positive\nweight to each edge so that the following condition would hold: For every two\ndifferent leaves \n    v_1\n and \n    v_2\n of this tree, bitwise XOR of\nweights of all edges on the simple path between \n    v_1\n and \n    v_2\n\nhas to be equal to \n    0\n. Note that you can put very large positive integers\n(like \n    10^(10^10)\n). It's guaranteed that such assignment always\nexists under given constraints. Now let's define \n    f\n as the number of\ndistinct weights in assignment. In this example, assignment is valid, because\nbitwise XOR of all edge weights between every pair of leaves is \n    0\n.\n\n    f\n value is \n    2\n here, because there are \n    2\n distinct edge\nweights(\n    4\n and \n    5\n). In this example, assignment is invalid, because\nbitwise XOR of all edge weights between vertex \n    1\n and vertex \n    6\n\n(\n    3, 4, 5, 4\n) is not \n    0\n. What are the minimum and the maximum\npossible values of \n    f\n for the given tree? Find and print both. Input The\nfirst line contains integer \n    n\n (\n    3 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the\nnumber of vertices in given tree. The \n    i\n-th of the next \n    n-1\n lines\ncontains two integers \n    a_i\n and \n    b_i\n (\n    1 \n    \u2264 a_i\n    \n    b_i\n    \u2264 n\n) \u2014 it means there is an edge between \n    a_i\n and\n\n    b_i\n. It is guaranteed that given graph forms tree of \n    n\n vertices.\nOutput Print two integers \u2014 the minimum and maximum possible value of \n    f\n\ncan be made from valid assignment of given tree. Note that it's always\npossible to make an assignment under given constraints. Examples Input 6 1 3 2\n3 3 4 4 5 5 6 Output 1 4 Input 6 1 3 2 3 3 4 4 5 4 6 Output 3 3 Input 7 1 2 2\n7 3 4 4 7 5 6 6 7 Output 1 6 Note In the first example, possible assignments\nfor each minimum and maximum are described in picture below. Of course, there\nare multiple possible assignments for each minimum and maximum. In the second\nexample, possible assignments for each minimum and maximum are described in\npicture below. The \n    f\n value of valid assignment of this tree is always\n\n    3\n. In the third example, possible assignments for each minimum and\nmaximum are described in picture below. Of course, there are multiple possible\nassignments for each minimum and maximum.\n\n",
        "cf_contest_id": 1338,
        "cf_index": "B",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "constructive algorithms",
            "dfs and similar",
            "greedy",
            "math",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n1 3\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n",
                "1 4\r\n"
            ],
            [
                "6\r\n1 3\r\n2 3\r\n3 4\r\n4 5\r\n4 6\r\n",
                "3 3\r\n"
            ],
            [
                "7\r\n1 2\r\n2 7\r\n3 4\r\n4 7\r\n5 6\r\n6 7\r\n",
                "1 6\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n1 2\r\n2 3\r\n",
                "1 1\r\n"
            ],
            [
                "5\r\n1 2\r\n2 3\r\n1 4\r\n3 5\r\n",
                "1 4\r\n"
            ],
            [
                "4\r\n1 2\r\n2 3\r\n3 4\r\n",
                "3 3\r\n"
            ],
            [
                "5\r\n1 2\r\n2 3\r\n1 4\r\n4 5\r\n",
                "1 4\r\n"
            ],
            [
                "5\r\n1 5\r\n2 5\r\n3 5\r\n4 5\r\n",
                "1 1\r\n"
            ]
        ]
    }
]