[
    {
        "name": "Monoblock",
        "description": "Stanley has decided to buy a new desktop PC made by the company \"Monoblock\",\nand to solve captcha on their website, he needs to solve the following task.\nThe awesomeness of an array is the minimum number of blocks of consecutive\nidentical numbers in which the array could be split. For example, the\nawesomeness of an array \n    [1, 1, 1]\n is \n    1\n; \n    [5, 7]\n is \n    2\n,\nas it could be split into blocks \n    [5]\n and \n    [7]\n; \n    [1, 7, 7, 7, 7,\n    7, 7, 7, 9, 9, 9, 9, 9, 9, 9, 9, 9]\n is 3, as it could be split into blocks\n\n    [1]\n, \n    [7, 7, 7, 7, 7, 7, 7]\n, and \n    [9, 9, 9, 9, 9, 9, 9, 9, 9]\n.\nYou are given an array \n    a\n of length \n    n\n. There are \n    m\n queries of\ntwo integers \n    i\n, \n    x\n. A query \n    i\n, \n    x\n means that from now on\nthe \n    i\n-th element of the array \n    a\n is equal to \n    x\n. After each\nquery print the sum of awesomeness values among all subsegments of array\n\n    a\n. In other words, after each query you need to calculate\n\n    \n\n    \u2211\n    _l = 1^n \n    \u2211\n    _r = l^n g(l, r),\n\n    \n where\n\n    g(l, r)\n is the awesomeness of the array \n    b = [a_l, a_l + 1,\n    \n    \u2026, a_r]\n. Input In the first line you are given with two integers\n\n    n\n and \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 10^5\n). The second line\ncontains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264\n    10^9\n) \u2014 the array \n    a\n. In the next \n    m\n lines you are given the\ndescriptions of queries. Each line contains two integers \n    i\n and \n    x\n\n(\n    1 \n    \u2264 i \n    \u2264 n\n, \n    1 \n    \u2264 x \n    \u2264 10^9\n). Output Print the\nanswer to each query on a new line. Example Input 5 5 1 2 3 4 5 3 2 4 2 3 1 2\n1 2 2 Output 29 23 35 25 35 Note After the first query \n    a\n is equal to\n\n    [1, 2, 2, 4, 5]\n, and the answer is \n    29\n because we can split each of\nthe subsegments the following way: \n    [1; 1]\n: \n    [1]\n, 1 block; \n    [1;\n    2]\n: \n    [1] + [2]\n, 2 blocks; \n    [1; 3]\n: \n    [1] + [2, 2]\n, 2 blocks;\n\n    [1; 4]\n: \n    [1] + [2, 2] + [4]\n, 3 blocks; \n    [1; 5]\n: \n    [1] + [2,\n    2] + [4] + [5]\n, 4 blocks; \n    [2; 2]\n: \n    [2]\n, 1 block; \n    [2; 3]\n:\n\n    [2, 2]\n, 1 block; \n    [2; 4]\n: \n    [2, 2] + [4]\n, 2 blocks; \n    [2;\n    5]\n: \n    [2, 2] + [4] + [5]\n, 3 blocks; \n    [3; 3]\n: \n    [2]\n, 1 block;\n\n    [3; 4]\n: \n    [2] + [4]\n, 2 blocks; \n    [3; 5]\n: \n    [2] + [4] + [5]\n,\n3 blocks; \n    [4; 4]\n: \n    [4]\n, 1 block; \n    [4; 5]\n: \n    [4] + [5]\n, 2\nblocks; \n    [5; 5]\n: \n    [5]\n, 1 block; which is \n    1 + 2 + 2 + 3 + 4 + 1 +\n    1 + 2 + 3 + 1 + 2 + 3 + 1 + 2 + 1 = 29\n in total.\n\n",
        "cf_contest_id": 1715,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "data structures",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 5\r\n1 2 3 4 5\r\n3 2\r\n4 2\r\n3 1\r\n2 1\r\n2 2\r\n",
                "29\r\n23\r\n35\r\n25\r\n35\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1\r\n1 2\r\n",
                "1\r\n"
            ]
        ]
    }
]