[
    {
        "name": "Banh-mi",
        "description": "JATC loves Banh-mi (a Vietnamese food). His affection for Banh-mi is so much\nthat he always has it for breakfast. This morning, as usual, he buys a Banh-mi\nand decides to enjoy it in a special way. First, he splits the Banh-mi into\n\n    n\n parts, places them on a row and numbers them from \n    1\n through\n\n    n\n. For each part \n    i\n, he defines the deliciousness of the part as\n\n    x_i \n    \u2208\n    \n    0, 1\n. JATC's going to eat those parts one by one. At\neach step, he chooses arbitrary remaining part and eats it. Suppose that part\nis the \n    i\n-th part then his enjoyment of the Banh-mi will increase by\n\n    x_i\n and the deliciousness of all the remaining parts will also increase\nby \n    x_i\n. The initial enjoyment of JATC is equal to \n    0\n. For example,\nsuppose the deliciousness of \n    3\n parts are \n    [0, 1, 0]\n. If JATC eats\nthe second part then his enjoyment will become \n    1\n and the deliciousness\nof remaining parts will become \n    [1, \n    \n    _, 1]\n. Next, if he eats the first\npart then his enjoyment will become \n    2\n and the remaining parts will\nbecome \n    [\n    \n    _, \n    \n    _, 2]\n. After eating the last part, JATC's enjoyment\nwill become \n    4\n. However, JATC doesn't want to eat all the parts but to\nsave some for later. He gives you \n    q\n queries, each of them consisting of\ntwo integers \n    l_i\n and \n    r_i\n. For each query, you have to let him know\nwhat is the maximum enjoyment he can get if he eats all the parts with indices\nin the range \n    [l_i, r_i]\n in some order. All the queries are independent\nof each other. Since the answer to the query could be very large, print it\nmodulo \n    10^9+7\n. Input The first line contains two integers \n    n\n and\n\n    q\n (\n    1 \n    \u2264 n, q \n    \u2264 100\n     000\n). The second line contains a\nstring of \n    n\n characters, each character is either '0' or '1'. The\n\n    i\n-th character defines the deliciousness of the \n    i\n-th part. Each of\nthe following \n    q\n lines contains two integers \n    l_i\n and \n    r_i\n\n(\n    1 \n    \u2264 l_i \n    \u2264 r_i \n    \u2264 n\n) \u2014 the segment of the corresponding\nquery. Output Print \n    q\n lines, where \n    i\n-th of them contains a single\ninteger \u2014 the answer to the \n    i\n-th query modulo \n    10^9 + 7\n. Examples\nInput 4 2 1011 1 4 3 4 Output 14 3 Input 3 2 111 1 2 3 3 Output 3 1 Note In\nthe first example: For query \n    1\n: One of the best ways for JATC to eats\nthose parts is in this order: \n    1\n, \n    4\n, \n    3\n, \n    2\n. For query\n\n    2\n: Both \n    3\n, \n    4\n and \n    4\n, \n    3\n ordering give the same\nanswer. In the second example, any order of eating parts leads to the same\nanswer.\n\n",
        "cf_contest_id": 1062,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 2\r\n1011\r\n1 4\r\n3 4\r\n",
                "14\r\n3\r\n"
            ],
            [
                "3 2\r\n111\r\n1 2\r\n3 3\r\n",
                "3\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 5\r\n111\r\n1 1\r\n1 2\r\n3 3\r\n2 2\r\n1 3\r\n",
                "1\r\n3\r\n1\r\n1\r\n7\r\n"
            ],
            [
                "1 1\r\n0\r\n1 1\r\n",
                "0\r\n"
            ],
            [
                "3 3\r\n101\r\n1 3\r\n2 3\r\n1 1\r\n",
                "6\r\n2\r\n1\r\n"
            ],
            [
                "6 5\r\n111101\r\n1 1\r\n4 6\r\n3 6\r\n1 2\r\n4 4\r\n",
                "1\r\n6\r\n14\r\n3\r\n1\r\n"
            ],
            [
                "10 8\r\n0110000110\r\n3 3\r\n1 10\r\n4 4\r\n1 8\r\n1 2\r\n9 10\r\n2 10\r\n3 9\r\n",
                "1\r\n960\r\n0\r\n224\r\n2\r\n2\r\n480\r\n112\r\n"
            ],
            [
                "10 4\r\n1110101101\r\n3 5\r\n7 8\r\n8 10\r\n1 1\r\n",
                "6\r\n3\r\n6\r\n1\r\n"
            ]
        ]
    }
]