[
    {
        "name": "Poisoned Dagger",
        "description": "Monocarp is playing yet another computer game. In this game, his character has\nto kill a dragon. The battle with the dragon lasts \n    100^500\n seconds,\nduring which Monocarp attacks the dragon with a poisoned dagger. The\n\n    i\n-th attack is performed at the beginning of the \n    a_i\n-th second\nfrom the battle start. The dagger itself does not deal damage, but it applies\na poison effect on the dragon, which deals \n    1\n damage during each of the\nnext \n    k\n seconds (starting with the same second when the dragon was\nstabbed by the dagger). However, if the dragon has already been poisoned, then\nthe dagger updates the poison effect (i.e. cancels the current poison effect\nand applies a new one). For example, suppose \n    k = 4\n, and Monocarp stabs\nthe dragon during the seconds \n    2\n, \n    4\n and \n    10\n. Then the poison\neffect is applied at the start of the \n    2\n-nd second and deals \n    1\n\ndamage during the \n    2\n-nd and \n    3\n-rd seconds; then, at the beginning of\nthe \n    4\n-th second, the poison effect is reapplied, so it deals exactly\n\n    1\n damage during the seconds \n    4\n, \n    5\n, \n    6\n and \n    7\n; then,\nduring the \n    10\n-th second, the poison effect is applied again, and it\ndeals \n    1\n damage during the seconds \n    10\n, \n    11\n, \n    12\n and\n\n    13\n. In total, the dragon receives \n    10\n damage. Monocarp knows that\nthe dragon has \n    h\n hit points, and if he deals at least \n    h\n damage to\nthe dragon during the battle \u2014 he slays the dragon. Monocarp has not decided\non the strength of the poison he will use during the battle, so he wants to\nfind the minimum possible value of \n    k\n (the number of seconds the poison\neffect lasts) that is enough to deal at least \n    h\n damage to the dragon.\nInput The first line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    1000\n) \u2014 the number of test cases. The first line of the test case contains\ntwo integers \n    n\n and \n    h\n (\n    1 \n    \u2264 n \n    \u2264 100; 1 \n    \u2264 h \n    \u2264\n    10^18\n) \u2014 the number of Monocarp's attacks and the amount of damage that\nneeds to be dealt. The second line contains \n    n\n integers \n    a_1\n,\n\n    a_2\n, ..., \n    a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9; a_i < a_i + 1\n),\nwhere \n    a_i\n is the second when the \n    i\n-th attack is performed. Output\nFor each test case, print a single integer \u2014 the minimum value of the\nparameter \n    k\n, such that Monocarp will cause at least \n    h\n damage to\nthe dragon. Example Input 4 2 5 1 5 3 10 2 4 10 5 3 1 2 4 5 7 4 1000 3 25 64\n1337 Output 3 4 1 470 Note In the first example, for \n    k=3\n, damage is\ndealt in seconds \n    [1, 2, 3, 5, 6, 7]\n. In the second example, for\n\n    k=4\n, damage is dealt in seconds \n    [2, 3, 4, 5, 6, 7, 10, 11, 12,\n    13]\n. In the third example, for \n    k=1\n, damage is dealt in seconds \n    [1,\n    2, 4, 5, 7]\n.\n\n",
        "cf_contest_id": 1613,
        "cf_index": "C",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "binary search"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2 5\r\n1 5\r\n3 10\r\n2 4 10\r\n5 3\r\n1 2 4 5 7\r\n4 1000\r\n3 25 64 1337\r\n",
                "3\r\n4\r\n1\r\n470\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 1000000000000000000\r\n1000000\r\n",
                "1000000000000000000\r\n"
            ],
            [
                "1\r\n2 1000000000000000000\r\n1 1000000000\r\n",
                "999999999000000001\r\n"
            ],
            [
                "1\r\n2 1000000000000000000\r\n1000000 1000000000\r\n",
                "999999999001000000\r\n"
            ],
            [
                "1\r\n1 1000000000000000000\r\n1000000000\r\n",
                "1000000000000000000\r\n"
            ]
        ]
    }
]