[
    {
        "name": "Array Shuffling",
        "description": "oolimry has an array \n    a\n of length \n    n\n which he really likes. Today,\nyou have changed his array to \n    b\n, a permutation of \n    a\n, to make him\nsad. Because oolimry is only a duck, he can only perform the following\noperation to restore his array: Choose two integers \n    i,j\n such that \n    1\n    \n    \u2264 i,j \n    \u2264 n\n. Swap \n    b_i\n and \n    b_j\n. The sadness of the array\n\n    b\n is the minimum number of operations needed to transform \n    b\n into\n\n    a\n. Given the array \n    a\n, find any array \n    b\n which is a\npermutation of \n    a\n that has the maximum sadness over all permutations of\nthe array \n    a\n. Input Each test contains multiple test cases. The first\nline contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the\nnumber of test cases. The description of the test cases follows. The first\nline of each test case contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    2 \n    \u00b7 10^5\n) \u2014 the length of the array. The second line of each test\ncase contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i\n    \n    \u2264 n\n) \u2014 elements of the array \n    a\n. It is guaranteed that the sum of\n\n    n\n over all test cases does not exceed \n    2 \n    \u00b7 10^5\n. Output For\neach test case, print \n    n\n integers \n    b_1, b_2, \n    \u2026, b_n\n \u2014\ndescribing the array \n    b\n. If there are multiple answers, you may print\nany. Example Input 2 2 2 1 4 1 2 3 3 Output 1 2 3 3 2 1 Note In the first test\ncase, the array \n    [1,2]\n has sadness \n    1\n. We can transform \n    [1,2]\n\ninto \n    [2,1]\n using one operation with \n    (i,j)=(1,2)\n. In the second\ntest case, the array \n    [3,3,2,1]\n has sadness \n    2\n. We can transform\n\n    [3,3,2,1]\n into \n    [1,2,3,3]\n with two operations with\n\n    (i,j)=(1,4)\n and \n    (i,j)=(2,3)\n respectively.\n\n",
        "cf_contest_id": 1672,
        "cf_index": "F1",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graphs",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n2\r\n2 1\r\n4\r\n1 2 3 3\r\n",
                "1 2 2 3 1 3 "
            ]
        ],
        "private_cases": []
    }
]