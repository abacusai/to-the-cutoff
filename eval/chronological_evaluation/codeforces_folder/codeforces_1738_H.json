[
    {
        "name": "Palindrome Addicts",
        "description": "Your task is to maintain a queue consisting of lowercase English letters as\nfollows: \"push \n    c\n\": insert a letter \n    c\n at the back of the queue;\n\"pop\": delete a letter from the front of the queue. Initially, the queue is\nempty. After each operation, you are asked to count the number of distinct\npalindromic substrings in the string that are obtained by concatenating the\nletters from the front to the back of the queue. Especially, the number of\ndistinct palindromic substrings of the empty string is \n    0\n. A string\n\n    s[1..n]\n of length \n    n\n is palindromic if \n    s[i] = s[n-i+1]\n for\nevery \n    1 \n    \u2264 i \n    \u2264 n\n. The string \n    s[l..r]\n is a substring of\nstring \n    s[1..n]\n for every \n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 n\n. Two strings\n\n    s[1..n]\n and \n    t[1..m]\n are distinct, if at least one of the following\nholds. \n    n \n    \u2260 m\n; \n    s[i] \n    \u2260 t[i]\n for some \n    1 \n    \u2264 i \n    \u2264\n    min\n    \n    n,m\n. Input The first line is an integer \n    q\n (\n    1\n    \n    \u2264 q \n    \u2264 10^6\n), indicating the number of operations. Then \n    q\n\nlines follow. Each of the following lines contains one of the operations as\nfollows. \"push \n    c\n\": insert a letter \n    c\n at the back of the queue,\nwhere \n    c\n is a lowercase English letter; \"pop\": delete a letter from the\nfront of the queue. It is guaranteed that no \"pop\" operation will be performed\nwhen the queue is empty. Output After each operation, print the number of\ndistinct palindromic substrings in the string presented in the queue. Example\nInput 12 push a pop push a push a push b push b push a push a pop pop pop push\nb Output 1 0 1 2 3 4 5 6 5 4 3 4 Note Let \n    s_k\n be the string presented in\nthe queue after the \n    k\n-th operation, and let \n    c_k\n be the number of\ndistinct palindromic substrings of \n    s_k\n. The following table shows the\ndetails of the example.\n\n    k\n\n    s_k\n\n    c_k\n\n    1\n\n    a\n\n    1\n\n    2\n\n    \n\n    0\n\n    3\n\n    a\n\n    1\n\n    4\n\n    aa\n\n    2\n\n    5\n\n    aab\n\n    3\n\n    6\n\n    aabb\n\n    4\n\n    7\n\n    aabba\n\n    5\n\n    8\n\n    aabbaa\n\n    6\n\n    9\n\n    abbaa\n\n    5\n\n    10\n\n    bbaa\n\n    4\n\n    11\n\n    baa\n\n    3\n\n    12\n\n    baab\n\n    4\n\nIt is worth pointing out that After the \n    2\n-nd operation, the string is\nempty and thus has no substrings. So the answer is \n    0\n; After the\n\n    8\n-th operation, the string is \"\n    aabbaa\n\". The \n    6\n distinct\npalindromic substrings are \"\n    a\n\", \"\n    aa\n\", \"\n    aabbaa\n\",\n\"\n    abba\n\", \"\n    b\n\", and \"\n    bb\n\".\n\n",
        "cf_contest_id": 1738,
        "cf_index": "H",
        "cf_rating": 3300,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "12\r\npush a\r\npop\r\npush a\r\npush a\r\npush b\r\npush b\r\npush a\r\npush a\r\npop\r\npop\r\npop\r\npush b\r\n",
                "1\r\n0\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n5\r\n4\r\n3\r\n4\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\npush z\r\n",
                "1\r\n"
            ],
            [
                "4\r\npush a\r\npop\r\npush g\r\npop\r\n",
                "1\r\n0\r\n1\r\n0\r\n"
            ]
        ]
    }
]