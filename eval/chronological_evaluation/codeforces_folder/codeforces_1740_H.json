[
    {
        "name": "MEX Tree Manipulation",
        "description": "Given a rooted tree, define the value of vertex \n    u\n in the tree\nrecursively as the MEX\n    ^\n    \u2020\n of the values of its children. Note\nthat it is only the children, not all of its descendants. In particular, the\nvalue of a leaf is \n    0\n. Pak Chanek has a rooted tree that initially only\ncontains a single vertex with index \n    1\n, which is the root. Pak Chanek is\ngoing to do \n    q\n queries. In the \n    i\n-th query, Pak Chanek is given an\ninteger \n    x_i\n. Pak Chanek needs to add a new vertex with index \n    i+1\n\nas the child of vertex \n    x_i\n. After adding the new vertex, Pak Chanek\nneeds to recalculate the values of all vertices and report the sum of the\nvalues of all vertices in the current tree. \n    ^\n    \u2020\n The MEX (minimum\nexcluded) of an array is the smallest non-negative integer that does not\nbelong to the array. For example, the MEX of \n    [0,1,1,2,6,7]\n is \n    3\n\nand the MEX of \n    [6,9]\n is \n    0\n. Input The first line contains a single\ninteger \n    q\n (\n    1 \n    \u2264 q \n    \u2264 3 \n    \u00b7 10^5\n) \u2014 the number of\noperations. Each of the next \n    q\n lines contains a single integer \n    x_i\n\n(\n    1 \n    \u2264 x_i \n    \u2264 i\n) \u2014 the description of the \n    i\n-th query.\nOutput For each query, print a line containing an integer representing the sum\nof the new values of all vertices in the tree after adding the vertex.\nExamples Input 7 1 1 3 2 5 2 1 Output 1 1 3 2 4 4 7 Input 8 1 1 1 1 5 6 7 8\nOutput 1 1 1 1 3 2 4 3 Note In the first example, the tree after the\n\n    6\n-th query will look like this. Vertex \n    7\n is a leaf, so its value\nis \n    0\n. Vertex \n    6\n is a leaf, so its value is \n    0\n. Vertex \n    5\n\nonly has a child with value \n    0\n, so its value is \n    1\n. Vertex \n    4\n\nis a leaf, so its value is \n    0\n. Vertex \n    3\n only has a child with value\n\n    0\n, so its value is \n    1\n. Vertex \n    2\n has children with values\n\n    0\n and \n    1\n, so its value is \n    2\n. Vertex \n    1\n has children with\nvalues \n    1\n and \n    2\n, so its value is \n    0\n. The sum of the values of\nall vertices is \n    0+0+1+0+1+2+0=4\n.\n\n",
        "cf_contest_id": 1740,
        "cf_index": "H",
        "cf_rating": 3300,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "trees"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "7\r\n1\r\n1\r\n3\r\n2\r\n5\r\n2\r\n1\r\n",
                "1\r\n1\r\n3\r\n2\r\n4\r\n4\r\n7\r\n"
            ],
            [
                "8\r\n1\r\n1\r\n1\r\n1\r\n5\r\n6\r\n7\r\n8\r\n",
                "1\r\n1\r\n1\r\n1\r\n3\r\n2\r\n4\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "2\r\n1\r\n2\r\n",
                "1\r\n1\r\n"
            ],
            [
                "3\r\n1\r\n1\r\n3\r\n",
                "1\r\n1\r\n3\r\n"
            ],
            [
                "4\r\n1\r\n1\r\n1\r\n3\r\n",
                "1\r\n1\r\n1\r\n3\r\n"
            ]
        ]
    }
]