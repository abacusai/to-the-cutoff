[
    {
        "name": "Stages",
        "description": "Natasha is going to fly to Mars. She needs to build a rocket, which consists\nof several stages in some order. Each of the stages is defined by a lowercase\nLatin letter. This way, the rocket can be described by the string \u2014\nconcatenation of letters, which correspond to the stages. There are \n    n\n\nstages available. The rocket must contain exactly \n    k\n of them. Stages in\nthe rocket should be ordered by their weight. So, after the stage with some\nletter can go only stage with a letter, which is at least two positions after\nin the alphabet (skipping one letter in between, or even more). For example,\nafter letter 'c' can't go letters 'a', 'b', 'c' and 'd', but can go letters\n'e', 'f', ..., 'z'. For the rocket to fly as far as possible, its weight\nshould be minimal. The weight of the rocket is equal to the sum of the weights\nof its stages. The weight of the stage is the number of its letter in the\nalphabet. For example, the stage 'a 'weighs one ton,' b 'weighs two tons, and'\nz' \u2014 \n    26\n tons. Build the rocket with the minimal weight or determine,\nthat it is impossible to build a rocket at all. Each stage can be used at most\nonce. Input The first line of input contains two integers \u2014 \n    n\n and\n\n    k\n (\n    1 \n    \u2264 k \n    \u2264 n \n    \u2264 50\n) \u2013 the number of available stages\nand the number of stages to use in the rocket. The second line contains string\n\n    s\n, which consists of exactly \n    n\n lowercase Latin letters. Each\nletter defines a new stage, which can be used to build the rocket. Each stage\ncan be used at most once. Output Print a single integer \u2014 the minimal total\nweight of the rocket or -1, if it is impossible to build the rocket at all.\nExamples Input 5 3 xyabd Output 29 Input 7 4 problem Output 34 Input 2 2 ab\nOutput -1 Input 12 1 abaabbaaabbb Output 1 Note In the first example, the\nfollowing rockets satisfy the condition: \"adx\" (weight is \n    1+4+24=29\n);\n\"ady\" (weight is \n    1+4+25=30\n); \"bdx\" (weight is \n    2+4+24=30\n); \"bdy\"\n(weight is \n    2+4+25=31\n).Rocket \"adx\" has the minimal weight, so the answer\nis \n    29\n. In the second example, target rocket is \"belo\". Its weight is\n\n    2+5+12+15=34\n. In the third example, \n    n=k=2\n, so the rocket must have\nboth stages: 'a' and 'b'. This rocket doesn't satisfy the condition, because\nthese letters are adjacent in the alphabet. Answer is -1.\n\n",
        "cf_contest_id": 1011,
        "cf_index": "A",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 3\r\nxyabd\r\n",
                "29\r\n"
            ],
            [
                "7 4\r\nproblem\r\n",
                "34\r\n"
            ],
            [
                "2 2\r\nab\r\n",
                "-1\r\n"
            ],
            [
                "12 1\r\nabaabbaaabbb\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "50 13\r\nqwertyuiopasdfghjklzxcvbnmaaaaaaaaaaaaaaaaaaaaaaaa\r\n",
                "169\r\n"
            ],
            [
                "50 14\r\nqwertyuiopasdfghjklzxcvbnmaaaaaaaaaaaaaaaaaaaaaaaa\r\n",
                "-1\r\n"
            ],
            [
                "1 1\r\na\r\n",
                "1\r\n"
            ],
            [
                "50 1\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n",
                "1\r\n"
            ],
            [
                "50 2\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n",
                "-1\r\n"
            ],
            [
                "13 13\r\nuwgmkyqeiaocs\r\n",
                "169\r\n"
            ],
            [
                "13 13\r\nhzdxpbfvrltnj\r\n",
                "182\r\n"
            ],
            [
                "1 1\r\nn\r\n",
                "14\r\n"
            ],
            [
                "10 8\r\nsmzeblyjqw\r\n",
                "113\r\n"
            ],
            [
                "20 20\r\ntzmvhskkyugkuuxpvtbh\r\n",
                "-1\r\n"
            ],
            [
                "30 15\r\nwjzolzzkfulwgioksfxmcxmnnjtoav\r\n",
                "-1\r\n"
            ],
            [
                "40 30\r\nxumfrflllrrgswehqtsskefixhcxjrxbjmrpsshv\r\n",
                "-1\r\n"
            ],
            [
                "50 31\r\nahbyyoxltryqdmvenemaqnbakglgqolxnaifnqtoclnnqiabpz\r\n",
                "-1\r\n"
            ],
            [
                "10 7\r\niuiukrxcml\r\n",
                "99\r\n"
            ],
            [
                "38 2\r\nvjzarfykmrsrvwbwfwldsulhxtykmjbnwmdufa\r\n",
                "5\r\n"
            ],
            [
                "12 6\r\nfwseyrarkwcd\r\n",
                "61\r\n"
            ],
            [
                "2 2\r\nac\r\n",
                "4\r\n"
            ],
            [
                "1 1\r\nc\r\n",
                "3\r\n"
            ],
            [
                "2 2\r\nad\r\n",
                "5\r\n"
            ],
            [
                "2 1\r\nac\r\n",
                "1\r\n"
            ],
            [
                "4 3\r\nadjz\r\n",
                "15\r\n"
            ],
            [
                "3 3\r\naoz\r\n",
                "42\r\n"
            ],
            [
                "3 1\r\nzzz\r\n",
                "26\r\n"
            ],
            [
                "2 1\r\nxz\r\n",
                "24\r\n"
            ],
            [
                "5 1\r\naaddd\r\n",
                "1\r\n"
            ]
        ]
    }
]