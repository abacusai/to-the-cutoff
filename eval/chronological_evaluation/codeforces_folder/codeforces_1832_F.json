[
    {
        "name": "Zombies",
        "description": "Polycarp plays a computer game in a post-apocalyptic setting. The zombies have\ntaken over the world, and Polycarp with a small team of survivors is defending\nagainst hordes trying to invade their base. The zombies are invading for\n\n    x\n minutes starting from minute \n    0\n. There are \n    n\n entrances to\nthe base, and every minute one zombie attempts to enter through every\nentrance. The survivors can defend the entrances against the zombies. There\nare two options: manually \u2014 shoot the zombies coming through a certain\nentrance; automatically \u2014 set up an electric fence on a certain entrance to\nfry the zombies. If an entrance is defended either or both ways during some\nminute, no zombie goes through. Every entrance is defended by a single\ndedicated survivor. The \n    i\n-th entrance is defended manually from minute\n\n    l_i\n until minute \n    r_i\n, non-inclusive \u2014 \n    [l_i, r_i)\n. There are\n\n    k\n generators that can be used to defend the entrances automatically.\nEvery entrance should be connected to exactly one generator, but a generator\ncan be connected to multiple entrances (or even none of them). Each generator\nwill work for exactly \n    m\n consecutive minutes. Polycarp can choose when to\npower on each generator independently of each other, the \n    m\n minute long\ninterval should be fully inside the \n    [0, x)\n time interval. Polycarp is a\nweird gamer. He wants the game to be as difficult as possible for him. So he\nwants to connect each entrance to a generator and choose the time for each\ngenerator in such a way that as many zombies as possible enter the base.\nPlease, help him to achieve that! Input The first line contains four integers\n\n    n, k, x\n and \n    m\n (\n    1 \n    \u2264 k \n    \u2264 n \n    \u2264 2000\n; \n    1 \n    \u2264 m\n    \n    \u2264 x \n    \u2264 10^9\n) \u2014 the number of entrances, the number of generators,\nthe duration of the zombie invasion and the duration of all generators. The\n\n    i\n-th of the next \n    n\n lines contains two integers \n    l_i\n and\n\n    r_i\n (\n    0 \n    \u2264 l_i < r_i \n    \u2264 x\n) \u2014 the time interval the \n    i\n-th\nentrance is defended manually. Output Print a single integer \u2014 the largest\nnumber of zombies that can enter the base after Polycarp connects each\nentrance to some generator and chooses the time for each generator. Examples\nInput 3 3 10 3 0 2 1 7 4 7 Output 18 Input 3 2 10 3 0 2 1 7 4 7 Output 18\nInput 3 1 10 3 0 2 1 7 4 7 Output 16 Input 2 1 20 6 11 13 2 14 Output 22 Input\n5 3 7 4 4 6 0 3 4 7 1 5 2 7 Output 14 Input 6 3 9 4 3 9 4 9 2 5 0 5 6 9 2 3\nOutput 26\n\n",
        "cf_contest_id": 1832,
        "cf_index": "F",
        "cf_rating": 3200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dp"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3 10 3\r\n0 2\r\n1 7\r\n4 7\r\n",
                "18\r\n"
            ],
            [
                "3 2 10 3\r\n0 2\r\n1 7\r\n4 7\r\n",
                "18\r\n"
            ],
            [
                "3 1 10 3\r\n0 2\r\n1 7\r\n4 7\r\n",
                "16\r\n"
            ],
            [
                "2 1 20 6\r\n11 13\r\n2 14\r\n",
                "22\r\n"
            ],
            [
                "5 3 7 4\r\n4 6\r\n0 3\r\n4 7\r\n1 5\r\n2 7\r\n",
                "14\r\n"
            ],
            [
                "6 3 9 4\r\n3 9\r\n4 9\r\n2 5\r\n0 5\r\n6 9\r\n2 3\r\n",
                "26\r\n"
            ]
        ],
        "private_cases": [
            [
                "4 1 19 5\r\n10 11\r\n0 9\r\n3 10\r\n4 18\r\n",
                "40\r\n"
            ],
            [
                "6 1 19 13\r\n8 14\r\n1 19\r\n1 16\r\n0 18\r\n2 4\r\n10 18\r\n",
                "21\r\n"
            ],
            [
                "6 1 17 7\r\n6 14\r\n1 10\r\n3 6\r\n13 15\r\n1 13\r\n1 2\r\n",
                "46\r\n"
            ],
            [
                "6 1 10 5\r\n4 6\r\n1 3\r\n2 3\r\n6 8\r\n3 9\r\n5 10\r\n",
                "25\r\n"
            ],
            [
                "7 7 10 1\r\n0 6\r\n5 9\r\n2 7\r\n2 3\r\n4 10\r\n6 7\r\n7 9\r\n",
                "45\r\n"
            ],
            [
                "4 4 5 1\r\n3 5\r\n1 3\r\n0 2\r\n0 4\r\n",
                "10\r\n"
            ],
            [
                "8 3 21 4\r\n0 1\r\n12 18\r\n0 16\r\n3 10\r\n13 16\r\n0 12\r\n16 20\r\n3 12\r\n",
                "105\r\n"
            ],
            [
                "2 1 3 1\r\n2 3\r\n1 2\r\n",
                "3\r\n"
            ],
            [
                "4 2 10 1\r\n1 2\r\n3 4\r\n5 6\r\n7 8\r\n",
                "34\r\n"
            ]
        ]
    }
]