[
    {
        "name": "Array Product",
        "description": "You are given an array \n    a\n consisting of \n    n\n integers. You can perform\nthe following operations with it: Choose some positions \n    i\n and \n    j\n\n(\n    1 \n    \u2264 i, j \n    \u2264 n, i \n     j\n), write the value of \n    a_i \n    \u00b7\n    a_j\n into the \n    j\n-th cell and remove the number from the \n    i\n-th\ncell; Choose some position \n    i\n and remove the number from the \n    i\n-th\ncell (this operation can be performed no more than once and at any point of\ntime, not necessarily in the beginning). The number of elements decreases by\none after each operation. However, the indexing of positions stays the same.\nDeleted numbers can't be used in the later operations. Your task is to perform\nexactly \n    n - 1\n operations with the array in such a way that the only\nnumber that remains in the array is maximum possible. This number can be\nrather large, so instead of printing it you need to print any sequence of\noperations which leads to this maximum number. Read the output format to\nunderstand what exactly you need to print. Input The first line contains a\nsingle integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of\nelements in the array. The second line contains \n    n\n integers \n    a_1, a_2,\n    \n    \u2026, a_n\n (\n    -10^9 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the elements of the\narray. Output Print \n    n - 1\n lines. The \n    k\n-th line should contain one\nof the two possible operations. The operation of the first type should look\nlike this: \n    1\u00a0 i_k\u00a0 j_k\n, where \n    1\n is the type of operation,\n\n    i_k\n and \n    j_k\n are the positions of the chosen elements. The\noperation of the second type should look like this: \n    2\u00a0 i_k\n, where\n\n    2\n is the type of operation, \n    i_k\n is the position of the chosen\nelement. Note that there should be no more than one such operation. If there\nare multiple possible sequences of operations leading to the maximum number \u2014\nprint any of them. Examples Input 5 5 -2 0 1 -3 Output 2 3 1 1 2 1 2 4 1 4 5\nInput 5 5 2 0 4 0 Output 1 3 5 2 5 1 1 2 1 2 4 Input 2 2 -1 Output 2 2 Input 4\n0 -10 0 0 Output 1 1 2 1 2 3 1 3 4 Input 4 0 0 0 0 Output 1 1 2 1 2 3 1 3 4\nNote Let X be the removed number in the array. Let's take a look at all the\nexamples: The first example has, for example, the following sequence of\ntransformations of the array: \n    [5, -2, 0, 1, -3] \n    \u2192 [5, -2, X, 1, -3]\n    \n    \u2192 [X, -10, X, 1, -3] \n    \u2192\n \n    [X, X, X, -10, -3] \n    \u2192 [X, X, X, X,\n    30]\n. Thus, the maximum answer is \n    30\n. Note, that other sequences that\nlead to the answer \n    30\n are also correct. The second example has, for\nexample, the following sequence of transformations of the array: \n    [5, 2, 0,\n    4, 0] \n    \u2192 [5, 2, X, 4, 0] \n    \u2192 [5, 2, X, 4, X] \n    \u2192 [X, 10, X, 4, X]\n    \n    \u2192\n \n    [X, X, X, 40, X]\n. The following answer is also allowed: 1 5 3 1\n4 2 1 2 1 2 3 Then the sequence of transformations of the array will look like\nthis: \n    [5, 2, 0, 4, 0] \n    \u2192 [5, 2, 0, 4, X] \n    \u2192 [5, 8, 0, X, X] \n    \u2192\n    [40, X, 0, X, X] \n    \u2192\n \n    [40, X, X, X, X]\n. The third example can have\nthe following sequence of transformations of the array: \n    [2, -1] \n    \u2192 [2,\n    X]\n. The fourth example can have the following sequence of transformations\nof the array: \n    [0, -10, 0, 0] \n    \u2192 [X, 0, 0, 0] \n    \u2192 [X, X, 0, 0] \n    \u2192\n    [X, X, X, 0]\n. The fifth example can have the following sequence of\ntransformations of the array: \n    [0, 0, 0, 0] \n    \u2192 [X, 0, 0, 0] \n    \u2192 [X, X,\n    0, 0] \n    \u2192 [X, X, X, 0]\n.\n\n",
        "cf_contest_id": 1042,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n5 -2 0 1 -3\r\n",
                "1 1 2\r\n1 2 4\r\n1 4 5\r\n2 3"
            ],
            [
                "5\r\n5 2 0 4 0\r\n",
                "1 1 2\r\n1 2 4\r\n1 3 5\r\n2 5"
            ],
            [
                "2\r\n2 -1\r\n",
                "2 2"
            ],
            [
                "4\r\n0 -10 0 0\r\n",
                "1 1 2\r\n1 2 3\r\n1 3 4\r\n"
            ],
            [
                "4\r\n0 0 0 0\r\n",
                "1 1 2\r\n1 2 3\r\n1 3 4\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n162752926 74678428\r\n",
                "1 1 2\r\n"
            ],
            [
                "2\r\n0 957794556\r\n",
                "2 1"
            ],
            [
                "2\r\n0 0\r\n",
                "1 1 2\r\n"
            ],
            [
                "2\r\n296369303 -129722459\r\n",
                "2 2"
            ],
            [
                "2\r\n0 -246606331\r\n",
                "1 1 2\r\n"
            ],
            [
                "2\r\n-334123344 -715238512\r\n",
                "1 1 2\r\n"
            ],
            [
                "3\r\n901757671 602032179 648227272\r\n",
                "1 1 2\r\n1 2 3\r\n"
            ],
            [
                "3\r\n0 826310696 475306516\r\n",
                "1 2 3\r\n2 1"
            ],
            [
                "3\r\n0 709426824 0\r\n",
                "1 1 3\r\n2 3"
            ],
            [
                "3\r\n0 0 0\r\n",
                "1 1 2\r\n1 2 3\r\n"
            ],
            [
                "3\r\n-556173614 890149857 30628101\r\n",
                "1 2 3\r\n2 1"
            ],
            [
                "3\r\n-378090190 0 463698701\r\n",
                "1 1 2\r\n2 2"
            ],
            [
                "3\r\n0 -494974062 0\r\n",
                "1 1 2\r\n1 2 3\r\n"
            ],
            [
                "3\r\n754191320 -760574499 -416425254\r\n",
                "1 1 2\r\n1 2 3\r\n"
            ],
            [
                "3\r\n-547909114 -582491075 0\r\n",
                "1 1 2\r\n2 3"
            ],
            [
                "3\r\n-282808876 -671988567 -110199577\r\n",
                "1 1 2\r\n2 3"
            ]
        ]
    }
]