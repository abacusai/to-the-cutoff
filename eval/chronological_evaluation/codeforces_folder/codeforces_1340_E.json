[
    {
        "name": "Nastya and Bees",
        "description": "Unfortunately, a mistake was found in the proof of the author's solution to\nthis problem. Currently, we don't know the absolutely correct solution.\nHowever, you can solve this task, but if your solution passes all the tests,\nit is not guaranteed to be correct. If your solution has passed all the tests\nand you are sure that it is correct, you can write to one of the contest\nauthors about it. Surely you all read the book \"Alice in Wonderland\". In this\ntask, Nastya got to the country of Three strange Bees. The bees are strange\nbecause their honeycombs are pentagonal. Nastya got there illegally, so she\nwants bees not to catch her. Help the bees punish the intruder! This is an\ninteractive problem. A beehive is a connected undirected graph where bees and\nNastya can move along the edges. A graph satisfies two properties: The degree\nof any of its vertex is no more than \n    3\n. For each edge, there exists a\ncycle of length not greater than \n    5\n passing through this edge. There are\nthree bees and Nastya. You play for bees. Firstly, you choose the vertices\nwhere you put the bees. Then Nastya chooses another vertex in which she will\ninitially appear. One move is first moving the bees, then Nastya, in turn: For\neach of your bees, you can either move each one along some edge from the\nvertex they are currently staying or leave it in place. Then Nastya will\nnecessarily move along some edge of the graph from the vertex she is currently\nstaying/. You win if at least one of the bees and Nastya are in the same\nvertex at any time of the game. If this situation does not occur after \n    n\n\nmoves, then you lose. Several bees can be in the same vertex. Input The first\nline contains two integers \n    n\n \n    (4 \n    \u2264 n \n    \u2264 5000)\n and \n    m\n\n\n    (n \n    \u2264 m \n    \u2264 3n)\n \u2014 the number of vertices and edges in the graph.\nEach of the next \n    m\n lines contains two integers \n    v\n and \n    u\n \n    (1\n    \n    \u2264 v, u \n    \u2264 n)\n, which mean that there is an edge between the\nvertices \n    v\n and \n    u\n. It is guaranteed that the graph is connected,\ndoes not contain loops that the degree of any vertex does not exceed \n    3\n\nand a cycle of length no more than \n    5\n passes through each edge. Note that\nthe graph may contain multiple edges. Interaction At each turn, you must\noutput exactly three vertices \n    a, b, c\n \n    (1 \n    \u2264 a, b, c \n    \u2264 n)\n.\nFor the first time, \n    3\n vertices displayed will indicate which vertices\nyou originally placed bees on. In response, you will receive the vertex where\nthe jury placed Nastya. Each next \n    3\n vertices will indicate where the\n\n    3\n bees move at your turn. Each of the bees can, regardless of other\nbees, both remain at the current vertex and move along the edge. After the\nnext output of \n    3\n vertices, in response, you get the number of the new\nvertex to which Nastya went. As soon as one of the bees is at the same vertex\nwith Nastya or you have reached the limit on the number of moves, your program\nshould stop working. That is if you made a move, and one of the bees ended up\nat the same vertex with Nastya, your program must stop working, or if Nastya\nmade a move and ended up at the same vertex with one of the bees, you should\nnot make your move and the program should stop working. If the number of moves\nexceeds limit (\n    n\n, where \n    n\n is the number of vertices), you will get\nthe Wrong Answer verdict. Your solution may receive the verdict Idleness Limit\nExceeded if you don't output anything or forget to flush the output buffer. To\nflush the output buffer, you need to do the following immediately after\nprinting the query and the line end: fflush(stdout) or cout.flush() in C++;\nSystem.out.flush() in Java; flush(output) in Pascal; stdout.flush() in Python;\nfor other languages see documentation. In this problem interactor is adaptive.\nThis means that depending on all your previous moves, Nastya's behavior may\nchange. Hacks are not available for this problem. Examples Input 5 5 1 2 2 3 3\n4 4 5 5 1 4 5 Output 1 1 2 1 5 3 Input 8 9 1 2 2 3 3 4 4 5 5 1 5 6 6 7 7 8 8 4\n1 5 Output 7 3 3 6 2 2 5 3 1 Note Let Nastya be a green chip, and three\nnumbered red ones are three bees. In the first test, the movement of the\nheroes looks like this. After selecting the starting vertices. The first move\nafter the bees move. The first move after the Nastya's move. The first bee\ncaught Nastya. In the second test, the movement of the heroes looks like this.\nAfter selecting the starting vertices. The first move after the bees move. The\nfirst move after the Nastya's move. The second move after the bees move. The\nfirst bee caught Nastya.\n\n",
        "cf_contest_id": 1340,
        "cf_index": "E",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "graphs",
            "interactive",
            "probabilities"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "random 5 5\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 1\r\n",
                "1 5"
            ],
            [
                "random 8 9\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 1\r\n5 6\r\n6 7\r\n7 8\r\n8 4\r\n",
                "2 8"
            ]
        ],
        "private_cases": [
            [
                "smart 4 4\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n",
                "1 4"
            ],
            [
                "brevno 10 12\r\n4 5\r\n8 2\r\n10 7\r\n6 7\r\n2 1\r\n3 4\r\n1 5\r\n8 10\r\n3 6\r\n9 6\r\n9 8\r\n2 3\r\n",
                "0 10"
            ],
            [
                "random 10 12\r\n4 8\r\n10 7\r\n7 8\r\n2 5\r\n5 4\r\n10 9\r\n5 6\r\n8 9\r\n3 4\r\n7 6\r\n3 1\r\n2 1\r\n",
                "4 10"
            ],
            [
                "random 10 12\r\n2 1\r\n6 10\r\n4 5\r\n2 5\r\n10 9\r\n7 8\r\n6 4\r\n3 8\r\n1 3\r\n3 4\r\n9 7\r\n6 7\r\n",
                "4 10"
            ],
            [
                "smart 18 25\r\n2 13\r\n14 8\r\n10 16\r\n15 17\r\n11 6\r\n8 2\r\n1 8\r\n17 18\r\n12 15\r\n9 14\r\n3 5\r\n14 7\r\n6 13\r\n4 5\r\n1 9\r\n5 18\r\n1 18\r\n17 4\r\n7 13\r\n11 16\r\n3 9\r\n12 4\r\n12 11\r\n15 10\r\n16 7\r\n",
                "5 18"
            ],
            [
                "smart 18 25\r\n2 3\r\n13 16\r\n12 17\r\n5 17\r\n12 8\r\n8 6\r\n7 14\r\n8 18\r\n3 14\r\n7 4\r\n15 5\r\n10 11\r\n1 10\r\n12 15\r\n11 5\r\n6 2\r\n9 15\r\n9 13\r\n10 4\r\n1 7\r\n1 18\r\n3 18\r\n6 17\r\n4 16\r\n11 13\r\n",
                "5 18"
            ],
            [
                "smart 18 25\r\n8 3\r\n7 6\r\n13 9\r\n1 3\r\n2 18\r\n17 2\r\n4 15\r\n16 12\r\n11 13\r\n15 18\r\n5 4\r\n4 13\r\n7 18\r\n2 5\r\n5 11\r\n8 14\r\n17 6\r\n6 12\r\n10 7\r\n1 14\r\n11 14\r\n1 9\r\n12 8\r\n10 16\r\n16 3\r\n",
                "3 18"
            ],
            [
                "smart 17 23\r\n2 12\r\n1 7\r\n5 4\r\n13 9\r\n3 17\r\n16 5\r\n11 10\r\n11 8\r\n7 12\r\n16 1\r\n6 12\r\n2 17\r\n2 9\r\n6 15\r\n6 16\r\n14 3\r\n15 4\r\n14 11\r\n10 17\r\n3 13\r\n9 7\r\n8 4\r\n15 14\r\n",
                "4 17"
            ],
            [
                "smart 16 22\r\n5 8\r\n4 8\r\n14 7\r\n10 12\r\n1 5\r\n13 4\r\n2 10\r\n6 4\r\n6 2\r\n13 3\r\n11 14\r\n14 9\r\n9 15\r\n6 16\r\n12 9\r\n10 11\r\n1 15\r\n2 3\r\n15 7\r\n1 13\r\n5 7\r\n16 12\r\n",
                "2 16"
            ],
            [
                "smart 17 23\r\n1 10\r\n1 2\r\n16 14\r\n17 12\r\n10 8\r\n7 3\r\n5 7\r\n4 13\r\n7 8\r\n3 17\r\n12 5\r\n9 2\r\n17 11\r\n15 14\r\n1 15\r\n14 13\r\n16 11\r\n2 16\r\n5 6\r\n4 12\r\n8 9\r\n13 11\r\n9 6\r\n",
                "4 17"
            ],
            [
                "smart 16 22\r\n8 1\r\n3 12\r\n10 11\r\n7 9\r\n7 11\r\n13 6\r\n16 12\r\n6 15\r\n16 13\r\n6 1\r\n13 8\r\n12 7\r\n16 2\r\n3 14\r\n9 15\r\n2 5\r\n10 15\r\n9 4\r\n4 3\r\n10 1\r\n8 5\r\n14 2\r\n",
                "3 16"
            ]
        ]
    }
]