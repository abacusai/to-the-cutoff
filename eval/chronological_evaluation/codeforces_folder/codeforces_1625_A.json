[
    {
        "name": "Ancient Civilization",
        "description": "Martian scientists explore Ganymede, one of Jupiter's numerous moons.\nRecently, they have found ruins of an ancient civilization. The scientists\nbrought to Mars some tablets with writings in a language unknown to science.\nThey found out that the inhabitants of Ganymede used an alphabet consisting of\ntwo letters, and each word was exactly \n    \u2113\n letters long. So, the\nscientists decided to write each word of this language as an integer from\n\n    0\n to \n    2^\n    \u2113 - 1\n inclusively. The first letter of the alphabet\ncorresponds to zero bit in this integer, and the second letter corresponds to\none bit. The same word may have various forms in this language. Then, you need\nto restore the initial form. The process of doing it is described below.\nDenote the distance between two words as the amount of positions, in which\nthese words differ. For example, the distance between \n    1001_2\n and\n\n    1100_2\n (in binary) is equal to two, as these words have different\nletters in the second and the fourth positions, counting from left to right.\nFurther, denote the distance between words \n    x\n and \n    y\n as \n    d(x,\n    y)\n. Let the word have \n    n\n forms, the \n    i\n-th of which is described\nwith an integer \n    x_i\n. All the \n    x_i\n are not necessarily different, as\ntwo various forms of the word can be written the same. Consider some word\n\n    y\n. Then, closeness of the word \n    y\n is equal to the sum of distances\nto each of the word forms, i. e. the sum \n    d(x_i, y)\n over all \n    1 \n    \u2264 i\n    \n    \u2264 n\n. The initial form is the word \n    y\n with minimal possible\nnearness. You need to help the scientists and write the program which finds\nthe initial form of the word given all its known forms. Note that the initial\nform is not necessarily equal to any of the \n    n\n given forms. Input The\nfirst line contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the\nnumber of test cases. The following are descriptions of the test cases. The\nfirst line contains two integers \n    n\n and \n    \u2113\n (\n    1 \n    \u2264 n \n    \u2264\n    100\n, \n    1 \n    \u2264\n    \u2113\n    \u2264 30\n) \u2014 the amount of word forms, and the\nnumber of letters in one word. The second line contains \n    n\n integers\n\n    x_i\n (\n    0 \n    \u2264 x_i \n    \u2264 2^\n    \u2113 - 1\n) \u2014 word forms. The integers\nare not necessarily different. Output For each test, print a single integer,\nthe initial form of the word, i. e. such \n    y\n (\n    0 \n    \u2264 y \n    \u2264 2^\n    \u2113\n    - 1\n) that the sum \n    d(x_i, y)\n over all \n    1 \n    \u2264 i \n    \u2264 n\n is\nminimal possible. Note that \n    y\n can differ from all the integers\n\n    x_i\n. If there are multiple ways to restore the initial form, print any.\nExample Input 7 3 5 18 9 21 3 5 18 18 18 1 1 1 5 30 1 2 3 4 5 6 10 99 35 85 46\n78 55 2 1 0 1 8 8 5 16 42 15 83 65 78 42 Output 17 18 1 1 39 0 2 Note In the\nfirst test case, the words can be written as \n    x_1 = 10010_2\n, \n    x_2 =\n    01001_2\n and \n    x_3 = 10101_2\n in binary. Let \n    y = 10001_2\n. Then,\n\n    d(x_1, y) = 2\n (the difference is in the fourth and the fifth positions),\n\n    d(x_2, y) = 2\n (the difference is in the first and the second positions),\n\n    d(x_3, y) = 1\n (the difference is in the third position). So, the\ncloseness is \n    2 + 2 + 1 = 5\n. It can be shown that you cannot achieve\nsmaller closeness. In the second test case, all the forms are equal to\n\n    18\n (\n    10010_2\n in binary), so the initial form is also \n    18\n. It's\neasy to see that closeness is equal to zero in this case.\n\n",
        "cf_contest_id": 1625,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n3 5\r\n18 9 21\r\n3 5\r\n18 18 18\r\n1 1\r\n1\r\n5 30\r\n1 2 3 4 5\r\n6 10\r\n99 35 85 46 78 55\r\n2 1\r\n0 1\r\n8 8\r\n5 16 42 15 83 65 78 42\r\n",
                "17\r\n18\r\n1\r\n1\r\n39\r\n0\r\n2\r\n"
            ]
        ],
        "private_cases": []
    }
]