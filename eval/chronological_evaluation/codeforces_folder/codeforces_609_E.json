[
    {
        "name": "Minimum spanning tree for each edge",
        "description": "Connected undirected weighted graph without self-loops and multiple edges is\ngiven. Graph contains n vertices and m edges. For each edge (u, v) find the\nminimal possible weight of the spanning tree that contains the edge (u, v).\nThe weight of the spanning tree is the sum of weights of all edges included in\nspanning tree. Input First line contains two integers n and m (1 \u2264 n \u2264 2\u00b710^5,\nn - 1 \u2264 m \u2264 2\u00b710^5) \u2014 the number of vertices and edges in graph. Each of the\nnext m lines contains three integers ui, vi, wi (1 \u2264 ui, vi \u2264 n, ui \u2260 vi, 1 \u2264\nwi \u2264 10^9) \u2014 the endpoints of the i-th edge and its weight. Output Print m\nlines. i-th line should contain the minimal possible weight of the spanning\ntree that contains i-th edge. The edges are numbered from 1 to m in order of\ntheir appearing in input. Examples Input 5 7 1 2 3 1 3 1 1 4 5 2 3 2 2 5 3 3 4\n2 4 5 4 Output 9 8 11 8 8 8 9\n\n",
        "cf_contest_id": 609,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "dsu",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 7\r\n1 2 3\r\n1 3 1\r\n1 4 5\r\n2 3 2\r\n2 5 3\r\n3 4 2\r\n4 5 4\r\n",
                "9 8 11 8 8 8 9\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 0\r\n",
                "\r\n"
            ],
            [
                "2 1\r\n1 2 42\r\n",
                "42\r\n"
            ],
            [
                "3 3\r\n1 2 10\r\n2 3 20\r\n3 1 40\r\n",
                "30 30 50\r\n"
            ],
            [
                "4 6\r\n1 2 999999001\r\n1 3 999999003\r\n1 4 999999009\r\n2 3 999999027\r\n2 4 999999243\r\n3 4 999999729\r\n",
                "2999997013 2999997013 2999997013 2999997037 2999997247 2999997733\r\n"
            ],
            [
                "8 10\r\n2 5 4\r\n7 5 2\r\n7 3 28\r\n4 5 14\r\n3 2 15\r\n1 2 3\r\n6 2 5\r\n2 8 17\r\n4 6 2\r\n1 4 10\r\n",
                "48 48 61 57 48 48 48 48 48 53\r\n"
            ],
            [
                "8 10\r\n8 7 11\r\n3 5 23\r\n2 1 23\r\n7 2 13\r\n6 4 18\r\n1 4 20\r\n8 4 17\r\n2 8 8\r\n3 2 9\r\n5 6 29\r\n",
                "106 106 109 108 106 106 106 106 106 112\r\n"
            ],
            [
                "7 14\r\n2 4 25\r\n6 4 5\r\n5 6 3\r\n5 7 9\r\n6 1 17\r\n4 7 6\r\n5 4 25\r\n1 2 23\r\n2 3 15\r\n5 1 10\r\n7 6 21\r\n3 7 5\r\n5 3 4\r\n5 2 15\r\n",
                "52 42 42 46 49 43 62 50 42 42 58 42 42 42\r\n"
            ],
            [
                "7 10\r\n2 1 12\r\n3 1 10\r\n3 4 5\r\n6 4 6\r\n7 4 20\r\n5 4 17\r\n3 2 5\r\n7 5 8\r\n3 6 16\r\n2 5 21\r\n",
                "53 51 51 51 54 51 51 51 61 55\r\n"
            ],
            [
                "10 10\r\n9 4 16\r\n6 1 4\r\n5 4 4\r\n1 2 11\r\n8 2 22\r\n5 10 29\r\n7 5 24\r\n2 4 15\r\n1 3 7\r\n7 9 24\r\n",
                "132 132 132 132 132 132 132 132 132 132\r\n"
            ]
        ]
    }
]