[
    {
        "name": "Fountains",
        "description": "Arkady plays Gardenscapes a lot. Arkady wants to build two new fountains.\nThere are n available fountains, for each fountain its beauty and cost are\nknown. There are two types of money in the game: coins and diamonds, so each\nfountain cost can be either in coins or diamonds. No money changes between the\ntypes are allowed. Help Arkady to find two fountains with maximum total beauty\nso that he can buy both at the same time. Input The first line contains three\nintegers n, c and d (2 \u2264 n \u2264 100 000, 0 \u2264 c, d \u2264 100 000) \u2014 the number of\nfountains, the number of coins and diamonds Arkady has. The next n lines\ndescribe fountains. Each of these lines contain two integers bi and pi (1 \u2264\nbi, pi \u2264 100 000) \u2014 the beauty and the cost of the i-th fountain, and then a\nletter \"C\" or \"D\", describing in which type of money is the cost of fountain\ni: in coins or in diamonds, respectively. Output Print the maximum total\nbeauty of exactly two fountains Arkady can build. If he can't build two\nfountains, print 0. Examples Input 3 7 6 10 8 C 4 3 C 5 6 D Output 9 Input 2 4\n5 2 5 C 2 1 D Output 0 Input 3 10 10 5 5 C 5 5 C 10 11 D Output 10 Note In the\nfirst example Arkady should build the second fountain with beauty 4, which\ncosts 3 coins. The first fountain he can't build because he don't have enough\ncoins. Also Arkady should build the third fountain with beauty 5 which costs 6\ndiamonds. Thus the total beauty of built fountains is 9. In the second example\nthere are two fountains, but Arkady can't build both of them, because he needs\n5 coins for the first fountain, and Arkady has only 4 coins.\n\n",
        "cf_contest_id": 799,
        "cf_index": "C",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 7 6\r\n10 8 C\r\n4 3 C\r\n5 6 D\r\n",
                "9\r\n"
            ],
            [
                "2 4 5\r\n2 5 C\r\n2 1 D\r\n",
                "0\r\n"
            ],
            [
                "3 10 10\r\n5 5 C\r\n5 5 C\r\n10 11 D\r\n",
                "10\r\n"
            ]
        ],
        "private_cases": [
            [
                "6 68 40\r\n1 18 D\r\n6 16 D\r\n11 16 D\r\n7 23 D\r\n16 30 D\r\n2 20 D\r\n",
                "18\r\n"
            ],
            [
                "6 4 9\r\n6 6 D\r\n1 4 D\r\n6 7 C\r\n7 6 D\r\n5 7 D\r\n2 5 D\r\n",
                "3\r\n"
            ],
            [
                "52 38 22\r\n9 25 D\r\n28 29 C\r\n29 25 D\r\n4 28 D\r\n23 29 D\r\n24 25 D\r\n17 12 C\r\n11 19 C\r\n13 14 C\r\n12 15 D\r\n7 25 C\r\n2 25 C\r\n6 17 C\r\n2 20 C\r\n15 23 D\r\n8 21 C\r\n13 15 D\r\n29 15 C\r\n25 20 D\r\n22 20 C\r\n2 13 D\r\n13 22 D\r\n27 20 C\r\n1 21 D\r\n22 17 C\r\n14 21 D\r\n4 25 D\r\n5 23 C\r\n9 21 C\r\n2 20 C\r\n14 18 C\r\n29 24 C\r\n14 29 D\r\n9 27 C\r\n23 21 D\r\n18 26 D\r\n7 23 C\r\n13 25 C\r\n21 26 C\r\n30 24 C\r\n21 24 C\r\n28 22 C\r\n8 29 C\r\n3 12 C\r\n21 22 D\r\n22 26 C\r\n13 17 D\r\n12 12 D\r\n11 11 C\r\n18 24 D\r\n7 13 D\r\n3 11 C\r\n",
                "57\r\n"
            ],
            [
                "6 68 40\r\n6 16 D\r\n11 16 D\r\n1 18 D\r\n2 20 D\r\n7 23 D\r\n16 30 D\r\n",
                "18\r\n"
            ],
            [
                "2 1 1\r\n1 1 C\r\n1 1 D\r\n",
                "2\r\n"
            ],
            [
                "2 100000 100000\r\n100000 100000 C\r\n100000 100000 D\r\n",
                "200000\r\n"
            ],
            [
                "4 15 9\r\n5 10 C\r\n5 10 D\r\n6 10 D\r\n7 5 C\r\n",
                "12\r\n"
            ]
        ]
    }
]