[
    {
        "name": "Santa Clauses and a Soccer Championship",
        "description": "The country Treeland consists of n cities connected with n - 1 bidirectional\nroads in such a way that it's possible to reach every city starting from any\nother city using these roads. There will be a soccer championship next year,\nand all participants are Santa Clauses. There are exactly 2k teams from 2k\ndifferent cities. During the first stage all teams are divided into k pairs.\nTeams of each pair play two games against each other: one in the hometown of\nthe first team, and the other in the hometown of the other team. Thus, each of\nthe 2k cities holds exactly one soccer game. However, it's not decided yet how\nto divide teams into pairs. It's also necessary to choose several cities to\nsettle players in. Organizers tend to use as few cities as possible to settle\nthe teams. Nobody wants to travel too much during the championship, so if a\nteam plays in cities u and v, it wants to live in one of the cities on the\nshortest path between u and v (maybe, in u or in v). There is another\nconstraint also: the teams from one pair must live in the same city.\nSummarizing, the organizers want to divide 2k teams into pairs and settle them\nin the minimum possible number of cities m in such a way that teams from each\npair live in the same city which lies between their hometowns. Input The first\nline of input contains two integers n and k (2 \u2264 n \u2264 2\u00b710^5, 2 \u2264 2k \u2264 n) \u2014 the\nnumber of cities in Treeland and the number of pairs of teams, respectively.\nThe following n - 1 lines describe roads in Treeland: each of these lines\ncontains two integers a and b (1 \u2264 a, b \u2264 n, a \u2260 b) which mean that there is a\nroad between cities a and b. It's guaranteed that there is a path between any\ntwo cities. The last line contains 2k distinct integers c1, c2, ..., c2k (1 \u2264\nci \u2264 n), where ci is the hometown of the i-th team. All these numbers are\ndistinct. Output The first line of output must contain the only positive\ninteger m which should be equal to the minimum possible number of cities the\nteams can be settled in. The second line should contain m distinct numbers d1,\nd2, ..., dm (1 \u2264 di \u2264 n) denoting the indices of the cities where the teams\nshould be settled. The k lines should follow, the j-th of them should contain\n3 integers uj, vj and xj, where uj and vj are the hometowns of the j-th pair's\nteams, and xj is the city they should live in during the tournament. Each of\nthe numbers c1, c2, ..., c2k should occur in all uj's and vj's exactly once.\nEach of the numbers xj should belong to d1, d2, ..., dm. If there are\nseveral possible answers, print any of them. Example Input 6 2 1 2 1 3 2 4 2 5\n3 6 2 5 4 6 Output 1 2 5 4 2 6 2 2 Note In the first test the orginizers can\nsettle all the teams in the city number 2. The way to divide all teams into\npairs is not important, since all requirements are satisfied anyway, because\nthe city 2 lies on the shortest path between every two cities from 2, 4, 5,\n6.\n\n",
        "cf_contest_id": 748,
        "cf_index": "F",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 2\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n2 5 4 6\r\n",
                "1\r\n2\r\n6 5 2\r\n2 4 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1\r\n1 2\r\n1 2\r\n",
                "1\r\n1\r\n1 2 1\r\n"
            ],
            [
                "6 2\r\n1 6\r\n6 2\r\n6 5\r\n5 3\r\n5 4\r\n1 3 4 2\r\n",
                "1\r\n5\r\n1 3 5\r\n4 2 5\r\n"
            ],
            [
                "10 1\r\n4 2\r\n9 2\r\n1 4\r\n4 10\r\n2 3\r\n7 10\r\n9 6\r\n4 5\r\n8 2\r\n2 9\r\n",
                "1\r\n2\r\n2 9 2\r\n"
            ],
            [
                "10 2\r\n9 2\r\n10 8\r\n2 3\r\n1 3\r\n2 7\r\n10 7\r\n9 4\r\n2 5\r\n6 5\r\n7 8 3 6\r\n",
                "1\r\n7\r\n3 7 7\r\n6 8 7\r\n"
            ],
            [
                "10 3\r\n6 7\r\n2 1\r\n9 5\r\n1 5\r\n10 4\r\n8 3\r\n6 5\r\n10 6\r\n3 6\r\n10 5 1 3 7 4\r\n",
                "1\r\n6\r\n1 10 6\r\n5 4 6\r\n3 7 6\r\n"
            ],
            [
                "8 3\r\n1 3\r\n3 2\r\n3 4\r\n4 5\r\n5 6\r\n4 7\r\n7 8\r\n4 6 8 1 3 2\r\n",
                "1\r\n4\r\n1 8 4\r\n3 6 4\r\n4 2 4\r\n"
            ],
            [
                "10 3\r\n3 4\r\n1 3\r\n5 2\r\n2 6\r\n10 1\r\n3 2\r\n2 9\r\n9 8\r\n7 5\r\n10 9 4 7 5 3\r\n",
                "1\r\n2\r\n10 5 2\r\n3 7 2\r\n9 4 2\r\n"
            ],
            [
                "10 4\r\n8 6\r\n1 7\r\n6 1\r\n5 1\r\n10 3\r\n9 6\r\n7 2\r\n6 3\r\n4 9\r\n6 2 1 5 8 3 9 4\r\n",
                "1\r\n6\r\n1 9 6\r\n5 4 6\r\n6 8 6\r\n3 2 6\r\n"
            ],
            [
                "10 5\r\n2 6\r\n2 1\r\n7 2\r\n4 6\r\n7 10\r\n4 3\r\n3 5\r\n9 6\r\n8 7\r\n10 9 2 7 8 5 6 1 3 4\r\n",
                "1\r\n6\r\n1 6 6\r\n2 9 6\r\n7 4 6\r\n8 3 6\r\n10 5 6\r\n"
            ],
            [
                "10 3\r\n5 9\r\n5 6\r\n3 7\r\n8 7\r\n4 7\r\n1 2\r\n6 7\r\n10 6\r\n2 6\r\n2 5 8 7 9 10\r\n",
                "1\r\n6\r\n2 8 6\r\n10 5 6\r\n7 9 6\r\n"
            ],
            [
                "10 3\r\n4 2\r\n8 5\r\n8 9\r\n5 6\r\n10 7\r\n3 7\r\n1 7\r\n9 2\r\n2 7\r\n1 5 9 7 6 2\r\n",
                "1\r\n9\r\n1 9 9\r\n7 5 9\r\n2 6 9\r\n"
            ],
            [
                "7 2\r\n7 5\r\n2 6\r\n3 6\r\n4 6\r\n7 2\r\n1 7\r\n4 7 1 6\r\n",
                "1\r\n6\r\n1 6 6\r\n7 4 6\r\n"
            ],
            [
                "10 4\r\n2 6\r\n10 7\r\n2 10\r\n2 8\r\n9 5\r\n1 5\r\n4 5\r\n6 3\r\n5 3\r\n6 8 10 9 7 4 1 3\r\n",
                "1\r\n6\r\n1 10 6\r\n3 7 6\r\n6 4 6\r\n8 9 6\r\n"
            ],
            [
                "7 2\r\n1 7\r\n4 5\r\n2 3\r\n6 3\r\n4 1\r\n3 1\r\n5 4 7 3\r\n",
                "1\r\n4\r\n3 5 4\r\n4 7 4\r\n"
            ],
            [
                "10 4\r\n1 10\r\n5 1\r\n10 3\r\n4 9\r\n9 2\r\n2 8\r\n4 6\r\n5 7\r\n8 7\r\n9 3 8 2 5 10 1 6\r\n",
                "1\r\n8\r\n1 9 8\r\n5 6 8\r\n8 10 8\r\n2 3 8\r\n"
            ],
            [
                "10 4\r\n10 3\r\n10 8\r\n9 3\r\n2 5\r\n7 2\r\n1 6\r\n9 4\r\n4 5\r\n4 6\r\n2 4 9 3 1 5 8 10\r\n",
                "1\r\n9\r\n1 9 9\r\n4 3 9\r\n5 10 9\r\n2 8 9\r\n"
            ],
            [
                "10 2\r\n2 6\r\n1 3\r\n3 8\r\n10 9\r\n6 7\r\n7 3\r\n7 4\r\n10 7\r\n7 5\r\n6 2 7 1\r\n",
                "1\r\n6\r\n1 6 6\r\n7 2 6\r\n"
            ],
            [
                "7 2\r\n6 1\r\n6 4\r\n6 5\r\n6 7\r\n6 3\r\n2 6\r\n4 2 3 6\r\n",
                "1\r\n6\r\n6 3 6\r\n2 4 6\r\n"
            ]
        ]
    }
]