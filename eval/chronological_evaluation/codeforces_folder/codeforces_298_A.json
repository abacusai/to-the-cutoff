[
    {
        "name": "Snow Footprints",
        "description": "There is a straight snowy road, divided into n blocks. The blocks are numbered\nfrom 1 to n from left to right. If one moves from the i-th block to the (i +\n1)-th block, he will leave a right footprint on the i-th block. Similarly, if\none moves from the i-th block to the (i - 1)-th block, he will leave a left\nfootprint on the i-th block. If there already is a footprint on the i-th\nblock, the new footprint will cover the old one. At the beginning, there were\nno footprints. Then polar bear Alice starts from the s-th block, makes a\nsequence of moves and ends in the t-th block. It is known that Alice never\nmoves outside of the road. You are given the description of Alice's\nfootprints. Your task is to find a pair of possible values of s, t by looking\nat the footprints. Input The first line of the input contains integer n (3 \u2264 n\n\u2264 1000). The second line contains the description of the road \u2014 the string\nthat consists of n characters. Each character will be either \".\" (a block\nwithout footprint), or \"L\" (a block with a left footprint), \"R\" (a block with\na right footprint). It's guaranteed that the given string contains at least\none character not equal to \".\". Also, the first and the last character will\nalways be \".\". It's guaranteed that a solution exists. Output Print two space-\nseparated integers \u2014 the values of s and t. If there are several possible\nsolutions you can print any of them. Examples Input 9 ..RRLL... Output 3 4\nInput 11 .RRRLLLLL.. Output 7 5 Note The first test sample is the one in the\npicture.\n\n",
        "cf_contest_id": 298,
        "cf_index": "A",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "9\r\n..RRLL...\r\n",
                "4 5\r\n"
            ],
            [
                "11\r\n.RRRLLLLL..\r\n",
                "4 5\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n.RL.\r\n",
                "2 3\r\n"
            ],
            [
                "3\r\n.L.\r\n",
                "2 1\r\n"
            ],
            [
                "3\r\n.R.\r\n",
                "2 3\r\n"
            ]
        ]
    }
]