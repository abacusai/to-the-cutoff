[
    {
        "name": "Rearrange",
        "description": "Koa the Koala has a matrix \n    A\n of \n    n\n rows and \n    m\n columns.\nElements of this matrix are distinct integers from \n    1\n to \n    n \n    \u00b7\n    m\n (each number from \n    1\n to \n    n \n    \u00b7 m\n appears exactly once in\nthe matrix). For any matrix \n    M\n of \n    n\n rows and \n    m\n columns let's\ndefine the following: The \n    i\n-th row of \n    M\n is defined as \n    R_i(M) =\n    [ M_i1, M_i2, \n    \u2026, M_im ]\n for all \n    i\n (\n    1 \n    \u2264 i \n    \u2264\n    n\n). The \n    j\n-th column of \n    M\n is defined as \n    C_j(M) = [ M_1j,\n    M_2j, \n    \u2026, M_nj ]\n for all \n    j\n (\n    1 \n    \u2264 j \n    \u2264 m\n). Koa\ndefines \n    S(A) = (X, Y)\n as the spectrum of \n    A\n, where \n    X\n is the\nset of the maximum values in rows of \n    A\n and \n    Y\n is the set of the\nmaximum values in columns of \n    A\n. More formally: \n    X = \n    \n    \n    max(R_1(A)), \n    max(R_2(A)), \n    \u2026, \n    max(R_n(A))\n \n    Y = \n    \n    \n    max(C_1(A)), \n    max(C_2(A)), \n    \u2026, \n    max(C_m(A))\nKoa asks you\nto find some matrix \n    A'\n of \n    n\n rows and \n    m\n columns, such that\neach number from \n    1\n to \n    n \n    \u00b7 m\n appears exactly once in the\nmatrix, and the following conditions hold: \n    S(A') = S(A)\n \n    R_i(A')\n is\nbitonic for all \n    i\n (\n    1 \n    \u2264 i \n    \u2264 n\n) \n    C_j(A')\n is bitonic for\nall \n    j\n (\n    1 \n    \u2264 j \n    \u2264 m\n) An array \n    t\n (\n    t_1, t_2, \n    \u2026,\n    t_k\n) is called bitonic if it first increases and then decreases. More\nformally: \n    t\n is bitonic if there exists some position \n    p\n (\n    1 \n    \u2264\n    p \n    \u2264 k\n) such that: \n    t_1 < t_2 < \n    \u2026 < t_p > t_p+1 > \n    \u2026 >\n    t_k\n. Help Koa to find such matrix or to determine that it doesn't exist.\nInput The first line of the input contains two integers \n    n\n and \n    m\n\n(\n    1 \n    \u2264 n, m \n    \u2264 250\n) \u2014 the number of rows and columns of \n    A\n.\nEach of the ollowing \n    n\n lines contains \n    m\n integers. The \n    j\n-th\ninteger in the \n    i\n-th line denotes element \n    A_ij\n (\n    1 \n    \u2264 A_ij\n    \u2264 n \n    \u00b7 m\n) of matrix \n    A\n. It is guaranteed that every number\nfrom \n    1\n to \n    n \n    \u00b7 m\n appears exactly once among elements of the\nmatrix. Output If such matrix doesn't exist, print \n    -1\n on a single line.\nOtherwise, the output must consist of \n    n\n lines, each one consisting of\n\n    m\n space separated integers \u2014 a description of \n    A'\n. The \n    j\n-th\nnumber in the \n    i\n-th line represents the element \n    A'_ij\n. Every\ninteger from \n    1\n to \n    n \n    \u00b7 m\n should appear exactly once in\n\n    A'\n, every row and column in \n    A'\n must be bitonic and \n    S(A) =\n    S(A')\n must hold. If there are many answers print any. Examples Input 3 3 3\n5 6 1 7 9 4 8 2 Output 9 5 1 7 8 2 3 6 4 Input 2 2 4 1 3 2 Output 4 1 3 2\nInput 3 4 12 10 8 6 3 4 5 7 2 11 9 1 Output 12 8 6 1 10 11 9 2 3 4 5 7 Note\nLet's analyze the first sample: For matrix \n    A\n we have: Rows: \n    R_1(A) =\n    [3, 5, 6]; \n    max(R_1(A)) = 6\n \n    R_2(A) = [1, 7, 9]; \n    max(R_2(A)) = 9\n\n\n    R_3(A) = [4, 8, 2]; \n    max(R_3(A)) = 8\n Columns: \n    C_1(A) = [3, 1, 4];\n    \n    max(C_1(A)) = 4\n \n    C_2(A) = [5, 7, 8]; \n    max(C_2(A)) = 8\n \n    C_3(A) =\n    [6, 9, 2]; \n    max(C_3(A)) = 9\n \n    X = \n    \n    \n    max(R_1(A)), \n    max(R_2(A)),\n    \n    max(R_3(A)) \n    \n     = \n    \n     6, 9, 8\n \n    Y = \n    \n    \n    max(C_1(A)),\n    \n    max(C_2(A)), \n    max(C_3(A)) \n    \n     = \n    \n     4, 8, 9\n So \n    S(A) = (X,\n    Y) = (\n    \n     6, 9, 8 \n    \n    , \n    \n     4, 8, 9 \n    \n    )\n For matrix \n    A'\n we\nhave: Rows: \n    R_1(A') = [9, 5, 1]; \n    max(R_1(A')) = 9\n \n    R_2(A') = [7, 8,\n    2]; \n    max(R_2(A')) = 8\n \n    R_3(A') = [3, 6, 4]; \n    max(R_3(A')) = 6\n\nColumns: \n    C_1(A') = [9, 7, 3]; \n    max(C_1(A')) = 9\n \n    C_2(A') = [5, 8,\n    6]; \n    max(C_2(A')) = 8\n \n    C_3(A') = [1, 2, 4]; \n    max(C_3(A')) = 4\n Note\nthat each of this arrays are bitonic. \n    X = \n    \n    \n    max(R_1(A')),\n    \n    max(R_2(A')), \n    max(R_3(A')) \n    \n     = \n    \n     9, 8, 6\n \n    Y = \n    \n    \n    max(C_1(A')), \n    max(C_2(A')), \n    max(C_3(A')) \n    \n     = \n    \n     9, 8, 4\n So \n    S(A') = (X, Y) = (\n    \n     9, 8, 6 \n    \n    , \n    \n     9, 8, 4 \n    \n    )\n\n\n",
        "cf_contest_id": 1383,
        "cf_index": "D",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "graphs",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\n3 5 6\r\n1 7 9\r\n4 8 2\r\n",
                "9 5 1\r\n7 8 2\r\n3 6 4\r\n"
            ],
            [
                "2 2\r\n4 1\r\n3 2\r\n",
                "4 1\r\n3 2\r\n"
            ],
            [
                "3 4\r\n12 10 8 6\r\n3 4 5 7\r\n2 11 9 1\r\n",
                "12 8 6 1\r\n10 11 9 2\r\n3 4 5 7\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 8\r\n14 20 36 25 31 29 11 24\r\n16 2 27 1 33 13 35 38\r\n12 8 37 30 10 7 32 19\r\n40 18 26 3 17 23 22 9\r\n6 15 34 21 39 5 4 28\r\n",
                "40 33 27 21 13 9 5 1\r\n34 39 28 22 14 10 6 2\r\n31 32 38 23 15 11 7 3\r\n24 25 26 37 16 12 8 4\r\n17 18 19 36 35 30 29 20\r\n"
            ],
            [
                "9 14\r\n103 120 6 12 5 68 122 22 33 3 121 105 53 54\r\n63 34 99 77 20 66 24 94 51 65 16 25 125 31\r\n49 56 104 57 119 118 72 28 23 85 9 48 60 71\r\n82 47 43 110 7 115 41 18 126 100 79 102 109 13\r\n90 80 46 44 45 108 61 40 101 107 21 62 74 11\r\n91 124 26 87 38 88 81 75 59 36 67 78 17 106\r\n92 19 116 113 117 10 93 64 30 50 42 2 8 114\r\n83 111 4 73 14 95 27 32 58 86 15 96 84 35\r\n98 97 39 112 29 37 1 52 89 70 76 55 123 69\r\n",
                "126 115 106 95 90 80 75 63 57 51 25 17 9 1\r\n120 125 109 96 91 81 76 64 58 52 26 18 10 2\r\n110 112 124 97 92 82 77 65 59 53 27 19 11 3\r\n102 104 123 98 93 83 78 66 60 54 28 20 12 4\r\n99 100 101 122 121 84 79 67 61 55 29 21 13 5\r\n85 86 87 88 89 119 118 68 62 56 30 22 14 6\r\n69 70 71 72 73 74 117 116 114 113 31 23 15 7\r\n42 43 44 45 46 47 48 49 50 111 32 24 16 8\r\n33 34 35 36 37 38 39 40 41 108 107 105 103 94\r\n"
            ],
            [
                "1 1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "11 12\r\n18 11 13 33 2 122 131 91 95 103 117 100\r\n108 49 27 128 24 86 74 83 56 89 61 75\r\n124 120 62 78 67 35 125 39 111 37 68 69\r\n57 42 98 80 52 123 32 121 106 16 90 31\r\n30 65 96 38 73 36 81 63 53 77 28 6\r\n9 79 23 26 1 87 92 88 54 84 109 55\r\n12 114 113 64 21 59 4 66 118 110 5 48\r\n19 115 119 15 47 51 29 44 82 76 102 8\r\n97 10 7 112 99 132 94 72 126 130 129 60\r\n46 20 17 70 50 93 58 101 34 43 22 14\r\n104 41 71 105 116 40 127 85 107 3 25 45\r\n",
                "132 117 115 114 107 98 88 77 72 57 41 12\r\n122 131 130 129 108 99 89 78 73 58 42 13\r\n110 111 112 113 128 102 90 79 74 59 43 14\r\n103 104 105 106 127 126 91 80 75 60 44 15\r\n92 93 94 95 97 125 124 81 76 61 45 16\r\n82 83 84 85 86 87 123 121 120 62 46 17\r\n63 64 65 66 67 68 69 70 71 119 47 18\r\n48 49 50 51 52 53 54 55 56 118 116 19\r\n31 32 33 34 35 36 37 38 39 40 109 20\r\n21 22 23 24 25 26 27 28 29 30 101 100\r\n1 2 3 4 5 6 7 8 9 10 11 96\r\n"
            ],
            [
                "10 10\r\n66 79 1 37 45 57 30 94 40 93\r\n52 62 83 82 12 88 32 59 34 47\r\n75 8 64 41 78 60 29 86 96 68\r\n42 89 58 76 24 100 92 3 14 35\r\n23 39 49 43 10 28 19 48 15 51\r\n55 36 85 26 5 4 16 11 33 7\r\n98 27 18 87 65 72 38 70 69 2\r\n53 22 44 71 97 6 80 61 13 74\r\n31 95 56 63 54 91 21 99 73 84\r\n81 46 25 67 17 9 50 90 20 77\r\n",
                "100 89 82 76 68 64 54 48 27 10\r\n91 99 83 77 69 65 55 49 28 11\r\n84 86 98 78 70 66 56 50 29 12\r\n79 80 81 97 71 67 57 52 30 13\r\n72 73 74 75 96 95 58 53 31 14\r\n59 60 61 62 63 94 93 92 32 15\r\n41 42 43 44 45 46 47 90 33 16\r\n34 35 36 37 38 39 40 88 87 17\r\n18 19 20 21 22 23 24 25 26 85\r\n1 2 3 4 5 6 7 8 9 51\r\n"
            ]
        ]
    }
]