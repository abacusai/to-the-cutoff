[
    {
        "name": "Get Ready for the Battle",
        "description": "Recently Evlampy installed one interesting computer game, one of aspects of\nwhich is to split army into several groups and then fight with enemy's groups.\nLet us consider a simplified version of the battle. In the nearest battle\nEvlampy should fight an enemy army that consists of \n    m\n groups, the\n\n    i\n-th of which has \n    hp_i\n health points. Evlampy's army consists of\n\n    n\n equal soldiers. Before each battle he should split his army in exactly\n\n    m\n groups (possibly, empty) so that the total size of the groups is\n\n    n\n. The battle is played step-by-step. On each step each of Evlampy's\ngroups attacks exactly one enemy group. Thus, each step is described with an\narray of \n    m\n integers \n    a_1, a_2, \n    \u2026, a_m\n, meaning that the\n\n    i\n-th Evlampy's group attacks the \n    a_i\n-th enemy group. Different\ngroups can attack same group, on each step the array \n    a\n is chosen\nindependently. After each step the health points of each enemy group decreases\nby the total number of soldiers in Evlampy's groups that attacked this enemy\ngroup at this step. Enemy group is destroyed once its health points are zero\nor negative. Evlampy's soldiers do not lose health. An example of a step. The\nnumbers in green circles represent the number of soldiers in Evlampy's groups,\nthe arrows represent attacks, the numbers in red circles represent health\npoints of enemy groups, the blue numbers represent how much the health points\nwill decrease after the step. Evlampy understands that the upcoming battle\nwill take the whole night. He became sad because this way he won't have enough\ntime to finish his homework. Now Evlampy wants you to write a program that\nwill help him win in the smallest possible number of steps. Can you help him?\nIn other words, find the smallest number of steps needed to destroy all enemy\ngroups and show a possible way of doing this. Find the requires splitting of\nthe army into \n    m\n groups and the arrays \n    a\n for each step. Input The\nfirst line contains two integers \n    n\n and \n    m\n (\n    1 \n    \u2264 m \n    \u2264 n\n    \n    \u2264 10^6\n) \u2014 the number of soldiers in Evlampy's army and the number of\ngroups in enemy army. \n    m\n is also equal to the maximum possible number of\ngroups Evlampy can split the army to. The second line contains \n    m\n\nintegers \n    hp_1, hp_2, \n    \u2026, hp_m\n (\n    1 \n    \u2264 hp_i \n    \u2264 10^6\n)\n\u2014 the health points of each of the enemy groups. It is guaranteed that the sum\nof \n    hp_i\n does not exceed \n    10^6\n. Output Print a single integer\n\n    t\n \u2014 the minimum possible number of steps needed to win the battle. After\nthat print \n    m\n integers \n    s_1, s_2, \n    \u2026, s_m\n (\n    s_i \n    \u2265 0\n,\n\n    s_1 + s_2 + \n    \u2026 + s_m = n\n), meaning that the \n    i\n-th group of\nEvlampy's army should contain \n    s_i\n soldiers. In each of the next \n    t\n\nlines print \n    m\n integers \n    a_1, a_2, \n    \u2026, a_m\n (\n    1 \n    \u2264 a_i\n    \n    \u2264 m\n) \u2014 the description of one step. The integers mean that on the\ncorresponding step the \n    i\n-th Evlampy's group should attack the\n\n    a_i\n-th enemy group. It is allowed to attack an already destroyed group.\nExamples Input 13 7 6 4 3 7 2 1 5 Output 3 0 1 2 3 1 2 4 2 6 2 4 4 2 4 3 1 7 1\n7 7 1 3 1 5 3 7 5 1 Input 6 5 3 3 3 3 3 Output 3 3 3 0 0 0 1 2 3 4 5 3 4 5 5 5\n5 5 5 5 5 Input 7 4 1 5 9 2 Output 3 1 2 4 0 1 4 2 3 2 3 3 3 3 3 3 3 Note The\nfirst example is shown below.\n\n",
        "cf_contest_id": 1119,
        "cf_index": "G",
        "cf_rating": 3100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "13 7\r\n6 4 3 7 2 1 5\r\n",
                "3\r\n0 6 1 2 1 0 3\r\n1 1 2 2 2 3 3\r\n4 4 4 5 6 7 7\r\n7 7 7 7 7 7 7\r\n"
            ],
            [
                "6 5\r\n3 3 3 3 3\r\n",
                "3\r\n0 0 3 0 3\r\n1 1 1 2 2\r\n3 3 3 4 4\r\n5 5 5 5 5\r\n"
            ],
            [
                "7 4\r\n1 5 9 2\r\n",
                "3\r\n1 0 5 1\r\n1 2 2 3\r\n3 3 3 3\r\n3 4 4 4\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 10\r\n10 19 13 7 4 13 16 4 3 11\r\n",
                "10\r\n0 2 0 1 3 0 3 0 0 1\r\n1 1 1 1 1 1 1 1 1 1\r\n2 2 2 2 2 2 2 2 2 2\r\n2 2 2 2 2 2 2 3 3 3\r\n3 3 3 3 3 3 3 3 3 3\r\n3 3 4 4 4 4 4 5 5 5\r\n5 5 5 5 6 6 6 6 6 6\r\n6 6 6 6 6 7 7 7 7 7\r\n7 7 7 7 7 7 7 7 7 7\r\n7 7 8 8 8 9 9 10 10 10\r\n10 10 10 10 10 10 10 10 10 10\r\n"
            ],
            [
                "32 12\r\n4 1 1 1 1 1 1 1 2 1 1 5\r\n",
                "1\r\n4 1 1 1 1 1 1 1 2 1 1 17\r\n1 2 3 4 5 6 7 8 9 10 11 12\r\n"
            ],
            [
                "1 1\r\n1\r\n",
                "1\r\n1\r\n1\r\n"
            ],
            [
                "1000000 1\r\n1000000\r\n",
                "1\r\n1000000\r\n1\r\n"
            ],
            [
                "50 40\r\n5 2 1 2 1 8 2 1 1 1 3 3 4 5 3 1 3 8 2 5 6 1 3 7 3 7 2 2 2 4 2 1 3 1 4 1 1 1 5 6\r\n",
                "3\r\n0 1 3 0 1 0 1 1 1 1 1 0 1 0 0 1 5 0 1 1 2 0 1 1 1 3 1 2 1 3 4 1 1 2 0 1 1 2 2 2\r\n1 1 1 1 1 2 2 2 3 4 4 5 5 6 6 6 6 6 6 6 7 8 8 9 10 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18\r\n18 18 18 19 19 19 19 20 20 20 20 20 20 21 21 21 21 22 22 23 23 24 24 24 24 24 24 25 25 26 26 27 27 28 29 29 29 30 30 31\r\n32 32 33 34 34 35 35 35 35 35 36 37 37 38 38 38 39 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40\r\n"
            ],
            [
                "1000000 2\r\n1 99\r\n",
                "1\r\n1 999999\r\n1 2\r\n"
            ],
            [
                "1000000 5\r\n3 1 1 1 1\r\n",
                "1\r\n3 1 1 1 999994\r\n1 2 3 4 5\r\n"
            ],
            [
                "1000000 1\r\n1\r\n",
                "1\r\n1000000\r\n1\r\n"
            ]
        ]
    }
]