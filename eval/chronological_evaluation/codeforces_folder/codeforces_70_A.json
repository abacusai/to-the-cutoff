[
    {
        "name": "Cookies",
        "description": "Fangy collects cookies. Once he decided to take a box and put cookies into it\nin some way. If we take a square k \u00d7 k in size, divided into blocks 1 \u00d7 1 in\nsize and paint there the main diagonal together with cells, which lie above\nit, then the painted area will be equal to the area occupied by one cookie k\nin size. Fangy also has a box with a square base 2^n \u00d7 2^n, divided into\nblocks 1 \u00d7 1 in size. In a box the cookies should not overlap, and they should\nnot be turned over or rotated. See cookies of sizes 2 and 4 respectively on\nthe figure: To stack the cookies the little walrus uses the following\nalgorithm. He takes out of the repository the largest cookie which can fit in\nsome place in the box and puts it there. Everything could be perfect but alas,\nin the repository the little walrus has infinitely many cookies of size 2 and\nlarger, and there are no cookies of size 1, therefore, empty cells will remain\nin the box. Fangy wants to know how many empty cells will be left in the end.\nInput The first line contains a single integer n (0 \u2264 n \u2264 1000). Output Print\nthe single number, equal to the number of empty cells in the box. The answer\nshould be printed modulo 10^6 + 3. Examples Input 3 Output 9 Note If the box\npossesses the base of 2^3 \u00d7 2^3 (as in the example), then the cookies will be\nput there in the following manner:\n\n",
        "cf_contest_id": 70,
        "cf_index": "A",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n",
                "9\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n",
                "1\r\n"
            ],
            [
                "2\r\n",
                "3\r\n"
            ],
            [
                "4\r\n",
                "27\r\n"
            ],
            [
                "6\r\n",
                "243\r\n"
            ],
            [
                "11\r\n",
                "59049\r\n"
            ],
            [
                "14\r\n",
                "594320\r\n"
            ],
            [
                "15\r\n",
                "782957\r\n"
            ],
            [
                "7\r\n",
                "729\r\n"
            ],
            [
                "0\r\n",
                "1\r\n"
            ],
            [
                "1000\r\n",
                "691074\r\n"
            ],
            [
                "657\r\n",
                "874011\r\n"
            ],
            [
                "561\r\n",
                "842553\r\n"
            ],
            [
                "823\r\n",
                "858672\r\n"
            ],
            [
                "850\r\n",
                "557186\r\n"
            ],
            [
                "298\r\n",
                "999535\r\n"
            ],
            [
                "262\r\n",
                "946384\r\n"
            ],
            [
                "910\r\n",
                "678945\r\n"
            ],
            [
                "617\r\n",
                "247876\r\n"
            ],
            [
                "857\r\n",
                "562128\r\n"
            ],
            [
                "69\r\n",
                "327984\r\n"
            ],
            [
                "589\r\n",
                "889192\r\n"
            ],
            [
                "928\r\n",
                "794863\r\n"
            ],
            [
                "696\r\n",
                "695035\r\n"
            ],
            [
                "226\r\n",
                "376094\r\n"
            ]
        ]
    }
]