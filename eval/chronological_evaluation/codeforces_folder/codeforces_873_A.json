[
    {
        "name": "Chores",
        "description": "Luba has to do n chores today. i-th chore takes ai units of time to complete.\nIt is guaranteed that for every the condition ai \u2265 ai - 1 is met, so the\nsequence is sorted. Also Luba can work really hard on some chores. She can\nchoose not more than k any chores and do each of them in x units of time\ninstead of ai (). Luba is very responsible, so she has to do all n chores, and\nnow she wants to know the minimum time she needs to do everything. Luba cannot\ndo two chores simultaneously. Input The first line contains three integers n,\nk, x (1 \u2264 k \u2264 n \u2264 100, 1 \u2264 x \u2264 99) \u2014 the number of chores Luba has to do, the\nnumber of chores she can do in x units of time, and the number x itself. The\nsecond line contains n integer numbers ai (2 \u2264 ai \u2264 100) \u2014 the time Luba has\nto spend to do i-th chore. It is guaranteed that , and for each ai \u2265 ai - 1.\nOutput Print one number \u2014 minimum time Luba needs to do all n chores. Examples\nInput 4 2 2 3 6 7 10 Output 13 Input 5 2 1 100 100 100 100 100 Output 302 Note\nIn the first example the best option would be to do the third and the fourth\nchore, spending x = 2 time on each instead of a3 and a4, respectively. Then\nthe answer is 3 + 6 + 2 + 2 = 13. In the second example Luba can choose any\ntwo chores to spend x time on them instead of ai. So the answer is 100\u00b73 + 2\u00b71\n= 302.\n\n",
        "cf_contest_id": 873,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 2 2\r\n3 6 7 10\r\n",
                "13\r\n"
            ],
            [
                "5 2 1\r\n100 100 100 100 100\r\n",
                "302\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1 1\r\n100\r\n",
                "1\r\n"
            ],
            [
                "100 1 99\r\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\r\n",
                "9999\r\n"
            ],
            [
                "100 100 1\r\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\r\n",
                "100\r\n"
            ],
            [
                "100 50 50\r\n51 51 52 53 55 55 55 55 56 56 56 57 57 58 58 59 59 59 60 60 61 61 62 62 63 64 64 64 64 65 65 65 65 66 66 66 67 68 68 68 69 69 70 70 70 70 71 71 71 71 71 71 72 72 76 76 76 76 77 79 79 81 81 81 81 82 82 82 82 83 84 85 86 87 87 88 88 88 89 89 89 90 90 90 91 91 91 92 92 93 95 95 96 96 96 97 97 98 99 100\r\n",
                "5618\r\n"
            ],
            [
                "100 100 1\r\n2 4 4 4 5 5 5 6 10 10 11 11 12 12 13 13 13 14 17 18 20 20 21 21 22 22 23 24 24 25 26 29 29 32 32 34 34 35 38 39 39 40 40 42 42 43 45 47 48 49 51 52 52 54 57 59 59 60 61 61 62 63 63 64 65 65 68 70 70 72 74 75 75 76 76 77 77 78 78 78 79 80 81 82 82 83 83 83 84 89 90 92 92 93 94 96 96 97 98 99\r\n",
                "100\r\n"
            ],
            [
                "100 1 1\r\n3 3 5 7 8 8 8 9 9 9 11 13 14 15 18 18 19 20 21 22 22 25 27 27 29 31 32 33 33 34 36 37 37 38 40 42 44 44 46 47 47 48 48 48 50 50 51 51 54 54 54 55 55 56 56 56 60 61 62 62 63 64 65 65 68 70 70 71 71 71 71 75 75 76 76 79 79 79 79 81 81 82 82 86 86 86 86 88 90 90 92 96 97 97 98 98 98 98 100 100\r\n",
                "5202\r\n"
            ],
            [
                "100 50 49\r\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51 51\r\n",
                "4950\r\n"
            ],
            [
                "100 50 1\r\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\r\n",
                "151\r\n"
            ],
            [
                "100 1 1\r\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\r\n",
                "199\r\n"
            ]
        ]
    }
]