[
    {
        "name": "Vlad and Candies",
        "description": "Not so long ago, Vlad had a birthday, for which he was presented with a\npackage of candies. There were \n    n\n types of candies, there are \n    a_i\n\ncandies of the type \n    i\n (\n    1 \n    \u2264 i \n    \u2264 n\n). Vlad decided to eat\nexactly one candy every time, choosing any of the candies of a type that is\ncurrently the most frequent (if there are several such types, he can choose\nany of them). To get the maximum pleasure from eating, Vlad does not want to\neat two candies of the same type in a row. Help him figure out if he can eat\nall the candies without eating two identical candies in a row. Input The first\nline of input data contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014\nthe number of input test cases. The following is a description of \n    t\n test\ncases of input, two lines for each. The first line of the case contains the\nsingle number \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of\ntypes of candies in the package. The second line of the case contains \n    n\n\nintegers \n    a_i\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the number of candies of\nthe type \n    i\n. It is guaranteed that the sum of \n    n\n for all cases does\nnot exceed \n    2 \n    \u00b7 10^5\n. Output Output \n    t\n lines, each of which\ncontains the answer to the corresponding test case of input. As an answer,\noutput \"YES\" if Vlad can eat candy as planned, and \"NO\" otherwise. You can\noutput the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\"\nand \"YES\" will be recognized as a positive answer). Example Input 6 2 2 3 1 2\n5 1 6 2 4 3 4 2 2 2 1 3 1 1000000000 999999999 1 1 Output YES NO NO YES YES\nYES Note In the first example, it is necessary to eat sweets in this order: a\ncandy of the type \n    2\n, it is the most frequent, now \n    a = [2, 2]\n; a\ncandy of the type \n    1\n, there are the same number of candies of the type\n\n    2\n, but we just ate one, now \n    a = [1, 2]\n; a candy of the type\n\n    2\n, it is the most frequent, now \n    a = [1, 1]\n; a candy of the type\n\n    1\n, now \n    a = [0, 1]\n; a candy of the type \n    2\n, now \n    a = [0,\n    0]\n and the candy has run out.In the second example, all the candies are of\nthe same type and it is impossible to eat them without eating two identical\nones in a row. In the third example, first of all, a candy of the type \n    2\n\nwill be eaten, after which this kind will remain the only kind that is the\nmost frequent, and you will have to eat a candy of the type \n    2\n again.\n\n",
        "cf_contest_id": 1660,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n2\r\n2 3\r\n1\r\n2\r\n5\r\n1 6 2 4 3\r\n4\r\n2 2 2 1\r\n3\r\n1 1000000000 999999999\r\n1\r\n1\r\n",
                "YES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n3\r\n1 2 12212221\r\n",
                "NO\r\n"
            ]
        ]
    }
]