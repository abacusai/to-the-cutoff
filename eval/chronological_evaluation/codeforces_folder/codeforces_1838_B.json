[
    {
        "name": "Minimize Permutation Subarrays",
        "description": "You are given a permutation \n    p\n of size \n    n\n. You want to minimize the\nnumber of subarrays of \n    p\n that are permutations. In order to do so, you\nmust perform the following operation exactly once: Select integers \n    i\n,\n\n    j\n, where \n    1 \n    \u2264 i, j \n    \u2264 n\n, then Swap \n    p_i\n and \n    p_j\n.\nFor example, if \n    p = [5, 1, 4, 2, 3]\n and we choose \n    i = 2\n, \n    j =\n    3\n, the resulting array will be \n    [5, 4, 1, 2, 3]\n. If instead we choose\n\n    i = j = 5\n, the resulting array will be \n    [5, 1, 4, 2, 3]\n. Which\nchoice of \n    i\n and \n    j\n will minimize the number of subarrays that are\npermutations? A permutation of length \n    n\n is an array consisting of\n\n    n\n distinct integers from \n    1\n to \n    n\n in arbitrary order. For\nexample, \n    [2,3,1,5,4]\n is a permutation, but \n    [1,2,2]\n is not a\npermutation (\n    2\n appears twice in the array), and \n    [1,3,4]\n is also\nnot a permutation (\n    n=3\n but there is \n    4\n in the array). An array\n\n    a\n is a subarray of an array \n    b\n if \n    a\n can be obtained from\n\n    b\n by the deletion of several (possibly, zero or all) elements from the\nbeginning and several (possibly, zero or all) elements from the end. Input The\nfirst line of the input contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    10^4\n) \u2014 the number of test cases. The description of the test cases\nfollows. The first line of each test case contains a single integer \n    n\n\n(\n    3 \n    \u2264 n \n    \u2264 2\n    \u00b7 10^5\n) \u2014 the size of the permutation. The next\nline of each test case contains \n    n\n integers \n    p_1, p_2, \n    \u2026 p_n\n\n(\n    1 \n    \u2264 p_i \n    \u2264 n\n, all \n    p_i\n are distinct) \u2014 the elements of the\npermutation \n    p\n. It is guaranteed that the sum of \n    n\n over all test\ncases does not exceed \n    2\n    \u00b7 10^5\n. Output For each test case, output\ntwo integers \n    i\n and \n    j\n (\n    1 \n    \u2264 i, j \n    \u2264 n\n) \u2014 the indices to\nswap in \n    p\n. If there are multiple solutions, print any of them. Example\nInput 8 3 1 2 3 3 1 3 2 5 1 3 2 5 4 6 4 5 6 1 2 3 9 8 7 6 3 2 1 4 5 9 10 7 10\n5 1 9 8 3 2 6 4 10 8 5 10 9 2 1 3 4 6 7 10 2 3 5 7 10 1 8 6 4 9 Output 2 3 1 1\n5 2 1 4 9 5 8 8 6 10 5 4 Note For the first test case, there are four possible\narrays after the swap: If we swap \n    p_1\n and \n    p_2\n, we get the array\n\n    [2, 1, 3]\n, which has 3 subarrays that are permutations (\n    [1]\n,\n\n    [2, 1]\n, \n    [2, 1, 3]\n). If we swap \n    p_1\n and \n    p_3\n, we get the\narray \n    [3, 2, 1]\n, which has 3 subarrays that are permutations (\n    [1]\n,\n\n    [2, 1]\n, \n    [3, 2, 1]\n). If we swap \n    p_2\n and \n    p_3\n, we get the\narray \n    [1, 3, 2]\n, which has 2 subarrays that are permutations (\n    [1]\n,\n\n    [1, 3, 2]\n). If we swap any element with itself, we get the array \n    [1,\n    2, 3]\n, which has 3 subarrays that are permutations (\n    [1]\n, \n    [1,\n    2]\n, \n    [1, 2, 3]\n). So the best swap to make is positions \n    2\n and\n\n    3\n.For the third sample case, after we swap elements at positions \n    2\n\nand \n    5\n, the resulting array is \n    [1, 4, 2, 5, 3]\n. The only subarrays\nthat are permutations are \n    [1]\n and \n    [1, 4, 2, 5, 3]\n. We can show\nthat this is minimal.\n\n",
        "cf_contest_id": 1838,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8\r\n3\r\n1 2 3\r\n3\r\n1 3 2\r\n5\r\n1 3 2 5 4\r\n6\r\n4 5 6 1 2 3\r\n9\r\n8 7 6 3 2 1 4 5 9\r\n10\r\n7 10 5 1 9 8 3 2 6 4\r\n10\r\n8 5 10 9 2 1 3 4 6 7\r\n10\r\n2 3 5 7 10 1 8 6 4 9\r\n",
                "3 2\r\n2 2\r\n4 3\r\n3 4\r\n9 6\r\n2 4\r\n3 5\r\n5 5\r\n"
            ]
        ],
        "private_cases": []
    }
]