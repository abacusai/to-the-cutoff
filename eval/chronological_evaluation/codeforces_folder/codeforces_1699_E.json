[
    {
        "name": "Three Days Grace",
        "description": "Ibti was thinking about a good title for this problem that would fit the round\ntheme (numerus ternarium). He immediately thought about the third derivative,\nbut that was pretty lame so he decided to include the best band in the world \u2014\nThree Days Grace. You are given a multiset \n    A\n with initial size \n    n\n,\nwhose elements are integers between \n    1\n and \n    m\n. In one operation, do\nthe following: select a value \n    x\n from the multiset \n    A\n, then select\ntwo integers \n    p\n and \n    q\n such that \n    p, q > 1\n and \n    p \n    \u00b7 q =\n    x\n. Insert \n    p\n and \n    q\n to \n    A\n, delete \n    x\n from \n    A\n. Note\nthat the size of the multiset \n    A\n increases by \n    1\n after each\noperation. We define the balance of the multiset \n    A\n as \n    max(a_i) -\n    \n    min(a_i)\n. Find the minimum possible balance after performing any number\n(possible zero) of operations. Input The first line of the input contains a\nsingle integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^5\n) \u2014 the number of test\ncases. The second line of each test case contains two integers \n    n\n and\n\n    m\n (\n    1 \n    \u2264 n \n    \u2264 10^6\n, \n    1 \n    \u2264 m \n    \u2264 5 \n    \u00b7 10^6\n) \u2014\nthe initial size of the multiset, and the maximum value of an element. The\nthird line of each test case contains \n    n\n integers \n    a_1, a_2, \n    \u2026,\n    a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 m\n) \u2014 the elements in the initial multiset. It\nis guaranteed that the sum of \n    n\n across all test cases does not exceed\n\n    10^6\n and the sum of \n    m\n across all test cases does not exceed \n    5\n    \n    \u00b7 10^6\n. Output For each test case, print a single integer \u2014 the\nminimum possible balance. Example Input 4 5 10 2 4 2 4 2 3 50 12 2 3 2 40 6 35\n2 5 1 5 Output 0 1 2 4 Note In the first test case, we can apply the operation\non each of the \n    4\ns with \n    (p,q) = (2,2)\n and make the multiset\n\n    2,2,2,2,2,2,2\n with balance \n    max(\n    \n    2,2,2,2,2,2,2\n    \n    )\n    - \n    min(\n    \n    2,2,2,2,2,2,2\n    \n    ) = 0\n. It is obvious we cannot make this\nbalance less than \n    0\n. In the second test case, we can apply an operation\non \n    12\n with \n    (p,q) = (3,4)\n. After this our multiset will be\n\n    3,4,2,3\n. We can make one more operation on \n    4\n with\n\n    (p,q) = (2,2)\n, making the multiset \n    3,2,2,2,3\n with\nbalance equal to \n    1\n. In the third test case, we can apply an operation on\n\n    35\n with \n    (p,q) = (5,7)\n. The final multiset is \n    6,5,7\n\nand has a balance equal to \n    7-5 = 2\n. In the forth test case, we cannot\napply any operation, so the balance is \n    5 - 1 = 4\n.\n\n",
        "cf_contest_id": 1699,
        "cf_index": "E",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp",
            "greedy",
            "math",
            "number theory",
            "two pointers"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n5 10\r\n2 4 2 4 2\r\n3 50\r\n12 2 3\r\n2 40\r\n6 35\r\n2 5\r\n1 5\r\n",
                "0\r\n1\r\n2\r\n4\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n50 5000000\r\n2471461 1702751 941167 608303 707117 55249 317431 2414851 100999 1585723 214007 2527997 4552861 4020277 4679629 1871083 3377923 1285469 396173 2236363 2568641 3525359 1007203 4983497 2122441 4732000 688800 2900800 2904048 674730 1934010 2972340 4129020 2042964 3001200 4395300 3753000 2637120 4864860 4363744 2690280 839520 2967888 3441240 2085696 4200240 3297294 2060352 4897620 4924080\r\n",
                "4928248\r\n"
            ],
            [
                "1\r\n10 5000000\r\n3461850 1270080 3670800 1796340 3012912 1539900 2156280 4754736 2399544 1197840\r\n",
                "88\r\n"
            ],
            [
                "1\r\n50 5000000\r\n3974880 2922360 3864336 1917300 2474160 4145400 1335852 4489968 1316520 4522608 3036132 780000 1078800 1937250 4360200 4883076 2109240 3387072 3350160 3244752 3829488 3389040 3307080 2043792 3225376 4867720 4669440 4416930 3230760 3696480 4074588 4068090 4382560 4349100 3248960 3693144 3605250 4801896 1595280 4496976 4773132 3936800 3613050 3332340 4594296 4585308 4239480 2544080 4990080 1359600\r\n",
                "445\r\n"
            ],
            [
                "1\r\n10 5000000\r\n374639 102233 3193903 1887359 1103933 3731603 3006277 368647 1068323 1382419\r\n",
                "3629370\r\n"
            ],
            [
                "1\r\n50 5000000\r\n701609 82469 3154321 2001361 899711 1563943 3588517 4247611 988937 67577 3821791 2515273 4421869 4882147 4690619 4012999 157907 4902431 2659439 1889647 246403 4343887 4718927 2022271 963607 3420083 56671 1198033 1348073 2932379 4742189 2034503 2534563 2456411 1357537 2158483 2085899 3552559 4699619 4165397 4501927 2742469 1051459 2230777 3912893 4000361 4133147 2987737 1004167 4010849\r\n",
                "4845760\r\n"
            ],
            [
                "1\r\n10 5000000\r\n3698087 1727923 1106243 2539699 2436211 1858320 2871540 2095680 3740000 4430272\r\n",
                "3324029\r\n"
            ],
            [
                "1\r\n10 5000000\r\n3191760 4897200 4200768 3792096 4226880 3973200 4694976 3516240 4276800 4614480\r\n",
                "27\r\n"
            ]
        ]
    }
]