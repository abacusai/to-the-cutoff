[
    {
        "name": "Water Balance",
        "description": "There are \n    n\n water tanks in a row, \n    i\n-th of them contains \n    a_i\n\nliters of water. The tanks are numbered from \n    1\n to \n    n\n from left to\nright. You can perform the following operation: choose some subsegment \n    [l,\n    r]\n (\n    1\n    \u2264 l \n    \u2264 r \n    \u2264 n\n), and redistribute water in tanks \n    l,\n    l+1, \n    \u2026, r\n evenly. In other words, replace each of \n    a_l, a_l+1,\n    \n    \u2026, a_r\n by \n    a_l + a_l+1 + \n    \u2026 + a_r/r-l+1\n. For\nexample, if for volumes \n    [1, 3, 6, 7]\n you choose \n    l = 2, r = 3\n, new\nvolumes of water will be \n    [1, 4.5, 4.5, 7]\n. You can perform this\noperation any number of times. What is the lexicographically smallest sequence\nof volumes of water that you can achieve? As a reminder: A sequence \n    a\n is\nlexicographically smaller than a sequence \n    b\n of the same length if and\nonly if the following holds: in the first (leftmost) position where \n    a\n\nand \n    b\n differ, the sequence \n    a\n has a smaller element than the\ncorresponding element in \n    b\n. Input The first line contains an integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^6\n) \u2014 the number of water tanks. The second\nline contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i\n    \n    \u2264 10^6\n) \u2014 initial volumes of water in the water tanks, in liters.\nBecause of large input, reading input as doubles is not recommended. Output\nPrint the lexicographically smallest sequence you can get. In the \n    i\n-th\nline print the final volume of water in the \n    i\n-th tank. Your answer is\nconsidered correct if the absolute or relative error of each \n    a_i\n does\nnot exceed \n    10^-9\n. Formally, let your answer be \n    a_1, a_2, \n    \u2026,\n    a_n\n, and the jury's answer be \n    b_1, b_2, \n    \u2026, b_n\n. Your answer is\naccepted if and only if \n    |a_i - b_i|/\n    max(1, |b_i|)\n    \u2264\n    10^-9\n for each \n    i\n. Examples Input 4 7 5 5 7 Output 5.666666667\n5.666666667 5.666666667 7.000000000 Input 5 7 8 8 10 12 Output 7.000000000\n8.000000000 8.000000000 10.000000000 12.000000000 Input 10 3 9 5 5 1 7 5 3 8 7\nOutput 3.000000000 5.000000000 5.000000000 5.000000000 5.000000000 5.000000000\n5.000000000 5.000000000 7.500000000 7.500000000 Note In the first sample, you\ncan get the sequence by applying the operation for subsegment \n    [1, 3]\n. In\nthe second sample, you can't get any lexicographically smaller sequence.\n\n",
        "cf_contest_id": 1299,
        "cf_index": "C",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "geometry",
            "greedy"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n7 5 5 7\r\n",
                "5.666666666666667\r\n5.666666666666667\r\n5.666666666666667\r\n7.0\r\n\r\n"
            ],
            [
                "5\r\n7 8 8 10 12\r\n",
                "7.0\r\n8.0\r\n8.0\r\n10.0\r\n12.0\r\n\r\n"
            ],
            [
                "10\r\n3 9 5 5 1 7 5 3 8 7\r\n",
                "3.0\r\n5.0\r\n5.0\r\n5.0\r\n5.0\r\n5.0\r\n5.0\r\n5.0\r\n7.5\r\n7.5\r\n\r\n"
            ]
        ],
        "private_cases": [
            [
                "12\r\n8 10 4 6 6 4 1 2 2 6 9 5\r\n",
                "4.777777777777778\r\n4.777777777777778\r\n4.777777777777778\r\n4.777777777777778\r\n4.777777777777778\r\n4.777777777777778\r\n4.777777777777778\r\n4.777777777777778\r\n4.777777777777778\r\n6.0\r\n7.0\r\n7.0\r\n\r\n"
            ],
            [
                "7\r\n765898 894083 551320 290139 300748 299067 592728\r\n",
                "516875.8333333333\r\n516875.8333333333\r\n516875.8333333333\r\n516875.8333333333\r\n516875.8333333333\r\n516875.8333333333\r\n592728.0\r\n\r\n"
            ],
            [
                "13\r\n987069 989619 960831 976342 972924 961800 954209 956033 998067 984513 977987 963504 985482\r\n",
                "969853.375\r\n969853.375\r\n969853.375\r\n969853.375\r\n969853.375\r\n969853.375\r\n969853.375\r\n969853.375\r\n981017.75\r\n981017.75\r\n981017.75\r\n981017.75\r\n985482.0\r\n\r\n"
            ],
            [
                "1\r\n12345\r\n",
                "12345.0\r\n\r\n"
            ],
            [
                "2\r\n100 20\r\n",
                "60.0\r\n60.0\r\n\r\n"
            ],
            [
                "3\r\n100 20 50\r\n",
                "56.666666666666664\r\n56.666666666666664\r\n56.666666666666664\r\n\r\n"
            ],
            [
                "3\r\n20 100 50\r\n",
                "20.0\r\n75.0\r\n75.0\r\n\r\n"
            ],
            [
                "3\r\n20 90 100\r\n",
                "20.0\r\n90.0\r\n100.0\r\n\r\n"
            ],
            [
                "5\r\n742710 834126 850058 703320 972844\r\n",
                "742710.0\r\n795834.6666666666\r\n795834.6666666666\r\n795834.6666666666\r\n972844.0\r\n\r\n"
            ]
        ]
    }
]