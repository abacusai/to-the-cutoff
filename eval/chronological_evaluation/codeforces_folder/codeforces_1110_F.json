[
    {
        "name": "Nearest Leaf",
        "description": "Let's define the Eulerian traversal of a tree (a connected undirected graph\nwithout cycles) as follows: consider a depth-first search algorithm which\ntraverses vertices of the tree and enumerates them in the order of visiting\n(only the first visit of each vertex counts). This function starts from the\nvertex number \n    1\n and then recursively runs from all vertices which are\nconnected with an edge with the current vertex and are not yet visited in\nincreasing numbers order. Formally, you can describe this function using the\nfollowing pseudocode: next_id = 1 id = array of length n filled with -1\nvisited = array of length n filled with false function dfs(v): visited[v] =\ntrue id[v] = next_id next_id += 1 for to in neighbors of v in increasing\norder: if not visited[to]: dfs(to) You are given a weighted tree, the vertices\nof which were enumerated with integers from \n    1\n to \n    n\n using the\nalgorithm described above. A leaf is a vertex of the tree which is connected\nwith only one other vertex. In the tree given to you, the vertex \n    1\n is\nnot a leaf. The distance between two vertices in the tree is the sum of\nweights of the edges on the simple path between them. You have to answer\n\n    q\n queries of the following type: given integers \n    v\n, \n    l\n and\n\n    r\n, find the shortest distance from vertex \n    v\n to one of the leaves\nwith indices from \n    l\n to \n    r\n inclusive. Input The first line contains\ntwo integers \n    n\n and \n    q\n (\n    3 \n    \u2264 n \n    \u2264 500\n     000, 1 \n    \u2264 q\n    \n    \u2264 500\n     000\n) \u2014 the number of vertices in the tree and the number of\nqueries, respectively. The \n    (i - 1)\n-th of the following \n    n - 1\n lines\ncontains two integers \n    p_i\n and \n    w_i\n (\n    1 \n    \u2264 p_i < i, 1 \n    \u2264\n    w_i \n    \u2264 10^9\n), denoting an edge between vertices \n    p_i\n and \n    i\n\nwith the weight \n    w_i\n. It's guaranteed that the given edges form a tree\nand the vertices are enumerated in the Eulerian traversal order and that the\nvertex with index \n    1\n is not a leaf. The next \n    q\n lines describe the\nqueries. Each of them contains three integers \n    v_i\n, \n    l_i\n, \n    r_i\n\n(\n    1 \n    \u2264 v_i \n    \u2264 n, 1 \n    \u2264 l_i \n    \u2264 r_i \n    \u2264 n\n), describing\nthe parameters of the query. It is guaranteed that there is at least one leaf\nwith index \n    x\n such that \n    l_i \n    \u2264 x \n    \u2264 r_i\n. Output Output\n\n    q\n integers \u2014 the answers for the queries in the order they are given in\nthe input. Examples Input 5 3 1 10 1 1 3 2 3 3 1 1 5 5 4 5 4 1 2 Output 3 0 13\nInput 5 3 1 1000000000 2 1000000000 1 1000000000 1 1000000000 3 4 5 2 1 5 2 4\n5 Output 3000000000 1000000000 2000000000 Input 11 8 1 7 2 1 1 20 1 2 5 6 6 2\n6 3 5 1 9 10 9 11 5 1 11 1 1 4 9 4 8 6 1 4 9 7 11 9 10 11 8 1 11 11 4 5 Output\n8 8 9 16 9 10 0 34 Note In the first example, the tree looks like this: In the\nfirst query, the nearest leaf for the vertex \n    1\n is vertex \n    4\n with\ndistance \n    3\n. In the second query, the nearest leaf for vertex \n    5\n is\nvertex \n    5\n with distance \n    0\n. In the third query the nearest leaf for\nvertex \n    4\n is vertex \n    4\n; however, it is not inside interval \n    [1,\n    2]\n of the query. The only leaf in interval \n    [1, 2]\n is vertex \n    2\n\nwith distance \n    13\n from vertex \n    4\n.\n\n",
        "cf_contest_id": 1110,
        "cf_index": "F",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5 3\r\n1 10\r\n1 1\r\n3 2\r\n3 3\r\n1 1 5\r\n5 4 5\r\n4 1 2\r\n",
                "3\r\n0\r\n13\r\n"
            ],
            [
                "5 3\r\n1 1000000000\r\n2 1000000000\r\n1 1000000000\r\n1 1000000000\r\n3 4 5\r\n2 1 5\r\n2 4 5\r\n",
                "3000000000\r\n1000000000\r\n2000000000\r\n"
            ],
            [
                "11 8\r\n1 7\r\n2 1\r\n1 20\r\n1 2\r\n5 6\r\n6 2\r\n6 3\r\n5 1\r\n9 10\r\n9 11\r\n5 1 11\r\n1 1 4\r\n9 4 8\r\n6 1 4\r\n9 7 11\r\n9 10 11\r\n8 1 11\r\n11 4 5\r\n",
                "8\r\n8\r\n9\r\n16\r\n9\r\n10\r\n0\r\n34\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 1\r\n1 1\r\n1 1\r\n3 1 2\r\n",
                "2\r\n"
            ],
            [
                "10 10\r\n1 12\r\n2 89\r\n3 20\r\n3 37\r\n3 15\r\n2 43\r\n7 8\r\n8 31\r\n1 52\r\n8 8 9\r\n1 1 8\r\n7 7 10\r\n4 3 4\r\n9 3 8\r\n7 7 9\r\n6 7 10\r\n2 3 7\r\n6 8 10\r\n7 1 4\r\n",
                "31\r\n116\r\n39\r\n0\r\n186\r\n39\r\n168\r\n104\r\n168\r\n152\r\n"
            ]
        ]
    }
]