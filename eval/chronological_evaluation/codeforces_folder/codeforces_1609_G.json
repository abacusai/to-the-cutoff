[
    {
        "name": "A Stroll Around the Matrix",
        "description": "William has two arrays of numbers \n    a_1, a_2, \n    \u2026, a_n\n and \n    b_1,\n    b_2, \n    \u2026, b_m\n. The arrays satisfy the conditions of being convex.\nFormally an array \n    c\n of length \n    k\n is considered convex if \n    c_i -\n    c_i - 1 < c_i + 1 - c_i\n for all \n    i\n from \n    2\n to \n    k - 1\n and\n\n    c_1 < c_2\n. Throughout William's life he observed \n    q\n changes of two\ntypes happening to the arrays: Add the arithmetic progression \n    d, d \n    \u00b7\n    2, d \n    \u00b7 3, \n    \u2026, d \n    \u00b7 k\n to the suffix of the array \n    a\n of\nlength \n    k\n. The array after the change looks like this: \n    [a_1, a_2,\n    \n    \u2026, a_n - k, a_n - k + 1 + d, a_n - k + 2 + d \n    \u00b7 2, \n    \u2026,\n    a_n + d \n    \u00b7 k]\n. The same operation, but for array \n    b\n. After each\nchange a matrix \n    d\n is created from arrays \n    a\n and \n    b\n, of size\n\n    n \n    \u00d7 m\n, where \n    d_i, j=a_i + b_j\n. William wants to get from\ncell (\n    1, 1\n) to cell (\n    n, m\n) of this matrix. From cell (\n    x, y\n)\nhe can only move to cells (\n    x + 1, y\n) and (\n    x, y + 1\n). The length of\na path is calculated as the sum of numbers in cells visited by William,\nincluding the first and the last cells. After each change William wants you to\nhelp find out the minimal length of the path he could take. Input The first\nline contains three integers \n    n\n, \n    m\n and \n    q\n (\n    2 \n    \u2264 n \n    \u2264\n    100, 2 \n    \u2264 m \n    \u2264 10^5\n, \n    1 \n    \u2264 q \n    \u2264 10^5\n), the sizes of the\narrays and the number of changes. The second line contains \n    n\n integers\n\n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^12\n), the contents\nof array \n    a\n. The third line contains \n    m\n integers \n    b_1, b_2,\n    \n    \u2026, b_m\n (\n    1 \n    \u2264 b_i \n    \u2264 10^12\n), the contents of array\n\n    b\n. Each of the next \n    q\n lines contains three integers \n    type\n,\n\n    k\n and \n    d\n (\n    1 \n    \u2264 type \n    \u2264 2\n, if \n    type = 1\n, then \n    1\n    \n    \u2264 k \n    \u2264 n\n otherwise \n    1 \n    \u2264 k \n    \u2264 m\n, \n    1 \n    \u2264 d \n    \u2264\n    10^3\n). Output After each change, output one integer, the minimum length of\nthe path in the constructed matrix. Examples Input 5 3 4 1 2 4 7 11 5 7 10 1 3\n2 2 2 5 1 5 4 2 1 7 Output 98 128 219 229 Input 5 6 7 4 9 22 118 226 7 94 238\n395 565 738 2 1 95 1 4 54 1 2 5 1 2 87 2 6 62 2 1 143 1 1 77 Output 3639 5122\n5162 5617 7663 7806 7960\n\n",
        "cf_contest_id": 1609,
        "cf_index": "G",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 3 4\r\n1 2 4 7 11\r\n5 7 10\r\n1 3 2\r\n2 2 5\r\n1 5 4\r\n2 1 7\r\n",
                "98\r\n128\r\n219\r\n229\r\n"
            ],
            [
                "5 6 7\r\n4 9 22 118 226\r\n7 94 238 395 565 738\r\n2 1 95\r\n1 4 54\r\n1 2 5\r\n1 2 87\r\n2 6 62\r\n2 1 143\r\n1 1 77\r\n",
                "3639\r\n5122\r\n5162\r\n5617\r\n7663\r\n7806\r\n7960\r\n"
            ]
        ],
        "private_cases": []
    }
]