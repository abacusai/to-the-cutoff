[
    {
        "name": "Yura and Developers",
        "description": "Yura has a team of k developers and a list of n tasks numbered from 1 to n.\nYura is going to choose some tasks to be done this week. Due to strange\nLooksery habits the numbers of chosen tasks should be a segment of consecutive\nintegers containing no less than 2 numbers, i. e. a sequence of form l, l + 1,\n..., r for some 1 \u2264 l < r \u2264 n. Every task i has an integer number ai\nassociated with it denoting how many man-hours are required to complete the\ni-th task. Developers are not self-confident at all, and they are actually\nafraid of difficult tasks. Knowing that, Yura decided to pick up a hardest\ntask (the one that takes the biggest number of man-hours to be completed,\namong several hardest tasks with same difficulty level he chooses arbitrary\none) and complete it on his own. So, if tasks with numbers [l, r] are chosen\nthen the developers are left with r - l tasks to be done by themselves. Every\ndeveloper can spend any integer amount of hours over any task, but when they\nare done with the whole assignment there should be exactly ai man-hours spent\nover the i-th task. The last, but not the least problem with developers is\nthat one gets angry if he works more than another developer. A set of tasks\n[l, r] is considered good if it is possible to find such a distribution of\nwork that allows to complete all the tasks and to have every developer working\nfor the same amount of time (amount of work performed by Yura doesn't matter\nfor other workers as well as for him). For example, let's suppose that Yura\nhave chosen tasks with following difficulties: a = [1, 2, 3, 4], and he has\nthree developers in his disposal. He takes the hardest fourth task to finish\nby himself, and the developers are left with tasks with difficulties [1, 2,\n3]. If the first one spends an hour on the first task and an hour on the third\none, the second developer spends two hours on the second task and the third\ndeveloper spends two hours on the third task, then they are done, since every\ndeveloper worked exactly for two hours and every task has been worked over for\nthe required amount of time. As another example, if the first task required\ntwo hours instead of one to be completed then it would be impossible to assign\nthe tasks in a way described above. Besides work, Yura is fond of problem\nsolving. He wonders how many pairs (l, r) (1 \u2264 l < r \u2264 n) exists such that a\nsegment [l, r] is good? Yura has already solved this problem, but he has no\ntime to write the code. Please, help Yura and implement the solution for this\nproblem. Input The first line of input contains two positive integers: n and k\n(1 \u2264 n \u2264 300 000, 1 \u2264 k \u2264 1 000 000), the number of tasks in the list and the\nnumber of developers in Yura's disposal. The second line contains n integers\nai (1 \u2264 ai \u2264 10^9). Output Output a single integer \u2014 the number of pairs (l,\nr) satisfying the conditions from the statement. Examples Input 4 3 1 2 3 4\nOutput 3 Input 4 2 4 4 7 4 Output 6 Note In the first sample there are three\ngood segments: [1;3] \u2014 the hardest task requires 3 man-hours, so there are\ntasks left that require 1 and 2 man-hours. A solution is to make first\ndeveloper work on the first task for an hour, while second and third\ndevelopers work on the second task. Each developer works exactly one hour.\n[1;4] \u2014 the hardest task requires 4 man-hours, so there are tasks left that\nrequire 1, 2 and 3 man-hours. If the first developer spends an hour on the\nfirst task and an hour on the third one, the second developer spends two hours\non the second task and the third developer spends two hours on the third task,\nthen they are done, since every developer worked exactly for two hours. [3;4]\n\u2014 the hardest task requires 4 man-hours, so there is only one task left that\nrequires 3 man-hours. A solution is to make each developer work for an hour.\n\n",
        "cf_contest_id": 549,
        "cf_index": "F",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "divide and conquer"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 3\r\n1 2 3 4\r\n",
                "3"
            ],
            [
                "4 2\r\n4 4 7 4\r\n",
                "6"
            ]
        ],
        "private_cases": [
            [
                "5 6\r\n3 3 12 8 10\r\n",
                "3"
            ],
            [
                "10 6\r\n9 9 18 33 48 141 129 84 81 48\r\n",
                "20"
            ],
            [
                "47 74\r\n925 925 888 851 814 814 703 703 666 555 518 481 444 444 444 370 333 333 296 296 259 222 74 962 999 999 999 1036 1036 1036 1036 1073 1110 1147 1258 1295 1332 1369 1480 1480 1517 1517 1591 1628 1628 1702 1702\r\n",
                "535"
            ],
            [
                "1 1\r\n1\r\n",
                "0"
            ],
            [
                "1 1000000\r\n1000000000\r\n",
                "0"
            ],
            [
                "4 1000000\r\n1000000000 1000000000 1000000000 1000000000\r\n",
                "6"
            ],
            [
                "1 77\r\n1000000000\r\n",
                "0"
            ],
            [
                "1 1000000\r\n1\r\n",
                "0"
            ],
            [
                "16 47\r\n5600 5600 5900 6400 5700 5600 5600 5200 5400 5900 5900 6600 6600 6000 5700 5600\r\n",
                "1"
            ]
        ]
    }
]