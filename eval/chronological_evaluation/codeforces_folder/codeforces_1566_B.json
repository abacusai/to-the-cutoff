[
    {
        "name": "MIN-MEX Cut",
        "description": "A binary string is a string that consists of characters \n    0\n and \n    1\n.\nLet \n    MEX\n of a binary string be the smallest digit among\n\n    0\n, \n    1\n, or \n    2\n that does not occur in the string. For example,\n\n    MEX\n of \n    001011\n is \n    2\n, because \n    0\n and\n\n    1\n occur in the string at least once, \n    MEX\n of\n\n    1111\n is \n    0\n, because \n    0\n and \n    2\n do not occur in the string\nand \n    0 < 2\n. A binary string \n    s\n is given. You should cut it into any\nnumber of substrings such that each character is in exactly one substring. It\nis possible to cut the string into a single substring \u2014 the whole string. A\nstring \n    a\n is a substring of a string \n    b\n if \n    a\n can be obtained\nfrom \n    b\n by deletion of several (possibly, zero or all) characters from\nthe beginning and several (possibly, zero or all) characters from the end.\nWhat is the minimal sum of \n    MEX\n of all substrings pieces\ncan be? Input The input consists of multiple test cases. The first line\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of\ntest cases. Description of the test cases follows. Each test case contains a\nsingle binary string \n    s\n (\n    1 \n    \u2264 |s| \n    \u2264 10^5\n). It's guaranteed\nthat the sum of lengths of \n    s\n over all test cases does not exceed\n\n    10^5\n. Output For each test case print a single integer \u2014 the minimal sum\nof \n    MEX\n of all substrings that it is possible to get by\ncutting \n    s\n optimally. Example Input 6 01 1111 01100 101 0000 01010 Output\n1 0 2 1 1 2 Note In the first test case the minimal sum is\n\n    MEX(0) + \n    MEX(1) = 1 + 0 = 1\n. In the\nsecond test case the minimal sum is \n    MEX(1111) = 0\n. In\nthe third test case the minimal sum is \n    MEX(01100) = 2\n.\n\n",
        "cf_contest_id": 1566,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "constructive algorithms",
            "dp",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n01\r\n1111\r\n01100\r\n101\r\n0000\r\n01010\r\n",
                "1\r\n0\r\n2\r\n1\r\n1\r\n2\r\n"
            ]
        ],
        "private_cases": []
    }
]