[
    {
        "name": "Xum",
        "description": "You have a blackboard and initially only an odd number \n    x\n is written on\nit. Your goal is to write the number \n    1\n on the blackboard. You may write\nnew numbers on the blackboard with the following two operations. You may take\ntwo numbers (not necessarily distinct) already on the blackboard and write\ntheir sum on the blackboard. The two numbers you have chosen remain on the\nblackboard. You may take two numbers (not necessarily distinct) already on the\nblackboard and write their bitwise XOR on the blackboard. The two numbers you\nhave chosen remain on the blackboard. Perform a sequence of operations such\nthat at the end the number \n    1\n is on the blackboard. Input The single line\nof the input contains the odd integer \n    x\n (\n    3 \n    \u2264 x \n    \u2264 999,999\n).\nOutput Print on the first line the number \n    q\n of operations you perform.\nThen \n    q\n lines should follow, each describing one operation. The \"sum\"\noperation is described by the line \"\n    a\n + \n    b\n\", where \n    a, b\n must\nbe integers already present on the blackboard. The \"xor\" operation is\ndescribed by the line \"\n    a\n ^ \n    b\n\", where \n    a, b\n must be integers\nalready present on the blackboard. The operation symbol (+ or ^) must be\nseparated from \n    a, b\n by a whitespace.You can perform at most\n\n    100,000\n operations (that is, \n    q\n    \u2264 100,000\n) and all numbers\nwritten on the blackboard must be in the range \n    [0, 5\n    \u00b710^18]\n. It\ncan be proven that under such restrictions the required sequence of operations\nexists. You can output any suitable sequence of operations. Examples Input 3\nOutput 5 3 + 3 3 ^ 6 3 + 5 3 + 6 8 ^ 9 Input 123 Output 10 123 + 123 123 ^ 246\n141 + 123 246 + 123 264 ^ 369 121 + 246 367 ^ 369 30 + 30 60 + 60 120 ^ 121\n\n",
        "cf_contest_id": 1427,
        "cf_index": "E",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "constructive algorithms",
            "math",
            "matrices",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n",
                "5\r\n3 + 3\r\n6 ^ 3\r\n3 + 6\r\n3 + 5\r\n9 ^ 8\r\n"
            ],
            [
                "123\r\n",
                "33\r\n123 + 123\r\n246 + 246\r\n492 + 492\r\n984 + 984\r\n1968 + 1968\r\n3936 + 3936\r\n7872 ^ 123\r\n123 + 7872\r\n123 + 7867\r\n246 + 7995\r\n246 + 7990\r\n492 + 8241\r\n492 + 8236\r\n984 + 8733\r\n984 + 8728\r\n1968 + 9717\r\n1968 + 9712\r\n3936 + 11685\r\n3936 + 11680\r\n15621 ^ 15616\r\n5 + 5\r\n10 + 10\r\n20 ^ 5\r\n5 + 20\r\n5 + 17\r\n10 + 25\r\n10 + 22\r\n35 ^ 32\r\n3 + 3\r\n6 ^ 3\r\n3 + 6\r\n3 + 5\r\n9 ^ 8\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n",
                "13\r\n5 + 5\r\n10 + 10\r\n20 ^ 5\r\n5 + 20\r\n5 + 17\r\n10 + 25\r\n10 + 22\r\n35 ^ 32\r\n3 + 3\r\n6 ^ 3\r\n3 + 6\r\n3 + 5\r\n9 ^ 8\r\n"
            ],
            [
                "1023\r\n",
                "29\r\n1023 + 1023\r\n2046 + 2046\r\n4092 + 4092\r\n8184 + 8184\r\n16368 + 16368\r\n32736 + 32736\r\n65472 + 65472\r\n130944 + 130944\r\n261888 + 261888\r\n523776 ^ 1023\r\n1023 + 523776\r\n1023 + 523775\r\n2046 + 524799\r\n2046 + 524798\r\n4092 + 526845\r\n4092 + 526844\r\n8184 + 530937\r\n8184 + 530936\r\n16368 + 539121\r\n16368 + 539120\r\n32736 + 555489\r\n32736 + 555488\r\n65472 + 588225\r\n65472 + 588224\r\n130944 + 653697\r\n130944 + 653696\r\n261888 + 784641\r\n261888 + 784640\r\n1046529 ^ 1046528\r\n"
            ],
            [
                "7\r\n",
                "8\r\n7 + 7\r\n14 + 14\r\n28 ^ 7\r\n7 + 28\r\n7 + 27\r\n14 + 35\r\n14 + 34\r\n49 ^ 48\r\n"
            ],
            [
                "9\r\n",
                "19\r\n9 + 9\r\n18 + 18\r\n36 + 36\r\n72 ^ 9\r\n9 + 72\r\n9 + 65\r\n18 + 81\r\n18 + 74\r\n36 + 99\r\n36 + 92\r\n135 ^ 128\r\n7 + 7\r\n14 + 14\r\n28 ^ 7\r\n7 + 28\r\n7 + 27\r\n14 + 35\r\n14 + 34\r\n49 ^ 48\r\n"
            ],
            [
                "11\r\n",
                "24\r\n11 + 11\r\n22 + 22\r\n44 + 44\r\n88 ^ 11\r\n11 + 88\r\n11 + 83\r\n22 + 99\r\n22 + 94\r\n44 + 121\r\n44 + 116\r\n165 ^ 160\r\n5 + 5\r\n10 + 10\r\n20 ^ 5\r\n5 + 20\r\n5 + 17\r\n10 + 25\r\n10 + 22\r\n35 ^ 32\r\n3 + 3\r\n6 ^ 3\r\n3 + 6\r\n3 + 5\r\n9 ^ 8\r\n"
            ],
            [
                "13\r\n",
                "16\r\n13 + 13\r\n26 + 26\r\n52 + 52\r\n104 ^ 13\r\n13 + 104\r\n13 + 101\r\n26 + 117\r\n26 + 114\r\n52 + 143\r\n52 + 140\r\n195 ^ 192\r\n3 + 3\r\n6 ^ 3\r\n3 + 6\r\n3 + 5\r\n9 ^ 8\r\n"
            ],
            [
                "15\r\n",
                "11\r\n15 + 15\r\n30 + 30\r\n60 + 60\r\n120 ^ 15\r\n15 + 120\r\n15 + 119\r\n30 + 135\r\n30 + 134\r\n60 + 165\r\n60 + 164\r\n225 ^ 224\r\n"
            ],
            [
                "17\r\n",
                "25\r\n17 + 17\r\n34 + 34\r\n68 + 68\r\n136 + 136\r\n272 ^ 17\r\n17 + 272\r\n17 + 257\r\n34 + 289\r\n34 + 274\r\n68 + 323\r\n68 + 308\r\n136 + 391\r\n136 + 376\r\n527 ^ 512\r\n15 + 15\r\n30 + 30\r\n60 + 60\r\n120 ^ 15\r\n15 + 120\r\n15 + 119\r\n30 + 135\r\n30 + 134\r\n60 + 165\r\n60 + 164\r\n225 ^ 224\r\n"
            ]
        ]
    }
]