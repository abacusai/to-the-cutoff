[
    {
        "name": "Animals and Puzzle",
        "description": "Owl Sonya gave a huge lake puzzle of size n \u00d7 m to hedgehog Filya as a\nbirthday present. Friends immediately started to assemble the puzzle, but some\nparts of it turned out to be empty \u2014 there was no picture on them. Parts with\npicture on it are denoted by 1, while empty parts are denoted by 0. Rows of\nthe puzzle are numbered from top to bottom with integers from 1 to n, while\ncolumns are numbered from left to right with integers from 1 to m. Animals\ndecided to complete the picture and play with it, as it might be even more\nfun! Owl and hedgehog ask each other some queries. Each query is provided by\nfour integers x1, y1, x2, y2 which define the rectangle, where (x1, y1) stands\nfor the coordinates of the up left cell of the rectangle, while (x2, y2)\nstands for the coordinates of the bottom right cell. The answer to the query\nis the size of the maximum square consisting of picture parts only (only parts\ndenoted by 1) and located fully inside the query rectangle. Help Sonya and\nFilya answer t queries. Input The first line of the input contains two\nintegers n and m (1 \u2264 n, m \u2264 1000) \u2014 sizes of the puzzle. Each of the\nfollowing n lines contains m integers aij. Each of them is equal to 1 if the\ncorresponding cell contains a picture and 0 if it's empty. Next line contains\nan integer t (1 \u2264 t \u2264 1 000 000) \u2014 the number of queries. Then follow t lines\nwith queries' descriptions. Each of them contains four integers x1, y1, x2, y2\n(1 \u2264 x1 \u2264 x2 \u2264 n, 1 \u2264 y1 \u2264 y2 \u2264 m) \u2014 coordinates of the up left and bottom\nright cells of the query rectangle. Output Print t lines. The i-th of them\nshould contain the maximum size of the square consisting of 1-s and lying\nfully inside the query rectangle. Example Input 3 4 1 1 0 1 0 1 1 0 0 1 1 0 5\n1 1 2 3 2 1 3 2 3 2 3 4 1 1 3 4 1 2 3 4 Output 1 1 1 2 2\n\n",
        "cf_contest_id": 713,
        "cf_index": "D",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3 4\r\n1 1 0 1\r\n0 1 1 0\r\n0 1 1 0\r\n5\r\n1 1 2 3\r\n2 1 3 2\r\n3 2 3 4\r\n1 1 3 4\r\n1 2 3 4\r\n",
                "1\r\n1\r\n1\r\n2\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 10\r\n1 1 1 1 1 1 0 1 1 1\r\n6\r\n1 1 1 3\r\n1 1 1 3\r\n1 1 1 10\r\n1 1 1 9\r\n1 1 1 10\r\n1 1 1 10\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "4 10\r\n1 1 1 1 1 1 1 1 1 0\r\n1 1 1 1 0 1 1 1 1 1\r\n1 1 1 1 1 1 1 0 1 1\r\n1 1 1 1 1 1 1 1 1 1\r\n6\r\n3 3 4 6\r\n1 1 3 8\r\n3 3 3 10\r\n3 3 4 10\r\n2 2 2 9\r\n3 3 4 5\r\n",
                "2\r\n3\r\n1\r\n2\r\n1\r\n2\r\n"
            ],
            [
                "5 5\r\n1 1 0 1 1\r\n1 1 1 1 1\r\n1 1 1 0 1\r\n1 1 1 1 1\r\n1 0 1 1 0\r\n10\r\n3 1 3 1\r\n2 2 4 3\r\n1 5 2 5\r\n5 5 5 5\r\n1 5 2 5\r\n4 2 5 3\r\n3 4 3 5\r\n2 4 4 5\r\n5 2 5 5\r\n3 3 5 5\r\n",
                "1\r\n2\r\n1\r\n0\r\n1\r\n1\r\n1\r\n1\r\n1\r\n2\r\n"
            ],
            [
                "12 5\r\n1 1 1 1 1\r\n1 1 1 1 1\r\n1 1 1 1 1\r\n1 1 1 1 1\r\n1 1 1 1 1\r\n1 1 1 1 1\r\n1 1 1 1 1\r\n1 1 1 1 1\r\n1 1 1 1 1\r\n1 1 1 1 1\r\n1 1 1 1 1\r\n0 1 1 0 1\r\n6\r\n8 4 11 4\r\n1 2 9 5\r\n3 2 12 3\r\n4 2 9 5\r\n6 1 7 2\r\n1 3 9 4\r\n",
                "1\r\n4\r\n2\r\n4\r\n2\r\n2\r\n"
            ],
            [
                "10 10\r\n1 0 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 0 1 1 0\r\n1 1 1 0 1 0 1 0 1 1\r\n0 0 1 0 0 1 0 1 1 1\r\n1 1 1 1 1 1 1 1 1 0\r\n1 1 1 0 1 1 1 1 0 1\r\n1 0 1 0 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 0 1 1 1 1 0 1 1\r\n30\r\n3 3 7 10\r\n2 8 9 9\r\n4 4 4 6\r\n5 3 7 8\r\n6 7 7 9\r\n1 8 10 8\r\n3 2 3 7\r\n6 9 9 9\r\n8 1 8 5\r\n8 3 10 7\r\n9 6 9 9\r\n8 9 8 10\r\n8 2 10 9\r\n7 9 8 10\r\n6 4 10 8\r\n5 3 8 3\r\n3 7 9 7\r\n8 8 9 8\r\n3 3 3 6\r\n10 5 10 9\r\n7 7 10 7\r\n1 3 10 5\r\n1 5 7 10\r\n3 2 9 7\r\n8 2 8 7\r\n6 1 9 3\r\n10 8 10 8\r\n8 4 9 4\r\n7 8 10 10\r\n3 8 3 10\r\n",
                "2\r\n2\r\n1\r\n2\r\n2\r\n1\r\n1\r\n1\r\n1\r\n3\r\n1\r\n1\r\n3\r\n1\r\n4\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n3\r\n2\r\n3\r\n1\r\n2\r\n0\r\n1\r\n2\r\n1\r\n"
            ],
            [
                "1 1\r\n1\r\n1\r\n1 1 1 1\r\n",
                "1\r\n"
            ],
            [
                "1 1\r\n0\r\n1\r\n1 1 1 1\r\n",
                "0\r\n"
            ]
        ]
    }
]