[
    {
        "name": "Where is the Pizza?",
        "description": "While searching for the pizza, baby Hosssam came across two permutations\n\n    a\n and \n    b\n of length \n    n\n. Recall that a permutation is an array\nconsisting of \n    n\n distinct integers from \n    1\n to \n    n\n in arbitrary\norder. For example, \n    [2,3,1,5,4]\n is a permutation, but \n    [1,2,2]\n is\nnot a permutation (\n    2\n appears twice in the array) and \n    [1,3,4]\n is\nalso not a permutation (\n    n=3\n but there is \n    4\n in the array). Baby\nHosssam forgot about the pizza and started playing around with the two\npermutations. While he was playing with them, some elements of the first\npermutation got mixed up with some elements of the second permutation, and to\nhis surprise those elements also formed a permutation of size \n    n\n.\nSpecifically, he mixed up the permutations to form a new array \n    c\n in the\nfollowing way. For each \n    i\n (\n    1\n    \u2264 i\n    \u2264 n\n), he either made\n\n    c_i=a_i\n or \n    c_i=b_i\n. The array \n    c\n is a permutation. You know\npermutations \n    a\n, \n    b\n, and values at some positions in \n    c\n. Please\ncount the number different permutations \n    c\n that are consistent with the\ndescribed process and the given values. Since the answer can be large, print\nit modulo \n    10^9+7\n. It is guaranteed that there exists at least one\npermutation \n    c\n that satisfies all the requirements. Input The first line\ncontains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^5\n) \u2014 the number of test\ncases. The first line of each test case contains a single integer \n    n\n\n(\n    1\n    \u2264 n\n    \u2264 10^5\n) \u2014 the length of the permutations. The next line\ncontains \n    n\n distinct integers \n    a_1,a_2,\n    \u2026,a_n\n (\n    1\n    \u2264\n    a_i\n    \u2264 n\n) \u2014 the first permutation. The next line contains \n    n\n\ndistinct integers \n    b_1,b_2,\n    \u2026,b_n\n (\n    1\n    \u2264 b_i\n    \u2264 n\n) \u2014 the\nsecond permutation. The next line contains \n    n\n distinct integers\n\n    d_1,d_2,\n    \u2026,d_n\n (\n    d_i\n is either \n    0\n, \n    a_i\n, or\n\n    b_i\n) \u2014 the description of the known values of \n    c\n. If \n    d_i=0\n,\nthen there are no requirements on the value of \n    c_i\n. Otherwise, it is\nrequired that \n    c_i=d_i\n. It is guaranteed that there exists at least one\npermutation \n    c\n that satisfies all the requirements. It is guaranteed that\nthe sum of \n    n\n over all test cases does not exceed \n    5 \n    \u00b7 10^5\n.\nOutput For each test case, print the number of possible permutations \n    c\n,\nmodulo \n    10^9+7\n. Example Input 9 7 1 2 3 4 5 6 7 2 3 1 7 6 5 4 2 0 1 0 0 0\n0 1 1 1 0 6 1 5 2 4 6 3 6 5 3 1 4 2 6 0 0 0 0 0 8 1 6 4 7 2 3 8 5 3 2 8 1 4 5\n6 7 1 0 0 7 0 3 0 5 10 1 8 6 2 4 7 9 3 10 5 1 9 2 3 4 10 8 6 7 5 1 9 2 3 4 10\n8 6 7 5 7 1 2 3 4 5 6 7 2 3 1 7 6 5 4 0 0 0 0 0 0 0 5 1 2 3 4 5 1 2 3 4 5 0 0\n0 0 0 5 1 2 3 4 5 1 2 3 5 4 0 0 0 0 0 3 1 2 3 3 1 2 0 0 0 Output 4 1 2 2 1 8 1\n2 2 Note In the first test case, there are \n    4\n distinct permutation that\ncan be made using the process: \n    [2,3,1,4,5,6,7]\n, \n    [2,3,1,7,6,5,4]\n,\n\n    [2,3,1,4,6,5,7]\n, \n    [2,3,1,7,5,6,4]\n. In the second test case, there\nis only one distinct permutation that can be made using the process:\n\n    [1]\n. In the third test case, there are \n    2\n distinct permutation that\ncan be made using the process: \n    [6,5,2,1,4,3]\n, \n    [6,5,3,1,4,2]\n. In\nthe fourth test case, there are \n    2\n distinct permutation that can be made\nusing the process: \n    [1,2,8,7,4,3,6,5]\n, \n    [1,6,4,7,2,3,8,5]\n. In the\nfifth test case, there is only one distinct permutation that can be made using\nthe process: \n    [1,9,2,3,4,10,8,6,7,5]\n.\n\n",
        "cf_contest_id": 1670,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "dsu",
            "graphs",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "9\r\n7\r\n1 2 3 4 5 6 7\r\n2 3 1 7 6 5 4\r\n2 0 1 0 0 0 0\r\n1\r\n1\r\n1\r\n0\r\n6\r\n1 5 2 4 6 3\r\n6 5 3 1 4 2\r\n6 0 0 0 0 0\r\n8\r\n1 6 4 7 2 3 8 5\r\n3 2 8 1 4 5 6 7\r\n1 0 0 7 0 3 0 5\r\n10\r\n1 8 6 2 4 7 9 3 10 5\r\n1 9 2 3 4 10 8 6 7 5\r\n1 9 2 3 4 10 8 6 7 5\r\n7\r\n1 2 3 4 5 6 7\r\n2 3 1 7 6 5 4\r\n0 0 0 0 0 0 0\r\n5\r\n1 2 3 4 5\r\n1 2 3 4 5\r\n0 0 0 0 0\r\n5\r\n1 2 3 4 5\r\n1 2 3 5 4\r\n0 0 0 0 0\r\n3\r\n1 2 3\r\n3 1 2\r\n0 0 0\r\n",
                "4\r\n1\r\n2\r\n2\r\n1\r\n8\r\n1\r\n2\r\n2\r\n"
            ]
        ],
        "private_cases": []
    }
]