[
    {
        "name": "Sloth",
        "description": "Sloth is bad, mkay? So we decided to prepare a problem to punish lazy guys.\nYou are given a tree, you should count the number of ways to remove an edge\nfrom it and then add an edge to it such that the final graph is a tree and has\na perfect matching. Two ways of this operation are considered different if\ntheir removed edges or their added edges aren't the same. The removed edge and\nthe added edge can be equal. A perfect matching is a subset of edges such that\neach vertex is an endpoint of exactly one of these edges. Input The first line\ncontains n (2 \u2264 n \u2264 5\u00b710^5) \u2014 the number of vertices. Each of the next n - 1\nlines contains two integers a and b (1 \u2264 a, b \u2264 n) \u2014 the endpoints of one\nedge. It's guaranteed that the graph is a tree. Output Output a single integer\n\u2014 the answer to the problem. Examples Input 4 1 2 2 3 3 4 Output 8 Input 5 1 2\n2 3 3 4 3 5 Output 0 Input 8 1 2 2 3 3 4 1 5 5 6 6 7 1 8 Output 22 Note In\nfirst sample, there are 8 ways: edge between 2 and 3 turns to edge between 1\nand 3, edge between 2 and 3 turns to edge between 1 and 4, edge between 2 and\n3 turns to edge between 2 and 3, edge between 2 and 3 turns to edge between 2\nand 4, edge between 1 and 2 turns to edge between 1 and 2, edge between 1 and\n2 turns to edge between 1 and 4, edge between 3 and 4 turns to edge between 1\nand 4, edge between 3 and 4 turns to edge between 3 and 4.\n\n",
        "cf_contest_id": 891,
        "cf_index": "D",
        "cf_rating": 3100,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dp",
            "graph matchings",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 2\r\n2 3\r\n3 4\r\n",
                "8"
            ],
            [
                "5\r\n1 2\r\n2 3\r\n3 4\r\n3 5\r\n",
                "0\r\n"
            ],
            [
                "8\r\n1 2\r\n2 3\r\n3 4\r\n1 5\r\n5 6\r\n6 7\r\n1 8\r\n",
                "22"
            ]
        ],
        "private_cases": [
            [
                "18\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n2 12\r\n12 13\r\n12 15\r\n13 14\r\n3 16\r\n5 6\r\n5 8\r\n6 7\r\n8 9\r\n8 10\r\n10 11\r\n4 17\r\n4 18\r\n",
                "36"
            ],
            [
                "15\r\n1 3\r\n1 4\r\n1 5\r\n2 12\r\n12 13\r\n12 15\r\n13 14\r\n3 15\r\n5 6\r\n5 8\r\n6 7\r\n8 9\r\n8 10\r\n10 11\r\n",
                "0\r\n"
            ],
            [
                "28\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n2 12\r\n12 13\r\n12 15\r\n13 14\r\n3 16\r\n5 6\r\n5 8\r\n6 7\r\n8 9\r\n8 10\r\n10 11\r\n4 17\r\n4 18\r\n18 19\r\n19 20\r\n20 21\r\n21 22\r\n22 24\r\n22 25\r\n22 26\r\n25 27\r\n27 23\r\n24 28\r\n",
                "104"
            ],
            [
                "2\r\n1 2\r\n",
                "1"
            ],
            [
                "32\r\n1 2\r\n1 3\r\n1 4\r\n2 5\r\n2 6\r\n5 11\r\n6 12\r\n3 7\r\n3 8\r\n7 13\r\n8 14\r\n4 9\r\n4 10\r\n9 15\r\n10 16\r\n17 18\r\n17 19\r\n17 20\r\n18 21\r\n18 22\r\n19 23\r\n19 24\r\n20 25\r\n20 26\r\n21 27\r\n22 28\r\n23 29\r\n24 30\r\n25 31\r\n26 32\r\n4 18\r\n",
                "192"
            ],
            [
                "3\r\n1 2\r\n2 3\r\n",
                "0\r\n"
            ],
            [
                "5\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n",
                "0\r\n"
            ]
        ]
    }
]