[
    {
        "name": "The Cake Is a Lie",
        "description": "There is a \n    n \n    \u00d7 m\n grid. You are standing at cell \n    (1, 1)\n and\nyour goal is to finish at cell \n    (n, m)\n. You can move to the neighboring\ncells to the right or down. In other words, suppose you are standing at cell\n\n    (x, y)\n. You can: move right to the cell \n    (x, y + 1)\n \u2014 it costs\n\n    x\n burles; move down to the cell \n    (x + 1, y)\n \u2014 it costs \n    y\n\nburles. Can you reach cell \n    (n, m)\n spending exactly \n    k\n burles? Input\nThe first line contains the single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n)\n\u2014 the number of test cases. The first and only line of each test case contains\nthree integers \n    n\n, \n    m\n, and \n    k\n (\n    1 \n    \u2264 n, m \n    \u2264 100\n;\n\n    0 \n    \u2264 k \n    \u2264 10^4\n) \u2014 the sizes of grid and the exact amount of money\nyou need to spend. Output For each test case, if you can reach cell \n    (n,\n    m)\n spending exactly \n    k\n burles, print YES. Otherwise, print NO. You may\nprint every letter in any case you want (so, for example, the strings yEs,\nyes, Yes and YES are all recognized as positive answer). Example Input 6 1 1 0\n2 2 2 2 2 3 2 2 4 1 4 3 100 100 10000 Output YES NO YES NO YES NO Note In the\nfirst test case, you are already in the final cell, so you spend \n    0\n\nburles. In the second, third and fourth test cases, there are two paths from\n\n    (1, 1)\n to \n    (2, 2)\n: \n    (1, 1)\n \n    \u2192\n \n    (1, 2)\n\n\n    \u2192\n \n    (2, 2)\n or \n    (1, 1)\n \n    \u2192\n \n    (2,\n    1)\n \n    \u2192\n \n    (2, 2)\n. Both costs \n    1 + 2 = 3\n burles, so\nit's the only amount of money you can spend. In the fifth test case, there is\nthe only way from \n    (1, 1)\n to \n    (1, 4)\n and it costs \n    1 + 1 + 1 =\n    3\n burles.\n\n",
        "cf_contest_id": 1519,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n1 1 0\r\n2 2 2\r\n2 2 3\r\n2 2 4\r\n1 4 3\r\n100 100 10000\r\n",
                "YES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "9\r\n1 1 0\r\n2 2 2\r\n2 2 3\r\n2 2 4\r\n1 4 3\r\n100 100 10000\r\n3 3 7\r\n3 3 9\r\n2 4 8\r\n",
                "YES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\n"
            ]
        ]
    }
]