[
    {
        "name": "Ilya And The Tree",
        "description": "Ilya is very fond of graphs, especially trees. During his last trip to the\nforest Ilya found a very interesting tree rooted at vertex 1. There is an\ninteger number written on each vertex of the tree; the number written on\nvertex i is equal to ai. Ilya believes that the beauty of the vertex x is the\ngreatest common divisor of all numbers written on the vertices on the path\nfrom the root to x, including this vertex itself. In addition, Ilya can change\nthe number in one arbitrary vertex to 0 or leave all vertices unchanged. Now\nfor each vertex Ilya wants to know the maximum possible beauty it can have.\nFor each vertex the answer must be considered independently. The beauty of the\nroot equals to number written on it. Input First line contains one integer\nnumber n \u2014 the number of vertices in tree (1 \u2264 n \u2264 2\u00b710^5). Next line contains\nn integer numbers ai (1 \u2264 i \u2264 n, 1 \u2264 ai \u2264 2\u00b710^5). Each of next n - 1 lines\ncontains two integer numbers x and y (1 \u2264 x, y \u2264 n, x \u2260 y), which means that\nthere is an edge (x, y) in the tree. Output Output n numbers separated by\nspaces, where i-th number equals to maximum possible beauty of vertex i.\nExamples Input 2 6 2 1 2 Output 6 6 Input 3 6 2 3 1 2 1 3 Output 6 6 6 Input 1\n10 Output 10\n\n",
        "cf_contest_id": 842,
        "cf_index": "C",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graphs",
            "math",
            "number theory",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n6 2\r\n1 2\r\n",
                "6 6 "
            ],
            [
                "3\r\n6 2 3\r\n1 2\r\n1 3\r\n",
                "6 6 6 "
            ],
            [
                "1\r\n10\r\n",
                "10 "
            ]
        ],
        "private_cases": [
            [
                "10\r\n2 3 4 5 6 7 8 9 10 11\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n4 8\r\n8 9\r\n9 10\r\n",
                "2 3 2 1 1 1 1 1 1 1 "
            ],
            [
                "4\r\n6 2 3 2\r\n1 2\r\n2 3\r\n3 4\r\n",
                "6 6 3 2 "
            ]
        ]
    }
]