[
    {
        "name": "Is It Rated?",
        "description": "The popular improv website Interpretation Impetus hosts regular improv\ncontests and maintains a rating of the best performers. However, since improv\ncan often go horribly wrong, the website is notorious for declaring improv\ncontests unrated. It now holds a wager before each improv contest where the\nparticipants try to predict whether it will be rated or unrated, and they are\nnow more popular than the improv itself. Izzy and \n    n\n other participants\ntake part in each wager. First, they each make their prediction, expressed as\n1 (\"rated\") or 0 (\"unrated\"). Izzy always goes last, so she knows the\npredictions of the other participants when making her own. Then, the actual\ncompetition takes place and it is declared either rated or unrated. You need\nto write a program that will interactively play as Izzy. There will be \n    m\n\nwagers held in 2021, and Izzy's goal is to have at most \n    1.3\n    \u00b7 b +\n    100\n wrong predictions after all those wagers, where \n    b\n is the smallest\nnumber of wrong predictions that any other wager participant will have after\nall those wagers. The number \n    b\n is not known in advance. Izzy also knows\nnothing about the other participants \u2014 they might somehow always guess\ncorrectly, or their predictions might be correlated. Izzy's predictions,\nthough, do not affect the predictions of the other participants and the\ndecision on the contest being rated or not \u2014 in other words, in each test\ncase, your program always receives the same inputs, no matter what it outputs.\nInteraction First, a solution must read two integers \n    n\n (\n    1 \n    \u2264 n\n    \n    \u2264 1000\n) and \n    m\n (\n    1 \n    \u2264 m \n    \u2264 10\n     000\n). Then, the\nsolution must process \n    m\n wagers. For each of them, the solution must\nfirst read a string consisting of \n    n\n 0s and 1s, in which the \n    i\n-th\ncharacter denotes the guess of the \n    i\n-th participant. Then, the solution\nmust print Izzy's guess as 0 or 1. Don't forget to flush the output after\nprinting it! Then, the solution must read the actual outcome, also as 0 or 1,\nand then proceed to the next wager, if this wasn't the last one. Your solution\nwill be considered correct if it makes at most \n    1.3\n    \u00b7 b + 100\n\nmistakes, where \n    b\n is the smallest number of mistakes made by any other\nparticipant. Note that if a solution outputs anything except 0 or 1 for a\nwager, it will be considered incorrect even if it made no other mistakes.\nThere are 200 test cases in this problem. Example Input 3 4 000 1 100 1 001 0\n111 1 Output 0 0 1 1 Note In the example, the participants made 1, 2, and 3\nmistakes respectively, therefore \n    b=1\n (the smallest of these numbers).\nIzzy made 3 mistakes, which were not more than \n    1.3\n    \u00b7 b + 100=101.3\n,\nso these outputs are good enough to pass this test case (as are any other\nvalid outputs).\n\n",
        "cf_contest_id": 1510,
        "cf_index": "I",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "interactive",
            "math",
            "probabilities"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3 4\r\n000 1\r\n100 1\r\n001 0\r\n111 1\r\n",
                "0\r\n1\r\n1\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]