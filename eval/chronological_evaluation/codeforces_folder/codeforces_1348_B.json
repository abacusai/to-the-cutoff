[
    {
        "name": "Phoenix and Beauty",
        "description": "Phoenix loves beautiful arrays. An array is beautiful if all its subarrays of\nlength \n    k\n have the same sum. A subarray of an array is any sequence of\nconsecutive elements. Phoenix currently has an array \n    a\n of length\n\n    n\n. He wants to insert some number of integers, possibly zero, into his\narray such that it becomes beautiful. The inserted integers must be between\n\n    1\n and \n    n\n inclusive. Integers may be inserted anywhere (even before\nthe first or after the last element), and he is not trying to minimize the\nnumber of inserted integers. Input The input consists of multiple test cases.\nThe first line contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 50\n) \u2014 the\nnumber of test cases. The first line of each test case contains two integers\n\n    n\n and \n    k\n (\n    1 \n    \u2264 k \n    \u2264 n \n    \u2264 100\n). The second line of\neach test case contains \n    n\n space-separated integers (\n    1 \n    \u2264 a_i \n    \u2264\n    n\n) \u2014 the array that Phoenix currently has. This array may or may not be\nalready beautiful. Output For each test case, if it is impossible to create a\nbeautiful array, print -1. Otherwise, print two lines. The first line should\ncontain the length of the beautiful array \n    m\n (\n    n \n    \u2264 m \n    \u2264\n    10^4\n). You don't need to minimize \n    m\n. The second line should contain\n\n    m\n space-separated integers (\n    1 \n    \u2264 b_i \n    \u2264 n\n) \u2014 a beautiful\narray that Phoenix can obtain after inserting some, possibly zero, integers\ninto his array \n    a\n. You may print integers that weren't originally in\narray \n    a\n. If there are multiple solutions, print any. It's guaranteed\nthat if we can make array \n    a\n beautiful, we can always make it with\nresulting length no more than \n    10^4\n. Example Input 4 4 2 1 2 2 1 4 3 1 2\n2 1 3 2 1 2 3 4 4 4 3 4 2 Output 5 1 2 1 2 1 4 1 2 2 1 -1 7 4 3 2 1 4 3 2 Note\nIn the first test case, we can make array \n    a\n beautiful by inserting the\ninteger \n    1\n at index \n    3\n (in between the two existing \n    2\ns). Now,\nall subarrays of length \n    k=2\n have the same sum \n    3\n. There exists many\nother possible solutions, for example: \n    2, 1, 2, 1, 2, 1\n \n    1, 2, 1, 2,\n    1, 2\n In the second test case, the array is already beautiful: all subarrays\nof length \n    k=3\n have the same sum \n    5\n. In the third test case, it can\nbe shown that we cannot insert numbers to make array \n    a\n beautiful. In the\nfourth test case, the array \n    b\n shown is beautiful and all subarrays of\nlength \n    k=4\n have the same sum \n    10\n. There exist other solutions also.\n\n",
        "cf_contest_id": 1348,
        "cf_index": "B",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4 2\r\n1 2 2 1\r\n4 3\r\n1 2 2 1\r\n3 2\r\n1 2 3\r\n4 4\r\n4 3 4 2\r\n",
                "8 1 2 1 2 1 2 1 2\r\n12 1 2 1 1 2 1 1 2 1 1 2 1\r\n-1\r\n16 2 3 4 2 2 3 4 2 2 3 4 2 2 3 4 2\r\n"
            ]
        ],
        "private_cases": []
    }
]