[
    {
        "name": "Secret Combination",
        "description": "You got a box with a combination lock. The lock has a display showing n\ndigits. There are two buttons on the box, each button changes digits on the\ndisplay. You have quickly discovered that the first button adds 1 to all the\ndigits (all digits 9 become digits 0), and the second button shifts all the\ndigits on the display one position to the right (the last digit becomes the\nfirst one). For example, if the display is currently showing number 579, then\nif we push the first button, the display will show 680, and if after that we\npush the second button, the display will show 068. You know that the lock will\nopen if the display is showing the smallest possible number that can be\nobtained by pushing the buttons in some order. The leading zeros are ignored\nwhile comparing numbers. Now your task is to find the desired number. Input\nThe first line contains a single integer n (1 \u2264 n \u2264 1000) \u2014 the number of\ndigits on the display. The second line contains n digits \u2014 the initial state\nof the display. Output Print a single line containing n digits \u2014 the desired\nstate of the display containing the smallest possible number. Examples Input 3\n579 Output 024 Input 4 2014 Output 0142\n\n",
        "cf_contest_id": 496,
        "cf_index": "B",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n579\r\n",
                "024\r\n"
            ],
            [
                "4\r\n2014\r\n",
                "0142\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "3\r\n039\r\n",
                "014\r\n"
            ],
            [
                "4\r\n4444\r\n",
                "0000\r\n"
            ],
            [
                "5\r\n46802\r\n",
                "02468\r\n"
            ],
            [
                "10\r\n4447444444\r\n",
                "0000000003\r\n"
            ],
            [
                "10\r\n5810438174\r\n",
                "0147609473\r\n"
            ],
            [
                "30\r\n027027027027027027027027027027\r\n",
                "027027027027027027027027027027\r\n"
            ],
            [
                "50\r\n41012516454101251645410125164541012516454101251645\r\n",
                "01076781720107678172010767817201076781720107678172\r\n"
            ],
            [
                "72\r\n464553044645330446455304464553064645530445455304464553044645530446455304\r\n",
                "001011960020119600201196002011960020119600201996002011960020119620201196\r\n"
            ],
            [
                "100\r\n2144315253572020279108092911160072328496568665545836825277616363478721946398140227406814602154768031\r\n",
                "0005996121738545755443472571416650525236761083528703911639570359104365792010332041424619191680979818\r\n"
            ],
            [
                "200\r\n79025531557298703099245700860027432585447902553155729870309924570086002743258544790255315572987030992457008600274325854479025531557298703099245700860027432585447902553155729870309924570086002743258544\r\n",
                "00274325854479025531557298703099245700860027432585447902553155729870309924570086002743258544790255315572987030992457008600274325854479025531557298703099245700860027432585447902553155729870309924570086\r\n"
            ],
            [
                "100\r\n6669666666666666666866266666666666666666666666666666666666666666626666666666666966666766665667666656\r\n",
                "0000000000000000000000000000000000000000006000000000000030000010000900100009000030000000000000002006\r\n"
            ],
            [
                "1\r\n0\r\n",
                "0\r\n"
            ]
        ]
    }
]