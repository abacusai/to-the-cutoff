[
    {
        "name": "Newspaper Headline",
        "description": "A newspaper is published in Walrusland. Its heading is s1, it consists of\nlowercase Latin letters. Fangy the little walrus wants to buy several such\nnewspapers, cut out their headings, glue them one to another in order to get\none big string. After that walrus erase several letters from this string in\norder to get a new word s2. It is considered that when Fangy erases some\nletter, there's no whitespace formed instead of the letter. That is, the\nstring remains unbroken and it still only consists of lowercase Latin letters.\nFor example, the heading is \"abc\". If we take two such headings and glue them\none to the other one, we get \"abcabc\". If we erase the letters on positions 1\nand 5, we get a word \"bcac\". Which least number of newspaper headings s1 will\nFangy need to glue them, erase several letters and get word s2? Input The\ninput data contain two lines. The first line contain the heading s1, the\nsecond line contains the word s2. The lines only consist of lowercase Latin\nletters (1 \u2264 |s1| \u2264 10^4, 1 \u2264 |s2| \u2264 10^6). Output If it is impossible to get\nthe word s2 in the above-described manner, print \"-1\" (without the quotes).\nOtherwise, print the least number of newspaper headings s1, which Fangy will\nneed to receive the word s2. Examples Input abc xyz Output -1 Input abcd dabc\nOutput 2\n\n",
        "cf_contest_id": 91,
        "cf_index": "A",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "abc\r\nxyz\r\n",
                "-1\r\n"
            ],
            [
                "abcd\r\ndabc\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "ab\r\nbabaaab\r\n",
                "5\r\n"
            ],
            [
                "ab\r\nbaaabba\r\n",
                "6\r\n"
            ],
            [
                "fbaaigiihhfaahgdbddgeggjdeigfadhfddja\r\nhbghjgijijcdafcbgiedichdeebaddfddb\r\n",
                "-1\r\n"
            ],
            [
                "ibifgcfdbfdhihbifageaaadegbfbhgeebgdgiafgedchdg\r\ndedfebcfdigdefdediigcfcafbhhiacgfbeccfchd\r\n",
                "7\r\n"
            ],
            [
                "fcagdciidcedeaicgfffgjefaefaachfbfj\r\naiecchjehdgbjfcdjdefgfhiddjajeddiigidaibejabd\r\n",
                "11\r\n"
            ],
            [
                "ehfjaabjfedhddejjfcfijagefhjeahjcddhchahjbagi\r\nfbfdjbjhibjgjgaaajgdbcfdbhjcajcbbieijhcjgajhgaa\r\n",
                "10\r\n"
            ],
            [
                "ifjcedhjhdjhbiaededfefagigggcebfaebf\r\ngeibbffgeefbaghdbfidbbhabdbdgej\r\n",
                "9\r\n"
            ],
            [
                "eidfdfbbgjigghaddbjhcbdechecgghjgfjjcajjhaghdhd\r\nfcgecaefhgjjegbhjeaffcabifihhcadaibhi\r\n",
                "11\r\n"
            ]
        ]
    }
]