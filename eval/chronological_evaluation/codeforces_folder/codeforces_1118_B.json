[
    {
        "name": "Tanya and Candies",
        "description": "Tanya has \n    n\n candies numbered from \n    1\n to \n    n\n. The \n    i\n-th\ncandy has the weight \n    a_i\n. She plans to eat exactly \n    n-1\n candies and\ngive the remaining candy to her dad. Tanya eats candies in order of increasing\ntheir numbers, exactly one candy per day. Your task is to find the number of\nsuch candies \n    i\n (let's call these candies good) that if dad gets the\n\n    i\n-th candy then the sum of weights of candies Tanya eats in even days\nwill be equal to the sum of weights of candies Tanya eats in odd days. Note\nthat at first, she will give the candy, after it she will eat the remaining\ncandies one by one. For example, \n    n=4\n and weights are \n    [1, 4, 3, 3]\n.\nConsider all possible cases to give a candy to dad: Tanya gives the \n    1\n-st\ncandy to dad (\n    a_1=1\n), the remaining candies are \n    [4, 3, 3]\n. She\nwill eat \n    a_2=4\n in the first day, \n    a_3=3\n in the second day,\n\n    a_4=3\n in the third day. So in odd days she will eat \n    4+3=7\n and in\neven days she will eat \n    3\n. Since \n    7 \n     3\n this case shouldn't be\ncounted to the answer (this candy isn't good). Tanya gives the \n    2\n-nd\ncandy to dad (\n    a_2=4\n), the remaining candies are \n    [1, 3, 3]\n. She\nwill eat \n    a_1=1\n in the first day, \n    a_3=3\n in the second day,\n\n    a_4=3\n in the third day. So in odd days she will eat \n    1+3=4\n and in\neven days she will eat \n    3\n. Since \n    4 \n     3\n this case shouldn't be\ncounted to the answer (this candy isn't good). Tanya gives the \n    3\n-rd\ncandy to dad (\n    a_3=3\n), the remaining candies are \n    [1, 4, 3]\n. She\nwill eat \n    a_1=1\n in the first day, \n    a_2=4\n in the second day,\n\n    a_4=3\n in the third day. So in odd days she will eat \n    1+3=4\n and in\neven days she will eat \n    4\n. Since \n    4 = 4\n this case should be counted\nto the answer (this candy is good). Tanya gives the \n    4\n-th candy to dad\n(\n    a_4=3\n), the remaining candies are \n    [1, 4, 3]\n. She will eat\n\n    a_1=1\n in the first day, \n    a_2=4\n in the second day, \n    a_3=3\n in\nthe third day. So in odd days she will eat \n    1+3=4\n and in even days she\nwill eat \n    4\n. Since \n    4 = 4\n this case should be counted to the answer\n(this candy is good). In total there \n    2\n cases which should counted (these\ncandies are good), so the answer is \n    2\n. Input The first line of the input\ncontains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the\nnumber of candies. The second line of the input contains \n    n\n integers\n\n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^4\n), where \n    a_i\n\nis the weight of the \n    i\n-th candy. Output Print one integer \u2014 the number\nof such candies \n    i\n (good candies) that if dad gets the \n    i\n-th candy\nthen the sum of weights of candies Tanya eats in even days will be equal to\nthe sum of weights of candies Tanya eats in odd days. Examples Input 7 5 5 4 5\n5 5 6 Output 2 Input 8 4 8 8 7 8 4 4 5 Output 2 Input 9 2 3 4 2 2 3 2 2 4\nOutput 3 Note In the first example indices of good candies are \n    [1, 2]\n.\nIn the second example indices of good candies are \n    [2, 3]\n. In the third\nexample indices of good candies are \n    [4, 5, 9]\n.\n\n",
        "cf_contest_id": 1118,
        "cf_index": "B",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n5 5 4 5 5 5 6\r\n",
                "2\r\n"
            ],
            [
                "8\r\n4 8 8 7 8 4 4 5\r\n",
                "2\r\n"
            ],
            [
                "9\r\n2 3 4 2 2 3 2 2 4\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n1 4 3 3\r\n",
                "2\r\n"
            ],
            [
                "9\r\n3 4 4 4 4 3 4 4 3\r\n",
                "3\r\n"
            ],
            [
                "1\r\n4\r\n",
                "1\r\n"
            ],
            [
                "1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "1\r\n2\r\n",
                "1\r\n"
            ],
            [
                "1\r\n5\r\n",
                "1\r\n"
            ],
            [
                "1\r\n179\r\n",
                "1\r\n"
            ],
            [
                "1\r\n10\r\n",
                "1\r\n"
            ],
            [
                "1\r\n22\r\n",
                "1\r\n"
            ],
            [
                "1\r\n9\r\n",
                "1\r\n"
            ],
            [
                "1\r\n6575\r\n",
                "1\r\n"
            ],
            [
                "1\r\n3\r\n",
                "1\r\n"
            ],
            [
                "1\r\n24\r\n",
                "1\r\n"
            ],
            [
                "105\r\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 4 5 5 5 6\r\n",
                "100\r\n"
            ],
            [
                "1\r\n100\r\n",
                "1\r\n"
            ],
            [
                "1\r\n789\r\n",
                "1\r\n"
            ],
            [
                "1\r\n2308\r\n",
                "1\r\n"
            ],
            [
                "1\r\n234\r\n",
                "1\r\n"
            ],
            [
                "2\r\n1 1\r\n",
                "0\r\n"
            ],
            [
                "1\r\n7\r\n",
                "1\r\n"
            ]
        ]
    }
]