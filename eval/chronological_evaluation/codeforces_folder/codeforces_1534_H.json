[
    {
        "name": "Lost Nodes",
        "description": "This is an interactive problem. As he qualified for IOI this year, Little\nEricyi was given a gift from all his friends: a tree of \n    n\n nodes! On the\nflight to IOI Little Ericyi was very bored, so he decided to play a game with\nLittle Yvonne with his new tree. First, Little Yvonne selects two (not\nnecessarily different) nodes \n    a\n and \n    b\n on the tree (without telling\nEricyi), and then gives him a hint \n    f\n (which is some node on the path\nfrom \n    a\n to \n    b\n). Then, Little Ericyi is able to ask the following\nquestion repeatedly: If I rooted the tree at node \n    r\n (Ericyi gets to\nchoose \n    r\n), what would be the Lowest Common Ancestor of \n    a\n and\n\n    b\n?Little Ericyi's goal is to find the nodes \n    a\n and \n    b\n, and\nreport them to Little Yvonne. However, Little Yvonne thought this game was too\neasy, so before he gives the hint \n    f\n to Little Ericyi, he also wants him\nto first find the maximum number of queries required to determine \n    a\n and\n\n    b\n over all possibilities of \n    a\n, \n    b\n, and \n    f\n assuming\nLittle Ericyi plays optimally. Little Ericyi defines an optimal strategy as\none that makes the minimum number of queries. Of course, once Little Ericyi\nreplies with the maximum number of queries, Little Yvonne will only let him\nuse that many queries in the game. The tree, \n    a\n, \n    b\n, and \n    f\n are\nall fixed before the start of the game and do not change as queries are made.\nInteraction First read a line containing the integer \n    n\n (\n    1 \n    \u2264 n\n    \n    \u2264 10^5\n), the number of nodes in the tree. The next \n    n\u22121\n lines\ndescribe Little Ericyi's tree. These lines contain two integers \n    u\n and\n\n    v\n (\n    1 \n    \u2264 u,v \n    \u2264 n\n) denoting an edge between \n    u\n and\n\n    v\n (\n    u \n    \u2260 v\n). It is guaranteed that these edges form a tree.\nAfter that you should output \n    k\n, the maximum number of queries needed to\ndetermine \n    a\n and \n    b\n over all possibilities of \n    a\n, \n    b\n, and\n\n    f\n assuming Little Ericyi plays optimally. You should output end of line\nand flush the output after printing \n    k\n. After that read a line containing\nthe integer \n    f\n (\n    1 \n    \u2264 f \n    \u2264 n\n) \u2014 the hint: a node on the path\nfrom \n    a\n to \n    b\n, inclusive. After that, you can start making queries.\nYou will be limited to making at most \n    k\n queries, where \n    k\n is the\nnumber you printed. Each query is made in the format \"? r\", where \n    r\n is\nan integer \n    1 \n    \u2264 r \n    \u2264 n\n denoting the root node you want for the\nquery. You will then receive an integer \n    x\n (\n    1 \n    \u2264 x \n    \u2264 n\n), the\nLowest Common Ancestor of \n    a\n and \n    b\n if the tree was rooted at\n\n    r\n. When your program has found the nodes \n    a\n, \n    b\n, report the\nanswer in the following format: \"! a b\", where \n    a\n and \n    b\n are the two\nhidden nodes and terminate your program normally immediately after flushing\nthe output stream. You may output \n    a\n and \n    b\n in any order. After\nprinting a query do not forget to output end of line and flush the output.\nOtherwise, you will get Idleness limit exceeded. To do this, use:\nfflush(stdout) or cout.flush() in C++; System.out.flush() in Java;\nflush(output) in Pascal; stdout.flush() in Python; see documentation for other\nlanguages.If at any point you make an invalid output or make more than \n    k\n\nqueries, the interaction will terminate and you will receive a Wrong Answer\nverdict. An invalid output is defined as either an invalid query or a value of\n\n    k\n less than \n    0\n or greater than \n    n\n. Hacks To hack a solution,\nuse the following format: The first line contains the integer \n    n\n (\n    1\n    \n    \u2264 n \n    \u2264 10^5\n). The next \n    n\u22121\n lines contain two integers \n    u\n\nand \n    v\n (\n    1 \n    \u2264 u,v \n    \u2264 n\n) denoting an edge between \n    u\n and\n\n    v\n (\n    u \n    \u2260 v\n). These \n    n-1\n edges must form a tree. The next\nline of input contains the nodes \n    a\n and \n    b\n (\n    1 \n    \u2264 a,b \n    \u2264\n    n\n), separated by a space. The final line of input contains the integer\n\n    f\n (\n    1 \n    \u2264 f \n    \u2264 n\n). Node \n    f\n should be on the simple path\nfrom \n    a\n to \n    b\n (inclusive). Examples Input 4 3 2 2 1 2 4 1 1 2 2\nOutput 3 ? 1 ? 2 ? 3 ! 4 1 Input 5 3 1 1 4 4 5 4 2 1 4 1 4 Output 3 ? 4 ? 1 ?\n5 ! 1 4 Note Here is the the tree from the first sample interaction. Nodes\n\n    a\n and \n    b\n are highlighted. Notice that \n    a\n and \n    b\n can be\noutput in any order. Additionally, here are the answers to querying every\nsingle node \n    1,2,\n    \u2026,n\n for your convenience: \n    1\n: \n    1\n\n\n    2\n: \n    2\n \n    3\n: \n    2\n \n    4\n:\n\n    4\n__________________________________________ Here is the the tree from\nthe second sample interaction. Again, nodes \n    a\n and \n    b\n are\nhighlighted. Lastly, here are the answers to querying every single node\n\n    1,2,\n    \u2026,n\n (in example \n    2\n) for your convenience: \n    1\n:\n\n    1\n \n    2\n: \n    4\n \n    3\n: \n    1\n \n    4\n: \n    4\n \n    5\n: \n    4\n\n\n",
        "cf_contest_id": 1534,
        "cf_index": "H",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dp",
            "graphs",
            "interactive",
            "sortings",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3 2\r\n2 1\r\n2 4\r\n3 1\r\n1\r\n",
                "3\r\n"
            ],
            [
                "5\r\n3 1\r\n1 4\r\n4 5\r\n4 2\r\n1 4\r\n1\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "2\r\n2 1\r\n1 2\r\n2\r\n",
                "1\r\n"
            ],
            [
                "3\r\n2 1\r\n1 3\r\n3 1\r\n3\r\n",
                "2\r\n"
            ],
            [
                "10\r\n8 10\r\n2 9\r\n7 8\r\n4 1\r\n7 3\r\n4 7\r\n2 5\r\n2 4\r\n4 6\r\n3 5\r\n2\r\n",
                "5\r\n"
            ],
            [
                "5\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 5\r\n1\r\n",
                "4\r\n"
            ],
            [
                "5\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 4\r\n1\r\n",
                "4\r\n"
            ],
            [
                "5\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 3\r\n1\r\n",
                "4\r\n"
            ],
            [
                "5\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 2\r\n1\r\n",
                "4\r\n"
            ],
            [
                "5\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 1\r\n1\r\n",
                "4\r\n"
            ],
            [
                "22\r\n1 2\r\n2 3\r\n2 4\r\n1 5\r\n1 6\r\n3 7\r\n3 8\r\n3 9\r\n3 10\r\n4 11\r\n4 12\r\n4 13\r\n4 14\r\n5 15\r\n5 16\r\n5 17\r\n5 18\r\n6 19\r\n6 20\r\n6 21\r\n6 22\r\n7 22\r\n1\r\n",
                "10\r\n"
            ]
        ]
    }
]