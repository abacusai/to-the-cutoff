[
    {
        "name": "Little Elephant and Broken Sorting",
        "description": "The Little Elephant loves permutations of integers from 1 to n very much. But\nmost of all he loves sorting them. To sort a permutation, the Little Elephant\nrepeatedly swaps some elements. As a result, he must receive a permutation 1,\n2, 3, ..., n. This time the Little Elephant has permutation p1, p2, ..., pn.\nIts sorting program needs to make exactly m moves, during the i-th move it\nswaps elements that are at that moment located at the ai-th and the bi-th\npositions. But the Little Elephant's sorting program happened to break down\nand now on every step it can equiprobably either do nothing or swap the\nrequired elements. Now the Little Elephant doesn't even hope that the program\nwill sort the permutation, but he still wonders: if he runs the program and\ngets some permutation, how much will the result of sorting resemble the sorted\none? For that help the Little Elephant find the mathematical expectation of\nthe number of permutation inversions after all moves of the program are\ncompleted. We'll call a pair of integers i, j (1 \u2264 i < j \u2264 n) an inversion in\npermutatuon p1, p2, ..., pn, if the following inequality holds: pi > pj. Input\nThe first line contains two integers n and m (1 \u2264 n, m \u2264 1000, n > 1) \u2014 the\npermutation size and the number of moves. The second line contains n distinct\nintegers, not exceeding n \u2014 the initial permutation. Next m lines each contain\ntwo integers: the i-th line contains integers ai and bi (1 \u2264 ai, bi \u2264 n, ai \u2260\nbi) \u2014 the positions of elements that were changed during the i-th move. Output\nIn the only line print a single real number \u2014 the answer to the problem. The\nanswer will be considered correct if its relative or absolute error does not\nexceed 10^-6. Examples Input 2 1 1 2 1 2 Output 0.500000000 Input 4 3 1 3 2 4\n1 2 2 3 1 4 Output 3.000000000\n\n",
        "cf_contest_id": 258,
        "cf_index": "D",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "math",
            "probabilities"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 1\r\n1 2\r\n1 2\r\n",
                "0.500000"
            ],
            [
                "4 3\r\n1 3 2 4\r\n1 2\r\n2 3\r\n1 4\r\n",
                "3.000000"
            ]
        ],
        "private_cases": [
            [
                "7 4\r\n7 6 4 2 1 5 3\r\n1 3\r\n2 1\r\n7 2\r\n3 5\r\n",
                "11.250000"
            ],
            [
                "10 1\r\n1 2 3 4 5 6 7 8 9 10\r\n1 10\r\n",
                "8.500000"
            ],
            [
                "9 20\r\n9 8 7 6 5 4 3 2 1\r\n4 6\r\n9 4\r\n5 9\r\n6 8\r\n1 9\r\n5 8\r\n6 9\r\n7 3\r\n1 9\r\n8 3\r\n4 5\r\n9 6\r\n3 8\r\n4 1\r\n1 2\r\n3 2\r\n4 9\r\n6 7\r\n7 5\r\n9 6\r\n",
                "20.105408"
            ],
            [
                "20 7\r\n3 17 7 14 11 4 1 18 20 19 13 12 5 6 15 16 9 2 8 10\r\n19 13\r\n20 6\r\n19 11\r\n12 3\r\n10 19\r\n14 10\r\n3 16\r\n",
                "102.250000"
            ],
            [
                "100 1\r\n78 52 95 76 96 49 53 59 77 100 64 11 9 48 15 17 44 46 21 54 39 68 43 4 32 28 73 6 16 62 72 84 65 86 98 75 33 45 25 3 91 82 2 92 63 88 7 50 97 93 14 22 20 42 60 55 80 85 29 34 56 71 83 38 26 47 90 70 51 41 40 31 37 12 35 99 67 94 1 87 57 8 61 19 23 79 36 18 66 74 5 27 81 69 24 58 13 10 89 30\r\n17 41\r\n",
                "2659.500000"
            ],
            [
                "125 8\r\n111 69 3 82 24 38 4 39 42 22 92 6 16 10 8 45 17 91 84 53 5 46 124 47 18 57 43 73 114 102 121 105 118 95 104 98 72 20 56 60 123 80 103 70 65 107 67 112 101 108 99 49 12 94 2 68 119 109 59 40 86 116 88 63 110 14 13 120 41 64 89 71 15 35 81 51 113 90 55 122 1 75 54 33 28 7 125 9 100 115 19 58 61 83 117 52 106 87 11 50 93 32 21 96 26 78 48 79 23 36 66 27 31 62 25 77 30 74 76 44 97 85 29 34 37\r\n33 17\r\n84 103\r\n71 33\r\n5 43\r\n23 15\r\n65 34\r\n125 58\r\n51 69\r\n",
                "3919.000000"
            ],
            [
                "100 2\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\r\n88 90\r\n62 77\r\n",
                "16.000000"
            ]
        ]
    }
]