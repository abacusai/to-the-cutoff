[
    {
        "name": "Falling Sand (Hard Version)",
        "description": "This is the hard version of the problem. The difference between the versions\nis the constraints on \n    a_i\n. You can make hacks only if all versions of\nthe problem are solved. Little Dormi has recently received a puzzle from his\nfriend and needs your help to solve it. The puzzle consists of an upright\nboard with \n    n\n rows and \n    m\n columns of cells, some empty and some\nfilled with blocks of sand, and \n    m\n non-negative integers\n\n    a_1,a_2,\n    \u2026,a_m\n (\n    0 \n    \u2264 a_i \n    \u2264 n\n). In this version of\nthe problem, \n    a_i\n will always be not greater than the number of blocks of\nsand in column \n    i\n. When a cell filled with a block of sand is disturbed,\nthe block of sand will fall from its cell to the sand counter at the bottom of\nthe column (each column has a sand counter). While a block of sand is falling,\nother blocks of sand that are adjacent at any point to the falling block of\nsand will also be disturbed and start to fall. Specifically, a block of sand\ndisturbed at a cell \n    (i,j)\n will pass through all cells below and\nincluding the cell \n    (i,j)\n within the column, disturbing all adjacent\ncells along the way. Here, the cells adjacent to a cell \n    (i,j)\n are\ndefined as \n    (i-1,j)\n, \n    (i,j-1)\n, \n    (i+1,j)\n, and \n    (i,j+1)\n (if\nthey are within the grid). Note that the newly falling blocks can disturb\nother blocks. In one operation you are able to disturb any piece of sand. The\npuzzle is solved when there are at least \n    a_i\n blocks of sand counted in\nthe \n    i\n-th sand counter for each column from \n    1\n to \n    m\n. You are\nnow tasked with finding the minimum amount of operations in order to solve the\npuzzle. Note that Little Dormi will never give you a puzzle that is impossible\nto solve. Input The first line consists of two space-separated positive\nintegers \n    n\n and \n    m\n (\n    1 \n    \u2264 n \n    \u00b7 m \n    \u2264 400\n     000\n).\nEach of the next \n    n\n lines contains \n    m\n characters, describing each\nrow of the board. If a character on a line is '.', the corresponding cell is\nempty. If it is '#', the cell contains a block of sand. The final line\ncontains \n    m\n non-negative integers \n    a_1,a_2,\n    \u2026,a_m\n (\n    0 \n    \u2264\n    a_i \n    \u2264 n\n) \u2014 the minimum amount of blocks of sand that needs to fall\nbelow the board in each column. In this version of the problem, \n    a_i\n will\nalways be not greater than the number of blocks of sand in column \n    i\n.\nOutput Print one non-negative integer, the minimum amount of operations needed\nto solve the puzzle. Examples Input 5 7 #....#. .#.#... #....#. #....##\n#.#.... 4 1 1 1 0 3 1 Output 3 Input 3 3 #.# #.. ##. 3 1 1 Output 1 Input 7 5\n.#..# #.... ..##. ..##. ..### ..#.. #.##. 0 0 2 4 2 Output 1 Note For example\n\n    1\n, by disturbing both blocks of sand on the first row from the top at\nthe first and sixth columns from the left, and the block of sand on the second\nrow from the top and the fourth column from the left, it is possible to have\nall the required amounts of sand fall in each column. It can be proved that\nthis is not possible with fewer than \n    3\n operations, and as such the\nanswer is \n    3\n. Here is the puzzle from the first example. For example\n\n    2\n, by disturbing the cell on the top row and rightmost column, one can\ncause all of the blocks of sand in the board to fall into the counters at the\nbottom. Thus, the answer is \n    1\n. Here is the puzzle from the second\nexample. For example \n    3\n, by disturbing the cell on the top row and\nrightmost column, it is possible to have all the required amounts of sand fall\nin each column. It can be proved that this is not possible with fewer than\n\n    1\n operation, and as such the answer is \n    1\n. Here is the puzzle from\nthe third example.\n\n",
        "cf_contest_id": 1534,
        "cf_index": "F2",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5 7\r\n#....#.\r\n.#.#...\r\n#....#.\r\n#....##\r\n#.#....\r\n4 1 1 1 0 3 1\r\n",
                "3"
            ],
            [
                "3 3\r\n#.#\r\n#..\r\n##.\r\n3 1 1\r\n",
                "1"
            ],
            [
                "7 5\r\n.#..#\r\n#....\r\n..##.\r\n..##.\r\n..###\r\n..#..\r\n#.##.\r\n0 0 2 4 2\r\n",
                "1"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n.\r\n0\r\n",
                "0"
            ],
            [
                "1 1\r\n#\r\n1\r\n",
                "1"
            ]
        ]
    }
]