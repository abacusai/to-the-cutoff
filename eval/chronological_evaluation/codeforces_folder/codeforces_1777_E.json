[
    {
        "name": "Edge Reverse",
        "description": "You will be given a weighted directed graph of \n    n\n nodes and \n    m\n\ndirected edges, where the \n    i\n-th edge has a weight of \n    w_i\n (\n    1\n    \n    \u2264 i \n    \u2264 m\n). You need to reverse some edges of this graph so that\nthere is at least one node in the graph from which every other node is\nreachable. The cost of these reversals is equal to the maximum weight of all\nreversed edges. If no edge reversal is required, assume the cost to be\n\n    0\n. It is guaranteed that no self-loop or duplicate edge exists. Find the\nminimum cost required for completing the task. If there is no solution, print\na single integer \n    -1\n. Input Each test contains multiple test cases. The\nfirst line contains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    10^5\n). The description of the test cases follows. Each test case begins\nwith a line containing two integers \n    n\n and \n    m\n (\n    2 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n, \n    1 \n    \u2264 m \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of nodes\nin the graph and the number of edges in the graph. The next \n    m\n lines of\neach test case contain \n    3\n integers each \u2014 \n    u\n, \n    v\n, \n    w\n (\n    1\n    \n    \u2264 u, v \n    \u2264 n\n, \n    1 \n    \u2264 w \n    \u2264 10^9\n), indicating an edge from\n\n    u\n to \n    v\n with a weight of \n    w\n. It is guaranteed that no edge\nconnects a vertex to itself, and no pair of edges share the same origin and\ndestination simultaneously. It is guaranteed that the sum of \n    n\n and the\nsum of \n    m\n over all test cases do not exceed \n    2 \n    \u00b7 10^5\n. Output\nFor each test case, output the minimum cost. If there is no solution, print\n\n    -1\n. Example Input 4 2 1 1 2 3 5 4 1 2 10 2 3 10 3 1 10 4 5 10 4 5 1 2\n10000 2 3 20000 1 3 30000 4 2 500 4 3 20 4 5 1 2 10000 2 3 20000 1 3 30000 4 2\n5 4 3 20 Output 0 -1 20 5 Note In the first test case, an edge exists from\n\n    1\n to \n    2\n, so all nodes are reachable (from \n    1\n). In the second\ntest case, no nodes are reachable from any node no matter what edges we\nreverse, so the answer is \n    -1\n. In the third test case, reversing the\n\n    4\n-th or \n    5\n-th edge allows all nodes to be reachable from \n    1\n.\nWe choose the \n    5\n-th edge here because its weight is smaller.\n\n",
        "cf_contest_id": 1777,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dfs and similar",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4\r\n2 1\r\n1 2 3\r\n5 4\r\n1 2 10\r\n2 3 10\r\n3 1 10\r\n4 5 10\r\n4 5\r\n1 2 10000\r\n2 3 20000\r\n1 3 30000\r\n4 2 500\r\n4 3 20\r\n4 5\r\n1 2 10000\r\n2 3 20000\r\n1 3 30000\r\n4 2 5\r\n4 3 20\r\n",
                "0\r\n-1\r\n20\r\n5\r\n"
            ]
        ],
        "private_cases": []
    }
]