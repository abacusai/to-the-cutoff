[
    {
        "name": "Become Big For Me",
        "description": "Come, let's build a world where even the weak are not forgotten! \u2014Kijin Seija,\nDouble Dealing Characters Shinmyoumaru has a mallet that can turn objects\nbigger or smaller. She is testing it out on a sequence \n    a\n and a number\n\n    v\n whose initial value is \n    1\n. She wants to make \n    v =\n    \n    \n    _i\n     j\n    \n    a_i\n    \u00b7 a_j\n by no more than\n\n    10^5\n operations (\n    _i\n     j\n    \n    a_i\n    \u00b7\n    a_j\n denotes the \n    \n of all products of two distinct elements\nof the sequence \n    a\n). In each operation, she picks a subsequence \n    b\n\nof \n    a\n, and does one of the followings: Enlarge: \n    v = v \n    \u00b7\n    lcm(b)\n Reduce: \n    v = \n    v/\n    lcm(b)\n Note that\nshe does not need to guarantee that \n    v\n is an integer, that is, \n    v\n\ndoes not need to be a multiple of \n    lcm(b)\n when performing\nReduce. Moreover, she wants to guarantee that the total length of \n    b\n\nchosen over the operations does not exceed \n    10^6\n. Fine a possible\noperation sequence for her. You don't need to minimize anything. Input The\nfirst line contains a single integer \n    n\n (\n    2\n    \u2264 n\n    \u2264 10^5\n) \u2014\nthe size of sequence \n    a\n. The second line contains \n    n\n integers\n\n    a_1,a_2,\n    \u22ef,a_n\n (\n    1\n    \u2264 a_i\n    \u2264 10^6\n) \u2014 the sequence\n\n    a\n. It can be shown that the answer exists. Output The first line\ncontains a non-negative integer \n    k\n (\n    0\n    \u2264 k\n    \u2264 10^5\n) \u2014 the\nnumber of operations. The following \n    k\n lines contains several integers.\nFor each line, the first two integers \n    f\n (\n    f\n    \u2208\n    \n    0,1\n) and\n\n    p\n (\n    1\n    \u2264 p\n    \u2264 n\n) stand for the option you choose (\n    0\n for\nEnlarge and \n    1\n for Reduce) and the length of \n    b\n. The other \n    p\n\nintegers of the line \n    i_1,i_2,\n    \u2026,i_p\n (\n    1\n    \u2264\n    i_1<i_2<\n    \u2026<i_p\n    \u2264 n\n) represents the indexes of the subsequence.\nFormally, \n    b_j=a_i_j\n. Examples Input 3 6 10 15 Output 1 0 3 1 2 3 Input\n4 2 4 8 16 Output 2 0 1 4 1 1 1 Note Test case 1: \n    _i\n    \n    j\n    \n    a_i\n    \u00b7 a_j\n    \n    =\n    \n    \n    60,90,150\n    \n    =30\n. Perform \n    v =\n    v\n    \u00b7\n    lcm\n    \n    a_1,a_2,a_3\n    \n    =30\n. Test case 2:\n\n    _i\n     j\n    \n    a_i\n    \u00b7 a_j\n    \n    =8\n. Perform \n    v =\n    v\n    \u00b7\n    lcm\n    \n    a_4\n    \n    =16\n. Perform \n    v =\n    \n    v/\n    lcm\n    \n    a_1\n    \n    =8\n.\n\n",
        "cf_contest_id": 1687,
        "cf_index": "E",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n6 10 15\r\n",
                "4\r\n0 1 1 \r\n0 1 2 \r\n0 1 3 \r\n1 3 1 2 3 \r\n"
            ],
            [
                "4\r\n2 4 8 16\r\n",
                "10\r\n0 1 1 \r\n0 1 2 \r\n0 1 3 \r\n1 3 1 2 3 \r\n0 1 4 \r\n1 3 1 2 4 \r\n1 3 1 3 4 \r\n1 3 2 3 4 \r\n0 4 1 2 3 4 \r\n0 4 1 2 3 4 \r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n549643 64969\r\n",
                "2\r\n0 1 1 \r\n0 1 2 \r\n"
            ],
            [
                "2\r\n1000000 1000000\r\n",
                "2\r\n0 1 1 \r\n0 1 2 \r\n"
            ],
            [
                "2\r\n1 1\r\n",
                "2\r\n0 1 1 \r\n0 1 2 \r\n"
            ],
            [
                "2\r\n2 2\r\n",
                "2\r\n0 1 1 \r\n0 1 2 \r\n"
            ],
            [
                "2\r\n3 3\r\n",
                "2\r\n0 1 1 \r\n0 1 2 \r\n"
            ],
            [
                "2\r\n4 4\r\n",
                "2\r\n0 1 1 \r\n0 1 2 \r\n"
            ],
            [
                "2\r\n999983 999983\r\n",
                "2\r\n0 1 1 \r\n0 1 2 \r\n"
            ],
            [
                "3\r\n388319 726289 831371\r\n",
                "4\r\n0 1 1 \r\n0 1 2 \r\n0 1 3 \r\n1 3 1 2 3 \r\n"
            ],
            [
                "3\r\n1 1 1\r\n",
                "4\r\n0 1 1 \r\n0 1 2 \r\n0 1 3 \r\n1 3 1 2 3 \r\n"
            ],
            [
                "3\r\n2 2 2\r\n",
                "4\r\n0 1 1 \r\n0 1 2 \r\n0 1 3 \r\n1 3 1 2 3 \r\n"
            ],
            [
                "3\r\n4 4 4\r\n",
                "4\r\n0 1 1 \r\n0 1 2 \r\n0 1 3 \r\n1 3 1 2 3 \r\n"
            ],
            [
                "3\r\n999983 999983 999983\r\n",
                "4\r\n0 1 1 \r\n0 1 2 \r\n0 1 3 \r\n1 3 1 2 3 \r\n"
            ],
            [
                "3\r\n1000000 1000000 1000000\r\n",
                "4\r\n0 1 1 \r\n0 1 2 \r\n0 1 3 \r\n1 3 1 2 3 \r\n"
            ],
            [
                "2\r\n510510 510510\r\n",
                "2\r\n0 1 1 \r\n0 1 2 \r\n"
            ],
            [
                "3\r\n510510 510510 510510\r\n",
                "4\r\n0 1 1 \r\n0 1 2 \r\n0 1 3 \r\n1 3 1 2 3 \r\n"
            ],
            [
                "15\r\n570570 510510 510510 39270 39270 3570 3570 510 510 102 102 34 34 17 17\r\n",
                "10\r\n0 1 1 \r\n0 1 2 \r\n0 1 14 \r\n1 3 1 2 14 \r\n0 1 15 \r\n1 3 1 2 15 \r\n1 3 1 14 15 \r\n1 3 2 14 15 \r\n0 4 1 2 14 15 \r\n0 4 1 2 14 15 \r\n"
            ]
        ]
    }
]