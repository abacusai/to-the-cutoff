[
    {
        "name": "Fair",
        "description": "Some company is going to hold a fair in Byteland. There are \n    n\n towns in\nByteland and \n    m\n two-way roads between towns. Of course, you can reach any\ntown from any other town using roads. There are \n    k\n types of goods\nproduced in Byteland and every town produces only one type. To hold a fair you\nhave to bring at least \n    s\n different types of goods. It costs \n    d(u,v)\n\ncoins to bring goods from town \n    u\n to town \n    v\n where \n    d(u,v)\n is\nthe length of the shortest path from \n    u\n to \n    v\n. Length of a path is\nthe number of roads in this path. The organizers will cover all travel\nexpenses but they can choose the towns to bring goods from. Now they want to\ncalculate minimum expenses to hold a fair in each of \n    n\n towns. Input\nThere are \n    4\n integers \n    n\n, \n    m\n, \n    k\n, \n    s\n in the first\nline of input (\n    1 \n    \u2264 n \n    \u2264 10^5\n, \n    0 \n    \u2264 m \n    \u2264 10^5\n,\n\n    1 \n    \u2264 s \n    \u2264 k \n    \u2264 min(n, 100)\n) \u2014 the number of towns, the number\nof roads, the number of different types of goods, the number of different\ntypes of goods necessary to hold a fair. In the next line there are \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i\n    \u2264 k\n), where\n\n    a_i\n is the type of goods produced in the \n    i\n-th town. It is\nguaranteed that all integers between \n    1\n and \n    k\n occur at least once\namong integers \n    a_i\n. In the next \n    m\n lines roads are described.\nEach road is described by two integers \n    u\n \n    v\n (\n    1 \n    \u2264 u, v \n    \u2264\n    n\n, \n    u \n     v\n) \u2014 the towns connected by this road. It is guaranteed\nthat there is no more than one road between every two towns. It is guaranteed\nthat you can go from any town to any other town via roads. Output Print\n\n    n\n numbers, the \n    i\n-th of them is the minimum number of coins you\nneed to spend on travel expenses to hold a fair in town \n    i\n. Separate\nnumbers with spaces. Examples Input 5 5 4 3 1 2 4 3 2 1 2 2 3 3 4 4 1 4 5\nOutput 2 2 2 2 3 Input 7 6 3 2 1 2 3 3 2 2 1 1 2 2 3 3 4 2 5 5 6 6 7 Output 1\n1 1 2 2 1 1 Note Let's look at the first sample. To hold a fair in town\n\n    1\n you can bring goods from towns \n    1\n (\n    0\n coins), \n    2\n\n(\n    1\n coin) and \n    4\n (\n    1\n coin). Total numbers of coins is \n    2\n.\nTown \n    2\n: Goods from towns \n    2\n (\n    0\n), \n    1\n (\n    1\n), \n    3\n\n(\n    1\n). Sum equals \n    2\n. Town \n    3\n: Goods from towns \n    3\n\n(\n    0\n), \n    2\n (\n    1\n), \n    4\n (\n    1\n). Sum equals \n    2\n. Town\n\n    4\n: Goods from towns \n    4\n (\n    0\n), \n    1\n (\n    1\n), \n    5\n\n(\n    1\n). Sum equals \n    2\n. Town \n    5\n: Goods from towns \n    5\n\n(\n    0\n), \n    4\n (\n    1\n), \n    3\n (\n    2\n). Sum equals \n    3\n.\n\n",
        "cf_contest_id": 986,
        "cf_index": "A",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "graphs",
            "greedy",
            "number theory",
            "shortest paths"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5 5 4 3\r\n1 2 4 3 2\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n4 5\r\n",
                "2 2 2 2 3 "
            ],
            [
                "7 6 3 2\r\n1 2 3 3 2 2 1\r\n1 2\r\n2 3\r\n3 4\r\n2 5\r\n5 6\r\n6 7\r\n",
                "1 1 1 2 2 1 1 "
            ]
        ],
        "private_cases": [
            [
                "10 15 3 1\r\n1 3 1 2 3 1 3 3 2 2\r\n8 3\r\n3 9\r\n5 7\r\n2 5\r\n7 10\r\n10 3\r\n7 4\r\n10 8\r\n2 3\r\n6 9\r\n1 9\r\n1 8\r\n3 5\r\n8 4\r\n10 4\r\n",
                "0 0 0 0 0 0 0 0 0 0 "
            ],
            [
                "10 10 3 2\r\n2 2 2 3 2 3 2 2 1 2\r\n9 7\r\n6 5\r\n2 3\r\n2 5\r\n6 4\r\n1 10\r\n9 10\r\n8 5\r\n5 1\r\n9 6\r\n",
                "2 2 3 2 1 1 1 2 1 1 "
            ],
            [
                "10 20 4 3\r\n1 4 4 1 3 3 1 2 2 4\r\n6 8\r\n10 7\r\n8 1\r\n9 4\r\n7 2\r\n4 2\r\n6 10\r\n3 10\r\n10 2\r\n6 3\r\n8 2\r\n7 5\r\n9 10\r\n9 5\r\n1 4\r\n6 7\r\n6 4\r\n5 8\r\n7 4\r\n10 1\r\n",
                "2 2 3 2 2 2 2 2 2 2 "
            ],
            [
                "1 0 1 1\r\n1\r\n",
                "0 "
            ]
        ]
    }
]