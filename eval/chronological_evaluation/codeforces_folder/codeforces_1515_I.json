[
    {
        "name": "Phoenix and Diamonds",
        "description": "Phoenix wonders what it is like to rob diamonds from a jewelry store! There\nare \n    n\n types of diamonds. The \n    i\n-th type has weight \n    w_i\n and\nvalue \n    v_i\n. The store initially has \n    a_i\n diamonds of the \n    i\n-th\ntype. Each day, for \n    q\n days, one of the following will happen: A new\nshipment of \n    k_i\n diamonds of type \n    d_i\n arrive. The store sells\n\n    k_i\n diamonds of type \n    d_i\n. Phoenix wonders what will happen if he\nrobs the store using a bag that can fit diamonds with total weight not\nexceeding \n    c_i\n. If he greedily takes diamonds of the largest value that\nfit, how much value would be taken? If there are multiple diamonds with the\nlargest value, he will take the one with minimum weight. If, of the diamonds\nwith the largest value, there are multiple with the same minimum weight, he\nwill take any of them. Of course, since Phoenix is a law-abiding citizen, this\nis all a thought experiment and he never actually robs any diamonds from the\nstore. This means that queries of type \n    3\n do not affect the diamonds in\nthe store. Input The first line contains two integers \n    n\n and \n    q\n\n(\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n; \n    1 \n    \u2264 q \n    \u2264 10^5\n) \u2014 the\nnumber of types of diamonds and number of days, respectively. The next \n    n\n\nlines describe each type of diamond. The \n    i\n-th line will contain three\nintegers \n    a_i\n, \n    w_i\n, and \n    v_i\n (\n    0 \n    \u2264 a_i \n    \u2264 10^5\n;\n\n    1 \n    \u2264 w_i, v_i \n    \u2264 10^5\n) \u2014 the initial number of diamonds of the\n\n    i\n-th type, the weight of diamonds of the \n    i\n-th type, and the value\nof diamonds of the \n    i\n-th type, respectively. The next \n    q\n lines\ncontain the queries. For each query, the first integer of each line is \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 3\n) \u2014 the type of query. If \n    t=1\n, then two integers\n\n    k_i\n, \n    d_i\n follow (\n    1 \n    \u2264 k_i \n    \u2264 10^5\n; \n    1 \n    \u2264 d_i\n    \n    \u2264 n\n). This means that a new shipment of \n    k_i\n diamonds arrived,\neach of type \n    d_i\n. If \n    t=2\n, then two integers \n    k_i\n, \n    d_i\n\nfollow (\n    1 \n    \u2264 k_i \n    \u2264 10^5\n; \n    1 \n    \u2264 d_i \n    \u2264 n\n). This means\nthat the store has sold \n    k_i\n diamonds, each of type \n    d_i\n. It is\nguaranteed that the store had the diamonds before they sold them. If\n\n    t=3\n, an integer \n    c_i\n will follow (\n    1 \n    \u2264 c_i \n    \u2264 10^18\n)\n\u2014 the weight capacity of Phoenix's bag. It is guaranteed that there is at\nleast one query where \n    t=3\n. Output Print the answer for each query of the\nthird type (\n    t=3\n). Example Input 3 5 2 3 4 1 5 1 0 2 4 3 6 1 3 3 3 10 2 2\n3 3 30 Output 8 16 13 Note For the first query where \n    t=3\n, Phoenix can\nfit \n    2\n diamonds of type \n    1\n, with total weight \n    6\n and value\n\n    8\n. For the second query where \n    t=3\n, Phoenix will first fit in\n\n    3\n diamonds of type \n    3\n, then one diamond of type \n    1\n for a total\nweight of \n    9\n and a value of \n    16\n. Note that diamonds of type \n    3\n\nare prioritized over type \n    1\n because type \n    3\n has equal value but\nless weight. For the final query where \n    t=3\n, Phoenix can fit every\ndiamond for a total value of \n    13\n.\n\n",
        "cf_contest_id": 1515,
        "cf_index": "I",
        "cf_rating": 3400,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "sortings"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "3 5\r\n2 3 4\r\n1 5 1\r\n0 2 4\r\n3 6\r\n1 3 3\r\n3 10\r\n2 2 3\r\n3 30\r\n",
                "8\r\n16\r\n13\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 8\r\n2 15 400\r\n1 1 200\r\n1 13 100\r\n3 26\r\n3 27\r\n3 28\r\n3 29\r\n3 30\r\n3 31\r\n3 32\r\n3 33\r\n",
                "600\r\n600\r\n600\r\n700\r\n800\r\n1000\r\n1000\r\n1000\r\n"
            ],
            [
                "2 8\r\n2 15 400\r\n1 13 100\r\n3 26\r\n3 27\r\n3 28\r\n3 29\r\n3 30\r\n3 31\r\n3 32\r\n3 33\r\n",
                "400\r\n400\r\n500\r\n500\r\n800\r\n800\r\n800\r\n800\r\n"
            ]
        ]
    }
]