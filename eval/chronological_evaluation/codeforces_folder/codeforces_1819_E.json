[
    {
        "name": "Roads in E City",
        "description": "This is an interactive problem. As is well known, the city \"E\" has never had\nits roads repaired in its a thousand and a half years old history. And only\nrecently the city administration repaired some of them. It is known that in\ntotal in the city \"E\" there are \n    n\n intersections and \n    m\n roads, which\ncan be used in both directions, numbered with integers from \n    1\n to\n\n    m\n. The \n    i\n-th road connects intersections with numbers \n    a_i\n and\n\n    b_i\n. Among all \n    m\n roads, some subset of the roads has been\nrepaired, but you do not know which one. The only information you could get\nfrom the city's road services is that you can get from any intersection to any\nother intersection by driving only on the roads that have been repaired. You\nare a young entrepreneur, and decided to organize a delivery service of fresh\nraw meat in the city \"E\" (in this city such meat is called \"steaks\", it is\nvery popular among the locals). You have already recruited a staff of\ncouriers, but the couriers are willing to travel only on repaired roads. Now\nyou have to find out which roads have already been repaired. The city\nadministration has given you the city for a period of time, so you can make\ndifferent queries of one of three types: Block the road with the number\n\n    x\n. In this case, movement on the road for couriers will be forbidden.\nInitially all roads are unblocked. Unblock the road with the number \n    x\n.\nIn this case, couriers will be able to move on the road \n    x\n if it is\nrepaired. Try to deliver the order to the intersection with the number\n\n    y\n. In this case, one of your couriers will start moving from\nintersection with number \n    s\n you don't know and deliver the order to\nintersection with number \n    y\n if there is a path on unblocked repaired\nroads from intersection \n    s\n to intersection \n    y\n. It is guaranteed that\nintersection \n    s\n will be chosen beforehand. Unfortunately, the city is\nplaced at your complete disposal for a short period of time, so you can make\nno more than \n    100 \n    \u00b7 m\n requests. Input Each test consists of\nmultiple test cases. The first line contains a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 1\n     000\n) \u2014 the number of test cases. The description of test\ncases follows. The first line contains two integers \n    n\n and \n    m\n (\n    2\n    \n    \u2264 n \n    \u2264 2\n     000\n, \n    n - 1 \n    \u2264 m \n    \u2264 2\n     000\n) \u2014the number of\nintersections and roads in the city \"E\". Each of the following \n    m\n lines\ndescribes one road. The \n    i\n-th of these lines contains two integers\n\n    a_i\n and \n    b_i\n (\n    1 \n    \u2264 a_i, b_i \n    \u2264 n\n) \u2014 the ends of the\n\n    i\n-th road. It is guaranteed that no road connects the city to itself,\nwhile it is possible that there are several roads between a pair of different\nintersections. It is guaranteed that the sum of \n    n\n and the sum of \n    m\n\nover all test cases does not exceed \n    2\n     000\n. Interaction Once you have\nread the description of the test case, you can make queries. Queries can be of\nthree types: \"- \n    x\n\" (\n    1 \n    \u2264 x \n    \u2264 m\n). In this case the road with\nthe number \n    x\n is blocked if it has not already been blocked. \"+ \n    x\n\"\n(\n    1 \n    \u2264 x \n    \u2264 m\n). In this case the road with the number \n    x\n is\nunblocked. Note that road \n    x\n must be blocked beforehand. All roads are\ninitially unblocked. \"? \n    y\n\" (\n    1 \n    \u2264 y \n    \u2264 n\n). In this case the\njury program chooses some city \n    s\n. If you can get from town \n    s\n to\ntown \n    y\n by unblocked repaired roads, the jury program will output\n\n    1\n, otherwise the jury program will output \n    0\n. Note that city\n\n    s\n will be selected before getting information about city \n    y\n, but\nyour previous requests may be taken into account when selecting city \n    s\n.\nIn total, you can make no more than \n    100 \n    \u00b7 m\n queries for each set\nof input data. After you have found all repaired roads, output \"! \n    c_1,\n    c_2,\n     c_3,\n     \n    \u2026,\n     c_m\n\", where \n    c_i\n is \n    1\n if road\n\n    i\n is repaired, and \n    0\n if road is not repaired. This output will not\ncount in the total number of queries. The jury program will output \n    1\n if\nyour answer is correct, and \n    0\n if the answer is not correct. If you\nreceived \n    0\n, your program must terminate immediately to receive a Wrong\nAnswer verdict. Otherwise you can get any verdict, because the program will\ncontinue reading from the closed stream. If you read \n    1\n, move on to the\nnext test case, or terminate the program if there is none. Note that you do\nnot have to unblock all roads before outputting the answer. It is guaranteed\nthat all repaired roads are fixed initially and will not be changed by the\njury program depending on queries. After outputting a query or the answer do\nnot forget to output the end of line and flush the output. Otherwise, you will\nget Idleness limit exceeded. To do this, use: fflush(stdout) or cout.flush()\nin C++; System.out.flush() in Java; flush(output) in Pascal; stdout.flush() in\nPython; see the documentation for other languages. HacksYou can't do hacks on\nthis problem. Example Input 2 2 2 1 2 2 1 1 0 1 1 3 3 1 2 2 3 3 1 1 1 1 0 1 1\n1 1 Output \u00ad 1 ? 1 ? 2 \u00ad 2  1 ? 1 ! 1 0 \u00ad 1 ? 2 ? 1 \u00ad 2 ? 3 ? 3  1 ? 3\n? 2 ? 1 ! 1 1 1 Note In the first test case, road \n    1\n was repaired, while\nroad \n    2\n was not. For the first delivery request, intersection \n    1\n was\nselected as \n    s\n, and the path from intersection \n    1\n to \n    1\n exists.\nFor the second delivery request, intersection \n    1\n was selected as \n    s\n.\nSince the only repaired road was blocked, there was no path between\nintersections \n    1\n and \n    2\n. For the third delivery request,\nintersection \n    2\n was selected as \n    s\n, the path between intersections\n\n    2\n and \n    1\n exists along road \n    1\n, which is repaired and\nunblocked. In the second test case, intersections \n    1\n, \n    3\n, \n    1\n,\n\n    2\n, \n    2\n, \n    3\n, \n    1\n were selected as starting intersections for\ndelivery requests.\n\n",
        "cf_contest_id": 1819,
        "cf_index": "E",
        "cf_rating": 3200,
        "difficulty": 0,
        "cf_tags": [
            "interactive",
            "math",
            "probabilities",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "debug\r\n2\r\nrandom\r\n2 2\r\n1 2 1\r\n2 1 0\r\nfixed 1\r\n3 3\r\n1 2 1\r\n2 3 1\r\n3 1 1\r\n",
                "1\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]