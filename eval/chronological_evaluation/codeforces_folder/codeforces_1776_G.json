[
    {
        "name": "Another Wine Tasting Event",
        "description": "After the first successful edition, Gabriella has been asked to organize a\nsecond wine tasting event. There will be \n    2n - 1\n bottles of wine arranged\nin a row, each of which is either red wine or white wine. This time, Gabriella\nhas already chosen the type and order of all the bottles. The types of the\nwines are represented by a string \n    s\n of length \n    2n - 1\n. For each\n\n    1 \n    \u2264 i \n    \u2264 2n - 1\n, it holds that \n    s_i =\n if the\n\n    i\n-th bottle is red wine, and \n    s_i =\n if the \n    i\n-th\nbottle is white wine. Exactly \n    n\n critics have been invited to attend. The\ncritics are numbered from \n    1\n to \n    n\n. Just like last year, each critic\n\n    j\n wants to taste an interval of wines, that is, the bottles at positions\n\n    a_j, \n      a_j + 1, \n     \n    \u2026, \n      b_j\n for some \n    1 \n    \u2264 a_j \n    \u2264\n    b_j \n    \u2264 2n - 1\n. Moreover, they have the following additional\nrequirements: each of them wants to taste at least \n    n\n wines, that is, it\nmust hold that \n    b_j - a_j + 1 \n    \u2265 n\n; no two critics must taste exactly\nthe same wines, that is, if \n    j \n     k\n it must hold that \n    a_j \n    \n    a_k\n or \n    b_j \n     b_k\n. Gabriella knows that, since the event is held\nin a coastal region of Italy, critics are especially interested in the white\nwines, and don't care much about the red ones. (Indeed, white wine is perfect\nto accompany seafood.) Thus, to ensure fairness, she would like that all\ncritics taste the same number of white wines. Help Gabriella find an integer\n\n    x\n (with \n    0 \n    \u2264 x \n    \u2264 2n - 1\n) such that there exists a valid\nassignment of intervals to critics where each critic tastes exactly \n    x\n\nwhite wines. It can be proved that at least one such \n    x\n always exists.\nInput The first line contains the integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^6\n)\n\u2014 where \n    2n - 1\n is the number of bottles, and \n    n\n is the number of\ncritics. The second line contains a string \n    s\n of length \n    2n - 1\n that\nrepresents the arrangement of the wines \u2014 the \n    i\n-th character of \n    s\n\n(\n    1 \n    \u2264 i \n    \u2264 2n - 1\n) is \n    \n for a red wine and\n\n    \n for a white wine. Output Print an integer \n    x\n \u2014 the\nnumber of white wines that each critic will taste. It can be proved that at\nleast one solution exists. If multiple solutions exist, any of them will be\naccepted. Examples Input 5 RWWRRRWWW Output 2 Input 1 R Output 0 Note In the\nfirst sample, there are \n    5\n critics and \n    2 \n    \u00b7 5 - 1 = 9\n bottles\nof wine. A possible set of intervals that makes each critic taste \n    2\n\nwhite wines is the following: \n    [2, 6],\n \n    [1, 6],\n \n    [4, 8],\n \n    [1,\n    5],\n \n    [3, 7]\n. Note that all intervals contain at least \n    5\n bottles.\nIn the second sample, there is \n    1\n critic and \n    2 \n    \u00b7 1 - 1 = 1\n\nbottle of wine. The only possible interval is \n    [1, 1]\n, which gives \n    x =\n    0\n.\n\n",
        "cf_contest_id": 1776,
        "cf_index": "G",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "constructive algorithms",
            "math",
            "strings"
        ],
        "time_limit_seconds": 0.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\nRWWRRRWWW\r\n",
                "3\r\n"
            ],
            [
                "1\r\nR\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\nWWW\r\n",
                "2\r\n"
            ],
            [
                "3\r\nWRRRR\r\n",
                "1\r\n"
            ],
            [
                "5\r\nRWWRRWRRR\r\n",
                "3\r\n"
            ],
            [
                "5\r\nRRRRRRRRR\r\n",
                "0\r\n"
            ],
            [
                "5\r\nRRWRRRRRW\r\n",
                "1\r\n"
            ],
            [
                "5\r\nRRWRWWWWW\r\n",
                "5\r\n"
            ],
            [
                "5\r\nWWWWWWWWW\r\n",
                "5\r\n"
            ],
            [
                "5\r\nWRWWRRWWW\r\n",
                "3\r\n"
            ],
            [
                "5\r\nWWRRWWRWW\r\n",
                "4\r\n"
            ],
            [
                "7\r\nWWRWWRWWWWRRW\r\n",
                "6\r\n"
            ],
            [
                "9\r\nRWRRWRWRWRWRRWRRW\r\n",
                "4\r\n"
            ],
            [
                "10\r\nWRRRWWRRRWRWRRRRWWR\r\n",
                "4\r\n"
            ],
            [
                "25\r\nRWWRWWRRWRRRRWWWRRRWWRWWRRRWWRWRRRWWWRWWWRRWWRRWR\r\n",
                "14\r\n"
            ],
            [
                "50\r\nRWWWRRRRRRRRWWWRWWWWRWRWRWWRRRWRWRRRRWRRRRWWWRWWRWRWRWRWWWRWWWWWRWRRWWWWWRWRRRWWWWWWRWWWRRWRWWRWRRW\r\n",
                "33\r\n"
            ],
            [
                "100\r\nRRWWWRWRWWRRRRRRWWWWRRRRWWWWWWWRWRWRWRWRWRRWRRWWWRWWRRRWWWWWWWRWWWWRRWRWWWRRWWWWRRWRRWRRWRRRRRWWRRWRWWRWWWRWWWRWWWRWWRWWRWWWWRWWRRRWRWRRWWRWRRWRRWWWRRWRWRRRWRWRWWWWRRRWWRRRWRWRRRRRRWRWWRWRWWRRWRWWRRW\r\n",
                "61\r\n"
            ]
        ]
    }
]