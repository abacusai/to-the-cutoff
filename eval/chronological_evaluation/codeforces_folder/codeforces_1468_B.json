[
    {
        "name": "Bakery",
        "description": "Monocarp would like to open a bakery in his local area. But, at first, he\nshould figure out whether he can compete with other shops. Monocarp plans that\nthe bakery will work for \n    n\n days. On the \n    i\n-th day, \n    a_i\n loaves\nof bread will be baked in the morning before the opening. At the end of the\n\n    n\n-th day, Monocarp will sell all the remaining bread that wasn't sold\nearlier with a huge discount. Because of how bread is stored, the bakery\nseller sells the bread in the following order: firstly, he sells the loaves\nthat were baked that morning; secondly, he sells the loaves that were baked\nthe day before and weren't sold yet; then the loaves that were baked two days\nbefore and weren't sold yet, and so on. That's why some customers may buy a\nrather stale bread and will definitely spread negative rumors. Let's define\nloaf spoilage as the difference between the day it was baked and the day it\nwas sold. Then the unattractiveness of the bakery will be equal to the maximum\nspoilage among all loaves of bread baked at the bakery. Suppose Monocarp's\nlocal area has consumer demand equal to \n    k\n, it means that each day\n\n    k\n customers will come to the bakery and each of them will ask for one\nloaf of bread (the loaves are sold according to the aforementioned order). If\nthere is no bread left, then the person just doesn't buy anything. During the\nlast day sale, all the remaining loaves will be sold (and they will still\ncount in the calculation of the unattractiveness). Monocarp analyzed his\ncompetitors' data and came up with \n    m\n possible consumer demand values\n\n    k_1, k_2, \n    \u2026, k_m\n, and now he'd like to calculate the\nunattractiveness of the bakery for each value of demand. Can you help him?\nInput The first line contains two integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n\n    \n    \u2264 2 \n    \u00b7 10^5\n; \n    1 \n    \u2264 m \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of\ndays the bakery is open and the number of possible values of consumer demand.\nThe second line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1\n    \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the number of bread loaves that will be baked each\nday. The third line contains \n    m\n integers \n    k_1, k_2, \n    \u2026, k_m\n\n(\n    1 \n    \u2264 k_1 < k_2 < \n    \u2026 < k_m \n    \u2264 10^9\n) \u2014 the possible consumer\ndemand values in the ascending order. Output Print \n    m\n integers: for each\nconsumer demand, print the unattractiveness of the bakery. Examples Input 5 4\n5 2 1 3 7 1 3 4 10 Output 4 2 1 0 Input 8 9 3 1 4 1 5 9 2 6 1 2 3 4 5 6 7 8 9\nOutput 7 5 3 3 2 1 1 1 0 Note In the first example, let's describe what\nhappens for couple consumer demands: If consumer demand is equal to \n    1\n:\nat day \n    1\n: \n    5\n loaves are baked and only \n    1\n is sold with\nspoilage equal to \n    1 - 1 = 0\n; at day \n    2\n: \n    4\n loaves are left and\n\n    2\n more are baked. Only \n    1\n loaf was sold and it was the loaf baked\ntoday with spoilage \n    2 - 2 = 0\n; at day \n    3\n: \n    4\n loaves from the\nfirst day and \n    1\n loaf from the second day left. One more loaf was baked\nand was sold this day with spoilage \n    3 - 3 = 0\n; at day \n    4\n: \n    4\n\nloaves from the first day and \n    1\n loaf from the second day left. \n    3\n\nmore loaves were baked and one of them was sold this day with spoilage \n    4 -\n    4 = 0\n; at day \n    5\n: \n    4\n loaves from the first day, \n    1\n loaf from\nthe second day and \n    2\n loaves from the fourth day left. \n    7\n more\nloaves were baked and, since it's the last day, all \n    14\n loaves were sold.\n\n    4\n loaves from the first day have the maximum spoilage equal to \n    5 - 1\n    = 4\n. In total, the unattractiveness of the bakery will be equal to\n\n    4\n.If consumer demand is equal to \n    10\n then all baked bread will be\nsold in the day it was baked and will have spoilage equal to \n    0\n.\n\n",
        "cf_contest_id": 1468,
        "cf_index": "B",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dsu"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5 4\r\n5 2 1 3 7\r\n1 3 4 10\r\n",
                "4 2 1 0 "
            ],
            [
                "8 9\r\n3 1 4 1 5 9 2 6\r\n1 2 3 4 5 6 7 8 9\r\n",
                "7 5 3 3 2 1 1 1 0 "
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1\r\n1\r\n",
                "0 "
            ],
            [
                "1 1\r\n1000000000\r\n1\r\n",
                "0 "
            ],
            [
                "1 1\r\n1\r\n1000000000\r\n",
                "0 "
            ],
            [
                "1 1\r\n1000000000\r\n1000000000\r\n",
                "0 "
            ]
        ]
    }
]