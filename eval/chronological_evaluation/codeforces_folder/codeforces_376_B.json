[
    {
        "name": "I.O.U.",
        "description": "Imagine that there is a group of three friends: A, B and \u0421. A owes B 20 rubles\nand B owes C 20 rubles. The total sum of the debts is 40 rubles. You can see\nthat the debts are not organized in a very optimal manner. Let's rearrange\nthem like that: assume that A owes C 20 rubles and B doesn't owe anything to\nanybody. The debts still mean the same but the total sum of the debts now\nequals 20 rubles. This task is a generalisation of a described example.\nImagine that your group of friends has n people and you know the debts between\nthe people. Optimize the given debts without changing their meaning. In other\nwords, finally for each friend the difference between the total money he\nshould give and the total money he should take must be the same. Print the\nminimum sum of all debts in the optimal rearrangement of the debts. See the\nnotes to the test samples to better understand the problem. Input The first\nline contains two integers n and m (1 \u2264 n \u2264 100; 0 \u2264 m \u2264 10^4). The next m\nlines contain the debts. The i-th line contains three integers ai, bi, ci (1 \u2264\nai, bi \u2264 n; ai \u2260 bi; 1 \u2264 ci \u2264 100), which mean that person ai owes person bi\nci rubles. Assume that the people are numbered by integers from 1 to n. It is\nguaranteed that the same pair of people occurs at most once in the input. The\ninput doesn't simultaneously contain pair of people (x, y) and pair of people\n(y, x). Output Print a single integer \u2014 the minimum sum of debts in the\noptimal rearrangement. Examples Input 5 3 1 2 10 2 3 1 2 4 1 Output 10 Input 3\n0 Output 0 Input 4 3 1 2 1 2 3 1 3 1 1 Output 0 Note In the first sample, you\ncan assume that person number 1 owes 8 rubles to person number 2, 1 ruble to\nperson number 3 and 1 ruble to person number 4. He doesn't owe anybody else\nanything. In the end, the total debt equals 10. In the second sample, there\nare no debts. In the third sample, you can annul all the debts.\n\n",
        "cf_contest_id": 376,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 3\r\n1 2 10\r\n2 3 1\r\n2 4 1\r\n",
                "10\r\n"
            ],
            [
                "3 0\r\n",
                "0\r\n"
            ],
            [
                "4 3\r\n1 2 1\r\n2 3 1\r\n3 1 1\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "20 28\r\n1 5 6\r\n1 12 7\r\n1 13 4\r\n1 15 7\r\n1 20 3\r\n2 4 1\r\n2 15 6\r\n3 5 3\r\n3 8 10\r\n3 13 8\r\n3 20 6\r\n4 6 10\r\n4 12 8\r\n4 19 5\r\n5 17 8\r\n6 9 9\r\n6 16 2\r\n6 19 9\r\n7 14 6\r\n8 9 3\r\n8 16 10\r\n9 11 7\r\n9 17 8\r\n11 13 8\r\n11 17 17\r\n11 19 1\r\n15 20 2\r\n17 20 1\r\n",
                "124\r\n"
            ],
            [
                "20 36\r\n1 2 13\r\n1 3 1\r\n1 6 4\r\n1 12 8\r\n1 13 9\r\n1 15 3\r\n1 18 4\r\n2 10 2\r\n2 15 2\r\n2 18 6\r\n3 7 8\r\n3 16 19\r\n4 7 1\r\n4 18 4\r\n5 9 2\r\n5 15 9\r\n5 17 4\r\n5 18 5\r\n6 11 7\r\n6 13 1\r\n6 14 9\r\n7 10 4\r\n7 12 10\r\n7 15 9\r\n7 17 8\r\n8 14 4\r\n10 13 8\r\n10 19 9\r\n11 12 5\r\n12 17 6\r\n13 15 8\r\n13 19 4\r\n14 15 9\r\n14 16 8\r\n17 19 8\r\n17 20 7\r\n",
                "147\r\n"
            ],
            [
                "20 40\r\n1 13 4\r\n2 3 3\r\n2 4 5\r\n2 7 7\r\n2 17 10\r\n3 5 3\r\n3 6 9\r\n3 10 4\r\n3 12 2\r\n3 13 2\r\n3 14 3\r\n4 5 4\r\n4 8 7\r\n4 13 9\r\n5 6 14\r\n5 14 5\r\n7 11 5\r\n7 12 13\r\n7 15 7\r\n8 14 5\r\n8 16 7\r\n8 18 17\r\n9 11 8\r\n9 19 19\r\n10 12 4\r\n10 16 3\r\n10 18 10\r\n10 20 9\r\n11 13 9\r\n11 20 2\r\n12 13 8\r\n12 18 2\r\n12 20 3\r\n13 17 1\r\n13 20 4\r\n14 16 8\r\n16 19 3\r\n18 19 3\r\n18 20 7\r\n19 20 10\r\n",
                "165\r\n"
            ],
            [
                "50 10\r\n1 5 1\r\n2 34 2\r\n3 8 10\r\n5 28 4\r\n7 28 6\r\n13 49 9\r\n15 42 7\r\n16 26 7\r\n18 47 5\r\n20 41 10\r\n",
                "60\r\n"
            ],
            [
                "50 46\r\n1 6 10\r\n1 18 1\r\n1 24 10\r\n1 33 2\r\n1 40 8\r\n3 16 7\r\n4 26 8\r\n4 32 2\r\n4 34 6\r\n5 29 8\r\n6 44 3\r\n8 20 5\r\n8 42 13\r\n10 13 5\r\n10 25 7\r\n10 27 9\r\n10 29 10\r\n11 23 4\r\n12 28 7\r\n12 30 10\r\n12 40 10\r\n13 18 2\r\n13 33 2\r\n14 15 7\r\n14 43 10\r\n14 47 3\r\n16 27 10\r\n17 21 6\r\n17 30 9\r\n19 40 4\r\n22 24 8\r\n22 25 7\r\n22 38 18\r\n25 38 1\r\n27 31 7\r\n27 40 8\r\n30 36 8\r\n31 34 1\r\n32 49 6\r\n33 35 4\r\n33 50 7\r\n38 47 1\r\n42 47 2\r\n42 50 5\r\n43 44 9\r\n47 50 5\r\n",
                "228\r\n"
            ],
            [
                "100 48\r\n1 56 6\r\n2 42 3\r\n3 52 1\r\n9 50 8\r\n10 96 8\r\n11 39 2\r\n12 51 6\r\n12 68 7\r\n13 40 5\r\n14 18 10\r\n14 70 6\r\n15 37 4\r\n15 38 8\r\n15 82 6\r\n15 85 5\r\n16 48 4\r\n16 50 9\r\n16 71 9\r\n17 18 3\r\n17 100 10\r\n20 73 3\r\n22 32 9\r\n22 89 9\r\n23 53 3\r\n24 53 1\r\n27 78 10\r\n30 50 5\r\n33 94 8\r\n34 87 9\r\n35 73 3\r\n36 51 8\r\n37 88 10\r\n37 97 2\r\n40 47 8\r\n40 90 6\r\n44 53 3\r\n44 65 3\r\n47 48 8\r\n48 72 10\r\n49 98 2\r\n53 68 10\r\n53 71 9\r\n57 62 2\r\n63 76 10\r\n66 90 9\r\n71 76 8\r\n72 80 5\r\n75 77 7\r\n",
                "253\r\n"
            ],
            [
                "4 3\r\n1 4 1\r\n2 3 1\r\n4 2 2\r\n",
                "2\r\n"
            ]
        ]
    }
]