[
    {
        "name": "Interactive Treasure Hunt",
        "description": "This is an interactive problem. There is a grid of \n    n\n    \u00d7 m\n cells.\nTwo treasure chests are buried in two different cells of the grid. Your task\nis to find both of them. You can make two types of operations: DIG \n    r\n\n\n    c\n: try to find the treasure in the cell \n    (r, c)\n. The interactor\nwill tell you if you found the treasure or not. SCAN \n    r\n \n    c\n: scan\nfrom the cell \n    (r, c)\n. The result of this operation is the sum of\nManhattan distances from the cell \n    (r, c)\n to the cells where the\ntreasures are hidden. Manhattan distance from a cell \n    (r_1, c_1)\n to a\ncell \n    (r_2, c_2)\n is calculated as \n    |r_1 - r_2| + |c_1 - c_2|\n. You\nneed to find the treasures in at most 7 operations. This includes both DIG and\nSCAN operations in total. To solve the test you need to call DIG operation at\nleast once in both of the cells where the treasures are hidden. Interaction\nYour program has to process multiple test cases in a single run. First, the\ntesting system writes \n    t\n \u2014 the number of test cases (\n    1\n    \u2264 t \n    \u2264\n    100\n). Then, \n    t\n test cases should be processed one by one. In each test\ncase, your program should start by reading the integers \n    n\n and \n    m\n\n(\n    2 \n    \u2264 n, m \n    \u2264 16\n). Then, your program can make queries of two\ntypes: DIG \n    r\n \n    c\n (\n    1\n    \u2264 r\n    \u2264 n\n; \n    1\n    \u2264 c\n    \u2264 m\n). The\ninteractor responds with integer \n    1\n, if you found the treasure, and\n\n    0\n if not. If you try to find the treasure in the same cell multiple\ntimes, the result will be \n    0\n since the treasure is already found. SCAN\n\n    r\n \n    c\n (\n    1\n    \u2264 r\n    \u2264 n\n; \n    1\n    \u2264 c\n    \u2264 m\n). The interactor\nresponds with an integer that is the sum of Manhattan distances from the cell\n\n    (r, c)\n to the cells where the treasures were hidden. The sum is\ncalculated for both cells with treasures, even if you already found one of\nthem. After you found both treasures, i. e. you received \n    1\n for two DIG\noperations, your program should continue to the next test case or exit if that\ntest case was the last one. Example Input 1 2 3 1 1 3 0 1 Output SCAN 1 2 DIG\n1 2 SCAN 2 2 DIG 1 1 DIG 1 3\n\n",
        "cf_contest_id": 1666,
        "cf_index": "I",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "geometry",
            "interactive",
            "math"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "1\r\n2 3 1 2 1 3\r\n",
                null
            ]
        ],
        "private_cases": []
    }
]