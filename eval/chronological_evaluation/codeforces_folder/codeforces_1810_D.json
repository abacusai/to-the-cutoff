[
    {
        "name": "Climbing the Tree",
        "description": "The snails are climbing a tree. The tree height is \n    h\n meters, and snails\nstart at position \n    0\n. Each snail has two attributes \n    a\n and \n    b\n\n(\n    a > b\n). Starting from the \n    1\n-st day, one snail climbs the tree\nlike this: during the daylight hours of the day, he climbs up \n    a\n meters;\nduring the night, the snail rests, and he slides down \n    b\n meters. If on\nthe \n    n\n-th day, the snail reaches position \n    h\n for the first time\n(that is, the top of the tree), he will finish climbing, and we say that the\nsnail spends \n    n\n days climbing the tree. Note that on the last day of\nclimbing, the snail doesn't necessarily climb up \n    a\n meters, in case his\ndistance to the top is smaller than \n    a\n. Unfortunately, you don't know the\nexact tree height \n    h\n at first, but you know that \n    h\n is a positive\ninteger. There are \n    q\n events of two kinds. Event of type \n    1\n: a snail\nwith attributes \n    a\n, \n    b\n comes and claims that he spent \n    n\n days\nclimbing the tree. If this message contradicts previously adopted information\n(i. e. there is no tree for which all previously adopted statements and this\none are true), ignore it. Otherwise, adopt it. Event of type \n    2\n: a snail\nwith attributes \n    a\n, \n    b\n comes and asks you how many days he will\nspend if he climbs the tree. You can only give the answer based on the\ninformation you have adopted so far. If you cannot determine the answer\nprecisely, report that. You need to deal with all the events in order. Input\nEach test contains multiple test cases. The first line contains a single\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. Then\nfollows their description. The first line of each test case contains one\ninteger \n    q\n (\n    1\n    \u2264 q \n    \u2264 2\n    \u00b7 10^5\n) \u2014 the number of events.\nFor the following \n    q\n lines, the first integer of each line is either\n\n    1\n or \n    2\n, denoting the event type. If the event type is \n    1\n,\nthen three integers \n    a\n, \n    b\n, and \n    n\n (\n    1\n    \u2264 a,b,n \n    \u2264\n    10^9\n, \n    a>b\n) follow. If the event type is \n    2\n, then two integers\n\n    a\n and \n    b\n (\n    1\n    \u2264 a,b \n    \u2264 10^9\n, \n    a>b\n) follow. It is\nguaranteed that the sum of \n    q\n over all test cases does not exceed\n\n    2\n    \u00b7 10^5\n. Output For each test case, output \n    q\n integers in one\nline, one for each event, in order. Specifically, for each event of type\n\n    1\n, if you adopt the message, output \n    1\n; if you ignore it, output\n\n    0\n; for each event of type \n    2\n, output an integer denoting the number\nof days that the snail will spend. If you cannot determine it, output\n\n    -1\n. Example Input 5 3 1 3 2 5 2 4 1 2 3 2 3 1 6 5 1 2 3 1 2 6 2 3 1 4 2\n2 1 2 1 3 2 10 2 9 1 7 3 6 1 2 1 8 2 5 1 1 10 9 7 1 8 1 2 1 10 5 8 1 10 7 7 2\n7 4 1 9 4 2 9 1 2 1 6 1 8 5 6 1 4 2 7 2 9 1 1 5 1 4 1 5 2 7 1 7 1 9 1 9 1 4 2\n10 8 Output 1 2 5 1 -1 1 1 0 1 1 0 -1 0 0 0 1 8 0 1 0 0 1 0 0 0 0 1 Note In\nthe first test case, we can determine \n    h=7\n through the first message, so\nwe know the second snail and the third snail need to spend \n    2\n and \n    5\n\ndays respectively to reach the top. Let's show how the second snail climbs:\nDuring the daylight hours of the \n    1\nst day: climbs up \n    4\n meters, now\nat position \n    4\n. During the night of the \n    1\nst day: slides down\n\n    1\n meters, now at position \n    3\n. During the daylight hours of the\n\n    2\nnd day: climbs up \n    4\n meters, now at position \n    7\n (reaches the\ntop). In the third test case, the second snail's message contradicts the first\nsnail's, because the second snail says he spent \n    3\n days, and he can climb\nat most \n    1+1+2=4\n meters in the first \n    3\n days. However, the first\nsnail only needs \n    1\n day to climb \n    4\n meters.\n\n",
        "cf_contest_id": 1810,
        "cf_index": "D",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3\r\n1 3 2 5\r\n2 4 1\r\n2 3 2\r\n3\r\n1 6 5 1\r\n2 3 1\r\n2 6 2\r\n3\r\n1 4 2 2\r\n1 2 1 3\r\n2 10 2\r\n9\r\n1 7 3 6\r\n1 2 1 8\r\n2 5 1\r\n1 10 9 7\r\n1 8 1 2\r\n1 10 5 8\r\n1 10 7 7\r\n2 7 4\r\n1 9 4 2\r\n9\r\n1 2 1 6\r\n1 8 5 6\r\n1 4 2 7\r\n2 9 1\r\n1 5 1 4\r\n1 5 2 7\r\n1 7 1 9\r\n1 9 1 4\r\n2 10 8\r\n",
                "1\r\n2\r\n5\r\n1\r\n-1\r\n1\r\n1\r\n0\r\n1\r\n1\r\n0\r\n-1\r\n0\r\n0\r\n0\r\n1\r\n8\r\n0\r\n1\r\n0\r\n0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]