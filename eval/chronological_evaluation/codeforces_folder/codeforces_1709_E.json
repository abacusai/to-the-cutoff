[
    {
        "name": "XOR Tree",
        "description": "You are given a tree consisting of \n    n\n vertices. A number is written on\neach vertex; the number on vertex \n    i\n is equal to \n    a_i\n. Recall that a\nsimple path is a path that visits each vertex at most once. Let the weight of\nthe path be the bitwise XOR of the values written on vertices it consists of.\nLet's say that a tree is good if no simple path has weight \n    0\n. You can\napply the following operation any number of times (possibly, zero): select a\nvertex of the tree and replace the value written on it with an arbitrary\npositive integer. What is the minimum number of times you have to apply this\noperation in order to make the tree good? Input The first line contains one\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of\nvertices. The second line contains \n    n\n integers \n    a_1\n, \n    a_2\n, ...,\n\n    a_n\n (\n    1 \n    \u2264 a_i < 2^30\n) \u2014 the numbers written on vertices. Then\n\n    n - 1\n lines follow, each containing two integers \n    x\n and \n    y\n\n(\n    1 \n    \u2264 x, y \n    \u2264 n; x \n     y\n) denoting an edge connecting vertex\n\n    x\n with vertex \n    y\n. It is guaranteed that these edges form a tree.\nOutput Print a single integer \u2014 the minimum number of times you have to apply\nthe operation in order to make the tree good. Examples Input 6 3 2 1 3 2 1 4 5\n3 4 1 4 2 1 6 1 Output 2 Input 4 2 1 1 1 1 2 1 3 1 4 Output 0 Input 5 2 2 2 2\n2 1 2 2 3 3 4 4 5 Output 2 Note In the first example, it is enough to replace\nthe value on the vertex \n    1\n with \n    13\n, and the value on the vertex\n\n    4\n with \n    42\n.\n\n",
        "cf_contest_id": 1709,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "data structures",
            "dfs and similar",
            "dsu",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n3 2 1 3 2 1\r\n4 5\r\n3 4\r\n1 4\r\n2 1\r\n6 1\r\n",
                "2\r\n"
            ],
            [
                "4\r\n2 1 1 1\r\n1 2\r\n1 3\r\n1 4\r\n",
                "0\r\n"
            ],
            [
                "5\r\n2 2 2 2 2\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n25\r\n",
                "0\r\n"
            ],
            [
                "10\r\n7 4 6 7 6 6 7 5 7 5\r\n8 7\r\n4 5\r\n9 6\r\n2 5\r\n4 8\r\n9 10\r\n4 3\r\n9 4\r\n1 8\r\n",
                "1\r\n"
            ],
            [
                "20\r\n4 1 3 4 7 3 8 7 7 3 1 1 7 1 9 5 1 10 6 3\r\n6 15\r\n12 11\r\n18 1\r\n9 17\r\n8 1\r\n1 20\r\n13 7\r\n10 15\r\n20 19\r\n10 16\r\n8 5\r\n2 11\r\n14 3\r\n6 1\r\n1 12\r\n3 18\r\n6 4\r\n8 13\r\n9 18\r\n",
                "3\r\n"
            ]
        ]
    }
]