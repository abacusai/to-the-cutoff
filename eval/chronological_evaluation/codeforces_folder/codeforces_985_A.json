[
    {
        "name": "Chess Placing",
        "description": "You are given a chessboard of size 1 \u00d7 n. It is guaranteed that n is even. The\nchessboard is painted like this: \"BWBW...BW\". Some cells of the board are\noccupied by the chess pieces. Each cell contains no more than one chess piece.\nIt is known that the total number of pieces equals to . In one step you can\nmove one of the pieces one cell to the left or to the right. You cannot move\npieces beyond the borders of the board. You also cannot move pieces to the\ncells that are already occupied. Your task is to place all the pieces in the\ncells of the same color using the minimum number of moves (all the pieces must\noccupy only the black cells or only the white cells after all the moves are\nmade). Input The first line of the input contains one integer n (2 \u2264 n \u2264 100,\nn is even) \u2014 the size of the chessboard. The second line of the input contains\ninteger numbers (1 \u2264 pi \u2264 n) \u2014 initial positions of the pieces. It is\nguaranteed that all the positions are distinct. Output Print one integer \u2014 the\nminimum number of moves you have to make to place all the pieces in the cells\nof the same color. Examples Input 6 1 2 6 Output 2 Input 10 1 2 3 4 5 Output\n10 Note In the first example the only possible strategy is to move the piece\nat the position 6 to the position 5 and move the piece at the position 2 to\nthe position 3. Notice that if you decide to place the pieces in the white\ncells the minimum number of moves will be 3. In the second example the\npossible strategy is to move in 4 moves, then in 3 moves, in 2 moves and in 1\nmove.\n\n",
        "cf_contest_id": 985,
        "cf_index": "A",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n1 2 6\r\n",
                "2\r\n"
            ],
            [
                "10\r\n1 2 3 4 5\r\n",
                "10\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n2\r\n",
                "0\r\n"
            ],
            [
                "100\r\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100\r\n",
                "0\r\n"
            ],
            [
                "100\r\n93 54 57 61 68 66 70 96 64 82 80 75 69 77 76 94 67 86 90 73 74 58 100 83 92 89 56 99 88 59 95 72 81 51 85 71 97 60 91 63 65 98 79 84 53 62 87 55 52 78\r\n",
                "1225\r\n"
            ],
            [
                "100\r\n41 13 29 11 25 15 6 23 28 50 48 17 3 9 44 24 5 19 34 22 33 32 20 16 35 37 4 10 46 2 39 40 47 49 36 42 1 30 43 21 14 7 18 45 31 8 12 26 27 38\r\n",
                "1225\r\n"
            ],
            [
                "96\r\n12 58 70 19 65 61 41 46 15 92 64 72 9 26 53 37 2 3 1 40 10 8 94 66 50 34 36 96 47 78 7 57 5 6 17 69 28 88 89 49 55 81 35 22 25 79 86 59\r\n",
                "152\r\n"
            ],
            [
                "10\r\n5 6 7 8 9\r\n",
                "7\r\n"
            ],
            [
                "20\r\n1 2 3 4 5 6 7 8 9 10\r\n",
                "45\r\n"
            ],
            [
                "10\r\n6 7 8 9 10\r\n",
                "10\r\n"
            ],
            [
                "10\r\n9 8 7 6 5\r\n",
                "7\r\n"
            ],
            [
                "6\r\n1 5 6\r\n",
                "2\r\n"
            ],
            [
                "12\r\n1 7 8 9 10 12\r\n",
                "7\r\n"
            ],
            [
                "6\r\n1 4 5\r\n",
                "1\r\n"
            ],
            [
                "24\r\n10 21 15 3 11 4 18 24 16 22 14 9\r\n",
                "11\r\n"
            ],
            [
                "20\r\n3 4 6 7 8 10 11 13 14 17\r\n",
                "15\r\n"
            ],
            [
                "10\r\n10 9 8 1 5\r\n",
                "5\r\n"
            ],
            [
                "100\r\n84 10 26 79 58 93 67 85 7 2 99 4 47 45 75 22 32 82 65 53 63 49 42 52 12 69 86 46 25 76 40 15 13 78 8 81 62 28 60 21 27 80 98 56 3 36 54 16 50 43\r\n",
                "104\r\n"
            ],
            [
                "10\r\n1 7 8 9 10\r\n",
                "7\r\n"
            ],
            [
                "10\r\n1 4 6 8 10\r\n",
                "1\r\n"
            ],
            [
                "80\r\n41 70 18 53 32 79 51 49 21 27 47 65 50 15 62 60 5 40 14 25 64 9 19 58 38 76 66 52 17 34 13 2 80 43 3 42 33 36 6 72\r\n",
                "47\r\n"
            ],
            [
                "50\r\n27 42 41 4 10 45 44 26 49 50 17 28 2 36 18 39 23 12 21 24 19 29 22 40 37\r\n",
                "59\r\n"
            ],
            [
                "10\r\n2 3 4 5 6\r\n",
                "7\r\n"
            ],
            [
                "6\r\n3 5 6\r\n",
                "2\r\n"
            ],
            [
                "100\r\n9 63 62 88 3 67 54 33 79 51 71 80 37 46 43 57 69 17 34 6 18 40 59 83 76 86 8 55 90 89 45 42 28 98 30 38 77 91 73 58 23 61 41 65 64 93 14 44 16 24\r\n",
                "160\r\n"
            ],
            [
                "10\r\n1 6 7 8 9\r\n",
                "5\r\n"
            ],
            [
                "6\r\n3 4 5\r\n",
                "2\r\n"
            ]
        ]
    }
]