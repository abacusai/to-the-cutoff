[
    {
        "name": "Restoring Table",
        "description": "Recently Polycarpus has learned the \"bitwise AND\" operation (which is also\ncalled \"AND\") of non-negative integers. Now he wants to demonstrate the school\nIT teacher his superb manipulation with the learned operation. For that\nPolycarpus came to school a little earlier and wrote on the board a sequence\nof non-negative integers a1, a2, ..., an. He also wrote a square matrix b of\nsize n \u00d7 n. The element of matrix b that sits in the i-th row in the j-th\ncolumn (we'll denote it as bij) equals: the \"bitwise AND\" of numbers ai and aj\n(that is, bij = ai     aj), if i \u2260 j; -1, if i = j. Having written out matrix b,\nPolycarpus got very happy and wiped a off the blackboard. But the thing is,\nthe teacher will want this sequence to check whether Polycarpus' calculations\nwere correct. Polycarus urgently needs to restore the removed sequence of\nintegers, or else he won't prove that he can count correctly. Help Polycarpus,\ngiven matrix b, restore the sequence of numbers a1, a2, ..., an, that he has\nremoved from the board. Polycarpus doesn't like large numbers, so any number\nin the restored sequence mustn't exceed 10^9. Input The first line contains a\nsingle integer n (1 \u2264 n \u2264 100) \u2014 the size of square matrix b. Next n lines\ncontain matrix b. The i-th of these lines contains n space-separated integers:\nthe j-th number represents the element of matrix bij. It is guaranteed, that\nfor all i (1 \u2264 i \u2264 n) the following condition fulfills: bii = -1. It is\nguaranteed that for all i, j (1 \u2264 i, j \u2264 n; i \u2260 j) the following condition\nfulfills: 0 \u2264 bij \u2264 10^9, bij = bji. Output Print n non-negative integers a1,\na2, ..., an (0 \u2264 ai \u2264 10^9) \u2014 the sequence that Polycarpus wiped off the\nboard. Separate the numbers by whitespaces. It is guaranteed that there is\nsequence a that satisfies the problem conditions. If there are multiple such\nsequences, you are allowed to print any of them. Examples Input 1 -1 Output 0\nInput 3 -1 18 0 18 -1 0 0 0 -1 Output 18 18 0 Input 4 -1 128 128 128 128 -1\n148 160 128 148 -1 128 128 160 128 -1 Output 128 180 148 160 Note If you do\nnot know what is the \"bitwise AND\" operation please read:\nhttp://en.wikipedia.org/wiki/Bitwise_operation.\n\n",
        "cf_contest_id": 245,
        "cf_index": "D",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n-1\r\n",
                "0\n"
            ],
            [
                "3\r\n-1 18 0\r\n18 -1 0\r\n0 0 -1\r\n",
                "18\n18\n0\n"
            ],
            [
                "4\r\n-1 128 128 128\r\n128 -1 148 160\r\n128 148 -1 128\r\n128 160 128 -1\r\n",
                "128\n180\n148\n160\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n-1 0 0 0 0\r\n0 -1 1 0 0\r\n0 1 -1 0 0\r\n0 0 0 -1 0\r\n0 0 0 0 -1\r\n",
                "0\n1\n1\n0\n0\n"
            ],
            [
                "9\r\n-1 0 0 2 0 2 10 2 0\r\n0 -1 17 16 16 17 0 17 16\r\n0 17 -1 16 16 17 0 17 16\r\n2 16 16 -1 16 18 2 18 16\r\n0 16 16 16 -1 16 0 16 16\r\n2 17 17 18 16 -1 2 19 16\r\n10 0 0 2 0 2 -1 2 0\r\n2 17 17 18 16 19 2 -1 16\r\n0 16 16 16 16 16 0 16 -1\r\n",
                "10\n17\n17\n18\n16\n19\n10\n19\n16\n"
            ],
            [
                "2\r\n-1 0\r\n0 -1\r\n",
                "0\n0\n"
            ]
        ]
    }
]