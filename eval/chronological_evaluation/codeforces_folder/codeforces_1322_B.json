[
    {
        "name": "Present",
        "description": "Catherine received an array of integers as a gift for March 8. Eventually she\ngrew bored with it, and she started calculated various useless characteristics\nfor it. She succeeded to do it for each one she came up with. But when she\ncame up with another one \u2014 xor of all pairwise sums of elements in the array,\nshe realized that she couldn't compute it for a very large array, thus she\nasked for your help. Can you do it? Formally, you need to compute \n    \n\n    (a_1\n    + a_2) \n    \u2295 (a_1 + a_3) \n    \u2295\n    \u2026\n    \u2295 (a_1 + a_n) \n    \n    \n    \n    \u2295 (a_2 + a_3) \n    \u2295\n    \u2026\n    \u2295 (a_2 + a_n) \n    \n    \n     \n    \u2026\n    \n    \n     \n    \u2295 (a_n-1 + a_n)\n\n    \n Here \n    x \n    \u2295 y\n is a\nbitwise XOR operation (i.e. \n    x\n ^ \n    y\n in many modern programming\nlanguages). You can read about it in Wikipedia:\nhttps://en.wikipedia.org/wiki/Exclusive_or#Bitwise_operation. Input The first\nline contains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 400\n     000\n) \u2014\nthe number of integers in the array. The second line contains integers \n    a_1,\n    a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^7\n). Output Print a single\ninteger \u2014 xor of all pairwise sums of integers in the given array. Examples\nInput 2 1 2 Output 3 Input 3 1 2 3 Output 2 Note In the first sample case\nthere is only one sum \n    1 + 2 = 3\n. In the second sample case there are\nthree sums: \n    1 + 2 = 3\n, \n    1 + 3 = 4\n, \n    2 + 3 = 5\n. In binary they\nare represented as \n    011_2 \n    \u2295 100_2 \n    \u2295 101_2 = 010_2\n, thus the\nanswer is 2. \n    \u2295\n is the bitwise xor operation. To define \n    x\n    \n    \u2295 y\n, consider binary representations of integers \n    x\n and\n\n    y\n. We put the \n    i\n-th bit of the result to be 1 when exactly one of\nthe \n    i\n-th bits of \n    x\n and \n    y\n is 1. Otherwise, the \n    i\n-th bit\nof the result is put to be 0. For example, \n    0101_2 \n     \n    \u2295\n      0011_2\n    = 0110_2\n.\n\n",
        "cf_contest_id": 1322,
        "cf_index": "B",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "bitmasks",
            "constructive algorithms",
            "data structures",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "2\r\n1 2\r\n",
                "3\r\n"
            ],
            [
                "3\r\n1 2 3\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 1\r\n",
                "2\r\n"
            ],
            [
                "100\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\r\n",
                "102\r\n"
            ],
            [
                "50\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\r\n",
                "3\r\n"
            ],
            [
                "51\r\n50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\r\n",
                "148\r\n"
            ],
            [
                "3\r\n2 2 8\r\n",
                "4\r\n"
            ]
        ]
    }
]