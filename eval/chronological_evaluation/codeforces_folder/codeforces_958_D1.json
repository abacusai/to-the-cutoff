[
    {
        "name": "Hyperspace Jump (easy)",
        "description": "The Rebel fleet is on the run. It consists of m ships currently gathered\naround a single planet. Just a few seconds ago, the vastly more powerful\nEmpire fleet has appeared in the same solar system, and the Rebels will need\nto escape into hyperspace. In order to spread the fleet, the captain of each\nship has independently come up with the coordinate to which that ship will\njump. In the obsolete navigation system used by the Rebels, this coordinate is\ngiven as the value of an arithmetic expression of the form . To plan the\nfuture of the resistance movement, Princess Heidi needs to know, for each\nship, how many ships are going to end up at the same coordinate after the\njump. You are her only hope! Input The first line of the input contains a\nsingle integer m (1 \u2264 m \u2264 200 000) \u2013 the number of ships. The next m lines\ndescribe one jump coordinate each, given as an arithmetic expression. An\nexpression has the form (a+b)/c. Namely, it consists of: an opening\nparenthesis (, a positive integer a of up to two decimal digits, a plus sign\n+, a positive integer b of up to two decimal digits, a closing parenthesis ),\na slash /, and a positive integer c of up to two decimal digits. Output Print\na single line consisting of m space-separated integers. The i-th integer\nshould be equal to the number of ships whose coordinate is equal to that of\nthe i-th ship (including the i-th ship itself). Example Input 4 (99+98)/97\n(26+4)/10 (12+33)/15 (5+1)/7 Output 1 2 2 1 Note In the sample testcase, the\nsecond and the third ship will both end up at the coordinate 3. Note that this\nproblem has only two versions \u2013 easy and hard.\n\n",
        "cf_contest_id": 958,
        "cf_index": "D1",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "expression parsing",
            "math"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n(99+98)/97\r\n(26+4)/10\r\n(12+33)/15\r\n(5+1)/7\r\n",
                "1\r\n2\r\n2\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n(44+98)/19\r\n(36+58)/47\r\n(62+74)/68\r\n(69+95)/82\r\n(26+32)/29\r\n(32+46)/39\r\n(32+24)/28\r\n(47+61)/54\r\n(39+13)/26\r\n(98+98)/98\r\n",
                "1\r\n9\r\n9\r\n9\r\n9\r\n9\r\n9\r\n9\r\n9\r\n9\r\n"
            ],
            [
                "30\r\n(89+76)/87\r\n(81+78)/18\r\n(60+97)/32\r\n(41+14)/48\r\n(55+65)/27\r\n(29+15)/95\r\n(64+13)/96\r\n(78+30)/75\r\n(43+6)/60\r\n(69+34)/48\r\n(62+2)/97\r\n(85+42)/3\r\n(4+97)/42\r\n(1+18)/39\r\n(46+55)/76\r\n(22+59)/24\r\n(62+81)/98\r\n(64+8)/51\r\n(9+59)/48\r\n(47+2)/80\r\n(33+74)/76\r\n(61+83)/44\r\n(86+4)/51\r\n(65+41)/49\r\n(53+36)/45\r\n(6+19)/15\r\n(51+21)/68\r\n(98+36)/86\r\n(92+65)/86\r\n(27+58)/78\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n"
            ]
        ]
    }
]