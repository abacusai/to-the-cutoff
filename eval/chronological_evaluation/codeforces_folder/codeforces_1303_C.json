[
    {
        "name": "Perfect Keyboard",
        "description": "Polycarp wants to assemble his own keyboard. Layouts with multiple rows are\ntoo complicated for him \u2014 his keyboard will consist of only one row, where all\n\n    26\n lowercase Latin letters will be arranged in some order. Polycarp uses\nthe same password \n    s\n on all websites where he is registered (it is bad,\nbut he doesn't care). He wants to assemble a keyboard that will allow to type\nthis password very easily. He doesn't like to move his fingers while typing\nthe password, so, for each pair of adjacent characters in \n    s\n, they should\nbe adjacent on the keyboard. For example, if the password is abacaba, then the\nlayout cabdefghi... is perfect, since characters a and c are adjacent on the\nkeyboard, and a and b are adjacent on the keyboard. It is guaranteed that\nthere are no two adjacent equal characters in \n    s\n, so, for example, the\npassword cannot be password (two characters s are adjacent). Can you help\nPolycarp with choosing the perfect layout of the keyboard, if it is possible?\nInput The first line contains one integer \n    T\n (\n    1 \n    \u2264 T \n    \u2264 1000\n)\n\u2014 the number of test cases. Then \n    T\n lines follow, each containing one\nstring \n    s\n (\n    1 \n    \u2264 |s| \n    \u2264 200\n) representing the test case.\n\n    s\n consists of lowercase Latin letters only. There are no two adjacent\nequal characters in \n    s\n. Output For each test case, do the following: if\nit is impossible to assemble a perfect keyboard, print NO (in upper case, it\nmatters in this problem); otherwise, print YES (in upper case), and then a\nstring consisting of \n    26\n lowercase Latin letters \u2014 the perfect layout.\nEach Latin letter should appear in this string exactly once. If there are\nmultiple answers, print any of them. Example Input 5 ababa codedoca abcda\nzxzytyz abcdefghijklmnopqrstuvwxyza Output YES bacdefghijklmnopqrstuvwxyz YES\nedocabfghijklmnpqrstuvwxyz NO YES xzytabcdefghijklmnopqrsuvw NO\n\n",
        "cf_contest_id": 1303,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\nababa\r\ncodedoca\r\nabcda\r\nzxzytyz\r\nabcdefghijklmnopqrstuvwxyza\r\n",
                "YES\r\nabqwertyuiopsdfghjklzxcvnm\r\nYES\r\nacodeqwrtyuipsfghjklzxvbnm\r\nNO\r\nYES\r\ntyzxqweruiopasdfghjklcvbnm\r\nNO\r\n"
            ]
        ],
        "private_cases": []
    }
]