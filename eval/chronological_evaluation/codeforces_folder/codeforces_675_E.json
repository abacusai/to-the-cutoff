[
    {
        "name": "Trains and Statistic",
        "description": "Vasya commutes by train every day. There are n train stations in the city, and\nat the i-th station it's possible to buy only tickets to stations from i + 1\nto ai inclusive. No tickets are sold at the last station. Let \u03c1i, j be the\nminimum number of tickets one needs to buy in order to get from stations i to\nstation j. As Vasya is fond of different useless statistic he asks you to\ncompute the sum of all values \u03c1i, j among all pairs 1 \u2264 i < j \u2264 n. Input The\nfirst line of the input contains a single integer n (2 \u2264 n \u2264 100 000) \u2014 the\nnumber of stations. The second line contains n - 1 integer ai (i + 1 \u2264 ai \u2264\nn), the i-th of them means that at the i-th station one may buy tickets to\neach station from i + 1 to ai inclusive. Output Print the sum of \u03c1i, j among\nall pairs of 1 \u2264 i < j \u2264 n. Examples Input 4 4 4 4 Output 6 Input 5 2 3 5 5\nOutput 17 Note In the first sample it's possible to get from any station to\nany other (with greater index) using only one ticket. The total number of\npairs is 6, so the answer is also 6. Consider the second sample: \u03c11, 2 = 1 \u03c11,\n3 = 2 \u03c11, 4 = 3 \u03c11, 5 = 3 \u03c12, 3 = 1 \u03c12, 4 = 2 \u03c12, 5 = 2 \u03c13, 4 = 1 \u03c13, 5 = 1\n\u03c14, 5 = 1 Thus the answer equals 1 + 2 + 3 + 3 + 1 + 2 + 2 + 1 + 1 + 1 = 17.\n\n",
        "cf_contest_id": 675,
        "cf_index": "E",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4 4 4\r\n",
                "6"
            ],
            [
                "5\r\n2 3 5 5\r\n",
                "17"
            ]
        ],
        "private_cases": [
            [
                "2\r\n2\r\n",
                "1"
            ],
            [
                "10\r\n2 10 8 7 8 8 10 9 10\r\n",
                "63"
            ],
            [
                "3\r\n3 3\r\n",
                "3"
            ],
            [
                "4\r\n3 3 4\r\n",
                "8"
            ],
            [
                "5\r\n4 4 4 5\r\n",
                "13"
            ],
            [
                "6\r\n3 3 6 6 6\r\n",
                "21"
            ],
            [
                "7\r\n7 3 4 6 6 7\r\n",
                "35"
            ],
            [
                "8\r\n3 7 7 8 8 7 8\r\n",
                "37"
            ],
            [
                "9\r\n2 9 7 6 9 7 8 9\r\n",
                "52"
            ]
        ]
    }
]