[
    {
        "name": "Shifts",
        "description": "You are given a table consisting of n rows and m columns. Each cell of the\ntable contains a number, 0 or 1. In one move we can choose some row of the\ntable and cyclically shift its values either one cell to the left, or one cell\nto the right. To cyclically shift a table row one cell to the right means to\nmove the value of each cell, except for the last one, to the right neighboring\ncell, and to move the value of the last cell to the first cell. A cyclical\nshift of a row to the left is performed similarly, but in the other direction.\nFor example, if we cyclically shift a row \"00110\" one cell to the right, we\nget a row \"00011\", but if we shift a row \"00110\" one cell to the left, we get\na row \"01100\". Determine the minimum number of moves needed to make some table\ncolumn consist only of numbers 1. Input The first line contains two space-\nseparated integers: n (1 \u2264 n \u2264 100) \u2014 the number of rows in the table and m (1\n\u2264 m \u2264 10^4) \u2014 the number of columns in the table. Then n lines follow, each of\nthem contains m characters \"0\" or \"1\": the j-th character of the i-th line\ndescribes the contents of the cell in the i-th row and in the j-th column of\nthe table. It is guaranteed that the description of the table contains no\nother characters besides \"0\" and \"1\". Output Print a single number: the\nminimum number of moves needed to get only numbers 1 in some column of the\ntable. If this is impossible, print -1. Examples Input 3 6 101010 000100\n100000 Output 3 Input 2 3 111 000 Output -1 Note In the first sample one way\nto achieve the goal with the least number of moves is as follows: cyclically\nshift the second row to the right once, then shift the third row to the left\ntwice. Then the table column before the last one will contain only 1s. In the\nsecond sample one can't shift the rows to get a column containing only 1s.\n\n",
        "cf_contest_id": 229,
        "cf_index": "A",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 6\r\n101010\r\n000100\r\n100000\r\n",
                "3\r\n"
            ],
            [
                "2 3\r\n111\r\n000\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "1 1\r\n0\r\n",
                "-1\r\n"
            ],
            [
                "3 1\r\n1\r\n1\r\n0\r\n",
                "-1\r\n"
            ],
            [
                "6 2\r\n10\r\n11\r\n01\r\n01\r\n10\r\n11\r\n",
                "2\r\n"
            ],
            [
                "3 3\r\n001\r\n010\r\n100\r\n",
                "2\r\n"
            ],
            [
                "4 4\r\n0001\r\n0100\r\n0010\r\n1000\r\n",
                "4\r\n"
            ],
            [
                "5 5\r\n10000\r\n01000\r\n00100\r\n00010\r\n00001\r\n",
                "6\r\n"
            ],
            [
                "5 5\r\n10001\r\n00100\r\n01000\r\n01001\r\n11111\r\n",
                "2\r\n"
            ],
            [
                "5 5\r\n11111\r\n11111\r\n11111\r\n11111\r\n00000\r\n",
                "-1\r\n"
            ],
            [
                "5 10\r\n0001000100\r\n1000001000\r\n0001000001\r\n0100001010\r\n0110100000\r\n",
                "5\r\n"
            ],
            [
                "6 6\r\n111000\r\n011100\r\n001110\r\n000111\r\n100011\r\n110001\r\n",
                "4\r\n"
            ],
            [
                "2 9\r\n101010101\r\n010101010\r\n",
                "1\r\n"
            ],
            [
                "4 6\r\n000001\r\n100000\r\n100000\r\n100000\r\n",
                "1\r\n"
            ],
            [
                "3 6\r\n000010\r\n010000\r\n000100\r\n",
                "3\r\n"
            ],
            [
                "4 10\r\n0000101010\r\n1010101010\r\n0101010101\r\n0000010100\r\n",
                "2\r\n"
            ],
            [
                "10 10\r\n0000000000\r\n0000000010\r\n0010000000\r\n0111000010\r\n1000000000\r\n0000000100\r\n0000000100\r\n0000100100\r\n0010000000\r\n0000100000\r\n",
                "-1\r\n"
            ],
            [
                "10 10\r\n0000000000\r\n0000001000\r\n0000000100\r\n0101000100\r\n0000000000\r\n0000000000\r\n1000110000\r\n1011010010\r\n0000100000\r\n0000001001\r\n",
                "-1\r\n"
            ],
            [
                "10 10\r\n0001001101\r\n0010001010\r\n1100000000\r\n0110110110\r\n1011011010\r\n1001001001\r\n0100010001\r\n0110000100\r\n0000100000\r\n1000010000\r\n",
                "8\r\n"
            ],
            [
                "10 10\r\n1111111111\r\n1111111111\r\n1111111111\r\n1111111111\r\n1111111111\r\n1111111111\r\n1111111111\r\n1111111111\r\n1111111111\r\n1111111111\r\n",
                "0\r\n"
            ],
            [
                "2 5\r\n10000\r\n00001\r\n",
                "1\r\n"
            ],
            [
                "3 7\r\n1000000\r\n0000010\r\n1000000\r\n",
                "2\r\n"
            ],
            [
                "4 5\r\n10010\r\n11001\r\n00010\r\n11000\r\n",
                "2\r\n"
            ],
            [
                "2 10\r\n0000000001\r\n1000000000\r\n",
                "1\r\n"
            ],
            [
                "5 5\r\n10000\r\n10000\r\n00001\r\n10000\r\n10000\r\n",
                "1\r\n"
            ],
            [
                "3 4\r\n0001\r\n0001\r\n1000\r\n",
                "1\r\n"
            ],
            [
                "3 6\r\n101010\r\n000010\r\n100000\r\n",
                "2\r\n"
            ],
            [
                "4 7\r\n0100000\r\n0100000\r\n0000001\r\n0000001\r\n",
                "4\r\n"
            ],
            [
                "5 1\r\n0\r\n0\r\n0\r\n0\r\n0\r\n",
                "-1\r\n"
            ],
            [
                "3 5\r\n00001\r\n10000\r\n00001\r\n",
                "1\r\n"
            ],
            [
                "3 1\r\n0\r\n0\r\n0\r\n",
                "-1\r\n"
            ]
        ]
    }
]