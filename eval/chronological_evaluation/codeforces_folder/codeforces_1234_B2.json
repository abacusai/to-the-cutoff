[
    {
        "name": "Social Network (hard version)",
        "description": "The only difference between easy and hard versions are constraints on \n    n\n\nand \n    k\n. You are messaging in one of the popular social networks via your\nsmartphone. Your smartphone can show at most \n    k\n most recent conversations\nwith your friends. Initially, the screen is empty (i.e. the number of\ndisplayed conversations equals \n    0\n). Each conversation is between you and\nsome of your friends. There is at most one conversation with any of your\nfriends. So each conversation is uniquely defined by your friend. You\n(suddenly!) have the ability to see the future. You know that during the day\nyou will receive \n    n\n messages, the \n    i\n-th message will be received\nfrom the friend with ID \n    id_i\n (\n    1 \n    \u2264 id_i \n    \u2264 10^9\n). If you\nreceive a message from \n    id_i\n in the conversation which is currently\ndisplayed on the smartphone then nothing happens: the conversations of the\nscreen do not change and do not change their order, you read the message and\ncontinue waiting for new messages. Otherwise (i.e. if there is no conversation\nwith \n    id_i\n on the screen): Firstly, if the number of conversations\ndisplayed on the screen is \n    k\n, the last conversation (which has the\nposition \n    k\n) is removed from the screen. Now the number of conversations\non the screen is guaranteed to be less than \n    k\n and the conversation with\nthe friend \n    id_i\n is not displayed on the screen. The conversation with\nthe friend \n    id_i\n appears on the first (the topmost) position on the\nscreen and all the other displayed conversations are shifted one position\ndown. Your task is to find the list of conversations (in the order they are\ndisplayed on the screen) after processing all \n    n\n messages. Input The\nfirst line of the input contains two integers \n    n\n and \n    k\n (\n    1 \n    \u2264\n    n, k \n    \u2264 2 \n    \u00b7 10^5)\n \u2014 the number of messages and the number of\nconversations your smartphone can show. The second line of the input contains\n\n    n\n integers \n    id_1, id_2, \n    \u2026, id_n\n (\n    1 \n    \u2264 id_i \n    \u2264\n    10^9\n), where \n    id_i\n is the ID of the friend which sends you the\n\n    i\n-th message. Output In the first line of the output print one integer\n\n    m\n (\n    1 \n    \u2264 m \n    \u2264 min(n, k)\n) \u2014 the number of conversations shown\nafter receiving all \n    n\n messages. In the second line print \n    m\n\nintegers \n    ids_1, ids_2, \n    \u2026, ids_m\n, where \n    ids_i\n should be equal\nto the ID of the friend corresponding to the conversation displayed on the\nposition \n    i\n after receiving all \n    n\n messages. Examples Input 7 2 1 2\n3 2 1 3 2 Output 2 2 1 Input 10 4 2 3 3 1 1 2 1 2 3 3 Output 3 1 3 2 Note In\nthe first example the list of conversations will change in the following way\n(in order from the first to last message): \n    []\n; \n    [1]\n; \n    [2, 1]\n;\n\n    [3, 2]\n; \n    [3, 2]\n; \n    [1, 3]\n; \n    [1, 3]\n; \n    [2, 1]\n. In the\nsecond example the list of conversations will change in the following way:\n\n    []\n; \n    [2]\n; \n    [3, 2]\n; \n    [3, 2]\n; \n    [1, 3, 2]\n; and then the\nlist will not change till the end.\n\n",
        "cf_contest_id": 1234,
        "cf_index": "B2",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 2\r\n1 2 3 2 1 3 2\r\n",
                "2 2 1\r\n"
            ],
            [
                "10 4\r\n2 3 3 1 1 2 1 2 3 3\r\n",
                "3 1 3 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 4\r\n1\r\n",
                "1 1\r\n"
            ]
        ]
    }
]