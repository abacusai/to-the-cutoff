[
    {
        "name": "Yet Another Problem About Pairs Satisfying an Inequality",
        "description": "You are given an array \n    a_1, a_2, \n    \u2026 a_n\n. Count the number of pairs\nof indices \n    1 \n    \u2264 i, j \n    \u2264 n\n such that \n    a_i < i < a_j < j\n.\nInput The first line contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    1000\n) \u2014 the number of test cases. The first line of each test case contains\nan integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the length of\nthe array. The second line of each test case contains \n    n\n integers \n    a_1,\n    a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the elements of the\narray. It is guaranteed that the sum of \n    n\n across all test cases does not\nexceed \n    2 \n    \u00b7 10^5\n. Output For each test case, output a single\ninteger \u2014 the number of pairs of indices satisfying the condition in the\nstatement. Please note, that the answer for some test cases won't fit into\n32-bit integer type, so you should use at least 64-bit integer type in your\nprogramming language (like long long for C++). Example Input 5 8 1 1 2 3 8 2 1\n4 2 1 2 10 0 2 1 6 3 4 1 2 8 3 2 1 1000000000 3 0 1000000000 2 Output 3 0 10 0\n1 Note For the first test cases the pairs are \n    (i, j)\n = \n    (2, 4),\n    (2, 8), (3, 8)\n. The pair \n    (2, 4)\n is true because \n    a_2 = 1\n,\n\n    a_4 = 3\n and \n    1 < 2 < 3 < 4\n. The pair \n    (2, 8)\n is true because\n\n    a_2 = 1\n, \n    a_8 = 4\n and \n    1 < 2 < 4 < 8\n. The pair \n    (3, 8)\n is\ntrue because \n    a_3 = 2\n, \n    a_8 = 4\n and \n    2 < 3 < 4 < 8\n.\n\n",
        "cf_contest_id": 1703,
        "cf_index": "F",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dp",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n8\r\n1 1 2 3 8 2 1 4\r\n2\r\n1 2\r\n10\r\n0 2 1 6 3 4 1 2 8 3\r\n2\r\n1 1000000000\r\n3\r\n0 1000000000 2\r\n",
                "3\r\n0\r\n10\r\n0\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]