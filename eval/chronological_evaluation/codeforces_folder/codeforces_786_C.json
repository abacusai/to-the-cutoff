[
    {
        "name": "Till I Collapse",
        "description": "Rick and Morty want to find MR. PBH and they can't do it alone. So they need\nof Mr. Meeseeks. They Have generated n Mr. Meeseeks, standing in a line\nnumbered from 1 to n. Each of them has his own color. i-th Mr. Meeseeks' color\nis ai. Rick and Morty are gathering their army and they want to divide Mr.\nMeeseeks into some squads. They don't want their squads to be too colorful, so\neach squad should have Mr. Meeseeks of at most k different colors. Also each\nsquad should be a continuous subarray of Mr. Meeseeks in the line. Meaning\nthat for each 1 \u2264 i \u2264 e \u2264 j \u2264 n, if Mr. Meeseeks number i and Mr. Meeseeks\nnumber j are in the same squad then Mr. Meeseeks number e should be in that\nsame squad. Also, each squad needs its own presidio, and building a presidio\nneeds money, so they want the total number of squads to be minimized. Rick and\nMorty haven't finalized the exact value of k, so in order to choose it, for\neach k between 1 and n (inclusive) need to know the minimum number of\npresidios needed. Input The first line of input contains a single integer n (1\n\u2264 n \u2264 10^5) \u2014 number of Mr. Meeseeks. The second line contains n integers a1,\na2, ..., an separated by spaces (1 \u2264 ai \u2264 n) \u2014 colors of Mr. Meeseeks in order\nthey standing in a line. Output In the first and only line of input print n\nintegers separated by spaces. i-th integer should be the minimum number of\npresidios needed if the value of k is i. Examples Input 5 1 3 4 3 3 Output 4 2\n1 1 1 Input 8 1 5 7 8 1 7 6 1 Output 8 4 3 2 1 1 1 1 Note For the first sample\ntestcase, some optimal ways of dividing army into squads for each k are: [1],\n[3], [4], [3, 3] [1], [3, 4, 3, 3] [1, 3, 4, 3, 3] [1, 3, 4, 3, 3] [1, 3, 4,\n3, 3] For the second testcase, some optimal ways of dividing army into squads\nfor each k are: [1], [5], [7], [8], [1], [7], [6], [1] [1, 5], [7, 8], [1, 7],\n[6, 1] [1, 5, 7], [8], [1, 7, 6, 1] [1, 5, 7, 8], [1, 7, 6, 1] [1, 5, 7, 8, 1,\n7, 6, 1] [1, 5, 7, 8, 1, 7, 6, 1] [1, 5, 7, 8, 1, 7, 6, 1] [1, 5, 7, 8, 1, 7,\n6, 1]\n\n",
        "cf_contest_id": 786,
        "cf_index": "C",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "divide and conquer"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 3 4 3 3\r\n",
                "4 2 1 1 1 "
            ],
            [
                "8\r\n1 5 7 8 1 7 6 1\r\n",
                "8 4 3 2 1 1 1 1 "
            ]
        ],
        "private_cases": [
            [
                "10\r\n4 1 2 6 8 5 3 9 3 9\r\n",
                "10 4 3 2 2 2 2 1 1 1 "
            ],
            [
                "85\r\n23 11 69 1 49 10 7 13 66 35 81 4 51 2 62 55 31 18 85 34 59 44 20 28 27 5 6 79 43 78 45 64 61 56 12 40 54 52 24 14 26 65 75 72 30 46 67 80 38 70 25 60 50 8 17 84 41 71 58 76 19 47 73 29 3 48 82 33 39 63 15 37 83 36 9 32 16 57 68 53 21 77 22 42 74\r\n",
                "85 43 29 22 17 15 13 11 10 9 8 8 7 7 6 6 5 5 5 5 5 4 4 4 4 4 4 4 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 "
            ],
            [
                "100\r\n39 78 71 61 54 13 17 81 30 33 83 98 44 10 45 87 75 47 70 84 41 86 49 94 85 91 37 64 5 56 67 79 28 89 50 53 77 93 81 14 97 67 58 6 48 60 89 62 29 3 38 8 88 19 66 63 100 17 43 97 21 12 58 76 2 78 25 73 99 11 27 18 57 46 4 72 68 45 74 18 2 80 51 52 42 59 55 35 1 95 42 92 36 40 59 15 7 21 97 53\r\n",
                "100 50 34 25 20 17 15 13 11 10 10 9 8 7 7 6 6 6 6 5 5 5 5 4 4 4 4 4 4 4 4 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 "
            ],
            [
                "1\r\n1\r\n",
                "1 "
            ]
        ]
    }
]