[
    {
        "name": "Toda 2",
        "description": "A group of n friends enjoys playing popular video game Toda 2. There is a\nrating system describing skill level of each player, initially the rating of\nthe i-th friend is ri. The friends decided to take part in the championship as\na team. But they should have equal ratings to be allowed to compose a single\nteam consisting of all n friends. So the friends are faced with the problem:\nhow to make all their ratings equal. One way to change ratings is to willingly\nlose in some matches. Friends can form a party consisting of two to five (but\nnot more than n) friends and play a match in the game. When the party loses,\nthe rating of each of its members decreases by 1. A rating can't become\nnegative, so ri = 0 doesn't change after losing. The friends can take part in\nmultiple matches, each time making a party from any subset of friends (but\nremember about constraints on party size: from 2 to 5 members). The friends\nwant to make their ratings equal but as high as possible. Help the friends\ndevelop a strategy of losing the matches so that all their ratings become\nequal and the resulting rating is maximum possible. Input The first line\ncontains a single integer n (2 \u2264 n \u2264 100) \u2014 the number of friends. The second\nline contains n non-negative integers r1, r2, ..., rn (0 \u2264 ri \u2264 100), where ri\nis the initial rating of the i-th friend. Output In the first line, print a\nsingle integer R \u2014 the final rating of each of the friends. In the second\nline, print integer t \u2014 the number of matches the friends have to play. Each\nof the following t lines should contain n characters '0' or '1', where the\nj-th character of the i-th line is equal to: '0', if friend j should not play\nin match i, '1', if friend j should play in match i. Each line should contain\nbetween two and five characters '1', inclusive. The value t should not exceed\n10^4, it is guaranteed that such solution exists. Remember that you shouldn't\nminimize the value t, but you should maximize R. If there are multiple\nsolutions, print any of them. Examples Input 5 4 5 1 7 4 Output 1 8 01010\n00011 01010 10010 00011 11000 00011 11000 Input 2 1 2 Output 0 2 11 11 Input 3\n1 1 1 Output 1 0\n\n",
        "cf_contest_id": 730,
        "cf_index": "A",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5\r\n4 5 1 7 4\r\n",
                "1\r\n8\r\n01010\r\n01010\r\n10010\r\n00011\r\n00011\r\n11000\r\n11000\r\n00011\r\n"
            ],
            [
                "2\r\n1 2\r\n",
                "0\r\n2\r\n11\r\n11\r\n"
            ],
            [
                "3\r\n1 1 1\r\n",
                "1\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n6 8 7 6 8 7 6 7 8 7\r\n",
                "6\r\n4\r\n0100100010\r\n0100100000\r\n0010000010\r\n0000010101\r\n"
            ],
            [
                "5\r\n4 4 4 7 3\r\n",
                "2\r\n6\r\n10010\r\n01010\r\n00110\r\n00110\r\n01010\r\n10001\r\n"
            ],
            [
                "5\r\n4 7 5 2 2\r\n",
                "2\r\n5\r\n01100\r\n01100\r\n11000\r\n11000\r\n01100\r\n"
            ],
            [
                "6\r\n5 4 2 4 3 2\r\n",
                "2\r\n4\r\n110000\r\n100100\r\n100100\r\n010010\r\n"
            ],
            [
                "7\r\n7 8 2 7 10 11 5\r\n",
                "2\r\n17\r\n0000110\r\n0000110\r\n0000110\r\n0100010\r\n0100010\r\n1001100\r\n1000100\r\n0101010\r\n0001010\r\n0100100\r\n1000001\r\n1000001\r\n0100100\r\n0001010\r\n0001010\r\n0100100\r\n1000001\r\n"
            ],
            [
                "10\r\n2 3 3 3 2 6 2 5 3 5\r\n",
                "2\r\n6\r\n0000010100\r\n0000010001\r\n0000010101\r\n0000010001\r\n0100000100\r\n0011000010\r\n"
            ],
            [
                "2\r\n62 64\r\n",
                "0\r\n64\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n"
            ],
            [
                "2\r\n71 70\r\n",
                "0\r\n71\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n"
            ],
            [
                "5\r\n4 5 4 3 3\r\n",
                "3\r\n2\r\n11000\r\n01100\r\n"
            ],
            [
                "6\r\n4 2 3 2 2 2\r\n",
                "1\r\n4\r\n101000\r\n101000\r\n110000\r\n000111\r\n"
            ],
            [
                "7\r\n4 6 5 8 8 2 6\r\n",
                "2\r\n12\r\n0001100\r\n0001100\r\n0001100\r\n0100001\r\n0100001\r\n0011100\r\n0001100\r\n0110000\r\n1000001\r\n1000001\r\n0110000\r\n0001100\r\n"
            ],
            [
                "10\r\n4 5 3 3 3 4 2 3 2 2\r\n",
                "2\r\n5\r\n1100000000\r\n0100010000\r\n0100010000\r\n1010000000\r\n0001100100\r\n"
            ],
            [
                "2\r\n61 60\r\n",
                "0\r\n61\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n11\r\n"
            ],
            [
                "2\r\n70 70\r\n",
                "70\r\n0\r\n"
            ],
            [
                "4\r\n1 1 6 2\r\n",
                "0\r\n6\r\n0011\r\n0011\r\n1010\r\n0110\r\n0110\r\n0110\r\n"
            ],
            [
                "3\r\n1 2 6\r\n",
                "0\r\n6\r\n011\r\n011\r\n101\r\n101\r\n101\r\n101\r\n"
            ],
            [
                "7\r\n2 5 4 1 6 3 4\r\n",
                "1\r\n8\r\n0100100\r\n0100100\r\n0010101\r\n0010100\r\n0100011\r\n0100001\r\n0000110\r\n1010000\r\n"
            ]
        ]
    }
]