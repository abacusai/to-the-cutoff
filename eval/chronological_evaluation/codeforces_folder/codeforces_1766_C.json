[
    {
        "name": "Hamiltonian Wall",
        "description": "Sir Monocarp Hamilton is planning to paint his wall. The wall can be\nrepresented as a grid, consisting of \n    2\n rows and \n    m\n columns.\nInitially, the wall is completely white. Monocarp wants to paint a black\npicture on the wall. In particular, he wants cell \n    (i, j)\n (the \n    j\n-th\ncell in the \n    i\n-th row) to be colored black, if \n    c_i, j =\n 'B', and\nto be left white, if \n    c_i, j =\n 'W'. Additionally, he wants each column\nto have at least one black cell, so, for each \n    j\n, the following\nconstraint is satisfied: \n    c_1, j\n, \n    c_2, j\n or both of them will\nbe equal to 'B'. In order for the picture to turn out smooth, Monocarp wants\nto place down a paint brush in some cell \n    (x_1, y_1)\n and move it along\nthe path \n    (x_1, y_1), (x_2, y_2), \n    \u2026, (x_k, y_k)\n so that: for each\n\n    i\n, \n    (x_i, y_i)\n and \n    (x_i+1, y_i+1)\n share a common side;\nall black cells appear in the path exactly once; white cells don't appear in\nthe path. Determine if Monocarp can paint the wall. Input The first line\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of\ntestcases. The first line of each testcase contains a single integer \n    m\n\n(\n    1 \n    \u2264 m \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of columns in the wall.\nThe \n    i\n-th of the next two lines contains a string \n    c_i\n, consisting\nof \n    m\n characters, where each character is either 'B' or 'W'. \n    c_i,\n    j\n is 'B', if the cell \n    (i, j)\n should be colored black, and 'W', if\nthe cell \n    (i, j)\n should be left white. Additionally, for each \n    j\n,\nthe following constraint is satisfied: \n    c_1, j\n, \n    c_2, j\n or both\nof them are equal to 'B'. The sum of \n    m\n over all testcases doesn't exceed\n\n    2 \n    \u00b7 10^5\n. Output For each testcase, print \"YES\" if Monocarp can\npaint a wall. Otherwise, print \"NO\". Example Input 6 3 WBB BBW 1 B B 5 BWBWB\nBBBBB 2 BW WB 5 BBBBW BWBBB 6 BWBBWB BBBBBB Output YES YES NO NO NO YES Note\nIn the first testcase, Monocarp can follow a path \n    (2, 1)\n, \n    (2, 2)\n,\n\n    (1, 2)\n, \n    (1, 3)\n with his brush. All black cells appear in the path\nexactly once, no white cells appear in the path. In the second testcase,\nMonocarp can follow a path \n    (1, 1)\n, \n    (2, 1)\n. In the third testcase:\nthe path \n    (1, 1)\n, \n    (2, 1)\n, \n    (2, 2)\n, \n    (2, 3)\n, \n    (1, 3)\n,\n\n    (2, 4)\n, \n    (2, 5)\n, \n    (1, 5)\n doesn't suffice because a pair of\ncells \n    (1, 3)\n and \n    (2, 4)\n doesn't share a common side; the path\n\n    (1, 1)\n, \n    (2, 1)\n, \n    (2, 2)\n, \n    (2, 3)\n, \n    (1, 3)\n, \n    (2,\n    3)\n, \n    (2, 4)\n, \n    (2, 5)\n, \n    (1, 5)\n doesn't suffice because cell\n\n    (2, 3)\n is visited twice; the path \n    (1, 1)\n, \n    (2, 1)\n, \n    (2,\n    2)\n, \n    (2, 3)\n, \n    (2, 4)\n, \n    (2, 5)\n, \n    (1, 5)\n doesn't suffice\nbecause a black cell \n    (1, 3)\n doesn't appear in the path; the path \n    (1,\n    1)\n, \n    (2, 1)\n, \n    (2, 2)\n, \n    (2, 3)\n, \n    (2, 4)\n, \n    (2, 5)\n,\n\n    (1, 5)\n, \n    (1, 4)\n, \n    (1, 3)\n doesn't suffice because a white cell\n\n    (1, 4)\n appears in the path.\n\n",
        "cf_contest_id": 1766,
        "cf_index": "C",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n3\r\nWBB\r\nBBW\r\n1\r\nB\r\nB\r\n5\r\nBWBWB\r\nBBBBB\r\n2\r\nBW\r\nWB\r\n5\r\nBBBBW\r\nBWBBB\r\n6\r\nBWBBWB\r\nBBBBBB\r\n",
                "YES\r\nYES\r\nNO\r\nNO\r\nNO\r\nYES\r\n"
            ]
        ],
        "private_cases": []
    }
]