[
    {
        "name": "Sequence Master",
        "description": "For some positive integer \n    m\n, YunQian considers an array \n    q\n of\n\n    2m\n (possibly negative) integers good, if and only if for every possible\nsubsequence of \n    q\n that has length \n    m\n, the product of the \n    m\n\nelements in the subsequence is equal to the sum of the \n    m\n elements that\nare not in the subsequence. Formally, let \n    U=\n    \n    1,2,\n    \u2026,2m\n.\nFor all sets \n    S \n    \u2286 U\n such that \n    |S|=m\n,\n\n    \u220f\n    _i \n    \u2208 S q_i = \n    \u2211\n    _i \n    \u2208 U \n    \u2216\n    S q_i\n. Define the distance between two arrays \n    a\n and \n    b\n both of\nlength \n    k\n to be \n    \u2211\n    _i=1^k|a_i-b_i|\n. You are given a\npositive integer \n    n\n and an array \n    p\n of \n    2n\n integers. Find the\nminimum distance between \n    p\n and \n    q\n over all good arrays \n    q\n of\nlength \n    2n\n. It can be shown for all positive integers \n    n\n, at least\none good array exists. Note that you are not required to construct the array\n\n    q\n that achieves this minimum distance. Input The first line contains a\nsingle integer \n    t\n (\n    1\n    \u2264 t\n    \u2264 10^4\n) \u2014 the number of test cases.\nThe description of test cases follows. The first line of each test case\ncontains a single integer \n    n\n (\n    1\n    \u2264 n\n    \u2264 2\n    \u00b710^5\n). The\nsecond line of each test case contains \n    2n\n integers \n    p_1, p_2,\n    \n    \u2026, p_2n\n (\n    |p_i| \n    \u2264 10^9\n). It is guaranteed that the sum of\n\n    n\n over all test cases does not exceed \n    2\n    \u00b7 10^5\n. Output For\neach test case, output the minimum distance between \n    p\n and a good\n\n    q\n. Example Input 4 1 6 9 2 1 2 2 1 2 -2 -2 2 2 4 -3 -2 -1 0 1 2 3 4\nOutput 3 2 5 13 Note In the first test case, it is optimal to let\n\n    q=[6,6]\n. In the second test case, it is optimal to let\n\n    q=[2,2,2,2]\n.\n\n",
        "cf_contest_id": 1806,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "4\r\n1\r\n6 9\r\n2\r\n1 2 2 1\r\n2\r\n-2 -2 2 2\r\n4\r\n-3 -2 -1 0 1 2 3 4\r\n",
                "3\r\n2\r\n5\r\n13\r\n"
            ]
        ],
        "private_cases": []
    }
]