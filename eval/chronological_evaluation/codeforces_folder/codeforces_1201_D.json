[
    {
        "name": "Treasure Hunting",
        "description": "You are on the island which can be represented as a \n    n \n    \u00d7 m\n table.\nThe rows are numbered from \n    1\n to \n    n\n and the columns are numbered\nfrom \n    1\n to \n    m\n. There are \n    k\n treasures on the island, the\n\n    i\n-th of them is located at the position \n    (r_i, c_i)\n. Initially you\nstand at the lower left corner of the island, at the position \n    (1, 1)\n. If\nat any moment you are at the cell with a treasure, you can pick it up without\nany extra time. In one move you can move up (from \n    (r, c)\n to \n    (r+1,\n    c)\n), left (from \n    (r, c)\n to \n    (r, c-1)\n), or right (from position\n\n    (r, c)\n to \n    (r, c+1)\n). Because of the traps, you can't move down.\nHowever, moving up is also risky. You can move up only if you are in a safe\ncolumn. There are \n    q\n safe columns: \n    b_1, b_2, \n    \u2026, b_q\n. You\nwant to collect all the treasures as fast as possible. Count the minimum\nnumber of moves required to collect all the treasures. Input The first line\ncontains integers \n    n\n, \n    m\n, \n    k\n and \n    q\n (\n    2 \n    \u2264 n, \n      m,\n    \n      k, \n      q \n    \u2264 2 \n    \u00b7 10^5\n, \n    q \n    \u2264 m\n) \u2014 the number of rows,\nthe number of columns, the number of treasures in the island and the number of\nsafe columns. Each of the next \n    k\n lines contains two integers \n    r_i,\n    c_i\n, (\n    1 \n    \u2264 r_i \n    \u2264 n\n, \n    1 \n    \u2264 c_i \n    \u2264 m\n) \u2014 the\ncoordinates of the cell with a treasure. All treasures are located in distinct\ncells. The last line contains \n    q\n distinct integers \n    b_1, b_2, \n    \u2026,\n    b_q\n (\n    1 \n    \u2264 b_i \n    \u2264 m\n) \u2014 the indices of safe columns. Output Print\nthe minimum number of moves required to collect all the treasures. Examples\nInput 3 3 3 2 1 1 2 1 3 1 2 3 Output 6 Input 3 5 3 2 1 2 2 3 3 1 1 5 Output 8\nInput 3 6 3 2 1 6 2 2 3 4 1 6 Output 15 Note In the first example you should\nuse the second column to go up, collecting in each row treasures from the\nfirst column. In the second example, it is optimal to use the first column to\ngo up. In the third example, it is optimal to collect the treasure at cell\n\n    (1;6)\n, go up to row \n    2\n at column \n    6\n, then collect the treasure\nat cell \n    (2;2)\n, go up to the top row at column \n    1\n and collect the\nlast treasure at cell \n    (3;4)\n. That's a total of \n    15\n moves.\n\n",
        "cf_contest_id": 1201,
        "cf_index": "D",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dp",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3 3 2\r\n1 1\r\n2 1\r\n3 1\r\n2 3\r\n",
                "6"
            ],
            [
                "3 5 3 2\r\n1 2\r\n2 3\r\n3 1\r\n1 5\r\n",
                "8"
            ],
            [
                "3 6 3 2\r\n1 6\r\n2 2\r\n3 4\r\n1 6\r\n",
                "15"
            ]
        ],
        "private_cases": [
            [
                "2 2 2 2\r\n1 1\r\n1 2\r\n1 2\r\n",
                "1"
            ],
            [
                "5 5 10 3\r\n3 1\r\n3 2\r\n3 5\r\n1 5\r\n2 1\r\n2 5\r\n1 2\r\n1 4\r\n3 3\r\n2 4\r\n2 1 5\r\n",
                "14"
            ],
            [
                "5 3 10 3\r\n5 3\r\n1 1\r\n2 2\r\n1 3\r\n3 2\r\n5 2\r\n2 3\r\n2 1\r\n3 1\r\n5 1\r\n1 2 3\r\n",
                "12"
            ],
            [
                "3 3 8 2\r\n2 2\r\n1 2\r\n2 1\r\n2 3\r\n3 2\r\n1 3\r\n3 1\r\n3 3\r\n3 2\r\n",
                "10"
            ],
            [
                "200000 200000 2 2\r\n104889 58569\r\n855 142967\r\n125218 47859\r\n",
                "332252"
            ],
            [
                "2 2 3 2\r\n2 2\r\n2 1\r\n1 1\r\n1 2\r\n",
                "2"
            ],
            [
                "2 3 2 3\r\n1 1\r\n1 2\r\n2 1 3\r\n",
                "1"
            ],
            [
                "3 2 4 2\r\n3 2\r\n2 1\r\n2 2\r\n3 1\r\n2 1\r\n",
                "4"
            ],
            [
                "11 2 4 2\r\n5 1\r\n4 1\r\n8 2\r\n5 2\r\n1 2\r\n",
                "8"
            ],
            [
                "2 11 7 6\r\n1 1\r\n1 5\r\n1 2\r\n1 4\r\n1 11\r\n1 8\r\n1 3\r\n3 6 5 10 2 7\r\n",
                "10"
            ],
            [
                "3 21 49 11\r\n3 5\r\n1 14\r\n2 17\r\n3 17\r\n3 9\r\n1 9\r\n3 20\r\n2 9\r\n3 11\r\n2 4\r\n3 16\r\n2 7\r\n1 2\r\n3 7\r\n3 8\r\n2 15\r\n2 2\r\n3 6\r\n2 5\r\n3 10\r\n2 19\r\n3 15\r\n3 13\r\n3 2\r\n3 12\r\n3 4\r\n2 20\r\n2 8\r\n3 14\r\n2 6\r\n2 1\r\n1 16\r\n2 18\r\n2 21\r\n3 19\r\n2 16\r\n2 11\r\n1 3\r\n2 14\r\n1 6\r\n1 12\r\n3 1\r\n2 13\r\n3 18\r\n2 10\r\n2 12\r\n2 3\r\n3 3\r\n3 21\r\n14 8 20 6 4 10 18 2 12 11 21\r\n",
                "64"
            ],
            [
                "21 3 61 3\r\n18 3\r\n21 3\r\n11 3\r\n13 2\r\n5 2\r\n14 2\r\n10 3\r\n9 3\r\n12 1\r\n1 2\r\n7 2\r\n20 1\r\n16 3\r\n9 2\r\n9 1\r\n20 3\r\n17 3\r\n6 1\r\n4 2\r\n1 1\r\n3 1\r\n4 1\r\n6 3\r\n6 2\r\n2 1\r\n13 3\r\n5 3\r\n3 2\r\n13 1\r\n10 1\r\n11 1\r\n18 1\r\n11 2\r\n5 1\r\n19 2\r\n20 2\r\n16 1\r\n12 3\r\n2 2\r\n3 3\r\n19 3\r\n8 2\r\n15 3\r\n8 1\r\n14 1\r\n17 1\r\n21 1\r\n19 1\r\n21 2\r\n12 2\r\n2 3\r\n8 3\r\n1 3\r\n16 2\r\n17 2\r\n7 1\r\n10 2\r\n18 2\r\n7 3\r\n4 3\r\n14 3\r\n2 3 1\r\n",
                "62"
            ]
        ]
    }
]