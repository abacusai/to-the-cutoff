[
    {
        "name": "Vasya And Password",
        "description": "Vasya came up with a password to register for EatForces \u2014 a string \n    s\n.\nThe password in EatForces should be a string, consisting of lowercase and\nuppercase Latin letters and digits. But since EatForces takes care of the\nsecurity of its users, user passwords must contain at least one digit, at\nleast one uppercase Latin letter and at least one lowercase Latin letter. For\nexample, the passwords \"abaCABA12\", \"Z7q\" and \"3R24m\" are valid, and the\npasswords \"qwerty\", \"qwerty12345\" and \"Password\" are not. A substring of\nstring \n    s\n is a string \n    x = s_l s_l + 1\n    \u2026 s_l + len - 1 (1\n    \n    \u2264 l \n    \u2264 |s|, 0 \n    \u2264 len \n    \u2264 |s| - l + 1)\n. \n    len\n is the length\nof the substring. Note that the empty string is also considered a substring of\n\n    s\n, it has the length \n    0\n. Vasya's password, however, may come too\nweak for the security settings of EatForces. He likes his password, so he\nwants to replace some its substring with another string of the same length in\norder to satisfy the above conditions. This operation should be performed\nexactly once, and the chosen string should have the minimal possible length.\nNote that the length of \n    s\n should not change after the replacement of the\nsubstring, and the string itself should contain only lowercase and uppercase\nLatin letters and digits. Input The first line contains a single integer\n\n    T\n (\n    1 \n    \u2264 T \n    \u2264 100\n) \u2014 the number of testcases. Each of the\nnext \n    T\n lines contains the initial password \n    s\u00a0(3 \n    \u2264 |s| \n    \u2264\n    100)\n, consisting of lowercase and uppercase Latin letters and digits. Only\n\n    T = 1\n is allowed for hacks. Output For each testcase print a renewed\npassword, which corresponds to given conditions. The length of the replaced\nsubstring is calculated as following: write down all the changed positions. If\nthere are none, then the length is \n    0\n. Otherwise the length is the\ndifference between the first and the last changed position plus one. For\nexample, the length of the changed substring between the passwords \"abcdef\"\n\n    \u2192\n \"a7cdEf\" is \n    4\n, because the changed positions are\n\n    2\n and \n    5\n, thus \n    (5 - 2) + 1 = 4\n. It is guaranteed that such a\npassword always exists. If there are several suitable passwords \u2014 output any\nof them. Example Input 2 abcDCE htQw27 Output abcD4E htQw27 Note In the first\nexample Vasya's password lacks a digit, he replaces substring \"C\" with \"4\" and\ngets password \"abcD4E\". That means, he changed the substring of length 1. In\nthe second example Vasya's password is ok from the beginning, and nothing has\nto be changed. That is the same as replacing the empty substring with another\nempty substring (length 0).\n\n",
        "cf_contest_id": 1051,
        "cf_index": "A",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\nabcDCE\r\nhtQw27\r\n",
                "0bcDCE\r\nhtQw27\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\nafd\r\n142\r\nTRE\r\n",
                "A0d\r\naA2\r\na0E\r\n"
            ],
            [
                "4\r\nYtG3\r\n33Yo\r\n123n\r\nm23m\r\n",
                "YtG3\r\n33Yo\r\nA23n\r\nA23m\r\n"
            ],
            [
                "6\r\n11b\r\n4bh\r\nBeh\r\nTuY\r\n1YJ\r\nP28\r\n",
                "A1b\r\n4Ah\r\nB0h\r\n0uY\r\n1aJ\r\nPa8\r\n"
            ],
            [
                "1\r\naAbAcDeF\r\n",
                "0AbAcDeF\r\n"
            ],
            [
                "1\r\n000\r\n",
                "aA0\r\n"
            ],
            [
                "1\r\na00\r\n",
                "aA0\r\n"
            ],
            [
                "1\r\nM62H\r\n",
                "a62H\r\n"
            ],
            [
                "1\r\nNV641\r\n",
                "aV641\r\n"
            ],
            [
                "1\r\n825\r\n",
                "aA5\r\n"
            ],
            [
                "1\r\nA00\r\n",
                "Aa0\r\n"
            ],
            [
                "1\r\nGfxqp2\r\n",
                "Gfxqp2\r\n"
            ],
            [
                "1\r\noypS\r\n",
                "0ypS\r\n"
            ],
            [
                "1\r\nR0FYRZ\r\n",
                "a0FYRZ\r\n"
            ],
            [
                "1\r\n11g9\r\n",
                "A1g9\r\n"
            ],
            [
                "1\r\n0a0\r\n",
                "Aa0\r\n"
            ],
            [
                "1\r\nWK7S\r\n",
                "aK7S\r\n"
            ],
            [
                "1\r\n0aa\r\n",
                "0Aa\r\n"
            ]
        ]
    }
]