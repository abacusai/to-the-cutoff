[
    {
        "name": "Mike and code of a permutation",
        "description": "Mike has discovered a new way to encode permutations. If he has a permutation\nP = [p1, p2, ..., pn], he will encode it in the following way: Denote by A =\n[a1, a2, ..., an] a sequence of length n which will represent the code of the\npermutation. For each i from 1 to n sequentially, he will choose the smallest\nunmarked j (1 \u2264 j \u2264 n) such that pi < pj and will assign to ai the number j\n(in other words he performs ai = j) and will mark j. If there is no such j,\nhe'll assign to ai the number - 1 (he performs ai = - 1). Mike forgot his\noriginal permutation but he remembers its code. Your task is simple: find any\npermutation such that its code is the same as the code of Mike's original\npermutation. You may assume that there will always be at least one valid\npermutation. Input The first line contains single integer n (1 \u2264 n \u2264 500 000)\n\u2014 length of permutation. The second line contains n space-separated integers\na1, a2, ..., an (1 \u2264 ai \u2264 n or ai = - 1) \u2014 the code of Mike's permutation. You\nmay assume that all positive values from A are different. Output In first and\nonly line print n numbers p1, p2, ..., pn (1 \u2264 pi \u2264 n) \u2014 a permutation P which\nhas the same code as the given one. Note that numbers in permutation are\ndistinct. Examples Input 6 2 -1 1 5 -1 4 Output 2 6 1 4 5 3 Input 8 2 -1 4 -1\n6 -1 8 -1 Output 1 8 2 7 3 6 4 5 Note For the permutation from the first\nexample: i = 1, the smallest j is 2 because p2 = 6 > p1 = 2. i = 2, there is\nno j because p2 = 6 is the greatest element in the permutation. i = 3, the\nsmallest j is 1 because p1 = 2 > p3 = 1. i = 4, the smallest j is 5 (2 was\nalready marked) because p5 = 5 > p4 = 4. i = 5, there is no j because 2 is\nalready marked. i = 6, the smallest j is 4 because p4 = 4 > p6 = 3.\n\n",
        "cf_contest_id": 798,
        "cf_index": "E",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "graphs",
            "sortings"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "6\r\n2 -1 1 5 -1 4\r\n",
                "2 6 1 4 5 3\r\n"
            ],
            [
                "8\r\n2 -1 4 -1 6 -1 8 -1\r\n",
                "1 8 2 7 3 6 4 5\r\n"
            ]
        ],
        "private_cases": [
            [
                "6\r\n-1 1 2 -1 4 5\r\n",
                "6 2 1 5 4 3\r\n"
            ],
            [
                "7\r\n4 1 5 -1 -1 -1 2\r\n",
                "4 2 3 6 7 5 1\r\n"
            ],
            [
                "1\r\n-1\r\n",
                "1\r\n"
            ],
            [
                "5\r\n2 -1 4 -1 1\r\n",
                "2 5 3 4 1\r\n"
            ],
            [
                "10\r\n2 10 1 6 3 -1 4 7 5 -1\r\n",
                "4 9 3 7 2 8 6 5 1 10\r\n"
            ],
            [
                "1\r\n-1\r\n",
                "1\r\n"
            ],
            [
                "67\r\n8 1 15 3 2 4 11 -1 5 7 12 -1 14 19 -1 36 10 6 42 13 16 17 37 20 21 18 22 23 25 28 30 31 35 29 43 45 46 9 47 33 39 -1 48 24 62 -1 58 63 41 40 27 26 56 49 50 65 32 -1 66 53 55 -1 -1 59 -1 -1 34\r\n",
                "65 4 64 15 3 11 14 66 2 13 43 63 19 42 67 41 12 10 61 18 24 9 40 17 23 6 8 39 22 38 37 26 32 21 36 56 59 1 35 31 34 62 51 16 57 60 54 52 33 30 7 5 46 27 29 49 25 55 47 45 28 58 53 44 50 48 20\r\n"
            ],
            [
                "64\r\n10 1 2 5 12 7 9 6 21 -1 8 36 15 13 18 11 14 23 22 17 43 24 26 34 4 35 28 31 16 38 39 30 40 56 57 -1 19 41 42 46 47 49 -1 27 20 55 62 32 -1 25 33 37 44 63 -1 -1 -1 54 64 58 59 -1 -1 -1\r\n",
                "25 2 1 6 24 10 11 9 23 64 8 62 19 18 20 7 16 22 17 13 60 21 53 57 5 54 37 48 3 40 49 38 39 58 55 63 15 41 50 45 42 51 61 36 12 46 43 28 52 4 27 14 26 34 47 59 56 31 32 30 29 44 35 33\r\n"
            ],
            [
                "45\r\n3 1 13 6 4 16 8 9 10 11 12 24 26 23 7 29 2 14 5 18 15 19 30 38 20 34 28 32 -1 42 33 -1 35 -1 -1 40 31 -1 27 -1 17 -1 36 -1 21\r\n",
                "4 3 29 27 9 28 11 12 13 14 15 26 30 19 10 31 2 18 8 17 6 7 25 41 16 39 21 24 44 42 23 38 34 40 37 33 22 45 20 36 1 43 32 35 5\r\n"
            ],
            [
                "25\r\n2 4 1 10 13 5 18 6 7 -1 19 11 -1 12 16 22 21 -1 23 9 24 -1 -1 -1 -1\r\n",
                "2 3 1 17 16 14 15 4 6 23 13 12 24 7 8 11 9 25 20 5 10 22 21 19 18\r\n"
            ],
            [
                "87\r\n53 1 9 3 11 4 2 5 36 15 17 10 6 7 21 12 30 8 27 14 41 16 19 20 28 22 29 32 39 50 23 46 25 40 34 75 42 31 61 47 62 43 57 33 35 63 70 51 24 -1 59 37 -1 38 48 55 82 56 66 64 87 -1 -1 67 13 73 77 44 60 -1 69 80 -1 71 -1 72 -1 18 45 -1 26 -1 84 -1 74 83 -1\r\n",
                "85 10 79 35 36 32 9 29 80 34 37 33 4 8 76 31 45 2 40 7 77 30 38 6 39 12 41 44 43 63 24 61 23 42 25 84 26 22 71 48 78 46 47 18 16 62 60 27 5 75 28 13 86 14 21 20 70 19 58 53 72 83 82 54 3 59 57 17 52 81 51 56 69 50 87 55 68 1 15 67 11 74 65 66 49 64 73\r\n"
            ],
            [
                "92\r\n16 1 2 5 8 3 4 12 10 14 7 21 9 23 13 58 15 24 18 25 62 11 29 26 35 31 34 27 78 17 67 20 28 76 85 19 32 40 38 51 22 48 30 33 36 37 39 59 42 6 88 46 49 55 60 54 56 -1 68 83 63 -1 69 61 64 72 -1 77 73 66 52 80 -1 81 41 -1 -1 -1 70 89 90 57 -1 65 -1 74 53 -1 -1 -1 79 -1\r\n",
                "34 4 3 30 31 2 14 32 15 16 10 33 13 29 12 86 11 28 19 27 87 9 82 77 80 78 75 74 85 6 79 26 43 76 81 18 25 45 44 48 8 46 5 21 17 24 20 47 42 1 73 23 36 40 41 39 38 88 68 71 61 89 62 60 52 57 84 69 63 54 22 58 67 55 7 83 70 90 53 59 56 37 72 50 91 49 35 92 66 65 51 64\r\n"
            ]
        ]
    }
]