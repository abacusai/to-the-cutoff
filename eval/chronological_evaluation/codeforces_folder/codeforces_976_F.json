[
    {
        "name": "Minimal k-covering",
        "description": "You are given a bipartite graph G = (U, V, E), U is the set of vertices of the\nfirst part, V is the set of vertices of the second part and E is the set of\nedges. There might be multiple edges. Let's call some subset of its edges\nk-covering iff the graph has each of its vertices incident to at least k\nedges. Minimal k-covering is such a k-covering that the size of the subset is\nminimal possible. Your task is to find minimal k-covering for each , where\nminDegree is the minimal degree of any vertex in graph G. Input The first line\ncontains three integers n1, n2 and m (1 \u2264 n1, n2 \u2264 2000, 0 \u2264 m \u2264 2000) \u2014 the\nnumber of vertices in the first part, the number of vertices in the second\npart and the number of edges, respectively. The i-th of the next m lines\ncontain two integers ui and vi (1 \u2264 ui \u2264 n1, 1 \u2264 vi \u2264 n2) \u2014 the description of\nthe i-th edge, ui is the index of the vertex in the first part and vi is the\nindex of the vertex in the second part. Output For each print the subset of\nedges (minimal k-covering) in separate line. The first integer cntk of the\nk-th line is the number of edges in minimal k-covering of the graph. Then cntk\nintegers follow \u2014 original indices of the edges which belong to the minimal\nk-covering, these indices should be pairwise distinct. Edges are numbered 1\nthrough m in order they are given in the input. Examples Input 3 3 7 1 2 2 3 1\n3 3 2 3 3 2 1 2 1 Output 0 3 3 7 4 6 1 3 6 7 4 5 Input 1 1 5 1 1 1 1 1 1 1 1 1\n1 Output 0 1 5 2 4 5 3 3 4 5 4 2 3 4 5 5 1 2 3 4 5\n\n",
        "cf_contest_id": 976,
        "cf_index": "F",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "flows",
            "graphs"
        ],
        "time_limit_seconds": 1.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3 7\r\n1 2\r\n2 3\r\n1 3\r\n3 2\r\n3 3\r\n2 1\r\n2 1\r\n",
                "0 \r\n3 6 4 3 \r\n6 7 6 5 4 3 1 \r\n"
            ],
            [
                "1 1 5\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n",
                "0 \r\n1 1 \r\n2 2 1 \r\n3 3 2 1 \r\n4 4 3 2 1 \r\n5 5 4 3 2 1 \r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1 0\r\n",
                "0 \r\n"
            ],
            [
                "2000 2000 1\r\n1387 936\r\n",
                "0 \r\n"
            ],
            [
                "2000 2000 2\r\n804 1037\r\n1788 295\r\n",
                "0 \r\n"
            ],
            [
                "9 9 55\r\n5 1\r\n8 3\r\n1 6\r\n5 6\r\n5 9\r\n6 5\r\n9 8\r\n6 6\r\n5 5\r\n7 7\r\n7 2\r\n1 6\r\n3 8\r\n4 3\r\n1 8\r\n8 5\r\n5 4\r\n6 1\r\n2 7\r\n2 6\r\n2 8\r\n7 7\r\n7 3\r\n6 9\r\n2 7\r\n9 3\r\n3 5\r\n7 9\r\n6 8\r\n4 6\r\n5 2\r\n9 2\r\n4 3\r\n9 5\r\n3 2\r\n2 2\r\n7 3\r\n3 8\r\n3 4\r\n5 9\r\n4 2\r\n7 9\r\n1 8\r\n8 8\r\n9 9\r\n7 1\r\n6 6\r\n4 8\r\n9 4\r\n8 8\r\n3 5\r\n6 8\r\n1 6\r\n7 5\r\n5 3\r\n",
                "0 \r\n9 42 41 39 25 7 6 3 2 1 \r\n18 50 45 42 41 39 36 27 19 18 17 14 12 10 7 6 3 2 1 \r\n27 49 46 44 42 41 40 39 36 35 30 27 26 25 24 19 18 17 16 15 14 12 10 7 6 3 2 1 \r\n"
            ]
        ]
    }
]