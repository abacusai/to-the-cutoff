[
    {
        "name": "Equalize the Array",
        "description": "Polycarp was gifted an array \n    a\n of length \n    n\n. Polycarp considers an\narray beautiful if there exists a number \n    C\n, such that each number in the\narray occurs either zero or \n    C\n times. Polycarp wants to remove some\nelements from the array \n    a\n to make it beautiful. For example, if\n\n    n=6\n and \n    a = [1, 3, 2, 1, 4, 2]\n, then the following options are\npossible to make the array \n    a\n array beautiful: Polycarp removes elements\nat positions \n    2\n and \n    5\n, array \n    a\n becomes equal to \n    [1, 2, 1,\n    2]\n; Polycarp removes elements at positions \n    1\n and \n    6\n, array\n\n    a\n becomes equal to \n    [3, 2, 1, 4]\n; Polycarp removes elements at\npositions \n    1, 2\n and \n    6\n, array \n    a\n becomes equal to \n    [2, 1,\n    4]\n; Help Polycarp determine the minimum number of elements to remove from\nthe array \n    a\n to make it beautiful. Input The first line contains one\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. Then\n\n    t\n test cases follow. The first line of each test case consists of one\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the length of the\narray \n    a\n. The second line of each test case contains \n    n\n integers\n\n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 array \n    a\n.\nIt is guaranteed that the sum of \n    n\n over all test cases does not exceed\n\n    2 \n    \u00b7 10^5\n. Output For each test case, output one integer \u2014 the\nminimum number of elements that Polycarp has to remove from the array \n    a\n\nto make it beautiful. Example Input 3 6 1 3 2 1 4 2 4 100 100 4 100 8 1 2 3 3\n3 2 6 6 Output 2 1 2\n\n",
        "cf_contest_id": 1490,
        "cf_index": "F",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "greedy",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n6\r\n1 3 2 1 4 2\r\n4\r\n100 100 4 100\r\n8\r\n1 2 3 3 3 2 6 6\r\n",
                "2\r\n1\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n36\r\n1 2 2 3 3 11 11 4 4 5 5 5 6 6 6 6 7 7 7 7 8 8 8 8 9 9 9 9 10 10 10 10 12 12 12 12\r\n",
                "12\r\n"
            ]
        ]
    }
]