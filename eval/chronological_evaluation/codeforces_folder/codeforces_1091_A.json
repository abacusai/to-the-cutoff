[
    {
        "name": "New Year and the Christmas Ornament",
        "description": "Alice and Bob are decorating a Christmas Tree. Alice wants only \n    3\n types\nof ornaments to be used on the Christmas Tree: yellow, blue and red. They have\n\n    y\n yellow ornaments, \n    b\n blue ornaments and \n    r\n red ornaments. In\nBob's opinion, a Christmas Tree will be beautiful if: the number of blue\nornaments used is greater by exactly \n    1\n than the number of yellow\nornaments, and the number of red ornaments used is greater by exactly \n    1\n\nthan the number of blue ornaments. That is, if they have \n    8\n yellow\nornaments, \n    13\n blue ornaments and \n    9\n red ornaments, we can choose\n\n    4\n yellow, \n    5\n blue and \n    6\n red ornaments (\n    5=4+1\n and\n\n    6=5+1\n). Alice wants to choose as many ornaments as possible, but she\nalso wants the Christmas Tree to be beautiful according to Bob's opinion. In\nthe example two paragraphs above, we would choose \n    7\n yellow, \n    8\n blue\nand \n    9\n red ornaments. If we do it, we will use \n    7+8+9=24\n ornaments.\nThat is the maximum number. Since Alice and Bob are busy with preparing food\nto the New Year's Eve, they are asking you to find out the maximum number of\nornaments that can be used in their beautiful Christmas Tree! It is guaranteed\nthat it is possible to choose at least \n    6\n (\n    1+2+3=6\n) ornaments.\nInput The only line contains three integers \n    y\n, \n    b\n, \n    r\n (\n    1\n    \n    \u2264 y \n    \u2264 100\n, \n    2 \n    \u2264 b \n    \u2264 100\n, \n    3 \n    \u2264 r \n    \u2264\n    100\n) \u2014 the number of yellow, blue and red ornaments. It is guaranteed that\nit is possible to choose at least \n    6\n (\n    1+2+3=6\n) ornaments. Output\nPrint one number \u2014 the maximum number of ornaments that can be used. Examples\nInput 8 13 9 Output 24 Input 13 3 6 Output 9 Note In the first example, the\nanswer is \n    7+8+9=24\n. In the second example, the answer is \n    2+3+4=9\n.\n\n",
        "cf_contest_id": 1091,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8 13 9\r\n",
                "24\r\n"
            ],
            [
                "13 3 6\r\n",
                "9\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 8 20\r\n",
                "12\r\n"
            ],
            [
                "1 2 3\r\n",
                "6\r\n"
            ],
            [
                "100 100 100\r\n",
                "297\r\n"
            ],
            [
                "9 5 5\r\n",
                "12\r\n"
            ],
            [
                "88 89 7\r\n",
                "18\r\n"
            ],
            [
                "50 80 70\r\n",
                "153\r\n"
            ],
            [
                "80 81 82\r\n",
                "243\r\n"
            ],
            [
                "100 98 99\r\n",
                "294\r\n"
            ],
            [
                "65 69 67\r\n",
                "198\r\n"
            ],
            [
                "55 56 76\r\n",
                "168\r\n"
            ],
            [
                "78 3 79\r\n",
                "9\r\n"
            ],
            [
                "4 49 50\r\n",
                "15\r\n"
            ],
            [
                "80 90 80\r\n",
                "237\r\n"
            ],
            [
                "40 50 50\r\n",
                "123\r\n"
            ],
            [
                "70 70 80\r\n",
                "210\r\n"
            ],
            [
                "50 20 50\r\n",
                "60\r\n"
            ],
            [
                "90 56 56\r\n",
                "165\r\n"
            ],
            [
                "66 66 37\r\n",
                "108\r\n"
            ],
            [
                "25 25 25\r\n",
                "72\r\n"
            ],
            [
                "98 99 99\r\n",
                "294\r\n"
            ],
            [
                "99 100 99\r\n",
                "294\r\n"
            ],
            [
                "99 100 100\r\n",
                "297\r\n"
            ],
            [
                "48 3 50\r\n",
                "9\r\n"
            ],
            [
                "1 3 4\r\n",
                "6\r\n"
            ],
            [
                "1 27 4\r\n",
                "6\r\n"
            ],
            [
                "6 5 7\r\n",
                "15\r\n"
            ],
            [
                "1 5 4\r\n",
                "6\r\n"
            ],
            [
                "10 10 20\r\n",
                "30\r\n"
            ],
            [
                "3 2 4\r\n",
                "6\r\n"
            ],
            [
                "3 3 5\r\n",
                "9\r\n"
            ],
            [
                "6 10 9\r\n",
                "21\r\n"
            ],
            [
                "5 5 56\r\n",
                "15\r\n"
            ],
            [
                "3 2 3\r\n",
                "6\r\n"
            ],
            [
                "10 20 20\r\n",
                "33\r\n"
            ],
            [
                "4 5 5\r\n",
                "12\r\n"
            ],
            [
                "1 90 20\r\n",
                "6\r\n"
            ],
            [
                "2 2 4\r\n",
                "6\r\n"
            ],
            [
                "1 100 100\r\n",
                "6\r\n"
            ],
            [
                "3 3 9\r\n",
                "9\r\n"
            ],
            [
                "2 2 5\r\n",
                "6\r\n"
            ]
        ]
    }
]