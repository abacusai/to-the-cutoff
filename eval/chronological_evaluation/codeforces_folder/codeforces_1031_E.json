[
    {
        "name": "Triple Flips",
        "description": "You are given an array \n    a\n of length \n    n\n that consists of zeros and\nones. You can perform the following operation multiple times. The operation\nconsists of two steps: Choose three integers \n    1 \n    \u2264 x < y < z \n    \u2264 n\n,\nthat form an arithmetic progression (\n    y - x = z - y\n). Flip the values\n\n    a_x, a_y, a_z\n (i.e. change \n    1\n to \n    0\n, change \n    0\n to\n\n    1\n). Determine if it is possible to make all elements of the array equal\nto zero. If yes, print the operations that lead the the all-zero state. Your\nsolution should not contain more than \n    (\n    \u230a\n    n/3\n    \u230b +\n    12)\n operations. Here \n    \u230a q \n    \u230b\n denotes the number \n    q\n\nrounded down. We can show that it is possible to make all elements equal to\nzero in no more than this number of operations whenever it is possible to do\nso at all. Input The first line contains a single integer \n    n\n (\n    3 \n    \u2264\n    n \n    \u2264 10^5\n) \u2014 the length of the array. The second line contains \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 1\n) \u2014 the\nelements of the array. Output Print \"YES\" (without quotes) if the answer\nexists, otherwise print \"NO\" (without quotes). You can print each letter in\nany case (upper or lower). If there is an answer, in the second line print an\ninteger \n    m\n (\n    0 \n    \u2264 m \n    \u2264 (\n    \u230a\n    n/3\n    \u230b +\n    12)\n) \u2014 the number of operations in your answer. After that in (\n    i +\n    2\n)-th line print the \n    i\n-th operations \u2014 the integers \n    x_i, y_i,\n    z_i\n. You can print them in arbitrary order. Examples Input 5 1 1 0 1 1\nOutput YES 2 1 3 5 2 3 4 Input 3 0 1 0 Output NO Note In the first sample the\nshown output corresponds to the following solution: 1 1 0 1 1 (initial state);\n0 1 1 1 0 (the flipped positions are the first, the third and the fifth\nelements); 0 0 0 0 0 (the flipped positions are the second, the third and the\nfourth elements). Other answers are also possible. In this test the number of\noperations should not exceed \n    \u230a\n    5/3\n    \u230b + 12 = 1 +\n    12 = 13\n. In the second sample the only available operation is to flip all\nthe elements. This way it is only possible to obtain the arrays 0 1 0 and 1 0\n1, but it is impossible to make all elements equal to zero.\n\n",
        "cf_contest_id": 1031,
        "cf_index": "E",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 1 0 1 1\r\n",
                "YES\r\n2\r\n1 2 3\r\n3 4 5\r\n"
            ],
            [
                "3\r\n0 1 0\r\n",
                "NO\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n0 0 0\r\n",
                "YES\r\n0\r\n"
            ],
            [
                "7\r\n0 1 0 0 0 0 0\r\n",
                "NO\r\n"
            ],
            [
                "4\r\n1 0 0 1\r\n",
                "YES\r\n2\r\n1 2 3\r\n2 3 4\r\n"
            ],
            [
                "8\r\n0 0 0 1 1 0 0 0\r\n",
                "YES\r\n8\r\n4 5 6\r\n6 7 8\r\n1 2 3\r\n1 4 7\r\n2 3 4\r\n2 3 4\r\n2 5 8\r\n3 4 5\r\n"
            ],
            [
                "9\r\n1 1 0 1 1 1 0 1 1\r\n",
                "YES\r\n9\r\n1 4 7\r\n2 5 8\r\n6 7 8\r\n2 3 4\r\n2 5 8\r\n3 4 5\r\n3 4 5\r\n3 6 9\r\n4 5 6\r\n"
            ],
            [
                "11\r\n1 1 0 0 0 0 0 0 0 1 1\r\n",
                "YES\r\n6\r\n1 2 3\r\n3 4 5\r\n4 5 6\r\n6 7 8\r\n7 8 9\r\n9 10 11\r\n"
            ],
            [
                "14\r\n0 1 0 1 0 1 0 0 1 1 0 1 1 1\r\n",
                "YES\r\n6\r\n2 4 6\r\n9 10 11\r\n11 12 13\r\n8 9 10\r\n8 11 14\r\n9 10 11\r\n"
            ],
            [
                "4\r\n1 0 0 0\r\n",
                "NO\r\n"
            ],
            [
                "5\r\n1 0 0 0 0\r\n",
                "NO\r\n"
            ],
            [
                "6\r\n1 0 0 0 0 0\r\n",
                "NO\r\n"
            ],
            [
                "8\r\n0 0 0 1 1 1 1 1\r\n",
                "YES\r\n9\r\n4 6 8\r\n5 6 7\r\n6 7 8\r\n1 2 3\r\n1 4 7\r\n2 3 4\r\n2 3 4\r\n2 5 8\r\n3 4 5\r\n"
            ],
            [
                "9\r\n0 0 1 0 0 0 1 0 0\r\n",
                "YES\r\n6\r\n3 4 5\r\n4 5 6\r\n6 7 8\r\n2 3 4\r\n2 5 8\r\n3 4 5\r\n"
            ],
            [
                "10\r\n0 0 1 1 1 1 1 0 1 1\r\n",
                "YES\r\n3\r\n3 5 7\r\n4 6 8\r\n8 9 10\r\n"
            ],
            [
                "11\r\n1 0 1 1 1 1 1 1 1 0 0\r\n",
                "YES\r\n6\r\n1 3 5\r\n4 6 8\r\n7 9 11\r\n5 6 7\r\n5 8 11\r\n6 7 8\r\n"
            ],
            [
                "12\r\n1 0 1 1 0 0 1 1 1 1 0 1\r\n",
                "YES\r\n8\r\n1 3 5\r\n4 7 10\r\n5 8 11\r\n9 10 11\r\n10 11 12\r\n5 6 7\r\n5 8 11\r\n6 7 8\r\n"
            ],
            [
                "13\r\n1 0 0 1 0 0 1 1 1 0 0 0 1\r\n",
                "YES\r\n4\r\n1 4 7\r\n8 9 10\r\n10 11 12\r\n11 12 13\r\n"
            ],
            [
                "14\r\n1 0 1 0 0 0 1 0 0 0 1 1 1 0\r\n",
                "YES\r\n10\r\n1 3 5\r\n5 7 9\r\n9 11 13\r\n12 13 14\r\n7 8 9\r\n7 10 13\r\n8 9 10\r\n8 9 10\r\n8 11 14\r\n9 10 11\r\n"
            ],
            [
                "15\r\n1 1 1 0 0 0 1 0 0 1 1 1 0 0 0\r\n",
                "YES\r\n5\r\n1 3 5\r\n2 5 8\r\n7 10 13\r\n8 11 14\r\n12 13 14\r\n"
            ],
            [
                "16\r\n1 1 1 0 1 0 1 0 0 1 0 1 0 0 0 0\r\n",
                "YES\r\n9\r\n1 3 5\r\n2 7 12\r\n10 11 12\r\n11 12 13\r\n13 14 15\r\n14 15 16\r\n10 11 12\r\n10 13 16\r\n11 12 13\r\n"
            ],
            [
                "17\r\n1 0 1 0 1 0 1 1 1 0 1 1 1 0 1 0 1\r\n",
                "YES\r\n7\r\n1 3 5\r\n7 9 11\r\n8 12 16\r\n13 15 17\r\n10 11 12\r\n10 13 16\r\n11 12 13\r\n"
            ],
            [
                "18\r\n0 0 0 0 0 1 1 1 1 0 1 0 1 1 1 1 0 0\r\n",
                "YES\r\n11\r\n6 8 10\r\n7 9 11\r\n10 13 16\r\n14 15 16\r\n16 17 18\r\n11 12 13\r\n11 14 17\r\n12 13 14\r\n12 13 14\r\n12 15 18\r\n13 14 15\r\n"
            ],
            [
                "19\r\n1 0 0 0 1 1 1 1 1 1 1 0 1 1 0 1 0 0 1\r\n",
                "YES\r\n6\r\n1 5 9\r\n6 8 10\r\n7 11 15\r\n13 15 17\r\n14 16 18\r\n17 18 19\r\n"
            ],
            [
                "20\r\n1 1 1 1 1 0 1 0 0 0 1 1 1 1 0 0 1 0 0 1\r\n",
                "YES\r\n12\r\n1 3 5\r\n2 4 6\r\n6 11 16\r\n7 12 17\r\n13 16 19\r\n14 15 16\r\n15 16 17\r\n17 18 19\r\n18 19 20\r\n13 14 15\r\n13 16 19\r\n14 15 16\r\n"
            ],
            [
                "13\r\n0 0 1 1 0 0 1 0 1 0 0 0 1\r\n",
                "YES\r\n9\r\n3 7 11\r\n4 5 6\r\n5 9 13\r\n6 7 8\r\n7 8 9\r\n9 11 13\r\n7 8 9\r\n7 10 13\r\n8 9 10\r\n"
            ],
            [
                "13\r\n1 0 0 0 1 0 1 0 0 1 1 0 0\r\n",
                "YES\r\n7\r\n1 5 9\r\n7 9 11\r\n10 11 12\r\n11 12 13\r\n7 8 9\r\n7 10 13\r\n8 9 10\r\n"
            ],
            [
                "125\r\n1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0\r\n",
                "YES\r\n41\r\n1 4 7\r\n2 6 10\r\n7 12 17\r\n8 14 20\r\n16 18 20\r\n17 20 23\r\n22 24 26\r\n23 28 33\r\n30 32 34\r\n33 36 39\r\n38 40 42\r\n39 44 49\r\n46 48 50\r\n49 52 55\r\n54 56 58\r\n55 60 65\r\n62 64 66\r\n65 68 71\r\n70 72 74\r\n71 76 81\r\n78 80 82\r\n81 84 87\r\n86 88 90\r\n87 92 97\r\n94 96 98\r\n97 100 103\r\n102 104 106\r\n103 108 113\r\n110 112 114\r\n113 116 119\r\n118 120 122\r\n119 120 121\r\n120 121 122\r\n122 123 124\r\n123 124 125\r\n118 119 120\r\n118 121 124\r\n119 120 121\r\n119 120 121\r\n119 122 125\r\n120 121 122\r\n"
            ],
            [
                "3\r\n1 0 0\r\n",
                "NO\r\n"
            ],
            [
                "3\r\n0 0 1\r\n",
                "NO\r\n"
            ],
            [
                "4\r\n0 1 0 0\r\n",
                "NO\r\n"
            ],
            [
                "4\r\n0 0 1 0\r\n",
                "NO\r\n"
            ],
            [
                "4\r\n0 0 0 1\r\n",
                "NO\r\n"
            ],
            [
                "5\r\n0 1 0 0 0\r\n",
                "NO\r\n"
            ],
            [
                "5\r\n0 0 1 0 0\r\n",
                "NO\r\n"
            ],
            [
                "5\r\n0 0 0 1 0\r\n",
                "NO\r\n"
            ],
            [
                "5\r\n0 0 0 0 1\r\n",
                "NO\r\n"
            ],
            [
                "6\r\n0 1 0 0 0 0\r\n",
                "NO\r\n"
            ],
            [
                "6\r\n0 0 1 0 0 0\r\n",
                "NO\r\n"
            ],
            [
                "6\r\n0 0 0 1 0 0\r\n",
                "NO\r\n"
            ],
            [
                "6\r\n0 0 0 0 1 0\r\n",
                "NO\r\n"
            ],
            [
                "6\r\n0 0 0 0 0 1\r\n",
                "NO\r\n"
            ],
            [
                "7\r\n1 0 0 0 0 0 0\r\n",
                "YES\r\n7\r\n1 2 3\r\n2 3 4\r\n4 5 6\r\n5 6 7\r\n1 2 3\r\n1 4 7\r\n2 3 4\r\n"
            ],
            [
                "7\r\n0 0 1 0 0 0 0\r\n",
                "NO\r\n"
            ],
            [
                "7\r\n0 0 0 1 0 0 0\r\n",
                "YES\r\n5\r\n4 5 6\r\n5 6 7\r\n1 2 3\r\n1 4 7\r\n2 3 4\r\n"
            ],
            [
                "7\r\n0 0 0 0 1 0 0\r\n",
                "NO\r\n"
            ],
            [
                "7\r\n0 0 0 0 0 1 0\r\n",
                "NO\r\n"
            ],
            [
                "7\r\n0 0 0 0 0 0 1\r\n",
                "YES\r\n3\r\n1 2 3\r\n1 4 7\r\n2 3 4\r\n"
            ]
        ]
    }
]