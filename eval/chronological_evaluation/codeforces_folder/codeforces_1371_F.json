[
    {
        "name": "Raging Thunder",
        "description": "You are a warrior fighting against the machine god Thor. Thor challenge you to\nsolve the following problem: There are \n    n\n conveyors arranged in a line\nnumbered with integers from \n    1\n to \n    n\n from left to right. Each\nconveyor has a symbol \"<\" or \">\". The initial state of the conveyor \n    i\n is\nequal to the \n    i\n-th character of the string \n    s\n. There are \n    n+1\n\nholes numbered with integers from \n    0\n to \n    n\n. The hole \n    0\n is on\nthe left side of the conveyor \n    1\n, and for all \n    i \n    \u2265 1\n the hole\n\n    i\n is on the right side of the conveyor \n    i\n. When a ball is on the\nconveyor \n    i\n, the ball moves by the next rules: If the symbol \"<\" is on\nthe conveyor \n    i\n, then: If \n    i=1\n, the ball falls into the hole\n\n    0\n. If the symbol \"<\" is on the conveyor \n    i-1\n, the ball moves to the\nconveyor \n    i-1\n. If the symbol \">\" is on the conveyor \n    i-1\n, the ball\nfalls into the hole \n    i-1\n. If the symbol \">\" is on the conveyor \n    i\n,\nthen: If \n    i=n\n, the ball falls into the hole \n    n\n. If the symbol \">\" is\non the conveyor \n    i+1\n, the ball moves to the conveyor \n    i+1\n. If the\nsymbol \"<\" is on the conveyor \n    i+1\n, the ball falls into the hole \n    i\n.\nYou should answer next \n    q\n queries, each query is defined by the pair of\nintegers \n    l, r\n (\n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 n\n): First, for all\nconveyors \n    l,l+1,...,r\n, the symbol \"<\" changes to \">\" and vice versa.\nThese changes remain for the next queries. After that, put one ball on each\nconveyor \n    l,l+1,...,r\n. Then, each ball falls into some hole. Find the\nmaximum number of balls in one hole. After the query all balls disappear and\ndon't considered in the next queries. Input The first line contains two\nintegers \n    n\n, \n    q\n (\n    1 \n    \u2264 n \n    \u2264 5 \n    \u00d7 10^5 , 1 \n    \u2264 q\n    \n    \u2264 10^5\n). The second line contains a string \n    s\n of length \n    n\n.\nIt consists of characters \"<\" and \">\". Next \n    q\n lines contain the\ndescriptions of the queries, \n    i\n-th of them contains two integers \n    l\n,\n\n    r\n \n    (1 \n    \u2264 l \n    \u2264 r \n    \u2264 n)\n, describing the \n    i\n-th query.\nOutput Print \n    q\n lines, in the \n    i\n-th of them print the answer to the\n\n    i\n-th query. Example Input 5 6 ><>>< 2 4 3 5 1 5 1 3 2 4 1 5 Output 3 3 5\n3 2 3 Note In the first query, the conveyors change to \">><<<\". After that,\nput a ball on each conveyor \n    2,3,4\n. All three balls fall into\nthe hole \n    2\n. So the answer is \n    3\n. In the second query, the conveyors\nchange to \">>>>>\". After that, put a ball on each conveyor\n\n    3,4,5\n. All three balls fall into the hole \n    5\n. So the\nanswer is \n    3\n. In the third query, the conveyors change to \"<<<<<\". After\nthat, put a ball on each conveyor \n    1,2,3,4,5\n. All five balls\nfall into the hole \n    0\n. So the answer is \n    5\n. In the fourth query, the\nconveyors change to \">>><<\". After that, put a ball on each conveyor\n\n    1,2,3\n. All three balls fall into the hole \n    3\n. So the\nanswer is \n    3\n. In the fifth query, the conveyors change to \"><<><\". After\nthat, put a ball on each conveyor \n    2,3,4\n. Two balls fall into\nthe hole \n    1\n, and one ball falls into the hole \n    4\n. So, the answer is\n\n    2\n. In the sixth query, the conveyors change to \"<>><>\". After that, put\na ball on each conveyor \n    1,2,3,4,5\n. Three balls fall into the\nhole \n    3\n, one ball falls into the hole \n    0\n and one ball falls into the\nhole \n    5\n. So, the answer is \n    3\n.\n\n",
        "cf_contest_id": 1371,
        "cf_index": "F",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "divide and conquer",
            "implementation"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5 6\r\n><>><\r\n2 4\r\n3 5\r\n1 5\r\n1 3\r\n2 4\r\n1 5\r\n",
                "3\r\n3\r\n5\r\n3\r\n2\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n>\r\n1 1\r\n",
                "1\r\n"
            ]
        ]
    }
]