[
    {
        "name": "Cut and Stick",
        "description": "Baby Ehab has a piece of Cut and Stick with an array \n    a\n of length \n    n\n\nwritten on it. He plans to grab a pair of scissors and do the following to it:\npick a range \n    (l, r)\n and cut out every element \n    a_l\n, \n    a_l +\n    1\n, ..., \n    a_r\n in this range; stick some of the elements together in\nthe same order they were in the array; end up with multiple pieces, where\nevery piece contains some of the elements and every element belongs to some\npiece. More formally, he partitions the sequence \n    a_l\n, \n    a_l + 1\n,\n..., \n    a_r\n into subsequences. He thinks a partitioning is beautiful if for\nevery piece (subsequence) it holds that, if it has length \n    x\n, then no\nvalue occurs strictly more than \n    \u2308\n    x/2\n    \u2309\n times in\nit. He didn't pick a range yet, so he's wondering: for \n    q\n ranges \n    (l,\n    r)\n, what is the minimum number of pieces he needs to partition the elements\n\n    a_l\n, \n    a_l + 1\n, ..., \n    a_r\n into so that the partitioning is\nbeautiful. A sequence \n    b\n is a subsequence of an array \n    a\n if \n    b\n\ncan be obtained from \n    a\n by deleting some (possibly zero) elements. Note\nthat it does not have to be contiguous. Input The first line contains two\nintegers \n    n\n and \n    q\n (\n    1 \n    \u2264 n,q \n    \u2264 3 \n    \u00b7 10^5\n) \u2014 the\nlength of the array \n    a\n and the number of queries. The second line\ncontains \n    n\n integers \n    a_1\n, \n    a_2\n, ..., \n    a_n\n (\n    1 \n    \u2264\n    a_i \n    \u2264 n\n) \u2014 the elements of the array \n    a\n. Each of the next \n    q\n\nlines contains two integers \n    l\n and \n    r\n (\n    1 \n    \u2264 l \n    \u2264 r \n    \u2264\n    n\n) \u2014 the range of this query. Output For each query, print the minimum\nnumber of subsequences you need to partition this range into so that the\npartitioning is beautiful. We can prove such partitioning always exists.\nExample Input 6 2 1 3 2 3 3 2 1 6 2 5 Output 1 2 Note In the first query, you\ncan just put the whole array in one subsequence, since its length is \n    6\n,\nand no value occurs more than \n    3\n times in it. In the second query, the\nelements of the query range are \n    [3,2,3,3]\n. You can't put them all in one\nsubsequence, since its length is \n    4\n, and \n    3\n occurs more than \n    2\n\ntimes. However, you can partition it into two subsequences: \n    [3]\n and\n\n    [2,3,3]\n.\n\n",
        "cf_contest_id": 1514,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "greedy",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "6 2\r\n1 3 2 3 3 2\r\n1 6\r\n2 5\r\n",
                "1\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1\r\n1 1\r\n",
                "1\r\n"
            ],
            [
                "100 1\r\n1 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 1 2 1 2 1 1 1 2 2 1 2 2 2 2 1 1 2 1 1 1 2 2 1 1 1 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 1 1 2 2 2 1 1 2 2 2 1 1 2 2 2 1 2 2 2\r\n1 100\r\n",
                "46\r\n"
            ]
        ]
    }
]