[
    {
        "name": "Hemose Shopping",
        "description": "Hemose was shopping with his friends Samez, AhmedZ, AshrafEzz, TheSawan and\nO_E in Germany. As you know, Hemose and his friends are problem solvers, so\nthey are very clever. Therefore, they will go to all discount markets in\nGermany. Hemose has an array of \n    n\n integers. He wants Samez to sort the\narray in the non-decreasing order. Since it would be a too easy problem for\nSamez, Hemose allows Samez to use only the following operation: Choose indices\n\n    i\n and \n    j\n such that \n    1 \n    \u2264 i, j \n    \u2264 n\n, and \n    | i -\n    j \n    |\n    \u2265 x\n. Then, swap elements \n    a_i\n and \n    a_j\n. Can you\ntell Samez if there's a way to sort the array in the non-decreasing order by\nusing the operation written above some finite number of times (possibly\n\n    0\n)? Input Each test contains multiple test cases. The first line\ncontains the number of test cases \n    t\n \n    (1 \n    \u2264 t \n    \u2264 10^5)\n.\nDescription of the test cases follows. The first line of each test case\ncontains two integers \n    n\n and \n    x\n \n    (1 \n    \u2264 x \n    \u2264 n \n    \u2264\n    10^5)\n. The second line of each test case contains \n    n\n integers \n    a_1,\n    a_2, ..., a_n\n \n    (1 \n    \u2264 a_i \n    \u2264 10^9)\n. It is guaranteed that the\nsum of \n    n\n over all test cases doesn't exceed \n    2 \n    \u00b7 10^5\n. Output\nFor each test case, you should output a single string. If Samez can sort the\narray in non-decreasing order using the operation written above, output \"YES\"\n(without quotes). Otherwise, output \"NO\" (without quotes). You can print each\nletter of \"YES\" and \"NO\" in any case (upper or lower). Example Input 4 3 3 3 2\n1 4 3 1 2 3 4 5 2 5 1 2 3 4 5 4 1 2 3 4 4 Output NO YES YES YES Note In the\nfirst test case, you can't do any operations. In the second test case, the\narray is already sorted. In the third test case, you can do the operations as\nfollows: \n    [5,1,2,3,4]\n, \n    swap(a_1,a_3)\n \n    [2,1,5,3,4]\n,\n\n    swap(a_2,a_5)\n \n    [2,4,5,3,1]\n, \n    swap(a_2,a_4)\n \n    [2,3,5,4,1]\n,\n\n    swap(a_1,a_5)\n \n    [1,3,5,4,2]\n, \n    swap(a_2,a_5)\n \n    [1,2,5,4,3]\n,\n\n    swap(a_3,a_5)\n \n    [1,2,3,4,5]\n (Here \n    swap(a_i, a_j)\n refers to\nswapping elements at positions \n    i\n, \n    j\n).\n\n",
        "cf_contest_id": 1592,
        "cf_index": "B",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dsu",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3 3\r\n3 2 1\r\n4 3\r\n1 2 3 4\r\n5 2\r\n5 1 2 3 4\r\n5 4\r\n1 2 3 4 4\r\n",
                "NO\r\nYES\r\nYES\r\nYES\r\n"
            ]
        ],
        "private_cases": []
    }
]