[
    {
        "name": "Feeling Good",
        "description": "Recently biologists came to a fascinating conclusion about how to find a\nchameleon mood. Consider chameleon body to be a rectangular table \n    n\n    \n    \u00d7 m\n, each cell of which may be green or blue and may change between\nthese two colors. We will denote as \n    (x, y)\n (\n    1 \n    \u2264 x \n    \u2264 n\n,\n\n    1 \n    \u2264 y \n    \u2264 m\n) the cell in row \n    x\n and column \n    y\n. Let us\ndefine a chameleon good mood certificate to be four cells which are corners of\nsome subrectangle of the table, such that colors in opposite cells among these\nfour are similar, and at the same time not all of the four cell colors are\nsimilar. Formally, it is a group of four cells \n    (x_1, y_1)\n, \n    (x_1,\n    y_2)\n, \n    (x_2, y_1)\n, \n    (x_2, y_2)\n for some \n    1 \n    \u2264 x_1 < x_2\n    \n    \u2264 n\n, \n    1 \n    \u2264 y_1 < y_2 \n    \u2264 m\n, that colors of \n    (x_1,\n    y_1)\n and \n    (x_2, y_2)\n coincide and colors of \n    (x_1, y_2)\n and\n\n    (x_2, y_1)\n coincide, but not all of the four cells share the same color.\nIt was found that whenever such four cells are present, chameleon is in good\nmood, and vice versa: if there are no such four cells, chameleon is in bad\nmood. You are asked to help scientists write a program determining the mood of\nchameleon. Let us consider that initially all cells of chameleon are green.\nAfter that chameleon coloring may change several times. On one change, colors\nof contiguous segment of some table row are replaced with the opposite.\nFormally, each color change is defined by three integers \n    a\n, \n    l\n,\n\n    r\n (\n    1 \n    \u2264 a \n    \u2264 n\n, \n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 m\n). On\nsuch change colors of all cells \n    (a, b)\n such that \n    l \n    \u2264 b \n    \u2264\n    r\n are replaced with the opposite. Write a program that reports mood of the\nchameleon after each change. Additionally, if the chameleon mood is good,\nprogram should find out any four numbers \n    x_1\n, \n    y_1\n, \n    x_2\n,\n\n    y_2\n such that four cells \n    (x_1, y_1)\n, \n    (x_1, y_2)\n, \n    (x_2,\n    y_1)\n, \n    (x_2, y_2)\n are the good mood certificate. Input The first line\nof input contains three integers \n    n\n, \n    m\n, \n    q\n (\n    1 \n    \u2264 n, m\n    \n    \u2264 2000\n, \n    1 \n    \u2264 q \n    \u2264 500\n     000\n), the sizes of the table\nand the number of changes respectively. Each of the following \n    q\n lines\ncontains 3 integers \n    a_i\n, \n    l_i\n, \n    r_i\n (\n    1 \n    \u2264 a_i \n    \u2264\n    n\n, \n    1 \n    \u2264 l_i \n    \u2264 r_i \n    \u2264 m\n), describing \n    i\n-th coloring\nchange. Output Print \n    q\n lines. In the \n    i\n-th line report the\nchameleon mood after first \n    i\n color changes for all \n    1 \n    \u2264 i \n    \u2264\n    q\n. If chameleon is in bad mood, print the only integer \n    -1\n. Otherwise,\nprint four integers \n    x_1\n, \n    y_1\n, \n    x_2\n, \n    y_2\n (\n    1 \n    \u2264\n    x_1 < x_2 \n    \u2264 n\n, \n    1 \n    \u2264 y_1 < y_2 \n    \u2264 m\n) such that four cells\n\n    (x_1, y_1)\n, \n    (x_1, y_2)\n, \n    (x_2, y_1)\n, \n    (x_2, y_2)\n are the\ngood mood certificate. If there are several ways to choose such four integers,\nprint any valid one. Examples Input 2 2 6 1 1 1 2 2 2 2 1 1 1 2 2 2 2 2 1 1 1\nOutput -1 1 1 2 2 -1 -1 -1 1 1 2 2 Input 4 3 9 2 2 3 4 1 2 2 1 3 3 2 2 3 1 3 1\n2 2 4 2 3 1 1 3 3 1 3 Output -1 2 1 4 3 -1 2 1 3 2 3 2 4 3 1 1 2 2 1 1 2 2 -1\n2 1 3 2\n\n",
        "cf_contest_id": 1214,
        "cf_index": "G",
        "cf_rating": 3200,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "data structures"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "2 2 6\r\n1 1 1\r\n2 2 2\r\n2 1 1\r\n1 2 2\r\n2 2 2\r\n1 1 1\r\n",
                "-1\r\n1 1 2 2\r\n-1\r\n-1\r\n-1\r\n1 1 2 2\r\n"
            ],
            [
                "4 3 9\r\n2 2 3\r\n4 1 2\r\n2 1 3\r\n3 2 2\r\n3 1 3\r\n1 2 2\r\n4 2 3\r\n1 1 3\r\n3 1 3\r\n",
                "-1\r\n2 1 4 3\r\n-1\r\n2 1 3 2\r\n3 2 4 3\r\n3 2 4 3\r\n1 1 2 2\r\n-1\r\n2 1 3 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1 1\r\n1 1 1\r\n",
                "-1\r\n"
            ]
        ]
    }
]