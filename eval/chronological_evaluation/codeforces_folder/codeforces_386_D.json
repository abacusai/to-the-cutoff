[
    {
        "name": "Game with Points",
        "description": "You are playing the following game. There are n points on a plane. They are\nthe vertices of a regular n-polygon. Points are labeled with integer numbers\nfrom 1 to n. Each pair of distinct points is connected by a diagonal, which is\ncolored in one of 26 colors. Points are denoted by lowercase English letters.\nThere are three stones positioned on three distinct vertices. All stones are\nthe same. With one move you can move the stone to another free vertex along\nsome diagonal. The color of this diagonal must be the same as the color of the\ndiagonal, connecting another two stones. Your goal is to move stones in such\nway that the only vertices occupied by stones are 1, 2 and 3. You must achieve\nsuch position using minimal number of moves. Write a program which plays this\ngame in an optimal way. Input In the first line there is one integer n (3 \u2264 n\n\u2264 70) \u2014 the number of points. In the second line there are three space-\nseparated integer from 1 to n \u2014 numbers of vertices, where stones are\ninitially located. Each of the following n lines contains n symbols \u2014 the\nmatrix denoting the colors of the diagonals. Colors are denoted by lowercase\nEnglish letters. The symbol j of line i denotes the color of diagonal between\npoints i and j. Matrix is symmetric, so j-th symbol of i-th line is equal to\ni-th symbol of j-th line. Main diagonal is filled with '*' symbols because\nthere is no diagonal, connecting point to itself. Output If there is no way to\nput stones on vertices 1, 2 and 3, print -1 on a single line. Otherwise, on\nthe first line print minimal required number of moves and in the next lines\nprint the description of each move, one move per line. To describe a move\nprint two integers. The point from which to remove the stone, and the point to\nwhich move the stone. If there are several optimal solutions, print any of\nthem. Examples Input 4 2 3 4 *aba a*ab ba*b abb* Output 1 4 1 Input 4 2 3 4\n*abc a*ab ba*b cbb* Output -1 Note In the first example we can move stone from\npoint 4 to point 1 because this points are connected by the diagonal of color\n'a' and the diagonal connection point 2 and 3, where the other stones are\nlocated, are connected by the diagonal of the same color. After that stones\nwill be on the points 1, 2 and 3.\n\n",
        "cf_contest_id": 386,
        "cf_index": "D",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "graphs",
            "implementation",
            "shortest paths"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2 3 4\r\n*aba\r\na*ab\r\nba*b\r\nabb*\r\n",
                "1\r\n4 1\r\n"
            ],
            [
                "4\r\n2 3 4\r\n*abc\r\na*ab\r\nba*b\r\ncbb*\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n1 2 3\r\n*aa\r\na*a\r\naa*\r\n",
                "0\r\n"
            ],
            [
                "10\r\n9 8 6\r\n*abbbababb\r\na*babbaaaa\r\nbb*bbaabab\r\nbab*bbbaab\r\nbbbb*baaab\r\nababb*baaa\r\nbaabab*bba\r\naabaaab*ab\r\nbaaaaaba*a\r\nbabbbaaba*\r\n",
                "3\r\n6 3\r\n8 2\r\n9 1\r\n"
            ],
            [
                "10\r\n3 9 5\r\n*aabbbaaaa\r\na*abbaaaaa\r\naa*baaaabb\r\nbbb*bbbaba\r\nbbab*babaa\r\nbaabb*bbab\r\naaabab*aaa\r\naaaabba*ab\r\naabbaaaa*b\r\naabaababb*\r\n",
                "2\r\n5 2\r\n9 1\r\n"
            ],
            [
                "10\r\n6 5 10\r\n*aababbbab\r\na*bbbbaaaa\r\nab*aaaabaa\r\nbba*abbbaa\r\nabaa*ababa\r\nbbaba*babb\r\nbaabbb*bbb\r\nbabbaab*bb\r\naaaabbbb*b\r\nbaaaabbbb*\r\n",
                "3\r\n5 2\r\n6 3\r\n10 1\r\n"
            ],
            [
                "10\r\n1 7 8\r\n*bbbcbcacb\r\nb*bcbbbcac\r\nbb*baccbcb\r\nbcb*caaaba\r\ncbac*bbbcc\r\nbbcab*abaa\r\ncbcaba*cca\r\nacbabbc*ca\r\ncacbcacc*b\r\nbcbacaaab*\r\n",
                "3\r\n7 6\r\n8 3\r\n6 2\r\n"
            ],
            [
                "10\r\n7 3 2\r\n*ccbaaacca\r\nc*cababaaa\r\ncc*aaacaba\r\nbaa*ccbcbc\r\nabac*bcacb\r\naaacb*bacb\r\nabcbcb*bac\r\ncaacaab*aa\r\ncabbccaa*c\r\naaacbbcac*\r\n",
                "3\r\n7 5\r\n5 9\r\n9 1\r\n"
            ],
            [
                "10\r\n6 9 5\r\n*cabaccbbc\r\nc*bcccbcac\r\nab*bacaaca\r\nbcb*caccba\r\nacac*caccb\r\ncccac*ccac\r\ncbacac*ccb\r\nbcacccc*cb\r\nbacbcacc*a\r\nccaabcbba*\r\n",
                "3\r\n6 3\r\n5 2\r\n9 1\r\n"
            ],
            [
                "10\r\n1 4 7\r\n*cbcbbaacd\r\nc*bbcaaddd\r\nbb*ababdcc\r\ncba*aabcdb\r\nbcba*cdaac\r\nbaaac*caab\r\naabbdc*cab\r\naddcaac*bb\r\ncdcdaaab*b\r\nddcbcbbbb*\r\n",
                "3\r\n1 3\r\n7 1\r\n4 2\r\n"
            ],
            [
                "7\r\n1 3 7\r\n*acaabc\r\na*abdda\r\nca*bcad\r\nabb*dcb\r\nadcd*bd\r\nbdacb*a\r\ncadbda*\r\n",
                "10\r\n3 5\r\n7 2\r\n2 3\r\n1 7\r\n5 2\r\n7 6\r\n2 1\r\n3 4\r\n4 2\r\n6 3\r\n"
            ],
            [
                "8\r\n8 5 6\r\n*ccbdcad\r\nc*dbbbdb\r\ncd*dddad\r\nbbd*baba\r\ndbdb*cbd\r\ncbdac*cc\r\nadabbc*a\r\ndbdadca*\r\n",
                "10\r\n6 3\r\n8 1\r\n3 4\r\n5 7\r\n4 6\r\n1 3\r\n6 4\r\n4 8\r\n7 2\r\n8 1\r\n"
            ],
            [
                "7\r\n6 1 5\r\n*aaadcb\r\na*bcdad\r\nab*bbcb\r\nacb*dac\r\nddbd*ac\r\ncacaa*c\r\nbdbccc*\r\n",
                "10\r\n5 7\r\n7 4\r\n4 2\r\n6 5\r\n2 7\r\n1 6\r\n6 3\r\n7 1\r\n5 6\r\n6 2\r\n"
            ],
            [
                "7\r\n4 7 6\r\n*ddccad\r\nd*bdaac\r\ndb*babb\r\ncdb*dbb\r\ncaad*cd\r\naabbc*d\r\ndcbbdd*\r\n",
                "10\r\n4 2\r\n6 5\r\n2 4\r\n7 6\r\n4 1\r\n5 3\r\n6 7\r\n7 5\r\n5 4\r\n4 2\r\n"
            ],
            [
                "8\r\n2 3 7\r\n*adccddd\r\na*aadaab\r\nda*dccab\r\ncad*badb\r\ncdcb*ccc\r\ndacac*db\r\ndaadcd*c\r\ndbbbcbc*\r\n",
                "12\r\n2 4\r\n7 1\r\n1 8\r\n4 5\r\n8 7\r\n3 6\r\n5 2\r\n6 4\r\n7 3\r\n2 5\r\n4 1\r\n5 2\r\n"
            ],
            [
                "7\r\n7 5 3\r\n*abaaad\r\na*bbacd\r\nbb*dccc\r\nabd*bdb\r\naacb*ab\r\naccda*b\r\nddcbbb*\r\n",
                "11\r\n3 2\r\n2 4\r\n7 6\r\n4 1\r\n1 2\r\n5 3\r\n6 7\r\n3 4\r\n2 3\r\n7 1\r\n4 2\r\n"
            ],
            [
                "9\r\n7 8 9\r\n*addcbaba\r\na*dbbbbbb\r\ndd*cccbdc\r\ndbc*ccccc\r\ncbcc*abdb\r\nbbcca*cbd\r\nabbcbc*bb\r\nbbdcdbb*c\r\nabccbdbc*\r\n",
                "10\r\n8 2\r\n7 5\r\n2 4\r\n9 3\r\n5 1\r\n3 2\r\n1 8\r\n8 7\r\n7 3\r\n4 1\r\n"
            ],
            [
                "7\r\n7 3 2\r\n*cbbdcd\r\nc*acacc\r\nba*aaca\r\nbca*bab\r\ndaab*cd\r\ncccac*b\r\ndcabdb*\r\n",
                "10\r\n3 6\r\n6 5\r\n7 3\r\n3 4\r\n4 6\r\n2 7\r\n5 4\r\n4 1\r\n7 2\r\n6 3\r\n"
            ],
            [
                "7\r\n4 5 6\r\n*bbcdad\r\nb*baaab\r\nbb*bacb\r\ncab*ccd\r\ndaac*da\r\naaccd*d\r\ndbbdad*\r\n",
                "11\r\n4 7\r\n7 1\r\n5 2\r\n2 4\r\n6 3\r\n1 2\r\n3 5\r\n5 7\r\n4 3\r\n2 1\r\n7 2\r\n"
            ],
            [
                "6\r\n5 3 2\r\n*dddbd\r\nd*accb\r\nda*dcb\r\ndcd*cd\r\nbccc*d\r\ndbbdd*\r\n",
                "10\r\n2 4\r\n5 6\r\n3 1\r\n4 3\r\n1 5\r\n3 1\r\n1 2\r\n5 1\r\n6 4\r\n4 3\r\n"
            ],
            [
                "7\r\n6 3 1\r\n*accbab\r\na*ddadc\r\ncd*dbcb\r\ncdd*daa\r\nbabd*ad\r\nadcaa*b\r\nbcbadb*\r\n",
                "10\r\n1 4\r\n6 2\r\n4 5\r\n5 7\r\n3 1\r\n1 4\r\n2 5\r\n4 3\r\n5 1\r\n7 2\r\n"
            ],
            [
                "7\r\n5 7 6\r\n*cbdcbb\r\nc*dacdd\r\nbd*adbb\r\ndaa*bda\r\nccdb*cc\r\nbdbdc*c\r\nbdbacc*\r\n",
                "16\r\n5 2\r\n6 4\r\n4 1\r\n7 6\r\n1 4\r\n2 3\r\n3 5\r\n6 1\r\n5 3\r\n3 2\r\n2 6\r\n4 5\r\n1 2\r\n5 3\r\n6 4\r\n4 1\r\n"
            ],
            [
                "7\r\n3 4 6\r\n*adaabd\r\na*cabdc\r\ndc*bddc\r\naab*acb\r\nabda*bd\r\nbddcb*d\r\ndccbdd*\r\n",
                "12\r\n6 5\r\n5 2\r\n4 6\r\n3 5\r\n6 1\r\n2 4\r\n1 2\r\n4 7\r\n2 6\r\n5 3\r\n7 1\r\n6 2\r\n"
            ],
            [
                "7\r\n4 2 7\r\n*abddad\r\na*bbacb\r\nbb*adcc\r\ndba*bcd\r\ndadb*ad\r\naccca*a\r\ndbcdda*\r\n",
                "11\r\n4 5\r\n7 6\r\n2 1\r\n5 2\r\n6 7\r\n1 3\r\n2 6\r\n3 4\r\n7 3\r\n6 1\r\n4 2\r\n"
            ],
            [
                "7\r\n1 4 3\r\n*badaaa\r\nb*dccbb\r\nad*ddab\r\ndcd*bdc\r\nacdb*aa\r\nabada*b\r\nabbcab*\r\n",
                "11\r\n3 5\r\n1 2\r\n2 7\r\n7 3\r\n4 1\r\n5 7\r\n3 6\r\n1 2\r\n7 3\r\n6 4\r\n4 1\r\n"
            ],
            [
                "6\r\n4 3 1\r\n*ddbdb\r\nd*cbac\r\ndc*adb\r\nbba*dc\r\ndadd*a\r\nbcbca*\r\n",
                "10\r\n4 5\r\n1 2\r\n3 4\r\n2 1\r\n1 3\r\n5 6\r\n3 2\r\n6 1\r\n4 5\r\n5 3\r\n"
            ],
            [
                "7\r\n3 6 5\r\n*cccddc\r\nc*bbdaa\r\ncb*cddc\r\ncbc*baa\r\ndddb*ac\r\ndadaa*a\r\ncacaca*\r\n",
                "10\r\n6 1\r\n5 7\r\n1 4\r\n7 1\r\n1 2\r\n4 5\r\n3 6\r\n6 1\r\n5 7\r\n7 3\r\n"
            ],
            [
                "7\r\n7 1 4\r\n*aaaddc\r\na*acccc\r\naa*dbbc\r\nacd*dbd\r\ndcbd*dc\r\ndcbbd*c\r\ncccdcc*\r\n",
                "10\r\n1 6\r\n4 2\r\n2 5\r\n7 4\r\n5 3\r\n6 1\r\n3 2\r\n1 7\r\n7 3\r\n4 1\r\n"
            ],
            [
                "6\r\n1 4 3\r\n*cacbc\r\nc*bbcc\r\nab*bab\r\ncbb*ba\r\nbcab*d\r\nccbad*\r\n",
                "10\r\n1 5\r\n3 2\r\n4 1\r\n2 3\r\n3 6\r\n5 2\r\n1 4\r\n6 3\r\n4 5\r\n5 1\r\n"
            ],
            [
                "6\r\n4 5 6\r\n*acaca\r\na*cbbb\r\ncc*cca\r\nabc*ba\r\ncbcb*c\r\nabaac*\r\n",
                "11\r\n4 3\r\n3 2\r\n5 4\r\n2 1\r\n6 3\r\n1 5\r\n5 6\r\n4 1\r\n1 2\r\n6 5\r\n5 1\r\n"
            ]
        ]
    }
]