[
    {
        "name": "Sonya and Ice Cream",
        "description": "Sonya likes ice cream very much. She eats it even during programming\ncompetitions. That is why the girl decided that she wants to open her own ice\ncream shops. Sonya lives in a city with \n    n\n junctions and \n    n-1\n\nstreets between them. All streets are two-way and connect two junctions. It is\npossible to travel from any junction to any other using one or more streets.\nCity Hall allows opening shops only on junctions. The girl cannot open shops\nin the middle of streets. Sonya has exactly \n    k\n friends whom she can\ntrust. If she opens a shop, one of her friends has to work there and not to\nallow anybody to eat an ice cream not paying for it. Since Sonya does not want\nto skip an important competition, she will not work in shops personally. Sonya\nwants all her ice cream shops to form a simple path of the length \n    r\n\n(\n    1 \n    \u2264 r \n    \u2264 k\n), i.e. to be located in different junctions \n    f_1,\n    f_2, \n    \u2026, f_r\n and there is street between \n    f_i\n and \n    f_i+1\n\nfor each \n    i\n from \n    1\n to \n    r-1\n. The girl takes care of potential\nbuyers, so she also wants to minimize the maximum distance between the\njunctions to the nearest ice cream shop. The distance between two junctions\n\n    a\n and \n    b\n is equal to the sum of all the street lengths that you\nneed to pass to get from the junction \n    a\n to the junction \n    b\n. So\nSonya wants to minimize \n    \n\n    max_a\n    min_1 \n    \u2264 i \n    \u2264 r\n    d_a,f_i\n\n    \n where \n    a\n takes a value of all possible \n    n\n junctions,\n\n    f_i\n \u2014 the junction where the \n    i\n-th Sonya's shop is located, and\n\n    d_x,y\n \u2014 the distance between the junctions \n    x\n and \n    y\n. Sonya\nis not sure that she can find the optimal shops locations, that is why she is\nasking you to help her to open not more than \n    k\n shops that will form a\nsimple path and the maximum distance between any junction and the nearest shop\nwould be minimal. Input The first line contains two integers \n    n\n and\n\n    k\n (\n    1\n    \u2264 k\n    \u2264 n\n    \u2264 10^5\n) \u2014 the number of junctions and\nfriends respectively. Each of the next \n    n-1\n lines contains three integers\n\n    u_i\n, \n    v_i\n, and \n    d_i\n (\n    1\n    \u2264 u_i, v_i\n    \u2264 n\n,\n\n    v_i\n    \u2260 u_i\n, \n    1\n    \u2264 d\n    \u2264 10^4\n) \u2014 junctions that are\nconnected by a street and the length of this street. It is guaranteed that\neach pair of junctions is connected by at most one street. It is guaranteed\nthat you can get from any junctions to any other. Output Print one number \u2014\nthe minimal possible maximum distance that you need to pass to get from any\njunction to the nearest ice cream shop. Sonya's shops must form a simple path\nand the number of shops must be at most \n    k\n. Examples Input 6 2 1 2 3 2 3\n4 4 5 2 4 6 3 2 4 6 Output 4 Input 10 3 1 2 5 5 7 2 3 2 6 10 6 3 3 8 1 6 4 2 4\n1 6 6 9 4 5 2 5 Output 7 Note In the first example, you can choose the path\n2-4, so the answer will be 4. The first example. In the second example, you\ncan choose the path 4-1-2, so the answer will be 7. The second example.\n\n",
        "cf_contest_id": 1004,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dp",
            "greedy",
            "shortest paths",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 2\r\n1 2 3\r\n2 3 4\r\n4 5 2\r\n4 6 3\r\n2 4 6\r\n",
                "4"
            ],
            [
                "10 3\r\n1 2 5\r\n5 7 2\r\n3 2 6\r\n10 6 3\r\n3 8 1\r\n6 4 2\r\n4 1 6\r\n6 9 4\r\n5 2 5\r\n",
                "7"
            ]
        ],
        "private_cases": [
            [
                "8 4\r\n8 7 4\r\n5 6 7\r\n7 3 4\r\n8 4 3\r\n1 2 1\r\n2 3 5\r\n5 4 4\r\n",
                "10"
            ],
            [
                "1 1\r\n",
                "0"
            ]
        ]
    }
]