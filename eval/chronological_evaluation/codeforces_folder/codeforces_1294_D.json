[
    {
        "name": "MEX maximizing",
        "description": "Recall that MEX of an array is a minimum non-negative integer that does not\nbelong to the array. Examples: for the array \n    [0, 0, 1, 0, 2]\n MEX equals\nto \n    3\n because numbers \n    0, 1\n and \n    2\n are presented in the array\nand \n    3\n is the minimum non-negative integer not presented in the array;\nfor the array \n    [1, 2, 3, 4]\n MEX equals to \n    0\n because \n    0\n is the\nminimum non-negative integer not presented in the array; for the array \n    [0,\n    1, 4, 3]\n MEX equals to \n    2\n because \n    2\n is the minimum non-negative\ninteger not presented in the array. You are given an empty array \n    a=[]\n\n(in other words, a zero-length array). You are also given a positive integer\n\n    x\n. You are also given \n    q\n queries. The \n    j\n-th query consists of\none integer \n    y_j\n and means that you have to append one element \n    y_j\n\nto the array. The array length increases by \n    1\n after a query. In one\nmove, you can choose any index \n    i\n and set \n    a_i := a_i + x\n or \n    a_i\n    := a_i - x\n (i.e. increase or decrease any element of the array by \n    x\n).\nThe only restriction is that \n    a_i\n cannot become negative. Since initially\nthe array is empty, you can perform moves only after the first query. You have\nto maximize the MEX (minimum excluded) of the array if you can perform any\nnumber of such operations (you can even perform the operation multiple times\nwith one element). You have to find the answer after each of \n    q\n queries\n(i.e. the \n    j\n-th answer corresponds to the array of length \n    j\n).\nOperations are discarded before each query. I.e. the array \n    a\n after the\n\n    j\n-th query equals to \n    [y_1, y_2, \n    \u2026, y_j]\n. Input The first\nline of the input contains two integers \n    q, x\n (\n    1 \n    \u2264 q, x \n    \u2264 4\n    \n    \u00b7 10^5\n) \u2014 the number of queries and the value of \n    x\n. The next\n\n    q\n lines describe queries. The \n    j\n-th query consists of one integer\n\n    y_j\n (\n    0 \n    \u2264 y_j \n    \u2264 10^9\n) and means that you have to append one\nelement \n    y_j\n to the array. Output Print the answer to the initial problem\nafter each query \u2014 for the query \n    j\n print the maximum value of MEX after\nfirst \n    j\n queries. Note that queries are dependent (the array changes\nafter each query) but operations are independent between queries. Examples\nInput 7 3 0 1 2 2 0 0 10 Output 1 2 3 3 4 4 7 Input 4 3 1 2 1 2 Output 0 0 0 0\nNote In the first example: After the first query, the array is \n    a=[0]\n:\nyou don't need to perform any operations, maximum possible MEX is \n    1\n.\nAfter the second query, the array is \n    a=[0, 1]\n: you don't need to perform\nany operations, maximum possible MEX is \n    2\n. After the third query, the\narray is \n    a=[0, 1, 2]\n: you don't need to perform any operations, maximum\npossible MEX is \n    3\n. After the fourth query, the array is \n    a=[0, 1, 2,\n    2]\n: you don't need to perform any operations, maximum possible MEX is\n\n    3\n (you can't make it greater with operations). After the fifth query,\nthe array is \n    a=[0, 1, 2, 2, 0]\n: you can perform \n    a[4] := a[4] + 3 =\n    3\n. The array changes to be \n    a=[0, 1, 2, 2, 3]\n. Now MEX is maximum\npossible and equals to \n    4\n. After the sixth query, the array is \n    a=[0,\n    1, 2, 2, 0, 0]\n: you can perform \n    a[4] := a[4] + 3 = 0 + 3 = 3\n. The\narray changes to be \n    a=[0, 1, 2, 2, 3, 0]\n. Now MEX is maximum possible\nand equals to \n    4\n. After the seventh query, the array is \n    a=[0, 1, 2, 2,\n    0, 0, 10]\n. You can perform the following operations: \n    a[3] := a[3] + 3 =\n    2 + 3 = 5\n, \n    a[4] := a[4] + 3 = 0 + 3 = 3\n, \n    a[5] := a[5] + 3 = 0 + 3\n    = 3\n, \n    a[5] := a[5] + 3 = 3 + 3 = 6\n, \n    a[6] := a[6] - 3 = 10 - 3 =\n    7\n, \n    a[6] := a[6] - 3 = 7 - 3 = 4\n. The resulting array will be \n    a=[0,\n    1, 2, 5, 3, 6, 4]\n. Now MEX is maximum possible and equals to \n    7\n.\n\n",
        "cf_contest_id": 1294,
        "cf_index": "D",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 3\r\n0\r\n1\r\n2\r\n2\r\n0\r\n0\r\n10\r\n",
                "1 2 3 3 4 4 7 "
            ],
            [
                "4 3\r\n1\r\n2\r\n1\r\n2\r\n",
                "0 0 0 0 "
            ]
        ],
        "private_cases": []
    }
]