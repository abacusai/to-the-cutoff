[
    {
        "name": "Asterism (Hard Version)",
        "description": "This is the hard version of the problem. The difference between versions is\nthe constraints on \n    n\n and \n    a_i\n. You can make hacks only if all\nversions of the problem are solved. First, Aoi came up with the following idea\nfor the competitive programming problem: Yuzu is a girl who collecting\ncandies. Originally, she has \n    x\n candies. There are also \n    n\n enemies\nnumbered with integers from \n    1\n to \n    n\n. Enemy \n    i\n has \n    a_i\n\ncandies. Yuzu is going to determine a permutation \n    P\n. A permutation is an\narray consisting of \n    n\n distinct integers from \n    1\n to \n    n\n in\narbitrary order. For example, \n    2,3,1,5,4\n is a permutation, but\n\n    1,2,2\n is not a permutation (\n    2\n appears twice in the\narray) and \n    1,3,4\n is also not a permutation (because \n    n=3\n\nbut there is the number \n    4\n in the array). After that, she will do \n    n\n\nduels with the enemies with the following rules: If Yuzu has equal or more\nnumber of candies than enemy \n    P_i\n, she wins the duel and gets \n    1\n\ncandy. Otherwise, she loses the duel and gets nothing. The candy which Yuzu\ngets will be used in the next duels. Yuzu wants to win all duels. How many\nvalid permutations \n    P\n exist? This problem was easy and wasn't interesting\nfor Akari, who is a friend of Aoi. And Akari made the following problem from\nthe above idea: Let's define \n    f(x)\n as the number of valid permutations\nfor the integer \n    x\n. You are given \n    n\n, \n    a\n and a prime number\n\n    p \n    \u2264 n\n. Let's call a positive integer \n    x\n good, if the value\n\n    f(x)\n is not divisible by \n    p\n. Find all good integers \n    x\n. Your\ntask is to solve this problem made by Akari. Input The first line contains two\nintegers \n    n\n, \n    p\n \n    (2 \n    \u2264 p \n    \u2264 n \n    \u2264 10^5)\n. It is\nguaranteed, that the number \n    p\n is prime (it has exactly two divisors\n\n    1\n and \n    p\n). The second line contains \n    n\n integers \n    a_1, a_2,\n    \n    \u2026, a_n\n \n    (1 \n    \u2264 a_i \n    \u2264 10^9)\n. Output In the first line,\nprint the number of good integers \n    x\n. In the second line, output all good\nintegers \n    x\n in the ascending order. It is guaranteed that the number of\ngood integers \n    x\n does not exceed \n    10^5\n. Examples Input 3 2 3 4 5\nOutput 1 3 Input 4 3 2 3 5 6 Output 2 3 4 Input 4 3 9 1 1 1 Output 0 Input 3 2\n1000000000 1 999999999 Output 1 999999998 Note In the first test, \n    p=2\n.\nIf \n    x \n    \u2264 2\n, there are no valid permutations for Yuzu. So \n    f(x)=0\n\nfor all \n    x \n    \u2264 2\n. The number \n    0\n is divisible by \n    2\n, so all\nintegers \n    x \n    \u2264 2\n are not good. If \n    x = 3\n, \n    1,2,3\n\nis the only valid permutation for Yuzu. So \n    f(3)=1\n, so the number \n    3\n\nis good. If \n    x = 4\n, \n    1,2,3\n    \n     , \n    \n    1,3,2\n    \n     ,\n    \n    \n    2,1,3\n    \n     , \n    \n    2,3,1\n are all valid permutations for Yuzu. So\n\n    f(4)=4\n, so the number \n    4\n is not good. If \n    x \n    \u2265 5\n, all\n\n    6\n permutations are valid for Yuzu. So \n    f(x)=6\n for all \n    x \n    \u2265\n    5\n, so all integers \n    x \n    \u2265 5\n are not good. So, the only good number\nis \n    3\n. In the third test, for all positive integers \n    x\n the value\n\n    f(x)\n is divisible by \n    p = 3\n.\n\n",
        "cf_contest_id": 1371,
        "cf_index": "E2",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "combinatorics",
            "dp",
            "math",
            "number theory",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2\r\n3 4 5\r\n",
                "1\r\n3\r\n"
            ],
            [
                "4 3\r\n2 3 5 6\r\n",
                "2\r\n3 4\r\n"
            ],
            [
                "4 3\r\n9 1 1 1\r\n",
                "0\r\n\r\n"
            ],
            [
                "3 2\r\n1000000000 1 999999999\r\n",
                "1\r\n999999998\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 2\r\n603532654 463735162\r\n",
                "1\r\n603532653\r\n"
            ],
            [
                "5 5\r\n292213182 292213182 292213182 292213183 292213182\r\n",
                "1\r\n292213182\r\n"
            ],
            [
                "5 2\r\n720537834 720537833 720537836 720537836 720537836\r\n",
                "0\r\n\r\n"
            ],
            [
                "5 2\r\n294086679 294086678 294086679 294086678 294086677\r\n",
                "0\r\n\r\n"
            ],
            [
                "5 3\r\n162602818 162602819 162602820 162602819 162602820\r\n",
                "0\r\n\r\n"
            ],
            [
                "3 2\r\n472048795 907772611 386584751\r\n",
                "0\r\n\r\n"
            ],
            [
                "4 2\r\n45597639 501553165 412214228 678482810\r\n",
                "0\r\n\r\n"
            ],
            [
                "5 5\r\n324179187 95333719 583067898 217640575 166623692\r\n",
                "4\r\n583067894 583067895 583067896 583067897\r\n"
            ],
            [
                "12 5\r\n1 10 2 9 3 8 3 2 8 1 10 6\r\n",
                "1\r\n1\r\n"
            ],
            [
                "87 83\r\n40 6 7 50 16 65 47 90 94 65 79 29 41 76 80 13 87 37 92 71 54 53 93 79 14 53 71 78 50 50 74 40 30 92 66 86 94 60 37 65 82 14 61 48 68 71 91 99 74 88 89 34 57 74 25 2 79 72 92 37 61 16 32 85 29 74 6 69 50 74 76 48 31 42 40 95 29 27 28 31 38 60 52 45 14 78 59\r\n",
                "75\r\n17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91\r\n"
            ],
            [
                "2 2\r\n271266633 271266631\r\n",
                "1\r\n271266632\r\n"
            ],
            [
                "3 2\r\n994829850 994829851 994829849\r\n",
                "1\r\n994829849\r\n"
            ],
            [
                "3 2\r\n568378695 568378695 568378694\r\n",
                "0\r\n\r\n"
            ],
            [
                "4 2\r\n718393070 718393070 718393069 718393069\r\n",
                "0\r\n\r\n"
            ],
            [
                "4 2\r\n291941912 291941912 291941911 291941913\r\n",
                "0\r\n\r\n"
            ],
            [
                "4 2\r\n865490756 865490757 865490758 865490754\r\n",
                "1\r\n865490755\r\n"
            ],
            [
                "6 3\r\n720809104 720809106 720809104 720809104 720809105 720809104\r\n",
                "0\r\n\r\n"
            ],
            [
                "6 5\r\n589325244 589325243 589325246 589325243 589325246 589325243\r\n",
                "2\r\n589325243 589325244\r\n"
            ],
            [
                "6 3\r\n17649897 17649898 17649899 17649895 17649896 17649896\r\n",
                "1\r\n17649895\r\n"
            ],
            [
                "6 2\r\n591198739 591198742 591198738 591198741 591198743 591198738\r\n",
                "0\r\n\r\n"
            ],
            [
                "6 5\r\n459714880 459714883 459714884 459714882 459714878 459714881\r\n",
                "4\r\n459714879 459714880 459714881 459714882\r\n"
            ],
            [
                "21 3\r\n653112937 653112928 653112933 653112933 653112935 653112940 653112929 653112927 653112953 653112942 653112930 653112939 653112929 653112940 653112937 653112929 653112950 653112936 653112934 653112937 653112929\r\n",
                "0\r\n\r\n"
            ]
        ]
    }
]