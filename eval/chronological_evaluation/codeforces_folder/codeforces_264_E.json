[
    {
        "name": "Roadside Trees",
        "description": "Squirrel Liss loves nuts. Liss asks you to plant some nut trees. There are n\npositions (numbered 1 to n from west to east) to plant a tree along a street.\nTrees grow one meter per month. At the beginning of each month you should\nprocess one query. The query is one of the following types: Plant a tree of\nheight h at position p. Cut down the x-th existent (not cut) tree from the\nwest (where x is 1-indexed). When we cut the tree it drops down and takes all\nthe available place at the position where it has stood. So no tree can be\nplanted at this position anymore. After processing each query, you should\nprint the length of the longest increasing subsequence. A subset of existent\ntrees is called an increasing subsequence if the height of the trees in the\nset is strictly increasing from west to east (for example, the westmost tree\nin the set must be the shortest in the set). The length of the increasing\nsubsequence is the number of trees in it. Note that Liss don't like the trees\nwith the same heights, so it is guaranteed that at any time no two trees have\nthe exactly same heights. Input The first line contains two integers: n and m\n(1 \u2264 n \u2264 10^5; 1 \u2264 m \u2264 2\u00b710^5) \u2014 the number of positions and the number of\nqueries. Next m lines contains the information of queries by following\nformats: If the i-th query is type 1, the i-th line contains three integers:\n1, pi, and hi (1 \u2264 pi \u2264 n, 1 \u2264 hi \u2264 10), where pi is the position of the new\ntree and hi is the initial height of the new tree. If the i-th query is type\n2, the i-th line contains two integers: 2 and xi (1 \u2264 xi \u2264 10), where the xi\nis the index of the tree we want to cut. The input is guaranteed to be\ncorrect, i.e., For type 1 queries, pi will be pairwise distinct. For type 2\nqueries, xi will be less than or equal to the current number of trees. At any\ntime no two trees have the exactly same heights. In each line integers are\nseparated by single spaces. Output Print m integers \u2014 the length of the\nlongest increasing subsequence after each query. Separate the numbers by\nwhitespaces. Examples Input 4 6 1 1 1 1 4 4 1 3 4 2 2 1 2 8 2 3 Output 1 2 3 2\n2 2 Note States of street after each query you can see on the following\nanimation: If your browser doesn't support animation png, please see the gif\nversion here: http://212.193.37.254/codeforces/images/162/roadtree.gif\n\n",
        "cf_contest_id": 264,
        "cf_index": "E",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 6\r\n1 1 1\r\n1 4 4\r\n1 3 4\r\n2 2\r\n1 2 8\r\n2 3\r\n",
                "1\r\n2\r\n3\r\n2\r\n2\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 20\r\n1 1 8\r\n1 3 2\r\n1 9 6\r\n1 2 8\r\n1 5 3\r\n2 3\r\n2 1\r\n1 8 10\r\n2 4\r\n1 10 5\r\n1 7 7\r\n2 3\r\n2 3\r\n1 4 3\r\n1 6 3\r\n2 5\r\n2 4\r\n2 2\r\n2 1\r\n2 1\r\n",
                "1\r\n1\r\n2\r\n2\r\n2\r\n2\r\n2\r\n3\r\n2\r\n2\r\n2\r\n2\r\n1\r\n2\r\n2\r\n2\r\n2\r\n1\r\n1\r\n0\r\n"
            ],
            [
                "10 20\r\n1 4 8\r\n1 8 5\r\n1 10 3\r\n2 3\r\n2 1\r\n1 6 8\r\n1 7 2\r\n1 2 7\r\n1 9 2\r\n1 1 4\r\n2 1\r\n2 4\r\n1 5 2\r\n2 2\r\n2 3\r\n2 3\r\n2 1\r\n1 3 9\r\n2 2\r\n2 1\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n2\r\n2\r\n3\r\n3\r\n4\r\n3\r\n2\r\n2\r\n2\r\n2\r\n2\r\n1\r\n2\r\n1\r\n0\r\n"
            ],
            [
                "10 20\r\n1 4 3\r\n1 2 2\r\n2 1\r\n1 3 1\r\n2 1\r\n2 1\r\n1 10 1\r\n1 6 7\r\n1 7 7\r\n1 8 6\r\n1 9 3\r\n2 2\r\n1 1 4\r\n2 2\r\n2 3\r\n2 3\r\n2 1\r\n2 1\r\n1 5 9\r\n2 1\r\n",
                "1\r\n2\r\n1\r\n2\r\n1\r\n0\r\n1\r\n1\r\n1\r\n1\r\n2\r\n2\r\n3\r\n3\r\n2\r\n2\r\n1\r\n0\r\n1\r\n0\r\n"
            ],
            [
                "10 20\r\n1 2 1\r\n1 1 3\r\n1 7 7\r\n2 3\r\n1 5 7\r\n1 4 5\r\n1 3 1\r\n2 1\r\n2 2\r\n1 9 3\r\n1 10 7\r\n2 5\r\n2 4\r\n1 8 9\r\n2 4\r\n2 3\r\n1 6 1\r\n2 3\r\n2 2\r\n2 1\r\n",
                "1\r\n1\r\n2\r\n1\r\n2\r\n2\r\n3\r\n3\r\n2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n1\r\n1\r\n1\r\n1\r\n0\r\n"
            ],
            [
                "10 20\r\n1 2 2\r\n2 1\r\n1 9 3\r\n1 1 6\r\n1 10 4\r\n1 4 1\r\n1 3 5\r\n2 4\r\n1 8 6\r\n1 7 1\r\n2 6\r\n2 3\r\n1 5 9\r\n2 5\r\n2 3\r\n2 3\r\n2 2\r\n1 6 6\r\n2 2\r\n2 1\r\n",
                "1\r\n0\r\n1\r\n1\r\n1\r\n2\r\n2\r\n2\r\n3\r\n3\r\n2\r\n2\r\n2\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n0\r\n"
            ],
            [
                "1 1\r\n1 1 1\r\n",
                "1\r\n"
            ]
        ]
    }
]