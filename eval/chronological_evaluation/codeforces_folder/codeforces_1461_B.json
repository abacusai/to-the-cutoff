[
    {
        "name": "Find the Spruce",
        "description": "Holidays are coming up really soon. Rick realized that it's time to think\nabout buying a traditional spruce tree. But Rick doesn't want real trees to\nget hurt so he decided to find some in an \n    n \n    \u00d7 m\n matrix consisting\nof \"*\" and \".\". To find every spruce first let's define what a spruce in the\nmatrix is. A set of matrix cells is called a spruce of height \n    k\n with\norigin at point \n    (x, y)\n if: All cells in the set contain an \"*\". For each\n\n    1 \n    \u2264 i \n    \u2264 k\n all cells with the row number \n    x+i-1\n and columns\nin range \n    [y - i + 1, y + i - 1]\n must be a part of the set. All other\ncells cannot belong to the set. Examples of correct and incorrect spruce\ntrees: Now Rick wants to know how many spruces his \n    n \n    \u00d7 m\n matrix\ncontains. Help Rick solve this problem. Input Each test contains one or more\ntest cases. The first line contains the number of test cases \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 10\n). The first line of each test case contains two integers\n\n    n\n and \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 500\n) \u2014 matrix size. Next \n    n\n\nlines of each test case contain \n    m\n characters \n    c_i, j\n \u2014 matrix\ncontents. It is guaranteed that \n    c_i, j\n is either a \".\" or an \"*\". It\nis guaranteed that the sum of \n    n \n    \u00b7 m\n over all test cases does not\nexceed \n    500^2\n (\n    \u2211 n \n    \u00b7 m \n    \u2264 500^2\n). Output For each\ntest case, print single integer \u2014 the total number of spruces in the matrix.\nExample Input 4 2 3 .*. *** 2 3 .*. **. 4 5 .***. ***** ***** *.*.* 5 7\n..*.*.. .*****. ******* .*****. ..*.*.. Output 5 3 23 34 Note In the first\ntest case the first spruce of height \n    2\n has its origin at point \n    (1,\n    2)\n, the second spruce of height \n    1\n has its origin at point \n    (1,\n    2)\n, the third spruce of height \n    1\n has its origin at point \n    (2,\n    1)\n, the fourth spruce of height \n    1\n has its origin at point \n    (2,\n    2)\n, the fifth spruce of height \n    1\n has its origin at point \n    (2,\n    3)\n. In the second test case the first spruce of height \n    1\n has its\norigin at point \n    (1, 2)\n, the second spruce of height \n    1\n has its\norigin at point \n    (2, 1)\n, the third spruce of height \n    1\n has its\norigin at point \n    (2, 2)\n.\n\n",
        "cf_contest_id": 1461,
        "cf_index": "B",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dp",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2 3\r\n.*.\r\n***\r\n2 3\r\n.*.\r\n**.\r\n4 5\r\n.***.\r\n*****\r\n*****\r\n*.*.*\r\n5 7\r\n..*.*..\r\n.*****.\r\n*******\r\n.*****.\r\n..*.*..\r\n",
                "5\r\n3\r\n23\r\n34\r\n"
            ]
        ],
        "private_cases": []
    }
]