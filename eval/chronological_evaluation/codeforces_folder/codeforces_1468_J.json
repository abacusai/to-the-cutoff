[
    {
        "name": "Road Reform",
        "description": "There are \n    n\n cities and \n    m\n bidirectional roads in Berland. The\n\n    i\n-th road connects the cities \n    x_i\n and \n    y_i\n, and has the speed\nlimit \n    s_i\n. The road network allows everyone to get from any city to any\nother city. The Berland Transport Ministry is planning a road reform. First of\nall, maintaining all \n    m\n roads is too costly, so \n    m - (n - 1)\n roads\nwill be demolished in such a way that the remaining \n    (n - 1)\n roads still\nallow to get to any city from any other city. Formally, the remaining roads\nshould represent an undirected tree. Secondly, the speed limits on the\nremaining roads might be changed. The changes will be done sequentially, each\nchange is either increasing the speed limit on some road by \n    1\n, or\ndecreasing it by \n    1\n. Since changing the speed limit requires a lot of\nwork, the Ministry wants to minimize the number of changes. The goal of the\nMinistry is to have a road network of \n    (n - 1)\n roads with the maximum\nspeed limit over all roads equal to exactly \n    k\n. They assigned you the\ntask of calculating the minimum number of speed limit changes they have to\nperform so the road network meets their requirements. For example, suppose the\ninitial map of Berland looks like that, and \n    k = 7\n: Then one of the\noptimal courses of action is to demolish the roads \n    1\n\u2013\n    4\n and\n\n    3\n\u2013\n    4\n, and then decrease the speed limit on the road \n    2\n\u2013\n    3\n\nby \n    1\n, so the resulting road network looks like that: Input The first\nline contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of\ntest cases. The first line of each test case contains three integers \n    n\n,\n\n    m\n and \n    k\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n; \n    n - 1 \n    \u2264 m\n    \n    \u2264\n    min(2 \n    \u00b7 10^5, \n    n(n-1)/2)\n; \n    1 \n    \u2264 k \n    \u2264\n    10^9\n) \u2014 the number of cities, the number of roads and the required maximum\nspeed limit, respectively. Then \n    m\n lines follow. The \n    i\n-th line\ncontains three integers \n    x_i\n, \n    y_i\n and \n    s_i\n (\n    1 \n    \u2264 x_i,\n    y_i \n    \u2264 n\n; \n    x_i \n     y_i\n; \n    1 \n    \u2264 s_i \n    \u2264 10^9\n) \u2014 the\ncities connected by the \n    i\n-th road and the speed limit on it,\nrespectively. All roads are bidirectional. The road network in each test case\nis connected (that is, it is possible to reach any city from any other city by\ntraveling along the road), and each pair of cities is connected by at most one\nroad. The sum of \n    n\n over all test cases does not exceed \n    2 \n    \u00b7\n    10^5\n. Similarly, the sum of \n    m\n over all test cases does not exceed\n\n    2 \n    \u00b7 10^5\n. Output For each test case, print one integer \u2014 the\nminimum number of changes the Ministry has to perform so that the maximum\nspeed limit among the remaining \n    (n - 1)\n roads is exactly \n    k\n.\nExample Input 4 4 5 7 4 1 3 1 2 5 2 3 8 2 4 1 3 4 4 4 6 5 1 2 1 1 3 1 1 4 2 2\n4 1 4 3 1 3 2 1 3 2 10 1 2 8 1 3 10 5 5 15 1 2 17 3 1 15 2 3 10 1 4 14 2 5 8\nOutput 1 3 0 0 Note The explanation for the example test: The first test case\nis described in the problem statement. In the second test case, the road\nnetwork initially looks like that: The Ministry can demolish the roads\n\n    1\n\u2013\n    2\n, \n    3\n\u2013\n    2\n and \n    3\n\u2013\n    4\n, and then increase the\nspeed limit on the road \n    1\n\u2013\n    4\n three times. In the third test case,\nthe road network already meets all the requirements. In the fourth test case,\nit is enough to demolish the road \n    1\n\u2013\n    2\n so the resulting road\nnetwork meets the requirements.\n\n",
        "cf_contest_id": 1468,
        "cf_index": "J",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "dsu",
            "graphs",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4\r\n4 5 7\r\n4 1 3\r\n1 2 5\r\n2 3 8\r\n2 4 1\r\n3 4 4\r\n4 6 5\r\n1 2 1\r\n1 3 1\r\n1 4 2\r\n2 4 1\r\n4 3 1\r\n3 2 1\r\n3 2 10\r\n1 2 8\r\n1 3 10\r\n5 5 15\r\n1 2 17\r\n3 1 15\r\n2 3 10\r\n1 4 14\r\n2 5 8\r\n",
                "1\r\n3\r\n0\r\n0\r\n"
            ]
        ],
        "private_cases": []
    }
]