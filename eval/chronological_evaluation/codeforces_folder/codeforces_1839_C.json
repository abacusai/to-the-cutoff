[
    {
        "name": "Insert Zero and Invert Prefix",
        "description": "You have a sequence \n    a_1, a_2, \n    \u2026, a_n\n of length \n    n\n, each\nelement of which is either \n    0\n or \n    1\n, and a sequence \n    b\n, which\nis initially empty. You are going to perform \n    n\n operations. On each of\nthem you will increase the length of \n    b\n by \n    1\n. On the \n    i\n-th\noperation you choose an integer \n    p\n between \n    0\n and \n    i-1\n. You\ninsert \n    0\n in the sequence \n    b\n on position \n    p+1\n (after the first\n\n    p\n elements), and then you invert the first \n    p\n elements of \n    b\n.\nMore formally: let's denote the sequence \n    b\n before the \n    i\n-th (\n    1\n    \n    \u2264 i \n    \u2264 n\n) operation as \n    b_1, b_2, \n    \u2026, b_i-1\n. On the\n\n    i\n-th operation you choose an integer \n    p\n between \n    0\n and\n\n    i-1\n and replace \n    b\n with \n    b_1, \n    b_2,\n    \n    \u2026, \n    b_p, 0, b_p+1, b_p+2, \n    \u2026, b_i-1\n. Here,\n\n    x\n denotes the binary inversion. Hence, \n    0 =\n    1\n and \n    1 = 0\n. You can find examples of operations in the\nNotes section. Determine if there exists a sequence of operations that makes\n\n    b\n equal to \n    a\n. If such sequence of operations exists, find it.\nInput Each test contains multiple test cases. The first line contains a single\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. The\nfirst line of each test case contains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    10^5\n) \u2014 the length of the sequence \n    a\n. The second line of each test\ncase contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i\n    \n    \u2264 1\n) \u2014 the sequence \n    a\n. It is guaranteed that the sum of \n    n\n\nover all test cases does not exceed \n    10^5\n. Output For each test case:\noutput \"NO\", if it is impossible to make \n    b\n equal to \n    a\n using the\ngiven operations; otherwise, output \"YES\" in the first line and \n    n\n\nintegers \n    p_1, p_2, \n    \u2026, p_n\n (\n    0 \n    \u2264 p_i \n    \u2264 i-1\n) in the\nsecond line \u2014 the description of sequence of operations that makes \n    b\n\nequal to \n    a\n. Here, \n    p_i\n should be the integer you choose on the\n\n    i\n-th operation. If there are multiple solutions, you can output any of\nthem. Example Input 4 5 1 1 0 0 0 1 1 3 0 1 1 6 1 0 0 1 1 0 Output YES 0 0 2 1\n3 NO NO YES 0 1 0 2 4 2 Note In the first test case, Before the first\noperation, \n    b = [\n     ]\n. You choose \n    p = 0\n and replace \n    b\n with\n\n    [\n     \n    0\n     ]\n On the second operation you choose \n    p =\n    0\n and replace \n    b\n with \n    [\n     \n    0, 0 \n     ]\n. On the\nthird operation you choose \n    p = 2\n and replace \n    b\n with \n    [\n      1, 1,\n    \n    0\n     ]\n. On the fourth operation you choose \n    p = 1\n and\nreplace \n    b\n with \n    [\n      0, \n    0, 1, 0 \n     ]\n. On the fifth\noperation you choose \n    p = 3\n and replace \n    b\n with \n    [\n      1, 1, 0,\n    \n    0, 0 \n     ]\n. Hence, sequence \n    b\n changes in the following\nway: \n    [\n     ]\n \n    \n \n    [\n     \n    0\n     ]\n \n    \n \n    [\n     \n    0, 0 \n     ]\n \n    \n \n    [\n      1,\n    1, \n    0\n     ]\n \n    \n \n    [\n      0,\n    \n    0, 1, 0 \n     ]\n \n    \n \n    [\n     \n    1, 1, 0, \n    0, 0 \n     ]\n. In the end the sequence \n    b\n is equal\nto the sequence \n    a\n, so this way to perform operations is one of the\ncorrect answers. In the second test case, \n    n = 1\n and the only achiveable\nsequence \n    b\n is \n    [\n      0 \n      ]\n. In the third test case, there are\nsix possible sequences of operations: \n    [\n     ]\n \n    \n \n    [\n     \n    0\n     ]\n \n    \n \n    [\n     \n    0, 0 \n     ]\n \n    \n \n    [\n     \n    0, 0, 0 \n     ]\n. \n    [\n     ]\n\n\n    \n \n    [\n     \n    0\n     ]\n\n\n    \n \n    [\n     \n    0, 0 \n     ]\n\n\n    \n \n    [\n      1, \n    0, 0 \n     ]\n.\n\n    [\n     ]\n \n    \n \n    [\n     \n    0\n     ]\n \n    \n \n    [\n     \n    0, 0\n    \n     ]\n \n    \n \n    [\n      1, 1, \n    0\n     ]\n. \n    [\n     ]\n \n    \n \n    [\n     \n    0\n     ]\n \n    \n \n    [\n      1,\n    \n    0\n     ]\n \n    \n \n    [\n     \n    0, 1, 0 \n     ]\n. \n    [\n     ]\n \n    \n \n    [\n     \n    0\n     ]\n \n    \n\n\n    [\n      1, \n    0\n     ]\n \n    \n\n\n    [\n      0, \n    0, 0 \n     ]\n. \n    [\n     ]\n \n    \n \n    [\n     \n    0\n     ]\n \n    \n \n    [\n      1, \n    0\n     ]\n \n    \n \n    [\n      0, 1, \n    0\n     ]\n. None of them makes \n    b\n\nequal to \n    [\n      0, 1, 1 \n     ]\n, so the answer is \"NO\".\n\n",
        "cf_contest_id": 1839,
        "cf_index": "C",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n5\r\n1 1 0 0 0\r\n1\r\n1\r\n3\r\n0 1 1\r\n6\r\n1 0 0 1 1 0\r\n",
                "YES\r\n0 0 0 0 2\r\nNO\r\nNO\r\nYES\r\n0 0 2 0 0 1\r\n"
            ]
        ],
        "private_cases": []
    }
]