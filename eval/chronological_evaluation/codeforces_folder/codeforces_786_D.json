[
    {
        "name": "Rap God",
        "description": "Rick is in love with Unity. But Mr. Meeseeks also love Unity, so Rick and Mr.\nMeeseeks are \"love rivals\". Unity loves rap, so it decided that they have to\ncompete in a rap game (battle) in order to choose the best. Rick is too nerds,\nso instead he's gonna make his verse with running his original algorithm on\nlyrics \"Rap God\" song. His algorithm is a little bit complicated. He's made a\ntree with n vertices numbered from 1 to n and there's a lowercase english\nletter written on each edge. He denotes str(a, b) to be the string made by\nwriting characters on edges on the shortest path from a to b one by one (a\nstring of length equal to distance of a to b). Note that str(a, b) is reverse\nof str(b, a) and str(a, a) is empty. In order to make the best verse he can,\nhe needs to answer some queries, but he's not a computer scientist and is not\nable to answer those queries, so he asked you to help him. Each query is\ncharacterized by two vertices x and y (x \u2260 y). Answer to this query is the\nnumber of vertices like z such that z \u2260 x, z \u2260 y and str(x, y) is\nlexicographically larger than str(x, z). String x = x1x2...x|x| is\nlexicographically larger than string y = y1y2...y|y|, if either |x| > |y| and\nx1 = y1, x2 = y2, ..., x|y| = y|y|, or exists such number r (r < |x|, r <\n|y|), that x1 = y1, x2 = y2, ..., xr = yr and xr + 1 > yr + 1. Characters are\ncompared like their ASCII codes (or alphabetic order). Help Rick get the girl\n(or whatever gender Unity has). Input The first line of input contain two\nintegers n and q (2 \u2264 n \u2264 20000, 1 \u2264 q \u2264 20000) \u2014 number of vertices in tree\nand number of queries respectively. The next n - 1 lines contain the edges.\nEach line contains two integers v and u (endpoints of the edge) followed by an\nEnglish lowercase letter c (1 \u2264 v, u \u2264 n, v \u2260 u). The next q line contain the\nqueries. Each line contains two integers x and y (1 \u2264 x, y \u2264 n, x \u2260 y). Output\nPrint the answer for each query in one line. Examples Input 4 3 4 1 t 3 2 p 1\n2 s 3 2 1 3 2 1 Output 0 1 1 Input 8 4 4 6 p 3 7 o 7 8 p 4 5 d 1 3 o 4 3 p 3 2\ne 8 6 3 7 8 1 4 3 Output 6 1 3 1 Note Here's the tree of first sample\ntestcase: Here's the tree of second sample testcase: In this test: str(8, 1) =\npoo str(8, 2) = poe str(8, 3) = po str(8, 4) = pop str(8, 5) = popd str(8, 6)\n= popp str(8, 7) = p So, for the first query, and for the third query is the\nanswer.\n\n",
        "cf_contest_id": 786,
        "cf_index": "D",
        "cf_rating": 3400,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "hashing",
            "strings",
            "trees"
        ],
        "time_limit_seconds": 7.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 3\r\n4 1 t\r\n3 2 p\r\n1 2 s\r\n3 2\r\n1 3\r\n2 1\r\n",
                "0\r\n1\r\n1\r\n"
            ],
            [
                "8 4\r\n4 6 p\r\n3 7 o\r\n7 8 p\r\n4 5 d\r\n1 3 o\r\n4 3 p\r\n3 2 e\r\n8 6\r\n3 7\r\n8 1\r\n4 3\r\n",
                "6\r\n1\r\n3\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 10\r\n10 2 u\r\n5 7 d\r\n6 9 o\r\n4 6 w\r\n9 1 z\r\n7 9 b\r\n1 8 l\r\n10 4 t\r\n3 4 y\r\n1 5\r\n1 7\r\n6 9\r\n5 10\r\n7 3\r\n5 10\r\n7 5\r\n6 3\r\n1 9\r\n4 6\r\n",
                "3\r\n2\r\n0\r\n4\r\n5\r\n4\r\n8\r\n8\r\n1\r\n2\r\n"
            ],
            [
                "20 30\r\n1 17 z\r\n5 14 o\r\n2 11 e\r\n12 14 k\r\n18 12 g\r\n11 14 s\r\n3 20 k\r\n6 20 h\r\n4 9 h\r\n3 17 t\r\n15 20 r\r\n10 3 n\r\n6 7 c\r\n3 13 u\r\n3 16 q\r\n14 20 f\r\n11 8 p\r\n10 4 p\r\n19 8 w\r\n5 17\r\n14 5\r\n17 3\r\n5 6\r\n4 20\r\n9 14\r\n10 14\r\n8 17\r\n5 18\r\n18 10\r\n18 6\r\n18 12\r\n6 14\r\n11 8\r\n10 15\r\n16 19\r\n6 9\r\n20 14\r\n15 11\r\n12 13\r\n20 4\r\n7 16\r\n5 4\r\n19 17\r\n11 13\r\n14 13\r\n18 5\r\n2 5\r\n5 14\r\n7 18\r\n",
                "9\r\n14\r\n0\r\n2\r\n3\r\n4\r\n2\r\n11\r\n14\r\n6\r\n3\r\n0\r\n2\r\n1\r\n12\r\n9\r\n13\r\n0\r\n5\r\n12\r\n12\r\n14\r\n6\r\n12\r\n14\r\n10\r\n14\r\n18\r\n0\r\n4\r\n"
            ],
            [
                "2 1\r\n2 1 s\r\n1 2\r\n",
                "0\r\n"
            ]
        ]
    }
]