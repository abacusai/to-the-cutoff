[
    {
        "name": "Yaroslav and Time",
        "description": "Yaroslav is playing a game called \"Time\". The game has a timer showing the\nlifespan he's got left. As soon as the timer shows 0, Yaroslav's character\ndies and the game ends. Also, the game has n clock stations, station number i\nis at point (xi, yi) of the plane. As the player visits station number i, he\nincreases the current time on his timer by ai. The stations are for one-time\nuse only, so if the player visits some station another time, the time on his\ntimer won't grow. A player spends d\u00b7dist time units to move between stations,\nwhere dist is the distance the player has covered and d is some constant. The\ndistance between stations i and j is determined as |xi - xj| + |yi - yj|.\nInitially, the player is at station number 1, and the player has strictly more\nthan zero and strictly less than one units of time. At station number 1 one\nunit of money can increase the time on the timer by one time unit (you can buy\nonly integer number of time units). Now Yaroslav is wondering, how much money\nhe needs to get to station n. Help Yaroslav. Consider the time to buy and to\nincrease the timer value negligibly small. Input The first line contains\nintegers n and d (3 \u2264 n \u2264 100, 10^3 \u2264 d \u2264 10^5) \u2014 the number of stations and\nthe constant from the statement. The second line contains n - 2 integers: a2,\na3, ..., an - 1 (1 \u2264 ai \u2264 10^3). The next n lines contain the coordinates of\nthe stations. The i-th of them contains two integers xi, yi (-100 \u2264 xi, yi \u2264\n100). It is guaranteed that no two stations are located at the same point.\nOutput In a single line print an integer \u2014 the answer to the problem. Examples\nInput 3 1000 1000 0 0 0 1 0 3 Output 2000 Input 3 1000 1000 1 0 1 1 1 2 Output\n1000\n\n",
        "cf_contest_id": 301,
        "cf_index": "B",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "graphs",
            "shortest paths"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 1000\r\n1000\r\n0 0\r\n0 1\r\n0 3\r\n",
                "2000\r\n"
            ],
            [
                "3 1000\r\n1000\r\n1 0\r\n1 1\r\n1 2\r\n",
                "1000\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 1421\r\n896 448 727\r\n-19 -40\r\n-87 40\r\n69 51\r\n-55 61\r\n-7 67\r\n",
                "169099\r\n"
            ],
            [
                "6 1000\r\n142 712 254 869\r\n7 0\r\n95 38\r\n96 -20\r\n-7 93\r\n75 -45\r\n-80 -20\r\n",
                "107000\r\n"
            ],
            [
                "7 1288\r\n943 265 649 447 806\r\n-4 -51\r\n-26 32\r\n47 -28\r\n31 32\r\n61 65\r\n-45 -37\r\n82 42\r\n",
                "229903\r\n"
            ],
            [
                "8 1931\r\n440 627 324 538 539 119\r\n-85 -41\r\n-91 61\r\n-84 11\r\n92 -19\r\n8 -5\r\n16 -25\r\n97 -98\r\n91 78\r\n",
                "569018\r\n"
            ],
            [
                "9 1829\r\n98 513 987 291 162 637 356\r\n38 -3\r\n-89 93\r\n-86 45\r\n-43 -84\r\n-3 -87\r\n53 -59\r\n18 -19\r\n81 -74\r\n-85 32\r\n",
                "288982\r\n"
            ],
            [
                "10 1000\r\n759 222 589 423 947 507 31 414\r\n-4 -71\r\n-31 -53\r\n24 28\r\n-13 -65\r\n-59 -49\r\n-42 -79\r\n85 -71\r\n-60 -17\r\n28 66\r\n74 2\r\n",
                "151000\r\n"
            ],
            [
                "11 1199\r\n282 735 54 1000 419 939 901 789 128\r\n10 -81\r\n26 72\r\n19 -91\r\n-61 85\r\n0 -33\r\n-62 79\r\n-59 65\r\n-2 -77\r\n-63 100\r\n-15 53\r\n94 54\r\n",
                "262581\r\n"
            ],
            [
                "12 1609\r\n196 486 94 344 524 588 315 504 449 201\r\n86 -22\r\n-2 25\r\n-95 -8\r\n-5 -30\r\n-78 71\r\n5 -54\r\n-69 -92\r\n-41 0\r\n10 19\r\n61 17\r\n75 -39\r\n-46 22\r\n",
                "282231\r\n"
            ],
            [
                "3 97325\r\n40\r\n43 43\r\n45 -95\r\n-93 63\r\n",
                "15182700\r\n"
            ],
            [
                "11 1615\r\n137 681 199 33 388 585 241 518 7\r\n-60 89\r\n24 6\r\n-100 -55\r\n-26 -90\r\n-40 -33\r\n-100 28\r\n12 34\r\n-60 -13\r\n38 -89\r\n62 81\r\n-35 54\r\n",
                "96900\r\n"
            ],
            [
                "22 1000\r\n94 609 173 244 930 515 169 56 192 974 923 749 652 987 145 447 578 518 630 917\r\n13 93\r\n99 6\r\n41 -54\r\n67 -85\r\n24 38\r\n23 -65\r\n9 -60\r\n-29 -78\r\n-29 -32\r\n53 -70\r\n-83 -50\r\n31 1\r\n-85 16\r\n74 95\r\n-30 89\r\n89 -67\r\n70 -74\r\n-78 -73\r\n19 17\r\n97 4\r\n97 -27\r\n-4 -48\r\n",
                "158000\r\n"
            ],
            [
                "4 62071\r\n706 480\r\n6 96\r\n51 -12\r\n99 66\r\n-69 -61\r\n",
                "14400472\r\n"
            ],
            [
                "12 1542\r\n389 356 290 648 182 94 585 988 762 494\r\n-46 96\r\n1 88\r\n0 95\r\n-91 -100\r\n-42 -29\r\n45 -27\r\n-52 -34\r\n-62 27\r\n-19 46\r\n-100 95\r\n5 -55\r\n-36 -65\r\n",
                "263034\r\n"
            ],
            [
                "3 100000\r\n1\r\n-100 -100\r\n-100 -99\r\n100 100\r\n",
                "39999999\r\n"
            ],
            [
                "12 1211\r\n1 5 7 1000 1000 1000 1000 1000 1000 1000\r\n1 1\r\n5 5\r\n3 4\r\n4 3\r\n0 1\r\n0 2\r\n0 5\r\n0 7\r\n1 0\r\n3 0\r\n8 0\r\n10 10\r\n",
                "20220\r\n"
            ],
            [
                "6 1000\r\n1000 1000 1000 1000\r\n0 0\r\n0 -1\r\n1 -1\r\n2 -1\r\n2 0\r\n2 1\r\n",
                "1000\r\n"
            ]
        ]
    }
]