[
    {
        "name": "Odd Mineral Resource",
        "description": "In Homer's country, there are \n    n\n cities numbered \n    1\n to \n    n\n and\nthey form a tree. That is, there are \n    (n-1)\n undirected roads between\nthese \n    n\n cities and every two cities can reach each other through these\nroads. Homer's country is an industrial country, and each of the \n    n\n\ncities in it contains some mineral resource. The mineral resource of city\n\n    i\n is labeled \n    a_i\n. Homer is given the plans of the country in the\nfollowing \n    q\n years. The plan of the \n    i\n-th year is described by four\nparameters \n    u_i, v_i, l_i\n and \n    r_i\n, and he is asked to find any\nmineral resource \n    c_i\n such that the following two conditions hold:\nmineral resource \n    c_i\n appears an odd number of times between city\n\n    u_i\n and city \n    v_i\n; and \n    l_i \n    \u2264 c_i \n    \u2264 r_i\n. As the best\nfriend of Homer, he asks you for help. For every plan, find any such mineral\nresource \n    c_i\n, or tell him that there doesn't exist one. Input The first\nline contains two integers \n    n\n (\n    1 \n    \u2264 n \n    \u2264 3 \n    \u00b7 10^5\n)\nand \n    q\n (\n    1 \n    \u2264 q \n    \u2264 3 \n    \u00b7 10^5\n), indicating the number of\ncities and the number of plans. The second line contains \n    n\n integers\n\n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n). Then the\n\n    i\n-th line of the following \n    (n-1)\n lines contains two integers\n\n    x_i\n and \n    y_i\n (\n    1 \n    \u2264 x_i, y_i \n    \u2264 n\n) with \n    x_i \n    \u2260\n    y_i\n, indicating that there is a bidirectional road between city \n    x_i\n\nand city \n    y_i\n. It is guaranteed that the given roads form a tree. Then\nthe \n    i\n-th line of the following \n    q\n lines contains four integers\n\n    u_i\n, \n    v_i\n, \n    l_i\n, \n    r_i\n (\n    1 \n    \u2264 u_i \n    \u2264 n\n, \n    1\n    \n    \u2264 v_i \n    \u2264 n\n, \n    1 \n    \u2264 l_i \n    \u2264 r_i \n    \u2264 n\n), indicating\nthe plan of the \n    i\n-th year. Output Print \n    q\n lines, the \n    i\n-th of\nwhich contains an integer \n    c_i\n such that \n    c_i = -1\n if there is no\nsuch mineral resource that meets the required condition; or \n    c_i\n is the\nlabel of the chosen mineral resource of the \n    i\n-th year. The chosen\nmineral resource \n    c_i\n should meet those conditions in the \n    i\n-th year\ndescribed above in the problem statement. If there are multiple choices of\n\n    c_i\n, you can print any of them. Example Input 6 8 3 2 1 3 1 3 1 2 1 3 2\n4 2 5 4 6 3 5 1 1 3 5 1 3 3 5 1 3 1 1 2 2 1 1 3 3 1 4 1 5 1 6 1 3 1 6 1 3\nOutput -1 2 3 -1 3 2 2 3 Note In the first three queries, there are four\ncities between city \n    3\n and city \n    5\n, which are city \n    1\n, city\n\n    2\n, city \n    3\n and city \n    5\n. The mineral resources appear in them\nare mineral resources \n    1\n (appears in city \n    3\n and city \n    5\n),\n\n    2\n (appears in city \n    2\n) and \n    3\n (appears in city \n    1\n). It is\nnoted that The first query is only to check whether mineral source \n    1\n\nappears an odd number of times between city \n    3\n and city \n    5\n. The\nanswer is no, because mineral source \n    1\n appears twice (an even number of\ntimes) between city \n    3\n and city \n    5\n. The second and the third queries\nare the same but they can choose different mineral resources. Both mineral\nresources \n    2\n and \n    3\n are available.\n\n",
        "cf_contest_id": 1479,
        "cf_index": "D",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "bitmasks",
            "brute force",
            "data structures",
            "probabilities",
            "trees"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "6 8\r\n3 2 1 3 1 3\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n4 6\r\n3 5 1 1\r\n3 5 1 3\r\n3 5 1 3\r\n1 1 2 2\r\n1 1 3 3\r\n1 4 1 5\r\n1 6 1 3\r\n1 6 1 3\r\n",
                "-1\r\n2\r\n2\r\n-1\r\n3\r\n2\r\n2\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1\r\n1 1 1 1\r\n",
                "1\r\n"
            ],
            [
                "5 1\r\n3 3 3 3 3\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n1 5 1 5\r\n",
                "3\r\n"
            ]
        ]
    }
]