[
    {
        "name": "Sum Queries?",
        "description": "Let's define a balanced multiset the following way. Write down the sum of all\nelements of the multiset in its decimal representation. For each position of\nthat number check if the multiset includes at least one element such that the\ndigit of the element and the digit of the sum at that position are the same.\nIf that holds for every position, then the multiset is balanced. Otherwise\nit's unbalanced. For example, multiset \n    20, 300, 10001\n is\nbalanced and multiset \n    20, 310, 10001\n is unbalanced: The red\ndigits mark the elements and the positions for which these elements have the\nsame digit as the sum. The sum of the first multiset is \n    10321\n, every\nposition has the digit required. The sum of the second multiset is \n    10331\n\nand the second-to-last digit doesn't appear in any number, thus making the\nmultiset unbalanced. You are given an array \n    a_1, a_2, \n    \u2026, a_n\n,\nconsisting of \n    n\n integers. You are asked to perform some queries on it.\nThe queries can be of two types: \n    1\u00a0i\u00a0x\n \u2014 replace \n    a_i\n with the\nvalue \n    x\n; \n    2\u00a0l\u00a0r\n \u2014 find the unbalanced subset of the multiset of the\nnumbers \n    a_l, a_l + 1, \n    \u2026, a_r\n with the minimum sum, or report\nthat no unbalanced subset exists. Note that the empty multiset is balanced.\nFor each query of the second type print the lowest sum of the unbalanced\nsubset. Print -1 if no unbalanced subset exists. Input The first line contains\ntwo integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 2 \n    \u00b7 10^5\n) \u2014\nthe number of elements in the array and the number of queries, respectively.\nThe second line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1\n    \n    \u2264 a_i < 10^9\n). Each of the following \n    m\n lines contains a query of\none of two types: \n    1\u00a0i\u00a0x\n (\n    1 \n    \u2264 i \n    \u2264 n\n, \n    1 \n    \u2264 x <\n    10^9\n) \u2014 replace \n    a_i\n with the value \n    x\n; \n    2\u00a0l\u00a0r\n (\n    1 \n    \u2264 l\n    \n    \u2264 r \n    \u2264 n\n) \u2014 find the unbalanced subset of the multiset of the\nnumbers \n    a_l, a_l + 1, \n    \u2026, a_r\n with the lowest sum, or report that\nno unbalanced subset exists. It is guaranteed that there is at least one query\nof the second type. Output For each query of the second type print the lowest\nsum of the unbalanced subset. Print -1 if no unbalanced subset exists. Example\nInput 4 5 300 10001 20 20 2 1 3 1 1 310 2 1 3 2 3 3 2 3 4 Output -1 330 -1 40\nNote All the subsets of multiset \n    20, 300, 10001\n are balanced,\nthus the answer is -1. The possible unbalanced subsets in the third query are\n\n    20, 310\n and \n    20, 310, 10001\n. The lowest sum one\nis \n    20, 310\n. Note that you are asked to choose a subset, not a\nsubsegment, thus the chosen elements might not be adjancent in the array. The\nfourth query includes only the empty subset and subset \n    20\n.\nBoth of them are balanced. The last query includes the empty subset and the\nsubsets \n    20\n, \n    20\n and \n    20, 20\n.\nOnly \n    20, 20\n is unbalanced, its sum is \n    40\n. Note that you\nare asked to choose a multiset, thus it might include equal elements.\n\n",
        "cf_contest_id": 1217,
        "cf_index": "E",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 5\r\n300 10001 20 20\r\n2 1 3\r\n1 1 310\r\n2 1 3\r\n2 3 3\r\n2 3 4\r\n",
                "-1\r\n330\r\n-1\r\n40\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 10\r\n8 9 7 6 1\r\n1 1 2\r\n1 5 5\r\n2 1 3\r\n1 5 8\r\n1 4 3\r\n2 1 5\r\n2 2 3\r\n1 4 10\r\n2 4 5\r\n2 1 2\r\n",
                "9\r\n5\r\n16\r\n-1\r\n11\r\n"
            ],
            [
                "10 20\r\n13 41 38 21 33 19 50 3 18 32\r\n1 2 44\r\n2 4 7\r\n1 8 35\r\n1 8 47\r\n2 4 4\r\n1 9 10\r\n1 9 47\r\n2 5 9\r\n2 2 2\r\n2 6 9\r\n1 3 24\r\n2 1 10\r\n2 1 7\r\n2 2 10\r\n2 2 10\r\n1 10 29\r\n1 2 23\r\n1 6 36\r\n2 6 8\r\n1 1 14\r\n",
                "40\r\n-1\r\n52\r\n-1\r\n66\r\n32\r\n32\r\n40\r\n40\r\n83\r\n"
            ],
            [
                "1 1\r\n1\r\n2 1 1\r\n",
                "-1\r\n"
            ],
            [
                "2 1\r\n100000000 200000000\r\n2 1 2\r\n",
                "300000000\r\n"
            ],
            [
                "12 1\r\n1 90 100 1000 10000 100000 1000000 10000000 100000000 100000010 100000020 100000021\r\n2 1 12\r\n",
                "100000022\r\n"
            ],
            [
                "11 1\r\n1 10 100 1000 10000 100000 1000000 10000000 100000000 100000000 100000001\r\n2 1 11\r\n",
                "100000002\r\n"
            ]
        ]
    }
]