[
    {
        "name": "Constellation",
        "description": "A star map in Berland is a checked field n \u00d7 m squares. In each square there\nis or there is not a star. The favourite constellation of all Berland's\nastronomers is the constellation of the Cross. This constellation can be\nformed by any 5 stars so, that for some integer x (radius of the\nconstellation) the following is true: the 2nd is on the same vertical line as\nthe 1st, but x squares up the 3rd is on the same vertical line as the 1st, but\nx squares down the 4th is on the same horizontal line as the 1st, but x\nsquares left the 5th is on the same horizontal line as the 1st, but x squares\nright Such constellations can be very numerous, that's why they are numbered\nwith integers from 1 on the following principle: when two constellations are\ncompared, the one with a smaller radius gets a smaller index; if their radii\nare equal \u2014 the one, whose central star if higher than the central star of the\nother one; if their central stars are at the same level \u2014 the one, whose\ncentral star is to the left of the central star of the other one. Your task is\nto find the constellation with index k by the given Berland's star map. Input\nThe first line contains three integers n, m and k (1 \u2264 n, m \u2264 300, 1 \u2264 k \u2264\n3\u00b710^7) \u2014 height and width of the map and index of the required constellation\nrespectively. The upper-left corner has coordinates (1, 1), and the lower-\nright \u2014 (n, m). Then there follow n lines, m characters each \u2014 description of\nthe map. j-th character in i-th line is \u00ab*\u00bb, if there is a star in the\ncorresponding square, and \u00ab.\u00bb if this square is empty. Output If the number of\nthe constellations is less than k, output -1. Otherwise output 5 lines, two\nintegers each \u2014 coordinates of the required constellation. Output the stars in\nthe following order: central, upper, lower, left, right. Examples Input 5 6 1\n....*. ...*** ....*. ..*... .***.. Output 2 5 1 5 3 5 2 4 2 6 Input 5 6 2\n....*. ...*** ....*. ..*... .***.. Output -1 Input 7 7 2 ...*... .......\n...*... *.***.* ...*... ....... ...*... Output 4 4 1 4 7 4 4 1 4 7\n\n",
        "cf_contest_id": 32,
        "cf_index": "D",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 6 1\r\n....*.\r\n...***\r\n....*.\r\n..*...\r\n.***..\r\n",
                "2 5\r\n1 5\r\n3 5\r\n2 4\r\n2 6\r\n"
            ],
            [
                "5 6 2\r\n....*.\r\n...***\r\n....*.\r\n..*...\r\n.***..\r\n",
                "-1\r\n"
            ],
            [
                "7 7 2\r\n...*...\r\n.......\r\n...*...\r\n*.***.*\r\n...*...\r\n.......\r\n...*...\r\n",
                "4 4\r\n1 4\r\n7 4\r\n4 1\r\n4 7\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 5 3\r\n*.***\r\n.****\r\n..***\r\n*.***\r\n.**.*\r\n",
                "3 4\r\n2 4\r\n4 4\r\n3 3\r\n3 5\r\n"
            ],
            [
                "10 10 59\r\n**.*******\r\n********.*\r\n***.******\r\n**.*******\r\n*******.**\r\n**********\r\n**.**.****\r\n.*********\r\n*****.****\r\n*********.\r\n",
                "6 5\r\n3 5\r\n9 5\r\n6 2\r\n6 8\r\n"
            ],
            [
                "10 10 40\r\n**********\r\n**********\r\n**********\r\n**********\r\n**********\r\n**********\r\n**********\r\n**********\r\n**********\r\n**********\r\n",
                "6 9\r\n5 9\r\n7 9\r\n6 8\r\n6 10\r\n"
            ]
        ]
    }
]