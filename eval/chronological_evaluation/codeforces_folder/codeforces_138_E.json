[
    {
        "name": "Hellish Constraints",
        "description": "Katya recently started to invent programming tasks and prepare her own\ncontests. What she does not like is boring and simple constraints. Katya is\nfed up with all those \"N does not exceed a thousand\" and \"the sum of ai does\nnot exceed a million\" and she decided to come up with something a little more\ncomplicated. The last problem written by Katya deals with strings. The input\nis a string of small Latin letters. To make the statement longer and strike\nterror into the people who will solve the contest, Katya came up with the\nfollowing set of k restrictions of the same type (characters in restrictions\ncan be repeated and some restrictions may contradict each other): The number\nof characters c1 in a string is not less than l1 and not more than r1. ... The\nnumber of characters ci in a string is not less than li and not more than ri.\n... The number of characters ck in a string is not less than lk and not more\nthan rk. However, having decided that it is too simple and obvious, Katya\nadded the following condition: a string meets no less than L and not more than\nR constraints from the above given list. Katya does not like to compose\ndifficult and mean tests, so she just took a big string s and wants to add to\nthe tests all its substrings that meet the constraints. However, Katya got\nlost in her conditions and asked you to count the number of substrings of the\nstring s that meet the conditions (each occurrence of the substring is counted\nseparately). Input The first line contains a non-empty string s, consisting of\nsmall Latin letters. The length of the string s does not exceed 10^5. The\nsecond line contains three space-separated integers k, L and R (0 \u2264 L \u2264 R \u2264 k\n\u2264 500). Next k lines contain Katya's constrictions in the following form \"ci\nli ri\". All letters ci are small Latin letters, li and ri are integers (0 \u2264 li\n\u2264 ri \u2264 |s|, where |s| is the length of string s). Letters ci are not\nnecessarily different. Output Print a single number \u2014 the number of substrings\nthat meet the constrictions. Please do not use the \nor write 64-bit integers in \u0421++. It is preferred to use the cout stream or the\n\ncodeforces 2 1 1 o 1 2 o 1 2 Output 0 Note In the first test we should count\nthe number of strings that do not contain characters \"e\" and \"o\". All such\nstrings are as follows (in the order of occurrence in the initial string from\nthe left to the right): \"c\", \"d\"', \"f\", \"r\", \"rc\", \"c\", \"s\". In the second\ntest we cannot achieve fulfilling exactly one of the two identical\nconstrictions, so the answer is 0.\n\n",
        "cf_contest_id": 138,
        "cf_index": "E",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dp",
            "two pointers"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "codeforces\r\n2 0 0\r\no 1 2\r\ne 1 2\r\n",
                "7\r\n"
            ],
            [
                "codeforces\r\n2 1 1\r\no 1 2\r\no 1 2\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "bcbbb\r\n3 1 2\r\na 0 1\r\nc 0 2\r\nc 0 0\r\n",
                "8\r\n"
            ],
            [
                "aaaaaaa\r\n1 0 0\r\na 4 5\r\n",
                "21\r\n"
            ],
            [
                "aaaaaabbba\r\n5 3 4\r\nb 0 5\r\nb 1 6\r\ng 4 9\r\na 1 7\r\nb 2 2\r\n",
                "29\r\n"
            ],
            [
                "decddddd\r\n8 2 3\r\ne 0 1\r\ne 0 3\r\nc 0 1\r\nc 0 0\r\nc 0 0\r\na 0 0\r\nc 1 1\r\nd 0 4\r\n",
                "0\r\n"
            ],
            [
                "bbaabbbaba\r\n2 1 1\r\nb 4 5\r\na 2 6\r\n",
                "17\r\n"
            ],
            [
                "gfbggdddicfgihgbfigiicajc\r\n0 0 0\r\n",
                "325\r\n"
            ],
            [
                "mobilcgbgjhjcenmicomdfahbbdhgjljobckhkjfiomaiacbmi\r\n50 10 35\r\nl 0 0\r\nl 1 2\r\ne 0 2\r\nn 1 3\r\nh 0 2\r\nj 1 2\r\ni 2 6\r\nr 14 19\r\nm 4 11\r\na 0 6\r\nd 1 1\r\nm 2 9\r\nn 1 1\r\nn 1 1\r\nn 0 1\r\ne 0 0\r\nd 0 1\r\nj 2 4\r\nb 4 5\r\nt 27 34\r\na 1 7\r\nf 1 4\r\ni 0 2\r\nl 0 5\r\nd 0 3\r\nb 2 6\r\nj 1 4\r\nf 0 5\r\no 2 7\r\nj 0 10\r\nc 2 3\r\no 1 6\r\ng 1 5\r\nl 1 1\r\ng 0 3\r\ni 2 4\r\nc 4 11\r\nd 0 4\r\ni 0 4\r\nb 3 4\r\nd 1 5\r\nv 18 31\r\nl 2 4\r\nm 2 11\r\nl 0 0\r\nh 1 2\r\nb 2 8\r\ne 1 1\r\nk 0 4\r\nm 2 9\r\n",
                "1200\r\n"
            ],
            [
                "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n1 1 1\r\na 14 29\r\n",
                "1256\r\n"
            ],
            [
                "aaaaaaaaaaaaaaaaaaaa\r\n10 3 7\r\na 12 19\r\na 7 18\r\na 12 19\r\na 3 5\r\na 6 17\r\na 7 17\r\na 3 17\r\na 3 8\r\nm 2 10\r\na 3 11\r\n",
                "168\r\n"
            ],
            [
                "hchiaafdcgcjifhhcjihcfbjfhabbcbec\r\n50 10 40\r\ny 1 19\r\ng 0 2\r\nd 0 1\r\nh 2 8\r\nj 0 3\r\ni 1 2\r\ng 22 30\r\ni 1 3\r\nf 0 3\r\ne 1 2\r\ne 0 2\r\ne 0 1\r\nc 3 7\r\nd 0 0\r\nf 2 4\r\nf 1 3\r\nc 5 9\r\nh 0 5\r\nh 2 3\r\ns 16 28\r\ni 1 4\r\nj 1 1\r\nb 7 11\r\nj 0 1\r\ne 0 3\r\nf 2 8\r\nj 1 3\r\nd 1 1\r\nc 0 2\r\nc 1 2\r\na 2 3\r\nf 9 16\r\nc 2 3\r\nc 5 9\r\nc 0 3\r\nh 1 4\r\ni 0 1\r\nh 0 1\r\nj 0 3\r\nd 1 2\r\nr 5 10\r\na 0 2\r\nh 1 12\r\nh 3 6\r\ng 0 1\r\nh 5 13\r\nj 2 3\r\ng 0 2\r\ne 1 2\r\na 0 3\r\n",
                "561\r\n"
            ],
            [
                "iqzcsptwcaluahghbjyijukoipyacvscwalyteahgkbbugrlipdqeowrycmnsyrjerinixpzczircteozgrxqzwtyhwqyujssnj\r\n20 0 20\r\nw 5 5\r\np 0 4\r\ny 5 11\r\nz 3 56\r\nt 3 9\r\ns 5 10\r\nv 0 1\r\ne 3 5\r\nc 6 15\r\nq 2 7\r\nb 0 1\r\ne 2 4\r\nm 1 3\r\ns 5 9\r\nl 0 3\r\nh 2 8\r\nl 1 4\r\nw 2 4\r\ni 5 8\r\nw 1 5\r\n",
                "4950\r\n"
            ],
            [
                "baaaababaabbbbaaabaabaababbbabaaababbbbbbbbbaabbababaaabbbabbbaababbaababbabababaabaabaabaabaaaaababbaaaababababbbaaabababbbaabbabbbbababbaaababbbbbbb\r\n1 1 1\r\na 36 52\r\n",
                "2341\r\n"
            ]
        ]
    }
]