[
    {
        "name": "Beaver's Calculator 1.0",
        "description": "The Smart Beaver from ABBYY has once again surprised us! He has developed a\nnew calculating device, which he called the \"Beaver's Calculator 1.0\". It is\nvery peculiar and it is planned to be used in a variety of scientific\nproblems. To test it, the Smart Beaver invited n scientists, numbered from 1\nto n. The i-th scientist brought ki calculating problems for the device\ndeveloped by the Smart Beaver from ABBYY. The problems of the i-th scientist\nare numbered from 1 to ki, and they must be calculated sequentially in the\ndescribed order, since calculating each problem heavily depends on the results\nof calculating of the previous ones. Each problem of each of the n scientists\nis described by one integer ai, j, where i (1 \u2264 i \u2264 n) is the number of the\nscientist, j (1 \u2264 j \u2264 ki) is the number of the problem, and ai, j is the\nnumber of resource units the calculating device needs to solve this problem.\nThe calculating device that is developed by the Smart Beaver is pretty\nunusual. It solves problems sequentially, one after another. After some\nproblem is solved and before the next one is considered, the calculating\ndevice allocates or frees resources. The most expensive operation for the\ncalculating device is freeing resources, which works much slower than\nallocating them. It is therefore desirable that each next problem for the\ncalculating device requires no less resources than the previous one. You are\ngiven the information about the problems the scientists offered for the\ntesting. You need to arrange these problems in such an order that the number\nof adjacent \"bad\" pairs of problems in this list is minimum possible. We will\ncall two consecutive problems in this list a \"bad pair\" if the problem that is\nperformed first requires more resources than the one that goes after it. Do\nnot forget that the problems of the same scientist must be solved in a fixed\norder. Input The first line contains integer n \u2014 the number of scientists. To\nlessen the size of the input, each of the next n lines contains five integers\nki, ai, 1, xi, yi, mi (0 \u2264 ai, 1 < mi \u2264 10^9, 1 \u2264 xi, yi \u2264 10^9) \u2014 the number\nof problems of the i-th scientist, the resources the first problem requires\nand three parameters that generate the subsequent values of ai, j. For all j\nfrom 2 to ki, inclusive, you should calculate value ai, j by formula ai, j =\n(ai, j - 1 * xi + yi) mod mi, where a mod b is the operation of taking the\nremainder of division of number a by number b. To get the full points for the\nfirst group of tests it is sufficient to solve the problem with n = 2, 1 \u2264 ki\n\u2264 2000. To get the full points for the second group of tests it is sufficient\nto solve the problem with n = 2, 1 \u2264 ki \u2264 200000. To get the full points for\nthe third group of tests it is sufficient to solve the problem with 1 \u2264 n \u2264\n5000, 1 \u2264 ki \u2264 5000. Output On the first line print a single number \u2014 the\nnumber of \"bad\" pairs in the optimal order. If the total number of problems\ndoes not exceed 200000, also print lines \u2014 the optimal order of the problems.\nOn each of these lines print two integers separated by a single space \u2014 the\nrequired number of resources for the problem and the number of the scientist\nwho offered this problem, respectively. The scientists are numbered from 1 to\nn in the order of input. Examples Input 2 2 1 1 1 10 2 3 1 1 10 Output 0 1 1 2\n1 3 2 4 2 Input 2 3 10 2 3 1000 3 100 1 999 1000 Output 2 10 1 23 1 49 1 100 2\n99 2 98 2 Note In the first sample n = 2, k1 = 2, a1, 1 = 1, a1, 2 = 2, k2 =\n2, a2, 1 = 3, a2, 2 = 4. We've got two scientists, each of them has two\ncalculating problems. The problems of the first scientist require 1 and 2\nresource units, the problems of the second one require 3 and 4 resource units.\nLet's list all possible variants of the calculating order (each problem is\ncharacterized only by the number of resource units it requires): (1, 2, 3, 4),\n(1, 3, 2, 4), (3, 1, 2, 4), (1, 3, 4, 2), (3, 4, 1, 2), (3, 1, 4, 2). Sequence\nof problems (1, 3, 2, 4) has one \"bad\" pair (3 and 2), (3, 1, 4, 2) has two\n\"bad\" pairs (3 and 1, 4 and 2), and (1, 2, 3, 4) has no \"bad\" pairs.\n\n",
        "cf_contest_id": 207,
        "cf_index": "A3",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n2 1 1 1 10\r\n2 3 1 1 10\r\n",
                "0\r\n1 1\r\n2 1\r\n3 2\r\n4 2\r\n"
            ],
            [
                "2\r\n3 10 2 3 1000\r\n3 100 1 999 1000\r\n",
                "2\r\n10 1\r\n23 1\r\n49 1\r\n100 2\r\n99 2\r\n98 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 123 999 123 19999\r\n1 456 1925 91285 98259128\r\n",
                "0\r\n123 1\r\n456 2\r\n"
            ],
            [
                "2\r\n4 1 1 2 4\r\n3 2 1 2 7\r\n",
                "1\r\n1 1\r\n2 2\r\n3 1\r\n4 2\r\n6 2\r\n1 1\r\n3 1\r\n"
            ],
            [
                "1\r\n1 104870957 7431443 792191329 145116832\r\n",
                "0\r\n104870957 1\r\n"
            ]
        ]
    }
]