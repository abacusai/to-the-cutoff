[
    {
        "name": "Binary Protocol",
        "description": "Polycarp has just invented a new binary protocol for data transmission. He is\nencoding positive integer decimal number to binary string using following\nalgorithm: Each digit is represented with number of '1' characters equal to\nthe value of that digit (for 0 it is zero ones). Digits are written one by one\nin order corresponding to number and separated by single '0' character. Though\nPolycarp learnt how to encode the numbers, he has no idea how to decode them\nback. Help him calculate the decoded number. Input The first line contains one\ninteger number n (1 \u2264 n \u2264 89) \u2014 length of the string s. The second line\ncontains string s \u2014 sequence of '0' and '1' characters, number in its encoded\nformat. It is guaranteed that the number corresponding to the string is\npositive and doesn't exceed 10^9. The string always starts with '1'. Output\nPrint the decoded number. Examples Input 3 111 Output 3 Input 9 110011101\nOutput 2031\n\n",
        "cf_contest_id": 825,
        "cf_index": "A",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n111\r\n",
                "3\r\n"
            ],
            [
                "9\r\n110011101\r\n",
                "2031\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "3\r\n100\r\n",
                "100\r\n"
            ],
            [
                "5\r\n10001\r\n",
                "1001\r\n"
            ],
            [
                "14\r\n11001100011000\r\n",
                "202002000\r\n"
            ],
            [
                "31\r\n1000011111111100011110111111111\r\n",
                "100090049\r\n"
            ],
            [
                "53\r\n10110111011110111110111111011111110111111110111111111\r\n",
                "123456789\r\n"
            ],
            [
                "89\r\n11111111101111111110111111111011111111101111111110111111111011111111101111111110111111111\r\n",
                "999999999\r\n"
            ],
            [
                "10\r\n1000000000\r\n",
                "1000000000\r\n"
            ],
            [
                "2\r\n10\r\n",
                "10\r\n"
            ],
            [
                "4\r\n1110\r\n",
                "30\r\n"
            ],
            [
                "8\r\n10101010\r\n",
                "11110\r\n"
            ]
        ]
    }
]