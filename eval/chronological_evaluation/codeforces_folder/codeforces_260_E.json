[
    {
        "name": "Dividing Kingdom",
        "description": "A country called Flatland is an infinite two-dimensional plane. Flatland has n\ncities, each of them is a point on the plane. Flatland is ruled by king Circle\nIV. Circle IV has 9 sons. He wants to give each of his sons part of Flatland\nto rule. For that, he wants to draw four distinct straight lines, such that\ntwo of them are parallel to the Ox axis, and two others are parallel to the Oy\naxis. At that, no straight line can go through any city. Thus, Flatland will\nbe divided into 9 parts, and each son will be given exactly one of these\nparts. Circle IV thought a little, evaluated his sons' obedience and decided\nthat the i-th son should get the part of Flatland that has exactly ai cities.\nHelp Circle find such four straight lines that if we divide Flatland into 9\nparts by these lines, the resulting parts can be given to the sons so that son\nnumber i got the part of Flatland which contains ai cities. Input The first\nline contains integer n (9 \u2264 n \u2264 10^5) \u2014 the number of cities in Flatland.\nNext n lines each contain two space-separated integers: xi, yi ( - 10^9 \u2264 xi,\nyi \u2264 10^9) \u2014 the coordinates of the i-th city. No two cities are located at\nthe same point. The last line contains nine space-separated integers: . Output\nIf there is no solution, print a single integer -1. Otherwise, print in the\nfirst line two distinct real space-separated numbers: x1, x2 \u2014 the abscissas\nof the straight lines that are parallel to the Oy axis. And in the second line\nprint two distinct real space-separated numbers: y1, y2 \u2014 the ordinates of the\nstraight lines, parallel to the Ox. If there are multiple solutions, print any\nof them. When the answer is being checked, a city is considered to lie on a\nstraight line, if the distance between the city and the line doesn't exceed\n10^-6. Two straight lines are considered the same if the distance between them\ndoesn't exceed 10^-6. Examples Input 9 1 1 1 2 1 3 2 1 2 2 2 3 3 1 3 2 3 3 1 1\n1 1 1 1 1 1 1 Output 1.5000000000 2.5000000000 1.5000000000 2.5000000000 Input\n15 4 4 -1 -3 1 5 3 -4 -4 4 -1 1 3 -3 -4 -5 -3 3 3 2 4 1 -4 2 -2 -5 -3 4 -1 4 2\n1 2 1 2 1 3 2 1 Output -3.5000000000 2.0000000000 3.5000000000 -1.0000000000\nInput 10 -2 10 6 0 -16 -6 -4 13 -4 -2 -17 -10 9 15 18 16 -5 2 10 -5 2 1 1 1 1\n1 1 1 1 Output -1 Note The solution for the first sample test is shown below:\nThe solution for the second sample test is shown below: There is no solution\nfor the third sample test.\n\n",
        "cf_contest_id": 260,
        "cf_index": "E",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "data structures"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "9\r\n1 1\r\n1 2\r\n1 3\r\n2 1\r\n2 2\r\n2 3\r\n3 1\r\n3 2\r\n3 3\r\n1 1 1 1 1 1 1 1 1\r\n",
                "1.50000000 2.50000000\r\n1.50000000 2.50000000"
            ],
            [
                "15\r\n4 4\r\n-1 -3\r\n1 5\r\n3 -4\r\n-4 4\r\n-1 1\r\n3 -3\r\n-4 -5\r\n-3 3\r\n3 2\r\n4 1\r\n-4 2\r\n-2 -5\r\n-3 4\r\n-1 4\r\n2 1 2 1 2 1 3 2 1\r\n",
                "-1.50000000 1.50000000\r\n-2.50000000 2.50000000"
            ],
            [
                "10\r\n-2 10\r\n6 0\r\n-16 -6\r\n-4 13\r\n-4 -2\r\n-17 -10\r\n9 15\r\n18 16\r\n-5 2\r\n10 -5\r\n2 1 1 1 1 1 1 1 1\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n-15 -2\r\n-18 -12\r\n9 -6\r\n8 -12\r\n4 -4\r\n8 19\r\n-5 -15\r\n6 2\r\n-8 -6\r\n2 -18\r\n1 1 1 1 2 1 1 1 1\r\n",
                "-7.50000000 6.50000000\r\n-11.50000000 -3.50000000"
            ],
            [
                "10\r\n-15 19\r\n19 -7\r\n-11 -4\r\n-15 -16\r\n-12 4\r\n-3 1\r\n15 4\r\n7 -6\r\n19 -14\r\n-3 -17\r\n1 1 1 1 1 1 1 1 2\r\n",
                "-10.50000000 7.50000000\r\n-13.50000000 -3.50000000"
            ],
            [
                "10\r\n-7 16\r\n19 12\r\n-19 -11\r\n-17 10\r\n-9 2\r\n15 -7\r\n-11 1\r\n9 -9\r\n-7 3\r\n13 -15\r\n1 1 1 1 1 1 2 1 1\r\n",
                "-10.50000000 9.50000000\r\n-8.50000000 2.50000000"
            ],
            [
                "10\r\n19 8\r\n17 -4\r\n11 -15\r\n-3 -15\r\n15 19\r\n-6 12\r\n-13 9\r\n-6 0\r\n9 18\r\n9 7\r\n2 1 1 1 1 1 1 1 1\r\n",
                "-2.50000000 11.50000000\r\n0.50000000 9.50000000"
            ],
            [
                "9\r\n15 15\r\n-13 -8\r\n3 -15\r\n11 7\r\n11 4\r\n16 -19\r\n17 4\r\n-9 14\r\n-17 4\r\n1 1 1 1 1 1 1 1 1\r\n",
                "-8.50000000 11.50000000\r\n-7.50000000 4.50000000"
            ],
            [
                "9\r\n-13 -10\r\n-18 17\r\n-13 -3\r\n15 16\r\n-4 -19\r\n-7 18\r\n-4 7\r\n13 7\r\n14 -12\r\n1 1 1 1 1 1 1 1 1\r\n",
                "-12.50000000 -3.50000000\r\n-9.50000000 7.50000000"
            ],
            [
                "9\r\n15 20\r\n19 -16\r\n-18 2\r\n1 12\r\n-16 11\r\n-16 -13\r\n-3 1\r\n12 -6\r\n1 -20\r\n1 1 1 1 1 1 1 1 1\r\n",
                "-15.50000000 1.50000000\r\n-12.50000000 2.50000000"
            ],
            [
                "9\r\n-20 15\r\n12 9\r\n-16 -10\r\n-8 16\r\n-12 -9\r\n19 -10\r\n15 8\r\n-9 3\r\n-16 6\r\n1 1 1 1 1 1 1 1 1\r\n",
                "-15.50000000 -7.50000000\r\n-8.50000000 8.50000000"
            ]
        ]
    }
]