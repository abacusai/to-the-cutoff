[
    {
        "name": "Candy Box (easy version)",
        "description": "This problem is actually a subproblem of problem G from the same contest.\nThere are \n    n\n candies in a candy box. The type of the \n    i\n-th candy is\n\n    a_i\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n). You have to prepare a gift using some\nof these candies with the following restriction: the numbers of candies of\neach type presented in a gift should be all distinct (i. e. for example, a\ngift having two candies of type \n    1\n and two candies of type \n    2\n is\nbad). It is possible that multiple types of candies are completely absent from\nthe gift. It is also possible that not all candies of some types will be taken\nto a gift. Your task is to find out the maximum possible size of the single\ngift you can prepare using the candies you have. You have to answer \n    q\n\nindependent queries. If you are Python programmer, consider using PyPy instead\nof Python when you submit your code. Input The first line of the input\ncontains one integer \n    q\n (\n    1 \n    \u2264 q \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the\nnumber of queries. Each query is represented by two lines. The first line of\neach query contains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n)\n\u2014 the number of candies. The second line of each query contains \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n), where\n\n    a_i\n is the type of the \n    i\n-th candy in the box. It is guaranteed\nthat the sum of \n    n\n over all queries does not exceed \n    2 \n    \u00b7 10^5\n.\nOutput For each query print one integer \u2014 the maximum possible size of the\nsingle gift you can compose using candies you got in this query with the\nrestriction described in the problem statement. Example Input 3 8 1 4 8 4 5 6\n3 8 16 2 1 3 3 4 3 4 4 1 3 2 2 2 4 1 1 9 2 2 4 4 4 7 7 7 7 Output 3 10 9 Note\nIn the first query, you can prepare a gift with two candies of type \n    8\n\nand one candy of type \n    5\n, totalling to \n    3\n candies. Note that this is\nnot the only possible solution \u2014 taking two candies of type \n    4\n and one\ncandy of type \n    6\n is also valid.\n\n",
        "cf_contest_id": 1183,
        "cf_index": "D",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n8\r\n1 4 8 4 5 6 3 8\r\n16\r\n2 1 3 3 4 3 4 4 1 3 2 2 2 4 1 1\r\n9\r\n2 2 4 4 4 7 7 7 7\r\n",
                "3\r\n10\r\n9\r\n"
            ]
        ],
        "private_cases": []
    }
]