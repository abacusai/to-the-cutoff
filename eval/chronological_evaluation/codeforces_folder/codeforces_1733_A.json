[
    {
        "name": "Consecutive Sum",
        "description": "You are given an array \n    a\n with \n    n\n integers. You can perform the\nfollowing operation at most \n    k\n times: Choose two indices \n    i\n and\n\n    j\n, in which \n    i \n     \n    \n      k = j \n     \n    \n      k\n (\n    1 \n    \u2264\n    i < j \n    \u2264 n\n). Swap \n    a_i\n and \n    a_j\n. After performing all\noperations, you have to select \n    k\n consecutive elements, and the sum of\nthe \n    k\n elements becomes your score. Find the maximum score you can get.\nHere \n    x \n     y\n denotes the remainder from dividing \n    x\n by \n    y\n.\nInput The first line contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 600\n)\n\u2014 the number of test cases. Each test case consists of two lines. The first\nline of each test case contains two integers \n    n\n and \n    k\n (\n    1 \n    \u2264 k\n    \n    \u2264 n \n    \u2264 100\n) \u2014 the length of the array and the number in the\nstatement above. The second line of each test case contains \n    n\n integers\n\n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the array\nitself. Output For each test case, print the maximum score you can get, one\nper line. Example Input 5 3 2 5 6 0 1 1 7 5 3 7 0 4 0 4 4 2 2 7 3 4 3 3\n1000000000 1000000000 999999997 Output 11 7 15 10 2999999997 Note In the first\ntest case, we can get a score of \n    11\n if we select \n    a_1, a_2\n without\nperforming any operations. In the third test case, we can get a score of\n\n    15\n if we first swap \n    a_1\n with \n    a_4\n and then select \n    a_3,\n    a_4, a_5\n.\n\n",
        "cf_contest_id": 1733,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3 2\r\n5 6 0\r\n1 1\r\n7\r\n5 3\r\n7 0 4 0 4\r\n4 2\r\n2 7 3 4\r\n3 3\r\n1000000000 1000000000 999999997\r\n",
                "11\r\n7\r\n15\r\n10\r\n2999999997\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 1\r\n0\r\n",
                "0\r\n"
            ]
        ]
    }
]