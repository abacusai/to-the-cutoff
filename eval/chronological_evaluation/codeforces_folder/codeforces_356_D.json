[
    {
        "name": "Bags and Coins",
        "description": "When you were a child you must have been told a puzzle of bags and coins.\nAnyway, here's one of its versions: A horse has three bags. The first bag has\none coin, the second bag has one coin and the third bag has three coins. In\ntotal, the horse has three coins in the bags. How is that possible? The answer\nis quite simple. The third bag contains a coin and two other bags. This\nproblem is a generalization of the childhood puzzle. You have n bags. You know\nthat the first bag contains a1 coins, the second bag contains a2 coins, ...,\nthe n-th bag contains an coins. In total, there are s coins. Find the way to\narrange the bags and coins so that they match the described scenario or else\nstate that it is impossible to do. Input The first line contains two integers\nn and s (1 \u2264 n, s \u2264 70000) \u2014 the number of bags and the total number of coins.\nThe next line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 70000), where ai\nshows the number of coins in the i-th bag. Output If the answer doesn't exist,\nprint -1. Otherwise, print n lines, on the i-th line print the contents of the\ni-th bag. The first number in the line, ci (0 \u2264 ci \u2264 ai), must represent the\nnumber of coins lying directly in the i-th bag (the coins in the bags that are\nin the i-th bag are not taken into consideration). The second number in the\nline, ki (0 \u2264 ki < n) must represent the number of bags that lie directly in\nthe i-th bag (the bags that are inside the bags lying in the i-th bag are not\ntaken into consideration). Next, the line must contain ki integers \u2014 the\nnumbers of the bags that are lying directly in the i-th bag. The total number\nof coins in the solution must equal s. If we count the total number of coins\nthe i-th bag in the solution has, we should get ai. No bag can directly lie in\nmore than one bag. The bags can be nested in more than one level (see the\nsecond test case). If there are multiple correct answers, you can print any of\nthem. Examples Input 3 3 1 3 1 Output 1 0 1 2 3 1 1 0 Input 3 3 1 3 1 Output 1\n0 2 1 3 0 1 1 Input 1 2 1 Output -1 Input 8 10 2 7 3 4 1 3 1 2 Output 2 0 1 2\n1 4 0 2 7 8 0 2 5 6 1 0 3 0 1 0 2 0 Note The pictures below show two possible\nways to solve one test case from the statement. The left picture corresponds\nto the first test case, the right picture corresponds to the second one.\n\n",
        "cf_contest_id": 356,
        "cf_index": "D",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "constructive algorithms",
            "dp",
            "greedy"
        ],
        "time_limit_seconds": 2.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\n1 3 1\r\n",
                "0 1 3\r\n2 1 1\r\n1 0\r\n"
            ],
            [
                "3 3\r\n1 3 1\r\n",
                "0 1 3\r\n2 1 1\r\n1 0\r\n"
            ],
            [
                "1 2\r\n1\r\n",
                "-1\r\n"
            ],
            [
                "8 10\r\n2 7 3 4 1 3 1 2\r\n",
                "0 1 8\r\n3 1 4\r\n3 0\r\n1 1 6\r\n0 1 7\r\n1 1 1\r\n1 0\r\n1 1 5\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n41\r\n",
                "-1\r\n"
            ],
            [
                "20 30\r\n16 6 13 36 35 15 17 4 33 3 32 28 9 34 16 5 17 22 9 27\r\n",
                "-1\r\n"
            ],
            [
                "20 30\r\n13 29 2 6 2 19 24 2 16 20 15 2 25 18 13 12 11 4 27 22\r\n",
                "-1\r\n"
            ],
            [
                "1 1\r\n1\r\n",
                "1 0\r\n"
            ],
            [
                "1 1\r\n1\r\n",
                "1 0\r\n"
            ],
            [
                "1 2\r\n1\r\n",
                "-1\r\n"
            ],
            [
                "1 2\r\n1\r\n",
                "-1\r\n"
            ],
            [
                "1 3\r\n1\r\n",
                "-1\r\n"
            ],
            [
                "1 3\r\n2\r\n",
                "-1\r\n"
            ],
            [
                "2 1\r\n1 1\r\n",
                "0 1 2\r\n1 0\r\n"
            ],
            [
                "2 1\r\n2 2\r\n",
                "-1\r\n"
            ],
            [
                "2 2\r\n1 1\r\n",
                "1 0\r\n1 0\r\n"
            ],
            [
                "2 2\r\n1 1\r\n",
                "1 0\r\n1 0\r\n"
            ],
            [
                "2 3\r\n1 1\r\n",
                "-1\r\n"
            ],
            [
                "2 3\r\n2 2\r\n",
                "-1\r\n"
            ],
            [
                "3 1\r\n1 1 1\r\n",
                "0 1 2\r\n0 1 3\r\n1 0\r\n"
            ],
            [
                "3 1\r\n2 1 1\r\n",
                "-1\r\n"
            ],
            [
                "3 2\r\n1 1 1\r\n",
                "0 1 3\r\n1 0\r\n1 0\r\n"
            ],
            [
                "3 2\r\n1 2 2\r\n",
                "1 0\r\n0 1 3\r\n1 1 1\r\n"
            ],
            [
                "3 3\r\n1 1 1\r\n",
                "1 0\r\n1 0\r\n1 0\r\n"
            ],
            [
                "3 3\r\n2 1 1\r\n",
                "1 1 3\r\n1 0\r\n1 0\r\n"
            ]
        ]
    }
]