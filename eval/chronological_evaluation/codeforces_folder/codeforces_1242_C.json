[
    {
        "name": "Sum Balance",
        "description": "Ujan has a lot of numbers in his boxes. He likes order and balance, so he\ndecided to reorder the numbers. There are \n    k\n boxes numbered from \n    1\n\nto \n    k\n. The \n    i\n-th box contains \n    n_i\n integer numbers. The\nintegers can be negative. All of the integers are distinct. Ujan is lazy, so\nhe will do the following reordering of the numbers exactly once. He will pick\na single integer from each of the boxes, \n    k\n integers in total. Then he\nwill insert the chosen numbers \u2014 one integer in each of the boxes, so that the\nnumber of integers in each box is the same as in the beginning. Note that he\nmay also insert an integer he picked from a box back into the same box. Ujan\nwill be happy if the sum of the integers in each box is the same. Can he\nachieve this and make the boxes perfectly balanced, like all things should be?\nInput The first line contains a single integer \n    k\n (\n    1 \n    \u2264 k \n    \u2264\n    15\n), the number of boxes. The \n    i\n-th of the next \n    k\n lines first\ncontains a single integer \n    n_i\n (\n    1 \n    \u2264 n_i \n    \u2264 5\n     000\n), the\nnumber of integers in box \n    i\n. Then the same line contains \n    n_i\n\nintegers \n    a_i,1, \n    \u2026, a_i,n_i\n (\n    |a_i,j| \n    \u2264 10^9\n), the\nintegers in the \n    i\n-th box. It is guaranteed that all \n    a_i,j\n are\ndistinct. Output If Ujan cannot achieve his goal, output \"No\" in a single\nline. Otherwise in the first line output \"Yes\", and then output \n    k\n lines.\nThe \n    i\n-th of these lines should contain two integers \n    c_i\n and\n\n    p_i\n. This means that Ujan should pick the integer \n    c_i\n from the\n\n    i\n-th box and place it in the \n    p_i\n-th box afterwards. If there are\nmultiple solutions, output any of those. You can print each letter in any case\n(upper or lower). Examples Input 4 3 1 7 4 2 3 2 2 8 5 1 10 Output Yes 7 2 2 3\n5 1 10 4 Input 2 2 3 -2 2 -1 5 Output No Input 2 2 -10 10 2 0 -20 Output Yes\n-10 2 -20 1 Note In the first sample, Ujan can put the number \n    7\n in the\n\n    2\nnd box, the number \n    2\n in the \n    3\nrd box, the number \n    5\n in\nthe \n    1\nst box and keep the number \n    10\n in the same \n    4\nth box. Then\nthe boxes will contain numbers \n    1,5,4\n, \n    3, 7\n,\n\n    8,2\n and \n    10\n. The sum in each box then is equal\nto \n    10\n. In the second sample, it is not possible to pick and redistribute\nthe numbers in the required way. In the third sample, one can swap the numbers\n\n    -20\n and \n    -10\n, making the sum in each box equal to \n    -10\n.\n\n",
        "cf_contest_id": 1242,
        "cf_index": "C",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "dfs and similar",
            "dp",
            "graphs"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3 1 7 4\r\n2 3 2\r\n2 8 5\r\n1 10\r\n",
                "Yes\n7 2\n2 3\n5 1\n10 4\n"
            ],
            [
                "2\r\n2 3 -2\r\n2 -1 5\r\n",
                "No"
            ],
            [
                "2\r\n2 -10 10\r\n2 0 -20\r\n",
                "Yes\n-10 2\n-20 1\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 0\r\n",
                "Yes\n0 1\n"
            ],
            [
                "3\r\n1 20\r\n2 30 40\r\n3 50 60 80\r\n",
                "No"
            ],
            [
                "3\r\n3 1 3 100\r\n2 4 104\r\n2 2 102\r\n",
                "No"
            ],
            [
                "4\r\n3 80 1 10\r\n3 52 19 24\r\n3 27 46 29\r\n3 74 13 25\r\n",
                "No"
            ],
            [
                "2\r\n5 -1000000000 999999999 -999999998 999999997 0\r\n5 1000000000 -999999999 999999998 -999999997 4\r\n",
                "Yes\n0 2\n4 1\n"
            ],
            [
                "5\r\n10 -251 650 475 -114 364 -75754 -982 -532 -151 -484\r\n10 -623 -132 -317561 -438 20 -275 -323 -530089 -311 -587\r\n10 450900 -519 903 -401 -789 -606529 277 -267 -682 -161\r\n10 -246 873 -641 838 719 234 789 -74 -287288 -772972\r\n10 186 741 -927 -866 -855 578 -1057019 202 162962 -458\r\n",
                "Yes\n650 3\n-530089 1\n450900 5\n-287288 2\n162962 4\n"
            ],
            [
                "2\r\n2 1 2\r\n10 0 1000000000 999999999 999999998 999999997 999999996 999999995 999999994 999999993 589934621\r\n",
                "No"
            ]
        ]
    }
]