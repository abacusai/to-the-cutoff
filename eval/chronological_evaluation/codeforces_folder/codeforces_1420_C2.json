[
    {
        "name": "Pok\u00e9mon Army (hard version)",
        "description": "This is the hard version of the problem. The difference between the versions\nis that the easy version has no swap operations. You can make hacks only if\nall versions of the problem are solved. Pikachu is a cute and friendly pok\u00e9mon\nliving in the wild pikachu herd. But it has become known recently that\ninfamous team R wanted to steal all these pok\u00e9mon! Pok\u00e9mon trainer Andrew\ndecided to help Pikachu to build a pok\u00e9mon army to resist. First, Andrew\ncounted all the pok\u00e9mon \u2014 there were exactly \n    n\n pikachu. The strength of\nthe \n    i\n-th pok\u00e9mon is equal to \n    a_i\n, and all these numbers are\ndistinct. As an army, Andrew can choose any non-empty subsequence of pokemons.\nIn other words, Andrew chooses some array \n    b\n from \n    k\n indices such\nthat \n    1 \n    \u2264 b_1 < b_2 < \n    \u2026 < b_k \n    \u2264 n\n, and his army will\nconsist of pok\u00e9mons with forces \n    a_b_1, a_b_2, \n    \u2026, a_b_k\n. The\nstrength of the army is equal to the alternating sum of elements of the\nsubsequence; that is, \n    a_b_1 - a_b_2 + a_b_3 - a_b_4 + \n    \u2026\n.\nAndrew is experimenting with pok\u00e9mon order. He performs \n    q\n operations. In\n\n    i\n-th operation Andrew swaps \n    l_i\n-th and \n    r_i\n-th pok\u00e9mon.\nAndrew wants to know the maximal stregth of the army he can achieve with the\ninitial pok\u00e9mon placement. He also needs to know the maximal strength after\neach operation. Help Andrew and the pok\u00e9mon, or team R will realize their\ntricky plan! Input Each test contains multiple test cases. The first line\ncontains one positive integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^3\n) denoting\nthe number of test cases. Description of the test cases follows. The first\nline of each test case contains two integers \n    n\n and \n    q\n (\n    1 \n    \u2264 n\n    \n    \u2264 3 \n    \u00b7 10^5, 0 \n    \u2264 q \n    \u2264 3 \n    \u00b7 10^5\n) denoting the number\nof pok\u00e9mon and number of operations respectively. The second line contains\n\n    n\n distinct positive integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264\n    a_i \n    \u2264 n\n) denoting the strengths of the pok\u00e9mon. \n    i\n-th of the last\n\n    q\n lines contains two positive integers \n    l_i\n and \n    r_i\n (\n    1\n    \n    \u2264 l_i \n    \u2264 r_i \n    \u2264 n\n) denoting the indices of pok\u00e9mon that were\nswapped in the \n    i\n-th operation. It is guaranteed that the sum of \n    n\n\nover all test cases does not exceed \n    3 \n    \u00b7 10^5\n, and the sum of\n\n    q\n over all test cases does not exceed \n    3 \n    \u00b7 10^5\n. Output For\neach test case, print \n    q+1\n integers: the maximal strength of army before\nthe swaps and after each swap. Example Input 3 3 1 1 3 2 1 2 2 2 1 2 1 2 1 2 7\n5 1 2 5 4 3 6 7 1 2 6 7 3 4 1 2 2 3 Output 3 4 2 2 2 9 10 10 10 9 11 Note\nLet's look at the third test case: Initially we can build an army in such way:\n[1 2 5 4 3 6 7], its strength will be \n    5-3+7=9\n. After first operation we\ncan build an army in such way: [2 1 5 4 3 6 7], its strength will be\n\n    2-1+5-3+7=10\n. After second operation we can build an army in such way:\n[2 1 5 4 3 7 6], its strength will be \n    2-1+5-3+7=10\n. After third\noperation we can build an army in such way: [2 1 4 5 3 7 6], its strength will\nbe \n    2-1+5-3+7=10\n. After forth operation we can build an army in such way:\n[1 2 4 5 3 7 6], its strength will be \n    5-3+7=9\n. After all operations we\ncan build an army in such way: [1 4 2 5 3 7 6], its strength will be\n\n    4-2+5-3+7=11\n.\n\n",
        "cf_contest_id": 1420,
        "cf_index": "C2",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "divide and conquer",
            "dp",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3 1\r\n1 3 2\r\n1 2\r\n2 2\r\n1 2\r\n1 2\r\n1 2\r\n7 5\r\n1 2 5 4 3 6 7\r\n1 2\r\n6 7\r\n3 4\r\n1 2\r\n2 3\r\n",
                "3\r\n4\r\n2\r\n2\r\n2\r\n9\r\n10\r\n10\r\n10\r\n9\r\n11\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n2 0\r\n1 2\r\n2 1\r\n1 2\r\n1 2\r\n2 1\r\n2 1\r\n1 2\r\n3 9\r\n1 2 3\r\n1 2\r\n1 3\r\n2 3\r\n1 2\r\n1 3\r\n2 3\r\n1 2\r\n1 3\r\n2 3\r\n3 0\r\n3 2 1\r\n",
                "2\r\n2\r\n2\r\n2\r\n2\r\n3\r\n4\r\n4\r\n3\r\n3\r\n3\r\n3\r\n4\r\n4\r\n3\r\n3\r\n"
            ]
        ]
    }
]