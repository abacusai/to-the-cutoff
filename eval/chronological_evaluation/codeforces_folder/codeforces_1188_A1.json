[
    {
        "name": "Add on a Tree",
        "description": "Note that this is the first problem of the two similar problems. You can hack\nthis problem only if you solve both problems. You are given a tree with\n\n    n\n nodes. In the beginning, \n    0\n is written on all edges. In one\noperation, you can choose any \n    2\n distinct leaves \n    u\n, \n    v\n and any\nreal number \n    x\n and add \n    x\n to values written on all edges on the\nsimple path between \n    u\n and \n    v\n. For example, on the picture below you\ncan see the result of applying two operations to the graph: adding \n    2\n on\nthe path from \n    7\n to \n    6\n, and then adding \n    -0.5\n on the path from\n\n    4\n to \n    5\n. Is it true that for any configuration of real numbers\nwritten on edges, we can achieve it with a finite number of operations? Leaf\nis a node of a tree of degree \n    1\n. Simple path is a path that doesn't\ncontain any node twice. Input The first line contains a single integer \n    n\n\n(\n    2 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the number of nodes. Each of the next \n    n-1\n\nlines contains two integers \n    u\n and \n    v\n (\n    1 \n    \u2264 u, v \n    \u2264 n\n,\n\n    u \n    \u2260 v\n), meaning that there is an edge between nodes \n    u\n and\n\n    v\n. It is guaranteed that these edges form a tree. Output If there is a\nconfiguration of real numbers written on edges of the tree that we can't\nachieve by performing the operations, output \"NO\". Otherwise, output \"YES\".\nYou can print each letter in any case (upper or lower). Examples Input 2 1 2\nOutput YES Input 3 1 2 2 3 Output NO Input 5 1 2 1 3 1 4 2 5 Output NO Input 6\n1 2 1 3 1 4 2 5 2 6 Output YES Note In the first example, we can add any real\n\n    x\n to the value written on the only edge \n    (1, 2)\n. In the second\nexample, one of configurations that we can't reach is \n    0\n written on\n\n    (1, 2)\n and \n    1\n written on \n    (2, 3)\n. Below you can see graphs\nfrom examples \n    3\n, \n    4\n:\n\n",
        "cf_contest_id": 1188,
        "cf_index": "A1",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n1 2\r\n",
                "YES\r\n"
            ],
            [
                "3\r\n1 2\r\n2 3\r\n",
                "NO\r\n"
            ],
            [
                "5\r\n1 2\r\n1 3\r\n1 4\r\n2 5\r\n",
                "NO\r\n"
            ],
            [
                "6\r\n1 2\r\n1 3\r\n1 4\r\n2 5\r\n2 6\r\n",
                "YES\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n2 4\r\n2 3\r\n2 1\r\n",
                "YES\r\n"
            ],
            [
                "5\r\n5 1\r\n5 2\r\n5 3\r\n5 4\r\n",
                "YES\r\n"
            ],
            [
                "20\r\n19 16\r\n19 18\r\n20 7\r\n9 4\r\n6 17\r\n14 2\r\n9 15\r\n2 13\r\n5 11\r\n19 12\r\n12 20\r\n16 9\r\n11 8\r\n19 5\r\n3 1\r\n19 14\r\n5 3\r\n12 10\r\n19 6\r\n",
                "NO\r\n"
            ],
            [
                "3\r\n1 2\r\n1 3\r\n",
                "NO\r\n"
            ],
            [
                "4\r\n1 4\r\n3 2\r\n1 3\r\n",
                "NO\r\n"
            ],
            [
                "5\r\n1 2\r\n1 5\r\n1 3\r\n1 4\r\n",
                "YES\r\n"
            ],
            [
                "10\r\n8 1\r\n1 2\r\n8 9\r\n8 5\r\n1 3\r\n1 10\r\n1 6\r\n1 7\r\n8 4\r\n",
                "YES\r\n"
            ],
            [
                "10\r\n8 2\r\n5 6\r\n1 8\r\n2 9\r\n1 4\r\n8 10\r\n10 5\r\n2 7\r\n2 3\r\n",
                "NO\r\n"
            ],
            [
                "20\r\n14 9\r\n12 13\r\n10 15\r\n2 1\r\n20 19\r\n16 6\r\n16 3\r\n17 14\r\n3 5\r\n2 11\r\n3 10\r\n15 8\r\n14 2\r\n6 4\r\n3 20\r\n5 18\r\n1 7\r\n1 16\r\n4 12\r\n",
                "NO\r\n"
            ],
            [
                "50\r\n49 6\r\n43 7\r\n1 27\r\n19 35\r\n15 37\r\n16 12\r\n19 21\r\n16 28\r\n49 9\r\n48 39\r\n13 1\r\n2 48\r\n9 50\r\n44 3\r\n41 32\r\n48 31\r\n49 33\r\n6 11\r\n13 20\r\n49 22\r\n13 41\r\n48 29\r\n13 46\r\n15 47\r\n34 2\r\n49 13\r\n48 14\r\n34 24\r\n16 36\r\n13 40\r\n49 34\r\n49 17\r\n43 25\r\n11 23\r\n10 15\r\n19 26\r\n34 44\r\n16 42\r\n19 18\r\n46 8\r\n29 38\r\n1 45\r\n12 43\r\n13 16\r\n46 30\r\n15 5\r\n49 10\r\n11 19\r\n32 4\r\n",
                "NO\r\n"
            ],
            [
                "5\r\n5 1\r\n5 4\r\n4 3\r\n1 2\r\n",
                "NO\r\n"
            ],
            [
                "10\r\n9 5\r\n7 1\r\n9 10\r\n7 2\r\n5 4\r\n9 6\r\n2 9\r\n10 8\r\n1 3\r\n",
                "NO\r\n"
            ],
            [
                "20\r\n7 5\r\n14 13\r\n17 6\r\n3 8\r\n16 12\r\n18 9\r\n3 18\r\n14 1\r\n17 3\r\n15 2\r\n17 4\r\n9 11\r\n2 7\r\n15 17\r\n3 20\r\n16 10\r\n17 14\r\n2 16\r\n1 19\r\n",
                "NO\r\n"
            ],
            [
                "50\r\n16 4\r\n17 9\r\n31 19\r\n22 10\r\n8 1\r\n40 30\r\n3 31\r\n20 29\r\n47 27\r\n22 25\r\n32 34\r\n12 15\r\n40 32\r\n10 33\r\n47 12\r\n6 24\r\n46 41\r\n14 23\r\n12 35\r\n31 42\r\n46 28\r\n31 20\r\n46 37\r\n1 39\r\n29 49\r\n37 47\r\n40 6\r\n42 36\r\n47 2\r\n24 46\r\n2 13\r\n8 45\r\n41 3\r\n32 17\r\n4 7\r\n47 26\r\n28 8\r\n41 50\r\n34 44\r\n33 21\r\n25 5\r\n16 40\r\n3 14\r\n8 18\r\n28 11\r\n32 22\r\n2 38\r\n3 48\r\n44 43\r\n",
                "NO\r\n"
            ],
            [
                "20\r\n13 1\r\n18 2\r\n3 7\r\n18 5\r\n20 16\r\n3 12\r\n18 9\r\n3 10\r\n18 11\r\n13 6\r\n3 18\r\n20 15\r\n20 17\r\n3 13\r\n3 4\r\n13 14\r\n3 20\r\n18 8\r\n3 19\r\n",
                "YES\r\n"
            ],
            [
                "60\r\n26 6\r\n59 30\r\n31 12\r\n31 3\r\n38 23\r\n59 29\r\n53 9\r\n38 56\r\n53 54\r\n29 21\r\n17 55\r\n59 38\r\n26 16\r\n24 59\r\n24 25\r\n17 35\r\n24 41\r\n30 15\r\n31 27\r\n8 44\r\n26 5\r\n26 48\r\n8 32\r\n53 17\r\n3 34\r\n3 51\r\n30 28\r\n47 10\r\n53 60\r\n36 42\r\n24 53\r\n59 22\r\n53 40\r\n26 52\r\n36 4\r\n59 8\r\n29 37\r\n36 20\r\n17 47\r\n53 18\r\n3 50\r\n30 2\r\n17 7\r\n8 58\r\n59 1\r\n31 11\r\n24 26\r\n24 43\r\n53 57\r\n59 45\r\n47 13\r\n26 46\r\n17 33\r\n30 31\r\n26 39\r\n26 19\r\n24 36\r\n8 49\r\n38 14\r\n",
                "YES\r\n"
            ],
            [
                "7\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n3 7\r\n",
                "NO\r\n"
            ],
            [
                "7\r\n1 2\r\n2 3\r\n3 4\r\n3 5\r\n1 6\r\n1 7\r\n",
                "NO\r\n"
            ],
            [
                "8\r\n1 2\r\n2 3\r\n3 4\r\n1 7\r\n1 8\r\n4 5\r\n4 6\r\n",
                "NO\r\n"
            ],
            [
                "7\r\n1 2\r\n2 3\r\n1 4\r\n1 5\r\n3 6\r\n3 7\r\n",
                "NO\r\n"
            ],
            [
                "3\r\n1 3\r\n2 3\r\n",
                "NO\r\n"
            ]
        ]
    }
]