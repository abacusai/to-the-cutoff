[
    {
        "name": "Snacktower",
        "description": "According to an old legeng, a long time ago Ankh-Morpork residents did\nsomething wrong to miss Fortune, and she cursed them. She said that at some\ntime n snacks of distinct sizes will fall on the city, and the residents\nshould build a Snacktower of them by placing snacks one on another. Of course,\nbig snacks should be at the bottom of the tower, while small snacks should be\nat the top. Years passed, and once different snacks started to fall onto the\ncity, and the residents began to build the Snacktower. However, they faced\nsome troubles. Each day exactly one snack fell onto the city, but their order\nwas strange. So, at some days the residents weren't able to put the new stack\non the top of the Snacktower: they had to wait until all the bigger snacks\nfell. Of course, in order to not to anger miss Fortune again, the residents\nplaced each snack on the top of the tower immediately as they could do it.\nWrite a program that models the behavior of Ankh-Morpork residents. Input The\nfirst line contains single integer n (1 \u2264 n \u2264 100 000) \u2014 the total number of\nsnacks. The second line contains n integers, the i-th of them equals the size\nof the snack which fell on the i-th day. Sizes are distinct integers from 1 to\nn. Output Print n lines. On the i-th of them print the sizes of the snacks\nwhich the residents placed on the top of the Snacktower on the i-th day in the\norder they will do that. If no snack is placed on some day, leave the\ncorresponding line empty. Examples Input 3 3 1 2 Output 3 2 1 Input 5 4 5 1 2\n3 Output 5 4 3 2 1 Note In the example a snack of size 3 fell on the first\nday, and the residents immediately placed it. On the second day a snack of\nsize 1 fell, and the residents weren't able to place it because they were\nmissing the snack of size 2. On the third day a snack of size 2 fell, and the\nresidents immediately placed it. Right after that they placed the snack of\nsize 1 which had fallen before.\n\n",
        "cf_contest_id": 767,
        "cf_index": "A",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3 1 2\r\n",
                "3 \r\n\r\n2 1 \r\n"
            ],
            [
                "5\r\n4 5 1 2 3\r\n",
                "\r\n5 4 \r\n\r\n\r\n3 2 1 \r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n",
                "1 \r\n"
            ],
            [
                "2\r\n1 2\r\n",
                "\r\n2 1 \r\n"
            ],
            [
                "10\r\n5 1 6 2 8 3 4 10 9 7\r\n",
                "\r\n\r\n\r\n\r\n\r\n\r\n\r\n10 \r\n9 8 \r\n7 6 5 4 3 2 1 \r\n"
            ],
            [
                "30\r\n16 10 4 29 5 28 12 21 11 30 18 6 14 3 17 22 20 15 9 1 27 19 24 26 13 25 2 23 8 7\r\n",
                "\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n30 29 28 \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n27 \r\n\r\n\r\n26 \r\n\r\n25 24 \r\n\r\n23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 \r\n8 \r\n7 6 5 4 3 2 1 \r\n"
            ],
            [
                "100\r\n98 52 63 2 18 96 31 58 84 40 41 45 66 100 46 71 26 48 81 20 73 91 68 76 13 93 17 29 64 95 79 21 55 75 19 85 54 51 89 78 15 87 43 59 36 1 90 35 65 56 62 28 86 5 82 49 3 99 33 9 92 32 74 69 27 22 77 16 44 94 34 6 57 70 23 12 61 25 8 11 67 47 83 88 10 14 30 7 97 60 42 37 24 38 53 50 4 80 72 39\r\n",
                "\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n100 \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n99 98 \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n80 79 78 77 76 75 74 73 \r\n72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 \r\n39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 \r\n"
            ],
            [
                "2\r\n2 1\r\n",
                "2 \r\n1 \r\n"
            ]
        ]
    }
]