[
    {
        "name": "Cutting Figure",
        "description": "You've gotten an n \u00d7 m sheet of squared paper. Some of its squares are\npainted. Let's mark the set of all painted squares as A. Set A is connected.\nYour task is to find the minimum number of squares that we can delete from set\nA to make it not connected. A set of painted squares is called connected, if\nfor every two squares a and b from this set there is a sequence of squares\nfrom the set, beginning in a and ending in b, such that in this sequence any\nsquare, except for the last one, shares a common side with the square that\nfollows next in the sequence. An empty set and a set consisting of exactly one\nsquare are connected by definition. Input The first input line contains two\nspace-separated integers n and m (1 \u2264 n, m \u2264 50) \u2014 the sizes of the sheet of\npaper. Each of the next n lines contains m characters \u2014 the description of the\nsheet of paper: the j-th character of the i-th line equals either \"#\", if the\ncorresponding square is painted (belongs to set A), or equals \".\" if the\ncorresponding square is not painted (does not belong to set A). It is\nguaranteed that the set of all painted squares A is connected and isn't empty.\nOutput On the first line print the minimum number of squares that need to be\ndeleted to make set A not connected. If it is impossible, print -1. Examples\nInput 5 4 #### #..# #..# #..# #### Output 2 Input 5 5 ##### #...# ##### #...#\n##### Output 2 Note In the first sample you can delete any two squares that do\nnot share a side. After that the set of painted squares is not connected\nanymore. The note to the second sample is shown on the figure below. To the\nleft there is a picture of the initial set of squares. To the right there is a\nset with deleted squares. The deleted squares are marked with crosses.\n\n",
        "cf_contest_id": 193,
        "cf_index": "A",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 4\r\n####\r\n#..#\r\n#..#\r\n#..#\r\n####\r\n",
                "2\r\n"
            ],
            [
                "5 5\r\n#####\r\n#...#\r\n#####\r\n#...#\r\n#####\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 10\r\n.########.\r\n",
                "1\r\n"
            ],
            [
                "1 1\r\n#\r\n",
                "-1\r\n"
            ],
            [
                "3 3\r\n.#.\r\n###\r\n.#.\r\n",
                "1\r\n"
            ],
            [
                "1 2\r\n##\r\n",
                "-1\r\n"
            ],
            [
                "2 1\r\n#\r\n#\r\n",
                "-1\r\n"
            ],
            [
                "3 3\r\n###\r\n#.#\r\n###\r\n",
                "2\r\n"
            ],
            [
                "2 2\r\n##\r\n#.\r\n",
                "1\r\n"
            ],
            [
                "2 2\r\n##\r\n##\r\n",
                "2\r\n"
            ],
            [
                "2 2\r\n.#\r\n##\r\n",
                "1\r\n"
            ],
            [
                "2 2\r\n.#\r\n.#\r\n",
                "-1\r\n"
            ],
            [
                "50 1\r\n#\r\n#\r\n#\r\n#\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n.\r\n",
                "1\r\n"
            ],
            [
                "2 2\r\n##\r\n..\r\n",
                "-1\r\n"
            ],
            [
                "3 5\r\n##.##\r\n#####\r\n##.##\r\n",
                "1\r\n"
            ],
            [
                "4 4\r\n####\r\n####\r\n####\r\n####\r\n",
                "2\r\n"
            ],
            [
                "2 5\r\n#####\r\n##.##\r\n",
                "1\r\n"
            ],
            [
                "6 2\r\n##\r\n##\r\n#.\r\n##\r\n##\r\n##\r\n",
                "1\r\n"
            ],
            [
                "2 5\r\n##.##\r\n#####\r\n",
                "1\r\n"
            ],
            [
                "5 5\r\n#####\r\n#####\r\n##.##\r\n##.##\r\n##.##\r\n",
                "2\r\n"
            ],
            [
                "5 3\r\n###\r\n###\r\n.#.\r\n###\r\n###\r\n",
                "1\r\n"
            ],
            [
                "5 5\r\n###..\r\n###..\r\n#..##\r\n#####\r\n#####\r\n",
                "1\r\n"
            ]
        ]
    }
]