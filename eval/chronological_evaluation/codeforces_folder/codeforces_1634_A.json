[
    {
        "name": "Reverse and Concatenate",
        "description": "Real stupidity beats artificial intelligence every time. \u2014 Terry Pratchett,\nHogfather, Discworld You are given a string \n    s\n of length \n    n\n and a\nnumber \n    k\n. Let's denote by \n    rev(s)\n the reversed string \n    s\n (i.e.\n\n    rev(s) = s_n s_n-1 ... s_1\n). You can apply one of the two kinds of\noperations to the string: replace the string \n    s\n with \n    s + rev(s)\n\nreplace the string \n    s\n with \n    rev(s) + s\nHow many different strings can\nyou get as a result of performing exactly \n    k\n operations (possibly of\ndifferent kinds) on the original string \n    s\n? In this statement we denoted\nthe concatenation of strings \n    s\n and \n    t\n as \n    s + t\n. In other\nwords, \n    s + t = s_1 s_2 ... s_n t_1 t_2 ... t_m\n, where \n    n\n and\n\n    m\n are the lengths of strings \n    s\n and \n    t\n respectively. Input The\nfirst line contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 number\nof test cases. Next \n    2 \n    \u00b7 t\n lines contain \n    t\n test cases: The\nfirst line of a test case contains two integers \n    n\n and \n    k\n (\n    1\n    \n    \u2264 n \n    \u2264 100\n, \n    0 \n    \u2264 k \n    \u2264 1000\n) \u2014 the length of the string\nand the number of operations respectively. The second string of a test case\ncontains one string \n    s\n of length \n    n\n consisting of lowercase Latin\nletters. Output For each test case, print the answer (that is, the number of\ndifferent strings that you can get after exactly \n    k\n operations) on a\nseparate line. It can be shown that the answer does not exceed \n    10^9\n\nunder the given constraints. Example Input 4 3 2 aab 3 3 aab 7 1 abacaba 2 0\nab Output 2 2 1 1 Note In the first test case of the example: After the first\noperation the string \n    s\n can become either aabbaa or baaaab. After the\nsecond operation there are 2 possibilities for \n    s\n: aabbaaaabbaa and\nbaaaabbaaaab.\n\n",
        "cf_contest_id": 1634,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3 2\r\naab\r\n3 3\r\naab\r\n7 1\r\nabacaba\r\n2 0\r\nab\r\n",
                "2\r\n2\r\n1\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n4 1\r\nabcd\r\n",
                "2\r\n"
            ],
            [
                "1\r\n2 1\r\nab\r\n",
                "2\r\n"
            ],
            [
                "1\r\n3 1\r\naab\r\n",
                "2\r\n"
            ],
            [
                "1\r\n3 1\r\nabc\r\n",
                "2\r\n"
            ],
            [
                "1\r\n4 2\r\nabca\r\n",
                "2\r\n"
            ]
        ]
    }
]