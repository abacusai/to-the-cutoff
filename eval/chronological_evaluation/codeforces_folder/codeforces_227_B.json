[
    {
        "name": "Effective Approach",
        "description": "Once at a team training Vasya, Petya and Sasha got a problem on implementing\nlinear search in an array. According to the boys, linear search works as\nfollows. The array elements in a pre-selected order are in turn compared with\nthe number that you need to find. Once you find the array element that is\nequal to the required one, the search ends. The efficiency of the algorithm is\nthe number of performed comparisons. The fewer comparisons the linear search\nhas made, the more effective it is. Vasya believes that a linear search would\nwork better if it sequentially iterates through the elements, starting with\nthe 1-st one (in this problem we consider the elements of the array indexed\nfrom 1 to n) and ending with the n-th one. And Petya says that Vasya is wrong:\nthe search will need less comparisons if it sequentially iterates the elements\nstarting from the n-th and ending with the 1-st one. Sasha argues that the two\napproaches are equivalent. To finally begin the task, the teammates decided to\nsettle the debate and compare the two approaches on an example. For this, they\ntook an array that is a permutation of integers from 1 to n, and generated m\nqueries of the form: find element with value bi in the array. They want to\ncalculate for both approaches how many comparisons in total the linear search\nwill need to respond to all queries. If the first search needs fewer\ncomparisons, then the winner of the dispute is Vasya. If the second one does,\nthen the winner is Petya. If both approaches make the same number of\ncomparisons, then Sasha's got the upper hand. But the problem is, linear\nsearch is too slow. That's why the boys aren't going to find out who is right\nbefore the end of the training, unless you come in here. Help them to\ndetermine who will win the dispute. Input The first line contains integer n (1\n\u2264 n \u2264 10^5) \u2014 the number of elements in the array. The second line contains n\ndistinct space-separated integers a1, a2, ..., an (1 \u2264 ai \u2264 n) \u2014 the elements\nof array. The third line contains integer m (1 \u2264 m \u2264 10^5) \u2014 the number of\nqueries. The last line contains m space-separated integers b1, b2, ..., bm (1\n\u2264 bi \u2264 n) \u2014 the search queries. Note that the queries can repeat. Output Print\ntwo integers, showing how many comparisons Vasya's approach needs and how many\ncomparisons Petya's approach needs. Separate the numbers by spaces. Please, do\nnot use the \npreferred to use cin, cout streams or the \n2 1 1 Output 1 2 Input 2 2 1 1 1 Output 2 1 Input 3 3 1 2 3 1 2 3 Output 6 6\nNote In the first sample Vasya's approach will make one comparison (it starts\nwith the 1-st element and immediately finds the required number), and Petya's\napproach makes two comparisons (first he compares with the 2-nd array element,\ndoesn't find the search item and compares with the 1-st element). In the\nsecond sample, on the contrary, Vasya's approach will need two comparisons\n(first with 1-st element, and then with the 2-nd), and Petya's approach will\nfind the required value in one comparison (the first comparison with the 2-nd\nelement).\n\n",
        "cf_contest_id": 227,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n1 2\r\n1\r\n1\r\n",
                "1 2\r\n"
            ],
            [
                "2\r\n2 1\r\n1\r\n1\r\n",
                "2 1\r\n"
            ],
            [
                "3\r\n3 1 2\r\n3\r\n1 2 3\r\n",
                "6 6\r\n"
            ]
        ],
        "private_cases": [
            [
                "9\r\n2 9 3 1 6 4 7 8 5\r\n9\r\n5 1 5 2 8 4 4 4 5\r\n",
                "58 32\r\n"
            ],
            [
                "10\r\n3 10 9 2 7 6 5 8 4 1\r\n1\r\n4\r\n",
                "9 2\r\n"
            ],
            [
                "10\r\n5 2 10 8 3 1 9 7 6 4\r\n9\r\n2 5 9 2 3 2 5 9 8\r\n",
                "31 68\r\n"
            ],
            [
                "9\r\n3 8 4 7 1 2 5 6 9\r\n3\r\n2 7 1\r\n",
                "15 15\r\n"
            ],
            [
                "9\r\n5 3 8 4 2 6 1 7 9\r\n4\r\n6 1 9 2\r\n",
                "27 13\r\n"
            ],
            [
                "4\r\n1 3 2 4\r\n4\r\n3 1 2 3\r\n",
                "8 12\r\n"
            ],
            [
                "3\r\n1 2 3\r\n8\r\n3 2 1 1 2 3 1 2\r\n",
                "15 17\r\n"
            ]
        ]
    }
]