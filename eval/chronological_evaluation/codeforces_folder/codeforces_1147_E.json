[
    {
        "name": "Rainbow Coins",
        "description": "Carl has \n    n\n coins of various colors, and he would like to sort them into\npiles. The coins are labeled \n    1,2,\n    \u2026,n\n, and each coin is exactly\none of red, green, or blue. He would like to sort the coins into three\ndifferent piles so one pile contains all red coins, one pile contains all\ngreen coins, and one pile contains all blue coins. Unfortunately, Carl is\ncolorblind, so this task is impossible for him. Luckily, he has a friend who\ncan take a pair of coins and tell Carl if they are the same color or not.\nUsing his friend, Carl believes he can now sort the coins. The order of the\npiles doesn't matter, as long as all same colored coins are in the one pile,\nand no two different colored coins are in the same pile. His friend will\nanswer questions about multiple pairs of coins in batches, and will answer\nabout all of those pairs in parallel. Each coin should be in at most one pair\nin each batch. The same coin can appear in different batches. Carl can use\nonly \n    7\n batches. Help him find the piles of coins after sorting.\nInteraction You will be given multiple test cases. The first line contains an\ninteger \n    t\n \n    (1 \n    \u2264 t \n    \u2264 5\n) \u2014 the number of test cases. The\nfirst line of each test case contains one integer \n    n\n (\n    1 \n    \u2264 n\n    \n    \u2264 10^5\n) \u2014 the number of coins. If you read in a value of \n    -1\n\nhere, that means that you printed an invalid answer in the previous case and\nexit immediately to avoid getting other verdicts. To ask a question, print \"Q\n\n    k\n     x_1\n     y_1\n     \n    \u2026\n     x_k\n     y_k\n\" (\n    1 \n    \u2264 k \n    \u2264 n/2, 1\n    \n    \u2264 x_i,y_i \n    \u2264 n, x_i \n    \u2260 y_i\n). \n    k\n denotes the number of\npairs in the batch, and \n    x_i, y_i\n denote the \n    i\n-th pair of coins in\nthe batch. A coin can only appear at most once in a batch. All \n    x_i\n and\n\n    y_i\n should be distinct. The judge will respond with a bitstring of\nlength \n    k\n, where the \n    i\n-th character is \"1\" if \n    x_i\n and\n\n    y_i\n are the same color, and \"0\" otherwise. The judge will respond with\n\n    -1\n if you ever ask an invalid query. Make sure to exit immediately to\navoid getting other verdicts. When you are ready to answer, print four lines.\nThe first line contains \"A \n    k_1\n     k_2\n     k_3\n\" (\n    0 \n    \u2264\n    k_1,k_2,k_3\n and \n    k_1+k_2+k_3 = n\n). These denote the sizes of the three\npiles. The next line has \n    k_1\n integers, the labels of the coins in the\nfirst pile. The next line has \n    k_2\n integers, the labels of the coins in\nthe second pile. The next line has \n    k_3\n integers, the labels coins in the\nthird pile. Each coin must appear in exactly one pile. You may only ask at\nmost \n    7\n batches per test case. After printing a query and the answer do\nnot forget to output end of line and flush the output. Otherwise, you will get\nIdleness limit exceeded. To do this, use: fflush(stdout) or cout.flush() in\nC++; System.out.flush() in Java; flush(output) in Pascal; stdout.flush() in\nPython; see documentation for other languages.Hack Format To hack, use the\nfollowing format. Note that you can only hack with one test case. The first\nline should contain a single integer \n    t\n (\n    t=1\n). The second line\nshould contain a single string \n    s\n consisting of only the characters \"R\",\n\"G\", \"B\" (\n    1 \n    \u2264 |s| \n    \u2264 10^5\n). The \n    i\n-th character in this\nstring represents the color of the \n    i\n-th coin. Example Input 3 3 1 1 1 3\n1 0 0 6 000 010 100 001 000 Output Q 1 1 2 Q 1 2 3 Q 1 1 3 A 3 0 0 1 2 3 Q 1 1\n3 Q 1 2 3 Q 1 1 2 A 2 0 1 1 3 2 Q 3 1 2 3 4 5 6 Q 3 1 3 2 5 4 6 Q 3 1 4 2 6 3\n5 Q 3 1 5 2 4 3 6 Q 3 1 6 2 3 4 5 A 2 2 2 1 4 2 5 3 6 Note In the example,\nthere are three test cases. In the first test case, there are three coins. We\nask about the pairs \n    (1,2)\n, \n    (2,3)\n, and \n    (1,3)\n in different\nbatches and get that they are all the same color. Thus, we know all the coins\nare the same color, so we can put them all in one pile. Note that some piles\ncan be empty and those are denoted with an empty line. In the second test\ncase, there are three coins again. This time, we only get that \n    (1,3)\n are\nthe same and \n    (1,2)\n and \n    (2,3)\n are different. So, one possible\nscenario is that coins \n    1\n and \n    3\n are red and coin \n    2\n is green.\nIn the last case, there are \n    6\n coins. The case shows how to ask and\nreceive answers for multiple pairs in one batch.\n\n",
        "cf_contest_id": 1147,
        "cf_index": "E",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "interactive"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\nGGG\r\nRBR\r\nRGBRGB\r\n",
                "3 0 0\r\n3 2 1 \r\n\r\n\r\n2 1 0\r\n3 1 \r\n2 \r\n\r\n2 2 2\r\n4 1 \r\n5 2 \r\n6 3 \r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\nR\r\n",
                "1 0 0\r\n1 \r\n\r\n\r\n"
            ],
            [
                "2\r\nRG\r\nBB\r\n",
                "1 1 0\r\n1 \r\n2 \r\n\r\n2 0 0\r\n2 1 \r\n\r\n\r\n"
            ]
        ]
    }
]