[
    {
        "name": "OpenStreetMap",
        "description": "Seryozha conducts a course dedicated to building a map of heights of Stepanovo\nrecreation center. He laid a rectangle grid of size \n    n \n    \u00d7 m\n cells\non a map (rows of grid are numbered from \n    1\n to \n    n\n from north to\nsouth, and columns are numbered from \n    1\n to \n    m\n from west to east).\nAfter that he measured the average height of each cell above Rybinsk sea level\nand obtained a matrix of heights of size \n    n \n    \u00d7 m\n. The cell \n    (i,\n    j)\n lies on the intersection of the \n    i\n-th row and the \n    j\n-th column\nand has height \n    h_i, j\n. Seryozha is going to look at the result of his\nwork in the browser. The screen of Seryozha's laptop can fit a subrectangle of\nsize \n    a \n    \u00d7 b\n of matrix of heights (\n    1 \n    \u2264 a \n    \u2264 n\n, \n    1\n    \n    \u2264 b \n    \u2264 m\n). Seryozha tries to decide how the weather can affect the\nrecreation center \u2014 for example, if it rains, where all the rainwater will\ngather. To do so, he is going to find the cell having minimum height among all\ncells that are shown on the screen of his laptop. Help Seryozha to calculate\nthe sum of heights of such cells for all possible subrectangles he can see on\nhis screen. In other words, you have to calculate the sum of minimum heights\nin submatrices of size \n    a \n    \u00d7 b\n with top left corners in \n    (i,\n    j)\n over all \n    1 \n    \u2264 i \n    \u2264 n - a + 1\n and \n    1 \n    \u2264 j \n    \u2264 m - b +\n    1\n. Consider the sequence \n    g_i = (g_i - 1\n    \u00b7 x + y) \n     z\n.\nYou are given integers \n    g_0\n, \n    x\n, \n    y\n and \n    z\n. By miraculous\ncoincidence, \n    h_i, j = g_(i - 1) \n    \u00b7 m + j - 1\n (\n    (i - 1)\n    \n    \u00b7 m + j - 1\n is the index). Input The first line of the input contains\nfour integers \n    n\n, \n    m\n, \n    a\n and \n    b\n (\n    1 \n    \u2264 n, m \n    \u2264\n    3\n     000\n, \n    1 \n    \u2264 a \n    \u2264 n\n, \n    1 \n    \u2264 b \n    \u2264 m\n) \u2014 the number of\nrows and columns in the matrix Seryozha has, and the number of rows and\ncolumns that can be shown on the screen of the laptop, respectively. The\nsecond line of the input contains four integers \n    g_0\n, \n    x\n, \n    y\n\nand \n    z\n (\n    0 \n    \u2264 g_0, x, y < z \n    \u2264 10^9\n). Output Print a single\ninteger \u2014 the answer to the problem. Example Input 3 4 2 1 1 2 3 59 Output 111\nNote The matrix from the first example:\n\n",
        "cf_contest_id": 1195,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 4 2 1\r\n1 2 3 59\r\n",
                "111"
            ]
        ],
        "private_cases": [
            [
                "3 4 3 3\r\n4 4 0 5\r\n",
                "2"
            ],
            [
                "1 1 1 1\r\n1 3 4 7\r\n",
                "1"
            ],
            [
                "1 10 1 4\r\n11 12 17 29\r\n",
                "28"
            ],
            [
                "3 3 1 2\r\n23 8 4 37\r\n",
                "59"
            ],
            [
                "10 10 5 5\r\n478741118 470168785 859734009 999999937\r\n",
                "1976744826"
            ],
            [
                "10 15 7 3\r\n680853366 753941356 522057812 999999937\r\n",
                "2838211080"
            ],
            [
                "3000 10 1 6\r\n709202316 281605678 503016091 999999937\r\n",
                "2163727770023"
            ],
            [
                "3000 3000 4 10\r\n623629309 917769297 890844966 987654319\r\n",
                "215591588260257"
            ],
            [
                "3000 3000 10 4\r\n122375063 551934841 132649021 999999937\r\n",
                "218197599525055"
            ],
            [
                "3000 3000 1000 1000\r\n794639486 477380537 986566001 987456307\r\n",
                "3906368067"
            ],
            [
                "3000 3000 3000 3000\r\n272739241 996213854 992075003 999999937\r\n",
                "49"
            ],
            [
                "10 20 5 3\r\n714480379 830120841 237143362 999999937\r\n",
                "7605133050"
            ],
            [
                "1 10 1 6\r\n315255536 294372002 370538673 999999937\r\n",
                "1246139449"
            ],
            [
                "1 100 1 60\r\n69681727 659379706 865329027 999999937\r\n",
                "625972554"
            ],
            [
                "1 3000 1 100\r\n485749039 454976558 340452742 999999937\r\n",
                "26950790829"
            ],
            [
                "2 10 1 6\r\n792838703 367871277 74193612 999999937\r\n",
                "1387225269"
            ],
            [
                "2 10 2 6\r\n270734527 308969128 389524142 999999937\r\n",
                "499529615"
            ],
            [
                "2 1000 1 239\r\n49877647 333519319 741438898 999999937\r\n",
                "3303701491"
            ],
            [
                "2 3000 2 600\r\n12329415 269373025 609053824 999999937\r\n",
                "1445949111"
            ],
            [
                "3000 10 2 6\r\n597162980 777111977 891095879 999999937\r\n",
                "1150562456841"
            ],
            [
                "3000 10 100 4\r\n629093292 827623342 755661819 999999937\r\n",
                "48282992443"
            ],
            [
                "3000 10 239 3\r\n198899574 226927458 547067738 999999937\r\n",
                "30045327470"
            ],
            [
                "1 100 1 30\r\n404695191 791131493 122718095 987654319\r\n",
                "5321260344"
            ],
            [
                "10 9 5 7\r\n265829396 72248915 931084722 999999937\r\n",
                "174566283"
            ],
            [
                "2 2 2 2\r\n13 16 3 19\r\n",
                "2"
            ],
            [
                "2789 2987 1532 1498\r\n85826553 850163811 414448387 876543319\r\n",
                "635603994"
            ],
            [
                "2799 2982 1832 1498\r\n252241481 249294328 360582011 876543319\r\n",
                "156738085"
            ],
            [
                "2759 2997 1432 1998\r\n806940698 324355562 340283381 876543319\r\n",
                "33049528"
            ],
            [
                "3000 3000 1000 50\r\n0 43114 2848321 193949291\r\n",
                "23035758532"
            ],
            [
                "3000 3000 1000 30\r\n0 199223 103021 103031111\r\n",
                "19914216432"
            ],
            [
                "3000 3000 1000 1000\r\n200000000 1 0 600000000\r\n",
                "800800200000000"
            ],
            [
                "16 16 16 16\r\n666666666 4 0 1000000000\r\n",
                "9657856"
            ]
        ]
    }
]