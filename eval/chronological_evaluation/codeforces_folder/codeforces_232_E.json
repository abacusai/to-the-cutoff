[
    {
        "name": "Quick Tortoise",
        "description": "John Doe has a field, which is a rectangular table of size n \u00d7 m. We assume\nthat the field rows are numbered from 1 to n from top to bottom, and the field\ncolumns are numbered from 1 to m from left to right. Then the cell of the\nfield at the intersection of the x-th row and the y-th column has coordinates\n(x; y). We know that some cells of John's field are painted white, and some\nare painted black. Also, John has a tortoise, which can move along the white\ncells of the field. The tortoise can get from a white cell with coordinates\n(x; y) into cell (x + 1; y) or (x; y + 1), if the corresponding cell is\npainted white. In other words, the turtle can move only along the white cells\nof the field to the right or down. The turtle can not go out of the bounds of\nthe field. In addition, John has q queries, each of them is characterized by\nfour numbers x1, y1, x2, y2 (x1 \u2264 x2, y1 \u2264 y2). For each query John wants to\nknow whether the tortoise can start from the point with coordinates (x1; y1),\nand reach the point with coordinates (x2; y2), moving only along the white\nsquares of the field. Input The first line contains two space-separated\nintegers n and m (1 \u2264 n, m \u2264 500) \u2014 the field sizes. Each of the next n lines\ncontains m characters \"#\" and \".\": the j-th character of the i-th line equals\n\"#\", if the cell (i; j) is painted black and \".\", if it is painted white. The\nnext line contains integer q (1 \u2264 q \u2264 6\u00b710^5) \u2014 the number of queries. Next q\nlines contain four space-separated integers x1, y1, x2 and y2 (1 \u2264 x1 \u2264 x2 \u2264\nn, 1 \u2264 y1 \u2264 y2 \u2264 m) \u2014 the coordinates of the starting and the finishing cells.\nIt is guaranteed that cells (x1; y1) and (x2; y2) are white. Output For each\nof q queries print on a single line \"Yes\", if there is a way from cell (x1;\ny1) to cell (x2; y2), that meets the requirements, and \"No\" otherwise. Print\nthe answers to the queries in the order, in which the queries are given in the\ninput. Examples Input 3 3 ... .## .#. 5 1 1 3 3 1 1 1 3 1 1 3 1 1 1 1 2 1 1 2\n1 Output No Yes Yes Yes Yes Input 5 5 ..... .###. ..... .###. ..... 5 1 1 5 5\n1 1 1 5 1 1 3 4 2 1 2 5 1 1 2 5 Output Yes Yes Yes No Yes\n\n",
        "cf_contest_id": 232,
        "cf_index": "E",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "divide and conquer",
            "dp"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3 3\r\n...\r\n.##\r\n.#.\r\n5\r\n1 1 3 3\r\n1 1 1 3\r\n1 1 3 1\r\n1 1 1 2\r\n1 1 2 1\r\n",
                "No\r\nYes\r\nYes\r\nYes\r\nYes\r\n"
            ],
            [
                "5 5\r\n.....\r\n.###.\r\n.....\r\n.###.\r\n.....\r\n5\r\n1 1 5 5\r\n1 1 1 5\r\n1 1 3 4\r\n2 1 2 5\r\n1 1 2 5\r\n",
                "Yes\r\nYes\r\nYes\r\nNo\r\nYes\r\n"
            ]
        ],
        "private_cases": []
    }
]