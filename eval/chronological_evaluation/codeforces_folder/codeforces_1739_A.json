[
    {
        "name": "Immobile Knight",
        "description": "There is a chess board of size \n    n \n    \u00d7 m\n. The rows are numbered from\n\n    1\n to \n    n\n, the columns are numbered from \n    1\n to \n    m\n. Let's\ncall a cell isolated if a knight placed in that cell can't move to any other\ncell on the board. Recall that a chess knight moves two cells in one direction\nand one cell in a perpendicular direction: Find any isolated cell on the\nboard. If there are no such cells, print any cell on the board. Input The\nfirst line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 64\n) \u2014 the\nnumber of testcases. The only line of each testcase contains two integers\n\n    n\n and \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 8\n) \u2014 the number of rows and\ncolumns of the board. Output For each testcase, print two integers \u2014 the row\nand the column of any isolated cell on the board. If there are no such cells,\nprint any cell on the board. Example Input 3 1 7 8 8 3 3 Output 1 7 7 2 2 2\nNote In the first testcase, all cells are isolated. A knight can't move from\nany cell of the board to any other one. Thus, any cell on board is a correct\nanswer. In the second testcase, there are no isolated cells. On a normal chess\nboard, a knight has at least two moves from any cell. Thus, again, any cell is\na correct answer. In the third testcase, only the middle cell of the board is\nisolated. The knight can move freely around the border of the board, but can't\nescape the middle.\n\n",
        "cf_contest_id": 1739,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 7\r\n8 8\r\n3 3\r\n",
                "1 4\r\n4 4\r\n2 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "64\r\n3 6\r\n6 3\r\n4 2\r\n8 8\r\n3 3\r\n7 2\r\n1 3\r\n6 6\r\n1 6\r\n5 1\r\n5 4\r\n8 7\r\n4 7\r\n7 7\r\n4 4\r\n5 5\r\n2 3\r\n5 2\r\n7 3\r\n2 2\r\n2 4\r\n7 8\r\n8 3\r\n4 5\r\n4 8\r\n1 1\r\n8 2\r\n6 2\r\n3 7\r\n8 5\r\n6 4\r\n3 8\r\n4 6\r\n6 1\r\n3 4\r\n4 3\r\n6 5\r\n2 8\r\n4 1\r\n2 5\r\n1 2\r\n5 3\r\n6 7\r\n1 4\r\n7 4\r\n5 8\r\n3 1\r\n8 6\r\n7 1\r\n1 7\r\n2 7\r\n6 8\r\n7 6\r\n8 4\r\n8 1\r\n2 1\r\n3 2\r\n5 6\r\n7 5\r\n2 6\r\n3 5\r\n5 7\r\n1 5\r\n1 8\r\n",
                "2 3\r\n3 2\r\n2 1\r\n4 4\r\n2 2\r\n4 1\r\n1 2\r\n3 3\r\n1 3\r\n3 1\r\n3 2\r\n4 4\r\n2 4\r\n4 4\r\n2 2\r\n3 3\r\n1 2\r\n3 1\r\n4 2\r\n1 1\r\n1 2\r\n4 4\r\n4 2\r\n2 3\r\n2 4\r\n1 1\r\n4 1\r\n3 1\r\n2 4\r\n4 3\r\n3 2\r\n2 4\r\n2 3\r\n3 1\r\n2 2\r\n2 2\r\n3 3\r\n1 4\r\n2 1\r\n1 3\r\n1 1\r\n3 2\r\n3 4\r\n1 2\r\n4 2\r\n3 4\r\n2 1\r\n4 3\r\n4 1\r\n1 4\r\n1 4\r\n3 4\r\n4 3\r\n4 2\r\n4 1\r\n1 1\r\n2 1\r\n3 3\r\n4 3\r\n1 3\r\n2 3\r\n3 4\r\n1 3\r\n1 4\r\n"
            ],
            [
                "62\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n",
                "1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n"
            ],
            [
                "4\r\n1 1\r\n1 1\r\n1 1\r\n1 6\r\n",
                "1 1\r\n1 1\r\n1 1\r\n1 3\r\n"
            ]
        ]
    }
]