[
    {
        "name": "Lunar New Year and a Wander",
        "description": "Lunar New Year is approaching, and Bob decides to take a wander in a nearby\npark. The park can be represented as a connected graph with \n    n\n nodes and\n\n    m\n bidirectional edges. Initially Bob is at the node \n    1\n and he\nrecords \n    1\n on his notebook. He can wander from one node to another\nthrough those bidirectional edges. Whenever he visits a node not recorded on\nhis notebook, he records it. After he visits all nodes at least once, he stops\nwandering, thus finally a permutation of nodes \n    a_1, a_2, \n    \u2026, a_n\n\nis recorded. Wandering is a boring thing, but solving problems is fascinating.\nBob wants to know the lexicographically smallest sequence of nodes he can\nrecord while wandering. Bob thinks this problem is trivial, and he wants you\nto solve it. A sequence \n    x\n is lexicographically smaller than a sequence\n\n    y\n if and only if one of the following holds: \n    x\n is a prefix of\n\n    y\n, but \n    x \n     y\n (this is impossible in this problem as all\nconsidered sequences have the same length); in the first position where\n\n    x\n and \n    y\n differ, the sequence \n    x\n has a smaller element than\nthe corresponding element in \n    y\n. Input The first line contains two\npositive integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 10^5\n),\ndenoting the number of nodes and edges, respectively. The following \n    m\n\nlines describe the bidirectional edges in the graph. The \n    i\n-th of these\nlines contains two integers \n    u_i\n and \n    v_i\n (\n    1 \n    \u2264 u_i, v_i\n    \n    \u2264 n\n), representing the nodes the \n    i\n-th edge connects. Note that\nthe graph can have multiple edges connecting the same two nodes and self-\nloops. It is guaranteed that the graph is connected. Output Output a line\ncontaining the lexicographically smallest sequence \n    a_1, a_2, \n    \u2026,\n    a_n\n Bob can record. Examples Input 3 2 1 2 1 3 Output 1 2 3 Input 5 5 1 4 3\n4 5 4 3 2 1 5 Output 1 4 3 2 5 Input 10 10 1 4 6 8 2 5 3 7 9 4 5 6 3 4 8 10 8\n9 1 10 Output 1 4 3 7 9 8 6 5 2 10 Note In the first sample, Bob's optimal\nwandering path could be \n    1 \n    \u2192 2 \n    \u2192 1 \n    \u2192\n    3\n. Therefore, Bob will obtain the sequence \n    1, 2, 3\n, which\nis the lexicographically smallest one. In the second sample, Bob's optimal\nwandering path could be \n    1 \n    \u2192 4 \n    \u2192 3 \n    \u2192 2\n    \n    \u2192 3 \n    \u2192 4 \n    \u2192 1 \n    \u2192 5\n. Therefore,\nBob will obtain the sequence \n    1, 4, 3, 2, 5\n, which is the\nlexicographically smallest one.\n\n",
        "cf_contest_id": 1106,
        "cf_index": "D",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "graphs",
            "greedy",
            "shortest paths"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2\r\n1 2\r\n1 3\r\n",
                "1\r\n2\r\n3\r\n"
            ],
            [
                "5 5\r\n1 4\r\n3 4\r\n5 4\r\n3 2\r\n1 5\r\n",
                "1\r\n4\r\n3\r\n2\r\n5\r\n"
            ],
            [
                "10 10\r\n1 4\r\n6 8\r\n2 5\r\n3 7\r\n9 4\r\n5 6\r\n3 4\r\n8 10\r\n8 9\r\n1 10\r\n",
                "1\r\n4\r\n3\r\n7\r\n9\r\n8\r\n6\r\n5\r\n2\r\n10\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1 1\r\n",
                "1\r\n"
            ],
            [
                "2 1\r\n1 2\r\n",
                "1\r\n2\r\n"
            ]
        ]
    }
]