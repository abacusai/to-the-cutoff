[
    {
        "name": "Ancient Berland Hieroglyphs",
        "description": "Polycarpus enjoys studying Berland hieroglyphs. Once Polycarp got hold of two\nancient Berland pictures, on each of which was drawn a circle of hieroglyphs.\nWe know that no hieroglyph occurs twice in either the first or the second\ncircle (but in can occur once in each of them). Polycarpus wants to save these\npictures on his laptop, but the problem is, laptops do not allow to write\nhieroglyphs circles. So Polycarp had to break each circle and write down all\nof its hieroglyphs in a clockwise order in one line. A line obtained from the\nfirst circle will be called a, and the line obtained from the second one will\nbe called b. There are quite many ways to break hieroglyphic circles, so\nPolycarpus chooses the method, that makes the length of the largest substring\nof string a, which occurs as a subsequence in string b, maximum. Help\nPolycarpus \u2014 find the maximum possible length of the desired substring\n(subsequence) if the first and the second circles are broken optimally. The\nlength of string s is the number of characters in it. If we denote the length\nof string s as |s|, we can write the string as s = s1s2... s|s|. A substring\nof s is a non-empty string x = s[a... b] = sasa + 1... sb (1 \u2264 a \u2264 b \u2264 |s|).\nFor example, \"code\" and \"force\" are substrings of \"codeforces\", while \"coders\"\nis not. A subsequence of s is a non-empty string y = s[p1p2... p|y|] =\nsp1sp2... sp|y| (1 \u2264 p1 < p2 < ... < p|y| \u2264 |s|). For example, \"coders\" is a\nsubsequence of \"codeforces\". Input The first line contains two integers la and\nlb (1 \u2264 la, lb \u2264 1000000) \u2014 the number of hieroglyphs in the first and second\ncircles, respectively. Below, due to difficulties with encoding of Berland\nhieroglyphs, they are given as integers from 1 to 10^6. The second line\ncontains la integers \u2014 the hieroglyphs in the first picture, in the clockwise\norder, starting with one of them. The third line contains lb integers \u2014 the\nhieroglyphs in the second picture, in the clockwise order, starting with one\nof them. It is guaranteed that the first circle doesn't contain a hieroglyph,\nwhich occurs twice. The second circle also has this property. Output Print a\nsingle number \u2014 the maximum length of the common substring and subsequence. If\nat any way of breaking the circles it does not exist, print 0. Examples Input\n5 4 1 2 3 4 5 1 3 5 6 Output 2 Input 4 6 1 3 5 2 1 2 3 4 5 6 Output 3 Input 3\n3 1 2 3 3 2 1 Output 2 Note In the first test Polycarpus picks a string that\nconsists of hieroglyphs 5 and 1, and in the second sample \u2014 from hieroglyphs\n1, 3 and 5.\n\n",
        "cf_contest_id": 164,
        "cf_index": "B",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "two pointers"
        ],
        "time_limit_seconds": 1.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 4\r\n1 2 3 4 5\r\n1 3 5 6\r\n",
                "2"
            ],
            [
                "4 6\r\n1 3 5 2\r\n1 2 3 4 5 6\r\n",
                "3"
            ],
            [
                "3 3\r\n1 2 3\r\n3 2 1\r\n",
                "2"
            ]
        ],
        "private_cases": [
            [
                "6 3\r\n1 2 3 4 5 6\r\n3 5 1\r\n",
                "1"
            ],
            [
                "1 1\r\n1\r\n2\r\n",
                "0"
            ],
            [
                "5 5\r\n5 6 3 2 1\r\n4 3 1 5 6\r\n",
                "4"
            ],
            [
                "5 5\r\n9 2 5 1 3\r\n1 7 2 3 9\r\n",
                "3"
            ],
            [
                "10 10\r\n9 12 15 2 4 14 1 5 6 13\r\n12 11 13 1 4 3 8 2 14 15\r\n",
                "3"
            ],
            [
                "10 10\r\n1 2 3 4 5 6 7 8 9 10\r\n6 7 8 9 10 1 2 3 4 5\r\n",
                "10"
            ],
            [
                "9 9\r\n1 2 3 4 5 6 7 8 9\r\n7 8 9 1 2 4 5 6 3\r\n",
                "8"
            ],
            [
                "1 2\r\n1\r\n1 2\r\n",
                "1"
            ],
            [
                "1 1\r\n1\r\n1\r\n",
                "1"
            ]
        ]
    }
]