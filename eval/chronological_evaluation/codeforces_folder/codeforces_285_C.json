[
    {
        "name": "Building Permutation",
        "description": "Permutation p is an ordered set of integers p1, p2, ..., pn, consisting of n\ndistinct positive integers, each of them doesn't exceed n. We'll denote the\ni-th element of permutation p as pi. We'll call number n the size or the\nlength of permutation p1, p2, ..., pn. You have a sequence of integers a1, a2,\n..., an. In one move, you are allowed to decrease or increase any number by\none. Count the minimum number of moves, needed to build a permutation from\nthis sequence. Input The first line contains integer n (1 \u2264 n \u2264 3\u00b710^5) \u2014 the\nsize of the sought permutation. The second line contains n integers a1, a2,\n..., an ( - 10^9 \u2264 ai \u2264 10^9). Output Print a single number \u2014 the minimum\nnumber of moves. Please, do not use the \nintegers in C++. It is preferred to use the cin, cout streams or the \nspecifier. Examples Input 2 3 0 Output 2 Input 3 -1 -1 2 Output 6 Note In the\nfirst sample you should decrease the first number by one and then increase the\nsecond number by one. The resulting permutation is (2, 1). In the second\nsample you need 6 moves to build permutation (1, 3, 2).\n\n",
        "cf_contest_id": 285,
        "cf_index": "C",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n3 0\r\n",
                "2\r\n"
            ],
            [
                "3\r\n-1 -1 2\r\n",
                "6\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n-3 5 -3 3 3\r\n",
                "10\r\n"
            ],
            [
                "10\r\n9 6 -2 4 1 1 1 9 6 2\r\n",
                "18\r\n"
            ],
            [
                "9\r\n2 0 0 6 5 4 1 9 3\r\n",
                "15\r\n"
            ]
        ]
    }
]