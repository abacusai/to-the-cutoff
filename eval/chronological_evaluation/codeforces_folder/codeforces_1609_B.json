[
    {
        "name": "William the Vigilant",
        "description": "Before becoming a successful trader William got a university degree. During\nhis education an interesting situation happened, after which William started\nto listen to homework assignments much more attentively. What follows is the\ncorrect formal description of the homework assignment: You are given a string\n\n    s\n of length \n    n\n only consisting of characters \"a\", \"b\" and \"c\".\nThere are \n    q\n queries of format (\n    pos, c\n), meaning replacing the\nelement of string \n    s\n at position \n    pos\n with character \n    c\n. After\neach query you must output the minimal number of characters in the string,\nwhich have to be replaced, so that the string doesn't contain string \"abc\" as\na substring. A valid replacement of a character is replacing it with \"a\", \"b\"\nor \"c\". A string \n    x\n is a substring of a string \n    y\n if \n    x\n can be\nobtained from \n    y\n by deletion of several (possibly, zero or all)\ncharacters from the beginning and several (possibly, zero or all) characters\nfrom the end. Input The first line contains two integers \n    n\n and \n    q\n\n\n    (1 \n    \u2264 n, q \n    \u2264 10^5)\n, the length of the string and the number of\nqueries, respectively. The second line contains the string \n    s\n, consisting\nof characters \"a\", \"b\" and \"c\". Each of the next \n    q\n lines contains an\ninteger \n    i\n and character \n    c\n \n    (1 \n    \u2264 i \n    \u2264 n)\n, index and the\nvalue of the new item in the string, respectively. It is guaranteed that\ncharacter's \n    c\n value is \"a\", \"b\" or \"c\". Output For each query output the\nminimal number of characters that would have to be replaced so that the string\ndoesn't contain \"abc\" as a substring. Example Input 9 10 abcabcabc 1 a 1 b 2 c\n3 a 4 b 5 c 8 a 9 b 1 c 4 a Output 3 2 2 2 1 2 1 1 1 0 Note Let's consider the\nstate of the string after each query: \n    s =\n \"abcabcabc\". In this case\n\n    3\n replacements can be performed to get, for instance, string \n    s =\n\n\"bbcaccabb\". This string does not contain \"abc\" as a substring. \n    s =\n\n\"bbcabcabc\". In this case \n    2\n replacements can be performed to get, for\ninstance, string \n    s =\n \"bbcbbcbbc\". This string does not contain \"abc\" as\na substring. \n    s =\n \"bccabcabc\". In this case \n    2\n replacements can be\nperformed to get, for instance, string \n    s =\n \"bccbbcbbc\". This string does\nnot contain \"abc\" as a substring. \n    s =\n \"bcaabcabc\". In this case \n    2\n\nreplacements can be performed to get, for instance, string \n    s =\n\n\"bcabbcbbc\". This string does not contain \"abc\" as a substring. \n    s =\n\n\"bcabbcabc\". In this case \n    1\n replacements can be performed to get, for\ninstance, string \n    s =\n \"bcabbcabb\". This string does not contain \"abc\" as\na substring. \n    s =\n \"bcabccabc\". In this case \n    2\n replacements can be\nperformed to get, for instance, string \n    s =\n \"bcabbcabb\". This string does\nnot contain \"abc\" as a substring. \n    s =\n \"bcabccaac\". In this case \n    1\n\nreplacements can be performed to get, for instance, string \n    s =\n\n\"bcabbcaac\". This string does not contain \"abc\" as a substring. \n    s =\n\n\"bcabccaab\". In this case \n    1\n replacements can be performed to get, for\ninstance, string \n    s =\n \"bcabbcaab\". This string does not contain \"abc\" as\na substring. \n    s =\n \"ccabccaab\". In this case \n    1\n replacements can be\nperformed to get, for instance, string \n    s =\n \"ccabbcaab\". This string does\nnot contain \"abc\" as a substring. \n    s =\n \"ccaaccaab\". In this case the\nstring does not contain \"abc\" as a substring and no replacements are needed.\n\n",
        "cf_contest_id": 1609,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "9 10\r\nabcabcabc\r\n1 a\r\n1 b\r\n2 c\r\n3 a\r\n4 b\r\n5 c\r\n8 a\r\n9 b\r\n1 c\r\n4 a\r\n",
                "3\r\n2\r\n2\r\n2\r\n1\r\n2\r\n1\r\n1\r\n1\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 3\r\na\r\n1 a\r\n1 b\r\n1 c\r\n",
                "0\r\n0\r\n0\r\n"
            ],
            [
                "1 10\r\na\r\n1 b\r\n1 c\r\n1 a\r\n1 c\r\n1 b\r\n1 a\r\n1 b\r\n1 b\r\n1 c\r\n1 b\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "2 30\r\naa\r\n2 b\r\n2 c\r\n1 b\r\n2 a\r\n2 b\r\n2 c\r\n1 c\r\n2 a\r\n2 b\r\n2 c\r\n2 b\r\n1 b\r\n1 a\r\n1 c\r\n1 c\r\n1 a\r\n2 b\r\n1 b\r\n2 c\r\n2 c\r\n1 c\r\n2 c\r\n2 c\r\n1 c\r\n2 b\r\n1 a\r\n2 c\r\n2 b\r\n1 a\r\n1 c\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ]
        ]
    }
]