[
    {
        "name": "Fox and Card Game",
        "description": "Fox Ciel is playing a card game with her friend Fox Jiro. There are n piles of\ncards on the table. And there is a positive integer on each card. The players\ntake turns and Ciel takes the first turn. In Ciel's turn she takes a card from\nthe top of any non-empty pile, and in Jiro's turn he takes a card from the\nbottom of any non-empty pile. Each player wants to maximize the total sum of\nthe cards he took. The game ends when all piles become empty. Suppose Ciel and\nJiro play optimally, what is the score of the game? Input The first line\ncontain an integer n (1 \u2264 n \u2264 100). Each of the next n lines contains a\ndescription of the pile: the first integer in the line is si (1 \u2264 si \u2264 100) \u2014\nthe number of cards in the i-th pile; then follow si positive integers c1, c2,\n..., ck, ..., csi (1 \u2264 ck \u2264 1000) \u2014 the sequence of the numbers on the cards\nlisted from top of the current pile to bottom of the pile. Output Print two\nintegers: the sum of Ciel's cards and the sum of Jiro's cards if they play\noptimally. Examples Input 2 1 100 2 1 10 Output 101 10 Input 1 9 2 8 6 5 9 4 7\n1 3 Output 30 15 Input 3 3 1 3 2 3 5 4 6 2 8 7 Output 18 18 Input 3 3 1000\n1000 1000 6 1000 1000 1000 1000 1000 1000 5 1000 1000 1000 1000 1000 Output\n7000 7000 Note In the first example, Ciel will take the cards with number 100\nand 1, Jiro will take the card with number 10. In the second example, Ciel\nwill take cards with numbers 2, 8, 6, 5, 9 and Jiro will take cards with\nnumbers 4, 7, 1, 3.\n\n",
        "cf_contest_id": 388,
        "cf_index": "C",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "games",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n1 100\r\n2 1 10\r\n",
                "101 10\r\n"
            ],
            [
                "1\r\n9 2 8 6 5 9 4 7 1 3\r\n",
                "30 15\r\n"
            ],
            [
                "3\r\n3 1 3 2\r\n3 5 4 6\r\n2 8 7\r\n",
                "18 18\r\n"
            ],
            [
                "3\r\n3 1000 1000 1000\r\n6 1000 1000 1000 1000 1000 1000\r\n5 1000 1000 1000 1000 1000\r\n",
                "7000 7000\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 1\r\n",
                "1 0\r\n"
            ],
            [
                "5\r\n1 3\r\n1 2\r\n1 8\r\n1 1\r\n1 4\r\n",
                "12 6\r\n"
            ],
            [
                "3\r\n5 1 2 3 4 5\r\n4 1 2 3 4\r\n8 1 2 3 4 5 6 7 8\r\n",
                "19 42\r\n"
            ],
            [
                "5\r\n5 1 1 1 1 1\r\n4 1 1 1 1\r\n3 1 1 1\r\n2 1 1\r\n1 1\r\n",
                "8 7\r\n"
            ],
            [
                "6\r\n2 1 1\r\n2 2 2\r\n2 3 3\r\n2 4 4\r\n2 5 5\r\n2 6 6\r\n",
                "21 21\r\n"
            ],
            [
                "2\r\n2 200 1\r\n3 1 100 2\r\n",
                "301 3\r\n"
            ],
            [
                "2\r\n3 1 1000 2\r\n3 2 1 1\r\n",
                "1003 4\r\n"
            ],
            [
                "4\r\n3 1 5 100\r\n3 1 5 100\r\n3 100 1 1\r\n3 100 1 1\r\n",
                "208 208\r\n"
            ]
        ]
    }
]