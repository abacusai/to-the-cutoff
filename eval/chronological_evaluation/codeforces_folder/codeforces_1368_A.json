[
    {
        "name": "C+=",
        "description": "Leo has developed a new programming language C+=. In C+=, integer variables\ncan only be changed with a \"+=\" operation that adds the right-hand side value\nto the left-hand side variable. For example, performing \"a += b\" when a =\n\n    2\n, b = \n    3\n changes the value of a to \n    5\n (the value of b does\nnot change). In a prototype program Leo has two integer variables a and b,\ninitialized with some positive values. He can perform any number of operations\n\"a += b\" or \"b += a\". Leo wants to test handling large integers, so he wants\nto make the value of either a or b strictly greater than a given value\n\n    n\n. What is the smallest number of operations he has to perform? Input\nThe first line contains a single integer \n    T\n (\n    1 \n    \u2264 T \n    \u2264 100\n)\n\u2014 the number of test cases. Each of the following \n    T\n lines describes a\nsingle test case, and contains three integers \n    a, b, n\n (\n    1 \n    \u2264 a, b\n    \n    \u2264 n \n    \u2264 10^9\n) \u2014 initial values of a and b, and the value one of the\nvariables has to exceed, respectively. Output For each test case print a\nsingle integer \u2014 the smallest number of operations needed. Separate answers\nwith line breaks. Example Input 2 1 2 3 5 4 100 Output 2 7 Note In the first\ncase we cannot make a variable exceed \n    3\n in one operation. One way of\nachieving this in two operations is to perform \"b += a\" twice.\n\n",
        "cf_contest_id": 1368,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "greedy",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "2\r\n1 2 3\r\n5 4 100\r\n",
                "2\r\n7\r\n"
            ]
        ],
        "private_cases": [
            [
                "16\r\n1 1 1\r\n3 4 7\r\n4 5 13\r\n456 123 7890123\r\n1 1 1000000000\r\n45 12 782595420\r\n1 1000000000 1000000000\r\n1 999999999 1000000000\r\n1 99999 676497416\r\n5 6 930234861\r\n8 9 881919225\r\n500000000 500000000 1000000000\r\n1000000000 1000000000 1000000000\r\n999999999 1000000000 1000000000\r\n666 999999 987405273\r\n5378 5378 652851553\r\n",
                "1\r\n2\r\n2\r\n21\r\n43\r\n36\r\n1\r\n2\r\n20\r\n40\r\n38\r\n2\r\n1\r\n1\r\n16\r\n24\r\n"
            ]
        ]
    }
]