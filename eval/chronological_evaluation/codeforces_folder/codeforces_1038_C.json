[
    {
        "name": "Gambling",
        "description": "Two players A and B have a list of \n    n\n integers each. They both want to\nmaximize the subtraction between their score and their opponent's score. In\none turn, a player can either add to his score any element from his list\n(assuming his list is not empty), the element is removed from the list\nafterward. Or remove an element from his opponent's list (assuming his\nopponent's list is not empty). Note, that in case there are equal elements in\nthe list only one of them will be affected in the operations above. For\nexample, if there are elements \n    1, 2, 2, 3\n in a list and you\ndecided to choose \n    2\n for the next turn, only a single instance of \n    2\n\nwill be deleted (and added to the score, if necessary). The player A starts\nthe game and the game stops when both lists are empty. Find the difference\nbetween A's score and B's score at the end of the game, if both of the players\nare playing optimally. Optimal play between two players means that both\nplayers choose the best possible strategy to achieve the best possible outcome\nfor themselves. In this problem, it means that each player, each time makes a\nmove, which maximizes the final difference between his score and his\nopponent's score, knowing that the opponent is doing the same. Input The first\nline of input contains an integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 100\n     000\n) \u2014\nthe sizes of the list. The second line contains \n    n\n integers \n    a_i\n\n(\n    1 \n    \u2264 a_i \n    \u2264 10^6\n), describing the list of the player A, who\nstarts the game. The third line contains \n    n\n integers \n    b_i\n (\n    1\n    \n    \u2264 b_i \n    \u2264 10^6\n), describing the list of the player B. Output Output\nthe difference between A's score and B's score (\n    A-B\n) if both of them are\nplaying optimally. Examples Input 2 1 4 5 1 Output 0 Input 3 100 100 100 100\n100 100 Output 0 Input 2 2 1 5 6 Output -3 Note In the first example, the game\ncould have gone as follows: A removes \n    5\n from B's list. B removes \n    4\n\nfrom A's list. A takes his \n    1\n. B takes his \n    1\n. Hence, A's score is\n\n    1\n, B's score is \n    1\n and difference is \n    0\n. There is also another\noptimal way of playing: A removes \n    5\n from B's list. B removes \n    4\n\nfrom A's list. A removes \n    1\n from B's list. B removes \n    1\n from A's\nlist. The difference in the scores is still \n    0\n. In the second example,\nirrespective of the moves the players make, they will end up with the same\nnumber of numbers added to their score, so the difference will be \n    0\n.\n\n",
        "cf_contest_id": 1038,
        "cf_index": "C",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n1 4\r\n5 1\r\n",
                "0\n"
            ],
            [
                "3\r\n100 100 100\r\n100 100 100\r\n",
                "0\n"
            ],
            [
                "2\r\n2 1\r\n5 6\r\n",
                "-3\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n325539 329221 106895 882089 718673\r\n502890 699009 489855 430685 939232\r\n",
                "-144652\n"
            ],
            [
                "6\r\n376259 910770 887448 703054 67926 981667\r\n695184 641139 364840 276118 318577 222469\r\n",
                "963277\n"
            ],
            [
                "10\r\n30518 196518 274071 359971 550121 204862 843967 173607 619138 690754\r\n219513 171337 183499 549873 542337 661387 397647 495917 413076 918417\r\n",
                "-47488\n"
            ],
            [
                "2\r\n9859 748096\r\n475634 928248\r\n",
                "0\n"
            ],
            [
                "9\r\n691939 300407 710197 624191 858791 609486 268030 225807 200011\r\n188665 132600 612100 329445 633496 196658 757959 628510 883389\r\n",
                "197226\n"
            ],
            [
                "29\r\n254369 14511 114048 683934 553812 575014 620356 217938 286195 131704 268393 78202 296626 986697 175814 600746 146985 215868 740052 711417 11221 944700 940915 53378 698708 878644 704035 120164 437165\r\n3415 443979 327875 491782 974937 176118 37957 316844 8179 156497 462613 338831 796707 658031 906915 955714 426218 527621 129761 576511 780108 858222 507016 87778 975379 188007 953169 308137 398157\r\n",
                "-416985\n"
            ],
            [
                "20\r\n405440 588704 61481 472140 115810 658854 743034 305150 780684 361360 50516 554301 478790 543678 546138 279893 889899 960260 802881 66499\r\n699500 254572 454419 833657 743179 661234 729965 591136 937826 626886 906880 664913 990362 385934 153747 840219 514676 746017 62847 187713\r\n",
                "-906636\n"
            ],
            [
                "25\r\n887969 76030 478041 100616 413694 211522 84038 225090 516869 914975 161226 96124 320457 162052 70329 776374 642303 711844 115276 37430 499330 577781 735069 364358 345168\r\n829299 135662 972337 61003 836638 951395 543689 412218 135799 710787 140644 753733 863687 774843 591770 993339 581145 153691 512201 705936 957691 140375 898193 103639 250561\r\n",
                "-2033851\n"
            ],
            [
                "17\r\n679894 524637 508634 280107 481104 939275 953130 494227 256339 787326 107999 575751 592642 596921 974470 20999 869688\r\n999512 330019 450534 828032 8072 467180 519884 45659 155914 130124 812533 297086 409652 800546 510512 140497 245999\r\n",
                "1528882\n"
            ]
        ]
    }
]