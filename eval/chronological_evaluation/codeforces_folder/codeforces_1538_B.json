[
    {
        "name": "Friends and Candies",
        "description": "Polycarp has \n    n\n friends, the \n    i\n-th of his friends has \n    a_i\n\ncandies. Polycarp's friends do not like when they have different numbers of\ncandies. In other words they want all \n    a_i\n to be the same. To solve this,\nPolycarp performs the following set of actions exactly once: Polycarp chooses\n\n    k\n (\n    0 \n    \u2264 k \n    \u2264 n\n) arbitrary friends (let's say he chooses\nfriends with indices \n    i_1, i_2, \n    \u2026, i_k\n); Polycarp distributes\ntheir \n    a_i_1 + a_i_2 + \n    \u2026 + a_i_k\n candies among all \n    n\n\nfriends. During distribution for each of \n    a_i_1 + a_i_2 + \n    \u2026 +\n    a_i_k\n candies he chooses new owner. That can be any of \n    n\n friends.\nNote, that any candy can be given to the person, who has owned that candy\nbefore the distribution process. Note that the number \n    k\n is not fixed in\nadvance and can be arbitrary. Your task is to find the minimum value of\n\n    k\n. For example, if \n    n=4\n and \n    a=[4, 5, 2, 5]\n, then Polycarp\ncould make the following distribution of the candies: Polycarp chooses\n\n    k=2\n friends with indices \n    i=[2, 4]\n and distributes \n    a_2 + a_4 =\n    10\n candies to make \n    a=[4, 4, 4, 4]\n (two candies go to person \n    3\n).\nNote that in this example Polycarp cannot choose \n    k=1\n friend so that he\ncan redistribute candies so that in the end all \n    a_i\n are equal. For the\ndata \n    n\n and \n    a\n, determine the minimum value \n    k\n. With this value\n\n    k\n, Polycarp should be able to select \n    k\n friends and redistribute\ntheir candies so that everyone will end up with the same number of candies.\nInput The first line contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    10^4\n). Then \n    t\n test cases follow. The first line of each test case\ncontains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n). The\nsecond line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0\n    \n    \u2264 a_i \n    \u2264 10^4\n). It is guaranteed that the sum of \n    n\n over all\ntest cases does not exceed \n    2 \n    \u00b7 10^5\n. Output For each test case\noutput: the minimum value of \n    k\n, such that Polycarp can choose exactly\n\n    k\n friends so that he can redistribute the candies in the desired way;\n\"-1\" if no such value \n    k\n exists. Example Input 5 4 4 5 2 5 2 0 4 5 10 8 5\n1 4 1 10000 7 1 1 1 1 1 1 1 Output 2 1 -1 0 0\n\n",
        "cf_contest_id": 1538,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n4\r\n4 5 2 5\r\n2\r\n0 4\r\n5\r\n10 8 5 1 4\r\n1\r\n10000\r\n7\r\n1 1 1 1 1 1 1\r\n",
                "2\r\n1\r\n-1\r\n0\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n52\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n",
                "0\r\n"
            ],
            [
                "1\r\n52\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "0\r\n"
            ],
            [
                "1\r\n3\r\n1 1 67\r\n",
                "1\r\n"
            ],
            [
                "1\r\n2\r\n1 691\r\n",
                "1\r\n"
            ]
        ]
    }
]