[
    {
        "name": "1-Trees and Queries",
        "description": "Gildong was hiking a mountain, walking by millions of trees. Inspired by them,\nhe suddenly came up with an interesting idea for trees in data structures:\nWhat if we add another edge in a tree? Then he found that such tree-like\ngraphs are called 1-trees. Since Gildong was bored of solving too many tree\nproblems, he wanted to see if similar techniques in trees can be used in\n1-trees as well. Instead of solving it by himself, he's going to test you by\nproviding queries on 1-trees. First, he'll provide you a tree (not 1-tree)\nwith \n    n\n vertices, then he will ask you \n    q\n queries. Each query\ncontains \n    5\n integers: \n    x\n, \n    y\n, \n    a\n, \n    b\n, and \n    k\n.\nThis means you're asked to determine if there exists a path from vertex\n\n    a\n to \n    b\n that contains exactly \n    k\n edges after adding a\nbidirectional edge between vertices \n    x\n and \n    y\n. A path can contain\nthe same vertices and same edges multiple times. All queries are independent\nof each other; i.e. the added edge in a query is removed in the next query.\nInput The first line contains an integer \n    n\n (\n    3 \n    \u2264 n \n    \u2264 10^5\n),\nthe number of vertices of the tree. Next \n    n-1\n lines contain two integers\n\n    u\n and \n    v\n (\n    1 \n    \u2264 u,v \n    \u2264 n\n, \n    u \n     v\n) each, which\nmeans there is an edge between vertex \n    u\n and \n    v\n. All edges are\nbidirectional and distinct. Next line contains an integer \n    q\n (\n    1 \n    \u2264\n    q \n    \u2264 10^5\n), the number of queries Gildong wants to ask. Next \n    q\n\nlines contain five integers \n    x\n, \n    y\n, \n    a\n, \n    b\n, and \n    k\n\neach (\n    1 \n    \u2264 x,y,a,b \n    \u2264 n\n, \n    x \n     y\n, \n    1 \n    \u2264 k \n    \u2264\n    10^9\n) \u2013 the integers explained in the description. It is guaranteed that\nthe edge between \n    x\n and \n    y\n does not exist in the original tree.\nOutput For each query, print \"YES\" if there exists a path that contains\nexactly \n    k\n edges from vertex \n    a\n to \n    b\n after adding an edge\nbetween vertices \n    x\n and \n    y\n. Otherwise, print \"NO\". You can print\neach letter in any case (upper or lower). Example Input 5 1 2 2 3 3 4 4 5 5 1\n3 1 2 2 1 4 1 3 2 1 4 1 3 3 4 2 3 3 9 5 2 3 3 9 Output YES YES NO YES NO Note\nThe image below describes the tree (circles and solid lines) and the added\nedges for each query (dotted lines). Possible paths for the queries with \"YES\"\nanswers are: \n    1\n-st query: \n    1\n \u2013 \n    3\n \u2013 \n    2\n \n    2\n-nd query:\n\n    1\n \u2013 \n    2\n \u2013 \n    3\n \n    4\n-th query: \n    3\n \u2013 \n    4\n \u2013 \n    2\n \u2013\n\n    3\n \u2013 \n    4\n \u2013 \n    2\n \u2013 \n    3\n \u2013 \n    4\n \u2013 \n    2\n \u2013 \n    3\n\n\n",
        "cf_contest_id": 1304,
        "cf_index": "E",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "shortest paths",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5\r\n1 3 1 2 2\r\n1 4 1 3 2\r\n1 4 1 3 3\r\n4 2 3 3 9\r\n5 2 3 3 9\r\n",
                "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "9\r\n3 9\r\n3 4\r\n7 2\r\n6 9\r\n5 3\r\n6 2\r\n8 3\r\n1 9\r\n10\r\n8 4 8 2 5\r\n9 2 7 4 4\r\n8 5 7 3 3\r\n1 2 3 8 4\r\n2 9 2 4 3\r\n6 4 3 4 5\r\n6 7 6 6 4\r\n7 5 3 1 4\r\n5 4 7 8 3\r\n4 5 1 5 2\r\n",
                "YES\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nNO\r\n"
            ],
            [
                "14\r\n4 9\r\n3 7\r\n4 1\r\n3 2\r\n14 9\r\n7 6\r\n10 13\r\n8 7\r\n5 7\r\n7 10\r\n1 3\r\n12 3\r\n7 11\r\n20\r\n13 6 14 9 3\r\n6 4 3 7 9\r\n9 3 6 13 7\r\n6 11 11 5 9\r\n14 5 2 3 4\r\n13 12 4 2 7\r\n13 14 7 3 6\r\n9 5 13 13 9\r\n8 9 7 3 7\r\n14 10 7 12 7\r\n6 12 13 1 1\r\n8 13 8 10 8\r\n1 5 7 10 7\r\n3 4 13 2 6\r\n1 5 6 8 10\r\n6 9 11 8 5\r\n9 7 14 7 9\r\n12 5 6 8 9\r\n14 13 2 4 3\r\n2 6 13 11 7\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\nYES\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\nYES\r\n"
            ]
        ]
    }
]