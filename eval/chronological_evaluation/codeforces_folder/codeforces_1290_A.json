[
    {
        "name": "Mind Control",
        "description": "You and your \n    n - 1\n friends have found an array of integers \n    a_1, a_2,\n    \n    \u2026, a_n\n. You have decided to share it in the following way: All\n\n    n\n of you stand in a line in a particular order. Each minute, the person\nat the front of the line chooses either the first or the last element of the\narray, removes it, and keeps it for himself. He then gets out of line, and the\nnext person in line continues the process. You are standing in the \n    m\n-th\nposition in the line. Before the process starts, you may choose up to \n    k\n\ndifferent people in the line, and persuade them to always take either the\nfirst or the last element in the array on their turn (for each person his own\nchoice, not necessarily equal for all people), no matter what the elements\nthemselves are. Once the process starts, you cannot persuade any more people,\nand you cannot change the choices for the people you already persuaded.\nSuppose that you're doing your choices optimally. What is the greatest integer\n\n    x\n such that, no matter what are the choices of the friends you didn't\nchoose to control, the element you will take from the array will be greater\nthan or equal to \n    x\n? Please note that the friends you don't control may\ndo their choice arbitrarily, and they will not necessarily take the biggest\nelement available. Input The input consists of multiple test cases. The first\nline contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the\nnumber of test cases. The description of the test cases follows. The first\nline of each test case contains three space-separated integers \n    n\n,\n\n    m\n and \n    k\n (\n    1 \n    \u2264 m \n    \u2264 n \n    \u2264 3500\n, \n    0 \n    \u2264 k \n    \u2264 n\n    - 1\n) \u2014 the number of elements in the array, your position in line and the\nnumber of people whose choices you can fix. The second line of each test case\ncontains \n    n\n positive integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264\n    a_i \n    \u2264 10^9\n) \u2014 elements of the array. It is guaranteed that the sum of\n\n    n\n over all test cases does not exceed \n    3500\n. Output For each test\ncase, print the largest integer \n    x\n such that you can guarantee to obtain\nat least \n    x\n. Example Input 4 6 4 2 2 9 2 3 8 5 4 4 1 2 13 60 4 4 1 3 1 2\n2 1 2 2 0 1 2 Output 8 4 1 1 Note In the first test case, an optimal strategy\nis to force the first person to take the last element and the second person to\ntake the first element. the first person will take the last element (\n    5\n)\nbecause he or she was forced by you to take the last element. After this turn\nthe remaining array will be \n    [2, 9, 2, 3, 8]\n; the second person will take\nthe first element (\n    2\n) because he or she was forced by you to take the\nfirst element. After this turn the remaining array will be \n    [9, 2, 3, 8]\n;\nif the third person will choose to take the first element (\n    9\n), at your\nturn the remaining array will be \n    [2, 3, 8]\n and you will take \n    8\n\n(the last element); if the third person will choose to take the last element\n(\n    8\n), at your turn the remaining array will be \n    [9, 2, 3]\n and you\nwill take \n    9\n (the first element). Thus, this strategy guarantees to end\nup with at least \n    8\n. We can prove that there is no strategy that\nguarantees to end up with at least \n    9\n. Hence, the answer is \n    8\n. In\nthe second test case, an optimal strategy is to force the first person to take\nthe first element. Then, in the worst case, both the second and the third\nperson will take the first element: you will end up with \n    4\n.\n\n",
        "cf_contest_id": 1290,
        "cf_index": "A",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n6 4 2\r\n2 9 2 3 8 5\r\n4 4 1\r\n2 13 60 4\r\n4 1 3\r\n1 2 2 1\r\n2 2 0\r\n1 2\r\n",
                "8\r\n4\r\n1\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]