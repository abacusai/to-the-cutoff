[
    {
        "name": "Multithreading",
        "description": "Emuskald is addicted to Codeforces, and keeps refreshing the main page not to\nmiss any changes in the \"recent actions\" list. He likes to read thread\nconversations where each thread consists of multiple messages. Recent actions\nshows a list of n different threads ordered by the time of the latest message\nin the thread. When a new message is posted in a thread that thread jumps on\nthe top of the list. No two messages of different threads are ever posted at\nthe same time. Emuskald has just finished reading all his opened threads and\nrefreshes the main page for some more messages to feed his addiction. He\nnotices that no new threads have appeared in the list and at the i-th place in\nthe list there is a thread that was at the ai-th place before the refresh. He\ndoesn't want to waste any time reading old messages so he wants to open only\nthreads with new messages. Help Emuskald find out the number of threads that\nsurely have new messages. A thread x surely has a new message if there is no\nsuch sequence of thread updates (posting messages) that both conditions hold:\nthread x is not updated (it has no new messages); the list order 1, 2, ..., n\nchanges to a1, a2, ..., an. Input The first line of input contains an integer\nn, the number of threads (1 \u2264 n \u2264 10^5). The next line contains a list of n\nspace-separated integers a1, a2, ..., an where ai (1 \u2264 ai \u2264 n) is the old\nposition of the i-th thread in the new list. It is guaranteed that all of the\nai are distinct. Output Output a single integer \u2014 the number of threads that\nsurely contain a new message. Examples Input 5 5 2 1 3 4 Output 2 Input 3 1 2\n3 Output 0 Input 4 4 3 2 1 Output 3 Note In the first test case, threads 2 and\n5 are placed before the thread 1, so these threads must contain new messages.\nThreads 1, 3 and 4 may contain no new messages, if only threads 2 and 5 have\nnew messages. In the second test case, there may be no new messages at all,\nsince the thread order hasn't changed. In the third test case, only thread 1\ncan contain no new messages.\n\n",
        "cf_contest_id": 270,
        "cf_index": "B",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n5 2 1 3 4\r\n",
                "2"
            ],
            [
                "3\r\n1 2 3\r\n",
                "0"
            ],
            [
                "4\r\n4 3 2 1\r\n",
                "3"
            ]
        ],
        "private_cases": [
            [
                "5\r\n1 2 5 3 4\r\n",
                "3"
            ],
            [
                "1\r\n1\r\n",
                "0"
            ],
            [
                "2\r\n1 2\r\n",
                "0"
            ],
            [
                "2\r\n2 1\r\n",
                "1"
            ],
            [
                "3\r\n2 1 3\r\n",
                "1"
            ],
            [
                "6\r\n4 5 6 1 2 3\r\n",
                "3"
            ],
            [
                "10\r\n10 5 9 4 1 8 3 7 2 6\r\n",
                "8"
            ],
            [
                "3\r\n1 3 2\r\n",
                "2"
            ],
            [
                "3\r\n3 1 2\r\n",
                "1"
            ],
            [
                "4\r\n1 2 3 4\r\n",
                "0"
            ],
            [
                "4\r\n2 3 1 4\r\n",
                "2"
            ],
            [
                "6\r\n3 2 1 6 4 5\r\n",
                "4"
            ],
            [
                "7\r\n2 3 4 5 6 7 1\r\n",
                "6"
            ],
            [
                "8\r\n2 6 8 3 1 4 7 5\r\n",
                "7"
            ],
            [
                "9\r\n6 7 1 2 3 5 4 8 9\r\n",
                "6"
            ],
            [
                "10\r\n1 2 3 4 5 6 7 8 9 10\r\n",
                "0"
            ],
            [
                "10\r\n6 1 2 3 4 5 7 8 9 10\r\n",
                "1"
            ],
            [
                "10\r\n5 8 4 9 6 1 2 3 7 10\r\n",
                "5"
            ],
            [
                "10\r\n4 2 6 9 5 3 8 1 7 10\r\n",
                "7"
            ],
            [
                "10\r\n8 2 7 1 5 9 3 4 10 6\r\n",
                "9"
            ],
            [
                "67\r\n45 48 40 32 11 36 18 47 56 3 22 27 37 12 25 8 57 66 50 41 49 42 30 28 14 62 43 51 9 63 13 1 2 4 5 6 7 10 15 16 17 19 20 21 23 24 26 29 31 33 34 35 38 39 44 46 52 53 54 55 58 59 60 61 64 65 67\r\n",
                "31"
            ],
            [
                "132\r\n13 7 33 124 118 76 94 92 16 107 130 1 46 58 28 119 42 53 102 81 99 29 57 70 125 45 100 68 10 63 34 38 19 49 56 30 103 72 106 3 121 110 78 2 31 129 128 24 77 61 87 47 15 21 88 60 5 101 82 108 84 41 86 66 79 75 54 97 55 12 69 44 83 131 9 95 11 85 52 35 115 80 111 27 109 36 39 104 105 62 32 40 98 50 64 114 120 59 20 74 51 48 14 4 127 22 18 71 65 116 6 8 17 23 25 26 37 43 67 73 89 90 91 93 96 112 113 117 122 123 126 132\r\n",
                "110"
            ],
            [
                "100\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\r\n",
                "0"
            ],
            [
                "100\r\n2 4 82 12 47 63 52 91 87 45 53 1 17 25 64 50 9 13 22 54 21 30 43 24 38 33 68 11 41 78 99 23 28 18 58 67 79 10 71 56 49 61 26 29 59 20 90 74 5 75 3 6 7 8 14 15 16 19 27 31 32 34 35 36 37 39 40 42 44 46 48 51 55 57 60 62 65 66 69 70 72 73 76 77 80 81 83 84 85 86 88 89 92 93 94 95 96 97 98 100\r\n",
                "50"
            ]
        ]
    }
]