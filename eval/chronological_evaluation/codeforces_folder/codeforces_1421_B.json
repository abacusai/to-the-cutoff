[
    {
        "name": "Putting Bricks in the Wall",
        "description": "Pink Floyd are pulling a prank on Roger Waters. They know he doesn't like\nwalls, he wants to be able to walk freely, so they are blocking him from\nexiting his room which can be seen as a grid. Roger Waters has a square grid\nof size \n    n\n    \u00d7 n\n and he wants to traverse his grid from the upper\nleft (\n    1,1\n) corner to the lower right corner (\n    n,n\n). Waters can move\nfrom a square to any other square adjacent by a side, as long as he is still\nin the grid. Also except for the cells (\n    1,1\n) and (\n    n,n\n) every cell\nhas a value \n    0\n or \n    1\n in it. Before starting his traversal he will\npick either a \n    0\n or a \n    1\n and will be able to only go to cells values\nin which are equal to the digit he chose. The starting and finishing cells\n(\n    1,1\n) and (\n    n,n\n) are exempt from this rule, he may go through them\nregardless of picked digit. Because of this the cell (\n    1,1\n) takes value\nthe letter 'S' and the cell (\n    n,n\n) takes value the letter 'F'. For\nexample, in the first example test case, he can go from (\n    1, 1\n) to (\n    n,\n    n\n) by using the zeroes on this path: (\n    1, 1\n), (\n    2, 1\n), (\n    2,\n    2\n), (\n    2, 3\n), (\n    3, 3\n), (\n    3, 4\n), (\n    4, 4\n) The rest of the\nband (Pink Floyd) wants Waters to not be able to do his traversal, so while he\nis not looking they will invert at most two cells in the grid (from \n    0\n to\n\n    1\n or vice versa). They are afraid they will not be quick enough and\nasked for your help in choosing the cells. Note that you cannot invert cells\n\n    (1, 1)\n and \n    (n, n)\n. We can show that there always exists a solution\nfor the given constraints. Also note that Waters will pick his digit of the\ntraversal after the band has changed his grid, so he must not be able to reach\n(\n    n,n\n) no matter what digit he picks. Input Each test contains multiple\ntest cases. The first line contains the number of test cases \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 50\n). Description of the test cases follows. The first line of\neach test case contains one integers \n    n\n (\n    3 \n    \u2264 n \n    \u2264 200\n). The\nfollowing \n    n\n lines of each test case contain the binary grid, square\n(\n    1, 1\n) being colored in 'S' and square (\n    n, n\n) being colored in\n'F'. The sum of values of \n    n\n doesn't exceed \n    200\n. Output For each\ntest case output on the first line an integer \n    c\n (\n    0 \n    \u2264 c \n    \u2264\n    2\n) \u2014 the number of inverted cells. In \n    i\n-th of the following \n    c\n\nlines, print the coordinates of the \n    i\n-th cell you inverted. You may not\ninvert the same cell twice. Note that you cannot invert cells \n    (1, 1)\n and\n\n    (n, n)\n. Example Input 3 4 S010 0001 1000 111F 3 S10 101 01F 5 S0101\n00000 01111 11111 0001F Output 1 3 4 2 1 2 2 1 0 Note For the first test case,\nafter inverting the cell, we get the following grid: S010 0001 1001 111F\n\n",
        "cf_contest_id": 1421,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n4\r\nS010\r\n0001\r\n1000\r\n111F\r\n3\r\nS10\r\n101\r\n01F\r\n5\r\nS0101\r\n00000\r\n01111\r\n11111\r\n0001F\r\n",
                "1 3 4\r\n2 1 2 2 1\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n3\r\nS11\r\n011\r\n01F\r\n",
                "1 1 2\r\n"
            ],
            [
                "1\r\n10\r\nS000000000\r\n0000000000\r\n0000000000\r\n0000000000\r\n0000001000\r\n0000000101\r\n0000000000\r\n0000000000\r\n0000000000\r\n000000000F\r\n",
                "2 9 10 10 9\r\n"
            ],
            [
                "1\r\n5\r\nS0000\r\n00000\r\n00000\r\n00000\r\n0000F\r\n",
                "2 4 5 5 4\r\n"
            ],
            [
                "1\r\n3\r\nS10\r\n010\r\n01F\r\n",
                "2 1 2 2 3\r\n"
            ],
            [
                "1\r\n3\r\nS10\r\n010\r\n11F\r\n",
                "2 1 2 2 3\r\n"
            ],
            [
                "1\r\n3\r\nS01\r\n111\r\n00F\r\n",
                "2 2 1 3 2\r\n"
            ]
        ]
    }
]