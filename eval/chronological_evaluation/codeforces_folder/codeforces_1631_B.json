[
    {
        "name": "Fun with Even Subarrays",
        "description": "You are given an array \n    a\n of \n    n\n elements. You can apply the\nfollowing operation to it any number of times: Select some subarray from\n\n    a\n of even size \n    2k\n that begins at position \n    l\n (\n    1\n    \u2264 l\n    \n    \u2264 l+2\n    \u00b7k-1\n    \u2264 n\n, \n    k \n    \u2265 1\n) and for each \n    i\n between\n\n    0\n and \n    k-1\n (inclusive), assign the value \n    a_l+k+i\n to\n\n    a_l+i\n. For example, if \n    a = [2, 1, 3, 4, 5, 3]\n, then choose \n    l\n    = 1\n and \n    k = 2\n, applying this operation the array will become \n    a =\n    [3, 4, 3, 4, 5, 3]\n. Find the minimum number of operations (possibly zero)\nneeded to make all the elements of the array equal. Input The input consists\nof multiple test cases. The first line contains a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 2 \n    \u00b7 10^4\n) \u2014 the number of test cases. Description of\nthe test cases follows. The first line of each test case contains an integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the length of the array.\nThe second line of each test case consists of \n    n\n integers \n    a_1, a_2,\n    \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n) \u2014 the elements of the array\n\n    a\n. It is guaranteed that the sum of \n    n\n over all test cases does not\nexceed \n    2 \n    \u00b7 10^5\n. Output Print \n    t\n lines, each line containing\nthe answer to the corresponding test case \u2014 the minimum number of operations\nneeded to make equal all the elements of the array with the given operation.\nExample Input 5 3 1 1 1 2 2 1 5 4 4 4 2 4 4 4 2 1 3 1 1 Output 0 1 1 2 0 Note\nIn the first test, all elements are equal, therefore no operations are needed.\nIn the second test, you can apply one operation with \n    k=1\n and \n    l=1\n,\nset \n    a_1 := a_2\n, and the array becomes \n    [1, 1]\n with \n    1\n\noperation. In the third test, you can apply one operation with \n    k=1\n and\n\n    l=4\n, set \n    a_4 := a_5\n, and the array becomes \n    [4, 4, 4, 4, 4]\n.\nIn the fourth test, you can apply one operation with \n    k=1\n and \n    l=3\n,\nset \n    a_3 := a_4\n, and the array becomes \n    [4, 2, 3, 3]\n, then you can\napply another operation with \n    k=2\n and \n    l=1\n, set \n    a_1 := a_3\n,\n\n    a_2 := a_4\n, and the array becomes \n    [3, 3, 3, 3]\n. In the fifth test,\nthere is only one element, therefore no operations are needed.\n\n",
        "cf_contest_id": 1631,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3\r\n1 1 1\r\n2\r\n2 1\r\n5\r\n4 4 4 2 4\r\n4\r\n4 2 1 3\r\n1\r\n1\r\n",
                "0\r\n1\r\n1\r\n2\r\n0\r\n"
            ]
        ],
        "private_cases": []
    }
]