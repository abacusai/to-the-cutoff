[
    {
        "name": "Errich-Tac-Toe (Hard Version)",
        "description": "The only difference between the easy and hard versions is that tokens of type\nO do not appear in the input of the easy version. Errichto gave Monogon the\nfollowing challenge in order to intimidate him from taking his top contributor\nspot on Codeforces. In a Tic-Tac-Toe grid, there are \n    n\n rows and \n    n\n\ncolumns. Each cell of the grid is either empty or contains a token. There are\ntwo types of tokens: X and O. If there exist three tokens of the same type\nconsecutive in a row or column, it is a winning configuration. Otherwise, it\nis a draw configuration. The patterns in the first row are winning\nconfigurations. The patterns in the second row are draw configurations. In an\noperation, you can change an X to an O, or an O to an X. Let \n    k\n denote\nthe total number of tokens in the grid. Your task is to make the grid a draw\nin at most \n    \u230a\n    k/3\n    \u230b\n (rounding down) operations.\nYou are not required to minimize the number of operations. Input The first\nline contains a single integer \n    t\n (\n    1\n    \u2264 t\n    \u2264 100\n) \u2014 the number\nof test cases. The first line of each test case contains a single integer\n\n    n\n (\n    1\n    \u2264 n\n    \u2264 300\n) \u2014 the size of the grid. The following\n\n    n\n lines each contain a string of \n    n\n characters, denoting the\ninitial grid. The character in the \n    i\n-th row and \n    j\n-th column is '.'\nif the cell is empty, or it is the type of token in the cell: 'X' or 'O'. It\nis guaranteed that not all cells are empty. The sum of \n    n\n across all test\ncases does not exceed \n    300\n. Output For each test case, print the state of\nthe grid after applying the operations. We have proof that a solution always\nexists. If there are multiple solutions, print any. Example Input 3 3 .O. OOO\n.O. 6 XXXOOO XXXOOO XX..OO OO..XX OOOXXX OOOXXX 5 .OOO. OXXXO OXXXO OXXXO\n.OOO. Output .O. OXO .O. OXXOOX XOXOXO XX..OO OO..XX OXOXOX XOOXXO .OXO. OOXXO\nXXOXX OXXOO .OXO. Note In the first test case, there are initially three 'O'\nconsecutive in the second row and the second column. By changing the middle\ntoken to 'X' we make the grid a draw, and we only changed \n    1\n    \u2264\n    \u230a\n    5/3\n    \u230b\n token. In the second test case, the final grid is a draw. We\nonly changed \n    8\n    \u2264\n    \u230a 32/3\n    \u230b\n tokens. In the third test\ncase, the final grid is a draw. We only changed \n    7\n    \u2264\n    \u230a\n    21/3\n    \u230b\n tokens.\n\n",
        "cf_contest_id": 1450,
        "cf_index": "C2",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3\r\n.O.\r\nOOO\r\n.O.\r\n6\r\nXXXOOO\r\nXXXOOO\r\nXX..OO\r\nOO..XX\r\nOOOXXX\r\nOOOXXX\r\n5\r\n.OOO.\r\nOXXXO\r\nOXXXO\r\nOXXXO\r\n.OOO.\r\n",
                ".O.\r\nOXO\r\n.O.\r\nOXXOOX\r\nXXOOXO\r\nXO..OO\r\nOO..XX\r\nOXOXXO\r\nXOOXOX\r\n.OXO.\r\nOXOXX\r\nXOXXO\r\nOXXOO\r\n.XOO.\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n3\r\n.X.\r\nXXX\r\n.X.\r\n6\r\nXX.XXX\r\nXXXXXX\r\nXXX.XX\r\nXXXXXX\r\nXX.X.X\r\nXXXXXX\r\n5\r\nXXX.X\r\n.X..X\r\nXXX.X\r\n..X..\r\n..X..\r\n",
                ".X.\r\nXOX\r\n.X.\r\nXX.XXO\r\nXOXXOX\r\nOXX.XX\r\nXXOXXO\r\nXO.X.X\r\nOXXOXX\r\nXOX.O\r\n.X..X\r\nXXO.X\r\n..X..\r\n..X..\r\n"
            ],
            [
                "1\r\n6\r\nXXXXXX\r\nXXXXXX\r\nXX..XX\r\nXX..XX\r\nXXXXXX\r\nXXXXXX\r\n",
                "XXOXXO\r\nXOXXOX\r\nOX..XX\r\nXX..XO\r\nXOXXOX\r\nOXXOXX\r\n"
            ]
        ]
    }
]