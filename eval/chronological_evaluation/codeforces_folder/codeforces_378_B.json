[
    {
        "name": "Semifinals",
        "description": "Two semifinals have just been in the running tournament. Each semifinal had n\nparticipants. There are n participants advancing to the finals, they are\nchosen as follows: from each semifinal, we choose k people (0 \u2264 2k \u2264 n) who\nshowed the best result in their semifinals and all other places in the finals\ngo to the people who haven't ranked in the top k in their semifinal but got to\nthe n - 2k of the best among the others. The tournament organizers hasn't yet\ndetermined the k value, so the participants want to know who else has any\nchance to get to the finals and who can go home. Input The first line contains\na single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of participants in each\nsemifinal. Each of the next n lines contains two integers ai and bi (1 \u2264 ai,\nbi \u2264 10^9) \u2014 the results of the i-th participant (the number of milliseconds\nhe needs to cover the semifinals distance) of the first and second semifinals,\ncorrespondingly. All results are distinct. Sequences a1, a2, ..., an and b1,\nb2, ..., bn are sorted in ascending order, i.e. in the order the participants\nfinished in the corresponding semifinal. Output Print two strings consisting\nof n characters, each equals either \"0\" or \"1\". The first line should\ncorrespond to the participants of the first semifinal, the second line should\ncorrespond to the participants of the second semifinal. The i-th character in\nthe j-th line should equal \"1\" if the i-th participant of the j-th semifinal\nhas any chances to advance to the finals, otherwise it should equal a \"0\".\nExamples Input 4 9840 9920 9860 9980 9930 10020 10040 10090 Output 1110 1100\nInput 4 9900 9850 9940 9930 10000 10020 10060 10110 Output 1100 1100 Note\nConsider the first sample. Each semifinal has 4 participants. The results of\nthe first semifinal are 9840, 9860, 9930, 10040. The results of the second\nsemifinal are 9920, 9980, 10020, 10090. If k = 0, the finalists are determined\nby the time only, so players 9840, 9860, 9920 and 9930 advance to the finals.\nIf k = 1, the winners from both semifinals move to the finals (with results\n9840 and 9920), and the other places are determined by the time (these places\ngo to the sportsmen who run the distance in 9860 and 9930 milliseconds). If k\n= 2, then first and second places advance from each seminfial, these are\nparticipants with results 9840, 9860, 9920 and 9980 milliseconds.\n\n",
        "cf_contest_id": 378,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n9840 9920\r\n9860 9980\r\n9930 10020\r\n10040 10090\r\n",
                "1110\r\n1100\r\n"
            ],
            [
                "4\r\n9900 9850\r\n9940 9930\r\n10000 10020\r\n10060 10110\r\n",
                "1100\r\n1100\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 2\r\n",
                "1\r\n0\r\n"
            ],
            [
                "1\r\n2 1\r\n",
                "0\r\n1\r\n"
            ],
            [
                "2\r\n1 2\r\n3 4\r\n",
                "10\r\n10\r\n"
            ],
            [
                "2\r\n3 1\r\n4 2\r\n",
                "10\r\n11\r\n"
            ],
            [
                "3\r\n1 3\r\n2 5\r\n4 6\r\n",
                "110\r\n100\r\n"
            ],
            [
                "3\r\n2 1\r\n4 3\r\n5 6\r\n",
                "100\r\n110\r\n"
            ],
            [
                "3\r\n1 4\r\n2 5\r\n3 6\r\n",
                "111\r\n100\r\n"
            ],
            [
                "4\r\n5 1\r\n6 2\r\n7 3\r\n8 4\r\n",
                "1100\r\n1111\r\n"
            ],
            [
                "2\r\n1 2\r\n4 3\r\n",
                "10\r\n10\r\n"
            ],
            [
                "3\r\n1 2\r\n3 5\r\n4 6\r\n",
                "110\r\n100\r\n"
            ],
            [
                "3\r\n1 2\r\n3 4\r\n5 6\r\n",
                "110\r\n100\r\n"
            ],
            [
                "3\r\n1 3\r\n2 4\r\n5 6\r\n",
                "110\r\n100\r\n"
            ],
            [
                "3\r\n1 3\r\n2 4\r\n6 5\r\n",
                "110\r\n100\r\n"
            ],
            [
                "3\r\n2 1\r\n3 4\r\n6 5\r\n",
                "110\r\n100\r\n"
            ],
            [
                "3\r\n1 2\r\n4 3\r\n6 5\r\n",
                "100\r\n110\r\n"
            ],
            [
                "3\r\n2 1\r\n3 5\r\n4 6\r\n",
                "110\r\n100\r\n"
            ],
            [
                "4\r\n1 4\r\n2 5\r\n3 6\r\n8 7\r\n",
                "1110\r\n1100\r\n"
            ],
            [
                "4\r\n1 3\r\n2 4\r\n7 5\r\n8 6\r\n",
                "1100\r\n1100\r\n"
            ],
            [
                "4\r\n2 1\r\n3 4\r\n6 5\r\n7 8\r\n",
                "1100\r\n1100\r\n"
            ],
            [
                "8\r\n100 101\r\n200 201\r\n300 301\r\n310 400\r\n320 500\r\n330 600\r\n340 700\r\n350 800\r\n",
                "11111000\r\n11110000\r\n"
            ]
        ]
    }
]