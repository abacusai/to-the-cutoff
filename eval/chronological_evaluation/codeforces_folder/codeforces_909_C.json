[
    {
        "name": "Python Indentation",
        "description": "In Python, code blocks don't have explicit begin/end or curly braces to mark\nbeginning and end of the block. Instead, code blocks are defined by\nindentation. We will consider an extremely simplified subset of Python with\nonly two types of statements. Simple statements are written in a single line,\none per line. An example of a simple statement is assignment. For statements\nare compound statements: they contain one or several other statements. For\nstatement consists of a header written in a separate line which starts with\n\"for\" prefix, and loop body. Loop body is a block of statements indented one\nlevel further than the header of the loop. Loop body can contain both types of\nstatements. Loop body can't be empty. You are given a sequence of statements\nwithout indentation. Find the number of ways in which the statements can be\nindented to form a valid Python program. Input The first line contains a\nsingle integer N (1 \u2264 N \u2264 5000) \u2014 the number of commands in the program. N\nlines of the program follow, each line describing a single command. Each\ncommand is either \"f\" (denoting \"for statement\") or \"s\" (\"simple statement\").\nIt is guaranteed that the last line is a simple statement. Output Output one\nline containing an integer - the number of ways the given sequence of\nstatements can be indented modulo 10^9 + 7. Examples Input 4 s f f s Output 1\nInput 4 f s f s Output 2 Note In the first test case, there is only one way to\nindent the program: the second for statement must be part of the body of the\nfirst one. simple statement for statement for statement simple statement In\nthe second test case, there are two ways to indent the program: the second for\nstatement can either be part of the first one's body or a separate statement\nfollowing the first one. for statement simple statement for statement simple\nstatement or for statement simple statement for statement simple statement\n\n",
        "cf_contest_id": 909,
        "cf_index": "C",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "dp"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\ns\r\nf\r\nf\r\ns\r\n",
                "1\r\n"
            ],
            [
                "4\r\nf\r\ns\r\nf\r\ns\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "156\r\nf\r\ns\r\nf\r\ns\r\nf\r\ns\r\ns\r\ns\r\ns\r\nf\r\ns\r\ns\r\nf\r\nf\r\ns\r\nf\r\nf\r\nf\r\nf\r\ns\r\ns\r\ns\r\nf\r\ns\r\ns\r\nf\r\nf\r\nf\r\nf\r\nf\r\nf\r\ns\r\ns\r\ns\r\ns\r\nf\r\ns\r\nf\r\ns\r\nf\r\ns\r\nf\r\nf\r\nf\r\nf\r\ns\r\ns\r\nf\r\nf\r\ns\r\ns\r\ns\r\ns\r\nf\r\ns\r\nf\r\ns\r\nf\r\ns\r\nf\r\ns\r\ns\r\ns\r\nf\r\ns\r\ns\r\nf\r\ns\r\nf\r\nf\r\ns\r\ns\r\ns\r\nf\r\nf\r\nf\r\nf\r\ns\r\ns\r\nf\r\nf\r\nf\r\nf\r\nf\r\nf\r\nf\r\ns\r\nf\r\ns\r\ns\r\ns\r\nf\r\nf\r\ns\r\ns\r\ns\r\ns\r\ns\r\nf\r\nf\r\nf\r\nf\r\ns\r\nf\r\nf\r\ns\r\nf\r\ns\r\ns\r\nf\r\nf\r\nf\r\ns\r\ns\r\ns\r\nf\r\ns\r\ns\r\nf\r\ns\r\nf\r\nf\r\nf\r\ns\r\nf\r\nf\r\ns\r\ns\r\nf\r\ns\r\nf\r\nf\r\ns\r\ns\r\ns\r\ns\r\nf\r\ns\r\nf\r\nf\r\ns\r\ns\r\nf\r\nf\r\nf\r\ns\r\ns\r\nf\r\nf\r\nf\r\ns\r\nf\r\ns\r\nf\r\nf\r\ns\r\n",
                "666443222\r\n"
            ],
            [
                "4\r\nf\r\nf\r\ns\r\ns\r\n",
                "3\r\n"
            ],
            [
                "2\r\nf\r\ns\r\n",
                "1\r\n"
            ],
            [
                "1\r\ns\r\n",
                "1\r\n"
            ],
            [
                "3\r\nf\r\nf\r\ns\r\n",
                "1\r\n"
            ],
            [
                "2\r\ns\r\ns\r\n",
                "1\r\n"
            ],
            [
                "156\r\ns\r\nf\r\ns\r\ns\r\ns\r\ns\r\nf\r\ns\r\ns\r\ns\r\nf\r\nf\r\ns\r\nf\r\nf\r\ns\r\nf\r\nf\r\nf\r\ns\r\nf\r\nf\r\ns\r\nf\r\nf\r\ns\r\ns\r\nf\r\nf\r\ns\r\nf\r\nf\r\nf\r\nf\r\nf\r\ns\r\ns\r\nf\r\ns\r\nf\r\nf\r\nf\r\ns\r\nf\r\nf\r\nf\r\ns\r\ns\r\ns\r\nf\r\ns\r\ns\r\nf\r\nf\r\ns\r\ns\r\nf\r\ns\r\nf\r\nf\r\ns\r\nf\r\nf\r\nf\r\ns\r\ns\r\nf\r\nf\r\ns\r\nf\r\ns\r\ns\r\ns\r\ns\r\ns\r\ns\r\ns\r\nf\r\ns\r\nf\r\nf\r\nf\r\ns\r\ns\r\ns\r\ns\r\nf\r\nf\r\ns\r\nf\r\nf\r\ns\r\ns\r\nf\r\ns\r\nf\r\ns\r\ns\r\nf\r\nf\r\nf\r\nf\r\nf\r\ns\r\nf\r\ns\r\ns\r\nf\r\nf\r\ns\r\nf\r\nf\r\ns\r\ns\r\ns\r\nf\r\ns\r\ns\r\ns\r\ns\r\nf\r\nf\r\ns\r\nf\r\nf\r\nf\r\nf\r\ns\r\nf\r\ns\r\ns\r\nf\r\nf\r\ns\r\nf\r\ns\r\nf\r\nf\r\nf\r\nf\r\ns\r\ns\r\nf\r\nf\r\nf\r\nf\r\ns\r\nf\r\ns\r\nf\r\ns\r\ns\r\ns\r\nf\r\nf\r\ns\r\n",
                "479461584\r\n"
            ],
            [
                "66\r\ns\r\nf\r\ns\r\ns\r\nf\r\ns\r\ns\r\ns\r\ns\r\nf\r\ns\r\ns\r\nf\r\nf\r\ns\r\ns\r\nf\r\ns\r\ns\r\nf\r\ns\r\ns\r\nf\r\nf\r\ns\r\ns\r\nf\r\nf\r\ns\r\ns\r\nf\r\ns\r\ns\r\ns\r\ns\r\nf\r\nf\r\ns\r\ns\r\nf\r\nf\r\ns\r\ns\r\nf\r\ns\r\ns\r\nf\r\ns\r\ns\r\nf\r\ns\r\ns\r\nf\r\nf\r\ns\r\nf\r\ns\r\ns\r\nf\r\nf\r\ns\r\nf\r\ns\r\nf\r\nf\r\ns\r\n",
                "392847498\r\n"
            ]
        ]
    }
]