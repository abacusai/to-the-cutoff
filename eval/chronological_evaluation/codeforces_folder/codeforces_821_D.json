[
    {
        "name": "Okabe and City",
        "description": "Okabe likes to be able to walk through his city on a path lit by street lamps.\nThat way, he doesn't get beaten up by schoolchildren. Okabe's city is\nrepresented by a 2D grid of cells. Rows are numbered from 1 to n from top to\nbottom, and columns are numbered 1 to m from left to right. Exactly k cells in\nthe city are lit by a street lamp. It's guaranteed that the top-left cell is\nlit. Okabe starts his walk from the top-left cell, and wants to reach the\nbottom-right cell. Of course, Okabe will only walk on lit cells, and he can\nonly move to adjacent cells in the up, down, left, and right directions.\nHowever, Okabe can also temporarily light all the cells in any single row or\ncolumn at a time if he pays 1 coin, allowing him to walk through some cells\nnot lit initially. Note that Okabe can only light a single row or column at a\ntime, and has to pay a coin every time he lights a new row or column. To\nchange the row or column that is temporarily lit, he must stand at a cell that\nis lit initially. Also, once he removes his temporary light from a row or\ncolumn, all cells in that row/column not initially lit are now not lit. Help\nOkabe find the minimum number of coins he needs to pay to complete his walk!\nInput The first line of input contains three space-separated integers n, m,\nand k (2 \u2264 n, m, k \u2264 10^4). Each of the next k lines contains two space-\nseparated integers ri and ci (1 \u2264 ri \u2264 n, 1 \u2264 ci \u2264 m) \u2014 the row and the column\nof the i-th lit cell. It is guaranteed that all k lit cells are distinct. It\nis guaranteed that the top-left cell is lit. Output Print the minimum number\nof coins Okabe needs to pay to complete his walk, or -1 if it's not possible.\nExamples Input 4 4 5 1 1 2 1 2 3 3 3 4 3 Output 2 Input 5 5 4 1 1 2 1 3 1 3 2\nOutput -1 Input 2 2 4 1 1 1 2 2 1 2 2 Output 0 Input 5 5 4 1 1 2 2 3 3 4 4\nOutput 3 Note In the first sample test, Okabe can take the path , paying only\nwhen moving to (2, 3) and (4, 4). In the fourth sample, Okabe can take the\npath , paying when moving to (1, 2), (3, 4), and (5, 4).\n\n",
        "cf_contest_id": 821,
        "cf_index": "D",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graphs",
            "shortest paths"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 4 5\r\n1 1\r\n2 1\r\n2 3\r\n3 3\r\n4 3\r\n",
                "2"
            ],
            [
                "5 5 4\r\n1 1\r\n2 1\r\n3 1\r\n3 2\r\n",
                "-1"
            ],
            [
                "2 2 4\r\n1 1\r\n1 2\r\n2 1\r\n2 2\r\n",
                "0"
            ],
            [
                "5 5 4\r\n1 1\r\n2 2\r\n3 3\r\n4 4\r\n",
                "3"
            ]
        ],
        "private_cases": [
            [
                "7 10 53\r\n1 1\r\n7 5\r\n2 3\r\n5 3\r\n1 9\r\n2 10\r\n6 1\r\n7 6\r\n2 9\r\n3 3\r\n3 4\r\n5 1\r\n5 4\r\n1 10\r\n4 1\r\n3 10\r\n7 7\r\n7 8\r\n7 1\r\n1 8\r\n2 4\r\n6 5\r\n3 5\r\n6 3\r\n6 6\r\n2 8\r\n3 6\r\n5 2\r\n3 8\r\n3 9\r\n5 5\r\n7 2\r\n3 1\r\n4 8\r\n1 3\r\n4 6\r\n2 1\r\n7 4\r\n1 7\r\n4 9\r\n6 8\r\n4 4\r\n5 8\r\n5 9\r\n2 5\r\n2 6\r\n3 2\r\n1 4\r\n2 7\r\n7 9\r\n4 7\r\n2 2\r\n4 5\r\n",
                "1"
            ],
            [
                "10 9 38\r\n1 1\r\n4 5\r\n1 8\r\n9 5\r\n3 4\r\n5 6\r\n1 7\r\n10 5\r\n5 7\r\n4 7\r\n4 6\r\n3 3\r\n6 6\r\n4 3\r\n9 6\r\n3 2\r\n4 2\r\n10 6\r\n2 2\r\n1 9\r\n2 9\r\n3 7\r\n3 9\r\n7 6\r\n3 8\r\n6 7\r\n10 7\r\n2 1\r\n6 8\r\n2 3\r\n3 1\r\n6 5\r\n5 5\r\n1 3\r\n5 8\r\n1 6\r\n4 9\r\n5 3\r\n",
                "2"
            ],
            [
                "7 9 7\r\n1 1\r\n7 8\r\n3 2\r\n5 3\r\n2 8\r\n4 8\r\n3 6\r\n",
                "2"
            ],
            [
                "7 9 48\r\n1 1\r\n3 9\r\n7 4\r\n7 8\r\n3 7\r\n4 9\r\n6 8\r\n5 9\r\n3 8\r\n5 8\r\n2 8\r\n7 3\r\n7 5\r\n6 5\r\n4 7\r\n7 2\r\n4 8\r\n2 7\r\n4 6\r\n6 6\r\n6 3\r\n6 9\r\n6 2\r\n6 4\r\n7 7\r\n5 7\r\n5 2\r\n5 5\r\n2 6\r\n7 1\r\n2 9\r\n3 6\r\n5 1\r\n3 5\r\n7 9\r\n3 4\r\n1 6\r\n1 5\r\n5 4\r\n7 6\r\n1 9\r\n1 4\r\n6 1\r\n4 1\r\n1 3\r\n1 2\r\n2 3\r\n4 5\r\n",
                "0"
            ],
            [
                "6 7 38\r\n1 1\r\n3 6\r\n3 2\r\n1 4\r\n5 4\r\n1 5\r\n3 3\r\n3 7\r\n5 5\r\n2 3\r\n6 5\r\n2 2\r\n5 3\r\n6 6\r\n4 7\r\n6 3\r\n2 4\r\n3 1\r\n4 1\r\n5 6\r\n4 5\r\n6 7\r\n2 6\r\n4 6\r\n5 2\r\n1 6\r\n3 4\r\n1 7\r\n4 3\r\n2 1\r\n2 7\r\n1 2\r\n1 3\r\n3 5\r\n5 1\r\n5 7\r\n6 4\r\n2 5\r\n",
                "0"
            ],
            [
                "6 8 43\r\n1 1\r\n6 2\r\n5 1\r\n1 7\r\n5 2\r\n1 8\r\n6 3\r\n2 7\r\n1 6\r\n2 6\r\n2 5\r\n5 3\r\n3 7\r\n4 7\r\n1 5\r\n4 1\r\n1 4\r\n3 5\r\n3 6\r\n4 3\r\n2 4\r\n3 1\r\n3 8\r\n4 6\r\n4 2\r\n4 8\r\n3 4\r\n1 3\r\n2 8\r\n6 1\r\n6 4\r\n2 1\r\n3 3\r\n5 8\r\n2 2\r\n2 3\r\n6 5\r\n6 8\r\n5 7\r\n1 2\r\n5 6\r\n5 4\r\n5 5\r\n",
                "0"
            ],
            [
                "7 11 72\r\n1 1\r\n7 3\r\n5 3\r\n6 10\r\n5 4\r\n5 5\r\n4 3\r\n6 9\r\n4 2\r\n7 2\r\n5 2\r\n5 1\r\n6 11\r\n4 5\r\n4 6\r\n3 5\r\n4 4\r\n3 6\r\n6 1\r\n3 7\r\n5 11\r\n2 7\r\n7 9\r\n3 4\r\n3 8\r\n6 4\r\n3 3\r\n3 9\r\n2 3\r\n6 5\r\n6 8\r\n6 3\r\n2 6\r\n3 10\r\n2 8\r\n5 6\r\n6 2\r\n6 7\r\n4 9\r\n5 10\r\n2 9\r\n4 8\r\n1 6\r\n7 7\r\n7 5\r\n5 7\r\n2 4\r\n6 6\r\n2 2\r\n1 3\r\n1 7\r\n4 7\r\n1 8\r\n4 1\r\n1 9\r\n7 8\r\n4 11\r\n1 5\r\n7 11\r\n7 6\r\n1 10\r\n1 4\r\n5 9\r\n3 1\r\n1 11\r\n7 1\r\n4 10\r\n2 1\r\n1 2\r\n5 8\r\n2 10\r\n7 10\r\n",
                "0"
            ],
            [
                "6 7 2\r\n1 1\r\n6 1\r\n",
                "2"
            ],
            [
                "7 10 24\r\n1 1\r\n4 7\r\n7 1\r\n5 8\r\n5 3\r\n7 4\r\n5 7\r\n7 5\r\n4 8\r\n6 5\r\n7 6\r\n6 4\r\n5 2\r\n6 3\r\n4 2\r\n6 1\r\n3 8\r\n4 1\r\n6 2\r\n3 1\r\n5 5\r\n2 8\r\n4 3\r\n4 6\r\n",
                "2"
            ],
            [
                "9 10 69\r\n1 1\r\n6 8\r\n1 8\r\n4 4\r\n2 1\r\n5 6\r\n1 4\r\n6 7\r\n5 8\r\n4 8\r\n7 8\r\n2 4\r\n1 3\r\n8 8\r\n8 7\r\n3 8\r\n8 9\r\n2 2\r\n4 9\r\n7 9\r\n1 7\r\n1 9\r\n4 5\r\n3 9\r\n8 10\r\n5 9\r\n3 1\r\n9 9\r\n7 10\r\n4 3\r\n1 10\r\n3 10\r\n2 5\r\n2 8\r\n4 10\r\n2 9\r\n4 1\r\n2 10\r\n1 6\r\n1 5\r\n5 7\r\n1 2\r\n3 4\r\n6 10\r\n2 6\r\n8 6\r\n4 6\r\n9 7\r\n5 5\r\n3 6\r\n4 7\r\n7 7\r\n6 6\r\n6 5\r\n5 4\r\n3 3\r\n7 6\r\n2 7\r\n9 6\r\n8 5\r\n3 7\r\n4 2\r\n9 10\r\n5 2\r\n9 8\r\n6 2\r\n5 10\r\n5 3\r\n5 1\r\n",
                "0"
            ],
            [
                "6 11 35\r\n1 1\r\n6 9\r\n5 2\r\n5 4\r\n2 8\r\n3 2\r\n4 3\r\n6 2\r\n3 3\r\n6 4\r\n3 1\r\n2 9\r\n6 8\r\n5 5\r\n2 7\r\n6 1\r\n5 9\r\n4 5\r\n2 2\r\n2 6\r\n1 8\r\n4 4\r\n6 3\r\n2 10\r\n4 6\r\n3 4\r\n6 7\r\n4 1\r\n2 1\r\n5 6\r\n2 4\r\n6 10\r\n3 10\r\n6 5\r\n3 8\r\n",
                "1"
            ],
            [
                "6 7 2\r\n1 1\r\n3 2\r\n",
                "-1"
            ],
            [
                "5 10 48\r\n1 1\r\n3 7\r\n5 8\r\n5 2\r\n3 4\r\n5 7\r\n4 2\r\n4 8\r\n5 3\r\n3 6\r\n5 9\r\n2 4\r\n1 4\r\n4 4\r\n4 1\r\n4 3\r\n5 1\r\n3 3\r\n4 6\r\n3 5\r\n5 4\r\n2 5\r\n5 6\r\n1 3\r\n1 2\r\n2 3\r\n4 9\r\n3 8\r\n2 2\r\n1 5\r\n5 10\r\n1 6\r\n2 6\r\n5 5\r\n4 7\r\n4 5\r\n4 10\r\n3 2\r\n3 9\r\n1 7\r\n2 7\r\n2 1\r\n2 9\r\n3 10\r\n1 8\r\n3 1\r\n2 8\r\n2 10\r\n",
                "0"
            ],
            [
                "7 7 18\r\n1 1\r\n5 4\r\n3 4\r\n6 7\r\n5 6\r\n7 7\r\n3 5\r\n6 6\r\n6 4\r\n4 5\r\n2 4\r\n2 3\r\n1 3\r\n5 7\r\n6 5\r\n2 2\r\n5 5\r\n3 6\r\n",
                "1"
            ],
            [
                "7 8 50\r\n1 1\r\n3 1\r\n4 5\r\n2 7\r\n1 5\r\n5 8\r\n4 3\r\n5 3\r\n3 5\r\n5 4\r\n3 6\r\n4 6\r\n6 8\r\n4 7\r\n7 8\r\n7 7\r\n2 5\r\n6 4\r\n1 4\r\n3 2\r\n2 8\r\n5 2\r\n3 7\r\n1 3\r\n4 4\r\n3 3\r\n6 5\r\n6 7\r\n5 5\r\n1 8\r\n5 6\r\n2 3\r\n4 1\r\n7 4\r\n7 6\r\n4 8\r\n2 6\r\n6 6\r\n7 5\r\n1 2\r\n6 3\r\n5 1\r\n4 2\r\n3 8\r\n3 4\r\n7 3\r\n2 2\r\n7 2\r\n7 1\r\n6 2\r\n",
                "0"
            ],
            [
                "10 7 68\r\n1 1\r\n9 2\r\n8 4\r\n4 1\r\n4 5\r\n2 6\r\n7 1\r\n3 6\r\n5 5\r\n7 4\r\n2 5\r\n6 4\r\n9 1\r\n9 4\r\n2 4\r\n8 3\r\n7 3\r\n3 5\r\n3 7\r\n8 2\r\n5 4\r\n10 4\r\n6 1\r\n2 7\r\n1 4\r\n6 3\r\n7 2\r\n10 3\r\n1 5\r\n4 7\r\n2 3\r\n5 3\r\n1 7\r\n4 3\r\n8 5\r\n5 7\r\n3 3\r\n5 6\r\n6 5\r\n9 5\r\n1 6\r\n5 2\r\n6 6\r\n10 1\r\n7 5\r\n10 2\r\n8 1\r\n1 3\r\n10 5\r\n8 6\r\n3 1\r\n6 2\r\n2 1\r\n3 2\r\n4 4\r\n1 2\r\n5 1\r\n4 2\r\n9 3\r\n6 7\r\n9 6\r\n2 2\r\n3 4\r\n8 7\r\n4 6\r\n10 6\r\n7 6\r\n7 7\r\n",
                "1"
            ],
            [
                "9 10 3\r\n1 1\r\n6 6\r\n8 4\r\n",
                "-1"
            ],
            [
                "6 8 30\r\n1 1\r\n2 5\r\n6 6\r\n3 8\r\n5 5\r\n3 2\r\n1 5\r\n3 1\r\n3 3\r\n5 6\r\n5 4\r\n4 4\r\n6 5\r\n6 7\r\n3 4\r\n4 6\r\n2 4\r\n5 3\r\n1 6\r\n4 1\r\n2 6\r\n5 7\r\n6 8\r\n2 8\r\n5 8\r\n4 3\r\n4 7\r\n3 5\r\n2 2\r\n4 8\r\n",
                "1"
            ],
            [
                "9 10 55\r\n1 1\r\n3 7\r\n2 9\r\n2 4\r\n3 6\r\n1 4\r\n2 7\r\n2 10\r\n3 8\r\n4 8\r\n1 9\r\n3 5\r\n1 8\r\n1 7\r\n1 5\r\n3 10\r\n1 10\r\n4 5\r\n4 4\r\n3 9\r\n5 5\r\n4 7\r\n4 6\r\n5 7\r\n4 10\r\n1 6\r\n1 3\r\n6 7\r\n2 6\r\n7 7\r\n3 4\r\n4 9\r\n2 8\r\n3 3\r\n5 10\r\n5 8\r\n2 5\r\n7 8\r\n3 2\r\n8 8\r\n2 3\r\n6 10\r\n7 9\r\n2 2\r\n7 6\r\n3 1\r\n6 5\r\n4 1\r\n5 9\r\n6 9\r\n5 1\r\n1 2\r\n8 6\r\n5 6\r\n5 2\r\n",
                "1"
            ],
            [
                "6 8 20\r\n1 1\r\n5 8\r\n2 3\r\n5 1\r\n6 4\r\n2 7\r\n4 4\r\n6 5\r\n4 1\r\n6 3\r\n2 4\r\n5 7\r\n4 5\r\n2 8\r\n3 7\r\n4 6\r\n6 2\r\n5 6\r\n6 7\r\n4 3\r\n",
                "2"
            ],
            [
                "5 10 5\r\n1 1\r\n3 2\r\n5 8\r\n3 6\r\n1 8\r\n",
                "3"
            ],
            [
                "3 4 2\r\n1 1\r\n2 1\r\n",
                "1"
            ],
            [
                "5 6 4\r\n1 1\r\n2 1\r\n3 1\r\n4 1\r\n",
                "1"
            ],
            [
                "5 6 5\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n",
                "1"
            ],
            [
                "3 3 2\r\n1 1\r\n3 3\r\n",
                "1"
            ]
        ]
    }
]