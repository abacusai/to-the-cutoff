[
    {
        "name": "Ilya and Two Numbers",
        "description": "Ilya has recently taken up archaeology. He's recently found two numbers,\nwritten in the m-based notation. Each of the found numbers consisted of\nexactly n digits. Ilya immediately started looking for information about those\nnumbers. He learned that the numbers are part of a cyphered code and the one\nwho can decypher it can get the greatest treasure. After considerable research\nIlya understood that to decypher the code, he should do the following:\nRearrange digits in the first number in some manner. Similarly, rearrange\ndigits in the second number in some manner. As a result of this operation, the\nnumbers can get leading zeroes. Add numbers, digit by digit, modulo m. In\nother words, we need to get the third number of length n, each digit of the\nnumber is the sum of the respective numbers of the found numbers. For example,\nsuppose there are two numbers recorded in the ternary notation, 001210 and\n012111, then if you add them to each other digit by digit modulo 3, you will\nget number 010021. The key to the code is the maximum possible number that can\nbe obtained in the previous step. Help Ilya, find the key to the code. Input\nThe first line contains two integers n, m (1 \u2264 n, m \u2264 10^5, m > 1). The second\nline contains the first found number, the third line contains the second found\nnumber. The numbers are recorded as a sequence of digits in the m-based\nnotation. Each digit is an integer from 0 to m - 1. The digits in the line are\nwritten in the order from the most significant digits to the least significant\nones. The given numbers can contain leading zeroes. Output Print n m-base\ndigits. The resulting third number written in the m-based notation. Print the\ndigits in the order from the most significant digits to the least significant\nones. Examples Input 4 7 5 4 3 2 5 6 5 4 Output 6 4 2 1 Input 5 5 2 4 4 1 3 1\n0 1 2 4 Output 4 4 4 3 2\n\n",
        "cf_contest_id": 313,
        "cf_index": "E",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "dsu",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 7\r\n5 4 3 2\r\n5 6 5 4\r\n",
                "6 4 2 1 \r\n"
            ],
            [
                "5 5\r\n2 4 4 1 3\r\n1 0 1 2 4\r\n",
                "4 4 4 3 2 \r\n"
            ]
        ],
        "private_cases": [
            [
                "4 6\r\n3 5 0 0\r\n2 5 2 3\r\n",
                "5 5 3 1 \r\n"
            ],
            [
                "1 5\r\n4\r\n4\r\n",
                "3 \r\n"
            ],
            [
                "6 3\r\n2 2 2 1 2 0\r\n2 1 2 1 2 2\r\n",
                "2 2 1 1 1 0 \r\n"
            ],
            [
                "5 7\r\n1 6 3 2 1\r\n3 5 0 3 1\r\n",
                "6 6 6 5 2 \r\n"
            ],
            [
                "6 9\r\n4 5 0 5 5 5\r\n1 1 2 1 2 3\r\n",
                "8 7 7 6 5 1 \r\n"
            ],
            [
                "7 11\r\n7 3 4 7 0 7 7\r\n4 6 9 1 10 7 1\r\n",
                "10 10 10 8 8 5 0 \r\n"
            ],
            [
                "2 5\r\n0 1\r\n3 3\r\n",
                "4 3 \r\n"
            ],
            [
                "1 2\r\n0\r\n0\r\n",
                "0 \r\n"
            ],
            [
                "1 2\r\n1\r\n0\r\n",
                "1 \r\n"
            ],
            [
                "1 2\r\n1\r\n1\r\n",
                "0 \r\n"
            ],
            [
                "1 2\r\n0\r\n1\r\n",
                "1 \r\n"
            ]
        ]
    }
]