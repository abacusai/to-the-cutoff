[
    {
        "name": "Coloring",
        "description": "You are given \n    n\n points on the plane, the coordinates of the \n    i\n-th\npoint are \n    (x_i, y_i)\n. No two points have the same coordinates. The\ndistance between points \n    i\n and \n    j\n is defined as \n    d(i,j) = |x_i -\n    x_j| + |y_i - y_j|\n. For each point, you have to choose a color, represented\nby an integer from \n    1\n to \n    n\n. For every ordered triple of different\npoints \n    (a,b,c)\n, the following constraints should be met: if \n    a\n,\n\n    b\n and \n    c\n have the same color, then \n    d(a,b) = d(a,c) = d(b,c)\n;\nif \n    a\n and \n    b\n have the same color, and the color of \n    c\n is\ndifferent from the color of \n    a\n, then \n    d(a,b) < d(a,c)\n and \n    d(a,b)\n    < d(b,c)\n. Calculate the number of different ways to choose the colors that\nmeet these constraints. Input The first line contains one integer \n    n\n\n(\n    2 \n    \u2264 n \n    \u2264 100\n) \u2014 the number of points. Then \n    n\n lines follow.\nThe \n    i\n-th of them contains two integers \n    x_i\n and \n    y_i\n (\n    0\n    \n    \u2264 x_i, y_i \n    \u2264 10^8\n). No two points have the same coordinates (i. e.\nif \n    i \n     j\n, then either \n    x_i \n     x_j\n or \n    y_i \n     y_j\n).\nOutput Print one integer \u2014 the number of ways to choose the colors for the\npoints. Since it can be large, print it modulo \n    998244353\n. Examples Input\n3 1 0 3 0 2 1 Output 9 Input 5 1 2 2 4 3 4 4 4 1 3 Output 240 Input 4 1 0 3 0\n2 1 2 0 Output 24 Note In the first test, the following ways to choose the\ncolors are suitable: \n    [1, 1, 1]\n; \n    [2, 2, 2]\n; \n    [3, 3, 3]\n; \n    [1,\n    2, 3]\n; \n    [1, 3, 2]\n; \n    [2, 1, 3]\n; \n    [2, 3, 1]\n; \n    [3, 1, 2]\n;\n\n    [3, 2, 1]\n.\n\n",
        "cf_contest_id": 1697,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "combinatorics",
            "constructive algorithms",
            "dp",
            "geometry",
            "graphs",
            "greedy",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n1 0\r\n3 0\r\n2 1\r\n",
                "9"
            ],
            [
                "5\r\n1 2\r\n2 4\r\n3 4\r\n4 4\r\n1 3\r\n",
                "240"
            ],
            [
                "4\r\n1 0\r\n3 0\r\n2 1\r\n2 0\r\n",
                "24"
            ]
        ],
        "private_cases": [
            [
                "4\r\n10 0\r\n0 10\r\n10 20\r\n20 10\r\n",
                "28"
            ],
            [
                "20\r\n16 2\r\n6 17\r\n2 13\r\n10 8\r\n20 7\r\n12 18\r\n15 12\r\n1 20\r\n19 9\r\n17 12\r\n2 18\r\n20 3\r\n20 20\r\n20 10\r\n6 18\r\n16 0\r\n13 6\r\n17 13\r\n8 11\r\n5 18\r\n",
                "944607917"
            ],
            [
                "20\r\n12 18\r\n5 1\r\n20 12\r\n11 12\r\n20 16\r\n7 1\r\n5 4\r\n3 16\r\n13 4\r\n15 10\r\n3 7\r\n17 20\r\n9 5\r\n7 8\r\n4 15\r\n7 20\r\n5 18\r\n7 19\r\n14 10\r\n5 6\r\n",
                "638076335"
            ],
            [
                "20\r\n8 9\r\n9 14\r\n13 19\r\n18 16\r\n11 7\r\n6 18\r\n20 15\r\n1 16\r\n5 15\r\n12 12\r\n12 19\r\n15 16\r\n18 12\r\n14 0\r\n5 19\r\n0 18\r\n19 15\r\n15 6\r\n9 7\r\n11 0\r\n",
                "638076335"
            ],
            [
                "20\r\n0 1\r\n17 19\r\n15 8\r\n15 20\r\n1 4\r\n14 11\r\n9 5\r\n5 3\r\n14 18\r\n7 17\r\n12 19\r\n6 12\r\n2 9\r\n19 8\r\n6 10\r\n17 16\r\n20 8\r\n0 20\r\n15 13\r\n1 12\r\n",
                "864556287"
            ],
            [
                "20\r\n14 0\r\n16 19\r\n16 7\r\n4 20\r\n19 15\r\n8 5\r\n5 11\r\n1 15\r\n16 18\r\n6 13\r\n5 14\r\n19 20\r\n7 13\r\n7 20\r\n20 8\r\n14 9\r\n18 4\r\n7 0\r\n9 4\r\n5 19\r\n",
                "864556287"
            ],
            [
                "8\r\n10 0\r\n11 0\r\n0 10\r\n0 11\r\n10 20\r\n10 19\r\n20 10\r\n19 10\r\n",
                "351120"
            ],
            [
                "8\r\n10 0\r\n0 10\r\n10 20\r\n20 10\r\n110 0\r\n100 10\r\n110 20\r\n120 10\r\n",
                "53816"
            ],
            [
                "4\r\n0 0\r\n2 0\r\n1 1\r\n0 2\r\n",
                "24"
            ],
            [
                "4\r\n0 0\r\n0 2\r\n2 0\r\n1 1\r\n",
                "24"
            ],
            [
                "2\r\n1 1\r\n2 2\r\n",
                "4"
            ]
        ]
    }
]