[
    {
        "name": "Timofey and Black-White Tree",
        "description": "Timofey came to a famous summer school and found a tree on \n    n\n vertices. A\ntree is a connected undirected graph without cycles. Every vertex of this\ntree, except \n    c_0\n, is colored white. The vertex \n    c_0\n is colored\nblack. Timofey wants to color all the vertices of this tree in black. To do\nthis, he performs \n    n - 1\n operations. During the \n    i\n-th operation, he\nselects the vertex \n    c_i\n, which is currently white, and paints it black.\nLet's call the positivity of tree the minimum distance between all pairs of\ndifferent black vertices in it. The distance between the vertices \n    v\n and\n\n    u\n is the number of edges on the path from \n    v\n to \n    u\n. After each\noperation, Timofey wants to know the positivity of the current tree. Input The\nfirst line contains the integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the\nnumber of testcases. The first line of each testcase contains the integers\n\n    n, c_0\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n, \n    1 \n    \u2264 c_0 \n    \u2264 n\n)\n\u2014 the number of vertices in the tree and index of the initial black vertex.\nThe second line of each testcase contains \n    n - 1\n unique integers \n    c_1,\n    c_2, \n    \u2026, c_n-1\n (\n    1 \n    \u2264 c_i \n    \u2264 n\n, \n    c_i \n     c_0\n),\nwhere \n    c_i\n is the vertex which is colored black during the \n    i\n-th\noperation. Each of the next \n    n - 1\n row of each testcase contains the\nintegers \n    v_i, u_i\n (\n    1 \n    \u2264 v_i, u_i \n    \u2264 n\n) \u2014 edges in the tree.\nIt is guaranteed that the sum of \n    n\n for all testcases does not exceed\n\n    2 \n    \u00b7 10^5\n. Output For each testcase, print \n    n - 1\n integer on a\nseparate line. The integer with index \n    i\n must be equal to positivity of\nthe tree obtained by the first \n    i\n operations. Example Input 6 6 6 4 1 3 5\n2 2 4 6 5 5 3 3 4 1 3 4 2 4 1 3 3 1 2 3 1 4 10 3 10 7 6 5 2 9 8 1 4 1 2 1 3 4\n5 4 3 6 4 8 7 9 8 10 8 1 8 7 3 7 5 1 2 4 6 1 2 3 2 4 5 3 4 6 5 7 6 9 7 9 3 1 4\n2 6 8 5 4 1 8 9 4 8 2 6 7 3 2 4 3 5 5 4 10 2 1 8 5 10 6 9 4 3 7 10 7 7 8 3 6 9\n7 7 6 4 2 1 6 7 5 9 2 Output 3 2 1 1 1 3 1 1 3 2 2 2 2 2 1 1 1 4 2 2 1 1 1 5 1\n1 1 1 1 1 1 4 3 2 2 1 1 1 1 1 Note In the first testcase, after the second\noperation, the tree looks like this: The distance between vertices \n    1\n and\n\n    6\n is \n    3\n, the distance between vertices \n    4\n and \n    6\n is\n\n    3\n, the distance between vertices \n    1\n and \n    4\n is \n    2\n. The\npositivity of this tree is equal to the minimum of these distances. It equals\n\n    2\n. In the third testcase, after the fourth operation, the tree looks\nlike this: The positivity of this tree is \n    2\n.\n\n",
        "cf_contest_id": 1790,
        "cf_index": "F",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dfs and similar",
            "divide and conquer",
            "graphs",
            "greedy",
            "math",
            "shortest paths",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n6 6\r\n4 1 3 5 2\r\n2 4\r\n6 5\r\n5 3\r\n3 4\r\n1 3\r\n4 2\r\n4 1 3\r\n3 1\r\n2 3\r\n1 4\r\n10 3\r\n10 7 6 5 2 9 8 1 4\r\n1 2\r\n1 3\r\n4 5\r\n4 3\r\n6 4\r\n8 7\r\n9 8\r\n10 8\r\n1 8\r\n7 3\r\n7 5 1 2 4 6\r\n1 2\r\n3 2\r\n4 5\r\n3 4\r\n6 5\r\n7 6\r\n9 7\r\n9 3 1 4 2 6 8 5\r\n4 1\r\n8 9\r\n4 8\r\n2 6\r\n7 3\r\n2 4\r\n3 5\r\n5 4\r\n10 2\r\n1 8 5 10 6 9 4 3 7\r\n10 7\r\n7 8\r\n3 6\r\n9 7\r\n7 6\r\n4 2\r\n1 6\r\n7 5\r\n9 2\r\n",
                "3 2 1 1 1 \r\n3 1 1 \r\n3 2 2 2 2 2 1 1 1 \r\n4 2 2 1 1 1 \r\n5 1 1 1 1 1 1 1 \r\n4 3 2 2 1 1 1 1 1 \r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n11 1\r\n11 7 2 3 4 5 6 8 9 10\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n4 8\r\n8 9\r\n9 10\r\n10 11\r\n",
                "7 6 1 1 1 1 1 1 1 1 \r\n"
            ]
        ]
    }
]