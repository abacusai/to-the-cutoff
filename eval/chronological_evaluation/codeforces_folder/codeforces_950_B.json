[
    {
        "name": "Intercepted Message",
        "description": "Hacker Zhorik wants to decipher two secret messages he intercepted yesterday.\nYeah message is a sequence of encrypted blocks, each of them consists of\nseveral bytes of information. Zhorik knows that each of the messages is an\narchive containing one or more files. Zhorik knows how each of these archives\nwas transferred through the network: if an archive consists of k files of\nsizes l1, l2, ..., lk bytes, then the i-th file is split to one or more blocks\nbi, 1, bi, 2, ..., bi, mi (here the total length of the blocks bi, 1 + bi, 2 +\n... + bi, mi is equal to the length of the file li), and after that all blocks\nare transferred through the network, maintaining the order of files in the\narchive. Zhorik thinks that the two messages contain the same archive, because\ntheir total lengths are equal. However, each file can be split in blocks in\ndifferent ways in the two messages. You are given the lengths of blocks in\neach of the two messages. Help Zhorik to determine what is the maximum number\nof files could be in the archive, if the Zhorik's assumption is correct. Input\nThe first line contains two integers n, m (1 \u2264 n, m \u2264 10^5) \u2014 the number of\nblocks in the first and in the second messages. The second line contains n\nintegers x1, x2, ..., xn (1 \u2264 xi \u2264 10^6) \u2014 the length of the blocks that form\nthe first message. The third line contains m integers y1, y2, ..., ym (1 \u2264 yi\n\u2264 10^6) \u2014 the length of the blocks that form the second message. It is\nguaranteed that x1 + ... + xn = y1 + ... + ym. Also, it is guaranteed that x1\n+ ... + xn \u2264 10^6. Output Print the maximum number of files the intercepted\narray could consist of. Examples Input 7 6 2 5 3 1 11 4 4 7 8 2 4 1 8 Output 3\nInput 3 3 1 10 100 1 100 10 Output 2 Input 1 4 4 1 1 1 1 Output 1 Note In the\nfirst example the maximum number of files in the archive is 3. For example, it\nis possible that in the archive are three files of sizes 2 + 5 = 7, 15 = 3 + 1\n+ 11 = 8 + 2 + 4 + 1 and 4 + 4 = 8. In the second example it is possible that\nthe archive contains two files of sizes 1 and 110 = 10 + 100 = 100 + 10. Note\nthat the order of files is kept while transferring archives through the\nnetwork, so we can't say that there are three files of sizes 1, 10 and 100. In\nthe third example the only possibility is that the archive contains a single\nfile of size 4.\n\n",
        "cf_contest_id": 950,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "7 6\r\n2 5 3 1 11 4 4\r\n7 8 2 4 1 8\r\n",
                "3\r\n"
            ],
            [
                "3 3\r\n1 10 100\r\n1 100 10\r\n",
                "2\r\n"
            ],
            [
                "1 4\r\n4\r\n1 1 1 1\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1000000\r\n1000000\r\n",
                "1\r\n"
            ],
            [
                "3 5\r\n2 2 9\r\n2 1 4 2 4\r\n",
                "2\r\n"
            ],
            [
                "5 3\r\n1 1 4 1 2\r\n1 4 4\r\n",
                "2\r\n"
            ],
            [
                "30 50\r\n3 3 1 3 1 2 4 3 4 1 3 2 3 3 2 3 2 1 3 4 2 1 1 3 2 2 1 3 1 60\r\n4 4 1 2 2 2 3 1 3 2 1 2 4 4 2 1 2 3 1 3 4 4 3 3 4 4 4 1 2 1 3 3 1 1 3 3 4 3 2 3 2 4 1 4 2 3 2 2 3 1\r\n",
                "12\r\n"
            ],
            [
                "50 50\r\n5733 740 547 3647 5382 5109 6842 7102 5879 1502 3574 1628 7905 4357 8569 9564 8268 3542 2487 8532 425 7713 2585 925 6458 2697 2844 69 324 9030 495 4428 6724 3524 3304 4874 1303 2098 1136 1048 2464 7316 274 9586 534 2450 2368 8060 7795 70692\r\n1918 4122 6806 4914 6517 6278 9842 9480 6609 4221 9373 1728 9508 9778 8578 5589 2673 6618 6031 9016 4017 6671 6008 2268 5154 9614 6834 9512 9618 6424 1736 1464 6520 9812 1722 9197 2412 2699 73 968 2906 2715 6573 8675 548 7061 5455 88 5565 2544\r\n",
                "1\r\n"
            ],
            [
                "1 2\r\n2\r\n1 1\r\n",
                "1\r\n"
            ],
            [
                "1 2\r\n1000000\r\n999999 1\r\n",
                "1\r\n"
            ],
            [
                "2 2\r\n1 1\r\n1 1\r\n",
                "2\r\n"
            ],
            [
                "2 2\r\n500000 500000\r\n1 999999\r\n",
                "1\r\n"
            ],
            [
                "2 2\r\n2 3\r\n4 1\r\n",
                "1\r\n"
            ],
            [
                "2 2\r\n2 3\r\n3 2\r\n",
                "1\r\n"
            ],
            [
                "2 2\r\n2 3\r\n2 3\r\n",
                "2\r\n"
            ],
            [
                "2 3\r\n2 2\r\n1 1 2\r\n",
                "2\r\n"
            ],
            [
                "1 1\r\n1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "2 3\r\n3 2\r\n2 1 2\r\n",
                "2\r\n"
            ],
            [
                "2 3\r\n2 3\r\n2 1 2\r\n",
                "2\r\n"
            ],
            [
                "50 30\r\n2 3 1 2 2 4 3 4 3 2 1 4 2 3 1 3 1 2 2 3 1 1 1 2 3 1 4 3 1 2 1 2 2 1 2 4 4 3 3 2 2 1 1 1 2 2 2 4 3 3\r\n3 3 3 4 1 4 1 4 4 1 3 4 3 1 2 4 2 1 4 2 3 1 1 2 2 1 2 4 1 41\r\n",
                "12\r\n"
            ],
            [
                "50 50\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "50\r\n"
            ],
            [
                "31 31\r\n5745 258 5486 13779 20931 407 1478 49032 30787 4957 36603 1034 5011 22319 50560 34419 22036 18235 62551 89259 36093 126169 106027 1673 52983 50127 640 30714 54574 20129 45984\r\n5745 258 5486 13779 20931 407 1478 49032 30787 4957 36603 1034 5011 22319 50560 34419 22036 18235 62551 89259 36093 126169 106027 1673 52983 50127 640 30714 54574 20129 45984\r\n",
                "31\r\n"
            ],
            [
                "3 6\r\n8 4 1\r\n1 8 1 1 1 1\r\n",
                "2\r\n"
            ]
        ]
    }
]