[
    {
        "name": "Rotating Substrings",
        "description": "You are given two strings \n    s\n and \n    t\n, each of length \n    n\n and\nconsisting of lowercase Latin alphabets. You want to make \n    s\n equal to\n\n    t\n. You can perform the following operation on \n    s\n any number of\ntimes to achieve it \u2014 Choose any substring of \n    s\n and rotate it clockwise\nonce, that is, if the selected substring is \n    s[l,l+1...r]\n, then it\nbecomes \n    s[r,l,l + 1 ... r - 1]\n. All the remaining characters of \n    s\n\nstay in their position. For example, on rotating the substring \n    [2,4]\n ,\nstring \"abcde\" becomes \"adbce\". A string \n    a\n is a substring of a string\n\n    b\n if \n    a\n can be obtained from \n    b\n by deletion of several\n(possibly, zero or all) characters from the beginning and several (possibly,\nzero or all) characters from the end. Find the minimum number of operations\nrequired to convert \n    s\n to \n    t\n, or determine that it's impossible.\nInput The first line of the input contains a single integer \n    t\n\n\n    (1\n    \u2264 t \n    \u2264 2000)\n \u2014 the number of test cases. The description of\nthe test cases follows. The first line of each test case contains a single\ninteger \n    n\n \n    (1\n    \u2264 n \n    \u2264 2000)\n \u2014 the length of the strings. The\nsecond and the third lines contain strings \n    s\n and \n    t\n respectively.\nThe sum of \n    n\n over all the test cases does not exceed \n    2000\n. Output\nFor each test case, output the minimum number of operations to convert \n    s\n\nto \n    t\n. If it is not possible to convert \n    s\n to \n    t\n, output\n\n    -1\n instead. Example Input 6 1 a a 2 ab ba 3 abc cab 3 abc cba 4 abab\nbaba 4 abcc aabc Output 0 1 1 2 1 -1 Note For the \n    1\n-st test case, since\n\n    s\n and \n    t\n are equal, you don't need to apply any operation. For the\n\n    2\n-nd test case, you only need to apply one operation on the entire\nstring ab to convert it to ba. For the \n    3\n-rd test case, you only need to\napply one operation on the entire string abc to convert it to cab. For the\n\n    4\n-th test case, you need to apply the operation twice: first on the\nentire string abc to convert it to cab and then on the substring of length\n\n    2\n beginning at the second character to convert it to cba. For the\n\n    5\n-th test case, you only need to apply one operation on the entire\nstring abab to convert it to baba. For the \n    6\n-th test case, it is not\npossible to convert string \n    s\n to \n    t\n.\n\n",
        "cf_contest_id": 1363,
        "cf_index": "F",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n1\r\na\r\na\r\n2\r\nab\r\nba\r\n3\r\nabc\r\ncab\r\n3\r\nabc\r\ncba\r\n4\r\nabab\r\nbaba\r\n4\r\nabcc\r\naabc\r\n",
                "0\r\n1\r\n1\r\n2\r\n1\r\n-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\na\r\na\r\n",
                "0\r\n"
            ],
            [
                "3\r\n2\r\naa\r\naa\r\n2\r\nab\r\nab\r\n2\r\nab\r\nba\r\n",
                "0\r\n0\r\n1\r\n"
            ],
            [
                "16\r\n3\r\naaa\r\naaa\r\n3\r\naab\r\naab\r\n3\r\naab\r\nbaa\r\n3\r\naab\r\naba\r\n3\r\naba\r\naba\r\n3\r\naba\r\nbaa\r\n3\r\naba\r\naab\r\n3\r\nabb\r\nabb\r\n3\r\nabb\r\nbab\r\n3\r\nabb\r\nbba\r\n3\r\nabc\r\nabc\r\n3\r\nabc\r\nbac\r\n3\r\nabc\r\ncab\r\n3\r\nabc\r\nacb\r\n3\r\nabc\r\ncba\r\n3\r\nabc\r\nbca\r\n",
                "0\r\n0\r\n1\r\n1\r\n0\r\n1\r\n1\r\n0\r\n1\r\n2\r\n0\r\n1\r\n1\r\n1\r\n2\r\n2\r\n"
            ]
        ]
    }
]