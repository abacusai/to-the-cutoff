[
    {
        "name": "Distinct Split",
        "description": "Let's denote the \n    f(x)\n function for a string \n    x\n as the number of\ndistinct characters that the string contains. For example \n    f(\n    )\n    = 3\n, \n    f(\n    ) = 1\n, and \n    f(\n    ) = 3\n.\nGiven a string \n    s\n, split it into two non-empty strings \n    a\n and\n\n    b\n such that \n    f(a) + f(b)\n is the maximum possible. In other words,\nfind the maximum possible value of \n    f(a) + f(b)\n such that \n    a + b = s\n\n(the concatenation of string \n    a\n and string \n    b\n is equal to string\n\n    s\n). Input The input consists of multiple test cases. The first line\ncontains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of\ntest cases. The description of the test cases follows. The first line of each\ntest case contains an integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2\n    \u00b710^5\n) \u2014\nthe length of the string \n    s\n. The second line contains the string \n    s\n,\nconsisting of lowercase English letters. It is guaranteed that the sum of\n\n    n\n over all test cases does not exceed \n    2\n    \u00b710^5\n. Output For\neach test case, output a single integer \u2014 the maximum possible value of\n\n    f(a) + f(b)\n such that \n    a + b = s\n. Example Input 5 2 aa 7 abcabcd 5\naaaaa 10 paiumoment 4 aazz Output 2 7 2 10 3 Note For the first test case,\nthere is only one valid way to split \n    \n into two non-empty\nstrings \n    \n and \n    \n, and \n    f(\n    ) +\n    f(\n    ) = 1 + 1 = 2\n. For the second test case, by splitting\n\n    \n into \n    \n and \n    \n\nwe can get the answer of \n    f(\n    ) + f(\n    ) = 3 + 4 =\n    7\n which is maximum possible. For the third test case, it doesn't matter how\nwe split the string, the answer will always be \n    2\n.\n\n",
        "cf_contest_id": 1791,
        "cf_index": "D",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "greedy",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n2\r\naa\r\n7\r\nabcabcd\r\n5\r\naaaaa\r\n10\r\npaiumoment\r\n4\r\naazz\r\n",
                "2\r\n7\r\n2\r\n10\r\n3\r\n"
            ]
        ],
        "private_cases": []
    }
]