[
    {
        "name": "R2D2 and Droid Army",
        "description": "An army of n droids is lined up in one row. Each droid is described by m\nintegers a1, a2, ..., am, where ai is the number of details of the i-th type\nin this droid's mechanism. R2-D2 wants to destroy the sequence of consecutive\ndroids of maximum length. He has m weapons, the i-th weapon can affect all the\ndroids in the army by destroying one detail of the i-th type (if the droid\ndoesn't have details of this type, nothing happens to it). A droid is\nconsidered to be destroyed when all of its details are destroyed. R2-D2 can\nmake at most k shots. How many shots from the weapon of what type should R2-D2\nmake to destroy the sequence of consecutive droids of maximum length? Input\nThe first line contains three integers n, m, k (1 \u2264 n \u2264 10^5, 1 \u2264 m \u2264 5, 0 \u2264 k\n\u2264 10^9) \u2014 the number of droids, the number of detail types and the number of\navailable shots, respectively. Next n lines follow describing the droids. Each\nline contains m integers a1, a2, ..., am (0 \u2264 ai \u2264 10^8), where ai is the\nnumber of details of the i-th type for the respective robot. Output Print m\nspace-separated integers, where the i-th number is the number of shots from\nthe weapon of the i-th type that the robot should make to destroy the\nsubsequence of consecutive droids of the maximum length. If there are multiple\noptimal solutions, print any of them. It is not necessary to make exactly k\nshots, the number of shots can be less. Examples Input 5 2 4 4 0 1 2 2 1 0 2 1\n3 Output 2 2 Input 3 2 4 1 2 1 3 2 2 Output 1 3 Note In the first test the\nsecond, third and fourth droids will be destroyed. In the second test the\nfirst and second droids will be destroyed.\n\n",
        "cf_contest_id": 514,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 2 4\r\n4 0\r\n1 2\r\n2 1\r\n0 2\r\n1 3\r\n",
                "2 2 \r\n"
            ],
            [
                "3 2 4\r\n1 2\r\n1 3\r\n2 2\r\n",
                "1 3 \r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1 0\r\n0\r\n",
                "0 \r\n"
            ],
            [
                "1 1 0\r\n1\r\n",
                "0 \r\n"
            ],
            [
                "1 1 1\r\n0\r\n",
                "0 \r\n"
            ],
            [
                "4 5 33\r\n2 10 2 3 2\r\n10 6 4 5 0\r\n3 1 7 3 2\r\n4 4 2 1 5\r\n",
                "10 6 7 5 5 \r\n"
            ],
            [
                "4 5 40\r\n0 10 9 0 4\r\n10 5 5 7 4\r\n9 9 5 5 2\r\n6 7 9 4 3\r\n",
                "10 10 9 7 4 \r\n"
            ],
            [
                "31 2 1913\r\n845 576\r\n862 325\r\n914 283\r\n431 837\r\n193 171\r\n30 248\r\n290 488\r\n810 552\r\n463 74\r\n765 469\r\n785 119\r\n107 267\r\n528 761\r\n583 395\r\n359 45\r\n840 559\r\n147 510\r\n882 830\r\n267 390\r\n639 47\r\n849 312\r\n518 6\r\n643 828\r\n195 886\r\n377 948\r\n333 841\r\n484 99\r\n486 999\r\n134 342\r\n736 490\r\n624 677\r\n",
                "914 999 \r\n"
            ],
            [
                "49 2 1971\r\n794 866\r\n401 575\r\n341 83\r\n103 208\r\n352 134\r\n260 878\r\n497 931\r\n630 570\r\n885 464\r\n23 663\r\n60 775\r\n416 870\r\n955 405\r\n392 961\r\n530 258\r\n73 404\r\n736 923\r\n44 436\r\n594 314\r\n904 138\r\n980 163\r\n76 720\r\n879 809\r\n81 838\r\n263 599\r\n218 139\r\n659 493\r\n848 754\r\n656 302\r\n490 7\r\n204 530\r\n184 758\r\n114 849\r\n80 649\r\n653 439\r\n961 350\r\n104 387\r\n482 441\r\n628 972\r\n451 503\r\n367 926\r\n50 332\r\n855 991\r\n528 261\r\n131 447\r\n551 841\r\n963 962\r\n253 979\r\n700 218\r\n",
                "980 991 \r\n"
            ],
            [
                "1 5 264566327\r\n35969364 23665385 95351498 57005692 52574389\r\n",
                "0 0 0 0 0 \r\n"
            ],
            [
                "1 5 240247522\r\n48772229 15259125 4834706 88633344 82748118\r\n",
                "48772229 15259125 4834706 88633344 82748118 \r\n"
            ],
            [
                "1 5 211500111\r\n18123011 48739518 50372830 20177276 74087475\r\n",
                "18123011 48739518 50372830 20177276 74087475 \r\n"
            ]
        ]
    }
]