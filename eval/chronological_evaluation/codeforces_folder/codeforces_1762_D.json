[
    {
        "name": "GCD Queries ",
        "description": "This is an interactive problem. There is a secret permutation \n    p\n of\n\n    [0,1,2,\n    \u2026,n-1]\n. Your task is to find \n    2\n indices \n    x\n and\n\n    y\n (\n    1 \n    \u2264 x, y \n    \u2264 n\n, possibly \n    x=y\n) such that\n\n    p_x=0\n or \n    p_y=0\n. In order to find it, you are allowed to ask at\nmost \n    2n\n queries. In one query, you give two integers \n    i\n and \n    j\n\n(\n    1 \n    \u2264 i, j \n    \u2264 n\n, \n    i \n    \u2260 j\n) and receive the value of\n\n    (p_i,p_j)^\n    \u2020\n. Note that the permutation \n    p\n is fixed\nbefore any queries are made and does not depend on the queries.\n\n    ^\n    \u2020\n \n    (x, y)\n denotes the greatest common divisor (GCD)\nof integers \n    x\n and \n    y\n. Note that \n    (x,0)=\n    (0,x)=x\n for\nall positive integers \n    x\n. Input Each test contains multiple test cases.\nThe first line contains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    10^4\n). The description of the test cases follows. The first line of each\ntest case contains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7\n    10^4\n). After reading the integer \n    n\n for each test case, you should\nbegin the interaction. It is guaranteed that the sum of \n    n\n over all test\ncases does not exceed \n    2 \n    \u00b7 10^4\n. Interaction The interaction for\neach test case begins by reading the integer \n    n\n. To make a query, output\n\"? \n    i\n \n    j\n\" (\n    1 \n    \u2264 i, j \n    \u2264 n\n, \n    i \n    \u2260 j\n) without\nquotes. Afterwards, you should read a single integer \u2014 the answer to your\nquery \n    (p_i,p_j)\n. You can make at most \n    2n\n such queries in\neach test case. If you want to print the answer, output \"! \n    x\n \n    y\n\"\n(\n    1 \n    \u2264 x, y \n    \u2264 n\n) without quotes. After doing that, read \n    1\n\nor \n    -1\n. If \n    p_x=0\n or \n    p_y=0\n, you'll receive \n    1\n, otherwise\nyou'll receive \n    -1\n. If you receive \n    -1\n, your program must terminate\nimmediately to receive a Wrong Answer verdict. Otherwise, you can get an\narbitrary verdict because your solution will continue to read from a closed\nstream. If you receive the integer \n    -1\n instead of an answer or a valid\nvalue of \n    n\n, it means your program has made an invalid query, has\nexceeded the limit of queries, or has given an incorrect answer on the\nprevious test case. Your program must terminate immediately to receive a Wrong\nAnswer verdict. Otherwise, you can get an arbitrary verdict because your\nsolution will continue to read from a closed stream. After printing a query or\nthe answer, do not forget to output the end of line and flush the output.\nOtherwise, you will get Idleness limit exceeded. To do this, use:\nfflush(stdout) or cout.flush() in C++; System.out.flush() in Java;\nflush(output) in Pascal; stdout.flush() in Python; see documentation for other\nlanguages. Hacks To hack, use the following format. The first line should\ncontain a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n). The first\nline of each test case should contain a single integer \n    n\n (\n    2 \n    \u2264 n\n    \n    \u2264 2 \n    \u00b7 10^4\n). The second line of each test case should contain\n\n    n\n space separated integers \n    p_1,p_2,\n    \u2026,p_n\n. \n    p\n should be\na permutation of \n    [0,1,2,\n    \u2026,n-1]\n. The sum of \n    n\n should not\nexceed \n    2 \n    \u00b7 10^4\n. Example Input 2 2 1 1 5 2 4 1 Output ? 1 2 ! 1 2\n? 1 2 ? 2 3 ! 3 3 Note In the first test, the interaction proceeds as follows.\nSolutionJuryExplanation\n    \nThere are 2 test\ncases.\n    \nIn the first test case, the hidden permutation is\n\n    [1,0]\n, with length \n    2\n.\n    \n\n    \nThe\nsolution requests \n    (p_1,p_2)\n, and the jury responds with\n\n    1\n.\n    \n\n    \nThe solution knows that either\n\n    p_1=0\n or \n    p_2=0\n, and prints the answer. Since the output is\ncorrect, the jury responds with \n    1\n and continues to the next test\ncase.\n    \nIn the second test case, the hidden permutation is\n\n    [2,4,0,1,3]\n, with length \n    5\n.\n    \n\n    \nThe solution requests \n    (p_1,p_2)\n, and the\njury responds with \n    2\n.\n    \n\n    \nThe\nsolution requests \n    (p_2,p_3)\n, and the jury responds with\n\n    4\n.\n    \n\n    \nThe solution has somehow\ndetermined that \n    p_3=0\n, and prints the answer. Since the output is\ncorrect, the jury responds with \n    1\n. Note that the empty lines in the\nexample input and output are for the sake of clarity, and do not occur in the\nreal interaction. After each test case, make sure to read \n    1\n or \n    -1\n.\n\n",
        "cf_contest_id": 1762,
        "cf_index": "D",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "interactive",
            "number theory"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n2\r\n1 0\r\n5\r\n2 4 0 1 3\r\n",
                "0\r\n6\r\n"
            ]
        ],
        "private_cases": []
    }
]