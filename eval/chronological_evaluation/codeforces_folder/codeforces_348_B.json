[
    {
        "name": "Apple Tree",
        "description": "You are given a rooted tree with n vertices. In each leaf vertex there's a\nsingle integer \u2014 the number of apples in this vertex. The weight of a subtree\nis the sum of all numbers in this subtree leaves. For instance, the weight of\na subtree that corresponds to some leaf is the number written in the leaf. A\ntree is balanced if for every vertex v of the tree all its subtrees,\ncorresponding to the children of vertex v, are of equal weight. Count the\nminimum number of apples that you need to remove from the tree (specifically,\nfrom some of its leaves) in order to make the tree balanced. Notice that you\ncan always achieve the goal by just removing all apples. Input The first line\ncontains integer n (2 \u2264 n \u2264 10^5), showing the number of vertices in the tree.\nThe next line contains n integers a1, a2, ..., an (0 \u2264 ai \u2264 10^8), ai is the\nnumber of apples in the vertex number i. The number of apples in non-leaf\nvertices is guaranteed to be zero. Then follow n - 1 lines, describing the\ntree edges. Each line contains a pair of integers xi, yi (1 \u2264 xi, yi \u2264 n, xi \u2260\nyi) \u2014 the vertices connected by an edge. The vertices are indexed from 1 to n.\nVertex 1 is the root. Output Print a single integer \u2014 the minimum number of\napples to remove in order to make the tree balanced. Please, do not write the\n\nthe sin, cout streams cin, cout or the \n12 13 5 6 1 2 1 3 1 4 2 5 2 6 Output 6\n\n",
        "cf_contest_id": 348,
        "cf_index": "B",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "number theory",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n0 0 12 13 5 6\r\n1 2\r\n1 3\r\n1 4\r\n2 5\r\n2 6\r\n",
                "6"
            ]
        ],
        "private_cases": [
            [
                "10\r\n0 0 0 2 5 0 6 0 6 0\r\n8 2\r\n3 1\r\n1 9\r\n1 2\r\n10 8\r\n6 5\r\n4 3\r\n6 7\r\n6 8\r\n",
                "19"
            ],
            [
                "10\r\n0 0 0 10 0 5 0 0 2 0\r\n2 5\r\n6 7\r\n3 1\r\n7 3\r\n2 4\r\n8 9\r\n5 1\r\n5 10\r\n1 8\r\n",
                "17"
            ],
            [
                "10\r\n0 9 5 0 0 0 0 0 9 7\r\n7 5\r\n8 1\r\n1 5\r\n4 3\r\n2 4\r\n4 7\r\n7 9\r\n10 6\r\n6 8\r\n",
                "22"
            ],
            [
                "50\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 703969 0 0 0\r\n31 5\r\n16 6\r\n2 37\r\n34 14\r\n6 25\r\n28 16\r\n21 19\r\n30 27\r\n35 26\r\n47 48\r\n2 49\r\n46 12\r\n31 3\r\n32 18\r\n33 4\r\n7 3\r\n13 40\r\n8 29\r\n28 20\r\n39 11\r\n24 1\r\n43 32\r\n22 38\r\n5 8\r\n45 49\r\n27 44\r\n25 4\r\n42 45\r\n9 48\r\n50 10\r\n42 41\r\n23 37\r\n21 18\r\n9 17\r\n12 38\r\n39 13\r\n30 15\r\n40 35\r\n50 15\r\n14 36\r\n34 23\r\n26 44\r\n20 36\r\n22 10\r\n29 19\r\n33 24\r\n11 41\r\n7 46\r\n17 43\r\n",
                "0"
            ],
            [
                "2\r\n0 1\r\n1 2\r\n",
                "0"
            ],
            [
                "5\r\n0 0 2 3 5\r\n1 2\r\n2 3\r\n2 4\r\n1 5\r\n",
                "2"
            ],
            [
                "30\r\n0 29788690 0 0 0 4457414 9074050 85886512 45020582 58766913 0 44062525 0 0 53742121 0 0 21908538 0 89885167 0 2001419 595812 90905797 0 30411335 0 0 97358176 0\r\n13 4\r\n1 2\r\n18 1\r\n4 14\r\n29 27\r\n16 22\r\n7 4\r\n24 5\r\n30 11\r\n17 23\r\n1 16\r\n1 25\r\n19 4\r\n28 25\r\n12 28\r\n17 4\r\n6 21\r\n9 13\r\n8 11\r\n15 3\r\n5 27\r\n11 20\r\n26 19\r\n30 5\r\n4 27\r\n21 28\r\n3 14\r\n10 30\r\n1 5\r\n",
                "653858251"
            ],
            [
                "2\r\n0 100000000\r\n1 2\r\n",
                "0"
            ],
            [
                "3\r\n0 0 2\r\n1 2\r\n2 3\r\n",
                "0"
            ],
            [
                "3\r\n0 2 10\r\n2 1\r\n3 1\r\n",
                "8"
            ],
            [
                "4\r\n0 1 2 3\r\n1 2\r\n1 3\r\n1 4\r\n",
                "3"
            ]
        ]
    }
]