[
    {
        "name": "Refactoring",
        "description": "Alice has written a program and now tries to improve its readability. One of\nthe ways to improve readability is to give sensible names to the variables, so\nnow Alice wants to rename some variables in her program. In her IDE there is a\ncommand called \"massive refactoring\", which can replace names of many variable\nin just one run. To use it, Alice needs to select two strings \n    s\n and\n\n    t\n and after that for each variable the following algorithm is performed:\nif the variable's name contains \n    s\n as a substring, then the first (and\nonly first) occurrence of \n    s\n is replaced with \n    t\n. If the name\ndoesn't contain \n    s\n, then this variable's name stays the same. The list of\nvariables is known and for each variable both the initial name and the name\nAlice wants this variable change to are known. Moreover, for each variable the\nlengths of the initial name and the target name are equal (otherwise the\nalignment of the code could become broken). You need to perform renaming of\nall variables in exactly one run of the massive refactoring command or\ndetermine that it is impossible. Input The first line contains the only\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 3000\n) \u2014 the number of variables in\nAlice's program. The following \n    n\n lines contain the initial names of\nvariables \n    w_1, w_2, \n    \u2026, w_n\n, one per line. After that, \n    n\n\nmore lines go, the \n    i\n-th of them contains the target name \n    w'_i\n for\nthe \n    i\n-th variable. It is guaranteed that \n    1 \n    \u2264 |w_i| = |w'_i| \n    \u2264\n    3000\n. It is guaranteed that there is at least one variable having its\ntarget name different from the initial name. Both initial and target names\nconsist of lowercase English letters only. For each variable the length of its\ninitial name is equal to the length of its target name. Output If it is\nimpossible to rename all variables with one call of \"massive refactoring\",\nprint \"NO\" (quotes for clarity). Otherwise, on the first line print \"YES\"\n(quotes for clarity) and on the following lines print \n    s\n and \n    t\n\n(\n    1 \n    \u2264 |s|, |t| \n    \u2264 5000\n), which should be used for replacement.\nStrings \n    s\n and \n    t\n should consist only of lowercase letters of\nEnglish alphabet. If there are multiple ways to perform a \"massive\nrefactoring\", you can use any of them. Examples Input 1 topforces codecoder\nOutput YES topforces codecoder Input 3 bab cac cdc bdb cdc cdc Output YES a d\nInput 2 you shal not pass Output NO\n\n",
        "cf_contest_id": 1055,
        "cf_index": "D",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\ntopforces\r\ncodecoder\r\n",
                "YES\r\ntopforces\r\ncodecoder\r\n"
            ],
            [
                "3\r\nbab\r\ncac\r\ncdc\r\nbdb\r\ncdc\r\ncdc\r\n",
                "YES\r\na\r\nd\r\n"
            ],
            [
                "2\r\nyou\r\nshal\r\nnot\r\npass\r\n",
                "NO\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\ni\r\nq\r\n",
                "YES\r\ni\r\nq\r\n"
            ],
            [
                "2\r\nabbaba\r\naaa\r\nabbaba\r\nbbb\r\n",
                "YES\r\naaa\r\nbbb\r\n"
            ],
            [
                "2\r\nzzzzzzzz\r\nyyyyyyyy\r\nyyyyyyyy\r\nzzzzzzzz\r\n",
                "NO\r\n"
            ],
            [
                "2\r\nxax\r\nyay\r\nxbx\r\nycy\r\n",
                "NO\r\n"
            ]
        ]
    }
]