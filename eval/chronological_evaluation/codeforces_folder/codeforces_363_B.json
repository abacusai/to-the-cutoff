[
    {
        "name": "Fence",
        "description": "There is a fence in front of Polycarpus's home. The fence consists of n planks\nof the same width which go one after another from left to right. The height of\nthe i-th plank is hi meters, distinct planks can have distinct heights. Fence\nfor n = 7 and h = [1, 2, 6, 1, 1, 7, 1] Polycarpus has bought a posh piano and\nis thinking about how to get it into the house. In order to carry out his\nplan, he needs to take exactly k consecutive planks from the fence. Higher\nplanks are harder to tear off the fence, so Polycarpus wants to find such k\nconsecutive planks that the sum of their heights is minimal possible. Write\nthe program that finds the indexes of k consecutive planks with minimal total\nheight. Pay attention, the fence is not around Polycarpus's home, it is in\nfront of home (in other words, the fence isn't cyclic). Input The first line\nof the input contains integers n and k (1 \u2264 n \u2264 1.5\u00b710^5, 1 \u2264 k \u2264 n) \u2014 the\nnumber of planks in the fence and the width of the hole for the piano. The\nsecond line contains the sequence of integers h1, h2, ..., hn (1 \u2264 hi \u2264 100),\nwhere hi is the height of the i-th plank of the fence. Output Print such\ninteger j that the sum of the heights of planks j, j + 1, ..., j + k - 1 is\nthe minimum possible. If there are multiple such j's, print any of them.\nExamples Input 7 3 1 2 6 1 1 7 1 Output 3 Note In the sample, your task is to\nfind three consecutive planks with the minimum sum of heights. In the given\ncase three planks with indexes 3, 4 and 5 have the required attribute, their\ntotal height is 8.\n\n",
        "cf_contest_id": 363,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dp"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 3\r\n1 2 6 1 1 7 1\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n100\r\n",
                "1\r\n"
            ],
            [
                "2 1\r\n10 20\r\n",
                "1\r\n"
            ],
            [
                "10 5\r\n1 2 3 1 2 2 3 1 4 5\r\n",
                "1\r\n"
            ],
            [
                "10 2\r\n3 1 4 1 4 6 2 1 4 6\r\n",
                "7\r\n"
            ],
            [
                "2 2\r\n20 10\r\n",
                "1\r\n"
            ],
            [
                "2 1\r\n20 1\r\n",
                "2\r\n"
            ],
            [
                "3 1\r\n1 2 3\r\n",
                "1\r\n"
            ],
            [
                "3 1\r\n2 1 3\r\n",
                "2\r\n"
            ],
            [
                "3 1\r\n3 2 1\r\n",
                "3\r\n"
            ],
            [
                "3 2\r\n1 2 3\r\n",
                "1\r\n"
            ],
            [
                "3 2\r\n3 2 1\r\n",
                "2\r\n"
            ],
            [
                "3 3\r\n1 2 3\r\n",
                "1\r\n"
            ],
            [
                "4 2\r\n9 8 11 7\r\n",
                "1\r\n"
            ],
            [
                "4 2\r\n10 1 2 3\r\n",
                "2\r\n"
            ],
            [
                "6 3\r\n56 56 56 2 1 2\r\n",
                "4\r\n"
            ],
            [
                "8 3\r\n1 1 1 1 2 60 90 1\r\n",
                "1\r\n"
            ],
            [
                "4 1\r\n1 5 2 2\r\n",
                "1\r\n"
            ],
            [
                "4 2\r\n4 6 7 4\r\n",
                "1\r\n"
            ],
            [
                "10 4\r\n1 1 1 4 4 4 4 4 4 3\r\n",
                "1\r\n"
            ],
            [
                "6 3\r\n1 2 1 3 1 1\r\n",
                "1\r\n"
            ],
            [
                "5 2\r\n100 100 100 1 1\r\n",
                "4\r\n"
            ]
        ]
    }
]