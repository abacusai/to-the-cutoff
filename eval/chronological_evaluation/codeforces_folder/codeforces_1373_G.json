[
    {
        "name": "Pawns",
        "description": "You are given a chessboard consisting of \n    n\n rows and \n    n\n columns.\nRows are numbered from bottom to top from \n    1\n to \n    n\n. Columns are\nnumbered from left to right from \n    1\n to \n    n\n. The cell at the\nintersection of the \n    x\n-th column and the \n    y\n-th row is denoted as\n\n    (x, y)\n. Furthermore, the \n    k\n-th column is a special column.\nInitially, the board is empty. There are \n    m\n changes to the board. During\nthe \n    i\n-th change one pawn is added or removed from the board. The current\nboard is good if we can move all pawns to the special column by the followings\nrules: Pawn in the cell \n    (x, y)\n can be moved to the cell \n    (x, y +\n    1)\n, \n    (x - 1, y + 1)\n or \n    (x + 1, y + 1)\n; You can make as many such\nmoves as you like; Pawns can not be moved outside the chessboard; Each cell\ncan not contain more than one pawn. The current board may not always be good.\nTo fix it, you can add new rows to the board. New rows are added at the top,\ni. e. they will have numbers \n    n+1, n+2, n+3, \n    \u2026\n. After each of\n\n    m\n changes, print one integer \u2014 the minimum number of rows which you have\nto add to make the board good. Input The first line contains three integers\n\n    n\n, \n    k\n and \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 2 \n    \u00b7 10^5; 1 \n    \u2264 k\n    \n    \u2264 n\n) \u2014 the size of the board, the index of the special column and the\nnumber of changes respectively. Then \n    m\n lines follow. The \n    i\n-th line\ncontains two integers \n    x\n and \n    y\n (\n    1 \n    \u2264 x, y \n    \u2264 n\n) \u2014 the\nindex of the column and the index of the row respectively. If there is no pawn\nin the cell \n    (x, y)\n, then you add a pawn to this cell, otherwise \u2014 you\nremove the pawn from this cell. Output After each change print one integer \u2014\nthe minimum number of rows which you have to add to make the board good.\nExample Input 5 3 5 4 4 3 5 2 4 3 4 3 5 Output 0 1 2 2 1\n\n",
        "cf_contest_id": 1373,
        "cf_index": "G",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "divide and conquer",
            "greedy"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 3 5\r\n4 4\r\n3 5\r\n2 4\r\n3 4\r\n3 5\r\n",
                "0\r\n1\r\n2\r\n2\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "50 50 1\r\n1 50\r\n",
                "49\r\n"
            ]
        ]
    }
]