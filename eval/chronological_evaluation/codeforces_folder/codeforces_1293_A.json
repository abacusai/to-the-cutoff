[
    {
        "name": "ConneR and the A.R.C. Markland-N",
        "description": "Sakuzyo - Imprinting A.R.C. Markland-N is a tall building with \n    n\n floors\nnumbered from \n    1\n to \n    n\n. Between each two adjacent floors in the\nbuilding, there is a staircase connecting them. It's lunchtime for our sensei\nColin \"ConneR\" Neumann Jr, and he's planning for a location to enjoy his meal.\nConneR's office is at floor \n    s\n of the building. On each floor (including\nfloor \n    s\n, of course), there is a restaurant offering meals. However, due\nto renovations being in progress, \n    k\n of the restaurants are currently\nclosed, and as a result, ConneR can't enjoy his lunch there. CooneR wants to\nreach a restaurant as quickly as possible to save time. What is the minimum\nnumber of staircases he needs to walk to reach a closest currently open\nrestaurant. Please answer him quickly, and you might earn his praise and even\nenjoy the lunch with him in the elegant Neumanns' way! Input The first line\ncontains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of test\ncases in the test. Then the descriptions of \n    t\n test cases follow. The\nfirst line of a test case contains three integers \n    n\n, \n    s\n and \n    k\n\n(\n    2 \n    \u2264 n \n    \u2264 10^9\n, \n    1 \n    \u2264 s \n    \u2264 n\n, \n    1 \n    \u2264 k \n    \u2264\n    min(n-1, 1000)\n) \u2014 respectively the number of floors of A.R.C.\nMarkland-N, the floor where ConneR is in, and the number of closed\nrestaurants. The second line of a test case contains \n    k\n distinct integers\n\n    a_1, a_2, \n    \u2026, a_k\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n) \u2014 the floor numbers\nof the currently closed restaurants. It is guaranteed that the sum of \n    k\n\nover all test cases does not exceed \n    1000\n. Output For each test case\nprint a single integer \u2014 the minimum number of staircases required for ConneR\nto walk from the floor \n    s\n to a floor with an open restaurant. Example\nInput 5 5 2 3 1 2 3 4 3 3 4 1 2 10 2 6 1 2 3 4 5 7 2 1 1 2 100 76 8 76 75 36\n67 41 74 10 77 Output 2 0 4 0 2 Note In the first example test case, the\nnearest floor with an open restaurant would be the floor \n    4\n. In the\nsecond example test case, the floor with ConneR's office still has an open\nrestaurant, so Sensei won't have to go anywhere. In the third example test\ncase, the closest open restaurant is on the \n    6\n-th floor.\n\n",
        "cf_contest_id": 1293,
        "cf_index": "A",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n5 2 3\r\n1 2 3\r\n4 3 3\r\n4 1 2\r\n10 2 6\r\n1 2 3 4 5 7\r\n2 1 1\r\n2\r\n100 76 8\r\n76 75 36 67 41 74 10 77\r\n",
                "2\r\n0\r\n4\r\n0\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n5 1 4\r\n3 2 1 4\r\n5 5 4\r\n4 5 2 3\r\n",
                "4\r\n4\r\n"
            ],
            [
                "1\r\n10 3 3\r\n8 10 4\r\n",
                "0\r\n"
            ],
            [
                "1\r\n10 1 1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "1\r\n10 10 2\r\n9 10\r\n",
                "2\r\n"
            ],
            [
                "1\r\n10 10 3\r\n8 9 10\r\n",
                "3\r\n"
            ],
            [
                "1\r\n57 57 14\r\n52 46 55 50 49 48 57 51 47 44 56 53 45 54\r\n",
                "14\r\n"
            ],
            [
                "1\r\n463 1 21\r\n18 21 7 4 20 6 1 10 8 17 9 19 11 16 2 3 14 15 5 12 13\r\n",
                "21\r\n"
            ],
            [
                "1\r\n10 9 2\r\n8 2\r\n",
                "0\r\n"
            ],
            [
                "1\r\n10 9 6\r\n4 6 7 8 10 3\r\n",
                "0\r\n"
            ],
            [
                "1\r\n10 1 6\r\n4 3 1 5 6 2\r\n",
                "6\r\n"
            ],
            [
                "1\r\n10 10 6\r\n8 10 5 7 6 9\r\n",
                "6\r\n"
            ],
            [
                "1\r\n10 8 8\r\n7 10 8 9 6 3 4 5\r\n",
                "6\r\n"
            ],
            [
                "1\r\n10 8 6\r\n4 8 7 9 6 10\r\n",
                "3\r\n"
            ],
            [
                "1\r\n10 7 9\r\n2 10 9 3 5 8 4 7 6\r\n",
                "6\r\n"
            ],
            [
                "1\r\n10 2 9\r\n6 1 8 3 4 7 2 5 9\r\n",
                "8\r\n"
            ],
            [
                "1\r\n10 6 9\r\n8 3 6 10 9 5 2 4 7\r\n",
                "5\r\n"
            ],
            [
                "1\r\n100 52 6\r\n70 44 97 29 41 79\r\n",
                "0\r\n"
            ],
            [
                "1\r\n100 1 4\r\n3 4 1 2\r\n",
                "4\r\n"
            ],
            [
                "1\r\n100 100 4\r\n100 98 99 97\r\n",
                "4\r\n"
            ],
            [
                "1\r\n100 32 1\r\n32\r\n",
                "1\r\n"
            ],
            [
                "1\r\n100 74 39\r\n12 34 20 22 39 17 32 83 2 55 35 100 45 52 86 29 13 54 93 64 26 25 15 88 71 11 3 66 74 47 56 27 73 4 43 23 7 91 92\r\n",
                "1\r\n"
            ],
            [
                "1\r\n100 1 41\r\n15 19 26 17 6 16 40 31 39 13 7 33 25 9 21 20 41 23 32 27 3 30 14 4 24 35 10 22 34 38 8 2 5 36 18 37 29 12 11 28 1\r\n",
                "41\r\n"
            ],
            [
                "1\r\n100 100 90\r\n97 87 39 42 67 80 94 76 74 32 72 54 36 20 16 68 17 83 44 15 70 57 45 37 95 66 53 24 82 11 34 30 19 48 35 93 18 78 86 61 73 99 27 100 65 38 75 64 55 56 13 92 41 23 50 40 88 25 22 43 59 33 12 31 29 21 47 77 63 52 84 91 26 96 46 14 79 98 85 28 81 60 90 49 62 69 58 51 89 71\r\n",
                "90\r\n"
            ],
            [
                "1\r\n100 6 80\r\n53 20 3 71 56 58 36 59 15 40 4 5 29 75 72 41 61 73 68 34 42 26 52 35 57 60 64 37 25 78 39 46 31 69 30 18 10 11 77 13 47 63 48 6 33 7 76 22 9 55 19 8 43 24 44 32 45 54 23 38 66 65 80 79 49 62 21 70 67 28 50 14 74 1 51 2 16 27 17 12\r\n",
                "75\r\n"
            ],
            [
                "1\r\n100 51 74\r\n17 35 54 73 50 69 28 48 33 71 64 58 51 21 80 67 53 40 55 45 99 23 72 86 18 93 44 41 31 37 39 76 66 61 83 78 43 49 68 19 42 75 25 6 74 34 22 81 26 52 98 62 30 38 24 84 56 36 60 59 27 79 20 70 47 95 57 65 46 29 63 77 32 82\r\n",
                "34\r\n"
            ],
            [
                "1\r\n100 64 99\r\n83 72 63 91 20 97 67 50 53 9 1 52 79 99 58 37 71 66 11 62 69 77 87 75 15 82 68 89 56 3 30 33 73 76 35 27 48 36 34 42 86 6 88 92 8 90 13 49 18 59 39 47 94 93 80 44 54 17 43 24 2 38 98 55 51 4 78 22 21 46 7 64 57 26 74 5 61 45 41 14 70 60 81 12 32 19 84 10 25 65 85 16 29 96 31 23 100 28 40\r\n",
                "31\r\n"
            ],
            [
                "1\r\n100 4 99\r\n37 72 21 20 75 68 48 89 61 3 91 97 14 31 25 16 5 83 2 73 74 85 63 26 76 7 8 42 64 58 12 93 24 82 81 90 77 39 95 57 10 49 30 87 80 62 40 92 36 52 66 59 50 29 28 27 53 19 88 46 13 44 1 6 60 23 43 41 84 98 94 65 4 70 78 67 96 47 56 34 55 15 33 32 11 86 45 18 54 35 69 79 17 38 99 22 9 71 51\r\n",
                "96\r\n"
            ],
            [
                "1\r\n100 52 99\r\n51 69 42 32 34 62 12 75 88 18 57 47 40 91 100 81 72 15 26 14 93 68 6 50 5 24 97 52 10 20 54 9 56 39 21 55 7 98 59 87 77 17 29 13 30 46 37 76 71 78 96 82 49 64 84 60 67 19 2 25 85 89 38 41 11 90 35 48 27 28 70 65 66 16 79 3 80 44 36 43 61 99 22 33 86 4 83 94 74 31 73 95 58 53 8 63 92 45 23\r\n",
                "51\r\n"
            ]
        ]
    }
]