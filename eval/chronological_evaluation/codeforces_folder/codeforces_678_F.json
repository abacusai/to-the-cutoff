[
    {
        "name": "Lena and Queries",
        "description": "Lena is a programmer. She got a task to solve at work. There is an empty set\nof pairs of integers and n queries to process. Each query is one of three\ntypes: Add a pair (a, b) to the set. Remove a pair added in the query number\ni. All queries are numbered with integers from 1 to n. For a given integer q\nfind the maximal value x\u00b7q + y over all pairs (x, y) from the set. Help Lena\nto process the queries. Input The first line of input contains integer n (1 \u2264\nn \u2264 3\u00b710^5) \u2014 the number of queries. Each of the next n lines starts with\ninteger t (1 \u2264 t \u2264 3) \u2014 the type of the query. A pair of integers a and b ( -\n10^9 \u2264 a, b \u2264 10^9) follows in the query of the first type. An integer i (1 \u2264\ni \u2264 n) follows in the query of the second type. It is guaranteed that i is\nless than the number of the query, the query number i has the first type and\nthe pair from the i-th query is not already removed. An integer q ( - 10^9 \u2264 q\n\u2264 10^9) follows in the query of the third type. Output For the queries of the\nthird type print on a separate line the desired maximal value of x\u00b7q + y. If\nthere are no pairs in the set print \"EMPTY SET\". Example Input 7 3 1 1 2 3 3 1\n1 -1 100 3 1 2 4 3 1 Output EMPTY SET 5 99 5\n\n",
        "cf_contest_id": 678,
        "cf_index": "F",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "divide and conquer",
            "geometry"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n3 1\r\n1 2 3\r\n3 1\r\n1 -1 100\r\n3 1\r\n2 4\r\n3 1\r\n",
                "EMPTY SET\r\n5\r\n99\r\n5\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n1 -1 2\r\n1 0 -1\r\n2 2\r\n1 -2 -1\r\n3 -1\r\n",
                "3\r\n"
            ],
            [
                "3\r\n1 -2 2\r\n1 -3 0\r\n3 -1\r\n",
                "4\r\n"
            ],
            [
                "3\r\n1 0 -2\r\n1 2 -2\r\n3 1\r\n",
                "0\r\n"
            ],
            [
                "3\r\n1 -1 0\r\n1 -1 1\r\n3 -2\r\n",
                "3\r\n"
            ],
            [
                "10\r\n3 -10\r\n1 6 -2\r\n1 8 -3\r\n2 3\r\n1 -6 -3\r\n2 2\r\n3 6\r\n3 4\r\n2 5\r\n1 3 -9\r\n",
                "EMPTY SET\r\n-39\r\n-27\r\n"
            ],
            [
                "10\r\n3 0\r\n3 0\r\n3 0\r\n3 0\r\n1 0 0\r\n1 0 0\r\n1 0 0\r\n3 0\r\n3 0\r\n2 6\r\n",
                "EMPTY SET\r\nEMPTY SET\r\nEMPTY SET\r\nEMPTY SET\r\n0\r\n0\r\n"
            ],
            [
                "1\r\n3 840\r\n",
                "EMPTY SET\r\n"
            ],
            [
                "4\r\n1 -1000000000 0\r\n3 1000000000\r\n1 -1000000000 1\r\n3 1000000000\r\n",
                "-1000000000000000000\r\n-999999999999999999\r\n"
            ],
            [
                "3\r\n1 -1000000000 0\r\n1 -1000000000 0\r\n3 1000000000\r\n",
                "-1000000000000000000\r\n"
            ],
            [
                "3\r\n1 -1000000000 0\r\n3 1000000000\r\n2 1\r\n",
                "-1000000000000000000\r\n"
            ],
            [
                "2\r\n1 -1000000000 0\r\n3 1000000000\r\n",
                "-1000000000000000000\r\n"
            ],
            [
                "2\r\n1 -1000000000 -7\r\n3 1000000000\r\n",
                "-1000000000000000007\r\n"
            ],
            [
                "2\r\n1 -1000000000 -1000000000\r\n3 1000000000\r\n",
                "-1000000001000000000\r\n"
            ]
        ]
    }
]