[
    {
        "name": "Maximum Cake Tastiness",
        "description": "There are \n    n\n pieces of cake on a line. The \n    i\n-th piece of cake has\nweight \n    a_i\n (\n    1 \n    \u2264 i \n    \u2264 n\n). The tastiness of the cake is the\nmaximum total weight of two adjacent pieces of cake (i. e.,\n\n    max(a_1+a_2,\n      a_2+a_3,\n     \n    \u2026,\n      a_n-1 + a_n)\n). You\nwant to maximize the tastiness of the cake. You are allowed to do the\nfollowing operation at most once (doing more operations would ruin the cake):\nChoose a contiguous subsegment \n    a[l, r]\n of pieces of cake (\n    1 \n    \u2264 l\n    \n    \u2264 r \n    \u2264 n\n), and reverse it. The subsegment \n    a[l, r]\n of the\narray \n    a\n is the sequence \n    a_l, a_l+1, \n    \u2026, a_r\n. If you reverse\nit, the array will become \n    a_1, a_2, \n    \u2026, a_l-2, a_l-1,\n    \n    a_r, \n    a_r-1, \n    \n    \u2026,\n    \n    a_l+1, \n    a_l, a_r+1, a_r+2, \n    \u2026, a_n-1,\n    a_n\n. For example, if the weights are initially \n    [5, 2, 1, 4, 7, 3]\n,\nyou can reverse the subsegment \n    a[2, 5]\n, getting \n    [5, \n    7,\n    \n    4, \n    1, \n    2, 3]\n. The tastiness of the\ncake is now \n    5 + 7 = 12\n (while before the operation the tastiness was\n\n    4+7=11\n). Find the maximum tastiness of the cake after doing the\noperation at most once. Input The first line contains a single integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 50\n) \u2014 the number of test cases. The first line of each\ntest case contains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 1000\n) \u2014 the\nnumber of pieces of cake. The second line of each test case contains \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014\n\n    a_i\n is the weight of the \n    i\n-th piece of cake. Output For each test\ncase, print a single integer: the maximum tastiness of the cake after doing\nthe operation at most once. Example Input 5 6 5 2 1 4 7 3 3 32 78 78 3 69 54\n91 8 999021 999021 999021 999021 999652 999021 999021 999021 2 1000000000\n1000000000 Output 12 156 160 1998673 2000000000 Note In the first test case,\nafter reversing the subsegment \n    a[2, 5]\n, you get a cake with weights\n\n    [5, \n    7, \n    4, \n    1, \n    2,\n    3]\n. The tastiness of the cake is now \n    max(5+7, 7+4, 4+1, 1+2, 2+3) =\n    12\n. This is the maximum possible tastiness of the cake one can obtain by\nperforming the operation at most once. In the second test case, it's optimal\nnot to do any operation. The tastiness is \n    78+78 = 156\n. In the third test\ncase, after reversing the subsegment \n    a[1, 2]\n, you get a cake with\nweights \n    [\n    54, \n    69, 91]\n. The tastiness of the\ncake is now \n    max(54+69, 69+91) = 160\n. There is no way to make the\ntastiness of the cake greater than \n    160\n by performing at most one\noperation.\n\n",
        "cf_contest_id": 1654,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "greedy",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n6\r\n5 2 1 4 7 3\r\n3\r\n32 78 78\r\n3\r\n69 54 91\r\n8\r\n999021 999021 999021 999021 999652 999021 999021 999021\r\n2\r\n1000000000 1000000000\r\n",
                "12\r\n156\r\n160\r\n1998673\r\n2000000000\r\n"
            ]
        ],
        "private_cases": []
    }
]