[
    {
        "name": "Fortune Telling",
        "description": "Haha, try to solve this, SelectorUnlimited! \u2014 antontrygubO_o Your friends\nAlice and Bob practice fortune telling. Fortune telling is performed as\nfollows. There is a well-known array \n    a\n of \n    n\n non-negative integers\nindexed from \n    1\n to \n    n\n. The tellee starts with some non-negative\nnumber \n    d\n and performs one of the two operations for each \n    i = 1, 2,\n    \n    \u2026, n\n, in the increasing order of \n    i\n. The possible operations\nare: replace their current number \n    d\n with \n    d + a_i\n replace their\ncurrent number \n    d\n with \n    d \n    \u2295 a_i\n (hereinafter \n    \u2295\n\ndenotes the bitwise XOR operation)Notice that the chosen operation may be\ndifferent for different \n    i\n and for different tellees. One time, Alice\ndecided to start with \n    d = x\n and Bob started with \n    d = x + 3\n. Each\nof them performed fortune telling and got a particular number in the end.\nNotice that the friends chose operations independently of each other, that is,\nthey could apply different operations for the same \n    i\n. You learnt that\neither Alice or Bob ended up with number \n    y\n in the end, but you don't\nknow whose of the two it was. Given the numbers Alice and Bob started with and\n\n    y\n, find out who (Alice or Bob) could get the number \n    y\n after\nperforming the operations. It is guaranteed that on the jury tests, exactly\none of your friends could have actually gotten that number. Hacks You cannot\nmake hacks in this problem. Input On the first line of the input, you are\ngiven one number \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test\ncases. The following \n    2 \n    \u00b7 t\n lines contain test cases. The first\nline of each test case contains three numbers \n    n\n, \n    x\n, \n    y\n (\n    1\n    \n    \u2264 n \n    \u2264 10^5\n, \n    0 \n    \u2264 x \n    \u2264 10^9\n, \n    0 \n    \u2264 y \n    \u2264\n    10^15\n) \u2014 the length of array \n    a\n, Alice's initial number (Bob's\ninitial number is therefore \n    x+3\n), and the number that one of the two\nfriends got in the end. The second line of each test case contains \n    n\n\nnumbers \u2014 the array \n    a\n (\n    0 \n    \u2264 a_i \n    \u2264 10^9\n). It is guaranteed\nthat the sum of \n    n\n over all test cases does not exceed \n    10^5\n. Output\nFor each test case, print the name of the friend who could get the number\n\n    y\n: \"Alice\" or \"Bob\". Example Input 4 1 7 9 2 2 0 2 1 3 4 0 1 1 2 3 4 2\n1000000000 3000000000 1000000000 1000000000 Output Alice Alice Bob Alice Note\nIn the first test case, Alice could get \n    9\n using the following\noperations: \n    7 + 2 = 9\n. In the second test case, Alice could get \n    2\n\nusing this operations: \n    (0 + 1) \n    \u2295 3 = 2\n. In the third test case,\nBob started with \n    x+3 = 0+3=3\n and could get \n    1\n this way: \n    (((3 +\n    1) + 2) \n    \u2295 3) \n    \u2295 4 = 1\n.\n\n",
        "cf_contest_id": 1634,
        "cf_index": "B",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 7 9\r\n2\r\n2 0 2\r\n1 3\r\n4 0 1\r\n1 2 3 4\r\n2 1000000000 3000000000\r\n1000000000 1000000000\r\n",
                "Alice\r\nAlice\r\nBob \r\nAlice\r\n"
            ]
        ],
        "private_cases": []
    }
]