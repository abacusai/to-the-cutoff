[
    {
        "name": "Cube Snake",
        "description": "You've got an n \u00d7 n \u00d7 n cube, split into unit cubes. Your task is to number\nall unit cubes in this cube with positive integers from 1 to n^3 so that: each\nnumber was used as a cube's number exactly once; for each 1 \u2264 i < n^3, unit\ncubes with numbers i and i + 1 were neighbouring (that is, shared a side); for\neach 1 \u2264 i < n there were at least two different subcubes with sizes i \u00d7 i \u00d7\ni, made from unit cubes, which are numbered with consecutive numbers. That is,\nthere are such two numbers x and y, that the unit cubes of the first subcube\nare numbered by numbers x, x + 1, ..., x + i^3 - 1, and the unit cubes of the\nsecond subcube are numbered by numbers y, y + 1, ..., y + i^3 - 1. Find and\nprint the required numeration of unit cubes of the cube. Input The first line\ncontains a single integer n (1 \u2264 n \u2264 50) \u2014 the size of the cube, whose unit\ncubes need to be numbered. Output Print all layers of the cube as n n \u00d7 n\nmatrices. Separate them with new lines. Print the layers in the order in which\nthey follow in the cube. See the samples for clarifications. It is guaranteed\nthat there always is a solution that meets the conditions given in the problem\nstatement. Examples Input 3 Output 1 4 17 2 3 18 27 26 19 8 5 16 7 6 15 24 25\n20 9 12 13 10 11 14 23 22 21 Note In the sample the cubes with sizes 2 \u00d7 2 \u00d7 2\nare numbered with integers 1, ..., 8 and 5, ..., 12.\n\n",
        "cf_contest_id": 198,
        "cf_index": "D",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n",
                "1 8 9\r\n2 7 10\r\n27 26 25\r\n\r\n4 5 12\r\n3 6 11\r\n22 23 24\r\n\r\n15 14 13\r\n16 17 18\r\n21 20 19\r\n\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n",
                "1\r\n\r\n"
            ],
            [
                "2\r\n",
                "1 2\r\n8 7\r\n\r\n4 3\r\n5 6\r\n\r\n"
            ],
            [
                "4\r\n",
                "1 22 27 28\r\n2 23 26 29\r\n3 24 25 30\r\n64 63 62 61\r\n\r\n6 21 20 33\r\n5 14 15 32\r\n4 13 12 31\r\n57 58 59 60\r\n\r\n7 18 19 34\r\n8 17 16 35\r\n9 10 11 36\r\n56 55 54 53\r\n\r\n46 45 40 39\r\n47 44 41 38\r\n48 43 42 37\r\n49 50 51 52\r\n\r\n"
            ],
            [
                "5\r\n",
                "1 62 63 64 65\r\n2 61 60 59 66\r\n3 56 57 58 67\r\n4 55 54 53 68\r\n125 124 123 122 121\r\n\r\n8 23 24 25 72\r\n7 34 33 26 71\r\n6 35 32 27 70\r\n5 50 51 52 69\r\n116 117 118 119 120\r\n\r\n9 22 21 20 73\r\n10 37 30 29 74\r\n11 36 31 28 75\r\n12 49 48 47 76\r\n115 114 113 112 111\r\n\r\n16 17 18 19 80\r\n15 38 39 40 79\r\n14 43 42 41 78\r\n13 44 45 46 77\r\n106 107 108 109 110\r\n\r\n85 84 83 82 81\r\n86 87 88 89 90\r\n95 94 93 92 91\r\n96 97 98 99 100\r\n105 104 103 102 101\r\n\r\n"
            ]
        ]
    }
]