[
    {
        "name": "New Year and Entity Enumeration",
        "description": "You are given an integer m. Let M = 2^m - 1. You are also given a set of n\nintegers denoted as the set T. The integers will be provided in base 2 as n\nbinary strings of length m. A set of integers S is called \"good\" if the\nfollowing hold. If , then . If , then All elements of S are less than or equal\nto M. Here, and refer to the bitwise XOR and bitwise AND operators,\nrespectively. Count the number of good sets S, modulo 10^9 + 7. Input The\nfirst line will contain two integers m and n (1 \u2264 m \u2264 1 000, 1 \u2264 n \u2264 min(2^m,\n50)). The next n lines will contain the elements of T. Each line will contain\nexactly m zeros and ones. Elements of T will be distinct. Output Print a\nsingle integer, the number of good sets modulo 10^9 + 7. Examples Input 5 3\n11010 00101 11000 Output 4 Input 30 2 010101010101010010101010101010\n110110110110110011011011011011 Output 860616440 Note An example of a valid set\nS is 00000, 00101, 00010, 00111, 11000, 11010, 11101, 11111.\n\n",
        "cf_contest_id": 908,
        "cf_index": "E",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "combinatorics",
            "dp",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 3\r\n11010\r\n00101\r\n11000\r\n",
                "4"
            ],
            [
                "30 2\r\n010101010101010010101010101010\r\n110110110110110011011011011011\r\n",
                "860616440"
            ]
        ],
        "private_cases": [
            [
                "30 10\r\n001000000011000111000010010000\r\n000001100001010000000000000100\r\n000110100010100000000000101000\r\n110000010000000001000000000000\r\n100001000000000010010101000101\r\n001001000000000100000000110000\r\n000000010000100000001000000000\r\n001000010001000000001000000010\r\n000000110000000001001010000000\r\n000011001000000000010001000000\r\n",
                "80"
            ]
        ]
    }
]