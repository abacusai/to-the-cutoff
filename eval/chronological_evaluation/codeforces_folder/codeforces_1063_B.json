[
    {
        "name": "Labyrinth",
        "description": "You are playing some computer game. One of its levels puts you in a maze\nconsisting of n lines, each of which contains m cells. Each cell either is\nfree or is occupied by an obstacle. The starting cell is in the row r and\ncolumn c. In one step you can move one square up, left, down or right, if the\ntarget cell is not occupied by an obstacle. You can't move beyond the\nboundaries of the labyrinth. Unfortunately, your keyboard is about to break,\nso you can move left no more than x times and move right no more than y times.\nThere are no restrictions on the number of moves up and down since the keys\nused to move up and down are in perfect condition. Now you would like to\ndetermine for each cell whether there exists a sequence of moves that will put\nyou from the starting cell to this particular one. How many cells of the board\nhave this property? Input The first line contains two integers n, m (1 \u2264 n, m\n\u2264 2000) \u2014 the number of rows and the number columns in the labyrinth\nrespectively. The second line contains two integers r, c (1 \u2264 r \u2264 n, 1 \u2264 c \u2264\nm) \u2014 index of the row and index of the column that define the starting cell.\nThe third line contains two integers x, y (0 \u2264 x, y \u2264 10^9) \u2014 the maximum\nallowed number of movements to the left and to the right respectively. The\nnext n lines describe the labyrinth. Each of them has length of m and consists\nonly of symbols '.' and '*'. The j-th character of the i-th line corresponds\nto the cell of labyrinth at row i and column j. Symbol '.' denotes the free\ncell, while symbol '*' denotes the cell with an obstacle. It is guaranteed,\nthat the starting cell contains no obstacles. Output Print exactly one integer\n\u2014 the number of cells in the labyrinth, which are reachable from starting\ncell, including the starting cell itself. Examples Input 4 5 3 2 1 2 .....\n.***. ...** *.... Output 10 Input 4 4 2 2 0 1 .... ..*. .... .... Output 7\nNote Cells, reachable in the corresponding example, are marked with '+'. First\nexample: +++.. +***. +++** *+++. Second example: .++. .+*. .++. .++.\n\n",
        "cf_contest_id": 1063,
        "cf_index": "B",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "graphs",
            "shortest paths"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4 5\r\n3 2\r\n1 2\r\n.....\r\n.***.\r\n...**\r\n*....\r\n",
                "10"
            ],
            [
                "4 4\r\n2 2\r\n0 1\r\n....\r\n..*.\r\n....\r\n....\r\n",
                "7"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1 1\r\n0 0\r\n.\r\n",
                "1"
            ],
            [
                "1 1\r\n1 1\r\n31 42\r\n.\r\n",
                "1"
            ]
        ]
    }
]