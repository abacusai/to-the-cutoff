[
    {
        "name": "AquaMoon and Two Arrays",
        "description": "AquaMoon and Cirno are playing an interesting game with arrays. Cirno has\nprepared two arrays \n    a\n and \n    b\n, both consist of \n    n\n non-negative\nintegers. AquaMoon can perform the following operation an arbitrary number of\ntimes (possibly zero): She chooses two indices \n    i\n and \n    j\n (\n    1 \n    \u2264\n    i, j \n    \u2264 n\n), then decreases the \n    i\n-th element of array \n    a\n by\n\n    1\n, and increases the \n    j\n-th element of array \n    a\n by \n    1\n. The\nresulting values at \n    i\n-th and \n    j\n-th index of array \n    a\n are\n\n    a_i - 1\n and \n    a_j + 1\n, respectively. Each element of array \n    a\n\nmust be non-negative after each operation. If \n    i = j\n this operation\ndoesn't change the array \n    a\n. AquaMoon wants to make some operations to\nmake arrays \n    a\n and \n    b\n equal. Two arrays \n    a\n and \n    b\n are\nconsidered equal if and only if \n    a_i = b_i\n for all \n    1 \n    \u2264 i \n    \u2264\n    n\n. Help AquaMoon to find a sequence of operations that will solve her\nproblem or find, that it is impossible to make arrays \n    a\n and \n    b\n\nequal. Please note, that you don't have to minimize the number of operations.\nInput The input consists of multiple test cases. The first line contains a\nsingle integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test\ncases. The first line of each test case contains a single integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 100\n). The second line of each test case contains\n\n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 100\n).\nThe sum of all \n    a_i\n does not exceed \n    100\n. The third line of each\ntest case contains \n    n\n integers \n    b_1, b_2, \n    \u2026, b_n\n (\n    0 \n    \u2264\n    b_i \n    \u2264 100\n). The sum of all \n    b_i\n does not exceed \n    100\n. Output\nFor each test case print \"-1\" on the only line if it is impossible to make two\narrays equal with some sequence of operations. Otherwise, print an integer\n\n    m\n (\n    0 \n    \u2264 m \n    \u2264 100\n) in the first line \u2014 the number of\noperations. Then print \n    m\n lines, each line consists of two integers\n\n    i\n and \n    j\n \u2014 the indices you choose for the operation. It can be\nproven that if it is possible to make two arrays equal with some sequence of\noperations, there exists a sequence with \n    m \n    \u2264 100\n. If there are\nmultiple possible solutions, you can print any. Example Input 4 4 1 2 3 4 3 1\n2 4 2 1 3 2 1 1 0 0 5 4 3 2 1 0 0 1 2 3 4 Output 2 2 1 3 1 -1 0 6 1 4 1 4 1 5\n1 5 2 5 2 5 Note In the first example, we do the following operations: \n    i =\n    2\n, \n    j = 1\n: \n    [1, 2, 3, 4] \n    \u2192 [2, 1, 3, 4]\n; \n    i = 3\n,\n\n    j = 1\n: \n    [2, 1, 3, 4] \n    \u2192 [3, 1, 2, 4]\n; In the second\nexample, it's impossible to make two arrays equal.\n\n",
        "cf_contest_id": 1546,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4\r\n1 2 3 4\r\n3 1 2 4\r\n2\r\n1 3\r\n2 1\r\n1\r\n0\r\n0\r\n5\r\n4 3 2 1 0\r\n0 1 2 3 4\r\n",
                "2 2 1 3 1\r\n-1\r\n0\r\n6 1 4 1 4 1 5 1 5 2 5 2 5\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n100\r\n1 1 2 0 1 2 2 1 1 1 0 0 0 0 1 0 1 0 2 2 1 0 0 2 0 1 0 0 2 3 0 1 0 2 0 1 0 0 2 1 2 1 0 0 0 0 0 0 0 0 3 0 0 3 0 2 1 0 0 0 0 1 0 2 0 0 0 0 2 0 2 0 3 0 0 2 0 0 0 3 3 2 0 3 1 0 1 3 3 3 2 2 0 1 2 3 2 1 0 0\r\n2 2 0 3 0 0 0 3 3 0 0 0 2 0 2 2 0 0 3 0 0 0 1 0 0 1 3 0 0 2 0 2 0 2 0 1 3 1 1 0 0 1 0 0 0 1 0 0 1 2 2 0 3 1 1 0 0 0 3 0 3 1 1 0 2 0 0 0 0 3 0 1 0 1 1 0 0 3 0 0 0 0 0 0 0 2 2 0 0 3 0 0 3 3 0 3 3 2 0 2\r\n",
                "62 3 1 3 2 5 4 6 4 6 4 7 8 7 8 10 9 17 9 20 13 20 13 21 15 24 16 24 16 29 19 29 23 30 27 39 27 40 27 41 32 41 37 51 37 54 37 54 38 56 46 56 49 57 50 64 50 64 53 69 53 69 53 71 55 71 59 73 59 73 59 73 61 76 61 76 61 80 63 80 65 80 65 81 70 81 70 81 70 82 72 82 74 84 75 84 78 84 78 85 78 88 86 88 86 88 87 89 93 89 93 89 93 91 94 91 94 92 97 92 98 95 100 95 100\r\n"
            ],
            [
                "3\r\n33\r\n1 0 3 0 6 5 0 5 5 3 0 1 0 0 0 0 2 3 0 0 2 1 0 0 2 1 0 3 0 3 0 5 1\r\n2 6 5 1 0 6 0 0 4 0 0 0 2 0 0 2 6 6 0 1 0 0 0 0 0 0 1 0 0 5 1 3 0\r\n33\r\n6 5 3 0 3 3 0 2 1 0 0 0 0 0 5 0 0 5 4 0 4 0 6 1 3 0 0 1 3 0 3 0 6\r\n4 0 5 4 0 3 5 0 0 5 0 0 0 5 0 6 0 4 0 1 4 0 0 0 0 5 3 0 0 1 5 4 0\r\n33\r\n4 1 0 0 0 3 0 0 0 1 4 0 2 5 6 4 0 0 4 6 0 0 0 1 0 0 0 1 4 0 0 4 6\r\n6 0 0 5 3 0 0 5 0 0 0 5 6 0 6 0 0 1 2 0 0 2 0 3 4 0 2 4 2 0 0 0 0\r\n",
                "-1\r\n43 1 3 1 3 2 4 2 4 2 4 2 4 2 7 5 7 5 7 5 7 8 7 8 10 9 10 15 10 15 10 15 10 15 14 15 14 18 14 19 14 19 14 19 16 19 16 23 16 23 16 23 16 23 16 23 20 23 26 24 26 25 26 25 26 25 26 28 27 29 27 29 27 29 30 33 31 33 31 33 32 33 32 33 32 33 32\r\n38 2 1 6 1 6 4 6 4 10 4 11 4 11 4 11 5 11 5 14 5 14 8 14 8 14 8 14 8 16 8 16 12 16 12 16 12 19 12 19 12 20 13 20 13 20 13 20 13 20 18 20 22 29 22 29 24 32 24 32 25 32 25 32 25 33 25 33 27 33 27 33 28 33 28 33 28\r\n"
            ],
            [
                "1\r\n100\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n",
                "1 59 6\r\n"
            ],
            [
                "1\r\n2\r\n2 0\r\n0 0\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n2\r\n2 2\r\n1 1\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n2\r\n5 6\r\n1 2\r\n",
                "-1\r\n"
            ],
            [
                "2\r\n2\r\n1 1\r\n3 3\r\n4\r\n1 2 3 10\r\n9 6 7 50\r\n",
                "-1\r\n-1\r\n"
            ]
        ]
    }
]