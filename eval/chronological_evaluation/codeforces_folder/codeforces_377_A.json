[
    {
        "name": "Maze",
        "description": "Pavel loves grid mazes. A grid maze is an n \u00d7 m rectangle maze where each cell\nis either empty, or is a wall. You can go from one cell to another only if\nboth cells are empty and have a common side. Pavel drew a grid maze with all\nempty cells forming a connected area. That is, you can go from any empty cell\nto any other one. Pavel doesn't like it when his maze has too little walls. He\nwants to turn exactly k empty cells into walls so that all the remaining cells\nstill formed a connected area. Help him. Input The first line contains three\nintegers n, m, k (1 \u2264 n, m \u2264 500, 0 \u2264 k < s), where n and m are the maze's\nheight and width, correspondingly, k is the number of walls Pavel wants to add\nand letter s represents the number of empty cells in the original maze. Each\nof the next n lines contains m characters. They describe the original maze. If\na character on a line equals \".\", then the corresponding cell is empty and if\nthe character equals \"#\", then the cell is a wall. Output Print n lines\ncontaining m characters each: the new maze that fits Pavel's requirements.\nMark the empty cells that you transformed into walls as \"X\", the other cells\nmust be left without changes (that is, \".\" and \"#\"). It is guaranteed that a\nsolution exists. If there are multiple solutions you can output any of them.\nExamples Input 3 4 2 #..# ..#. #... Output #.X# X.#. #... Input 5 4 5 #...\n#.#. .#.. ...# .#.# Output #XXX #X#. X#.. ...# .#.#\n\n",
        "cf_contest_id": 377,
        "cf_index": "A",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 4 2\r\n#..#\r\n..#.\r\n#...\r\n",
                "#.X#\r\nX.#.\r\n#...\r\n"
            ],
            [
                "5 4 5\r\n#...\r\n#.#.\r\n.#..\r\n...#\r\n.#.#\r\n",
                "#...\r\n#X#.\r\nX#..\r\nXX.#\r\nX#.#\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1 0\r\n.\r\n",
                ".\r\n"
            ],
            [
                "2 3 1\r\n..#\r\n#..\r\n",
                "X.#\r\n#..\r\n"
            ],
            [
                "2 3 1\r\n#..\r\n..#\r\n",
                "#..\r\nX.#\r\n"
            ],
            [
                "2 5 2\r\n###..\r\n###..\r\n",
                "###X.\r\n###X.\r\n"
            ]
        ]
    }
]