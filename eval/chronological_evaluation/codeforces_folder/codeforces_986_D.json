[
    {
        "name": "Perfect Encoding",
        "description": "You are working as an analyst in a company working on a new system for big\ndata storage. This system will store \n    n\n different objects. Each object\nshould have a unique ID. To create the system, you choose the parameters of\nthe system \u2014 integers \n    m \n    \u2265 1\n and \n    b_1, b_2, \n    \u2026, b_m\n.\nWith these parameters an ID of some object in the system is an array of\nintegers \n    [a_1, a_2, \n    \u2026, a_m]\n where \n    1 \n    \u2264 a_i\n    \u2264\n    b_i\n holds for every \n    1 \n    \u2264 i \n    \u2264 m\n. Developers say that\nproduction costs are proportional to \n    \u2211_i=1^m b_i\n. You are\nasked to choose parameters \n    m\n and \n    b_i\n so that the system will be\nable to assign unique IDs to \n    n\n different objects and production costs\nare minimized. Note that you don't have to use all available IDs. Input In the\nonly line of input there is one positive integer \n    n\n. The length of the\ndecimal representation of \n    n\n is no greater than \n    1.5 \n    \u00b7 10^6\n.\nThe integer does not contain leading zeros. Output Print one number \u2014 minimal\nvalue of \n    \u2211_i=1^m b_i\n. Examples Input 36 Output 10 Input 37\nOutput 11 Input 12345678901234567890123456789 Output 177\n\n",
        "cf_contest_id": 986,
        "cf_index": "D",
        "cf_rating": 3100,
        "difficulty": 0,
        "cf_tags": [
            "fft",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "36\r\n",
                "10\r\n"
            ],
            [
                "37\r\n",
                "11\r\n"
            ],
            [
                "12345678901234567890123456789\r\n",
                "177\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n",
                "1\r\n"
            ],
            [
                "2\r\n",
                "2\r\n"
            ],
            [
                "3\r\n",
                "3\r\n"
            ],
            [
                "4\r\n",
                "4\r\n"
            ],
            [
                "7421902501252475186372406731932548506197390793597574544727433297197476846519276598727359617092494798\r\n",
                "629\r\n"
            ],
            [
                "71057885893313745806894531138592341136175030511382512555364579061229040750815096670263802546201989828165866147027119861863385397179695224216202346062872417111920113483747119385957051753101263769591892062039112567316036455789217245754461225443096439906225767290690128677713047690686004149082311677134836383178262318973298581951974863511315252485252083010690948164456205330279738760034861583874764199950445592461479109814313530332776429627014232776723160331462731018692207739471347664936326394313671025\r\n",
                "3144\r\n"
            ],
            [
                "515377520732011331036461129765621272702107522001\r\n",
                "300\r\n"
            ],
            [
                "515377520732011331036461129765621272702107522002\r\n",
                "301\r\n"
            ],
            [
                "515377520732011331036461129765621272702107522000\r\n",
                "300\r\n"
            ],
            [
                "2644141638961613273780910519504288731930844065504296335329840736453657194693409799081556627701216123927819555393745164711901909164201237823730685450515907348055240450396641607756029548457929682548780800235177236082257895631246188876123132346108173348981012356250960688811094108794077791634930736509832272441660537127557164580456832796615775793837112808169797875218746484343692719877391033530037881176218120852179342877728205628700771297494331664021228732264346205537805710440002\r\n",
                "3002\r\n"
            ]
        ]
    }
]