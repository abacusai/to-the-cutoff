[
    {
        "name": "Permutation Minimization by Deque",
        "description": "In fact, the problems E1 and E2 do not have much in common. You should\nprobably think of them as two separate problems. A permutation \n    p\n of size\n\n    n\n is given. A permutation of size \n    n\n is an array of size \n    n\n in\nwhich each integer from \n    1\n to \n    n\n occurs exactly once. For example,\n\n    [1, 4, 3, 2]\n and \n    [4, 2, 1, 3]\n are correct permutations while\n\n    [1, 2, 4]\n and \n    [1, 2, 2]\n are not. Let us consider an empty deque\n(double-ended queue). A deque is a data structure that supports adding\nelements to both the beginning and the end. So, if there are elements \n    [1,\n    5, 2]\n currently in the deque, adding an element \n    4\n to the beginning\nwill produce the sequence \n    [\n    4, 1, 5, 2]\n, and adding same\nelement to the end will produce \n    [1, 5, 2, \n    4]\n. The\nelements of the permutation are sequentially added to the initially empty\ndeque, starting with \n    p_1\n and finishing with \n    p_n\n. Before adding\neach element to the deque, you may choose whether to add it to the beginning\nor the end. For example, if we consider a permutation \n    p = [3, 1, 2, 4]\n,\none of the possible sequences of actions looks like this: \n    \n 1.add\n\n    3\n to the end of the deque:deque has a sequence \n    [\n    3]\n\nin it;\n    \n 2.add \n    1\n to the beginning of the deque:deque has a\nsequence \n    [\n    1, 3]\n in it;\n    \n 3.add \n    2\n to the\nend of the deque:deque has a sequence \n    [1, 3, \n    2]\n in\nit;\n    \n 4.add \n    4\n to the end of the deque:deque has a sequence\n\n    [1, 3, 2, \n    4]\n in it; Find the lexicographically smallest\npossible sequence of elements in the deque after the entire permutation has\nbeen processed. A sequence \n    [x_1, x_2, \n    \u2026, x_n]\n is\nlexicographically smaller than the sequence \n    [y_1, y_2, \n    \u2026, y_n]\n if\nthere exists such \n    i \n    \u2264 n\n that \n    x_1 = y_1\n, \n    x_2 = y_2\n,\n\n    \u2026\n, \n    x_i - 1 = y_i - 1\n and \n    x_i < y_i\n. In other\nwords, if the sequences \n    x\n and \n    y\n have some (possibly empty)\nmatching prefix, and the next element of the sequence \n    x\n is strictly\nsmaller than the corresponding element of the sequence \n    y\n. For example,\nthe sequence \n    [1, 3, 2, 4]\n is smaller than the sequence \n    [1, 3, 4,\n    2]\n because after the two matching elements \n    [1, 3]\n in the start the\nfirst sequence has an element \n    2\n which is smaller than the corresponding\nelement \n    4\n in the second sequence. Input The first line contains an\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of test cases. The\nnext \n    2t\n lines contain descriptions of the test cases. The first line of\neach test case description contains an integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n) \u2014 permutation size. The second line of the description\ncontains \n    n\n space-separated integers \n    p_i\n (\n    1 \n    \u2264 p_i \n    \u2264\n    n\n; all \n    p_i\n are all unique) \u2014 elements of the permutation. It is\nguaranteed that the sum of \n    n\n over all test cases does not exceed \n    2\n    \n    \u00b7 10^5\n. Output Print \n    t\n lines, each line containing the answer\nto the corresponding test case. The answer to a test case should contain\n\n    n\n space-separated integer numbers \u2014 the elements of the\nlexicographically smallest permutation that is possible to find in the deque\nafter executing the described algorithm. Example Input 5 4 3 1 2 4 3 3 2 1 3 3\n1 2 2 1 2 2 2 1 Output 1 3 2 4 1 2 3 1 3 2 1 2 1 2 Note One of the ways to get\na lexicographically smallest permutation \n    [1, 3, 2, 4]\n from the\npermutation \n    [3, 1, 2, 4]\n (the first sample test case) is described in\nthe problem statement.\n\n",
        "cf_contest_id": 1579,
        "cf_index": "E1",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n4\r\n3 1 2 4\r\n3\r\n3 2 1\r\n3\r\n3 1 2\r\n2\r\n1 2\r\n2\r\n2 1\r\n",
                "1 3 2 4\r\n1 2 3\r\n1 3 2\r\n1 2\r\n1 2\r\n"
            ]
        ],
        "private_cases": []
    }
]