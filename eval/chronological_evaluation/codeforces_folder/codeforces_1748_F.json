[
    {
        "name": "Circular Xor Reversal",
        "description": "You have an array \n    a_0, a_1, \n    \u2026, a_n-1\n of length \n    n\n.\nInitially, \n    a_i = 2^i\n for all \n    0 \n    \u2264 i \n     n\n. Note that array\n\n    a\n is zero-indexed. You want to reverse this array (that is, make\n\n    a_i\n equal to \n    2^n-1-i\n for all \n    0 \n    \u2264 i \n     n\n). To do\nthis, you can perform the following operation no more than \n    250\n     000\n\ntimes: Select an integer \n    i\n (\n    0 \n    \u2264 i \n     n\n) and replace\n\n    a_i\n by \n    a_i \n    \u2295 a_(i+1)\n     n\n. Here, \n    \u2295\n\ndenotes the bitwise XOR operation. Your task is to find any sequence of\noperations that will result in the array \n    a\n being reversed. It can be\nshown that under the given constraints, a solution always exists. Input The\nfirst line contains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 400\n) \u2014 the\nlength of the array \n    a\n. Output On the first line print one integer\n\n    k\n (\n    0 \n    \u2264 k \n    \u2264 250\n     000\n) \u2014 the number of operations\nperformed. On the second line print \n    k\n integers\n\n    i_1,i_2,\n    \u2026,i_k\n (\n    0 \n    \u2264 i_j \n     n\n). Here, \n    i_j\n should\nbe the integer selected on the \n    j\n-th operation. Note that you don't need\nto minimize the number of operations. Examples Input 2 Output 3 1 0 1 Input 3\nOutput 9 1 0 1 0 2 1 0 1 0 Note In the notes, the elements on which the\noperations are performed are colored red. In the first test case, array\n\n    a\n will change in the following way: \n    [1,\n    2]\n    \n    \u2192 [\n    1,3] \n    \u2192 [2,\n    3]\n    \n    \u2192 [2,1]\n. In the second test case, array \n    a\n will change in\nthe following way: \n    [1,\n    2,4] \n    \u2192\n    [\n    1,6,4] \n    \u2192 [7,\n    6,4] \n    \u2192\n    [\n    7,2,4] \n    \u2192 [5,2,\n    4] \n    \u2192\n    [5,\n    2,1] \n    \u2192 [\n    5,3,1] \n    \u2192\n    [6,\n    3,1] \n    \u2192 [\n    6,2,1] \n    \u2192\n    [4,2,1]\n.\n\n",
        "cf_contest_id": 1748,
        "cf_index": "F",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "constructive algorithms"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n",
                "3\r\n0 1 0 "
            ],
            [
                "3\r\n",
                "9\r\n1 0 1 0 2 1 0 1 0 "
            ]
        ],
        "private_cases": [
            [
                "4\r\n",
                "21\r\n2 1 0 1 2 1 0 0 3 2 3 0 3 2 2 1 0 1 2 1 0 "
            ],
            [
                "5\r\n",
                "31\r\n3 2 1 0 1 2 3 2 1 2 0 1 0 4 3 4 0 4 3 3 2 1 0 1 2 3 2 1 2 0 1 "
            ],
            [
                "6\r\n",
                "51\r\n4 3 2 1 0 1 2 3 4 3 2 1 2 3 2 0 1 1 0 5 4 3 4 5 0 1 0 5 4 5 0 5 3 4 4 3 2 1 0 1 2 3 4 3 2 1 2 3 2 0 1 "
            ],
            [
                "7\r\n",
                "65\r\n5 4 3 2 1 0 1 2 3 4 5 4 3 2 1 2 3 4 3 2 3 0 1 2 1 0 6 5 4 5 6 0 1 0 6 5 6 0 6 4 5 5 4 3 2 1 0 1 2 3 4 5 4 3 2 1 2 3 4 3 2 3 0 1 2 "
            ]
        ]
    }
]