[
    {
        "name": "Pentagon",
        "description": "According to the last order issued by the president of Berland every city of\nthe country must have its own Ministry Defense building (their own Pentagon).\nA megapolis Berbourg was not an exception. This city has n junctions, some\npairs of which are connected by two-way roads. Overall there are m roads in\nthe city, no more than one between each pair of junctions. At the moment\nchoosing a location place for Pentagon in Berbourg is being discussed. It has\nbeen decided that Pentagon should cover the territory of five different\njunctions which are joined into a cycle by roads. In the order to build\nPentagon a special wall will be built along the roads (with high-tension\nrazor, high-voltage wire and other attributes). Thus, the number of possible\nways of building Pentagon in the city is equal to the number of different\ncycles at lengths of 5, composed of junctions and roads. Your task is to\nprints the number of ways of building Pentagon in Berbourg. Only well-\noptimized solutions will be accepted. Please, test your code on the maximal\ntestcase. Input The first line contains two integers n and m (1 \u2264 n \u2264 700;0 \u2264\nm \u2264 n\u00b7(n - 1) / 2), where n represents the number of junctions and m is the\nnumber of roads in the city. Then follow m lines containing the road\ndescriptions, one in each line. Every road is set by a number of integers ai,\nbi (1 \u2264 ai, bi \u2264 n;ai \u2260 bi), where ai and bi represent the numbers of\njunctions, connected by the road. The junctions are numbered from 1 to n. It\nis not guaranteed that from any junction one can get to any other one moving\nalong the roads. Output Print the single number which represents the required\nnumber of ways. Please, do not use \nintegers in C++. It is preffered to use cout (also you may use \nExamples Input 5 5 1 2 2 3 3 4 4 5 5 1 Output 1 Input 5 10 1 2 1 3 1 4 1 5 2 3\n2 4 2 5 3 4 3 5 4 5 Output 12\n\n",
        "cf_contest_id": 51,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "graphs",
            "matrices"
        ],
        "time_limit_seconds": 10.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 5\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 1\r\n",
                "1\r\n"
            ],
            [
                "5 10\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n2 3\r\n2 4\r\n2 5\r\n3 4\r\n3 5\r\n4 5\r\n",
                "12\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 3\r\n1 2\r\n2 3\r\n3 1\r\n",
                "0\r\n"
            ],
            [
                "6 15\r\n4 6\r\n1 2\r\n5 2\r\n3 1\r\n5 3\r\n6 5\r\n5 1\r\n2 3\r\n4 2\r\n1 6\r\n6 3\r\n2 6\r\n1 4\r\n4 3\r\n4 5\r\n",
                "72\r\n"
            ],
            [
                "6 9\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 1\r\n1 4\r\n2 5\r\n3 6\r\n",
                "0\r\n"
            ],
            [
                "1 0\r\n",
                "0\r\n"
            ],
            [
                "2 0\r\n",
                "0\r\n"
            ],
            [
                "3 0\r\n",
                "0\r\n"
            ],
            [
                "4 0\r\n",
                "0\r\n"
            ],
            [
                "5 0\r\n",
                "0\r\n"
            ],
            [
                "6 0\r\n",
                "0\r\n"
            ],
            [
                "7 0\r\n",
                "0\r\n"
            ],
            [
                "400 0\r\n",
                "0\r\n"
            ],
            [
                "5 6\r\n2 1\r\n2 5\r\n2 4\r\n3 2\r\n1 3\r\n5 4\r\n",
                "0\r\n"
            ],
            [
                "5 7\r\n5 4\r\n1 3\r\n1 4\r\n2 4\r\n1 2\r\n2 5\r\n5 3\r\n",
                "2\r\n"
            ],
            [
                "5 8\r\n5 1\r\n5 4\r\n1 4\r\n3 2\r\n4 3\r\n5 3\r\n1 3\r\n1 2\r\n",
                "2\r\n"
            ],
            [
                "5 9\r\n5 2\r\n4 5\r\n3 1\r\n4 1\r\n2 4\r\n5 1\r\n2 3\r\n3 4\r\n3 5\r\n",
                "6\r\n"
            ],
            [
                "6 4\r\n3 1\r\n6 4\r\n5 4\r\n6 3\r\n",
                "0\r\n"
            ],
            [
                "6 5\r\n5 6\r\n3 6\r\n6 2\r\n5 2\r\n5 4\r\n",
                "0\r\n"
            ],
            [
                "6 6\r\n4 2\r\n6 3\r\n3 4\r\n3 5\r\n6 5\r\n6 4\r\n",
                "0\r\n"
            ],
            [
                "6 7\r\n6 1\r\n2 1\r\n4 2\r\n6 3\r\n3 2\r\n2 5\r\n5 1\r\n",
                "1\r\n"
            ],
            [
                "6 8\r\n6 4\r\n5 4\r\n2 5\r\n2 1\r\n6 5\r\n1 4\r\n6 1\r\n5 3\r\n",
                "2\r\n"
            ],
            [
                "6 10\r\n4 5\r\n6 4\r\n5 1\r\n1 6\r\n1 2\r\n1 4\r\n4 2\r\n4 3\r\n2 5\r\n6 5\r\n",
                "6\r\n"
            ],
            [
                "6 13\r\n6 3\r\n2 3\r\n4 3\r\n1 2\r\n5 6\r\n4 5\r\n4 2\r\n6 4\r\n1 4\r\n5 1\r\n1 6\r\n1 3\r\n2 5\r\n",
                "32\r\n"
            ],
            [
                "9 13\r\n4 5\r\n2 6\r\n7 8\r\n3 9\r\n1 4\r\n9 6\r\n2 7\r\n2 8\r\n4 8\r\n5 2\r\n4 2\r\n3 4\r\n9 5\r\n",
                "4\r\n"
            ],
            [
                "12 24\r\n4 11\r\n12 7\r\n10 1\r\n5 8\r\n11 12\r\n1 7\r\n9 6\r\n11 10\r\n8 12\r\n8 11\r\n12 3\r\n9 8\r\n11 2\r\n10 4\r\n5 1\r\n5 4\r\n6 10\r\n5 2\r\n2 7\r\n11 9\r\n1 11\r\n3 1\r\n8 6\r\n1 2\r\n",
                "41\r\n"
            ],
            [
                "10 45\r\n3 10\r\n7 8\r\n6 4\r\n8 10\r\n9 7\r\n2 3\r\n1 10\r\n2 7\r\n2 5\r\n1 5\r\n2 1\r\n7 6\r\n10 9\r\n5 10\r\n4 8\r\n7 3\r\n8 6\r\n3 9\r\n5 3\r\n9 8\r\n6 10\r\n1 7\r\n1 9\r\n4 1\r\n10 7\r\n4 3\r\n5 8\r\n6 9\r\n1 3\r\n3 6\r\n7 4\r\n1 6\r\n2 6\r\n8 3\r\n10 4\r\n4 2\r\n2 10\r\n5 4\r\n5 9\r\n6 5\r\n7 5\r\n9 2\r\n4 9\r\n1 8\r\n2 8\r\n",
                "3024\r\n"
            ],
            [
                "700 0\r\n",
                "0\r\n"
            ],
            [
                "700 10\r\n256 687\r\n190 40\r\n334 83\r\n226 248\r\n589 544\r\n427 73\r\n555 171\r\n391 445\r\n620 197\r\n140 285\r\n",
                "0\r\n"
            ],
            [
                "700 40\r\n613 497\r\n459 207\r\n341 252\r\n145 579\r\n95 496\r\n271 245\r\n632 442\r\n162 622\r\n134 316\r\n353 310\r\n436 82\r\n386 640\r\n155 616\r\n107 222\r\n142 47\r\n489 55\r\n531 217\r\n543 258\r\n625 667\r\n504 596\r\n563 210\r\n58 258\r\n655 189\r\n351 276\r\n240 683\r\n234 166\r\n681 233\r\n684 486\r\n63 671\r\n205 542\r\n679 368\r\n21 260\r\n1 347\r\n627 523\r\n481 178\r\n397 206\r\n371 418\r\n483 69\r\n606 690\r\n386 312\r\n",
                "0\r\n"
            ]
        ]
    }
]