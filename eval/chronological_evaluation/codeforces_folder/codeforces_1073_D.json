[
    {
        "name": "Berland Fair",
        "description": "XXI Berland Annual Fair is coming really soon! Traditionally fair consists of\n\n    n\n booths, arranged in a circle. The booths are numbered \n    1\n through\n\n    n\n clockwise with \n    n\n being adjacent to \n    1\n. The \n    i\n-th\nbooths sells some candies for the price of \n    a_i\n burles per item. Each\nbooth has an unlimited supply of candies. Polycarp has decided to spend at\nmost \n    T\n burles at the fair. However, he has some plan in mind for his\npath across the booths: at first, he visits booth number \n    1\n; if he has\nenough burles to buy exactly one candy from the current booth, then he buys it\nimmediately; then he proceeds to the next booth in the clockwise order\n(regardless of if he bought a candy or not). Polycarp's money is finite, thus\nthe process will end once he can no longer buy candy at any booth. Calculate\nthe number of candies Polycarp will buy. Input The first line contains two\nintegers \n    n\n and \n    T\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n, \n    1 \n    \u2264\n    T \n    \u2264 10^18\n) \u2014 the number of booths at the fair and the initial amount\nof burles Polycarp has. The second line contains \n    n\n integers \n    a_1, a_2,\n    \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the price of the single candy\nat booth number \n    i\n. Output Print a single integer \u2014 the total number of\ncandies Polycarp will buy. Examples Input 3 38 5 2 5 Output 10 Input 5 21 2 4\n100 2 6 Output 6 Note Let's consider the first example. Here are Polycarp's\nmoves until he runs out of money: Booth \n    1\n, buys candy for \n    5\n, \n    T\n    = 33\n; Booth \n    2\n, buys candy for \n    2\n, \n    T = 31\n; Booth \n    3\n,\nbuys candy for \n    5\n, \n    T = 26\n; Booth \n    1\n, buys candy for \n    5\n,\n\n    T = 21\n; Booth \n    2\n, buys candy for \n    2\n, \n    T = 19\n; Booth\n\n    3\n, buys candy for \n    5\n, \n    T = 14\n; Booth \n    1\n, buys candy for\n\n    5\n, \n    T = 9\n; Booth \n    2\n, buys candy for \n    2\n, \n    T = 7\n;\nBooth \n    3\n, buys candy for \n    5\n, \n    T = 2\n; Booth \n    1\n, buys no\ncandy, not enough money; Booth \n    2\n, buys candy for \n    2\n, \n    T = 0\n.\nNo candy can be bought later. The total number of candies bought is \n    10\n.\nIn the second example he has \n    1\n burle left at the end of his path, no\ncandy can be bought with this amount.\n\n",
        "cf_contest_id": 1073,
        "cf_index": "D",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 38\r\n5 2 5\r\n",
                "10\n"
            ],
            [
                "5 21\r\n2 4 100 2 6\r\n",
                "6\n"
            ]
        ],
        "private_cases": [
            [
                "1 53\r\n1\r\n",
                "53\n"
            ],
            [
                "2 50\r\n40 15\r\n",
                "1\n"
            ],
            [
                "5 17\r\n2 4 2 4 4\r\n",
                "5\n"
            ],
            [
                "10 25\r\n2 2 5 1 5 4 5 5 5 1\r\n",
                "8\n"
            ],
            [
                "1 192608170\r\n1\r\n",
                "192608170\n"
            ],
            [
                "78 74\r\n20194 1621 21498 13827 31277 19791 6583 13579 11160 20419 26490 160 3450 12925 9073 10381 27009 27968 10209 6478 18504 15371 32608 14197 12075 13723 12612 19020 28762 11057 12891 31164 16684 13717 19933 25453 2742 4955 6814 2863 10397 15461 20616 10905 2600 20137 4681 9199 27033 14388 32585 7241 3518 17007 8671 242 18883 25250 3524 31759 12106 29622 17096 7297 9917 15679 10179 13580 25059 27578 12751 14008 23730 24082 2996 2679 24677 27754\r\n",
                "0\n"
            ],
            [
                "1 1\r\n10\r\n",
                "0\n"
            ],
            [
                "2 6\r\n1 3\r\n",
                "4\n"
            ],
            [
                "3 38\r\n39 39 39\r\n",
                "0\n"
            ],
            [
                "2 11\r\n1 2\r\n",
                "8\n"
            ],
            [
                "15 32767\r\n1 1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192\r\n",
                "120\n"
            ],
            [
                "2 2\r\n1 2\r\n",
                "2\n"
            ],
            [
                "8 1492858498\r\n39 13488 107 963 63 16 17105 248\r\n",
                "372904\n"
            ],
            [
                "7 1605798382\r\n47 570 10859 4 30749 38 1617\r\n",
                "256176\n"
            ],
            [
                "8 1790141349\r\n56208 15576 259 11096 632 2 83 940\r\n",
                "168910\n"
            ],
            [
                "1 1\r\n2\r\n",
                "0\n"
            ],
            [
                "11 618\r\n33 17 17 39 26 2 11 1 33 22 44\r\n",
                "34\n"
            ],
            [
                "7 1485757327\r\n314 91 80 47790 2 745 237\r\n",
                "211176\n"
            ],
            [
                "5 16\r\n18 9 1 1 20\r\n",
                "8\n"
            ],
            [
                "8 1046772005\r\n922 104 1665 10267 1 1 3 6151\r\n",
                "438148\n"
            ],
            [
                "3 656\r\n11 10 25\r\n",
                "43\n"
            ],
            [
                "3 1588693287\r\n1730 4 63\r\n",
                "2652297\n"
            ],
            [
                "2 1950535788\r\n2834 1\r\n",
                "1377961\n"
            ],
            [
                "5 1\r\n2 2 2 2 2\r\n",
                "0\n"
            ],
            [
                "2 1147666245\r\n20 12102\r\n",
                "189540\n"
            ],
            [
                "1 1\r\n1\r\n",
                "1\n"
            ],
            [
                "7 20\r\n23 6 10 12 1 1 24\r\n",
                "6\n"
            ],
            [
                "4 1364869685\r\n2793 132 290 37352\r\n",
                "134612\n"
            ],
            [
                "8 1486004681\r\n57 4 577 49401 12896 92 14558 3\r\n",
                "153302\n"
            ]
        ]
    }
]