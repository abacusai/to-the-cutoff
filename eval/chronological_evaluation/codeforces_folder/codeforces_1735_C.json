[
    {
        "name": "Phase Shift",
        "description": "There was a string \n    s\n which was supposed to be encrypted. For this\nreason, all \n    26\n lowercase English letters were arranged in a circle in\nsome order, afterwards, each letter in \n    s\n was replaced with the one that\nfollows in clockwise order, in that way the string \n    t\n was obtained. You\nare given a string \n    t\n. Determine the lexicographically smallest string\n\n    s\n that could be a prototype of the given string \n    t\n. A string\n\n    a\n is lexicographically smaller than a string \n    b\n of the same length\nif and only if: in the first position where \n    a\n and \n    b\n differ, the\nstring \n    a\n has a letter, that appears earlier in the alphabet than the\ncorresponding letter in \n    b\n. Input The first line of the input contains a\nsingle integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 3 \n    \u00b7 10^4\n) \u2014 the number of\ntest cases. The description of test cases follows. The first line of each test\ncase contains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the length of\nthe string \n    t\n. The next line contains the string \n    t\n of the length\n\n    n\n, containing lowercase English letters. It is guaranteed that the sum\nof \n    n\n over all test cases doesn't exceed \n    2 \n    \u00b7 10^5\n. Output For\neach test case, output a single line containing the lexicographically smallest\nstring \n    s\n which could be a prototype of \n    t\n. Example Input 5 1 a 2 ba\n10 codeforces 26 abcdefghijklmnopqrstuvwxyz 26 abcdefghijklmnopqrstuvwxzy\nOutput b ac abcdebfadg bcdefghijklmnopqrstuvwxyza bcdefghijklmnopqrstuvwxyaz\nNote In the first test case, we couldn't have the string \"a\", since the letter\na would transit to itself. Lexicographically the second string \"b\" is suitable\nas an answer. In the second test case, the string \"aa\" is not suitable, since\na would transit to itself. \"ab\" is not suitable, since the circle would be\nclosed with \n    2\n letters, but it must contain all \n    26\n. The next string\n\"ac\" is suitable. Below you can see the schemes for the first three test\ncases. The non-involved letters are skipped, they can be arbitrary placed in\nthe gaps.\n\n",
        "cf_contest_id": 1735,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy",
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1\r\na\r\n2\r\nba\r\n10\r\ncodeforces\r\n26\r\nabcdefghijklmnopqrstuvwxyz\r\n26\r\nabcdefghijklmnopqrstuvwxzy\r\n",
                "b\r\nac\r\nabcdebfadg\r\nbcdefghijklmnopqrstuvwxyza\r\nbcdefghijklmnopqrstuvwxyaz\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n229\r\nhqemnkgqkzwqrqvwvznqfbfuucuklaxxfdujryemazazmxnctbebbyzzyivyxzppxebmpfbhupftjryqrkfonnacurenqpmcqzjvqnerngeptcpuaxmcczujpokjcozmhtnnaodehsprxdznxyiebtdlzrwnfvxokrxslnilwsnjazhgelnmfrrlqbcivvxhlzasfowoedhqiklddancjxoridirctizpnfrs\r\n",
                "abcdefhbfgibjbkikgeblmlnnonfpqrrlsntjucdqgqgdreovmcmmugguxkurgyyrcmdylmanylvtjubjflzeeqonjcebydobgtkbecjehcyvoynqrdoogntyzftozgdaveeqzscawyjrsgeruxcmvspgjielkrzfjrwpexpiwetqgahcpedljjpbmoxkkrapgqwlzizcsabxfpssqeotrzjxsxjovxgyeljw\r\n"
            ]
        ]
    }
]