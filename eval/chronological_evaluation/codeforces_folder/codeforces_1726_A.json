[
    {
        "name": "Mainak and Array",
        "description": "Mainak has an array \n    a_1, a_2, \n    \u2026, a_n\n of \n    n\n positive\nintegers. He will do the following operation to this array exactly once: Pick\na subsegment of this array and cyclically rotate it by any amount. Formally,\nhe can do the following exactly once: Pick two integers \n    l\n and \n    r\n,\nsuch that \n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 n\n, and any positive integer \n    k\n.\nRepeat this \n    k\n times: set \n    a_l=a_l+1, a_l+1=a_l+2, \n    \u2026,\n    a_r-1=a_r, a_r=a_l\n (all changes happen at the same time). Mainak wants to\nmaximize the value of \n    (a_n - a_1)\n after exactly one such operation.\nDetermine the maximum value of \n    (a_n - a_1)\n that he can obtain. Input\nEach test contains multiple test cases. The first line contains a single\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 50\n) \u2014 the number of test cases.\nDescription of the test cases follows. The first line of each test case\ncontains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2000\n). The second\nline of each test case contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n\n(\n    1 \n    \u2264 a_i \n    \u2264 999\n). It is guaranteed that the sum of \n    n\n over\nall test cases does not exceed \n    2000\n. Output For each test case, output a\nsingle integer \u2014 the maximum value of \n    (a_n - a_1)\n that Mainak can obtain\nby doing the operation exactly once. Example Input 5 6 1 3 9 11 5 7 1 20 3 9\n99 999 4 2 1 8 1 3 2 1 5 Output 10 0 990 7 4 Note In the first test case, we\ncan rotate the subarray from index \n    3\n to index \n    6\n by an amount of\n\n    2\n (i.e. choose \n    l = 3\n, \n    r = 6\n and \n    k = 2\n) to get the\noptimal array: \n    \n\n    [1, 3, \n    9, 11, 5, 7] \n    \u27f6 [1,\n    3, \n    5, 7, 9, 11]\n\n    \n So the answer is \n    a_n - a_1 = 11 - 1 =\n    10\n. In the second testcase, it is optimal to rotate the subarray starting\nand ending at index \n    1\n and rotating it by an amount of \n    2\n. In the\nfourth testcase, it is optimal to rotate the subarray starting from index\n\n    1\n to index \n    4\n and rotating it by an amount of \n    3\n. So the\nanswer is \n    8 - 1 = 7\n.\n\n",
        "cf_contest_id": 1726,
        "cf_index": "A",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n6\r\n1 3 9 11 5 7\r\n1\r\n20\r\n3\r\n9 99 999\r\n4\r\n2 1 8 1\r\n3\r\n2 1 5\r\n",
                "10\r\n0\r\n990\r\n7\r\n4\r\n"
            ]
        ],
        "private_cases": [
            [
                "50\r\n1\r\n111\r\n1\r\n322\r\n1\r\n196\r\n1\r\n312\r\n1\r\n47\r\n1\r\n638\r\n1\r\n486\r\n1\r\n664\r\n1\r\n836\r\n1\r\n590\r\n1\r\n343\r\n1\r\n741\r\n1\r\n42\r\n1\r\n832\r\n1\r\n165\r\n1\r\n474\r\n1\r\n610\r\n1\r\n710\r\n1\r\n785\r\n1\r\n932\r\n1\r\n831\r\n1\r\n240\r\n1\r\n792\r\n1\r\n572\r\n1\r\n547\r\n1\r\n436\r\n1\r\n173\r\n1\r\n838\r\n1\r\n383\r\n1\r\n580\r\n1\r\n238\r\n1\r\n971\r\n1\r\n433\r\n1\r\n144\r\n1\r\n870\r\n1\r\n217\r\n1\r\n426\r\n1\r\n659\r\n1\r\n116\r\n1\r\n511\r\n1\r\n71\r\n1\r\n764\r\n1\r\n317\r\n1\r\n307\r\n1\r\n615\r\n1\r\n586\r\n1\r\n29\r\n1\r\n270\r\n1\r\n663\r\n1\r\n509\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "1\r\n4\r\n8 2 2 1\r\n",
                "6\r\n"
            ],
            [
                "50\r\n1\r\n999\r\n1\r\n998\r\n1\r\n997\r\n1\r\n996\r\n1\r\n995\r\n1\r\n994\r\n1\r\n993\r\n1\r\n992\r\n1\r\n991\r\n1\r\n990\r\n1\r\n989\r\n1\r\n988\r\n1\r\n987\r\n1\r\n986\r\n1\r\n985\r\n1\r\n984\r\n1\r\n983\r\n1\r\n982\r\n1\r\n981\r\n1\r\n980\r\n1\r\n979\r\n1\r\n978\r\n1\r\n977\r\n1\r\n976\r\n1\r\n975\r\n1\r\n974\r\n1\r\n973\r\n1\r\n972\r\n1\r\n971\r\n1\r\n970\r\n1\r\n969\r\n1\r\n968\r\n1\r\n967\r\n1\r\n966\r\n1\r\n965\r\n1\r\n964\r\n1\r\n963\r\n1\r\n962\r\n1\r\n961\r\n1\r\n960\r\n1\r\n959\r\n1\r\n958\r\n1\r\n957\r\n1\r\n956\r\n1\r\n955\r\n1\r\n954\r\n1\r\n953\r\n1\r\n952\r\n1\r\n951\r\n1\r\n950\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "2\r\n3\r\n2 2 3\r\n2\r\n2 2\r\n",
                "1\r\n0\r\n"
            ],
            [
                "1\r\n9\r\n4 5 4 3 2 1 2 3 4\r\n",
                "3\r\n"
            ],
            [
                "1\r\n3\r\n100 3 1\r\n",
                "97\r\n"
            ],
            [
                "1\r\n2\r\n1 10\r\n",
                "9\r\n"
            ],
            [
                "1\r\n3\r\n999 100 1\r\n",
                "899\r\n"
            ],
            [
                "1\r\n3\r\n999 2 1\r\n",
                "997\r\n"
            ],
            [
                "1\r\n3\r\n3 2 1\r\n",
                "1\r\n"
            ],
            [
                "1\r\n5\r\n5 1 8 7 6\r\n",
                "5\r\n"
            ],
            [
                "2\r\n2\r\n1 2\r\n2\r\n2 1\r\n",
                "1\r\n1\r\n"
            ],
            [
                "1\r\n5\r\n5 2 3 4 1\r\n",
                "3\r\n"
            ],
            [
                "1\r\n3\r\n7 3 1\r\n",
                "4\r\n"
            ],
            [
                "1\r\n3\r\n999 3 1\r\n",
                "996\r\n"
            ]
        ]
    }
]