[
    {
        "name": "Willem, Chtholly and Seniorious",
        "description": "\u2014 Willem... \u2014 What's the matter? \u2014 It seems that there's something wrong with\nSeniorious... \u2014 I'll have a look... Seniorious is made by linking special\ntalismans in particular order. After over 500 years, the carillon is now in\nbad condition, so Willem decides to examine it thoroughly. Seniorious has n\npieces of talisman. Willem puts them in a line, the i-th of which is an\ninteger ai. In order to maintain it, Willem needs to perform m operations.\nThere are four types of operations: 1 l r x: For each i such that l \u2264 i \u2264 r,\nassign ai + x to ai. 2 l r x: For each i such that l \u2264 i \u2264 r, assign x to ai.\n3 l r x: Print the x-th smallest number in the index range [l, r], i.e. the\nelement at the x-th position if all the elements ai such that l \u2264 i \u2264 r are\ntaken and sorted into an array of non-decreasing integers. It's guaranteed\nthat 1 \u2264 x \u2264 r - l + 1. 4 l r x y: Print the sum of the x-th power of ai such\nthat l \u2264 i \u2264 r, modulo y, i.e. . Input The only line contains four integers n,\nm, seed, vmax (1 \u2264 n, m \u2264 10^5, 0 \u2264 seed < 10^9 + 7, 1 \u2264 vmax \u2264 10^9). The\ninitial values and operations are generated using following pseudo code: def\nrnd(): ret = seed seed = (seed * 7 + 13) mod 1000000007 return ret for i = 1\nto n: a[i] = (rnd() mod vmax) + 1 for i = 1 to m: op = (rnd() mod 4) + 1 l =\n(rnd() mod n) + 1 r = (rnd() mod n) + 1 if (l > r): swap(l, r) if (op == 3): x\n= (rnd() mod (r - l + 1)) + 1 else: x = (rnd() mod vmax) + 1 if (op == 4): y =\n(rnd() mod vmax) + 1 Here op is the type of the operation mentioned in the\nlegend. Output For each operation of types 3 or 4, output a line containing\nthe answer. Examples Input 10 10 7 9 Output 2 1 0 3 Input 10 10 9 9 Output 1 1\n3 3 Note In the first example, the initial array is 8, 9, 7, 2, 3, 1, 5, 6,\n4, 8. The operations are: 2 6 7 9 1 3 10 8 4 4 6 2 4 1 4 5 8 2 1 7 1 4 7 9 4\n4 1 2 7 9 4 5 8 1 1 2 5 7 5 4 3 10 8 5\n\n",
        "cf_contest_id": 896,
        "cf_index": "C",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "probabilities"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10 10 7 9\r\n",
                "2\r\n1\r\n0\r\n3\r\n"
            ],
            [
                "10 10 9 9\r\n",
                "1\r\n1\r\n3\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1 0 1\r\n",
                ""
            ]
        ]
    }
]