[
    {
        "name": "Divide and Multiply",
        "description": "William has array of \n    n\n numbers \n    a_1, a_2, \n    \u2026, a_n\n. He can\nperform the following sequence of operations any number of times: Pick any two\nitems from array \n    a_i\n and \n    a_j\n, where \n    a_i\n must be a multiple\nof \n    2\n \n    a_i = \n    a_i/2\n \n    a_j = a_j \n    \u00b7 2\n Help William\nfind the maximal sum of array elements, which he can get by performing the\nsequence of operations described above. Input Each test contains multiple test\ncases. The first line contains the number of test cases \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 10^4\n). Description of the test cases follows. The first line of each\ntest case contains an integer \n    n\n \n    (1 \n    \u2264 n \n    \u2264 15)\n, the number\nof elements in William's array. The second line contains \n    n\n integers\n\n    a_1, a_2, \n    \u2026, a_n\n \n    (1 \n    \u2264 a_i < 16)\n, the contents of\nWilliam's array. Output For each test case output the maximal sum of array\nelements after performing an optimal sequence of operations. Example Input 5 3\n6 4 2 5 1 2 3 4 5 1 10 3 2 3 4 15 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 Output 50 46\n10 26 35184372088846 Note In the first example test case the optimal sequence\nwould be: Pick \n    i = 2\n and \n    j = 1\n. After performing a sequence of\noperations \n    a_2 = \n    4/2 = 2\n and \n    a_1 = 6 \n    \u00b7 2 = 12\n,\nmaking the array look as: [12, 2, 2]. Pick \n    i = 2\n and \n    j = 1\n. After\nperforming a sequence of operations \n    a_2 = \n    2/2 = 1\n and \n    a_1 =\n    12 \n    \u00b7 2 = 24\n, making the array look as: [24, 1, 2]. Pick \n    i = 3\n\nand \n    j = 1\n. After performing a sequence of operations \n    a_3 =\n    \n    2/2 = 1\n and \n    a_1 = 24 \n    \u00b7 2 = 48\n, making the array look\nas: [48, 1, 1]. The final answer \n    48 + 1 + 1 = 50\n. In the third example\ntest case there is no way to change the sum of elements, so the answer is\n\n    10\n.\n\n",
        "cf_contest_id": 1609,
        "cf_index": "A",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3\r\n6 4 2\r\n5\r\n1 2 3 4 5\r\n1\r\n10\r\n3\r\n2 3 4\r\n15\r\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\r\n",
                "50\r\n46\r\n10\r\n26\r\n35184372088846\r\n"
            ]
        ],
        "private_cases": []
    }
]