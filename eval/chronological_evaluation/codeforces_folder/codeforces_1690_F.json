[
    {
        "name": "Shifting String",
        "description": "Polycarp found the string \n    s\n and the permutation \n    p\n. Their lengths\nturned out to be the same and equal to \n    n\n. A permutation of \n    n\n\nelements \u2014 is an array of length \n    n\n, in which every integer from \n    1\n\nto \n    n\n occurs exactly once. For example, \n    [1, 2, 3]\n and \n    [4, 3, 5,\n    1, 2]\n are permutations, but \n    [1, 2, 4]\n, \n    [4, 3, 2, 1, 2]\n and\n\n    [0, 1, 2]\n are not. In one operation he can multiply \n    s\n by \n    p\n,\nso he replaces \n    s\n with string \n    new\n, in which for any \n    i\n from\n\n    1\n to \n    n\n it is true that \n    new_i = s_p_i\n. For example, with\n\n    s=wmbe\n and \n    p = [3, 1, 4, 2]\n, after operation the string will turn\nto \n    s=s_3 s_1 s_4 s_2=bwem\n. Polycarp wondered after how many operations\nthe string would become equal to its initial value for the first time. Since\nit may take too long, he asks for your help in this matter. It can be proved\nthat the required number of operations always exists. It can be very large, so\nuse a 64-bit integer type. Input The first line of input contains one integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 5000\n) \u2014 the number of test cases in input. The\nfirst line of each case contains single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    200\n) \u2014 the length of string and permutation. The second line of each case\ncontains a string \n    s\n of length \n    n\n, containing lowercase Latin\nletters. The third line of each case contains \n    n\n integers \u2014 permutation\n\n    p\n (\n    1 \n    \u2264 p_i \n    \u2264 n\n), all \n    p_i\n are different. Output\nOutput \n    t\n lines, each of which contains the answer to the corresponding\ntest case of input. As an answer output single integer \u2014 the minimum number of\noperations, after which the string \n    s\n will become the same as it was\nbefore operations. Example Input 3 5 ababa 3 4 5 2 1 5 ababa 2 1 4 5 3 10\ncodeforces 8 6 1 7 5 2 9 3 10 4 Output 1 6 12 Note In the first sample\noperation doesn't change the string, so it will become the same as it was\nafter \n    1\n operations. In the second sample the string will change as\nfollows: \n    s\n = babaa \n    s\n = abaab \n    s\n = baaba \n    s\n = abbaa\n\n    s\n = baaab \n    s\n = ababa\n\n",
        "cf_contest_id": 1690,
        "cf_index": "F",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "graphs",
            "math",
            "number theory",
            "strings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n5\r\nababa\r\n3 4 5 2 1\r\n5\r\nababa\r\n2 1 4 5 3\r\n10\r\ncodeforces\r\n8 6 1 7 5 2 9 3 10 4\r\n",
                "1\r\n6\r\n12\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n78\r\naaabbbcccdddeeefffggghhhiiijjjkkklllmmmnnnooopppqqqrrrssstttuuuvvvwwwxxxyyyzzz\r\n2 3 1 5 6 4 8 9 7 11 12 10 14 15 13 17 18 16 20 21 19 23 24 22 26 27 25 29 30 28 32 33 31 35 36 34 38 39 37 41 42 40 44 45 43 47 48 46 50 51 49 53 54 52 56 57 55 59 60 58 62 63 61 65 66 64 68 69 67 71 72 70 74 75 73 77 78 76\r\n",
                "1\r\n"
            ],
            [
                "1\r\n12\r\nzsmlzcqpszjy\r\n2 3 4 5 6 7 8 9 10 11 12 1\r\n",
                "12\r\n"
            ],
            [
                "1\r\n26\r\nofnbnccxwsnaxyjwnmefjhkwmi\r\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 1\r\n",
                "26\r\n"
            ]
        ]
    }
]