[
    {
        "name": "Too Easy Problems",
        "description": "You are preparing for an exam on scheduling theory. The exam will last for\nexactly T milliseconds and will consist of n problems. You can either solve\nproblem i in exactly ti milliseconds or ignore it and spend no time. You don't\nneed time to rest after solving a problem, either. Unfortunately, your teacher\nconsiders some of the problems too easy for you. Thus, he assigned an integer\nai to every problem i meaning that the problem i can bring you a point to the\nfinal score only in case you have solved no more than ai problems overall\n(including problem i). Formally, suppose you solve problems p1, p2, ..., pk\nduring the exam. Then, your final score s will be equal to the number of\nvalues of j between 1 and k such that k \u2264 apj. You have guessed that the real\nfirst problem of the exam is already in front of you. Therefore, you want to\nchoose a set of problems to solve during the exam maximizing your final score\nin advance. Don't forget that the exam is limited in time, and you must have\nenough time to solve all chosen problems. If there exist different sets of\nproblems leading to the maximum final score, any of them will do. Input The\nfirst line contains two integers n and T (1 \u2264 n \u2264 2\u00b710^5; 1 \u2264 T \u2264 10^9) \u2014 the\nnumber of problems in the exam and the length of the exam in milliseconds,\nrespectively. Each of the next n lines contains two integers ai and ti (1 \u2264 ai\n\u2264 n; 1 \u2264 ti \u2264 10^4). The problems are numbered from 1 to n. Output In the\nfirst line, output a single integer s \u2014 your maximum possible final score. In\nthe second line, output a single integer k (0 \u2264 k \u2264 n) \u2014 the number of\nproblems you should solve. In the third line, output k distinct integers p1,\np2, ..., pk (1 \u2264 pi \u2264 n) \u2014 the indexes of problems you should solve, in any\norder. If there are several optimal sets of problems, you may output any of\nthem. Examples Input 5 300 3 100 4 150 4 80 2 90 2 300 Output 2 3 3 1 4 Input\n2 100 1 787 2 788 Output 0 0 Input 2 100 2 42 2 58 Output 2 2 1 2 Note In the\nfirst example, you should solve problems 3, 1, and 4. In this case you'll\nspend 80 + 100 + 90 = 270 milliseconds, falling within the length of the exam,\n300 milliseconds (and even leaving yourself 30 milliseconds to have a rest).\nProblems 3 and 1 will bring you a point each, while problem 4 won't. You'll\nscore two points. In the second example, the length of the exam is\ncatastrophically not enough to solve even a single problem. In the third\nexample, you have just enough time to solve both problems in 42 + 58 = 100\nmilliseconds and hand your solutions to the teacher with a smile.\n\n",
        "cf_contest_id": 913,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "data structures",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 300\r\n3 100\r\n4 150\r\n4 80\r\n2 90\r\n2 300\r\n",
                "2\r\n2\r\n3 4 "
            ],
            [
                "2 100\r\n1 787\r\n2 788\r\n",
                "0\r\n0\r\n"
            ],
            [
                "2 100\r\n2 42\r\n2 58\r\n",
                "2\r\n2\r\n1 2 "
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1 1\r\n",
                "1\r\n1\r\n1 "
            ],
            [
                "10 481\r\n4 25\r\n3 85\r\n6 96\r\n6 13\r\n1 9\r\n4 27\r\n2 7\r\n3 42\r\n9 66\r\n9 70\r\n",
                "4\r\n4\r\n4 1 6 9 "
            ],
            [
                "1 1000000000\r\n1 10000\r\n",
                "1\r\n1\r\n1 "
            ],
            [
                "1 1\r\n1 10000\r\n",
                "0\r\n0\r\n"
            ],
            [
                "5 66\r\n2 64\r\n4 91\r\n5 91\r\n1 79\r\n3 85\r\n",
                "1\r\n1\r\n1 "
            ],
            [
                "1 1000000000\r\n1 1\r\n",
                "1\r\n1\r\n1 "
            ],
            [
                "5 100\r\n1 10\r\n1 10\r\n1 10\r\n1 10\r\n1 10\r\n",
                "1\r\n1\r\n1 "
            ]
        ]
    }
]