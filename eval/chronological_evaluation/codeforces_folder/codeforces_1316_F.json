[
    {
        "name": "Battalion Strength",
        "description": "There are \n    n\n officers in the Army of Byteland. Each officer has some\npower associated with him. The power of the \n    i\n-th officer is denoted by\n\n    p_i\n. As the war is fast approaching, the General would like to know\nthe strength of the army. The strength of an army is calculated in a strange\nway in Byteland. The General selects a random subset of officers from these\n\n    n\n officers and calls this subset a battalion.(All \n    2^n\n subsets of\nthe \n    n\n officers can be chosen equally likely, including empty subset and\nthe subset of all officers). The strength of a battalion is calculated in the\nfollowing way: Let the powers of the chosen officers be\n\n    a_1,a_2,\n    \u2026,a_k\n, where \n    a_1 \n    \u2264 a_2 \n    \u2264\n    \u2026\n    \u2264\n    a_k\n. The strength of this battalion is equal to \n    a_1a_2 + a_2a_3 +\n    \n    \u2026 + a_k-1a_k\n. (If the size of Battalion is \n    \u2264 1\n, then the\nstrength of this battalion is \n    0\n). The strength of the army is equal to\nthe expected value of the strength of the battalion. As the war is really\nlong, the powers of officers may change. Precisely, there will be \n    q\n\nchanges. Each one of the form \n    i\n \n    x\n indicating that \n    p_i\n is\nchanged to \n    x\n. You need to find the strength of the army initially and\nafter each of these \n    q\n updates. Note that the changes are permanent. The\nstrength should be found by modulo \n    10^9+7\n. Formally, let\n\n    M=10^9+7\n. It can be shown that the answer can be expressed as an\nirreducible fraction \n    p/q\n, where \n    p\n and \n    q\n are integers and\n\n    q\n    \u2261 0 \n     M\n). Output the integer equal to \n    p\n    \u00b7\n    q^-1\n     M\n. In other words, output such an integer \n    x\n that \n    0\n    \n    \u2264 x < M\n and \n    x \u22c5 q \n    \u2261 p \n     M\n). Input The first line of\nthe input contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 3\u22c510^5\n)\n\u2014 the number of officers in Byteland's Army. The second line contains \n    n\n\nintegers \n    p_1,p_2,\n    \u2026,p_n\n (\n    1 \n    \u2264 p_i\n    \u2264\n    10^9\n). The third line contains a single integer \n    q\n (\n    1 \n    \u2264 q\n    \n    \u2264 3\u22c510^5\n) \u2014 the number of updates. Each of the next \n    q\n lines\ncontains two integers \n    i\n and \n    x\n (\n    1 \n    \u2264 i \n    \u2264 n\n, \n    1\n    \n    \u2264 x \n    \u2264 10^9\n), indicating that \n    p_i\n is updated to \n    x\n\n. Output In the first line output the initial strength of the army. In\n\n    i\n-th of the next \n    q\n lines, output the strength of the army after\n\n    i\n-th update. Examples Input 2 1 2 2 1 2 2 1 Output 500000004 1 500000004\nInput 4 1 2 3 4 4 1 5 2 5 3 5 4 5 Output 625000011 13 62500020 375000027\n62500027 Note In first testcase, initially, there are four possible battalions\n Strength = \n    0\n \n    1\n Strength = \n    0\n \n    2\n Strength =\n\n    0\n \n    1,2\n Strength = \n    2\n So strength of army is\n\n    0+0+0+2/4\n = \n    1/2\nAfter changing \n    p_1\n to\n\n    2\n, strength of battallion \n    1,2\n changes to \n    4\n, so strength of\narmy becomes \n    1\n. After changing \n    p_2\n to \n    1\n, strength of\nbattalion \n    1,2\n again becomes \n    2\n, so strength of army becomes\n\n    1/2\n.\n\n",
        "cf_contest_id": 1316,
        "cf_index": "F",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "divide and conquer",
            "probabilities"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n1 2\r\n2\r\n1 2\r\n2 1\r\n",
                "500000004\r\n1\r\n500000004\r\n"
            ],
            [
                "4\r\n1 2 3 4\r\n4\r\n1 5\r\n2 5\r\n3 5\r\n4 5\r\n",
                "625000011\r\n13\r\n62500020\r\n375000027\r\n62500027\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n3\r\n1 1000000000\r\n1 123456\r\n1 5\r\n",
                "0\r\n0\r\n0\r\n0\r\n"
            ]
        ]
    }
]