[
    {
        "name": "Road Construction",
        "description": "A country has n cities. Initially, there is no road in the country. One day,\nthe king decides to construct some roads connecting pairs of cities. Roads can\nbe traversed either way. He wants those roads to be constructed in such a way\nthat it is possible to go from each city to any other city by traversing at\nmost two roads. You are also given m pairs of cities \u2014 roads cannot be\nconstructed between these pairs of cities. Your task is to construct the\nminimum number of roads that still satisfy the above conditions. The\nconstraints will guarantee that this is always possible. Input The first line\nconsists of two integers n and m . Then m lines follow, each consisting of two\nintegers ai and bi (1 \u2264 ai, bi \u2264 n, ai \u2260 bi), which means that it is not\npossible to construct a road connecting cities ai and bi. Consider the cities\nare numbered from 1 to n. It is guaranteed that every pair of cities will\nappear at most once in the input. Output You should print an integer s: the\nminimum number of roads that should be constructed, in the first line. Then s\nlines should follow, each consisting of two integers ai and bi (1 \u2264 ai, bi \u2264\nn, ai \u2260 bi), which means that a road should be constructed between cities ai\nand bi. If there are several solutions, you may print any of them. Examples\nInput 4 1 1 3 Output 3 1 2 4 2 2 3 Note This is one possible solution of the\nexample: These are examples of wrong solutions: The above solution is wrong\nbecause it doesn't use the minimum number of edges (4 vs 3). In addition, it\nalso tries to construct a road between cities 1 and 3, while the input\nspecifies that it is not allowed to construct a road between the pair. The\nabove solution is wrong because you need to traverse at least 3 roads to go\nfrom city 1 to city 3, whereas in your country it must be possible to go from\nany city to another by traversing at most 2 roads. Finally, the above solution\nis wrong because it must be possible to go from any city to another, whereas\nit is not possible in this country to go from city 1 to 3, 2 to 3, and 4 to 3.\n\n",
        "cf_contest_id": 330,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graphs"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 1\r\n1 3\r\n",
                "3\r\n2 1\r\n2 3\r\n2 4\r\n"
            ]
        ],
        "private_cases": [
            [
                "34 7\r\n10 28\r\n10 19\r\n10 13\r\n24 10\r\n10 29\r\n20 10\r\n10 26\r\n",
                "33\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n1 9\r\n1 10\r\n1 11\r\n1 12\r\n1 13\r\n1 14\r\n1 15\r\n1 16\r\n1 17\r\n1 18\r\n1 19\r\n1 20\r\n1 21\r\n1 22\r\n1 23\r\n1 24\r\n1 25\r\n1 26\r\n1 27\r\n1 28\r\n1 29\r\n1 30\r\n1 31\r\n1 32\r\n1 33\r\n1 34\r\n"
            ],
            [
                "84 3\r\n39 19\r\n55 73\r\n42 43\r\n",
                "83\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n1 9\r\n1 10\r\n1 11\r\n1 12\r\n1 13\r\n1 14\r\n1 15\r\n1 16\r\n1 17\r\n1 18\r\n1 19\r\n1 20\r\n1 21\r\n1 22\r\n1 23\r\n1 24\r\n1 25\r\n1 26\r\n1 27\r\n1 28\r\n1 29\r\n1 30\r\n1 31\r\n1 32\r\n1 33\r\n1 34\r\n1 35\r\n1 36\r\n1 37\r\n1 38\r\n1 39\r\n1 40\r\n1 41\r\n1 42\r\n1 43\r\n1 44\r\n1 45\r\n1 46\r\n1 47\r\n1 48\r\n1 49\r\n1 50\r\n1 51\r\n1 52\r\n1 53\r\n1 54\r\n1 55\r\n1 56\r\n1 57\r\n1 58\r\n1 59\r\n1 60\r\n1 61\r\n1 62\r\n1 63\r\n1 64\r\n1 65\r\n1 66\r\n1 67\r\n1 68\r\n1 69\r\n1 70\r\n1 71\r\n1 72\r\n1 73\r\n1 74\r\n1 75\r\n1 76\r\n1 77\r\n1 78\r\n1 79\r\n1 80\r\n1 81\r\n1 82\r\n1 83\r\n1 84\r\n"
            ],
            [
                "84 0\r\n",
                "83\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n1 9\r\n1 10\r\n1 11\r\n1 12\r\n1 13\r\n1 14\r\n1 15\r\n1 16\r\n1 17\r\n1 18\r\n1 19\r\n1 20\r\n1 21\r\n1 22\r\n1 23\r\n1 24\r\n1 25\r\n1 26\r\n1 27\r\n1 28\r\n1 29\r\n1 30\r\n1 31\r\n1 32\r\n1 33\r\n1 34\r\n1 35\r\n1 36\r\n1 37\r\n1 38\r\n1 39\r\n1 40\r\n1 41\r\n1 42\r\n1 43\r\n1 44\r\n1 45\r\n1 46\r\n1 47\r\n1 48\r\n1 49\r\n1 50\r\n1 51\r\n1 52\r\n1 53\r\n1 54\r\n1 55\r\n1 56\r\n1 57\r\n1 58\r\n1 59\r\n1 60\r\n1 61\r\n1 62\r\n1 63\r\n1 64\r\n1 65\r\n1 66\r\n1 67\r\n1 68\r\n1 69\r\n1 70\r\n1 71\r\n1 72\r\n1 73\r\n1 74\r\n1 75\r\n1 76\r\n1 77\r\n1 78\r\n1 79\r\n1 80\r\n1 81\r\n1 82\r\n1 83\r\n1 84\r\n"
            ],
            [
                "34 7\r\n11 32\r\n33 29\r\n17 16\r\n15 5\r\n13 25\r\n8 19\r\n20 4\r\n",
                "33\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n1 9\r\n1 10\r\n1 11\r\n1 12\r\n1 13\r\n1 14\r\n1 15\r\n1 16\r\n1 17\r\n1 18\r\n1 19\r\n1 20\r\n1 21\r\n1 22\r\n1 23\r\n1 24\r\n1 25\r\n1 26\r\n1 27\r\n1 28\r\n1 29\r\n1 30\r\n1 31\r\n1 32\r\n1 33\r\n1 34\r\n"
            ],
            [
                "43 21\r\n38 19\r\n43 8\r\n40 31\r\n3 14\r\n24 21\r\n12 17\r\n1 9\r\n5 27\r\n25 37\r\n11 6\r\n13 26\r\n16 22\r\n10 32\r\n36 7\r\n30 29\r\n42 35\r\n20 33\r\n4 23\r\n18 15\r\n41 34\r\n2 28\r\n",
                "42\r\n39 1\r\n39 2\r\n39 3\r\n39 4\r\n39 5\r\n39 6\r\n39 7\r\n39 8\r\n39 9\r\n39 10\r\n39 11\r\n39 12\r\n39 13\r\n39 14\r\n39 15\r\n39 16\r\n39 17\r\n39 18\r\n39 19\r\n39 20\r\n39 21\r\n39 22\r\n39 23\r\n39 24\r\n39 25\r\n39 26\r\n39 27\r\n39 28\r\n39 29\r\n39 30\r\n39 31\r\n39 32\r\n39 33\r\n39 34\r\n39 35\r\n39 36\r\n39 37\r\n39 38\r\n39 40\r\n39 41\r\n39 42\r\n39 43\r\n"
            ],
            [
                "34 7\r\n22 4\r\n5 25\r\n15 7\r\n5 9\r\n27 7\r\n34 21\r\n3 13\r\n",
                "33\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n1 9\r\n1 10\r\n1 11\r\n1 12\r\n1 13\r\n1 14\r\n1 15\r\n1 16\r\n1 17\r\n1 18\r\n1 19\r\n1 20\r\n1 21\r\n1 22\r\n1 23\r\n1 24\r\n1 25\r\n1 26\r\n1 27\r\n1 28\r\n1 29\r\n1 30\r\n1 31\r\n1 32\r\n1 33\r\n1 34\r\n"
            ],
            [
                "50 7\r\n19 37\r\n30 32\r\n43 20\r\n48 14\r\n30 29\r\n18 36\r\n9 46\r\n",
                "49\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n1 9\r\n1 10\r\n1 11\r\n1 12\r\n1 13\r\n1 14\r\n1 15\r\n1 16\r\n1 17\r\n1 18\r\n1 19\r\n1 20\r\n1 21\r\n1 22\r\n1 23\r\n1 24\r\n1 25\r\n1 26\r\n1 27\r\n1 28\r\n1 29\r\n1 30\r\n1 31\r\n1 32\r\n1 33\r\n1 34\r\n1 35\r\n1 36\r\n1 37\r\n1 38\r\n1 39\r\n1 40\r\n1 41\r\n1 42\r\n1 43\r\n1 44\r\n1 45\r\n1 46\r\n1 47\r\n1 48\r\n1 49\r\n1 50\r\n"
            ],
            [
                "41 12\r\n41 12\r\n29 13\r\n3 37\r\n2 20\r\n4 24\r\n27 6\r\n39 20\r\n28 41\r\n30 1\r\n35 9\r\n5 39\r\n12 31\r\n",
                "40\r\n7 1\r\n7 2\r\n7 3\r\n7 4\r\n7 5\r\n7 6\r\n7 8\r\n7 9\r\n7 10\r\n7 11\r\n7 12\r\n7 13\r\n7 14\r\n7 15\r\n7 16\r\n7 17\r\n7 18\r\n7 19\r\n7 20\r\n7 21\r\n7 22\r\n7 23\r\n7 24\r\n7 25\r\n7 26\r\n7 27\r\n7 28\r\n7 29\r\n7 30\r\n7 31\r\n7 32\r\n7 33\r\n7 34\r\n7 35\r\n7 36\r\n7 37\r\n7 38\r\n7 39\r\n7 40\r\n7 41\r\n"
            ],
            [
                "26 2\r\n22 1\r\n14 10\r\n",
                "25\r\n2 1\r\n2 3\r\n2 4\r\n2 5\r\n2 6\r\n2 7\r\n2 8\r\n2 9\r\n2 10\r\n2 11\r\n2 12\r\n2 13\r\n2 14\r\n2 15\r\n2 16\r\n2 17\r\n2 18\r\n2 19\r\n2 20\r\n2 21\r\n2 22\r\n2 23\r\n2 24\r\n2 25\r\n2 26\r\n"
            ],
            [
                "7 3\r\n4 7\r\n4 6\r\n6 5\r\n",
                "6\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n"
            ],
            [
                "50 24\r\n18 36\r\n11 18\r\n22 18\r\n18 47\r\n18 10\r\n45 18\r\n18 29\r\n13 18\r\n8 18\r\n18 30\r\n26 18\r\n18 6\r\n5 18\r\n18 7\r\n46 18\r\n50 18\r\n18 3\r\n18 32\r\n4 18\r\n18 24\r\n18 19\r\n23 18\r\n35 18\r\n31 18\r\n",
                "49\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n1 9\r\n1 10\r\n1 11\r\n1 12\r\n1 13\r\n1 14\r\n1 15\r\n1 16\r\n1 17\r\n1 18\r\n1 19\r\n1 20\r\n1 21\r\n1 22\r\n1 23\r\n1 24\r\n1 25\r\n1 26\r\n1 27\r\n1 28\r\n1 29\r\n1 30\r\n1 31\r\n1 32\r\n1 33\r\n1 34\r\n1 35\r\n1 36\r\n1 37\r\n1 38\r\n1 39\r\n1 40\r\n1 41\r\n1 42\r\n1 43\r\n1 44\r\n1 45\r\n1 46\r\n1 47\r\n1 48\r\n1 49\r\n1 50\r\n"
            ],
            [
                "7 3\r\n3 4\r\n7 3\r\n3 2\r\n",
                "6\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n"
            ],
            [
                "1 0\r\n",
                "0\r\n"
            ],
            [
                "2 0\r\n",
                "1\r\n1 2\r\n"
            ],
            [
                "4 1\r\n1 2\r\n",
                "3\r\n3 1\r\n3 2\r\n3 4\r\n"
            ],
            [
                "3 1\r\n1 2\r\n",
                "2\r\n3 1\r\n3 2\r\n"
            ],
            [
                "5 1\r\n1 5\r\n",
                "4\r\n2 1\r\n2 3\r\n2 4\r\n2 5\r\n"
            ]
        ]
    }
]