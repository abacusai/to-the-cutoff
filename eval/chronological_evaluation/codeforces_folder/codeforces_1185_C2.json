[
    {
        "name": "Exam in BerSU (hard version)",
        "description": "The only difference between easy and hard versions is constraints. If you\nwrite a solution in Python, then prefer to send it in PyPy to speed up\nexecution time. A session has begun at Beland State University. Many students\nare taking exams. Polygraph Poligrafovich is going to examine a group of\n\n    n\n students. Students will take the exam one-by-one in order from\n\n    1\n-th to \n    n\n-th. Rules of the exam are following: The \n    i\n-th\nstudent randomly chooses a ticket. if this ticket is too hard to the student,\nhe doesn't answer and goes home immediately (this process is so fast that it's\nconsidered no time elapses). This student fails the exam. if the student finds\nthe ticket easy, he spends exactly \n    t_i\n minutes to pass the exam. After\nit, he immediately gets a mark and goes home. Students take the exam in the\nfixed order, one-by-one, without any interruption. At any moment of time,\nPolygraph Poligrafovich takes the answer from one student. The duration of the\nwhole exam for all students is \n    M\n minutes (\n    max t_i \n    \u2264 M\n), so\nstudents at the end of the list have a greater possibility to run out of time\nto pass the exam. For each student \n    i\n, you should count the minimum\npossible number of students who need to fail the exam so the \n    i\n-th\nstudent has enough time to pass the exam. For each student \n    i\n, find the\nanswer independently. That is, if when finding the answer for the student\n\n    i_1\n some student \n    j\n should leave, then while finding the answer for\n\n    i_2\n (\n    i_2>i_1\n) the student \n    j\n student does not have to go\nhome. Input The first line of the input contains two integers \n    n\n and\n\n    M\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n, \n    1 \n    \u2264 M \n    \u2264 2 \n    \u00b7\n    10^7\n) \u2014 the number of students and the total duration of the exam in\nminutes, respectively. The second line of the input contains \n    n\n integers\n\n    t_i\n (\n    1 \n    \u2264 t_i \n    \u2264 100\n) \u2014 time in minutes that \n    i\n-th\nstudent spends to answer to a ticket. It's guaranteed that all values of\n\n    t_i\n are not greater than \n    M\n. Output Print \n    n\n numbers: the\n\n    i\n-th number must be equal to the minimum number of students who have to\nleave the exam in order to \n    i\n-th student has enough time to pass the\nexam. Examples Input 7 15 1 2 3 4 5 6 7 Output 0 0 0 0 0 2 3 Input 5 100 80 40\n40 40 60 Output 0 1 1 2 3 Note The explanation for the example 1. Please note\nthat the sum of the first five exam times does not exceed \n    M=15\n (the sum\nis \n    1+2+3+4+5=15\n). Thus, the first five students can pass the exam even\nif all the students before them also pass the exam. In other words, the first\nfive numbers in the answer are \n    0\n. In order for the \n    6\n-th student to\npass the exam, it is necessary that at least \n    2\n students must fail it\nbefore (for example, the \n    3\n-rd and \n    4\n-th, then the \n    6\n-th will\nfinish its exam in \n    1+2+5+6=14\n minutes, which does not exceed \n    M\n).\nIn order for the \n    7\n-th student to pass the exam, it is necessary that at\nleast \n    3\n students must fail it before (for example, the \n    2\n-nd,\n\n    5\n-th and \n    6\n-th, then the \n    7\n-th will finish its exam in\n\n    1+3+4+7=15\n minutes, which does not exceed \n    M\n).\n\n",
        "cf_contest_id": 1185,
        "cf_index": "C2",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 15\r\n1 2 3 4 5 6 7\r\n",
                "0 0 0 0 0 2 3 "
            ],
            [
                "5 100\r\n80 40 40 40 60\r\n",
                "0 1 1 2 3 "
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1\r\n",
                "0 "
            ],
            [
                "1 20000000\r\n100\r\n",
                "0 "
            ],
            [
                "1 100\r\n100\r\n",
                "0 "
            ],
            [
                "2 100\r\n100 100\r\n",
                "0 1 "
            ],
            [
                "2 100\r\n1 100\r\n",
                "0 1 "
            ],
            [
                "2 100\r\n1 99\r\n",
                "0 0 "
            ],
            [
                "3 299\r\n100 100 100\r\n",
                "0 0 1 "
            ],
            [
                "10 50\r\n9 9 9 9 9 9 9 9 9 9\r\n",
                "0 0 0 0 0 1 2 3 4 5 "
            ],
            [
                "10 50\r\n10 10 10 10 10 10 10 10 10 10\r\n",
                "0 0 0 0 0 1 2 3 4 5 "
            ],
            [
                "8 2\r\n1 1 1 1 1 1 1 1\r\n",
                "0 0 1 2 3 4 5 6 "
            ]
        ]
    }
]