[
    {
        "name": "Deja Vu",
        "description": "Everybody knows that we have been living in the Matrix for a long time. And in\nthe new seventh Matrix the world is ruled by beavers. So let's take beaver\nNeo. Neo has so-called \"deja vu\" outbursts when he gets visions of events in\nsome places he's been at or is going to be at. Let's examine the phenomenon in\nmore detail. We can say that Neo's city is represented by a directed graph,\nconsisting of n shops and m streets that connect the shops. No two streets\nconnect the same pair of shops (besides, there can't be one street from A to B\nand one street from B to A). No street connects a shop with itself. As Neo\npasses some streets, he gets visions. No matter how many times he passes\nstreet k, every time he will get the same visions in the same order. A vision\nis a sequence of shops. We know that Neo is going to get really shocked if he\npasses the way from some shop a to some shop b, possible coinciding with a,\nsuch that the list of visited shops in the real life and in the visions\ncoincide. Suggest beaver Neo such path of non-zero length. Or maybe you can\neven count the number of such paths modulo 1000000007 (10^9 + 7)?.. Input The\nfirst line contains integers n and m \u2014 the number of shops and the number of\nstreets, correspondingly, 1 \u2264 n \u2264 50, . Next m lines contain the descriptions\nof the streets in the following format: xi yi ki v1 v2 ... vk, where xi and yi\n(1 \u2264 xi, yi \u2264 n, xi \u2260 yi) are indices of shops connected by a street, ki (0 \u2264\nki \u2264 n) is the number of visions on the way from xi to yi; v1, v2, ..., vk (1\n\u2264 vi \u2264 n) describe the visions: the numbers of the shops Neo saw. Note that\nthe order of the visions matters. It is guaranteed that the total number of\nvisions on all streets doesn't exceed 10^5. to get 50 points, you need to find\nany (not necessarily simple) path of length at most 2\u00b7n, that meets the\nattributes described above (subproblem E1); to get 50 more points, you need to\ncount for each length from 1 to 2\u00b7n the number of paths that have the\nattribute described above (subproblem E2). Output Subproblem E1. In the first\nline print an integer k (1 \u2264 k \u2264 2\u00b7n) \u2014 the numbers of shops on Neo's path. In\nthe next line print k integers \u2014 the number of shops in the order Neo passes\nthem. If the graph doesn't have such paths or the length of the shortest path\nincludes more than 2\u00b7n shops, print on a single line 0. Subproblem E2. Print\n2\u00b7n lines. The i-th line must contain a single integer \u2014 the number of\nrequired paths of length i modulo 1000000007 (10^9 + 7). Examples Input 6 6 1\n2 2 1 2 2 3 1 3 3 4 2 4 5 4 5 0 5 3 1 3 6 1 1 6 Output 4 6 1 2 3 Input 6 6 1 2\n2 1 2 2 3 1 3 3 4 2 4 5 4 5 0 5 3 1 3 6 1 1 6 Output 1 2 1 1 2 1 1 2 1 1 2 1\nNote The input in both samples are the same. The first sample contains the\nanswer to the first subproblem, the second sample contains the answer to the\nsecond subproblem.\n\n",
        "cf_contest_id": 331,
        "cf_index": "E1",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graphs",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 6\r\n1 2 2 1 2\r\n2 3 1 3\r\n3 4 2 4 5\r\n4 5 0\r\n5 3 1 3\r\n6 1 1 6\r\n",
                "2\r\n1 2 "
            ],
            [
                "6 6\r\n1 2 2 1 2\r\n2 3 1 3\r\n3 4 2 4 5\r\n4 5 0\r\n5 3 1 3\r\n6 1 1 6\r\n",
                "2\r\n1 2 "
            ]
        ],
        "private_cases": [
            [
                "8 8\r\n1 2 0\r\n4 3 1 3\r\n7 8 3 3 7 8\r\n3 7 0\r\n2 3 2 2 1\r\n5 2 2 1 2\r\n6 5 3 1 2 3\r\n1 5 3 5 1 6\r\n",
                "3\r\n3 7 8 "
            ],
            [
                "3 3\r\n1 2 1 1\r\n2 3 1 2\r\n3 1 1 3\r\n",
                "0\r\n"
            ],
            [
                "50 17\r\n1 2 5 3 4 1 2 5\r\n1 3 0\r\n1 6 2 6 7\r\n2 5 1 1\r\n3 4 0\r\n4 1 1 1\r\n5 1 0\r\n6 10 1 10\r\n10 1 1 1\r\n6 5 2 5 1\r\n6 7 0\r\n7 8 2 8 6\r\n8 6 0\r\n1 9 2 9 11\r\n9 11 0\r\n11 1 0\r\n7 1 0\r\n",
                "7\r\n1 3 4 1 2 5 1 "
            ],
            [
                "11 17\r\n1 2 5 3 4 1 2 5\r\n1 3 0\r\n1 6 2 6 7\r\n2 5 1 1\r\n3 4 0\r\n4 1 1 1\r\n5 1 0\r\n6 10 1 10\r\n10 1 1 1\r\n6 5 2 5 1\r\n6 7 0\r\n7 8 2 8 6\r\n8 6 0\r\n1 9 2 9 11\r\n9 11 0\r\n11 1 0\r\n7 1 0\r\n",
                "7\r\n1 3 4 1 2 5 1 "
            ],
            [
                "5 4\r\n1 2 3 3 1 2\r\n5 4 0\r\n4 3 0\r\n3 1 2 5 4\r\n",
                "5\r\n5 4 3 1 2 "
            ],
            [
                "2 1\r\n1 2 2 2 1\r\n",
                "0\r\n"
            ],
            [
                "1 0\r\n",
                "0\r\n"
            ],
            [
                "2 1\r\n1 2 2 1 2\r\n",
                "2\r\n1 2 "
            ],
            [
                "3 3\r\n1 2 2 3 2\r\n1 3 2 3 3\r\n2 3 2 2 3\r\n",
                "2\r\n2 3 "
            ],
            [
                "4 6\r\n1 2 0\r\n1 3 2 2 3\r\n1 4 2 1 1\r\n2 3 0\r\n2 4 2 1 1\r\n3 4 2 1 1\r\n",
                "0\r\n"
            ],
            [
                "5 10\r\n1 2 0\r\n1 3 2 1 3\r\n1 4 2 1 4\r\n1 5 2 5 2\r\n2 3 2 2 3\r\n2 4 0\r\n2 5 2 2 5\r\n3 4 2 3 4\r\n3 5 0\r\n4 5 0\r\n",
                "2\r\n1 3 "
            ],
            [
                "10 45\r\n1 2 2 1 2\r\n1 3 2 1 3\r\n1 4 2 7 10\r\n1 5 0\r\n1 6 2 1 6\r\n1 7 2 1 7\r\n1 8 0\r\n1 9 2 5 9\r\n1 10 0\r\n2 3 2 4 3\r\n2 4 2 2 4\r\n2 5 2 3 10\r\n2 6 2 2 6\r\n2 7 2 2 7\r\n2 8 0\r\n2 9 2 2 9\r\n2 10 2 10 6\r\n3 4 0\r\n3 5 0\r\n3 6 2 3 6\r\n3 7 0\r\n3 8 0\r\n3 9 2 7 1\r\n3 10 2 1 6\r\n4 5 0\r\n4 6 2 4 6\r\n4 7 2 2 4\r\n4 8 0\r\n4 9 2 7 5\r\n4 10 2 4 10\r\n5 6 2 8 4\r\n5 7 2 6 5\r\n5 8 0\r\n5 9 0\r\n5 10 0\r\n6 7 2 6 7\r\n6 8 2 6 8\r\n6 9 2 10 8\r\n6 10 0\r\n7 8 2 1 4\r\n7 9 0\r\n7 10 2 10 10\r\n8 9 2 2 8\r\n8 10 2 8 10\r\n9 10 2 10 10\r\n",
                "2\r\n1 2 "
            ],
            [
                "10 6\r\n1 2 0\r\n2 3 0\r\n3 4 7 1 2 3 4 5 2 7\r\n4 5 0\r\n5 2 0\r\n2 7 1 7\r\n",
                "0\r\n"
            ],
            [
                "10 6\r\n1 2 0\r\n2 3 0\r\n3 4 7 1 2 3 4 5 2 7\r\n4 5 0\r\n5 2 0\r\n2 7 0\r\n",
                "7\r\n1 2 3 4 5 2 7 "
            ],
            [
                "1 0\r\n",
                "0\r\n"
            ],
            [
                "2 1\r\n1 2 0\r\n",
                "0\r\n"
            ],
            [
                "2 1\r\n1 2 2 1 2\r\n",
                "2\r\n1 2 "
            ]
        ]
    }
]