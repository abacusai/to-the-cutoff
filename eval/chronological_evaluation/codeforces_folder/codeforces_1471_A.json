[
    {
        "name": "Strange Partition",
        "description": "You are given an array \n    a\n of length \n    n\n, and an integer \n    x\n. You\ncan perform the following operation as many times as you would like (possibly\nzero): replace two adjacent elements of the array by their sum. For example,\nif the initial array was \n    [3, 6, 9]\n, in a single operation one can\nreplace the last two elements by their sum, yielding an array \n    [3, 15]\n,\nor replace the first two elements to get an array \n    [9, 9]\n. Note that the\nsize of the array decreases after each operation. The beauty of an array\n\n    b=[b_1, \n    \u2026, b_k]\n is defined as \n    \u2211_i=1^k \n    \n    \u2308\n    b_i/x\n    \n    \u2309\n, which means that we divide each element\nby \n    x\n, round it up to the nearest integer, and sum up the resulting\nvalues. For example, if \n    x = 3\n, and the array is \n    [4, 11, 6]\n, the\nbeauty of the array is equal to \n    \u2308\n    4/3\n    \n    \u2309 + \n    \n    \u2308\n    11/3\n    \n    \u2309 +\n    \n    \n    \u2308\n    6/3\n    \n    \u2309 = 2 + 4 + 2 = 8\n. Please\ndetermine the minimum and the maximum beauty you can get by performing some\noperations on the original array. Input The first input line contains a single\ninteger \n    t\n \u2014 the number of test cases (\n    1 \n    \u2264 t \n    \u2264 1000\n). The\nfirst line of each test case contains two integers \n    n\n and \n    x\n (\n    1\n    \n    \u2264 n \n    \u2264 10^5\n, \n    1 \n    \u2264 x \n    \u2264 10^9\n). The next line contains\n\n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264\n    10^9\n), the elements of the array \n    a\n. It is guaranteed that the sum of\nvalues of \n    n\n over all test cases does not exceed \n    10^5\n. Output For\neach test case output two integers \u2014 the minimal and the maximal possible\nbeauty. Example Input 2 3 3 3 6 9 3 3 6 4 11 Output 6 6 7 8 Note In the first\ntest case the beauty of the array does not change if we perform any\noperations. In the second example we can leave the array unchanged to attain\nthe maximum beauty, and to get the minimum beauty one can replace two elements\n\n    4\n and \n    11\n with their sum, yielding an array \n    [6, 15]\n, which\nhas its beauty equal to \n    7\n.\n\n",
        "cf_contest_id": 1471,
        "cf_index": "A",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n3 3\r\n3 6 9\r\n3 3\r\n6 4 11\r\n",
                "6 6\r\n7 8\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n10 1\r\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\r\n",
                "10000000000 10000000000\r\n"
            ],
            [
                "1\r\n20 2\r\n536870912 536870912 536870912 536870912 536870912 536870912 536870912 536870912 536870912 536870912 536870912 536870912 536870912 536870912 536870912 536870912 536870912 536870912 536870912 536870912\r\n",
                "5368709120 5368709120\r\n"
            ],
            [
                "1\r\n6 1\r\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\r\n",
                "6000000000 6000000000\r\n"
            ],
            [
                "1\r\n4 2\r\n2 10234 6548 2345\r\n",
                "9565 9565\r\n"
            ],
            [
                "1\r\n1 1\r\n1\r\n",
                "1 1\r\n"
            ],
            [
                "1\r\n8 1\r\n100000000 100000000 100000000 100000000 100000000 100000000 100000000 100000000\r\n",
                "800000000 800000000\r\n"
            ],
            [
                "1\r\n4 2\r\n2 10235 6548 2345\r\n",
                "9565 9566\r\n"
            ],
            [
                "1\r\n20 1\r\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\r\n",
                "20000000000 20000000000\r\n"
            ],
            [
                "1\r\n1 1234\r\n1\r\n",
                "1 1\r\n"
            ],
            [
                "1\r\n2 3\r\n1000000000 100000000\r\n",
                "366666667 366666668\r\n"
            ]
        ]
    }
]