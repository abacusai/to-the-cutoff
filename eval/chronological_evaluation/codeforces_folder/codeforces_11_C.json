[
    {
        "name": "How Many Squares?",
        "description": "You are given a 0-1 rectangular matrix. What is the number of squares in it? A\nsquare is a solid square frame (border) with linewidth equal to 1. A square\nshould be at least 2 \u00d7 2. We are only interested in two types of squares:\nsquares with each side parallel to a side of the matrix; squares with each\nside parallel to a diagonal of the matrix. For example the following matrix\ncontains only one square of the first type: 0000000 0111100 0100100 0100100\n0111100 The following matrix contains only one square of the second type:\n0000000 0010000 0101000 0010000 0000000 Regardless of type, a square must\ncontain at least one 1 and can't touch (by side or corner) any foreign 1. Of\ncourse, the lengths of the sides of each square should be equal. How many\nsquares are in the given matrix? Input The first line contains integer t (1 \u2264\nt \u2264 10000), where t is the number of test cases in the input. Then test cases\nfollow. Each case starts with a line containing integers n and m (2 \u2264 n, m \u2264\n250), where n is the number of rows and m is the number of columns. The\nfollowing n lines contain m characters each (0 or 1). The total number of\ncharacters in all test cases doesn't exceed 10^6 for any input file. Output\nYou should output exactly t lines, with the answer to the i-th test case on\nthe i-th line. Examples Input 2 8 8 00010001 00101000 01000100 10000010\n01000100 00101000 11010011 11000011 10 10 1111111000 1000001000 1011001000\n1011001010 1000001101 1001001010 1010101000 1001001000 1000001000 1111111000\nOutput 1 2 Input 1 12 11 11111111111 10000000001 10111111101 10100000101\n10101100101 10101100101 10100000101 10100000101 10111111101 10000000001\n11111111111 00000000000 Output 3\n\n",
        "cf_contest_id": 11,
        "cf_index": "C",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 64.0,
        "public_cases": [
            [
                "2\r\n8 8\r\n00010001\r\n00101000\r\n01000100\r\n10000010\r\n01000100\r\n00101000\r\n11010011\r\n11000011\r\n10 10\r\n1111111000\r\n1000001000\r\n1011001000\r\n1011001010\r\n1000001101\r\n1001001010\r\n1010101000\r\n1001001000\r\n1000001000\r\n1111111000\r\n",
                "1\r\n2\r\n"
            ],
            [
                "1\r\n12 11\r\n11111111111\r\n10000000001\r\n10111111101\r\n10100000101\r\n10101100101\r\n10101100101\r\n10100000101\r\n10100000101\r\n10111111101\r\n10000000001\r\n11111111111\r\n00000000000\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": []
    }
]