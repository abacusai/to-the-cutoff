[
    {
        "name": "Partial Sums",
        "description": "You've got an array a, consisting of n integers. The array elements are\nindexed from 1 to n. Let's determine a two step operation like that: First we\nbuild by the array a an array s of partial sums, consisting of n elements.\nElement number i (1 \u2264 i \u2264 n) of array s equals . The operation x mod y means\nthat we take the remainder of the division of number x by number y. Then we\nwrite the contents of the array s to the array a. Element number i (1 \u2264 i \u2264 n)\nof the array s becomes the i-th element of the array a (ai = si). You task is\nto find array a after exactly k described operations are applied. Input The\nfirst line contains two space-separated integers n and k (1 \u2264 n \u2264 2000, 0 \u2264 k\n\u2264 10^9). The next line contains n space-separated integers a1, a2, ..., an \u2014\nelements of the array a (0 \u2264 ai \u2264 10^9). Output Print n integers \u2014 elements of\nthe array a after the operations are applied to it. Print the elements in the\norder of increasing of their indexes in the array a. Separate the printed\nnumbers by spaces. Examples Input 3 1 1 2 3 Output 1 3 6 Input 5 0 3 14 15 92\n6 Output 3 14 15 92 6\n\n",
        "cf_contest_id": 223,
        "cf_index": "C",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 1\r\n1 2 3\r\n",
                "1 3 6\r\n"
            ],
            [
                "5 0\r\n3 14 15 92 6\r\n",
                "3 14 15 92 6\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n3\r\n",
                "3\r\n"
            ],
            [
                "1 0\r\n0\r\n",
                "0\r\n"
            ],
            [
                "1 0\r\n123\r\n",
                "123\r\n"
            ],
            [
                "1 1\r\n0\r\n",
                "0\r\n"
            ],
            [
                "4 1\r\n3 20 3 4\r\n",
                "3 23 26 30\r\n"
            ],
            [
                "5 20\r\n11 5 6 8 11\r\n",
                "11 225 2416 18118 106536\r\n"
            ],
            [
                "17 239\r\n663 360 509 307 311 501 523 370 302 601 541 42 328 200 196 110 573\r\n",
                "663 158817 19101389 537972231 259388293 744981080 6646898 234671418 400532510 776716020 52125061 263719534 192023697 446278138 592149678 33061993 189288187\r\n"
            ],
            [
                "13 666\r\n84 89 29 103 128 233 190 122 117 208 119 97 200\r\n",
                "84 56033 18716627 174151412 225555860 164145872 451267967 434721493 224270207 253181081 361500071 991507723 152400567\r\n"
            ],
            [
                "42 42\r\n42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42\r\n",
                "42 1806 39732 595980 6853770 64425438 515403504 607824507 548903146 777117811 441012592 397606113 289227498 685193257 740773014 214937435 654148201 446749626 489165413 202057369 926377846 779133524 993842970 721730118 484757814 939150939 225471671 20649822 51624555 850529088 441269800 845570818 580382507 773596603 435098280 957216216 73968454 779554271 588535300 530034849 736571438 149644609\r\n"
            ],
            [
                "10 1000000\r\n1 2 3 4 84 5 6 7 8 9\r\n",
                "1 1000002 2496503 504322849 591771075 387496712 683276420 249833545 23968189 474356595\r\n"
            ]
        ]
    }
]