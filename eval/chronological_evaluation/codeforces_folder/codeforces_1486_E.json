[
    {
        "name": "Paired Payment",
        "description": "There are \n    n\n cities and \n    m\n bidirectional roads in the country. The\nroads in the country form an undirected weighted graph. The graph is not\nguaranteed to be connected. Each road has it's own parameter \n    w\n. You can\ntravel through the roads, but the government made a new law: you can only go\nthrough two roads at a time (go from city \n    a\n to city \n    b\n and then\nfrom city \n    b\n to city \n    c\n) and you will have to pay \n    (w_ab +\n    w_bc)^2\n money to go through those roads. Find out whether it is possible\nto travel from city \n    1\n to every other city \n    t\n and what's the minimum\namount of money you need to get from \n    1\n to \n    t\n. Input First line\ncontains two integers \n    n\n, \n    m\n (\n    2 \n    \u2264 n \n    \u2264 10^5\n, \n    1\n    \n    \u2264 m \n    \u2264 min(\n    n \n    \u00b7 (n - 1)/2, 2 \n    \u00b7 10^5)\n). Next\n\n    m\n lines each contain three integers \n    v_i\n, \n    u_i\n, \n    w_i\n\n(\n    1 \n    \u2264 v_i, u_i \n    \u2264 n\n, \n    1 \n    \u2264 w_i \n    \u2264 50\n, \n    u_i \n    \u2260\n    v_i\n). It's guaranteed that there are no multiple edges, i.e. for any edge\n\n    (u_i, v_i)\n there are no other edges \n    (u_i, v_i)\n or \n    (v_i,\n    u_i)\n. Output For every city \n    t\n print one integer. If there is no\ncorrect path between \n    1\n and \n    t\n output \n    -1\n. Otherwise print out\nthe minimum amount of money needed to travel from \n    1\n to \n    t\n. Examples\nInput 5 6 1 2 3 2 3 4 3 4 5 4 5 6 1 5 1 2 4 2 Output 0 98 49 25 114 Input 3 2\n1 2 1 2 3 2 Output 0 -1 9 Note The graph in the first example looks like this.\nIn the second example the path from \n    1\n to \n    3\n goes through \n    2\n,\nso the resulting payment is \n    (1 + 2)^2 = 9\n.\n\n",
        "cf_contest_id": 1486,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "constructive algorithms",
            "dp",
            "flows",
            "graphs",
            "shortest paths"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5 6\r\n1 2 3\r\n2 3 4\r\n3 4 5\r\n4 5 6\r\n1 5 1\r\n2 4 2\r\n",
                "0 98 49 25 114\r\n"
            ],
            [
                "3 2\r\n1 2 1\r\n2 3 2\r\n",
                "0 -1 9\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1\r\n2 1 48\r\n",
                "0 -1\r\n"
            ],
            [
                "10 20\r\n10 1 15\r\n7 1 32\r\n5 3 36\r\n3 9 14\r\n3 4 19\r\n6 8 4\r\n9 6 18\r\n7 3 38\r\n10 7 12\r\n7 5 29\r\n7 6 14\r\n6 2 40\r\n8 9 19\r\n7 8 11\r\n7 4 19\r\n2 1 38\r\n10 9 3\r\n6 5 50\r\n10 3 41\r\n1 8 3\r\n",
                "0 2201 779 1138 1898 49 196 520 324 490\r\n"
            ]
        ]
    }
]