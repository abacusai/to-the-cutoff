[
    {
        "name": "Save the Magazines",
        "description": "Monocarp has been collecting rare magazines for quite a while, and now he has\ndecided to sell them. He distributed the magazines between \n    n\n boxes,\narranged in a row. The \n    i\n-th box contains \n    a_i\n magazines. Some of\nthe boxes are covered with lids, others are not. Suddenly it started to rain,\nand now Monocarp has to save as many magazines from the rain as possible. To\ndo this, he can move the lids between boxes as follows: if the \n    i\n-th box\nwas covered with a lid initially, he can either move the lid from the\n\n    i\n-th box to the box \n    (i-1)\n (if it exists), or keep the lid on the\n\n    i\n-th box. You may assume that Monocarp can move the lids instantly at\nthe same moment, and no lid can be moved more than once. If a box will be\ncovered with a lid after Monocarp moves the lids, the magazines in it will be\nsafe from the rain; otherwise they will soak. You have to calculate the\nmaximum number of magazines Monocarp can save from the rain. Input The first\nline contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the\nnumber of the testcases. The first line of each testcase contains a single\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of boxes.\nThe second line contains a string of \n    n\n characters 0 and/or 1. If the\n\n    i\n-th character is 1, the \n    i\n-th box is initially covered with a lid.\nIf the \n    i\n-th character is 0, the \n    i\n-th box is initially not covered.\nThe third line contains a sequence of integers \n    a_1, a_2, \n    \u2026, a_n\n\n(\n    1 \n    \u2264 a_i \n    \u2264 10^4\n), where \n    a_i\n is the number of magazines in\nthe \n    i\n-th box. The sum of \n    n\n over all testcases doesn't exceed \n    2\n    \n    \u00b7 10^5\n. Output For each testcase, print one integer \u2014 the maximum\nnumber of magazines Monocarp can save from the rain. Example Input 4 5 01110\n10 5 8 9 6 6 011011 20 10 9 30 20 19 4 0000 100 100 100 100 4 0111 5 4 5 1\nOutput 27 80 0 14 Note In the first testcase of the example, Monocarp can move\nthe lid from the second box to the first box, so the boxes \n    1\n, \n    3\n\nand \n    4\n are covered, and \n    10 + 8 + 9 = 27\n magazines are saved. In the\nsecond testcase, Monocarp can move the lid from the second box to the first\nbox, then from the third box to the second box, then from the fifth box to the\nfourth box, and then from the sixth box to the fifth box. The boxes \n    1\n,\n\n    2\n, \n    4\n and \n    5\n will be covered, so \n    20 + 10 + 30 + 20 = 80\n\nmagazines can be saved. There are no lids in the third testcase, so it's\nimpossible to save even a single magazine.\n\n",
        "cf_contest_id": 1743,
        "cf_index": "C",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dp",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n5\r\n01110\r\n10 5 8 9 6\r\n6\r\n011011\r\n20 10 9 30 20 19\r\n4\r\n0000\r\n100 100 100 100\r\n4\r\n0111\r\n5 4 5 1\r\n",
                "27\r\n80\r\n0\r\n14\r\n"
            ]
        ],
        "private_cases": [
            [
                "7\r\n3\r\n101\r\n1 1 1\r\n3\r\n101\r\n1 1 1\r\n3\r\n101\r\n1 1 1\r\n3\r\n101\r\n1 1 1\r\n3\r\n101\r\n1 1 1\r\n3\r\n101\r\n1 1 1\r\n3\r\n101\r\n1 1 1\r\n",
                "2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n"
            ],
            [
                "7\r\n6\r\n011011\r\n20 10 9 30 20 19\r\n6\r\n011011\r\n20 10 9 30 20 19\r\n6\r\n011011\r\n20 10 9 30 20 19\r\n6\r\n011011\r\n20 10 9 30 20 19\r\n6\r\n011011\r\n20 10 9 30 20 19\r\n6\r\n011011\r\n20 10 9 30 20 19\r\n6\r\n011011\r\n20 10 9 30 20 19\r\n",
                "80\r\n80\r\n80\r\n80\r\n80\r\n80\r\n80\r\n"
            ],
            [
                "7\r\n5\r\n01110\r\n10 5 8 9 6\r\n6\r\n011011\r\n20 10 9 30 20 19\r\n4\r\n0000\r\n100 100 100 100\r\n4\r\n0111\r\n5 4 5 1\r\n6\r\n011011\r\n20 10 9 30 20 19\r\n4\r\n0000\r\n100 100 100 100\r\n4\r\n0111\r\n5 4 5 1\r\n",
                "27\r\n80\r\n0\r\n14\r\n80\r\n0\r\n14\r\n"
            ],
            [
                "7\r\n5\r\n01110\r\n10 5 8 9 6\r\n5\r\n01110\r\n10 5 8 9 6\r\n5\r\n01110\r\n10 5 8 9 6\r\n5\r\n01110\r\n10 5 8 9 6\r\n5\r\n01110\r\n10 5 8 9 6\r\n5\r\n01110\r\n10 5 8 9 6\r\n5\r\n01110\r\n10 5 8 9 6\r\n",
                "27\r\n27\r\n27\r\n27\r\n27\r\n27\r\n27\r\n"
            ],
            [
                "7\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "9\r\n5\r\n01110\r\n10 5 8 9 6\r\n6\r\n011011\r\n20 10 9 30 20 19\r\n4\r\n0000\r\n100 100 100 100\r\n4\r\n0111\r\n5 4 5 1\r\n5\r\n01110\r\n10 5 8 9 6\r\n6\r\n011011\r\n20 10 9 30 20 19\r\n4\r\n0000\r\n100 100 100 100\r\n4\r\n0111\r\n5 4 5 1\r\n4\r\n0111\r\n5 4 5 1\r\n",
                "27\r\n80\r\n0\r\n14\r\n27\r\n80\r\n0\r\n14\r\n14\r\n"
            ],
            [
                "8\r\n5\r\n01110\r\n10 5 8 9 6\r\n6\r\n011011\r\n20 10 9 30 20 19\r\n4\r\n0000\r\n100 100 100 100\r\n4\r\n0111\r\n5 4 5 1\r\n5\r\n01110\r\n10 5 8 9 6\r\n6\r\n011011\r\n20 10 9 30 20 19\r\n4\r\n0000\r\n100 100 100 100\r\n4\r\n0111\r\n5 4 5 1\r\n",
                "27\r\n80\r\n0\r\n14\r\n27\r\n80\r\n0\r\n14\r\n"
            ],
            [
                "8\r\n1\r\n0\r\n1\r\n1\r\n0\r\n2\r\n1\r\n0\r\n3\r\n1\r\n0\r\n4\r\n1\r\n0\r\n5\r\n1\r\n0\r\n6\r\n1\r\n0\r\n7\r\n1\r\n0\r\n8\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ]
        ]
    }
]