[
    {
        "name": "GCD Guess",
        "description": "This is an interactive problem. There is a positive integer \n    1 \n    \u2264 x \n    \u2264\n    10^9\n that you have to guess. In one query you can choose two positive\nintegers \n    a \n    \u2260 b\n. As an answer to this query you will get \n    (x\n    + a, x + b)\n, where \n    (n, m)\n is the greatest common divisor of the\nnumbers \n    n\n and \n    m\n. To guess one hidden number \n    x\n you are\nallowed to make no more than \n    30\n queries. Input The first line of input\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) denoting the\nnumber of test cases. The integer \n    x\n that you have to guess satisfies the\nconstraints: (\n    1 \n    \u2264 x \n    \u2264 10^9\n). Interaction The hidden number\n\n    x\n is fixed before the start of the interaction and does not depend on\nyour queries. To guess each \n    x\n you can make no more than \n    30\n queries\nin the following way: \"? a b\" (\n    1 \n    \u2264 a, b \n    \u2264 2 \n    \u00b7 10^9\n, \n    a\n    \n    \u2260 b\n). For this query you will get \n    (x + a, x + b)\n. When you\nknow \n    x\n, print a single line in the following format. \"! x\" (\n    1 \n    \u2264 x\n    \n    \u2264 10^9\n). After that continue to solve the next test case. If you ask\nmore than \n    30\n queries for one \n    x\n or make an invalid query, the\ninteractor will terminate immediately and your program will receive verdict\nWrong Answer. After printing each query do not forget to output end of line\nand flush the output buffer. Otherwise, you will get the Idleness limit\nexceeded verdict. To do flush use: fflush(stdout) or cout.flush() in C++;\nSystem.out.flush() in Java; flush(output) in Pascal; stdout.flush() in Python;\nRead documentation for other languages. Hacks To use hacks, use the following\nformat of tests: The first line should contain a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of test cases. The first and only line of\neach test case should contain a single integer \n    x\n (\n    1 \n    \u2264 x \n    \u2264\n    10^9\n) denoting the integer \n    x\n that should be guessed. Example Input 2\n1 8 1 Output ? 1 2 ? 12 4 ! 4 ? 2000000000 1999999999 ! 1000000000 Note The\nfirst hidden number is \n    4\n, that's why the answers for the queries are: \"?\n1 2\" \u2014 \n    (4 + 1, 4 + 2) = \n    (5, 6) = 1\n. \"? 12 4\" \u2014 \n    (4 +\n    12, 4 + 4) = \n    (16, 8) = 8\n. The second hidden number is \n    10^9\n,\nthat's why the answer for the query is: \"? 2000000000 1999999999\" \u2014\n\n    (3 \n    \u00b7 10^9, 3 \n    \u00b7 10^9 - 1) = 1\n. These queries are made\nonly for understanding the interaction and are not enough for finding the true\n\n    x\n.\n\n",
        "cf_contest_id": 1665,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "chinese remainder theorem",
            "constructive algorithms",
            "games",
            "interactive",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n4\r\n1000000000\r\n",
                "30 30 \r\n"
            ]
        ],
        "private_cases": []
    }
]