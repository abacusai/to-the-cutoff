[
    {
        "name": "DIY Wooden Ladder",
        "description": "Let's denote a \n    k\n-step ladder as the following structure: exactly \n    k +\n    2\n wooden planks, of which two planks of length at least \n    k+1\n \u2014 the\nbase of the ladder; \n    k\n planks of length at least \n    1\n \u2014 the steps of\nthe ladder; Note that neither the base planks, nor the steps planks are\nrequired to be equal. For example, ladders \n    1\n and \n    3\n are correct\n\n    2\n-step ladders and ladder \n    2\n is a correct \n    1\n-step ladder. On\nthe first picture the lengths of planks are \n    [3, 3]\n for the base and\n\n    [1]\n for the step. On the second picture lengths are \n    [3, 3]\n for the\nbase and \n    [2]\n for the step. On the third picture lengths are \n    [3, 4]\n\nfor the base and \n    [2, 3]\n for the steps. You have \n    n\n planks. The\nlength of the \n    i\n-th planks is \n    a_i\n. You don't have a saw, so you\ncan't cut the planks you have. Though you have a hammer and nails, so you can\nassemble the improvised \"ladder\" from the planks. The question is: what is the\nmaximum number \n    k\n such that you can choose some subset of the given\nplanks and assemble a \n    k\n-step ladder using them? Input The first line\ncontains a single integer \n    T\n (\n    1 \n    \u2264 T \n    \u2264 100\n) \u2014 the number of\nqueries. The queries are independent. Each query consists of two lines. The\nfirst line contains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 10^5\n) \u2014\nthe number of planks you have. The second line contains \n    n\n integers\n\n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^5\n) \u2014 the lengths of\nthe corresponding planks. It's guaranteed that the total number of planks from\nall queries doesn't exceed \n    10^5\n. Output Print \n    T\n integers \u2014 one per\nquery. The \n    i\n-th integer is the maximum number \n    k\n, such that you can\nchoose some subset of the planks given in the \n    i\n-th query and assemble a\n\n    k\n-step ladder using them. Print \n    0\n if you can't make even\n\n    1\n-step ladder from the given set of planks. Example Input 4 4 1 3 1 3 3\n3 3 2 5 2 3 3 4 2 3 1 1 2 Output 2 1 2 0 Note Examples for the queries\n\n    1-3\n are shown at the image in the legend section. The Russian meme to\nexpress the quality of the ladders:\n\n",
        "cf_contest_id": 1197,
        "cf_index": "A",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4\r\n1 3 1 3\r\n3\r\n3 3 2\r\n5\r\n2 3 3 4 2\r\n3\r\n1 1 2\r\n",
                "2\r\n1\r\n2\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n9\r\n3 3 3 3 3 3 3 3 4\r\n",
                "2\r\n"
            ],
            [
                "2\r\n3\r\n1 2 3\r\n6\r\n1 1 3 2 10000 1000\r\n",
                "1\r\n4\r\n"
            ],
            [
                "1\r\n6\r\n100 50 50 50 50 50\r\n",
                "4\r\n"
            ],
            [
                "1\r\n6\r\n1 1 3 2 10000 1000\r\n",
                "4\r\n"
            ]
        ]
    }
]