[
    {
        "name": "Infected Tree",
        "description": "Byteland is a beautiful land known because of its beautiful trees. Misha has\nfound a binary tree with \n    n\n vertices, numbered from \n    1\n to \n    n\n. A\nbinary tree is an acyclic connected bidirectional graph containing \n    n\n\nvertices and \n    n - 1\n edges. Each vertex has a degree at most \n    3\n,\nwhereas the root is the vertex with the number \n    1\n and it has a degree at\nmost \n    2\n. Unfortunately, the root got infected. The following process\nhappens \n    n\n times: Misha either chooses a non-infected (and not deleted)\nvertex and deletes it with all edges which have an end in this vertex or just\ndoes nothing. Then, the infection spreads to each vertex that is connected by\nan edge to an already infected vertex (all already infected vertices remain\ninfected). As Misha does not have much time to think, please tell him what is\nthe maximum number of vertices he can save from the infection (note that\ndeleted vertices are not counted as saved). Input There are several test cases\nin the input data. The first line contains a single integer \n    t\n\n(\n    1\n    \u2264 t\n    \u2264 5000\n) \u2014 the number of test cases. This is followed by\nthe test cases description. The first line of each test case contains one\ninteger \n    n\n (\n    2\n    \u2264 n\n    \u2264 3\n    \u00b7 10^5\n) \u2014 the number of vertices\nof the tree. The \n    i\n-th of the following \n    n-1\n lines in the test case\ncontains two positive integers \n    u_i\n and \n    v_i\n (\n    1 \n    \u2264 u_i, v_i\n    \n    \u2264 n\n), meaning that there exists an edge between them in the graph. It\nis guaranteed that the graph is a binary tree rooted at \n    1\n. It is also\nguaranteed that the sum of \n    n\n over all test cases won't exceed\n\n    3\n    \u00b7 10^5\n. Output For each test case, output the maximum number of\nvertices Misha can save. Example Input 4 2 1 2 4 1 2 2 3 2 4 7 1 2 1 5 2 3 2 4\n5 6 5 7 15 1 2 2 3 3 4 4 5 4 6 3 7 2 8 1 9 9 10 9 11 10 12 10 13 11 14 11 15\nOutput 0 2 2 10 Note In the first test case, the only possible action is to\ndelete vertex \n    2\n, after which we save \n    0\n vertices in total. In the\nsecond test case, if we delete vertex \n    2\n, we can save vertices \n    3\n\nand \n    4\n.\n\n",
        "cf_contest_id": 1689,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dp",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2\r\n1 2\r\n4\r\n1 2\r\n2 3\r\n2 4\r\n7\r\n1 2\r\n1 5\r\n2 3\r\n2 4\r\n5 6\r\n5 7\r\n15\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n4 6\r\n3 7\r\n2 8\r\n1 9\r\n9 10\r\n9 11\r\n10 12\r\n10 13\r\n11 14\r\n11 15\r\n",
                "0\r\n2\r\n2\r\n10\r\n"
            ]
        ],
        "private_cases": []
    }
]