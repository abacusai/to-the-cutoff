[
    {
        "name": "Finding Team Member",
        "description": "There is a programing contest named SnakeUp, 2n people want to compete for it.\nIn order to attend this contest, people need to form teams of exactly two\npeople. You are given the strength of each possible combination of two people.\nAll the values of the strengths are distinct. Every contestant hopes that he\ncan find a teammate so that their team\u2019s strength is as high as possible. That\nis, a contestant will form a team with highest strength possible by choosing a\nteammate from ones who are willing to be a teammate with him/her. More\nformally, two people A and B may form a team if each of them is the best\npossible teammate (among the contestants that remain unpaired) for the other\none. Can you determine who will be each person\u2019s teammate? Input There are 2n\nlines in the input. The first line contains an integer n (1 \u2264 n \u2264 400) \u2014 the\nnumber of teams to be formed. The i-th line (i > 1) contains i - 1 numbers\nai1, ai2, ... , ai(i - 1). Here aij (1 \u2264 aij \u2264 10^6, all aij are distinct)\ndenotes the strength of a team consisting of person i and person j (people are\nnumbered starting from 1.) Output Output a line containing 2n numbers. The\ni-th number should represent the number of teammate of i-th person. Examples\nInput 2 6 1 2 3 4 5 Output 2 1 4 3 Input 3 487060 3831 161856 845957 794650\n976977 83847 50566 691206 498447 698377 156232 59015 382455 626960 Output 6 5\n4 3 2 1 Note In the first sample, contestant 1 and 2 will be teammates and so\ndo contestant 3 and 4, so the teammate of contestant 1, 2, 3, 4 will be 2, 1,\n4, 3 respectively.\n\n",
        "cf_contest_id": 579,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n6\r\n1 2\r\n3 4 5\r\n",
                "2 1 4 3\r\n"
            ],
            [
                "3\r\n487060\r\n3831 161856\r\n845957 794650 976977\r\n83847 50566 691206 498447\r\n698377 156232 59015 382455 626960\r\n",
                "6 5 4 3 2 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n8\r\n1 6\r\n14 13 15\r\n4 2 11 9\r\n12 5 3 7 10\r\n",
                "6 5 4 3 2 1\r\n"
            ],
            [
                "1\r\n1000000\r\n",
                "2 1\r\n"
            ],
            [
                "3\r\n1000000\r\n999999 999998\r\n999997 999996 999995\r\n999994 999993 999992 999991\r\n999990 999989 999988 999987 999986\r\n",
                "2 1 4 3 6 5\r\n"
            ]
        ]
    }
]