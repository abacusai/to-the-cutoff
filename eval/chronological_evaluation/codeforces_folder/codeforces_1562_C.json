[
    {
        "name": "Rings",
        "description": "Frodo was caught by Saruman. He tore a pouch from Frodo's neck, shook out its\ncontents \u2014there was a pile of different rings: gold and silver...\"How am I to\ntell which is the One?!\" the mage howled. \"Throw them one by one into the\nCracks of Doom and watch when Mordor falls!\" Somewhere in a parallel Middle-\nearth, when Saruman caught Frodo, he only found \n    n\n rings. And the\n\n    i\n-th ring was either gold or silver. For convenience Saruman wrote down\na binary string \n    s\n of \n    n\n characters, where the \n    i\n-th character\nwas 0 if the \n    i\n-th ring was gold, and 1 if it was silver. Saruman has a\nmagic function \n    f\n, which takes a binary string and returns a number\nobtained by converting the string into a binary number and then converting the\nbinary number into a decimal number. For example, \n    f(001010) = 10, f(111) =\n    7, f(11011101) = 221\n. Saruman, however, thinks that the order of the rings\nplays some important role. He wants to find \n    2\n pairs of integers \n    (l_1,\n    r_1), (l_2, r_2)\n, such that: \n    1 \n    \u2264 l_1 \n    \u2264 n\n, \n    1 \n    \u2264 r_1\n    \n    \u2264 n\n, \n    r_1-l_1+1\n    \u2265\n    \u230a\n    n/2\n    \u230b\n \n    1 \n    \u2264\n    l_2 \n    \u2264 n\n, \n    1 \n    \u2264 r_2 \n    \u2264 n\n, \n    r_2-l_2+1\n    \u2265\n    \u230a\n    n/2\n    \u230b\n Pairs \n    (l_1, r_1)\n and \n    (l_2, r_2)\n are\ndistinct. That is, at least one of \n    l_1 \n    \u2260 l_2\n and \n    r_1 \n    \u2260\n    r_2\n must hold. Let \n    t\n be the substring \n    s[l_1:r_1]\n of \n    s\n,\nand \n    w\n be the substring \n    s[l_2:r_2]\n of \n    s\n. Then there exists\nnon-negative integer \n    k\n, such that \n    f(t) = f(w) \n    \u00b7 k\n.Here\nsubstring \n    s[l:r]\n denotes \n    s_ls_l+1\n    \u2026 s_r-1s_r\n, and\n\n    \u230a x \n    \u230b\n denotes rounding the number down to the nearest\ninteger. Help Saruman solve this problem! It is guaranteed that under the\nconstraints of the problem at least one solution exists. Input Each test\ncontains multiple test cases. The first line contains one positive integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^3\n), denoting the number of test cases.\nDescription of the test cases follows. The first line of each test case\ncontains one positive integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^4\n) \u2014\nlength of the string. The second line of each test case contains a non-empty\nbinary string of length \n    n\n. It is guaranteed that the sum of \n    n\n over\nall test cases does not exceed \n    10^5\n. Output For every test case print\nfour integers \n    l_1\n, \n    r_1\n, \n    l_2\n, \n    r_2\n, which denote the\nbeginning of the first substring, the end of the first substring, the\nbeginning of the second substring, and the end of the second substring,\nrespectively. If there are multiple solutions, print any. Example Input 7 6\n101111 9 111000111 8 10000000 5 11011 6 001111 3 101 30\n100000000000000100000000000000 Output 3 6 1 3 1 9 4 9 5 8 1 4 1 5 3 5 1 6 2 4\n1 2 2 3 1 15 16 30 Note In the first testcase \n    f(t) = f(1111) = 15\n,\n\n    f(w) = f(101) = 5\n. In the second testcase \n    f(t) = f(111000111) =\n    455\n, \n    f(w) = f(000111) = 7\n. In the third testcase \n    f(t) = f(0000) =\n    0\n, \n    f(w) = f(1000) = 8\n. In the fourth testcase \n    f(t) = f(11011) =\n    27\n, \n    f(w) = f(011) = 3\n. In the fifth testcase \n    f(t) = f(001111) =\n    15\n, \n    f(w) = f(011) = 3\n.\n\n",
        "cf_contest_id": 1562,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n6\r\n101111\r\n9\r\n111000111\r\n8\r\n10000000\r\n5\r\n11011\r\n6\r\n001111\r\n3\r\n101\r\n30\r\n100000000000000100000000000000\r\n",
                "2 6 3 6\r\n4 9 5 9\r\n2 8 3 8\r\n1 3 1 2\r\n1 6 2 6\r\n1 2 1 1\r\n2 30 3 30\r\n"
            ]
        ],
        "private_cases": []
    }
]