[
    {
        "name": "Devu, the Singer and Churu, the Joker",
        "description": "Devu is a renowned classical singer. He is invited to many big\nfunctions/festivals. Recently he was invited to \"All World Classical Singing\nFestival\". Other than Devu, comedian Churu was also invited. Devu has provided\norganizers a list of the songs and required time for singing them. He will\nsing n songs, i^th song will take ti minutes exactly. The Comedian, Churu will\ncrack jokes. All his jokes are of 5 minutes exactly. People have mainly come\nto listen Devu. But you know that he needs rest of 10 minutes after each song.\nOn the other hand, Churu being a very active person, doesn't need any rest.\nYou as one of the organizers should make an optimal s\u0441hedule for the event.\nFor some reasons you must follow the conditions: The duration of the event\nmust be no more than d minutes; Devu must complete all his songs; With\nsatisfying the two previous conditions the number of jokes cracked by Churu\nshould be as many as possible. If it is not possible to find a way to conduct\nall the songs of the Devu, output -1. Otherwise find out maximum number of\njokes that Churu can crack in the grand event. Input The first line contains\ntwo space separated integers n, d (1 \u2264 n \u2264 100; 1 \u2264 d \u2264 10000). The second\nline contains n space-separated integers: t1, t2, ..., tn (1 \u2264 ti \u2264 100).\nOutput If there is no way to conduct all the songs of Devu, output -1.\nOtherwise output the maximum number of jokes that Churu can crack in the grand\nevent. Examples Input 3 30 2 2 1 Output 5 Input 3 20 2 1 1 Output -1 Note\nConsider the first example. The duration of the event is 30 minutes. There\ncould be maximum 5 jokes in the following way: First Churu cracks a joke in 5\nminutes. Then Devu performs the first song for 2 minutes. Then Churu cracks 2\njokes in 10 minutes. Now Devu performs second song for 2 minutes. Then Churu\ncracks 2 jokes in 10 minutes. Now finally Devu will perform his last song in 1\nminutes. Total time spent is 5 + 2 + 10 + 2 + 10 + 1 = 30 minutes. Consider\nthe second example. There is no way of organizing Devu's all songs. Hence the\nanswer is -1.\n\n",
        "cf_contest_id": 439,
        "cf_index": "A",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 30\r\n2 2 1\r\n",
                "5\r\n"
            ],
            [
                "3 20\r\n2 1 1\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "50 10000\r\n5 4 10 9 9 6 7 7 7 3 3 7 7 4 7 4 10 10 1 7 10 3 1 4 5 7 2 10 10 10 2 3 4 7 6 1 8 4 7 3 8 8 4 10 1 1 9 2 6 1\r\n",
                "1943\r\n"
            ],
            [
                "50 10000\r\n4 7 15 9 11 12 20 9 14 14 10 13 6 13 14 17 6 8 20 12 10 15 13 17 5 12 13 11 7 5 5 2 3 15 13 7 14 14 19 2 13 14 5 15 3 19 15 16 4 1\r\n",
                "1891\r\n"
            ],
            [
                "100 9000\r\n5 2 3 1 1 3 4 9 9 6 7 10 10 10 2 10 6 8 8 6 7 9 9 5 6 2 1 10 10 9 4 5 9 2 4 3 8 5 6 1 1 5 3 6 2 6 6 6 5 8 3 6 7 3 1 10 9 1 8 3 10 9 5 6 3 4 1 1 10 10 2 3 4 8 10 10 5 1 5 3 6 8 10 6 10 2 1 8 10 1 7 6 9 10 5 2 3 5 3 2\r\n",
                "1688\r\n"
            ],
            [
                "100 8007\r\n5 19 14 18 9 6 15 8 1 14 11 20 3 17 7 12 2 6 3 17 7 20 1 14 20 17 2 10 13 7 18 18 9 10 16 8 1 11 11 9 13 18 9 20 12 12 7 15 12 17 11 5 11 15 9 2 15 1 18 3 18 16 15 4 10 5 18 13 13 12 3 8 17 2 12 2 13 3 1 13 2 4 9 10 18 10 14 4 4 17 12 19 2 9 6 5 5 20 18 12\r\n",
                "1391\r\n"
            ],
            [
                "39 2412\r\n1 1 1 1 1 1 26 1 1 1 99 1 1 1 1 1 1 1 1 1 1 88 7 1 1 1 1 76 1 1 1 93 40 1 13 1 68 1 32\r\n",
                "368\r\n"
            ],
            [
                "39 2617\r\n47 1 1 1 63 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 70 1 99 63 1 1 1 1 1 1 1 1 64 1 1\r\n",
                "435\r\n"
            ],
            [
                "39 3681\r\n83 77 1 94 85 47 1 98 29 16 1 1 1 71 96 85 31 97 96 93 40 50 98 1 60 51 1 96 100 72 1 1 1 89 1 93 1 92 100\r\n",
                "326\r\n"
            ],
            [
                "45 894\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 28 28 1 1 1 1 1 1 1 1 1 1 1 1 1 1 99 3 1 1\r\n",
                "139\r\n"
            ],
            [
                "45 4534\r\n1 99 65 99 4 46 54 80 51 30 96 1 28 30 44 70 78 1 1 100 1 62 1 1 1 85 1 1 1 61 1 46 75 1 61 77 97 26 67 1 1 63 81 85 86\r\n",
                "514\r\n"
            ],
            [
                "72 3538\r\n52 1 8 1 1 1 7 1 1 1 1 48 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 40 1 1 38 1 1 1 1 1 1 1 1 1 1 1 35 1 93 79 1 1 1 1 1 1 1 1 1 51 1 1 1 1 1 1 1 1 1 1 1 1 96 1\r\n",
                "586\r\n"
            ],
            [
                "81 2200\r\n1 59 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 93 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 50 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "384\r\n"
            ],
            [
                "81 2577\r\n85 91 1 1 2 1 1 100 1 80 1 1 17 86 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 37 1 66 24 1 1 96 49 1 66 1 44 1 1 1 1 98 1 1 1 1 35 1 37 3 35 1 1 87 64 1 24 1 58 1 1 42 83 5 1 1 1 1 1 95 1 94 1 50 1 1\r\n",
                "174\r\n"
            ],
            [
                "81 4131\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "807\r\n"
            ],
            [
                "81 6315\r\n1 1 67 100 1 99 36 1 92 5 1 96 42 12 1 57 91 1 1 66 41 30 74 95 1 37 1 39 91 69 1 52 77 47 65 1 1 93 96 74 90 35 85 76 71 92 92 1 1 67 92 74 1 1 86 76 35 1 56 16 27 57 37 95 1 40 20 100 51 1 80 60 45 79 95 1 46 1 25 100 96\r\n",
                "490\r\n"
            ],
            [
                "96 1688\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 45 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 25 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 71 1 1 1 30 1 1 1\r\n",
                "284\r\n"
            ],
            [
                "96 8889\r\n1 1 18 1 1 1 1 1 1 1 1 1 99 1 1 1 1 88 1 45 1 1 1 1 1 1 1 1 1 1 1 1 1 1 96 1 1 1 1 21 1 1 1 1 1 1 1 73 1 1 1 1 1 10 1 1 1 1 1 1 1 46 43 1 1 1 1 1 98 1 1 1 1 1 1 6 1 1 1 1 1 74 1 25 1 55 1 1 1 13 1 1 54 1 1 1\r\n",
                "1589\r\n"
            ],
            [
                "10 100\r\n1 1 1 1 1 1 1 1 1 1\r\n",
                "18\r\n"
            ],
            [
                "100 10000\r\n54 46 72 94 79 83 91 54 73 3 24 55 54 31 28 20 19 6 25 19 47 23 1 70 15 87 51 39 54 77 55 5 60 3 15 99 56 88 22 78 79 21 38 27 28 86 7 88 12 59 55 70 25 1 70 49 1 45 69 72 50 17 4 56 8 100 90 34 35 20 61 76 88 79 4 74 65 68 75 26 40 72 59 94 10 67 96 85 29 90 47 24 44 1 66 93 55 36 1 99\r\n",
                "1017\r\n"
            ],
            [
                "100 6000\r\n41 31 23 17 24 78 26 96 93 48 46 2 49 33 35 9 73 100 34 48 83 36 33 69 43 24 3 74 8 81 27 33 94 38 77 9 76 90 62 90 21 67 22 22 12 2 17 27 61 18 72 85 59 65 71 38 90 75 74 66 60 47 58 50 90 95 75 10 5 100 97 29 83 88 65 26 93 90 22 98 36 55 70 38 50 92 88 72 99 96 25 14 74 16 25 92 67 94 77 96\r\n",
                "-1\r\n"
            ],
            [
                "1 1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "1 6\r\n1\r\n",
                "1\r\n"
            ],
            [
                "1 5\r\n1\r\n",
                "0\r\n"
            ],
            [
                "1 3\r\n4\r\n",
                "-1\r\n"
            ],
            [
                "3 24\r\n2 1 2\r\n",
                "-1\r\n"
            ]
        ]
    }
]