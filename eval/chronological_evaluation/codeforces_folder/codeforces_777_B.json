[
    {
        "name": "Game of Credit Cards",
        "description": "After the fourth season Sherlock and Moriary have realized the whole\nfoolishness of the battle between them and decided to continue their\ncompetitions in peaceful game of Credit Cards. Rules of this game are simple:\neach player bring his favourite n-digit credit card. Then both players name\nthe digits written on their cards one by one. If two digits are not equal,\nthen the player, whose digit is smaller gets a flick (knock in the forehead\nusually made with a forefinger) from the other player. For example, if n = 3,\nSherlock's card is 123 and Moriarty's card has number 321, first Sherlock\nnames 1 and Moriarty names 3 so Sherlock gets a flick. Then they both digit 2\nso no one gets a flick. Finally, Sherlock names 3, while Moriarty names 1 and\ngets a flick. Of course, Sherlock will play honestly naming digits one by one\nin the order they are given, while Moriary, as a true villain, plans to cheat.\nHe is going to name his digits in some other order (however, he is not going\nto change the overall number of occurences of each digit). For example, in\ncase above Moriarty could name 1, 2, 3 and get no flicks at all, or he can\nname 2, 3 and 1 to give Sherlock two flicks. Your goal is to find out the\nminimum possible number of flicks Moriarty will get (no one likes flicks) and\nthe maximum possible number of flicks Sherlock can get from Moriarty. Note,\nthat these two goals are different and the optimal result may be obtained by\nusing different strategies. Input The first line of the input contains a\nsingle integer n (1 \u2264 n \u2264 1000) \u2014 the number of digits in the cards Sherlock\nand Moriarty are going to use. The second line contains n digits \u2014 Sherlock's\ncredit card number. The third line contains n digits \u2014 Moriarty's credit card\nnumber. Output First print the minimum possible number of flicks Moriarty will\nget. Then print the maximum possible number of flicks that Sherlock can get\nfrom Moriarty. Examples Input 3 123 321 Output 0 2 Input 2 88 00 Output 2 0\nNote First sample is elaborated in the problem statement. In the second\nsample, there is no way Moriarty can avoid getting two flicks.\n\n",
        "cf_contest_id": 777,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n123\r\n321\r\n",
                "0\r\n2\r\n"
            ],
            [
                "2\r\n88\r\n00\r\n",
                "2\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n4\r\n5\r\n",
                "0\r\n1\r\n"
            ],
            [
                "1\r\n8\r\n7\r\n",
                "1\r\n0\r\n"
            ],
            [
                "2\r\n55\r\n55\r\n",
                "0\r\n0\r\n"
            ],
            [
                "3\r\n534\r\n432\r\n",
                "1\r\n1\r\n"
            ],
            [
                "3\r\n486\r\n024\r\n",
                "2\r\n0\r\n"
            ],
            [
                "5\r\n22222\r\n22222\r\n",
                "0\r\n0\r\n"
            ],
            [
                "5\r\n72471\r\n05604\r\n",
                "2\r\n3\r\n"
            ],
            [
                "5\r\n72471\r\n72471\r\n",
                "0\r\n3\r\n"
            ],
            [
                "5\r\n72471\r\n41772\r\n",
                "0\r\n3\r\n"
            ],
            [
                "8\r\n99999999\r\n99999999\r\n",
                "0\r\n0\r\n"
            ],
            [
                "8\r\n01234567\r\n01234567\r\n",
                "0\r\n7\r\n"
            ],
            [
                "8\r\n07070707\r\n76543210\r\n",
                "3\r\n4\r\n"
            ],
            [
                "8\r\n88888888\r\n98769876\r\n",
                "4\r\n2\r\n"
            ],
            [
                "8\r\n23456789\r\n01234567\r\n",
                "2\r\n5\r\n"
            ],
            [
                "5\r\n11222\r\n22111\r\n",
                "1\r\n2\r\n"
            ],
            [
                "9\r\n777777777\r\n777777777\r\n",
                "0\r\n0\r\n"
            ],
            [
                "9\r\n353589343\r\n280419388\r\n",
                "3\r\n5\r\n"
            ],
            [
                "10\r\n8104381743\r\n8104381743\r\n",
                "0\r\n8\r\n"
            ],
            [
                "10\r\n8104381743\r\n8418134730\r\n",
                "0\r\n8\r\n"
            ],
            [
                "10\r\n1111122222\r\n2222211111\r\n",
                "0\r\n5\r\n"
            ],
            [
                "100\r\n6317494220822818719411404030346382869796138932712461187067886456209071515048745855973784223939110171\r\n6017563370120161528504797580620647099370814387367549926215651181421345104088127581963662589996747937\r\n",
                "2\r\n86\r\n"
            ],
            [
                "200\r\n89017372169770060638462517044634884577600285180365791227828841983192945639410766634962149214165390392679430585962408483864914959904870801002680423351144765728677610509881245693518626747873607530273392\r\n34804385048475325130258121398275821439066233953856051421626677848150660724595847484466293487857039579239864150199164135152374201294909986469345076423004279983866383035554588630496127880705497919788390\r\n",
                "6\r\n175\r\n"
            ],
            [
                "3\r\n112\r\n111\r\n",
                "1\r\n0\r\n"
            ],
            [
                "5\r\n66666\r\n11119\r\n",
                "4\r\n1\r\n"
            ],
            [
                "3\r\n232\r\n123\r\n",
                "1\r\n1\r\n"
            ]
        ]
    }
]