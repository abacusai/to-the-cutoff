[
    {
        "name": "Amazing Trick",
        "description": "Alice is a magician and she creates a new trick. She has \n    n\n cards with\ndifferent numbers from \n    1\n to \n    n\n written on them. First, she asks an\naudience member to shuffle the deck and put cards in a row. Let's say the\n\n    i\n-th card from the left has the number \n    a_i\n on it. Then Alice picks\ntwo permutations \n    p\n and \n    q\n. There is a restriction on \n    p\n and\n\n    q\n \u2014 permutations can't have fixed points. Which means \n    \u2200 i:\n    p_i \n     i\n     and\n     q_i \n     i\n. After permutations are chosen, Alice\nshuffles the cards according to them. Now the \n    i\n-th card from the left is\nthe card \n    a[p[q[i]]\n. The trick is considered successful if \n    i\n-th\ncard from the left has the number \n    i\n on it after the shuffles. Help Alice\npick the permutations \n    p\n and \n    q\n or say it is not possible for the\nspecific starting permutation \n    a\n. Input The first line of the input\ncontains the number of tests \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^5\n). Each test\nis described in two lines. The first line contains one integer \n    n\n \u2014 the\nnumber of cards (\n    1 \n    \u2264 n \n    \u2264 10^5\n). The second line contains\n\n    n\n integers \n    a_i\n \u2014 the initial permutation of the cards (\n    1 \n    \u2264\n    a_i \n    \u2264 n\n; \n    \u2200 i \n    \u2260 j: a_i \n    \u2260 a_j\n). It is guaranteed\nthat the sum of \n    n\n over all tests does not exceed \n    10^5\n. Output\nPrint the answer for each test case in the same order the cases appear in the\ninput. For each test case, print \"Impossible\" in a single line, if no solution\nexists. Otherwise, print \"Possible\" in the first line, and in the following\ntwo lines print permutations \n    p\n and \n    q\n. Example Input 4 2 2 1 3 1 2\n3 4 2 1 4 3 5 5 1 4 2 3 Output Impossible Possible 3 1 2 2 3 1 Possible 3 4 2\n1 3 4 2 1 Possible 4 1 2 5 3 3 1 4 5 2\n\n",
        "cf_contest_id": 1773,
        "cf_index": "A",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graph matchings",
            "math",
            "probabilities"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [],
        "private_cases": []
    }
]