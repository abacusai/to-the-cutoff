[
    {
        "name": "Berland.Taxi",
        "description": "Berland.Taxi is a new taxi company with k cars which started operating in the\ncapital of Berland just recently. The capital has n houses on a straight line\nnumbered from 1 (leftmost) to n (rightmost), and the distance between any two\nneighboring houses is the same. You have to help the company schedule all the\ntaxi rides which come throughout the day according to the following rules: All\ncars are available for picking up passengers. Initially the j-th car is\nlocated next to the house with the number xj at time 0. All cars have the same\nspeed. It takes exactly 1 minute for any car to travel between neighboring\nhouses i and i + 1. The i-th request for taxi ride comes at the time ti,\nasking for a passenger to be picked up at the house ai and dropped off at the\nhouse bi. All requests for taxi rides are given in the increasing order of ti.\nAll ti are distinct. When a request for taxi ride is received at time ti,\nBerland.Taxi operator assigns a car to it as follows: Out of cars which are\ncurrently available, operator assigns the car which is the closest to the pick\nup spot ai. Needless to say, if a car is already on a ride with a passenger,\nit won't be available for any rides until that passenger is dropped off at the\ncorresponding destination. If there are several such cars, operator will pick\none of them which has been waiting the most since it became available. If\nthere are several such cars, operator will pick one of them which has the\nlowest number. After a car gets assigned to the taxi ride request: The driver\nimmediately starts driving from current position to the house ai. Once the car\nreaches house ai, the passenger is immediately picked up and the driver starts\ndriving to house bi. Once house bi is reached, the passenger gets dropped off\nand the car becomes available for new rides staying next to the house bi. It\nis allowed for multiple cars to be located next to the same house at the same\npoint in time, while waiting for ride requests or just passing by. If there\nare no available cars at time ti when a request for taxi ride comes, then: The\ni-th passenger will have to wait for a car to become available. When a car\nbecomes available, operator will immediately assign it to this taxi ride\nrequest. If multiple cars become available at once while the passenger is\nwaiting, operator will pick a car out of them according to the rules described\nabove. Operator processes taxi ride requests one by one. So if multiple\npassengers are waiting for the cars to become available, operator will not\nmove on to processing the (i + 1)-th ride request until the car gets assigned\nto the i-th ride request. Your task is to write a program that will process\nthe given list of m taxi ride requests. For each request you have to find out\nwhich car will get assigned to it, and how long the passenger will have to\nwait for a car to arrive. Note, if there is already car located at the house\nai, then the corresponding wait time will be 0. Input The first line of input\ncontains integers n, k and m (2 \u2264 n \u2264 2\u00b710^5, 1 \u2264 k, m \u2264 2\u00b710^5) \u2014 number of\nhouses, number of cars, and number of taxi ride requests. The second line\ncontains integers x1, x2, ..., xk (1 \u2264 xi \u2264 n) \u2014 initial positions of cars. xi\nis a house number at which the i-th car is located initially. It's allowed for\nmore than one car to be located next to the same house. The following m lines\ncontain information about ride requests. Each ride request is represented by\nintegers tj, aj and bj (1 \u2264 tj \u2264 10^12, 1 \u2264 aj, bj \u2264 n, aj \u2260 bj), where tj is\ntime in minutes when a request is made, aj is a house where passenger needs to\nbe picked up, and bj is a house where passenger needs to be dropped off. All\ntaxi ride requests are given in the increasing order of tj. All tj are\ndistinct. Output Print m lines: the j-th line should contain two integer\nnumbers, the answer for the j-th ride request \u2014 car number assigned by the\noperator and passenger wait time. Examples Input 10 1 2 3 5 2 8 9 10 3 Output\n1 1 1 5 Input 5 2 1 1 5 10 3 5 Output 1 2 Input 5 2 2 1 5 10 3 5 20 4 1 Output\n1 2 2 1 Note In the first sample test, a request comes in at time 5 and the\ncar needs to get from house 3 to house 2 to pick up the passenger. Therefore\nwait time will be 1 and the ride will be completed at time 5 + 1 + 6 = 12. The\nsecond request comes in at time 9, so the passenger will have to wait for the\ncar to become available at time 12, and then the car needs another 2 minutes\nto get from house 8 to house 10. So the total wait time is 3 + 2 = 5. In the\nsecond sample test, cars 1 and 2 are located at the same distance from the\nfirst passenger and have the same \"wait time since it became available\". Car 1\nwins a tiebreaker according to the rules because it has the lowest number. It\nwill come to house 3 at time 3, so the wait time will be 2.\n\n",
        "cf_contest_id": 883,
        "cf_index": "L",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10 1 2\r\n3\r\n5 2 8\r\n9 10 3\r\n",
                "1 1\r\n1 5\r\n"
            ],
            [
                "5 2 1\r\n1 5\r\n10 3 5\r\n",
                "1 2\r\n"
            ],
            [
                "5 2 2\r\n1 5\r\n10 3 5\r\n20 4 1\r\n",
                "1 2\r\n2 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 1 2\r\n5\r\n1 5 6\r\n2 6 7\r\n",
                "1 0\r\n1 0\r\n"
            ],
            [
                "10 2 4\r\n1 10\r\n2 1 3\r\n3 10 9\r\n6 5 6\r\n7 6 5\r\n",
                "1 0\r\n2 0\r\n1 2\r\n2 3\r\n"
            ],
            [
                "10 1 5\r\n3\r\n5 2 8\r\n9 10 3\r\n11 2 1\r\n16 8 4\r\n21 3 2\r\n",
                "1 1\r\n1 5\r\n1 11\r\n1 14\r\n1 14\r\n"
            ],
            [
                "10 1 1\r\n6\r\n2 8 1\r\n",
                "1 2\r\n"
            ],
            [
                "9 6 3\r\n2 8 6 5 6 6\r\n20 6 9\r\n63 8 1\r\n115 5 1\r\n",
                "3 0\r\n2 0\r\n4 0\r\n"
            ],
            [
                "200000 30 1\r\n24145 40365 19370 43450 20425 20440 44150 38350 5470 1240 7760 42930 7745 43140 12145 17745 9245 5400 45530 12005 30920 14225 4425 5810 24245 44320 31905 43515 6905 27005\r\n1944175 30995 11345\r\n",
                "21 75\r\n"
            ],
            [
                "200000 1 1\r\n200000\r\n1000000000000 1 200000\r\n",
                "1 199999\r\n"
            ],
            [
                "200000 1 10\r\n200000\r\n999999999991 1 200000\r\n999999999992 1 200000\r\n999999999993 1 200000\r\n999999999994 1 200000\r\n999999999995 1 200000\r\n999999999996 1 200000\r\n999999999997 1 200000\r\n999999999998 1 200000\r\n999999999999 1 200000\r\n1000000000000 1 200000\r\n",
                "1 199999\r\n1 599996\r\n1 999993\r\n1 1399990\r\n1 1799987\r\n1 2199984\r\n1 2599981\r\n1 2999978\r\n1 3399975\r\n1 3799972\r\n"
            ],
            [
                "2 1 1\r\n1\r\n1 1 2\r\n",
                "1 0\r\n"
            ],
            [
                "2 1 1\r\n2\r\n1 1 2\r\n",
                "1 1\r\n"
            ],
            [
                "2 1 1\r\n1\r\n1 2 1\r\n",
                "1 1\r\n"
            ],
            [
                "2 1 1\r\n2\r\n1 2 1\r\n",
                "1 0\r\n"
            ],
            [
                "5 2 3\r\n3 2\r\n1 3 5\r\n2 2 1\r\n6 3 4\r\n",
                "1 0\r\n2 0\r\n1 2\r\n"
            ]
        ]
    }
]