[
    {
        "name": "Inna and Choose Options",
        "description": "There always is something to choose from! And now, instead of \"Noughts and\nCrosses\", Inna choose a very unusual upgrade of this game. The rules of the\ngame are given below: There is one person playing the game. Before the\nbeginning of the game he puts 12 cards in a row on the table. Each card\ncontains a character: \"X\" or \"O\". Then the player chooses two positive\nintegers a and b (a\u00b7b = 12), after that he makes a table of size a \u00d7 b from\nthe cards he put on the table as follows: the first b cards form the first row\nof the table, the second b cards form the second row of the table and so on,\nthe last b cards form the last (number a) row of the table. The player wins if\nsome column of the table contain characters \"X\" on all cards. Otherwise, the\nplayer loses. Inna has already put 12 cards on the table in a row. But\nunfortunately, she doesn't know what numbers a and b to choose. Help her win\nthe game: print to her all the possible ways of numbers a, b that she can\nchoose and win. Input The first line of the input contains integer t (1 \u2264 t \u2264\n100). This value shows the number of sets of test data in the input. Next\nfollows the description of each of the t tests on a separate line. The\ndescription of each test is a string consisting of 12 characters, each\ncharacter is either \"X\", or \"O\". The i-th character of the string shows the\ncharacter that is written on the i-th card from the start. Output For each\ntest, print the answer to the test on a single line. The first number in the\nline must represent the number of distinct ways to choose the pair a, b. Next,\nprint on this line the pairs in the format axb. Print the pairs in the order\nof increasing first parameter (a). Separate the pairs in the line by\nwhitespaces. Examples Input 4 OXXXOXOOXOOX OXOXOXOXOXOX XXXXXXXXXXXX\nOOOOOOOOOOOO Output 3 1x12 2x6 4x3 4 1x12 2x6 3x4 6x2 6 1x12 2x6 3x4 4x3 6x2\n12x1 0\n\n",
        "cf_contest_id": 400,
        "cf_index": "A",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\nOXXXOXOOXOOX\r\nOXOXOXOXOXOX\r\nXXXXXXXXXXXX\r\nOOOOOOOOOOOO\r\n",
                "3 1x12 2x6 4x3\r\n4 1x12 2x6 3x4 6x2\r\n6 1x12 2x6 3x4 4x3 6x2 12x1\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\nOOOOOOOOOOOO\r\nXXXXXXXXXXXX\r\n",
                "0\r\n6 1x12 2x6 3x4 4x3 6x2 12x1\r\n"
            ],
            [
                "13\r\nXXXXXXXXXXXX\r\nXXXXXXXXXXXX\r\nXXXXXXXXXXXX\r\nXXXXXXXXXXXX\r\nXXXXXXXXXXXX\r\nXXXXXXXXXXXX\r\nXXXXXXXXXXXX\r\nXXXXXXXXXXXX\r\nXXXXXXXXXXXX\r\nXXXXXXXXXXXX\r\nXXXXXXXXXXXX\r\nXXXXXXXXXXXX\r\nXXXXXXXXXXXX\r\n",
                "6 1x12 2x6 3x4 4x3 6x2 12x1\r\n6 1x12 2x6 3x4 4x3 6x2 12x1\r\n6 1x12 2x6 3x4 4x3 6x2 12x1\r\n6 1x12 2x6 3x4 4x3 6x2 12x1\r\n6 1x12 2x6 3x4 4x3 6x2 12x1\r\n6 1x12 2x6 3x4 4x3 6x2 12x1\r\n6 1x12 2x6 3x4 4x3 6x2 12x1\r\n6 1x12 2x6 3x4 4x3 6x2 12x1\r\n6 1x12 2x6 3x4 4x3 6x2 12x1\r\n6 1x12 2x6 3x4 4x3 6x2 12x1\r\n6 1x12 2x6 3x4 4x3 6x2 12x1\r\n6 1x12 2x6 3x4 4x3 6x2 12x1\r\n6 1x12 2x6 3x4 4x3 6x2 12x1\r\n"
            ]
        ]
    }
]