[
    {
        "name": "01 Game",
        "description": "Alica and Bob are playing a game. Initially they have a binary string \n    s\n\nconsisting of only characters 0 and 1. Alice and Bob make alternating moves:\nAlice makes the first move, Bob makes the second move, Alice makes the third\none, and so on. During each move, the current player must choose two different\nadjacent characters of string \n    s\n and delete them. For example, if \n    s =\n    1011001\n then the following moves are possible: delete \n    s_1\n and\n\n    s_2\n: \n    1011001 \n    \u2192 11001\n; delete \n    s_2\n and\n\n    s_3\n: \n    1\n    011001 \n    \u2192 11001\n; delete \n    s_4\n and\n\n    s_5\n: \n    101\n    1001 \n    \u2192 10101\n; delete \n    s_6\n and\n\n    s_7\n: \n    10110\n    01\n    \u2192 10110\n. If a player can't\nmake any move, they lose. Both players play optimally. You have to determine\nif Alice can win. Input First line contains one integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 1000\n) \u2014 the number of test cases. Only line of each test case\ncontains one string \n    s\n (\n    1 \n    \u2264 |s| \n    \u2264 100\n), consisting of only\ncharacters 0 and 1. Output For each test case print answer in the single line.\nIf Alice can win print DA (YES in Russian) in any register. Otherwise print\nNET (NO in Russian) in any register. Example Input 3 01 1111 0011 Output DA\nNET NET Note In the first test case after Alice's move string \n    s\n become\nempty and Bob can not make any move. In the second test case Alice can not\nmake any move initially. In the third test case after Alice's move string\n\n    s\n turn into \n    01\n. Then, after Bob's move string \n    s\n become empty\nand Alice can not make any move.\n\n",
        "cf_contest_id": 1373,
        "cf_index": "B",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "games"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n01\r\n1111\r\n0011\r\n",
                "DA\r\nNET\r\nNET\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1111111111\r\n",
                "NET\r\n"
            ],
            [
                "1\r\n11111111111\r\n",
                "NET\r\n"
            ],
            [
                "2\r\n11111111111\r\n11111111111\r\n",
                "NET\r\nNET\r\n"
            ],
            [
                "1\r\n00000000000\r\n",
                "NET\r\n"
            ],
            [
                "1\r\n1\r\n",
                "NET\r\n"
            ],
            [
                "1\r\n111111111111111110000000000000000\r\n",
                "NET\r\n"
            ],
            [
                "1\r\n0\r\n",
                "NET\r\n"
            ]
        ]
    }
]