[
    {
        "name": "Sherlock and the Encrypted Data",
        "description": "Sherlock found a piece of encrypted data which he thinks will be useful to\ncatch Moriarty. The encrypted data consists of two integer l and r. He noticed\nthat these integers were in hexadecimal form. He takes each of the integers\nfrom l to r, and performs the following operations: He lists the distinct\ndigits present in the given number. For example: for 101416, he lists the\ndigits as 1, 0, 4. Then he sums respective powers of two for each digit listed\nin the step above. Like in the above example sum = 2^1 + 2^0 + 2^4 = 1910. He\nchanges the initial number by applying bitwise xor of the initial number and\nthe sum. Example: . Note that xor is done in binary notation. One more\nexample: for integer 1e the sum is sum = 2^1 + 2^14. Letters a, b, c, d, e, f\ndenote hexadecimal digits 10, 11, 12, 13, 14, 15, respertively. Sherlock wants\nto count the numbers in the range from l to r (both inclusive) which decrease\non application of the above four steps. He wants you to answer his q queries\nfor different l and r. Input First line contains the integer q (1 \u2264 q \u2264\n10000). Each of the next q lines contain two hexadecimal integers l and r (0 \u2264\nl \u2264 r < 16^15). The hexadecimal integers are written using digits from 0 to 9\nand/or lowercase English letters a, b, c, d, e, f. The hexadecimal integers do\nnot contain extra leading zeros. Output Output q lines, i-th line contains\nanswer to the i-th query (in decimal notation). Examples Input 1 1014 1014\nOutput 1 Input 2 1 1e 1 f Output 1 0 Input 2 1 abc d0e fe23 Output 412 28464\nNote For the second input, 1416 = 2010 sum = 2^1 + 2^4 = 18 Thus, it reduces.\nAnd, we can verify that it is the only number in range 1 to 1e that reduces.\n\n",
        "cf_contest_id": 776,
        "cf_index": "G",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "combinatorics",
            "dp"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "1\r\n1014 1014\r\n",
                "1\r\n"
            ],
            [
                "2\r\n1 1e\r\n1 f\r\n",
                "1\r\n0\r\n"
            ],
            [
                "2\r\n1 abc\r\nd0e fe23\r\n",
                "412\r\n28464\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\nc 61\r\nc 51\r\n27 57\r\n",
                "8\r\n5\r\n4\r\n"
            ],
            [
                "4\r\n58 5c\r\n2b 62\r\n4b 5b\r\n38 5c\r\n",
                "0\r\n7\r\n1\r\n2\r\n"
            ],
            [
                "7\r\nb3 3df\r\n114 25a\r\nfd 307\r\n182 3b0\r\n17a 324\r\n3ba 3c4\r\n3ad 3af\r\n",
                "111\r\n41\r\n62\r\n88\r\n46\r\n0\r\n0\r\n"
            ],
            [
                "48\r\n1f6 2ff\r\n385 3e4\r\n2fc 3a8\r\n1ed 3e2\r\n247 34b\r\n3bc 3df\r\n268 315\r\n1b 340\r\n49 1c3\r\n1a0 23d\r\n2e2 3bb\r\n305 3b1\r\n288 361\r\n77 38a\r\n269 3da\r\n207 25c\r\n171 375\r\n5c 2d2\r\n1a7 21a\r\n28 318\r\n3d0 3e7\r\nff 2d0\r\n22c 3aa\r\n31b 332\r\n14 1a3\r\n30a 36c\r\n213 27b\r\n1e6 333\r\n351 3e0\r\n3c 2d3\r\n2c1 2d6\r\n3ce 3dc\r\n8d 2a2\r\n229 2ed\r\n13c 2ac\r\n29f 33b\r\n21b 2c8\r\n397 39c\r\n149 33d\r\n1b8 26d\r\na1 f3\r\n2a1 2e7\r\n12c 345\r\n114 13a\r\n2ac 3b7\r\n2d7 3aa\r\n3db 3e8\r\n35a 39f\r\n",
                "32\r\n15\r\n49\r\n81\r\n38\r\n0\r\n16\r\n86\r\n38\r\n8\r\n49\r\n49\r\n31\r\n101\r\n62\r\n12\r\n69\r\n69\r\n3\r\n77\r\n0\r\n62\r\n76\r\n3\r\n43\r\n25\r\n20\r\n40\r\n34\r\n71\r\n0\r\n0\r\n62\r\n28\r\n54\r\n12\r\n29\r\n3\r\n64\r\n20\r\n0\r\n0\r\n69\r\n7\r\n49\r\n49\r\n0\r\n31\r\n"
            ],
            [
                "7\r\n1bbc 220c\r\n25a5 25d0\r\n1d11 1d4a\r\n15e2 17c8\r\n1b0b 23c4\r\n179b 2120\r\n1686 1c55\r\n",
                "281\r\n10\r\n0\r\n164\r\n544\r\n554\r\n507\r\n"
            ]
        ]
    }
]