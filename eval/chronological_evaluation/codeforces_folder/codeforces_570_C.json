[
    {
        "name": "Replacement",
        "description": "Daniel has a string s, consisting of lowercase English letters and period\nsigns (characters '.'). Let's define the operation of replacement as the\nfollowing sequence of steps: find a substring \"..\" (two consecutive periods)\nin string s, of all occurrences of the substring let's choose the first one,\nand replace this substring with string \".\". In other words, during the\nreplacement operation, the first two consecutive periods are replaced by one.\nIf string s contains no two consecutive periods, then nothing happens. Let's\ndefine f(s) as the minimum number of operations of replacement to perform, so\nthat the string does not have any two consecutive periods left. You need to\nprocess m queries, the i-th results in that the character at position xi (1 \u2264\nxi \u2264 n) of string s is assigned value ci. After each operation you have to\ncalculate and output the value of f(s). Help Daniel to process all queries.\nInput The first line contains two integers n and m (1 \u2264 n, m \u2264 300 000) the\nlength of the string and the number of queries. The second line contains\nstring s, consisting of n lowercase English letters and period signs. The\nfollowing m lines contain the descriptions of queries. The i-th line contains\ninteger xi and ci (1 \u2264 xi \u2264 n, ci \u2014 a lowercas English letter or a period\nsign), describing the query of assigning symbol ci to position xi. Output\nPrint m numbers, one per line, the i-th of these numbers must be equal to the\nvalue of f(s) after performing the i-th assignment. Examples Input 10 3\n.b..bz.... 1 h 3 c 9 f Output 4 3 1 Input 4 4 .cc. 2 . 3 . 2 a 1 a Output 1 3\n1 1 Note Note to the first sample test (replaced periods are enclosed in\nsquare brackets). The original string is \".b..bz....\". after the first query\nf(hb..bz....) = 4 (\"hb[..]bz....\" \u2192 \"hb.bz[..]..\" \u2192 \"hb.bz[..].\" \u2192 \"hb.bz[..]\"\n\u2192 \"hb.bz.\") after the second query f(hb\u0441.bz....) = 3 (\"hb\u0441.bz[..]..\" \u2192\n\"hb\u0441.bz[..].\" \u2192 \"hb\u0441.bz[..]\" \u2192 \"hb\u0441.bz.\") after the third query f(hb\u0441.bz..f.)\n= 1 (\"hb\u0441.bz[..]f.\" \u2192 \"hb\u0441.bz.f.\")Note to the second sample test. The original\nstring is \".cc.\". after the first query: f(..c.) = 1 (\"[..]c.\" \u2192 \".c.\") after\nthe second query: f(....) = 3 (\"[..]..\" \u2192 \"[..].\" \u2192 \"[..]\" \u2192 \".\") after the\nthird query: f(.a..) = 1 (\".a[..]\" \u2192 \".a.\") after the fourth query: f(aa..) =\n1 (\"aa[..]\" \u2192 \"aa.\")\n\n",
        "cf_contest_id": 570,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10 3\r\n.b..bz....\r\n1 h\r\n3 c\r\n9 f\r\n",
                "4\r\n3\r\n1\r\n"
            ],
            [
                "4 4\r\n.cc.\r\n2 .\r\n3 .\r\n2 a\r\n1 a\r\n",
                "1\r\n3\r\n1\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 5\r\n.\r\n1 .\r\n1 w\r\n1 w\r\n1 .\r\n1 .\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "2 7\r\nab\r\n1 w\r\n2 w\r\n1 c\r\n2 .\r\n2 .\r\n1 .\r\n2 b\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n1\r\n0\r\n"
            ]
        ]
    }
]