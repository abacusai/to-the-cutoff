[
    {
        "name": "Double Knapsack",
        "description": "You are given two multisets A and B. Each multiset has exactly n integers each\nbetween 1 and n inclusive. Multisets may contain multiple copies of the same\nnumber. You would like to find a nonempty subset of A and a nonempty subset of\nB such that the sum of elements in these subsets are equal. Subsets are also\nmultisets, i.e. they can contain elements with equal values. If no solution\nexists, print - 1. Otherwise, print the indices of elements in any such\nsubsets of A and B that have the same sum. Input The first line of the input\ncontains a single integer n (1 \u2264 n \u2264 1 000 000) \u2014 the size of both multisets.\nThe second line contains n integers, denoting the elements of A. Each element\nwill be between 1 and n inclusive. The third line contains n integers,\ndenoting the elements of B. Each element will be between 1 and n inclusive.\nOutput If there is no solution, print a single integer - 1. Otherwise, your\nsolution should be printed on four lines. The first line should contain a\nsingle integer ka, the size of the corresponding subset of A. The second line\nshould contain ka distinct integers, the indices of the subset of A. The third\nline should contain a single integer kb, the size of the corresponding subset\nof B. The fourth line should contain kb distinct integers, the indices of the\nsubset of B. Elements in both sets are numbered from 1 to n. If there are\nmultiple possible solutions, print any of them. Examples Input 10 10 10 10 10\n10 10 10 10 10 10 10 9 8 7 6 5 4 3 2 1 Output 1 2 3 5 8 10 Input 5 4 4 3 3 3 2\n2 2 2 5 Output 2 2 3 2 3 5\n\n",
        "cf_contest_id": 618,
        "cf_index": "F",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "two pointers"
        ],
        "time_limit_seconds": 2.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10\r\n10 10 10 10 10 10 10 10 10 10\r\n10 9 8 7 6 5 4 3 2 1\r\n",
                "1\r\n1 \r\n1\r\n1 \r\n"
            ],
            [
                "5\r\n4 4 3 3 3\r\n2 2 2 2 5\r\n",
                "2\r\n5 4 \r\n3\r\n3 1 2 \r\n"
            ]
        ],
        "private_cases": []
    }
]