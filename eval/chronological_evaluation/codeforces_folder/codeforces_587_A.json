[
    {
        "name": "Duff and Weight Lifting",
        "description": "Recently, Duff has been practicing weight lifting. As a hard practice, Malek\ngave her a task. He gave her a sequence of weights. Weight of i-th of them is\n2^wi pounds. In each step, Duff can lift some of the remaining weights and\nthrow them away. She does this until there's no more weight left. Malek asked\nher to minimize the number of steps. Duff is a competitive programming fan.\nThat's why in each step, she can only lift and throw away a sequence of\nweights 2^a1, ..., 2^ak if and only if there exists a non-negative integer x\nsuch that 2^a1 + 2^a2 + ... + 2^ak = 2^x, i. e. the sum of those numbers is a\npower of two. Duff is a competitive programming fan, but not a programmer.\nThat's why she asked for your help. Help her minimize the number of steps.\nInput The first line of input contains integer n (1 \u2264 n \u2264 10^6), the number of\nweights. The second line contains n integers w1, ..., wn separated by spaces\n(0 \u2264 wi \u2264 10^6 for each 1 \u2264 i \u2264 n), the powers of two forming the weights\nvalues. Output Print the minimum number of steps in a single line. Examples\nInput 5 1 1 2 3 3 Output 2 Input 4 0 1 2 3 Output 4 Note In the first sample\ncase: One optimal way would be to throw away the first three in the first step\nand the rest in the second step. Also, it's not possible to do it in one step\nbecause their sum is not a power of two. In the second sample case: The only\noptimal way is to throw away one weight in each step. It's not possible to do\nit in less than 4 steps because there's no subset of weights with more than\none weight and sum equal to a power of two.\n\n",
        "cf_contest_id": 587,
        "cf_index": "A",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 1 2 3 3\r\n",
                "2\r\n"
            ],
            [
                "4\r\n0 1 2 3\r\n",
                "4\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n120287\r\n",
                "1\r\n"
            ],
            [
                "2\r\n28288 0\r\n",
                "2\r\n"
            ],
            [
                "2\r\n95745 95745\r\n",
                "1\r\n"
            ],
            [
                "13\r\n92 194 580495 0 10855 41704 13 96429 33 213 0 92 140599\r\n",
                "11\r\n"
            ],
            [
                "13\r\n688743 688743 1975 688743 688743 688743 688743 688743 688743 0 0 688743 688743\r\n",
                "4\r\n"
            ],
            [
                "35\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n",
                "3\r\n"
            ],
            [
                "35\r\n130212 3176 77075 8071 18 1369 7539 1683 80757 1847 0 1374 122 8524 4 2 21333 270264 4 9254 151921 0 1 33596 73002 54382 0 1 29233 75952 15 38892 1877 6167 4\r\n",
                "31\r\n"
            ],
            [
                "35\r\n0 0 298 0 0 0 0 0 689063 65442 0 984598 2054 43668 0 369 0 2054 0 996220 0 16327 369 0 996220 0 0 0 4693 2054 348 0 118 0 0\r\n",
                "16\r\n"
            ],
            [
                "100\r\n196 1681 196 0 61 93 196 196 196 196 196 0 0 96 18 1576 0 93 666463 18 93 1 1278 8939 93 196 196 1278 3 0 67416 869956 10 56489 196 745 39 783 196 8939 196 81 69634 4552 39 3 14 20 25 8 10 4 7302 0 19579 20 1140 15990 7302 0 19579 4142 11 1354 75252 93 311 1278 0 79475 10 75252 93 7302 0 81 408441 19579 10 39 19 37748 4364 31135 47700 105818 47700 10 4142 543356 3 30647 45917 60714 8939 18 22925 7302 93 75252\r\n",
                "59\r\n"
            ]
        ]
    }
]