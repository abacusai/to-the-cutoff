[
    {
        "name": "Even Path",
        "description": "Pathfinding is a task of finding a route between two points. It often appears\nin many problems. For example, in a GPS navigation software where a driver can\nquery for a suggested route, or in a robot motion planning where it should\nfind a valid sequence of movements to do some tasks, or in a simple maze\nsolver where it should find a valid path from one point to another point. This\nproblem is related to solving a maze. The maze considered in this problem is\nin the form of a matrix of integers \n    A\n of \n    N \n    \u00d7 N\n. The value\nof each cell is generated from a given array \n    R\n and \n    C\n of \n    N\n\nintegers each. Specifically, the value on the \n    i^th\n row and\n\n    j^th\n column, cell \n    (i,j)\n, is equal to \n    R_i + C_j\n. Note that\nall indexes in this problem are from \n    1\n to \n    N\n. A path in this maze\nis defined as a sequence of cells \n    (r_1,c_1), (r_2,c_2), \n    \u2026,\n    (r_k,c_k)\n such that \n    |r_i - r_i+1| + |c_i - c_i+1| = 1\n for all\n\n    1 \n    \u2264 i < k\n. In other words, each adjacent cell differs only by\n\n    1\n row or only by \n    1\n column. An even path in this maze is defined as\na path in which all the cells in the path contain only even numbers. Given a\ntuple \n    \u27e8 r_a,c_a,r_b,c_b \n    \u27e9\n as a query, your task is to\ndetermine whether there exists an even path from cell \n    (r_a,c_a)\n to cell\n\n    (r_b,c_b)\n. To simplify the problem, it is guaranteed that both cell\n\n    (r_a,c_a)\n and cell \n    (r_b,c_b)\n contain even numbers. For example,\nlet \n    N = 5\n, \n    R = \n    \n    6, 2, 7, 8, 3\n, and \n    C = \n    \n    3, 4, 8,\n    5, 1\n. The following figure depicts the matrix \n    A\n of \n    5 \n    \u00d7\n    5\n which is generated from the given array \n    R\n and \n    C\n. Let us\nconsider several queries: \n    \u27e8 2, 2, 1, 3 \n    \u27e9\n: There is an\neven path from cell \n    (2,2)\n to cell \n    (1,3)\n, e.g., \n    (2,2), (2,3),\n    (1,3)\n. Of course, \n    (2,2), (1,2), (1,3)\n is also a valid even path.\n\n    \u27e8 4, 2, 4, 3 \n    \u27e9\n: There is an even path from cell\n\n    (4,2)\n to cell \n    (4,3)\n, namely \n    (4,2), (4,3)\n. \n    \u27e8 5, 1,\n    3, 4 \n    \u27e9\n: There is no even path from cell \n    (5,1)\n to cell\n\n    (3,4)\n. Observe that the only two neighboring cells of \n    (5,1)\n are\ncell \n    (5,2)\n and cell \n    (4,1)\n, and both of them contain odd numbers (7\nand 11, respectively), thus, there cannot be any even path originating from\ncell \n    (5,1)\n. Input Input begins with a line containing two integers:\n\n    N\n \n    Q\n (\n    2 \n    \u2264 N \n    \u2264 100\n     000\n; \n    1 \n    \u2264 Q \n    \u2264\n    100\n     000\n) representing the size of the maze and the number of queries,\nrespectively. The next line contains \n    N\n integers: \n    R_i\n (\n    0 \n    \u2264\n    R_i \n    \u2264 10^6\n) representing the array \n    R\n. The next line contains\n\n    N\n integers: \n    C_i\n (\n    0 \n    \u2264 C_i \n    \u2264 10^6\n) representing the\narray \n    C\n. The next \n    Q\n lines each contains four integers: \n    r_a\n\n\n    c_a\n \n    r_b\n \n    c_b\n (\n    1 \n    \u2264 r_a, c_a, r_b, c_b \n    \u2264 N\n)\nrepresenting a query of \n    \u27e8 r_a, c_a, r_b, c_b \n    \u27e9\n. It is\nguaranteed that \n    (r_a,c_a)\n and \n    (r_b,c_b)\n are two different cells in\nthe maze and both of them contain even numbers. Output For each query in the\nsame order as input, output in a line a string \"YES\" (without quotes) or \"NO\"\n(without quotes) whether there exists an even path from cell \n    (r_a,c_a)\n\nto cell \n    (r_b,c_b)\n. Examples Input 5 3 6 2 7 8 3 3 4 8 5 1 2 2 1 3 4 2 4\n3 5 1 3 4 Output YES YES NO Input 3 2 30 40 49 15 20 25 2 2 3 3 1 2 2 2 Output\nNO YES Note Explanation for the sample input/output #1 This is the example\nfrom the problem description.\n\n",
        "cf_contest_id": 1252,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [],
        "private_cases": []
    }
]