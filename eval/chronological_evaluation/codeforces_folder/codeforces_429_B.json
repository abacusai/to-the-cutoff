[
    {
        "name": "Working out",
        "description": "Summer is coming! It's time for Iahub and Iahubina to work out, as they both\nwant to look hot at the beach. The gym where they go is a matrix a with n\nlines and m columns. Let number a[i][j] represents the calories burned by\nperforming workout at the cell of gym in the i-th line and the j-th column.\nIahub starts with workout located at line 1 and column 1. He needs to finish\nwith workout a[n][m]. After finishing workout a[i][j], he can go to workout\na[i + 1][j] or a[i][j + 1]. Similarly, Iahubina starts with workout a[n][1]\nand she needs to finish with workout a[1][m]. After finishing workout from\ncell a[i][j], she goes to either a[i][j + 1] or a[i - 1][j]. There is one\nadditional condition for their training. They have to meet in exactly one cell\nof gym. At that cell, none of them will work out. They will talk about fast\nexponentiation (pretty odd small talk) and then both of them will move to the\nnext workout. If a workout was done by either Iahub or Iahubina, it counts as\ntotal gain. Please plan a workout for Iahub and Iahubina such as total gain to\nbe as big as possible. Note, that Iahub and Iahubina can perform workouts with\ndifferent speed, so the number of cells that they use to reach meet cell may\ndiffers. Input The first line of the input contains two integers n and m (3 \u2264\nn, m \u2264 1000). Each of the next n lines contains m integers: j-th number from\ni-th line denotes element a[i][j] (0 \u2264 a[i][j] \u2264 10^5). Output The output\ncontains a single number \u2014 the maximum total gain possible. Examples Input 3 3\n100 100 100 100 1 100 100 100 100 Output 800 Note Iahub will choose exercises\na[1][1] \u2192 a[1][2] \u2192 a[2][2] \u2192 a[3][2] \u2192 a[3][3]. Iahubina will choose\nexercises a[3][1] \u2192 a[2][1] \u2192 a[2][2] \u2192 a[2][3] \u2192 a[1][3].\n\n",
        "cf_contest_id": 429,
        "cf_index": "B",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "dp"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\n100 100 100\r\n100 1 100\r\n100 100 100\r\n",
                "800"
            ]
        ],
        "private_cases": [
            [
                "4 5\r\n87882 40786 3691 85313 46694\r\n28884 16067 3242 97367 78518\r\n4250 35501 9780 14435 19004\r\n64673 65438 56977 64495 27280\r\n",
                "747898"
            ],
            [
                "3 3\r\n3 1 2\r\n3 2 0\r\n2 3 2\r\n",
                "16"
            ],
            [
                "3 3\r\n1 10 1\r\n1 10 1\r\n1 10 1\r\n",
                "26"
            ],
            [
                "3 3\r\n0 0 0\r\n0 10000 0\r\n0 0 0\r\n",
                "0"
            ],
            [
                "3 3\r\n1 1 1\r\n0 10000 0\r\n1 1 1\r\n",
                "6"
            ],
            [
                "3 3\r\n9 0 9\r\n0 9 9\r\n9 9 9\r\n",
                "54"
            ],
            [
                "3 3\r\n0 0 0\r\n0 100 0\r\n0 0 0\r\n",
                "0"
            ],
            [
                "3 3\r\n100000 100000 100000\r\n1 100000 100000\r\n1 1 100000\r\n",
                "500003"
            ],
            [
                "3 3\r\n100 0 100\r\n1 100 100\r\n0 100 100\r\n",
                "501"
            ]
        ]
    }
]