[
    {
        "name": "Tetris revisited",
        "description": "Physicist Woll likes to play one relaxing game in between his search of the\ntheory of everything. Game interface consists of a rectangular n \u00d7 m playing\nfield and a dashboard. Initially some cells of the playing field are filled\nwhile others are empty. Dashboard contains images of all various connected (we\nmean connectivity by side) figures of 2, 3, 4 and 5 cells, with all their\nrotations and reflections. Player can copy any figure from the dashboard and\nplace it anywhere at the still empty cells of the playing field. Of course any\nfigure can be used as many times as needed. Woll's aim is to fill the whole\nfield in such a way that there are no empty cells left, and also... just have\nsome fun. Every initially empty cell should be filled with exactly one cell of\nsome figure. Every figure should be entirely inside the board. In the picture\nblack cells stand for initially filled cells of the field, and one-colour\nregions represent the figures. Input First line contains integers n and m (1 \u2264\nn, m \u2264 1000) \u2014 the height and the width of the field correspondingly. Next n\nlines contain m symbols each. They represent the field in a natural way: j-th\ncharacter of the i-th line is \"#\" if the corresponding cell is filled, and \".\"\nif it is empty. Output If there is no chance to win the game output the only\nnumber \"-1\" (without the quotes). Otherwise output any filling of the field by\nthe figures in the following format: each figure should be represented by some\ndigit and figures that touch each other by side should be represented by\ndistinct digits. Every initially filled cell should be represented by \"#\".\nExamples Input 2 3 ... #.# Output 000 #0# Input 3 3 .#. ... ..# Output 5#1 511\n55# Input 3 3 ... .## .#. Output -1 Input 1 2 ## Output ## Note In the third\nsample, there is no way to fill a cell with no empty neighbours. In the forth\nsample, Woll does not have to fill anything, so we should output the field\nfrom the input.\n\n",
        "cf_contest_id": 86,
        "cf_index": "B",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graph matchings",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 3\r\n...\r\n#.#\r\n",
                "000\r\n#0#\r\n"
            ],
            [
                "3 3\r\n.#.\r\n...\r\n..#\r\n",
                "0#6\r\n046\r\n04#\r\n"
            ],
            [
                "3 3\r\n...\r\n.##\r\n.#.\r\n",
                "-1\r\n"
            ],
            [
                "1 2\r\n##\r\n",
                "##\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 1\r\n#\r\n.\r\n.\r\n#\r\n#\r\n",
                "#\r\n1\r\n1\r\n#\r\n#\r\n"
            ],
            [
                "2 9\r\n#####.###\r\n..###.#..\r\n",
                "#####6###\r\n11###6#44\r\n"
            ],
            [
                "1 313\r\n######################################..##################################..######################################################..#########################..##########################################################################################################################################################\r\n",
                "######################################66##################################66######################################################33#########################33##########################################################################################################################################################\r\n"
            ],
            [
                "1 8\r\n###..###\r\n",
                "###00###\r\n"
            ],
            [
                "53 1\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n.\r\n.\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n",
                "#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n0\r\n0\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n"
            ],
            [
                "73 1\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n.\r\n.\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n",
                "#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n2\r\n2\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n"
            ],
            [
                "24 1\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n",
                "#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n#\r\n"
            ],
            [
                "3 3\r\n##.\r\n#..\r\n..#\r\n",
                "##6\r\n#46\r\n44#\r\n"
            ]
        ]
    }
]