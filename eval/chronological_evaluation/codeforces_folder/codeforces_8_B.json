[
    {
        "name": "Obsession with Robots",
        "description": "The whole world got obsessed with robots,and to keep pace with the progress,\ngreat Berland's programmer Draude decided to build his own robot. He was\nworking hard at the robot. He taught it to walk the shortest path from one\npoint to another, to record all its movements, but like in many Draude's\nprograms, there was a bug \u2014 the robot didn't always walk the shortest path.\nFortunately, the robot recorded its own movements correctly. Now Draude wants\nto find out when his robot functions wrong. Heh, if Draude only remembered the\nmap of the field, where he tested the robot, he would easily say if the robot\nwalked in the right direction or not. But the field map was lost never to be\nfound, that's why he asks you to find out if there exist at least one map,\nwhere the path recorded by the robot is the shortest. The map is an infinite\ncheckered field, where each square is either empty, or contains an\nobstruction. It is also known that the robot never tries to run into the\nobstruction. By the recorded robot's movements find out if there exist at\nleast one such map, that it is possible to choose for the robot a starting\nsquare (the starting square should be empty) such that when the robot moves\nfrom this square its movements coincide with the recorded ones (the robot\ndoesn't run into anything, moving along empty squares only), and the path from\nthe starting square to the end one is the shortest. In one movement the robot\ncan move into the square (providing there are no obstrutions in this square)\nthat has common sides with the square the robot is currently in. Input The\nfirst line of the input file contains the recording of the robot's movements.\nThis recording is a non-empty string, consisting of uppercase Latin letters L,\nR, U and D, standing for movements left, right, up and down respectively. The\nlength of the string does not exceed 100. Output In the first line output the\nonly word OK (if the above described map exists), or BUG (if such a map does\nnot exist). Examples Input LLUUUR Output OK Input RRUULLDD Output BUG\n\n",
        "cf_contest_id": 8,
        "cf_index": "B",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graphs",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 64.0,
        "public_cases": [
            [
                "LLUUUR\r\n",
                "OK\r\n"
            ],
            [
                "RRUULLDD\r\n",
                "BUG\r\n"
            ]
        ],
        "private_cases": [
            [
                "L\r\n",
                "OK\r\n"
            ],
            [
                "R\r\n",
                "OK\r\n"
            ],
            [
                "R\r\n",
                "OK\r\n"
            ],
            [
                "RR\r\n",
                "OK\r\n"
            ],
            [
                "DL\r\n",
                "OK\r\n"
            ],
            [
                "LD\r\n",
                "OK\r\n"
            ],
            [
                "RUL\r\n",
                "BUG\r\n"
            ],
            [
                "ULD\r\n",
                "BUG\r\n"
            ],
            [
                "DDR\r\n",
                "OK\r\n"
            ],
            [
                "RRDD\r\n",
                "OK\r\n"
            ],
            [
                "RRLR\r\n",
                "BUG\r\n"
            ],
            [
                "RRDL\r\n",
                "BUG\r\n"
            ],
            [
                "LRUD\r\n",
                "BUG\r\n"
            ],
            [
                "RDRLL\r\n",
                "BUG\r\n"
            ],
            [
                "DRDRD\r\n",
                "OK\r\n"
            ],
            [
                "ULURL\r\n",
                "BUG\r\n"
            ],
            [
                "LUUDU\r\n",
                "BUG\r\n"
            ],
            [
                "RDLUR\r\n",
                "BUG\r\n"
            ],
            [
                "DLDLDDRR\r\n",
                "OK\r\n"
            ],
            [
                "RDRDDD\r\n",
                "OK\r\n"
            ],
            [
                "UULLDLUR\r\n",
                "BUG\r\n"
            ],
            [
                "LULU\r\n",
                "OK\r\n"
            ],
            [
                "LLDDLDLLDDDLLLDLLLLLUU\r\n",
                "OK\r\n"
            ],
            [
                "LLDDLDLLDDDLLLDLLLLLUU\r\n",
                "OK\r\n"
            ],
            [
                "LLDDLDLLDDDLLLDLLLLLUU\r\n",
                "OK\r\n"
            ],
            [
                "URRRRRURRURUURRRRRDDDDLDDDRDDDDLLDLL\r\n",
                "OK\r\n"
            ],
            [
                "R\r\n",
                "OK\r\n"
            ],
            [
                "UL\r\n",
                "OK\r\n"
            ],
            [
                "UDR\r\n",
                "BUG\r\n"
            ],
            [
                "DDDR\r\n",
                "OK\r\n"
            ],
            [
                "UUUDU\r\n",
                "BUG\r\n"
            ],
            [
                "LULULL\r\n",
                "OK\r\n"
            ],
            [
                "DLURUUU\r\n",
                "BUG\r\n"
            ],
            [
                "UURUURRUUU\r\n",
                "OK\r\n"
            ],
            [
                "DDDDRDDLDDDDDDDRDDLD\r\n",
                "OK\r\n"
            ],
            [
                "URRRLULUURURLRLLLLULLRLRURLULRLULLULRRUU\r\n",
                "BUG\r\n"
            ],
            [
                "RURRRRLURRRURRUURRRRRRRRDDULULRRURRRDRRRRRRRRRRLDR\r\n",
                "BUG\r\n"
            ],
            [
                "RLRRRRRDRRDRRRRDLRRRRRRRDLRLDDLRRRRLDLDRDRRRRDRDRDRDLRRURRLRRRRDRRRRRRRRLDDRLRRDRRRRRRRDRDRLDRDDDRDR\r\n",
                "BUG\r\n"
            ],
            [
                "DDUL\r\n",
                "BUG\r\n"
            ],
            [
                "UUULLLLRDD\r\n",
                "BUG\r\n"
            ],
            [
                "LLLLLLLLRRRRDDDDDDDUUUUUU\r\n",
                "BUG\r\n"
            ],
            [
                "DDDDDDDDDDDDUUUUUUUUUUUURRRRRRRRRRRRRLLLLLLLLLLLLLLL\r\n",
                "BUG\r\n"
            ],
            [
                "DDDDDDDDDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLRRRRRRRRRRRRRRRRRRRRRRRRRRRUUUUUUUUUUUUUUUUUUUUUUUU\r\n",
                "BUG\r\n"
            ],
            [
                "DLUR\r\n",
                "BUG\r\n"
            ],
            [
                "UUUURDLLLL\r\n",
                "BUG\r\n"
            ],
            [
                "RRRRRRRRRRRURLLLLLLLLLLLL\r\n",
                "BUG\r\n"
            ],
            [
                "LLLLLLLLLLLLLLLLLLLLLLLLLLRUUUUUUUUUUUUUUUUUUUUUUUUU\r\n",
                "BUG\r\n"
            ],
            [
                "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUURDRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\r\n",
                "BUG\r\n"
            ],
            [
                "DDLDRRR\r\n",
                "BUG\r\n"
            ],
            [
                "RRUULLD\r\n",
                "BUG\r\n"
            ],
            [
                "LUUUULLLLDDDDRRRD\r\n",
                "BUG\r\n"
            ],
            [
                "DDDDLLLDDDRRRUURRRR\r\n",
                "BUG\r\n"
            ],
            [
                "DDDDDDDLLDDRRURRRRRRR\r\n",
                "BUG\r\n"
            ],
            [
                "DDDDDDDDDDLLLLLLLLLLLDDDDDDDDDDDRRRRRRRRRRRUUUUUUUUUURRRRRRRRRR\r\n",
                "BUG\r\n"
            ],
            [
                "DDDLLLLLLLDDDDDDDRRRRRRRUUUUUURRR\r\n",
                "BUG\r\n"
            ],
            [
                "RRRUUULLLDD\r\n",
                "BUG\r\n"
            ],
            [
                "DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDLLLLDDDDRRRRUUURRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\r\n",
                "BUG\r\n"
            ],
            [
                "RRRRRRRRRRRDDDDDDDDDDDDDDDDDDDRRRRRRRRRRRRRRRRRRRUUUUUUUUUUUUUUUUUUULLLLLLLLLLLLLLLLLLUUUUUUUUUUU\r\n",
                "BUG\r\n"
            ]
        ]
    }
]