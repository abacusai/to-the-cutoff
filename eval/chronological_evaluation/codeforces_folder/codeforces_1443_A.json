[
    {
        "name": "Kids Seating",
        "description": "Today the kindergarten has a new group of \n    n\n kids who need to be seated\nat the dinner table. The chairs at the table are numbered from \n    1\n to\n\n    4n\n. Two kids can't sit on the same chair. It is known that two kids who\nsit on chairs with numbers \n    a\n and \n    b\n (\n    a \n    \u2260 b\n) will indulge\nif: \n    gcd(a, b) = 1\n or, \n    a\n divides \n    b\n or \n    b\n divides\n\n    a\n. \n    gcd(a, b)\n \u2014 the maximum number \n    x\n such that \n    a\n is\ndivisible by \n    x\n and \n    b\n is divisible by \n    x\n. For example, if\n\n    n=3\n and the kids sit on chairs with numbers \n    2\n, \n    3\n, \n    4\n,\nthen they will indulge since \n    4\n is divided by \n    2\n and \n    gcd(2, 3) =\n    1\n. If kids sit on chairs with numbers \n    4\n, \n    6\n, \n    10\n, then they\nwill not indulge. The teacher really doesn't want the mess at the table, so\nshe wants to seat the kids so there are no \n    2\n of the kid that can\nindulge. More formally, she wants no pair of chairs \n    a\n and \n    b\n that\nthe kids occupy to fulfill the condition above. Since the teacher is very busy\nwith the entertainment of the kids, she asked you to solve this problem. Input\nThe first line contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014\nthe number of test cases. Then \n    t\n test cases follow. Each test case\nconsists of one line containing an integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    100\n) \u2014 the number of kids. Output Output \n    t\n lines, which contain\n\n    n\n distinct integers from \n    1\n to \n    4n\n \u2014 the numbers of chairs\nthat the kids should occupy in the corresponding test case. If there are\nmultiple answers, print any of them. You can print \n    n\n numbers in any\norder. Example Input 3 2 3 4 Output 6 4 4 6 10 14 10 12 8\n\n",
        "cf_contest_id": 1443,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2\r\n3\r\n4\r\n",
                "4 6\r\n6 8 10\r\n8 10 12 14\r\n"
            ]
        ],
        "private_cases": []
    }
]