[
    {
        "name": "Knapsack",
        "description": "You have a knapsack with the capacity of \n    W\n. There are also \n    n\n\nitems, the \n    i\n-th one has weight \n    w_i\n. You want to put some of these\nitems into the knapsack in such a way that their total weight \n    C\n is at\nleast half of its size, but (obviously) does not exceed it. Formally, \n    C\n\nshould satisfy: \n    \u2308\n    W/2\n    \u2309\n    \u2264 C \n    \u2264 W\n. Output\nthe list of items you will put into the knapsack or determine that fulfilling\nthe conditions is impossible. If there are several possible lists of items\nsatisfying the conditions, you can output any. Note that you don't have to\nmaximize the sum of weights of items in the knapsack. Input Each test contains\nmultiple test cases. The first line contains the number of test cases \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 10^4\n). Description of the test cases follows. The first\nline of each test case contains integers \n    n\n and \n    W\n (\n    1 \n    \u2264 n\n    \n    \u2264 200\n     000\n, \n    1\n    \u2264 W \n    \u2264 10^18\n). The second line of each\ntest case contains \n    n\n integers \n    w_1, w_2, \n    \u2026, w_n\n (\n    1 \n    \u2264\n    w_i \n    \u2264 10^9\n) \u2014 weights of the items. The sum of \n    n\n over all test\ncases does not exceed \n    200\n     000\n. Output For each test case, if there is\nno solution, print a single integer \n    -1\n. If there exists a solution\nconsisting of \n    m\n items, print \n    m\n in the first line of the output and\n\n    m\n integers \n    j_1\n, \n    j_2\n, ..., \n    j_m\n (\n    1 \n    \u2264 j_i \n    \u2264\n    n\n, all \n    j_i\n are distinct) in the second line of the output \u2014 indices\nof the items you would like to pack into the knapsack. If there are several\npossible lists of items satisfying the conditions, you can output any. Note\nthat you don't have to maximize the sum of weights items in the knapsack.\nExample Input 3 1 3 3 6 2 19 8 19 69 9 4 7 12 1 1 1 17 1 1 1 Output 1 1 -1 6 1\n2 3 5 6 7 Note In the first test case, you can take the item of weight \n    3\n\nand fill the knapsack just right. In the second test case, all the items are\nlarger than the knapsack's capacity. Therefore, the answer is \n    -1\n. In the\nthird test case, you fill the knapsack exactly in half.\n\n",
        "cf_contest_id": 1446,
        "cf_index": "A",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 3\r\n3\r\n6 2\r\n19 8 19 69 9 4\r\n7 12\r\n1 1 1 17 1 1 1\r\n",
                "1 1\r\n-1\r\n6 1 2 3 5 6 7\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 2000000001\r\n1000000000\r\n1 1000000000000000000\r\n1\r\n",
                "-1\r\n-1\r\n"
            ],
            [
                "1\r\n1 900000000\r\n494311454\r\n",
                "1 1\r\n"
            ],
            [
                "1\r\n1 1\r\n1\r\n",
                "1 1\r\n"
            ],
            [
                "1\r\n1 1\r\n2\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n1 2000000001\r\n1000000000\r\n",
                "-1\r\n"
            ]
        ]
    }
]