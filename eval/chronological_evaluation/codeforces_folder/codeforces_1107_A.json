[
    {
        "name": "Digits Sequence Dividing",
        "description": "You are given a sequence \n    s\n consisting of \n    n\n digits from \n    1\n to\n\n    9\n. You have to divide it into at least two segments (segment \u2014 is a\nconsecutive sequence of elements) (in other words, you have to place\nseparators between some digits of the sequence) in such a way that each\nelement belongs to exactly one segment and if the resulting division will be\nrepresented as an integer numbers sequence then each next element of this\nsequence will be strictly greater than the previous one. More formally: if the\nresulting division of the sequence is \n    t_1, t_2, \n    \u2026, t_k\n, where\n\n    k\n is the number of element in a division, then for each \n    i\n from\n\n    1\n to \n    k-1\n the condition \n    t_i < t_i + 1\n (using numerical\ncomparing, it means that the integer representations of strings are compared)\nshould be satisfied. For example, if \n    s=654\n then you can divide it into\nparts \n    [6, 54]\n and it will be suitable division. But if you will divide\nit into parts \n    [65, 4]\n then it will be bad division because \n    65 > 4\n.\nIf \n    s=123\n then you can divide it into parts \n    [1, 23]\n, \n    [1, 2,\n    3]\n but not into parts \n    [12, 3]\n. Your task is to find any suitable\ndivision for each of the \n    q\n independent queries. Input The first line of\nthe input contains one integer \n    q\n (\n    1 \n    \u2264 q \n    \u2264 300\n) \u2014 the\nnumber of queries. The first line of the \n    i\n-th query contains one integer\nnumber \n    n_i\n (\n    2 \n    \u2264 n_i \n    \u2264 300\n) \u2014 the number of digits in the\n\n    i\n-th query. The second line of the \n    i\n-th query contains one string\n\n    s_i\n of length \n    n_i\n consisting only of digits from \n    1\n to\n\n    9\n. Output If the sequence of digits in the \n    i\n-th query cannot be\ndivided into at least two parts in a way described in the problem statement,\nprint the single line \"NO\" for this query. Otherwise in the first line of the\nanswer to this query print \"YES\", on the second line print \n    k_i\n \u2014 the\nnumber of parts in your division of the \n    i\n-th query sequence and in the\nthird line print \n    k_i\n strings \n    t_i, 1, t_i, 2, \n    \u2026, t_i,\n    k_i\n \u2014 your division. Parts should be printed in order of the initial\nstring digits. It means that if you write the parts one after another without\nchanging their order then you'll get the string \n    s_i\n. See examples for\nbetter understanding. Example Input 4 6 654321 4 1337 2 33 4 2122 Output YES 3\n6 54 321 YES 3 1 3 37 NO YES 2 21 22\n\n",
        "cf_contest_id": 1107,
        "cf_index": "A",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n6\r\n654321\r\n4\r\n1337\r\n2\r\n33\r\n4\r\n2122\r\n",
                "YES 2 6 54321\r\nYES 2 1 337\r\nNO\r\nYES 2 2 122\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n4\r\n3333\r\n",
                "YES 2 3 333\r\n"
            ],
            [
                "21\r\n3\r\n123\r\n3\r\n123\r\n3\r\n123\r\n3\r\n123\r\n3\r\n123\r\n3\r\n213\r\n3\r\n123\r\n3\r\n123\r\n3\r\n123\r\n3\r\n321\r\n3\r\n123\r\n3\r\n321\r\n3\r\n132\r\n3\r\n322\r\n3\r\n321\r\n3\r\n341\r\n3\r\n123\r\n3\r\n421\r\n3\r\n421\r\n3\r\n421\r\n3\r\n421\r\n",
                "YES 2 1 23\r\nYES 2 1 23\r\nYES 2 1 23\r\nYES 2 1 23\r\nYES 2 1 23\r\nYES 2 2 13\r\nYES 2 1 23\r\nYES 2 1 23\r\nYES 2 1 23\r\nYES 2 3 21\r\nYES 2 1 23\r\nYES 2 3 21\r\nYES 2 1 32\r\nYES 2 3 22\r\nYES 2 3 21\r\nYES 2 3 41\r\nYES 2 1 23\r\nYES 2 4 21\r\nYES 2 4 21\r\nYES 2 4 21\r\nYES 2 4 21\r\n"
            ],
            [
                "1\r\n3\r\n333\r\n",
                "YES 2 3 33\r\n"
            ],
            [
                "1\r\n4\r\n5234\r\n",
                "YES 2 5 234\r\n"
            ],
            [
                "1\r\n4\r\n9999\r\n",
                "YES 2 9 999\r\n"
            ],
            [
                "2\r\n2\r\n45\r\n2\r\n67\r\n",
                "YES 2 4 5\r\nYES 2 6 7\r\n"
            ]
        ]
    }
]