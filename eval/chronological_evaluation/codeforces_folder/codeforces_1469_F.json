[
    {
        "name": "Power Sockets",
        "description": "// We decided to drop the legend about the power sockets but feel free to come\nup with your own :^) Define a chain: a chain of length \n    1\n is a single\nvertex; a chain of length \n    x\n is a chain of length \n    x-1\n with a new\nvertex connected to the end of it with a single edge. You are given \n    n\n\nchains of lengths \n    l_1, l_2, \n    \u2026, l_n\n. You plan to build a tree using\nsome of them. Each vertex of the tree is either white or black. The tree\ninitially only has a white root vertex. All chains initially consist only of\nwhite vertices. You can take one of the chains and connect any of its vertices\nto any white vertex of the tree with an edge. The chain becomes part of the\ntree. Both endpoints of this edge become black. Each chain can be used no more\nthan once. Some chains can be left unused. The distance between two vertices\nof the tree is the number of edges on the shortest path between them. If there\nis at least \n    k\n white vertices in the resulting tree, then the value of\nthe tree is the distance between the root and the \n    k\n-th closest white\nvertex. What's the minimum value of the tree you can obtain? If there is no\nway to build a tree with at least \n    k\n white vertices, then print -1. Input\nThe first line contains two integers \n    n\n and \n    k\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n, \n    2 \n    \u2264 k \n    \u2264 10^9\n) \u2014 the number of chains and the\nminimum number of white vertices a tree should have to have a value. The\nsecond line contains \n    n\n integers \n    l_1, l_2, \n    \u2026, l_n\n (\n    3 \n    \u2264\n    l_i \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the lengths of the chains. Output Print a\nsingle integer. If there is no way to build a tree with at least \n    k\n white\nvertices, then print -1. Otherwise, print the minimum value the tree can have.\nExamples Input 1 2 3 Output 2 Input 3 3 4 3 3 Output 3 Input 3 5 4 3 4 Output\n4 Input 2 10 5 7 Output -1 Note You are allowed to not use all the chains, so\nit's optimal to only use chain of length \n    4\n in the second example.\n\n",
        "cf_contest_id": 1469,
        "cf_index": "F",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1 2\r\n3\r\n",
                "2\r\n"
            ],
            [
                "3 3\r\n4 3 3\r\n",
                "3\r\n"
            ],
            [
                "3 5\r\n4 3 4\r\n",
                "4\r\n"
            ],
            [
                "2 10\r\n5 7\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 20\r\n6 5 4 8 9 4 3 4 6 6\r\n",
                "6\r\n"
            ],
            [
                "20 50\r\n5 4 6 3 6 3 3 6 4 3 9 10 4 10 7 7 7 8 8 9\r\n",
                "7\r\n"
            ],
            [
                "100 5000\r\n101 168 189 84 24 14 195 139 200 76 73 177 95 9 39 117 32 82 166 37 68 70 123 110 119 129 37 35 200 44 149 46 164 6 71 81 159 160 103 184 139 75 92 162 173 10 129 122 37 150 97 60 4 172 73 146 61 167 127 141 163 132 22 102 127 75 5 104 42 101 162 52 195 140 83 134 142 153 101 127 67 120 26 38 196 134 177 125 175 40 29 113 198 51 3 91 180 151 87 95\r\n",
                "37\r\n"
            ],
            [
                "10 100000\r\n184056 6564 18232 46874 116555 187227 138825 180211 171932 153322\r\n",
                "5196\r\n"
            ],
            [
                "1 3\r\n3\r\n",
                "-1\r\n"
            ],
            [
                "1 199999\r\n200000\r\n",
                "100001\r\n"
            ],
            [
                "1 200000\r\n200000\r\n",
                "-1\r\n"
            ],
            [
                "1 2\r\n200000\r\n",
                "2\r\n"
            ]
        ]
    }
]