[
    {
        "name": "Converging Array (Hard Version)",
        "description": "This is the hard version of the problem. The only difference is that in this\nversion \n    1 \n    \u2264 q \n    \u2264 10^5\n. You can make hacks only if both versions\nof the problem are solved. There is a process that takes place on arrays\n\n    a\n and \n    b\n of length \n    n\n and length \n    n-1\n respectively. The\nprocess is an infinite sequence of operations. Each operation is as follows:\nFirst, choose a random integer \n    i\n (\n    1 \n    \u2264 i \n    \u2264 n-1\n). Then,\nsimultaneously set \n    a_i = \n    min\n    (a_i,\n    \n    a_i+a_i+1-b_i/2\n    )\n and \n    a_i+1 =\n    \n    max\n    (a_i+1, \n    a_i+a_i+1+b_i/2\n    )\n without any\nrounding (so values may become non-integer). See notes for an example of an\noperation.It can be proven that array \n    a\n converges, i. e. for each\n\n    i\n there exists a limit \n    a_i\n converges to. Let function \n    F(a,\n    b)\n return the value \n    a_1\n converges to after a process on \n    a\n and\n\n    b\n. You are given array \n    b\n, but not array \n    a\n. However, you are\ngiven a third array \n    c\n. Array \n    a\n is good if it contains only\nintegers and satisfies \n    0 \n    \u2264 a_i \n    \u2264 c_i\n for \n    1 \n    \u2264 i \n    \u2264\n    n\n. Your task is to count the number of good arrays \n    a\n where \n    F(a, b)\n    \n    \u2265 x\n for \n    q\n values of \n    x\n. Since the number of arrays can be\nvery large, print it modulo \n    10^9+7\n. Input The first line contains a\nsingle integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 100\n). The second line contains\n\n    n\n integers \n    c_1, c_2 \n    \u2026, c_n\n (\n    0 \n    \u2264 c_i \n    \u2264 100\n).\nThe third line contains \n    n-1\n integers \n    b_1, b_2, \n    \u2026, b_n-1\n\n(\n    0 \n    \u2264 b_i \n    \u2264 100\n). The fourth line contains a single integer\n\n    q\n (\n    1 \n    \u2264 q \n    \u2264 10^5\n). The fifth line contains \n    q\n space\nseparated integers \n    x_1, x_2, \n    \u2026, x_q\n (\n    -10^5 \n    \u2264 x_i \n    \u2264\n    10^5\n). Output Output \n    q\n integers, where the \n    i\n-th integer is the\nanswer to the \n    i\n-th query, i. e. the number of good arrays \n    a\n where\n\n    F(a, b) \n    \u2265 x_i\n modulo \n    10^9+7\n. Example Input 3 2 3 4 2 1 5 -1 0\n1 -100000 100000 Output 56 28 4 60 0 Note The following explanation assumes\n\n    b = [2, 1]\n and \n    c=[2, 3, 4]\n (as in the sample). Examples of arrays\n\n    a\n that are not good: \n    a = [3, 2, 3]\n is not good because \n    a_1 >\n    c_1\n; \n    a = [0, -1, 3]\n is not good because \n    a_2 < 0\n. One possible\ngood array \n    a\n is \n    [0, 2, 4]\n. We can show that no operation has any\neffect on this array, so \n    F(a, b) = a_1 = 0\n. Another possible good array\n\n    a\n is \n    [0, 1, 4]\n. In a single operation with \n    i = 1\n, we set\n\n    a_1 = \n    min(\n    0+1-2/2, 0)\n and \n    a_2 =\n    \n    max(\n    0+1+2/2, 1)\n. So, after a single operation with \n    i =\n    1\n, \n    a\n becomes equal to \n    [-\n    1/2, \n    3/2, 4]\n. We\ncan show that no operation has any effect on this array, so \n    F(a, b) =\n    -\n    1/2\n.\n\n",
        "cf_contest_id": 1540,
        "cf_index": "C2",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "math"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2 3 4\r\n2 1\r\n5\r\n-1 0 1 -100000 100000\r\n",
                "56\r\n28\r\n4\r\n60\r\n0\r\n"
            ]
        ],
        "private_cases": []
    }
]