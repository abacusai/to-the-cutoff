[
    {
        "name": "Good Sequences",
        "description": "Squirrel Liss is interested in sequences. She also has preferences of\nintegers. She thinks n integers a1, a2, ..., an are good. Now she is\ninterested in good sequences. A sequence x1, x2, ..., xk is called good if it\nsatisfies the following three conditions: The sequence is strictly increasing,\ni.e. xi < xi + 1 for each i (1 \u2264 i \u2264 k - 1). No two adjacent elements are\ncoprime, i.e. gcd(xi, xi + 1) > 1 for each i (1 \u2264 i \u2264 k - 1) (where gcd(p, q)\ndenotes the greatest common divisor of the integers p and q). All elements of\nthe sequence are good integers. Find the length of the longest good sequence.\nInput The input consists of two lines. The first line contains a single\ninteger n (1 \u2264 n \u2264 10^5) \u2014 the number of good integers. The second line\ncontains a single-space separated list of good integers a1, a2, ..., an in\nstrictly increasing order (1 \u2264 ai \u2264 10^5; ai < ai + 1). Output Print a single\ninteger \u2014 the length of the longest good sequence. Examples Input 5 2 3 4 6 9\nOutput 4 Input 9 1 2 3 5 6 7 8 9 10 Output 4 Note In the first example, the\nfollowing sequences are examples of good sequences: [2; 4; 6; 9], [2; 4; 6],\n[3; 9], [6]. The length of the longest good sequence is 4.\n\n",
        "cf_contest_id": 264,
        "cf_index": "B",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n2 3 4 6 9\r\n",
                "4\r\n"
            ],
            [
                "9\r\n1 2 3 5 6 7 8 9 10\r\n",
                "4\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n1 2 4 6\r\n",
                "3\r\n"
            ],
            [
                "7\r\n1 2 3 4 7 9 10\r\n",
                "3\r\n"
            ],
            [
                "1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "8\r\n3 4 5 6 7 8 9 10\r\n",
                "4\r\n"
            ],
            [
                "5\r\n2 3 7 9 10\r\n",
                "2\r\n"
            ],
            [
                "3\r\n1 4 7\r\n",
                "1\r\n"
            ],
            [
                "1\r\n4\r\n",
                "1\r\n"
            ],
            [
                "9\r\n1 2 3 4 5 6 7 9 10\r\n",
                "4\r\n"
            ],
            [
                "49\r\n10 34 58 72 126 166 176 180 198 200 208 228 238 248 302 332 340 344 350 354 380 406 418 428 438 442 482 532 536 544 546 554 596 626 642 682 684 704 714 792 804 820 862 880 906 946 954 966 970\r\n",
                "49\r\n"
            ],
            [
                "44\r\n1 5 37 97 107 147 185 187 195 241 249 295 311 323 341 345 363 391 425 431 473 525 539 541 555 577 595 611 647 695 757 759 775 779 869 877 927 935 963 965 967 969 973 975\r\n",
                "15\r\n"
            ],
            [
                "3\r\n21 67 243\r\n",
                "2\r\n"
            ],
            [
                "3\r\n150 358 382\r\n",
                "3\r\n"
            ],
            [
                "10\r\n13 2187 2197 4567 5200 29873 67866 98798 99999 100000\r\n",
                "6\r\n"
            ],
            [
                "10\r\n1 2 4 8 16 32 33 64 128 256\r\n",
                "8\r\n"
            ],
            [
                "10\r\n2 4 8 67 128 324 789 1296 39877 98383\r\n",
                "7\r\n"
            ],
            [
                "10\r\n2 3 4 5 6 8 9 10 17 92\r\n",
                "6\r\n"
            ],
            [
                "10\r\n2 3 10 40 478 3877 28787 88888 99999 100000\r\n",
                "6\r\n"
            ],
            [
                "10\r\n2 3 45 67 89 101 234 567 890 1234\r\n",
                "5\r\n"
            ],
            [
                "10\r\n2 3 4 5 6 7 8 9 10 11\r\n",
                "5\r\n"
            ],
            [
                "2\r\n5101 10202\r\n",
                "2\r\n"
            ],
            [
                "1\r\n99991\r\n",
                "1\r\n"
            ],
            [
                "2\r\n1009 2018\r\n",
                "2\r\n"
            ],
            [
                "2\r\n601 1202\r\n",
                "2\r\n"
            ],
            [
                "3\r\n3 14 22\r\n",
                "2\r\n"
            ]
        ]
    }
]