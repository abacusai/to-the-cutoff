[
    {
        "name": "Hyperspace Highways",
        "description": "In an unspecified solar system, there are \n    N\n planets. A space government\ncompany has recently hired space contractors to build \n    M\n bidirectional\nHyperspace\u2122 highways, each connecting two different planets. The primary\nobjective, which was to make sure that every planet can be reached from any\nother planet taking only Hyperspace\u2122 highways, has been completely fulfilled.\nUnfortunately, lots of space contractors had friends and cousins in the Space\nBoard of Directors of the company, so the company decided to do much more than\njust connecting all planets. In order to make spending enormous amounts of\nspace money for Hyperspace\u2122 highways look neccessary, they decided to enforce\na strict rule on the Hyperspace\u2122 highway network: whenever there is a way to\ntravel through some planets and return to the starting point without\ntravelling through any planet twice, every pair of planets on the itinerary\nshould be directly connected by a Hyperspace\u2122 highway. In other words, the set\nof planets in every simple cycle induces a complete subgraph. You are\ndesigning a Hyperspace\u2122 navigational app, and the key technical problem you\nare facing is finding the minimal number of Hyperspace\u2122 highways one needs to\nuse to travel from planet \n    A\n to planet \n    B\n. As this problem is too\neasy for Bubble Cup, here is a harder task: your program needs to do it for\n\n    Q\n pairs of planets. Input The first line contains three positive\nintegers \n    N\n (\n    1\n    \u2264 N\n    \u2264 100\n     000\n), \n    M\n (\n    1\n    \u2264\n    M\n    \u2264 500\n     000\n) and \n    Q\n (\n    1\n    \u2264 Q\n    \u2264 200\n     000\n),\ndenoting the number of planets, the number of Hyperspace\u2122 highways, and the\nnumber of queries, respectively. Each of the following M lines contains a\nhighway: highway \n    i\n is given by two integers \n    u_i\n and \n    v_i\n\n(\n    1 \n    \u2264 u_i < v_i \n    \u2264 N\n), meaning the planets \n    u_i\n and\n\n    v_i\n are connected by a Hyperspace\u2122 highway. It is guaranteed that the\nnetwork of planets and Hyperspace\u2122 highways forms a simple connected graph.\nEach of the following \n    Q\n lines contains a query: query \n    j\n is given\nby two integers \n    a_j\n and \n    b_j\n \n    (1 \n    \u2264 a_j < b_j \n    \u2264 N )\n,\nmeaning we are interested in the minimal number of Hyperspace\u2122 highways one\nneeds to take to travel from planet \n    a_j\n to planet \n    b_j\n. Output\nOutput \n    Q\n lines: the \n    j\n-th line of output should contain the minimal\nnumber of Hyperspace\u2122 highways one needs to take to travel from planet\n\n    a_j\n to planet \n    b_j\n. Examples Input 5 7 2 1 2 1 3 1 4 2 3 2 4 3 4 1\n5 1 4 2 5 Output 1 2 Input 8 11 4 1 2 2 3 3 4 4 5 1 3 1 6 3 5 3 7 4 7 5 7 6 8\n1 5 2 4 6 7 3 8 Output 2 2 3 3 Note The graph from the second sample:\n\n",
        "cf_contest_id": 1045,
        "cf_index": "C",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 7 2\r\n1 2\r\n1 3\r\n1 4\r\n2 3\r\n2 4\r\n3 4\r\n1 5\r\n1 4\r\n2 5\r\n",
                "1\r\n2\r\n"
            ],
            [
                "8 11 4\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n1 3\r\n1 6\r\n3 5\r\n3 7\r\n4 7\r\n5 7\r\n6 8\r\n1 5\r\n2 4\r\n6 7\r\n3 8\r\n",
                "2\r\n2\r\n3\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "6 7 9\r\n5 6\r\n2 4\r\n3 4\r\n2 3\r\n2 6\r\n2 5\r\n1 6\r\n2 6\r\n2 4\r\n3 5\r\n2 5\r\n1 2\r\n3 5\r\n2 4\r\n2 5\r\n2 6\r\n",
                "1\r\n1\r\n2\r\n1\r\n2\r\n2\r\n1\r\n1\r\n1\r\n"
            ]
        ]
    }
]