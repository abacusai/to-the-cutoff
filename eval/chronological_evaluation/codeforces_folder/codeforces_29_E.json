[
    {
        "name": "Quarrel",
        "description": "Friends Alex and Bob live in Bertown. In this town there are n crossroads,\nsome of them are connected by bidirectional roads of equal length. Bob lives\nin a house at the crossroads number 1, Alex \u2014 in a house at the crossroads\nnumber n. One day Alex and Bob had a big quarrel, and they refused to see each\nother. It occurred that today Bob needs to get from his house to the\ncrossroads n and Alex needs to get from his house to the crossroads 1. And\nthey don't want to meet at any of the crossroads, but they can meet in the\nmiddle of the street, when passing it in opposite directions. Alex and Bob\nasked you, as their mutual friend, to help them with this difficult task. Find\nfor Alex and Bob such routes with equal number of streets that the guys can\nfollow these routes and never appear at the same crossroads at the same time.\nThey are allowed to meet in the middle of the street when moving toward each\nother (see Sample 1). Among all possible routes, select such that the number\nof streets in it is the least possible. Until both guys reach their\ndestinations, none of them can stay without moving. The guys are moving\nsimultaneously with equal speeds, i.e. it is possible that when one of them\nreaches some of the crossroads, the other one leaves it. For example, Alex can\nmove from crossroad 1 to crossroad 2, while Bob moves from crossroad 2 to\ncrossroad 3. If the required routes don't exist, your program should output\n-1. Input The first line contains two integers n and m (2 \u2264 n \u2264 500, 1 \u2264 m \u2264\n10000) \u2014 the amount of crossroads and the amount of roads. Each of the\nfollowing m lines contains two integers \u2014 the numbers of crossroads connected\nby the road. It is guaranteed that no road connects a crossroads with itself\nand no two crossroads are connected by more than one road. Output If the\nrequired routes don't exist, output -1. Otherwise, the first line should\ncontain integer k \u2014 the length of shortest routes (the length of the route is\nthe amount of roads in it). The next line should contain k + 1 integers \u2014\nBob's route, i.e. the numbers of k + 1 crossroads passed by Bob. The last line\nshould contain Alex's route in the same format. If there are several optimal\nsolutions, output any of them. Examples Input 2 1 1 2 Output 1 1 2 2 1 Input 7\n5 1 2 2 7 7 6 2 3 3 4 Output -1 Input 7 6 1 2 2 7 7 6 2 3 3 4 1 5 Output 6 1 2\n3 4 3 2 7 7 6 7 2 1 5 1\n\n",
        "cf_contest_id": 29,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "graphs",
            "shortest paths"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 1\r\n1 2\r\n",
                "1\r\n1 2 \r\n2 1 \r\n"
            ],
            [
                "7 5\r\n1 2\r\n2 7\r\n7 6\r\n2 3\r\n3 4\r\n",
                "-1\r\n"
            ],
            [
                "7 6\r\n1 2\r\n2 7\r\n7 6\r\n2 3\r\n3 4\r\n1 5\r\n",
                "6\r\n1 5 1 2 7 6 7 \r\n7 2 3 4 3 2 1 \r\n"
            ]
        ],
        "private_cases": [
            [
                "6 10\r\n3 6\r\n3 5\r\n1 3\r\n2 6\r\n5 4\r\n6 4\r\n6 5\r\n5 1\r\n2 3\r\n1 2\r\n",
                "2\r\n1 2 6 \r\n6 3 1 \r\n"
            ],
            [
                "5 7\r\n5 2\r\n1 3\r\n4 2\r\n3 4\r\n5 3\r\n2 3\r\n4 1\r\n",
                "3\r\n1 4 2 5 \r\n5 2 3 1 \r\n"
            ],
            [
                "10 7\r\n3 4\r\n8 6\r\n4 8\r\n3 1\r\n9 10\r\n10 6\r\n9 4\r\n",
                "5\r\n1 3 4 8 6 10 \r\n10 6 8 4 3 1 \r\n"
            ],
            [
                "10 16\r\n9 8\r\n1 2\r\n9 5\r\n5 4\r\n9 2\r\n3 2\r\n1 6\r\n5 10\r\n7 2\r\n8 2\r\n3 7\r\n4 9\r\n5 7\r\n10 3\r\n10 9\r\n7 8\r\n",
                "3\r\n1 2 3 10 \r\n10 9 2 1 \r\n"
            ]
        ]
    }
]