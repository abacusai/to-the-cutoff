[
    {
        "name": "A Leapfrog in the Array",
        "description": "Dima is a beginner programmer. During his working process, he regularly has to\nrepeat the following operation again and again: to remove every second element\nfrom the array. One day he has been bored with easy solutions of this problem,\nand he has come up with the following extravagant algorithm. Let's consider\nthat initially array contains n numbers from 1 to n and the number i is\nlocated in the cell with the index 2i - 1 (Indices are numbered starting from\none) and other cells of the array are empty. Each step Dima selects a non-\nempty array cell with the maximum index and moves the number written in it to\nthe nearest empty cell to the left of the selected one. The process continues\nuntil all n numbers will appear in the first n cells of the array. For example\nif n = 4, the array is changing as follows: You have to write a program that\nallows you to determine what number will be in the cell with index x (1 \u2264 x \u2264\nn) after Dima's algorithm finishes. Input The first line contains two integers\nn and q (1 \u2264 n \u2264 10^18, 1 \u2264 q \u2264 200 000), the number of elements in the array\nand the number of queries for which it is needed to find the answer. Next q\nlines contain integers xi (1 \u2264 xi \u2264 n), the indices of cells for which it is\nnecessary to output their content after Dima's algorithm finishes. Output For\neach of q queries output one integer number, the value that will appear in the\ncorresponding array cell after Dima's algorithm finishes. Examples Input 4 3 2\n3 4 Output 3 2 4 Input 13 4 10 5 4 8 Output 13 3 8 9 Note The first example is\nshown in the picture. In the second example the final array is [1, 12, 2, 8,\n3, 11, 4, 9, 5, 13, 6, 10, 7].\n\n",
        "cf_contest_id": 949,
        "cf_index": "B",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4 3\r\n2\r\n3\r\n4\r\n",
                "3\r\n2\r\n4\r\n"
            ],
            [
                "13 4\r\n10\r\n5\r\n4\r\n8\r\n",
                "13\r\n3\r\n8\r\n9\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 2\r\n1\r\n2\r\n",
                "1\r\n2\r\n"
            ],
            [
                "1 1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "3 3\r\n3\r\n2\r\n1\r\n",
                "2\r\n3\r\n1\r\n"
            ],
            [
                "12 12\r\n9\r\n11\r\n5\r\n3\r\n7\r\n2\r\n8\r\n6\r\n4\r\n10\r\n12\r\n1\r\n",
                "5\r\n6\r\n3\r\n2\r\n4\r\n7\r\n12\r\n8\r\n10\r\n9\r\n11\r\n1\r\n"
            ]
        ]
    }
]