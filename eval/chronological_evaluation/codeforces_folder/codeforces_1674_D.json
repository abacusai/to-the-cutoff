[
    {
        "name": "A-B-C Sort",
        "description": "You are given three arrays \n    a\n, \n    b\n and \n    c\n. Initially, array\n\n    a\n consists of \n    n\n elements, arrays \n    b\n and \n    c\n are empty.\nYou are performing the following algorithm that consists of two steps: Step\n\n    1\n: while \n    a\n is not empty, you take the last element from \n    a\n\nand move it in the middle of array \n    b\n. If \n    b\n currently has odd\nlength, you can choose: place the element from \n    a\n to the left or to the\nright of the middle element of \n    b\n. As a result, \n    a\n becomes empty and\n\n    b\n consists of \n    n\n elements. Step \n    2\n: while \n    b\n is not\nempty, you take the middle element from \n    b\n and move it to the end of\narray \n    c\n. If \n    b\n currently has even length, you can choose which of\ntwo middle elements to take. As a result, \n    b\n becomes empty and \n    c\n\nnow consists of \n    n\n elements. Refer to the Note section for examples.Can\nyou make array \n    c\n sorted in non-decreasing order? Input The first line\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 2 \n    \u00b7 10^4\n) \u2014 the\nnumber of test cases. Next \n    t\n cases follow. The first line of each test\ncase contains the single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7\n    10^5\n) \u2014 the length of array \n    a\n. The second line of each test case\ncontains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264\n    10^6\n) \u2014 the array \n    a\n itself. It's guaranteed that the sum of \n    n\n\ndoesn't exceed \n    2 \n    \u00b7 10^5\n. Output For each test, print YES (case-\ninsensitive), if you can make array \n    c\n sorted in non-decreasing order.\nOtherwise, print NO (case-insensitive). Example Input 3 4 3 1 5 3 3 3 2 1 1\n7331 Output YES NO YES Note In the first test case, we can do the following\nfor \n    a = [3, 1, 5, 3]\n: Step \n    1\n: \n    a\n\n    [3, 1, 5,\n    3]\n\n    \u21d2\n\n    [3, 1, 5]\n\n    \u21d2\n\n    [3,\n    1]\n\n    \u21d2\n\n    [3]\n\n    \u21d2\n\n    []\n\n    b\n\n    []\n\n    [\n    3]\n\n    [3,\n    \n    5]\n\n    [3, \n    1, 5]\n\n    [3, \n    3, 1,\n    5]\n Step \n    2\n: \n    b\n\n    [3, 3, \n    1,\n    5]\n\n    \u21d2\n\n    [3, \n    3,\n    5]\n\n    \u21d2\n\n    [\n    3,\n    5]\n\n    \u21d2\n\n    [\n    5]\n\n    \u21d2\n\n    []\n\n    c\n\n    []\n\n    [1]\n\n    [1,\n    3]\n\n    [1, 3, 3]\n\n    [1, 3, 3, 5]\n As a result, array \n    c = [1, 3, 3,\n    5]\n and it's sorted.\n\n",
        "cf_contest_id": 1674,
        "cf_index": "D",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n4\r\n3 1 5 3\r\n3\r\n3 2 1\r\n1\r\n7331\r\n",
                "YES\r\nNO\r\nYES\r\n"
            ]
        ],
        "private_cases": []
    }
]