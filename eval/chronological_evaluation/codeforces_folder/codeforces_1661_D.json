[
    {
        "name": "Progressions Covering",
        "description": "You are given two arrays: an array \n    a\n consisting of \n    n\n zeros and an\narray \n    b\n consisting of \n    n\n integers. You can apply the following\noperation to the array \n    a\n an arbitrary number of times: choose some\nsubsegment of \n    a\n of length \n    k\n and add the arithmetic progression\n\n    1, 2, \n    \u2026, k\n to this subsegment \u2014 i. e. add \n    1\n to the first\nelement of the subsegment, \n    2\n to the second element, and so on. The\nchosen subsegment should be inside the borders of the array \n    a\n (i.e., if\nthe left border of the chosen subsegment is \n    l\n, then the condition \n    1\n    \n    \u2264 l \n    \u2264 l + k - 1 \n    \u2264 n\n should be satisfied). Note that the\nprogression added is always \n    1, 2, \n    \u2026, k\n but not the \n    k, k - 1,\n    \n    \u2026, 1\n or anything else (i.e., the leftmost element of the subsegment\nalways increases by \n    1\n, the second element always increases by \n    2\n\nand so on). Your task is to find the minimum possible number of operations\nrequired to satisfy the condition \n    a_i \n    \u2265 b_i\n for each \n    i\n from\n\n    1\n to \n    n\n. Note that the condition \n    a_i \n    \u2265 b_i\n should be\nsatisfied for all elements at once. Input The first line of the input contains\ntwo integers \n    n\n and \n    k\n (\n    1 \n    \u2264 k \n    \u2264 n \n    \u2264 3 \n    \u00b7\n    10^5\n) \u2014 the number of elements in both arrays and the length of the\nsubsegment, respectively. The second line of the input contains \n    n\n\nintegers \n    b_1, b_2, \n    \u2026, b_n\n (\n    1 \n    \u2264 b_i \n    \u2264 10^12\n),\nwhere \n    b_i\n is the \n    i\n-th element of the array \n    b\n. Output Print\none integer \u2014 the minimum possible number of operations required to satisfy\nthe condition \n    a_i \n    \u2265 b_i\n for each \n    i\n from \n    1\n to \n    n\n.\nExamples Input 3 3 5 4 6 Output 5 Input 6 3 1 2 3 2 2 3 Output 3 Input 6 3 1 2\n4 1 2 3 Output 3 Input 7 3 50 17 81 25 42 39 96 Output 92 Note Consider the\nfirst example. In this test, we don't really have any choice, so we need to\nadd at least five progressions to make the first element equals \n    5\n. The\narray \n    a\n becomes \n    [5, 10, 15]\n. Consider the second example. In this\ntest, let's add one progression on the segment \n    [1; 3]\n and two\nprogressions on the segment \n    [4; 6]\n. Then, the array \n    a\n becomes\n\n    [1, 2, 3, 2, 4, 6]\n.\n\n",
        "cf_contest_id": 1661,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\n5 4 6\r\n",
                "5"
            ],
            [
                "6 3\r\n1 2 3 2 2 3\r\n",
                "3"
            ],
            [
                "6 3\r\n1 2 4 1 2 3\r\n",
                "3"
            ],
            [
                "7 3\r\n50 17 81 25 42 39 96\r\n",
                "92"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1\r\n",
                "1"
            ],
            [
                "1 1\r\n1000000000000\r\n",
                "1000000000000"
            ],
            [
                "3 3\r\n14159 26535 89793\r\n",
                "29931"
            ],
            [
                "7 4\r\n1 10000 1 1 1 1 10000\r\n",
                "7500"
            ],
            [
                "17 10\r\n465 868 29 633 291 357 62 929 22 124 182 995 903 75 71 924 416\r\n",
                "611"
            ]
        ]
    }
]