[
    {
        "name": "Outermost Maximums",
        "description": "Yeri has an array of \n    n + 2\n non-negative integers : \n    a_0, a_1, ...,\n    a_n, a_n + 1\n. We know that \n    a_0 = a_n + 1 = 0\n. She wants to make\nall the elements of \n    a\n equal to zero in the minimum number of operations.\nIn one operation she can do one of the following: Choose the leftmost maximum\nelement and change it to the maximum of the elements on its left. Choose the\nrightmost maximum element and change it to the maximum of the elements on its\nright.Help her find the minimum number of operations needed to make all\nelements of \n    a\n equal to zero. Input The first line contains a single\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n). The second line\ncontains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264\n    n\n). Output Print a single integer \u2014 the minimum number of operations needed\nto make all elements of \n    a\n equal to zero. Examples Input 6 1 4 2 4 0 2\nOutput 7 Input 5 1 3 5 4 2 Output 9 Input 4 0 0 0 0 Output 0 Note In the first\nsample, you get \n    \u27e8 1, \n    1, 2, 4, 0, 2 \n    \u27e9\n by\nperforming the first operation and \n    \u27e8 1, 4, 2, \n    2, 0, 2\n    \n    \u27e9\n by performing the second operation. One way to achieve our goal\nis shown below. (The underlines show the last change.) \n    \u27e8 1, 4, 2,\n    4, 0, 2 \n    \u27e9\n    \u2192\n    \u27e8 1, 4, 2, \n    2, 0, 2 \n    \u27e9\n    \u2192\n    \u27e8 1, \n    1, 2, 2, 0, 2 \n    \u27e9\n    \u2192\n    \u27e8 1, 1,\n    2, 2, 0, \n    0\n    \u27e9\n    \u2192\n    \u27e8 1, 1, 2, \n    0,\n    0, 0 \n    \u27e9\n    \u2192\n    \u27e8 1, 1, \n    0, 0, 0, 0 \n    \u27e9\n    \u2192\n    \u27e8\n    0, 1, 0, 0, 0, 0 \n    \u27e9\n    \u2192\n    \u27e8 0,\n    \n    0, 0, 0, 0, 0 \n    \u27e9\n In the third sample each element is\nalready equal to zero so no operations are needed.\n\n",
        "cf_contest_id": 1693,
        "cf_index": "E",
        "cf_rating": 3400,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n1 4 2 4 0 2\r\n",
                "7\r\n"
            ],
            [
                "5\r\n1 3 5 4 2\r\n",
                "9\r\n"
            ],
            [
                "4\r\n0 0 0 0\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "8\r\n1 8 1 1 5 4 2 4\r\n",
                "11\r\n"
            ],
            [
                "7\r\n4 7 4 3 6 4 5\r\n",
                "9\r\n"
            ],
            [
                "10\r\n1 4 6 6 5 3 7 5 1 10\r\n",
                "21\r\n"
            ],
            [
                "27\r\n4 20 9 19 25 12 3 19 23 3 17 10 12 27 9 0 8 27 2 19 4 12 20 22 23 21 22\r\n",
                "78\r\n"
            ],
            [
                "85\r\n72 20 51 56 34 2 17 44 58 38 31 48 43 48 43 79 31 0 18 73 9 43 61 50 4 5 77 6 41 23 12 63 16 43 41 63 51 41 36 54 38 56 14 13 12 26 79 67 51 57 17 37 36 54 82 35 18 12 29 10 58 58 81 38 37 44 85 83 66 41 79 26 61 23 68 48 57 44 41 45 66 10 81 36 17\r\n",
                "649\r\n"
            ]
        ]
    }
]