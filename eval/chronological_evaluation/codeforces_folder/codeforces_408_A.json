[
    {
        "name": "Line to Cashier",
        "description": "Little Vasya went to the supermarket to get some groceries. He walked about\nthe supermarket for a long time and got a basket full of products. Now he\nneeds to choose the cashier to pay for the products. There are n cashiers at\nthe exit from the supermarket. At the moment the queue for the i-th cashier\nalready has ki people. The j-th person standing in the queue to the i-th\ncashier has mi, j items in the basket. Vasya knows that: the cashier needs 5\nseconds to scan one item; after the cashier scans each item of some customer,\nhe needs 15 seconds to take the customer's money and give him the change. Of\ncourse, Vasya wants to select a queue so that he can leave the supermarket as\nsoon as possible. Help him write a program that displays the minimum number of\nseconds after which Vasya can get to one of the cashiers. Input The first line\ncontains integer n (1 \u2264 n \u2264 100) \u2014 the number of cashes in the shop. The\nsecond line contains n space-separated integers: k1, k2, ..., kn (1 \u2264 ki \u2264\n100), where ki is the number of people in the queue to the i-th cashier. The\ni-th of the next n lines contains ki space-separated integers: mi, 1, mi, 2,\n..., mi, ki (1 \u2264 mi, j \u2264 100) \u2014 the number of products the j-th person in the\nqueue for the i-th cash has. Output Print a single integer \u2014 the minimum\nnumber of seconds Vasya needs to get to the cashier. Examples Input 1 1 1\nOutput 20 Input 4 1 4 3 2 100 1 2 2 3 1 9 1 7 8 Output 100 Note In the second\ntest sample, if Vasya goes to the first queue, he gets to the cashier in 100\u00b75\n+ 15 = 515 seconds. But if he chooses the second queue, he will need 1\u00b75 + 2\u00b75\n+ 2\u00b75 + 3\u00b75 + 4\u00b715 = 100 seconds. He will need 1\u00b75 + 9\u00b75 + 1\u00b75 + 3\u00b715 = 100\nseconds for the third one and 7\u00b75 + 8\u00b75 + 2\u00b715 = 105 seconds for the fourth\none. Thus, Vasya gets to the cashier quicker if he chooses the second or the\nthird queue.\n\n",
        "cf_contest_id": 408,
        "cf_index": "A",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n1\r\n1\r\n",
                "20\r\n"
            ],
            [
                "4\r\n1 4 3 2\r\n100\r\n1 2 2 3\r\n1 9 1\r\n7 8\r\n",
                "100\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n5 4 5 5\r\n3 1 3 1 2\r\n3 1 1 3\r\n1 1 1 2 2\r\n2 2 1 1 3\r\n",
                "100\r\n"
            ],
            [
                "5\r\n5 3 6 6 4\r\n7 5 3 3 9\r\n6 8 2\r\n1 10 8 5 9 2\r\n9 7 8 5 9 10\r\n9 8 3 3\r\n",
                "125\r\n"
            ],
            [
                "5\r\n10 10 10 10 10\r\n6 7 8 6 8 5 9 8 10 5\r\n9 6 9 8 7 8 8 10 8 5\r\n8 7 7 8 7 5 6 8 9 5\r\n6 5 10 5 5 10 7 8 5 5\r\n10 9 8 7 6 9 7 9 6 5\r\n",
                "480\r\n"
            ],
            [
                "10\r\n9 10 10 10 9 5 9 7 8 7\r\n11 6 10 4 4 15 7 15 5\r\n3 9 11 12 11 1 13 13 1 5\r\n6 15 9 12 3 2 8 12 11 10\r\n7 1 1 6 10 2 6 1 14 2\r\n8 14 2 3 6 1 14 1 12\r\n6 10 9 3 5\r\n13 12 12 7 13 4 4 8 10\r\n5 6 4 3 14 9 13\r\n8 12 1 5 7 4 13 1\r\n1 9 5 3 5 1 4\r\n",
                "240\r\n"
            ],
            [
                "10\r\n5 5 5 5 5 5 5 5 5 5\r\n5 5 4 5 4\r\n6 5 7 7 6\r\n5 4 4 5 5\r\n4 4 5 5 5\r\n7 6 4 5 7\r\n4 6 5 4 5\r\n6 6 7 6 6\r\n4 5 4 4 7\r\n7 5 4 4 5\r\n6 6 7 4 4\r\n",
                "190\r\n"
            ],
            [
                "1\r\n1\r\n100\r\n",
                "515\r\n"
            ],
            [
                "1\r\n90\r\n90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90\r\n",
                "41850\r\n"
            ]
        ]
    }
]