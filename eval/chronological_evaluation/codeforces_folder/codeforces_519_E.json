[
    {
        "name": "A and B and Lecture Rooms",
        "description": "A and B are preparing themselves for programming contests. The University\nwhere A and B study is a set of rooms connected by corridors. Overall, the\nUniversity has n rooms connected by n - 1 corridors so that you can get from\nany room to any other one by moving along the corridors. The rooms are\nnumbered from 1 to n. Every day \u0410 and B write contests in some rooms of their\nuniversity, and after each contest they gather together in the same room and\ndiscuss problems. A and B want the distance from the rooms where problems are\ndiscussed to the rooms where contests are written to be equal. The distance\nbetween two rooms is the number of edges on the shortest path between them. As\nthey write contests in new rooms every day, they asked you to help them find\nthe number of possible rooms to discuss problems for each of the following m\ndays. Input The first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the number of\nrooms in the University. The next n - 1 lines describe the corridors. The i-th\nof these lines (1 \u2264 i \u2264 n - 1) contains two integers ai and bi (1 \u2264 ai, bi \u2264\nn), showing that the i-th corridor connects rooms ai and bi. The next line\ncontains integer m (1 \u2264 m \u2264 10^5) \u2014 the number of queries. Next m lines\ndescribe the queries. The j-th of these lines (1 \u2264 j \u2264 m) contains two\nintegers xj and yj (1 \u2264 xj, yj \u2264 n) that means that on the j-th day A will\nwrite the contest in the room xj, B will write in the room yj. Output In the\ni-th (1 \u2264 i \u2264 m) line print the number of rooms that are equidistant from the\nrooms where A and B write contest on the i-th day. Examples Input 4 1 2 1 3 2\n4 1 2 3 Output 1 Input 4 1 2 2 3 2 4 2 1 2 1 3 Output 0 2 Note in the first\nsample there is only one room at the same distance from rooms number 2 and 3 \u2014\nroom number 1.\n\n",
        "cf_contest_id": 519,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "dp",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 2\r\n1 3\r\n2 4\r\n1\r\n2 3\r\n",
                "1\r\n"
            ],
            [
                "4\r\n1 2\r\n2 3\r\n2 4\r\n2\r\n1 2\r\n1 3\r\n",
                "0\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "15\r\n1 2\r\n1 3\r\n1 4\r\n2 5\r\n2 6\r\n2 7\r\n5 8\r\n6 9\r\n9 14\r\n14 15\r\n7 10\r\n4 13\r\n3 11\r\n3 12\r\n6\r\n10 15\r\n13 12\r\n2 15\r\n8 4\r\n15 12\r\n6 13\r\n",
                "1\r\n10\r\n1\r\n7\r\n0\r\n4\r\n"
            ],
            [
                "5\r\n1 2\r\n1 3\r\n2 5\r\n2 4\r\n1\r\n5 4\r\n",
                "3\r\n"
            ],
            [
                "8\r\n1 2\r\n2 3\r\n2 4\r\n2 5\r\n5 6\r\n6 7\r\n6 8\r\n6\r\n3 5\r\n3 6\r\n3 8\r\n5 8\r\n7 3\r\n5 7\r\n",
                "3\r\n0\r\n1\r\n2\r\n1\r\n2\r\n"
            ],
            [
                "8\r\n1 2\r\n2 3\r\n2 4\r\n2 5\r\n5 6\r\n6 7\r\n6 8\r\n7\r\n3 5\r\n3 6\r\n3 8\r\n5 8\r\n7 3\r\n5 7\r\n5 5\r\n",
                "3\r\n0\r\n1\r\n2\r\n1\r\n2\r\n8\r\n"
            ]
        ]
    }
]