[
    {
        "name": "Crazy Robot",
        "description": "There is a grid, consisting of \n    n\n rows and \n    m\n columns. Each cell of\nthe grid is either free or blocked. One of the free cells contains a lab. All\nthe cells beyond the borders of the grid are also blocked. A crazy robot has\nescaped from this lab. It is currently in some free cell of the grid. You can\nsend one of the following commands to the robot: \"move right\", \"move down\",\n\"move left\" or \"move up\". Each command means moving to a neighbouring cell in\nthe corresponding direction. However, as the robot is crazy, it will do\nanything except following the command. Upon receiving a command, it will\nchoose a direction such that it differs from the one in command and the cell\nin that direction is not blocked. If there is such a direction, then it will\nmove to a neighbouring cell in that direction. Otherwise, it will do nothing.\nWe want to get the robot to the lab to get it fixed. For each free cell,\ndetermine if the robot can be forced to reach the lab starting in this cell.\nThat is, after each step of the robot a command can be sent to a robot such\nthat no matter what different directions the robot chooses, it will end up in\na lab. Input The first line contains a single integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 1000\n) \u2014 the number of testcases. The first line of each testcase\ncontains two integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 10^6\n; \n    n\n    \n    \u00b7 m \n    \u2264 10^6\n) \u2014 the number of rows and the number of columns in the\ngrid. The \n    i\n-th of the next \n    n\n lines provides a description of the\n\n    i\n-th row of the grid. It consists of \n    m\n elements of one of three\ntypes: '.' \u2014 the cell is free; '#' \u2014 the cell is blocked; 'L' \u2014 the cell\ncontains a lab. The grid contains exactly one lab. The sum of \n    n \n    \u00b7\n    m\n over all testcases doesn't exceed \n    10^6\n. Output For each testcase\nfind the free cells that the robot can be forced to reach the lab from. Given\nthe grid, replace the free cells (marked with a dot) with a plus sign ('+')\nfor the cells that the robot can be forced to reach the lab from. Print the\nresulting grid. Example Input 4 3 3 ... .L. ... 4 5 #.... ..##L ...#. ..... 1\n1 L 1 9 ....L..#. Output ... .L. ... #++++ ..##L ...#+ ...++ L ++++L++#. Note\nIn the first testcase there is no free cell that the robot can be forced to\nreach the lab from. Consider a corner cell. Given any direction, it will move\nto a neighbouring border grid that's not a corner. Now consider a non-corner\nfree cell. No matter what direction you send to the robot, it can choose a\ndifferent direction such that it ends up in a corner. In the last testcase,\nyou can keep sending the command that is opposite to the direction to the lab\nand the robot will have no choice other than move towards the lab.\n\n",
        "cf_contest_id": 1613,
        "cf_index": "E",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graphs"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4\r\n3 3\r\n...\r\n.L.\r\n...\r\n4 5\r\n#....\r\n..##L\r\n...#.\r\n.....\r\n1 1\r\nL\r\n1 9\r\n....L..#.\r\n",
                "...\r\n.L.\r\n...\r\n#++++\r\n..##L\r\n...#+\r\n...++\r\nL\r\n++++L++#.\r\n"
            ]
        ],
        "private_cases": []
    }
]