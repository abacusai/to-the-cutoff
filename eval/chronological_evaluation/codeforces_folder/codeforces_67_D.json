[
    {
        "name": "Optical Experiment",
        "description": "Professor Phunsuk Wangdu has performed some experiments on rays. The setup for\nn rays is as follows. There is a rectangular box having exactly n holes on the\nopposite faces. All rays enter from the holes of the first side and exit from\nthe holes of the other side of the box. Exactly one ray can enter or exit from\neach hole. The holes are in a straight line. Professor Wangdu is showing his\nexperiment to his students. He shows that there are cases, when all the rays\nare intersected by every other ray. A curious student asked the professor:\n\"Sir, there are some groups of rays such that all rays in that group intersect\nevery other ray in that group. Can we determine the number of rays in the\nlargest of such groups?\". Professor Wangdu now is in trouble and knowing your\nintellect he asks you to help him. Input The first line contains n (1 \u2264 n \u2264\n10^6), the number of rays. The second line contains n distinct integers. The\ni-th integer xi (1 \u2264 xi \u2264 n) shows that the xi-th ray enters from the i-th\nhole. Similarly, third line contains n distinct integers. The i-th integer yi\n(1 \u2264 yi \u2264 n) shows that the yi-th ray exits from the i-th hole. All rays are\nnumbered from 1 to n. Output Output contains the only integer which is the\nnumber of rays in the largest group of rays all of which intersect each other.\nExamples Input 5 1 4 5 2 3 3 4 2 1 5 Output 3 Input 3 3 1 2 2 3 1 Output 2\nNote For the first test case, the figure is shown above. The output of the\nfirst test case is 3, since the rays number 1, 4 and 3 are the ones which are\nintersected by each other one i.e. 1 is intersected by 4 and 3, 3 is\nintersected by 4 and 1, and 4 is intersected by 1 and 3. Hence every ray in\nthis group is intersected by each other one. There does not exist any group\ncontaining more than 3 rays satisfying the above-mentioned constraint.\n\n",
        "cf_contest_id": 67,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dp"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 4 5 2 3\r\n3 4 2 1 5\r\n",
                "3\r\n"
            ],
            [
                "3\r\n3 1 2\r\n2 3 1\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n1 2 4 5 3\r\n1 5 4 2 3\r\n",
                "3\r\n"
            ],
            [
                "3\r\n3 1 2\r\n1 3 2\r\n",
                "2\r\n"
            ],
            [
                "7\r\n1 5 2 7 4 3 6\r\n6 3 1 2 5 4 7\r\n",
                "4\r\n"
            ],
            [
                "4\r\n1 4 2 3\r\n2 3 1 4\r\n",
                "2\r\n"
            ],
            [
                "4\r\n2 4 1 3\r\n2 3 1 4\r\n",
                "3\r\n"
            ],
            [
                "10\r\n4 7 8 1 2 3 5 9 6 10\r\n6 3 8 7 10 2 1 4 5 9\r\n",
                "5\r\n"
            ],
            [
                "7\r\n1 5 7 2 4 3 6\r\n3 2 5 7 6 1 4\r\n",
                "4\r\n"
            ],
            [
                "9\r\n1 7 4 9 3 8 2 5 6\r\n8 4 7 1 3 2 9 6 5\r\n",
                "4\r\n"
            ],
            [
                "5\r\n1 4 5 2 3\r\n3 4 2 1 5\r\n",
                "3\r\n"
            ],
            [
                "3\r\n1 2 3\r\n2 3 1\r\n",
                "2\r\n"
            ],
            [
                "2\r\n1 2\r\n1 2\r\n",
                "1\r\n"
            ],
            [
                "2\r\n1 2\r\n2 1\r\n",
                "2\r\n"
            ],
            [
                "3\r\n1 2 3\r\n2 1 3\r\n",
                "2\r\n"
            ],
            [
                "3\r\n1 2 3\r\n1 3 2\r\n",
                "2\r\n"
            ],
            [
                "3\r\n1 2 3\r\n3 2 1\r\n",
                "3\r\n"
            ],
            [
                "3\r\n1 2 3\r\n1 2 3\r\n",
                "1\r\n"
            ],
            [
                "1\r\n1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "5\r\n1 2 5 3 4\r\n3 5 4 2 1\r\n",
                "4\r\n"
            ],
            [
                "5\r\n5 3 2 4 1\r\n2 4 5 1 3\r\n",
                "2\r\n"
            ],
            [
                "5\r\n1 2 4 5 3\r\n1 2 5 4 3\r\n",
                "2\r\n"
            ],
            [
                "5\r\n1 2 3 4 5\r\n1 2 3 4 5\r\n",
                "1\r\n"
            ],
            [
                "5\r\n5 4 3 2 1\r\n1 2 3 4 5\r\n",
                "5\r\n"
            ],
            [
                "5\r\n1 3 5 4 2\r\n1 4 5 3 2\r\n",
                "3\r\n"
            ],
            [
                "5\r\n1 5 2 4 3\r\n4 3 2 5 1\r\n",
                "4\r\n"
            ],
            [
                "25\r\n21 19 25 9 24 23 20 18 16 22 17 7 4 15 13 11 2 3 10 12 14 6 8 5 1\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\r\n",
                "13\r\n"
            ],
            [
                "30\r\n30 29 28 27 26 25 19 24 9 23 21 20 18 16 22 17 7 4 15 13 11 2 3 10 12 14 6 8 5 1\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\r\n",
                "19\r\n"
            ],
            [
                "40\r\n40 27 29 39 30 34 28 26 25 38 19 32 24 9 37 23 21 20 18 33 36 16 22 35 17 7 4 15 31 13 11 2 3 10 12 14 6 8 5 1\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\r\n",
                "19\r\n"
            ],
            [
                "1\r\n1\r\n1\r\n",
                "1\r\n"
            ]
        ]
    }
]