[
    {
        "name": "Nastya Is Buying Lunch",
        "description": "At the big break Nastya came to the school dining room. There are \n    n\n\npupils in the school, numbered from \n    1\n to \n    n\n. Unfortunately, Nastya\ncame pretty late, so that all pupils had already stood in the queue, i.e.\nNastya took the last place in the queue. Of course, it's a little bit sad for\nNastya, but she is not going to despond because some pupils in the queue can\nagree to change places with some other pupils. Formally, there are some pairs\n\n    u\n, \n    v\n such that if the pupil with number \n    u\n stands directly in\nfront of the pupil with number \n    v\n, Nastya can ask them and they will\nchange places. Nastya asks you to find the maximal number of places in queue\nshe can move forward. Input The first line contains two integers \n    n\n and\n\n    m\n (\n    1 \n    \u2264 n \n    \u2264 3 \n    \u00b7 10^5\n, \n    0 \n    \u2264 m \n    \u2264 5\n    \n    \u00b7 10^5\n) \u2014 the number of pupils in the queue and number of pairs of\npupils such that the first one agrees to change places with the second one if\nthe first is directly in front of the second. The second line contains \n    n\n\nintegers \n    p_1\n, \n    p_2\n, ..., \n    p_n\n \u2014 the initial arrangement of\npupils in the queue, from the queue start to its end (\n    1 \n    \u2264 p_i \n    \u2264\n    n\n, \n    p\n is a permutation of integers from \n    1\n to \n    n\n). In other\nwords, \n    p_i\n is the number of the pupil who stands on the \n    i\n-th\nposition in the queue. The \n    i\n-th of the following \n    m\n lines contains\ntwo integers \n    u_i\n, \n    v_i\n (\n    1 \n    \u2264 u_i, v_i \n    \u2264 n, u_i \n    \u2260\n    v_i\n), denoting that the pupil with number \n    u_i\n agrees to change places\nwith the pupil with number \n    v_i\n if \n    u_i\n is directly in front of\n\n    v_i\n. It is guaranteed that if \n    i \n    \u2260 j\n, than \n    v_i \n    \u2260\n    v_j\n or \n    u_i \n    \u2260 u_j\n. Note that it is possible that in some pairs\nboth pupils agree to change places with each other. Nastya is the last person\nin the queue, i.e. the pupil with number \n    p_n\n. Output Print a single\ninteger \u2014 the number of places in queue she can move forward. Examples Input 2\n1 1 2 1 2 Output 1 Input 3 3 3 1 2 1 2 3 1 3 2 Output 2 Input 5 2 3 1 5 4 2 5\n2 5 4 Output 1 Note In the first example Nastya can just change places with\nthe first pupil in the queue. Optimal sequence of changes in the second\nexample is change places for pupils with numbers \n    1\n and \n    3\n. change\nplaces for pupils with numbers \n    3\n and \n    2\n. change places for pupils\nwith numbers \n    1\n and \n    2\n. The queue looks like \n    [3, 1, 2]\n, then\n\n    [1, 3, 2]\n, then \n    [1, 2, 3]\n, and finally \n    [2, 1, 3]\n after these\noperations.\n\n",
        "cf_contest_id": 1136,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 1\r\n1 2\r\n1 2\r\n",
                "1\r\n"
            ],
            [
                "3 3\r\n3 1 2\r\n1 2\r\n3 1\r\n3 2\r\n",
                "2\r\n"
            ],
            [
                "5 2\r\n3 1 5 4 2\r\n5 2\r\n5 4\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 11\r\n5 1 3 4 2\r\n5 1\r\n5 2\r\n1 5\r\n2 1\r\n1 2\r\n1 4\r\n2 5\r\n1 3\r\n5 4\r\n5 3\r\n3 1\r\n",
                "2\r\n"
            ],
            [
                "10 23\r\n6 9 8 10 4 3 7 1 5 2\r\n7 2\r\n3 2\r\n2 4\r\n2 3\r\n7 5\r\n6 4\r\n10 7\r\n7 1\r\n6 8\r\n6 2\r\n8 10\r\n3 5\r\n3 1\r\n6 1\r\n10 2\r\n8 2\r\n10 1\r\n7 4\r\n10 5\r\n6 9\r\n6 5\r\n9 1\r\n10 4\r\n",
                "4\r\n"
            ],
            [
                "2 0\r\n1 2\r\n",
                "0\r\n"
            ],
            [
                "1 0\r\n1\r\n",
                "0\r\n"
            ],
            [
                "10 20\r\n2 1 3 9 5 4 7 8 6 10\r\n4 7\r\n6 4\r\n1 4\r\n2 8\r\n1 6\r\n7 9\r\n1 9\r\n5 4\r\n1 3\r\n10 6\r\n8 6\r\n5 6\r\n7 6\r\n8 10\r\n5 10\r\n7 10\r\n2 7\r\n1 10\r\n10 3\r\n6 9\r\n",
                "4\r\n"
            ],
            [
                "20 47\r\n4 6 11 15 9 17 3 1 19 14 12 8 2 5 7 20 16 18 13 10\r\n18 10\r\n6 3\r\n15 17\r\n18 7\r\n6 5\r\n19 10\r\n6 7\r\n11 3\r\n1 10\r\n17 3\r\n6 14\r\n7 10\r\n19 5\r\n12 10\r\n1 8\r\n6 11\r\n18 5\r\n6 8\r\n12 8\r\n1 5\r\n20 10\r\n16 8\r\n6 10\r\n20 19\r\n17 8\r\n13 10\r\n2 5\r\n19 8\r\n6 9\r\n16 3\r\n16 10\r\n19 7\r\n17 16\r\n10 16\r\n8 9\r\n12 5\r\n17 10\r\n2 9\r\n6 15\r\n4 9\r\n10 1\r\n17 14\r\n19 14\r\n2 10\r\n17 5\r\n2 13\r\n1 14\r\n",
                "11\r\n"
            ],
            [
                "3 2\r\n1 2 3\r\n1 2\r\n2 1\r\n",
                "0\r\n"
            ],
            [
                "5 4\r\n1 2 3 4 5\r\n4 5\r\n2 5\r\n1 3\r\n1 5\r\n",
                "1\r\n"
            ],
            [
                "2 1\r\n1 2\r\n2 1\r\n",
                "0\r\n"
            ]
        ]
    }
]