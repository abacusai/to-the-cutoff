[
    {
        "name": "Garland",
        "description": "You have a garland consisting of \n    4\n colored light bulbs, the color of the\n\n    i\n-th light bulb is \n    s_i\n. Initially, all the light bulbs are turned\noff. Your task is to turn all the light bulbs on. You can perform the\nfollowing operation any number of times: select a light bulb and switch its\nstate (turn it on if it was off, and turn it off if it was on). The only\nrestriction on the above operation is that you can apply the operation to a\nlight bulb only if the previous operation was applied to a light bulb of a\ndifferent color (the first operation can be applied to any light bulb).\nCalculate the minimum number of operations to turn all the light bulbs on, or\nreport that this is impossible. Input The first line contains a single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. The single\nline of each test case contains \n    s\n \u2014 a sequence of \n    4\n characters,\nwhere each character is a decimal digit. The \n    i\n-th character denotes the\ncolor of the \n    i\n-th light bulb. Output For each test case, print one\ninteger \u2014 the minimum number of operations to turn all the light bulbs on. If\nit is impossible to turn all the bulbs on, print -1. Example Input 3 9546 0000\n3313 Output 4 -1 6 Note In the first example, all the colors are different, so\nyou can just turn all the bulbs on in \n    4\n operations. In the second\nexample, it is impossible to turn all the bulbs on, because after you switch\none light bulb, it is impossible to turn the others on. In the third example,\nyou can proceed as follows: turn the first light bulb on, turn the third light\nbulb on, turn the fourth light bulb on, turn the third light bulb off, turn\nthe second light bulb on, turn the third light bulb on.\n\n",
        "cf_contest_id": 1809,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n9546\r\n0000\r\n3313\r\n",
                "4\r\n-1\r\n6\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2345\r\n",
                "4\r\n"
            ],
            [
                "19\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n",
                "4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n"
            ],
            [
                "18\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n",
                "4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n"
            ],
            [
                "17\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n",
                "4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n"
            ],
            [
                "16\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n",
                "4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n"
            ],
            [
                "10\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n1231\r\n",
                "4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n"
            ],
            [
                "9\r\n1234\r\n1234\r\n1234\r\n1234\r\n1234\r\n1234\r\n1234\r\n1234\r\n1234\r\n",
                "4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n"
            ],
            [
                "19\r\n1234\r\n4321\r\n2345\r\n6554\r\n7855\r\n4566\r\n6578\r\n5757\r\n6547\r\n5454\r\n5435\r\n3553\r\n6443\r\n5364\r\n6464\r\n4765\r\n8765\r\n5453\r\n8986\r\n",
                "4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n"
            ],
            [
                "7\r\n0000\r\n0000\r\n0000\r\n0000\r\n0000\r\n0000\r\n0000\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "7\r\n1111\r\n0000\r\n1111\r\n0000\r\n1111\r\n0000\r\n1111\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "1\r\n0001\r\n",
                "6\r\n"
            ],
            [
                "1\r\n1234\r\n",
                "4\r\n"
            ],
            [
                "2\r\n1234\r\n1258\r\n",
                "4\r\n4\r\n"
            ],
            [
                "4\r\n1111\r\n1111\r\n1111\r\n1111\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n"
            ]
        ]
    }
]