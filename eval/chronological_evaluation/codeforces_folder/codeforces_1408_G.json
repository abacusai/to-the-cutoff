[
    {
        "name": "Clusterization Counting",
        "description": "There are \n    n\n computers in the company network. They are numbered from\n\n    1\n to \n    n\n. For each pair of two computers \n    1 \n    \u2264 i < j \n    \u2264\n    n\n you know the value \n    a_i,j\n: the difficulty of sending data between\ncomputers \n    i\n and \n    j\n. All values \n    a_i,j\n for \n    i 0\n; for all\n\n    1 \n    \u2264 i < j \n    \u2264 n\n \n    a_i,j = a_j,i\n; all \n    a_i,j\n for\n\n    i <j\n are different. Output Print \n    n\n integers: the \n    k\n-th of\nthem should be equal to the number of possible ways to divide computers into\n\n    k\n groups, such that all required conditions are satisfied, modulo\n\n    998\n     244\n     353\n. Examples Input 4 0 3 4 6 3 0 2 1 4 2 0 5 6 1 5 0\nOutput 1 0 1 1 Input 7 0 1 18 15 19 12 21 1 0 16 13 17 20 14 18 16 0 2 7 10 9\n15 13 2 0 6 8 11 19 17 7 6 0 4 5 12 20 10 8 4 0 3 21 14 9 11 5 3 0 Output 1 1\n2 3 4 3 1 Note Here are all possible ways to separate all computers into\n\n    4\n groups in the second example: \n    1, 2\n    \n    , \n    \n    3, 4\n    \n    ,\n    \n    \n    5\n    \n    , \n    \n    6, 7\n; \n    1\n    \n    , \n    \n    2\n    \n    , \n    \n    3, 4\n    \n    ,\n    \n    \n    5, 6, 7\n; \n    1, 2\n    \n    , \n    \n    3\n    \n    , \n    \n    4\n    \n    , \n    \n    5, 6,\n    7\n.\n\n",
        "cf_contest_id": 1408,
        "cf_index": "G",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "dp",
            "dsu",
            "fft",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n0 3 4 6\r\n3 0 2 1\r\n4 2 0 5\r\n6 1 5 0\r\n",
                "1 0 1 1 "
            ],
            [
                "7\r\n0 1 18 15 19 12 21\r\n1 0 16 13 17 20 14\r\n18 16 0 2 7 10 9\r\n15 13 2 0 6 8 11\r\n19 17 7 6 0 4 5\r\n12 20 10 8 4 0 3\r\n21 14 9 11 5 3 0\r\n",
                "1 1 2 3 4 3 1 "
            ]
        ],
        "private_cases": [
            [
                "1\r\n0\r\n",
                "1 "
            ],
            [
                "2\r\n0 1\r\n1 0\r\n",
                "1 1 "
            ],
            [
                "3\r\n0 1 2\r\n1 0 3\r\n2 3 0\r\n",
                "1 1 1 "
            ],
            [
                "5\r\n0 9 3 4 2\r\n9 0 5 8 10\r\n3 5 0 7 1\r\n4 8 7 0 6\r\n2 10 1 6 0\r\n",
                "1 0 1 1 1 "
            ],
            [
                "6\r\n0 12 13 2 5 11\r\n12 0 15 10 1 14\r\n13 15 0 6 8 9\r\n2 10 6 0 7 4\r\n5 1 8 7 0 3\r\n11 14 9 4 3 0\r\n",
                "1 0 0 1 2 1 "
            ],
            [
                "7\r\n0 21 9 3 6 13 16\r\n21 0 11 2 14 4 18\r\n9 11 0 19 7 17 15\r\n3 2 19 0 20 8 12\r\n6 14 7 20 0 5 10\r\n13 4 17 8 5 0 1\r\n16 18 15 12 10 1 0\r\n",
                "1 0 0 0 1 2 1 "
            ],
            [
                "8\r\n0 26 18 7 13 12 9 6\r\n26 0 4 22 20 17 21 8\r\n18 4 0 23 19 27 2 14\r\n7 22 23 0 5 28 10 1\r\n13 20 19 5 0 24 25 16\r\n12 17 27 28 24 0 3 11\r\n9 21 2 10 25 3 0 15\r\n6 8 14 1 16 11 15 0\r\n",
                "1 0 0 0 0 1 2 1 "
            ],
            [
                "9\r\n0 30 9 13 27 34 12 7 6\r\n30 0 18 20 23 2 28 15 1\r\n9 18 0 26 35 22 5 21 19\r\n13 20 26 0 16 29 25 14 11\r\n27 23 35 16 0 3 31 10 24\r\n34 2 22 29 3 0 8 33 32\r\n12 28 5 25 31 8 0 36 4\r\n7 15 21 14 10 33 36 0 17\r\n6 1 19 11 24 32 4 17 0\r\n",
                "1 0 0 0 0 0 0 1 1 "
            ],
            [
                "10\r\n0 44 13 6 27 43 3 12 14 40\r\n44 0 28 20 17 16 5 33 45 15\r\n13 28 0 25 41 23 34 29 26 24\r\n6 20 25 0 18 32 11 37 2 38\r\n27 17 41 18 0 1 7 10 35 8\r\n43 16 23 32 1 0 19 21 42 22\r\n3 5 34 11 7 19 0 9 4 36\r\n12 33 29 37 10 21 9 0 31 39\r\n14 45 26 2 35 42 4 31 0 30\r\n40 15 24 38 8 22 36 39 30 0\r\n",
                "1 0 0 0 0 0 1 3 3 1 "
            ],
            [
                "10\r\n0 1 17 18 19 20 21 22 30 31\r\n1 0 23 24 25 26 27 28 32 33\r\n17 23 0 12 13 14 15 16 34 35\r\n18 24 12 0 8 9 10 11 36 37\r\n19 25 13 8 0 2 4 5 38 39\r\n20 26 14 9 2 0 6 7 40 41\r\n21 27 15 10 4 6 0 3 42 43\r\n22 28 16 11 5 7 3 0 44 45\r\n30 32 34 36 38 40 42 44 0 29\r\n31 33 35 37 39 41 43 45 29 0\r\n",
                "1 1 2 3 4 4 5 6 4 1 "
            ],
            [
                "5\r\n0 7 6 8 9\r\n7 0 1 10 5\r\n6 1 0 2 3\r\n8 10 2 0 4\r\n9 5 3 4 0\r\n",
                "1 0 0 1 1 "
            ]
        ]
    }
]