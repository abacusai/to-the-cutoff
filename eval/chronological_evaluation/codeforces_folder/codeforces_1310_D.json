[
    {
        "name": "Tourism",
        "description": "Masha lives in a country with \n    n\n cities numbered from \n    1\n to \n    n\n.\nShe lives in the city number \n    1\n. There is a direct train route between\neach pair of distinct cities \n    i\n and \n    j\n, where \n    i \n    \u2260 j\n. In\ntotal there are \n    n(n-1)\n distinct routes. Every route has a cost, cost for\nroute from \n    i\n to \n    j\n may be different from the cost of route from\n\n    j\n to \n    i\n. Masha wants to start her journey in city \n    1\n, take\nexactly \n    k\n routes from one city to another and as a result return to the\ncity \n    1\n. Masha is really careful with money, so she wants the journey to\nbe as cheap as possible. To do so Masha doesn't mind visiting a city multiple\ntimes or even taking the same route multiple times. Masha doesn't want her\njourney to have odd cycles. Formally, if you can select visited by Masha city\n\n    v\n, take odd number of routes used by Masha in her journey and return to\nthe city \n    v\n, such journey is considered unsuccessful. Help Masha to find\nthe cheapest (with minimal total cost of all taken routes) successful journey.\nInput First line of input had two integer numbers \n    n,k\n (\n    2 \n    \u2264 n\n    \n    \u2264 80; 2 \n    \u2264 k \n    \u2264 10\n): number of cities in the country and\nnumber of routes in Masha's journey. It is guaranteed that \n    k\n is even.\nNext \n    n\n lines hold route descriptions: \n    j\n-th number in \n    i\n-th\nline represents the cost of route from \n    i\n to \n    j\n if \n    i \n    \u2260 j\n,\nand is 0 otherwise (there are no routes \n    i \n    \u2192 i\n). All route costs are\nintegers from \n    0\n to \n    10^8\n. Output Output a single integer \u2014 total\ncost of the cheapest Masha's successful journey. Examples Input 5 8 0 1 2 2 0\n0 0 1 1 2 0 1 0 0 0 2 1 1 0 0 2 0 1 2 0 Output 2 Input 3 2 0 1 1 2 0 1 2 2 0\nOutput 3\n\n",
        "cf_contest_id": 1310,
        "cf_index": "D",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "graphs",
            "probabilities"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 8\r\n0 1 2 2 0\r\n0 0 1 1 2\r\n0 1 0 0 0\r\n2 1 1 0 0\r\n2 0 1 2 0\r\n",
                "2\r\n"
            ],
            [
                "3 2\r\n0 1 1\r\n2 0 1\r\n2 2 0\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 2\r\n0 35949957\r\n62693577 0\r\n",
                "98643534\r\n"
            ],
            [
                "3 2\r\n0 45391155 5299166\r\n47959463 0 44352869\r\n60236461 57436292 0\r\n",
                "65535627\r\n"
            ],
            [
                "4 2\r\n0 49799607 47904756 8763425\r\n57567044 0 80148623 61775195\r\n3270902 91509738 0 8240512\r\n54377373 35162721 35112487 0\r\n",
                "51175658\r\n"
            ],
            [
                "4 4\r\n0 94474339 70423020 9133992\r\n51615028 0 51709029 6176813\r\n91615211 81243650 0 1214040\r\n55335766 55450190 86667677 0\r\n",
                "126096761\r\n"
            ],
            [
                "2 10\r\n0 0\r\n0 0\r\n",
                "0\r\n"
            ],
            [
                "3 10\r\n0 8 3\r\n3 0 1\r\n9 2 0\r\n",
                "23\r\n"
            ],
            [
                "2 10\r\n0 3\r\n0 0\r\n",
                "15\r\n"
            ]
        ]
    }
]