[
    {
        "name": "Tricolor Triangles",
        "description": "You are given a simple undirected graph with \n    n\n vertices and \n    m\n\nedges. Edge \n    i\n is colored in the color \n    c_i\n, which is either\n\n    1\n, \n    2\n, or \n    3\n, or left uncolored (in this case, \n    c_i =\n    -1\n). You need to color all of the uncolored edges in such a way that for\nany three pairwise adjacent vertices \n    1 \n    \u2264 a < b < c \n    \u2264 n\n, the\ncolors of the edges \n    a \n    \u2194 b\n, \n    b \n    \u2194 c\n,\nand \n    a \n    \u2194 c\n are either pairwise different, or all equal.\nIn case no such coloring exists, you need to determine that. Input The first\nline of input contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10\n): the\nnumber of test cases. The following lines contain the description of the test\ncases. In the first line you are given two integers \n    n\n and \n    m\n (\n    3\n    \n    \u2264 n \n    \u2264 64\n, \n    0 \n    \u2264 m \n    \u2264\n    min(256,\n    \n    n(n-1)/2)\n): the number of vertices and edges in the graph. Each\nof the next \n    m\n lines contains three integers \n    a_i\n, \n    b_i\n, and\n\n    c_i\n (\n    1 \n    \u2264 a_i, b_i \n    \u2264 n\n, \n    a_i \n     b_i\n, \n    c_i\n is\neither \n    -1\n, \n    1\n, \n    2\n, or \n    3\n), denoting an edge between\n\n    a_i\n and \n    b_i\n with color \n    c_i\n. It is guaranteed that no two\nedges share the same endpoints. Output For each test case, print \n    m\n\nintegers \n    d_1, d_2, \n    \u2026, d_m\n, where \n    d_i\n is the color of the\n\n    i\n-th edge in your final coloring. If there is no valid way to finish the\ncoloring, print \n    -1\n. Example Input 4 3 3 1 2 1 2 3 2 3 1 -1 3 3 1 2 1 2 3\n1 3 1 -1 4 4 1 2 -1 2 3 -1 3 4 -1 4 1 -1 3 3 1 2 1 2 3 1 3 1 2 Output 1 2 3 1\n1 1 1 2 2 3 -1\n\n",
        "cf_contest_id": 1616,
        "cf_index": "F",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "graphs",
            "math",
            "matrices"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3 3\r\n1 2 1\r\n2 3 2\r\n3 1 -1\r\n3 3\r\n1 2 1\r\n2 3 1\r\n3 1 -1\r\n4 4\r\n1 2 -1\r\n2 3 -1\r\n3 4 -1\r\n4 1 -1\r\n3 3\r\n1 2 1\r\n2 3 1\r\n3 1 2\r\n",
                "1 2 3 \r\n1 1 1 \r\n3 3 3 3 \r\n-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n5 5\r\n2 4 -1\r\n2 5 -1\r\n3 4 -1\r\n1 3 -1\r\n4 5 -1\r\n5 5\r\n1 5 -1\r\n2 3 -1\r\n2 4 -1\r\n1 2 -1\r\n2 5 -1\r\n5 5\r\n3 4 -1\r\n3 5 -1\r\n1 4 -1\r\n1 2 -1\r\n2 4 -1\r\n5 5\r\n1 5 -1\r\n2 3 -1\r\n1 2 -1\r\n3 4 -1\r\n4 5 -1\r\n5 5\r\n1 4 -1\r\n1 2 -1\r\n3 5 -1\r\n4 5 -1\r\n3 4 -1\r\n5 5\r\n1 4 -1\r\n2 4 -1\r\n1 5 -1\r\n4 5 -1\r\n1 2 -1\r\n5 5\r\n3 5 -1\r\n1 5 -1\r\n1 4 -1\r\n3 4 -1\r\n1 3 -1\r\n5 5\r\n2 4 -1\r\n1 5 -1\r\n3 4 -1\r\n4 5 -1\r\n1 3 -1\r\n5 5\r\n4 5 -1\r\n2 3 -1\r\n3 5 -1\r\n2 4 -1\r\n1 3 -1\r\n5 5\r\n1 3 -1\r\n1 2 -1\r\n2 4 -1\r\n4 5 -1\r\n1 4 -1\r\n",
                "3 3 3 3 3 \r\n3 3 3 3 3 \r\n3 3 3 3 3 \r\n3 3 3 3 3 \r\n3 3 3 3 3 \r\n3 3 3 3 3 \r\n3 3 3 3 3 \r\n3 3 3 3 3 \r\n3 3 3 3 3 \r\n3 3 3 3 3 \r\n"
            ],
            [
                "1\r\n3 0\r\n",
                "\r\n"
            ]
        ]
    }
]