[
    {
        "name": "Make It Good",
        "description": "You are given an array \n    a\n consisting of \n    n\n integers. You have to\nfind the length of the smallest (shortest) prefix of elements you need to\nerase from \n    a\n to make it a good array. Recall that the prefix of the\narray \n    a=[a_1, a_2, \n    \u2026, a_n]\n is a subarray consisting several first\nelements: the prefix of the array \n    a\n of length \n    k\n is the array\n\n    [a_1, a_2, \n    \u2026, a_k]\n (\n    0 \n    \u2264 k \n    \u2264 n\n). The array \n    b\n of\nlength \n    m\n is called good, if you can obtain a non-decreasing array\n\n    c\n (\n    c_1 \n    \u2264 c_2 \n    \u2264\n    \u2026\n    \u2264 c_m\n) from it, repeating the\nfollowing operation \n    m\n times (initially, \n    c\n is empty): select either\nthe first or the last element of \n    b\n, remove it from \n    b\n, and append\nit to the end of the array \n    c\n. For example, if we do \n    4\n operations:\ntake \n    b_1\n, then \n    b_m\n, then \n    b_m-1\n and at last \n    b_2\n,\nthen \n    b\n becomes \n    [b_3, b_4, \n    \u2026, b_m-3]\n and \n    c =[b_1, b_m,\n    b_m-1, b_2]\n. Consider the following example: \n    b = [1, 2, 3, 4, 4, 2,\n    1]\n. This array is good because we can obtain non-decreasing array \n    c\n\nfrom it by the following sequence of operations: take the first element of\n\n    b\n, so \n    b = [2, 3, 4, 4, 2, 1]\n, \n    c = [1]\n; take the last element\nof \n    b\n, so \n    b = [2, 3, 4, 4, 2]\n, \n    c = [1, 1]\n; take the last\nelement of \n    b\n, so \n    b = [2, 3, 4, 4]\n, \n    c = [1, 1, 2]\n; take the\nfirst element of \n    b\n, so \n    b = [3, 4, 4]\n, \n    c = [1, 1, 2, 2]\n; take\nthe first element of \n    b\n, so \n    b = [4, 4]\n, \n    c = [1, 1, 2, 2, 3]\n;\ntake the last element of \n    b\n, so \n    b = [4]\n, \n    c = [1, 1, 2, 2, 3,\n    4]\n; take the only element of \n    b\n, so \n    b = []\n, \n    c = [1, 1, 2, 2,\n    3, 4, 4]\n \u2014 \n    c\n is non-decreasing. Note that the array consisting of one\nelement is good. Print the length of the shortest prefix of \n    a\n to delete\n(erase), to make \n    a\n to be a good array. Note that the required length can\nbe \n    0\n. You have to answer \n    t\n independent test cases. Input The first\nline of the input contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 2 \n    \u00b7\n    10^4\n) \u2014 the number of test cases. Then \n    t\n test cases follow. The first\nline of the test case contains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n) \u2014 the length of \n    a\n. The second line of the test case\ncontains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 2\n    \n    \u00b7 10^5\n), where \n    a_i\n is the \n    i\n-th element of \n    a\n. It is\nguaranteed that the sum of \n    n\n does not exceed \n    2 \n    \u00b7 10^5\n\n(\n    \u2211 n \n    \u2264 2 \n    \u00b7 10^5\n). Output For each test case, print the\nanswer: the length of the shortest prefix of elements you need to erase from\n\n    a\n to make it a good array. Example Input 5 4 1 2 3 4 7 4 3 3 8 4 5 2 3 1\n1 1 7 1 3 1 4 5 3 2 5 5 4 3 2 3 Output 0 4 0 2 3 Note In the first test case\nof the example, the array \n    a\n is already good, so we don't need to erase\nany prefix. In the second test case of the example, the initial array \n    a\n\nis not good. Let's erase first \n    4\n elements of \n    a\n, the result is\n\n    [4, 5, 2]\n. The resulting array is good. You can prove that if you erase\nfewer number of first elements, the result will not be good.\n\n",
        "cf_contest_id": 1385,
        "cf_index": "C",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n4\r\n1 2 3 4\r\n7\r\n4 3 3 8 4 5 2\r\n3\r\n1 1 1\r\n7\r\n1 3 1 4 5 3 2\r\n5\r\n5 4 3 2 3\r\n",
                "0\r\n4\r\n0\r\n2\r\n3\r\n"
            ]
        ],
        "private_cases": []
    }
]