[
    {
        "name": "Add to Neighbour and Remove",
        "description": "Polycarp was given an array of \n    a[1 \n    \u2026 n]\n of \n    n\n integers. He\ncan perform the following operation with the array \n    a\n no more than\n\n    n\n times: Polycarp selects the index \n    i\n and adds the value \n    a_i\n\nto one of his choice of its neighbors. More formally, Polycarp adds the value\nof \n    a_i\n to \n    a_i-1\n or to \n    a_i+1\n (if such a neighbor does not\nexist, then it is impossible to add to it). After adding it, Polycarp removes\nthe \n    i\n-th element from the \n    a\n array. During this step the length of\n\n    a\n is decreased by \n    1\n. The two items above together denote one\nsingle operation. For example, if Polycarp has an array \n    a = [3, 1, 6, 6,\n    2]\n, then it can perform the following sequence of operations with it:\nPolycarp selects \n    i = 2\n and adds the value \n    a_i\n to \n    (i-1)\n-th\nelement: \n    a = [4, 6, 6, 2]\n. Polycarp selects \n    i = 1\n and adds the\nvalue \n    a_i\n to \n    (i+1)\n-th element: \n    a = [10, 6, 2]\n. Polycarp\nselects \n    i = 3\n and adds the value \n    a_i\n to \n    (i-1)\n-th element:\n\n    a = [10, 8]\n. Polycarp selects \n    i = 2\n and adds the value \n    a_i\n\nto \n    (i-1)\n-th element: \n    a = [18]\n. Note that Polycarp could stop\nperforming operations at any time. Polycarp wondered how many minimum\noperations he would need to perform to make all the elements of \n    a\n equal\n(i.e., he wants all \n    a_i\n are equal to each other). Input The first line\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 3000\n) \u2014 the number\nof test cases in the test. Then \n    t\n test cases follow. The first line of\neach test case contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    3000\n) \u2014 the length of the array. The next line contains \n    n\n integers\n\n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^5\n) \u2014 array\n\n    a\n. It is guaranteed that the sum of \n    n\n over all test cases does not\nexceed \n    3000\n. Output For each test case, output a single number \u2014 the\nminimum number of operations that Polycarp needs to perform so that all\nelements of the \n    a\n array are the same (equal). Example Input 4 5 3 1 6 6\n2 4 1 2 2 1 3 2 2 2 4 6 3 2 1 Output 4 2 0 2 Note In the first test case of\nthe example, the answer can be constructed like this (just one way among many\nother ways): \n    [3, 1, 6, 6, 2]\n \n    \n\n\n    [3, 1, 12, 2]\n \n    \n \n    [3, 13, 2]\n\n\n    \n \n    [16, 2]\n\n\n    \n \n    [18]\n. All elements of the array\n\n    [18]\n are the same. In the second test case of the example, the answer\ncan be constructed like this (just one way among other ways): \n    [1, 2, 2,\n    1]\n \n    \n \n    [3, 2, 1]\n\n\n    \n \n    [3, 3]\n. All elements of the\narray \n    [3, 3]\n are the same. In the third test case of the example,\nPolycarp doesn't need to perform any operations since \n    [2, 2, 2]\n contains\nequal (same) elements only. In the fourth test case of the example, the answer\ncan be constructed like this (just one way among other ways): \n    [6, 3, 2,\n    1]\n \n    \n \n    [6, 3, 3]\n\n\n    \n \n    [6, 6]\n. All elements of the\narray \n    [6, 6]\n are the same.\n\n",
        "cf_contest_id": 1462,
        "cf_index": "D",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n5\r\n3 1 6 6 2\r\n4\r\n1 2 2 1\r\n3\r\n2 2 2\r\n4\r\n6 3 2 1\r\n",
                "4\r\n2\r\n0\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "50\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "1\r\n11\r\n1 2 1 2 1 2 1 2 1 2 1\r\n",
                "10\r\n"
            ],
            [
                "1\r\n13\r\n1 2 3 2 1 3 2 1 2 65 12 1 1\r\n",
                "12\r\n"
            ]
        ]
    }
]