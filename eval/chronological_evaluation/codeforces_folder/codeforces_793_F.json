[
    {
        "name": "Julia the snail",
        "description": "After hard work Igor decided to have some rest. He decided to have a snail. He\nbought an aquarium with a slippery tree trunk in the center, and put a snail\nnamed Julia into the aquarium. Igor noticed that sometimes Julia wants to\nclimb onto the trunk, but can't do it because the trunk is too slippery. To\nhelp the snail Igor put some ropes on the tree, fixing the lower end of the\ni-th rope on the trunk on the height li above the ground, and the higher end\non the height ri above the ground. For some reason no two ropes share the same\nposition of the higher end, i.e. all ri are distinct. Now Julia can move down\nat any place of the trunk, and also move up from the lower end of some rope to\nits higher end. Igor is proud of his work, and sometimes think about possible\nmovements of the snail. Namely, he is interested in the following questions:\n\u00abSuppose the snail is on the trunk at height x now. What is the highest\nposition on the trunk the snail can get on if it would never be lower than x\nor higher than y?\u00bb Please note that Julia can't move from a rope to the trunk\nbefore it reaches the higher end of the rope, and Igor is interested in the\nhighest position on the tree trunk. Igor is interested in many questions, and\nnot always can answer them. Help him, write a program that answers these\nquestions. Input The first line contains single integer n (1 \u2264 n \u2264 100000) \u2014\nthe height of the trunk. The second line contains single integer m (1 \u2264 m \u2264\n100000) \u2014 the number of ropes. The next m lines contain information about the\nropes. The i-th of these lines contains two integers li and ri (1 \u2264 li \u2264 ri \u2264\nn) \u2014 the heights on which the lower and the higher ends of the i-th rope are\nfixed, respectively. It is guaranteed that all ri are distinct. The next line\ncontains single integer q (1 \u2264 q \u2264 100000) \u2014 the number of questions. The next\nq lines contain information about the questions. Each of these lines contain\ntwo integers x and y (1 \u2264 x \u2264 y \u2264 n), where x is the height where Julia starts\n(and the height Julia can't get lower than), and y is the height Julia can't\nget higher than. Output For each question print the maximum reachable for\nJulia height. Examples Input 8 4 1 2 3 4 2 5 6 7 5 1 2 1 4 1 6 2 7 6 8 Output\n2 2 5 5 7 Input 10 10 3 7 1 4 1 6 5 5 1 1 3 9 7 8 1 2 3 3 7 10 10 2 4 1 7 3 4\n3 5 2 8 2 5 5 5 3 5 7 7 3 10 Output 2 7 3 3 2 2 5 3 7 10 Note The picture of\nthe first sample is on the left, the picture of the second sample is on the\nright. Ropes' colors are just for clarity, they don't mean anything.\n\n",
        "cf_contest_id": 793,
        "cf_index": "F",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "divide and conquer",
            "dp"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "8\r\n4\r\n1 2\r\n3 4\r\n2 5\r\n6 7\r\n5\r\n1 2\r\n1 4\r\n1 6\r\n2 7\r\n6 8\r\n",
                "2\r\n2\r\n5\r\n5\r\n7\r\n"
            ],
            [
                "10\r\n10\r\n3 7\r\n1 4\r\n1 6\r\n5 5\r\n1 1\r\n3 9\r\n7 8\r\n1 2\r\n3 3\r\n7 10\r\n10\r\n2 4\r\n1 7\r\n3 4\r\n3 5\r\n2 8\r\n2 5\r\n5 5\r\n3 5\r\n7 7\r\n3 10\r\n",
                "2\r\n7\r\n3\r\n3\r\n2\r\n2\r\n5\r\n3\r\n7\r\n10\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n5\r\n1 3\r\n1 4\r\n2 2\r\n3 5\r\n1 1\r\n5\r\n1 3\r\n3 5\r\n4 5\r\n1 4\r\n4 5\r\n",
                "3\r\n5\r\n4\r\n4\r\n4\r\n"
            ],
            [
                "10\r\n10\r\n1 3\r\n1 4\r\n1 1\r\n1 2\r\n3 8\r\n5 9\r\n5 5\r\n5 10\r\n2 6\r\n2 7\r\n10\r\n2 5\r\n3 7\r\n3 8\r\n1 5\r\n8 8\r\n1 4\r\n6 10\r\n4 6\r\n2 7\r\n7 10\r\n",
                "2\r\n3\r\n8\r\n4\r\n8\r\n4\r\n6\r\n4\r\n7\r\n7\r\n"
            ],
            [
                "10\r\n10\r\n8 10\r\n1 1\r\n1 6\r\n4 7\r\n4 9\r\n8 8\r\n1 4\r\n2 3\r\n4 5\r\n2 2\r\n10\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n6 10\r\n7 10\r\n8 10\r\n9 10\r\n10 10\r\n",
                "1\r\n1\r\n1\r\n4\r\n5\r\n6\r\n7\r\n10\r\n9\r\n10\r\n"
            ],
            [
                "1\r\n1\r\n1 1\r\n1\r\n1 1\r\n",
                "1\r\n"
            ]
        ]
    }
]