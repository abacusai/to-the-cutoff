[
    {
        "name": "Circle of Numbers",
        "description": "One day Vasya came up to the blackboard and wrote out n distinct integers from\n1 to n in some order in a circle. Then he drew arcs to join the pairs of\nintegers (a, b) (a \u2260 b), that are either each other's immediate neighbors in\nthe circle, or there is number c, such that a and \u0441 are immediate neighbors,\nand b and c are immediate neighbors. As you can easily deduce, in the end\nVasya drew 2\u00b7n arcs. For example, if the numbers are written in the circle in\nthe order 1, 2, 3, 4, 5 (in the clockwise direction), then the arcs will join\npairs of integers (1, 2), (2, 3), (3, 4), (4, 5), (5, 1), (1, 3), (2, 4), (3,\n5), (4, 1) and (5, 2). Much time has passed ever since, the numbers we wiped\noff the blackboard long ago, but recently Vasya has found a piece of paper\nwith 2\u00b7n written pairs of integers that were joined with the arcs on the\nboard. Vasya asks you to find the order of numbers in the circle by these\npairs. Input The first line of the input contains a single integer n (5 \u2264 n \u2264\n10^5) that shows, how many numbers were written on the board. Next 2\u00b7n lines\ncontain pairs of integers ai, bi (1 \u2264 ai, bi \u2264 n, ai \u2260 bi) \u2014 the numbers that\nwere connected by the arcs. It is guaranteed that no pair of integers,\nconnected by a arc, occurs in the input more than once. The pairs of numbers\nand the numbers in the pairs are given in the arbitrary order. Output If Vasya\nmade a mistake somewhere and there isn't any way to place numbers from 1 to n\non the circle according to the statement, then print a single number \"-1\"\n(without the quotes). Otherwise, print any suitable sequence of n distinct\nintegers from 1 to n. If there are multiple solutions, you are allowed to\nprint any of them. Specifically, it doesn't matter which number you write\nfirst to describe the sequence of the order. It also doesn't matter whether\nyou write out the numbers in the clockwise or counter-clockwise direction.\nExamples Input 5 1 2 2 3 3 4 4 5 5 1 1 3 2 4 3 5 4 1 5 2 Output 1 2 3 4 5\nInput 6 5 6 4 3 5 3 2 4 6 1 3 1 6 2 2 5 1 4 3 6 1 2 4 5 Output 1 2 4 5 3 6\n\n",
        "cf_contest_id": 263,
        "cf_index": "C",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dfs and similar",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 1\r\n1 3\r\n2 4\r\n3 5\r\n4 1\r\n5 2\r\n",
                "1 2 3 4 5 "
            ],
            [
                "6\r\n5 6\r\n4 3\r\n5 3\r\n2 4\r\n6 1\r\n3 1\r\n6 2\r\n2 5\r\n1 4\r\n3 6\r\n1 2\r\n4 5\r\n",
                "1 2 4 5 3 6 "
            ]
        ],
        "private_cases": [
            [
                "5\r\n3 2\r\n4 2\r\n4 1\r\n2 1\r\n2 5\r\n3 1\r\n4 5\r\n3 5\r\n4 3\r\n1 5\r\n",
                "1 2 3 4 5 "
            ],
            [
                "7\r\n4 5\r\n6 2\r\n4 1\r\n3 1\r\n3 2\r\n7 5\r\n2 1\r\n7 6\r\n6 3\r\n5 2\r\n6 4\r\n4 7\r\n1 5\r\n7 3\r\n",
                "1 2 3 6 7 4 5 "
            ],
            [
                "10\r\n6 5\r\n9 10\r\n4 8\r\n6 1\r\n7 9\r\n4 3\r\n3 10\r\n4 10\r\n7 10\r\n7 1\r\n6 8\r\n2 3\r\n1 5\r\n5 7\r\n2 8\r\n1 2\r\n5 9\r\n4 9\r\n2 6\r\n8 3\r\n",
                "1 5 7 9 10 4 3 8 2 6 "
            ],
            [
                "14\r\n13 4\r\n3 9\r\n6 11\r\n1 13\r\n7 8\r\n3 2\r\n14 3\r\n4 1\r\n10 4\r\n12 11\r\n1 6\r\n13 7\r\n10 14\r\n12 5\r\n12 2\r\n10 7\r\n1 5\r\n13 10\r\n6 12\r\n4 5\r\n2 9\r\n11 2\r\n8 3\r\n9 8\r\n8 14\r\n14 7\r\n6 5\r\n11 9\r\n",
                "1 4 13 10 7 14 8 3 9 2 11 12 6 5 "
            ],
            [
                "20\r\n5 20\r\n1 15\r\n3 19\r\n16 20\r\n6 8\r\n11 14\r\n17 9\r\n17 8\r\n16 5\r\n9 18\r\n3 2\r\n19 13\r\n8 7\r\n9 6\r\n12 4\r\n7 1\r\n17 7\r\n10 20\r\n10 16\r\n18 17\r\n2 11\r\n11 12\r\n4 14\r\n4 5\r\n9 15\r\n11 13\r\n3 10\r\n6 15\r\n12 14\r\n3 16\r\n18 15\r\n1 8\r\n19 10\r\n2 19\r\n13 2\r\n1 6\r\n20 4\r\n14 5\r\n13 12\r\n18 7\r\n",
                "-1"
            ],
            [
                "8\r\n2 1\r\n3 1\r\n2 3\r\n4 2\r\n6 2\r\n8 2\r\n3 4\r\n3 6\r\n3 7\r\n3 8\r\n4 5\r\n7 4\r\n6 5\r\n5 8\r\n6 8\r\n8 7\r\n",
                "-1"
            ],
            [
                "25\r\n17 14\r\n19 1\r\n24 16\r\n23 13\r\n20 15\r\n24 23\r\n18 25\r\n4 1\r\n18 9\r\n2 17\r\n14 12\r\n25 2\r\n13 6\r\n21 9\r\n19 3\r\n11 18\r\n10 13\r\n12 19\r\n3 17\r\n12 1\r\n10 6\r\n15 1\r\n18 21\r\n11 21\r\n23 22\r\n8 11\r\n11 16\r\n10 23\r\n2 9\r\n25 7\r\n15 5\r\n22 24\r\n13 22\r\n5 10\r\n5 20\r\n4 15\r\n5 6\r\n12 4\r\n3 14\r\n16 22\r\n8 24\r\n7 17\r\n25 9\r\n21 8\r\n8 16\r\n19 14\r\n3 7\r\n20 6\r\n20 4\r\n2 7\r\n",
                "1 4 15 20 5 6 10 13 23 22 24 16 8 11 21 18 9 25 2 7 17 3 14 19 12 "
            ],
            [
                "5\r\n2 1\r\n1 3\r\n1 4\r\n1 5\r\n3 2\r\n2 4\r\n2 5\r\n4 3\r\n3 5\r\n4 5\r\n",
                "1 2 3 4 5 "
            ],
            [
                "6\r\n1 2\r\n3 1\r\n4 1\r\n5 1\r\n2 3\r\n4 2\r\n2 5\r\n4 3\r\n3 6\r\n5 4\r\n4 6\r\n5 6\r\n",
                "-1"
            ],
            [
                "7\r\n2 1\r\n3 1\r\n5 1\r\n6 1\r\n7 1\r\n2 3\r\n2 6\r\n2 7\r\n3 6\r\n3 7\r\n4 5\r\n6 4\r\n7 4\r\n7 5\r\n",
                "-1"
            ],
            [
                "9\r\n1 2\r\n6 1\r\n1 7\r\n1 8\r\n1 9\r\n3 2\r\n2 5\r\n6 2\r\n7 2\r\n2 9\r\n3 6\r\n4 5\r\n7 4\r\n5 7\r\n8 5\r\n6 7\r\n8 6\r\n9 6\r\n",
                "-1"
            ],
            [
                "10\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n2 3\r\n2 4\r\n2 5\r\n3 4\r\n3 5\r\n4 5\r\n6 7\r\n6 8\r\n6 9\r\n6 10\r\n7 8\r\n7 9\r\n7 10\r\n8 9\r\n8 10\r\n9 10\r\n",
                "-1"
            ],
            [
                "6\r\n4 6\r\n4 3\r\n5 3\r\n2 4\r\n6 1\r\n3 1\r\n6 2\r\n2 5\r\n1 4\r\n3 6\r\n1 2\r\n4 5\r\n",
                "-1"
            ]
        ]
    }
]