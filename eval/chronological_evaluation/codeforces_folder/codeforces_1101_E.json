[
    {
        "name": "Polycarp's New Job",
        "description": "Polycarp has recently got himself a new job. He now earns so much that his old\nwallet can't even store all the money he has. Berland bills somehow come in\nlots of different sizes. However, all of them are shaped as rectangles\n(possibly squares). All wallets are also produced in form of rectangles\n(possibly squares). A bill \n    x \n    \u00d7 y\n fits into some wallet \n    h\n    \n    \u00d7 w\n if either \n    x \n    \u2264 h\n and \n    y \n    \u2264 w\n or \n    y \n    \u2264 h\n\nand \n    x \n    \u2264 w\n. Bills can overlap with each other in a wallet and an\ninfinite amount of bills can fit into a wallet. That implies that all the\nbills Polycarp currently have fit into a wallet if every single one of them\nfits into it independently of the others. Now you are asked to perform the\nqueries of two types: \n    +\u00a0x\u00a0y\n \u2014 Polycarp earns a bill of size \n    x\n    \n    \u00d7 y\n; \n    ?\u00a0h\u00a0w\n \u2014 Polycarp wants to check if all the bills he has\nearned to this moment fit into a wallet of size \n    h \n    \u00d7 w\n. It is\nguaranteed that there is at least one query of type \n    1\n before the first\nquery of type \n    2\n and that there is at least one query of type \n    2\n in\nthe input data. For each query of type \n    2\n print \"YES\" if all the bills he\nhas earned to this moment fit into a wallet of given size. Print \"NO\"\notherwise. Input The first line contains a single integer \n    n\n (\n    2 \n    \u2264\n    n \n    \u2264 5 \n    \u00b7 10^5\n) \u2014 the number of queries. Each of the next \n    n\n\nlines contains a query of one of these two types: \n    +\u00a0x\u00a0y\n (\n    1 \n    \u2264 x, y\n    \n    \u2264 10^9\n) \u2014 Polycarp earns a bill of size \n    x \n    \u00d7 y\n; \n    ?\u00a0h\u00a0w\n\n(\n    1 \n    \u2264 h, w \n    \u2264 10^9\n) \u2014 Polycarp wants to check if all the bills he\nhas earned to this moment fit into a wallet of size \n    h \n    \u00d7 w\n. It is\nguaranteed that there is at least one query of type \n    1\n before the first\nquery of type \n    2\n and that there is at least one query of type \n    2\n in\nthe input data. Output For each query of type \n    2\n print \"YES\" if all the\nbills he has earned to this moment fit into a wallet of given size. Print \"NO\"\notherwise. Example Input 9  3 2  2 3 ? 1 20 ? 3 3 ? 2 3  1 5 ? 10 10 ? 1\n5  1 1 Output NO YES YES YES NO Note The queries of type \n    2\n of the\nexample: Neither bill fits; Both bills fit (just checking that you got that\nbills can overlap); Both bills fit (both bills are actually the same); All\nbills fit (too much of free space in a wallet is not a problem); Only bill\n\n    1 \n    \u00d7 5\n fit (all the others don't, thus it's \"NO\").\n\n",
        "cf_contest_id": 1101,
        "cf_index": "E",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "9\r\n+ 3 2\r\n+ 2 3\r\n? 1 20\r\n? 3 3\r\n? 2 3\r\n+ 1 5\r\n? 10 10\r\n? 1 5\r\n+ 1 1\r\n",
                "NO\r\nYES\r\nYES\r\nYES\r\nNO\r\n\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n+ 1 7\r\n+ 6 7\r\n+ 8 3\r\n? 10 10\r\n+ 5 4\r\n",
                "YES\r\n\r\n"
            ],
            [
                "5\r\n+ 9 6\r\n? 4 7\r\n? 10 1\r\n? 5 6\r\n? 5 5\r\n",
                "NO\r\nNO\r\nNO\r\nNO\r\n\r\n"
            ],
            [
                "10\r\n+ 47 81\r\n? 18 64\r\n? 49 81\r\n? 87 56\r\n? 31 45\r\n? 22 8\r\n? 16 46\r\n? 13 41\r\n? 30 3\r\n? 62 53\r\n",
                "NO\r\nYES\r\nYES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\n\r\n"
            ],
            [
                "10\r\n+ 29 48\r\n+ 88 49\r\n+ 85 91\r\n+ 63 62\r\n+ 29 20\r\n+ 8 35\r\n+ 11 77\r\n+ 49 21\r\n+ 23 77\r\n? 58 16\r\n",
                "NO\r\n\r\n"
            ],
            [
                "2\r\n+ 2 2\r\n? 2 2\r\n",
                "YES\r\n\r\n"
            ],
            [
                "69\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n+ 1 2\r\n? 1 2\r\n",
                "YES\r\n\r\n"
            ],
            [
                "3\r\n+ 1 5\r\n+ 1 3\r\n? 1 4\r\n",
                "NO\r\n\r\n"
            ]
        ]
    }
]