[
    {
        "name": "Building Forest Trails",
        "description": "There are \n    n\n villages lying equidistant on a circle in the middle of a\nthick, impassable forest. From ancient times, it was impossible to move from\none village to another, but technical progress has changed a lot. Now, there\nis a technology to build passable trails in the forest. The building process\nconsists of \n    m\n events. Each event is either building a trail or querying\nif two villages are connected. Trails are built as straight lines connecting\ntwo villages. After a trail is built, anybody can walk along the trail from\none village to another. Moreover, if two trails cross, anybody can turn at the\nintersection, and if other trails leave a village you have just reached, they\ncan also be used to walk along. So, for example, if villages are numbered\n\n    1\n to \n    6\n in the order around the circle, and there are trails\n\n    1\n to \n    3\n, \n    2\n to \n    4\n, and \n    4\n to \n    6\n, then all\nvillages, except the \n    5\n-th, are reachable from the \n    1\n-st village.\nGiven a list of \n    m\n events, for each query, find if two given villages are\nreachable from each other at that moment. Input The first line contains two\nintegers \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2\n    \u00b7 10^5\n) and \n    m\n (\n    1 \n    \u2264\n    m \n    \u2264 3\n    \u00b7 10^5\n) \u2014 the number of villages and the number of events\nrespectively. Next \n    m\n lines contain events. Each event description\nconsists of three integers \n    e\n (\n    e\n is \n    1\n or \n    2\n), \n    v\n\n(\n    1 \n    \u2264 v \n    \u2264 n\n), and \n    u\n (\n    1 \n    \u2264 u \n    \u2264 n\n, \n    u \n    \n    v\n). If \n    e = 1\n, then the event is building a trail between villages\n\n    v\n and \n    u\n. If \n    e = 2\n, then the event is a query if the villages\n\n    v\n and \n    u\n are connected. It is guaranteed that each trail is built\nat most once. Villages are numbered \n    1\n to \n    n\n in clockwise order\naround the circle. Output For each query print one character '0' if villages\nare not reachable, and '1' if villages are reachable from each other. Print\nanswers for all queries as a single string in one line. Examples Input 6 9 1 1\n3 1 4 6 2 3 4 1 2 4 2 1 2 2 1 3 2 1 4 2 6 1 2 5 3 Output 011110 Input 2 5 2 1\n2 2 2 1 1 1 2 2 1 2 2 2 1 Output 0011\n\n",
        "cf_contest_id": 1578,
        "cf_index": "B",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dsu"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [],
        "private_cases": []
    }
]