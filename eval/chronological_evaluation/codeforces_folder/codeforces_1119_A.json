[
    {
        "name": "Ilya and a Colorful Walk",
        "description": "Ilya lives in a beautiful city of Chordalsk. There are \n    n\n houses on the\nstreet Ilya lives, they are numerated from \n    1\n to \n    n\n from left to\nright; the distance between every two neighboring houses is equal to \n    1\n\nunit. The neighboring houses are \n    1\n and \n    2\n, \n    2\n and \n    3\n,\n..., \n    n-1\n and \n    n\n. The houses \n    n\n and \n    1\n are not\nneighboring. The houses are colored in colors \n    c_1, c_2, \n    \u2026, c_n\n so\nthat the \n    i\n-th house is colored in the color \n    c_i\n. Everyone knows\nthat Chordalsk is not boring, so there are at least two houses colored in\ndifferent colors. Ilya wants to select two houses \n    i\n and \n    j\n so that\n\n    1 \n    \u2264 i < j \n    \u2264 n\n, and they have different colors: \n    c_i \n    \u2260\n    c_j\n. He will then walk from the house \n    i\n to the house \n    j\n the\ndistance of \n    (j-i)\n units. Ilya loves long walks, so he wants to choose\nthe houses so that the distance between them is the maximum possible. Help\nIlya, find this maximum possible distance. Input The first line contains a\nsingle integer \n    n\n (\n    3 \n    \u2264 n \n    \u2264 300\n     000\n) \u2014 the number of\ncities on the street. The second line contains \n    n\n integers \n    c_1, c_2,\n    \n    \u2026, c_n\n (\n    1 \n    \u2264 c_i \n    \u2264 n\n) \u2014 the colors of the houses. It\nis guaranteed that there is at least one pair of indices \n    i\n and \n    j\n\nso that \n    1 \n    \u2264 i < j \n    \u2264 n\n and \n    c_i \n    \u2260 c_j\n. Output Print a\nsingle integer \u2014 the maximum possible distance Ilya can walk. Examples Input 5\n1 2 3 2 3 Output 4 Input 3 1 2 1 Output 1 Input 7 1 1 3 1 1 1 1 Output 4 Note\nIn the first example the optimal way is to walk from the first house to the\nlast one, where Ilya can walk the distance of \n    5-1 = 4\n units. In the\nsecond example the optimal way is to either walk from the first house to the\nsecond or from the second to the third. Both these ways have the distance of\n\n    1\n unit. In the third example the optimal way is to walk from the third\nhouse to the last one, where Ilya can walk the distance of \n    7-3 = 4\n\nunits.\n\n",
        "cf_contest_id": 1119,
        "cf_index": "A",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 2 3 2 3\r\n",
                "4\r\n"
            ],
            [
                "3\r\n1 2 1\r\n",
                "1\r\n"
            ],
            [
                "7\r\n1 1 3 1 1 1 1\r\n",
                "4\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n1 5 2 10 9 3 3 2 9 5\r\n",
                "9\r\n"
            ],
            [
                "10\r\n6 5 7 1 10 10 2 3 6 6\r\n",
                "8\r\n"
            ],
            [
                "10\r\n5 5 9 1 2 5 10 6 8 5\r\n",
                "8\r\n"
            ],
            [
                "10\r\n6 6 6 10 2 9 3 3 9 6\r\n",
                "8\r\n"
            ],
            [
                "10\r\n8 8 8 3 4 3 1 8 8 8\r\n",
                "6\r\n"
            ],
            [
                "10\r\n4 2 10 9 8 5 7 6 6 6\r\n",
                "9\r\n"
            ],
            [
                "4\r\n1 2 1 2\r\n",
                "3\r\n"
            ],
            [
                "7\r\n1 5 5 5 5 5 1\r\n",
                "5\r\n"
            ],
            [
                "5\r\n1 2 1 2 1\r\n",
                "3\r\n"
            ],
            [
                "10\r\n1 1 1 1 1 1 1 2 1 1\r\n",
                "7\r\n"
            ],
            [
                "5\r\n1 1 2 1 1\r\n",
                "2\r\n"
            ],
            [
                "5\r\n1 2 2 1 2\r\n",
                "4\r\n"
            ],
            [
                "6\r\n1 2 3 1 2 3\r\n",
                "5\r\n"
            ],
            [
                "8\r\n1 2 3 4 5 1 2 3\r\n",
                "7\r\n"
            ],
            [
                "20\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 1 1\r\n",
                "17\r\n"
            ],
            [
                "10\r\n1 1 1 1 1 1 2 1 1 1\r\n",
                "6\r\n"
            ],
            [
                "8\r\n1 1 8 1 1 8 1 1\r\n",
                "5\r\n"
            ],
            [
                "5\r\n2 1 2 1 2\r\n",
                "3\r\n"
            ],
            [
                "7\r\n1 2 3 1 2 3 1\r\n",
                "5\r\n"
            ],
            [
                "5\r\n2 1 3 2 1\r\n",
                "4\r\n"
            ],
            [
                "12\r\n1 1 1 1 2 1 1 1 1 1 1 1\r\n",
                "7\r\n"
            ],
            [
                "3\r\n1 1 3\r\n",
                "2\r\n"
            ],
            [
                "10\r\n1 2 3 4 5 5 4 3 2 1\r\n",
                "8\r\n"
            ],
            [
                "6\r\n1 2 2 2 2 1\r\n",
                "4\r\n"
            ],
            [
                "8\r\n1 2 3 4 1 2 3 4\r\n",
                "7\r\n"
            ],
            [
                "6\r\n6 1 3 1 6 1\r\n",
                "5\r\n"
            ],
            [
                "7\r\n1 2 3 4 1 2 3\r\n",
                "6\r\n"
            ],
            [
                "6\r\n1 2 1 1 2 1\r\n",
                "4\r\n"
            ],
            [
                "15\r\n1 1 1 1 1 1 1 1 1 1 2 1 1 1 1\r\n",
                "10\r\n"
            ],
            [
                "6\r\n1 2 2 1 2 2\r\n",
                "5\r\n"
            ],
            [
                "4\r\n1 1 1 2\r\n",
                "3\r\n"
            ],
            [
                "10\r\n1 2 3 4 5 6 1 1 1 2\r\n",
                "9\r\n"
            ],
            [
                "20\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1\r\n",
                "13\r\n"
            ],
            [
                "5\r\n1 2 1 1 2\r\n",
                "4\r\n"
            ],
            [
                "9\r\n1 2 3 4 1 2 3 4 1\r\n",
                "7\r\n"
            ],
            [
                "9\r\n1 1 1 1 1 1 2 1 1\r\n",
                "6\r\n"
            ],
            [
                "8\r\n1 1 1 1 1 5 1 1\r\n",
                "5\r\n"
            ],
            [
                "6\r\n1 2 1 2 1 2\r\n",
                "5\r\n"
            ],
            [
                "41\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1\r\n",
                "39\r\n"
            ],
            [
                "7\r\n1 2 1 2 1 2 1\r\n",
                "5\r\n"
            ],
            [
                "6\r\n1 3 1 3 1 3\r\n",
                "5\r\n"
            ],
            [
                "6\r\n1 1 2 2 1 1\r\n",
                "3\r\n"
            ],
            [
                "4\r\n1 1 2 2\r\n",
                "3\r\n"
            ]
        ]
    }
]