[
    {
        "name": "Team Olympiad",
        "description": "The School \u21160 of the capital of Berland has n children studying in it. All the\nchildren in this school are gifted: some of them are good at programming, some\nare good at maths, others are good at PE (Physical Education). Hence, for each\nchild we know value ti: ti = 1, if the i-th child is good at programming, ti =\n2, if the i-th child is good at maths, ti = 3, if the i-th child is good at PE\nEach child happens to be good at exactly one of these three subjects. The Team\nScientific Decathlon Olympias requires teams of three students. The school\nteachers decided that the teams will be composed of three children that are\ngood at different subjects. That is, each team must have one mathematician,\none programmer and one sportsman. Of course, each child can be a member of no\nmore than one team. What is the maximum number of teams that the school will\nbe able to present at the Olympiad? How should the teams be formed for that?\nInput The first line contains integer n (1 \u2264 n \u2264 5000) \u2014 the number of\nchildren in the school. The second line contains n integers t1, t2, ..., tn (1\n\u2264 ti \u2264 3), where ti describes the skill of the i-th child. Output In the first\nline output integer w \u2014 the largest possible number of teams. Then print w\nlines, containing three numbers in each line. Each triple represents the\nindexes of the children forming the team. You can print both the teams, and\nthe numbers in the triplets in any order. The children are numbered from 1 to\nn in the order of their appearance in the input. Each child must participate\nin no more than one team. If there are several solutions, print any of them.\nIf no teams can be compiled, print the only line with value w equal to 0.\nExamples Input 7 1 3 1 3 2 1 2 Output 2 3 5 2 6 7 4 Input 4 2 1 1 2 Output 0\n\n",
        "cf_contest_id": 490,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n1 3 1 3 2 1 2\r\n",
                "2\r\n1 5 2\r\n3 7 4\r\n"
            ],
            [
                "4\r\n2 1 1 2\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2\r\n",
                "0\r\n"
            ],
            [
                "2\r\n3 1\r\n",
                "0\r\n"
            ],
            [
                "3\r\n2 1 2\r\n",
                "0\r\n"
            ],
            [
                "3\r\n1 2 3\r\n",
                "1\r\n1 2 3\r\n"
            ],
            [
                "12\r\n3 3 3 3 3 3 3 3 1 3 3 2\r\n",
                "1\r\n9 12 1\r\n"
            ],
            [
                "60\r\n3 3 1 2 2 1 3 1 1 1 3 2 2 2 3 3 1 3 2 3 2 2 1 3 3 2 3 1 2 2 2 1 3 2 1 1 3 3 1 1 1 3 1 2 1 1 3 3 3 2 3 2 3 2 2 2 1 1 1 2\r\n",
                "20\r\n3 4 1\r\n6 5 2\r\n8 12 7\r\n9 13 11\r\n10 14 15\r\n17 19 16\r\n23 21 18\r\n28 22 20\r\n32 26 24\r\n35 29 25\r\n36 30 27\r\n39 31 33\r\n40 34 37\r\n41 44 38\r\n43 50 42\r\n45 52 47\r\n46 54 48\r\n57 55 49\r\n58 56 51\r\n59 60 53\r\n"
            ],
            [
                "12\r\n3 1 1 1 1 1 1 2 1 1 1 1\r\n",
                "1\r\n2 8 1\r\n"
            ],
            [
                "22\r\n2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 1 2 2 2 2\r\n",
                "1\r\n18 1 11\r\n"
            ],
            [
                "138\r\n2 3 2 2 2 2 2 2 2 2 1 2 1 2 2 2 1 2 1 2 2 1 2 2 2 2 2 2 2 2 2 2 2 1 2 3 2 2 2 1 2 3 2 2 2 3 1 3 2 3 2 3 2 2 2 2 3 2 2 2 2 2 1 2 2 3 2 2 3 2 1 2 2 2 2 2 3 1 2 2 2 2 2 3 2 2 3 2 2 2 2 2 1 1 2 3 2 2 2 2 3 2 2 2 2 2 1 2 1 2 2 2 2 2 1 2 3 2 3 2 2 2 1 2 2 2 1 2 2 2 2 1 2 2 2 2 1 3\r\n",
                "18\r\n11 1 2\r\n13 3 36\r\n17 4 42\r\n19 5 46\r\n22 6 48\r\n34 7 50\r\n40 8 52\r\n47 9 57\r\n63 10 66\r\n71 12 69\r\n78 14 77\r\n93 15 84\r\n94 16 87\r\n107 18 96\r\n109 20 101\r\n115 21 117\r\n123 23 119\r\n127 24 138\r\n"
            ],
            [
                "203\r\n2 2 1 2 1 2 2 2 1 2 2 1 1 3 1 2 1 2 1 1 2 3 1 1 2 3 3 2 2 2 1 2 1 1 1 1 1 3 1 1 2 1 1 2 2 2 1 2 2 2 1 2 3 2 1 1 2 2 1 2 1 2 2 1 1 2 2 2 1 1 2 2 1 2 1 2 2 3 2 1 2 1 1 1 1 1 1 1 1 1 1 2 2 1 1 2 2 2 2 1 1 1 1 1 1 1 2 2 2 2 2 1 1 1 2 2 2 1 2 2 1 3 2 1 1 1 2 1 1 2 1 1 2 2 2 1 1 2 2 2 1 2 1 3 2 1 2 2 2 1 1 1 2 2 2 1 2 1 1 2 2 2 2 2 1 1 2 1 2 2 1 1 1 1 1 1 2 2 3 1 1 2 3 1 1 1 1 1 1 2 2 1 1 1 2 2 3 2 1 3 1 1 1\r\n",
                "13\r\n3 1 14\r\n5 2 22\r\n9 4 26\r\n12 6 27\r\n13 7 38\r\n15 8 53\r\n17 10 78\r\n19 11 122\r\n20 16 144\r\n23 18 179\r\n24 21 183\r\n31 25 197\r\n33 28 200\r\n"
            ],
            [
                "220\r\n1 1 3 1 3 1 1 3 1 3 3 3 3 1 3 3 1 3 3 3 3 3 1 1 1 3 1 1 1 3 2 3 3 3 1 1 3 3 1 1 3 3 3 3 1 3 3 1 1 1 2 3 1 1 1 2 3 3 3 2 3 1 1 3 1 1 1 3 2 1 3 2 3 1 1 3 3 3 1 3 1 1 1 3 3 2 1 3 2 1 1 3 3 1 1 1 2 1 1 3 2 1 2 1 1 1 3 1 3 3 1 2 3 3 3 3 1 3 1 1 1 1 2 3 1 1 1 1 1 1 3 2 3 1 3 1 3 1 1 3 1 3 1 3 1 3 1 3 3 2 3 1 3 3 1 3 3 3 3 1 1 3 3 3 3 1 1 3 3 3 2 1 1 1 3 3 1 3 3 3 1 1 1 3 1 3 3 1 1 1 2 3 1 1 3 1 1 1 1 2 3 1 1 2 3 3 1 3 1 3 3 3 3 1 3 2 3 1 1 3\r\n",
                "20\r\n1 31 3\r\n2 51 5\r\n4 56 8\r\n6 60 10\r\n7 69 11\r\n9 72 12\r\n14 86 13\r\n17 89 15\r\n23 97 16\r\n24 101 18\r\n25 103 19\r\n27 112 20\r\n28 123 21\r\n29 132 22\r\n35 150 26\r\n36 171 30\r\n39 191 32\r\n40 200 33\r\n45 204 34\r\n48 216 37\r\n"
            ],
            [
                "61\r\n2 3 1 3 2 2 2 3 1 3 2 3 1 2 1 1 2 2 2 2 3 2 3 1 2 1 3 1 3 2 1 1 3 2 1 3 3 3 1 3 3 1 1 3 1 3 2 2 1 2 2 2 1 3 2 3 1 3 3 1 1\r\n",
                "20\r\n3 1 2\r\n9 5 4\r\n13 6 8\r\n15 7 10\r\n16 11 12\r\n24 14 21\r\n26 17 23\r\n28 18 27\r\n31 19 29\r\n32 20 33\r\n35 22 36\r\n39 25 37\r\n42 30 38\r\n43 34 40\r\n45 47 41\r\n49 48 44\r\n53 50 46\r\n57 51 54\r\n60 52 56\r\n61 55 58\r\n"
            ],
            [
                "5\r\n1 2 2 3 3\r\n",
                "1\r\n1 2 4\r\n"
            ]
        ]
    }
]