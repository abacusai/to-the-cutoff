[
    {
        "name": "Perse-script",
        "description": "Two good friends were trying to make a new programming language called Perse-\nscript. The most important part of this language is strings. A string in\nPerse-script is put between characters \" So for example \"Hello\" is a string.\nBut Hello is a variable name or a keyword, which are not considered in this\nproblem. Perse-script is function-based. So there are no operators in this\nlanguage. For example for summing two numbers you have to write sum(a,b) and\nnot a+b. There are several functions for working on strings. These include:\nconcat(x,y) is a function which gets two strings x and y and puts y at the end\nof x and returns the result. For example concat(\"Hello\",\"World\") returns\n\"HelloWorld\". reverse(x) gets a single string x and reverses it. For example\nreverse(\"Hello\") returns \"olleH\". substr(x,a,b) gets a string x and two\nintegers a and b (1 \u2264 a \u2264 b \u2264 n, where n is the length of x). And returns the\nsubstring of x between indexes a and b, inclusive. For example\nsubstr(\"Hello\",2,4) returns \"ell\". substr(x,a,b,c) is another version of\nsubstr which works just like the last one but c is the step of adding. c is\npositive. For example substr(\"HelloWorld\",1,10,2) returns \"Hlool\". This substr\nmeans that you put the ath character , and then every cth character until you\nreach b.You're going to manipulate the string part of Perse-script. Given a\nstring expression, you should print its result. It is guaranteed that the\nexpression contains only strings shown by characters \" and the above\nfunctions. Commands in Perse-script are case-insensitive. So to call substr\nfunction you can write SUBsTr(). But you can't print as the result \"hElLo\"\ninstead of printing \"Hello\". See the samples for more information. Input A\nsingle line containing the correct expression. It is guaranteed that the total\nlength of this expression does not exceed 10^3 and that all the integers used\nin it are less than or equal to 100 by absolute value. The given string is\nnon-empty. All strings in the input which are placed between \"s consist of\nuppercase and lowercase Latin letters only. Output Print in single line the\nresulting string. It is guaranteed that an answer exists and that the length\nof the answer does not exceed 10^4. It is guaranteed that the answer is non-\nempty. Examples Input \"HelloWorld\" Output \"HelloWorld\" Input\nREVerse(substr(\"helloworld\",1,5)) Output \"olleh\" Input\nconCAT(rEveRSE(\"olleh\"),\"world\") Output \"helloworld\" Input\nreversE(concAT(substr(\"hello\",1,2),sUbstr(\"world\",1,5,1))) Output \"dlroweh\"\nInput suBstr(\"Noruz\",1,4,2) Output \"Nr\"\n\n",
        "cf_contest_id": 72,
        "cf_index": "D",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "expression parsing"
        ],
        "time_limit_seconds": 7.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "\"HelloWorld\"\r\n",
                "\"HelloWorld\"\r\n"
            ],
            [
                "REVerse(substr(\"helloworld\",1,5))\r\n",
                "\"olleh\"\r\n"
            ],
            [
                "conCAT(rEveRSE(\"olleh\"),\"world\")\r\n",
                "\"helloworld\"\r\n"
            ],
            [
                "reversE(concAT(substr(\"hello\",1,2),sUbstr(\"world\",1,5,1)))\r\n",
                "\"dlroweh\"\r\n"
            ],
            [
                "\"sflgdua\"\r\n",
                "\"sflgdua\"\r\n"
            ]
        ],
        "private_cases": [
            [
                "\"opCYmNScAgSwKgWRbaQXlhbGycBV\"\r\n",
                "\"opCYmNScAgSwKgWRbaQXlhbGycBV\"\r\n"
            ],
            [
                "suBsTr(suBstr(\"UQiJTzjCpStZlgoIfjUODzYSdUJUHbfEFQYKryFqerlzRQGkulBfuhCvlJyeHsVrbaBtHDRvXJIUabwzAkHPcOBGjgGJjlxwnOUYkhQCYoirwpr\",96,100),3,5)\r\n",
                "\"OUY\"\r\n"
            ],
            [
                "RevErse(rEvERsE(rEVeRse(\"qXkjexuHXamJZzbVhhoaHVbDnrbumSswwVrFigmDExyoEjFAIHEdNMYgdmbTjItyQXiKivZFOPESqYuJiDHfyQxwxItBShGkBvrveQmRDhvUmLJRdWQgBpmPlvQxnoIUnmzHBxStAsZCcGfGVDXAxzKJRpqNshBdcsorZerzra\")))\r\n",
                "\"arzreZroscdBhsNqpRJKzxAXDVGfGcCZsAtSxBHzmnUIonxQvlPmpBgQWdRJLmUvhDRmQevrvBkGhSBtIxwxQyfHDiJuYqSEPOFZviKiXQytIjTbmdgYMNdEHIAFjEoyxEDmgiFrVwwsSmubrnDbVHaohhVbzZJmaXHuxejkXq\"\r\n"
            ],
            [
                "concat(\"VNXHtkfcpqzPOtbzunzaUyvfXZzawSHPMnZItloovUDuIddDXtfbZKVFmNTikPGTfvToGyCox\",sUbStR(\"dWhKlrSaqGiUTzKCHWWxlrGBAHLPzIiTbanMTXSreXKy\",20,31,30))\r\n",
                "\"VNXHtkfcpqzPOtbzunzaUyvfXZzawSHPMnZItloovUDuIddDXtfbZKVFmNTikPGTfvToGyCoxx\"\r\n"
            ],
            [
                "SUBStr(\"Cxal\",1,4,65)\r\n",
                "\"C\"\r\n"
            ],
            [
                "coNcat(\"tdq\",rEverSE(sUbsTR(\"qKhnOQDs\",2,2)))\r\n",
                "\"tdqK\"\r\n"
            ],
            [
                "cOncat(sUBSTR(SUBStr(\"PLRB\",2,4),1,1),\"DgSTDqMrFakfcuBpbvjSQUOkXzrchRICWgB\")\r\n",
                "\"LDgSTDqMrFakfcuBpbvjSQUOkXzrchRICWgB\"\r\n"
            ],
            [
                "suBstr(\"Noruz\",1,4,2)\r\n",
                "\"Nr\"\r\n"
            ]
        ]
    }
]