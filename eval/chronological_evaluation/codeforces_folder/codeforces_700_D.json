[
    {
        "name": "Huffman Coding on Segment",
        "description": "Alice wants to send an important message to Bob. Message a = (a1, ..., an) is\na sequence of positive integers (characters). To compress the message Alice\nwants to use binary Huffman coding. We recall that binary Huffman code, or\nbinary prefix code is a function f, that maps each letter that appears in the\nstring to some binary string (that is, string consisting of characters '0' and\n'1' only) such that for each pair of different characters ai and aj string\nf(ai) is not a prefix of f(aj) (and vice versa). The result of the encoding of\nthe message a1, a2, ..., an is the concatenation of the encoding of each\ncharacter, that is the string f(a1)f(a2)... f(an). Huffman codes are very\nuseful, as the compressed message can be easily and uniquely decompressed, if\nthe function f is given. Code is usually chosen in order to minimize the total\nlength of the compressed message, i.e. the length of the string f(a1)f(a2)...\nf(an). Because of security issues Alice doesn't want to send the whole\nmessage. Instead, she picks some substrings of the message and wants to send\nthem separately. For each of the given substrings ali... ari she wants to know\nthe minimum possible length of the Huffman coding. Help her solve this\nproblem. Input The first line of the input contains the single integer n (1 \u2264\nn \u2264 100 000) \u2014 the length of the initial message. The second line contains n\nintegers a1, a2, ..., an (1 \u2264 ai \u2264 100 000) \u2014 characters of the message. Next\nline contains the single integer q (1 \u2264 q \u2264 100 000) \u2014 the number of queries.\nThen follow q lines with queries descriptions. The i-th of these lines\ncontains two integers li and ri (1 \u2264 li \u2264 ri \u2264 n) \u2014 the position of the left\nand right ends of the i-th substring respectively. Positions are numbered from\n1. Substrings may overlap in any way. The same substring may appear in the\ninput more than once. Output Print q lines. Each line should contain a single\ninteger \u2014 the minimum possible length of the Huffman encoding of the substring\nali... ari. Example Input 7 1 2 1 3 1 2 1 5 1 7 1 3 3 5 2 4 4 4 Output 10 3 3\n5 0 Note In the first query, one of the optimal ways to encode the substring\nis to map 1 to \"0\", 2 to \"10\" and 3 to \"11\". Note that it is correct to map\nthe letter to the empty substring (as in the fifth query from the sample).\n\n",
        "cf_contest_id": 700,
        "cf_index": "D",
        "cf_rating": 3100,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n1 2 1 3 1 2 1\r\n5\r\n1 7\r\n1 3\r\n3 5\r\n2 4\r\n4 4\r\n",
                "10\r\n3\r\n3\r\n5\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n3 3 5 1 4\r\n15\r\n3 5\r\n1 1\r\n4 4\r\n3 4\r\n1 3\r\n4 5\r\n5 5\r\n1 4\r\n3 3\r\n2 3\r\n2 4\r\n1 5\r\n2 2\r\n2 5\r\n1 2\r\n",
                "5\r\n0\r\n0\r\n2\r\n3\r\n2\r\n0\r\n6\r\n0\r\n2\r\n5\r\n10\r\n0\r\n8\r\n0\r\n"
            ],
            [
                "10\r\n4 4 4 6 6 6 6 6 4 4\r\n55\r\n1 6\r\n8 9\r\n8 10\r\n6 7\r\n1 10\r\n3 7\r\n2 10\r\n9 10\r\n1 8\r\n3 10\r\n4 4\r\n6 6\r\n7 7\r\n5 8\r\n2 7\r\n2 6\r\n4 6\r\n1 1\r\n4 10\r\n3 5\r\n2 9\r\n4 5\r\n2 4\r\n3 3\r\n4 9\r\n3 8\r\n1 3\r\n1 5\r\n7 8\r\n5 5\r\n5 9\r\n3 4\r\n7 10\r\n10 10\r\n7 9\r\n6 10\r\n2 5\r\n4 8\r\n1 7\r\n2 3\r\n4 7\r\n8 8\r\n5 7\r\n6 8\r\n6 9\r\n9 9\r\n2 8\r\n2 2\r\n3 9\r\n1 4\r\n5 10\r\n5 6\r\n3 6\r\n1 2\r\n1 9\r\n",
                "6\r\n2\r\n3\r\n0\r\n10\r\n5\r\n9\r\n0\r\n8\r\n8\r\n0\r\n0\r\n0\r\n0\r\n6\r\n5\r\n0\r\n0\r\n7\r\n3\r\n8\r\n0\r\n3\r\n0\r\n6\r\n6\r\n0\r\n5\r\n0\r\n0\r\n5\r\n2\r\n4\r\n0\r\n3\r\n5\r\n4\r\n0\r\n7\r\n0\r\n0\r\n0\r\n0\r\n0\r\n4\r\n0\r\n7\r\n0\r\n7\r\n4\r\n6\r\n0\r\n4\r\n0\r\n9\r\n"
            ]
        ]
    }
]