[
    {
        "name": "Segments on the Line",
        "description": "You are a given a list of integers \n    a_1, a_2, \n    \u2026, a_n\n and \n    s\n\nof its segments \n    [l_j; r_j]\n (where \n    1 \n    \u2264 l_j \n    \u2264 r_j \n    \u2264 n\n).\nYou need to select exactly \n    m\n segments in such a way that the \n    k\n-th\norder statistic of the multiset of \n    a_i\n, where \n    i\n is contained in at\nleast one segment, is the smallest possible. If it's impossible to select a\nset of \n    m\n segments in such a way that the multiset contains at least\n\n    k\n elements, print -1. The \n    k\n-th order statistic of a multiset is\nthe value of the \n    k\n-th element after sorting the multiset in non-\ndescending order. Input The first line contains four integers \n    n\n,\n\n    s\n, \n    m\n and \n    k\n (\n    1 \n    \u2264 m \n    \u2264 s \n    \u2264 1500\n, \n    1 \n    \u2264 k\n    \n    \u2264 n \n    \u2264 1500\n) \u2014 the size of the list, the number of segments, the\nnumber of segments to choose and the statistic number. The second line\ncontains \n    n\n integers \n    a_i\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the\nvalues of the numbers in the list. Each of the next \n    s\n lines contains two\nintegers \n    l_i\n and \n    r_i\n (\n    1 \n    \u2264 l_i \n    \u2264 r_i \n    \u2264 n\n) \u2014 the\nendpoints of the segments. It is possible that some segments coincide. Output\nPrint exactly one integer \u2014 the smallest possible \n    k\n-th order statistic,\nor -1 if it's impossible to choose segments in a way that the multiset\ncontains at least \n    k\n elements. Examples Input 4 3 2 2 3 1 3 2 1 2 2 3 4 4\nOutput 2 Input 5 2 1 1 1 2 3 4 5 2 4 1 5 Output 1 Input 5 3 3 5 5 5 2 1 1 1 2\n2 3 3 4 Output -1 Note In the first example, one possible solution is to\nchoose the first and the third segment. Together they will cover three\nelements of the list (all, except for the third one). This way the \n    2\n-nd\norder statistic for the covered elements is \n    2\n.\n\n",
        "cf_contest_id": 1055,
        "cf_index": "E",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dp"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 3 2 2\r\n3 1 3 2\r\n1 2\r\n2 3\r\n4 4\r\n",
                "2\r\n"
            ],
            [
                "5 2 1 1\r\n1 2 3 4 5\r\n2 4\r\n1 5\r\n",
                "1\r\n"
            ],
            [
                "5 3 3 5\r\n5 5 2 1 1\r\n1 2\r\n2 3\r\n3 4\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 5 2 1\r\n1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n",
                "1\r\n"
            ],
            [
                "10 1 1 8\r\n1 1 1 991992993 1 991992993 3 6664666 1000000000 999999999\r\n3 10\r\n",
                "1000000000\r\n"
            ],
            [
                "5 10 1 1\r\n1000000000 1000000000 1000000000 1 1000000000\r\n1 1\r\n1 3\r\n5 5\r\n1 1\r\n2 3\r\n3 3\r\n3 4\r\n1 2\r\n2 2\r\n3 3\r\n",
                "1\r\n"
            ],
            [
                "10 5 2 4\r\n10 11 10 9 4 4 3 2 10 11\r\n1 3\r\n2 5\r\n3 6\r\n5 8\r\n8 10\r\n",
                "4\r\n"
            ],
            [
                "10 5 4 10\r\n1 2 3 4 5 6 7 8 9 10\r\n3 8\r\n4 7\r\n5 6\r\n1 10\r\n2 9\r\n",
                "10\r\n"
            ],
            [
                "6 3 2 3\r\n1000000000 1000000000 1000000000 3 1 2\r\n6 6\r\n5 5\r\n1 4\r\n",
                "1000000000\r\n"
            ],
            [
                "5 5 5 5\r\n1 2 3 4 5\r\n1 4\r\n2 3\r\n3 3\r\n2 2\r\n1 4\r\n",
                "-1\r\n"
            ]
        ]
    }
]