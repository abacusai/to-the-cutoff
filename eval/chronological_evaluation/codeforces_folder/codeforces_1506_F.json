[
    {
        "name": "Triangular Paths",
        "description": "Consider an infinite triangle made up of layers. Let's number the layers,\nstarting from one, from the top of the triangle (from top to bottom). The\n\n    k\n-th layer of the triangle contains \n    k\n points, numbered from left\nto right. Each point of an infinite triangle is described by a pair of numbers\n\n    (r, c)\n (\n    1 \n    \u2264 c \n    \u2264 r\n), where \n    r\n is the number of the\nlayer, and \n    c\n is the number of the point in the layer. From each point\n\n    (r, c)\n there are two directed edges to the points \n    (r+1, c)\n and\n\n    (r+1, c+1)\n, but only one of the edges is activated. If \n    r + c\n is\neven, then the edge to the point \n    (r+1, c)\n is activated, otherwise the\nedge to the point \n    (r+1, c+1)\n is activated. Look at the picture for a\nbetter understanding. Activated edges are colored in black. Non-activated\nedges are colored in gray. From the point \n    (r_1, c_1)\n it is possible to\nreach the point \n    (r_2, c_2)\n, if there is a path between them only from\nactivated edges. For example, in the picture above, there is a path from\n\n    (1, 1)\n to \n    (3, 2)\n, but there is no path from \n    (2, 1)\n to \n    (1,\n    1)\n. Initially, you are at the point \n    (1, 1)\n. For each turn, you can:\nReplace activated edge for point \n    (r, c)\n. That is if the edge to the\npoint \n    (r+1, c)\n is activated, then instead of it, the edge to the point\n\n    (r+1, c+1)\n becomes activated, otherwise if the edge to the point\n\n    (r+1, c+1)\n, then instead if it, the edge to the point \n    (r+1, c)\n\nbecomes activated. This action increases the cost of the path by \n    1\n; Move\nfrom the current point to another by following the activated edge. This action\ndoes not increase the cost of the path. You are given a sequence of \n    n\n\npoints of an infinite triangle \n    (r_1, c_1), (r_2, c_2), \n    \u2026, (r_n,\n    c_n)\n. Find the minimum cost path from \n    (1, 1)\n, passing through all\n\n    n\n points in arbitrary order. Input The first line contains one integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) is the number of test cases. Then \n    t\n\ntest cases follow. Each test case begins with a line containing one integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) is the number of points to\nvisit. The second line contains \n    n\n numbers \n    r_1, r_2, \n    \u2026, r_n\n\n(\n    1 \n    \u2264 r_i \n    \u2264 10^9\n), where \n    r_i\n is the number of the layer in\nwhich \n    i\n-th point is located. The third line contains \n    n\n numbers\n\n    c_1, c_2, \n    \u2026, c_n\n (\n    1 \n    \u2264 c_i \n    \u2264 r_i\n), where \n    c_i\n\nis the number of the \n    i\n-th point in the \n    r_i\n layer. It is guaranteed\nthat all \n    n\n points are distinct. It is guaranteed that there is always at\nleast one way to traverse all \n    n\n points. It is guaranteed that the sum of\n\n    n\n over all test cases does not exceed \n    2 \n    \u00b7 10^5\n. Output For\neach test case, output the minimum cost of a path passing through all points\nin the corresponding test case. Example Input 4 3 1 4 2 1 3 1 2 2 4 2 3 2 1\n1000000000 1 1000000000 4 3 10 5 8 2 5 2 4 Output 0 1 999999999 2\n\n",
        "cf_contest_id": 1506,
        "cf_index": "F",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graphs",
            "math",
            "shortest paths",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3\r\n1 4 2\r\n1 3 1\r\n2\r\n2 4\r\n2 3\r\n2\r\n1 1000000000\r\n1 1000000000\r\n4\r\n3 10 5 8\r\n2 5 2 4\r\n",
                "0\r\n1\r\n999999999\r\n2\r\n"
            ]
        ],
        "private_cases": []
    }
]