[
    {
        "name": "Showing Off",
        "description": "Another dull quarantine day was going by when BThero decided to start\nresearching matrices of size \n    n \n    \u00d7 m\n. The rows are numerated\n\n    1\n through \n    n\n from top to bottom, and the columns are numerated\n\n    1\n through \n    m\n from left to right. The cell in the \n    i\n-th row and\n\n    j\n-th column is denoted as \n    (i, j)\n. For each cell \n    (i, j)\n\nBThero had two values: The cost of the cell, which is a single positive\ninteger. The direction of the cell, which is one of characters L, R, D, U.\nThose characters correspond to transitions to adjacent cells \n    (i, j - 1)\n,\n\n    (i, j + 1)\n, \n    (i + 1, j)\n or \n    (i - 1, j)\n, respectively. No\ntransition pointed outside of the matrix. Let us call a cell \n    (i_2, j_2)\n\nreachable from \n    (i_1, j_1)\n, if, starting from \n    (i_1, j_1)\n and\nrepeatedly moving to the adjacent cell according to our current direction, we\nwill, sooner or later, visit \n    (i_2, j_2)\n. BThero decided to create\nanother matrix from the existing two. For a cell \n    (i, j)\n, let us denote\n\n    S_i, j\n as a set of all reachable cells from it (including \n    (i, j)\n\nitself). Then, the value at the cell \n    (i, j)\n in the new matrix will be\nequal to the sum of costs of all cells in \n    S_i, j\n. After quickly\ncomputing the new matrix, BThero immediately sent it to his friends. However,\nhe did not save any of the initial matrices! Help him to restore any two valid\nmatrices, which produce the current one. Input The first line of input file\ncontains a single integer \n    T\n (\n    1 \n    \u2264 T \n    \u2264 100\n) denoting the\nnumber of test cases. The description of \n    T\n test cases follows. First\nline of a test case contains two integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n\n    \n    \u00b7 m \n    \u2264 10^5\n). Each of the following \n    n\n lines contain exactly\n\n    m\n integers \u2014 the elements of the produced matrix. Each element belongs\nto the segment \n    [2, 10^9]\n. It is guaranteed that \n    \u2211(n \n    \u00b7\n    m)\n over all test cases does not exceed \n    10^5\n. Output For each test\ncase, if an answer does not exist, print a single word NO. Otherwise, print\nYES and both matrices in the same format as in the input. The first matrix\nshould be the cost matrix and the second matrix should be the direction\nmatrix. All integers in the cost matrix should be positive. All characters in\nthe direction matrix should be valid. No direction should point outside of the\nmatrix. Example Input 2 3 4 7 6 7 8 5 5 4 4 5 7 4 4 1 1 5 Output YES 1 1 1 1 2\n1 1 1 3 2 1 1 R D L L D R D L U L R U NO\n\n",
        "cf_contest_id": 1416,
        "cf_index": "F",
        "cf_rating": 3300,
        "difficulty": 0,
        "cf_tags": [
            "flows",
            "graph matchings",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n3 4\r\n7 6 7 8\r\n5 5 4 4\r\n5 7 4 4\r\n1 1\r\n5\r\n",
                "YES\r\n1 1 1 1\r\n1 1 1 3\r\n4 3 3 1\r\nR D L L\r\nD R D D\r\nU R U U\r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n5 5\r\n4 4 2 2 2\r\n4 3 4 3 2\r\n3 3 4 3 3\r\n3 3 3 3 4\r\n3 3 4 3 3\r\n5 5\r\n2 2 4 4 4\r\n2 2 2 4 3\r\n2 4 3 3 3\r\n4 3 3 3 3\r\n3 3 4 4 3\r\n5 5\r\n2 2 3 4 3\r\n4 3 3 3 3\r\n3 3 3 3 4\r\n3 4 4 3 3\r\n3 4 2 2 3\r\n5 5\r\n3 2 4 3 4\r\n4 2 2 2 3\r\n2 2 4 4 3\r\n3 4 3 3 3\r\n4 3 3 4 4\r\n",
                "YES\r\n3 2 1 1 1\r\n1 2 1 1 1\r\n2 1 1 1 1\r\n1 2 1 2 1\r\n2 1 1 1 2\r\nD R R L D\r\nU D R R U\r\nD U R D U\r\nU R L U U\r\nR L R R L\r\nYES\r\n1 1 2 1 3\r\n1 1 1 1 1\r\n1 1 1 1 2\r\n1 2 1 2 1\r\n2 1 1 1 2\r\nR L L R L\r\nD R L R D\r\nU R U D U\r\nR R L U D\r\nR L U R U\r\nYES\r\n1 1 1 1 2\r\n1 1 1 2 1\r\n2 1 2 1 1\r\n1 1 1 2 1\r\n2 2 1 1 1\r\nR L L R D\r\nR U D D U\r\nR L U U U\r\nD U R R L\r\nU R R L L\r\nYES\r\n1 1 1 1 1\r\n2 1 1 1 1\r\n1 1 2 1 2\r\n1 1 1 2 1\r\n1 1 2 1 1\r\nR D R D L\r\nR U R L L\r\nR L U R D\r\nU R R L U\r\nR R L U U\r\n"
            ]
        ]
    }
]