[
    {
        "name": "Binary String",
        "description": "You are given a string \n    s\n consisting of characters 0 and/or 1. You have\nto remove several (possibly zero) characters from the beginning of the string,\nand then several (possibly zero) characters from the end of the string. The\nstring may become empty after the removals. The cost of the removal is the\nmaximum of the following two values: the number of characters 0 left in the\nstring; the number of characters 1 removed from the string. What is the\nminimum cost of removal you can achieve? Input The first line contains one\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. Each\ntest case consists of one line containing the string \n    s\n (\n    1 \n    \u2264 |s|\n    \n    \u2264 2 \n    \u00b7 10^5\n), consisting of characters 0 and/or 1. The total\nlength of strings \n    s\n in all test cases does not exceed \n    2 \n    \u00b7\n    10^5\n. Output For each test case, print one integer \u2014 the minimum cost of\nremoval you can achieve. Example Input 5 101110110 1001001001001 0000111111\n00000 1111 Output 1 3 0 0 0 Note Consider the test cases of the example: in\nthe first test case, it's possible to remove two characters from the beginning\nand one character from the end. Only one 1 is deleted, only one 0 remains, so\nthe cost is \n    1\n; in the second test case, it's possible to remove three\ncharacters from the beginning and six characters from the end. Two characters\n0 remain, three characters 1 are deleted, so the cost is \n    3\n; in the third\ntest case, it's optimal to remove four characters from the beginning; in the\nfourth test case, it's optimal to remove the whole string; in the fifth test\ncase, it's optimal to leave the string as it is.\n\n",
        "cf_contest_id": 1680,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "greedy",
            "strings",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5\r\n101110110\r\n1001001001001\r\n0000111111\r\n00000\r\n1111\r\n",
                "1\r\n3\r\n0\r\n0\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1011111100000011111011110001\r\n",
                "6\r\n"
            ],
            [
                "1\r\n1111100000111110000011\r\n",
                "5\r\n"
            ],
            [
                "1\r\n001000001100100110110101011101011110110011011111000010100100100111111110101010010111010010000101011100111010010000000000010101110010011110110110000100001000001110110000000010100101101011001000110101000110100001111011010001011111101000111000\r\n",
                "54\r\n"
            ]
        ]
    }
]