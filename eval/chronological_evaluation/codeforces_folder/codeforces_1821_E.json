[
    {
        "name": "Rearrange Brackets",
        "description": "A regular bracket sequence is a bracket sequence that can be transformed into\na correct arithmetic expression by inserting characters \"1\" and \"+\" between\nthe original characters of the sequence. For example: bracket sequences \"()()\"\nand \"(())\" are regular (the resulting expressions are: \"(1)+(1)\" and\n\"((1+1)+1)\"); bracket sequences \")(\", \"(\" and \")\" are not. You are given a\nregular bracket sequence. In one move, you can remove a pair of adjacent\nbrackets such that the left one is an opening bracket and the right one is a\nclosing bracket. Then concatenate the resulting parts without changing the\norder. The cost of this move is the number of brackets to the right of the\nright bracket of this pair. The cost of the regular bracket sequence is the\nsmallest total cost of the moves required to make the sequence empty.\nActually, you are not removing any brackets. Instead, you are given a regular\nbracket sequence and an integer \n    k\n. You can perform the following\noperation at most \n    k\n times: extract some bracket from the sequence and\ninsert it back at any position (between any two brackets, at the start or at\nthe end; possibly, at the same place it was before). After all operations are\nperformed, the bracket sequence has to be regular. What is the smallest\npossible cost of the resulting regular bracket sequence? Input The first line\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of\ntestcases. The first line of each testcase contains a single integer \n    k\n\n(\n    0 \n    \u2264 k \n    \u2264 5\n) \u2014 the maximum number of operations you can perform.\nThe second line contains a non-empty regular bracket sequence, it consists\nonly of characters '(' and ')'. The total length of the regular bracket\nsequences over all testcases doesn't exceed \n    2 \n    \u00b7 10^5\n. Output For\neach testcase, print a single integer \u2014 the smallest possible cost of the\nregular bracket sequence after you perform at most \n    k\n operations on it.\nExample Input 7 0 () 0 (()) 1 (()) 5 () 1 (()()(())) 2 ((())()(()())((()))) 3\n((())()(()())((()))) Output 0 1 0 0 1 4 2\n\n",
        "cf_contest_id": 1821,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dp",
            "greedy",
            "sortings",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n0\r\n()\r\n0\r\n(())\r\n1\r\n(())\r\n5\r\n()\r\n1\r\n(()()(()))\r\n2\r\n((())()(()())((())))\r\n3\r\n((())()(()())((())))\r\n",
                "0\r\n1\r\n0\r\n0\r\n1\r\n4\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n0\r\n(())\r\n0\r\n(())\r\n",
                "1\r\n1\r\n"
            ]
        ]
    }
]