[
    {
        "name": "Solve The Maze",
        "description": "Vivek has encountered a problem. He has a maze that can be represented as an\n\n    n \n    \u00d7 m\n grid. Each of the grid cells may represent the following:\nEmpty \u2014 '.' Wall \u2014 '#' Good person \u2014 'G' Bad person \u2014 'B' The only escape from\nthe maze is at cell \n    (n, m)\n. A person can move to a cell only if it\nshares a side with their current cell and does not contain a wall. Vivek wants\nto block some of the empty cells by replacing them with walls in such a way,\nthat all the good people are able to escape, while none of the bad people are\nable to. A cell that initially contains 'G' or 'B' cannot be blocked and can\nbe travelled through. Help him determine if there exists a way to replace some\n(zero or more) empty cells with walls to satisfy the above conditions. It is\nguaranteed that the cell \n    (n,m)\n is empty. Vivek can also block this cell.\nInput The first line contains one integer \n    t\n \n    (1 \n    \u2264 t \n    \u2264 100)\n\n\u2014 the number of test cases. The description of the test cases follows. The\nfirst line of each test case contains two integers \n    n\n, \n    m\n \n    (1\n    \n    \u2264 n, m \n    \u2264 50)\n \u2014 the number of rows and columns in the maze. Each of\nthe next \n    n\n lines contain \n    m\n characters. They describe the layout of\nthe maze. If a character on a line equals '.', the corresponding cell is\nempty. If it equals '#', the cell has a wall. 'G' corresponds to a good person\nand 'B' corresponds to a bad person. Output For each test case, print \"Yes\" if\nthere exists a way to replace some empty cells with walls to satisfy the given\nconditions. Otherwise print \"No\" You may print every letter in any case (upper\nor lower). Example Input 6 1 1 . 1 2 G. 2 2 #B G. 2 3 G.# B#. 3 3 #B. #.. GG.\n2 2 #B B. Output Yes Yes No No Yes Yes Note For the first and second test\ncases, all conditions are already satisfied. For the third test case, there is\nonly one empty cell \n    (2,2)\n, and if it is replaced with a wall then the\ngood person at \n    (1,2)\n will not be able to escape. For the fourth test\ncase, the good person at \n    (1,1)\n cannot escape. For the fifth test case,\nVivek can block the cells \n    (2,3)\n and \n    (2,2)\n. For the last test case,\nVivek can block the destination cell \n    (2, 2)\n.\n\n",
        "cf_contest_id": 1365,
        "cf_index": "D",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy",
            "implementation",
            "shortest paths"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n1 1\r\n.\r\n1 2\r\nG.\r\n2 2\r\n#B\r\nG.\r\n2 3\r\nG.#\r\nB#.\r\n3 3\r\n#B.\r\n#..\r\nGG.\r\n2 2\r\n#B\r\nB.\r\n",
                "Yes\r\nYes\r\nNo\r\nNo\r\nYes\r\nYes\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n1 2\r\nG.\r\n1 2\r\n#.\r\n1 2\r\n..\r\n1 2\r\nB.\r\n",
                "Yes\r\nYes\r\nYes\r\nYes\r\n"
            ],
            [
                "1\r\n1 1\r\n.\r\n",
                "Yes\r\n"
            ]
        ]
    }
]