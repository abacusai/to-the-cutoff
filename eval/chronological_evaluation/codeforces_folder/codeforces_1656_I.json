[
    {
        "name": "Neighbour Ordering",
        "description": "Given an undirected graph \n    G\n, we say that a neighbour ordering is an\nordered list of all the neighbours of a vertex for each of the vertices of\n\n    G\n. Consider a given neighbour ordering of \n    G\n and three vertices\n\n    u\n, \n    v\n and \n    w\n, such that \n    v\n is a neighbor of \n    u\n and\n\n    w\n. We write \n    u <_v w\n if \n    u\n comes after \n    w\n in \n    v\n's\nneighbor list. A neighbour ordering is said to be good if, for each simple\ncycle \n    v_1, v_2, \n    \u2026, v_c\n of the graph, one of the following is\nsatisfied: \n    v_1 <_v_2 v_3, v_2 <_v_3 v_4, \n    \u2026, v_c-2 <_v_c-1\n    v_c, v_c-1 <_v_c v_1, v_c <_v_1 v_2\n. \n    v_1 >_v_2 v_3, v_2 >_v_3\n    v_4, \n    \u2026, v_c-2 >_v_c-1 v_c, v_c-1 >_v_c v_1, v_c >_v_1\n    v_2\n. Given a graph \n    G\n, determine whether there exists a good neighbour\nordering for it and construct one if it does. Input The input consists of\nmultiple test cases. The first line contains a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. Description of the test\ncases follows. The first line of each test case contains two integers \n    n\n\nand \n    m\n (\n    2 \n    \u2264 n \n    \u2264 3 \n    \u00b7 10^5\n, \n    1 \n    \u2264 m \n    \u2264 3\n    \n    \u00b7 10^5\n), the number of vertices and the number of edges of the graph.\nThe next \n    m\n lines each contain two integers \n    u, v\n (\n    0 \n    \u2264 u, v\n    < n\n), denoting that there is an edge connecting vertices \n    u\n and\n\n    v\n. It is guaranteed that the graph is connected and there are no loops\nor multiple edges between the same vertices. The sum of \n    n\n and the sum of\n\n    m\n for all test cases are at most \n    3 \n    \u00b7 10^5\n. Output For each\ntest case, output one line with YES if there is a good neighbour ordering,\notherwise output one line with NO. You can print each letter in any case\n(upper or lower). If the answer is YES, additionally output \n    n\n lines\ndescribing a good neighbour ordering. In the \n    i\n-th line, output the\nneighbours of vertex \n    i\n in order. If there are multiple good neigbour\norderings, print any. Example Input 3 5 6 0 1 0 2 1 2 2 3 3 4 4 1 2 1 0 1 6 10\n0 1 2 0 0 3 0 4 1 2 1 4 2 3 2 5 3 5 4 5 Output YES 1 2 4 2 0 0 1 3 2 4 3 1 YES\n1 0 NO\n\n",
        "cf_contest_id": 1656,
        "cf_index": "I",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graphs"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n5 6\r\n0 1\r\n0 2\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n2 1\r\n0 1\r\n6 10\r\n0 1\r\n2 0\r\n0 3\r\n0 4\r\n1 2\r\n1 4\r\n2 3\r\n2 5\r\n3 5\r\n4 5\r\n",
                "YES\r\n1 2 \r\n4 2 0 \r\n0 1 3 \r\n2 4 \r\n3 1 \r\nYES\r\n1 \r\n0 \r\nNO\r\n"
            ]
        ],
        "private_cases": []
    }
]