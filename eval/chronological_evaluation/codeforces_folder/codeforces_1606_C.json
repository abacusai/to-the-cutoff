[
    {
        "name": "Banknotes",
        "description": "In Berland, \n    n\n different types of banknotes are used. Banknotes of the\n\n    i\n-th type have denomination \n    10^a_i\n burles (burles are the\ncurrency used in Berland); the denomination of banknotes of the first type is\nexactly \n    1\n. Let's denote \n    f(s)\n as the minimum number of banknotes\nrequired to represent exactly \n    s\n burles. For example, if the\ndenominations of banknotes used in Berland are \n    1\n, \n    10\n and\n\n    100\n, then \n    f(59) = 14\n: \n    9\n banknotes with denomination of\n\n    1\n burle and \n    5\n banknotes with denomination of \n    10\n burles can\nbe used to represent exactly \n    9 \n    \u00b7 1 + 5 \n    \u00b7 10 = 59\n burles, and\nthere's no way to do it with fewer banknotes. For a given integer \n    k\n,\nfind the minimum positive number of burles \n    s\n that cannot be represented\nwith \n    k\n or fewer banknotes (that is, \n    f(s) > k\n). Input The first\nline contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 number\nof test cases. The first line of each test case contains two integers \n    n\n\nand \n    k\n (\n    1 \n    \u2264 n \n    \u2264 10; 1 \n    \u2264 k \n    \u2264 10^9\n). The next line\ncontains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0 = a_1 < a_2 <\n    \n    \u2026 < a_n \n    \u2264 9\n). Output For each test case, print one integer \u2014 the\nminimum positive number of burles \n    s\n that cannot be represented with\n\n    k\n or fewer banknotes. Example Input 4 3 13 0 1 2 2 777 0 4 3 255 0 1 3\n10 1000000000 0 1 2 3 4 5 6 7 8 9 Output 59 778 148999 999999920999999999\n\n",
        "cf_contest_id": 1606,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3 13\r\n0 1 2\r\n2 777\r\n0 4\r\n3 255\r\n0 1 3\r\n10 1000000000\r\n0 1 2 3 4 5 6 7 8 9\r\n",
                "59\r\n778\r\n148999\r\n999999920999999999\r\n"
            ]
        ],
        "private_cases": []
    }
]