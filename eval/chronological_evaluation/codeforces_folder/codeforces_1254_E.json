[
    {
        "name": "Send Tree to Charlie",
        "description": "Christmas was knocking on the door, and our protagonist, Bob, was preparing a\nspectacular present for his long-time second best friend Charlie. As chocolate\nboxes are lame, he decided to decorate a tree instead. Bob's tree can be\nrepresented as an undirected connected graph with \n    n\n nodes (numbered\n\n    1\n to \n    n\n) and \n    n-1\n edges. Initially, Bob placed a decoration\nwith label \n    i\n on node \n    i\n, for each \n    1 \n    \u2264 i \n    \u2264 n\n. However,\nas such a simple arrangement is lame, he decided to shuffle the decorations a\nbit. Formally, Bob did the following steps: First, he listed the \n    n-1\n\nedges in some order. Then, he considered the edges one by one in that order.\nFor each edge \n    (u, v)\n, he swapped the decorations of node \n    u\n with\nthe one of node \n    v\n.After finishing, Bob seemed satisfied with the\narrangement, so he went to sleep. The next morning, Bob wakes up only to find\nout that his beautiful arrangement has been ruined! Last night, Bob's younger\nbrother Bobo dropped some of the decorations on the floor while he was playing\nwith the tree. Fortunately, no decorations were lost, so Bob can repair the\ntree in no time. However, he completely forgets how the tree looked like\nyesterday. Therefore, given the labels of the decorations still on the tree,\nBob wants to know the number of possible configurations of the tree. As the\nresult can be quite large, Bob will be happy if you can output the result\nmodulo \n    1000000007\n (\n    10^9+7\n). Note that, it is possible that there\nexists no possible configurations. Input The first line contains a single\ninteger \n    n\n (\n    2 \n    \u2264 n \n    \u2264 500\n     000\n) \u2014 the number of nodes.\nEach of the next \n    n - 1\n lines contains two integers \n    u\n and \n    v\n\n(\n    1 \n    \u2264 u, v \n    \u2264 n\n), denoting that there is an edge connecting two\nnodes \n    u\n and \n    v\n. It is guaranteed that the given edges form a tree.\nThe last line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0\n    \n    \u2264 a_i \n    \u2264 n\n). For each \n    i\n, \n    a_i = 0\n means that the\ndecoration of node \n    i\n has been dropped on the floor. Otherwise, \n    a_i\n\nis the label of the decoration of node \n    i\n. It is guaranteed that no label\nappears more than once. Output Output the number of possible configurations\nmodulo \n    1000000007\n (\n    10^9+7\n). Examples Input 4 3 4 2 4 4 1 0 4 0 0\nOutput 2 Input 5 1 2 2 4 3 4 5 4 0 0 0 0 0 Output 12 Input 3 1 2 1 3 1 0 0\nOutput 0 Note In the first example, the possible configurations of the tree\nare \n    [2, 4, 1, 3]\n and \n    [3, 4, 2, 1]\n. In the second example, note\nthat while there are \n    4! = 24\n possible permutations of the edges, each of\nthem results in a possible configuration, there are only \n    12\n different\nconfigurations. In the third example, it is easy to see that the decoration\n\n    1\n cannot stay at node \n    1\n after the swaps.\n\n",
        "cf_contest_id": 1254,
        "cf_index": "E",
        "cf_rating": 3300,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "dfs and similar",
            "dsu",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4\r\n3 4\r\n2 4\r\n4 1\r\n0 4 0 0\r\n",
                "2"
            ],
            [
                "5\r\n1 2\r\n2 4\r\n3 4\r\n5 4\r\n0 0 0 0 0\r\n",
                "12"
            ],
            [
                "3\r\n1 2\r\n1 3\r\n1 0 0\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "7\r\n1 3\r\n3 5\r\n2 4\r\n7 3\r\n4 6\r\n1 2\r\n7 0 0 0 0 2 0\r\n",
                "2"
            ],
            [
                "10\r\n6 2\r\n8 9\r\n1 4\r\n1 9\r\n8 3\r\n7 1\r\n3 5\r\n9 2\r\n10 1\r\n7 5 0 0 3 0 10 4 0 0\r\n",
                "1"
            ],
            [
                "2\r\n2 1\r\n0 0\r\n",
                "1"
            ],
            [
                "2\r\n2 1\r\n1 0\r\n",
                "0\r\n"
            ]
        ]
    }
]