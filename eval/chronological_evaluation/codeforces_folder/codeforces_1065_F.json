[
    {
        "name": "Up and Down the Tree",
        "description": "You are given a tree with \n    n\n vertices; its root is vertex \n    1\n. Also\nthere is a token, initially placed in the root. You can move the token to\nother vertices. Let's assume current vertex of token is \n    v\n, then you make\nany of the following two possible moves: move down to any leaf in subtree of\n\n    v\n; if vertex \n    v\n is a leaf, then move up to the parent no more than\n\n    k\n times. In other words, if \n    h(v)\n is the depth of vertex \n    v\n\n(the depth of the root is \n    0\n), then you can move to vertex \n    to\n such\nthat \n    to\n is an ancestor of \n    v\n and \n    h(v) - k \n    \u2264 h(to)\n.\nConsider that root is not a leaf (even if its degree is \n    1\n). Calculate\nthe maximum number of different leaves you can visit during one sequence of\nmoves. Input The first line contains two integers \n    n\n and \n    k\n (\n    1\n    \n    \u2264 k < n \n    \u2264 10^6\n) \u2014 the number of vertices in the tree and the\nrestriction on moving up, respectively. The second line contains \n    n - 1\n\nintegers \n    p_2, p_3, \n    \u2026, p_n\n, where \n    p_i\n is the parent of vertex\n\n    i\n. It is guaranteed that the input represents a valid tree, rooted at\n\n    1\n. Output Print one integer \u2014 the maximum possible number of different\nleaves you can visit. Examples Input 7 1 1 1 3 3 4 4 Output 4 Input 8 2 1 1 2\n3 4 5 5 Output 2 Note The graph from the first example: One of the optimal\nways is the next one: \n    1 \n    \u2192 2 \n    \u2192 1 \n    \u2192 5\n    \n    \u2192 3 \n    \u2192 7 \n    \u2192 4 \n    \u2192 6\n. The graph\nfrom the second example: One of the optimal ways is the next one: \n    1\n    \n    \u2192 7 \n    \u2192 5 \n    \u2192 8\n. Note that there is no way\nto move from \n    6\n to \n    7\n or \n    8\n and vice versa.\n\n",
        "cf_contest_id": 1065,
        "cf_index": "F",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dp",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 1\r\n1 1 3 3 4 4\r\n",
                "4\r\n"
            ],
            [
                "8 2\r\n1 1 2 3 4 5 5\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "30 1\r\n25 28 21 13 2 1 18 30 2 25 1 1 30 4 23 7 7 25 7 25 4 25 25 7 6 5 23 16 21\r\n",
                "8\r\n"
            ],
            [
                "30 2\r\n1 28 16 24 19 15 15 22 27 28 18 2 17 22 2 1 28 23 23 15 1 7 29 20 24 7 8 15 15\r\n",
                "9\r\n"
            ],
            [
                "30 3\r\n22 28 23 29 11 1 23 20 25 3 5 5 22 8 10 7 16 21 8 4 7 2 17 2 23 16 23 25 11\r\n",
                "10\r\n"
            ],
            [
                "30 1\r\n1 22 24 24 2 25 5 2 22 3 1 1 26 22 15 16 17 24 24 3 24 26 9 2 5 26 4 24 27\r\n",
                "10\r\n"
            ],
            [
                "30 2\r\n7 7 12 11 23 22 4 24 27 2 18 1 27 24 7 20 13 12 27 19 12 26 19 18 22 19 18 25 10\r\n",
                "12\r\n"
            ],
            [
                "30 3\r\n22 29 23 8 27 29 3 16 2 1 3 8 9 1 29 30 29 18 29 27 8 27 26 13 29 18 15 11 18\r\n",
                "14\r\n"
            ],
            [
                "30 1\r\n8 18 7 24 11 20 18 3 23 3 18 4 5 27 27 9 22 23 18 24 1 15 3 30 23 28 18 2 21\r\n",
                "5\r\n"
            ],
            [
                "30 2\r\n7 5 3 22 16 3 28 19 28 30 23 9 7 8 27 19 22 5 13 3 30 5 22 23 3 19 16 22 1\r\n",
                "15\r\n"
            ],
            [
                "30 3\r\n9 6 9 10 12 15 22 1 9 2 17 23 12 12 9 16 29 8 10 9 6 3 9 14 22 4 19 12 20\r\n",
                "12\r\n"
            ],
            [
                "30 1\r\n19 20 10 21 9 26 20 21 30 12 25 25 2 1 10 3 19 12 18 12 30 18 22 1 18 18 30 30 12\r\n",
                "7\r\n"
            ],
            [
                "30 2\r\n13 25 22 9 30 18 28 21 15 15 23 23 28 17 28 30 22 30 10 23 2 1 23 1 17 17 23 13 23\r\n",
                "15\r\n"
            ],
            [
                "30 3\r\n20 8 20 11 25 18 26 2 17 20 20 18 19 12 21 29 28 17 18 1 30 19 16 11 28 29 21 28 4\r\n",
                "13\r\n"
            ],
            [
                "30 1\r\n16 12 7 12 27 1 1 7 16 10 19 7 1 13 1 16 11 13 18 4 8 13 18 16 9 4 17 16 18\r\n",
                "7\r\n"
            ],
            [
                "30 2\r\n26 11 22 16 14 29 16 14 8 23 21 22 11 24 15 23 22 1 11 20 23 29 13 19 19 15 13 2 7\r\n",
                "12\r\n"
            ],
            [
                "30 3\r\n14 29 29 8 22 28 30 8 4 21 13 11 1 7 19 21 2 1 24 1 28 14 22 27 21 30 11 28 26\r\n",
                "13\r\n"
            ],
            [
                "30 1\r\n17 26 7 18 27 18 26 29 24 9 28 5 6 25 18 15 8 24 24 15 15 25 18 1 25 8 8 25 27\r\n",
                "6\r\n"
            ],
            [
                "30 2\r\n30 25 18 28 24 16 18 18 25 8 24 21 25 3 18 25 22 3 15 22 1 6 22 9 8 1 29 12 3\r\n",
                "12\r\n"
            ],
            [
                "30 3\r\n10 29 27 8 17 16 4 22 8 6 14 21 4 22 10 22 3 27 22 22 1 27 4 27 5 17 27 4 3\r\n",
                "16\r\n"
            ]
        ]
    }
]