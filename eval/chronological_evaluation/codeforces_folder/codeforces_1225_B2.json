[
    {
        "name": "TV Subscriptions (Hard Version)",
        "description": "The only difference between easy and hard versions is constraints. The BerTV\nchannel every day broadcasts one episode of one of the \n    k\n TV shows. You\nknow the schedule for the next \n    n\n days: a sequence of integers \n    a_1,\n    a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 k\n), where \n    a_i\n is the show,\nthe episode of which will be shown in \n    i\n-th day. The subscription to the\nshow is bought for the entire show (i.e. for all its episodes), for each show\nthe subscription is bought separately. How many minimum subscriptions do you\nneed to buy in order to have the opportunity to watch episodes of purchased\nshows \n    d\n (\n    1 \n    \u2264 d \n    \u2264 n\n) days in a row? In other words, you\nwant to buy the minimum number of TV shows so that there is some segment of\n\n    d\n consecutive days in which all episodes belong to the purchased shows.\nInput The first line contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10000\n)\n\u2014 the number of test cases in the input. Then \n    t\n test case descriptions\nfollow. The first line of each test case contains three integers \n    n, k\n\nand \n    d\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \u00b710^5\n, \n    1 \n    \u2264 k \n    \u2264 10^6\n,\n\n    1 \n    \u2264 d \n    \u2264 n\n). The second line contains \n    n\n integers \n    a_1,\n    a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 k\n), where \n    a_i\n is the show\nthat is broadcasted on the \n    i\n-th day. It is guaranteed that the sum of\nthe values \u200b\u200bof \n    n\n for all test cases in the input does not exceed\n\n    2\n    \u00b710^5\n. Output Print \n    t\n integers \u2014 the answers to the test\ncases in the input in the order they follow. The answer to a test case is the\nminimum number of TV shows for which you need to purchase a subscription so\nthat you can watch episodes of the purchased TV shows on BerTV for \n    d\n\nconsecutive days. Please note that it is permissible that you will be able to\nwatch more than \n    d\n days in a row. Example Input 4 5 2 2 1 2 1 2 1 9 3 3 3\n3 3 2 2 2 1 1 1 4 10 4 10 8 6 4 16 9 8 3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 Output\n2 1 4 5 Note In the first test case to have an opportunity to watch shows for\ntwo consecutive days, you need to buy a subscription on show \n    1\n and on\nshow \n    2\n. So the answer is two. In the second test case, you can buy a\nsubscription to any show because for each show you can find a segment of three\nconsecutive days, consisting only of episodes of this show. In the third test\ncase in the unique segment of four days, you have four different shows, so you\nneed to buy a subscription to all these four shows. In the fourth test case,\nyou can buy subscriptions to shows \n    3,5,7,8,9\n, and you will be able to\nwatch shows for the last eight days.\n\n",
        "cf_contest_id": 1225,
        "cf_index": "B2",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n5 2 2\r\n1 2 1 2 1\r\n9 3 3\r\n3 3 3 2 2 2 1 1 1\r\n4 10 4\r\n10 8 6 4\r\n16 9 8\r\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3\r\n",
                "2\r\n1\r\n4\r\n5\r\n"
            ]
        ],
        "private_cases": []
    }
]