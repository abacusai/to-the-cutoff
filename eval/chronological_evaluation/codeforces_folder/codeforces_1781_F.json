[
    {
        "name": "Bracket Insertion",
        "description": "Vika likes playing with bracket sequences. Today she wants to create a new\nbracket sequence using the following algorithm. Initially, Vika's sequence is\nan empty string, and then she will repeat the following actions \n    n\n times:\nChoose a place in the current bracket sequence to insert new brackets\nuniformly at random. If the length of the current sequence is \n    k\n, then\nthere are \n    k+1\n such places: before the first bracket, between the first\nand the second brackets, \n    \u2026\n, after the \n    k\n-th bracket. In\nparticular, there is one such place in an empty bracket sequence. Choose\nstring \"()\" with probability \n    p\n or string \")(\" with probability \n    1 -\n    p\n and insert it into the chosen place. The length of the bracket sequence\nwill increase by \n    2\n. A bracket sequence is called regular if it is\npossible to obtain a correct arithmetic expression by inserting characters '+'\nand '1' into it. For example, sequences \"(())()\", \"()\", and \"(()(()))\" are\nregular, while \")(\", \"(()\", and \"(()))(\" are not. Vika wants to know the\nprobability that her bracket sequence will be a regular one at the end. Help\nher and find this probability modulo \n    998\n     244\n     353\n (see Output\nsection). Input The only line contains two integers \n    n\n and \n    q\n (\n    1\n    \n    \u2264 n \n    \u2264 500\n; \n    0 \n    \u2264 q \n    \u2264 10^4\n). Here \n    n\n is equal to\nthe number of bracket insertion operations, and the probability that Vika\nchooses string \"()\" on every step of the algorithm is equal to \n    p = q\n    \n    \u00b7 10^-4\n. Output Print the probability that Vika's final bracket\nsequence will be regular, modulo \n    998\n     244\n     353\n. Formally, let \n    M =\n    998\n     244\n     353\n. It can be shown that the answer can be expressed as an\nirreducible fraction \n    p/q\n, where \n    p\n and \n    q\n are\nintegers and \n    q \n    \u2261 0 \n    M\n. Output the integer equal to\n\n    p \n    \u00b7 q^-1\n     M\n. In other words, output such an integer\n\n    x\n that \n    0 \n    \u2264 x < M\n and \n    x \n    \u00b7 q \n    \u2261 p \n    M\n.\nExamples Input 1 7500 Output 249561089 Input 2 6000 Output 519087064 Input 5\n4000 Output 119387743 Note In the first example, Vika will get a regular\nbracket sequence () with probability \n    p = \n    3/4\n, and she will get\nan irregular bracket sequence )( with probability \n    1 - p = \n    1/4\n.\nThe sought probability is \n    3/4\n, and \n    249\n     561\n     089\n    \n    \u00b7 4 \n    \u2261 3 \n    998\n     244\n     353\n. In the second example, the\nsought probability is \n    11/25\n.\n\n",
        "cf_contest_id": 1781,
        "cf_index": "F",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "dp",
            "math",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "1 7500\r\n",
                "249561089\r\n"
            ],
            [
                "2 6000\r\n",
                "519087064\r\n"
            ],
            [
                "5 4000\r\n",
                "119387743\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 7777\r\n",
                "175043574\r\n"
            ],
            [
                "100 7777\r\n",
                "849352781\r\n"
            ],
            [
                "200 7777\r\n",
                "217015663\r\n"
            ],
            [
                "300 7777\r\n",
                "870043650\r\n"
            ],
            [
                "400 7777\r\n",
                "164039155\r\n"
            ],
            [
                "500 7777\r\n",
                "277851322\r\n"
            ],
            [
                "500 0\r\n",
                "0\r\n"
            ],
            [
                "500 10000\r\n",
                "1\r\n"
            ],
            [
                "1 0\r\n",
                "0\r\n"
            ],
            [
                "1 10000\r\n",
                "1\r\n"
            ],
            [
                "409 920\r\n",
                "784441449\r\n"
            ],
            [
                "441 3712\r\n",
                "446348852\r\n"
            ],
            [
                "500 8758\r\n",
                "755221679\r\n"
            ],
            [
                "401 7324\r\n",
                "618293685\r\n"
            ],
            [
                "422 1365\r\n",
                "123325108\r\n"
            ],
            [
                "495 5787\r\n",
                "620973139\r\n"
            ],
            [
                "86 3260\r\n",
                "341361689\r\n"
            ],
            [
                "471 1165\r\n",
                "889015650\r\n"
            ],
            [
                "494 631\r\n",
                "161238563\r\n"
            ],
            [
                "79 5743\r\n",
                "50855457\r\n"
            ],
            [
                "497 6223\r\n",
                "219946264\r\n"
            ],
            [
                "492 7722\r\n",
                "887849089\r\n"
            ],
            [
                "367 387\r\n",
                "572780202\r\n"
            ],
            [
                "478 5183\r\n",
                "871288016\r\n"
            ],
            [
                "494 1772\r\n",
                "20717800\r\n"
            ]
        ]
    }
]