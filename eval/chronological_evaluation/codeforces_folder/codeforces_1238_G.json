[
    {
        "name": "Adilbek and the Watering System",
        "description": "Adilbek has to water his garden. He is going to do it with the help of a\ncomplex watering system: he only has to deliver water to it, and the\nmechanisms will do all the remaining job. The watering system consumes one\nliter of water per minute (if there is no water, it is not working). It can\nhold no more than \n    c\n liters. Adilbek has already poured \n    c_0\n liters\nof water into the system. He is going to start watering the garden right now\nand water it for \n    m\n minutes, and the watering system should contain at\nleast one liter of water at the beginning of the \n    i\n-th minute (for every\n\n    i\n from \n    0\n to \n    m - 1\n). Now Adilbek wonders what he will do if\nthe watering system runs out of water. He called \n    n\n his friends and asked\nthem if they are going to bring some water. The \n    i\n-th friend answered\nthat he can bring no more than \n    a_i\n liters of water; he will arrive at\nthe beginning of the \n    t_i\n-th minute and pour all the water he has into\nthe system (if the system cannot hold such amount of water, the excess water\nis poured out); and then he will ask Adilbek to pay \n    b_i\n dollars for each\nliter of water he has brought. You may assume that if a friend arrives at the\nbeginning of the \n    t_i\n-th minute and the system runs out of water at the\nbeginning of the same minute, the friend pours his water fast enough so that\nthe system does not stop working. Of course, Adilbek does not want to pay his\nfriends, but he has to water the garden. So he has to tell his friends how\nmuch water should they bring. Formally, Adilbek wants to choose \n    n\n\nintegers \n    k_1\n, \n    k_2\n, ..., \n    k_n\n in such a way that: if each\nfriend \n    i\n brings exactly \n    k_i\n liters of water, then the watering\nsystem works during the whole time required to water the garden; the sum\n\n    \u2211\n    _i = 1^n k_i b_i\n is minimum possible. Help Adilbek to\ndetermine the minimum amount he has to pay his friends or determine that\nAdilbek not able to water the garden for \n    m\n minutes. You have to answer\n\n    q\n independent queries. Input The first line contains one integer \n    q\n\n(\n    1 \n    \u2264 q \n    \u2264 5 \n    \u00b7 10^5\n) \u2013 the number of queries. The first line\nof each query contains four integers \n    n, m, c\n and \n    c_0\n (\n    0 \n    \u2264 n\n    \n    \u2264 5 \n    \u00b7 10^5, 2 \n    \u2264 m \n    \u2264 10^9, 1 \n    \u2264 c_0 \n    \u2264 c \n    \u2264 10^9\n)\n\u2014 the number of friends, the number of minutes of watering, the capacity of\nthe watering system and the number of liters poured by Adilbek. Each of the\nnext \n    n\n lines contains three integers \n    t_i, a_i, b_i\n (\n    0 < t_i <\n    m, 1 \n    \u2264 a_i \n    \u2264 c, 1 \n    \u2264 b_i \n    \u2264 10^9\n) \u2014 the \n    i\n-th friend's\narrival time, the maximum amount of water \n    i\n-th friend can bring and the\ncost of \n    1\n liter from \n    i\n-th friend. It is guaranteed that sum of all\n\n    n\n over all queries does not exceed \n    5 \n    \u00b7 10^5\n. Output For each\nquery print one integer \u2014 the minimum amount Adilbek has to pay his friends,\nor \n    -1\n if Adilbek is not able to water the garden for \n    m\n minutes.\nExample Input 4 1 5 4 2 2 4 2 0 4 5 4 2 5 3 1 1 2 4 3 1 3 2 3 5 1 2 1 1 1 4 3\nOutput 6 0 -1 4\n\n",
        "cf_contest_id": 1238,
        "cf_index": "G",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 5 4 2\r\n2 4 2\r\n0 4 5 4\r\n2 5 3 1\r\n1 2 4\r\n3 1 3\r\n2 3 5 1\r\n2 1 1\r\n1 4 3\r\n",
                "6\r\n0\r\n-1\r\n4\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n5 4 3 1\r\n3 3 2\r\n2 1 3\r\n1 1 5\r\n1 1 4\r\n3 1 1\r\n1 2 7 3\r\n1 2 5\r\n1 3 3 1\r\n2 2 5\r\n4 6 4 1\r\n3 1 2\r\n1 2 5\r\n3 1 5\r\n4 4 2\r\n3 5 4 1\r\n1 4 2\r\n4 3 5\r\n3 2 3\r\n5 8 10 7\r\n5 2 4\r\n1 5 2\r\n5 6 1\r\n1 9 4\r\n1 8 5\r\n5 5 7 2\r\n4 4 2\r\n3 1 2\r\n3 1 1\r\n2 4 3\r\n3 1 1\r\n4 6 6 6\r\n3 3 1\r\n4 4 3\r\n3 4 4\r\n2 2 5\r\n0 3 3 3\r\n5 7 10 1\r\n5 2 3\r\n4 8 1\r\n1 1 3\r\n3 2 4\r\n4 7 1\r\n",
                "8\r\n0\r\n-1\r\n16\r\n8\r\n1\r\n5\r\n0\r\n0\r\n-1\r\n"
            ]
        ]
    }
]