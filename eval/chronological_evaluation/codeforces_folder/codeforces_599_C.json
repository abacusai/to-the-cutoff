[
    {
        "name": "Day at the Beach",
        "description": "One day Squidward, Spongebob and Patrick decided to go to the beach.\nUnfortunately, the weather was bad, so the friends were unable to ride waves.\nHowever, they decided to spent their time building sand castles. At the end of\nthe day there were n castles built by friends. Castles are numbered from 1 to\nn, and the height of the i-th castle is equal to hi. When friends were about\nto leave, Squidward noticed, that castles are not ordered by their height, and\nthis looks ugly. Now friends are going to reorder the castles in a way to\nobtain that condition hi \u2264 hi + 1 holds for all i from 1 to n - 1. Squidward\nsuggested the following process of sorting castles: Castles are split into\nblocks \u2014 groups of consecutive castles. Therefore the block from i to j will\ninclude castles i, i + 1, ..., j. A block may consist of a single castle. The\npartitioning is chosen in such a way that every castle is a part of exactly\none block. Each block is sorted independently from other blocks, that is the\nsequence hi, hi + 1, ..., hj becomes sorted. The partitioning should satisfy\nthe condition that after each block is sorted, the sequence hi becomes sorted\ntoo. This may always be achieved by saying that the whole sequence is a single\nblock. Even Patrick understands that increasing the number of blocks in\npartitioning will ease the sorting process. Now friends ask you to count the\nmaximum possible number of blocks in a partitioning that satisfies all the\nabove requirements. Input The first line of the input contains a single\ninteger n (1 \u2264 n \u2264 100 000) \u2014 the number of castles Spongebob, Patrick and\nSquidward made from sand during the day. The next line contains n integers hi\n(1 \u2264 hi \u2264 10^9). The i-th of these integers corresponds to the height of the\ni-th castle. Output Print the maximum possible number of blocks in a valid\npartitioning. Examples Input 3 1 2 3 Output 3 Input 4 2 1 3 2 Output 2 Note In\nthe first sample the partitioning looks like that: [1][2][3]. In the second\nsample the partitioning is: [2, 1][3, 2]\n\n",
        "cf_contest_id": 599,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 2 3\r\n",
                "3\r\n"
            ],
            [
                "4\r\n2 1 3 2\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "17\r\n1 45 22 39 28 23 23 100 500 778 777 778 1001 1002 1005 1003 1005\r\n",
                "10\r\n"
            ],
            [
                "101\r\n1 50 170 148 214 153 132 234 181 188 180 225 226 200 197 122 181 168 87 220 223 160 235 94 257 145 199 235 102 146 119 60 109 134 209 260 210 191 180 271 236 195 155 169 166 143 246 102 208 137 278 269 156 251 198 165 111 198 151 213 256 121 276 163 179 285 104 99 139 122 188 184 215 242 244 115 304 259 135 149 104 72 303 291 124 237 112 165 183 168 71 139 85 131 137 107 120 267 235 337 69\r\n",
                "3\r\n"
            ],
            [
                "10\r\n1 2 2 2 2 2 2 2 2 1\r\n",
                "2\r\n"
            ],
            [
                "25\r\n1 2 3 4 4 4 4 4 4 4 2 3 5 5 7 9 8 5 10 12 15 12 100500 800600 228228228\r\n",
                "12\r\n"
            ],
            [
                "10\r\n17 18 19 19 18 17 100 500 100 100\r\n",
                "4\r\n"
            ],
            [
                "10\r\n1 1 1 1 5 5 1 1 1 1\r\n",
                "5\r\n"
            ],
            [
                "20\r\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\r\n",
                "20\r\n"
            ],
            [
                "1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "5\r\n1 5 3 5 2\r\n",
                "2\r\n"
            ],
            [
                "10\r\n1 1 1 1 2 2 2 2 4 3\r\n",
                "9\r\n"
            ],
            [
                "20\r\n1 2 2 2 5 6 6 6 7 7 8 9 15 15 16 16 17 18 19 19\r\n",
                "20\r\n"
            ],
            [
                "4\r\n2 2 1 1\r\n",
                "1\r\n"
            ]
        ]
    }
]