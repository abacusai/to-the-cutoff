[
    {
        "name": "Tournament Countdown",
        "description": "This is an interactive problem. There was a tournament consisting of \n    2^n\n\ncontestants. The \n    1\n-st contestant competed with the \n    2\n-nd, the\n\n    3\n-rd competed with the \n    4\n-th, and so on. After that, the winner of\nthe first match competed with the winner of second match, etc. The tournament\nended when there was only one contestant left, who was declared the winner of\nthe tournament. Such a tournament scheme is known as the single-elimination\ntournament. You don't know the results, but you want to find the winner of the\ntournament. In one query, you select two integers \n    a\n and \n    b\n, which\nare the indices of two contestants. The jury will return \n    1\n if \n    a\n\nwon more matches than \n    b\n, \n    2\n if \n    b\n won more matches than\n\n    a\n, or \n    0\n if their number of wins was equal. Find the winner in no\nmore than \n    \u2308\n    1/3\n    \u00b7 2^n + 1\n    \n    \u2309\n queries. Here \n    \u2308 x \n    \u2309\n denotes the value of\n\n    x\n rounded up to the nearest integer. Note that the tournament is long\nover, meaning that the results are fixed and do not depend on your queries.\nInput The first line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    2^14\n) \u2014 the number of test cases. The only line of input contains a\nsingle integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 17\n). It is guaranteed that the\nsum of \n    2^n\n over all test cases does not exceed \n    2^17\n. Interaction\nThe interaction for each test case begins by reading the integer \n    n\n. To\nmake a query, output \"? a b\" (\n    1 \n    \u2264 a, b \n    \u2264 2^n\n) without quotes.\nAfterwards, you should read one single integer \u2014 the answer for your query.\nYou can make at most \n    \u2308\n    1/3\n    \u00b7 2^n + 1\n    \n    \u2309\n such queries in each test case. If you receive the\ninteger \n    -1\n instead of an answer or a valid value of \n    n\n, it means\nyour program has made an invalid query, has exceed the limit of queries, or\nhas given incorrect answer on the previous test case. Your program must\nterminate immediately to receive a Wrong Answer verdict. Otherwise you can get\nan arbitrary verdict because your solution will continue to read from a closed\nstream. When you are ready to give the final answer, output \"! x\" (\n    1 \n    \u2264\n    x \n    \u2264 2^n\n) without quotes \u2014 the winner of the tournament. Giving this\nanswer does not count towards the limit of queries. After solving a test case,\nyour program should move to the next one immediately. After solving all test\ncases, your program should be terminated immediately. After printing a query\nor the answer do not forget to output end of line and flush the output.\nOtherwise, you will get Idleness limit exceeded. To do this, use:\nfflush(stdout) or cout.flush() in C++; System.out.flush() in Java;\nflush(output) in Pascal; stdout.flush() in Python; see documentation for other\nlanguages. Hacks To hack, use the following format. The first line contains an\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 2^14\n) \u2014 the number of test cases.\nThe first line of each test case contains a single integer \n    n\n (\n    1\n    \n    \u2264 n \n    \u2264 17\n). The second line of each test case contains \n    2^n\n\nnumbers on a line \u2014 the number of wins of each participant. There should be a\nsequence of matches that is consistent with the number of wins. The sum of\n\n    2^n\n should not exceed \n    2^17\n. Example Input 1 3 2 0 2 Output ? 1 4\n? 1 6 ? 5 7 ! 7 Note The tournament in the first test case is shown below. The\nnumber of wins is \n    [1,0,0,2,0,1,3,0]\n. In this example, the winner is the\n\n    7\n-th contestant.\n\n",
        "cf_contest_id": 1713,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "interactive",
            "number theory",
            "probabilities"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n3\r\n1 0 0 2 0 1 3 0\r\n",
                "The first 5 queries are:\r\n5\r\n? 1 3\r\n? 1 4\r\n? 5 7\r\n? 6 7\r\n? 4 7\r\n! 7\r\n"
            ]
        ],
        "private_cases": []
    }
]