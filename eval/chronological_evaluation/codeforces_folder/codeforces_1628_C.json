[
    {
        "name": "Grid Xor",
        "description": "Note: The XOR-sum of set \n    s_1,s_2,\n    \u2026,s_m\n is defined as\n\n    s_1 \n    \u2295 s_2 \n    \u2295\n    \u2026\n    \u2295 s_m\n, where \n    \u2295\n\ndenotes the bitwise XOR operation. After almost winning IOI, Victor bought\nhimself an \n    n\n    \u00d7 n\n grid containing integers in each cell. \n    n\n is\nan even integer. The integer in the cell in the \n    i\n-th row and \n    j\n-th\ncolumn is \n    a_i,j\n. Sadly, Mihai stole the grid from Victor and told him\nhe would return it with only one condition: Victor has to tell Mihai the XOR-\nsum of all the integers in the whole grid. Victor doesn't remember all the\nelements of the grid, but he remembers some information about it: For each\ncell, Victor remembers the XOR-sum of all its neighboring cells. Two cells are\nconsidered neighbors if they share an edge \u2014 in other words, for some integers\n\n    1 \n    \u2264 i, j, k, l \n    \u2264 n\n, the cell in the \n    i\n-th row and\n\n    j\n-th column is a neighbor of the cell in the \n    k\n-th row and\n\n    l\n-th column if \n    |i - k| = 1\n and \n    j = l\n, or if \n    i = k\n and\n\n    |j - l| = 1\n. To get his grid back, Victor is asking you for your help.\nCan you use the information Victor remembers to find the XOR-sum of the whole\ngrid? It can be proven that the answer is unique. Input The first line of the\ninput contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the\nnumber of test cases. The description of test cases follows. The first line of\neach test case contains a single even integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264\n    1000\n) \u2014 the size of the grid. Then follows \n    n\n lines, each containing\n\n    n\n integers. The \n    j\n-th integer in the \n    i\n-th of these lines\nrepresents the XOR-sum of the integers in all the neighbors of the cell in the\n\n    i\n-th row and \n    j\n-th column. It is guaranteed that the sum of \n    n\n\nover all test cases doesn't exceed \n    1000\n and in the original grid \n    0\n    \n    \u2264 a_i, j\n    \u2264 2^30 - 1\n. Hack Format To hack a solution, use the\nfollowing format: The first line should contain a single integer t (\n    1 \n    \u2264\n    t \n    \u2264 100\n) \u2014 the number of test cases. The first line of each test case\nshould contain a single even integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 1000\n) \u2014\nthe size of the grid. Then \n    n\n lines should follow, each containing\n\n    n\n integers. The \n    j\n-th integer in the \n    i\n-th of these lines is\n\n    a_i,j\n in Victor's original grid. The values in the grid should be\nintegers in the range \n    [0, 2^30-1]\n The sum of \n    n\n over all test\ncases must not exceed \n    1000\n. Output For each test case, output a single\ninteger \u2014 the XOR-sum of the whole grid. Example Input 3 2 1 5 5 1 4 1 14 8 9\n3 1 5 9 4 13 11 1 1 15 4 11 4 2 4 1 6 3 7 3 10 15 9 4 2 12 7 15 1 Output 4 9 5\nNote For the first test case, one possibility for Victor's original grid is:\n\n    1\n\n    3\n\n    2\n\n    4\n For the second test case, one possibility for\nVictor's original grid is:\n\n    3\n\n    8\n\n    8\n\n    5\n\n    9\n\n    5\n\n    5\n\n    1\n\n    5\n\n    5\n\n    9\n\n    9\n\n    8\n\n    4\n\n    2\n\n    9\n\nFor the third test case, one possibility for Victor's original grid is:\n\n    4\n\n    3\n\n    2\n\n    1\n\n    1\n\n    2\n\n    3\n\n    4\n\n    5\n\n    6\n\n    7\n\n    8\n\n    8\n\n    9\n\n    9\n\n    1\n\n\n",
        "cf_contest_id": 1628,
        "cf_index": "C",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "implementation",
            "interactive",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2\r\n1 3\r\n2 4\r\n4\r\n3 8 8 5\r\n9 5 5 1\r\n5 5 9 9\r\n8 4 2 9\r\n4\r\n4 3 2 1\r\n1 2 3 4\r\n5 6 7 8\r\n8 9 9 1\r\n",
                "4\r\n9\r\n5\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2\r\n1073741823 1073741823\r\n1073741823 0\r\n",
                "1073741823\r\n"
            ]
        ]
    }
]