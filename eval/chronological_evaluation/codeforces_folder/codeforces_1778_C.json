[
    {
        "name": "Flexible String",
        "description": "You have a string \n    a\n and a string \n    b\n. Both of the strings have\nlength \n    n\n. There are at most \n    10\n different characters in the string\n\n    a\n. You also have a set \n    Q\n. Initially, the set \n    Q\n is empty. You\ncan apply the following operation on the string \n    a\n any number of times:\nChoose an index \n    i\n (\n    1\n    \u2264 i \n    \u2264 n\n) and a lowercase English\nletter \n    c\n. Add \n    a_i\n to the set \n    Q\n and then replace \n    a_i\n\nwith \n    c\n. For example, Let the string \n    a\n be \"\n    abecca\n\". We\ncan do the following operations: In the first operation, if you choose \n    i =\n    3\n and \n    c = \n    x\n, the character \n    a_3 = \n    e\n will be added\nto the set \n    Q\n. So, the set \n    Q\n will be \n    e\n, and\nthe string \n    a\n will be \"\n    ab\n    xcca\n\". In the second\noperation, if you choose \n    i = 6\n and \n    c = \n    s\n, the character\n\n    a_6 = \n    a\n will be added to the set \n    Q\n. So, the set \n    Q\n\nwill be \n    e, \n    a\n, and the string \n    a\n will be\n\"\n    abxcc\n    s\n\". You can apply any number of operations on\n\n    a\n, but in the end, the set \n    Q\n should contain at most \n    k\n\ndifferent characters. Under this constraint, you have to maximize the number\nof integer pairs \n    (l, r)\n (\n    1\n    \u2264 l\n    \u2264 r \n    \u2264 n\n) such that\n\n    a[l,r] = b[l,r]\n. Here, \n    s[l,r]\n means the substring of string\n\n    s\n starting at index \n    l\n (inclusively) and ending at index \n    r\n\n(inclusively). Input Each test contains multiple test cases. The first line\ncontains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n). The\ndescription of the test cases follows. The first line contains two integers\n\n    n\n and \n    k\n (\n    1\n    \u2264 n \n    \u2264 10^5\n, \n    0\n    \u2264 k\n    \u2264 10\n) \u2014\nthe length of the two strings and the limit on different characters in the set\n\n    Q\n. The second line contains the string \n    a\n of length \n    n\n. There\nis at most \n    10\n different characters in the string \n    a\n. The last line\ncontains the string \n    b\n of length \n    n\n. Both of the strings \n    a\n and\n\n    b\n contain only lowercase English letters. The sum of \n    n\n over all\ntest cases doesn't exceed \n    10^5\n. Output For each test case, print a\nsingle integer in a line, the maximum number of pairs \n    (l, r)\n satisfying\nthe constraints. Example Input 6 3 1 abc abd 3 0 abc abd 3 1 xbb xcd 4 1 abcd\naxcb 3 10 abc abd 10 3 lkwhbahuqa qoiujoncjb Output 6 3 6 6 6 11 Note In the\nfirst case, we can select index \n    i = 3\n and replace it with character \n    c\n    = \n    d\n. All possible pairs \n    (l,r)\n will be valid. In the second\ncase, we can't perform any operation. The \n    3\n valid pairs \n    (l,r)\n are:\n\n    a[1,1] = b[1,1] =\n \"\n    a\n\", \n    a[1,2] = b[1,2] =\n\n\"\n    ab\n\", \n    a[2,2] = b[2,2] =\n \"\n    b\n\". In the third\ncase, we can choose index \n    2\n and index \n    3\n and replace them with the\ncharacters \n    c\n and \n    d\n respectively. The final set\n\n    Q\n will be \n    b\n having size \n    1\n that satisfies\nthe value of \n    k\n. All possible pairs \n    (l,r)\n will be valid.\n\n",
        "cf_contest_id": 1778,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n3 1\r\nabc\r\nabd\r\n3 0\r\nabc\r\nabd\r\n3 1\r\nxbb\r\nxcd\r\n4 1\r\nabcd\r\naxcb\r\n3 10\r\nabc\r\nabd\r\n10 3\r\nlkwhbahuqa\r\nqoiujoncjb\r\n",
                "6\r\n3\r\n6\r\n6\r\n6\r\n11\r\n"
            ]
        ],
        "private_cases": []
    }
]