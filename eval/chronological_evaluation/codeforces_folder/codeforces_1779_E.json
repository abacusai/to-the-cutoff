[
    {
        "name": "Anya's Simultaneous Exhibition",
        "description": "This is an interactive problem. Anya has gathered \n    n\n chess experts\nnumbered from \n    1\n to \n    n\n for which the following properties hold: For\nany pair of players one of the players wins every game against the other (and\nno draws ever occur); Transitivity does not necessarily hold \u2014 it might happen\nthat \n    A\n always beats \n    B\n, \n    B\n always beats \n    C\n and \n    C\n\nalways beats \n    A\n. Anya does not know, for each pair, who is the player who\nbeats the other.To organize a tournament, Anya hosts \n    n-1\n games. In each\ngame, she chooses two players. One of them wins and stays, while the other one\nis disqualified. After all the games are hosted only one player will remain. A\nplayer is said to be a candidate master if they can win a tournament (notice\nthat the winner of a tournament may depend on the players selected by Anya in\nthe \n    n-1\n games). Since Anya is a curious girl, she is interested in\nfinding the candidate masters. Unfortunately, she does not have much time. To\nspeed up the process, she will organize up to \n    2n\n simuls (short for\n\"simultaneous exhibition\", in which one player plays against many). In one\nsimul, Anya chooses exactly one player who will play against some (at least\none) of the other players. The chosen player wins all games they would win in\na regular game, and the same holds for losses. After the simul finishes, Anya\nis only told the total number of games won by the chosen player (but not which\nones). Nobody is disqualified during a simul. Can you help Anya host simuls\nand determine the candidate masters? The winning players in each pair could be\nchanged between the simuls, but only in a way that preserves the results of\nall previous simuls. These changes may depend on your queries. Interaction\nFirstly, the jury sends one integer \n    n\n (\n    3 \n    \u2264 n \n    \u2264 250\n)\nwhich should be read \u2014 the number of players. After that, your program may ask\nqueries or report an answer. To ask a query, print \"? \n    i \n      s_1 s_2\n    \n    \u2026 s_n\n\" (without quotes), where \n    i\n is the index of the player\nwho will play against some of the other players in the simul. \n    s\n is a\nbinary string that denotes the players they play against. \n    i\n plays\nagainst every player \n    j\n for which \n    s_j = 1\n holds (and \n    s_j = 1\n\nshould hold for at least one \n    1 \n    \u2264 j \n    \u2264 n\n). Please note that\n\n    s_i = 0\n must hold since a player cannot play against themselves,\notherwise, the query is considered to be incorrect. After this, you should\nread an integer \u2014 the number of games player \n    i\n has won. When you have\nidentified the answer, you must print \"! \n    c_1 c_2 \n    \u2026 c_n\n\" (without\nquotes) and terminate your program. \n    c\n is a binary string which\nrepresents the candidate masters. Player \n    i\n is a candidate master if\n\n    c_i=1\n holds, otherwise, they are not. If you ask more than \n    2n\n\nqueries or if one of the queries is malformed, the interaction terminates\nimmediately and your program receives verdict Wrong Answer. After printing a\nquery do not forget to output the end of line and flush the output. Otherwise,\nyou will get Idleness limit exceeded. To do this, use: fflush(stdout) or\ncout.flush() in C++; System.out.flush() in Java; flush(output) in Pascal;\nstdout.flush() in Python; see the documentation for other languages. Hacks are\ndisabled in this problem. Examples Input 3 1 1 1 Output ? 1 010 ? 2 001 ? 3\n100 ! 111 Input 5 0 3 4 Output ? 5 10110 ? 2 10111 ? 1 01111 ! 10000 Note In\nthe first example, the first query describes a simul in which player \n    1\n\nplays against player \n    2\n (and no one else). The answer to the query is\n\n    1\n, meaning that player \n    1\n won the only game they played. We can\nconclude that \n    1\n beats \n    2\n. Similarly, the second query tells us that\n\n    2\n beats \n    3\n and the third query tells us that \n    3\n beats \n    1\n.\nAll players are candidate masters in this case as Player \n    1\n can win the\ntournament if \n    2\n and \n    3\n play first. \n    3\n loses and leaves, while\n\n    2\n stays. \n    1\n then plays against \n    2\n and wins; Other players can\nwin in the same fashion. In the second example, the third query describes a\nsimul in which player \n    1\n plays against every other player. The answer to\nthe query is \n    4\n, meaning that they won every game they played. It can be\nconcluded that player \n    1\n also beats every other player. They can never\nlose, hence they are the only player who can remain at the end of every\npossible tournament, and the only possible candidate master.\n\n",
        "cf_contest_id": 1779,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graphs",
            "greedy",
            "interactive",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n010\r\n001\r\n100\r\n",
                "3"
            ],
            [
                "5\r\n01111\r\n00111\r\n00011\r\n00001\r\n00000\r\n",
                "5"
            ]
        ],
        "private_cases": [
            [
                "3\r\n011\r\n001\r\n000\r\n",
                "3"
            ],
            [
                "3\r\n001\r\n101\r\n000\r\n",
                "3"
            ],
            [
                "4\r\n0000\r\n1001\r\n1101\r\n1000\r\n",
                "4"
            ],
            [
                "5\r\n01111\r\n00011\r\n01011\r\n00000\r\n00010\r\n",
                "5"
            ],
            [
                "6\r\n000000\r\n100000\r\n110000\r\n111011\r\n111001\r\n111000\r\n",
                "6"
            ],
            [
                "7\r\n0010001\r\n1011101\r\n0000001\r\n1010001\r\n1011001\r\n1111101\r\n0000000\r\n",
                "7"
            ],
            [
                "8\r\n00000000\r\n10100000\r\n10000000\r\n11101011\r\n11100011\r\n11111011\r\n11100001\r\n11100000\r\n",
                "8"
            ],
            [
                "9\r\n001111101\r\n101111101\r\n000111101\r\n000010000\r\n000000000\r\n000110000\r\n000111000\r\n111111101\r\n000111100\r\n",
                "9"
            ],
            [
                "10\r\n0111000111\r\n0000000101\r\n0100000101\r\n0110000111\r\n1111011111\r\n1111001111\r\n1111000111\r\n0000000000\r\n0110000101\r\n0000000100\r\n",
                "10"
            ],
            [
                "20\r\n01100000000000000000\r\n00000000000000000000\r\n01000000000000000000\r\n11100111000101011100\r\n11110111110101111111\r\n11100011000101011100\r\n11100001000000011100\r\n11100000000000010100\r\n11110111010101111111\r\n11110111000101011100\r\n11111111110101111111\r\n11100011000000011100\r\n11111111111101111111\r\n11100011000100011100\r\n11110111010101011110\r\n11100000000000000100\r\n11100001000000010100\r\n11100000000000000000\r\n11110111010101011100\r\n11110111010101111110\r\n",
                "20"
            ],
            [
                "20\r\n00000001010001100010\r\n10101111110001111011\r\n10001111111111101111\r\n11101011010101110110\r\n10000011011111101110\r\n10011011010101101010\r\n10000001010000100010\r\n00000000000000000010\r\n10011111010001101111\r\n00000001000001000010\r\n11010111110101101111\r\n11000011110011110011\r\n11010111111001110011\r\n00000011000000100010\r\n00000001010000000010\r\n10101111111001100111\r\n10010011010111110011\r\n11000111010111101010\r\n00000000000000000000\r\n10011111010001100110\r\n",
                "20"
            ]
        ]
    }
]