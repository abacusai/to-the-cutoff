[
    {
        "name": "Sereja and Tree",
        "description": "Sereja adores trees. Today he came up with a revolutionary new type of binary\nroot trees. His new tree consists of n levels, each vertex is indexed by two\nintegers: the number of the level and the number of the vertex on the current\nlevel. The tree root is at level 1, its index is (1, 1). Here is a pseudo code\nof tree construction. //the global data are integer arrays cnt[], left[][],\nright[][] cnt[1] = 1; fill arrays left[][], right[][] with values -1;\nfor(level = 1; level < n; level = level + 1) cnt[level + 1] = 0; for(position\n= 1; position <= cnt[level]; position = position + 1) if(the value of\nposition is a power of two) // that is, 1, 2, 4, 8... left[level][position] =\ncnt[level + 1] + 1; right[level][position] = cnt[level + 1] + 2; cnt[level +\n1] = cnt[level + 1] + 2; else right[level][position] = cnt[level + 1] + 1;\ncnt[level + 1] = cnt[level + 1] + 1;    After the pseudo code is run, cell\ncnt[level] contains the number of vertices on level level. Cell\nleft[level][position] contains the number of the vertex on the level level +\n1, which is the left child of the vertex with index (level, position), or it\ncontains -1, if the vertex doesn't have a left child. Similarly, cell\nright[level][position] is responsible for the right child. You can see how the\ntree with n = 4 looks like in the notes. Serja loves to make things\ncomplicated, so he first made a tree and then added an empty set A(level,\nposition) for each vertex. Then Sereja executes m operations. Each operation\nis of one of the two following types: The format of the operation is \"1 t l r\nx\". For all vertices level, position (level = t; l \u2264 position \u2264 r) add value x\nto set A(level, position). The format of the operation is \"2 t v\". For vertex\nlevel, position (level = t, position = v), find the union of all sets of\nvertices that are in the subtree of vertex (level, position). Print the size\nof the union of these sets. Help Sereja execute the operations. In this\nproblem a set contains only distinct values like std::set in C++. Input The\nfirst line contains integers n and m (1 \u2264 n, m \u2264 7000). Next m lines contain\nthe descriptions of the operations. The operation of the first type is given\nby five integers: 1 t l r x (1 \u2264 t \u2264 n; 1 \u2264 l \u2264 r \u2264 cnt[t]; 1 \u2264 x \u2264 10^6). The\noperation of the second type is given by three integers: 2 t v (1 \u2264 t \u2264 n; 1 \u2264\nv \u2264 cnt[t]). Output For each operation of the second type, print the answer on\na single line. Examples Input 4 5 1 4 4 7 1 1 3 1 2 2 2 1 1 2 4 1 2 3 3 Output\n2 0 1 Note You can find the definitions that are used while working with root\ntrees by this link: http://en.wikipedia.org/wiki/Tree_(graph_theory) You can\nsee an example of a constructed tree at n = 4 below.\n\n",
        "cf_contest_id": 380,
        "cf_index": "B",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "graphs",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 5\r\n1 4 4 7 1\r\n1 3 1 2 2\r\n2 1 1\r\n2 4 1\r\n2 3 3\r\n",
                "2\r\n0\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "99 31\r\n2 36 50\r\n2 4 2\r\n1 85 431 661 843636\r\n2 29 32\r\n2 96 668\r\n1 43 50 81 913860\r\n2 37 131\r\n2 85 157\r\n1 9 17 26 252946\r\n2 19 4\r\n1 86 142 498 528260\r\n2 47 276\r\n1 88 362 529 346965\r\n1 35 32 91 812747\r\n2 66 453\r\n1 16 11 46 572013\r\n2 41 246\r\n2 66 235\r\n1 3 3 4 855122\r\n1 41 14 203 579843\r\n1 90 507 558 788901\r\n1 1 1 1 439745\r\n2 4 5\r\n1 90 303 310 113891\r\n2 65 314\r\n1 78 359 366 992412\r\n2 34 88\r\n2 93 75\r\n2 96 298\r\n1 94 31 682 323581\r\n2 77 54\r\n",
                "0\r\n0\r\n1\r\n0\r\n1\r\n0\r\n1\r\n1\r\n1\r\n1\r\n2\r\n1\r\n3\r\n2\r\n0\r\n0\r\n1\r\n"
            ],
            [
                "40 1\r\n1 12 31 43 148953\r\n",
                ""
            ],
            [
                "1 1\r\n2 1 1\r\n",
                "0\r\n"
            ]
        ]
    }
]