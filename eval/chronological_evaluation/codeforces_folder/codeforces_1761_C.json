[
    {
        "name": "Set Construction",
        "description": "You are given a binary matrix \n    b\n (all elements of the matrix are \n    0\n\nor \n    1\n) of \n    n\n rows and \n    n\n columns. You need to construct a\n\n    n\n sets \n    A_1, A_2, \n    \u2026, A_n\n, for which the following conditions\nare satisfied: Each set is nonempty and consists of distinct integers between\n\n    1\n and \n    n\n inclusive. All sets are distinct. For all pairs\n\n    (i,j)\n satisfying \n    1\n    \u2264 i, j\n    \u2264 n\n, \n    b_i,j=1\n if and only\nif \n    A_i\n    \u228a A_j\n. In other words, \n    b_i, j\n is \n    1\n if\n\n    A_i\n is a proper subset of \n    A_j\n and \n    0\n otherwise. Set \n    X\n\nis a proper subset of set \n    Y\n, if \n    X\n is a nonempty subset of \n    Y\n,\nand \n    X \n    \u2260 Y\n. It's guaranteed that for all test cases in this problem,\nsuch \n    n\n sets exist. Note that it doesn't mean that such \n    n\n sets\nexist for all possible inputs. If there are multiple solutions, you can output\nany of them. Input Each test contains multiple test cases. The first line\ncontains a single integer \n    t\n (\n    1\n    \u2264 t\n    \u2264 1000\n) \u2014 the number of\ntest cases. The description of test cases follows. The first line contains a\nsingle integer \n    n\n (\n    1\n    \u2264 n\n    \u2264 100\n). The following \n    n\n lines\ncontain a binary matrix \n    b\n, the \n    j\n-th character of \n    i\n-th line\ndenotes \n    b_i,j\n. It is guaranteed that the sum of \n    n\n over all test\ncases does not exceed \n    1000\n. It's guaranteed that for all test cases in\nthis problem, such \n    n\n sets exist. Output For each test case, output\n\n    n\n lines. For the \n    i\n-th line, first output \n    s_i\n \n    (1 \n    \u2264 s_i\n    \n    \u2264 n)\n \u2014 the size of the set \n    A_i\n. Then, output \n    s_i\n distinct\nintegers from \n    1\n to \n    n\n \u2014 the elements of the set \n    A_i\n. If there\nare multiple solutions, you can output any of them. It's guaranteed that for\nall test cases in this problem, such \n    n\n sets exist. Example Input 2 4\n0001 1001 0001 0000 3 011 001 000 Output 3 1 2 3 2 1 3 2 2 4 4 1 2 3 4 1 1 2 1\n2 3 1 2 3 Note In the first test case, we have \n    A_1 = \n    \n    1, 2, 3\n    \n    , A_2\n    = \n    \n    1, 3\n    \n    , A_3 = \n    \n    2, 4\n    \n    , A_4 = \n    \n    1, 2, 3, 4\n. Sets\n\n    A_1, A_2, A_3\n are proper subsets of \n    A_4\n, and also set \n    A_2\n is\na proper subset of \n    A_1\n. No other set is a proper subset of any other\nset. In the second test case, we have \n    A_1 = \n    \n    1\n    \n    , A_2 = \n    \n    1,\n    2\n    \n    , A_3 = \n    \n    1, 2, 3\n. \n    A_1\n is a proper subset of \n    A_2\n\nand \n    A_3\n, and \n    A_2\n is a proper subset of \n    A_3\n.\n\n",
        "cf_contest_id": 1761,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n4\r\n0001\r\n1001\r\n0001\r\n0000\r\n3\r\n011\r\n001\r\n000\r\n",
                "2 1 2\r\n1 2\r\n1 3\r\n4 4 1 2 3\r\n1 1\r\n2 2 1\r\n3 3 1 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n0\r\n",
                "1 1\r\n"
            ],
            [
                "3\r\n2\r\n00\r\n00\r\n2\r\n00\r\n10\r\n2\r\n01\r\n00\r\n",
                "1 1\r\n1 2\r\n2 1 2\r\n1 2\r\n1 1\r\n2 2 1\r\n"
            ],
            [
                "19\r\n3\r\n000\r\n101\r\n100\r\n3\r\n000\r\n101\r\n000\r\n3\r\n000\r\n100\r\n000\r\n3\r\n000\r\n100\r\n100\r\n3\r\n000\r\n100\r\n110\r\n3\r\n000\r\n001\r\n000\r\n3\r\n000\r\n000\r\n110\r\n3\r\n000\r\n000\r\n100\r\n3\r\n000\r\n000\r\n010\r\n3\r\n000\r\n000\r\n000\r\n3\r\n001\r\n101\r\n000\r\n3\r\n001\r\n001\r\n000\r\n3\r\n001\r\n000\r\n000\r\n3\r\n011\r\n001\r\n000\r\n3\r\n011\r\n000\r\n010\r\n3\r\n011\r\n000\r\n000\r\n3\r\n010\r\n000\r\n000\r\n3\r\n010\r\n000\r\n010\r\n3\r\n010\r\n000\r\n110\r\n",
                "3 1 2 3\r\n1 2\r\n2 3 2\r\n2 1 2\r\n1 2\r\n2 3 2\r\n2 1 2\r\n1 2\r\n1 3\r\n3 1 2 3\r\n1 2\r\n1 3\r\n3 1 2 3\r\n2 2 3\r\n1 3\r\n1 1\r\n1 2\r\n2 3 2\r\n2 1 3\r\n2 2 3\r\n1 3\r\n2 1 3\r\n1 2\r\n1 3\r\n1 1\r\n2 2 3\r\n1 3\r\n1 1\r\n1 2\r\n1 3\r\n2 1 2\r\n1 2\r\n3 3 1 2\r\n1 1\r\n1 2\r\n3 3 1 2\r\n1 1\r\n1 2\r\n2 3 1\r\n1 1\r\n2 2 1\r\n3 3 1 2\r\n1 1\r\n3 2 1 3\r\n2 3 1\r\n1 1\r\n2 2 1\r\n2 3 1\r\n1 1\r\n2 2 1\r\n1 3\r\n1 1\r\n3 2 1 3\r\n1 3\r\n2 1 3\r\n3 2 1 3\r\n1 3\r\n"
            ]
        ]
    }
]