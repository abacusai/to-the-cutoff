[
    {
        "name": "Power or XOR?",
        "description": "The symbol \n    \u2227\n is quite ambiguous, especially when used without\ncontext. Sometimes it is used to denote a power (\n    a\n    \u2227 b = a^b\n) and\nsometimes it is used to denote the XOR operation (\n    a\n    \u2227 b=a\n    \u2295\n    b\n). You have an ambiguous expression \n    E=A_1\n    \u2227 A_2\n    \u2227\n    A_3\n    \u2227\n    \u2026\n    \u2227 A_n\n. You can replace each \n    \u2227\n symbol\nwith either a \n    \n operation or a \n    \n\noperation to get an unambiguous expression \n    E'\n. The value of this\nexpression \n    E'\n is determined according to the following rules: All\n\n    \n operations are performed before any\n\n    \n operation. In other words, the \n    \n\noperation takes precedence over \n    \n operation. For example,\n\n    4\n     \n    \n     6\n     \n    \n     2=4\n    \u2295 (6^2)=4\n    \u2295\n    36=32\n. Consecutive powers are calculated from left to right. For example,\n\n    2\n     \n    \n     3 \n     \n    \n     4 = (2^3)^4 = 8^4 =\n    4096\n. You are given an array \n    B\n of length \n    n\n and an integer\n\n    k\n. The array \n    A\n is given by \n    A_i=2^B_i\n and the expression\n\n    E\n is given by \n    E=A_1\n    \u2227 A_2\n    \u2227 A_3\n    \u2227\n    \u2026\n    \u2227\n    A_n\n. You need to find the XOR of the values of all possible unambiguous\nexpressions \n    E'\n which can be obtained from \n    E\n and has at least\n\n    k\n \n    \u2227\n symbols used as \n    \n operation. Since\nthe answer can be very large, you need to find it modulo \n    2^2^20\n.\nSince this number can also be very large, you need to print its binary\nrepresentation without leading zeroes. If the answer is equal to \n    0\n,\nprint \n    0\n. Input The first line of input contains two integers \n    n\n and\n\n    k\n \n    (1\n    \u2264 n\n    \u2264 2^20, 0\n    \u2264 k < n)\n. The second line of\ninput contains \n    n\n integers \n    B_1,B_2,\n    \u2026,B_n\n \n    (1\n    \u2264 B_i <\n    2^20)\n. Output Print a single line containing a binary string without\nleading zeroes denoting the answer to the problem. If the answer is equal to\n\n    0\n, print \n    0\n. Examples Input 3 2 3 1 2 Output 1110 Input 3 1 3 1 2\nOutput 1010010 Input 3 0 3 1 2 Output 1000000000000000001010010 Input 2 1 1 1\nOutput 0 Note For each of the testcases \n    1\n to \n    3\n, \n    A =\n    \n    \n    2^3,2^1,2^2\n    \n     = \n    \n    8,2,4\n and \n    E=8\n    \u2227 2\n    \u2227 4\n.\nFor the first testcase, there is only one possible valid unambiguous\nexpression \n    E' = 8\n    \u2295 2\n    \u2295 4 = 14 = (1110)_2\n. For the second\ntestcase, there are three possible valid unambiguous expressions \n    E'\n:\n\n    8\n    \u2295 2\n    \u2295 4 = 14\n \n    8^2\n    \u2295 4 = 64\n    \u2295 4= 68\n\n\n    8\n    \u2295 2^4 = 8\n    \u2295 16= 24\n XOR of the values of all of these is\n\n    14\n    \u2295 68\n    \u2295 24 = 82 = (1010010)_2\n.For the third testcase,\nthere are four possible valid unambiguous expressions \n    E'\n: \n    8\n    \u2295\n    2\n    \u2295 4 = 14\n \n    8^2\n    \u2295 4 = 64\n    \u2295 4= 68\n \n    8\n    \u2295 2^4 =\n    8\n    \u2295 16= 24\n \n    (8^2)^4 = 64^4 = 2^24 = 16777216\n XOR of the values\nof all of these is \n    14\n    \u2295 68\n    \u2295 24\n    \u2295 16777216 = 16777298 =\n    (1000000000000000001010010)_2\n.For the fourth testcase,\n\n    A=\n    \n    2,2\n and \n    E=2\n    \u2227 2\n. The only possible valid\nunambiguous expression \n    E' = 2\n    \u2295 2 = 0 = (0)_2\n.\n\n",
        "cf_contest_id": 1673,
        "cf_index": "E",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "combinatorics",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3 2\r\n3 1 2\r\n",
                "1110"
            ],
            [
                "3 1\r\n3 1 2\r\n",
                "1010010"
            ],
            [
                "3 0\r\n3 1 2\r\n",
                "1000000000000000001010010"
            ],
            [
                "2 1\r\n1 1\r\n",
                "0"
            ]
        ],
        "private_cases": [
            [
                "1 0\r\n1\r\n",
                "10"
            ],
            [
                "2 0\r\n1 1\r\n",
                "100"
            ],
            [
                "3 1\r\n1 1 1\r\n",
                "10"
            ],
            [
                "4 2\r\n1 1 1 1\r\n",
                "100"
            ],
            [
                "8 2\r\n1 1 1 1 1 1 1 1\r\n",
                "100000000000000000000000000000000"
            ]
        ]
    }
]