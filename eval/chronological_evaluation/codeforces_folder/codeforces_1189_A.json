[
    {
        "name": "Keanu Reeves",
        "description": "After playing Neo in the legendary \"Matrix\" trilogy, Keanu Reeves started\ndoubting himself: maybe we really live in virtual reality? To find if this is\ntrue, he needs to solve the following problem. Let's call a string consisting\nof only zeroes and ones good if it contains different numbers of zeroes and\nones. For example, 1, 101, 0000 are good, while 01, 1001, and 111000 are not\ngood. We are given a string \n    s\n of length \n    n\n consisting of only\nzeroes and ones. We need to cut \n    s\n into minimal possible number of\nsubstrings \n    s_1, s_2, \n    \u2026, s_k\n such that all of them are good. More\nformally, we have to find minimal by number of strings sequence of good\nstrings \n    s_1, s_2, \n    \u2026, s_k\n such that their concatenation (joining)\nequals \n    s\n, i.e. \n    s_1 + s_2 + \n    \u2026 + s_k = s\n. For example,\ncuttings 110010 into 110 and 010 or into 11 and 0010 are valid, as 110, 010,\n11, 0010 are all good, and we can't cut 110010 to the smaller number of\nsubstrings as 110010 isn't good itself. At the same time, cutting of 110010\ninto 1100 and 10 isn't valid as both strings aren't good. Also, cutting of\n110010 into 1, 1, 0010 isn't valid, as it isn't minimal, even though all\n\n    3\n strings are good. Can you help Keanu? We can show that the solution\nalways exists. If there are multiple optimal answers, print any. Input The\nfirst line of the input contains a single integer \n    n\n (\n    1\n    \u2264 n \n    \u2264\n    100\n) \u2014 the length of the string \n    s\n. The second line contains the\nstring \n    s\n of length \n    n\n consisting only from zeros and ones. Output\nIn the first line, output a single integer \n    k\n (\n    1\n    \u2264 k\n) \u2014 a\nminimal number of strings you have cut \n    s\n into. In the second line,\noutput \n    k\n strings \n    s_1, s_2, \n    \u2026, s_k\n separated with spaces.\nThe length of each string has to be positive. Their concatenation has to be\nequal to \n    s\n and all of them have to be good. If there are multiple\nanswers, print any. Examples Input 1 1 Output 1 1 Input 2 10 Output 2 1 0\nInput 6 100011 Output 2 100 011 Note In the first example, the string 1 wasn't\ncut at all. As it is good, the condition is satisfied. In the second example,\n1 and 0 both are good. As 10 isn't good, the answer is indeed minimal. In the\nthird example, 100 and 011 both are good. As 100011 isn't good, the answer is\nindeed minimal.\n\n",
        "cf_contest_id": 1189,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n1\r\n",
                "1 1\r\n"
            ],
            [
                "2\r\n10\r\n",
                "2 1 0\r\n"
            ],
            [
                "6\r\n100011\r\n",
                "2 1 00011\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n0101\r\n",
                "2 0 101\r\n"
            ],
            [
                "10\r\n1101001100\r\n",
                "2 1 101001100\r\n"
            ],
            [
                "44\r\n10010000111011010000111011111010010100001101\r\n",
                "2 1 0010000111011010000111011111010010100001101\r\n"
            ],
            [
                "80\r\n01110111110010110111011110101000110110000111000100111000000101001011111000110011\r\n",
                "1 01110111110010110111011110101000110110000111000100111000000101001011111000110011\r\n"
            ],
            [
                "100\r\n0010110000001111110111101011100111101000110011011100100011110001101110000001000010100001011011110001\r\n",
                "2 0 010110000001111110111101011100111101000110011011100100011110001101110000001000010100001011011110001\r\n"
            ],
            [
                "6\r\n010011\r\n",
                "2 0 10011\r\n"
            ],
            [
                "10\r\n1100010011\r\n",
                "2 1 100010011\r\n"
            ],
            [
                "12\r\n101010100101\r\n",
                "2 1 01010100101\r\n"
            ],
            [
                "15\r\n110001101000101\r\n",
                "1 110001101000101\r\n"
            ],
            [
                "18\r\n101111001111000110\r\n",
                "1 101111001111000110\r\n"
            ],
            [
                "20\r\n10010000010111010111\r\n",
                "2 1 0010000010111010111\r\n"
            ],
            [
                "36\r\n111100110011010001010010100011001101\r\n",
                "2 1 11100110011010001010010100011001101\r\n"
            ],
            [
                "45\r\n101001101111010010111100000111111010111001001\r\n",
                "1 101001101111010010111100000111111010111001001\r\n"
            ],
            [
                "72\r\n111101100111001110000000100010100000011011100110001010111010101011111100\r\n",
                "2 1 11101100111001110000000100010100000011011100110001010111010101011111100\r\n"
            ],
            [
                "100\r\n0110110011011111001110000110010010000111111001100001011101101000001011001101100111011111100111101110\r\n",
                "1 0110110011011111001110000110010010000111111001100001011101101000001011001101100111011111100111101110\r\n"
            ],
            [
                "2\r\n11\r\n",
                "1 11\r\n"
            ],
            [
                "3\r\n100\r\n",
                "1 100\r\n"
            ],
            [
                "1\r\n0\r\n",
                "1 0\r\n"
            ],
            [
                "2\r\n00\r\n",
                "1 00\r\n"
            ],
            [
                "8\r\n11001100\r\n",
                "2 1 1001100\r\n"
            ],
            [
                "3\r\n111\r\n",
                "1 111\r\n"
            ],
            [
                "3\r\n101\r\n",
                "1 101\r\n"
            ],
            [
                "3\r\n010\r\n",
                "1 010\r\n"
            ],
            [
                "8\r\n10100011\r\n",
                "2 1 0100011\r\n"
            ],
            [
                "7\r\n1111000\r\n",
                "1 1111000\r\n"
            ],
            [
                "3\r\n000\r\n",
                "1 000\r\n"
            ],
            [
                "8\r\n10010101\r\n",
                "2 1 0010101\r\n"
            ],
            [
                "8\r\n11000011\r\n",
                "2 1 1000011\r\n"
            ],
            [
                "4\r\n1100\r\n",
                "2 1 100\r\n"
            ],
            [
                "4\r\n1000\r\n",
                "1 1000\r\n"
            ],
            [
                "2\r\n01\r\n",
                "2 0 1\r\n"
            ],
            [
                "4\r\n1010\r\n",
                "2 1 010\r\n"
            ],
            [
                "6\r\n101100\r\n",
                "2 1 01100\r\n"
            ]
        ]
    }
]