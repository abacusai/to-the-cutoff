[
    {
        "name": "Not Quick Transformation",
        "description": "Let a be an array consisting of n numbers. The array's elements are numbered\nfrom 1 to n, even is an array consisting of the numerals whose numbers are\neven in a (eveni = a2i, 1 \u2264 2i \u2264 n), odd is an array consisting of the\nnumberals whose numbers are odd in \u0430 (oddi = a2i - 1, 1 \u2264 2i - 1 \u2264 n). Then\nlet's define the transformation of array F(a) in the following manner: if n >\n1, F(a) = F(odd) + F(even), where operation \" + \" stands for the arrays'\nconcatenation (joining together) if n = 1, F(a) = a Let a be an array\nconsisting of n numbers 1, 2, 3, ..., n. Then b is the result of applying the\ntransformation to the array a (so b = F(a)). You are given m queries (l, r, u,\nv). Your task is to find for each query the sum of numbers bi, such that l \u2264 i\n\u2264 r and u \u2264 bi \u2264 v. You should print the query results modulo mod. Input The\nfirst line contains three integers n, m, mod (1 \u2264 n \u2264 10^18, 1 \u2264 m \u2264 10^5, 1 \u2264\nmod \u2264 10^9). Next m lines describe the queries. Each query is defined by four\nintegers l, r, u, v (1 \u2264 l \u2264 r \u2264 n, 1 \u2264 u \u2264 v \u2264 10^18). Please do not use the\n\nspecificator. Output Print m lines each containing an integer \u2014 remainder\nmodulo mod of the query result. Examples Input 4 5 10000 2 3 4 5 2 4 1 3 1 2 2\n4 2 3 3 5 1 3 3 4 Output 0 5 3 3 3 Input 2 5 10000 1 2 2 2 1 1 4 5 1 1 2 5 1 1\n1 3 1 2 5 5 Output 2 0 0 1 0 Note Let's consider the first example. First\nlet's construct an array b = F(a) = F([1, 2, 3, 4]). Step 1. F([1, 2, 3, 4]) =\nF([1, 3]) + F([2, 4]) Step 2. F([1, 3]) = F([1]) + F([3]) = [1] + [3] = [1, 3]\nStep 3. F([2, 4]) = F([2]) + F([4]) = [2] + [4] = [2, 4] Step 4. b = F([1, 2,\n3, 4]) = F([1, 3]) + F([2, 4]) = [1, 3] + [2, 4] = [1, 3, 2, 4] Thus b = [1,\n3, 2, 4]. Let's consider the first query l = 2, r = 3, u = 4, v = 5. The\nsecond and third positions in the array b do not have numbers in the range [4,\n5], so the sum obviously equals zero. Let's consider the second query l = 2, r\n= 4, u = 1, v = 3. The second and third positions have two numbers that belong\nto the range [1, 3], their sum equals 5.\n\n",
        "cf_contest_id": 117,
        "cf_index": "D",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "divide and conquer",
            "math"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 5 10000\r\n2 3 4 5\r\n2 4 1 3\r\n1 2 2 4\r\n2 3 3 5\r\n1 3 3 4\r\n",
                "0\r\n5\r\n3\r\n3\r\n3\r\n"
            ],
            [
                "2 5 10000\r\n1 2 2 2\r\n1 1 4 5\r\n1 1 2 5\r\n1 1 1 3\r\n1 2 5 5\r\n",
                "2\r\n0\r\n0\r\n1\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 5 10000\r\n2 3 3 5\r\n1 3 1 1\r\n3 3 3 4\r\n1 1 3 4\r\n1 2 1 5\r\n",
                "3\r\n1\r\n0\r\n0\r\n4\r\n"
            ]
        ]
    }
]