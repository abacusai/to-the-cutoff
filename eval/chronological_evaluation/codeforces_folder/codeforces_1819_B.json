[
    {
        "name": "The Butcher",
        "description": "Anton plays his favorite game \"Defense of The Ancients 2\" for his favorite\nhero \u2014 The Butcher. Now he wants to make his own dinner. To do this he will\ntake a rectangle of height \n    h\n and width \n    w\n, then make a vertical or\nhorizontal cut so that both resulting parts have integer sides. After that, he\nwill put one of the parts in the box and cut the other again, and so on. More\nformally, a rectangle of size \n    h \n    \u00d7 w\n can be cut into two parts of\nsizes \n    x \n    \u00d7 w\n and \n    (h - x) \n    \u00d7 w\n, where \n    x\n is an\ninteger from \n    1\n to \n    (h - 1)\n, or into two parts of sizes \n    h\n    \n    \u00d7 y\n and \n    h \n    \u00d7 (w - y)\n, where \n    y\n is an integer from\n\n    1\n to \n    (w - 1)\n. He will repeat this operation \n    n - 1\n times, and\nthen put the remaining rectangle into the box too. Thus, the box will contain\n\n    n\n rectangles, of which \n    n - 1\n rectangles were put in the box as a\nresult of the cuts, and the \n    n\n-th rectangle is the one that the Butcher\nhas left after all \n    n - 1\n cuts. Unfortunately, Butcher forgot the numbers\n\n    h\n and \n    w\n, but he still has \n    n\n rectangles mixed in random\norder. Note that Butcher didn't rotate the rectangles, but only shuffled them.\nNow he wants to know all possible pairs \n    (h, w)\n from which this set of\nrectangles can be obtained. And you have to help him do it! It is guaranteed\nthat there exists at least one pair \n    (h, w)\n from which this set of\nrectangles can be obtained. Input Each test consists of multiple test cases.\nThe first line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n)\n\u2014 the number of test cases. The description of test cases follows. The first\nline of each test case contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n) \u2014 the number of rectangles obtained. The \n    i\n-th of the\nnext \n    n\n lines contains two integers \n    a_i\n and \n    b_i\n (\n    1 \n    \u2264\n    a_i, b_i \n    \u2264 10^6\n) \u2014 the height and width of the \n    i\n-th rectangle. It\nis guaranteed that the sum of \n    n\n over all test cases does not exceed \n    2\n    \n    \u00b7 10^5\n. Output For each test case, on the first line output a single\ninteger \n    m\n \u2014 the number of pairs \n    (h, w)\n denoting the sizes of\nrectangles from which the given rectangles can be obtained. Two rectangles are\nconsidered different if they have different heights or widths. On each of the\nfollowing \n    m\n lines print output integers \n    h_i\n and \n    w_i\n \u2014 the\nheight and width of the rectangle from which the given rectangles can be\nobtained. You can output the rectangles in any order. Example Input 4 3 1 2 3\n5 1 3 3 1 1 1 1 1 1 1 10 10 4 3 2 5 5 2 2 8 7 Output 1 4 5 2 1 3 3 1 1 10 10 1\n13 7 Note In the first test case, Butcher could only have a rectangle of size\n\n    4 \n    \u00d7 5\n. Then the cuts could look like this (first the green cut\nwas made, then the red one): In the second test case, Butcher could have\neither a rectangle of \n    1 \n    \u00d7 3\n or \n    3 \n    \u00d7 1\n. The cuts would\nhave looked like this (first the green cut was made, then the red cut): In the\nthird test case, Butcher did not make any cuts, so the rectangle is \n    10\n    \n    \u00d7 10\n.\n\n",
        "cf_contest_id": 1819,
        "cf_index": "B",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "geometry",
            "greedy",
            "implementation",
            "sortings",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3\r\n1 2\r\n3 5\r\n1 3\r\n3\r\n1 1\r\n1 1\r\n1 1\r\n1\r\n10 10\r\n4\r\n3 2\r\n5 5\r\n2 2\r\n8 7\r\n",
                "1\r\n4 5\r\n2\r\n1 3\r\n3 1\r\n1\r\n10 10\r\n1\r\n13 7\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2\r\n1 4\r\n2 4\r\n",
                "1\r\n3 4\r\n"
            ],
            [
                "1\r\n6\r\n4 1\r\n1 4\r\n1 3\r\n1 3\r\n1 3\r\n3 1\r\n",
                "1\r\n4 5\r\n"
            ],
            [
                "1\r\n3\r\n2 4\r\n1 2\r\n1 2\r\n",
                "2\r\n2 6\r\n3 4\r\n"
            ]
        ]
    }
]