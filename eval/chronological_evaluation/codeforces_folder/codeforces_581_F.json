[
    {
        "name": "Zublicanes and Mumocrates",
        "description": "It's election time in Berland. The favorites are of course parties of\nzublicanes and mumocrates. The election campaigns of both parties include\nnumerous demonstrations on n main squares of the capital of Berland. Each of\nthe n squares certainly can have demonstrations of only one party, otherwise\nit could lead to riots. On the other hand, both parties have applied to host a\nhuge number of demonstrations, so that on all squares demonstrations must be\nheld. Now the capital management will distribute the area between the two\nparties. Some pairs of squares are connected by (n - 1) bidirectional roads\nsuch that between any pair of squares there is a unique way to get from one\nsquare to another. Some squares are on the outskirts of the capital meaning\nthat they are connected by a road with only one other square, such squares are\ncalled dead end squares. The mayor of the capital instructed to distribute all\nthe squares between the parties so that the dead end squares had the same\nnumber of demonstrations of the first and the second party. It is guaranteed\nthat the number of dead end squares of the city is even. To prevent possible\nconflicts between the zublicanes and the mumocrates it was decided to minimize\nthe number of roads connecting the squares with the distinct parties. You, as\na developer of the department of distributing squares, should determine this\nsmallest number. Input The first line of the input contains a single integer n\n(2 \u2264 n \u2264 5000) \u2014 the number of squares in the capital of Berland. Next n - 1\nlines contain the pairs of integers x, y (1 \u2264 x, y \u2264 n, x \u2260 y) \u2014 the numbers\nof the squares connected by the road. All squares are numbered with integers\nfrom 1 to n. It is guaranteed that the number of dead end squares of the city\nis even. Output Print a single number \u2014 the minimum number of roads connecting\nthe squares with demonstrations of different parties. Examples Input 8 1 4 2 4\n3 4 6 5 7 5 8 5 4 5 Output 1 Input 5 1 2 1 3 1 4 1 5 Output 2\n\n",
        "cf_contest_id": 581,
        "cf_index": "F",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "trees",
            "two pointers"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "8\r\n1 4\r\n2 4\r\n3 4\r\n6 5\r\n7 5\r\n8 5\r\n4 5\r\n",
                "1\r\n"
            ],
            [
                "5\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "11\r\n1 7\r\n2 1\r\n2 9\r\n6 2\r\n7 10\r\n1 3\r\n5 2\r\n3 8\r\n8 11\r\n2 4\r\n",
                "2\r\n"
            ],
            [
                "20\r\n2 18\r\n15 18\r\n18 4\r\n4 20\r\n20 6\r\n8 6\r\n1 8\r\n9 6\r\n11 9\r\n11 12\r\n19 4\r\n3 9\r\n9 7\r\n7 13\r\n10 3\r\n16 20\r\n1 5\r\n5 17\r\n10 14\r\n",
                "1\r\n"
            ],
            [
                "11\r\n9 2\r\n9 4\r\n8 9\r\n7 9\r\n3 9\r\n5 9\r\n6 9\r\n10 9\r\n1 9\r\n11 9\r\n",
                "5\r\n"
            ],
            [
                "15\r\n4 12\r\n1 12\r\n1 6\r\n9 1\r\n7 4\r\n12 5\r\n15 9\r\n11 1\r\n13 9\r\n14 9\r\n9 2\r\n3 5\r\n10 2\r\n3 8\r\n",
                "1\r\n"
            ],
            [
                "16\r\n15 6\r\n5 9\r\n3 15\r\n9 11\r\n7 15\r\n1 2\r\n14 6\r\n8 9\r\n14 12\r\n10 16\r\n3 13\r\n8 1\r\n3 1\r\n9 4\r\n10 1\r\n",
                "2\r\n"
            ],
            [
                "17\r\n15 6\r\n2 8\r\n15 2\r\n8 3\r\n16 4\r\n13 7\r\n11 5\r\n10 1\r\n2 12\r\n16 8\r\n12 9\r\n11 8\r\n1 8\r\n5 17\r\n13 11\r\n14 13\r\n",
                "2\r\n"
            ],
            [
                "18\r\n5 7\r\n3 9\r\n16 17\r\n18 13\r\n3 15\r\n3 18\r\n17 11\r\n12 8\r\n1 2\r\n5 16\r\n17 4\r\n1 4\r\n8 1\r\n6 5\r\n4 18\r\n10 5\r\n14 17\r\n",
                "1\r\n"
            ],
            [
                "19\r\n3 19\r\n13 19\r\n11 6\r\n15 19\r\n7 14\r\n12 18\r\n8 16\r\n7 4\r\n11 12\r\n7 10\r\n11 14\r\n2 17\r\n9 7\r\n3 11\r\n2 7\r\n1 7\r\n16 2\r\n5 17\r\n",
                "2\r\n"
            ],
            [
                "21\r\n3 19\r\n3 17\r\n4 3\r\n11 3\r\n3 16\r\n8 3\r\n7 3\r\n3 21\r\n3 9\r\n13 3\r\n18 3\r\n12 3\r\n3 1\r\n10 3\r\n3 5\r\n3 20\r\n3 14\r\n3 2\r\n6 3\r\n3 15\r\n",
                "10\r\n"
            ],
            [
                "21\r\n7 8\r\n20 7\r\n7 6\r\n14 7\r\n3 7\r\n7 19\r\n7 9\r\n2 7\r\n4 7\r\n16 7\r\n7 5\r\n7 13\r\n7 10\r\n15 7\r\n7 11\r\n7 17\r\n7 21\r\n18 7\r\n7 1\r\n7 12\r\n",
                "10\r\n"
            ],
            [
                "23\r\n3 9\r\n9 15\r\n9 19\r\n10 9\r\n9 4\r\n9 8\r\n1 9\r\n9 6\r\n9 21\r\n9 18\r\n20 9\r\n9 13\r\n9 23\r\n14 9\r\n5 9\r\n12 9\r\n9 16\r\n2 9\r\n11 9\r\n17 9\r\n7 9\r\n22 9\r\n",
                "11\r\n"
            ],
            [
                "23\r\n15 6\r\n15 23\r\n15 10\r\n11 15\r\n15 19\r\n15 7\r\n12 15\r\n15 8\r\n4 15\r\n22 15\r\n20 15\r\n17 15\r\n3 15\r\n15 13\r\n21 15\r\n15 16\r\n9 15\r\n5 15\r\n14 15\r\n1 15\r\n15 18\r\n2 15\r\n",
                "11\r\n"
            ]
        ]
    }
]