[
    {
        "name": "Tyler and Strings",
        "description": "While looking at the kitchen fridge, the little boy Tyler noticed magnets with\nsymbols, that can be aligned into a string \n    s\n. Tyler likes strings, and\nespecially those that are lexicographically smaller than another string,\n\n    t\n. After playing with magnets on the fridge, he is wondering, how many\ndistinct strings can be composed out of letters of string \n    s\n by\nrearranging them, so that the resulting string is lexicographically smaller\nthan the string \n    t\n? Tyler is too young, so he can't answer this question.\nThe alphabet Tyler uses is very large, so for your convenience he has already\nreplaced the same letters in \n    s\n and \n    t\n to the same integers, keeping\nthat different letters have been replaced to different integers. We call a\nstring \n    x\n lexicographically smaller than a string \n    y\n if one of the\nfollowings conditions is fulfilled: There exists such position of symbol\n\n    m\n that is presented in both strings, so that before \n    m\n-th symbol\nthe strings are equal, and the \n    m\n-th symbol of string \n    x\n is smaller\nthan \n    m\n-th symbol of string \n    y\n. String \n    x\n is the prefix of\nstring \n    y\n and \n    x \n    \u2260 y\n. Because the answer can be too large,\nprint it modulo \n    998\n     244\n     353\n. Input The first line contains two\nintegers \n    n\n and \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 200\n     000\n) \u2014 the\nlengths of strings \n    s\n and \n    t\n respectively. The second line contains\n\n    n\n integers \n    s_1, s_2, s_3, \n    \u2026, s_n\n (\n    1 \n    \u2264 s_i \n    \u2264\n    200\n     000\n) \u2014 letters of the string \n    s\n. The third line contains\n\n    m\n integers \n    t_1, t_2, t_3, \n    \u2026, t_m\n (\n    1 \n    \u2264 t_i \n    \u2264\n    200\n     000\n) \u2014 letters of the string \n    t\n. Output Print a single number \u2014\nthe number of strings lexicographically smaller than \n    t\n that can be\nobtained by rearranging the letters in \n    s\n, modulo\n\n    998\n     244\n     353\n. Examples Input 3 4 1 2 2 2 1 2 1 Output 2 Input 4 4 1\n2 3 4 4 3 2 1 Output 23 Input 4 3 1 1 1 2 1 1 2 Output 1 Note In the first\nexample, the strings we are interested in are \n    [1\n      2\n      2]\n and\n\n    [2\n      1\n      2]\n. The string \n    [2\n      2\n      1]\n is lexicographically\nlarger than the string \n    [2\n      1\n      2\n      1]\n, so we don't count it. In\nthe second example, all strings count except \n    [4\n      3\n      2\n      1]\n, so\nthe answer is \n    4! - 1 = 23\n. In the third example, only the string\n\n    [1\n      1\n      1\n      2]\n counts.\n\n",
        "cf_contest_id": 1648,
        "cf_index": "C",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 4\r\n1 2 2\r\n2 1 2 1\r\n",
                "2"
            ],
            [
                "4 4\r\n1 2 3 4\r\n4 3 2 1\r\n",
                "23"
            ],
            [
                "4 3\r\n1 1 1 2\r\n1 1 2\r\n",
                "1"
            ]
        ],
        "private_cases": [
            [
                "10 5\r\n1 2 2 1 1 2 3 1 2 2\r\n1 2 2 1 1\r\n",
                "273"
            ],
            [
                "5 10\r\n1 3 2 2 1\r\n1 3 2 2 1 3 3 2 2 2\r\n",
                "12"
            ],
            [
                "1 1\r\n1\r\n1\r\n",
                "0"
            ],
            [
                "100 100\r\n2 1 1 1 2 2 2 2 2 1 1 1 2 1 2 2 1 2 2 2 1 1 2 2 2 1 2 1 2 2 1 2 1 2 2 1 1 1 1 1 2 1 2 1 1 1 2 2 1 1 1 2 1 2 1 2 2 1 2 2 2 1 2 2 1 1 1 2 1 2 1 2 2 1 1 2 1 1 1 2 2 2 1 1 1 1 1 2 1 2 2 1 1 1 1 1 1 1 2 1\r\n2 2 2 1 2 2 1 2 1 1 1 2 2 1 2 1 1 2 1 2 2 1 2 1 1 1 2 1 2 2 2 1 1 1 2 1 1 2 1 1 2 2 1 2 2 2 1 2 2 1 2 2 2 2 2 2 1 1 2 1 2 1 2 1 2 2 1 2 2 1 1 2 2 1 2 1 1 1 1 1 1 1 2 1 1 1 2 2 2 2 2 2 1 1 2 2 2 1 2 1\r\n",
                "527570151"
            ],
            [
                "10 10\r\n3 3 5 3 3 1 5 2 2 4\r\n3 3 5 4 1 5 2 1 1 4\r\n",
                "21084"
            ],
            [
                "10 10\r\n3 5 2 5 1 4 5 5 1 3\r\n3 5 2 5 1 4 5 5 1 3\r\n",
                "16654"
            ],
            [
                "9 10\r\n9 5 3 7 7 2 10 4 9\r\n9 5 3 7 7 2 10 4 9 8\r\n",
                "68573"
            ],
            [
                "10 10\r\n1 2 2 4 6 7 7 7 9 10\r\n1 2 2 4 6 7 7 7 9 10\r\n",
                "0"
            ],
            [
                "10 10\r\n6 6 10 10 8 10 10 10 7 8\r\n5 2 2 4 5 1 2 2 3 5\r\n",
                "0"
            ],
            [
                "10 9\r\n4 3 2 5 3 2 6 2 4 10\r\n4 3 2 5 3 2 6 2 4\r\n",
                "87252"
            ],
            [
                "2 3\r\n2 3\r\n2 2 3\r\n",
                "0"
            ],
            [
                "1 2\r\n200000\r\n1 1\r\n",
                "0"
            ],
            [
                "3 6\r\n10 7 8\r\n8 7 6 10 5 4\r\n",
                "2"
            ],
            [
                "13 14\r\n1 2 3 4 5 6 7 8 9 10 11 12 13\r\n3 2 1 4 13 5 8 9 12 10 11 6 7 14\r\n",
                "0"
            ],
            [
                "3 1\r\n1 100000 100000\r\n2\r\n",
                "1"
            ]
        ]
    }
]