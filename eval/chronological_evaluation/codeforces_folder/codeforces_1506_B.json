[
    {
        "name": "Partial Replacement",
        "description": "You are given a number \n    k\n and a string \n    s\n of length \n    n\n,\nconsisting of the characters '.' and '*'. You want to replace some of the '*'\ncharacters with 'x' characters so that the following conditions are met: The\nfirst character '*' in the original string should be replaced with 'x'; The\nlast character '*' in the original string should be replaced with 'x'; The\ndistance between two neighboring replaced characters 'x' must not exceed\n\n    k\n (more formally, if you replaced characters at positions \n    i\n and\n\n    j\n (\n    i < j\n) and at positions \n    [i+1, j-1]\n there is no \"x\"\nsymbol, then \n    j-i\n must be no more than \n    k\n). For example, if\n\n    n=7\n, \n    s=\n.**.*** and \n    k=3\n, then the following strings will\nsatisfy the conditions above: .xx.*xx; .x*.x*x; .xx.xxx. But, for example, the\nfollowing strings will not meet the conditions: .**.*xx (the first character\n'*' should be replaced with 'x'); .x*.xx* (the last character '*' should be\nreplaced with 'x'); .x*.*xx (the distance between characters at positions\n\n    2\n and \n    6\n is greater than \n    k=3\n). Given \n    n\n, \n    k\n, and\n\n    s\n, find the minimum number of '*' characters that must be replaced with\n'x' in order to meet the above conditions. Input The first line contains one\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 500\n). Then \n    t\n test cases follow.\nThe first line of each test case contains two integers \n    n\n and \n    k\n\n(\n    1 \n    \u2264 k \n    \u2264 n \n    \u2264 50\n). The second line of each test case contains\na string \n    s\n of length \n    n\n, consisting of the characters '.' and '*'.\nIt is guaranteed that there is at least one '*' in the string \n    s\n. It is\nguaranteed that the distance between any two neighboring '*' characters does\nnot exceed \n    k\n. Output For each test case output the minimum number of '*'\ncharacters that must be replaced with 'x' characters in order to satisfy the\nconditions above. Example Input 5 7 3 .**.*** 5 1 ..*.. 5 2 *.*.* 3 2 *.* 1 1\n* Output 3 1 3 2 1\n\n",
        "cf_contest_id": 1506,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n7 3\r\n.**.***\r\n5 1\r\n..*..\r\n5 2\r\n*.*.*\r\n3 2\r\n*.*\r\n1 1\r\n*\r\n",
                "3\r\n1\r\n3\r\n2\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]