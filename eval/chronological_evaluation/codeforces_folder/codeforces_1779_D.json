[
    {
        "name": "Boris and His Amazing Haircut",
        "description": "Boris thinks that chess is a tedious game. So he left his tournament early and\nwent to a barber shop as his hair was a bit messy. His current hair can be\ndescribed by an array \n    a_1,a_2,\n    \u2026, a_n\n, where \n    a_i\n is the\nheight of the hair standing at position \n    i\n. His desired haircut can be\ndescribed by an array \n    b_1,b_2,\n    \u2026, b_n\n in a similar fashion. The\nbarber has \n    m\n razors. Each has its own size and can be used at most once.\nIn one operation, he chooses a razor and cuts a segment of Boris's hair. More\nformally, an operation is: Choose any razor which hasn't been used before, let\nits size be \n    x\n; Choose a segment \n    [l,r]\n (\n    1\n    \u2264 l \n    \u2264 r\n    \n    \u2264 n\n); Set \n    a_i := \n    min (a_i,x)\n for each \n    l\n    \u2264 i \n    \u2264\n    r\n; Notice that some razors might have equal sizes \u2014 the barber can choose\nsome size \n    x\n only as many times as the number of razors with size\n\n    x\n. He may perform as many operations as he wants, as long as any razor\nis used at most once and \n    a_i = b_i\n for each \n    1 \n    \u2264 i \n    \u2264 n\n at\nthe end. He does not have to use all razors. Can you determine whether the\nbarber can give Boris his desired haircut? Input Each test contains multiple\ntest cases. The first line contains the number of test cases \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 20\n     000\n). The description of the test cases follows. The\nfirst line of each test case contains a positive integer \n    n\n (\n    3\n    \u2264\n    n\n    \u2264 2\n    \u00b7 10^5\n) \u2014 the length of arrays \n    a\n and \n    b\n. The\nsecond line of each test case contains \n    n\n positive integers \n    a_1, a_2,\n    \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 Boris's current hair. The\nthird line of each test case contains \n    n\n positive integers \n    b_1, b_2,\n    \n    \u2026, b_n\n (\n    1 \n    \u2264 b_i \n    \u2264 10^9\n) \u2014 Boris's desired hair. The\nfourth line of each test case contains a positive integer \n    m\n (\n    1 \n    \u2264\n    m \n    \u2264 2\n    \u00b7 10^5\n) \u2014 the number of razors. The fifth line of each test\ncase contains \n    m\n positive integers \n    x_1,x_2, \n    \u2026, x_m\n (\n    1\n    \n    \u2264 x_i \n    \u2264 10^9\n) \u2014 the sizes of the razors. It is guaranteed that\nthe sum of \n    n\n and the sum of \n    m\n over all test cases do not exceed\n\n    2\n    \u00b7 10^5\n. Output For each test case, print \"YES\" if the barber can\ncut Boris's hair as desired. Otherwise, print \"NO\". You can output the answer\nin any case (upper or lower). For example, the strings \"yEs\", \"yes\", \"Yes\",\nand \"YES\" will be recognized as positive responses. Example Input 7 3 3 3 3 2\n1 2 2 1 2 6 3 4 4 6 3 4 3 1 2 3 2 3 3 3 2 3 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5\n6 7 8 9 10 10 1 2 3 4 5 6 7 8 9 10 3 1 1 1 1 1 2 12 4 2 4 3 1 5 6 3 5 6 2 1 13\n7 9 4 5 3 3 3 6 8 10 3 2 5 5 3 1 5 3 2 2 5 8 5 1 1 5 8 1 5 3 5 4 2 3 1 13 7 9\n4 5 3 3 3 6 8 10 3 2 5 5 3 1 5 3 2 2 5 8 5 1 1 5 7 1 5 3 4 2 3 1 3 19747843\n2736467 938578397 2039844 2039844 2039844 1 2039844 Output YES NO YES NO YES\nNO YES Note In the first test case, Boris's hair is initially \n    [3,3,3]\n.\nLet us describe a sequence of \n    2\n operations the barber can perform: The\nbarber uses the razor with size \n    1\n on the segment \n    [2,2]\n; hence\nBoris's hair becomes \n    [3,1,3]\n. The barber uses the razor with size\n\n    2\n on the segment \n    [1,3]\n; hence Boris's hair becomes \n    [2,1,2]\n\nwhich is the desired haircut. In the third test case, no operation has to be\ndone since Boris's hair is already as desired. In the fourth test case, no\ncuts will be able to increase the third element in \n    [1,1,1]\n in a way that\nthe array becomes \n    [1,1,2]\n.\n\n",
        "cf_contest_id": 1779,
        "cf_index": "D",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "dp",
            "dsu",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n3\r\n3 3 3\r\n2 1 2\r\n2\r\n1 2\r\n6\r\n3 4 4 6 3 4\r\n3 1 2 3 2 3\r\n3\r\n3 2 3\r\n10\r\n1 2 3 4 5 6 7 8 9 10\r\n1 2 3 4 5 6 7 8 9 10\r\n10\r\n1 2 3 4 5 6 7 8 9 10\r\n3\r\n1 1 1\r\n1 1 2\r\n12\r\n4 2 4 3 1 5 6 3 5 6 2 1\r\n13\r\n7 9 4 5 3 3 3 6 8 10 3 2 5\r\n5 3 1 5 3 2 2 5 8 5 1 1 5\r\n8\r\n1 5 3 5 4 2 3 1\r\n13\r\n7 9 4 5 3 3 3 6 8 10 3 2 5\r\n5 3 1 5 3 2 2 5 8 5 1 1 5\r\n7\r\n1 5 3 4 2 3 1\r\n3\r\n19747843 2736467 938578397\r\n2039844 2039844 2039844\r\n1\r\n2039844\r\n",
                "YES\r\nNO\r\nYES\r\nNO\r\nYES\r\nNO\r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n5\r\n3 4 4 2 3\r\n2 4 4 2 2\r\n1\r\n2\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n4\r\n100 100 100 100\r\n2 1 3 2\r\n3\r\n1 2 3\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n4\r\n10 10 10 10\r\n3 2 5 2\r\n3\r\n2 3 5\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n4\r\n6 3 2 2\r\n5 1 2 1\r\n2\r\n1 5\r\n",
                "NO\r\n"
            ]
        ]
    }
]