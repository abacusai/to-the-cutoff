[
    {
        "name": "Good String",
        "description": "You have a string \n    s\n of length \n    n\n consisting of only characters >\nand <. You may do some operations with this string, for each operation you\nhave to choose some character that still remains in the string. If you choose\na character >, the character that comes right after it is deleted (if the\ncharacter you chose was the last one, nothing happens). If you choose a\ncharacter <, the character that comes right before it is deleted (if the\ncharacter you chose was the first one, nothing happens). For example, if we\nchoose character > in string > > < >, the string will become to > > >. And if\nwe choose character < in string > <, the string will become to <. The string\nis good if there is a sequence of operations such that after performing it\nonly one character will remain in the string. For example, the strings >, > >\nare good. Before applying the operations, you may remove any number of\ncharacters from the given string (possibly none, possibly up to \n    n - 1\n,\nbut not the whole string). You need to calculate the minimum number of\ncharacters to be deleted from string \n    s\n so that it becomes good. Input\nThe first line contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2013 the\nnumber of test cases. Each test case is represented by two lines. The first\nline of \n    i\n-th test case contains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    100\n) \u2013 the length of string \n    s\n. The second line of \n    i\n-th test\ncase contains string \n    s\n, consisting of only characters > and <. Output\nFor each test case print one line. For \n    i\n-th test case print the minimum\nnumber of characters to be deleted from string \n    s\n so that it becomes\ngood. Example Input 3 2 <> 3 ><< 1 > Output 1 0 0 Note In the first test case\nwe can delete any character in string <>. In the second test case we don't\nneed to delete any characters. The string > < < is good, because we can\nperform the following sequence of operations: > < < \n    \u2192\n < <\n\n    \u2192\n <.\n\n",
        "cf_contest_id": 1140,
        "cf_index": "B",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2\r\n<>\r\n3\r\n><<\r\n1\r\n>\r\n",
                "1\r\n0\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "13\r\n1\r\n>\r\n1\r\n>\r\n1\r\n>\r\n1\r\n>\r\n1\r\n>\r\n1\r\n>\r\n1\r\n>\r\n1\r\n>\r\n1\r\n>\r\n1\r\n>\r\n1\r\n>\r\n1\r\n>\r\n1\r\n>\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "14\r\n1\r\n>\r\n1\r\n>\r\n1\r\n>\r\n1\r\n>\r\n1\r\n>\r\n1\r\n>\r\n1\r\n>\r\n1\r\n>\r\n1\r\n>\r\n1\r\n>\r\n1\r\n>\r\n1\r\n>\r\n1\r\n>\r\n1\r\n<\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "1\r\n9\r\n>>>>>>>><\r\n",
                "0\r\n"
            ]
        ]
    }
]