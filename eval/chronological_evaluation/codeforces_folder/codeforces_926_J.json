[
    {
        "name": "Segments",
        "description": "There is a straight line colored in white. n black segments are added on it\none by one. After each segment is added, determine the number of connected\ncomponents of black segments (i. e. the number of black segments in the union\nof the black segments). In particular, if one segment ends in a point x, and\nanother segment starts in the point x, these two segments belong to the same\nconnected component. Input The first line contains a single integer n (1 \u2264 n \u2264\n200 000) \u2014 the number of segments. The i-th of the next n lines contains two\nintegers li and ri (1 \u2264 li < ri \u2264 10^9) \u2014 the coordinates of the left and the\nright ends of the i-th segment. The segments are listed in the order they are\nadded on the white line. Output Print n integers \u2014 the number of connected\ncomponents of black segments after each segment is added. Examples Input 3 1 3\n4 5 2 4 Output 1 2 1 Input 9 10 20 50 60 30 40 70 80 90 100 60 70 10 40 40 50\n80 90 Output 1 2 3 4 5 4 3 2 1 Note In the first example there are two\ncomponents after the addition of the first two segments, because these\nsegments do not intersect. The third added segment intersects the left segment\nand touches the right segment at the point 4 (these segments belong to the\nsame component, according to the statements). Thus the number of connected\ncomponents of black segments is equal to 1 after that.\n\n",
        "cf_contest_id": 926,
        "cf_index": "J",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 3\r\n4 5\r\n2 4\r\n",
                "1 2 1 "
            ],
            [
                "9\r\n10 20\r\n50 60\r\n30 40\r\n70 80\r\n90 100\r\n60 70\r\n10 40\r\n40 50\r\n80 90\r\n",
                "1 2 3 4 5 4 3 2 1 "
            ]
        ],
        "private_cases": [
            [
                "4\r\n1 3\r\n4 5\r\n2 3\r\n3 4\r\n",
                "1 2 2 1 "
            ],
            [
                "1\r\n1 1000000000\r\n",
                "1 "
            ],
            [
                "1\r\n1 2\r\n",
                "1 "
            ],
            [
                "2\r\n400 500\r\n1 1000000000\r\n",
                "1 1 "
            ],
            [
                "2\r\n1 2\r\n2 3\r\n",
                "1 1 "
            ],
            [
                "2\r\n1 2\r\n3 4\r\n",
                "1 2 "
            ],
            [
                "2\r\n3 4\r\n1 3\r\n",
                "1 1 "
            ],
            [
                "2\r\n1 4\r\n3 4\r\n",
                "1 1 "
            ],
            [
                "2\r\n4 5\r\n3 5\r\n",
                "1 1 "
            ],
            [
                "2\r\n5 6\r\n1 4\r\n",
                "1 2 "
            ],
            [
                "2\r\n5 6\r\n1 5\r\n",
                "1 1 "
            ],
            [
                "2\r\n4 6\r\n4 5\r\n",
                "1 1 "
            ],
            [
                "2\r\n4 6\r\n4 6\r\n",
                "1 1 "
            ],
            [
                "2\r\n4 6\r\n4 7\r\n",
                "1 1 "
            ],
            [
                "2\r\n4 6\r\n5 6\r\n",
                "1 1 "
            ],
            [
                "2\r\n4 6\r\n5 7\r\n",
                "1 1 "
            ],
            [
                "2\r\n4 6\r\n6 7\r\n",
                "1 1 "
            ],
            [
                "5\r\n13 15\r\n10 11\r\n13 17\r\n15 19\r\n7 11\r\n",
                "1 2 2 2 2 "
            ],
            [
                "7\r\n9 11\r\n18 20\r\n8 11\r\n17 18\r\n16 21\r\n11 12\r\n26 27\r\n",
                "1 2 2 2 2 2 3 "
            ],
            [
                "20\r\n22 26\r\n54 58\r\n49 51\r\n95 98\r\n35 37\r\n80 81\r\n30 31\r\n71 74\r\n69 71\r\n88 89\r\n71 73\r\n52 56\r\n59 62\r\n47 49\r\n57 58\r\n34 36\r\n7 8\r\n22 23\r\n40 44\r\n71 73\r\n",
                "1 2 3 4 5 6 7 8 8 9 9 9 10 10 10 10 11 11 12 12 "
            ],
            [
                "30\r\n78 80\r\n37 39\r\n66 68\r\n47 55\r\n39 43\r\n48 56\r\n44 52\r\n7 9\r\n27 34\r\n34 36\r\n90 96\r\n13 22\r\n76 79\r\n9 16\r\n75 83\r\n1 11\r\n74 76\r\n56 62\r\n61 65\r\n77 83\r\n48 53\r\n48 50\r\n22 29\r\n39 46\r\n70 72\r\n24 26\r\n1 9\r\n40 45\r\n13 22\r\n46 49\r\n",
                "1 2 3 4 4 4 4 5 6 6 7 8 8 7 7 7 7 7 7 7 7 7 6 5 6 6 6 6 6 6 "
            ],
            [
                "50\r\n719 721\r\n564 575\r\n582 593\r\n404 423\r\n437 439\r\n261 278\r\n497 514\r\n314 315\r\n576 590\r\n34 46\r\n190 196\r\n411 423\r\n870 873\r\n309 310\r\n850 860\r\n802 821\r\n642 643\r\n612 613\r\n229 235\r\n675 682\r\n51 53\r\n531 532\r\n870 882\r\n85 95\r\n691 707\r\n2 12\r\n983 995\r\n467 476\r\n201 211\r\n899 916\r\n362 369\r\n805 825\r\n220 233\r\n40 52\r\n800 819\r\n553 573\r\n651 667\r\n298 312\r\n837 841\r\n470 474\r\n828 835\r\n427 440\r\n288 295\r\n796 803\r\n947 957\r\n796 807\r\n394 407\r\n734 740\r\n790 801\r\n359 375\r\n",
                "1 2 3 4 5 6 7 8 8 9 10 10 11 12 13 14 15 16 17 18 19 20 20 21 22 23 24 25 26 27 28 28 28 27 27 27 28 28 29 29 30 30 31 31 32 32 32 33 33 33 "
            ],
            [
                "2\r\n1 2\r\n2 1000000000\r\n",
                "1 1 "
            ],
            [
                "2\r\n999999999 1000000000\r\n999999998 999999999\r\n",
                "1 1 "
            ],
            [
                "2\r\n999999999 1000000000\r\n999999997 999999998\r\n",
                "1 2 "
            ]
        ]
    }
]