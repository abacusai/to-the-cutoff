[
    {
        "name": "Smallest Word",
        "description": "IA has so many colorful magnets on her fridge! Exactly one letter is written\non each magnet, 'a' or 'b'. She loves to play with them, placing all magnets\nin a row. However, the girl is quickly bored and usually thinks how to make\nher entertainment more interesting. Today, when IA looked at the fridge, she\nnoticed that the word formed by magnets is really messy. \"It would look much\nbetter when I'll swap some of them!\" \u2014 thought the girl \u2014 \"but how to do it?\".\nAfter a while, she got an idea. IA will look at all prefixes with lengths from\n\n    1\n to the length of the word and for each prefix she will either reverse\nthis prefix or leave it as it is. She will consider the prefixes in the fixed\norder: from the shortest to the largest. She wants to get the\nlexicographically smallest possible word after she considers all prefixes. Can\nyou help her, telling which prefixes should be chosen for reversing? A string\n\n    a\n is lexicographically smaller than a string \n    b\n if and only if one\nof the following holds: \n    a\n is a prefix of \n    b\n, but \n    a \n     b\n;\nin the first position where \n    a\n and \n    b\n differ, the string \n    a\n has\na letter that appears earlier in the alphabet than the corresponding letter in\n\n    b\n. Input The first and the only line contains a string \n    s\n (\n    1\n    \n    \u2264 |s| \n    \u2264 1000\n), describing the initial string formed by magnets. The\nstring \n    s\n consists only of characters 'a' and 'b'. Output Output exactly\n\n    |s|\n integers. If IA should reverse the \n    i\n-th prefix (that is, the\nsubstring from \n    1\n to \n    i\n), the \n    i\n-th integer should be equal to\n\n    1\n, and it should be equal to \n    0\n otherwise. If there are multiple\npossible sequences leading to the optimal answer, print any of them. Examples\nInput bbab Output 0 1 1 0 Input aaaaa Output 1 0 0 0 1 Note In the first\nexample, IA can reverse the second and the third prefix and get a string\n\"abbb\". She cannot get better result, since it is also lexicographically\nsmallest string obtainable by permuting characters of the initial string. In\nthe second example, she can reverse any subset of prefixes \u2014 all letters are\n'a'.\n\n",
        "cf_contest_id": 1043,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "bbab\r\n",
                "0 1 1 0\r\n"
            ],
            [
                "aaaaa\r\n",
                "0 0 0 0 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "abbaabba\r\n",
                "1 0 1 0 1 0 1 1\r\n"
            ],
            [
                "a\r\n",
                "1\r\n"
            ],
            [
                "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n",
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n"
            ],
            [
                "ababababab\r\n",
                "1 1 1 1 1 1 1 1 1 0\r\n"
            ],
            [
                "bbb\r\n",
                "0 0 0\r\n"
            ],
            [
                "b\r\n",
                "0\r\n"
            ],
            [
                "ab\r\n",
                "1 0\r\n"
            ],
            [
                "ba\r\n",
                "1 1\r\n"
            ],
            [
                "ababbaabab\r\n",
                "1 1 1 0 1 0 1 1 1 0\r\n"
            ],
            [
                "babbbbabbbbbbabababa\r\n",
                "1 1 0 0 0 1 1 0 0 0 0 0 1 1 1 1 1 1 1 1\r\n"
            ],
            [
                "ababbbaaababbbaaaabb\r\n",
                "1 1 1 0 0 1 0 0 1 1 1 0 0 1 0 0 0 1 0 0\r\n"
            ],
            [
                "aaaabaaaabaaaabaaaab\r\n",
                "0 0 0 1 1 0 0 0 1 1 0 0 0 1 1 0 0 0 1 0\r\n"
            ],
            [
                "aaaaabaabaababbababbababbbaaaabbbabbbabbababababab\r\n",
                "0 0 0 0 1 1 0 1 1 0 1 1 1 0 1 1 1 1 0 1 1 1 1 0 0 1 0 0 0 1 0 0 1 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 1 0\r\n"
            ],
            [
                "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n",
                "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\r\n"
            ],
            [
                "abaaba\r\n",
                "1 1 0 1 1 1\r\n"
            ],
            [
                "abaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaabaab\r\n",
                "1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 1 0 1 0\r\n"
            ],
            [
                "abababababababababababa\r\n",
                "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n"
            ],
            [
                "babbaababbaababbaababbaababbaababbaababbaababbaababbaababbaababbaababbaababbaababbaababbaababbaababbaababbaababbaababbaabab\r\n",
                "1 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 0\r\n"
            ],
            [
                "babbab\r\n",
                "1 1 0 1 1 0\r\n"
            ]
        ]
    }
]