[
    {
        "name": "Queue",
        "description": "During the lunch break all n Berland State University students lined up in the\nfood court. However, it turned out that the food court, too, has a lunch break\nand it temporarily stopped working. Standing in a queue that isn't being\nserved is so boring! So, each of the students wrote down the number of the\nstudent ID of the student that stands in line directly in front of him, and\nthe student that stands in line directly behind him. If no one stands before\nor after a student (that is, he is the first one or the last one), then he\nwrites down number 0 instead (in Berland State University student IDs are\nnumerated from 1). After that, all the students went about their business.\nWhen they returned, they found out that restoring the queue is not such an\neasy task. Help the students to restore the state of the queue by the numbers\nof the student ID's of their neighbors in the queue. Input The first line\ncontains integer n (2 \u2264 n \u2264 2\u00b710^5) \u2014 the number of students in the queue.\nThen n lines follow, i-th line contains the pair of integers ai, bi (0 \u2264 ai,\nbi \u2264 10^6), where ai is the ID number of a person in front of a student and bi\nis the ID number of a person behind a student. The lines are given in the\narbitrary order. Value 0 is given instead of a neighbor's ID number if the\nneighbor doesn't exist. The ID numbers of all students are distinct. It is\nguaranteed that the records correspond too the queue where all the students\nstand in some order. Output Print a sequence of n integers x1, x2, ..., xn \u2014\nthe sequence of ID numbers of all the students in the order they go in the\nqueue from the first student to the last one. Examples Input 4 92 31 0 7 31 0\n7 141 Output 92 7 31 141 Note The picture illustrates the queue for the first\nsample.\n\n",
        "cf_contest_id": 490,
        "cf_index": "B",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "dsu",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n92 31\r\n0 7\r\n31 0\r\n7 141\r\n",
                "92\r\n7\r\n31\r\n141\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n0 1\r\n2 0\r\n",
                "2\r\n1\r\n"
            ],
            [
                "3\r\n0 2\r\n1 3\r\n2 0\r\n",
                "1\r\n2\r\n3\r\n"
            ],
            [
                "4\r\n101 0\r\n0 102\r\n102 100\r\n103 101\r\n",
                "103\r\n102\r\n101\r\n100\r\n"
            ],
            [
                "5\r\n0 1\r\n1 4\r\n4 0\r\n3 2\r\n5 3\r\n",
                "5\r\n1\r\n3\r\n4\r\n2\r\n"
            ],
            [
                "6\r\n10001 0\r\n0 10005\r\n10003 10001\r\n10002 10000\r\n10005 10002\r\n10004 10003\r\n",
                "10004\r\n10005\r\n10003\r\n10002\r\n10001\r\n10000\r\n"
            ],
            [
                "3\r\n0 743259\r\n72866 70294\r\n743259 0\r\n",
                "72866\r\n743259\r\n70294\r\n"
            ],
            [
                "4\r\n263750 0\r\n513707 263750\r\n0 718595\r\n718595 148112\r\n",
                "513707\r\n718595\r\n263750\r\n148112\r\n"
            ],
            [
                "5\r\n645873 145459\r\n638930 82975\r\n0 645873\r\n82975 389665\r\n145459 0\r\n",
                "638930\r\n645873\r\n82975\r\n145459\r\n389665\r\n"
            ],
            [
                "6\r\n341637 51795\r\n0 809471\r\n51795 0\r\n244669 341637\r\n852537 508622\r\n809471 852537\r\n",
                "244669\r\n809471\r\n341637\r\n852537\r\n51795\r\n508622\r\n"
            ],
            [
                "7\r\n111283 0\r\n496010 510417\r\n423431 921854\r\n510417 111283\r\n0 496010\r\n758535 423431\r\n921854 59208\r\n",
                "758535\r\n496010\r\n423431\r\n510417\r\n921854\r\n111283\r\n59208\r\n"
            ],
            [
                "8\r\n611412 115521\r\n114290 712424\r\n115521 242491\r\n242491 0\r\n0 114290\r\n712424 282922\r\n282922 589147\r\n359823 611412\r\n",
                "359823\r\n114290\r\n611412\r\n712424\r\n115521\r\n282922\r\n242491\r\n589147\r\n"
            ],
            [
                "9\r\n308992 348750\r\n0 6496\r\n487447 676506\r\n874677 985199\r\n260782 487447\r\n985199 260782\r\n348750 0\r\n570981 308992\r\n6496 570981\r\n",
                "874677\r\n6496\r\n985199\r\n570981\r\n260782\r\n308992\r\n487447\r\n348750\r\n676506\r\n"
            ],
            [
                "10\r\n419946 201769\r\n245945 0\r\n842799 113073\r\n836998 245945\r\n0 794376\r\n692107 836998\r\n113073 904403\r\n904403 987165\r\n201769 692107\r\n794376 842799\r\n",
                "419946\r\n794376\r\n201769\r\n842799\r\n692107\r\n113073\r\n836998\r\n904403\r\n245945\r\n987165\r\n"
            ],
            [
                "10\r\n189071 852255\r\n227133 652124\r\n329720 4848\r\n652124 329720\r\n0 72517\r\n943168 0\r\n72517 544697\r\n4848 943168\r\n538963 189071\r\n544697 538963\r\n",
                "227133\r\n72517\r\n652124\r\n544697\r\n329720\r\n538963\r\n4848\r\n189071\r\n943168\r\n852255\r\n"
            ],
            [
                "2\r\n0 300000\r\n1000000 0\r\n",
                "1000000\r\n300000\r\n"
            ]
        ]
    }
]