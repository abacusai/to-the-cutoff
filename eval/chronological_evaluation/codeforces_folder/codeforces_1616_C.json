[
    {
        "name": "Representative Edges",
        "description": "An array \n    a_1, a_2, \n    \u2026, a_n\n is good if and only if for every\nsubsegment \n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 n\n, the following holds: \n    a_l +\n    a_l + 1 + \n    \u2026 + a_r = \n    1/2(a_l + a_r) \n    \u00b7 (r - l + 1)\n.\nYou are given an array of integers \n    a_1, a_2, \n    \u2026, a_n\n. In one\noperation, you can replace any one element of this array with any real number.\nFind the minimum number of operations you need to make this array good. Input\nThe first line of input contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    100\n): the number of test cases. Each of the next \n    t\n lines contains the\ndescription of a test case. In the first line you are given one integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 70\n): the number of integers in the array. The\nsecond line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    -100\n    \n    \u2264 a_i \n    \u2264 100\n): the initial array. Output For each test case, print\none integer: the minimum number of elements that you need to replace to make\nthe given array good. Example Input 5 4 1 2 3 4 4 1 1 2 2 2 0 -1 6 3 -2 4 -1\n-4 0 1 -100 Output 0 2 0 3 0 Note In the first test case, the array is good\nalready. In the second test case, one of the possible good arrays is \n    [1, 1,\n    \n    1, \n    1]\n (replaced elements are underlined). In\nthe third test case, the array is good already. In the fourth test case, one\nof the possible good arrays is \n    [\n    -2.5, -2, \n    -1.5,\n    -1, \n    -0.5, 0]\n.\n\n",
        "cf_contest_id": 1616,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "geometry",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n4\r\n1 2 3 4\r\n4\r\n1 1 2 2\r\n2\r\n0 -1\r\n6\r\n3 -2 4 -1 -4 0\r\n1\r\n-100\r\n",
                "0\r\n2\r\n0\r\n3\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n3\r\n-100 -1 98\r\n",
                "0\r\n"
            ],
            [
                "1\r\n67\r\n22 67 -52 67 -28 -94 5 -86 -67 51 -28 -80 35 33 11 35 -94 76 -80 86 45 95 -43 34 -31 -55 93 76 -55 -32 -78 -30 -2 -75 -8 -58 82 -34 57 45 -10 -68 -20 23 -63 -13 -42 72 90 -76 -45 35 62 -60 50 79 -25 71 -41 17 69 -79 49 -13 27 -64 81\r\n",
                "63\r\n"
            ]
        ]
    }
]