[
    {
        "name": "Guess Divisors Count",
        "description": "This is an interactive problem. We have hidden an integer \n    1 \n    \u2264 X \n    \u2264\n    10^9\n. You don't have to guess this number. You have to find the number of\ndivisors of this number, and you don't even have to find the exact number:\nyour answer will be considered correct if its absolute error is not greater\nthan 7 or its relative error is not greater than \n    0.5\n. More formally, let\nyour answer be \n    ans\n and the number of divisors of \n    X\n be \n    d\n,\nthen your answer will be considered correct if at least one of the two\nfollowing conditions is true: \n    | ans - d | \n    \u2264 7\n; \n    1/2\n    \u2264\n    ans/d\n    \u2264 2\n.You can make at most \n    22\n queries. One\nquery consists of one integer \n    1 \n    \u2264 Q \n    \u2264 10^18\n. In response, you\nwill get \n    gcd(X, Q)\n \u2014 the greatest common divisor of \n    X\n and \n    Q\n.\nThe number \n    X\n is fixed before all queries. In other words, interactor is\nnot adaptive. Let's call the process of guessing the number of divisors of\nnumber \n    X\n a game. In one test you will have to play \n    T\n independent\ngames, that is, guess the number of divisors \n    T\n times for \n    T\n\nindependent values of \n    X\n. Input The first line of input contains one\ninteger \n    T\n (\n    1 \n    \u2264 T \n    \u2264 100\n) \u2014 the number of games. Interaction\nTo make a query print a line \"? Q\" (\n    1 \n    \u2264 Q \n    \u2264 10^18\n). After that\nread one integer \n    gcd(X, Q)\n. You can make no more than \n    22\n such\nqueries during one game. If you are confident that you have figured out the\nnumber of divisors of \n    X\n with enough precision, you can print your answer\nin \"! ans\" format. \n    ans\n have to be an integer. If this was the last game,\nyou have to terminate the program, otherwise you have to start the next game\nimmediately. Note that the interactor doesn't print anything in response to\nyou printing answer. After printing a query do not forget to output end of\nline and flush the output. To do this, use: fflush(stdout) or cout.flush() in\nC++; System.out.flush() in Java; flush(output) in Pascal; stdout.flush() in\nPython; see documentation for other languages.Hacks To hack, use the following\nformat: The first line contains one integer \n    T\n (\n    1 \n    \u2264 T \n    \u2264\n    100\n) \u2014 the number of games. Each of the next \n    T\n lines contains one\ninteger \n    X\n (\n    1 \n    \u2264 X \n    \u2264 10^9\n) \u2014 the hidden number. So the\nexample has the form 2 998244353 4194304 Example Input 2 1 1 1 1024 1048576\n4194304 Output ? 982306799268821872 ? 230856864650023977 ? 134690134760714371\n! 5 ? 1024 ? 1048576 ? 1073741824 ! 42 Note Why the limitation for number of\nqueries is 22 exactly? Maybe the problem author is a Taylor Swift fan. Let's\nlook at the example. In the first game \n    X = 998\n     244\n     353\n is hidden.\nWould be hard to guess this, right? This number is prime, so the number of its\ndivisors is 2. The solution has made several random queries, and all the\nresponses turned out to be 1 (strange things, not even one of three random\nnumbers is divisible by \n    998\n     244\n     353\n). It's fare to assume that the\nhidden number doesn't have many divisors, so the solution has answered 5. Why\nnot. This answer will be considered correct since \n    | 5 - 2 | = 3 \n    \u2264 7\n.\nIn the second game \n    X = 4\n     194\n     304 = 2^22\n is hidden, it has 23\ndivisors. The solution has made queries \n    1024 = 2^10\n,\n\n    1\n     048\n     576 =2^20\n, \n    1\n     073\n     741\n     824 = 2^30\n and got\nresponses \n    1024 = 2^10\n, \n    1\n     048\n     576 =2^20\n,\n\n    4\n     194\n     304 = 2^22\n, respectively. Then the solution got completely\nconfused and answered the answer to The Ultimate Question of Life, the\nUniverse, and Everything. This answer will be considered correct since\n\n    1/2\n    \u2264\n    42/23\n    \u2264 2\n.\n\n",
        "cf_contest_id": 1355,
        "cf_index": "F",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "interactive",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n998244353\r\n4194304\r\n",
                "OK game 0, answer = 2, output = 2, 22 queries\r\nOK game 1, answer = 23, output = 22, 22 queries\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n",
                "OK game 0, answer = 1, output = 2, 22 queries\r\n"
            ]
        ]
    }
]