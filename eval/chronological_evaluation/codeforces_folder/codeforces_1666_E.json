[
    {
        "name": "Even Split",
        "description": "A revolution has recently happened in Segmentland. The new government is\ncommitted to equality, and they hired you to help with land redistribution in\nthe country. Segmentland is a segment of length \n    l\n kilometers, with the\ncapital in one of its ends. There are \n    n\n citizens in Segmentland, the\nhome of \n    i\n-th citizen is located at the point \n    a_i\n kilometers from\nthe capital. No two homes are located at the same point. Each citizen should\nreceive a segment of positive length with ends at integer distances from the\ncapital that contains her home. The union of these segments should be the\nwhole of Segmentland, and they should not have common points besides their\nends. To ensure equality, the difference between the lengths of the longest\nand the shortest segments should be as small as possible. Input The first line\nof the input contains two integers \n    l\n and \n    n\n (\n    2 \n    \u2264 l \n    \u2264\n    10^9; 1 \n    \u2264 n \n    \u2264 10^5\n). The second line contains \n    n\n integers\n\n    a_1, a_2, \n    \u2026, a_n\n (\n    0 < a_1 < a_2 < \n    \u2026 < a_n < l\n). Output\nOutput \n    n\n pairs of numbers \n    s_i, f_i\n (\n    0 \n    \u2264 s_i < f_i \n    \u2264\n    l\n), one pair per line. The pair on \n    i\n-th line denotes the ends of the\n\n    [s_i, f_i]\n segment that \n    i\n-th citizen receives. If there are many\npossible arrangements with the same difference between the lengths of the\nlongest and the shortest segments, you can output any of them. Examples Input\n6 3 1 3 5 Output 0 2 2 4 4 6 Input 10 2 1 2 Output 0 2 2 10 Note In the first\nexample, it is possible to make all segments equal. Viva la revolucion! In the\nsecond example, citizens live close to the capital, so the length of the\nshortest segment is 2 and the length of the longest segment is 8.\n\n",
        "cf_contest_id": 1666,
        "cf_index": "E",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "6 3\r\n1 3 5\r\n",
                "0 2\r\n2 4\r\n4 6\r\n"
            ],
            [
                "10 2\r\n1 2\r\n",
                "0 2\r\n2 10\r\n"
            ]
        ],
        "private_cases": [
            [
                "100 10\r\n14 26 29 31 34 42 44 48 49 68\r\n",
                "0 14\r\n14 26\r\n26 30\r\n30 34\r\n34 38\r\n38 42\r\n42 46\r\n46 49\r\n49 68\r\n68 100\r\n"
            ],
            [
                "100 10\r\n3 42 45 58 69 73 75 78 84 88\r\n",
                "0 21\r\n21 42\r\n42 51\r\n51 60\r\n60 69\r\n69 74\r\n74 78\r\n78 83\r\n83 88\r\n88 100\r\n"
            ],
            [
                "100 10\r\n12 15 24 25 30 45 55 64 80 86\r\n",
                "0 12\r\n12 18\r\n18 24\r\n24 30\r\n30 42\r\n42 53\r\n53 64\r\n64 75\r\n75 86\r\n86 100\r\n"
            ],
            [
                "100 10\r\n10 46 50 57 59 65 76 79 80 90\r\n",
                "0 23\r\n23 46\r\n46 52\r\n52 58\r\n58 64\r\n64 70\r\n70 76\r\n76 80\r\n80 90\r\n90 100\r\n"
            ],
            [
                "100 10\r\n3 5 23 34 36 42 72 81 84 91\r\n",
                "0 5\r\n5 15\r\n15 25\r\n25 34\r\n34 42\r\n42 57\r\n57 72\r\n72 82\r\n82 91\r\n91 100\r\n"
            ],
            [
                "2 1\r\n1\r\n",
                "0 2\r\n"
            ]
        ]
    }
]