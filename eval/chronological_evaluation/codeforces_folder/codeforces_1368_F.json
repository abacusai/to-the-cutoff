[
    {
        "name": "Lamps on a Circle",
        "description": "This is an interactive problem. John and his imaginary friend play a game.\nThere are \n    n\n lamps arranged in a circle. Lamps are numbered \n    1\n\nthrough \n    n\n in clockwise order, that is, lamps \n    i\n and \n    i + 1\n are\nadjacent for any \n    i = 1, \n    \u2026, n - 1\n, and also lamps \n    n\n and\n\n    1\n are adjacent. Initially all lamps are turned off. John and his friend\ntake turns, with John moving first. On his turn John can choose to terminate\nthe game, or to make a move. To make a move, John can choose any positive\nnumber \n    k\n and turn any \n    k\n lamps of his choosing on. In response to\nthis move, John's friend will choose \n    k\n consecutive lamps and turn all of\nthem off (the lamps in the range that were off before this move stay off).\nNote that the value of \n    k\n is the same as John's number on his last move.\nFor example, if \n    n = 5\n and John have just turned three lamps on, John's\nfriend may choose to turn off lamps \n    1, 2, 3\n, or \n    2, 3, 4\n, or \n    3,\n    4, 5\n, or \n    4, 5, 1\n, or \n    5, 1, 2\n. After this, John may choose to\nterminate or move again, and so on. However, John can not make more than\n\n    10^4\n moves. John wants to maximize the number of lamps turned on at the\nend of the game, while his friend wants to minimize this number. Your task is\nto provide a strategy for John to achieve optimal result. Your program will\nplay interactively for John against the jury's interactor program playing for\nJohn's friend. Suppose there are \n    n\n lamps in the game. Let \n    R(n)\n be\nthe number of turned on lamps at the end of the game if both players act\noptimally. Your program has to terminate the game with at least \n    R(n)\n\nturned on lamps within \n    10^4\n moves. Refer to Interaction section below\nfor interaction details. For technical reasons hacks for this problem are\ndisabled. Interaction Initially your program will be fed a single integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 1000\n) \u2014 the number of lamps in the game. Then\nthe interactor will wait for your actions. To make a move, print a line\nstarting with an integer \n    k\n (\n    1 \n    \u2264 k \n    \u2264 n\n), followed by\n\n    k\n distinct integers \n    l_1, \n    \u2026, l_k\n (\n    1 \n    \u2264 l_i \n    \u2264\n    n\n) \u2014 indices of lamps you want to turn on. The indices may be printed in\nany order. It is allowed to try to turn on a lamp that is already on (although\nthis will have no effect). If your move was invalid for any reason, or if you\nhave made more than \n    10^4\n moves, the interactor will reply with a line\ncontaining a single integer \n    -1\n. Otherwise, the reply will be a line\ncontaining a single integer \n    x\n (\n    1 \n    \u2264 x \n    \u2264 n)\n, meaning that\nthe response was to turn off \n    k\n consecutive lamps starting from \n    x\n\nin clockwise order. To terminate the game instead of making a move, print a\nline containing a single integer \n    0\n. The test will be passed if at this\npoint there are at least \n    R(n)\n lamps turned on (note that neither\n\n    R(n)\n, nor the verdict received are not communicated to your program in\nany way). This action does not count towards the number of moves (that is, it\nis legal to terminate the game after exactly \n    10^4\n moves). To receive the\ncorrect verdict, your program should terminate immediately after printing\n\n    0\n, or after receiving \n    -1\n as a response. Don't forget to flush your\noutput after every action. Examples Input 3 Output 0 Input 4 1 Output 2 1 3 0\nNote When \n    n = 3\n, any John's move can be reversed, thus \n    R(3) = 0\n,\nand terminating the game immediately is correct. \n    R(4) = 1\n, and one\nstrategy to achieve this result is shown in the second sample case. Blank\nlines in sample interactions are for clarity and should not be printed.\n\n",
        "cf_contest_id": 1368,
        "cf_index": "F",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "games",
            "implementation",
            "interactive",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3 0\r\n",
                ""
            ],
            [
                "4 0\r\n",
                ""
            ]
        ],
        "private_cases": [
            [
                "1 0\r\n",
                ""
            ],
            [
                "2 0\r\n",
                ""
            ],
            [
                "10 0\r\n",
                ""
            ],
            [
                "17 10\r\n",
                ""
            ],
            [
                "100 1\r\n",
                ""
            ],
            [
                "123 0\r\n",
                ""
            ],
            [
                "456 0\r\n",
                ""
            ],
            [
                "666 1\r\n",
                ""
            ],
            [
                "1000 0\r\n",
                ""
            ],
            [
                "1000 1\r\n",
                ""
            ],
            [
                "1000 10\r\n",
                ""
            ],
            [
                "961 0\r\n",
                ""
            ],
            [
                "442 0\r\n",
                ""
            ],
            [
                "272 0\r\n",
                ""
            ],
            [
                "5 0\r\n",
                ""
            ],
            [
                "6 0\r\n",
                ""
            ],
            [
                "7 0\r\n",
                ""
            ],
            [
                "8 0\r\n",
                ""
            ],
            [
                "9 0\r\n",
                ""
            ],
            [
                "12 0\r\n",
                ""
            ],
            [
                "13 0\r\n",
                ""
            ],
            [
                "15 0\r\n",
                ""
            ],
            [
                "16 0\r\n",
                ""
            ],
            [
                "17 0\r\n",
                ""
            ],
            [
                "36 0\r\n",
                ""
            ],
            [
                "66 0\r\n",
                ""
            ],
            [
                "99 0\r\n",
                ""
            ],
            [
                "100 0\r\n",
                ""
            ],
            [
                "143 0\r\n",
                ""
            ],
            [
                "143 1\r\n",
                ""
            ],
            [
                "255 0\r\n",
                ""
            ],
            [
                "256 0\r\n",
                ""
            ],
            [
                "256 1\r\n",
                ""
            ],
            [
                "257 0\r\n",
                ""
            ],
            [
                "333 0\r\n",
                ""
            ],
            [
                "666 0\r\n",
                ""
            ],
            [
                "900 0\r\n",
                ""
            ],
            [
                "899 1\r\n",
                ""
            ],
            [
                "899 0\r\n",
                ""
            ],
            [
                "929 0\r\n",
                ""
            ],
            [
                "930 0\r\n",
                ""
            ],
            [
                "930 1\r\n",
                ""
            ],
            [
                "931 0\r\n",
                ""
            ]
        ]
    }
]