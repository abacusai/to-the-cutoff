[
    {
        "name": "XOR and OR",
        "description": "The Bitlandians are quite weird people. They do everything differently. They\nhave a different alphabet so they have a different definition for a string. A\nBitlandish string is a string made only of characters \"0\" and \"1\". BitHaval\n(the mayor of Bitland) loves to play with Bitlandish strings. He takes some\nBitlandish string a, and applies several (possibly zero) operations to it. In\none operation the mayor may take any two adjacent characters of a string,\ndefine one of them as x and the other one as y. Then he calculates two values\np and q: p = x xor y, q = x or y. Then he replaces one of the two taken\ncharacters by p and the other one by q. The xor operation means the bitwise\nexcluding OR operation. The or operation is the bitwise OR operation. So for\nexample one operation can transform string 11 to string 10 or to string 01.\nString 1 cannot be transformed into any other string. You've got two\nBitlandish strings a and b. Your task is to check if it is possible for\nBitHaval to transform string a to string b in several (possibly zero)\ndescribed operations. Input The first line contains Bitlandish string a, the\nsecond line contains Bitlandish string b. The strings can have different\nlengths. It is guaranteed that the given strings only consist of characters\n\"0\" and \"1\". The strings are not empty, their length doesn't exceed 10^6.\nOutput Print \"YES\" if a can be transformed into b, otherwise print \"NO\".\nPlease do not print the quotes. Examples Input 11 10 Output YES Input 1 01\nOutput NO Input 000 101 Output NO\n\n",
        "cf_contest_id": 282,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "11\r\n10\r\n",
                "YES"
            ],
            [
                "1\r\n01\r\n",
                "NO"
            ],
            [
                "000\r\n101\r\n",
                "NO"
            ]
        ],
        "private_cases": [
            [
                "1101\r\n1111\r\n",
                "YES"
            ],
            [
                "11000001\r\n00000001\r\n",
                "YES"
            ],
            [
                "01\r\n10\r\n",
                "YES"
            ],
            [
                "0000\r\n1110\r\n",
                "NO"
            ],
            [
                "010101\r\n101010\r\n",
                "YES"
            ],
            [
                "0\r\n1\r\n",
                "NO"
            ],
            [
                "1\r\n1\r\n",
                "YES"
            ],
            [
                "0\r\n0\r\n",
                "YES"
            ],
            [
                "1\r\n0\r\n",
                "NO"
            ],
            [
                "100\r\n11111\r\n",
                "NO"
            ],
            [
                "1000000000000000000000000000000000000011111111000000000000\r\n0111111111100000000000111111111000000000000000111111110001\r\n",
                "YES"
            ],
            [
                "0000000000000000000000000000000000000000\r\n00000000000000000000000000000000000000000\r\n",
                "NO"
            ],
            [
                "1\r\n1\r\n",
                "YES"
            ],
            [
                "0\r\n0\r\n",
                "YES"
            ],
            [
                "1\r\n0\r\n",
                "NO"
            ],
            [
                "10\r\n00\r\n",
                "NO"
            ],
            [
                "11\r\n00\r\n",
                "NO"
            ],
            [
                "111111111\r\n100000000\r\n",
                "YES"
            ]
        ]
    }
]