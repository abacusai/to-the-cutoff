[
    {
        "name": "Sorting by Subsequences",
        "description": "You are given a sequence a1, a2, ..., an consisting of different integers. It\nis required to split this sequence into the maximum number of subsequences\nsuch that after sorting integers in each of them in increasing order, the\ntotal sequence also will be sorted in increasing order. Sorting integers in a\nsubsequence is a process such that the numbers included in a subsequence are\nordered in increasing order, and the numbers which are not included in a\nsubsequence don't change their places. Every element of the sequence must\nappear in exactly one subsequence. Input The first line of input data contains\ninteger n (1 \u2264 n \u2264 10^5) \u2014 the length of the sequence. The second line of\ninput data contains n different integers a1, a2, ..., an ( - 10^9 \u2264 ai \u2264 10^9)\n\u2014 the elements of the sequence. It is guaranteed that all elements of the\nsequence are distinct. Output In the first line print the maximum number of\nsubsequences k, which the original sequence can be split into while fulfilling\nthe requirements. In the next k lines print the description of subsequences in\nthe following format: the number of elements in subsequence ci (0 < ci \u2264 n),\nthen ci integers l1, l2, ..., lci (1 \u2264 lj \u2264 n) \u2014 indices of these elements in\nthe original sequence. Indices could be printed in any order. Every index from\n1 to n must appear in output exactly once. If there are several possible\nanswers, print any of them. Examples Input 6 3 2 1 6 5 4 Output 4 2 1 3 1 2 2\n4 6 1 5 Input 6 83 -75 -49 11 37 62 Output 1 6 1 2 3 4 5 6 Note In the first\nsample output: After sorting the first subsequence we will get sequence 1 2 3\n6 5 4. Sorting the second subsequence changes nothing. After sorting the third\nsubsequence we will get sequence 1 2 3 4 5 6. Sorting the last subsequence\nchanges nothing.\n\n",
        "cf_contest_id": 843,
        "cf_index": "A",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dsu",
            "implementation",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n3 2 1 6 5 4\r\n",
                "4\r\n2 1 3\r\n1 2\r\n2 4 6\r\n1 5\r\n"
            ],
            [
                "6\r\n83 -75 -49 11 37 62\r\n",
                "1\r\n6 1 2 3 4 5 6\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n",
                "1\r\n1 1\r\n"
            ],
            [
                "2\r\n1 2\r\n",
                "2\r\n1 1\r\n1 2\r\n"
            ],
            [
                "2\r\n2 1\r\n",
                "1\r\n2 1 2\r\n"
            ],
            [
                "3\r\n1 2 3\r\n",
                "3\r\n1 1\r\n1 2\r\n1 3\r\n"
            ],
            [
                "3\r\n3 2 1\r\n",
                "2\r\n2 1 3\r\n1 2\r\n"
            ],
            [
                "3\r\n3 1 2\r\n",
                "1\r\n3 1 2 3\r\n"
            ],
            [
                "10\r\n3 7 10 1 9 5 4 8 6 2\r\n",
                "3\r\n6 1 4 7 2 10 3\r\n3 5 6 9\r\n1 8\r\n"
            ],
            [
                "20\r\n363756450 -204491568 95834122 -840249197 -49687658 470958158 -445130206 189801569 802780784 -790013317 -192321079 586260100 -751917965 -354684803 418379342 -253230108 193944314 712662868 853829789 735867677\r\n",
                "3\r\n7 1 4 7 2 10 3 13\r\n11 5 14 15 6 16 12 17 18 20 19 9\r\n2 8 11\r\n"
            ],
            [
                "50\r\n39 7 45 25 31 26 50 11 19 37 8 16 22 33 14 6 12 46 49 48 29 27 41 15 34 24 3 13 20 47 9 36 5 43 40 21 2 38 35 42 23 28 1 32 10 17 30 18 44 4\r\n",
                "6\r\n20 1 43 34 25 4 50 7 2 37 10 45 3 27 22 13 28 42 40 35 39\r\n23 5 33 14 15 24 26 6 16 12 17 46 18 48 20 29 21 36 32 44 49 19 9 31\r\n2 8 11\r\n2 23 41\r\n2 30 47\r\n1 38\r\n"
            ],
            [
                "100\r\n39 77 67 25 81 26 50 11 73 95 86 16 90 33 14 79 12 100 68 64 60 27 41 15 34 24 3 61 83 47 57 65 99 43 40 21 94 72 82 85 23 71 76 32 10 17 30 18 44 59 35 89 6 63 7 69 62 70 4 29 92 87 31 48 36 28 45 97 93 98 56 38 58 80 8 1 74 91 53 55 54 51 96 5 42 52 9 22 78 88 75 13 66 2 37 20 49 19 84 46\r\n",
                "6\r\n41 1 76 43 34 25 4 59 50 7 55 80 74 77 2 94 37 95 10 45 67 3 27 22 88 90 13 92 61 28 66 93 69 56 71 42 85 40 35 51 82 39\r\n45 5 84 99 33 14 15 24 26 6 53 79 16 12 17 46 100 18 48 64 20 96 83 29 60 21 36 65 32 44 49 97 68 19 98 70 58 73 9 87 62 57 31 63 54 81\r\n8 8 75 91 78 89 52 86 11\r\n2 23 41\r\n2 30 47\r\n2 38 72\r\n"
            ]
        ]
    }
]