[
    {
        "name": "Crazy Computer",
        "description": "ZS the Coder is coding on a crazy computer. If you don't type in a word for a\nc consecutive seconds, everything you typed disappear! More formally, if you\ntyped a word at second a and then the next word at second b, then if b - a \u2264\nc, just the new word is appended to other words on the screen. If b - a > c,\nthen everything on the screen disappears and after that the word you have\ntyped appears on the screen. For example, if c = 5 and you typed words at\nseconds 1, 3, 8, 14, 19, 20 then at the second 8 there will be 3 words on the\nscreen. After that, everything disappears at the second 13 because nothing was\ntyped. At the seconds 14 and 19 another two words are typed, and finally, at\nthe second 20, one more word is typed, and a total of 3 words remain on the\nscreen. You're given the times when ZS the Coder typed the words. Determine\nhow many words remain on the screen after he finished typing everything. Input\nThe first line contains two integers n and c (1 \u2264 n \u2264 100 000, 1 \u2264 c \u2264 10^9) \u2014\nthe number of words ZS the Coder typed and the crazy computer delay\nrespectively. The next line contains n integers t1, t2, ..., tn (1 \u2264 t1 < t2 <\n... < tn \u2264 10^9), where ti denotes the second when ZS the Coder typed the i-th\nword. Output Print a single positive integer, the number of words that remain\non the screen after all n words was typed, in other words, at the second tn.\nExamples Input 6 5 1 3 8 14 19 20 Output 3 Input 6 1 1 3 5 7 9 10 Output 2\nNote The first sample is already explained in the problem statement. For the\nsecond sample, after typing the first word at the second 1, it disappears\nbecause the next word is typed at the second 3 and 3 - 1 > 1. Similarly, only\n1 word will remain at the second 9. Then, a word is typed at the second 10, so\nthere will be two words on the screen, as the old word won't disappear because\n10 - 9 \u2264 1.\n\n",
        "cf_contest_id": 716,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 5\r\n1 3 8 14 19 20\r\n",
                "3\r\n"
            ],
            [
                "6 1\r\n1 3 5 7 9 10\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1000000000\r\n",
                "1\r\n"
            ],
            [
                "5 5\r\n1 7 12 13 14\r\n",
                "4\r\n"
            ],
            [
                "2 1000000000\r\n1 1000000000\r\n",
                "2\r\n"
            ],
            [
                "3 5\r\n1 10 20\r\n",
                "1\r\n"
            ],
            [
                "3 10\r\n1 2 3\r\n",
                "3\r\n"
            ],
            [
                "2 1\r\n1 100\r\n",
                "1\r\n"
            ],
            [
                "3 1\r\n1 2 10\r\n",
                "1\r\n"
            ],
            [
                "2 1\r\n1 2\r\n",
                "2\r\n"
            ]
        ]
    }
]