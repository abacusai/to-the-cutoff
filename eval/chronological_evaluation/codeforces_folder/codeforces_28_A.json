[
    {
        "name": "Bender Problem",
        "description": "Robot Bender decided to make Fray a birthday present. He drove n nails and\nnumbered them from 1 to n in some order. Bender decided to make a picture\nusing metal rods. The picture is a closed polyline, which vertices should be\nnails (in the given order). The segments of the polyline should be parallel to\nthe coordinate axes. Polyline is allowed to have self-intersections. Bender\ncan take a rod and fold it exactly once in any place to form an angle of 90\ndegrees. Then he can attach the place of the fold to some unoccupied nail and\nattach two ends of this rod to adjacent nails. A nail is considered unoccupied\nif there is no rod attached to it (neither by it's end nor the by the fold\nplace). No rod could be used twice. It is not required to use all the rods.\nHelp Bender to solve this difficult task. Input The first line contains two\npositive integers n and m (4 \u2264 n \u2264 500, 2 \u2264 m \u2264 500, n is even) \u2014 the amount\nof nails and the amount of rods. i-th of the following n lines contains a pair\nof integers, denoting the coordinates of the i-th nail. Nails should be\nconnected in the same order as they are given in the input. The last line\ncontains m integers \u2014 the lenghts of the rods. All coordinates do not exceed\n10^4 by absolute value. Lengths of the rods are between 1 and 200 000. No rod\ncan be used twice. It is guaranteed that all segments of the given polyline\nare parallel to coordinate axes. No three consecutive nails lie on the same\nline. Output If it is impossible to solve Bender's problem, output NO.\nOtherwise, output YES in the first line, and in the second line output n\nnumbers \u2014 i-th of them should be the number of rod, which fold place is\nattached to the i-th nail, or -1, if there is no such rod. If there are\nmultiple solutions, print any of them. Examples Input 4 2 0 0 0 2 2 2 2 0 4 4\nOutput YES 1 -1 2 -1 Input 6 3 0 0 1 0 1 1 2 1 2 2 0 2 3 2 3 Output YES 1 -1 2\n-1 3 -1 Input 6 3 0 0 1 0 1 1 2 1 2 2 0 2 2 2 3 Output NO\n\n",
        "cf_contest_id": 28,
        "cf_index": "A",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 2\r\n0 0\r\n0 2\r\n2 2\r\n2 0\r\n4 4\r\n",
                "YES\r\n2 -1 1 -1\r\n"
            ],
            [
                "6 3\r\n0 0\r\n1 0\r\n1 1\r\n2 1\r\n2 2\r\n0 2\r\n3 2 3\r\n",
                "YES\r\n3 -1 2 -1 1 -1\r\n"
            ],
            [
                "6 3\r\n0 0\r\n1 0\r\n1 1\r\n2 1\r\n2 2\r\n0 2\r\n2 2 3\r\n",
                "NO\r\n"
            ]
        ],
        "private_cases": [
            [
                "4 4\r\n0 0\r\n0 1\r\n1 1\r\n1 0\r\n1 1 1 1\r\n",
                "NO\r\n"
            ],
            [
                "6 2\r\n0 0\r\n1 0\r\n1 1\r\n2 1\r\n2 2\r\n0 2\r\n2 2\r\n",
                "NO\r\n"
            ],
            [
                "6 3\r\n0 0\r\n2 0\r\n2 2\r\n1 2\r\n1 1\r\n0 1\r\n4 2 2\r\n",
                "YES\r\n-1 1 -1 3 -1 2\r\n"
            ],
            [
                "4 4\r\n-8423 7689\r\n6902 7689\r\n6902 2402\r\n-8423 2402\r\n20612 20612 91529 35617\r\n",
                "YES\r\n2 -1 1 -1\r\n"
            ],
            [
                "4 4\r\n1679 -198\r\n9204 -198\r\n9204 -5824\r\n1679 -5824\r\n18297 92466 187436 175992\r\n",
                "NO\r\n"
            ],
            [
                "4 2\r\n0 0\r\n0 2\r\n2 2\r\n2 0\r\n200000 200000\r\n",
                "NO\r\n"
            ]
        ]
    }
]