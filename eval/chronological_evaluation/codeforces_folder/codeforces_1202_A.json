[
    {
        "name": "You Are Given Two Binary Strings...",
        "description": "You are given two binary strings \n    x\n and \n    y\n, which are binary\nrepresentations of some two integers (let's denote these integers as\n\n    f(x)\n and \n    f(y)\n). You can choose any integer \n    k \n    \u2265 0\n,\ncalculate the expression \n    s_k = f(x) + f(y) \n    \u00b7 2^k\n and write the\nbinary representation of \n    s_k\n in reverse order (let's denote it as\n\n    rev_k\n). For example, let \n    x = 1010\n and \n    y = 11\n; you've chosen\n\n    k = 1\n and, since \n    2^1 = 10_2\n, so \n    s_k = 1010_2 + 11_2 \n    \u00b7\n    10_2 = 10000_2\n and \n    rev_k = 00001\n. For given \n    x\n and \n    y\n, you\nneed to choose such \n    k\n that \n    rev_k\n is lexicographically minimal\n(read notes if you don't know what does \"lexicographically\" means). It's\nguaranteed that, with given constraints, \n    k\n exists and is finite. Input\nThe first line contains a single integer \n    T\n (\n    1 \n    \u2264 T \n    \u2264 100\n) \u2014\nthe number of queries. Next \n    2T\n lines contain a description of queries:\ntwo lines per query. The first line contains one binary string \n    x\n,\nconsisting of no more than \n    10^5\n characters. Each character is either 0\nor 1. The second line contains one binary string \n    y\n, consisting of no\nmore than \n    10^5\n characters. Each character is either 0 or 1. It's\nguaranteed, that \n    1 \n    \u2264 f(y) \n    \u2264 f(x)\n (where \n    f(x)\n is the\ninteger represented by \n    x\n, and \n    f(y)\n is the integer represented by\n\n    y\n), both representations don't have any leading zeroes, the total length\nof \n    x\n over all queries doesn't exceed \n    10^5\n, and the total length of\n\n    y\n over all queries doesn't exceed \n    10^5\n. Output Print \n    T\n\nintegers (one per query). For each query print such \n    k\n that \n    rev_k\n\nis lexicographically minimal. Example Input 4 1010 11 10001 110 1 1\n1010101010101 11110000 Output 1 3 0 0 Note The first query was described in\nthe legend. In the second query, it's optimal to choose \n    k = 3\n. The\n\n    2^3 = 1000_2\n so \n    s_3 = 10001_2 + 110_2 \n    \u00b7 1000_2 = 10001 + 110000\n    = 1000001\n and \n    rev_3 = 1000001\n. For example, if \n    k = 0\n, then\n\n    s_0 = 10111\n and \n    rev_0 = 11101\n, but \n    rev_3 = 1000001\n is\nlexicographically smaller than \n    rev_0 = 11101\n. In the third query \n    s_0\n    = 10\n and \n    rev_0 = 01\n. For example, \n    s_2 = 101\n and \n    rev_2 =\n    101\n. And \n    01\n is lexicographically smaller than \n    101\n. The quote\nfrom Wikipedia: \"To determine which of two strings of characters comes when\narranging in lexicographical order, their first letters are compared. If they\ndiffer, then the string whose first letter comes earlier in the alphabet comes\nbefore the other string. If the first letters are the same, then the second\nletters are compared, and so on. If a position is reached where one string has\nno more letters to compare while the other does, then the first (shorter)\nstring is deemed to come first in alphabetical order.\"\n\n",
        "cf_contest_id": 1202,
        "cf_index": "A",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1010\r\n11\r\n10001\r\n110\r\n1\r\n1\r\n1010101010101\r\n11110000\r\n",
                "1\r\n3\r\n0\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n11\r\n10\r\n",
                "0\r\n"
            ],
            [
                "1\r\n1010101010111000110\r\n1\r\n",
                "1\r\n"
            ],
            [
                "1\r\n1010101010111000100110\r\n1\r\n",
                "1\r\n"
            ]
        ]
    }
]