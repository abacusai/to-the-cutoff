[
    {
        "name": "Odd Sum Segments",
        "description": "You are given an array \n    a\n consisting of \n    n\n integers \n    a_1, a_2,\n    \n    \u2026, a_n\n. You want to split it into exactly \n    k\n non-empty non-\nintersecting subsegments such that each subsegment has odd sum (i. e. for each\nsubsegment, the sum of all elements that belong to this subsegment is odd). It\nis impossible to rearrange (shuffle) the elements of a given array. Each of\nthe \n    n\n elements of the array \n    a\n must belong to exactly one of the\n\n    k\n subsegments. Let's see some examples of dividing the array of length\n\n    5\n into \n    3\n subsegments (not necessarily with odd sums): \n    [1, 2, 3,\n    4, 5]\n is the initial array, then all possible ways to divide it into\n\n    3\n non-empty non-intersecting subsegments are described below: \n    [1],\n    [2], [3, 4, 5]\n; \n    [1], [2, 3], [4, 5]\n; \n    [1], [2, 3, 4], [5]\n;\n\n    [1, 2], [3], [4, 5]\n; \n    [1, 2], [3, 4], [5]\n; \n    [1, 2, 3], [4],\n    [5]\n. Of course, it can be impossible to divide the initial array into\nexactly \n    k\n subsegments in such a way that each of them will have odd sum\nof elements. In this case print \"NO\". Otherwise, print \"YES\" and any possible\ndivision of the array. See the output format for the detailed explanation. You\nhave to answer \n    q\n independent queries. Input The first line contains one\ninteger \n    q\n (\n    1 \n    \u2264 q \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of\nqueries. Then \n    q\n queries follow. The first line of the query contains two\nintegers \n    n\n and \n    k\n (\n    1 \n    \u2264 k \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014\nthe number of elements in the array and the number of subsegments,\nrespectively. The second line of the query contains \n    n\n integers \n    a_1,\n    a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n), where \n    a_i\n is the\n\n    i\n-th element of \n    a\n. It is guaranteed that the sum of \n    n\n over\nall queries does not exceed \n    2 \n    \u00b7 10^5\n (\n    \u2211 n \n    \u2264 2 \n    \u00b7\n    10^5\n). Output For each query, print the answer to it. If it is impossible\nto divide the initial array into exactly \n    k\n subsegments in such a way\nthat each of them will have odd sum of elements, print \"NO\" in the first line.\nOtherwise, print \"YES\" in the first line and any possible division of the\narray in the second line. The division can be represented as \n    k\n integers\n\n    r_1\n, \n    r_2\n, ..., \n    r_k\n such that \n    1 \n    \u2264 r_1 < r_2 < \n    \u2026\n    < r_k = n\n, where \n    r_j\n is the right border of the \n    j\n-th segment\n(the index of the last element that belongs to the \n    j\n-th segment), so the\narray is divided into subsegments \n    [1; r_1], [r_1 + 1; r_2], [r_2 + 1, r_3],\n    \n    \u2026, [r_k - 1 + 1, n]\n. Note that \n    r_k\n is always \n    n\n but you\nshould print it anyway. Example Input 3 5 3 7 18 3 14 1 5 4 1 2 3 4 5 6 2 1 2\n8 4 10 2 Output YES 1 3 5 NO NO\n\n",
        "cf_contest_id": 1196,
        "cf_index": "B",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "math"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n5 3\r\n7 18 3 14 1\r\n5 4\r\n1 2 3 4 5\r\n6 2\r\n1 2 8 4 10 2\r\n",
                "YES 1 3 5\r\nNO\r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 1\r\n2\r\n",
                "NO\r\n"
            ]
        ]
    }
]