[
    {
        "name": "Matches Are Not a Child's Play ",
        "description": "Lena is playing with matches. The natural question arising in the head of any\nchild playing with matches is whether it's possible to set a tree on fire with\na matches, or not. Let's say, that the tree is a connected graph without\ncycles and the vertices are labeled with integers \n    1, 2, \n    \u2026, n\n.\nAlso every vertex \n    v\n has some integer priority \n    p_v\n associated with\nit. All priorities are distinct. It turns out, that if you set a tree on fire,\nit will burn to nothing. However, this process doesn't happen instantly. At\nthe beginning, burns out the leaf (a vertex is called to be a leaf if it has\nonly one adjacent vertex) of the tree of the minimum priority. Then burns out\nthe leaf of the minimal priority of the remaining tree, and so on. This way,\nthe vertices turn into the leaves and burn out until only one vertex remains.\nThen this vertex burns out as well. Lena has prepared a tree of \n    n\n\nvertices and every vertex in it has a priority \n    p_v = v\n. Lena is very\ncurious about burning out this tree. However, she understands, that if she\nwill burn the tree now, then it will disappear completely. Lena is a kind girl\nand she will feel bad for the burned tree, so she wants to study the process\nof burning the tree only in her mind. Lena wants to process \n    q\n queries,\neach of them is one of three following types: \"up \n    v\n\", assign the vertex\n\n    v\n priority \n    1 + \n    max\n    \n    p_1, p_2, \n    \u2026, p_n\n; \"when\n\n    v\n\", find the step at which the vertex \n    v\n will burn out, if the tree\nwould be set on fire now; \"compare \n    v\n \n    u\n\", find out which of the\nvertices \n    v\n and \n    u\n will burn out first, if the tree would be set on\nfire now. Notice, that if all priorities would be distinct, then after the\n\"up\" query they will stay distinct as well. Initially all priorities are\ndistinct, hence during any (purely hypothetical of course) burning of the\ntree, all leafs would have distinct priorities. Input The first line contains\ntwo integers \n    n\n and \n    q\n (\n    2 \n    \u2264 n \n    \u2264 200\n     000\n, \n    1 \n    \u2264\n    q \n    \u2264 200\n     000\n) \u2014 the number of vertices in the tree and the number of\nqueries. The \n    i\n-th of the following \n    n - 1\n lines contains two\nintegers \n    v_i\n, \n    u_i\n (\n    1 \n    \u2264 v_i, u_i \n    \u2264 n\n), denoting the\nendpoints of the \n    i\n-th edge. Each of the remaining \n    q\n lines contains\na query of one of the following three types: \"up \n    v\n\" (\n    1 \n    \u2264 v \n    \u2264\n    n\n) \u2014 change the priority of vertex \n    v\n; \"when \n    v\n\" (\n    1 \n    \u2264 v\n    \n    \u2264 n\n) \u2014 determine the step at which the vertex \n    v\n will burn out;\n\"compare \n    v\n \n    u\n\" (\n    1 \n    \u2264 v, u \n    \u2264 n\n, \n    v \n     u\n) \u2014\ndetermine which of vertices \n    v\n and \n    u\n will burn out earlier in the\ncurrent tree. It's guaranteed, that there is at least one query of type \"when\"\nor \"compare\". Output For every query of type \"when\" print one integer in range\nfrom \n    1\n to \n    n\n \u2014 the step at which the vertex \n    v\n will burn out.\nFor every query of type \"compare\" print either \n    v\n or \n    u\n, depending\non which one will burn out earlier. Examples Input 5 7 1 5 1 2 1 3 4 3 when 1\nwhen 2 when 3 when 4 when 5 compare 2 3 compare 3 4 Output 4 1 3 2 5 2 4 Input\n5 5 1 5 1 2 1 3 4 3 up 1 compare 2 4 compare 4 3 compare 3 1 compare 1 5\nOutput 2 4 3 5 Note In the first example, the process of burning of the tree\nis illustrated on the following picture: In particular, the vertices of the\ntree will burn out in the following order: \n    [2, 4, 3, 1, 5]\n. In the\nsecond example, after applying the \"up\" operation, the order of vertices will\nchange to: \n    [2, 4, 3, 5, 1]\n.\n\n",
        "cf_contest_id": 1137,
        "cf_index": "F",
        "cf_rating": 3400,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5 7\r\n1 5\r\n1 2\r\n1 3\r\n4 3\r\nwhen 1\r\nwhen 2\r\nwhen 3\r\nwhen 4\r\nwhen 5\r\ncompare 2 3\r\ncompare 3 4\r\n",
                "4\r\n1\r\n3\r\n2\r\n5\r\n2\r\n4\r\n"
            ],
            [
                "5 5\r\n1 5\r\n1 2\r\n1 3\r\n4 3\r\nup 1\r\ncompare 2 4\r\ncompare 4 3\r\ncompare 3 1\r\ncompare 1 5\r\n",
                "2\r\n4\r\n3\r\n5\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1\r\n1 2\r\ncompare 1 2\r\n",
                "1\r\n"
            ],
            [
                "8 20\r\n4 6\r\n2 4\r\n1 5\r\n2 7\r\n1 2\r\n1 8\r\n2 3\r\ncompare 4 8\r\nwhen 3\r\ncompare 2 6\r\ncompare 2 3\r\ncompare 4 5\r\nwhen 1\r\ncompare 3 1\r\nwhen 3\r\nup 6\r\nwhen 1\r\ncompare 2 1\r\nwhen 5\r\ncompare 4 1\r\nup 7\r\nwhen 8\r\ncompare 5 2\r\nup 3\r\nwhen 6\r\nup 6\r\nwhen 7\r\n",
                "4\r\n1\r\n6\r\n3\r\n5\r\n7\r\n3\r\n1\r\n5\r\n1\r\n2\r\n1\r\n3\r\n5\r\n4\r\n4\r\n"
            ],
            [
                "10 20\r\n1 4\r\n1 10\r\n8 9\r\n2 5\r\n2 3\r\n1 8\r\n1 7\r\n3 6\r\n1 2\r\ncompare 7 8\r\ncompare 10 4\r\ncompare 8 2\r\nwhen 5\r\ncompare 3 2\r\ncompare 9 1\r\nup 8\r\nwhen 2\r\nup 8\r\nwhen 3\r\nwhen 8\r\ncompare 2 8\r\nup 3\r\nup 8\r\ncompare 1 6\r\nup 3\r\ncompare 8 1\r\nup 1\r\ncompare 7 5\r\ncompare 1 7\r\n",
                "7\r\n4\r\n2\r\n2\r\n3\r\n9\r\n5\r\n4\r\n10\r\n2\r\n6\r\n8\r\n5\r\n7\r\n"
            ],
            [
                "8 20\r\n1 2\r\n4 8\r\n3 5\r\n2 6\r\n3 4\r\n1 7\r\n2 3\r\nwhen 4\r\nwhen 5\r\ncompare 4 1\r\ncompare 1 7\r\nwhen 4\r\ncompare 5 7\r\ncompare 7 8\r\nwhen 2\r\nwhen 3\r\nwhen 4\r\nwhen 2\r\ncompare 7 3\r\ncompare 4 1\r\ncompare 1 2\r\nwhen 1\r\ncompare 3 6\r\ncompare 4 8\r\nwhen 5\r\nwhen 5\r\ncompare 4 2\r\n",
                "7\r\n1\r\n1\r\n7\r\n7\r\n5\r\n7\r\n5\r\n6\r\n7\r\n5\r\n7\r\n1\r\n1\r\n4\r\n6\r\n4\r\n1\r\n1\r\n2\r\n"
            ],
            [
                "10 20\r\n4 5\r\n9 10\r\n2 3\r\n4 9\r\n4 8\r\n1 2\r\n2 4\r\n5 6\r\n6 7\r\nwhen 2\r\nwhen 1\r\nwhen 10\r\ncompare 9 2\r\nwhen 9\r\ncompare 6 10\r\ncompare 7 10\r\ncompare 5 1\r\ncompare 3 6\r\nwhen 4\r\nwhen 2\r\nwhen 5\r\ncompare 7 2\r\ncompare 1 6\r\ncompare 9 6\r\ncompare 8 3\r\nwhen 2\r\nwhen 9\r\ncompare 8 3\r\ncompare 7 10\r\n",
                "3\r\n1\r\n10\r\n2\r\n9\r\n6\r\n7\r\n1\r\n3\r\n8\r\n3\r\n6\r\n2\r\n1\r\n6\r\n3\r\n3\r\n9\r\n3\r\n7\r\n"
            ],
            [
                "8 20\r\n2 7\r\n2 4\r\n4 6\r\n2 3\r\n1 5\r\n1 2\r\n3 8\r\ncompare 6 5\r\ncompare 8 1\r\ncompare 6 3\r\ncompare 7 8\r\ncompare 6 5\r\nup 5\r\nup 8\r\ncompare 6 5\r\nup 2\r\ncompare 7 2\r\ncompare 4 6\r\ncompare 5 8\r\nup 3\r\ncompare 1 5\r\ncompare 5 4\r\nup 3\r\ncompare 7 3\r\nup 6\r\ncompare 5 3\r\ncompare 6 5\r\n",
                "5\r\n1\r\n6\r\n7\r\n5\r\n6\r\n7\r\n6\r\n5\r\n5\r\n4\r\n7\r\n5\r\n5\r\n"
            ],
            [
                "10 20\r\n3 5\r\n1 4\r\n3 6\r\n1 3\r\n8 9\r\n1 2\r\n3 7\r\n5 8\r\n6 10\r\nup 9\r\nup 10\r\nup 8\r\nup 6\r\ncompare 6 10\r\nup 4\r\ncompare 7 3\r\ncompare 2 3\r\ncompare 4 10\r\nup 5\r\nup 8\r\ncompare 10 3\r\nup 9\r\ncompare 4 3\r\nup 2\r\ncompare 8 10\r\ncompare 9 3\r\ncompare 1 2\r\ncompare 7 8\r\nup 7\r\n",
                "10\r\n7\r\n2\r\n10\r\n10\r\n4\r\n10\r\n9\r\n1\r\n7\r\n"
            ]
        ]
    }
]