[
    {
        "name": "Guess two numbers",
        "description": "This is an interactive problem. Vasya and Vitya play a game. Vasya thought of\ntwo integers \n    a\n and \n    b\n from \n    1\n to \n    n\n and Vitya tries to\nguess them. Each round he tells Vasya two numbers \n    x\n and \n    y\n from\n\n    1\n to \n    n\n. If both \n    x=a\n and \n    y=b\n then Vitya wins. Else\nVasya must say one of the three phrases: \n    x\n is less than \n    a\n; \n    y\n\nis less than \n    b\n; \n    x\n is greater than \n    a\n or \n    y\n is greater\nthan \n    b\n. Vasya can't lie, but if multiple phrases are true, he may choose\nany of them. For example, if Vasya thought of numbers \n    2\n and \n    4\n,\nthen he answers with the phrase \n    3\n to a query \n    (3, 4)\n, and he can\nanswer with the phrase \n    1\n or phrase \n    3\n to a query \n    (1, 5)\n. Help\nVitya win in no more than \n    600\n rounds. Input The first line contains a\nsingle integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^18\n) \u2014 the upper limit of\nthe numbers. Interaction First, you need to read the number \n    n\n, after\nthat you can make queries. To make a query, print two integers: \n    x\n and\n\n    y\n (\n    1 \n    \u2264 x, y \n    \u2264 n\n), then flush the output. After each\nquery, read a single integer \n    ans\n (\n    0 \n    \u2264 ans \n    \u2264 3\n). If\n\n    ans > 0\n, then it is the number of the phrase said by Vasya. If \n    ans =\n    0\n, it means that you win and your program should terminate. If you make\nmore than \n    600\n queries or make an incorrect query, you will get Wrong\nAnswer. Your solution will get Idleness Limit Exceeded, if you don't print\nanything or forget to flush the output. To flush you need to do the following\nright after printing a query and a line end: fflush(stdout) in C++;\nSystem.out.flush() in Java; stdout.flush() in Python; flush(output) in Pascal;\nFor other languages see documentation. Hacks format For hacks, use the\nfollowing format: In the first line, print a single integer \n    n\n (\n    1\n    \n    \u2264 n \n    \u2264 10^18\n) \u2014 the upper limit of the numbers. In the second\nline, print two integers \n    a\n and \n    b\n (\n    1 \n    \u2264 a, b \n    \u2264 n\n) \u2014\nthe numbers which Vasya thought of. In the third line, print a single integer\n\n    m\n (\n    1 \n    \u2264 m \n    \u2264 10^5\n) \u2014 the number of instructions for the\ninteractor. In each of the next \n    m\n lines, print five integers: \n    x_i\n,\n\n    y_i\n, \n    r^12_i\n, \n    r^13_i\n, and \n    r^23_i\n (\n    1 \n    \u2264\n    x_i, y_i \n    \u2264 n\n), where \n    r^ST_i\n equals to either number \n    S\n or\nnumber \n    T\n. While answering the query \n    x\n     \n      y\n, the interactor\nfinds a number \n    i\n from \n    1\n to \n    n\n with the minimal value\n\n    |x-x_i| + |y-y_i|\n. If multiple numbers can be chosen, the least \n    i\n\nis preferred. Then the interactor answers to the query, but if there are two\nphrases \n    S\n and \n    T\n that can be given, then \n    r^ST_i\n is chosen.\nFor example, the sample test data file contains the following: 5 2 4 2 2 5 1 1\n2 4 1 2 3 3 Example Input 5 3 3 2 1 0 Output 4 3 3 4 3 3 1 5 2 4 Note Let's\nanalyze the sample test. The chosen numbers are \n    2\n and \n    4\n. The\ninteractor was given two instructions. For the query \n    (4, 3)\n, it can\nreturn \n    2\n or \n    3\n. Out of the two instructions the second one is\nchosen, so the interactor returns \n    a^23_2=3\n. For the query \n    (3,\n    4)\n, it can return only \n    3\n. For the query \n    (3, 3)\n, it can return\n\n    2\n or \n    3\n. Out of the two instructions the first one is chosen (since\nin case of equal values, the least number is preferred), so the interactor\nreturns \n    a^23_1=2\n. For the query \n    (1, 5)\n, it can return \n    1\n or\n\n    3\n. Out of the two instructions the first one is chosen, so the\ninteractor returns \n    a^13_1=1\n. In the fifth query \n    (2, 4)\n, the\nnumbers are guessed correctly, the player wins.\n\n",
        "cf_contest_id": 1007,
        "cf_index": "C",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "interactive"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n2 4\r\n2\r\n2 5 1 1 2\r\n4 1 2 3 3\r\n",
                "5\r\n"
            ]
        ],
        "private_cases": [
            [
                "1000000000000000000\r\n123123123123123123 789789789789789789\r\n1\r\n1 1 1 1 2\r\n",
                "263\r\n"
            ],
            [
                "1000000000000000000\r\n123123123123123123 789789789789789789\r\n1\r\n1 1 1 1 3\r\n",
                "344\r\n"
            ],
            [
                "1000000000000000000\r\n123123123123123123 789789789789789789\r\n1\r\n1 1 1 3 2\r\n",
                "294\r\n"
            ],
            [
                "1000000000000000000\r\n123123123123123123 789789789789789789\r\n1\r\n1 1 1 3 3\r\n",
                "344\r\n"
            ],
            [
                "1000000000000000000\r\n123123123123123123 789789789789789789\r\n1\r\n1 1 2 1 2\r\n",
                "263\r\n"
            ],
            [
                "1000000000000000000\r\n123123123123123123 789789789789789789\r\n1\r\n1 1 2 1 3\r\n",
                "287\r\n"
            ],
            [
                "1000000000000000000\r\n123123123123123123 789789789789789789\r\n1\r\n1 1 2 3 2\r\n",
                "341\r\n"
            ],
            [
                "1000000000000000000\r\n123123123123123123 789789789789789789\r\n1\r\n1 1 2 3 3\r\n",
                "341\r\n"
            ],
            [
                "1000000000000000000\r\n999999999999999917 69\r\n2\r\n1 1 1 1 2\r\n1000000000000000000 1000000000000000000 2 3 3\r\n",
                "185\r\n"
            ],
            [
                "1000000000000000000\r\n1 1\r\n1\r\n1 1 1 1 2\r\n",
                "1\r\n"
            ],
            [
                "1000000000000000000\r\n1 1000000000000000000\r\n1\r\n1 1 1 1 2\r\n",
                "60\r\n"
            ],
            [
                "1000000000000000000\r\n1000000000000000000 1\r\n1\r\n1 1 1 1 2\r\n",
                "60\r\n"
            ],
            [
                "1000000000000000000\r\n1000000000000000000 1000000000000000000\r\n1\r\n1 1 1 1 2\r\n",
                "119\r\n"
            ],
            [
                "1000000000000000000\r\n1 1\r\n1\r\n1 1 2 3 3\r\n",
                "1\r\n"
            ],
            [
                "1000000000000000000\r\n1 1000000000000000000\r\n1\r\n1 1 2 3 3\r\n",
                "60\r\n"
            ],
            [
                "1000000000000000000\r\n1000000000000000000 1\r\n1\r\n1 1 2 3 3\r\n",
                "60\r\n"
            ],
            [
                "1000000000000000000\r\n1000000000000000000 1000000000000000000\r\n1\r\n1 1 2 3 3\r\n",
                "119\r\n"
            ]
        ]
    }
]