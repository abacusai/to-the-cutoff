[
    {
        "name": "Decomposition",
        "description": "For a sequence of integers \n    [x_1, x_2, \n    \u2026, x_k]\n, let's define its\ndecomposition as follows: Process the sequence from the first element to the\nlast one, maintaining the list of its subsequences. When you process the\nelement \n    x_i\n, append it to the end of the first subsequence in the list\nsuch that the bitwise AND of its last element and \n    x_i\n is greater than\n\n    0\n. If there is no such subsequence in the list, create a new subsequence\nwith only one element \n    x_i\n and append it to the end of the list of\nsubsequences. For example, let's analyze the decomposition of the sequence\n\n    [1, 3, 2, 0, 1, 3, 2, 1]\n: processing element \n    1\n, the list of\nsubsequences is empty. There is no subsequence to append \n    1\n to, so we\ncreate a new subsequence \n    [1]\n; processing element \n    3\n, the list of\nsubsequences is \n    [[1]]\n. Since the bitwise AND of \n    3\n and \n    1\n is\n\n    1\n, the element is appended to the first subsequence; processing element\n\n    2\n, the list of subsequences is \n    [[1, 3]]\n. Since the bitwise AND of\n\n    2\n and \n    3\n is \n    2\n, the element is appended to the first\nsubsequence; processing element \n    0\n, the list of subsequences is \n    [[1,\n    3, 2]]\n. There is no subsequence to append \n    0\n to, so we create a new\nsubsequence \n    [0]\n; processing element \n    1\n, the list of subsequences is\n\n    [[1, 3, 2], [0]]\n. There is no subsequence to append \n    1\n to, so we\ncreate a new subsequence \n    [1]\n; processing element \n    3\n, the list of\nsubsequences is \n    [[1, 3, 2], [0], [1]]\n. Since the bitwise AND of \n    3\n\nand \n    2\n is \n    2\n, the element is appended to the first subsequence;\nprocessing element \n    2\n, the list of subsequences is \n    [[1, 3, 2, 3], [0],\n    [1]]\n. Since the bitwise AND of \n    2\n and \n    3\n is \n    2\n, the element\nis appended to the first subsequence; processing element \n    1\n, the list of\nsubsequences is \n    [[1, 3, 2, 3, 2], [0], [1]]\n. The element \n    1\n cannot\nbe appended to any of the first two subsequences, but can be appended to the\nthird one. The resulting list of subsequences is \n    [[1, 3, 2, 3, 2], [0], [1,\n    1]]\n. Let \n    f([x_1, x_2, \n    \u2026, x_k])\n be the number of subsequences\nthe sequence \n    [x_1, x_2, \n    \u2026, x_k]\n is decomposed into. Now, for the\nproblem itself. You are given a sequence \n    [a_1, a_2, \n    \u2026, a_n]\n, where\neach element is an integer from \n    0\n to \n    3\n. Let \n    a[i..j]\n be the\nsequence \n    [a_i, a_i+1, \n    \u2026, a_j]\n. You have to calculate \n    \u2211\n    _i=1^n \n    \u2211\n    _j=i^n f(a[i..j])\n. Input The first line\ncontains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 3 \n    \u00b7 10^5\n). The\nsecond line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264\n    a_i \n    \u2264 3\n). Output Print one integer, which should be equal to \n    \u2211\n    _i=1^n \n    \u2211\n    _j=i^n f(a[i..j])\n. Examples Input 8 1 3\n2 0 1 3 2 1 Output 71 Input 5 0 0 0 0 0 Output 35\n\n",
        "cf_contest_id": 1766,
        "cf_index": "E",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "data structures",
            "divide and conquer",
            "dp",
            "two pointers"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "8\r\n1 3 2 0 1 3 2 1\r\n",
                "71"
            ],
            [
                "5\r\n0 0 0 0 0\r\n",
                "35"
            ]
        ],
        "private_cases": [
            [
                "1\r\n0\r\n",
                "1"
            ],
            [
                "1\r\n1\r\n",
                "1"
            ],
            [
                "1\r\n2\r\n",
                "1"
            ],
            [
                "1\r\n3\r\n",
                "1"
            ],
            [
                "6\r\n2 1 3 1 1 2\r\n",
                "31"
            ]
        ]
    }
]