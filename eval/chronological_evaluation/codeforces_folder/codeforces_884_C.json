[
    {
        "name": "Bertown Subway",
        "description": "The construction of subway in Bertown is almost finished! The President of\nBerland will visit this city soon to look at the new subway himself. There are\nn stations in the subway. It was built according to the Bertown Transport Law:\nFor each station i there exists exactly one train that goes from this station.\nIts destination station is pi, possibly pi = i; For each station i there\nexists exactly one station j such that pj = i. The President will consider the\nconvenience of subway after visiting it. The convenience is the number of\nordered pairs (x, y) such that person can start at station x and, after taking\nsome subway trains (possibly zero), arrive at station y (1 \u2264 x, y \u2264 n). The\nmayor of Bertown thinks that if the subway is not convenient enough, then the\nPresident might consider installing a new mayor (and, of course, the current\nmayor doesn't want it to happen). Before President visits the city mayor has\nenough time to rebuild some paths of subway, thus changing the values of pi\nfor not more than two subway stations. Of course, breaking the Bertown\nTransport Law is really bad, so the subway must be built according to the Law\neven after changes. The mayor wants to do these changes in such a way that the\nconvenience of the subway is maximized. Help him to calculate the maximum\npossible convenience he can get! Input The first line contains one integer\nnumber n (1 \u2264 n \u2264 100000) \u2014 the number of stations. The second line contains n\ninteger numbers p1, p2, ..., pn (1 \u2264 pi \u2264 n) \u2014 the current structure of the\nsubway. All these numbers are distinct. Output Print one number \u2014 the maximum\npossible value of convenience. Examples Input 3 2 1 3 Output 9 Input 5 1 5 4 3\n2 Output 17 Note In the first example the mayor can change p2 to 3 and p3 to\n1, so there will be 9 pairs: (1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3),\n(3, 1), (3, 2), (3, 3). In the second example the mayor can change p2 to 4 and\np3 to 5.\n\n",
        "cf_contest_id": 884,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2 1 3\r\n",
                "9\r\n"
            ],
            [
                "5\r\n1 5 4 3 2\r\n",
                "17\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "2\r\n1 2\r\n",
                "4\r\n"
            ],
            [
                "2\r\n2 1\r\n",
                "4\r\n"
            ],
            [
                "100\r\n98 52 63 2 18 96 31 58 84 40 41 45 66 100 46 71 26 48 81 20 73 91 68 76 13 93 17 29 64 95 79 21 55 75 19 85 54 51 89 78 15 87 43 59 36 1 90 35 65 56 62 28 86 5 82 49 3 99 33 9 92 32 74 69 27 22 77 16 44 94 34 6 57 70 23 12 61 25 8 11 67 47 83 88 10 14 30 7 97 60 42 37 24 38 53 50 4 80 72 39\r\n",
                "5416\r\n"
            ],
            [
                "5\r\n1 4 2 3 5\r\n",
                "17\r\n"
            ],
            [
                "6\r\n5 3 6 1 4 2\r\n",
                "36\r\n"
            ],
            [
                "10\r\n5 1 6 2 8 3 4 10 9 7\r\n",
                "82\r\n"
            ],
            [
                "20\r\n1 6 15 9 18 17 7 8 3 19 2 13 11 12 14 4 5 20 16 10\r\n",
                "326\r\n"
            ],
            [
                "3\r\n1 2 3\r\n",
                "5\r\n"
            ]
        ]
    }
]