[
    {
        "name": "Okabe and El Psy Kongroo",
        "description": "Okabe likes to take walks but knows that spies from the Organization could be\nanywhere; that's why he wants to know how many different walks he can take in\nhis city safely. Okabe's city can be represented as all points (x, y) such\nthat x and y are non-negative. Okabe starts at the origin (point (0, 0)), and\nneeds to reach the point (k, 0). If Okabe is currently at the point (x, y), in\none step he can go to (x + 1, y + 1), (x + 1, y), or (x + 1, y - 1).\nAdditionally, there are n horizontal line segments, the i-th of which goes\nfrom x = ai to x = bi inclusive, and is at y = ci. It is guaranteed that a1 =\n0, an \u2264 k \u2264 bn, and ai = bi - 1 for 2 \u2264 i \u2264 n. The i-th line segment forces\nOkabe to walk with y-value in the range 0 \u2264 y \u2264 ci when his x value satisfies\nai \u2264 x \u2264 bi, or else he might be spied on. This also means he is required to\nbe under two line segments when one segment ends and another begins. Okabe now\nwants to know how many walks there are from the origin to the point (k, 0)\nsatisfying these conditions, modulo 10^9 + 7. Input The first line of input\ncontains the integers n and k (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 10^18) \u2014 the number of\nsegments and the destination x coordinate. The next n lines contain three\nspace-separated integers ai, bi, and ci (0 \u2264 ai < bi \u2264 10^18, 0 \u2264 ci \u2264 15) \u2014\nthe left and right ends of a segment, and its y coordinate. It is guaranteed\nthat a1 = 0, an \u2264 k \u2264 bn, and ai = bi - 1 for 2 \u2264 i \u2264 n. Output Print the\nnumber of walks satisfying the conditions, modulo 1000000007 (10^9 + 7).\nExamples Input 1 3 0 3 3 Output 4 Input 2 6 0 3 0 3 10 2 Output 4 Note The\ngraph above corresponds to sample 1. The possible walks are: The graph above\ncorresponds to sample 2. There is only one walk for Okabe to reach (3, 0).\nAfter this, the possible walks are:\n\n",
        "cf_contest_id": 821,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "matrices"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1 3\r\n0 3 3\r\n",
                "4\r\n"
            ],
            [
                "2 6\r\n0 3 0\r\n3 10 2\r\n",
                "4\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 3\r\n0 2 13\r\n2 3 11\r\n",
                "4\r\n"
            ],
            [
                "2 9\r\n0 8 0\r\n8 10 10\r\n",
                "1\r\n"
            ],
            [
                "1 1\r\n0 3 9\r\n",
                "1\r\n"
            ],
            [
                "3 8\r\n0 7 3\r\n7 8 5\r\n8 9 13\r\n",
                "322\r\n"
            ],
            [
                "2 10\r\n0 9 6\r\n9 10 5\r\n",
                "2188\r\n"
            ],
            [
                "2 6\r\n0 3 3\r\n3 8 13\r\n",
                "51\r\n"
            ],
            [
                "1 5\r\n0 6 15\r\n",
                "21\r\n"
            ],
            [
                "2 6\r\n0 5 8\r\n5 8 4\r\n",
                "51\r\n"
            ],
            [
                "2 10\r\n0 9 13\r\n9 10 1\r\n",
                "2188\r\n"
            ],
            [
                "3 100\r\n0 94 4\r\n94 99 5\r\n99 100 2\r\n",
                "192957262\r\n"
            ],
            [
                "4 100\r\n0 51 3\r\n51 98 2\r\n98 99 1\r\n99 100 14\r\n",
                "858230618\r\n"
            ],
            [
                "3 96\r\n0 48 8\r\n48 82 7\r\n82 100 1\r\n",
                "569210882\r\n"
            ],
            [
                "2 86\r\n0 44 14\r\n44 94 0\r\n",
                "526504077\r\n"
            ],
            [
                "6 99\r\n0 69 7\r\n69 94 10\r\n94 95 2\r\n95 97 0\r\n97 99 9\r\n99 100 9\r\n",
                "505450176\r\n"
            ],
            [
                "6 999\r\n0 899 12\r\n899 963 2\r\n963 981 1\r\n981 996 5\r\n996 998 13\r\n998 999 11\r\n",
                "673896982\r\n"
            ],
            [
                "4 995\r\n0 31 0\r\n31 533 0\r\n533 992 14\r\n992 999 7\r\n",
                "999388081\r\n"
            ],
            [
                "7 998\r\n0 720 10\r\n720 847 3\r\n847 923 14\r\n923 972 6\r\n972 989 8\r\n989 993 2\r\n993 999 10\r\n",
                "697098687\r\n"
            ],
            [
                "3 998\r\n0 960 8\r\n960 998 8\r\n998 999 3\r\n",
                "404382282\r\n"
            ],
            [
                "10 994\r\n0 265 4\r\n265 852 11\r\n852 854 1\r\n854 918 14\r\n918 940 6\r\n940 965 13\r\n965 982 8\r\n982 990 10\r\n990 992 14\r\n992 999 0\r\n",
                "407194385\r\n"
            ],
            [
                "2 207833243818594894\r\n0 137601639085477684 15\r\n137601639085477684 231679070715464011 8\r\n",
                "702585625\r\n"
            ],
            [
                "6 730029452074670152\r\n0 406589401851678714 5\r\n406589401851678714 406738819623092923 2\r\n406738819623092923 474162401562914136 6\r\n474162401562914136 479295347822124670 1\r\n479295347822124670 654740225831332066 8\r\n654740225831332066 907731429933813627 9\r\n",
                "296294594\r\n"
            ],
            [
                "2 1\r\n0 1 0\r\n1 2 0\r\n",
                "1\r\n"
            ]
        ]
    }
]