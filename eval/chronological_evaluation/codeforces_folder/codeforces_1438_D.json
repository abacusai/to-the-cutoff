[
    {
        "name": "Powerful Ksenia",
        "description": "Ksenia has an array \n    a\n consisting of \n    n\n positive integers \n    a_1,\n    a_2, \n    \u2026, a_n\n. In one operation she can do the following: choose three\ndistinct indices \n    i\n, \n    j\n, \n    k\n, and then change all of \n    a_i,\n    a_j, a_k\n to \n    a_i \n    \u2295 a_j \n    \u2295 a_k\n simultaneously, where\n\n    \u2295\n denotes the bitwise XOR operation. She wants to make all\n\n    a_i\n equal in at most \n    n\n operations, or to determine that it is\nimpossible to do so. She wouldn't ask for your help, but please, help her!\nInput The first line contains one integer \n    n\n (\n    3 \n    \u2264 n \n    \u2264\n    10^5\n) \u2014 the length of \n    a\n. The second line contains \n    n\n integers,\n\n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 elements of\n\n    a\n. Output Print YES or NO in the first line depending on whether it is\npossible to make all elements equal in at most \n    n\n operations. If it is\npossible, print an integer \n    m\n (\n    0 \n    \u2264 m \n    \u2264 n\n), which denotes\nthe number of operations you do. In each of the next \n    m\n lines, print\nthree distinct integers \n    i, j, k\n, representing one operation. If there\nare many such operation sequences possible, print any. Note that you do not\nhave to minimize the number of operations. Examples Input 5 4 2 1 7 2 Output\nYES 1 1 3 4 Input 4 10 4 49 22 Output NO Note In the first example, the array\nbecomes \n    [4 \n    \u2295 1 \n    \u2295 7, 2, 4 \n    \u2295 1 \n    \u2295 7, 4 \n    \u2295 1\n    \n    \u2295 7, 2] = [2, 2, 2, 2, 2]\n.\n\n",
        "cf_contest_id": 1438,
        "cf_index": "D",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "constructive algorithms",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n4 2 1 7 2\r\n",
                "YES\r\n4\r\n2 1 3\r\n4 3 5\r\n2 1 5\r\n4 3 5\r\n"
            ],
            [
                "4\r\n10 4 49 22\r\n",
                "NO\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n1 3 2 2\r\n",
                "NO\r\n"
            ],
            [
                "4\r\n4 4 4 4\r\n",
                "YES\r\n2\r\n2 1 3\r\n2 1 3\r\n"
            ],
            [
                "4\r\n1 1 1 1\r\n",
                "YES\r\n2\r\n2 1 3\r\n2 1 3\r\n"
            ]
        ]
    }
]