[
    {
        "name": "String Compression",
        "description": "Ivan wants to write a letter to his friend. The letter is a string s\nconsisting of lowercase Latin letters. Unfortunately, when Ivan started\nwriting the letter, he realised that it is very long and writing the whole\nletter may take extremely long time. So he wants to write the compressed\nversion of string s instead of the string itself. The compressed version of\nstring s is a sequence of strings c1, s1, c2, s2, ..., ck, sk, where ci is the\ndecimal representation of number ai (without any leading zeroes) and si is\nsome string consisting of lowercase Latin letters. If Ivan writes string s1\nexactly a1 times, then string s2 exactly a2 times, and so on, the result will\nbe string s. The length of a compressed version is |c1| + |s1| + |c2| +\n|s2|... |ck| + |sk|. Among all compressed versions Ivan wants to choose a\nversion such that its length is minimum possible. Help Ivan to determine\nminimum possible length. Input The only line of input contains one string s\nconsisting of lowercase Latin letters (1 \u2264 |s| \u2264 8000). Output Output one\ninteger number \u2014 the minimum possible length of a compressed version of s.\nExamples Input aaaaaaaaaa Output 3 Input abcab Output 6 Input cczabababab\nOutput 7 Note In the first example Ivan will choose this compressed version:\nc1 is 10, s1 is a. In the second example Ivan will choose this compressed\nversion: c1 is 1, s1 is abcab. In the third example Ivan will choose this\ncompressed version: c1 is 2, s1 is c, c2 is 1, s2 is z, c3 is 4, s3 is ab.\n\n",
        "cf_contest_id": 825,
        "cf_index": "F",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "hashing",
            "string suffix structures",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "aaaaaaaaaa\r\n",
                "3\r\n"
            ],
            [
                "abcab\r\n",
                "6\r\n"
            ],
            [
                "cczabababab\r\n",
                "7\r\n"
            ]
        ],
        "private_cases": [
            [
                "kbyjorwqjk\r\n",
                "11\r\n"
            ],
            [
                "baaabbbaba\r\n",
                "9\r\n"
            ],
            [
                "aaaaaaaaaa\r\n",
                "3\r\n"
            ],
            [
                "cbbbcccbbc\r\n",
                "10\r\n"
            ],
            [
                "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n",
                "4\r\n"
            ],
            [
                "hltcdvuobkormkxkbmpfjniilublkrckmvvxemcyietgxcyjgrjwsdsgsfmoqnmbxozfavxopklhldhnsjpxhejxaxuctxeifglx\r\n",
                "101\r\n"
            ],
            [
                "agdmdjkbfnleldamiiedfheefgaimecnllgkjdkdcfejainklmhaklcjkgkimgfiiajiiihhdngjedgmefnjmbglghjjejfjkaha\r\n",
                "101\r\n"
            ],
            [
                "aaaaaaabaaaabbbbaaaaaaabbaaaaaaaaaabbabaaaaaabaaaaabaaaaaaaabaaaaaaaaaaaaaaaabaaaaaabaaaaaaaaabbaaabaaaaabbaaabaaaaabaaabaaaaaabaaaaaaaaaaabaabaaabaaaaabbbbaaaaaaaaaaaaaaabaaaaaaaaababaaabaaaaaaaaaabaaaaaaaabaaaabbbbaaaaaaabbaaaaaaaaaabbabaaaaaabaaaaabaaaaaaaabaaaaaaaaaaaaaaaabaaaaaabaaaaaaaaabbaaabaaaaabbaaabaaaaabaaabaaaaaabaaaaaaaaaaabaabaaabaaaaabbbbaaaaaaaaaaaaaaabaaaaaaaaababaaabaaaaaaaaaaba\r\n",
                "191\r\n"
            ],
            [
                "mulzibhhlxawrjqunzww\r\n",
                "21\r\n"
            ]
        ]
    }
]