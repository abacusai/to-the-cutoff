[
    {
        "name": "In Search of Truth (Hard Version)",
        "description": "The only difference between easy and hard versions is the maximum number of\nqueries. In this version, you are allowed to ask at most \n    1000\n queries.\nThis is an interactive problem. You are playing a game. The circle is divided\ninto \n    n\n sectors, sectors are numbered from \n    1\n to \n    n\n in some\norder. You are in the adjacent room and do not know either the number of\nsectors or their numbers. There is also an arrow that initially points to some\nsector. Initially, the host tells you the number of the sector to which the\narrow points. After that, you can ask the host to move the arrow \n    k\n\nsectors counterclockwise or clockwise at most \n    1000\n times. And each time\nyou are told the number of the sector to which the arrow points. Your task is\nto determine the integer \n    n\n \u2014 the number of sectors in at most \n    1000\n\nqueries. It is guaranteed that \n    1 \n    \u2264 n \n    \u2264 10^6\n. Input The input\nconsists of a single integer \n    x\n (\n    1 \n    \u2264 x \n    \u2264 n\n) \u2014 the number of\nthe initial sector. Output After you determine the integer \n    n\n \u2014 the\nnumber of sectors, you should output \"! n\" (\n    1 \n    \u2264 n \n    \u2264 10^6\n). After\nthat the program should immediately terminate. Note that, printing the answer\ndoes not count as a query. It is guaranteed that the integer \n    n\n and the\nnumbers of the sectors are fixed initially and will not be changed by the jury\nprogram depending on the queries. Interaction After reading the description of\nthe input, you may ask queries. Queries can be of two types: \"+ k\" (\n    0 \n    \u2264\n    k \n    \u2264 10^9\n) \u2014 ask to move the arrow \n    k\n sectors clockwise. \"- k\"\n(\n    0 \n    \u2264 k \n    \u2264 10^9\n) \u2014 ask to move the arrow \n    k\n sectors\ncounterclockwise. After each query, you should read an integer \n    x\n (\n    1\n    \n    \u2264 x \n    \u2264 n\n) \u2014 the number of the current sector to which the arrow\npoints. You are allowed to make at most \n    1000\n queries in total. If you\nmake too many queries, you will get Wrong answer. After printing a query or\nthe answer, do not forget to output a the end of line and flush the output.\nOtherwise, you will get Idleness limit exceeded. To do this, use:\nfflush(stdout) or cout.flush() in C++; System.out.flush() in Java;\nflush(output) in Pascal; stdout.flush() in Python; see the documentation for\nother languages. Example Input 1 5 6 7 2 10 9 8 4 3 1 Output  1  1  1 \n1  1  1  1  1  1  1 ! 10 Note Hacks To hack, use the following\ntest format. In the first line, output a single integer \n    n\n (\n    1 \n    \u2264 n\n    \n    \u2264 10^6\n) \u2014 the number of sectors. In the second line, output \n    n\n\ndifferent integers \n    1 \n    \u2264 a_1, a_2, \n    \u2026, a_n \n    \u2264 n\n \u2014 the numbers\nof the sectors in clockwise order, the arrow initially points to the sector\nwith the number \n    a_1\n.\n\n",
        "cf_contest_id": 1840,
        "cf_index": "G2",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "interactive",
            "math",
            "meet-in-the-middle",
            "probabilities"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10\r\n1 5 6 7 2 10 9 8 4 3\r\n",
                "998\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n",
                "998\r\n"
            ],
            [
                "2\r\n2 1\r\n",
                "998\r\n"
            ],
            [
                "3\r\n2 1 3\r\n",
                "998\r\n"
            ],
            [
                "8\r\n8 1 7 4 6 5 3 2\r\n",
                "998\r\n"
            ],
            [
                "7\r\n3 7 5 2 6 1 4\r\n",
                "998\r\n"
            ],
            [
                "11\r\n8 6 9 7 11 5 10 1 3 4 2\r\n",
                "998\r\n"
            ],
            [
                "19\r\n13 15 1 7 10 8 17 2 6 14 3 11 5 19 4 16 18 12 9\r\n",
                "998\r\n"
            ],
            [
                "79\r\n12 32 34 72 50 46 7 38 36 48 44 53 35 20 70 3 71 73 9 1 51 10 19 76 30 61 57 11 41 6 25 78 79 31 42 33 66 15 75 62 27 39 47 43 18 58 60 5 68 37 59 65 56 16 54 55 64 22 17 23 28 14 2 26 45 40 13 29 8 52 4 49 21 24 74 63 69 77 67\r\n",
                "998\r\n"
            ],
            [
                "99\r\n29 17 47 70 30 37 24 83 5 33 16 88 8 27 57 82 59 90 54 12 15 72 50 45 31 6 85 19 20 62 26 46 42 61 75 66 89 64 39 63 97 36 73 52 67 44 94 77 87 99 79 81 2 69 9 55 3 86 32 4 93 96 56 14 51 80 13 7 49 25 60 48 23 98 78 35 40 91 18 34 1 22 58 65 95 76 74 53 43 41 28 10 71 21 84 92 38 68 11\r\n",
                "998\r\n"
            ],
            [
                "27\r\n6 24 22 8 15 25 17 20 11 16 3 27 18 5 12 14 13 4 26 19 2 10 9 7 21 23 1\r\n",
                "998\r\n"
            ],
            [
                "55\r\n9 7 45 13 19 39 3 44 31 35 18 50 32 26 23 20 29 11 30 24 17 54 37 8 16 2 15 10 1 14 42 40 38 6 33 5 22 46 41 51 55 25 53 47 48 34 36 43 28 52 49 21 4 27 12\r\n",
                "998\r\n"
            ],
            [
                "36\r\n25 1 14 17 36 35 4 19 26 20 6 29 8 9 27 33 11 23 22 10 30 7 2 3 18 16 28 31 21 15 13 12 34 5 24 32\r\n",
                "998\r\n"
            ]
        ]
    }
]