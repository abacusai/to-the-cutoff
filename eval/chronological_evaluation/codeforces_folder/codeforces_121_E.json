[
    {
        "name": "Lucky Array",
        "description": "Petya loves lucky numbers. Everybody knows that lucky numbers are positive\nintegers whose decimal representation contains only the lucky digits 4 and 7.\nFor example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not. Petya has an\narray consisting of n numbers. He wants to perform m operations of two types:\nadd l r d \u2014 add an integer d to all elements whose indexes belong to the\ninterval from l to r, inclusive (1 \u2264 l \u2264 r \u2264 n, 1 \u2264 d \u2264 10^4); count l r \u2014\nfind and print on the screen how many lucky numbers there are among elements\nwith indexes that belong to the interval from l to r inclusive (1 \u2264 l \u2264 r \u2264\nn). Each lucky number should be counted as many times as it appears in the\ninterval. Petya has a list of all operations. The operations are such that\nafter all additions the array won't have numbers that would exceed 10^4. Help\nPetya write a program that would perform these operations. Input The first\nline contains two integers n and m (1 \u2264 n, m \u2264 10^5) \u2014 the number of numbers\nin the array and the number of operations correspondingly. The second line\ncontains n positive integers, none of which exceeds 10^4 \u2014 those are the array\nnumbers. Next m lines contain operations, one per line. They correspond to the\ndescription given in the statement. It is guaranteed that after all operations\nare fulfilled each number in the array will not exceed 10^4. Output For each\noperation of the second type print the single number on the single line \u2014 the\nnumber of lucky numbers in the corresponding interval. Examples Input 3 6 2 3\n4 count 1 3 count 1 2 add 1 3 2 count 1 3 add 2 3 3 count 1 3 Output 1 0 1 1\nInput 4 5 4 4 4 4 count 1 4 add 1 4 3 count 1 4 add 2 3 40 count 1 4 Output 4\n4 4 Note In the first sample after the first addition the array will look in\nthe following manner: 4 5 6 After the second addition: 4 8 9 The second sample\nafter the first addition: 7 7 7 7 After the second addition: 7 47 47 7\n\n",
        "cf_contest_id": 121,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 6\r\n2 3 4\r\ncount 1 3\r\ncount 1 2\r\nadd 1 3 2\r\ncount 1 3\r\nadd 2 3 3\r\ncount 1 3\r\n",
                "1\r\n0\r\n1\r\n1\r\n"
            ],
            [
                "4 5\r\n4 4 4 4\r\ncount 1 4\r\nadd 1 4 3\r\ncount 1 4\r\nadd 2 3 40\r\ncount 1 4\r\n",
                "4\r\n4\r\n4\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 6\r\n7\r\ncount 1 1\r\ncount 1 1\r\nadd 1 1 37\r\ncount 1 1\r\nadd 1 1 1\r\ncount 1 1\r\n",
                "1\r\n1\r\n1\r\n0\r\n"
            ],
            [
                "1 1\r\n2\r\nadd 1 1 4\r\n",
                ""
            ],
            [
                "10 2\r\n1 2 3 4 5 6 7 8 9 10\r\ncount 1 10\r\ncount 5 6\r\n",
                "2\r\n0\r\n"
            ],
            [
                "4 7\r\n4 47 7777 4\r\ncount 1 3\r\ncount 1 4\r\ncount 4 4\r\ncount 2 3\r\nadd 1 4 3\r\ncount 1 4\r\nadd 2 3 7\r\n",
                "3\r\n4\r\n1\r\n2\r\n2\r\n"
            ],
            [
                "10 10\r\n1 5 2 1 4 7 4 5 4 47\r\ncount 1 10\r\nadd 1 10 1\r\ncount 1 10\r\ncount 1 10\r\ncount 1 10\r\ncount 1 10\r\nadd 4 7 7\r\ncount 4 7\r\ncount 1 7\r\nadd 1 1 7\r\n",
                "5\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "1 2\r\n47\r\ncount 1 1\r\ncount 1 1\r\n",
                "1\r\n1\r\n"
            ],
            [
                "1 5\r\n74\r\ncount 1 1\r\nadd 1 1 26\r\ncount 1 1\r\nadd 1 1 7677\r\ncount 1 1\r\n",
                "1\r\n0\r\n1\r\n"
            ]
        ]
    }
]