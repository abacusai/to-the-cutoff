[
    {
        "name": "New Year and Cake",
        "description": "Limak is a little polar bear. According to some old traditions, his bear\nfamily prepared a New Year cake. And Limak likes cakes. As you may know, a New\nYear cake is a strictly convex polygon with n vertices. Parents won't allow\nLimak to eat more than half of a cake because he would get sick. After some\nthinking they decided to cut a cake along one of n\u00b7(n - 3) / 2 diagonals. Then\nLimak will get a non-greater piece. Limak understands rules but he won't be\nhappy if the second piece happens to be much bigger. Limak's disappointment\nwill be equal to the difference between pieces' areas, multiplied by two. It\ncan be proved that it will be integer for the given constraints. There are\nn\u00b7(n - 3) / 2 possible scenarios. Consider them all and find the sum of values\nof Limak's disappointment, modulo 10^9 + 7. Input The first line of the input\ncontains a single integer n (4 \u2264 n \u2264 500 000) \u2014 the number of vertices in the\npolygon denoting the cake. Each of the next n lines contains two integers xi\nand yi (|xi|, |yi| \u2264 10^9) \u2014 coordinates of the i-th point. It's guaranteed\nthat all points are distinct, polygon is strictly convex and points are given\nin the clockwise order. Output Print the sum of values of Limak's\ndisappointment over all possible scenarios modulo 10^9 + 7. Examples Input 5 2\n4 2 7 5 7 5 4 3 -2 Output 90 Input 4 -1000000000 -5000000 0 1234567 1 1 -5\n-100000000 Output 525185196 Input 8 -10 0 -6 6 0 10 6 6 10 0 6 -6 0 -10 -6 -6\nOutput 5216 Note In the first sample possible values of Limak's disappointment\nare 0, 18, 18, 24, 30.\n\n",
        "cf_contest_id": 611,
        "cf_index": "G",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "geometry",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n2 4\r\n2 7\r\n5 7\r\n5 4\r\n3 -2\r\n",
                "90\r\n"
            ],
            [
                "4\r\n-1000000000 -5000000\r\n0 1234567\r\n1 1\r\n-5 -100000000\r\n",
                "525185196\r\n"
            ],
            [
                "8\r\n-10 0\r\n-6 6\r\n0 10\r\n6 6\r\n10 0\r\n6 -6\r\n0 -10\r\n-6 -6\r\n",
                "5216\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n-1000000000 1000000000\r\n1000000000 1000000000\r\n1000000000 -1000000000\r\n-1000000000 -1000000000\r\n",
                "0\r\n"
            ],
            [
                "4\r\n-664436138 -678445515\r\n-664435870 -678446057\r\n-664437020 -678445221\r\n-664436539 -678444816\r\n",
                "937228\r\n"
            ],
            [
                "5\r\n-372930446 708475137\r\n-372930460 708475148\r\n-372930455 708475147\r\n-372930450 708475145\r\n-372930447 708475141\r\n",
                "199\r\n"
            ],
            [
                "6\r\n-374777033 745903956\r\n-374777031 745903952\r\n-374777034 745903947\r\n-374777040 745903943\r\n-374777043 745903962\r\n-374777037 745903961\r\n",
                "1434\r\n"
            ],
            [
                "5\r\n1000000000 1000000000\r\n1000000000 -1000000000\r\n-1000000000 -999999999\r\n-1000000000 999000000\r\n-900123123 1000000000\r\n",
                "76055413\r\n"
            ]
        ]
    }
]