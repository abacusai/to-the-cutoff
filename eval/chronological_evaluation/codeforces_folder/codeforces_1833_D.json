[
    {
        "name": "Flipper",
        "description": "You are given a permutation \n    p\n of length \n    n\n. A permutation is an\narray consisting of \n    n\n distinct integers from \n    1\n to \n    n\n in any\norder. For example, \n    2,3,1,5,4\n is a permutation, while\n\n    1,2,2\n is not (since \n    2\n appears twice), and\n\n    1,3,4\n is also not a permutation (as \n    n=3\n, but the array\ncontains \n    4\n). To the permutation \n    p\n, you need to apply the following\noperation exactly once: First you choose a segment \n    [l, r]\n (\n    1 \n    \u2264 l\n    \n    \u2264 r \n    \u2264 n\n, a segment is a continuous sequence of numbers \n    p_l,\n    p_l+1, \n    \u2026, p_r-1, p_r\n) and reverse it. Reversing a segment\nmeans swapping pairs of numbers \n    (p_l, p_r)\n, \n    (p_l+1, p_r-1)\n,\n..., \n    (p_l + i, p_r - i)\n (where \n    l + i \n    \u2264 r - i\n). Then you\nswap the prefix and suffix: \n    [r+1, n]\n and \n    [1, l - 1]\n (note that\nthese segments may be empty). For example, given \n    n = 5, p = \n    \n    2,\n    \n    3, \n    1, 5, 4\n, if you choose the segment\n\n    [l = 2, r = 3]\n, after reversing the segment \n    p =\n    \n    \n    \n    2, \n    1, \n    3,\n    \n    5, \n    4\n, then you swap the segments\n\n    [4, 5]\n and \n    [1, 1]\n. Thus, \n    p = \n    \n    \n    5,\n    \n    4, 1, 3, \n    2\n. It can be shown that\nthis is the maximum possible result for the given permutation. You need to\noutput the lexicographically maximum permutation that can be obtained by\napplying the operation described exactly once. A permutation \n    a\n is\nlexicographically greater than permutation \n    b\n if there exists an \n    i\n\n(\n    1 \n    \u2264 i \n    \u2264 n\n) such that \n    a_j = b_j\n for \n    1 \n    \u2264 j < i\n\nand \n    a_i > b_i\n. Input The first line of the input contains a single\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of test cases. Then\nthe descriptions of the test cases follow. The first line of each test case\ncontains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2000\n) \u2014 the size of\nthe permutation. The second line of each test case contains \n    n\n integers:\n\n    p_1, p_2, \n    \u2026, p_n\n (\n    1 \n    \u2264 p_i \n    \u2264 n\n) \u2014 the permutation\n\n    p\n itself. It is guaranteed that the sum of \n    n\n over all test cases\ndoes not exceed \n    2000\n. Output For each test case, output in a separate\nline the lexicographically maximum permutation of length \n    n\n that can be\nobtained from \n    p\n by applying the operation described in the problem\nexactly once. Example Input 9 5 2 3 1 5 4 9 4 1 6 7 2 8 5 3 9 4 4 3 2 1 2 2 1\n6 3 2 4 1 5 6 7 3 2 1 5 7 6 4 10 10 2 5 6 1 9 3 8 4 7 4 4 2 1 3 1 1 Output 5 4\n1 3 2 9 4 1 6 7 2 8 5 3 3 2 1 4 1 2 6 5 3 2 4 1 7 6 4 5 3 2 1 9 3 8 4 7 1 10 2\n5 6 3 4 2 1 1 Note The first example is explained in the problem statement. In\nthe second example, the segment \n    [l = 9, r = 9]\n should be chosen. In the\nthird example, the segment \n    [l = 1, r = 1]\n should be chosen. In the\nfourth example, the segment \n    [l = 1, r = 2]\n should be chosen. In the\nfifth example, the segment \n    [l = 5, r = 6]\n should be chosen. In the sixth\nexample, the segment \n    [l = 4, r = 4]\n should be chosen. In the seventh\nexample, the segment \n    [l = 5, r = 5]\n should be chosen.\n\n",
        "cf_contest_id": 1833,
        "cf_index": "D",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "9\r\n5\r\n2 3 1 5 4\r\n9\r\n4 1 6 7 2 8 5 3 9\r\n4\r\n4 3 2 1\r\n2\r\n2 1\r\n6\r\n3 2 4 1 5 6\r\n7\r\n3 2 1 5 7 6 4\r\n10\r\n10 2 5 6 1 9 3 8 4 7\r\n4\r\n4 2 1 3\r\n1\r\n1\r\n",
                "5 4 1 3 2\r\n9 4 1 6 7 2 8 5 3\r\n3 2 1 4\r\n1 2\r\n6 5 3 2 4 1\r\n7 6 4 5 3 2 1\r\n9 3 8 4 7 1 10 2 5 6\r\n3 4 2 1\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n10\r\n5 6 7 8 9 10 1 2 3 4\r\n",
                "10 1 2 3 4 9 8 7 6 5\r\n"
            ]
        ]
    }
]