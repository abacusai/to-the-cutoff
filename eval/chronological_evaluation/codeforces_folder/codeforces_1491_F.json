[
    {
        "name": "Magnets",
        "description": "This is an interactive problem. Kochiya Sanae is playing with magnets.\nRealizing that some of those magnets are demagnetized, she is curious to find\nthem out. There are \n    n\n magnets, which can be of the following \n    3\n\ntypes: N S - \u2014 these magnets are demagnetized. Note that you don't know the\ntypes of these magnets beforehand. You have a machine which can measure the\nforce between the magnets, and you can use it at most \n    n+\n    \u230a\n    log_2n\n    \u230b\n times. You can put some magnets to the left part of the\nmachine and some to the right part of the machine, and launch the machine.\nObviously, you can put one magnet to at most one side (you don't have to put\nall magnets). You can put the same magnet in different queries. Then the\nmachine will tell the force these magnets produce. Formally, let \n    n_1,s_1\n\nbe the number of N and S magnets correspondently on the left and \n    n_2,s_2\n\n\u2014 on the right. Then the force between them would be\n\n    n_1n_2+s_1s_2-n_1s_2-n_2s_1\n. Please note that the force is a signed\nvalue. However, when the absolute value of the force is strictly larger than\n\n    n\n, the machine will crash into pieces. You need to find all magnets of\ntype - (all demagnetized ones), without breaking the machine. Note that the\ninteractor is not adaptive. The types of the magnets are fixed before the\nstart of the interaction and do not change with queries. It is guaranteed that\nthere are at least \n    2\n magnets whose type is not -, and at least \n    1\n\nmagnet of type -. Input The first line contains a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test cases. Interaction For each test\ncase you should start by reading an integer \n    n\n (\n    3 \n    \u2264 n \n    \u2264\n    2000\n) \u2014 the number of the magnets. It is guaranteed that the total sum of\nall \n    n\n over all test cases doesn't exceed \n    2000\n. After that you can\nput some magnets into the machine and make a query from the statement. You\nhave to print each query in three lines: In the first line print \"? l r\"\n(without quotes) where \n    l\n and \n    r\n (\n    1 \n    \u2264 l,r < n\n, \n    l+r\n    \n    \u2264 n\n) respectively denote the number of the magnets you put to left and\nright. In the second line print \n    l\n integers \n    a_1, \n    \u2026, a_l\n (\n    1\n    \n    \u2264 a_i \n    \u2264 n\n, \n    a_i \n    \u2260 a_j\n if \n    i \n    \u2260 j\n) \u2014 the\nindices of the magnets you put to left. In the third line print \n    r\n\nintegers \n    b_1, \n    \u2026, b_r\n (\n    1 \n    \u2264 b_i \n    \u2264 n\n, \n    b_i \n    \u2260\n    b_j\n if \n    i \n    \u2260 j\n) \u2014 the indices of the magnets you put to right. The\nsame magnet can't be put to both sides in the same query. Formally, you should\nguarantee that \n    a_i \n    \u2260 b_j\n for any \n    i\n and \n    j\n. However, you\nmay leave some magnets unused.After printing a query do not forget to output\nend of line and flush the output. To do this, use: fflush(stdout) or\ncout.flush() in C++; System.out.flush() in Java; flush(output) in Pascal;\nstdout.flush() in Python; see documentation for other languages.After this,\nyou should read an integer \n    F\n \u2014 the force these magnets produce. Note\nthat if your query is invalid(either the query limit exceeds, the machine\ncrashes or the arguments are invalid), the interactor will terminate\nimmediately. In this case terminate your program to receive verdict Wrong\nAnswer instead of arbitrary verdicts. If you are confident about your answer,\nuse the following format to report it: \"! k A\", where \n    k\n is the number of\nmagnets you found, and \n    A\n is an array consisting of \n    k\n different\nintegers from \n    1\n to \n    n\n denoting the indices of the magnets of type -\nthat you found. You may print elements of \n    A\n in arbitrary order. After\nthat, if this is the last test case, you have to terminate your program;\notherwise you should immediately continue to deal with the next test case.Note\nthat the interactor is not adaptive. The types of the magnets are fixed before\nthe start of interaction and do not change with queries. Hacks To hack a\nsolution, use the following format: The first line contains a single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test cases in your hack.\nThen follow the descriptions of the \n    t\n test cases, each printed in two\nlines: The first line contains a single integer \n    n\n (\n    3 \n    \u2264 n \n    \u2264\n    2000\n) \u2014 the number of magnets. The second line contains a string \n    S\n of\nlength \n    n\n consisting of only N, S and -, denoting the magnets' types.\nEach of your test case should guarantee that there are at least \n    2\n\nmagnets whose type is not -, and at least \n    1\n magnet of type -. Meanwhile,\nthe total sum of \n    n\n in all test cases should not exceed \n    2000\n.\nExample Input 1 4 0 1 0 0 Output ? 1 1 3 4 ? 1 2 1 2 3 ? 1 1 1 4 ? 1 1 1 3 ! 2\n3 4 Note The empty lines in the sample are just for you to better understand\nthe interaction process. You're not required to print them. In the sample, the\ntypes of the magnets are NN\u2013. At first, you put the third magnet on the left\nand the fourth one on the right. Both of them have type -, thus no force is\nproduced. Then you put the first magnet on the left and the second and third\none on the right. The third magnet has type -, while the other two magnets are\nof type N, so the force produced is \n    1\n. In the following two queries, the\nforce is \n    0\n since there is only a magnet with property - on the right.\nThen we can determine that the magnets of type - are the third and the fourth\none, so we should print ! 2 3 4 and exit.\n\n",
        "cf_contest_id": 1491,
        "cf_index": "F",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "constructive algorithms",
            "interactive"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n4\r\nNN--\r\n",
                "4\r\n2\r\n3\r\n4\r\n"
            ]
        ],
        "private_cases": []
    }
]