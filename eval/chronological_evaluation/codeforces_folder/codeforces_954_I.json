[
    {
        "name": "Yet Another String Matching Problem",
        "description": "Suppose you have two strings s and t, and their length is equal. You may\nperform the following operation any number of times: choose two different\ncharacters c1 and c2, and replace every occurence of c1 in both strings with\nc2. Let's denote the distance between strings s and t as the minimum number of\noperations required to make these strings equal. For example, if s is abcd and\nt is ddcb, the distance between them is 2 \u2014 we may replace every occurence of\na with b, so s becomes bbcd, and then we may replace every occurence of b with\nd, so both strings become ddcd. You are given two strings S and T. For every\nsubstring of S consisting of |T| characters you have to determine the distance\nbetween this substring and T. Input The first line contains the string S, and\nthe second \u2014 the string T (1 \u2264 |T| \u2264 |S| \u2264 125000). Both strings consist of\nlowercase Latin letters from a to f. Output Print |S| - |T| + 1 integers. The\ni-th of these integers must be equal to the distance between the substring of\nS beginning at i-th index with length |T| and the string T. Example Input\nabcdefa ddcb Output 2 3 3 3\n\n",
        "cf_contest_id": 954,
        "cf_index": "I",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "fft",
            "math"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "abcdefa\r\nddcb\r\n",
                "2 3 3 3 \r\n"
            ]
        ],
        "private_cases": []
    }
]