[
    {
        "name": "Genetic Engineering",
        "description": "You will receive 3 points for solving this problem. Manao is designing the\ngenetic code for a new type of algae to efficiently produce fuel.\nSpecifically, Manao is focusing on a stretch of DNA that encodes one protein.\nThe stretch of DNA is represented by a string containing only the characters\n'A', 'T', 'G' and 'C'. Manao has determined that if the stretch of DNA\ncontains a maximal sequence of consecutive identical nucleotides that is of\neven length, then the protein will be nonfunctional. For example, consider a\nprotein described by DNA string \"GTTAAAG\". It contains four maximal sequences\nof consecutive identical nucleotides: \"G\", \"TT\", \"AAA\", and \"G\". The protein\nis nonfunctional because sequence \"TT\" has even length. Manao is trying to\nobtain a functional protein from the protein he currently has. Manao can\ninsert additional nucleotides into the DNA stretch. Each additional nucleotide\nis a character from the set 'A', 'T', 'G', 'C'. Manao wants to determine the\nminimum number of insertions necessary to make the DNA encode a functional\nprotein. Input The input consists of a single line, containing a string s of\nlength n (1 \u2264 n \u2264 100). Each character of s will be from the set 'A', 'T',\n'G', 'C'. This problem doesn't have subproblems. You will get 3 points for\nthe correct submission. Output The program should print on one line a single\ninteger representing the minimum number of 'A', 'T', 'G', 'C' characters that\nare required to be inserted into the input string in order to make all runs of\nidentical characters have odd length. Examples Input GTTAAAG Output 1 Input\nAACCAACCAAAAC Output 5 Note In the first example, it is sufficient to insert a\nsingle nucleotide of any type between the two 'T's in the sequence to restore\nthe functionality of the protein.\n\n",
        "cf_contest_id": 391,
        "cf_index": "A",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "GTTAAAG\r\n",
                "1\r\n"
            ],
            [
                "AACCAACCAAAAC\r\n",
                "5\r\n"
            ]
        ],
        "private_cases": [
            [
                "GTGAATTTCC\r\n",
                "2\r\n"
            ],
            [
                "CAGGGGGCCGCCCATGAAAAAAACCCGGCCCCTTGGGAAAACTTGGGTTA\r\n",
                "7\r\n"
            ],
            [
                "CCCTTCACCCGGATCCAAATCCCTTAGAAATAATCCCCGACGGCGTTGTATCACCTCTGCACTTGTTAGTAAGGTCAGGCGTCCATTACGGAAGAACGTA\r\n",
                "19\r\n"
            ],
            [
                "GCATTACATGGGGGGGTCCTACGAGCCCGGCATCCCGGAAACTAGCCGGTTAATTTGGTTTAAACCCTCCCACCCCGGATTGTAACCCCCCTCATTGGTT\r\n",
                "17\r\n"
            ],
            [
                "TTCCCAGAGAAAAAAAGGGGCCCAAATGCCCTAAAAACCCCCTTTGCCCCCCAACCCCTTTTTAAAATAAAAAGGGGCCCATTCCCTTAAAAATTTTTTG\r\n",
                "10\r\n"
            ],
            [
                "AGCCGCCCCCCCAAAAAAGGGGGAAAAAAAAAAAAAAAAAAAAACTTTTGGAAACCCCCCCCTTTTTTTTTTTTTTTTTTTTTTTTTGGGGAAGGGGGGG\r\n",
                "7\r\n"
            ],
            [
                "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r\n",
                "1\r\n"
            ],
            [
                "AAAAAAAAAAAAAAAAAATTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGGTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGAAAAATTTT\r\n",
                "5\r\n"
            ],
            [
                "AACCGGTTAACCGGTTAACCGGTTAACCGGTTAACCGGTTAACCGGTTAACCGGTTAACCGGTTAACCGGTTAACCGGTTAACCGGTTAACCGGTTCCGG\r\n",
                "50\r\n"
            ],
            [
                "A\r\n",
                "0\r\n"
            ],
            [
                "TTT\r\n",
                "0\r\n"
            ],
            [
                "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG\r\n",
                "0\r\n"
            ],
            [
                "G\r\n",
                "0\r\n"
            ],
            [
                "T\r\n",
                "0\r\n"
            ],
            [
                "C\r\n",
                "0\r\n"
            ],
            [
                "AA\r\n",
                "1\r\n"
            ],
            [
                "GGG\r\n",
                "0\r\n"
            ],
            [
                "AAG\r\n",
                "1\r\n"
            ]
        ]
    }
]