[
    {
        "name": "E-mail Addresses",
        "description": "One of the most important products of the R1 company is a popular @r1.com mail\nservice. The R1 mailboxes receive and send millions of emails every day.\nToday, the online news thundered with terrible information. The R1 database\ncrashed and almost no data could be saved except for one big string. The\ndevelopers assume that the string contains the letters of some users of the R1\nmail. Recovering letters is a tedious mostly manual work. So before you start\nthis process, it was decided to estimate the difficulty of recovering. Namely,\nwe need to calculate the number of different substrings of the saved string\nthat form correct e-mail addresses. We assume that valid addresses are only\nthe e-mail addresses which meet the following criteria: the address should\nbegin with a non-empty sequence of letters, numbers, characters '_', starting\nwith a letter; then must go character '@'; then must go a non-empty sequence\nof letters or numbers; then must go character '.'; the address must end with a\nnon-empty sequence of letters. You got lucky again and the job was entrusted\nto you! Please note that the substring is several consecutive characters in a\nstring. Two substrings, one consisting of the characters of the string with\nnumbers l1, l1 + 1, l1 + 2, ..., r1 and the other one consisting of the\ncharacters of the string with numbers l2, l2 + 1, l2 + 2, ..., r2, are\nconsidered distinct if l1 \u2260 l2 or r1 \u2260 r2. Input The first and the only line\ncontains the sequence of characters s1s2... sn (1 \u2264 n \u2264 10^6) \u2014 the saved\nstring. It is guaranteed that the given string contains only small English\nletters, digits and characters '.', '_', '@'. Output Print in a single line\nthe number of substrings that are valid e-mail addresses. Examples Input\n[email protected] Output 18 Input [email protected]@[email protected] Output 8\nInput [email protected] Output 1 Input [email protected] Output 0 Note In the\nfirst test case all the substrings that are correct e-mail addresses begin\nfrom one of the letters of the word agapov and end in one of the letters of\nthe word com. In the second test case note that the e-mail [email protected]\nis considered twice in the answer. Note that in this example the e-mail\nentries overlap inside the string.\n\n",
        "cf_contest_id": 412,
        "cf_index": "E",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "gerald.agapov1991@gmail.com\r\n",
                "18\r\n"
            ],
            [
                "x@x.x@x.x_e_@r1.com\r\n",
                "8\r\n"
            ],
            [
                "a___@1.r\r\n",
                "1\r\n"
            ],
            [
                ".asd123__..@\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "@\r\n",
                "0\r\n"
            ],
            [
                ".\r\n",
                "0\r\n"
            ],
            [
                "a\r\n",
                "0\r\n"
            ],
            [
                "0\r\n",
                "0\r\n"
            ],
            [
                "@.\r\n",
                "0\r\n"
            ],
            [
                "@1.r\r\n",
                "0\r\n"
            ],
            [
                "0@0.x\r\n",
                "0\r\n"
            ],
            [
                "0000000a@000a111.r\r\n",
                "1\r\n"
            ],
            [
                "0\r\n",
                "0\r\n"
            ],
            [
                "a@0.z\r\n",
                "1\r\n"
            ],
            [
                "a@0.\r\n",
                "0\r\n"
            ],
            [
                "@0.z\r\n",
                "0\r\n"
            ],
            [
                "a@0z\r\n",
                "0\r\n"
            ],
            [
                "a0.z\r\n",
                "0\r\n"
            ],
            [
                "a@.z\r\n",
                "0\r\n"
            ],
            [
                "a@0.1\r\n",
                "0\r\n"
            ],
            [
                "a@0._\r\n",
                "0\r\n"
            ],
            [
                "a@_.z\r\n",
                "0\r\n"
            ],
            [
                "_@0.z\r\n",
                "0\r\n"
            ],
            [
                "a@r.z\r\n",
                "1\r\n"
            ],
            [
                "@0.z\r\n",
                "0\r\n"
            ],
            [
                "a_0.z\r\n",
                "0\r\n"
            ],
            [
                "a@\r\n",
                "0\r\n"
            ]
        ]
    }
]