[
    {
        "name": "Min Or Sum",
        "description": "You are given an array \n    a\n of size \n    n\n. You can perform the following\noperation on the array: Choose two different integers \n    i, j\n \n    (1 \n    \u2264\n    i < j \n    \u2264 n\n), replace \n    a_i\n with \n    x\n and \n    a_j\n with \n    y\n.\nIn order not to break the array, \n    a_i | a_j = x | y\n must be held, where\n\n    |\n denotes the bitwise OR operation. Notice that \n    x\n and \n    y\n are\nnon-negative integers. Please output the minimum sum of the array you can get\nafter using the operation above any number of times. Input Each test contains\nmultiple test cases. The first line contains the number of test cases \n    t\n\n\n    (1 \n    \u2264 t \n    \u2264 1000)\n. Description of the test cases follows. The\nfirst line of each test case contains an integer \n    n\n \n    (2 \n    \u2264 n \n    \u2264\n    100)\n \u2014 the size of array \n    a\n. The second line of each test case\ncontains \n    n\n integers \n    a_1, a_2, \n    \u2026 ,a_n\n \n    (0 \n    \u2264 a_i <\n    2^30)\n. Output For each test case, print one number in a line \u2014 the\nminimum possible sum of the array. Example Input 4 3 1 3 2 5 1 2 4 8 16 2 6 6\n3 3 5 6 Output 3 31 6 7 Note In the first example, you can perform the\nfollowing operations to obtain the array \n    [1, 0, 2]\n: 1\u010bhoose \n    i = 1,\n    j = 2\n, change \n    a_1 = 1\n and \n    a_2 = 2\n, it's valid since \n    1 | 3 =\n    1 | 2\n. The array becomes \n    [1, 2, 2]\n. 2\u010bhoose \n    i = 2, j = 3\n,\nchange \n    a_2 = 0\n and \n    a_3 = 2\n, it's valid since \n    2 | 2 = 0 | 2\n.\nThe array becomes \n    [1, 0, 2]\n. We can prove that the minimum sum is \n    1 +\n    0 + 2 = 3\n In the second example, We don't need any operations.\n\n",
        "cf_contest_id": 1635,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3\r\n1 3 2\r\n5\r\n1 2 4 8 16\r\n2\r\n6 6\r\n3\r\n3 5 6\r\n",
                "3\r\n31\r\n6\r\n7\r\n"
            ]
        ],
        "private_cases": []
    }
]