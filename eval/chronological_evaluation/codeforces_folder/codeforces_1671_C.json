[
    {
        "name": "Dolce Vita",
        "description": "Turbulent times are coming, so you decided to buy sugar in advance. There are\n\n    n\n shops around that sell sugar: the \n    i\n-th shop sells one pack of\nsugar for \n    a_i\n coins, but only one pack to one customer each day. So in\norder to buy several packs, you need to visit several shops. Another problem\nis that prices are increasing each day: during the first day the cost is\n\n    a_i\n, during the second day cost is \n    a_i + 1\n, during the third day \u2014\n\n    a_i + 2\n and so on for each shop \n    i\n. On the contrary, your everyday\nbudget is only \n    x\n coins. In other words, each day you go and buy as many\npacks as possible with total cost not exceeding \n    x\n. Note that if you\ndon't spend some amount of coins during a day, you can't use these coins\nduring the next days. Eventually, the cost for each pack will exceed \n    x\n,\nand you won't be able to buy even a single pack. So, how many packs will you\nbe able to buy till that moment in total? Input The first line contains a\nsingle integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of test\ncases. Next \n    t\n cases follow. The first line of each test case contains\ntwo integers \n    n\n and \n    x\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n; \n    1\n    \n    \u2264 x \n    \u2264 10^9\n) \u2014 the number of shops and your everyday budget. The\nsecond line of each test case contains \n    n\n integers \n    a_1, a_2, \n    \u2026,\n    a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the initial cost of one pack in each\nshop. It's guaranteed that the total sum of \n    n\n doesn't exceed \n    2\n    \n    \u00b7 10^5\n. Output For each test case, print one integer \u2014 the total\nnumber of packs you will be able to buy until prices exceed your everyday\nbudget. Example Input 4 3 7 2 1 2 5 9 10 20 30 40 50 1 1 1 2 1000 1 1 Output\n11 0 1 1500 Note In the first test case, Day 1: prices are \n    [2, 1, 2]\n.\nYou can buy all \n    3\n packs, since \n    2 + 1 + 2 \n    \u2264 7\n. Day 2: prices\nare \n    [3, 2, 3]\n. You can't buy all \n    3\n packs, since \n    3 + 2 + 3 >\n    7\n, so you buy only \n    2\n packs. Day 3: prices are \n    [4, 3, 4]\n. You\ncan buy \n    2\n packs with prices \n    4\n and \n    3\n. Day 4: prices are\n\n    [5, 4, 5]\n. You can't buy \n    2\n packs anymore, so you buy only \n    1\n\npack. Day 5: prices are \n    [6, 5, 6]\n. You can buy \n    1\n pack. Day 6:\nprices are \n    [7, 6, 7]\n. You can buy \n    1\n pack. Day 7: prices are \n    [8,\n    7, 8]\n. You still can buy \n    1\n pack of cost \n    7\n. Day 8: prices are\n\n    [9, 8, 9]\n. Prices are too high, so you can't buy anything. In total, you\nbought \n    3 + 2 + 2 + 1 + 1 + 1 + 1 = 11\n packs.In the second test case,\nprices are too high even at the first day, so you can't buy anything. In the\nthird test case, you can buy only one pack at day one. In the fourth test\ncase, you can buy \n    2\n packs first \n    500\n days. At day \n    501\n prices\nare \n    [501, 501]\n, so you can buy only \n    1\n pack the next \n    500\n\ndays. At day \n    1001\n prices are \n    [1001, 1001]\n so can't buy anymore. In\ntotal, you bought \n    500 \n    \u00b7 2 + 500 \n    \u00b7 1 = 1500\n packs.\n\n",
        "cf_contest_id": 1671,
        "cf_index": "C",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3 7\r\n2 1 2\r\n5 9\r\n10 20 30 40 50\r\n1 1\r\n1\r\n2 1000\r\n1 1\r\n",
                "11\r\n0\r\n1\r\n1500\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 1000000\r\n228228\r\n",
                "771773\r\n"
            ],
            [
                "1\r\n1 228228228\r\n228228228\r\n",
                "1\r\n"
            ],
            [
                "1\r\n1 1000000000\r\n1\r\n",
                "1000000000\r\n"
            ],
            [
                "1\r\n1 1\r\n2\r\n",
                "0\r\n"
            ],
            [
                "1\r\n100 37\r\n29 33 45 64 95 33 45 76 86 5 52 16 27 24 80 5 44 19 96 8 77 67 21 17 22 56 28 3 84 27 39 12 60 35 75 6 68 71 81 5 76 85 73 54 8 4 58 4 22 5 11 51 72 31 67 93 38 94 96 22 73 34 33 84 21 60 89 88 30 21 44 57 5 16 11 65 20 68 68 41 25 78 43 96 61 10 40 98 55 35 19 79 21 4 62 41 63 2 80 44\r\n",
                "82\r\n"
            ]
        ]
    }
]