[
    {
        "name": "Delete from the Left",
        "description": "You are given two strings \n    s\n and \n    t\n. In a single move, you can\nchoose any of two strings and delete the first (that is, the leftmost)\ncharacter. After a move, the length of the string decreases by \n    1\n. You\ncan't choose a string if it is empty. For example: by applying a move to the\nstring \"where\", the result is the string \"here\", by applying a move to the\nstring \"a\", the result is an empty string \"\". You are required to make two\ngiven strings equal using the fewest number of moves. It is possible that, in\nthe end, both strings will be equal to the empty string, and so, are equal to\neach other. In this case, the answer is obviously the sum of the lengths of\nthe initial strings. Write a program that finds the minimum number of moves to\nmake two given strings \n    s\n and \n    t\n equal. Input The first line of the\ninput contains \n    s\n. In the second line of the input contains \n    t\n. Both\nstrings consist only of lowercase Latin letters. The number of letters in each\nstring is between 1 and \n    2\n    \u00b710^5\n, inclusive. Output Output the\nfewest number of moves required. It is possible that, in the end, both strings\nwill be equal to the empty string, and so, are equal to each other. In this\ncase, the answer is obviously the sum of the lengths of the given strings.\nExamples Input test west Output 2 Input codeforces yes Output 9 Input test yes\nOutput 7 Input b ab Output 1 Note In the first example, you should apply the\nmove once to the first string and apply the move once to the second string. As\na result, both strings will be equal to \"est\". In the second example, the move\nshould be applied to the string \"codeforces\" \n    8\n times. As a result, the\nstring becomes \"codeforces\" \n    \u2192\n \"es\". The move should be applied to\nthe string \"yes\" once. The result is the same string \"yes\" \n    \u2192\n \"es\".\nIn the third example, you can make the strings equal only by completely\ndeleting them. That is, in the end, both strings will be empty. In the fourth\nexample, the first character of the second string should be deleted.\n\n",
        "cf_contest_id": 1005,
        "cf_index": "B",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "test\r\nwest\r\n",
                "2\r\n"
            ],
            [
                "codeforces\r\nyes\r\n",
                "9\r\n"
            ],
            [
                "test\r\nyes\r\n",
                "7\r\n"
            ],
            [
                "b\r\nab\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "z\r\nz\r\n",
                "0\r\n"
            ],
            [
                "abacabadabacaba\r\nabacabadacaba\r\n",
                "18\r\n"
            ],
            [
                "z\r\na\r\n",
                "2\r\n"
            ],
            [
                "ama\r\nsama\r\n",
                "1\r\n"
            ],
            [
                "aaabc\r\nbc\r\n",
                "3\r\n"
            ],
            [
                "lxuyspmieeuyxluv\r\ndfwxqvavzxctblaa\r\n",
                "32\r\n"
            ],
            [
                "ahmedaly\r\naly\r\n",
                "5\r\n"
            ],
            [
                "aa\r\na\r\n",
                "1\r\n"
            ],
            [
                "aa\r\nba\r\n",
                "2\r\n"
            ],
            [
                "cccba\r\nba\r\n",
                "3\r\n"
            ],
            [
                "a\r\nab\r\n",
                "3\r\n"
            ],
            [
                "dadc\r\ndddc\r\n",
                "4\r\n"
            ],
            [
                "aacaaab\r\nb\r\n",
                "6\r\n"
            ],
            [
                "dddc\r\ncdcde\r\n",
                "9\r\n"
            ],
            [
                "bbdab\r\ndab\r\n",
                "2\r\n"
            ],
            [
                "a\r\naa\r\n",
                "1\r\n"
            ],
            [
                "aa\r\nab\r\n",
                "4\r\n"
            ],
            [
                "codeforces\r\nces\r\n",
                "7\r\n"
            ]
        ]
    }
]