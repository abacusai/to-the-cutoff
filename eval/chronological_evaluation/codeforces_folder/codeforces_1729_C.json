[
    {
        "name": "Jumping on Tiles",
        "description": "Polycarp was given a row of tiles. Each tile contains one lowercase letter of\nthe Latin alphabet. The entire sequence of tiles forms the string \n    s\n. In\nother words, you are given a string \n    s\n consisting of lowercase Latin\nletters. Initially, Polycarp is on the first tile of the row and wants to get\nto the last tile by jumping on the tiles. Jumping from \n    i\n-th tile to\n\n    j\n-th tile has a cost equal to \n    |index(s_i) - index(s_j)|\n, where\n\n    index(c)\n is the index of the letter \n    c\n in the alphabet (for\nexample, \n    index(\n'a'\n    )=1\n, \n    index(\n'b'\n    )=2\n, ...,\n\n    index(\n'z'\n    )=26\n) . Polycarp wants to get to the \n    n\n-th tile for\nthe minimum total cost, but at the same time make maximum number of jumps. In\nother words, among all possible ways to get to the last tile for the minimum\ntotal cost, he will choose the one with the maximum number of jumps. Polycarp\ncan visit each tile at most once. Polycarp asks you to help \u2014 print the\nsequence of indices of string \n    s\n on which he should jump. Input The first\nline of the input contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014\nthe number of test cases in the test. Each test case is given by the string\n\n    s\n (\n    2 \n    \u2264 |s| \n    \u2264 2 \n    \u00b7 10^5\n), where \n    |s|\n \u2014 is the\nlength of string \n    s\n. The string \n    s\n consists of lowercase Latin\nletters. It is guaranteed that the sum of string lengths \n    s\n over all test\ncases does not exceed \n    2 \n    \u00b7 10^5\n. Output The answer to each test\ncase consists of two lines. In the first line print two integers \n    cost\n,\n\n    m\n, where \n    cost\n is the minimum total cost of the path, and \n    m\n\nis the maximum number of visited tiles Polycarp can make to get to \n    n\n-th\ntiles for the minimum total cost \n    cost\n (i.e. the number of jumps is\n\n    m-1\n). In the next line print \n    m\n different numbers \n    j_1, j_2,\n    \n    \u2026, j_m\n (\n    1 \n    \u2264 j_i \n    \u2264 |s|\n) \u2014 the sequence of indices of the\ntiles Polycarp will jump on. The first number in the sequence must be \n    1\n\n(that is, \n    j_1=1\n) and the last number must be the value of \n    |s|\n\n(that is, \n    j_m=|s|\n). If there are multiple answers, print any of them.\nExample Input 6 logic codeforces bca aaaaaaaaaaa adbaadabad to Output 9 4 1 4\n3 5 16 10 1 8 3 4 9 5 2 6 7 10 1 2 1 3 0 11 1 8 10 4 3 5 7 2 9 6 11 3 10 1 9 5\n4 7 3 8 6 2 10 5 2 1 2 Note In the first test case, the required path\ncorresponds to the picture: In this case, the minimum possible total cost of\nthe path is achieved. Since \n    index(\n'l'\n    )=12\n,\n\n    index(\n'o'\n    )=15\n, \n    index(\n'g'\n    )=7\n, \n    index(\n'i'\n    )=9\n,\n\n    index(\n'c'\n    )=3\n, then the total cost of the path is\n\n    |12-9|+|9-7|+|7-3|=3+2+4=9\n.\n\n",
        "cf_contest_id": 1729,
        "cf_index": "C",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\nlogic\r\ncodeforces\r\nbca\r\naaaaaaaaaaa\r\nadbaadabad\r\nto\r\n",
                "9 4 1 4 3 5\r\n16 10 1 8 3 4 9 5 2 6 7 10\r\n1 2 1 3\r\n0 11 1 2 3 4 5 6 7 8 9 10 11\r\n3 10 1 4 5 7 9 3 8 2 6 10\r\n5 2 1 2\r\n"
            ]
        ],
        "private_cases": []
    }
]