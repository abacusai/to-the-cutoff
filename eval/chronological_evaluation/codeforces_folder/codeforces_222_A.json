[
    {
        "name": "Shooshuns and Sequence ",
        "description": "One day shooshuns found a sequence of n integers, written on a blackboard. The\nshooshuns can perform one operation with it, the operation consists of two\nsteps: Find the number that goes k-th in the current sequence and add the same\nnumber to the end of the sequence; Delete the first number of the current\nsequence. The shooshuns wonder after how many operations all numbers on the\nboard will be the same and whether all numbers will ever be the same. Input\nThe first line contains two space-separated integers n and k (1 \u2264 k \u2264 n \u2264\n10^5). The second line contains n space-separated integers: a1, a2, ..., an (1\n\u2264 ai \u2264 10^5) \u2014 the sequence that the shooshuns found. Output Print the minimum\nnumber of operations, required for all numbers on the blackboard to become the\nsame. If it is impossible to achieve, print -1. Examples Input 3 2 3 1 1\nOutput 1 Input 3 1 3 1 1 Output -1 Note In the first test case after the first\noperation the blackboard will have sequence [1, 1, 1]. So, one operation is\nenough to make all numbers the same. Thus, the answer equals one. In the\nsecond test case the sequence will never consist of the same numbers. It will\nalways contain at least two distinct numbers 3 and 1. Thus, the answer equals\n-1.\n\n",
        "cf_contest_id": 222,
        "cf_index": "A",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2\r\n3 1 1\r\n",
                "1\n"
            ],
            [
                "3 1\r\n3 1 1\r\n",
                "-1\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1\r\n",
                "0\n"
            ],
            [
                "2 1\r\n1 1\r\n",
                "0\n"
            ],
            [
                "2 1\r\n2 1\r\n",
                "-1\n"
            ],
            [
                "4 4\r\n1 2 3 4\r\n",
                "3\n"
            ],
            [
                "4 3\r\n1 2 3 4\r\n",
                "-1\n"
            ],
            [
                "5 3\r\n2 1 1 1 1\r\n",
                "1\n"
            ],
            [
                "5 3\r\n1 1 1 1 1\r\n",
                "0\n"
            ],
            [
                "5 5\r\n1 1 1 1 1\r\n",
                "0\n"
            ],
            [
                "10 1\r\n1 1 1 1 1 1 1 1 1 1\r\n",
                "0\n"
            ],
            [
                "10 1\r\n1 2 1 1 1 1 1 1 1 1\r\n",
                "-1\n"
            ],
            [
                "10 1\r\n2 1 1 1 1 1 1 1 1 1\r\n",
                "-1\n"
            ],
            [
                "10 2\r\n2 1 1 1 1 1 1 1 1 1\r\n",
                "1\n"
            ],
            [
                "10 2\r\n1 2 1 1 1 1 1 1 1 1\r\n",
                "-1\n"
            ],
            [
                "10 3\r\n3 2 1 1 1 1 1 1 1 1\r\n",
                "2\n"
            ],
            [
                "10 1\r\n1 2 3 4 5 6 7 8 9 10\r\n",
                "-1\n"
            ],
            [
                "10 10\r\n1 2 3 4 5 6 7 8 9 10\r\n",
                "9\n"
            ],
            [
                "20 10\r\n1 2 3 4 5 6 7 8 9 10 1 1 1 1 1 1 1 1 1 1\r\n",
                "-1\n"
            ],
            [
                "20 11\r\n1 2 3 4 5 6 7 8 9 10 1 1 1 1 1 1 1 1 1 1\r\n",
                "10\n"
            ],
            [
                "20 9\r\n1 2 3 4 5 6 7 8 9 10 1 1 1 1 1 1 1 1 1 1\r\n",
                "-1\n"
            ],
            [
                "20 10\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "0\n"
            ],
            [
                "20 20\r\n20 1 19 2 18 3 17 4 16 5 15 6 14 7 13 8 12 9 11 10\r\n",
                "19\n"
            ]
        ]
    }
]