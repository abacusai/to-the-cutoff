[
    {
        "name": "Warehouse",
        "description": "Once upon a time, when the world was more beautiful, the sun shone brighter,\nthe grass was greener and the sausages tasted better Arlandia was the most\npowerful country. And its capital was the place where our hero DravDe worked.\nHe couldn\u2019t program or make up problems (in fact, few people saw a computer\nthose days) but he was nevertheless happy. He worked in a warehouse where a\nmagical but non-alcoholic drink Ogudar-Olok was kept. We won\u2019t describe his\nwork in detail and take a better look at a simplified version of the\nwarehouse. The warehouse has one set of shelving. It has n shelves, each of\nwhich is divided into m sections. The shelves are numbered from top to bottom\nstarting from 1 and the sections of each shelf are numbered from left to right\nalso starting from 1. Each section can contain exactly one box of the drink,\nand try as he might, DravDe can never put a box in a section that already has\none. In the course of his work DravDe frequently notices that he has to put a\nbox in a filled section. In that case his solution is simple. DravDe ignores\nthat section and looks at the next one to the right. If it is empty, he puts\nthe box there. Otherwise he keeps looking for the first empty section to the\nright. If no empty section is found by the end of the shelf, he looks at the\nshelf which is under it, then the next one, etc. Also each time he looks at a\nnew shelf he starts from the shelf\u2019s beginning. If DravDe still can\u2019t find an\nempty section for the box, he immediately drinks it all up and throws the\nempty bottles away not to be caught. After one great party with a lot of\nOgudar-Olok drunk DravDe asked you to help him. Unlike him, you can program\nand therefore modeling the process of counting the boxes in the warehouse will\nbe easy work for you. The process of counting contains two types of query\nmessages: \u00ab+1 x y id\u00bb (where x, y are integers, 1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m, and id\nis a string of lower case Latin letters \u2014 from 1 to 10 characters long). That\nquery means that the warehouse got a box identified as id, which should be put\nin the section y on the shelf x. If the section is full, use the rules\ndescribed above. It is guaranteed that every moment of the process the\nidentifiers of all the boxes in the warehouse are different. You don\u2019t have to\nanswer this query. \u00ab-1 id\u00bb (where id is a string of lower case Latin letters \u2014\nfrom 1 to 10 characters long). That query means that a box identified as id is\nremoved from the warehouse. You have to answer this query (see output format).\nInput The first input line contains integers n, m and k (1 \u2264 n, m \u2264 30, 1 \u2264 k\n\u2264 2000) \u2014 the height, the width of shelving and the amount of the operations\nin the warehouse that you need to analyze. In the following k lines the\nqueries are given in the order of appearance in the format described above.\nOutput For each query of the \u00ab-1 id\u00bb type output two numbers in a separate\nline \u2014 index of the shelf and index of the section where the box with this\nidentifier lay. If there was no such box in the warehouse when the query was\nmade, output \u00ab-1 -1\u00bb without quotes. Examples Input 2 2 9 +1 1 1 cola +1 1 1\nfanta +1 1 1 sevenup +1 1 1 whitekey -1 cola -1 fanta -1 sevenup -1 whitekey\n-1 cola Output 1 1 1 2 2 1 2 2 -1 -1 Input 2 2 8 +1 1 1 cola -1 cola +1 1 1\nfanta -1 fanta +1 1 1 sevenup -1 sevenup +1 1 1 whitekey -1 whitekey Output 1\n1 1 1 1 1 1 1\n\n",
        "cf_contest_id": 35,
        "cf_index": "B",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 64.0,
        "public_cases": [
            [
                "2 2 9\r\n+1 1 1 cola\r\n+1 1 1 fanta\r\n+1 1 1 sevenup\r\n+1 1 1 whitekey\r\n-1 cola\r\n-1 fanta\r\n-1 sevenup\r\n-1 whitekey\r\n-1 cola\r\n",
                "1 1\r\n1 2\r\n2 1\r\n2 2\r\n-1 -1\r\n"
            ],
            [
                "2 2 8\r\n+1 1 1 cola\r\n-1 cola\r\n+1 1 1 fanta\r\n-1 fanta\r\n+1 1 1 sevenup\r\n-1 sevenup\r\n+1 1 1 whitekey\r\n-1 whitekey\r\n",
                "1 1\r\n1 1\r\n1 1\r\n1 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 2 5\r\n-1 ywesjzsdk\r\n-1 aaew\r\n+1 1 2 wk\r\n-1 wk\r\n-1 wk\r\n",
                "-1 -1\r\n-1 -1\r\n1 2\r\n-1 -1\r\n"
            ],
            [
                "3 5 5\r\n-1 vpotlzzxu\r\n-1 ucdpqnechl\r\n-1 ykphisxph\r\n-1 buppgmurvz\r\n-1 rjhowqxmv\r\n",
                "-1 -1\r\n-1 -1\r\n-1 -1\r\n-1 -1\r\n-1 -1\r\n"
            ],
            [
                "4 6 7\r\n+1 2 3 psj\r\n+1 4 5 vpjghrat\r\n+1 1 2 edvffw\r\n+1 4 2 lvmfvxowzz\r\n+1 3 6 hqiyvevtll\r\n+1 4 4 unfpiingsi\r\n-1 unfpiingsi\r\n",
                "4 4\r\n"
            ],
            [
                "6 5 10\r\n+1 2 5 gw\r\n+1 3 4 mbgrh\r\n-1 gw\r\n+1 3 3 abcs\r\n-1 mbgrh\r\n+1 4 1 yna\r\n+1 3 3 fmhjovjklc\r\n+1 1 3 mcdspppmrv\r\n+1 2 4 ohiefjcq\r\n+1 3 1 jpk\r\n",
                "2 5\r\n3 4\r\n"
            ],
            [
                "7 6 10\r\n-1 e\r\n-1 kzbdpeckem\r\n-1 esi\r\n-1 jgsokv\r\n-1 serkq\r\n-1 ipczknkye\r\n-1 bawktukez\r\n-1 wvw\r\n-1 jm\r\n+1 5 2 i\r\n",
                "-1 -1\r\n-1 -1\r\n-1 -1\r\n-1 -1\r\n-1 -1\r\n-1 -1\r\n-1 -1\r\n-1 -1\r\n-1 -1\r\n"
            ],
            [
                "5 1 10\r\n+1 2 1 t\r\n-1 t\r\n-1 t\r\n+1 5 1 prcle\r\n-1 t\r\n+1 3 1 epkbtyjk\r\n+1 3 1 kwqzwt\r\n-1 epkbtyjk\r\n+1 3 1 v\r\n+1 2 1 xib\r\n",
                "2 1\r\n-1 -1\r\n-1 -1\r\n3 1\r\n"
            ],
            [
                "1 30 10\r\n+1 1 16 kqqpjfkhg\r\n-1 kqqpjfkhg\r\n+1 1 26 jmvcacxdc\r\n+1 1 16 xh\r\n-1 jmvcacxdc\r\n-1 xh\r\n+1 1 23 gbra\r\n+1 1 25 k\r\n+1 1 22 nctorw\r\n-1 gbra\r\n",
                "1 16\r\n1 26\r\n1 16\r\n1 23\r\n"
            ]
        ]
    }
]