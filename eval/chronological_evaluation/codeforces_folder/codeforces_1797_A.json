[
    {
        "name": "Li Hua and Maze",
        "description": "There is a rectangular maze of size \n    n\n    \u00d7 m\n. Denote \n    (r,c)\n as\nthe cell on the \n    r\n-th row from the top and the \n    c\n-th column from the\nleft. Two cells are adjacent if they share an edge. A path is a sequence of\nadjacent empty cells. Each cell is initially empty. Li Hua can choose some\ncells (except \n    (x_1, y_1)\n and \n    (x_2, y_2)\n) and place an obstacle in\neach of them. He wants to know the minimum number of obstacles needed to be\nplaced so that there isn't a path from \n    (x_1, y_1)\n to \n    (x_2, y_2)\n.\nSuppose you were Li Hua, please solve this problem. Input The first line\ncontains the single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 500\n) \u2014 the number\nof test cases. The first line of each test case contains two integers\n\n    n,m\n (\n    4\n    \u2264 n,m\n    \u2264 10^9\n) \u2014 the size of the maze. The second line\nof each test case contains four integers \n    x_1,y_1,x_2,y_2\n (\n    1\n    \u2264\n    x_1,x_2\n    \u2264 n, 1\n    \u2264 y_1,y_2\n    \u2264 m\n) \u2014 the coordinates of the start and\nthe end. It is guaranteed that \n    |x_1-x_2|+|y_1-y_2|\n    \u2265 2\n. Output For\neach test case print the minimum number of obstacles you need to put on the\nfield so that there is no path from \n    (x_1, y_1)\n to \n    (x_2, y_2)\n.\nExample Input 3 4 4 2 2 3 3 6 7 1 1 2 3 9 9 5 1 3 6 Output 4 2 3 Note In test\ncase 1, you can put obstacles on \n    (1,3), (2,3), (3,2), (4,2)\n. Then the\npath from \n    (2,2)\n to \n    (3,3)\n will not exist.\n\n",
        "cf_contest_id": 1797,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "flows",
            "graphs",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n4 4\r\n2 2 3 3\r\n6 7\r\n1 1 2 3\r\n9 9\r\n5 1 3 6\r\n",
                "4\r\n2\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n5 4\r\n4 2 3 3\r\n",
                "4\r\n"
            ],
            [
                "1\r\n10 15\r\n3 10 9 13\r\n",
                "4\r\n"
            ],
            [
                "1\r\n10 5\r\n2 2 5 2\r\n",
                "4\r\n"
            ]
        ]
    }
]