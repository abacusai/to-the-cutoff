[
    {
        "name": "Too Much Money",
        "description": "Alfred wants to buy a toy moose that costs c dollars. The store doesn\u2019t give\nchange, so he must give the store exactly c dollars, no more and no less. He\nhas n coins. To make c dollars from his coins, he follows the following\nalgorithm: let S be the set of coins being used. S is initially empty. Alfred\nrepeatedly adds to S the highest-valued coin he has such that the total value\nof the coins in S after adding the coin doesn\u2019t exceed c. If there is no such\ncoin, and the value of the coins in S is still less than c, he gives up and\ngoes home. Note that Alfred never removes a coin from S after adding it. As a\nprogrammer, you might be aware that Alfred\u2019s algorithm can fail even when\nthere is a set of coins with value exactly c. For example, if Alfred has one\ncoin worth 3, one coin worth4, and two coins worth 5, and the moose costs12, then Alfred will add both of the 5 coins to S and then give up, since\nadding any other coin would cause the value of the coins in S to exceed12.\nOf course, Alfred could instead combine one 3 coin, one4 coin, and one 5\ncoin to reach the total. Bob tried to convince Alfred that his algorithm was\nflawed, but Alfred didn\u2019t believe him. Now Bob wants to give Alfred some coins\n(in addition to those that Alfred already has) such that Alfred\u2019s algorithm\nfails. Bob can give Alfred any number of coins of any denomination (subject to\nthe constraint that each coin must be worth a positive integer number of\ndollars). There can be multiple coins of a single denomination. He would like\nto minimize the total value of the coins he gives Alfred. Please find this\nminimum value. If there is no solution, print \"Greed is good\". You can assume\nthat the answer, if it exists, is positive. In other words, Alfred's algorithm\nwill work if Bob doesn't give him any coins. Input The first line contains c\n(1 \u2264 c \u2264 200 000) \u2014 the price Alfred wants to pay. The second line contains n\n(1 \u2264 n \u2264 200 000) \u2014 the number of coins Alfred initially has. Then n lines\nfollow, each containing a single integer x (1 \u2264 x \u2264 c) representing the value\nof one of Alfred's coins. Output If there is a solution, print the minimum\npossible total value of the coins in a solution. Otherwise, print \"Greed is\ngood\" (without quotes). Examples Input 12 3 5 3 4 Output 5 Input 50 8 1 2 4 8\n16 37 37 37 Output Greed is good Note In the first sample, Bob should give\nAlfred a single coin worth5. This creates the situation described in the\nproblem statement. In the second sample, there is no set of coins that will\ncause Alfred's algorithm to fail.\n\n",
        "cf_contest_id": 725,
        "cf_index": "E",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "12\r\n3\r\n5\r\n3\r\n4\r\n",
                "5"
            ],
            [
                "50\r\n8\r\n1\r\n2\r\n4\r\n8\r\n16\r\n37\r\n37\r\n37\r\n",
                "Greed is good\r\n"
            ]
        ],
        "private_cases": [
            [
                "100\r\n7\r\n1\r\n2\r\n3\r\n4\r\n5\r\n46\r\n39\r\n",
                "62"
            ],
            [
                "13\r\n4\r\n1\r\n4\r\n4\r\n4\r\n",
                "6"
            ],
            [
                "200000\r\n10\r\n36412\r\n140499\r\n57688\r\n276\r\n65167\r\n183892\r\n200000\r\n44759\r\n191434\r\n187320\r\n",
                "Greed is good\r\n"
            ],
            [
                "200000\r\n50\r\n30869\r\n100899\r\n33092\r\n25116\r\n88468\r\n138443\r\n18870\r\n72413\r\n67287\r\n27596\r\n89976\r\n2922\r\n128053\r\n134720\r\n141634\r\n136972\r\n57276\r\n155221\r\n191239\r\n151648\r\n143795\r\n37368\r\n153101\r\n102972\r\n99133\r\n182304\r\n132651\r\n128462\r\n37337\r\n86269\r\n185318\r\n168333\r\n110079\r\n170297\r\n99226\r\n174759\r\n183444\r\n195540\r\n104462\r\n9698\r\n165371\r\n123483\r\n94891\r\n87828\r\n25064\r\n76302\r\n48835\r\n10929\r\n84650\r\n200000\r\n",
                "Greed is good\r\n"
            ],
            [
                "200000\r\n10\r\n31506\r\n28490\r\n134366\r\n5638\r\n19457\r\n2007\r\n14856\r\n103670\r\n24455\r\n68460\r\n",
                "28491"
            ],
            [
                "200000\r\n50\r\n47355\r\n102119\r\n103634\r\n46932\r\n102478\r\n34958\r\n4284\r\n34239\r\n46491\r\n60991\r\n130712\r\n32033\r\n116782\r\n63243\r\n21255\r\n61260\r\n157734\r\n38224\r\n65170\r\n5283\r\n91057\r\n79053\r\n62970\r\n49285\r\n20961\r\n134219\r\n135039\r\n612\r\n8763\r\n6827\r\n3836\r\n107222\r\n150263\r\n132127\r\n54559\r\n137313\r\n35615\r\n157900\r\n107030\r\n3876\r\n126177\r\n87328\r\n155290\r\n152961\r\n43657\r\n100466\r\n52604\r\n31234\r\n25766\r\n155555\r\n",
                "38225"
            ],
            [
                "1000\r\n4\r\n18\r\n881\r\n96\r\n5\r\n",
                "19"
            ],
            [
                "10000\r\n5\r\n98\r\n51\r\n8143\r\n403\r\n1305\r\n",
                "99"
            ],
            [
                "200000\r\n7\r\n1\r\n31224\r\n30478\r\n18\r\n2346\r\n135881\r\n52\r\n",
                "54"
            ],
            [
                "200000\r\n11\r\n38\r\n2612\r\n128255\r\n56198\r\n1\r\n1\r\n258\r\n31\r\n8785\r\n3565\r\n256\r\n",
                "41"
            ],
            [
                "200000\r\n8\r\n13\r\n1219\r\n126\r\n127622\r\n2\r\n86\r\n70925\r\n7\r\n",
                "8"
            ],
            [
                "1000\r\n58\r\n202\r\n148\r\n22\r\n632\r\n313\r\n20\r\n296\r\n45\r\n525\r\n688\r\n587\r\n757\r\n4\r\n672\r\n140\r\n5\r\n219\r\n515\r\n287\r\n694\r\n42\r\n75\r\n194\r\n731\r\n173\r\n751\r\n61\r\n571\r\n303\r\n944\r\n499\r\n287\r\n284\r\n311\r\n13\r\n715\r\n115\r\n895\r\n937\r\n218\r\n620\r\n3\r\n764\r\n655\r\n460\r\n336\r\n459\r\n53\r\n361\r\n582\r\n598\r\n89\r\n194\r\n695\r\n207\r\n805\r\n651\r\n204\r\n",
                "54"
            ],
            [
                "10000\r\n59\r\n5322\r\n8376\r\n2467\r\n16\r\n8581\r\n2630\r\n8996\r\n3422\r\n5887\r\n5629\r\n4970\r\n5214\r\n3490\r\n8674\r\n362\r\n9136\r\n8238\r\n7816\r\n6890\r\n9254\r\n60\r\n205\r\n2\r\n2897\r\n4941\r\n1387\r\n372\r\n9172\r\n6849\r\n4305\r\n6102\r\n9215\r\n734\r\n152\r\n4659\r\n7555\r\n7644\r\n7386\r\n8089\r\n4379\r\n3194\r\n670\r\n3852\r\n1266\r\n8739\r\n466\r\n8157\r\n4870\r\n8113\r\n5447\r\n9115\r\n4564\r\n4792\r\n5021\r\n16\r\n10\r\n4624\r\n7987\r\n9252\r\n",
                "11"
            ],
            [
                "200000\r\n59\r\n1177\r\n120041\r\n43628\r\n160804\r\n114044\r\n65881\r\n88642\r\n82196\r\n56515\r\n42804\r\n34362\r\n47765\r\n120586\r\n55271\r\n182664\r\n43110\r\n182946\r\n119806\r\n12\r\n171869\r\n156328\r\n186913\r\n108568\r\n96560\r\n24794\r\n7\r\n118155\r\n118723\r\n34100\r\n39864\r\n66829\r\n199\r\n104959\r\n80018\r\n10090\r\n194133\r\n98374\r\n58952\r\n22310\r\n200\r\n28695\r\n49809\r\n181457\r\n121384\r\n66403\r\n132762\r\n2512\r\n105130\r\n132500\r\n43346\r\n93588\r\n77\r\n1683\r\n26625\r\n121199\r\n106020\r\n9120\r\n135156\r\n171401\r\n",
                "13"
            ],
            [
                "200000\r\n32\r\n59335\r\n129978\r\n4\r\n98054\r\n181003\r\n70941\r\n113274\r\n98420\r\n3\r\n69630\r\n199812\r\n66144\r\n24\r\n10517\r\n4\r\n197121\r\n167133\r\n53409\r\n157441\r\n299\r\n7570\r\n161\r\n3267\r\n96071\r\n4275\r\n24729\r\n44998\r\n172741\r\n18173\r\n191186\r\n26688\r\n40013\r\n",
                "25"
            ]
        ]
    }
]