[
    {
        "name": "Robot Breakout",
        "description": "\n    n\n robots have escaped from your laboratory! You have to find them as\nsoon as possible, because these robots are experimental, and their behavior is\nnot tested yet, so they may be really dangerous! Fortunately, even though your\nrobots have escaped, you still have some control over them. First of all, you\nknow the location of each robot: the world you live in can be modeled as an\ninfinite coordinate plane, and the \n    i\n-th robot is currently located at\nthe point having coordinates (\n    x_i\n, \n    y_i\n). Furthermore, you may send\nexactly one command to all of the robots. The command should contain two\ninteger numbers \n    X\n and \n    Y\n, and when each robot receives this\ncommand, it starts moving towards the point having coordinates (\n    X\n,\n\n    Y\n). The robot stops its movement in two cases: either it reaches\n(\n    X\n, \n    Y\n); or it cannot get any closer to (\n    X\n, \n    Y\n).\nNormally, all robots should be able to get from any point of the coordinate\nplane to any other point. Each robot usually can perform four actions to move.\nLet's denote the current coordinates of the robot as (\n    x_c\n, \n    y_c\n).\nThen the movement system allows it to move to any of the four adjacent points:\nthe first action allows it to move from (\n    x_c\n, \n    y_c\n) to (\n    x_c -\n    1\n, \n    y_c\n); the second action allows it to move from (\n    x_c\n,\n\n    y_c\n) to (\n    x_c\n, \n    y_c + 1\n); the third action allows it to move\nfrom (\n    x_c\n, \n    y_c\n) to (\n    x_c + 1\n, \n    y_c\n); the fourth action\nallows it to move from (\n    x_c\n, \n    y_c\n) to (\n    x_c\n, \n    y_c - 1\n).\nUnfortunately, it seems that some movement systems of some robots are\nmalfunctioning. For each robot you know which actions it can perform, and\nwhich it cannot perform. You want to send a command so all robots gather at\nthe same point. To do so, you have to choose a pair of integer numbers \n    X\n\nand \n    Y\n so that each robot can reach the point (\n    X\n, \n    Y\n). Is it\npossible to find such a point? Input The first line contains one integer\n\n    q\n (\n    1 \n    \u2264 q \n    \u2264 10^5\n) \u2014 the number of queries. Then \n    q\n\nqueries follow. Each query begins with one line containing one integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the number of robots in the query. Then \n    n\n\nlines follow, the \n    i\n-th of these lines describes the \n    i\n-th robot in\nthe current query: it contains six integer numbers \n    x_i\n, \n    y_i\n,\n\n    f_i, 1\n, \n    f_i, 2\n, \n    f_i, 3\n and \n    f_i, 4\n (\n    -10^5\n    \n    \u2264 x_i, y_i \n    \u2264 10^5\n, \n    0 \n    \u2264 f_i, j\n    \u2264 1\n). The first two\nnumbers describe the initial location of the \n    i\n-th robot, and the\nfollowing four numbers describe which actions the \n    i\n-th robot can use to\nmove (\n    f_i, j = 1\n if the \n    i\n-th robot can use the \n    j\n-th\naction, and \n    f_i, j = 0\n if it cannot use the \n    j\n-th action). It is\nguaranteed that the total number of robots over all queries does not exceed\n\n    10^5\n. Output You should answer each query independently, in the order\nthese queries appear in the input. To answer a query, you should do one of the\nfollowing: if it is impossible to find a point that is reachable by all\n\n    n\n robots, print one number \n    0\n on a separate line; if it is possible\nto find a point that is reachable by all \n    n\n robots, print three space-\nseparated integers on the same line: \n    1\n \n    X\n \n    Y\n, where \n    X\n\nand \n    Y\n are the coordinates of the point reachable by all \n    n\n robots.\nBoth \n    X\n and \n    Y\n should not exceed \n    10^5\n by absolute value; it is\nguaranteed that if there exists at least one point reachable by all robots,\nthen at least one of such points has both coordinates not exceeding \n    10^5\n\nby absolute value. Example Input 4 2 -1 -2 0 0 0 0 -1 -2 0 0 0 0 3 1 5 1 1 1 1\n2 5 0 1 0 1 3 5 1 0 0 0 2 1337 1337 0 1 1 1 1336 1337 1 1 0 1 1 3 5 1 1 1 1\nOutput 1 -1 -2 1 2 5 0 1 -100000 -100000\n\n",
        "cf_contest_id": 1196,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2\r\n-1 -2 0 0 0 0\r\n-1 -2 0 0 0 0\r\n3\r\n1 5 1 1 1 1\r\n2 5 0 1 0 1\r\n3 5 1 0 0 0\r\n2\r\n1337 1337 0 1 1 1\r\n1336 1337 1 1 0 1\r\n1\r\n3 5 1 1 1 1\r\n",
                "1 -1 -2\r\n1 2 5\r\n0\r\n1 100000 100000\r\n"
            ]
        ],
        "private_cases": []
    }
]