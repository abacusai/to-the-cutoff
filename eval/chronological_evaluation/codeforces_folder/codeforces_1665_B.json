[
    {
        "name": "Array Cloning Technique",
        "description": "You are given an array \n    a\n of \n    n\n integers. Initially there is only\none copy of the given array. You can do operations of two types: Choose any\narray and clone it. After that there is one more copy of the chosen array.\nSwap two elements from any two copies (maybe in the same copy) on any\npositions. You need to find the minimal number of operations needed to obtain\na copy where all elements are equal. Input The input consists of multiple test\ncases. The first line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    10^4\n) \u2014 the number of test cases. Description of the test cases follows.\nThe first line of each test case contains a single integer \n    n\n (\n    1 \n    \u2264\n    n \n    \u2264 10^5\n) \u2014 the length of the array \n    a\n. The second line of each\ntest case contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    -10^9\n    \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the elements of the array \n    a\n. It is guaranteed\nthat the sum of \n    n\n over all test cases does not exceed \n    10^5\n. Output\nFor each test case output a single integer \u2014 the minimal number of operations\nneeded to create at least one copy where all elements are equal. Example Input\n6 1 1789 6 0 1 3 3 7 0 2 -1000000000 1000000000 4 4 3 2 1 5 2 5 7 6 3 7 1 1 1\n1 1 1 1 Output 0 6 2 5 7 0 Note In the first test case all elements in the\narray are already equal, that's why the answer is \n    0\n. In the second test\ncase it is possible to create a copy of the given array. After that there will\nbe two identical arrays: \n    [ \n     0 \n     1 \n     3 \n     3 \n     7 \n     0 \n     ]\n and\n\n    [ \n     0 \n     1 \n     3 \n     3 \n     7 \n     0 \n     ]\n After that we can swap\nelements in a way so all zeroes are in one array: \n    [ \n     0 \n    \n    0\n     \n    0\n     3 \n     7 \n     0 \n     ]\n and \n    [ \n    \n    1\n     1 \n     3 \n     3 \n     7 \n     \n    3\n     ]\n Now let's\ncreate a copy of the first array: \n    [ \n     0 \n     0 \n     0 \n     3 \n     7 \n     0 \n    ]\n, \n    [ \n     0 \n     0 \n     0 \n     3 \n     7 \n     0 \n     ]\n and \n    [ \n     1 \n     1\n    \n     3 \n     3 \n     7 \n     3 \n     ]\n Let's swap elements in the first two copies:\n\n    [ \n     0 \n     0 \n     0 \n     \n    0\n     \n    0\n     0 \n     ]\n,\n\n    [ \n     \n    3\n     \n    7\n     0 \n     3 \n     7 \n     0 \n     ]\n\nand \n    [ \n     1 \n     1 \n     3 \n     3 \n     7 \n     3 \n     ]\n. Finally, we made a copy\nwhere all elements are equal and made \n    6\n operations. It can be proven\nthat no fewer operations are enough.\n\n",
        "cf_contest_id": 1665,
        "cf_index": "B",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n1\r\n1789\r\n6\r\n0 1 3 3 7 0\r\n2\r\n-1000000000 1000000000\r\n4\r\n4 3 2 1\r\n5\r\n2 5 7 6 3\r\n7\r\n1 1 1 1 1 1 1\r\n",
                "0\r\n6\r\n2\r\n5\r\n7\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n9\r\n1 3 0 0 5 2 2 2 2\r\n",
                "7\r\n"
            ],
            [
                "1\r\n7\r\n1 2 3 4 5 6 6\r\n",
                "7\r\n"
            ]
        ]
    }
]