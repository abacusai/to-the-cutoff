[
    {
        "name": "Topforces Strikes Back",
        "description": "One important contest will take place on the most famous programming platform\n(Topforces) very soon! The authors have a pool of \n    n\n problems and should\nchoose at most three of them into this contest. The prettiness of the\n\n    i\n-th problem is \n    a_i\n. The authors have to compose the most pretty\ncontest (in other words, the cumulative prettinesses of chosen problems should\nbe maximum possible). But there is one important thing in the contest\npreparation: because of some superstitions of authors, the prettinesses of\nproblems cannot divide each other. In other words, if the prettinesses of\nchosen problems are \n    x, y, z\n, then \n    x\n should be divisible by neither\n\n    y\n, nor \n    z\n, \n    y\n should be divisible by neither \n    x\n, nor\n\n    z\n and \n    z\n should be divisible by neither \n    x\n, nor \n    y\n. If\nthe prettinesses of chosen problems are \n    x\n and \n    y\n then neither\n\n    x\n should be divisible by \n    y\n nor \n    y\n should be divisible by\n\n    x\n. Any contest composed from one problem is considered good. Your task\nis to find out the maximum possible total prettiness of the contest composed\nof at most three problems from the given pool. You have to answer \n    q\n\nindependent queries. If you are Python programmer, consider using PyPy instead\nof Python when you submit your code. Input The first line of the input\ncontains one integer \n    q\n (\n    1 \n    \u2264 q \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the\nnumber of queries. The first line of the query contains one integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of problems. The second\nline of the query contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    2\n    \n    \u2264 a_i \n    \u2264 2 \n    \u00b7 10^5\n), where \n    a_i\n is the prettiness of the\n\n    i\n-th problem. It is guaranteed that the sum of \n    n\n over all queries\ndoes not exceed \n    2 \n    \u00b7 10^5\n. Output For each query print one integer\n\u2014 the maximum possible cumulative prettiness of the contest composed of at\nmost three problems from the given pool of problems in the query. Example\nInput 3 4 5 6 15 30 4 10 6 30 15 3 3 4 6 Output 30 31 10\n\n",
        "cf_contest_id": 1183,
        "cf_index": "F",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n4\r\n5 6 15 30\r\n4\r\n10 6 30 15\r\n3\r\n3 4 6\r\n",
                "30\r\n31\r\n10\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n5\r\n30 30 15 10 6\r\n",
                "31\r\n"
            ],
            [
                "1\r\n5\r\n6 10 15 30 30\r\n",
                "31\r\n"
            ],
            [
                "1\r\n37\r\n166320 83160 41580 33264 27720 23760 20790 18480 16632 15120 13860 11880 11088 10395 9240 8316 7920 7560 6930 6160 5940 5544 5040 4752 4620 4158 3960 3780 3696 3465 3080 3024 2970 2772 2640 29 23\r\n",
                "166372\r\n"
            ],
            [
                "1\r\n9\r\n7 4 2 2 2 2 2 2 2\r\n",
                "11\r\n"
            ],
            [
                "1\r\n53\r\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 3 4 5\r\n",
                "57\r\n"
            ],
            [
                "1\r\n5\r\n15 6 10 30 30\r\n",
                "31\r\n"
            ]
        ]
    }
]