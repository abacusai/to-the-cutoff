[
    {
        "name": "Weights Division (hard version)",
        "description": "Easy and hard versions are actually different problems, so we advise you to\nread both statements carefully. You are given a weighted rooted tree, vertex\n\n    1\n is the root of this tree. Also, each edge has its own cost. A tree is\na connected graph without cycles. A rooted tree has a special vertex called\nthe root. A parent of a vertex \n    v\n is the last different from \n    v\n\nvertex on the path from the root to the vertex \n    v\n. Children of vertex\n\n    v\n are all vertices for which \n    v\n is the parent. A vertex is a leaf\nif it has no children. The weighted tree is such a tree that each edge of this\ntree has some weight. The weight of the path is the sum of edges weights on\nthis path. The weight of the path from the vertex to itself is \n    0\n. You\ncan make a sequence of zero or more moves. On each move, you select an edge\nand divide its weight by \n    2\n rounding down. More formally, during one\nmove, you choose some edge \n    i\n and divide its weight by \n    2\n rounding\ndown (\n    w_i := \n    \n    \u230a\n    w_i/2\n    \n    \u230b\n). Each\nedge \n    i\n has an associated cost \n    c_i\n which is either \n    1\n or\n\n    2\n coins. Each move with edge \n    i\n costs \n    c_i\n coins. Your task is\nto find the minimum total cost to make the sum of weights of paths from the\nroot to each leaf at most \n    S\n. In other words, if \n    w(i, j)\n is the\nweight of the path from the vertex \n    i\n to the vertex \n    j\n, then you\nhave to make \n    \u2211\n    _v \n    \u2208 leaves w(root, v) \n    \u2264 S\n, where\n\n    leaves\n is the list of all leaves. You have to answer \n    t\n independent\ntest cases. Input The first line of the input contains one integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 2 \n    \u00b7 10^4\n) \u2014 the number of test cases. Then\n\n    t\n test cases follow. The first line of the test case contains two\nintegers \n    n\n and \n    S\n (\n    2 \n    \u2264 n \n    \u2264 10^5; 1 \n    \u2264 S \n    \u2264\n    10^16\n) \u2014 the number of vertices in the tree and the maximum possible sum\nof weights you have to obtain. The next \n    n-1\n lines describe edges of the\ntree. The edge \n    i\n is described as four integers \n    v_i\n, \n    u_i\n,\n\n    w_i\n and \n    c_i\n (\n    1 \n    \u2264 v_i, u_i \n    \u2264 n; 1 \n    \u2264 w_i \n    \u2264 10^6;\n    1 \n    \u2264 c_i \n    \u2264 2\n), where \n    v_i\n and \n    u_i\n are vertices the edge\n\n    i\n connects, \n    w_i\n is the weight of this edge and \n    c_i\n is the\ncost of this edge. It is guaranteed that the sum of \n    n\n does not exceed\n\n    10^5\n (\n    \u2211 n \n    \u2264 10^5\n). Output For each test case, print the\nanswer: the minimum total cost required to make the sum of weights paths from\nthe root to each leaf at most \n    S\n. Example Input 4 4 18 2 1 9 2 3 2 4 1 4\n1 1 2 3 20 2 1 8 1 3 1 7 2 5 50 1 3 100 1 1 5 10 2 2 3 123 2 5 4 55 1 2 100 1\n2 409 2 Output 0 0 11 6\n\n",
        "cf_contest_id": 1399,
        "cf_index": "E2",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dfs and similar",
            "greedy",
            "sortings",
            "trees",
            "two pointers"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4 18\r\n2 1 9 2\r\n3 2 4 1\r\n4 1 1 2\r\n3 20\r\n2 1 8 1\r\n3 1 7 2\r\n5 50\r\n1 3 100 1\r\n1 5 10 2\r\n2 3 123 2\r\n5 4 55 1\r\n2 100\r\n1 2 409 2\r\n",
                "0\r\n0\r\n11\r\n6\r\n"
            ]
        ],
        "private_cases": []
    }
]