[
    {
        "name": "A Preponderant Reunion",
        "description": "East or west, home is best. That's why family reunion, the indispensable\nnecessity of Lunar New Year celebration, is put in such a position. After the\nreunion dinner, Little Tommy plays a game with the family. Here is a concise\nintroduction to this game: There is a sequence of n non-negative integers p1,\np2, ..., pn in the beginning. It is ruled that each integer in this sequence\nshould be non-negative at any time. You can select two consecutive positive\nintegers in this sequence, pi and pi + 1 (1 \u2264 i < n), and then decrease them\nby their minimum (i. e. min(pi, pi + 1)), the cost of this operation is equal\nto min(pi, pi + 1). We call such operation as a descension. The game\nimmediately ends when there are no two consecutive positive integers. Your\ntask is to end the game so that the total cost of your operations is as small\nas possible. Obviously, every game ends after at most n - 1 descensions.\nPlease share your solution of this game with the lowest cost. Input The first\nline contains one integer n (1 \u2264 n \u2264 3\u00b710^5). The second line contains n\nspace-separated integers p1, p2, ..., pn (0 \u2264 pi \u2264 10^9, i = 1, 2, ..., n).\nOutput In the first line print one integer as the number of descensions m (0 \u2264\nm \u2264 n - 1). In the next m lines print the descensions chronologically. More\nprecisely, in each line of the next m lines print one integer i (1 \u2264 i < n)\nrepresenting a descension would operate on pi and pi + 1 such that all the\ndescensions could be utilized from top to bottom. If there are many possible\nsolutions to reach the minimal cost, print any of them. Examples Input 4 2 1 3\n1 Output 2 1 3 Input 5 2 2 1 3 1 Output 3 2 1 4 Note In the first sample, one\npossible best solution is , of which the cost is 1 + 1 = 2. In the second\nsample, one possible best solution is , of which the cost is 1 + 1 + 1 = 3.\n\n",
        "cf_contest_id": 933,
        "cf_index": "E",
        "cf_rating": 3200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dp"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2 1 3 1\r\n",
                "2\r\n1\r\n3\r\n"
            ],
            [
                "5\r\n2 2 1 3 1\r\n",
                "3\r\n2\r\n1\r\n4\r\n"
            ]
        ],
        "private_cases": [
            [
                "6\r\n1554 1623 1434 1709 2013 1666\r\n",
                "4\r\n2\r\n1\r\n4\r\n5\r\n"
            ],
            [
                "2\r\n0 2\r\n",
                "0\r\n"
            ],
            [
                "1\r\n8\r\n",
                "0\r\n"
            ],
            [
                "10\r\n97 32 59 4 8 0 0 0 0 0\r\n",
                "2\r\n1\r\n3\r\n"
            ],
            [
                "4\r\n0 513 131 22\r\n",
                "1\r\n2\r\n"
            ],
            [
                "15\r\n259 118 598 129 80 31 263 0 352 0 82 54 30 87 245\r\n",
                "6\r\n1\r\n3\r\n5\r\n11\r\n13\r\n14\r\n"
            ],
            [
                "12\r\n320 759 55 173 12 7 4 4 2 0 0 1\r\n",
                "6\r\n1\r\n2\r\n5\r\n4\r\n8\r\n7\r\n"
            ],
            [
                "52\r\n2608 0 0 0 0 130 0 0 0 0 1 0 72 0 2 0 0 0 0 0 0 0 0 0 289 0 0 0 5 0 0 0 313 0 0 0 6 15 0 0 0 0 0 12 0 0 0 0 0 385 1020 0\r\n",
                "2\r\n37\r\n50\r\n"
            ],
            [
                "44\r\n2 0 74 71 150 39 14 30 62 161 36 103 45 125 84 69 86 311 12 111 100 19 73 163 2 30 8 18 73 135 106 41 43 226 13 17 13 84 35 193 113 77 30 26\r\n",
                "26\r\n3\r\n6\r\n5\r\n8\r\n9\r\n10\r\n13\r\n14\r\n16\r\n17\r\n19\r\n20\r\n22\r\n23\r\n24\r\n26\r\n29\r\n30\r\n32\r\n33\r\n34\r\n36\r\n38\r\n41\r\n40\r\n43\r\n"
            ],
            [
                "63\r\n11622 2708 325 5971 1618 0 2 10 28 9 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\r\n",
                "6\r\n2\r\n1\r\n4\r\n7\r\n8\r\n9\r\n"
            ],
            [
                "7\r\n0 887044366 979166856 627428731 856462066 720624168 956041003\r\n",
                "3\r\n3\r\n2\r\n5\r\n"
            ],
            [
                "9\r\n913 316 0 469 56 672 281 392 251\r\n",
                "4\r\n1\r\n4\r\n7\r\n8\r\n"
            ],
            [
                "4\r\n4928 68 294 299\r\n",
                "2\r\n2\r\n3\r\n"
            ],
            [
                "10\r\n3422189 18452907 3383613 18491483 11940901 10451040 15200399 8160650 11618605 8253696\r\n",
                "6\r\n1\r\n2\r\n5\r\n4\r\n8\r\n9\r\n"
            ],
            [
                "10\r\n19167769 2685154 14824190 0 15005640 14856479 32541638 8219737 17012124 14469415\r\n",
                "4\r\n1\r\n5\r\n8\r\n9\r\n"
            ],
            [
                "10\r\n587529599 309920927 348715017 945660627 817737273 567856476 596222517 652676677 554327004 494649869\r\n",
                "6\r\n2\r\n3\r\n5\r\n4\r\n8\r\n7\r\n"
            ],
            [
                "10\r\n0 985302229 960079300 976219128 876231629 876102083 804640033 886011071 873304045 840902579\r\n",
                "5\r\n2\r\n5\r\n4\r\n8\r\n7\r\n"
            ],
            [
                "40\r\n0 424637328 15236273 10 110585 0 1760406 1345554 622419 0 13432379 0 0 2020730 0 13163877 205201 572702 6139010 2 8332204 0 2 0 0 0 0 9813 32770836 0 2041 11928 0 0 33876450 4119 0 1433 0 0\r\n",
                "9\r\n3\r\n2\r\n7\r\n17\r\n18\r\n19\r\n28\r\n31\r\n35\r\n"
            ]
        ]
    }
]