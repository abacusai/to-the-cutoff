[
    {
        "name": "Vasya and Big Integers",
        "description": "Vasya owns three big integers \u2014 \n    a, l, r\n. Let's define a partition of\n\n    x\n such a sequence of strings \n    s_1, s_2, \n    \u2026, s_k\n that \n    s_1 +\n    s_2 + \n    \u2026 + s_k = x\n, where \n    +\n is a concatanation of strings.\n\n    s_i\n is the \n    i\n-th element of the partition. For example, number\n\n    12345\n has the following partitions: [\"1\", \"2\", \"3\", \"4\", \"5\"], [\"123\",\n\"4\", \"5\"], [\"1\", \"2345\"], [\"12345\"] and lots of others. Let's call some\npartition of \n    a\n beautiful if each of its elements contains no leading\nzeros. Vasya want to know the number of beautiful partitions of number\n\n    a\n, which has each of \n    s_i\n satisfy the condition \n    l \n    \u2264 s_i\n    \n    \u2264 r\n. Note that the comparison is the integer comparison, not the string\none. Help Vasya to count the amount of partitions of number \n    a\n such that\nthey match all the given requirements. The result can be rather big, so print\nit modulo \n    998244353\n. Input The first line contains a single integer\n\n    a\u00a0(1 \n    \u2264 a \n    \u2264 10^1000000)\n. The second line contains a single\ninteger \n    l\u00a0(0 \n    \u2264 l \n    \u2264 10^1000000)\n. The third line contains a\nsingle integer \n    r\u00a0(0 \n    \u2264 r \n    \u2264 10^1000000)\n. It is guaranteed that\n\n    l \n    \u2264 r\n. It is also guaranteed that numbers \n    a, l, r\n contain no\nleading zeros. Output Print a single integer \u2014 the amount of partitions of\nnumber \n    a\n such that they match all the given requirements modulo\n\n    998244353\n. Examples Input 135 1 15 Output 2 Input 10000 0 9 Output 1\nNote In the first test case, there are two good partitions \n    13+5\n and\n\n    1+3+5\n. In the second test case, there is one good partition\n\n    1+0+0+0+0\n.\n\n",
        "cf_contest_id": 1051,
        "cf_index": "E",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dp",
            "hashing",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "135\r\n1\r\n15\r\n",
                "2"
            ],
            [
                "10000\r\n0\r\n9\r\n",
                "1"
            ]
        ],
        "private_cases": [
            [
                "7460991283\r\n4\r\n61\r\n",
                "0"
            ],
            [
                "8698272232067125804692796793285996652907461532074057999849092982935510140661249431760679611642931478\r\n6\r\n68270\r\n",
                "336970248"
            ],
            [
                "1254298816872758107814873768638894851215334772406487549640220733524354123084977151799244616404710412\r\n35\r\n9634401298\r\n",
                "254154042"
            ],
            [
                "123\r\n0\r\n0\r\n",
                "0"
            ],
            [
                "12212222221212222221221221222222121222222122\r\n22222111112222222222221221222222121222222122\r\n22222111112222222222221221222222121222222122\r\n",
                "0"
            ]
        ]
    }
]