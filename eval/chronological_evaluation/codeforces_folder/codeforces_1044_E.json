[
    {
        "name": "Grid Sort",
        "description": "You are given an \n    n \n    \u00d7 m\n grid. Each grid cell is filled with a\nunique integer from \n    1\n to \n    nm\n so that each integer appears exactly\nonce. In one operation, you can choose an arbitrary cycle of the grid and move\nall integers along that cycle one space over. Here, a cycle is any sequence\nthat satisfies the following conditions: There are at least four squares. Each\nsquare appears at most once. Every pair of adjacent squares, and also the\nfirst and last squares, share an edge. For example, if we had the following\ngrid: We can choose an arbitrary cycle like this one: To get the following\ngrid: In this particular case, the chosen cycle can be represented as the\nsequence \n    [1, 2, 3, 6, 5, 8, 7, 4]\n, the numbers are in the direction that\nwe want to rotate them in. Find any sequence of operations to sort the grid so\nthat the array created by concatenating the rows from the highest to the\nlowest is sorted (look at the first picture above). Note you do not need to\nminimize number of operations or sum of cycle lengths. The only constraint is\nthat the sum of all cycles lengths must not be greater than \n    10^5\n. We can\nshow that an answer always exists under the given constraints. Output any\nvalid sequence of moves that will sort the grid. Input The first line contains\ntwo integers \n    n\n and \n    m\n (\n    3 \n    \u2264 n,m \n    \u2264 20\n) \u2014 the\ndimensions of the grid. Each of the next \n    n\n lines contains \n    m\n\nintegers \n    x_i,1, x_i,2, \n    \u2026, x_i, m\n (\n    1 \n    \u2264 x_i,j\n    \u2264 nm\n), denoting the values of the block in row \n    i\n and column\n\n    j\n. It is guaranteed that all \n    x_i,j\n are distinct. Output First,\nprint a single integer \n    k\n, the number of operations (\n    k \n    \u2265 0\n).\nOn each of the next \n    k\n lines, print a cycle as follows: \n    \n\n    s\n     y_1\n    y_2\n     \n    \u2026\n     y_s\n\n    \n Here, \n    s\n is the number of blocks to move\n(\n    s \n    \u2265 4\n). Here we have block \n    y_1\n moving to where block\n\n    y_2\n is, block \n    y_2\n moving to where block \n    y_3\n is, and so on\nwith block \n    y_s\n moving to where block \n    y_1\n is. The sum of \n    s\n\nover all operations must be at most \n    10^5\n. Examples Input 3 3 4 1 2 7 6 3\n8 5 9 Output 1 8 1 4 7 8 5 6 3 2 Input 3 5 1 2 3 5 10 11 6 4 14 9 12 7 8 13 15\nOutput 3 4 4 14 13 8 4 5 10 9 4 4 12 7 6 11 Note The first sample is the case\nin the statement. Here, we can use the cycle in reverse order to sort the\ngrid.\n\n",
        "cf_contest_id": 1044,
        "cf_index": "E",
        "cf_rating": 3100,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\n4 1 2\r\n7 6 3\r\n8 5 9\r\n",
                "9\r\n4 1 4 7 6 \r\n4 2 6 7 3 \r\n4 5 6 7 9 \r\n4 7 9 5 6 \r\n4 7 8 4 9 \r\n6 6 5 4 8 7 9 \r\n4 8 7 5 4 \r\n4 8 9 6 7 \r\n6 4 5 6 9 8 7 \r\n"
            ],
            [
                "3 5\r\n1 2 3 5 10\r\n11 6 4 14 9\r\n12 7 8 13 15\r\n",
                "3\r\n4 4 14 13 8 \r\n4 4 5 10 9 \r\n4 6 11 12 7 \r\n"
            ]
        ],
        "private_cases": [
            [
                "3 3\r\n1 2 3\r\n4 5 6\r\n7 8 9\r\n",
                "0\r\n"
            ],
            [
                "3 3\r\n6 7 8\r\n1 9 4\r\n2 3 5\r\n",
                "17\r\n4 1 6 7 9 \r\n4 2 3 7 9 \r\n4 2 3 4 5 \r\n4 2 6 8 3 \r\n4 3 8 4 5 \r\n4 6 3 5 2 \r\n4 6 8 4 3 \r\n6 2 5 4 8 6 3 \r\n4 4 9 7 5 \r\n4 4 9 7 5 \r\n4 5 7 9 4 \r\n4 5 8 6 7 \r\n6 4 9 6 8 5 7 \r\n4 5 9 6 8 \r\n4 6 9 5 8 \r\n4 6 3 2 9 \r\n6 8 5 2 3 6 9 \r\n"
            ],
            [
                "3 3\r\n7 1 2\r\n3 6 4\r\n9 5 8\r\n",
                "12\r\n4 1 7 3 6 \r\n4 2 6 3 4 \r\n4 4 3 6 2 \r\n4 4 8 5 3 \r\n6 2 6 5 8 4 3 \r\n4 4 6 5 8 \r\n4 4 7 9 6 \r\n4 5 9 6 8 \r\n4 5 9 6 8 \r\n4 6 9 5 8 \r\n4 6 3 2 9 \r\n6 8 5 2 3 6 9 \r\n"
            ],
            [
                "3 3\r\n1 2 3\r\n4 5 6\r\n7 9 8\r\n",
                "3\r\n4 8 9 5 6 \r\n4 8 7 4 9 \r\n6 6 5 4 7 8 9 \r\n"
            ],
            [
                "3 3\r\n1 2 3\r\n4 5 9\r\n7 8 6\r\n",
                "3\r\n4 6 9 5 8 \r\n4 6 3 2 9 \r\n6 8 5 2 3 6 9 \r\n"
            ],
            [
                "3 3\r\n2 1 3\r\n4 5 6\r\n7 9 8\r\n",
                "24\r\n4 1 2 4 5 \r\n4 2 4 9 7 \r\n4 2 5 3 6 \r\n4 5 3 6 2 \r\n4 5 8 4 3 \r\n6 2 6 4 8 5 3 \r\n4 4 9 7 6 \r\n4 4 9 7 6 \r\n4 5 9 7 8 \r\n4 6 9 5 4 \r\n4 6 7 8 9 \r\n6 4 5 8 7 6 9 \r\n4 7 6 5 8 \r\n4 7 9 4 6 \r\n6 8 5 4 9 7 6 \r\n4 6 8 5 7 \r\n4 6 3 2 8 \r\n6 7 5 2 3 6 8 \r\n4 9 7 5 4 \r\n4 9 8 6 7 \r\n6 4 5 6 8 9 7 \r\n4 8 9 5 6 \r\n4 8 7 4 9 \r\n6 6 5 4 7 8 9 \r\n"
            ]
        ]
    }
]