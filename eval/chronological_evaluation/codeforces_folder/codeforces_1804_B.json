[
    {
        "name": "Vaccination",
        "description": "Ethan runs a vaccination station to help people combat the seasonal flu. He\nanalyses the historical data in order to develop an optimal strategy for\nvaccine usage. Consider there are \n    n\n patients coming to the station on a\nparticular day. The \n    i\n-th patient comes at the moment \n    t_i\n. We know\nthat each of these patients can be asked to wait for no more than \n    w\n time\nmoments. That means the \n    i\n-th patient can get vaccine at moments \n    t_i,\n    t_i + 1, \n    \u2026, t_i + w\n. Vaccines come in packs, each pack consists of\n\n    k\n doses. Each patient needs exactly one dose. Packs are stored in a\nspecial fridge. After a pack is taken out of the fridge and opened, it can no\nlonger be put back. The lifetime of the vaccine outside the fridge is \n    d\n\nmoments of time. Thus, if the pack was taken out of the fridge and opened at\nmoment \n    x\n, its doses can be used to vaccinate patients at moments \n    x, x\n    + 1, \n    \u2026, x + d\n. At moment \n    x + d + 1\n all the remaining unused\ndoses of this pack are thrown away. Assume that the vaccination station has\nenough staff to conduct an arbitrary number of operations at every moment of\ntime. What is the minimum number of vaccine packs required to vaccinate all\n\n    n\n patients? Input The first line of the input contains the number of\ntest cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n). Then follow \n    t\n\ndescriptions of the test cases. The first line of each test case contains four\nintegers \n    n\n, \n    k\n, \n    d\n and \n    w\n (\n    1 \n    \u2264 n, k \n    \u2264 2\n    \n    \u00b7 10^5\n, \n    0 \n    \u2264 d, w \n    \u2264 10^6\n). They are the number of\npatients, the number of doses per vaccine pack, the number of moments of time\nthe vaccine can live outside the fridge, and the number of moments of time\neach of the patients can wait, respectively. The second line of each test case\ncontains a non-decreasing sequence \n    t_1, t_2, \n    \u2026, t_n\n (\n    0 \n    \u2264\n    t_1 \n    \u2264 t_2 \n    \u2264\n    \u2026\n    \u2264 t_n \n    \u2264 10^6\n). The \n    i\n-th\nelement of this sequence is the moment when the \n    i\n-th patient comes to\nthe vaccination station. It is guaranteed that the sum of \n    n\n over all\ntest cases won't exceed \n    2 \n    \u00b7 10^5\n. Output Output one integer, the\nminimum number of vaccine packs required to vaccinate all \n    n\n patients.\nExample Input 5 6 3 5 3 1 2 3 10 11 18 6 4 0 0 3 3 3 3 3 4 9 10 2 2 0 1 2 3 4\n5 6 7 8 3 10 3 6 10 20 30 5 5 4 4 0 2 4 6 8 Output 2 3 2 3 1 Note In the first\nexample, the first pack can be opened at moment \n    1\n to vaccinate patient\n\n    1\n. The vaccine is durable enough to be used at moments \n    2\n and\n\n    3\n for patients \n    2\n and \n    3\n, respectively. Then the staff needs\nto ask patients \n    4\n and \n    5\n to wait for moment \n    13\n. At moment\n\n    13\n the staff opens the second vaccine pack and serves patients \n    4\n\nand \n    5\n. Finally, the last patient comes at moment \n    18\n and\nimmediately gets the last dose of the second pack while it is still fine. In\nthe second example, the vaccine should be used exactly at the moment it is\ntaken out of the fridge. Moreover, all the patients want to be served at\nexactly the same moment they come. That means the staff needs to open two\npacks at moment \n    3\n and use five doses on patients \n    1\n, \n    2\n,\n\n    3\n, \n    4\n, and \n    5\n. There will be three doses left ouf of these two\npacks but they can't be used for patient \n    6\n. When patient \n    6\n comes\nat moment \n    4\n the staff needs to open a new pack just to use only one dose\nout of it.\n\n",
        "cf_contest_id": 1804,
        "cf_index": "B",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5\r\n6 3 5 3\r\n1 2 3 10 11 18\r\n6 4 0 0\r\n3 3 3 3 3 4\r\n9 10 2 2\r\n0 1 2 3 4 5 6 7 8\r\n3 10 3 6\r\n10 20 30\r\n5 5 4 4\r\n0 2 4 6 8\r\n",
                "2\r\n3\r\n2\r\n3\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]