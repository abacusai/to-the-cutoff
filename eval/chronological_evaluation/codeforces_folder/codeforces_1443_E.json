[
    {
        "name": "Long Permutation",
        "description": "A permutation is a sequence of integers from \n    1\n to \n    n\n of length\n\n    n\n containing each number exactly once. For example, \n    [1]\n, \n    [4, 3,\n    5, 1, 2]\n, \n    [3, 2, 1]\n \u2014 are permutations, and \n    [1, 1]\n, \n    [4, 3,\n    1]\n, \n    [2, 3, 4]\n \u2014 no. Permutation \n    a\n is lexicographically smaller\nthan permutation \n    b\n (they have the same length \n    n\n), if in the first\nindex \n    i\n in which they differ, \n    a[i] < b[i]\n. For example, the\npermutation \n    [1, 3, 2, 4]\n is lexicographically smaller than the\npermutation \n    [1, 3, 4, 2]\n, because the first two elements are equal, and\nthe third element in the first permutation is smaller than in the second. The\nnext permutation for a permutation \n    a\n of length \n    n\n \u2014 is the\nlexicographically smallest permutation \n    b\n of length \n    n\n that\nlexicographically larger than \n    a\n. For example: for permutation \n    [2, 1,\n    4, 3]\n the next permutation is \n    [2, 3, 1, 4]\n; for permutation \n    [1, 2,\n    3]\n the next permutation is \n    [1, 3, 2]\n; for permutation \n    [2, 1]\n\nnext permutation does not exist. You are given the number \n    n\n \u2014 the length\nof the initial permutation. The initial permutation has the form \n    a = [1, 2,\n    \n    \u2026, n]\n. In other words, \n    a[i] = i\n (\n    1 \n    \u2264 i \n    \u2264 n\n). You\nneed to process \n    q\n queries of two types: \n    1\n \n    l\n \n    r\n: query\nfor the sum of all elements on the segment \n    [l, r]\n. More formally, you\nneed to find \n    a[l] + a[l + 1] + \n    \u2026 + a[r]\n. \n    2\n \n    x\n: \n    x\n\ntimes replace the current permutation with the next permutation. For example,\nif \n    x=2\n and the current permutation has the form \n    [1, 3, 4, 2]\n, then\nwe should perform such a chain of replacements \n    [1, 3, 4, 2] \n    \u2192\n    [1, 4, 2, 3] \n    \u2192 [1, 4, 3, 2]\n. For each query of the \n    1\n-st\ntype output the required sum. Input The first line contains two integers\n\n    n\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) and \n    q\n (\n    1 \n    \u2264 q \n    \u2264\n    2 \n    \u00b7 10^5\n), where \n    n\n \u2014 the length of the initial permutation, and\n\n    q\n \u2014 the number of queries. The next \n    q\n lines contain a single query\nof the \n    1\n-st or \n    2\n-nd type. The \n    1\n-st type query consists of\nthree integers \n    1\n, \n    l\n and \n    r\n \n    (1 \n    \u2264 l \n    \u2264 r \n    \u2264 n)\n,\nthe \n    2\n-nd type query consists of two integers \n    2\n and \n    x\n \n    (1\n    \n    \u2264 x \n    \u2264 10^5)\n. It is guaranteed that all requests of the \n    2\n-nd\ntype are possible to process. Output For each query of the \n    1\n-st type,\noutput on a separate line one integer \u2014 the required sum. Example Input 4 4 1\n2 4 2 3 1 1 2 1 3 4 Output 9 4 6 Note Initially, the permutation has the form\n\n    [1, 2, 3, 4]\n. Queries processing is as follows: \n    2 + 3 + 4 = 9\n;\n\n    [1, 2, 3, 4] \n    \u2192 [1, 2, 4, 3] \n    \u2192 [1, 3, 2, 4]\n    \n    \u2192 [1, 3, 4, 2]\n; \n    1 + 3 = 4\n; \n    4 + 2 = 6\n\n\n",
        "cf_contest_id": 1443,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "math",
            "two pointers"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 4\r\n1 2 4\r\n2 3\r\n1 1 2\r\n1 3 4\r\n",
                "9\r\n4\r\n6\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 3\r\n1 1 2\r\n2 1\r\n1 2 2\r\n",
                "3\r\n1\r\n"
            ]
        ]
    }
]