[
    {
        "name": "Nastia Plays with a Tree",
        "description": "Nastia has an unweighted tree with \n    n\n vertices and wants to play with it!\nThe girl will perform the following operation with her tree, as long as she\nneeds: Remove any existing edge. Add an edge between any pair of vertices.\nWhat is the minimum number of operations Nastia needs to get a bamboo from a\ntree? A bamboo is a tree in which no node has a degree greater than \n    2\n.\nInput The first line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    10\n     000\n) \u2014 the number of test cases. The first line of each test case\ncontains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the number of\nvertices in the tree. Next \n    n - 1\n lines of each test cases describe the\nedges of the tree in form \n    a_i\n, \n    b_i\n (\n    1 \n    \u2264 a_i, b_i \n    \u2264\n    n\n, \n    a_i \n    \u2260 b_i\n). It's guaranteed the given graph is a tree and the\nsum of \n    n\n in one test doesn't exceed \n    2 \n    \u00b7 10^5\n. Output For\neach test case in the first line print a single integer \n    k\n \u2014 the minimum\nnumber of operations required to obtain a bamboo from the initial tree. In the\nnext \n    k\n lines print \n    4\n integers \n    x_1\n, \n    y_1\n, \n    x_2\n,\n\n    y_2\n (\n    1 \n    \u2264 x_1, y_1, x_2, y_2\n    \u2264 n\n, \n    x_1 \n    \u2260 y_1\n,\n\n    x_2 \n    \u2260 y_2\n) \u2014 this way you remove the edge \n    (x_1, y_1)\n and add\nan undirected edge \n    (x_2, y_2)\n. Note that the edge \n    (x_1, y_1)\n must\nbe present in the graph at the moment of removing. Example Input 2 7 1 2 1 3 2\n4 2 5 3 6 3 7 4 1 2 1 3 3 4 Output 2 2 5 6 7 3 6 4 5 0 Note Note the graph can\nbe unconnected after a certain operation. Consider the first test case of the\nexample: The red edges are removed, and the green ones are added.\n\n",
        "cf_contest_id": 1521,
        "cf_index": "D",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "greedy",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n7\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n3 7\r\n4\r\n1 2\r\n1 3\r\n3 4\r\n",
                "2\r\n1 3 4 6\r\n4 2 7 1\r\n0\r\n"
            ]
        ],
        "private_cases": []
    }
]