[
    {
        "name": "Bear and Displayed Friends",
        "description": "Limak is a little polar bear. He loves connecting with other bears via social\nnetworks. He has n friends and his relation with the i-th of them is described\nby a unique integer ti. The bigger this value is, the better the friendship\nis. No two friends have the same value ti. Spring is starting and the Winter\nsleep is over for bears. Limak has just woken up and logged in. All his\nfriends still sleep and thus none of them is online. Some (maybe all) of them\nwill appear online in the next hours, one at a time. The system displays\nfriends who are online. On the screen there is space to display at most k\nfriends. If there are more than k friends online then the system displays only\nk best of them \u2014 those with biggest ti. Your task is to handle queries of two\ntypes: \"1 id\" \u2014 Friend id becomes online. It's guaranteed that he wasn't\nonline before. \"2 id\" \u2014 Check whether friend id is displayed by the system.\nPrint \"YES\" or \"NO\" in a separate line. Are you able to help Limak and answer\nall queries of the second type? Input The first line contains three integers\nn, k and q (1 \u2264 n, q \u2264 150 000, 1 \u2264 k \u2264 min(6, n)) \u2014 the number of friends,\nthe maximum number of displayed online friends and the number of queries,\nrespectively. The second line contains n integers t1, t2, ..., tn (1 \u2264 ti \u2264\n10^9) where ti describes how good is Limak's relation with the i-th friend.\nThe i-th of the following q lines contains two integers typei and idi (1 \u2264\ntypei \u2264 2, 1 \u2264 idi \u2264 n) \u2014 the i-th query. If typei = 1 then a friend idi\nbecomes online. If typei = 2 then you should check whether a friend idi is\ndisplayed. It's guaranteed that no two queries of the first type will have the\nsame idi becuase one friend can't become online twice. Also, it's guaranteed\nthat at least one query will be of the second type (typei = 2) so the output\nwon't be empty. Output For each query of the second type print one line with\nthe answer \u2014 \"YES\" (without quotes) if the given friend is displayed and \"NO\"\n(without quotes) otherwise. Examples Input 4 2 8 300 950 500 200 1 3 2 4 2 3 1\n1 1 2 2 1 2 2 2 3 Output NO YES NO YES YES Input 6 3 9 50 20 51 17 99 24 1 3 1\n4 1 5 1 2 2 4 2 2 1 1 2 4 2 3 Output NO YES NO YES Note In the first sample,\nLimak has 4 friends who all sleep initially. At first, the system displays\nnobody because nobody is online. There are the following 8 queries: \"1 3\" \u2014\nFriend 3 becomes online. \"2 4\" \u2014 We should check if friend 4 is displayed. He\nisn't even online and thus we print \"NO\". \"2 3\" \u2014 We should check if friend 3\nis displayed. Right now he is the only friend online and the system displays\nhim. We should print \"YES\". \"1 1\" \u2014 Friend 1 becomes online. The system now\ndisplays both friend 1 and friend 3. \"1 2\" \u2014 Friend 2 becomes online. There\nare 3 friends online now but we were given k = 2 so only two friends can be\ndisplayed. Limak has worse relation with friend 1 than with other two online\nfriends (t1 < t2, t3) so friend 1 won't be displayed \"2 1\" \u2014 Print \"NO\". \"2 2\"\n\u2014 Print \"YES\". \"2 3\" \u2014 Print \"YES\".\n\n",
        "cf_contest_id": 639,
        "cf_index": "A",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 2 8\r\n300 950 500 200\r\n1 3\r\n2 4\r\n2 3\r\n1 1\r\n1 2\r\n2 1\r\n2 2\r\n2 3\r\n",
                "NO\r\nYES\r\nNO\r\nYES\r\nYES\r\n\r\n"
            ],
            [
                "6 3 9\r\n50 20 51 17 99 24\r\n1 3\r\n1 4\r\n1 5\r\n1 2\r\n2 4\r\n2 2\r\n1 1\r\n2 4\r\n2 3\r\n",
                "NO\r\nYES\r\nNO\r\nYES\r\n\r\n"
            ]
        ],
        "private_cases": [
            [
                "6 3 10\r\n62417580 78150524 410053501 582708235 630200761 760672946\r\n2 2\r\n1 5\r\n1 2\r\n1 4\r\n2 4\r\n2 1\r\n2 1\r\n1 6\r\n2 5\r\n2 6\r\n",
                "NO\r\nYES\r\nNO\r\nNO\r\nYES\r\nYES\r\n\r\n"
            ],
            [
                "20 2 15\r\n12698951 55128070 116962690 156763505 188535242 194018601 269939893 428710623 442819431 483000923 516768937 552903993 633087286 656092270 671535141 714291344 717660646 846508634 879748146 937368929\r\n2 7\r\n1 2\r\n2 4\r\n1 19\r\n1 12\r\n1 5\r\n2 18\r\n2 11\r\n1 16\r\n2 1\r\n2 3\r\n2 19\r\n1 17\r\n2 9\r\n2 6\r\n",
                "NO\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nNO\r\nNO\r\n\r\n"
            ],
            [
                "1 1 1\r\n1000000000\r\n2 1\r\n",
                "NO\r\n\r\n"
            ]
        ]
    }
]