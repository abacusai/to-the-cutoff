[
    {
        "name": "Tree Reconstruction",
        "description": "Monocarp has drawn a tree (an undirected connected acyclic graph) and then has\ngiven each vertex an index. All indices are distinct numbers from \n    1\n to\n\n    n\n. For every edge \n    e\n of this tree, Monocarp has written two\nnumbers: the maximum indices of the vertices of the two components formed if\nthe edge \n    e\n (and only this edge) is erased from the tree. Monocarp has\ngiven you a list of \n    n - 1\n pairs of numbers. He wants you to provide an\nexample of a tree that will produce the said list if this tree exists. If such\ntree does not exist, say so. Input The first line contains one integer \n    n\n\n(\n    2 \n    \u2264 n \n    \u2264 1\n     000\n) \u2014 the number of vertices in the tree. Each of\nthe next \n    n-1\n lines contains two integers \n    a_i\n and \n    b_i\n each\n(\n    1 \n    \u2264 a_i < b_i \n    \u2264 n\n) \u2014 the maximal indices of vertices in the\ncomponents formed if the \n    i\n-th edge is removed. Output If there is no\nsuch tree that can produce the given list of pairs, print \"NO\" (without\nquotes). Otherwise print \"YES\" (without quotes) in the first line and the\nedges of the tree in the next \n    n - 1\n lines. Each of the last \n    n - 1\n\nlines should contain two integers \n    x_i\n and \n    y_i\n (\n    1 \n    \u2264 x_i, y_i\n    \n    \u2264 n\n) \u2014 vertices connected by an edge. Note: The numeration of edges\ndoesn't matter for this task. Your solution will be considered correct if your\ntree produces the same pairs as given in the input file (possibly reordered).\nThat means that you can print the edges of the tree you reconstructed in any\norder. Examples Input 4 3 4 1 4 3 4 Output YES 1 3 3 2 2 4 Input 3 1 3 1 3\nOutput NO Input 3 1 2 2 3 Output NO Note Possible tree from the first example.\nDotted lines show edges you need to remove to get appropriate pairs.\n\n",
        "cf_contest_id": 1041,
        "cf_index": "E",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "graphs",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3 4\r\n1 4\r\n3 4\r\n",
                "YES\r\n4 2\r\n2 3\r\n3 1\r\n"
            ],
            [
                "3\r\n1 3\r\n1 3\r\n",
                "NO"
            ],
            [
                "3\r\n1 2\r\n2 3\r\n",
                "NO"
            ]
        ],
        "private_cases": [
            [
                "15\r\n10 15\r\n12 15\r\n6 15\r\n8 15\r\n2 15\r\n3 15\r\n10 15\r\n13 15\r\n5 15\r\n7 15\r\n11 15\r\n4 14\r\n1 15\r\n14 15\r\n",
                "NO"
            ],
            [
                "15\r\n9 15\r\n6 15\r\n12 15\r\n3 14\r\n14 15\r\n11 15\r\n6 15\r\n7 15\r\n10 15\r\n4 15\r\n1 15\r\n13 15\r\n2 15\r\n9 15\r\n",
                "NO"
            ],
            [
                "15\r\n13 15\r\n9 15\r\n6 15\r\n14 15\r\n4 15\r\n7 15\r\n11 15\r\n5 15\r\n8 15\r\n2 15\r\n12 15\r\n4 15\r\n12 14\r\n1 15\r\n",
                "NO"
            ],
            [
                "2\r\n1 2\r\n",
                "YES\r\n2 1\r\n"
            ]
        ]
    }
]