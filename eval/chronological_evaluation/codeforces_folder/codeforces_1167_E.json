[
    {
        "name": "Range Deleting",
        "description": "You are given an array consisting of \n    n\n integers \n    a_1, a_2, \n    \u2026 ,\n    a_n\n and an integer \n    x\n. It is guaranteed that for every \n    i\n, \n    1\n    \n    \u2264 a_i \n    \u2264 x\n. Let's denote a function \n    f(l, r)\n which erases all\nvalues such that \n    l \n    \u2264 a_i \n    \u2264 r\n from the array \n    a\n and returns\nthe resulting array. For example, if \n    a = [4, 1, 1, 4, 5, 2, 4, 3]\n, then\n\n    f(2, 4) = [1, 1, 5]\n. Your task is to calculate the number of pairs\n\n    (l, r)\n such that \n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 x\n and \n    f(l, r)\n is\nsorted in non-descending order. Note that the empty array is also considered\nsorted. Input The first line contains two integers \n    n\n and \n    x\n (\n    1\n    \n    \u2264 n, x \n    \u2264 10^6\n) \u2014 the length of array \n    a\n and the upper limit\nfor its elements, respectively. The second line contains \n    n\n integers\n\n    a_1, a_2, \n    \u2026 a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 x\n). Output Print the\nnumber of pairs \n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 x\n such that \n    f(l, r)\n is\nsorted in non-descending order. Examples Input 3 3 2 3 1 Output 4 Input 7 4 1\n3 1 2 2 4 3 Output 6 Note In the first test case correct pairs are \n    (1,\n    1)\n, \n    (1, 2)\n, \n    (1, 3)\n and \n    (2, 3)\n. In the second test case\ncorrect pairs are \n    (1, 3)\n, \n    (1, 4)\n, \n    (2, 3)\n, \n    (2, 4)\n,\n\n    (3, 3)\n and \n    (3, 4)\n.\n\n",
        "cf_contest_id": 1167,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "combinatorics",
            "data structures",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\n2 3 1\r\n",
                "4\r\n"
            ],
            [
                "7 4\r\n1 3 1 2 2 4 3\r\n",
                "6\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 3\r\n3 1 3\r\n",
                "5\r\n"
            ],
            [
                "8 8\r\n6 2 1 8 5 7 3 4\r\n",
                "4\r\n"
            ],
            [
                "10 5\r\n5 1 2 2 3 3 4 4 5 1\r\n",
                "3\r\n"
            ],
            [
                "100 100\r\n98 52 63 2 18 96 31 58 84 40 41 45 66 100 46 71 26 48 81 20 73 91 68 76 13 93 17 29 64 95 79 21 55 75 19 85 54 51 89 78 15 87 43 59 36 1 90 35 65 56 62 28 86 5 82 49 3 99 33 9 92 32 74 69 27 22 77 16 44 94 34 6 57 70 23 12 61 25 8 11 67 47 83 88 10 14 30 7 97 60 42 37 24 38 53 50 4 80 72 39\r\n",
                "3\r\n"
            ],
            [
                "10 10\r\n5 1 6 2 8 3 4 10 9 7\r\n",
                "10\r\n"
            ],
            [
                "10 1000000\r\n404504 367531 741030 998953 180343 781888 161191 855804 689526 976695\r\n",
                "3776788742\r\n"
            ],
            [
                "4 7\r\n3 6 2 4\r\n",
                "10\r\n"
            ],
            [
                "4 6\r\n1 2 2 1\r\n",
                "11\r\n"
            ],
            [
                "2 3\r\n1 1\r\n",
                "6\r\n"
            ],
            [
                "10 30000\r\n4045 3675 7410 9989 1803 7818 1611 8558 6895 9766\r\n",
                "36440889\r\n"
            ],
            [
                "2 3\r\n3 2\r\n",
                "5\r\n"
            ],
            [
                "2 18\r\n7 13\r\n",
                "171\r\n"
            ],
            [
                "9 8\r\n6 1 7 4 3 4 1 8 3\r\n",
                "9\r\n"
            ],
            [
                "4 4\r\n3 2 2 3\r\n",
                "8\r\n"
            ],
            [
                "5 3\r\n2 1 2 2 2\r\n",
                "5\r\n"
            ],
            [
                "2 20\r\n1 8\r\n",
                "210\r\n"
            ],
            [
                "1 1\r\n1\r\n",
                "1\r\n"
            ]
        ]
    }
]