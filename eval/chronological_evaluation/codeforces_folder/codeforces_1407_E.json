[
    {
        "name": "Egor in the Republic of Dagestan",
        "description": "Egor is a famous Russian singer, rapper, actor and blogger, and finally he\ndecided to give a concert in the sunny Republic of Dagestan. There are \n    n\n\ncities in the republic, some of them are connected by \n    m\n directed roads\nwithout any additional conditions. In other words, road system of Dagestan\nrepresents an arbitrary directed graph. Egor will arrive to the city \n    1\n,\ntravel to the city \n    n\n by roads along some path, give a concert and fly\naway. As any famous artist, Egor has lots of haters and too annoying fans, so\nhe can travel only by safe roads. There are two types of the roads in\nDagestan, black and white: black roads are safe at night only, and white roads\n\u2014 in the morning. Before the trip Egor's manager's going to make a schedule:\nfor each city he'll specify it's color, black or white, and then if during the\ntrip they visit some city, the only time they can leave it is determined by\nthe city's color: night, if it's black, and morning, if it's white. After\ncreating the schedule Egor chooses an available path from \n    1\n to \n    n\n,\nand for security reasons it has to be the shortest possible. Egor's manager\nlikes Dagestan very much and wants to stay here as long as possible, so he\nasks you to make such schedule that there would be no path from \n    1\n to\n\n    n\n or the shortest path's length would be greatest possible. A path is\none city or a sequence of roads such that for every road (excluding the first\none) the city this road goes from is equal to the city previous road goes\ninto. Egor can move only along paths consisting of safe roads only. The path\nlength is equal to the number of roads in it. The shortest path in a graph is\na path with smallest length. Input The first line contains two integers\n\n    n\n, \n    m\n (\n    1 \n    \u2264 n \n    \u2264 500000\n, \n    0 \n    \u2264 m \n    \u2264\n    500000\n) \u2014 the number of cities and the number of roads. The \n    i\n-th of\nnext \n    m\n lines contains three integers \u2014 \n    u_i\n, \n    v_i\n and\n\n    t_i\n (\n    1 \n    \u2264 u_i, v_i \n    \u2264 n\n, \n    t_i \n    \u2208\n    \n    0, 1\n) \u2014\nnumbers of cities connected by road and its type, respectively (\n    0\n \u2014\nnight road, \n    1\n \u2014 morning road). Output In the first line output the\nlength of the desired path (or \n    -1\n, if it's possible to choose such\nschedule that there's no path from \n    1\n to \n    n\n). In the second line\noutput the desired schedule \u2014 a string of \n    n\n digits, where \n    i\n-th\ndigit is \n    0\n, if the \n    i\n-th city is a night one, and \n    1\n if it's a\nmorning one. If there are multiple answers, print any. Examples Input 3 4 1 2\n0 1 3 1 2 3 0 2 3 1 Output 2 011 Input 4 8 1 1 0 1 3 0 1 3 1 3 2 0 2 1 0 3 4 1\n2 4 0 2 4 1 Output 3 1101 Input 5 10 1 2 0 1 3 1 1 4 0 2 3 0 2 3 1 2 5 0 3 4 0\n3 4 1 4 2 1 4 5 0 Output -1 11111 Note For the first sample, if we paint city\n\n    1\n white, the shortest path is \n    1 \n    \u2192 3\n. Otherwise, it's\n\n    1 \n    \u2192 2 \n    \u2192 3\n regardless of other cities' colors.\nFor the second sample, we should paint city \n    3\n black, and there are both\nblack and white roads going from \n    2\n to \n    4\n. Note that there can be a\nroad connecting a city with itself.\n\n",
        "cf_contest_id": 1407,
        "cf_index": "E",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "graphs",
            "greedy",
            "shortest paths"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 4\r\n1 2 0\r\n1 3 1\r\n2 3 0\r\n2 3 1\r\n",
                "2\r\n011\r\n"
            ],
            [
                "4 8\r\n1 1 0\r\n1 3 0\r\n1 3 1\r\n3 2 0\r\n2 1 0\r\n3 4 1\r\n2 4 0\r\n2 4 1\r\n",
                "3\r\n1101\r\n"
            ],
            [
                "5 10\r\n1 2 0\r\n1 3 1\r\n1 4 0\r\n2 3 0\r\n2 3 1\r\n2 5 0\r\n3 4 0\r\n3 4 1\r\n4 2 1\r\n4 5 0\r\n",
                "-1\r\n11111\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 40\r\n9 9 1\r\n4 10 0\r\n4 1 1\r\n6 4 1\r\n9 9 1\r\n6 4 1\r\n2 7 1\r\n3 7 1\r\n5 9 1\r\n1 9 0\r\n9 5 1\r\n1 3 0\r\n7 1 1\r\n5 6 1\r\n3 3 0\r\n9 5 0\r\n6 1 1\r\n6 6 0\r\n1 7 0\r\n3 9 0\r\n5 8 1\r\n2 8 1\r\n2 4 0\r\n10 8 1\r\n10 4 1\r\n2 1 0\r\n1 6 1\r\n1 2 0\r\n7 1 0\r\n9 9 0\r\n7 4 1\r\n7 7 1\r\n2 5 1\r\n9 9 1\r\n5 10 0\r\n8 5 0\r\n10 10 0\r\n7 1 0\r\n8 7 0\r\n8 1 1\r\n",
                "-1\r\n1111111111\r\n"
            ],
            [
                "20 40\r\n2 6 1\r\n17 6 1\r\n1 15 0\r\n7 5 1\r\n14 18 1\r\n13 4 0\r\n9 10 0\r\n12 7 1\r\n7 9 0\r\n12 5 0\r\n11 4 0\r\n2 15 0\r\n19 12 0\r\n9 5 1\r\n13 14 1\r\n3 14 0\r\n17 8 0\r\n18 20 0\r\n4 3 0\r\n11 14 1\r\n10 4 0\r\n6 7 1\r\n1 2 1\r\n6 9 0\r\n5 11 0\r\n10 11 1\r\n15 19 1\r\n3 18 1\r\n15 6 0\r\n8 10 1\r\n8 10 0\r\n5 13 1\r\n4 3 1\r\n16 20 0\r\n14 16 0\r\n16 20 1\r\n18 16 1\r\n19 8 1\r\n16 2 1\r\n3 7 0\r\n",
                "14\r\n10010100010101111101\r\n"
            ],
            [
                "1 0\r\n",
                "0\r\n1\r\n"
            ]
        ]
    }
]