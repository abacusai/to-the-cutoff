[
    {
        "name": "Gold Transfer",
        "description": "You are given a rooted tree. Each vertex contains \n    a_i\n tons of gold,\nwhich costs \n    c_i\n per one ton. Initially, the tree consists only a root\nnumbered \n    0\n with \n    a_0\n tons of gold and price \n    c_0\n per ton.\nThere are \n    q\n queries. Each query has one of two types: Add vertex \n    i\n\n(where \n    i\n is an index of query) as a son to some vertex \n    p_i\n; vertex\n\n    i\n will have \n    a_i\n tons of gold with \n    c_i\n per ton. It's\nguaranteed that \n    c_i > c_p_i\n. For a given vertex \n    v_i\n consider the\nsimple path from \n    v_i\n to the root. We need to purchase \n    w_i\n tons of\ngold from vertices on this path, spending the minimum amount of money. If\nthere isn't enough gold on the path, we buy all we can. If we buy \n    x\n tons\nof gold in some vertex \n    v\n the remaining amount of gold in it decreases by\n\n    x\n (of course, we can't buy more gold that vertex has at the moment). For\neach query of the second type, calculate the resulting amount of gold we\nbought and the amount of money we should spend. Note that you should solve the\nproblem in online mode. It means that you can't read the whole input at once.\nYou can read each query only after writing the answer for the last query, so\ndon't forget to flush output after printing answers. You can use functions\nlike fflush(stdout) in C++ and BufferedWriter.flush in Java or similar after\neach writing in your program. In standard (if you don't tweak I/O), endl\nflushes cout in C++ and System.out.println in Java (or println in Kotlin)\nmakes automatic flush as well. Input The first line contains three integers\n\n    q\n, \n    a_0\n and \n    c_0\n (\n    1 \n    \u2264 q \n    \u2264 3 \n    \u00b7 10^5\n; \n    1\n    \n    \u2264 a_0, c_0 < 10^6\n) \u2014 the number of queries, the amount of gold in the\nroot and its price. Next \n    q\n lines contain descriptions of queries; The\n\n    i\n-th query has one of two types: \"\n    1\n \n    p_i\n \n    a_i\n \n    c_i\n\"\n(\n    0 \n    \u2264 p_i < i\n; \n    1 \n    \u2264 a_i, c_i < 10^6\n): add vertex \n    i\n as\na son to vertex \n    p_i\n. The vertex \n    i\n will have \n    a_i\n tons of gold\nwith price \n    c_i\n per one ton. It's guaranteed that \n    p_i\n exists and\n\n    c_i > c_p_i\n. \"\n    2\n \n    v_i\n \n    w_i\n\" (\n    0 \n    \u2264 v_i < i\n;\n\n    1 \n    \u2264 w_i < 10^6\n): buy \n    w_i\n tons of gold from vertices on path\nfrom \n    v_i\n to \n    0\n spending the minimum amount of money. If there isn't\nenough gold, we buy as much as we can. It's guaranteed that vertex \n    v_i\n\nexist. It's guaranteed that there is at least one query of the second type.\nOutput For each query of the second type, print the resulting amount of gold\nwe bought and the minimum amount of money we should spend. Example Input 5 5 2\n2 0 2 1 0 3 4 2 2 4 1 0 1 3 2 4 2 Output 2 4 4 10 1 3 Note Explanation of the\nsample: At the first query, the tree consist of root, so we purchase \n    2\n\ntons of gold and pay \n    2 \n    \u00b7 2 = 4\n. \n    3\n tons remain in the root.\nAt the second query, we add vertex \n    2\n as a son of vertex \n    0\n. Vertex\n\n    2\n now has \n    3\n tons of gold with price \n    4\n per one ton. At the\nthird query, a path from \n    2\n to \n    0\n consists of only vertices \n    0\n\nand \n    2\n and since \n    c_0 < c_2\n we buy \n    3\n remaining tons of gold in\nvertex \n    0\n and \n    1\n ton in vertex \n    2\n. So we bought \n    3 + 1 = 4\n\ntons and paid \n    3 \n    \u00b7 2 + 1 \n    \u00b7 4 = 10\n. Now, in vertex \n    0\n no\ngold left and \n    2\n tons of gold remain in vertex \n    2\n. At the fourth\nquery, we add vertex \n    4\n as a son of vertex \n    0\n. Vertex \n    4\n now\nhas \n    1\n ton of gold with price \n    3\n. At the fifth query, a path from\n\n    4\n to \n    0\n consists of only vertices \n    0\n and \n    4\n. But since no\ngold left in vertex \n    0\n and only \n    1\n ton is in vertex \n    4\n, we buy\n\n    1\n ton of gold in vertex \n    4\n and spend \n    1 \n    \u00b7 3 = 3\n. Now, in\nvertex \n    4\n no gold left.\n\n",
        "cf_contest_id": 1535,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dp",
            "greedy",
            "interactive",
            "trees"
        ],
        "time_limit_seconds": 4.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 5 2\r\n2 0 2\r\n1 0 3 4\r\n2 2 4\r\n1 0 1 3\r\n2 4 2\r\n",
                "2 4\r\n4 10\r\n1 3\r\n"
            ]
        ],
        "private_cases": []
    }
]