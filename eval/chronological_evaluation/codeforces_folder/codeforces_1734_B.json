[
    {
        "name": "Bright, Nice, Brilliant",
        "description": "There is a pyramid which consists of \n    n\n floors. The floors are numbered\nfrom top to bottom in increasing order. In the pyramid, the \n    i\n-th floor\nconsists of \n    i\n rooms. Denote the \n    j\n-th room on the \n    i\n-th floor\nas \n    (i,j)\n. For all positive integers \n    i\n and \n    j\n such that \n    1\n    \n    \u2264 j \n    \u2264 i < n\n, there are \n    2\n one-way staircases which lead from\n\n    (i,j)\n to \n    (i+1,j)\n and from \n    (i,j)\n to \n    (i+1,j+1)\n\nrespectively. In each room you can either put a torch or leave it empty.\nDefine the brightness of a room \n    (i, j)\n to be the number of rooms with a\ntorch from which you can reach the room \n    (i, j)\n through a non-negative\nnumber of staircases. For example, when \n    n=5\n and torches are placed in\nthe rooms \n    (1,1)\n, \n    (2,1)\n, \n    (3,2)\n, \n    (4,1)\n, \n    (4,3)\n, and\n\n    (5,3)\n, the pyramid can be illustrated as follows: In the above picture,\nrooms with torches are colored in yellow, and empty rooms are white. The blue\nnumbers in the bottom-right corner indicate the brightness of the rooms. The\nroom \n    (4,2)\n (the room with a star) has brightness \n    3\n. In the picture\nbelow, the rooms from where you can reach \n    (4,2)\n have red border. The\nbrightness is \n    3\n since there are three torches among these rooms. The\npyramid is called nice if and only if for all floors, all rooms in the floor\nhave the same brightness. Define the brilliance of a nice pyramid to be the\nsum of brightness over the rooms \n    (1,1)\n, \n    (2,1)\n, \n    (3,1)\n, ...,\n\n    (n,1)\n. Find an arrangement of torches in the pyramid, such that the\nresulting pyramid is nice and its brilliance is maximized. We can show that an\nanswer always exists. If there are multiple answers, output any one of them.\nInput The first line of the input contains a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test cases. The description of the test\ncases follows. The only line of each test case contains a single positive\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 500\n) \u2014 the number of floors in the\npyramid. It is guaranteed that the sum of \n    n\n over all test cases does not\nexceed \n    500\n. Output For each test case, output \n    n\n lines, the\narrangement of torches in the pyramid. The \n    i\n-th line should contain\n\n    i\n integers, each separated with a space. The \n    j\n-th integer on the\n\n    i\n-th line should be \n    1\n if room \n    (i,j)\n has a torch, and \n    0\n\notherwise. We can show that an answer always exists. If there are multiple\nanswers, output any one of them. Example Input 3 1 2 3 Output 1 1 1 1 1 1 1 1\n0 1 Note In the third test case, torches are placed in \n    (1,1)\n,\n\n    (2,1)\n, \n    (2,2)\n, \n    (3,1)\n, and \n    (3,3)\n. The pyramid is nice as\nrooms on each floor have the same brightness. For example, all rooms on the\nthird floor have brightness \n    3\n. The brilliance of the pyramid is \n    1+2+3\n    = 6\n. It can be shown that no arrangements with \n    n=3\n will have a\ngreater brilliance.\n\n",
        "cf_contest_id": 1734,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1\r\n2\r\n3\r\n",
                "1\r\n1 1 1 \r\n1 1 1  1 0 1 \r\n"
            ]
        ],
        "private_cases": [
            [
                "100\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n"
            ]
        ]
    }
]