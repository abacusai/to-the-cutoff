[
    {
        "name": "Ilya and Matrix",
        "description": "Ilya is a very good-natured lion. He likes maths. Of all mathematical objects,\nhis favourite one is matrices. Now he's faced a complicated matrix problem he\nneeds to solve. He's got a square 2^n \u00d7 2^n-sized matrix and 4^n integers. You\nneed to arrange all these numbers in the matrix (put each number in a single\nindividual cell) so that the beauty of the resulting matrix with numbers is\nmaximum. The beauty of a 2^n \u00d7 2^n-sized matrix is an integer, obtained by the\nfollowing algorithm: Find the maximum element in the matrix. Let's denote it\nas m. If n = 0, then the beauty of the matrix equals m. Otherwise, a matrix\ncan be split into 4 non-intersecting 2^n-1 \u00d7 2^n-1-sized submatrices, then the\nbeauty of the matrix equals the sum of number m and other four beauties of the\ndescribed submatrices. As you can see, the algorithm is recursive. Help Ilya,\nsolve the problem and print the resulting maximum beauty of the matrix. Input\nThe first line contains integer 4^n (1 \u2264 4^n \u2264 2\u00b710^6). The next line contains\n4^n integers ai (1 \u2264 ai \u2264 10^9) \u2014 the numbers you need to arrange in the 2^n \u00d7\n2^n-sized matrix. Output On a single line print the maximum value of the\nbeauty of the described matrix. Please, do not use the \nor write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams\nor the \n14 Note Consider the second sample. You need to arrange the numbers in the\nmatrix as follows: 1 2 3 4 Then the beauty of the matrix will equal: 4 + 1 + 2\n+ 3 + 4 = 14.\n\n",
        "cf_contest_id": 313,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n13\r\n",
                "13\r\n"
            ],
            [
                "4\r\n1 2 3 4\r\n",
                "14\r\n"
            ]
        ],
        "private_cases": [
            [
                "16\r\n978618343 473608041 799158564 800910753 461479363 520477481 780529176 678879534 118274424 720632652 639921017 582019792 143353286 537373229 944668919 758615621\r\n",
                "14440495117\r\n"
            ],
            [
                "16\r\n521848329 105907607 414661942 473600423 264555612 186332345 774233687 736918178 456150336 216550357 568433949 135218174 18789799 324141005 617635501 149674864\r\n",
                "9436107110\r\n"
            ],
            [
                "16\r\n612095723 222321386 616933999 386488979 943748076 902598472 681820298 449949990 359507903 613063462 437031953 902348579 697631196 99280352 60225467 969809069\r\n",
                "13643168169\r\n"
            ],
            [
                "16\r\n666766712 653140033 670637874 170909587 210382562 358152171 128926299 750686139 315428350 607830667 363710774 325047228 570196776 38425426 438601514 634274054\r\n",
                "10395033063\r\n"
            ],
            [
                "1\r\n6\r\n",
                "6\r\n"
            ],
            [
                "1\r\n8\r\n",
                "8\r\n"
            ],
            [
                "1\r\n9\r\n",
                "9\r\n"
            ],
            [
                "4\r\n7 9 6 9\r\n",
                "40\r\n"
            ],
            [
                "4\r\n423654797 623563697 645894116 384381709\r\n",
                "2723388435\r\n"
            ],
            [
                "4\r\n437587210 297534606 891773002 56712976\r\n",
                "2575380796\r\n"
            ],
            [
                "4\r\n963662765 272656295 383441522 477665112\r\n",
                "3061088459\r\n"
            ],
            [
                "4\r\n791725034 812168727 528894922 479977172\r\n",
                "3424934582\r\n"
            ]
        ]
    }
]