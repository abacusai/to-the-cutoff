[
    {
        "name": "Gas Pipeline",
        "description": "You are responsible for installing a gas pipeline along a road. Let's consider\nthe road (for simplicity) as a segment \n    [0, n]\n on \n    OX\n axis. The road\ncan have several crossroads, but for simplicity, we'll denote each crossroad\nas an interval \n    (x, x + 1)\n with integer \n    x\n. So we can represent the\nroad as a binary string consisting of \n    n\n characters, where character 0\nmeans that current interval doesn't contain a crossroad, and 1 means that\nthere is a crossroad. Usually, we can install the pipeline along the road on\nheight of \n    1\n unit with supporting pillars in each integer point (so, if\nwe are responsible for \n    [0, n]\n road, we must install \n    n + 1\n\npillars). But on crossroads we should lift the pipeline up to the height\n\n    2\n, so the pipeline won't obstruct the way for cars. We can do so\ninserting several zig-zag-like lines. Each zig-zag can be represented as a\nsegment \n    [x, x + 1]\n with integer \n    x\n consisting of three parts:\n\n    0.5\n units of horizontal pipe + \n    1\n unit of vertical pipe + \n    0.5\n\nof horizontal. Note that if pipeline is currently on height \n    2\n, the\npillars that support it should also have length equal to \n    2\n units. Each\nunit of gas pipeline costs us \n    a\n bourles, and each unit of pillar \u2014\n\n    b\n bourles. So, it's not always optimal to make the whole pipeline on the\nheight \n    2\n. Find the shape of the pipeline with minimum possible cost and\ncalculate that cost. Note that you must start and finish the pipeline on\nheight \n    1\n and, also, it's guaranteed that the first and last characters\nof the input string are equal to 0. Input The fist line contains one integer\n\n    T\n (\n    1 \n    \u2264 T \n    \u2264 100\n) \u2014 the number of queries. Next \n    2 \n    \u00b7\n    T\n lines contain independent queries \u2014 one query per two lines. The first\nline contains three integers \n    n\n, \n    a\n, \n    b\n (\n    2 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n, \n    1 \n    \u2264 a \n    \u2264 10^8\n, \n    1 \n    \u2264 b \n    \u2264 10^8\n) \u2014 the\nlength of the road, the cost of one unit of the pipeline and the cost of one\nunit of the pillar, respectively. The second line contains binary string\n\n    s\n (\n    |s| = n\n, \n    s_i \n    \u2208\n    \n    0, 1\n, \n    s_1 = s_n = 0\n) \u2014\nthe description of the road. It's guaranteed that the total length of all\nstrings \n    s\n doesn't exceed \n    2 \n    \u00b7 10^5\n. Output Print \n    T\n\nintegers \u2014 one per query. For each query print the minimum possible cost of\nthe constructed pipeline. Example Input 4 8 2 5 00110010 8 1 1 00110010 9\n100000000 100000000 010101010 2 5 1 00 Output 94 25 2900000000 13 Note The\noptimal pipeline for the first query is shown at the picture above. The\noptimal pipeline for the second query is pictured below: The optimal (and the\nonly possible) pipeline for the third query is shown below: The optimal\npipeline for the fourth query is shown below:\n\n",
        "cf_contest_id": 1207,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n8 2 5\r\n00110010\r\n8 1 1\r\n00110010\r\n9 100000000 100000000\r\n010101010\r\n2 5 1\r\n00\r\n",
                "94\r\n25\r\n2900000000\r\n13\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n2 3 5\r\n00\r\n12 4 7\r\n011101011100\r\n",
                "21\r\n217\r\n"
            ],
            [
                "2\r\n8 2 5\r\n01111110\r\n6 2 5\r\n001010\r\n",
                "100\r\n71\r\n"
            ]
        ]
    }
]