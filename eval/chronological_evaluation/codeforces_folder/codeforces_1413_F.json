[
    {
        "name": "Roads and Ramen",
        "description": "In the Land of Fire there are \n    n\n villages and \n    n-1\n bidirectional\nroad, and there is a path between any pair of villages by roads. There are\nonly two types of roads: stone ones and sand ones. Since the Land of Fire is\nconstantly renovating, every morning workers choose a single road and flip its\ntype (so it becomes a stone road if it was a sand road and vice versa). Also\neveryone here loves ramen, that's why every morning a ramen pavilion is set in\nthe middle of every stone road, and at the end of each day all the pavilions\nare removed. For each of the following \n    m\n days, after another road is\nflipped, Naruto and Jiraiya choose a simple path \u2014 that is, a route which\nstarts in a village and ends in a (possibly, the same) village, and doesn't\ncontain any road twice. Since Naruto and Jiraiya also love ramen very much,\nthey buy a single cup of ramen on each stone road and one of them eats it.\nSince they don't want to offend each other, they only choose routes where they\ncan eat equal number of ramen cups. Since they both like traveling, they\nchoose any longest possible path. After every renovation find the maximal\npossible length of a path (that is, the number of roads in it) they can\nfollow. Input The first line contains the only positive integer \n    n\n (\n    2\n    \n    \u2264 n \n    \u2264 500\n     000\n) standing for the number of villages in the Land\nof Fire. Each of the following \n    (n-1)\n lines contains a description of\nanother road, represented as three positive integers \n    u\n, \n    v\n and\n\n    t\n (\n    1 \n    \u2264 u, v \n    \u2264 n\n, \n    t \n    \u2208\n    \n    0,1\n). The first\ntwo numbers denote the villages connected by the road, and the third denotes\nthe initial type of the road: \n    0\n for the sand one and \n    1\n for the\nstone one. Roads are numbered from \n    1\n to \n    (n-1)\n in the order from\nthe input. The following line contains a positive integer \n    m\n (\n    1 \n    \u2264\n    m \n    \u2264 500\n     000\n) standing for the number of days Naruto and Jiraiya\ntravel for. Each of the following \n    m\n lines contains the single integer\n\n    id\n (\n    1 \n    \u2264 id \n    \u2264 n-1\n) standing for the index of the road\nwhose type is flipped on the morning of corresponding day. It is guaranteed\nthat there is a road path between any pair of villages. Output Output \n    m\n\nlines. In the \n    i\n-th of them print the only integer denoting the maximal\npossible length of any valid path on the \n    i\n-th day. Example Input 5 1 2 0\n1 3 0 3 5 0 3 4 0 5 3 4 1 3 4 Output 3 2 3 3 2 Note After the renovation of\nthe \n    3\n-rd road the longest path consists of the roads \n    1\n, \n    2\n\nand \n    4\n. After the renovation of the \n    4\n-th road one of the longest\npaths consists of the roads \n    1\n and \n    2\n. After the renovation of the\n\n    1\n-st road one of the longest paths consists of the roads \n    1\n,\n\n    2\n and \n    3\n. After the renovation of the \n    3\n-rd road the longest\npath consists of the roads \n    1\n, \n    2\n and \n    4\n. After the renovation\nof the \n    4\n-rd road one of the longest paths consists of the roads \n    2\n\nand \n    4\n.\n\n",
        "cf_contest_id": 1413,
        "cf_index": "F",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "trees"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5\r\n1 2 0\r\n1 3 0\r\n3 5 0\r\n3 4 0\r\n5\r\n3\r\n4\r\n1\r\n3\r\n4\r\n",
                "3\r\n2\r\n3\r\n3\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n2 4 0\r\n5 2 0\r\n1 3 1\r\n1 2 1\r\n5\r\n3\r\n3\r\n4\r\n1\r\n1\r\n",
                "2\r\n3\r\n2\r\n3\r\n2\r\n"
            ],
            [
                "10\r\n5 7 0\r\n2 10 1\r\n1 5 0\r\n6 8 0\r\n4 9 1\r\n2 5 1\r\n10 8 0\r\n2 3 1\r\n4 2 1\r\n10\r\n9\r\n9\r\n9\r\n5\r\n2\r\n5\r\n7\r\n2\r\n3\r\n2\r\n",
                "5\r\n5\r\n5\r\n5\r\n5\r\n4\r\n5\r\n4\r\n5\r\n5\r\n"
            ],
            [
                "2\r\n2 1 1\r\n10\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n",
                "1\r\n0\r\n1\r\n0\r\n1\r\n0\r\n1\r\n0\r\n1\r\n0\r\n"
            ],
            [
                "20\r\n9 11 0\r\n1 5 0\r\n1 14 0\r\n5 17 0\r\n14 3 0\r\n16 6 0\r\n9 2 0\r\n6 4 0\r\n11 10 0\r\n12 7 0\r\n8 18 0\r\n13 1 0\r\n18 11 0\r\n8 6 0\r\n5 10 0\r\n5 15 0\r\n2 20 0\r\n19 17 0\r\n7 17 0\r\n20\r\n9\r\n11\r\n11\r\n14\r\n14\r\n5\r\n5\r\n10\r\n10\r\n4\r\n4\r\n18\r\n17\r\n18\r\n17\r\n17\r\n8\r\n8\r\n15\r\n17\r\n",
                "7\r\n9\r\n7\r\n9\r\n7\r\n9\r\n7\r\n9\r\n7\r\n9\r\n7\r\n8\r\n8\r\n8\r\n7\r\n8\r\n9\r\n8\r\n9\r\n9\r\n"
            ]
        ]
    }
]