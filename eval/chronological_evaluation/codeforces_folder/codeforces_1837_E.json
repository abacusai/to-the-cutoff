[
    {
        "name": "Playoff Fixing",
        "description": "\n    2^k\n teams participate in a playoff tournament. The teams are numbered\nfrom \n    1\n to \n    2^k\n, in order of decreasing strength. So, team \n    1\n\nis the strongest one, team \n    2^k\n is the weakest one. A team with a smaller\nnumber always defeats a team with a larger number. First of all, the teams are\narranged in some order during a procedure called seeding. Each team is\nassigned another unique value from \n    1\n to \n    2^k\n, called a seed, that\nrepresents its starting position in the playoff. The tournament consists of\n\n    2^k - 1\n games. They are held as follows: the teams are split into pairs:\nteam with seed \n    1\n plays against team with seed \n    2\n, team with seed\n\n    3\n plays against team with seed \n    4\n (exactly in this order), and so\non (so, \n    2^k-1\n games are played in that phase). When a team loses a\ngame, it is eliminated. After that, only \n    2^k-1\n teams remain. If only\none team remains, it is declared the champion; otherwise, \n    2^k-2\n games\nare played: in the first one of them, the winner of the game \"seed \n    1\n vs\nseed \n    2\n\" plays against the winner of the game \"seed \n    3\n vs seed\n\n    4\n\", then the winner of the game \"seed \n    5\n vs seed \n    6\n\" plays\nagainst the winner of the game \"seed \n    7\n vs seed \n    8\n\", and so on. This\nprocess repeats until only one team remains. After the tournament ends, the\nteams are assigned places according to the tournament phase when they were\neliminated. In particular: the winner of the tournament gets place \n    1\n;\nthe team eliminated in the finals gets place \n    2\n; both teams eliminated in\nthe semifinals get place \n    3\n; all teams eliminated in the quarterfinals\nget place \n    5\n; all teams eliminated in the 1/8 finals get place \n    9\n,\nand so on. Now that we established the rules, we do a little rigging. In\nparticular, we want: team \n    1\n (not team with seed \n    1\n) to take place\n\n    1\n; team \n    2\n to take place \n    2\n; teams \n    3\n and \n    4\n to take\nplace \n    3\n; teams from \n    5\n to \n    8\n to take place \n    5\n, and so on.\nFor example, this picture describes one of the possible ways the tournament\ncan go with \n    k = 3\n, and the resulting places of the teams: Some seeds are\nalready reserved for some teams (we are not the only ones rigging the\ntournament, apparently). We have to fill the rest of the seeds with the\nremaining teams to achieve the desired placements. How many ways are there to\ndo that? Since that value might be large, print it modulo\n\n    998\n     244\n     353\n. Input The first line contains a single integer\n\n    k\n (\n    0 \n    \u2264 k \n    \u2264 19\n) \u2014 there are \n    2^k\n teams. The second\nline contains \n    2^k\n integers \n    a_1, a_2, \n    \u2026, a_2^k\n (\n    a_i =\n    -1\n or \n    1 \n    \u2264 a_i \n    \u2264 2^k\n). If \n    a_i \n     -1\n, then team\n\n    a_i\n has seed \n    i\n. Otherwise, the seed \n    i\n is not reserved for\nany team. All values, that are not \n    -1\n, are distinct. Output Print a\nsingle integer \u2014 the number of ways to fill the non-reserved seeds so that the\ntournament goes as planned, modulo \n    998\n     244\n     353\n. Examples Input 2 1\n2 3 4 Output 0 Input 2 1 3 4 2 Output 1 Input 1 -1 -1 Output 2 Input 2 -1 -1\n-1 -1 Output 16 Input 3 -1 -1 -1 -1 2 -1 -1 -1 Output 768 Input 0 1 Output 1\n\n",
        "cf_contest_id": 1837,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n1 2 3 4\r\n",
                "0\r\n"
            ],
            [
                "2\r\n1 3 4 2\r\n",
                "1"
            ],
            [
                "1\r\n-1 -1\r\n",
                "2"
            ],
            [
                "2\r\n-1 -1 -1 -1\r\n",
                "16"
            ],
            [
                "3\r\n-1 -1 -1 -1 2 -1 -1 -1\r\n",
                "768"
            ],
            [
                "0\r\n1\r\n",
                "1"
            ]
        ],
        "private_cases": [
            [
                "2\r\n-1 -1 3 -1\r\n",
                "4"
            ],
            [
                "3\r\n-1 7 -1 8 2 -1 -1 5\r\n",
                "4"
            ],
            [
                "4\r\n-1 10 15 -1 -1 14 -1 2 12 -1 5 16 8 6 11 1\r\n",
                "0\r\n"
            ],
            [
                "5\r\n14 32 11 28 -1 -1 -1 -1 -1 -1 -1 13 15 26 3 -1 9 4 19 31 -1 -1 8 20 18 10 16 7 22 1 25 5\r\n",
                "0\r\n"
            ],
            [
                "2\r\n-1 -1 -1 1\r\n",
                "4"
            ],
            [
                "3\r\n-1 7 -1 4 6 -1 5 -1\r\n",
                "4"
            ],
            [
                "4\r\n3 -1 -1 11 15 -1 10 7 6 -1 16 2 4 -1 5 9\r\n",
                "6"
            ],
            [
                "5\r\n-1 1 -1 11 -1 -1 -1 -1 6 32 14 17 -1 16 -1 3 19 4 20 -1 -1 13 23 8 9 30 29 5 10 18 2 31\r\n",
                "80640"
            ],
            [
                "2\r\n1 2 -1 -1\r\n",
                "0"
            ],
            [
                "3\r\n1 -1 6 7 5 2 4 -1\r\n",
                "0\r\n"
            ],
            [
                "3\r\n1 -1 6 7 5 2 -1 -1\r\n",
                "0\r\n"
            ],
            [
                "5\r\n-1 23 32 2 29 11 -1 -1 10 3 -1 -1 -1 -1 30 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 6 19 -1 1 -1 -1\r\n",
                "0"
            ],
            [
                "3\r\n4 2 -1 -1 -1 -1 -1 -1\r\n",
                "0"
            ],
            [
                "5\r\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 22 -1 -1 -1 -1 -1 -1 -1 -1 6 13 -1 -1\r\n",
                "0"
            ],
            [
                "5\r\n-1 -1 -1 -1 -1 -1 -1 14 17 18 -1 -1 -1 -1 -1 -1 7 -1 23 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 30 -1 -1\r\n",
                "0\r\n"
            ],
            [
                "5\r\n-1 4 -1 6 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\r\n",
                "0"
            ],
            [
                "5\r\n6 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 17 28 -1 -1 -1 -1 -1 -1 13 -1 -1 -1 -1 -1 -1 -1\r\n",
                "0\r\n"
            ],
            [
                "5\r\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 15 2 -1 -1 -1 -1 -1 -1\r\n",
                "0"
            ]
        ]
    }
]