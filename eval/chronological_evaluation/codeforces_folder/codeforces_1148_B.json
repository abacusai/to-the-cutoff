[
    {
        "name": "Born This Way",
        "description": "Arkady bought an air ticket from a city A to a city C. Unfortunately, there\nare no direct flights, but there are a lot of flights from A to a city B, and\nfrom B to C. There are \n    n\n flights from A to B, they depart at time\nmoments \n    a_1\n, \n    a_2\n, \n    a_3\n, ..., \n    a_n\n and arrive at B\n\n    t_a\n moments later. There are \n    m\n flights from B to C, they depart at\ntime moments \n    b_1\n, \n    b_2\n, \n    b_3\n, ..., \n    b_m\n and arrive at C\n\n    t_b\n moments later. The connection time is negligible, so one can use the\n\n    i\n-th flight from A to B and the \n    j\n-th flight from B to C if and\nonly if \n    b_j \n    \u2265 a_i + t_a\n. You can cancel at most \n    k\n flights. If\nyou cancel a flight, Arkady can not use it. Arkady wants to be in C as early\nas possible, while you want him to be in C as late as possible. Find the\nearliest time Arkady can arrive at C, if you optimally cancel \n    k\n flights.\nIf you can cancel \n    k\n or less flights in such a way that it is not\npossible to reach C at all, print \n    -1\n. Input The first line contains five\nintegers \n    n\n, \n    m\n, \n    t_a\n, \n    t_b\n and \n    k\n (\n    1 \n    \u2264 n, m\n    \n    \u2264 2 \n    \u00b7 10^5\n, \n    1 \n    \u2264 k \n    \u2264 n + m\n, \n    1 \n    \u2264 t_a, t_b\n    \n    \u2264 10^9\n) \u2014 the number of flights from A to B, the number of flights from\nB to C, the flight time from A to B, the flight time from B to C and the\nnumber of flights you can cancel, respectively. The second line contains\n\n    n\n distinct integers in increasing order \n    a_1\n, \n    a_2\n, \n    a_3\n,\n..., \n    a_n\n (\n    1 \n    \u2264 a_1 < a_2 < \n    \u2026 < a_n \n    \u2264 10^9\n) \u2014 the\ntimes the flights from A to B depart. The third line contains \n    m\n distinct\nintegers in increasing order \n    b_1\n, \n    b_2\n, \n    b_3\n, ..., \n    b_m\n\n(\n    1 \n    \u2264 b_1 < b_2 < \n    \u2026 < b_m \n    \u2264 10^9\n) \u2014 the times the flights\nfrom B to C depart. Output If you can cancel \n    k\n or less flights in such a\nway that it is not possible to reach C at all, print \n    -1\n. Otherwise print\nthe earliest time Arkady can arrive at C if you cancel \n    k\n flights in such\na way that maximizes this time. Examples Input 4 5 1 1 2 1 3 5 7 1 2 3 9 10\nOutput 11 Input 2 2 4 4 2 1 10 10 20 Output -1 Input 4 3 2 3 1 1 999999998\n999999999 1000000000 3 4 1000000000 Output 1000000003 Note Consider the first\nexample. The flights from A to B depart at time moments \n    1\n, \n    3\n,\n\n    5\n, and \n    7\n and arrive at B at time moments \n    2\n, \n    4\n,\n\n    6\n, \n    8\n, respectively. The flights from B to C depart at time moments\n\n    1\n, \n    2\n, \n    3\n, \n    9\n, and \n    10\n and arrive at C at time\nmoments \n    2\n, \n    3\n, \n    4\n, \n    10\n, \n    11\n, respectively. You can\ncancel at most two flights. The optimal solution is to cancel the first flight\nfrom A to B and the fourth flight from B to C. This way Arkady has to take the\nsecond flight from A to B, arrive at B at time moment \n    4\n, and take the\nlast flight from B to C arriving at C at time moment \n    11\n. In the second\nexample you can simply cancel all flights from A to B and you're done. In the\nthird example you can cancel only one flight, and the optimal solution is to\ncancel the first flight from A to B. Note that there is still just enough time\nto catch the last flight from B to C.\n\n",
        "cf_contest_id": 1148,
        "cf_index": "B",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 5 1 1 2\r\n1 3 5 7\r\n1 2 3 9 10\r\n",
                "11\n"
            ],
            [
                "2 2 4 4 2\r\n1 10\r\n10 20\r\n",
                "-1\n"
            ],
            [
                "4 3 2 3 1\r\n1 999999998 999999999 1000000000\r\n3 4 1000000000\r\n",
                "1000000003\n"
            ]
        ],
        "private_cases": [
            [
                "1 1 1 1 1\r\n1\r\n2\r\n",
                "-1\n"
            ],
            [
                "5 10 20 10 3\r\n7 9 18 19 20\r\n3 6 7 8 9 10 14 15 16 17\r\n",
                "-1\n"
            ],
            [
                "10 5 17 10 3\r\n6 7 8 10 15 16 17 19 20 21\r\n1 5 8 16 17\r\n",
                "-1\n"
            ],
            [
                "10 11 4 5 10\r\n1 2 3 4 5 6 7 8 9 10\r\n16 17 18 19 20 21 22 23 24 25 26\r\n",
                "-1\n"
            ],
            [
                "2 2 1 1 1\r\n1 2\r\n3 4\r\n",
                "5\n"
            ],
            [
                "2 2 10 10 1\r\n1 2\r\n3 4\r\n",
                "-1\n"
            ],
            [
                "2 2 10 10 1\r\n1 2\r\n11 12\r\n",
                "22\n"
            ],
            [
                "2 2 10 10 2\r\n1 2\r\n11 12\r\n",
                "-1\n"
            ],
            [
                "5 3 1 1 4\r\n1 2 3 4 5\r\n4 100 1000\r\n",
                "-1\n"
            ],
            [
                "2 1 2 1 1\r\n1 2\r\n5\r\n",
                "-1\n"
            ],
            [
                "2 2 1 1 1\r\n1 2\r\n1 3\r\n",
                "-1\n"
            ],
            [
                "1 5 1 1 1\r\n1\r\n10 11 12 13 14\r\n",
                "-1\n"
            ],
            [
                "3 3 1 1 1\r\n1 2 3\r\n2 15 16\r\n",
                "16\n"
            ],
            [
                "2 2 1 1 1\r\n1 5\r\n2 3\r\n",
                "-1\n"
            ],
            [
                "2 2 2 1 1\r\n1 4\r\n3 4\r\n",
                "-1\n"
            ],
            [
                "3 3 1 1 1\r\n1 10 100\r\n2 3 4\r\n",
                "-1\n"
            ],
            [
                "5 12 50 1 4\r\n1 2 3 4 5\r\n1 2 3 4 5 6 7 8 9 10 100 1000\r\n",
                "-1\n"
            ],
            [
                "4 7 10 10 3\r\n1 2 3 100\r\n20 30 40 50 60 70 80\r\n",
                "-1\n"
            ],
            [
                "3 4 1 1 2\r\n1 2 3\r\n1 2 3 4\r\n",
                "5\n"
            ],
            [
                "2 2 1 1 1\r\n2 3\r\n1 4\r\n",
                "-1\n"
            ],
            [
                "3 3 2 1 1\r\n1 4 5\r\n2 3 4\r\n",
                "-1\n"
            ],
            [
                "2 2 1000000000 1000000000 1\r\n999999999 1000000000\r\n1 1000000000\r\n",
                "-1\n"
            ],
            [
                "5 4 1 1 3\r\n1 5 8 9 10\r\n2 3 4 6\r\n",
                "-1\n"
            ]
        ]
    }
]