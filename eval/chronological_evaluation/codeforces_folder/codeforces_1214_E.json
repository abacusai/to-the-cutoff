[
    {
        "name": "Petya and Construction Set",
        "description": "It's Petya's birthday party and his friends have presented him a brand new\n\"Electrician-\n    n\n\" construction set, which they are sure he will enjoy as\nhe always does with weird puzzles they give him. Construction set\n\"Electrician-\n    n\n\" consists of \n    2n - 1\n wires and \n    2n\n light bulbs.\nEach bulb has its own unique index that is an integer from \n    1\n to\n\n    2n\n, while all wires look the same and are indistinguishable. In order to\ncomplete this construction set one has to use each of the wires to connect two\ndistinct bulbs. We define a chain in a completed construction set as a\nsequence of distinct bulbs of length at least two, such that every two\nconsecutive bulbs in this sequence are directly connected by a wire. Completed\nconstruction set configuration is said to be correct if a resulting network of\nbulbs and wires has a tree structure, i.e. any two distinct bulbs are the\nendpoints of some chain. Petya was assembling different configurations for\nseveral days, and he noticed that sometimes some of the bulbs turn on. After a\nseries of experiments he came up with a conclusion that bulbs indexed \n    2i\n\nand \n    2i - 1\n turn on if the chain connecting them consists of exactly\n\n    d_i\n wires. Moreover, the following important condition holds: the value\nof \n    d_i\n is never greater than \n    n\n. Petya did his best but was not\nable to find a configuration that makes all bulbs to turn on, so he seeks your\nassistance. Please, find out a configuration that makes all bulbs shine. It is\nguaranteed that such configuration always exists. Input The first line of the\ninput contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 100\n     000\n) \u2014\nthe parameter of a construction set that defines the number of bulbs and the\nnumber of wires. Next line contains \n    n\n integers \n    d_1, d_2, \n    \u2026,\n    d_n\n (\n    1 \n    \u2264 d_i \n    \u2264 n\n), where \n    d_i\n stands for the number of\nwires the chain between bulbs \n    2i\n and \n    2i - 1\n should consist of.\nOutput Print \n    2n - 1\n lines. The \n    i\n-th of them should contain two\ndistinct integers \n    a_i\n and \n    b_i\n (\n    1 \n    \u2264 a_i, b_i \n    \u2264 2n\n,\n\n    a_i \n     b_i\n) \u2014 indices of bulbs connected by a wire. If there are\nseveral possible valid answer you can print any of them. Examples Input 3 2 2\n2 Output 1 6 2 6 3 5 3 6 4 5 Input 4 2 2 2 1 Output 1 6 1 7 2 6 3 5 3 6 4 5 7\n8 Input 6 2 2 2 2 2 2 Output 1 3 2 3 3 5 4 5 5 7 6 7 7 12 8 12 9 11 9 12 10 11\nInput 2 1 1 Output 1 2 1 4 3 4 Note Answer for the first sample test. Answer\nfor the second sample test.\n\n",
        "cf_contest_id": 1214,
        "cf_index": "E",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graphs",
            "math",
            "sortings",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n2 2 2\r\n",
                "5 3\n3 1\n3 6\n1 4\n4 2\n"
            ],
            [
                "4\r\n2 2 2 1\r\n",
                "5 3\n3 1\n1 7\n3 6\n1 4\n7 2\n7 8\n"
            ],
            [
                "6\r\n2 2 2 2 2 2\r\n",
                "11 9\n9 7\n7 5\n5 3\n3 1\n9 12\n7 10\n5 8\n3 6\n1 4\n4 2\n"
            ],
            [
                "2\r\n1 1\r\n",
                "3 1\n3 4\n1 2\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n2 1 4 3\r\n",
                "5 7\n7 1\n1 3\n3 6\n3 8\n3 2\n3 4\n"
            ],
            [
                "9\r\n9 9 9 9 9 9 9 9 9\r\n",
                "17 15\n15 13\n13 11\n11 9\n9 7\n7 5\n5 3\n3 1\n1 18\n18 16\n16 14\n14 12\n12 10\n10 8\n8 6\n6 4\n4 2\n"
            ],
            [
                "1\r\n1\r\n",
                "1 2\n"
            ],
            [
                "2\r\n2 2\r\n",
                "3 1\n1 4\n4 2\n"
            ],
            [
                "10\r\n10 10 10 10 10 10 10 10 10 10\r\n",
                "19 17\n17 15\n15 13\n13 11\n11 9\n9 7\n7 5\n5 3\n3 1\n1 20\n20 18\n18 16\n16 14\n14 12\n12 10\n10 8\n8 6\n6 4\n4 2\n"
            ],
            [
                "5\r\n1 1 1 1 1\r\n",
                "9 7\n7 5\n5 3\n3 1\n9 10\n7 8\n5 6\n3 4\n1 2\n"
            ],
            [
                "2\r\n2 2\r\n",
                "3 1\n1 4\n4 2\n"
            ],
            [
                "2\r\n2 1\r\n",
                "1 3\n3 2\n3 4\n"
            ],
            [
                "1\r\n1\r\n",
                "1 2\n"
            ],
            [
                "2\r\n2 1\r\n",
                "1 3\n3 2\n3 4\n"
            ],
            [
                "3\r\n3 2 1\r\n",
                "1 3\n3 5\n5 2\n5 4\n5 6\n"
            ],
            [
                "5\r\n4 5 2 1 3\r\n",
                "3 1\n1 9\n9 5\n5 7\n7 4\n7 2\n7 10\n7 6\n7 8\n"
            ],
            [
                "6\r\n2 5 4 1 6 3\r\n",
                "9 3\n3 5\n5 11\n11 1\n1 7\n7 10\n7 4\n7 6\n7 12\n7 2\n7 8\n"
            ],
            [
                "7\r\n7 2 1 5 6 4 3\r\n",
                "1 9\n9 7\n7 11\n11 13\n13 3\n3 5\n5 2\n5 10\n5 8\n5 12\n5 14\n5 4\n5 6\n"
            ],
            [
                "2\r\n1 1\r\n",
                "3 1\n3 4\n1 2\n"
            ],
            [
                "3\r\n2 2 2\r\n",
                "5 3\n3 1\n3 6\n1 4\n4 2\n"
            ],
            [
                "4\r\n2 2 2 2\r\n",
                "7 5\n5 3\n3 1\n5 8\n3 6\n1 4\n4 2\n"
            ],
            [
                "7\r\n3 3 3 3 3 3 3\r\n",
                "13 11\n11 9\n9 7\n7 5\n5 3\n3 1\n9 14\n7 12\n5 10\n3 8\n1 6\n6 4\n4 2\n"
            ],
            [
                "8\r\n7 7 7 7 7 7 7 7\r\n",
                "15 13\n13 11\n11 9\n9 7\n7 5\n5 3\n3 1\n3 16\n1 14\n14 12\n12 10\n10 8\n8 6\n6 4\n4 2\n"
            ],
            [
                "4\r\n1 3 3 4\r\n",
                "7 5\n5 3\n3 1\n1 8\n1 6\n8 4\n1 2\n"
            ],
            [
                "5\r\n1 4 2 1 1\r\n",
                "3 5\n5 9\n9 7\n7 1\n7 4\n9 6\n9 10\n7 8\n1 2\n"
            ],
            [
                "7\r\n4 3 5 4 5 3 5\r\n",
                "13 9\n9 5\n5 7\n7 1\n1 11\n11 3\n1 14\n11 10\n3 6\n3 8\n6 2\n6 12\n2 4\n"
            ],
            [
                "6\r\n4 4 5 5 5 6\r\n",
                "11 9\n9 7\n7 5\n5 3\n3 1\n1 12\n1 10\n12 8\n8 6\n8 4\n6 2\n"
            ],
            [
                "7\r\n3 4 3 3 4 3 4\r\n",
                "13 9\n9 3\n3 11\n11 7\n7 5\n5 1\n11 14\n7 10\n5 4\n5 12\n1 8\n8 6\n6 2\n"
            ]
        ]
    }
]