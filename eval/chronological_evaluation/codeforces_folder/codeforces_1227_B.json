[
    {
        "name": "Box",
        "description": "Permutation \n    p\n is a sequence of integers \n    p=[p_1, p_2, \n    \u2026,\n    p_n]\n, consisting of \n    n\n distinct (unique) positive integers between\n\n    1\n and \n    n\n, inclusive. For example, the following sequences are\npermutations: \n    [3, 4, 1, 2]\n, \n    [1]\n, \n    [1, 2]\n. The following\nsequences are not permutations: \n    [0]\n, \n    [1, 2, 1]\n, \n    [2, 3]\n,\n\n    [0, 1, 2]\n. The important key is in the locked box that you need to open.\nTo open the box you need to enter secret code. Secret code is a permutation\n\n    p\n of length \n    n\n. You don't know this permutation, you only know the\narray \n    q\n of prefix maximums of this permutation. Formally: \n    q_1=p_1\n,\n\n    q_2=\n    max(p_1, p_2)\n, \n    q_3=\n    max(p_1, p_2,p_3)\n, ...\n\n    q_n=\n    max(p_1, p_2,\n    \u2026,p_n)\n. You want to construct any possible\nsuitable permutation (i.e. any such permutation, that calculated \n    q\n for\nthis permutation is equal to the given array). Input The first line contains\ninteger number \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases\nin the input. Then \n    t\n test cases follow. The first line of a test case\ncontains one integer \n    n\n \n    (1 \n    \u2264 n \n    \u2264 10^5)\n \u2014 the number of\nelements in the secret code permutation \n    p\n. The second line of a test\ncase contains \n    n\n integers \n    q_1, q_2, \n    \u2026, q_n\n \n    (1 \n    \u2264 q_i\n    \n    \u2264 n)\n \u2014 elements of the array \n    q\n for secret permutation. It is\nguaranteed that \n    q_i \n    \u2264 q_i+1\n for all \n    i\n (\n    1 \n    \u2264 i < n\n).\nThe sum of all values \n    n\n over all the test cases in the input doesn't\nexceed \n    10^5\n. Output For each test case, print: If it's impossible to\nfind such a permutation \n    p\n, print \"-1\" (without quotes). Otherwise, print\n\n    n\n distinct integers \n    p_1, p_2, \n    \u2026, p_n\n (\n    1 \n    \u2264 p_i \n    \u2264\n    n\n). If there are multiple possible answers, you can print any of them.\nExample Input 4 5 1 3 4 5 5 4 1 1 3 4 2 2 2 1 1 Output 1 3 4 5 2 -1 2 1 1 Note\nIn the first test case of the example answer \n    [1,3,4,5,2]\n is the only\npossible answer: \n    q_1 = p_1 = 1\n; \n    q_2 = \n    max(p_1, p_2) =\n    3\n; \n    q_3 = \n    max(p_1, p_2, p_3) = 4\n; \n    q_4 = \n    max(p_1,\n    p_2, p_3, p_4) = 5\n; \n    q_5 = \n    max(p_1, p_2, p_3, p_4,\n    p_5) = 5\n. It can be proved that there are no answers for the second test\ncase of the example.\n\n",
        "cf_contest_id": 1227,
        "cf_index": "B",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n5\r\n1 3 4 5 5\r\n4\r\n1 1 3 4\r\n2\r\n2 2\r\n1\r\n1\r\n",
                "1 3 4 5 2\r\n-1\r\n2 1\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]