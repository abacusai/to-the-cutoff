[
    {
        "name": "Likes Display",
        "description": "Polycarp is working on the implementation of displaying likes on the\nCodehorses social network. The number of likes should be displayed in a format\nthat will be easy to read by users. It was decided that for large numbers of\nlikes the format should be like 123K (one hundred twenty-three thousand) or\nlike 56M (fifty-six million). The following displaying strategy has been\napproved: the number will be displayed either as an integer number from 0 to\n999, or as a positive integer number of thousands (from 1K to 999K), or as a\npositive integer number of millions (from 1M on), the specified exact number\nof likes \n    n\n when displaying should be rounded to the nearest view from\nthe case above (if rounding is ambiguous, it must be rounded up): for example,\n\n    1785\n should be rounded to 2K instead of 1K, \n    4500000\n should be\nrounded to 5M. Help Polycarp implement this part of the functionality: for a\ngiven non-negative integer number of likes \n    n\n, print its view in the\nCodehorses interface. Input The first line contains an integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of test cases in the input. The following\nare descriptions of the \n    t\n input test cases, one per line. The\ndescription of each test case consists of a single line that contains a non-\nnegative integer \n    n\n (\n    0 \n    \u2264 n \n    \u2264 2\n    \u00b710^9\n) \u2014 the number of\nlikes. Output Print \n    t\n answers to the given test cases in the order from\nthe input. Each printed value must have one of the following types: either an\ninteger from 0 to 999 which corresponds just to the number of likes, or a\nnumber of thousands from 1K to 999K, or a number of millions from 1M to 2000M.\nThe answer is equal to a view which is the closest (by difference) to the\ngiven number \n    n\n. If this rounding is ambiguous, then round answer up (to\na greater value). Example Input 9 999 123 0 1782 31415926 1500 999999 35499710\n2000000000 Output 999 123 0 2K 31M 2K 1M 35M 2000M Note Let's describe some\ntest cases: \n    1782\n can be displayed either as 1K or as 2K but 2K is the\nnearest view; \n    1500\n have same difference with 1K and 2K so it should be\nrounded up; \n    999999\n should be displayed as 1M since it's closer to it\nthan to 999K.\n\n",
        "cf_contest_id": 1297,
        "cf_index": "A",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "implementation"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "9\r\n999\r\n123\r\n0\r\n1782\r\n31415926\r\n1500\r\n999999\r\n35499710\r\n2000000000\r\n",
                "999\r\n123\r\n0\r\n2K\r\n31M\r\n2K\r\n1M\r\n35M\r\n2000M\r\n"
            ]
        ],
        "private_cases": []
    }
]