[
    {
        "name": "Connect",
        "description": "Alice lives on a flat planet that can be modeled as a square grid of size \n    n\n    \n    \u00d7 n\n, with rows and columns enumerated from \n    1\n to \n    n\n. We\nrepresent the cell at the intersection of row \n    r\n and column \n    c\n with\nordered pair \n    (r, c)\n. Each cell in the grid is either land or water. An\nexample planet with \n    n = 5\n. It also appears in the first sample test.\nAlice resides in land cell \n    (r_1, c_1)\n. She wishes to travel to land cell\n\n    (r_2, c_2)\n. At any moment, she may move to one of the cells adjacent to\nwhere she is\u2014in one of the four directions (i.e., up, down, left, or right).\nUnfortunately, Alice cannot swim, and there is no viable transportation means\nother than by foot (i.e., she can walk only on land). As a result, Alice's\ntrip may be impossible. To help Alice, you plan to create at most one tunnel\nbetween some two land cells. The tunnel will allow Alice to freely travel\nbetween the two endpoints. Indeed, creating a tunnel is a lot of effort: the\ncost of creating a tunnel between cells \n    (r_s, c_s)\n and \n    (r_t, c_t)\n\nis \n    (r_s-r_t)^2 + (c_s-c_t)^2\n. For now, your task is to find the minimum\npossible cost of creating at most one tunnel so that Alice could travel from\n\n    (r_1, c_1)\n to \n    (r_2, c_2)\n. If no tunnel needs to be created, the\ncost is \n    0\n. Input The first line contains one integer \n    n\n (\n    1\n    \n    \u2264 n \n    \u2264 50\n) \u2014 the width of the square grid. The second line\ncontains two space-separated integers \n    r_1\n and \n    c_1\n (\n    1 \n    \u2264\n    r_1, c_1 \n    \u2264 n\n) \u2014 denoting the cell where Alice resides. The third line\ncontains two space-separated integers \n    r_2\n and \n    c_2\n (\n    1 \n    \u2264\n    r_2, c_2 \n    \u2264 n\n) \u2014 denoting the cell to which Alice wishes to travel.\nEach of the following \n    n\n lines contains a string of \n    n\n characters.\nThe \n    j\n-th character of the \n    i\n-th such line (\n    1 \n    \u2264 i, j \n    \u2264\n    n\n) is 0 if \n    (i, j)\n is land or 1 if \n    (i, j)\n is water. It is\nguaranteed that \n    (r_1, c_1)\n and \n    (r_2, c_2)\n are land. Output Print\nan integer that is the minimum possible cost of creating at most one tunnel so\nthat Alice could travel from \n    (r_1, c_1)\n to \n    (r_2, c_2)\n. Examples\nInput 5 1 1 5 5 00001 11111 00111 00110 00110 Output 10 Input 3 1 3 3 1 010\n101 010 Output 8 Note In the first sample, a tunnel between cells \n    (1, 4)\n\nand \n    (4, 5)\n should be created. The cost of doing so is \n    (1-4)^2 +\n    (4-5)^2 = 10\n, which is optimal. This way, Alice could walk from \n    (1,\n    1)\n to \n    (1, 4)\n, use the tunnel from \n    (1, 4)\n to \n    (4, 5)\n, and\nlastly walk from \n    (4, 5)\n to \n    (5, 5)\n. In the second sample, clearly a\ntunnel between cells \n    (1, 3)\n and \n    (3, 1)\n needs to be created. The\ncost of doing so is \n    (1-3)^2 + (3-1)^2 = 8\n.\n\n",
        "cf_contest_id": 1130,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dfs and similar",
            "dsu"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 1\r\n5 5\r\n00001\r\n11111\r\n00111\r\n00110\r\n00110\r\n",
                "10"
            ],
            [
                "3\r\n1 3\r\n3 1\r\n010\r\n101\r\n010\r\n",
                "8"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 1\r\n1 1\r\n0\r\n",
                "0"
            ],
            [
                "5\r\n4 5\r\n1 1\r\n01111\r\n11111\r\n11110\r\n11010\r\n11000\r\n",
                "13"
            ],
            [
                "7\r\n4 5\r\n1 2\r\n0001000\r\n0111110\r\n0110110\r\n1100011\r\n0110110\r\n0111110\r\n0001000\r\n",
                "5"
            ],
            [
                "10\r\n2 2\r\n9 9\r\n1111111111\r\n1000111111\r\n1000111111\r\n1111111111\r\n1111000001\r\n1111011111\r\n1111010001\r\n1111010101\r\n1111000101\r\n1111111111\r\n",
                "5"
            ],
            [
                "10\r\n9 9\r\n2 2\r\n1111111111\r\n1000111111\r\n1000111111\r\n1111111111\r\n1111000001\r\n1111011111\r\n1111010001\r\n1111010101\r\n1111000101\r\n1111111111\r\n",
                "5"
            ],
            [
                "5\r\n1 3\r\n5 3\r\n00000\r\n11110\r\n00000\r\n01111\r\n00000\r\n",
                "0"
            ]
        ]
    }
]