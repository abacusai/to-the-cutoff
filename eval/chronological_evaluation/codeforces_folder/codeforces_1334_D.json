[
    {
        "name": "Minimum Euler Cycle",
        "description": "You are given a complete directed graph \n    K_n\n with \n    n\n vertices: each\npair of vertices \n    u \n    \u2260 v\n in \n    K_n\n have both directed edges \n    (u,\n    v)\n and \n    (v, u)\n; there are no self-loops. You should find such a cycle\nin \n    K_n\n that visits every directed edge exactly once (allowing for\nrevisiting vertices). We can write such cycle as a list of \n    n(n - 1) + 1\n\nvertices \n    v_1, v_2, v_3, \n    \u2026, v_n(n - 1) - 1, v_n(n - 1), v_n(n -\n    1) + 1 = v_1\n \u2014 a visiting order, where each \n    (v_i, v_i + 1)\n occurs\nexactly once. Find the lexicographically smallest such cycle. It's not hard to\nprove that the cycle always exists. Since the answer can be too large print\nits \n    [l, r]\n segment, in other words, \n    v_l, v_l + 1, \n    \u2026, v_r\n.\nInput The first line contains the single integer \n    T\n (\n    1 \n    \u2264 T \n    \u2264\n    100\n) \u2014 the number of test cases. Next \n    T\n lines contain test cases \u2014\none per line. The first and only line of each test case contains three\nintegers \n    n\n, \n    l\n and \n    r\n (\n    2 \n    \u2264 n \n    \u2264 10^5\n, \n    1 \n    \u2264\n    l \n    \u2264 r \n    \u2264 n(n - 1) + 1\n, \n    r - l + 1 \n    \u2264 10^5\n) \u2014 the number of\nvertices in \n    K_n\n, and segment of the cycle to print. It's guaranteed that\nthe total sum of \n    n\n doesn't exceed \n    10^5\n and the total sum of \n    r -\n    l + 1\n doesn't exceed \n    10^5\n. Output For each test case print the\nsegment \n    v_l, v_l + 1, \n    \u2026, v_r\n of the lexicographically smallest\ncycle that visits every edge exactly once. Example Input 3 2 1 3 3 3 6 99995\n9998900031 9998900031 Output 1 2 1 1 3 2 3 1 Note In the second test case, the\nlexicographically minimum cycle looks like: \n    1, 2, 1, 3, 2, 3, 1\n. In the\nthird test case, it's quite obvious that the cycle should start and end in\nvertex \n    1\n.\n\n",
        "cf_contest_id": 1334,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graphs",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2 1 3\r\n3 3 6\r\n99995 9998900031 9998900031\r\n",
                "1 2 1\r\n1 3 2 3 \r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n4 13 13\r\n",
                "1\r\n"
            ],
            [
                "10\r\n2 1 3\r\n2 1 3\r\n2 1 3\r\n2 1 3\r\n2 1 3\r\n2 1 3\r\n2 1 3\r\n2 1 3\r\n2 1 3\r\n2 1 3\r\n",
                "1 2 1\r\n1 2 1\r\n1 2 1\r\n1 2 1\r\n1 2 1\r\n1 2 1\r\n1 2 1\r\n1 2 1\r\n1 2 1\r\n1 2 1\r\n"
            ],
            [
                "1\r\n4 12 13\r\n",
                "4 1\r\n"
            ],
            [
                "5\r\n3 7 7\r\n4 13 13\r\n5 21 21\r\n6 31 31\r\n7 42 43\r\n",
                "1\r\n1\r\n1\r\n1\r\n7 1\r\n"
            ],
            [
                "1\r\n5 4 4\r\n",
                "3 \r\n"
            ],
            [
                "1\r\n3 1 1\r\n",
                "1 \r\n"
            ],
            [
                "1\r\n3 7 7\r\n",
                "1\r\n"
            ],
            [
                "1\r\n2 2 3\r\n",
                "2 1\r\n"
            ]
        ]
    }
]