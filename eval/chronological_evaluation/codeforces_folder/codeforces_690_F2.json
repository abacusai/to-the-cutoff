[
    {
        "name": "Tree of Life (medium)",
        "description": "Heidi got tired of deciphering the prophecy hidden in the Tree of Life and\ndecided to go back to her headquarters, rest a little and try there. Of\ncourse, she cannot uproot the Tree and take it with her, so she made a drawing\nof the Tree on a piece of paper. On second thought, she made more identical\ndrawings so as to have n in total (where n is the number of vertices of the\nTree of Life) \u2013 who knows what might happen? Indeed, on her way back Heidi was\nambushed by a group of zombies. While she managed to fend them off, they have\ndamaged her drawings in a peculiar way: from the i-th copy, the vertex\nnumbered i was removed, along with all adjacent edges. In each picture, the\nzombies have also erased all the vertex numbers and relabeled the remaining n\n- 1 vertices arbitrarily using numbers 1 to n (fortunately, each vertex still\nhas a distinct number). What's more, the drawings have been arbitrarily\nshuffled/reordered. Now Heidi wants to recover the Tree of Life from her\ndescriptions of all the drawings (as lists of edges). Input The first line of\nthe input contains Z \u2264 20 \u2013 the number of test cases. Z descriptions of single\ntest cases follow. In each test case, the first line of input contains numbers\nn (2 \u2264 n \u2264 100) and k (where k is the number of drawings; we have k = n). In\nthe following lines, the descriptions of the k drawings are given. The\ndescription of the i-th drawing is a line containing mi \u2013 the number of edges\nin this drawing, followed by mi lines describing edges, each of which contains\ntwo space-separated integers \u2013- the numbers of the two vertices connected by\nthe edge. Output If Heidi's drawings cannot possibly come from a single tree,\nyou should output the word NO. Otherwise, output one line containing the word\nYES and n - 1 lines describing any tree that Heidi's drawings could have come\nfrom. For every edge you should output the numbers of the vertices that it\nconnects, separated with a single space. If there are many solutions, print\nany of them. Example Input 1 5 5 2 4 1 2 1 1 3 1 3 4 1 4 3 2 1 3 3 1 3 2 4 1 3\n2 1 3 2 4 2 Output YES 2 5 4 2 3 2 5 1\n\n",
        "cf_contest_id": 690,
        "cf_index": "F2",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "hashing",
            "trees"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n5 5\r\n2\r\n4 1\r\n2 1\r\n1\r\n3 1\r\n3\r\n4 1\r\n4 3\r\n2 1\r\n3\r\n3 1\r\n3 2\r\n4 1\r\n3\r\n2 1\r\n3 2\r\n4 2\r\n",
                "YES\r\n1 2\r\n1 4\r\n3 4\r\n1 5\r\n"
            ]
        ],
        "private_cases": []
    }
]