[
    {
        "name": "Letters Shop",
        "description": "The letters shop showcase is a string \n    s\n, consisting of \n    n\n lowercase\nLatin letters. As the name tells, letters are sold in the shop. Letters are\nsold one by one from the leftmost to the rightmost. Any customer can only buy\nsome prefix of letters from the string \n    s\n. There are \n    m\n friends, the\n\n    i\n-th of them is named \n    t_i\n. Each of them is planning to estimate\nthe following value: how many letters (the length of the shortest prefix)\nwould s/he need to buy if s/he wanted to construct her/his name of bought\nletters. The name can be constructed if each letter is presented in the equal\nor greater amount. For example, for \n    s\n=\"arrayhead\" and \n    t_i\n=\"arya\"\n\n    5\n letters have to be bought (\"arrayhead\"). For example, for\n\n    s\n=\"arrayhead\" and \n    t_i\n=\"harry\" \n    6\n letters have to be bought\n(\"arrayhead\"). For example, for \n    s\n=\"arrayhead\" and \n    t_i\n=\"ray\"\n\n    5\n letters have to be bought (\"arrayhead\"). For example, for\n\n    s\n=\"arrayhead\" and \n    t_i\n=\"r\" \n    2\n letters have to be bought\n(\"arrayhead\"). For example, for \n    s\n=\"arrayhead\" and \n    t_i\n=\"areahydra\"\nall \n    9\n letters have to be bought (\"arrayhead\"). It is guaranteed that\nevery friend can construct her/his name using the letters from the string\n\n    s\n. Note that the values for friends are independent, friends are only\nestimating them but not actually buying the letters. Input The first line\ncontains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the\nlength of showcase string \n    s\n. The second line contains string \n    s\n,\nconsisting of exactly \n    n\n lowercase Latin letters. The third line contains\none integer \n    m\n (\n    1 \n    \u2264 m \n    \u2264 5 \n    \u00b7 10^4\n) \u2014 the number of\nfriends. The \n    i\n-th of the next \n    m\n lines contains \n    t_i\n (\n    1\n    \n    \u2264 |t_i| \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the name of the \n    i\n-th friend. It\nis guaranteed that \n    \u2211\n    _i=1^m |t_i| \n    \u2264 2 \n    \u00b7 10^5\n.\nOutput For each friend print the length of the shortest prefix of letters from\n\n    s\n s/he would need to buy to be able to construct her/his name of them.\nThe name can be constructed if each letter is presented in the equal or\ngreater amount. It is guaranteed that every friend can construct her/his name\nusing the letters from the string \n    s\n. Example Input 9 arrayhead 5 arya\nharry ray r areahydra Output 5 6 5 2 9\n\n",
        "cf_contest_id": 1187,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "9\r\narrayhead\r\n5\r\narya\r\nharry\r\nray\r\nr\r\nareahydra\r\n",
                "5\r\n6\r\n5\r\n2\r\n9\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\nabcd\r\n3\r\na\r\nd\r\nac\r\n",
                "1\r\n4\r\n3\r\n"
            ],
            [
                "100\r\nwjtwxtttttxjjwxtjtttwxjwjjwjxtwwxxwwwtwttwxjxxjxwxwjtjjwxxxxwwtwtxjxwtwtjjjxwjxjtwwwwtjtttjjtxtwtxjw\r\n10\r\nxwjxjwxtwwj\r\nwxjxxjxjx\r\nwtjxxxjxjxtwt\r\njwwxj\r\njtwjtxjxttxwtw\r\nwtwxjjjttjx\r\nwwwjtxw\r\ntjxjwtjwtw\r\ntjwtjjxtxjwt\r\nwxwtxtjw\r\n",
                "21\r\n29\r\n29\r\n12\r\n15\r\n17\r\n21\r\n14\r\n17\r\n14\r\n"
            ]
        ]
    }
]