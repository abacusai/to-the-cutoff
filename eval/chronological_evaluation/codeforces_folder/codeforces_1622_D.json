[
    {
        "name": "Shuffle",
        "description": "You are given a binary string (i. e. a string consisting of characters 0\nand/or 1) \n    s\n of length \n    n\n. You can perform the following operation\nwith the string \n    s\n at most once: choose a substring (a contiguous\nsubsequence) of \n    s\n having exactly \n    k\n characters 1 in it, and shuffle\nit (reorder the characters in the substring as you wish). Calculate the number\nof different strings which can be obtained from \n    s\n by performing this\noperation at most once. Input The first line contains two integers \n    n\n and\n\n    k\n (\n    2 \n    \u2264 n \n    \u2264 5000\n; \n    0 \n    \u2264 k \n    \u2264 n\n). The second line\ncontains the string \n    s\n of length \n    n\n, consisting of characters 0\nand/or 1. Output Print one integer \u2014 the number of different strings which can\nbe obtained from \n    s\n by performing the described operation at most once.\nSince the answer can be large, output it modulo \n    998244353\n. Examples\nInput 7 2 1100110 Output 16 Input 5 0 10010 Output 1 Input 8 1 10001000 Output\n10 Input 10 8 0010011000 Output 1 Note Some strings you can obtain in the\nfirst example: to obtain 0110110, you can take the substring from the\n\n    1\n-st character to the \n    4\n-th character, which is 1100, and reorder\nits characters to get 0110; to obtain 1111000, you can take the substring from\nthe \n    3\n-rd character to the \n    7\n-th character, which is 00110, and\nreorder its characters to get 11000; to obtain 1100101, you can take the\nsubstring from the \n    5\n-th character to the \n    7\n-th character, which is\n110, and reorder its characters to get 101. In the second example, \n    k = 0\n\nso you can only choose the substrings consisting only of 0 characters.\nReordering them doesn't change the string at all, so the only string you can\nobtain is 10010.\n\n",
        "cf_contest_id": 1622,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "math",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "7 2\r\n1100110\r\n",
                "16\r\n"
            ],
            [
                "5 0\r\n10010\r\n",
                "1\r\n"
            ],
            [
                "8 1\r\n10001000\r\n",
                "10\r\n"
            ],
            [
                "10 8\r\n0010011000\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "52 11\r\n0110011111001000010000100010010001010100000100110100\r\n",
                "478323746\r\n"
            ],
            [
                "459 15\r\n101010101010101010101010101010101010101010101111111111111111111111010101010101010101010101011111111111111111111101010101010101010101111111111111111111111101010101010101010111111111111111111111111101010101010101111111111111111111111111110110101010101011111111111111111111111111111001000111111111111111111111111111110000011111111111111111111111111111000001111111111111111111111111111100001111111111111111111111111111100111111111111111111111111111110111111111111\r\n",
                "0\r\n"
            ],
            [
                "105 58\r\n110101000111100000011011011101110100001000110011010101100010111001011111010010111101011011010110011011110\r\n",
                "132732930\r\n"
            ],
            [
                "291 159\r\n011001110111110110001111000110001001111100010001011000110100110010001101100110111010101111100111110000110111001100111010001000011001010011011100101000101011010110010011010100100101111010111000001011110101001011101110100100111110011001101010001110110101010101100011101110111000011111011001110\r\n",
                "1\r\n"
            ],
            [
                "47 25\r\n11110011111001110100101010011000110111011011101\r\n",
                "314445058\r\n"
            ],
            [
                "4 3\r\n1011\r\n",
                "4\r\n"
            ],
            [
                "5 2\r\n00011\r\n",
                "10\r\n"
            ],
            [
                "5 4\r\n11011\r\n",
                "5\r\n"
            ],
            [
                "81 5\r\n100000101000000011001101010100001010111000000110000000001000101101111000001000110\r\n",
                "187538\r\n"
            ]
        ]
    }
]