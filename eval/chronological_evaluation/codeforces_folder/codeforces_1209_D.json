[
    {
        "name": "Cow and Snacks",
        "description": "The legendary Farmer John is throwing a huge party, and animals from all over\nthe world are hanging out at his house. His guests are hungry, so he instructs\nhis cow Bessie to bring out the snacks! Moo! There are \n    n\n snacks flavors,\nnumbered with integers \n    1, 2, \n    \u2026, n\n. Bessie has \n    n\n snacks, one\nsnack of each flavor. Every guest has exactly two favorite flavors. The\nprocedure for eating snacks will go as follows: First, Bessie will line up the\nguests in some way. Then in this order, guests will approach the snacks one by\none. Each guest in their turn will eat all remaining snacks of their favorite\nflavor. In case no favorite flavors are present when a guest goes up, they\nbecome very sad. Help Bessie to minimize the number of sad guests by lining\nthe guests in an optimal way. Input The first line contains integers \n    n\n\nand \n    k\n (\n    2 \n    \u2264 n \n    \u2264 10^5\n, \n    1 \n    \u2264 k \n    \u2264 10^5\n), the\nnumber of snacks and the number of guests. The \n    i\n-th of the following\n\n    k\n lines contains two integers \n    x_i\n and \n    y_i\n (\n    1 \n    \u2264 x_i,\n    y_i \n    \u2264 n\n, \n    x_i \n     y_i\n), favorite snack flavors of the \n    i\n-th\nguest. Output Output one integer, the smallest possible number of sad guests.\nExamples Input 5 4 1 2 4 3 1 4 3 4 Output 1 Input 6 5 2 3 2 1 3 4 6 5 4 5\nOutput 0 Note In the first example, Bessie can order the guests like this:\n\n    3, 1, 2, 4\n. Guest \n    3\n goes first and eats snacks \n    1\n and\n\n    4\n. Then the guest \n    1\n goes and eats the snack \n    2\n only, because\nthe snack \n    1\n has already been eaten. Similarly, the guest \n    2\n goes up\nand eats the snack \n    3\n only. All the snacks are gone, so the guest \n    4\n\nwill be sad. In the second example, one optimal ordering is \n    2, 1, 3, 5,\n    4\n. All the guests will be satisfied.\n\n",
        "cf_contest_id": 1209,
        "cf_index": "D",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dsu",
            "graphs"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 4\r\n1 2\r\n4 3\r\n1 4\r\n3 4\r\n",
                "1"
            ],
            [
                "6 5\r\n2 3\r\n2 1\r\n3 4\r\n6 5\r\n4 5\r\n",
                "0"
            ]
        ],
        "private_cases": [
            [
                "2 1\r\n1 2\r\n",
                "0"
            ],
            [
                "100000 12\r\n8 7\r\n1 9\r\n5 4\r\n11 12\r\n7 8\r\n3 4\r\n3 5\r\n12 15\r\n15 13\r\n13 14\r\n7 8\r\n11 14\r\n",
                "4"
            ],
            [
                "10 15\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 1\r\n1 6\r\n2 7\r\n3 8\r\n4 9\r\n5 10\r\n6 8\r\n7 9\r\n8 10\r\n9 6\r\n10 7\r\n",
                "6"
            ],
            [
                "4 2\r\n1 2\r\n2 3\r\n",
                "0"
            ],
            [
                "4 2\r\n1 3\r\n2 4\r\n",
                "0"
            ]
        ]
    }
]