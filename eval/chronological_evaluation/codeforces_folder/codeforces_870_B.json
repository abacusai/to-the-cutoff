[
    {
        "name": "Maximum of Maximums of Minimums",
        "description": "You are given an array a1, a2, ..., an consisting of n integers, and an\ninteger k. You have to split the array into exactly k non-empty subsegments.\nYou'll then compute the minimum integer on each subsegment, and take the\nmaximum integer over the k obtained minimums. What is the maximum possible\ninteger you can get? Definitions of subsegment and array splitting are given\nin notes. Input The first line contains two integers n and k (1 \u2264 k \u2264 n \u2264\n10^5) \u2014 the size of the array a and the number of subsegments you have to\nsplit the array to. The second line contains n integers a1, a2, ..., an ( -\n10^9 \u2264 ai \u2264 10^9). Output Print single integer \u2014 the maximum possible integer\nyou can get if you split the array into k non-empty subsegments and take\nmaximum of minimums on the subsegments. Examples Input 5 2 1 2 3 4 5 Output 5\nInput 5 1 -4 -5 -3 -2 -1 Output -5 Note A subsegment [l, r] (l \u2264 r) of array a\nis the sequence al, al + 1, ..., ar. Splitting of array a of n elements into k\nsubsegments [l1, r1], [l2, r2], ..., [lk, rk] (l1 = 1, rk = n, li = ri - 1 + 1\nfor all i > 1) is k sequences (al1, ..., ar1), ..., (alk, ..., ark). In the\nfirst example you should split the array into subsegments [1, 4] and [5, 5]\nthat results in sequences (1, 2, 3, 4) and (5). The minimums are min(1, 2, 3,\n4) = 1 and min(5) = 5. The resulting maximum is max(1, 5) = 5. It is obvious\nthat you can't reach greater result. In the second example the only option you\nhave is to split the array into one subsegment [1, 5], that results in one\nsequence ( - 4, - 5, - 3, - 2, - 1). The only minimum is min( - 4, - 5, - 3, -\n2, - 1) = - 5. The resulting maximum is - 5.\n\n",
        "cf_contest_id": 870,
        "cf_index": "B",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 2\r\n1 2 3 4 5\r\n",
                "5\r\n"
            ],
            [
                "5 1\r\n-4 -5 -3 -2 -1\r\n",
                "-5\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 2\r\n10 9 1 -9 -7 -9 3 8 -10 5\r\n",
                "10\r\n"
            ],
            [
                "10 4\r\n-8 -1 2 -3 9 -8 4 -3 5 9\r\n",
                "9\r\n"
            ],
            [
                "1 1\r\n504262064\r\n",
                "504262064\r\n"
            ],
            [
                "3 3\r\n-54481850 -878017339 -486296116\r\n",
                "-54481850\r\n"
            ],
            [
                "2 2\r\n-333653905 224013643\r\n",
                "224013643\r\n"
            ],
            [
                "14 2\r\n-14 84 44 46 -75 -75 77 -49 44 -82 -74 -51 -9 -50\r\n",
                "-14\r\n"
            ],
            [
                "88 71\r\n-497 -488 182 104 40 183 201 282 -384 44 -29 494 224 -80 -491 -197 157 130 -52 233 -426 252 -61 -51 203 -50 195 -442 -38 385 232 -243 -49 163 340 -200 406 -254 -29 227 -194 193 487 -325 230 146 421 158 20 447 -97 479 493 -130 164 -471 -198 -330 -152 359 -554 319 544 -444 235 281 -467 337 -385 227 -366 -210 266 69 -261 525 526 -234 -355 177 109 275 -301 7 -41 553 -284 540\r\n",
                "553\r\n"
            ],
            [
                "39 1\r\n676941771 -923780377 -163050076 -230110947 -208029500 329620771 13954060 158950156 -252501602 926390671 -678745080 -921892226 -100127643 610420285 602175224 -839193819 471391946 910035173 777969600 -736144413 -489685522 60986249 830784148 278642552 -375298304 197973611 -354482364 187294011 636628282 25350767 636184407 -550869740 53830680 -42049274 -451383278 900048257 93225803 877923341 -279506435\r\n",
                "-923780377\r\n"
            ],
            [
                "3 2\r\n1 5 3\r\n",
                "3\r\n"
            ],
            [
                "5 2\r\n1 2 5 4 3\r\n",
                "3\r\n"
            ],
            [
                "3 2\r\n1 3 2\r\n",
                "2\r\n"
            ],
            [
                "3 2\r\n1 3 1\r\n",
                "1\r\n"
            ],
            [
                "5 3\r\n-2 -2 -2 -2 -2\r\n",
                "-2\r\n"
            ],
            [
                "5 2\r\n1 2 3 5 4\r\n",
                "4\r\n"
            ],
            [
                "5 2\r\n1 1 11 1 1\r\n",
                "1\r\n"
            ],
            [
                "3 3\r\n3 8 4\r\n",
                "8\r\n"
            ],
            [
                "6 3\r\n4 3 1 5 6 2\r\n",
                "6\r\n"
            ],
            [
                "2 1\r\n1 2\r\n",
                "1\r\n"
            ],
            [
                "5 2\r\n2 5 4 3 1\r\n",
                "2\r\n"
            ],
            [
                "5 2\r\n-1 1 5 4 3\r\n",
                "3\r\n"
            ],
            [
                "5 2\r\n5 2 1 9 3\r\n",
                "5\r\n"
            ],
            [
                "2 1\r\n1000000000 1000000000\r\n",
                "1000000000\r\n"
            ],
            [
                "1 1\r\n1000000000\r\n",
                "1000000000\r\n"
            ],
            [
                "5 2\r\n1 5 3 4 1\r\n",
                "1\r\n"
            ],
            [
                "3 2\r\n-1000000000 -1000000000 -1000000000\r\n",
                "-1000000000\r\n"
            ],
            [
                "2 2\r\n5 2\r\n",
                "5\r\n"
            ],
            [
                "7 3\r\n1 1 1 10 1 1 1\r\n",
                "10\r\n"
            ],
            [
                "9 3\r\n1 2 1 1 5 1 1 1 2\r\n",
                "5\r\n"
            ],
            [
                "9 3\r\n2 2 2 2 9 2 2 2 2\r\n",
                "9\r\n"
            ],
            [
                "3 3\r\n-1000000000 -1000000000 -1000000000\r\n",
                "-1000000000\r\n"
            ]
        ]
    }
]