[
    {
        "name": "Complete the MST",
        "description": "As a teacher, Riko Hakozaki often needs to help her students with problems\nfrom various subjects. Today, she is asked a programming task which goes as\nfollows. You are given an undirected complete graph with \n    n\n nodes, where\nsome edges are pre-assigned with a positive weight while the rest aren't. You\nneed to assign all unassigned edges with non-negative weights so that in the\nresulting fully-assigned complete graph the XOR sum of all weights would be\nequal to \n    0\n. Define the ugliness of a fully-assigned complete graph the\nweight of its minimum spanning tree, where the weight of a spanning tree\nequals the sum of weights of its edges. You need to assign the weights so that\nthe ugliness of the resulting graph is as small as possible. As a reminder, an\nundirected complete graph with \n    n\n nodes contains all edges \n    (u, v)\n\nwith \n    1 \n    \u2264 u < v \n    \u2264 n\n; such a graph has \n    n(n-1)/2\n\nedges. She is not sure how to solve this problem, so she asks you to solve it\nfor her. Input The first line contains two integers \n    n\n and \n    m\n (\n    2\n    \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n, \n    0 \n    \u2264 m \n    \u2264\n    min(2 \n    \u00b7 10^5,\n    \n    n(n-1)/2 - 1)\n) \u2014 the number of nodes and the number of pre-\nassigned edges. The inputs are given so that there is at least one unassigned\nedge. The \n    i\n-th of the following \n    m\n lines contains three integers\n\n    u_i\n, \n    v_i\n, and \n    w_i\n (\n    1 \n    \u2264 u_i, v_i \n    \u2264 n\n, \n    u\n    \n     v\n, \n    1 \n    \u2264 w_i < 2^30\n), representing the edge from \n    u_i\n\nto \n    v_i\n has been pre-assigned with the weight \n    w_i\n. No edge appears\nin the input more than once. Output Print on one line one integer \u2014 the\nminimum ugliness among all weight assignments with XOR sum equal to \n    0\n.\nExamples Input 4 4 2 1 14 1 4 14 3 2 15 4 3 8 Output 15 Input 6 6 3 6 4 2 4 1\n4 5 7 3 4 10 3 5 1 5 2 15 Output 0 Input 5 6 2 3 11 5 3 7 1 4 10 2 4 14 4 3 8\n2 5 6 Output 6 Note The following image showcases the first test case. The\nblack weights are pre-assigned from the statement, the red weights are\nassigned by us, and the minimum spanning tree is denoted by the blue edges.\n\n",
        "cf_contest_id": 1508,
        "cf_index": "C",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "data structures",
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 4\r\n2 1 14\r\n1 4 14\r\n3 2 15\r\n4 3 8\r\n",
                "15"
            ],
            [
                "6 6\r\n3 6 4\r\n2 4 1\r\n4 5 7\r\n3 4 10\r\n3 5 1\r\n5 2 15\r\n",
                "0"
            ],
            [
                "5 6\r\n2 3 11\r\n5 3 7\r\n1 4 10\r\n2 4 14\r\n4 3 8\r\n2 5 6\r\n",
                "6"
            ]
        ],
        "private_cases": [
            [
                "2 0\r\n",
                "0"
            ],
            [
                "6 8\r\n1 4 1\r\n1 5 1\r\n1 6 1\r\n2 4 1\r\n2 5 1\r\n2 6 1\r\n3 5 1\r\n3 6 1\r\n",
                "0"
            ],
            [
                "6 12\r\n1 3 8763000\r\n1 4 8763000\r\n1 5 8763000\r\n1 6 8763000\r\n2 3 8763000\r\n2 4 1\r\n2 5 8763000\r\n2 6 1\r\n3 5 8763000\r\n3 6 8763000\r\n4 5 8763000\r\n4 6 2\r\n",
                "8763002"
            ]
        ]
    }
]