[
    {
        "name": "Progress Monitoring",
        "description": "Programming teacher Dmitry Olegovich is going to propose the following task\nfor one of his tests for students: You are given a tree T with n vertices,\nspecified by its adjacency matrix a[1... n, 1... n]. What is the output of the\nfollowing pseudocode? used[1 ... n] = 0, ..., 0; procedure dfs(v): print v;\nused[v] = 1; for i = 1, 2, ..., n: if (a[v][i] == 1 and used[i] == 0): dfs(i);\ndfs(1); In order to simplify the test results checking procedure, Dmitry\nOlegovich decided to create a tree T such that the result is his favorite\nsequence b. On the other hand, Dmitry Olegovich doesn't want to provide\nstudents with same trees as input, otherwise they might cheat. That's why\nDmitry Olegovich is trying to find out the number of different trees T such\nthat the result of running the above pseudocode with T as input is exactly the\nsequence b. Can you help him? Two trees with n vertices are called different\nif their adjacency matrices a1 and a2 are different, i. e. there exists a pair\n(i, j), such that 1 \u2264 i, j \u2264 n and a1[i][j] \u2260 a2[i][j]. Input The first line\ncontains the positive integer n (1 \u2264 n \u2264 500) \u2014 the length of sequence b. The\nsecond line contains n positive integers b1, b2, ..., bn (1 \u2264 bi \u2264 n). It is\nguaranteed that b is a permutation, or in other words, each of the numbers 1,\n2, ..., n appears exactly once in the sequence b. Also it is guaranteed that\nb1 = 1. Output Output the number of trees satisfying the conditions above\nmodulo 10^9 + 7. Examples Input 3 1 2 3 Output 2 Input 3 1 3 2 Output 1\n\n",
        "cf_contest_id": 509,
        "cf_index": "F",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 2 3\r\n",
                "2\r\n"
            ],
            [
                "3\r\n1 3 2\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "5\r\n1 5 2 4 3\r\n",
                "3\r\n"
            ],
            [
                "4\r\n1 4 2 3\r\n",
                "2\r\n"
            ],
            [
                "6\r\n1 4 2 5 3 6\r\n",
                "15\r\n"
            ],
            [
                "2\r\n1 2\r\n",
                "1\r\n"
            ],
            [
                "10\r\n1 2 3 4 5 6 7 8 9 10\r\n",
                "4862\r\n"
            ],
            [
                "14\r\n1 14 3 4 2 6 7 8 9 10 5 12 13 11\r\n",
                "45913\r\n"
            ],
            [
                "25\r\n1 2 3 23 7 6 19 8 4 10 11 12 13 14 15 16 17 18 5 20 21 22 9 24 25\r\n",
                "230795455\r\n"
            ],
            [
                "49\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49\r\n",
                "217873312\r\n"
            ],
            [
                "57\r\n1 2 3 4 41 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 5 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57\r\n",
                "952779024\r\n"
            ],
            [
                "123\r\n1 2 63 57 107 6 7 8 9 10 71 12 13 87 15 16 96 18 19 20 82 22 23 24 25 26 27 72 29 30 85 32 33 34 35 36 37 54 111 40 41 55 43 44 45 46 47 11 49 50 51 39 53 38 42 56 4 58 59 60 61 62 76 64 65 66 67 68 69 70 3 102 73 74 75 91 77 78 103 80 81 21 83 84 31 86 14 88 89 98 17 92 93 94 95 48 122 90 106 100 101 28 52 104 105 99 5 108 109 110 79 112 113 114 115 116 117 118 119 120 121 97 123\r\n",
                "520051544\r\n"
            ]
        ]
    }
]