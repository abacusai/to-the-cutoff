[
    {
        "name": "Hemose in ICPC ?",
        "description": "This is an interactive problem! In the last regional contest Hemose,\nZeyadKhattab and YahiaSherif \u2014 members of the team Carpe Diem \u2014 did not\nqualify to ICPC because of some unknown reasons. Hemose was very sad and had a\nbad day after the contest, but ZeyadKhattab is very wise and knows Hemose very\nwell, and does not want to see him sad. Zeyad knows that Hemose loves tree\nproblems, so he gave him a tree problem with a very special device. Hemose has\na weighted tree with \n    n\n nodes and \n    n-1\n edges. Unfortunately, Hemose\ndoesn't remember the weights of edges. Let's define \n    Dist(u, v)\n for\n\n    u\n    \u2260 v\n as the greatest common divisor of the weights of all edges on\nthe path from node \n    u\n to node \n    v\n. Hemose has a special device.\nHemose can give the device a set of nodes, and the device will return the\nlargest \n    Dist\n between any two nodes from the set. More formally, if\nHemose gives the device a set \n    S\n of nodes, the device will return the\nlargest value of \n    Dist(u, v)\n over all pairs \n    (u, v)\n with \n    u\n,\n\n    v\n \n    \u2208\n \n    S\n and \n    u \n    \u2260 v\n. Hemose can use this Device\nat most \n    12\n times, and wants to find any two distinct nodes \n    a\n,\n\n    b\n, such that \n    Dist(a, b)\n is maximum possible. Can you help him?\nInteraction Begin the interaction from reading a single integer \n    n\n (\n    2\n    \n    \u2264 n \n    \u2264 10^3\n) \u2014 the number of nodes in the tree. Next, read \n    n-1\n\nlines. The \n    i\n-th of the next \n    n-1\n lines contains two integers\n\n    u_i\n and \n    v_i\n (\n    1 \n    \u2264 u_i, v_i \n    \u2264 n\n, \n    u_i\n    \u2260\n    v_i\n), which means that there's an edge between nodes \n    u_i\n and\n\n    v_i\n. It's guaranteed that weights of edges were \n    \u2264 10^9\n. It is\nguaranteed that the given graph is a tree. Now you may begin asking queries.\nTo ask a query about a set of \n    k\n nodes \n    v_1, v_2, \n    \u2026, v_k\n\n(\n    2 \n    \u2264 k \n    \u2264 n\n, \n    1 \n    \u2264 v_i \n    \u2264 n\n, all \n    v_i\n are\ndistinct), output: ? \n    k\n \n    v_1\n \n    v_2\n \n    \u2026\n \n    v_k\n You\nwill then receive an integer \n    x\n, the largest \n    Dist(v_i, v_j)\n over\n\n    1 \n    \u2264 i, j \n    \u2264 k\n with \n    i \n    \u2260 j\n. When you have found \n    a\n\nand \n    b\n (\n    1 \n    \u2264 a, b \n    \u2264 n)\n, \n    a\n    \u2260 b\n) such that\n\n    Dist(a, b)\n is the maximum possible, print the answer in the following\nformat: ! \n    a\n \n    b\n Outputting answer doesn't count towards the limit of\n\n    12\n queries. If there are several pairs \n    (a, b)\n with the same\nlargest \n    Dist(a, b)\n, you can output any. After printing a query do not\nforget to output the end of line and flush the output. Otherwise, you will get\nIdleness limit exceeded. To do this, use: fflush(stdout) or cout.flush() in\nC++; System.out.flush() in Java; flush(output) in Pascal; stdout.flush() in\nPython; see the documentation for other languages.Hacks To hack a solution,\nuse the following format. The first line should contain a single integer\n\n    n\n \n    (2 \n    \u2264 n \n    \u2264 10^3)\n \u2014 the number of nodes. The \n    i\n-th of\nthe next \n    n-1\n lines should contain three integers \n    u_i\n, \n    v_i\n,\n\n    w_i\n (\n    1 \n    \u2264 u_i, v_i \n    \u2264 n\n, \n    u_i\n     v_i\n, \n    1 \n    \u2264 w\n    \n    \u2264 10^9\n), which means that there's an edge between nodes \n    u_i\n and\n\n    v_i\n with weight \n    w_i\n. These \n    n-1\n edges must form a tree.\nExample Input 6 1 2 2 3 2 4 1 5 5 6 10 2 10 Output ? 6 1 2 3 4 5 6 ? 3 3 1 5 ?\n2 1 2 ! 1 2 Note The tree in the first sample:\n\n",
        "cf_contest_id": 1592,
        "cf_index": "D",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dfs and similar",
            "implementation",
            "interactive",
            "math",
            "number theory",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n1 2 10\r\n2 3 4\r\n2 4 6\r\n1 5 2\r\n5 6 10\r\n",
                "4\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n1 4 1\r\n2 3 1\r\n3 4 2\r\n3 5 1\r\n",
                "3\r\n"
            ],
            [
                "5\r\n3 5 1\r\n2 1 1\r\n1 5 10\r\n1 4 1\r\n",
                "3\r\n"
            ]
        ]
    }
]