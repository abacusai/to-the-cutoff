[
    {
        "name": "Perpetual Motion Machine",
        "description": "Developer Petr thinks that he invented a perpetual motion machine. Namely, he\nhas a lot of elements, which work in the following way. Each element has one\ncontroller that can be set to any non-negative real value. If a controller is\nset on some value x, then the controller consumes x^2 energy units per second.\nAt the same time, any two elements connected by a wire produce y\u00b7z energy\nunits per second, where y and z are the values set on their controllers. Petr\nhas only a limited number of wires, so he has already built some scheme of\nelements and wires, and is now interested if it's possible to set the\ncontrollers in such a way that the system produces at least as much power as\nit consumes, and at least one controller is set on the value different from 0.\nHelp him check this, and if it's possible, find the required integer values\nthat should be set. It is guaranteed that if there exist controllers' settings\nsatisfying the above conditions, then there exist required integer values not\ngreater than 10^6. Input There are several (at least one) test cases in the\ninput. The first line contains single integer \u2014 the number of test cases.\nThere is an empty line before each test case. The first line of test case\ncontains two integers n and m (1 \u2264 n \u2264 10^5, 0 \u2264 m \u2264 10^5) \u2014 the number of\nelements in the scheme and the number of wires. After that, m lines follow,\neach of them contains two integers a and b (1 \u2264 a, b \u2264 n) \u2014 two elements\nconnected by a wire. No element is connected with itself, no two elements are\nconnected by more than one wire. It is guaranteed that the sum of n and the\nsum of m over all test cases do not exceed 10^5. For hacks you can only use\ntests with one test case. Output Print answer for each test case. For each\ntest case print \"YES\" if it's possible to set the controllers in such a way\nthat the consumed power is not greater than the power produced, and the\nrequired values on the next line. The settings should be integers from 0 to\n10^6, inclusive, and at least one value should be different from 0. If there\nare multiple answers, print any of them. If it's not possible to set the\ncontrollers in the required way, print one line \"NO\". Example Input 4 4 4 1 2\n2 3 3 4 4 2 3 2 2 3 3 1 4 6 1 2 3 4 4 2 1 4 1 3 3 2 10 9 2 1 3 2 5 2 6 2 2 7 2\n8 2 9 2 10 4 2 Output YES 1 2 2 1 NO YES 1 1 1 1 YES 1 5 1 1 1 1 1 1 1 1 Note\nIn the first example it's possible to set the controllers in the required way,\nfor example, in the following way: set 1 on the first element, set 2 on the\nsecond and on the third, set 1 on the fourth. The consumed power is then equal\nto 1^2 + 2^2 + 2^2 + 1^2 = 10 energy units per second, the produced power is\nequal to 1\u00b72 + 2\u00b72 + 2\u00b71 + 2\u00b71 = 10 energy units per second. Thus the answer\nis \"YES\". In the second test case it's not possible to set the controllers in\nthe required way. For example, if we set all controllers to 0.5, then the\nconsumed powers equals 0.75 energy units per second, while produced power\nequals 0.5 energy units per second.\n\n",
        "cf_contest_id": 830,
        "cf_index": "E",
        "cf_rating": 3100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dp",
            "graphs",
            "implementation",
            "math",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4\r\n\r\n4 4\r\n1 2\r\n2 3\r\n3 4\r\n4 2\r\n\r\n3 2\r\n2 3\r\n3 1\r\n\r\n4 6\r\n1 2\r\n3 4\r\n4 2\r\n1 4\r\n1 3\r\n3 2\r\n\r\n10 9\r\n2 1\r\n3 2\r\n5 2\r\n6 2\r\n2 7\r\n2 8\r\n2 9\r\n2 10\r\n4 2\r\n",
                "YES\r\n1 1 1 1\r\nNO\r\nYES\r\n1 1 1 1\r\nYES\r\n1 2 1 1 1 1 1 1 1 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "9\r\n\r\n1 0\r\n\r\n2 0\r\n\r\n2 1\r\n1 2\r\n\r\n3 1\r\n2 3\r\n\r\n3 3\r\n1 2\r\n2 3\r\n3 1\r\n\r\n4 2\r\n1 2\r\n3 4\r\n\r\n4 3\r\n1 2\r\n2 3\r\n3 4\r\n\r\n4 3\r\n2 3\r\n3 4\r\n4 2\r\n\r\n4 4\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n",
                "NO\r\nNO\r\nNO\r\nNO\r\nYES\r\n1 1 1\r\nNO\r\nNO\r\nYES\r\n0 1 1 1\r\nYES\r\n1 1 1 1\r\n"
            ],
            [
                "2\r\n\r\n6 5\r\n1 2\r\n3 2\r\n2 4\r\n4 5\r\n4 6\r\n\r\n6 4\r\n2 3\r\n4 3\r\n5 3\r\n6 3\r\n",
                "YES\r\n1 2 1 2 1 1\r\nYES\r\n0 1 2 1 1 1\r\n"
            ],
            [
                "3\r\n\r\n4 3\r\n1 2\r\n2 3\r\n2 4\r\n\r\n5 4\r\n1 2\r\n2 3\r\n2 4\r\n4 5\r\n\r\n10 9\r\n1 2\r\n1 3\r\n1 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n",
                "NO\r\nNO\r\nNO\r\n"
            ],
            [
                "1\r\n\r\n7 6\r\n1 2\r\n2 3\r\n1 4\r\n4 5\r\n1 6\r\n6 7\r\n",
                "YES\r\n27 18 9 18 9 18 9\r\n"
            ],
            [
                "1\r\n\r\n11 10\r\n7 3\r\n5 2\r\n4 10\r\n2 6\r\n1 7\r\n3 4\r\n11 8\r\n8 10\r\n5 1\r\n11 6\r\n",
                "YES\r\n1 1 1 1 1 1 1 1 0 1 1\r\n"
            ],
            [
                "1\r\n\r\n7 6\r\n1 2\r\n1 3\r\n3 4\r\n1 5\r\n5 6\r\n6 7\r\n",
                "NO\r\n"
            ]
        ]
    }
]