[
    {
        "name": "Meta-set",
        "description": "You like the card board game \"Set\". Each card contains \n    k\n features, each\nof which is equal to a value from the set \n    0, 1, 2\n. The deck\ncontains all possible variants of cards, that is, there are \n    3^k\n\ndifferent cards in total. A feature for three cards is called good if it is\nthe same for these cards or pairwise distinct. Three cards are called a set if\nall \n    k\n features are good for them. For example, the cards \n    (0, 0,\n    0)\n, \n    (0, 2, 1)\n, and \n    (0, 1, 2)\n form a set, but the cards \n    (0,\n    2, 2)\n, \n    (2, 1, 2)\n, and \n    (1, 2, 0)\n do not, as, for example, the\nlast feature is not good. A group of five cards is called a meta-set, if there\nis strictly more than one set among them. How many meta-sets there are among\ngiven \n    n\n distinct cards? Input The first line of the input contains two\nintegers \n    n\n and \n    k\n (\n    1 \n    \u2264 n \n    \u2264 10^3\n, \n    1 \n    \u2264 k \n    \u2264\n    20\n) \u2014 the number of cards on a table and the number of card features. The\ndescription of the cards follows in the next \n    n\n lines. Each line\ndescribing a card contains \n    k\n integers \n    c_i, 1, c_i, 2, \n    \u2026,\n    c_i, k\n (\n    0 \n    \u2264 c_i, j\n    \u2264 2\n) \u2014 card features. It is guaranteed\nthat all cards are distinct. Output Output one integer \u2014 the number of meta-\nsets. Examples Input 8 4 0 0 0 0 0 0 0 1 0 0 0 2 0 0 1 0 0 0 2 0 0 1 0 0 1 0 0\n0 2 2 0 0 Output 1 Input 7 4 0 0 0 0 0 0 0 1 0 0 0 2 0 0 1 0 0 0 2 0 0 1 0 0 0\n2 0 0 Output 3 Input 9 2 0 0 0 1 0 2 1 0 1 1 1 2 2 0 2 1 2 2 Output 54 Input\n20 4 0 2 0 0 0 2 2 2 0 2 2 1 0 2 0 1 1 2 2 0 1 2 1 0 1 2 2 1 1 2 0 1 1 1 2 2 1\n1 0 2 1 1 2 1 1 1 1 1 2 1 2 0 2 1 1 2 2 1 2 1 2 1 1 1 0 1 1 2 0 0 1 0 2 2 0 0\n2 0 0 2 Output 0 Note Let's draw the cards indicating the first four features.\nThe first feature will indicate the number of objects on a card: \n    1\n,\n\n    2\n, \n    3\n. The second one is the color: red, green, purple. The third\nis the shape: oval, diamond, squiggle. The fourth is filling: open, striped,\nsolid. You can see the first three tests below. For the first two tests, the\nmeta-sets are highlighted. In the first test, the only meta-set is the five\ncards \n    (0000,\n     0001,\n     0002,\n     0010,\n     0020)\n. The sets in it are the\ntriples \n    (0000,\n     0001,\n     0002)\n and \n    (0000,\n     0010,\n     0020)\n.\nAlso, a set is the triple \n    (0100,\n     1000,\n     2200)\n which does not belong\nto any meta-set. In the second test, the following groups of five cards are\nmeta-sets: \n    (0000,\n     0001,\n     0002,\n     0010,\n     0020)\n, \n    (0000,\n    0001,\n     0002,\n     0100,\n     0200)\n, \n    (0000,\n     0010,\n     0020,\n     0100,\n    0200)\n. In there third test, there are \n    54\n meta-sets.\n\n",
        "cf_contest_id": 1735,
        "cf_index": "D",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "combinatorics",
            "data structures",
            "hashing",
            "math"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8 4\r\n0 0 0 0\r\n0 0 0 1\r\n0 0 0 2\r\n0 0 1 0\r\n0 0 2 0\r\n0 1 0 0\r\n1 0 0 0\r\n2 2 0 0\r\n",
                "1\r\n"
            ],
            [
                "7 4\r\n0 0 0 0\r\n0 0 0 1\r\n0 0 0 2\r\n0 0 1 0\r\n0 0 2 0\r\n0 1 0 0\r\n0 2 0 0\r\n",
                "3\r\n"
            ],
            [
                "9 2\r\n0 0\r\n0 1\r\n0 2\r\n1 0\r\n1 1\r\n1 2\r\n2 0\r\n2 1\r\n2 2\r\n",
                "54\r\n"
            ],
            [
                "20 4\r\n0 2 0 0\r\n0 2 2 2\r\n0 2 2 1\r\n0 2 0 1\r\n1 2 2 0\r\n1 2 1 0\r\n1 2 2 1\r\n1 2 0 1\r\n1 1 2 2\r\n1 1 0 2\r\n1 1 2 1\r\n1 1 1 1\r\n2 1 2 0\r\n2 1 1 2\r\n2 1 2 1\r\n2 1 1 1\r\n0 1 1 2\r\n0 0 1 0\r\n2 2 0 0\r\n2 0 0 2\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "20 4\r\n2 1 2 2\r\n1 2 0 2\r\n2 1 1 2\r\n2 2 2 0\r\n2 1 2 0\r\n0 0 0 1\r\n0 0 1 0\r\n1 1 1 1\r\n0 0 0 0\r\n1 1 2 0\r\n2 0 0 2\r\n1 0 1 1\r\n2 1 1 1\r\n0 0 2 2\r\n0 1 1 1\r\n0 2 0 0\r\n2 2 2 1\r\n2 2 2 2\r\n0 1 0 1\r\n0 2 2 2\r\n",
                "42\r\n"
            ],
            [
                "10 10\r\n0 0 0 2 0 1 1 0 0 2\r\n0 1 2 2 1 2 1 2 0 1\r\n0 2 2 2 0 1 0 0 1 0\r\n1 1 0 0 0 2 1 0 1 0\r\n1 1 0 2 2 0 2 0 2 2\r\n1 1 1 1 0 1 1 2 0 0\r\n1 2 1 2 0 2 2 0 0 1\r\n1 2 2 1 1 1 2 0 0 2\r\n1 2 2 2 1 0 2 0 0 2\r\n2 1 2 2 2 2 1 1 2 0\r\n",
                "0\r\n"
            ],
            [
                "1 1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "27 3\r\n1 1 2\r\n1 1 0\r\n1 2 0\r\n0 2 1\r\n1 1 1\r\n2 2 2\r\n2 2 0\r\n2 0 1\r\n0 0 0\r\n2 1 2\r\n0 0 1\r\n2 0 2\r\n0 0 2\r\n0 1 0\r\n1 2 1\r\n1 2 2\r\n0 2 2\r\n2 0 0\r\n1 0 1\r\n0 1 1\r\n2 1 0\r\n2 1 1\r\n2 2 1\r\n0 2 0\r\n1 0 2\r\n0 1 2\r\n1 0 0\r\n",
                "2106\r\n"
            ],
            [
                "40 4\r\n0 2 0 0\r\n0 2 2 2\r\n0 1 0 0\r\n2 2 1 2\r\n1 1 2 1\r\n1 0 2 2\r\n2 2 0 1\r\n2 0 2 2\r\n0 0 0 1\r\n2 1 2 2\r\n0 2 2 1\r\n0 0 1 0\r\n1 1 2 2\r\n0 1 1 1\r\n2 1 0 0\r\n2 1 0 2\r\n2 1 2 0\r\n1 0 1 2\r\n0 0 1 1\r\n2 0 2 0\r\n0 0 0 0\r\n1 2 0 0\r\n1 1 1 0\r\n2 2 2 0\r\n1 1 0 0\r\n2 1 0 1\r\n2 2 2 2\r\n0 0 2 1\r\n1 0 0 0\r\n2 1 2 1\r\n0 2 0 1\r\n1 2 2 2\r\n1 2 1 2\r\n0 1 1 2\r\n1 1 1 2\r\n2 1 1 2\r\n2 2 2 1\r\n0 1 2 0\r\n0 1 2 2\r\n1 1 0 1\r\n",
                "1485\r\n"
            ],
            [
                "18 4\r\n0 0 1 1\r\n0 0 2 2\r\n0 1 0 0\r\n0 2 0 0\r\n0 2 0 2\r\n0 2 2 0\r\n0 2 2 1\r\n1 0 0 2\r\n1 0 1 1\r\n1 0 1 2\r\n1 0 2 1\r\n1 1 0 2\r\n1 1 1 0\r\n2 0 2 2\r\n2 2 0 0\r\n2 2 0 2\r\n2 2 1 0\r\n2 2 1 1\r\n",
                "0\r\n"
            ],
            [
                "37 5\r\n0 2 0 1 0\r\n2 2 0 2 2\r\n2 0 2 0 0\r\n2 2 2 2 2\r\n1 2 0 0 2\r\n0 1 1 1 2\r\n0 2 0 2 2\r\n0 0 1 2 2\r\n2 0 0 1 0\r\n0 2 2 2 1\r\n0 2 2 2 0\r\n2 0 2 2 1\r\n0 0 2 0 1\r\n2 1 1 1 2\r\n1 2 0 1 0\r\n1 0 1 0 1\r\n1 2 1 0 0\r\n1 2 2 2 2\r\n2 2 1 2 1\r\n1 0 2 1 2\r\n2 1 1 2 1\r\n0 1 0 2 2\r\n1 0 1 1 1\r\n0 0 1 0 2\r\n0 1 0 0 1\r\n2 0 1 0 1\r\n1 2 2 1 2\r\n2 1 1 1 0\r\n0 2 2 0 1\r\n1 2 2 0 0\r\n0 1 1 2 1\r\n0 0 1 0 0\r\n2 1 0 2 0\r\n2 2 0 1 1\r\n1 0 2 2 2\r\n1 0 2 0 0\r\n2 2 1 1 2\r\n",
                "0\r\n"
            ],
            [
                "21 4\r\n0 0 0 2\r\n0 1 2 1\r\n1 1 0 1\r\n1 2 2 2\r\n0 1 2 2\r\n2 1 1 1\r\n2 1 1 2\r\n0 1 2 0\r\n1 0 1 2\r\n2 0 2 1\r\n2 0 2 2\r\n0 2 1 1\r\n2 0 2 0\r\n1 2 2 1\r\n2 2 0 2\r\n1 0 1 0\r\n2 2 0 0\r\n0 2 1 0\r\n2 1 1 0\r\n1 1 0 2\r\n1 2 2 0\r\n",
                "549\r\n"
            ],
            [
                "27 4\r\n0 0 1 2\r\n0 2 1 1\r\n0 0 1 0\r\n0 1 0 2\r\n2 2 2 2\r\n0 1 0 1\r\n0 1 1 0\r\n0 2 0 0\r\n2 2 2 1\r\n0 1 2 2\r\n2 2 2 0\r\n0 1 2 1\r\n0 0 2 2\r\n0 0 0 0\r\n0 1 1 1\r\n0 2 0 1\r\n0 0 1 1\r\n0 2 0 2\r\n0 0 0 1\r\n0 0 2 1\r\n0 2 1 2\r\n0 0 2 0\r\n0 1 0 0\r\n0 1 1 2\r\n0 2 1 0\r\n0 0 0 2\r\n0 1 2 0\r\n",
                "1080\r\n"
            ],
            [
                "35 5\r\n0 0 0 2 0\r\n0 0 1 1 0\r\n0 0 1 2 0\r\n0 0 2 2 1\r\n0 1 0 0 1\r\n0 1 0 1 0\r\n0 1 1 1 2\r\n0 2 2 1 1\r\n1 0 0 2 1\r\n1 0 0 2 2\r\n1 0 1 2 2\r\n1 1 0 0 2\r\n1 1 1 0 2\r\n1 1 1 1 1\r\n1 1 1 1 2\r\n1 1 1 2 1\r\n1 1 2 1 2\r\n1 1 2 2 1\r\n1 2 0 0 1\r\n1 2 0 1 1\r\n1 2 0 2 2\r\n1 2 1 0 1\r\n1 2 2 1 1\r\n1 2 2 2 2\r\n2 0 1 0 2\r\n2 0 1 1 1\r\n2 0 1 2 2\r\n2 0 2 0 0\r\n2 0 2 1 1\r\n2 0 2 1 2\r\n2 1 0 2 0\r\n2 1 0 2 2\r\n2 2 0 1 2\r\n2 2 0 2 0\r\n2 2 1 2 0\r\n",
                "0\r\n"
            ]
        ]
    }
]