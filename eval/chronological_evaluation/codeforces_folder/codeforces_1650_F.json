[
    {
        "name": "Vitaly and Advanced Useless Algorithms",
        "description": "Vitaly enrolled in the course Advanced Useless Algorithms. The course consists\nof \n    n\n tasks. Vitaly calculated that he has \n    a_i\n hours to do the task\n\n    i\n from the day he enrolled in the course. That is, the deadline before\nthe \n    i\n-th task is \n    a_i\n hours. The array \n    a\n is sorted in\nascending order, in other words, the job numbers correspond to the order in\nwhich the assignments are turned in. Vitaly does everything conscientiously,\nso he wants to complete each task by \n    100\n percent, or more. Initially,\nhis completion rate for each task is \n    0\n percent. Vitaly has \n    m\n\ntraining options, each option can be used not more than once. The \n    i\nth\noption is characterized by three integers: \n    e_i, t_i\n and \n    p_i\n. If\nVitaly uses the \n    i\nth option, then after \n    t_i\n hours (from the current\nmoment) he will increase the progress of the task \n    e_i\n by \n    p_i\n\npercent. For example, let Vitaly have \n    3\n of tasks to complete. Let the\narray \n    a\n have the form: \n    a = [5, 7, 8]\n. Suppose Vitaly has \n    5\n\nof options: \n    [e_1=1, t_1=1, p_1=30]\n, \n    [e_2=2, t_2=3, p_2=50]\n,\n\n    [e_3=2, t_3=3, p_3=100]\n, \n    [e_4=1, t_4=1, p_4=80]\n, \n    [e_5=3, t_5=3,\n    p_5=100]\n. Then, if Vitaly prepares in the following way, he will be able to\ncomplete everything in time: Vitaly chooses the \n    4\n-th option. Then in\n\n    1\n hour, he will complete the \n    1\n-st task at \n    80\n percent. He\nstill has \n    4\n hours left before the deadline for the \n    1\n-st task.\nVitaly chooses the \n    3\n-rd option. Then in \n    3\n hours, he will complete\nthe \n    2\n-nd task in its entirety. He has another \n    1\n hour left before\nthe deadline for the \n    1\n-st task and \n    4\n hours left before the\ndeadline for the \n    3\n-rd task. Vitaly chooses the \n    1\n-st option. Then\nafter \n    1\n hour, he will complete the \n    1\n-st task for \n    110\n\npercent, which means that he will complete the \n    1\n-st task just in time\nfor the deadline. Vitaly chooses the \n    5\n-th option. He will complete the\n\n    3\n-rd task for \n    2\n hours, and after another \n    1\n hour, Vitaly will\ncomplete the \n    3\n-rd task in its entirety. Thus, Vitaly has managed to\ncomplete the course completely and on time, using the \n    4\n options. Help\nVitaly \u2014 print the options for Vitaly to complete the tasks in the correct\norder. Please note: each option can be used not more than once. If there are\nseveral possible answers, it is allowed to output any of them. Input The first\nline of input data contains an integer \n    T\n (\n    1 \n    \u2264 T \n    \u2264 10^4\n)\n\u2014the number of input test cases in the test. The descriptions of the input\ntest case follow. The first line of each test case description contains two\nintegers \n    n\n and \n    m\n (\n    1 \n    \u2264 n,m \n    \u2264 10^5\n) \u2014the number of\njobs and the number of training options, respectively. The next line contains\n\n    n\n numbers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014\nthe time before the deadline of job \n    i\n. The array values \u2014 are non-\ndecreasing, that is \n    a_1 \n    \u2264 a_2 \n    \u2264\n    \u2026\n    \u2264 a_n\n. The following\n\n    m\n lines contain triples of numbers \n    e_i, t_i, p_i\n (\n    1 \n    \u2264 e_i\n    \n    \u2264 n\n, \n    1 \n    \u2264 t_i \n    \u2264 10^9\n, \n    1 \n    \u2264 p_i \n    \u2264 100\n) \u2014 if\nVitaly chooses this option, then after \n    t_i\n hours he will increase the\nprogress of the task \n    e_i\n by \n    p_i\n percent. The options are numbered\nfrom \n    1\n to \n    m\n in order in the input data. It is guaranteed that the\nsum of \n    n+m\n on all test cases does not exceed \n    2 \n    \u00b7 10^5\n.\nOutput For each test case, print on the first line the number \n    k\n, meaning\nthat for \n    k\n of options, Vitaly will be able to complete each task by\n\n    100\n percent or more on time. The options should not be repeated. Or\nprint -1 if Vitaly is unable to complete all tasks in time. If there is an\nanswer, on the next line print \n    k\n of different integers from \n    1\n to\n\n    m\n \u2014 the numbers of the options in the order you want. If there is more\nthan one answer, it is allowed to print any of them. Examples Input 5 3 5 5 7\n8 1 1 30 2 3 50 2 3 100 1 1 80 3 3 100 1 5 51 1 36 91 1 8 40 1 42 83 1 3 45 1\n13 40 2 9 9 20 2 8 64 2 7 64 1 20 56 2 8 76 2 20 48 1 2 89 1 3 38 2 18 66 1 7\n51 3 2 7 18 33 1 5 80 3 4 37 2 5 569452312 703565975 1 928391659 66 1 915310\n82 2 87017081 92 1 415310 54 2 567745964 82 Output 4 1 4 3 5 3 2 4 5 4 6 7 1 2\n-1 4 2 4 3 5 Input 3 3 9 20 31 40 1 9 64 3 17 100 3 9 59 3 18 57 3 20 49 2 20\n82 2 14 95 1 8 75 2 16 67 2 6 20 36 2 2 66 2 20 93 1 3 46 1 10 64 2 8 49 2 18\n40 1 1 1000000000 1 1000000000 100 Output -1 4 3 4 1 5 1 1\n\n",
        "cf_contest_id": 1650,
        "cf_index": "F",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3 5\r\n5 7 8\r\n1 1 30\r\n2 3 50\r\n2 3 100\r\n1 1 80\r\n3 3 100\r\n1 5\r\n51\r\n1 36 91\r\n1 8 40\r\n1 42 83\r\n1 3 45\r\n1 13 40\r\n2 9\r\n9 20\r\n2 8 64\r\n2 7 64\r\n1 20 56\r\n2 8 76\r\n2 20 48\r\n1 2 89\r\n1 3 38\r\n2 18 66\r\n1 7 51\r\n3 2\r\n7 18 33\r\n1 5 80\r\n3 4 37\r\n2 5\r\n569452312 703565975\r\n1 928391659 66\r\n1 915310 82\r\n2 87017081 92\r\n1 415310 54\r\n2 567745964 82\r\n",
                "4\r\n1 4 3 5\r\n3\r\n2 4 5\r\n4\r\n6 7 1 2\r\n-1\r\n4\r\n2 4 3 5\r\n"
            ],
            [
                "3\r\n3 9\r\n20 31 40\r\n1 9 64\r\n3 17 100\r\n3 9 59\r\n3 18 57\r\n3 20 49\r\n2 20 82\r\n2 14 95\r\n1 8 75\r\n2 16 67\r\n2 6\r\n20 36\r\n2 2 66\r\n2 20 93\r\n1 3 46\r\n1 10 64\r\n2 8 49\r\n2 18 40\r\n1 1\r\n1000000000\r\n1 1000000000 100\r\n",
                "-1\r\n4\r\n3 4 1 5\r\n1\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]