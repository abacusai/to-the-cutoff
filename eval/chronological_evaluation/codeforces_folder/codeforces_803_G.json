[
    {
        "name": "Periodic RMQ Problem",
        "description": "You are given an array a consisting of positive integers and q queries to this\narray. There are two types of queries: 1 l r x \u2014 for each index i such that l\n\u2264 i \u2264 r set ai = x. 2 l r \u2014 find the minimum among such ai that l \u2264 i \u2264 r. We\ndecided that this problem is too easy. So the array a is given in a compressed\nform: there is an array b consisting of n elements and a number k in the\ninput, and before all queries a is equal to the concatenation of k arrays b\n(so the size of a is n\u00b7k). Input The first line contains two integers n and k\n(1 \u2264 n \u2264 10^5, 1 \u2264 k \u2264 10^4). The second line contains n integers \u2014 elements\nof the array b (1 \u2264 bi \u2264 10^9). The third line contains one integer q (1 \u2264 q \u2264\n10^5). Then q lines follow, each representing a query. Each query is given\neither as 1 l r x \u2014 set all elements in the segment from l till r (including\nborders) to x (1 \u2264 l \u2264 r \u2264 n\u00b7k, 1 \u2264 x \u2264 10^9) or as 2 l r \u2014 find the minimum\namong all elements in the segment from l till r (1 \u2264 l \u2264 r \u2264 n\u00b7k). Output For\neach query of type 2 print the answer to this query \u2014 the minimum on the\ncorresponding segment. Examples Input 3 1 1 2 3 3 2 1 3 1 1 2 4 2 1 3 Output 1\n3 Input 3 2 1 2 3 5 2 4 4 1 4 4 5 2 4 4 1 1 6 1 2 6 6 Output 1 5 1\n\n",
        "cf_contest_id": 803,
        "cf_index": "G",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3 1\r\n1 2 3\r\n3\r\n2 1 3\r\n1 1 2 4\r\n2 1 3\r\n",
                "1\r\n3\r\n"
            ],
            [
                "3 2\r\n1 2 3\r\n5\r\n2 4 4\r\n1 4 4 5\r\n2 4 4\r\n1 1 6 1\r\n2 6 6\r\n",
                "1\r\n5\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 10\r\n10 8 10 9 2 2 4 6 10 1\r\n10\r\n1 17 87 5\r\n2 31 94\r\n1 5 56 8\r\n1 56 90 10\r\n1 25 93 6\r\n1 11 32 4\r\n2 20 49\r\n1 46 87 8\r\n2 14 48\r\n2 40 48\r\n",
                "1\r\n4\r\n4\r\n6\r\n"
            ],
            [
                "10 10\r\n4 2 3 8 1 2 1 7 5 4\r\n10\r\n2 63 87\r\n2 2 48\r\n2 5 62\r\n2 33 85\r\n2 30 100\r\n2 38 94\r\n2 7 81\r\n2 13 16\r\n2 26 36\r\n2 64 96\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "10 10\r\n8 7 4 6 8 2 4 9 4 3\r\n10\r\n1 43 67 7\r\n1 13 73 4\r\n1 35 71 6\r\n1 9 18 8\r\n1 3 55 2\r\n1 49 67 10\r\n1 22 49 2\r\n1 66 70 6\r\n1 17 21 10\r\n1 61 77 3\r\n",
                ""
            ]
        ]
    }
]