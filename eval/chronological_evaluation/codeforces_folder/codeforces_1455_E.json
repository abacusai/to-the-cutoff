[
    {
        "name": "Four Points",
        "description": "You are given four different integer points \n    p_1\n, \n    p_2\n, \n    p_3\n\nand \n    p_4\n on \n    \ud835\udc4b\ud835\udc4c\n grid. In one step you can choose one of\nthe points \n    p_i\n and move it in one of four directions by one. In other\nwords, if you have chosen point \n    p_i = (x, y)\n you can move it to \n    (x, y\n    + 1)\n, \n    (x, y - 1)\n, \n    (x + 1, y)\n or \n    (x - 1, y)\n. Your goal to\nmove points in such a way that they will form a square with sides parallel to\n\n    \ud835\udc42\ud835\udc4b\n and \n    \ud835\udc42\ud835\udc4c\n axes (a square with side \n    0\n\nis allowed). What is the minimum number of steps you need to make such a\nsquare? Input The first line contains a single integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 10^4\n) \u2014 the number of test cases. Each test case consists of four\nlines. Each line contains two integers \n    x\n and \n    y\n (\n    0 \n    \u2264 x, y\n    \n    \u2264 10^9\n) \u2014 coordinates of one of the points \n    p_i = (x, y)\n. All\npoints are different in one test case. Output For each test case, print the\nsingle integer \u2014 the minimum number of steps to make a square. Example Input 3\n0 2 4 2 2 0 2 4 1 0 2 0 4 0 6 0 1 6 2 2 2 5 4 1 Output 8 7 5 Note In the first\ntest case, one of the optimal solutions is shown below: Each point was moved\ntwo times, so the answer \n    2 + 2 + 2 + 2 = 8\n.In the second test case, one\nof the optimal solutions is shown below: The answer is \n    3 + 1 + 0 + 3 =\n    7\n.In the third test case, one of the optimal solutions is shown below: The\nanswer is \n    1 + 1 + 2 + 1 = 5\n.\n\n",
        "cf_contest_id": 1455,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "flows",
            "geometry",
            "greedy",
            "implementation",
            "math",
            "ternary search"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n0 2\r\n4 2\r\n2 0\r\n2 4\r\n1 0\r\n2 0\r\n4 0\r\n6 0\r\n1 6\r\n2 2\r\n2 5\r\n4 1\r\n",
                "8\r\n7\r\n5\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n0 0\r\n5 5\r\n0 5\r\n5 0\r\n",
                "0\r\n"
            ],
            [
                "6\r\n41 77\r\n11 61\r\n31 38\r\n18 43\r\n41 77\r\n11 61\r\n18 43\r\n31 38\r\n41 77\r\n31 38\r\n11 61\r\n18 43\r\n41 77\r\n31 38\r\n18 43\r\n11 61\r\n41 77\r\n18 43\r\n11 61\r\n31 38\r\n41 77\r\n18 43\r\n31 38\r\n11 61\r\n",
                "38\r\n38\r\n38\r\n38\r\n38\r\n38\r\n"
            ],
            [
                "1\r\n1 1\r\n1 0\r\n0 1\r\n0 0\r\n",
                "0\r\n"
            ]
        ]
    }
]