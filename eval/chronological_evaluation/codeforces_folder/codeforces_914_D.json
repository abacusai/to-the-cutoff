[
    {
        "name": "Bash and a Tough Math Puzzle",
        "description": "Bash likes playing with arrays. He has an array a1, a2, ... an of n integers.\nHe likes to guess the greatest common divisor (gcd) of different segments of\nthe array. Of course, sometimes the guess is not correct. However, Bash will\nbe satisfied if his guess is almost correct. Suppose he guesses that the gcd\nof the elements in the range [l, r] of a is x. He considers the guess to be\nalmost correct if he can change at most one element in the segment such that\nthe gcd of the segment is x after making the change. Note that when he\nguesses, he doesn't actually change the array \u2014 he just wonders if the gcd of\nthe segment can be made x. Apart from this, he also sometimes makes changes to\nthe array itself. Since he can't figure it out himself, Bash wants you to tell\nhim which of his guesses are almost correct. Formally, you have to process q\nqueries of one of the following forms: 1 l r x \u2014 Bash guesses that the gcd of\nthe range [l, r] is x. Report if this guess is almost correct. 2 i y \u2014 Bash\nsets ai to y. Note: The array is 1-indexed. Input The first line contains an\ninteger n (1 \u2264 n \u2264 5\u00b710^5) \u2014 the size of the array. The second line contains n\nintegers a1, a2, ..., an (1 \u2264 ai \u2264 10^9) \u2014 the elements of the array. The\nthird line contains an integer q (1 \u2264 q \u2264 4\u00b710^5) \u2014 the number of queries. The\nnext q lines describe the queries and may have one of the following forms: 1 l\nr x (1 \u2264 l \u2264 r \u2264 n, 1 \u2264 x \u2264 10^9). 2 i y (1 \u2264 i \u2264 n, 1 \u2264 y \u2264 10^9).\nGuaranteed, that there is at least one query of first type. Output For each\nquery of first type, output \"YES\" (without quotes) if Bash's guess is almost\ncorrect and \"NO\" (without quotes) otherwise. Examples Input 3 2 6 3 4 1 1 2 2\n1 1 3 3 2 1 9 1 1 3 2 Output YES YES NO Input 5 1 2 3 4 5 6 1 1 4 2 2 3 6 1 1\n4 2 1 1 5 2 2 5 10 1 1 5 2 Output NO YES NO YES Note In the first sample, the\narray initially is 2, 6, 3. For query 1, the first two numbers already have\ntheir gcd as 2. For query 2, we can achieve a gcd of 3 by changing the first\nelement of the array to 3. Note that the changes made during queries of type 1\nare temporary and do not get reflected in the array. After query 3, the array\nis now 9, 6, 3. For query 4, no matter which element you change, you cannot\nget the gcd of the range to be 2.\n\n",
        "cf_contest_id": 914,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "number theory"
        ],
        "time_limit_seconds": 2.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2 6 3\r\n4\r\n1 1 2 2\r\n1 1 3 3\r\n2 1 9\r\n1 1 3 2\r\n",
                "YES\r\nYES\r\nNO\r\n"
            ],
            [
                "5\r\n1 2 3 4 5\r\n6\r\n1 1 4 2\r\n2 3 6\r\n1 1 4 2\r\n1 1 5 2\r\n2 5 10\r\n1 1 5 2\r\n",
                "NO\r\nYES\r\nNO\r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1000000000\r\n1\r\n1 1 1 1000000000\r\n",
                "YES\r\n"
            ],
            [
                "4\r\n3 3 7 7\r\n1\r\n1 1 4 3\r\n",
                "NO\r\n"
            ]
        ]
    }
]