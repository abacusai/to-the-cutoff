[
    {
        "name": "Increase and Copy",
        "description": "Initially, you have the array \n    a\n consisting of one element \n    1\n (\n    a\n    = [1]\n). In one move, you can do one of the following things: Increase some\n(single) element of \n    a\n by \n    1\n (choose some \n    i\n from \n    1\n to\nthe current length of \n    a\n and increase \n    a_i\n by one); Append the copy\nof some (single) element of \n    a\n to the end of the array (choose some\n\n    i\n from \n    1\n to the current length of \n    a\n and append \n    a_i\n to\nthe end of the array). For example, consider the sequence of five moves: You\ntake the first element \n    a_1\n, append its copy to the end of the array and\nget \n    a = [1, 1]\n. You take the first element \n    a_1\n, increase it by\n\n    1\n and get \n    a = [2, 1]\n. You take the second element \n    a_2\n,\nappend its copy to the end of the array and get \n    a = [2, 1, 1]\n. You take\nthe first element \n    a_1\n, append its copy to the end of the array and get\n\n    a = [2, 1, 1, 2]\n. You take the fourth element \n    a_4\n, increase it by\n\n    1\n and get \n    a = [2, 1, 1, 3]\n. Your task is to find the minimum\nnumber of moves required to obtain the array with the sum at least \n    n\n.\nYou have to answer \n    t\n independent test cases. Input The first line of the\ninput contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number\nof test cases. Then \n    t\n test cases follow. The only line of the test case\ncontains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^9\n) \u2014 the lower bound on\nthe sum of the array. Output For each test case, print the answer: the minimum\nnumber of moves required to obtain the array with the sum at least \n    n\n.\nExample Input 5 1 5 42 1337 1000000000 Output 0 3 11 72 63244\n\n",
        "cf_contest_id": 1426,
        "cf_index": "C",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "constructive algorithms",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1\r\n5\r\n42\r\n1337\r\n1000000000\r\n",
                "0\r\n3\r\n11\r\n72\r\n63244\r\n"
            ]
        ],
        "private_cases": []
    }
]