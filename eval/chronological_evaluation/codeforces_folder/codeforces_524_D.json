[
    {
        "name": "Social Network",
        "description": "Polycarpus got an internship in one well-known social network. His test task\nis to count the number of unique users who have visited a social network\nduring the day. Polycarpus was provided with information on all user requests\nfor this time period. For each query, we know its time... and nothing else,\nbecause Polycarpus has already accidentally removed the user IDs corresponding\nto the requests from the database. Thus, it is now impossible to determine\nwhether any two requests are made by the same person or by different people.\nBut wait, something is still known, because that day a record was achieved \u2014 M\nsimultaneous users online! In addition, Polycarpus believes that if a user\nmade a request at second s, then he was online for T seconds after that, that\nis, at seconds s, s + 1, s + 2, ..., s + T - 1. So, the user's time online can\nbe calculated as the union of time intervals of the form [s, s + T - 1] over\nall times s of requests from him. Guided by these thoughts, Polycarpus wants\nto assign a user ID to each request so that: the number of different users\nonline did not exceed M at any moment, at some second the number of distinct\nusers online reached value M, the total number of users (the number of\ndistinct identifiers) was as much as possible. Help Polycarpus cope with the\ntest. Input The first line contains three integers n, M and T (1 \u2264 n, M \u2264 20\n000, 1 \u2264 T \u2264 86400) \u2014 the number of queries, the record number of online users\nand the time when the user was online after a query was sent. Next n lines\ncontain the times of the queries in the format \"hh:mm:ss\", where hh are hours,\nmm are minutes, ss are seconds. The times of the queries follow in the non-\ndecreasing order, some of them can coincide. It is guaranteed that all the\ntimes and even all the segments of type [s, s + T - 1] are within one 24-hour\nrange (from 00:00:00 to 23:59:59). Output In the first line print number R \u2014\nthe largest possible number of distinct users. The following n lines should\ncontain the user IDs for requests in the same order in which the requests are\ngiven in the input. User IDs must be integers from 1 to R. The requests of the\nsame user must correspond to the same identifiers, the requests of distinct\nusers must correspond to distinct identifiers. If there are multiple\nsolutions, print any of them. If there is no solution, print \"No solution\"\n(without the quotes). Examples Input 4 2 10 17:05:53 17:05:58 17:06:01\n22:39:47 Output 3 1 2 2 3 Input 1 2 86400 00:00:00 Output No solution Note\nConsider the first sample. The user who sent the first request was online from\n17:05:53 to 17:06:02, the user who sent the second request was online from\n17:05:58 to 17:06:07, the user who sent the third request, was online from\n17:06:01 to 17:06:10. Thus, these IDs cannot belong to three distinct users,\nbecause in that case all these users would be online, for example, at\n17:06:01. That is impossible, because M = 2. That means that some two of these\nqueries belonged to the same user. One of the correct variants is given in the\nanswer to the sample. For it user 1 was online from 17:05:53 to 17:06:02, user\n2 \u2014 from 17:05:58 to 17:06:10 (he sent the second and third queries), user 3 \u2014\nfrom 22:39:47 to 22:39:56. In the second sample there is only one query. So,\nonly one user visited the network within the 24-hour period and there couldn't\nbe two users online on the network simultaneously. (The time the user spent\nonline is the union of time intervals for requests, so users who didn't send\nrequests could not be online in the network.)\n\n",
        "cf_contest_id": 524,
        "cf_index": "D",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 2 10\r\n17:05:53\r\n17:05:58\r\n17:06:01\r\n22:39:47\r\n",
                "3\r\n1\r\n2\r\n2\r\n3\r\n"
            ],
            [
                "1 2 86400\r\n00:00:00\r\n",
                "No solution\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 2 40000\r\n06:30:57\r\n07:27:25\r\n09:10:21\r\n11:05:03\r\n12:42:37\r\n",
                "2\r\n1\r\n2\r\n2\r\n2\r\n2\r\n"
            ],
            [
                "7 4 30000\r\n05:08:54\r\n05:35:53\r\n06:03:20\r\n06:17:50\r\n09:29:46\r\n11:35:29\r\n14:49:02\r\n",
                "5\r\n1\r\n2\r\n3\r\n4\r\n4\r\n4\r\n5\r\n"
            ],
            [
                "10 3 30000\r\n00:06:54\r\n00:42:06\r\n03:49:45\r\n04:38:35\r\n05:33:30\r\n05:51:46\r\n10:46:34\r\n14:34:59\r\n14:40:06\r\n14:53:13\r\n",
                "6\r\n1\r\n2\r\n3\r\n3\r\n3\r\n3\r\n4\r\n5\r\n6\r\n6\r\n"
            ],
            [
                "1 1 86400\r\n00:00:00\r\n",
                "1\r\n1\r\n"
            ],
            [
                "2 2 10\r\n17:05:53\r\n17:05:58\r\n",
                "2\r\n1\r\n2\r\n"
            ]
        ]
    }
]