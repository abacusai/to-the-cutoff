[
    {
        "name": "Gadgets for dollars and pounds",
        "description": "Nura wants to buy k gadgets. She has only s burles for that. She can buy each\ngadget for dollars or for pounds. So each gadget is selling only for some type\nof currency. The type of currency and the cost in that currency are not\nchanging. Nura can buy gadgets for n days. For each day you know the exchange\nrates of dollar and pound, so you know the cost of conversion burles to\ndollars or to pounds. Each day (from 1 to n) Nura can buy some gadgets by\ncurrent exchange rate. Each day she can buy any gadgets she wants, but each\ngadget can be bought no more than once during n days. Help Nura to find the\nminimum day index when she will have k gadgets. Nura always pays with burles,\nwhich are converted according to the exchange rate of the purchase day. Nura\ncan't buy dollars or pounds, she always stores only burles. Gadgets are\nnumbered with integers from 1 to m in order of their appearing in input. Input\nFirst line contains four integers n, m, k, s (1 \u2264 n \u2264 2\u00b710^5, 1 \u2264 k \u2264 m \u2264\n2\u00b710^5, 1 \u2264 s \u2264 10^9) \u2014 number of days, total number and required number of\ngadgets, number of burles Nura has. Second line contains n integers ai (1 \u2264 ai\n\u2264 10^6) \u2014 the cost of one dollar in burles on i-th day. Third line contains n\nintegers bi (1 \u2264 bi \u2264 10^6) \u2014 the cost of one pound in burles on i-th day.\nEach of the next m lines contains two integers ti, ci (1 \u2264 ti \u2264 2, 1 \u2264 ci \u2264\n10^6) \u2014 type of the gadget and it's cost. For the gadgets of the first type\ncost is specified in dollars. For the gadgets of the second type cost is\nspecified in pounds. Output If Nura can't buy k gadgets print the only line\nwith the number -1. Otherwise the first line should contain integer d \u2014 the\nminimum day index, when Nura will have k gadgets. On each of the next k lines\nprint two integers qi, di \u2014 the number of gadget and the day gadget should be\nbought. All values qi should be different, but the values di can coincide (so\nNura can buy several gadgets at one day). The days are numbered from 1 to n.\nIn case there are multiple possible solutions, print any of them. Examples\nInput 5 4 2 2 1 2 3 2 1 3 2 1 2 3 1 1 2 1 1 2 2 2 Output 3 1 1 2 3 Input 4 3 2\n200 69 70 71 72 104 105 106 107 1 1 2 2 1 2 Output -1 Input 4 3 1 1000000000\n900000 910000 940000 990000 990000 999000 999900 999990 1 87654 2 76543 1\n65432 Output -1\n\n",
        "cf_contest_id": 609,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "greedy",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 4 2 2\r\n1 2 3 2 1\r\n3 2 1 2 3\r\n1 1\r\n2 1\r\n1 2\r\n2 2\r\n",
                "3\r\n1 1\r\n2 3\r\n"
            ],
            [
                "4 3 2 200\r\n69 70 71 72\r\n104 105 106 107\r\n1 1\r\n2 2\r\n1 2\r\n",
                "-1\r\n"
            ],
            [
                "4 3 1 1000000000\r\n900000 910000 940000 990000\r\n990000 999000 999900 999990\r\n1 87654\r\n2 76543\r\n1 65432\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 5 3 1000000\r\n921 853 547 187 164\r\n711 462 437 307 246\r\n2 94\r\n2 230\r\n1 373\r\n1 476\r\n2 880\r\n",
                "1\r\n1 1\r\n2 1\r\n3 1\r\n"
            ],
            [
                "10 10 10 1000000\r\n836 842 645 671 499 554 462 288 89 104\r\n880 722 623 651 591 573 154 532 136 59\r\n1 47\r\n1 169\r\n2 486\r\n1 262\r\n2 752\r\n2 498\r\n2 863\r\n2 616\r\n1 791\r\n1 656\r\n",
                "9\r\n1 9\r\n2 9\r\n4 9\r\n10 9\r\n3 9\r\n6 9\r\n9 9\r\n8 9\r\n5 9\r\n7 9\r\n"
            ],
            [
                "1 2 2 1000000\r\n96\r\n262\r\n1 699\r\n2 699\r\n",
                "1\r\n1 1\r\n2 1\r\n"
            ],
            [
                "1 2 2 1000000\r\n793\r\n33\r\n1 733\r\n2 406\r\n",
                "1\r\n2 1\r\n1 1\r\n"
            ],
            [
                "1 2 2 10000\r\n82\r\n996\r\n2 574\r\n2 217\r\n",
                "-1\r\n"
            ],
            [
                "1 2 2 1000000\r\n778\r\n62\r\n2 119\r\n2 220\r\n",
                "1\r\n1 1\r\n2 1\r\n"
            ],
            [
                "1 2 2 1000000\r\n963\r\n25\r\n2 961\r\n1 327\r\n",
                "1\r\n1 1\r\n2 1\r\n"
            ],
            [
                "10 20 20 1000000\r\n809 909 795 661 635 613 534 199 188 3\r\n475 585 428 379 185 177 66 104 15 38\r\n2 454\r\n1 863\r\n2 14\r\n2 104\r\n1 663\r\n2 885\r\n1 650\r\n1 967\r\n2 650\r\n2 483\r\n2 846\r\n1 283\r\n1 187\r\n2 533\r\n2 112\r\n2 938\r\n2 553\r\n1 816\r\n1 549\r\n2 657\r\n",
                "10\r\n3 9\r\n13 10\r\n12 10\r\n4 9\r\n19 10\r\n15 9\r\n7 10\r\n5 10\r\n18 10\r\n2 10\r\n8 10\r\n1 9\r\n10 9\r\n14 9\r\n17 9\r\n9 9\r\n20 9\r\n11 9\r\n6 9\r\n16 9\r\n"
            ],
            [
                "10 20 19 1000000\r\n650 996 972 951 904 742 638 93 339 151\r\n318 565 849 579 521 965 286 189 196 307\r\n2 439\r\n1 333\r\n2 565\r\n1 602\r\n2 545\r\n2 596\r\n2 821\r\n2 929\r\n1 614\r\n2 647\r\n2 909\r\n1 8\r\n2 135\r\n1 301\r\n1 597\r\n1 632\r\n1 437\r\n2 448\r\n2 631\r\n2 969\r\n",
                "-1\r\n"
            ],
            [
                "10 20 18 10000\r\n916 582 790 449 578 502 411 196 218 144\r\n923 696 788 609 455 570 330 435 284 113\r\n2 736\r\n1 428\r\n1 861\r\n2 407\r\n2 320\r\n1 340\r\n1 88\r\n1 172\r\n1 788\r\n2 633\r\n2 612\r\n2 571\r\n2 536\r\n2 30\r\n2 758\r\n2 90\r\n2 8\r\n1 970\r\n1 20\r\n1 22\r\n",
                "-1\r\n"
            ],
            [
                "10 20 16 1000000\r\n317 880 696 304 260 180 214 245 79 37\r\n866 621 940 89 718 674 195 267 12 49\r\n2 825\r\n2 197\r\n1 657\r\n1 231\r\n1 728\r\n2 771\r\n2 330\r\n2 943\r\n1 60\r\n1 89\r\n2 721\r\n2 959\r\n1 926\r\n2 215\r\n1 583\r\n2 680\r\n1 799\r\n2 887\r\n1 709\r\n1 316\r\n",
                "6\r\n9 6\r\n10 6\r\n2 4\r\n14 4\r\n7 4\r\n4 6\r\n20 6\r\n16 4\r\n11 4\r\n6 4\r\n1 4\r\n18 4\r\n8 4\r\n12 4\r\n15 6\r\n3 6\r\n"
            ],
            [
                "10 20 20 10000\r\n913 860 844 775 297 263 247 71 50 6\r\n971 938 890 854 643 633 427 418 190 183\r\n1 556\r\n2 579\r\n1 315\r\n2 446\r\n1 327\r\n1 724\r\n2 12\r\n1 142\r\n1 627\r\n1 262\r\n1 681\r\n1 802\r\n1 886\r\n1 350\r\n2 383\r\n1 191\r\n1 717\r\n1 968\r\n2 588\r\n1 57\r\n",
                "-1\r\n"
            ],
            [
                "1 93 46 46\r\n1\r\n1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n2 1\r\n1 2\r\n",
                "1\r\n46 1\r\n28 1\r\n80 1\r\n30 1\r\n78 1\r\n34 1\r\n36 1\r\n76 1\r\n38 1\r\n40 1\r\n74 1\r\n42 1\r\n44 1\r\n72 1\r\n32 1\r\n48 1\r\n70 1\r\n50 1\r\n52 1\r\n68 1\r\n54 1\r\n56 1\r\n66 1\r\n58 1\r\n60 1\r\n64 1\r\n62 1\r\n26 1\r\n2 1\r\n4 1\r\n92 1\r\n6 1\r\n8 1\r\n90 1\r\n10 1\r\n12 1\r\n88 1\r\n14 1\r\n16 1\r\n86 1\r\n82 1\r\n20 1\r\n84 1\r\n22 1\r\n18 1\r\n24 1\r\n"
            ]
        ]
    }
]