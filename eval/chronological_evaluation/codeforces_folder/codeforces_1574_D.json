[
    {
        "name": "The Strongest Build",
        "description": "Ivan is playing yet another roguelike computer game. He controls a single hero\nin the game. The hero has \n    n\n equipment slots. There is a list of\n\n    c_i\n items for the \n    i\n-th slot, the \n    j\n-th of them increases the\nhero strength by \n    a_i,j\n. The items for each slot are pairwise distinct\nand are listed in the increasing order of their strength increase. So,\n\n    a_i,1 < a_i,2 < \n    \u2026 < a_i,c_i\n. For each slot Ivan chooses\nexactly one item. Let the chosen item for the \n    i\n-th slot be the\n\n    b_i\n-th item in the corresponding list. The sequence of choices \n    [b_1,\n    b_2, \n    \u2026, b_n]\n is called a build. The strength of a build is the sum of\nthe strength increases of the items in it. Some builds are banned from the\ngame. There is a list of \n    m\n pairwise distinct banned builds. It's\nguaranteed that there's at least one build that's not banned. What is the\nbuild with the maximum strength that is not banned from the game? If there are\nmultiple builds with maximum strength, print any of them. Input The first line\ncontains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10\n) \u2014 the number of\nequipment slots. The \n    i\n-th of the next \n    n\n lines contains the\ndescription of the items for the \n    i\n-th slot. First, one integer \n    c_i\n\n(\n    1 \n    \u2264 c_i \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of items for the\n\n    i\n-th slot. Then \n    c_i\n integers \n    a_i,1, a_i,2, \n    \u2026,\n    a_i,c_i\n (\n    1 \n    \u2264 a_i,1 < a_i,2 < \n    \u2026 < a_i,c_i\n    \u2264\n    10^8\n). The sum of \n    c_i\n doesn't exceed \n    2 \n    \u00b7 10^5\n. The next\nline contains a single integer \n    m\n (\n    0 \n    \u2264 m \n    \u2264 10^5\n) \u2014 the\nnumber of banned builds. Each of the next \n    m\n lines contains a description\nof a banned build \u2014 a sequence of \n    n\n integers \n    b_1, b_2, \n    \u2026,\n    b_n\n (\n    1 \n    \u2264 b_i \n    \u2264 c_i\n). The builds are pairwise distinct, and\nthere's at least one build that's not banned. Output Print the build with the\nmaximum strength that is not banned from the game. If there are multiple\nbuilds with maximum strength, print any of them. Examples Input 3 3 1 2 3 2 1\n5 3 2 4 6 2 3 2 3 3 2 2 Output 2 2 3 Input 3 3 1 2 3 2 1 5 3 2 4 6 2 3 2 3 2 2\n3 Output 1 2 3 Input 3 3 1 2 3 2 1 5 3 2 4 6 2 3 2 3 2 2 3 Output 3 2 2 Input\n4 1 10 1 4 1 7 1 3 0 Output 1 1 1 1\n\n",
        "cf_contest_id": 1574,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "graphs",
            "greedy",
            "hashing",
            "implementation"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3 1 2 3\r\n2 1 5\r\n3 2 4 6\r\n2\r\n3 2 3\r\n3 2 2\r\n",
                "2 2 3\r\n"
            ],
            [
                "3\r\n3 1 2 3\r\n2 1 5\r\n3 2 4 6\r\n2\r\n3 2 3\r\n2 2 3\r\n",
                "3 2 2\r\n"
            ],
            [
                "3\r\n3 1 2 3\r\n2 1 5\r\n3 2 4 6\r\n2\r\n3 2 3\r\n2 2 3\r\n",
                "3 2 2\r\n"
            ],
            [
                "4\r\n1 10\r\n1 4\r\n1 7\r\n1 3\r\n0\r\n",
                "1 1 1 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n3 1 2 3\r\n3 1 2 3\r\n3 1 2 3\r\n21\r\n2 2 1\r\n3 3 1\r\n2 3 1\r\n3 2 1\r\n3 1 1\r\n3 1 3\r\n2 2 2\r\n3 2 3\r\n3 3 2\r\n2 2 3\r\n2 1 1\r\n1 3 2\r\n2 3 3\r\n1 1 3\r\n1 2 1\r\n1 3 1\r\n1 1 1\r\n1 3 3\r\n2 1 3\r\n1 1 2\r\n3 3 3\r\n",
                "2 3 2\r\n"
            ],
            [
                "2\r\n3 1 2 3\r\n133 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133\r\n4\r\n3 2\r\n3 133\r\n3 132\r\n3 131\r\n",
                "2 133\r\n"
            ],
            [
                "10\r\n2 1 110\r\n2 1 109\r\n2 1 108\r\n2 1 107\r\n2 1 106\r\n2 1 105\r\n2 1 104\r\n2 1 103\r\n2 1 102\r\n2 1 101\r\n1\r\n2 2 2 2 2 2 2 2 2 2\r\n",
                "2 2 2 2 2 2 2 2 2 1\r\n"
            ],
            [
                "2\r\n2 1 2\r\n129 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129\r\n3\r\n2 2\r\n2 129\r\n2 128\r\n",
                "1 129\r\n"
            ],
            [
                "10\r\n3 109 110 111\r\n2 1 109\r\n2 1 108\r\n2 1 107\r\n2 1 106\r\n2 1 105\r\n2 1 104\r\n2 1 103\r\n2 1 102\r\n2 1 101\r\n2\r\n3 2 2 2 2 2 2 2 2 2\r\n2 2 2 2 2 2 2 2 2 2\r\n",
                "1 2 2 2 2 2 2 2 2 2\r\n"
            ],
            [
                "2\r\n2 99999997 99999998\r\n32 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 100000000\r\n2\r\n2 32\r\n2 1\r\n",
                "1 32\r\n"
            ]
        ]
    }
]