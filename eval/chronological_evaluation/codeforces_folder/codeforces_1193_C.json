[
    {
        "name": "Scissors and Tape",
        "description": "You are given a piece of paper in the shape of a simple polygon \n    S\n. Your\ntask is to turn it into a simple polygon \n    T\n that has the same area as\n\n    S\n. You can use two tools: scissors and tape. Scissors can be used to cut\nany polygon into smaller polygonal pieces. Tape can be used to combine smaller\npieces into larger polygons. You can use each tool multiple times, in any\norder. The polygons given in the input have integer coordinates, but you are\nallowed to produce shapes with non-integer coordinates in your output. A\nformal definition of the task follows. A shape \n    Q=(Q_0,\n    \u2026,Q_n-1)\n\nis a sequence of three or more points in the plane such that: The closed\npolyline \n    Q_0Q_1Q_2\n    \u2026 Q_n-1Q_0\n never touches or intersects itself,\nand therefore it forms the boundary of a simple polygon. The polyline goes\naround the boundary of the polygon in the counter-clockwise direction. The\npolygon whose boundary is the shape \n    Q\n will be denoted \n    P(Q)\n. Two\nshapes are called equivalent if one can be translated and/or rotated to become\nidentical with the other. Note that mirroring a shape is not allowed. Also\nnote that the order of points matters: the shape\n\n    (Q_1,\n    \u2026,Q_n-1,Q_0)\n is not necessarily equivalent to the shape\n\n    (Q_0,\n    \u2026,Q_n-1)\n. In the figure on the left: Shapes \n    U\n and\n\n    V\n are equivalent. Shape \n    W\n is not equivalent with them because the\npoints of \n    W\n are given in a different order. Regardless of the order of\npoints, the fourth shape is not equivalent with the previous ones either as\nflipping a shape is not allowed. In both input and output, a shape with\n\n    n\n points is represented as a single line that contains \n    2n+1\n space-\nseparated numbers: the number \n    n\n followed by the coordinates of the\npoints: \n    Q_0,x\n, \n    Q_0,y\n, \n    Q_1,x\n, ... Shapes have\nidentification numbers (IDs). The given shape \n    S\n has ID 0, the shapes you\nproduce in your solutions are given IDs 1, 2, 3, ..., in the order in which\nthey are produced. Shapes \n    B_1,\n    \u2026,B_k\n form a subdivision of shape\n\n    A\n if: The union of all \n    P(B_i)\n is exactly \n    P(A)\n. For each\n\n    i\n    \u2260 j\n, the area of the intersection of \n    P(B_i)\n and \n    P(B_j)\n\nis zero. The scissors operation destroys one existing shape \n    A\n and\nproduces one or more shapes \n    B_1,\n    \u2026,B_k\n that form a subdivision of\n\n    A\n. In the figure: Shape \n    A\n (square) subdivided into shapes\n\n    B_1\n, \n    B_2\n, \n    B_3\n (the three triangles). One valid way to\ndescribe one of the \n    B_i\n is \"3 3 1 6 1 5.1 4\". The tape operation\ndestroys one or more existing shapes \n    A_1,\n    \u2026,A_k\n and produces one\nnew shape \n    B\n. In order to perform this operation, you must first specify\nshapes \n    C_1,\n    \u2026,C_k\n and only then the final shape \n    B\n. These\nshapes must satisfy the following: For each \n    i\n, the shape \n    C_i\n is\nequivalent to the shape \n    A_i\n. The shapes \n    C_1,\n    \u2026,C_k\n form a\nsubdivision of the shape \n    B\n. Informally, you choose the shape \n    B\n and\nshow how to move each of the existing \n    A_i\n to its correct location\n\n    C_i\n within \n    B\n. Note that only the shape \n    B\n gets a new ID, the\nshapes \n    C_i\n do not. Input The first line contains the source shape\n\n    S\n. The second line contains the target shape \n    T\n. Each shape has\nbetween 3 and 10 points, inclusive. Both shapes are given in the format\nspecified above. All coordinates in the input are integers between \n    -10^6\n\nand \n    10^6\n, inclusive. In each shape, no three points form an angle\nsmaller than 3 degrees. (This includes non-consecutive points and implies that\nno three points are collinear.) The polygons \n    P(S)\n and \n    P(T)\n have\nthe same area. Output Whenever you use the scissors operation, output a block\nof lines of the form: scissors id(A) k B_1 B_2 ... B_k where \n    id(A)\n is\nthe ID of the shape you want to destroy, \n    k\n is the number of new shapes\nyou want to produce, and \n    B_1,\n    \u2026,B_k\n are those shapes. Whenever you\nuse the tape operation, output a block of lines of the form: tape k id(A_1)\n... id(A_k) C_1 C_2 ... C_k B where \n    k\n is the number of shapes you want\nto tape together, \n    id(A_1),\n    \u2026,id(A_k)\n are their IDs,\n\n    C_1,\n    \u2026,C_k\n are equivalent shapes showing their position within\n\n    B\n, and \n    B\n is the final shape obtained by taping them together. It\nis recommended to output coordinates of points to at least 10 decimal places.\nThe output must satisfy the following: All coordinates of points in the output\nmust be between \n    -10^7\n and \n    10^7\n, inclusive. Each shape in the\noutput must have at most \n    100\n points. In each operation the number\n\n    k\n of shapes must be between \n    1\n and \n    100\n, inclusive. The number\nof operations must not exceed \n    2000\n. The total number of points in all\nshapes in the output must not exceed \n    20000\n. In the end, there must be\nexactly one shape (that hasn't been destroyed), and that shape must be\nequivalent to \n    T\n. All operations must be valid according to the checker.\nSolutions with small rounding errors will be accepted. (Internally, all\ncomparisons check for absolute or relative error up to \n    10^-3\n when\nverifying each condition.) Scoring A shape is called a nice rectangle if it\nhas the form \n    ((0,0),\u00a0 (x,0),\u00a0 (x,y),\u00a0 (0,y))\n for some positive integers\n\n    x\n and \n    y\n. A shape is called a nice square if additionally\n\n    x=y\n. A shape \n    A\n is called strictly convex if all inner angles of\nthe polygon \n    P(A)\n are smaller than 180 degrees. Subtask 1 (5 points):\n\n    S\n and \n    T\n are nice rectangles. All coordinates of all points are\nintegers between 0 and 10, inclusive Subtask 2 (13 points): \n    S\n is a nice\nrectangle with \n    x>y\n, and \n    T\n is a nice square Subtask 3 (12 points):\n\n    S\n and \n    T\n are nice rectangles Subtask 4 (14 points): \n    S\n is a\ntriangle and \n    T\n is a nice square Subtask 5 (10 points): \n    S\n and\n\n    T\n are triangles Subtask 6 (16 points): \n    S\n is a strictly convex\npolygon and \n    T\n is a nice rectangle Subtask 7 (11 points): \n    T\n is a\nnice rectangle Subtask 8 (19 points): no additional constraints Examples Input\n6 0 0 6 0 6 4 5 4 5 9 0 9 4 0 0 7 0 7 7 0 7 Output scissors 0 5 3 0 0 3 0 3 4\n3 3 4 0 4 0 0 3 3 0 6 0 6 4 3 6 4 3 4 3 0 4 0 4 5 4 5 9 0 9 tape 5 1 2 5 3 4 3\n0 3 0 0 4 0 3 4 0 7 0 7 4 4 0 3 4 0 7 4 3 7 3 7 4 7 7 3 7 3 3 7 0 7 0 3 4 0 0\n7 0 7 7 0 7 Input 4 0 0 3 0 3 3 0 3 4 7 -1 10 -1 11 2 8 2 Output scissors 0 2\n3 0 0 1 3 0 3 4 1 3 0 0 3 0 3 3 tape 2 1 2 3 110 -1 111 2 110 2 4 108 2 107 -1\n110 -1 110 2 4 107 -1 110 -1 111 2 108 2 Input 4 0 0 9 0 9 1 0 1 4 0 0 3 0 3 3\n0 3 Output scissors 0 2 4 1.470000000 0 9 0 9 1 1.470000000 1 4 0 0\n1.470000000 0 1.470000000 1 0 1 scissors 1 2 4 1.470000000 0 6 0 6 1\n1.470000000 1 4 9 0 9 1 6 1 6 0 tape 2 4 3 4 3 2 3 1 6 1 6 2 4 6 1 1.470000000\n1 1.470000000 0 6 0 6 1.470000000 0 6 0 6 2 3 2 3 1 1.470000000 1 scissors 5 4\n4 1.470000000 0 3 0 3 1 1.470000000 1 4 3 0 4 0 4 2 3 2 4 4 2 4 0 5 0 5 2 4 5\n0 6 0 6 2 5 2 tape 5 2 6 7 8 9 4 0 0 1.470000000 0 1.470000000 1 0 1 4\n1.470000000 0 3 0 3 1 1.470000000 1 4 0 2 0 1 2 1 2 2 4 0 2 2 2 2 3 0 3 4 3 3\n2 3 2 1 3 1 4 0 0 3 0 3 3 0 3 Note The figure below shows the first example\noutput. On the left is the original figure after using the scissors, on the\nright are the corresponding \n    C_i\n when we tape those pieces back together.\nIn the second example output, note that it is sufficient if the final shape is\nequivalent to the target one, they do not have to be identical. The figure\nbelow shows three stages of the third example output. First, we cut the input\nrectangle into two smaller rectangles, then we cut the bigger of those two\nrectangles into two more. State after these cuts is shown in the top left part\nof the figure. Continuing, we tape the two new rectangles together to form a\nsix-sided polygon, and then we cut that polygon into three 2-by-1 rectangles\nand one smaller rectangle. This is shown in the bottom left part of the\nfigure. Finally, we take the rectangle we still have from the first step and\nthe four new rectangles and we assemble them into the desired 3-by-3 square.\n\n",
        "cf_contest_id": 1193,
        "cf_index": "C",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "constructive algorithms",
            "geometry"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "6 0 0 6 0 6 4 5 4 5 9 0 9\r\n4 0 0 7 0 7 7 0 7\r\n",
                "scissors\r\n0 4\r\n3 0.000000000000000 9.000000000000000 0.000000000000000 0.000000000000000 6.000000000000000 0.000000000000000 \r\n3 6.000000000000000 0.000000000000000 6.000000000000000 4.000000000000000 5.000000000000000 4.000000000000000 \r\n3 0.000000000000000 9.000000000000000 6.000000000000000 0.000000000000000 5.000000000000000 4.000000000000000 \r\n3 5.000000000000000 4.000000000000000 5.000000000000000 9.000000000000000 0.000000000000000 9.000000000000000 \r\nscissors\r\n1 3\r\n4 6.000000000000000 0.00000000000..."
            ],
            [
                "4 0 0 3 0 3 3 0 3\r\n4 7 -1 10 -1 11 2 8 2\r\n",
                "scissors\r\n0 2\r\n3 0.000000000000000 3.000000000000000 0.000000000000000 0.000000000000000 3.000000000000000 0.000000000000000 \r\n3 3.000000000000000 0.000000000000000 3.000000000000000 3.000000000000000 0.000000000000000 3.000000000000000 \r\nscissors\r\n1 3\r\n4 3.000000000000000 0.000000000000000 0.000000000000000 3.000000000000000 0.000000000000000 1.500000000000000 1.500000000000000 0.000000000000000 \r\n3 0.000000000000000 1.500000000000000 0.000000000000000 0.000000000000000 0.750000000000000 0.750000000000000..."
            ],
            [
                "4 0 0 3 0 3 8 0 8\r\n4 0 0 4 0 4 6 0 6\r\n",
                "scissors\r\n0 2\r\n3 0.000000000000000 8.000000000000000 0.000000000000000 0.000000000000000 3.000000000000000 0.000000000000000 \r\n3 3.000000000000000 0.000000000000000 3.000000000000000 8.000000000000000 0.000000000000000 8.000000000000000 \r\nscissors\r\n1 3\r\n4 3.000000000000000 0.000000000000000 0.000000000000000 8.000000000000000 0.000000000000000 4.000000000000000 1.500000000000000 0.000000000000000 \r\n3 0.000000000000000 4.000000000000000 0.000000000000000 0.000000000000000 1.315068493150685 0.493150684931507..."
            ]
        ],
        "private_cases": []
    }
]