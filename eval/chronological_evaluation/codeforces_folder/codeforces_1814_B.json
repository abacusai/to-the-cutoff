[
    {
        "name": "Long Legs",
        "description": "A robot is placed in a cell \n    (0, 0)\n of an infinite grid. This robot has\nadjustable length legs. Initially, its legs have length \n    1\n. Let the robot\ncurrently be in the cell \n    (x, y)\n and have legs of length \n    m\n. In one\nmove, it can perform one of the following three actions: jump into the cell\n\n    (x + m, y)\n; jump into the cell \n    (x, y + m)\n; increase the length of\nthe legs by \n    1\n, i. e. set it to \n    m + 1\n. What's the smallest number\nof moves robot has to make to reach a cell \n    (a, b)\n? Input The first line\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of\ntest cases. The only line of each test case contains two integers \n    a\n and\n\n    b\n (\n    1 \n    \u2264 a, b \n    \u2264 10^9\n) \u2014 the ending cell. Output For each\ntest case, print a single integer \u2014 the smallest number of moves the robot is\nrequired to make to reach a cell \n    (a, b)\n from a cell \n    (0, 0)\n.\nExample Input 3 1 1 1 6 8 4 Output 2 5 6 Note In the first testcase, the robot\ncan first jump to \n    (0, 1)\n, then to \n    (1, 1)\n. If it ever increases the\nlength of its legs, it will only be able to jump past \n    (1, 1)\n. In the\nsecond testcase, the robot can jump to \n    (1, 0)\n, then increase the length\nof its length to \n    2\n and jump three times to reach \n    (1, 6)\n. In the\nthird testcase, the robot can increase the length of its legs three times to\nmake it \n    4\n. Then jump to \n    (0, 4)\n. Then jump twice to reach \n    (8,\n    4)\n.\n\n",
        "cf_contest_id": 1814,
        "cf_index": "B",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 1\r\n1 6\r\n8 4\r\n",
                "2\r\n5\r\n6\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1000000000 1\r\n",
                "63246\r\n"
            ],
            [
                "1\r\n327846923 549643538\r\n",
                "59244\r\n"
            ],
            [
                "5\r\n403627484 132038919\r\n699458635 519527521\r\n390070862 396700240\r\n859135992 435780239\r\n843748782 9122777\r\n",
                "46288\r\n69827\r\n56098\r\n71969\r\n58407\r\n"
            ],
            [
                "20\r\n144108930 470211272\r\n144108930 470211272\r\n144108930 470211272\r\n144108930 470211272\r\n144108930 470211272\r\n144108930 470211272\r\n144108930 470211272\r\n144108930 470211272\r\n144108930 470211272\r\n144108930 470211272\r\n144108930 470211272\r\n144108930 470211272\r\n144108930 470211272\r\n144108930 470211272\r\n144108930 470211272\r\n144108930 470211272\r\n144108930 470211272\r\n144108930 470211272\r\n144108930 470211272\r\n144108930 470211272\r\n",
                "49570\r\n49570\r\n49570\r\n49570\r\n49570\r\n49570\r\n49570\r\n49570\r\n49570\r\n49570\r\n49570\r\n49570\r\n49570\r\n49570\r\n49570\r\n49570\r\n49570\r\n49570\r\n49570\r\n49570\r\n"
            ],
            [
                "2\r\n377357187 956029\r\n51851002 297316\r\n",
                "38900\r\n14442\r\n"
            ],
            [
                "1\r\n18756 11840\r\n",
                "349\r\n"
            ]
        ]
    }
]