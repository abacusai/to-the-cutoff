[
    {
        "name": "One-Dimensional Battle Ships",
        "description": "Alice and Bob love playing one-dimensional battle ships. They play on the\nfield in the form of a line consisting of n square cells (that is, on a 1 \u00d7 n\ntable). At the beginning of the game Alice puts k ships on the field without\ntelling their positions to Bob. Each ship looks as a 1 \u00d7 a rectangle (that is,\nit occupies a sequence of a consecutive squares of the field). The ships\ncannot intersect and even touch each other. After that Bob makes a sequence of\n\"shots\". He names cells of the field and Alice either says that the cell is\nempty (\"miss\"), or that the cell belongs to some ship (\"hit\"). But here's the\nproblem! Alice like to cheat. May be that is why she responds to each Bob's\nmove with a \"miss\". Help Bob catch Alice cheating \u2014 find Bob's first move,\nsuch that after it you can be sure that Alice cheated. Input The first line of\nthe input contains three integers: n, k and a (1 \u2264 n, k, a \u2264 2\u00b710^5) \u2014 the\nsize of the field, the number of the ships and the size of each ship. It is\nguaranteed that the n, k and a are such that you can put k ships of size a on\nthe field, so that no two ships intersect or touch each other. The second line\ncontains integer m (1 \u2264 m \u2264 n) \u2014 the number of Bob's moves. The third line\ncontains m distinct integers x1, x2, ..., xm, where xi is the number of the\ncell where Bob made the i-th shot. The cells are numbered from left to right\nfrom 1 to n. Output Print a single integer \u2014 the number of such Bob's first\nmove, after which you can be sure that Alice lied. Bob's moves are numbered\nfrom 1 to m in the order the were made. If the sought move doesn't exist, then\nprint \"-1\". Examples Input 11 3 3 5 4 8 6 1 11 Output 3 Input 5 1 3 2 1 5\nOutput -1 Input 5 1 3 1 3 Output 1\n\n",
        "cf_contest_id": 567,
        "cf_index": "D",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "11 3 3\r\n5\r\n4 8 6 1 11\r\n",
                "3\r\n"
            ],
            [
                "5 1 3\r\n2\r\n1 5\r\n",
                "-1\r\n"
            ],
            [
                "5 1 3\r\n1\r\n3\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1 1\r\n1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "5000 1660 2\r\n20\r\n1 100 18 102 300 81 19 25 44 88 1337 4999 1054 1203 91 16 164 914 1419 1487\r\n",
                "18\r\n"
            ],
            [
                "5000 1000 2\r\n3\r\n1000 2000 3000\r\n",
                "-1\r\n"
            ],
            [
                "10 2 4\r\n2\r\n5 6\r\n",
                "-1\r\n"
            ],
            [
                "10 2 4\r\n3\r\n5 6 1\r\n",
                "3\r\n"
            ],
            [
                "4 2 1\r\n2\r\n1 2\r\n",
                "2\r\n"
            ],
            [
                "4 2 1\r\n2\r\n1 3\r\n",
                "-1\r\n"
            ],
            [
                "50 7 3\r\n20\r\n24 18 34 32 44 2 5 40 17 48 31 45 8 6 15 27 26 1 20 10\r\n",
                "13\r\n"
            ],
            [
                "50 7 3\r\n50\r\n17 47 1 12 21 25 6 5 49 27 34 8 16 38 11 44 48 9 2 20 3 22 33 23 36 41 15 35 31 30 50 7 45 42 37 29 14 26 24 46 19 4 10 28 18 43 32 39 40 13\r\n",
                "19\r\n"
            ],
            [
                "50 1 1\r\n50\r\n1 13 21 37 30 48 23 19 6 49 36 14 9 24 44 10 41 28 20 2 15 11 45 3 25 33 50 38 35 47 31 4 12 46 32 8 42 26 5 7 27 16 29 43 39 22 17 34 40 18\r\n",
                "50\r\n"
            ],
            [
                "200000 100000 1\r\n1\r\n31618\r\n",
                "-1\r\n"
            ],
            [
                "200000 1 200000\r\n1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "200000 1 200000\r\n1\r\n200000\r\n",
                "1\r\n"
            ],
            [
                "200000 1 199999\r\n2\r\n1 200000\r\n",
                "2\r\n"
            ],
            [
                "200000 1 199999\r\n2\r\n200000 1\r\n",
                "2\r\n"
            ],
            [
                "200000 1 199999\r\n2\r\n2 200000\r\n",
                "1\r\n"
            ]
        ]
    }
]