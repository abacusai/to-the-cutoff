[
    {
        "name": "Yet Another Problem On a Subsequence",
        "description": "The sequence of integers \n    a_1, a_2, \n    \u2026, a_k\n is called a good array\nif \n    a_1 = k - 1\n and \n    a_1 > 0\n. For example, the sequences \n    [3, -1,\n    44, 0], [1, -99]\n are good arrays, and the sequences \n    [3, 7, 8], [2, 5, 4,\n    1], [0]\n \u2014 are not. A sequence of integers is called good if it can be\ndivided into a positive number of good arrays. Each good array should be a\nsubsegment of sequence and each element of the sequence should belong to\nexactly one array. For example, the sequences \n    [2, -3, 0, 1, 4]\n, \n    [1,\n    2, 3, -3, -9, 4]\n are good, and the sequences \n    [2, -3, 0, 1]\n, \n    [1, 2,\n    3, -3 -9, 4, 1]\n \u2014 are not. For a given sequence of numbers, count the\nnumber of its subsequences that are good sequences, and print the number of\nsuch subsequences modulo 998244353. Input The first line contains the number\n\n    n\u00a0(1 \n    \u2264 n \n    \u2264 10^3)\n \u2014 the length of the initial sequence. The\nfollowing line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\u00a0(-10^9\n    \n    \u2264 a_i \n    \u2264 10^9)\n \u2014 the sequence itself. Output In the single line\noutput one integer \u2014 the number of subsequences of the original sequence that\nare good sequences, taken modulo 998244353. Examples Input 3 2 1 1 Output 2\nInput 4 1 1 1 1 Output 7 Note In the first test case, two good subsequences \u2014\n\n    [a_1, a_2, a_3]\n and \n    [a_2, a_3]\n. In the second test case, seven\ngood subsequences \u2014 \n    [a_1, a_2, a_3, a_4], [a_1, a_2], [a_1, a_3], [a_1,\n    a_4], [a_2, a_3], [a_2, a_4]\n and \n    [a_3, a_4]\n.\n\n",
        "cf_contest_id": 1000,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "dp"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2 1 1\r\n",
                "2\r\n"
            ],
            [
                "4\r\n1 1 1 1\r\n",
                "7\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n0\r\n",
                "0\r\n"
            ],
            [
                "1\r\n1\r\n",
                "0\r\n"
            ]
        ]
    }
]