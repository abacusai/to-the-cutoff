[
    {
        "name": "Array Optimization by Deque",
        "description": "In fact, the problems E1 and E2 do not have much in common. You should\nprobably think of them as two separate problems. You are given an integer\narray \n    a[1 \n    \u2026 n] = [a_1, a_2, \n    \u2026, a_n]\n. Let us consider an\nempty deque (double-ended queue). A deque is a data structure that supports\nadding elements to both the beginning and the end. So, if there are elements\n\n    [3, 4, 4]\n currently in the deque, adding an element \n    1\n to the\nbeginning will produce the sequence \n    [\n    1, 3, 4, 4]\n, and\nadding the same element to the end will produce \n    [3, 4, 4,\n    \n    1]\n. The elements of the array are sequentially added to the\ninitially empty deque, starting with \n    a_1\n and finishing with \n    a_n\n.\nBefore adding each element to the deque, you may choose whether to add it to\nthe beginning or to the end. For example, if we consider an array \n    a = [3,\n    7, 5, 5]\n, one of the possible sequences of actions looks like this:\n\n    \n 1.add \n    3\n to the beginning of the deque:deque has a sequence\n\n    [\n    3]\n in it;\n    \n 2.add \n    7\n to the end of the\ndeque:deque has a sequence \n    [3, \n    7]\n in it;\n    \n\n3.add \n    5\n to the end of the deque:deque has a sequence \n    [3, 7,\n    \n    5]\n in it;\n    \n 4.add \n    5\n to the beginning of the\ndeque:deque has a sequence \n    [\n    5, 3, 7, 5]\n in it; Find the\nminimal possible number of inversions in the deque after the whole array is\nprocessed. An inversion in sequence \n    d\n is a pair of indices \n    (i, j)\n\nsuch that \n    i < j\n and \n    d_i > d_j\n. For example, the array \n    d = [5,\n    3, 7, 5]\n has exactly two inversions \u2014 \n    (1, 2)\n and \n    (3, 4)\n, since\n\n    d_1 = 5 > 3 = d_2\n and \n    d_3 = 7 > 5 = d_4\n. Input The first line\ncontains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of\ntest cases. The next \n    2t\n lines contain descriptions of the test cases.\nThe first line of each test case description contains an integer \n    n\n (\n    1\n    \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 array size. The second line of the\ndescription contains \n    n\n space-separated integers \n    a_i\n (\n    -10^9\n    \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 elements of the array. It is guaranteed that the\nsum of \n    n\n over all test cases does not exceed \n    2 \n    \u00b7 10^5\n.\nOutput Print \n    t\n lines, each line containing the answer to the\ncorresponding test case. The answer to a test case should be a single integer\n\u2014 the minimal possible number of inversions in the deque after executing the\ndescribed algorithm. Example Input 6 4 3 7 5 5 3 3 2 1 3 3 1 2 4 -1 2 2 -1 4 4\n5 1 3 5 1 3 1 3 2 Output 2 0 1 0 1 2 Note One of the ways to get the sequence\n\n    [5, 3, 7, 5]\n in the deque, containing only two inversions, from the\ninitial array \n    [3, 7, 5, 5]\n (the first sample test case) is described in\nthe problem statement. Also, in this example, you could get the answer of two\ninversions by simply putting each element of the original array at the end of\nthe deque. In this case, the original sequence \n    [3, 7, 5, 5]\n, also\ncontaining exactly two inversions, will be in the deque as-is.\n\n",
        "cf_contest_id": 1579,
        "cf_index": "E2",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n4\r\n3 7 5 5\r\n3\r\n3 2 1\r\n3\r\n3 1 2\r\n4\r\n-1 2 2 -1\r\n4\r\n4 5 1 3\r\n5\r\n1 3 1 3 2\r\n",
                "2\r\n0\r\n1\r\n0\r\n1\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n5\r\n999999996 999999997 1000000000 999999998 999999999\r\n",
                "2\r\n"
            ],
            [
                "1\r\n1\r\n-1000000000\r\n",
                "0\r\n"
            ]
        ]
    }
]