[
    {
        "name": "Staircases",
        "description": "You are given a matrix, consisting of \n    n\n rows and \n    m\n columns. The\nrows are numbered top to bottom, the columns are numbered left to right. Each\ncell of the matrix can be either free or locked. Let's call a path in the\nmatrix a staircase if it: starts and ends in the free cell; visits only free\ncells; has one of the two following structures: the second cell is \n    1\n to\nthe right from the first one, the third cell is \n    1\n to the bottom from the\nsecond one, the fourth cell is \n    1\n to the right from the third one, and so\non; the second cell is \n    1\n to the bottom from the first one, the third\ncell is \n    1\n to the right from the second one, the fourth cell is \n    1\n\nto the bottom from the third one, and so on. In particular, a path, consisting\nof a single cell, is considered to be a staircase. Here are some examples of\nstaircases: Initially all the cells of the matrix are free. You have to\nprocess \n    q\n queries, each of them flips the state of a single cell. So, if\na cell is currently free, it makes it locked, and if a cell is currently\nlocked, it makes it free. Print the number of different staircases after each\nquery. Two staircases are considered different if there exists such a cell\nthat appears in one path and doesn't appear in the other path. Input The first\nline contains three integers \n    n\n, \n    m\n and \n    q\n (\n    1 \n    \u2264 n, m\n    \n    \u2264 1000\n; \n    1 \n    \u2264 q \n    \u2264 10^4\n) \u2014 the sizes of the matrix and the\nnumber of queries. Each of the next \n    q\n lines contains two integers\n\n    x\n and \n    y\n (\n    1 \n    \u2264 x \n    \u2264 n\n; \n    1 \n    \u2264 y \n    \u2264 m\n) \u2014 the\ndescription of each query. Output Print \n    q\n integers \u2014 the \n    i\n-th\nvalue should be equal to the number of different staircases after \n    i\n\nqueries. Two staircases are considered different if there exists such a cell\nthat appears in one path and doesn't appear in the other path. Examples Input\n2 2 8 1 1 1 1 1 1 2 2 1 1 1 2 2 1 1 1 Output 5 10 5 2 5 3 1 0 Input 3 4 10 1 4\n1 2 2 3 1 2 2 3 3 2 1 3 3 4 1 3 3 1 Output 49 35 24 29 49 39 31 23 29 27 Input\n1000 1000 2 239 634 239 634 Output 1332632508 1333333000\n\n",
        "cf_contest_id": 1598,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "combinatorics",
            "data structures",
            "dfs and similar",
            "dp",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 2 8\r\n1 1\r\n1 1\r\n1 1\r\n2 2\r\n1 1\r\n1 2\r\n2 1\r\n1 1\r\n",
                "5\r\n10\r\n5\r\n2\r\n5\r\n3\r\n1\r\n0\r\n"
            ],
            [
                "3 4 10\r\n1 4\r\n1 2\r\n2 3\r\n1 2\r\n2 3\r\n3 2\r\n1 3\r\n3 4\r\n1 3\r\n3 1\r\n",
                "49\r\n35\r\n24\r\n29\r\n49\r\n39\r\n31\r\n23\r\n29\r\n27\r\n"
            ],
            [
                "1000 1000 2\r\n239 634\r\n239 634\r\n",
                "1332632508\r\n1333333000\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 3 10\r\n1 2\r\n1 3\r\n2 2\r\n2 2\r\n2 2\r\n3 2\r\n2 2\r\n3 2\r\n2 3\r\n3 1\r\n",
                "25\r\n23\r\n12\r\n23\r\n12\r\n8\r\n13\r\n23\r\n19\r\n15\r\n"
            ],
            [
                "5 10 30\r\n5 3\r\n5 5\r\n5 10\r\n1 2\r\n5 7\r\n1 8\r\n4 9\r\n2 3\r\n4 10\r\n3 1\r\n4 5\r\n3 8\r\n1 7\r\n2 2\r\n1 5\r\n2 3\r\n3 2\r\n3 10\r\n3 2\r\n2 7\r\n2 4\r\n1 4\r\n4 8\r\n2 6\r\n4 1\r\n5 3\r\n4 6\r\n5 8\r\n4 5\r\n1 1\r\n",
                "399\r\n373\r\n355\r\n332\r\n306\r\n290\r\n261\r\n238\r\n233\r\n222\r\n207\r\n186\r\n180\r\n162\r\n140\r\n151\r\n144\r\n137\r\n144\r\n137\r\n111\r\n109\r\n91\r\n82\r\n77\r\n87\r\n78\r\n76\r\n83\r\n81\r\n"
            ],
            [
                "1 1 1\r\n1 1\r\n",
                "0\r\n"
            ],
            [
                "1 1 2\r\n1 1\r\n1 1\r\n",
                "0\r\n1\r\n"
            ]
        ]
    }
]