[
    {
        "name": "ABBB",
        "description": "Zookeeper is playing a game. In this game, Zookeeper must use bombs to bomb a\nstring that consists of letters 'A' and 'B'. He can use bombs to bomb a\nsubstring which is either \"AB\" or \"BB\". When he bombs such a substring, the\nsubstring gets deleted from the string and the remaining parts of the string\nget concatenated. For example, Zookeeper can use two such operations: AABABBA\n\n    \u2192\n AABBA \n    \u2192\n AAA. Zookeeper wonders what the shortest string\nhe can make is. Can you help him find the length of the shortest string? Input\nEach test contains multiple test cases. The first line contains a single\ninteger \n    t\n \n    (1 \n    \u2264 t \n    \u2264 20000)\n \u2014 the number of test cases.\nThe description of the test cases follows. Each of the next \n    t\n lines\ncontains a single test case each, consisting of a non-empty string \n    s\n:\nthe string that Zookeeper needs to bomb. It is guaranteed that all symbols of\n\n    s\n are either 'A' or 'B'. It is guaranteed that the sum of \n    |s|\n\n(length of \n    s\n) among all test cases does not exceed \n    2 \n    \u00b7 10^5\n.\nOutput For each test case, print a single integer: the length of the shortest\nstring that Zookeeper can make. Example Input 3 AAA BABA AABBBABBBB Output 3 2\n0 Note For the first test case, you can't make any moves, so the answer is\n\n    3\n. For the second test case, one optimal sequence of moves is BABA\n\n    \u2192\n BA. So, the answer is \n    2\n. For the third test case, one\noptimal sequence of moves is AABBBABBBB \n    \u2192\n AABBBABB \n    \u2192\n\nAABBBB \n    \u2192\n ABBB \n    \u2192\n AB \n    \u2192\n (empty string). So, the\nanswer is \n    0\n.\n\n",
        "cf_contest_id": 1428,
        "cf_index": "C",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "greedy",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\nAAA\r\nBABA\r\nAABBBABBBB\r\n",
                "3\r\n2\r\n0\r\n"
            ]
        ],
        "private_cases": []
    }
]