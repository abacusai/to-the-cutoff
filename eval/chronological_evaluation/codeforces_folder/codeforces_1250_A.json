[
    {
        "name": "Berstagram",
        "description": "Polycarp recently signed up to a new social network Berstagram. He immediately\npublished \n    n\n posts there. He assigned numbers from \n    1\n to \n    n\n to\nall posts and published them one by one. So, just after publishing Polycarp's\nnews feed contained posts from \n    1\n to \n    n\n \u2014 the highest post had\nnumber \n    1\n, the next one had number \n    2\n, ..., the lowest post had\nnumber \n    n\n. After that he wrote down all likes from his friends. Likes\nwere coming consecutively from the \n    1\n-st one till the \n    m\n-th one. You\nare given a sequence \n    a_1, a_2, \n    \u2026, a_m\n (\n    1 \n    \u2264 a_j \n    \u2264 n\n),\nwhere \n    a_j\n is the post that received the \n    j\n-th like. News feed in\nBerstagram works in the following manner. Let's assume the \n    j\n-th like was\ngiven to post \n    a_j\n. If this post is not the highest (first) one then it\nchanges its position with the one above. If \n    a_j\n is the highest post\nnothing changes. For example, if \n    n=3\n, \n    m=5\n and \n    a=[3,2,1,3,3]\n,\nthen Polycarp's news feed had the following states: before the first like:\n\n    [1, 2, 3]\n; after the first like: \n    [1, 3, 2]\n; after the second like:\n\n    [1, 2, 3]\n; after the third like: \n    [1, 2, 3]\n; after the fourth like:\n\n    [1, 3, 2]\n; after the fifth like: \n    [3, 1, 2]\n. Polycarp wants to know\nthe highest (minimum) and the lowest (maximum) positions for each post.\nPolycarp considers all moments of time, including the moment \"before all\nlikes\". Input The first line contains two integer numbers \n    n\n and \n    m\n\n(\n    1 \n    \u2264 n \n    \u2264 10^5\n, \n    1 \n    \u2264 m \n    \u2264 4 \n    \u00b710^5\n) \u2014 number of\nposts and number of likes. The second line contains integers \n    a_1, a_2,\n    \n    \u2026, a_m\n (\n    1 \n    \u2264 a_j \n    \u2264 n\n), where \n    a_j\n is the post that\nreceived the \n    j\n-th like. Output Print \n    n\n pairs of integer numbers.\nThe \n    i\n-th line should contain the highest (minimum) and the lowest\n(maximum) positions of the \n    i\n-th post. You should take into account\npositions at all moments of time: before all likes, after each like and after\nall likes. Positions are numbered from \n    1\n (highest) to \n    n\n (lowest).\nExamples Input 3 5 3 2 1 3 3 Output 1 2 2 3 1 3 Input 10 6 7 3 5 7 3 6 Output\n1 2 2 3 1 3 4 7 4 5 6 7 5 7 8 8 9 9 10 10\n\n",
        "cf_contest_id": 1250,
        "cf_index": "A",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [],
        "private_cases": []
    }
]