[
    {
        "name": "Nikita and game",
        "description": "Nikita plays a new computer game. There are m levels in this game. In the\nbeginning of each level a new class appears in the game; this class is a\nchild-class of the class yi (and yi is called parent-class for this new\nclass). Thus, the classes form a tree. Initially there is only one class with\nindex 1. Changing the class to its neighbour (child-class or parent-class) in\nthe tree costs 1 coin. You can not change the class back. The cost of changing\nthe class a to the class b is equal to the total cost of class changes on the\npath from a to b in the class tree. Suppose that at i -th level the maximum\ncost of changing one class to another is x. For each level output the number\nof classes such that for each of these classes there exists some other class\ny, and the distance from this class to y is exactly x. Input First line\ncontains one integer number m \u2014 number of queries (1 \u2264 m \u2264 3\u00b710^5). Next m\nlines contain description of queries. i -th line (1 \u2264 i \u2264 m) describes the i\n-th level and contains an integer yi \u2014 the index of the parent-class of class\nwith index i + 1 (1 \u2264 yi \u2264 i). Output Suppose that at i -th level the maximum\ncost of changing one class to another is x. For each level output the number\nof classes such that for each of these classes there exists some other class\ny, and the distance from this class to y is exactly x. Examples Input 4 1 1 2\n1 Output 2 2 2 3 Input 4 1 1 2 3 Output 2 2 2 2\n\n",
        "cf_contest_id": 842,
        "cf_index": "E",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dfs and similar",
            "divide and conquer",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1\r\n1\r\n2\r\n1\r\n",
                "2\r\n2\r\n2\r\n3\r\n"
            ],
            [
                "4\r\n1\r\n1\r\n2\r\n3\r\n",
                "2\r\n2\r\n2\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "6\r\n1\r\n1\r\n2\r\n1\r\n1\r\n1\r\n",
                "2\r\n2\r\n2\r\n3\r\n4\r\n5\r\n"
            ],
            [
                "6\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n",
                "2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n"
            ],
            [
                "6\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n",
                "2\r\n2\r\n3\r\n4\r\n5\r\n6\r\n"
            ],
            [
                "11\r\n1\r\n2\r\n2\r\n3\r\n3\r\n6\r\n5\r\n5\r\n2\r\n2\r\n7\r\n",
                "2\r\n2\r\n3\r\n3\r\n4\r\n3\r\n4\r\n5\r\n6\r\n7\r\n7\r\n"
            ]
        ]
    }
]