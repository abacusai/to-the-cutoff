[
    {
        "name": "Permutation Shift",
        "description": "An identity permutation of length \n    n\n is an array \n    [1, 2, 3, \n    \u2026,\n    n]\n. We performed the following operations to an identity permutation of\nlength \n    n\n: firstly, we cyclically shifted it to the right by \n    k\n\npositions, where \n    k\n is unknown to you (the only thing you know is that\n\n    0 \n    \u2264 k \n    \u2264 n - 1\n). When an array is cyclically shifted to the right\nby \n    k\n positions, the resulting array is formed by taking \n    k\n last\nelements of the original array (without changing their relative order), and\nthen appending \n    n - k\n first elements to the right of them (without\nchanging relative order of the first \n    n - k\n elements as well). For\nexample, if we cyclically shift the identity permutation of length \n    6\n by\n\n    2\n positions, we get the array \n    [5, 6, 1, 2, 3, 4]\n; secondly, we\nperformed the following operation at most \n    m\n times: pick any two elements\nof the array and swap them. You are given the values of \n    n\n and \n    m\n,\nand the resulting array. Your task is to find all possible values of \n    k\n\nin the cyclic shift operation. Input The first line contains one integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^5\n) \u2014 the number of test cases. Each test\ncase consists of two lines. The first line contains two integers \n    n\n and\n\n    m\n (\n    3 \n    \u2264 n \n    \u2264 3 \n    \u00b7 10^5\n; \n    0 \n    \u2264 m \n    \u2264\n    n/3\n). The second line contains \n    n\n integers \n    p_1, p_2,\n    \n    \u2026, p_n\n (\n    1 \n    \u2264 p_i \n    \u2264 n\n, each integer from \n    1\n to\n\n    n\n appears in this sequence exactly once) \u2014 the resulting array. The sum\nof \n    n\n over all test cases does not exceed \n    3 \n    \u00b7 10^5\n. Output\nFor each test case, print the answer in the following way: firstly, print one\ninteger \n    r\n (\n    0 \n    \u2264 r \n    \u2264 n\n) \u2014 the number of possible values of\n\n    k\n for the cyclic shift operation; secondly, print \n    r\n integers\n\n    k_1, k_2, \n    \u2026, k_r\n (\n    0 \n    \u2264 k_i \n    \u2264 n - 1\n) \u2014 all possible\nvalues of \n    k\n in increasing order. Example Input 4 4 1 2 3 1 4 3 1 1 2 3 3\n1 3 2 1 6 0 1 2 3 4 6 5 Output 1 3 1 0 3 0 1 2 0 Note Consider the example: in\nthe first test case, the only possible value for the cyclic shift is \n    3\n.\nIf we shift \n    [1, 2, 3, 4]\n by \n    3\n positions, we get \n    [2, 3, 4,\n    1]\n. Then we can swap the \n    3\n-rd and the \n    4\n-th elements to get the\narray \n    [2, 3, 1, 4]\n; in the second test case, the only possible value for\nthe cyclic shift is \n    0\n. If we shift \n    [1, 2, 3]\n by \n    0\n positions,\nwe get \n    [1, 2, 3]\n. Then we don't change the array at all (we stated that\nwe made at most \n    1\n swap), so the resulting array stays \n    [1, 2, 3]\n;\nin the third test case, all values from \n    0\n to \n    2\n are possible for\nthe cyclic shift: if we shift \n    [1, 2, 3]\n by \n    0\n positions, we get\n\n    [1, 2, 3]\n. Then we can swap the \n    1\n-st and the \n    3\n-rd elements\nto get \n    [3, 2, 1]\n; if we shift \n    [1, 2, 3]\n by \n    1\n position, we\nget \n    [3, 1, 2]\n. Then we can swap the \n    2\n-nd and the \n    3\n-rd\nelements to get \n    [3, 2, 1]\n; if we shift \n    [1, 2, 3]\n by \n    2\n\npositions, we get \n    [2, 3, 1]\n. Then we can swap the \n    1\n-st and the\n\n    2\n-nd elements to get \n    [3, 2, 1]\n; in the fourth test case, we stated\nthat we didn't do any swaps after the cyclic shift, but no value of cyclic\nshift could produce the array \n    [1, 2, 3, 4, 6, 5]\n.\n\n",
        "cf_contest_id": 1553,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "combinatorics",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "math"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4 1\r\n2 3 1 4\r\n3 1\r\n1 2 3\r\n3 1\r\n3 2 1\r\n6 0\r\n1 2 3 4 6 5\r\n",
                "1 3\r\n1 0\r\n3 0 1 2\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n18 5\r\n5 6 7 8 3 4 2 1 9 10 11 12 13 14 15 16 17 18\r\n18 4\r\n5 6 7 8 3 4 2 1 9 10 11 12 13 14 15 16 17 18\r\n18 6\r\n5 6 7 8 3 4 2 1 9 10 11 12 13 14 15 16 17 18\r\n",
                "0\r\n0\r\n0\r\n"
            ],
            [
                "1\r\n12 4\r\n1 2 3 4 9 10 11 12 5 6 7 8\r\n",
                "3 0 4 8\r\n"
            ]
        ]
    }
]