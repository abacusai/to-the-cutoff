[
    {
        "name": "Little Robber Girl's Zoo",
        "description": "Little Robber Girl likes to scare animals in her zoo for fun. She decided to\narrange the animals in a row in the order of non-decreasing height. However,\nthe animals were so scared that they couldn't stay in the right places. The\nrobber girl was angry at first, but then she decided to arrange the animals\nherself. She repeatedly names numbers l and r such that r - l + 1 is even.\nAfter that animals that occupy positions between l and r inclusively are\nrearranged as follows: the animal at position l swaps places with the animal\nat position l + 1, the animal l + 2 swaps with the animal l + 3, ..., finally,\nthe animal at position r - 1 swaps with the animal r. Help the robber girl to\narrange the animals in the order of non-decreasing height. You should name at\nmost 20 000 segments, since otherwise the robber girl will become bored and\nwill start scaring the animals again. Input The first line contains a single\ninteger n (1 \u2264 n \u2264 100) \u2014 number of animals in the robber girl's zoo. The\nsecond line contains n space-separated integers a1, a2, ..., an (1 \u2264 ai \u2264\n10^9), where ai is the height of the animal occupying the i-th place. Output\nPrint the sequence of operations that will rearrange the animals by non-\ndecreasing height. The output should contain several lines, i-th of the lines\nshould contain two space-separated integers li and ri (1 \u2264 li < ri \u2264 n) \u2014\ndescriptions of segments the robber girl should name. The segments should be\ndescribed in the order the operations are performed. The number of operations\nshould not exceed 20 000. If the animals are arranged correctly from the\nstart, you are allowed to output nothing. Examples Input 4 2 1 4 3 Output 1 4\nInput 7 36 28 57 39 66 69 68 Output 1 4 6 7 Input 5 1 2 1 2 1 Output 2 5 3 4 1\n4 1 4 Note Note that you don't have to minimize the number of operations. Any\nsolution that performs at most 20 000 operations is allowed.\n\n",
        "cf_contest_id": 686,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2 1 4 3\r\n",
                "1 2\r\n3 4\r\n"
            ],
            [
                "7\r\n36 28 57 39 66 69 68\r\n",
                "1 2\r\n3 4\r\n6 7\r\n"
            ],
            [
                "5\r\n1 2 1 2 1\r\n",
                "2 3\r\n4 5\r\n3 4\r\n"
            ]
        ],
        "private_cases": [
            [
                "78\r\n7 3 8 8 9 8 10 9 12 11 16 14 17 17 18 18 20 20 25 22 27 26 29 27 35 35 36 36 37 37 38 38 40 39 42 42 48 46 49 49 58 50 60 58 65 61 68 66 69 69 69 69 70 69 71 71 77 73 78 77 80 79 85 83 86 86 86 86 88 87 91 90 96 91 98 97 99 98\r\n",
                "1 2\r\n5 6\r\n7 8\r\n9 10\r\n11 12\r\n19 20\r\n21 22\r\n23 24\r\n33 34\r\n37 38\r\n41 42\r\n43 44\r\n45 46\r\n47 48\r\n53 54\r\n57 58\r\n59 60\r\n61 62\r\n63 64\r\n69 70\r\n71 72\r\n73 74\r\n75 76\r\n77 78\r\n"
            ],
            [
                "47\r\n17462271 17619887 84928078 85012448 86003043 86499508 129945397 135545949 141951561 161227989 167459883 215243263 243500622 284922151 326608661 350939646 359121478 388866754 441241406 460673749 497339472 512847269 521291845 537280636 561101359 569788868 581107309 588113051 619849749 621125808 637220955 640578896 660913258 674411824 694527254 716291982 725198795 734631740 797705515 810502965 832854453 866687928 923880462 948282076 957759163 968324020 997176104\r\n",
                ""
            ],
            [
                "100\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                ""
            ],
            [
                "10\r\n44 23 65 17 48 29 49 88 91 85\r\n",
                "1 2\r\n3 4\r\n2 3\r\n1 2\r\n4 5\r\n5 6\r\n4 5\r\n3 4\r\n6 7\r\n9 10\r\n8 9\r\n"
            ],
            [
                "13\r\n605297997 425887240 859639341 200428931 888317166 983420497 81642057 628988722 389959969 358920886 646428392 324912711 401437250\r\n",
                "1 2\r\n3 4\r\n2 3\r\n1 2\r\n6 7\r\n5 6\r\n4 5\r\n3 4\r\n2 3\r\n1 2\r\n7 8\r\n6 7\r\n5 6\r\n8 9\r\n7 8\r\n6 7\r\n5 6\r\n4 5\r\n3 4\r\n9 10\r\n8 9\r\n7 8\r\n6 7\r\n5 6\r\n4 5\r\n3 4\r\n10 11\r\n9 10\r\n8 9\r\n11 12\r\n10 11\r\n9 10\r\n8 9\r\n7 8\r\n6 7\r\n5 6\r\n4 5\r\n3 4\r\n12 13\r\n11 12\r\n10 11\r\n9 10\r\n8 9\r\n7 8\r\n6 7\r\n"
            ],
            [
                "100\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\r\n",
                ""
            ],
            [
                "1\r\n1\r\n",
                ""
            ],
            [
                "10\r\n1 1 1 1 2 2 2 2 2 2\r\n",
                ""
            ],
            [
                "98\r\n5 5 5 5 5 5 5 6 6 6 6 7 6 7 7 7 7 7 7 8 8 8 8 8 8 9 8 9 9 9 9 10 9 10 9 11 10 11 11 11 11 12 12 12 12 12 12 12 12 13 13 13 13 13 13 14 14 14 14 14 14 14 15 15 15 15 15 15 15 16 16 16 16 17 17 17 17 17 17 18 17 18 18 18 19 19 19 19 19 20 19 20 20 20 20 20 20 20\r\n",
                "12 13\r\n26 27\r\n32 33\r\n34 35\r\n33 34\r\n36 37\r\n80 81\r\n90 91\r\n"
            ],
            [
                "20\r\n2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 2 2 2 2\r\n",
                "6 7\r\n5 6\r\n4 5\r\n3 4\r\n2 3\r\n1 2\r\n7 8\r\n6 7\r\n5 6\r\n4 5\r\n3 4\r\n2 3\r\n8 9\r\n7 8\r\n6 7\r\n5 6\r\n4 5\r\n3 4\r\n9 10\r\n8 9\r\n7 8\r\n6 7\r\n5 6\r\n4 5\r\n10 11\r\n9 10\r\n8 9\r\n7 8\r\n6 7\r\n5 6\r\n11 12\r\n10 11\r\n9 10\r\n8 9\r\n7 8\r\n6 7\r\n12 13\r\n11 12\r\n10 11\r\n9 10\r\n8 9\r\n7 8\r\n13 14\r\n12 13\r\n11 12\r\n10 11\r\n9 10\r\n8 9\r\n14 15\r\n13 14\r\n12 13\r\n11 12\r\n10 11\r\n9 10\r\n15 16\r\n14 15\r\n13 14\r\n12 13\r\n11 12\r\n10 11\r\n"
            ],
            [
                "1\r\n5\r\n",
                ""
            ]
        ]
    }
]