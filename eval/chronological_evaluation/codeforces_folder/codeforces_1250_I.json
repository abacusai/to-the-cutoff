[
    {
        "name": "Show Must Go On",
        "description": "The director of the famous dance show plans a tour. It is already decided that\nthe tour will consist of up to \n    m\n concerts. There are \n    n\n dancers in\nthe troupe. Each dancer is characterized by her awkwardness: the awkwardness\nof the \n    i\n-th dancer is equal to \n    a_i\n. The director likes diversity.\nFor this reason, each concert will be performed by a different set of dancers.\nA dancer may perform in multiple concerts. For example, it is possible that a\nset of dancers performs in one concert and a subset of this set of dancers\nperforms in another concert. The only constraint is that the same set of\ndancers cannot perform twice. The director prefers the set with larger number\nof dancers over the set with smaller number of dancers. If two sets consist of\nthe same number of dancers, then the director prefers the one which has\nsmaller sum of awkwardness of dancers. If two sets of dancers are equal in\nsize and total awkwardness, then the director does not have a preference which\none is better. A marketing study shows that viewers are not ready to come to a\nconcert if the total awkwardness of all the dancers performing in the concert\nis greater than \n    k\n. The director wants to find the best plan for \n    m\n\nconcerts. He thinks to write down all possible sets of dancers; then get rid\nof the sets with total awkwardness greater than \n    k\n. The remaining sets of\ndancers will be sorted according to his preference. The most preferred set of\ndancers will give the first concert, the second preferred set \u2014 the second\nconcert and so on until the \n    m\n-th concert. If it turns out that the total\nnumber of valid sets is less than \n    m\n, then the total number of concerts\nwill be equal to the number of valid sets. It turns out that the director\ndelegated finding the plan to you! Please, notice that there might be several\nacceptable plans due to the fact that the director does not have a preference\nover sets of dancers with the same size and total awkwardness. In this case\nany of these plans is good enough. For each concert find the number of dancers\nand the total awkwardness of the set performing. Also, for the last concert\nfind its set of dancers. Input The first line contains one integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 10^5\n) \u2014 the number of test cases in the input. Then the\ntest cases follow. Each test case begins with a line containing three integers\n\n    n\n, \n    k\n and \n    m\n (\n    1 \n    \u2264 n \n    \u2264 10^6\n, \n    1 \n    \u2264 k \n    \u2264\n    10^18\n, \n    1 \n    \u2264 m \n    \u2264 10^6\n) \u2014 the total number of dancers, the\nmaximum acceptable awkwardness of a set of dancers and the maximum number of\nconcerts, respectively. The following line contains \n    n\n integers \n    a_1,\n    a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^12\n), where \n    a_i\n is the\nawkwardness of the \n    i\n-th dancer. The sum of the values of \n    n\n over\nall test cases in the input does not exceed \n    10^6\n. Similarly, the sum of\nthe values of \n    m\n over all test cases in the input does not exceed\n\n    10^6\n. Output Print the answers to all test cases in the input. If the\ntroupe cannot give concerts at all, then simply print one line \"0\". In this\ncase, you should not print anything else. If the troupe gives a positive\nnumber of concerts \n    r\n (\n    r\n is equal to the minimum of \n    m\n and the\ntotal number of valid sets), then first print the value of \n    r\n, then\n\n    r\n lines: the \n    j\n-th line should contain two integers \n    s_j\n and\n\n    t_j\n \u2014 the number of dancers in the \n    j\n-th concert and the total\nawkwardness of the dancers performing in the \n    j\n-th concert. Complete the\noutput to a test case with a line that describes the last set: print exactly\n\n    s_r\n distinct integers from \n    1\n to \n    n\n \u2014 the numbers of the\ndancers who will perform at the \n    r\n-th (last) concert, in any order. If\nthere are several answers, print any of them. Example Input 3 7 13 10 3 1 5 1\n8 2 13 2 10 1 12 12 3 32 100000 2 1 5 Output 10 5 12 4 7 4 9 4 10 4 11 4 11 4\n12 4 13 3 4 3 5 2 4 1 0 7 3 8 2 3 2 6 2 7 1 1 1 2 1 5 3\n\n",
        "cf_contest_id": 1250,
        "cf_index": "I",
        "cf_rating": 3100,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "greedy",
            "shortest paths"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [],
        "private_cases": []
    }
]