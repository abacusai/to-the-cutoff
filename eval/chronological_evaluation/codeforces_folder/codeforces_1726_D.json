[
    {
        "name": "Edge Split",
        "description": "You are given a connected, undirected and unweighted graph with \n    n\n\nvertices and \n    m\n edges. Notice the limit on the number of edges: \n    m\n    \n    \u2264 n + 2\n. Let's say we color some of the edges red and the remaining\nedges blue. Now consider only the red edges and count the number of connected\ncomponents in the graph. Let this value be \n    c_1\n. Similarly, consider only\nthe blue edges and count the number of connected components in the graph. Let\nthis value be \n    c_2\n. Find an assignment of colors to the edges such that\nthe quantity \n    c_1+c_2\n is minimised. Input Each test contains multiple\ntest cases. The first line contains a single integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 10^5\n) \u2014 the number of test cases. Description of the test cases\nfollows. The first line of each test case contains two integers \n    n\n and\n\n    m\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n; \n    n-1 \n    \u2264 m \n    \u2264\n    min\n    (n+2,\n    n \n    \u00b7 (n-1)/2\n    )\n) \u2014 the number of\nvertices and the number of edges respectively. \n    m\n lines follow. The\n\n    i\n-th line contains two integers \n    u_i\n and \n    v_i\n (\n    1 \n    \u2264\n    u_i,v_i \n    \u2264 n\n, \n    u_i \n     v_i\n) denoting that the \n    i\n-th edge\ngoes between vertices \n    u_i\n and \n    v_i\n. The input is guaranteed to have\nno multiple edges or self loops. The graph is also guaranteed to be connected.\nIt is guaranteed that the sum of \n    n\n over all test cases does not exceed\n\n    10^6\n. It is guaranteed that the sum of \n    m\n over all test cases does\nnot exceed \n    2 \n    \u00b7 10^6\n. Output For each test case, output a binary\nstring of length \n    m\n. The \n    i\n-th character of the string should be 1\nif the \n    i\n-th edge should be colored red, and 0 if it should be colored\nblue. If there are multiple ways to assign colors to edges that give the\nminimum answer, you may output any. Example Input 4 5 7 1 2 2 3 3 4 4 5 5 1 1\n3 3 5 4 4 1 2 2 3 1 4 3 4 6 7 1 2 1 3 3 4 4 5 1 4 5 6 6 2 2 1 1 2 Output\n0111010 1001 0001111 0 Note The corresponding graph of the first test case is:\n\n    c_1 + c_2 = 1 + 2 = 3\n The corresponding graph of the second test case\nis: \n    c_1 + c_2 = 2 + 2 = 4\n\n\n",
        "cf_contest_id": 1726,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n5 7\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 1\r\n1 3\r\n3 5\r\n4 4\r\n1 2\r\n2 3\r\n1 4\r\n3 4\r\n6 7\r\n1 2\r\n1 3\r\n3 4\r\n4 5\r\n1 4\r\n5 6\r\n6 2\r\n2 1\r\n1 2\r\n",
                "1011010\r\n1101\r\n1011011\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]