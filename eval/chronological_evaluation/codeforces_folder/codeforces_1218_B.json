[
    {
        "name": "Guarding warehouses",
        "description": "Bob Bubblestrong just got a new job as security guard. Bob is now responsible\nfor safety of a collection of warehouses, each containing the most valuable\nBubble Cup assets - the high-quality bubbles. His task is to detect thieves\ninside the warehouses and call the police. Looking from the sky, each\nwarehouse has a shape of a convex polygon. Walls of no two warehouses\nintersect, and of course, none of the warehouses is built inside of another\nwarehouse. Little did the Bubble Cup bosses know how lazy Bob is and that he\nenjoys watching soap operas (he heard they are full of bubbles) from the\ncoziness of his office. Instead of going from one warehouse to another to\ncheck if warehouses are secured, the plan Bob has is to monitor all the\nwarehouses from the comfort of his office using the special X-ray goggles. The\ngoggles have an infinite range, so a thief in any of the warehouses could\neasily be spotted. However, the goggles promptly broke and the X-rays are now\nstrong only enough to let Bob see through a single wall. Now, Bob would really\nappreciate if you could help him find out what is the total area inside of the\nwarehouses monitored by the broken goggles, so that he could know how much\narea of the warehouses he needs to monitor in person. Input The first line\ncontains one integer \n    N\n (\n    1\n \n    \u2264\n \n    N\n \n    \u2264\n\n\n    10^4\n) \u2013 the number of warehouses. The next \n    N\n lines describe the\nwarehouses. The first number of the line is integer \n    c_i\n (\n    3\n\n\n    \u2264\n \n    c_i\n \n    \u2264\n \n    10^4\n) \u2013 the number corners in the\n\n    i^th\n warehouse, followed by \n    c_i\n pairs of integers. The\n\n    j^th\n pair is \n    (x_j, y_j)\n \u2013 the coordinates of the \n    j^th\n\ncorner (\n    |x_j|\n, \n    |y_j|\n \n    \u2264\n \n    3 * 10^4\n). The corners are\nlisted in the clockwise order. The total number of corners in all the\nwarehouses is at most \n    5 * 10^4\n. Bob's office is positioned at the point\nwith coordinates \n    (0, 0)\n. The office is not contained within any of the\nwarehouses. Output Print a single line containing a single decimal number\naccurate to at least four decimal places \u2013 the total area of the warehouses\nBob can monitor using the broken X-ray goggles. Example Input 5 4 1 1 1 3 3 3\n3 1 4 4 3 6 2 6 0 4 0 6 -5 3 -4 4 -3 4 -2 3 -3 2 -4 2 3 0 -1 1 -3 -1 -3 4 1 -4\n1 -6 -1 -6 -1 -4 Output 13.333333333333 Note Areas monitored by the X-ray\ngoggles are colored green and areas not monitored by the goggles are colored\nred. The warehouses \n    ABCD\n, \n    IJK\n and \n    LMNOPQ\n are completely\nmonitored using the googles. The warehouse \n    EFGH\n is partially monitored\nusing the goggles: part \n    EFW\n is not monitored because to monitor each\npoint inside it, the X-rays must go through two walls of warehouse \n    ABCD\n.\nThe warehouse \n    RUTS\n is not monitored from the Bob's office, because there\nare two walls of the warehouse \n    IJK\n between Bob's office and each point\nin \n    RUTS\n. The total area monitored by the goggles is \n    P\n =\n\n    P_ABCD\n + \n    P_FGHW\n + \n    P_IJK\n + \n    P_LMNOPQ\n = \n    4\n +\n\n    3.333333333333\n + \n    2\n + \n    4\n = \n    13.333333333333\n.\n\n",
        "cf_contest_id": 1218,
        "cf_index": "B",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "geometry"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n4 1 1 1 3 3 3 3 1\r\n4 4 3 6 2 6 0 4 0\r\n6 -5 3 -4 4 -3 4 -2 3 -3 2 -4 2\r\n3 0 -1 1 -3 -1 -3\r\n4 1 -4 1 -6 -1 -6 -1 -4\r\n",
                "13.333333333331\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n4 -1 1 -1 4 1 4 1 1\r\n4 9 7 9 5 3 5 3 7\r\n",
                "12.000000000000\r\n"
            ],
            [
                "1\r\n6 -1 2 0 6 4 7 9 4 6 1 1 1\r\n",
                "42.000000000000\r\n"
            ],
            [
                "7\r\n4 3 -3 2 1 3 3 4 1\r\n4 6 0 5 1 6 4 7 1\r\n4 11 2 11 -1 8 -1 8 2\r\n4 8 -5 5 -8 2 -5 5 -2\r\n6 -2 3 -2 2 -3 1 -4 1 -4 2 -3 3\r\n4 -4 4 -5 3 -7 3 -6 4\r\n4 -7 6 -5 6 -6 5 -8 5\r\n",
                "18.000000000000\r\n"
            ],
            [
                "3\r\n3 -6 3 -5 5 -3 6\r\n3 -7 -2 -8 7 -6 7\r\n4 1 4 -2 2 -5 1 -1 6\r\n",
                "11.785079051383\r\n"
            ],
            [
                "4\r\n3 6 -10 2 -24 -24 4\r\n3 6 4 8 -6 -4 -4\r\n5 -20 8 -18 14 2 22 -6 0 -8 -2\r\n4 -2 10 4 18 20 14 18 -2\r\n",
                "492.963347989783\r\n"
            ],
            [
                "4\r\n4 -1 4 -1 5 2 5 2 4\r\n4 -12 6 -12 7 11 7 11 6\r\n4 11 5 11 4 5 4 5 5\r\n4 -7 5 -3 5 -3 4 -7 4\r\n",
                "19.167857142857\r\n"
            ],
            [
                "6\r\n4 0 8 0 10 6 0 4 0\r\n4 10 0 0 -8 0 -6 8 0\r\n4 0 -2 0 -4 -7 0 -5 0\r\n4 -4 0 0 7 0 5 -2 0\r\n4 12 2 15 2 15 -3 12 -3\r\n4 0 -10 2 -12 0 -14 -2 -12\r\n",
                "48.000000000010\r\n"
            ],
            [
                "1\r\n3 1 0 2 1 2 -1\r\n",
                "0.999999999998\r\n"
            ],
            [
                "1\r\n4 1 2 2 4 4 2 2 1\r\n",
                "4.500000000000\r\n"
            ]
        ]
    }
]