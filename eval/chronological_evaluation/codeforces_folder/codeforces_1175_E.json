[
    {
        "name": "Minimal Segment Cover",
        "description": "You are given \n    n\n intervals in form \n    [l; r]\n on a number line. You are\nalso given \n    m\n queries in form \n    [x; y]\n. What is the minimal number of\nintervals you have to take so that every point (not necessarily integer) from\n\n    x\n to \n    y\n is covered by at least one of them? If you can't choose\nintervals so that every point from \n    x\n to \n    y\n is covered, then print\n-1 for that query. Input The first line contains two integers \n    n\n and\n\n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of intervals\nand the number of queries, respectively. Each of the next \n    n\n lines\ncontains two integer numbers \n    l_i\n and \n    r_i\n (\n    0 \n    \u2264 l_i < r_i\n    \n    \u2264 5 \n    \u00b7 10^5\n) \u2014 the given intervals. Each of the next \n    m\n lines\ncontains two integer numbers \n    x_i\n and \n    y_i\n (\n    0 \n    \u2264 x_i < y_i\n    \n    \u2264 5 \n    \u00b7 10^5\n) \u2014 the queries. Output Print \n    m\n integer numbers.\nThe \n    i\n-th number should be the answer to the \n    i\n-th query: either the\nminimal number of intervals you have to take so that every point (not\nnecessarily integer) from \n    x_i\n to \n    y_i\n is covered by at least one of\nthem or -1 if you can't choose intervals so that every point from \n    x_i\n to\n\n    y_i\n is covered. Examples Input 2 3 1 3 2 4 1 3 1 4 3 4 Output 1 2 1\nInput 3 4 1 3 1 3 4 5 1 2 1 3 1 4 1 5 Output 1 1 -1 -1 Note In the first\nexample there are three queries: query \n    [1; 3]\n can be covered by interval\n\n    [1; 3]\n; query \n    [1; 4]\n can be covered by intervals \n    [1; 3]\n and\n\n    [2; 4]\n. There is no way to cover \n    [1; 4]\n by a single interval;\nquery \n    [3; 4]\n can be covered by interval \n    [2; 4]\n. It doesn't matter\nthat the other points are covered besides the given query. In the second\nexample there are four queries: query \n    [1; 2]\n can be covered by interval\n\n    [1; 3]\n. Note that you can choose any of the two given intervals \n    [1;\n    3]\n; query \n    [1; 3]\n can be covered by interval \n    [1; 3]\n; query\n\n    [1; 4]\n can't be covered by any set of intervals; query \n    [1; 5]\n\ncan't be covered by any set of intervals. Note that intervals \n    [1; 3]\n and\n\n    [4; 5]\n together don't cover \n    [1; 5]\n because even non-integer points\nshould be covered. Here \n    3.5\n, for example, isn't covered.\n\n",
        "cf_contest_id": 1175,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "dp",
            "greedy",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 3\r\n1 3\r\n2 4\r\n1 3\r\n1 4\r\n3 4\r\n",
                "1\r\n2\r\n1\r\n"
            ],
            [
                "3 4\r\n1 3\r\n1 3\r\n4 5\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n",
                "1\r\n1\r\n-1\r\n-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 20\r\n5 9\r\n5 9\r\n9 10\r\n1 8\r\n2 7\r\n1 10\r\n4 6\r\n6 9\r\n6 9\r\n5 9\r\n3 6\r\n1 6\r\n5 7\r\n3 7\r\n0 4\r\n5 7\r\n0 10\r\n5 9\r\n6 10\r\n2 3\r\n8 9\r\n5 8\r\n7 8\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n1\r\n1\r\n1\r\n-1\r\n-1\r\n1\r\n-1\r\n-1\r\n1\r\n-1\r\n1\r\n2\r\n-1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "6 20\r\n9 10\r\n0 1\r\n7 9\r\n3 7\r\n8 10\r\n5 8\r\n5 9\r\n4 5\r\n7 8\r\n8 9\r\n0 8\r\n1 4\r\n4 6\r\n6 9\r\n4 7\r\n6 7\r\n7 9\r\n7 10\r\n4 8\r\n7 9\r\n3 4\r\n7 10\r\n7 9\r\n5 8\r\n4 10\r\n4 6\r\n",
                "2\r\n1\r\n1\r\n1\r\n-1\r\n-1\r\n1\r\n2\r\n1\r\n1\r\n1\r\n2\r\n2\r\n1\r\n1\r\n2\r\n1\r\n1\r\n3\r\n1\r\n"
            ],
            [
                "8 20\r\n6 10\r\n6 9\r\n9 10\r\n1 3\r\n5 8\r\n1 5\r\n6 8\r\n6 9\r\n5 9\r\n3 8\r\n8 9\r\n8 10\r\n1 9\r\n8 10\r\n9 10\r\n5 7\r\n6 10\r\n3 4\r\n5 9\r\n7 9\r\n7 8\r\n5 6\r\n9 10\r\n0 6\r\n4 8\r\n7 9\r\n3 8\r\n4 10\r\n",
                "2\r\n2\r\n1\r\n1\r\n3\r\n1\r\n1\r\n1\r\n1\r\n1\r\n2\r\n1\r\n1\r\n1\r\n1\r\n-1\r\n2\r\n1\r\n2\r\n3\r\n"
            ],
            [
                "5 5\r\n11 15\r\n6 7\r\n0 1\r\n4 7\r\n9 13\r\n14 20\r\n10 15\r\n7 16\r\n11 17\r\n7 10\r\n",
                "-1\r\n2\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "5 10\r\n6 9\r\n8 12\r\n2 6\r\n8 9\r\n4 8\r\n13 20\r\n4 16\r\n12 14\r\n13 18\r\n16 18\r\n12 19\r\n2 13\r\n19 20\r\n13 15\r\n4 20\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n-1\r\n"
            ],
            [
                "5 10\r\n14 60\r\n1 51\r\n56 88\r\n24 62\r\n60 78\r\n82 85\r\n4 69\r\n11 79\r\n91 97\r\n99 100\r\n6 39\r\n38 99\r\n50 91\r\n71 97\r\n52 65\r\n",
                "1\r\n3\r\n3\r\n-1\r\n-1\r\n1\r\n-1\r\n-1\r\n-1\r\n2\r\n"
            ],
            [
                "1 1\r\n1 2\r\n1 2\r\n",
                "1\r\n"
            ],
            [
                "1 1\r\n1 2\r\n2 3\r\n",
                "-1\r\n"
            ],
            [
                "1 1\r\n1 2\r\n0 4\r\n",
                "-1\r\n"
            ]
        ]
    }
]