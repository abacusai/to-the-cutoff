[
    {
        "name": "Halve or Subtract",
        "description": "You have an array of positive integers \n    a_1, a_2, \n    \u2026, a_n\n, of\nlength \n    n\n. You are also given a positive integer \n    b\n. You are allowed\nto perform the following operations (possibly several) times in any order:\nChoose some \n    1 \n    \u2264 i \n    \u2264 n\n, and replace \n    a_i\n with \n    \u2308\n    a_i/2\n    \u2309\n. Here, \n    \u2308 x \n    \u2309\n denotes the\nsmallest integer not less than \n    x\n. Choose some \n    1 \n    \u2264 i \n    \u2264 n\n,\nand replace \n    a_i\n with \n    max(a_i - b, 0)\n. However, you must also\nfollow these rules: You can perform at most \n    k_1\n operations of type 1 in\ntotal. You can perform at most \n    k_2\n operations of type 2 in total. For\nall \n    1 \n    \u2264 i \n    \u2264 n\n, you can perform at most \n    1\n operation of type\n1 on element \n    a_i\n. For all \n    1 \n    \u2264 i \n    \u2264 n\n, you can perform at\nmost \n    1\n operation of type 2 on element \n    a_i\n. The cost of an array is\nthe sum of its elements. Find the minimum cost of \n    a\n you can achieve by\nperforming these operations. Input Input consists of multiple test cases. The\nfirst line contains a single integer \n    t\n, the number of test cases (\n    1\n    \n    \u2264 t \n    \u2264 5000\n). The first line of each test case contains \n    n\n,\n\n    b\n, \n    k_1\n, and \n    k_2\n (\n    1 \n    \u2264 n \n    \u2264 5000\n, \n    1 \n    \u2264 b\n    \n    \u2264 10^9\n, \n    0 \n    \u2264 k_1, k_2 \n    \u2264 n\n). The second line of each test\ncase contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n describing the\narray \n    a\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n). It is guaranteed the sum of\n\n    n\n over all test cases does not exceed \n    5000\n. Output For each test\ncase, print the minimum cost of \n    a\n you can achieve by performing the\noperations. Example Input 7 3 2 1 1 9 3 5 2 1 2 0 1000000000 1 5 3 1 1 2 8 3\n19 3 6 9 4 2 1 2 3 4 5 6 3 10 3 3 1 2 3 5 1 0 0 999999999 999999999 999999999\n999999999 999999999 5 5 4 3 5 9 10 7 4 Output 11 500000001 23 6 0 4999999995 6\nNote In the first test case, you can do the following: Perform operation 2 on\nelement \n    a_3\n. It changes from \n    5\n to \n    3\n. Perform operation 1 on\nelement \n    a_1\n. It changes from \n    9\n to \n    5\n. After these operations,\nthe array is \n    a = [5, 3, 3]\n has a cost \n    5 + 3 + 3 = 11\n. We can show\nthat this is the minimum achievable cost. In the second test case, note that\nwe are not allowed to perform operation 1 more than once on \n    a_1\n. So it\nis optimal to apply operation 1 once to each \n    a_1\n and \n    a_2\n.\nAlternatively we could apply operation 1 only once to \n    a_1\n, since it has\nno effect on \n    a_2\n. In the third test case, here is one way to achieve a\ncost of \n    23\n: Apply operation 1 to \n    a_4\n. It changes from \n    19\n to\n\n    10\n. Apply operation 2 to \n    a_4\n. It changes from \n    10\n to \n    7\n.\nAfter these operations, \n    a = [2, 8, 3, 7, 3]\n. The cost of \n    a\n is \n    2\n    + 8 + 3 + 7 + 3 = 23\n. We can show that this is the minimum achievable cost.\n\n",
        "cf_contest_id": 1799,
        "cf_index": "F",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "dp",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n3 2 1 1\r\n9 3 5\r\n2 1 2 0\r\n1000000000 1\r\n5 3 1 1\r\n2 8 3 19 3\r\n6 9 4 2\r\n1 2 3 4 5 6\r\n3 10 3 3\r\n1 2 3\r\n5 1 0 0\r\n999999999 999999999 999999999 999999999 999999999\r\n5 5 4 3\r\n5 9 10 7 4\r\n",
                "11\r\n500000001\r\n23\r\n6\r\n0\r\n4999999995\r\n6\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 1 0 0\r\n1\r\n",
                "1\r\n"
            ]
        ]
    }
]