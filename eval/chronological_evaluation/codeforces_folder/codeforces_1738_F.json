[
    {
        "name": "Connectivity Addicts",
        "description": "This is an interactive problem. Given a simple undirected graph with \n    n\n\nvertices numbered from \n    1\n to \n    n\n, your task is to color all the\nvertices such that for every color \n    c\n, the following conditions hold: The\nset of vertices with color \n    c\n is connected; \n    s_c \n    \u2264 n_c^2\n, where\n\n    n_c\n is the number of vertices with color \n    c\n, and \n    s_c\n is the\nsum of degrees of vertices with color \n    c\n. It can be shown that there\nalways exists a way to color all the vertices such that the above conditions\nhold. Initially, you are only given the number \n    n\n of vertices and the\ndegree of each vertex. In each query, you can choose a vertex \n    u\n. As a\nresponse, you will be given the \n    k\n-th edge incident to \n    u\n, if this\nis the \n    k\n-th query on vertex \n    u\n. You are allowed to make at most\n\n    n\n queries. An undirected graph is simple if it does not contain multiple\nedges or self-loops. The degree of a vertex is the number of edges incident to\nit. A set \n    S\n of vertices is connected if for every two different vertices\n\n    u, v \n    \u2208 S\n, there is a path, which only passes through vertices in\n\n    S\n, that connects \n    u\n and \n    v\n. That is, there is a sequence of\nedges \n    (u_1, v_1), (u_2, v_2), \n    \u2026, (u_k, v_k)\n with \n    k \n    \u2265 1\n\nsuch that \n    u_1 = u\n, \n    v_k = v\n, and \n    v_i = u_i+1\n for every \n    1\n    \n    \u2264 i < k\n; and \n    u_k \n    \u2208 S\n and \n    v_k \n    \u2208 S\n for every \n    1\n    \n    \u2264 i \n    \u2264 k\n. Especially, a set containing only one vertex is\nconnected. Interaction Each test contains multiple test cases. The first line\ncontains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of\ntest cases. The following lines contain the description and the interactive\nsection of each test case. For each test case, you begin the interaction by\nreading an integer \n    n\n (\n    1\n    \u2264 n \n    \u2264 1000\n) in the first line,\nindicating the number of vertices in the graph. The second line contains\n\n    n\n integers \n    d_1, d_2, \n    \u2026, d_n\n (\n    0 \n    \u2264 d_i \n    \u2264 n -\n    1\n), where \n    d_i\n is the degree of vertex \n    i\n. To make a query on\nvertex \n    u\n (\n    1 \n    \u2264 u \n    \u2264 n\n), you should output \"? \n    u\n\" in a\nseparate line. If this is the \n    k\n-th query on vertex \n    u\n, vertex\n\n    e_u, k\n will be given in the next separate line, where \n    (u,\n    e_u, k\n    )\n is the \n    k\n-th edge incident to vertex \n    u\n. In\ncase of \n    k > d_u\n, define \n    e_u, k = -1\n. You should make no more\nthan \n    n\n \"?\" queries.To give the answer, you should output \"! \n    c_1\n\n\n    c_2\n \n    \u2026\n \n    c_n\n\" in a separate line, where \n    c_i\n (\n    1\n    \n    \u2264 c_i \n    \u2264 n\n) is the color of vertex \n    i\n. After that, your\nprogram should continue to the next test case, or terminate if this is the\nlast test case. It is guaranteed that the graph is a simple undirected graph.\nIt is guaranteed that the sum of \n    n\n over all test cases does not exceed\n\n    1000\n. In case your query format is invalid, or you have made more than\n\n    n\n \"?\" queries, you will receive Wrong Answer verdict. After printing a\nquery, do not forget to output end of line and flush the output. Otherwise,\nyou will get Idleness limit exceeded. To do this, use: fflush(stdout) or\ncout.flush() in C++; System.out.flush() in Java; flush(output) in Pascal;\nstdout.flush() in Python; see documentation for other languages.Hack Format\nThe first line of the hack contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    1000\n), indicating the number of test cases. The following lines contain the\ndescription of each test case. The first line of each test case contains an\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 1000\n), indicating the number of\nvertices in the graph. Then \n    n\n lines follow. The \n    i\n-th line contains\nan integer \n    d_i\n (\n    0 \n    \u2264 d_i \n    \u2264 n - 1\n), indicating the degree\nof vertex \n    i\n, and then \n    d_i\n distinct integers \n    e_i,1, e_i,2,\n    \n    \u2026, e_i,d_i\n (\n    1 \n    \u2264 e_i, j\n    \u2264 n\n and \n    e_i,j\n    \u2260\n    i\n), where \n    (i, e_i,j\n    )\n is the \n    j\n-th edge incident\nto vertex \n    i\n. It should be guaranteed that the graph is a simple\nundirected graph. It should be guaranteed that the sum of \n    n\n over all\ntest cases does not exceed \n    1000\n. Example Input 1 5 2 2 2 2 0 2 4 2 4\nOutput ? 1 ? 1 ? 3 ? 3 ! 1 1 2 2 3 Note In the example, there is only one test\ncase. In the test case, there are \n    n = 5\n vertices with vertices \n    1, 2,\n    3, 4\n of degree \n    2\n and vertex \n    5\n of degree \n    0\n. It is obvious\nthat vertex \n    5\n is isolated, i.e., it does not connect to any other\nvertices. A possible interaction is shown in the sample input and output,\nwhere \n    4\n \"?\" queries are made on vertex \n    1\n twice and vertex \n    3\n\ntwice. According to the responses to these queries, we know that each of\nvertex \n    1\n and vertex \n    3\n connects to two vertices \n    2\n and\n\n    4\n. A possible solution is shown in the sample output, where vertex\n\n    1\n and vertex \n    2\n are colored by \n    1\n, vertex \n    3\n and vertex\n\n    4\n are colored by \n    2\n, and vertex \n    5\n is colored by \n    3\n. It\ncan be seen that this solution satisfies the required conditions as follows.\nFor color \n    c = 1\n, vertex \n    1\n and vertex \n    2\n are connected.\nMoreover, \n    n_1 = 2\n and \n    s_1 = d_1 + d_2 = 2 + 2 = 4 \n    \u2264 n_1^2 = 2^2\n    = 4\n; For color \n    c = 2\n, vertex \n    3\n and vertex \n    4\n are\nconnected. Moreover, \n    n_2 = 2\n and \n    s_2 = d_3 + d_4 = 2 + 2 = 4 \n    \u2264\n    n_2^2 = 2^2 = 4\n; For color \n    c = 3\n, there is only one vertex (vertex\n\n    5\n) colored by \n    3\n. Moreover, \n    n_3 = 1\n and \n    s_3 = d_5 = 0\n    \n    \u2264 n_3^2 = 1^2 = 1\n.\n\n",
        "cf_contest_id": 1738,
        "cf_index": "F",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dsu",
            "graphs",
            "greedy",
            "interactive",
            "shortest paths",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "1\r\n5\r\n2 2 4\r\n2 1 3\r\n2 2 4\r\n2 1 3\r\n0\r\n",
                null
            ]
        ],
        "private_cases": []
    }
]