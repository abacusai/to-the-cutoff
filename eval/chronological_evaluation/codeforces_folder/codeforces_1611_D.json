[
    {
        "name": "Weights Assignment For Tree Edges",
        "description": "You are given a rooted tree consisting of \n    n\n vertices. Vertices are\nnumbered from \n    1\n to \n    n\n. Any vertex can be the root of a tree. A tree\nis a connected undirected graph without cycles. A rooted tree is a tree with a\nselected vertex, which is called the root. The tree is specified by an array\nof ancestors \n    b\n containing \n    n\n numbers: \n    b_i\n is an ancestor of\nthe vertex with the number \n    i\n. The ancestor of a vertex \n    u\n is a\nvertex that is the next vertex on a simple path from \n    u\n to the root. For\nexample, on the simple path from \n    5\n to \n    3\n (the root), the next\nvertex would be \n    1\n, so the ancestor of \n    5\n is \n    1\n. The root has\nno ancestor, so for it, the value of \n    b_i\n is \n    i\n (the root is the\nonly vertex for which \n    b_i=i\n). For example, if \n    n=5\n and \n    b=[3, 1,\n    3, 3, 1]\n, then the tree looks like this. An example of a rooted tree for\n\n    n=5\n, the root of the tree is a vertex number \n    3\n. You are given an\narray \n    p\n \u2014 a permutation of the vertices of the tree. If it is possible,\nassign any positive integer weights on the edges, so that the vertices sorted\nby distance from the root would form the given permutation \n    p\n. In other\nwords, for a given permutation of vertices \n    p\n, it is necessary to choose\nsuch edge weights so that the condition \n    dist[p_i]<dist[p_i+1]\n is true\nfor each \n    i\n from \n    1\n to \n    n-1\n. \n    dist[u]\n is a sum of the\nweights of the edges on the path from the root to \n    u\n. In particular,\n\n    dist[u]=0\n if the vertex \n    u\n is the root of the tree. For example,\nassume that \n    p=[3, 1, 2, 5, 4]\n. In this case, the following edge weights\nsatisfy this permutation: the edge (\n    3, 4\n) has a weight of \n    102\n; the\nedge (\n    3, 1\n) has weight of \n    1\n; the edge (\n    1, 2\n) has a weight of\n\n    10\n; the edge (\n    1, 5\n) has a weight of \n    100\n. The array of\ndistances from the root looks like: \n    dist=[1,11,0,102,101]\n. The vertices\nsorted by increasing the distance from the root form the given permutation\n\n    p\n. Print the required edge weights or determine that there is no\nsuitable way to assign weights. If there are several solutions, then print any\nof them. Input The first line of input data contains an integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of input data sets in the test. Each test\ncase consists of three lines. The first of them contains an integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n). It is the number of vertices in the\ntree. The second line contains \n    n\n integers \n    b_1, b_2, \n    \u2026, b_n\n\n(\n    1 \n    \u2264 b_i \n    \u2264 n\n). It is guaranteed that the \n    b\n array encodes\nsome rooted tree. The third line contains the given permutation \n    p\n:\n\n    n\n of different integers \n    p_1, p_2, \n    \u2026, p_n\n (\n    1 \n    \u2264 p_i\n    \n    \u2264 n\n). It is guaranteed that the sum of the values \n    n\n over all test\ncases in the test does not exceed \n    2 \n    \u00b7 10^5\n. Output For each set of\ninput data print the answer on a separate line. If the solution exists, print\nan array of \n    n\n integers \n    w_1, w_2, \n    \u2026, w_n\n, where \n    w_i\n is\nthe weight of the edge that leads from \n    b_i\n to \n    i\n. For the root\nthere is no such edge, so use the value \n    w_i=0\n. For all other vertices,\nthe values of \n    w_i\n must satisfy the inequality \n    1 \n    \u2264 w_i \n    \u2264\n    10^9\n. There can be equal numbers among \n    w_i\n values, but all sums of\nweights of edges from the root to vertices must be different and satisfy the\ngiven permutation. If there are several solutions, output any of them. If no\nsolution exists, output -1. Example Input 4 5 3 1 3 3 1 3 1 2 5 4 3 1 1 2 3 1\n2 7 1 1 2 3 4 5 6 1 2 3 4 5 6 7 6 4 4 4 4 1 1 4 2 1 5 6 3 Output 1 10 0 102\n100 -1 0 3 100 1 1 2 4 6 5 10 0 2 3 Note The first set of input data of the\nexample is analyzed in the main part of the statement. In the second set of\ninput data of the example, it is impossible to assign the positive weights to\nobtain a given permutation of vertices.\n\n",
        "cf_contest_id": 1611,
        "cf_index": "D",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n5\r\n3 1 3 3 1\r\n3 1 2 5 4\r\n3\r\n1 1 2\r\n3 1 2\r\n7\r\n1 1 2 3 4 5 6\r\n1 2 3 4 5 6 7\r\n6\r\n4 4 4 4 1 1\r\n4 2 1 5 6 3\r\n",
                "1 1 0 4 2\r\n-1\r\n0 1 1 1 1 1 1\r\n2 1 5 0 1 2\r\n"
            ]
        ],
        "private_cases": []
    }
]