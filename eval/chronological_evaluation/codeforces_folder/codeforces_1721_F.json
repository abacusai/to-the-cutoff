[
    {
        "name": "Matching Reduction",
        "description": "You are given a bipartite graph with \n    n_1\n vertices in the first part,\n\n    n_2\n vertices in the second part, and \n    m\n edges. The maximum matching\nin this graph is the maximum possible (by size) subset of edges of this graph\nsuch that no vertex is incident to more than one chosen edge. You have to\nprocess two types of queries to this graph: \n    1\n \u2014 remove the minimum\npossible number of vertices from this graph so that the size of the maximum\nmatching gets reduced exactly by \n    1\n, and print the vertices that you have\nremoved. Then, find any maximum matching in this graph and print the sum of\nindices of edges belonging to this matching; \n    2\n \u2014 query of this type will\nbe asked only after a query of type \n    1\n. As the answer to this query, you\nhave to print the edges forming the maximum matching you have chosen in the\nprevious query. Note that you should solve the problem in online mode. It\nmeans that you can't read the whole input at once. You can read each query\nonly after writing the answer for the last query. Use functions fflush in C++\nand BufferedWriter.flush in Java languages after each writing in your program.\nInput The first line contains four integers \n    n_1\n, \n    n_2\n, \n    m\n and\n\n    q\n (\n    1 \n    \u2264 n_1, n_2 \n    \u2264 2 \n    \u00b7 10^5\n; \n    1 \n    \u2264 m \n    \u2264\n    min(n_1 \n    \u00b7 n_2, 2 \n    \u00b7 10^5)\n; \n    1 \n    \u2264 q \n    \u2264 2 \n    \u00b7\n    10^5\n). Then \n    m\n lines follow. The \n    i\n-th of them contains two\nintegers \n    x_i\n and \n    y_i\n (\n    1 \n    \u2264 x_i \n    \u2264 n_1\n; \n    1 \n    \u2264 y_i\n    \n    \u2264 n_2\n) meaning that the \n    i\n-th edge connects the vertex \n    x_i\n\nin the first part and the vertex \n    y_i\n in the second part. There are no\npairs of vertices that are connected by more than one edge. Then \n    q\n lines\nfollow. The \n    i\n-th of them contains one integer, \n    1\n or \n    2\n,\ndenoting the \n    i\n-th query. Additional constraints on queries: the number\nof queries of type \n    1\n won't exceed the size of the maximum matching in\nthe initial graph; the number of queries of type \n    2\n won't exceed \n    3\n;\neach query of type \n    2\n is preceded by a query of type \n    1\n; your\nsolution is allowed to read the \n    i\n-th query only after printing the\nanswer for the \n    (i-1)\n-th query and flushing the output. Output For a\nquery of type \n    1\n, print the answer in three lines as follows: the first\nline should contain the number of vertices you remove; the second line should\ncontain the indices of vertices you remove, as follows: if you remove the\nvertex \n    x\n from the left part, print \n    x\n; if you remove the vertex\n\n    y\n from the right part, print \n    -y\n (negative index); the third line\nshould contain the sum of indices of edges in some maximum matching in the\nresulting graph. The edges are numbered from \n    1\n to \n    m\n. For a query\nof type \n    2\n, print the answer in two lines as follows: the first line\nshould contain the size of the maximum matching; the second line should\ncontain the indices of the edges belonging to the maximum matching. Note that\nthe sum of these indices should be equal to the number you printed at the end\nof the previous query of type \n    1\n; After printing the answer to a query,\ndon't forget to flush the output. Example Input 3 4 4 4 2 2 1 3 2 1 3 4 1 2 1\n2 Output 1 -4 3 === 2 1 2 === 1 2 2 === 1 2 Note In this problem, you may\nreceive the verdict \"Idleness Limit Exceeded\" since it is in online mode. If\nit happens, it means that either the output format is wrong, or you don't meet\nsome constraint of the problem. You may treat this verdict as \"Wrong Answer\".\nFor your convenience, the output for queries in the example is separated by\nthe line ===. Don't print this line in your program, it is done only to make\nsure that it's easy to distinguish between answers for different queries in\nthe statement.\n\n",
        "cf_contest_id": 1721,
        "cf_index": "F",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "flows",
            "graph matchings",
            "graphs",
            "interactive"
        ],
        "time_limit_seconds": 8.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3 4 4 4\r\n2 2\r\n1 3\r\n2 1\r\n3 4\r\n1\r\n2\r\n1\r\n2\r\n",
                "OK 4 queries processed\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 4 5 6\r\n3 3\r\n2 4\r\n1 1\r\n3 1\r\n2 1\r\n1\r\n2\r\n1\r\n2\r\n1\r\n2\r\n",
                "OK 6 queries processed\r\n"
            ],
            [
                "5 7 14 8\r\n2 4\r\n1 7\r\n5 3\r\n5 6\r\n3 2\r\n1 5\r\n4 6\r\n2 5\r\n3 4\r\n5 5\r\n4 5\r\n1 6\r\n3 7\r\n3 3\r\n1\r\n2\r\n1\r\n2\r\n1\r\n1\r\n2\r\n1\r\n",
                "OK 8 queries processed\r\n"
            ],
            [
                "7 5 14 8\r\n1 4\r\n5 5\r\n2 1\r\n3 4\r\n4 1\r\n4 3\r\n1 1\r\n6 1\r\n7 4\r\n5 3\r\n4 4\r\n3 1\r\n1 3\r\n4 2\r\n1\r\n1\r\n1\r\n2\r\n1\r\n2\r\n1\r\n2\r\n",
                "OK 8 queries processed\r\n"
            ],
            [
                "5 7 14 8\r\n3 7\r\n1 3\r\n4 1\r\n1 6\r\n3 2\r\n1 1\r\n2 2\r\n3 3\r\n4 4\r\n5 4\r\n5 7\r\n1 4\r\n2 5\r\n2 7\r\n1\r\n2\r\n1\r\n1\r\n2\r\n1\r\n2\r\n1\r\n",
                "OK 8 queries processed\r\n"
            ],
            [
                "7 5 14 8\r\n7 2\r\n1 1\r\n2 5\r\n7 3\r\n7 5\r\n5 1\r\n4 3\r\n7 4\r\n6 2\r\n4 4\r\n5 3\r\n2 2\r\n5 2\r\n6 5\r\n1\r\n1\r\n2\r\n1\r\n1\r\n2\r\n1\r\n2\r\n",
                "OK 8 queries processed\r\n"
            ],
            [
                "5 7 14 8\r\n4 6\r\n2 7\r\n1 3\r\n2 1\r\n3 1\r\n3 6\r\n4 4\r\n2 3\r\n5 6\r\n3 3\r\n4 2\r\n3 7\r\n1 1\r\n3 5\r\n1\r\n1\r\n2\r\n1\r\n2\r\n1\r\n1\r\n2\r\n",
                "OK 8 queries processed\r\n"
            ],
            [
                "7 5 14 8\r\n1 2\r\n5 4\r\n2 5\r\n4 5\r\n3 2\r\n5 3\r\n7 2\r\n3 1\r\n4 3\r\n4 4\r\n6 2\r\n3 5\r\n1 5\r\n1 3\r\n1\r\n1\r\n2\r\n1\r\n2\r\n1\r\n2\r\n1\r\n",
                "OK 8 queries processed\r\n"
            ],
            [
                "5 7 14 8\r\n2 6\r\n5 2\r\n5 1\r\n3 3\r\n4 4\r\n4 2\r\n4 5\r\n5 6\r\n5 5\r\n3 1\r\n4 1\r\n1 6\r\n2 5\r\n4 7\r\n1\r\n2\r\n1\r\n1\r\n1\r\n2\r\n1\r\n2\r\n",
                "OK 8 queries processed\r\n"
            ],
            [
                "7 5 14 8\r\n2 4\r\n3 5\r\n2 2\r\n7 5\r\n5 1\r\n6 5\r\n6 3\r\n4 1\r\n4 5\r\n4 4\r\n4 3\r\n7 1\r\n7 2\r\n7 4\r\n1\r\n2\r\n1\r\n2\r\n1\r\n2\r\n1\r\n1\r\n",
                "OK 8 queries processed\r\n"
            ],
            [
                "5 7 14 8\r\n1 3\r\n2 6\r\n4 4\r\n4 1\r\n1 2\r\n3 3\r\n4 2\r\n3 2\r\n5 7\r\n2 4\r\n2 2\r\n1 1\r\n1 5\r\n3 5\r\n1\r\n2\r\n1\r\n2\r\n1\r\n2\r\n1\r\n1\r\n",
                "OK 8 queries processed\r\n"
            ],
            [
                "7 5 14 8\r\n6 3\r\n7 3\r\n3 4\r\n2 1\r\n6 2\r\n3 2\r\n5 3\r\n4 1\r\n7 1\r\n4 4\r\n2 5\r\n4 3\r\n3 5\r\n5 2\r\n1\r\n2\r\n1\r\n1\r\n1\r\n2\r\n1\r\n2\r\n",
                "OK 8 queries processed\r\n"
            ],
            [
                "5 7 14 8\r\n1 1\r\n4 4\r\n5 4\r\n2 6\r\n1 6\r\n1 3\r\n4 2\r\n3 2\r\n2 2\r\n1 5\r\n3 1\r\n2 1\r\n4 3\r\n5 6\r\n1\r\n2\r\n1\r\n2\r\n1\r\n2\r\n1\r\n1\r\n",
                "OK 8 queries processed\r\n"
            ],
            [
                "7 5 14 8\r\n2 1\r\n5 3\r\n3 5\r\n1 1\r\n7 1\r\n2 4\r\n6 2\r\n5 2\r\n4 4\r\n6 3\r\n6 4\r\n2 3\r\n2 2\r\n4 3\r\n1\r\n1\r\n2\r\n1\r\n2\r\n1\r\n1\r\n2\r\n",
                "OK 8 queries processed\r\n"
            ],
            [
                "5 7 14 8\r\n3 4\r\n4 2\r\n2 1\r\n2 4\r\n4 5\r\n1 4\r\n5 2\r\n1 5\r\n5 7\r\n1 3\r\n3 3\r\n2 3\r\n5 3\r\n4 6\r\n1\r\n1\r\n2\r\n1\r\n1\r\n2\r\n1\r\n2\r\n",
                "OK 8 queries processed\r\n"
            ],
            [
                "7 5 14 8\r\n5 2\r\n7 1\r\n7 5\r\n6 3\r\n1 4\r\n6 4\r\n1 1\r\n3 3\r\n6 2\r\n4 1\r\n6 5\r\n7 3\r\n5 1\r\n2 5\r\n1\r\n1\r\n1\r\n2\r\n1\r\n2\r\n1\r\n2\r\n",
                "OK 8 queries processed\r\n"
            ],
            [
                "5 7 14 8\r\n2 4\r\n1 5\r\n4 2\r\n1 7\r\n2 6\r\n2 7\r\n1 1\r\n5 3\r\n2 1\r\n3 6\r\n5 1\r\n3 1\r\n3 5\r\n4 5\r\n1\r\n2\r\n1\r\n1\r\n1\r\n2\r\n1\r\n2\r\n",
                "OK 8 queries processed\r\n"
            ],
            [
                "7 5 14 8\r\n7 3\r\n1 1\r\n3 1\r\n3 5\r\n2 1\r\n7 2\r\n1 2\r\n4 5\r\n4 4\r\n4 1\r\n6 1\r\n2 4\r\n6 3\r\n7 5\r\n1\r\n2\r\n1\r\n2\r\n1\r\n1\r\n2\r\n1\r\n",
                "OK 8 queries processed\r\n"
            ],
            [
                "5 7 14 8\r\n4 1\r\n4 7\r\n1 1\r\n4 2\r\n2 6\r\n5 3\r\n3 3\r\n3 7\r\n2 2\r\n3 2\r\n1 3\r\n2 1\r\n4 3\r\n3 6\r\n1\r\n2\r\n1\r\n2\r\n1\r\n2\r\n1\r\n1\r\n",
                "OK 8 queries processed\r\n"
            ],
            [
                "7 5 14 8\r\n4 3\r\n7 5\r\n3 4\r\n3 2\r\n4 4\r\n1 1\r\n6 3\r\n1 3\r\n2 3\r\n1 5\r\n5 2\r\n4 5\r\n7 2\r\n2 2\r\n1\r\n2\r\n1\r\n1\r\n1\r\n2\r\n1\r\n2\r\n",
                "OK 8 queries processed\r\n"
            ],
            [
                "5 7 14 8\r\n5 6\r\n5 4\r\n1 2\r\n3 1\r\n4 4\r\n1 3\r\n4 6\r\n4 7\r\n1 4\r\n5 3\r\n3 2\r\n3 3\r\n2 5\r\n1 7\r\n1\r\n2\r\n1\r\n1\r\n2\r\n1\r\n1\r\n2\r\n",
                "OK 8 queries processed\r\n"
            ],
            [
                "7 5 14 8\r\n3 1\r\n1 5\r\n5 4\r\n7 1\r\n5 5\r\n4 4\r\n7 5\r\n4 1\r\n3 5\r\n5 1\r\n2 5\r\n2 3\r\n4 2\r\n1 1\r\n1\r\n2\r\n1\r\n2\r\n1\r\n2\r\n1\r\n1\r\n",
                "OK 8 queries processed\r\n"
            ],
            [
                "1 1 1 2\r\n1 1\r\n1\r\n2\r\n",
                "OK 2 queries processed\r\n"
            ],
            [
                "1 1 1 2\r\n1 1\r\n1\r\n2\r\n",
                "OK 2 queries processed\r\n"
            ],
            [
                "1 5 5 2\r\n1 1\r\n1 5\r\n1 2\r\n1 4\r\n1 3\r\n1\r\n2\r\n",
                "OK 2 queries processed\r\n"
            ],
            [
                "1 5 5 2\r\n1 1\r\n1 5\r\n1 2\r\n1 4\r\n1 3\r\n1\r\n2\r\n",
                "OK 2 queries processed\r\n"
            ],
            [
                "5 1 5 2\r\n1 1\r\n4 1\r\n3 1\r\n2 1\r\n5 1\r\n1\r\n2\r\n",
                "OK 2 queries processed\r\n"
            ],
            [
                "5 1 5 2\r\n1 1\r\n4 1\r\n3 1\r\n2 1\r\n5 1\r\n1\r\n2\r\n",
                "OK 2 queries processed\r\n"
            ],
            [
                "5 5 25 8\r\n3 3\r\n5 2\r\n3 2\r\n2 4\r\n2 3\r\n1 1\r\n2 5\r\n1 3\r\n4 1\r\n4 5\r\n1 2\r\n5 3\r\n2 2\r\n4 2\r\n5 4\r\n3 5\r\n2 1\r\n1 5\r\n1 4\r\n3 4\r\n4 4\r\n5 5\r\n5 1\r\n3 1\r\n4 3\r\n1\r\n2\r\n1\r\n2\r\n1\r\n2\r\n1\r\n1\r\n",
                "OK 8 queries processed\r\n"
            ],
            [
                "5 5 25 8\r\n3 3\r\n5 2\r\n3 2\r\n2 4\r\n2 3\r\n1 1\r\n2 5\r\n1 3\r\n4 1\r\n4 5\r\n1 2\r\n5 3\r\n2 2\r\n4 2\r\n5 4\r\n3 5\r\n2 1\r\n1 5\r\n1 4\r\n3 4\r\n4 4\r\n5 5\r\n5 1\r\n3 1\r\n4 3\r\n1\r\n2\r\n1\r\n2\r\n1\r\n2\r\n1\r\n1\r\n",
                "OK 8 queries processed\r\n"
            ]
        ]
    }
]