[
    {
        "name": "Inna and Sweet Matrix",
        "description": "Inna loves sweets very much. That's why she decided to play a game called\n\"Sweet Matrix\". Inna sees an n \u00d7 m matrix and k candies. We'll index the\nmatrix rows from 1 to n and the matrix columns from 1 to m. We'll represent\nthe cell in the i-th row and j-th column as (i, j). Two cells (i, j) and (p,\nq) of the matrix are adjacent if |i - p| + |j - q| = 1. A path is a sequence\nof the matrix cells where each pair of neighbouring cells in the sequence is\nadjacent. We'll call the number of cells in the sequence the path's length.\nEach cell of the matrix can have at most one candy. Initiallly, all the cells\nare empty. Inna is trying to place each of the k candies in the matrix one by\none. For each candy Inna chooses cell (i, j) that will contains the candy, and\nalso chooses the path that starts in cell (1, 1) and ends in cell (i, j) and\ndoesn't contain any candies. After that Inna moves the candy along the path\nfrom cell (1, 1) to cell (i, j), where the candy stays forever. If at some\nmoment Inna can't choose a path for the candy, she loses. If Inna can place\nall the candies in the matrix in the described manner, then her penalty equals\nthe sum of lengths of all the paths she has used. Help Inna to minimize the\npenalty in the game. Input The first line of the input contains three integers\nn, m and k (1 \u2264 n, m \u2264 50, 1 \u2264 k \u2264 n\u00b7m). Output In the first line print an\ninteger \u2014 Inna's minimum penalty in the game. In the next k lines print the\ndescription of the path for each candy. The description of the path of the\ncandy that is placed i-th should follow on the i-th line. The description of a\npath is a sequence of cells. Each cell must be written in the format (i, j),\nwhere i is the number of the row and j is the number of the column. You are\nallowed to print extra whitespaces in the line. If there are multiple optimal\nsolutions, print any of them. Please follow the output format strictly! If\nyour program passes the first pretest, then the output format is correct.\nExamples Input 4 4 4 Output 8 (1,1) (2,1) (2,2) (1,1) (1,2) (1,1) (2,1) (1,1)\nNote Note to the sample. Initially the matrix is empty. Then Inna follows her\nfirst path, the path penalty equals the number of cells in it \u2014 3. Note that\nnow no path can go through cell (2, 2), as it now contains a candy. The next\ntwo candies go to cells (1, 2) and (2, 1). Inna simply leaves the last candy\nat cell (1, 1), the path contains only this cell. The total penalty is: 3 + 2\n+ 2 + 1 = 8. Note that Inna couldn't use cell (1, 1) to place, for instance,\nthe third candy as in this case she couldn't have made the path for the fourth\ncandy.\n\n",
        "cf_contest_id": 390,
        "cf_index": "D",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 4 4\r\n",
                "8\r\n(1,1)(1,2)(1,3)\r\n(1,1)(2,1)\r\n(1,1)(1,2)\r\n(1,1)\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1 1\r\n",
                "1\r\n(1,1)\r\n"
            ],
            [
                "50 50 1\r\n",
                "1\r\n(1,1)\r\n"
            ],
            [
                "4 4 9\r\n",
                "26\r\n(1,1)(1,2)(2,2)(3,2)\r\n(1,1)(1,2)(1,3)(2,3)\r\n(1,1)(1,2)(1,3)(1,4)\r\n(1,1)(2,1)(3,1)\r\n(1,1)(1,2)(2,2)\r\n(1,1)(1,2)(1,3)\r\n(1,1)(2,1)\r\n(1,1)(1,2)\r\n(1,1)\r\n"
            ],
            [
                "10 10 10\r\n",
                "30\r\n(1,1)(1,2)(2,2)(3,2)\r\n(1,1)(2,1)(3,1)(4,1)\r\n(1,1)(1,2)(1,3)(2,3)\r\n(1,1)(1,2)(1,3)(1,4)\r\n(1,1)(1,2)(1,3)\r\n(1,1)(1,2)(2,2)\r\n(1,1)(2,1)(3,1)\r\n(1,1)(2,1)\r\n(1,1)(1,2)\r\n(1,1)\r\n"
            ],
            [
                "50 50 1\r\n",
                "1\r\n(1,1)\r\n"
            ],
            [
                "50 50 10\r\n",
                "30\r\n(1,1)(2,1)(3,1)(4,1)\r\n(1,1)(1,2)(2,2)(3,2)\r\n(1,1)(1,2)(1,3)(2,3)\r\n(1,1)(1,2)(1,3)(1,4)\r\n(1,1)(1,2)(1,3)\r\n(1,1)(2,1)(3,1)\r\n(1,1)(1,2)(2,2)\r\n(1,1)(2,1)\r\n(1,1)(1,2)\r\n(1,1)\r\n"
            ],
            [
                "2 2 3\r\n",
                "5\r\n(1,1)(2,1)\r\n(1,1)(1,2)\r\n(1,1)\r\n"
            ],
            [
                "1 2 1\r\n",
                "1\r\n(1,1)\r\n"
            ]
        ]
    }
]