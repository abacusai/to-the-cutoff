[
    {
        "name": "Land Lot",
        "description": "Vasya has a beautiful garden where wonderful fruit trees grow and yield\nfantastic harvest every year. But lately thieves started to sneak into the\ngarden at nights and steal the fruit too often. Vasya can\u2019t spend the nights\nin the garden and guard the fruit because there\u2019s no house in the garden!\nVasya had been saving in for some time and finally he decided to build the\nhouse. The rest is simple: he should choose in which part of the garden to\nbuild the house. In the evening he sat at his table and drew the garden\u2019s\nplan. On the plan the garden is represented as a rectangular checkered field n\n\u00d7 m in size divided into squares whose side length is 1. In some squares Vasya\nmarked the trees growing there (one shouldn\u2019t plant the trees too close to\neach other that\u2019s why one square contains no more than one tree). Vasya wants\nto find a rectangular land lot a \u00d7 b squares in size to build a house on, at\nthat the land lot border should go along the lines of the grid that separates\nthe squares. All the trees that grow on the building lot will have to be\nchopped off. Vasya loves his garden very much, so help him choose the building\nland lot location so that the number of chopped trees would be as little as\npossible. Input The first line contains two integers n and m (1 \u2264 n, m \u2264 50)\nwhich represent the garden location. The next n lines contain m numbers 0 or\n1, which describe the garden on the scheme. The zero means that a tree doesn\u2019t\ngrow on this square and the 1 means that there is a growing tree. The last\nline contains two integers a and b (1 \u2264 a, b \u2264 50). Note that Vasya can choose\nfor building an a \u00d7 b rectangle as well a b \u00d7 a one, i.e. the side of the lot\nwith the length of a can be located as parallel to the garden side with the\nlength of n, as well as parallel to the garden side with the length of m.\nOutput Print the minimum number of trees that needs to be chopped off to\nselect a land lot a \u00d7 b in size to build a house on. It is guaranteed that at\nleast one lot location can always be found, i. e. either a \u2264 n and b \u2264 m, or a\n\u2264 m \u0438 b \u2264 n. Examples Input 2 2 1 0 1 1 1 1 Output 0 Input 4 5 0 0 1 0 1 0 1 1\n1 0 1 0 1 0 1 1 1 1 1 1 2 3 Output 2 Note In the second example the upper left\nsquare is (1,1) and the lower right is (3,2).\n\n",
        "cf_contest_id": 48,
        "cf_index": "B",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 2\r\n1 0\r\n1 1\r\n1 1\r\n",
                "0\r\n"
            ],
            [
                "4 5\r\n0 0 1 0 1\r\n0 1 1 1 0\r\n1 0 1 0 1\r\n1 1 1 1 1\r\n2 3\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 3\r\n0 0 0\r\n0 0 0\r\n0 0 0\r\n1 2\r\n",
                "0\r\n"
            ],
            [
                "3 3\r\n1 1 1\r\n1 1 1\r\n1 1 1\r\n2 1\r\n",
                "2\r\n"
            ],
            [
                "3 2\r\n1 1\r\n1 1\r\n1 0\r\n2 1\r\n",
                "1\r\n"
            ],
            [
                "2 3\r\n1 0 1\r\n0 1 0\r\n3 2\r\n",
                "3\r\n"
            ],
            [
                "1 1\r\n0\r\n1 1\r\n",
                "0\r\n"
            ],
            [
                "1 1\r\n1\r\n1 1\r\n",
                "1\r\n"
            ],
            [
                "3 4\r\n1 0 1 0\r\n0 1 0 1\r\n1 0 1 0\r\n2 2\r\n",
                "2\r\n"
            ],
            [
                "3 4\r\n1 1 1 1\r\n1 0 0 1\r\n1 1 1 1\r\n3 1\r\n",
                "1\r\n"
            ],
            [
                "10 10\r\n1 1 1 0 0 0 0 1 1 0\r\n1 1 1 0 1 1 0 1 1 1\r\n1 0 1 1 0 1 1 1 1 0\r\n0 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 0 1 1 1 1 1\r\n1 1 1 1 0 0 1 1 1 1\r\n1 1 1 1 0 1 1 1 0 1\r\n0 1 1 1 1 1 1 0 1 0\r\n1 1 1 1 1 0 0 1 0 1\r\n1 1 0 1 0 1 1 1 1 0\r\n5 4\r\n",
                "12\r\n"
            ],
            [
                "10 10\r\n0 1 1 1 1 1 1 0 1 1\r\n0 1 1 1 1 1 0 0 1 1\r\n1 1 0 0 1 1 0 0 0 0\r\n0 0 0 0 1 0 1 1 1 0\r\n1 0 1 0 1 0 1 1 1 1\r\n1 0 0 1 1 1 1 1 0 1\r\n0 0 0 1 1 0 1 1 1 0\r\n1 0 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1\r\n0 0 0 1 1 0 0 1 1 1\r\n1 10\r\n",
                "4\r\n"
            ],
            [
                "10 10\r\n1 0 1 1 1 1 0 0 1 1\r\n1 1 1 1 1 1 1 1 0 1\r\n1 0 0 1 1 1 1 1 1 1\r\n1 0 1 1 1 1 0 1 1 1\r\n0 0 1 0 1 1 1 1 1 1\r\n1 1 1 0 0 1 1 1 1 1\r\n0 1 1 0 1 1 0 1 1 0\r\n1 0 1 1 1 0 1 1 1 1\r\n1 0 1 1 1 0 1 1 0 1\r\n1 1 0 1 1 1 0 0 1 0\r\n10 1\r\n",
                "4\r\n"
            ],
            [
                "10 7\r\n0 1 1 0 0 1 1\r\n1 1 0 0 0 0 1\r\n0 1 0 0 0 1 0\r\n0 1 0 1 1 1 1\r\n1 1 0 1 0 0 1\r\n0 1 0 0 0 0 0\r\n0 1 0 0 1 0 1\r\n0 1 0 1 1 0 0\r\n1 1 0 1 1 1 0\r\n1 1 0 0 0 1 0\r\n1 8\r\n",
                "0\r\n"
            ],
            [
                "10 8\r\n1 1 0 1 1 1 0 0\r\n0 1 0 1 1 1 1 1\r\n1 1 0 0 1 0 0 1\r\n0 1 1 1 1 0 1 0\r\n0 1 1 0 1 1 0 1\r\n0 1 1 0 0 1 0 1\r\n1 0 0 0 1 1 0 1\r\n0 1 1 0 1 1 1 1\r\n0 1 1 1 0 1 0 1\r\n1 1 0 1 1 0 1 1\r\n4 9\r\n",
                "20\r\n"
            ],
            [
                "10 10\r\n1 0 1 1 1 1 1 1 1 1\r\n1 1 1 0 1 1 0 1 1 1\r\n1 1 1 0 1 1 1 1 0 1\r\n1 1 0 1 1 1 0 0 0 1\r\n0 1 0 1 1 1 0 1 1 1\r\n1 0 1 0 1 0 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 0 1 1\r\n1 1 1 1 0 1 1 1 1 1\r\n0 1 1 1 1 0 1 1 0 1\r\n10 10\r\n",
                "80\r\n"
            ],
            [
                "10 10\r\n0 1 1 0 0 0 1 0 0 0\r\n0 0 1 1 1 1 0 1 0 0\r\n1 1 0 1 1 0 0 1 0 0\r\n1 0 0 0 0 0 0 0 1 0\r\n0 0 0 1 0 0 0 1 0 0\r\n0 1 0 0 1 0 0 0 1 0\r\n0 1 0 1 1 1 1 0 0 0\r\n1 0 0 1 0 1 0 0 0 0\r\n0 0 0 0 1 0 0 0 0 0\r\n1 1 0 0 0 0 0 0 1 0\r\n3 7\r\n",
                "4\r\n"
            ],
            [
                "10 10\r\n1 1 1 0 1 1 1 1 0 0\r\n1 1 1 1 1 0 0 0 0 1\r\n0 1 1 0 0 1 1 1 0 0\r\n1 1 1 1 0 1 1 1 1 1\r\n1 0 0 1 0 1 1 1 1 1\r\n1 1 1 1 1 1 0 1 0 1\r\n1 1 1 1 1 1 1 1 0 0\r\n0 1 0 0 1 1 1 1 1 1\r\n0 1 1 1 0 1 0 1 0 0\r\n1 1 0 1 0 1 1 1 1 0\r\n6 7\r\n",
                "27\r\n"
            ],
            [
                "10 8\r\n0 1 1 1 1 1 1 0\r\n0 0 1 1 1 1 1 1\r\n0 1 0 1 1 1 1 0\r\n0 0 1 0 1 0 1 1\r\n0 1 1 1 1 1 1 1\r\n0 1 0 1 0 0 1 1\r\n0 0 0 0 0 0 0 1\r\n1 1 1 1 1 0 1 1\r\n1 1 1 0 1 1 1 0\r\n1 1 0 0 1 1 0 1\r\n8 10\r\n",
                "51\r\n"
            ],
            [
                "10 1\r\n0\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n0\r\n1\r\n1\r\n1 5\r\n",
                "4\r\n"
            ]
        ]
    }
]