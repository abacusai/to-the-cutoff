[
    {
        "name": "Purple Crayon",
        "description": "Two players, Red and Blue, are at it again, and this time they're playing with\ncrayons! The mischievous duo is now vandalizing a rooted tree, by coloring the\nnodes while playing their favorite game. The game works as follows: there is a\ntree of size \n    n\n, rooted at node \n    1\n, where each node is initially\nwhite. Red and Blue get one turn each. Red goes first. In Red's turn, he can\ndo the following operation any number of times: Pick any subtree of the rooted\ntree, and color every node in the subtree red. However, to make the game fair,\nRed is only allowed to color \n    k\n nodes of the tree. In other words, after\nRed's turn, at most \n    k\n of the nodes can be colored red.Then, it's Blue's\nturn. Blue can do the following operation any number of times: Pick any\nsubtree of the rooted tree, and color every node in the subtree blue. However,\nhe's not allowed to choose a subtree that contains a node already colored red,\nas that would make the node purple and no one likes purple crayon. Note:\nthere's no restriction on the number of nodes Blue can color, as long as he\ndoesn't color a node that Red has already colored.After the two turns, the\nscore of the game is determined as follows: let \n    w\n be the number of white\nnodes, \n    r\n be the number of red nodes, and \n    b\n be the number of blue\nnodes. The score of the game is \n    w \n    \u00b7 (r - b)\n. Red wants to maximize\nthis score, and Blue wants to minimize it. If both players play optimally,\nwhat will the final score of the game be? Input The first line contains two\nintegers \n    n\n and \n    k\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n; \n    1 \n    \u2264\n    k \n    \u2264 n\n) \u2014 the number of vertices in the tree and the maximum number of\nred nodes. Next \n    n - 1\n lines contains description of edges. The\n\n    i\n-th line contains two space separated integers \n    u_i\n and \n    v_i\n\n(\n    1 \n    \u2264 u_i, v_i \n    \u2264 n\n; \n    u_i \n    \u2260 v_i\n) \u2014 the \n    i\n-th edge\nof the tree. It's guaranteed that given edges form a tree. Output Print one\ninteger \u2014 the resulting score if both Red and Blue play optimally. Examples\nInput 4 2 1 2 1 3 1 4 Output 1 Input 5 2 1 2 2 3 3 4 4 5 Output 6 Input 7 2 1\n2 1 3 4 2 3 5 6 3 6 7 Output 4 Input 4 1 1 2 1 3 1 4 Output -1 Note In the\nfirst test case, the optimal strategy is as follows: Red chooses to color the\nsubtrees of nodes \n    2\n and \n    3\n. Blue chooses to color the subtree of\nnode \n    4\n. At the end of this process, nodes \n    2\n and \n    3\n are red,\nnode \n    4\n is blue, and node \n    1\n is white. The score of the game is \n    1\n    \n    \u00b7 (2 - 1) = 1\n.In the second test case, the optimal strategy is as\nfollows: Red chooses to color the subtree of node \n    4\n. This colors both\nnodes \n    4\n and \n    5\n. Blue does not have any options, so nothing is\ncolored blue. At the end of this process, nodes \n    4\n and \n    5\n are red,\nand nodes \n    1\n, \n    2\n and \n    3\n are white. The score of the game is\n\n    3 \n    \u00b7 (2 - 0) = 6\n.For the third test case: The score of the game is\n\n    4 \n    \u00b7 (2 - 1) = 4\n.\n\n",
        "cf_contest_id": 1615,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "games",
            "graphs",
            "greedy",
            "math",
            "sortings",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 2\r\n1 2\r\n1 3\r\n1 4\r\n",
                "1"
            ],
            [
                "5 2\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n",
                "6"
            ],
            [
                "7 2\r\n1 2\r\n1 3\r\n4 2\r\n3 5\r\n6 3\r\n6 7\r\n",
                "4"
            ],
            [
                "4 1\r\n1 2\r\n1 3\r\n1 4\r\n",
                "-1"
            ]
        ],
        "private_cases": [
            [
                "2 1\r\n1 2\r\n",
                "1"
            ],
            [
                "2 2\r\n1 2\r\n",
                "1"
            ],
            [
                "3 1\r\n3 2\r\n3 1\r\n",
                "2"
            ],
            [
                "4 4\r\n3 2\r\n4 3\r\n2 1\r\n",
                "4"
            ],
            [
                "5 2\r\n2 1\r\n2 3\r\n5 3\r\n4 1\r\n",
                "6"
            ],
            [
                "4 4\r\n1 2\r\n1 3\r\n1 4\r\n",
                "3"
            ],
            [
                "21 1\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 11\r\n11 12\r\n12 13\r\n5 14\r\n14 15\r\n14 16\r\n14 17\r\n14 18\r\n14 19\r\n14 20\r\n14 21\r\n",
                "-84"
            ],
            [
                "6 5\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n",
                "5"
            ],
            [
                "4 3\r\n1 2\r\n1 3\r\n1 4\r\n",
                "3"
            ]
        ]
    }
]