[
    {
        "name": "Berland Federalization",
        "description": "Recently, Berland faces federalization requests more and more often. The\nproponents propose to divide the country into separate states. Moreover, they\ndemand that there is a state which includes exactly k towns. Currently,\nBerland has n towns, some pairs of them are connected by bilateral roads.\nBerland has only n - 1 roads. You can reach any city from the capital, that\nis, the road network forms a tree. The Ministry of Roads fears that after the\nreform those roads that will connect the towns of different states will bring\na lot of trouble. Your task is to come up with a plan to divide the country\ninto states such that: each state is connected, i.e. for each state it is\npossible to get from any town to any other using its roads (that is, the roads\nthat connect the state towns), there is a state that consisted of exactly k\ncities, the number of roads that connect different states is minimum. Input\nThe first line contains integers n, k (1 \u2264 k \u2264 n \u2264 400). Then follow n - 1\nlines, each of them describes a road in Berland. The roads are given as pairs\nof integers xi, yi (1 \u2264 xi, yi \u2264 n; xi \u2260 yi) \u2014 the numbers of towns connected\nby the road. Assume that the towns are numbered from 1 to n. Output The the\nfirst line print the required minimum number of \"problem\" roads t. Then print\na sequence of t integers \u2014 their indices in the found division. The roads are\nnumbered starting from 1 in the order they follow in the input. If there are\nmultiple possible solutions, print any of them. If the solution shows that\nthere are no \"problem\" roads at all, print a single integer 0 and either leave\nthe second line empty or do not print it at all. Examples Input 5 2 1 2 2 3 3\n4 4 5 Output 1 2 Input 5 3 1 2 1 3 1 4 1 5 Output 2 3 4 Input 1 1 Output 0\n\n",
        "cf_contest_id": 440,
        "cf_index": "D",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 2\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n",
                "1\r\n2\r\n\r\n"
            ],
            [
                "5 3\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n",
                "2\r\n4\r\n3\r\n\r\n"
            ],
            [
                "1 1\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "11 4\r\n1 2\r\n1 3\r\n1 4\r\n2 6\r\n2 7\r\n1 5\r\n2 8\r\n4 9\r\n4 10\r\n4 11\r\n",
                "1\r\n1\r\n\r\n"
            ],
            [
                "11 10\r\n1 2\r\n1 3\r\n1 4\r\n2 6\r\n2 7\r\n1 5\r\n2 8\r\n4 9\r\n4 10\r\n4 11\r\n",
                "1\r\n6\r\n\r\n"
            ],
            [
                "12 3\r\n1 2\r\n1 3\r\n1 4\r\n2 6\r\n2 7\r\n1 5\r\n2 8\r\n4 9\r\n4 10\r\n4 11\r\n11 12\r\n",
                "2\r\n3\r\n1\r\n\r\n"
            ],
            [
                "12 6\r\n1 2\r\n1 3\r\n1 4\r\n2 6\r\n2 7\r\n1 5\r\n2 8\r\n4 9\r\n4 10\r\n4 11\r\n11 12\r\n",
                "2\r\n6\r\n3\r\n\r\n"
            ],
            [
                "15 5\r\n9 12\r\n8 9\r\n12 14\r\n13 9\r\n15 8\r\n10 9\r\n9 4\r\n1 9\r\n1 3\r\n3 2\r\n9 11\r\n15 6\r\n1 5\r\n15 7\r\n",
                "3\r\n8\r\n2\r\n1\r\n\r\n"
            ],
            [
                "16 6\r\n1 4\r\n4 13\r\n1 5\r\n4 15\r\n2 1\r\n15 16\r\n13 8\r\n1 11\r\n14 13\r\n10 2\r\n7 5\r\n4 9\r\n11 6\r\n12 5\r\n6 3\r\n",
                "2\r\n8\r\n1\r\n\r\n"
            ],
            [
                "17 7\r\n3 13\r\n13 15\r\n15 2\r\n11 13\r\n3 16\r\n8 15\r\n17 11\r\n1 3\r\n9 16\r\n15 10\r\n8 6\r\n12 8\r\n5 1\r\n15 4\r\n11 7\r\n14 6\r\n",
                "2\r\n5\r\n2\r\n\r\n"
            ],
            [
                "18 8\r\n8 9\r\n5 9\r\n5 7\r\n9 12\r\n17 9\r\n9 2\r\n2 3\r\n8 1\r\n1 4\r\n1 13\r\n13 16\r\n15 8\r\n4 11\r\n14 9\r\n18 4\r\n8 10\r\n5 6\r\n",
                "2\r\n11\r\n1\r\n\r\n"
            ],
            [
                "19 9\r\n15 19\r\n15 5\r\n17 15\r\n15 2\r\n14 2\r\n7 14\r\n11 19\r\n5 13\r\n18 5\r\n1 2\r\n5 3\r\n13 10\r\n16 18\r\n16 6\r\n9 15\r\n4 13\r\n17 8\r\n2 12\r\n",
                "2\r\n5\r\n2\r\n\r\n"
            ]
        ]
    }
]