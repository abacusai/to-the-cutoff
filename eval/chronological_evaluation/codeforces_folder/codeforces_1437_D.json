[
    {
        "name": "Minimal Height Tree",
        "description": "Monocarp had a tree which consisted of \n    n\n vertices and was rooted at\nvertex \n    1\n. He decided to study BFS (Breadth-first search), so he ran BFS\non his tree, starting from the root. BFS can be described by the following\npseudocode: a = [] # the order in which vertices were processed q = Queue()\nq.put(1) # place the root at the end of the queue while not q.empty(): k =\nq.pop() # retrieve the first vertex from the queue a.append(k) # append k to\nthe end of the sequence in which vertices were visited for y in g[k]: # g[k]\nis the list of all children of vertex k, sorted in ascending order q.put(y)\nMonocarp was fascinated by BFS so much that, in the end, he lost his tree.\nFortunately, he still has a sequence of vertices, in which order vertices were\nvisited by the BFS algorithm (the array a from the pseudocode). Monocarp knows\nthat each vertex was visited exactly once (since they were put and taken from\nthe queue exactly once). Also, he knows that all children of each vertex were\nviewed in ascending order. Monocarp knows that there are many trees (in the\ngeneral case) with the same visiting order \n    a\n, so he doesn't hope to\nrestore his tree. Monocarp is okay with any tree that has minimum height. The\nheight of a tree is the maximum depth of the tree's vertices, and the depth of\na vertex is the number of edges in the path from the root to it. For example,\nthe depth of vertex \n    1\n is \n    0\n, since it's the root, and the depth of\nall root's children are \n    1\n. Help Monocarp to find any tree with given\nvisiting order \n    a\n and minimum height. Input The first line contains a\nsingle integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of test\ncases. The first line of each test case contains a single integer \n    n\n\n(\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of vertices in the tree.\nThe second line of each test case contains \n    n\n integers \n    a_1, a_2,\n    \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n; \n    a_i \n    \u2260 a_j\n; \n    a_1 =\n    1\n) \u2014 the order in which the vertices were visited by the BFS algorithm.\nIt's guaranteed that the total sum of \n    n\n over test cases doesn't exceed\n\n    2 \n    \u00b7 10^5\n. Output For each test case print the minimum possible\nheight of a tree with the given visiting order \n    a\n. Example Input 3 4 1 4\n3 2 2 1 2 3 1 2 3 Output 3 1 1 Note In the first test case, there is only one\ntree with the given visiting order: In the second test case, there is only one\ntree with the given visiting order as well: In the third test case, an optimal\ntree with the given visiting order is shown below:\n\n",
        "cf_contest_id": 1437,
        "cf_index": "D",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "graphs",
            "greedy",
            "shortest paths",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n4\r\n1 4 3 2\r\n2\r\n1 2\r\n3\r\n1 2 3\r\n",
                "3\r\n1\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]