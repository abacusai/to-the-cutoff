[
    {
        "name": "Choose a Square",
        "description": "Petya recently found a game \"Choose a Square\". In this game, there are \n    n\n\npoints numbered from \n    1\n to \n    n\n on an infinite field. The \n    i\n-th\npoint has coordinates \n    (x_i, y_i)\n and cost \n    c_i\n. You have to choose\na square such that its sides are parallel to coordinate axes, the lower left\nand upper right corners belong to the line \n    y = x\n, and all corners have\ninteger coordinates. The score you get is the sum of costs of the points\ncovered by the selected square minus the length of the side of the square.\nNote that the length of the side can be zero. Petya asks you to calculate the\nmaximum possible score in the game that can be achieved by placing exactly one\nsquare. Input The first line of the input contains one integer \n    n\n (\n    1\n    \n    \u2264 n \n    \u2264 5 \n    \u00b7 10^5\n) \u2014 the number of points on the field. Each of\nthe following \n    n\n lines contains three integers \n    x_i, y_i, c_i\n (\n    0\n    \n    \u2264 x_i, y_i \n    \u2264 10^9, -10^6 \n    \u2264 c_i \n    \u2264 10^6\n) \u2014 coordinates of the\n\n    i\n-th point and its cost, respectively. Output In the first line print\nthe maximum score Petya can achieve. In the second line print four integers\n\n    x_1, y_1, x_2, y_2\n (\n    0 \n    \u2264 x_1, y_1, x_2, y_2 \n    \u2264 2 \n    \u00b7 10^9,\n    x_1 = y_1, x_2 = y_2, x_1 \n    \u2264 x_2\n) separated by spaces \u2014 the coordinates\nof the lower left and upper right corners of the square which Petya has to\nselect in order to achieve the maximum score. Examples Input 6 0 0 2 1 0 -5 1\n1 3 2 3 4 1 4 -4 3 1 -1 Output 4 1 1 3 3 Input 5 3 3 0 3 3 -3 0 2 -1 3 1 3 0 0\n-2 Output 0 1 1 1 1 Note The field corresponding to the first example:\n\n",
        "cf_contest_id": 1221,
        "cf_index": "F",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "sortings"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n0 0 2\r\n1 0 -5\r\n1 1 3\r\n2 3 4\r\n1 4 -4\r\n3 1 -1\r\n",
                "4\r\n1 1 3 3\r\n"
            ],
            [
                "5\r\n3 3 0\r\n3 3 -3\r\n0 2 -1\r\n3 1 3\r\n0 0 -2\r\n",
                "0\r\n1000000001 1000000001 1000000001 1000000001\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n0 0 -1\r\n0 1 1\r\n1 0 -2\r\n1 1 -1\r\n",
                "0\r\n1000000001 1000000001 1000000001 1000000001\r\n"
            ],
            [
                "10\r\n10 0 -1\r\n1 10 -4\r\n3 6 3\r\n4 2 -5\r\n10 7 -1\r\n3 7 3\r\n3 7 -2\r\n8 10 4\r\n5 0 -1\r\n2 3 3\r\n",
                "2\r\n2 2 3 3\r\n"
            ],
            [
                "10\r\n0 1 1\r\n3 4 1\r\n1 2 1\r\n2 4 5\r\n5 0 4\r\n3 3 4\r\n5 0 -3\r\n3 0 3\r\n1 1 -1\r\n0 0 -2\r\n",
                "8\r\n0 0 4 4\r\n"
            ]
        ]
    }
]