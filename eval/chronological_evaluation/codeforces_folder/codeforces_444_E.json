[
    {
        "name": "DZY Loves Planting",
        "description": "DZY loves planting, and he enjoys solving tree problems. DZY has a weighted\ntree (connected undirected graph without cycles) containing n nodes (they are\nnumbered from 1 to n). He defines the function g(x, y) (1 \u2264 x, y \u2264 n) as the\nlongest edge in the shortest path between nodes x and y. Specially g(z, z) = 0\nfor every z. For every integer sequence p1, p2, ..., pn (1 \u2264 pi \u2264 n), DZY\ndefines f(p) as . DZY wants to find such a sequence p that f(p) has maximum\npossible value. But there is one more restriction: the element j can appear in\np at most xj times. Please, find the maximum possible f(p) under the described\nrestrictions. Input The first line contains an integer n (1 \u2264 n \u2264 3000). Each\nof the next n - 1 lines contains three integers ai, bi, ci (1 \u2264 ai, bi \u2264 n; 1\n\u2264 ci \u2264 10000), denoting an edge between ai and bi with length ci. It is\nguaranteed that these edges form a tree. Each of the next n lines describes an\nelement of sequence x. The j-th line contains an integer xj (1 \u2264 xj \u2264 n).\nOutput Print a single integer representing the answer. Examples Input 4 1 2 1\n2 3 2 3 4 3 1 1 1 1 Output 2 Input 4 1 2 1 2 3 2 3 4 3 4 4 4 4 Output 3 Note\nIn the first sample, one of the optimal p is [4, 3, 2, 1].\n\n",
        "cf_contest_id": 444,
        "cf_index": "E",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dsu",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 2 1\r\n2 3 2\r\n3 4 3\r\n1\r\n1\r\n1\r\n1\r\n",
                "2"
            ],
            [
                "4\r\n1 2 1\r\n2 3 2\r\n3 4 3\r\n4\r\n4\r\n4\r\n4\r\n",
                "3"
            ]
        ],
        "private_cases": [
            [
                "10\r\n2 1 8760\r\n3 1 3705\r\n4 1 1862\r\n5 2 7332\r\n6 3 7015\r\n7 5 4866\r\n8 3 4465\r\n9 7 8886\r\n10 3 9362\r\n2\r\n5\r\n5\r\n4\r\n4\r\n5\r\n4\r\n5\r\n1\r\n2\r\n",
                "8760"
            ],
            [
                "10\r\n2 1 5297\r\n3 2 7674\r\n4 1 1935\r\n5 2 1941\r\n6 3 1470\r\n7 1 3823\r\n8 2 4959\r\n9 4 6866\r\n10 9 2054\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n",
                "5297"
            ],
            [
                "10\r\n2 1 3921\r\n3 2 3204\r\n4 3 1912\r\n5 4 6844\r\n6 5 8197\r\n7 6 7148\r\n8 7 5912\r\n9 8 104\r\n10 9 5881\r\n4\r\n4\r\n5\r\n2\r\n2\r\n4\r\n1\r\n2\r\n3\r\n1\r\n",
                "8197"
            ],
            [
                "10\r\n2 1 6818\r\n3 2 9734\r\n4 3 2234\r\n5 4 3394\r\n6 5 1686\r\n7 6 3698\r\n8 7 700\r\n9 8 716\r\n10 9 1586\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n",
                "3698"
            ],
            [
                "10\r\n1 6 4890\r\n2 6 2842\r\n3 6 7059\r\n4 6 3007\r\n5 6 6195\r\n7 6 3962\r\n8 6 3413\r\n9 6 7658\r\n10 6 8049\r\n3\r\n3\r\n3\r\n1\r\n4\r\n4\r\n5\r\n2\r\n1\r\n1\r\n",
                "6195"
            ],
            [
                "10\r\n1 2 5577\r\n3 2 6095\r\n4 2 4743\r\n5 2 2254\r\n6 2 9771\r\n7 2 7417\r\n8 2 9342\r\n9 2 2152\r\n10 2 5785\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n",
                "5785"
            ],
            [
                "10\r\n2 1 2464\r\n3 1 5760\r\n4 3 9957\r\n5 1 6517\r\n6 4 8309\r\n7 3 3176\r\n8 7 1982\r\n9 1 7312\r\n10 2 3154\r\n1\r\n1\r\n4\r\n1\r\n1\r\n3\r\n3\r\n5\r\n3\r\n2\r\n",
                "7312"
            ],
            [
                "10\r\n2 1 559\r\n3 1 5707\r\n4 2 9790\r\n5 3 1591\r\n6 1 7113\r\n7 6 2413\r\n8 6 3006\r\n9 4 1935\r\n10 6 5954\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n",
                "7113"
            ],
            [
                "2\r\n1 2 10000\r\n1\r\n1\r\n",
                "10000"
            ],
            [
                "1\r\n1\r\n",
                "0"
            ]
        ]
    }
]