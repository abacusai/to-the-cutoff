[
    {
        "name": "The Fox and the Complete Tree Traversal",
        "description": "The fox Yae climbed the tree of the Sacred Sakura. A tree is a connected\nundirected graph that does not contain cycles. The fox uses her magical powers\nto move around the tree. Yae can jump from vertex \n    v\n to another vertex\n\n    u\n if and only if the distance between these vertices does not exceed\n\n    2\n. In other words, in one jump Yae can jump from vertex \n    v\n to\nvertex \n    u\n if vertices \n    v\n and \n    u\n are connected by an edge, or if\nthere exists such vertex \n    w\n that vertices \n    v\n and \n    w\n are\nconnected by an edge, and also vertices \n    u\n and \n    w\n are connected by\nan edge. After Yae was able to get the sakura petal, she wondered if there was\na cyclic route in the tree \n    v_1, v_2, \n    \u2026, v_n\n such that: the fox\ncan jump from vertex \n    v_i\n to vertex \n    v_i + 1\n, the fox can jump\nfrom vertex \n    v_n\n to vertex \n    v_1\n, all \n    v_i\n are pairwise\ndistinct. Help the fox determine if the required traversal exists. Input The\nfirst line contains one integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n)\n\u2014the number of vertices of the tree. Each of the following \n    n - 1\n lines\ncontains two integers \n    u\n and \n    v\n (\n    1 \n    \u2264 u, v \n    \u2264 n\n, \n    u\n    \n     v\n) \u2014 vertices connected by an edge. It is guaranteed that these edges\nform a tree. Output On the first line, print \"Yes\" (without quotes) if the\nrequired route of the tree exists, or \"No\" (without quotes) otherwise. If the\nrequired tree traversal exists, on the second line print \n    n\n integers of\ndifferent integers \n    v_1, v_2, \n    \u2026, v_n\n (\n    1 \n    \u2264 v_i \n    \u2264 n\n) \u2014\nthe vertices of the tree in traversal order. If there are several correct\ntraversals, output any of them. Examples Input 5 1 2 1 3 3 4 3 5 Output Yes 4\n5 1 2 3 Input 3 1 2 1 3 Output Yes 1 2 3 Input 15 1 2 1 3 2 4 2 5 3 6 3 7 4 8\n4 9 5 10 5 11 6 12 6 13 7 14 7 15 Output No Note The tree from the first\nexample is shown below. The bold arrows indicate the fox's route. In the\nsecond example, any sequence of three different vertices is a correct route,\nbecause the fox can jump from any vertex to any vertex. The tree from the\nthird example is shown below. It can be shown that there is no required route\nfor it.\n\n",
        "cf_contest_id": 1819,
        "cf_index": "C",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dp",
            "implementation",
            "math",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 2\r\n1 3\r\n3 4\r\n3 5\r\n",
                "Yes\r\n3 2 1 4 5 "
            ],
            [
                "3\r\n1 2\r\n1 3\r\n",
                "Yes\r\n1 2 3 "
            ],
            [
                "15\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n3 7\r\n4 8\r\n4 9\r\n5 10\r\n5 11\r\n6 12\r\n6 13\r\n7 14\r\n7 15\r\n",
                "No\r\n"
            ]
        ],
        "private_cases": [
            [
                "9\r\n1 2\r\n2 3\r\n2 4\r\n2 5\r\n3 6\r\n3 7\r\n3 8\r\n8 9\r\n",
                "Yes\r\n8 6 7 2 1 4 5 3 9 "
            ],
            [
                "2\r\n1 2\r\n",
                "Yes\r\n1 2 "
            ],
            [
                "2\r\n2 1\r\n",
                "Yes\r\n1 2 "
            ],
            [
                "10\r\n10 2\r\n3 7\r\n8 5\r\n3 5\r\n1 8\r\n2 9\r\n4 9\r\n6 1\r\n6 10\r\n",
                "Yes\r\n9 10 1 5 7 3 8 6 2 4 "
            ],
            [
                "10\r\n8 7\r\n8 1\r\n3 8\r\n8 10\r\n8 4\r\n8 2\r\n5 8\r\n6 8\r\n9 8\r\n",
                "Yes\r\n1 7 3 10 4 2 5 6 9 8 "
            ],
            [
                "10\r\n9 3\r\n9 10\r\n1 7\r\n6 2\r\n6 8\r\n5 7\r\n3 8\r\n8 7\r\n4 9\r\n",
                "No\r\n"
            ],
            [
                "10\r\n3 10\r\n7 2\r\n4 8\r\n1 4\r\n2 5\r\n6 7\r\n9 7\r\n3 4\r\n3 7\r\n",
                "Yes\r\n4 10 7 5 2 6 9 3 8 1 "
            ],
            [
                "5\r\n4 5\r\n1 5\r\n3 5\r\n2 5\r\n",
                "Yes\r\n1 4 3 2 5 "
            ],
            [
                "5\r\n1 3\r\n3 2\r\n4 2\r\n5 2\r\n",
                "Yes\r\n3 4 5 2 1 "
            ],
            [
                "5\r\n3 2\r\n4 2\r\n1 2\r\n5 1\r\n",
                "Yes\r\n2 5 1 3 4 "
            ],
            [
                "5\r\n5 4\r\n2 1\r\n1 5\r\n3 4\r\n",
                "Yes\r\n4 1 2 5 3 "
            ],
            [
                "5\r\n3 2\r\n4 1\r\n2 5\r\n1 3\r\n",
                "Yes\r\n2 1 4 3 5 "
            ],
            [
                "10\r\n9 1\r\n3 1\r\n10 1\r\n2 1\r\n4 1\r\n6 4\r\n8 4\r\n7 1\r\n5 1\r\n",
                "Yes\r\n4 9 3 10 2 7 5 1 6 8 "
            ],
            [
                "10\r\n1 10\r\n7 6\r\n6 4\r\n8 6\r\n2 5\r\n3 5\r\n9 5\r\n5 10\r\n10 6\r\n",
                "Yes\r\n6 1 5 2 3 9 10 7 4 8 "
            ],
            [
                "10\r\n6 5\r\n4 2\r\n1 4\r\n8 6\r\n7 9\r\n2 8\r\n10 1\r\n9 1\r\n3 9\r\n",
                "Yes\r\n9 10 4 8 5 6 2 1 7 3 "
            ],
            [
                "7\r\n1 4\r\n2 4\r\n2 3\r\n4 6\r\n5 6\r\n1 7\r\n",
                "No\r\n"
            ]
        ]
    }
]