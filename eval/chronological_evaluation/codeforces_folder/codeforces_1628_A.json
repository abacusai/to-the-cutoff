[
    {
        "name": "Meximum Array",
        "description": "Mihai has just learned about the MEX concept and since he liked it so much, he\ndecided to use it right away. Given an array \n    a\n of \n    n\n non-negative\nintegers, Mihai wants to create a new array \n    b\n that is formed in the\nfollowing way: While \n    a\n is not empty: Choose an integer \n    k\n (\n    1\n    \n    \u2264 k \n    \u2264 |a|\n). Append the MEX of the first \n    k\n numbers of the\narray \n    a\n to the end of array \n    b\n and erase them from the array\n\n    a\n, shifting the positions of the remaining numbers in \n    a\n. But,\nsince Mihai loves big arrays as much as the MEX concept, he wants the new\narray \n    b\n to be the lexicographically maximum. So, Mihai asks you to tell\nhim what the maximum array \n    b\n that can be created by constructing the\narray optimally is. An array \n    x\n is lexicographically greater than an\narray \n    y\n if in the first position where \n    x\n and \n    y\n differ \n    x_i\n    > y_i\n or if \n    |x| > |y|\n and \n    y\n is a prefix of \n    x\n (where\n\n    |x|\n denotes the size of the array \n    x\n). The MEX of a set of non-\nnegative integers is the minimal non-negative integer such that it is not in\nthe set. For example, MEX(\n    1, 2, 3\n) \n    = 0\n and MEX(\n    0, 1, 2,\n    4, 5\n) \n    = 3\n. Input The first line of the input contains a single\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test cases. The\ndescription of test cases follows. The first line of each test case contains a\nsingle integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number\nof elements in the array \n    a\n. The second line of each test case contains\n\n    n\n non-negative integers \n    a_1, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264\n    n\n), where \n    a_i\n is the \n    i\n-th integer from the array \n    a\n. It is\nguaranteed that the sum of \n    n\n over all test cases does not exceed \n    2\n    \n    \u00b7 10^5\n. Output For each test case print \n    m\n \u2014 the length of the\nmaximum array \n    b\n Mihai can create, followed by \n    m\n integers denoting\nthe elements of the array \n    b\n. Example Input 6 5 1 0 2 0 3 8 2 2 3 4 0 1 2\n0 1 1 5 0 1 2 3 4 4 0 1 1 0 10 0 0 2 1 1 1 0 0 1 1 Output 1 4 2 5 1 1 0 1 5 2\n2 2 4 3 2 2 0 Note In the first test case, the lexicographically maximum array\n\n    b\n is obtained by selecting \n    k=5\n, resulting in the \n    MEX\n of the\nwhole array \n    a\n. It is lexicographically maximum because an array starting\nwith a smaller number than \n    4\n is lexicographically smaller, and choosing\na \n    k<5\n would result in an array starting with a number smaller than\n\n    4\n. In the second test case, there are two ways to obtain the maximum\narray: first selecting \n    k=6\n, then \n    k=2\n, or first selecting \n    k=7\n\nand then \n    k=1\n.\n\n",
        "cf_contest_id": 1628,
        "cf_index": "A",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "constructive algorithms",
            "greedy",
            "implementation",
            "math",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n5\r\n1 0 2 0 3\r\n8\r\n2 2 3 4 0 1 2 0\r\n1\r\n1\r\n5\r\n0 1 2 3 4\r\n4\r\n0 1 1 0\r\n10\r\n0 0 2 1 1 1 0 0 1 1\r\n",
                "1\r\n4\r\n2\r\n5 1\r\n1\r\n0\r\n1\r\n5\r\n2\r\n2 2\r\n4\r\n3 2 2 0\r\n"
            ]
        ],
        "private_cases": []
    }
]