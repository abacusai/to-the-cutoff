[
    {
        "name": "Chain Chips",
        "description": "You are given an undirected graph consisting of \n    n\n vertices and \n    n-1\n\nedges. The \n    i\n-th edge has weight \n    a_i\n; it connects the vertices\n\n    i\n and \n    i+1\n. Initially, each vertex contains a chip. Each chip has\nan integer written on it; the integer written on the chip in the \n    i\n-th\nvertex is \n    i\n. In one operation, you can choose a chip (if there are\nmultiple chips in a single vertex, you may choose any one of them) and move it\nalong one of the edges of the graph. The cost of this operation is equal to\nthe weight of the edge. The cost of the graph is the minimum cost of a\nsequence of such operations that meets the following condition: after all\noperations are performed, each vertex contains exactly one chip, and the\ninteger on each chip is not equal to the index of the vertex where that chip\nis located. You are given \n    q\n queries of the form: \n    k\n \n    x\n \u2014\nchange the weight of the \n    k\n-th edge (the one which connects the vertices\n\n    k\n and \n    k+1\n) to \n    x\n. After each query, print the cost of the\ngraph. Note that you don't actually move any chips; when you compute the cost,\nthe chips are on their initial positions. Input The first line contains one\ninteger \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n). The second line\ncontains \n    n-1\n integers \n    a_1, a_2, \n    \u2026, a_n-1\n (\n    1 \n    \u2264 a_i\n    \n    \u2264 10^9\n). The third line contains one integer \n    q\n (\n    1 \n    \u2264 q\n    \n    \u2264 2 \n    \u00b7 10^5\n). Then \n    q\n lines follow. The \n    i\n-th of them\ncontains two integers \n    k\n and \n    x\n (\n    1 \n    \u2264 k \n    \u2264 n-1\n; \n    1\n    \n    \u2264 x \n    \u2264 10^9\n) for the \n    i\n-th query. Output For each query, print\none integer \u2014 the cost of the graph after the query is performed. Example\nInput 10 12 6 12 15 20 8 17 12 15 8 4 10 7 3 6 14 9 9 2 10 3 5 4 11 7 11\nOutput 126 108 120 108 112 98 98 114\n\n",
        "cf_contest_id": 1814,
        "cf_index": "E",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp",
            "matrices"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "10\r\n12 6 12 15 20 8 17 12 15\r\n8\r\n4 10\r\n7 3\r\n6 14\r\n9 9\r\n2 10\r\n3 5\r\n4 11\r\n7 11\r\n",
                "126\r\n108\r\n120\r\n108\r\n112\r\n98\r\n98\r\n114\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n5\r\n1\r\n1 3\r\n",
                "6\r\n"
            ],
            [
                "2\r\n1\r\n1\r\n1 1\r\n",
                "2\r\n"
            ],
            [
                "3\r\n1 1\r\n1\r\n1 1\r\n",
                "4\r\n"
            ]
        ]
    }
]