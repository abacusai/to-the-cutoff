[
    {
        "name": "Make It Connected",
        "description": "You are given a simple undirected graph consisting of \n    n\n vertices. The\ngraph doesn't contain self-loops, there is at most one edge between each pair\nof vertices. Your task is simple: make the graph connected. You can do the\nfollowing operation any number of times (possibly zero): Choose a vertex\n\n    u\n arbitrarily. For each vertex \n    v\n satisfying \n    v\n     u\n in the\ngraph individually, if \n    v\n is adjacent to \n    u\n, remove the edge between\n\n    u\n and \n    v\n, otherwise add an edge between \n    u\n and \n    v\n. Find\nthe minimum number of operations required to make the graph connected. Also,\nfind any sequence of operations with the minimum length that makes the graph\nconnected. Input Each test contains multiple test cases. The first line\ncontains a single integer \n    t\n (\n    1\n    \u2264 t\n    \u2264 800\n) \u2014 the number of\ntest cases. The description of test cases follows. The first line of each test\ncase contains a single integer \n    n\n (\n    2\n    \u2264 n\n    \u2264 4000\n) \u2014 the\nnumber of vertices in the graph. Then \n    n\n lines follow. The \n    i\n-th row\ncontains a binary string \n    s_i\n of length \n    n\n, where \n    s_i,j\n is\n'1' if there is an edge between vertex \n    i\n and \n    j\n initially,\notherwise \n    s_i,j\n is '0'. It is guaranteed that \n    s_i,i\n is always\n'0' and \n    s_i,j=s_j,i\n for \n    1\n    \u2264 i,j\n    \u2264 n\n. It is guaranteed\nthat the sum of \n    n\n over all test cases does not exceed \n    4000\n. Output\nFor each test case, in the first line, output an integer \n    m\n \u2014 the minimum\nnumber of operations required. If \n    m\n is greater than zero, then print an\nextra line consisting of \n    m\n integers \u2014 the vertices chosen in the\noperations in your solution. If there are multiple solutions with the minimum\nnumber of operations, print any. Example Input 4 3 011 100 100 3 000 001 010 4\n0100 1000 0001 0010 6 001100 000011 100100 101000 010001 010010 Output 0 1 1 2\n3 4 3 2 5 6 Note In the first test case, the graph is connected at the\nbeginning, so the answer is \n    0\n. In the second test case, if we do the\noperation with vertex \n    1\n, we will get the following graph represented by\nan adjacency matrix: \n    \n\n    [ 0 1 1; ; ; 1 0 1; ; ; 1 1 0;  ]\n\n    \n It's obvious that the graph above is connected. In the\nthird test case, if we do the operation with vertex \n    3\n and \n    4\n, we\nwill get the following graph represented by an adjacency matrix: \n    \n\n    [ 0 1 1 1; ; ; 1 0 1 1; ; ; 1 1 0 1; ; ; 1 1 1 0;  ]\n\n    \n It's obvious that the graph above is connected, and it\ncan be proven that we can't perform less than \n    2\n operations to make the\ngraph connected.\n\n",
        "cf_contest_id": 1761,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "constructive algorithms",
            "dsu",
            "graphs",
            "greedy",
            "matrices",
            "trees",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4\r\n3\r\n011\r\n100\r\n100\r\n3\r\n000\r\n001\r\n010\r\n4\r\n0100\r\n1000\r\n0001\r\n0010\r\n6\r\n001100\r\n000011\r\n100100\r\n101000\r\n010001\r\n010010\r\n",
                "0\r\n1\r\n1 \r\n2\r\n1 2 \r\n3\r\n1 3 4 \r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n2\r\n00\r\n00\r\n2\r\n01\r\n10\r\n",
                "1\r\n1 \r\n0\r\n"
            ],
            [
                "8\r\n3\r\n000\r\n000\r\n000\r\n3\r\n010\r\n100\r\n000\r\n3\r\n001\r\n000\r\n100\r\n3\r\n011\r\n100\r\n100\r\n3\r\n000\r\n001\r\n010\r\n3\r\n010\r\n101\r\n010\r\n3\r\n001\r\n001\r\n110\r\n3\r\n011\r\n101\r\n110\r\n",
                "1\r\n3\r\n1\r\n3 \r\n1\r\n2 \r\n0\r\n1\r\n1 \r\n0\r\n0\r\n0\r\n"
            ],
            [
                "1\r\n7\r\n0100000\r\n1000000\r\n0001110\r\n0010100\r\n0011000\r\n0010001\r\n0000010\r\n",
                "1\r\n7\r\n"
            ],
            [
                "1\r\n9\r\n011110000\r\n101000000\r\n110000000\r\n100011100\r\n100100000\r\n000100100\r\n000101000\r\n000000001\r\n000000010\r\n",
                "1\r\n7\r\n"
            ],
            [
                "1\r\n6\r\n011100\r\n100100\r\n100100\r\n111000\r\n000001\r\n000010\r\n",
                "1\r\n3\r\n"
            ],
            [
                "1\r\n8\r\n01010000\r\n10100000\r\n01010000\r\n10100000\r\n00000101\r\n00001010\r\n00000101\r\n00001010\r\n",
                "1\r\n8\r\n"
            ],
            [
                "1\r\n9\r\n011100000\r\n101000000\r\n110000000\r\n100011000\r\n000101000\r\n000110000\r\n000000011\r\n000000101\r\n000000110\r\n",
                "1\r\n6\r\n"
            ]
        ]
    }
]