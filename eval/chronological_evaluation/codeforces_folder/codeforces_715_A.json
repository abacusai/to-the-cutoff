[
    {
        "name": "Plus and Square Root",
        "description": "ZS the Coder is playing a game. There is a number displayed on the screen and\nthere are two buttons, ' + ' (plus) and \u201d (square root). Initially, the\nnumber 2 is displayed on the screen. There are n + 1 levels in the game and ZS\nthe Coder start at the level 1. When ZS the Coder is at level k, he can :\nPress the ' + ' button. This increases the number on the screen by exactly k.\nSo, if the number on the screen was x, it becomes x + k. Press the \u201d button.\nLet the number on the screen be x. After pressing this button, the number\nbecomes . After that, ZS the Coder levels up, so his current level becomes k +\n1. This button can only be pressed when x is a perfect square, i.e. x = m^2\nfor some positive integer m. Additionally, after each move, if ZS the Coder is\nat level k, and the number on the screen is m, then m must be a multiple of k.\nNote that this condition is only checked after performing the press. For\nexample, if ZS the Coder is at level 4 and current number is 100, he presses\nthe \u201d button and the number turns into 10. Note that at this moment, 10 is\nnot divisible by 4, but this press is still valid, because after it, ZS the\nCoder is at level 5, and 10 is divisible by 5. ZS the Coder needs your help in\nbeating the game \u2014 he wants to reach level n + 1. In other words, he needs to\npress the \u201d button n times. Help him determine the number of times he should\npress the ' + ' button before pressing the \u201d button at each level. Please\nnote that ZS the Coder wants to find just any sequence of presses allowing him\nto reach level n + 1, but not necessarily a sequence minimizing the number of\npresses. Input The first and only line of the input contains a single integer\nn (1 \u2264 n \u2264 100 000), denoting that ZS the Coder wants to reach level n + 1.\nOutput Print n non-negative integers, one per line. i-th of them should be\nequal to the number of times that ZS the Coder needs to press the ' + ' button\nbefore pressing the \u201d button at level i. Each number in the output should not\nexceed 10^18. However, the number on the screen can be greater than 10^18. It\nis guaranteed that at least one solution exists. If there are multiple\nsolutions, print any of them. Examples Input 3 Output 14 16 46 Input 2 Output\n999999999999999998 44500000000 Input 4 Output 2 17 46 97 Note In the first\nsample case: On the first level, ZS the Coder pressed the ' + ' button 14\ntimes (and the number on screen is initially 2), so the number became 2 + 14\u00b71\n= 16. Then, ZS the Coder pressed the \u201d button, and the number became . After\nthat, on the second level, ZS pressed the ' + ' button 16 times, so the number\nbecomes 4 + 16\u00b72 = 36. Then, ZS pressed the \u201d button, levelling up and\nchanging the number into . After that, on the third level, ZS pressed the ' +\n' button 46 times, so the number becomes 6 + 46\u00b73 = 144. Then, ZS pressed the\n\u201d button, levelling up and changing the number into . Note that 12 is indeed\ndivisible by 4, so ZS the Coder can reach level 4. Also, note that pressing\nthe ' + ' button 10 times on the third level before levelling up does not\nwork, because the number becomes 6 + 10\u00b73 = 36, and when the \u201d button is\npressed, the number becomes and ZS the Coder is at Level 4. However, 6 is not\ndivisible by 4 now, so this is not a valid solution. In the second sample\ncase: On the first level, ZS the Coder pressed the ' + ' button\n999999999999999998 times (and the number on screen is initially 2), so the\nnumber became 2 + 999999999999999998\u00b71 = 10^18. Then, ZS the Coder pressed the\n\u201d button, and the number became . After that, on the second level, ZS pressed\nthe ' + ' button 44500000000 times, so the number becomes 10^9 + 44500000000\u00b72\n= 9\u00b710^10. Then, ZS pressed the \u201d button, levelling up and changing the\nnumber into . Note that 300000 is a multiple of 3, so ZS the Coder can reach\nlevel 3.\n\n",
        "cf_contest_id": 715,
        "cf_index": "A",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n",
                "2\r\n17\r\n46\r\n"
            ],
            [
                "2\r\n",
                "2\r\n17\r\n"
            ],
            [
                "4\r\n",
                "2\r\n17\r\n46\r\n97\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n",
                "2\r\n"
            ],
            [
                "7\r\n",
                "2\r\n17\r\n46\r\n97\r\n176\r\n289\r\n442\r\n"
            ]
        ]
    }
]