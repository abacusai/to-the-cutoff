[
    {
        "name": "Chef Monocarp",
        "description": "Chef Monocarp has just put \n    n\n dishes into an oven. He knows that the\n\n    i\n-th dish has its optimal cooking time equal to \n    t_i\n minutes. At\nany positive integer minute \n    T\n Monocarp can put no more than one dish out\nof the oven. If the \n    i\n-th dish is put out at some minute \n    T\n, then\nits unpleasant value is \n    |T - t_i|\n \u2014 the absolute difference between\n\n    T\n and \n    t_i\n. Once the dish is out of the oven, it can't go back in.\nMonocarp should put all the dishes out of the oven. What is the minimum total\nunpleasant value Monocarp can obtain? Input The first line contains a single\ninteger \n    q\n (\n    1 \n    \u2264 q \n    \u2264 200\n) \u2014 the number of testcases. Then\n\n    q\n testcases follow. The first line of the testcase contains a single\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 200\n) \u2014 the number of dishes in the\noven. The second line of the testcase contains \n    n\n integers \n    t_1, t_2,\n    \n    \u2026, t_n\n (\n    1 \n    \u2264 t_i \n    \u2264 n\n) \u2014 the optimal cooking time for\neach dish. The sum of \n    n\n over all \n    q\n testcases doesn't exceed\n\n    200\n. Output Print a single integer for each testcase \u2014 the minimum total\nunpleasant value Monocarp can obtain when he puts out all the dishes out of\nthe oven. Remember that Monocarp can only put the dishes out at positive\ninteger minutes and no more than one dish at any minute. Example Input 6 6 4 2\n4 4 5 2 7 7 7 7 7 7 7 7 1 1 5 5 1 2 4 3 4 1 4 4 4 21 21 8 1 4 1 5 21 1 8 21 11\n21 11 3 12 8 19 15 9 11 13 Output 4 12 0 0 2 21 Note In the first example\nMonocarp can put out the dishes at minutes \n    3, 1, 5, 4, 6, 2\n. That way\nthe total unpleasant value will be \n    |4 - 3| + |2 - 1| + |4 - 5| + |4 - 4| +\n    |6 - 5| + |2 - 2| = 4\n. In the second example Monocarp can put out the\ndishes at minutes \n    4, 5, 6, 7, 8, 9, 10\n. In the third example Monocarp\ncan put out the dish at minute \n    1\n. In the fourth example Monocarp can put\nout the dishes at minutes \n    5, 1, 2, 4, 3\n. In the fifth example Monocarp\ncan put out the dishes at minutes \n    1, 3, 4, 5\n.\n\n",
        "cf_contest_id": 1437,
        "cf_index": "C",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "flows",
            "graph matchings",
            "greedy",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n6\r\n4 2 4 4 5 2\r\n7\r\n7 7 7 7 7 7 7\r\n1\r\n1\r\n5\r\n5 1 2 4 3\r\n4\r\n1 4 4 4\r\n21\r\n21 8 1 4 1 5 21 1 8 21 11 21 11 3 12 8 19 15 9 11 13\r\n",
                "4\r\n12\r\n0\r\n0\r\n2\r\n21\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n200\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "19900\r\n"
            ]
        ]
    }
]