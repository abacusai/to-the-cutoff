[
    {
        "name": "Pilgrims",
        "description": "A long time ago there was a land called Dudeland. Dudeland consisted of n\ntowns connected with n - 1 bidirectonal roads. The towns are indexed from 1 to\nn and one can reach any city from any other city if he moves along the roads\nof the country. There are m monasteries in Dudeland located in m different\ntowns. In each monastery lives a pilgrim. At the beginning of the year, each\npilgrim writes down which monastery is the farthest from the monastery he is\nliving in. If there is more than one farthest monastery, he lists all of them.\nOn the Big Lebowski day each pilgrim picks one town from his paper at random\nand starts walking to that town. Walter hates pilgrims and wants to make as\nmany of them unhappy as possible by preventing them from finishing their\njourney. He plans to destroy exactly one town that does not contain a\nmonastery. A pilgrim becomes unhappy if all monasteries in his list become\nunreachable from the monastery he is living in. You need to find the maximum\nnumber of pilgrims Walter can make unhappy. Also find the number of ways he\ncan make this maximal number of pilgrims unhappy: the number of possible towns\nhe can destroy. Input The first line contains two integers n (3 \u2264 n \u2264 10^5)\nand m (2 \u2264 m < n). The next line contains m distinct integers representing\nindices of towns that contain monasteries. Next n - 1 lines contain three\nintegers each, ai, bi, ci, indicating that there is an edge between towns ai\nand bi of length ci (1 \u2264 ai, bi \u2264 n, 1 \u2264 ci \u2264 1000, ai \u2260 bi). Output Output\ntwo integers: the maximum number of pilgrims Walter can make unhappy and the\nnumber of ways in which he can make his plan come true. Examples Input 8 5 7 2\n5 4 8 1 2 1 2 3 2 1 4 1 4 5 2 1 6 1 6 7 8 6 8 10 Output 5 1\n\n",
        "cf_contest_id": 348,
        "cf_index": "E",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dp",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8 5\r\n7 2 5 4 8\r\n1 2 1\r\n2 3 2\r\n1 4 1\r\n4 5 2\r\n1 6 1\r\n6 7 8\r\n6 8 10\r\n",
                "5 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 5\r\n4 8 7 5 1\r\n5 1 1\r\n2 7 1\r\n4 3 1\r\n10 9 1\r\n10 1 1\r\n1 8 1\r\n10 7 1\r\n10 3 1\r\n7 6 1\r\n",
                "5 1\r\n"
            ],
            [
                "10 5\r\n8 5 2 10 1\r\n3 1 7\r\n5 4 6\r\n10 8 4\r\n6 8 9\r\n7 8 4\r\n9 5 6\r\n8 1 9\r\n2 10 2\r\n9 8 7\r\n",
                "5 1\r\n"
            ],
            [
                "10 2\r\n1 5\r\n5 3 2\r\n8 4 8\r\n7 6 9\r\n7 10 1\r\n10 1 4\r\n9 5 1\r\n5 8 2\r\n7 2 9\r\n6 5 6\r\n",
                "2 3\r\n"
            ],
            [
                "10 9\r\n9 7 6 10 3 5 2 8 1\r\n9 4 10\r\n10 8 3\r\n3 6 2\r\n5 1 8\r\n5 2 5\r\n1 10 10\r\n6 7 1\r\n9 1 7\r\n1 6 3\r\n",
                "0 1\r\n"
            ],
            [
                "7 3\r\n1 4 7\r\n1 2 2\r\n2 3 3\r\n3 4 8\r\n2 5 1\r\n1 6 4\r\n6 7 5\r\n",
                "3 2\r\n"
            ]
        ]
    }
]