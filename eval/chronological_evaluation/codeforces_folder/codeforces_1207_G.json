[
    {
        "name": "Indie Album",
        "description": "Mishka's favourite experimental indie band has recently dropped a new album!\nSongs of that album share one gimmick. Each name \n    s_i\n is one of the\nfollowing types: \n    1\u00a0c\n \u2014 a single lowercase Latin letter; \n    2\u00a0j\u00a0c\n \u2014\nname \n    s_j\n (\n    1 \n    \u2264 j < i\n) with a single lowercase Latin letter\nappended to its end. Songs are numbered from \n    1\n to \n    n\n. It's\nguaranteed that the first song is always of type \n    1\n. Vova is rather\ninterested in the new album but he really doesn't have the time to listen to\nit entirely. Thus he asks Mishka some questions about it to determine if some\nsong is worth listening to. Questions have the following format: \n    i\u00a0t\n \u2014\ncount the number of occurrences of string \n    t\n in \n    s_i\n (the name of\nthe \n    i\n-th song of the album) as a continuous substring, \n    t\n consists\nonly of lowercase Latin letters. Mishka doesn't question the purpose of that\ninformation, yet he struggles to provide it. Can you please help Mishka answer\nall Vova's questions? Input The first line contains a single integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 4 \n    \u00b7 10^5\n) \u2014 the number of songs in the album.\nEach of the next \n    n\n lines contains the desciption of the \n    i\n-th song\nof the album in the following format: \n    1\u00a0c\n \u2014 \n    s_i\n is a single\nlowercase Latin letter; \n    2\u00a0j\u00a0c\n \u2014 \n    s_i\n is the name \n    s_j\n (\n    1\n    \n    \u2264 j < i\n) with a single lowercase Latin letter appended to its end. The\nnext line contains a single integer \n    m\n (\n    1 \n    \u2264 m \n    \u2264 4 \n    \u00b7\n    10^5\n) \u2014 the number of Vova's questions. Each of the next \n    m\n lines\ncontains the desciption of the \n    j\n-th Vova's question in the following\nformat: \n    i\u00a0t\n (\n    1 \n    \u2264 i \n    \u2264 n\n, \n    1 \n    \u2264 |t| \n    \u2264 4 \n    \u00b7\n    10^5\n) \u2014 count the number of occurrences of string \n    t\n in \n    s_i\n (the\nname of the \n    i\n-th song of the album) as a continuous substring, \n    t\n\nconsists only of lowercase Latin letters. It's guaranteed that the total\nlength of question strings \n    t\n doesn't exceed \n    4 \n    \u00b7 10^5\n. Output\nFor each question print a single integer \u2014 the number of occurrences of the\nquestion string \n    t\n in the name of the \n    i\n-th song of the album as a\ncontinuous substring. Example Input 20 1 d 2 1 a 2 2 d 2 3 a 2 4 d 2 5 a 2 6 d\n2 7 a 1 d 2 9 o 2 10 k 2 11 i 2 12 d 2 13 o 2 14 k 2 15 i 2 1 o 2 17 k 2 18 i\n2 15 i 12 8 da 8 dada 8 ada 6 dada 3 dada 19 doki 19 ok 16 doki 15 doki 9 d 1\na 20 doki Output 4 3 3 2 0 1 1 2 1 1 0 2 Note Song names of the first example:\nd da dad dada dadad dadada dadadad dadadada d do dok doki dokid dokido dokidok\ndokidoki do dok doki dokidoki Thus the occurrences for each question string\nare: string \"da\" starts in positions \n    [1, 3, 5, 7]\n in the name\n\"dadadada\"; string \"dada\" starts in positions \n    [1, 3, 5]\n in the name\n\"dadadada\"; string \"ada\" starts in positions \n    [2, 4, 6]\n in the name\n\"dadadada\"; string \"dada\" starts in positions \n    [1, 3]\n in the name\n\"dadada\"; no occurrences of string \"dada\" in the name \"dad\"; string \"doki\"\nstarts in position \n    [1]\n in the name \"doki\"; string \"ok\" starts in\nposition \n    [2]\n in the name \"doki\"; string \"doki\" starts in positions\n\n    [1, 5]\n in the name \"dokidoki\"; string \"doki\" starts in position\n\n    [1]\n in the name \"dokidok\"; string \"d\" starts in position \n    [1]\n in\nthe name \"d\"; no occurrences of string \"a\" in the name \"d\"; string \"doki\"\nstarts in positions \n    [1, 5]\n in the name \"dokidoki\".\n\n",
        "cf_contest_id": 1207,
        "cf_index": "G",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "hashing",
            "string suffix structures",
            "strings",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "20\r\n1 d\r\n2 1 a\r\n2 2 d\r\n2 3 a\r\n2 4 d\r\n2 5 a\r\n2 6 d\r\n2 7 a\r\n1 d\r\n2 9 o\r\n2 10 k\r\n2 11 i\r\n2 12 d\r\n2 13 o\r\n2 14 k\r\n2 15 i\r\n2 1 o\r\n2 17 k\r\n2 18 i\r\n2 15 i\r\n12\r\n8 da\r\n8 dada\r\n8 ada\r\n6 dada\r\n3 dada\r\n19 doki\r\n19 ok\r\n16 doki\r\n15 doki\r\n9 d\r\n1 a\r\n20 doki\r\n",
                "4\r\n3\r\n3\r\n2\r\n0\r\n1\r\n1\r\n2\r\n1\r\n1\r\n0\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n1 a\r\n2 1 b\r\n2 1 b\r\n2 3 a\r\n1 a\r\n2 2 b\r\n2 5 a\r\n1 b\r\n1 a\r\n2 6 b\r\n10\r\n7 a\r\n1 b\r\n7 b\r\n10 ba\r\n3 bb\r\n3 ab\r\n9 ab\r\n4 b\r\n6 a\r\n6 bb\r\n",
                "2\r\n0\r\n0\r\n0\r\n0\r\n1\r\n0\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "20\r\n1 b\r\n2 1 a\r\n1 c\r\n2 3 b\r\n2 3 b\r\n1 c\r\n1 a\r\n2 1 a\r\n1 b\r\n2 4 c\r\n2 7 a\r\n2 5 c\r\n1 b\r\n2 1 c\r\n2 12 a\r\n2 14 a\r\n1 c\r\n1 a\r\n1 c\r\n2 8 b\r\n20\r\n5 baa\r\n4 abb\r\n8 c\r\n15 bc\r\n17 cc\r\n8 cba\r\n20 cb\r\n8 b\r\n1 a\r\n12 cac\r\n20 bc\r\n8 b\r\n8 c\r\n11 aabaa\r\n10 ab\r\n12 aa\r\n9 b\r\n11 ba\r\n17 ba\r\n13 c\r\n",
                "0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "42\r\n1 e\r\n2 1 j\r\n2 2 u\r\n2 3 r\r\n2 4 u\r\n2 5 a\r\n2 6 l\r\n2 7 w\r\n2 8 p\r\n2 9 w\r\n2 10 e\r\n2 11 u\r\n2 12 e\r\n2 13 j\r\n2 14 u\r\n2 15 r\r\n2 16 u\r\n2 17 a\r\n2 18 e\r\n2 19 p\r\n2 20 c\r\n2 21 e\r\n2 22 x\r\n2 23 u\r\n2 24 l\r\n2 25 w\r\n2 26 p\r\n2 27 w\r\n2 28 e\r\n2 29 u\r\n2 30 l\r\n2 31 w\r\n2 32 p\r\n2 33 w\r\n2 34 e\r\n2 35 u\r\n2 36 e\r\n2 37 p\r\n2 38 c\r\n2 39 e\r\n2 40 x\r\n2 41 u\r\n1\r\n42 ecnectecnectreczyureczyureczyuejuruareczyu\r\n",
                "0\r\n"
            ]
        ]
    }
]