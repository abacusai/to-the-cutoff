[
    {
        "name": "Stones",
        "description": "Alice is playing with some stones. Now there are three numbered heaps of\nstones. The first of them contains \n    a\n stones, the second of them contains\n\n    b\n stones and the third of them contains \n    c\n stones. Each time she\ncan do one of two operations: take one stone from the first heap and two\nstones from the second heap (this operation can be done only if the first heap\ncontains at least one stone and the second heap contains at least two stones);\ntake one stone from the second heap and two stones from the third heap (this\noperation can be done only if the second heap contains at least one stone and\nthe third heap contains at least two stones). She wants to get the maximum\nnumber of stones, but she doesn't know what to do. Initially, she has \n    0\n\nstones. Can you help her? Input The first line contains one integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test cases. Next \n    t\n lines\ndescribe test cases in the following format: Line contains three non-negative\nintegers \n    a\n, \n    b\n and \n    c\n, separated by spaces (\n    0 \n    \u2264 a,b,c\n    \n    \u2264 100\n) \u2014 the number of stones in the first, the second and the third\nheap, respectively. In hacks it is allowed to use only one test case in the\ninput, so \n    t = 1\n should be satisfied. Output Print \n    t\n lines, the\nanswers to the test cases in the same order as in the input. The answer to the\ntest case is the integer \u2014 the maximum possible number of stones that Alice\ncan take after making some operations. Example Input 3 3 4 5 1 0 5 5 3 2\nOutput 9 0 6 Note For the first test case in the first test, Alice can take\ntwo stones from the second heap and four stones from the third heap, making\nthe second operation two times. Then she can take one stone from the first\nheap and two stones from the second heap, making the first operation one time.\nThe summary number of stones, that Alice will take is \n    9\n. It is\nimpossible to make some operations to take more than \n    9\n stones, so the\nanswer is \n    9\n.\n\n",
        "cf_contest_id": 1236,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3 4 5\r\n1 0 5\r\n5 3 2\r\n",
                "9\r\n0\r\n6\r\n"
            ]
        ],
        "private_cases": [
            [
                "64\r\n0 0 0\r\n0 0 1\r\n0 0 2\r\n0 0 3\r\n0 1 0\r\n0 1 1\r\n0 1 2\r\n0 1 3\r\n0 2 0\r\n0 2 1\r\n0 2 2\r\n0 2 3\r\n0 3 0\r\n0 3 1\r\n0 3 2\r\n0 3 3\r\n1 0 0\r\n1 0 1\r\n1 0 2\r\n1 0 3\r\n1 1 0\r\n1 1 1\r\n1 1 2\r\n1 1 3\r\n1 2 0\r\n1 2 1\r\n1 2 2\r\n1 2 3\r\n1 3 0\r\n1 3 1\r\n1 3 2\r\n1 3 3\r\n2 0 0\r\n2 0 1\r\n2 0 2\r\n2 0 3\r\n2 1 0\r\n2 1 1\r\n2 1 2\r\n2 1 3\r\n2 2 0\r\n2 2 1\r\n2 2 2\r\n2 2 3\r\n2 3 0\r\n2 3 1\r\n2 3 2\r\n2 3 3\r\n3 0 0\r\n3 0 1\r\n3 0 2\r\n3 0 3\r\n3 1 0\r\n3 1 1\r\n3 1 2\r\n3 1 3\r\n3 2 0\r\n3 2 1\r\n3 2 2\r\n3 2 3\r\n3 3 0\r\n3 3 1\r\n3 3 2\r\n3 3 3\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n3\r\n3\r\n0\r\n0\r\n3\r\n3\r\n0\r\n0\r\n3\r\n3\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n6\r\n6\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n6\r\n6\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n6\r\n6\r\n"
            ],
            [
                "5\r\n100 100 100\r\n0 0 0\r\n0 50 100\r\n100 50 0\r\n100 30 100\r\n",
                "225\r\n0\r\n150\r\n75\r\n90\r\n"
            ],
            [
                "20\r\n9 4 8\r\n10 6 7\r\n4 6 0\r\n7 7 6\r\n3 3 10\r\n4 2 1\r\n4 4 0\r\n2 0 0\r\n8 8 7\r\n3 1 7\r\n3 10 7\r\n1 7 3\r\n7 9 1\r\n1 6 9\r\n0 9 5\r\n4 0 0\r\n2 10 0\r\n4 8 5\r\n10 0 1\r\n8 1 1\r\n",
                "12\r\n12\r\n9\r\n15\r\n9\r\n3\r\n6\r\n0\r\n15\r\n3\r\n18\r\n6\r\n12\r\n15\r\n6\r\n0\r\n6\r\n15\r\n0\r\n0\r\n"
            ],
            [
                "20\r\n4 4 8\r\n5 3 7\r\n0 0 1\r\n2 3 8\r\n9 4 10\r\n4 8 10\r\n6 3 4\r\n10 10 0\r\n0 7 4\r\n6 2 2\r\n3 10 2\r\n2 7 6\r\n1 2 6\r\n2 3 0\r\n1 3 4\r\n5 0 10\r\n4 1 2\r\n3 7 7\r\n7 10 5\r\n0 9 0\r\n",
                "12\r\n9\r\n0\r\n9\r\n12\r\n18\r\n6\r\n15\r\n6\r\n3\r\n12\r\n15\r\n6\r\n3\r\n6\r\n0\r\n3\r\n15\r\n18\r\n0\r\n"
            ],
            [
                "20\r\n0 2 9\r\n2 9 7\r\n7 3 3\r\n9 0 10\r\n4 8 0\r\n2 3 9\r\n7 0 8\r\n5 8 10\r\n1 4 2\r\n6 4 7\r\n3 9 6\r\n3 5 7\r\n5 6 1\r\n2 9 1\r\n0 6 4\r\n5 9 1\r\n6 1 7\r\n0 6 10\r\n2 10 7\r\n4 5 10\r\n",
                "6\r\n15\r\n6\r\n0\r\n12\r\n9\r\n0\r\n18\r\n6\r\n9\r\n18\r\n12\r\n9\r\n6\r\n6\r\n12\r\n3\r\n15\r\n15\r\n15\r\n"
            ],
            [
                "20\r\n6 0 8\r\n0 6 5\r\n1 7 3\r\n6 5 2\r\n9 10 0\r\n2 8 8\r\n9 8 1\r\n1 9 8\r\n2 4 10\r\n9 5 0\r\n2 9 1\r\n5 5 10\r\n10 8 6\r\n3 6 0\r\n10 9 2\r\n6 9 1\r\n8 4 10\r\n10 3 4\r\n10 0 10\r\n6 1 9\r\n",
                "0\r\n6\r\n6\r\n9\r\n15\r\n18\r\n12\r\n15\r\n12\r\n6\r\n6\r\n15\r\n15\r\n9\r\n15\r\n12\r\n12\r\n6\r\n0\r\n3\r\n"
            ],
            [
                "20\r\n2 0 8\r\n8 3 5\r\n8 10 3\r\n3 2 4\r\n4 2 1\r\n0 3 7\r\n0 7 5\r\n7 7 8\r\n3 3 9\r\n1 7 5\r\n2 8 4\r\n6 3 0\r\n4 1 10\r\n3 3 2\r\n0 0 0\r\n7 9 2\r\n10 6 1\r\n10 2 6\r\n8 9 1\r\n8 8 0\r\n",
                "0\r\n6\r\n15\r\n6\r\n3\r\n9\r\n6\r\n15\r\n9\r\n9\r\n12\r\n3\r\n3\r\n6\r\n0\r\n15\r\n9\r\n6\r\n12\r\n12\r\n"
            ]
        ]
    }
]