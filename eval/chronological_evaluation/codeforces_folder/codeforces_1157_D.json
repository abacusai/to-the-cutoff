[
    {
        "name": "N Problems During K Days",
        "description": "Polycarp has to solve exactly \n    n\n problems to improve his programming\nskill before an important programming competition. But this competition will\nbe held very soon, most precisely, it will start in \n    k\n days. It means\nthat Polycarp has exactly \n    k\n days for training! Polycarp doesn't want to\nprocrastinate, so he wants to solve at least one problem during each of\n\n    k\n days. He also doesn't want to overwork, so if he solves \n    x\n\nproblems during some day, he should solve no more than \n    2x\n problems\nduring the next day. And, at last, he wants to improve his skill, so if he\nsolves \n    x\n problems during some day, he should solve at least \n    x+1\n\nproblem during the next day. More formally: let \n    [a_1, a_2, \n    \u2026, a_k]\n\nbe the array of numbers of problems solved by Polycarp. The \n    i\n-th element\nof this array is the number of problems Polycarp solves during the \n    i\n-th\nday of his training. Then the following conditions must be satisfied: sum of\nall \n    a_i\n for \n    i\n from \n    1\n to \n    k\n should be \n    n\n; \n    a_i\n\nshould be greater than zero for each \n    i\n from \n    1\n to \n    k\n; the\ncondition \n    a_i < a_i + 1\n    \u2264 2 a_i\n should be satisfied for each\n\n    i\n from \n    1\n to \n    k-1\n. Your problem is to find any array \n    a\n\nof length \n    k\n satisfying the conditions above or say that it is impossible\nto do it. Input The first line of the input contains two integers \n    n\n and\n\n    k\n (\n    1 \n    \u2264 n \n    \u2264 10^9, 1 \n    \u2264 k \n    \u2264 10^5\n) \u2014 the number of\nproblems Polycarp wants to solve and the number of days Polycarp wants to\ntrain. Output If it is impossible to find any array \n    a\n of length \n    k\n\nsatisfying Polycarp's rules of training, print \"NO\" in the first line.\nOtherwise print \"YES\" in the first line, then print \n    k\n integers \n    a_1,\n    a_2, \n    \u2026, a_k\n in the second line, where \n    a_i\n should be the number\nof problems Polycarp should solve during the \n    i\n-th day. If there are\nmultiple answers, you can print any. Examples Input 26 6 Output YES 1 2 4 5 6\n8 Input 8 3 Output NO Input 1 1 Output YES 1 Input 9 4 Output NO\n\n",
        "cf_contest_id": 1157,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "26 6\r\n",
                "YES\r\n1 2 4 5 6 8 "
            ],
            [
                "8 3\r\n",
                "NO"
            ],
            [
                "1 1\r\n",
                "YES\r\n1 "
            ],
            [
                "9 4\r\n",
                "NO"
            ]
        ],
        "private_cases": [
            [
                "7 2\r\n",
                "YES\r\n3 4 "
            ],
            [
                "1000000000 100000\r\n",
                "NO"
            ],
            [
                "999961559 44720\r\n",
                "NO"
            ],
            [
                "800019998 40000\r\n",
                "NO"
            ],
            [
                "813491792 78123\r\n",
                "NO"
            ],
            [
                "4 2\r\n",
                "NO"
            ],
            [
                "1 2\r\n",
                "NO"
            ],
            [
                "1 3\r\n",
                "NO"
            ],
            [
                "1 4\r\n",
                "NO"
            ],
            [
                "2 1\r\n",
                "YES\r\n2 "
            ],
            [
                "2 2\r\n",
                "NO"
            ],
            [
                "2 3\r\n",
                "NO"
            ],
            [
                "2 4\r\n",
                "NO"
            ],
            [
                "3 1\r\n",
                "YES\r\n3 "
            ],
            [
                "3 2\r\n",
                "YES\r\n1 2 "
            ],
            [
                "3 3\r\n",
                "NO"
            ],
            [
                "3 4\r\n",
                "NO"
            ],
            [
                "4 1\r\n",
                "YES\r\n4 "
            ],
            [
                "4 3\r\n",
                "NO"
            ],
            [
                "4 4\r\n",
                "NO"
            ],
            [
                "1000000000 1\r\n",
                "YES\r\n1000000000 "
            ],
            [
                "1000000000 10\r\n",
                "YES\r\n99999995 99999996 99999997 99999998 99999999 100000000 100000002 100000003 100000004 100000006 "
            ],
            [
                "1000000000 30\r\n",
                "YES\r\n33333318 33333319 33333320 33333321 33333322 33333323 33333325 33333326 33333327 33333328 33333329 33333330 33333331 33333332 33333333 33333334 33333335 33333336 33333337 33333338 33333339 33333340 33333341 33333342 33333343 33333344 33333345 33333346 33333347 33333349 "
            ],
            [
                "1000000000 29\r\n",
                "YES\r\n34482744 34482745 34482746 34482747 34482748 34482749 34482750 34482751 34482752 34482753 34482754 34482755 34482757 34482758 34482759 34482760 34482761 34482762 34482763 34482764 34482765 34482766 34482767 34482768 34482769 34482770 34482771 34482772 34482774 "
            ],
            [
                "1 88999\r\n",
                "NO"
            ],
            [
                "3 8\r\n",
                "NO"
            ],
            [
                "16 4\r\n",
                "YES\r\n2 3 4 7 "
            ],
            [
                "13 4\r\n",
                "YES\r\n1 2 4 6 "
            ],
            [
                "85300 2\r\n",
                "YES\r\n42649 42651 "
            ],
            [
                "42180 2\r\n",
                "YES\r\n21089 21091 "
            ],
            [
                "13736 3\r\n",
                "YES\r\n4577 4578 4581 "
            ],
            [
                "5 2\r\n",
                "YES\r\n2 3 "
            ],
            [
                "849600011 46\r\n",
                "YES\r\n18469542 18469543 18469544 18469546 18469547 18469548 18469549 18469550 18469551 18469552 18469553 18469554 18469555 18469556 18469557 18469558 18469559 18469560 18469561 18469562 18469563 18469564 18469565 18469566 18469567 18469568 18469569 18469570 18469571 18469572 18469573 18469574 18469575 18469576 18469577 18469578 18469579 18469580 18469581 18469582 18469583 18469584 18469585 18469586 18469587 18469589 "
            ],
            [
                "1000000000 3\r\n",
                "YES\r\n333333332 333333333 333333335 "
            ],
            [
                "20492 2\r\n",
                "YES\r\n10245 10247 "
            ],
            [
                "33989 18\r\n",
                "YES\r\n1879 1880 1881 1882 1883 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1898 "
            ],
            [
                "77792 2\r\n",
                "YES\r\n38895 38897 "
            ],
            [
                "49725 4\r\n",
                "YES\r\n12429 12430 12432 12434 "
            ],
            [
                "147268968 2\r\n",
                "YES\r\n73634483 73634485 "
            ],
            [
                "140089944 2\r\n",
                "YES\r\n70044971 70044973 "
            ],
            [
                "2333 3\r\n",
                "YES\r\n776 777 780 "
            ],
            [
                "7 3\r\n",
                "YES\r\n1 2 4 "
            ]
        ]
    }
]