[
    {
        "name": "Task On The Board",
        "description": "Polycarp wrote on the board a string \n    s\n containing only lowercase Latin\nletters ('a'-'z'). This string is known for you and given in the input. After\nthat, he erased some letters from the string \n    s\n, and he rewrote the\nremaining letters in any order. As a result, he got some new string \n    t\n.\nYou have to find it with some additional information. Suppose that the string\n\n    t\n has length \n    m\n and the characters are numbered from left to right\nfrom \n    1\n to \n    m\n. You are given a sequence of \n    m\n integers: \n    b_1,\n    b_2, \n    \u2026, b_m\n, where \n    b_i\n is the sum of the distances \n    |i-j|\n\nfrom the index \n    i\n to all such indices \n    j\n that \n    t_j > t_i\n\n(consider that 'a'<'b'<...<'z'). In other words, to calculate \n    b_i\n,\nPolycarp finds all such indices \n    j\n that the index \n    j\n contains a\nletter that is later in the alphabet than \n    t_i\n and sums all the values\n\n    |i-j|\n. For example, if \n    t\n = \"abzb\", then: since \n    t_1\n='a', all\nother indices contain letters which are later in the alphabet, that is:\n\n    b_1=|1-2|+|1-3|+|1-4|=1+2+3=6\n; since \n    t_2\n='b', only the index\n\n    j=3\n contains the letter, which is later in the alphabet, that is:\n\n    b_2=|2-3|=1\n; since \n    t_3\n='z', then there are no indexes \n    j\n such\nthat \n    t_j>t_i\n, thus \n    b_3=0\n; since \n    t_4\n='b', only the index\n\n    j=3\n contains the letter, which is later in the alphabet, that is:\n\n    b_4=|4-3|=1\n. Thus, if \n    t\n = \"abzb\", then \n    b=[6,1,0,1]\n. Given\nthe string \n    s\n and the array \n    b\n, find any possible string \n    t\n for\nwhich the following two requirements are fulfilled simultaneously: \n    t\n is\nobtained from \n    s\n by erasing some letters (possibly zero) and then writing\nthe rest in any order; the array, constructed from the string \n    t\n\naccording to the rules above, equals to the array \n    b\n specified in the\ninput data. Input The first line contains an integer \n    q\n (\n    1 \n    \u2264 q\n    \n    \u2264 100\n) \u2014 the number of test cases in the test. Then \n    q\n test cases\nfollow. Each test case consists of three lines: the first line contains string\n\n    s\n, which has a length from \n    1\n to \n    50\n and consists of lowercase\nEnglish letters; the second line contains positive integer \n    m\n (\n    1 \n    \u2264\n    m \n    \u2264 |s|\n), where \n    |s|\n is the length of the string \n    s\n, and\n\n    m\n is the length of the array \n    b\n; the third line contains the\nintegers \n    b_1, b_2, \n    \u2026, b_m\n (\n    0 \n    \u2264 b_i \n    \u2264 1225\n). It is\nguaranteed that in each test case an answer exists. Output Output \n    q\n\nlines: the \n    k\n-th of them should contain the answer (string \n    t\n) to\nthe \n    k\n-th test case. It is guaranteed that an answer to each test case\nexists. If there are several answers, output any. Example Input 4 abac 3 2 1 0\nabc 1 0 abba 3 1 0 1 ecoosdcefr 10 38 13 24 14 11 5 3 24 17 0 Output aac b aba\ncodeforces Note In the first test case, such strings \n    t\n are suitable:\n\"aac', \"aab\". In the second test case, such trings \n    t\n are suitable: \"a\",\n\"b\", \"c\". In the third test case, only the string \n    t\n equals to \"aba\" is\nsuitable, but the character 'b' can be from the second or third position.\n\n",
        "cf_contest_id": 1367,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\nabac\r\n3\r\n2 1 0\r\nabc\r\n1\r\n0\r\nabba\r\n3\r\n1 0 1\r\necoosdcefr\r\n10\r\n38 13 24 14 11 5 3 24 17 0\r\n",
                "aac\r\nc\r\naba\r\ncodeforces\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\nabac\r\n3\r\n2 1 0\r\n",
                "aac\r\n"
            ],
            [
                "1\r\ncbba\r\n2\r\n0 0\r\n",
                "bb\r\n"
            ],
            [
                "1\r\nzbb\r\n2\r\n0 0\r\n",
                "bb\r\n"
            ],
            [
                "2\r\naccccccc\r\n1\r\n0\r\naaaaac\r\n3\r\n0 0 0\r\n",
                "c\r\naaa\r\n"
            ],
            [
                "1\r\naaad\r\n3\r\n0 0 0\r\n",
                "aaa\r\n"
            ],
            [
                "1\r\naaabb\r\n3\r\n0 0 0\r\n",
                "aaa\r\n"
            ],
            [
                "1\r\nybb\r\n2\r\n0 0\r\n",
                "bb\r\n"
            ],
            [
                "1\r\naccd\r\n2\r\n0 0\r\n",
                "cc\r\n"
            ],
            [
                "1\r\naaaax\r\n4\r\n0 0 0 0\r\n",
                "aaaa\r\n"
            ],
            [
                "1\r\naba\r\n2\r\n0 0\r\n",
                "aa\r\n"
            ],
            [
                "3\r\nybb\r\n2\r\n0 0\r\nzbb\r\n2\r\n0 0\r\nzyybb\r\n2\r\n0 0\r\n",
                "bb\r\nbb\r\nyy\r\n"
            ],
            [
                "1\r\naaabbc\r\n4\r\n3 2 1 0\r\n",
                "aaac\r\n"
            ],
            [
                "4\r\nybb\r\n2\r\n0 0\r\nzbb\r\n2\r\n0 0\r\nzyybb\r\n2\r\n0 0\r\naabb\r\n3\r\n0 0 3\r\n",
                "bb\r\nbb\r\nyy\r\nbba\r\n"
            ],
            [
                "1\r\nabbc\r\n3\r\n0 2 0\r\n",
                "bab\r\n"
            ],
            [
                "1\r\naaab\r\n3\r\n0 0 0\r\n",
                "aaa\r\n"
            ],
            [
                "1\r\naaax\r\n3\r\n0 0 0\r\n",
                "aaa\r\n"
            ],
            [
                "1\r\nycc\r\n2\r\n0 0\r\n",
                "cc\r\n"
            ],
            [
                "1\r\naaabcc\r\n5\r\n0 0 3 5 7\r\n",
                "ccaaa\r\n"
            ],
            [
                "7\r\nycc\r\n2\r\n0 0\r\nzcc\r\n2\r\n0 0\r\nacc\r\n2\r\n0 0\r\nbcc\r\n2\r\n0 0\r\nabbc\r\n3\r\n0 0 3\r\nabbcc\r\n3\r\n0 0 3\r\nabac\r\n3\r\n2 1 0\r\n",
                "cc\r\ncc\r\ncc\r\ncc\r\nbba\r\nccb\r\naac\r\n"
            ],
            [
                "1\r\nxbbbbccc\r\n5\r\n0 1 2 3 4\r\n",
                "xbbbb\r\n"
            ],
            [
                "2\r\naabc\r\n3\r\n2 1 0\r\naaabcc\r\n5\r\n0 0 3 5 7\r\n",
                "aac\r\nccaaa\r\n"
            ],
            [
                "1\r\naaabbc\r\n5\r\n0 0 3 5 7\r\n",
                "bbaaa\r\n"
            ],
            [
                "10\r\ntuwxtyvuwzxvsv\r\n2\r\n1 0\r\nztuyzttu\r\n6\r\n0 7 5 4 0 11\r\nxuxwsuyzutz\r\n3\r\n0 2 0\r\nzzsxwy\r\n4\r\n0 0 4 5\r\nzzvwuuwvxuszxvu\r\n1\r\n0\r\nvwyszvvty\r\n1\r\n0\r\nutztttuuyuztxsts\r\n2\r\n0 1\r\nvvxyxxswsxywuy\r\n2\r\n0 0\r\nuuttsus\r\n2\r\n0 0\r\nystwzxvxvxtzwtw\r\n2\r\n0 1\r\n",
                "yz\r\nztuyzt\r\nzyz\r\nzzxy\r\nz\r\nz\r\nzy\r\nyy\r\nuu\r\nzy\r\n"
            ],
            [
                "10\r\nvzsxyuyy\r\n3\r\n1 0 3\r\nwwvutuxsuxywut\r\n2\r\n0 0\r\nsuzvsvutvvstuz\r\n3\r\n3 1 0\r\nstyuwsutv\r\n4\r\n6 3 0 1\r\nzsustytvzsyw\r\n6\r\n0 9 5 7 7 5\r\nsvwxwwwyxuvszx\r\n1\r\n0\r\nxuyyvuztxwuuvsxwz\r\n5\r\n5 7 0 0 7\r\nuxuztuwsxz\r\n5\r\n4 2 2 0 10\r\nxystzstwtzwsz\r\n2\r\n1 0\r\nuuzss\r\n1\r\n0\r\n",
                "yzx\r\nxx\r\nuvz\r\nuvyw\r\nztwtvy\r\nz\r\nywzzx\r\nuxuzt\r\nyz\r\nz\r\n"
            ],
            [
                "1\r\naabc\r\n3\r\n2 1 0\r\n",
                "aac\r\n"
            ],
            [
                "1\r\ncbba\r\n3\r\n0 0 3\r\n",
                "bba\r\n"
            ],
            [
                "1\r\nnoobbbs\r\n4\r\n3 2 1 0\r\n",
                "bbbs\r\n"
            ]
        ]
    }
]