[
    {
        "name": "DFS Trees",
        "description": "You are given a connected undirected graph consisting of \n    n\n vertices and\n\n    m\n edges. The weight of the \n    i\n-th edge is \n    i\n. Here is a wrong\nalgorithm of finding a minimum spanning tree (MST) of a graph: vis := an array\nof length n s := a set of edges function dfs(u): vis[u] := true iterate\nthrough each edge (u, v) in the order from smallest to largest edge weight if\nvis[v] = false add edge (u, v) into the set (s) dfs(v) function findMST(u):\nreset all elements of (vis) to false reset the edge set (s) to empty dfs(u)\nreturn the edge set (s) Each of the calls findMST(1), findMST(2), ...,\nfindMST(n) gives you a spanning tree of the graph. Determine which of these\ntrees are minimum spanning trees. Input The first line of the input contains\ntwo integers \n    n\n, \n    m\n (\n    2\n    \u2264 n\n    \u2264 10^5\n, \n    n-1\n    \u2264 m\n    \u2264\n    2\n    \u00b7 10^5\n) \u2014 the number of vertices and the number of edges in the\ngraph. Each of the following \n    m\n lines contains two integers \n    u_i\n and\n\n    v_i\n (\n    1\n    \u2264 u_i, v_i\n    \u2264 n\n, \n    u_i\n     v_i\n), describing an\nundirected edge \n    (u_i,v_i)\n in the graph. The \n    i\n-th edge in the input\nhas weight \n    i\n. It is guaranteed that the graph is connected and there is\nat most one edge between any pair of vertices. Output You need to output a\nbinary string \n    s\n, where \n    s_i=1\n if findMST(i) creates an MST, and\n\n    s_i = 0\n otherwise. Examples Input 5 5 1 2 3 5 1 3 3 2 4 2 Output 01111\nInput 10 11 1 2 2 5 3 4 4 2 8 1 4 5 10 5 9 5 8 2 5 7 4 6 Output 0011111011\nNote Here is the graph given in the first example. There is only one minimum\nspanning tree in this graph. A minimum spanning tree is\n\n    (1,2),(3,5),(1,3),(2,4)\n which has weight \n    1+2+3+5=11\n. Here is a\npart of the process of calling findMST(1): reset the array vis and the edge\nset s; calling dfs(1); vis[1] := true; iterate through each edge\n\n    (1,2),(1,3)\n; add edge \n    (1,2)\n into the edge set s, calling dfs(2):\nvis[2] := true iterate through each edge \n    (2,1),(2,3),(2,4)\n; because\nvis[1] = true, ignore the edge \n    (2,1)\n; add edge \n    (2,3)\n into the edge\nset s, calling dfs(3): ... In the end, it will select edges\n\n    (1,2),(2,3),(3,5),(2,4)\n with total weight \n    1+4+2+5=12>11\n, so\nfindMST(1) does not find a minimum spanning tree. It can be shown that the\nother trees are all MSTs, so the answer is 01111.\n\n",
        "cf_contest_id": 1707,
        "cf_index": "C",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy",
            "sortings",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 5\r\n1 2\r\n3 5\r\n1 3\r\n3 2\r\n4 2\r\n",
                "01111\r\n"
            ],
            [
                "10 11\r\n1 2\r\n2 5\r\n3 4\r\n4 2\r\n8 1\r\n4 5\r\n10 5\r\n9 5\r\n8 2\r\n5 7\r\n4 6\r\n",
                "0011111011\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1\r\n1 2\r\n",
                "11\r\n"
            ],
            [
                "3 3\r\n1 2\r\n1 3\r\n2 3\r\n",
                "011\r\n"
            ]
        ]
    }
]