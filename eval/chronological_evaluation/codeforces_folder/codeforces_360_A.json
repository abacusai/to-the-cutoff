[
    {
        "name": "Levko and Array Recovery",
        "description": "Levko loves array a1, a2, ... , an, consisting of integers, very much. That is\nwhy Levko is playing with array a, performing all sorts of operations with it.\nEach operation Levko performs is of one of two types: Increase all elements\nfrom li to ri by di. In other words, perform assignments aj = aj + di for all\nj that meet the inequation li \u2264 j \u2264 ri. Find the maximum of elements from li\nto ri. That is, calculate the value . Sadly, Levko has recently lost his\narray. Fortunately, Levko has records of all operations he has performed on\narray a. Help Levko, given the operation records, find at least one suitable\narray. The results of all operations for the given array must coincide with\nthe record results. Levko clearly remembers that all numbers in his array\ndidn't exceed 10^9 in their absolute value, so he asks you to find such an\narray. Input The first line contains two integers n and m (1 \u2264 n, m \u2264 5000) \u2014\nthe size of the array and the number of operations in Levko's records,\ncorrespondingly. Next m lines describe the operations, the i-th line describes\nthe i-th operation. The first integer in the i-th line is integer ti (1 \u2264 ti \u2264\n2) that describes the operation type. If ti = 1, then it is followed by three\nintegers li, ri and di (1 \u2264 li \u2264 ri \u2264 n, - 10^4 \u2264 di \u2264 10^4) \u2014 the description\nof the operation of the first type. If ti = 2, then it is followed by three\nintegers li, ri and mi (1 \u2264 li \u2264 ri \u2264 n, - 5\u00b710^7 \u2264 mi \u2264 5\u00b710^7) \u2014 the\ndescription of the operation of the second type. The operations are given in\nthe order Levko performed them on his array. Output In the first line print\n\"YES\" (without the quotes), if the solution exists and \"NO\" (without the\nquotes) otherwise. If the solution exists, then on the second line print n\nintegers a1, a2, ... , an (|ai| \u2264 10^9) \u2014 the recovered array. Examples Input\n4 5 1 2 3 1 2 1 2 8 2 3 4 7 1 1 3 3 2 3 4 8 Output YES 4 7 4 7 Input 4 5 1 2 3\n1 2 1 2 8 2 3 4 7 1 1 3 3 2 3 4 13 Output NO\n\n",
        "cf_contest_id": 360,
        "cf_index": "A",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 5\r\n1 2 3 1\r\n2 1 2 8\r\n2 3 4 7\r\n1 1 3 3\r\n2 3 4 8\r\n",
                "YES\r\n8 7 4 7 \r\n"
            ],
            [
                "4 5\r\n1 2 3 1\r\n2 1 2 8\r\n2 3 4 7\r\n1 1 3 3\r\n2 3 4 13\r\n",
                "NO\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 4\r\n1 1 1 2\r\n2 1 1 6\r\n1 1 1 1\r\n2 1 1 7\r\n",
                "YES\r\n4 \r\n"
            ],
            [
                "1 4\r\n1 1 1 2\r\n2 1 1 6\r\n1 1 1 1\r\n2 1 1 8\r\n",
                "NO\r\n"
            ],
            [
                "1 2\r\n2 1 1 8\r\n2 1 1 7\r\n",
                "NO\r\n"
            ],
            [
                "1 2\r\n2 1 1 10\r\n2 1 1 5\r\n",
                "NO\r\n"
            ],
            [
                "2 2\r\n2 1 1 10\r\n2 1 2 5\r\n",
                "NO\r\n"
            ],
            [
                "1 2\r\n2 1 1 5\r\n2 1 1 1\r\n",
                "NO\r\n"
            ],
            [
                "2 2\r\n2 1 2 8\r\n2 1 2 7\r\n",
                "NO\r\n"
            ],
            [
                "1 2\r\n2 1 1 1\r\n2 1 1 0\r\n",
                "NO\r\n"
            ],
            [
                "1 1\r\n2 1 1 40000000\r\n",
                "YES\r\n40000000 \r\n"
            ],
            [
                "1 2\r\n2 1 1 2\r\n2 1 1 1\r\n",
                "NO\r\n"
            ],
            [
                "3 2\r\n2 1 2 100\r\n2 1 3 50\r\n",
                "NO\r\n"
            ]
        ]
    }
]