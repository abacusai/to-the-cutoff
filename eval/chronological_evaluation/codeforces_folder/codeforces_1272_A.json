[
    {
        "name": "Three Friends",
        "description": "Three friends are going to meet each other. Initially, the first friend stays\nat the position \n    x = a\n, the second friend stays at the position \n    x =\n    b\n and the third friend stays at the position \n    x = c\n on the coordinate\naxis \n    Ox\n. In one minute each friend independently from other friends can\nchange the position \n    x\n by \n    1\n to the left or by \n    1\n to the right\n(i.e. set \n    x := x - 1\n or \n    x := x + 1\n) or even don't change it. Let's\nintroduce the total pairwise distance \u2014 the sum of distances between each pair\nof friends. Let \n    a'\n, \n    b'\n and \n    c'\n be the final positions of the\nfirst, the second and the third friend, correspondingly. Then the total\npairwise distance is \n    |a' - b'| + |a' - c'| + |b' - c'|\n, where \n    |x|\n\nis the absolute value of \n    x\n. Friends are interested in the minimum total\npairwise distance they can reach if they will move optimally. Each friend will\nmove no more than once. So, more formally, they want to know the minimum total\npairwise distance they can reach after one minute. You have to answer \n    q\n\nindependent test cases. Input The first line of the input contains one integer\n\n    q\n (\n    1 \n    \u2264 q \n    \u2264 1000\n) \u2014 the number of test cases. The next\n\n    q\n lines describe test cases. The \n    i\n-th test case is given as three\nintegers \n    a, b\n and \n    c\n (\n    1 \n    \u2264 a, b, c \n    \u2264 10^9\n) \u2014 initial\npositions of the first, second and third friend correspondingly. The positions\nof friends can be equal. Output For each test case print the answer on it \u2014\nthe minimum total pairwise distance (the minimum sum of distances between each\npair of friends) if friends change their positions optimally. Each friend will\nmove no more than once. So, more formally, you have to find the minimum total\npairwise distance they can reach after one minute. Example Input 8 3 3 4 10 20\n30 5 5 5 2 4 3 1 1000000000 1000000000 1 1000000000 999999999 3 2 5 3 2 6\nOutput 0 36 0 0 1999999994 1999999994 2 4\n\n",
        "cf_contest_id": 1272,
        "cf_index": "A",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "greedy",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8\r\n3 3 4\r\n10 20 30\r\n5 5 5\r\n2 4 3\r\n1 1000000000 1000000000\r\n1 1000000000 999999999\r\n3 2 5\r\n3 2 6\r\n",
                "0\r\n36\r\n0\r\n0\r\n1999999994\r\n1999999994\r\n2\r\n4\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n1 1 1\r\n2 2 2\r\n3 3 3\r\n4 4 4\r\n10 5 8\r\n",
                "0\r\n0\r\n0\r\n0\r\n6\r\n"
            ]
        ]
    }
]