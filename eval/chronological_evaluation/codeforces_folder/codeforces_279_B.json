[
    {
        "name": "Books",
        "description": "When Valera has got some free time, he goes to the library to read some books.\nToday he's got t free minutes to read. That's why Valera took n books in the\nlibrary and for each book he estimated the time he is going to need to read\nit. Let's number the books by integers from 1 to n. Valera needs ai minutes to\nread the i-th book. Valera decided to choose an arbitrary book with number i\nand read the books one by one, starting from this book. In other words, he\nwill first read book number i, then book number i + 1, then book number i + 2\nand so on. He continues the process until he either runs out of the free time\nor finishes reading the n-th book. Valera reads each book up to the end, that\nis, he doesn't start reading the book if he doesn't have enough free time to\nfinish reading it. Print the maximum number of books Valera can read. Input\nThe first line contains two integers n and t (1 \u2264 n \u2264 10^5; 1 \u2264 t \u2264 10^9) \u2014\nthe number of books and the number of free minutes Valera's got. The second\nline contains a sequence of n integers a1, a2, ..., an (1 \u2264 ai \u2264 10^4), where\nnumber ai shows the number of minutes that the boy needs to read the i-th\nbook. Output Print a single integer \u2014 the maximum number of books Valera can\nread. Examples Input 4 5 3 1 2 1 Output 3 Input 3 3 2 2 3 Output 1\n\n",
        "cf_contest_id": 279,
        "cf_index": "B",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "implementation",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 5\r\n3 1 2 1\r\n",
                "3\r\n"
            ],
            [
                "3 3\r\n2 2 3\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 3\r\n5\r\n",
                "0\r\n"
            ],
            [
                "1 10\r\n4\r\n",
                "1\r\n"
            ],
            [
                "2 10\r\n6 4\r\n",
                "2\r\n"
            ],
            [
                "6 10\r\n2 3 4 2 1 1\r\n",
                "4\r\n"
            ],
            [
                "7 13\r\n6 8 14 9 4 11 10\r\n",
                "2\r\n"
            ],
            [
                "10 15\r\n10 9 1 1 5 10 5 3 7 2\r\n",
                "3\r\n"
            ],
            [
                "20 30\r\n8 1 2 6 9 4 1 9 9 10 4 7 8 9 5 7 1 8 7 4\r\n",
                "6\r\n"
            ],
            [
                "30 60\r\n16 13 22 38 13 35 17 17 20 38 12 19 9 22 20 3 35 34 34 21 35 40 22 3 27 19 12 4 8 19\r\n",
                "4\r\n"
            ],
            [
                "100 100\r\n75 92 18 6 81 67 7 92 100 65 82 32 50 67 85 31 80 91 84 63 39 52 92 81 1 98 24 12 43 48 17 86 51 72 48 95 45 50 12 66 19 79 49 89 34 1 97 75 20 33 96 27 42 23 73 71 93 1 85 19 66 14 17 61 20 39 36 33 42 61 56 64 23 91 80 99 40 74 13 18 98 85 74 39 62 84 46 74 50 23 38 11 79 14 9 25 66 100 25 52\r\n",
                "3\r\n"
            ],
            [
                "10 1\r\n4418 7528 8170 1736 1317 3205 8183 4995 8039 4708\r\n",
                "0\r\n"
            ],
            [
                "50 2\r\n124 214 63 73 996 760 38 571 451 300 970 1 706 937 837 494 619 88 851 411 957 990 842 613 821 649 627 34 693 678 734 116 816 985 705 940 499 493 922 967 854 439 112 644 961 438 189 572 655 550\r\n",
                "1\r\n"
            ]
        ]
    }
]