[
    {
        "name": "Binary Median",
        "description": "Consider all binary strings of length \n    m\n (\n    1 \n    \u2264 m \n    \u2264 60\n). A\nbinary string is a string that consists of the characters 0 and 1 only. For\nexample, 0110 is a binary string, and 012aba is not. Obviously, there are\nexactly \n    2^m\n such strings in total. The string \n    s\n is\nlexicographically smaller than the string \n    t\n (both have the same length\n\n    m\n) if in the first position \n    i\n from the left in which they differ,\nwe have \n    s[i] < t[i]\n. This is exactly the way strings are compared in\ndictionaries and in most modern programming languages when comparing them in a\nstandard way. For example, the string 01011 is lexicographically smaller than\nthe string 01100, because the first two characters are the same, and the third\ncharacter in the first string is less than that in the second. We remove from\nthis set \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    min(2^m-1, 100)\n) distinct binary\nstrings \n    a_1, a_2, \n    \u2026, a_n\n, each of length \n    m\n. Thus, the set\nwill have \n    k=2^m-n\n strings. Sort all strings of the resulting set in\nlexicographical ascending order (as in the dictionary). We number all the\nstrings after sorting from \n    0\n to \n    k-1\n. Print the string whose index\nis \n    \u230a\n    k-1/2\n    \u230b\n (such an element is called\nmedian), where \n    \u230a x \n    \u230b\n is the rounding of the number down\nto the nearest integer. For example, if \n    n=3\n, \n    m=3\n and \n    a=[\n010,\n111, 001\n    ]\n, then after removing the strings \n    a_i\n and sorting, the\nresult will take the form: \n    [\n000, 011, 100, 101, 110\n    ]\n. Thus, the\ndesired median is 100. Input The first line contains an integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of test cases. Then, \n    t\n test cases\nfollow. The first line of each test case contains integers \n    n\n (\n    1 \n    \u2264\n    n \n    \u2264\n    min(2^m-1, 100)\n) and \n    m\n (\n    1 \n    \u2264 m \n    \u2264 60\n), where\n\n    n\n is the number of strings to remove, and \n    m\n is the length of\nbinary strings. The next \n    n\n lines contain \n    a_1, a_2, \n    \u2026, a_n\n \u2014\ndistinct binary strings of length \n    m\n. The total length of all given\nbinary strings in all test cases in one test does not exceed \n    10^5\n.\nOutput Print \n    t\n answers to the test cases. For each test case, print a\nstring of length \n    m\n \u2014 the median of the sorted sequence of remaining\nstrings in the corresponding test case. Example Input 5 3 3 010 001 111 4 3\n000 111 100 011 1 1 1 1 1 0 3 2 00 01 10 Output 100 010 0 1 11 Note The first\ntest case is explained in the statement. In the second test case, the result\nafter removing strings and sorting is \n    [\n001, 010, 101, 110\n    ]\n.\nTherefore, the desired median is 010.\n\n",
        "cf_contest_id": 1360,
        "cf_index": "H",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "bitmasks",
            "brute force",
            "constructive algorithms"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3 3\r\n010\r\n001\r\n111\r\n4 3\r\n000\r\n111\r\n100\r\n011\r\n1 1\r\n1\r\n1 1\r\n0\r\n3 2\r\n00\r\n01\r\n10\r\n",
                "100\r\n010\r\n0\r\n1\r\n11\r\n"
            ]
        ],
        "private_cases": []
    }
]