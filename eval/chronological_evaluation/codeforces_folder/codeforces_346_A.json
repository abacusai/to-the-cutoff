[
    {
        "name": "Alice and Bob",
        "description": "It is so boring in the summer holiday, isn't it? So Alice and Bob have\ninvented a new game to play. The rules are as follows. First, they get a set\nof n distinct integers. And then they take turns to make the following moves.\nDuring each move, either Alice or Bob (the player whose turn is the current)\ncan choose two distinct integers x and y from the set, such that the set\ndoesn't contain their absolute difference |x - y|. Then this player adds\ninteger |x - y| to the set (so, the size of the set increases by one). If the\ncurrent player has no valid move, he (or she) loses the game. The question is\nwho will finally win the game if both players play optimally. Remember that\nAlice always moves first. Input The first line contains an integer n (2 \u2264 n \u2264\n100) \u2014 the initial number of elements in the set. The second line contains n\ndistinct space-separated integers a1, a2, ..., an (1 \u2264 ai \u2264 10^9) \u2014 the\nelements of the set. Output Print a single line with the winner's name. If\nAlice wins print \"Alice\", otherwise print \"Bob\" (without quotes). Examples\nInput 2 2 3 Output Alice Input 2 5 3 Output Alice Input 3 5 6 7 Output Bob\nNote Consider the first test sample. Alice moves first, and the only move she\ncan do is to choose 2 and 3, then to add 1 to the set. Next Bob moves, there\nis no valid move anymore, so the winner is Alice.\n\n",
        "cf_contest_id": 346,
        "cf_index": "A",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "games",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n2 3\r\n",
                "Alice\r\n"
            ],
            [
                "2\r\n5 3\r\n",
                "Alice\r\n"
            ],
            [
                "3\r\n5 6 7\r\n",
                "Bob\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n72 96 24 66 6 18 12 30 60 48\r\n",
                "Bob\r\n"
            ],
            [
                "10\r\n78 66 6 60 18 84 36 96 72 48\r\n",
                "Bob\r\n"
            ],
            [
                "10\r\n98 63 42 56 14 77 70 35 84 21\r\n",
                "Bob\r\n"
            ],
            [
                "2\r\n1 1000000000\r\n",
                "Bob\r\n"
            ],
            [
                "2\r\n1000000000 999999999\r\n",
                "Bob\r\n"
            ],
            [
                "3\r\n2 4 6\r\n",
                "Bob\r\n"
            ],
            [
                "2\r\n4 6\r\n",
                "Alice\r\n"
            ],
            [
                "2\r\n2 6\r\n",
                "Alice\r\n"
            ],
            [
                "2\r\n6 2\r\n",
                "Alice\r\n"
            ],
            [
                "10\r\n100000000 200000000 300000000 400000000 500000000 600000000 700000000 800000000 900000000 1000000000\r\n",
                "Bob\r\n"
            ],
            [
                "2\r\n1 2\r\n",
                "Bob\r\n"
            ],
            [
                "10\r\n1 999999999 999999998 999999997 999999996 999999995 999999994 999999993 999999992 999999991\r\n",
                "Alice\r\n"
            ],
            [
                "3\r\n6 14 21\r\n",
                "Bob\r\n"
            ],
            [
                "3\r\n4 12 18\r\n",
                "Bob\r\n"
            ],
            [
                "4\r\n2 3 15 30\r\n",
                "Bob\r\n"
            ],
            [
                "2\r\n10 4\r\n",
                "Alice\r\n"
            ]
        ]
    }
]