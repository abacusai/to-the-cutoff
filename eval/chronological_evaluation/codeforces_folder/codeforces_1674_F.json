[
    {
        "name": "Desktop Rearrangement",
        "description": "Your friend Ivan asked you to help him rearrange his desktop. The desktop can\nbe represented as a rectangle matrix of size \n    n \n    \u00d7 m\n consisting of\ncharacters '.' (empty cell of the desktop) and '*' (an icon). The desktop is\ncalled good if all its icons are occupying some prefix of full columns and,\npossibly, the prefix of the next column (and there are no icons outside this\nfigure). In other words, some amount of first columns will be filled with\nicons and, possibly, some amount of first cells of the next (after the last\nfull column) column will be also filled with icons (and all the icons on the\ndesktop belong to this figure). This is pretty much the same as the real life\nicons arrangement. In one move, you can take one icon and move it to any empty\ncell in the desktop. Ivan loves to add some icons to his desktop and remove\nthem from it, so he is asking you to answer \n    q\n queries: what is the\nminimum number of moves required to make the desktop good after\nadding/removing one icon? Note that queries are permanent and change the state\nof the desktop. Input The first line of the input contains three integers\n\n    n\n, \n    m\n and \n    q\n (\n    1 \n    \u2264 n, m \n    \u2264 1000; 1 \n    \u2264 q \n    \u2264 2\n    \n    \u00b7 10^5\n) \u2014 the number of rows in the desktop, the number of columns in\nthe desktop and the number of queries, respectively. The next \n    n\n lines\ncontain the description of the desktop. The \n    i\n-th of them contains\n\n    m\n characters '.' and '*' \u2014 the description of the \n    i\n-th row of the\ndesktop. The next \n    q\n lines describe queries. The \n    i\n-th of them\ncontains two integers \n    x_i\n and \n    y_i\n (\n    1 \n    \u2264 x_i \n    \u2264 n; 1 \n    \u2264\n    y_i \n    \u2264 m\n) \u2014 the position of the cell which changes its state (if this\ncell contained the icon before, then this icon is removed, otherwise an icon\nappears in this cell). Output Print \n    q\n integers. The \n    i\n-th of them\nshould be the minimum number of moves required to make the desktop good after\napplying the first \n    i\n queries. Examples Input 4 4 8 ..** .*.. *... ...* 1\n3 2 3 3 1 2 3 3 4 4 3 2 3 2 2 Output 3 4 4 3 4 5 5 5 Input 2 5 5 *...* ***** 1\n3 2 2 1 3 1 5 2 3 Output 2 3 3 3 2\n\n",
        "cf_contest_id": 1674,
        "cf_index": "F",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 4 8\r\n..**\r\n.*..\r\n*...\r\n...*\r\n1 3\r\n2 3\r\n3 1\r\n2 3\r\n3 4\r\n4 3\r\n2 3\r\n2 2\r\n",
                "3\r\n4\r\n4\r\n3\r\n4\r\n5\r\n5\r\n5\r\n"
            ],
            [
                "2 5 5\r\n*...*\r\n*****\r\n1 3\r\n2 2\r\n1 3\r\n1 5\r\n2 3\r\n",
                "2\r\n3\r\n3\r\n3\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1 1\r\n*\r\n1 1\r\n",
                "0\r\n"
            ]
        ]
    }
]