[
    {
        "name": "Game on Tree",
        "description": "Momiji has got a rooted tree, consisting of n nodes. The tree nodes are\nnumbered by integers from 1 to n. The root has number 1. Momiji decided to\nplay a game on this tree. The game consists of several steps. On each step,\nMomiji chooses one of the remaining tree nodes (let's denote it by v) and\nremoves all the subtree nodes with the root in node v from the tree. Node v\ngets deleted as well. The game finishes when the tree has no nodes left. In\nother words, the game finishes after the step that chooses the node number 1.\nEach time Momiji chooses a new node uniformly among all the remaining nodes.\nYour task is to find the expectation of the number of steps in the described\ngame. Input The first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the number of\nnodes in the tree. The next n - 1 lines contain the tree edges. The i-th line\ncontains integers ai, bi (1 \u2264 ai, bi \u2264 n; ai \u2260 bi) \u2014 the numbers of the nodes\nthat are connected by the i-th edge. It is guaranteed that the given graph is\na tree. Output Print a single real number \u2014 the expectation of the number of\nsteps in the described game. The answer will be considered correct if the\nabsolute or relative error doesn't exceed 10^-6. Examples Input 2 1 2 Output\n1.50000000000000000000 Input 3 1 2 1 3 Output 2.00000000000000000000 Note In\nthe first sample, there are two cases. One is directly remove the root and\nanother is remove the root after one step. Thus the expected steps are: 1 \u00d7 (1\n/ 2) + 2 \u00d7 (1 / 2) = 1.5 In the second sample, things get more complex. There\nare two cases that reduce to the first sample, and one case cleaned at once.\nThus the expected steps are: 1 \u00d7 (1 / 3) + (1 + 1.5) \u00d7 (2 / 3) = (1 / 3) + (5\n/ 3) = 2\n\n",
        "cf_contest_id": 280,
        "cf_index": "C",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "math",
            "probabilities",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n1 2\r\n",
                "1.5\r\n"
            ],
            [
                "3\r\n1 2\r\n1 3\r\n",
                "2.0\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n1 2\r\n2 3\r\n3 4\r\n1 5\r\n2 6\r\n6 7\r\n4 8\r\n6 9\r\n9 10\r\n",
                "3.81666666667\r\n"
            ],
            [
                "6\r\n1 3\r\n2 4\r\n5 6\r\n3 6\r\n5 4\r\n",
                "2.45\r\n"
            ]
        ]
    }
]