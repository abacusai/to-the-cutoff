[
    {
        "name": "Graph Decomposition",
        "description": "You are given an undirected graph consisting of \n    n\n vertices and \n    m\n\nedges. Recall that a cycle is a path that starts and ends in the same vertex.\nA cycle in a graph is called simple if it contains each vertex (except the\nstarting and ending one) no more than once (the starting and the ending one is\ncontained always twice). Note that loops are considered to be simple cycles.\nIn one move you can choose any simple cycle in this graph and erase the edges\ncorresponding to this cycle (corresponding vertices remain in the graph). It\nis allowed to erase the loop or two copies of the same edge (take a look at\nexamples). Your problem is to apply some sequence of moves to obtain the graph\nwithout edges. It is not necessary to minimize the number of cycles. If it is\nimpossible, print \"NO\". Input The first line of the input contains two\nintegers \n    n\n and \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the\nnumber of vertices and the number of edges in the graph. The next \n    m\n\nlines contain edges of the graph. The \n    i\n-th line contains the \n    i\n-th\nedge \n    x_i, y_i\n (\n    1 \n    \u2264 x_i, y_i \n    \u2264 n\n), where \n    x_i\n and\n\n    y_i\n are vertices connected by the \n    i\n-th edge. The graph can contain\nloops or multiple edges. Output If it is impossible to decompose the given\ngraph into simple cycles, print \"NO\" in the first line. Otherwise print \"YES\"\nin the first line. In the second line print \n    k\n \u2014 the number of simple\ncycles in the graph decomposition. In the next \n    k\n lines print cycles\nthemselves. The \n    j\n-th line should contain the \n    j\n-th cycle. First,\nprint \n    c_j\n \u2014 the number of vertices in the \n    j\n-th cycle. Then print\nthe cycle as a sequence of vertices. All neighbouring (adjacent) vertices in\nthe printed path should be connected by an edge that isn't contained in other\ncycles. Examples Input 6 9 1 2 2 3 1 3 2 4 2 5 4 5 3 5 3 6 5 6 Output YES 3 4\n2 5 4 2 4 3 6 5 3 4 1 3 2 1 Input 4 7 1 1 1 2 2 3 3 4 4 1 1 3 1 3 Output YES 3\n2 1 1 5 1 4 3 2 1 3 1 3 1 Input 4 8 1 1 1 2 2 3 3 4 4 1 2 4 1 3 1 3 Output NO\nNote The picture corresponding to the first example:\n\n",
        "cf_contest_id": 1170,
        "cf_index": "G",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "graphs"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 9\r\n1 2\r\n2 3\r\n1 3\r\n2 4\r\n2 5\r\n4 5\r\n3 5\r\n3 6\r\n5 6\r\n",
                "YES\n3\n4 3 5 6 3\n4 2 4 5 2\n4 1 2 3 1\n"
            ],
            [
                "4 7\r\n1 1\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n1 3\r\n1 3\r\n",
                "YES\n3\n3 1 3 1\n5 1 2 3 4 1\n2 1 1\n"
            ],
            [
                "4 8\r\n1 1\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n2 4\r\n1 3\r\n1 3\r\n",
                "NO\r\n"
            ]
        ],
        "private_cases": [
            [
                "200000 3\r\n114911 5777\r\n153173 5777\r\n153173 114911\r\n",
                "YES\n1\n4 5777 114911 153173 5777\n"
            ],
            [
                "200000 6\r\n9954 71770\r\n56271 111959\r\n145547 111959\r\n25601 9954\r\n25601 71770\r\n145547 56271\r\n",
                "YES\n2\n4 9954 71770 25601 9954\n4 56271 111959 145547 56271\n"
            ],
            [
                "200000 9\r\n103607 68140\r\n171735 137919\r\n113983 18140\r\n184759 68140\r\n137921 18140\r\n105567 137919\r\n137921 113983\r\n171735 105567\r\n184759 103607\r\n",
                "YES\n3\n4 18140 113983 137921 18140\n4 68140 103607 184759 68140\n4 105567 137919 171735 105567\n"
            ],
            [
                "2 2\r\n1 2\r\n1 2\r\n",
                "YES\n1\n3 1 2 1\n"
            ],
            [
                "4 1\r\n1 2\r\n",
                "NO\r\n"
            ],
            [
                "2 1\r\n1 2\r\n",
                "NO\r\n"
            ],
            [
                "7 6\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n",
                "NO\r\n"
            ],
            [
                "7 7\r\n1 2\r\n2 3\r\n3 4\r\n6 7\r\n7 1\r\n4 5\r\n5 6\r\n",
                "YES\n1\n8 1 2 3 4 5 6 7 1\n"
            ],
            [
                "4 2\r\n1 2\r\n3 4\r\n",
                "NO\r\n"
            ],
            [
                "3 2\r\n2 3\r\n2 3\r\n",
                "YES\n1\n3 2 3 2\n"
            ],
            [
                "3 2\r\n1 2\r\n1 2\r\n",
                "YES\n1\n3 1 2 1\n"
            ],
            [
                "3 2\r\n1 3\r\n1 3\r\n",
                "YES\n1\n3 1 3 1\n"
            ],
            [
                "3 2\r\n1 1\r\n3 3\r\n",
                "YES\n2\n2 1 1\n2 3 3\n"
            ],
            [
                "3 2\r\n1 1\r\n2 2\r\n",
                "YES\n2\n2 1 1\n2 2 2\n"
            ],
            [
                "3 2\r\n3 3\r\n2 2\r\n",
                "YES\n2\n2 2 2\n2 3 3\n"
            ],
            [
                "1 1\r\n1 1\r\n",
                "YES\n1\n2 1 1\n"
            ],
            [
                "200000 1\r\n153173 153173\r\n",
                "YES\n1\n2 153173 153173\n"
            ],
            [
                "3 4\r\n1 2\r\n2 1\r\n2 3\r\n3 1\r\n",
                "NO\r\n"
            ]
        ]
    }
]