[
    {
        "name": "Taxi drivers and Lyft",
        "description": "Palo Alto is an unusual city because it is an endless coordinate line. It is\nalso known for the office of Lyft Level 5. Lyft has become so popular so that\nit is now used by all \n    m\n taxi drivers in the city, who every day\ntransport the rest of the city residents \u2014 \n    n\n riders. Each resident\n(including taxi drivers) of Palo-Alto lives in its unique location (there is\nno such pair of residents that their coordinates are the same). The Lyft\nsystem is very clever: when a rider calls a taxi, his call does not go to all\ntaxi drivers, but only to the one that is the closest to that person. If there\nare multiple ones with the same distance, then to taxi driver with a smaller\ncoordinate is selected. But one morning the taxi drivers wondered: how many\nriders are there that would call the given taxi driver if they were the first\nto order a taxi on that day? In other words, you need to find for each taxi\ndriver \n    i\n the number \n    a_i\n \u2014 the number of riders that would call\nthe \n    i\n-th taxi driver when all drivers and riders are at their home? The\ntaxi driver can neither transport himself nor other taxi drivers. Input The\nfirst line contains two integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n,m \n    \u2264\n    10^5\n) \u2014 number of riders and taxi drivers. The second line contains \n    n +\n    m\n integers \n    x_1, x_2, \n    \u2026, x_n+m\n (\n    1 \n    \u2264 x_1 < x_2 <\n    \n    \u2026 < x_n+m\n    \u2264 10^9\n), where \n    x_i\n is the coordinate where the\n\n    i\n-th resident lives. The third line contains \n    n + m\n integers\n\n    t_1, t_2, \n    \u2026, t_n+m\n (\n    0 \n    \u2264 t_i \n    \u2264 1\n). If \n    t_i =\n    1\n, then the \n    i\n-th resident is a taxi driver, otherwise \n    t_i = 0\n.\nIt is guaranteed that the number of \n    i\n such that \n    t_i = 1\n is equal\nto \n    m\n. Output Print \n    m\n integers \n    a_1, a_2, \n    \u2026, a_m\n,\nwhere \n    a_i\n is the answer for the \n    i\n-th taxi driver. The taxi driver\nhas the number \n    i\n if among all the taxi drivers he lives in the\n\n    i\n-th smallest coordinate (see examples for better understanding).\nExamples Input 3 1 1 2 3 10 0 0 1 0 Output 3 Input 3 2 2 3 4 5 6 1 0 0 0 1\nOutput 2 1 Input 1 4 2 4 6 10 15 1 1 1 1 0 Output 0 0 0 1 Note In the first\nexample, we have only one taxi driver, which means an order from any of\n\n    n\n riders will go to him. In the second example, the first taxi driver\nlives at the point with the coordinate \n    2\n, and the second one lives at\nthe point with the coordinate \n    6\n. Obviously, the nearest taxi driver to\nthe rider who lives on the \n    3\n coordinate is the first one, and to the\nrider who lives on the coordinate \n    5\n is the second one. The rider who\nlives on the \n    4\n coordinate has the same distance to the first and the\nsecond taxi drivers, but since the first taxi driver has a smaller coordinate,\nthe call from this rider will go to the first taxi driver. In the third\nexample, we have one rider and the taxi driver nearest to him is the fourth\none.\n\n",
        "cf_contest_id": 1075,
        "cf_index": "B",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 1\r\n1 2 3 10\r\n0 0 1 0\r\n",
                "3\r\n"
            ],
            [
                "3 2\r\n2 3 4 5 6\r\n1 0 0 0 1\r\n",
                "2 1\r\n"
            ],
            [
                "1 4\r\n2 4 6 10 15\r\n1 1 1 1 0\r\n",
                "0 0 0 1\r\n"
            ]
        ],
        "private_cases": []
    }
]