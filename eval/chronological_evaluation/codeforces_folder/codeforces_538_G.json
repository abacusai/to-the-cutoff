[
    {
        "name": "Berserk Robot ",
        "description": "Help! A robot escaped our lab and we need help finding it. The lab is at the\npoint (0, 0) of the coordinate plane, at time 0 the robot was there. The\nrobot's movements are defined by a program \u2014 a string of length l, consisting\nof characters U, L, D, R. Each second the robot executes the next command in\nhis program: if the current coordinates of the robot are (x, y), then commands\nU, L, D, R move it to cells (x, y + 1), (x - 1, y), (x, y - 1), (x + 1, y)\nrespectively. The execution of the program started at time 0. The program is\nlooped, i.e. each l seconds of executing the program start again from the\nfirst character. Unfortunately, we don't know what program was loaded into the\nrobot when he left the lab. Our radars managed to find out the position of the\nrobot at n moments of time: we know that at the moment of time ti the robot is\nat the point (xi, yi). Given this data, either help to determine what program\ncould be loaded into the robot, or determine that no possible program meets\nthe data and the robot must have broken down. Input The first line of the\ninput contains two space-separated integers n and l (1 \u2264 n \u2264 2\u00b710^5, 1 \u2264 l \u2264\n2\u00b710^6). Next n lines contain three space-separated integers \u2014 ti, xi, yi (1 \u2264\nti \u2264 10^18, - 10^18 \u2264 xi, yi \u2264 10^18). The radar data is given\nchronologically, i.e. ti < ti + 1 for all i from 1 to n - 1. Output Print any\nof the possible programs that meet the data. If no program meets the data,\nprint a single word 'NO' (without the quotes). Examples Input 3 3 1 1 0 2 1 -1\n3 0 -1 Output RDL Input 2 2 1 1 0 999 1 0 Output RL Input 2 5 10 10 0 20 0 0\nOutput NO\n\n",
        "cf_contest_id": 538,
        "cf_index": "G",
        "cf_rating": 3100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\n1 1 0\r\n2 1 -1\r\n3 0 -1\r\n",
                "RDL\r\n"
            ],
            [
                "2 2\r\n1 1 0\r\n999 1 0\r\n",
                "RL\r\n"
            ],
            [
                "2 5\r\n10 10 0\r\n20 0 0\r\n",
                "NO\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1 0 0\r\n",
                "NO\r\n"
            ],
            [
                "1 1\r\n1 0 -1\r\n",
                "D\r\n"
            ],
            [
                "1 10\r\n1 1 1\r\n",
                "NO\r\n"
            ],
            [
                "10 10\r\n3 2 1\r\n28 8 18\r\n30 7 19\r\n56 2 22\r\n66 1 21\r\n68 1 21\r\n72 1 21\r\n74 2 20\r\n82 2 16\r\n88 2 20\r\n",
                "NO\r\n"
            ],
            [
                "30 3\r\n10 4 0\r\n11 4 -1\r\n12 4 0\r\n13 5 0\r\n14 5 -1\r\n15 5 0\r\n16 6 0\r\n17 6 -1\r\n18 6 0\r\n19 7 0\r\n20 7 -1\r\n21 7 0\r\n22 8 0\r\n23 8 -1\r\n24 8 0\r\n25 9 0\r\n26 9 -1\r\n27 9 0\r\n28 10 0\r\n29 10 -1\r\n30 10 0\r\n31 11 0\r\n32 11 -1\r\n33 11 0\r\n34 12 0\r\n35 12 -1\r\n36 12 0\r\n37 13 0\r\n38 13 -1\r\n39 13 0\r\n",
                "RDU\r\n"
            ],
            [
                "1 100\r\n67932885 2 2717313\r\n",
                "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRULLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRRRUUULLLLLLL\r\n"
            ],
            [
                "10 10\r\n5 -5 0\r\n6 -5 1\r\n7 -6 1\r\n8 -6 2\r\n9 -6 3\r\n10 -7 3\r\n11 -8 3\r\n12 -9 3\r\n13 -10 3\r\n14 -11 3\r\n",
                "LLLLLULUUL\r\n"
            ],
            [
                "1 89\r\n916 -13 3\r\n",
                "RRRRRRRRRRRRRRRRRRRRUUULLLRRRRRRRRRRRRRRRRRRRRDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\r\n"
            ]
        ]
    }
]