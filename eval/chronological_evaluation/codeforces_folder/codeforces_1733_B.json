[
    {
        "name": "Rule of League",
        "description": "There is a badminton championship in which \n    n\n players take part. The\nplayers are numbered from \n    1\n to \n    n\n. The championship proceeds as\nfollows: player \n    1\n and player \n    2\n play a game, then the winner and\nplayer \n    3\n play a game, and then the winner and player \n    4\n play a\ngame, and so on. So, \n    n-1\n games are played, and the winner of the last\ngame becomes the champion. There are no draws in the games. You want to find\nout the result of championship. Currently, you only know the following\ninformation: Each player has either won \n    x\n games or \n    y\n games in the\nchampionship. Given \n    n\n, \n    x\n, and \n    y\n, find out if there is a\nresult that matches this information. Input The first line contains one\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^5\n) \u2014 the number of test cases. The\nonly line of each test case contains three integers \n    n\n, \n    x\n, \n    y\n\n(\n    2 \n    \u2264 n \n    \u2264 10^5\n, \n    0 \n    \u2264 x, y < n\n). It is guaranteed that\nthe sum of \n    n\n over all test cases doesn't exceed \n    2 \n    \u00b7 10^5\n.\nOutput Print the answer for each test case, one per line. If there is no\nresult that matches the given information about \n    n\n, \n    x\n, \n    y\n,\nprint \n    -1\n. Otherwise, print \n    n-1\n space separated integers, where the\n\n    i\n-th integer is the player number of the winner of the \n    i\n-th game.\nIf there are multiple valid results, print any. Example Input 5 5 2 0 8 1 2 3\n0 0 2 0 1 6 3 0 Output 1 1 4 4 -1 -1 2 -1 Note In the first test case, player\n\n    1\n and player \n    4\n won \n    x\n times, player \n    2\n and player\n\n    3\n won \n    y\n times. In the second, third, and fifth test cases, no\nvalid result exists.\n\n",
        "cf_contest_id": 1733,
        "cf_index": "B",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n5 2 0\r\n8 1 2\r\n3 0 0\r\n2 0 1\r\n6 3 0\r\n",
                "2 2  4 4 \r\n-1\r\n-1\r\n2 \r\n-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n100000 99999 99999\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n2 0 0\r\n",
                "-1\r\n"
            ]
        ]
    }
]