[
    {
        "name": "Knight Tournament",
        "description": "Hooray! Berl II, the king of Berland is making a knight tournament. The king\nhas already sent the message to all knights in the kingdom and they in turn\nagreed to participate in this grand event. As for you, you're just a simple\npeasant. There's no surprise that you slept in this morning and were late for\nthe tournament (it was a weekend, after all). Now you are really curious about\nthe results of the tournament. This time the tournament in Berland went as\nfollows: There are n knights participating in the tournament. Each knight was\nassigned his unique number \u2014 an integer from 1 to n. The tournament consisted\nof m fights, in the i-th fight the knights that were still in the game with\nnumbers at least li and at most ri have fought for the right to continue\ntaking part in the tournament. After the i-th fight among all participants of\nthe fight only one knight won \u2014 the knight number xi, he continued\nparticipating in the tournament. Other knights left the tournament. The winner\nof the last (the m-th) fight (the knight number xm) became the winner of the\ntournament. You fished out all the information about the fights from your\nfriends. Now for each knight you want to know the name of the knight he was\nconquered by. We think that the knight number b was conquered by the knight\nnumber a, if there was a fight with both of these knights present and the\nwinner was the knight number a. Write the code that calculates for each\nknight, the name of the knight that beat him. Input The first line contains\ntwo integers n, m (2 \u2264 n \u2264 3\u00b710^5; 1 \u2264 m \u2264 3\u00b710^5) \u2014 the number of knights and\nthe number of fights. Each of the following m lines contains three integers\nli, ri, xi (1 \u2264 li < ri \u2264 n; li \u2264 xi \u2264 ri) \u2014 the description of the i-th\nfight. It is guaranteed that the input is correct and matches the problem\nstatement. It is guaranteed that at least two knights took part in each\nbattle. Output Print n integers. If the i-th knight lost, then the i-th number\nshould equal the number of the knight that beat the knight number i. If the\ni-th knight is the winner, then the i-th number must equal 0. Examples Input 4\n3 1 2 1 1 3 3 1 4 4 Output 3 1 4 0 Input 8 4 3 5 4 3 7 6 2 8 8 1 8 1 Output 0\n8 4 6 4 8 6 1 Note Consider the first test case. Knights 1 and 2 fought the\nfirst fight and knight 1 won. Knights 1 and 3 fought the second fight and\nknight 3 won. The last fight was between knights 3 and 4, knight 4 won.\n\n",
        "cf_contest_id": 356,
        "cf_index": "A",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dsu"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 3\r\n1 2 1\r\n1 3 3\r\n1 4 4\r\n",
                "3 1 4 0\r\n"
            ],
            [
                "8 4\r\n3 5 4\r\n3 7 6\r\n2 8 8\r\n1 8 1\r\n",
                "0 8 4 6 4 8 6 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1\r\n1 2 1\r\n",
                "0 1\r\n"
            ],
            [
                "2 1\r\n1 2 2\r\n",
                "2 0\r\n"
            ],
            [
                "3 1\r\n1 3 1\r\n",
                "0 1 1\r\n"
            ],
            [
                "3 1\r\n1 3 2\r\n",
                "2 0 2\r\n"
            ],
            [
                "3 1\r\n1 3 3\r\n",
                "3 3 0\r\n"
            ],
            [
                "3 2\r\n1 2 1\r\n1 3 3\r\n",
                "3 1 0\r\n"
            ],
            [
                "3 2\r\n1 2 2\r\n1 3 2\r\n",
                "2 0 2\r\n"
            ],
            [
                "3 2\r\n2 3 3\r\n1 3 3\r\n",
                "3 3 0\r\n"
            ],
            [
                "11 6\r\n1 2 2\r\n7 8 7\r\n3 4 4\r\n6 9 6\r\n5 10 10\r\n2 11 11\r\n",
                "2 11 4 11 10 10 6 7 6 11 0\r\n"
            ],
            [
                "10 6\r\n9 10 10\r\n6 7 7\r\n2 4 2\r\n2 5 5\r\n1 7 5\r\n4 10 8\r\n",
                "5 5 2 2 8 7 5 0 10 8\r\n"
            ],
            [
                "11 8\r\n3 5 5\r\n8 9 9\r\n4 6 6\r\n8 10 10\r\n5 7 7\r\n2 7 2\r\n10 11 11\r\n1 11 1\r\n",
                "0 1 5 5 6 7 2 9 10 11 1\r\n"
            ],
            [
                "10 7\r\n7 8 7\r\n7 9 9\r\n5 9 5\r\n5 10 10\r\n1 2 2\r\n3 4 4\r\n2 10 4\r\n",
                "2 4 4 0 10 5 9 7 5 4\r\n"
            ],
            [
                "11 5\r\n8 10 9\r\n6 10 7\r\n6 11 11\r\n3 5 5\r\n1 11 1\r\n",
                "0 1 5 5 1 7 11 9 7 9 1\r\n"
            ],
            [
                "10 6\r\n6 7 6\r\n5 7 5\r\n3 7 4\r\n2 8 2\r\n2 10 10\r\n1 10 10\r\n",
                "10 10 4 2 4 5 6 2 10 0\r\n"
            ],
            [
                "11 7\r\n7 8 8\r\n5 6 5\r\n1 3 3\r\n7 9 9\r\n5 10 10\r\n10 11 11\r\n1 11 4\r\n",
                "3 3 4 0 10 5 8 9 10 11 4\r\n"
            ],
            [
                "10 7\r\n8 9 9\r\n3 4 3\r\n2 3 2\r\n1 5 2\r\n6 7 6\r\n6 10 10\r\n1 10 10\r\n",
                "2 10 2 3 2 10 6 9 10 0\r\n"
            ],
            [
                "11 6\r\n1 2 1\r\n8 9 9\r\n3 5 5\r\n3 6 6\r\n9 10 10\r\n1 11 10\r\n",
                "10 1 5 5 6 10 10 9 10 0 10\r\n"
            ],
            [
                "10 5\r\n1 2 1\r\n8 10 8\r\n3 6 4\r\n4 7 7\r\n1 8 7\r\n",
                "7 1 4 7 4 4 0 7 8 8\r\n"
            ],
            [
                "4 3\r\n1 2 2\r\n1 3 3\r\n1 4 4\r\n",
                "2 3 4 0\r\n"
            ]
        ]
    }
]