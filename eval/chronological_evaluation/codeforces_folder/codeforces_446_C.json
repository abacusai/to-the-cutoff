[
    {
        "name": "DZY Loves Fibonacci Numbers",
        "description": "In mathematical terms, the sequence Fn of Fibonacci numbers is defined by the\nrecurrence relation F1 = 1; F2 = 1; Fn = Fn - 1 + Fn - 2 (n > 2). DZY loves\nFibonacci numbers very much. Today DZY gives you an array consisting of n\nintegers: a1, a2, ..., an. Moreover, there are m queries, each query has one\nof the two types: Format of the query \"1 l r\". In reply to the query, you need\nto add Fi - l + 1 to each element ai, where l \u2264 i \u2264 r. Format of the query \"2\nl r\". In reply to the query you should output the value of modulo 1000000009\n(10^9 + 9). Help DZY reply to all the queries. Input The first line of the\ninput contains two integers n and m (1 \u2264 n, m \u2264 300000). The second line\ncontains n integers a1, a2, ..., an (1 \u2264 ai \u2264 10^9) \u2014 initial array a. Then, m\nlines follow. A single line describes a single query in the format given in\nthe statement. It is guaranteed that for each query inequality 1 \u2264 l \u2264 r \u2264 n\nholds. Output For each query of the second type, print the value of the sum on\na single line. Examples Input 4 4 1 2 3 4 1 1 4 2 1 4 1 2 4 2 1 3 Output 17 12\nNote After the first query, a = [2, 3, 5, 7]. For the second query, sum = 2 +\n3 + 5 + 7 = 17. After the third query, a = [2, 4, 6, 9]. For the fourth query,\nsum = 2 + 4 + 6 = 12.\n\n",
        "cf_contest_id": 446,
        "cf_index": "C",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 4\r\n1 2 3 4\r\n1 1 4\r\n2 1 4\r\n1 2 4\r\n2 1 3\r\n",
                "17\r\n12\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1\r\n1 1 1\r\n",
                ""
            ],
            [
                "2 2\r\n1 2\r\n2 1 2\r\n2 1 2\r\n",
                "3\r\n3\r\n"
            ],
            [
                "10 20\r\n56 12 68 23 41 29 97 69 79 76\r\n1 3 5\r\n1 8 9\r\n2 3 10\r\n1 7 10\r\n2 1 10\r\n1 5 10\r\n2 2 4\r\n1 2 4\r\n1 5 6\r\n2 1 2\r\n2 4 5\r\n1 1 5\r\n1 8 9\r\n2 5 8\r\n2 4 7\r\n2 9 10\r\n2 4 9\r\n1 2 10\r\n1 2 9\r\n2 7 8\r\n",
                "488\r\n563\r\n105\r\n69\r\n71\r\n256\r\n210\r\n175\r\n373\r\n217\r\n"
            ]
        ]
    }
]