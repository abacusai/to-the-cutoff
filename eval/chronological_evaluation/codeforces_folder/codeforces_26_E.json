[
    {
        "name": "Multithreading",
        "description": "You are given the following concurrent program. There are N processes and the\ni-th process has the following pseudocode: repeat ni times yi := y y := yi + 1\nend repeat Here y is a shared variable. Everything else is local for the\nprocess. All actions on a given row are atomic, i.e. when the process starts\nexecuting a row it is never interrupted. Beyond that all interleavings are\npossible, i.e. every process that has yet work to do can be granted the rights\nto execute its next row. In the beginning y = 0. You will be given an integer\nW and ni, for i = 1, ... , N. Determine if it is possible that after all\nprocesses terminate, y = W, and if it is possible output an arbitrary schedule\nthat will produce this final value. Input In the first line of the input you\nwill be given two space separated integers N (1 \u2264 N \u2264 100) and W ( - 10^9 \u2264 W\n\u2264 10^9). In the second line there are N space separated integers ni (1 \u2264 ni \u2264\n1000). Output On the first line of the output write Yes if it is possible that\nat the end y = W, or No otherwise. If the answer is No then there is no second\nline, but if the answer is Yes, then on the second line output a space\nseparated list of integers representing some schedule that leads to the\ndesired result. For more information see note. Examples Input 1 10 11 Output\nNo Input 2 3 4 4 Output Yes 1 1 2 1 2 2 2 2 2 1 2 1 1 1 1 2 Input 3 6 1 2 3\nOutput Yes 1 1 2 2 2 2 3 3 3 3 3 3 Note For simplicity, assume that there is\nno repeat statement in the code of the processes, but the code from the loop\nis written the correct amount of times. The processes are numbered starting\nfrom 1. The list of integers represent which process works on its next\ninstruction at a given step. For example, consider the schedule 1 2 2 1 3.\nFirst process 1 executes its first instruction, then process 2 executes its\nfirst two instructions, after that process 1 executes its second instruction,\nand finally process 3 executes its first instruction. The list must consists\nof exactly 2\u00b7\u03a3 i = 1...N ni numbers.\n\n",
        "cf_contest_id": 26,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1 10\r\n11\r\n",
                "No\r\n"
            ],
            [
                "3 -1\r\n1 2 3\r\n",
                "No\r\n"
            ],
            [
                "3 6\r\n1 2 3\r\n",
                "Yes\r\n1 1 2 2 2 2 3 3 3 3 3 3 "
            ]
        ],
        "private_cases": [
            [
                "3 5\r\n3 1 4\r\n",
                "Yes\r\n2 1 1 1 1 1 1 2 3 3 3 3 3 3 3 3 "
            ],
            [
                "2 3\r\n4 4\r\n",
                "Yes\r\n1 2 2 2 2 2 2 1 2 1 1 1 1 2 1 1 "
            ],
            [
                "5 1\r\n2 3 4 5 6\r\n",
                "No\r\n"
            ],
            [
                "2 12\r\n5 6\r\n",
                "No\r\n"
            ],
            [
                "26 -772620876\r\n715 772 518 600 827 766 757 844 606 637 875 51 322 705 92 344 304 355 757 941 453 767 328 997 906 623\r\n",
                "No\r\n"
            ],
            [
                "55 -156937950\r\n160 154 287 571 944 846 380 952 85 867 69 81 308 85 65 832 847 667 121 198 61 678 231 539 254 939 403 622 151 342 79 439 764 123 402 279 579 361 570 256 293 814 978 447 664 97 275 922 655 752 335 735 971 774 545\r\n",
                "No\r\n"
            ],
            [
                "85 458744977\r\n604 888 704 191 61 926 3 60 563 97 614 759 293 112 38 969 390 980 133 807 670 589 783 728 602 256 808 353 44 498 168 564 928 462 940 455 285 226 921 881 572 928 671 703 361 944 937 477 931 603 981 776 793 842 420 439 986 364 431 426 977 615 467 963 756 430 59 866 519 409 25 980 738 515 449 179 252 220 882 88 65 742 122 69 943\r\n",
                "No\r\n"
            ],
            [
                "63 -925572098\r\n49 622 472 163 178 5 627 168 690 327 160 437 279 140 659 457 284 940 146 64 927 499 687 917 949 573 213 435 586 302 904 337 741 448 477 632 343 738 272 506 500 690 13 312 58 791 246 31 854 805 626 465 263 261 295 180 74 768 343 929 372 977 693\r\n",
                "No\r\n"
            ],
            [
                "93 -457372818\r\n142 356 889 134 943 85 250 276 169 557 354 114 616 520 632 945 827 253 158 673 536 410 239 458 649 241 267 518 479 458 992 462 905 787 366 808 49 603 623 778 427 452 706 569 755 990 555 586 130 656 624 505 85 681 818 920 514 524 606 79 415 691 919 554 769 771 218 752 750 861 286 647 63 748 110 973 382 818 276 962 456 205 195 849 838 7 249 365 94 787 367 96 673\r\n",
                "No\r\n"
            ],
            [
                "22 158310108\r\n587 89 657 106 60 165 873 383 648 787 899 792 602 548 605 81 722 565 170 930 145 320\r\n",
                "No\r\n"
            ],
            [
                "52 773993035\r\n31 823 74 78 177 245 496 491 126 665 445 470 588 575 226 569 265 525 534 539 402 231 694 837 345 875 77 331 914 419 168 360 530 112 441 161 461 331 325 28 282 328 740 434 797 684 525 695 330 709 916 235\r\n",
                "No\r\n"
            ],
            [
                "82 -757807687\r\n124 205 491 49 294 325 120 599 253 895 639 500 573 955 199 705 160 838 547 795 11 141 598 378 45 191 482 62 455 575 256 485 695 99 978 986 167 196 677 653 562 90 434 43 495 883 186 250 605 559 561 275 847 235 444 141 481 88 693 882 600 128 245 616 113 429 105 406 743 38 149 120 24 126 924 842 577 714 866 949 189 871\r\n",
                "No\r\n"
            ],
            [
                "12 -142124761\r\n569 939 259 21 59 405 743 707 732 125 184 178\r\n",
                "No\r\n"
            ],
            [
                "95 -200797120\r\n832 159 171 230 750 361 800 516 567 380 405 527 58 86 68 172 923 920 248 854 804 557 246 61 106 190 67 552 310 645 120 154 244 308 355 832 432 314 824 774 988 513 228 361 390 863 586 732 798 630 798 210 894 978 686 668 674 103 793 600 110 493 775 327 487 441 912 537 641 521 2 783 760 275 482 773 523 210 755 242 346 694 796 685 224 800 915 310 123 543 767 166 552 377 900\r\n",
                "No\r\n"
            ],
            [
                "94 -978764317\r\n154 298 660 716 963 692 257 397 974 92 191 154 519 838 828 957 687 776 636 997 101 800 579 181 691 256 95 531 333 347 803 682 252 655 297 892 833 31 239 895 45 235 394 394 909 486 400 621 443 348 471 59 791 934 195 861 356 876 741 763 431 781 639 193 291 230 171 45 288 181 187 657 273 200 924 481 476 335 156 114 253 659 346 276 692 313 828 582 677 95 507 685 310 154\r\n",
                "No\r\n"
            ],
            [
                "93 95784839\r\n477 436 149 554 528 671 67 630 382 805 329 781 980 237 589 743 451 633 24 139 45 396 911 950 925 970 123 862 355 401 134 857 613 2 886 951 585 748 303 17 750 957 912 780 427 110 215 510 87 418 144 556 688 538 704 405 391 648 41 927 752 422 854 708 447 371 782 904 934 489 373 882 787 774 366 836 430 460 557 337 808 975 248 867 808 179 742 206 231 648 600 852 419\r\n",
                "No\r\n"
            ],
            [
                "100 2105125\r\n844 941 997 951 966 959 958 974 978 965 920 986 995 953 950 947 954 1000 915 829 908 926 875 992 993 952 729 993 925 984 988 832 809 974 949 902 927 912 981 713 962 969 938 835 920 984 993 920 994 1000 909 974 958 958 721 985 756 918 888 968 961 890 996 792 989 740 872 999 955 994 810 990 995 938 984 796 956 912 996 858 884 993 983 762 767 783 866 744 984 995 929 901 999 987 866 810 953 807 974 932\r\n",
                "No\r\n"
            ],
            [
                "100 -374833246\r\n952 847 939 978 971 901 980 943 963 999 831 992 949 995 995 932 993 979 950 985 987 961 980 979 948 997 991 997 750 906 999 974 902 945 905 981 885 909 975 934 909 615 934 948 928 832 982 990 995 782 652 955 947 950 965 956 871 892 836 961 988 987 985 993 946 966 989 857 953 970 996 922 794 943 944 970 911 904 955 778 968 910 987 836 977 957 1000 997 866 968 856 890 993 990 993 998 999 940 950 929\r\n",
                "No\r\n"
            ],
            [
                "100 -751771616\r\n978 980 808 940 981 986 980 964 990 856 817 999 955 884 894 927 977 949 957 782 923 999 879 997 948 961 965 976 895 795 962 939 975 925 826 982 955 938 932 795 907 981 916 999 981 932 908 764 941 734 855 928 990 933 975 890 977 839 870 967 981 715 913 899 1000 981 813 840 858 900 951 918 867 1000 971 935 865 761 969 959 889 879 970 935 992 984 873 985 920 716 702 990 952 986 814 988 933 939 964 930\r\n",
                "No\r\n"
            ],
            [
                "100 -981226339\r\n904 940 949 741 854 977 985 985 818 848 972 937 861 880 769 908 999 985 706 949 945 940 900 928 870 921 710 944 958 980 646 939 899 690 959 949 853 898 749 918 912 976 906 868 973 900 965 824 988 995 823 978 985 979 870 909 926 894 978 998 966 973 941 810 937 832 975 880 721 970 941 711 961 846 926 1000 887 968 978 984 964 986 960 985 912 962 954 987 890 928 903 987 977 987 992 814 957 929 988 901\r\n",
                "No\r\n"
            ],
            [
                "100 641835292\r\n943 945 992 905 990 920 973 962 975 748 759 947 919 720 915 897 976 997 825 901 970 944 940 947 988 915 922 970 957 848 926 697 969 910 886 917 904 680 970 969 990 993 988 905 933 942 948 990 956 990 990 888 827 677 963 973 923 999 963 914 895 998 816 935 845 952 937 992 977 983 960 778 996 922 929 876 843 898 709 998 965 946 967 680 902 988 789 763 991 789 993 975 942 911 950 996 915 947 991 902\r\n",
                "No\r\n"
            ],
            [
                "100 264896921\r\n873 930 997 985 837 928 946 987 914 964 928 952 798 942 994 919 543 964 744 777 892 882 980 867 919 981 989 907 800 972 990 960 913 890 941 899 969 934 1000 922 982 742 778 981 948 888 932 834 878 917 901 966 989 913 954 926 857 942 878 908 937 979 986 967 988 882 970 990 845 995 908 931 987 954 767 981 980 922 874 952 918 858 908 820 940 873 976 996 940 865 985 971 863 874 929 989 875 769 789 708\r\n",
                "No\r\n"
            ],
            [
                "5 1\r\n5 6 7 2 1000\r\n",
                "No\r\n"
            ],
            [
                "1 1001\r\n1000\r\n",
                "No\r\n"
            ],
            [
                "1 999\r\n1000\r\n",
                "No\r\n"
            ],
            [
                "3 30\r\n2 3 50\r\n",
                "Yes\r\n1 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 1 1 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 "
            ]
        ]
    }
]