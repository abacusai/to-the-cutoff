[
    {
        "name": "Robot Cleaner",
        "description": "A robot cleaner is placed on the floor of a rectangle room, surrounded by\nwalls. The floor consists of \n    n\n rows and \n    m\n columns. The rows of the\nfloor are numbered from \n    1\n to \n    n\n from top to bottom, and columns of\nthe floor are numbered from \n    1\n to \n    m\n from left to right. The cell on\nthe intersection of the \n    r\n-th row and the \n    c\n-th column is denoted as\n\n    (r,c)\n. The initial position of the robot is \n    (r_b, c_b)\n. In one\nsecond, the robot moves by \n    dr\n rows and \n    dc\n columns, that is, after\none second, the robot moves from the cell \n    (r, c)\n to \n    (r + dr, c +\n    dc)\n. Initially \n    dr = 1\n, \n    dc = 1\n. If there is a vertical wall (the\nleft or the right walls) in the movement direction, \n    dc\n is reflected\nbefore the movement, so the new value of \n    dc\n is \n    -dc\n. And if there\nis a horizontal wall (the upper or lower walls), \n    dr\n is reflected before\nthe movement, so the new value of \n    dr\n is \n    -dr\n. Each second\n(including the moment before the robot starts moving), the robot cleans every\ncell lying in the same row or the same column as its position. There is only\none dirty cell at \n    (r_d, c_d)\n. The job of the robot is to clean that\ndirty cell. Illustration for the first example. The blue arc is the robot. The\nred star is the target dirty cell. Each second the robot cleans a row and a\ncolumn, denoted by yellow stripes. Given the floor size \n    n\n and \n    m\n,\nthe robot's initial position \n    (r_b, c_b)\n and the dirty cell's position\n\n    (r_d, c_d)\n, find the time for the robot to do its job. Input Each test\ncontains multiple test cases. The first line contains the number of test cases\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n). Description of the test cases follows. A\ntest case consists of only one line, containing six integers \n    n\n, \n    m\n,\n\n    r_b\n, \n    c_b\n, \n    r_d\n, and \n    c_d\n (\n    1 \n    \u2264 n, m \n    \u2264 100\n,\n\n    1 \n    \u2264 r_b, r_d \n    \u2264 n\n, \n    1 \n    \u2264 c_b, c_d \n    \u2264 m\n) \u2014 the sizes of\nthe room, the initial position of the robot and the position of the dirt cell.\nOutput For each test case, print an integer \u2014 the time for the robot to clean\nthe dirty cell. We can show that the robot always cleans the dirty cell\neventually. Example Input 5 10 10 6 1 2 8 10 10 9 9 1 1 9 8 5 6 2 1 6 9 2 2 5\n8 2 2 1 1 2 1 Output 7 10 9 3 0 Note In the first example, the floor has the\nsize of \n    10\n    \u00d7 10\n. The initial position of the robot is \n    (6, 1)\n\nand the position of the dirty cell is \n    (2, 8)\n. See the illustration of\nthis example in the problem statement. In the second example, the floor is the\nsame, but the initial position of the robot is now \n    (9, 9)\n, and the\nposition of the dirty cell is \n    (1, 1)\n. In this example, the robot went\nstraight to the dirty cell and clean it. In the third example, the floor has\nthe size \n    9 \n    \u00d7 8\n. The initial position of the robot is \n    (5,\n    6)\n, and the position of the dirty cell is \n    (2, 1)\n. In the fourth\nexample, the floor has the size \n    6 \n    \u00d7 9\n. The initial position of\nthe robot is \n    (2, 2)\n and the position of the dirty cell is \n    (5, 8)\n.\nIn the last example, the robot was already standing in the same column as the\ndirty cell, so it can clean the cell right away.\n\n",
        "cf_contest_id": 1623,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n10 10 6 1 2 8\r\n10 10 9 9 1 1\r\n9 8 5 6 2 1\r\n6 9 2 2 5 8\r\n2 2 1 1 2 1\r\n",
                "7\r\n10\r\n9\r\n3\r\n0\r\n"
            ]
        ],
        "private_cases": []
    }
]