[
    {
        "name": "New Theatre Square",
        "description": "You might have remembered Theatre square from the problem 1A. Now it's finally\ngetting repaved. The square still has a rectangular shape of \n    n \n    \u00d7\n    m\n meters. However, the picture is about to get more complicated now. Let\n\n    a_i,j\n be the \n    j\n-th square in the \n    i\n-th row of the pavement.\nYou are given the picture of the squares: if \n    a_i,j =\n \"*\", then the\n\n    j\n-th square in the \n    i\n-th row should be black; if \n    a_i,j =\n\n\".\", then the \n    j\n-th square in the \n    i\n-th row should be white. The\nblack squares are paved already. You have to pave the white squares. There are\ntwo options for pavement tiles: \n    1 \n    \u00d7 1\n tiles \u2014 each tile costs\n\n    x\n burles and covers exactly \n    1\n square; \n    1 \n    \u00d7 2\n tiles \u2014\neach tile costs \n    y\n burles and covers exactly \n    2\n adjacent squares of\nthe same row. Note that you are not allowed to rotate these tiles or cut them\ninto \n    1 \n    \u00d7 1\n tiles. You should cover all the white squares, no two\ntiles should overlap and no black squares should be covered by tiles. What is\nthe smallest total price of the tiles needed to cover all the white squares?\nInput The first line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    500\n) \u2014 the number of testcases. Then the description of \n    t\n testcases\nfollow. The first line of each testcase contains four integers \n    n\n,\n\n    m\n, \n    x\n and \n    y\n (\n    1 \n    \u2264 n \n    \u2264 100\n; \n    1 \n    \u2264 m \n    \u2264\n    1000\n; \n    1 \n    \u2264 x, y \n    \u2264 1000\n) \u2014 the size of the Theatre square, the\nprice of the \n    1 \n    \u00d7 1\n tile and the price of the \n    1 \n    \u00d7 2\n\ntile. Each of the next \n    n\n lines contains \n    m\n characters. The\n\n    j\n-th character in the \n    i\n-th line is \n    a_i,j\n. If \n    a_i,j =\n \"*\", then the \n    j\n-th square in the \n    i\n-th row should be black, and\nif \n    a_i,j =\n \".\", then the \n    j\n-th square in the \n    i\n-th row\nshould be white. It's guaranteed that the sum of \n    n \n    \u00d7 m\n over all\ntestcases doesn't exceed \n    10^5\n. Output For each testcase print a single\ninteger \u2014 the smallest total price of the tiles needed to cover all the white\nsquares in burles. Example Input 4 1 1 10 1 . 1 2 10 1 .. 2 1 10 1 . . 3 3 3 7\n..* *.. .*. Output 10 1 20 18 Note In the first testcase you are required to\nuse a single \n    1 \n    \u00d7 1\n tile, even though \n    1 \n    \u00d7 2\n tile is\ncheaper. So the total price is \n    10\n burles. In the second testcase you can\neither use two \n    1 \n    \u00d7 1\n tiles and spend \n    20\n burles or use a\nsingle \n    1 \n    \u00d7 2\n tile and spend \n    1\n burle. The second option is\ncheaper, thus the answer is \n    1\n. The third testcase shows that you can't\nrotate \n    1 \n    \u00d7 2\n tiles. You still have to use two \n    1 \n    \u00d7 1\n\ntiles for the total price of \n    20\n. In the fourth testcase the cheapest way\nis to use \n    1 \n    \u00d7 1\n tiles everywhere. The total cost is \n    6 \n    \u00b7\n    3 = 18\n.\n\n",
        "cf_contest_id": 1359,
        "cf_index": "B",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dp",
            "greedy",
            "implementation",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 1 10 1\r\n.\r\n1 2 10 1\r\n..\r\n2 1 10 1\r\n.\r\n.\r\n3 3 3 7\r\n..*\r\n*..\r\n.*.\r\n",
                "10\r\n1\r\n20\r\n18\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n3 3 2 4\r\n**.\r\n***\r\n***\r\n",
                "2\r\n"
            ]
        ]
    }
]