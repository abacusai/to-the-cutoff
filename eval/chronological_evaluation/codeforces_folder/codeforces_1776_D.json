[
    {
        "name": "Teamwork",
        "description": "As soon as SWERC starts, your experienced \n    3\n-person team immediately\nrealizes that the contest features \n    a\n easy problems, \n    b\n medium\nproblems, and \n    c\n hard problems. Solving a problem will take any of you\n\n    2\n, \n    3\n, or \n    4\n time units, depending on whether the problem is\neasy, medium, or hard. Regardless of the difficulty of the problem, the last\ntime unit spent to solve it has to be spent using your shared computer. You\norganize your efforts so that each of you starts (and ends) solving problems\nat integer time units. Any given problem can be solved by only one contestant;\nit requires a contiguous amount of time (which depends on the difficulty of\nthe problem). None of the \n    3\n of you can solve more than one problem at a\ntime, but you can start solving a new problem immediately after finishing one.\nSimilarly, the shared computer cannot be used by more than one of you at a\ntime, but any of you can start using the computer (to complete the problem\ncurrently being solved) immediately after someone else stops using it. Given\nthat the contest lasts \n    l\n time units, find the maximum number of problems\nthat your team can solve. Additionally, find one way to solve the maximum\nnumber of problems. Input The input has a single line. It contains four\nintegers \n    a\n, \n    b\n, \n    c\n, \n    l\n (\n    0 \n    \u2264 a, b, c, \n    \u2264\n    10^4\n, \n    0 \n    \u2264 l \n    \u2264 10^5\n) \u2014 the number of easy, medium, and hard\nproblems, and the duration of the contest. Output On the first line, print a\nsingle integer \n    n\n \u2014 the maximum number of problems that your team can\nsolve. Then, on the \n    j\n-th of the following \n    n\n lines, print three\nintegers \n    x_j\n, \n    p_j\n, \n    q_j\n (\n    1 \n    \u2264 x \n    \u2264 3\n, \n    0\n    \n    \u2264 p_j < q_j \n    \u2264 l\n) \u2014 the contestant that solves the \n    j\n-th\nproblem, and the start and end time for solving the \n    j\n-th problem\n(measured as time units elapsed from the beginning of the contest). The\ndifference \n    q_j - p_j\n is \n    2\n, \n    3\n, or \n    4\n, depending on the\ndifficulty of the problem. The last \n    n\n lines are to be provided in\nincreasing order of end time: \n    q_1 < q_2 < \n    \u22ef < q_n\n. If there are\nmultiple ways to solve \n    n\n problems, output any of them. Examples Input 2\n1 1 3 Output 2 1 0 2 2 0 3 Input 1 2 3 5 Output 4 1 0 2 2 0 3 3 0 4 1 2 5\nInput 0 1 2 2 Output 0 Note In the first sample, the first contestant solves\nan easy problem between time \n    0\n and time \n    2\n while the second\ncontestant solves a medium problem between time \n    0\n and time \n    3\n. In\nthe second sample, the first contestant solves an easy problem between time\n\n    0\n and time \n    2\n, and then also solves a medium problem between time\n\n    2\n and time \n    5\n. In the meantime, the second contestant solves\nanother medium problem between time \n    0\n and time \n    3\n, while the third\ncontestant solves a hard problem between time \n    0\n and time \n    4\n. In the\nthird sample, the contest only has medium and hard problems, and there is not\nenough time to solve any of them.\n\n",
        "cf_contest_id": 1776,
        "cf_index": "D",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 1 1 3\r\n",
                "2\r\n1 0 2\r\n2 0 3\r\n"
            ],
            [
                "1 2 3 5\r\n",
                "4\r\n1 0 2\r\n2 0 3\r\n3 0 4\r\n1 2 5\r\n"
            ],
            [
                "0 1 2 2\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "0 0 0 0\r\n",
                "0\r\n"
            ],
            [
                "10 30 20 0\r\n",
                "0\r\n"
            ],
            [
                "0 0 0 99999\r\n",
                "0\r\n"
            ],
            [
                "10 10 10 30\r\n",
                "29\r\n1 0 2\r\n2 0 3\r\n3 0 4\r\n1 2 5\r\n2 3 6\r\n3 4 7\r\n1 5 8\r\n2 6 9\r\n3 7 10\r\n1 8 11\r\n2 9 12\r\n3 10 13\r\n2 12 14\r\n1 11 15\r\n2 14 16\r\n3 13 17\r\n2 16 18\r\n1 15 19\r\n2 18 20\r\n3 17 21\r\n2 20 22\r\n1 19 23\r\n2 22 24\r\n3 21 25\r\n2 24 26\r\n1 23 27\r\n2 26 28\r\n3 25 29\r\n2 28 30\r\n"
            ],
            [
                "2 1 1 5\r\n",
                "4\r\n1 0 2\r\n2 0 3\r\n3 0 4\r\n2 3 5\r\n"
            ],
            [
                "3 1 0 4\r\n",
                "3\r\n1 0 2\r\n2 0 3\r\n1 2 4\r\n"
            ],
            [
                "3249 9453 2381 1\r\n",
                "0\r\n"
            ],
            [
                "3349 9013 7651 2\r\n",
                "1\r\n1 0 2\r\n"
            ],
            [
                "9398 0 0 1\r\n",
                "0\r\n"
            ],
            [
                "9398 0 0 2\r\n",
                "1\r\n1 0 2\r\n"
            ],
            [
                "9398 0 0 3\r\n",
                "2\r\n1 0 2\r\n2 1 3\r\n"
            ],
            [
                "9398 0 0 4\r\n",
                "3\r\n1 0 2\r\n2 1 3\r\n1 2 4\r\n"
            ],
            [
                "0 9378 0 2\r\n",
                "0\r\n"
            ],
            [
                "0 9378 0 3\r\n",
                "1\r\n1 0 3\r\n"
            ],
            [
                "0 9378 0 4\r\n",
                "2\r\n1 0 3\r\n2 1 4\r\n"
            ],
            [
                "0 0 9378 3\r\n",
                "0\r\n"
            ],
            [
                "0 0 9378 4\r\n",
                "1\r\n1 0 4\r\n"
            ],
            [
                "0 0 9378 5\r\n",
                "2\r\n1 0 4\r\n2 1 5\r\n"
            ],
            [
                "3 0 2 3\r\n",
                "2\r\n1 0 2\r\n2 1 3\r\n"
            ],
            [
                "3 0 2 4\r\n",
                "3\r\n1 0 2\r\n2 1 3\r\n3 0 4\r\n"
            ],
            [
                "3 0 2 5\r\n",
                "4\r\n1 0 2\r\n2 1 3\r\n3 0 4\r\n2 3 5\r\n"
            ],
            [
                "3 0 2 6\r\n",
                "5\r\n1 0 2\r\n2 1 3\r\n3 0 4\r\n2 3 5\r\n1 2 6\r\n"
            ],
            [
                "0 3 4 2\r\n",
                "0\r\n"
            ],
            [
                "0 3 4 4\r\n",
                "2\r\n1 0 3\r\n2 0 4\r\n"
            ],
            [
                "0 3 4 6\r\n",
                "4\r\n1 0 3\r\n2 0 4\r\n3 1 5\r\n1 3 6\r\n"
            ],
            [
                "3 2 0 4\r\n",
                "3\r\n1 0 2\r\n2 0 3\r\n3 1 4\r\n"
            ],
            [
                "3 2 0 5\r\n",
                "4\r\n1 0 2\r\n2 0 3\r\n3 1 4\r\n2 3 5\r\n"
            ],
            [
                "3 2 0 6\r\n",
                "5\r\n1 0 2\r\n2 0 3\r\n3 1 4\r\n2 3 5\r\n3 4 6\r\n"
            ]
        ]
    }
]