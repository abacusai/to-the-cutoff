[
    {
        "name": "Police Patrol",
        "description": "Imagine that your city is an infinite 2D plane with Cartesian coordinate\nsystem. The only crime-affected road of your city is the x-axis. Currently,\nthere are n criminals along the road. No police station has been built on this\nroad yet, so the mayor wants to build one. As you are going to be in charge of\nthis new police station, the mayor has asked you to choose a suitable position\n(some integer point) for building it. You should choose the best position for\nthe police station, so that you could minimize the total time of your criminal\ncatching mission. Your mission of catching the criminals will operate only\nfrom this station. The new station will have only one patrol car. You will go\nto the criminals by this car, carry them on the car, bring them back to the\npolice station and put them in prison. The patrol car can carry at most m\ncriminals at a time. Note that, the criminals don't know about your mission.\nSo, they will stay where they are instead of running away. Your task is to\nfind the position for the police station, so that total distance you need to\ncover to catch all the criminals will be minimum possible. Note that, you also\ncan built the police station on the positions where one or more criminals\nalready exist. In such a case all these criminals are arrested instantly.\nInput The first line of the input will have two integers n (1 \u2264 n \u2264 10^6) and\nm (1 \u2264 m \u2264 10^6) separated by spaces. The next line will contain n integers\nseparated by spaces. The i^th integer is the position of the i^th criminal on\nthe x-axis. Absolute value of positions will not exceed 10^9. If a criminal\nhas position x, he/she is located in the point (x, 0) of the plane. The\npositions of the criminals will be given in non-decreasing order. Note, that\nthere can be more than one criminal standing at some point of the plane. Note:\nsince the size of the input/output could be very large, don't use slow\ninput/output techniques in your language. For example, do not use input/output\nstreams (cin, cout) in C++. Output Print a single integer, that means the\nminimum possible distance you need to cover to catch all the criminals.\nExamples Input 3 6 1 2 3 Output 4 Input 5 5 -7 -6 -3 -1 1 Output 16 Input 1\n369 0 Output 0 Input 11 2 -375 -108 1336 1453 1598 1892 2804 3732 4291 4588\n4822 Output 18716\n\n",
        "cf_contest_id": 427,
        "cf_index": "E",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation",
            "math",
            "ternary search"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 6\r\n1 2 3\r\n",
                "4\r\n"
            ],
            [
                "5 5\r\n-7 -6 -3 -1 1\r\n",
                "16\r\n"
            ],
            [
                "1 369\r\n0\r\n",
                "0\r\n"
            ],
            [
                "11 2\r\n-375 -108 1336 1453 1598 1892 2804 3732 4291 4588 4822\r\n",
                "18716\r\n"
            ]
        ],
        "private_cases": [
            [
                "45 45\r\n-95 -94 -92 -83 -83 -76 -75 -74 -71 -70 -68 -44 -36 -31 -20 -18 -14 -11 -8 -7 -2 -2 -1 0 1 20 26 27 31 31 43 52 57 58 59 62 63 64 64 64 64 70 73 75 79\r\n",
                "348\r\n"
            ],
            [
                "44 37298\r\n-100 -100 -98 -93 -92 -91 -91 -89 -87 -86 -84 -80 -79 -76 -71 -70 -58 -53 -52 -52 -49 -48 -45 -45 -40 -39 -37 -35 -31 -30 -30 -29 -29 -28 -22 -22 -21 -11 -8 -7 -7 -6 -1 0\r\n",
                "200\r\n"
            ],
            [
                "44 37298\r\n0 0 2 7 8 9 9 11 13 14 16 20 21 24 29 30 42 47 48 48 51 52 55 55 60 61 63 65 69 70 70 71 71 72 78 78 79 89 92 93 93 94 99 100\r\n",
                "200\r\n"
            ],
            [
                "1 1\r\n-724649712\r\n",
                "0\r\n"
            ],
            [
                "1 1000000\r\n330879198\r\n",
                "0\r\n"
            ],
            [
                "10 1\r\n-1000000000 -1000000000 -1000000000 -1000000000 -1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\r\n",
                "20000000000\r\n"
            ],
            [
                "2 1\r\n-1000000000 1000000000\r\n",
                "4000000000\r\n"
            ],
            [
                "4 1\r\n-900000000 -900000000 900000000 900000000\r\n",
                "7200000000\r\n"
            ],
            [
                "6 1\r\n1 2 3 4 5 6\r\n",
                "18\r\n"
            ]
        ]
    }
]