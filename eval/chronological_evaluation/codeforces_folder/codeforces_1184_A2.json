[
    {
        "name": "Heidi Learns Hashing (Medium)",
        "description": "After learning about polynomial hashing, Heidi decided to learn about shift-\nxor hashing. In particular, she came across this interesting problem. Given a\nbitstring \n    y \n    \u2208\n    \n    0,1\n    \n    ^n\n find out the number of different\n\n    k\n (\n    0 \n    \u2264 k < n\n) such that there exists \n    x \n    \u2208\n    \n    0,1\n    \n    ^n\n for which \n    y = x \n    \u2295\n    ^k(x).\n In the\nabove, \n    \u2295\n is the xor operation and \n    ^k\n is the\noperation of shifting a bitstring cyclically to the right \n    k\n times. For\nexample, \n    001 \n    \u2295 111 = 110\n and \n    ^3(00010010111000)\n    = 00000010010111\n. Input The first line contains an integer \n    n\n (\n    1\n    \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n), the length of the bitstring \n    y\n. The\nsecond line contains the bitstring \n    y\n. Output Output a single integer:\nthe number of suitable values of \n    k\n. Example Input 4 1010 Output 3 Note\nIn the first example: \n    1100\n    \u2295\n    ^1(1100) = 1010\n\n\n    1000\n    \u2295\n    ^2(1000) = 1010\n \n    0110\n    \u2295\n    ^3(0110) = 1010\n There is no \n    x\n such that \n    x \n    \u2295 x\n    = 1010\n, hence the answer is \n    3\n.\n\n",
        "cf_contest_id": 1184,
        "cf_index": "A2",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1010\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n0\r\n",
                "1\r\n"
            ],
            [
                "1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "2\r\n00\r\n",
                "2\r\n"
            ],
            [
                "2\r\n10\r\n",
                "0\r\n"
            ],
            [
                "2\r\n01\r\n",
                "0\r\n"
            ],
            [
                "2\r\n11\r\n",
                "1\r\n"
            ],
            [
                "3\r\n000\r\n",
                "3\r\n"
            ],
            [
                "3\r\n100\r\n",
                "0\r\n"
            ],
            [
                "3\r\n010\r\n",
                "0\r\n"
            ],
            [
                "3\r\n110\r\n",
                "2\r\n"
            ],
            [
                "3\r\n001\r\n",
                "0\r\n"
            ],
            [
                "3\r\n101\r\n",
                "2\r\n"
            ],
            [
                "3\r\n011\r\n",
                "2\r\n"
            ],
            [
                "3\r\n111\r\n",
                "0\r\n"
            ],
            [
                "4\r\n0000\r\n",
                "4\r\n"
            ],
            [
                "4\r\n1000\r\n",
                "0\r\n"
            ],
            [
                "4\r\n0100\r\n",
                "0\r\n"
            ],
            [
                "4\r\n1100\r\n",
                "2\r\n"
            ],
            [
                "4\r\n0010\r\n",
                "0\r\n"
            ],
            [
                "4\r\n1010\r\n",
                "3\r\n"
            ],
            [
                "4\r\n0110\r\n",
                "2\r\n"
            ],
            [
                "4\r\n1110\r\n",
                "0\r\n"
            ],
            [
                "4\r\n0001\r\n",
                "0\r\n"
            ],
            [
                "4\r\n1001\r\n",
                "2\r\n"
            ],
            [
                "4\r\n0101\r\n",
                "3\r\n"
            ],
            [
                "4\r\n1101\r\n",
                "0\r\n"
            ],
            [
                "4\r\n0011\r\n",
                "2\r\n"
            ],
            [
                "4\r\n1011\r\n",
                "0\r\n"
            ],
            [
                "4\r\n0111\r\n",
                "0\r\n"
            ],
            [
                "4\r\n1111\r\n",
                "3\r\n"
            ],
            [
                "10\r\n1010100001\r\n",
                "4\r\n"
            ],
            [
                "111\r\n001101111000100111111000010101011110011000010101010001001011000111100111111101000110000011110110100111000100101\r\n",
                "0\r\n"
            ]
        ]
    }
]