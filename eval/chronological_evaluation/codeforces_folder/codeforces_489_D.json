[
    {
        "name": "Unbearable Controversy of Being",
        "description": "Tomash keeps wandering off and getting lost while he is walking along the\nstreets of Berland. It's no surprise! In his home town, for any pair of\nintersections there is exactly one way to walk from one intersection to the\nother one. The capital of Berland is very different! Tomash has noticed that\neven simple cases of ambiguity confuse him. So, when he sees a group of four\ndistinct intersections a, b, c and d, such that there are two paths from a to\nc \u2014 one through b and the other one through d, he calls the group a \"damn\nrhombus\". Note that pairs (a, b), (b, c), (a, d), (d, c) should be directly\nconnected by the roads. Schematically, a damn rhombus is shown on the figure\nbelow: Other roads between any of the intersections don't make the rhombus any\nmore appealing to Tomash, so the four intersections remain a \"damn rhombus\"\nfor him. Given that the capital of Berland has n intersections and m roads and\nall roads are unidirectional and are known in advance, find the number of\n\"damn rhombi\" in the city. When rhombi are compared, the order of\nintersections b and d doesn't matter. Input The first line of the input\ncontains a pair of integers n, m (1 \u2264 n \u2264 3000, 0 \u2264 m \u2264 30000) \u2014 the number of\nintersections and roads, respectively. Next m lines list the roads, one per\nline. Each of the roads is given by a pair of integers ai, bi (1 \u2264 ai, bi \u2264\nn;ai \u2260 bi) \u2014 the number of the intersection it goes out from and the number of\nthe intersection it leads to. Between a pair of intersections there is at most\none road in each of the two directions. It is not guaranteed that you can get\nfrom any intersection to any other one. Output Print the required number of\n\"damn rhombi\". Examples Input 5 4 1 2 2 3 1 4 4 3 Output 1 Input 4 12 1 2 1 3\n1 4 2 1 2 3 2 4 3 1 3 2 3 4 4 1 4 2 4 3 Output 12\n\n",
        "cf_contest_id": 489,
        "cf_index": "D",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "combinatorics",
            "dfs and similar",
            "graphs"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 4\r\n1 2\r\n2 3\r\n1 4\r\n4 3\r\n",
                "1"
            ],
            [
                "4 12\r\n1 2\r\n1 3\r\n1 4\r\n2 1\r\n2 3\r\n2 4\r\n3 1\r\n3 2\r\n3 4\r\n4 1\r\n4 2\r\n4 3\r\n",
                "12"
            ]
        ],
        "private_cases": [
            [
                "1 0\r\n",
                "0"
            ],
            [
                "10 20\r\n6 10\r\n4 2\r\n1 5\r\n6 1\r\n8 9\r\n1 3\r\n2 6\r\n9 7\r\n4 5\r\n3 7\r\n9 2\r\n3 9\r\n4 8\r\n1 10\r\n6 9\r\n8 5\r\n7 6\r\n1 8\r\n8 10\r\n5 6\r\n",
                "3"
            ],
            [
                "3000 0\r\n",
                "0"
            ],
            [
                "1 0\r\n",
                "0"
            ],
            [
                "2 0\r\n",
                "0"
            ],
            [
                "2 1\r\n1 2\r\n",
                "0"
            ],
            [
                "2 2\r\n1 2\r\n2 1\r\n",
                "0"
            ],
            [
                "3 0\r\n",
                "0"
            ],
            [
                "3 6\r\n1 2\r\n1 3\r\n2 1\r\n2 3\r\n3 1\r\n3 2\r\n",
                "0"
            ],
            [
                "4 10\r\n1 2\r\n1 3\r\n1 4\r\n2 1\r\n2 3\r\n2 4\r\n3 1\r\n3 2\r\n3 4\r\n4 1\r\n",
                "5"
            ],
            [
                "4 9\r\n1 2\r\n1 4\r\n2 1\r\n2 3\r\n3 1\r\n3 2\r\n3 4\r\n4 2\r\n4 3\r\n",
                "4"
            ],
            [
                "4 11\r\n1 2\r\n1 3\r\n1 4\r\n2 1\r\n2 4\r\n3 1\r\n3 2\r\n3 4\r\n4 1\r\n4 2\r\n4 3\r\n",
                "8"
            ],
            [
                "5 20\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n2 1\r\n2 3\r\n2 4\r\n2 5\r\n3 1\r\n3 2\r\n3 4\r\n3 5\r\n4 1\r\n4 2\r\n4 3\r\n4 5\r\n5 1\r\n5 2\r\n5 3\r\n5 4\r\n",
                "60"
            ],
            [
                "6 30\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n2 1\r\n2 3\r\n2 4\r\n2 5\r\n2 6\r\n3 1\r\n3 2\r\n3 4\r\n3 5\r\n3 6\r\n4 1\r\n4 2\r\n4 3\r\n4 5\r\n4 6\r\n5 1\r\n5 2\r\n5 3\r\n5 4\r\n5 6\r\n6 1\r\n6 2\r\n6 3\r\n6 4\r\n6 5\r\n",
                "180"
            ],
            [
                "7 42\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n2 1\r\n2 3\r\n2 4\r\n2 5\r\n2 6\r\n2 7\r\n3 1\r\n3 2\r\n3 4\r\n3 5\r\n3 6\r\n3 7\r\n4 1\r\n4 2\r\n4 3\r\n4 5\r\n4 6\r\n4 7\r\n5 1\r\n5 2\r\n5 3\r\n5 4\r\n5 6\r\n5 7\r\n6 1\r\n6 2\r\n6 3\r\n6 4\r\n6 5\r\n6 7\r\n7 1\r\n7 2\r\n7 3\r\n7 4\r\n7 5\r\n7 6\r\n",
                "420"
            ],
            [
                "8 56\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n2 1\r\n2 3\r\n2 4\r\n2 5\r\n2 6\r\n2 7\r\n2 8\r\n3 1\r\n3 2\r\n3 4\r\n3 5\r\n3 6\r\n3 7\r\n3 8\r\n4 1\r\n4 2\r\n4 3\r\n4 5\r\n4 6\r\n4 7\r\n4 8\r\n5 1\r\n5 2\r\n5 3\r\n5 4\r\n5 6\r\n5 7\r\n5 8\r\n6 1\r\n6 2\r\n6 3\r\n6 4\r\n6 5\r\n6 7\r\n6 8\r\n7 1\r\n7 2\r\n7 3\r\n7 4\r\n7 5\r\n7 6\r\n7 8\r\n8 1\r\n8 2\r\n8 3\r\n8 4\r\n8 5\r\n8 6\r\n8 7\r\n",
                "840"
            ],
            [
                "5 10\r\n3 4\r\n4 3\r\n3 2\r\n5 1\r\n2 4\r\n1 4\r\n5 4\r\n5 3\r\n2 3\r\n3 1\r\n",
                "2"
            ]
        ]
    }
]