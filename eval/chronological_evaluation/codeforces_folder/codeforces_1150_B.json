[
    {
        "name": "Tiling Challenge",
        "description": "One day Alice was cleaning up her basement when she noticed something very\ncurious: an infinite set of wooden pieces! Each piece was made of five square\ntiles, with four tiles adjacent to the fifth center tile: By the pieces lay a\nlarge square wooden board. The board is divided into \n    n^2\n cells arranged\ninto \n    n\n rows and \n    n\n columns. Some of the cells are already occupied\nby single tiles stuck to it. The remaining cells are free.Alice started\nwondering whether she could fill the board completely using the pieces she had\nfound. Of course, each piece has to cover exactly five distinct cells of the\nboard, no two pieces can overlap and every piece should fit in the board\nentirely, without some parts laying outside the board borders. The board\nhowever was too large for Alice to do the tiling by hand. Can you help\ndetermine if it's possible to fully tile the board? Input The first line of\nthe input contains a single integer \n    n\n (\n    3 \n    \u2264 n \n    \u2264 50\n) \u2014 the\nsize of the board. The following \n    n\n lines describe the board. The\n\n    i\n-th line (\n    1 \n    \u2264 i \n    \u2264 n\n) contains a single string of length\n\n    n\n. Its \n    j\n-th character (\n    1 \n    \u2264 j \n    \u2264 n\n) is equal to \".\"\nif the cell in the \n    i\n-th row and the \n    j\n-th column is free; it is\nequal to \"#\" if it's occupied. You can assume that the board contains at least\none free cell. Output Output YES if the board can be tiled by Alice's pieces,\nor NO otherwise. You can print each letter in any case (upper or lower).\nExamples Input 3 #.# ... #.# Output YES Input 4 ##.# #... #### ##.# Output NO\nInput 5 #.### ....# #.... ###.# ##### Output YES Input 5 #.### ....# #....\n....# #..## Output NO Note The following sketches show the example boards and\ntheir tilings if such tilings exist:\n\n",
        "cf_contest_id": 1150,
        "cf_index": "B",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n#.#\r\n...\r\n#.#\r\n",
                "YES\r\n"
            ],
            [
                "4\r\n##.#\r\n#...\r\n####\r\n##.#\r\n",
                "NO\r\n"
            ],
            [
                "5\r\n#.###\r\n....#\r\n#....\r\n###.#\r\n#####\r\n",
                "YES\r\n"
            ],
            [
                "5\r\n#.###\r\n....#\r\n#....\r\n....#\r\n#..##\r\n",
                "NO\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n###\r\n#.#\r\n###\r\n",
                "NO\r\n"
            ],
            [
                "5\r\n#####\r\n.####\r\n..###\r\n.####\r\n#####\r\n",
                "NO\r\n"
            ],
            [
                "5\r\n#####\r\n#####\r\n#####\r\n####.\r\n###..\r\n",
                "NO\r\n"
            ],
            [
                "4\r\n####\r\n###.\r\n##..\r\n.##.\r\n",
                "NO\r\n"
            ],
            [
                "3\r\n##.\r\n###\r\n###\r\n",
                "NO\r\n"
            ],
            [
                "3\r\n.##\r\n..#\r\n.##\r\n",
                "NO\r\n"
            ],
            [
                "3\r\n..#\r\n.##\r\n###\r\n",
                "NO\r\n"
            ],
            [
                "3\r\n###\r\n##.\r\n#..\r\n",
                "NO\r\n"
            ],
            [
                "3\r\n##.\r\n#..\r\n##.\r\n",
                "NO\r\n"
            ],
            [
                "3\r\n.##\r\n###\r\n###\r\n",
                "NO\r\n"
            ],
            [
                "3\r\n.#.\r\n..#\r\n.##\r\n",
                "NO\r\n"
            ],
            [
                "3\r\n###\r\n###\r\n##.\r\n",
                "NO\r\n"
            ],
            [
                "17\r\n#################\r\n#################\r\n#################\r\n#################\r\n#################\r\n#################\r\n#################\r\n#################\r\n#################\r\n#################\r\n#################\r\n#################\r\n#################\r\n#################\r\n#################\r\n#################\r\n##.##.##.##.##.##\r\n",
                "NO\r\n"
            ],
            [
                "3\r\n##.\r\n#..\r\n.#.\r\n",
                "NO\r\n"
            ],
            [
                "4\r\n####\r\n####\r\n####\r\n##.#\r\n",
                "NO\r\n"
            ],
            [
                "3\r\n###\r\n###\r\n#.#\r\n",
                "NO\r\n"
            ]
        ]
    }
]