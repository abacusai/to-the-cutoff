[
    {
        "name": "Banners",
        "description": "All modern mobile applications are divided into free and paid. Even a single\napplication developers often release two versions: a paid version without ads\nand a free version with ads. Suppose that a paid version of the app costs p (p\nis an integer) rubles, and the free version of the application contains c ad\nbanners. Each user can be described by two integers: ai \u2014 the number of rubles\nthis user is willing to pay for the paid version of the application, and bi \u2014\nthe number of banners he is willing to tolerate in the free version. The\nbehavior of each member shall be considered strictly deterministic: if for\nuser i, value bi is at least c, then he uses the free version, otherwise, if\nvalue ai is at least p, then he buys the paid version without advertising,\notherwise the user simply does not use the application. Each user of the free\nversion brings the profit of c \u00d7 w rubles. Each user of the paid version\nbrings the profit of p rubles. Your task is to help the application developers\nto select the optimal parameters p and c. Namely, knowing all the\ncharacteristics of users, for each value of c from 0 to (max bi) + 1 you need\nto determine the maximum profit from the application and the corresponding\nparameter p. Input The first line contains two integers n and w (1 \u2264 n \u2264 10^5;\n1 \u2264 w \u2264 10^5) \u2014 the number of users and the profit from a single banner. Each\nof the next n lines contains two integers ai and bi (0 \u2264 ai, bi \u2264 10^5) \u2014 the\ncharacteristics of the i-th user. Output Print (max bi) + 2 lines, in the i-th\nline print two integers: pay \u2014 the maximum gained profit at c = i - 1, p (0 \u2264\np \u2264 10^9) \u2014 the corresponding optimal app cost. If there are multiple optimal\nsolutions, print any of them. Examples Input 2 1 2 0 0 2 Output 0 3 3 2 4 2 2\n2 Input 3 1 3 1 2 2 1 3 Output 0 4 3 4 7 3 7 2 4 2\n\n",
        "cf_contest_id": 436,
        "cf_index": "F",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "dp"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "2 1\r\n2 0\r\n0 2\r\n",
                "0 0\r\n3 2\r\n4 2\r\n2 2\r\n"
            ],
            [
                "3 1\r\n3 1\r\n2 2\r\n1 3\r\n",
                "0 0\r\n3 0\r\n7 3\r\n7 2\r\n4 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 1\r\n0 5\r\n4 0\r\n1 2\r\n4 4\r\n1 0\r\n",
                "0 0\r\n7 4\r\n10 4\r\n10 4\r\n12 4\r\n13 4\r\n8 4\r\n"
            ],
            [
                "4 1\r\n0 0\r\n1 0\r\n2 1\r\n2 1\r\n",
                "0 0\r\n3 1\r\n4 2\r\n"
            ],
            [
                "1 1\r\n1 1\r\n",
                "0 0\r\n1 0\r\n1 1\r\n"
            ],
            [
                "1 1\r\n2 1\r\n",
                "0 0\r\n1 0\r\n2 2\r\n"
            ],
            [
                "1 3\r\n2 1\r\n",
                "0 0\r\n3 0\r\n2 2\r\n"
            ]
        ]
    }
]