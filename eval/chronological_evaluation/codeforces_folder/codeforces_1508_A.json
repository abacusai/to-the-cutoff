[
    {
        "name": "Binary Literature",
        "description": "A bitstring is a string that contains only the characters 0 and 1. Koyomi\nKanou is working hard towards her dream of becoming a writer. To practice, she\ndecided to participate in the Binary Novel Writing Contest. The writing prompt\nfor the contest consists of three bitstrings of length \n    2n\n. A valid novel\nfor the contest is a bitstring of length at most \n    3n\n that contains at\nleast two of the three given strings as subsequences. Koyomi has just received\nthe three prompt strings from the contest organizers. Help her write a valid\nnovel for the contest. A string \n    a\n is a subsequence of a string \n    b\n\nif \n    a\n can be obtained from \n    b\n by deletion of several (possibly,\nzero) characters. Input The first line contains a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. The first line of each test\ncase contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n). Each of\nthe following three lines contains a bitstring of length \n    2n\n. It is\nguaranteed that these three strings are pairwise distinct. It is guaranteed\nthat the sum of \n    n\n across all test cases does not exceed \n    10^5\n.\nOutput For each test case, print a single line containing a bitstring of\nlength at most \n    3n\n that has at least two of the given bitstrings as\nsubsequences. It can be proven that under the constraints of the problem, such\na bitstring always exists. If there are multiple possible answers, you may\noutput any of them. Example Input 2 1 00 11 01 3 011001 111010 010001 Output\n010 011001010 Note In the first test case, the bitstrings 00 and 01 are\nsubsequences of the output string: 010 and 010. Note that 11 is not a\nsubsequence of the output string, but this is not required. In the second test\ncase all three input strings are subsequences of the output string: 011001010,\n011001010 and 011001010.\n\n",
        "cf_contest_id": 1508,
        "cf_index": "A",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "implementation",
            "strings",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n1\r\n00\r\n11\r\n01\r\n3\r\n011001\r\n111010\r\n010001\r\n",
                "010\r\n011001010\r\n"
            ]
        ],
        "private_cases": []
    }
]