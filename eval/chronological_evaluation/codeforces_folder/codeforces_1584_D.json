[
    {
        "name": "Guess the Permutation",
        "description": "This is an interactive problem. Jury initially had a sequence \n    a\n of\nlength \n    n\n, such that \n    a_i = i\n. The jury chose three integers\n\n    i\n, \n    j\n, \n    k\n, such that \n    1 \n    \u2264 i < j < k \n    \u2264 n\n, \n    j -\n    i > 1\n. After that, Jury reversed subsegments \n    [i, j - 1]\n and \n    [j,\n    k]\n of the sequence \n    a\n. Reversing a subsegment \n    [l, r]\n of the\nsequence \n    a\n means reversing the order of elements \n    a_l, a_l+1,\n    \n    \u2026, a_r\n in the sequence, i. e. \n    a_l\n is swapped with \n    a_r\n,\n\n    a_l+1\n is swapped with \n    a_r-1\n, etc. You are given the number\n\n    n\n and you should find \n    i\n, \n    j\n, \n    k\n after asking some\nquestions. In one question you can choose two integers \n    l\n and \n    r\n\n(\n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 n\n) and ask the number of inversions on the\nsubsegment \n    [l, r]\n of the sequence \n    a\n. You will be given the number\nof pairs \n    (i, j)\n such that \n    l \n    \u2264 i < j \n    \u2264 r\n, and \n    a_i >\n    a_j\n. Find the chosen numbers \n    i\n, \n    j\n, \n    k\n after at most\n\n    40\n questions. The numbers \n    i\n, \n    j\n, and \n    k\n are fixed before\nthe start of your program and do not depend on your queries. Input Each test\nconsists of multiple test cases. The first line contains a single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test cases. Description\nof the test cases follows. The single line of each test case contains a single\ninteger \n    n\n (\n    4 \n    \u2264 n \n    \u2264 10^9\n). After reading it you should\nstart an interaction process by asking questions for that test case. After\ngiving an answer you should: Terminate your program if that is the last test\ncase. Proceed to the next test case otherwise. Interaction To ask number of\ninversions on a subsegment \n    [l, r]\n, print \"? l r\", where (\n    1 \n    \u2264 l\n    \n    \u2264 r \n    \u2264 n\n). You can ask at most \n    40\n questions in each test\ncase. As a result you should read a single integer \n    x\n. If \n    x = -1\n,\nyour program made an invalid question or you exceeded the number of questions\nfor that test case. Your program should terminate immediately (otherwise it\ncan get any verdict instead of \"Wrong Answer\"). Otherwise \n    x\n is equal to\nthe number of inversions on the subsegment \n    [l, r]\n of the sequence\n\n    a\n. To give the answer, print \"! i j k\", where \n    i\n, \n    j\n, \n    k\n\nare the numbers you found. You should continue solving the next test cases or\nterminate the program after that. After printing a question or an answer do\nnot forget to print the end of line and flush the output. Otherwise, you will\nget an \"Idleness limit exceeded\" verdict. To do this, use: fflush(stdout) or\ncout.flush() in C++; System.out.flush() in Java; flush(output) in Pascal;\nstdout.flush() in Python; See the documentation for other languages.Hacks To\nmake a hack, use the following format: The first line contains a single\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test cases. Each\nof the next \n    t\n lines contains four integers \n    n\n, \n    i\n, \n    j\n,\n\n    k\n (\n    4 \n    \u2264 n \n    \u2264 10^9\n, \n    1 \n    \u2264 i < j < k \n    \u2264 n\n, \n    j\n    - i > 1\n). Example Input 2 5 4 3 3 5 2 2 1 Output ? 1 5 ? 2 5 ? 3 5 ! 1 3 5\n? 1 5 ? 2 5 ? 3 5 ! 2 4 5 Note In the first test case, \n    i = 1\n, \n    j =\n    3\n, \n    k = 5\n, so the sequence \n    a\n is \n    [2, 1, 5, 4, 3]\n. In the\nsecond test case, \n    i = 2\n, \n    j = 4\n, \n    k = 5\n, so the sequence\n\n    a\n is \n    [1, 3, 2, 5, 4]\n.\n\n",
        "cf_contest_id": 1584,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "combinatorics",
            "interactive",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n5 1 3 5\r\n5 2 4 5\r\n",
                "1 3 5\r\n2 4 5\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n6 1 3 4\r\n6 1 3 5\r\n6 1 3 6\r\n6 1 4 5\r\n6 1 4 6\r\n6 1 5 6\r\n6 2 4 5\r\n6 2 4 6\r\n6 2 5 6\r\n6 3 5 6\r\n",
                "1 3 4\r\n1 3 5\r\n1 3 6\r\n1 4 5\r\n1 4 6\r\n1 5 6\r\n2 4 5\r\n2 4 6\r\n2 5 6\r\n3 5 6\r\n"
            ],
            [
                "35\r\n8 1 3 4\r\n8 1 3 5\r\n8 1 3 6\r\n8 1 3 7\r\n8 1 3 8\r\n8 1 4 5\r\n8 1 4 6\r\n8 1 4 7\r\n8 1 4 8\r\n8 1 5 6\r\n8 1 5 7\r\n8 1 5 8\r\n8 1 6 7\r\n8 1 6 8\r\n8 1 7 8\r\n8 2 4 5\r\n8 2 4 6\r\n8 2 4 7\r\n8 2 4 8\r\n8 2 5 6\r\n8 2 5 7\r\n8 2 5 8\r\n8 2 6 7\r\n8 2 6 8\r\n8 2 7 8\r\n8 3 5 6\r\n8 3 5 7\r\n8 3 5 8\r\n8 3 6 7\r\n8 3 6 8\r\n8 3 7 8\r\n8 4 6 7\r\n8 4 6 8\r\n8 4 7 8\r\n8 5 7 8\r\n",
                "1 3 4\r\n1 3 5\r\n1 3 6\r\n1 3 7\r\n1 3 8\r\n1 4 5\r\n1 4 6\r\n1 4 7\r\n1 4 8\r\n1 5 6\r\n1 5 7\r\n1 5 8\r\n1 6 7\r\n1 6 8\r\n1 7 8\r\n2 4 5\r\n2 4 6\r\n2 4 7\r\n2 4 8\r\n2 5 6\r\n2 5 7\r\n2 5 8\r\n2 6 7\r\n2 6 8\r\n2 7 8\r\n3 5 6\r\n3 5 7\r\n3 5 8\r\n3 6 7\r\n3 6 8\r\n3 7 8\r\n4 6 7\r\n4 6 8\r\n4 7 8\r\n5 7 8\r\n"
            ],
            [
                "20\r\n7 1 3 4\r\n7 1 3 5\r\n7 1 3 6\r\n7 1 3 7\r\n7 1 4 5\r\n7 1 4 6\r\n7 1 4 7\r\n7 1 5 6\r\n7 1 5 7\r\n7 1 6 7\r\n7 2 4 5\r\n7 2 4 6\r\n7 2 4 7\r\n7 2 5 6\r\n7 2 5 7\r\n7 2 6 7\r\n7 3 5 6\r\n7 3 5 7\r\n7 3 6 7\r\n7 4 6 7\r\n",
                "1 3 4\r\n1 3 5\r\n1 3 6\r\n1 3 7\r\n1 4 5\r\n1 4 6\r\n1 4 7\r\n1 5 6\r\n1 5 7\r\n1 6 7\r\n2 4 5\r\n2 4 6\r\n2 4 7\r\n2 5 6\r\n2 5 7\r\n2 6 7\r\n3 5 6\r\n3 5 7\r\n3 6 7\r\n4 6 7\r\n"
            ],
            [
                "56\r\n9 1 3 4\r\n9 1 3 5\r\n9 1 3 6\r\n9 1 3 7\r\n9 1 3 8\r\n9 1 3 9\r\n9 1 4 5\r\n9 1 4 6\r\n9 1 4 7\r\n9 1 4 8\r\n9 1 4 9\r\n9 1 5 6\r\n9 1 5 7\r\n9 1 5 8\r\n9 1 5 9\r\n9 1 6 7\r\n9 1 6 8\r\n9 1 6 9\r\n9 1 7 8\r\n9 1 7 9\r\n9 1 8 9\r\n9 2 4 5\r\n9 2 4 6\r\n9 2 4 7\r\n9 2 4 8\r\n9 2 4 9\r\n9 2 5 6\r\n9 2 5 7\r\n9 2 5 8\r\n9 2 5 9\r\n9 2 6 7\r\n9 2 6 8\r\n9 2 6 9\r\n9 2 7 8\r\n9 2 7 9\r\n9 2 8 9\r\n9 3 5 6\r\n9 3 5 7\r\n9 3 5 8\r\n9 3 5 9\r\n9 3 6 7\r\n9 3 6 8\r\n9 3 6 9\r\n9 3 7 8\r\n9 3 7 9\r\n9 3 8 9\r\n9 4 6 7\r\n9 4 6 8\r\n9 4 6 9\r\n9 4 7 8\r\n9 4 7 9\r\n9 4 8 9\r\n9 5 7 8\r\n9 5 7 9\r\n9 5 8 9\r\n9 6 8 9\r\n",
                "1 3 4\r\n1 3 5\r\n1 3 6\r\n1 3 7\r\n1 3 8\r\n1 3 9\r\n1 4 5\r\n1 4 6\r\n1 4 7\r\n1 4 8\r\n1 4 9\r\n1 5 6\r\n1 5 7\r\n1 5 8\r\n1 5 9\r\n1 6 7\r\n1 6 8\r\n1 6 9\r\n1 7 8\r\n1 7 9\r\n1 8 9\r\n2 4 5\r\n2 4 6\r\n2 4 7\r\n2 4 8\r\n2 4 9\r\n2 5 6\r\n2 5 7\r\n2 5 8\r\n2 5 9\r\n2 6 7\r\n2 6 8\r\n2 6 9\r\n2 7 8\r\n2 7 9\r\n2 8 9\r\n3 5 6\r\n3 5 7\r\n3 5 8\r\n3 5 9\r\n3 6 7\r\n3 6 8\r\n3 6 9\r\n3 7 8\r\n3 7 9\r\n3 8 9\r\n4 6 7\r\n4 6 8\r\n4 6 9\r\n4 7 8\r\n4 7 9\r\n4 8 9\r\n5 7 8\r\n5 7 9\r\n5 8 9\r\n6 8 9\r\n"
            ],
            [
                "1\r\n1000000000 1 4 6\r\n",
                "1 4 6\r\n"
            ]
        ]
    }
]