[
    {
        "name": "My Beautiful Madness",
        "description": "You are given a tree. We will consider simple paths on it. Let's denote path\nbetween vertices \n    a\n and \n    b\n as \n    (a, b)\n. Let \n    d\n-neighborhood\nof a path be a set of vertices of the tree located at a distance \n    \u2264\n    d\n from at least one vertex of the path (for example, \n    0\n-neighborhood\nof a path is a path itself). Let \n    P\n be a multiset of the tree paths.\nInitially, it is empty. You are asked to maintain the following queries:\n\n    1\n \n    u\n \n    v\n \u2014 add path \n    (u, v)\n into \n    P\n (\n    1 \n    \u2264 u, v\n    \n    \u2264 n\n). \n    2\n \n    u\n \n    v\n \u2014 delete path \n    (u, v)\n from \n    P\n\n(\n    1 \n    \u2264 u, v \n    \u2264 n\n). Notice that \n    (u, v)\n equals to \n    (v,\n    u)\n. For example, if \n    P = \n    \n    (1, 2), (1, 2)\n, than after query\n\n    2\n \n    2\n \n    1\n, \n    P = \n    \n    (1, 2)\n. \n    3\n \n    d\n \u2014 if\nintersection of all \n    d\n-neighborhoods of paths from \n    P\n is not empty\noutput \"Yes\", otherwise output \"No\" (\n    0 \n    \u2264 d \n    \u2264 n - 1\n). Input The\nfirst line contains two integers \n    n\n and \n    q\n \u2014 the number of vertices\nin the tree and the number of queries, accordingly (\n    1 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n, \n    2 \n    \u2264 q \n    \u2264 2 \n    \u00b7 10^5\n). Each of the\nfollowing \n    n - 1\n lines contains two integers \n    x_i\n and \n    y_i\n \u2014\nindices of vertices connected by \n    i\n-th edge (\n    1 \n    \u2264 x_i, y_i \n    \u2264\n    n\n). The following \n    q\n lines contain queries in the format described in\nthe statement. It's guaranteed that: for a query \n    2\n \n    u\n \n    v\n, path\n\n    (u, v)\n (or \n    (v, u)\n) is present in \n    P\n, for a query \n    3\n\n\n    d\n, \n    P \n    \u2260\n    \u2205\n, there is at least one query of the\nthird type. Output For each query of the third type output answer on a new\nline. Examples Input 1 4 1 1 1 1 1 1 2 1 1 3 0 Output Yes Input 5 3 1 2 1 3 3\n4 4 5 1 1 2 1 5 5 3 1 Output No Input 10 6 1 2 2 3 3 4 4 7 7 10 2 5 5 6 6 8 8\n9 1 9 9 1 9 8 1 8 5 3 0 3 1 3 2 Output No Yes Yes\n\n",
        "cf_contest_id": 1464,
        "cf_index": "F",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "1 4\r\n1 1 1\r\n1 1 1\r\n2 1 1\r\n3 0\r\n",
                "Yes\r\n"
            ],
            [
                "5 3\r\n1 2\r\n1 3\r\n3 4\r\n4 5\r\n1 1 2\r\n1 5 5\r\n3 1\r\n",
                "No\r\n"
            ],
            [
                "10 6\r\n1 2\r\n2 3\r\n3 4\r\n4 7\r\n7 10\r\n2 5\r\n5 6\r\n6 8\r\n8 9\r\n1 9 9\r\n1 9 8\r\n1 8 5\r\n3 0\r\n3 1\r\n3 2\r\n",
                "No\r\nYes\r\nYes\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 2\r\n2 1\r\n1 2 2\r\n3 0\r\n",
                "Yes\r\n"
            ],
            [
                "10 3\r\n1 2\r\n2 7\r\n1 3\r\n1 4\r\n4 9\r\n4 5\r\n4 10\r\n1 6\r\n1 8\r\n1 7 7\r\n1 3 3\r\n3 1\r\n",
                "No\r\n"
            ],
            [
                "10 4\r\n1 2\r\n2 5\r\n5 7\r\n1 8\r\n8 10\r\n1 9\r\n1 3\r\n3 4\r\n4 6\r\n1 8 10\r\n1 6 4\r\n3 1\r\n3 2\r\n",
                "No\r\nYes\r\n"
            ],
            [
                "10 10\r\n10 5\r\n1 3\r\n1 4\r\n8 1\r\n7 3\r\n2 1\r\n10 3\r\n9 1\r\n6 3\r\n1 1 10\r\n3 0\r\n1 8 10\r\n3 0\r\n3 0\r\n2 8 10\r\n1 8 8\r\n1 7 10\r\n1 9 5\r\n1 10 9\r\n",
                "Yes\r\nYes\r\nYes\r\n"
            ],
            [
                "10 10\r\n4 10\r\n3 4\r\n1 4\r\n7 9\r\n8 3\r\n6 1\r\n6 5\r\n2 8\r\n9 6\r\n1 5 3\r\n3 0\r\n1 10 9\r\n1 8 8\r\n2 3 5\r\n3 0\r\n1 6 1\r\n2 8 8\r\n1 2 3\r\n2 9 10\r\n",
                "Yes\r\nNo\r\n"
            ],
            [
                "10 10\r\n3 8\r\n8 1\r\n3 2\r\n3 6\r\n6 9\r\n2 4\r\n3 10\r\n10 7\r\n5 9\r\n1 4 9\r\n3 0\r\n1 6 8\r\n3 0\r\n2 6 8\r\n2 4 9\r\n1 8 6\r\n2 6 8\r\n1 10 10\r\n3 0\r\n",
                "Yes\r\nYes\r\nYes\r\n"
            ],
            [
                "20 20\r\n5 8\r\n19 3\r\n6 13\r\n6 15\r\n13 5\r\n14 9\r\n7 10\r\n5 3\r\n1 20\r\n17 14\r\n7 1\r\n13 2\r\n5 16\r\n12 18\r\n17 11\r\n14 13\r\n1 18\r\n13 1\r\n4 5\r\n1 19 19\r\n3 0\r\n1 17 19\r\n3 0\r\n2 19 19\r\n2 17 19\r\n1 11 16\r\n1 19 7\r\n1 15 7\r\n2 16 11\r\n2 7 15\r\n1 19 9\r\n3 0\r\n1 5 1\r\n3 1\r\n1 17 12\r\n3 0\r\n1 15 19\r\n2 7 19\r\n2 19 15\r\n",
                "Yes\r\nYes\r\nYes\r\nYes\r\nYes\r\n"
            ],
            [
                "20 20\r\n17 18\r\n7 15\r\n19 1\r\n13 4\r\n13 10\r\n10 8\r\n20 16\r\n17 8\r\n20 19\r\n9 20\r\n8 19\r\n11 2\r\n19 5\r\n11 1\r\n12 1\r\n7 19\r\n11 3\r\n20 6\r\n8 14\r\n1 16 20\r\n3 0\r\n1 15 15\r\n1 17 9\r\n1 16 1\r\n2 17 9\r\n1 13 13\r\n3 0\r\n1 13 1\r\n1 2 11\r\n1 12 2\r\n2 13 13\r\n1 18 6\r\n3 0\r\n2 18 6\r\n2 15 15\r\n1 19 18\r\n2 16 20\r\n2 19 18\r\n3 0\r\n",
                "Yes\r\nNo\r\nNo\r\nNo\r\n"
            ],
            [
                "20 20\r\n13 17\r\n6 15\r\n19 4\r\n3 20\r\n10 2\r\n5 15\r\n15 8\r\n5 12\r\n15 4\r\n8 18\r\n4 16\r\n14 9\r\n10 8\r\n13 15\r\n3 16\r\n7 3\r\n14 6\r\n4 1\r\n12 11\r\n1 14 3\r\n3 1\r\n2 3 14\r\n1 14 1\r\n2 1 14\r\n1 17 11\r\n3 0\r\n3 1\r\n1 2 18\r\n1 12 12\r\n1 3 3\r\n1 14 19\r\n1 3 20\r\n3 0\r\n1 13 16\r\n3 0\r\n3 0\r\n2 12 12\r\n2 11 17\r\n2 18 2\r\n",
                "Yes\r\nYes\r\nYes\r\nNo\r\nNo\r\nNo\r\n"
            ]
        ]
    }
]