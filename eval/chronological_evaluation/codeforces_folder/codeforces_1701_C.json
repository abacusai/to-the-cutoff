[
    {
        "name": "Schedule Management",
        "description": "There are \n    n\n workers and \n    m\n tasks. The workers are numbered from\n\n    1\n to \n    n\n. Each task \n    i\n has a value \n    a_i\n \u2014 the index of\nworker who is proficient in this task. Every task should have a worker\nassigned to it. If a worker is proficient in the task, they complete it in\n\n    1\n hour. Otherwise, it takes them \n    2\n hours. The workers work in\nparallel, independently of each other. Each worker can only work on one task\nat once. Assign the workers to all tasks in such a way that the tasks are\ncompleted as early as possible. The work starts at time \n    0\n. What's the\nminimum time all tasks can be completed by? Input The first line contains a\nsingle integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of testcases.\nThe first line of each testcase contains two integers \n    n\n and \n    m\n\n(\n    1 \n    \u2264 n \n    \u2264 m \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of workers and the\nnumber of tasks. The second line contains \n    m\n integers \n    a_1, a_2,\n    \n    \u2026, a_m\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n) \u2014 the index of the worker\nproficient in the \n    i\n-th task. The sum of \n    m\n over all testcases\ndoesn't exceed \n    2 \n    \u00b7 10^5\n. Output For each testcase, print a single\ninteger \u2014 the minimum time all tasks can be completed by. Example Input 4 2 4\n1 2 1 2 2 4 1 1 1 1 5 5 5 1 3 2 4 1 1 1 Output 2 3 1 1 Note In the first\ntestcase, the first worker works on tasks \n    1\n and \n    3\n, and the second\nworker works on tasks \n    2\n and \n    4\n. Since they both are proficient in\nthe corresponding tasks, they take \n    1\n hour on each. Both of them complete\n\n    2\n tasks in \n    2\n hours. Thus, all tasks are completed by \n    2\n\nhours. In the second testcase, it's optimal to assign the first worker to\ntasks \n    1, 2\n and \n    3\n and the second worker to task \n    4\n. The first\nworker spends \n    3\n hours, the second worker spends \n    2\n hours (since\nthey are not proficient in the taken task). In the third example, each worker\ncan be assigned to the task they are proficient at. Thus, each of them\ncomplete their task in \n    1\n hour.\n\n",
        "cf_contest_id": 1701,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "greedy",
            "implementation",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2 4\r\n1 2 1 2\r\n2 4\r\n1 1 1 1\r\n5 5\r\n5 1 3 2 4\r\n1 1\r\n1\r\n",
                "2\r\n3\r\n1\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]