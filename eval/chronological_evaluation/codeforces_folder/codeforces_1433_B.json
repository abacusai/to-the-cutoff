[
    {
        "name": "Yet Another Bookshelf",
        "description": "There is a bookshelf which can fit \n    n\n books. The \n    i\n-th position of\nbookshelf is \n    a_i = 1\n if there is a book on this position and \n    a_i =\n    0\n otherwise. It is guaranteed that there is at least one book on the\nbookshelf. In one move, you can choose some contiguous segment \n    [l; r]\n\nconsisting of books (i.e. for each \n    i\n from \n    l\n to \n    r\n the\ncondition \n    a_i = 1\n holds) and: Shift it to the right by \n    1\n: move the\nbook at index \n    i\n to \n    i + 1\n for all \n    l \n    \u2264 i \n    \u2264 r\n. This\nmove can be done only if \n    r+1 \n    \u2264 n\n and there is no book at the\nposition \n    r+1\n. Shift it to the left by \n    1\n: move the book at index\n\n    i\n to \n    i-1\n for all \n    l \n    \u2264 i \n    \u2264 r\n. This move can be done\nonly if \n    l-1 \n    \u2265 1\n and there is no book at the position \n    l-1\n. Your\ntask is to find the minimum number of moves required to collect all the books\non the shelf as a contiguous (consecutive) segment (i.e. the segment without\nany gaps). For example, for \n    a = [0, 0, 1, 0, 1]\n there is a gap between\nbooks (\n    a_4 = 0\n when \n    a_3 = 1\n and \n    a_5 = 1\n), for \n    a = [1, 1,\n    0]\n there are no gaps between books and for \n    a = [0, 0,0]\n there are\nalso no gaps between books. You have to answer \n    t\n independent test cases.\nInput The first line of the input contains one integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 200\n) \u2014 the number of test cases. Then \n    t\n test cases follow. The\nfirst line of the test case contains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    50\n) \u2014 the number of places on a bookshelf. The second line of the test case\ncontains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264\n    1\n), where \n    a_i\n is \n    1\n if there is a book at this position and\n\n    0\n otherwise. It is guaranteed that there is at least one book on the\nbookshelf. Output For each test case, print one integer: the minimum number of\nmoves required to collect all the books on the shelf as a contiguous\n(consecutive) segment (i.e. the segment without gaps). Example Input 5 7 0 0 1\n0 1 0 1 3 1 0 0 5 1 1 0 0 1 6 1 0 0 0 0 1 5 1 1 0 1 1 Output 2 0 2 4 1 Note In\nthe first test case of the example, you can shift the segment \n    [3; 3]\n to\nthe right and the segment \n    [4; 5]\n to the right. After all moves, the\nbooks form the contiguous segment \n    [5; 7]\n. So the answer is \n    2\n. In\nthe second test case of the example, you have nothing to do, all the books on\nthe bookshelf form the contiguous segment already. In the third test case of\nthe example, you can shift the segment \n    [5; 5]\n to the left and then the\nsegment \n    [4; 4]\n to the left again. After all moves, the books form the\ncontiguous segment \n    [1; 3]\n. So the answer is \n    2\n. In the fourth test\ncase of the example, you can shift the segment \n    [1; 1]\n to the right, the\nsegment \n    [2; 2]\n to the right, the segment \n    [6; 6]\n to the left and\nthen the segment \n    [5; 5]\n to the left. After all moves, the books form the\ncontiguous segment \n    [3; 4]\n. So the answer is \n    4\n. In the fifth test\ncase of the example, you can shift the segment \n    [1; 2]\n to the right.\nAfter all moves, the books form the contiguous segment \n    [2; 5]\n. So the\nanswer is \n    1\n.\n\n",
        "cf_contest_id": 1433,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n7\r\n0 0 1 0 1 0 1\r\n3\r\n1 0 0\r\n5\r\n1 1 0 0 1\r\n6\r\n1 0 0 0 0 1\r\n5\r\n1 1 0 1 1\r\n",
                "2\r\n0\r\n2\r\n4\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n8\r\n0 0 0 1 1 1 1 1\r\n",
                "0\r\n"
            ]
        ]
    }
]