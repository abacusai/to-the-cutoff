[
    {
        "name": "New Year and Finding Roots",
        "description": "This is an interactive problem. In the interaction section below you will find\nthe information about flushing the output. The New Year tree of height h is a\nperfect binary tree with vertices numbered 1 through 2^h - 1 in some order. In\nthis problem we assume that h is at least 2. The drawing below shows one\nexample New Year tree of height 3: Polar bears love decorating the New Year\ntree and Limak is no exception. To decorate the tree, he must first find its\nroot, i.e. a vertex with exactly two neighbours (assuming that h \u2265 2). It\nwon't be easy because Limak is a little bear and he doesn't even see the whole\ntree. Can you help him? There are t testcases. In each testcase, you should\nfirst read h from the input. Then you can ask at most 16 questions of format\n\"? x\" (without quotes), where x is an integer between 1 and 2^h - 1,\ninclusive. As a reply you will get the list of neighbours of vertex x (more\ndetails in the \"Interaction\" section below). For example, for a tree on the\ndrawing above after asking \"? 1\" you would get a response with 3 neighbours:\n4, 5 and 7. Your goal is to find the index of the root y and print it in the\nformat \"! y\". You will be able to read h for a next testcase only after\nprinting the answer in a previous testcase and flushing the output. Each tree\nis fixed from the beginning and it doesn't change during your questions. Input\nThe first line of the input contains a single integer t (1 \u2264 t \u2264 500) \u2014 the\nnumber of testcases. At the beginning of each testcase you should read from\nthe input a single integer h (2 \u2264 h \u2264 7) \u2014 the height of the tree. You can't\nread the value of h in a next testcase until you answer a previous testcase.\nInteraction To ask a question about neighbours of vertex x, print \"? x\"\n(without quotes) on a separate line. Note, you must print an end-of-line\ncharacter after the last character of the line and flush your output to get a\nresponse. The response will consist of two lines. The first line will contain\na single integer k (1 \u2264 k \u2264 3) \u2014 the number of neighbours of vertex x. The\nsecond line will contain k distinct integers t1, ..., tk (1 \u2264 t1 < ... < tk \u2264\n2^h - 1) \u2014 indices of neighbours of vertex x, gives in the increasing order.\nAfter asking at most 16 questions you have to say y \u2014 the index of the root.\nPrint \"! y\" (without quotes) and an end-of-line character, and flush the\noutput. Each tree is fixed from the beginning and it doesn't change during\nyour questions. You can get Idleness Limit Exceeded if you don't print\nanything or if you forget to flush the output. To flush you can use (just\nprinting a query/answer and end-of-line): fflush(stdout) in C++;\nSystem.out.flush() in Java; stdout.flush() in Python; flush(output) in Pascal;\nSee the documentation for other languages. In any moment if the program reads\nh = 0 or k = 0 it should immediately terminate normally (for example, calling\nexit(0)). It means that the system detected incorrect request/output from your\nprogram and printed 0 because if can't process your requests anymore. In this\ncase you'll receive verdict \"Wrong Answer\", but if you ignore case h = 0 or k\n= 0 it could lead to \"Runtime Error\", \"Time/Memory limit exceeded\" or any\nother verdict because your program could read a trash from the closed input\nstream. Hacking. To hack someone, use the following format: The first line\nshould contain a single integer t equal to 1 (only one testcase is allowed in\nhacks). The second line should contain a single integer h. Each of next 2^h -\n2 lines should contain two distinct integers ai and bi (1 \u2264 ai, bi \u2264 2^h - 1),\ndenoting two nodes connected with an edge. The printed edges must form a\nperfect binary tree of height h. Of course, contestant programs will not be\nable to see this input. Examples Input 1 3 3 4 5 7 2 1 2 1 2 Output ? 1 ? 5 ?\n6 ! 5 Input 2 2 1 3 2 1 2 2 1 2 4 3 3 12 13 Output ? 1 ? 3 ? 3 ! 3 ? 6 ! 1\nNote In the first sample, a tree corresponds to the drawing from the\nstatement. In the second sample, there are two two testcases. A tree in the\nfirst testcase has height 2 and thus 3 vertices. A tree in the second testcase\nhas height 4 and thus 15 vertices. You can see both trees on the drawing\nbelow.\n\n",
        "cf_contest_id": 750,
        "cf_index": "F",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation",
            "interactive",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n3\r\n2 3\r\n5 1\r\n7 1\r\n4 1\r\n2 6\r\n5 2\r\n",
                "1 testcases, numbers of used questions below:\r\n3\r\n"
            ],
            [
                "2\r\n2\r\n2 3\r\n3 1\r\n4\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n3 7\r\n4 8\r\n4 9\r\n5 10\r\n5 11\r\n6 12\r\n6 13\r\n7 14\r\n7 15\r\n",
                "2 testcases, numbers of used questions below:\r\n2\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n3\r\n5 6\r\n5 3\r\n6 4\r\n6 1\r\n3 2\r\n3 7\r\n4\r\n12 1\r\n12 6\r\n1 4\r\n1 2\r\n6 11\r\n6 13\r\n4 5\r\n4 14\r\n2 9\r\n2 3\r\n11 15\r\n11 7\r\n13 10\r\n13 8\r\n4\r\n9 5\r\n9 7\r\n5 11\r\n5 2\r\n7 13\r\n7 1\r\n11 14\r\n11 8\r\n2 3\r\n2 15\r\n13 10\r\n13 6\r\n1 4\r\n1 12\r\n2\r\n2 3\r\n2 1\r\n",
                "4 testcases, numbers of used questions below:\r\n4\r\n6\r\n4\r\n2\r\n"
            ],
            [
                "3\r\n4\r\n2 8\r\n2 5\r\n8 12\r\n8 6\r\n5 10\r\n5 14\r\n12 9\r\n12 7\r\n6 13\r\n6 4\r\n10 15\r\n10 11\r\n14 3\r\n14 1\r\n4\r\n4 11\r\n4 12\r\n11 13\r\n11 9\r\n12 7\r\n12 6\r\n13 5\r\n13 14\r\n9 3\r\n9 10\r\n7 15\r\n7 2\r\n6 8\r\n6 1\r\n5\r\n5 7\r\n5 22\r\n7 12\r\n7 25\r\n22 15\r\n22 26\r\n12 16\r\n12 27\r\n25 3\r\n25 28\r\n15 2\r\n15 18\r\n26 30\r\n26 1\r\n16 6\r\n16 14\r\n27 10\r\n27 13\r\n3 8\r\n3 20\r\n28 24\r\n28 19\r\n2 17\r\n2 23\r\n18 4\r\n18 11\r\n30 31\r\n30 21\r\n1 29\r\n1 9\r\n",
                "3 testcases, numbers of used questions below:\r\n5\r\n5\r\n5\r\n"
            ]
        ]
    }
]