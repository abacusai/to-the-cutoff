[
    {
        "name": "Maximums and Minimums",
        "description": "You are given an array \n    a_1, a_2, \n    \u2026, a_n\n of positive integers.\nFind the number of pairs of indices \n    (l, r)\n, where \n    1 \n    \u2264 l \n    \u2264 r\n    \n    \u2264 n\n, that pass the check. The check is performed in the following\nmanner: The minimum and maximum numbers are found among \n    a_l, a_l+1,\n    \n    \u2026, a_r\n. The check is passed if the maximum number is divisible by\nthe minimum number. Input The first line contains a single integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 10\n) \u2014 the number of test cases. Then the test cases\nfollow. Each test case consists of two lines. The first line contains a single\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 5 \n    \u00b7 10^5\n) \u2014 the size of the\narray. The second line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n\n(\n    1 \n    \u2264 a_i \n    \u2264 10^6\n). It is guaranteed that the sum of \n    n\n over\nall test cases does not exceed \n    5 \n    \u00b7 10^5\n. Output For each test\ncase, print a single integer \u2014 the number of pairs of indices that pass the\ncheck. Example Input 6 1 1 2 2 4 2 2 3 4 2 4 7 14 7 16 5 18 7 7 12 14 6 16 14\n2 6 16 2 Output 1 3 2 7 10 19 Note Below \n    x \n    | y\n denotes that \n    y\n\nis divisible by \n    x\n. In the first test case, there is one pair \n    (1,\n    1)\n, the maximum for this pair is \n    1\n, the minimum is also \n    1\n, \n    1\n    \n    | 1\n, so the check is passed, and the answer is \n    1\n. In the second\ntest case, there are \n    3\n segments: \n    (1, 1)\n: the maximum is \n    2\n,\nthe minimum is \n    2\n, \n    2 \n    | 2\n, so the check is passed. \n    (1,\n    2)\n: the maximum is \n    4\n, the minimum is \n    2\n, \n    2 \n    | 4\n, so\nthe check is passed. \n    (2, 2)\n: the maximum is \n    4\n, the minimum is\n\n    4\n, \n    4 \n    | 4\n, so the check is passed. In the third test case,\nthere are \n    3\n segments: \n    (1, 1)\n: the maximum is \n    2\n, the minimum\nis \n    2\n, \n    2 \n    | 2\n, so the check is passed. \n    (1, 2)\n: the\nmaximum is \n    3\n, the minimum is \n    2\n, \n    3\n isn't divisible by\n\n    2\n, so the check is failed. \n    (2, 2)\n: the maximum is \n    3\n, the\nminimum is \n    3\n, \n    3 \n    | 3\n, so the check is passed.\n\n",
        "cf_contest_id": 1730,
        "cf_index": "E",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "data structures",
            "divide and conquer",
            "number theory"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "6\r\n1\r\n1\r\n2\r\n2 4\r\n2\r\n2 3\r\n4\r\n2 4 7 14\r\n7\r\n16 5 18 7 7 12 14\r\n6\r\n16 14 2 6 16 2\r\n",
                "1\r\n3\r\n2\r\n7\r\n10\r\n19\r\n"
            ]
        ],
        "private_cases": []
    }
]