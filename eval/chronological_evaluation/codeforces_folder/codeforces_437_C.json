[
    {
        "name": "The Child and Toy",
        "description": "On Children's Day, the child got a toy from Delayyy as a present. However, the\nchild is so naughty that he can't wait to destroy the toy. The toy consists of\nn parts and m ropes. Each rope links two parts, but every pair of parts is\nlinked by at most one rope. To split the toy, the child must remove all its\nparts. The child can remove a single part at a time, and each remove consume\nan energy. Let's define an energy value of part i as vi. The child spend vf1 +\nvf2 + ... + vfk energy for removing part i where f1, f2, ..., fk are the parts\nthat are directly connected to the i-th and haven't been removed. Help the\nchild to find out, what is the minimum total energy he should spend to remove\nall n parts. Input The first line contains two integers n and m (1 \u2264 n \u2264 1000;\n0 \u2264 m \u2264 2000). The second line contains n integers: v1, v2, ..., vn (0 \u2264 vi \u2264\n10^5). Then followed m lines, each line contains two integers xi and yi,\nrepresenting a rope from part xi to part yi (1 \u2264 xi, yi \u2264 n; xi \u2260 yi).\nConsider all the parts are numbered from 1 to n. Output Output the minimum\ntotal energy the child should spend to remove all n parts of the toy. Examples\nInput 4 3 10 20 30 40 1 4 1 2 2 3 Output 40 Input 4 4 100 100 100 100 1 2 2 3\n2 4 3 4 Output 400 Input 7 10 40 10 20 10 20 80 40 1 5 4 7 4 5 5 2 5 7 6 4 1 6\n1 3 4 3 1 4 Output 160 Note One of the optimal sequence of actions in the\nfirst sample is: First, remove part 3, cost of the action is 20. Then, remove\npart 2, cost of the action is 10. Next, remove part 4, cost of the action is\n10. At last, remove part 1, cost of the action is 0. So the total energy the\nchild paid is 20 + 10 + 10 + 0 = 40, which is the minimum. In the second\nsample, the child will spend 400 no matter in what order he will remove the\nparts.\n\n",
        "cf_contest_id": 437,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "graphs",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 3\r\n10 20 30 40\r\n1 4\r\n1 2\r\n2 3\r\n",
                "40\r\n"
            ],
            [
                "4 4\r\n100 100 100 100\r\n1 2\r\n2 3\r\n2 4\r\n3 4\r\n",
                "400\r\n"
            ],
            [
                "7 10\r\n40 10 20 10 20 80 40\r\n1 5\r\n4 7\r\n4 5\r\n5 2\r\n5 7\r\n6 4\r\n1 6\r\n1 3\r\n4 3\r\n1 4\r\n",
                "160\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 0\r\n23333\r\n",
                "0\r\n"
            ],
            [
                "5 4\r\n1 2 2 2 2\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n",
                "4\r\n"
            ],
            [
                "10 30\r\n3 6 17 15 13 15 6 12 9 1\r\n3 8\r\n1 10\r\n4 7\r\n1 7\r\n3 7\r\n2 9\r\n8 10\r\n3 1\r\n3 4\r\n8 6\r\n10 3\r\n3 9\r\n2 3\r\n10 4\r\n2 10\r\n5 8\r\n9 5\r\n6 1\r\n2 1\r\n7 2\r\n7 6\r\n7 10\r\n4 8\r\n5 6\r\n3 6\r\n4 1\r\n8 9\r\n7 9\r\n4 2\r\n5 10\r\n",
                "188\r\n"
            ],
            [
                "3 3\r\n1 1 1\r\n1 2\r\n2 3\r\n3 1\r\n",
                "3\r\n"
            ]
        ]
    }
]