[
    {
        "name": "Array Shrinking",
        "description": "You are given an array \n    a_1, a_2, \n    \u2026, a_n\n. You can perform the\nfollowing operation any number of times: Choose a pair of two neighboring\nequal elements \n    a_i = a_i + 1\n (if there is at least one such pair).\nReplace them by one element with value \n    a_i + 1\n. After each such\noperation, the length of the array will decrease by one (and elements are\nrenumerated accordingly). What is the minimum possible length of the array\n\n    a\n you can get? Input The first line contains the single integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 500\n) \u2014 the initial length of the array \n    a\n. The\nsecond line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264\n    a_i \n    \u2264 1000\n) \u2014 the initial array \n    a\n. Output Print the only integer\n\u2014 the minimum possible length you can get after performing the operation\ndescribed above any number of times. Examples Input 5 4 3 2 2 3 Output 2 Input\n7 3 3 4 4 4 3 3 Output 2 Input 3 1 3 5 Output 3 Input 1 1000 Output 1 Note In\nthe first test, this is one of the optimal sequences of operations: \n    4\n\n\n    3\n \n    2\n \n    2\n \n    3\n \n    \u2192\n \n    4\n \n    3\n \n    3\n\n\n    3\n \n    \u2192\n \n    4\n \n    4\n \n    3\n \n    \u2192\n\n\n    5\n \n    3\n. In the second test, this is one of the optimal sequences of\noperations: \n    3\n \n    3\n \n    4\n \n    4\n \n    4\n \n    3\n \n    3\n\n\n    \u2192\n \n    4\n \n    4\n \n    4\n \n    4\n \n    3\n \n    3\n\n\n    \u2192\n \n    4\n \n    4\n \n    4\n \n    4\n \n    4\n\n\n    \u2192\n \n    5\n \n    4\n \n    4\n \n    4\n \n    \u2192\n\n\n    5\n \n    5\n \n    4\n \n    \u2192\n \n    6\n \n    4\n. In the third and\nfourth tests, you can't perform the operation at all.\n\n",
        "cf_contest_id": 1312,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n4 3 2 2 3\r\n",
                "2"
            ],
            [
                "7\r\n3 3 4 4 4 3 3\r\n",
                "2"
            ],
            [
                "3\r\n1 3 5\r\n",
                "3"
            ],
            [
                "1\r\n1000\r\n",
                "1"
            ]
        ],
        "private_cases": [
            [
                "15\r\n67 67 65 65 66 66 66 68 67 67 67 65 65 66 70\r\n",
                "2"
            ],
            [
                "15\r\n17 17 18 17 16 16 17 17 15 15 13 12 12 14 15\r\n",
                "2"
            ],
            [
                "20\r\n10 6 25 38 8 4 22 40 28 45 23 33 18 39 28 26 40 4 14 47\r\n",
                "20"
            ],
            [
                "20\r\n6 5 5 7 12 12 12 12 7 41 35 28 28 28 28 13 12 12 7 6\r\n",
                "9"
            ],
            [
                "20\r\n6 9 29 29 1 1 2 8 9 2 13 37 37 37 37 24 14 17 37 37\r\n",
                "13"
            ],
            [
                "20\r\n1 13 12 7 25 25 46 39 39 18 25 18 8 8 18 42 29 34 34 3\r\n",
                "16"
            ],
            [
                "20\r\n39 38 36 36 37 39 39 19 18 18 20 31 31 15 15 16 16 16 48 48\r\n",
                "5"
            ],
            [
                "20\r\n34 34 35 15 14 14 12 12 18 24 24 25 4 4 14 14 14 14 37 36\r\n",
                "9"
            ],
            [
                "20\r\n34 20 41 21 45 30 4 42 42 21 21 41 43 36 25 49 25 25 44 28\r\n",
                "17"
            ],
            [
                "20\r\n24 20 23 33 22 18 42 47 47 50 38 37 27 12 25 24 24 43 17 24\r\n",
                "17"
            ],
            [
                "20\r\n27 20 19 19 20 19 19 22 48 48 49 35 33 33 33 33 47 46 45 45\r\n",
                "5"
            ],
            [
                "20\r\n34 42 41 41 20 29 37 46 7 37 31 20 20 26 26 34 34 2 35 35\r\n",
                "14"
            ],
            [
                "20\r\n40 34 34 35 35 35 37 34 34 34 32 32 33 36 35 33 33 34 35 35\r\n",
                "2"
            ],
            [
                "20\r\n33 31 31 32 42 42 29 35 33 32 32 34 28 28 5 37 2 44 44 4\r\n",
                "10"
            ],
            [
                "20\r\n25 4 11 48 5 4 4 34 20 20 7 28 43 43 12 10 5 33 33 34\r\n",
                "14"
            ],
            [
                "20\r\n18 18 50 31 47 25 14 13 17 14 37 5 50 41 41 8 9 41 49 13\r\n",
                "18"
            ],
            [
                "20\r\n7 6 6 7 4 4 3 2 2 4 4 4 5 1 1 1 1 1 1 2\r\n",
                "2"
            ],
            [
                "20\r\n15 15 3 35 35 11 11 22 22 22 22 26 39 39 38 38 23 23 24 24\r\n",
                "10"
            ],
            [
                "20\r\n10 7 13 16 39 9 25 25 25 24 24 44 44 11 14 40 28 28 50 19\r\n",
                "14"
            ],
            [
                "20\r\n1 3 45 28 20 35 15 1 39 4 34 17 17 18 29 34 20 23 28 47\r\n",
                "18"
            ],
            [
                "20\r\n42 42 42 42 40 40 40 40 39 39 39 39 40 40 42 41 41 4 4 5\r\n",
                "2"
            ],
            [
                "20\r\n21 21 21 21 11 11 37 36 36 38 10 27 27 26 26 27 29 9 1 28\r\n",
                "8"
            ],
            [
                "7\r\n3 2 2 2 2 2 3\r\n",
                "3"
            ],
            [
                "4\r\n1000 1000 1000 1000\r\n",
                "1"
            ],
            [
                "50\r\n1 1 1 1 1 2 1 1 2 1 2 1 1 1 2 1 1 1 2 2 2 1 1 2 2 1 2 1 1 2 2 1 1 2 2 1 1 1 1 1 2 2 2 2 2 1 2 2 2 1\r\n",
                "19"
            ],
            [
                "11\r\n4 3 3 3 3 3 5 6 7 8 9\r\n",
                "3"
            ]
        ]
    }
]