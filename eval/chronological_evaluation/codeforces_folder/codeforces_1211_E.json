[
    {
        "name": "Double Permutation Inc.",
        "description": "Polycarp recently became an employee of the company \"Double Permutation Inc.\"\nNow he is a fan of permutations and is looking for them everywhere! A\npermutation in this problem is a sequence of integers \n    p_1, p_2, \n    \u2026,\n    p_k\n such that every integer from \n    1\n to \n    k\n occurs exactly once in\nit. For example, the following sequences are permutations of \n    [3, 1, 4,\n    2]\n, \n    [1]\n and \n    [6, 1, 2, 3, 5, 4]\n. The following sequences are not\npermutations: \n    [0, 1]\n, \n    [1, 2, 2]\n, \n    [1, 2, 4]\n and \n    [2, 3]\n.\nIn the lobby of the company's headquarter statistics on visits to the\ncompany's website for the last \n    n\n days are published \u2014 the sequence\n\n    a_1, a_2, \n    \u2026, a_n\n. Polycarp wants to color all the elements of this\nsequence in one of three colors (red, green or blue) so that: all red numbers,\nbeing written out of \n    a_1, a_2, \n    \u2026, a_n\n from left to right (that is,\nwithout changing their relative order), must form some permutation (let's call\nit \n    P\n); all green numbers, being written out of \n    a_1, a_2, \n    \u2026,\n    a_n\n from left to right (that is, without changing their relative order),\nmust form the same permutation \n    P\n; among blue numbers there should not be\nelements that are equal to some element of the permutation \n    P\n. Help\nPolycarp to color all \n    n\n numbers so that the total number of red and\ngreen elements is maximum. Input The first line contains an integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 2\n    \u00b710^5\n) \u2014 the length of the sequence \n    a\n. The\nsecond line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264\n    a_i \n    \u2264 2\n    \u00b710^5\n). Output Print a string \n    s\n of length \n    n\n\nsuch that: \n    s_i\n='R', if the element \n    a_i\n must be colored in red;\n\n    s_i\n='G', if the element \n    a_i\n must be colored in green;\n\n    s_i\n='B', if the element \n    a_i\n must be colored in blue. The string\n\n    s\n should maximize the total number of red and green elements when\nfulfilling the requirements from the main part of the problem statement. If\nthere are several optimal answers, print any of them. Examples Input 5 1 2 3 2\n1 Output RBBBG Input 3 1 1 1 Output BBB Input 10 3 3 2 2 5 4 1 5 4 1 Output\nRGRGRRRGGG Input 10 3 9 3 1 2 1 2 4 4 4 Output RBGRRGGBBB\n\n",
        "cf_contest_id": 1211,
        "cf_index": "E",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "binary search",
            "greedy"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 2 3 2 1\r\n",
                "RBBBG\r\n"
            ],
            [
                "3\r\n1 1 1\r\n",
                "BBB\r\n"
            ],
            [
                "10\r\n3 3 2 2 5 4 1 5 4 1\r\n",
                "RGRGRRRGGG\r\n"
            ],
            [
                "10\r\n3 9 3 1 2 1 2 4 4 4\r\n",
                "RBGRRGGBBB\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n",
                "B\r\n"
            ],
            [
                "1\r\n2\r\n",
                "B\r\n"
            ],
            [
                "2\r\n1 2\r\n",
                "BB\r\n"
            ],
            [
                "2\r\n1 1\r\n",
                "RG\r\n"
            ],
            [
                "2\r\n2 2\r\n",
                "BB\r\n"
            ],
            [
                "2\r\n2 3\r\n",
                "BB\r\n"
            ],
            [
                "3\r\n1 1 2\r\n",
                "RGB\r\n"
            ],
            [
                "3\r\n1 2 1\r\n",
                "RBG\r\n"
            ],
            [
                "3\r\n200000 1 1\r\n",
                "BRG\r\n"
            ],
            [
                "3\r\n1 2 2\r\n",
                "BBB\r\n"
            ],
            [
                "3\r\n3 2 1\r\n",
                "BBB\r\n"
            ],
            [
                "4\r\n1 2 1 2\r\n",
                "RRGG\r\n"
            ],
            [
                "4\r\n2 2 1 1\r\n",
                "RGRG\r\n"
            ],
            [
                "4\r\n2 1 1 2\r\n",
                "BRGB\r\n"
            ],
            [
                "4\r\n1 2 3 4\r\n",
                "BBBB\r\n"
            ],
            [
                "4\r\n1 2 2 3\r\n",
                "BBBB\r\n"
            ],
            [
                "4\r\n1 200000 2 2\r\n",
                "BBBB\r\n"
            ],
            [
                "4\r\n1 1 1 2\r\n",
                "BBBB\r\n"
            ],
            [
                "5\r\n2 1 3 2 1\r\n",
                "RRBGG\r\n"
            ],
            [
                "5\r\n1 2 2 2 1\r\n",
                "RBBBG\r\n"
            ],
            [
                "5\r\n1 2 2 1 2\r\n",
                "RBBGB\r\n"
            ],
            [
                "5\r\n1 2 3 1 2\r\n",
                "RRBGG\r\n"
            ],
            [
                "4\r\n2 2 3 3\r\n",
                "BBBB\r\n"
            ],
            [
                "4\r\n1 1 3 3\r\n",
                "RGBB\r\n"
            ],
            [
                "5\r\n1 2 1 1 2\r\n",
                "BBBBB\r\n"
            ],
            [
                "6\r\n1 2 3 1 2 3\r\n",
                "RRRGGG\r\n"
            ],
            [
                "6\r\n3 3 1 2 1 2\r\n",
                "RGRRGG\r\n"
            ],
            [
                "6\r\n3 1 3 1 2 2\r\n",
                "RRGGRG\r\n"
            ],
            [
                "6\r\n2 3 2 1 3 1\r\n",
                "RRGRGG\r\n"
            ],
            [
                "6\r\n1 1 1 2 2 2\r\n",
                "BBBBBB\r\n"
            ],
            [
                "6\r\n1 3 2 1 2 3\r\n",
                "RBRGGB\r\n"
            ],
            [
                "10\r\n5 5 2 4 2 3 4 3 1 1\r\n",
                "RGRRGRGGRG\r\n"
            ],
            [
                "10\r\n1 1 2 5 3 5 4 2 3 4\r\n",
                "RGRBRBRGGG\r\n"
            ],
            [
                "10\r\n5 4 1 4 3 2 1 3 2 5\r\n",
                "BRRGRRGGGB\r\n"
            ],
            [
                "10\r\n5 3 4 1 1 4 2 2 3 5\r\n",
                "BBBRGBRGBB\r\n"
            ],
            [
                "10\r\n3 4 1 2 1 5 5 2 3 4\r\n",
                "BBRRGBBGBB\r\n"
            ]
        ]
    }
]