[
    {
        "name": "Forever Winter",
        "description": "A snowflake graph is generated from two integers \n    x\n and \n    y\n, both\ngreater than \n    1\n, as follows: Start with one central vertex. Connect\n\n    x\n new vertices to this central vertex. Connect \n    y\n new vertices to\neach of these \n    x\n vertices. For example, below is a snowflake graph for\n\n    x=5\n and \n    y=3\n. The snowflake graph above has a central vertex\n\n    15\n, then \n    x=5\n vertices attached to it (\n    3\n, \n    6\n, \n    7\n,\n\n    8\n, and \n    20\n), and then \n    y=3\n vertices attached to each of those.\nGiven a snowflake graph, determine the values of \n    x\n and \n    y\n. Input\nThe first line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    1000\n) \u2014 the number of test cases. The first line of each test case contains\ntwo integers \n    n\n and \n    m\n (\n    2 \n    \u2264 n \n    \u2264 200\n; \n    1 \n    \u2264 m\n    \n    \u2264\n    min\n    (1000, \n    n(n-1)/2\n    )\n) \u2014 the number of\nvertices and edges in the graph, respectively. The next \n    m\n lines each\ncontain two integers each \n    u\n and \n    v\n (\n    1 \n    \u2264 u, v \n    \u2264 n\n,\n\n    u \n    \u2260 v\n) \u2014 the numbers of vertices connected by an edge. The graph\ndoes not contain multiple edges and self-loops. It is guaranteed that this\ngraph is a snowflake graph for some integers \n    x\n and \n    y\n both greater\nthan \n    1\n. Output For each test case, on a separate line output the values\nof \n    x\n and \n    y\n, in that order, separated by a space. Example Input 3\n21 20 21 20 5 20 13 20 1 3 11 3 10 3 4 8 19 8 14 8 9 7 12 7 17 7 18 6 16 6 2 6\n6 15 7 15 8 15 20 15 3 15 7 6 1 2 1 3 2 4 2 5 3 6 3 7 9 8 9 3 3 6 6 2 2 1 5 2\n2 7 4 3 3 8 Output 5 3 2 2 2 3 Note The first test case is pictured in the\nstatement. Note that the output 3 5 is incorrect, since \n    x\n should be\noutput before \n    y\n.\n\n",
        "cf_contest_id": 1829,
        "cf_index": "F",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graphs",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n21 20\r\n21 20\r\n5 20\r\n13 20\r\n1 3\r\n11 3\r\n10 3\r\n4 8\r\n19 8\r\n14 8\r\n9 7\r\n12 7\r\n17 7\r\n18 6\r\n16 6\r\n2 6\r\n6 15\r\n7 15\r\n8 15\r\n20 15\r\n3 15\r\n7 6\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n3 7\r\n9 8\r\n9 3\r\n3 6\r\n6 2\r\n2 1\r\n5 2\r\n2 7\r\n4 3\r\n3 8\r\n",
                "5 3\r\n2 2\r\n2 3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n7 6\r\n2 1\r\n1 3\r\n4 2\r\n2 5\r\n3 6\r\n7 3\r\n",
                "2 2\r\n"
            ],
            [
                "1\r\n21 20\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n6 7\r\n7 8\r\n7 9\r\n7 10\r\n7 11\r\n6 13\r\n13 12\r\n13 14\r\n13 15\r\n13 16\r\n6 17\r\n17 18\r\n17 19\r\n17 20\r\n17 21\r\n",
                "4 4\r\n"
            ]
        ]
    }
]