[
    {
        "name": "Weight the Tree",
        "description": "You are given a tree of \n    n\n vertices numbered from \n    1\n to \n    n\n. A\ntree is a connected undirected graph without cycles. For each \n    i=1,2,\n    \n    \u2026, n\n, let \n    w_i\n be the weight of the \n    i\n-th vertex. A vertex\nis called good if its weight is equal to the sum of the weights of all its\nneighbors. Initially, the weights of all nodes are unassigned. Assign positive\ninteger weights to each vertex of the tree, such that the number of good\nvertices in the tree is maximized. If there are multiple ways to do it, you\nhave to find one that minimizes the sum of weights of all vertices in the\ntree. Input The first line contains one integer \n    n\n (\n    2\n    \u2264 n\n    \u2264\n    2\n    \u00b7 10^5\n) \u2014 the number of vertices in the tree. Then, \n    n\u22121\n lines\nfollow. Each of them contains two integers \n    u\n and \n    v\n (\n    1\n    \u2264\n    u,v\n    \u2264 n\n) denoting an edge between vertices \n    u\n and \n    v\n. It is\nguaranteed that the edges form a tree. Output In the first line print two\nintegers \u2014 the maximum number of good vertices and the minimum possible sum of\nweights for that maximum. In the second line print \n    n\n integers \n    w_1,\n    w_2, \n    \u2026, w_n\n (\n    1\n    \u2264 w_i\n    \u2264 10^9\n) \u2014 the corresponding weight\nassigned to each vertex. It can be proven that there exists an optimal\nsolution satisfying these constraints. If there are multiple optimal\nsolutions, you may print any. Examples Input 4 1 2 2 3 2 4 Output 3 4 1 1 1 1\nInput 3 1 2 1 3 Output 2 3 1 1 1 Input 2 1 2 Output 2 2 1 1 Input 9 3 4 7 6 2\n1 8 3 5 6 1 8 8 6 9 6 Output 6 11 1 1 1 1 1 1 1 3 1 Note This is the tree for\nthe first test case: In this case, if you assign a weight of \n    1\n to each\nvertex, then the good vertices (which are painted black) are \n    1\n, \n    3\n\nand \n    4\n. It impossible to assign weights so that all vertices are good\nvertices. The minimum sum of weights in this case is \n    1+1+1+1=4\n, and it\nis impossible to have a lower sum because the weights have to be positive\nintegers.This is the tree for the second test case: In this case, if you\nassign a weight of \n    1\n to each vertex, then the good vertices (which are\npainted black) are \n    2\n and \n    3\n. It can be proven that this is an\noptimal assignment.\n\n",
        "cf_contest_id": 1646,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 2\r\n2 3\r\n2 4\r\n",
                "3 4\r\n1 1 1 1 "
            ],
            [
                "3\r\n1 2\r\n1 3\r\n",
                "2 3\r\n1 1 1 "
            ],
            [
                "2\r\n1 2\r\n",
                "2 2\r\n1 1"
            ],
            [
                "9\r\n3 4\r\n7 6\r\n2 1\r\n8 3\r\n5 6\r\n1 8\r\n8 6\r\n9 6\r\n",
                "6 11\r\n1 1 1 1 1 1 1 3 1 "
            ]
        ],
        "private_cases": [
            [
                "4\r\n1 2\r\n2 3\r\n3 4\r\n",
                "2 4\r\n1 1 1 1 "
            ],
            [
                "2\r\n2 1\r\n",
                "2 2\r\n1 1"
            ],
            [
                "5\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n",
                "4 5\r\n1 1 1 1 1 "
            ],
            [
                "5\r\n1 2\r\n2 3\r\n3 4\r\n3 5\r\n",
                "3 5\r\n1 1 1 1 1 "
            ],
            [
                "5\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n",
                "3 6\r\n1 1 2 1 1 "
            ],
            [
                "6\r\n4 5\r\n1 5\r\n5 3\r\n5 2\r\n5 6\r\n",
                "5 6\r\n1 1 1 1 1 1 "
            ],
            [
                "6\r\n3 2\r\n5 6\r\n1 5\r\n6 4\r\n6 3\r\n",
                "3 6\r\n1 1 1 1 1 1 "
            ],
            [
                "6\r\n3 5\r\n5 1\r\n3 2\r\n2 6\r\n4 1\r\n",
                "3 7\r\n1 1 1 1 2 1 "
            ],
            [
                "7\r\n3 7\r\n7 5\r\n2 7\r\n6 7\r\n4 7\r\n1 7\r\n",
                "6 7\r\n1 1 1 1 1 1 1 "
            ],
            [
                "7\r\n6 5\r\n7 2\r\n6 3\r\n5 1\r\n5 2\r\n5 4\r\n",
                "4 7\r\n1 1 1 1 1 1 1 "
            ],
            [
                "7\r\n3 2\r\n4 1\r\n2 5\r\n1 5\r\n7 3\r\n6 7\r\n",
                "4 9\r\n1 1 2 1 2 1 1 "
            ],
            [
                "8\r\n4 1\r\n4 5\r\n4 6\r\n7 4\r\n2 4\r\n8 4\r\n4 3\r\n",
                "7 8\r\n1 1 1 1 1 1 1 1 "
            ],
            [
                "8\r\n3 5\r\n7 3\r\n4 5\r\n6 4\r\n3 8\r\n1 5\r\n2 4\r\n",
                "5 8\r\n1 1 1 1 1 1 1 1 "
            ],
            [
                "8\r\n7 4\r\n8 6\r\n5 1\r\n2 3\r\n5 8\r\n3 7\r\n6 2\r\n",
                "4 10\r\n1 2 1 1 1 1 1 2 "
            ]
        ]
    }
]