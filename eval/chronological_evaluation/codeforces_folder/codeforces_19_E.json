[
    {
        "name": "Fairy",
        "description": "Once upon a time there lived a good fairy A. One day a fine young man B came\nto her and asked to predict his future. The fairy looked into her magic ball\nand said that soon the fine young man will meet the most beautiful princess\never and will marry her. Then she drew on a sheet of paper n points and joined\nsome of them with segments, each of the segments starts in some point and ends\nin some other point. Having drawn that picture, she asked the young man to\nerase one of the segments from the sheet. Then she tries to colour each point\nred or blue so, that there is no segment having points of the same colour as\nits ends. If she manages to do so, the prediction will come true. B wants to\nmeet the most beautiful princess, that's why he asks you to help him. Find all\nthe segments that will help him to meet the princess. Input The first input\nline contains two integer numbers: n \u2014 amount of the drawn points and m \u2014\namount of the drawn segments (1 \u2264 n \u2264 10^4, 0 \u2264 m \u2264 10^4). The following m\nlines contain the descriptions of the segments. Each description contains two\ndifferent space-separated integer numbers v, u (1 \u2264 v \u2264 n, 1 \u2264 u \u2264 n) \u2014\nindexes of the points, joined by this segment. No segment is met in the\ndescription twice. Output In the first line output number k \u2014 amount of the\nsegments in the answer. In the second line output k space-separated numbers \u2014\nindexes of these segments in ascending order. Each index should be output only\nonce. Segments are numbered from 1 in the input order. Examples Input 4 4 1 2\n1 3 2 4 3 4 Output 4 1 2 3 4 Input 4 5 1 2 2 3 3 4 4 1 1 3 Output 1 5\n\n",
        "cf_contest_id": 19,
        "cf_index": "E",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "divide and conquer",
            "dsu"
        ],
        "time_limit_seconds": 1.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 4\r\n1 2\r\n1 3\r\n2 4\r\n3 4\r\n",
                "4\r\n1 2 3 4 "
            ],
            [
                "4 5\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n1 3\r\n",
                "1\r\n5 "
            ]
        ],
        "private_cases": [
            [
                "10 5\r\n4 3\r\n9 3\r\n6 4\r\n7 9\r\n1 6\r\n",
                "5\r\n1 2 3 4 5 "
            ],
            [
                "10 20\r\n1 10\r\n6 3\r\n10 4\r\n1 6\r\n9 10\r\n2 9\r\n3 7\r\n8 10\r\n8 2\r\n3 10\r\n5 4\r\n1 7\r\n5 8\r\n3 5\r\n6 4\r\n8 6\r\n9 7\r\n2 4\r\n8 7\r\n2 1\r\n",
                "20\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 "
            ],
            [
                "20 15\r\n5 2\r\n2 17\r\n10 7\r\n6 7\r\n15 14\r\n17 7\r\n11 7\r\n2 19\r\n1 7\r\n7 5\r\n2 9\r\n11 15\r\n15 10\r\n2 1\r\n13 15\r\n",
                "15\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 "
            ],
            [
                "20 30\r\n6 17\r\n2 10\r\n6 4\r\n17 2\r\n8 15\r\n15 18\r\n9 15\r\n11 15\r\n6 3\r\n6 14\r\n10 6\r\n15 5\r\n15 4\r\n16 15\r\n6 20\r\n12 15\r\n9 6\r\n2 7\r\n2 1\r\n20 15\r\n6 5\r\n15 19\r\n18 2\r\n6 13\r\n2 19\r\n12 6\r\n6 16\r\n15 13\r\n2 20\r\n16 2\r\n",
                "30\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 "
            ],
            [
                "20 50\r\n9 19\r\n12 19\r\n3 16\r\n13 12\r\n9 6\r\n11 14\r\n17 18\r\n13 10\r\n18 1\r\n19 1\r\n8 19\r\n12 6\r\n10 19\r\n2 6\r\n5 9\r\n15 12\r\n19 14\r\n11 17\r\n13 7\r\n11 7\r\n3 1\r\n2 13\r\n17 6\r\n20 14\r\n19 7\r\n16 18\r\n20 17\r\n16 6\r\n19 4\r\n20 12\r\n18 9\r\n16 15\r\n5 8\r\n6 8\r\n20 8\r\n14 3\r\n15 9\r\n20 4\r\n12 3\r\n10 11\r\n1 6\r\n7 20\r\n12 5\r\n15 2\r\n11 9\r\n10 15\r\n8 11\r\n1 15\r\n3 4\r\n19 16\r\n",
                "50\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 "
            ],
            [
                "1 0\r\n",
                "0\r\n"
            ],
            [
                "2 1\r\n1 2\r\n",
                "1\r\n1 "
            ],
            [
                "10000 0\r\n",
                "0\r\n"
            ],
            [
                "10000 1\r\n3 9999\r\n",
                "1\r\n1 "
            ],
            [
                "9999 0\r\n",
                "0\r\n"
            ]
        ]
    }
]