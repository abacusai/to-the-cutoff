[
    {
        "name": "Gifts by the List",
        "description": "Sasha lives in a big happy family. At the Man's Day all the men of the family\ngather to celebrate it following their own traditions. There are n men in\nSasha's family, so let's number them with integers from 1 to n. Each man has\nat most one father but may have arbitrary number of sons. Man number A is\nconsidered to be the ancestor of the man number B if at least one of the\nfollowing conditions is satisfied: A = B; the man number A is the father of\nthe man number B; there is a man number C, such that the man number A is his\nancestor and the man number C is the father of the man number B. Of course, if\nthe man number A is an ancestor of the man number B and A \u2260 B, then the man\nnumber B is not an ancestor of the man number A. The tradition of the Sasha's\nfamily is to give gifts at the Man's Day. Because giving gifts in a normal way\nis boring, each year the following happens. A list of candidates is prepared,\ncontaining some (possibly all) of the n men in some order. Each of the n men\ndecides to give a gift. In order to choose a person to give a gift to, man A\nlooks through the list and picks the first man B in the list, such that B is\nan ancestor of A and gives him a gift. Note that according to definition it\nmay happen that a person gives a gift to himself. If there is no ancestor of a\nperson in the list, he becomes sad and leaves the celebration without giving a\ngift to anyone. This year you have decided to help in organizing celebration\nand asked each of the n men, who do they want to give presents to (this person\nis chosen only among ancestors). Are you able to make a list of candidates,\nsuch that all the wishes will be satisfied if they give gifts according to the\nprocess described above? Input In the first line of the input two integers n\nand m (0 \u2264 m < n \u2264 100 000) are given \u2014 the number of the men in the Sasha's\nfamily and the number of family relations in it respectively. The next m lines\ndescribe family relations: the (i + 1)^th line consists of pair of integers pi\nand qi (1 \u2264 pi, qi \u2264 n, pi \u2260 qi) meaning that the man numbered pi is the\nfather of the man numbered qi. It is guaranteed that every pair of numbers\nappears at most once, that among every pair of two different men at least one\nof them is not an ancestor of another and that every man has at most one\nfather. The next line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 n), i^th\nof which means that the man numbered i wants to give a gift to the man\nnumbered ai. It is guaranteed that for every 1 \u2264 i \u2264 n the man numbered ai is\nan ancestor of the man numbered i. Output Print an integer k (1 \u2264 k \u2264 n) \u2014 the\nnumber of the men in the list of candidates, in the first line. Print then k\npairwise different positive integers not exceeding n \u2014 the numbers of the men\nin the list in an order satisfying every of the men's wishes, one per line. If\nthere are more than one appropriate lists, print any of them. If there is no\nappropriate list print - 1 in the only line. Examples Input 3 2 1 2 2 3 1 2 1\nOutput -1 Input 4 2 1 2 3 4 1 2 3 3 Output 3 2 1 3 Note The first sample\nexplanation: if there would be no 1 in the list then the first and the third\nman's wishes would not be satisfied (a1 = a3 = 1); if there would be no 2 in\nthe list then the second man wish would not be satisfied (a2 = 2); if 1 would\nstay before 2 in the answer then the second man would have to give his gift to\nthe first man, but he wants to give it to himself (a2 = 2). if, at the other\nhand, the man numbered 2 would stay before the man numbered 1, then the third\nman would have to give his gift to the second man, but not to the first (a3 =\n1).\n\n",
        "cf_contest_id": 681,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2\r\n1 2\r\n2 3\r\n1 2 1\r\n",
                "-1"
            ],
            [
                "4 2\r\n1 2\r\n3 4\r\n1 2 3 3\r\n",
                "3\r\n2\r\n1\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 0\r\n1\r\n",
                "1\r\n1\r\n"
            ],
            [
                "2 1\r\n2 1\r\n2 2\r\n",
                "1\r\n2\r\n"
            ],
            [
                "2 1\r\n2 1\r\n1 2\r\n",
                "2\r\n1\r\n2\r\n"
            ],
            [
                "4 3\r\n1 2\r\n2 3\r\n3 4\r\n1 1 3 2\r\n",
                "-1"
            ],
            [
                "4 3\r\n4 3\r\n3 2\r\n2 1\r\n3 4 4 4\r\n",
                "-1"
            ],
            [
                "4 3\r\n1 2\r\n2 3\r\n3 4\r\n1 1 1 2\r\n",
                "-1"
            ]
        ]
    }
]