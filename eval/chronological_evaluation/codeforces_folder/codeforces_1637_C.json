[
    {
        "name": "Andrew and Stones",
        "description": "Andrew has \n    n\n piles with stones. The \n    i\n-th pile contains \n    a_i\n\nstones. He wants to make his table clean so he decided to put every stone\neither to the \n    1\n-st or the \n    n\n-th pile. Andrew can perform the\nfollowing operation any number of times: choose \n    3\n indices \n    1 \n    \u2264 i <\n    j < k \n    \u2264 n\n, such that the \n    j\n-th pile contains at least \n    2\n\nstones, then he takes \n    2\n stones from the pile \n    j\n and puts one stone\ninto pile \n    i\n and one stone into pile \n    k\n. Tell Andrew what is the\nminimum number of operations needed to move all the stones to piles \n    1\n\nand \n    n\n, or determine if it's impossible. Input The input contains several\ntest cases. The first line contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    10\n     000\n) \u2014 the number of test cases. The first line for each test case\ncontains one integer \n    n\n (\n    3 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the length of\nthe array. The second line contains a sequence of integers \n    a_1, a_2,\n    \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 the array elements. It is\nguaranteed that the sum of the values \n    n\n over all test cases does not\nexceed \n    10^5\n. Output For each test case print the minimum number of\noperations needed to move stones to piles \n    1\n and \n    n\n, or print\n\n    -1\n if it's impossible. Example Input 4 5 1 2 2 3 6 3 1 3 1 3 1 2 1 4 3 1\n1 2 Output 4 -1 1 -1 Note In the first test case, it is optimal to do the\nfollowing: Select \n    (i, j, k) = (1, 2, 5)\n. The array becomes equal to\n\n    [2, 0, 2, 3, 7]\n. Select \n    (i, j, k) = (1, 3, 4)\n. The array becomes\nequal to \n    [3, 0, 0, 4, 7]\n. Twice select \n    (i, j, k) = (1, 4, 5)\n. The\narray becomes equal to \n    [5, 0, 0, 0, 9]\n. This array satisfy the\nstatement, because every stone is moved to piles \n    1\n and \n    5\n. There\nare \n    4\n operations in total.In the second test case, it's impossible to\nput all stones into piles with numbers \n    1\n and \n    3\n: At the beginning\nthere's only one possible operation with \n    (i, j, k) = (1, 2, 3)\n. The\narray becomes equal to \n    [2, 1, 2]\n. Now there is no possible operation and\nthe array doesn't satisfy the statement, so the answer is \n    -1\n. In the\nthird test case, it's optimal to do the following: Select \n    (i, j, k) = (1,\n    2, 3)\n. The array becomes equal to \n    [2, 0, 2]\n. This array satisfies the\nstatement, because every stone is moved to piles \n    1\n and \n    3\n. The is\n\n    1\n operation in total.In the fourth test case, it's impossible to do any\noperation, and the array doesn't satisfy the statement, so the answer is\n\n    -1\n.\n\n",
        "cf_contest_id": 1637,
        "cf_index": "C",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n5\r\n1 2 2 3 6\r\n3\r\n1 3 1\r\n3\r\n1 2 1\r\n4\r\n3 1 1 2\r\n",
                "4\r\n-1\r\n1\r\n-1\r\n"
            ]
        ],
        "private_cases": []
    }
]