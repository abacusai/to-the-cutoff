[
    {
        "name": "Spongebob and Joke",
        "description": "While Patrick was gone shopping, Spongebob decided to play a little trick on\nhis friend. The naughty Sponge browsed through Patrick's personal stuff and\nfound a sequence a1, a2, ..., am of length m, consisting of integers from 1 to\nn, not necessarily distinct. Then he picked some sequence f1, f2, ..., fn of\nlength n and for each number ai got number bi = fai. To finish the prank he\nerased the initial sequence ai. It's hard to express how sad Patrick was when\nhe returned home from shopping! We will just say that Spongebob immediately\ngot really sorry about what he has done and he is now trying to restore the\noriginal sequence. Help him do this or determine that this is impossible.\nInput The first line of the input contains two integers n and m (1 \u2264 n, m \u2264\n100 000) \u2014 the lengths of sequences fi and bi respectively. The second line\ncontains n integers, determining sequence f1, f2, ..., fn (1 \u2264 fi \u2264 n). The\nlast line contains m integers, determining sequence b1, b2, ..., bm (1 \u2264 bi \u2264\nn). Output Print \"Possible\" if there is exactly one sequence ai, such that bi\n= fai for all i from 1 to m. Then print m integers a1, a2, ..., am. If there\nare multiple suitable sequences ai, print \"Ambiguity\". If Spongebob has made a\nmistake in his calculations and no suitable sequence ai exists, print\n\"Impossible\". Examples Input 3 3 3 2 1 1 2 3 Output Possible 3 2 1 Input 3 3 1\n1 1 1 1 1 Output Ambiguity Input 3 3 1 2 1 3 3 3 Output Impossible Note In the\nfirst sample 3 is replaced by 1 and vice versa, while 2 never changes. The\nanswer exists and is unique. In the second sample all numbers are replaced by\n1, so it is impossible to unambiguously restore the original sequence. In the\nthird sample fi \u2260 3 for all i, so no sequence ai transforms into such bi and\nwe can say for sure that Spongebob has made a mistake.\n\n",
        "cf_contest_id": 599,
        "cf_index": "B",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\n3 2 1\r\n1 2 3\r\n",
                "Possible\r\n3 2 1\r\n"
            ],
            [
                "3 3\r\n1 1 1\r\n1 1 1\r\n",
                "Ambiguity\r\n"
            ],
            [
                "3 3\r\n1 2 1\r\n3 3 3\r\n",
                "Impossible\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 100\r\n2 1\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\r\n",
                "Possible\r\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n"
            ],
            [
                "5 6\r\n5 2 4 3 5\r\n1 2 3 4 4 5\r\n",
                "Impossible\r\n"
            ],
            [
                "7 10\r\n1 2 2 1 3 7 5\r\n1 2 1 2 3 7 5 4 4 4\r\n",
                "Impossible\r\n"
            ],
            [
                "1 1\r\n1\r\n1\r\n",
                "Possible\r\n1\r\n"
            ],
            [
                "1 10\r\n1\r\n1 1 1 1 1 1 1 1 1 1\r\n",
                "Possible\r\n1 1 1 1 1 1 1 1 1 1\r\n"
            ],
            [
                "10 1\r\n1 2 3 4 5 6 1 8 9 10\r\n7\r\n",
                "Impossible\r\n"
            ],
            [
                "3 3\r\n2 2 2\r\n2 3 3\r\n",
                "Impossible\r\n"
            ],
            [
                "4 4\r\n1 1 1 4\r\n1 1 1 3\r\n",
                "Impossible\r\n"
            ],
            [
                "3 3\r\n1 1 2\r\n1 2 3\r\n",
                "Impossible\r\n"
            ],
            [
                "3 3\r\n2 2 1\r\n2 3 1\r\n",
                "Impossible\r\n"
            ],
            [
                "3 2\r\n1 1 3\r\n1 2\r\n",
                "Impossible\r\n"
            ],
            [
                "3 3\r\n1 1 1\r\n1 2 2\r\n",
                "Impossible\r\n"
            ],
            [
                "3 1\r\n1 1 2\r\n2\r\n",
                "Possible\r\n3\r\n"
            ],
            [
                "3 3\r\n1 1 1\r\n1 1 2\r\n",
                "Impossible\r\n"
            ],
            [
                "5 5\r\n1 1 5 5 5\r\n1 2 3 4 5\r\n",
                "Impossible\r\n"
            ],
            [
                "2 2\r\n1 1\r\n1 2\r\n",
                "Impossible\r\n"
            ],
            [
                "3 3\r\n1 1 2\r\n1 1 3\r\n",
                "Impossible\r\n"
            ],
            [
                "3 2\r\n1 1 2\r\n1 3\r\n",
                "Impossible\r\n"
            ],
            [
                "4 10\r\n1 2 3 3\r\n1 2 1 2 1 2 1 2 3 3\r\n",
                "Ambiguity\r\n"
            ],
            [
                "3 3\r\n1 2 1\r\n2 2 2\r\n",
                "Possible\r\n2 2 2\r\n"
            ],
            [
                "4 2\r\n4 3 2 3\r\n4 4\r\n",
                "Possible\r\n1 1\r\n"
            ]
        ]
    }
]