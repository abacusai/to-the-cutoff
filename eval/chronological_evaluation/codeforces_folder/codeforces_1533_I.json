[
    {
        "name": "Excursions",
        "description": "Irina works in an excursion company in Saratov. Today, she is going to\norganize excursions in the cities of Saratov and Engels. There are \n    n_1\n\nsights in Saratov and \n    n_2\n sights in Engels. The cities are separated by\na river, but there are \n    m\n bus routes that go along the bridges and allow\ntourists to go from Saratov to Engels and vice versa. The \n    i\n-th bus route\ngoes from the \n    x_i\n-th sight in Saratov to the \n    y_i\n-th sight in\nEngels, and in the opposite direction as well. Irina wants to plan excursions\nfor the current day. The excursion trips start in Saratov in the morning,\ncontinue in Engels in the afternoon, and finish in Saratov in the evening.\nEach tourist starts their excursion day at some sight in Saratov, \n    k_i\n\ntourists start at the \n    i\n-th sight. Then the tour guides lead them to\nEngels: at each sight in Saratov, a tour guide chooses a bus route leading\nfrom this sight to Engels, and all the tourists starting from this sight\ntransfer to Engels along this bus route. After the excursions in Engels are\nfinished, the same thing happens: at each sight in Engels, a tour guide\nchooses a bus route leading from this sight to Saratov, and all the tourists\nat this sight transfer to Saratov along this bus route. This process can lead\nto a situation such that some tourists return to the same sight in Saratov\nwhere they started in the morning. Obviously, tourists don't like it; so Irina\nwants to choose where the tour guides take the tourists (both on the way from\nSaratov to Engels and on the way from Engels to Saratov), so that the minimum\npossible number of tourists return to the same sight where they started. Help\nIrina to find an optimal plan! Input The first line contains three integers\n\n    n_1\n, \n    n_2\n and \n    m\n (\n    1 \n    \u2264 n_1, n_2 \n    \u2264 100\n;\n\n    max(n_1, n_2) \n    \u2264 m \n    \u2264 n_1 \n    \u00b7 n_2\n) \u2014 the number of sights\nin Saratov, the number of sights in Engels, and the number of bus routes,\nrespectively. The second line contains \n    n_1\n integers \n    k_1, k_2,\n    \n    \u2026, k_n_1\n (\n    1 \n    \u2264 k_i \n    \u2264 10^6\n), where \n    k_i\n is the\nnumber of tourists starting at the \n    i\n-th sight in Saratov. Then \n    m\n\nlines follow, each describing a bus route: the \n    i\n-th line contains two\nintegers \n    x_i\n and \n    y_i\n (\n    1 \n    \u2264 x_i \n    \u2264 n_1\n; \n    1 \n    \u2264 y_i\n    \n    \u2264 n_2\n) meaning that the \n    i\n-th bus route connects the \n    x_i\n-th\nsight in Saratov and the \n    y_i\n-th sight in Engels. All these bus routes\nare distinct, and each sight has at least one bus route leading to/from it.\nOutput Print one integer \u2014 the minimum possible number of tourists that will\nreturn to the same sight where they started. Examples Input 2 1 2 10 20 1 1 2\n1 Output 10 Input 3 3 6 10 20 30 1 3 3 1 2 3 2 1 3 2 1 2 Output 0\n\n",
        "cf_contest_id": 1533,
        "cf_index": "I",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "constructive algorithms",
            "dfs and similar",
            "flows",
            "graph matchings",
            "graphs"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "2 1 2\r\n10 20\r\n1 1\r\n2 1\r\n",
                "10\r\n"
            ],
            [
                "3 3 6\r\n10 20 30\r\n1 3\r\n3 1\r\n2 3\r\n2 1\r\n3 2\r\n1 2\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 10 50\r\n399238 506058 103311 109407 363591 709295 7220 335548 900317 91975\r\n4 6\r\n1 7\r\n1 4\r\n9 4\r\n10 8\r\n9 5\r\n7 3\r\n7 8\r\n2 5\r\n4 9\r\n6 3\r\n3 6\r\n7 10\r\n5 1\r\n2 8\r\n3 10\r\n1 10\r\n5 2\r\n4 2\r\n6 5\r\n8 6\r\n10 10\r\n4 8\r\n6 7\r\n2 2\r\n6 6\r\n5 5\r\n1 1\r\n4 3\r\n9 8\r\n4 1\r\n8 10\r\n9 7\r\n8 5\r\n2 4\r\n8 3\r\n7 7\r\n8 4\r\n8 7\r\n10 9\r\n3 1\r\n1 6\r\n7 1\r\n1 8\r\n8 8\r\n4 7\r\n9 10\r\n6 8\r\n5 6\r\n10 7\r\n",
                "0\r\n"
            ],
            [
                "25 25 34\r\n414049 601563 873754 417454 401207 153223 431130 576016 524047 170614 879884 393164 787386 746478 650420 553321 316813 235418 823448 71508 939874 717063 467203 541981 25622\r\n9 6\r\n14 22\r\n3 5\r\n24 7\r\n22 7\r\n12 9\r\n21 13\r\n8 18\r\n15 2\r\n25 9\r\n16 25\r\n21 8\r\n8 17\r\n20 15\r\n15 20\r\n2 20\r\n17 1\r\n19 21\r\n16 17\r\n12 14\r\n18 4\r\n10 24\r\n7 19\r\n17 3\r\n1 23\r\n11 10\r\n5 3\r\n19 16\r\n14 19\r\n4 13\r\n13 21\r\n10 11\r\n6 4\r\n23 12\r\n",
                "7229552\r\n"
            ],
            [
                "25 25 42\r\n585604 879036 420992 166437 672796 332173 483055 160459 791570 993827 643331 684424 806731 447330 661539 292753 676243 992304 843484 709853 943704 75321 940895 87852 809707\r\n21 8\r\n12 21\r\n24 2\r\n10 7\r\n14 2\r\n6 25\r\n5 10\r\n22 12\r\n8 15\r\n3 23\r\n21 19\r\n25 17\r\n15 23\r\n7 23\r\n13 8\r\n5 18\r\n4 15\r\n21 24\r\n18 20\r\n24 22\r\n25 13\r\n2 10\r\n24 6\r\n11 9\r\n19 3\r\n5 8\r\n20 5\r\n1 11\r\n16 24\r\n10 4\r\n24 19\r\n2 16\r\n17 10\r\n11 4\r\n1 1\r\n25 1\r\n18 25\r\n25 14\r\n16 25\r\n19 2\r\n9 18\r\n23 15\r\n",
                "3367836\r\n"
            ],
            [
                "25 25 35\r\n530177 150407 654308 79636 717757 856192 427306 792708 458202 442092 107620 920204 620180 316016 620743 1238 597240 482976 221466 335749 3623 832136 574712 416365 339479\r\n15 23\r\n18 10\r\n24 4\r\n6 6\r\n19 25\r\n1 14\r\n11 14\r\n8 11\r\n2 1\r\n14 7\r\n16 18\r\n21 22\r\n22 15\r\n25 17\r\n20 4\r\n9 17\r\n20 16\r\n13 21\r\n7 13\r\n13 20\r\n4 8\r\n12 10\r\n13 9\r\n21 3\r\n17 18\r\n11 5\r\n3 7\r\n2 4\r\n23 2\r\n5 23\r\n1 24\r\n10 12\r\n7 22\r\n8 4\r\n10 19\r\n",
                "5648516\r\n"
            ],
            [
                "25 25 37\r\n701732 395176 201545 20106 22049 810950 255038 344447 725725 298010 936474 19976 606822 273763 664566 740670 956670 464054 274206 782606 40156 223099 48404 962235 123564\r\n17 21\r\n15 13\r\n10 8\r\n7 6\r\n11 17\r\n5 19\r\n11 25\r\n9 24\r\n6 2\r\n23 23\r\n14 9\r\n15 18\r\n17 4\r\n12 22\r\n4 4\r\n3 7\r\n21 21\r\n23 17\r\n19 5\r\n14 19\r\n20 24\r\n1 1\r\n13 11\r\n8 21\r\n5 10\r\n22 20\r\n25 15\r\n16 11\r\n13 16\r\n2 3\r\n3 14\r\n18 12\r\n24 1\r\n25 18\r\n1 18\r\n3 19\r\n17 17\r\n",
                "4238775\r\n"
            ],
            [
                "25 25 38\r\n613601 666548 467566 709113 842818 334969 231993 943992 425062 778979 176572 479947 420271 142449 591066 449155 69154 763238 652188 375798 100075 979914 682221 514940 686040\r\n9 24\r\n17 11\r\n3 1\r\n14 20\r\n7 18\r\n25 7\r\n11 16\r\n21 5\r\n15 9\r\n24 22\r\n5 15\r\n10 10\r\n18 2\r\n23 21\r\n5 14\r\n18 20\r\n10 12\r\n20 25\r\n3 18\r\n4 21\r\n9 4\r\n19 9\r\n1 17\r\n11 15\r\n13 9\r\n16 8\r\n6 20\r\n13 19\r\n2 25\r\n1 23\r\n25 5\r\n8 20\r\n16 6\r\n22 5\r\n12 18\r\n10 20\r\n18 13\r\n17 3\r\n",
                "4201291\r\n"
            ],
            [
                "25 25 41\r\n817860 976724 206291 649584 371303 481214 251214 528435 659880 634896 196914 547016 406912 843301 602185 188587 204392 711613 672225 46847 103905 179388 931721 60810 437421\r\n9 14\r\n25 11\r\n3 12\r\n4 4\r\n8 16\r\n17 20\r\n18 15\r\n1 22\r\n21 20\r\n2 11\r\n8 7\r\n25 3\r\n3 22\r\n1 4\r\n12 9\r\n11 25\r\n14 19\r\n20 4\r\n13 2\r\n5 6\r\n20 19\r\n23 13\r\n10 20\r\n13 5\r\n13 8\r\n24 17\r\n1 18\r\n6 13\r\n24 5\r\n19 9\r\n1 10\r\n14 25\r\n7 12\r\n15 1\r\n12 21\r\n3 25\r\n21 4\r\n16 24\r\n22 5\r\n22 23\r\n9 4\r\n",
                "3928584\r\n"
            ]
        ]
    }
]