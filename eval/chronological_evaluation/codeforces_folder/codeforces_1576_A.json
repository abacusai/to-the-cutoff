[
    {
        "name": "Communication Routing Challenge",
        "description": "In optical communication networks, appropriate path planning can improve the\nutilization of communication resources and bring a smooth communication\nexperience to users. The following figure shows an inter-satellite optical\ncommunication network. User messages are sent from one terrestrial base\nstation (nodes \n    4\n to \n    7\n) and transmitted through satellites (nodes\n\n    0\n to \n    3\n) in space to another terrestrial base station (nodes\n\n    4\n to \n    7\n). In the preceding figures, there are communication\nconnections (edges for short) between base stations and satellites and between\nsatellites. The base stations and satellites are referred to as nodes. User\nmessages are transmitted on these edges and referred to as flows. Some users\nmay make video calls with friends, and some users may send short messages to\ntheir family members. Therefore, the message traffic (called flow rate) of\neach user differs. There are many parallel edges (for example, edges \n    0\n,\n\n    1\n, and \n    2\n) between two nodes, and the capacity of each edge also\ndiffers. Larger capacity indicates that more user messages can be transmitted,\nas well as shorter transmission distance indicates lower latency and better\ncommunication quality. Nodes also have their internal structure. As shown\nbelow, some edges inside a node cannot communicate with each other because\nthese edges (constrained edge pair) are not fully connected. For example, edge\n\n    5\n and edge \n    7\n inside node \n    2\n cannot communicate with each\nother, and therefore flows cannot pass through node \n    2\n by traversing the\ntwo unconnected edges. Now, in the input network, the source node, target\nnode, and required flow rate for each user flow are specified. Because network\nresources are limited, paths may not be successfully calculated for all user\nflows. We hope that you can provide a solution with the highest score. Note,\nthat all edges are undirected, so flows may come in both directions, edges has\nboth capacity and length (named distance), several flows may use the same\nedge, flows may come through the same edge in opposite directions\nsimultaneously, for the purpose of this problem, there is no difference\nbetween satellites and base stations, so flows may come through several base\nstations before reaching the destination station. Constraints The capacity of\neach edge is limited. The total rate of all flows carried by an edge cannot\nexceed the capacity of the edge. The capacity limits the total flows in both\ndirections. The calculated flow path does not allow loops or cycles. Due to\nthe hardware limitation inside satellites, the number of flows passing through\na node (including source and target node) cannot exceed the site flow limit\n(\n    \ud835\udc46\ud835\udc39\ud835\udc3f\n) of the node. The value of \n    \ud835\udc46\ud835\udc39\ud835\udc3f\n is\n\n    200\n. There are multiple parallel edges between two nodes, which may\nbelong to different groups. Links in each group are managed by the same chip\non a node, and there is a group flow limit (\n    \ud835\udc3a\ud835\udc39\ud835\udc3f\n). The total\nnumber of different flows on all the edges in a group cannot exceed the\n\n    \ud835\udc3a\ud835\udc39\ud835\udc3f\n of the group. The value of \n    \ud835\udc3a\ud835\udc39\ud835\udc3f\n is\n\n    100\n. By default, all edges are connected to each other in each node. But\nthere are some constrained edge pairs \u2014 the pairs of edges inside specified\nnodes that cannot communicate with each other. You can make no more than\n\n    2\n submissions on each \n    5\n minutes interval. Input The first line\ncontains four integers separated by space: \n    \ud835\udc41\ud835\udc5c\ud835\udc51\ud835\udc52\ud835\udc36\ud835\udc5c\ud835\udc62\ud835\udc5b\ud835\udc61\n,\n\n    \ud835\udc38\ud835\udc51\ud835\udc54\ud835\udc52\ud835\udc36\ud835\udc5c\ud835\udc62\ud835\udc5b\ud835\udc61\n, \n    \ud835\udc36\ud835\udc5c\ud835\udc5b\ud835\udc60\ud835\udc61\ud835\udc5f\ud835\udc4e\ud835\udc56\ud835\udc5b\ud835\udc52\ud835\udc51\ud835\udc36\ud835\udc5c\ud835\udc62\ud835\udc5b\ud835\udc61\n, and\n\n    \ud835\udc39\ud835\udc59\ud835\udc5c\ud835\udc64\ud835\udc36\ud835\udc5c\ud835\udc62\ud835\udc5b\ud835\udc61\n. \n    8 \n    \u2264\n    \ud835\udc41\ud835\udc5c\ud835\udc51\ud835\udc52\ud835\udc36\ud835\udc5c\ud835\udc62\ud835\udc5b\ud835\udc61\n    \u2264 1400\n,\n\n    15 \n    \u2264\n    \ud835\udc38\ud835\udc51\ud835\udc54\ud835\udc52\ud835\udc36\ud835\udc5c\ud835\udc62\ud835\udc5b\ud835\udc61\n    \u2264 15000\n, \n    3 \n    \u2264\n    \ud835\udc36\ud835\udc5c\ud835\udc5b\ud835\udc60\ud835\udc61\ud835\udc5f\ud835\udc4e\ud835\udc56\ud835\udc5b\ud835\udc52\ud835\udc51\ud835\udc36\ud835\udc5c\ud835\udc62\ud835\udc5b\ud835\udc61\n    \u2264 3600\n, \n    1 \n    \u2264\n    \ud835\udc39\ud835\udc59\ud835\udc5c\ud835\udc64\ud835\udc36\ud835\udc5c\ud835\udc62\ud835\udc5b\ud835\udc61\n    \u2264 14000\n. The next \n    \ud835\udc38\ud835\udc51\ud835\udc54\ud835\udc52\ud835\udc36\ud835\udc5c\ud835\udc62\ud835\udc5b\ud835\udc61\n lines contain information\nabout the network. Each line contains six integers: \n    \ud835\udc38\ud835\udc51\ud835\udc54\ud835\udc52\ud835\udc3c\ud835\udc37\n,\n\n    \ud835\udc3a\ud835\udc5f\ud835\udc5c\ud835\udc62\ud835\udc5d\ud835\udc3c\ud835\udc37\n, \n    \ud835\udc46\ud835\udc61\ud835\udc4e\ud835\udc5f\ud835\udc61\ud835\udc41\ud835\udc5c\ud835\udc51\ud835\udc52\ud835\udc3c\ud835\udc37\n,\n\n    \ud835\udc38\ud835\udc5b\ud835\udc51\ud835\udc41\ud835\udc5c\ud835\udc51\ud835\udc52\ud835\udc3c\ud835\udc37\n, \n    \ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61\ud835\udc4e\ud835\udc5b\ud835\udc50\ud835\udc52\n, and\n\n    \ud835\udc36\ud835\udc4e\ud835\udc5d\ud835\udc4e\ud835\udc50\ud835\udc56\ud835\udc61\ud835\udc66\n. \n    0 \n    \u2264\n    \ud835\udc38\ud835\udc51\ud835\udc54\ud835\udc52\ud835\udc3c\ud835\udc37 <\n    \n    \ud835\udc38\ud835\udc51\ud835\udc54\ud835\udc52\ud835\udc36\ud835\udc5c\ud835\udc62\ud835\udc5b\ud835\udc61\n, \n    0 \n    \u2264\n    \ud835\udc3a\ud835\udc5f\ud835\udc5c\ud835\udc62\ud835\udc5d\ud835\udc3c\ud835\udc37\n    \u2264 4500\n, \n    0\n    \n    \u2264\n    \ud835\udc46\ud835\udc61\ud835\udc4e\ud835\udc5f\ud835\udc61\ud835\udc41\ud835\udc5c\ud835\udc51\ud835\udc52\ud835\udc3c\ud835\udc37, \n    \ud835\udc38\ud835\udc5b\ud835\udc51\ud835\udc41\ud835\udc5c\ud835\udc51\ud835\udc52\ud835\udc3c\ud835\udc37 < \n    \ud835\udc41\ud835\udc5c\ud835\udc51\ud835\udc52\ud835\udc36\ud835\udc5c\ud835\udc62\ud835\udc5b\ud835\udc61\n,\n\n    \ud835\udc46\ud835\udc61\ud835\udc4e\ud835\udc5f\ud835\udc61\ud835\udc41\ud835\udc5c\ud835\udc51\ud835\udc52\ud835\udc3c\ud835\udc37\n    \n    \ud835\udc38\ud835\udc5b\ud835\udc51\ud835\udc41\ud835\udc5c\ud835\udc51\ud835\udc52\ud835\udc3c\ud835\udc37\n, \n    100 \n    \u2264\n    \ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61\ud835\udc4e\ud835\udc5b\ud835\udc50\ud835\udc52\n    \u2264 10000\n, \n    1 < \n    \ud835\udc36\ud835\udc4e\ud835\udc5d\ud835\udc4e\ud835\udc50\ud835\udc56\ud835\udc61\ud835\udc66\n    \u2264 10^5\n.\nIt's guaranteed that only multiple edges may share the same\n\n    \ud835\udc3a\ud835\udc5f\ud835\udc5c\ud835\udc62\ud835\udc5d\ud835\udc3c\ud835\udc37\n. The next \n    \ud835\udc36\ud835\udc5c\ud835\udc5b\ud835\udc60\ud835\udc61\ud835\udc5f\ud835\udc4e\ud835\udc56\ud835\udc5b\ud835\udc52\ud835\udc51\ud835\udc36\ud835\udc5c\ud835\udc62\ud835\udc5b\ud835\udc61\n lines\ncontain information about the edge pairs that are not connected in the\nspecified nodes of the network. All other edges are connected to each other by\ndefault. Each line contains three integers: \n    \ud835\udc41\ud835\udc5c\ud835\udc51\ud835\udc52\ud835\udc3c\ud835\udc37\n,\n\n    \ud835\udc38\ud835\udc51\ud835\udc54\ud835\udc52\ud835\udc3c\ud835\udc37_1\n, and \n    \ud835\udc38\ud835\udc51\ud835\udc54\ud835\udc52\ud835\udc3c\ud835\udc37_2\n. \n    0 \n    \u2264\n    \ud835\udc41\ud835\udc5c\ud835\udc51\ud835\udc52\ud835\udc3c\ud835\udc37 < \n    \ud835\udc41\ud835\udc5c\ud835\udc51\ud835\udc52\ud835\udc36\ud835\udc5c\ud835\udc62\ud835\udc5b\ud835\udc61\n, \n    0 \n    \u2264\n    \ud835\udc38\ud835\udc51\ud835\udc54\ud835\udc52\ud835\udc3c\ud835\udc37_1,\n    \n    \ud835\udc38\ud835\udc51\ud835\udc54\ud835\udc52\ud835\udc3c\ud835\udc37_2 < \n    \ud835\udc38\ud835\udc51\ud835\udc54\ud835\udc52\ud835\udc36\ud835\udc5c\ud835\udc62\ud835\udc5b\ud835\udc61\n, \n    \ud835\udc38\ud835\udc51\ud835\udc54\ud835\udc52\ud835\udc3c\ud835\udc37_1 \n    \n    \ud835\udc38\ud835\udc51\ud835\udc54\ud835\udc52\ud835\udc3c\ud835\udc37_2\n. The next \n    \ud835\udc39\ud835\udc59\ud835\udc5c\ud835\udc64\ud835\udc36\ud835\udc5c\ud835\udc62\ud835\udc5b\ud835\udc61\n lines contain\ninformation about the flows to be calculated. Each line contains four\nintegers: \n    \ud835\udc39\ud835\udc59\ud835\udc5c\ud835\udc64\ud835\udc3c\ud835\udc37\n, \n    \ud835\udc46\ud835\udc5c\ud835\udc62\ud835\udc5f\ud835\udc50\ud835\udc52\ud835\udc41\ud835\udc5c\ud835\udc51\ud835\udc52\n,\n\n    \ud835\udc47\ud835\udc4e\ud835\udc5f\ud835\udc54\ud835\udc52\ud835\udc61\ud835\udc41\ud835\udc5c\ud835\udc51\ud835\udc52\n, and \n    \ud835\udc39\ud835\udc59\ud835\udc5c\ud835\udc64\ud835\udc45\ud835\udc4e\ud835\udc61\ud835\udc52\n. \n    0 \n    \u2264\n    \ud835\udc39\ud835\udc59\ud835\udc5c\ud835\udc64\ud835\udc3c\ud835\udc37 < \n    \ud835\udc39\ud835\udc59\ud835\udc5c\ud835\udc64\ud835\udc36\ud835\udc5c\ud835\udc62\ud835\udc5b\ud835\udc61\n, \n    0 \n    \u2264\n    \ud835\udc46\ud835\udc5c\ud835\udc62\ud835\udc5f\ud835\udc50\ud835\udc52\ud835\udc41\ud835\udc5c\ud835\udc51\ud835\udc52,\n    \n    \ud835\udc47\ud835\udc4e\ud835\udc5f\ud835\udc54\ud835\udc52\ud835\udc61\ud835\udc41\ud835\udc5c\ud835\udc51\ud835\udc52 < \n    \ud835\udc41\ud835\udc5c\ud835\udc51\ud835\udc52\ud835\udc36\ud835\udc5c\ud835\udc62\ud835\udc5b\ud835\udc61\n, \n    \ud835\udc46\ud835\udc5c\ud835\udc62\ud835\udc5f\ud835\udc50\ud835\udc52\ud835\udc41\ud835\udc5c\ud835\udc51\ud835\udc52\n    \n    \ud835\udc47\ud835\udc4e\ud835\udc5f\ud835\udc54\ud835\udc52\ud835\udc61\ud835\udc41\ud835\udc5c\ud835\udc51\ud835\udc52\n, \n    2 \n    \u2264\n    \ud835\udc39\ud835\udc59\ud835\udc5c\ud835\udc64\ud835\udc45\ud835\udc4e\ud835\udc61\ud835\udc52\n    \u2264 12000\n\nDon't forget that the \n    \ud835\udc46\ud835\udc39\ud835\udc3f\n and \n    \ud835\udc3a\ud835\udc39\ud835\udc3f\n mentioned\nabove are also important parameters. For the simplicity, both\n\n    \ud835\udc38\ud835\udc51\ud835\udc54\ud835\udc52\ud835\udc3c\ud835\udc37\n and \n    \ud835\udc39\ud835\udc59\ud835\udc5c\ud835\udc64\ud835\udc3c\ud835\udc37\n of the \n    i\n-th\n(\n    0\n-indexed) edge (flow) is always equal to \n    i\n. Output In the first\nline, output the number of your success flows. Next, each line output edge\ninformation about the path that a flow passes through. The format is as\nfollows: \n    \ud835\udc39\ud835\udc59\ud835\udc5c\ud835\udc64\ud835\udc3c\ud835\udc37\n     \n    \ud835\udc38\ud835\udc51\ud835\udc54\ud835\udc52\ud835\udc3c\ud835\udc37_1\n     \n    \ud835\udc38\ud835\udc51\ud835\udc54\ud835\udc52\ud835\udc3c\ud835\udc37_2\n    \n    \ud835\udc38\ud835\udc51\ud835\udc54\ud835\udc52\ud835\udc3c\ud835\udc37_3\n     \n    \u2026\n     \n    \ud835\udc38\ud835\udc51\ud835\udc54\ud835\udc52\ud835\udc3c\ud835\udc37_n\n. There is no\nrequirement on the output sequence between flow paths, but edges in one flow\nmust be outputted in order, from source node to target node. Please output all\nsuccessfully calculated flow paths. For other flows that are not output, the\nchecker determines that you have not found appropriate paths for the flows by\ndefault. Scoring The solutions that violate constraints, time out, or exceed\nthe memory limit are invalid. According to the formula\n\n    \ud835\udc46\ud835\udc50\ud835\udc5c\ud835\udc5f\ud835\udc52=\n    \ud835\udc46\ud835\udc62\ud835\udc50\ud835\udc50\ud835\udc52\ud835\udc60\ud835\udc60\ud835\udc39\ud835\udc59\ud835\udc5c\ud835\udc64\ud835\udc41\ud835\udc62\ud835\udc5a+\n    max\n    (1-\n    (\n    \n    \ud835\udc34\ud835\udc63\ud835\udc54\ud835\udc37\ud835\udc56\ud835\udc60\ud835\udc61\ud835\udc4e\ud835\udc5b\ud835\udc50\ud835\udc52/1000000\n    ),0\n    )\n,\nthe solution with a higher score wins. (That is, the solution with more\nsuccessfully planned flow paths wins. If two solutions have the same number of\nsuccessfully planned flow paths, the solution with a smaller average of path\ndistances wins. Output with \n    0\n flow paths will be considered incorrect.)\nIf two solutions have the same score, the solution submitted first wins. For\nmultiple tests, the ranking is performed based on the sum of all tests. If the\nsolution has no result on any test, it will be recorded as no result on the\nwhole. Among your multiple submissions, the one with the highest score is the\nfinal score. The checker runs your solution on exactly one CPU core, so\nmultithreading implementation will not provide any profit. You can make no\nmore than \n    2\n submissions on each \n    5\n minutes interval. Example Input\n8 15 3 1 0 0 0 1 100 1050 1 1 0 1 200 2200 2 1 0 1 200 99400 3 2 0 3 100 450 4\n3 0 3 500 1120 5 4 1 2 1000 40000 6 5 2 3 600 10000 7 5 2 3 600 10000 8 6 1 4\n120 2500 9 6 1 4 120 450 10 7 1 5 170 1250 11 8 2 5 200 2500 12 9 3 5 100 1250\n13 10 3 6 300 1150 14 11 3 7 300 1100 2 5 7 2 6 7 2 6 11 0 4 6 100 Output 1 0\n8 0 3 13 Note The total distance of a flow path is \n    620\n (\n    120 + 100 +\n    100 + 300 = 620\n). (Note: 0 9 10 12 13 is also a valid output result.)\n\n",
        "cf_contest_id": 1576,
        "cf_index": "A",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "*special"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [],
        "private_cases": []
    }
]