[
    {
        "name": "String and Operations",
        "description": "You are given a string \n    s\n consisting of \n    n\n characters. These\ncharacters are among the first \n    k\n lowercase letters of the Latin\nalphabet. You have to perform \n    n\n operations with the string. During the\n\n    i\n-th operation, you take the character that initially occupied the\n\n    i\n-th position, and perform one of the following actions with it: swap it\nwith the previous character in the string (if it exists). This operation is\nrepresented as L; swap it with the next character in the string (if it\nexists). This operation is represented as R; cyclically change it to the\nprevious character in the alphabet (b becomes a, c becomes b, and so on; a\nbecomes the \n    k\n-th letter of the Latin alphabet). This operation is\nrepresented as D; cyclically change it to the next character in the alphabet\n(a becomes b, b becomes c, and so on; the \n    k\n-th letter of the Latin\nalphabet becomes a). This operation is represented as U; do nothing. This\noperation is represented as 0. For example, suppose the initial string is\ntest, \n    k = 20\n, and the sequence of operations is URLD. Then the string is\ntransformed as follows: the first operation is U, so we change the underlined\nletter in test to the next one in the first \n    20\n Latin letters, which is\na. The string is now aest; the second operation is R, so we swap the\nunderlined letter with the next one in the string aest. The string is now\naset; the third operation is L, so we swap the underlined letter with the\nprevious one in the string aset (note that this is now the \n    2\n-nd\ncharacter of the string, but it was initially the \n    3\n-rd one, so the\n\n    3\n-rd operation is performed to it). The resulting string is saet; the\nfourth operation is D, so we change the underlined letter in saet to the\nprevious one in the first \n    20\n Latin letters, which is s. The string is\nnow saes. The result of performing the sequence of operations is saes. Given\nthe string \n    s\n and the value of \n    k\n, find the lexicographically\nsmallest string that can be obtained after applying a sequence of operations\nto \n    s\n. Input The first line contains one integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 1000\n) \u2014 the number of test cases. Each test case consists of two\nlines. The first line contains two integers \n    n\n and \n    k\n (\n    1 \n    \u2264 n\n    \n    \u2264 500\n; \n    2 \n    \u2264 k \n    \u2264 26\n). The second line contains a string\n\n    s\n consisting of \n    n\n characters. Each character is one of the \n    k\n\nfirst letters of the Latin alphabet (in lower case). Output For each test\ncase, print one line containing the lexicographically smallest string that can\nbe obtained from \n    s\n using one sequence of operations. Example Input 6 4 2\nbbab 7 5 cceddda 6 5 ecdaed 7 4 dcdbdaa 8 3 ccabbaca 5 7 eabba Output aaaa\nbaccacd aabdac aabacad aaaaaaaa abadb\n\n",
        "cf_contest_id": 1455,
        "cf_index": "F",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n4 2\r\nbbab\r\n7 5\r\ncceddda\r\n6 5\r\necdaed\r\n7 4\r\ndcdbdaa\r\n8 3\r\nccabbaca\r\n5 7\r\neabba\r\n",
                "aaaa\r\nbaccacd\r\naabdac\r\naabacad\r\naaaaaaaa\r\nabadb\r\n"
            ]
        ],
        "private_cases": []
    }
]