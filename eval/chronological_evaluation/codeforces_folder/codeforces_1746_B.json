[
    {
        "name": "Rebellion",
        "description": "You have an array \n    a\n of size \n    n\n consisting only of zeroes and ones.\nYou can do the following operation: choose two indices \n    1 \n    \u2264 i , j \n    \u2264\n    n\n, \n    i \n     j\n, add \n    a_i\n to \n    a_j\n, remove \n    a_i\n from\n\n    a\n. Note that elements of \n    a\n can become bigger than \n    1\n after\nperforming some operations. Also note that \n    n\n becomes \n    1\n less after\nthe operation. What is the minimum number of operations needed to make \n    a\n\nnon-decreasing, i. e. that each element is not less than the previous element?\nInput Each test contains multiple test cases. The first line contains the\nnumber of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n). The description of\nthe test cases follows. The first line of each test case contains an integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n), the size of array \n    a\n. Next line\ncontains \n    n\n integers \n    a_1, a_2, \n    \u2026 a_n\n (\n    a_i\n is\n\n    0\n or \n    1\n), elements of array \n    a\n. It's guaranteed that sum of\n\n    n\n over all test cases doesn't exceed \n    2 \n    \u00b7 10^5\n. Output For\neach test case print a single integer, minimum number of operations needed to\nmake \n    a\n non-decreasing. Example Input 4 8 0 0 1 1 1 1 1 1 5 1 0 0 1 1 2 1\n0 11 1 1 0 0 1 0 0 1 1 1 0 Output 0 1 1 3 Note In the first test case, \n    a\n\nis already non-decreasing, so you don't need to do any operations and the\nanswer is \n    0\n. In the second test case, you can perform an operation for\n\n    i = 1\n and \n    j = 5\n, so \n    a\n will be equal to \n    [0, 0, 1, 2]\n\nand it becomes non-decreasing. In the third test case, you can perform an\noperation for \n    i = 2\n and \n    j = 1\n, so \n    a\n will be equal to\n\n    [1]\n and it becomes non-decreasing.\n\n",
        "cf_contest_id": 1746,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n8\r\n0 0 1 1 1 1 1 1\r\n5\r\n1 0 0 1 1\r\n2\r\n1 0\r\n11\r\n1 1 0 0 1 0 0 1 1 1 0\r\n",
                "0\r\n1\r\n1\r\n3\r\n"
            ]
        ],
        "private_cases": []
    }
]