[
    {
        "name": "Fibonacci-ish",
        "description": "Yash has recently learnt about the Fibonacci sequence and is very excited\nabout it. He calls a sequence Fibonacci-ish if the sequence consists of at\nleast two elements f0 and f1 are arbitrary fn + 2 = fn + 1 + fn for all n \u2265 0.\nYou are given some sequence of integers a1, a2, ..., an. Your task is\nrearrange elements of this sequence in such a way that its longest possible\nprefix is Fibonacci-ish sequence. Input The first line of the input contains a\nsingle integer n (2 \u2264 n \u2264 1000) \u2014 the length of the sequence ai. The second\nline contains n integers a1, a2, ..., an (|ai| \u2264 10^9). Output Print the\nlength of the longest possible Fibonacci-ish prefix of the given sequence\nafter rearrangement. Examples Input 3 1 2 -1 Output 3 Input 5 28 35 7 14 21\nOutput 4 Note In the first sample, if we rearrange elements of the sequence as\n- 1, 2, 1, the whole sequence ai would be Fibonacci-ish. In the second sample,\nthe optimal way to rearrange elements is , , , , 28.\n\n",
        "cf_contest_id": 633,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dp",
            "hashing",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n1 2 -1\r\n",
                "3\r\n"
            ],
            [
                "5\r\n28 35 7 14 21\r\n",
                "4\r\n"
            ]
        ],
        "private_cases": [
            [
                "11\r\n-9 -1 -10 9 7 -4 0 -8 -3 3 5\r\n",
                "5\r\n"
            ],
            [
                "10\r\n-4 -8 -8 8 -9 0 -7 9 1 0\r\n",
                "4\r\n"
            ],
            [
                "2\r\n2 2\r\n",
                "2\r\n"
            ],
            [
                "4\r\n1 -1 0 -2\r\n",
                "4\r\n"
            ],
            [
                "2\r\n1000000000 1000000000\r\n",
                "2\r\n"
            ],
            [
                "3\r\n1 1 2\r\n",
                "3\r\n"
            ],
            [
                "5\r\n0 0 0 0 0\r\n",
                "5\r\n"
            ],
            [
                "6\r\n1 -1 0 -1 -1 -2\r\n",
                "6\r\n"
            ],
            [
                "5\r\n-7 0 -7 -7 -14\r\n",
                "5\r\n"
            ],
            [
                "3\r\n0 -44 -49\r\n",
                "2\r\n"
            ],
            [
                "5\r\n-1 1 0 0 0\r\n",
                "3\r\n"
            ],
            [
                "2\r\n0 0\r\n",
                "2\r\n"
            ],
            [
                "3\r\n0 0 0\r\n",
                "3\r\n"
            ],
            [
                "4\r\n0 0 0 0\r\n",
                "4\r\n"
            ],
            [
                "5\r\n0 0 0 0 0\r\n",
                "5\r\n"
            ],
            [
                "10\r\n0 0 0 0 0 0 0 0 0 0\r\n",
                "10\r\n"
            ]
        ]
    }
]