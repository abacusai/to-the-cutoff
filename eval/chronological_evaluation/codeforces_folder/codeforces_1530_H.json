[
    {
        "name": "Turing's Award",
        "description": "Alan Turing is standing on a tape divided into cells that is infinite in both\ndirections. Cells are numbered with consecutive integers from left to right.\nAlan is initially standing in cell \n    0\n. Every cell \n    x\n has cell \n    x -\n    1\n on the left and cell \n    x + 1\n on the right. Each cell can either\ncontain an integer or be empty. Initially all cells are empty. Alan is given a\npermutation \n    a_1, a_2, \n    \u2026, a_n\n of integers from \n    1\n to \n    n\n\nthat was chosen uniformly at random among all permutations of length \n    n\n.\nAt time \n    1\n, integer \n    a_1\n is written down into cell \n    0\n where\nAlan is located. At each time \n    i\n from \n    2\n to \n    n\n inclusive, the\nfollowing happens. First, Alan decides whether to stay in the same cell he's\ncurrently in, move to the neighboring cell on the left, or move to the\nneighboring cell on the right. After that, integer \n    a_i\n is written down\ninto the cell where Alan is located. If that cell already contained some\ninteger, the old integer is overwritten and irrelevant from that moment on.\nOnce \n    a_n\n is written down into some cell at time \n    n\n, sequence\n\n    b\n of all integers contained in the cells from left to right is formed.\nEmpty cells are ignored. Turing's award is equal to the length of the longest\nincreasing subsequence of sequence \n    b\n. Help Alan and determine the\nlargest possible value of his award if he acts optimally. Input Each test\ncontains multiple test cases. The first line contains the number of test cases\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n). Description of the test cases follows.\nEach test case is given in two lines. The first line of each test case\ncontains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 15\n     000\n) \u2014 the\nlength of the permutation given to Alan. The second line contains \n    n\n\ndistinct integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n) \u2014\nthe elements of the permutation. It is guaranteed that the permutation was\nchosen uniformly at random among all permutations of the corresponding length.\nThe sum of \n    n\n over all test cases does not exceed \n    15\n     000\n. Output\nFor each test case output a single integer \u2014 the largest possible value of\nTuring's award. Hacks are not allowed for this problem. Example Input 4 2 1 2\n4 4 1 2 3 7 3 6 5 7 4 1 2 7 5 2 3 7 6 1 4 Output 2 3 4 4 Note Longest\nincreasing subsequence of sequence \n    b\n is the longest increasing sequence\nthat can be obtained from \n    b\n by deletion of several (possibly, zero or\nall) elements. In the first test case, Alan can make a decision only at time\n\n    2\n. If Alan stays in cell \n    0\n, sequence \n    b\n will be equal to\n\n    [2]\n. If Alan moves to the left, to cell \n    -1\n, sequence \n    b\n will\nbe equal to \n    [2, 1]\n. If Alan moves to the right, to cell \n    1\n,\nsequence \n    b\n will be equal to \n    [1, 2]\n. Only in the last case the\nlength of the longest increasing subsequence of \n    b\n is \n    2\n, therefore,\nthe answer is equal to \n    2\n. In the second test case, one of the optimal\nsequences of actions looks as follows: move to the left at times \n    2\n and\n\n    3\n, and move to the right at time \n    4\n. Then sequence \n    b\n will be\nequal to \n    [2, 3, 4]\n, and the length of its longest increasing subsequence\nis \n    3\n. In the third test case, one of the best ways is to always move to\nthe left. Then sequence \n    b\n will be equal to \n    [2, 1, 4, 7, 5, 6, 3]\n,\nand the length of its longest increasing subsequence is \n    4\n. In the fourth\ntest case, one of the best ways is to move to the right four times, then move\nto the left once, and stay in the same cell once. Sequence \n    b\n will be\nequal to \n    [5, 2, 3, 4, 6]\n.\n\n",
        "cf_contest_id": 1530,
        "cf_index": "H",
        "cf_rating": 3400,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp"
        ],
        "time_limit_seconds": 10.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4\r\n2\r\n1 2\r\n4\r\n4 1 2 3\r\n7\r\n3 6 5 7 4 1 2\r\n7\r\n5 2 3 7 6 1 4\r\n",
                "2\r\n3\r\n4\r\n4\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2\r\n2 1\r\n",
                "2\r\n"
            ],
            [
                "20\r\n8\r\n2 4 3 6 1 5 7 8\r\n7\r\n3 1 6 7 4 2 5\r\n4\r\n1 2 3 4\r\n5\r\n2 4 5 3 1\r\n3\r\n3 2 1\r\n5\r\n5 4 3 2 1\r\n7\r\n4 6 7 1 5 2 3\r\n10\r\n3 2 6 7 8 1 4 10 9 5\r\n6\r\n5 2 3 4 6 1\r\n3\r\n3 1 2\r\n2\r\n2 1\r\n4\r\n4 2 1 3\r\n2\r\n1 2\r\n10\r\n1 10 2 3 5 4 8 9 7 6\r\n6\r\n6 4 1 5 2 3\r\n4\r\n1 4 3 2\r\n7\r\n7 4 2 3 5 1 6\r\n3\r\n2 3 1\r\n10\r\n10 9 2 3 7 8 5 1 6 4\r\n9\r\n8 4 1 9 5 2 3 6 7\r\n",
                "5\r\n3\r\n4\r\n3\r\n3\r\n5\r\n4\r\n6\r\n4\r\n2\r\n2\r\n3\r\n2\r\n7\r\n4\r\n3\r\n4\r\n2\r\n5\r\n5\r\n"
            ]
        ]
    }
]