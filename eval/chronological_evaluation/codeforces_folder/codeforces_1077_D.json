[
    {
        "name": "Cutting Out",
        "description": "You are given an array \n    s\n consisting of \n    n\n integers. You have to\nfind any array \n    t\n of length \n    k\n such that you can cut out maximum\nnumber of copies of array \n    t\n from array \n    s\n. Cutting out the copy of\n\n    t\n means that for each element \n    t_i\n of array \n    t\n you have to\nfind \n    t_i\n in \n    s\n and remove it from \n    s\n. If for some \n    t_i\n\nyou cannot find such element in \n    s\n, then you cannot cut out one more copy\nof \n    t\n. The both arrays can contain duplicate elements. For example, if\n\n    s = [1, 2, 3, 2, 4, 3, 1]\n and \n    k = 3\n then one of the possible\nanswers is \n    t = [1, 2, 3]\n. This array \n    t\n can be cut out \n    2\n\ntimes. To cut out the first copy of \n    t\n you can use the elements \n    [1,\n    \n    \n    2, 3, 2, 4, \n    \n    3,\n    \n    \n    1]\n (use the highlighted elements). After cutting\nout the first copy of \n    t\n the array \n    s\n can look like \n    [1, 3, 2,\n    4]\n. To cut out the second copy of \n    t\n you can use the elements\n\n    [\n    \n    1, \n    \n    3,\n    \n    \n    2, 4]\n. After cutting out the second copy of\n\n    t\n the array \n    s\n will be \n    [4]\n. Your task is to find such array\n\n    t\n that you can cut out the copy of \n    t\n from \n    s\n maximum number\nof times. If there are multiple answers, you may choose any of them. Input The\nfirst line of the input contains two integers \n    n\n and \n    k\n (\n    1 \n    \u2264\n    k \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of elements in \n    s\n and the\ndesired number of elements in \n    t\n, respectively. The second line of the\ninput contains exactly \n    n\n integers \n    s_1, s_2, \n    \u2026, s_n\n (\n    1\n    \n    \u2264 s_i \n    \u2264 2 \n    \u00b7 10^5\n). Output Print \n    k\n integers \u2014 the\nelements of array \n    t\n such that you can cut out maximum possible number of\ncopies of this array from \n    s\n. If there are multiple answers, print any of\nthem. The required array \n    t\n can contain duplicate elements. All the\nelements of \n    t\n (\n    t_1, t_2, \n    \u2026, t_k\n) should satisfy the\nfollowing condition: \n    1 \n    \u2264 t_i \n    \u2264 2 \n    \u00b7 10^5\n. Examples Input 7\n3 1 2 3 2 4 3 1 Output 1 2 3 Input 10 4 1 3 1 3 10 3 7 7 12 3 Output 7 3 1 3\nInput 15 2 1 2 1 1 1 2 1 1 2 1 2 1 1 1 1 Output 1 1 Note The first example is\ndescribed in the problem statement. In the second example the only answer is\n\n    [7, 3, 1, 3]\n and any its permutations. It can be shown that you cannot\nchoose any other array such that the maximum number of copies you can cut out\nwould be equal to \n    2\n. In the third example the array \n    t\n can be cut\nout \n    5\n times.\n\n",
        "cf_contest_id": 1077,
        "cf_index": "D",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "sortings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 3\r\n1 2 3 2 4 3 1\r\n",
                "1 2 3\r\n"
            ],
            [
                "10 4\r\n1 3 1 3 10 3 7 7 12 3\r\n",
                "1 3 7 3\r\n"
            ],
            [
                "15 2\r\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\r\n",
                "1 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 2\r\n1 1\r\n",
                "1 1\r\n"
            ],
            [
                "5 2\r\n2 2 2 3 1\r\n",
                "3 2\r\n"
            ],
            [
                "6 2\r\n1 2 2 3 4 4\r\n",
                "2 4\r\n"
            ],
            [
                "1 1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "12 5\r\n1 1 1 1 1 1 2 2 2 2 2 2\r\n",
                "2 1 2 1 2\r\n"
            ],
            [
                "40 3\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3\r\n",
                "3 2 1\r\n"
            ],
            [
                "20 10\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "1 1 1 1 1 1 1 1 1 1\r\n"
            ],
            [
                "30 15\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2\r\n",
                "1 1 1 1 2 2 1 2 1 1 2 1 1 2 1\r\n"
            ],
            [
                "36 17\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3\r\n",
                "1 1 1 2 2 3 1 1 3 1 2 3 1 2 1 3 1\r\n"
            ],
            [
                "8 4\r\n1 1 1 1 1 1 2 2\r\n",
                "1 2 1 1\r\n"
            ]
        ]
    }
]