[
    {
        "name": "JS Minification",
        "description": "International Coding Procedures Company (ICPC) writes all its code in Jedi\nScript (JS) programming language. JS does not get compiled, but is delivered\nfor execution in its source form. Sources contain comments, extra whitespace\n(including trailing and leading spaces), and other non-essential features that\nmake them quite large but do not contribute to the semantics of the code, so\nthe process of minification is performed on source files before their delivery\nto execution to compress sources while preserving their semantics. You are\nhired by ICPC to write JS minifier for ICPC. Fortunately, ICPC adheres to very\nstrict programming practices and their JS sources are quite restricted in\ngrammar. They work only on integer algorithms and do not use floating point\nnumbers and strings. Every JS source contains a sequence of lines. Each line\ncontains zero or more tokens that can be separated by spaces. On each line, a\npart of the line that starts with a hash character ('#' code 35), including\nthe hash character itself, is treated as a comment and is ignored up to the\nend of the line. Each line is parsed into a sequence of tokens from left to\nright by repeatedly skipping spaces and finding the longest possible token\nstarting at the current parsing position, thus transforming the source code\ninto a sequence of tokens. All the possible tokens are listed below: A\nreserved token is any kind of operator, separator, literal, reserved word, or\na name of a library function that should be preserved during the minification\nprocess. Reserved tokens are fixed strings of non-space ASCII characters that\ndo not contain the hash character ('#' code 35). All reserved tokens are given\nas an input to the minification process. A number token consists of a sequence\nof digits, where a digit is a character from zero ('0') to nine ('9')\ninclusive. A word token consists of a sequence of characters from the\nfollowing set: lowercase letters, uppercase letters, digits, underscore ('_'\ncode 95), and dollar sign ('' code 36). A word does not start with a digit.\nNote, that during parsing the longest sequence of characters that satisfies\neither a number or a word definition, but that appears in the list of reserved\ntokens, is considered to be a reserved token instead. During the minification\nprocess words are renamed in a systematic fashion using the following\nalgorithm: Take a list of words that consist only of lowercase letters ordered\nfirst by their length, then lexicographically: \"a\", \"b\", ..., \"z\", \"aa\", \"ab\",\n..., excluding reserved tokens, since they are not considered to be words.\nThis is the target word list. Rename the first word encountered in the input\ntoken sequence to the first word in the target word list and all further\noccurrences of the same word in the input token sequence, too. Rename the\nsecond new word encountered in the input token sequence to the second word in\nthe target word list, and so on. The goal of the minification process is to\nconvert the given source to the shortest possible line (counting spaces) that\nstill parses to the same sequence of tokens with the correspondingly renamed\nwords using these JS parsing rules. Input The first line of the input contains\na single integer\n    n\n(\n    0 \n    \u2264 n \n    \u2264 40\n) \u2014 the number of reserved\ntokens. The second line of the input contains the list of reserved tokens\nseparated by spaces without repetitions in the list. Each reserved token is at\nleast one and at most 20 characters long and contains only characters with\nASCII codes from 33 (exclamation mark) to 126 (tilde) inclusive, with\nexception of a hash character ('#' code 35). The third line of the input\ncontains a single integer\n    m\n(\n    1 \n    \u2264 m \n    \u2264 40\n) \u2014 the number of\nlines in the input source code. Next\n    m\nlines contain the input source,\neach source line is at most 80 characters long (counting leading and trailing\nspaces). Each line contains only characters with ASCII codes from 32 (space)\nto 126 (tilde) inclusive. The source code is valid and fully parses into a\nsequence of tokens. Output Write to the output a single line that is the\nresult of the minification process on the input source code. The output source\nline shall parse to the same sequence of tokens as the input source with the\ncorrespondingly renamed words and shall contain the minimum possible number of\nspaces needed for that. If there are multiple ways to insert the minimum\npossible number of spaces into the output, use any way. Examples Input 16 fun\nwhile return var  ( ) , ; > = + ++ - \u2013 9 fun fib(num)  # compute fibs var\nreturn_value = 1, prev = 0, temp; while (num > 0)  temp = return_value;\nreturn_value = return_value + prev; prev = temp; num\u2013;  return return_value;\n Output fun a(b)var c=1,d=0,e;while(b>0)e=c;c=c+d;d=e;b\u2013;return c; Input\n10 ( ) + ++ : -> >> >>: b c) 2 (val1++ + +4 kb) >> :out b-> + 10 >>: t #\nusing >>: Output (a+++ +4c )>> :d b->+10>>:e\n\n",
        "cf_contest_id": 1089,
        "cf_index": "J",
        "cf_rating": 3200,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.5,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "16\r\nfun while return var { } ( ) , ; > = + ++ - --\r\n9\r\nfun fib(num) { # compute fibs\r\n  var return_value = 1, prev = 0, temp;\r\n  while (num > 0) {\r\n    temp = return_value; return_value = return_value + prev;\r\n    prev = temp;\r\n    num--;\r\n  }\r\n  return return_value;\r\n}\r\n",
                "fun a(b){var c=1,d=0,e;while(b>0){e=c;c=c+d;d=e;b--;}return c;}\r\n"
            ],
            [
                "10\r\n( ) + ++ : -> >> >>: b c)\r\n2\r\n($val1++ + +4 kb) >> :out\r\nb-> + 10 >>: t # using >>: \r\n",
                "(a+++ +4c )>> :d b->+10>>:e\r\n"
            ]
        ],
        "private_cases": [
            [
                "0\r\n\r\n2\r\none two three four five seven\r\none two three four five seven\r\n",
                "a b c d e f a b c d e f\r\n"
            ],
            [
                "3\r\n1 8 21\r\n2\r\n0 1 1 2 3 5 8 13 21\r\n0 1 1 2 3 5 8 13 21\r\n",
                "0 1 1 2 3 5 8 13 21 0 1 1 2 3 5 8 13 21\r\n"
            ],
            [
                "4\r\n+ ++ +++ ++++\r\n2\r\n+ ++ +++ ++++ ++ + +++ ++++ + ++++ ++ +\r\n+ ++ +++ ++++ ++ + +++ ++++ + ++++ ++ +\r\n",
                "+ ++ +++ ++++++ + +++ +++++ ++++++ + + ++ +++ ++++++ + +++ +++++ ++++++ +\r\n"
            ],
            [
                "2\r\nz 05c\r\n2\r\n01 x 02 y 03 z 05 xx 06 yy 07 zz 08 xxx 09 yyy 10 zzzz                       \r\n11 x 12 y 13 z 15 xx 16 yy 17 zz 18 xxx 19 yyy 20 zzzz  # ^^^ trailing spaces!\r\n",
                "01a 02b 03z 05 c 06d 07e 08f 09g 10h 11a 12b 13z 15c 16d 17e 18f 19g 20h\r\n"
            ],
            [
                "10\r\n+ - * / ^ a+ b- c* 1/ 01^\r\n5\r\nx + y + z + 1 + 01 + 001\r\nx - y - z - 1 - 01 - 001\r\nx * y * z * 1 * 01 * 001\r\nx / y / z / 1 / 01 / 001\r\nx ^ y ^ z ^ 1 ^ 01 ^ 001\r\n",
                "a +b+c+1+01+001a-b -c-1-01-001a*b*c *1*01*001a/b/c/1 /01/001a^b^c^1^01 ^001\r\n"
            ],
            [
                "8\r\n< > << >> in out fun in>>out\r\n6\r\n# let's rock\r\nin>>out in >> out inout>>outin bin>>out # yay!\r\nfun>>in>>out funin>>out out>>in <in> > <out>\r\nin> >> >>> >>>> >>>>>out\r\n# what's going on here?\r\n<> <> <> <> <fun> <funfun> <not so fun>\r\n",
                "in>>outin>> out a>>b c>>out fun>>in>>outd>>out out>>in<in> ><out>in> >>>>> >>>>>>>>>out<><><><><fun><e><f g fun>\r\n"
            ],
            [
                "2\r\n! 123!!456\r\n4\r\n1112233334447777778888999000001111  222233444455566677778889991 # quite a long!\r\n123!!456789 # ho-ho! what a catch!\r\n123!!456abc # a variant of that\r\n0123!!456789 # that is not going to work\r\n",
                "1112233334447777778888999000001111 222233444455566677778889991 123!!456789 123!!456a 0123!!456789\r\n"
            ],
            [
                "4\r\n+ = +=+ =+=\r\n1\r\n+ = + =\r\n",
                "+= +=\r\n"
            ],
            [
                "3\r\n+ = =+=\r\n1\r\n+ = + =\r\n",
                "+=+ =\r\n"
            ],
            [
                "6\r\n+=-; =- + = - ;\r\n1\r\n+ = - ;\r\n",
                "+= -;\r\n"
            ]
        ]
    }
]