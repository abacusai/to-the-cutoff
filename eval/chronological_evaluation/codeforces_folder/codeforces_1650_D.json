[
    {
        "name": "Twist the Permutation",
        "description": "Petya got an array \n    a\n of numbers from \n    1\n to \n    n\n, where\n\n    a[i]=i\n. He performed \n    n\n operations sequentially. In the end, he\nreceived a new state of the \n    a\n array. At the \n    i\n-th operation, Petya\nchose the first \n    i\n elements of the array and cyclically shifted them to\nthe right an arbitrary number of times (elements with indexes \n    i+1\n and\nmore remain in their places). One cyclic shift to the right is such a\ntransformation that the array \n    a=[a_1, a_2, \n    \u2026, a_n]\n becomes equal\nto the array \n    a = [a_i, a_1, a_2, \n    \u2026, a_i-2, a_i-1, a_i+1,\n    a_i+2, \n    \u2026, a_n]\n. For example, if \n    a = [5,4,2,1,3]\n and \n    i=3\n\n(that is, this is the third operation), then as a result of this operation, he\ncould get any of these three arrays: \n    a = [5,4,2,1,3]\n (makes \n    0\n\ncyclic shifts, or any number that is divisible by \n    3\n); \n    a =\n    [2,5,4,1,3]\n (makes \n    1\n cyclic shift, or any number that has a remainder\nof \n    1\n when divided by \n    3\n); \n    a = [4,2,5,1,3]\n (makes \n    2\n\ncyclic shifts, or any number that has a remainder of \n    2\n when divided by\n\n    3\n). Let's look at an example. Let \n    n=6\n, i.e. initially\n\n    a=[1,2,3,4,5,6]\n. A possible scenario is described below. \n    i=1\n: no\nmatter how many cyclic shifts Petya makes, the array \n    a\n does not change.\n\n    i=2\n: let's say Petya decided to make a \n    1\n cyclic shift, then the\narray will look like \n    a = [\n    2, \n    1, 3, 4, 5, 6]\n.\n\n    i=3\n: let's say Petya decided to make \n    1\n cyclic shift, then the\narray will look like \n    a = [\n    3, \n    2, \n    1, 4, 5,\n    6]\n. \n    i=4\n: let's say Petya decided to make \n    2\n cyclic shifts, the\noriginal array will look like \n    a = [\n    1, \n    4,\n    \n    3, \n    2, 5, 6]\n. \n    i=5\n: let's say Petya decided to\nmake \n    0\n cyclic shifts, then the array won't change. \n    i=6\n: let's say\nPetya decided to make \n    4\n cyclic shifts, the array will look like \n    a =\n    [\n    3, \n    2, \n    5, \n    6, \n    1,\n    \n    4]\n. You are given a final array state \n    a\n after all \n    n\n\noperations. Determine if there is a way to perform the operation that produces\nthis result. In this case, if an answer exists, print the numbers of cyclical\nshifts that occurred during each of the \n    n\n operations. Input The first\nline of the input contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 500\n) \u2014\nthe number of test cases in the test. The descriptions of the test cases\nfollow. The first line of the description of each test case contains one\ninteger \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2\n    \u00b710^3\n) \u2014 the length of the array\n\n    a\n. The next line contains the final state of the array \n    a\n: \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n) are written.\nAll \n    a_i\n are distinct. It is guaranteed that the sum of \n    n\n values\nover all test cases does not exceed \n    2\n    \u00b710^3\n. Output For each test\ncase, print the answer on a separate line. Print -1 if the given final value\n\n    a\n cannot be obtained by performing an arbitrary number of cyclic shifts\non each operation. Otherwise, print \n    n\n non-negative integers \n    d_1, d_2,\n    \n    \u2026, d_n\n (\n    d_i \n    \u2265 0\n), where \n    d_i\n means that during the\n\n    i\n-th operation the first \n    i\n elements of the array were cyclic\nshifted to the right \n    d_i\n times. If there are several possible answers,\nprint the one where the total number of shifts is minimal (that is, the sum of\n\n    d_i\n values is the smallest). If there are several such answers, print\nany of them. Example Input 3 6 3 2 5 6 1 4 3 3 1 2 8 5 8 1 3 2 6 4 7 Output 0\n1 1 2 0 4 0 0 1 0 1 2 0 2 5 6 2 Note The first test case matches the example\nfrom the statement. The second set of input data is simple. Note that the\nanswer \n    [3, 2, 1]\n also gives the same permutation, but since the total\nnumber of shifts \n    3+2+1\n is greater than \n    0+0+1\n, this answer is not\ncorrect.\n\n",
        "cf_contest_id": 1650,
        "cf_index": "D",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n6\r\n3 2 5 6 1 4\r\n3\r\n3 1 2\r\n8\r\n5 8 1 3 2 6 4 7\r\n",
                "0 1 1 2 0 4\r\n0 0 1\r\n0 1 2 0 2 5 6 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n6\r\n3 5 6 2 1 4\r\n3\r\n1 3 2\r\n2\r\n1 2\r\n4\r\n2 4 3 1\r\n3\r\n2 3 1\r\n7\r\n1 7 5 3 2 4 6\r\n2\r\n1 2\r\n8\r\n7 1 3 8 4 5 6 2\r\n6\r\n4 5 2 6 1 3\r\n2\r\n1 2\r\n",
                "0 1 1 3 0 3\r\n0 1 2\r\n0 0\r\n0 0 1 2\r\n0 0 2\r\n0 1 2 3 2 5 2\r\n0 0\r\n0 1 0 0 0 5 5 4\r\n0 1 0 0 4 4\r\n0 0\r\n"
            ],
            [
                "10\r\n7\r\n2 5 7 4 3 1 6\r\n8\r\n2 7 4 8 6 1 5 3\r\n6\r\n4 2 1 6 3 5\r\n9\r\n2 8 9 7 6 5 3 1 4\r\n7\r\n2 7 5 6 4 3 1\r\n5\r\n3 2 5 4 1\r\n3\r\n3 1 2\r\n4\r\n1 2 4 3\r\n9\r\n6 1 7 5 9 2 4 3 8\r\n4\r\n1 4 3 2\r\n",
                "0 0 1 1 2 4 3\r\n0 1 2 3 2 2 6 4\r\n0 1 0 1 2 4\r\n0 0 2 3 1 1 1 0 3\r\n0 0 1 1 0 2 2\r\n0 1 2 1 3\r\n0 0 1\r\n0 0 1 3\r\n0 0 1 2 2 5 3 4 5\r\n0 1 1 2\r\n"
            ],
            [
                "10\r\n9\r\n2 7 9 8 5 6 3 4 1\r\n5\r\n5 2 3 1 4\r\n8\r\n8 6 3 2 5 7 1 4\r\n3\r\n2 3 1\r\n8\r\n1 7 5 3 4 2 6 8\r\n6\r\n4 5 6 3 1 2\r\n6\r\n4 3 2 6 1 5\r\n5\r\n3 5 1 4 2\r\n6\r\n1 6 3 2 4 5\r\n3\r\n2 3 1\r\n",
                "0 0 0 2 0 2 0 1 3\r\n0 0 2 0 1\r\n0 1 1 2 3 3 5 1\r\n0 0 2\r\n0 1 0 2 2 5 2 0\r\n0 0 1 0 0 3\r\n0 1 1 1 2 4\r\n0 0 2 2 2\r\n0 1 2 0 4 2\r\n0 0 2\r\n"
            ],
            [
                "1\r\n10\r\n10 1 2 3 4 5 6 7 8 9\r\n",
                "0 0 0 0 0 0 0 0 0 1\r\n"
            ],
            [
                "1\r\n11\r\n11 1 2 3 4 5 6 7 8 9 10\r\n",
                "0 0 0 0 0 0 0 0 0 0 1\r\n"
            ]
        ]
    }
]