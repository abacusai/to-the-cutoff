[
    {
        "name": "Maximum Substring",
        "description": "A binary string is a string consisting only of the characters 0 and 1. You are\ngiven a binary string \n    s\n. For some non-empty substring\n    ^\n    \u2020\n\n\n    t\n of string \n    s\n containing \n    x\n characters 0 and \n    y\n\ncharacters 1, define its cost as: \n    x \n    \u00b7 y\n, if \n    x > 0\n and \n    y >\n    0\n; \n    x^2\n, if \n    x > 0\n and \n    y = 0\n; \n    y^2\n, if \n    x = 0\n and\n\n    y > 0\n. Given a binary string \n    s\n of length \n    n\n, find the maximum\ncost across all its non-empty substrings. \n    ^\n    \u2020\n A string \n    a\n is\na substring of a string \n    b\n if \n    a\n can be obtained from \n    b\n by\ndeletion of several (possibly, zero or all) characters from the beginning and\nseveral (possibly, zero or all) characters from the end. Input Each test\nconsists of multiple test cases. The first line contains a single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^5\n) \u2014 the number of test cases. The\ndescription of test cases follows. The first line of each test case contains a\nsingle integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the length of\nthe string \n    s\n. The second line of each test case contains a binary string\n\n    s\n of length \n    n\n. It is guaranteed that the sum of \n    n\n over all\ntest cases does not exceed \n    2 \n    \u00b7 10^5\n. Output For each test case,\nprint a single integer \u2014 the maximum cost across all substrings. Example Input\n6 5 11100 7 1100110 6 011110 7 1001010 4 1000 1 0 Output 9 12 16 12 9 1 Note\nIn the first test case, we can take a substring \n    111\n. It contains \n    3\n\ncharacters 1 and \n    0\n characters 0. So \n    a = 3\n, \n    b = 0\n and its\ncost is \n    3^2 = 9\n. In the second test case, we can take the whole string.\nIt contains \n    4\n characters 1 and \n    3\n characters 0. So \n    a = 4\n,\n\n    b = 3\n and its cost is \n    4 \n    \u00b7 3 = 12\n. In the third test case, we\ncan can take a substring \n    1111\n and its cost is \n    4^2 = 16\n. In the\nfourth test case, we can take the whole string and cost is \n    4 \n    \u00b7 3 =\n    12\n. In the fifth test case, we can take a substring \n    000\n and its cost\nis \n    3 \n    \u00b7 3 = 9\n. In the sixth test case, we can only take the\nsubstring \n    0\n and its cost is \n    1 \n    \u00b7 1 = 1\n.\n\n",
        "cf_contest_id": 1750,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n5\r\n11100\r\n7\r\n1100110\r\n6\r\n011110\r\n7\r\n1001010\r\n4\r\n1000\r\n1\r\n0\r\n",
                "9\r\n12\r\n16\r\n12\r\n9\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]