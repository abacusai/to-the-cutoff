[
    {
        "name": "Mashtali: a Space Oddysey",
        "description": "Lee was planning to get closer to Mashtali's heart to proceed with his evil\nplan(which we're not aware of, yet), so he decided to beautify Mashtali's\ngraph. But he made several rules for himself. And also he was too busy with\nhis plans that he didn't have time for such minor tasks, so he asked you for\nhelp. Mashtali's graph is an undirected weighted graph with \n    n\n vertices\nand \n    m\n edges with weights equal to either \n    1\n or \n    2\n. Lee wants\nto direct the edges of Mashtali's graph so that it will be as beautiful as\npossible. Lee thinks that the beauty of a directed weighted graph is equal to\nthe number of its Oddysey vertices. A vertex \n    v\n is an Oddysey vertex if\n\n    |d^+(v) - d^-(v)| = 1\n, where \n    d^+(v)\n is the sum of weights of the\noutgoing from \n    v\n edges, and \n    d^-(v)\n is the sum of the weights of the\nincoming to \n    v\n edges. Find the largest possible beauty of a graph that\nLee can achieve by directing the edges of Mashtali's graph. In addition, find\nany way to achieve it. Note that you have to orient each edge. Input The first\nline contains two integers \n    n\n and \n    m\n \n    (1 \n    \u2264 n \n    \u2264 10^5;\n      1\n    \n    \u2264 m \n    \u2264 10^5)\n \u2014 the numbers of vertices and edges in the graph. The\n\n    i\n-th line of the following \n    m\n lines contains three integers\n\n    u_i\n, \n    v_i\n and \n    w_i\n \n    ( 1 \n    \u2264 u_i , v_i \n    \u2264 n;\n      u_i\n    \n    \u2260 v_i;\n     \n    w_i \n    \u2208\n    \n    1, 2\n    \n     )\n \u2014 the endpoints of the\n\n    i\n-th edge and its weight. Note that the graph doesn't have to be\nconnected, and it might contain multiple edges. Output In the first line print\na single integer \u2014 the maximum beauty of the graph Lee can achieve. In the\nsecond line print a string of length \n    m\n consisting of \n    1\ns and\n\n    2\ns \u2014 directions of the edges. If you decide to direct the \n    i\n-th\nedge from vertex \n    u_i\n to vertex \n    v_i\n, \n    i\n-th character of the\nstring should be \n    1\n. Otherwise, it should be \n    2\n. Examples Input 6 7\n1 2 1 1 3 2 2 3 2 1 4 1 4 5 1 2 5 2 2 6 2 Output 2 1212212 Input 6 7 1 2 2 1 3\n2 2 3 2 1 4 2 4 5 2 2 5 2 2 6 2 Output 0 1212212 Input 6 7 1 2 1 1 3 1 2 3 1 1\n4 1 4 5 1 2 5 1 2 6 1 Output 2 1212212 Note Explanation for the first sample:\nvertices \n    2\n and \n    5\n are Oddyseys. Explanation for the third sample:\nvertices \n    1\n and \n    6\n are Oddyseys.\n\n",
        "cf_contest_id": 1610,
        "cf_index": "F",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 7\r\n1 2 1\r\n1 3 2\r\n2 3 2\r\n1 4 1\r\n4 5 1\r\n2 5 2\r\n2 6 2\r\n",
                "2\r\n1122211"
            ],
            [
                "6 7\r\n1 2 2\r\n1 3 2\r\n2 3 2\r\n1 4 2\r\n4 5 2\r\n2 5 2\r\n2 6 2\r\n",
                "0\r\n1211121"
            ],
            [
                "6 7\r\n1 2 1\r\n1 3 1\r\n2 3 1\r\n1 4 1\r\n4 5 1\r\n2 5 1\r\n2 6 1\r\n",
                "2\r\n1211121"
            ]
        ],
        "private_cases": [
            [
                "5 5\r\n4 2 2\r\n1 5 1\r\n5 1 2\r\n3 2 1\r\n5 2 2\r\n",
                "4\r\n11122"
            ],
            [
                "5 5\r\n4 2 1\r\n3 1 2\r\n3 5 1\r\n2 1 1\r\n4 5 2\r\n",
                "4\r\n21221"
            ],
            [
                "10 15\r\n1 3 1\r\n7 2 1\r\n3 7 2\r\n8 5 2\r\n1 4 2\r\n1 6 1\r\n5 8 2\r\n2 1 2\r\n1 7 1\r\n6 9 2\r\n10 2 2\r\n2 5 1\r\n7 5 2\r\n2 9 2\r\n8 10 2\r\n",
                "4\r\n121211212122122"
            ],
            [
                "10 15\r\n4 5 1\r\n7 4 1\r\n1 10 2\r\n1 5 2\r\n9 8 1\r\n9 5 1\r\n3 5 1\r\n2 1 1\r\n9 7 2\r\n7 8 2\r\n6 10 1\r\n1 9 2\r\n5 2 1\r\n3 2 1\r\n3 2 1\r\n",
                "6\r\n221221211121211"
            ],
            [
                "20 50\r\n8 2 1\r\n13 8 2\r\n20 19 2\r\n7 8 2\r\n14 19 2\r\n17 15 2\r\n8 14 2\r\n3 5 2\r\n8 4 1\r\n12 9 1\r\n4 19 1\r\n19 1 2\r\n1 4 2\r\n7 17 2\r\n7 10 1\r\n20 6 2\r\n19 9 2\r\n9 8 2\r\n14 7 2\r\n15 2 2\r\n10 12 1\r\n11 3 1\r\n17 13 1\r\n11 10 2\r\n4 10 1\r\n9 3 2\r\n5 1 2\r\n14 9 1\r\n1 12 2\r\n17 3 1\r\n4 16 1\r\n6 14 1\r\n6 20 2\r\n18 5 2\r\n18 3 1\r\n6 7 2\r\n15 16 1\r\n4 12 2\r\n12 10 2\r\n1 20 1\r\n1 4 2\r\n2 8 1\r\n18 14 2\r\n14 11 1\r\n11 12 2\r\n16 4 2\r\n1 19 1\r\n19 17 1\r\n1 7 2\r\n20 1 2\r\n",
                "12\r\n12211212121112212122222212212121112211111122122111"
            ],
            [
                "30 50\r\n30 9 2\r\n14 29 1\r\n9 20 2\r\n5 12 2\r\n18 10 2\r\n19 17 2\r\n13 14 2\r\n8 16 2\r\n13 19 1\r\n6 2 2\r\n3 23 2\r\n17 16 2\r\n30 18 1\r\n10 23 1\r\n22 5 2\r\n18 14 2\r\n8 19 1\r\n13 15 1\r\n8 13 2\r\n3 27 2\r\n23 4 2\r\n2 29 2\r\n5 1 2\r\n9 30 1\r\n23 17 2\r\n3 8 2\r\n6 11 2\r\n15 11 1\r\n28 26 2\r\n26 11 1\r\n26 24 1\r\n10 3 1\r\n13 7 1\r\n11 21 1\r\n23 26 2\r\n19 3 2\r\n30 26 1\r\n23 7 2\r\n30 4 1\r\n20 28 2\r\n29 11 1\r\n20 9 1\r\n16 26 2\r\n5 17 1\r\n2 18 1\r\n29 21 2\r\n17 25 2\r\n2 18 1\r\n12 22 2\r\n7 23 1\r\n",
                "12\r\n21212221222221111121122221112212211112221221222112"
            ],
            [
                "3 4\r\n3 2 1\r\n2 1 1\r\n3 2 2\r\n2 3 1\r\n",
                "2\r\n2222"
            ],
            [
                "3 4\r\n3 1 1\r\n2 1 1\r\n3 1 2\r\n2 1 2\r\n",
                "2\r\n2112"
            ],
            [
                "3 7\r\n1 3 2\r\n1 2 2\r\n1 3 2\r\n1 2 2\r\n1 3 2\r\n1 2 2\r\n1 2 1\r\n",
                "2\r\n1221121"
            ],
            [
                "3 9\r\n1 3 2\r\n1 2 2\r\n1 3 2\r\n1 2 2\r\n1 3 2\r\n1 2 2\r\n1 3 2\r\n1 2 2\r\n1 2 1\r\n",
                "2\r\n112211221"
            ]
        ]
    }
]