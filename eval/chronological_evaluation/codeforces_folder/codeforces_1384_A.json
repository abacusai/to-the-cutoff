[
    {
        "name": "Common Prefixes",
        "description": "The length of the longest common prefix of two strings \n    s = s_1 s_2 \n    \u2026\n    s_n\n and \n    t = t_1 t_2 \n    \u2026 t_m\n is defined as the maximum integer\n\n    k\n (\n    0 \n    \u2264 k \n    \u2264 min(n,m)\n) such that \n    s_1 s_2 \n    \u2026 s_k\n\nequals \n    t_1 t_2 \n    \u2026 t_k\n. Koa the Koala initially has \n    n+1\n\nstrings \n    s_1, s_2, \n    \u2026, s_n+1\n. For each \n    i\n (\n    1 \n    \u2264 i \n    \u2264\n    n\n) she calculated \n    a_i\n \u2014 the length of the longest common prefix of\n\n    s_i\n and \n    s_i+1\n. Several days later Koa found these numbers, but\nshe couldn't remember the strings. So Koa would like to find some strings\n\n    s_1, s_2, \n    \u2026, s_n+1\n which would have generated numbers \n    a_1,\n    a_2, \n    \u2026, a_n\n. Can you help her? If there are many answers print any.\nWe can show that answer always exists for the given constraints. Input Each\ntest contains multiple test cases. The first line contains \n    t\n (\n    1 \n    \u2264\n    t \n    \u2264 100\n) \u2014 the number of test cases. Description of the test cases\nfollows. The first line of each test case contains a single integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 100\n) \u2014 the number of elements in the list \n    a\n. The\nsecond line of each test case contains \n    n\n integers \n    a_1, a_2, \n    \u2026,\n    a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 50\n) \u2014 the elements of \n    a\n. It is\nguaranteed that the sum of \n    n\n over all test cases does not exceed\n\n    100\n. Output For each test case: Output \n    n+1\n lines. In the\n\n    i\n-th line print string \n    s_i\n (\n    1 \n    \u2264 |s_i| \n    \u2264 200\n),\nconsisting of lowercase Latin letters. Length of the longest common prefix of\nstrings \n    s_i\n and \n    s_i+1\n has to be equal to \n    a_i\n. If there are\nmany answers print any. We can show that answer always exists for the given\nconstraints. Example Input 4 4 1 2 4 2 2 5 3 3 1 3 1 3 0 0 0 Output aeren ari\narousal around ari monogon monogamy monthly kevinvu kuroni kurioni korone\nanton loves adhoc problems Note In the \n    1\n-st test case one of the\npossible answers is \n    s = [aeren, ari, arousal, around, ari]\n. Lengths of\nlongest common prefixes are: Between \n    aeren\n and\n\n    ari\n \n    \u2192 1\n Between\n\n    ari\n and \n    arousal\n \n    \u2192\n    2\n Between \n    arousal\n and \n    around\n\n\n    \u2192 4\n Between \n    around\n and\n\n    ari\n \n    \u2192 2\n\n\n",
        "cf_contest_id": 1384,
        "cf_index": "A",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4\r\n1 2 4 2\r\n2\r\n5 3\r\n3\r\n1 3 1\r\n3\r\n0 0 0\r\n",
                "cbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\nccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\ncccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\ncccbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\nccbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\nbcbbcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\nbcbbccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\nbcbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\nccbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\ncbbcccbbbbbbbbbbbbbbbbbbbbbbbbbbbb..."
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n1\r\n",
                "cbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\nccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\n"
            ]
        ]
    }
]