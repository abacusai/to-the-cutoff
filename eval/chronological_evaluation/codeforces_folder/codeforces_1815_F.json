[
    {
        "name": "OH NO1 (-2-3-4)",
        "description": "You are given an undirected graph with \n    n\n vertices and \n    3m\n edges.\nThe graph may contain multi-edges, but does not contain self-loops. The graph\nsatisfies the following property: the given edges can be divided into \n    m\n\ngroups of \n    3\n, such that each group is a triangle. A triangle is defined\nas three edges \n    (a,b)\n, \n    (b,c)\n and \n    (c,a)\n for some three\ndistinct vertices \n    a,b,c\n (\n    1 \n    \u2264 a,b,c \n    \u2264 n\n). Initially, each\nvertex \n    v\n has a non-negative integer weight \n    a_v\n. For every edge\n\n    (u,v)\n in the graph, you should perform the following operation exactly\nonce: Choose an integer \n    x\n between \n    1\n and \n    4\n. Then increase\nboth \n    a_u\n and \n    a_v\n by \n    x\n. After performing all operations, the\nfollowing requirement should be satisfied: if \n    u\n and \n    v\n are\nconnected by an edge, then \n    a_u \n     a_v\n. It can be proven this is\nalways possible under the constraints of the task. Output a way to do so, by\noutputting the choice of \n    x\n for each edge. It is easy to see that the\norder of operations does not matter. If there are multiple valid answers,\noutput any. Input The first line contains a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 10^5\n) \u2014 the number of test cases. The description of test\ncases follows. The first line of each test case contains two integers \n    n\n\nand \n    m\n (\n    3 \n    \u2264 n \n    \u2264 10^6\n, \n    1 \n    \u2264 m \n    \u2264 4 \n    \u00b7 10^5\n)\n\u2014 denoting the graph have \n    n\n vertices and \n    3m\n edges. The second line\nof each test case contains \n    n\n integers \n    a_1,a_2,\n    \u2026,a_n\n (\n    0\n    \n    \u2264 a_i \n    \u2264 10^6\n) \u2014 the initial weights of each vertex. Then \n    m\n\nlines follow. The \n    i\n-th line contains three integers \n    a_i\n,\n\n    b_i\n, \n    c_i\n (\n    1 \n    \u2264 a_i < b_i < c_i \n    \u2264 n\n) \u2014 denotes that\nthree edges \n    (a_i,b_i)\n, \n    (b_i,c_i)\n and \n    (c_i,a_i)\n. Note that\nthe graph may contain multi-edges: a pair \n    (x,y)\n may appear in multiple\ntriangles. It is guaranteed that the sum of \n    n\n over all test cases does\nnot exceed \n    10^6\n and the sum of \n    m\n over all test cases does not\nexceed \n    4 \n    \u00b7 10^5\n. Output For each test case, output \n    m\n lines\nof \n    3\n integers each. The \n    i\n-th line should contains three integers\n\n    e_ab,e_bc,e_ca\n (\n    1 \n    \u2264 e_ab, e_bc , e_ca\n    \u2264 4\n),\ndenoting the choice of value \n    x\n for edges \n    (a_i, b_i)\n,\n\n    (b_i,c_i)\n and \n    (c_i, a_i)\n respectively. Example Input 4 4 1 0 0 0 0\n1 2 3 5 2 0 0 0 0 0 1 2 3 1 4 5 4 4 3 4 5 6 1 2 3 1 2 4 1 3 4 2 3 4 5 4 0\n1000000 412 412 412 1 2 3 1 4 5 2 4 5 3 4 5 Output 2 1 3 2 3 3 4 3 3 3 1 2 2 2\n3 2 3 4 3 1 1 2 3 4 1 2 4 4 4 3 4 1 1 Note In the first test case, the initial\nweights are \n    [0,0,0,0]\n. We have added values as follows: Added \n    2\n to\nvertices \n    1\n and \n    2\n Added \n    1\n to vertices \n    2\n and \n    3\n\nAdded \n    3\n to vertices \n    3\n and \n    1\n The final weights are\n\n    [5,3,4,0]\n. The output is valid because \n    a_1 \n    \u2260 a_2\n, \n    a_1\n    \n    \u2260 a_3\n, \n    a_2 \n    \u2260 a_3\n, and that all chosen values are between\n\n    1\n and \n    4\n. In the second test case, the initial weights are\n\n    [0,0,0,0,0]\n. The weights after the operations are \n    [12,5,6,7,6]\n.\nThe output is valid because \n    a_1 \n    \u2260 a_2\n, \n    a_1 \n    \u2260 a_3\n, \n    a_2\n    \n    \u2260 a_3\n, and that \n    a_1 \n    \u2260 a_4\n, \n    a_1 \n    \u2260 a_5\n, \n    a_4\n    \n    \u2260 a_5\n, and that all chosen values are between \n    1\n and \n    4\n. In\nthe third test case, the initial weights are \n    [3,4,5,6]\n. The weights\nafter the operations are \n    [19,16,17,20]\n, and all final weights are\ndistinct, which means no two adjacent vertices have the same weight.\n\n",
        "cf_contest_id": 1815,
        "cf_index": "F",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graphs",
            "math"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4\r\n4 1\r\n0 0 0 0\r\n1 2 3\r\n5 2\r\n0 0 0 0 0\r\n1 2 3\r\n1 4 5\r\n4 4\r\n3 4 5 6\r\n1 2 3\r\n1 2 4\r\n1 3 4\r\n2 3 4\r\n5 4\r\n0 1000000 412 412 412\r\n1 2 3\r\n1 4 5\r\n2 4 5\r\n3 4 5\r\n",
                "1 3 2\r\n2 1 3\r\n2 1 3\r\n1 3 2\r\n1 3 2\r\n1 3 2\r\n1 3 2\r\n2 3 1\r\n1 3 2\r\n2 1 3\r\n1 3 2\r\n"
            ]
        ],
        "private_cases": []
    }
]