[
    {
        "name": "Bakery",
        "description": "Masha wants to open her own bakery and bake muffins in one of the n cities\nnumbered from 1 to n. There are m bidirectional roads, each of whose connects\nsome pair of cities. To bake muffins in her bakery, Masha needs to establish\nflour supply from some storage. There are only k storages, located in\ndifferent cities numbered a1, a2, ..., ak. Unforunately the law of the country\nMasha lives in prohibits opening bakery in any of the cities which has storage\nlocated in it. She can open it only in one of another n - k cities, and, of\ncourse, flour delivery should be paid \u2014 for every kilometer of path between\nstorage and bakery Masha should pay 1 ruble. Formally, Masha will pay x\nroubles, if she will open the bakery in some city b (ai \u2260 b for every 1 \u2264 i \u2264\nk) and choose a storage in some city s (s = aj for some 1 \u2264 j \u2264 k) and b and s\nare connected by some path of roads of summary length x (if there are more\nthan one path, Masha is able to choose which of them should be used). Masha is\nvery thrifty and rational. She is interested in a city, where she can open her\nbakery (and choose one of k storages and one of the paths between city with\nbakery and city with storage) and pay minimum possible amount of rubles for\nflour delivery. Please help Masha find this amount. Input The first line of\nthe input contains three integers n, m and k (1 \u2264 n, m \u2264 10^5, 0 \u2264 k \u2264 n) \u2014\nthe number of cities in country Masha lives in, the number of roads between\nthem and the number of flour storages respectively. Then m lines follow. Each\nof them contains three integers u, v and l (1 \u2264 u, v \u2264 n, 1 \u2264 l \u2264 10^9, u \u2260 v)\nmeaning that there is a road between cities u and v of length of l kilometers\n. If k > 0, then the last line of the input contains k distinct integers a1,\na2, ..., ak (1 \u2264 ai \u2264 n) \u2014 the number of cities having flour storage located\nin. If k = 0 then this line is not presented in the input. Output Print the\nminimum possible amount of rubles Masha should pay for flour delivery in the\nonly line. If the bakery can not be opened (while satisfying conditions) in\nany of the n cities, print - 1 in the only line. Examples Input 5 4 2 1 2 5 1\n2 3 2 3 4 1 4 10 1 5 Output 3 Input 3 1 1 1 2 3 3 Output -1 Note Image\nillustrates the first sample case. Cities with storage located in and the road\nrepresenting the answer are darkened.\n\n",
        "cf_contest_id": 707,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "graphs"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 4 2\r\n1 2 5\r\n1 2 3\r\n2 3 4\r\n1 4 10\r\n1 5\r\n",
                "3\r\n"
            ],
            [
                "3 1 1\r\n1 2 3\r\n3\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 3 1\r\n1 2 3\r\n1 2 18\r\n1 2 13\r\n2\r\n",
                "3\r\n"
            ],
            [
                "3 7 0\r\n1 3 9\r\n1 2 5\r\n1 2 21\r\n1 2 12\r\n1 2 13\r\n2 3 19\r\n2 3 8\r\n",
                "-1\r\n"
            ],
            [
                "4 13 1\r\n1 4 10\r\n1 3 6\r\n1 4 3\r\n3 4 1\r\n1 3 2\r\n1 2 15\r\n1 4 21\r\n1 4 20\r\n2 4 13\r\n1 4 7\r\n2 4 2\r\n1 2 8\r\n1 3 17\r\n1\r\n",
                "2\r\n"
            ],
            [
                "5 7 3\r\n2 3 20\r\n1 2 10\r\n1 2 11\r\n4 5 15\r\n2 3 3\r\n1 5 19\r\n1 2 3\r\n5 3 2\r\n",
                "3\r\n"
            ],
            [
                "6 7 4\r\n5 6 21\r\n3 6 18\r\n1 6 5\r\n4 6 4\r\n1 2 13\r\n3 4 7\r\n1 2 15\r\n6 1 3 2\r\n",
                "4\r\n"
            ],
            [
                "7 39 2\r\n2 7 10\r\n5 6 18\r\n2 7 13\r\n4 5 11\r\n3 6 14\r\n1 2 16\r\n3 4 2\r\n1 3 13\r\n1 5 1\r\n1 2 20\r\n1 5 11\r\n1 4 14\r\n3 6 21\r\n1 2 18\r\n1 4 13\r\n2 3 4\r\n3 6 12\r\n2 5 18\r\n4 7 17\r\n1 2 3\r\n2 3 6\r\n1 2 21\r\n1 7 18\r\n4 6 13\r\n1 2 13\r\n1 7 17\r\n2 3 16\r\n5 6 5\r\n2 4 17\r\n1 2 9\r\n1 2 21\r\n4 5 9\r\n1 2 18\r\n2 6 6\r\n2 3 9\r\n1 4 7\r\n2 5 7\r\n3 7 21\r\n4 5 2\r\n6 2\r\n",
                "3\r\n"
            ],
            [
                "8 57 3\r\n1 3 15\r\n2 3 1\r\n1 7 21\r\n1 2 8\r\n2 5 16\r\n1 6 4\r\n1 3 2\r\n3 7 17\r\n5 8 3\r\n1 3 18\r\n1 4 3\r\n1 2 1\r\n2 8 14\r\n1 4 17\r\n4 5 21\r\n2 3 6\r\n3 5 11\r\n2 8 11\r\n3 4 1\r\n1 3 9\r\n1 4 3\r\n2 3 12\r\n1 5 9\r\n2 3 15\r\n1 2 14\r\n1 2 10\r\n1 4 19\r\n5 7 7\r\n5 8 20\r\n5 8 1\r\n1 4 3\r\n4 5 8\r\n5 7 2\r\n1 2 14\r\n4 5 9\r\n6 7 2\r\n2 6 9\r\n2 6 4\r\n3 7 4\r\n3 5 11\r\n4 8 19\r\n3 7 15\r\n1 8 21\r\n6 7 11\r\n4 6 2\r\n2 3 21\r\n6 7 2\r\n6 8 4\r\n1 3 21\r\n3 4 1\r\n4 5 15\r\n4 7 21\r\n2 6 2\r\n5 6 16\r\n5 8 9\r\n2 5 6\r\n1 7 17\r\n1 4 8\r\n",
                "1\r\n"
            ],
            [
                "350 10 39\r\n2 13 693\r\n6 31 482\r\n72 312 617\r\n183 275 782\r\n81 123 887\r\n26 120 1205\r\n135 185 822\r\n64 219 820\r\n74 203 874\r\n19 167 1422\r\n252 332 204 334 100 350 26 14 134 213 32 84 331 215 181 158 99 190 206 265 343 241 287 74 113 15 12 338 27 110 98 132 35 95 51 315 297 69 163\r\n",
                "874\r\n"
            ],
            [
                "7 7 3\r\n1 2 1\r\n2 4 1\r\n3 4 1\r\n1 3 1\r\n5 7 2\r\n6 7 10\r\n5 6 5\r\n5 6 7\r\n",
                "-1\r\n"
            ],
            [
                "7 8 3\r\n1 2 1\r\n2 4 1\r\n3 4 1\r\n1 3 1\r\n5 7 2\r\n6 7 10\r\n5 6 5\r\n2 5 31246\r\n5 6 7\r\n",
                "31246\r\n"
            ],
            [
                "5 5 5\r\n1 2 1\r\n2 3 2\r\n3 4 3\r\n4 5 5\r\n1 5 6\r\n1 2 3 4 5\r\n",
                "-1\r\n"
            ],
            [
                "10 10 3\r\n1 2 1000000000\r\n2 3 1000000000\r\n3 4 1000000000\r\n4 5 1000000000\r\n5 6 1000000000\r\n6 7 1000000000\r\n7 8 1000000000\r\n8 9 1000000000\r\n9 10 1000000000\r\n10 1 1000000000\r\n1 2 3\r\n",
                "1000000000\r\n"
            ],
            [
                "2 1 1\r\n1 2 1000000000\r\n1\r\n",
                "1000000000\r\n"
            ],
            [
                "99999 1 0\r\n1 2 3\r\n",
                "-1\r\n"
            ],
            [
                "99999 1 2\r\n1 2 3\r\n2 4\r\n",
                "3\r\n"
            ],
            [
                "2 1 1\r\n1 2 99999999\r\n1\r\n",
                "99999999\r\n"
            ],
            [
                "2 1 1\r\n1 2 999999\r\n2\r\n",
                "999999\r\n"
            ]
        ]
    }
]