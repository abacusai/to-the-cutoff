[
    {
        "name": "Cheap Dinner",
        "description": "Ivan wants to have a good dinner. A good dinner should consist of a first\ncourse, a second course, a drink, and a dessert. There are \n    n_1\n different\ntypes of first courses Ivan can buy (the \n    i\n-th of them costs \n    a_i\n\ncoins), \n    n_2\n different types of second courses (the \n    i\n-th of them\ncosts \n    b_i\n coins), \n    n_3\n different types of drinks (the \n    i\n-th of\nthem costs \n    c_i\n coins) and \n    n_4\n different types of desserts (the\n\n    i\n-th of them costs \n    d_i\n coins). Some dishes don't go well with each\nother. There are \n    m_1\n pairs of first courses and second courses that\ndon't go well with each other, \n    m_2\n pairs of second courses and drinks,\nand \n    m_3\n pairs of drinks and desserts that don't go well with each other.\nIvan wants to buy exactly one first course, one second course, one drink, and\none dessert so that they go well with each other, and the total cost of the\ndinner is the minimum possible. Help him to find the cheapest dinner option!\nInput The first line contains four integers \n    n_1\n, \n    n_2\n, \n    n_3\n\nand \n    n_4\n (\n    1 \n    \u2264 n_i \n    \u2264 150000\n) \u2014 the number of types of first\ncourses, second courses, drinks and desserts, respectively. Then four lines\nfollow. The first line contains \n    n_1\n integers \n    a_1, a_2, \n    \u2026,\n    a_n_1\n (\n    1 \n    \u2264 a_i \n    \u2264 10^8\n), where \n    a_i\n is the cost of the\n\n    i\n-th type of first course. Three next lines denote the costs of second\ncourses, drinks, and desserts in the same way (\n    1 \n    \u2264 b_i, c_i, d_i \n    \u2264\n    10^8\n). The next line contains one integer \n    m_1\n (\n    0 \n    \u2264 m_1 \n    \u2264\n    200000\n) \u2014 the number of pairs of first and second courses that don't go\nwell with each other. Each of the next \n    m_1\n lines contains two integers\n\n    x_i\n and \n    y_i\n (\n    1 \n    \u2264 x_i \n    \u2264 n_1\n; \n    1 \n    \u2264 y_i \n    \u2264\n    n_2\n) denoting that the first course number \n    x_i\n doesn't go well with\nthe second course number \n    y_i\n. All these pairs are different. The block\nof pairs of second dishes and drinks that don't go well with each other is\ngiven in the same format. The same for pairs of drinks and desserts that don't\ngo well with each other (\n    0 \n    \u2264 m_2, m_3 \n    \u2264 200000\n). Output If it's\nimpossible to choose a first course, a second course, a drink, and a dessert\nso that they go well with each other, print \n    -1\n. Otherwise, print one\ninteger \u2014 the minimum total cost of the dinner. Examples Input 4 3 2 1 1 2 3 4\n5 6 7 8 9 10 2 1 2 1 1 2 3 1 3 2 1 1 1 Output 26 Input 1 1 1 1 1 1 1 1 1 1 1 0\n0 Output -1 Note The best option in the first example is to take the first\ncourse \n    2\n, the second course \n    1\n, the drink \n    2\n and the dessert\n\n    1\n. In the second example, the only pair of the first course and the\nsecond course is bad, so it's impossible to have dinner.\n\n",
        "cf_contest_id": 1487,
        "cf_index": "E",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "graphs",
            "greedy",
            "implementation",
            "sortings",
            "two pointers"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4 3 2 1\r\n1 2 3 4\r\n5 6 7\r\n8 9\r\n10\r\n2\r\n1 2\r\n1 1\r\n2\r\n3 1\r\n3 2\r\n1\r\n1 1\r\n",
                "26\r\n"
            ],
            [
                "1 1 1 1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1 1\r\n0\r\n0\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 5 5 5\r\n836 776 809 618 397\r\n121 629 373 169 333\r\n589 439 410 388 446\r\n936 472 433 647 791\r\n25\r\n1 2\r\n4 5\r\n5 4\r\n4 1\r\n3 5\r\n5 2\r\n2 4\r\n3 4\r\n3 3\r\n3 2\r\n4 4\r\n4 3\r\n1 1\r\n1 4\r\n5 1\r\n2 3\r\n1 5\r\n5 5\r\n2 5\r\n3 1\r\n2 1\r\n2 2\r\n1 3\r\n5 3\r\n4 2\r\n25\r\n1 1\r\n5 4\r\n4 1\r\n1 2\r\n1 4\r\n2 3\r\n3 3\r\n4 3\r\n2 2\r\n5 3\r\n2 1\r\n1 3\r\n5 5\r\n3 5\r\n2 4\r\n3 1\r\n5 2\r\n4 4\r\n3 4\r\n3 2\r\n5 1\r\n4 5\r\n1 5\r\n4 2\r\n2 5\r\n25\r\n2 2\r\n5 1\r\n4 4\r\n2 1\r\n5 4\r\n4 5\r\n3 5\r\n5 2\r\n1 4\r\n2 5\r\n1 2\r\n3 4\r\n4 1\r\n3 2\r\n4 3\r\n1 3\r\n5 5\r\n2 4\r\n4 2\r\n1 5\r\n3 3\r\n2 3\r\n1 1\r\n3 1\r\n5 3\r\n",
                "-1\r\n"
            ]
        ]
    }
]