[
    {
        "name": "Black, White and Grey Tree",
        "description": "You are given a tree with each vertex coloured white, black or grey. You can\nremove elements from the tree by selecting a subset of vertices in a single\nconnected component and removing them and their adjacent edges from the graph.\nThe only restriction is that you are not allowed to select a subset containing\na white and a black vertex at once. What is the minimum number of removals\nnecessary to remove all vertices from the tree? Input Each test contains\nmultiple test cases. The first line contains an integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 100\n     000\n), denoting the number of test cases, followed by a\ndescription of the test cases. The first line of each test case contains an\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 200\n     000\n): the number of vertices in\nthe tree. The second line of each test case contains \n    n\n integers\n\n    a_v\n (\n    0 \n    \u2264 a_v \n    \u2264 2\n): colours of vertices. Gray vertices have\n\n    a_v=0\n, white have \n    a_v=1\n, black have \n    a_v=2\n. Each of the next\n\n    n-1\n lines contains two integers \n    u, v\n (\n    1 \n    \u2264 u, v \n    \u2264 n\n):\ntree edges. The sum of all \n    n\n throughout the test is guaranteed to not\nexceed \n    200\n     000\n. Output For each test case, print one integer: the\nminimum number of operations to solve the problem. Example Input 4 2 1 1 1 2 4\n1 2 1 2 1 2 2 3 3 4 5 1 1 0 1 2 1 2 2 3 3 4 3 5 8 1 2 1 2 2 2 1 2 1 3 2 3 3 4\n4 5 5 6 5 7 5 8 Output 1 3 2 3 Note In the first test case, both vertices are\nwhite, so you can remove them at the same time. In the second test case, three\noperations are enough. First, we need to remove both black vertices (2 and 4),\nthen separately remove vertices 1 and 3. We can't remove them together because\nthey end up in different connectivity components after vertex 2 is removed. In\nthe third test case, we can remove vertices 1, 2, 3, 4 at the same time,\nbecause three of them are white and one is grey. After that, we can remove\nvertex 5. In the fourth test case, three operations are enough. One of the\nways to solve the problem is to remove all black vertices at once, then remove\nwhite vertex 7, and finally, remove connected white vertices 1 and 3.\n\n",
        "cf_contest_id": 1442,
        "cf_index": "E",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4\r\n2\r\n1 1\r\n1 2\r\n4\r\n1 2 1 2\r\n1 2\r\n2 3\r\n3 4\r\n5\r\n1 1 0 1 2\r\n1 2\r\n2 3\r\n3 4\r\n3 5\r\n8\r\n1 2 1 2 2 2 1 2\r\n1 3\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n5 7\r\n5 8\r\n",
                "1\r\n3\r\n2\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n2\r\n",
                "1\r\n"
            ],
            [
                "1\r\n2\r\n0 0\r\n1 2\r\n",
                "1\r\n"
            ],
            [
                "1\r\n3\r\n0 1 1\r\n1 3\r\n3 2\r\n",
                "1\r\n"
            ],
            [
                "1\r\n8\r\n0 2 0 2 0 1 2 2\r\n8 4\r\n7 4\r\n2 7\r\n5 1\r\n7 1\r\n8 6\r\n8 3\r\n",
                "2\r\n"
            ]
        ]
    }
]