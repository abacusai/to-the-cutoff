[
    {
        "name": "Close Vertices",
        "description": "You've got a weighted tree, consisting of n vertices. Each edge has a non-\nnegative weight. The length of the path between any two vertices of the tree\nis the number of edges in the path. The weight of the path is the total weight\nof all edges it contains. Two vertices are close if there exists a path of\nlength at most l between them and a path of weight at most w between them.\nCount the number of pairs of vertices v, u (v < u), such that vertices v and u\nare close. Input The first line contains three integers n, l and w (1 \u2264 n \u2264\n10^5, 1 \u2264 l \u2264 n, 0 \u2264 w \u2264 10^9). The next n - 1 lines contain the descriptions\nof the tree edges. The i-th line contains two integers pi, wi (1 \u2264 pi < (i +\n1), 0 \u2264 wi \u2264 10^4), that mean that the i-th edge connects vertex (i + 1) and\npi and has weight wi. Consider the tree vertices indexed from 1 to n in some\nway. Output Print a single integer \u2014 the number of close pairs. Please, do not\nuse the \npreferred to use the cin, cout streams or the \n4 4 6 1 3 1 4 1 3 Output 4 Input 6 2 17 1 3 2 5 2 13 1 6 5 9 Output 9\n\n",
        "cf_contest_id": 293,
        "cf_index": "E",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "divide and conquer",
            "trees"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 4 6\r\n1 3\r\n1 4\r\n1 3\r\n",
                "4\r\n"
            ],
            [
                "6 2 17\r\n1 3\r\n2 5\r\n2 13\r\n1 6\r\n5 9\r\n",
                "9\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1 1\r\n1 1\r\n",
                "1\r\n"
            ],
            [
                "10 3 100000\r\n1 4372\r\n1 8809\r\n2 2085\r\n2 2202\r\n3 9004\r\n3 5568\r\n4 8984\r\n4 1650\r\n5 2369\r\n",
                "30\r\n"
            ],
            [
                "20 20 176\r\n1 10\r\n1 0\r\n1 3\r\n4 7\r\n1 4\r\n5 9\r\n5 8\r\n2 9\r\n4 9\r\n2 5\r\n5 4\r\n9 9\r\n10 8\r\n7 5\r\n9 1\r\n7 5\r\n8 9\r\n13 5\r\n5 0\r\n",
                "190\r\n"
            ],
            [
                "1 1 8\r\n",
                "0\r\n"
            ],
            [
                "2 2 20\r\n1 10\r\n",
                "1\r\n"
            ],
            [
                "3 3 21\r\n1 7\r\n1 5\r\n",
                "3\r\n"
            ],
            [
                "5 2 19\r\n1 4\r\n1 7\r\n1 6\r\n4 2\r\n",
                "8\r\n"
            ],
            [
                "6 4 23\r\n1 2\r\n2 3\r\n2 3\r\n3 2\r\n4 1\r\n",
                "15\r\n"
            ],
            [
                "10 9 59\r\n1 0\r\n1 5\r\n2 9\r\n1 2\r\n5 4\r\n3 8\r\n1 7\r\n7 5\r\n5 10\r\n",
                "45\r\n"
            ],
            [
                "21 11 108\r\n1 5\r\n2 8\r\n1 10\r\n3 6\r\n2 6\r\n4 1\r\n6 1\r\n6 10\r\n8 0\r\n5 8\r\n6 7\r\n1 8\r\n3 6\r\n10 4\r\n10 0\r\n11 3\r\n16 6\r\n4 10\r\n4 10\r\n20 3\r\n",
                "210\r\n"
            ],
            [
                "28 13 118\r\n1 1\r\n1 4\r\n1 9\r\n1 3\r\n2 3\r\n6 4\r\n5 5\r\n3 3\r\n3 7\r\n3 1\r\n1 7\r\n10 8\r\n10 5\r\n5 10\r\n15 7\r\n8 3\r\n1 5\r\n6 3\r\n11 7\r\n4 8\r\n14 4\r\n17 1\r\n20 9\r\n13 0\r\n13 1\r\n20 4\r\n27 10\r\n",
                "378\r\n"
            ]
        ]
    }
]