[
    {
        "name": "Yet Another Minimization Problem",
        "description": "You are given an array of n integers a1... an. The cost of a subsegment is the\nnumber of unordered pairs of distinct indices within the subsegment that\ncontain equal elements. Split the given array into k non-intersecting non-\nempty subsegments so that the sum of their costs is minimum possible. Each\nelement should be present in exactly one subsegment. Input The first line\ncontains two integers n and k (2 \u2264 n \u2264 10^5, 2 \u2264 k \u2264 min (n, 20)) \u2014 the length\nof the array and the number of segments you need to split the array into. The\nnext line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264 n) \u2014 the elements of\nthe array. Output Print single integer: the minimum possible total cost of\nresulting subsegments. Examples Input 7 3 1 1 3 3 3 2 1 Output 1 Input 10 2 1\n2 1 2 1 2 1 2 1 2 Output 8 Input 13 3 1 2 2 2 1 2 1 1 1 2 2 1 1 Output 9 Note\nIn the first example it's optimal to split the sequence into the following\nthree subsegments: [1], [1, 3], [3, 3, 2, 1]. The costs are 0, 0 and 1, thus\nthe answer is 1. In the second example it's optimal to split the sequence in\ntwo equal halves. The cost for each half is 4. In the third example it's\noptimal to split the sequence in the following way: [1, 2, 2, 2, 1], [2, 1, 1,\n1, 2], [2, 1, 1]. The costs are 4, 4, 1.\n\n",
        "cf_contest_id": 868,
        "cf_index": "F",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "divide and conquer",
            "dp"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 3\r\n1 1 3 3 3 2 1\r\n",
                "1\r\n"
            ],
            [
                "10 2\r\n1 2 1 2 1 2 1 2 1 2\r\n",
                "8\r\n"
            ],
            [
                "13 3\r\n1 2 2 2 1 2 1 1 1 2 2 1 1\r\n",
                "9\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 2\r\n2 2\r\n",
                "0\r\n"
            ],
            [
                "15 2\r\n11 9 15 15 15 15 15 15 9 9 11 15 9 11 11\r\n",
                "15\r\n"
            ],
            [
                "128 5\r\n116 8 116 116 119 39 116 116 119 116 8 119 119 119 39 116 39 119 39 119 119 39 8 39 8 119 8 116 116 116 119 119 8 39 39 8 116 119 119 119 119 8 8 8 119 39 119 116 119 119 39 39 119 8 116 116 116 116 116 119 116 116 119 116 39 39 119 8 8 119 39 116 39 39 119 119 116 116 119 119 119 119 8 8 116 116 116 39 119 39 119 119 116 119 8 119 8 8 116 39 8 8 116 39 8 39 119 8 8 119 8 119 119 119 8 8 8 116 119 8 8 39 39 8 119 116 119 8\r\n",
                "398\r\n"
            ]
        ]
    }
]