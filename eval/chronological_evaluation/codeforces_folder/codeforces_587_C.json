[
    {
        "name": "Duff in the Army",
        "description": "Recently Duff has been a soldier in the army. Malek is her commander. Their\ncountry, Andarz Gu has n cities (numbered from 1 to n) and n - 1 bidirectional\nroads. Each road connects two different cities. There exist a unique path\nbetween any two cities. There are also m people living in Andarz Gu (numbered\nfrom 1 to m). Each person has and ID number. ID number of i - th person is i\nand he/she lives in city number ci. Note that there may be more than one\nperson in a city, also there may be no people living in the city. Malek loves\nto order. That's why he asks Duff to answer to q queries. In each query, he\ngives her numbers v, u and a. To answer a query: Assume there are x people\nliving in the cities lying on the path from city v to city u. Assume these\npeople's IDs are p1, p2, ..., px in increasing order. If k = min(x, a), then\nDuff should tell Malek numbers k, p1, p2, ..., pk in this order. In the other\nwords, Malek wants to know a minimums on that path (or less, if there are less\nthan a people). Duff is very busy at the moment, so she asked you to help her\nand answer the queries. Input The first line of input contains three integers,\nn, m and q (1 \u2264 n, m, q \u2264 10^5). The next n - 1 lines contain the roads. Each\nline contains two integers v and u, endpoints of a road (1 \u2264 v, u \u2264 n, v \u2260 u).\nNext line contains m integers c1, c2, ..., cm separated by spaces (1 \u2264 ci \u2264 n\nfor each 1 \u2264 i \u2264 m). Next q lines contain the queries. Each of them contains\nthree integers, v, u and a (1 \u2264 v, u \u2264 n and 1 \u2264 a \u2264 10). Output For each\nquery, print numbers k, p1, p2, ..., pk separated by spaces in one line.\nExamples Input 5 4 5 1 3 1 2 1 4 4 5 2 1 4 3 4 5 6 1 5 2 5 5 10 2 3 3 5 3 1\nOutput 1 3 2 2 3 0 3 1 2 4 1 2 Note Graph of Andarz Gu in the sample case is\nas follows (ID of people in each city are written next to them):\n\n",
        "cf_contest_id": 587,
        "cf_index": "C",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5 4 5\r\n1 3\r\n1 2\r\n1 4\r\n4 5\r\n2 1 4 3\r\n4 5 6\r\n1 5 2\r\n5 5 10\r\n2 3 3\r\n5 3 1\r\n",
                "1 3 \r\n2 2 3 \r\n0 \r\n3 1 2 4 \r\n1 2 \r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1 1\r\n1\r\n1 1 3\r\n",
                "1 1 \r\n"
            ],
            [
                "5 1 1\r\n2 3\r\n3 5\r\n4 3\r\n3 1\r\n5\r\n4 2 7\r\n",
                "0 \r\n"
            ],
            [
                "5 5 5\r\n2 5\r\n3 2\r\n2 1\r\n4 2\r\n1 3 5 1 1\r\n2 4 10\r\n5 4 3\r\n4 2 6\r\n1 4 6\r\n3 2 8\r\n",
                "0 \r\n1 3 \r\n0 \r\n3 1 4 5 \r\n1 2 \r\n"
            ],
            [
                "5 5 5\r\n4 1\r\n4 2\r\n3 5\r\n3 2\r\n2 1 5 1 5\r\n5 3 1\r\n4 5 3\r\n1 5 8\r\n3 2 1\r\n1 5 6\r\n",
                "1 3 \r\n3 1 3 5 \r\n5 1 2 3 4 5 \r\n1 1 \r\n5 1 2 3 4 5 \r\n"
            ],
            [
                "5 5 5\r\n1 2\r\n1 4\r\n4 3\r\n4 5\r\n4 5 4 5 5\r\n2 3 2\r\n5 5 6\r\n5 1 3\r\n2 2 9\r\n1 1 5\r\n",
                "2 1 3 \r\n3 2 4 5 \r\n3 1 2 3 \r\n0 \r\n0 \r\n"
            ]
        ]
    }
]