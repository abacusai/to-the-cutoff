[
    {
        "name": "Suborrays",
        "description": "A permutation of length \n    n\n is an array consisting of \n    n\n distinct\nintegers from \n    1\n to \n    n\n in arbitrary order. For example,\n\n    [2,3,1,5,4]\n is a permutation, but \n    [1,2,2]\n is not a permutation\n(\n    2\n appears twice in the array) and \n    [1,3,4]\n is also not a\npermutation (\n    n=3\n but there is \n    4\n in the array). For a positive\ninteger \n    n\n, we call a permutation \n    p\n of length \n    n\n good if the\nfollowing condition holds for every pair \n    i\n and \n    j\n (\n    1 \n    \u2264 i\n    \n    \u2264 j \n    \u2264 n\n) \u2014 \n    (p_i \n     OR  p_i+1\n     OR \n    \u2026\n     OR  p_j-1\n     OR  p_j) \n    \u2265 j-i+1\n, where\n\n    OR\n denotes the bitwise OR operation. In other words, a\npermutation \n    p\n is good if for every subarray of \n    p\n, the\n\n    OR\n of all elements in it is not less than the number of\nelements in that subarray. Given a positive integer \n    n\n, output any good\npermutation of length \n    n\n. We can show that for the given constraints such\na permutation always exists. Input Each test contains multiple test cases. The\nfirst line contains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    100\n). Description of the test cases follows. The first and only line of\nevery test case contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 100\n).\nOutput For every test, output any good permutation of length \n    n\n on a\nseparate line. Example Input 3 1 3 7 Output 1 3 1 2 4 3 5 2 7 1 6 Note For\n\n    n = 3\n, \n    [3,1,2]\n is a good permutation. Some of the subarrays are\nlisted below. \n    3\n     OR 1 = 3 \n    \u2265 2\n \n    (i = 1,j = 2)\n\n\n    3\n     OR 1\n     OR 2 = 3 \n    \u2265 3\n \n    (i = 1,j = 3)\n\n\n    1\n     OR 2 = 3 \n    \u2265 2\n \n    (i = 2,j = 3)\n \n    1 \n    \u2265 1\n \n    (i\n    = 2,j = 2)\n Similarly, you can verify that \n    [4,3,5,2,7,1,6]\n is also\ngood.\n\n",
        "cf_contest_id": 1391,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1\r\n3\r\n7\r\n",
                "1\r\n1 2 3\r\n1 2 3 4 5 6 7\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n77\r\n",
                "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77\r\n"
            ],
            [
                "1\r\n57\r\n",
                "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57\r\n"
            ]
        ]
    }
]