[
    {
        "name": "Li Hua and Pattern",
        "description": "Li Hua has a pattern of size \n    n\n    \u00d7 n\n, each cell is either blue or\nred. He can perform exactly \n    k\n operations. In each operation, he chooses\na cell and changes its color from red to blue or from blue to red. Each cell\ncan be chosen as many times as he wants. Is it possible to make the pattern,\nthat matches its rotation by \n    180^\n    \u2218\n? Suppose you were Li Hua,\nplease solve this problem. Input The first line contains the single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test cases. The first line\nof each test case contains two integers \n    n,k\n (\n    1\n    \u2264 n\n    \u2264\n    10^3,0\n    \u2264 k \n    \u2264 10^9\n) \u2014 the size of the pattern and the number of\noperations. Each of next \n    n\n lines contains \n    n\n integers \n    a_i,j\n\n(\n    a_i,j\n    \u2208\n    \n    0,1\n) \u2014 the initial color of the cell, \n    0\n for\nblue and \n    1\n for red. It's guaranteed that sum of \n    n\n over all test\ncases does not exceed \n    10^3\n. Output For each set of input, print \"YES\" if\nit's possible to make the pattern, that matches its rotation by\n\n    180^\n    \u2218\n after applying exactly \n    k\n of operations, and \"NO\"\notherwise. You can output the answer in any case (upper or lower). For\nexample, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as\npositive responses. Example Input 3 4 0 1 1 1 1 0 0 0 1 1 0 1 0 1 1 1 1 4 3 1\n0 1 1 1 0 0 0 0 1 0 1 1 1 0 1 5 4 0 0 0 0 0 0 1 1 1 1 0 1 0 0 0 1 1 1 1 1 0 0\n0 0 0 Output NO YES YES Note In test case 1, you can't perform any operation.\nThe pattern after rotation is on the right. In test case 2, you can perform\noperations on \n    (2,1),(3,2),(3,4)\n. The pattern after operations is in the\nmiddle and the pattern after rotation is on the right.\n\n",
        "cf_contest_id": 1797,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n4 0\r\n1 1 1 1\r\n0 0 0 1\r\n1 0 1 0\r\n1 1 1 1\r\n4 3\r\n1 0 1 1\r\n1 0 0 0\r\n0 1 0 1\r\n1 1 0 1\r\n5 4\r\n0 0 0 0 0\r\n0 1 1 1 1\r\n0 1 0 0 0\r\n1 1 1 1 1\r\n0 0 0 0 0\r\n",
                "NO\r\nYES\r\nYES\r\n"
            ]
        ],
        "private_cases": []
    }
]