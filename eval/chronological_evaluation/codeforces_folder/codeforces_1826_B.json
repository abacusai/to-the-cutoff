[
    {
        "name": "Lunatic Never Content",
        "description": "You have an array \n    a\n of \n    n\n non-negative integers. Let's define\n\n    f(a, x) = [a_1 \n     x, a_2 \n     x, \n    \u2026, a_n \n     x]\n for\nsome positive integer \n    x\n. Find the biggest \n    x\n, such that \n    f(a,\n    x)\n is a palindrome. Here, \n    a \n     x\n is the remainder of the integer\ndivision of \n    a\n by \n    x\n. An array is a palindrome if it reads the same\nbackward as forward. More formally, an array \n    a\n of length \n    n\n is a\npalindrome if for every \n    i\n (\n    1 \n    \u2264 i \n    \u2264 n\n) \n    a_i = a_n - i\n    + 1\n. Input The first line contains a single integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 10^5\n) \u2014 the number of test cases. The first line of each test case\ncontains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n). The second\nline of each test case contains \n    n\n integers \n    a_i\n (\n    0 \n    \u2264 a_i\n    \n    \u2264 10^9\n). It's guaranteed that the sum of all \n    n\n does not exceed\n\n    10^5\n. Output For each test case output the biggest \n    x\n, such that\n\n    f(a, x)\n is a palindrome. If \n    x\n can be infinitely large, output\n\n    0\n instead. Example Input 4 2 1 2 8 3 0 1 2 0 3 2 1 1 0 3 100 1\n1000000000 Output 1 2 0 999999900 Note In the first example, \n    f(a, x = 1) =\n    [0, 0]\n which is a palindrome. In the second example, \n    f(a, x = 2) = [1,\n    0, 1, 0, 0, 1, 0, 1]\n which is a palindrome. It can be proven that in the\nfirst two examples, no larger \n    x\n satisfies the condition. In the third\nexample, \n    f(a, x) = [0]\n for any \n    x\n, so we can choose it infinitely\nlarge, so the answer is \n    0\n.\n\n",
        "cf_contest_id": 1826,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "math",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2\r\n1 2\r\n8\r\n3 0 1 2 0 3 2 1\r\n1\r\n0\r\n3\r\n100 1 1000000000\r\n",
                "1\r\n2\r\n0\r\n999999900\r\n"
            ]
        ],
        "private_cases": []
    }
]