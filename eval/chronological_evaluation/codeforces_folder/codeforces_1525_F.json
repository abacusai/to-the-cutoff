[
    {
        "name": "Goblins And Gnomes",
        "description": "Monocarp plays a computer game called \"Goblins and Gnomes\". In this game, he\nmanages a large underground city of gnomes and defends it from hordes of\ngoblins. The city consists of \n    n\n halls and \n    m\n one-directional\ntunnels connecting them. The structure of tunnels has the following property:\nif a goblin leaves any hall, he cannot return to that hall. The city will be\nattacked by \n    k\n waves of goblins; during the \n    i\n-th wave, \n    i\n\ngoblins attack the city. Monocarp's goal is to pass all \n    k\n waves. The\n\n    i\n-th wave goes as follows: firstly, \n    i\n goblins appear in some halls\nof the city and pillage them; at most one goblin appears in each hall. Then,\ngoblins start moving along the tunnels, pillaging all the halls in their path.\nGoblins are very greedy and cunning, so they choose their paths so that no two\ngoblins pass through the same hall. Among all possible attack plans, they\nchoose a plan which allows them to pillage the maximum number of halls. After\ngoblins are done pillaging, they leave the city. If all halls are pillaged\nduring the wave \u2014 Monocarp loses the game. Otherwise, the city is restored. If\nsome hall is pillaged during a wave, goblins are still interested in pillaging\nit during the next waves. Before each wave, Monocarp can spend some time\npreparing to it. Monocarp doesn't have any strict time limits on his\npreparations (he decides when to call each wave by himself), but the longer he\nprepares for a wave, the fewer points he gets for passing it. If Monocarp\nprepares for the \n    i\n-th wave for \n    t_i\n minutes, then he gets\n\n    max(0, x_i - t_i \n    \u00b7 y_i)\n points for passing it (obviously, if he\ndoesn't lose in the process). While preparing for a wave, Monocarp can block\ntunnels. He can spend one minute to either block all tunnels leading from some\nhall or block all tunnels leading to some hall. If Monocarp blocks a tunnel\nwhile preparing for a wave, it stays blocked during the next waves as well.\nHelp Monocarp to defend against all \n    k\n waves of goblins and get the\nmaximum possible amount of points! Input The first line contains three\nintegers \n    n\n, \n    m\n and \n    k\n (\n    2 \n    \u2264 n \n    \u2264 50\n; \n    0 \n    \u2264 m\n    \n    \u2264\n    n(n - 1)/2\n; \n    1 \n    \u2264 k \n    \u2264 n - 1\n) \u2014 the number of\nhalls in the city, the number of tunnels and the number of goblin waves,\ncorrespondely. Next \n    m\n lines describe tunnels. The \n    i\n-th line\ncontains two integers \n    u_i\n and \n    v_i\n (\n    1 \n    \u2264 u_i, v_i \n    \u2264 n\n;\n\n    u_i \n     v_i\n). It means that the tunnel goes from hall \n    u_i\n to\nhall \n    v_i\n. The structure of tunnels has the following property: if a\ngoblin leaves any hall, he cannot return to that hall. There is at most one\ntunnel between each pair of halls. Next \n    k\n lines describe the scoring\nsystem. The \n    i\n-th line contains two integers \n    x_i\n and \n    y_i\n\n(\n    1 \n    \u2264 x_i \n    \u2264 10^9\n; \n    1 \n    \u2264 y_i \n    \u2264 10^9\n). If Monocarp\nprepares for the \n    i\n-th wave for \n    t_i\n minutes, then he gets\n\n    max(0, x_i - t_i \n    \u00b7 y_i)\n points for passing it. Output Print the\noptimal Monocarp's strategy in the following format: At first, print one\ninteger \n    a\n (\n    k \n    \u2264 a \n    \u2264 2n + k\n) \u2014 the number of actions\nMonocarp will perform. Next, print actions themselves in the order Monocarp\nperforms them. The \n    i\n-th action is described by a single integer\n\n    b_i\n (\n    -n \n    \u2264 b_i \n    \u2264 n\n) using the following format: if \n    b_i >\n    0\n then Monocarp blocks all tunnels going out from the hall \n    b_i\n; if\n\n    b_i < 0\n then Monocarp blocks all tunnels going into the hall\n\n    |b_i|\n; if \n    b_i = 0\n then Monocarp calls the next goblin wave. You\ncan't repeat the same block action \n    b_i\n several times. Monocarp must\nsurvive all waves he calls (goblins shouldn't be able to pillage all halls).\nMonocarp should call exactly \n    k\n waves and earn the maximum possible\nnumber of points in total. If there are several optimal strategies \u2014 print any\nof them. Examples Input 5 4 4 1 2 2 3 4 3 5 3 100 1 200 5 10 10 100 1 Output 6\n-2 -3 0 0 0 0 Input 5 4 4 1 2 2 3 4 3 5 3 100 100 200 5 10 10 100 1 Output 6 0\n-3 0 0 1 0 Input 5 10 1 1 2 1 3 1 4 1 5 5 2 5 3 5 4 4 2 4 3 2 3 100 100 Output\n6 1 2 3 4 5 0 Note In the first example, Monocarp, firstly, block all tunnels\ngoing in hall \n    2\n, secondly \u2014 all tunnels going in hall \n    3\n, and after\nthat calls all waves. He spent two minutes to prepare to wave \n    1\n, so he\ngets \n    98\n points for it. He didn't prepare after that, that's why he gets\nmaximum scores for each of next waves (\n    200\n, \n    10\n and \n    100\n). In\ntotal, Monocarp earns \n    408\n points. In the second example, Monocarp calls\nfor the first wave immediately and gets \n    100\n points. Before the second\nwave he blocks all tunnels going in hall \n    3\n. He spent one minute\npreparing to the wave, so he gets \n    195\n points. Monocarp didn't prepare\nfor the third wave, so he gets \n    10\n points by surviving it. Before the\nfourth wave he blocks all tunnels going out from hall \n    1\n. He spent one\nminute, so he gets \n    99\n points for the fourth wave. In total, Monocarp\nearns \n    404\n points. In the third example, it doesn't matter how many\nminutes Monocarp will spend before the wave, since he won't get any points for\nit. That's why he decides to block all tunnels in the city, spending \n    5\n\nminutes. He survived the wave though without getting any points.\n\n",
        "cf_contest_id": 1525,
        "cf_index": "F",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dp",
            "flows",
            "graph matchings"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5 4 4\r\n1 2\r\n2 3\r\n4 3\r\n5 3\r\n100 1\r\n200 5\r\n10 10\r\n100 1\r\n",
                "6\r\n1 -3 0 0 0 0 "
            ],
            [
                "5 4 4\r\n1 2\r\n2 3\r\n4 3\r\n5 3\r\n100 100\r\n200 5\r\n10 10\r\n100 1\r\n",
                "6\r\n0 1 0 0 -3 0 "
            ],
            [
                "5 10 1\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n5 2\r\n5 3\r\n5 4\r\n4 2\r\n4 3\r\n2 3\r\n100 100\r\n",
                "2\r\n1 0 "
            ]
        ],
        "private_cases": [
            [
                "50 0 1\r\n867058 408127\r\n",
                "1\r\n0 "
            ],
            [
                "50 0 25\r\n937370 13484\r\n158416 798614\r\n980256 287377\r\n776267 571474\r\n293262 389758\r\n722459 191360\r\n497484 446364\r\n876500 526148\r\n568951 117802\r\n744507 296534\r\n554527 140792\r\n6860 256384\r\n699786 545005\r\n802421 570212\r\n812399 634050\r\n20440 764596\r\n918652 889093\r\n317197 552056\r\n558801 724759\r\n140509 28619\r\n31299 93742\r\n893512 635806\r\n640346 502676\r\n651648 556596\r\n769427 193894\r\n",
                "25\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
            ],
            [
                "50 0 1\r\n886650 453584271\r\n",
                "1\r\n0 "
            ],
            [
                "50 0 25\r\n227912 746803842\r\n835921 404504146\r\n456635 976369081\r\n222575 559024809\r\n927042 613508438\r\n408306 367335963\r\n478126 141646238\r\n680603 769814321\r\n630229 904707963\r\n418931 310867799\r\n477518 927449851\r\n825668 842433885\r\n908921 402503633\r\n929886 732248054\r\n856053 783068627\r\n880404 919612\r\n321256 633855866\r\n288188 195640362\r\n958907 310781541\r\n531379 360033057\r\n36699 699687894\r\n501015 809393252\r\n905849 877287219\r\n970891 242037659\r\n955531 218517638\r\n",
                "25\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
            ],
            [
                "50 0 1\r\n612735618 912237\r\n",
                "1\r\n0 "
            ],
            [
                "50 0 25\r\n219109583 355999\r\n178781246 584479\r\n456973179 947381\r\n579118412 922998\r\n744102364 262674\r\n43070653 133441\r\n425406256 59803\r\n69293732 661703\r\n112543612 759640\r\n927812629 535731\r\n918502919 535604\r\n194054569 469970\r\n529103322 652032\r\n984542718 579286\r\n520079431 385840\r\n620113973 178070\r\n810185055 509148\r\n681282163 919564\r\n838081658 406337\r\n283966048 519893\r\n786459315 711678\r\n855366059 855797\r\n484825450 389656\r\n963504259 945552\r\n309407424 438902\r\n",
                "25\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
            ],
            [
                "50 0 1\r\n685845700 120483022\r\n",
                "1\r\n0 "
            ],
            [
                "50 10 1\r\n10 21\r\n14 22\r\n46 43\r\n30 27\r\n16 38\r\n5 20\r\n50 17\r\n8 16\r\n7 45\r\n4 8\r\n314215 437200\r\n",
                "1\r\n0 "
            ],
            [
                "50 10 25\r\n17 14\r\n8 23\r\n49 37\r\n11 43\r\n40 1\r\n15 6\r\n27 39\r\n8 50\r\n3 48\r\n37 45\r\n268952 528609\r\n665273 796151\r\n412728 216411\r\n988570 747154\r\n622663 889943\r\n519104 950443\r\n256400 422512\r\n181377 8503\r\n411921 926039\r\n211173 783744\r\n102014 713359\r\n424106 285283\r\n600060 345967\r\n763327 149457\r\n979879 758244\r\n593801 768209\r\n502540 643884\r\n647776 383165\r\n791279 667803\r\n281555 529856\r\n899463 51162\r\n348640 562335\r\n511165 206115\r\n329469 891565\r\n205809 753223\r\n",
                "25\r\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
            ],
            [
                "50 10 1\r\n17 33\r\n41 19\r\n46 34\r\n32 1\r\n43 28\r\n41 49\r\n18 42\r\n33 10\r\n45 2\r\n37 23\r\n369072 365091129\r\n",
                "1\r\n0 "
            ],
            [
                "50 10 1\r\n18 25\r\n15 20\r\n30 19\r\n16 33\r\n14 1\r\n19 1\r\n31 8\r\n16 37\r\n13 25\r\n30 47\r\n540250743 643287\r\n",
                "1\r\n0 "
            ],
            [
                "50 10 1\r\n23 21\r\n30 31\r\n48 22\r\n16 26\r\n34 47\r\n26 8\r\n34 27\r\n41 20\r\n6 5\r\n50 40\r\n60691246 669631286\r\n",
                "1\r\n0 "
            ],
            [
                "3 2 2\r\n1 2\r\n3 2\r\n100 50\r\n200 75\r\n",
                "3\r\n-2 0 0 "
            ],
            [
                "3 2 2\r\n1 2\r\n3 2\r\n100 50\r\n40 75\r\n",
                "3\r\n0 -2 0 "
            ],
            [
                "2 1 1\r\n1 2\r\n100 50\r\n",
                "2\r\n1 0 "
            ],
            [
                "2 0 1\r\n100 50\r\n",
                "1\r\n0 "
            ]
        ]
    }
]