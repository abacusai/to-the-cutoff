[
    {
        "name": "Another String Minimization Problem",
        "description": "You have a sequence \n    a_1, a_2, \n    \u2026, a_n\n of length \n    n\n,\nconsisting of integers between \n    1\n and \n    m\n. You also have a string\n\n    s\n, consisting of \n    m\n characters B. You are going to perform the\nfollowing \n    n\n operations. At the \n    i\n-th (\n    1 \n    \u2264 i \n    \u2264 n\n)\noperation, you replace either the \n    a_i\n-th or the \n    (m + 1 - a_i)\n-th\ncharacter of \n    s\n with A. You can replace the character at any position\nmultiple times through the operations. Find the lexicographically smallest\nstring you can get after these operations. A string \n    x\n is\nlexicographically smaller than a string \n    y\n of the same length if and only\nif in the first position where \n    x\n and \n    y\n differ, the string \n    x\n\nhas a letter that appears earlier in the alphabet than the corresponding\nletter in \n    y\n. Input The first line contains the number of test cases\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 2000\n). The first line of each test case\ncontains two integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 50\n) \u2014 the\nlength of the sequence \n    a\n and the length of the string \n    s\n\nrespectively. The second line contains \n    n\n integers \n    a_1, a_2, \n    \u2026,\n    a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 m\n) \u2014 the sequence \n    a\n. Output For each\ntest case, print a string of length \n    m\n \u2014 the lexicographically smallest\nstring you can get. Each character of the string should be either capital\nEnglish letter A or capital English letter B. Example Input 6 4 5 1 1 3 1 1 5\n2 4 1 1 1 1 1 2 4 1 3 2 7 7 5 4 5 5 5 3 5 Output ABABA BABBB A AABB ABABBBB\nABABA Note In the first test case, the sequence \n    a = [1, 1, 3, 1]\n. One of\nthe possible solutions is the following. At the \n    1\n-st operation, you can\nreplace the \n    1\n-st character of \n    s\n with A. After it, \n    s\n becomes\nABBBB. At the \n    2\n-nd operation, you can replace the \n    5\n-th character\nof \n    s\n with A (since \n    m+1-a_2=5\n). After it, \n    s\n becomes ABBBA. At\nthe \n    3\n-rd operation, you can replace the \n    3\n-rd character of \n    s\n\nwith A. After it, \n    s\n becomes ABABA. At the \n    4\n-th operation, you can\nreplace the \n    1\n-st character of \n    s\n with A. After it, \n    s\n remains\nequal to ABABA. The resulting string is ABABA. It is impossible to produce a\nlexicographically smaller string.In the second test case, you are going to\nperform only one operation. You can replace either the \n    2\n-nd character or\n\n    4\n-th character of \n    s\n with A. You can get strings BABBB and BBBAB\nafter the operation. The string BABBB is the lexicographically smallest among\nthese strings. In the third test case, the only string you can get is A. In\nthe fourth test case, you can replace the \n    1\n-st and \n    2\n-nd characters\nof \n    s\n with A to get AABB. In the fifth test case, you can replace the\n\n    1\n-st and \n    3\n-rd characters of \n    s\n with A to get ABABBBB.\n\n",
        "cf_contest_id": 1706,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "2-sat",
            "constructive algorithms",
            "greedy",
            "string suffix structures",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n4 5\r\n1 1 3 1\r\n1 5\r\n2\r\n4 1\r\n1 1 1 1\r\n2 4\r\n1 3\r\n2 7\r\n7 5\r\n4 5\r\n5 5 3 5\r\n",
                "ABABA\r\nBABBB\r\nA\r\nAABB\r\nABABBBB\r\nABABA\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 1\r\n1\r\n",
                "A\r\n"
            ],
            [
                "1\r\n2 44\r\n1 1\r\n",
                "ABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBA\r\n"
            ],
            [
                "1\r\n2 43\r\n1 1\r\n",
                "ABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBA\r\n"
            ]
        ]
    }
]