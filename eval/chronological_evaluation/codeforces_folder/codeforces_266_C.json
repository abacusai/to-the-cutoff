[
    {
        "name": "Below the Diagonal",
        "description": "You are given a square matrix consisting of n rows and n columns. We assume\nthat the rows are numbered from 1 to n from top to bottom and the columns are\nnumbered from 1 to n from left to right. Some cells (n - 1 cells in total) of\nthe the matrix are filled with ones, the remaining cells are filled with\nzeros. We can apply the following operations to the matrix: Swap i-th and j-th\nrows of the matrix; Swap i-th and j-th columns of the matrix. You are asked to\ntransform the matrix into a special form using these operations. In that\nspecial form all the ones must be in the cells that lie below the main\ndiagonal. Cell of the matrix, which is located on the intersection of the i-th\nrow and of the j-th column, lies below the main diagonal if i > j. Input The\nfirst line contains an integer n (2 \u2264 n \u2264 1000) \u2014 the number of rows and\ncolumns. Then follow n - 1 lines that contain one's positions, one per line.\nEach position is described by two integers xk, yk (1 \u2264 xk, yk \u2264 n), separated\nby a space. A pair (xk, yk) means that the cell, which is located on the\nintersection of the xk-th row and of the yk-th column, contains one. It is\nguaranteed that all positions are distinct. Output Print the description of\nyour actions. These actions should transform the matrix to the described\nspecial form. In the first line you should print a non-negative integer m (m \u2264\n10^5) \u2014 the number of actions. In each of the next m lines print three space-\nseparated integers t, i, j (1 \u2264 t \u2264 2, 1 \u2264 i, j \u2264 n, i \u2260 j), where t = 1 if\nyou want to swap rows, t = 2 if you want to swap columns, and i and j denote\nthe numbers of rows or columns respectively. Please note, that you do not need\nto minimize the number of operations, but their number should not exceed 10^5.\nIf there are several solutions, you may print any of them. Examples Input 2 1\n2 Output 2 2 1 2 1 1 2 Input 3 3 1 1 3 Output 3 2 2 3 1 1 3 1 1 2 Input 3 2 1\n3 2 Output 0\n\n",
        "cf_contest_id": 266,
        "cf_index": "C",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n1 2\r\n",
                "2\r\n1 1 2\r\n2 2 1\r\n"
            ],
            [
                "3\r\n3 1\r\n1 3\r\n",
                "3\r\n1 3 2\r\n1 1 3\r\n2 3 2\r\n"
            ],
            [
                "3\r\n2 1\r\n3 2\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n2 1\r\n1 4\r\n1 1\r\n",
                "3\r\n1 1 3\r\n2 4 2\r\n1 3 4\r\n"
            ],
            [
                "5\r\n5 1\r\n3 4\r\n1 2\r\n1 3\r\n",
                "5\r\n1 5 2\r\n2 4 2\r\n1 1 4\r\n2 4 3\r\n1 4 5\r\n"
            ],
            [
                "10\r\n8 8\r\n8 5\r\n8 10\r\n5 7\r\n6 6\r\n1 3\r\n7 8\r\n4 5\r\n4 10\r\n",
                "13\r\n1 8 2\r\n2 8 1\r\n1 2 3\r\n2 5 2\r\n1 3 4\r\n2 10 3\r\n2 7 4\r\n2 6 5\r\n1 1 7\r\n2 10 6\r\n1 1 8\r\n1 3 9\r\n1 9 10\r\n"
            ],
            [
                "15\r\n5 12\r\n4 5\r\n1 2\r\n1 5\r\n12 11\r\n11 14\r\n15 3\r\n7 2\r\n10 6\r\n3 10\r\n1 4\r\n9 9\r\n8 13\r\n11 5\r\n",
                "21\r\n1 5 2\r\n2 12 1\r\n1 4 3\r\n2 5 2\r\n1 1 4\r\n2 5 3\r\n1 4 5\r\n1 12 6\r\n2 11 5\r\n1 11 7\r\n2 14 6\r\n1 15 8\r\n2 11 7\r\n1 11 9\r\n2 14 9\r\n1 1 11\r\n1 5 12\r\n1 1 13\r\n2 14 12\r\n1 15 14\r\n1 7 15\r\n"
            ],
            [
                "20\r\n8 6\r\n20 8\r\n2 17\r\n10 1\r\n2 13\r\n14 4\r\n17 13\r\n2 2\r\n2 1\r\n1 19\r\n19 2\r\n20 18\r\n16 5\r\n4 4\r\n13 2\r\n14 5\r\n15 2\r\n12 7\r\n19 3\r\n",
                "25\r\n1 8 2\r\n2 6 1\r\n1 20 3\r\n2 8 2\r\n1 8 4\r\n2 17 3\r\n1 10 5\r\n2 6 4\r\n1 4 6\r\n2 13 5\r\n1 14 7\r\n1 17 8\r\n1 6 9\r\n1 9 10\r\n1 1 11\r\n2 19 10\r\n1 19 12\r\n1 3 13\r\n2 18 12\r\n1 16 14\r\n1 17 15\r\n1 3 16\r\n1 7 17\r\n1 7 18\r\n1 12 20\r\n"
            ]
        ]
    }
]