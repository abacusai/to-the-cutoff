[
    {
        "name": "Roads not only in Berland",
        "description": "Berland Government decided to improve relations with neighboring countries.\nFirst of all, it was decided to build new roads so that from each city of\nBerland and neighboring countries it became possible to reach all the others.\nThere are n cities in Berland and neighboring countries in total and exactly n\n- 1 two-way roads. Because of the recent financial crisis, the Berland\nGovernment is strongly pressed for money, so to build a new road it has to\nclose some of the existing ones. Every day it is possible to close one\nexisting road and immediately build a new one. Your task is to determine how\nmany days would be needed to rebuild roads so that from each city it became\npossible to reach all the others, and to draw a plan of closure of old roads\nand building of new ones. Input The first line contains integer n (2 \u2264 n \u2264\n1000) \u2014 amount of cities in Berland and neighboring countries. Next n - 1\nlines contain the description of roads. Each road is described by two space-\nseparated integers ai, bi (1 \u2264 ai, bi \u2264 n, ai \u2260 bi) \u2014 pair of cities, which\nthe road connects. It can't be more than one road between a pair of cities. No\nroad connects the city with itself. Output Output the answer, number t \u2014 what\nis the least amount of days needed to rebuild roads so that from each city it\nbecame possible to reach all the others. Then output t lines \u2014 the plan of\nclosure of old roads and building of new ones. Each line should describe one\nday in the format i j u v \u2014 it means that road between cities i and j became\nclosed and a new road between cities u and v is built. Cities are numbered\nfrom 1. If the answer is not unique, output any. Examples Input 2 1 2 Output 0\nInput 7 1 2 2 3 3 1 4 5 5 6 6 7 Output 1 3 1 3 7\n\n",
        "cf_contest_id": 25,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "dsu",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n1 2\r\n",
                "0\r\n"
            ],
            [
                "7\r\n1 2\r\n2 3\r\n3 1\r\n4 5\r\n5 6\r\n6 7\r\n",
                "1\r\n3 1 3 7\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n3 2\r\n1 2\r\n",
                "0\r\n"
            ],
            [
                "3\r\n3 1\r\n3 2\r\n",
                "0\r\n"
            ],
            [
                "4\r\n1 4\r\n3 1\r\n3 4\r\n",
                "1\r\n3 4 2 4\r\n"
            ],
            [
                "5\r\n4 1\r\n4 3\r\n5 3\r\n2 4\r\n",
                "0\r\n"
            ],
            [
                "6\r\n5 2\r\n5 3\r\n1 4\r\n3 1\r\n5 6\r\n",
                "0\r\n"
            ],
            [
                "10\r\n5 9\r\n8 5\r\n7 6\r\n7 9\r\n3 9\r\n2 1\r\n7 2\r\n3 6\r\n7 1\r\n",
                "2\r\n3 6 1 10\r\n7 1 10 4\r\n"
            ],
            [
                "21\r\n7 15\r\n13 1\r\n14 3\r\n4 10\r\n2 3\r\n16 18\r\n17 20\r\n16 20\r\n8 4\r\n3 12\r\n2 17\r\n13 11\r\n16 1\r\n13 2\r\n13 5\r\n8 9\r\n6 14\r\n3 17\r\n16 9\r\n13 8\r\n",
                "3\r\n13 2 9 19\r\n3 17 19 21\r\n13 8 21 15\r\n"
            ],
            [
                "39\r\n6 13\r\n15 39\r\n10 35\r\n31 28\r\n4 21\r\n12 39\r\n3 7\r\n3 13\r\n6 1\r\n5 14\r\n36 28\r\n12 15\r\n18 38\r\n30 29\r\n19 34\r\n36 16\r\n20 22\r\n8 13\r\n38 32\r\n26 39\r\n21 37\r\n1 7\r\n15 27\r\n12 26\r\n8 3\r\n6 14\r\n29 2\r\n25 23\r\n32 21\r\n5 16\r\n32 25\r\n6 8\r\n13 10\r\n23 30\r\n34 37\r\n29 33\r\n28 14\r\n36 5\r\n",
                "7\r\n12 15 33 35\r\n1 7 35 9\r\n12 26 9 11\r\n8 3 11 17\r\n6 8 17 22\r\n28 14 22 24\r\n36 5 24 27\r\n"
            ],
            [
                "60\r\n17 34\r\n46 22\r\n50 44\r\n46 33\r\n41 21\r\n31 33\r\n48 6\r\n38 19\r\n35 60\r\n2 24\r\n49 29\r\n7 53\r\n34 1\r\n19 55\r\n32 1\r\n31 42\r\n27 28\r\n4 53\r\n6 50\r\n21 34\r\n1 10\r\n12 36\r\n54 8\r\n16 13\r\n51 43\r\n45 51\r\n54 20\r\n13 53\r\n34 33\r\n49 33\r\n51 11\r\n59 34\r\n15 5\r\n59 28\r\n30 39\r\n13 30\r\n58 4\r\n34 14\r\n3 9\r\n19 34\r\n4 18\r\n26 48\r\n56 54\r\n3 43\r\n57 25\r\n3 41\r\n35 3\r\n48 44\r\n19 13\r\n54 1\r\n23 31\r\n59 47\r\n5 1\r\n46 40\r\n6 26\r\n20 25\r\n37 5\r\n17 24\r\n20 52\r\n",
                "2\r\n48 44 52 44\r\n6 26 44 36\r\n"
            ]
        ]
    }
]