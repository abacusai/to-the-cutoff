[
    {
        "name": "Mateusz and an Infinite Sequence",
        "description": "A Thue-Morse-Radecki-Mateusz sequence (Thorse-Radewoosh sequence in short) is\nan infinite sequence constructed from a finite sequence \n    gen\n\nof length \n    d\n and an integer \n    m\n, obtained in the following sequence\nof steps: In the beginning, we define the one-element sequence \n    M_0=(0)\n.\nIn the \n    k\n-th step, \n    k \n    \u2265 1\n, we define the sequence \n    M_k\n to\nbe the concatenation of the \n    d\n copies of \n    M_k-1\n. However, each of\nthem is altered slightly \u2014 in the \n    i\n-th of them (\n    1 \n    \u2264 i \n    \u2264\n    d\n), each element \n    x\n is changed to \n    (x+\n    gen_i)\n    \n    m\n. For instance, if we pick \n    gen = (0,\n    \n    1, \n    2)\n and \n    m = 4\n: \n    M_0 = (0)\n,\n\n    M_1 = (0, \n    1, \n    2)\n, \n    M_2 = (0, 1, 2,\n    \n    1, 2, 3, \n    2, 3, 0)\n, \n    M_3 = (0, 1, 2, 1,\n    2, 3, 2, 3, 0, \n    1, 2, 3, 2, 3, 0, 3, 0, 1, \n    2,\n    3, 0, 3, 0, 1, 0, 1, 2)\n, and so on. As you can see, as long as the first\nelement of \n    gen\n is \n    0\n, each consecutive step produces a\nsequence whose prefix is the sequence generated in the previous step.\nTherefore, we can define the infinite Thorse-Radewoosh sequence\n\n    M_\n    \u221e\n as the sequence obtained by applying the step above\nindefinitely. For the parameters above, \n    M_\n    \u221e = (0, 1, 2, 1, 2, 3, 2,\n    3, 0, 1, 2, 3, 2, 3, 0, 3, 0, 1, \n    \u2026)\n. Mateusz picked a sequence\n\n    gen\n and an integer \n    m\n, and used them to obtain a Thorse-\nRadewoosh sequence \n    M_\n    \u221e\n. He then picked two integers \n    l\n,\n\n    r\n, and wrote down a subsequence of this sequence \n    A :=\n    ((M_\n    \u221e)_l, (M_\n    \u221e)_l+1, \n    \u2026, (M_\n    \u221e)_r)\n. Note that we\nuse the \n    1\n-based indexing both for \n    M_\n    \u221e\n and \n    A\n. Mateusz\nhas his favorite sequence \n    B\n with length \n    n\n, and would like to see\nhow large it is compared to \n    A\n. Let's say that \n    B\n majorizes sequence\n\n    X\n of length \n    n\n (let's denote it as \n    B \n    \u2265 X\n) if and only if\nfor all \n    i \n    \u2208\n    \n    1, 2, \n    \u2026, n\n, we have \n    B_i \n    \u2265\n    X_i\n. He now asks himself how many integers \n    x\n in the range \n    [1, |A|\n    - n + 1]\n there are such that \n    B \n    \u2265 (A_x, A_x+1, A_x+2, \n    \u2026,\n    A_x+n-1)\n. As both sequences were huge, answering the question using only\nhis pen and paper turned out to be too time-consuming. Can you help him\nautomate his research? Input The first line contains two integers \n    d\n and\n\n    m\n (\n    2 \n    \u2264 d \n    \u2264 20\n, \n    2 \n    \u2264 m \n    \u2264 60\n) \u2014 the length\nof the sequence \n    gen\n and an integer used to perform the\nmodular operations. The second line contains \n    d\n integers\n\n    gen_i\n (\n    0 \n    \u2264\n    gen_i < m\n). It's guaranteed\nthat the first element of the sequence \n    gen\n is equal to zero.\nThe third line contains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 30000\n) \u2014\nthe length of the sequence \n    B\n. The fourth line contains \n    n\n integers\n\n    B_i\n (\n    0 \n    \u2264 B_i < m\n). The fifth line contains two integers\n\n    l\n and \n    r\n (\n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 10^18\n, \n    r-l+1 \n    \u2265\n    n\n). Output Print a single integer \u2014 the answer to the problem. Examples\nInput 2 2 0 1 4 0 1 1 0 2 21 Output 6 Input 3 4 0 1 2 2 0 2 6 11 Output 1 Note\nThorse-Radewoosh sequence in the first example is the standard Thue-Morse\nsequence, so the sequence \n    A\n is as follows: \n    11010011001011010010\n.\nHere are the places where the sequence \n    B\n majorizes \n    A\n:\n\n",
        "cf_contest_id": 1097,
        "cf_index": "H",
        "cf_rating": 3400,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "dp",
            "strings"
        ],
        "time_limit_seconds": 7.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "2 2\r\n0 1\r\n4\r\n0 1 1 0\r\n2 21\r\n",
                "6\r\n"
            ],
            [
                "3 4\r\n0 1 2\r\n2\r\n0 2\r\n6 11\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 10\r\n0 5\r\n7\r\n8 8 5 3 1 9 8\r\n1 100\r\n",
                "16\r\n"
            ],
            [
                "10 30\r\n0 10 3 1 15 24 11 10 6 21\r\n100\r\n20 6 15 26 25 27 12 5 7 22 20 12 17 28 3 22 28 13 28 25 27 17 8 23 14 0 7 23 16 4 5 26 2 5 16 4 11 18 9 29 20 22 29 21 2 5 18 3 7 16 14 16 29 13 2 26 17 24 14 23 2 19 18 3 23 11 20 27 25 14 27 7 28 18 3 17 14 17 22 13 15 28 15 11 7 9 23 0 7 26 2 20 20 12 2 24 21 14 28 7\r\n5000 10000\r\n",
                "0\r\n"
            ],
            [
                "20 60\r\n0 13 17 57 36 14 31 19 36 46 21 41 34 35 29 11 16 39 42 48\r\n7\r\n11 53 32 42 31 31 38\r\n1 100\r\n",
                "0\r\n"
            ],
            [
                "2 10\r\n0 2\r\n7\r\n7 7 9 9 7 7 7\r\n1 100\r\n",
                "21\r\n"
            ],
            [
                "10 30\r\n0 12 6 11 25 27 10 7 2 11\r\n100\r\n28 29 29 26 29 29 29 29 29 29 28 29 29 29 29 29 29 29 26 26 29 29 29 29 29 29 29 29 29 29 26 29 29 29 29 29 29 29 29 29 29 29 29 28 29 29 29 29 29 27 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 28 29 29 28 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29\r\n5000 10000\r\n",
                "2493\r\n"
            ],
            [
                "20 60\r\n0 6 24 32 57 32 18 43 59 51 18 15 51 42 46 17 16 8 58 8\r\n7\r\n46 52 53 57 59 53 59\r\n1 100\r\n",
                "43\r\n"
            ],
            [
                "2 10\r\n0 7\r\n7\r\n9 9 9 9 9 9 9\r\n1 100\r\n",
                "94\r\n"
            ],
            [
                "10 30\r\n0 14 26 4 19 25 7 18 6 24\r\n100\r\n29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29\r\n5000 10000\r\n",
                "4902\r\n"
            ],
            [
                "20 60\r\n0 59 15 16 18 43 33 8 6 56 40 20 15 26 27 7 7 52 14 52\r\n7\r\n59 59 59 59 59 59 59\r\n1 100\r\n",
                "94\r\n"
            ],
            [
                "2 10\r\n0 8\r\n7\r\n5 8 9 1 0 1 9\r\n1 100\r\n",
                "0\r\n"
            ],
            [
                "10 30\r\n0 17 0 14 0 28 28 15 3 28\r\n100\r\n29 29 29 29 29 19 29 29 29 29 27 29 29 29 29 29 29 22 17 29 29 29 29 29 29 29 29 16 29 29 29 29 29 29 29 29 29 29 29 13 29 29 29 29 29 17 29 29 29 29 25 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 0 29 19 29 29 29 29\r\n5000 10000\r\n",
                "2\r\n"
            ],
            [
                "20 60\r\n0 51 13 7 40 53 56 24 5 17 38 10 47 18 52 57 39 44 46 44\r\n7\r\n25 28 39 54 20 50 6\r\n1 100\r\n",
                "0\r\n"
            ],
            [
                "2 2\r\n0 1\r\n1\r\n0\r\n1 1\r\n",
                "1\r\n"
            ],
            [
                "2 2\r\n0 1\r\n1\r\n1\r\n1 1\r\n",
                "1\r\n"
            ],
            [
                "5 5\r\n0 1 2 3 4\r\n1\r\n2\r\n1000000000000000000 1000000000000000000\r\n",
                "1\r\n"
            ],
            [
                "20 60\r\n0 49 59 59 28 9 56 16 28 35 15 2 43 53 57 14 29 56 29 33\r\n1\r\n2\r\n1 1000000000000000000\r\n",
                "50001518097261610\r\n"
            ],
            [
                "20 60\r\n0 50 15 57 14 22 5 39 26 12 15 59 15 54 59 5 44 16 38 34\r\n1\r\n1\r\n999999999999000000 1000000000000000000\r\n",
                "34231\r\n"
            ],
            [
                "20 60\r\n0 41 49 53 23 39 53 10 54 30 35 43 56 41 11 33 19 12 45 54\r\n1\r\n2\r\n100000000000000000 1000000000000000000\r\n",
                "45000004971881496\r\n"
            ],
            [
                "20 60\r\n0 10 21 5 16 53 21 50 43 35 47 46 11 19 14 7 35 38 42 7\r\n1\r\n22\r\n1 1000000000000000000\r\n",
                "383334650925075618\r\n"
            ],
            [
                "20 60\r\n0 59 50 42 30 3 50 11 17 38 54 26 48 7 43 15 19 13 49 59\r\n1\r\n14\r\n999999999999000000 1000000000000000000\r\n",
                "249892\r\n"
            ],
            [
                "20 60\r\n0 14 48 54 23 20 38 42 44 48 14 54 28 26 55 19 10 10 55 35\r\n1\r\n18\r\n100000000000000000 1000000000000000000\r\n",
                "285001605453565019\r\n"
            ],
            [
                "20 60\r\n0 15 18 54 24 44 54 40 43 19 11 38 14 29 6 41 50 21 12 24\r\n1\r\n59\r\n1 1000000000000000000\r\n",
                "1000000000000000000\r\n"
            ],
            [
                "20 60\r\n0 9 50 51 22 44 43 36 23 56 24 53 4 20 51 24 54 55 15 32\r\n1\r\n59\r\n999999999999000000 1000000000000000000\r\n",
                "1000001\r\n"
            ],
            [
                "20 60\r\n0 24 31 11 31 17 47 6 34 14 28 5 44 39 19 29 21 51 38 8\r\n1\r\n59\r\n100000000000000000 1000000000000000000\r\n",
                "900000000000000001\r\n"
            ]
        ]
    }
]