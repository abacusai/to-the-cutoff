[
    {
        "name": "Watto and Mechanism",
        "description": "Watto, the owner of a spare parts store, has recently got an order for the\nmechanism that can process strings in a certain way. Initially the memory of\nthe mechanism is filled with n strings. Then the mechanism should be able to\nprocess queries of the following type: \"Given string s, determine if the\nmemory of the mechanism contains string t that consists of the same number of\ncharacters as s and differs from s in exactly one position\". Watto has already\ncompiled the mechanism, all that's left is to write a program for it and check\nit on the data consisting of n initial lines and m queries. He decided to\nentrust this job to you. Input The first line contains two non-negative\nnumbers n and m (0 \u2264 n \u2264 3\u00b710^5, 0 \u2264 m \u2264 3\u00b710^5) \u2014 the number of the initial\nstrings and the number of queries, respectively. Next follow n non-empty\nstrings that are uploaded to the memory of the mechanism. Next follow m non-\nempty strings that are the queries to the mechanism. The total length of lines\nin the input doesn't exceed 6\u00b710^5. Each line consists only of letters 'a',\n'b', 'c'. Output For each query print on a single line \"YES\" (without the\nquotes), if the memory of the mechanism contains the required string,\notherwise print \"NO\" (without the quotes). Examples Input 2 3 aaaaa acacaca\naabaa ccacacc caaac Output YES NO NO\n\n",
        "cf_contest_id": 514,
        "cf_index": "C",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "hashing",
            "string suffix structures",
            "strings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 3\r\naaaaa\r\nacacaca\r\naabaa\r\nccacacc\r\ncaaac\r\n",
                "YES\r\nNO\r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 5\r\nacbacbacb\r\ncbacbacb\r\nacbacbac\r\naacbacbacb\r\nacbacbacbb\r\nacbaabacb\r\n",
                "NO\r\nNO\r\nNO\r\nNO\r\nYES\r\n"
            ],
            [
                "0 0\r\n",
                ""
            ],
            [
                "5 4\r\nab\r\ncacab\r\ncbabc\r\nacc\r\ncacab\r\nabc\r\naa\r\nacbca\r\ncb\r\n",
                "YES\r\nYES\r\nNO\r\nYES\r\n"
            ],
            [
                "9 9\r\ncaccbcacabccba\r\naacbcbcaabacbcbcba\r\nbabccaaacccacbb\r\ncaaabcaacbababbabbb\r\nabbaccacabacaaaa\r\nbccbccababcaacb\r\ncaacbcaacbababbabbb\r\nbcacababbbcaaca\r\nccbbcbababbccaab\r\nbbcbccababcaacb\r\naacccbabbacbabacaca\r\nbbcbcccbabcaacb\r\nacbacacbcacc\r\ncaaabcaaabacabbabbb\r\nabbbabaaaba\r\naacccbcaabacbcbcba\r\nabbaccacabbcaaaa\r\naaccbbcabbacbcbcba\r\n",
                "YES\r\nNO\r\nNO\r\nNO\r\nNO\r\nNO\r\nYES\r\nYES\r\nNO\r\n"
            ],
            [
                "1 1\r\nbbbbbbbaaaabbbbbaabbbba\r\naaabbbabbbbbbbaabbabbbb\r\n",
                "NO\r\n"
            ]
        ]
    }
]