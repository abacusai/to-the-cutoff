[
    {
        "name": "BAN BAN",
        "description": "You are given an integer \n    n\n. Let's define \n    s(n)\n as the string \"BAN\"\nconcatenated \n    n\n times. For example, \n    s(1)\n = \"BAN\", \n    s(3)\n =\n\"BANBANBAN\". Note that the length of the string \n    s(n)\n is equal to\n\n    3n\n. Consider \n    s(n)\n. You can perform the following operation on\n\n    s(n)\n any number of times (possibly zero): Select any two distinct\nindices \n    i\n and \n    j\n \n    (1 \n    \u2264 i, j \n    \u2264 3n, i \n     j)\n. Then,\nswap \n    s(n)_i\n and \n    s(n)_j\n. You want the string \"BAN\" to not appear in\n\n    s(n)\n as a subsequence. What's the smallest number of operations you have\nto do to achieve this? Also, find one such shortest sequence of operations. A\nstring \n    a\n is a subsequence of a string \n    b\n if \n    a\n can be obtained\nfrom \n    b\n by deletion of several (possibly, zero or all) characters. Input\nThe input consists of multiple test cases. The first line contains a single\ninteger \n    t\n \n    (1 \n    \u2264 t \n    \u2264 100)\n \u2014 the number of test cases. The\ndescription of the test cases follows. The only line of each test case\ncontains a single integer \n    n\n \n    (1 \n    \u2264 n \n    \u2264 100)\n. Output For\neach test case, in the first line output \n    m\n (\n    0 \n    \u2264 m \n    \u2264 10^5\n)\n\u2014 the minimum number of operations required. It's guaranteed that the\nobjective is always achievable in at most \n    10^5\n operations under the\nconstraints of the problem. Then, output \n    m\n lines. The \n    k\n-th of\nthese lines should contain two integers \n    i_k\n, \n    j_k\n \n    (1\n    \u2264 i_k,\n    j_k \n    \u2264 3n, i_k \n     j_k)\n denoting that you want to swap characters at\nindices \n    i_k\n and \n    j_k\n at the \n    k\n-th operation. After all \n    m\n\noperations, \"BAN\" must not appear in \n    s(n)\n as a subsequence. If there are\nmultiple possible answers, output any. Example Input 2 1 2 Output 1 1 2 1 2 6\nNote In the first testcase, \n    s(1) =\n \"BAN\", we can swap \n    s(1)_1\n and\n\n    s(1)_2\n, converting \n    s(1)\n to \"ABN\", which does not contain \"BAN\" as\na subsequence. In the second testcase, \n    s(2) =\n \"BANBAN\", we can swap\n\n    s(2)_2\n and \n    s(2)_6\n, converting \n    s(2)\n to \"BNNBAA\", which does\nnot contain \"BAN\" as a subsequence.\n\n",
        "cf_contest_id": 1747,
        "cf_index": "B",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n1\r\n2\r\n",
                "1\r\n1 3\r\n1\r\n1 6\r\n"
            ]
        ],
        "private_cases": []
    }
]