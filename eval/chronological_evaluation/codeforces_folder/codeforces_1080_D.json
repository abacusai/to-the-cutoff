[
    {
        "name": "Olya and magical square",
        "description": "Recently, Olya received a magical square with the size of \n    2^n\n    \u00d7\n    2^n\n. It seems to her sister that one square is boring. Therefore, she asked\nOlya to perform exactly \n    k\n splitting operations. A Splitting operation is\nan operation during which Olya takes a square with side \n    a\n and cuts it\ninto 4 equal squares with side \n    a2\n. If the side of the square\nis equal to \n    1\n, then it is impossible to apply a splitting operation to\nit (see examples for better understanding). Olya is happy to fulfill her\nsister's request, but she also wants the condition of Olya's happiness to be\nsatisfied after all operations. The condition of Olya's happiness will be\nsatisfied if the following statement is fulfilled: Let the length of the side\nof the lower left square be equal to \n    a\n, then the length of the side of\nthe right upper square should also be equal to \n    a\n. There should also be a\npath between them that consists only of squares with the side of length\n\n    a\n. All consecutive squares on a path should have a common side.\nObviously, as long as we have one square, these conditions are met. So Olya is\nready to fulfill her sister's request only under the condition that she is\nsatisfied too. Tell her: is it possible to perform exactly \n    k\n splitting\noperations in a certain order so that the condition of Olya's happiness is\nsatisfied? If it is possible, tell also the size of the side of squares of\nwhich the path from the lower left square to the upper right one will consist.\nInput The first line contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^3\n)\n\u2014 the number of tests. Each of the following \n    t\n lines contains two\nintegers \n    n_i\n and \n    k_i\n (\n    1 \n    \u2264 n_i \n    \u2264 10^9, 1 \n    \u2264 k_i \n    \u2264\n    10^18\n) \u2014 the description of the \n    i\n-th test, which means that\ninitially Olya's square has size of \n    2^n_i\n    \u00d7 2^n_i\n and Olya's\nsister asks her to do exactly \n    k_i\n splitting operations. Output Print\n\n    t\n lines, where in the \n    i\n-th line you should output \"YES\" if it is\npossible to perform \n    k_i\n splitting operations in the \n    i\n-th test in\nsuch a way that the condition of Olya's happiness is satisfied or print \"NO\"\notherwise. If you printed \"YES\", then also print the \n    log_2\n of the length\nof the side of the squares through space, along which you can build a path\nfrom the lower left square to the upper right one. You can output each letter\nin any case (lower or upper). If there are multiple answers, print any.\nExample Input 3 1 1 2 2 2 12 Output YES 0 YES 1 NO Note In each of the\nillustrations, the pictures are shown in order in which Olya applied the\noperations. The recently-created squares are highlighted with red. In the\nfirst test, Olya can apply splitting operations in the following order: Olya\napplies one operation on the only existing square. The condition of Olya's\nhappiness will be met, since there is a path of squares of the same size from\nthe lower left square to the upper right one: The length of the sides of the\nsquares on the path is \n    1\n. \n    log_2(1) = 0\n. In the second test, Olya\ncan apply splitting operations in the following order: Olya applies the first\noperation on the only existing square. She applies the second one on the right\nbottom square. The condition of Olya's happiness will be met, since there is a\npath of squares of the same size from the lower left square to the upper right\none: The length of the sides of the squares on the path is \n    2\n.\n\n    log_2(2) = 1\n. In the third test, it takes \n    5\n operations for Olya to\nmake the square look like this: Since it requires her to perform \n    7\n\nsplitting operations, and it is impossible to perform them on squares with\nside equal to \n    1\n, then Olya cannot do anything more and the answer is\n\"NO\".\n\n",
        "cf_contest_id": 1080,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 1\r\n2 2\r\n2 12\r\n",
                "YES 0\r\nYES 1\r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "19\r\n1 2\r\n2 1\r\n2 2\r\n2 3\r\n2 4\r\n2 5\r\n2 6\r\n1 1000000000000000000\r\n1000000000 1000000000000000000\r\n64 64\r\n64 3\r\n4 4\r\n2 100\r\n3 6\r\n3 7\r\n4 10000\r\n4 100000\r\n4 71\r\n4 70\r\n",
                "NO\r\nYES 1\r\nYES 1\r\nNO\r\nYES 0\r\nYES 0\r\nNO\r\nNO\r\nYES 999999970\r\nYES 60\r\nYES 63\r\nYES 2\r\nNO\r\nYES 1\r\nYES 1\r\nNO\r\nNO\r\nYES 0\r\nYES 0\r\n"
            ],
            [
                "1\r\n30 660981744053648874\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n3 10\r\n",
                "YES 1\r\n"
            ]
        ]
    }
]