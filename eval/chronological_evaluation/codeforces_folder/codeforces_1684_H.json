[
    {
        "name": "Hard Cut",
        "description": "You are given a binary string \n    s\n. You have to cut it into any number of\nnon-intersecting substrings, so that the sum of binary integers denoted by\nthese substrings is a power of 2. Each element of \n    s\n should be in exactly\none substring. Input Each test contains multiple test cases. The first line\ncontains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^5\n).\nDescription of the test cases follows. Each test case contains a binary string\n\n    s\n (\n    1 \n    \u2264 |s| \n    \u2264 10^6\n). It is guaranteed that the sum of\n\n    |s|\n over all test cases does not exceed \n    10^6\n. Output For each test\ncase output the answer to the problem as follows: If the answer does not\nexist, output \n    -1\n. If the answer exists, firstly output an integer\n\n    k\n \u2014 the number of substrings in the answer. After that output \n    k\n\nnon-intersecting substrings, for \n    i\n-th substring output two integers\n\n    l_i, r_i\n (\n    1 \n    \u2264 l_i, r_i \n    \u2264 |s|\n) \u2014 the description of\n\n    i\n-th substring. If there are multiple valid solutions, you can output\nany of them. Example Input 4 00000 01101 0111011001011 000111100111110 Output\n-1 3 1 3 4 4 5 5 8 1 2 3 3 4 4 5 6 7 7 8 10 11 12 13 13 5 1 5 6 7 8 11 12 14\n15 15 Note In the first test case it is impossible to cut the string into\nsubstrings, so that the sum is a power of 2. In the second test case such cut\nis valid: \n    011_2 = 3_10\n, \n    0_2 = 0_10\n, \n    1_2 = 1_10\n. \n    3 +\n    0 + 1 = 4\n, \n    4\n is a power of 2.\n\n",
        "cf_contest_id": 1684,
        "cf_index": "H",
        "cf_rating": 3400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "divide and conquer",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n00000\r\n01101\r\n0111011001011\r\n000111100111110\r\n",
                "-1\r\n4\r\n1 1\r\n2 3\r\n4 4\r\n5 5\r\n\r\n13\r\n1 1\r\n2 2\r\n3 3\r\n4 4\r\n5 5\r\n6 6\r\n7 7\r\n8 8\r\n9 9\r\n10 10\r\n11 11\r\n12 12\r\n13 13\r\n\r\n11\r\n1 1\r\n2 2\r\n3 3\r\n4 6\r\n7 9\r\n10 10\r\n11 11\r\n12 12\r\n13 13\r\n14 14\r\n15 15\r\n\r\n"
            ]
        ],
        "private_cases": []
    }
]