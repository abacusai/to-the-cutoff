[
    {
        "name": "Swaps Again",
        "description": "Ayush, Ashish and Vivek are busy preparing a new problem for the next\nCodeforces round and need help checking if their test cases are valid. Each\ntest case consists of an integer \n    n\n and two arrays \n    a\n and \n    b\n,\nof size \n    n\n. If after some (possibly zero) operations described below,\narray \n    a\n can be transformed into array \n    b\n, the input is said to be\nvalid. Otherwise, it is invalid. An operation on array \n    a\n is: select an\ninteger \n    k\n \n    (1 \n    \u2264 k \n    \u2264\n    \u230a\n    n/2\n    \u230b)\n swap\nthe prefix of length \n    k\n with the suffix of length \n    k\n For example, if\narray \n    a\n initially is \n    1, 2, 3, 4, 5, 6\n, after performing\nan operation with \n    k = 2\n, it is transformed into \n    5, 6, 3, 4, 1,\n    2\n. Given the set of test cases, help them determine if each one is\nvalid or invalid. Input The first line contains one integer \n    t\n \n    (1\n    \n    \u2264 t \n    \u2264 500)\n \u2014 the number of test cases. The description of each test\ncase is as follows. The first line of each test case contains a single integer\n\n    n\n \n    (1 \n    \u2264 n \n    \u2264 500)\n \u2014 the size of the arrays. The second line\nof each test case contains \n    n\n integers \n    a_1\n, \n    a_2\n, ...,\n\n    a_n\n \n    (1 \n    \u2264 a_i \n    \u2264 10^9)\n \u2014 elements of array \n    a\n. The\nthird line of each test case contains \n    n\n integers \n    b_1\n, \n    b_2\n,\n..., \n    b_n\n \n    (1 \n    \u2264 b_i \n    \u2264 10^9)\n \u2014 elements of array \n    b\n.\nOutput For each test case, print \"Yes\" if the given input is valid. Otherwise\nprint \"No\". You may print the answer in any case. Example Input 5 2 1 2 2 1 3\n1 2 3 1 2 3 3 1 2 4 1 3 4 4 1 2 3 2 3 1 2 2 3 1 2 3 1 3 2 Output yes yes No\nyes No Note For the first test case, we can swap prefix \n    a[1:1]\n with\nsuffix \n    a[2:2]\n to get \n    a=[2, 1]\n. For the second test case, \n    a\n\nis already equal to \n    b\n. For the third test case, it is impossible since\nwe cannot obtain \n    3\n in \n    a\n. For the fourth test case, we can first\nswap prefix \n    a[1:1]\n with suffix \n    a[4:4]\n to obtain \n    a=[2, 2, 3,\n    1]\n. Now we can swap prefix \n    a[1:2]\n with suffix \n    a[3:4]\n to obtain\n\n    a=[3, 1, 2, 2]\n. For the fifth test case, it is impossible to convert\n\n    a\n to \n    b\n.\n\n",
        "cf_contest_id": 1365,
        "cf_index": "F",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n2\r\n1 2\r\n2 1\r\n3\r\n1 2 3\r\n1 2 3\r\n3\r\n1 2 4\r\n1 3 4\r\n4\r\n1 2 3 2\r\n3 1 2 2\r\n3\r\n1 2 3\r\n1 3 2\r\n",
                "yes\r\nyes\r\nno\r\nyes\r\nno\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n1\r\n1\r\n",
                "yes\r\n"
            ],
            [
                "2\r\n2\r\n2 1\r\n1 2\r\n2\r\n2 1\r\n2 1\r\n",
                "yes\r\nyes\r\n"
            ],
            [
                "6\r\n3\r\n3 2 1\r\n1 2 3\r\n3\r\n3 2 1\r\n1 3 2\r\n3\r\n3 2 1\r\n2 1 3\r\n3\r\n3 2 1\r\n2 3 1\r\n3\r\n3 2 1\r\n3 1 2\r\n3\r\n3 2 1\r\n3 2 1\r\n",
                "yes\r\nno\r\nno\r\nno\r\nno\r\nyes\r\n"
            ],
            [
                "24\r\n4\r\n1 2 3 4\r\n1 2 3 4\r\n4\r\n1 2 3 4\r\n1 2 4 3\r\n4\r\n1 2 3 4\r\n1 3 2 4\r\n4\r\n1 2 3 4\r\n1 3 4 2\r\n4\r\n1 2 3 4\r\n1 4 2 3\r\n4\r\n1 2 3 4\r\n1 4 3 2\r\n4\r\n1 2 3 4\r\n2 1 3 4\r\n4\r\n1 2 3 4\r\n2 1 4 3\r\n4\r\n1 2 3 4\r\n2 3 1 4\r\n4\r\n1 2 3 4\r\n2 3 4 1\r\n4\r\n1 2 3 4\r\n2 4 1 3\r\n4\r\n1 2 3 4\r\n2 4 3 1\r\n4\r\n1 2 3 4\r\n3 1 2 4\r\n4\r\n1 2 3 4\r\n3 1 4 2\r\n4\r\n1 2 3 4\r\n3 2 1 4\r\n4\r\n1 2 3 4\r\n3 2 4 1\r\n4\r\n1 2 3 4\r\n3 4 1 2\r\n4\r\n1 2 3 4\r\n3 4 2 1\r\n4\r\n1 2 3 4\r\n4 1 2 3\r\n4\r\n1 2 3 4\r\n4 1 3 2\r\n4\r\n1 2 3 4\r\n4 2 1 3\r\n4\r\n1 2 3 4\r\n4 2 3 1\r\n4\r\n1 2 3 4\r\n4 3 1 2\r\n4\r\n1 2 3 4\r\n4 3 2 1\r\n",
                "yes\r\nno\r\nyes\r\nno\r\nno\r\nno\r\nno\r\nyes\r\nno\r\nno\r\nyes\r\nno\r\nno\r\nyes\r\nno\r\nno\r\nyes\r\nno\r\nno\r\nno\r\nno\r\nyes\r\nno\r\nyes\r\n"
            ],
            [
                "1\r\n3\r\n4 5 4\r\n5 4 5\r\n",
                "no\r\n"
            ],
            [
                "1\r\n3\r\n3 7 3\r\n7 3 7\r\n",
                "no\r\n"
            ],
            [
                "1\r\n3\r\n8 9 8\r\n9 8 9\r\n",
                "no\r\n"
            ],
            [
                "1\r\n3\r\n1 2 1\r\n2 1 2\r\n",
                "no\r\n"
            ],
            [
                "1\r\n3\r\n114514 1919810 114514\r\n1919810 114514 1919810\r\n",
                "no\r\n"
            ]
        ]
    }
]