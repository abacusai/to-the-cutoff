[
    {
        "name": "Subsequence Counting",
        "description": "Pikachu had an array with him. He wrote down all the non-empty subsequences of\nthe array on paper. Note that an array of size n has 2^n - 1 non-empty\nsubsequences in it. Pikachu being mischievous as he always is, removed all the\nsubsequences in which Maximum_element_of_the_subsequence -\nMinimum_element_of_subsequence \u2265 d Pikachu was finally left with X\nsubsequences. However, he lost the initial array he had, and now is in serious\ntrouble. He still remembers the numbers X and d. He now wants you to construct\nany such array which will satisfy the above conditions. All the numbers in the\nfinal array should be positive integers less than 10^18. Note the number of\nelements in the output array should not be more than 10^4. If no answer is\npossible, print - 1. Input The only line of input consists of two space\nseparated integers X and d (1 \u2264 X, d \u2264 10^9). Output Output should consist of\ntwo lines. First line should contain a single integer n (1 \u2264 n \u2264 10 000)\u2014 the\nnumber of integers in the final array. Second line should consist of n space\nseparated integers \u2014 a1, a2, ... , an (1 \u2264 ai < 10^18). If there is no answer,\nprint a single integer -1. If there are multiple answers, print any of them.\nExamples Input 10 5 Output 6 5 50 7 15 6 100 Input 4 2 Output 4 10 100 1000\n10000 Note In the output of the first example case, the remaining subsequences\nafter removing those with Maximum_element_of_the_subsequence -\nMinimum_element_of_subsequence \u2265 5 are [5], [5, 7], [5, 6], [5, 7, 6], [50],\n[7], [7, 6], [15], [6], [100]. There are 10 of them. Hence, the array [5, 50,\n7, 15, 6, 100] is valid. Similarly, in the output of the second example case,\nthe remaining sub-sequences after removing those with\nMaximum_element_of_the_subsequence - Minimum_element_of_subsequence \u2265 2 are\n[10], [100], [1000], [10000]. There are 4 of them. Hence, the array [10, 100,\n1000, 10000] is valid.\n\n",
        "cf_contest_id": 960,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "constructive algorithms",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10 5\r\n",
                "5 \r\n5 5 5 20 20 \r\n"
            ],
            [
                "4 2\r\n",
                "3 \r\n2 2 6 \r\n"
            ]
        ],
        "private_cases": [
            [
                "4 1\r\n",
                "3 \r\n1 1 3 \r\n"
            ],
            [
                "1 1\r\n",
                "1 \r\n1 \r\n"
            ],
            [
                "63 1\r\n",
                "6 \r\n1 1 1 1 1 1 \r\n"
            ],
            [
                "98 88\r\n",
                "14 \r\n88 88 88 88 88 88 616 616 616 616 616 1056 1056 1232 \r\n"
            ],
            [
                "746 173\r\n",
                "33 \r\n173 173 173 173 173 173 173 173 173 1730 1730 1730 1730 1730 1730 1730 2941 2941 2941 2941 2941 2941 3979 3979 3979 3979 3979 4844 4844 4844 5363 5363 5363 \r\n"
            ],
            [
                "890 553\r\n",
                "36 \r\n553 553 553 553 553 553 553 553 553 5530 5530 5530 5530 5530 5530 5530 5530 9954 9954 9954 9954 9954 9954 13272 13272 13272 13272 13272 16037 16037 16037 16037 18249 18249 18249 18249 \r\n"
            ],
            [
                "883 1000\r\n",
                "36 \r\n1000 1000 1000 1000 1000 1000 1000 1000 1000 10000 10000 10000 10000 10000 10000 10000 10000 18000 18000 18000 18000 18000 18000 24000 24000 24000 24000 24000 29000 29000 29000 29000 33000 33000 33000 36000 \r\n"
            ],
            [
                "1 1000\r\n",
                "1 \r\n1000 \r\n"
            ],
            [
                "695 188\r\n",
                "31 \r\n188 188 188 188 188 188 188 188 188 1880 1880 1880 1880 1880 1880 1880 3196 3196 3196 3196 3196 4136 4136 4136 4136 4888 4888 4888 5452 5452 5828 \r\n"
            ],
            [
                "2060 697\r\n",
                "18 \r\n697 697 697 697 697 697 697 697 697 697 697 8364 8364 8364 10455 10455 11849 11849 \r\n"
            ],
            [
                "70 3321\r\n",
                "9 \r\n3321 3321 3321 3321 3321 3321 23247 23247 23247 \r\n"
            ],
            [
                "6358 1646\r\n",
                "46 \r\n1646 1646 1646 1646 1646 1646 1646 1646 1646 1646 1646 1646 21398 21398 21398 21398 21398 21398 21398 21398 21398 21398 21398 39504 39504 39504 39504 39504 39504 39504 51026 51026 51026 51026 51026 51026 60902 60902 60902 60902 67486 67486 67486 72424 72424 75716 \r\n"
            ],
            [
                "15000 1\r\n",
                "62 \r\n1 1 1 1 1 1 1 1 1 1 1 1 1 14 14 14 14 14 14 14 14 14 14 14 14 26 26 26 26 26 26 26 26 26 26 26 37 37 37 37 37 37 37 37 37 46 46 46 46 46 46 46 53 53 53 53 57 57 57 60 60 60 \r\n"
            ],
            [
                "1048576 1\r\n",
                "21 \r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 21 \r\n"
            ],
            [
                "1000000 1\r\n",
                "102 \r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 38 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 71 71 71 71 71 71 71 71 71 71 71 71 71 71 85 85 85 85 85 85 85 85 85 94 94 94 94 94 94 100 100 100 \r\n"
            ],
            [
                "536870911 1\r\n",
                "29 \r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \r\n"
            ],
            [
                "10009 1\r\n",
                "50 \r\n1 1 1 1 1 1 1 1 1 1 1 1 1 14 14 14 14 14 14 14 14 14 14 24 24 24 24 24 24 24 24 24 33 33 33 33 33 33 33 33 41 41 41 41 45 45 45 48 48 48 \r\n"
            ],
            [
                "10001 1\r\n",
                "48 \r\n1 1 1 1 1 1 1 1 1 1 1 1 1 14 14 14 14 14 14 14 14 14 14 24 24 24 24 24 24 24 24 24 33 33 33 33 33 33 33 33 41 41 41 41 45 45 47 47 \r\n"
            ]
        ]
    }
]