[
    {
        "name": "Vabank",
        "description": "Gustaw is the chief bank manager in a huge bank. He has unlimited access to\nthe database system of the bank, in a few clicks he can move any amount of\nmoney from the bank's reserves to his own private account. However, the bank\nuses some fancy AI fraud detection system that makes stealing more difficult.\nGustaw knows that the anti-fraud system just detects any operation that\nexceeds some fixed limit \n    M\n euros and these operations are checked\nmanually by a number of clerks. Thus, any fraud operation exceeding this limit\nis detected, while any smaller operation gets unnoticed. Gustaw doesn't know\nthe limit \n    M\n and wants to find it out. In one operation, he can choose\nsome integer \n    X\n and try to move \n    X\n euros from the bank's reserves to\nhis own account. Then, the following happens. If \n    X \n    \u2264 M\n, the\noperation is unnoticed and Gustaw's account balance raises by \n    X\n euros.\nOtherwise, if \n    X > M\n, the fraud is detected and cancelled. Moreover,\nGustaw has to pay \n    X\n euros from his own account as a fine. If he has less\nthan \n    X\n euros on the account, he is fired and taken to the police.\nInitially Gustaw has \n    1\n euro on his account. Help him find the exact\nvalue of \n    M\n in no more than \n    105\n operations without getting him\nfired. Input Each test contains multiple test cases. The first line contains\nthe number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n). For each test\ncase, there is no input prior to your first query, but you can be sure that\n\n    M\n is integer, and \n    0 \n    \u2264 M \n    \u2264 10^14\n. Output For each test\ncase, when you know the exact value of \n    M\n, print a single line with\nformat \"! \n    M\n\". After that your program should proceed to the next test\ncase or terminate, if it is the last one. Interaction When you want to make an\noperation, print a single line with format \"? \n    X\n\", denoting that you try\nto move \n    X\n euros (\n    1 \n    \u2264 X \n    \u2264 10^14\n). As a response, read a\nsingle line that can take the following values: \"Lucky!\", if \n    X \n    \u2264 M\n.\nYour balance raises by \n    X\n. \"Fraudster!\", if \n    X > M\n. Your balance\ndecreases by \n    X\n. \"Fired!\", if \n    X > M\n, but you can't pay \n    X\n\neuros of fine. In this case your program must terminate immediately. You also\nget this response if you exceed the number of queries. You can make at most\n\n    105\n such queries in each test case. After printing a query do not forget\nto output end of line and flush the output. Otherwise, you will get Idleness\nlimit exceeded. To do this, use: fflush(stdout) or cout.flush() in C++;\nSystem.out.flush() in Java; flush(output) in Pascal; stdout.flush() in Python;\nsee documentation for other languages. Hacks To make a hack, prepare an input\nin the following format. The first line contains a single integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of test cases. Each test case is\ndescribed with a line containing a single integer \n    M\n (\n    0 \n    \u2264 M \n    \u2264\n    10^14\n). Example Input 1 Lucky! Lucky! Lucky! Lucky! Lucky! Fraudster!\nOutput ? 1 ? 2 ? 3 ? 4 ? 5 ? 6 ! 5 Note In the example \n    M = 5\n, so the\noperation with \n    X = 6\n is detected. At this moment, Gustaw's balance is\n\n    16\n euros, so he just pays fine.\n\n",
        "cf_contest_id": 1482,
        "cf_index": "G",
        "cf_rating": 3200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "interactive"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [],
        "private_cases": []
    }
]