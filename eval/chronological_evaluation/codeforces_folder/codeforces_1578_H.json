[
    {
        "name": "Higher Order Functions",
        "description": "Helen studies functional programming and she is fascinated with a concept of\nhigher order functions \u2014 functions that are taking other functions as\nparameters. She decides to generalize the concept of the function order and to\ntest it on some examples. For her study, she defines a simple grammar of\ntypes. In her grammar, a type non-terminal \n    T\n is defined as one of the\nfollowing grammar productions, together with \n    order(T)\n,\ndefining an order of the corresponding type: \"()\" is a unit type,\n\n    order(\n    \"\n    \n    \") = 0\n. \"(\" \n    T\n\n\")\" is a parenthesized type,\n\n    order(\n    \"\n    \n    \"\n     T\n     \n    \"\n    \n    \")\n    = \n    order(T)\n. \n    T_1\n \"->\" \n    T_2\n is a functional type,\n\n    order(T_1\n     \n    \"\n    \n    \"\n     T_2) =\n    max(\n    order(T_1) + 1, \n    order(T_2))\n. The function\nconstructor \n    T_1\n \"->\" \n    T_2\n is right-to-left associative, so the type\n\"()->()->()\" is the same as the type \"()->(()->())\" of a function returning a\nfunction, and it has an order of \n    1\n. While \"(()->())->()\" is a function\nthat has an order-1 type \"(()->())\" as a parameter, and it has an order of\n\n    2\n. Helen asks for your help in writing a program that computes an order\nof the given type. Input The single line of the input contains a string\nconsisting of characters '(', ')', '-', and '>' that describes a type that is\nvalid according to the grammar from the problem statement. The length of the\nline is at most \n    10^4\n characters. Output Print a single integer \u2014 the\norder of the given type. Examples Input () Output 0 Input ()->() Output 1\nInput ()->()->() Output 1 Input (()->())->() Output 2 Input\n()->(((()->())->()->())->()) Output 3\n\n",
        "cf_contest_id": 1578,
        "cf_index": "H",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [],
        "private_cases": []
    }
]