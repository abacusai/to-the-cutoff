[
    {
        "name": "Optimal Sum",
        "description": "And here goes another problem on arrays. You are given positive integer len\nand array a which consists of n integers a1, a2, ..., an. Let's introduce two\ncharacteristics for the given array. Let's consider an arbitrary interval of\nthe array with length len, starting in position i. Value , is the modular sum\non the chosen interval. In other words, the modular sum is the sum of integers\non the chosen interval with length len, taken in its absolute value. Value is\nthe optimal sum of the array. In other words, the optimal sum of an array is\nthe maximum of all modular sums on various intervals of array with length len.\nYour task is to calculate the optimal sum of the given array a. However,\nbefore you do the calculations, you are allowed to produce no more than k\nconsecutive operations of the following form with this array: one operation\nmeans taking an arbitrary number from array ai and multiply it by -1. In other\nwords, no more than k times you are allowed to take an arbitrary number ai\nfrom the array and replace it with - ai. Each number of the array is allowed\nto choose an arbitrary number of times. Your task is to calculate the maximum\npossible optimal sum of the array after at most k operations described above\nare completed. Input The first line contains two integers n, len (1 \u2264 len \u2264 n\n\u2264 10^5) \u2014 the number of elements in the array and the length of the chosen\nsubinterval of the array, correspondingly. The second line contains a sequence\nconsisting of n integers a1, a2, ..., an (|ai| \u2264 10^9) \u2014 the original array.\nThe third line contains a single integer k (0 \u2264 k \u2264 n) \u2014 the maximum allowed\nnumber of operations. All numbers in lines are separated by a single space.\nOutput In a single line print the maximum possible optimal sum after no more\nthan k acceptable operations are fulfilled. Please do not use the \nspecifier to read or write 64-bit integers in \u0421++. It is preferred to use cin,\ncout streams or the \n10 Input 5 2 1 -3 -10 4 1 3 Output 14 Input 3 3 -2 -5 4 1 Output 11\n\n",
        "cf_contest_id": 182,
        "cf_index": "C",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 3\r\n0 -2 3 -5 1\r\n2\r\n",
                "10\r\n"
            ],
            [
                "5 2\r\n1 -3 -10 4 1\r\n3\r\n",
                "14\r\n"
            ],
            [
                "3 3\r\n-2 -5 4\r\n1\r\n",
                "11\r\n"
            ]
        ],
        "private_cases": [
            [
                "4 3\r\n3 -5 2 -1\r\n1\r\n",
                "10\r\n"
            ],
            [
                "9 4\r\n1 -3 4 -5 -6 -7 -8 1 2\r\n0\r\n",
                "26\r\n"
            ],
            [
                "1 1\r\n-3\r\n1\r\n",
                "3\r\n"
            ],
            [
                "3 3\r\n-1 2 -3\r\n3\r\n",
                "6\r\n"
            ],
            [
                "4 3\r\n-2 1 5 3\r\n1\r\n",
                "9\r\n"
            ],
            [
                "5 1\r\n3 2 -3 -7 4\r\n4\r\n",
                "7\r\n"
            ],
            [
                "7 5\r\n1 -3 4 -5 5 4 1\r\n2\r\n",
                "21\r\n"
            ],
            [
                "6 6\r\n9 -3 4 8 0 1\r\n0\r\n",
                "19\r\n"
            ],
            [
                "10 6\r\n0 -1 9 5 -7 -5 4 10 3 4\r\n3\r\n",
                "40\r\n"
            ],
            [
                "4 3\r\n0 0 0 0\r\n4\r\n",
                "0\r\n"
            ],
            [
                "6 4\r\n0 -1 0 0 2 0\r\n1\r\n",
                "3\r\n"
            ],
            [
                "10 4\r\n-5 -10 1 2 0 4 -2 8 -3 7\r\n2\r\n",
                "20\r\n"
            ],
            [
                "11 7\r\n-3 19 -8 -5 17 -17 4 -18 0 16 9\r\n3\r\n",
                "88\r\n"
            ],
            [
                "12 9\r\n4 4 -3 -3 -3 3 3 3 -2 -1 4 -4\r\n2\r\n",
                "18\r\n"
            ],
            [
                "15 13\r\n8 -8 8 3 0 -5 -5 4 4 -7 0 8 8 3 -4\r\n4\r\n",
                "68\r\n"
            ],
            [
                "20 5\r\n-3 18 1 8 4 10 3 -1 -20 15 -18 -3 12 -19 9 20 -14 11 -19 5\r\n19\r\n",
                "74\r\n"
            ],
            [
                "20 3\r\n-16 -15 5 -18 -25 34 1 5 34 19 -11 0 4 26 -18 12 -34 44 -5 31\r\n15\r\n",
                "90\r\n"
            ],
            [
                "6 4\r\n3 1 -5 -8 1 10\r\n1\r\n",
                "22\r\n"
            ],
            [
                "7 7\r\n-8 2 7 4 -8 1 -4\r\n1\r\n",
                "20\r\n"
            ],
            [
                "9 7\r\n-1 -1 -1 1 -1 -1 1 -1 1\r\n1\r\n",
                "5\r\n"
            ],
            [
                "7 6\r\n-2 1 1 1 -1 -2 1\r\n2\r\n",
                "7\r\n"
            ],
            [
                "8 8\r\n-1 1 1 1 1 1 -1 -1\r\n1\r\n",
                "4\r\n"
            ],
            [
                "7 7\r\n1000000000 0 -1000000000 1000000000 1000000000 -1000000000 -1000000000\r\n1\r\n",
                "2000000000\r\n"
            ],
            [
                "10 9\r\n1000000000 1000000000 0 999999999 999999999 -999999998 -1000000000 -1000000000 -999999999 -1000000000\r\n1\r\n",
                "3999999999\r\n"
            ]
        ]
    }
]