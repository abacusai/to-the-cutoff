[
    {
        "name": "Number Game",
        "description": "Alice and Bob are playing a game. They have an array of positive integers\n\n    a\n of size \n    n\n. Before starting the game, Alice chooses an integer\n\n    k \n    \u2265 0\n. The game lasts for \n    k\n stages, the stages are numbered\nfrom \n    1\n to \n    k\n. During the \n    i\n-th stage, Alice must remove an\nelement from the array that is less than or equal to \n    k - i + 1\n. After\nthat, if the array is not empty, Bob must add \n    k - i + 1\n to an arbitrary\nelement of the array. Note that both Alice's move and Bob's move are two parts\nof the same stage of the game. If Alice can't delete an element during some\nstage, she loses. If the \n    k\n-th stage ends and Alice hasn't lost yet, she\nwins. Your task is to determine the maximum value of \n    k\n such that Alice\ncan win if both players play optimally. Bob plays against Alice, so he tries\nto make her lose the game, if it's possible. Input The first line contains a\nsingle integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test cases.\nThe first line of each test case contains a single integer \n    n\n (\n    1 \n    \u2264\n    n \n    \u2264 100\n) \u2014 the size of the array \n    a\n. The second line contains\n\n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n).\nOutput For each test case, print one integer \u2014 the maximum value of \n    k\n\nsuch that Alice can win if both players play optimally. Example Input 4 3 1 1\n2 4 4 4 4 4 1 1 5 1 3 2 1 1 Output 2 0 1 3\n\n",
        "cf_contest_id": 1749,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "games",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3\r\n1 1 2\r\n4\r\n4 4 4 4\r\n1\r\n1\r\n5\r\n1 3 2 1 1\r\n",
                "2\r\n0\r\n1\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "13\r\n2\r\n1 1\r\n2\r\n1 1\r\n2\r\n1 1\r\n2\r\n1 1\r\n2\r\n1 1\r\n2\r\n1 1\r\n2\r\n1 1\r\n2\r\n1 1\r\n2\r\n1 1\r\n2\r\n1 1\r\n2\r\n1 1\r\n2\r\n1 1\r\n2\r\n1 1\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "7\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "13\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n"
            ]
        ]
    }
]