[
    {
        "name": "Ring Road 2",
        "description": "It is well known that Berland has n cities, which form the Silver ring \u2014\ncities i and i + 1 (1 \u2264 i < n) are connected by a road, as well as the cities\nn and 1. The goverment have decided to build m new roads. The list of the\nroads to build was prepared. Each road will connect two cities. Each road\nshould be a curve which lies inside or outside the ring. New roads will have\nno common points with the ring (except the endpoints of the road). Now the\ndesigners of the constructing plan wonder if it is possible to build the roads\nin such a way that no two roads intersect (note that the roads may intersect\nat their endpoints). If it is possible to do, which roads should be inside the\nring, and which should be outside? Input The first line contains two integers\nn and m (4 \u2264 n \u2264 100, 1 \u2264 m \u2264 100). Each of the following m lines contains two\nintegers ai and bi (1 \u2264 ai, bi \u2264 n, ai \u2260 bi). No two cities will be connected\nby more than one road in the list. The list will not contain the roads which\nexist in the Silver ring. Output If it is impossible to build the roads in\nsuch a way that no two roads intersect, output Impossible. Otherwise print m\ncharacters. i-th character should be i, if the road should be inside the ring,\nand o if the road should be outside the ring. If there are several solutions,\noutput any of them. Examples Input 4 2 1 3 2 4 Output io Input 6 3 1 3 3 5 5 1\nOutput ooo\n\n",
        "cf_contest_id": 27,
        "cf_index": "D",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "2-sat",
            "dfs and similar",
            "dsu",
            "graphs"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 1\r\n4 2\r\n",
                "i\r\n"
            ],
            [
                "4 2\r\n1 3\r\n2 4\r\n",
                "io\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 1\r\n3 5\r\n",
                "i\r\n"
            ],
            [
                "5 2\r\n2 4\r\n4 1\r\n",
                "ii\r\n"
            ],
            [
                "5 3\r\n4 2\r\n1 3\r\n5 2\r\n",
                "ioi\r\n"
            ],
            [
                "5 4\r\n1 3\r\n3 5\r\n1 4\r\n2 4\r\n",
                "iioo\r\n"
            ],
            [
                "6 1\r\n6 2\r\n",
                "i\r\n"
            ],
            [
                "6 2\r\n3 5\r\n2 4\r\n",
                "io\r\n"
            ],
            [
                "6 3\r\n5 1\r\n4 6\r\n3 1\r\n",
                "ioi\r\n"
            ],
            [
                "6 4\r\n6 3\r\n1 3\r\n6 4\r\n5 3\r\n",
                "iiio\r\n"
            ],
            [
                "6 5\r\n5 3\r\n4 1\r\n2 6\r\n5 1\r\n5 2\r\n",
                "ioioi\r\n"
            ],
            [
                "6 6\r\n1 4\r\n4 6\r\n2 6\r\n2 4\r\n5 3\r\n6 3\r\n",
                "iioioo\r\n"
            ],
            [
                "7 1\r\n4 7\r\n",
                "i\r\n"
            ],
            [
                "7 3\r\n2 7\r\n1 5\r\n5 7\r\n",
                "ioi\r\n"
            ],
            [
                "7 5\r\n3 7\r\n5 7\r\n6 4\r\n4 1\r\n3 1\r\n",
                "iiooi\r\n"
            ],
            [
                "7 8\r\n4 7\r\n3 5\r\n7 2\r\n2 4\r\n4 6\r\n1 5\r\n1 3\r\n7 5\r\n",
                "ioiiiooo\r\n"
            ],
            [
                "5 4\r\n2 4\r\n2 5\r\n3 1\r\n5 3\r\n",
                "iioo\r\n"
            ],
            [
                "10 4\r\n6 9\r\n10 2\r\n4 8\r\n2 9\r\n",
                "iioi\r\n"
            ],
            [
                "17 10\r\n4 11\r\n7 16\r\n8 5\r\n12 15\r\n7 4\r\n1 12\r\n11 1\r\n15 1\r\n7 14\r\n2 9\r\n",
                "Impossible\r\n"
            ],
            [
                "100 50\r\n79 24\r\n65 69\r\n44 6\r\n49 53\r\n26 22\r\n24 76\r\n10 2\r\n19 44\r\n44 10\r\n87 82\r\n91 87\r\n23 92\r\n69 66\r\n95 30\r\n90 24\r\n95 20\r\n76 36\r\n82 24\r\n63 80\r\n70 72\r\n34 76\r\n42 40\r\n17 100\r\n66 64\r\n85 96\r\n34 30\r\n36 69\r\n45 56\r\n36 62\r\n26 38\r\n31 28\r\n79 64\r\n78 69\r\n41 62\r\n36 40\r\n64 67\r\n21 13\r\n90 88\r\n28 30\r\n59 6\r\n59 56\r\n63 1\r\n24 91\r\n12 19\r\n100 80\r\n98 95\r\n75 78\r\n54 44\r\n81 97\r\n20 38\r\n",
                "Impossible\r\n"
            ],
            [
                "20 14\r\n18 3\r\n15 12\r\n8 15\r\n17 7\r\n16 14\r\n15 7\r\n18 5\r\n6 17\r\n4 18\r\n4 2\r\n20 2\r\n9 19\r\n20 7\r\n16 18\r\n",
                "iiiioiiiioiooo\r\n"
            ],
            [
                "10 7\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n1 9\r\n",
                "iiiiiii\r\n"
            ],
            [
                "6 3\r\n1 4\r\n2 5\r\n3 6\r\n",
                "Impossible\r\n"
            ],
            [
                "7 9\r\n4 7\r\n3 5\r\n7 2\r\n2 4\r\n4 6\r\n1 5\r\n1 3\r\n7 5\r\n2 5\r\n",
                "Impossible\r\n"
            ]
        ]
    }
]