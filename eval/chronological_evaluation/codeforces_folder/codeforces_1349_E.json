[
    {
        "name": "Slime and Hats",
        "description": "Slime and Orac are holding a turn-based game. In a big room, there are \n    n\n\nplayers sitting on the chairs, looking forward to a column and each of them is\ngiven a number: player \n    1\n sits in the front of the column, player \n    2\n\nsits directly behind him; player \n    3\n sits directly behind player \n    2\n,\nand so on; player \n    n\n sits directly behind player \n    n-1\n. Each player\nwears a hat that is either black or white. As each player faces forward,\nplayer \n    i\n knows the color of player \n    j\n's hat if and only if \n    i\n\nis larger than \n    j\n. At the start of each turn, Orac will tell whether\nthere exists a player wearing a black hat in the room. After Orac speaks, if\nthe player can uniquely identify the color of his hat, he will put his hat on\nthe chair, stand up and leave the room. All players are smart, so if it is\npossible to understand the color of their hat using the obtained information\nduring this and previous rounds, they will understand it. In each turn, all\nplayers who know the color of their hats will leave at the same time in this\nturn, which means a player can only leave in the next turn if he gets to know\nthe color of his hat only after someone left the room at this turn. Note that\nwhen the player needs to leave, he will put the hat on the chair before\nleaving, so the players ahead of him still cannot see his hat. The \n    i\n-th\nplayer will know who exactly left the room among players\n\n    1,2,\n    \u2026,i-1\n, and how many players among \n    i+1,i+2,\n    \u2026,n\n\nhave left the room. Slime stands outdoor. He watches the players walking out\nand records the numbers of the players and the time they get out.\nUnfortunately, Slime is so careless that he has only recorded some of the\ndata, and this given data is in the format \"player \n    x\n leaves in the\n\n    y\n-th round\". Slime asked you to tell him the color of each player's hat.\nIf there are multiple solutions, you can find any of them. Input The first\nline contains a integer \n    n\n     (1\n    \u2264 n\n    \u2264 200\n     000)\n. The second line\ncontains \n    n\n integers \n    t_1,t_2,\n    \u2026,t_n\n     (0\n    \u2264 t_i\n    \u2264\n    10^15)\n. If \n    t_i=0\n, then there are no data about player \n    i\n;\notherwise it means player \n    i\n leaves in the \n    t_i\n-th round. At least\none solution exists for the given input. Output Print one binary string of\n\n    n\n characters. The \n    i\n-th character of the string should be '1' if\nplayer \n    i\n wears a black hat and should be '0', otherwise. If there are\nmultiple solutions, you can print any of them. Examples Input 5 0 1 1 0 0\nOutput 00000 Input 5 0 2 2 0 0 Output 00001 Input 5 0 0 0 0 0 Output 00000\nInput 5 4 4 0 4 4 Output 00100 Note In the first example, for the given\nsolution, all the players wear white hats. In the first turn, Orac tells all\nthe players that there are no players wearing a black hat, so each player\nknows that he is wearing a white hat, and he will leave in the first turn. In\nthe second example, for the given solution, the player \n    5\n wears a black\nhat, other players wear white hats. Orac tells all the players that there\nexists a player wearing a black hat, and player \n    5\n know that the other\nplayers are all wearing white hats, so he can infer that he is wearing a black\nhat; therefore he leaves in the first turn, other players leave in the second\nturn. Note that other players can infer that they are wearing white hats\nimmediately after player \n    5\n leaves, but they have to wait for the next\nturn to leave according to the rule. In the third example, there is no\ninformation about the game, so any output is correct.\n\n",
        "cf_contest_id": 1349,
        "cf_index": "E",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dp",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n0 1 1 0 0\r\n",
                "00000"
            ],
            [
                "5\r\n0 2 2 0 0\r\n",
                "00001"
            ],
            [
                "5\r\n0 0 0 0 0\r\n",
                "00000"
            ],
            [
                "5\r\n4 4 0 4 4\r\n",
                "00100"
            ]
        ],
        "private_cases": [
            [
                "4\r\n4 0 9 0\r\n",
                "1110"
            ],
            [
                "10\r\n0 0 0 0 0 0 0 0 0 0\r\n",
                "0000000000"
            ],
            [
                "10\r\n0 0 0 24 30 0 0 0 0 0\r\n",
                "0111100000"
            ],
            [
                "10\r\n0 0 8 0 0 12 0 0 16 15\r\n",
                "0001001101"
            ],
            [
                "10\r\n10 9 0 0 30 0 39 42 44 45\r\n",
                "0111111111"
            ],
            [
                "10\r\n8 8 8 7 13 18 22 21 22 22\r\n",
                "0001110100"
            ],
            [
                "1\r\n0\r\n",
                "0"
            ]
        ]
    }
]