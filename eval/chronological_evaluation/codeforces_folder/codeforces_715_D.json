[
    {
        "name": "Create a Maze",
        "description": "ZS the Coder loves mazes. Your job is to create one so that he can play with\nit. A maze consists of n \u00d7 m rooms, and the rooms are arranged in n rows\n(numbered from the top to the bottom starting from 1) and m columns (numbered\nfrom the left to the right starting from 1). The room in the i-th row and j-th\ncolumn is denoted by (i, j). A player starts in the room (1, 1) and wants to\nreach the room (n, m). Each room has four doors (except for ones at the maze\nborder), one on each of its walls, and two adjacent by the wall rooms shares\nthe same door. Some of the doors are locked, which means it is impossible to\npass through the door. For example, if the door connecting (i, j) and (i, j +\n1) is locked, then we can't go from (i, j) to (i, j + 1). Also, one can only\ntravel between the rooms downwards (from the room (i, j) to the room (i + 1,\nj)) or rightwards (from the room (i, j) to the room (i, j + 1)) provided the\ncorresponding door is not locked. This image represents a maze with some doors\nlocked. The colored arrows denotes all the possible paths while a red cross\ndenotes a locked door. ZS the Coder considers a maze to have difficulty x if\nthere is exactly x ways of travelling from the room (1, 1) to the room (n, m).\nTwo ways are considered different if they differ by the sequence of rooms\nvisited while travelling. Your task is to create a maze such that its\ndifficulty is exactly equal to T. In addition, ZS the Coder doesn't like large\nmazes, so the size of the maze and the number of locked doors are limited.\nSounds simple enough, right? Input The first and only line of the input\ncontains a single integer T (1 \u2264 T \u2264 10^18), the difficulty of the required\nmaze. Output The first line should contain two integers n and m (1 \u2264 n, m \u2264\n50) \u2014 the number of rows and columns of the maze respectively. The next line\nshould contain a single integer k (0 \u2264 k \u2264 300) \u2014 the number of locked doors\nin the maze. Then, k lines describing locked doors should follow. Each of them\nshould contain four integers, x1, y1, x2, y2. This means that the door\nconnecting room (x1, y1) and room (x2, y2) is locked. Note that room (x2, y2)\nshould be adjacent either to the right or to the bottom of (x1, y1), i.e. x2 +\ny2 should be equal to x1 + y1 + 1. There should not be a locked door that\nappears twice in the list. It is guaranteed that at least one solution exists.\nIf there are multiple solutions, print any of them. Examples Input 3 Output 3\n2 0 Input 4 Output 4 3 3 1 2 2 2 3 2 3 3 1 3 2 3 Note Here are how the sample\ninput and output looks like. The colored arrows denotes all the possible paths\nwhile a red cross denotes a locked door. In the first sample case: In the\nsecond sample case:\n\n",
        "cf_contest_id": 715,
        "cf_index": "D",
        "cf_rating": 3100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n",
                "5 5\r\n9\r\n1 3 1 4\r\n1 4 2 4\r\n2 4 2 5\r\n3 1 4 1\r\n3 4 3 5\r\n4 1 4 2\r\n4 3 5 3\r\n4 4 4 5\r\n4 4 5 4\r\n"
            ],
            [
                "4\r\n",
                "5 5\r\n8\r\n1 3 1 4\r\n1 4 2 4\r\n2 4 2 5\r\n3 4 3 5\r\n4 1 4 2\r\n4 3 5 3\r\n4 4 4 5\r\n4 4 5 4\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n",
                "4 4\r\n5\r\n1 3 1 4\r\n2 3 2 4\r\n3 2 4 2\r\n3 3 3 4\r\n3 3 4 3\r\n"
            ],
            [
                "2\r\n",
                "4 4\r\n4\r\n2 3 2 4\r\n3 2 4 2\r\n3 3 3 4\r\n3 3 4 3\r\n"
            ]
        ]
    }
]