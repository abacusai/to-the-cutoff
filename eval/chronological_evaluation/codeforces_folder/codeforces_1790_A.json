[
    {
        "name": "Polycarp and the Day of Pi",
        "description": "On March 14, the day of the number \n    \u03c0\n is celebrated all over the\nworld. This is a very important mathematical constant equal to the ratio of\nthe circumference of a circle to its diameter. Polycarp was told at school\nthat the number \n    \u03c0\n is irrational, therefore it has an infinite number\nof digits in decimal notation. He wanted to prepare for the Day of the number\n\n    \u03c0\n by memorizing this number as accurately as possible. Polycarp\nwrote out all the digits that he managed to remember. For example, if Polycarp\nremembered \n    \u03c0\n as \n    3.1415\n, he wrote out 31415. Polycarp was in a\nhurry and could have made a mistake, so you decided to check how many first\ndigits of the number \n    \u03c0\n Polycarp actually remembers correctly. Input\nThe first line of the input data contains the single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 10^3\n) \u2014 the number of test cases in the test. Each test case\nis described by a single string of digits \n    n\n, which was written out by\nPolycarp. The string \n    n\n contains up to \n    30\n digits. Output Output\n\n    t\n integers, each of which is the answer to the corresponding test case,\nthat is how many first digits of the number \n    \u03c0\n Polycarp remembers\ncorrectly. Example Input 9 000 3 4141592653 141592653589793238462643383279\n31420 31415 314159265358 27182 314159265358979323846264338327 Output 0 1 0 0 3\n5 12 0 30\n\n",
        "cf_contest_id": 1790,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "math",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "9\r\n000\r\n3\r\n4141592653\r\n141592653589793238462643383279\r\n31420\r\n31415\r\n314159265358\r\n27182\r\n314159265358979323846264338327\r\n",
                "0\r\n1\r\n0\r\n0\r\n3\r\n5\r\n12\r\n0\r\n30\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n00\r\n",
                "0\r\n"
            ],
            [
                "1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "1\r\n3444\r\n",
                "1\r\n"
            ],
            [
                "1\r\n31\r\n",
                "2\r\n"
            ],
            [
                "1\r\n3\r\n",
                "1\r\n"
            ],
            [
                "3\r\n314\r\n315\r\n314\r\n",
                "3\r\n2\r\n3\r\n"
            ],
            [
                "2\r\n0\r\n0\r\n",
                "0\r\n0\r\n"
            ],
            [
                "1\r\n0\r\n",
                "0\r\n"
            ],
            [
                "3\r\n5\r\n5\r\n84\r\n",
                "0\r\n0\r\n0\r\n"
            ],
            [
                "3\r\n8\r\n5\r\n84\r\n",
                "0\r\n0\r\n0\r\n"
            ],
            [
                "3\r\n8\r\n5\r\n8\r\n",
                "0\r\n0\r\n0\r\n"
            ],
            [
                "3\r\n8\r\n8\r\n8\r\n",
                "0\r\n0\r\n0\r\n"
            ],
            [
                "2\r\n8\r\n88888888\r\n",
                "0\r\n0\r\n"
            ],
            [
                "2\r\n0314\r\n0003000\r\n",
                "0\r\n0\r\n"
            ],
            [
                "2\r\n8\r\n8888\r\n",
                "0\r\n0\r\n"
            ],
            [
                "3\r\n1\r\n1\r\n1\r\n",
                "0\r\n0\r\n0\r\n"
            ],
            [
                "3\r\n8\r\n88\r\n888\r\n",
                "0\r\n0\r\n0\r\n"
            ],
            [
                "1\r\n31415653588880\r\n",
                "5\r\n"
            ],
            [
                "1\r\n3141592653\r\n",
                "10\r\n"
            ]
        ]
    }
]