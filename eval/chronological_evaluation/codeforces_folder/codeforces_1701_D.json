[
    {
        "name": "Permutation Restoration",
        "description": "Monocarp had a permutation \n    a\n of \n    n\n integers \n    1\n, \n    2\n, ...,\n\n    n\n (a permutation is an array where each element from \n    1\n to \n    n\n\noccurs exactly once). Then Monocarp calculated an array of integers \n    b\n of\nsize \n    n\n, where \n    b_i = \n    \n    \u230a\n    i/a_i\n    \n    \u230b\n. For example, if the permutation \n    a\n is \n    [2, 1, 4,\n    3]\n, then the array \n    b\n is equal to \n    [ \n    \n    \u230a\n    1/2\n    \n    \u230b, \n    \n    \u230a\n    2/1\n    \n    \u230b, \n    \n    \u230a\n    3/4\n    \n    \u230b,\n    \n    \n    \u230a\n    4/3\n    \n    \u230b\n    ] = [0, 2, 0, 1]\n.\nUnfortunately, the Monocarp has lost his permutation, so he wants to restore\nit. Your task is to find a permutation \n    a\n that corresponds to the given\narray \n    b\n. If there are multiple possible permutations, then print any of\nthem. The tests are constructed in such a way that least one suitable\npermutation exists. Input The first line contains a single integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 10^5\n) \u2014 number of test cases. The first line of each\ntest case contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 5 \n    \u00b7\n    10^5\n). The second line contains \n    n\n integers \n    b_1, b_2, \n    \u2026,\n    b_n\n (\n    0 \n    \u2264 b_i \n    \u2264 n\n). Additional constrains on the input: the\nsum of \n    n\n over test cases does not exceed \n    5 \n    \u00b7 10^5\n; there\nexists at least one permutation \n    a\n that would yield this array \n    b\n.\nOutput For each test case, print \n    n\n integers \u2014 a permutation \n    a\n that\ncorresponds to the given array \n    b\n. If there are multiple possible\npermutations, then print any of them. Example Input 4 4 0 2 0 1 2 1 1 5 0 0 1\n4 1 3 0 1 3 Output 2 1 4 3 1 2 3 4 2 1 5 3 2 1\n\n",
        "cf_contest_id": 1701,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "greedy",
            "math",
            "sortings",
            "two pointers"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4\r\n0 2 0 1\r\n2\r\n1 1\r\n5\r\n0 0 1 4 1\r\n3\r\n0 1 3\r\n",
                "2 1 4 3\r\n1 2\r\n3 4 2 1 5\r\n3 2 1\r\n"
            ]
        ],
        "private_cases": []
    }
]