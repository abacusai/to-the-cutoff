[
    {
        "name": "Make It Ascending",
        "description": "You are given an array \n    a\n consisting of \n    n\n elements. You may apply\nseveral operations (possibly zero) to it. During each operation, you choose\ntwo indices \n    i\n and \n    j\n (\n    1 \n    \u2264 i, j \n    \u2264 n\n; \n    i \n     j\n),\nincrease \n    a_j\n by \n    a_i\n, and remove the \n    i\n-th element from the\narray (so the indices of all elements to the right to it decrease by \n    1\n,\nand \n    n\n also decreases by \n    1\n). Your goal is to make the array \n    a\n\nstrictly ascending. That is, the condition \n    a_1 < a_2 < \n    \u2026 < a_n\n\nshould hold (where \n    n\n is the resulting size of the array). Calculate the\nminimum number of actions required to make the array strictly ascending. Input\nThe first line contains one integer \n    T\n (\n    1 \n    \u2264 T \n    \u2264 10000\n) \u2014\nthe number of test cases. Each test case consists of two lines. The first line\ncontains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 15\n) \u2014 the number of\nelements in the initial array \n    a\n. The second line contains \n    n\n\nintegers \n    a_1\n, \n    a_2\n, ..., \n    a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^6\n).\nIt is guaranteed that: the number of test cases having \n    n \n    \u2265 5\n is not\ngreater than \n    5000\n; the number of test cases having \n    n \n    \u2265 8\n is\nnot greater than \n    500\n; the number of test cases having \n    n \n    \u2265 10\n\nis not greater than \n    100\n; the number of test cases having \n    n \n    \u2265\n    11\n is not greater than \n    50\n; the number of test cases having \n    n \n    \u2265\n    12\n is not greater than \n    25\n; the number of test cases having \n    n \n    \u2265\n    13\n is not greater than \n    10\n; the number of test cases having \n    n \n    \u2265\n    14\n is not greater than \n    3\n; the number of test cases having \n    n \n    \u2265\n    15\n is not greater than \n    1\n. Output For each test case, print the answer\nas follows: In the first line, print \n    k\n \u2014 the minimum number of\noperations you have to perform. Then print \n    k\n lines, each containing two\nindices \n    i\n and \n    j\n for the corresponding operation. Note that the\nnumeration of elements in the array changes after removing elements from it.\nIf there are multiple optimal sequences of operations, print any one of them.\nExample Input 4 8 2 1 3 5 1 2 4 5 15 16384 8192 4096 2048 1024 512 256 128 64\n32 16 8 4 2 1 2 3 3 14 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Output 3 6 8 1 6 4 1 7\n1 15 1 13 1 11 1 9 1 7 1 5 1 3 1 2 1 0 Note In the first test case, the\nsequence of operations changes \n    a\n as follows: \n    [2, 1, 3, 5, 1, 2, 4, 5]\n    \n    \u2192 [2, 1, 3, 5, 1, 4, 7] \n    \u2192 [1, 3, 5, 1, 6, 7]\n    \n    \u2192 [2, 3, 5, 6, 7]\n.\n\n",
        "cf_contest_id": 1342,
        "cf_index": "F",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "dp"
        ],
        "time_limit_seconds": 7.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4\r\n8\r\n2 1 3 5 1 2 4 5\r\n15\r\n16384 8192 4096 2048 1024 512 256 128 64 32 16 8 4 2 1\r\n2\r\n3 3\r\n14\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14\r\n",
                "3\r\n8 6\r\n2 5\r\n6 4\r\n7\r\n1 15\r\n1 13\r\n1 11\r\n1 9\r\n1 7\r\n1 5\r\n1 3\r\n1\r\n2 1\r\n0\r\n"
            ]
        ],
        "private_cases": []
    }
]