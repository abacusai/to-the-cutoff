[
    {
        "name": "Opposites Attract",
        "description": "Everybody knows that opposites attract. That is the key principle of the\n\"Perfect Matching\" dating agency. The \"Perfect Matching\" matchmakers have\nclassified each registered customer by his interests and assigned to the i-th\nclient number ti ( - 10 \u2264 ti \u2264 10). Of course, one number can be assigned to\nany number of customers. \"Perfect Matching\" wants to advertise its services\nand publish the number of opposite couples, that is, the couples who have\nopposite values of t. Each couple consists of exactly two clients. The\ncustomer can be included in a couple an arbitrary number of times. Help the\nagency and write the program that will find the sought number by the given\nsequence t1, t2, ..., tn. For example, if t = (1, - 1, 1, - 1), then any two\nelements ti and tj form a couple if i and j have different parity.\nConsequently, in this case the sought number equals 4. Of course, a client\ncan't form a couple with him/herself. Input The first line of the input data\ncontains an integer n (1 \u2264 n \u2264 10^5) which represents the number of registered\nclients of the \"Couple Matching\". The second line contains a sequence of\nintegers t1, t2, ..., tn ( - 10 \u2264 ti \u2264 10), ti \u2014 is the parameter of the i-th\ncustomer that has been assigned to the customer by the result of the analysis\nof his interests. Output Print the number of couples of customs with opposite\nt. The opposite number for x is number - x (0 is opposite to itself). Couples\nthat only differ in the clients' order are considered the same. Note that the\nanswer to the problem can be large enough, so you must use the 64-bit integer\ntype for calculations. Please, do not use the \nwrite 64-bit integers in \u0421++. It is preferred to use cin, cout streams or the\n\n3 Note In the first sample the couples of opposite clients are: (1,2), (1,5) \u0438\n(3,4). In the second sample any couple of clients is opposite.\n\n",
        "cf_contest_id": 131,
        "cf_index": "B",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n-3 3 0 0 3\r\n",
                "3\r\n"
            ],
            [
                "3\r\n0 0 0\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n0\r\n",
                "0\r\n"
            ],
            [
                "1\r\n5\r\n",
                "0\r\n"
            ],
            [
                "2\r\n0 0\r\n",
                "1\r\n"
            ],
            [
                "2\r\n-3 3\r\n",
                "1\r\n"
            ],
            [
                "2\r\n1 5\r\n",
                "0\r\n"
            ],
            [
                "4\r\n1 -1 1 -1\r\n",
                "4\r\n"
            ],
            [
                "10\r\n1 -1 2 -2 3 -3 4 -4 0 0\r\n",
                "5\r\n"
            ],
            [
                "5\r\n0 0 0 0 0\r\n",
                "10\r\n"
            ],
            [
                "4\r\n4 4 4 -1\r\n",
                "0\r\n"
            ],
            [
                "2\r\n10 -10\r\n",
                "1\r\n"
            ],
            [
                "2\r\n-10 10\r\n",
                "1\r\n"
            ],
            [
                "3\r\n-1 -1 2\r\n",
                "0\r\n"
            ],
            [
                "2\r\n-1 2\r\n",
                "0\r\n"
            ],
            [
                "7\r\n0 10 -10 10 -10 10 10\r\n",
                "8\r\n"
            ],
            [
                "5\r\n-3 2 1 -1 3\r\n",
                "2\r\n"
            ],
            [
                "4\r\n-10 10 -10 10\r\n",
                "4\r\n"
            ],
            [
                "4\r\n1 -1 2 -2\r\n",
                "2\r\n"
            ]
        ]
    }
]