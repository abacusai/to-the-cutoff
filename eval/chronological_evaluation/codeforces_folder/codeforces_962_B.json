[
    {
        "name": "Students in Railway Carriage",
        "description": "There are \n    n\n consecutive seat places in a railway carriage. Each place is\neither empty or occupied by a passenger. The university team for the Olympiad\nconsists of \n    a\n student-programmers and \n    b\n student-athletes.\nDetermine the largest number of students from all \n    a+b\n students, which\nyou can put in the railway carriage so that: no student-programmer is sitting\nnext to the student-programmer; and no student-athlete is sitting next to the\nstudent-athlete. In the other words, there should not be two consecutive\n(adjacent) places where two student-athletes or two student-programmers are\nsitting. Consider that initially occupied seat places are occupied by jury\nmembers (who obviously are not students at all). Input The first line contain\nthree integers \n    n\n, \n    a\n and \n    b\n (\n    1 \n    \u2264 n \n    \u2264\n    2\n    \u00b710^5\n, \n    0 \n    \u2264 a, b \n    \u2264 2\n    \u00b710^5\n, \n    a + b > 0\n) \u2014\ntotal number of seat places in the railway carriage, the number of student-\nprogrammers and the number of student-athletes. The second line contains a\nstring with length \n    n\n, consisting of characters \".\" and \"*\". The dot\nmeans that the corresponding place is empty. The asterisk means that the\ncorresponding place is occupied by the jury member. Output Print the largest\nnumber of students, which you can put in the railway carriage so that no\nstudent-programmer is sitting next to a student-programmer and no student-\nathlete is sitting next to a student-athlete. Examples Input 5 1 1 *...*\nOutput 2 Input 6 2 3 *...*. Output 4 Input 11 3 10 .*....**.*. Output 7 Input\n3 2 3 *** Output 0 Note In the first example you can put all student, for\nexample, in the following way: *.AB* In the second example you can put four\nstudents, for example, in the following way: *BAB*B In the third example you\ncan put seven students, for example, in the following way: B*ABAB**A*B The\nletter A means a student-programmer, and the letter B \u2014 student-athlete.\n\n",
        "cf_contest_id": 962,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 1 1\r\n*...*\r\n",
                "2\r\n"
            ],
            [
                "6 2 3\r\n*...*.\r\n",
                "4\r\n"
            ],
            [
                "11 3 10\r\n.*....**.*.\r\n",
                "7\r\n"
            ],
            [
                "3 2 3\r\n***\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 0 1\r\n.\r\n",
                "1\r\n"
            ],
            [
                "2 2 0\r\n..\r\n",
                "1\r\n"
            ],
            [
                "2 0 2\r\n..\r\n",
                "1\r\n"
            ],
            [
                "3 0 1\r\n.*.\r\n",
                "1\r\n"
            ],
            [
                "2 1 1\r\n..\r\n",
                "2\r\n"
            ],
            [
                "4 1 1\r\n..*.\r\n",
                "2\r\n"
            ],
            [
                "5 0 1\r\n*.*.*\r\n",
                "1\r\n"
            ],
            [
                "1 1 1\r\n.\r\n",
                "1\r\n"
            ]
        ]
    }
]