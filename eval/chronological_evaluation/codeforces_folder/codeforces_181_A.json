[
    {
        "name": "Series of Crimes",
        "description": "The Berland capital is shaken with three bold crimes committed by the\nPihsters, a notorious criminal gang. The Berland capital's map is represented\nby an n \u00d7 m rectangular table. Each cell of the table on the map represents\nsome districts of the capital. The capital's main detective Polycarpus took a\nmap and marked there the districts where the first three robberies had been\ncommitted as asterisks. Deduction tells Polycarpus that the fourth robbery\nwill be committed in such district, that all four robbed districts will form\nthe vertices of some rectangle, parallel to the sides of the map. Polycarpus\nis good at deduction but he's hopeless at math. So he asked you to find the\ndistrict where the fourth robbery will be committed. Input The first line\ncontains two space-separated integers n and m (2 \u2264 n, m \u2264 100) \u2014 the number of\nrows and columns in the table, correspondingly. Each of the next n lines\ncontains m characters \u2014 the description of the capital's map. Each character\ncan either be a \".\" (dot), or an \"*\" (asterisk). A character equals \"*\" if the\ncorresponding district has been robbed. Otherwise, it equals \".\". It is\nguaranteed that the map has exactly three characters \"*\" and we can always\nfind the fourth district that meets the problem requirements. Output Print two\nintegers \u2014 the number of the row and the number of the column of the city\ndistrict that is the fourth one to be robbed. The rows are numbered starting\nfrom one from top to bottom and the columns are numbered starting from one\nfrom left to right. Examples Input 3 2 .* .. ** Output 1 1 Input 3 3 *.* *..\n... Output 2 3\n\n",
        "cf_contest_id": 181,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "geometry",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2\r\n.*\r\n..\r\n**\r\n",
                "1 1\n"
            ],
            [
                "3 3\r\n*.*\r\n*..\r\n...\r\n",
                "2 3\n"
            ]
        ],
        "private_cases": [
            [
                "7 2\r\n..\r\n**\r\n..\r\n..\r\n..\r\n..\r\n.*\r\n",
                "7 1\n"
            ],
            [
                "7 2\r\n*.\r\n..\r\n..\r\n..\r\n..\r\n..\r\n**\r\n",
                "1 2\n"
            ],
            [
                "2 2\r\n*.\r\n**\r\n",
                "1 2\n"
            ],
            [
                "2 2\r\n**\r\n.*\r\n",
                "2 1\n"
            ],
            [
                "2 3\r\n*.*\r\n..*\r\n",
                "2 1\n"
            ]
        ]
    }
]