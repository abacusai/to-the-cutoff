[
    {
        "name": "Beautiful Road",
        "description": "A long time ago in some country in Asia were civil wars. Each of n cities\nwanted to seize power. That's why sometimes one city gathered an army and sent\nit to campaign against another city. Road making was difficult, so the country\nhad few roads, exactly n - 1. Also you could reach any city from any other\ncity going on those roads. Even during the war the Oriental people remain\nspiritually rich and appreciate the beauty of nature. And to keep the memory\nof this great crusade for the centuries to come, they planted one beautiful\ntree by the road on which the army spent most time. The Oriental people love\nnature, that's why if there were several such roads, then one tree was planted\nby each of them. Recently, when the records of the war were found, it became\nclear that each city attacked each other one exactly once. There were exactly\nn(n - 1) attacks in total. Everyone has been wondering what road after those\nwars became the most beautiful, that is, by which road they planted the\nlargest number of beautiful trees. Input The first line contains an integer n\n(2 \u2264 n \u2264 10^5), which represents the number of cities. Next n - 1 lines\ncontain three integers each: the numbers of cities ai, bi (1 \u2264 ai, bi \u2264 n),\nconnected by the i-th road and the number of days di the army spends to go on\nit (1 \u2264 di \u2264 10^9). The lengths of several roads may coincide. Output Print on\nthe first line two integers \u2014 the number of beautiful trees on the most\nbeautiful road and the number of the most beautiful roads. Print on the second\nline the list of the most beautiful roads in the sorted order by the numbers'\nincreasing. The roads are numbered from 1 to n - 1 in the order in which they\nare given in the input data. Please, do not use \n64-bit integers in C++. It is preferred to use the cout stream (also you may\nuse the \n1 3 5 3 4 2 3 5 3 3 6 4 Output 16 1 2\n\n",
        "cf_contest_id": 87,
        "cf_index": "D",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dp",
            "dsu",
            "graphs",
            "implementation",
            "sortings",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n2 1 5\r\n",
                "2 1\r\n1 "
            ],
            [
                "6\r\n1 2 1\r\n1 3 5\r\n3 4 2\r\n3 5 3\r\n3 6 4\r\n",
                "16 1\r\n2 "
            ]
        ],
        "private_cases": [
            [
                "10\r\n10 6 43981\r\n4 2 6730\r\n1 2 35174\r\n5 3 61951\r\n8 7 43981\r\n7 1 6730\r\n5 8 6730\r\n9 3 52479\r\n6 4 18138\r\n",
                "32 1\r\n4 "
            ],
            [
                "9\r\n6 4 72697\r\n9 6 72697\r\n1 6 38220\r\n2 6 38220\r\n6 7 72697\r\n6 5 72697\r\n8 6 72697\r\n3 6 38220\r\n",
                "16 5\r\n1 2 5 6 7 "
            ],
            [
                "10\r\n9 2 18232\r\n3 4 45701\r\n3 9 13895\r\n8 9 18232\r\n7 6 56122\r\n3 5 45701\r\n7 1 56122\r\n8 10 18232\r\n2 7 91606\r\n",
                "42 1\r\n9 "
            ],
            [
                "7\r\n1 2 7485\r\n6 7 50574\r\n3 1 50574\r\n3 4 50574\r\n5 6 58286\r\n6 1 58286\r\n",
                "24 1\r\n6 "
            ],
            [
                "4\r\n2 3 1914\r\n4 1 31823\r\n4 2 26249\r\n",
                "6 1\r\n2 "
            ],
            [
                "5\r\n3 2 72460\r\n3 4 69285\r\n3 5 69285\r\n1 3 11694\r\n",
                "8 1\r\n1 "
            ],
            [
                "9\r\n5 9 29573\r\n7 3 72031\r\n8 5 72031\r\n6 7 72031\r\n9 7 27434\r\n3 2 27434\r\n4 7 76150\r\n1 9 27434\r\n",
                "24 1\r\n2 "
            ],
            [
                "5\r\n5 4 58958\r\n2 1 37970\r\n2 5 37970\r\n1 3 37970\r\n",
                "8 2\r\n1 2 "
            ],
            [
                "10\r\n6 5 30\r\n2 5 30\r\n7 8 81\r\n5 4 46\r\n9 10 30\r\n5 7 30\r\n10 2 46\r\n8 3 46\r\n1 10 46\r\n",
                "32 1\r\n3 "
            ],
            [
                "10\r\n4 2 73\r\n10 8 73\r\n8 7 83\r\n9 5 83\r\n2 1 86\r\n4 9 88\r\n2 6 30\r\n8 4 30\r\n7 3 32\r\n",
                "32 1\r\n6 "
            ],
            [
                "10\r\n9 4 75\r\n2 7 29\r\n1 8 19\r\n9 5 20\r\n4 1 19\r\n2 4 19\r\n10 3 29\r\n2 3 20\r\n6 4 29\r\n",
                "32 1\r\n1 "
            ],
            [
                "10\r\n10 1 74\r\n8 1 43\r\n6 3 59\r\n2 9 58\r\n6 4 62\r\n6 7 74\r\n2 5 62\r\n1 6 74\r\n5 3 8\r\n",
                "42 1\r\n8 "
            ],
            [
                "17\r\n6 16 69066\r\n2 5 77345\r\n7 17 49859\r\n11 15 77345\r\n14 2 96308\r\n3 5 49859\r\n10 13 16769\r\n4 17 58915\r\n15 1 99387\r\n1 3 77937\r\n6 8 53782\r\n13 14 21754\r\n9 4 49859\r\n12 8 96308\r\n11 9 96308\r\n12 7 96288\r\n",
                "140 1\r\n9 "
            ],
            [
                "9\r\n1 6 802882924\r\n7 5 807576793\r\n9 4 343794537\r\n5 3 807576793\r\n2 7 394413002\r\n9 7 353519612\r\n1 7 784711994\r\n5 8 784711994\r\n",
                "36 1\r\n2 "
            ]
        ]
    }
]