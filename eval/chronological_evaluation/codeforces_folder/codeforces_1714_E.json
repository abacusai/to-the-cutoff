[
    {
        "name": "Add Modulo 10",
        "description": "You are given an array of \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n You\ncan apply the following operation an arbitrary number of times: select an\nindex \n    i\n (\n    1 \n    \u2264 i \n    \u2264 n\n) and replace the value of the element\n\n    a_i\n with the value \n    a_i + (a_i \n     10)\n, where \n    a_i \n    \n    10\n is the remainder of the integer dividing \n    a_i\n by \n    10\n. For a\nsingle index (value \n    i\n), this operation can be applied multiple times. If\nthe operation is applied repeatedly to the same index, then the current value\nof \n    a_i\n is taken into account each time. For example, if \n    a_i=47\n\nthen after the first operation we get \n    a_i=47+7=54\n, and after the second\noperation we get \n    a_i=54+4=58\n. Check if it is possible to make all array\nelements equal by applying multiple (possibly zero) operations. For example,\nyou have an array \n    [6, 11]\n. Let's apply this operation to the first\nelement of the array. Let's replace \n    a_1 = 6\n with \n    a_1 + (a_1 \n    \n    10) = 6 + (6 \n     10) = 6 + 6 = 12\n. We get the array \n    [12, 11]\n.\nThen apply this operation to the second element of the array. Let's replace\n\n    a_2 = 11\n with \n    a_2 + (a_2 \n     10) = 11 + (11 \n     10) = 11 + 1\n    = 12\n. We get the array \n    [12, 12]\n. Thus, by applying \n    2\n\noperations, you can make all elements of an array equal. Input The first line\ncontains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test\ncases. What follows is a description of each test case. The first line of each\ntest case contains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n)\n\u2014 the size of the array. The second line of each test case contains \n    n\n\nintegers \n    a_i\n (\n    0 \n    \u2264 a_i \n    \u2264 10^9\n) \u2014 array elements. It is\nguaranteed that the sum of \n    n\n over all test cases does not exceed \n    2\n    \n    \u00b7 10^5\n. Output For each test case print: YES if it is possible to\nmake all array elements equal; NO otherwise. You can print YES and NO in any\ncase (for example, the strings yEs, yes, Yes and YES will be recognized as a\npositive answer) . Example Input 10 2 6 11 3 2 18 22 5 5 10 5 10 5 4 1 2 4 8 2\n4 5 3 93 96 102 2 40 6 2 50 30 2 22 44 2 1 5 Output Yes No Yes Yes No Yes No\nNo Yes No Note The first test case is clarified above. In the second test\ncase, it is impossible to make all array elements equal. In the third test\ncase, you need to apply this operation once to all elements equal to \n    5\n.\nIn the fourth test case, you need to apply this operation to all elements\nuntil they become equal to \n    8\n. In the fifth test case, it is impossible\nto make all array elements equal. In the sixth test case, you need to apply\nthis operation to all elements until they become equal to \n    102\n.\n\n",
        "cf_contest_id": 1714,
        "cf_index": "E",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10\r\n2\r\n6 11\r\n3\r\n2 18 22\r\n5\r\n5 10 5 10 5\r\n4\r\n1 2 4 8\r\n2\r\n4 5\r\n3\r\n93 96 102\r\n2\r\n40 6\r\n2\r\n50 30\r\n2\r\n22 44\r\n2\r\n1 5\r\n",
                "Yes\r\nNo\r\nYes\r\nYes\r\nNo\r\nYes\r\nNo\r\nNo\r\nYes\r\nNo\r\n"
            ]
        ],
        "private_cases": []
    }
]