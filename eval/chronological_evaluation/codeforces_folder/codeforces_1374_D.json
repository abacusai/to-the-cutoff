[
    {
        "name": "Zero Remainder Array",
        "description": "You are given an array \n    a\n consisting of \n    n\n positive integers.\nInitially, you have an integer \n    x = 0\n. During one move, you can do one of\nthe following two operations: Choose exactly one \n    i\n from \n    1\n to\n\n    n\n and increase \n    a_i\n by \n    x\n (\n    a_i := a_i + x\n), then\nincrease \n    x\n by \n    1\n (\n    x := x + 1\n). Just increase \n    x\n by\n\n    1\n (\n    x := x + 1\n). The first operation can be applied no more than\nonce to each \n    i\n from \n    1\n to \n    n\n. Your task is to find the minimum\nnumber of moves required to obtain such an array that each its element is\ndivisible by \n    k\n (the value \n    k\n is given). You have to answer \n    t\n\nindependent test cases. Input The first line of the input contains one integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 2 \n    \u00b7 10^4\n) \u2014 the number of test cases.\nThen \n    t\n test cases follow. The first line of the test case contains two\nintegers \n    n\n and \n    k\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5; 1 \n    \u2264 k\n    \n    \u2264 10^9\n) \u2014 the length of \n    a\n and the required divisior. The second\nline of the test case contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n\n(\n    1 \n    \u2264 a_i \n    \u2264 10^9\n), where \n    a_i\n is the \n    i\n-th element of\n\n    a\n. It is guaranteed that the sum of \n    n\n does not exceed \n    2 \n    \u00b7\n    10^5\n (\n    \u2211 n \n    \u2264 2 \n    \u00b7 10^5\n). Output For each test case,\nprint the answer \u2014 the minimum number of moves required to obtain such an\narray that each its element is divisible by \n    k\n. Example Input 5 4 3 1 2 1\n3 10 6 8 7 1 8 3 7 5 10 8 9 5 10 20 100 50 20 100500 10 25 24 24 24 24 24 24\n24 24 24 24 8 8 1 2 3 4 5 6 7 8 Output 6 18 0 227 8 Note Consider the first\ntest case of the example: \n    x=0\n, \n    a = [1, 2, 1, 3]\n. Just increase\n\n    x\n; \n    x=1\n, \n    a = [1, 2, 1, 3]\n. Add \n    x\n to the second element\nand increase \n    x\n; \n    x=2\n, \n    a = [1, 3, 1, 3]\n. Add \n    x\n to the\nthird element and increase \n    x\n; \n    x=3\n, \n    a = [1, 3, 3, 3]\n. Add\n\n    x\n to the fourth element and increase \n    x\n; \n    x=4\n, \n    a = [1, 3,\n    3, 6]\n. Just increase \n    x\n; \n    x=5\n, \n    a = [1, 3, 3, 6]\n. Add\n\n    x\n to the first element and increase \n    x\n; \n    x=6\n, \n    a = [6, 3, 3,\n    6]\n. We obtained the required array. Note that you can't add \n    x\n to the\nsame element more than once.\n\n",
        "cf_contest_id": 1374,
        "cf_index": "D",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "math",
            "sortings",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n4 3\r\n1 2 1 3\r\n10 6\r\n8 7 1 8 3 7 5 10 8 9\r\n5 10\r\n20 100 50 20 100500\r\n10 25\r\n24 24 24 24 24 24 24 24 24 24\r\n8 8\r\n1 2 3 4 5 6 7 8\r\n",
                "6\r\n18\r\n0\r\n227\r\n8\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 1000000000\r\n99999999\r\n",
                "900000002\r\n"
            ],
            [
                "1\r\n5 3\r\n20 100 50 20 1005002\r\n",
                "11\r\n"
            ]
        ]
    }
]