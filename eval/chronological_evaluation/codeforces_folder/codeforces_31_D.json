[
    {
        "name": "Chocolate",
        "description": "Bob has a rectangular chocolate bar of the size W \u00d7 H. He introduced a\ncartesian coordinate system so that the point (0, 0) corresponds to the lower-\nleft corner of the bar, and the point (W, H) corresponds to the upper-right\ncorner. Bob decided to split the bar into pieces by breaking it. Each break is\na segment parallel to one of the coordinate axes, which connects the edges of\nthe bar. More formally, each break goes along the line x = xc or y = yc, where\nxc and yc are integers. It should divide one part of the bar into two non-\nempty parts. After Bob breaks some part into two parts, he breaks the\nresulting parts separately and independently from each other. Also he doesn't\nmove the parts of the bar. Bob made n breaks and wrote them down in his\nnotebook in arbitrary order. At the end he got n + 1 parts. Now he wants to\ncalculate their areas. Bob is lazy, so he asks you to do this task. Input The\nfirst line contains 3 integers W, H and n (1 \u2264 W, H, n \u2264 100) \u2014 width of the\nbar, height of the bar and amount of breaks. Each of the following n lines\ncontains four integers xi, 1, yi, 1, xi, 2, yi, 2 \u2014 coordinates of the\nendpoints of the i-th break (0 \u2264 xi, 1 \u2264 xi, 2 \u2264 W, 0 \u2264 yi, 1 \u2264 yi, 2 \u2264 H, or\nxi, 1 = xi, 2, or yi, 1 = yi, 2). Breaks are given in arbitrary order. It is\nguaranteed that the set of breaks is correct, i.e. there is some order of the\ngiven breaks that each next break divides exactly one part of the bar into two\nnon-empty parts. Output Output n + 1 numbers \u2014 areas of the resulting parts in\nthe increasing order. Examples Input 2 2 2 1 0 1 2 0 1 1 1 Output 1 1 2 Input\n2 2 3 1 0 1 2 0 1 1 1 1 1 2 1 Output 1 1 1 1 Input 2 4 2 0 1 2 1 0 3 2 3\nOutput 2 2 4\n\n",
        "cf_contest_id": 31,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 2 2\r\n1 0 1 2\r\n0 1 1 1\r\n",
                "1 1 2"
            ],
            [
                "2 2 3\r\n1 0 1 2\r\n0 1 1 1\r\n1 1 2 1\r\n",
                "1 1 1 1"
            ],
            [
                "2 4 2\r\n0 1 2 1\r\n0 3 2 3\r\n",
                "2 2 4"
            ]
        ],
        "private_cases": [
            [
                "5 5 3\r\n2 1 2 5\r\n0 1 5 1\r\n4 0 4 1\r\n",
                "1 4 8 12"
            ],
            [
                "10 10 4\r\n9 0 9 10\r\n4 0 4 10\r\n1 0 1 10\r\n1 4 4 4\r\n",
                "10 10 12 18 50"
            ],
            [
                "9 8 5\r\n4 3 4 4\r\n0 4 9 4\r\n5 4 5 8\r\n0 3 9 3\r\n1 4 1 8\r\n",
                "4 4 5 16 16 27"
            ],
            [
                "100 100 1\r\n0 14 100 14\r\n",
                "1400 8600"
            ]
        ]
    }
]