[
    {
        "name": "Fancy Number",
        "description": "A car number in Berland consists of exactly n digits. A number is called\nbeautiful if it has at least k equal digits. Vasya wants to change the digits\nin his car's number so that the number became beautiful. To replace one of n\ndigits Vasya has to pay the sum of money, equal to the absolute difference\nbetween the old digit and the new one. Help Vasya: find the minimum sum of\nmoney he should pay to make the number of his car beautiful. You should also\nfind the resulting beautiful number. If there are several such numbers, then\nprint the lexicographically minimum one. Input The first line contains two\nspace-separated integers n and k (2 \u2264 n \u2264 10^4, 2 \u2264 k \u2264 n) which represent how\nmany digits the number has and how many equal digits a beautiful number should\nhave. The second line consists of n digits. It describes the old number of\nVasya's car. It is guaranteed that the number contains no spaces and only\ncontains digits. Output On the first line print the minimum sum of money Vasya\nneeds to change the number. On the second line print the car's new number. If\nthere are several solutions, print the lexicographically minimum one. Examples\nInput 6 5 898196 Output 4 888188 Input 3 2 533 Output 0 533 Input 10 6\n0001112223 Output 3 0000002223 Note In the first sample replacing the second\ndigit with an \"8\" costs |9 - 8| = 1. Replacing the fifth digit with an \"8\"\ncosts the same. Replacing the sixth digit costs |6 - 8| = 2. As a result,\nVasya will pay 1 + 1 + 2 = 4 for a beautiful number \"888188\". The\nlexicographical comparison of strings is performed by the < operator in modern\nprogramming languages. The string x is lexicographically smaller than the\nstring y, if there exists such i (1 \u2264 i \u2264 n), that xi < yi, and for any j (1 \u2264\nj < i) xj = yj. The strings compared in this problem will always have the\nlength n.\n\n",
        "cf_contest_id": 118,
        "cf_index": "C",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "greedy",
            "sortings",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 5\r\n898196\r\n",
                "4\r\n888188\r\n"
            ],
            [
                "3 2\r\n533\r\n",
                "0\r\n533\r\n"
            ],
            [
                "10 6\r\n0001112223\r\n",
                "3\r\n0000002223\r\n"
            ]
        ],
        "private_cases": [
            [
                "16 14\r\n6124258626539246\r\n",
                "22\r\n4444448444449444\r\n"
            ],
            [
                "45 32\r\n293440596342887581257444442930778730382520372\r\n",
                "44\r\n393333393333883383337333333933778733383333373\r\n"
            ],
            [
                "24 5\r\n438088068198972282890781\r\n",
                "0\r\n438088068198972282890781\r\n"
            ],
            [
                "16 14\r\n6124258626539246\r\n",
                "22\r\n4444448444449444\r\n"
            ],
            [
                "82 80\r\n2119762952003918195325258677229419698255491250839396799769357665825441616335532825\r\n",
                "184\r\n5555555555005555555555555555555555555555555555555555555555555555555555555555555555\r\n"
            ],
            [
                "45 32\r\n293440596342887581257444442930778730382520372\r\n",
                "44\r\n393333393333883383337333333933778733383333373\r\n"
            ],
            [
                "490 406\r\n6937620658350546677982121486389899418322368306416898602098608742746618866398816281683487378363055175834430809130055167725989297432631546167569254739009984031319216325885901155975051308675689263659830423003844586142203356046853592049537849615230121968733935503099047499243659967467210261734604823020656447423321550183799772473757948538911374517796361954090889656392709554559699998961074109288895345641132806900327583681875693131517858168659050373933110409335022047853526996256346106200848216\r\n",
                "823\r\n6666660666660666666666161666666666616666666606616666606066606666666616666666616661666666666666066166666660606160066166666666666666661666166666666666006666061616616666666601166666061606666666666666660666006666666166606666066666666066666666616660161666666666606066066666666666666666610661666606666060666666666661660166666666666666666666611666616666661666060666666666606666666666666661066106666666666661166606600666666661666666666666666666666060666666660606666066066666666666666666606600666666\r\n"
            ],
            [
                "356 339\r\n90713123988967376077374685385857243899541739889434281713194182070073947448051066204296405724136030046475387234588789683960244522406704483328080177635790417478469563537849906260100031272024144948352721319113584314778607455620696032294129842532911886401415747087765570443593673103700483651161340044647214751601613569664275752937177165137014927765832674935091\r\n",
                "769\r\n44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444944444444444444444444444444444494444444449444444449944444444444444444444944444444449444444444444444444444494444494449444444944444444444444444444444444494444444444444444444444444444444444444444449444444444944444444444444944444444444944494\r\n"
            ],
            [
                "156 81\r\n154048888528343996517566504808882818609764630684954673234602444413507803713170523618021219782031130705466944034778721589983846786551930214111097548781325421\r\n",
                "99\r\n144048888448444994414444404808884818409444440484944444444404444414404804414140444418041419784041140704444944044778741489984844784441940414111097448781444441\r\n"
            ],
            [
                "100 100\r\n1111111111222222222233333333334444444444555555555566666666667777777777888888888899999999990000000000\r\n",
                "250\r\n4444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444\r\n"
            ],
            [
                "2 2\r\n11\r\n",
                "0\r\n11\r\n"
            ],
            [
                "2 2\r\n09\r\n",
                "9\r\n00\r\n"
            ],
            [
                "2 2\r\n80\r\n",
                "8\r\n00\r\n"
            ],
            [
                "5 2\r\n11233\r\n",
                "0\r\n11233\r\n"
            ],
            [
                "5 4\r\n11233\r\n",
                "3\r\n11113\r\n"
            ],
            [
                "4 3\r\n1335\r\n",
                "2\r\n1333\r\n"
            ],
            [
                "8 4\r\n22294777\r\n",
                "2\r\n22274777\r\n"
            ],
            [
                "3 2\r\n531\r\n",
                "2\r\n331\r\n"
            ],
            [
                "10 8\r\n2222221134\r\n",
                "2\r\n2222221224\r\n"
            ],
            [
                "5 4\r\n34445\r\n",
                "1\r\n34444\r\n"
            ],
            [
                "6 5\r\n223333\r\n",
                "1\r\n233333\r\n"
            ],
            [
                "8 6\r\n88899999\r\n",
                "1\r\n88999999\r\n"
            ],
            [
                "5 4\r\n12221\r\n",
                "1\r\n12222\r\n"
            ],
            [
                "200 150\r\n34567484444444444444768934769793476984376983476983469347693847683947689347239485723985723452390458290385902385902385285490238459028350934902834908239048590328590234890283459023520354820938590238534533\r\n",
                "232\r\n44444444444444444444444944449494444944444944444944449444494444444944449444449444444944444444490444490444904444904444444490444449044440944904444904449044490444490444890484449044440444840948490448444444\r\n"
            ],
            [
                "5 4\r\n21122\r\n",
                "1\r\n21222\r\n"
            ]
        ]
    }
]