[
    {
        "name": "Sets",
        "description": "Little Vasya likes very much to play with sets consisting of positive\nintegers. To make the game more interesting, Vasya chose n non-empty sets in\nsuch a way, that no two of them have common elements. One day he wanted to\nshow his friends just how interesting playing with numbers is. For that he\nwrote out all possible unions of two different sets on n\u00b7(n - 1) / 2 pieces of\npaper. Then he shuffled the pieces of paper. He had written out the numbers in\nthe unions in an arbitrary order. For example, if n = 4, and the actual sets\nhave the following form 1, 3, 5, 2, 4, 7, then the number of set pairs\nequals to six. The six pieces of paper can contain the following numbers: 2,\n7, 4. 1, 7, 3; 5, 4, 2; 1, 3, 5; 3, 1, 2, 4; 5, 7. Then Vasya showed the\npieces of paper to his friends, but kept the n sets secret from them. His\nfriends managed to calculate which sets Vasya had thought of in the first\nplace. And how about you, can you restore the sets by the given pieces of\npaper? Input The first input file line contains a number n (2 \u2264 n \u2264 200), n is\nthe number of sets at Vasya's disposal. Then follow sets of numbers from the\npieces of paper written on n\u00b7(n - 1) / 2 lines. Each set starts with the\nnumber ki (2 \u2264 ki \u2264 200), which is the number of numbers written of the i-th\npiece of paper, and then follow ki numbers aij (1 \u2264 aij \u2264 200). All the\nnumbers on the lines are separated by exactly one space. It is guaranteed that\nthe input data is constructed according to the above given rules from n non-\nintersecting sets. Output Print on n lines Vasya's sets' description. The\nfirst number on the line shows how many numbers the current set has. Then the\nset should be recorded by listing its elements. Separate the numbers by\nspaces. Each number and each set should be printed exactly once. Print the\nsets and the numbers in the sets in any order. If there are several answers to\nthat problem, print any of them. It is guaranteed that there is a solution.\nExamples Input 4 3 2 7 4 3 1 7 3 3 5 4 2 3 1 3 5 4 3 1 2 4 2 5 7 Output 1 7 2\n2 4 2 1 3 1 5 Input 4 5 6 7 8 9 100 4 7 8 9 1 4 7 8 9 2 3 1 6 100 3 2 6 100 2\n1 2 Output 3 7 8 9 2 6 100 1 1 1 2 Input 3 2 1 2 2 1 3 2 2 3 Output 1 1 1 2 1\n3\n\n",
        "cf_contest_id": 82,
        "cf_index": "B",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "hashing",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3 2 7 4\r\n3 1 7 3\r\n3 5 4 2\r\n3 1 3 5\r\n4 3 1 2 4\r\n2 5 7\r\n",
                "2 1 3\r\n1 7\r\n1 5\r\n2 2 4\r\n"
            ],
            [
                "4\r\n5 6 7 8 9 100\r\n4 7 8 9 1\r\n4 7 8 9 2\r\n3 1 6 100\r\n3 2 6 100\r\n2 1 2\r\n",
                "1 1\r\n3 9 8 7\r\n2 100 6\r\n1 2\r\n"
            ],
            [
                "3\r\n2 1 2\r\n2 1 3\r\n2 2 3\r\n",
                "1 3\r\n1 1\r\n1 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n2 1 2\r\n10 1 90 80 70 60 50 40 30 20 10\r\n10 2 10 20 30 40 50 60 70 80 90\r\n",
                "9 10 20 30 50 40 60 70 90 80\r\n1 1\r\n1 2\r\n"
            ],
            [
                "4\r\n4 56 44 53 43\r\n3 109 44 43\r\n3 109 56 53\r\n3 43 62 44\r\n3 62 56 53\r\n2 109 62\r\n",
                "1 109\r\n2 44 43\r\n2 56 53\r\n1 62\r\n"
            ],
            [
                "2\r\n2 1 2\r\n",
                "1 2\r\n1 1\r\n"
            ],
            [
                "2\r\n10 1 2 3 4 5 6 7 8 9 10\r\n",
                "1 9\r\n9 10 1 3 2 5 4 7 6 8\r\n"
            ]
        ]
    }
]