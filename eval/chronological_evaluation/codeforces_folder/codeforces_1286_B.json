[
    {
        "name": "Numbers on Tree",
        "description": "Evlampiy was gifted a rooted tree. The vertices of the tree are numbered from\n\n    1\n to \n    n\n. Each of its vertices also has an integer \n    a_i\n written\non it. For each vertex \n    i\n, Evlampiy calculated \n    c_i\n \u2014 the number of\nvertices \n    j\n in the subtree of vertex \n    i\n, such that \n    a_j < a_i\n.\nIllustration for the second example, the first integer is \n    a_i\n and the\ninteger in parentheses is \n    c_i\n After the new year, Evlampiy could not\nremember what his gift was! He remembers the tree and the values of \n    c_i\n,\nbut he completely forgot which integers \n    a_i\n were written on the\nvertices. Help him to restore initial integers! Input The first line contains\nan integer \n    n\n \n    (1 \n    \u2264 n \n    \u2264 2000)\n \u2014 the number of vertices in\nthe tree. The next \n    n\n lines contain descriptions of vertices: the\n\n    i\n-th line contains two integers \n    p_i\n and \n    c_i\n (\n    0 \n    \u2264 p_i\n    \n    \u2264 n\n; \n    0 \n    \u2264 c_i \n    \u2264 n-1\n), where \n    p_i\n is the parent of\nvertex \n    i\n or \n    0\n if vertex \n    i\n is root, and \n    c_i\n is the\nnumber of vertices \n    j\n in the subtree of vertex \n    i\n, such that \n    a_j\n    < a_i\n. It is guaranteed that the values of \n    p_i\n describe a rooted tree\nwith \n    n\n vertices. Output If a solution exists, in the first line print\n\"YES\", and in the second line output \n    n\n integers \n    a_i\n \n    (1 \n    \u2264\n    a_i \n    \u226410^9)\n. If there are several solutions, output any of them.\nOne can prove that if there is a solution, then there is also a solution in\nwhich all \n    a_i\n are between \n    1\n and \n    10^9\n. If there are no\nsolutions, print \"NO\". Examples Input 3 2 0 0 2 2 0 Output YES 1 2 1 Input 5 0\n1 1 3 2 1 3 0 2 0 Output YES 2 3 2 1 2\n\n",
        "cf_contest_id": 1286,
        "cf_index": "B",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "dfs and similar",
            "graphs",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2 0\r\n0 2\r\n2 0\r\n",
                "YES\r\n1 3 2\r\n"
            ],
            [
                "5\r\n0 1\r\n1 3\r\n2 1\r\n3 0\r\n2 0\r\n",
                "YES\r\n2 5 3 1 4\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n0 0\r\n",
                "YES\r\n1\r\n"
            ],
            [
                "2\r\n0 1\r\n1 0\r\n",
                "YES\r\n2 1\r\n"
            ],
            [
                "2\r\n2 0\r\n0 0\r\n",
                "YES\r\n2 1\r\n"
            ],
            [
                "2\r\n2 1\r\n0 1\r\n",
                "NO\r\n"
            ],
            [
                "3\r\n0 0\r\n1 0\r\n1 0\r\n",
                "YES\r\n1 2 3\r\n"
            ],
            [
                "3\r\n0 1\r\n3 0\r\n1 0\r\n",
                "YES\r\n2 3 1\r\n"
            ],
            [
                "3\r\n3 1\r\n1 0\r\n0 1\r\n",
                "YES\r\n3 1 2\r\n"
            ],
            [
                "3\r\n2 1\r\n0 0\r\n1 1\r\n",
                "NO\r\n"
            ]
        ]
    }
]