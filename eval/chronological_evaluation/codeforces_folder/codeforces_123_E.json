[
    {
        "name": "Maze",
        "description": "A maze is represented by a tree (an undirected graph, where exactly one way\nexists between each pair of vertices). In the maze the entrance vertex and the\nexit vertex are chosen with some probability. The exit from the maze is sought\nby Deep First Search. If there are several possible ways to move, the move is\nchosen equiprobably. Consider the following pseudo-code: DFS(x) if x == exit\nvertex then finish search flag[x] <\u00ad TRUE random shuffle the vertices' order\nin V(x) // here all permutations have equal probability to be chosen for i <\u00ad\n1 to length[V] do if flag[V[i]] = FALSE then count++; DFS(y); count++; V(x) is\nthe list vertices adjacent to x. The flag array is initially filled as FALSE.\nDFS initially starts with a parameter of an entrance vertex. When the search\nis finished, variable count will contain the number of moves. Your task is to\ncount the mathematical expectation of the number of moves one has to do to\nexit the maze. Input The first line determines the number of vertices in the\ngraph n (1 \u2264 n \u2264 10^5). The next n - 1 lines contain pairs of integers ai and\nbi, which show the existence of an edge between ai and bi vertices (1 \u2264 ai, bi\n\u2264 n). It is guaranteed that the given graph is a tree. Next n lines contain\npairs of non-negative numbers xi and yi, which represent the probability of\nchoosing the i-th vertex as an entrance and exit correspondingly. The\nprobabilities to choose vertex i as an entrance and an exit equal and\ncorrespondingly. The sum of all xi and the sum of all yi are positive and do\nnot exceed 10^6. Output Print the expectation of the number of moves. The\nabsolute or relative error should not exceed 10^-9. Examples Input 2 1 2 0 1 1\n0 Output 1.00000000000000000000 Input 3 1 2 1 3 1 0 0 2 0 3 Output\n2.00000000000000000000 Input 7 1 2 1 3 2 4 2 5 3 6 3 7 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 Output 4.04081632653 Note In the first sample the entrance vertex is\nalways 1 and the exit vertex is always 2. In the second sample the entrance\nvertex is always 1 and the exit vertex with the probability of 2/5 will be 2\nof with the probability if 3/5 will be 3. The mathematical expectations for\nthe exit vertices 2 and 3 will be equal (symmetrical cases). During the first\nmove one can go to the exit vertex with the probability of 0.5 or to go to a\nvertex that's not the exit vertex with the probability of 0.5. In the first\ncase the number of moves equals 1, in the second one it equals 3. The total\nmathematical expectation is counted as 2 / 5 \u00d7 (1 \u00d7 0.5 + 3 \u00d7 0.5) + 3 / 5 \u00d7\n(1 \u00d7 0.5 + 3 \u00d7 0.5)\n\n",
        "cf_contest_id": 123,
        "cf_index": "E",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dp",
            "probabilities",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n1 2\r\n0 1\r\n1 0\r\n",
                "1.00000000000000000000\r\n"
            ],
            [
                "3\r\n1 2\r\n1 3\r\n1 0\r\n0 2\r\n0 3\r\n",
                "2.00000000000000000000\r\n"
            ],
            [
                "7\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n3 7\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n",
                "4.04081632653061180000\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n3 4\r\n3 1\r\n2 4\r\n1 0\r\n0 0\r\n1 0\r\n1 2\r\n",
                "1.33333333333333330000\r\n"
            ],
            [
                "5\r\n1 3\r\n2 5\r\n5 4\r\n5 1\r\n0 0\r\n0 2\r\n1 0\r\n0 2\r\n0 0\r\n",
                "4.00000000000000000000\r\n"
            ],
            [
                "6\r\n1 5\r\n3 2\r\n6 1\r\n6 4\r\n3 6\r\n1 1\r\n1 0\r\n1 1\r\n1 3\r\n1 0\r\n1 1\r\n",
                "3.27777777777777770000\r\n"
            ],
            [
                "7\r\n3 6\r\n3 7\r\n2 3\r\n4 3\r\n5 3\r\n3 1\r\n0 0\r\n0 2\r\n0 1\r\n0 1\r\n0 1\r\n6 1\r\n0 1\r\n",
                "4.42857142857142880000\r\n"
            ],
            [
                "9\r\n1 3\r\n8 1\r\n9 7\r\n7 4\r\n1 5\r\n2 4\r\n7 6\r\n3 4\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n1 2\r\n0 2\r\n0 0\r\n0 1\r\n",
                "2.00000000000000000000\r\n"
            ],
            [
                "12\r\n4 7\r\n6 9\r\n3 11\r\n8 11\r\n1 12\r\n10 3\r\n5 6\r\n2 7\r\n8 1\r\n5 12\r\n4 10\r\n1 1\r\n2 1\r\n1 0\r\n1 0\r\n1 3\r\n1 0\r\n1 1\r\n1 1\r\n1 3\r\n2 0\r\n1 4\r\n1 0\r\n",
                "7.23469387755102030000\r\n"
            ],
            [
                "12\r\n9 12\r\n3 12\r\n4 12\r\n11 12\r\n8 11\r\n10 12\r\n9 1\r\n5 9\r\n2 1\r\n8 7\r\n8 6\r\n0 2\r\n2 2\r\n3 1\r\n0 1\r\n0 0\r\n1 2\r\n2 1\r\n2 2\r\n1 0\r\n1 2\r\n1 1\r\n0 1\r\n",
                "8.35384615384615440000\r\n"
            ],
            [
                "15\r\n11 6\r\n2 14\r\n10 13\r\n5 12\r\n3 4\r\n7 2\r\n13 15\r\n4 1\r\n4 8\r\n14 11\r\n5 9\r\n13 12\r\n13 4\r\n15 14\r\n0 0\r\n0 1\r\n0 1\r\n0 0\r\n0 1\r\n0 0\r\n0 1\r\n0 0\r\n0 0\r\n0 1\r\n0 0\r\n0 4\r\n0 0\r\n26 1\r\n0 0\r\n",
                "11.60000000000000000000\r\n"
            ],
            [
                "21\r\n7 14\r\n15 3\r\n14 16\r\n13 16\r\n20 8\r\n9 15\r\n18 21\r\n2 8\r\n19 15\r\n1 5\r\n21 11\r\n13 1\r\n16 19\r\n17 21\r\n13 11\r\n12 3\r\n4 11\r\n20 6\r\n1 10\r\n3 2\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n15 0\r\n0 0\r\n0 0\r\n0 0\r\n0 26\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n17 0\r\n0 0\r\n0 0\r\n0 0\r\n",
                "20.00000000000000000000\r\n"
            ]
        ]
    }
]