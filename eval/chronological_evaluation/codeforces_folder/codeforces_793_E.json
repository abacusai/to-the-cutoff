[
    {
        "name": "Problem of offices",
        "description": "Earlier, when there was no Internet, each bank had a lot of offices all around\nBankopolis, and it caused a lot of problems. Namely, each day the bank had to\ncollect cash from all the offices. Once Oleg the bank client heard a dialogue\nof two cash collectors. Each day they traveled through all the departments and\noffices of the bank following the same route every day. The collectors started\nfrom the central department and moved between some departments or between some\ndepartment and some office using special roads. Finally, they returned to the\ncentral department. The total number of departments and offices was n, the\ntotal number of roads was n - 1. In other words, the special roads system was\na rooted tree in which the root was the central department, the leaves were\noffices, the internal vertices were departments. The collectors always\nfollowed the same route in which the number of roads was minimum possible,\nthat is 2n - 2. One of the collectors said that the number of offices they\nvisited between their visits to offices a and then b (in the given order) is\nequal to the number of offices they visited between their visits to offices b\nand then a (in this order). The other collector said that the number of\noffices they visited between their visits to offices c and then d (in this\norder) is equal to the number of offices they visited between their visits to\noffices d and then c (in this order). The interesting part in this talk was\nthat the shortest path (using special roads only) between any pair of offices\namong a, b, c and d passed through the central department. Given the special\nroads map and the indexes of offices a, b, c and d, determine if the situation\ndescribed by the collectors was possible, or not. Input The first line\ncontains single integer n (5 \u2264 n \u2264 5000) \u2014 the total number of offices and\ndepartments. The departments and offices are numbered from 1 to n, the central\noffice has index 1. The second line contains four integers a, b, c and d (2 \u2264\na, b, c, d \u2264 n) \u2014 the indexes of the departments mentioned in collector's\ndialogue. It is guaranteed that these indexes are offices (i.e. leaves of the\ntree), not departments. It is guaranteed that the shortest path between any\npair of these offices passes through the central department. On the third line\nn - 1 integers follow: p2, p3, ..., pn (1 \u2264 pi < i), where pi denotes that\nthere is a special road between the i-th office or department and the pi-th\ndepartment. Please note the joint enumeration of departments and offices. It\nis guaranteed that the given graph is a tree. The offices are the leaves, the\ndepartments are the internal vertices. Output If the situation described by\nthe cash collectors was possible, print \"YES\". Otherwise, print \"NO\". Examples\nInput 5 2 3 4 5 1 1 1 1 Output YES Input 10 3 8 9 10 1 2 2 2 2 2 1 1 1 Output\nNO Input 13 13 12 9 7 1 1 1 1 5 5 2 2 2 3 3 4 Output YES Note In the first\nexample the following collector's route was possible: . We can note that\nbetween their visits to offices a and b the collectors visited the same number\nof offices as between visits to offices b and a; the same holds for c and d\n(the collectors' route is infinite as they follow it each day). In the second\nexample there is no route such that between their visits to offices c and d\nthe collectors visited the same number of offices as between visits to offices\nd and c. Thus, there situation is impossible. In the third example one of the\nfollowing routes is: .\n\n",
        "cf_contest_id": 793,
        "cf_index": "E",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n2 3 4 5\r\n1 1 1 1\r\n",
                "YES\r\n"
            ],
            [
                "10\r\n3 8 9 10\r\n1 2 2 2 2 2 1 1 1\r\n",
                "NO\r\n"
            ],
            [
                "13\r\n13 12 9 7\r\n1 1 1 1 5 5 2 2 2 3 3 4\r\n",
                "YES\r\n"
            ]
        ],
        "private_cases": [
            [
                "11\r\n2 4 9 11\r\n1 1 3 3 3 3 3 1 1 10\r\n",
                "NO\r\n"
            ],
            [
                "11\r\n4 2 9 11\r\n1 1 3 3 3 3 3 1 1 10\r\n",
                "NO\r\n"
            ],
            [
                "6\r\n2 3 4 5\r\n1 1 1 1 1\r\n",
                "NO\r\n"
            ],
            [
                "15\r\n3 9 15 13\r\n1 2 2 1 5 5 1 8 1 10 1 12 1 14\r\n",
                "YES\r\n"
            ],
            [
                "15\r\n8 13 5 10\r\n1 2 1 4 1 6 6 1 9 1 11 12 1 14\r\n",
                "NO\r\n"
            ],
            [
                "15\r\n15 2 11 9\r\n1 1 3 1 5 6 7 1 1 10 1 12 13 14\r\n",
                "YES\r\n"
            ],
            [
                "100\r\n3 80 100 32\r\n1 2 1 4 1 6 1 8 1 1 11 1 13 1 1 16 1 18 1 1 1 1 1 24 1 26 1 1 29 1 1 1 1 34 1 36 1 38 1 40 1 42 1 1 1 1 47 1 1 50 1 52 1 1 55 1 57 1 1 60 1 62 1 1 1 66 1 68 1 1 1 72 1 1 75 1 1 1 79 1 81 1 83 1 1 1 1 1 1 90 1 1 93 1 95 1 97 1 99\r\n",
                "YES\r\n"
            ],
            [
                "100\r\n23 6 94 20\r\n1 2 2 2 3 2 1 8 8 8 8 9 1 14 14 14 1 18 18 18 1 22 1 24 24 24 1 28 28 28 28 29 1 34 34 34 1 38 38 38 1 42 42 42 42 1 47 47 1 50 50 50 50 1 55 55 55 1 59 59 59 1 63 63 63 1 67 67 67 67 1 72 72 1 75 75 75 1 79 79 79 1 83 83 83 84 1 88 88 1 91 91 91 1 95 95 95 95 95\r\n",
                "YES\r\n"
            ],
            [
                "100\r\n71 84 36 19\r\n1 2 2 1 5 5 1 8 9 8 1 12 1 14 1 16 1 1 1 20 21 1 23 1 25 1 27 27 27 1 31 1 33 1 35 1 37 1 1 1 41 1 43 1 45 1 47 48 1 1 51 1 1 54 1 56 1 58 58 60 1 62 62 1 65 1 67 67 1 70 70 1 1 74 1 76 1 78 1 80 1 1 83 1 85 1 87 1 89 89 91 1 93 94 1 96 1 98 99\r\n",
                "NO\r\n"
            ],
            [
                "100\r\n13 85 24 58\r\n1 2 3 1 5 6 7 1 9 10 11 12 1 14 15 16 17 1 19 20 21 22 23 1 25 26 27 27 29 1 31 32 1 34 35 36 37 38 39 1 41 42 43 44 1 46 47 48 49 50 51 1 53 54 55 56 57 1 59 60 61 62 63 1 65 66 67 68 1 70 71 72 73 1 75 76 77 78 79 1 81 82 83 84 1 86 87 88 89 1 91 92 93 94 95 1 97 98 99\r\n",
                "YES\r\n"
            ],
            [
                "100\r\n51 89 45 65\r\n1 2 1 1 1 1 1 8 1 1 1 1 1 1 15 1 1 1 1 1 21 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 41 1 1 44 1 1 1 1 1 50 1 1 1 1 55 1 1 1 1 1 1 62 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 82 1 84 1 1 1 1 1 1 1 1 1 1 95 1 1 1 1\r\n",
                "NO\r\n"
            ],
            [
                "100\r\n70 57 53 26\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "NO\r\n"
            ],
            [
                "100\r\n69 80 53 5\r\n1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 27 1 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 1 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78 78\r\n",
                "NO\r\n"
            ],
            [
                "100\r\n72 58 82 96\r\n1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 67 67 1 70 70 1 73 73 1 76 76 1 79 1 81 1 83 1 85 1 87 87 1 90 1 1 93 1 95 1 97 1 99\r\n",
                "NO\r\n"
            ],
            [
                "100\r\n28 84 3 95\r\n1 2 1 1 5 1 1 8 1 10 1 12 1 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 1 80 80 1 83 1 85 85 1 88 88 1 91 1 93 93 1 96 96 1 99\r\n",
                "NO\r\n"
            ]
        ]
    }
]