[
    {
        "name": "Long Colorful Strip",
        "description": "This is the second subtask of problem F. The only differences between this and\nthe first subtask are the constraints on the value of \n    m\n and the time\nlimit. It is sufficient to solve this subtask in order to hack it, but you\nneed to solve both subtasks in order to hack the first one. There are\n\n    n+1\n distinct colours in the universe, numbered \n    0\n through \n    n\n.\nThere is a strip of paper \n    m\n centimetres long initially painted with\ncolour \n    0\n. Alice took a brush and painted the strip using the following\nprocess. For each \n    i\n from \n    1\n to \n    n\n, in this order, she picks\ntwo integers \n    0 \n    \u2264 a_i < b_i \n    \u2264 m\n, such that the segment \n    [a_i,\n    b_i]\n is currently painted with a single colour, and repaints it with colour\n\n    i\n. Alice chose the segments in such a way that each centimetre is now\npainted in some colour other than \n    0\n. Formally, the segment \n    [i-1,\n    i]\n is painted with colour \n    c_i\n (\n    c_i \n    \u2260 0\n). Every colour\nother than \n    0\n is visible on the strip. Count the number of different\npairs of sequences \n    a_i\n    \n    _i=1^n\n, \n    b_i\n    \n    _i=1^n\n\nthat result in this configuration. Since this number may be large, output it\nmodulo \n    998244353\n. Input The first line contains a two integers \n    n\n,\n\n    m\n (\n    1 \n    \u2264 n \n    \u2264 500\n, \n    n \n    \u2264 m \n    \u2264 10^6\n) \u2014 the\nnumber of colours excluding the colour \n    0\n and the length of the paper,\nrespectively. The second line contains \n    m\n space separated integers\n\n    c_1, c_2, \n    \u2026, c_m\n (\n    1 \n    \u2264 c_i \n    \u2264 n\n) \u2014 the colour\nvisible on the segment \n    [i-1, i]\n after the process ends. It is guaranteed\nthat for all \n    j\n between \n    1\n and \n    n\n there is an index \n    k\n\nsuch that \n    c_k = j\n. Output Output a single integer \u2014 the number of ways\nAlice can perform the painting, modulo \n    998244353\n. Examples Input 3 3 1 2\n3 Output 5 Input 2 3 1 2 1 Output 1 Input 2 3 2 1 2 Output 0 Input 7 7 4 5 1 6\n2 3 7 Output 165 Input 8 17 1 3 2 2 7 8 2 5 5 4 4 4 1 1 6 1 1 Output 20 Note\nIn the first example, there are \n    5\n ways, all depicted in the figure\nbelow. Here, \n    0\n is white, \n    1\n is red, \n    2\n is green and \n    3\n is\nblue. Below is an example of a painting process that is not valid, as in the\nsecond step the segment 1 3 is not single colour, and thus may not be\nrepainted with colour \n    2\n. In the second example, Alice must first paint\nsegment 0 3 with colour \n    1\n and then segment 1 2 with colour \n    2\n.\n\n",
        "cf_contest_id": 1178,
        "cf_index": "F2",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "dp"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\n1 2 3\r\n",
                "5"
            ],
            [
                "2 3\r\n1 2 1\r\n",
                "1"
            ],
            [
                "2 3\r\n2 1 2\r\n",
                "0"
            ],
            [
                "7 7\r\n4 5 1 6 2 3 7\r\n",
                "165"
            ],
            [
                "8 17\r\n1 3 2 2 7 8 2 5 5 4 4 4 1 1 6 1 1\r\n",
                "20"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1\r\n",
                "1"
            ],
            [
                "3 3\r\n2 3 1\r\n",
                "5"
            ],
            [
                "3 3\r\n1 3 2\r\n",
                "5"
            ],
            [
                "17 17\r\n17 2 4 5 15 3 6 7 13 16 10 1 9 12 8 14 11\r\n",
                "6199380"
            ],
            [
                "10 30\r\n6 6 6 6 5 5 7 2 10 10 10 9 9 9 3 3 3 3 3 1 1 1 1 1 1 4 4 4 4 8\r\n",
                "3430"
            ],
            [
                "10 30\r\n1 2 2 2 2 2 4 10 10 4 4 2 3 7 7 3 3 5 8 8 5 5 3 2 6 6 2 2 9 9\r\n",
                "5"
            ],
            [
                "4 20\r\n4 4 4 4 4 1 1 3 3 3 3 3 2 2 2 2 2 2 2 2\r\n",
                "10"
            ],
            [
                "4 20\r\n2 1 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 4 4 4\r\n",
                "10"
            ],
            [
                "4 20\r\n2 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 1 1 1 1\r\n",
                "14"
            ],
            [
                "4 20\r\n1 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 3 1 2 2\r\n",
                "2"
            ],
            [
                "4 20\r\n1 1 2 2 2 2 2 2 2 2 2 2 2 1 1 4 4 1 3 3\r\n",
                "2"
            ],
            [
                "8 25\r\n3 3 3 3 3 3 7 7 7 7 3 1 2 2 4 4 2 5 5 8 8 5 6 6 5\r\n",
                "10"
            ],
            [
                "8 25\r\n3 3 3 3 1 1 8 8 8 1 2 6 6 7 7 6 6 2 2 1 4 5 5 4 4\r\n",
                "4"
            ],
            [
                "8 25\r\n6 6 6 6 1 1 1 1 3 7 7 7 8 8 2 2 2 2 2 2 4 4 4 4 5\r\n",
                "532"
            ],
            [
                "8 25\r\n2 6 6 6 6 6 6 6 6 6 6 2 5 5 5 5 5 2 7 2 1 3 1 4 8\r\n",
                "10"
            ],
            [
                "8 25\r\n8 8 4 4 4 4 4 4 3 3 5 5 7 7 7 5 5 5 5 5 2 2 6 2 1\r\n",
                "108"
            ],
            [
                "4 13\r\n1 4 4 4 4 4 4 4 4 4 3 1 2\r\n",
                "4"
            ],
            [
                "5 13\r\n1 1 1 2 2 4 4 2 2 5 2 3 1\r\n",
                "2"
            ],
            [
                "5 13\r\n1 4 4 4 5 5 5 2 2 2 1 3 3\r\n",
                "10"
            ],
            [
                "2 5\r\n1 2 1 2 1\r\n",
                "0\r\n"
            ]
        ]
    }
]