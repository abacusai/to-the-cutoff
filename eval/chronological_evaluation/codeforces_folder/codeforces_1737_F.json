[
    {
        "name": "Ela and Prime GCD",
        "description": "After a long, tough, but fruitful day at DTL, Ela goes home happily. She\nentertains herself by solving Competitive Programming problems. She prefers\nshort statements, because she already read too many long papers and\ndocumentation at work. The problem of the day reads: You are given an integer\n\n    c\n. Suppose that \n    c\n has \n    n\n divisors. You have to find a\nsequence with \n    n - 1\n integers \n    [a_1, a_2, ... a_n - 1]\n, which\nsatisfies the following conditions: Each element is strictly greater than\n\n    1\n. Each element is a divisor of \n    c\n. All elements are distinct. For\nall \n    1 \n    \u2264 i < n - 1\n, \n    (a_i, a_i + 1)\n is a prime number.\nIn this problem, because \n    c\n can be too big, the result of prime\nfactorization of \n    c\n is given instead. Note that \n    (x, y)\n\ndenotes the greatest common divisor (GCD) of integers \n    x\n and \n    y\n and\na prime number is a positive integer which has exactly \n    2\n divisors. Input\nThe first line contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) - the\nnumber of test cases. The first line of each test case contains one integer\n\n    m\n (\n    1 \n    \u2264 m \n    \u2264 16\n) - the number of prime factor of \n    c\n.\nThe second line of each test case contains \n    m\n integers \n    b_1, b_2,\n    \n    \u2026, b_m\n (\n    1 \n    \u2264 b_i < 2^20\n) \u2014 exponents of corresponding\nprime factors of \n    c\n, so that \n    c = p_1^b_1\n    \u00b7 p_2^b_2\n    \u00b7\n    \u2026\n    \u00b7 p_m^b_m\n and \n    n = (b_1 + 1)(b_2 + 1) \n    \u2026 (b_m +\n    1)\n hold. \n    p_i\n is the \n    i\n-th smallest prime number. It is\nguaranteed that the sum of \n    n \n    \u00b7 m\n over all test cases does not\nexceed \n    2^20\n. Output Print the answer for each test case, one per line.\nIf there is no sequence for the given \n    c\n, print \n    -1\n. Otherwise,\nprint \n    n - 1\n lines. In \n    i\n-th line, print \n    m\n space-separated\nintegers. The \n    j\n-th integer of \n    i\n-th line is equal to the exponent\nof \n    j\n-th prime number from \n    a_i\n. If there are multiple answers,\nprint any of them. Example Input 5 2 1 1 1 1 3 1 1 1 1 4 2 2 1 Output 0 1 1 1\n1 0 1 0 1 1 0 0 1 1 0 1 1 1 0 0 1 0 1 1 1 1 0 0 -1 2 0 1 1 0 1 2 1 1 0 Note In\neach test case, the values of \n    c\n are \n    6\n, \n    2\n, \n    30\n,\n\n    16\n, and \n    12\n in that order. In the first test case, \n    1\n,\n\n    2\n, \n    3\n, \n    6\n are divisors of \n    6\n. Here, sequences \n    [2, 6,\n    3]\n and \n    [3, 6, 2]\n can be answer. Permutation \n    [3, 2, 6]\n is\ninvalid because \n    (a_1, a_2) = 1\n is not a prime number. In the forth\ntest case, \n    1\n, \n    2\n, \n    4\n, \n    8\n, \n    16\n are divisors of\n\n    16\n. Among the permutation of sequence \n    [2, 4, 8, 16]\n, no valid\nanswer exist.\n\n",
        "cf_contest_id": 1737,
        "cf_index": "F",
        "cf_rating": 3300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n2\r\n1 1\r\n1\r\n1\r\n3\r\n1 1 1\r\n1\r\n4\r\n2\r\n2 1\r\n",
                "1 0\r\n1 1\r\n0 1\r\n1\r\n1 0 1\r\n1 0 0\r\n1 1 0\r\n0 1 1\r\n0 0 1\r\n1 1 1\r\n0 1 0\r\n-1\r\n2 1\r\n0 1\r\n1 1\r\n2 0\r\n1 0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n1048575\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n14\r\n1 1 1 1 1 4 1 1 1 1 1 1 1 1\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n14\r\n1 3 1 1 1 1 2 1 1 1 1 1 1 1\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n14\r\n2 1 1 1 1 2 1 2 1 1 1 1 1 1\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n10\r\n2 2 2 2 2 2 2 2 2 2\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n2\r\n1 262143\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n3\r\n1 1 87380\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n4\r\n1 1 1 32767\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n5\r\n1 1 1 1 13106\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n6\r\n1 1 1 1 1 5460\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n7\r\n1 1 1 1 1 1 2339\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n8\r\n1 1 1 1 1 1 1 1023\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n9\r\n1 1 1 1 1 1 1 1 454\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n10\r\n1 1 1 1 1 1 1 1 1 203\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n11\r\n1 1 1 1 1 1 1 1 1 1 92\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n12\r\n1 1 1 1 1 1 1 1 1 1 1 41\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n13\r\n1 1 1 1 1 1 1 1 1 1 1 1 18\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n14\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 8\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n5\r\n10 4 40 30 2\r\n",
                "-1\r\n"
            ]
        ]
    }
]