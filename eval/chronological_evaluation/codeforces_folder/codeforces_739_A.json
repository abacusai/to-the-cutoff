[
    {
        "name": "Alyona and mex",
        "description": "Alyona's mother wants to present an array of n non-negative integers to\nAlyona. The array should be special. Alyona is a capricious girl so after she\ngets the array, she inspects m of its subarrays. Subarray is a set of some\nsubsequent elements of the array. The i-th subarray is described with two\nintegers li and ri, and its elements are a[li], a[li + 1], ..., a[ri]. Alyona\nis going to find mex for each of the chosen subarrays. Among these m mexes the\ngirl is going to find the smallest. She wants this minimum mex to be as large\nas possible. You are to find an array a of n elements so that the minimum mex\namong those chosen by Alyona subarrays is as large as possible. The mex of a\nset S is a minimum possible non-negative integer that is not in S. Input The\nfirst line contains two integers n and m (1 \u2264 n, m \u2264 10^5). The next m lines\ncontain information about the subarrays chosen by Alyona. The i-th of these\nlines contains two integers li and ri (1 \u2264 li \u2264 ri \u2264 n), that describe the\nsubarray a[li], a[li + 1], ..., a[ri]. Output In the first line print single\ninteger \u2014 the maximum possible minimum mex. In the second line print n\nintegers \u2014 the array a. All the elements in a should be between 0 and 10^9. It\nis guaranteed that there is an optimal answer in which all the elements in a\nare between 0 and 10^9. If there are multiple solutions, print any of them.\nExamples Input 5 3 1 3 2 5 4 5 Output 2 1 0 2 1 0 Input 4 2 1 4 2 4 Output 3 5\n2 0 1 Note The first example: the mex of the subarray (1, 3) is equal to 3,\nthe mex of the subarray (2, 5) is equal to 3, the mex of the subarray (4, 5)\nis equal to 2 as well, thus the minumal mex among the subarrays chosen by\nAlyona is equal to 2.\n\n",
        "cf_contest_id": 739,
        "cf_index": "A",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 3\r\n1 3\r\n2 5\r\n4 5\r\n",
                "2 0 1 0 1 0\r\n"
            ],
            [
                "4 2\r\n1 4\r\n2 4\r\n",
                "3 0 1 2 0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1 1\r\n",
                "1 0\r\n"
            ],
            [
                "2 1\r\n2 2\r\n",
                "1 0 0\r\n"
            ],
            [
                "5 6\r\n2 4\r\n2 3\r\n1 4\r\n3 4\r\n2 5\r\n1 3\r\n",
                "2 0 1 0 1 0\r\n"
            ],
            [
                "8 3\r\n2 3\r\n2 8\r\n3 6\r\n",
                "2 0 1 0 1 0 1 0 1\r\n"
            ],
            [
                "10 10\r\n1 9\r\n4 8\r\n4 8\r\n5 9\r\n1 9\r\n3 8\r\n1 6\r\n1 9\r\n1 6\r\n6 9\r\n",
                "4 0 1 2 3 0 1 2 3 0 1\r\n"
            ],
            [
                "3 6\r\n1 3\r\n1 3\r\n1 1\r\n1 1\r\n3 3\r\n3 3\r\n",
                "1 0 0 0\r\n"
            ],
            [
                "3 3\r\n1 3\r\n2 2\r\n1 3\r\n",
                "1 0 0 0\r\n"
            ],
            [
                "6 8\r\n3 5\r\n3 6\r\n4 6\r\n2 5\r\n2 5\r\n1 3\r\n3 6\r\n3 5\r\n",
                "3 0 1 2 0 1 2\r\n"
            ],
            [
                "10 4\r\n4 10\r\n4 6\r\n6 8\r\n1 10\r\n",
                "3 0 1 2 0 1 2 0 1 2 0\r\n"
            ],
            [
                "9 1\r\n1 1\r\n",
                "1 0 0 0 0 0 0 0 0 0\r\n"
            ],
            [
                "3 8\r\n2 3\r\n1 3\r\n1 2\r\n2 3\r\n1 3\r\n2 2\r\n1 2\r\n1 2\r\n",
                "1 0 0 0\r\n"
            ],
            [
                "3 8\r\n1 2\r\n1 2\r\n1 1\r\n2 3\r\n2 3\r\n1 1\r\n1 3\r\n1 3\r\n",
                "1 0 0 0\r\n"
            ],
            [
                "7 3\r\n7 7\r\n3 7\r\n5 7\r\n",
                "1 0 0 0 0 0 0 0\r\n"
            ],
            [
                "9 9\r\n4 5\r\n5 8\r\n1 8\r\n4 8\r\n3 4\r\n7 8\r\n1 4\r\n7 8\r\n6 7\r\n",
                "2 0 1 0 1 0 1 0 1 0\r\n"
            ],
            [
                "10 10\r\n1 5\r\n7 10\r\n2 10\r\n2 5\r\n2 9\r\n5 9\r\n3 10\r\n4 9\r\n6 9\r\n2 7\r\n",
                "4 0 1 2 3 0 1 2 3 0 1\r\n"
            ],
            [
                "8 7\r\n5 8\r\n3 7\r\n1 8\r\n3 4\r\n2 8\r\n2 7\r\n4 6\r\n",
                "2 0 1 0 1 0 1 0 1\r\n"
            ],
            [
                "10 3\r\n2 4\r\n8 10\r\n4 6\r\n",
                "3 0 1 2 0 1 2 0 1 2 0\r\n"
            ],
            [
                "5 8\r\n3 4\r\n1 5\r\n3 4\r\n3 5\r\n3 4\r\n1 4\r\n1 5\r\n2 5\r\n",
                "2 0 1 0 1 0\r\n"
            ],
            [
                "9 4\r\n5 9\r\n3 8\r\n2 8\r\n1 4\r\n",
                "4 0 1 2 3 0 1 2 3 0\r\n"
            ],
            [
                "7 7\r\n2 4\r\n1 4\r\n3 6\r\n2 6\r\n5 7\r\n3 6\r\n1 4\r\n",
                "3 0 1 2 0 1 2 0\r\n"
            ],
            [
                "6 2\r\n4 6\r\n2 5\r\n",
                "3 0 1 2 0 1 2\r\n"
            ],
            [
                "7 9\r\n6 7\r\n1 2\r\n2 5\r\n4 7\r\n1 7\r\n5 6\r\n2 3\r\n6 7\r\n1 2\r\n",
                "2 0 1 0 1 0 1 0\r\n"
            ]
        ]
    }
]