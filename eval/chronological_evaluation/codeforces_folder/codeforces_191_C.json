[
    {
        "name": "Fools and Roads",
        "description": "They say that Berland has exactly two problems, fools and roads. Besides,\nBerland has n cities, populated by the fools and connected by the roads. All\nBerland roads are bidirectional. As there are many fools in Berland, between\neach pair of cities there is a path (or else the fools would get upset). Also,\nbetween each pair of cities there is no more than one simple path (or else the\nfools would get lost). But that is not the end of Berland's special features.\nIn this country fools sometimes visit each other and thus spoil the roads. The\nfools aren't very smart, so they always use only the simple paths. A simple\npath is the path which goes through every Berland city not more than once. The\nBerland government knows the paths which the fools use. Help the government\ncount for each road, how many distinct fools can go on it. Note how the fools'\npaths are given in the input. Input The first line contains a single integer n\n(2 \u2264 n \u2264 10^5) \u2014 the number of cities. Each of the next n - 1 lines contains\ntwo space-separated integers ui, vi (1 \u2264 ui, vi \u2264 n, ui \u2260 vi), that means that\nthere is a road connecting cities ui and vi. The next line contains integer k\n(0 \u2264 k \u2264 10^5) \u2014 the number of pairs of fools who visit each other. Next k\nlines contain two space-separated numbers. The i-th line (i > 0) contains\nnumbers ai, bi (1 \u2264 ai, bi \u2264 n). That means that the fool number 2i - 1 lives\nin city ai and visits the fool number 2i, who lives in city bi. The given\npairs describe simple paths, because between every pair of cities there is\nonly one simple path. Output Print n - 1 integer. The integers should be\nseparated by spaces. The i-th number should equal the number of fools who can\ngo on the i-th road. The roads are numbered starting from one in the order, in\nwhich they occur in the input. Examples Input 5 1 2 1 3 2 4 2 5 2 1 4 3 5\nOutput 2 1 1 1 Input 5 3 4 4 5 1 4 2 4 3 2 3 1 3 3 5 Output 3 1 1 1 Note In\nthe first sample the fool number one goes on the first and third road and the\nfool number 3 goes on the second, first and fourth ones. In the second sample,\nthe fools number 1, 3 and 5 go on the first road, the fool number 5 will go on\nthe second road, on the third road goes the fool number 3, and on the fourth\none goes fool number 1.\n\n",
        "cf_contest_id": 191,
        "cf_index": "C",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n2\r\n1 4\r\n3 5\r\n",
                "2 1 1 1\r\n"
            ],
            [
                "5\r\n3 4\r\n4 5\r\n1 4\r\n2 4\r\n3\r\n2 3\r\n1 3\r\n3 5\r\n",
                "3 1 1 1\r\n"
            ]
        ],
        "private_cases": []
    }
]