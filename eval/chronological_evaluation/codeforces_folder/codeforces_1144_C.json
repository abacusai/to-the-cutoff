[
    {
        "name": "Two Shuffled Sequences",
        "description": "Two integer sequences existed initially \u2014 one of them was strictly increasing,\nand the other one \u2014 strictly decreasing. Strictly increasing sequence is a\nsequence of integers \n    [x_1 < x_2 < \n    \u2026 < x_k]\n. And strictly\ndecreasing sequence is a sequence of integers \n    [y_1 > y_2 > \n    \u2026 >\n    y_l]\n. Note that the empty sequence and the sequence consisting of one\nelement can be considered as increasing or decreasing. They were merged into\none sequence \n    a\n. After that sequence \n    a\n got shuffled. For example,\nsome of the possible resulting sequences \n    a\n for an increasing sequence\n\n    [1, 3, 4]\n and a decreasing sequence \n    [10, 4, 2]\n are sequences\n\n    [1, 2, 3, 4, 4, 10]\n or \n    [4, 2, 1, 10, 4, 3]\n. This shuffled sequence\n\n    a\n is given in the input. Your task is to find any two suitable initial\nsequences. One of them should be strictly increasing and the other one \u2014\nstrictly decreasing. Note that the empty sequence and the sequence consisting\nof one element can be considered as increasing or decreasing. If there is a\ncontradiction in the input and it is impossible to split the given sequence\n\n    a\n to increasing and decreasing sequences, print \"NO\". Input The first\nline of the input contains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7\n    10^5\n) \u2014 the number of elements in \n    a\n. The second line of the input\ncontains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 2\n    \n    \u00b7 10^5\n), where \n    a_i\n is the \n    i\n-th element of \n    a\n. Output\nIf there is a contradiction in the input and it is impossible to split the\ngiven sequence \n    a\n to increasing and decreasing sequences, print \"NO\" in\nthe first line. Otherwise print \"YES\" in the first line and any two suitable\nsequences. Note that the empty sequence and the sequence consisting of one\nelement can be considered as increasing or decreasing. In the second line\nprint \n    n_i\n \u2014 the number of elements in the strictly increasing sequence.\n\n    n_i\n can be zero, in this case the increasing sequence is empty. In the\nthird line print \n    n_i\n integers \n    inc_1, inc_2, \n    \u2026, inc_n_i\n in\nthe increasing order of its values (\n    inc_1 < inc_2 < \n    \u2026 < inc_n_i\n)\n\u2014 the strictly increasing sequence itself. You can keep this line empty if\n\n    n_i = 0\n (or just print the empty line). In the fourth line print\n\n    n_d\n \u2014 the number of elements in the strictly decreasing sequence.\n\n    n_d\n can be zero, in this case the decreasing sequence is empty. In the\nfifth line print \n    n_d\n integers \n    dec_1, dec_2, \n    \u2026, dec_n_d\n in\nthe decreasing order of its values (\n    dec_1 > dec_2 > \n    \u2026 > dec_n_d\n)\n\u2014 the strictly decreasing sequence itself. You can keep this line empty if\n\n    n_d = 0\n (or just print the empty line). \n    n_i + n_d\n should be equal\nto \n    n\n and the union of printed sequences should be a permutation of the\ngiven sequence (in case of \"YES\" answer). Examples Input 7 7 2 7 3 3 1 4\nOutput YES 2 3 7 5 7 4 3 2 1 Input 5 4 3 1 5 3 Output YES 1 3 4 5 4 3 1 Input\n5 1 1 2 1 2 Output NO Input 5 0 1 2 3 4 Output YES 0 5 4 3 2 1 0\n\n",
        "cf_contest_id": 1144,
        "cf_index": "C",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n7 2 7 3 3 1 4\r\n",
                "YES 4 1 3 4 7 3 7 3 2\r\n"
            ],
            [
                "5\r\n4 3 1 5 3\r\n",
                "YES 3 1 3 5 2 4 3\r\n"
            ],
            [
                "5\r\n1 1 2 1 2\r\n",
                "NO\r\n"
            ],
            [
                "5\r\n0 1 2 3 4\r\n",
                "YES 3 0 2 4 2 3 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1337\r\n",
                "YES 1 1337 0\r\n"
            ],
            [
                "7\r\n1 2 3 3 3 3 4\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n0\r\n",
                "YES 1 0 0\r\n"
            ]
        ]
    }
]