[
    {
        "name": "Bottom-Tier Reversals",
        "description": "You have a permutation: an array \n    a = [a_1, a_2, \n    \u2026, a_n]\n of\ndistinct integers from \n    1\n to \n    n\n. The length of the permutation\n\n    n\n is odd. You need to sort the permutation in increasing order. In one\nstep, you can choose any prefix of the permutation with an odd length and\nreverse it. Formally, if \n    a = [a_1, a_2, \n    \u2026, a_n]\n, you can choose\nany odd integer \n    p\n between \n    1\n and \n    n\n, inclusive, and set\n\n    a\n to \n    [a_p, a_p-1, \n    \u2026, a_1, a_p+1, a_p+2, \n    \u2026,\n    a_n]\n. Find a way to sort \n    a\n using no more than \n    5n/2\n\nreversals of the above kind, or determine that such a way doesn't exist. The\nnumber of reversals doesn't have to be minimized. Input Each test contains\nmultiple test cases. The first line contains the number of test cases \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 100\n). Description of the test cases follows. The first\nline of each test case contains a single integer \n    n\n (\n    3 \n    \u2264 n \n    \u2264\n    2021\n; \n    n\n is odd) \u2014 the length of the permutation. The second line\ncontains \n    n\n distinct integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264\n    a_i \n    \u2264 n\n) \u2014 the permutation itself. It is guaranteed that the sum of\n\n    n\n over all test cases does not exceed \n    2021\n. Output For each test\ncase, if it's impossible to sort the given permutation in at most\n\n    5n/2\n reversals, print a single integer \n    -1\n. Otherwise,\nprint an integer \n    m\n (\n    0 \n    \u2264 m \n    \u2264\n    5n/2\n), denoting the\nnumber of reversals in your sequence of steps, followed by \n    m\n integers\n\n    p_i\n (\n    1 \n    \u2264 p_i \n    \u2264 n\n; \n    p_i\n is odd), denoting the lengths\nof the prefixes of \n    a\n to be reversed, in chronological order. Note that\n\n    m\n doesn't have to be minimized. If there are multiple answers, print\nany. Example Input 3 3 1 2 3 5 3 4 5 2 1 3 2 1 3 Output 4 3 3 3 3 2 3 5 -1\nNote In the first test case, the permutation is already sorted. Any even\nnumber of reversals of the length \n    3\n prefix doesn't change that fact. In\nthe second test case, after reversing the prefix of length \n    3\n the\npermutation will change to \n    [5, 4, 3, 2, 1]\n, and then after reversing the\nprefix of length \n    5\n the permutation will change to \n    [1, 2, 3, 4, 5]\n.\nIn the third test case, it's impossible to sort the permutation.\n\n",
        "cf_contest_id": 1558,
        "cf_index": "C",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n3\r\n1 2 3\r\n5\r\n3 4 5 2 1\r\n3\r\n2 1 3\r\n",
                "5\r\n3 1 3 3 3\r\n10\r\n3 1 3 3 5 3 1 3 3 3\r\n-1\r\n"
            ]
        ],
        "private_cases": []
    }
]