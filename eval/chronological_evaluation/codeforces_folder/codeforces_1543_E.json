[
    {
        "name": "The Final Pursuit",
        "description": "Finally, you have defeated Razor and now, you are the Most Wanted street\nracer. Sergeant Cross has sent the full police force after you in a deadly\npursuit. Fortunately, you have found a hiding spot but you fear that Cross and\nhis force will eventually find you. To increase your chances of survival, you\nwant to tune and repaint your BMW M3 GTR. The car can be imagined as a\npermuted \n    n\n-dimensional hypercube. A simple \n    n\n-dimensional hypercube\nis an undirected unweighted graph built recursively as follows: Take two\nsimple \n    (n-1)\n-dimensional hypercubes one having vertices numbered from\n\n    0\n to \n    2^n-1-1\n and the other having vertices numbered from\n\n    2^n-1\n to \n    2^n-1\n. A simple \n    0\n-dimensional Hypercube is just\na single vertex. Add an edge between the vertices \n    i\n and \n    i+2^n-1\n\nfor each \n    0\n    \u2264 i < 2^n-1\n. A permuted \n    n\n-dimensional hypercube\nis formed by permuting the vertex numbers of a simple \n    n\n-dimensional\nhypercube in any arbitrary manner. Examples of a simple and permuted\n\n    3\n-dimensional hypercubes are given below: Note that a permuted\n\n    n\n-dimensional hypercube has the following properties: There are exactly\n\n    2^n\n vertices. There are exactly \n    n\n    \u00b7 2^n-1\n edges. Each\nvertex is connected to exactly \n    n\n other vertices. There are no self-loops\nor duplicate edges. Let's denote the permutation used to generate the permuted\n\n    n\n-dimensional hypercube, representing your car, from a simple\n\n    n\n-dimensional hypercube by \n    P\n. Before messing up the\nfunctionalities of the car, you want to find this permutation so that you can\nrestore the car if anything goes wrong. But the job isn't done yet. You have\n\n    n\n different colours numbered from \n    0\n to \n    n-1\n. You want to\ncolour the vertices of this permuted \n    n\n-dimensional hypercube in such a\nway that for each and every vertex \n    u\n satisfying \n    0\n    \u2264 u < 2^n\n\nand for each and every colour \n    c\n satisfying \n    0\n    \u2264 c < n\n, there is\nat least one vertex \n    v\n adjacent to \n    u\n having a colour \n    c\n. In\nother words, from each and every vertex, it must be possible to reach a vertex\nof any colour by just moving to an adjacent vertex. Given the permuted\n\n    n\n-dimensional hypercube, find any valid permutation \n    P\n and\ncolouring. Input The first line of input contains a single integer \n    t\n\n(\n    1\n    \u2264 t\n    \u2264 4096\n) \u2014 the number of test cases. For each test case,\nthe first line contains a single integer \n    n\n (\n    1\n    \u2264 n\n    \u2264 16\n).\nEach of the next \n    n\n    \u00b7 2^n-1\n lines contain two integers \n    u\n and\n\n    v\n (\n    0\n    \u2264 u, v < 2^n\n) denoting that there is an edge between the\nvertices numbered \n    u\n and \n    v\n. It is guaranteed that the graph\ndescribed in the input is a permuted \n    n\n-dimensional hypercube.\nAdditionally, it is guaranteed that the sum of \n    2^n\n over all test cases\ndoes not exceed \n    2^16=65\n     536\n. Output For each test case, print two\nlines. In the first line, output any permutation \n    P\n of length \n    2^n\n\nthat can be used to transform a simple \n    n\n-dimensional hypercube to the\npermuted \n    n\n-dimensional hypercube given in the input. Two permuted\nhypercubes are considered the same if they have the same set of edges. If\nthere are multiple answers, output any of them. In the second line, print the\ncolouring. If there is no way to colour the vertices satisfying the\nconditions, output \n    -1\n. Otherwise, output a single line containing\n\n    2^n\n space separated integers. The \n    i\n-th integer must be the colour\nof the vertex numbered \n    (i-1)\n in the permuted \n    n\n-dimensional\nhypercube. If there are multiple answers, output any of them. Example Input 3\n1 0 1 2 0 1 1 2 2 3 3 0 3 0 1 0 5 0 7 1 2 1 4 2 5 2 6 3 5 3 6 3 7 4 6 4 7\nOutput 0 1 0 0 0 1 3 2 0 0 1 1 5 3 0 7 2 6 1 4 -1 Note The colouring and the\npermuted hypercube for the first test case is shown below: The colouring and\nthe permuted hypercube for the second test case is shown below: The permuted\nhypercube for the third test case is given in the problem statement. However,\nit can be shown that there exists no way to colour that cube satifying all the\nconditions. Note that some other permutations like \n    [0, 5, 7, 3, 1, 2, 4,\n    6]\n and \n    [0, 1, 5, 2, 7, 4, 3, 6]\n will also give the same permuted\nhypercube.\n\n",
        "cf_contest_id": 1543,
        "cf_index": "E",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "constructive algorithms",
            "divide and conquer",
            "graphs",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1\r\n0 1\r\n2\r\n0 1\r\n1 2\r\n2 3\r\n3 0\r\n3\r\n0 1\r\n0 5\r\n0 7\r\n1 2\r\n1 4\r\n2 5\r\n2 6\r\n3 5\r\n3 6\r\n3 7\r\n4 6\r\n4 7\r\n",
                "0 1 \r\n0 0 \r\n0 1 3 2 \r\n0 0 1 1 \r\n0 1 5 2 7 4 3 6 \r\n-1\r\n"
            ]
        ],
        "private_cases": []
    }
]