[
    {
        "name": "Dogeforces",
        "description": "The Dogeforces company has \n    k\n employees. Each employee, except for lower-\nlevel employees, has at least \n    2\n subordinates. Lower-level employees have\nno subordinates. Each employee, except for the head of the company, has\nexactly one direct supervisor. The head of the company is a direct or indirect\nsupervisor of all employees. It is known that in Dogeforces, each supervisor\nreceives a salary strictly more than all his subordinates. The full structure\nof the company is a secret, but you know the number of lower-level employees\nand for each pair of lower-level employees, the salary of their common\nsupervisor is known (if there are several such supervisors, then the\nsupervisor with the minimum salary). You have to restore the structure of the\ncompany. Input The first line contains a single integer \n    n\n (\n    2 \n    \u2264 n\n    \n    \u2264 500\n) \u2014 the number of lower-level employees. This is followed by\n\n    n\n lines, where \n    i\n-th line contains \n    n\n integers \n    a_i,1,\n    a_i,2, \n    \u2026, a_i,n\n (\n    1 \n    \u2264 a_i,j\n    \u2264 5000\n) \u2014 salary of\nthe common supervisor of employees with numbers \n    i\n and \n    j\n. It is\nguaranteed that \n    a_i,j = a_j,i\n. Note that \n    a_i,i\n is equal to\nthe salary of the \n    i\n-th employee. Output In the first line, print a\nsingle integer \n    k\n \u2014 the number of employees in the company. In the second\nline, print \n    k\n integers \n    c_1, c_2, \n    \u2026, c_k\n, where \n    c_i\n is\nthe salary of the employee with the number \n    i\n. In the third line, print a\nsingle integer \n    r\n \u2014 the number of the employee who is the head of the\ncompany. In the following \n    k-1\n lines, print two integers \n    v\n and\n\n    u\n (\n    1 \n    \u2264 v, u \n    \u2264 k\n) \u2014 the number of the employee and his\ndirect supervisor. Note that the lower-level employees have numbers from\n\n    1\n to \n    n\n, and for the rest of the employees, you have to assign\nnumbers from \n    n+1\n to \n    k\n. If there are several correct company\nstructures, you can print any of them. Example Input 3 2 5 7 5 1 7 7 7 4\nOutput 5 2 1 4 7 5 4 1 5 2 5 5 4 3 4 Note One of the possible structures in\nthe first example:\n\n",
        "cf_contest_id": 1494,
        "cf_index": "D",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "dsu",
            "greedy",
            "sortings",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2 5 7\r\n5 1 7\r\n7 7 4\r\n",
                "5\r\n2 1 4 5 7\r\n5\r\n1 4\r\n2 4\r\n3 5\r\n4 5\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n1 27 28 28 12\r\n27 2 28 28 27\r\n28 28 3 26 28\r\n28 28 26 4 28\r\n12 27 28 28 5\r\n",
                "9\r\n1 2 3 4 5 12 26 27 28\r\n9\r\n1 6\r\n2 8\r\n3 7\r\n4 7\r\n5 6\r\n6 8\r\n7 9\r\n8 9\r\n"
            ],
            [
                "6\r\n17 20 20 20 19 20\r\n20 17 18 18 20 18\r\n20 18 14 16 20 16\r\n20 18 16 14 20 16\r\n19 20 20 20 17 20\r\n20 18 16 16 20 15\r\n",
                "10\r\n17 17 14 14 17 15 16 18 19 20\r\n10\r\n1 9\r\n2 8\r\n3 7\r\n4 7\r\n5 9\r\n6 7\r\n7 8\r\n8 10\r\n9 10\r\n"
            ],
            [
                "4\r\n97 99 100 99\r\n99 98 100 99\r\n100 100 99 100\r\n99 99 100 98\r\n",
                "6\r\n97 98 99 98 99 100\r\n6\r\n1 5\r\n2 5\r\n3 6\r\n4 5\r\n5 6\r\n"
            ],
            [
                "6\r\n96 98 100 100 100 100\r\n98 97 100 100 100 100\r\n100 100 98 99 100 99\r\n100 100 99 97 100 99\r\n100 100 100 100 99 100\r\n100 100 99 99 100 98\r\n",
                "9\r\n96 97 98 97 99 98 98 99 100\r\n9\r\n1 7\r\n2 7\r\n3 8\r\n4 8\r\n5 9\r\n6 8\r\n7 9\r\n8 9\r\n"
            ],
            [
                "9\r\n98 100 100 100 100 100 100 99 100\r\n100 96 100 100 99 100 100 100 97\r\n100 100 98 99 100 100 100 100 100\r\n100 100 99 97 100 100 100 100 100\r\n100 99 100 100 98 100 100 100 99\r\n100 100 100 100 100 97 98 100 100\r\n100 100 100 100 100 98 97 100 100\r\n99 100 100 100 100 100 100 98 100\r\n100 97 100 100 99 100 100 100 96\r\n",
                "15\r\n98 96 98 97 98 97 97 98 96 97 98 99 99 99 100\r\n15\r\n1 12\r\n2 10\r\n3 14\r\n4 14\r\n5 13\r\n6 11\r\n7 11\r\n8 12\r\n9 10\r\n10 13\r\n11 15\r\n12 15\r\n13 15\r\n14 15\r\n"
            ],
            [
                "2\r\n99 100\r\n100 99\r\n",
                "3\r\n99 99 100\r\n3\r\n1 3\r\n2 3\r\n"
            ],
            [
                "3\r\n97 100 99\r\n100 99 100\r\n99 100 98\r\n",
                "5\r\n97 99 98 99 100\r\n5\r\n1 4\r\n2 5\r\n3 4\r\n4 5\r\n"
            ]
        ]
    }
]