[
    {
        "name": "A-B Palindrome",
        "description": "You are given a string \n    s\n consisting of the characters '0', '1', and '?'.\nYou need to replace all the characters with '?' in the string \n    s\n by '0'\nor '1' so that the string becomes a palindrome and has exactly \n    a\n\ncharacters '0' and exactly \n    b\n characters '1'. Note that each of the\ncharacters '?' is replaced independently from the others. A string \n    t\n of\nlength \n    n\n is called a palindrome if the equality \n    t[i] = t[n-i+1]\n is\ntrue for all \n    i\n (\n    1 \n    \u2264 i \n    \u2264 n\n). For example, if\n\n    s=\n\"01?????0\", \n    a=4\n and \n    b=4\n, then you can replace the\ncharacters '?' in the following ways: \"01011010\"; \"01100110\". For the given\nstring \n    s\n and the numbers \n    a\n and \n    b\n, replace all the characters\nwith '?' in the string \n    s\n by '0' or '1' so that the string becomes a\npalindrome and has exactly \n    a\n characters '0' and exactly \n    b\n\ncharacters '1'. Input The first line contains a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 10^4\n). Then \n    t\n test cases follow. The first line of each\ntest case contains two integers \n    a\n and \n    b\n (\n    0 \n    \u2264 a, b \n    \u2264 2\n    \n    \u00b7 10^5\n, \n    a + b \n    \u2265 1\n). The second line of each test case\ncontains the string \n    s\n of length \n    a+b\n, consisting of the characters\n'0', '1', and '?'. It is guaranteed that the sum of the string lengths of\n\n    s\n over all test cases does not exceed \n    2 \n    \u00b7 10^5\n. Output For\neach test case, output: \"-1\", if you can't replace all the characters '?' in\nthe string \n    s\n by '0' or '1' so that the string becomes a palindrome and\nthat it contains exactly \n    a\n characters '0' and exactly \n    b\n characters\n'1'; the string that is obtained as a result of the replacement, otherwise. If\nthere are several suitable ways to replace characters, you can output any.\nExample Input 9 4 4 01?????0 3 3 ?????? 1 0 ? 2 2 0101 2 2 01?0 0 1 0 0 3 1?1\n2 2 ?00? 4 3 ??010?0 Output 01011010 -1 0 -1 0110 -1 111 1001 0101010\n\n",
        "cf_contest_id": 1512,
        "cf_index": "C",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "9\r\n4 4\r\n01?????0\r\n3 3\r\n??????\r\n1 0\r\n?\r\n2 2\r\n0101\r\n2 2\r\n01?0\r\n0 1\r\n0\r\n0 3\r\n1?1\r\n2 2\r\n?00?\r\n4 3\r\n??010?0\r\n",
                "01011010\r\n-1\r\n0\r\n-1\r\n0110\r\n-1\r\n111\r\n1001\r\n0101010\r\n"
            ]
        ],
        "private_cases": []
    }
]