[
    {
        "name": "Little Elephant and Shifts",
        "description": "The Little Elephant has two permutations a and b of length n, consisting of\nnumbers from 1 to n, inclusive. Let's denote the i-th (1 \u2264 i \u2264 n) element of\nthe permutation a as ai, the j-th (1 \u2264 j \u2264 n) element of the permutation b \u2014\nas bj. The distance between permutations a and b is the minimum absolute value\nof the difference between the positions of the occurrences of some number in a\nand in b. More formally, it's such minimum |i - j|, that ai = bj. A cyclic\nshift number i (1 \u2264 i \u2264 n) of permutation b consisting from n elements is a\npermutation bibi + 1... bnb1b2... bi - 1. Overall a permutation has n cyclic\nshifts. The Little Elephant wonders, for all cyclic shifts of permutation b,\nwhat is the distance between the cyclic shift and permutation a? Input The\nfirst line contains a single integer n (1 \u2264 n \u2264 10^5) \u2014 the size of the\npermutations. The second line contains permutation a as n distinct numbers\nfrom 1 to n, inclusive. The numbers are separated with single spaces. The\nthird line contains permutation b in the same format. Output In n lines print\nn integers \u2014 the answers for cyclic shifts. Print the answers to the shifts in\nthe order of the shifts' numeration in permutation b, that is, first for the\n1-st cyclic shift, then for the 2-nd, and so on. Examples Input 2 1 2 2 1\nOutput 1 0 Input 4 2 1 3 4 3 4 2 1 Output 2 1 0 1\n\n",
        "cf_contest_id": 220,
        "cf_index": "C",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n1 2\r\n2 1\r\n",
                "1\r\n0\r\n"
            ],
            [
                "4\r\n2 1 3 4\r\n3 4 2 1\r\n",
                "2\r\n1\r\n0\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "7\r\n1 2 3 4 5 6 7\r\n7 6 5 4 3 2 1\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "10\r\n1 2 3 4 5 6 7 8 9 10\r\n1 2 3 4 5 6 7 8 9 10\r\n",
                "0\r\n1\r\n2\r\n3\r\n4\r\n5\r\n4\r\n3\r\n2\r\n1\r\n"
            ],
            [
                "10\r\n5 1 6 2 8 3 4 10 9 7\r\n3 1 10 6 8 5 2 7 9 4\r\n",
                "0\r\n0\r\n1\r\n0\r\n1\r\n0\r\n1\r\n2\r\n0\r\n1\r\n"
            ],
            [
                "47\r\n28 47 4 13 15 17 29 41 3 37 44 5 21 25 36 32 19 8 46 22 16 45 34 38 31 9 1 30 14 20 24 42 18 2 23 39 7 27 43 26 40 11 6 33 35 10 12\r\n4 19 29 9 33 35 13 28 1 25 31 30 20 7 11 10 2 16 27 38 23 41 37 5 8 45 44 46 39 21 18 42 14 22 32 15 43 3 36 6 40 34 26 24 17 12 47\r\n",
                "0\r\n1\r\n1\r\n0\r\n0\r\n1\r\n1\r\n0\r\n0\r\n0\r\n1\r\n1\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n1\r\n0\r\n0\r\n1\r\n2\r\n1\r\n0\r\n0\r\n1\r\n1\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n1\r\n2\r\n3\r\n2\r\n1\r\n0\r\n0\r\n1\r\n1\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "74\r\n52 59 25 35 69 1 54 20 26 12 53 44 24 51 66 16 57 15 7 10 60 31 70 42 61 55 41 33 67 46 28 17 32 13 9 39 43 36 6 38 48 3 29 45 56 64 65 34 21 4 73 74 27 50 5 2 22 68 49 8 71 19 14 40 62 37 72 11 30 58 18 47 63 23\r\n56 3 68 1 9 70 36 58 52 15 27 57 69 45 62 39 21 64 16 20 53 26 35 59 18 63 38 49 61 67 12 8 41 40 30 32 73 10 6 13 72 50 66 51 43 60 28 34 47 24 37 17 11 54 14 46 65 74 29 42 44 33 22 48 2 23 4 19 55 25 71 5 31 7\r\n",
                "0\r\n0\r\n1\r\n0\r\n0\r\n1\r\n0\r\n1\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n1\r\n1\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n1\r\n0\r\n1\r\n0\r\n1\r\n0\r\n1\r\n0\r\n0\r\n1\r\n1\r\n0\r\n1\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n1\r\n0\r\n1\r\n1\r\n0\r\n0\r\n1\r\n0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n1\r\n2\r\n1\r\n0\r\n0\r\n1\r\n0\r\n1\r\n1\r\n0\r\n1\r\n"
            ],
            [
                "1\r\n1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "2\r\n1 2\r\n1 2\r\n",
                "0\r\n1\r\n"
            ],
            [
                "3\r\n1 2 3\r\n1 2 3\r\n",
                "0\r\n1\r\n1\r\n"
            ]
        ]
    }
]