[
    {
        "name": "Distance Tree (easy version)",
        "description": "This version of the problem differs from the next one only in the constraint\non \n    n\n. A tree is a connected undirected graph without cycles. A weighted\ntree has a weight assigned to each edge. The distance between two vertices is\nthe minimum sum of weights on the path connecting them. You are given a\nweighted tree with \n    n\n vertices, each edge has a weight of \n    1\n. Denote\n\n    d(v)\n as the distance between vertex \n    1\n and vertex \n    v\n. Let\n\n    f(x)\n be the minimum possible value of \n    max\n    _1 \n    \u2264 v\n    \n    \u2264 n\n     d(v)\n if you can temporarily add an edge with weight \n    x\n\nbetween any two vertices \n    a\n and \n    b\n \n    (1 \n    \u2264 a, b \n    \u2264 n)\n.\nNote that after this operation, the graph is no longer a tree. For each\ninteger \n    x\n from \n    1\n to \n    n\n, find \n    f(x)\n. Input The first line\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of\ntest cases. The first line of each test case contains a single integer \n    n\n\n(\n    2 \n    \u2264 n \n    \u2264 3000\n). Each of the next \n    n\u22121\n lines contains two\nintegers \n    u\n and \n    v\n (\n    1 \n    \u2264 u,v \n    \u2264 n\n) indicating that there\nis an edge between vertices \n    u\n and \n    v\n. It is guaranteed that the\ngiven edges form a tree. It is guaranteed that the sum of \n    n\n over all\ntest cases doesn't exceed \n    3000\n. Output For each test case, print \n    n\n\nintegers in a single line, \n    x\n-th of which is equal to \n    f(x)\n for all\n\n    x\n from \n    1\n to \n    n\n. Example Input 3 4 1 2 2 3 1 4 2 1 2 7 1 2 1 3\n3 4 3 5 3 6 5 7 Output 1 2 2 2 1 1 2 2 3 3 3 3 3 Note In the first testcase:\nFor \n    x = 1\n, we can an edge between vertices \n    1\n and \n    3\n, then\n\n    d(1) = 0\n and \n    d(2) = d(3) = d(4) = 1\n, so \n    f(1) = 1\n. For \n    x\n    \n    \u2265 2\n, no matter which edge we add, \n    d(1) = 0\n, \n    d(2) = d(4) = 1\n\nand \n    d(3) = 2\n, so \n    f(x) = 2\n.\n\n",
        "cf_contest_id": 1632,
        "cf_index": "E1",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "graphs",
            "shortest paths",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n4\r\n1 2\r\n2 3\r\n1 4\r\n2\r\n1 2\r\n7\r\n1 2\r\n1 3\r\n3 4\r\n3 5\r\n3 6\r\n5 7\r\n",
                "1 2 2 2 \r\n1 1 \r\n2 2 3 3 3 3 3 \r\n"
            ]
        ],
        "private_cases": []
    }
]