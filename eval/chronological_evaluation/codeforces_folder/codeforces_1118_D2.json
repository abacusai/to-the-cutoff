[
    {
        "name": "Coffee and Coursework (Hard Version)",
        "description": "The only difference between easy and hard versions is the constraints.\nPolycarp has to write a coursework. The coursework consists of \n    m\n pages.\nPolycarp also has \n    n\n cups of coffee. The coffee in the \n    i\n-th cup\nPolycarp has \n    a_i\n caffeine in it. Polycarp can drink some cups of coffee\n(each one no more than once). He can drink cups in any order. Polycarp drinks\neach cup instantly and completely (i.e. he cannot split any cup into several\ndays). Surely, courseworks are not being written in a single day (in a perfect\nworld of Berland, at least). Let's consider some day of Polycarp's work.\nConsider Polycarp drinks \n    k\n cups of coffee during this day and caffeine\ndosages of cups Polycarp drink during this day are \n    a_i_1, a_i_2,\n    \n    \u2026, a_i_k\n. Then the first cup he drinks gives him energy to write\n\n    a_i_1\n pages of coursework, the second cup gives him energy to write\n\n    max(0, a_i_2 - 1)\n pages, the third cup gives him energy to write\n\n    max(0, a_i_3 - 2)\n pages, ..., the \n    k\n-th cup gives him energy to\nwrite \n    max(0, a_i_k - k + 1)\n pages. If Polycarp doesn't drink coffee\nduring some day, he cannot write coursework at all that day. Polycarp has to\nfinish his coursework as soon as possible (spend the minimum number of days to\ndo it). Your task is to find out this number of days or say that it is\nimpossible. Input The first line of the input contains two integers \n    n\n\nand \n    m\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n, \n    1 \n    \u2264 m \n    \u2264 10^9\n)\n\u2014 the number of cups of coffee and the number of pages in the coursework. The\nsecond line of the input contains \n    n\n integers \n    a_1, a_2, \n    \u2026,\n    a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n), where \n    a_i\n is the caffeine dosage\nof coffee in the \n    i\n-th cup. Output If it is impossible to write the\ncoursework, print -1. Otherwise print the minimum number of days Polycarp\nneeds to do it. Examples Input 5 8 2 3 1 1 2 Output 4 Input 7 10 1 3 4 2 1 4 2\nOutput 2 Input 5 15 5 5 5 5 5 Output 1 Input 5 16 5 5 5 5 5 Output 2 Input 5\n26 5 5 5 5 5 Output -1 Note In the first example Polycarp can drink fourth cup\nduring first day (and write \n    1\n page), first and second cups during second\nday (and write \n    2 + (3 - 1) = 4\n pages), fifth cup during the third day\n(and write \n    2\n pages) and third cup during the fourth day (and write\n\n    1\n page) so the answer is \n    4\n. It is obvious that there is no way to\nwrite the coursework in three or less days. In the second example Polycarp can\ndrink third, fourth and second cups during first day (and write \n    4 + (2 - 1)\n    + (3 - 2) = 6\n pages) and sixth cup during second day (and write \n    4\n\npages) so the answer is \n    2\n. It is obvious that Polycarp cannot write the\nwhole coursework in one day in this test. In the third example Polycarp can\ndrink all cups of coffee during first day and write \n    5 + (5 - 1) + (5 - 2) +\n    (5 - 3) + (5 - 4) = 15\n pages of coursework. In the fourth example Polycarp\ncannot drink all cups during first day and should drink one of them during the\nsecond day. So during first day he will write \n    5 + (5 - 1) + (5 - 2) + (5 -\n    3) = 14\n pages of coursework and during second day he will write \n    5\n\npages of coursework. This is enough to complete it. In the fifth example\nPolycarp cannot write the whole coursework at all, even if he will drink one\ncup of coffee during each day, so the answer is -1.\n\n",
        "cf_contest_id": 1118,
        "cf_index": "D2",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "greedy"
        ],
        "time_limit_seconds": 2.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 8\r\n2 3 1 1 2\r\n",
                "4\r\n"
            ],
            [
                "7 10\r\n1 3 4 2 1 4 2\r\n",
                "2\r\n"
            ],
            [
                "5 15\r\n5 5 5 5 5\r\n",
                "1\r\n"
            ],
            [
                "5 16\r\n5 5 5 5 5\r\n",
                "2\r\n"
            ],
            [
                "5 26\r\n5 5 5 5 5\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "100 10000\r\n93 99 95 105 94 108 104 104 102 112 106 82 114 104 88 107 105 104 93 96 103 109 105 82 107 95 83 93 120 115 96 104 96 86 87 102 103 108 97 84 108 117 109 107 80 87 102 107 88 97 96 101 101 114 106 103 99 101 105 102 85 94 98 101 115 100 91 92 108 105 94 110 91 89 119 119 93 103 101 84 87 81 105 112 109 102 101 112 98 96 98 112 96 90 101 104 100 98 106 80\r\n",
                "100\r\n"
            ],
            [
                "100 10000\r\n110 92 117 110 105 91 118 102 124 130 101 100 90 85 106 85 98 112 95 112 90 108 105 93 101 103 94 99 94 109 95 90 124 98 121 107 103 107 100 86 111 112 92 115 94 92 97 93 92 97 105 87 93 103 110 96 110 91 94 95 98 100 91 102 107 102 80 119 95 85 90 112 111 101 104 92 103 93 108 93 108 80 81 97 89 93 103 108 93 105 88 100 98 93 89 99 107 94 83 116\r\n",
                "-1\r\n"
            ],
            [
                "100 133\r\n1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 1 1 2 1 1 1 2 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 3 1 1 2 1 3 1 1 1 2 1 3 1 1 1 2 2 1 1 1 1 1 1 1 3 1 2 1 1 2\r\n",
                "-1\r\n"
            ],
            [
                "100 550\r\n12 7 8 16 13 6 12 6 10 12 13 10 6 12 9 8 5 13 7 13 5 14 10 13 9 6 14 14 6 11 13 13 8 3 8 13 12 8 13 8 14 10 15 8 12 8 10 13 13 13 7 8 12 9 7 10 16 10 10 4 9 9 11 8 8 13 8 15 11 8 9 6 6 16 12 11 9 8 10 9 12 8 11 9 8 10 7 13 6 13 10 9 15 9 3 11 5 17 7 13\r\n",
                "9\r\n"
            ],
            [
                "42 145\r\n3801844 1779505 5487679 19828649 19107323 10922314 17168178 8389255 973671 12385374 9353205 5542558 22500641 791920 23680437 160300 10624722 10237467 14391254 23160199 14891817 13602686 15568227 15885723 9769984 3166827 15501304 15799946 1617286 1636099 14834081 1198717 10150905 23511628 20566752 13713947 15460642 9086168 17992657 15659749 7449182 20774763\r\n",
                "1\r\n"
            ],
            [
                "100 112\r\n1 1 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1\r\n",
                "-1\r\n"
            ],
            [
                "100 10000\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "-1\r\n"
            ],
            [
                "1 5\r\n6\r\n",
                "1\r\n"
            ],
            [
                "100 1960\r\n18 11 82 57 57 53 81 33 89 3 78 61 82 12 23 55 97 3 91 25 38 60 23 65 67 24 57 52 7 61 95 16 60 95 100 42 41 98 72 61 5 77 36 65 58 53 19 100 99 84 55 13 10 10 92 84 58 91 39 39 70 79 73 92 21 1 58 100 56 96 7 94 56 57 56 46 93 3 62 19 51 90 22 90 69 85 92 44 9 4 94 91 85 70 98 17 9 39 3 40\r\n",
                "1\r\n"
            ]
        ]
    }
]