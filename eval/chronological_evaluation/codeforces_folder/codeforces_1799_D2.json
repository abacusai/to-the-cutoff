[
    {
        "name": "Hot Start Up (hard version)",
        "description": "This is a hard version of the problem. The constraints of \n    t\n, \n    n\n,\n\n    k\n are the only difference between versions. You have a device with two\nCPUs. You also have \n    k\n programs, numbered \n    1\n through \n    k\n, that\nyou can run on the CPUs. The \n    i\n-th program (\n    1 \n    \u2264 i \n    \u2264 k\n)\ntakes \n    cold_i\n seconds to run on some CPU. However, if the last program we\nran on this CPU was also program \n    i\n, it only takes \n    hot_i\n seconds\n(\n    hot_i \n    \u2264 cold_i\n). Note that this only applies if we run program\n\n    i\n multiple times consecutively \u2014 if we run program \n    i\n, then some\ndifferent program, then program \n    i\n again, it will take \n    cold_i\n\nseconds the second time. You are given a sequence \n    a_1, a_2, \n    \u2026,\n    a_n\n of length \n    n\n, consisting of integers from \n    1\n to \n    k\n. You\nneed to use your device to run programs \n    a_1, a_2, \n    \u2026, a_n\n in\nsequence. For all \n    2 \n    \u2264 i \n    \u2264 n\n, you cannot start running program\n\n    a_i\n until program \n    a_i - 1\n has completed. Find the minimum amount\nof time needed to run all programs \n    a_1, a_2, \n    \u2026, a_n\n in sequence.\nInput Input consists of multiple test cases. The first line contains a single\ninteger \n    t\n, the number of test cases (\n    1 \n    \u2264 t \n    \u2264 10^5\n). The\nfirst line of each test case contains \n    n\n and \n    k\n (\n    1 \n    \u2264 n, k\n    \n    \u2264 3 \n    \u00b7 10^5\n). The second line of each test case contains \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 k\n). The third\nline of each test case contains \n    k\n integers \n    cold_1, cold_2, \n    \u2026,\n    cold_k\n (\n    1 \n    \u2264 cold_i \n    \u2264 10^9\n). The fourth line of each test case\ncontains \n    k\n integers \n    hot_1, hot_2, \n    \u2026, hot_k\n (\n    1 \n    \u2264\n    hot_i \n    \u2264 cold_i\n). It is guaranteed the sum of \n    n\n and the sum of\n\n    k\n over all test cases do not exceed \n    3 \n    \u00b7 10^5\n. Output For\neach test case, print the minimum time needed to run all programs in the given\norder. Example Input 9 3 2 1 2 2 3 2 2 1 4 2 1 2 1 2 5 3 2 1 4 3 1 2 3 1 100\n100 100 1 1 1 5 2 2 1 2 1 1 65 45 54 7 5 3 1 3 2 1 2 2 2 2 1 1 1 5 1 1 1 1 1 1\n1000000000 999999999 5 6 1 6 1 4 1 3 6 4 1 4 5 1 1 1 1 4 1 1 3 3 4 5 6 1 2 3 8\n3 3 3 3 1 2 3 2 1 10 10 8 10 10 5 Output 6 11 301 225 8 4999999996 11 6 63\nNote In the first test case, we can do the following: Run program \n    a_1 =\n    1\n on CPU \n    1\n. It takes \n    cold_1 = 3\n seconds to run. Run program\n\n    a_2 = 2\n on CPU \n    2\n. It takes \n    cold_2 = 2\n seconds to run. Run\nprogram \n    a_3 = 2\n on CPU \n    2\n. The last program run on this CPU was\nalso program \n    2\n, so it takes \n    hot_2 = 1\n second to run. In total, we\nneed \n    3 + 2 + 1 = 6\n seconds to run them all. We can show this is optimal.\nIn the second test case, we can use do the following: Run program \n    a_1 =\n    1\n on CPU \n    1\n. It takes \n    cold_1 = 5\n seconds to run. Run program\n\n    a_2 = 2\n on CPU \n    2\n. It takes \n    cold_2 = 3\n seconds to run. Run\nprogram \n    a_3 = 1\n on CPU \n    1\n. The last program run on this CPU was\nalso program \n    1\n, so it takes \n    hot_1 = 2\n seconds to run. Run program\n\n    a_4 = 2\n on CPU \n    2\n. The last program run on this CPU was also\nprogram \n    2\n, so it takes \n    hot_2 = 1\n second to run. In total, we need\n\n    5 + 3 + 2 + 1 = 11\n seconds. We can show this is optimal.\n\n",
        "cf_contest_id": 1799,
        "cf_index": "D2",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "9\r\n3 2\r\n1 2 2\r\n3 2\r\n2 1\r\n4 2\r\n1 2 1 2\r\n5 3\r\n2 1\r\n4 3\r\n1 2 3 1\r\n100 100 100\r\n1 1 1\r\n5 2\r\n2 1 2 1 1\r\n65 45\r\n54 7\r\n5 3\r\n1 3 2 1 2\r\n2 2 2\r\n1 1 1\r\n5 1\r\n1 1 1 1 1\r\n1000000000\r\n999999999\r\n5 6\r\n1 6 1 4 1\r\n3 6 4 1 4 5\r\n1 1 1 1 4 1\r\n1 3\r\n3\r\n4 5 6\r\n1 2 3\r\n8 3\r\n3 3 3 1 2 3 2 1\r\n10 10 8\r\n10 10 5\r\n",
                "6\r\n11\r\n301\r\n225\r\n8\r\n4999999996\r\n11\r\n6\r\n63\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n6 3\r\n1 2 3 1 2 3\r\n472 637 896\r\n327 383 423\r\n5 3\r\n1 2 1 3 2\r\n410 700 981\r\n149 44 909\r\n",
                "3392\r\n2284\r\n"
            ]
        ]
    }
]