[
    {
        "name": "Computer Game",
        "description": "Monocarp is playing a computer game. Now he wants to complete the first level\nof this game. A level is a rectangular grid of \n    2\n rows and \n    n\n\ncolumns. Monocarp controls a character, which starts in cell \n    (1, 1)\n \u2014 at\nthe intersection of the \n    1\n-st row and the \n    1\n-st column. Monocarp's\ncharacter can move from one cell to another in one step if the cells are\nadjacent by side and/or corner. Formally, it is possible to move from cell\n\n    (x_1, y_1)\n to cell \n    (x_2, y_2)\n in one step if \n    |x_1 - x_2| \n    \u2264\n    1\n and \n    |y_1 - y_2| \n    \u2264 1\n. Obviously, it is prohibited to go outside\nthe grid. There are traps in some cells. If Monocarp's character finds himself\nin such a cell, he dies, and the game ends. To complete a level, Monocarp's\ncharacter should reach cell \n    (2, n)\n \u2014 at the intersection of row \n    2\n\nand column \n    n\n. Help Monocarp determine if it is possible to complete the\nlevel. Input The first line contains a single integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 100\n) \u2014 the number of test cases. Then the test cases follow. Each\ntest case consists of three lines. The first line contains a single integer\n\n    n\n (\n    3 \n    \u2264 n \n    \u2264 100\n) \u2014 the number of columns. The next two\nlines describe the level. The \n    i\n-th of these lines describes the\n\n    i\n-th line of the level \u2014 the line consists of the characters '0' and\n'1'. The character '0' corresponds to a safe cell, the character '1'\ncorresponds to a trap cell. Additional constraint on the input: cells \n    (1,\n    1)\n and \n    (2, n)\n are safe. Output For each test case, output YES if it\nis possible to complete the level, and NO otherwise. Example Input 4 3 000 000\n4 0011 1100 4 0111 1110 6 010101 101010 Output YES YES NO YES Note Consider\nthe example from the statement. In the first test case, one of the possible\npaths is \n    (1, 1) \n    \u2192 (2, 2) \n    \u2192 (2, 3)\n. In the second\ntest case, one of the possible paths is \n    (1, 1) \n    \u2192 (1, 2)\n    \n    \u2192 (2, 3) \n    \u2192 (2, 4)\n. In the fourth test case, one of\nthe possible paths is \n    (1, 1) \n    \u2192 (2, 2) \n    \u2192 (1, 3)\n    \n    \u2192 (2, 4) \n    \u2192 (1, 5) \n    \u2192 (2, 6)\n.\n\n",
        "cf_contest_id": 1598,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dfs and similar",
            "dp",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3\r\n000\r\n000\r\n4\r\n0011\r\n1100\r\n4\r\n0111\r\n1110\r\n6\r\n010101\r\n101010\r\n",
                "YES\r\nYES\r\nNO\r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n60\r\n000000000000000000000000000000000000000000000000000000000010\r\n000000000000000000000000000000000000000000000000000000000010\r\n",
                "NO\r\n"
            ],
            [
                "1\r\n9\r\n000000010\r\n000000000\r\n",
                "YES\r\n"
            ],
            [
                "1\r\n9\r\n000000010\r\n000100000\r\n",
                "YES\r\n"
            ]
        ]
    }
]