[
    {
        "name": "Fuzzy Search",
        "description": "Leonid works for a small and promising start-up that works on decoding the\nhuman genome. His duties include solving complex problems of finding certain\npatterns in long strings consisting of letters 'A', 'T', 'G' and 'C'. Let's\nconsider the following scenario. There is a fragment of a human DNA chain,\nrecorded as a string S. To analyze the fragment, you need to find all\noccurrences of string T in a string S. However, the matter is complicated by\nthe fact that the original chain fragment could contain minor mutations,\nwhich, however, complicate the task of finding a fragment. Leonid proposed the\nfollowing approach to solve this problem. Let's write down integer k \u2265 0 \u2014 the\nerror threshold. We will say that string T occurs in string S on position i (1\n\u2264 i \u2264 |S| - |T| + 1), if after putting string T along with this position, each\ncharacter of string T corresponds to the some character of the same value in\nstring S at the distance of at most k. More formally, for any j (1 \u2264 j \u2264 |T|)\nthere must exist such p (1 \u2264 p \u2264 |S|), that |(i + j - 1) - p| \u2264 k and S[p] =\nT[j]. For example, corresponding to the given definition, string \"ACAT\" occurs\nin string \"AGCAATTCAT\" in positions 2, 3 and 6. Note that at k = 0 the given\ndefinition transforms to a simple definition of the occurrence of a string in\na string. Help Leonid by calculating in how many positions the given string T\noccurs in the given string S with the given error threshold. Input The first\nline contains three integers |S|, |T|, k (1 \u2264 |T| \u2264 |S| \u2264 200 000, 0 \u2264 k \u2264 200\n000) \u2014 the lengths of strings S and T and the error threshold. The second line\ncontains string S. The third line contains string T. Both strings consist only\nof uppercase letters 'A', 'T', 'G' and 'C'. Output Print a single number \u2014 the\nnumber of occurrences of T in S with the error threshold k by the given\ndefinition. Examples Input 10 4 1 AGCAATTCAT ACAT Output 3 Note If you happen\nto know about the structure of the human genome a little more than the author\nof the problem, and you are not impressed with Leonid's original approach, do\nnot take everything described above seriously.\n\n",
        "cf_contest_id": 528,
        "cf_index": "D",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "fft"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10 4 1\r\nAGCAATTCAT\r\nACAT\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1 0\r\nA\r\nA\r\n",
                "1\r\n"
            ],
            [
                "1 1 0\r\nA\r\nT\r\n",
                "0\r\n"
            ],
            [
                "1 1 1\r\nA\r\nT\r\n",
                "0\r\n"
            ],
            [
                "5 3 0\r\nATATA\r\nATA\r\n",
                "2\r\n"
            ],
            [
                "5 3 1\r\nATATA\r\nATA\r\n",
                "3\r\n"
            ],
            [
                "7 1 2\r\nATGCGTA\r\nA\r\n",
                "6\r\n"
            ],
            [
                "7 1 3\r\nATGCGTA\r\nA\r\n",
                "7\r\n"
            ],
            [
                "4 4 0\r\nATGC\r\nGCTA\r\n",
                "0\r\n"
            ],
            [
                "4 4 1\r\nATGC\r\nGCTA\r\n",
                "0\r\n"
            ],
            [
                "4 4 2\r\nATGC\r\nGCTA\r\n",
                "0\r\n"
            ]
        ]
    }
]