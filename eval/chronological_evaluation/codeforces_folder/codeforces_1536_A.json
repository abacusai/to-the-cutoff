[
    {
        "name": "Omkar and Bad Story",
        "description": "Omkar has received a message from Anton saying \"Your story for problem A is\nconfusing. Just make a formal statement.\" Because of this, Omkar gives you an\narray \n    a = [a_1, a_2, \n    \u2026, a_n]\n of \n    n\n distinct integers. An\narray \n    b = [b_1, b_2, \n    \u2026, b_k]\n is called nice if for any two\ndistinct elements \n    b_i, b_j\n of \n    b\n, \n    |b_i-b_j|\n appears in\n\n    b\n at least once. In addition, all elements in \n    b\n must be distinct.\nCan you add several (maybe, \n    0\n) integers to \n    a\n to create a nice\narray \n    b\n of size at most \n    300\n? If \n    a\n is already nice, you don't\nhave to add any elements. For example, array \n    [3, 6, 9]\n is nice, as\n\n    |6-3|=|9-6| = 3\n, which appears in the array, and \n    |9-3| = 6\n, which\nappears in the array, while array \n    [4, 2, 0, 6, 9]\n is not nice, as\n\n    |9-4| = 5\n is not present in the array. For integers \n    x\n and \n    y\n,\n\n    |x-y| = x-y\n if \n    x > y\n and \n    |x-y| = y-x\n otherwise. Input Each\ntest contains multiple test cases. The first line contains \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 50\n), the number of test cases. Description of the test\ncases follows. The first line of each test case contains a single integer\n\n    n\n (\n    2 \n    \u2264 n \n    \u2264 100\n) \u2014 the length of the array \n    a\n. The\nsecond line of each test case contains \n    n\n distinct integers \n    a_1, a_2,\n    \n    \u22ef, a_n\n (\n    -100 \n    \u2264 a_i \n    \u2264 100\n) \u2014 the elements of the\narray \n    a\n. Output For each test case, output one line containing YES if\nOmkar can create a nice array \n    b\n by adding elements to \n    a\n and NO\notherwise. The case of each letter does not matter, so yEs and nO will also be\naccepted. If the first line is YES, output a second line containing a single\ninteger \n    k\n (\n    n \n    \u2264 k \n    \u2264 300\n). Then output one line containing\n\n    k\n distinct integers \n    b_1, b_2, \n    \u22ef, b_k\n (\n    -10^9 \n    \u2264 b_i\n    \n    \u2264 10^9\n), the elements of the nice array \n    b\n. \n    b_1, b_2,\n    \n    \u22ef, b_k\n can be in any order. For each \n    a_i\n in \n    a\n, \n    a_i\n\nmust appear at least once in \n    b\n. It can be proved that if Omkar can\ncreate such an array \n    b\n, then he can also do so in a way that satisfies\nthe above constraints. If multiple solutions exist, you can print any. Example\nInput 4 3 3 0 9 2 3 4 5 -7 3 13 -2 8 4 4 8 12 6 Output yes 4 6 0 3 9 yEs 5 5 3\n1 2 4 NO Yes 6 8 12 6 2 4 10 Note For the first case, you can add integers to\n\n    a\n to receive the array \n    b = [6, 0, 3, 9]\n. Note that \n    |6-3| =\n    |9-6| = |3-0| = 3\n and \n    3\n is in \n    b\n, \n    |6-0| = |9-3| = 6\n and\n\n    6\n is in \n    b\n, and \n    |9-0| = 9\n is in \n    b\n, so \n    b\n is nice.\nFor the second case, you can add integers to \n    a\n to receive the array \n    b\n    = [5, 3, 1, 2, 4]\n. We have that \n    |2-1| = |3-2| = |4-3| = |5-4| = 1\n is\nin \n    b\n, \n    |3-1| = |4-2| = |5-3| = 2\n is in \n    b\n, \n    |4-1| = |5-2| =\n    3\n is in \n    b\n, and \n    |5-1| = 4\n is in \n    b\n, so \n    b\n is nice. For\nthe fourth case, you can add integers to \n    a\n to receive the array \n    b =\n    [8, 12, 6, 2, 4, 10]\n. We have that \n    |4-2| = |6-4| = |8-6| = |10-8| =\n    |12-10| = 2\n is in \n    b\n, \n    |6-2| = |8-4| = |10-6| = |12-8| = 4\n is in\n\n    b\n, \n    |8-2| = |10-4| = |12-6| = 6\n is in \n    b\n, \n    |10-2| = |12-4| =\n    8\n is in \n    b\n, and \n    |12-2| = 10\n is in \n    b\n, so \n    b\n is nice.\nIt can be proven that for all other test cases it is impossible to create a\nnice array \n    b\n.\n\n",
        "cf_contest_id": 1536,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3\r\n3 0 9\r\n2\r\n3 4\r\n5\r\n-7 3 13 -2 8\r\n4\r\n4 8 12 6\r\n",
                "yES\r\n101\r\n 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\r\nyES\r\n101\r\n 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 ..."
            ]
        ],
        "private_cases": [
            [
                "6\r\n7\r\n-28 -70 -14 -56 98 70 56\r\n3\r\n28 56 98\r\n10\r\n56 -56 98 14 28 0 70 -42 -84 42\r\n4\r\n-42 -84 -70 -14\r\n7\r\n14 -56 42 28 -84 -42 -14\r\n2\r\n-70 84\r\n",
                "nO\r\nyES\r\n101\r\n 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\r\nnO\r\nnO\r\nnO\r\nnO\r\n"
            ],
            [
                "5\r\n4\r\n100 -100 0 50\r\n3\r\n50 0 -50\r\n5\r\n-50 100 -100 0 50\r\n5\r\n100 -100 0 50 -50\r\n4\r\n100 -100 0 50\r\n",
                "nO\r\nnO\r\nnO\r\nnO\r\nnO\r\n"
            ],
            [
                "50\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n2\r\n-1 0\r\n",
                "nO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\n"
            ],
            [
                "50\r\n2\r\n-1 0\r\n2\r\n-1 1\r\n2\r\n-1 2\r\n2\r\n-1 3\r\n2\r\n-1 4\r\n2\r\n-1 5\r\n2\r\n-1 6\r\n2\r\n-1 7\r\n2\r\n-1 8\r\n2\r\n-1 9\r\n2\r\n-1 10\r\n2\r\n-1 11\r\n2\r\n-1 12\r\n2\r\n-1 13\r\n2\r\n-1 14\r\n2\r\n-1 15\r\n2\r\n-1 16\r\n2\r\n-1 17\r\n2\r\n-1 18\r\n2\r\n-1 19\r\n2\r\n-1 20\r\n2\r\n-1 21\r\n2\r\n-1 22\r\n2\r\n-1 23\r\n2\r\n-1 24\r\n2\r\n-1 25\r\n2\r\n-1 26\r\n2\r\n-1 27\r\n2\r\n-1 28\r\n2\r\n-1 29\r\n2\r\n-1 30\r\n2\r\n-1 31\r\n2\r\n-1 32\r\n2\r\n-1 33\r\n2\r\n-1 34\r\n2\r\n-1 35\r\n2\r\n-1 36\r\n2\r\n-1 37\r\n2\r\n-1 38\r\n2\r\n-1 39\r\n2\r\n-1 40\r\n2\r\n-1 41\r\n2\r\n-1 42\r\n2\r\n-1 43\r\n2\r\n-1 44\r\n2\r\n-1 45\r\n2\r\n-1 46\r\n2\r\n-1 47\r\n2\r\n-1 48\r\n2\r\n-1 49\r\n",
                "nO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\nnO\r\n"
            ]
        ]
    }
]