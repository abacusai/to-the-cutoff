[
    {
        "name": "Greg and Graph",
        "description": "Greg has a weighed directed graph, consisting of n vertices. In this graph any\npair of distinct vertices has an edge between them in both directions. Greg\nloves playing with the graph and now he has invented a new game: The game\nconsists of n steps. On the i-th step Greg removes vertex number xi from the\ngraph. As Greg removes a vertex, he also removes all the edges that go in and\nout of this vertex. Before executing each step, Greg wants to know the sum of\nlengths of the shortest paths between all pairs of the remaining vertices. The\nshortest path can go through any remaining vertex. In other words, if we\nassume that d(i, v, u) is the shortest path between vertices v and u in the\ngraph that formed before deleting vertex xi, then Greg wants to know the value\nof the following sum: . Help Greg, print the value of the required sum before\neach step. Input The first line contains integer n (1 \u2264 n \u2264 500) \u2014 the number\nof vertices in the graph. Next n lines contain n integers each \u2014 the graph\nadjacency matrix: the j-th number in the i-th line aij (1 \u2264 aij \u2264 10^5, aii =\n0) represents the weight of the edge that goes from vertex i to vertex j. The\nnext line contains n distinct integers: x1, x2, ..., xn (1 \u2264 xi \u2264 n) \u2014 the\nvertices that Greg deletes. Output Print n integers \u2014 the i-th number equals\nthe required sum before the i-th step. Please, do not use the \nto read or write 64-bit integers in C++. It is preferred to use the cin, cout\nstreams of the \n1 2 Output 9 0 Input 4 0 3 1 1 6 0 400 1 2 4 0 1 1 1 1 0 4 1 2 3 Output 17 23\n404 0\n\n",
        "cf_contest_id": 295,
        "cf_index": "B",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "graphs",
            "shortest paths"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n0\r\n1\r\n",
                "0 \r\n"
            ],
            [
                "2\r\n0 5\r\n4 0\r\n1 2\r\n",
                "9 0 \r\n"
            ],
            [
                "4\r\n0 3 1 1\r\n6 0 400 1\r\n2 4 0 1\r\n1 1 1 0\r\n4 1 2 3\r\n",
                "17 23 404 0 \r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n0 57148 51001 13357\r\n71125 0 98369 67226\r\n49388 90852 0 66291\r\n39573 38165 97007 0\r\n2 3 1 4\r\n",
                "723897 306638 52930 0 \r\n"
            ],
            [
                "5\r\n0 27799 15529 16434 44291\r\n47134 0 90227 26873 52252\r\n41605 21269 0 9135 55784\r\n70744 17563 79061 0 73981\r\n70529 35681 91073 52031 0\r\n5 2 3 1 4\r\n",
                "896203 429762 232508 87178 0 \r\n"
            ],
            [
                "6\r\n0 72137 71041 29217 96749 46417\r\n40199 0 55907 57677 68590 78796\r\n83463 50721 0 30963 31779 28646\r\n94529 47831 98222 0 61665 73941\r\n24397 66286 2971 81613 0 52501\r\n26285 3381 51438 45360 20160 0\r\n6 3 2 4 5 1\r\n",
                "1321441 1030477 698557 345837 121146 0 \r\n"
            ],
            [
                "7\r\n0 34385 31901 51111 10191 14089 95685\r\n11396 0 8701 33277 1481 517 46253\r\n51313 2255 0 5948 66085 37201 65310\r\n21105 60985 10748 0 89271 42883 77345\r\n34686 29401 73565 47795 0 13793 66997\r\n70279 49576 62900 40002 70943 0 89601\r\n65045 1681 28239 12023 40414 89585 0\r\n3 5 7 6 1 2 4\r\n",
                "1108867 1016339 729930 407114 206764 94262 0 \r\n"
            ],
            [
                "8\r\n0 74961 47889 4733 72876 21399 63105 48239\r\n15623 0 9680 89133 57989 63401 26001 29608\r\n42369 82390 0 32866 46171 11871 67489 54070\r\n23425 80027 18270 0 28105 42657 40876 29267\r\n78793 18701 7655 94798 0 88885 71424 86914\r\n44835 76636 11553 46031 13617 0 16971 51915\r\n33037 53719 43116 52806 56897 71241 0 11629\r\n2119 62373 93265 69513 5770 90751 36619 0\r\n3 7 6 5 8 1 2 4\r\n",
                "1450303 1188349 900316 531281 383344 219125 169160 0 \r\n"
            ],
            [
                "9\r\n0 85236 27579 82251 69479 24737 87917 15149 52311\r\n59640 0 74687 34711 3685 30121 4961 7552 83399\r\n33376 68733 0 81357 18042 74297 15466 29476 5865\r\n7493 5601 3321 0 20263 55901 45756 55361 87633\r\n26751 17161 76681 40376 0 39745 50717 56887 90055\r\n18885 76353 47089 43601 21561 0 60571 33551 53753\r\n74595 877 71853 93156 97499 70876 0 22713 63961\r\n67725 25309 56358 92376 40641 35433 39781 0 97482\r\n81818 12561 85961 81445 3941 76799 31701 43725 0\r\n6 2 9 3 5 7 1 4 8\r\n",
                "2106523 1533575 1645151 1255230 946667 618567 287636 147737 0 \r\n"
            ]
        ]
    }
]