[
    {
        "name": "Practice",
        "description": "Little time is left before Berland annual football championship. Therefore the\ncoach of team \"Losewille Rangers\" decided to resume the practice, that were\nindefinitely interrupted for uncertain reasons. Overall there are n players in\n\"Losewille Rangers\". Each player on the team has a number \u2014 a unique integer\nfrom 1 to n. To prepare for the championship, the coach Mr. Floppe decided to\nspend some number of practices. Mr. Floppe spent some long nights of his\nholiday planning how to conduct the practices. He came to a very complex\npractice system. Each practice consists of one game, all n players of the team\ntake part in the game. The players are sorted into two teams in some way. In\nthis case, the teams may have different numbers of players, but each team must\nhave at least one player. The coach wants to be sure that after the series of\nthe practice sessions each pair of players had at least one practice, when\nthey played in different teams. As the players' energy is limited, the coach\nwants to achieve the goal in the least number of practices. Help him to\nschedule the practices. Input A single input line contains integer n (2 \u2264 n \u2264\n1000). Output In the first line print m \u2014 the minimum number of practices the\ncoach will have to schedule. Then print the descriptions of the practices in m\nlines. In the i-th of those lines print fi \u2014 the number of players in the\nfirst team during the i-th practice (1 \u2264 fi < n), and fi numbers from 1 to n \u2014\nthe numbers of players in the first team. The rest of the players will play in\nthe second team during this practice. Separate numbers on a line with spaces.\nPrint the numbers of the players in any order. If there are multiple optimal\nsolutions, print any of them. Examples Input 2 Output 1 1 1 Input 3 Output 2 2\n1 2 1 1\n\n",
        "cf_contest_id": 234,
        "cf_index": "G",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "divide and conquer",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n",
                "1\r\n1 2"
            ],
            [
                "3\r\n",
                "2\r\n1 3\r\n1 2"
            ]
        ],
        "private_cases": [
            [
                "4\r\n",
                "2\r\n2 3 4\r\n2 2 4"
            ],
            [
                "5\r\n",
                "3\r\n1 5\r\n2 3 4\r\n2 2 4"
            ],
            [
                "6\r\n",
                "3\r\n2 5 6\r\n2 3 4\r\n3 2 4 6"
            ],
            [
                "7\r\n",
                "3\r\n3 5 6 7\r\n3 3 4 7\r\n3 2 4 6"
            ],
            [
                "8\r\n",
                "3\r\n4 5 6 7 8\r\n4 3 4 7 8\r\n4 2 4 6 8"
            ],
            [
                "9\r\n",
                "4\r\n1 9\r\n4 5 6 7 8\r\n4 3 4 7 8\r\n4 2 4 6 8"
            ],
            [
                "10\r\n",
                "4\r\n2 9 10\r\n4 5 6 7 8\r\n4 3 4 7 8\r\n5 2 4 6 8 10"
            ],
            [
                "11\r\n",
                "4\r\n3 9 10 11\r\n4 5 6 7 8\r\n5 3 4 7 8 11\r\n5 2 4 6 8 10"
            ],
            [
                "13\r\n",
                "4\r\n5 9 10 11 12 13\r\n5 5 6 7 8 13\r\n6 3 4 7 8 11 12\r\n6 2 4 6 8 10 12"
            ],
            [
                "15\r\n",
                "4\r\n7 9 10 11 12 13 14 15\r\n7 5 6 7 8 13 14 15\r\n7 3 4 7 8 11 12 15\r\n7 2 4 6 8 10 12 14"
            ],
            [
                "16\r\n",
                "4\r\n8 9 10 11 12 13 14 15 16\r\n8 5 6 7 8 13 14 15 16\r\n8 3 4 7 8 11 12 15 16\r\n8 2 4 6 8 10 12 14 16"
            ],
            [
                "18\r\n",
                "5\r\n2 17 18\r\n8 9 10 11 12 13 14 15 16\r\n8 5 6 7 8 13 14 15 16\r\n8 3 4 7 8 11 12 15 16\r\n9 2 4 6 8 10 12 14 16 18"
            ],
            [
                "20\r\n",
                "5\r\n4 17 18 19 20\r\n8 9 10 11 12 13 14 15 16\r\n8 5 6 7 8 13 14 15 16\r\n10 3 4 7 8 11 12 15 16 19 20\r\n10 2 4 6 8 10 12 14 16 18 20"
            ]
        ]
    }
]