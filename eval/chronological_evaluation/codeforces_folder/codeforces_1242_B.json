[
    {
        "name": "0-1 MST",
        "description": "Ujan has a lot of useless stuff in his drawers, a considerable part of which\nare his math notebooks: it is time to sort them out. This time he found an old\ndusty graph theory notebook with a description of a graph. It is an undirected\nweighted graph on \n    n\n vertices. It is a complete graph: each pair of\nvertices is connected by an edge. The weight of each edge is either \n    0\n or\n\n    1\n; exactly \n    m\n edges have weight \n    1\n, and all others have weight\n\n    0\n. Since Ujan doesn't really want to organize his notes, he decided to\nfind the weight of the minimum spanning tree of the graph. (The weight of a\nspanning tree is the sum of all its edges.) Can you find the answer for Ujan\nso he stops procrastinating? Input The first line of the input contains two\nintegers \n    n\n and \n    m\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n, \n    0 \n    \u2264 m\n    \n    \u2264\n    min(\n    n(n-1)/2,10^5)\n), the number of vertices and the\nnumber of edges of weight \n    1\n in the graph. The \n    i\n-th of the next\n\n    m\n lines contains two integers \n    a_i\n and \n    b_i\n (\n    1 \n    \u2264 a_i,\n    b_i \n    \u2264 n\n, \n    a_i \n    \u2260 b_i\n), the endpoints of the \n    i\n-th edge\nof weight \n    1\n. It is guaranteed that no edge appears twice in the input.\nOutput Output a single integer, the weight of the minimum spanning tree of the\ngraph. Examples Input 6 11 1 3 1 4 1 5 1 6 2 3 2 4 2 5 2 6 3 4 3 5 3 6 Output\n2 Input 3 0 Output 0 Note The graph from the first sample is shown below.\nDashed edges have weight \n    0\n, other edges have weight \n    1\n. One of the\nminimum spanning trees is highlighted in orange and has total weight \n    2\n.\nIn the second sample, all edges have weight \n    0\n so any spanning tree has\ntotal weight \n    0\n.\n\n",
        "cf_contest_id": 1242,
        "cf_index": "B",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dsu",
            "graphs",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 11\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n2 3\r\n2 4\r\n2 5\r\n2 6\r\n3 4\r\n3 5\r\n3 6\r\n",
                "2\r\n"
            ],
            [
                "3 0\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 0\r\n",
                "0\r\n"
            ],
            [
                "1 0\r\n",
                "0\r\n"
            ],
            [
                "2 1\r\n1 2\r\n",
                "1\r\n"
            ],
            [
                "4 2\r\n3 2\r\n1 4\r\n",
                "0\r\n"
            ],
            [
                "3 3\r\n1 2\r\n3 1\r\n2 3\r\n",
                "2\r\n"
            ],
            [
                "7 5\r\n7 5\r\n1 5\r\n3 2\r\n2 6\r\n3 6\r\n",
                "0\r\n"
            ],
            [
                "10 10\r\n1 5\r\n1 8\r\n1 9\r\n5 8\r\n8 9\r\n4 7\r\n2 3\r\n3 10\r\n2 6\r\n2 10\r\n",
                "0\r\n"
            ],
            [
                "5 10\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 1\r\n1 3\r\n2 4\r\n3 5\r\n4 1\r\n5 2\r\n",
                "4\r\n"
            ],
            [
                "15 10\r\n2 3\r\n5 4\r\n5 6\r\n5 7\r\n3 8\r\n3 10\r\n11 12\r\n12 13\r\n13 14\r\n14 15\r\n",
                "0\r\n"
            ],
            [
                "100000 0\r\n",
                "0\r\n"
            ],
            [
                "6 9\r\n1 2\r\n1 4\r\n1 5\r\n2 3\r\n2 5\r\n2 6\r\n3 5\r\n4 6\r\n5 6\r\n",
                "0\r\n"
            ],
            [
                "3 1\r\n2 3\r\n",
                "0\r\n"
            ]
        ]
    }
]