[
    {
        "name": "Tick, Tock",
        "description": "Tannhaus, the clockmaker in the town of Winden, makes mysterious clocks that\nmeasure time in \n    h\n hours numbered from \n    0\n to \n    h-1\n. One day, he\ndecided to make a puzzle with these clocks. The puzzle consists of an \n    n\n    \n    \u00d7 m\n grid of clocks, and each clock always displays some hour exactly\n(that is, it doesn't lie between two hours). In one move, he can choose any\nrow or column and shift all clocks in that row or column one hour\nforward\n    ^\n    \u2020\n. The grid of clocks is called solvable if it is\npossible to make all the clocks display the same time. While building his\npuzzle, Tannhaus suddenly got worried that it might not be possible to make\nthe grid solvable. Some cells of the grid have clocks already displaying a\ncertain initial time, while the rest of the cells are empty. Given the\npartially completed grid of clocks, find the number of ways\n    ^\n\nto assign clocks in the empty cells so that the grid is solvable. The answer\ncan be enormous, so compute it modulo \n    10^9 + 7\n. \n    ^\n    \u2020\n If a\nclock currently displays hour \n    t\n and is shifted one hour forward, then\nthe clock will instead display hour \n    (t+1) \n     h\n. \n    ^\n\nTwo assignments are different if there exists some cell with a clock that\ndisplays a different time in both arrangements. Input The first line of input\ncontains \n    t\n (\n    1 \n    \u2264 t \n    \u2264 5 \n    \u00b7 10^4\n) \u2014 the number of test\ncases. The first line of each test case consists of 3 integers \n    n\n,\n\n    m\n, and \n    h\n (\n    1 \n    \u2264 n, m \n    \u2264 2 \n    \u00b7 10^5\n; \n    1 \n    \u2264 h\n    \n    \u2264 10^9\n) \u2014 the number of rows in the grid, the number of columns in the\ngrid, and the number of the hours in the day respectively. The next \n    n\n\nlines each contain \n    m\n integers, describing the clock grid. The integer\n\n    x\n (\n    -1 \n    \u2264 x < h\n) in the \n    i\n-th row and the \n    j\n-th\ncolumn represents the initial hour of the corresponding clock, or if \n    x =\n    -1\n, an empty cell. It is guaranteed that the sum of \n    n \n    \u00b7 m\n over\nall test cases does not exceed \n    2 \n    \u00b7 10^5\n. Output For each test\ncase, output the number of ways to assign clocks in the empty cells so that\nthe grid is solvable. The answer can be huge, so output it modulo \n    10^9 +\n    7\n. Example Input 5 2 3 4 1 0 -1 -1 -1 2 2 2 10 1 2 3 5 4 5 1024 1 -1 -1 -1\n-1 -1 -1 -1 1000 -1 -1 -1 -1 -1 69 420 -1 -1 999 -1 3 3 3 -1 -1 1 2 -1 1 2 -1\n2 3 3 3 1 -1 2 -1 0 -1 -1 1 0 Output 4 0 73741817 0 1 Note For the first\nsample, this is a possible configuration for the clocks: 103032 This is\nsolvable since we can: Move the middle column forward one hour. Move the third\ncolumn forward one hour. Move the third column forward one hour. Move the\nsecond row forward one hour. After that all the clocks show one hour.For the\nsecond test case, it can be shown that there are no possible solvable clock\nconfigurations.\n\n",
        "cf_contest_id": 1758,
        "cf_index": "E",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "dfs and similar",
            "dsu",
            "graphs"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n2 3 4\r\n1 0 -1\r\n-1 -1 2\r\n2 2 10\r\n1 2\r\n3 5\r\n4 5 1024\r\n1 -1 -1 -1 -1\r\n-1 -1 -1 1000 -1\r\n-1 -1 -1 -1 69\r\n420 -1 -1 999 -1\r\n3 3 3\r\n-1 -1 1\r\n2 -1 1\r\n2 -1 2\r\n3 3 3\r\n1 -1 2\r\n-1 0 -1\r\n-1 1 0\r\n",
                "4\r\n0\r\n73741817\r\n0\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]