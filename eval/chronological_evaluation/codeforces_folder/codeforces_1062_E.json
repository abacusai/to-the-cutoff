[
    {
        "name": "Company",
        "description": "The company \n    X\n has \n    n\n employees numbered from \n    1\n through\n\n    n\n. Each employee \n    u\n has a direct boss \n    p_u\n (\n    1 \n    \u2264 p_u\n    \n    \u2264 n\n), except for the employee \n    1\n who has no boss. It is\nguaranteed, that values \n    p_i\n form a tree. Employee \n    u\n is said to be\nin charge of employee \n    v\n if \n    u\n is the direct boss of \n    v\n or\nthere is an employee \n    w\n such that \n    w\n is in charge of \n    v\n and\n\n    u\n is the direct boss of \n    w\n. Also, any employee is considered to be\nin charge of himself. In addition, for each employee \n    u\n we define it's\nlevel \n    lv(u)\n as follow: \n    lv(1)=0\n \n    lv(u)=lv(p_u)+1\n for \n    u\n    \n    \u2260 1\n In the near future, there are \n    q\n possible plans for the\ncompany to operate. The \n    i\n-th plan consists of two integers \n    l_i\n and\n\n    r_i\n, meaning that all the employees in the range \n    [l_i, r_i]\n, and\nonly they, are involved in this plan. To operate the plan smoothly, there must\nbe a project manager who is an employee in charge of all the involved\nemployees. To be precise, if an employee \n    u\n is chosen as the project\nmanager for the \n    i\n-th plan then for every employee \n    v \n    \u2208 [l_i,\n    r_i]\n, \n    u\n must be in charge of \n    v\n. Note, that \n    u\n is not\nnecessary in the range \n    [l_i, r_i]\n. Also, \n    u\n is always chosen in\nsuch a way that \n    lv(u)\n is as large as possible (the higher the level is,\nthe lower the salary that the company has to pay the employee). Before any\nplan is operated, the company has JATC take a look at their plans. After a\nglance, he tells the company that for every plan, it's possible to reduce the\nnumber of the involved employees exactly by one without affecting the plan.\nBeing greedy, the company asks JATC which employee they should kick out of the\nplan so that the level of the project manager required is as large as\npossible. JATC has already figured out the answer and challenges you to do the\nsame. Input The first line contains two integers \n    n\n and \n    q\n (\n    2\n    \n    \u2264 n \n    \u2264 100\n     000\n, \n    1 \n    \u2264 q \n    \u2264 100\n     000\n) \u2014 the number of\nemployees and the number of plans, respectively. The second line contains\n\n    n-1\n integers \n    p_2, p_3, \n    \u2026, p_n\n (\n    1 \n    \u2264 p_i \n    \u2264 n\n)\nmeaning \n    p_i\n is the direct boss of employee \n    i\n. It is guaranteed,\nthat values \n    p_i\n form a directed tree with the root of \n    1\n. Each of\nthe following \n    q\n lines contains two integers \n    l_i\n and \n    r_i\n\n(\n    1 \n    \u2264 l_i lv(1)=0\n, choosing \n    8\n is the best strategy. In the\nthird query, no matter how we choose the employee, the project manager will\nalways be \n    1\n. In the fourth query, if we choose \n    9\n or \n    10\n then\nthe project manager will be \n    3\n. If we choose \n    11\n then the project\nmanager will be \n    7\n. Since \n    lv(7)=3>lv(3)=1\n, we choose \n    11\n as\nthe answer.\n\n",
        "cf_contest_id": 1062,
        "cf_index": "E",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "11 5\r\n1 1 3 3 3 4 2 7 7 6\r\n4 6\r\n4 8\r\n1 11\r\n9 11\r\n8 11\r\n",
                "5 1\r\n8 1\r\n1 0\r\n11 3\r\n8 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "16 4\r\n1 11 6 14 12 12 1 12 6 14 1 10 1 5 14\r\n5 7\r\n2 9\r\n6 9\r\n3 4\r\n",
                "5 1\r\n3 0\r\n8 1\r\n4 3\r\n"
            ],
            [
                "2 1\r\n1\r\n1 2\r\n",
                "1 1\r\n"
            ],
            [
                "6 2\r\n1 2 1 2 4\r\n2 3\r\n1 4\r\n",
                "2 2\r\n1 0\r\n"
            ],
            [
                "5 4\r\n3 1 3 3\r\n4 5\r\n1 5\r\n1 2\r\n3 5\r\n",
                "5 2\r\n1 1\r\n1 2\r\n3 1\r\n"
            ]
        ]
    }
]