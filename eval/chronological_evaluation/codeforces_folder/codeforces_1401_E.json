[
    {
        "name": "Divide Square",
        "description": "There is a square of size \n    10^6 \n    \u00d7 10^6\n on the coordinate plane\nwith four points \n    (0, 0)\n, \n    (0, 10^6)\n, \n    (10^6, 0)\n, and \n    (10^6,\n    10^6)\n as its vertices. You are going to draw segments on the plane. All\nsegments are either horizontal or vertical and intersect with at least one\nside of the square. Now you are wondering how many pieces this square divides\ninto after drawing all segments. Write a program calculating the number of\npieces of the square. Input The first line contains two integers \n    n\n and\n\n    m\n (\n    0 \n    \u2264 n, m \n    \u2264 10^5\n) \u2014 the number of horizontal segments\nand the number of vertical segments. The next \n    n\n lines contain\ndescriptions of the horizontal segments. The \n    i\n-th line contains three\nintegers \n    y_i\n, \n    lx_i\n and \n    rx_i\n (\n    0 < y_i < 10^6\n; \n    0\n    \n    \u2264 lx_i < rx_i \n    \u2264 10^6\n), which means the segment connects \n    (lx_i,\n    y_i)\n and \n    (rx_i, y_i)\n. The next \n    m\n lines contain descriptions of\nthe vertical segments. The \n    i\n-th line contains three integers \n    x_i\n,\n\n    ly_i\n and \n    ry_i\n (\n    0 < x_i < 10^6\n; \n    0 \n    \u2264 ly_i < ry_i \n    \u2264\n    10^6\n), which means the segment connects \n    (x_i, ly_i)\n and \n    (x_i,\n    ry_i)\n. It's guaranteed that there are no two segments on the same line, and\neach segment intersects with at least one of square's sides. Output Print the\nnumber of pieces the square is divided into after drawing all the segments.\nExample Input 3 3 2 3 1000000 4 0 4 3 0 1000000 4 0 1 2 0 5 3 1 1000000 Output\n7 Note The sample is like this:\n\n",
        "cf_contest_id": 1401,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "geometry",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 384.0,
        "public_cases": [
            [
                "3 3\r\n2 3 1000000\r\n4 0 4\r\n3 0 1000000\r\n4 0 1\r\n2 0 5\r\n3 1 1000000\r\n",
                "7\r\n"
            ]
        ],
        "private_cases": [
            [
                "0 1\r\n242110 453990 1000000\r\n",
                "1\r\n"
            ],
            [
                "1 1\r\n500000 1 1000000\r\n500000 0 999999\r\n",
                "2\r\n"
            ],
            [
                "3 0\r\n3 1 1000000\r\n1 1 1000000\r\n2 1 1000000\r\n",
                "1\r\n"
            ],
            [
                "1 1\r\n999999 999999 1000000\r\n999999 0 999999\r\n",
                "2\r\n"
            ],
            [
                "0 0\r\n",
                "1\r\n"
            ],
            [
                "1 1\r\n231451 171893 1000000\r\n355017 0 1000000\r\n",
                "3\r\n"
            ],
            [
                "1 1\r\n83893 0 1000000\r\n507509 0 668083\r\n",
                "3\r\n"
            ]
        ]
    }
]