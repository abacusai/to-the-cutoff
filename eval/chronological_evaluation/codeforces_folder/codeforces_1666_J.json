[
    {
        "name": "Job Lookup",
        "description": "Julia's \n    n\n friends want to organize a startup in a new country they moved\nto. They assigned each other numbers from 1 to \n    n\n according to the jobs\nthey have, from the most front-end tasks to the most back-end ones. They also\nestimated a matrix \n    c\n, where \n    c_ij = c_ji\n is the average number\nof messages per month between people doing jobs \n    i\n and \n    j\n. Now they\nwant to make a hierarchy tree. It will be a binary tree with each node\ncontaining one member of the team. Some member will be selected as a leader of\nthe team and will be contained in the root node. In order for the leader to be\nable to easily reach any subordinate, for each node \n    v\n of the tree, the\nfollowing should apply: all members in its left subtree must have smaller\nnumbers than \n    v\n, and all members in its right subtree must have larger\nnumbers than \n    v\n. After the hierarchy tree is settled, people doing jobs\n\n    i\n and \n    j\n will be communicating via the shortest path in the tree\nbetween their nodes. Let's denote the length of this path as \n    d_ij\n.\nThus, the cost of their communication is \n    c_ij\n    \u00b7 d_ij\n. Your\ntask is to find a hierarchy tree that minimizes the total cost of\ncommunication over all pairs: \n    \u2211_1 \n    \u2264 i < j \n    \u2264 n c_ij\n    \u00b7\n    d_ij\n. Input The first line contains an integer \n    n\n (\n    1 \n    \u2264 n\n    \n    \u2264 200\n) \u2013 the number of team members organizing a startup. The next\n\n    n\n lines contain \n    n\n integers each, \n    j\n-th number in \n    i\n-th\nline is \n    c_ij\n \u2014 the estimated number of messages per month between team\nmembers \n    i\n and \n    j\n (\n    0 \n    \u2264 c_ij\n    \u2264 10^9; c_ij = c_ji;\n    c_ii = 0\n). Output Output a description of a hierarchy tree that minimizes\nthe total cost of communication. To do so, for each team member from 1 to\n\n    n\n output the number of the member in its parent node, or 0 for the\nleader. If there are many optimal trees, output a description of any one of\nthem. Example Input 4 0 566 1 0 566 0 239 30 1 239 0 1 0 30 1 0 Output 2 4 2 0\nNote The minimal possible total cost is \n    566 \n    \u00b7 1+239 \n    \u00b7 1+30\n    \n    \u00b7 1+1 \n    \u00b7 2+1 \n    \u00b7 2=839\n:\n\n",
        "cf_contest_id": 1666,
        "cf_index": "J",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dp",
            "shortest paths",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4\r\n0 566 1 0\r\n566 0 239 30\r\n1 239 0 1\r\n0 30 1 0\r\n",
                "2 4 2 0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n0\r\n",
                "0\r\n"
            ],
            [
                "3\r\n0 685591254 776967170\r\n685591254 0 283040711\r\n776967170 283040711 0\r\n",
                "3 1 0\r\n"
            ],
            [
                "4\r\n0 685591254 776967170 682471696\r\n685591254 0 283040711 257599982\r\n776967170 283040711 0 303219347\r\n682471696 257599982 303219347 0\r\n",
                "3 1 0 3\r\n"
            ]
        ]
    }
]