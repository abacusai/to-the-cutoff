[
    {
        "name": "Loader",
        "description": "A loader works in a warehouse, which is a rectangular field with size n \u00d7 m.\nSome cells of this field are free, others are occupied by pillars on which the\nroof of the warehouse rests. There is a load in one of the free cells, and the\nloader in another. At any moment, the loader and the load can not be in the\ncells with columns, outside the warehouse or in the same cell. The loader can\nmove to the adjacent cell (two cells are considered adjacent if they have a\ncommon side), or move the load. To move the load, the loader should reach the\ncell adjacent to the load and push the load. In this case the load advances to\nthe next cell in the direction in which the loader pushes it and the loader\nends up in the cell in which the load was. Your task is to determine a\nsequence of pushes and loader's movements after which the load will reach the\ngiven cell (it is guaranteed that this cell is free). The load is rather\nheavy, so you need to minimize first the number of pushes and second the\nnumber of loader's movements. Input The first line contains two positive\nintegers n and m (1 \u2264 n, m \u2264 40, n\u00b7m \u2265 3) \u2014 the number of rows and columns in\nthe rectangular field. Each of the next n lines contains m characters \u2014 the\ndescription of the warehouse. If there is a character in the next cell of the\nwarehouse: \"X\", it means, that the current cell contains the column; \".\", it\nmeans, that the current cell is free; \"Y\", it means, that the loader is in the\ncurrent cell; \"B\", it means, that the load is in the current cell; \"T\", it\nmeans, that the load should be moved to this cell. It is guaranteed that there\nis exactly one load, one loader and one cell to which the load should be\nmoved. Output If the loader is not able to move the load to the given cell,\nprint \"NO\" (without the quotes) in the first line of the output. Otherwise,\nprint \"YES\" (without the quotes) in the first line of the output, and in the\nsecond line \u2014 the sequence of characters that determines movements and pushes\nof the loader. Characters w, e, n, s shall denote loader's moves to the west,\neast, north and south, respectively. Characters W, E, N, S must denote\nloader's pushes in the corresponding directions. First of all you need to\nminimize the number of pushes of the load and second, the number of movements\nof the loader. If there are several answers, you are allowed to print any of\nthem. Examples Input 3 3 ..Y .BX ..T Output YES wSwsE Input 3 3 .BY ... TXX\nOutput NO\n\n",
        "cf_contest_id": 683,
        "cf_index": "I",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "*special"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3\r\n..Y\r\n.BX\r\n..T\r\n",
                "YES\r\nwSwsE"
            ],
            [
                "3 3\r\n.BY\r\n...\r\nTXX\r\n",
                "NO\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 3\r\n..Y\r\n.B.\r\nTXX\r\n",
                "YES\r\nsWnwS"
            ],
            [
                "1 3\r\nYBT\r\n",
                "YES\r\nE"
            ],
            [
                "1 3\r\nTBY\r\n",
                "YES\r\nW"
            ],
            [
                "3 1\r\nT\r\nB\r\nY\r\n",
                "YES\r\nN"
            ],
            [
                "2 3\r\nYXB\r\n.XT\r\n",
                "NO\r\n"
            ]
        ]
    }
]