[
    {
        "name": "Teams Forming",
        "description": "There are \n    n\n students in a university. The number of students is even.\nThe \n    i\n-th student has programming skill equal to \n    a_i\n. The coach\nwants to form \n    n/2\n teams. Each team should consist of exactly\ntwo students, and each student should belong to exactly one team. Two students\ncan form a team only if their skills are equal (otherwise they cannot\nunderstand each other and cannot form a team). Students can solve problems to\nincrease their skill. One solved problem increases the skill by one. The coach\nwants to know the minimum total number of problems students should solve to\nform exactly \n    n/2\n teams (i.e. each pair of students should form\na team). Your task is to find this number. Input The first line of the input\ncontains one integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 100\n) \u2014 the number of\nstudents. It is guaranteed that \n    n\n is even. The second line of the input\ncontains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264\n    100\n), where \n    a_i\n is the skill of the \n    i\n-th student. Output Print\none number \u2014 the minimum total number of problems students should solve to\nform exactly \n    n/2\n teams. Examples Input 6 5 10 2 3 14 5 Output\n5 Input 2 1 100 Output 99 Note In the first example the optimal teams will be:\n\n    (3, 4)\n, \n    (1, 6)\n and \n    (2, 5)\n, where numbers in brackets are\nindices of students. Then, to form the first team the third student should\nsolve \n    1\n problem, to form the second team nobody needs to solve problems\nand to form the third team the second student should solve \n    4\n problems so\nthe answer is \n    1 + 4 = 5\n. In the second example the first student should\nsolve \n    99\n problems to form a team with the second one.\n\n",
        "cf_contest_id": 1092,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n5 10 2 3 14 5\r\n",
                "5\r\n"
            ],
            [
                "2\r\n1 100\r\n",
                "99\r\n"
            ]
        ],
        "private_cases": [
            [
                "100\r\n15 14 32 65 28 96 33 93 48 28 57 20 32 20 90 42 57 53 18 58 94 21 27 29 37 22 94 45 67 60 83 23 20 23 35 93 3 42 6 46 68 46 34 25 17 16 50 5 49 91 23 76 69 100 58 68 81 32 88 41 64 29 37 13 95 25 6 59 74 58 31 35 16 80 13 80 10 59 85 18 16 70 51 40 44 28 8 76 8 87 53 86 28 100 2 73 14 100 52 9\r\n",
                "60\r\n"
            ],
            [
                "100\r\n25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25\r\n",
                "0\r\n"
            ],
            [
                "100\r\n45 59 59 59 45 45 45 59 45 59 45 45 59 59 45 45 45 59 45 45 45 59 45 59 59 59 45 45 45 59 45 59 59 45 45 59 59 59 59 45 59 59 45 45 45 45 59 45 59 59 59 45 45 45 59 45 45 59 59 45 45 59 45 59 59 59 59 59 59 45 45 59 45 59 59 45 45 59 59 45 59 59 45 59 59 59 45 59 45 45 59 45 59 59 45 59 59 59 59 59\r\n",
                "0\r\n"
            ],
            [
                "100\r\n89 51 37 17 13 97 78 26 44 82 36 75 39 76 96 34 88 69 27 28 93 31 53 14 93 78 71 95 44 12 34 96 97 88 37 36 16 78 13 87 41 27 44 38 17 72 93 31 27 51 12 53 12 23 14 9 39 87 76 97 28 39 27 81 93 15 1 71 78 26 75 82 89 39 9 81 53 1 26 26 12 38 38 72 99 44 1 1 16 23 27 53 15 97 41 38 27 95 99 69\r\n",
                "0\r\n"
            ],
            [
                "100\r\n98 52 63 2 18 96 31 58 84 40 41 45 66 100 46 71 26 48 81 20 73 91 68 76 13 93 17 29 64 95 79 21 55 75 19 85 54 51 89 78 15 87 43 59 36 1 90 35 65 56 62 28 86 5 82 49 3 99 33 9 92 32 74 69 27 22 77 16 44 94 34 6 57 70 23 12 61 25 8 11 67 47 83 88 10 14 30 7 97 60 42 37 24 38 53 50 4 80 72 39\r\n",
                "50\r\n"
            ],
            [
                "100\r\n32 32 32 3 32 3 32 32 3 32 32 3 32 3 32 32 32 32 32 32 3 3 3 3 3 32 32 3 32 3 32 3 32 32 32 32 32 3 3 3 3 3 3 32 3 3 3 3 32 32 32 32 32 3 3 3 3 32 32 32 32 32 3 32 32 32 3 3 32 32 32 3 3 32 32 32 3 3 33 32 3 32 3 32 32 3 3 3 32 3 3 32 32 32 32 32 32 32 3 32\r\n",
                "1\r\n"
            ],
            [
                "100\r\n31 76 76 31 31 31 31 31 31 76 31 31 76 31 31 76 31 76 31 76 31 76 76 31 31 76 76 76 31 31 31 31 31 76 31 76 31 31 31 76 76 76 76 31 76 76 31 76 76 31 76 31 31 76 31 76 31 76 31 31 76 31 31 31 31 31 76 31 31 31 31 76 31 31 31 76 76 31 31 31 76 31 76 31 76 32 77 76 76 31 76 31 31 31 76 31 31 31 76 31\r\n",
                "2\r\n"
            ],
            [
                "100\r\n1 1 100 100 1 100 1 1 1 1 1 1 100 1 100 100 100 1 1 100 100 100 100 100 1 100 1 100 1 1 1 100 1 1 100 1 100 1 1 1 100 100 1 1 1 100 100 100 100 100 1 100 100 1 1 1 1 100 1 1 100 1 1 1 1 100 100 100 1 100 1 100 100 100 1 1 100 100 100 100 1 100 1 100 100 1 100 1 100 100 100 100 100 100 1 1 1 100 100 1\r\n",
                "99\r\n"
            ],
            [
                "100\r\n55 2 69 13 65 71 65 8 9 87 57 43 64 53 3 74 55 31 87 5 79 47 9 29 5 31 59 1 79 97 48 91 36 40 92 37 76 73 21 44 98 55 47 1 96 63 37 83 35 8 50 54 84 100 62 98 88 1 78 57 48 46 55 49 30 100 11 39 27 61 38 55 67 16 95 25 76 67 20 46 91 91 50 33 65 64 82 30 31 42 85 78 42 29 2 69 12 50 54 79\r\n",
                "47\r\n"
            ],
            [
                "2\r\n1 1\r\n",
                "0\r\n"
            ],
            [
                "66\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "0\r\n"
            ],
            [
                "4\r\n3 2 99 99\r\n",
                "1\r\n"
            ],
            [
                "2\r\n1 70\r\n",
                "69\r\n"
            ],
            [
                "2\r\n1 71\r\n",
                "70\r\n"
            ]
        ]
    }
]