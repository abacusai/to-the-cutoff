[
    {
        "name": "Median Queries",
        "description": "This is an interactive problem. There is a secret permutation \n    p\n\n(\n    1\n-indexed) of numbers from \n    1\n to \n    n\n. More formally, for \n    1\n    \n    \u2264 i \n    \u2264 n\n, \n    1 \n    \u2264 p[i] \n    \u2264 n\n and for \n    1 \n    \u2264 i < j\n    \n    \u2264 n\n, \n    p[i] \n    \u2260 p[j]\n. It is known that \n    p[1]<p[2]\n. In\n\n    1\n query, you give \n    3\n distinct integers \n    a,b,c\n (\n    1 \n    \u2264\n    a,b,c \n    \u2264 n\n), and receive the median of\n\n    |p[a]-p[b]|,|p[b]-p[c]|,|p[a]-p[c]|\n. In this case, the median\nis the \n    2\n-nd element (\n    1\n-indexed) of the sequence when sorted in\nnon-decreasing order. The median of \n    4,6,2\n is \n    4\n and the\nmedian of \n    0,123,33\n is \n    33\n. Can you find the secret\npermutation in not more than \n    2n+420\n queries? Note: the grader is not\nadaptive: the permutation is fixed before any queries are made. Input The\nfirst line of input contains a single integer \n    t\n \n    (1 \n    \u2264 t \n    \u2264\n    1000)\n \u2014 the number of testcases. The first line of each testcase consists\nof a single integer \n    n\n \n    (20 \n    \u2264 n \n    \u2264 100000)\n \u2014 the length of\nthe secret permutation. It is guaranteed that the sum of \n    n\n over all test\ncases does not exceed \n    100000\n. Interaction For each testcase, you begin\nthe interaction by reading \n    n\n. To perform a query, output \"? a b c\" where\n\n    a,b,c\n is the \n    3\n indices you want to use for the query. Numbers have\nto satisfy \n    1 \n    \u2264 a,b,c \n    \u2264 n\n and \n    a \n    \u2260 b\n,\n    b \n    \u2260\n    c\n,\n    a \n    \u2260 c\n. For each query, you will receive a single integer\n\n    x\n: the median of \n    |p[a]-p[b]|,|p[b]-p[c]|,|p[a]-p[c]|\n. In\ncase your query is invalid or you asked more than \n    2n+420\n queries, the\ninteractor will print \"\u22121\" and will finish interaction. You will receive Wrong\nanswer verdict. Make sure to exit immediately to avoid getting other verdicts.\nWhen you have determined the secret permutation, output \"! p[1] p[2] ...\np[n]\". If the secret permutation is correct, the interactor will print \"1\".\nOtherwise, the interactor will print \"-1\" and will finish interaction. You\nwill receive Wrong answer verdict. Make sure to exit immediately to avoid\ngetting other verdicts. After printing a query do not forget to output the end\nof line and flush the output. Otherwise, you will get Idleness limit exceeded\nverdict. To do this, use: fflush(stdout) or cout.flush() in C++;\nSystem.out.flush() in Java; flush(output) in Pascal; stdout.flush() in Python;\nsee documentation for other languages.Hacks: To hack, use the following format\nof test: The first line should contain a single integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 1000\n) \u2014 the number of testcases. The first line of each testcase\nshould contain a single integer \n    n\n (\n    20 \n    \u2264 n \n    \u2264 100000\n) \u2014\nthe length of the secret permutation. The following line of should contain\n\n    n\n integers \n    p[1],p[2],p[3],\n    \u2026,p[n]\n. \n    p[1]<p[2]\n and\n\n    p\n must be a permutation of integers from \n    1\n to \n    n\n. You must\nensure that the sum of \n    n\n over all testcases does not exceed\n\n    100000\n. Example Input 1 20 6 9 1 Output ? 1 5 2 ? 20 19 2 ! 9 10 19 7 16\n18 11 14 15 6 20 8 17 4 5 3 12 2 13 1 Note The secret permutation is\n\n    9,10,19,7,16,18,11,14,15,6,20,8,17,4,5,3,12,2,13,1\n. For the\nfirst query, the values of \n    (a,b,c)\n is \n    (1,5,2)\n. Since \n    p[1]=9\n,\n\n    p[5]=16\n and \n    p[2]=10\n. The return value is the median of\n\n    |9-16|,|16-10|,|9-10|\n which is \n    6\n. For the second query,\nthe values of \n    (a,b,c)\n is \n    (20,19,2)\n. Since \n    p[20]=1\n,\n\n    p[19]=13\n and \n    p[2]=10\n. The return value is the median of\n\n    |1-13|,|13-10|,|1-10|\n which is \n    9\n. By some miracle, we\nhave figured out that the secret permutation is\n\n    9,10,19,7,16,18,11,14,15,6,20,8,17,4,5,3,12,2,13,1\n. We output\nit and receive \n    1\n from the interactor, meaning that we have guessed the\nsecret permutation correctly.\n\n",
        "cf_contest_id": 1526,
        "cf_index": "F",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "interactive",
            "probabilities"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n20\r\n9 10 19 7 16 18 11 14 15 6 20 8 17 4 5 3 12 2 13 1\r\n",
                "38\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n20\r\n1 2 5 6 9 10 13 14 17 18 7 8 3 11 12 16 20 4 19 15\r\n",
                "47\r\n"
            ]
        ]
    }
]