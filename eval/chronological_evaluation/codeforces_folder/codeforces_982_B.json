[
    {
        "name": "Bus of Characters",
        "description": "In the Bus of Characters there are \n    n\n rows of seat, each having \n    2\n\nseats. The width of both seats in the \n    i\n-th row is \n    w_i\n centimeters.\nAll integers \n    w_i\n are distinct. Initially the bus is empty. On each of\n\n    2n\n stops one passenger enters the bus. There are two types of\npassengers: an introvert always chooses a row where both seats are empty.\nAmong these rows he chooses the one with the smallest seats width and takes\none of the seats in it; an extrovert always chooses a row where exactly one\nseat is occupied (by an introvert). Among these rows he chooses the one with\nthe largest seats width and takes the vacant place in it. You are given the\nseats width in each row and the order the passengers enter the bus. Determine\nwhich row each passenger will take. Input The first line contains a single\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 200\n     000\n) \u2014 the number of rows in the\nbus. The second line contains the sequence of integers \n    w_1, w_2, \n    \u2026,\n    w_n\n (\n    1 \n    \u2264 w_i \n    \u2264 10^9\n), where \n    w_i\n is the width of each\nof the seats in the \n    i\n-th row. It is guaranteed that all \n    w_i\n are\ndistinct. The third line contains a string of length \n    2n\n, consisting of\ndigits '0' and '1' \u2014 the description of the order the passengers enter the\nbus. If the \n    j\n-th character is '0', then the passenger that enters the\nbus on the \n    j\n-th stop is an introvert. If the \n    j\n-th character is\n'1', the the passenger that enters the bus on the \n    j\n-th stop is an\nextrovert. It is guaranteed that the number of extroverts equals the number of\nintroverts (i. e. both numbers equal \n    n\n), and for each extrovert there\nalways is a suitable row. Output Print \n    2n\n integers \u2014 the rows the\npassengers will take. The order of passengers should be the same as in input.\nExamples Input 2 3 1 0011 Output 2 1 1 2 Input 6 10 8 9 11 13 5 010010011101\nOutput 6 6 2 3 3 1 4 4 1 2 5 5 Note In the first example the first passenger\n(introvert) chooses the row \n    2\n, because it has the seats with smallest\nwidth. The second passenger (introvert) chooses the row \n    1\n, because it is\nthe only empty row now. The third passenger (extrovert) chooses the row\n\n    1\n, because it has exactly one occupied seat and the seat width is the\nlargest among such rows. The fourth passenger (extrovert) chooses the row\n\n    2\n, because it is the only row with an empty place.\n\n",
        "cf_contest_id": 982,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n3 1\r\n0011\r\n",
                "2 1 1 2\r\n"
            ],
            [
                "6\r\n10 8 9 11 13 5\r\n010010011101\r\n",
                "6 6 2 3 3 1 4 4 1 2 5 5\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n01\r\n",
                "1 1\r\n"
            ],
            [
                "1\r\n1000000\r\n01\r\n",
                "1 1\r\n"
            ],
            [
                "2\r\n1 1000000\r\n0011\r\n",
                "1 2 2 1\r\n"
            ],
            [
                "2\r\n1000000000 1\r\n0101\r\n",
                "2 2 1 1\r\n"
            ],
            [
                "2\r\n1000000000 999999999\r\n0011\r\n",
                "2 1 1 2\r\n"
            ],
            [
                "10\r\n24 53 10 99 83 9 15 62 33 47\r\n00100000000111111111\r\n",
                "6 3 3 7 1 9 10 2 8 5 4 4 5 8 2 10 9 1 7 6\r\n"
            ]
        ]
    }
]