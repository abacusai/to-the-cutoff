[
    {
        "name": "Weird Chess",
        "description": "Igor has been into chess for a long time and now he is sick of the game by the\nordinary rules. He is going to think of new rules of the game and become world\nfamous. Igor's chessboard is a square of size n \u00d7 n cells. Igor decided that\nsimple rules guarantee success, that's why his game will have only one type of\npieces. Besides, all pieces in his game are of the same color. The possible\nmoves of a piece are described by a set of shift vectors. The next passage\ncontains a formal description of available moves. Let the rows of the board be\nnumbered from top to bottom and the columns be numbered from left to right\nfrom 1 to n. Let's assign to each square a pair of integers (x, y) \u2014 the\nnumber of the corresponding column and row. Each of the possible moves of the\npiece is defined by a pair of integers (dx, dy); using this move, the piece\nmoves from the field (x, y) to the field (x + dx, y + dy). You can perform the\nmove if the cell (x + dx, y + dy) is within the boundaries of the board and\ndoesn't contain another piece. Pieces that stand on the cells other than (x,\ny) and (x + dx, y + dy) are not important when considering the possibility of\nmaking the given move (for example, like when a knight moves in usual chess).\nIgor offers you to find out what moves his chess piece can make. He placed\nseveral pieces on the board and for each unoccupied square he told you whether\nit is attacked by any present piece (i.e. whether some of the pieces on the\nfield can move to that cell). Restore a possible set of shift vectors of the\npiece, or else determine that Igor has made a mistake and such situation is\nimpossible for any set of shift vectors. Input The first line contains a\nsingle integer n (1 \u2264 n \u2264 50). The next n lines contain n characters each\ndescribing the position offered by Igor. The j-th character of the i-th string\ncan have the following values: o \u2014 in this case the field (i, j) is occupied\nby a piece and the field may or may not be attacked by some other piece; x \u2014\nin this case field (i, j) is attacked by some piece; . \u2014 in this case field\n(i, j) isn't attacked by any piece.It is guaranteed that there is at least one\npiece on the board. Output If there is a valid set of moves, in the first line\nprint a single word 'YES' (without the quotes). Next, print the description of\nthe set of moves of a piece in the form of a (2n - 1) \u00d7 (2n - 1) board, the\ncenter of the board has a piece and symbols 'x' mark cells that are attacked\nby it, in a format similar to the input. See examples of the output for a full\nunderstanding of the format. If there are several possible answers, print any\nof them. If a valid set of moves does not exist, print a single word 'NO'.\nExamples Input 5 oxxxx x...x x...x x...x xxxxo Output YES ....x.... ....x....\n....x.... ....x.... xxxxoxxxx ....x.... ....x.... ....x.... ....x.... Input 6\n.x.x.. x.x.x. .xo..x x..ox. .x.x.x ..x.x. Output YES ........... ...........\n........... ....x.x.... ...x...x... .....o..... ...x...x... ....x.x....\n........... ........... ........... Input 3 o.x oxx o.x Output NO Note In the\nfirst sample test the piece is a usual chess rook, and in the second sample\ntest the piece is a usual chess knight.\n\n",
        "cf_contest_id": 538,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\noxxxx\r\nx...x\r\nx...x\r\nx...x\r\nxxxxo\r\n",
                "YES\r\nxxxxxxxxx\r\nx...xxxxx\r\nx...xxxxx\r\nx...xxxxx\r\nxxxxoxxxx\r\nxxxxx...x\r\nxxxxx...x\r\nxxxxx...x\r\nxxxxxxxxx\r\n"
            ],
            [
                "6\r\n.x.x..\r\nx.x.x.\r\n.xo..x\r\nx..ox.\r\n.x.x.x\r\n..x.x.\r\n",
                "YES\r\nxxxxxxxxxxx\r\nxxxxxxxxxxx\r\nxx.x.x..xxx\r\nxxx.x.x..xx\r\nxx.x...x.xx\r\nxxx..o..xxx\r\nxx.x...x.xx\r\nxx..x.x.xxx\r\nxxx..x.x.xx\r\nxxxxxxxxxxx\r\nxxxxxxxxxxx\r\n"
            ],
            [
                "3\r\no.x\r\noxx\r\no.x\r\n",
                "NO\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\no\r\n",
                "YES\r\no\r\n"
            ],
            [
                "2\r\nox\r\n.o\r\n",
                "YES\r\nxxx\r\n.ox\r\nx.x\r\n"
            ],
            [
                "5\r\n.xxo.\r\n..oxo\r\nx.oxo\r\no..xo\r\noooox\r\n",
                "NO\r\n"
            ]
        ]
    }
]