[
    {
        "name": "Weights Distributing",
        "description": "You are given an undirected unweighted graph consisting of \n    n\n vertices\nand \n    m\n edges (which represents the map of Bertown) and the array of\nprices \n    p\n of length \n    m\n. It is guaranteed that there is a path\nbetween each pair of vertices (districts). Mike has planned a trip from the\nvertex (district) \n    a\n to the vertex (district) \n    b\n and then from the\nvertex (district) \n    b\n to the vertex (district) \n    c\n. He can visit the\nsame district twice or more. But there is one issue: authorities of the city\nwant to set a price for using the road so if someone goes along the road then\nhe should pay the price corresponding to this road (he pays each time he goes\nalong the road). The list of prices that will be used \n    p\n is ready and\nthey just want to distribute it between all roads in the town in such a way\nthat each price from the array corresponds to exactly one road. You are a good\nfriend of Mike (and suddenly a mayor of Bertown) and want to help him to make\nhis trip as cheap as possible. So, your task is to distribute prices between\nroads in such a way that if Mike chooses the optimal path then the price of\nthe trip is the minimum possible. Note that you cannot rearrange prices after\nthe start of the trip. You have to answer \n    t\n independent test cases.\nInput The first line of the input contains one integer \n    t\n (\n    1 \n    \u2264 t\n    \n    \u2264 10^4\n) \u2014 the number of test cases. Then \n    t\n test cases follow. The\nfirst line of the test case contains five integers \n    n, m, a, b\n and\n\n    c\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n, \n    n-1 \n    \u2264 m \n    \u2264\n    min(\n    n(n-1)/2, 2 \n    \u00b7 10^5)\n, \n    1 \n    \u2264 a, b, c \n    \u2264 n\n) \u2014\nthe number of vertices, the number of edges and districts in Mike's trip. The\nsecond line of the test case contains \n    m\n integers \n    p_1, p_2, \n    \u2026,\n    p_m\n (\n    1 \n    \u2264 p_i \n    \u2264 10^9\n), where \n    p_i\n is the \n    i\n-th price\nfrom the array. The following \n    m\n lines of the test case denote edges:\nedge \n    i\n is represented by a pair of integers \n    v_i\n, \n    u_i\n (\n    1\n    \n    \u2264 v_i, u_i \n    \u2264 n\n, \n    u_i \n     v_i\n), which are the indices of\nvertices connected by the edge. There are no loops or multiple edges in the\ngiven graph, i. e. for each pair (\n    v_i, u_i\n) there are no other pairs\n(\n    v_i, u_i\n) or (\n    u_i, v_i\n) in the array of edges, and for each pair\n\n    (v_i, u_i)\n the condition \n    v_i \n     u_i\n is satisfied. It is\nguaranteed that the given graph is connected. It is guaranteed that the sum of\n\n    n\n (as well as the sum of \n    m\n) does not exceed \n    2 \n    \u00b7 10^5\n\n(\n    \u2211 n \n    \u2264 2 \n    \u00b7 10^5\n, \n    \u2211 m \n    \u2264 2 \n    \u00b7 10^5\n).\nOutput For each test case, print the answer \u2014 the minimum possible price of\nMike's trip if you distribute prices between edges optimally. Example Input 2\n4 3 2 3 4 1 2 3 1 2 1 3 1 4 7 9 1 5 7 2 10 4 8 5 6 7 3 3 1 2 1 3 1 4 3 2 3 5 4\n2 5 6 1 7 6 7 Output 7 12 Note One of the possible solution to the first test\ncase of the example: One of the possible solution to the second test case of\nthe example:\n\n",
        "cf_contest_id": 1343,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "graphs",
            "greedy",
            "shortest paths",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n4 3 2 3 4\r\n1 2 3\r\n1 2\r\n1 3\r\n1 4\r\n7 9 1 5 7\r\n2 10 4 8 5 6 7 3 3\r\n1 2\r\n1 3\r\n1 4\r\n3 2\r\n3 5\r\n4 2\r\n5 6\r\n1 7\r\n6 7\r\n",
                "7\r\n12\r\n"
            ]
        ],
        "private_cases": []
    }
]