[
    {
        "name": "Arthur and Walls",
        "description": "Finally it is a day when Arthur has enough money for buying an apartment. He\nfound a great option close to the center of the city with a nice price. Plan\nof the apartment found by Arthur looks like a rectangle n \u00d7 m consisting of\nsquares of size 1 \u00d7 1. Each of those squares contains either a wall (such\nsquare is denoted by a symbol \"*\" on the plan) or a free space (such square is\ndenoted on the plan by a symbol \".\"). Room in an apartment is a maximal\nconnected area consisting of free squares. Squares are considered adjacent if\nthey share a common side. The old Arthur dream is to live in an apartment\nwhere all rooms are rectangles. He asks you to calculate minimum number of\nwalls you need to remove in order to achieve this goal. After removing a wall\nfrom a square it becomes a free square. While removing the walls it is\npossible that some rooms unite into a single one. Input The first line of the\ninput contains two integers n, m (1 \u2264 n, m \u2264 2000) denoting the size of the\nArthur apartments. Following n lines each contain m symbols \u2014 the plan of the\napartment. If the cell is denoted by a symbol \"*\" then it contains a wall. If\nthe cell is denoted by a symbol \".\" then it this cell is free from walls and\nalso this cell is contained in some of the rooms. Output Output n rows each\nconsisting of m symbols that show how the Arthur apartment plan should look\nlike after deleting the minimum number of walls in order to make each room\n(maximum connected area free from walls) be a rectangle. If there are several\npossible answers, output any of them. Examples Input 5 5 .*.*. ***** .*.*.\n***** .*.*. Output .*.*. ***** .*.*. ***** .*.*. Input 6 7 ***.*.* ..*.*.*\n*.*.*.* *.*.*.* ..*...* ******* Output ***...* ..*...* ..*...* ..*...* ..*...*\n******* Input 4 5 ..... ..... ..*** ..*.. Output ..... ..... ..... .....\n\n",
        "cf_contest_id": 525,
        "cf_index": "D",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "graphs",
            "greedy",
            "shortest paths"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5 5\r\n.*.*.\r\n*****\r\n.*.*.\r\n*****\r\n.*.*.\r\n",
                ".*.*.\r\n*****\r\n.*.*.\r\n*****\r\n.*.*.\r\n"
            ],
            [
                "6 7\r\n***.*.*\r\n..*.*.*\r\n*.*.*.*\r\n*.*.*.*\r\n..*...*\r\n*******\r\n",
                "***...*\r\n..*...*\r\n..*...*\r\n..*...*\r\n..*...*\r\n*******\r\n"
            ],
            [
                "4 5\r\n.....\r\n.....\r\n..***\r\n..*..\r\n",
                ".....\r\n.....\r\n.....\r\n.....\r\n"
            ]
        ],
        "private_cases": [
            [
                "6 6\r\n******\r\n*.*..*\r\n*.****\r\n****.*\r\n*..*.*\r\n******\r\n",
                "******\r\n*.*..*\r\n*.****\r\n****.*\r\n*..*.*\r\n******\r\n"
            ],
            [
                "4 4\r\n.*..\r\n.***\r\n***.\r\n..*.\r\n",
                ".*..\r\n.***\r\n***.\r\n..*.\r\n"
            ],
            [
                "3 5\r\n..*..\r\n**.**\r\n..*..\r\n",
                "..*..\r\n**.**\r\n..*..\r\n"
            ],
            [
                "6 3\r\n.*.\r\n.*.\r\n*.*\r\n.*.\r\n.*.\r\n.*.\r\n",
                ".*.\r\n.*.\r\n*.*\r\n.*.\r\n.*.\r\n.*.\r\n"
            ],
            [
                "5 5\r\n..*..\r\n..*..\r\n**.**\r\n..*..\r\n..*..\r\n",
                "..*..\r\n..*..\r\n**.**\r\n..*..\r\n..*..\r\n"
            ],
            [
                "4 4\r\n**.*\r\n.***\r\n***.\r\n..**\r\n",
                "**.*\r\n.***\r\n***.\r\n..**\r\n"
            ],
            [
                "4 4\r\n.*..\r\n.***\r\n***.\r\n*.*.\r\n",
                ".*..\r\n.***\r\n***.\r\n*.*.\r\n"
            ],
            [
                "6 3\r\n.*.\r\n**.\r\n*.*\r\n.**\r\n**.\r\n.*.\r\n",
                ".*.\r\n**.\r\n*.*\r\n.**\r\n**.\r\n.*.\r\n"
            ],
            [
                "1 1\r\n.\r\n",
                ".\r\n"
            ],
            [
                "1 1\r\n*\r\n",
                "*\r\n"
            ],
            [
                "1 2\r\n.*\r\n",
                ".*\r\n"
            ],
            [
                "2 1\r\n.\r\n.\r\n",
                ".\r\n.\r\n"
            ],
            [
                "2 2\r\n**\r\n**\r\n",
                "**\r\n**\r\n"
            ],
            [
                "2 2\r\n.*\r\n*.\r\n",
                ".*\r\n*.\r\n"
            ],
            [
                "2 2\r\n*.\r\n..\r\n",
                "..\r\n..\r\n"
            ],
            [
                "2 2\r\n.*\r\n.*\r\n",
                ".*\r\n.*\r\n"
            ],
            [
                "5 2\r\n..\r\n.*\r\n*.\r\n.*\r\n.*\r\n",
                "..\r\n..\r\n..\r\n..\r\n..\r\n"
            ],
            [
                "1 1\r\n*\r\n",
                "*\r\n"
            ],
            [
                "1 1\r\n.\r\n",
                ".\r\n"
            ]
        ]
    }
]