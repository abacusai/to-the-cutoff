[
    {
        "name": "Game of Robots",
        "description": "In late autumn evening n robots gathered in the cheerful company of friends.\nEach robot has a unique identifier \u2014 an integer from 1 to 10^9. At some\nmoment, robots decided to play the game \"Snowball\". Below there are the rules\nof this game. First, all robots stand in a row. Then the first robot says his\nidentifier. After that the second robot says the identifier of the first robot\nand then says his own identifier. Then the third robot says the identifier of\nthe first robot, then says the identifier of the second robot and after that\nsays his own. This process continues from left to right until the n-th robot\nsays his identifier. Your task is to determine the k-th identifier to be\npronounced. Input The first line contains two positive integers n and k (1 \u2264 n\n\u2264 100 000, 1 \u2264 k \u2264 min(2\u00b710^9, n\u00b7(n + 1) / 2). The second line contains the\nsequence id1, id2, ..., idn (1 \u2264 idi \u2264 10^9) \u2014 identifiers of roborts. It is\nguaranteed that all identifiers are different. Output Print the k-th\npronounced identifier (assume that the numeration starts from 1). Examples\nInput 2 2 1 2 Output 1 Input 4 5 10 4 18 3 Output 4 Note In the first sample\nidentifiers of robots will be pronounced in the following order: 1, 1, 2. As k\n= 2, the answer equals to 1. In the second test case identifiers of robots\nwill be pronounced in the following order: 10, 10, 4, 10, 4, 18, 10, 4, 18, 3.\nAs k = 5, the answer equals to 4.\n\n",
        "cf_contest_id": 670,
        "cf_index": "B",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 2\r\n1 2\r\n",
                "1\r\n"
            ],
            [
                "4 5\r\n10 4 18 3\r\n",
                "4\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n4\r\n",
                "4\r\n"
            ],
            [
                "2 1\r\n5 1\r\n",
                "5\r\n"
            ],
            [
                "2 2\r\n1 4\r\n",
                "1\r\n"
            ],
            [
                "2 3\r\n6 7\r\n",
                "7\r\n"
            ],
            [
                "3 1\r\n4 5 6\r\n",
                "4\r\n"
            ],
            [
                "3 2\r\n4 5 6\r\n",
                "4\r\n"
            ],
            [
                "3 3\r\n4 5 6\r\n",
                "5\r\n"
            ],
            [
                "3 4\r\n4 5 6\r\n",
                "4\r\n"
            ],
            [
                "3 5\r\n4 5 6\r\n",
                "5\r\n"
            ],
            [
                "3 6\r\n4 5 6\r\n",
                "6\r\n"
            ],
            [
                "4 1\r\n5 1000000000 999999999 12\r\n",
                "5\r\n"
            ],
            [
                "4 2\r\n5 1000000000 999999999 12\r\n",
                "5\r\n"
            ],
            [
                "4 3\r\n5 1000000000 999999999 12\r\n",
                "1000000000\r\n"
            ],
            [
                "4 4\r\n5 1000000000 999999999 12\r\n",
                "5\r\n"
            ],
            [
                "4 5\r\n5 1000000000 999999999 12\r\n",
                "1000000000\r\n"
            ],
            [
                "4 6\r\n5 1000000000 999999999 12\r\n",
                "999999999\r\n"
            ],
            [
                "4 7\r\n5 1000000000 999999999 12\r\n",
                "5\r\n"
            ],
            [
                "4 8\r\n5 1000000000 999999999 12\r\n",
                "1000000000\r\n"
            ],
            [
                "4 9\r\n5 1000000000 999999999 12\r\n",
                "999999999\r\n"
            ],
            [
                "4 10\r\n5 1000000000 999999999 12\r\n",
                "12\r\n"
            ]
        ]
    }
]