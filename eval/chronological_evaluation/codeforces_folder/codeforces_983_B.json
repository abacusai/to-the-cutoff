[
    {
        "name": "XOR-pyramid",
        "description": "For an array \n    b\n of length \n    m\n we define the function \n    f\n as \n    f(b) = \n     b[1]    \n      \n    if  m = 1 \n    \n    \n     f(b[1]\n    \n    \u2295 b[2],b[2] \n    \u2295 b[3],\n    \u2026,b[m-1] \n    \u2295 b[m])    \n      \n    otherwise,\n where \n    \u2295\n is bitwise\nexclusive OR. For example,\n\n    f(1,2,4,8)=f(1\n    \u22952,2\n    \u22954,4\n    \u22958)=f(3,6,12)=f(3\n    \u22956,6\n    \u229512)=f(5,10)=f(5\n    \u229510)=f(15)=15\n\nYou are given an array \n    a\n and a few queries. Each query is represented as\ntwo integers \n    l\n and \n    r\n. The answer is the maximum value of \n    f\n\non all continuous subsegments of the array \n    a_l, a_l+1, \n    \u2026, a_r\n.\nInput The first line contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    5000\n) \u2014 the length of \n    a\n. The second line contains \n    n\n integers\n\n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 2^30-1\n) \u2014 the elements\nof the array. The third line contains a single integer \n    q\n (\n    1 \n    \u2264 q\n    \n    \u2264 100\n     000\n) \u2014 the number of queries. Each of the next \n    q\n lines\ncontains a query represented as two integers \n    l\n, \n    r\n (\n    1 \n    \u2264 l\n    \n    \u2264 r \n    \u2264 n\n). Output Print \n    q\n lines \u2014 the answers for the queries.\nExamples Input 3 8 4 1 2 2 3 1 2 Output 5 12 Input 6 1 2 4 8 16 32 4 1 6 2 5 3\n4 1 2 Output 60 30 12 3 Note In first sample in both queries the maximum value\nof the function is reached on the subsegment that is equal to the whole\nsegment. In second sample, optimal segment for first query are \n    [3,6]\n,\nfor second query \u2014 \n    [2,5]\n, for third \u2014 \n    [3,4]\n, for fourth \u2014\n\n    [1,2]\n.\n\n",
        "cf_contest_id": 983,
        "cf_index": "B",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "dp"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n8 4 1\r\n2\r\n2 3\r\n1 2\r\n",
                "5\r\n12\r\n"
            ],
            [
                "6\r\n1 2 4 8 16 32\r\n4\r\n1 6\r\n2 5\r\n3 4\r\n1 2\r\n",
                "60\r\n30\r\n12\r\n3\r\n"
            ]
        ],
        "private_cases": []
    }
]