[
    {
        "name": "Black and White Tree",
        "description": "The board has got a painted tree graph, consisting of n nodes. Let us remind\nyou that a non-directed graph is called a tree if it is connected and doesn't\ncontain any cycles. Each node of the graph is painted black or white in such a\nmanner that there aren't two nodes of the same color, connected by an edge.\nEach edge contains its value written on it as a non-negative integer. A bad\nboy Vasya came up to the board and wrote number sv near each node v \u2014 the sum\nof values of all edges that are incident to this node. Then Vasya removed the\nedges and their values from the board. Your task is to restore the original\ntree by the node colors and numbers sv. Input The first line of the input\ncontains a single integer n (2 \u2264 n \u2264 10^5) \u2014 the number of nodes in the tree.\nNext n lines contain pairs of space-separated integers ci, si (0 \u2264 ci \u2264 1, 0 \u2264\nsi \u2264 10^9), where ci stands for the color of the i-th vertex (0 is for white,\n1 is for black), and si represents the sum of values of the edges that are\nincident to the i-th vertex of the tree that is painted on the board. Output\nPrint the description of n - 1 edges of the tree graph. Each description is a\ngroup of three integers vi, ui, wi (1 \u2264 vi, ui \u2264 n, vi \u2260 ui, 0 \u2264 wi \u2264 10^9),\nwhere vi and ui \u2014 are the numbers of the nodes that are connected by the i-th\nedge, and wi is its value. Note that the following condition must fulfill cvi\n\u2260 cui. It is guaranteed that for any input data there exists at least one\ngraph that meets these data. If there are multiple solutions, print any of\nthem. You are allowed to print the edges in any order. As you print the\nnumbers, separate them with spaces. Examples Input 3 1 3 1 2 0 5 Output 3 1 3\n3 2 2 Input 6 1 0 0 3 1 8 0 2 0 3 0 0 Output 2 3 3 5 3 3 4 3 2 1 6 0 2 1 0\n\n",
        "cf_contest_id": 260,
        "cf_index": "D",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dsu",
            "graphs",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 3\r\n1 2\r\n0 5\r\n",
                "3 2 2\r\n3 1 3\r\n"
            ],
            [
                "6\r\n1 0\r\n0 3\r\n1 8\r\n0 2\r\n0 3\r\n0 0\r\n",
                "6 3 0\r\n5 3 3\r\n4 3 2\r\n2 3 3\r\n2 1 0\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n0 0\r\n1 0\r\n",
                "1 2 0\r\n"
            ],
            [
                "5\r\n1 11\r\n0 9\r\n1 4\r\n0 4\r\n0 2\r\n",
                "5 3 2\r\n4 3 2\r\n4 1 2\r\n2 1 9\r\n"
            ],
            [
                "10\r\n0 24\r\n1 164\r\n0 206\r\n0 45\r\n1 110\r\n0 66\r\n1 59\r\n1 92\r\n0 152\r\n1 68\r\n",
                "9 10 68\r\n9 8 84\r\n6 8 8\r\n6 7 58\r\n4 7 1\r\n4 5 44\r\n3 5 66\r\n3 2 140\r\n1 2 24\r\n"
            ],
            [
                "20\r\n0 569\r\n1 328\r\n1 74\r\n1 88\r\n1 90\r\n1 124\r\n0 78\r\n0 39\r\n1 9\r\n1 59\r\n1 41\r\n1 73\r\n1 45\r\n0 45\r\n0 13\r\n1 39\r\n0 24\r\n0 37\r\n0 95\r\n0 70\r\n",
                "20 16 39\r\n20 13 31\r\n19 13 14\r\n19 12 73\r\n19 11 8\r\n18 11 33\r\n18 10 4\r\n17 10 24\r\n15 10 13\r\n14 10 18\r\n14 9 9\r\n14 6 18\r\n8 6 39\r\n7 6 67\r\n7 5 11\r\n1 5 79\r\n1 4 88\r\n1 3 74\r\n1 2 328\r\n"
            ],
            [
                "6\r\n0 0\r\n1 0\r\n0 0\r\n1 0\r\n0 0\r\n1 0\r\n",
                "5 6 0\r\n3 6 0\r\n1 6 0\r\n1 4 0\r\n1 2 0\r\n"
            ],
            [
                "4\r\n1 0\r\n1 0\r\n0 0\r\n0 0\r\n",
                "4 2 0\r\n3 2 0\r\n3 1 0\r\n"
            ],
            [
                "9\r\n0 3\r\n1 8\r\n0 2\r\n0 3\r\n1 0\r\n1 0\r\n1 0\r\n1 0\r\n1 0\r\n",
                "4 9 0\r\n4 8 0\r\n4 7 0\r\n4 6 0\r\n4 5 0\r\n4 2 3\r\n3 2 2\r\n1 2 3\r\n"
            ],
            [
                "6\r\n0 0\r\n0 0\r\n0 0\r\n1 0\r\n1 0\r\n1 0\r\n",
                "3 6 0\r\n2 6 0\r\n1 6 0\r\n1 5 0\r\n1 4 0\r\n"
            ],
            [
                "5\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n1 0\r\n",
                "4 5 0\r\n3 5 0\r\n2 5 0\r\n1 5 0\r\n"
            ],
            [
                "4\r\n0 0\r\n1 0\r\n0 0\r\n1 0\r\n",
                "3 4 0\r\n1 4 0\r\n1 2 0\r\n"
            ],
            [
                "5\r\n1 0\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n",
                "5 1 0\r\n4 1 0\r\n3 1 0\r\n2 1 0\r\n"
            ],
            [
                "6\r\n1 1\r\n1 1\r\n1 1\r\n0 1\r\n0 1\r\n0 1\r\n",
                "6 3 1\r\n5 3 0\r\n5 2 1\r\n4 2 0\r\n4 1 1\r\n"
            ],
            [
                "7\r\n1 0\r\n1 0\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n",
                "7 2 0\r\n6 2 0\r\n5 2 0\r\n4 2 0\r\n3 2 0\r\n3 1 0\r\n"
            ]
        ]
    }
]