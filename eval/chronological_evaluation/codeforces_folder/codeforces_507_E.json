[
    {
        "name": "Breaking Good",
        "description": "Breaking Good is a new video game which a lot of gamers want to have. There is\na certain level in the game that is really difficult even for experienced\ngamers. Walter William, the main character of the game, wants to join a gang\ncalled Los Hermanos (The Brothers). The gang controls the whole country which\nconsists of n cities with m bidirectional roads connecting them. There is no\nroad is connecting a city to itself and for any two cities there is at most\none road between them. The country is connected, in the other words, it is\npossible to reach any city from any other city using the given roads. The\nroads aren't all working. There are some roads which need some more work to be\nperformed to be completely functioning. The gang is going to rob a bank! The\nbank is located in city 1. As usual, the hardest part is to escape to their\nheadquarters where the police can't get them. The gang's headquarters is in\ncity n. To gain the gang's trust, Walter is in charge of this operation, so he\ncame up with a smart plan. First of all the path which they are going to use\non their way back from city 1 to their headquarters n must be as short as\npossible, since it is important to finish operation as fast as possible. Then,\ngang has to blow up all other roads in country that don't lay on this path, in\norder to prevent any police reinforcements. In case of non-working road, they\ndon't have to blow up it as it is already malfunctional. If the chosen path\nhas some roads that doesn't work they'll have to repair those roads before the\noperation. Walter discovered that there was a lot of paths that satisfied the\ncondition of being shortest possible so he decided to choose among them a path\nthat minimizes the total number of affected roads (both roads that have to be\nblown up and roads to be repaired). Can you help Walter complete his task and\ngain the gang's trust? Input The first line of input contains two integers n,\nm (2 \u2264 n \u2264 10^5, ), the number of cities and number of roads respectively. In\nfollowing m lines there are descriptions of roads. Each description consists\nof three integers x, y, z (1 \u2264 x, y \u2264 n, ) meaning that there is a road\nconnecting cities number x and y. If z = 1, this road is working, otherwise it\nis not. Output In the first line output one integer k, the minimum possible\nnumber of roads affected by gang. In the following k lines output three\nintegers describing roads that should be affected. Each line should contain\nthree integers x, y, z (1 \u2264 x, y \u2264 n, ), cities connected by a road and the\nnew state of a road. z = 1 indicates that the road between cities x and y\nshould be repaired and z = 0 means that road should be blown up. You may\noutput roads in any order. Each affected road should appear exactly once. You\nmay output cities connected by a single road in any order. If you output a\nroad, it's original state should be different from z. After performing all\noperations accroding to your plan, there should remain working only roads\nlying on some certain shortest past between city 1 and n. If there are\nmultiple optimal answers output any. Examples Input 2 1 1 2 0 Output 1 1 2 1\nInput 4 4 1 2 1 1 3 0 2 3 1 3 4 1 Output 3 1 2 0 1 3 1 2 3 0 Input 8 9 1 2 0 8\n3 0 2 3 1 1 4 1 8 7 0 1 5 1 4 6 1 5 7 0 6 8 0 Output 3 2 3 0 1 5 0 6 8 1 Note\nIn the first test the only path is 1 - 2 In the second test the only shortest\npath is 1 - 3 - 4 In the third test there are multiple shortest paths but the\noptimal is 1 - 4 - 6 - 8\n\n",
        "cf_contest_id": 507,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "shortest paths"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 1\r\n1 2 0\r\n",
                "1\r\n1 2 1\r\n"
            ],
            [
                "4 4\r\n1 2 1\r\n1 3 0\r\n2 3 1\r\n3 4 1\r\n",
                "3\r\n1 2 0\r\n1 3 1\r\n2 3 0\r\n"
            ],
            [
                "8 9\r\n1 2 0\r\n8 3 0\r\n2 3 1\r\n1 4 1\r\n8 7 0\r\n1 5 1\r\n4 6 1\r\n5 7 0\r\n6 8 0\r\n",
                "3\r\n2 3 0\r\n1 5 0\r\n6 8 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "9 10\r\n1 2 0\r\n2 3 0\r\n1 4 1\r\n4 5 1\r\n4 6 1\r\n6 7 1\r\n1 7 0\r\n1 8 0\r\n7 8 0\r\n9 7 1\r\n",
                "5\r\n1 4 0\r\n4 5 0\r\n4 6 0\r\n6 7 0\r\n1 7 1\r\n"
            ],
            [
                "5 6\r\n1 2 0\r\n3 2 0\r\n5 1 1\r\n1 3 1\r\n5 3 0\r\n4 3 1\r\n",
                "2\r\n1 3 0\r\n4 3 0\r\n"
            ],
            [
                "15 31\r\n6 2 0\r\n5 15 1\r\n2 3 1\r\n6 9 1\r\n13 12 0\r\n2 7 0\r\n15 3 0\r\n3 5 1\r\n3 8 1\r\n5 8 1\r\n1 9 1\r\n8 4 0\r\n13 2 1\r\n9 12 0\r\n9 2 1\r\n6 13 1\r\n3 1 0\r\n14 9 0\r\n15 2 1\r\n10 15 0\r\n7 10 0\r\n2 8 1\r\n11 7 0\r\n10 9 1\r\n12 11 1\r\n7 15 0\r\n12 2 0\r\n13 11 1\r\n4 6 0\r\n12 7 0\r\n12 1 1\r\n",
                "18\r\n5 15 0\r\n2 3 0\r\n6 9 0\r\n15 3 1\r\n3 5 0\r\n3 8 0\r\n5 8 0\r\n1 9 0\r\n13 2 0\r\n9 2 0\r\n6 13 0\r\n3 1 1\r\n15 2 0\r\n2 8 0\r\n10 9 0\r\n12 11 0\r\n13 11 0\r\n12 1 0\r\n"
            ],
            [
                "5 10\r\n1 2 1\r\n1 3 0\r\n1 4 0\r\n1 5 0\r\n2 3 0\r\n2 4 1\r\n2 5 0\r\n3 4 1\r\n3 5 1\r\n4 5 0\r\n",
                "5\r\n1 2 0\r\n1 5 1\r\n2 4 0\r\n3 4 0\r\n3 5 0\r\n"
            ],
            [
                "5 10\r\n1 2 0\r\n1 3 1\r\n1 4 0\r\n1 5 0\r\n2 3 0\r\n2 4 0\r\n2 5 1\r\n3 4 0\r\n3 5 0\r\n4 5 1\r\n",
                "4\r\n1 3 0\r\n1 5 1\r\n2 5 0\r\n4 5 0\r\n"
            ],
            [
                "5 10\r\n1 2 0\r\n1 3 0\r\n1 4 0\r\n1 5 0\r\n2 3 0\r\n2 4 0\r\n2 5 0\r\n3 4 0\r\n3 5 0\r\n4 5 0\r\n",
                "1\r\n1 5 1\r\n"
            ],
            [
                "13 58\r\n9 12 0\r\n8 11 0\r\n4 8 0\r\n2 12 1\r\n9 1 1\r\n10 6 1\r\n5 2 1\r\n3 9 0\r\n8 3 0\r\n9 10 0\r\n8 5 1\r\n11 3 0\r\n11 1 0\r\n2 6 1\r\n12 3 1\r\n11 6 0\r\n1 12 0\r\n2 1 1\r\n11 13 0\r\n6 8 1\r\n11 5 1\r\n8 9 0\r\n1 4 0\r\n12 7 1\r\n5 12 0\r\n11 7 0\r\n10 2 0\r\n5 10 1\r\n9 4 1\r\n7 5 1\r\n2 11 0\r\n13 12 1\r\n10 3 1\r\n1 13 0\r\n7 1 0\r\n6 3 0\r\n7 13 0\r\n4 10 0\r\n7 10 1\r\n12 8 1\r\n2 13 0\r\n3 1 1\r\n5 13 0\r\n4 3 0\r\n8 1 0\r\n4 12 1\r\n11 10 1\r\n10 1 1\r\n1 6 0\r\n8 13 1\r\n5 4 0\r\n9 11 0\r\n10 13 1\r\n8 2 0\r\n10 12 0\r\n6 12 0\r\n1 5 0\r\n11 12 0\r\n",
                "25\r\n2 12 0\r\n9 1 0\r\n10 6 0\r\n5 2 0\r\n8 5 0\r\n2 6 0\r\n12 3 0\r\n2 1 0\r\n6 8 0\r\n11 5 0\r\n12 7 0\r\n5 10 0\r\n9 4 0\r\n7 5 0\r\n13 12 0\r\n10 3 0\r\n1 13 1\r\n7 10 0\r\n12 8 0\r\n3 1 0\r\n4 12 0\r\n11 10 0\r\n10 1 0\r\n8 13 0\r\n10 13 0\r\n"
            ],
            [
                "6 6\r\n1 2 1\r\n2 3 1\r\n3 4 1\r\n3 5 1\r\n4 6 1\r\n4 5 1\r\n",
                "2\r\n3 5 0\r\n4 5 0\r\n"
            ],
            [
                "9 12\r\n1 2 1\r\n2 3 1\r\n3 1 0\r\n2 4 1\r\n4 5 0\r\n2 5 0\r\n4 6 0\r\n4 7 1\r\n6 7 0\r\n5 8 1\r\n8 9 1\r\n5 9 1\r\n",
                "6\r\n2 3 0\r\n2 4 0\r\n2 5 1\r\n4 7 0\r\n5 8 0\r\n8 9 0\r\n"
            ],
            [
                "12 48\r\n9 5 0\r\n6 3 0\r\n2 4 1\r\n6 8 1\r\n9 2 1\r\n7 2 0\r\n3 12 1\r\n6 12 1\r\n2 5 0\r\n11 4 1\r\n7 12 0\r\n8 11 1\r\n11 2 1\r\n2 6 0\r\n9 1 0\r\n1 3 0\r\n8 12 0\r\n11 5 1\r\n10 6 0\r\n10 9 1\r\n1 12 1\r\n10 12 1\r\n1 10 0\r\n10 2 0\r\n1 8 0\r\n7 4 1\r\n9 3 0\r\n11 7 0\r\n4 3 0\r\n1 2 0\r\n8 9 0\r\n11 12 0\r\n12 9 1\r\n7 5 0\r\n3 5 0\r\n5 6 1\r\n3 10 0\r\n11 10 1\r\n2 3 0\r\n4 9 0\r\n1 5 1\r\n10 5 1\r\n6 9 1\r\n10 4 0\r\n9 7 0\r\n4 12 0\r\n3 8 1\r\n6 11 1\r\n",
                "20\r\n2 4 0\r\n6 8 0\r\n9 2 0\r\n3 12 0\r\n6 12 0\r\n11 4 0\r\n8 11 0\r\n11 2 0\r\n11 5 0\r\n10 9 0\r\n10 12 0\r\n7 4 0\r\n12 9 0\r\n5 6 0\r\n11 10 0\r\n1 5 0\r\n10 5 0\r\n6 9 0\r\n3 8 0\r\n6 11 0\r\n"
            ],
            [
                "6 6\r\n1 2 1\r\n2 3 1\r\n3 4 1\r\n3 5 1\r\n5 6 1\r\n4 5 1\r\n",
                "2\r\n3 4 0\r\n4 5 0\r\n"
            ],
            [
                "6 7\r\n1 2 1\r\n1 3 1\r\n2 4 1\r\n2 5 1\r\n3 5 1\r\n3 6 1\r\n5 6 1\r\n",
                "5\r\n1 2 0\r\n2 4 0\r\n2 5 0\r\n3 5 0\r\n5 6 0\r\n"
            ]
        ]
    }
]