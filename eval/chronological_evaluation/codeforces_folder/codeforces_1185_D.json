[
    {
        "name": "Extra Element",
        "description": "A sequence \n    a_1, a_2, \n    \u2026, a_k\n is called an arithmetic progression if\nfor each \n    i\n from \n    1\n to \n    k\n elements satisfy the condition \n    a_i\n    = a_1 + c \n    \u00b7 (i - 1)\n for some fixed \n    c\n. For example, these five\nsequences are arithmetic progressions: \n    [5, 7, 9, 11]\n, \n    [101]\n,\n\n    [101, 100, 99]\n, \n    [13, 97]\n and \n    [5, 5, 5, 5, 5]\n. And these four\nsequences aren't arithmetic progressions: \n    [3, 1, 2]\n, \n    [1, 2, 4, 8]\n,\n\n    [1, -1, 1, -1]\n and \n    [1, 2, 3, 3, 3]\n. You are given a sequence of\nintegers \n    b_1, b_2, \n    \u2026, b_n\n. Find any index \n    j\n (\n    1 \n    \u2264 j\n    \n    \u2264 n\n), such that if you delete \n    b_j\n from the sequence, you can\nreorder the remaining \n    n-1\n elements, so that you will get an arithmetic\nprogression. If there is no such index, output the number -1. Input The first\nline of the input contains one integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264\n    2\n    \u00b710^5\n) \u2014 length of the sequence \n    b\n. The second line contains\n\n    n\n integers \n    b_1, b_2, \n    \u2026, b_n\n (\n    -10^9 \n    \u2264 b_i \n    \u2264\n    10^9\n) \u2014 elements of the sequence \n    b\n. Output Print such index \n    j\n\n(\n    1 \n    \u2264 j \n    \u2264 n\n), so that if you delete the \n    j\n-th element from\nthe sequence, you can reorder the remaining elements, so that you will get an\narithmetic progression. If there are multiple solutions, you are allowed to\nprint any of them. If there is no such index, print -1. Examples Input 5 2 6 8\n7 4 Output 4 Input 8 1 2 3 4 5 6 7 8 Output 1 Input 4 1 2 4 8 Output -1 Note\nNote to the first example. If you delete the \n    4\n-th element, you can get\nthe arithmetic progression \n    [2, 4, 6, 8]\n. Note to the second example. The\noriginal sequence is already arithmetic progression, so you can delete\n\n    1\n-st or last element and you will get an arithmetical progression again.\n\n",
        "cf_contest_id": 1185,
        "cf_index": "D",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n2 6 8 7 4\r\n",
                "4\r\n"
            ],
            [
                "8\r\n1 2 3 4 5 6 7 8\r\n",
                "1\r\n"
            ],
            [
                "4\r\n1 2 4 8\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n3 4\r\n",
                "1\r\n"
            ],
            [
                "7\r\n1 2 4 6 8 10 12\r\n",
                "1\r\n"
            ],
            [
                "7\r\n1 2 3 4 5 6 8\r\n",
                "7\r\n"
            ],
            [
                "7\r\n1 2 4 8 10 12 6\r\n",
                "1\r\n"
            ],
            [
                "7\r\n3 8 1 4 2 5 6\r\n",
                "2\r\n"
            ],
            [
                "10\r\n5 5 5 5 5 5 5 5 5 5\r\n",
                "1\r\n"
            ],
            [
                "10\r\n5 5 5 5 5 5 3 5 5 5\r\n",
                "7\r\n"
            ],
            [
                "8\r\n3 1 4 1 5 9 2 6\r\n",
                "-1\r\n"
            ],
            [
                "5\r\n1 10 20 50 100\r\n",
                "-1\r\n"
            ],
            [
                "3\r\n1 2 7\r\n",
                "1\r\n"
            ],
            [
                "4\r\n1 2 4 7\r\n",
                "2\r\n"
            ],
            [
                "9\r\n9 6 3 12 17 21 18 15 24\r\n",
                "5\r\n"
            ],
            [
                "5\r\n-2 -1 0 1 2\r\n",
                "1\r\n"
            ],
            [
                "6\r\n-1000000000 -500000000 -1 0 500000000 1000000000\r\n",
                "3\r\n"
            ],
            [
                "6\r\n-999999998 -999999999 -1000000000 -999999995 -999999997 -999999995\r\n",
                "-1\r\n"
            ],
            [
                "8\r\n1 -1 1 -1 1 -1 1 -1\r\n",
                "-1\r\n"
            ],
            [
                "5\r\n10 20 30 40 20\r\n",
                "2\r\n"
            ],
            [
                "5\r\n10 20 30 40 -1\r\n",
                "5\r\n"
            ],
            [
                "5\r\n10 20 30 40 1\r\n",
                "5\r\n"
            ],
            [
                "5\r\n10 20 30 40 9\r\n",
                "5\r\n"
            ],
            [
                "5\r\n10 20 30 40 10\r\n",
                "1\r\n"
            ],
            [
                "5\r\n10 20 30 40 11\r\n",
                "5\r\n"
            ],
            [
                "5\r\n10 20 30 40 19\r\n",
                "5\r\n"
            ],
            [
                "5\r\n10 20 30 40 21\r\n",
                "5\r\n"
            ],
            [
                "5\r\n10 20 30 40 40\r\n",
                "5\r\n"
            ],
            [
                "5\r\n10 20 30 40 41\r\n",
                "5\r\n"
            ],
            [
                "3\r\n0 1000000000 -1000000000\r\n",
                "1\r\n"
            ],
            [
                "6\r\n-999999998 -999999999 -1000000000 -999999996 -999999997 -999999996\r\n",
                "6\r\n"
            ],
            [
                "2\r\n-1000000000 1000000000\r\n",
                "1\r\n"
            ],
            [
                "4\r\n3 5 5 7\r\n",
                "2\r\n"
            ],
            [
                "5\r\n2 3 4 6 8\r\n",
                "2\r\n"
            ],
            [
                "5\r\n2 5 8 10 13\r\n",
                "-1\r\n"
            ]
        ]
    }
]