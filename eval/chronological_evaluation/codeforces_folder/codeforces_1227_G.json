[
    {
        "name": "Not Same",
        "description": "You are given an integer array \n    a_1, a_2, \n    \u2026, a_n\n, where \n    a_i\n\nrepresents the number of blocks at the \n    i\n-th position. It is guaranteed\nthat \n    1 \n    \u2264 a_i \n    \u2264 n\n. In one operation you can choose a subset of\nindices of the given array and remove one block in each of these indices. You\ncan't remove a block from a position without blocks. All subsets that you\nchoose should be different (unique). You need to remove all blocks in the\narray using at most \n    n+1\n operations. It can be proved that the answer\nalways exists. Input The first line contains a single integer \n    n\n (\n    1\n    \n    \u2264 n \n    \u2264 10^3\n) \u2014 length of the given array. The second line contains\n\n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n) \u2014\nnumbers of blocks at positions \n    1, 2, \n    \u2026, n\n. Output In the first\nline print an integer \n    op\n (\n    0 \n    \u2264 op \n    \u2264 n+1\n). In each of the\nfollowing \n    op\n lines, print a binary string \n    s\n of length \n    n\n. If\n\n    s_i=\n'0', it means that the position \n    i\n is not in the chosen subset.\nOtherwise, \n    s_i\n should be equal to '1' and the position \n    i\n is in the\nchosen subset. All binary strings should be distinct (unique) and \n    a_i\n\nshould be equal to the sum of \n    s_i\n among all chosen binary strings. If\nthere are multiple possible answers, you can print any. It can be proved that\nan answer always exists. Examples Input 5 5 5 5 5 5 Output 6 11111 01111 10111\n11011 11101 11110 Input 5 5 1 1 1 1 Output 5 11000 10000 10100 10010 10001\nInput 5 4 1 5 3 4 Output 5 11111 10111 10101 00111 10100 Note In the first\nexample, the number of blocks decrease like that: \n    { 5,5,5,5,5\n    \n    }\n    \u2192\n    { 4,4,4,4,4 \n    }\n    \u2192\n    { 4,3,3,3,3\n    \n    }\n    \u2192\n    { 3,3,2,2,2 \n    }\n    \u2192\n    { 2,2,2,1,1\n    \n    }\n    \u2192\n    { 1,1,1,1,0 \n    }\n    \u2192\n    { 0,0,0,0,0\n    \n    }\n. And we can note that each operation differs from others.\n\n",
        "cf_contest_id": 1227,
        "cf_index": "G",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n5 5 5 5 5\r\n",
                "6\r\n01111\r\n10111\r\n11011\r\n11101\r\n11110\r\n11111\r\n"
            ],
            [
                "5\r\n5 1 1 1 1\r\n",
                "6\r\n00000\r\n10000\r\n11000\r\n10100\r\n10010\r\n10001\r\n"
            ],
            [
                "5\r\n4 1 5 3 4\r\n",
                "6\r\n00011\r\n00100\r\n10100\r\n10101\r\n10111\r\n11111\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n8 1 2 1 8 1 7 8 4 7\r\n",
                "11\r\n0000000001\r\n1000000000\r\n1000100000\r\n1000100100\r\n1000101100\r\n1000101101\r\n1000101111\r\n1010101111\r\n1110101111\r\n0001101111\r\n0000011101\r\n"
            ],
            [
                "1\r\n1\r\n",
                "2\r\n0\r\n1\r\n"
            ],
            [
                "10\r\n2 2 2 1 1 2 2 2 2 1\r\n",
                "11\r\n0000000000\r\n1000000000\r\n1100000000\r\n0110000000\r\n0010010000\r\n0000011000\r\n0000001100\r\n0000000110\r\n0001000010\r\n0000100000\r\n0000000001\r\n"
            ],
            [
                "2\r\n1 1\r\n",
                "3\r\n00\r\n10\r\n01\r\n"
            ],
            [
                "2\r\n1 2\r\n",
                "3\r\n00\r\n01\r\n11\r\n"
            ],
            [
                "7\r\n1 1 1 1 1 1 1\r\n",
                "8\r\n0000000\r\n1000000\r\n0100000\r\n0010000\r\n0001000\r\n0000100\r\n0000010\r\n0000001\r\n"
            ],
            [
                "8\r\n2 2 6 2 6 2 6 6\r\n",
                "9\r\n00000101\r\n00100000\r\n00101000\r\n00101010\r\n00101011\r\n10101011\r\n11101011\r\n01011011\r\n00010111\r\n"
            ],
            [
                "8\r\n6 2 6 6 6 2 6 6\r\n",
                "9\r\n00001111\r\n10000011\r\n10100001\r\n10110000\r\n10111000\r\n10111010\r\n10111011\r\n01111011\r\n01011111\r\n"
            ],
            [
                "8\r\n2 2 6 2 6 2 2 2\r\n",
                "9\r\n00000001\r\n00100000\r\n00101000\r\n10101000\r\n11101000\r\n01111000\r\n00111100\r\n00001110\r\n00000011\r\n"
            ],
            [
                "6\r\n6 6 1 1 1 1\r\n",
                "7\r\n010000\r\n100000\r\n110000\r\n111000\r\n110100\r\n110010\r\n110001\r\n"
            ],
            [
                "8\r\n8 1 8 8 1 1 1 1\r\n",
                "9\r\n00110000\r\n10010000\r\n10100000\r\n10110000\r\n11110000\r\n10111000\r\n10110100\r\n10110010\r\n10110001\r\n"
            ],
            [
                "6\r\n2 5 6 2 5 6\r\n",
                "7\r\n010111\r\n001010\r\n001001\r\n011001\r\n011011\r\n111011\r\n111111\r\n"
            ],
            [
                "7\r\n2 5 6 4 3 3 2\r\n",
                "8\r\n0000001\r\n0010000\r\n0110000\r\n0111000\r\n0111100\r\n0111110\r\n1111110\r\n1000011\r\n"
            ],
            [
                "17\r\n2 1 3 3 1 17 2 2 2 3 1 2 1 3 3 2 1\r\n",
                "18\r\n00000000000000000\r\n00000100000000000\r\n00100100000000000\r\n00110100000000000\r\n00110100010000000\r\n00010100010001000\r\n00000100010001100\r\n10000100000001100\r\n10000110000000100\r\n00000111000000000\r\n00000101100000000\r\n00000100100100000\r\n00000100000100010\r\n01000100000000010\r\n00001100000000000\r\n00000100001000000\r\n00000100000010000\r\n00000100000000001\r\n"
            ],
            [
                "12\r\n12 1 2 1 2 3 3 1 1 3 1 1\r\n",
                "13\r\n000000000000\r\n100000000000\r\n100001000000\r\n100001100000\r\n100001100100\r\n101000100100\r\n101010000100\r\n110010000000\r\n100100000000\r\n100000010000\r\n100000001000\r\n100000000010\r\n100000000001\r\n"
            ]
        ]
    }
]