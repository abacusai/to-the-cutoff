[
    {
        "name": "Suffix Structures",
        "description": "Bizon the Champion isn't just a bison. He also is a favorite of the \"Bizons\"\nteam. At a competition the \"Bizons\" got the following problem: \"You are given\ntwo distinct words (strings of English letters), s and t. You need to\ntransform word s into word t\". The task looked simple to the guys because they\nknow the suffix data structures well. Bizon Senior loves suffix automaton. By\napplying it once to a string, he can remove from this string any single\ncharacter. Bizon Middle knows suffix array well. By applying it once to a\nstring, he can swap any two characters of this string. The guys do not know\nanything about the suffix tree, but it can help them do much more. Bizon the\nChampion wonders whether the \"Bizons\" can solve the problem. Perhaps, the\nsolution do not require both data structures. Find out whether the guys can\nsolve the problem and if they can, how do they do it? Can they solve it either\nonly with use of suffix automaton or only with use of suffix array or they\nneed both structures? Note that any structure may be used an unlimited number\nof times, the structures may be used in any order. Input The first line\ncontains a non-empty word s. The second line contains a non-empty word t.\nWords s and t are different. Each word consists only of lowercase English\nletters. Each word contains at most 100 letters. Output In the single line\nprint the answer to the problem. Print \"need tree\" (without the quotes) if\nword s cannot be transformed into word t even with use of both suffix array\nand suffix automaton. Print \"automaton\" (without the quotes) if you need only\nthe suffix automaton to solve the problem. Print \"array\" (without the quotes)\nif you need only the suffix array to solve the problem. Print \"both\" (without\nthe quotes), if you need both data structures to solve the problem. It's\nguaranteed that if you can solve the problem only with use of suffix array,\nthen it is impossible to solve it only with use of suffix automaton. This is\nalso true for suffix automaton. Examples Input automaton tomat Output\nautomaton Input array arary Output array Input both hot Output both Input need\ntree Output need tree Note In the third sample you can act like that: first\ntransform \"both\" into \"oth\" by removing the first character using the suffix\nautomaton and then make two swaps of the string using the suffix array and get\n\"hot\".\n\n",
        "cf_contest_id": 448,
        "cf_index": "B",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "automaton\r\ntomat\r\n",
                "automaton\r\n"
            ],
            [
                "array\r\narary\r\n",
                "array\r\n"
            ],
            [
                "both\r\nhot\r\n",
                "both\r\n"
            ],
            [
                "need\r\ntree\r\n",
                "need tree\r\n"
            ]
        ],
        "private_cases": [
            [
                "abacaba\r\naaaa\r\n",
                "automaton\r\n"
            ],
            [
                "z\r\nzz\r\n",
                "need tree\r\n"
            ],
            [
                "itwtyhhsdjjffmmoqkkhxjouypznewstyorotxhozlytndehmaxogrohccnqcgkrjrdmnuaogiwmnmsbdaizqkxnkqxxiihbwepc\r\nsnixfywvcntitcefsgqxjcodwtumurcglfmnamnowzbjzmfzspbfuldraiepeeiyasmrsneekydsbvazoqszyjxkjiotushsddet\r\n",
                "need tree\r\n"
            ],
            [
                "y\r\nu\r\n",
                "need tree\r\n"
            ],
            [
                "nbjigpsbammkuuqrxfnmhtimwpflrflehffykbylmnxgadldchdbqklqbremcmzlpxieozgpfgrhegmdcxxfyehzzelcwgkierrj\r\nbjbakuqrnhimwhffykylmngadhbqkqbrcziefredxxezcgkerj\r\n",
                "automaton\r\n"
            ],
            [
                "gzvvawianfysfuxhruarhverinqsbrfxvkcsermuzowahevgskmpvfdljtcztnbkzftfhvnarvkfkqjgrzbrcfthqmspvpqcva\r\nwnm\r\n",
                "automaton\r\n"
            ],
            [
                "dvzohfzgzdjavqwhjcrdphpdqjwtqijabbrhformstqaonlhbglmxugkwviigqaohwvqfhdwwcvdkjrcgxblhvtashhcxssbvpo\r\nzgvqhpjhforlugkwfwrchvhp\r\n",
                "automaton\r\n"
            ],
            [
                "wkfoyetcjivofxaktmauapzeuhcpzjloszzxwydgavebgniiuzrscytsokjkjfkpylvxtlqlquzduywbhqdzmtwprfdohmwgmysy\r\ny\r\n",
                "automaton\r\n"
            ],
            [
                "npeidcoiulxdxzjozsonkdwnoazsbntfclnpubgweaynuhfmrtybqtkuihxxfhwlnquslnhzvqznyofzcbdewnrisqzdhsiyhkxf\r\nnpeidcoiulxdxzjozsonkdwnoazsbntfclnpubgeaynuhfmrtybqtkuihxxfhwlnquslnhzvqznyofzcbdewnrisqzdhsiyhkxf\r\n",
                "automaton\r\n"
            ],
            [
                "gahcqpgmypeahjcwkzahnhmsmxosnikucqwyzklbfwtujjlzvwklqzxakcrcqalhsvsgvknpxsoqkjnyjkypfsiogbcaxjyugeet\r\ngahcqpgmypeahjwwkzahnhmsmxopnikucacyzklbfwtujjlzvwkoqzxakcrcqqlhsvsgvknpxslgkjnyjkysfoisqbcaxjyuteeg\r\n",
                "array\r\n"
            ],
            [
                "vwesbxsifsjqapwridrenumrukgemlldpbtdhxivsrmzbgprtkqgaryniudkjgpjndluwxuohwwysmyuxyrulwsodgunzirudgtx\r\nugeabdszfshqsksddireguvsukieqlluhngdpxjvwwnzdrtrtrdjiuxgadtgjpxrmlynspyyryngxuiibrmurwpmoxwwuklbwumo\r\n",
                "array\r\n"
            ],
            [
                "kjnohlseyntrslfssrshjxclzlsbkfzfwwwgyxsysvmfkxugdwjodfyxhdsveruoioutwmtcbaljomaorvzjsbmglqckmsyieeiu\r\netihhycsjgdysowuljmaoksoecxawsgsljofkrjftuweidrkwtymyswdlilsozsxevfbformnbsumlxzqzykjvsnrlxufvgbmshc\r\n",
                "array\r\n"
            ],
            [
                "ezbpsylkfztypqrefinexshtgglmkoinrktkloitqhfkivoabrfrivvqrcxkjckzvcozpchhiodrbbxuhnwcjigftnrjfiqyxakh\r\niacxghqffzdbsiqunhxbiooqvfohzticjpvrzykcrlrxklgknyrkrhjxcetmfocierekatfvkbslkkrbhftwngoijpipvqyznthi\r\n",
                "array\r\n"
            ],
            [
                "smywwqeolrsytkthfgacnbufzaulgszikbhluzcdbafjclkqueepxbhoamrwswxherzhhuqqcttokbljfbppdinzqgdupkfevmke\r\nsmywwqeolrsytkthfgacnbufzaulgszikbhluzcdbafjclkqueepxbhoamrwswxherzhhufqcttokbljfbppdinzqgdupkqevmke\r\n",
                "array\r\n"
            ],
            [
                "hxsvvydmzhxrswvhkvrbjrfqkazbkjabnrdghposgyfeslzumaovfkallszzumztftgpcilwfrzpvhhbgdzdvnmseqywlzmhhoxh\r\ndbelhtzgkssyfrqgzuurdjhwvmdbhylhmvphjgxpzhxbb\r\n",
                "both\r\n"
            ],
            [
                "nppjzscfgcvdcnsjtiaudvutmgswqbewejlzibczzowgkdrjgxrpirfdaekvngcsonroheepdoeoeevaullbfwprcnhlxextbxpd\r\nifilrvacohnwcgzuleicucebrfxphosrgwnglxxkqrcorsxegjoppbb\r\n",
                "both\r\n"
            ],
            [
                "ggzmtrhkpdswwqgcbtviahqrgzhyhzddtdekchrpjgngupitzyyuipwstgzewktcqpwezidwvvxgjixnflpjhfznokmpbyzczrzk\r\ngpgwhtzrcytstezmhettkppgmvxlxqnkjzibiqdtceczkbfhdziuajwjqzgwnhnkdzizprgzwud\r\n",
                "both\r\n"
            ],
            [
                "iypjqiiqxhtinlmywpetgqqsdopxhghthjopgbodkwrdxzaaxmtaqcfuiarhrvasusanklzcqaytdyzndakcpljqupowompjjved\r\nhxeatriypptbhnokarhgqdrkqkypqzdttixphngmpqjodzjqlmcztyjfgoswjelwwdaqdjayavsdocuhqsluxaaopniviaumxip\r\n",
                "both\r\n"
            ],
            [
                "ypyhyabmljukejpltkgunwuanhxblhiouyltdiczttndrhdprqtlpfanmzlyzbqanfwfyurxhepuzspdvehxnblhajczqcxlqebx\r\nlladxuucky\r\n",
                "both\r\n"
            ],
            [
                "ddmgoarkuhknbtjggnomyxvvavobmylixwuxnnsdrrbibitoteaiydptnvtfblathihflefuggfnyayniragbtkommycpdyhft\r\ntejwybmyrhmalraptqwhghsckvnnaagtmzhnpwbhzzgfgritqwqqamgssllnicjqdkivrwaqyxngsqopwieljfxcdywjaal\r\n",
                "need tree\r\n"
            ],
            [
                "kipjuscf\r\nkbwfqfwuvkyhmvnaznzsgdgdnpipikbicmlcwehjirmhgwpxwpgfztqjwfqfaapmsgskr\r\n",
                "need tree\r\n"
            ],
            [
                "kobhhrqgwbgqkzcoacrhpkegyepzfds\r\nhlwcgbvvlegoyrcrjhsjywpdnccxtzgmeujxciuwjlnefllwldidlnjswmetkarxqjigokfvmpxpzfxarhkpdcia\r\n",
                "need tree\r\n"
            ],
            [
                "lllolloloolllloolollololololollllooololoooloooolololloolloollllolloolloooooooololllolllolllloolllool\r\nlollollololololooooloooooooooolloolllololooollllol\r\n",
                "automaton\r\n"
            ],
            [
                "lloloooolooollololloooloololooollooloollolllloolllllllloollollllolooloollloololollllooloooololooolol\r\nlooooollooolllololloollooooololollollloloollollolo\r\n",
                "both\r\n"
            ],
            [
                "yyyyxxxxyxyyxxxyxxyxxxyyxxxxxyyxxxyxxyxxyyyxxxyxxxyxyxyyxyyxyxxyyyxyxxyxxyxxyyxyyyyxyyyyxxxyyxyxxyyx\r\nyyyyxxxxyxyyxxxyxxyxxxyyxxxxxyyxxxyxxyxxyyyxxxyxxxxxyxyyxyyxyxxyyyxyxxyxxyxxyyxyyyyxyyyyxxxyyxyxxyyx\r\n",
                "need tree\r\n"
            ],
            [
                "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n",
                "automaton\r\n"
            ],
            [
                "abracadabra\r\nlol\r\n",
                "need tree\r\n"
            ],
            [
                "abc\r\naa\r\n",
                "need tree\r\n"
            ],
            [
                "ba\r\naa\r\n",
                "need tree\r\n"
            ],
            [
                "abbb\r\naaab\r\n",
                "need tree\r\n"
            ],
            [
                "baaa\r\nbb\r\n",
                "need tree\r\n"
            ],
            [
                "boosss\r\nosos\r\n",
                "both\r\n"
            ]
        ]
    }
]