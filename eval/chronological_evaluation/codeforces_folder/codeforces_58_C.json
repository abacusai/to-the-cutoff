[
    {
        "name": "Trees",
        "description": "On Bertown's main street n trees are growing, the tree number i has the height\nof ai meters (1 \u2264 i \u2264 n). By the arrival of the President of Berland these\ntrees were decided to be changed so that their heights formed a beautiful\nsequence. This means that the heights of trees on ends (the 1st one and the\nn-th one) should be equal to each other, the heights of the 2-nd and the (n -\n1)-th tree must also be equal to each other, at that the height of the 2-nd\ntree should be larger than the height of the first tree by 1, and so on. In\nother words, the heights of the trees, standing at equal distance from the\nedge (of one end of the sequence) must be equal to each other, and with the\nincreasing of the distance from the edge by 1 the tree height must also\nincrease by 1. For example, the sequences \"2 3 4 5 5 4 3 2\" and \"1 2 3 2 1\"\nare beautiful, and '1 3 3 1\" and \"1 2 3 1\" are not. Changing the height of a\ntree is a very expensive operation, using advanced technologies invented by\nBerland scientists. In one operation you can choose any tree and change its\nheight to any number, either increase or decrease. Note that even after the\nchange the height should remain a positive integer, i. e, it can't be less\nthan or equal to zero. Identify the smallest number of changes of the trees'\nheight needed for the sequence of their heights to become beautiful. Input The\nfirst line contains integer n (1 \u2264 n \u2264 10^5) which is the number of trees. The\nsecond line contains integers ai (1 \u2264 ai \u2264 10^5) which are the heights of the\ntrees. Output Print a single number which is the minimal number of trees whose\nheights will have to be changed for the sequence to become beautiful. Examples\nInput 3 2 2 2 Output 1 Input 4 1 2 2 1 Output 0\n\n",
        "cf_contest_id": 58,
        "cf_index": "C",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "brute force"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2 2 2\r\n",
                "1\r\n"
            ],
            [
                "4\r\n1 2 2 1\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n61452 50974 73849\r\n",
                "2\r\n"
            ],
            [
                "4\r\n86002 1199 86003 86002\r\n",
                "1\r\n"
            ],
            [
                "5\r\n92605 92606 41969 98774 92605\r\n",
                "2\r\n"
            ],
            [
                "10\r\n1 1 2 3 4 4 3 2 1 10\r\n",
                "9\r\n"
            ],
            [
                "10\r\n73905 73906 73907 85732 73909 73909 73908 73907 73906 73905\r\n",
                "1\r\n"
            ],
            [
                "10\r\n60718 99414 65042 65043 65044 38495 95782 65042 65041 65040\r\n",
                "4\r\n"
            ],
            [
                "7\r\n1 2 3 7 6 5 4\r\n",
                "3\r\n"
            ],
            [
                "5\r\n4 5 6 5 1\r\n",
                "1\r\n"
            ],
            [
                "1\r\n100000\r\n",
                "0\r\n"
            ],
            [
                "5\r\n1 1 1 1 1\r\n",
                "3\r\n"
            ],
            [
                "7\r\n1 2 3 7 6 5 4\r\n",
                "3\r\n"
            ],
            [
                "1\r\n2727\r\n",
                "0\r\n"
            ],
            [
                "5\r\n1 2 3 2 4\r\n",
                "1\r\n"
            ],
            [
                "9\r\n100 12 13 14 15 14 13 12 11\r\n",
                "1\r\n"
            ],
            [
                "5\r\n2 4 5 4 2\r\n",
                "2\r\n"
            ],
            [
                "5\r\n3 3 4 3 2\r\n",
                "1\r\n"
            ]
        ]
    }
]