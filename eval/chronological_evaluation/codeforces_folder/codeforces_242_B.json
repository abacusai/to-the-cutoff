[
    {
        "name": "Big Segment",
        "description": "A coordinate line has n segments, the i-th segment starts at the position li\nand ends at the position ri. We will denote such a segment as [li, ri]. You\nhave suggested that one of the defined segments covers all others. In other\nwords, there is such segment in the given set, which contains all other ones.\nNow you want to test your assumption. Find in the given set the segment which\ncovers all other segments, and print its number. If such a segment doesn't\nexist, print -1. Formally we will assume that segment [a, b] covers segment\n[c, d], if they meet this condition a \u2264 c \u2264 d \u2264 b. Input The first line\ncontains integer n (1 \u2264 n \u2264 10^5) \u2014 the number of segments. Next n lines\ncontain the descriptions of the segments. The i-th line contains two space-\nseparated integers li, ri (1 \u2264 li \u2264 ri \u2264 10^9) \u2014 the borders of the i-th\nsegment. It is guaranteed that no two segments coincide. Output Print a single\ninteger \u2014 the number of the segment that covers all other segments in the set.\nIf there's no solution, print -1. The segments are numbered starting from 1 in\nthe order in which they appear in the input. Examples Input 3 1 1 2 2 3 3\nOutput -1 Input 6 1 5 2 3 1 10 7 10 7 7 10 10 Output 3\n\n",
        "cf_contest_id": 242,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 1\r\n2 2\r\n3 3\r\n",
                "-1\r\n"
            ],
            [
                "6\r\n1 5\r\n2 3\r\n1 10\r\n7 10\r\n7 7\r\n10 10\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n1 5\r\n2 2\r\n2 4\r\n2 5\r\n",
                "1\r\n"
            ],
            [
                "5\r\n3 3\r\n1 3\r\n2 2\r\n2 3\r\n1 2\r\n",
                "2\r\n"
            ],
            [
                "7\r\n7 7\r\n8 8\r\n3 7\r\n1 6\r\n1 7\r\n4 7\r\n2 8\r\n",
                "-1\r\n"
            ],
            [
                "3\r\n2 5\r\n3 4\r\n2 3\r\n",
                "1\r\n"
            ],
            [
                "16\r\n15 15\r\n8 12\r\n6 9\r\n15 16\r\n8 14\r\n3 12\r\n7 19\r\n9 13\r\n5 16\r\n9 17\r\n10 15\r\n9 14\r\n9 9\r\n18 19\r\n5 15\r\n6 19\r\n",
                "-1\r\n"
            ],
            [
                "9\r\n1 10\r\n7 8\r\n6 7\r\n1 4\r\n5 9\r\n2 8\r\n3 10\r\n1 1\r\n2 3\r\n",
                "1\r\n"
            ],
            [
                "1\r\n1 100000\r\n",
                "1\r\n"
            ],
            [
                "6\r\n2 2\r\n3 3\r\n3 5\r\n4 5\r\n1 1\r\n1 5\r\n",
                "6\r\n"
            ],
            [
                "33\r\n2 18\r\n4 14\r\n2 16\r\n10 12\r\n4 6\r\n9 17\r\n2 8\r\n4 12\r\n8 20\r\n1 10\r\n11 14\r\n11 17\r\n8 15\r\n3 16\r\n3 4\r\n6 9\r\n6 19\r\n4 17\r\n17 19\r\n6 16\r\n3 12\r\n1 7\r\n6 20\r\n8 16\r\n12 19\r\n1 3\r\n12 18\r\n6 11\r\n7 20\r\n16 18\r\n4 15\r\n3 15\r\n15 19\r\n",
                "-1\r\n"
            ],
            [
                "34\r\n3 8\r\n5 9\r\n2 9\r\n1 4\r\n3 7\r\n3 3\r\n8 9\r\n6 10\r\n4 7\r\n6 7\r\n5 8\r\n5 10\r\n1 5\r\n8 8\r\n2 5\r\n3 5\r\n7 7\r\n2 8\r\n4 5\r\n1 1\r\n7 9\r\n5 6\r\n2 3\r\n1 2\r\n2 4\r\n8 10\r\n7 8\r\n1 3\r\n4 8\r\n9 10\r\n1 7\r\n10 10\r\n2 2\r\n1 8\r\n",
                "-1\r\n"
            ],
            [
                "55\r\n3 4\r\n6 8\r\n9 10\r\n3 9\r\n9 9\r\n2 5\r\n4 8\r\n3 8\r\n8 10\r\n1 1\r\n4 9\r\n10 10\r\n6 6\r\n8 8\r\n1 8\r\n5 5\r\n4 5\r\n5 9\r\n2 2\r\n3 10\r\n4 6\r\n3 6\r\n1 6\r\n1 7\r\n6 10\r\n2 6\r\n3 7\r\n2 4\r\n4 4\r\n5 10\r\n1 4\r\n2 9\r\n1 3\r\n7 9\r\n7 8\r\n1 9\r\n1 10\r\n2 8\r\n8 9\r\n6 7\r\n1 2\r\n6 9\r\n7 7\r\n4 7\r\n3 3\r\n2 7\r\n4 10\r\n7 10\r\n2 3\r\n2 10\r\n5 7\r\n3 5\r\n5 8\r\n1 5\r\n5 6\r\n",
                "37\r\n"
            ],
            [
                "1\r\n999999999 1000000000\r\n",
                "1\r\n"
            ],
            [
                "3\r\n1 20\r\n2 22\r\n3 18\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n1000000000 1000000000\r\n",
                "1\r\n"
            ],
            [
                "2\r\n100001 100008\r\n100005 100006\r\n",
                "1\r\n"
            ],
            [
                "1\r\n1000000 10000000\r\n",
                "1\r\n"
            ],
            [
                "3\r\n3 6\r\n2 4\r\n1 5\r\n",
                "-1\r\n"
            ],
            [
                "2\r\n3 5\r\n1 2\r\n",
                "-1\r\n"
            ]
        ]
    }
]