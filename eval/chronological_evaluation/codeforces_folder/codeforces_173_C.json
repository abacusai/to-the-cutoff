[
    {
        "name": "Spiral Maximum",
        "description": "Let's consider a k \u00d7 k square, divided into unit squares. Please note that k \u2265\n3 and is odd. We'll paint squares starting from the upper left square in the\nfollowing order: first we move to the right, then down, then to the left, then\nup, then to the right again and so on. We finish moving in some direction in\none of two cases: either we've reached the square's border or the square\nfollowing after the next square is already painted. We finish painting at the\nmoment when we cannot move in any direction and paint a square. The figure\nthat consists of the painted squares is a spiral. The figure shows examples of\nspirals for k = 3, 5, 7, 9. You have an n \u00d7 m table, each of its cells\ncontains a number. Let's consider all possible spirals, formed by the table\ncells. It means that we consider all spirals of any size that don't go beyond\nthe borders of the table. Let's find the sum of the numbers of the cells that\nform the spiral. You have to find the maximum of those values among all\nspirals. Input The first line contains two integers n and m (3 \u2264 n, m \u2264 500) \u2014\nthe sizes of the table. Each of the next n lines contains m space-separated\nintegers: the j-th number in the i-th line aij ( - 1000 \u2264 aij \u2264 1000) is the\nnumber recorded in the j-th cell of the i-th row of the table. Output Print a\nsingle number \u2014 the maximum sum of numbers among all spirals. Examples Input 6\n5 0 0 0 0 0 1 1 1 1 1 0 0 0 0 1 1 1 1 0 1 1 0 0 0 1 1 1 1 1 1 Output 17 Input\n3 3 1 1 1 1 0 0 1 1 1 Output 6 Input 6 6 -3 2 0 1 5 -1 4 -1 2 -3 0 1 -5 1 2 4\n1 -2 0 -2 1 3 -1 2 3 1 4 -3 -2 0 -1 2 -1 3 1 2 Output 13 Note In the first\nsample the spiral with maximum sum will cover all 1's of the table. In the\nsecond sample the spiral may cover only six 1's.\n\n",
        "cf_contest_id": 173,
        "cf_index": "C",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dp"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 5\r\n0 0 0 0 0\r\n1 1 1 1 1\r\n0 0 0 0 1\r\n1 1 1 0 1\r\n1 0 0 0 1\r\n1 1 1 1 1\r\n",
                "17\r\n"
            ],
            [
                "3 3\r\n1 1 1\r\n1 0 0\r\n1 1 1\r\n",
                "6\r\n"
            ],
            [
                "6 6\r\n-3 2 0 1 5 -1\r\n4 -1 2 -3 0 1\r\n-5 1 2 4 1 -2\r\n0 -2 1 3 -1 2\r\n3 1 4 -3 -2 0\r\n-1 2 -1 3 1 2\r\n",
                "13\r\n"
            ]
        ],
        "private_cases": [
            [
                "13 15\r\n8 5 10 6 9 5 9 9 7 8 7 5 10 10 10\r\n5 7 7 7 5 7 10 10 7 10 5 7 6 10 5\r\n6 6 5 10 6 7 10 8 7 5 8 9 9 10 6\r\n9 6 6 5 10 7 9 9 6 6 8 7 8 7 8\r\n7 10 9 8 6 5 5 9 10 10 6 7 10 8 7\r\n6 8 6 10 6 5 5 7 9 5 9 5 6 5 10\r\n5 10 5 9 9 10 6 7 8 7 5 6 6 10 8\r\n10 6 7 7 8 7 8 8 8 7 5 5 7 5 10\r\n6 7 8 10 8 9 9 8 5 5 6 6 9 9 7\r\n9 5 8 9 7 7 7 5 6 6 6 8 9 5 8\r\n6 9 9 10 7 5 8 6 10 6 9 6 7 5 5\r\n9 9 6 9 7 9 6 10 5 5 10 8 6 8 7\r\n10 6 6 8 7 6 8 7 7 8 10 9 9 6 8\r\n",
                "725\r\n"
            ],
            [
                "3 3\r\n46 -78 94\r\n-17 -86 -43\r\n-89 54 -24\r\n",
                "-40\r\n"
            ],
            [
                "3 3\r\n0 0 0\r\n0 0 0\r\n0 0 0\r\n",
                "0\r\n"
            ],
            [
                "3 3\r\n-1000 -1000 -1000\r\n-1000 -1000 -1000\r\n-1000 -1000 -1000\r\n",
                "-7000\r\n"
            ],
            [
                "3 10\r\n28 83 75 57 -17 22 -56 -51 -81 63\r\n-13 -42 60 -97 52 4 39 38 69 82\r\n32 40 2 -36 -10 50 72 91 -31 32\r\n",
                "320\r\n"
            ],
            [
                "13 3\r\n22 -80 22\r\n86 92 -85\r\n99 -100 -74\r\n-82 -79 44\r\n70 26 80\r\n6 51 45\r\n100 17 -91\r\n23 50 26\r\n-57 -30 -89\r\n66 90 -35\r\n-30 51 -60\r\n57 65 -98\r\n43 69 89\r\n",
                "247\r\n"
            ]
        ]
    }
]