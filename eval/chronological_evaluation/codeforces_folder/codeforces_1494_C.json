[
    {
        "name": "1D Sokoban",
        "description": "You are playing a game similar to Sokoban on an infinite number line. The game\nis discrete, so you only consider integer positions on the line. You start on\na position \n    0\n. There are \n    n\n boxes, the \n    i\n-th box is on a\nposition \n    a_i\n. All positions of the boxes are distinct. There are also\n\n    m\n special positions, the \n    j\n-th position is \n    b_j\n. All the\nspecial positions are also distinct. In one move you can go one position to\nthe left or to the right. If there is a box in the direction of your move,\nthen you push the box to the next position in that direction. If the next\nposition is taken by another box, then that box is also pushed to the next\nposition, and so on. You can't go through the boxes. You can't pull the boxes\ntowards you. You are allowed to perform any number of moves (possibly, zero).\nYour goal is to place as many boxes on special positions as possible. Note\nthat some boxes can be initially placed on special positions. Input The first\nline contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the\nnumber of testcases. Then descriptions of \n    t\n testcases follow. The first\nline of each testcase contains two integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n,\n    m \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of boxes and the number of special\npositions, respectively. The second line of each testcase contains \n    n\n\ndistinct integers in the increasing order \n    a_1, a_2, \n    \u2026, a_n\n\n(\n    -10^9 \n    \u2264 a_1 < a_2 < \n    \u2026 < a_n \n    \u2264 10^9\n; \n    a_i \n    \u2260 0\n) \u2014\nthe initial positions of the boxes. The third line of each testcase contains\n\n    m\n distinct integers in the increasing order \n    b_1, b_2, \n    \u2026, b_m\n\n(\n    -10^9 \n    \u2264 b_1 < b_2 < \n    \u2026 < b_m \n    \u2264 10^9\n; \n    b_i \n    \u2260 0\n) \u2014\nthe special positions. The sum of \n    n\n over all testcases doesn't exceed\n\n    2 \n    \u00b7 10^5\n. The sum of \n    m\n over all testcases doesn't exceed\n\n    2 \n    \u00b7 10^5\n. Output For each testcase print a single integer \u2014 the\nmaximum number of boxes that can be placed on special positions. Example Input\n5 5 6 -1 1 5 11 15 -4 -3 -2 6 7 15 2 2 -1 1 -1000000000 1000000000 2 2\n-1000000000 1000000000 -1 1 3 5 -1 1 2 -2 -1 1 2 5 2 1 1 2 10 Output 4 2 0 3 1\nNote In the first testcase you can go \n    5\n to the right: the box on\nposition \n    1\n gets pushed to position \n    6\n and the box on position\n\n    5\n gets pushed to position \n    7\n. Then you can go \n    6\n to the left\nto end up on position \n    -1\n and push a box to \n    -2\n. At the end, the\nboxes are on positions \n    [-2, 6, 7, 11, 15]\n, respectively. Among them\npositions \n    [-2, 6, 7, 15]\n are special, thus, the answer is \n    4\n. In\nthe second testcase you can push the box from \n    -1\n to \n    -10^9\n, then\nthe box from \n    1\n to \n    10^9\n and obtain the answer \n    2\n. The third\ntestcase showcases that you are not allowed to pull the boxes, thus, you can't\nbring them closer to special positions. In the fourth testcase all the boxes\nare already on special positions, so you can do nothing and still obtain the\nanswer \n    3\n. In the fifth testcase there are fewer special positions than\nboxes. You can move either \n    8\n or \n    9\n to the right to have some box on\nposition \n    10\n.\n\n",
        "cf_contest_id": 1494,
        "cf_index": "C",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dp",
            "greedy",
            "implementation",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n5 6\r\n-1 1 5 11 15\r\n-4 -3 -2 6 7 15\r\n2 2\r\n-1 1\r\n-1000000000 1000000000\r\n2 2\r\n-1000000000 1000000000\r\n-1 1\r\n3 5\r\n-1 1 2\r\n-2 -1 1 2 5\r\n2 1\r\n1 2\r\n10\r\n",
                "4\r\n2\r\n0\r\n3\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n10 10\r\n-963625377 -868027420 -582832806 -399654630 -299751944 -233765513 -220763772 115612869 134734706 330611632\r\n-836519191 -611761365 -306272 8975969 469083185 681128970 789056642 862703103 881641726 895240878\r\n",
                "2\r\n"
            ],
            [
                "1\r\n2 4\r\n-2 -1\r\n-7 -5 -2 -1\r\n",
                "2\r\n"
            ]
        ]
    }
]