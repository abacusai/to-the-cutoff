[
    {
        "name": "Fedor and New Game",
        "description": "After you had helped George and Alex to move in the dorm, they went to help\ntheir friend Fedor play a new computer game \u00abCall of Soldiers 3\u00bb. The game has\n(m + 1) players and n types of soldiers in total. Players \u00abCall of Soldiers 3\u00bb\nare numbered form 1 to (m + 1). Types of soldiers are numbered from 0 to n -\n1. Each player has an army. Army of the i-th player can be described by non-\nnegative integer xi. Consider binary representation of xi: if the j-th bit of\nnumber xi equal to one, then the army of the i-th player has soldiers of the\nj-th type. Fedor is the (m + 1)-th player of the game. He assume that two\nplayers can become friends if their armies differ in at most k types of\nsoldiers (in other words, binary representations of the corresponding numbers\ndiffer in at most k bits). Help Fedor and count how many players can become\nhis friends. Input The first line contains three integers n, m, k (1 \u2264 k \u2264 n \u2264\n20; 1 \u2264 m \u2264 1000). The i-th of the next (m + 1) lines contains a single\ninteger xi (1 \u2264 xi \u2264 2^n - 1), that describes the i-th player's army. We\nremind you that Fedor is the (m + 1)-th player. Output Print a single integer\n\u2014 the number of Fedor's potential friends. Examples Input 7 3 1 8 5 111 17\nOutput 0 Input 3 3 3 1 2 3 4 Output 3\n\n",
        "cf_contest_id": 467,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 3 1\r\n8\r\n5\r\n111\r\n17\r\n",
                "0\r\n"
            ],
            [
                "3 3 3\r\n1\r\n2\r\n3\r\n4\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "4 2 2\r\n5\r\n6\r\n7\r\n",
                "2\r\n"
            ],
            [
                "4 7 4\r\n9\r\n10\r\n5\r\n12\r\n4\r\n12\r\n7\r\n10\r\n",
                "7\r\n"
            ],
            [
                "2 7 2\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n",
                "7\r\n"
            ],
            [
                "6 8 2\r\n46\r\n59\r\n38\r\n5\r\n13\r\n54\r\n26\r\n62\r\n18\r\n",
                "2\r\n"
            ],
            [
                "5 6 3\r\n16\r\n9\r\n24\r\n5\r\n17\r\n27\r\n20\r\n",
                "4\r\n"
            ],
            [
                "7 9 1\r\n27\r\n7\r\n12\r\n29\r\n51\r\n67\r\n9\r\n112\r\n62\r\n68\r\n",
                "0\r\n"
            ],
            [
                "9 20 2\r\n197\r\n45\r\n217\r\n9\r\n156\r\n335\r\n21\r\n90\r\n33\r\n292\r\n151\r\n153\r\n289\r\n483\r\n362\r\n509\r\n234\r\n115\r\n343\r\n341\r\n50\r\n",
                "1\r\n"
            ],
            [
                "13 27 7\r\n1893\r\n370\r\n7320\r\n5753\r\n4418\r\n2146\r\n2702\r\n5013\r\n5959\r\n1929\r\n7611\r\n7013\r\n540\r\n3454\r\n4271\r\n2887\r\n4724\r\n3520\r\n2111\r\n5845\r\n1868\r\n7659\r\n3040\r\n3775\r\n6507\r\n4917\r\n7506\r\n2515\r\n",
                "20\r\n"
            ],
            [
                "1 1 1\r\n1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "20 1 1\r\n1000\r\n2\r\n",
                "0\r\n"
            ],
            [
                "3 3 3\r\n3\r\n3\r\n3\r\n7\r\n",
                "3\r\n"
            ],
            [
                "2 2 1\r\n2\r\n1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "3 3 2\r\n7\r\n7\r\n6\r\n2\r\n",
                "3\r\n"
            ],
            [
                "20 1 1\r\n9999\r\n9997\r\n",
                "1\r\n"
            ],
            [
                "5 4 1\r\n1\r\n2\r\n4\r\n8\r\n16\r\n",
                "0\r\n"
            ],
            [
                "5 2 2\r\n9\r\n7\r\n10\r\n",
                "1\r\n"
            ]
        ]
    }
]