[
    {
        "name": "Coloring Trees",
        "description": "ZS the Coder and Chris the Baboon has arrived at Udayland! They walked in the\npark where n trees grow. They decided to be naughty and color the trees in the\npark. The trees are numbered with integers from 1 to n from left to right.\nInitially, tree i has color ci. ZS the Coder and Chris the Baboon recognizes\nonly m different colors, so 0 \u2264 ci \u2264 m, where ci = 0 means that tree i is\nuncolored. ZS the Coder and Chris the Baboon decides to color only the\nuncolored trees, i.e. the trees with ci = 0. They can color each of them them\nin any of the m colors from 1 to m. Coloring the i-th tree with color j\nrequires exactly pi, j litres of paint. The two friends define the beauty of a\ncoloring of the trees as the minimum number of contiguous groups (each group\ncontains some subsegment of trees) you can split all the n trees into so that\neach group contains trees of the same color. For example, if the colors of the\ntrees from left to right are 2, 1, 1, 1, 3, 2, 2, 3, 1, 3, the beauty of the\ncoloring is 7, since we can partition the trees into 7 contiguous groups of\nthe same color : 2, 1, 1, 1, 3, 2, 2, 3, 1, 3. ZS the Coder and\nChris the Baboon wants to color all uncolored trees so that the beauty of the\ncoloring is exactly k. They need your help to determine the minimum amount of\npaint (in litres) needed to finish the job. Please note that the friends can't\ncolor the trees that are already colored. Input The first line contains three\nintegers, n, m and k (1 \u2264 k \u2264 n \u2264 100, 1 \u2264 m \u2264 100) \u2014 the number of trees,\nnumber of colors and beauty of the resulting coloring respectively. The second\nline contains n integers c1, c2, ..., cn (0 \u2264 ci \u2264 m), the initial colors of\nthe trees. ci equals to 0 if the tree number i is uncolored, otherwise the\ni-th tree has color ci. Then n lines follow. Each of them contains m integers.\nThe j-th number on the i-th of them line denotes pi, j (1 \u2264 pi, j \u2264 10^9) \u2014\nthe amount of litres the friends need to color i-th tree with color j. pi, j's\nare specified even for the initially colored trees, but such trees still can't\nbe colored. Output Print a single integer, the minimum amount of paint needed\nto color the trees. If there are no valid tree colorings of beauty k, print -\n1. Examples Input 3 2 2 0 0 0 1 2 3 4 5 6 Output 10 Input 3 2 2 2 1 2 1 3 2 4\n3 5 Output -1 Input 3 2 2 2 0 0 1 3 2 4 3 5 Output 5 Input 3 2 3 2 1 2 1 3 2 4\n3 5 Output 0 Note In the first sample case, coloring the trees with colors 2,\n1, 1 minimizes the amount of paint used, which equals to 2 + 3 + 5 = 10. Note\nthat 1, 1, 1 would not be valid because the beauty of such coloring equals to\n1 (1, 1, 1 is a way to group the trees into a single group of the same\ncolor). In the second sample case, all the trees are colored, but the beauty\nof the coloring is 3, so there is no valid coloring, and the answer is - 1. In\nthe last sample case, all the trees are colored and the beauty of the coloring\nmatches k, so no paint is used and the answer is 0.\n\n",
        "cf_contest_id": 711,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "dp"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2 2\r\n0 0 0\r\n1 2\r\n3 4\r\n5 6\r\n",
                "10\r\n"
            ],
            [
                "3 2 2\r\n2 1 2\r\n1 3\r\n2 4\r\n3 5\r\n",
                "-1\r\n"
            ],
            [
                "3 2 2\r\n2 0 0\r\n1 3\r\n2 4\r\n3 5\r\n",
                "5\r\n"
            ],
            [
                "3 2 3\r\n2 1 2\r\n1 3\r\n2 4\r\n3 5\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 2 3\r\n0 0 0\r\n10 30000\r\n20000 1000000000\r\n1000000000 50000\r\n",
                "100000\r\n"
            ],
            [
                "4 2 1\r\n0 0 0 0\r\n10 30000\r\n20000 1000000000\r\n1000000000 50000\r\n55 55\r\n",
                "1000020065\r\n"
            ],
            [
                "4 2 1\r\n0 0 0 2\r\n10 30000\r\n20000 1000000000\r\n1000000000 50000\r\n55 55\r\n",
                "1000080000\r\n"
            ],
            [
                "1 1 1\r\n0\r\n5\r\n",
                "5\r\n"
            ],
            [
                "1 10 1\r\n0\r\n1 2 20 1000000000 41 23 39 55 44 1234567\r\n",
                "1\r\n"
            ],
            [
                "1 1 1\r\n1\r\n5\r\n",
                "0\r\n"
            ],
            [
                "8 6 6\r\n0 0 0 0 0 0 0 0\r\n709812879 751993522 552838834 932579085 381597201 889756688\r\n77223016 35398130 932703875 852137134 124534767 472656085\r\n828677108 158247840 540181954 573979204 389860841 490718346\r\n666733838 404533406 50010075 311518758 460372535 69832342\r\n591244215 400838850 867732307 113910196 445904988 184328895\r\n564004525 89903316 756707872 628355859 689211716 85839524\r\n272478028 286740424 178709321 86780970 947181211 809721979\r\n813772965 663391037 731882431 804451037 31893872 744734983\r\n",
                "1014096507\r\n"
            ],
            [
                "4 4 3\r\n4 3 2 1\r\n608531991 110838465 78523745 621397088\r\n923748933 697335134 350140891 422577481\r\n907779022 895436439 216021587 50630582\r\n120114007 984106338 70847223 755445813\r\n",
                "-1\r\n"
            ],
            [
                "1 3 1\r\n0\r\n3 2 1\r\n",
                "1\r\n"
            ]
        ]
    }
]