[
    {
        "name": "Complementary XOR",
        "description": "You have two binary strings \n    a\n and \n    b\n of length \n    n\n. You would\nlike to make all the elements of both strings equal to \n    0\n. Unfortunately,\nyou can modify the contents of these strings using only the following\noperation: You choose two indices \n    l\n and \n    r\n (\n    1 \n    \u2264 l \n    \u2264 r\n    \n    \u2264 n\n); For every \n    i\n that respects \n    l \n    \u2264 i \n    \u2264 r\n, change\n\n    a_i\n to the opposite. That is, \n    a_i := 1 - a_i\n; For every \n    i\n\nthat respects either \n    1 \n    \u2264 i < l\n or \n    r < i \n    \u2264 n\n, change\n\n    b_i\n to the opposite. That is, \n    b_i := 1 - b_i\n. Your task is to\ndetermine if this is possible, and if it is, to find such an appropriate chain\nof operations. The number of operations should not exceed \n    n + 5\n. It can\nbe proven that if such chain of operations exists, one exists with at most\n\n    n + 5\n operations. Input Each test consists of multiple test cases. The\nfirst line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^5\n) \u2014\nthe number of test cases. The description of test cases follows. The first\nline of each test case contains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n) \u2014 the length of the strings. The second line of each test\ncase contains a binary string \n    a\n, consisting only of characters 0 and 1,\nof length \n    n\n. The third line of each test case contains a binary string\n\n    b\n, consisting only of characters 0 and 1, of length \n    n\n. It is\nguaranteed that sum of \n    n\n over all test cases doesn't exceed \n    2 \n    \u00b7\n    10^5\n. Output For each testcase, print first \"YES\" if it's possible to make\nall the elements of both strings equal to \n    0\n. Otherwise, print \"NO\". If\nthe answer is \"YES\", on the next line print a single integer \n    k\n (\n    0\n    \n    \u2264 k \n    \u2264 n + 5\n) \u2014 the number of operations. Then \n    k\n lines\nfollows, each contains two integers \n    l\n and \n    r\n (\n    1 \n    \u2264 l \n    \u2264 r\n    \n    \u2264 n\n) \u2014 the description of the operation. If there are several correct\nanswers, print any of them. Example Input 5 3 010 101 2 11 10 4 1000 0011 2 10\n10 3 111 111 Output YES 1 2 2 NO NO YES 2 1 2 2 2 YES 2 1 1 2 3 Note In the\nfirst test case, we can perform one operation with \n    l = 2\n and \n    r =\n    2\n. So \n    a_2 := 1 - 1 = 0\n and string \n    a\n became equal to 000. \n    b_1\n    := 1 - 1 = 0\n, \n    b_3 := 1 - 1 = 0\n and string \n    b\n became equal to\n000. In the second and in the third test cases, it can be proven that it's\nimpossible to make all elements of both strings equal to \n    0\n. In the\nfourth test case, we can perform an operation with \n    l = 1\n and \n    r =\n    2\n, then string \n    a\n became equal to 01, and string \n    b\n doesn't\nchange. Then we perform an operation with \n    l = 2\n and \n    r = 2\n, then\n\n    a_2 := 1 - 1 = 0\n and \n    b_1 = 1 - 1 = 0\n. So both of string \n    a\n\nand \n    b\n became equal to 00. In the fifth test case, we can perform an\noperation with \n    l = 1\n and \n    r = 1\n. Then string \n    a\n became equal\nto 011 and string \n    b\n became equal to 100. Then we can perform an\noperation with \n    l = 2\n and \n    r = 3\n, so both of string \n    a\n and\n\n    b\n became equal to 000.\n\n",
        "cf_contest_id": 1750,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3\r\n010\r\n101\r\n2\r\n11\r\n10\r\n4\r\n1000\r\n0011\r\n2\r\n10\r\n10\r\n3\r\n111\r\n111\r\n",
                "YES 1 2 2\r\nNO\r\nNO\r\nYES 4 1 1 1 1 1 2 2 2\r\nYES 6 1 1 2 2 3 3 1 1 1 3 2 3\r\n"
            ]
        ],
        "private_cases": []
    }
]