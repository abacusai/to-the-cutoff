[
    {
        "name": "Guess the K-th Zero (Hard version)",
        "description": "This is an interactive problem. This is a hard version of the problem. The\ndifference from the easy version is that in the hard version \n    1 \n    \u2264 t\n    \n    \u2264\n    min(n, 10^4)\n and the total number of queries is limited to \n    6\n    \n    \u00b7 10^4\n. Polycarp is playing a computer game. In this game, an array\nconsisting of zeros and ones is hidden. Polycarp wins if he guesses the\nposition of the \n    k\n-th zero from the left \n    t\n times. Polycarp can make\nno more than \n    6 \n    \u00b7 10^4\n requests totally of the following type: ?\n\n    l\n \n    r\n \u2014 find out the sum of all elements in positions from \n    l\n\nto \n    r\n (\n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 n\n) inclusive. To make the game more\ninteresting, each guessed zero turns into one and the game continues on the\nchanged array. More formally, if the position of the \n    k\n-th zero was\n\n    x\n, then after Polycarp guesses this position, the \n    x\n-th element of\nthe array will be replaced from \n    0\n to \n    1\n. Help Polycarp win the\ngame. Interaction First, your program must read two integers \n    n\n and\n\n    t\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n, \n    1 \n    \u2264 t \n    \u2264\n    min(n,\n    10^4)\n). Then \n    t\n lines follow, each of which contains one integer\n\n    k\n (\n    1 \n    \u2264 k \n    \u2264 n\n). It is guaranteed that at the moment of the\nrequest the array contains at least \n    k\n zeros. In order to get the next\nvalue of \n    k\n, you must output the answer for the previous value of\n\n    k\n. After that, you can make no more than \n    6 \n    \u00b7 10^4\n requests\nin total. Use the following format to output the answer (it is not a request,\nit doesn't count in \n    6 \n    \u00b7 10^4\n): ! \n    x\n \u2014 position of the\n\n    k\n-th zero. Positions in the array are numbered from left to right from\n\n    1\n to \n    n\n inclusive. After printing \n    t\n answers, your program\nshould exit immediately. In this task, the interactor is not adaptive. This\nmeans that within the same test, the hidden array and the queries do not\nchange. In case of an incorrect query, -1 will be displayed. When this value\nis received, your program must immediately exit normally (for example, by\ncalling exit(0)), otherwise, the testing system may issue an arbitrary\nverdict. If the number of requests is exceeded, the verdict wrong answer will\nbe displayed. Your solution may get the verdict Idleness limit exceeded if you\ndon't print anything or forget to flush the output buffer. To flush the output\nbuffer, you need to do the following immediately after the query output and\nthe end-of-line character: fflush(stdout) or cout.flush() in C ++;\nSystem.out.flush() in Java; flush(output) in Pascal; stdout.flush() in Python;\nsee the documentation for other languages. Hacks Use the following format for\nhacks: On the first line print the string \n    s\n (\n    1 \n    \u2264 |s| \n    \u2264 2\n    \n    \u00b7 10^5\n), consisting of zeros and ones, and an integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264\n    min(|s|, 10^4)\n) \u2014 hidden array and number of requests,\nrespectively. In the next \n    t\n lines output the number \n    k\n (\n    1 \n    \u2264\n    k \n    \u2264 |s|\n). The hacked solution will not have direct access to the hidden\narray. Example Input 6 2 2 2 1 1 0 1 0 Output ? 4 6 ? 1 1 ? 1 2 ? 5 5 ! 5 ? 2\n2 ! 2 Note In the first test, the array \n    [1, 0, 1, 1, 0, 1]\n is hidden.\nAfter answering the query \n    k=2\n, the array changed to \n    [1, 0, 1, 1, 1,\n    1]\n.\n\n",
        "cf_contest_id": 1520,
        "cf_index": "F2",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "constructive algorithms",
            "data structures",
            "interactive"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "101101 2\r\n2\r\n1\r\n",
                "5\r\n"
            ]
        ],
        "private_cases": [
            [
                "0 1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "10 1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "00 2\r\n1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "101 1\r\n1\r\n",
                "2\r\n"
            ],
            [
                "100 2\r\n1\r\n1\r\n",
                "2\r\n"
            ],
            [
                "000 3\r\n3\r\n2\r\n1\r\n",
                "2\r\n"
            ],
            [
                "0111 1\r\n1\r\n",
                "2\r\n"
            ],
            [
                "0011 2\r\n1\r\n1\r\n",
                "2\r\n"
            ],
            [
                "0001 3\r\n2\r\n2\r\n1\r\n",
                "3\r\n"
            ],
            [
                "0000 4\r\n4\r\n2\r\n2\r\n1\r\n",
                "3\r\n"
            ],
            [
                "01111 1\r\n1\r\n",
                "3\r\n"
            ],
            [
                "10110 2\r\n2\r\n1\r\n",
                "4\r\n"
            ],
            [
                "10100 3\r\n1\r\n2\r\n1\r\n",
                "4\r\n"
            ],
            [
                "10000 4\r\n1\r\n1\r\n2\r\n1\r\n",
                "4\r\n"
            ],
            [
                "00000 5\r\n3\r\n2\r\n3\r\n1\r\n1\r\n",
                "4\r\n"
            ]
        ]
    }
]