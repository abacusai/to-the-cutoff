[
    {
        "name": "Crossing the Railways",
        "description": "Isona is in a train station. This station has two platforms, and between them\nthere are \n    m\n parallel railways that can be viewed as infinite straight\nlines. Each railway is identified with an integer from \n    1\n to \n    m\n,\nrailway \n    1\n being the closest to the first platform and railway \n    m\n\nbeing the farthest. There is a \n    1\n meter distance between consecutive\nrailways, as well as between each platform and its closest railway. Isona is\nstanding on the inner border of the first platform, when she realizes that she\nforgot to validate her ticket! There is a validating machine on the second\nplatform, exactly opposite her current position (thus, the distance between\nIsona and the validating machine is \n    m + 1\n meters). There are only\n\n    s\n seconds left to validate the ticket and the bridge designated to cross\nthe railways is too far from the validating machine. Therefore, Isona (who is\nvery brave and a little bit careless) will cross the railways running in a\nstraight line perpendicular to the railways themselves. Isona can only run\nforward (not backward) and she can stay still. When she runs at maximum speed,\nshe needs \n    v\n seconds to traverse \n    1\n meter. She can run at any speed\nless than or equal to her maximum speed. There is only one problem: \n    n\n\ntrains are programmed to transit through the railways. The \n    i\n-th train\nwill use the railway \n    r_i\n. It will start crossing the straight line\nbetween Isona and the validating machine \n    a_i\n seconds from now and it\nwill end \n    b_i\n seconds from now. Of course, Isona cannot cross a railway\nwhen a train is passing. Formally, for every \n    i = 1, \n      2, \n     \n    \u2026,\n    \n      n\n, Isona is not allowed to be on railway \n    r_i\n at any time \n    t\n\nwith \n    a_i < t < b_i\n (but she is allowed to cross at times \n    a_i\n or\n\n    b_i\n). The following picture summarizes the situation. In the picture\nthere are \n    m = 4\n railways and two trains are visible; the train going\nthrough railway \n    3\n is currently crossing the line between Isona and the\nvalidating machine. Isona is a really good runner, but she gets tired every\ntime she has to change her running speed. What is the minimum number of speed\nchanges she has to perform to get to the validating machine on the other\nplatform within \n    s\n seconds from now? Note that at the beginning Isona is\nnot running. She can start to run anytime. The instant she starts to run (i.e.\nher speed becomes positive) is not counted as a speed change. Input The first\nline of the input contains four integers \n    n\n, \n    m\n, \n    s\n, \n    v\n\n(\n    1 \n    \u2264 n \n    \u2264 500\n, \n    1 \n    \u2264 m \n    \u2264 10\n, \n    1 \n    \u2264 s, v\n    \n    \u2264 10^9\n) \u2014 the number of trains, the number of railways, the maximum\ntime in seconds Isona can spend crossing the railways, and the number of\nseconds she needs to traverse \n    1\n meter at maximum speed. Each of the next\n\n    n\n lines contains three integers \n    a_i\n, \n    b_i\n, \n    r_i\n (\n    1\n    \n    \u2264 a_i < b_i \n    \u2264 10^9\n, \n    1 \n    \u2264 r_i \n    \u2264 m\n) \u2014 the start and\nend times of the \n    i\n-th train crossing the straight line between Isona and\nthe validating machine, and the railway it will be using. It is guaranteed\nthat, for any two trains \n    i\n and \n    j\n that go through the same railway\n(i.e. \n    r_i = r_j\n), there is at least \n    1\n second between them (that\nis, either \n    a_j \n    \u2265 b_i + 1\n or \n    a_i \n    \u2265 b_j + 1\n). Output Print\nthe minimum number of speed changes Isona has to perform to get to the\nvalidating machine in time. If this is impossible, print \n    -1\n. Examples\nInput 4 3 5 1 1 2 1 3 4 1 2 3 2 3 4 3 Output 0 Input 3 3 12 2 2 10 1 1 6 2 8\n12 3 Output 2 Input 8 4 13 2 1 4 1 5 13 1 1 5 2 6 13 2 1 9 3 10 13 3 1 10 4 11\n13 4 Output 2 Input 1 1 2 2 1 2 1 Output -1 Note In the first sample, if Isona\nstarts running at time \n    t=0\n at maximum speed (\n    1\n m/s), she will\ncross each railway just when a train is about to traverse it, and she will\narrive at the other platform at time \n    4 = s - 1\n without changing speed.\nIn the second sample, a possible solution with \n    2\n speed changes is the\nfollowing: for the first \n    2\n seconds Isona goes at maximum speed\n(\n    0.5\n m/s), then she slows down to \n    0.25\n m/s for \n    4\n seconds\nuntil she reaches the second railway. At that point, she goes at maximum speed\nagain until she reaches the other platform. In the third sample, Isona can\nwait \n    2\n seconds before starting running. She then runs for \n    5\n\nseconds at maximum speed (\n    0.5\n m/s). After that, she waits for \n    1\n\nsecond not running (or running at \n    0\n m/s), and finally she runs again at\nmaximum speed for the last \n    5\n seconds. Overall, she changes speed twice.\n\n",
        "cf_contest_id": 1776,
        "cf_index": "E",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "4 3 5 1\r\n1 2 1\r\n3 4 1\r\n2 3 2\r\n3 4 3\r\n",
                "0\r\n"
            ],
            [
                "3 3 12 2\r\n2 10 1\r\n1 6 2\r\n8 12 3\r\n",
                "2\r\n"
            ],
            [
                "8 4 13 2\r\n1 4 1\r\n5 13 1\r\n1 5 2\r\n6 13 2\r\n1 9 3\r\n10 13 3\r\n1 10 4\r\n11 13 4\r\n",
                "2\r\n"
            ],
            [
                "1 1 2 2\r\n1 2 1\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 5 18 2\r\n1 5 1\r\n6 18 1\r\n3 9 2\r\n10 18 2\r\n5 10 3\r\n11 18 3\r\n7 14 4\r\n15 18 4\r\n9 15 5\r\n16 18 5\r\n",
                "3\r\n"
            ],
            [
                "2 10 100 2\r\n2 100 1\r\n1 98 10\r\n",
                "2\r\n"
            ],
            [
                "2 10 200 3\r\n1 90 1\r\n50 200 5\r\n",
                "-1\r\n"
            ],
            [
                "2 10 100 2\r\n10 100 1\r\n1 90 10\r\n",
                "0\r\n"
            ],
            [
                "10 3 100 6\r\n82 87 1\r\n11 22 1\r\n44 51 2\r\n28 29 1\r\n52 95 3\r\n33 39 3\r\n1 10 2\r\n68 75 2\r\n68 74 1\r\n13 19 2\r\n",
                "0\r\n"
            ],
            [
                "10 7 85 8\r\n76 89 7\r\n22 36 6\r\n17 61 4\r\n62 96 3\r\n57 86 6\r\n51 94 5\r\n39 40 1\r\n31 39 7\r\n7 18 5\r\n67 87 4\r\n",
                "-1\r\n"
            ],
            [
                "10 10 91 1\r\n1 100 9\r\n1 100 8\r\n1 100 1\r\n1 100 10\r\n1 100 3\r\n1 100 4\r\n1 100 7\r\n1 100 2\r\n1 100 5\r\n1 100 6\r\n",
                "-1\r\n"
            ],
            [
                "10 3 99994 12436\r\n14053 20692 1\r\n20693 72913 1\r\n1 14052 1\r\n36226 100000 3\r\n1 5048 2\r\n1 688 3\r\n70945 100000 2\r\n5049 70944 2\r\n72914 100000 1\r\n689 36225 3\r\n",
                "-1\r\n"
            ],
            [
                "10 7 67853 3238\r\n27043 44174 4\r\n69150 89334 2\r\n65082 73038 1\r\n18887 34795 6\r\n49387 76379 7\r\n63582 76311 4\r\n70393 78225 6\r\n52699 81352 5\r\n79076 90480 6\r\n46727 51948 4\r\n",
                "0\r\n"
            ],
            [
                "10 10 99991 6429\r\n1 100000 6\r\n1 100000 3\r\n1 100000 7\r\n1 100000 5\r\n1 100000 8\r\n1 100000 10\r\n1 100000 4\r\n1 100000 2\r\n1 100000 1\r\n1 100000 9\r\n",
                "-1\r\n"
            ]
        ]
    }
]