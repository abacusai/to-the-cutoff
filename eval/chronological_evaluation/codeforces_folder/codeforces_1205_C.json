[
    {
        "name": "Palindromic Paths",
        "description": "This is an interactive problem You are given a grid \n    n\n    \u00d7 n\n, where\n\n    n\n is odd. Rows are enumerated from \n    1\n to \n    n\n from up to down,\ncolumns are enumerated from \n    1\n to \n    n\n from left to right. Cell,\nstanding on the intersection of row \n    x\n and column \n    y\n, is denoted by\n\n    (x, y)\n. Every cell contains \n    0\n or \n    1\n. It is known that the\ntop-left cell contains \n    1\n, and the bottom-right cell contains \n    0\n. We\nwant to know numbers in all cells of the grid. To do so we can ask the\nfollowing questions: \"\n    ?\n \n    x_1\n \n    y_1\n \n    x_2\n \n    y_2\n\", where\n\n    1 \n    \u2264 x_1 \n    \u2264 x_2 \n    \u2264 n\n, \n    1 \n    \u2264 y_1 \n    \u2264 y_2 \n    \u2264 n\n, and\n\n    x_1 + y_1 + 2 \n    \u2264 x_2 + y_2\n. In other words, we output two different\ncells \n    (x_1, y_1)\n, \n    (x_2, y_2)\n of the grid such that we can get from\nthe first to the second by moving only to the right and down, and they aren't\nadjacent. As a response to such question you will be told if there exists a\npath between \n    (x_1, y_1)\n and \n    (x_2, y_2)\n, going only to the right or\ndown, numbers in cells of which form a palindrome. For example, paths, shown\nin green, are palindromic, so answer for \"\n    ?\n \n    1\n \n    1\n \n    2\n\n\n    3\n\" and \"\n    ?\n \n    1\n \n    2\n \n    3\n \n    3\n\" would be that there\nexists such path. However, there is no palindromic path between \n    (1, 1)\n\nand \n    (3, 1)\n. Determine all cells of the grid by asking not more than\n\n    n^2\n questions. It can be shown that the answer always exists. Input The\nfirst line contains odd integer (\n    3 \n    \u2264 n < 50\n) \u2014 the side of the grid.\nInteraction You begin the interaction by reading \n    n\n. To ask a question\nabout cells \n    (x_1, y_1), (x_2, y_2)\n, in a separate line output \"\n    ?\n\n\n    x_1\n \n    y_1\n \n    x_2\n \n    y_2\n\". Numbers in the query have to satisfy\n\n    1 \n    \u2264 x_1 \n    \u2264 x_2 \n    \u2264 n\n, \n    1 \n    \u2264 y_1 \n    \u2264 y_2 \n    \u2264 n\n, and\n\n    x_1 + y_1 + 2 \n    \u2264 x_2 + y_2\n. Don't forget to 'flush', to get the\nanswer. In response, you will receive \n    1\n, if there exists a path going\nfrom \n    (x_1, y_1)\n to \n    (x_2, y_2)\n only to the right or down, numbers\nin cells of which form a palindrome, and \n    0\n otherwise. In case your query\nis invalid or you asked more than \n    n^2\n queries, program will print\n\n    -1\n and will finish interaction. You will receive Wrong answer verdict.\nMake sure to exit immediately to avoid getting other verdicts. When you\ndetermine numbers in all cells, output \"!\". Then output \n    n\n lines, the\n\n    i\n-th of which is a string of length \n    n\n, corresponding to numbers in\nthe \n    i\n-th row of the grid. After printing a query do not forget to output\nend of line and flush the output. Otherwise, you will get Idleness limit\nexceeded. To do this, use: fflush(stdout) or cout.flush() in C++;\nSystem.out.flush() in Java; flush(output) in Pascal; stdout.flush() in Python;\nsee documentation for other languages.Hack Format To hack, use the following\nformat. The first line should contain a single odd integer \n    n\n (side of\nyour grid). The \n    i\n-th of \n    n\n following lines should contain a string\nof length \n    n\n corresponding to the \n    i\n-th row of the grid. Top left\nelement of the grid has to be equal to \n    1\n, bottom right has to be equal\nto \n    0\n. Example Input 3 0 1 0 1 1 1 1 Output ? 1 1 1 3 ? 1 1 2 3 ? 2 1 2 3\n? 3 1 3 3 ? 2 2 3 3 ? 1 2 3 2 ? 1 2 3 3 ! 100 001 000\n\n",
        "cf_contest_id": 1205,
        "cf_index": "C",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "interactive"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n100\r\n001\r\n000\r\n",
                "? 1 1 1 3\r\n? 1 2 2 3\r\n? 1 1 2 2\r\n? 2 1 2 3\r\n? 2 2 3 3\r\n? 2 1 3 2\r\n? 3 1 3 3\r\n? 1 1 2 3\r\n!\r\n100\r\n001\r\n000\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n10000\r\n01000\r\n11010\r\n10111\r\n11100\r\n",
                "? 1 1 1 3\r\n? 1 2 1 4\r\n? 1 3 1 5\r\n? 1 4 2 5\r\n? 1 3 2 4\r\n? 1 2 2 3\r\n? 1 1 2 2\r\n? 2 1 2 3\r\n? 2 4 3 5\r\n? 2 3 3 4\r\n? 2 2 3 3\r\n? 2 1 3 2\r\n? 3 1 3 3\r\n? 3 4 4 5\r\n? 3 3 4 4\r\n? 3 2 4 3\r\n? 3 1 4 2\r\n? 4 1 4 3\r\n? 4 4 5 5\r\n? 4 3 5 4\r\n? 4 2 5 3\r\n? 4 1 5 2\r\n? 5 1 5 3\r\n? 1 1 2 3\r\n? 1 2 3 3\r\n!\r\n10000\r\n01000\r\n11010\r\n10111\r\n11100\r\n"
            ],
            [
                "3\r\n111\r\n110\r\n100\r\n",
                "? 1 1 1 3\r\n? 1 2 2 3\r\n? 1 1 2 2\r\n? 2 1 2 3\r\n? 2 2 3 3\r\n? 2 1 3 2\r\n? 3 1 3 3\r\n? 1 1 2 3\r\n? 1 2 3 3\r\n!\r\n111\r\n110\r\n100\r\n"
            ]
        ]
    }
]