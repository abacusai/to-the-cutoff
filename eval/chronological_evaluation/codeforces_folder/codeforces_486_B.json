[
    {
        "name": "OR in Matrix",
        "description": "Let's define logical OR as an operation on two logical values (i. e. values\nthat belong to the set 0, 1) that is equal to 1 if either or both of the\nlogical values is set to 1, otherwise it is 0. We can define logical OR of\nthree or more logical values in the same manner: where is equal to 1 if some\nai = 1, otherwise it is equal to 0. Nam has a matrix A consisting of m rows\nand n columns. The rows are numbered from 1 to m, columns are numbered from 1\nto n. Element at row i (1 \u2264 i \u2264 m) and column j (1 \u2264 j \u2264 n) is denoted as Aij.\nAll elements of A are either 0 or 1. From matrix A, Nam creates another matrix\nB of the same size using formula: . (Bij is OR of all elements in row i and\ncolumn j of matrix A) Nam gives you matrix B and challenges you to guess\nmatrix A. Although Nam is smart, he could probably make a mistake while\ncalculating matrix B, since size of A can be large. Input The first line\ncontains two integer m and n (1 \u2264 m, n \u2264 100), number of rows and number of\ncolumns of matrices respectively. The next m lines each contain n integers\nseparated by spaces describing rows of matrix B (each element of B is either 0\nor 1). Output In the first line, print \"NO\" if Nam has made a mistake when\ncalculating B, otherwise print \"YES\". If the first line is \"YES\", then also\nprint m rows consisting of n integers representing matrix A that can produce\ngiven matrix B. If there are several solutions print any one. Examples Input 2\n2 1 0 0 0 Output NO Input 2 3 1 1 1 1 1 1 Output YES 1 1 1 1 1 1 Input 2 3 0 1\n0 1 1 1 Output YES 0 0 0 0 1 0\n\n",
        "cf_contest_id": 486,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "hashing",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 2\r\n1 0\r\n0 0\r\n",
                "NO\r\n"
            ],
            [
                "2 3\r\n1 1 1\r\n1 1 1\r\n",
                "YES\r\n1 1 1 \r\n1 1 1 \r\n"
            ],
            [
                "2 3\r\n0 1 0\r\n1 1 1\r\n",
                "YES\r\n0 0 0 \r\n0 1 0 \r\n"
            ]
        ],
        "private_cases": [
            [
                "5 5\r\n1 1 1 1 1\r\n1 0 0 0 0\r\n1 0 0 0 0\r\n1 0 0 0 0\r\n1 0 0 0 0\r\n",
                "YES\r\n1 0 0 0 0 \r\n0 0 0 0 0 \r\n0 0 0 0 0 \r\n0 0 0 0 0 \r\n0 0 0 0 0 \r\n"
            ],
            [
                "5 5\r\n1 1 1 0 1\r\n1 1 0 0 1\r\n0 0 1 1 1\r\n1 1 1 1 0\r\n1 0 1 1 1\r\n",
                "NO\r\n"
            ],
            [
                "5 6\r\n1 0 0 0 1 1\r\n1 1 1 1 1 1\r\n1 1 1 1 1 1\r\n1 0 0 0 1 1\r\n1 0 0 0 1 1\r\n",
                "YES\r\n0 0 0 0 0 0 \r\n1 0 0 0 1 1 \r\n1 0 0 0 1 1 \r\n0 0 0 0 0 0 \r\n0 0 0 0 0 0 \r\n"
            ],
            [
                "5 6\r\n1 1 1 1 0 1\r\n1 1 1 1 0 1\r\n1 1 1 0 1 1\r\n1 1 0 1 1 1\r\n0 0 1 1 1 0\r\n",
                "NO\r\n"
            ],
            [
                "7 10\r\n1 0 1 0 0 0 1 0 1 0\r\n1 0 1 0 0 0 1 0 1 0\r\n1 1 1 1 1 1 1 1 1 1\r\n1 0 1 0 0 0 1 0 1 0\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1\r\n1 1 1 1 1 1 1 1 1 1\r\n",
                "YES\r\n0 0 0 0 0 0 0 0 0 0 \r\n0 0 0 0 0 0 0 0 0 0 \r\n1 0 1 0 0 0 1 0 1 0 \r\n0 0 0 0 0 0 0 0 0 0 \r\n1 0 1 0 0 0 1 0 1 0 \r\n1 0 1 0 0 0 1 0 1 0 \r\n1 0 1 0 0 0 1 0 1 0 \r\n"
            ],
            [
                "8 2\r\n0 1\r\n0 1\r\n1 0\r\n0 1\r\n0 1\r\n0 1\r\n0 1\r\n0 1\r\n",
                "NO\r\n"
            ],
            [
                "1 1\r\n0\r\n",
                "YES\r\n0 \r\n"
            ],
            [
                "1 1\r\n1\r\n",
                "YES\r\n1 \r\n"
            ],
            [
                "3 3\r\n1 0 0\r\n1 0 0\r\n1 0 0\r\n",
                "NO\r\n"
            ],
            [
                "3 2\r\n1 0\r\n1 0\r\n0 0\r\n",
                "NO\r\n"
            ],
            [
                "2 2\r\n0 0\r\n0 0\r\n",
                "YES\r\n0 0 \r\n0 0 \r\n"
            ],
            [
                "3 3\r\n0 0 0\r\n0 0 0\r\n0 0 0\r\n",
                "YES\r\n0 0 0 \r\n0 0 0 \r\n0 0 0 \r\n"
            ],
            [
                "3 2\r\n1 0\r\n1 0\r\n1 0\r\n",
                "NO\r\n"
            ],
            [
                "1 2\r\n1 0\r\n",
                "NO\r\n"
            ],
            [
                "3 3\r\n0 1 0\r\n0 1 0\r\n0 1 0\r\n",
                "NO\r\n"
            ],
            [
                "3 3\r\n1 1 1\r\n0 0 0\r\n0 0 0\r\n",
                "NO\r\n"
            ],
            [
                "3 3\r\n1 0 1\r\n0 0 1\r\n1 1 1\r\n",
                "NO\r\n"
            ],
            [
                "1 3\r\n0 1 1\r\n",
                "NO\r\n"
            ],
            [
                "2 3\r\n0 1 0\r\n0 1 1\r\n",
                "NO\r\n"
            ],
            [
                "2 3\r\n0 0 0\r\n0 0 0\r\n",
                "YES\r\n0 0 0 \r\n0 0 0 \r\n"
            ],
            [
                "6 6\r\n0 0 1 1 0 0\r\n0 0 1 1 0 0\r\n1 1 1 1 1 1\r\n1 1 1 1 1 1\r\n0 0 1 1 0 0\r\n0 0 1 1 0 1\r\n",
                "NO\r\n"
            ],
            [
                "2 3\r\n0 0 0\r\n1 1 1\r\n",
                "NO\r\n"
            ],
            [
                "2 2\r\n1 1\r\n0 0\r\n",
                "NO\r\n"
            ],
            [
                "5 5\r\n0 1 0 0 0\r\n1 1 1 1 1\r\n0 1 0 0 0\r\n0 1 0 0 0\r\n0 1 0 0 1\r\n",
                "NO\r\n"
            ],
            [
                "3 3\r\n1 1 1\r\n1 1 0\r\n1 0 0\r\n",
                "NO\r\n"
            ]
        ]
    }
]