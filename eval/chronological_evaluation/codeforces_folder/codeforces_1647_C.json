[
    {
        "name": "Madoka and Childish Pranks",
        "description": "Madoka as a child was an extremely capricious girl, and one of her favorite\npranks was drawing on her wall. According to Madoka's memories, the wall was a\ntable of \n    n\n rows and \n    m\n columns, consisting only of zeroes and ones.\nThe coordinate of the cell in the \n    i\n-th row and the \n    j\n-th column\n(\n    1 \n    \u2264 i \n    \u2264 n\n, \n    1 \n    \u2264 j \n    \u2264 m\n) is \n    (i, j)\n. One day\nshe saw a picture \"Mahou Shoujo Madoka Magica\" and decided to draw it on her\nwall. Initially, the Madoka's table is a table of size \n    n \n    \u00d7 m\n\nfilled with zeroes. Then she applies the following operation any number of\ntimes: Madoka selects any rectangular subtable of the table and paints it in a\nchess coloring (the upper left corner of the subtable always has the color\n\n    0\n). Note that some cells may be colored several times. In this case, the\nfinal color of the cell is equal to the color obtained during the last\nrepainting. White color means \n    0\n, black means \n    1\n. So, for example,\nthe table in the first picture is painted in a chess coloring, and the others\nare not. For better understanding of the statement, we recommend you to read\nthe explanation of the first test. Help Madoka and find some sequence of no\nmore than \n    n \n    \u00b7 m\n operations that allows you to obtain the picture\nshe wants, or determine that this is impossible. Input Each test contains\nmultiple test cases. The first line contains a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 10\n) \u2014 the number of test cases. Description of the test cases\nfollows. The first line of each test case contains two integers \n    n\n and\n\n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 100\n) \u2014 the size of the table. Each of the\nfollowing \n    n\n lines contains a string of length \n    m\n consisting only of\n\n    1\n and \n    0\n \u2014 description of the picture that Madoka wants to obtain.\nOutput If it is impossible to obtain the given picture, print \n    -1\n.\nOtherwise, print in the first line a single integer \n    q\n (\n    0 \n    \u2264 q\n    \n    \u2264 n \n    \u00b7 m\n) \u2014 the number of operations you need to obtain the\npicture. Note that you do not need to minimize the number of operations. Then\nfor each operation (in the order of execution) print a single line containing\nfour numbers \u2014 the coordinates of the upper-left corner and the lower-right\ncorner of the rectangle. Example Input 4 4 5 01000 10100 01010 00110 2 3 001\n010 3 3 110 101 000 1 1 0 Output 4 1 1 3 3 3 3 4 4 4 3 4 4 4 2 4 3 1 1 2 2 3\n-1 0 Note The description of the first test case is below. In the third test\ncase, it is impossible to paint the desired picture. In the fourth test case,\nthe initial table is already the desired picture.\n\n",
        "cf_contest_id": 1647,
        "cf_index": "C",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4 5\r\n01000\r\n10100\r\n01010\r\n00110\r\n2 3\r\n001\r\n010\r\n3 3\r\n110\r\n101\r\n000\r\n1 1\r\n0\r\n",
                "7\r\n1 1 1 2\r\n2 2 2 3\r\n3 3 3 4\r\n3 1 3 2\r\n4 3 4 4\r\n4 2 4 3\r\n1 1 2 1\r\n2\r\n1 2 1 3\r\n2 1 2 2\r\n-1\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n3 2\r\n11\r\n01\r\n10\r\n3 2\r\n11\r\n00\r\n01\r\n2 2\r\n01\r\n11\r\n2 3\r\n011\r\n011\r\n1 3\r\n010\r\n3 3\r\n011\r\n111\r\n110\r\n3 3\r\n111\r\n001\r\n001\r\n3 1\r\n0\r\n1\r\n1\r\n2 2\r\n01\r\n11\r\n3 2\r\n11\r\n11\r\n01\r\n",
                "-1\r\n-1\r\n3\r\n1 1 1 2\r\n2 1 2 2\r\n1 1 2 1\r\n4\r\n1 2 1 3\r\n1 1 1 2\r\n2 2 2 3\r\n2 1 2 2\r\n1\r\n1 1 1 2\r\n7\r\n1 2 1 3\r\n1 1 1 2\r\n2 2 2 3\r\n2 1 2 2\r\n3 1 3 2\r\n2 1 3 1\r\n1 1 2 1\r\n-1\r\n2\r\n2 1 3 1\r\n1 1 2 1\r\n3\r\n1 1 1 2\r\n2 1 2 2\r\n1 1 2 1\r\n-1\r\n"
            ],
            [
                "10\r\n4 2\r\n11\r\n11\r\n11\r\n11\r\n3 5\r\n11011\r\n10101\r\n11111\r\n4 3\r\n111\r\n110\r\n001\r\n111\r\n5 5\r\n11101\r\n11111\r\n01111\r\n11111\r\n11111\r\n5 3\r\n000\r\n110\r\n111\r\n101\r\n011\r\n3 5\r\n11111\r\n01011\r\n11111\r\n4 3\r\n011\r\n111\r\n111\r\n111\r\n4 5\r\n01011\r\n10111\r\n11111\r\n11111\r\n4 4\r\n0111\r\n1111\r\n1111\r\n0111\r\n5 3\r\n111\r\n111\r\n111\r\n111\r\n111\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n9\r\n2 1 2 2\r\n3 2 3 3\r\n3 1 3 2\r\n4 2 4 3\r\n5 2 5 3\r\n5 1 5 2\r\n3 1 4 1\r\n2 1 3 1\r\n1 1 2 1\r\n-1\r\n11\r\n1 2 1 3\r\n1 1 1 2\r\n2 2 2 3\r\n2 1 2 2\r\n3 2 3 3\r\n3 1 3 2\r\n4 2 4 3\r\n4 1 4 2\r\n3 1 4 1\r\n2 1 3 1\r\n1 1 2 1\r\n17\r\n1 4 1 5\r\n1 3 1 4\r\n1 1 1 2\r\n2 4 2 5\r\n2 3 2 4\r\n2 2 2 3\r\n3 4 3 5\r\n3 3 3 4\r\n3 2 3 3\r\n3 1 3 2\r\n4 4 4 5\r\n4 3 4 4\r\n4 2 4 3\r\n4 1 4 2\r\n3 1 4 1\r\n2 1 3 1\r\n1 1 2 1\r\n14\r\n1 3 1 4\r\n1 2 1 3\r\n1 1 1 2\r\n2 3 2 4\r\n2 2 2 3\r\n2 1 2 2\r\n3 3 3 4\r\n3 2 3 3\r\n3 1 3 2\r\n4 3 4 4\r\n4 2 4 3\r\n4 1 4 2\r\n2 1 3 1\r\n1 1 2 1\r\n-1\r\n"
            ]
        ]
    }
]