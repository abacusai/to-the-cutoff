[
    {
        "name": "Minimum and Maximum",
        "description": "This is an interactive problem. You have to use flush operation right after\nprinting each line. For example, in C++ you should use function\nfflush(stdout), in Java \u2014 System.out.flush(), in Pascal \u2014 flush(output) and in\nPython \u2014 sys.stdout.flush(). In this problem, you need to find maximal and\nminimal elements of an array. What could be simpler? You can imagine that the\njury has an array, and initially you know the only number n \u2014 array's length.\nArray's elements are numbered from 1 to n. You are allowed to compare two\nelements of the array by using their indices i and j. There are three possible\nresponses to this query: '<' (if ai is less than aj), '=' (if ai is equal to\naj) and finally '>' (if ai is greater than aj). It's known that it's always\npossible to find both maximal and minimal elements of the array by using no\nmore than comparisons, where \u2308 x\u2309 is the result of rounding x up. Write the\nprogram that will find positions of the minimum and the maximum in the jury's\narray of length n, by using no more than f(n) comparisons. Interaction Each\ntest for this problem will contain one or more arrays. You have to find\npositions of minimal and maximal elements for each of these arrays. The first\nline of the input contains integer T (1 \u2264 T \u2264 1000) \u2014 number of arrays in the\ntest. Thus, at the beginning, you program should read number T, and then it\nshould solve the problem for T jury's arrays one by one. Then input for each\narray goes. Firstly, your program has to read the number n (1 \u2264 n \u2264 50) \u2014 the\nlength of the array. It will be provided in the next line of the input.\nFurther, your program can perform comparisons or report that the answer is\nfound. To perform a comparison, you have to output string of the following\npattern \u00ab? i j\u00bb (i and j must be integer numbers from 1 to n) \u2014 the indices of\nthe elements to compare in the current query. To report the indices of minimal\nand maximal elements of the hidden array, your program have to output a line\nin the form \u00ab! i j\u00bb (i and j must be integer numbers from 1 to n), where i is\nan index of the minimal element of array, and j is an index of the maximal\nelement of the array. If there are several possible answers to the problem,\nyou can output any of them. There are several possible responses for a\ncomparison: '<' \u2014 if ai is less than aj, '=' \u2014 if ai is equal to aj, '>' \u2014 if\nai is greater than aj. For an array of length n your program can make at most\ncomparisons. Note that the operation of reporting an answer (\u00ab! i j\u00bb ) is not\nincluded into the value of f(n). After the answer is reported, your program\nhas to solve the problem for the next array or it should terminate if all T\narrays are processed. Example Input 2 2 > 3 = = Output ? 1 2 ! 2 1 ? 3 1 ? 2 1\n! 2 3\n\n",
        "cf_contest_id": 730,
        "cf_index": "B",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "interactive"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "2\r\n2\r\n2 1\r\n3\r\n1 1 1\r\n",
                "1 out of 1\r\n3 out of 3\r\n2 queries processed [sumn=5]\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n4\r\n1 1 2 2\r\n",
                "4 out of 4\r\n1 queries processed [sumn=4]\r\n"
            ],
            [
                "2\r\n5\r\n1 1 2 1 1\r\n3\r\n3 2 1\r\n",
                "6 out of 6\r\n2 out of 3\r\n2 queries processed [sumn=8]\r\n"
            ],
            [
                "2\r\n6\r\n2 1 2 1 2 2\r\n3\r\n2 2 1\r\n",
                "7 out of 7\r\n2 out of 3\r\n2 queries processed [sumn=9]\r\n"
            ],
            [
                "2\r\n4\r\n2 3 3 3\r\n5\r\n4 4 4 3 2\r\n",
                "4 out of 4\r\n5 out of 6\r\n2 queries processed [sumn=9]\r\n"
            ],
            [
                "1\r\n10\r\n1 2 1 2 1 3 1 3 1 2\r\n",
                "13 out of 13\r\n1 queries processed [sumn=10]\r\n"
            ],
            [
                "1\r\n1\r\n1\r\n",
                "0 out of 0\r\n1 queries processed [sumn=1]\r\n"
            ],
            [
                "2\r\n2\r\n1 2\r\n2\r\n2 1\r\n",
                "1 out of 1\r\n1 out of 1\r\n2 queries processed [sumn=4]\r\n"
            ],
            [
                "6\r\n3\r\n1 2 3\r\n3\r\n1 3 2\r\n3\r\n2 1 3\r\n3\r\n2 3 1\r\n3\r\n3 1 2\r\n3\r\n3 2 1\r\n",
                "3 out of 3\r\n3 out of 3\r\n3 out of 3\r\n2 out of 3\r\n3 out of 3\r\n2 out of 3\r\n6 queries processed [sumn=18]\r\n"
            ],
            [
                "24\r\n4\r\n1 2 3 4\r\n4\r\n1 2 4 3\r\n4\r\n1 3 2 4\r\n4\r\n1 3 4 2\r\n4\r\n1 4 2 3\r\n4\r\n1 4 3 2\r\n4\r\n2 1 3 4\r\n4\r\n2 1 4 3\r\n4\r\n2 3 1 4\r\n4\r\n2 3 4 1\r\n4\r\n2 4 1 3\r\n4\r\n2 4 3 1\r\n4\r\n3 1 2 4\r\n4\r\n3 1 4 2\r\n4\r\n3 2 1 4\r\n4\r\n3 2 4 1\r\n4\r\n3 4 1 2\r\n4\r\n3 4 2 1\r\n4\r\n4 1 2 3\r\n4\r\n4 1 3 2\r\n4\r\n4 2 1 3\r\n4\r\n4 2 3 1\r\n4\r\n4 3 1 2\r\n4\r\n4 3 2 1\r\n",
                "4 out of 4\r\n4 out of 4\r\n4 out of 4\r\n4 out of 4\r\n4 out of 4\r\n4 out of 4\r\n4 out of 4\r\n4 out of 4\r\n4 out of 4\r\n4 out of 4\r\n4 out of 4\r\n4 out of 4\r\n4 out of 4\r\n4 out of 4\r\n4 out of 4\r\n4 out of 4\r\n4 out of 4\r\n4 out of 4\r\n4 out of 4\r\n4 out of 4\r\n4 out of 4\r\n4 out of 4\r\n4 out of 4\r\n4 out of 4\r\n24 queries processed [sumn=96]\r\n"
            ],
            [
                "1\r\n1\r\n1000000000\r\n",
                "0 out of 0\r\n1 queries processed [sumn=1]\r\n"
            ]
        ]
    }
]