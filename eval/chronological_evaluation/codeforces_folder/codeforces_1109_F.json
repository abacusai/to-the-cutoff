[
    {
        "name": "Sasha and Algorithm of Silence's Sounds",
        "description": "One fine day Sasha went to the park for a walk. In the park, he saw that his\nfavorite bench is occupied, and he had to sit down on the neighboring one. He\nsat down and began to listen to the silence. Suddenly, he got a question: what\nif in different parts of the park, the silence sounds in different ways? So it\nwas. Let's divide the park into \n    1 \n    \u00d7 1\n meter squares and call them\ncells, and numerate rows from \n    1\n to \n    n\n from up to down, and columns\nfrom \n    1\n to \n    m\n from left to right. And now, every cell can be\ndescribed with a pair of two integers \n    (x, y)\n, where \n    x\n \u2014 the number\nof the row, and \n    y\n \u2014 the number of the column. Sasha knows that the level\nof silence in the cell \n    (i, j)\n equals to \n    f_i,j\n, and all\n\n    f_i,j\n form a permutation of numbers from \n    1\n to \n    n \n    \u00b7 m\n.\nSasha decided to count, how many are there pleasant segments of silence? Let's\ntake some segment \n    [l \n    \u2026 r]\n. Denote \n    S\n as the set of cells\n\n    (i, j)\n that \n    l \n    \u2264 f_i,j\n    \u2264 r\n. Then, the segment of silence\n\n    [l \n    \u2026 r]\n is pleasant if there is only one simple path between\nevery pair of cells from \n    S\n (path can't contain cells, which are not in\n\n    S\n). In other words, set \n    S\n should look like a tree on a plain.\nSasha has done this task pretty quickly, and called the algorithm \u2014 \"algorithm\nof silence's sounds\". Time passed, and the only thing left from the algorithm\nis a legend. To prove the truthfulness of this story, you have to help Sasha\nand to find the number of different pleasant segments of silence. Two segments\n\n    [l_1 \n    \u2026 r_1]\n, \n    [l_2 \n    \u2026 r_2]\n are different, if \n    l_1\n    \n    \u2260 l_2\n or \n    r_1 \n    \u2260 r_2\n or both at the same time. Input The\nfirst line contains two integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264\n    1000\n, \n    1 \n    \u2264 n \n    \u00b7 m \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the size of the\npark. Each from next \n    n\n lines contains \n    m\n integers \n    f_i,j\n\n(\n    1 \n    \u2264 f_i,j\n    \u2264 n \n    \u00b7 m\n) \u2014 the level of silence in the cell\nwith number \n    (i, j)\n. It is guaranteed, that all \n    f_i,j\n are\ndifferent. Output Print one integer \u2014 the number of pleasant segments of\nsilence. Examples Input 1 5 1 2 3 4 5 Output 15 Input 2 3 1 2 3 4 5 6 Output\n15 Input 4 4 4 3 2 16 1 13 14 15 5 7 8 12 6 11 9 10 Output 50 Note In the\nfirst example, all segments of silence are pleasant. In the second example,\npleasant segments of silence are the following:\n\n",
        "cf_contest_id": 1109,
        "cf_index": "F",
        "cf_rating": 3200,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "trees"
        ],
        "time_limit_seconds": 1.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1 5\r\n1 2 3 4 5\r\n",
                "15\r\n"
            ],
            [
                "2 3\r\n1 2 3\r\n4 5 6\r\n",
                "15\r\n"
            ],
            [
                "4 4\r\n4 3 2 16\r\n1 13 14 15\r\n5 7 8 12\r\n6 11 9 10\r\n",
                "50\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n1\r\n",
                "1\r\n"
            ]
        ]
    }
]