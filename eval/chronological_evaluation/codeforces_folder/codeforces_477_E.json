[
    {
        "name": "Dreamoon and Notepad",
        "description": "Dreamoon has just created a document of hard problems using notepad.exe. The\ndocument consists of n lines of text, ai denotes the length of the i-th line.\nHe now wants to know what is the fastest way to move the cursor around because\nthe document is really long. Let (r, c) be a current cursor position, where r\nis row number and c is position of cursor in the row. We have 1 \u2264 r \u2264 n and 0\n\u2264 c \u2264 ar. We can use following six operations in notepad.exe to move our\ncursor assuming the current cursor position is at (r, c): up key: the new\ncursor position (nr, nc) = (max(r - 1, 1), min(anr, c)) down key: the new\ncursor position (nr, nc) = (min(r + 1, n), min(anr, c)) left key: the new\ncursor position (nr, nc) = (r, max(0, c - 1)) right key: the new cursor\nposition (nr, nc) = (r, min(anr, c + 1)) HOME key: the new cursor position\n(nr, nc) = (r, 0) END key: the new cursor position (nr, nc) = (r, ar) You're\ngiven the document description (n and sequence ai) and q queries from\nDreamoon. Each query asks what minimal number of key presses is needed to move\nthe cursor from (r1, c1) to (r2, c2). Input The first line contains an integer\nn(1 \u2264 n \u2264 400, 000) \u2014 the number of lines of text. The second line contains n\nintegers a1, a2, ..., an(1 \u2264 ai \u2264 10^8). The third line contains an integer\nq(1 \u2264 q \u2264 400, 000). Each of the next q lines contains four integers r1, c1,\nr2, c2 representing a query (1 \u2264 r1, r2 \u2264 n, 0 \u2264 c1 \u2264 ar1, 0 \u2264 c2 \u2264 ar2).\nOutput For each query print the result of the query. Examples Input 9 1 3 5 3\n1 3 5 3 1 4 3 5 3 1 3 3 7 3 1 0 3 3 6 0 7 3 Output 2 5 3 2 Input 2 10 5 1 1 0\n1 5 Output 3 Note In the first sample, the first query can be solved with\nkeys: HOME, right. The second query can be solved with keys: down, down, down,\nEND, down. The third query can be solved with keys: down, END, down. The\nfourth query can be solved with keys: END, down.\n\n",
        "cf_contest_id": 477,
        "cf_index": "E",
        "cf_rating": 3100,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 3.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "9\r\n1 3 5 3 1 3 5 3 1\r\n4\r\n3 5 3 1\r\n3 3 7 3\r\n1 0 3 3\r\n6 0 7 3\r\n",
                "2\r\n5\r\n3\r\n2\r\n"
            ],
            [
                "2\r\n10 5\r\n1\r\n1 0 1 5\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n4\r\n1 0 1 0\r\n1 0 1 1\r\n1 1 1 0\r\n1 1 1 1\r\n",
                "0\r\n1\r\n1\r\n0\r\n"
            ],
            [
                "13\r\n245468 180916 290696 340113 166951 259500 135270 32481 211977 128410 185376 380953 27639\r\n13\r\n2 24219 11 155914\r\n7 14020 4 238572\r\n3 289371 11 39808\r\n11 1256 7 36790\r\n1 244718 8 27128\r\n2 7109 11 87319\r\n10 69704 11 91451\r\n12 268168 2 111275\r\n8 14149 13 26188\r\n5 44656 10 95172\r\n8 6784 3 170572\r\n3 6243 8 17774\r\n1 3175 9 50994\r\n",
                "27514\r\n52130\r\n7335\r\n4314\r\n528\r\n41101\r\n21748\r\n24006\r\n1457\r\n33244\r\n3627\r\n9881\r\n18522\r\n"
            ],
            [
                "3\r\n5 100 15\r\n3\r\n2 99 2 4\r\n2 100 2 10\r\n2 99 2 14\r\n",
                "3\r\n7\r\n3\r\n"
            ],
            [
                "10\r\n100 10000 10000 10000 10000 10000 10000 10000 10000 10000\r\n5\r\n10 999 10 100\r\n10 900 10 100\r\n10 900 10 200\r\n10 900 1 0\r\n10 900 1 50\r\n",
                "18\r\n18\r\n118\r\n10\r\n59\r\n"
            ]
        ]
    }
]