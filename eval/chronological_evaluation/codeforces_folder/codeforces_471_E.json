[
    {
        "name": "MUH and Lots and Lots of Segments",
        "description": "Polar bears Menshykov and Uslada from the zoo of St. Petersburg and elephant\nHorace from the zoo of Kiev decided to do some painting. As they were trying\nto create their first masterpiece, they made a draft on a piece of paper. The\ndraft consists of n segments. Each segment was either horizontal or vertical.\nNow the friends want to simplify the draft by deleting some segments or parts\nof segments so that the final masterpiece meets three conditions: Horace wants\nto be able to paint the whole picture in one stroke: by putting the brush on\nthe paper and never taking it off until the picture is ready. The brush can\npaint the same place multiple times. That's why all the remaining segments\nmust form a single connected shape. Menshykov wants the resulting shape to be\nsimple. He defines a simple shape as a shape that doesn't contain any cycles.\nInitially all the segment on the draft have integer startpoint and endpoint\ncoordinates. Uslada doesn't like real coordinates and she wants this condition\nto be fulfilled after all the changes. As in other parts the draft is already\nbeautiful, the friends decided to delete such parts of the draft that the sum\nof lengths of the remaining segments is as large as possible. Your task is to\ncount this maximum sum of the lengths that remain after all the extra segments\nare removed. Input The first line of the input contains integer n (1 \u2264 n \u2264\n2\u00b710^5) \u2014 the number of segments on the draft. The next n lines contain four\nintegers each: x1, y1, x2, y2 ( - 10^9 \u2264 x1 \u2264 x2 \u2264 10^9; - 10^9 \u2264 y1 \u2264 y2 \u2264\n10^9) \u2014 the two startpoint and the two endpoint coordinates of a segment. All\nsegments are non-degenerative and either are strictly horizontal or strictly\nvertical. No two horizontal segments share common points. No two vertical\nsegments share common points. Output Print a single integer \u2014 the maximum sum\nof lengths for the remaining segments. Examples Input 2 0 0 0 1 1 0 1 1 Output\n1 Input 4 0 0 1 0 0 0 0 1 1 -1 1 2 0 1 1 1 Output 5 Note The shapes that you\ncan get in the two given samples are: In the first sample you need to delete\nany segment as the two segments together do not form a single connected shape.\nIn the second sample the initial segments form a cycle, there are four ways to\nbreak the cycle: delete the first, second or fourth segment altogether or\ndelete the middle of the third segment. The last way is shown on the picture.\n\n",
        "cf_contest_id": 471,
        "cf_index": "E",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dsu"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "2\r\n0 0 0 1\r\n1 0 1 1\r\n",
                "1\r\n"
            ],
            [
                "4\r\n0 0 1 0\r\n0 0 0 1\r\n1 -1 1 2\r\n0 1 1 1\r\n",
                "5\r\n"
            ]
        ],
        "private_cases": [
            [
                "20\r\n0 0 9 0\r\n0 1 9 1\r\n0 2 9 2\r\n0 3 9 3\r\n0 4 9 4\r\n0 5 9 5\r\n0 6 9 6\r\n0 7 9 7\r\n0 8 9 8\r\n0 9 9 9\r\n0 0 0 9\r\n1 0 1 9\r\n2 0 2 9\r\n3 0 3 9\r\n4 0 4 9\r\n5 0 5 9\r\n6 0 6 9\r\n7 0 7 9\r\n8 0 8 9\r\n9 0 9 9\r\n",
                "99\r\n"
            ],
            [
                "5\r\n-5 1 -5 5\r\n0 2 4 2\r\n1 3 3 3\r\n2 0 2 4\r\n5 1 5 5\r\n",
                "10\r\n"
            ],
            [
                "20\r\n3 0 6 0\r\n-7 1 6 1\r\n-1 2 3 2\r\n2 3 9 3\r\n0 4 6 4\r\n6 5 7 5\r\n-2 6 3 6\r\n-5 7 -1 7\r\n0 8 2 8\r\n-8 9 -1 9\r\n0 0 0 1\r\n1 -6 1 3\r\n2 -10 2 -9\r\n3 -7 3 1\r\n4 -3 4 2\r\n5 3 5 4\r\n6 -8 6 1\r\n7 0 7 6\r\n8 -8 8 -1\r\n9 -7 9 -2\r\n",
                "50\r\n"
            ],
            [
                "5\r\n1 -5 5 -5\r\n2 0 2 4\r\n3 1 3 3\r\n0 2 4 2\r\n1 5 5 5\r\n",
                "10\r\n"
            ],
            [
                "4\r\n0 0 1 0\r\n0 0 0 3\r\n0 3 1 3\r\n1 1 1 2\r\n",
                "5\r\n"
            ],
            [
                "3\r\n-1 0 -1 1\r\n4 -2 4 3\r\n5 -3 5 2\r\n",
                "5\r\n"
            ],
            [
                "4\r\n-1000000000 -1000000000 1000000000 -1000000000\r\n-1000000000 -1000000000 -1000000000 1000000000\r\n1000000000 -1000000000 1000000000 1000000000\r\n-1000000000 1000000000 1000000000 1000000000\r\n",
                "7999999999\r\n"
            ],
            [
                "1\r\n0 0 0 1\r\n",
                "1\r\n"
            ]
        ]
    }
]