[
    {
        "name": "Restore Permutation",
        "description": "An array of integers \n    p_1,p_2, \n    \u2026,p_n\n is called a permutation\nif it contains each number from \n    1\n to \n    n\n exactly once. For example,\nthe following arrays are permutations: \n    [3,1,2], [1], [1,2,3,4,5]\n and\n\n    [4,3,1,2]\n. The following arrays are not permutations: \n    [2], [1,1],\n    [2,3,4]\n. There is a hidden permutation of length \n    n\n. For each index\n\n    i\n, you are given \n    s_i\n, which equals to the sum of all \n    p_j\n\nsuch that \n    j < i\n and \n    p_j < p_i\n. In other words, \n    s_i\n is\nthe sum of elements before the \n    i\n-th element that are smaller than the\n\n    i\n-th element. Your task is to restore the permutation. Input The first\nline contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7\n    10^5\n) \u2014 the size of the permutation. The second line contains \n    n\n\nintegers \n    s_1, s_2, \n    \u2026, s_n\n (\n    0 \n    \u2264 s_i\n    \u2264\n    n(n-1)/2\n). It is guaranteed that the array \n    s\n corresponds to\na valid permutation of length \n    n\n. Output Print \n    n\n integers \n    p_1,\n    p_2, \n    \u2026, p_n\n \u2014 the elements of the restored permutation. We can\nshow that the answer is always unique. Examples Input 3 0 0 0 Output 3 2 1\nInput 2 0 1 Output 1 2 Input 5 0 1 1 1 10 Output 1 4 3 2 5 Note In the first\nexample for each \n    i\n there is no index \n    j\n satisfying both conditions,\nhence \n    s_i\n are always \n    0\n. In the second example for \n    i = 2\n it\nhappens that \n    j = 1\n satisfies the conditions, so \n    s_2 = p_1\n. In the\nthird example for \n    i = 2, 3, 4\n only \n    j = 1\n satisfies the conditions,\nso \n    s_2 = s_3 = s_4 = 1\n. For \n    i = 5\n all \n    j = 1, 2, 3, 4\n are\npossible, so \n    s_5 = p_1 + p_2 + p_3 + p_4 = 10\n.\n\n",
        "cf_contest_id": 1208,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n0 0 0\r\n",
                "3 2 1 "
            ],
            [
                "2\r\n0 1\r\n",
                "1 2 "
            ],
            [
                "5\r\n0 1 1 1 10\r\n",
                "1 4 3 2 5 "
            ]
        ],
        "private_cases": [
            [
                "1\r\n0\r\n",
                "1 "
            ],
            [
                "15\r\n0 0 3 3 13 3 6 34 47 12 20 6 6 21 55\r\n",
                "2 1 15 10 12 3 6 13 14 8 9 5 4 7 11 "
            ],
            [
                "20\r\n0 1 7 15 30 15 59 42 1 4 1 36 116 36 16 136 10 36 46 36\r\n",
                "1 6 8 15 17 12 18 16 3 4 2 14 20 13 7 19 5 10 11 9 "
            ],
            [
                "100\r\n0 0 57 121 57 0 19 251 19 301 19 160 57 578 664 57 19 50 0 621 91 5 263 34 5 96 713 649 22 22 22 5 108 198 1412 1147 84 1326 1777 0 1780 132 2000 479 1314 525 68 690 1689 1431 1288 54 1514 1593 1037 1655 807 465 1674 1747 1982 423 837 139 1249 1997 1635 1309 661 334 3307 2691 21 3 533 1697 250 3920 0 343 96 242 2359 3877 3877 150 1226 96 358 829 228 2618 27 2854 119 1883 710 0 4248 435\r\n",
                "94 57 64 90 58 19 53 71 50 67 38 56 45 86 89 42 31 36 5 68 37 10 49 24 7 32 65 59 14 12 11 6 27 34 91 72 21 87 98 3 97 25 100 46 85 48 18 51 88 83 70 13 79 82 62 80 55 43 73 76 81 40 52 22 60 77 69 61 47 35 92 84 9 4 41 66 28 99 2 33 17 26 74 96 95 20 54 15 29 44 23 75 8 78 16 63 39 1 93 30 "
            ]
        ]
    }
]