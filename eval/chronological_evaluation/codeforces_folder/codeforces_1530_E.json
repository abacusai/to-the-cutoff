[
    {
        "name": "Minimax",
        "description": "Prefix function of string \n    t = t_1 t_2 \n    \u2026 t_n\n and position \n    i\n\nin it is defined as the length \n    k\n of the longest proper (not equal to the\nwhole substring) prefix of substring \n    t_1 t_2 \n    \u2026 t_i\n which is also\na suffix of the same substring. For example, for string \n    t =\n abacaba the\nvalues of the prefix function in positions \n    1, 2, \n    \u2026, 7\n are equal\nto \n    [0, 0, 1, 0, 1, 2, 3]\n. Let \n    f(t)\n be equal to the maximum value\nof the prefix function of string \n    t\n over all its positions. For example,\n\n    f(\nabacaba\n    ) = 3\n. You are given a string \n    s\n. Reorder its\ncharacters arbitrarily to get a string \n    t\n (the number of occurrences of\nany character in strings \n    s\n and \n    t\n must be equal). The value of\n\n    f(t)\n must be minimized. Out of all options to minimize \n    f(t)\n,\nchoose the one where string \n    t\n is the lexicographically smallest. Input\nEach test contains multiple test cases. The first line contains the number of\ntest cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^5\n). Description of the test cases\nfollows. The only line of each test case contains string \n    s\n (\n    1 \n    \u2264\n    |s| \n    \u2264 10^5\n) consisting of lowercase English letters. It is guaranteed\nthat the sum of lengths of \n    s\n over all test cases does not exceed\n\n    10^5\n. Output For each test case print a single string \n    t\n. The\nmultisets of letters in strings \n    s\n and \n    t\n must be equal. The value\nof \n    f(t)\n, the maximum of prefix functions in string \n    t\n, must be as\nsmall as possible. String \n    t\n must be the lexicographically smallest\nstring out of all strings satisfying the previous conditions. Example Input 3\nvkcup abababa zzzzzz Output ckpuv aababab zzzzzz Note A string \n    a\n is\nlexicographically smaller than a string \n    b\n if and only if one of the\nfollowing holds: \n    a\n is a prefix of \n    b\n, but \n    a \n     b\n; in the\nfirst position where \n    a\n and \n    b\n differ, the string \n    a\n has a\nletter that appears earlier in the alphabet than the corresponding letter in\n\n    b\n.In the first test case, \n    f(t) = 0\n and the values of prefix\nfunction are \n    [0, 0, 0, 0, 0]\n for any permutation of letters. String\nckpuv is the lexicographically smallest permutation of letters of string\nvkcup. In the second test case, \n    f(t) = 1\n and the values of prefix\nfunction are \n    [0, 1, 0, 1, 0, 1, 0]\n. In the third test case, \n    f(t) =\n    5\n and the values of prefix function are \n    [0, 1, 2, 3, 4, 5]\n.\n\n",
        "cf_contest_id": 1530,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\nvkcup\r\nabababa\r\nzzzzzz\r\n",
                "ckpuv\r\naababab\r\nzzzzzz\r\n"
            ]
        ],
        "private_cases": []
    }
]