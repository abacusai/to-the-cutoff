[
    {
        "name": "Two Arrays",
        "description": "You are given two arrays \n    a_1, a_2, \n    \u2026 , a_n\n and \n    b_1, b_2,\n    \n    \u2026 , b_m\n. Array \n    b\n is sorted in ascending order (\n    b_i < b_i +\n    1\n for each \n    i\n from \n    1\n to \n    m - 1\n). You have to divide the\narray \n    a\n into \n    m\n consecutive subarrays so that, for each \n    i\n\nfrom \n    1\n to \n    m\n, the minimum on the \n    i\n-th subarray is equal to\n\n    b_i\n. Note that each element belongs to exactly one subarray, and they\nare formed in such a way: the first several elements of \n    a\n compose the\nfirst subarray, the next several elements of \n    a\n compose the second\nsubarray, and so on. For example, if \n    a = [12, 10, 20, 20, 25, 30]\n and\n\n    b = [10, 20, 30]\n then there are two good partitions of array \n    a\n:\n\n    [12, 10, 20], [20, 25], [30]\n; \n    [12, 10], [20, 20, 25], [30]\n. You\nhave to calculate the number of ways to divide the array \n    a\n. Since the\nnumber can be pretty large print it modulo 998244353. Input The first line\ncontains two integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 2 \n    \u00b7\n    10^5\n) \u2014 the length of arrays \n    a\n and \n    b\n respectively. The second\nline contains \n    n\n integers \n    a_1, a_2, \n    \u2026 , a_n\n (\n    1 \n    \u2264 a_i\n    \n    \u2264 10^9\n) \u2014 the array \n    a\n. The third line contains \n    m\n integers\n\n    b_1, b_2, \n    \u2026 , b_m\n (\n    1 \n    \u2264 b_i \n    \u2264 10^9; b_i < b_i+1\n) \u2014\nthe array \n    b\n. Output In only line print one integer \u2014 the number of ways\nto divide the array \n    a\n modulo 998244353. Examples Input 6 3 12 10 20 20\n25 30 10 20 30 Output 2 Input 4 2 1 3 3 7 3 7 Output 0 Input 8 2 1 2 2 2 2 2 2\n2 1 2 Output 7\n\n",
        "cf_contest_id": 1366,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "combinatorics",
            "constructive algorithms",
            "dp",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 3\r\n12 10 20 20 25 30\r\n10 20 30\r\n",
                "2\r\n"
            ],
            [
                "4 2\r\n1 3 3 7\r\n3 7\r\n",
                "0\r\n"
            ],
            [
                "8 2\r\n1 2 2 2 2 2 2 2\r\n1 2\r\n",
                "7\r\n"
            ]
        ],
        "private_cases": [
            [
                "18 10\r\n8 1 2 3 4 9 9 5 1 6 6 7 8 6 2 9 10 7\r\n1 2 3 4 5 6 7 8 9 10\r\n",
                "0\r\n"
            ],
            [
                "1 1\r\n1000000000\r\n1000000000\r\n",
                "1\r\n"
            ],
            [
                "1 1\r\n1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "5 1\r\n7 10 3 11 3\r\n3\r\n",
                "1\r\n"
            ],
            [
                "5 1\r\n7 10 3 11 2\r\n3\r\n",
                "0\r\n"
            ],
            [
                "10 1\r\n1 1 1 1 1 1 1 1 1 1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "2 3\r\n1 3\r\n1 2 3\r\n",
                "0\r\n"
            ],
            [
                "1 5\r\n1\r\n1 2 3 4 1000000000\r\n",
                "0\r\n"
            ],
            [
                "9 9\r\n3 4 5 6 7 8 9 10 11\r\n3 4 5 6 7 8 9 10 11\r\n",
                "1\r\n"
            ],
            [
                "3 2\r\n2 2 3\r\n1 2\r\n",
                "0\r\n"
            ],
            [
                "5 2\r\n2 1 2 3 2\r\n1 3\r\n",
                "0\r\n"
            ],
            [
                "1 1\r\n2\r\n1\r\n",
                "0\r\n"
            ],
            [
                "6 3\r\n12 10 20 20 15 30\r\n10 20 30\r\n",
                "0\r\n"
            ],
            [
                "2 2\r\n10 7\r\n5 7\r\n",
                "0\r\n"
            ],
            [
                "3 3\r\n2 5 6\r\n1 5 6\r\n",
                "0\r\n"
            ],
            [
                "1 1\r\n3\r\n2\r\n",
                "0\r\n"
            ],
            [
                "2 3\r\n2 3\r\n1 2 3\r\n",
                "0\r\n"
            ],
            [
                "3 2\r\n2 2 8\r\n1 2\r\n",
                "0\r\n"
            ],
            [
                "10 5\r\n9 8 7 6 5 6 7 8 9 10\r\n6 7 8 9 10\r\n",
                "0\r\n"
            ],
            [
                "20 5\r\n8 8 2 5 2 1 5 3 6 5 5 4 5 6 3 5 5 7 3 7\r\n1 3 4 5 7\r\n",
                "0\r\n"
            ],
            [
                "5 5\r\n2 3 4 5 6\r\n1 2 3 4 5\r\n",
                "0\r\n"
            ],
            [
                "24 3\r\n4 12 3 14 2 7 12 7 11 3 5 10 14 1 6 12 13 4 1 5 5 9 8 6\r\n1 5 8\r\n",
                "0\r\n"
            ],
            [
                "1 1\r\n5\r\n3\r\n",
                "0\r\n"
            ],
            [
                "39 3\r\n4 8 12 9 19 4 2 21 20 15 6 7 4 13 10 4 10 4 22 22 12 11 10 14 5 2 11 20 15 16 14 18 1 3 4 19 4 6 15\r\n1 3 4\r\n",
                "3\r\n"
            ],
            [
                "1 2\r\n2\r\n1 2\r\n",
                "0\r\n"
            ],
            [
                "7 2\r\n2 2 3 2 3 4 3\r\n2 4\r\n",
                "0\r\n"
            ],
            [
                "5 4\r\n1 5 3 10 15\r\n1 5 10 15\r\n",
                "0\r\n"
            ],
            [
                "6 3\r\n12 20 20 25 10 30\r\n7 10 30\r\n",
                "0\r\n"
            ],
            [
                "6 3\r\n12 20 20 25 10 30\r\n10 30 35\r\n",
                "0\r\n"
            ],
            [
                "4 2\r\n3 2 6 2\r\n2 6\r\n",
                "0\r\n"
            ],
            [
                "10 4\r\n1 6 1 4 8 4 4 6 5 1\r\n1 6 7 9\r\n",
                "0\r\n"
            ],
            [
                "47 2\r\n6 2 5 1 1 9 10 7 8 6 10 8 5 10 3 5 1 7 1 1 10 8 2 4 3 9 4 6 2 8 3 5 3 8 6 7 5 4 6 6 5 3 8 2 10 6 3\r\n1 9\r\n",
                "0\r\n"
            ],
            [
                "71 4\r\n9 9 6 9 8 2 10 9 2 5 10 1 9 7 5 6 4 9 3 7 3 8 5 3 4 10 5 9 9 1 2 1 10 1 10 8 2 9 2 2 8 8 2 4 10 1 6 9 7 2 7 5 1 1 8 6 7 9 5 6 8 2 3 4 3 1 3 7 2 7 4\r\n1 2 3 7\r\n",
                "0\r\n"
            ],
            [
                "77 22\r\n7 2 4 8 10 7 5 7 9 7 5 6 2 9 10 1 5 4 5 8 6 9 3 1 8 1 10 9 6 7 7 1 5 3 6 4 9 10 7 8 2 3 10 10 9 9 2 9 1 9 7 3 2 4 7 7 1 1 10 4 2 2 8 3 2 9 9 9 5 6 7 1 10 8 3 9 1\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\r\n",
                "0\r\n"
            ],
            [
                "5 2\r\n2 3 4 5 6\r\n1 4\r\n",
                "0\r\n"
            ],
            [
                "6 1\r\n2 2 2 2 2 4\r\n1\r\n",
                "0\r\n"
            ],
            [
                "6 3\r\n12 10 20 20 5 30\r\n10 20 30\r\n",
                "0\r\n"
            ],
            [
                "6 3\r\n12 10 20 20 10 30\r\n7 10 30\r\n",
                "0\r\n"
            ]
        ]
    }
]