[
    {
        "name": "Ela Sorting Books",
        "description": "Ela loves reading a lot, just like her new co-workers in DTL! On her first day\nafter becoming an engineer in DTL, she is challenged by a co-worker to sort a\nheap of books into different compartments on the shelf. \n    n\n books must be\nsplit into \n    k\n compartments on the bookshelf (\n    n\n is divisible by\n\n    k\n). Each book is represented by a lowercase Latin letter from 'a' to 'y'\ninclusively, which is the beginning letter in the title of the book. Ela must\nstack exactly \n    n/k\n books in each compartment. After the books\nare stacked, for each compartment indexed from \n    1\n to \n    k\n, she takes\nthe minimum excluded (MEX) letter of the multiset of letters formed by letters\nrepresenting all books in that compartment, then combines the resulting\nletters into a string. The first letter of the resulting string is the MEX\nletter of the multiset of letters formed by the first compartment, the second\nletter of the resulting string is the MEX letter of the multiset of letters\nformed by the second compartment, ... and so on. Please note, under the\nconstraint of this problem, MEX letter can always be determined for any\nmultiset found in this problem because 'z' is not used. What is the\nlexicographically greatest resulting string possible that Ela can create? A\nstring \n    a\n is lexicographically greater than a string \n    b\n if and only\nif one of the following holds: \n    b\n is a prefix of \n    a\n, but \n    b \n    \n    a\n; in the first position where \n    a\n and \n    b\n differ, the string\n\n    a\n has a letter that appears later in the alphabet than the corresponding\nletter in \n    b\n. The minimum excluded (MEX) letter of a multiset of letters\nis the letter that appears earliest in the alphabet and is not contained in\nthe multiset. For example, if a multiset of letters contains \n    7\n letters\n'b', 'a', 'b', 'c', 'e', 'c', 'f' respectively, then the MEX letter of this\ncompartment is 'd', because 'd' is not included in the multiset, and all\nletters comes before 'd' in the alphabet, namely 'a', 'b' and 'c', are\nincluded in the multiset. Input Each test contains multiple test cases. The\nfirst line contains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    100\n). Description of the test cases follows. The first line of each test\ncase contains two integers \n    n\n and \n    k\n (\n    1 \n    \u2264 n \n    \u2264 200\n;\n\n    1 \n    \u2264 k \n    \u2264 n\n). It is guaranteed that \n    n\n is divisible by\n\n    k\n. The second line of each test case contains a string of \n    n\n\nlowercase Latin letters from 'a' to 'y' inclusively. Each letter represents\nthe starting letter of the title of a book in the initial heap. It is\nguaranteed that the sum of \n    n\n over all test cases does not exceed\n\n    1000\n. Output For each test case, output a string of \n    k\n letters\nwhich is the most optimal string that Ela can find. Example Input 5 12 3\ncabccadabaac 12 6 cabccadabaac 12 12 cabccadabaac 25 1\nabcdefghijklmnopqrstuvwxy 10 5 bcdxedbcfg Output edb ccbbba bbbbbaaaaaaa z\naaaaa Note In the first test case, the books can be divided into \n    3\n\ncompartments as below: the first compartment contains the books with indices\n\n    1, 2, 3, 7\n: \n    multiset_1 = \n    \n    'c', 'a', 'b', 'd'\n\n\n    \u2192\n \n    MEX(multiset_1) =\n 'e' the second compartment\ncontains the books with indices \n    4, 5, 6, 9\n : \n    multiset_2 =\n    \n    \n    'c', 'c', 'a', 'b'\n \n    \u2192\n \n    MEX(multiset_2)\n    =\n 'd' the third compartment contains the remaining books \n    8, 10, 11,\n    12\n : \n    multiset_3 = \n    \n    'a', 'a', 'a', 'c'\n\n\n    \u2192\n \n    MEX(multiset_3) =\n 'b' Therefore, the answer is\n'edb'. It can be proven that there is no way that Ela can arrange the books so\nthat it results in a lexicographically greater string.\n\n",
        "cf_contest_id": 1737,
        "cf_index": "A",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n12 3\r\ncabccadabaac\r\n12 6\r\ncabccadabaac\r\n12 12\r\ncabccadabaac\r\n25 1\r\nabcdefghijklmnopqrstuvwxy\r\n10 5\r\nbcdxedbcfg\r\n",
                "edb\r\nccbbba\r\nbbbbbaaaaaaa\r\nz\r\naaaaa\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n18 3\r\naaaaaaaaaaaaaaaaaa\r\n",
                "bbb\r\n"
            ],
            [
                "1\r\n1 1\r\na\r\n",
                "b\r\n"
            ],
            [
                "3\r\n25 1\r\nabcdefghijklmnopqrstuvwxx\r\n25 1\r\nabcdefghijklmnopqrstuvwxy\r\n24 1\r\nabcdefghijklmnopqrstuvwx\r\n",
                "y\r\nz\r\ny\r\n"
            ]
        ]
    }
]