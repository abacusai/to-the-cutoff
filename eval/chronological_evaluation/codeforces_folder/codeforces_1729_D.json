[
    {
        "name": "Friends and the Restaurant",
        "description": "A group of \n    n\n friends decide to go to a restaurant. Each of the friends\nplans to order meals for \n    x_i\n burles and has a total of \n    y_i\n burles\n(\n    1 \n    \u2264 i \n    \u2264 n\n). The friends decide to split their visit to the\nrestaurant into several days. Each day, some group of at least two friends\ngoes to the restaurant. Each of the friends visits the restaurant no more than\nonce (that is, these groups do not intersect). These groups must satisfy the\ncondition that the total budget of each group must be not less than the amount\nof burles that the friends in the group are going to spend at the restaurant.\nIn other words, the sum of all \n    x_i\n values in the group must not exceed\nthe sum of \n    y_i\n values in the group. What is the maximum number of days\nfriends can visit the restaurant? For example, let there be \n    n = 6\n\nfriends for whom \n    x\n = [\n    8, 3, 9, 2, 4, 5\n] and \n    y\n = [\n    5, 3, 1,\n    4, 5, 10\n]. Then: first and sixth friends can go to the restaurant on the\nfirst day. They will spend \n    8+5=13\n burles at the restaurant, and their\ntotal budget is \n    5+10=15\n burles. Since \n    15 \n    \u2265 13\n, they can\nactually form a group. friends with indices \n    2, 4, 5\n can form a second\ngroup. They will spend \n    3+2+4=9\n burles at the restaurant, and their total\nbudget will be \n    3+4+5=12\n burles (\n    12 \n    \u2265 9\n). It can be shown that\nthey will not be able to form more groups so that each group has at least two\nfriends and each group can pay the bill. So, the maximum number of groups the\nfriends can split into is \n    2\n. Friends will visit the restaurant for a\nmaximum of two days. Note that the \n    3\n-rd friend will not visit the\nrestaurant at all. Output the maximum number of days the friends can visit the\nrestaurant for given \n    n\n, \n    x\n and \n    y\n. Input The first line of the\ninput contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of\ntest cases in the test. The descriptions of the test cases follow. The first\nline of each test case contains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264\n    10^5\n) \u2014 the number of friends. The second line of each test case contains\nexactly \n    n\n integers \n    x_1, x_2, \n    \u2026, x_n\n (\n    1 \n    \u2264 x_i \n    \u2264\n    10^9\n). The value of \n    x_i\n corresponds to the number of burles that the\nfriend numbered \n    i\n plans to spend at the restaurant. The third line of\neach test case contains exactly \n    n\n integers \n    y_1, y_2, \n    \u2026, y_n\n\n(\n    1 \n    \u2264 y_i \n    \u2264 10^9\n). The value \n    y_i\n corresponds to the number\nof burles that the friend numbered \n    i\n has. It is guaranteed that the sum\nof \n    n\n values over all test cases does not exceed \n    10^5\n. Output For\neach test case, print the maximum number of days to visit the restaurant. If\nfriends cannot form even one group to visit the restaurant, print 0. Example\nInput 6 6 8 3 9 2 4 5 5 3 1 4 5 10 4 1 2 3 4 1 1 2 2 3 2 3 7 1 3 10 6 2 3 6 9\n5 7 3 2 7 10 6 10 6 5 4 2 1 8 100 1 1 1 1 1 200 6 1 4 1 2 4 2 1 3 3 2 3 4\nOutput 2 0 1 3 1 3 Note The first test case in explained in the problem\nstatement. In the second test case, friends cannot form at least one group of\ntwo or more people. In the third test case, one way to visit the restaurant in\none day is to go in a group of all three friends (\n    1+3+10 \n    \u2265 2+3+7\n).\nNote that they do not have the option of splitting into two groups.\n\n",
        "cf_contest_id": 1729,
        "cf_index": "D",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "sortings",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n6\r\n8 3 9 2 4 5\r\n5 3 1 4 5 10\r\n4\r\n1 2 3 4\r\n1 1 2 2\r\n3\r\n2 3 7\r\n1 3 10\r\n6\r\n2 3 6 9 5 7\r\n3 2 7 10 6 10\r\n6\r\n5 4 2 1 8 100\r\n1 1 1 1 1 200\r\n6\r\n1 4 1 2 4 2\r\n1 3 3 2 3 4\r\n",
                "2\r\n0\r\n1\r\n3\r\n1\r\n3\r\n"
            ]
        ],
        "private_cases": []
    }
]