[
    {
        "name": "Game of Life",
        "description": "William really likes the cellular automaton called \"Game of Life\" so he\ndecided to make his own version. For simplicity, William decided to define his\ncellular automaton on an array containing \n    n\n cells, with each cell either\nbeing alive or dead. Evolution of the array in William's cellular automaton\noccurs iteratively in the following way: If the element is dead and it has\nexactly \n    1\n alive neighbor in the current state of the array, then on the\nnext iteration it will become alive. For an element at index \n    i\n the\nneighbors would be elements with indices \n    i - 1\n and \n    i + 1\n. If there\nis no element at that index, it is considered to be a dead neighbor. William\nis a humane person so all alive elements stay alive. Check the note section\nfor examples of the evolution. You are given some initial state of all\nelements and you need to help William find the state of the array after\n\n    m\n iterations of evolution. Input Each test contains multiple test cases.\nThe first line contains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    10^3\n). Description of the test cases follows. The first line of each test\ncase contains two integers \n    n\n and \n    m\n (\n    2 \n    \u2264 n \n    \u2264 10^3, 1\n    \n    \u2264 m \n    \u2264 10^9\n), which are the total number of cells in the array and\nthe number of iterations. The second line of each test case contains a string\nof length \n    n\n made up of characters \"0\" and \"1\" and defines the initial\nstate of the array. \"1\" means a cell is alive and \"0\" means it is dead. It is\nguaranteed that the sum of \n    n\n over all test cases does not exceed\n\n    10^4\n. Output In each test case output a string of length \n    n\n, made\nup of characters \"0\" and \"1\" \u2014 the state of the array after \n    m\n iterations\nof evolution. Example Input 4 11 3 01000000001 10 2 0110100101 5 2 10101 3 100\n000 Output 11111001111 1110111101 10101 000 Note Sequence of iterations of\nevolution for the first test case 01000000001 \u2014 initial state 11100000011 \u2014\nfirst iteration of evolution 11110000111 \u2014 second iteration of evolution\n11111001111 \u2014 third iteration of evolution Sequence of iterations of evolution\nfor the second test case 0110100101 \u2014 initial state 1110111101 \u2014 first\niteration of evolution 1110111101 \u2014 second iteration of evolution\n\n",
        "cf_contest_id": 1523,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n11 3\r\n01000000001\r\n10 2\r\n0110100101\r\n5 2\r\n10101\r\n3 100\r\n000\r\n",
                "11111001111\r\n1110111101\r\n10101\r\n000\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n11 1\r\n10000100001\r\n",
                "11001110011\r\n"
            ],
            [
                "1\r\n4 1000000000\r\n1010\r\n",
                "1011\r\n"
            ],
            [
                "1\r\n5 42069\r\n11011\r\n",
                "11011\r\n"
            ],
            [
                "1\r\n3 1000000000\r\n101\r\n",
                "101\r\n"
            ],
            [
                "1\r\n5 1000000000\r\n11011\r\n",
                "11011\r\n"
            ],
            [
                "1\r\n11 1000000000\r\n11111111101\r\n",
                "11111111101\r\n"
            ],
            [
                "2\r\n3 1\r\n111\r\n2 2\r\n00\r\n",
                "111\r\n00\r\n"
            ],
            [
                "4\r\n10 1\r\n1111111111\r\n9 4\r\n000000000\r\n9 4\r\n000000000\r\n9 4\r\n000000000\r\n",
                "1111111111\r\n000000000\r\n000000000\r\n000000000\r\n"
            ]
        ]
    }
]