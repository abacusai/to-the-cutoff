[
    {
        "name": "LuoTianyi and XOR-Tree",
        "description": "LuoTianyi gives you a tree with values in its vertices, and the root of the\ntree is vertex \n    1\n. In one operation, you can change the value in one\nvertex to any non-negative integer. Now you need to find the minimum number of\noperations you need to perform to make each path from the root to\nleaf\n    ^\n    \u2020\n has a bitwise XOR value of zero. \n    ^\n    \u2020\nA\nleaf in a rooted tree is a vertex that has exactly one neighbor and is not a\nroot. Input The first line contains a single integer \n    n\n (\n    2 \n    \u2264 n\n    \n    \u2264 10^5\n) \u2014 the number of vertices in the tree. The second line contains\n\n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n),\nthe \n    i\n-th number represents the value in the \n    i\n-th vertex. Next\n\n    n\u22121\n lines describe the edges of the tree. The \n    i\n-th line contains\ntwo integers \n    u_i\n and \n    v_i\n (\n    1 \n    \u2264 u_i,v_i \n    \u2264 n, u_i \n    \u2260\n    v_i\n) \u2014 the vertices connected by an edge of the tree. It's guaranteed that\nthe given edges form a tree. Output Print a single integer \u2014 the minimum\nnumber of operations. Examples Input 6 3 5 7 5 8 4 1 2 1 3 1 4 3 5 4 6 Output\n3 Input 8 7 10 7 16 19 9 16 11 1 5 4 2 6 5 5 2 7 2 2 3 3 8 Output 3 Input 4 1\n2 1 2 1 2 2 3 4 3 Output 0 Input 9 4 3 6 1 5 5 5 2 7 1 2 2 3 4 1 4 5 4 6 4 7 8\n1 8 9 Output 2 Note The tree in the first example: If we change the value in\nthe vertex \n    2\n to \n    3\n, the value in the vertex \n    5\n to \n    4\n, and\nthe value in the vertex \n    6\n to \n    6\n, then the tree will be ok. The\nbitwise XOR from the root to the leaf \n    2\n will be \n    3 \n    \u2295 3=0\n.\nThe bitwise XOR from the root to the leaf \n    5\n will be \n    4 \n    \u2295 7\n    \n    \u2295 3=0\n. The bitwise XOR from the root to the leaf \n    6\n will be\n\n    6 \n    \u2295 5 \n    \u2295 3=0\n. The tree in the second example: If we change\nthe value in the vertex \n    2\n to \n    4\n, the value in the vertex \n    3\n to\n\n    27\n, and the value in the vertex \n    6\n to \n    20\n, then the tree will\nbe ok. The bitwise XOR from the root to the leaf \n    6\n will be \n    20\n    \n    \u2295 19 \n    \u2295 7=0\n. The bitwise XOR from the root to the leaf \n    8\n\nwill be \n    11 \n    \u2295 27 \n    \u2295 4 \n    \u2295 19 \n    \u2295 7=0\n. The bitwise\nXOR from the root to the leaf \n    4\n will be \n    16 \n    \u2295 4 \n    \u2295 19\n    \n    \u2295 7=0\n. The bitwise XOR from the root to the leaf \n    7\n will be\n\n    16 \n    \u2295 4 \n    \u2295 19 \n    \u2295 7=0\n. In the third example, the only\nleaf is the vertex \n    4\n and the bitwise XOR on the path to it is \n    1\n    \n    \u2295 2 \n    \u2295 1 \n    \u2295 2 = 0\n, so we don't need to change values. In\nthe fourth example, we can change the value in the vertex \n    1\n to \n    5\n,\nand the value in the vertex \n    4\n to \n    0\n. Here \n    \u2295\n denotes\nthe bitwise XOR operation.\n\n",
        "cf_contest_id": 1824,
        "cf_index": "C",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n3 5 7 5 8 4\r\n1 2\r\n1 3\r\n1 4\r\n3 5\r\n4 6\r\n",
                "3"
            ],
            [
                "8\r\n7 10 7 16 19 9 16 11\r\n1 5\r\n4 2\r\n6 5\r\n5 2\r\n7 2\r\n2 3\r\n3 8\r\n",
                "3"
            ],
            [
                "4\r\n1 2 1 2\r\n1 2\r\n2 3\r\n4 3\r\n",
                "0"
            ],
            [
                "9\r\n4 3 6 1 5 5 5 2 7\r\n1 2\r\n2 3\r\n4 1\r\n4 5\r\n4 6\r\n4 7\r\n8 1\r\n8 9\r\n",
                "2"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 1\r\n1 2\r\n",
                "0"
            ],
            [
                "8\r\n304693512 774128240 29901070 781713202 410419357 914750514 309272169 60669497\r\n1 2\r\n2 3\r\n3 4\r\n3 5\r\n2 6\r\n5 7\r\n4 8\r\n",
                "3"
            ]
        ]
    }
]