[
    {
        "name": "Fix You",
        "description": "Consider a conveyor belt represented using a grid consisting of \n    n\n rows\nand \n    m\n columns. The cell in the \n    i\n-th row from the top and the\n\n    j\n-th column from the left is labelled \n    (i,j)\n. Every cell, except\n\n    (n,m)\n, has a direction R (Right) or D (Down) assigned to it. If the cell\n\n    (i,j)\n is assigned direction R, any luggage kept on that will move to the\ncell \n    (i,j+1)\n. Similarly, if the cell \n    (i,j)\n is assigned direction\nD, any luggage kept on that will move to the cell \n    (i+1,j)\n. If at any\nmoment, the luggage moves out of the grid, it is considered to be lost. There\nis a counter at the cell \n    (n,m)\n from where all luggage is picked. A\nconveyor belt is called functional if and only if any luggage reaches the\ncounter regardless of which cell it is placed in initially. More formally, for\nevery cell \n    (i,j)\n, any luggage placed in this cell should eventually end\nup in the cell \n    (n,m)\n. This may not hold initially; you are, however,\nallowed to change the directions of some cells to make the conveyor belt\nfunctional. Please determine the minimum amount of cells you have to change.\nPlease note that it is always possible to make any conveyor belt functional by\nchanging the directions of some set of cells. Input Each test contains\nmultiple test cases. The first line contains the number of test cases \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 10\n). Description of the test cases follows. The first\nline of each test case contains two integers \n    n, m\n (\n    1 \n    \u2264 n \n    \u2264\n    100\n, \n    1 \n    \u2264 m \n    \u2264 100\n) \u2014 the number of rows and columns,\nrespectively. The following \n    n\n lines each contain \n    m\n characters. The\n\n    j\n-th character in the \n    i\n-th line, \n    a_i,j\n is the initial\ndirection of the cell \n    (i, j)\n. Please note that \n    a_n,m=\n C. Output\nFor each case, output in a new line the minimum number of cells that you have\nto change to make the conveyor belt functional. Example Input 4 3 3 RRD DDR\nRRC 1 4 DDDC 6 9 RDDDDDRRR RRDDRRDDD RRDRDRRDR DDDDRDDRR DRRDRDDDR DDRDRRDDC 1\n1 C Output 1 3 9 0 Note In the first case, just changing the direction of\n\n    (2,3)\n to D is enough. You can verify that the resulting belt is\nfunctional. For example, if we place any luggage at \n    (2,2)\n, it first\nmoves to \n    (3,2)\n and then to \n    (3,3)\n. In the second case, we have no\noption but to change the first \n    3\n cells from D to R making the grid equal\nto RRRC.\n\n",
        "cf_contest_id": 1391,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3 3\r\nRRD\r\nDDR\r\nRRC\r\n1 4\r\nDDDC\r\n6 9\r\nRDDDDDRRR\r\nRRDDRRDDD\r\nRRDRDRRDR\r\nDDDDRDDRR\r\nDRRDRDDDR\r\nDDRDRRDDC\r\n1 1\r\nC\r\n",
                "1\r\n3\r\n9\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n1 2\r\nRC\r\n1 2\r\nDC\r\n2 1\r\nR\r\nC\r\n2 1\r\nD\r\nC\r\n7 6\r\nDRDDRR\r\nRDDDRR\r\nDRRRDD\r\nRRDRRR\r\nDDRRRR\r\nRRDRDR\r\nDDRDRC\r\n8 5\r\nDRDRD\r\nDRRRR\r\nRDRRD\r\nDDDRR\r\nRDDRR\r\nRRDDD\r\nDDRRR\r\nDDDRC\r\n8 3\r\nDDD\r\nDDR\r\nDRD\r\nRRR\r\nDRR\r\nDRD\r\nRRR\r\nRDC\r\n6 6\r\nDRDDDR\r\nDDDRDR\r\nRDDRRD\r\nDRRRRR\r\nRRRRRR\r\nDRDRRC\r\n6 8\r\nRRDDDRRR\r\nRDRDDRRR\r\nDRRDRRRD\r\nDRDRRDRR\r\nDDDDDDDR\r\nRRDRRDDC\r\n7 9\r\nRDDDDRDDR\r\nDRRRRDRDR\r\nDDRRDDDRR\r\nDDDDDRDRR\r\nDDRDRDDRR\r\nDRRDDDDRD\r\nDDDDRRRDC\r\n",
                "0\r\n1\r\n1\r\n0\r\n8\r\n7\r\n5\r\n6\r\n7\r\n10\r\n"
            ],
            [
                "10\r\n4 4\r\nDDDD\r\nDRDR\r\nDRDD\r\nDRRC\r\n4 4\r\nDDRR\r\nDDRR\r\nDDRD\r\nDRRC\r\n4 4\r\nRRDR\r\nDRRR\r\nRRRR\r\nDDRC\r\n4 4\r\nDRRR\r\nRDDD\r\nDDDR\r\nRDRC\r\n4 4\r\nRDDD\r\nRRDR\r\nDDRD\r\nDRRC\r\n4 4\r\nRDRR\r\nRDRR\r\nRDDR\r\nRDDC\r\n4 4\r\nDRDD\r\nDRRR\r\nDDDD\r\nDDRC\r\n4 4\r\nRDDR\r\nRRRD\r\nRRRR\r\nRRRC\r\n4 4\r\nDRRR\r\nRDRR\r\nRDDD\r\nRDRC\r\n4 4\r\nRRDR\r\nDRRD\r\nRRDR\r\nDDDC\r\n",
                "2\r\n3\r\n5\r\n3\r\n2\r\n5\r\n3\r\n2\r\n3\r\n5\r\n"
            ],
            [
                "10\r\n1 1\r\nC\r\n1 1\r\nC\r\n1 1\r\nC\r\n1 1\r\nC\r\n1 1\r\nC\r\n1 1\r\nC\r\n1 1\r\nC\r\n1 1\r\nC\r\n1 1\r\nC\r\n1 1\r\nC\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "1\r\n6 4\r\nRRRR\r\nRRRR\r\nRRRR\r\nRRRR\r\nRRRR\r\nRRRC\r\n",
                "5\r\n"
            ]
        ]
    }
]