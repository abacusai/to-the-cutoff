[
    {
        "name": "Two Prefixes",
        "description": "Misha didn't do his math homework for today's lesson once again. As a\npunishment, his teacher Dr. Andrew decided to give him a hard, but very\nuseless task. Dr. Andrew has written two strings s and t of lowercase English\nletters at the blackboard. He reminded Misha that prefix of a string is a\nstring formed by removing several (possibly none) of its last characters, and\na concatenation of two strings is a string formed by appending the second\nstring to the right of the first string. The teacher asked Misha to write down\non the blackboard all strings that are the concatenations of some non-empty\nprefix of s and some non-empty prefix of t. When Misha did it, Dr. Andrew\nasked him how many distinct strings are there. Misha spent almost the entire\nlesson doing that and completed the task. Now he asks you to write a program\nthat would do this task automatically. Input The first line contains the\nstring s consisting of lowercase English letters. The second line contains the\nstring t consisting of lowercase English letters. The lengths of both string\ndo not exceed 10^5. Output Output a single integer \u2014 the number of distinct\nstrings that are concatenations of some non-empty prefix of s with some non-\nempty prefix of t. Examples Input aba aa Output 5 Input aaaaa aaaa Output 8\nNote In the first example, the string s has three non-empty prefixes: a, ab,\naba. The string t has two non-empty prefixes: a, aa. In total, Misha has\nwritten five distinct strings: aa, aaa, aba, abaa, abaaa. The string abaa\nhas been written twice. In the second example, Misha has written eight\ndistinct strings: aa, aaa, aaaa, aaaaa, aaaaaa, aaaaaaa, aaaaaaaa,\naaaaaaaaa.\n\n",
        "cf_contest_id": 1090,
        "cf_index": "J",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "strings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "aba\r\naa\r\n",
                "5\r\n"
            ],
            [
                "aaaaa\r\naaaa\r\n",
                "8\r\n"
            ]
        ],
        "private_cases": [
            [
                "k\r\nk\r\n",
                "1\r\n"
            ],
            [
                "e\r\nee\r\n",
                "2\r\n"
            ],
            [
                "jj\r\njj\r\n",
                "3\r\n"
            ],
            [
                "nnqnnnqqnqnn\r\nqnnqqqqqqnqnqqqnqnnqqqqnnnqqnqnqnnq\r\n",
                "418\r\n"
            ]
        ]
    }
]