[
    {
        "name": "Random Walk",
        "description": "You are given a tree consisting of \n    n\n vertices and \n    n - 1\n edges, and\neach vertex \n    v\n has a counter \n    c(v)\n assigned to it. Initially, there\nis a chip placed at vertex \n    s\n and all counters, except \n    c(s)\n, are\nset to \n    0\n; \n    c(s)\n is set to \n    1\n. Your goal is to place the chip\nat vertex \n    t\n. You can achieve it by a series of moves. Suppose right now\nthe chip is placed at the vertex \n    v\n. In one move, you do the following:\nchoose one of neighbors \n    to\n of vertex \n    v\n uniformly at random\n(\n    to\n is neighbor of \n    v\n if and only if there is an edge \n    v,\n    to\n in the tree); move the chip to vertex \n    to\n and increase\n\n    c(to)\n by \n    1\n; You'll repeat the move above until you reach the\nvertex \n    t\n. For each vertex \n    v\n calculate the expected value of\n\n    c(v)\n modulo \n    998\n     244\n     353\n. Input The first line contains three\nintegers \n    n\n, \n    s\n and \n    t\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n;\n\n    1 \n    \u2264 s, t \n    \u2264 n\n; \n    s \n    \u2260 t\n) \u2014 number of vertices in the tree\nand the starting and finishing vertices. Next \n    n - 1\n lines contain edges\nof the tree: one edge per line. The \n    i\n-th line contains two integers\n\n    u_i\n and \n    v_i\n (\n    1 \n    \u2264 u_i, v_i \n    \u2264 n\n; \n    u_i \n    \u2260\n    v_i\n), denoting the edge between the nodes \n    u_i\n and \n    v_i\n. It's\nguaranteed that the given edges form a tree. Output Print \n    n\n numbers:\nexpected values of \n    c(v)\n modulo \n    998\n     244\n     353\n for each \n    v\n\nfrom \n    1\n to \n    n\n. Formally, let \n    M = 998\n     244\n     353\n. It can be\nshown that the answer can be expressed as an irreducible fraction\n\n    p/q\n, where \n    p\n and \n    q\n are integers and \n    q \n    \u2261 0 \n    M\n. Output the integer equal to \n    p \n    \u00b7 q^-1\n     M\n. In other words, output such an integer \n    x\n that \n    0 \n    \u2264 x\n    < M\n and \n    x \n    \u00b7 q \n    \u2261 p \n    M\n. Examples Input 3 1 3 1 2 2\n3 Output 2 2 1 Input 4 1 3 1 2 2 3 1 4 Output 4 2 1 2 Input 8 2 6 6 4 6 2 5 4\n3 1 2 3 7 4 8 2 Output 1 3 2 0 0 1 0 1 Note The tree from the first example is\nshown below: Let's calculate expected value \n    E[c(1)]\n: \n    P(c(1) = 0) =\n    0\n, since \n    c(1)\n is set to \n    1\n from the start. \n    P(c(1) = 1) =\n    \n    1/2\n, since there is the only one series of moves that leads\n\n    c(1) = 1\n. It's \n    1 \n    \u2192 2 \n    \u2192 3\n with probability\n\n    1 \n    \u00b7\n    1/2\n. \n    P(c(1) = 2) = \n    1/4\n: the only\npath is \n    1 \n    \u2192_1 2 \n    \u2192_0.5 1 \n    \u2192_1 2\n    \n    \u2192_0.5 3\n. \n    P(c(1) = 3) = \n    1/8\n: the only path is\n\n    1 \n    \u2192_1 2 \n    \u2192_0.5 1 \n    \u2192_1 2\n    \n    \u2192_0.5 1 \n    \u2192_1 2 \n    \u2192_0.5 3\n. \n    P(c(1)\n    = i) = \n    1/2^i\n in general case. As a result, \n    E[c(1)] =\n    \n    \u2211\n    _i=1^\n    \u221ei \n    1/2^i = 2\n. Image of tree in\nsecond test Image of tree in third test\n\n",
        "cf_contest_id": 1823,
        "cf_index": "F",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "graphs",
            "math",
            "probabilities",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 1 3\r\n1 2\r\n2 3\r\n",
                "2 2 1 "
            ],
            [
                "4 1 3\r\n1 2\r\n2 3\r\n1 4\r\n",
                "4 2 1 2 "
            ],
            [
                "8 2 6\r\n6 4\r\n6 2\r\n5 4\r\n3 1\r\n2 3\r\n7 4\r\n8 2\r\n",
                "1 3 2 0 0 1 0 1 "
            ]
        ],
        "private_cases": [
            [
                "2 2 1\r\n2 1\r\n",
                "1 1 "
            ],
            [
                "3 3 1\r\n1 3\r\n2 1\r\n",
                "1 0 1 "
            ],
            [
                "5 2 5\r\n3 4\r\n1 3\r\n4 2\r\n5 3\r\n",
                "1 3 3 4 1 "
            ],
            [
                "19 13 17\r\n15 7\r\n8 18\r\n14 18\r\n11 9\r\n12 9\r\n7 13\r\n4 6\r\n17 16\r\n19 14\r\n1 5\r\n1 4\r\n3 19\r\n13 11\r\n16 2\r\n15 5\r\n12 8\r\n2 3\r\n6 10\r\n",
                "22 4 6 22 22 22 22 14 18 11 20 16 22 10 22 2 1 12 8 "
            ]
        ]
    }
]