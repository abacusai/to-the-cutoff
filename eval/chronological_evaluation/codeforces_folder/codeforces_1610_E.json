[
    {
        "name": "AmShZ and G.O.A.T.",
        "description": "Let's call an array of \n    k\n integers \n    c_1, c_2, \n    \u2026, c_k\n\nterrible, if the following condition holds: Let \n    AVG\n be the\n\n    c_1 + c_2 + \n    \u2026 + c_k/k\n(the average of all the elements\nof the array, it doesn't have to be integer). Then the number of elements of\nthe array which are bigger than \n    AVG\n should be strictly larger than the\nnumber of elements of the array which are smaller than \n    AVG\n. Note that\nelements equal to \n    AVG\n don't count. For example \n    c = \n    \n    1, 4, 4, 5,\n    6\n is terrible because \n    AVG = 4.0\n and \n    5\n-th and \n    4\n-th\nelements are greater than \n    AVG\n and \n    1\n-st element is smaller than\n\n    AVG\n. Let's call an array of \n    m\n integers \n    b_1, b_2, \n    \u2026,\n    b_m\n bad, if at least one of its non-empty subsequences is terrible, and\ngood otherwise. You are given an array of \n    n\n integers \n    a_1, a_2,\n    \n    \u2026, a_n\n. Find the minimum number of elements that you have to delete\nfrom it to obtain a good array. An array is a subsequence of another array if\nit can be obtained from it by deletion of several (possibly, zero or all)\nelements. Input The first line contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    10^4\n) \u2014 the number of test cases. The description of test cases follows.\nThe first line of each test case contains a single integer \n    n\n (\n    2 \n    \u2264\n    n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the size of \n    a\n. The second line of each\ntestcase contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264\n    a_i \n    \u2264 10^9\n) \u2014 elements of array \n    a\n. In each testcase for any \n    1\n    \n    \u2264 i \n     n\n it is guaranteed that \n    a_i \n    \u2264 a_i+1\n. It is\nguaranteed that the sum of \n    n\n over all testcases doesn't exceed \n    2\n    \n    \u00b7 10^5\n. Output For each testcase, print the minimum number of\nelements that you have to delete from it to obtain a good array. Example Input\n4 3 1 2 3 5 1 4 4 5 6 6 7 8 197860736 212611869 360417095 837913434 8 6 10\n56026534 405137099 550504063 784959015 802926648 967281024 Output 0 1 2 3 Note\nIn the first sample, the array \n    a\n is already good. In the second sample,\nit's enough to delete \n    1\n, obtaining array \n    [4, 4, 5, 6]\n, which is\ngood.\n\n",
        "cf_contest_id": 1610,
        "cf_index": "E",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "greedy",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3\r\n1 2 3\r\n5\r\n1 4 4 5 6\r\n6\r\n7 8 197860736 212611869 360417095 837913434\r\n8\r\n6 10 56026534 405137099 550504063 784959015 802926648 967281024\r\n",
                "0\r\n1\r\n2\r\n3\r\n"
            ]
        ],
        "private_cases": []
    }
]