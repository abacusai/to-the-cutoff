[
    {
        "name": "Pasha and Pixels",
        "description": "Pasha loves his phone and also putting his hair up... But the hair is now\nirrelevant. Pasha has installed a new game to his phone. The goal of the game\nis following. There is a rectangular field consisting of n row with m pixels\nin each row. Initially, all the pixels are colored white. In one move, Pasha\ncan choose any pixel and color it black. In particular, he can choose the\npixel that is already black, then after the boy's move the pixel does not\nchange, that is, it remains black. Pasha loses the game when a 2 \u00d7 2 square\nconsisting of black pixels is formed. Pasha has made a plan of k moves,\naccording to which he will paint pixels. Each turn in his plan is represented\nas a pair of numbers i and j, denoting respectively the row and the column of\nthe pixel to be colored on the current move. Determine whether Pasha loses if\nhe acts in accordance with his plan, and if he does, on what move the 2 \u00d7 2\nsquare consisting of black pixels is formed. Input The first line of the input\ncontains three integers n, m, k (1 \u2264 n, m \u2264 1000, 1 \u2264 k \u2264 10^5) \u2014 the number\nof rows, the number of columns and the number of moves that Pasha is going to\nperform. The next k lines contain Pasha's moves in the order he makes them.\nEach line contains two integers i and j (1 \u2264 i \u2264 n, 1 \u2264 j \u2264 m), representing\nthe row number and column number of the pixel that was painted during a move.\nOutput If Pasha loses, print the number of the move when the 2 \u00d7 2 square\nconsisting of black pixels is formed. If Pasha doesn't lose, that is, no 2 \u00d7 2\nsquare consisting of black pixels is formed during the given k moves, print 0.\nExamples Input 2 2 4 1 1 1 2 2 1 2 2 Output 4 Input 2 3 6 2 3 2 2 1 3 2 2 1 2\n1 1 Output 5 Input 5 3 7 2 3 1 2 1 1 4 1 3 1 5 3 3 2 Output 0\n\n",
        "cf_contest_id": 508,
        "cf_index": "A",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "brute force"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 2 4\r\n1 1\r\n1 2\r\n2 1\r\n2 2\r\n",
                "4\r\n"
            ],
            [
                "2 3 6\r\n2 3\r\n2 2\r\n1 3\r\n2 2\r\n1 2\r\n1 1\r\n",
                "5\r\n"
            ],
            [
                "5 3 7\r\n2 3\r\n1 2\r\n1 1\r\n4 1\r\n3 1\r\n5 3\r\n3 2\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 3 11\r\n2 1\r\n3 1\r\n1 1\r\n1 3\r\n1 2\r\n2 3\r\n3 3\r\n3 2\r\n2 2\r\n1 3\r\n3 3\r\n",
                "9\r\n"
            ],
            [
                "2 2 5\r\n1 1\r\n2 1\r\n2 1\r\n1 2\r\n2 2\r\n",
                "5\r\n"
            ],
            [
                "518 518 10\r\n37 97\r\n47 278\r\n17 467\r\n158 66\r\n483 351\r\n83 123\r\n285 219\r\n513 187\r\n380 75\r\n304 352\r\n",
                "0\r\n"
            ],
            [
                "1 1 5\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n",
                "0\r\n"
            ],
            [
                "1 5 5\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n",
                "0\r\n"
            ],
            [
                "5 1 5\r\n1 1\r\n2 1\r\n3 1\r\n4 1\r\n5 1\r\n",
                "0\r\n"
            ],
            [
                "1 1 1\r\n1 1\r\n",
                "0\r\n"
            ],
            [
                "10 10 4\r\n5 9\r\n6 9\r\n6 10\r\n5 10\r\n",
                "4\r\n"
            ],
            [
                "1000 1000 4\r\n999 999\r\n999 1000\r\n1000 999\r\n1000 1000\r\n",
                "4\r\n"
            ],
            [
                "2 3 5\r\n2 3\r\n1 3\r\n1 2\r\n1 1\r\n2 2\r\n",
                "5\r\n"
            ],
            [
                "1000 1000 4\r\n1000 1000\r\n999 999\r\n1000 999\r\n999 1000\r\n",
                "4\r\n"
            ]
        ]
    }
]