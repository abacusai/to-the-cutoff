[
    {
        "name": "Reverse String",
        "description": "You have a string \n    s\n and a chip, which you can place onto any character\nof this string. After placing the chip, you move it to the right several\n(maybe zero) times, i. e. you perform the following operation several times:\nif the current position of the chip is \n    i\n, you move it to the position\n\n    i + 1\n. Of course, moving the chip to the right is impossible if it is\nalready in the last position. After moving the chip to the right, you move it\nto the left several (maybe zero) times, i. e. you perform the following\noperation several times: if the current position of the chip is \n    i\n, you\nmove it to the position \n    i - 1\n. Of course, moving the chip to the left is\nimpossible if it is already in the first position. When you place a chip or\nmove it, you write down the character where the chip ends up after your\naction. For example, if \n    s\n is abcdef, you place the chip onto the\n\n    3\n-rd character, move it to the right \n    2\n times and then move it to\nthe left \n    3\n times, you write down the string cdedcb. You are given two\nstrings \n    s\n and \n    t\n. Your task is to determine whether it's possible\nto perform the described operations with \n    s\n so that you write down the\nstring \n    t\n as a result. Input The first line contains one integer \n    q\n\n(\n    1 \n    \u2264 q \n    \u2264 500\n) \u2014 the number of test cases. Each test case\nconsists of two lines. The first line contains the string \n    s\n (\n    1 \n    \u2264\n    |s| \n    \u2264 500\n), the second line contains the string \n    t\n (\n    1 \n    \u2264 |t|\n    \n    \u2264 2 \n    \u00b7 |s| - 1\n). Both strings consist of lowercase English\ncharacters. It is guaranteed that the sum of \n    |s|\n over all test cases\ndoes not exceed \n    500\n. Output For each test case, print \"YES\" if you can\nobtain the string \n    t\n by performing the process mentioned in the statement\nwith the string \n    s\n, or \"NO\" if you cannot. You may print each letter in\nany case (YES, yes, Yes will all be recognized as positive answer, NO, no and\nnO will all be recognized as negative answer). Example Input 6 abcdef cdedcb\naaa aaaaa aab baaa ab b abcdef abcdef ba baa Output YES YES NO YES YES NO Note\nConsider the examples. The first test case is described in the statement. In\nthe second test case, you can place the chip on the \n    1\n-st position, move\nit twice to the right, and then move it twice to the left. In the fourth test\ncase, you can place the chip on the \n    2\n-nd position, and then don't move\nit at all. In the fifth test case, you can place the chip on the \n    1\n-st\nposition, move it \n    5\n times to the right, and then finish the process.\n\n",
        "cf_contest_id": 1553,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dp",
            "hashing",
            "implementation",
            "strings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\nabcdef\r\ncdedcb\r\naaa\r\naaaaa\r\naab\r\nbaaa\r\nab\r\nb\r\nabcdef\r\nabcdef\r\nba\r\nbaa\r\n",
                "YES\r\nYES\r\nNO \r\nYES\r\nYES\r\nNO \r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab\r\naba\r\n",
                "YES\r\n"
            ]
        ]
    }
]