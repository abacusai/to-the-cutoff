[
    {
        "name": "Restore the Array",
        "description": "Kristina had an array \n    a\n of length \n    n\n consisting of non-negative\nintegers. She built a new array \n    b\n of length \n    n-1\n, such that \n    b_i\n    = \n    max(a_i, a_i+1)\n (\n    1 \n    \u2264 i \n    \u2264 n-1\n). For example, suppose\nKristina had an array \n    a\n = [\n    3, 0, 4, 0, 5\n] of length \n    5\n. Then\nshe did the following: Calculated \n    b_1 = \n    max(a_1, a_2) = \n    max(3, 0) =\n    3\n; Calculated \n    b_2 = \n    max(a_2, a_3) = \n    max(0, 4) = 4\n; Calculated\n\n    b_3 = \n    max(a_3, a_4) = \n    max(4, 0) = 4\n; Calculated \n    b_4 =\n    \n    max(a_4, a_5) = \n    max(0, 5) = 5\n. As a result, she got an array \n    b\n\n= [\n    3, 4, 4, 5\n] of length \n    4\n.You only know the array \n    b\n. Find\nany matching array \n    a\n that Kristina may have originally had. Input The\nfirst line of input data contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    10^4\n) \u2014 the number of test cases. The description of the test cases\nfollows. The first line of each test case contains one integer \n    n\n (\n    2\n    \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of elements in the array \n    a\n\nthat Kristina originally had. The second line of each test case contains\nexactly \n    n-1\n non-negative integer \u2014 elements of array \n    b\n (\n    0 \n    \u2264\n    b_i \n    \u2264 10^9\n). It is guaranteed that the sum of \n    n\n over all test\ncases does not exceed \n    2 \n    \u00b7 10^5\n, and that array \n    b\n was built\ncorrectly from some array \n    a\n. Output For each test case on a separate\nline, print exactly \n    n\n non-negative integers \u2014 the elements of the array\n\n    a\n that Kristina originally had. If there are several possible answers \u2014\noutput any of them. Example Input 11 5 3 4 4 5 4 2 2 1 5 0 0 0 0 6 0 3 4 4 3 2\n10 4 3 3 3 5 4 2 5 5 4 3 3 3 4 2 1 0 3 4 4 6 8 1 3 5 10 Output 3 0 4 0 5 2 2 1\n1 0 0 0 0 0 0 0 3 4 3 3 10 10 3 3 3 1 4 2 2 5 5 3 3 3 3 2 1 0 0 2 4 4 8 1 1 3\n5 10 Note The first test case is explained in the problem statement. In the\nsecond test case, we can get array \n    b\n = [\n    2, 2, 1\n] from the array\n\n    a\n = [\n    2, 2, 1, 1\n]: \n    b_1 = \n    max(a_1, a_2) = \n    max(2, 2) = 2\n;\n\n    b_2 = \n    max(a_2, a_3) = \n    max(2, 1) = 2\n; \n    b_3 = \n    max(a_3, a_4) =\n    \n    max(1, 1) = 1\n. In the third test case, all elements of the array \n    b\n\nare zeros. Since each \n    b_i\n is the maximum of two adjacent elements of\narray \n    a\n, array \n    a\n can only consist entirely of zeros. In the fourth\ntest case, we can get array \n    b\n = [\n    0, 3, 4, 4, 3\n] from the array\n\n    a\n = [\n    0, 0, 3, 4, 3, 3\n] : \n    b_1 = \n    max(a_1, a_2) = \n    max(0, 0)\n    = 0\n; \n    b_2 = \n    max(a_2, a_3) = \n    max(0, 3) = 3\n; \n    b_3 = \n    max(a_3,\n    a_4) = \n    max(3, 4) = 4\n; \n    b_4 = \n    max(a_4, a_5) = \n    max(4, 3) = 4\n;\n\n    b_5 = \n    max(a_5, a_6) = \n    max(3, 3) = 3\n.\n\n",
        "cf_contest_id": 1811,
        "cf_index": "C",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "11\r\n5\r\n3 4 4 5\r\n4\r\n2 2 1\r\n5\r\n0 0 0 0\r\n6\r\n0 3 4 4 3\r\n2\r\n10\r\n4\r\n3 3 3\r\n5\r\n4 2 5 5\r\n4\r\n3 3 3\r\n4\r\n2 1 0\r\n3\r\n4 4\r\n6\r\n8 1 3 5 10\r\n",
                "3 3 4 4 5\r\n2 2 1 1\r\n0 0 0 0 0\r\n0 0 3 4 3 3\r\n10 10\r\n3 3 3 3\r\n4 2 2 5 5\r\n3 3 3 3\r\n2 1 0 0\r\n4 4 4\r\n8 1 1 3 5 10\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n4\r\n12312 4 4\r\n",
                "12312 4 4 4\r\n"
            ],
            [
                "1\r\n5\r\n2747 4 4 4\r\n",
                "2747 4 4 4 4\r\n"
            ],
            [
                "3\r\n2\r\n1\r\n3\r\n1 2\r\n2\r\n9\r\n",
                "1 1\r\n1 1 2\r\n9 9\r\n"
            ],
            [
                "6\r\n2\r\n1\r\n2\r\n1\r\n2\r\n1\r\n2\r\n1\r\n2\r\n1\r\n2\r\n1\r\n",
                "1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n"
            ],
            [
                "2\r\n3\r\n1 0\r\n4\r\n2 1 0\r\n",
                "1 0 0\r\n2 1 0 0\r\n"
            ]
        ]
    }
]