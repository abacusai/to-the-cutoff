[
    {
        "name": "Tricky Function",
        "description": "Iahub and Sorin are the best competitive programmers in their town. However,\nthey can't both qualify to an important contest. The selection will be made\nwith the help of a single problem. Blatnatalag, a friend of Iahub, managed to\nget hold of the problem before the contest. Because he wants to make sure\nIahub will be the one qualified, he tells Iahub the following task. You're\ngiven an (1-based) array a with n elements. Let's define function f(i, j) (1 \u2264\ni, j \u2264 n) as (i - j)^2 + g(i, j)^2. Function g is calculated by the following\npseudo-code: int g(int i, int j)  int sum = 0; for (int k = min(i, j) + 1; k\n<= max(i, j); k = k + 1) sum = sum + a[k]; return sum;  Find a value mini \u2260 j\nf(i, j). Probably by now Iahub already figured out the solution to this\nproblem. Can you? Input The first line of input contains a single integer n (2\n\u2264 n \u2264 100000). Next line contains n integers a[1], a[2], ..., a[n] ( - 10^4 \u2264\na[i] \u2264 10^4). Output Output a single integer \u2014 the value of mini \u2260 j f(i, j).\nExamples Input 4 1 0 0 -1 Output 1 Input 2 1 -1 Output 2\n\n",
        "cf_contest_id": 429,
        "cf_index": "D",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "divide and conquer",
            "geometry"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 0 0 -1\r\n",
                "1"
            ],
            [
                "2\r\n1 -1\r\n",
                "2"
            ]
        ],
        "private_cases": [
            [
                "100\r\n-57 -64 83 76 80 27 60 76 -80 -56 52 72 -17 92 -96 87 41 -88 94 89 12 42 36 34 -100 -43 -42 62 3 87 -69 -6 -27 -59 -7 5 -90 -23 63 -87 -60 -92 -40 54 -16 -47 67 -64 10 33 -19 53 -7 -62 16 -74 -36 4 -75 -55 92 3 -22 43 -30 48 -27 88 -58 41 36 8 -40 -30 -18 16 22 -66 -91 -46 48 -60 -45 -89 37 -76 52 81 81 15 1 -43 -45 -19 9 -75 -75 -63 41 29\r\n",
                "2"
            ],
            [
                "100\r\n-1 -3 -3 0 -1 -1 -1 1 2 1 0 -1 -2 0 -2 -2 3 -2 -1 -2 2 -2 -2 3 0 2 3 -1 2 -1 -2 2 -3 2 1 0 -1 1 3 -1 0 2 -3 -2 2 2 3 -2 2 3 0 -3 -2 1 -1 0 3 0 2 0 1 1 0 -3 1 -3 3 0 -1 -3 3 3 1 -2 2 -2 -3 -1 -2 2 -1 0 2 1 2 -1 2 3 -2 -1 0 -3 0 -1 3 2 -2 2 3 0\r\n",
                "1"
            ],
            [
                "4\r\n200 100 -200 100\r\n",
                "9"
            ],
            [
                "2\r\n3 -9\r\n",
                "82"
            ],
            [
                "3\r\n0 -10 10\r\n",
                "4"
            ],
            [
                "2\r\n10000 10000\r\n",
                "100000001"
            ],
            [
                "2\r\n5 5\r\n",
                "26"
            ],
            [
                "3\r\n10 10 -10\r\n",
                "4"
            ],
            [
                "6\r\n10000 10000 10000 10000 10000 6904\r\n",
                "47665217"
            ],
            [
                "3\r\n0 10000 -10000\r\n",
                "4"
            ],
            [
                "3\r\n0 2 3\r\n",
                "5"
            ],
            [
                "2\r\n0 1\r\n",
                "2"
            ],
            [
                "5\r\n5865 6072 -4563 5913 -7926\r\n",
                "254032"
            ],
            [
                "2\r\n1 10000\r\n",
                "100000001"
            ],
            [
                "5\r\n10 11 12 13 -40\r\n",
                "32"
            ],
            [
                "21\r\n10 10 10 10 10 10 10 10 10 10 -95 10 10 10 10 10 10 10 10 10 10\r\n",
                "101"
            ],
            [
                "5\r\n0 4 10 -5 -5\r\n",
                "9"
            ],
            [
                "2\r\n0 10000\r\n",
                "100000001"
            ],
            [
                "4\r\n0 100 100 -200\r\n",
                "9"
            ],
            [
                "4\r\n0 10 -5 -5\r\n",
                "9"
            ],
            [
                "4\r\n10 10 -10 -10\r\n",
                "4"
            ],
            [
                "3\r\n1 10 10\r\n",
                "101"
            ],
            [
                "3\r\n1000 1000 -800\r\n",
                "40004"
            ],
            [
                "3\r\n0 10 -10\r\n",
                "4"
            ],
            [
                "2\r\n0 100\r\n",
                "10001"
            ]
        ]
    }
]