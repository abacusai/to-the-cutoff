[
    {
        "name": "Order Book",
        "description": "In this task you need to process a set of stock exchange orders and use them\nto create order book. An order is an instruction of some participant to buy or\nsell stocks on stock exchange. The order number i has price pi, direction di \u2014\nbuy or sell, and integer qi. This means that the participant is ready to buy\nor sell qi stocks at price pi for one stock. A value qi is also known as a\nvolume of an order. All orders with the same price p and direction d are\nmerged into one aggregated order with price p and direction d. The volume of\nsuch order is a sum of volumes of the initial orders. An order book is a list\nof aggregated orders, the first part of which contains sell orders sorted by\nprice in descending order, the second contains buy orders also sorted by price\nin descending order. An order book of depth s contains s best aggregated\norders for each direction. A buy order is better if it has higher price and a\nsell order is better if it has lower price. If there are less than s\naggregated orders for some direction then all of them will be in the final\norder book. You are given n stock exhange orders. Your task is to print order\nbook of depth s for these orders. Input The input starts with two positive\nintegers n and s (1 \u2264 n \u2264 1000, 1 \u2264 s \u2264 50), the number of orders and the book\ndepth. Next n lines contains a letter di (either 'B' or 'S'), an integer pi (0\n\u2264 pi \u2264 10^5) and an integer qi (1 \u2264 qi \u2264 10^4) \u2014 direction, price and volume\nrespectively. The letter 'B' means buy, 'S' means sell. The price of any sell\norder is higher than the price of any buy order. Output Print no more than 2s\nlines with aggregated orders from order book of depth s. The output format for\norders should be the same as in input. Examples Input 6 2 B 10 3 S 50 2 S 40 1\nS 50 6 B 20 4 B 25 10 Output S 50 8 S 40 1 B 25 10 B 20 4 Note Denote (x, y)\nan order with price x and volume y. There are 3 aggregated buy orders (10, 3),\n(20, 4), (25, 10) and two sell orders (50, 8), (40, 1) in the sample. You need\nto print no more than two best orders for each direction, so you shouldn't\nprint the order (10 3) having the worst price among buy orders.\n\n",
        "cf_contest_id": 572,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 2\r\nB 10 3\r\nS 50 2\r\nS 40 1\r\nS 50 6\r\nB 20 4\r\nB 25 10\r\n",
                "S 50 8\r\nS 40 1\r\nB 25 10\r\nB 20 4\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1\r\nB 7523 5589\r\nS 69799 1711\r\n",
                "S 69799 1711\r\nB 7523 5589\r\n"
            ],
            [
                "1 1\r\nB 48259 991\r\n",
                "B 48259 991\r\n"
            ],
            [
                "1 50\r\nB 47828 7726\r\n",
                "B 47828 7726\r\n"
            ],
            [
                "1 1\r\nS 95992 7257\r\n",
                "S 95992 7257\r\n"
            ],
            [
                "1 50\r\nS 72218 8095\r\n",
                "S 72218 8095\r\n"
            ],
            [
                "2 50\r\nB 758 9290\r\nS 86168 3367\r\n",
                "S 86168 3367\r\nB 758 9290\r\n"
            ],
            [
                "3 3\r\nB 5878 1568\r\nS 60238 4895\r\nS 76276 1905\r\n",
                "S 76276 1905\r\nS 60238 4895\r\nB 5878 1568\r\n"
            ],
            [
                "6 2\r\nB 0 1\r\nS 1 1\r\nS 1 1\r\nS 1 1\r\nB 0 1\r\nB 0 1\r\n",
                "S 1 3\r\nB 0 3\r\n"
            ],
            [
                "2 2\r\nS 1 1\r\nB 0 2\r\n",
                "S 1 1\r\nB 0 2\r\n"
            ],
            [
                "2 1\r\nS 10 1\r\nB 0 1\r\n",
                "S 10 1\r\nB 0 1\r\n"
            ],
            [
                "2 10\r\nB 0 1\r\nS 100000 1\r\n",
                "S 100000 1\r\nB 0 1\r\n"
            ],
            [
                "2 1\r\nS 1 1\r\nB 0 1\r\n",
                "S 1 1\r\nB 0 1\r\n"
            ],
            [
                "2 1\r\nB 0 100\r\nS 1 100\r\n",
                "S 1 100\r\nB 0 100\r\n"
            ],
            [
                "2 2\r\nB 0 3\r\nS 10 3\r\n",
                "S 10 3\r\nB 0 3\r\n"
            ],
            [
                "2 10\r\nB 0 1\r\nS 1 1\r\n",
                "S 1 1\r\nB 0 1\r\n"
            ],
            [
                "2 50\r\nB 2 5\r\nB 0 1\r\n",
                "B 2 5\r\nB 0 1\r\n"
            ]
        ]
    }
]