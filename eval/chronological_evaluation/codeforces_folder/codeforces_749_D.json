[
    {
        "name": "Leaving Auction",
        "description": "There are n people taking part in auction today. The rules of auction are\nclassical. There were n bids made, though it's not guaranteed they were from\ndifferent people. It might happen that some people made no bids at all. Each\nbid is define by two integers (ai, bi), where ai is the index of the person,\nwho made this bid and bi is its size. Bids are given in chronological order,\nmeaning bi < bi + 1 for all i < n. Moreover, participant never makes two bids\nin a row (no one updates his own bid), i.e. ai \u2260 ai + 1 for all i < n. Now you\nare curious with the following question: who (and which bid) will win the\nauction if some participants were absent? Consider that if someone was absent,\nall his bids are just removed and no new bids are added. Note, that if during\nthis imaginary exclusion of some participants it happens that some of the\nremaining participants makes a bid twice (or more times) in a row, only first\nof these bids is counted. For better understanding take a look at the samples.\nYou have several questions in your mind, compute the answer for each of them.\nInput The first line of the input contains an integer n (1 \u2264 n \u2264 200 000) \u2014\nthe number of participants and bids. Each of the following n lines contains\ntwo integers ai and bi (1 \u2264 ai \u2264 n, 1 \u2264 bi \u2264 10^9, bi < bi + 1) \u2014 the number\nof participant who made the i-th bid and the size of this bid. Next line\ncontains an integer q (1 \u2264 q \u2264 200 000) \u2014 the number of question you have in\nmind. Each of next q lines contains an integer k (1 \u2264 k \u2264 n), followed by k\nintegers lj (1 \u2264 lj \u2264 n) \u2014 the number of people who are not coming in this\nquestion and their indices. It is guarenteed that lj values are different for\na single question. It's guaranteed that the sum of k over all question won't\nexceed 200 000. Output For each question print two integer \u2014 the index of the\nwinner and the size of the winning bid. If there is no winner (there are no\nremaining bids at all), print two zeroes. Examples Input 6 1 10 2 100 3 1000 1\n10000 2 100000 3 1000000 3 1 3 2 2 3 2 1 2 Output 2 100000 1 10 3 1000 Input 3\n1 10 2 100 1 1000 2 2 1 2 2 2 3 Output 0 0 1 10 Note Consider the first\nsample: In the first question participant number 3 is absent so the sequence\nof bids looks as follows: 1 10 2 100 1 10 000 2 100 000 Participant number 2\nwins with the bid 100 000. In the second question participants 2 and 3 are\nabsent, so the sequence of bids looks: 1 10 1 10 000 The winner is, of course,\nparticipant number 1 but the winning bid is 10 instead of 10 000 as no one\nwill ever increase his own bid (in this problem). In the third question\nparticipants 1 and 2 are absent and the sequence is: 3 1 000 3 1 000 000 The\nwinner is participant 3 with the bid 1 000.\n\n",
        "cf_contest_id": 749,
        "cf_index": "D",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n1 10\r\n2 100\r\n3 1000\r\n1 10000\r\n2 100000\r\n3 1000000\r\n3\r\n1 3\r\n2 2 3\r\n2 1 2\r\n",
                "2 100000\r\n1 10\r\n3 1000\r\n"
            ],
            [
                "3\r\n1 10\r\n2 100\r\n1 1000\r\n2\r\n2 1 2\r\n2 2 3\r\n",
                "0 0\r\n1 10\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 1\r\n1\r\n1 1\r\n",
                "0 0\r\n"
            ],
            [
                "2\r\n1 1\r\n2 2\r\n3\r\n1 1\r\n1 2\r\n2 1 2\r\n",
                "2 2\r\n1 1\r\n0 0\r\n"
            ],
            [
                "4\r\n1 3\r\n2 7\r\n1 8\r\n3 10\r\n15\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n2 1 2\r\n2 1 3\r\n2 1 4\r\n2 2 3\r\n2 2 4\r\n2 3 4\r\n3 1 2 3\r\n3 1 2 4\r\n3 1 3 4\r\n3 2 3 4\r\n4 1 2 3 4\r\n",
                "3 10\r\n3 10\r\n1 8\r\n3 10\r\n3 10\r\n2 7\r\n3 10\r\n1 3\r\n3 10\r\n1 8\r\n0 0\r\n3 10\r\n2 7\r\n1 3\r\n0 0\r\n"
            ],
            [
                "3\r\n1 3\r\n2 5\r\n3 7\r\n7\r\n1 1\r\n1 2\r\n1 3\r\n2 1 2\r\n2 1 3\r\n2 2 3\r\n3 1 2 3\r\n",
                "3 7\r\n3 7\r\n2 5\r\n3 7\r\n2 5\r\n1 3\r\n0 0\r\n"
            ],
            [
                "4\r\n1 3\r\n2 4\r\n3 5\r\n1 7\r\n15\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n2 1 2\r\n2 1 3\r\n2 1 4\r\n2 2 3\r\n2 2 4\r\n2 3 4\r\n3 1 2 3\r\n3 1 2 4\r\n3 1 3 4\r\n3 2 3 4\r\n4 1 2 3 4\r\n",
                "3 5\r\n1 7\r\n1 7\r\n1 7\r\n3 5\r\n2 4\r\n3 5\r\n1 3\r\n1 7\r\n1 7\r\n0 0\r\n3 5\r\n2 4\r\n1 3\r\n0 0\r\n"
            ],
            [
                "3\r\n2 7\r\n1 13\r\n2 22\r\n7\r\n1 1\r\n1 2\r\n2 1 2\r\n1 3\r\n2 1 3\r\n2 2 3\r\n3 1 2 3\r\n",
                "2 7\r\n1 13\r\n0 0\r\n2 22\r\n2 7\r\n1 13\r\n0 0\r\n"
            ],
            [
                "3\r\n2 6\r\n3 10\r\n2 14\r\n7\r\n1 1\r\n1 2\r\n2 1 2\r\n1 3\r\n2 1 3\r\n2 2 3\r\n3 1 2 3\r\n",
                "2 14\r\n3 10\r\n3 10\r\n2 6\r\n2 6\r\n0 0\r\n0 0\r\n"
            ],
            [
                "4\r\n4 10\r\n3 12\r\n1 20\r\n4 28\r\n15\r\n1 1\r\n1 2\r\n2 1 2\r\n1 3\r\n2 1 3\r\n2 2 3\r\n3 1 2 3\r\n1 4\r\n2 1 4\r\n2 2 4\r\n3 1 2 4\r\n2 3 4\r\n3 1 3 4\r\n3 2 3 4\r\n4 1 2 3 4\r\n",
                "4 28\r\n4 28\r\n4 28\r\n4 28\r\n4 10\r\n4 28\r\n4 10\r\n1 20\r\n3 12\r\n1 20\r\n3 12\r\n1 20\r\n0 0\r\n1 20\r\n0 0\r\n"
            ],
            [
                "4\r\n2 8\r\n1 14\r\n3 24\r\n1 30\r\n15\r\n1 1\r\n1 2\r\n2 1 2\r\n1 3\r\n2 1 3\r\n2 2 3\r\n3 1 2 3\r\n1 4\r\n2 1 4\r\n2 2 4\r\n3 1 2 4\r\n2 3 4\r\n3 1 3 4\r\n3 2 3 4\r\n4 1 2 3 4\r\n",
                "3 24\r\n1 30\r\n3 24\r\n1 14\r\n2 8\r\n1 14\r\n0 0\r\n1 30\r\n3 24\r\n1 30\r\n3 24\r\n1 14\r\n2 8\r\n1 14\r\n0 0\r\n"
            ],
            [
                "5\r\n3 4\r\n1 14\r\n4 20\r\n3 22\r\n5 28\r\n31\r\n1 1\r\n1 2\r\n2 1 2\r\n1 3\r\n2 1 3\r\n2 2 3\r\n3 1 2 3\r\n1 4\r\n2 1 4\r\n2 2 4\r\n3 1 2 4\r\n2 3 4\r\n3 1 3 4\r\n3 2 3 4\r\n4 1 2 3 4\r\n1 5\r\n2 1 5\r\n2 2 5\r\n3 1 2 5\r\n2 3 5\r\n3 1 3 5\r\n3 2 3 5\r\n4 1 2 3 5\r\n2 4 5\r\n3 1 4 5\r\n3 2 4 5\r\n4 1 2 4 5\r\n3 3 4 5\r\n4 1 3 4 5\r\n4 2 3 4 5\r\n5 1 2 3 4 5\r\n",
                "5 28\r\n5 28\r\n5 28\r\n5 28\r\n5 28\r\n5 28\r\n5 28\r\n5 28\r\n5 28\r\n5 28\r\n5 28\r\n5 28\r\n5 28\r\n5 28\r\n5 28\r\n3 22\r\n3 22\r\n3 22\r\n3 22\r\n4 20\r\n4 20\r\n4 20\r\n4 20\r\n3 22\r\n3 4\r\n3 22\r\n3 4\r\n1 14\r\n0 0\r\n1 14\r\n0 0\r\n"
            ],
            [
                "5\r\n1 5\r\n3 7\r\n2 17\r\n3 24\r\n1 28\r\n31\r\n1 1\r\n1 2\r\n2 1 2\r\n1 3\r\n2 1 3\r\n2 2 3\r\n3 1 2 3\r\n1 4\r\n2 1 4\r\n2 2 4\r\n3 1 2 4\r\n2 3 4\r\n3 1 3 4\r\n3 2 3 4\r\n4 1 2 3 4\r\n1 5\r\n2 1 5\r\n2 2 5\r\n3 1 2 5\r\n2 3 5\r\n3 1 3 5\r\n3 2 3 5\r\n4 1 2 3 5\r\n2 4 5\r\n3 1 4 5\r\n3 2 4 5\r\n4 1 2 4 5\r\n3 3 4 5\r\n4 1 3 4 5\r\n4 2 3 4 5\r\n5 1 2 3 4 5\r\n",
                "3 24\r\n1 28\r\n3 7\r\n1 28\r\n2 17\r\n1 5\r\n0 0\r\n1 28\r\n3 24\r\n1 28\r\n3 7\r\n1 28\r\n2 17\r\n1 5\r\n0 0\r\n1 28\r\n3 24\r\n1 28\r\n3 7\r\n1 28\r\n2 17\r\n1 5\r\n0 0\r\n1 28\r\n3 24\r\n1 28\r\n3 7\r\n1 28\r\n2 17\r\n1 5\r\n0 0\r\n"
            ]
        ]
    }
]