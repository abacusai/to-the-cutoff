[
    {
        "name": "Boxes Packing",
        "description": "Maksim has \n    n\n objects and \n    m\n boxes, each box has size exactly\n\n    k\n. Objects are numbered from \n    1\n to \n    n\n in order from left to\nright, the size of the \n    i\n-th object is \n    a_i\n. Maksim wants to pack\nhis objects into the boxes and he will pack objects by the following\nalgorithm: he takes one of the empty boxes he has, goes from left to right\nthrough the objects, and if the \n    i\n-th object fits in the current box (the\nremaining size of the box is greater than or equal to \n    a_i\n), he puts it\nin the box, and the remaining size of the box decreases by \n    a_i\n.\nOtherwise he takes the new empty box and continues the process above. If he\nhas no empty boxes and there is at least one object not in some box then\nMaksim cannot pack the chosen set of objects. Maksim wants to know the maximum\nnumber of objects he can pack by the algorithm above. To reach this target, he\nwill throw out the leftmost object from the set until the remaining set of\nobjects can be packed in boxes he has. Your task is to say the maximum number\nof objects Maksim can pack in boxes he has. Each time when Maksim tries to\npack the objects into the boxes, he will make empty all the boxes he has\nbefore do it (and the relative order of the remaining set of objects will not\nchange). Input The first line of the input contains three integers \n    n\n,\n\n    m\n, \n    k\n (\n    1 \n    \u2264 n, m \n    \u2264 2 \n    \u00b7 10^5\n, \n    1 \n    \u2264 k \n    \u2264\n    10^9\n) \u2014 the number of objects, the number of boxes and the size of each\nbox. The second line of the input contains \n    n\n integers \n    a_1, a_2,\n    \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 k\n), where \n    a_i\n is the size of\nthe \n    i\n-th object. Output Print the maximum number of objects Maksim can\npack using the algorithm described in the problem statement. Examples Input 5\n2 6 5 2 1 4 2 Output 4 Input 5 1 4 4 2 3 4 1 Output 1 Input 5 3 3 1 2 3 1 1\nOutput 5 Note In the first example Maksim can pack only \n    4\n objects.\nFirstly, he tries to pack all the \n    5\n objects. Distribution of objects\nwill be \n    [5], [2, 1]\n. Maxim cannot pack the next object in the second box\nand he has no more empty boxes at all. Next he will throw out the first object\nand the objects distribution will be \n    [2, 1], [4, 2]\n. So the answer is\n\n    4\n. In the second example it is obvious that Maksim cannot pack all the\nobjects starting from first, second, third and fourth (in all these cases the\ndistribution of objects is \n    [4]\n), but he can pack the last object\n(\n    [1]\n). In the third example Maksim can pack all the objects he has. The\ndistribution will be \n    [1, 2], [3], [1, 1]\n.\n\n",
        "cf_contest_id": 1066,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 2 6\r\n5 2 1 4 2\r\n",
                "4\r\n"
            ],
            [
                "5 1 4\r\n4 2 3 4 1\r\n",
                "1\r\n"
            ],
            [
                "5 3 3\r\n1 2 3 1 1\r\n",
                "5\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 4 2\r\n1 2 1 2 1\r\n",
                "4\r\n"
            ],
            [
                "1 1 1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "5 5 5\r\n5 5 5 5 5\r\n",
                "5\r\n"
            ]
        ]
    }
]