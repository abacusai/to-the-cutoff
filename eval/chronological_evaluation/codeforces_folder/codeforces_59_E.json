[
    {
        "name": "Shortest Path",
        "description": "In Ancient Berland there were n cities and m two-way roads of equal length.\nThe cities are numbered with integers from 1 to n inclusively. According to an\nancient superstition, if a traveller visits three cities ai, bi, ci in row,\nwithout visiting other cities between them, a great disaster awaits him.\nOverall there are k such city triplets. Each triplet is ordered, which means\nthat, for example, you are allowed to visit the cities in the following order:\nai, ci, bi. Vasya wants to get from the city 1 to the city n and not fulfil\nthe superstition. Find out which minimal number of roads he should take. Also\nyou are required to find one of his possible path routes. Input The first line\ncontains three integers n, m, k (2 \u2264 n \u2264 3000, 1 \u2264 m \u2264 20000, 0 \u2264 k \u2264 10^5)\nwhich are the number of cities, the number of roads and the number of the\nforbidden triplets correspondingly. Then follow m lines each containing two\nintegers xi, yi (1 \u2264 xi, yi \u2264 n) which are the road descriptions. The road is\ndescribed by the numbers of the cities it joins. No road joins a city with\nitself, there cannot be more than one road between a pair of cities. Then\nfollow k lines each containing three integers ai, bi, ci (1 \u2264 ai, bi, ci \u2264 n)\nwhich are the forbidden triplets. Each ordered triplet is listed mo more than\none time. All three cities in each triplet are distinct. City n can be\nunreachable from city 1 by roads. Output If there are no path from 1 to n\nprint -1. Otherwise on the first line print the number of roads d along the\nshortest path from the city 1 to the city n. On the second line print d + 1\nnumbers \u2014 any of the possible shortest paths for Vasya. The path should start\nin the city 1 and end in the city n. Examples Input 4 4 1 1 2 2 3 3 4 1 3 1 4\n3 Output 2 1 3 4 Input 3 1 0 1 2 Output -1 Input 4 4 2 1 2 2 3 3 4 1 3 1 2 3 1\n3 4 Output 4 1 3 2 3 4\n\n",
        "cf_contest_id": 59,
        "cf_index": "E",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "graphs",
            "shortest paths"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 4 1\r\n1 2\r\n2 3\r\n3 4\r\n1 3\r\n1 4 3\r\n",
                "2\r\n1 3 4\r\n"
            ],
            [
                "3 1 0\r\n1 2\r\n",
                "-1\r\n"
            ],
            [
                "4 4 2\r\n1 2\r\n2 3\r\n3 4\r\n1 3\r\n1 2 3\r\n1 3 4\r\n",
                "4\r\n1 3 2 3 4\r\n"
            ]
        ],
        "private_cases": [
            [
                "4 4 1\r\n1 2\r\n2 3\r\n3 4\r\n1 3\r\n1 2 3\r\n",
                "2\r\n1 3 4\r\n"
            ],
            [
                "2 1 0\r\n1 2\r\n",
                "1\r\n1 2\r\n"
            ],
            [
                "4 4 1\r\n1 2\r\n2 3\r\n3 4\r\n1 3\r\n1 3 4\r\n",
                "3\r\n1 2 3 4\r\n"
            ],
            [
                "3 2 0\r\n1 2\r\n3 2\r\n",
                "2\r\n1 2 3\r\n"
            ],
            [
                "3 2 1\r\n1 2\r\n3 2\r\n1 2 3\r\n",
                "-1\r\n"
            ],
            [
                "4 4 4\r\n1 2\r\n2 3\r\n3 4\r\n1 3\r\n1 2 3\r\n1 3 4\r\n1 2 4\r\n1 3 2\r\n",
                "-1\r\n"
            ]
        ]
    }
]