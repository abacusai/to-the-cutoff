[
    {
        "name": "Three Logos",
        "description": "Three companies decided to order a billboard with pictures of their logos. A\nbillboard is a big square board. A logo of each company is a rectangle of a\nnon-zero area. Advertisers will put up the ad only if it is possible to place\nall three logos on the billboard so that they do not overlap and the billboard\nhas no empty space left. When you put a logo on the billboard, you should\nrotate it so that the sides were parallel to the sides of the billboard. Your\ntask is to determine if it is possible to put the logos of all the three\ncompanies on some square billboard without breaking any of the described\nrules. Input The first line of the input contains six positive integers x1,\ny1, x2, y2, x3, y3 (1 \u2264 x1, y1, x2, y2, x3, y3 \u2264 100), where xi and yi\ndetermine the length and width of the logo of the i-th company respectively.\nOutput If it is impossible to place all the three logos on a square shield,\nprint a single integer \"-1\" (without the quotes). If it is possible, print in\nthe first line the length of a side of square n, where you can place all the\nthree logos. Each of the next n lines should contain n uppercase English\nletters \"A\", \"B\" or \"C\". The sets of the same letters should form solid\nrectangles, provided that: the sizes of the rectangle composed from letters\n\"A\" should be equal to the sizes of the logo of the first company, the sizes\nof the rectangle composed from letters \"B\" should be equal to the sizes of the\nlogo of the second company, the sizes of the rectangle composed from letters\n\"C\" should be equal to the sizes of the logo of the third company, Note that\nthe logos of the companies can be rotated for printing on the billboard. The\nbillboard mustn't have any empty space. If a square billboard can be filled\nwith the logos in multiple ways, you are allowed to print any of them. See the\nsamples to better understand the statement. Examples Input 5 1 2 5 5 2 Output\n5 AAAAA BBBBB BBBBB CCCCC CCCCC Input 4 4 2 6 4 2 Output 6 BBBBBB BBBBBB\nAAAACC AAAACC AAAACC AAAACC\n\n",
        "cf_contest_id": 581,
        "cf_index": "D",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "constructive algorithms",
            "geometry",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 1 2 5 5 2\r\n",
                "5\r\nAAAAA\r\nBBBBB\r\nBBBBB\r\nCCCCC\r\nCCCCC\r\n"
            ],
            [
                "4 4 2 6 4 2\r\n",
                "6\r\nBBBBBB\r\nBBBBBB\r\nAAAACC\r\nAAAACC\r\nAAAACC\r\nAAAACC\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 3 1 3 3 1\r\n",
                "3\r\nAAA\r\nBBB\r\nCCC\r\n"
            ],
            [
                "2 4 1 4 1 4\r\n",
                "4\r\nAAAA\r\nAAAA\r\nBBBB\r\nCCCC\r\n"
            ],
            [
                "7 2 7 2 7 3\r\n",
                "7\r\nAAAAAAA\r\nAAAAAAA\r\nBBBBBBB\r\nBBBBBBB\r\nCCCCCCC\r\nCCCCCCC\r\nCCCCCCC\r\n"
            ],
            [
                "1 10 6 10 3 10\r\n",
                "10\r\nAAAAAAAAAA\r\nBBBBBBBBBB\r\nBBBBBBBBBB\r\nBBBBBBBBBB\r\nBBBBBBBBBB\r\nBBBBBBBBBB\r\nBBBBBBBBBB\r\nCCCCCCCCCC\r\nCCCCCCCCCC\r\nCCCCCCCCCC\r\n"
            ],
            [
                "20 1 20 1 18 20\r\n",
                "20\r\nAAAAAAAAAAAAAAAAAAAA\r\nBBBBBBBBBBBBBBBBBBBB\r\nCCCCCCCCCCCCCCCCCCCC\r\nCCCCCCCCCCCCCCCCCCCC\r\nCCCCCCCCCCCCCCCCCCCC\r\nCCCCCCCCCCCCCCCCCCCC\r\nCCCCCCCCCCCCCCCCCCCC\r\nCCCCCCCCCCCCCCCCCCCC\r\nCCCCCCCCCCCCCCCCCCCC\r\nCCCCCCCCCCCCCCCCCCCC\r\nCCCCCCCCCCCCCCCCCCCC\r\nCCCCCCCCCCCCCCCCCCCC\r\nCCCCCCCCCCCCCCCCCCCC\r\nCCCCCCCCCCCCCCCCCCCC\r\nCCCCCCCCCCCCCCCCCCCC\r\nCCCCCCCCCCCCCCCCCCCC\r\nCCCCCCCCCCCCCCCCCCCC\r\nCCCCCCCCCCCCCCCCCCCC\r\nCCCCCCCCCCCCCCCCCCCC\r\nCCCCCCCCCCCCCCCCCCCC\r\n"
            ],
            [
                "2 1 3 1 2 2\r\n",
                "3\r\nBBB\r\nACC\r\nACC\r\n"
            ],
            [
                "1 2 2 4 3 2\r\n",
                "4\r\nBBBB\r\nBBBB\r\nACCC\r\nACCC\r\n"
            ],
            [
                "7 4 3 3 4 3\r\n",
                "7\r\nAAAAAAA\r\nAAAAAAA\r\nAAAAAAA\r\nAAAAAAA\r\nBBBCCCC\r\nBBBCCCC\r\nBBBCCCC\r\n"
            ],
            [
                "2 1 9 10 1 8\r\n",
                "10\r\nBBBBBBBBBB\r\nBBBBBBBBBB\r\nBBBBBBBBBB\r\nBBBBBBBBBB\r\nBBBBBBBBBB\r\nBBBBBBBBBB\r\nBBBBBBBBBB\r\nBBBBBBBBBB\r\nBBBBBBBBBB\r\nAACCCCCCCC\r\n"
            ],
            [
                "20 4 8 16 12 16\r\n",
                "20\r\nAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAA\r\nAAAAAAAAAAAAAAAAAAAA\r\nBBBBBBBBCCCCCCCCCCCC\r\nBBBBBBBBCCCCCCCCCCCC\r\nBBBBBBBBCCCCCCCCCCCC\r\nBBBBBBBBCCCCCCCCCCCC\r\nBBBBBBBBCCCCCCCCCCCC\r\nBBBBBBBBCCCCCCCCCCCC\r\nBBBBBBBBCCCCCCCCCCCC\r\nBBBBBBBBCCCCCCCCCCCC\r\nBBBBBBBBCCCCCCCCCCCC\r\nBBBBBBBBCCCCCCCCCCCC\r\nBBBBBBBBCCCCCCCCCCCC\r\nBBBBBBBBCCCCCCCCCCCC\r\nBBBBBBBBCCCCCCCCCCCC\r\nBBBBBBBBCCCCCCCCCCCC\r\nBBBBBBBBCCCCCCCCCCCC\r\nBBBBBBBBCCCCCCCCCCCC\r\n"
            ],
            [
                "100 100 100 100 100 100\r\n",
                "-1\r\n"
            ],
            [
                "1 100 100 1 1 100\r\n",
                "-1\r\n"
            ],
            [
                "100 100 100 1 100 100\r\n",
                "-1\r\n"
            ],
            [
                "3 8 4 8 2 8\r\n",
                "-1\r\n"
            ],
            [
                "70 7 70 2 70 62\r\n",
                "-1\r\n"
            ],
            [
                "6 100 20 100 75 100\r\n",
                "-1\r\n"
            ],
            [
                "17 100 62 100 100 22\r\n",
                "-1\r\n"
            ],
            [
                "2 3 2 5 5 8\r\n",
                "-1\r\n"
            ],
            [
                "70 10 47 59 23 59\r\n",
                "-1\r\n"
            ],
            [
                "42 69 41 31 58 100\r\n",
                "-1\r\n"
            ],
            [
                "96 70 3 100 30 96\r\n",
                "-1\r\n"
            ],
            [
                "1 1 2 2 2 2\r\n",
                "-1\r\n"
            ],
            [
                "2 5 6 7 3 4\r\n",
                "-1\r\n"
            ],
            [
                "2 3 2 3 2 2\r\n",
                "-1\r\n"
            ],
            [
                "1 1 1 1 1 1\r\n",
                "-1\r\n"
            ]
        ]
    }
]