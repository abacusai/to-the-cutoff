[
    {
        "name": "Shurikens",
        "description": "Tenten runs a weapon shop for ninjas. Today she is willing to sell \n    n\n\nshurikens which cost \n    1\n, \n    2\n, ..., \n    n\n ryo (local currency).\nDuring a day, Tenten will place the shurikens onto the showcase, which is\nempty at the beginning of the day. Her job is fairly simple: sometimes Tenten\nplaces another shuriken (from the available shurikens) on the showcase, and\nsometimes a ninja comes in and buys a shuriken from the showcase. Since ninjas\nare thrifty, they always buy the cheapest shuriken from the showcase. Tenten\nkeeps a record for all events, and she ends up with a list of the following\ntypes of records:  means that she placed another shuriken on the showcase; -\nx means that the shuriken of price \n    x\n was bought. Today was a lucky day,\nand all shurikens were bought. Now Tenten wonders if her list is consistent,\nand what could be a possible order of placing the shurikens on the showcase.\nHelp her to find this out! Input The first line contains the only integer\n\n    n\n (\n    1\n    \u2264 n\n    \u2264 10^5\n) standing for the number of shurikens. The\nfollowing \n    2n\n lines describe the events in the format described above.\nIt's guaranteed that there are exactly \n    n\n events of the first type, and\neach price from \n    1\n to \n    n\n occurs exactly once in the events of the\nsecond type. Output If the list is consistent, print \"YES\". Otherwise (that\nis, if the list is contradictory and there is no valid order of shurikens\nplacement), print \"NO\". In the first case the second line must contain \n    n\n\nspace-separated integers denoting the prices of shurikens in order they were\nplaced. If there are multiple answers, print any. Examples Input 4   \u00ad 2\n \u00ad 3  \u00ad 1 \u00ad 4 Output YES 4 2 3 1 Input 1 \u00ad 1  Output NO Input 3 \n  \u00ad 2 \u00ad 1 \u00ad 3 Output NO Note In the first example Tenten first placed\nshurikens with prices \n    4\n and \n    2\n. After this a customer came in and\nbought the cheapest shuriken which costed \n    2\n. Next, Tenten added a\nshuriken with price \n    3\n on the showcase to the already placed \n    4\n-ryo.\nThen a new customer bought this \n    3\n-ryo shuriken. After this she added a\n\n    1\n-ryo shuriken. Finally, the last two customers bought shurikens \n    1\n\nand \n    4\n, respectively. Note that the order \n    [2, 4, 3, 1]\n is also\nvalid. In the second example the first customer bought a shuriken before\nanything was placed, which is clearly impossible. In the third example Tenten\nput all her shurikens onto the showcase, after which a customer came in and\nbought a shuriken with price \n    2\n. This is impossible since the shuriken\nwas not the cheapest, we know that the \n    1\n-ryo shuriken was also there.\n\n",
        "cf_contest_id": 1413,
        "cf_index": "D",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n+\r\n+\r\n- 2\r\n+\r\n- 3\r\n+\r\n- 1\r\n- 4\r\n",
                "YES\r\n4 2 3 1 "
            ],
            [
                "1\r\n- 1\r\n+\r\n",
                "NO"
            ],
            [
                "3\r\n+\r\n+\r\n+\r\n- 2\r\n- 1\r\n- 3\r\n",
                "NO"
            ]
        ],
        "private_cases": [
            [
                "1\r\n+\r\n- 1\r\n",
                "YES\r\n1 "
            ],
            [
                "10\r\n+\r\n- 3\r\n+\r\n+\r\n+\r\n+\r\n- 1\r\n- 7\r\n- 9\r\n- 10\r\n+\r\n+\r\n+\r\n- 4\r\n- 5\r\n- 8\r\n+\r\n- 6\r\n+\r\n- 2\r\n",
                "YES\r\n3 10 9 7 1 8 5 4 6 2 "
            ],
            [
                "10\r\n+\r\n- 3\r\n+\r\n+\r\n+\r\n+\r\n- 1\r\n- 7\r\n- 9\r\n- 10\r\n+\r\n+\r\n+\r\n- 4\r\n- 5\r\n- 8\r\n+\r\n+\r\n- 6\r\n- 2\r\n",
                "NO"
            ],
            [
                "10\r\n+\r\n- 3\r\n+\r\n+\r\n+\r\n+\r\n- 1\r\n- 9\r\n- 7\r\n- 10\r\n+\r\n+\r\n+\r\n+\r\n+\r\n- 2\r\n- 4\r\n- 5\r\n- 6\r\n- 8\r\n",
                "NO"
            ],
            [
                "5\r\n+\r\n+\r\n+\r\n- 3\r\n- 4\r\n+\r\n- 1\r\n- 2\r\n+\r\n- 5\r\n",
                "NO"
            ],
            [
                "4\r\n+\r\n+\r\n+\r\n- 3\r\n- 4\r\n+\r\n- 1\r\n- 2\r\n",
                "NO"
            ],
            [
                "4\r\n+\r\n- 1\r\n+\r\n+\r\n- 4\r\n+\r\n- 2\r\n- 3\r\n",
                "NO"
            ],
            [
                "5\r\n+\r\n- 5\r\n+\r\n+\r\n+\r\n- 4\r\n+\r\n- 1\r\n- 2\r\n- 3\r\n",
                "NO"
            ]
        ]
    }
]