[
    {
        "name": "Underground Lab",
        "description": "The evil Bumbershoot corporation produces clones for gruesome experiments in a\nvast underground lab. On one occasion, the corp cloned a boy Andryusha who was\nsmarter than his comrades. Immediately Andryusha understood that something\nfishy was going on there. He rallied fellow clones to go on a feud against the\nevil corp, and they set out to find an exit from the lab. The corp had to\nreduce to destroy the lab complex. The lab can be pictured as a connected\ngraph with n vertices and m edges. k clones of Andryusha start looking for an\nexit in some of the vertices. Each clone can traverse any edge once per\nsecond. Any number of clones are allowed to be at any vertex simultaneously.\nEach clone is allowed to stop looking at any time moment, but he must look at\nhis starting vertex at least. The exit can be located at any vertex of the\nlab, hence each vertex must be visited by at least one clone. Each clone can\nvisit at most vertices before the lab explodes. Your task is to choose\nstarting vertices and searching routes for the clones. Each route can have at\nmost vertices. Input The first line contains three integers n, m, and k (1 \u2264 n\n\u2264 2\u00b710^5, n - 1 \u2264 m \u2264 2\u00b710^5, 1 \u2264 k \u2264 n) \u2014 the number of vertices and edges in\nthe lab, and the number of clones. Each of the next m lines contains two\nintegers xi and yi (1 \u2264 xi, yi \u2264 n) \u2014 indices of vertices connected by the\nrespective edge. The graph is allowed to have self-loops and multiple edges.\nThe graph is guaranteed to be connected. Output You should print k lines. i-th\nof these lines must start with an integer ci () \u2014 the number of vertices\nvisited by i-th clone, followed by ci integers \u2014 indices of vertices visited\nby this clone in the order of visiting. You have to print each vertex every\ntime it is visited, regardless if it was visited earlier or not. It is\nguaranteed that a valid answer exists. Examples Input 3 2 1 2 1 3 1 Output 3 2\n1 3 Input 5 4 2 1 2 1 3 1 4 1 5 Output 3 2 1 3 3 4 1 5 Note In the first\nsample case there is only one clone who may visit vertices in order (2, 1, 3),\nwhich fits the constraint of 6 vertices per clone. In the second sample case\nthe two clones can visited vertices in order (2, 1, 3) and (4, 1, 5), which\nfits the constraint of 5 vertices per clone.\n\n",
        "cf_contest_id": 780,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2 1\r\n2 1\r\n3 1\r\n",
                "5 1 2 1 3 1 \r\n"
            ],
            [
                "5 4 2\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n",
                "5 1 2 1 3 1 \r\n4 4 1 5 1 \r\n"
            ]
        ],
        "private_cases": [
            [
                "3 3 2\r\n1 3\r\n2 1\r\n3 2\r\n",
                "3 1 3 2 \r\n2 3 1 \r\n"
            ],
            [
                "10 30 3\r\n6 5\r\n3 2\r\n7 8\r\n2 6\r\n1 9\r\n3 6\r\n6 5\r\n4 7\r\n3 2\r\n1 9\r\n7 8\r\n8 1\r\n6 7\r\n10 8\r\n8 1\r\n9 6\r\n7 10\r\n3 5\r\n2 10\r\n8 5\r\n7 3\r\n2 1\r\n3 1\r\n4 1\r\n5 1\r\n6 1\r\n7 1\r\n8 1\r\n9 1\r\n10 1\r\n",
                "7 1 9 6 5 3 2 10 \r\n6 8 7 4 7 8 10 \r\n6 2 3 5 6 9 1 \r\n"
            ],
            [
                "20 19 5\r\n2 1\r\n3 1\r\n4 2\r\n5 3\r\n6 3\r\n7 5\r\n8 6\r\n9 2\r\n10 9\r\n11 3\r\n12 11\r\n13 5\r\n14 9\r\n15 7\r\n16 14\r\n17 1\r\n18 17\r\n19 12\r\n20 3\r\n",
                "8 1 2 4 2 9 10 9 14 \r\n8 16 14 9 2 1 3 5 7 \r\n8 15 7 5 13 5 3 6 8 \r\n8 6 3 11 12 19 12 11 3 \r\n7 20 3 1 17 18 17 1 \r\n"
            ],
            [
                "11 10 5\r\n7 3\r\n5 3\r\n4 3\r\n2 3\r\n6 3\r\n8 3\r\n1 3\r\n9 3\r\n11 3\r\n10 3\r\n",
                "5 1 3 7 3 5 \r\n4 3 4 3 2 \r\n4 3 6 3 8 \r\n4 3 9 3 11 \r\n4 3 10 3 1 \r\n"
            ],
            [
                "31 30 10\r\n2 9\r\n21 9\r\n7 2\r\n30 2\r\n19 21\r\n31 21\r\n25 7\r\n11 7\r\n22 30\r\n16 30\r\n28 19\r\n14 19\r\n5 31\r\n1 31\r\n20 25\r\n29 25\r\n3 11\r\n13 11\r\n6 22\r\n23 22\r\n8 16\r\n18 16\r\n15 28\r\n12 28\r\n4 14\r\n17 14\r\n26 5\r\n10 5\r\n27 1\r\n24 1\r\n",
                "7 1 31 21 9 2 7 25 \r\n6 20 25 29 25 7 11 \r\n6 3 11 13 11 7 2 \r\n6 30 22 6 22 23 22 \r\n6 30 16 8 16 18 16 \r\n6 30 2 9 21 19 28 \r\n6 15 28 12 28 19 14 \r\n6 4 14 17 14 19 21 \r\n6 31 5 26 5 10 5 \r\n6 31 1 27 1 24 1 \r\n"
            ],
            [
                "10 9 3\r\n4 10\r\n10 5\r\n5 1\r\n1 6\r\n6 8\r\n8 9\r\n9 2\r\n2 3\r\n3 7\r\n",
                "7 1 5 10 4 10 5 1 \r\n6 6 8 9 2 3 7 \r\n6 3 2 9 8 6 1 \r\n"
            ],
            [
                "10 9 5\r\n5 8\r\n8 4\r\n4 9\r\n9 6\r\n6 1\r\n1 2\r\n2 7\r\n7 3\r\n3 10\r\n",
                "4 1 6 9 4 \r\n4 8 5 8 4 \r\n4 9 6 1 2 \r\n4 7 3 10 3 \r\n3 7 2 1 \r\n"
            ],
            [
                "10 9 7\r\n5 6\r\n6 7\r\n7 3\r\n3 8\r\n8 4\r\n4 2\r\n2 1\r\n1 10\r\n10 9\r\n",
                "3 1 2 4 \r\n3 8 3 7 \r\n3 6 5 6 \r\n3 7 3 8 \r\n3 4 2 1 \r\n2 10 9 \r\n2 10 1 \r\n"
            ],
            [
                "1 0 1\r\n",
                "1 1 \r\n"
            ],
            [
                "1 1 1\r\n1 1\r\n",
                "1 1 \r\n"
            ],
            [
                "2 3 1\r\n1 2\r\n1 1\r\n2 2\r\n",
                "3 1 2 1 \r\n"
            ]
        ]
    }
]