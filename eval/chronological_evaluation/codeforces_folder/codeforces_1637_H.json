[
    {
        "name": "Minimize Inversions Number",
        "description": "You are given a permutation \n    p\n of length \n    n\n. You can choose any\nsubsequence, remove it from the permutation, and insert it at the beginning of\nthe permutation keeping the same order. For every \n    k\n from \n    0\n to\n\n    n\n, find the minimal possible number of inversions in the permutation\nafter you choose a subsequence of length exactly \n    k\n. Input The first line\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 50\n     000\n) \u2014 the\nnumber of test cases. The first line of each test case contains one integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 5 \n    \u00b7 10^5\n) \u2014 the length of the\npermutation. The second line of each test case contains the permutation\n\n    p_1, p_2, \n    \u2026, p_n\n (\n    1 \n    \u2264 p_i \n    \u2264 n\n). It is guaranteed\nthat the total sum of \n    n\n doesn't exceed \n    5 \n    \u00b7 10^5\n. Output For\neach test case output \n    n + 1\n integers. The \n    i\n-th of them must be the\nanswer for the subsequence length of \n    i - 1\n. Example Input 3 1 1 4 4 2 1\n3 5 5 1 3 2 4 Output 0 0 4 2 2 1 4 5 4 2 2 1 5 Note In the second test case:\nFor the length \n    0\n: \n    [4, 2, 1, 3] \n    \u2192 [4, 2, 1, 3]\n: \n    4\n\ninversions. For the length \n    1\n: \n    [4, 2, \n    1, 3] \n    \u2192\n    [1, 4, 2, 3]\n: \n    2\n inversions. For the length \n    2\n: \n    [4,\n    \n    2, \n    1, 3] \n    \u2192 [2, 1, 4, 3]\n, or \n    [4, 2,\n    \n    1, \n    3] \n    \u2192 [1, 3, 4, 2]\n: \n    2\n inversions.\nFor the length \n    3\n: \n    [4, \n    2, \n    1, \n    3]\n    \n    \u2192 [2, 1, 3, 4]\n: \n    1\n inversion. For the length \n    4\n:\n\n    [\n    4, \n    2, \n    1, \n    3] \n    \u2192 [4,\n    2, 1, 3]\n: \n    4\n inversions.\n\n",
        "cf_contest_id": 1637,
        "cf_index": "H",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1\r\n1\r\n4\r\n4 2 1 3\r\n5\r\n5 1 3 2 4\r\n",
                "0 0\r\n4 2 2 1 4\r\n5 4 2 2 1 5\r\n"
            ]
        ],
        "private_cases": []
    }
]