[
    {
        "name": "Unmerge",
        "description": "Let \n    a\n and \n    b\n be two arrays of lengths \n    n\n and \n    m\n,\nrespectively, with no elements in common. We can define a new array\n\n    merge(a,b)\n of length \n    n+m\n recursively as follows: If one\nof the arrays is empty, the result is the other array. That is,\n\n    merge(\n    \u2205,b)=b\n and\n\n    merge(a,\n    \u2205)=a\n. In particular,\n\n    merge(\n    \u2205,\n    \u2205)=\n    \u2205\n. If both arrays\nare non-empty, and \n    a_1b_1\n, then\n\n    merge(a,b)=[b_1]+\n    merge(a,[b_2,\n    \u2026,b_m])\n. That\nis, we delete the first element \n    b_1\n of \n    b\n, merge the remaining\narrays, then add \n    b_1\n to the beginning of the result. This algorithm has\nthe nice property that if \n    a\n and \n    b\n are sorted, then\n\n    merge(a,b)\n will also be sorted. For example, it is used as a\nsubroutine in merge-sort. For this problem, however, we will consider the same\nprocedure acting on non-sorted arrays as well. For example, if \n    a=[3,1]\n\nand \n    b=[2,4]\n, then \n    merge(a,b)=[2,3,1,4]\n. A permutation\nis an array consisting of \n    n\n distinct integers from \n    1\n to \n    n\n in\narbitrary order. For example, \n    [2,3,1,5,4]\n is a permutation, but\n\n    [1,2,2]\n is not a permutation (\n    2\n appears twice in the array) and\n\n    [1,3,4]\n is also not a permutation (\n    n=3\n but there is \n    4\n in the\narray). There is a permutation \n    p\n of length \n    2n\n. Determine if there\nexist two arrays \n    a\n and \n    b\n, each of length \n    n\n and with no\nelements in common, so that \n    p=\n    merge(a,b)\n. Input The first\nline contains a single integer \n    t\n (\n    1\n    \u2264 t\n    \u2264 1000\n) \u2014 the number\nof test cases. Next \n    2t\n lines contain descriptions of test cases. The\nfirst line of each test case contains a single integer \n    n\n (\n    1\n    \u2264\n    n\n    \u2264 2000\n). The second line of each test case contains \n    2n\n integers\n\n    p_1,\n    \u2026,p_2n\n (\n    1\n    \u2264 p_i\n    \u2264 2n\n). It is guaranteed that\n\n    p\n is a permutation. It is guaranteed that the sum of \n    n\n across all\ntest cases does not exceed \n    2000\n. Output For each test case, output \"YES\"\nif there exist arrays \n    a\n, \n    b\n, each of length \n    n\n and with no\ncommon elements, so that \n    p=\n    merge(a,b)\n. Otherwise, output\n\"NO\". Example Input 6 2 2 3 1 4 2 3 1 2 4 4 3 2 6 1 5 7 8 4 3 1 2 3 4 5 6 4 6\n1 3 7 4 5 8 2 6 4 3 2 5 1 11 9 12 8 6 10 7 Output YES NO YES YES NO NO Note In\nthe first test case, \n    [2,3,1,4]=\n    merge([3,1],[2,4])\n. In the\nsecond test case, we can show that \n    [3,1,2,4]\n is not the merge of two\narrays of length \n    2\n. In the third test case,\n\n    [3,2,6,1,5,7,8,4]=\n    merge([3,2,8,4],[6,1,5,7])\n. In the fourth\ntest case, \n    [1,2,3,4,5,6]=\n    merge([1,3,6],[2,4,5])\n, for example.\n\n",
        "cf_contest_id": 1381,
        "cf_index": "B",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "dp"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n2\r\n2 3 1 4\r\n2\r\n3 1 2 4\r\n4\r\n3 2 6 1 5 7 8 4\r\n3\r\n1 2 3 4 5 6\r\n4\r\n6 1 3 7 4 5 8 2\r\n6\r\n4 3 2 5 1 11 9 12 8 6 10 7\r\n",
                "YES NO YES YES NO NO "
            ]
        ],
        "private_cases": [
            [
                "1\r\n9\r\n2 1 4 3 7 6 5 10 9 8 13 12 11 18 17 16 15 14\r\n",
                "YES "
            ],
            [
                "1\r\n16\r\n27 1 28 2 29 3 4 5 6 7 30 8 9 10 11 12 13 31 14 15 16 17 18 19 32 20 21 22 23 24 25 26\r\n",
                "YES "
            ]
        ]
    }
]