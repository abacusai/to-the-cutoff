[
    {
        "name": "Monsters",
        "description": "There is an undirected graph with \n    n\n vertices and \n    m\n edges.\nInitially, for each vertex \n    i\n, there is a monster with danger \n    a_i\n\non that vertex. For a monster with danger \n    a_i\n, you can defeat it if\nand only if you have defeated at least \n    a_i\n other monsters before. Now\nyou want to defeat all the monsters. First, you choose some vertex \n    s\n and\ndefeat the monster on that vertex (since you haven't defeated any monsters\nbefore, \n    a_s\n has to be \n    0\n). Then, you can move through the edges.\nIf you want to move from vertex \n    u\n to vertex \n    v\n, then the following\nmust hold: either the monster on vertex \n    v\n has been defeated before, or\nyou can defeat it now. For the second case, you defeat the monster on vertex\n\n    v\n and reach vertex \n    v\n. You can pass the vertices and the edges any\nnumber of times. Determine whether you can defeat all the monsters or not.\nInput Each test contains multiple test cases. The first line contains a single\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. Their\ndescription follows. The first line of each test case contains two integers\n\n    n\n, \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of\nvertices and edges in the graph respectively. The second line of each test\ncase contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264\n    a_i\n    \u2264 n\n) \u2014 the dangers of monsters on corresponding vertices. For the\nfollowing \n    m\n lines, each line contains two integers \n    u\n, \n    v\n\n(\n    1 \n    \u2264 u, v \n    \u2264 n\n), describing an edge connecting vertex \n    u\n and\nvertex \n    v\n. It is guaranteed that there are no multi-edges or self-loops\nin the graph. It is guaranteed that both the sum of \n    n\n and the sum of\n\n    m\n over all test cases do not exceed \n    2 \n    \u00b7 10^5\n. Output For\neach test case, output \"YES\" if you can defeat all the monsters, or \"NO\"\notherwise. You can output the answer in any case (upper or lower). For\nexample, the strings \"yEs\", \"yes\", \"Yes\", and \"YES\" will be recognized as\npositive responses. Example Input 5 4 3 2 1 0 3 1 2 2 3 3 4 6 6 0 1 2 3 0 1 1\n2 2 3 3 4 4 5 4 6 5 6 4 3 0 1 2 0 1 2 2 3 1 3 4 6 1 1 1 0 1 2 3 2 4 3 2 4 4 1\n1 3 5 5 0 1 3 2 0 1 2 2 3 3 4 4 5 3 5 Output YES YES NO YES NO Note In the\nfirst test case, you can start at vertex \n    3\n and defeat the monster on it,\nbefore you go to vertices \n    2\n, \n    1\n in this order, defeating the\nmonsters on them as well. Then you return to vertex \n    3\n, and go to vertex\n\n    4\n, defeating the monster on it. In the third test case, there is no path\nto vertex \n    4\n if you start at vertex \n    1\n. Also, there is no path to\nvertices \n    1\n, \n    2\n, and \n    3\n if you start at vertex \n    4\n.\n\n",
        "cf_contest_id": 1810,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n4 3\r\n2 1 0 3\r\n1 2\r\n2 3\r\n3 4\r\n6 6\r\n0 1 2 3 0 1\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n4 6\r\n5 6\r\n4 3\r\n0 1 2 0\r\n1 2\r\n2 3\r\n1 3\r\n4 6\r\n1 1 1 0\r\n1 2\r\n3 2\r\n4 3\r\n2 4\r\n4 1\r\n1 3\r\n5 5\r\n0 1 3 2 0\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n3 5\r\n",
                "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n30 49\r\n0 8 1 3 0 1 0 7 0 4 4 1 15 0 0 0 1 1 0 3 0 0 0 2 0 1 1 0 2 1\r\n13 17\r\n13 15\r\n30 13\r\n20 13\r\n8 13\r\n13 18\r\n13 12\r\n3 13\r\n26 13\r\n9 13\r\n13 4\r\n24 13\r\n28 13\r\n8 3\r\n1 8\r\n8 14\r\n8 29\r\n8 17\r\n8 30\r\n22 8\r\n8 19\r\n8 4\r\n4 19\r\n4 14\r\n3 4\r\n19 17\r\n14 3\r\n3 25\r\n30 10\r\n29 10\r\n1 10\r\n22 30\r\n29 5\r\n29 26\r\n1 26\r\n2 27\r\n12 2\r\n20 28\r\n9 20\r\n28 27\r\n6 9\r\n21 6\r\n11 15\r\n12 11\r\n7 18\r\n15 18\r\n16 24\r\n12 24\r\n23 12\r\n",
                "YES\r\n"
            ],
            [
                "1\r\n30 37\r\n1 16 7 0 0 0 2 0 0 0 0 1 1 4 3 1 3 0 0 1 0 4 8 2 0 1 1 0 1 0\r\n2 13\r\n2 29\r\n8 3\r\n7 3\r\n11 3\r\n9 3\r\n19 15\r\n15 8\r\n15 30\r\n19 13\r\n16 30\r\n16 8\r\n14 4\r\n14 27\r\n4 26\r\n11 7\r\n9 7\r\n27 7\r\n27 9\r\n23 10\r\n6 23\r\n17 18\r\n12 17\r\n20 17\r\n17 5\r\n18 20\r\n5 12\r\n12 10\r\n22 21\r\n22 29\r\n24 22\r\n21 1\r\n1 28\r\n24 25\r\n6 24\r\n29 24\r\n6 29\r\n",
                "NO\r\n"
            ]
        ]
    }
]