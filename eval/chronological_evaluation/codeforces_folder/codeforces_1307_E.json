[
    {
        "name": "Cow and Treats",
        "description": "After a successful year of milk production, Farmer John is rewarding his cows\nwith their favorite treat: tasty grass! On the field, there is a row of\n\n    n\n units of grass, each with a sweetness \n    s_i\n. Farmer John has\n\n    m\n cows, each with a favorite sweetness \n    f_i\n and a hunger value\n\n    h_i\n. He would like to pick two disjoint subsets of cows to line up on\nthe left and right side of the grass row. There is no restriction on how many\ncows must be on either side. The cows will be treated in the following manner:\nThe cows from the left and right side will take turns feeding in an order\ndecided by Farmer John. When a cow feeds, it walks towards the other end\nwithout changing direction and eats grass of its favorite sweetness until it\neats \n    h_i\n units. The moment a cow eats \n    h_i\n units, it will fall\nasleep there, preventing further cows from passing it from both directions. If\nit encounters another sleeping cow or reaches the end of the grass row, it\nwill get upset. Farmer John absolutely does not want any cows to get upset.\nNote that grass does not grow back. Also, to prevent cows from getting upset,\nnot every cow has to feed since FJ can choose a subset of them. Surprisingly,\nFJ has determined that sleeping cows are the most satisfied. If FJ orders\noptimally, what is the maximum number of sleeping cows that can result, and\nhow many ways can FJ choose the subset of cows on the left and right side to\nachieve that maximum number of sleeping cows (modulo \n    10^9+7\n)? The order\nin which FJ sends the cows does not matter as long as no cows get upset. Input\nThe first line contains two integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n \n    \u2264\n    5000\n, \n    1 \n    \u2264 m \n    \u2264 5000\n) \u2014 the number of units of grass and the\nnumber of cows. The second line contains \n    n\n integers \n    s_1, s_2,\n    \n    \u2026, s_n\n (\n    1 \n    \u2264 s_i \n    \u2264 n\n) \u2014 the sweetness values of the\ngrass. The \n    i\n-th of the following \n    m\n lines contains two integers\n\n    f_i\n and \n    h_i\n (\n    1 \n    \u2264 f_i, h_i \n    \u2264 n\n) \u2014 the favorite\nsweetness and hunger value of the \n    i\n-th cow. No two cows have the same\nhunger and favorite sweetness simultaneously. Output Output two integers \u2014 the\nmaximum number of sleeping cows that can result and the number of ways modulo\n\n    10^9+7\n. Examples Input 5 2 1 1 1 1 1 1 2 1 3 Output 2 2 Input 5 2 1 1 1\n1 1 1 2 1 4 Output 1 4 Input 3 2 2 3 2 3 1 2 1 Output 2 4 Input 5 1 1 1 1 1 1\n2 5 Output 0 1 Note In the first example, FJ can line up the cows as follows\nto achieve \n    2\n sleeping cows: Cow \n    1\n is lined up on the left side and\ncow \n    2\n is lined up on the right side. Cow \n    2\n is lined up on the left\nside and cow \n    1\n is lined up on the right side. In the second example, FJ\ncan line up the cows as follows to achieve \n    1\n sleeping cow: Cow \n    1\n\nis lined up on the left side. Cow \n    2\n is lined up on the left side. Cow\n\n    1\n is lined up on the right side. Cow \n    2\n is lined up on the right\nside. In the third example, FJ can line up the cows as follows to achieve\n\n    2\n sleeping cows: Cow \n    1\n and \n    2\n are lined up on the left side.\nCow \n    1\n and \n    2\n are lined up on the right side. Cow \n    1\n is lined\nup on the left side and cow \n    2\n is lined up on the right side. Cow \n    1\n\nis lined up on the right side and cow \n    2\n is lined up on the left side. In\nthe fourth example, FJ cannot end up with any sleeping cows, so there will be\nno cows lined up on either side.\n\n",
        "cf_contest_id": 1307,
        "cf_index": "E",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "combinatorics",
            "dp",
            "greedy",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 2\r\n1 1 1 1 1\r\n1 2\r\n1 3\r\n",
                "2 2\r\n"
            ],
            [
                "5 2\r\n1 1 1 1 1\r\n1 2\r\n1 4\r\n",
                "1 4\r\n"
            ],
            [
                "3 2\r\n2 3 2\r\n3 1\r\n2 1\r\n",
                "2 4\r\n"
            ],
            [
                "5 1\r\n1 1 1 1 1\r\n2 5\r\n",
                "0 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 1\r\n1 3 2\r\n2 1\r\n",
                "1 2\r\n"
            ],
            [
                "5 2\r\n1 1 1 1 1\r\n1 1\r\n1 3\r\n",
                "2 2\r\n"
            ],
            [
                "5 1\r\n1 1 1 1 1\r\n1 5\r\n",
                "1 2\r\n"
            ],
            [
                "5 5\r\n1 1 1 1 1\r\n1 1\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n",
                "2 8\r\n"
            ],
            [
                "6 4\r\n1 1 1 2 2 2\r\n1 1\r\n1 2\r\n2 1\r\n2 2\r\n",
                "3 8\r\n"
            ],
            [
                "1 1\r\n1\r\n1 1\r\n",
                "1 2\r\n"
            ],
            [
                "2 1\r\n2 2\r\n1 1\r\n",
                "0 1\r\n"
            ],
            [
                "5 1\r\n1 2 3 2 1\r\n1 2\r\n",
                "1 2\r\n"
            ],
            [
                "20 8\r\n7 4 9 6 4 10 5 12 6 13 20 16 11 1 12 10 11 2 3 18\r\n6 1\r\n20 4\r\n10 6\r\n2 9\r\n10 17\r\n13 19\r\n1 5\r\n3 1\r\n",
                "2 3\r\n"
            ],
            [
                "2 1\r\n1 1\r\n1 1\r\n",
                "1 2\r\n"
            ],
            [
                "5 1\r\n1 1 1 1 1\r\n1 3\r\n",
                "1 2\r\n"
            ]
        ]
    }
]