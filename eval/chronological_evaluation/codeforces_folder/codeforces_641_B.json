[
    {
        "name": "Little Artem and Matrix",
        "description": "Little Artem likes electronics. He can spend lots of time making different\nschemas and looking for novelties in the nearest electronics store. The new\ncontrol element was delivered to the store recently and Artem immediately\nbought it. That element can store information about the matrix of integers\nsize n \u00d7 m. There are n + m inputs in that element, i.e. each row and each\ncolumn can get the signal. When signal comes to the input corresponding to\nsome row, this row cyclically shifts to the left, that is the first element of\nthe row becomes last element, second element becomes first and so on. When\nsignal comes to the input corresponding to some column, that column shifts\ncyclically to the top, that is first element of the column becomes last\nelement, second element becomes first and so on. Rows are numbered with\nintegers from 1 to n from top to bottom, while columns are numbered with\nintegers from 1 to m from left to right. Artem wants to carefully study this\nelement before using it. For that purpose he is going to set up an experiment\nconsisting of q turns. On each turn he either sends the signal to some input\nor checks what number is stored at some position of the matrix. Artem has\ncompleted his experiment and has written down the results, but he has lost the\nchip! Help Artem find any initial matrix that will match the experiment\nresults. It is guaranteed that experiment data is consistent, which means at\nleast one valid matrix exists. Input The first line of the input contains\nthree integers n, m and q (1 \u2264 n, m \u2264 100, 1 \u2264 q \u2264 10 000) \u2014 dimensions of the\nmatrix and the number of turns in the experiment, respectively. Next q lines\ncontain turns descriptions, one per line. Each description starts with an\ninteger ti (1 \u2264 ti \u2264 3) that defines the type of the operation. For the\noperation of first and second type integer ri (1 \u2264 ri \u2264 n) or ci (1 \u2264 ci \u2264 m)\nfollows, while for the operations of the third type three integers ri, ci and\nxi (1 \u2264 ri \u2264 n, 1 \u2264 ci \u2264 m, - 10^9 \u2264 xi \u2264 10^9) are given. Operation of the\nfirst type (ti = 1) means that signal comes to the input corresponding to row\nri, that is it will shift cyclically. Operation of the second type (ti = 2)\nmeans that column ci will shift cyclically. Finally, operation of the third\ntype means that at this moment of time cell located in the row ri and column\nci stores value xi. Output Print the description of any valid initial matrix\nas n lines containing m integers each. All output integers should not exceed\n10^9 by their absolute value. If there are multiple valid solutions, output\nany of them. Examples Input 2 2 6 2 1 2 2 3 1 1 1 3 2 2 2 3 1 2 8 3 2 1 8\nOutput 8 2 1 8 Input 3 3 2 1 2 3 2 2 5 Output 0 0 0 0 0 5 0 0 0\n\n",
        "cf_contest_id": 641,
        "cf_index": "B",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 2 6\r\n2 1\r\n2 2\r\n3 1 1 1\r\n3 2 2 2\r\n3 1 2 8\r\n3 2 1 8\r\n",
                "8 2\r\n1 8\r\n"
            ],
            [
                "3 3 2\r\n1 2\r\n3 2 2 5\r\n",
                "0 0 0\r\n0 0 5\r\n0 0 0\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 5 1\r\n1 5\r\n",
                "0 0 0 0 0\r\n0 0 0 0 0\r\n0 0 0 0 0\r\n0 0 0 0 0\r\n0 0 0 0 0\r\n"
            ],
            [
                "1 1 3\r\n1 1\r\n2 1\r\n3 1 1 1000000000\r\n",
                "1000000000\r\n"
            ],
            [
                "1 1 3\r\n1 1\r\n2 1\r\n3 1 1 -1000000000\r\n",
                "-1000000000\r\n"
            ],
            [
                "2 2 6\r\n2 1\r\n2 2\r\n3 1 1 -1\r\n3 2 2 -1\r\n3 1 2 -1\r\n3 2 1 -1\r\n",
                "-1 -1\r\n-1 -1\r\n"
            ],
            [
                "1 4 5\r\n1 1\r\n3 1 1 1\r\n3 1 2 2\r\n3 1 3 3\r\n3 1 4 4\r\n",
                "4 1 2 3\r\n"
            ],
            [
                "4 2 5\r\n2 1\r\n3 1 1 5\r\n3 2 1 6\r\n3 3 1 7\r\n3 4 1 9\r\n",
                "9 0\r\n5 0\r\n6 0\r\n7 0\r\n"
            ],
            [
                "3 10 2\r\n1 2\r\n3 2 7 5\r\n",
                "0 0 0 0 0 0 0 0 0 0\r\n0 0 0 0 0 0 0 5 0 0\r\n0 0 0 0 0 0 0 0 0 0\r\n"
            ],
            [
                "1 2 2\r\n1 1\r\n3 1 2 15\r\n",
                "15 0\r\n"
            ]
        ]
    }
]