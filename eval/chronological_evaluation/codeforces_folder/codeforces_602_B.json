[
    {
        "name": "Approximating a Constant Range",
        "description": "When Xellos was doing a practice course in university, he once had to measure\nthe intensity of an effect that slowly approached equilibrium. A good way to\ndetermine the equilibrium intensity would be choosing a sufficiently large\nnumber of consecutive data points that seems as constant as possible and\ntaking their average. Of course, with the usual sizes of data, it's nothing\nchallenging \u2014 but why not make a similar programming contest problem while\nwe're at it? You're given a sequence of n data points a1, ..., an. There\naren't any big jumps between consecutive data points \u2014 for each 1 \u2264 i < n,\nit's guaranteed that |ai + 1 - ai| \u2264 1. A range [l, r] of data points is said\nto be almost constant if the difference between the largest and the smallest\nvalue in that range is at most 1. Formally, let M be the maximum and m the\nminimum value of ai for l \u2264 i \u2264 r; the range [l, r] is almost constant if M -\nm \u2264 1. Find the length of the longest almost constant range. Input The first\nline of the input contains a single integer n (2 \u2264 n \u2264 100 000) \u2014 the number\nof data points. The second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264\n100 000). Output Print a single number \u2014 the maximum length of an almost\nconstant range of the given sequence. Examples Input 5 1 2 3 3 2 Output 4\nInput 11 5 4 5 5 6 7 8 8 8 7 6 Output 5 Note In the first sample, the longest\nalmost constant range is [2, 5]; its length (the number of data points in it)\nis 4. In the second sample, there are three almost constant ranges of length\n4: [1, 4], [6, 9] and [7, 10]; the only almost constant range of the maximum\nlength 5 is [6, 10].\n\n",
        "cf_contest_id": 602,
        "cf_index": "B",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "implementation",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 2 3 3 2\r\n",
                "4"
            ],
            [
                "11\r\n5 4 5 5 6 7 8 8 8 7 6\r\n",
                "5"
            ]
        ],
        "private_cases": [
            [
                "2\r\n3 2\r\n",
                "2"
            ],
            [
                "4\r\n1001 1000 1000 1001\r\n",
                "4"
            ],
            [
                "4\r\n1 1 2 3\r\n",
                "3"
            ],
            [
                "3\r\n1 2 1\r\n",
                "3"
            ],
            [
                "3\r\n1 2 3\r\n",
                "2"
            ],
            [
                "18\r\n10 9 8 7 6 5 4 3 2 1 2 3 4 5 6 7 8 9\r\n",
                "3"
            ],
            [
                "3\r\n1 2 2\r\n",
                "3"
            ],
            [
                "4\r\n10 9 10 9\r\n",
                "4"
            ],
            [
                "4\r\n4 3 2 3\r\n",
                "3"
            ],
            [
                "4\r\n8 8 7 7\r\n",
                "4"
            ],
            [
                "3\r\n99998 99999 100000\r\n",
                "2"
            ],
            [
                "3\r\n100000 99999 99998\r\n",
                "2"
            ],
            [
                "3\r\n1 1 1\r\n",
                "3"
            ],
            [
                "2\r\n99999 100000\r\n",
                "2"
            ],
            [
                "2\r\n100000 100000\r\n",
                "2"
            ],
            [
                "2\r\n1 1\r\n",
                "2"
            ],
            [
                "15\r\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\r\n",
                "15"
            ]
        ]
    }
]