[
    {
        "name": "Unambiguous Arithmetic Expression",
        "description": "Let's define an unambiguous arithmetic expression (UAE) as follows. All non-\nnegative integers are UAE's. Integers may have leading zeroes (for example,\n0000 and 0010 are considered valid integers). If X and Y are two UAE's, then\n\"(X) + (Y)\", \"(X) - (Y)\", \"(X) * (Y)\", and \"(X) / (Y)\" (all without the double\nquotes) are UAE's. If X is an UAE, then \" - (X)\" and \" + (X)\" (both without\nthe double quotes) are UAE's.You are given a string consisting only of digits\n(\"0\" - \"9\") and characters \"-\", \"+\", \"*\", and \"/\". Your task is to compute the\nnumber of different possible unambiguous arithmetic expressions such that if\nall brackets (characters \"(\" and \")\") of that unambiguous arithmetic\nexpression are removed, it becomes the input string. Since the answer may be\nvery large, print it modulo 1000003 (10^6 + 3). Input The first line is a non-\nempty string consisting of digits ('0'-'9') and characters '-', '+', '*',\nand/or '/'. Its length will not exceed 2000. The line doesn't contain any\nspaces. Output Print a single integer representing the number of different\nunambiguous arithmetic expressions modulo 1000003 (10^6 + 3) such that if all\nits brackets are removed, it becomes equal to the input string (character-by-\ncharacter). Examples Input 1+2*3 Output 2 Input 03+-30+40 Output 3 Input 5//4\nOutput 0 Input 5/0 Output 1 Input 1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1\nOutput 100728 Note For the first example, the two possible unambiguous\narithmetic expressions are: ((1) + (2)) * (3) (1) + ((2) * (3))For the second\nexample, the three possible unambiguous arithmetic expressions are: (03) + ((\n- (30)) + (40)) (03) + ( - ((30) + (40))) ((03) + ( - (30))) + (40)\n\n",
        "cf_contest_id": 115,
        "cf_index": "D",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "expression parsing"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1+2*3\r\n",
                "2"
            ],
            [
                "03+-30+40\r\n",
                "3"
            ],
            [
                "5//4\r\n",
                "0\r\n"
            ],
            [
                "5/0\r\n",
                "1"
            ],
            [
                "1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1\r\n",
                "100728"
            ]
        ],
        "private_cases": [
            [
                "1-2-3\r\n",
                "2"
            ],
            [
                "1*2/3-4+5\r\n",
                "14"
            ],
            [
                "1--1\r\n",
                "1"
            ],
            [
                "1+1*1/1-1+1*1/1-1+1*1/1-1+1*1/1-1+1*1/1-1+1*1/1-1+1*1/1-1+1*1/1-1+1*1/1-1+1*1/1-1+1*1/1-1+1*1/1-1+1*1/1-1+1*1/1-1+1*1/1-1\r\n",
                "552758"
            ],
            [
                "3\r\n",
                "1"
            ],
            [
                "0-5\r\n",
                "1"
            ],
            [
                "0\r\n",
                "1"
            ],
            [
                "*\r\n",
                "0\r\n"
            ],
            [
                "/\r\n",
                "0\r\n"
            ],
            [
                "+\r\n",
                "0"
            ],
            [
                "-\r\n",
                "0"
            ],
            [
                "+1\r\n",
                "1"
            ],
            [
                "+1+\r\n",
                "0"
            ],
            [
                "1+\r\n",
                "0"
            ],
            [
                "++1\r\n",
                "1"
            ],
            [
                "72-5*-2\r\n",
                "2"
            ],
            [
                "28/-++++7/++2+-0\r\n",
                "49"
            ],
            [
                "-6-+5/+6-5*+-++-64/9+-40/--8/5/+-4/3\r\n",
                "579323"
            ],
            [
                "-51---857*60/3+--++7-4-+9+-118/2/+--08/3*1--7--29/70*4-+1/754+-+2-+-146/312-8*0*9\r\n",
                "552087"
            ],
            [
                "+--+-1+--+--6-6794*9*92-8+6*8*4-1*8+--++0-3-++133/+-02/-27/7*+18*2*+71994--1*+6+59*66-+0/4++68-1*---40---+9+9*--8-+8+8+-7/46-1+8/3*+2/4+++30--6+47*4/2+7+9+7833-44*--3*+-+2-++72/3/48\r\n",
                "453893"
            ],
            [
                "-7/01/1-12-2-7+--97*07*-2-+5/+91----4*4-8/-6-60*---0*44*+1/2---1+86-526*90*1*+27/4/55/0/+-8*+-0*+8+4++1+52/-++-+++++7*+92/-822/8++++212-0+7-+++++7---6*+0-03/---+---2+3*-1*5/-+-7*9/263+16/8*6*2+-0-448+4----54/08/7*0*--+67+5/8*1*6-2*3+16/5+12+5-7----79245*+---8-1/+615*7*7--6*+9/3+-5/959*-99-2/-+8*3/3/8/+6/-112093*--70+-+2/6+-5*3++++++8*95+7+0-6/---7-4-8-5/4*--+421+2*+671-97/-9/+-62/8-+5-20+58/5-4+-1--6\r\n",
                "280775"
            ],
            [
                "1/2/3/4/5/6/7/8/9/10/11/12/13/14/15/16/17*18*19*20*+21*-31+-41/-5/+1*+1*-2/+3/-4-+1--4+-3++6/2/3/4/5/6/7\r\n",
                "873123"
            ],
            [
                "1/2/3/*4\r\n",
                "0\r\n"
            ],
            [
                "4/5/6*/7/6/4/3\r\n",
                "0\r\n"
            ],
            [
                "3/4/5/6+/2/1/3\r\n",
                "0\r\n"
            ],
            [
                "1-/1\r\n",
                "0\r\n"
            ],
            [
                "1-*1\r\n",
                "0\r\n"
            ],
            [
                "1*-1\r\n",
                "1"
            ],
            [
                "1+/1\r\n",
                "0\r\n"
            ],
            [
                "1+*1\r\n",
                "0\r\n"
            ],
            [
                "------5\r\n",
                "1"
            ]
        ]
    }
]