[
    {
        "name": "Vanya and Food Processor",
        "description": "Vanya smashes potato in a vertical food processor. At each moment of time the\nheight of the potato in the processor doesn't exceed h and the processor\nsmashes k centimeters of potato each second. If there are less than k\ncentimeters remaining, than during this second processor smashes all the\nremaining potato. Vanya has n pieces of potato, the height of the i-th piece\nis equal to ai. He puts them in the food processor one by one starting from\nthe piece number 1 and finishing with piece number n. Formally, each second\nthe following happens: If there is at least one piece of potato remaining,\nVanya puts them in the processor one by one, until there is not enough space\nfor the next piece. Processor smashes k centimeters of potato (or just\neverything that is inside). Provided the information about the parameter of\nthe food processor and the size of each potato in a row, compute how long will\nit take for all the potato to become smashed. Input The first line of the\ninput contains integers n, h and k (1 \u2264 n \u2264 100 000, 1 \u2264 k \u2264 h \u2264 10^9) \u2014 the\nnumber of pieces of potato, the height of the food processor and the amount of\npotato being smashed each second, respectively. The second line contains n\nintegers ai (1 \u2264 ai \u2264 h) \u2014 the heights of the pieces. Output Print a single\ninteger \u2014 the number of seconds required to smash all the potatoes following\nthe process described in the problem statement. Examples Input 5 6 3 5 4 3 2 1\nOutput 5 Input 5 6 3 5 5 5 5 5 Output 10 Input 5 6 3 1 2 1 1 1 Output 2 Note\nConsider the first sample. First Vanya puts the piece of potato of height 5\ninto processor. At the end of the second there is only amount of height 2\nremaining inside. Now Vanya puts the piece of potato of height 4. At the end\nof the second there is amount of height 3 remaining. Vanya puts the piece of\nheight 3 inside and again there are only 3 centimeters remaining at the end of\nthis second. Vanya finally puts the pieces of height 2 and 1 inside. At the\nend of the second the height of potato in the processor is equal to 3. During\nthis second processor finally smashes all the remaining potato and the process\nfinishes. In the second sample, Vanya puts the piece of height 5 inside and\nwaits for 2 seconds while it is completely smashed. Then he repeats the same\nprocess for 4 other pieces. The total time is equal to 2\u00b75 = 10 seconds. In\nthe third sample, Vanya simply puts all the potato inside the processor and\nwaits 2 seconds.\n\n",
        "cf_contest_id": 677,
        "cf_index": "B",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 6 3\r\n5 4 3 2 1\r\n",
                "5\r\n"
            ],
            [
                "5 6 3\r\n5 5 5 5 5\r\n",
                "10\r\n"
            ],
            [
                "5 6 3\r\n1 2 1 1 1\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 100 80\r\n76 75 73 71 76 74 73 70 78 75\r\n",
                "10\r\n"
            ],
            [
                "10 100 88\r\n11 23 69 6 71 15 25 1 43 37\r\n",
                "5\r\n"
            ],
            [
                "10 100 81\r\n100 97 96 98 98 95 100 97 97 99\r\n",
                "20\r\n"
            ],
            [
                "10 1000000000 34\r\n262467899 490831561 793808758 450543931 364178715 95212706 14245051 92006075 424282318 436927280\r\n",
                "100720715\r\n"
            ],
            [
                "10 1000000000 6\r\n510204596 367062507 635978332 260764751 339143281 377447788 893030825 977110226 643733983 575665576\r\n",
                "930023645\r\n"
            ],
            [
                "1 1 1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "1 1000000000 1000000000\r\n1000000000\r\n",
                "1\r\n"
            ],
            [
                "1 1000000000 1\r\n1000000000\r\n",
                "1000000000\r\n"
            ],
            [
                "6 1000000000 1\r\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\r\n",
                "6000000000\r\n"
            ],
            [
                "20 1000000000 1\r\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\r\n",
                "20000000000\r\n"
            ],
            [
                "5 1000000000 1\r\n1000000000 1000000000 1000000000 1000000000 1000000000\r\n",
                "5000000000\r\n"
            ],
            [
                "10 1000000000 1\r\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\r\n",
                "10000000000\r\n"
            ],
            [
                "4 1000000000 1\r\n1000000000 1000000000 1000000000 1000000000\r\n",
                "4000000000\r\n"
            ],
            [
                "10 1000000000 1\r\n999999999 999999999 999999999 999999999 999999999 999999999 999999999 999999999 999999999 999999999\r\n",
                "9999999990\r\n"
            ],
            [
                "3 1000000000 1\r\n1000000000 1000000000 1000000000\r\n",
                "3000000000\r\n"
            ],
            [
                "25 1000000000 1\r\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\r\n",
                "25000000000\r\n"
            ],
            [
                "10 900000000 1\r\n900000000 900000000 900000000 900000000 900000000 900000000 900000000 900000000 900000000 900000000\r\n",
                "9000000000\r\n"
            ],
            [
                "2 1000000000 1\r\n1000000000 1000000000\r\n",
                "2000000000\r\n"
            ],
            [
                "3 1000000000 1\r\n1000000000 1000000000 1\r\n",
                "2000000001\r\n"
            ],
            [
                "3 1000000000 1\r\n999999999 999999999 999999999\r\n",
                "2999999997\r\n"
            ]
        ]
    }
]