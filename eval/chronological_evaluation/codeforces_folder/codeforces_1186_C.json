[
    {
        "name": "Vus the Cossack and Strings",
        "description": "Vus the Cossack has two binary strings, that is, strings that consist only of\n\"0\" and \"1\". We call these strings \n    a\n and \n    b\n. It is known that\n\n    |b| \n    \u2264 |a|\n, that is, the length of \n    b\n is at most the length of\n\n    a\n. The Cossack considers every substring of length \n    |b|\n in string\n\n    a\n. Let's call this substring \n    c\n. He matches the corresponding\ncharacters in \n    b\n and \n    c\n, after which he counts the number of\npositions where the two strings are different. We call this function \n    f(b,\n    c)\n. For example, let \n    b = 00110\n, and \n    c = 11000\n. In these\nstrings, the first, second, third and fourth positions are different. Vus the\nCossack counts the number of such substrings \n    c\n such that \n    f(b, c)\n\nis even. For example, let \n    a = 01100010\n and \n    b = 00110\n. \n    a\n has\nfour substrings of the length \n    |b|\n: \n    01100\n, \n    11000\n,\n\n    10001\n, \n    00010\n. \n    f(00110, 01100) = 2\n; \n    f(00110, 11000) =\n    4\n; \n    f(00110, 10001) = 4\n; \n    f(00110, 00010) = 1\n. Since in three\nsubstrings, \n    f(b, c)\n is even, the answer is \n    3\n. Vus can not find the\nanswer for big strings. That is why he is asking you to help him. Input The\nfirst line contains a binary string \n    a\n (\n    1 \n    \u2264 |a| \n    \u2264 10^6\n) \u2014\nthe first string. The second line contains a binary string \n    b\n (\n    1\n    \n    \u2264 |b| \n    \u2264 |a|\n) \u2014 the second string. Output Print one number \u2014 the\nanswer. Examples Input 01100010 00110 Output 3 Input 1010111110 0110 Output 4\nNote The first example is explained in the legend. In the second example,\nthere are five substrings that satisfy us: \n    1010\n, \n    0101\n, \n    1111\n,\n\n    1111\n.\n\n",
        "cf_contest_id": 1186,
        "cf_index": "C",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "01100010\r\n00110\r\n",
                "3"
            ],
            [
                "1010111110\r\n0110\r\n",
                "4"
            ]
        ],
        "private_cases": [
            [
                "1011101100\r\n1100001\r\n",
                "3"
            ],
            [
                "10010110100000101100\r\n11101\r\n",
                "6"
            ],
            [
                "0\r\n1\r\n",
                "0"
            ]
        ]
    }
]