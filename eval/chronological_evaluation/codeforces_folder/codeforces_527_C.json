[
    {
        "name": "Glass Carving",
        "description": "Leonid wants to become a glass carver (the person who creates beautiful\nartworks by cutting the glass). He already has a rectangular w mm \u00d7 h mm sheet\nof glass, a diamond glass cutter and lots of enthusiasm. What he lacks is\nunderstanding of what to carve and how. In order not to waste time, he decided\nto practice the technique of carving. To do this, he makes vertical and\nhorizontal cuts through the entire sheet. This process results in making\nsmaller rectangular fragments of glass. Leonid does not move the newly made\nglass fragments. In particular, a cut divides each fragment of glass that it\ngoes through into smaller fragments. After each cut Leonid tries to determine\nwhat area the largest of the currently available glass fragments has. Since\nthere appear more and more fragments, this question takes him more and more\ntime and distracts him from the fascinating process. Leonid offers to divide\nthe labor \u2014 he will cut glass, and you will calculate the area of the maximum\nfragment after each cut. Do you agree? Input The first line contains three\nintegers w, h, n (2 \u2264 w, h \u2264 200 000, 1 \u2264 n \u2264 200 000). Next n lines contain\nthe descriptions of the cuts. Each description has the form H y or V x. In the\nfirst case Leonid makes the horizontal cut at the distance y millimeters (1 \u2264\ny \u2264 h - 1) from the lower edge of the original sheet of glass. In the second\ncase Leonid makes a vertical cut at distance x (1 \u2264 x \u2264 w - 1) millimeters\nfrom the left edge of the original sheet of glass. It is guaranteed that\nLeonid won't make two identical cuts. Output After each cut print on a single\nline the area of the maximum available glass fragment in mm^2. Examples Input\n4 3 4 H 2 V 2 V 3 V 1 Output 8 4 4 2 Input 7 6 5 H 4 V 3 V 5 H 2 V 1 Output 28\n16 12 6 4 Note Picture for the first sample test: Picture for the second\nsample test:\n\n",
        "cf_contest_id": 527,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 3 4\r\nH 2\r\nV 2\r\nV 3\r\nV 1\r\n",
                "8\r\n4\r\n4\r\n2\r\n"
            ],
            [
                "7 6 5\r\nH 4\r\nV 3\r\nV 5\r\nH 2\r\nV 1\r\n",
                "28\r\n16\r\n12\r\n6\r\n4\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 2 1\r\nV 1\r\n",
                "2\r\n"
            ],
            [
                "2 2 1\r\nH 1\r\n",
                "2\r\n"
            ],
            [
                "2 2 2\r\nV 1\r\nH 1\r\n",
                "2\r\n1\r\n"
            ],
            [
                "2 2 2\r\nH 1\r\nV 1\r\n",
                "2\r\n1\r\n"
            ],
            [
                "10 10 10\r\nV 6\r\nH 8\r\nV 4\r\nV 8\r\nH 2\r\nH 5\r\nV 9\r\nH 7\r\nH 3\r\nV 7\r\n",
                "60\r\n48\r\n32\r\n32\r\n24\r\n12\r\n12\r\n12\r\n8\r\n8\r\n"
            ],
            [
                "5 15 10\r\nH 8\r\nH 9\r\nV 1\r\nH 2\r\nH 6\r\nH 4\r\nH 1\r\nV 2\r\nH 13\r\nV 3\r\n",
                "40\r\n40\r\n32\r\n24\r\n24\r\n24\r\n24\r\n18\r\n12\r\n8\r\n"
            ],
            [
                "15 5 10\r\nV 13\r\nV 10\r\nV 3\r\nH 2\r\nV 9\r\nV 7\r\nV 2\r\nH 1\r\nV 4\r\nH 3\r\n",
                "65\r\n50\r\n35\r\n21\r\n18\r\n12\r\n12\r\n12\r\n9\r\n6\r\n"
            ],
            [
                "2 3 1\r\nH 1\r\n",
                "4\r\n"
            ],
            [
                "200000 200000 1\r\nH 1\r\n",
                "39999800000\r\n"
            ],
            [
                "2 4 1\r\nH 2\r\n",
                "4\r\n"
            ]
        ]
    }
]