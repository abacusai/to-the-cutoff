[
    {
        "name": "Cards with Numbers",
        "description": "Petya has got 2n cards, each card contains some integer. The numbers on the\ncards can be the same. Let's index all cards by consecutive integers from 1 to\n2n. We'll denote the number that is written on a card with number i, as ai. In\norder to play one entertaining game with his friends, Petya needs to split the\ncards into pairs so that each pair had equal numbers on the cards. Help Petya\ndo that. Input The first line contains integer n (1 \u2264 n \u2264 3\u00b710^5). The second\nline contains the sequence of 2n positive integers a1, a2, ..., a2n (1 \u2264 ai \u2264\n5000) \u2014 the numbers that are written on the cards. The numbers on the line are\nseparated by single spaces. Output If it is impossible to divide the cards\ninto pairs so that cards in each pair had the same numbers, print on a single\nline integer -1. But if the required partition exists, then print n pairs of\nintegers, a pair per line \u2014 the indices of the cards that form the pairs.\nSeparate the numbers on the lines by spaces. You can print the pairs and the\nnumbers in the pairs in any order. If there are multiple solutions, print any\nof them. Examples Input 3 20 30 10 30 20 10 Output 4 2 1 5 6 3 Input 1 1 2\nOutput -1\n\n",
        "cf_contest_id": 254,
        "cf_index": "A",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n20 30 10 30 20 10\r\n",
                "6\r\n3\r\n5\r\n1\r\n4\r\n2\r\n"
            ],
            [
                "1\r\n1 2\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n2 2 2 2 2 1 2 2 1 2\r\n",
                "10\r\n8\r\n9\r\n6\r\n7\r\n5\r\n4\r\n3\r\n2\r\n1\r\n"
            ],
            [
                "5\r\n2 1 2 2 1 1 1 1 1 2\r\n",
                "10\r\n4\r\n9\r\n8\r\n7\r\n6\r\n5\r\n2\r\n3\r\n1\r\n"
            ],
            [
                "5\r\n1 2 2 2 1 2 2 1 2 1\r\n",
                "10\r\n8\r\n9\r\n7\r\n6\r\n4\r\n5\r\n1\r\n3\r\n2\r\n"
            ],
            [
                "5\r\n3 3 1 1 1 3 2 3 1 2\r\n",
                "10\r\n7\r\n9\r\n5\r\n8\r\n6\r\n4\r\n3\r\n2\r\n1\r\n"
            ],
            [
                "5\r\n1 1 3 1 3 3 3 1 1 1\r\n",
                "10\r\n9\r\n8\r\n4\r\n7\r\n6\r\n5\r\n3\r\n2\r\n1\r\n"
            ],
            [
                "5\r\n3 1 1 1 2 3 3 3 2 1\r\n",
                "10\r\n4\r\n9\r\n5\r\n8\r\n7\r\n6\r\n1\r\n3\r\n2\r\n"
            ],
            [
                "5\r\n3 3 2 2 3 3 1 3 1 3\r\n",
                "10\r\n8\r\n9\r\n7\r\n6\r\n5\r\n4\r\n3\r\n2\r\n1\r\n"
            ],
            [
                "5\r\n4 1 3 1 4 1 2 2 3 1\r\n",
                "10\r\n6\r\n9\r\n3\r\n8\r\n7\r\n5\r\n1\r\n4\r\n2\r\n"
            ],
            [
                "100\r\n6 3 6 8 8 4 3 7 10 3 1 3 9 5 10 10 6 7 6 6 2 3 8 8 7 6 4 9 6 7 4 4 10 4 7 3 2 7 10 8 6 7 9 1 3 5 3 7 9 1 1 7 1 1 7 7 8 3 2 7 4 8 7 8 10 3 1 7 2 7 9 8 8 8 5 2 8 1 2 7 8 7 8 8 5 10 10 4 9 10 8 7 8 8 7 7 3 6 4 3 4 8 10 8 6 3 7 1 8 6 3 3 7 10 3 9 3 5 10 9 9 2 8 7 2 3 2 1 10 9 6 2 8 7 2 2 5 3 10 6 7 2 1 1 5 10 7 5 4 9 7 7 8 1 1 3 3 7 10 5 9 8 6 8 2 2 1 7 8 9 6 2 2 6 2 9 10 2 10 9 6 3 3 10 6 5 3 6 6 3 6 10 8 7 4 8 6 3 4 7\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n2 2\r\n",
                "2\r\n1\r\n"
            ],
            [
                "2\r\n1 2 4 7\r\n",
                "-1\r\n"
            ]
        ]
    }
]