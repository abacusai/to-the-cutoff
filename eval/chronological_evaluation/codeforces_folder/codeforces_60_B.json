[
    {
        "name": "Serial Time!",
        "description": "The Cereal Guy's friend Serial Guy likes to watch soap operas. An episode is\nabout to start, and he hasn't washed his plate yet. But he decided to at least\nput in under the tap to be filled with water. The plate can be represented by\na parallelepiped k \u00d7 n \u00d7 m, that is, it has k layers (the first layer is the\nupper one), each of which is a rectangle n \u00d7 m with empty squares ('.') and\nobstacles ('#'). The water can only be present in the empty squares. The tap\nis positioned above the square (x, y) of the first layer, it is guaranteed\nthat this square is empty. Every minute a cubical unit of water falls into the\nplate. Find out in how many minutes the Serial Guy should unglue himself from\nthe soap opera and turn the water off for it not to overfill the plate. That\nis, you should find the moment of time when the plate is absolutely full and\nis going to be overfilled in the next moment. Note: the water fills all the\narea within reach (see sample 4). Water flows in each of the 6 directions,\nthrough faces of 1 \u00d7 1 \u00d7 1 cubes. Input The first line contains three numbers\nk, n, m (1 \u2264 k, n, m \u2264 10) which are the sizes of the plate. Then follow k\nrectangles consisting of n lines each containing m characters '.' or '#',\nwhich represents the \"layers\" of the plate in the order from the top to the\nbottom. The rectangles are separated by empty lines (see the samples). The\nlast line contains x and y (1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m) which are the tap's\ncoordinates. x is the number of the line and y is the number of the column.\nLines of each layer are numbered from left to right by the integers from 1 to\nn, columns of each layer are numbered from top to bottom by the integers from\n1 to m. Output The answer should contain a single number, showing in how many\nminutes the plate will be filled. Examples Input 1 1 1 . 1 1 Output 1 Input 2\n1 1 . # 1 1 Output 1 Input 2 2 2 .# ## .. .. 1 1 Output 5 Input 3 2 2 #. ## #.\n.# .. .. 1 2 Output 7 Input 3 3 3 .#. ### ##. .## ### ##. ... ... ... 1 1\nOutput 13\n\n",
        "cf_contest_id": 60,
        "cf_index": "B",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dsu"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1 1 1\r\n\r\n.\r\n\r\n1 1\r\n",
                "1"
            ],
            [
                "2 1 1\r\n\r\n.\r\n\r\n#\r\n\r\n1 1\r\n",
                "1"
            ],
            [
                "2 2 2\r\n\r\n.#\r\n##\r\n\r\n..\r\n..\r\n\r\n1 1\r\n",
                "5"
            ],
            [
                "3 2 2\r\n\r\n#.\r\n##\r\n\r\n#.\r\n.#\r\n\r\n..\r\n..\r\n\r\n1 2\r\n",
                "7"
            ],
            [
                "3 3 3\r\n\r\n.#.\r\n###\r\n##.\r\n\r\n.##\r\n###\r\n##.\r\n\r\n...\r\n...\r\n...\r\n\r\n1 1\r\n",
                "13"
            ]
        ],
        "private_cases": [
            [
                "2 2 2\r\n\r\n#.\r\n..\r\n\r\n.#\r\n#.\r\n\r\n2 1\r\n",
                "4"
            ],
            [
                "6 5 4\r\n\r\n####\r\n####\r\n####\r\n####\r\n.###\r\n\r\n####\r\n####\r\n####\r\n####\r\n####\r\n\r\n####\r\n####\r\n####\r\n####\r\n####\r\n\r\n####\r\n####\r\n####\r\n####\r\n####\r\n\r\n####\r\n####\r\n####\r\n####\r\n####\r\n\r\n####\r\n####\r\n####\r\n####\r\n####\r\n\r\n5 1\r\n",
                "1"
            ],
            [
                "1 8 6\r\n\r\n######\r\n######\r\n.#####\r\n######\r\n######\r\n######\r\n######\r\n######\r\n\r\n3 1\r\n",
                "1"
            ],
            [
                "9 2 1\r\n\r\n.\r\n.\r\n\r\n.\r\n.\r\n\r\n.\r\n.\r\n\r\n.\r\n.\r\n\r\n.\r\n.\r\n\r\n.\r\n.\r\n\r\n.\r\n.\r\n\r\n.\r\n.\r\n\r\n.\r\n.\r\n\r\n1 1\r\n",
                "18"
            ],
            [
                "5 8 2\r\n\r\n##\r\n##\r\n##\r\n#.\r\n##\r\n##\r\n##\r\n##\r\n\r\n##\r\n##\r\n##\r\n##\r\n##\r\n##\r\n##\r\n##\r\n\r\n##\r\n##\r\n##\r\n##\r\n##\r\n##\r\n##\r\n##\r\n\r\n##\r\n##\r\n##\r\n##\r\n##\r\n##\r\n##\r\n##\r\n\r\n##\r\n##\r\n##\r\n##\r\n##\r\n##\r\n##\r\n##\r\n\r\n4 2\r\n",
                "1"
            ],
            [
                "6 10 2\r\n\r\n##\r\n#.\r\n##\r\n##\r\n##\r\n##\r\n##\r\n##\r\n##\r\n##\r\n\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n\r\n##\r\n#.\r\n##\r\n##\r\n##\r\n##\r\n##\r\n##\r\n##\r\n##\r\n\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n\r\n##\r\n#.\r\n##\r\n##\r\n##\r\n##\r\n##\r\n##\r\n##\r\n##\r\n\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n\r\n2 2\r\n",
                "63"
            ],
            [
                "8 6 2\r\n\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n\r\n##\r\n##\r\n.#\r\n##\r\n##\r\n##\r\n\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n\r\n##\r\n##\r\n.#\r\n##\r\n##\r\n##\r\n\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n\r\n##\r\n##\r\n.#\r\n##\r\n##\r\n##\r\n\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n\r\n##\r\n##\r\n.#\r\n##\r\n##\r\n##\r\n\r\n3 1\r\n",
                "52"
            ],
            [
                "4 6 2\r\n\r\n##\r\n##\r\n##\r\n##\r\n.#\r\n##\r\n\r\n##\r\n##\r\n##\r\n##\r\n##\r\n##\r\n\r\n##\r\n##\r\n##\r\n##\r\n##\r\n##\r\n\r\n##\r\n##\r\n##\r\n##\r\n##\r\n##\r\n\r\n5 1\r\n",
                "1"
            ],
            [
                "2 9 2\r\n\r\n##\r\n##\r\n##\r\n##\r\n.#\r\n##\r\n##\r\n##\r\n##\r\n\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n\r\n5 1\r\n",
                "19"
            ],
            [
                "8 5 6\r\n\r\n######\r\n######\r\n######\r\n###.##\r\n######\r\n\r\n######\r\n######\r\n######\r\n######\r\n######\r\n\r\n######\r\n######\r\n######\r\n######\r\n######\r\n\r\n######\r\n######\r\n######\r\n######\r\n######\r\n\r\n######\r\n######\r\n######\r\n######\r\n######\r\n\r\n######\r\n######\r\n######\r\n######\r\n######\r\n\r\n######\r\n######\r\n######\r\n######\r\n######\r\n\r\n######\r\n######\r\n######\r\n######\r\n######\r\n\r\n4 4\r\n",
                "1"
            ],
            [
                "1 3 10\r\n\r\n##########\r\n####.#####\r\n##########\r\n\r\n2 5\r\n",
                "1"
            ],
            [
                "9 2 2\r\n\r\n##\r\n..\r\n\r\n##\r\n##\r\n\r\n#.\r\n#.\r\n\r\n..\r\n..\r\n\r\n##\r\n..\r\n\r\n..\r\n.#\r\n\r\n#.\r\n#.\r\n\r\n.#\r\n..\r\n\r\n#.\r\n.#\r\n\r\n2 1\r\n",
                "2"
            ],
            [
                "1 6 2\r\n\r\n##\r\n..\r\n##\r\n.#\r\n##\r\n#.\r\n\r\n6 2\r\n",
                "1"
            ],
            [
                "5 9 2\r\n\r\n##\r\n##\r\n##\r\n#.\r\n.#\r\n.#\r\n..\r\n##\r\n#.\r\n\r\n##\r\n..\r\n##\r\n##\r\n#.\r\n#.\r\n.#\r\n#.\r\n#.\r\n\r\n#.\r\n.#\r\n##\r\n.#\r\n..\r\n##\r\n##\r\n#.\r\n..\r\n\r\n#.\r\n..\r\n.#\r\n#.\r\n..\r\n#.\r\n..\r\n..\r\n##\r\n\r\n.#\r\n##\r\n..\r\n.#\r\n#.\r\n#.\r\n.#\r\n##\r\n##\r\n\r\n4 2\r\n",
                "1"
            ],
            [
                "4 3 2\r\n\r\n#.\r\n#.\r\n##\r\n\r\n.#\r\n.#\r\n##\r\n\r\n..\r\n#.\r\n##\r\n\r\n#.\r\n..\r\n.#\r\n\r\n1 2\r\n",
                "2"
            ],
            [
                "4 10 10\r\n\r\n##########\r\n##########\r\n##########\r\n##########\r\n##########\r\n##########\r\n#########.\r\n##########\r\n##########\r\n##########\r\n\r\n##########\r\n##########\r\n##########\r\n##########\r\n##########\r\n##########\r\n##########\r\n##########\r\n##########\r\n##########\r\n\r\n##########\r\n##########\r\n##########\r\n##########\r\n##########\r\n##########\r\n##########\r\n##########\r\n##########\r\n##########\r\n\r\n##########\r\n##########\r\n##########\r\n##########\r\n##########\r\n##########\r\n##########\r\n##########\r\n##########\r\n##########\r\n\r\n7 10\r\n",
                "1"
            ]
        ]
    }
]