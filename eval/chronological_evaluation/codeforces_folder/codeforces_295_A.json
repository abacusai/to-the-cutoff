[
    {
        "name": "Greg and Array",
        "description": "Greg has an array a = a1, a2, ..., an and m operations. Each operation looks\nas: li, ri, di, (1 \u2264 li \u2264 ri \u2264 n). To apply operation i to the array means to\nincrease all array elements with numbers li, li + 1, ..., ri by value di. Greg\nwrote down k queries on a piece of paper. Each query has the following form:\nxi, yi, (1 \u2264 xi \u2264 yi \u2264 m). That means that one should apply operations with\nnumbers xi, xi + 1, ..., yi to the array. Now Greg is wondering, what the\narray a will be after all the queries are executed. Help Greg. Input The first\nline contains integers n, m, k (1 \u2264 n, m, k \u2264 10^5). The second line contains\nn integers: a1, a2, ..., an (0 \u2264 ai \u2264 10^5) \u2014 the initial array. Next m lines\ncontain operations, the operation number i is written as three integers: li,\nri, di, (1 \u2264 li \u2264 ri \u2264 n), (0 \u2264 di \u2264 10^5). Next k lines contain the queries,\nthe query number i is written as two integers: xi, yi, (1 \u2264 xi \u2264 yi \u2264 m). The\nnumbers in the lines are separated by single spaces. Output On a single line\nprint n integers a1, a2, ..., an \u2014 the array after executing all the queries.\nSeparate the printed numbers by spaces. Please, do not use the \nto read or write 64-bit integers in C++. It is preferred to use the cin, cout\nstreams of the \n2 1 3 2 3 Output 9 18 17 Input 1 1 1 1 1 1 1 1 1 Output 2 Input 4 3 6 1 2 3 4\n1 2 1 2 3 2 3 4 4 1 2 1 3 2 3 1 2 1 3 2 3 Output 5 18 31 20\n\n",
        "cf_contest_id": 295,
        "cf_index": "A",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 1.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3 3\r\n1 2 3\r\n1 2 1\r\n1 3 2\r\n2 3 4\r\n1 2\r\n1 3\r\n2 3\r\n",
                "9 18 17\r\n"
            ],
            [
                "1 1 1\r\n1\r\n1 1 1\r\n1 1\r\n",
                "2\r\n"
            ],
            [
                "4 3 6\r\n1 2 3 4\r\n1 2 1\r\n2 3 2\r\n3 4 4\r\n1 2\r\n1 3\r\n2 3\r\n1 2\r\n1 3\r\n2 3\r\n",
                "5 18 31 20\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1 1\r\n0\r\n1 1 0\r\n1 1\r\n",
                "0\r\n"
            ]
        ]
    }
]