[
    {
        "name": "Books Exchange (hard version)",
        "description": "The only difference between easy and hard versions is constraints. There are\n\n    n\n kids, each of them is reading a unique book. At the end of any day,\nthe \n    i\n-th kid will give his book to the \n    p_i\n-th kid (in case of \n    i\n    = p_i\n the kid will give his book to himself). It is guaranteed that all\nvalues of \n    p_i\n are distinct integers from \n    1\n to \n    n\n (i.e.\n\n    p\n is a permutation). The sequence \n    p\n doesn't change from day to\nday, it is fixed. For example, if \n    n=6\n and \n    p=[4, 6, 1, 3, 5, 2]\n\nthen at the end of the first day the book of the \n    1\n-st kid will belong to\nthe \n    4\n-th kid, the \n    2\n-nd kid will belong to the \n    6\n-th kid and\nso on. At the end of the second day the book of the \n    1\n-st kid will belong\nto the \n    3\n-th kid, the \n    2\n-nd kid will belong to the \n    2\n-th kid\nand so on. Your task is to determine the number of the day the book of the\n\n    i\n-th child is returned back to him for the first time for every \n    i\n\nfrom \n    1\n to \n    n\n. Consider the following example: \n    p = [5, 1, 2, 4,\n    3]\n. The book of the \n    1\n-st kid will be passed to the following kids:\nafter the \n    1\n-st day it will belong to the \n    5\n-th kid, after the\n\n    2\n-nd day it will belong to the \n    3\n-rd kid, after the \n    3\n-rd day\nit will belong to the \n    2\n-nd kid, after the \n    4\n-th day it will belong\nto the \n    1\n-st kid. So after the fourth day, the book of the first kid will\nreturn to its owner. The book of the fourth kid will return to him for the\nfirst time after exactly one day. You have to answer \n    q\n independent\nqueries. Input The first line of the input contains one integer \n    q\n (\n    1\n    \n    \u2264 q \n    \u2264 1000\n) \u2014 the number of queries. Then \n    q\n queries follow.\nThe first line of the query contains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n) \u2014 the number of kids in the query. The second line of the\nquery contains \n    n\n integers \n    p_1, p_2, \n    \u2026, p_n\n (\n    1 \n    \u2264 p_i\n    \n    \u2264 n\n, all \n    p_i\n are distinct, i.e. \n    p\n is a permutation), where\n\n    p_i\n is the kid which will get the book of the \n    i\n-th kid. It is\nguaranteed that \n    \u2211 n \n    \u2264 2 \n    \u00b7 10^5\n (sum of \n    n\n over all\nqueries does not exceed \n    2 \n    \u00b7 10^5\n). Output For each query, print\nthe answer on it: \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n, where\n\n    a_i\n is the number of the day the book of the \n    i\n-th child is\nreturned back to him for the first time in this query. Example Input 6 5 1 2 3\n4 5 3 2 3 1 6 4 6 2 1 5 3 1 1 4 3 4 1 2 5 5 1 2 4 3 Output 1 1 1 1 1 3 3 3 2 3\n3 2 1 3 1 2 2 2 2 4 4 4 1 4\n\n",
        "cf_contest_id": 1249,
        "cf_index": "B2",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dsu",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n5\r\n1 2 3 4 5\r\n3\r\n2 3 1\r\n6\r\n4 6 2 1 5 3\r\n1\r\n1\r\n4\r\n3 4 1 2\r\n5\r\n5 1 2 4 3\r\n",
                "1 1 1 1 1\r\n3 3 3\r\n2 3 3 2 1 3\r\n1\r\n2 2 2 2\r\n4 4 4 1 4\r\n"
            ]
        ],
        "private_cases": [
            [
                "20\r\n6\r\n3 6 4 2 5 1\r\n6\r\n2 4 1 3 5 6\r\n7\r\n5 2 1 4 6 7 3\r\n6\r\n3 6 4 2 5 1\r\n9\r\n5 8 2 6 4 7 9 1 3\r\n9\r\n3 2 6 8 5 7 9 1 4\r\n8\r\n8 4 6 5 2 1 7 3\r\n5\r\n3 1 2 5 4\r\n10\r\n2 4 3 5 6 10 7 9 1 8\r\n2\r\n2 1\r\n1\r\n1\r\n5\r\n3 2 5 4 1\r\n3\r\n1 3 2\r\n8\r\n2 6 5 3 7 1 4 8\r\n5\r\n3 5 4 1 2\r\n4\r\n1 4 3 2\r\n5\r\n5 1 4 3 2\r\n4\r\n4 1 3 2\r\n1\r\n1\r\n7\r\n3 1 5 2 6 7 4\r\n",
                "5 5 5 5 1 5\r\n4 4 4 4 1 1\r\n5 1 5 1 5 5 5\r\n5 5 5 5 1 5\r\n9 9 9 9 9 9 9 9 9\r\n7 1 7 7 1 7 7 7 7\r\n4 3 4 3 3 4 1 4\r\n3 3 3 2 2\r\n8 8 1 8 8 8 1 8 8 8\r\n2 2\r\n1\r\n3 1 3 1 3\r\n1 2 2\r\n3 3 4 4 4 3 4 1\r\n3 2 3 3 2\r\n1 2 1 2\r\n3 3 2 2 3\r\n3 3 1 3\r\n1\r\n7 7 7 7 7 7 7\r\n"
            ]
        ]
    }
]