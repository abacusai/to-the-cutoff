[
    {
        "name": "Inverse of Rows and Columns",
        "description": "You are given a binary matrix \n    a\n of size \n    n \n    \u00d7 m\n. A binary\nmatrix is a matrix where each element is either \n    0\n or \n    1\n. You may\nperform some (possibly zero) operations with this matrix. During each\noperation you can inverse the row of this matrix or a column of this matrix.\nFormally, inverting a row is changing all values in this row to the opposite\n(\n    0\n to \n    1\n, \n    1\n to \n    0\n). Inverting a column is changing all\nvalues in this column to the opposite. Your task is to sort the initial matrix\nby some sequence of such operations. The matrix is considered sorted if the\narray \n    [a_1, 1, a_1, 2, \n    \u2026, a_1, m, a_2, 1, a_2, 2, \n    \u2026,\n    a_2, m, \n    \u2026, a_n, m - 1, a_n, m]\n is sorted in non-descending\norder. Input The first line of the input contains two integers \n    n\n and\n\n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 200\n) \u2014 the number of rows and the number of\ncolumns in the matrix. The next \n    n\n lines contain \n    m\n integers each.\nThe \n    j\n-th element in the \n    i\n-th line is \n    a_i, j\n (\n    0 \n    \u2264\n    a_i, j\n    \u2264 1\n) \u2014 the element of \n    a\n at position \n    (i, j)\n. Output\nIf it is impossible to obtain a sorted matrix, print \"NO\" in the first line.\nOtherwise print \"YES\" in the first line. In the second line print a string\n\n    r\n of length \n    n\n. The \n    i\n-th character \n    r_i\n of this string\nshould be '1' if the \n    i\n-th row of the matrix is inverted and '0'\notherwise. In the third line print a string \n    c\n of length \n    m\n. The\n\n    j\n-th character \n    c_j\n of this string should be '1' if the \n    j\n-th\ncolumn of the matrix is inverted and '0' otherwise. If there are multiple\nanswers, you can print any. Examples Input 2 2 1 1 0 1 Output YES 00 10 Input\n3 4 0 0 0 1 0 0 0 0 1 1 1 1 Output YES 010 0000 Input 3 3 0 0 0 1 0 1 1 1 0\nOutput NO\n\n",
        "cf_contest_id": 1157,
        "cf_index": "G",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 2\r\n1 1\r\n0 1\r\n",
                "YES\r\n00\r\n10"
            ],
            [
                "3 4\r\n0 0 0 1\r\n0 0 0 0\r\n1 1 1 1\r\n",
                "YES\r\n010\r\n0000"
            ],
            [
                "3 3\r\n0 0 0\r\n1 0 1\r\n1 1 0\r\n",
                "NO"
            ]
        ],
        "private_cases": [
            [
                "4 5\r\n0 1 1 1 1\r\n1 1 1 1 1\r\n1 1 1 1 1\r\n1 1 1 1 1\r\n",
                "YES\r\n0000\r\n00000"
            ],
            [
                "2 2\r\n0 1\r\n1 1\r\n",
                "YES\r\n00\r\n00"
            ],
            [
                "1 1\r\n0\r\n",
                "YES\r\n0\r\n1"
            ],
            [
                "1 2\r\n0 1\r\n",
                "YES\r\n0\r\n10"
            ],
            [
                "1 2\r\n0 0\r\n",
                "YES\r\n0\r\n11"
            ],
            [
                "1 3\r\n0 1 1\r\n",
                "YES\r\n0\r\n100"
            ],
            [
                "1 3\r\n1 0 1\r\n",
                "YES\r\n0\r\n010"
            ],
            [
                "2 1\r\n0\r\n1\r\n",
                "YES\r\n01\r\n1"
            ],
            [
                "2 1\r\n1\r\n1\r\n",
                "YES\r\n00\r\n0"
            ],
            [
                "2 1\r\n0\r\n0\r\n",
                "YES\r\n00\r\n1"
            ],
            [
                "2 2\r\n1 0\r\n1 0\r\n",
                "YES\r\n00\r\n01"
            ],
            [
                "2 2\r\n0 1\r\n0 0\r\n",
                "YES\r\n01\r\n00"
            ],
            [
                "2 2\r\n0 0\r\n0 0\r\n",
                "YES\r\n00\r\n11"
            ],
            [
                "2 2\r\n1 1\r\n1 0\r\n",
                "YES\r\n01\r\n10"
            ],
            [
                "2 2\r\n1 1\r\n1 1\r\n",
                "YES\r\n00\r\n00"
            ],
            [
                "2 3\r\n0 1 0\r\n0 1 0\r\n",
                "YES\r\n00\r\n101"
            ],
            [
                "2 3\r\n0 0 1\r\n0 1 0\r\n",
                "YES\r\n01\r\n010"
            ],
            [
                "2 3\r\n0 1 0\r\n0 1 1\r\n",
                "YES\r\n01\r\n011"
            ],
            [
                "2 3\r\n0 1 0\r\n1 0 1\r\n",
                "YES\r\n01\r\n101"
            ],
            [
                "2 3\r\n1 0 1\r\n1 1 0\r\n",
                "YES\r\n01\r\n110"
            ],
            [
                "2 3\r\n1 0 0\r\n0 1 0\r\n",
                "YES\r\n00\r\n101"
            ],
            [
                "2 3\r\n1 1 0\r\n1 1 0\r\n",
                "YES\r\n00\r\n001"
            ]
        ]
    }
]