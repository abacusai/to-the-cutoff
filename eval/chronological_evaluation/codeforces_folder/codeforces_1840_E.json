[
    {
        "name": "Character Blocking",
        "description": "You are given two strings of equal length \n    s_1\n and \n    s_2\n, consisting\nof lowercase Latin letters, and an integer \n    t\n. You need to answer \n    q\n\nqueries, numbered from \n    1\n to \n    q\n. The \n    i\n-th query comes in the\n\n    i\n-th second of time. Each query is one of three types: block the\ncharacters at position \n    pos\n (indexed from \n    1\n) in both strings for\n\n    t\n seconds; swap two unblocked characters; determine if the two strings\nare equal at the time of the query, ignoring blocked characters. Note that in\nqueries of the second type, the characters being swapped can be from the same\nstring or from \n    s_1\n and \n    s_2\n. Input The first line of the input\ncontains a single integer \n    T\n (\n    1 \n    \u2264 T \n    \u2264 10^4\n) \u2014 the number of\ntest cases. Then follow the descriptions of the test cases. The first line of\neach test case contains a string \n    s_1\n consisting of lowercase Latin\nletters (length no more than \n    2 \n    \u00b7 10^5\n). The second line of each\ntest case contains a string \n    s_2\n consisting of lowercase Latin letters\n(length no more than \n    2 \n    \u00b7 10^5\n). The strings have equal length. The\nthird line of each test case contains two integers \n    t\n and \n    q\n (\n    1\n    \n    \u2264 t, q \n    \u2264 2 \n    \u00b7 10^5\n). The number \n    t\n indicates the number\nof seconds for which a character is blocked. The number \n    q\n corresponds to\nthe number of queries. Each of the next \n    q\n lines of each test case\ncontains a single query. Each query is one of three types: \"\n    1\n     \n     \n    pos\n\" \u2014 block the characters at position \n    pos\n in both strings for\n\n    t\n seconds; \"\n    2\n     \n     \n     1/\n     \n    \n    !2\n     \n     \n     pos_1\n     \n     \n    1/\n     \n    \n    !2\n     \n     \n     pos_2\n\" \u2014 swap two unblocked characters. The second\nnumber in the query indicates the number of the string from which the first\ncharacter for the swap is taken. The third number in the query indicates the\nposition in that string of that character. The fourth number in the query\nindicates the number of the string from which the second character for the\nswap is taken. The fifth number in the query indicates the position in that\nstring of that character; \"\n    3\n\" \u2014 determine if the two strings are equal\nat the time of the query, ignoring blocked characters. For queries of the\nfirst type, it is guaranteed that at the time of the query, the characters at\nposition \n    pos\n are not blocked. For queries of the second type, it is\nguaranteed that the characters being swapped are not blocked. All values of\n\n    pos, pos_1, pos_2\n are in the range from \n    1\n to the length of the\nstrings. The sum of the values of \n    q\n over all test cases, as well as the\ntotal length of the strings \n    s_1\n, does not exceed \n    2 \n    \u00b7 10^5\n.\nOutput For each query of the third type, output \"YES\" if the two strings\n\n    s_1\n and \n    s_2\n are equal at the time of the query, ignoring blocked\ncharacters, and \"NO\" otherwise. You can output each letter in any case\n(lowercase or uppercase). For example, the strings \"yEs\", \"yes\", \"Yes\" and\n\"YES\" will be accepted as a positive answer. Example Input 2 codeforces\ncodeblocks 5 7 3 1 5 1 6 1 7 1 9 3 3 cool club 2 5 2 1 2 2 3 2 2 2 2 4 1 2 3 3\nOutput NO YES NO YES NO Note Let's look at the strings \n    s_1\n and \n    s_2\n\nafter each of the \n    q\n queries. Blocked characters will be denoted in red.\nFirst example input: (\n    codeforces\n, \n    codeblocks\n) \n    \u2192\n\n(\n    codeforces\n, \n    codeblocks\n) \n    \u2192\n\n(\n    code\n    forces\n, \n    code\n    blocks\n)\n\n    \u2192\n (\n    code\n    forces\n,\n\n    code\n    blocks\n) \n    \u2192\n\n(\n    code\n    forces\n, \n    code\n    blocks\n)\n\n    \u2192\n (\n    code\n    forc\n    es\n,\n\n    code\n    bloc\n    ks\n) \n    \u2192\n\n(\n    code\n    forc\n    es\n,\n\n    code\n    bloc\n    ks\n) \n    \u2192\n\n(\n    codef\n    orc\n    es\n,\n\n    codeb\n    loc\n    ks\n) Second example input:\n(\n    cool\n, \n    club\n) \n    \u2192\n (\n    cuol\n, \n    clob\n)\n\n    \u2192\n (\n    cuol\n, \n    cbol\n) \n    \u2192\n\n(\n    c\n    uol\n, \n    c\n    bol\n) \n    \u2192\n\n(\n    c\n    uol\n, \n    c\n    bol\n) \n    \u2192\n\n(\n    cuol\n, \n    cbol\n)\n\n",
        "cf_contest_id": 1840,
        "cf_index": "E",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "hashing",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\ncodeforces\r\ncodeblocks\r\n5 7\r\n3\r\n1 5\r\n1 6\r\n1 7\r\n1 9\r\n3\r\n3\r\ncool\r\nclub\r\n2 5\r\n2 1 2 2 3\r\n2 2 2 2 4\r\n1 2\r\n3\r\n3\r\n",
                "NO\r\nYES\r\nNO\r\nYES\r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\nttedfbceqd\r\nhrupucoxjz\r\n1 1\r\n3\r\n",
                "NO\r\n"
            ],
            [
                "1\r\naaaaaaa\r\nhgrnyld\r\n1 1\r\n3\r\n",
                "NO\r\n"
            ],
            [
                "1\r\npfwbjifgprimdlwegrnkxpwzylywabyrpnlfrwfadocvrgquiykredbqtuupzgziygytvsqrgjfhbgmmvqatmkbxxezialjnarncdhyffrxsszygovjtrtjutivshuxayxspczgxtemugsdfvjxppvfeaxwotilkcxcqrbsnzorxjtjpxyzajxzcmuwcytkinvrkkali\r\nixgmcroaifevxqgvuhpatovgnbxkdvdnllwovkohhfbqigqljqjwvdxnatcxksjeoqlsahhzqcanwhypnfnhcgiszmkuzcjarfspevtzdaatdvodqkgjefqvlawkabirtarvhizqkdkmazocrdpuagnyolpvsuvajyscnjatchjhjnzsxvgvkqemslylmichgsrnmnwv\r\n1 1\r\n3\r\n",
                "NO\r\n"
            ],
            [
                "1\r\nyejrepabfhjkgrwiiolwyihcctstkpeibywpggacjfweurtoixdygyajoeeickxlvspsilekgzdcmjmoddoeynlunpbwvpmcsrju\r\nqmvuybvpkmrphxgxjgaytdjuawtkbceouwjtzzkavsxglfmcgyvjgnneebymyxcgputsxxvwsaqihzdtfpmwtmwzpqvwfquhuymt\r\n1 3\r\n3\r\n3\r\n3\r\n",
                "NO\r\nNO\r\nNO\r\n"
            ],
            [
                "1\r\ntmngywvvpv\r\nbloqkwbfrc\r\n1 1\r\n3\r\n",
                "NO\r\n"
            ]
        ]
    }
]