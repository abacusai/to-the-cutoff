[
    {
        "name": "Half-decay tree",
        "description": "Recently Petya has become keen on physics. Anna V., his teacher noticed\nPetya's interest and gave him a fascinating physical puzzle \u2014 a half-decay\ntree. A half-decay tree is a complete binary tree with the height h. The\nheight of a tree is the length of the path (in edges) from the root to a leaf\nin the tree. While studying the tree Petya can add electrons to vertices or\ninduce random decay with synchrophasotron. Random decay is a process during\nwhich the edges of some path from the root to the random leaf of the tree are\ndeleted. All the leaves are equiprobable. As the half-decay tree is the school\nproperty, Petya will return back the deleted edges into the tree after each\ndecay. After being desintegrated, the tree decomposes into connected\ncomponents. Charge of each component is the total quantity of electrons placed\nin vertices of the component. Potential of desintegerated tree is the maximum\nfrom the charges of its connected components. Each time before inducing random\ndecay Petya is curious about the mathematical expectation of potential of the\ntree after being desintegrated. Input First line will contain two integers h\nand q (1 \u2264 h \u2264 30, 1 \u2264 q \u2264 10^5). Next q lines will contain a query of one of\ntwo types: add v ePetya adds e electrons to vertex number v (1 \u2264 v \u2264 2^h+1 -\n1, 0 \u2264 e \u2264 10^4). v and e are integers. The vertices of the tree are numbered\nin the following way: the root is numbered with 1, the children of the vertex\nwith number x are numbered with 2x and 2x + 1. decayPetya induces tree decay.\nOutput For each query decay solution you should output the mathematical\nexpectation of potential of the tree after being desintegrated. The absolute\nor relative error in the answer should not exceed 10^-4. Examples Input 1 4\nadd 1 3 add 2 10 add 3 11 decay Output 13.50000000\n\n",
        "cf_contest_id": 68,
        "cf_index": "D",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "divide and conquer",
            "dp",
            "math",
            "probabilities"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1 4\r\nadd 1 3\r\nadd 2 10\r\nadd 3 11\r\ndecay\r\n",
                "13.50000000\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 6\r\ndecay\r\ndecay\r\nadd 6 872\r\ndecay\r\nadd 13 813\r\nadd 8 531\r\n",
                "0.00000000\r\n0.00000000\r\n872.00000000\r\n"
            ],
            [
                "3 6\r\nadd 2 101\r\nadd 6 830\r\nadd 11 899\r\nadd 2 421\r\ndecay\r\ndecay\r\n",
                "1290.50000000\r\n1290.50000000\r\n"
            ],
            [
                "3 6\r\nadd 11 467\r\nadd 9 879\r\ndecay\r\nadd 15 551\r\nadd 14 473\r\nadd 14 104\r\n",
                "1112.50000000\r\n"
            ],
            [
                "9 6\r\nadd 593 652\r\ndecay\r\ndecay\r\ndecay\r\ndecay\r\ndecay\r\n",
                "652.00000000\r\n652.00000000\r\n652.00000000\r\n652.00000000\r\n652.00000000\r\n"
            ],
            [
                "7 10\r\ndecay\r\nadd 10 9923\r\ndecay\r\nadd 21 2047\r\ndecay\r\nadd 4 8696\r\ndecay\r\ndecay\r\nadd 204 4988\r\nadd 230 1977\r\n",
                "0.00000000\r\n9923.00000000\r\n11842.06250000\r\n16190.06250000\r\n16190.06250000\r\n"
            ]
        ]
    }
]