[
    {
        "name": "Magical Array",
        "description": "Eric has an array \n    b\n of length \n    m\n, then he generates \n    n\n\nadditional arrays \n    c_1, c_2, \n    \u2026, c_n\n, each of length \n    m\n, from\nthe array \n    b\n, by the following way: Initially, \n    c_i = b\n for every\n\n    1 \n    \u2264 i \n    \u2264 n\n. Eric secretly chooses an integer \n    k\n \n    (1 \n    \u2264\n    k \n    \u2264 n)\n and chooses \n    c_k\n to be the special array. There are two\noperations that Eric can perform on an array \n    c_t\n: Operation 1: Choose\ntwo integers \n    i\n and \n    j\n (\n    2 \n    \u2264 i < j \n    \u2264 m-1\n), subtract\n\n    1\n from both \n    c_t[i]\n and \n    c_t[j]\n, and add \n    1\n to both\n\n    c_t[i-1]\n and \n    c_t[j+1]\n. That operation can only be used on a non-\nspecial array, that is when \n    t \n    \u2260 k\n.; Operation 2: Choose two\nintegers \n    i\n and \n    j\n (\n    2 \n    \u2264 i < j \n    \u2264 m-2\n), subtract\n\n    1\n from both \n    c_t[i]\n and \n    c_t[j]\n, and add \n    1\n to both\n\n    c_t[i-1]\n and \n    c_t[j+2]\n. That operation can only be used on a\nspecial array, that is when \n    t = k\n.Note that Eric can't perform an\noperation if any element of the array will become less than \n    0\n after that\noperation. Now, Eric does the following: For every non-special array \n    c_i\n\n(\n    i \n    \u2260 k\n), Eric uses only operation 1 on it at least once. For the\nspecial array \n    c_k\n, Eric uses only operation 2 on it at least\nonce.Lastly, Eric discards the array \n    b\n. For given arrays \n    c_1, c_2,\n    \n    \u2026, c_n\n, your task is to find out the special array, i.e. the value\n\n    k\n. Also, you need to find the number of times of operation \n    2\n was\nused on it. Input The first line contains a single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. Description of test cases\nfollows. The first line of each test case contains two integers \n    n\n and\n\n    m\n (\n    3 \n    \u2264 n \n    \u2264 10^5\n, \n    7 \n    \u2264 m \n    \u2264 3 \n    \u00b7 10^5\n)\n\u2014 the number of arrays given to you, and the length of each array. The next\n\n    n\n lines contains \n    m\n integers each, \n    c_i,1, c_i,2, \n    \u2026 ,\n    c_i,m\n. It is guaranteed that each element of the discarded array \n    b\n\nis in the range \n    [0,10^6]\n, and therefore \n    0 \n    \u2264 c_i,j\n    \u2264 3\n    \n    \u00b7 10^11\n for all possible pairs of \n    (i,j)\n. It is guaranteed\nthat the sum of \n    n \n    \u00b7 m\n over all test cases does not exceed\n\n    10^6\n. It is guaranteed that the input is generated according to the\nprocedure above. Output For each test case, output one line containing two\nintegers \u2014 the index of the special array, and the number of times that\nOperation 2 was performed on it. It can be shown that under the constraints\ngiven in the problem, this value is unique and won't exceed \n    10^18\n, so\nyou can represent it as a \n    64\n-bit integer. It can also be shown that the\nindex of the special array is uniquely determined. In this problem, hacks are\ndisabled. Example Input 7 3 9 0 1 2 0 0 2 1 1 0 0 1 1 1 2 0 0 2 0 0 1 2 0 0 1\n2 1 0 3 7 25 15 20 15 25 20 20 26 14 20 14 26 20 20 25 15 20 15 20 20 25 3 9\n25 15 20 15 25 20 20 20 20 26 14 20 14 26 20 20 20 20 25 15 20 15 25 15 20 20\n25 3 11 25 15 20 15 25 20 20 20 20 20 20 26 14 20 14 26 20 20 20 20 20 20 25\n15 20 15 25 20 15 20 20 20 25 3 13 25 15 20 15 25 20 20 20 20 20 20 20 20 26\n14 20 14 26 20 20 20 20 20 20 20 20 25 15 20 15 25 20 20 15 20 20 20 20 25 3\n15 25 15 20 15 25 20 20 20 20 20 20 20 20 20 20 26 14 20 14 26 20 20 20 20 20\n20 20 20 20 20 25 15 20 15 25 20 20 20 15 20 20 20 20 20 25 3 9 909459 479492\n676924 224197 162866 164495 193268 742456 728277 948845 455424 731850 327890\n304150 237351 251763 225845 798316 975446 401170 792914 272263 300770 242037\n236619 334316 725899 Output 3 1 3 10 3 15 3 20 3 25 3 30 1 1378716 Note In the\nfirst test case, the secret array \n    b\n is \n    [0, 1, 1, 1, 1, 1, 1, 1,\n    0]\n. Array \n    c_1\n and array \n    c_2\n are generated by using operation 1.\nArray \n    c_3\n is generated by using operation 2. For Array \n    c_1\n,you can\nchoose \n    i=4\n and \n    j=5\n perform Operation 1 one time to generate it.\nFor Array \n    c_2\n, you can choose \n    i=6\n and \n    j=7\n perform Operation\n1 one time to generate it. For Array \n    c_3\n,you can choose \n    i=4\n and\n\n    j=5\n perform Operation 2 one time to generate it. In the second test\ncase, the secret array \n    b\n is \n    [20, 20, 20, 20, 20, 20, 20]\n. You can\nalso find that array \n    c_1\n and array \n    c_2\n are generated by using\nOperation 1. Array \n    c_3\n is generated by using Operation 2. In the third\ntest case, the secret array \n    b\n is \n    [20, 20, 20, 20, 20, 20, 20, 20,\n    20]\n. You can also find that array \n    c_1\n and array \n    c_2\n are\ngenerated by using Operation 1. Array \n    c_3\n is generated by using\nOperation 2.\n\n",
        "cf_contest_id": 1704,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "hashing",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n3 9\r\n0 1 2 0 0 2 1 1 0\r\n0 1 1 1 2 0 0 2 0\r\n0 1 2 0 0 1 2 1 0\r\n3 7\r\n25 15 20 15 25 20 20\r\n26 14 20 14 26 20 20\r\n25 15 20 15 20 20 25\r\n3 9\r\n25 15 20 15 25 20 20 20 20\r\n26 14 20 14 26 20 20 20 20\r\n25 15 20 15 25 15 20 20 25\r\n3 11\r\n25 15 20 15 25 20 20 20 20 20 20\r\n26 14 20 14 26 20 20 20 20 20 20\r\n25 15 20 15 25 20 15 20 20 20 25\r\n3 13\r\n25 15 20 15 25 20 20 20 20 20 20 20 20\r\n26 14 20 14 26 20 20 20 20 20 20 20 20\r\n25 15 20 15 25 20 20 15 20 20 20 20 25\r\n3 15\r\n25 15 20 15 25 20 20 20 20 20 20 20 20 20 20\r\n...",
                "3 1\r\n3 10\r\n3 15\r\n3 20\r\n3 25\r\n3 30\r\n1 1378716\r\n"
            ]
        ],
        "private_cases": []
    }
]