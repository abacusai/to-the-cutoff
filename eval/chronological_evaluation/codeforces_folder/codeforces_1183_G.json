[
    {
        "name": "Candy Box (hard version)",
        "description": "This problem is a version of problem D from the same contest with some\nadditional constraints and tasks. There are \n    n\n candies in a candy box.\nThe type of the \n    i\n-th candy is \n    a_i\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n). You\nhave to prepare a gift using some of these candies with the following\nrestriction: the numbers of candies of each type presented in a gift should be\nall distinct (i. e. for example, a gift having two candies of type \n    1\n and\ntwo candies of type \n    2\n is bad). It is possible that multiple types of\ncandies are completely absent from the gift. It is also possible that not all\ncandies of some types will be taken to a gift. You really like some of the\ncandies and don't want to include them into the gift, but you want to eat them\nyourself instead. For each candy, a number \n    f_i\n is given, which is equal\nto \n    0\n if you really want to keep \n    i\n-th candy for yourself, or\n\n    1\n if you don't mind including it into your gift. It is possible that two\ncandies of the same type have different values of \n    f_i\n. You want your\ngift to be as large as possible, but you don't want to include too many of the\ncandies you want to eat into the gift. So, you want to calculate the maximum\npossible number of candies that can be included into a gift, and among all\nways to choose maximum number of candies, you want to maximize the number of\ncandies having \n    f_i = 1\n in your gift. You have to answer \n    q\n\nindependent queries. If you are Python programmer, consider using PyPy instead\nof Python when you submit your code. Input The first line of the input\ncontains one integer \n    q\n (\n    1 \n    \u2264 q \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the\nnumber of queries. The first line of each query contains one integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of candies. Then \n    n\n\nlines follow, each containing two integers \n    a_i\n and \n    f_i\n (\n    1 \n    \u2264\n    a_i \n    \u2264 n\n, \n    0 \n    \u2264 f_i \n    \u2264 1\n), where \n    a_i\n is the type of the\n\n    i\n-th candy, and \n    f_i\n denotes whether you want to keep the\n\n    i\n-th candy for yourself (\n    0\n if you want to keep it, \n    1\n if you\ndon't mind giving it away). It is guaranteed that the sum of \n    n\n over all\nqueries does not exceed \n    2 \n    \u00b7 10^5\n. Output For each query print two\nintegers: the maximum number of candies in a gift you can compose, according\nto the constraints in the statement; the maximum number of candies having\n\n    f_i = 1\n in a gift you can compose that contains the maximum possible\nnumber of candies. Example Input 3 8 1 0 4 1 2 0 4 1 5 1 6 1 3 0 2 0 4 1 1 1 1\n2 1 2 1 9 2 0 2 0 4 1 4 1 4 1 7 0 7 1 7 0 7 1 Output 3 3 3 3 9 5 Note In the\nfirst query, you can include two candies of type \n    4\n and one candy of type\n\n    5\n. All of them have \n    f_i = 1\n and you don't mind giving them away as\npart of the gift.\n\n",
        "cf_contest_id": 1183,
        "cf_index": "G",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n8\r\n1 0\r\n4 1\r\n2 0\r\n4 1\r\n5 1\r\n6 1\r\n3 0\r\n2 0\r\n4\r\n1 1\r\n1 1\r\n2 1\r\n2 1\r\n9\r\n2 0\r\n2 0\r\n4 1\r\n4 1\r\n4 1\r\n7 0\r\n7 1\r\n7 0\r\n7 1\r\n",
                "3 3\r\n3 3\r\n9 5\r\n"
            ]
        ],
        "private_cases": []
    }
]