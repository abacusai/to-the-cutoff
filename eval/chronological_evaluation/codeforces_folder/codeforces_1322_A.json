[
    {
        "name": "Unusual Competitions",
        "description": "A bracketed sequence is called correct (regular) if by inserting \"+\" and \"1\"\nyou can get a well-formed mathematical expression from it. For example,\nsequences \"(())()\", \"()\" and \"(()(()))\" are correct, while \")(\", \"(()\" and\n\"(()))(\" are not. The teacher gave Dmitry's class a very strange task \u2014 she\nasked every student to come up with a sequence of arbitrary length, consisting\nonly of opening and closing brackets. After that all the students took turns\nnaming the sequences they had invented. When Dima's turn came, he suddenly\nrealized that all his classmates got the correct bracketed sequence, and\nwhether he got the correct bracketed sequence, he did not know. Dima suspects\nnow that he simply missed the word \"correct\" in the task statement, so now he\nwants to save the situation by modifying his sequence slightly. More\nprecisely, he can the arbitrary number of times (possibly zero) perform the\nreorder operation. The reorder operation consists of choosing an arbitrary\nconsecutive subsegment (substring) of the sequence and then reordering all the\ncharacters in it in an arbitrary way. Such operation takes \n    l\n\nnanoseconds, where \n    l\n is the length of the subsegment being reordered.\nIt's easy to see that reorder operation doesn't change the number of opening\nand closing brackets. For example for \"))((\" he can choose the substring \")(\"\nand do reorder \")()(\" (this operation will take \n    2\n nanoseconds). Since\nDima will soon have to answer, he wants to make his sequence correct as fast\nas possible. Help him to do this, or determine that it's impossible. Input The\nfirst line contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^6\n) \u2014\nthe length of Dima's sequence. The second line contains string of length\n\n    n\n, consisting of characters \"(\" and \")\" only. Output Print a single\ninteger \u2014 the minimum number of nanoseconds to make the sequence correct or\n\"-1\" if it is impossible to do so. Examples Input 8 ))((())( Output 6 Input 3\n(() Output -1 Note In the first example we can firstly reorder the segment\nfrom first to the fourth character, replacing it with \"()()\", the whole\nsequence will be \"()()())(\". And then reorder the segment from the seventh to\neighth character, replacing it with \"()\". In the end the sequence will be\n\"()()()()\", while the total time spent is \n    4 + 2 = 6\n nanoseconds.\n\n",
        "cf_contest_id": 1322,
        "cf_index": "A",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "8\r\n))((())(\r\n",
                "6\r\n"
            ],
            [
                "3\r\n(()\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n(\r\n",
                "-1\r\n"
            ],
            [
                "4\r\n))((\r\n",
                "4\r\n"
            ],
            [
                "51\r\n))((((((((()))(())()(()(()())()(()(())(())()())))))\r\n",
                "-1\r\n"
            ],
            [
                "4\r\n()()\r\n",
                "0\r\n"
            ],
            [
                "4\r\n)()(\r\n",
                "4\r\n"
            ],
            [
                "10\r\n(())())()(\r\n",
                "4\r\n"
            ],
            [
                "10\r\n))))((((()\r\n",
                "8\r\n"
            ],
            [
                "10\r\n())(((()))\r\n",
                "2\r\n"
            ],
            [
                "11\r\n)(())(((())\r\n",
                "-1\r\n"
            ],
            [
                "10\r\n)()()()()(\r\n",
                "10\r\n"
            ],
            [
                "50\r\n()())()))()())((())))(((((()))(((()))((((()(()))))\r\n",
                "28\r\n"
            ],
            [
                "50\r\n)()()()()()()()()()()()()()()()()()()()()()()()()(\r\n",
                "50\r\n"
            ],
            [
                "50\r\n(((((((((((((((((((((((()))))))))))))))))))))))))(\r\n",
                "2\r\n"
            ],
            [
                "100\r\n)))))))(((((((((((((((((((((((((((((((((((((((((((((((((()))))))))))))))))))))))))))))))))))))))))))\r\n",
                "14\r\n"
            ],
            [
                "100\r\n)(((((()())((())((())((()))())))))(())())()((())))(()()))(((((((()())())()(()())(((())())())())()))(\r\n",
                "20\r\n"
            ],
            [
                "100\r\n()()()()()()()()()()())(()()()()()()()()()()()()()()()()()()()())(()()()()()()()()()()()()()()()()()\r\n",
                "4\r\n"
            ],
            [
                "100\r\n((()()))(()()))(())))((()((()()))(()))())((()(())(((())())((()))())))((()(())((())(())())))(()((())(\r\n",
                "44\r\n"
            ],
            [
                "100\r\n))()()(())()()(()()())((()()())())((())())((()))(())()((()))((())())()((()())())(()())(())(()(()))((\r\n",
                "80\r\n"
            ],
            [
                "101\r\n(())))))()))()())(()))((())))((())(()()()(()()((()()((()((())))((()))()(())(()(())((()))(()))()(((()(\r\n",
                "-1\r\n"
            ],
            [
                "100\r\n)()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()(\r\n",
                "100\r\n"
            ],
            [
                "4\r\n((()\r\n",
                "-1\r\n"
            ],
            [
                "4\r\n((((\r\n",
                "-1\r\n"
            ],
            [
                "4\r\n))))\r\n",
                "-1\r\n"
            ],
            [
                "6\r\n((((()\r\n",
                "-1\r\n"
            ],
            [
                "2\r\n((\r\n",
                "-1\r\n"
            ],
            [
                "8\r\n)(((((((\r\n",
                "-1\r\n"
            ]
        ]
    }
]