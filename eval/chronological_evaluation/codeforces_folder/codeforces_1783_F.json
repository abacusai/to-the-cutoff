[
    {
        "name": "Double Sort II",
        "description": "You are given two permutations \n    a\n and \n    b\n, both of size \n    n\n. A\npermutation of size \n    n\n is an array of \n    n\n elements, where each\ninteger from \n    1\n to \n    n\n appears exactly once. The elements in each\npermutation are indexed from \n    1\n to \n    n\n. You can perform the following\noperation any number of times: choose an integer \n    i\n from \n    1\n to\n\n    n\n; let \n    x\n be the integer such that \n    a_x = i\n. Swap \n    a_i\n\nwith \n    a_x\n; let \n    y\n be the integer such that \n    b_y = i\n. Swap\n\n    b_i\n with \n    b_y\n. Your goal is to make both permutations sorted in\nascending order (i. e. the conditions \n    a_1 < a_2 < \n    \u2026 < a_n\n and\n\n    b_1 < b_2 < \n    \u2026 < b_n\n must be satisfied) using minimum number of\noperations. Note that both permutations must be sorted after you perform the\nsequence of operations you have chosen. Input The first line contains one\ninteger \n    n\n (\n    2 \n    \u2264 n \n    \u2264 3000\n). The second line contains \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n; all\n\n    a_i\n are distinct). The third line contains \n    n\n integers \n    b_1, b_2,\n    \n    \u2026, b_n\n (\n    1 \n    \u2264 b_i \n    \u2264 n\n; all \n    b_i\n are distinct).\nOutput First, print one integer \n    k\n (\n    0 \n    \u2264 k \n    \u2264 2n\n) \u2014 the\nminimum number of operations required to sort both permutations. Note that it\ncan be shown that \n    2n\n operations are always enough. Then, print \n    k\n\nintegers \n    op_1, op_2, \n    \u2026, op_k\n (\n    1 \n    \u2264 op_j \n    \u2264 n\n), where\n\n    op_j\n is the value of \n    i\n you choose during the \n    j\n-th operation.\nIf there are multiple answers, print any of them. Examples Input 5 1 3 2 4 5 2\n1 3 4 5 Output 1 2 Input 2 1 2 1 2 Output 0 Input 4 1 3 4 2 4 3 2 1 Output 2 3\n4\n\n",
        "cf_contest_id": 1783,
        "cf_index": "F",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "flows",
            "graph matchings",
            "graphs"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5\r\n1 3 2 4 5\r\n2 1 3 4 5\r\n",
                "1\r\n2 \r\n"
            ],
            [
                "2\r\n1 2\r\n1 2\r\n",
                "0\r\n\r\n"
            ],
            [
                "4\r\n1 3 4 2\r\n4 3 2 1\r\n",
                "2\r\n3 4 \r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n6 9 8 10 4 3 7 1 5 2\r\n6 5 8 3 7 10 4 2 1 9\r\n",
                "8\r\n3 4 5 6 7 8 9 10 \r\n"
            ],
            [
                "10\r\n7 10 5 8 9 3 4 6 1 2\r\n1 4 6 5 2 3 10 9 7 8\r\n",
                "8\r\n3 4 5 6 7 8 9 10 \r\n"
            ],
            [
                "10\r\n4 10 5 1 6 8 9 2 3 7\r\n2 8 5 3 1 4 6 7 10 9\r\n",
                "8\r\n2 3 4 5 6 7 8 10 \r\n"
            ],
            [
                "10\r\n1 9 7 4 2 5 3 8 6 10\r\n10 5 4 9 7 8 1 2 6 3\r\n",
                "9\r\n2 3 4 5 6 7 8 9 10 \r\n"
            ],
            [
                "10\r\n5 8 4 9 6 1 2 7 3 10\r\n8 3 10 5 1 9 7 2 6 4\r\n",
                "7\r\n1 2 4 5 8 9 10 \r\n"
            ]
        ]
    }
]