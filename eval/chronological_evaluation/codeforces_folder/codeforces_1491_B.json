[
    {
        "name": "Minimal Cost",
        "description": "There is a graph of \n    n\n rows and \n    10^6 + 2\n columns, where rows are\nnumbered from \n    1\n to \n    n\n and columns from \n    0\n to \n    10^6 + 1\n:\nLet's denote the node in the row \n    i\n and column \n    j\n by \n    (i, j)\n.\nInitially for each \n    i\n the \n    i\n-th row has exactly one obstacle \u2014 at\nnode \n    (i, a_i)\n. You want to move some obstacles so that you can reach\nnode \n    (n, 10^6+1)\n from node \n    (1, 0)\n by moving through edges of this\ngraph (you can't pass through obstacles). Moving one obstacle to an adjacent\nby edge free node costs \n    u\n or \n    v\n coins, as below: If there is an\nobstacle in the node \n    (i, j)\n, you can use \n    u\n coins to move it to\n\n    (i-1, j)\n or \n    (i+1, j)\n, if such node exists and if there is no\nobstacle in that node currently. If there is an obstacle in the node \n    (i,\n    j)\n, you can use \n    v\n coins to move it to \n    (i, j-1)\n or \n    (i,\n    j+1)\n, if such node exists and if there is no obstacle in that node\ncurrently. Note that you can't move obstacles outside the grid. For example,\nyou can't move an obstacle from \n    (1,1)\n to \n    (0,1)\n. Refer to the\npicture above for a better understanding. Now you need to calculate the\nminimal number of coins you need to spend to be able to reach node \n    (n,\n    10^6+1)\n from node \n    (1, 0)\n by moving through edges of this graph\nwithout passing through obstacles. Input The first line contains a single\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. The\nfirst line of each test case contains three integers \n    n\n, \n    u\n and\n\n    v\n (\n    2 \n    \u2264 n \n    \u2264 100\n, \n    1 \n    \u2264 u, v \n    \u2264 10^9\n) \u2014 the\nnumber of rows in the graph and the numbers of coins needed to move vertically\nand horizontally respectively. The second line of each test case contains\n\n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 10^6\n) \u2014\nwhere \n    a_i\n represents that the obstacle in the \n    i\n-th row is in node\n\n    (i, a_i)\n. It's guaranteed that the sum of \n    n\n over all test cases\ndoesn't exceed \n    2 \n    \u00b7 10^4\n. Output For each test case, output a\nsingle integer \u2014 the minimal number of coins you need to spend to be able to\nreach node \n    (n, 10^6+1)\n from node \n    (1, 0)\n by moving through edges of\nthis graph without passing through obstacles. It can be shown that under the\nconstraints of the problem there is always a way to make such a trip possible.\nExample Input 3 2 3 4 2 2 2 3 4 3 2 2 4 3 3 2 Output 7 3 3 Note In the first\nsample, two obstacles are at \n    (1, 2)\n and \n    (2,2)\n. You can move the\nobstacle on \n    (2, 2)\n to \n    (2, 3)\n, then to \n    (1, 3)\n. The total cost\nis \n    u+v = 7\n coins. In the second sample, two obstacles are at \n    (1,\n    3)\n and \n    (2,2)\n. You can move the obstacle on \n    (1, 3)\n to \n    (2,\n    3)\n. The cost is \n    u = 3\n coins.\n\n",
        "cf_contest_id": 1491,
        "cf_index": "B",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2 3 4\r\n2 2\r\n2 3 4\r\n3 2\r\n2 4 3\r\n3 2\r\n",
                "7\r\n3\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2 100 2\r\n1000000 1000000\r\n",
                "4\r\n"
            ],
            [
                "1\r\n2 100 1\r\n999999 1000000\r\n",
                "1\r\n"
            ],
            [
                "1\r\n3 1000000000 1\r\n1000000 1000000 1000000\r\n",
                "2\r\n"
            ],
            [
                "1\r\n2 1000000000 1\r\n1000000 1000000\r\n",
                "2\r\n"
            ],
            [
                "1\r\n2 2 1\r\n1000000 1000000\r\n",
                "2\r\n"
            ],
            [
                "1\r\n4 100 1\r\n999999 1000000 1000000 1000000\r\n",
                "1\r\n"
            ],
            [
                "1\r\n2 1000 1\r\n999999 1000000\r\n",
                "1\r\n"
            ],
            [
                "1\r\n3 100 1\r\n1000000 1000000 1000000\r\n",
                "2\r\n"
            ],
            [
                "1\r\n2 50 5\r\n999999 999999\r\n",
                "10\r\n"
            ],
            [
                "1\r\n2 2 1\r\n1 1000000\r\n",
                "0\r\n"
            ],
            [
                "1\r\n2 100 1\r\n1000000 1000000\r\n",
                "2\r\n"
            ],
            [
                "1\r\n2 1000000000 1\r\n999999 1000000\r\n",
                "1\r\n"
            ],
            [
                "1\r\n2 4 2\r\n999999 1000000\r\n",
                "2\r\n"
            ],
            [
                "4\r\n2 3 1\r\n999999 1000000\r\n2 3 2\r\n999999 1000000\r\n2 3 1\r\n1000000 999999\r\n2 3 1\r\n100 1000000\r\n",
                "1\r\n2\r\n1\r\n0\r\n"
            ],
            [
                "1\r\n3 1 1\r\n1000000 1000000 1000000\r\n",
                "2\r\n"
            ]
        ]
    }
]