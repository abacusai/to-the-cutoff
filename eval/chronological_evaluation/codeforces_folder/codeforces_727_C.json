[
    {
        "name": "Guess the Array",
        "description": "This is an interactive problem. You should use flush operation after each\nprinted line. For example, in C++ you should use fflush(stdout), in Java you\nshould use System.out.flush(), and in Pascal \u2014 flush(output). In this problem\nyou should guess an array a which is unknown for you. The only information you\nhave initially is the length n of the array a. The only allowed action is to\nask the sum of two elements by their indices. Formally, you can print two\nindices i and j (the indices should be distinct). Then your program should\nread the response: the single integer equals to ai + aj. It is easy to prove\nthat it is always possible to guess the array using at most n requests. Write\na program that will guess the array a by making at most n requests.\nInteraction In each test your program should guess a single array. The input\nstarts with a line containing integer n (3 \u2264 n \u2264 5000) \u2014 the length of the\narray. Your program should read it at first. After that your program should\nprint to the standard output the requests about the sum of two elements or\ninform that the array is guessed. In case your program is making a request to\nask the sum of two elements, it should print line in the format \"? i j\" (i and\nj are distinct integers between 1 and n), where i and j are indices in the\narray a. In case your program informs that the array is guessed, it should\nprint line in the format \"! a1 a2 ... an\" (it is guaranteed that all ai are\npositive integers not exceeding 10^5), where ai is the i-th element of the\narray a. The response on a request is a single integer equal to ai + aj,\nprinted on a separate line. Your program can do at most n requests. Note that\nthe final line \u00ab! a1 a2 ... an\u00bb is not counted as a request. Do not forget\nabout flush operation after each printed line. After you program prints the\nguessed array, it should terminate normally. Example Input 5 9 7 9 11 6 Output\n? 1 5 ? 2 3 ? 4 1 ? 5 2 ? 3 4 ! 4 6 1 5 5 Note The format of a test to make a\nhack is: The first line contains an integer number n (3 \u2264 n \u2264 5000) \u2014 the\nlength of the array. The second line contains n numbers a1, a2, ..., an (1 \u2264\nai \u2264 10^5) \u2014 the elements of the array to guess.\n\n",
        "cf_contest_id": 727,
        "cf_index": "C",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "interactive",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n4 6 1 5 5\r\n",
                "5 out of 5\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n1 1 1\r\n",
                "3 out of 3\r\n"
            ],
            [
                "4\r\n100 1 100 1\r\n",
                "4 out of 4\r\n"
            ],
            [
                "10\r\n9 5 10 7 4 4 8 5 10 5\r\n",
                "10 out of 10\r\n"
            ],
            [
                "3\r\n1 1 1\r\n",
                "3 out of 3\r\n"
            ],
            [
                "3\r\n100000 100000 100000\r\n",
                "3 out of 3\r\n"
            ],
            [
                "3\r\n91906 50782 19777\r\n",
                "3 out of 3\r\n"
            ],
            [
                "15\r\n5 10 10 7 7 6 4 6 8 10 8 4 10 9 4\r\n",
                "15 out of 15\r\n"
            ],
            [
                "30\r\n2 3 3 4 3 2 4 4 4 3 3 2 4 2 3 4 4 2 4 3 4 2 2 4 3 3 4 4 4 4\r\n",
                "30 out of 30\r\n"
            ],
            [
                "35\r\n4 2 2 2 4 4 3 2 4 2 2 4 2 2 3 2 3 4 4 2 3 2 2 4 3 3 3 3 4 2 3 2 2 2 3\r\n",
                "35 out of 35\r\n"
            ],
            [
                "40\r\n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\r\n",
                "40 out of 40\r\n"
            ],
            [
                "47\r\n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\r\n",
                "47 out of 47\r\n"
            ],
            [
                "100\r\n76 92 53 18 65 98 100 65 93 72 100 44 70 62 78 61 89 89 80 32 88 64 67 27 46 30 75 14 78 94 8 86 41 9 68 38 76 29 69 44 23 23 14 24 97 14 7 98 45 80 55 71 58 35 41 100 60 54 64 85 56 98 87 93 40 62 92 6 7 27 88 85 10 94 25 43 99 65 82 65 39 34 17 100 49 27 4 15 84 10 35 76 98 52 72 17 43 10 49 5\r\n",
                "100 out of 100\r\n"
            ]
        ]
    }
]