[
    {
        "name": "Paprika and Permutation",
        "description": "Paprika loves permutations. She has an array \n    a_1, a_2, \n    \u2026, a_n\n. She\nwants to make the array a permutation of integers \n    1\n to \n    n\n. In order\nto achieve this goal, she can perform operations on the array. In each\noperation she can choose two integers \n    i\n (\n    1 \n    \u2264 i \n    \u2264 n\n) and\n\n    x\n (\n    x > 0\n), then perform \n    a_i := a_i \n     x\n (that is,\nreplace \n    a_i\n by the remainder of \n    a_i\n divided by \n    x\n). In\ndifferent operations, the chosen \n    i\n and \n    x\n can be different.\nDetermine the minimum number of operations needed to make the array a\npermutation of integers \n    1\n to \n    n\n. If it is impossible, output\n\n    -1\n. A permutation is an array consisting of \n    n\n distinct integers\nfrom \n    1\n to \n    n\n in arbitrary order. For example, \n    [2,3,1,5,4]\n is\na permutation, but \n    [1,2,2]\n is not a permutation (\n    2\n appears twice\nin the array) and \n    [1,3,4]\n is also not a permutation (\n    n=3\n but there\nis \n    4\n in the array). Input Each test contains multiple test cases. The\nfirst line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014\nthe number of test cases. Description of the test cases follows. The first\nline of each test case contains an integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    10^5\n). The second line of each test case contains \n    n\n integers \n    a_1,\n    a_2, \n    \u2026, a_n\n. (\n    1 \n    \u2264 a_i \n    \u2264 10^9\n). It is guaranteed that\nthe sum of \n    n\n over all test cases does not exceed \n    2 \n    \u00b7 10^5\n.\nOutput For each test case, output the minimum number of operations needed to\nmake the array a permutation of integers \n    1\n to \n    n\n, or \n    -1\n if it\nis impossible. Example Input 4 2 1 7 3 1 5 4 4 12345678 87654321 20211218\n23571113 9 1 2 3 4 18 19 5 6 7 Output 1 -1 4 2 Note For the first test, the\nonly possible sequence of operations which minimizes the number of operations\nis: Choose \n    i=2\n, \n    x=5\n. Perform \n    a_2 := a_2 \n     5 = 2\n. For\nthe second test, it is impossible to obtain a permutation of integers from\n\n    1\n to \n    n\n.\n\n",
        "cf_contest_id": 1617,
        "cf_index": "C",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "greedy",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2\r\n1 7\r\n3\r\n1 5 4\r\n4\r\n12345678 87654321 20211218 23571113\r\n9\r\n1 2 3 4 18 19 5 6 7\r\n",
                "1\r\n-1\r\n4\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "8\r\n2\r\n2 3\r\n3\r\n3 4 5\r\n1\r\n1\r\n1\r\n2\r\n1\r\n3\r\n1\r\n4\r\n1\r\n12071207\r\n5\r\n5 5 5 9 14\r\n",
                "1\r\n2\r\n0\r\n-1\r\n1\r\n1\r\n1\r\n4\r\n"
            ]
        ]
    }
]