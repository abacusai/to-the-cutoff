[
    {
        "name": "Linear Kingdom Races",
        "description": "You are a car race organizer and would like to arrange some races in Linear\nKingdom. Linear Kingdom has n consecutive roads spanning from left to right.\nThe roads are numbered from 1 to n from left to right, thus the roads follow\nin the order of their numbers' increasing. There will be several races that\nmay be held on these roads. Each race will use a consecutive subset of these\nroads. Also, each race will pay some amount of money to you if this race is\nheld. No races overlap in time, so some roads can be used in several races.\nUnfortunately, some of the roads are in a bad condition and they need repair.\nEach road has repair costs associated with it, you are required to pay this\ncost to repair the road. A race can only take place if all the roads used in\nthe race are renovated. Your task is to repair such roads (possibly all or\nnone) that will maximize your profit. Your profit is defined as the total\nmoney you get from the races that are held minus the total money you spent to\nrepair the roads. Note that you may decide not to repair any road and gain\nzero profit. Print the maximum profit you can gain. Input The first line\ncontains two single-space separated integers, n and m (1 \u2264 n, m \u2264 2\u00b710^5),\ndenoting the number of roads and the number of races, respectively. Then n\nlines follow, each line will contain a single non-negative integer not\nexceeding 10^9 denoting the cost to repair a road. The costs are given in\norder from road 1 to road n. Finally, m lines follow. Each line is single-\nspace-separated triplets of integers. Each triplet will be given as lb, ub,\nand p (1 \u2264 lb \u2264 ub \u2264 n, 1 \u2264 p \u2264 10^9), which means that the race these three\nintegers describe will use all the roads from lb to ub, inclusive, and if it's\nheld you get p. Output Print a single integer denoting the maximum possible\nprofit you can gain. Please, do not use the \n64-bit integers in C++. It is recommended to use cin, cout stream (also you\nmay use \n3 7 7 5 Output 4 Input 2 1 0 3 1 2 5 Output 2 Input 3 1 10 10 10 1 3 10 Output\n0 Note In the first sample the optimal solution is to repair roads 1, 2, 3,\nand 7. Three races will take place which nets you 15. The road repair costs\n11, hence your profit is 4.\n\n",
        "cf_contest_id": 115,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 4\r\n3\r\n2\r\n3\r\n2\r\n1\r\n2\r\n3\r\n1 2 5\r\n2 3 5\r\n3 5 3\r\n7 7 5\r\n",
                "4\r\n"
            ],
            [
                "2 1\r\n0\r\n3\r\n1 2 5\r\n",
                "2\r\n"
            ],
            [
                "3 1\r\n10\r\n10\r\n10\r\n1 3 10\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 2\r\n10\r\n10\r\n12\r\n1 2 25\r\n2 3 5\r\n",
                "5\r\n"
            ],
            [
                "7 5\r\n1\r\n2\r\n3\r\n0\r\n5\r\n6\r\n7\r\n1 3 3\r\n1 2 3\r\n1 1 3\r\n4 6 15\r\n7 7 4\r\n",
                "7\r\n"
            ],
            [
                "5 5\r\n0\r\n0\r\n0\r\n0\r\n0\r\n1 1 1000000000\r\n2 2 1000000000\r\n3 3 1000000000\r\n4 4 1000000000\r\n5 5 1000000000\r\n",
                "5000000000\r\n"
            ],
            [
                "3 2\r\n3\r\n8\r\n3\r\n1 2 10\r\n2 3 10\r\n",
                "6\r\n"
            ],
            [
                "10 8\r\n33930500\r\n249890727\r\n553757132\r\n571301286\r\n535990315\r\n433808986\r\n428745197\r\n461561455\r\n355416641\r\n127410873\r\n1 10 419764974\r\n3 9 229470163\r\n3 10 291232092\r\n2 10 483262264\r\n3 5 561890379\r\n6 8 333274969\r\n2 9 762222268\r\n2 9 731460943\r\n",
                "60764940\r\n"
            ],
            [
                "1 1\r\n1\r\n1 1 2\r\n",
                "1\r\n"
            ],
            [
                "5 3\r\n1\r\n0\r\n0\r\n2\r\n0\r\n3 4 5\r\n3 4 1\r\n1 3 3\r\n",
                "6\r\n"
            ],
            [
                "10 8\r\n212749027\r\n472287218\r\n528909998\r\n592722741\r\n656413986\r\n521299317\r\n454014903\r\n356019417\r\n201615821\r\n190915667\r\n3 7 194993664\r\n2 10 654414593\r\n1 5 318407622\r\n4 9 78092496\r\n6 10 710430585\r\n2 8 717871540\r\n1 5 618048353\r\n2 6 354310856\r\n",
                "0\r\n"
            ],
            [
                "11 8\r\n2\r\n0\r\n0\r\n0\r\n11\r\n2\r\n9\r\n7\r\n9\r\n4\r\n3\r\n1 1 6\r\n5 5 9\r\n5 5 6\r\n3 11 7\r\n6 11 4\r\n6 11 3\r\n2 10 6\r\n5 9 9\r\n",
                "8\r\n"
            ],
            [
                "10 10\r\n0\r\n8\r\n6\r\n9\r\n3\r\n6\r\n5\r\n0\r\n4\r\n6\r\n5 9 9\r\n1 7 10\r\n2 4 1\r\n2 10 3\r\n4 7 9\r\n1 4 2\r\n5 10 2\r\n2 7 7\r\n6 7 3\r\n8 9 10\r\n",
                "10\r\n"
            ],
            [
                "10 10\r\n3\r\n4\r\n10\r\n0\r\n5\r\n1\r\n4\r\n6\r\n0\r\n4\r\n6 6 8\r\n5 10 5\r\n1 6 7\r\n1 7 4\r\n3 5 8\r\n6 6 7\r\n8 10 10\r\n1 4 10\r\n2 9 9\r\n3 7 8\r\n",
                "39\r\n"
            ],
            [
                "5 5\r\n4\r\n2\r\n4\r\n2\r\n4\r\n1 5 4\r\n1 5 3\r\n3 5 3\r\n4 5 5\r\n4 5 2\r\n",
                "1\r\n"
            ],
            [
                "3 3\r\n2\r\n3\r\n0\r\n1 3 3\r\n1 3 1\r\n1 2 2\r\n",
                "1\r\n"
            ],
            [
                "10 20\r\n0\r\n4\r\n12\r\n14\r\n2\r\n7\r\n3\r\n7\r\n0\r\n0\r\n3 4 3\r\n4 7 1\r\n6 9 5\r\n3 6 7\r\n5 9 10\r\n3 9 2\r\n2 10 13\r\n7 9 12\r\n9 9 3\r\n1 4 2\r\n3 5 8\r\n7 8 13\r\n4 10 8\r\n2 6 6\r\n4 10 1\r\n7 7 14\r\n1 9 14\r\n7 7 15\r\n8 9 10\r\n5 5 11\r\n",
                "109\r\n"
            ]
        ]
    }
]