[
    {
        "name": "The Fair Nut and the Best Path",
        "description": "The Fair Nut is going to travel to the Tree Country, in which there are\n\n    n\n cities. Most of the land of this country is covered by forest.\nFurthermore, the local road system forms a tree (connected graph without\ncycles). Nut wants to rent a car in the city \n    u\n and go by a simple path\nto city \n    v\n. He hasn't determined the path, so it's time to do it. Note\nthat chosen path can consist of only one vertex. A filling station is located\nin every city. Because of strange law, Nut can buy only \n    w_i\n liters of\ngasoline in the \n    i\n-th city. We can assume, that he has infinite money.\nEach road has a length, and as soon as Nut drives through this road, the\namount of gasoline decreases by length. Of course, Nut can't choose a path,\nwhich consists of roads, where he runs out of gasoline. He can buy gasoline in\nevery visited city, even in the first and the last. He also wants to find the\nmaximum amount of gasoline that he can have at the end of the path. Help him:\ncount it. Input The first line contains a single integer \n    n\n (\n    1 \n    \u2264\n    n \n    \u2264 3 \n    \u00b7 10^5\n) \u2014 the number of cities. The second line contains\n\n    n\n integers \n    w_1, w_2, \n    \u2026, w_n\n (\n    0 \n    \u2264 w_i\n    \u2264\n    10^9\n) \u2014 the maximum amounts of liters of gasoline that Nut can buy in\ncities. Each of the next \n    n - 1\n lines describes road and contains three\nintegers \n    u\n, \n    v\n, \n    c\n (\n    1 \n    \u2264 u, v \n    \u2264 n\n, \n    1 \n    \u2264\n    c \n    \u2264 10^9\n, \n    u \n     v\n), where \n    u\n and \n    v\n \u2014 cities that\nare connected by this road and \n    c\n \u2014 its length. It is guaranteed that\ngraph of road connectivity is a tree. Output Print one number \u2014 the maximum\namount of gasoline that he can have at the end of the path. Examples Input 3 1\n3 3 1 2 2 1 3 2 Output 3 Input 5 6 3 2 5 0 1 2 10 2 3 3 2 4 1 1 5 1 Output 7\nNote The optimal way in the first example is \n    2 \n    \u2192 1 \n    \u2192 3\n. The\noptimal way in the second example is \n    2 \n    \u2192 4\n.\n\n",
        "cf_contest_id": 1083,
        "cf_index": "A",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 3 3\r\n1 2 2\r\n1 3 2\r\n",
                "3"
            ],
            [
                "5\r\n6 3 2 5 0\r\n1 2 10\r\n2 3 3\r\n2 4 1\r\n1 5 1\r\n",
                "7"
            ]
        ],
        "private_cases": [
            [
                "1\r\n42\r\n",
                "42"
            ],
            [
                "10\r\n11 43 11 96 18 53 25 89 31 41\r\n2 4 41\r\n7 1 88\r\n3 2 19\r\n10 3 38\r\n8 4 97\r\n7 5 21\r\n7 2 71\r\n3 6 69\r\n9 5 19\r\n",
                "98"
            ],
            [
                "10\r\n28 8 0 1 5 2 9 1 2 81\r\n10 1 9\r\n6 5 78\r\n8 4 38\r\n3 10 74\r\n8 6 41\r\n7 2 21\r\n9 2 54\r\n2 6 90\r\n4 1 30\r\n",
                "100"
            ],
            [
                "10\r\n67 9 7 2 33 5 1 7 43 55\r\n2 4 38\r\n2 5 77\r\n9 8 91\r\n9 5 8\r\n10 5 4\r\n2 6 49\r\n9 1 5\r\n7 5 100\r\n3 10 13\r\n",
                "181"
            ],
            [
                "10\r\n8 63 0 10 86 14 5 49 13 5\r\n1 9 48\r\n6 9 5\r\n3 7 35\r\n9 5 3\r\n10 9 43\r\n2 6 4\r\n9 4 36\r\n8 7 10\r\n7 2 6\r\n",
                "202"
            ],
            [
                "10\r\n46 76 45 9 4 58 28 7 40 100\r\n10 2 8\r\n3 9 6\r\n6 1 9\r\n2 7 10\r\n4 6 31\r\n10 1 1\r\n8 4 29\r\n5 9 9\r\n7 5 3\r\n",
                "351"
            ],
            [
                "10\r\n81 34 31 38 69 62 54 18 72 29\r\n4 8 12\r\n2 9 25\r\n4 5 17\r\n5 7 35\r\n10 1 13\r\n9 3 53\r\n7 6 22\r\n1 6 82\r\n3 10 42\r\n",
                "187"
            ],
            [
                "10\r\n80 63 78 18 65 77 24 83 79 48\r\n5 3 67\r\n1 8 4\r\n1 2 83\r\n7 4 16\r\n6 7 50\r\n3 9 27\r\n10 7 74\r\n2 3 21\r\n10 2 47\r\n",
                "248"
            ],
            [
                "10\r\n96 72 39 45 93 64 13 7 3 28\r\n9 1 18\r\n1 7 15\r\n1 10 52\r\n4 1 93\r\n1 6 94\r\n1 5 23\r\n1 2 20\r\n8 1 13\r\n3 1 34\r\n",
                "218"
            ],
            [
                "10\r\n19 48 77 50 74 26 8 10 47 7\r\n6 9 95\r\n3 9 94\r\n9 7 76\r\n5 9 95\r\n8 9 4\r\n2 4 85\r\n1 2 77\r\n4 10 29\r\n1 9 60\r\n",
                "77"
            ],
            [
                "10\r\n4 85 87 24 19 100 27 73 89 46\r\n5 4 63\r\n8 9 18\r\n7 9 98\r\n8 1 61\r\n7 2 17\r\n3 9 39\r\n10 8 57\r\n1 4 80\r\n6 1 10\r\n",
                "225"
            ],
            [
                "4\r\n10408 544831 53650 494619\r\n1 4 682017\r\n4 3 46433\r\n4 2 98094\r\n",
                "948573"
            ]
        ]
    }
]