[
    {
        "name": "Beaver's Calculator 1.0",
        "description": "The Smart Beaver from ABBYY has once again surprised us! He has developed a\nnew calculating device, which he called the \"Beaver's Calculator 1.0\". It is\nvery peculiar and it is planned to be used in a variety of scientific\nproblems. To test it, the Smart Beaver invited n scientists, numbered from 1\nto n. The i-th scientist brought ki calculating problems for the device\ndeveloped by the Smart Beaver from ABBYY. The problems of the i-th scientist\nare numbered from 1 to ki, and they must be calculated sequentially in the\ndescribed order, since calculating each problem heavily depends on the results\nof calculating of the previous ones. Each problem of each of the n scientists\nis described by one integer ai, j, where i (1 \u2264 i \u2264 n) is the number of the\nscientist, j (1 \u2264 j \u2264 ki) is the number of the problem, and ai, j is the\nnumber of resource units the calculating device needs to solve this problem.\nThe calculating device that is developed by the Smart Beaver is pretty\nunusual. It solves problems sequentially, one after another. After some\nproblem is solved and before the next one is considered, the calculating\ndevice allocates or frees resources. The most expensive operation for the\ncalculating device is freeing resources, which works much slower than\nallocating them. It is therefore desirable that each next problem for the\ncalculating device requires no less resources than the previous one. You are\ngiven the information about the problems the scientists offered for the\ntesting. You need to arrange these problems in such an order that the number\nof adjacent \"bad\" pairs of problems in this list is minimum possible. We will\ncall two consecutive problems in this list a \"bad pair\" if the problem that is\nperformed first requires more resources than the one that goes after it. Do\nnot forget that the problems of the same scientist must be solved in a fixed\norder. Input The first line contains integer n \u2014 the number of scientists. To\nlessen the size of the input, each of the next n lines contains five integers\nki, ai, 1, xi, yi, mi (0 \u2264 ai, 1 < mi \u2264 10^9, 1 \u2264 xi, yi \u2264 10^9) \u2014 the number\nof problems of the i-th scientist, the resources the first problem requires\nand three parameters that generate the subsequent values of ai, j. For all j\nfrom 2 to ki, inclusive, you should calculate value ai, j by formula ai, j =\n(ai, j - 1 * xi + yi) mod mi, where a mod b is the operation of taking the\nremainder of division of number a by number b. To get the full points for the\nfirst group of tests it is sufficient to solve the problem with n = 2, 1 \u2264 ki\n\u2264 2000. To get the full points for the second group of tests it is sufficient\nto solve the problem with n = 2, 1 \u2264 ki \u2264 200000. To get the full points for\nthe third group of tests it is sufficient to solve the problem with 1 \u2264 n \u2264\n5000, 1 \u2264 ki \u2264 5000. Output On the first line print a single number \u2014 the\nnumber of \"bad\" pairs in the optimal order. If the total number of problems\ndoes not exceed 200000, also print lines \u2014 the optimal order of the problems.\nOn each of these lines print two integers separated by a single space \u2014 the\nrequired number of resources for the problem and the number of the scientist\nwho offered this problem, respectively. The scientists are numbered from 1 to\nn in the order of input. Examples Input 2 2 1 1 1 10 2 3 1 1 10 Output 0 1 1 2\n1 3 2 4 2 Input 2 3 10 2 3 1000 3 100 1 999 1000 Output 2 10 1 23 1 49 1 100 2\n99 2 98 2 Note In the first sample n = 2, k1 = 2, a1, 1 = 1, a1, 2 = 2, k2 =\n2, a2, 1 = 3, a2, 2 = 4. We've got two scientists, each of them has two\ncalculating problems. The problems of the first scientist require 1 and 2\nresource units, the problems of the second one require 3 and 4 resource units.\nLet's list all possible variants of the calculating order (each problem is\ncharacterized only by the number of resource units it requires): (1, 2, 3, 4),\n(1, 3, 2, 4), (3, 1, 2, 4), (1, 3, 4, 2), (3, 4, 1, 2), (3, 1, 4, 2). Sequence\nof problems (1, 3, 2, 4) has one \"bad\" pair (3 and 2), (3, 1, 4, 2) has two\n\"bad\" pairs (3 and 1, 4 and 2), and (1, 2, 3, 4) has no \"bad\" pairs.\n\n",
        "cf_contest_id": 207,
        "cf_index": "A2",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n2 1 1 1 10\r\n2 3 1 1 10\r\n",
                "0\r\n1 1\r\n2 1\r\n3 2\r\n4 2\r\n"
            ],
            [
                "2\r\n3 10 2 3 1000\r\n3 100 1 999 1000\r\n",
                "2\r\n10 1\r\n23 1\r\n49 1\r\n100 2\r\n99 2\r\n98 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1 123 999 123 19999\r\n1 456 1925 91285 98259128\r\n",
                "0\r\n123 1\r\n456 2\r\n"
            ],
            [
                "2\r\n4 1 1 2 4\r\n3 2 1 2 7\r\n",
                "1\r\n1 1\r\n2 2\r\n3 1\r\n4 2\r\n6 2\r\n1 1\r\n3 1\r\n"
            ],
            [
                "2\r\n5 737247526 385663770 400009853 926128972\r\n5 134299091 206672784 206760990 541043536\r\n",
                "3\r\n134299091 2\r\n459727998 2\r\n737247526 1\r\n323142350 2\r\n639125725 1\r\n35294494 2\r\n347009055 1\r\n369253646 2\r\n290041467 1\r\n865957427 1\r\n"
            ],
            [
                "2\r\n12 103331584 83190780 257226870 965727680\r\n23 412354004 294233930 431595244 480491361\r\n",
                "11\r\n103331584 1\r\n412354004 2\r\n435628220 2\r\n633655350 1\r\n964448030 1\r\n216327929 2\r\n234949310 1\r\n304722095 2\r\n114688830 1\r\n149234819 2\r\n77046910 1\r\n123716165 2\r\n240895870 1\r\n246687230 1\r\n258650321 2\r\n362553134 2\r\n948711230 1\r\n124930805 2\r\n428623870 1\r\n857782270 1\r\n46056443 2\r\n170793167 2\r\n563490110 1\r\n7158164 2\r\n376393667 2\r\n464252900 2\r\n385994426 2\r\n262575284 2\r\n28423751 2\r\n128998211 2\r\n416654825 2\r\n386313017 2\r\n43476341 2\r\n386818340 2\r\n449429252 2\r\n"
            ],
            [
                "2\r\n1 644201782 61555067 825933028 769955674\r\n200000 513059522 978111349 145745825 792683341\r\n",
                "100012\r\n"
            ],
            [
                "2\r\n200000 364522930 471220742 3323454 898470369\r\n1 455449111 241916205 932024383 843764754\r\n",
                "99968\r\n"
            ],
            [
                "2\r\n200000 596139600 721828529 162089919 884793357\r\n200000 82866203 974141290 760973131 266072600\r\n",
                "100072\r\n"
            ],
            [
                "2\r\n123456 508797064 754997283 381963459 812482957\r\n192929 127476548 756426200 227737142 482639687\r\n",
                "96654\r\n"
            ],
            [
                "2\r\n95823 569910999 797163896 149950733 920802531\r\n129893 50778580 468222081 947168081 211361337\r\n",
                "64903\r\n"
            ],
            [
                "2\r\n199259 641597876 874636940 764816019 656105016\r\n51285 310517513 469223007 415463849 968409867\r\n",
                "99509\r\n"
            ],
            [
                "2\r\n200000 244644091 1 28513600 392966151\r\n200000 164724505 1 79354821 795427903\r\n",
                "19952\r\n"
            ],
            [
                "2\r\n200000 178462071 1 453732541 491259366\r\n200000 231385928 1 242542063 254641752\r\n",
                "190496\r\n"
            ],
            [
                "2\r\n200000 361194717 1 31742964 989672650\r\n10000 868472256 1 7588303 965600016\r\n",
                "6415\r\n"
            ],
            [
                "2\r\n10000 794234172 1 832139239 832255495\r\n200000 326347845 1 723997111 803708338\r\n",
                "180163\r\n"
            ],
            [
                "2\r\n200000 45440119 1 389 465390917\r\n199990 18589376 1 407 356819626\r\n",
                "0\r\n"
            ],
            [
                "2\r\n199994 79428345 1 876640837 876641858\r\n200000 73442706 1 620545151 620545186\r\n",
                "199999\r\n"
            ],
            [
                "2\r\n76545 44608612 589345778 6920255 654664883\r\n123456 61295902 391408811 636222520 386531264\r\n",
                "61685\r\n"
            ],
            [
                "2\r\n199581 189325457 172437388 975655236 197578293\r\n420 138568681 827248635 161099789 339689120\r\n",
                "99515\r\n"
            ],
            [
                "2\r\n77777 145184541 194793384 339601722 348499667\r\n122265 175505092 592656277 474753343 412812910\r\n",
                "61166\r\n"
            ]
        ]
    }
]