[
    {
        "name": "New Year Permutations",
        "description": "Yeah, we failed to make up a New Year legend for this problem. A permutation\nof length \n    n\n is an array of \n    n\n integers such that every integer from\n\n    1\n to \n    n\n appears in it exactly once. An element \n    y\n of\npermutation \n    p\n is reachable from element \n    x\n if \n    x = y\n, or\n\n    p_x = y\n, or \n    p_p_x = y\n, and so on. The decomposition of a\npermutation \n    p\n is defined as follows: firstly, we have a permutation\n\n    p\n, all elements of which are not marked, and an empty list \n    l\n. Then\nwe do the following: while there is at least one not marked element in\n\n    p\n, we find the leftmost such element, list all elements that are\nreachable from it in the order they appear in \n    p\n, mark all of these\nelements, then cyclically shift the list of those elements so that the maximum\nappears at the first position, and add this list as an element of \n    l\n.\nAfter all elements are marked, \n    l\n is the result of this decomposition.\nFor example, if we want to build a decomposition of \n    p = [5, 4, 2, 3, 1, 7,\n    8, 6]\n, we do the following: initially \n    p = [5, 4, 2, 3, 1, 7, 8, 6]\n\n(bold elements are marked), \n    l = []\n; the leftmost unmarked element is\n\n    5\n; \n    5\n and \n    1\n are reachable from it, so the list we want to\nshift is \n    [5, 1]\n; there is no need to shift it, since maximum is already\nthe first element; \n    p = [\n    5, 4, 2, 3, \n    1, 7, 8, 6]\n,\n\n    l = [[5, 1]]\n; the leftmost unmarked element is \n    4\n, the list of\nreachable elements is \n    [4, 2, 3]\n; the maximum is already the first\nelement, so there's no need to shift it; \n    p = [\n    5, \n    4,\n    \n    2, \n    3, \n    1, 7, 8, 6]\n, \n    l = [[5, 1], [4, 2,\n    3]]\n; the leftmost unmarked element is \n    7\n, the list of reachable\nelements is \n    [7, 8, 6]\n; we have to shift it, so it becomes \n    [8, 6,\n    7]\n; \n    p = [\n    5, \n    4, \n    2, \n    3,\n    \n    1, \n    7, \n    8, \n    6]\n, \n    l = [[5, 1],\n    [4, 2, 3], [8, 6, 7]]\n; all elements are marked, so \n    [[5, 1], [4, 2, 3],\n    [8, 6, 7]]\n is the result. The New Year transformation of a permutation is\ndefined as follows: we build the decomposition of this permutation; then we\nsort all lists in decomposition in ascending order of the first elements (we\ndon't swap the elements in these lists, only the lists themselves); then we\nconcatenate the lists into one list which becomes a new permutation. For\nexample, the New Year transformation of \n    p = [5, 4, 2, 3, 1, 7, 8, 6]\n is\nbuilt as follows: the decomposition is \n    [[5, 1], [4, 2, 3], [8, 6, 7]]\n;\nafter sorting the decomposition, it becomes \n    [[4, 2, 3], [5, 1], [8, 6,\n    7]]\n; \n    [4, 2, 3, 5, 1, 8, 6, 7]\n is the result of the transformation. We\ncall a permutation good if the result of its transformation is the same as the\npermutation itself. For example, \n    [4, 3, 1, 2, 8, 5, 6, 7]\n is a good\npermutation; and \n    [5, 4, 2, 3, 1, 7, 8, 6]\n is bad, since the result of\ntransformation is \n    [4, 2, 3, 5, 1, 8, 6, 7]\n. Your task is the following:\ngiven \n    n\n and \n    k\n, find the \n    k\n-th (lexicographically) good\npermutation of length \n    n\n. Input The first line contains one integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of test cases. Then the test\ncases follow. Each test case is represented by one line containing two\nintegers \n    n\n and \n    k\n (\n    1 \n    \u2264 n \n    \u2264 50\n, \n    1 \n    \u2264 k \n    \u2264\n    10^18\n). Output For each test case, print the answer to it as follows: if\nthe number of good permutations of length \n    n\n is less than \n    k\n, print\none integer \n    -1\n; otherwise, print the \n    k\n-th good permutation on\n\n    n\n elements (in lexicographical order). Example Input 5 3 3 5 15 4 13 6 8\n4 2 Output 2 1 3 3 1 2 5 4 -1 1 2 6 3 4 5 1 2 4 3\n\n",
        "cf_contest_id": 1279,
        "cf_index": "E",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "dp"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3 3\r\n5 15\r\n4 13\r\n6 8\r\n4 2\r\n",
                "2 1 3\r\n3 1 2 5 4\r\n-1\r\n1 2 6 3 4 5\r\n1 2 4 3\r\n"
            ]
        ],
        "private_cases": []
    }
]