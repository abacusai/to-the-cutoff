[
    {
        "name": "Multi-core Processor",
        "description": "The research center Q has developed a new multi-core processor. The processor\nconsists of n cores and has k cells of cache memory. Consider the work of this\nprocessor. At each cycle each core of the processor gets one instruction:\neither do nothing, or the number of the memory cell (the core will write an\ninformation to the cell). After receiving the command, the core executes it\nimmediately. Sometimes it happens that at one cycle, multiple cores try to\nwrite the information into a single cell. Unfortunately, the developers did\nnot foresee the possibility of resolving conflicts between cores, so in this\ncase there is a deadlock: all these cores and the corresponding memory cell\nare locked forever. Each of the locked cores ignores all further commands, and\nno core in the future will be able to record an information into the locked\ncell. If any of the cores tries to write an information into some locked cell,\nit is immediately locked. The development team wants to explore the deadlock\nsituation. Therefore, they need a program that will simulate the processor for\na given set of instructions for each core within m cycles . You're lucky, this\ninteresting work is entrusted to you. According to the instructions, during\nthe m cycles define for each core the number of the cycle, during which it\nwill become locked. It is believed that initially all cores and all memory\ncells are not locked. Input The first line contains three integers n, m, k (1\n\u2264 n, m, k \u2264 100). Then follow n lines describing instructions. The i-th line\ncontains m integers: xi1, xi2, ..., xim (0 \u2264 xij \u2264 k), where xij is the\ninstruction that must be executed by the i-th core at the j-th cycle. If xij\nequals 0, then the corresponding instruction is \u00abdo nothing\u00bb. But if xij is a\nnumber from 1 to k, then the corresponding instruction is \u00abwrite information\nto the memory cell number xij\u00bb. We assume that the cores are numbered from 1\nto n, the work cycles are numbered from 1 to m and the memory cells are\nnumbered from 1 to k. Output Print n lines. In the i-th line print integer ti.\nThis number should be equal to 0 if the i-th core won't be locked, or it\nshould be equal to the number of the cycle when this core will be locked.\nExamples Input 4 3 5 1 0 0 1 0 2 2 3 1 3 2 0 Output 1 1 3 0 Input 3 2 2 1 2 1\n2 2 2 Output 1 1 0 Input 1 1 1 0 Output 0\n\n",
        "cf_contest_id": 411,
        "cf_index": "B",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 3 5\r\n1 0 0\r\n1 0 2\r\n2 3 1\r\n3 2 0\r\n",
                "1\r\n1\r\n3\r\n0\r\n"
            ],
            [
                "3 2 2\r\n1 2\r\n1 2\r\n2 2\r\n",
                "1\r\n1\r\n0\r\n"
            ],
            [
                "1 1 1\r\n0\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1 1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "2 1 1\r\n1\r\n1\r\n",
                "1\r\n1\r\n"
            ],
            [
                "2 1 1\r\n1\r\n0\r\n",
                "0\r\n0\r\n"
            ],
            [
                "2 1 1\r\n0\r\n1\r\n",
                "0\r\n0\r\n"
            ],
            [
                "2 1 1\r\n0\r\n0\r\n",
                "0\r\n0\r\n"
            ],
            [
                "2 1 2\r\n1\r\n2\r\n",
                "0\r\n0\r\n"
            ],
            [
                "2 1 1\r\n1\r\n1\r\n",
                "1\r\n1\r\n"
            ],
            [
                "2 2 2\r\n2 1\r\n0 2\r\n",
                "0\r\n0\r\n"
            ],
            [
                "1 100 100\r\n32 97 28 73 22 27 27 21 25 26 21 95 45 60 47 64 44 88 24 10 82 55 84 69 86 70 99 99 34 59 71 83 53 90 29 100 98 68 24 82 5 67 49 70 23 85 5 90 57 0 99 26 32 11 81 92 6 45 32 72 54 32 20 37 40 33 55 55 33 61 13 31 67 51 74 96 67 13 28 3 23 99 26 6 91 95 67 29 46 78 85 17 47 83 26 51 88 31 37 15\r\n",
                "0\r\n"
            ],
            [
                "100 1 100\r\n59\r\n37\r\n53\r\n72\r\n37\r\n15\r\n8\r\n93\r\n92\r\n74\r\n11\r\n11\r\n68\r\n16\r\n92\r\n40\r\n76\r\n20\r\n10\r\n86\r\n76\r\n5\r\n9\r\n95\r\n5\r\n81\r\n44\r\n57\r\n10\r\n24\r\n22\r\n2\r\n57\r\n6\r\n26\r\n67\r\n48\r\n95\r\n34\r\n97\r\n55\r\n33\r\n70\r\n66\r\n51\r\n70\r\n74\r\n65\r\n35\r\n85\r\n37\r\n9\r\n27\r\n43\r\n65\r\n6\r\n5\r\n57\r\n54\r\n27\r\n22\r\n41\r\n8\r\n29\r\n10\r\n50\r\n9\r\n68\r\n78\r\n9\r\n92\r\n30\r\n88\r\n62\r\n30\r\n5\r\n80\r\n58\r\n19\r\n39\r\n22\r\n88\r\n81\r\n34\r\n36\r\n18\r\n28\r\n93\r\n64\r\n27\r\n47\r\n89\r\n30\r\n21\r\n24\r\n42\r\n34\r\n100\r\n27\r\n46\r\n",
                "0\r\n1\r\n0\r\n0\r\n1\r\n0\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n0\r\n1\r\n0\r\n1\r\n0\r\n1\r\n0\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n0\r\n1\r\n1\r\n1\r\n1\r\n0\r\n1\r\n1\r\n0\r\n0\r\n0\r\n1\r\n1\r\n0\r\n0\r\n0\r\n1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n1\r\n1\r\n1\r\n1\r\n0\r\n1\r\n1\r\n0\r\n1\r\n0\r\n1\r\n0\r\n1\r\n1\r\n0\r\n1\r\n1\r\n1\r\n1\r\n0\r\n1\r\n1\r\n0\r\n0\r\n0\r\n0\r\n1\r\n1\r\n1\r\n1\r\n0\r\n0\r\n0\r\n1\r\n0\r\n1\r\n0\r\n0\r\n1\r\n0\r\n1\r\n0\r\n1\r\n0\r\n1\r\n0\r\n"
            ],
            [
                "1 100 10\r\n7 2 8 3 0 10 0 3 0 5 3 6 4 1 2 2 5 1 7 10 7 9 10 6 2 8 6 10 0 10 4 4 4 9 7 0 0 8 6 2 2 4 10 10 5 9 4 6 1 1 9 7 2 7 4 7 2 2 3 3 10 3 8 1 0 4 3 10 9 8 6 2 10 7 5 10 0 3 6 2 3 6 6 2 5 9 10 0 10 4 10 3 4 2 2 10 4 5 7 8\r\n",
                "0\r\n"
            ],
            [
                "100 1 10\r\n10\r\n6\r\n8\r\n2\r\n4\r\n3\r\n3\r\n2\r\n0\r\n2\r\n10\r\n5\r\n10\r\n4\r\n10\r\n2\r\n6\r\n9\r\n1\r\n1\r\n1\r\n3\r\n7\r\n3\r\n9\r\n10\r\n6\r\n1\r\n4\r\n1\r\n4\r\n1\r\n4\r\n4\r\n5\r\n1\r\n9\r\n4\r\n10\r\n3\r\n3\r\n2\r\n8\r\n10\r\n1\r\n2\r\n10\r\n4\r\n8\r\n8\r\n4\r\n8\r\n6\r\n3\r\n8\r\n6\r\n8\r\n1\r\n2\r\n3\r\n2\r\n2\r\n9\r\n4\r\n1\r\n10\r\n10\r\n7\r\n8\r\n10\r\n8\r\n8\r\n10\r\n9\r\n2\r\n0\r\n5\r\n0\r\n9\r\n0\r\n2\r\n6\r\n7\r\n4\r\n5\r\n4\r\n2\r\n3\r\n1\r\n9\r\n7\r\n0\r\n10\r\n7\r\n2\r\n1\r\n1\r\n9\r\n6\r\n7\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n0\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n0\r\n1\r\n0\r\n1\r\n0\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n0\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "7 2 98\r\n0 72\r\n71 26\r\n87 23\r\n26 37\r\n65 97\r\n81 30\r\n19 83\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ]
        ]
    }
]