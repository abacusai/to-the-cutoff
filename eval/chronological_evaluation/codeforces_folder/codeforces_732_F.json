[
    {
        "name": "Tourist Reform",
        "description": "Berland is a tourist country! At least, it can become such \u2014 the government of\nBerland is confident about this. There are n cities in Berland, some pairs of\nwhich are connected by two-ways roads. Each road connects two different\ncities. In Berland there are no roads which connect the same pair of cities.\nIt is possible to get from any city to any other city using given two-ways\nroads. According to the reform each road will become one-way. It will be\noriented to one of two directions. To maximize the tourist attraction of\nBerland, after the reform for each city i the value ri will be calculated. It\nwill equal to the number of cities x for which there is an oriented path from\nthe city i to the city x. In other words, ri will equal the number of cities\nwhich can be reached from the city i by roads. The government is sure that\ntourist's attention will be focused on the minimum value of ri. Help the\ngovernment of Berland make the reform to maximize the minimum of ri. Input The\nfirst line contains two integers n, m (2 \u2264 n \u2264 400 000, 1 \u2264 m \u2264 400 000) \u2014 the\nnumber of cities and the number of roads. The next m lines describe roads in\nBerland: the j-th of them contains two integers uj and vj (1 \u2264 uj, vj \u2264 n, uj\n\u2260 vj), where uj and vj are the numbers of cities which are connected by the\nj-th road. The cities are numbered from 1 to n. It is guaranteed that it is\npossible to get from any city to any other by following two-ways roads. In\nBerland there are no roads which connect the same pair of cities. Output In\nthe first line print single integer \u2014 the maximum possible value min1 \u2264 i \u2264\nnri after the orientation of roads. The next m lines must contain the\ndescription of roads after the orientation: the j-th of them must contain two\nintegers uj, vj, it means that the j-th road will be directed from the city uj\nto the city vj. Print roads in the same order as they are given in the input\ndata. Example Input 7 9 4 3 2 6 7 1 4 1 7 3 3 5 7 4 6 5 2 5 Output 4 4 3 6 2 7\n1 1 4 3 7 5 3 7 4 5 6 2 5\n\n",
        "cf_contest_id": 732,
        "cf_index": "F",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graphs"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 9\r\n4 3\r\n2 6\r\n7 1\r\n4 1\r\n7 3\r\n3 5\r\n7 4\r\n6 5\r\n2 5\r\n",
                "4\r\n4 3\r\n2 6\r\n7 1\r\n1 4\r\n3 7\r\n5 3\r\n7 4\r\n6 5\r\n5 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1\r\n2 1\r\n",
                "1\r\n2 1\r\n"
            ],
            [
                "3 2\r\n1 3\r\n1 2\r\n",
                "1\r\n3 1\r\n2 1\r\n"
            ],
            [
                "3 3\r\n3 1\r\n3 2\r\n1 2\r\n",
                "3\r\n3 1\r\n2 3\r\n1 2\r\n"
            ],
            [
                "4 3\r\n3 4\r\n2 4\r\n1 4\r\n",
                "1\r\n3 4\r\n2 4\r\n4 1\r\n"
            ],
            [
                "12 16\r\n12 3\r\n10 12\r\n12 9\r\n4 10\r\n1 12\r\n10 6\r\n2 4\r\n7 10\r\n3 8\r\n9 8\r\n10 5\r\n1 11\r\n2 11\r\n11 10\r\n12 2\r\n3 10\r\n",
                "9\r\n3 12\r\n12 10\r\n12 9\r\n4 10\r\n12 1\r\n6 10\r\n2 4\r\n7 10\r\n8 3\r\n9 8\r\n5 10\r\n1 11\r\n11 2\r\n10 11\r\n12 2\r\n10 3\r\n"
            ],
            [
                "12 16\r\n12 5\r\n11 7\r\n1 8\r\n6 3\r\n3 4\r\n8 5\r\n3 10\r\n3 5\r\n2 9\r\n7 3\r\n6 2\r\n5 2\r\n1 10\r\n9 5\r\n4 7\r\n4 8\r\n",
                "10\r\n12 5\r\n11 7\r\n8 1\r\n6 3\r\n4 3\r\n5 8\r\n10 3\r\n3 5\r\n9 2\r\n3 7\r\n2 6\r\n5 2\r\n1 10\r\n5 9\r\n7 4\r\n8 4\r\n"
            ],
            [
                "12 16\r\n10 2\r\n9 6\r\n6 2\r\n12 1\r\n5 11\r\n11 12\r\n1 4\r\n9 10\r\n12 8\r\n4 8\r\n6 4\r\n2 12\r\n8 7\r\n3 10\r\n2 5\r\n7 12\r\n",
                "11\r\n10 2\r\n6 9\r\n2 6\r\n12 1\r\n5 11\r\n11 12\r\n1 4\r\n9 10\r\n12 8\r\n8 4\r\n4 6\r\n12 2\r\n7 8\r\n3 10\r\n2 5\r\n12 7\r\n"
            ],
            [
                "12 16\r\n2 8\r\n1 11\r\n7 12\r\n12 4\r\n6 12\r\n7 2\r\n2 9\r\n1 6\r\n5 7\r\n7 3\r\n8 10\r\n2 5\r\n8 6\r\n2 3\r\n2 1\r\n6 11\r\n",
                "9\r\n8 2\r\n11 1\r\n7 12\r\n4 12\r\n12 6\r\n2 7\r\n9 2\r\n1 6\r\n7 5\r\n7 3\r\n10 8\r\n5 2\r\n6 8\r\n3 2\r\n1 2\r\n6 11\r\n"
            ],
            [
                "12 16\r\n5 11\r\n9 11\r\n11 8\r\n2 5\r\n8 7\r\n12 11\r\n3 8\r\n3 1\r\n3 6\r\n12 10\r\n7 6\r\n5 1\r\n10 1\r\n7 4\r\n5 6\r\n11 6\r\n",
                "9\r\n5 11\r\n9 11\r\n11 8\r\n2 5\r\n8 7\r\n12 11\r\n8 3\r\n3 1\r\n3 6\r\n10 12\r\n7 6\r\n1 5\r\n1 10\r\n4 7\r\n6 5\r\n11 6\r\n"
            ],
            [
                "5 5\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n4 2\r\n",
                "3\r\n1 2\r\n3 2\r\n4 3\r\n5 4\r\n2 4\r\n"
            ]
        ]
    }
]