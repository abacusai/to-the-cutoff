[
    {
        "name": "Chain Reaction",
        "description": "Group of Berland scientists, with whom you have a close business relationship,\nmakes a research in the area of peaceful nuclear energy. In particular, they\nfound that a group of four nanobots, placed on a surface of a plate, can run a\npowerful chain reaction under certain conditions. To be precise, researchers\nintroduced a rectangular Cartesian coordinate system on a flat plate and\nselected four distinct points with integer coordinates where bots will be\nplaced initially. Next each bot will be assigned with one of the four\ndirections (up, down, left or right) parallel to the coordinate axes. After\nthat, each bot is shifted by an integer distance (which may be different for\ndifferent bots) along its direction. The chain reaction starts, if the bots\nare in the corners of a square with positive area with sides parallel to the\ncoordinate axes. Each corner of the square must contain one nanobot. This\nreaction will be stronger, if bots spend less time to move. We can assume that\nbots move with unit speed. In other words, the lesser is the maximum length\ntraveled by bot, the stronger is reaction. Scientists have prepared a set of\nplates and selected starting position for the bots for each plate. Now they\nask you to assign the direction for each bot to move after landing such that\nthe maximum length traveled by bot is as small as possible. Input The first\nline contains an integer number t (1 \u2264 t \u2264 50) \u2014 the number of plates. t\ndescriptions of plates follow. A description of each plate consists of four\nlines. Each line consists of a pair of integers numbers xi, yi ( - 10^8 \u2264 xi,\nyi \u2264 10^8) \u2014 coordinates of the next bot. All bots are in different locations.\nNote, though, the problem can include several records in one test, you can\nhack other people's submissions only with the test of one plate, i.e.\nparameter t in a hack test should be equal to 1. Output Print answers for all\nplates separately. First goes a single integer number in a separate line. If\nscientists have made an unfortunate mistake and nanobots are not able to form\nthe desired square, print -1. Otherwise, print the minimum possible length of\nthe longest bot's path. If a solution exists, in the next four lines print two\ninteger numbers \u2014 positions of each bot after moving. Print bots' positions in\nthe order they are specified in the input data. If there are multiple\nsolution, you can print any of them. Examples Input 2 1 1 1 -1 -1 1 -1 -1 1 1\n2 2 4 4 6 6 Output 0 1 1 1 -1 -1 1 -1 -1 -1\n\n",
        "cf_contest_id": 666,
        "cf_index": "D",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "geometry"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n1 1\r\n1 -1\r\n-1 1\r\n-1 -1\r\n1 1\r\n2 2\r\n4 4\r\n6 6\r\n",
                "0\r\n1 1\r\n1 -1\r\n-1 1\r\n-1 -1\r\n-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n31 85\r\n9 49\r\n52 57\r\n11 85\r\n",
                "15\r\n37 85\r\n9 57\r\n37 57\r\n9 85\r\n"
            ],
            [
                "1\r\n183 65\r\n100 121\r\n138 31\r\n81 31\r\n",
                "49\r\n183 114\r\n100 114\r\n183 31\r\n100 31\r\n"
            ],
            [
                "1\r\n152 76\r\n152 112\r\n118 17\r\n83 129\r\n",
                "59\r\n152 17\r\n152 86\r\n83 17\r\n83 86\r\n"
            ],
            [
                "1\r\n54 42\r\n41 32\r\n83 57\r\n83 28\r\n",
                "19\r\n54 61\r\n54 32\r\n83 61\r\n83 32\r\n"
            ],
            [
                "1\r\n41 153\r\n-6 153\r\n112 92\r\n6 83\r\n",
                "45\r\n67 153\r\n6 153\r\n67 92\r\n6 92\r\n"
            ],
            [
                "1\r\n78 92\r\n98 10\r\n40 -17\r\n122 112\r\n",
                "38\r\n40 92\r\n122 10\r\n40 10\r\n122 92\r\n"
            ],
            [
                "1\r\n97 85\r\n108 10\r\n24 91\r\n29 10\r\n",
                "9\r\n99 85\r\n99 10\r\n24 85\r\n24 10\r\n"
            ],
            [
                "1\r\n3 0\r\n5 0\r\n4 9\r\n5 9\r\n",
                "4\r\n0 0\r\n9 0\r\n0 9\r\n9 9\r\n"
            ],
            [
                "1\r\n-5 -1\r\n-4 -6\r\n-11 -6\r\n-4 -1\r\n",
                "3\r\n-8 -1\r\n-3 -6\r\n-8 -6\r\n-3 -1\r\n"
            ],
            [
                "1\r\n-5 -2\r\n-3 -5\r\n-1 -1\r\n-4 -4\r\n",
                "2\r\n-4 -2\r\n-1 -5\r\n-1 -2\r\n-4 -5\r\n"
            ],
            [
                "1\r\n35 23\r\n49 28\r\n28 28\r\n23 23\r\n",
                "11\r\n38 23\r\n38 28\r\n33 28\r\n33 23\r\n"
            ],
            [
                "1\r\n0 3\r\n0 14\r\n10 3\r\n10 8\r\n",
                "3\r\n0 1\r\n0 11\r\n10 1\r\n10 11\r\n"
            ],
            [
                "1\r\n7434523 11523154\r\n7611807 5876512\r\n3910524 11523154\r\n3373024 5876512\r\n",
                "1061322\r\n8495844 11523154\r\n8495844 5876512\r\n2849202 11523154\r\n2849202 5876512\r\n"
            ],
            [
                "1\r\n-100000000 -100000000\r\n-100000000 100000000\r\n100000000 -100000000\r\n100000000 100000000\r\n",
                "0\r\n-100000000 -100000000\r\n-100000000 100000000\r\n100000000 -100000000\r\n100000000 100000000\r\n"
            ],
            [
                "1\r\n-100000000 -100000000\r\n100000000 -100000000\r\n-100000000 100000000\r\n100000000 99999999\r\n",
                "1\r\n-100000000 -100000001\r\n100000000 -100000001\r\n-100000000 99999999\r\n100000000 99999999\r\n"
            ]
        ]
    }
]