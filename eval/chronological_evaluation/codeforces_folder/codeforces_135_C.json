[
    {
        "name": "Zero-One",
        "description": "Little Petya very much likes playing with little Masha. Recently he has\nreceived a game called \"Zero-One\" as a gift from his mother. Petya immediately\noffered Masha to play the game with him. Before the very beginning of the game\nseveral cards are lain out on a table in one line from the left to the right.\nEach card contains a digit: 0 or 1. Players move in turns and Masha moves\nfirst. During each move a player should remove a card from the table and shift\nall other cards so as to close the gap left by the removed card. For example,\nif before somebody's move the cards on the table formed a sequence 01010101,\nthen after the fourth card is removed (the cards are numbered starting from\n1), the sequence will look like that: 0100101. The game ends when exactly two\ncards are left on the table. The digits on these cards determine the number in\nbinary notation: the most significant bit is located to the left. Masha's aim\nis to minimize the number and Petya's aim is to maximize it. An unpleasant\naccident occurred before the game started. The kids spilled juice on some of\nthe cards and the digits on the cards got blurred. Each one of the spoiled\ncards could have either 0 or 1 written on it. Consider all possible variants\nof initial arrangement of the digits (before the juice spilling). For each\nvariant, let's find which two cards are left by the end of the game, assuming\nthat both Petya and Masha play optimally. An ordered pair of digits written on\nthose two cards is called an outcome. Your task is to find the set of outcomes\nfor all variants of initial digits arrangement. Input The first line contains\na sequence of characters each of which can either be a \"0\", a \"1\" or a \"?\".\nThis sequence determines the initial arrangement of cards on the table from\nthe left to the right. The characters \"?\" mean that the given card was spoiled\nbefore the game. The sequence's length ranges from 2 to 10^5, inclusive.\nOutput Print the set of outcomes for all possible initial digits arrangements.\nPrint each possible outcome on a single line. Each outcome should be\nrepresented by two characters: the digits written on the cards that were left\nby the end of the game. The outcomes should be sorted lexicographically in\nascending order (see the first sample). Examples Input ???? Output 00 01 10 11\nInput 1010 Output 10 Input 1?1 Output 01 11 Note In the first sample all 16\nvariants of numbers arrangement are possible. For the variant 0000 the outcome\nis 00. For the variant 1111 the outcome is 11. For the variant 0011 the\noutcome is 01. For the variant 1100 the outcome is 10. Regardless of outcomes\nfor all other variants the set which we are looking for will contain all 4\npossible outcomes. In the third sample only 2 variants of numbers arrangement\nare possible: 111 and 101. For the variant 111 the outcome is 11. For the\nvariant 101 the outcome is 01, because on the first turn Masha can remove the\nfirst card from the left after which the game will end.\n\n",
        "cf_contest_id": 135,
        "cf_index": "C",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "games",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "????\r\n",
                "00\r\n01\r\n10\r\n11\r\n"
            ],
            [
                "1010\r\n",
                "10\r\n"
            ],
            [
                "1?1\r\n",
                "01\r\n11\r\n"
            ]
        ],
        "private_cases": [
            [
                "111?\r\n",
                "11\r\n"
            ],
            [
                "000?\r\n",
                "00\r\n"
            ],
            [
                "1??1?\r\n",
                "00\r\n01\r\n10\r\n11\r\n"
            ],
            [
                "?111111?00?\r\n",
                "10\r\n11\r\n"
            ],
            [
                "??????????0????????????????0000000000000\r\n",
                "00\r\n10\r\n11\r\n"
            ],
            [
                "1?1?1?1?0?10\r\n",
                "00\r\n10\r\n11\r\n"
            ],
            [
                "?0101\r\n",
                "00\r\n01\r\n"
            ],
            [
                "??0101\r\n",
                "00\r\n01\r\n11\r\n"
            ],
            [
                "??1010\r\n",
                "00\r\n10\r\n11\r\n"
            ],
            [
                "00\r\n",
                "00\r\n"
            ],
            [
                "11\r\n",
                "11\r\n"
            ],
            [
                "1010\r\n",
                "10\r\n"
            ],
            [
                "0101\r\n",
                "01\r\n"
            ],
            [
                "??\r\n",
                "00\r\n01\r\n10\r\n11\r\n"
            ],
            [
                "??????????????????????????????????????????????????????????????????????????????????????0\r\n",
                "00\r\n10\r\n11\r\n"
            ],
            [
                "??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????1\r\n",
                "00\r\n01\r\n11\r\n"
            ],
            [
                "10?\r\n",
                "00\r\n01\r\n"
            ],
            [
                "100???????????????????????????0000000??????????????????????????????0\r\n",
                "00\r\n10\r\n11\r\n"
            ]
        ]
    }
]