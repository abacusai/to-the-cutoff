[
    {
        "name": "Hanging Hearts",
        "description": "Pak Chanek has \n    n\n blank heart-shaped cards. Card \n    1\n is attached\ndirectly to the wall while each of the other cards is hanging onto exactly one\nother card by a piece of string. Specifically, card \n    i\n (\n    i > 1\n) is\nhanging onto card \n    p_i\n (\n    p_i < i\n). In the very beginning, Pak Chanek\nmust write one integer number on each card. He does this by choosing any\npermutation \n    a\n of \n    [1, 2, \n    \u2026, n]\n. Then, the number written on\ncard \n    i\n is \n    a_i\n. After that, Pak Chanek must do the following\noperation \n    n\n times while maintaining a sequence \n    s\n (which is\ninitially empty): Choose a card \n    x\n such that no other cards are hanging\nonto it. Append the number written on card \n    x\n to the end of \n    s\n. If\n\n    x \n    \u2260 1\n and the number on card \n    p_x\n is larger than the number on\ncard \n    x\n, replace the number on card \n    p_x\n with the number on card\n\n    x\n. Remove card \n    x\n. After that, Pak Chanek will have a sequence\n\n    s\n with \n    n\n elements. What is the maximum length of the longest non-\ndecreasing subsequence\n    ^\n    \u2020\n of \n    s\n at the end if Pak Chanek\ndoes all the steps optimally? \n    ^\n    \u2020\n A sequence \n    b\n is a\nsubsequence of a sequence \n    c\n if \n    b\n can be obtained from \n    c\n by\ndeletion of several (possibly, zero or all) elements. For example, \n    [3,1]\n\nis a subsequence of \n    [3,2,1]\n, \n    [4,3,1]\n and \n    [3,1]\n, but not\n\n    [1,3,3,7]\n and \n    [3,10,4]\n. Input The first line contains a single\ninteger \n    n\n (\n    2 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the number of heart-shaped\ncards. The second line contains \n    n - 1\n integers \n    p_2, p_3, \n    \u2026,\n    p_n\n (\n    1 \n    \u2264 p_i < i\n) describing which card that each card hangs\nonto. Output Print a single integer \u2014 the maximum length of the longest non-\ndecreasing subsequence of \n    s\n at the end if Pak Chanek does all the steps\noptimally. Examples Input 6 1 2 1 4 2 Output 4 Input 2 1 Output 2 Note The\nfollowing is the structure of the cards in the first example. Pak Chanek can\nchoose the permutation \n    a = [1, 5, 4, 3, 2, 6]\n. Let \n    w_i\n be the\nnumber written on card \n    i\n. Initially, \n    w_i = a_i\n. Pak Chanek can do\nthe following operations in order: Select card \n    5\n. Append \n    w_5 = 2\n\nto the end of \n    s\n. As \n    w_4 > w_5\n, the value of \n    w_4\n becomes\n\n    2\n. Remove card \n    5\n. After this operation, \n    s = [2]\n. Select card\n\n    6\n. Append \n    w_6 = 6\n to the end of \n    s\n. As \n    w_2 \n    \u2264 w_6\n,\nthe value of \n    w_2\n is left unchanged. Remove card \n    6\n. After this\noperation, \n    s = [2, 6]\n. Select card \n    4\n. Append \n    w_4 = 2\n to the\nend of \n    s\n. As \n    w_1 \n    \u2264 w_4\n, the value of \n    w_1\n is left\nunchanged. Remove card \n    4\n. After this operation, \n    s = [2, 6, 2]\n.\nSelect card \n    3\n. Append \n    w_3 = 4\n to the end of \n    s\n. As \n    w_2 >\n    w_3\n, the value of \n    w_2\n becomes \n    4\n. Remove card \n    3\n. After\nthis operation, \n    s = [2, 6, 2, 4]\n. Select card \n    2\n. Append \n    w_2 =\n    4\n to the end of \n    s\n. As \n    w_1 \n    \u2264 w_2\n, the value of \n    w_1\n is\nleft unchanged. Remove card \n    2\n. After this operation, \n    s = [2, 6, 2, 4,\n    4]\n. Select card \n    1\n. Append \n    w_1 = 1\n to the end of \n    s\n. Remove\ncard \n    1\n. After this operation, \n    s = [2, 6, 2, 4, 4, 1]\n. One of the\nlongest non-decreasing subsequences of \n    s = [2, 6, 2, 4, 4, 1]\n is \n    [2,\n    2, 4, 4]\n. Thus, the length of the longest non-decreasing subsequence of\n\n    s\n is \n    4\n. It can be proven that this is indeed the maximum possible\nlength.\n\n",
        "cf_contest_id": 1740,
        "cf_index": "E",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "dfs and similar",
            "dp",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n1 2 1 4 2\r\n",
                "4\r\n"
            ],
            [
                "2\r\n1\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "15\r\n1 1 2 2 3 4 4 5 6 7 7 8 9 10\r\n",
                "11\r\n"
            ],
            [
                "7\r\n1 1 3 3 5 5\r\n",
                "4\r\n"
            ],
            [
                "8\r\n1 1 3 3 5 5 7\r\n",
                "5\r\n"
            ]
        ]
    }
]