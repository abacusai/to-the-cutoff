[
    {
        "name": "Expand the Path",
        "description": "Consider a grid of size \n    n \n    \u00d7 n\n. The rows are numbered top to\nbottom from \n    1\n to \n    n\n, the columns are numbered left to right from\n\n    1\n to \n    n\n. The robot is positioned in a cell \n    (1, 1)\n. It can\nperform two types of moves: D \u2014 move one cell down; R \u2014 move one cell right.\nThe robot is not allowed to move outside the grid. You are given a sequence of\nmoves \n    s\n \u2014 the initial path of the robot. This path doesn't lead the\nrobot outside the grid. You are allowed to perform an arbitrary number of\nmodifications to it (possibly, zero). With one modification, you can duplicate\none move in the sequence. That is, replace a single occurrence of D with DD or\na single occurrence of R with RR. Count the number of cells such that there\nexists at least one sequence of modifications that the robot visits this cell\non the modified path and doesn't move outside the grid. Input The first line\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of\ntestcases. The first line of each testcase contains the single integer \n    n\n\n(\n    2 \n    \u2264 n \n    \u2264 10^8\n) \u2014 the number of rows and columns in the grid. The\nsecond line of each testcase contains a non-empty string \n    s\n, consisting\nonly of characters D and R, \u2014 the initial path of the robot. This path doesn't\nlead the robot outside the grid. The total length of strings \n    s\n over all\ntestcases doesn't exceed \n    2 \n    \u00b7 10^5\n. Output For each testcase, print\na single integer \u2014 the number of cells such that there exists at least one\nsequence of modifications that the robot visits this cell on the modified path\nand doesn't move outside the grid. Example Input 3 4 RD 5 DRDRDRDR 3 D Output\n13 9 3 Note In the first testcase, it's enough to consider the following\nmodified paths: RD \n    \u2192\n RRD \n    \u2192\n RRRD\n\n    \u2192\n RRRDD \n    \u2192\n RRRDDD \u2014 this path visits cells\n\n    (1, 1)\n, \n    (1, 2)\n, \n    (1, 3)\n, \n    (1, 4)\n, \n    (2, 4)\n, \n    (3,\n    4)\n and \n    (4, 4)\n; RD \n    \u2192\n RRD \n    \u2192\n RRDD\n\n    \u2192\n RRDDD \u2014 this path visits cells \n    (1, 1)\n, \n    (1, 2)\n,\n\n    (1, 3)\n, \n    (2, 3)\n, \n    (3, 3)\n and \n    (4, 3)\n; RD\n\n    \u2192\n RDD \n    \u2192\n RDDD \u2014 this path visits cells\n\n    (1, 1)\n, \n    (1, 2)\n, \n    (2, 2)\n, \n    (3, 2)\n and \n    (4, 2)\n. Thus,\nthe cells that are visited on at least one modified path are: \n    (1, 1)\n,\n\n    (1, 2)\n, \n    (1, 3)\n, \n    (1, 4)\n, \n    (2, 2)\n, \n    (2, 3)\n, \n    (2,\n    4)\n, \n    (3, 2)\n, \n    (3, 3)\n, \n    (3, 4)\n, \n    (4, 2)\n, \n    (4, 3)\n\nand \n    (4, 4)\n. In the second testcase, there is no way to modify the\nsequence without moving the robot outside the grid. So the only visited cells\nare the ones that are visited on the path DRDRDRDR. In the third testcase, the\ncells that are visited on at least one modified path are: \n    (1, 1)\n, \n    (2,\n    1)\n and \n    (3, 1)\n. Here are the cells for all testcases:\n\n",
        "cf_contest_id": 1644,
        "cf_index": "E",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "combinatorics",
            "data structures",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n4\r\nRD\r\n5\r\nDRDRDRDR\r\n3\r\nD\r\n",
                "13\r\n9\r\n3\r\n"
            ]
        ],
        "private_cases": []
    }
]