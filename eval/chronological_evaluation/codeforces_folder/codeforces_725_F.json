[
    {
        "name": "Family Photos",
        "description": "Alice and Bonnie are sisters, but they don't like each other very much. So\nwhen some old family photos were found in the attic, they started to argue\nabout who should receive which photos. In the end, they decided that they\nwould take turns picking photos. Alice goes first. There are n stacks of\nphotos. Each stack contains exactly two photos. In each turn, a player may\ntake only a photo from the top of one of the stacks. Each photo is described\nby two non-negative integers a and b, indicating that it is worth a units of\nhappiness to Alice and b units of happiness to Bonnie. Values of a and b might\ndiffer for different photos. It's allowed to pass instead of taking a photo.\nThe game ends when all photos are taken or both players pass consecutively.\nThe players don't act to maximize their own happiness. Instead, each player\nacts to maximize the amount by which her happiness exceeds her sister's.\nAssuming both players play optimal, find the difference between Alice's and\nBonnie's happiness. That is, if there's a perfectly-played game such that\nAlice has x happiness and Bonnie has y happiness at the end, you should print\nx - y. Input The first line of input contains a single integer n (1 \u2264 n \u2264 100\n000) \u2014 the number of two-photo stacks. Then follow n lines, each describing\none of the stacks. A stack is described by four space-separated non-negative\nintegers a1, b1, a2 and b2, each not exceeding 10^9. a1 and b1 describe the\ntop photo in the stack, while a2 and b2 describe the bottom photo in the\nstack. Output Output a single integer: the difference between Alice's and\nBonnie's happiness if both play optimally. Examples Input 2 12 3 4 7 1 15 9 1\nOutput 1 Input 2 5 4 8 8 4 12 14 0 Output 4 Input 1 0 10 0 10 Output -10\n\n",
        "cf_contest_id": 725,
        "cf_index": "F",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "games",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n12 3 4 7\r\n1 15 9 1\r\n",
                "1\r\n"
            ],
            [
                "2\r\n5 4 8 8\r\n4 12 14 0\r\n",
                "4\r\n"
            ],
            [
                "1\r\n0 10 0 10\r\n",
                "-10\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n0 1000000000 0 1000000000\r\n0 1000000000 0 1000000000\r\n0 1000000000 0 1000000000\r\n0 1000000000 0 1000000000\r\n0 1000000000 0 1000000000\r\n0 1000000000 0 1000000000\r\n0 1000000000 0 1000000000\r\n0 1000000000 0 1000000000\r\n0 1000000000 0 1000000000\r\n0 1000000000 0 1000000000\r\n",
                "-10000000000\r\n"
            ],
            [
                "10\r\n1000000000 0 1000000000 0\r\n1000000000 0 1000000000 0\r\n1000000000 0 1000000000 0\r\n1000000000 0 1000000000 0\r\n1000000000 0 1000000000 0\r\n1000000000 0 1000000000 0\r\n1000000000 0 1000000000 0\r\n1000000000 0 1000000000 0\r\n1000000000 0 1000000000 0\r\n1000000000 0 1000000000 0\r\n",
                "10000000000\r\n"
            ],
            [
                "10\r\n7 4 5 3\r\n6 7 10 1\r\n1 6 3 7\r\n3 4 6 0\r\n9 7 3 9\r\n9 1 10 10\r\n5 10 7 6\r\n8 5 1 9\r\n1 8 8 4\r\n7 5 9 4\r\n",
                "5\r\n"
            ],
            [
                "10\r\n31181 6 72281 7\r\n65255 10 17867 2\r\n96212 8 32852 10\r\n69668 6 37236 1\r\n6031 7 61541 0\r\n12286 4 40227 2\r\n30573 9 36317 3\r\n97429 6 35399 9\r\n20907 5 19251 8\r\n86446 8 56301 10\r\n",
                "418488\r\n"
            ],
            [
                "10\r\n3 86311 1 17635\r\n6 34036 8 37167\r\n4 53806 6 25588\r\n3 91425 4 86666\r\n6 50210 10 7332\r\n4 59721 10 697\r\n0 15949 2 66047\r\n0 68146 10 70354\r\n2 1075 0 23359\r\n5 48622 9 70531\r\n",
                "-382702\r\n"
            ],
            [
                "1\r\n618436682 429762104 387908221 774440069\r\n",
                "-41853883\r\n"
            ],
            [
                "2\r\n161177104 219082322 609600790 834825669\r\n28637550 764143871 832346520 978676472\r\n",
                "0\r\n"
            ],
            [
                "2\r\n252323306 923185060 41887968 12082849\r\n956989832 311441362 23412620 77648740\r\n",
                "45134543\r\n"
            ],
            [
                "3\r\n90031019 712505278 263580537 367435742\r\n66829732 915548158 31385852 432626559\r\n510612253 671761432 753952282 230959195\r\n",
                "-535068510\r\n"
            ],
            [
                "4\r\n632771442 501825496 853869326 796417562\r\n250298560 151058732 702922596 492637085\r\n688226592 702784823 444110577 613300642\r\n809656720 636217627 270335668 655753596\r\n",
                "-104771122\r\n"
            ],
            [
                "7\r\n479456257 682467462 202838061 802929167\r\n133179116 541657110 703996842 253385760\r\n559317856 865639323 321812660 580155067\r\n723036605 467995973 911771109 838534160\r\n732332969 59715289 216696388 60573917\r\n515702466 655741352 105418444 651954316\r\n884987644 907866122 399463262 952777963\r\n",
                "-253460781\r\n"
            ],
            [
                "1\r\n0 0 0 0\r\n",
                "0\r\n"
            ]
        ]
    }
]