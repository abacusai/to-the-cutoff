[
    {
        "name": "Non-zero Segments",
        "description": "Kolya got an integer array \n    a_1, a_2, \n    \u2026, a_n\n. The array can contain\nboth positive and negative integers, but Kolya doesn't like \n    0\n, so the\narray doesn't contain any zeros. Kolya doesn't like that the sum of some\nsubsegments of his array can be \n    0\n. The subsegment is some consecutive\nsegment of elements of the array. You have to help Kolya and change his array\nin such a way that it doesn't contain any subsegments with the sum \n    0\n. To\nreach this goal, you can insert any integers between any pair of adjacent\nelements of the array (integers can be really any: positive, negative,\n\n    0\n, any by absolute value, even such a huge that they can't be\nrepresented in most standard programming languages). Your task is to find the\nminimum number of integers you have to insert into Kolya's array in such a way\nthat the resulting array doesn't contain any subsegments with the sum \n    0\n.\nInput The first line of the input contains one integer \n    n\n (\n    2 \n    \u2264 n\n    \n    \u2264 200\n     000\n) \u2014 the number of elements in Kolya's array. The second\nline of the input contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n\n(\n    -10^9\n    \u2264 a_i \n    \u2264 10^9, a_i \n    \u2260 0\n) \u2014 the description of\nKolya's array. Output Print the minimum number of integers you have to insert\ninto Kolya's array in such a way that the resulting array doesn't contain any\nsubsegments with the sum \n    0\n. Examples Input 4 1 -5 3 2 Output 1 Input 5 4\n-2 3 -9 2 Output 0 Input 9 -1 1 -1 1 -1 1 1 -1 -1 Output 6 Input 8 16 -5 -11\n-15 10 5 4 -4 Output 3 Note Consider the first example. There is only one\nsubsegment with the sum \n    0\n. It starts in the second element and ends in\nthe fourth element. It's enough to insert one element so the array doesn't\ncontain any subsegments with the sum equal to zero. For example, it is\npossible to insert the integer \n    1\n between second and third elements of\nthe array. There are no subsegments having sum \n    0\n in the second example\nso you don't need to do anything.\n\n",
        "cf_contest_id": 1426,
        "cf_index": "D",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 -5 3 2\r\n",
                "1\r\n"
            ],
            [
                "5\r\n4 -2 3 -9 2\r\n",
                "0\r\n"
            ],
            [
                "9\r\n-1 1 -1 1 -1 1 1 -1 -1\r\n",
                "6\r\n"
            ],
            [
                "8\r\n16 -5 -11 -15 10 5 4 -4\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1000000000 1000000000\r\n",
                "0\r\n"
            ],
            [
                "2\r\n-1000000000 -1000000000\r\n",
                "0\r\n"
            ],
            [
                "2\r\n1000000000 -1000000000\r\n",
                "1\r\n"
            ],
            [
                "2\r\n-1000000000 1000000000\r\n",
                "1\r\n"
            ],
            [
                "3\r\n1000000000 1000000000 1000000000\r\n",
                "0\r\n"
            ],
            [
                "100\r\n-1 -1 1 -1 -1 -1 1 1 1 -1 1 -1 1 1 1 1 1 -1 -1 1 1 -1 1 1 1 -1 -1 -1 -1 -1 1 1 -1 1 -1 -1 -1 -1 -1 -1 -1 1 1 -1 1 1 -1 -1 1 1 -1 1 -1 1 -1 1 1 1 1 1 -1 1 -1 1 1 -1 -1 1 1 -1 1 -1 1 1 1 -1 1 -1 -1 -1 1 1 1 -1 -1 -1 -1 -1 -1 1 1 1 1 -1 1 1 1 1 -1 -1\r\n",
                "46\r\n"
            ],
            [
                "100\r\n2 1 -2 -1 -2 -1 -2 1 2 1 -2 -1 -2 2 1 -2 -2 2 -2 2 -2 2 2 -1 -2 2 -1 -1 -2 -1 -2 2 -2 -2 -2 -1 1 -2 -1 2 -1 -2 1 -1 1 1 2 -2 1 -2 1 2 2 -2 1 -2 -1 -1 -2 -2 1 -1 -1 2 2 -1 2 1 -1 2 2 1 1 1 -1 -1 1 -2 -2 2 -1 2 -2 2 -2 -1 -2 -2 -1 -1 2 -2 -2 1 1 -2 -1 -2 -2 2\r\n",
                "34\r\n"
            ],
            [
                "100\r\n1 -4 -1 4 -2 -2 -4 -2 -1 -3 -4 -4 2 -1 -2 1 4 1 -4 -2 3 2 3 2 2 4 3 4 -2 3 2 -4 -1 -3 3 1 4 -3 2 4 -1 3 1 4 4 -3 -3 3 -2 3 -2 4 -2 -3 4 4 3 1 2 1 -4 4 4 -1 2 4 -3 -3 -1 -2 2 -2 3 -3 -4 -3 -2 2 3 1 4 2 3 3 2 -2 3 -4 1 2 1 4 -2 -3 -2 1 1 3 3 1\r\n",
                "19\r\n"
            ],
            [
                "100\r\n2 -3 1 -1 2 1 -2 3 -2 -3 2 2 -3 -3 2 1 3 1 2 -2 2 3 1 2 -3 1 -3 2 -3 -1 2 -3 2 -1 1 1 -2 -3 -1 -3 -3 2 2 1 1 2 -1 3 2 -1 -2 -1 3 -2 3 -1 3 1 -2 2 -3 -3 -3 -2 2 1 -1 2 1 -1 1 1 -1 -2 -2 3 -1 1 -2 2 1 -1 -2 2 3 -2 -3 1 2 3 -1 -1 1 -3 -1 -1 3 3 -1 -3\r\n",
                "32\r\n"
            ],
            [
                "100\r\n-6 2 8 -9 -9 3 -3 -2 7 3 2 -2 -9 -7 -10 -9 10 4 5 -9 8 -5 7 -2 6 -2 4 4 -2 -5 6 4 8 -8 9 7 -4 2 -3 7 4 -10 -7 -4 8 2 10 -8 -3 -8 -5 -5 -10 -6 -8 -5 7 -1 7 -5 9 10 3 5 10 -7 -3 -7 1 -5 -8 5 1 -1 4 10 2 6 -4 9 3 10 -5 -10 -10 -2 1 9 10 1 10 2 8 -3 -3 -1 7 -5 8 -4\r\n",
                "11\r\n"
            ],
            [
                "5\r\n-1 1 -1 1 -1\r\n",
                "4\r\n"
            ],
            [
                "4\r\n2 -1 1 -2\r\n",
                "1\r\n"
            ],
            [
                "6\r\n3 -1 1 -1 1 -3\r\n",
                "3\r\n"
            ],
            [
                "20\r\n-1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1\r\n",
                "19\r\n"
            ],
            [
                "20\r\n-1 1 1 -1 -1 1 1 -1 -1 -1 1 1 -1 1 -1 1 1 -1 -1 1\r\n",
                "11\r\n"
            ],
            [
                "3\r\n1 2 -3\r\n",
                "1\r\n"
            ],
            [
                "2\r\n-1 1\r\n",
                "1\r\n"
            ],
            [
                "6\r\n1 -1 -1000000000 -1000000000 -1000000000 -1000000000\r\n",
                "1\r\n"
            ],
            [
                "8\r\n4 -3 -1 -2 6 -6 6 -6\r\n",
                "4\r\n"
            ],
            [
                "15\r\n1 -1 -1000000000 -1000000000 -1000000000 -1000000000 -1000000000 -1000000000 -1000000000 -1000000000 -1000000000 -1000000000 -1234 1 -1\r\n",
                "2\r\n"
            ],
            [
                "12\r\n-1 1 -1000000000 -1000000000 -1000000000 -1000000000 -1000000000 -1000000000 -1000000000 -1000000000 -1000000000 -1000000000\r\n",
                "1\r\n"
            ],
            [
                "4\r\n-20 20 -1000000000 -7\r\n",
                "1\r\n"
            ],
            [
                "3\r\n-1 1 -1000000000\r\n",
                "1\r\n"
            ],
            [
                "18\r\n-1000000000 -1000000000 -147483647 -1000000000 -1000000000 -147483647 -1000000000 -1000000000 -147483647 1000000000 1000000000 147483647 1000000000 1000000000 147483647 1000000000 1000000000 147483647\r\n",
                "1\r\n"
            ]
        ]
    }
]