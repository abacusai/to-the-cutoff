[
    {
        "name": "Igor In the Museum",
        "description": "Igor is in the museum and he wants to see as many pictures as possible. Museum\ncan be represented as a rectangular field of n \u00d7 m cells. Each cell is either\nempty or impassable. Empty cells are marked with '.', impassable cells are\nmarked with '*'. Every two adjacent cells of different types (one empty and\none impassable) are divided by a wall containing one picture. At the beginning\nIgor is in some empty cell. At every moment he can move to any empty cell that\nshare a side with the current one. For several starting positions you should\ncalculate the maximum number of pictures that Igor can see. Igor is able to\nsee the picture only if he is in the cell adjacent to the wall with this\npicture. Igor have a lot of time, so he will examine every picture he can see.\nInput First line of the input contains three integers n, m and k (3 \u2264 n, m \u2264\n1000, 1 \u2264 k \u2264 min(n\u00b7m, 100 000)) \u2014 the museum dimensions and the number of\nstarting positions to process. Each of the next n lines contains m symbols\n'.', '*' \u2014 the description of the museum. It is guaranteed that all border\ncells are impassable, so Igor can't go out from the museum. Each of the last k\nlines contains two integers x and y (1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m) \u2014 the row and the\ncolumn of one of Igor's starting positions respectively. Rows are numbered\nfrom top to bottom, columns \u2014 from left to right. It is guaranteed that all\nstarting positions are empty cells. Output Print k integers \u2014 the maximum\nnumber of pictures, that Igor can see if he starts in corresponding position.\nExamples Input 5 6 3 ****** *..*.* ****** *....* ****** 2 2 2 5 4 3 Output 6 4\n10 Input 4 4 1 **** *..* *.** **** 3 2 Output 8\n\n",
        "cf_contest_id": 598,
        "cf_index": "D",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graphs",
            "shortest paths"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 6 3\r\n******\r\n*..*.*\r\n******\r\n*....*\r\n******\r\n2 2\r\n2 5\r\n4 3\r\n",
                "6\r\n4\r\n10\r\n"
            ],
            [
                "4 4 1\r\n****\r\n*..*\r\n*.**\r\n****\r\n3 2\r\n",
                "8\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 3 1\r\n***\r\n*.*\r\n***\r\n2 2\r\n",
                "4\r\n"
            ],
            [
                "10 3 10\r\n***\r\n*.*\r\n*.*\r\n***\r\n***\r\n*.*\r\n*.*\r\n*.*\r\n*.*\r\n***\r\n2 2\r\n2 2\r\n2 2\r\n2 2\r\n8 2\r\n2 2\r\n2 2\r\n7 2\r\n8 2\r\n6 2\r\n",
                "6\r\n6\r\n6\r\n6\r\n10\r\n6\r\n6\r\n10\r\n10\r\n10\r\n"
            ],
            [
                "3 10 10\r\n**********\r\n***.*.*..*\r\n**********\r\n2 6\r\n2 6\r\n2 9\r\n2 9\r\n2 4\r\n2 9\r\n2 6\r\n2 6\r\n2 4\r\n2 6\r\n",
                "4\r\n4\r\n6\r\n6\r\n4\r\n6\r\n4\r\n4\r\n4\r\n4\r\n"
            ],
            [
                "5 5 21\r\n*****\r\n*.***\r\n*****\r\n*****\r\n*****\r\n2 2\r\n2 2\r\n2 2\r\n2 2\r\n2 2\r\n2 2\r\n2 2\r\n2 2\r\n2 2\r\n2 2\r\n2 2\r\n2 2\r\n2 2\r\n2 2\r\n2 2\r\n2 2\r\n2 2\r\n2 2\r\n2 2\r\n2 2\r\n2 2\r\n",
                "4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n4\r\n"
            ]
        ]
    }
]