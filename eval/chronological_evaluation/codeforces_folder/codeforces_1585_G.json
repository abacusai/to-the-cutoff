[
    {
        "name": "Poachers",
        "description": "Alice and Bob are two poachers who cut trees in a forest. A forest is a set of\nzero or more trees. A tree is a connected graph without cycles. A rooted tree\nhas a special vertex called the root. The parent of a node \n    v\n is the next\nvertex on the shortest path from \n    v\n to the root. Children of vertex\n\n    v\n are all nodes for which \n    v\n is the parent. A vertex is a leaf if\nit has no children. In this problem we define the depth of vertex as number of\nvertices on the simple path from this vertex to the root. The rank of a tree\nis the minimum depth among its leaves. Initially there is a forest of rooted\ntrees. Alice and Bob play a game on this forest. They play alternating turns\nwith Alice going first. At the beginning of their turn, the player chooses a\ntree from the forest. Then the player chooses a positive cutting depth, which\nshould not exceed the rank of the chosen tree. Then the player removes all\nvertices of that tree whose depth is less that or equal to the cutting depth.\nAll other vertices of the tree form a set of rooted trees with root being the\nvertex with the smallest depth before the cut. All these trees are included in\nthe game forest and the game continues. A player loses if the forest is empty\nat the beginning of his move. You are to determine whether Alice wins the game\nif both players play optimally. Input Each test contains multiple test cases.\nThe first line contains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    5 \n    \u00b7 10^5\n). Description of the test cases follows. The first line of\neach test case contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 5\n    \n    \u00b7 10^5\n) \u2014 total number of vertices in the initial forest. The second\nline contains \n    n\n integers \n    p_1, p_2, \n    \u2026, p_n\n (\n    0 \n    \u2264 p_i\n    \n    \u2264 n\n) \u2014 description of the forest. If \n    p_i = 0\n, then the\n\n    i\n-th vertex is the root of a tree, otherwise \n    p_i\n is the parent of\nthe vertex \n    i\n. It's guaranteed that \n    p\n defines a correct forest of\nrooted trees. It is guaranteed that the sum of \n    n\n over all test cases\ndoes not exceed \n    5 \n    \u00b7 10^5\n. Output For each test case, print \"YES\"\n(without quotes) if Alice wins, otherwise print \"NO\" (without quotes). You can\nprint each letter in any case (upper or lower). Example Input 4 4 0 1 0 3 7 0\n1 2 0 4 5 6 4 0 1 1 2 7 0 1 1 2 2 3 3 Output NO YES NO YES Note In the first\ntest case Bob has a symmetric strategy, so Alice cannot win. In the second\ntest case Alice can choose the second tree and cutting depth \n    1\n to get a\nforest on which she has a symmetric strategy. In third test case the rank of\nthe only tree is \n    2\n and both possible moves for Alice result in a loss.\nBob either can make the forest with a symmetric strategy for himself, or clear\nthe forest. In the fourth test case all leafs have the same depth, so Alice\ncan clear the forest in one move.\n\n",
        "cf_contest_id": 1585,
        "cf_index": "G",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "games",
            "graphs",
            "trees"
        ],
        "time_limit_seconds": 1.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4\r\n0 1 0 3\r\n7\r\n0 1 2 0 4 5 6\r\n4\r\n0 1 1 2\r\n7\r\n0 1 1 2 2 3 3\r\n",
                "No\r\nYes\r\nNo\r\nYes\r\n"
            ]
        ],
        "private_cases": [
            [
                "15\r\n1\r\n0\r\n2\r\n2 0\r\n6\r\n0 0 2 0 4 5\r\n5\r\n0 0 2 0 4\r\n4\r\n0 0 0 3\r\n5\r\n0 0 0 0 0\r\n4\r\n0 0 0 0\r\n7\r\n0 1 1 1 3 4 5\r\n7\r\n0 1 1 1 1 5 6\r\n7\r\n0 1 1 1 1 5 5\r\n11\r\n0 1 1 1 2 2 3 3 4 4 7\r\n5\r\n2 3 4 5 0\r\n28\r\n0 0 2 0 4 5 0 7 8 9 0 11 12 13 14 0 16 17 18 19 20 0 22 23 24 25 26 27\r\n2\r\n0 0\r\n8\r\n0 0 0 0 4 0 6 7\r\n",
                "Yes\r\nYes\r\nNo\r\nYes\r\nYes\r\nYes\r\nNo\r\nYes\r\nNo\r\nYes\r\nYes\r\nYes\r\nNo\r\nNo\r\nNo\r\n"
            ]
        ]
    }
]