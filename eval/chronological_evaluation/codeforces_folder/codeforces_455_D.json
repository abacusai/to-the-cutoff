[
    {
        "name": "Serega and Fun",
        "description": "Serega loves fun. However, everyone has fun in the unique manner. Serega has\nfun by solving query problems. One day Fedor came up with such a problem. You\nare given an array a consisting of n positive integers and queries to it. The\nqueries can be of two types: Make a unit cyclic shift to the right on the\nsegment from l to r (both borders inclusive). That is rearrange elements of\nthe array in the following manner:a[l], a[l + 1], ..., a[r - 1], a[r] \u2192 a[r],\na[l], a[l + 1], ..., a[r - 1]. Count how many numbers equal to k are on the\nsegment from l to r (both borders inclusive). Fedor hurried to see Serega\nenjoy the problem and Serega solved it really quickly. Let's see, can you\nsolve it? Input The first line contains integer n (1 \u2264 n \u2264 10^5) \u2014 the number\nof elements of the array. The second line contains n integers a[1], a[2], ...,\na[n] (1 \u2264 a[i] \u2264 n). The third line contains a single integer q (1 \u2264 q \u2264 10^5)\n\u2014 the number of queries. The next q lines contain the queries. As you need to\nrespond to the queries online, the queries will be encoded. A query of the\nfirst type will be given in format: 1 l'i r'i. A query of the second type will\nbe given in format: 2 l'i r'i k'i. All the number in input are integer. They\nsatisfy the constraints: 1 \u2264 l'i, r'i, k'i \u2264 n. To decode the queries from the\ndata given in input, you need to perform the following transformations: li =\n((l'i + lastans - 1) mod n) + 1; ri = ((r'i + lastans - 1) mod n) + 1; ki =\n((k'i + lastans - 1) mod n) + 1. Where lastans is the last reply to the query\nof the 2-nd type (initially, lastans = 0). If after transformation li is\ngreater than ri, you must swap these values. Output For each query of the 2-nd\ntype print the answer on a single line. Examples Input 7 6 6 2 7 4 2 5 7 1 3 6\n2 2 4 2 2 2 4 7 2 2 2 5 1 2 6 1 1 4 2 1 7 3 Output 2 1 0 0 Input 8 8 4 2 2 7 7\n8 8 8 1 8 8 2 8 1 7 1 8 1 1 7 3 2 8 8 3 1 1 4 1 2 7 1 4 5 Output 2 0\n\n",
        "cf_contest_id": 455,
        "cf_index": "D",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n6 6 2 7 4 2 5\r\n7\r\n1 3 6\r\n2 2 4 2\r\n2 2 4 7\r\n2 2 2 5\r\n1 2 6\r\n1 1 4\r\n2 1 7 3\r\n",
                "2\r\n1\r\n0\r\n0\r\n"
            ],
            [
                "8\r\n8 4 2 2 7 7 8 8\r\n8\r\n1 8 8\r\n2 8 1 7\r\n1 8 1\r\n1 7 3\r\n2 8 8 3\r\n1 1 4\r\n1 2 7\r\n1 4 5\r\n",
                "2\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n7 2 3 4 3 2 4 4 9 1\r\n10\r\n1 4 5\r\n1 1 6\r\n1 3 10\r\n1 5 7\r\n2 5 8 5\r\n2 6 7 7\r\n2 1 8 5\r\n2 7 9 8\r\n1 1 2\r\n2 5 9 9\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n"
            ]
        ]
    }
]