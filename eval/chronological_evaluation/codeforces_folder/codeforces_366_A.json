[
    {
        "name": "Dima and Guards",
        "description": "Nothing has changed since the last round. Dima and Inna still love each other\nand want to be together. They've made a deal with Seryozha and now they need\nto make a deal with the dorm guards... There are four guardposts in Dima's\ndorm. Each post contains two guards (in Russia they are usually elderly\nwomen). You can bribe a guard by a chocolate bar or a box of juice. For each\nguard you know the minimum price of the chocolate bar she can accept as a gift\nand the minimum price of the box of juice she can accept as a gift. If a\nchocolate bar for some guard costs less than the minimum chocolate bar price\nfor this guard is, or if a box of juice for some guard costs less than the\nminimum box of juice price for this guard is, then the guard doesn't accept\nsuch a gift. In order to pass through a guardpost, one needs to bribe both\nguards. The shop has an unlimited amount of juice and chocolate of any price\nstarting with 1. Dima wants to choose some guardpost, buy one gift for each\nguard from the guardpost and spend exactly n rubles on it. Help him choose a\npost through which he can safely sneak Inna or otherwise say that this is\nimpossible. Mind you, Inna would be very sorry to hear that! Input The first\nline of the input contains integer n (1 \u2264 n \u2264 10^5) \u2014 the money Dima wants to\nspend. Then follow four lines describing the guardposts. Each line contains\nfour integers a, b, c, d (1 \u2264 a, b, c, d \u2264 10^5) \u2014 the minimum price of the\nchocolate and the minimum price of the juice for the first guard and the\nminimum price of the chocolate and the minimum price of the juice for the\nsecond guard, correspondingly. Output In a single line of the output print\nthree space-separated integers: the number of the guardpost, the cost of the\nfirst present and the cost of the second present. If there is no guardpost\nDima can sneak Inna through at such conditions, print -1 in a single line. The\nguardposts are numbered from 1 to 4 according to the order given in the input.\nIf there are multiple solutions, you can print any of them. Examples Input 10\n5 6 5 6 6 6 7 7 5 8 6 6 9 9 9 9 Output 1 5 5 Input 10 6 6 6 6 7 7 7 7 4 4 4 4\n8 8 8 8 Output 3 4 6 Input 5 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 Output -1 Note\nExplanation of the first example. The only way to spend 10 rubles to buy the\ngifts that won't be less than the minimum prices is to buy two 5 ruble\nchocolates to both guards from the first guardpost. Explanation of the second\nexample. Dima needs 12 rubles for the first guardpost, 14 for the second one,\n16 for the fourth one. So the only guardpost we can sneak through is the third\none. So, Dima can buy 4 ruble chocolate for the first guard and 6 ruble juice\nof the second guard.\n\n",
        "cf_contest_id": 366,
        "cf_index": "A",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10\r\n5 6 5 6\r\n6 6 7 7\r\n5 8 6 6\r\n9 9 9 9\r\n",
                "1 5 5\r\n"
            ],
            [
                "10\r\n6 6 6 6\r\n7 7 7 7\r\n4 4 4 4\r\n8 8 8 8\r\n",
                "3 4 6\r\n"
            ],
            [
                "5\r\n3 3 3 3\r\n3 3 3 3\r\n3 3 3 3\r\n3 3 3 3\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "100000\r\n100000 100000 100000 100000\r\n100000 100000 100000 100000\r\n100000 100000 100000 100000\r\n100000 100000 100000 100000\r\n",
                "-1\r\n"
            ],
            [
                "5\r\n3 2 3 3\r\n3 2 3 3\r\n4 4 4 4\r\n4 4 1 1\r\n",
                "1 2 3\r\n"
            ],
            [
                "100\r\n1 1 2 2\r\n100 100 2 2\r\n99 99 2 2\r\n2 2 99 99\r\n",
                "1 1 99\r\n"
            ],
            [
                "1000\r\n500 500 550 550\r\n450 450 500 500\r\n999 1 1 999\r\n1 999 1 999\r\n",
                "2 450 550\r\n"
            ],
            [
                "50\r\n30 30 30 30\r\n20 20 40 40\r\n10 10 50 50\r\n1 1 50 55\r\n",
                "-1\r\n"
            ],
            [
                "10000\r\n1000 7000 8000 6000\r\n8000 8000 6000 6000\r\n5000 6000 6000 6000\r\n10000 10000 2 3\r\n",
                "1 1000 9000\r\n"
            ],
            [
                "40000\r\n25000 25000 30000 30000\r\n1 1 1 1\r\n30000 20000 30000 30000\r\n40000 40000 40000 50000\r\n",
                "2 1 39999\r\n"
            ],
            [
                "4\r\n2 1 4 4\r\n4 4 1 1\r\n3 1 2 2\r\n4 4 4 4\r\n",
                "3 1 3\r\n"
            ],
            [
                "50\r\n5 5 5 5\r\n5 5 5 5\r\n5 5 5 5\r\n5 5 5 5\r\n",
                "1 5 45\r\n"
            ],
            [
                "10\r\n7 2 3 20\r\n20 20 20 20\r\n20 20 20 20\r\n7 2 3 20\r\n",
                "1 2 8\r\n"
            ],
            [
                "10\r\n8 2 7 8\r\n20 20 20 20\r\n20 20 20 20\r\n8 2 7 8\r\n",
                "1 2 8\r\n"
            ],
            [
                "100000\r\n50000 50000 50000 50000\r\n50000 50000 50000 50000\r\n50000 50000 50000 50000\r\n50000 50000 50000 50000\r\n",
                "1 50000 50000\r\n"
            ],
            [
                "100000\r\n25000 75000 80000 80000\r\n99999 99999 2 2\r\n99999 2 99999 99999\r\n2 99999 99999 99999\r\n",
                "-1\r\n"
            ],
            [
                "1231\r\n123 132 85 78\r\n123 5743 139 27\r\n4598 347 12438 12\r\n34589 2349 123 123\r\n",
                "1 123 1108\r\n"
            ],
            [
                "6\r\n2 6 2 9\r\n4 8 5 1\r\n5 6 4 3\r\n1 2 5 1\r\n",
                "1 2 4\r\n"
            ],
            [
                "8\r\n5 5 3 3\r\n1 1 8 8\r\n2 8 8 7\r\n10 7 2 2\r\n",
                "1 5 3\r\n"
            ],
            [
                "100000\r\n25000 50000 50001 75001\r\n25000 50000 50001 75001\r\n25000 50000 50001 75001\r\n25000 50000 50001 75001\r\n",
                "1 25000 75000\r\n"
            ],
            [
                "100000\r\n25000 50000 75001 50001\r\n25000 50000 75001 50001\r\n25000 50000 75001 50001\r\n25000 50000 75001 50001\r\n",
                "1 25000 75000\r\n"
            ],
            [
                "5\r\n3 7 6 2\r\n100 100 100 100\r\n100 100 100 100\r\n100 100 100 100\r\n",
                "1 3 2\r\n"
            ],
            [
                "10\r\n1 100 100 1\r\n1 100 100 1\r\n1 100 100 1\r\n1 100 100 1\r\n",
                "1 1 9\r\n"
            ],
            [
                "10\r\n7 5 5 7\r\n10 10 10 10\r\n10 10 10 10\r\n10 10 10 10\r\n",
                "1 5 5\r\n"
            ],
            [
                "10\r\n9 9 9 9\r\n9 9 9 9\r\n9 9 9 9\r\n1 1 1 1\r\n",
                "4 1 9\r\n"
            ],
            [
                "10\r\n8 6 5 3\r\n8 6 5 3\r\n8 6 5 3\r\n8 6 5 3\r\n",
                "1 6 4\r\n"
            ],
            [
                "10\r\n9 9 9 9\r\n9 9 9 9\r\n9 9 9 9\r\n9 4 9 6\r\n",
                "4 4 6\r\n"
            ],
            [
                "10\r\n6 6 4 4\r\n6 6 4 4\r\n6 6 4 4\r\n6 6 4 4\r\n",
                "1 6 4\r\n"
            ],
            [
                "100000\r\n99000 100000 999 100000\r\n100000 100000 100000 100000\r\n100000 100000 100000 100000\r\n100000 100000 100000 100000\r\n",
                "1 99000 1000\r\n"
            ]
        ]
    }
]