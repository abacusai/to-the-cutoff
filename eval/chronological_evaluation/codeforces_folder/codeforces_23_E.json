[
    {
        "name": "Tree",
        "description": "Recently Bob invented a new game with a tree (we should remind you, that a\ntree is a connected graph without cycles): he deletes any (possibly, zero)\namount of edges of the tree, and counts the product of sizes of the connected\ncomponents left after the deletion. Your task is to find out the maximum\nnumber that Bob can get in his new game for a given tree. Input The first\ninput line contains integer number n (1 \u2264 n \u2264 700) \u2014 amount of vertices in the\ntree. The following n - 1 lines contain the description of the edges. Each\nline contains the pair of vertices' indexes, joined by an edge, ai, bi (1 \u2264\nai, bi \u2264 n). It's guaranteed that the graph described in the input is a tree.\nOutput Output the only number \u2014 the maximum product of sizes of the connected\ncomponents, that Bob can get after deleting some of the tree's edges. Examples\nInput 5 1 2 2 3 3 4 4 5 Output 6 Input 8 1 2 1 3 2 4 2 5 3 6 3 7 6 8 Output 18\nInput 3 1 2 1 3 Output 3\n\n",
        "cf_contest_id": 23,
        "cf_index": "E",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "dp"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n",
                "6\n"
            ],
            [
                "8\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n3 7\r\n6 8\r\n",
                "18\n"
            ],
            [
                "3\r\n1 2\r\n1 3\r\n",
                "3\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n3 2\r\n1 5\r\n4 5\r\n5 3\r\n",
                "6\n"
            ],
            [
                "5\r\n2 1\r\n3 4\r\n3 5\r\n5 2\r\n",
                "6\n"
            ],
            [
                "5\r\n1 4\r\n4 5\r\n4 3\r\n4 2\r\n",
                "5\n"
            ],
            [
                "5\r\n2 3\r\n3 4\r\n3 5\r\n3 1\r\n",
                "5\n"
            ],
            [
                "10\r\n4 8\r\n10 2\r\n6 3\r\n10 9\r\n2 3\r\n4 1\r\n7 10\r\n2 1\r\n5 1\r\n",
                "36\n"
            ],
            [
                "15\r\n4 6\r\n15 1\r\n3 8\r\n15 2\r\n13 11\r\n9 10\r\n14 4\r\n9 12\r\n11 6\r\n8 10\r\n4 5\r\n2 11\r\n7 8\r\n8 4\r\n",
                "243\n"
            ],
            [
                "50\r\n45 39\r\n18 12\r\n13 6\r\n48 45\r\n46 36\r\n46 8\r\n40 36\r\n29 28\r\n2 18\r\n43 26\r\n25 14\r\n43 31\r\n13 30\r\n12 35\r\n38 42\r\n20 5\r\n7 35\r\n10 50\r\n27 13\r\n1 41\r\n24 21\r\n25 5\r\n7 31\r\n15 45\r\n32 25\r\n43 23\r\n4 50\r\n46 11\r\n40 14\r\n37 21\r\n50 2\r\n41 42\r\n43 30\r\n14 22\r\n36 48\r\n8 24\r\n49 20\r\n19 26\r\n32 10\r\n35 29\r\n1 6\r\n34 33\r\n29 3\r\n6 9\r\n34 39\r\n5 47\r\n16 9\r\n31 44\r\n33 17\r\n",
                "68024448\n"
            ],
            [
                "10\r\n8 10\r\n5 7\r\n1 6\r\n4 9\r\n3 8\r\n8 9\r\n2 3\r\n5 8\r\n8 1\r\n",
                "32\n"
            ],
            [
                "5\r\n1 5\r\n4 3\r\n2 4\r\n4 1\r\n",
                "6\n"
            ],
            [
                "1\r\n",
                "1\n"
            ],
            [
                "2\r\n2 1\r\n",
                "2\n"
            ],
            [
                "3\r\n1 2\r\n2 3\r\n",
                "3\n"
            ]
        ]
    }
]