[
    {
        "name": "Bear and Prime Numbers",
        "description": "Recently, the bear started studying data structures and faced the following\nproblem. You are given a sequence of integers x1, x2, ..., xn of length n and\nm queries, each of them is characterized by two integers li, ri. Let's\nintroduce f(p) to represent the number of such indexes k, that xk is divisible\nby p. The answer to the query li, ri is the sum: , where S(li, ri) is a set of\nprime numbers from segment [li, ri] (both borders are included in the\nsegment). Help the bear cope with the problem. Input The first line contains\ninteger n (1 \u2264 n \u2264 10^6). The second line contains n integers x1, x2, ..., xn\n(2 \u2264 xi \u2264 10^7). The numbers are not necessarily distinct. The third line\ncontains integer m (1 \u2264 m \u2264 50000). Each of the following m lines contains a\npair of space-separated integers, li and ri (2 \u2264 li \u2264 ri \u2264 2\u00b710^9) \u2014 the\nnumbers that characterize the current query. Output Print m integers \u2014 the\nanswers to the queries on the order the queries appear in the input. Examples\nInput 6 5 5 7 10 14 15 3 2 11 3 12 4 4 Output 9 7 0 Input 7 2 3 5 7 11 4 8 2 8\n10 2 123 Output 0 7 Note Consider the first sample. Overall, the first sample\nhas 3 queries. The first query l = 2, r = 11 comes. You need to count f(2) +\nf(3) + f(5) + f(7) + f(11) = 2 + 1 + 4 + 2 + 0 = 9. The second query comes l =\n3, r = 12. You need to count f(3) + f(5) + f(7) + f(11) = 1 + 4 + 2 + 0 = 7.\nThe third query comes l = 4, r = 4. As this interval has no prime numbers,\nthen the sum equals 0.\n\n",
        "cf_contest_id": 385,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "data structures",
            "dp",
            "implementation",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "6\r\n5 5 7 10 14 15\r\n3\r\n2 11\r\n3 12\r\n4 4\r\n",
                "9\r\n7\r\n0\r\n"
            ],
            [
                "7\r\n2 3 5 7 11 4 8\r\n2\r\n8 10\r\n2 123\r\n",
                "0\r\n7\r\n"
            ]
        ],
        "private_cases": [
            [
                "9\r\n50 50 50 50 50 50 50 50 50\r\n7\r\n20 20\r\n8 13\r\n13 13\r\n6 14\r\n3 5\r\n15 17\r\n341 1792\r\n",
                "0\r\n0\r\n0\r\n0\r\n9\r\n0\r\n0\r\n"
            ],
            [
                "1\r\n6\r\n1\r\n2 3\r\n",
                "2\r\n"
            ],
            [
                "1\r\n10000000\r\n1\r\n2000000000 2000000000\r\n",
                "0\r\n"
            ],
            [
                "12\r\n2 4 8 16 32 64 128 256 512 1024 2048 4096\r\n14\r\n2 2\r\n2 2000000000\r\n4 4\r\n8 8\r\n16 16\r\n32 32\r\n64 64\r\n128 128\r\n256 256\r\n512 512\r\n1024 1024\r\n2048 2048\r\n4096 4096\r\n3 2000000000\r\n",
                "12\r\n12\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "9\r\n9999991 9999943 9999883 4658161 4657997 2315407 2315263 1000003 1000033\r\n13\r\n9999991 9999991\r\n9999943 9999943\r\n9999883 9999883\r\n4658161 4658161\r\n4657997 4657997\r\n2315407 2315407\r\n2315263 2315263\r\n1000003 1000003\r\n1000033 1000033\r\n2 2000000000\r\n2000000000 2000000000\r\n9999992 2000000000\r\n1000033 9999990\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n9\r\n0\r\n0\r\n7\r\n"
            ]
        ]
    }
]