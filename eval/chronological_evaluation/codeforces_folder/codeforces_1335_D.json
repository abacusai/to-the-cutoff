[
    {
        "name": "Anti-Sudoku",
        "description": "You are given a correct solution of the sudoku puzzle. If you don't know what\nis the sudoku, you can read about it here. The picture showing the correct\nsudoku solution: Blocks are bordered with bold black color. Your task is to\nchange at most \n    9\n elements of this field (i.e. choose some \n    1 \n    \u2264 i,\n    j \n    \u2264 9\n and change the number at the position \n    (i, j)\n to any other\nnumber in range \n    [1; 9]\n) to make it anti-sudoku. The anti-sudoku is the\n\n    9 \n    \u00d7 9\n field, in which: Any number in this field is in range\n\n    [1; 9]\n; each row contains at least two equal elements; each column\ncontains at least two equal elements; each \n    3 \n    \u00d7 3\n block (you can\nread what is the block in the link above) contains at least two equal\nelements. It is guaranteed that the answer exists. You have to answer \n    t\n\nindependent test cases. Input The first line of the input contains one integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. Then \n    t\n\ntest cases follow. Each test case consists of \n    9\n lines, each line\nconsists of \n    9\n characters from \n    1\n to \n    9\n without any whitespaces\n\u2014 the correct solution of the sudoku puzzle. Output For each test case, print\nthe answer \u2014 the initial field with at most \n    9\n changed elements so that\nthe obtained field is anti-sudoku. If there are several solutions, you can\nprint any. It is guaranteed that the answer exists. Example Input 1 154873296\n386592714 729641835 863725149 975314628 412968357 631457982 598236471\n247189563 Output 154873396 336592714 729645835 863725145 979314628 412958357\n631457992 998236471 247789563\n\n",
        "cf_contest_id": 1335,
        "cf_index": "D",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n154873296\r\n386592714\r\n729641835\r\n863725149\r\n975314628\r\n412968357\r\n631457982\r\n598236471\r\n247189563\r\n",
                "254873296\r\n386592724\r\n729642835\r\n863725249\r\n975324628\r\n422968357\r\n632457982\r\n598236472\r\n247289563\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n154873296\r\n386592714\r\n729641835\r\n863725149\r\n975314628\r\n412968357\r\n631457982\r\n598236471\r\n247189563\r\n154873296\r\n386592714\r\n729641835\r\n863725149\r\n975314628\r\n412968357\r\n631457982\r\n598236471\r\n247189563\r\n",
                "254873296\r\n386592724\r\n729642835\r\n863725249\r\n975324628\r\n422968357\r\n632457982\r\n598236472\r\n247289563\r\n254873296\r\n386592724\r\n729642835\r\n863725249\r\n975324628\r\n422968357\r\n632457982\r\n598236472\r\n247289563\r\n"
            ],
            [
                "3\r\n154873296\r\n386592714\r\n729641835\r\n863725149\r\n975314628\r\n412968357\r\n631457982\r\n598236471\r\n247189563\r\n154873296\r\n386592714\r\n729641835\r\n863725149\r\n975314628\r\n412968357\r\n631457982\r\n598236471\r\n247189563\r\n154873296\r\n386592714\r\n729641835\r\n863725149\r\n975314628\r\n412968357\r\n631457982\r\n598236471\r\n247189563\r\n",
                "254873296\r\n386592724\r\n729642835\r\n863725249\r\n975324628\r\n422968357\r\n632457982\r\n598236472\r\n247289563\r\n254873296\r\n386592724\r\n729642835\r\n863725249\r\n975324628\r\n422968357\r\n632457982\r\n598236472\r\n247289563\r\n254873296\r\n386592724\r\n729642835\r\n863725249\r\n975324628\r\n422968357\r\n632457982\r\n598236472\r\n247289563\r\n"
            ]
        ]
    }
]