[
    {
        "name": "AmShZ Wins a Bet",
        "description": "Right before the UEFA Euro 2020, AmShZ and Safar placed bets on who'd be the\nchampion, AmShZ betting on Italy, and Safar betting on France. Of course,\nAmShZ won. Hence, Safar gave him a bracket sequence \n    S\n. Note that a\nbracket sequence is a string made of '(' and ')' characters. AmShZ can perform\nthe following operation any number of times: First, he cuts his string \n    S\n\ninto three (possibly empty) contiguous substrings \n    A, B\n and \n    C\n.\nThen, he glues them back by using a '(' and a ')' characters, resulting in a\nnew string \n    S\n = \n    A\n + \"(\" + \n    B\n + \")\" + \n    C\n.For example, if\n\n    S\n = \"))((\" and AmShZ cuts it into \n    A\n = \"\", \n    B\n = \"))\", and\n\n    C\n = \"((\", He will obtain \n    S\n = \"()))((\" as a new string. After\nperforming some (possibly none) operations, AmShZ gives his string to Keshi\nand asks him to find the initial string. Of course, Keshi might be able to\ncome up with more than one possible initial string. Keshi is interested in\nfinding the lexicographically smallest possible initial string. Your task is\nto help Keshi in achieving his goal. A string \n    a\n is lexicographically\nsmaller than a string \n    b\n if and only if one of the following holds:\n\n    a\n is a prefix of \n    b\n, but \n    a \n     b\n; in the first position\nwhere \n    a\n and \n    b\n differ, the string \n    a\n has a letter that appears\nearlier in the alphabet than the corresponding letter in \n    b\n. Input The\nonly line of input contains a single string \n    S\n \u2014 the string after the\noperations \n    (1\n    \u2264 |S|\n    \u2264 3 \n    \u00b7 10^5)\n. It is guaranteed that the\nfirst character of \n    S\n is ')'. Output Print the lexicographically smallest\npossible initial string before operations. Example Input )(()(()))) Output\n)((()))) Note In the first sample, you can transform \")((())))\" into\n\")(()(())))\" by splitting it into \")(\", empty string, and \"(())))\". It can be\nshown that this is the lexicographically smallest possible initial string\n\n",
        "cf_contest_id": 1610,
        "cf_index": "G",
        "cf_rating": 3300,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "hashing"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                ")(()(())))\r\n",
                ")((())))"
            ]
        ],
        "private_cases": [
            [
                ")((())\r\n",
                ")("
            ],
            [
                ")(())\r\n",
                ")"
            ],
            [
                ")((()\r\n",
                ")(("
            ],
            [
                ")((()())))\r\n",
                ")((()())))"
            ],
            [
                ")()())((())()()()())\r\n",
                ")()())"
            ],
            [
                ")(((()))))(((((()))))))(((((()\r\n",
                ")(((()))))(((((()))))))((((("
            ],
            [
                ")(()))(()))(()()()())))(()()()())((()))(\r\n",
                ")(()))(()))(()()()())))("
            ],
            [
                ")(()()()()))((())((()())(()(()())))))((()))(()()()\r\n",
                ")(()()()()))((((()())))))("
            ],
            [
                "))(())()()((())()()()())((())(())()()()()()()()()()))())()))\r\n",
                "))((())(())()()()()()()()()()))())()))"
            ],
            [
                "))())))))(()(((()))()))(((())))((())(())())((()))(()))(()))((())(((()(\r\n",
                "))())))))((((()))()))(((())))((())(())())((()))(()))(()))((((("
            ],
            [
                ")(()))))))((()())(()())(())()())(()()())))(())()))(())()(((((())))))((()()())()(\r\n",
                ")(()))))))((()())(()())(())()())(()()())))(())()))(("
            ],
            [
                ")()))))((())()()())(((()(()))))(((((()((()))))())))(()))((((((()))))))(())(()()(())))))(()())))((())\r\n",
                ")()))))(((((((()))))())))(()))((((((()))))))((())))))(()())))("
            ],
            [
                "))))(((((((())((()))))))))(((()())))((()()())()()()()()()()))(()()()())((()()())(())()()()()()()())\r\n",
                "))))((((((((()))))))))(((()())))((()()())()()()()()()()))"
            ],
            [
                "))))))(((((((()())(()((()())))((())()(()))((()))(()(())()(((()(())))))()())())(((()())(()())(((()))()()()())(((()))()()))(())())(((())()))(())())(((())()())(()()))(()()))((()(())())((()())()())(()())(\r\n",
                "))))))(((("
            ],
            [
                ")))))))))(((((()((())())((())())())((())(((())(((()())(())(()))(())())())(((()))()()())())(())(()(()))()())(()(()))()(())())(()())()(((()(()())()())(()))(((()))((()))))()()(()(()))())((((((()()())))((())(()())(())))(((())))(()))(((()))(()())())(((((((()))(()())())))(())())()(()))())(((()())(()()))((\r\n",
                ")))))))))((((("
            ]
        ]
    }
]