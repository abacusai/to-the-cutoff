[
    {
        "name": "Divan and a Cottage",
        "description": "Divan's new cottage is finally complete! However, after a thorough inspection,\nit turned out that the workers had installed the insulation incorrectly, and\nnow the temperature in the house directly depends on the temperature outside.\nMore precisely, if the temperature in the house is \n    P\n in the morning, and\nthe street temperature is \n    T\n, then by the next morning the temperature in\nthe house changes according to the following rule: \n    P_new = P + 1\n, if\n\n    P < T\n, \n    P_new = P - 1\n, if \n    P > T\n, \n    P_new = P\n, if \n    P\n    = T\n. Here \n    P_new\n is the temperature in the house next morning.Divan\nis a very busy businessman, so sometimes he is not at home for long periods\nand does not know what the temperature is there now, so he hired you to find\nit. You will work for \n    n\n days. In the beginning of the \n    i\n-th day,\nthe temperature outside \n    T_i\n is first given to you. After that, on the\n\n    i\n-th day, you will receive \n    k_i\n queries. Each query asks the\nfollowing: \"if the temperature in the house was \n    x_i\n at the morning of\nthe first day, what would be the temperature in the house next morning (after\nday \n    i\n)?\" Please answer all the businessman's queries. Input The first\nline of the input contains the number \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7\n    10^5\n) \u2014 the number of days. The following is a description of \n    n\n days\nin the following format. The first line of the description contains an integer\n\n    T_i\n (\n    0 \n    \u2264 T_i \n    \u2264 10^9\n) \u2014 the temperature on that day. The\nsecond line contains a non-negative integer \n    k_i\n (\n    0 \n    \u2264 k_i \n    \u2264 2\n    \n    \u00b7 10^5\n) \u2014 the number of queries that day. The third line contains\n\n    k\n integers \n    x'_i\n (\n    0 \n    \u2264 x'_i\n    \u2264 10^9\n) \u2014 the\nencrypted version of Divan's queries. Let \n    lastans = 0\n initially. Divan's\nactual queries are given by \n    x_i = (x'_i + lastans) \n     (10^9 + 1)\n,\nwhere \n    a \n     b\n is the reminder when \n    a\n is divided by \n    b\n.\nAfter answering the query, set \n    lastans\n to the answer. It is guaranteed\nthat the total number of queries (the sum of all \n    k_i\n) does not exceed\n\n    2 \n    \u00b7 10^5\n. Output For each query, output a single integer \u2014 the\ntemperature in the house after day \n    i\n. Examples Input 3 50 3 1 2 3 50 3 4\n5 6 0 3 7 8 9 Output 2 5 9 15 22 30 38 47 53 Input 4 728 3 859 1045 182 104 1\n689 346 6 634 356 912 214 1 1 755 3 241 765 473 Output 858 1902 2083 2770 3401\n3754 4663 4874 4872 4870 5107 5868 6337 Input 2 500000000 3 1000000000\n999999999 888888888 250000000 5 777777777 666666666 555555555 444444444\n333333333 Output 999999999 999999996 888888882 666666656 333333321 888888874\n333333317 666666648 Note Let's look at the first four queries from the example\ninput. The temperature is \n    50\n on the first day, \n    50\n on the second\nday, and \n    0\n on the third day. Note that \n    lastans = 0\n initially. The\ninitial temperature of the first query of the first day is \n    (1 \n      + \n     \n    lastans) \n     (10^9 + 1) = 1\n. After the first day, the temperature rises\nby \n    1\n, because \n    1 < 50\n. So the answer to the query is \n    2\n. Then,\nwe set \n    lastans = 2\n. The initial temperature of the second query of the\nfirst day is \n    (2 \n      + \n      lastans) \n     (10^9 + 1) = 4\n. After the\nfirst day, the temperature rises by \n    1\n, because \n    4 < 50\n. So the\nanswer to the query is \n    5\n. Then, we set \n    lastans = 5\n. The initial\ntemperature of the third query of the first day is \n    (3 \n      + \n      lastans)\n    \n     (10^9 + 1) = 8\n. After the first day, the temperature rises by\n\n    1\n. So the answer to the query is \n    9\n. Then, we set \n    lastans =\n    9\n. The initial temperature of the first query of the second day is \n    (4\n    \n      + \n      lastans) \n     (10^9 + 1) = 13\n. After the first day, the\ntemperature rises by \n    1\n. After the second day, the temperature rises by\n\n    1\n. So the answer to the query is \n    15\n. Then, we set \n    lastans =\n    15\n.\n\n",
        "cf_contest_id": 1614,
        "cf_index": "E",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "3\r\n50\r\n3\r\n1 2 3\r\n50\r\n3\r\n4 5 6\r\n0\r\n3\r\n7 8 9\r\n",
                "2\r\n5\r\n9\r\n15\r\n22\r\n30\r\n38\r\n47\r\n53\r\n"
            ],
            [
                "4\r\n728\r\n3\r\n859 1045 182\r\n104\r\n1\r\n689\r\n346\r\n6\r\n634 356 912 214 1 1\r\n755\r\n3\r\n241 765 473\r\n",
                "858\r\n1902\r\n2083\r\n2770\r\n3401\r\n3754\r\n4663\r\n4874\r\n4872\r\n4870\r\n5107\r\n5868\r\n6337\r\n"
            ],
            [
                "2\r\n500000000\r\n3\r\n1000000000 999999999 888888888\r\n250000000\r\n5\r\n777777777 666666666 555555555 444444444 333333333\r\n",
                "999999999\r\n999999996\r\n888888882\r\n666666656\r\n333333321\r\n888888874\r\n333333317\r\n666666648\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n0\r\n0\r\n",
                ""
            ],
            [
                "1\r\n0\r\n1\r\n0\r\n",
                "0\r\n"
            ],
            [
                "2\r\n0\r\n2\r\n0 0\r\n1000000000\r\n2\r\n1000000000 1000000000\r\n",
                "0\r\n0\r\n1000000000\r\n999999999\r\n"
            ],
            [
                "5\r\n985358472\r\n1\r\n742856325\r\n945774137\r\n1\r\n515104146\r\n587098839\r\n1\r\n286586504\r\n738190369\r\n1\r\n913327848\r\n87482139\r\n1\r\n307752763\r\n",
                "742856326\r\n257960473\r\n544546980\r\n457874831\r\n765627593\r\n"
            ],
            [
                "10\r\n947152723\r\n1\r\n920489920\r\n562781462\r\n1\r\n442710616\r\n148385234\r\n1\r\n437966535\r\n705178945\r\n1\r\n248991621\r\n555001630\r\n1\r\n156874994\r\n647379628\r\n1\r\n940503432\r\n191578991\r\n1\r\n94445969\r\n80343105\r\n1\r\n343043258\r\n959224496\r\n1\r\n669470520\r\n536420134\r\n1\r\n172477261\r\n",
                "920489921\r\n363200538\r\n801167072\r\n50158696\r\n207033693\r\n147537130\r\n241983102\r\n585026358\r\n254496880\r\n426974145\r\n"
            ],
            [
                "7\r\n890391926\r\n1\r\n977109543\r\n979192579\r\n1\r\n956397714\r\n976334731\r\n1\r\n917590989\r\n982005025\r\n1\r\n872831074\r\n820087016\r\n1\r\n990913582\r\n945621855\r\n1\r\n982803398\r\n943879999\r\n1\r\n928875547\r\n",
                "977109542\r\n933507255\r\n851098246\r\n723929323\r\n714842909\r\n697646312\r\n626521865\r\n"
            ],
            [
                "15\r\n16641407\r\n1\r\n204955839\r\n24553822\r\n1\r\n193201287\r\n122581260\r\n1\r\n53028860\r\n42797606\r\n1\r\n12331454\r\n13654408\r\n1\r\n179572369\r\n17624038\r\n1\r\n30766971\r\n107705837\r\n1\r\n160473918\r\n219765119\r\n1\r\n110932870\r\n166642076\r\n1\r\n41438291\r\n71045818\r\n1\r\n27577583\r\n2746188\r\n1\r\n6974411\r\n12108018\r\n1\r\n209998625\r\n15392189\r\n1\r\n86259596\r\n3754314\r\n1\r\n88462403\r\n42382754\r\n1\r\n65518953\r\n",
                "204955838\r\n398157123\r\n451185980\r\n463517430\r\n643089794\r\n673856759\r\n834330670\r\n945263532\r\n986701814\r\n14279404\r\n21253818\r\n231252431\r\n317512014\r\n405974403\r\n471493341\r\n"
            ],
            [
                "1\r\n1\r\n1\r\n0\r\n",
                "1\r\n"
            ]
        ]
    }
]