[
    {
        "name": "Sum in the tree",
        "description": "Mitya has a rooted tree with \n    n\n vertices indexed from \n    1\n to \n    n\n,\nwhere the root has index \n    1\n. Each vertex \n    v\n initially had an integer\nnumber \n    a_v \n    \u2265 0\n written on it. For every vertex \n    v\n Mitya has\ncomputed \n    s_v\n: the sum of all values written on the vertices on the path\nfrom vertex \n    v\n to the root, as well as \n    h_v\n \u2014 the depth of vertex\n\n    v\n, which denotes the number of vertices on the path from vertex \n    v\n\nto the root. Clearly, \n    s_1=a_1\n and \n    h_1=1\n. Then Mitya erased all\nnumbers \n    a_v\n, and by accident he also erased all values \n    s_v\n for\nvertices with even depth (vertices with even \n    h_v\n). Your task is to\nrestore the values \n    a_v\n for every vertex, or determine that Mitya made a\nmistake. In case there are multiple ways to restore the values, you're\nrequired to find one which minimizes the total sum of values \n    a_v\n for all\nvertices in the tree. Input The first line contains one integer \n    n\n \u2014 the\nnumber of vertices in the tree (\n    2 \n    \u2264 n \n    \u2264 10^5\n). The following\nline contains integers \n    p_2\n, \n    p_3\n, ... \n    p_n\n, where \n    p_i\n\nstands for the parent of vertex with index \n    i\n in the tree (\n    1 \n    \u2264 p_i\n    < i\n). The last line contains integer values \n    s_1\n, \n    s_2\n, ...,\n\n    s_n\n (\n    -1 \n    \u2264 s_v \n    \u2264 10^9\n), where erased values are replaced by\n\n    -1\n. Output Output one integer \u2014 the minimum total sum of all values\n\n    a_v\n in the original tree, or \n    -1\n if such tree does not exist.\nExamples Input 5 1 1 1 1 1 -1 -1 -1 -1 Output 1 Input 5 1 2 3 1 1 -1 2 -1 -1\nOutput 2 Input 3 1 2 2 -1 1 Output -1\n\n",
        "cf_contest_id": 1098,
        "cf_index": "A",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 1 1 1\r\n1 -1 -1 -1 -1\r\n",
                "1"
            ],
            [
                "5\r\n1 2 3 1\r\n1 -1 2 -1 -1\r\n",
                "2"
            ],
            [
                "3\r\n1 2\r\n2 -1 1\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1\r\n0 -1\r\n",
                "0"
            ],
            [
                "2\r\n1\r\n1 -1\r\n",
                "1"
            ],
            [
                "5\r\n1 2 2 3\r\n1 -1 2 3 -1\r\n",
                "3"
            ],
            [
                "5\r\n1 2 3 4\r\n5 -1 5 -1 7\r\n",
                "7"
            ],
            [
                "10\r\n1 1 1 1 2 3 4 5 1\r\n3 -1 -1 -1 -1 3 3 3 3 -1\r\n",
                "3"
            ],
            [
                "10\r\n1 1 2 4 4 5 6 3 3\r\n0 -1 -1 0 -1 -1 1 2 3 4\r\n",
                "7"
            ],
            [
                "10\r\n1 2 3 4 4 3 3 8 8\r\n1 -1 1 -1 1 1 -1 -1 2 2\r\n",
                "2"
            ],
            [
                "25\r\n1 2 1 4 4 4 1 2 8 5 1 8 1 6 9 6 10 10 7 10 8 17 14 6\r\n846 -1 941 -1 1126 1803 988 -1 1352 1235 -1 -1 864 -1 -1 -1 -1 -1 -1 -1 -1 1508 1802 1713 -1\r\n",
                "-1\r\n"
            ]
        ]
    }
]