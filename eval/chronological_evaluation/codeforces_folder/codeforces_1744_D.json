[
    {
        "name": "Divisibility by 2^n",
        "description": "You are given an array of positive integers \n    a_1, a_2, \n    \u2026, a_n\n.\nMake the product of all the numbers in the array (that is, \n    a_1 \n    \u00b7 a_2\n    \n    \u00b7\n    \u2026\n    \u00b7 a_n\n) divisible by \n    2^n\n. You can perform the\nfollowing operation as many times as you like: select an arbitrary index\n\n    i\n (\n    1 \n    \u2264 i \n    \u2264 n\n) and replace the value \n    a_i\n with\n\n    a_i=a_i \n    \u00b7 i\n. You cannot apply the operation repeatedly to a single\nindex. In other words, all selected values of \n    i\n must be different. Find\nthe smallest number of operations you need to perform to make the product of\nall the elements in the array divisible by \n    2^n\n. Note that such a set of\noperations does not always exist. Input The first line of the input contains a\nsingle integer \n    t\n \n    (1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number test cases.\nThen the descriptions of the input data sets follow. The first line of each\ntest case contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7\n    10^5\n) \u2014 the length of array \n    a\n. The second line of each test case\ncontains exactly \n    n\n integers: \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264\n    a_i \n    \u2264 10^9\n). It is guaranteed that the sum of \n    n\n values over all\ntest cases in a test does not exceed \n    2 \n    \u00b7 10^5\n. Output For each\ntest case, print the least number of operations to make the product of all\nnumbers in the array divisible by \n    2^n\n. If the answer does not exist,\nprint -1. Example Input 6 1 2 2 3 2 3 10 6 11 4 13 17 1 1 5 1 1 12 1 1 6 20 7\n14 18 3 5 Output 0 1 1 -1 2 1 Note In the first test case, the product of all\nelements is initially \n    2\n, so no operations needed. In the second test\ncase, the product of elements initially equals \n    6\n. We can apply the\noperation for \n    i = 2\n, and then \n    a_2\n becomes \n    2\n    \u00b72=4\n, and\nthe product of numbers becomes \n    3\n    \u00b74=12\n, and this product of numbers\nis divided by \n    2^n=2^2=4\n. In the fourth test case, even if we apply all\npossible operations, we still cannot make the product of numbers divisible by\n\n    2^n\n \u2014 it will be\n\n    (13\n    \u00b71)\n    \u00b7(17\n    \u00b72)\n    \u00b7(1\n    \u00b73)\n    \u00b7(1\n    \u00b74)=5304\n,\nwhich does not divide by \n    2^n=2^4=16\n. In the fifth test case, we can\napply operations for \n    i = 2\n and \n    i = 4\n.\n\n",
        "cf_contest_id": 1744,
        "cf_index": "D",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n1\r\n2\r\n2\r\n3 2\r\n3\r\n10 6 11\r\n4\r\n13 17 1 1\r\n5\r\n1 1 12 1 1\r\n6\r\n20 7 14 18 3 5\r\n",
                "0\r\n1\r\n1\r\n-1\r\n2\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]