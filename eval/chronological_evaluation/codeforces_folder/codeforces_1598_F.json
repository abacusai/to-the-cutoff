[
    {
        "name": "RBS",
        "description": "A bracket sequence is a string containing only characters \"(\" and \")\". A\nregular bracket sequence (or, shortly, an RBS) is a bracket sequence that can\nbe transformed into a correct arithmetic expression by inserting characters\n\"1\" and \"+\" between the original characters of the sequence. For example:\nbracket sequences \"()()\" and \"(())\" are regular (the resulting expressions\nare: \"(1)+(1)\" and \"((1+1)+1)\"); bracket sequences \")(\", \"(\" and \")\" are not.\nLet's denote the concatenation of two strings \n    x\n and \n    y\n as\n\n    x+y\n. For example, \"()()\" \n    +\n \")(\" \n    =\n \"()())(\". You are given\n\n    n\n bracket sequences \n    s_1, s_2, \n    \u2026, s_n\n. You can rearrange them\nin any order (you can rearrange only the strings themselves, but not the\ncharacters in them). Your task is to rearrange the strings in such a way that\nthe string \n    s_1 + s_2 + \n    \u2026 + s_n\n has as many non-empty prefixes that\nare RBS as possible. Input The first line contains a single integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 20\n). Then \n    n\n lines follow, the \n    i\n-th of them\ncontains \n    s_i\n \u2014 a bracket sequence (a string consisting of characters \"(\"\nand/or \")\". All sequences \n    s_i\n are non-empty, their total length does not\nexceed \n    4 \n    \u00b7 10^5\n. Output Print one integer \u2014 the maximum number of\nnon-empty prefixes that are RBS for the string \n    s_1 + s_2 + \n    \u2026 +\n    s_n\n, if the strings \n    s_1, s_2, \n    \u2026, s_n\n can be rearranged\narbitrarily. Examples Input 2 ( ) Output 1 Input 4 ()()()) ( ( ) Output 4\nInput 1 (()) Output 1 Input 1 )(() Output 0 Note In the first example, you can\nconcatenate the strings as follows: \"(\" \n    +\n \")\" \n    =\n \"()\", the\nresulting string will have one prefix, that is an RBS: \"()\". In the second\nexample, you can concatenate the strings as follows: \"(\" \n    +\n \")\" \n    +\n\n\"()()())\" \n    +\n \"(\" \n    =\n \"()()()())(\", the resulting string will have\nfour prefixes that are RBS: \"()\", \"()()\", \"()()()\", \"()()()()\". The third and\nthe fourth examples contain only one string each, so the order is fixed.\n\n",
        "cf_contest_id": 1598,
        "cf_index": "F",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "bitmasks",
            "brute force",
            "data structures",
            "dp"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "2\r\n(\r\n)\r\n",
                "1"
            ],
            [
                "4\r\n()()())\r\n(\r\n(\r\n)\r\n",
                "4"
            ],
            [
                "1\r\n(())\r\n",
                "1"
            ],
            [
                "1\r\n)(()\r\n",
                "0"
            ]
        ],
        "private_cases": [
            [
                "6\r\n(((())))\r\n(((())))\r\n()()()\r\n(())\r\n()()()()()\r\n()()\r\n",
                "13"
            ],
            [
                "6\r\n()()()()()\r\n()()()()\r\n()\r\n((((()))))\r\n((()))\r\n()()\r\n",
                "14"
            ],
            [
                "10\r\n()\r\n()()()()\r\n(())\r\n((()))\r\n(())\r\n()()\r\n(())\r\n()()\r\n()\r\n()\r\n",
                "15"
            ],
            [
                "10\r\n()()\r\n(())\r\n()()\r\n()()\r\n(())\r\n(((())))\r\n()\r\n(())\r\n()()\r\n()\r\n",
                "14"
            ],
            [
                "10\r\n((((((((((((((((((((((((()))))))))))))))))))))))))\r\n()()()()()()()()()()()()()()()()()()()\r\n(((((((((((((((((())))))))))))))))))\r\n()()()()()()()()()()()()()()()()()()()()()()\r\n((((((((((((((((((()))))))))))))))))))\r\n((((((((((((((((((((((()))))))))))))))))))))))\r\n()()()()()()()()()()()()()()()()()()()\r\n((((((((((((((()))))))))))))))\r\n()()()()()()()()()()()()()()()()()()()()()()()()\r\n()()()()()()()()()()()()()()()()\r\n",
                "105"
            ],
            [
                "10\r\n((((((((((((((((()))))))))))))))))\r\n(((((((((((((((())))))))))))))))\r\n((((((((((((((((((((()))))))))))))))))))))\r\n(((((((((((((((((((((())))))))))))))))))))))\r\n()()()()()()()()()()()()()()()()()()()()\r\n()()()()()()()()()()()()()()()()()()()()()()()()()()\r\n(((((((((((((((((())))))))))))))))))\r\n()()()()()()()()()()()()()()()()()()()\r\n()()()()()()()()()()()()()()()()()()\r\n()()()()()()()()()()()()()()()()()()()()()()()\r\n",
                "111"
            ],
            [
                "2\r\n))())))((()\r\n()((((((()))))))(()\r\n",
                "3"
            ],
            [
                "1\r\n))))))))))))))))))))\r\n",
                "0"
            ],
            [
                "1\r\n))))))()))())(()))))\r\n",
                "0"
            ],
            [
                "1\r\n)()())((()))((()((()\r\n",
                "0"
            ],
            [
                "1\r\n)(((((()((())(((((((\r\n",
                "0"
            ],
            [
                "1\r\n((((((((((((((((((((\r\n",
                "0"
            ],
            [
                "10\r\n)\r\n)\r\n))\r\n))\r\n))\r\n))\r\n))\r\n))\r\n)))\r\n)))\r\n",
                "0"
            ],
            [
                "10\r\n())\r\n()\r\n)\r\n)))\r\n))\r\n()\r\n)\r\n))\r\n)))\r\n)\r\n",
                "3"
            ],
            [
                "10\r\n)()\r\n()\r\n)\r\n)\r\n)\r\n)(\r\n)))\r\n)(\r\n(((\r\n))\r\n",
                "5"
            ],
            [
                "10\r\n))\r\n()(\r\n(\r\n()\r\n()\r\n((((\r\n(\r\n(\r\n(((\r\n(\r\n",
                "4"
            ],
            [
                "10\r\n((\r\n(((\r\n(\r\n(((\r\n((((\r\n((\r\n(\r\n(\r\n(\r\n((\r\n",
                "0"
            ],
            [
                "20\r\n)\r\n)\r\n)\r\n)\r\n)\r\n)\r\n)\r\n)\r\n)\r\n)\r\n)\r\n)\r\n)\r\n)\r\n)\r\n)\r\n)\r\n)\r\n)\r\n)\r\n",
                "0"
            ],
            [
                "20\r\n)\r\n(\r\n)\r\n)\r\n)\r\n)\r\n)\r\n(\r\n(\r\n)\r\n)\r\n)\r\n)\r\n(\r\n)\r\n)\r\n)\r\n)\r\n(\r\n)\r\n",
                "5"
            ],
            [
                "20\r\n)\r\n(\r\n(\r\n)\r\n)\r\n(\r\n)\r\n(\r\n(\r\n(\r\n)\r\n)\r\n)\r\n)\r\n(\r\n)\r\n(\r\n(\r\n)\r\n(\r\n",
                "10"
            ],
            [
                "20\r\n(\r\n(\r\n)\r\n(\r\n(\r\n)\r\n(\r\n(\r\n(\r\n(\r\n(\r\n(\r\n)\r\n)\r\n(\r\n(\r\n(\r\n(\r\n(\r\n)\r\n",
                "5"
            ],
            [
                "20\r\n(\r\n(\r\n(\r\n(\r\n(\r\n(\r\n(\r\n(\r\n(\r\n(\r\n(\r\n(\r\n(\r\n(\r\n(\r\n(\r\n(\r\n(\r\n(\r\n(\r\n",
                "0"
            ]
        ]
    }
]