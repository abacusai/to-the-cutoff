[
    {
        "name": "Li Hua and Tree",
        "description": "Li Hua has a tree of \n    n\n vertices and \n    n-1\n edges. The root of the\ntree is vertex \n    1\n. Each vertex \n    i\n has importance \n    a_i\n. Denote\nthe size of a subtree as the number of vertices in it, and the importance as\nthe sum of the importance of vertices in it. Denote the heavy son of a non-\nleaf vertex as the son with the largest subtree size. If multiple of them\nexist, the heavy son is the one with the minimum index. Li Hua wants to\nperform \n    m\n operations: \"1 \n    x\n\" (\n    1\n    \u2264 x \n    \u2264 n\n) \u2014 calculate\nthe importance of the subtree whose root is \n    x\n. \"2 \n    x\n\" (\n    2\n    \u2264 x\n    \n    \u2264 n\n) \u2014 rotate the heavy son of \n    x\n up. Formally, denote\n\n    son_x\n as the heavy son of \n    x\n, \n    fa_x\n as the father of \n    x\n.\nHe wants to remove the edge between \n    x\n and \n    fa_x\n and connect an edge\nbetween \n    son_x\n and \n    fa_x\n. It is guaranteed that \n    x\n is not root,\nbut not guaranteed that \n    x\n is not a leaf. If \n    x\n is a leaf, please\nignore the operation. Suppose you were Li Hua, please solve this problem.\nInput The first line contains 2 integers \n    n,m\n (\n    2\n    \u2264 n\n    \u2264\n    10^5,1\n    \u2264 m\n    \u2264 10^5\n) \u2014 the number of vertices in the tree and the\nnumber of operations. The second line contains \n    n\n integers\n\n    a_1,a_2,\n    \u2026 ,a_n\n (\n    -10^9\n    \u2264 a_i\n    \u2264 10^9\n) \u2014 the\nimportance of each vertex. Next \n    n-1\n lines contain the edges of the tree.\nThe \n    i\n-th line contains two integers \n    u_i\n and \n    v_i\n (\n    1\n    \u2264\n    u_i,v_i\n    \u2264 n\n, \n    u_i\n     v_i\n) \u2014 the corresponding edge. The given\nedges form a tree. Next \n    m\n lines contain operations \u2014 one operation per\nline. The \n    j\n-th operation contains two integers \n    t_j,x_j\n\n(\n    t_j\n    \u2208\n    \n    1,2\n, \n    1 \n    \u2264 x_j\n    \u2264 n\n, \n    x_j\n    \u2260\n    1\n if \n    t_j = 2\n) \u2014 the \n    j\n-th operation. Output For each query \"1\n\n    x\n\", output the answer in an independent line. Examples Input 7 4 1 1 1 1\n1 1 1 1 2 1 3 2 4 2 5 3 6 6 7 1 6 2 3 1 6 1 2 Output 2 3 3 Input 10 14\n-160016413 -90133231 -671446275 -314847579 -910548234 121155052 -359359950\n83112406 -704889624 145489303 1 6 1 10 10 8 1 4 3 4 2 7 2 5 3 2 9 8 1 4 2 2 2\n4 1 4 1 10 2 10 1 9 1 6 2 8 2 10 1 5 1 8 1 1 2 5 Output -2346335269 -314847579\n-476287915 -704889624 121155052 -1360041415 228601709 -2861484545 Note In the\nfirst example: The initial tree is shown in the following picture: The\nimportance of the subtree of \n    6\n is \n    a_6+a_7=2\n. After rotating the\nheavy son of \n    3\n (which is \n    6\n) up, the tree is shown in the following\npicture: The importance of the subtree of \n    6\n is \n    a_6+a_3+a_7=3\n. The\nimportance of the subtree of \n    2\n is \n    a_2+a_4+a_5=3\n.\n\n",
        "cf_contest_id": 1797,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 4\r\n1 1 1 1 1 1 1\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n6 7\r\n1 6\r\n2 3\r\n1 6\r\n1 2\r\n",
                "2\r\n3\r\n3\r\n"
            ],
            [
                "10 14\r\n-160016413 -90133231 -671446275 -314847579 -910548234 121155052 -359359950 83112406 -704889624 145489303\r\n1 6\r\n1 10\r\n10 8\r\n1 4\r\n3 4\r\n2 7\r\n2 5\r\n3 2\r\n9 8\r\n1 4\r\n2 2\r\n2 4\r\n1 4\r\n1 10\r\n2 10\r\n1 9\r\n1 6\r\n2 8\r\n2 10\r\n1 5\r\n1 8\r\n1 1\r\n2 5\r\n",
                "-2346335269\r\n-314847579\r\n-476287915\r\n-704889624\r\n121155052\r\n-1360041415\r\n228601709\r\n-2861484545\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 63\r\n744218637 833534799\r\n2 1\r\n1 1\r\n2 2\r\n1 2\r\n2 2\r\n1 2\r\n1 2\r\n2 2\r\n2 2\r\n2 2\r\n2 2\r\n2 2\r\n2 2\r\n1 2\r\n2 2\r\n2 2\r\n1 2\r\n2 2\r\n1 2\r\n2 2\r\n2 2\r\n2 2\r\n1 1\r\n2 2\r\n1 1\r\n1 1\r\n1 1\r\n2 2\r\n2 2\r\n2 2\r\n2 2\r\n1 1\r\n2 2\r\n1 1\r\n2 2\r\n2 2\r\n2 2\r\n1 1\r\n1 1\r\n1 2\r\n1 2\r\n2 2\r\n2 2\r\n1 2\r\n2 2\r\n1 1\r\n1 1\r\n1 1\r\n2 2\r\n2 2\r\n1 2\r\n1 2\r\n2 2\r\n2 2\r\n1 2\r\n1 2\r\n2 2\r\n2 2\r\n2 2\r\n1 1\r\n1 2\r\n1 1\r\n1 1\r\n1 1\r\n",
                "1577753436\r\n833534799\r\n833534799\r\n833534799\r\n833534799\r\n833534799\r\n833534799\r\n1577753436\r\n1577753436\r\n1577753436\r\n1577753436\r\n1577753436\r\n1577753436\r\n1577753436\r\n1577753436\r\n833534799\r\n833534799\r\n833534799\r\n1577753436\r\n1577753436\r\n1577753436\r\n833534799\r\n833534799\r\n833534799\r\n833534799\r\n1577753436\r\n833534799\r\n1577753436\r\n1577753436\r\n1577753436\r\n"
            ]
        ]
    }
]