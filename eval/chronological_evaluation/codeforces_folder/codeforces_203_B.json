[
    {
        "name": "Game on Paper",
        "description": "One not particularly beautiful evening Valera got very bored. To amuse himself\na little bit, he found the following game. He took a checkered white square\npiece of paper, consisting of n \u00d7 n cells. After that, he started to paint the\nwhite cells black one after the other. In total he painted m different cells\non the piece of paper. Since Valera was keen on everything square, he\nwondered, how many moves (i.e. times the boy paints a square black) he should\nmake till a black square with side 3 can be found on the piece of paper. But\nValera does not know the answer to this question, so he asks you to help him.\nYour task is to find the minimum number of moves, till the checkered piece of\npaper has at least one black square with side of 3. Otherwise determine that\nsuch move does not exist. Input The first line contains two integers n and m\n(1 \u2264 n \u2264 1000, 1 \u2264 m \u2264 min(n\u00b7n, 10^5)) \u2014 the size of the squared piece of\npaper and the number of moves, correspondingly. Then, m lines contain the\ndescription of the moves. The i-th line contains two integers xi, yi (1 \u2264 xi,\nyi \u2264 n) \u2014 the number of row and column of the square that gets painted on the\ni-th move. All numbers on the lines are separated by single spaces. It is\nguaranteed that all moves are different. The moves are numbered starting from\n1 in the order, in which they are given in the input. The columns of the\nsquared piece of paper are numbered starting from 1, from the left to the\nright. The rows of the squared piece of paper are numbered starting from 1,\nfrom top to bottom. Output On a single line print the answer to the problem \u2014\nthe minimum number of the move after which the piece of paper has a black\nsquare with side 3. If no such move exists, print -1. Examples Input 4 11 1 1\n1 2 1 3 2 2 2 3 1 4 2 4 3 4 3 2 3 3 4 1 Output 10 Input 4 12 1 1 1 2 1 3 2 2 2\n3 1 4 2 4 3 4 3 2 4 2 4 1 3 1 Output -1\n\n",
        "cf_contest_id": 203,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 11\r\n1 1\r\n1 2\r\n1 3\r\n2 2\r\n2 3\r\n1 4\r\n2 4\r\n3 4\r\n3 2\r\n3 3\r\n4 1\r\n",
                "10\r\n"
            ],
            [
                "4 12\r\n1 1\r\n1 2\r\n1 3\r\n2 2\r\n2 3\r\n1 4\r\n2 4\r\n3 4\r\n3 2\r\n4 2\r\n4 1\r\n3 1\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 1\r\n1 3\r\n",
                "-1\r\n"
            ],
            [
                "3 8\r\n1 3\r\n3 3\r\n2 2\r\n3 2\r\n1 1\r\n1 2\r\n2 3\r\n3 1\r\n",
                "-1\r\n"
            ],
            [
                "3 9\r\n2 3\r\n1 3\r\n3 1\r\n1 1\r\n3 3\r\n2 1\r\n2 2\r\n1 2\r\n3 2\r\n",
                "9\r\n"
            ],
            [
                "4 16\r\n1 3\r\n4 4\r\n4 1\r\n2 3\r\n3 1\r\n3 2\r\n1 4\r\n2 2\r\n1 2\r\n3 3\r\n2 1\r\n1 1\r\n4 2\r\n2 4\r\n4 3\r\n3 4\r\n",
                "12\r\n"
            ],
            [
                "4 12\r\n2 2\r\n1 1\r\n3 3\r\n3 4\r\n1 2\r\n1 3\r\n1 4\r\n2 1\r\n3 2\r\n2 3\r\n3 1\r\n4 1\r\n",
                "11\r\n"
            ],
            [
                "5 20\r\n2 3\r\n1 3\r\n5 1\r\n1 2\r\n3 3\r\n5 4\r\n5 5\r\n1 5\r\n1 4\r\n4 5\r\n2 5\r\n5 2\r\n4 3\r\n3 2\r\n1 1\r\n2 4\r\n3 5\r\n2 2\r\n3 4\r\n5 3\r\n",
                "19\r\n"
            ],
            [
                "10 60\r\n6 7\r\n2 4\r\n3 6\r\n1 4\r\n8 7\r\n2 8\r\n5 7\r\n6 4\r\n5 10\r\n1 7\r\n3 9\r\n3 4\r\n9 2\r\n7 1\r\n3 8\r\n10 7\r\n9 7\r\n9 1\r\n5 5\r\n4 7\r\n5 8\r\n4 2\r\n2 2\r\n9 4\r\n3 3\r\n7 5\r\n7 4\r\n7 7\r\n8 2\r\n8 1\r\n4 5\r\n1 10\r\n9 6\r\n3 1\r\n1 3\r\n3 2\r\n10 10\r\n4 6\r\n5 4\r\n7 3\r\n10 1\r\n3 7\r\n5 1\r\n10 9\r\n4 10\r\n6 10\r\n7 10\r\n5 9\r\n5 6\r\n1 2\r\n7 8\r\n3 5\r\n9 8\r\n9 5\r\n8 10\r\n4 3\r\n10 6\r\n9 10\r\n5 3\r\n2 7\r\n",
                "52\r\n"
            ],
            [
                "2 4\r\n2 1\r\n1 2\r\n1 1\r\n2 2\r\n",
                "-1\r\n"
            ],
            [
                "2 1\r\n1 1\r\n",
                "-1\r\n"
            ],
            [
                "1 1\r\n1 1\r\n",
                "-1\r\n"
            ],
            [
                "10 50\r\n9 7\r\n4 8\r\n8 9\r\n1 6\r\n6 3\r\n3 1\r\n5 10\r\n7 2\r\n8 4\r\n1 9\r\n5 5\r\n4 9\r\n3 5\r\n6 7\r\n1 4\r\n10 10\r\n5 7\r\n1 1\r\n4 10\r\n6 2\r\n3 9\r\n4 3\r\n7 8\r\n5 9\r\n2 7\r\n2 10\r\n3 10\r\n1 10\r\n6 9\r\n7 5\r\n10 1\r\n3 8\r\n3 6\r\n2 6\r\n10 9\r\n8 6\r\n4 7\r\n10 7\r\n6 6\r\n8 10\r\n9 3\r\n10 2\r\n9 2\r\n10 5\r\n8 5\r\n5 6\r\n10 6\r\n7 10\r\n8 2\r\n8 8\r\n",
                "-1\r\n"
            ],
            [
                "50 20\r\n29 33\r\n25 9\r\n34 40\r\n46 16\r\n39 8\r\n49 36\r\n18 47\r\n41 29\r\n48 31\r\n38 20\r\n49 3\r\n28 30\r\n4 27\r\n25 38\r\n4 38\r\n8 34\r\n10 8\r\n22 14\r\n35 13\r\n17 46\r\n",
                "-1\r\n"
            ],
            [
                "1000 1\r\n542 374\r\n",
                "-1\r\n"
            ],
            [
                "50 18\r\n20 20\r\n20 21\r\n20 22\r\n21 20\r\n21 21\r\n21 22\r\n22 20\r\n22 21\r\n22 22\r\n1 1\r\n1 2\r\n1 3\r\n2 1\r\n2 2\r\n2 3\r\n3 1\r\n3 2\r\n3 3\r\n",
                "9\r\n"
            ],
            [
                "1000 10\r\n1000 1000\r\n1000 999\r\n1000 998\r\n999 1000\r\n999 999\r\n999 998\r\n998 1000\r\n998 999\r\n998 998\r\n1 1\r\n",
                "9\r\n"
            ],
            [
                "500 9\r\n50 51\r\n50 52\r\n50 53\r\n52 53\r\n51 51\r\n51 52\r\n51 53\r\n52 51\r\n52 52\r\n",
                "9\r\n"
            ]
        ]
    }
]