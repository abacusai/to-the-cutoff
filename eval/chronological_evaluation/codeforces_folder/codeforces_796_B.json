[
    {
        "name": "Find The Bone",
        "description": "Zane the wizard is going to perform a magic show shuffling the cups. There are\nn cups, numbered from 1 to n, placed along the x-axis on a table that has m\nholes on it. More precisely, cup i is on the table at the position x = i. The\nproblematic bone is initially at the position x = 1. Zane will confuse the\naudience by swapping the cups k times, the i-th time of which involves the\ncups at the positions x = ui and x = vi. If the bone happens to be at the\nposition where there is a hole at any time, it will fall into the hole onto\nthe ground and will not be affected by future swapping operations. Do not\nforget that Zane is a wizard. When he swaps the cups, he does not move them\nordinarily. Instead, he teleports the cups (along with the bone, if it is\ninside) to the intended positions. Therefore, for example, when he swaps the\ncup at x = 4 and the one at x = 6, they will not be at the position x = 5 at\nany moment during the operation. Zane\u2019s puppy, Inzane, is in trouble. Zane is\naway on his vacation, and Inzane cannot find his beloved bone, as it would be\ntoo exhausting to try opening all the cups. Inzane knows that the Codeforces\ncommunity has successfully helped Zane, so he wants to see if it could help\nhim solve his problem too. Help Inzane determine the final position of the\nbone. Input The first line contains three integers n, m, and k (2 \u2264 n \u2264 10^6,\n1 \u2264 m \u2264 n, 1 \u2264 k \u2264 3\u00b710^5) \u2014 the number of cups, the number of holes on the\ntable, and the number of swapping operations, respectively. The second line\ncontains m distinct integers h1, h2, ..., hm (1 \u2264 hi \u2264 n) \u2014 the positions\nalong the x-axis where there is a hole on the table. Each of the next k lines\ncontains two integers ui and vi (1 \u2264 ui, vi \u2264 n, ui \u2260 vi) \u2014 the positions of\nthe cups to be swapped. Output Print one integer \u2014 the final position along\nthe x-axis of the bone. Examples Input 7 3 4 3 4 6 1 2 2 5 5 7 7 1 Output 1\nInput 5 1 2 2 1 2 2 4 Output 2 Note In the first sample, after the operations,\nthe bone becomes at x = 2, x = 5, x = 7, and x = 1, respectively. In the\nsecond sample, after the first operation, the bone becomes at x = 2, and falls\ninto the hole onto the ground.\n\n",
        "cf_contest_id": 796,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7 3 4\r\n3 4 6\r\n1 2\r\n2 5\r\n5 7\r\n7 1\r\n",
                "1\r\n"
            ],
            [
                "5 1 2\r\n2\r\n1 2\r\n2 4\r\n",
                "2\r\n"
            ]
        ],
        "private_cases": [
            [
                "10000 1 9\r\n55\r\n44 1\r\n2929 9292\r\n9999 9998\r\n44 55\r\n49 94\r\n55 53\r\n100 199\r\n55 50\r\n53 11\r\n",
                "55\r\n"
            ],
            [
                "100000 3 7\r\n2 3 4\r\n1 5\r\n5 1\r\n1 5\r\n5 1\r\n1 4\r\n4 3\r\n3 2\r\n",
                "4\r\n"
            ],
            [
                "1000000 9 11\r\n38 59 999999 199 283 4849 1000000 2 554\r\n39 94\r\n3 9\r\n1 39\r\n39 40\r\n40 292\r\n5399 5858\r\n292 49949\r\n49949 222\r\n222 38\r\n202 9494\r\n38 59\r\n",
                "38\r\n"
            ],
            [
                "1000000 11 9\r\n19 28 39 82 99 929384 8298 892849 202020 777777 123123\r\n19 28\r\n28 39\r\n1 123124\r\n39 28\r\n28 99\r\n99 8298\r\n123124 123122\r\n2300 3200\r\n8298 1000000\r\n",
                "123122\r\n"
            ],
            [
                "2 1 1\r\n1\r\n1 2\r\n",
                "1\r\n"
            ],
            [
                "7 3 6\r\n1 4 5\r\n1 2\r\n2 3\r\n3 5\r\n4 5\r\n4 5\r\n4 5\r\n",
                "1\r\n"
            ],
            [
                "10 3 8\r\n1 5 10\r\n1 2\r\n2 3\r\n3 4\r\n3 4\r\n3 4\r\n4 5\r\n5 6\r\n6 5\r\n",
                "1\r\n"
            ],
            [
                "5 2 9\r\n2 4\r\n1 3\r\n3 5\r\n3 5\r\n3 4\r\n4 2\r\n2 4\r\n1 4\r\n1 2\r\n1 4\r\n",
                "4\r\n"
            ],
            [
                "10 10 13\r\n1 2 3 4 5 6 7 8 9 10\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n6 7\r\n6 10\r\n10 9\r\n9 1\r\n1 10\r\n1 10\r\n1 10\r\n",
                "1\r\n"
            ],
            [
                "3 3 3\r\n1 2 3\r\n1 2\r\n2 3\r\n3 2\r\n",
                "1\r\n"
            ],
            [
                "100 7 7\r\n17 27 37 47 57 67 77\r\n49 39\r\n55 1\r\n50 3\r\n89 1\r\n1 99\r\n100 55\r\n98 55\r\n",
                "100\r\n"
            ],
            [
                "9 1 9\r\n9\r\n1 2\r\n3 2\r\n4 3\r\n8 9\r\n4 5\r\n7 4\r\n8 5\r\n1 3\r\n3 2\r\n",
                "8\r\n"
            ],
            [
                "300000 1 1\r\n200000\r\n300000 1\r\n",
                "300000\r\n"
            ],
            [
                "203948 2 14\r\n203948 203946\r\n39 38\r\n4959 3030\r\n1 203947\r\n2929 9292\r\n203944 203948\r\n203947 203944\r\n203944 203922\r\n203922 203948\r\n2495 20495\r\n29419 5959\r\n12949 12\r\n49 29292\r\n1 94\r\n1 203\r\n",
                "203948\r\n"
            ],
            [
                "203948 2 14\r\n203948 203947\r\n39 38\r\n4959 3030\r\n1 203947\r\n2929 9292\r\n203944 203948\r\n203947 203944\r\n203944 203922\r\n203922 203948\r\n2495 20495\r\n29419 5959\r\n12949 12\r\n49 29292\r\n1 94\r\n1 203\r\n",
                "203947\r\n"
            ],
            [
                "100 2 5\r\n1 2\r\n2 39\r\n39 29\r\n99 100\r\n1 2\r\n2 39\r\n",
                "1\r\n"
            ],
            [
                "3 1 1\r\n1\r\n1 2\r\n",
                "1\r\n"
            ],
            [
                "5 2 2\r\n1 2\r\n1 2\r\n2 3\r\n",
                "1\r\n"
            ],
            [
                "2 2 1\r\n1 2\r\n2 1\r\n",
                "1\r\n"
            ],
            [
                "5 2 1\r\n1 2\r\n2 1\r\n",
                "1\r\n"
            ],
            [
                "5 1 1\r\n5\r\n3 4\r\n",
                "1\r\n"
            ],
            [
                "3 2 1\r\n1 2\r\n2 1\r\n",
                "1\r\n"
            ],
            [
                "5 1 2\r\n2\r\n2 1\r\n2 3\r\n",
                "2\r\n"
            ],
            [
                "3 1 2\r\n2\r\n2 1\r\n2 3\r\n",
                "2\r\n"
            ],
            [
                "3 2 2\r\n2 3\r\n2 1\r\n2 3\r\n",
                "2\r\n"
            ],
            [
                "4 2 1\r\n1 2\r\n2 1\r\n",
                "1\r\n"
            ],
            [
                "4 1 1\r\n2\r\n2 3\r\n",
                "1\r\n"
            ],
            [
                "3 2 1\r\n1 3\r\n3 1\r\n",
                "1\r\n"
            ],
            [
                "10 1 3\r\n2\r\n2 1\r\n2 4\r\n9 10\r\n",
                "2\r\n"
            ],
            [
                "5 2 4\r\n3 5\r\n1 2\r\n4 2\r\n3 4\r\n3 5\r\n",
                "3\r\n"
            ],
            [
                "4 3 1\r\n1 2 3\r\n2 1\r\n",
                "1\r\n"
            ]
        ]
    }
]