[
    {
        "name": "Nezzar and Binary String",
        "description": "Nezzar has a binary string \n    s\n of length \n    n\n that he wants to share\nwith his best friend, Nanako. Nanako will spend \n    q\n days inspecting the\nbinary string. At the same time, Nezzar wants to change the string \n    s\n\ninto string \n    f\n during these \n    q\n days, because it looks better. It is\nknown that Nanako loves consistency so much. On the \n    i\n-th day, Nanako\nwill inspect a segment of string \n    s\n from position \n    l_i\n to position\n\n    r_i\n inclusive. If the segment contains both characters '0' and '1',\nNanako becomes unhappy and throws away the string. After this inspection, at\nthe \n    i\n-th night, Nezzar can secretly change strictly less than half of\nthe characters in the segment from \n    l_i\n to \n    r_i\n inclusive, otherwise\nthe change will be too obvious. Now Nezzar wonders, if it is possible to avoid\nNanako being unhappy and at the same time have the string become equal to the\nstring \n    f\n at the end of these \n    q\n days and nights. Input The first\nline contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 2 \n    \u00b7 10^5\n)\n\u2014 the number of test cases. The first line of each test case contains two\nintegers \n    n,q\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n, \n    0 \n    \u2264 q \n    \u2264 2\n    \n    \u00b7 10^5\n). The second line of each test case contains a binary string\n\n    s\n of length \n    n\n. The third line of each test case contains a binary\nstring \n    f\n of length \n    n\n. Then \n    q\n lines follow, \n    i\n-th of\nthem contains two integers \n    l_i,r_i\n (\n    1 \n    \u2264 l_i \n    \u2264 r_i \n    \u2264 n\n)\n\u2014 bounds of the segment, that Nanako will inspect on the \n    i\n-th day. It is\nguaranteed that the sum of \n    n\n for all test cases doesn't exceed \n    2\n    \n    \u00b7 10^5\n, and the sum of \n    q\n for all test cases doesn't exceed \n    2\n    \n    \u00b7 10^5\n. Output For each test case, print \"YES\" on the single line if\nit is possible to avoid Nanako being unhappy and have the string \n    f\n at\nthe end of \n    q\n days and nights. Otherwise, print \"NO\". You can print each\nletter in any case (upper or lower). Example Input 4 5 2 00000 00111 1 5 1 3 2\n1 00 01 1 2 10 6 1111111111 0110001110 1 10 5 9 7 10 1 7 3 5 6 10 5 2 10000\n11000 2 5 1 3 Output YES NO YES NO Note In the first test case,\n\n    00000\n    \u2192\n    00011 \n    \u2192\n    00111\n is one of the possible sequences of string changes. In the second\ntest case, it can be shown that it is impossible to have the string \n    f\n at\nthe end.\n\n",
        "cf_contest_id": 1477,
        "cf_index": "B",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4\r\n5 2\r\n00000\r\n00111\r\n1 5\r\n1 3\r\n2 1\r\n00\r\n01\r\n1 2\r\n10 6\r\n1111111111\r\n0110001110\r\n1 10\r\n5 9\r\n7 10\r\n1 7\r\n3 5\r\n6 10\r\n5 2\r\n10000\r\n11000\r\n2 5\r\n1 3\r\n",
                "YES\r\nNO\r\nYES\r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n4 1\r\n0011\r\n0011\r\n1 4\r\n",
                "NO\r\n"
            ]
        ]
    }
]