[
    {
        "name": "Dominoes",
        "description": "During the break, we decided to relax and play dominoes. Our box with Domino\nwas empty, so we decided to borrow the teacher's dominoes. The teacher\nresponded instantly at our request. He put nm dominoes on the table as an n \u00d7\n2m rectangle so that each of the n rows contained m dominoes arranged\nhorizontally. Each half of each domino contained number (0 or 1). We were\ntaken aback, and the teacher smiled and said: \"Consider some arrangement of\ndominoes in an n \u00d7 2m matrix. Let's count for each column of the matrix the\nsum of numbers in this column. Then among all such sums find the maximum one.\nCan you rearrange the dominoes in the matrix in such a way that the maximum\nsum will be minimum possible? Note that it is prohibited to change the\norientation of the dominoes, they all need to stay horizontal, nevertheless\ndominoes are allowed to rotate by 180 degrees. As a reward I will give you all\nmy dominoes\". We got even more taken aback. And while we are wondering what\nwas going on, help us make an optimal matrix of dominoes. Input The first line\ncontains integers n, m (1 \u2264 n, m \u2264 10^3). In the next lines there is a\ndescription of the teachers' matrix. Each of next n lines contains m dominoes.\nThe description of one domino is two integers (0 or 1), written without a\nspace \u2014 the digits on the left and right half of the domino. Output Print the\nresulting matrix of dominoes in the format: n lines, each of them contains m\nspace-separated dominoes. If there are multiple optimal solutions, print any\nof them. Examples Input 2 3 01 11 00 00 01 11 Output 11 11 10 00 00 01 Input 4\n1 11 10 01 00 Output 11 10 01 00 Note Consider the answer for the first\nsample. There, the maximum sum among all columns equals 1 (the number of\ncolumns is 6, and not 3). Obviously, this maximum can't be less than 1, then\nsuch matrix is optimal. Note that the dominoes can be rotated by 180 degrees.\n\n",
        "cf_contest_id": 394,
        "cf_index": "C",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 3\r\n01 11 00\r\n00 01 11\r\n",
                "11 11 01 \r\n00 00 10 \r\n"
            ],
            [
                "4 1\r\n11\r\n10\r\n01\r\n00\r\n",
                "11 \r\n10 \r\n01 \r\n00 \r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n00\r\n",
                "00 \r\n"
            ],
            [
                "1 1\r\n01\r\n",
                "01 \r\n"
            ],
            [
                "1 1\r\n11\r\n",
                "11 \r\n"
            ],
            [
                "9 9\r\n01 00 00 01 00 01 11 11 11\r\n10 10 10 01 10 01 11 01 10\r\n10 00 10 00 11 01 00 10 00\r\n01 00 01 01 11 00 00 11 11\r\n11 00 10 11 01 01 11 00 01\r\n01 10 00 00 11 10 01 01 10\r\n11 10 11 00 11 11 01 10 10\r\n10 00 01 00 00 00 11 01 01\r\n00 11 01 00 10 01 10 00 01\r\n",
                "11 11 11 11 11 11 11 11 11 \r\n11 11 11 11 11 11 11 11 11 \r\n01 01 01 01 01 01 01 01 01 \r\n10 10 10 10 10 10 10 10 10 \r\n01 01 01 01 01 01 01 01 01 \r\n10 10 10 10 10 10 10 10 10 \r\n00 00 00 00 01 01 01 01 01 \r\n00 00 00 00 00 00 00 00 00 \r\n00 00 00 00 00 00 00 00 00 \r\n"
            ],
            [
                "9 9\r\n10 10 10 01 10 11 11 01 10\r\n11 00 10 10 11 10 01 00 00\r\n10 00 11 01 00 01 01 11 10\r\n10 11 10 00 01 11 11 10 11\r\n01 11 11 01 11 00 10 00 01\r\n01 00 00 10 01 01 10 00 01\r\n11 10 11 10 01 00 00 11 00\r\n10 11 10 10 01 10 10 10 01\r\n10 10 10 10 11 11 01 00 11\r\n",
                "11 11 11 11 11 11 11 11 11 \r\n11 11 11 11 11 11 11 11 11 \r\n11 11 01 01 01 01 01 01 01 \r\n10 10 10 10 10 10 10 10 10 \r\n01 01 01 01 01 01 01 01 01 \r\n10 10 10 10 10 10 10 10 10 \r\n01 01 01 01 01 01 01 01 01 \r\n00 00 00 00 00 00 10 10 10 \r\n00 00 00 00 00 00 00 00 00 \r\n"
            ],
            [
                "9 1\r\n01\r\n00\r\n01\r\n01\r\n00\r\n00\r\n00\r\n01\r\n11\r\n",
                "11 \r\n10 \r\n01 \r\n10 \r\n01 \r\n00 \r\n00 \r\n00 \r\n00 \r\n"
            ],
            [
                "2 9\r\n11 10 11 10 10 11 00 10 00\r\n10 00 00 10 10 00 11 01 01\r\n",
                "11 11 11 11 01 01 01 01 01 \r\n00 00 00 00 00 10 10 10 10 \r\n"
            ],
            [
                "2 8\r\n10 01 01 11 10 10 01 10\r\n01 11 01 01 11 10 01 01\r\n",
                "11 11 11 01 01 01 01 01 \r\n10 10 10 10 10 10 10 10 \r\n"
            ],
            [
                "3 5\r\n00 10 10 11 01\r\n11 01 11 11 10\r\n10 11 00 00 00\r\n",
                "11 11 11 11 11 \r\n10 10 10 10 10 \r\n00 00 00 00 01 \r\n"
            ],
            [
                "2 3\r\n00 10 01\r\n01 01 00\r\n",
                "01 01 01 \r\n00 00 10 \r\n"
            ],
            [
                "2 5\r\n01 00 01 01 00\r\n11 01 11 11 10\r\n",
                "11 11 11 01 01 \r\n00 00 10 10 10 \r\n"
            ]
        ]
    }
]