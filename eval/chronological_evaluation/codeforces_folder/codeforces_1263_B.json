[
    {
        "name": "PIN Codes",
        "description": "A PIN code is a string that consists of exactly \n    4\n digits. Examples of\npossible PIN codes: 7013, 0000 and 0990. Please note that the PIN code can\nbegin with any digit, even with 0. Polycarp has \n    n\n (\n    2 \n    \u2264 n \n    \u2264\n    10\n) bank cards, the PIN code of the \n    i\n-th card is \n    p_i\n. Polycarp\nhas recently read a recommendation that it is better to set different PIN\ncodes on different cards. Thus he wants to change the minimal number of digits\nin the PIN codes of his cards so that all \n    n\n codes would become\ndifferent. Formally, in one step, Polycarp picks \n    i\n-th card (\n    1 \n    \u2264 i\n    \n    \u2264 n\n), then in its PIN code \n    p_i\n selects one position (from \n    1\n\nto \n    4\n), and changes the digit in this position to any other. He needs to\nchange the minimum number of digits so that all PIN codes become different.\nPolycarp quickly solved this problem. Can you solve it? Input The first line\ncontains integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test\ncases in the input. Then test cases follow. The first line of each of \n    t\n\ntest sets contains a single integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264 10\n) \u2014 the\nnumber of Polycarp's bank cards. The next \n    n\n lines contain the PIN codes\n\n    p_1, p_2, \n    \u2026, p_n\n \u2014 one per line. The length of each of them is\n\n    4\n. All PIN codes consist of digits only. Output Print the answers to\n\n    t\n test sets. The answer to each set should consist of a \n    n + 1\n\nlines In the first line print \n    k\n \u2014 the least number of changes to make\nall PIN codes different. In the next \n    n\n lines output the changed PIN\ncodes in the order corresponding to their appearance in the input. If there\nare several optimal answers, print any of them. Example Input 3 2 1234 0600 2\n1337 1337 4 3139 3139 3139 3139 Output 0 1234 0600 1 1337 1237 3 3139 3138\n3939 6139\n\n",
        "cf_contest_id": 1263,
        "cf_index": "B",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2\r\n1234\r\n0600\r\n2\r\n1337\r\n1337\r\n4\r\n3139\r\n3139\r\n3139\r\n3139\r\n",
                "0\r\n1234\r\n0600\r\n1\r\n1330\r\n1337\r\n3\r\n3130\r\n3131\r\n3132\r\n3139\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n10\r\n0000\r\n0000\r\n0000\r\n0000\r\n0000\r\n0000\r\n0000\r\n0000\r\n0000\r\n0000\r\n1\r\n1234\r\n7\r\n1234\r\n4567\r\n8901\r\n2345\r\n6789\r\n0123\r\n4567\r\n",
                "9\r\n0001\r\n0002\r\n0003\r\n0004\r\n0005\r\n0006\r\n0007\r\n0008\r\n0009\r\n0000\r\n0\r\n1234\r\n1\r\n1234\r\n4560\r\n8901\r\n2345\r\n6789\r\n0123\r\n4567\r\n"
            ],
            [
                "4\r\n4\r\n3139\r\n3138\r\n3138\r\n3137\r\n4\r\n3138\r\n3148\r\n3148\r\n3158\r\n4\r\n3138\r\n3238\r\n3238\r\n3338\r\n4\r\n3138\r\n4138\r\n4138\r\n5138\r\n",
                "1\r\n3139\r\n3130\r\n3138\r\n3137\r\n1\r\n3138\r\n3140\r\n3148\r\n3158\r\n1\r\n3138\r\n3230\r\n3238\r\n3338\r\n1\r\n3138\r\n4130\r\n4138\r\n5138\r\n"
            ],
            [
                "1\r\n3\r\n0000\r\n0000\r\n0001\r\n",
                "1\r\n0002\r\n0000\r\n0001\r\n"
            ],
            [
                "14\r\n3\r\n0000\r\n0000\r\n0001\r\n3\r\n0000\r\n0001\r\n0000\r\n3\r\n0001\r\n0000\r\n0000\r\n3\r\n0000\r\n0000\r\n1000\r\n3\r\n0000\r\n1000\r\n0000\r\n3\r\n1000\r\n0000\r\n0000\r\n3\r\n0000\r\n0001\r\n0001\r\n3\r\n0001\r\n0000\r\n0001\r\n3\r\n0001\r\n0001\r\n0000\r\n3\r\n0000\r\n1000\r\n1000\r\n3\r\n1000\r\n0000\r\n1000\r\n3\r\n1000\r\n1000\r\n0000\r\n4\r\n0000\r\n0001\r\n0001\r\n0002\r\n4\r\n0000\r\n1000\r\n1000\r\n2000\r\n",
                "1\r\n0002\r\n0000\r\n0001\r\n1\r\n0002\r\n0001\r\n0000\r\n1\r\n0001\r\n0002\r\n0000\r\n1\r\n0001\r\n0000\r\n1000\r\n1\r\n0001\r\n1000\r\n0000\r\n1\r\n1000\r\n0001\r\n0000\r\n1\r\n0000\r\n0002\r\n0001\r\n1\r\n0002\r\n0000\r\n0001\r\n1\r\n0002\r\n0001\r\n0000\r\n1\r\n0000\r\n1001\r\n1000\r\n1\r\n1001\r\n0000\r\n1000\r\n1\r\n1001\r\n1000\r\n0000\r\n1\r\n0000\r\n0003\r\n0001\r\n0002\r\n1\r\n0000\r\n1001\r\n1000\r\n2000\r\n"
            ],
            [
                "1\r\n3\r\n0990\r\n0990\r\n0991\r\n",
                "1\r\n0992\r\n0990\r\n0991\r\n"
            ],
            [
                "1\r\n3\r\n1234\r\n1234\r\n1034\r\n",
                "1\r\n1230\r\n1234\r\n1034\r\n"
            ],
            [
                "1\r\n3\r\n1111\r\n1111\r\n1112\r\n",
                "1\r\n1110\r\n1111\r\n1112\r\n"
            ],
            [
                "3\r\n3\r\n0000\r\n0000\r\n0001\r\n4\r\n0000\r\n0000\r\n0001\r\n0002\r\n4\r\n0000\r\n0000\r\n0001\r\n0003\r\n",
                "1\r\n0002\r\n0000\r\n0001\r\n1\r\n0003\r\n0000\r\n0001\r\n0002\r\n1\r\n0002\r\n0000\r\n0001\r\n0003\r\n"
            ],
            [
                "1\r\n3\r\n1234\r\n1234\r\n1230\r\n",
                "1\r\n1231\r\n1234\r\n1230\r\n"
            ],
            [
                "1\r\n3\r\n0000\r\n0000\r\n0009\r\n",
                "1\r\n0001\r\n0000\r\n0009\r\n"
            ],
            [
                "1\r\n4\r\n0000\r\n0000\r\n0000\r\n0001\r\n",
                "2\r\n0002\r\n0003\r\n0000\r\n0001\r\n"
            ],
            [
                "1\r\n3\r\n1000\r\n1000\r\n9000\r\n",
                "1\r\n1001\r\n1000\r\n9000\r\n"
            ],
            [
                "1\r\n3\r\n0000\r\n0020\r\n0000\r\n",
                "1\r\n0001\r\n0020\r\n0000\r\n"
            ]
        ]
    }
]