[
    {
        "name": "Mashmokh's Designed Problem",
        "description": "After a lot of trying, Mashmokh designed a problem and it's your job to solve\nit. You have a tree T with n vertices. Each vertex has a unique index from 1\nto n. The root of T has index 1. For each vertex of this tree v, you are given\na list of its children in a specific order. You must perform three types of\nquery on this tree: find distance (the number of edges in the shortest path)\nbetween u and v; given v and h, disconnect v from its father and connect it to\nits h-th ancestor; more formally, let's denote the path from v to the root by\nx1, x2, ..., xl (h < l), so that x1 = v and xl is root; disconnect v from its\nfather (x2) and connect it to xh + 1; vertex v must be added to the end of the\nchild-list of vertex xh + 1; in the vertex sequence produced by calling\nfunction dfs(root) find the latest vertex that has distance k from the root.\nThe pseudo-code of function dfs(v): // ls[v]: list of children of vertex v //\nits i-th element is ls[v][i] // its size is size(ls[v]) sequence result =\nempty sequence; void dfs(vertex now)  add now to end of result; for(int i =\n1; i <= size(ls[v]); i = i + 1) //loop from i = 1 to i = size(ls[v])\ndfs(ls[v][i]);  Input The first line of input contains two space-separated\nintegers n, m (2 \u2264 n \u2264 10^5; 1 \u2264 m \u2264 10^5), the number of vertices of T and\nnumber of queries to perform. The i-th of the following n lines contains an\ninteger li (0 \u2264 li \u2264 n), number of i-th vertex's children. Then li space-\nseparated integers follow, the j-th of them is the index of j-th child of i-th\nvertex. Note that the order of these vertices is important. Each of the\nfollowing m lines has one of the following format: \"1 v u\", \"2 v h\", or \"3 k\".\nThe first number in the line is the type of query to perform according to the\nproblem statement. The next numbers are description of the query. It's\nguaranteed that all the queries are correct. For example, in the second-type\nquery h is at least 2 and at most distance of v from root. Also in the third-\ntype query there is at least one vertex with distance k from the root at the\ntime the query is given. Output For each query of the first or third type\noutput one line containing the result of the query. Examples Input 4 9 1 2 1 3\n1 4 0 1 1 4 2 4 2 1 3 4 3 1 3 2 2 3 2 1 1 2 3 1 3 2 Output 3 2 2 4 1 3 4 Input\n2 2 1 2 0 1 2 1 3 1 Output 1 2\n\n",
        "cf_contest_id": 414,
        "cf_index": "E",
        "cf_rating": 3200,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4 9\r\n1 2\r\n1 3\r\n1 4\r\n0\r\n1 1 4\r\n2 4 2\r\n1 3 4\r\n3 1\r\n3 2\r\n2 3 2\r\n1 1 2\r\n3 1\r\n3 2\r\n",
                "3\r\n2\r\n2\r\n4\r\n1\r\n3\r\n4\r\n"
            ],
            [
                "2 2\r\n1 2\r\n0\r\n1 2 1\r\n3 1\r\n",
                "1\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 8\r\n1 2\r\n1 3\r\n0\r\n1 1 2\r\n1 1 3\r\n3 1\r\n3 2\r\n2 3 2\r\n3 1\r\n1 1 3\r\n1 1 2\r\n",
                "1\r\n2\r\n2\r\n3\r\n3\r\n1\r\n1\r\n"
            ],
            [
                "5 12\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n0\r\n2 3 2\r\n1 1 2\r\n1 3 1\r\n1 1 5\r\n1 4 5\r\n3 3\r\n2 4 2\r\n3 2\r\n1 2 3\r\n1 5 4\r\n2 5 2\r\n3 1\r\n",
                "1\r\n1\r\n3\r\n1\r\n5\r\n5\r\n2\r\n1\r\n5\r\n"
            ]
        ]
    }
]