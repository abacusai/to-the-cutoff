[
    {
        "name": "Universal Solution",
        "description": "Recently, you found a bot to play \"Rock paper scissors\" with. Unfortunately,\nthe bot uses quite a simple algorithm to play: he has a string \n    s = s_1 s_2\n    \n    \u2026 s_n\n of length \n    n\n where each letter is either R, S or P.\nWhile initializing, the bot is choosing a starting index \n    pos\n (\n    1 \n    \u2264\n    pos \n    \u2264 n\n), and then it can play any number of rounds. In the first\nround, he chooses \"Rock\", \"Scissors\" or \"Paper\" based on the value of\n\n    s_pos\n: if \n    s_pos\n is equal to R the bot chooses \"Rock\"; if\n\n    s_pos\n is equal to S the bot chooses \"Scissors\"; if \n    s_pos\n is\nequal to P the bot chooses \"Paper\"; In the second round, the bot's choice is\nbased on the value of \n    s_pos + 1\n. In the third round \u2014 on \n    s_pos +\n    2\n and so on. After \n    s_n\n the bot returns to \n    s_1\n and continues\nhis game. You plan to play \n    n\n rounds and you've already figured out the\nstring \n    s\n but still don't know what is the starting index \n    pos\n. But\nsince the bot's tactic is so boring, you've decided to find \n    n\n choices to\neach round to maximize the average number of wins. In other words, let's\nsuggest your choices are \n    c_1 c_2 \n    \u2026 c_n\n and if the bot starts from\nindex \n    pos\n then you'll win in \n    win(pos)\n rounds. Find \n    c_1 c_2\n    \n    \u2026 c_n\n such that \n    win(1) + win(2) + \n    \u2026 + win(n)/n\n\nis maximum possible. Input The first line contains a single integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of test cases. Next \n    t\n lines\ncontain test cases \u2014 one per line. The first and only line of each test case\ncontains string \n    s = s_1 s_2 \n    \u2026 s_n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7\n    10^5\n; \n    s_i \n    \u2208\n    \n    \n    R, \n    S, \n    P\n) \u2014 the\nstring of the bot. It's guaranteed that the total length of all strings in one\ntest doesn't exceed \n    2 \n    \u00b7 10^5\n. Output For each test case, print\n\n    n\n choices \n    c_1 c_2 \n    \u2026 c_n\n to maximize the average number of\nwins. Print them in the same manner as the string \n    s\n. If there are\nmultiple optimal answers, print any of them. Example Input 3 RRRR RSP S Output\nPPPP RSP R Note In the first test case, the bot (wherever it starts) will\nalways choose \"Rock\", so we can always choose \"Paper\". So, in any case, we\nwill win all \n    n = 4\n rounds, so the average is also equal to \n    4\n. In\nthe second test case: if bot will start from \n    pos = 1\n, then \n    (s_1,\n    c_1)\n is draw, \n    (s_2, c_2)\n is draw and \n    (s_3, c_3)\n is draw, so\n\n    win(1) = 0\n; if bot will start from \n    pos = 2\n, then \n    (s_2, c_1)\n\nis win, \n    (s_3, c_2)\n is win and \n    (s_1, c_3)\n is win, so \n    win(2) =\n    3\n; if bot will start from \n    pos = 3\n, then \n    (s_3, c_1)\n is lose,\n\n    (s_1, c_2)\n is lose and \n    (s_2, c_3)\n is lose, so \n    win(3) = 0\n;\nThe average is equal to \n    0 + 3 + 0/3 = 1\n and it can be proven\nthat it's the maximum possible average.A picture from Wikipedia explaining\n\"Rock paper scissors\" game:\n\n",
        "cf_contest_id": 1380,
        "cf_index": "B",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\nRRRR\r\nRSP\r\nS\r\n",
                "PPPP\r\nRRR\r\nR\r\n"
            ]
        ],
        "private_cases": []
    }
]