[
    {
        "name": "Centroid Guess",
        "description": "This in an interactive problem. There is an unknown tree consisting of \n    n\n\nnodes, which has exactly one centroid. You only know \n    n\n at first, and\nyour task is to find the centroid of the tree. You can ask the distance\nbetween any two vertices for at most \n    2\n    \u00b710^5\n times. Note that the\ninteractor is not adaptive. That is, the tree is fixed in each test beforehand\nand does not depend on your queries. A vertex is called a centroid if its\nremoval splits the tree into subtrees with at most\n\n    \u230a\n    n/2\n    \u230b\n vertices each. Input The only line of\nthe input contains an integer \n    n\n (\n    3\n    \u2264 n\n    \u2264 7.5\n    \u00b710^4\n) \u2014\nthe number of nodes in the tree. Interaction Start interaction by reading\n\n    n\n. To ask a query about the distance between two nodes \n    u, v\n (\n    1\n    \n    \u2264 u, v \n    \u2264 n\n), output \"? u v\". If you determine that the centroid of\nthe tree is \n    x\n, use \"! x\" to report. After printing a query, do not\nforget to output the end of a line and flush the output. Otherwise, you will\nget Idleness limit exceeded. To do this, use: fflush(stdout) or cout.flush()\nin C++; System.out.flush() in Java; flush(output) in Pascal; stdout.flush() in\nPython; see documentation for other languages. Hacks are disabled in this\nproblem. It's guaranteed that there are at most \n    500\n tests in this\nproblem. Example Input 5 2 1 2 3 1 1 1 Output ? 1 2 ? 1 3 ? 1 4 ? 1 5 ? 2 3 ?\n3 4 ? 4 5 ! 3 Note Here is an image of the tree from the sample.\n\n",
        "cf_contest_id": 1761,
        "cf_index": "G",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "interactive",
            "probabilities",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5\r\n1 3\r\n2 3\r\n3 4\r\n4 5\r\n",
                "3 48011\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n1 3\r\n2 1\r\n",
                "1 48007\r\n"
            ],
            [
                "20\r\n14 1\r\n6 1\r\n19 1\r\n2 14\r\n12 2\r\n9 19\r\n13 6\r\n10 13\r\n16 19\r\n8 2\r\n15 6\r\n4 9\r\n5 9\r\n18 5\r\n17 10\r\n7 12\r\n20 10\r\n3 6\r\n11 17\r\n",
                "1 48041\r\n"
            ]
        ]
    }
]