[
    {
        "name": "Round Table",
        "description": "There are \n    n\n people, numbered from \n    1\n to \n    n\n, sitting at a round\ntable. Person \n    i+1\n is sitting to the right of person \n    i\n (with person\n\n    1\n sitting to the right of person \n    n\n). You have come up with a\nbetter seating arrangement, which is given as a permutation \n    p_1, p_2,\n    \n    \u2026, p_n\n. More specifically, you want to change the seats of the people\nso that at the end person \n    p_i+1\n is sitting to the right of person\n\n    p_i\n (with person \n    p_1\n sitting to the right of person \n    p_n\n).\nNotice that for each seating arrangement there are \n    n\n permutations that\ndescribe it (which can be obtained by rotations). In order to achieve that,\nyou can swap two people sitting at adjacent places; but there is a catch: for\nall \n    1 \n    \u2264 x \n    \u2264 n-1\n you cannot swap person \n    x\n and person\n\n    x+1\n (notice that you can swap person \n    n\n and person \n    1\n). What\nis the minimum number of swaps necessary? It can be proven that any\narrangement can be achieved. Input Each test contains multiple test cases. The\nfirst line contains an integer \n    t\n (\n    1\n    \u2264 t\n    \u2264 10\n     000\n) \u2014 the\nnumber of test cases. The descriptions of the \n    t\n test cases follow. The\nfirst line of each test case contains a single integer \n    n\n (\n    3 \n    \u2264 n\n    \n    \u2264 200\n     000\n) \u2014 the number of people sitting at the table. The second\nline contains \n    n\n distinct integers \n    p_1, p_2, \n    \u2026, p_n\n (\n    1\n    \n    \u2264 p_i \n    \u2264 n\n, \n    p_i \n     p_j\n for \n    i \n     j\n) \u2014 the desired\nfinal order of the people around the table. The sum of the values of \n    n\n\nover all test cases does not exceed \n    200\n     000\n. Output For each test\ncase, print the minimum number of swaps necessary to achieve the desired\norder. Example Input 3 4 2 3 1 4 5 5 4 3 2 1 7 4 1 6 5 3 7 2 Output 1 10 22\nNote In the first test case, we can swap person \n    4\n and person \n    1\n\n(who are adjacent) in the initial configuration and get the order \n    [4, 2, 3,\n    1]\n which is equivalent to the desired one. Hence in this case a single swap\nis sufficient.\n\n",
        "cf_contest_id": 1662,
        "cf_index": "E",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n4\r\n2 3 1 4\r\n5\r\n5 4 3 2 1\r\n7\r\n4 1 6 5 3 7 2\r\n",
                "1\r\n10\r\n22\r\n"
            ]
        ],
        "private_cases": []
    }
]