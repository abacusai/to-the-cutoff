[
    {
        "name": "Elevator",
        "description": "A sky scraper with 1000 floors has been built in the city of N. It has modern\nsuperfast elevators to help to travel from one floor to another. Each elevator\nhas two doors, the front one and the back one. If one goes in through the\nfront door, he goes out through the back one and vice versa. The elevator has\ntwo rails numbered with numbers 1 and 2. Rail 1 is located to the left of the\nentrance to the front door (or correspondingly, to the right of the entrance\nto the back door). Rail 2 is located opposite it, to the right of the entrance\nto the front door and to the left of the entrance to the back door. We know\nthat each person in the city of N holds at a rail with the strongest hand. One\nday a VIP person visited the city and of course, he took a look at the\nskyscraper and took a ride in the elevator. We know the door through which he\nentered and the rail he was holding at. Now we need to determine as soon as\npossible whether he is left-handed or right-handed. Input The first line\nindicates the door through which the very important person entered the\nelevator. It contains \"front\" if the person enters the elevator through the\nfront door and \"back\" if he entered the elevator through the back door. The\nsecond line contains integer a (1 \u2264 a \u2264 2) which denotes the number of the\nrail at which the person was holding. Output Print character \"R\" if the VIP is\nright-handed or \"L\" if he is left-handed. Examples Input front 1 Output L\n\n",
        "cf_contest_id": 120,
        "cf_index": "A",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "front\r\n1\r\n",
                "L\r\n"
            ]
        ],
        "private_cases": [
            [
                "back\r\n1\r\n",
                "R\r\n"
            ],
            [
                "front\r\n2\r\n",
                "R\r\n"
            ],
            [
                "back\r\n2\r\n",
                "L\r\n"
            ]
        ]
    }
]