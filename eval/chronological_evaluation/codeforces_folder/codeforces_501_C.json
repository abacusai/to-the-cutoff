[
    {
        "name": "Misha and Forest",
        "description": "Let's define a forest as a non-directed acyclic graph (also without loops and\nparallel edges). One day Misha played with the forest consisting of n\nvertices. For each vertex v from 0 to n - 1 he wrote down two integers,\ndegreev and sv, were the first integer is the number of vertices adjacent to\nvertex v, and the second integer is the XOR sum of the numbers of vertices\nadjacent to v (if there were no adjacent vertices, he wrote down 0). Next day\nMisha couldn't remember what graph he initially had. Misha has values degreev\nand sv left, though. Help him find the number of edges and the edges of the\ninitial graph. It is guaranteed that there exists a forest that corresponds to\nthe numbers written by Misha. Input The first line contains integer n (1 \u2264 n \u2264\n2^16), the number of vertices in the graph. The i-th of the next lines\ncontains numbers degreei and si (0 \u2264 degreei \u2264 n - 1, 0 \u2264 si < 2^16),\nseparated by a space. Output In the first line print number m, the number of\nedges of the graph. Next print m lines, each containing two distinct numbers,\na and b (0 \u2264 a \u2264 n - 1, 0 \u2264 b \u2264 n - 1), corresponding to edge (a, b). Edges\ncan be printed in any order; vertices of the edge can also be printed in any\norder. Examples Input 3 2 3 1 0 1 0 Output 2 1 0 2 0 Input 2 1 1 1 0 Output 1\n0 1 Note The XOR sum of numbers is the result of bitwise adding numbers modulo\n2. This operation exists in many modern programming languages. For example, in\nlanguages C++, Java and Python it is represented as \"^\", and in Pascal \u2014 as\n\"xor\".\n\n",
        "cf_contest_id": 501,
        "cf_index": "C",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "sortings",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2 3\r\n1 0\r\n1 0\r\n",
                "2\r\n2 0\r\n0 1\r\n"
            ],
            [
                "2\r\n1 1\r\n1 0\r\n",
                "1\r\n1 0\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n3 13\r\n2 6\r\n1 5\r\n3 5\r\n1 3\r\n2 2\r\n2 6\r\n1 6\r\n1 3\r\n2 3\r\n",
                "9\r\n8 3\r\n7 6\r\n6 1\r\n1 0\r\n4 3\r\n3 9\r\n9 0\r\n0 5\r\n5 2\r\n"
            ],
            [
                "10\r\n1 2\r\n1 7\r\n1 0\r\n1 8\r\n0 0\r\n1 9\r\n0 0\r\n1 1\r\n1 3\r\n1 5\r\n",
                "4\r\n9 5\r\n8 3\r\n7 1\r\n2 0\r\n"
            ],
            [
                "5\r\n1 1\r\n2 2\r\n2 2\r\n2 6\r\n1 3\r\n",
                "4\r\n4 3\r\n3 2\r\n2 1\r\n1 0\r\n"
            ],
            [
                "10\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n",
                "0\r\n"
            ],
            [
                "11\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n1 8\r\n1 7\r\n0 0\r\n0 0\r\n",
                "1\r\n8 7\r\n"
            ],
            [
                "12\r\n0 0\r\n1 3\r\n0 0\r\n1 1\r\n0 0\r\n1 7\r\n0 0\r\n1 5\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n",
                "2\r\n7 5\r\n3 1\r\n"
            ],
            [
                "13\r\n2 7\r\n0 0\r\n0 0\r\n2 11\r\n2 7\r\n2 14\r\n2 3\r\n2 1\r\n1 11\r\n3 15\r\n1 6\r\n2 11\r\n1 9\r\n",
                "10\r\n12 9\r\n10 6\r\n6 9\r\n9 5\r\n5 7\r\n7 4\r\n4 0\r\n0 3\r\n3 11\r\n11 8\r\n"
            ],
            [
                "14\r\n1 10\r\n1 9\r\n3 4\r\n1 2\r\n0 0\r\n1 11\r\n1 12\r\n1 10\r\n1 10\r\n2 10\r\n3 15\r\n3 14\r\n2 4\r\n0 0\r\n",
                "10\r\n8 10\r\n7 10\r\n10 0\r\n6 12\r\n12 2\r\n5 11\r\n3 2\r\n2 11\r\n11 9\r\n9 1\r\n"
            ],
            [
                "15\r\n0 0\r\n1 6\r\n3 2\r\n1 13\r\n2 15\r\n2 5\r\n1 1\r\n2 1\r\n1 4\r\n1 2\r\n0 0\r\n1 14\r\n0 0\r\n1 3\r\n2 9\r\n",
                "9\r\n13 3\r\n11 14\r\n14 2\r\n9 2\r\n2 5\r\n5 7\r\n7 4\r\n4 8\r\n6 1\r\n"
            ],
            [
                "16\r\n1 10\r\n2 13\r\n1 13\r\n2 1\r\n1 3\r\n2 2\r\n1 14\r\n0 0\r\n1 1\r\n1 14\r\n1 0\r\n0 0\r\n0 0\r\n1 2\r\n2 15\r\n0 0\r\n",
                "8\r\n13 2\r\n10 0\r\n9 14\r\n14 6\r\n8 1\r\n1 5\r\n5 3\r\n3 4\r\n"
            ],
            [
                "17\r\n0 0\r\n2 6\r\n0 0\r\n2 11\r\n0 0\r\n1 13\r\n1 3\r\n1 10\r\n0 0\r\n1 1\r\n1 7\r\n0 0\r\n0 0\r\n3 9\r\n0 0\r\n2 12\r\n0 0\r\n",
                "7\r\n10 7\r\n9 1\r\n1 15\r\n15 13\r\n6 3\r\n3 13\r\n13 5\r\n"
            ],
            [
                "18\r\n0 0\r\n0 0\r\n2 19\r\n1 2\r\n2 29\r\n0 0\r\n1 7\r\n1 6\r\n1 12\r\n1 13\r\n0 0\r\n1 12\r\n4 23\r\n1 9\r\n0 0\r\n0 0\r\n2 14\r\n1 4\r\n",
                "9\r\n17 4\r\n4 12\r\n13 9\r\n11 12\r\n8 12\r\n12 16\r\n16 2\r\n2 3\r\n7 6\r\n"
            ],
            [
                "19\r\n1 13\r\n0 0\r\n1 9\r\n1 11\r\n1 11\r\n2 3\r\n2 30\r\n0 0\r\n1 5\r\n1 2\r\n0 0\r\n5 29\r\n1 6\r\n2 11\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n2 13\r\n",
                "10\r\n12 6\r\n6 18\r\n18 11\r\n9 2\r\n8 5\r\n5 11\r\n4 11\r\n3 11\r\n11 13\r\n13 0\r\n"
            ],
            [
                "20\r\n0 0\r\n2 15\r\n0 0\r\n2 7\r\n1 1\r\n0 0\r\n0 0\r\n0 0\r\n1 9\r\n2 11\r\n0 0\r\n1 1\r\n0 0\r\n0 0\r\n1 3\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n0 0\r\n",
                "5\r\n14 3\r\n3 9\r\n9 8\r\n11 1\r\n1 4\r\n"
            ],
            [
                "1\r\n0 0\r\n",
                "0\r\n"
            ]
        ]
    }
]