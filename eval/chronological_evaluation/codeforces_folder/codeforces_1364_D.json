[
    {
        "name": "Ehab's Last Corollary",
        "description": "Given a connected undirected graph with \n    n\n vertices and an integer\n\n    k\n, you have to either: either find an independent set that has exactly\n\n    \u2308\n    k/2\n    \u2309\n vertices. or find a simple cycle of length\nat most \n    k\n. An independent set is a set of vertices such that no two of\nthem are connected by an edge. A simple cycle is a cycle that doesn't contain\nany vertex twice. I have a proof that for any input you can always solve at\nleast one of these problems, but it's left as an exercise for the reader.\nInput The first line contains three integers \n    n\n, \n    m\n, and \n    k\n\n(\n    3 \n    \u2264 k \n    \u2264 n \n    \u2264 10^5\n, \n    n-1 \n    \u2264 m \n    \u2264 2 \n    \u00b7 10^5\n) \u2014\nthe number of vertices and edges in the graph, and the parameter \n    k\n from\nthe statement. Each of the next \n    m\n lines contains two integers \n    u\n\nand \n    v\n (\n    1 \n    \u2264 u,v \n    \u2264 n\n) that mean there's an edge between\nvertices \n    u\n and \n    v\n. It's guaranteed that the graph is connected and\ndoesn't contain any self-loops or multiple edges. Output If you choose to\nsolve the first problem, then on the first line print \n    1\n, followed by a\nline containing \n    \u2308\n    k/2\n    \u2309\n distinct integers not\nexceeding \n    n\n, the vertices in the desired independent set. If you,\nhowever, choose to solve the second problem, then on the first line print\n\n    2\n, followed by a line containing one integer, \n    c\n, representing the\nlength of the found cycle, followed by a line containing \n    c\n distinct\nintegers not exceeding \n    n\n, the vertices in the desired cycle, in the\norder they appear in the cycle. Examples Input 4 4 3 1 2 2 3 3 4 4 1 Output 1\n1 3 Input 4 5 3 1 2 2 3 3 4 4 1 2 4 Output 2 3 2 3 4 Input 4 6 3 1 2 2 3 3 4 4\n1 1 3 2 4 Output 2 3 1 2 3 Input 5 4 5 1 2 1 3 2 4 2 5 Output 1 1 4 5 Note In\nthe first sample: Notice that printing the independent set \n    2,4\n\nis also OK, but printing the cycle \n    1-2-3-4\n isn't, because its length\nmust be at most \n    3\n. In the second sample: Notice that printing the\nindependent set \n    1,3\n or printing the cycle \n    2-1-4\n is also\nOK. In the third sample: In the fourth sample:\n\n",
        "cf_contest_id": 1364,
        "cf_index": "D",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs",
            "greedy",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 4 3\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n",
                "1\r\n4 2 "
            ],
            [
                "4 5 3\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n2 4\r\n",
                "2\r\n3\r\n4 3 2 "
            ],
            [
                "4 6 3\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n1 3\r\n2 4\r\n",
                "2\r\n3\r\n4 3 2 "
            ],
            [
                "5 4 5\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n",
                "1\r\n4 5 3 "
            ]
        ],
        "private_cases": [
            [
                "3 3 3\r\n1 2\r\n2 3\r\n3 1\r\n",
                "2\r\n3\r\n3 2 1 "
            ],
            [
                "6 6 6\r\n4 2\r\n2 5\r\n5 3\r\n3 6\r\n6 1\r\n1 4\r\n",
                "2\r\n6\r\n4 2 5 3 6 1 "
            ],
            [
                "6 6 5\r\n3 6\r\n6 5\r\n5 4\r\n4 2\r\n2 1\r\n1 3\r\n",
                "1\r\n3 5 2 "
            ],
            [
                "6 15 3\r\n4 5\r\n4 6\r\n4 1\r\n4 3\r\n4 2\r\n5 6\r\n5 1\r\n5 3\r\n5 2\r\n6 1\r\n6 3\r\n6 2\r\n1 3\r\n1 2\r\n3 2\r\n",
                "2\r\n3\r\n6 5 4 "
            ],
            [
                "4 6 3\r\n1 3\r\n2 4\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n",
                "2\r\n3\r\n4 2 3 "
            ],
            [
                "5 6 4\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n3 1\r\n5 1\r\n",
                "2\r\n3\r\n3 2 1 "
            ],
            [
                "7 8 6\r\n6 7\r\n1 2\r\n1 3\r\n2 4\r\n3 5\r\n4 6\r\n5 7\r\n2 3\r\n",
                "2\r\n6\r\n3 5 7 6 4 2 "
            ],
            [
                "5 5 5\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 3\r\n",
                "2\r\n3\r\n5 4 3 "
            ],
            [
                "6 8 5\r\n1 6\r\n2 3\r\n2 4\r\n2 5\r\n3 4\r\n3 5\r\n4 5\r\n5 6\r\n",
                "2\r\n3\r\n4 3 2 "
            ],
            [
                "5 6 5\r\n1 2\r\n2 3\r\n3 1\r\n3 4\r\n4 5\r\n5 3\r\n",
                "2\r\n3\r\n3 2 1 "
            ],
            [
                "6 6 4\r\n1 2\r\n2 4\r\n4 5\r\n5 6\r\n6 3\r\n3 2\r\n",
                "1\r\n3 5 "
            ],
            [
                "5 7 5\r\n1 2\r\n2 3\r\n2 4\r\n2 5\r\n3 4\r\n3 5\r\n4 5\r\n",
                "2\r\n3\r\n4 3 2 "
            ],
            [
                "8 9 3\r\n8 1\r\n8 7\r\n8 6\r\n7 2\r\n2 4\r\n2 5\r\n4 5\r\n5 3\r\n4 3\r\n",
                "2\r\n3\r\n5 4 2 "
            ],
            [
                "6 8 3\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 2\r\n5 2\r\n5 1\r\n",
                "1\r\n6 4 "
            ],
            [
                "7 9 7\r\n1 2\r\n2 3\r\n2 4\r\n3 4\r\n3 5\r\n4 6\r\n5 6\r\n5 7\r\n6 7\r\n",
                "2\r\n3\r\n4 3 2 "
            ],
            [
                "5 6 5\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n4 5\r\n5 3\r\n",
                "2\r\n4\r\n4 3 2 1 "
            ],
            [
                "10 12 3\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n8 9\r\n9 10\r\n10 1\r\n4 8\r\n4 7\r\n",
                "1\r\n10 8 "
            ]
        ]
    }
]