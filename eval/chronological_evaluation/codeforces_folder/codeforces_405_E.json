[
    {
        "name": "Graph Cutting",
        "description": "Little Chris is participating in a graph cutting contest. He's a pro. The time\nhas come to test his skills to the fullest. Chris is given a simple undirected\nconnected graph with n vertices (numbered from 1 to n) and m edges. The\nproblem is to cut it into edge-distinct paths of length 2. Formally, Chris has\nto partition all edges of the graph into pairs in such a way that the edges in\na single pair are adjacent and each edge must be contained in exactly one\npair. For example, the figure shows a way Chris can cut a graph. The first\nsample test contains the description of this graph. You are given a chance to\ncompete with Chris. Find a way to cut the given graph or determine that it is\nimpossible! Input The first line of input contains two space-separated\nintegers n and m (1 \u2264 n, m \u2264 10^5), the number of vertices and the number of\nedges in the graph. The next m lines contain the description of the graph's\nedges. The i-th line contains two space-separated integers ai and bi (1 \u2264 ai,\nbi \u2264 n; ai \u2260 bi), the numbers of the vertices connected by the i-th edge. It\nis guaranteed that the given graph is simple (without self-loops and multi-\nedges) and connected. Note: since the size of the input and output could be\nvery large, don't use slow output techniques in your language. For example, do\nnot use input and output streams (cin, cout) in C++. Output If it is possible\nto cut the given graph into edge-distinct paths of length 2, output lines. In\nthe i-th line print three space-separated integers xi, yi and zi, the\ndescription of the i-th path. The graph should contain this path, i.e., the\ngraph should contain edges (xi, yi) and (yi, zi). Each edge should appear in\nexactly one path of length 2. If there are multiple solutions, output any of\nthem. If it is impossible to cut the given graph, print \"No solution\" (without\nquotes). Examples Input 8 12 1 2 2 3 3 4 4 1 1 3 2 4 3 5 3 6 5 6 6 7 6 8 7 8\nOutput 1 2 4 1 3 2 1 4 3 5 3 6 5 6 8 6 7 8 Input 3 3 1 2 2 3 3 1 Output No\nsolution Input 3 2 1 2 2 3 Output 1 2 3\n\n",
        "cf_contest_id": 405,
        "cf_index": "E",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graphs"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8 12\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n1 3\r\n2 4\r\n3 5\r\n3 6\r\n5 6\r\n6 7\r\n6 8\r\n7 8\r\n",
                "1 4 2\r\n4 3 1\r\n6 8 7\r\n3 6 7\r\n6 5 3\r\n3 2 1\r\n"
            ],
            [
                "3 3\r\n1 2\r\n2 3\r\n3 1\r\n",
                "No solution\r\n"
            ],
            [
                "3 2\r\n1 2\r\n2 3\r\n",
                "3 2 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1\r\n1 2\r\n",
                "No solution\r\n"
            ],
            [
                "4 6\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n1 3\r\n2 4\r\n",
                "1 4 2\r\n4 3 1\r\n3 2 1\r\n"
            ],
            [
                "4 3\r\n3 2\r\n2 1\r\n1 4\r\n",
                "No solution\r\n"
            ],
            [
                "9 12\r\n1 2\r\n2 3\r\n4 5\r\n5 6\r\n6 7\r\n7 8\r\n1 4\r\n4 7\r\n2 5\r\n5 8\r\n3 6\r\n6 9\r\n",
                "5 8 7\r\n6 7 4\r\n1 4 5\r\n2 5 6\r\n9 6 3\r\n3 2 1\r\n"
            ],
            [
                "4 4\r\n1 2\r\n2 3\r\n3 1\r\n1 4\r\n",
                "1 3 2\r\n2 1 4\r\n"
            ],
            [
                "4 5\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n1 3\r\n",
                "No solution\r\n"
            ],
            [
                "5 4\r\n2 1\r\n3 2\r\n4 3\r\n5 4\r\n",
                "5 4 3\r\n3 2 1\r\n"
            ],
            [
                "7 6\r\n2 1\r\n3 2\r\n4 3\r\n5 4\r\n6 5\r\n7 6\r\n",
                "7 6 5\r\n5 4 3\r\n3 2 1\r\n"
            ],
            [
                "9 8\r\n2 1\r\n3 2\r\n4 3\r\n5 4\r\n6 5\r\n7 6\r\n8 7\r\n9 8\r\n",
                "9 8 7\r\n7 6 5\r\n5 4 3\r\n3 2 1\r\n"
            ],
            [
                "10 9\r\n2 1\r\n3 1\r\n4 2\r\n5 4\r\n6 2\r\n7 4\r\n8 1\r\n9 8\r\n10 8\r\n",
                "No solution\r\n"
            ],
            [
                "9 8\r\n1 9\r\n2 9\r\n3 9\r\n4 9\r\n5 9\r\n6 9\r\n7 9\r\n8 9\r\n",
                "2 9 3\r\n4 9 5\r\n6 9 7\r\n8 9 1\r\n"
            ],
            [
                "10 30\r\n10 4\r\n3 8\r\n3 2\r\n10 1\r\n3 5\r\n3 4\r\n5 1\r\n8 2\r\n8 4\r\n3 10\r\n7 9\r\n3 6\r\n9 5\r\n5 10\r\n7 6\r\n7 5\r\n9 1\r\n2 7\r\n9 10\r\n1 4\r\n9 8\r\n6 2\r\n2 1\r\n7 1\r\n6 4\r\n4 5\r\n2 9\r\n10 8\r\n7 8\r\n5 2\r\n",
                "3 5 1\r\n10 5 7\r\n4 5 2\r\n5 9 1\r\n10 9 8\r\n2 9 7\r\n3 6 2\r\n4 6 7\r\n1 7 8\r\n3 2 7\r\n1 2 8\r\n4 8 10\r\n8 3 10\r\n3 4 1\r\n4 10 1\r\n"
            ],
            [
                "7 10\r\n1 3\r\n2 3\r\n1 2\r\n3 4\r\n4 5\r\n4 6\r\n4 7\r\n5 6\r\n5 7\r\n6 7\r\n",
                "1 2 3\r\n4 7 5\r\n4 6 7\r\n6 5 4\r\n4 3 1\r\n"
            ]
        ]
    }
]