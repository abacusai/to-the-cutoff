[
    {
        "name": "Two Brackets",
        "description": "You are given a string \n    s\n, consisting of brackets of two types: '(', ')',\n'[' and ']'. A string is called a regular bracket sequence (RBS) if it's of\none of the following types: empty string; '(' + RBS + ')'; '[' + RBS + ']';\nRBS + RBS. where plus is a concatenation of two strings. In one move you can\nchoose a non-empty subsequence of the string \n    s\n (not necessarily\nconsecutive) that is an RBS, remove it from the string and concatenate the\nremaining parts without changing the order. What is the maximum number of\nmoves you can perform? Input The first line contains a single integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of testcases. Each of the next\n\n    t\n lines contains a non-empty string, consisting only of characters '(',\n')', '[' and ']'. The total length of the strings over all testcases doesn't\nexceed \n    2 \n    \u00b7 10^5\n. Output For each testcase print a single integer \u2014\nthe maximum number of moves you can perform on a given string \n    s\n. Example\nInput 5 () []() ([)] )]([ )[(] Output 1 2 2 0 1 Note In the first example you\ncan just erase the whole string. In the second example you can first erase the\nbrackets on positions \n    1\n and \n    2\n: \"[]()\", then \"()\" is left. After\nthat you can erase it whole. You could erase the whole string from the\nbeginning but you would get one move instead of two. In the third example you\ncan first erase the brackets on positions \n    1\n and \n    3\n: \"([)]\". They\nform an RBS \"()\". Then \"[]\" is left, so you can erase it whole. In the fourth\nexample there is no subsequence that is an RBS, so you can't perform a move at\nall. In the fifth example you can erase the brackets on positions \n    2\n and\n\n    4\n: \")[(]\" and get \")(\" as a result. You can erase nothing from it.\n\n",
        "cf_contest_id": 1452,
        "cf_index": "C",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n()\r\n[]()\r\n([)]\r\n)]([\r\n)[(]\r\n",
                "1\r\n2\r\n2\r\n0\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n[()]\r\n[]\r\n[]\r\n()\r\n",
                "2\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "4\r\n()\r\n()\r\n()\r\n()\r\n",
                "1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "7\r\n()\r\n()\r\n()\r\n()\r\n()\r\n()\r\n()\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n"
            ]
        ]
    }
]