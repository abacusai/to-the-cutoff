[
    {
        "name": "ELCA",
        "description": "You have a root tree containing n vertexes. Let's number the tree vertexes\nwith integers from 1 to n. The tree root is in the vertex 1. Each vertex\n(except fot the tree root) v has a direct ancestor pv. Also each vertex v has\nits integer value sv. Your task is to perform following queries: P v u (u \u2260\nv). If u isn't in subtree of v, you must perform the assignment pv = u.\nOtherwise you must perform assignment pu = v. Note that after this query the\ngraph continues to be a tree consisting of n vertexes. V v t. Perform\nassignment sv = t. Your task is following. Before starting performing queries\nand after each query you have to calculate expected value written on the\nlowest common ancestor of two equiprobably selected vertices i and j. Here\nlowest common ancestor of i and j is the deepest vertex that lies on the both\nof the path from the root to vertex i and the path from the root to vertex j.\nPlease note that the vertices i and j can be the same (in this case their\nlowest common ancestor coincides with them). Input The first line of the input\ncontains integer n (2 \u2264 n \u2264 5\u00b710^4) \u2014 the number of the tree vertexes. The\nsecond line contains n - 1 integer p2, p3, ..., pn (1 \u2264 pi \u2264 n) \u2014 the\ndescription of the tree edges. It is guaranteed that those numbers form a\ntree. The third line contains n integers \u2014 s1, s2, ... sn (0 \u2264 si \u2264 10^6) \u2014\nthe values written on each vertex of the tree. The next line contains integer\nq (1 \u2264 q \u2264 5\u00b710^4) \u2014 the number of queries. Each of the following q lines\ncontains the description of the query in the format described in the\nstatement. It is guaranteed that query arguments u and v lie between 1 and n.\nIt is guaranteed that argument t in the queries of type V meets limits 0 \u2264 t \u2264\n10^6. Output Print q + 1 number \u2014 the corresponding expected values. Your\nanswer will be considered correct if its absolute or relative error doesn't\nexceed 10^-9. Examples Input 5 1 2 2 1 1 2 3 4 5 5 P 3 4 P 4 5 V 2 3 P 5 2 P 1\n4 Output 1.640000000 1.800000000 2.280000000 2.320000000 2.800000000\n1.840000000 Note Note that in the query P v u if u lies in subtree of v you\nmust perform assignment pu = v. An example of such case is the last query in\nthe sample.\n\n",
        "cf_contest_id": 482,
        "cf_index": "E",
        "cf_rating": 3200,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "trees"
        ],
        "time_limit_seconds": 8.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 2 2 1\r\n1 2 3 4 5\r\n5\r\nP 3 4\r\nP 4 5\r\nV 2 3\r\nP 5 2\r\nP 1 4\r\n",
                "1.640000000\r\n1.800000000\r\n2.280000000\r\n2.320000000\r\n2.800000000\r\n1.840000000\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1\r\n10 100\r\n5\r\nP 1 2\r\nP 2 1\r\nV 1 1000\r\nP 1 2\r\nV 2 10\r\n",
                "32.500000000\r\n32.500000000\r\n32.500000000\r\n775.000000000\r\n775.000000000\r\n752.500000000\r\n"
            ],
            [
                "25\r\n1 2 3 4 1 2 4 1 6 1 8 3 4 1 15 13 1 10 3 16 8 15 20 10\r\n260522 914575 436426 979445 648772 690081 933447 190629 703497 47202 407775 894325 963982 804784 968417 302156 631932 735902 895728 78537 723857 330739 286918 329211 539679\r\n25\r\nP 3 11\r\nP 3 24\r\nP 11 10\r\nP 22 5\r\nP 25 1\r\nV 2 147731\r\nP 23 21\r\nP 7 24\r\nV 2 374432\r\nP 3 8\r\nV 10 900084\r\nV 4 27328\r\nP 25 9\r\nP 24 21\r\nV 22 804420\r\nP 7 25\r\nV 25 363438\r\nP 3 4\r\nV 6 509806\r\nP 10 9\r\nV 12 723554\r\nV 4 697435\r\nV 24 627327\r\nP 25 20\r\nV 14 787658\r\n",
                "385286.841600000\r\n344424.816000000\r\n345570.060800000\r\n337490.662400000\r\n341480.931200000\r\n349663.078400000\r\n345982.227200000\r\n343067.600000000\r\n349757.814400000\r\n350120.536000000\r\n336219.249600000\r\n411272.865600000\r\n394515.606400000\r\n395933.126400000\r\n383524.953600000\r\n384282.843200000\r\n381010.024000000\r\n380164.067200000\r\n380164.067200000\r\n372376.187200000\r\n417289.252800000\r\n417016.019200000\r\n428809.902400000\r\n429286.888000000\r\n410527.547200000\r\n410500.145600000\r\n"
            ]
        ]
    }
]