[
    {
        "name": "Running in Pairs",
        "description": "Demonstrative competitions will be held in the run-up to the \n    20NN\n\nBerlatov Olympic Games. Today is the day for the running competition! Berlatov\nteam consists of \n    2n\n runners which are placed on two running tracks;\n\n    n\n runners are placed on each track. The runners are numbered from\n\n    1\n to \n    n\n on each track. The runner with number \n    i\n runs through\nthe entire track in \n    i\n seconds. The competition is held as follows: first\nrunners on both tracks start running at the same time; when the slower of them\narrives at the end of the track, second runners on both tracks start running,\nand everyone waits until the slower of them finishes running, and so on, until\nall \n    n\n pairs run through the track. The organizers want the run to be as\nlong as possible, but if it lasts for more than \n    k\n seconds, the crowd\nwill get bored. As the coach of the team, you may choose any order in which\nthe runners are arranged on each track (but you can't change the number of\nrunners on each track or swap runners between different tracks). You have to\nchoose the order of runners on each track so that the duration of the\ncompetition is as long as possible, but does not exceed \n    k\n seconds.\nFormally, you want to find two permutations \n    p\n and \n    q\n (both\nconsisting of \n    n\n elements) such that \n    sum = \n    \u2211\n    _i=1^n\n    max(p_i, q_i)\n is maximum possible, but does not exceed \n    k\n. If there is\nno such pair, report about it. Input The first line contains two integers\n\n    n\n and \n    k\n (\n    1 \n    \u2264 n \n    \u2264 10^6, 1 \n    \u2264 k \n    \u2264 n^2\n) \u2014 the\nnumber of runners on each track and the maximum possible duration of the\ncompetition, respectively. Output If it is impossible to reorder the runners\nso that the duration of the competition does not exceed \n    k\n seconds, print\n\n    -1\n. Otherwise, print three lines. The first line should contain one\ninteger \n    sum\n \u2014 the maximum possible duration of the competition not\nexceeding \n    k\n. The second line should contain a permutation of \n    n\n\nintegers \n    p_1, p_2, \n    \u2026, p_n\n (\n    1 \n    \u2264 p_i \n    \u2264 n\n, all\n\n    p_i\n should be pairwise distinct) \u2014 the numbers of runners on the first\ntrack in the order they participate in the competition. The third line should\ncontain a permutation of \n    n\n integers \n    q_1, q_2, \n    \u2026, q_n\n (\n    1\n    \n    \u2264 q_i \n    \u2264 n\n, all \n    q_i\n should be pairwise distinct) \u2014 the numbers\nof runners on the second track in the order they participate in the\ncompetition. The value of \n    sum = \n    \u2211\n    _i=1^n max(p_i, q_i)\n\nshould be maximum possible, but should not exceed \n    k\n. If there are\nmultiple answers, print any of them. Examples Input 5 20 Output 20 1 2 3 4 5 5\n2 4 3 1 Input 3 9 Output 8 1 2 3 3 2 1 Input 10 54 Output -1 Note In the first\nexample the order of runners on the first track should be \n    [5, 3, 2, 1,\n    4]\n, and the order of runners on the second track should be \n    [1, 4, 2, 5,\n    3]\n. Then the duration of the competition is \n    max(5, 1) + max(3, 4) +\n    max(2, 2) + max(1, 5) + max(4, 3) = 5 + 4 + 2 + 5 + 4 = 20\n, so it is equal\nto the maximum allowed duration. In the first example the order of runners on\nthe first track should be \n    [2, 3, 1]\n, and the order of runners on the\nsecond track should be \n    [2, 1, 3]\n. Then the duration of the competition\nis \n    8\n, and it is the maximum possible duration for \n    n = 3\n.\n\n",
        "cf_contest_id": 1244,
        "cf_index": "G",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 20\r\n",
                "20\r\n5 2 4 3 1 \r\n1 2 3 4 5 "
            ],
            [
                "3 9\r\n",
                "8\r\n3 2 1 \r\n1 2 3 "
            ],
            [
                "10 54\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 55\r\n",
                "55\r\n1 2 3 4 5 6 7 8 9 10 \r\n1 2 3 4 5 6 7 8 9 10 "
            ],
            [
                "10 80\r\n",
                "80\r\n10 9 8 7 6 5 4 3 2 1 \r\n1 2 3 4 5 6 7 8 9 10 "
            ],
            [
                "10 81\r\n",
                "80\r\n10 9 8 7 6 5 4 3 2 1 \r\n1 2 3 4 5 6 7 8 9 10 "
            ],
            [
                "1 1\r\n",
                "1\r\n1 \r\n1 "
            ],
            [
                "1000000 500000499999\r\n",
                "-1\r\n"
            ],
            [
                "1000000 1\r\n",
                "-1\r\n"
            ],
            [
                "2 1\r\n",
                "-1\r\n"
            ],
            [
                "2 2\r\n",
                "-1\r\n"
            ],
            [
                "2 3\r\n",
                "3\r\n1 2 \r\n1 2 "
            ],
            [
                "2 4\r\n",
                "4\r\n2 1 \r\n1 2 "
            ],
            [
                "3 1\r\n",
                "-1\r\n"
            ],
            [
                "3 2\r\n",
                "-1\r\n"
            ],
            [
                "3 3\r\n",
                "-1\r\n"
            ],
            [
                "3 4\r\n",
                "-1\r\n"
            ],
            [
                "3 5\r\n",
                "-1\r\n"
            ],
            [
                "3 6\r\n",
                "6\r\n1 2 3 \r\n1 2 3 "
            ],
            [
                "3 7\r\n",
                "7\r\n1 3 2 \r\n1 2 3 "
            ],
            [
                "3 8\r\n",
                "8\r\n3 2 1 \r\n1 2 3 "
            ],
            [
                "50 1274\r\n",
                "-1\r\n"
            ],
            [
                "50 1275\r\n",
                "1275\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 \r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 "
            ],
            [
                "50 1276\r\n",
                "1276\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 50 49 \r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 "
            ],
            [
                "50 1345\r\n",
                "1345\r\n50 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 49 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 28 1 \r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 "
            ],
            [
                "50 1678\r\n",
                "1678\r\n50 49 48 47 46 45 44 43 42 41 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 40 38 39 37 10 9 8 7 6 5 4 3 2 1 \r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 "
            ],
            [
                "50 1870\r\n",
                "1870\r\n50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 20 21 22 23 24 31 26 27 28 29 30 25 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 \r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 "
            ],
            [
                "50 1899\r\n",
                "1899\r\n50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 25 26 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 \r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 "
            ],
            [
                "50 1900\r\n",
                "1900\r\n50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 \r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 "
            ],
            [
                "50 1901\r\n",
                "1900\r\n50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 \r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 "
            ],
            [
                "500 125249\r\n",
                "-1\r\n"
            ],
            [
                "10000 50004999\r\n",
                "-1\r\n"
            ],
            [
                "100000 5000049999\r\n",
                "-1\r\n"
            ],
            [
                "500000 125000249999\r\n",
                "-1\r\n"
            ]
        ]
    }
]