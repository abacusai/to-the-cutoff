[
    {
        "name": "Epic Game",
        "description": "Simon and Antisimon play a game. Initially each player receives one fixed\npositive integer that doesn't change throughout the game. Simon receives\nnumber a and Antisimon receives number b. They also have a heap of n stones.\nThe players take turns to make a move and Simon starts. During a move a player\nshould take from the heap the number of stones equal to the greatest common\ndivisor of the fixed number he has received and the number of stones left in\nthe heap. A player loses when he cannot take the required number of stones (i.\ne. the heap has strictly less stones left than one needs to take). Your task\nis to determine by the given a, b and n who wins the game. Input The only\nstring contains space-separated integers a, b and n (1 \u2264 a, b, n \u2264 100) \u2014 the\nfixed numbers Simon and Antisimon have received correspondingly and the\ninitial number of stones in the pile. Output If Simon wins, print \"0\" (without\nthe quotes), otherwise print \"1\" (without the quotes). Examples Input 3 5 9\nOutput 0 Input 1 1 100 Output 1 Note The greatest common divisor of two non-\nnegative integers a and b is such maximum positive integer k, that a is\ndivisible by k without remainder and similarly, b is divisible by k without\nremainder. Let gcd(a, b) represent the operation of calculating the greatest\ncommon divisor of numbers a and b. Specifically, gcd(x, 0) = gcd(0, x) = x. In\nthe first sample the game will go like that: Simon should take gcd(3, 9) = 3\nstones from the heap. After his move the heap has 6 stones left. Antisimon\nshould take gcd(5, 6) = 1 stone from the heap. After his move the heap has 5\nstones left. Simon should take gcd(3, 5) = 1 stone from the heap. After his\nmove the heap has 4 stones left. Antisimon should take gcd(5, 4) = 1 stone\nfrom the heap. After his move the heap has 3 stones left. Simon should take\ngcd(3, 3) = 3 stones from the heap. After his move the heap has 0 stones left.\nAntisimon should take gcd(5, 0) = 5 stones from the heap. As 0 < 5, it is\nimpossible and Antisimon loses.In the second sample each player during each\nmove takes one stone from the heap. As n is even, Antisimon takes the last\nstone and Simon can't make a move after that.\n\n",
        "cf_contest_id": 119,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 5 9\r\n",
                "0\n"
            ],
            [
                "1 1 100\r\n",
                "1\n"
            ]
        ],
        "private_cases": [
            [
                "23 12 16\r\n",
                "1\n"
            ],
            [
                "95 26 29\r\n",
                "1\n"
            ],
            [
                "73 32 99\r\n",
                "1\n"
            ],
            [
                "1 1 1\r\n",
                "0\n"
            ],
            [
                "41 12 65\r\n",
                "1\n"
            ],
            [
                "13 61 100\r\n",
                "1\n"
            ],
            [
                "100 100 10\r\n",
                "0\n"
            ],
            [
                "12 24 26\r\n",
                "1\n"
            ],
            [
                "73 21 96\r\n",
                "1\n"
            ],
            [
                "17 22 81\r\n",
                "1\n"
            ],
            [
                "14 88 97\r\n",
                "1\n"
            ],
            [
                "42 81 17\r\n",
                "0\n"
            ],
            [
                "34 36 19\r\n",
                "1\n"
            ],
            [
                "21 87 12\r\n",
                "1\n"
            ],
            [
                "97 92 98\r\n",
                "1\n"
            ],
            [
                "49 25 62\r\n",
                "1\n"
            ],
            [
                "29 17 44\r\n",
                "1\n"
            ],
            [
                "10 1 10\r\n",
                "0\n"
            ],
            [
                "99 98 100\r\n",
                "1\n"
            ],
            [
                "100 100 1\r\n",
                "0\n"
            ],
            [
                "11 99 55\r\n",
                "0\n"
            ],
            [
                "8 13 21\r\n",
                "0\n"
            ],
            [
                "34 55 89\r\n",
                "0\n"
            ],
            [
                "21 34 55\r\n",
                "1\n"
            ],
            [
                "13 21 34\r\n",
                "1\n"
            ],
            [
                "34 21 55\r\n",
                "0\n"
            ],
            [
                "10 20 84\r\n",
                "1\n"
            ],
            [
                "4 2 5\r\n",
                "0\n"
            ],
            [
                "3 2 3\r\n",
                "0\n"
            ],
            [
                "31 23 1\r\n",
                "0\n"
            ],
            [
                "100 100 100\r\n",
                "0\n"
            ],
            [
                "100 1 100\r\n",
                "0\n"
            ],
            [
                "1 100 100\r\n",
                "1\n"
            ],
            [
                "1 1 100\r\n",
                "1\n"
            ],
            [
                "17 23 100\r\n",
                "1\n"
            ],
            [
                "99 98 100\r\n",
                "1\n"
            ],
            [
                "1 1 2\r\n",
                "1\n"
            ],
            [
                "2 1 1\r\n",
                "0\n"
            ],
            [
                "1 2 1\r\n",
                "0\n"
            ],
            [
                "2 1 2\r\n",
                "0\n"
            ],
            [
                "10 10 3\r\n",
                "1\n"
            ],
            [
                "2 2 1\r\n",
                "0\n"
            ],
            [
                "9 5 1\r\n",
                "0\n"
            ]
        ]
    }
]