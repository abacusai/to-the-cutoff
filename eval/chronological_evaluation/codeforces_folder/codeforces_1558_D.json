[
    {
        "name": "Top-Notch Insertions",
        "description": "Consider the insertion sort algorithm used to sort an integer sequence\n\n    [a_1, a_2, \n    \u2026, a_n]\n of length \n    n\n in non-decreasing order. For\neach \n    i\n in order from \n    2\n to \n    n\n, do the following. If \n    a_i\n    \n    \u2265 a_i-1\n, do nothing and move on to the next value of \n    i\n.\nOtherwise, find the smallest \n    j\n such that \n    a_i < a_j\n, shift the\nelements on positions from \n    j\n to \n    i-1\n by one position to the right,\nand write down the initial value of \n    a_i\n to position \n    j\n. In this\ncase we'll say that we performed an insertion of an element from position\n\n    i\n to position \n    j\n. It can be noticed that after processing any\n\n    i\n, the prefix of the sequence \n    [a_1, a_2, \n    \u2026, a_i]\n is sorted\nin non-decreasing order, therefore, the algorithm indeed sorts any sequence.\nFor example, sorting \n    [4, 5, 3, 1, 3]\n proceeds as follows: \n    i = 2\n:\n\n    a_2 \n    \u2265 a_1\n, do nothing; \n    i = 3\n: \n    j = 1\n, insert from\nposition \n    3\n to position \n    1\n: \n    [3, 4, 5, 1, 3]\n; \n    i = 4\n: \n    j\n    = 1\n, insert from position \n    4\n to position \n    1\n: \n    [1, 3, 4, 5,\n    3]\n; \n    i = 5\n: \n    j = 3\n, insert from position \n    5\n to position\n\n    3\n: \n    [1, 3, 3, 4, 5]\n. You are given an integer \n    n\n and a list of\n\n    m\n integer pairs \n    (x_i, y_i)\n. We are interested in sequences such\nthat if you sort them using the above algorithm, exactly \n    m\n insertions\nwill be performed: first from position \n    x_1\n to position \n    y_1\n, then\nfrom position \n    x_2\n to position \n    y_2\n, ..., finally, from position\n\n    x_m\n to position \n    y_m\n. How many sequences of length \n    n\n\nconsisting of (not necessarily distinct) integers between \n    1\n and \n    n\n,\ninclusive, satisfy the above condition? Print this number modulo\n\n    998\n     244\n     353\n. Input Each test contains multiple test cases. The\nfirst line contains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    10^5\n). Description of the test cases follows. The first line of each test\ncase contains two integers \n    n\n and \n    m\n (\n    2 \n    \u2264 n \n    \u2264 2 \n    \u00b7\n    10^5\n; \n    0 \n    \u2264 m < n\n) \u2014 the length of the sequence and the number of\ninsertions. The \n    i\n-th of the following \n    m\n lines contains two\nintegers \n    x_i\n and \n    y_i\n (\n    2 \n    \u2264 x_1 < x_2 < \n    \u2026 < x_m \n    \u2264\n    n\n; \n    1 \n    \u2264 y_i < x_i\n). These lines describe the sequence of\ninsertions in chronological order. It is guaranteed that the sum of \n    m\n\nover all test cases does not exceed \n    2 \n    \u00b7 10^5\n. Note that there is\nno constraint on the sum of \n    n\n of the same kind. Output For each test\ncase, print the number of sequences of length \n    n\n consisting of integers\nfrom \n    1\n to \n    n\n such that sorting them with the described algorithm\nproduces the given sequence of insertions, modulo \n    998\n     244\n     353\n.\nExample Input 3 3 0 3 2 2 1 3 1 5 3 3 1 4 1 5 3 Output 10 1 21 Note In the\nfirst test case, the algorithm performs no insertions \u2014 therefore, the initial\nsequence is already sorted in non-decreasing order. There are \n    10\n such\nsequences: \n    [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 2, 2], [1, 2, 3], [1, 3,\n    3], [2, 2, 2], [2, 2, 3], [2, 3, 3], [3, 3, 3]\n. In the second test case,\nthe only sequence satisfying the conditions is \n    [3, 2, 1]\n. In the third\ntest case, \n    [4, 5, 3, 1, 3]\n is one of the sought sequences.\n\n",
        "cf_contest_id": 1558,
        "cf_index": "D",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "data structures"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n3 0\r\n3 2\r\n2 1\r\n3 1\r\n5 3\r\n3 1\r\n4 1\r\n5 3\r\n",
                "10\r\n1\r\n21\r\n"
            ]
        ],
        "private_cases": []
    }
]