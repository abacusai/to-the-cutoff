[
    {
        "name": "Train Splitting",
        "description": "There are \n    n\n big cities in Italy, and there are \n    m\n train routes\nbetween pairs of cities. Each route connects two different cities\nbidirectionally. Moreover, using the trains one can reach every city starting\nfrom any other city. Right now, all the routes are operated by the government-\nowned Italian Carriage Passenger Company, but the government wants to\nprivatize the routes. The government does not want to give too much power to a\nsingle company, but it also does not want to make people buy a lot of\ndifferent subscriptions. Also, it would like to give a fair chance to all\ncompanies. In order to formalize all these wishes, the following model was\nproposed. There will be \n    k \n    \u2265 2\n private companies indexed by \n    1,\n    \n      2, \n     \n    \u2026, \n      k\n. Each train route will be operated by exactly\none of the \n    k\n companies. Then: For any company, there should exist two\ncities such that it is impossible to reach one from the other using only\nroutes operated by that company. On the other hand, for any two companies, it\nshould be possible to reach every city from any other city using only routes\noperated by these two companies. Find a plan satisfying all these criteria. It\ncan be shown that a viable plan always exists. Please note that you can choose\nthe number \n    k\n and you do not have to minimize or maximize it. Input Each\ntest contains multiple test cases. The first line contains an integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of test cases. The descriptions of\nthe \n    t\n test cases follow. The first line of each test case contains two\nintegers \n    n\n and \n    m\n (\n    3 \n    \u2264 n \n    \u2264 50\n, \n    n-1 \n    \u2264 m \n    \u2264\n    n(n-1)/2\n) \u2014 the number of cities and the number of train routes. The next\n\n    m\n lines contain two integers \n    u_i\n and \n    v_i\n each (\n    1 \n    \u2264\n    u_i, v_i \n    \u2264 n\n, \n    u_i \n     v_i\n) \u2014 the \n    i\n-th train route\nconnects cities \n    u_i\n and \n    v_i\n. It is guaranteed that the routes\nconnect \n    m\n distinct pairs of cities. It is guaranteed that using the\ntrains one can reach every city starting from any other city. The sum of the\nvalues of \n    n\n over all test cases does not exceed \n    5000\n. Output For\neach test case, on the first line print an integer \n    k\n (\n    2 \n    \u2264 k \n    \u2264\n    m\n) \u2014 the number of companies in your plan; on the second line print \n    m\n\nintegers \n    c_1, \n      c_2, \n     \n    \u2026, \n      c_m\n (\n    1 \n    \u2264 c_i \n    \u2264\n    k\n) \u2014 in your plan company \n    c_i\n operates the \n    i\n-th route. If there\nare multiple valid plans, you may print any of them. Example Input 2 5 9 1 2 1\n3 1 4 1 5 2 3 2 4 2 5 3 4 3 5 3 3 1 2 3 1 2 3 Output 4 1 2 3 1 4 2 2 4 3 3 2 3\n1 Note In the first test case, the output is illustrated in the following\npicture, where different colors correspond to different companies (blue for\n\n    1\n, red for \n    2\n, green for \n    3\n, and yellow for \n    4\n): If we\nconsider, for example, only companies \n    2\n and \n    3\n, we can see that\nfrom any city it is possible to reach every other city (picture on the left\nbelow). However, if we restrict to company \n    2\n alone, it becomes\nimpossible to reach city \n    5\n from city \n    1\n (picture on the right). In\nthe second test case, the output is illustrated in the following picture:\n\n",
        "cf_contest_id": 1776,
        "cf_index": "F",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graphs",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n5 9\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n2 3\r\n2 4\r\n2 5\r\n3 4\r\n3 5\r\n3 3\r\n1 2\r\n3 1\r\n2 3\r\n",
                "2\r\n2 2 1 2 2 1 2 1 2\r\n3\r\n3 1 2\r\n"
            ]
        ],
        "private_cases": []
    }
]