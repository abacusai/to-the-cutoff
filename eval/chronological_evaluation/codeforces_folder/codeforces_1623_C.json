[
    {
        "name": "Balanced Stone Heaps",
        "description": "There are \n    n\n heaps of stone. The \n    i\n-th heap has \n    h_i\n stones.\nYou want to change the number of stones in the heap by performing the\nfollowing process once: You go through the heaps from the \n    3\n-rd heap to\nthe \n    n\n-th heap, in this order. Let \n    i\n be the number of the current\nheap. You can choose a number \n    d\n (\n    0 \n    \u2264 3 \n    \u00b7 d \n    \u2264 h_i\n),\nmove \n    d\n stones from the \n    i\n-th heap to the \n    (i - 1)\n-th heap, and\n\n    2 \n    \u00b7 d\n stones from the \n    i\n-th heap to the \n    (i - 2)\n-th\nheap. So after that \n    h_i\n is decreased by \n    3 \n    \u00b7 d\n, \n    h_i -\n    1\n is increased by \n    d\n, and \n    h_i - 2\n is increased by \n    2\n    \n    \u00b7 d\n. You can choose different or same \n    d\n for different\noperations. Some heaps may become empty, but they still count as heaps. What\nis the maximum number of stones in the smallest heap after the process? Input\nEach test contains multiple test cases. The first line contains the number of\ntest cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 2\n    \u00b7 10^5\n). Description of the\ntest cases follows. The first line of each test case contains a single integer\n\n    n\n (\n    3 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n). The second lines of each test\ncase contains \n    n\n integers \n    h_1, h_2, h_3, \n    \u2026, h_n\n (\n    1 \n    \u2264\n    h_i \n    \u2264 10^9\n). It is guaranteed that the sum of \n    n\n over all test\ncases does not exceed \n    2 \n    \u00b7 10^5\n. Output For each test case, print\nthe maximum number of stones that the smallest heap can contain. Example Input\n4 4 1 2 10 100 4 100 100 100 1 5 5 1 1 1 8 6 1 2 3 4 5 6 Output 7 1 1 3 Note\nIn the first test case, the initial heap sizes are \n    [1, 2, 10, 100]\n. We\ncan move the stones as follows. move \n    3\n stones and \n    6\n from the\n\n    3\n-rd heap to the \n    2\n-nd and \n    1\n heap respectively. The heap\nsizes will be \n    [7, 5, 1, 100]\n; move \n    6\n stones and \n    12\n stones\nfrom the last heap to the \n    3\n-rd and \n    2\n-nd heap respectively. The\nheap sizes will be \n    [7, 17, 7, 82]\n. In the second test case, the last\nheap is \n    1\n, and we can not increase its size. In the third test case, it\nis better not to move any stones. In the last test case, the final achievable\nconfiguration of the heaps can be \n    [3, 5, 3, 4, 3, 3]\n.\n\n",
        "cf_contest_id": 1623,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4\r\n1 2 10 100\r\n4\r\n100 100 100 1\r\n5\r\n5 1 1 1 8\r\n6\r\n1 2 3 4 5 6\r\n",
                "7\r\n1\r\n1\r\n3\r\n"
            ]
        ],
        "private_cases": []
    }
]