[
    {
        "name": "Looksery Party",
        "description": "The Looksery company, consisting of n staff members, is planning another big\nparty. Every employee has his phone number and the phone numbers of his\nfriends in the phone book. Everyone who comes to the party, sends messages to\nhis contacts about how cool it is. At the same time everyone is trying to\nspend as much time on the fun as possible, so they send messages to everyone\nwithout special thinking, moreover, each person even sends a message to\nhimself or herself. Igor and Max, Looksery developers, started a dispute on\nhow many messages each person gets. Igor indicates n numbers, the i-th of\nwhich indicates how many messages, in his view, the i-th employee is going to\ntake. If Igor guesses correctly at least one of these numbers, he wins,\notherwise Max wins. You support Max in this debate, so you need, given the\ncontact lists of the employees, to determine whether there is a situation\nwhere Igor loses. Specifically, you need to determine which employees should\ncome to the party, and which should not, so after all the visitors send\nmessages to their contacts, each employee received a number of messages that\nis different from what Igor stated. Input The first line contains a single\ninteger n (1 \u2264 n \u2264 100) \u2014 the number of employees of company Looksery. Next n\nlines contain the description of the contact lists of the employees. The i-th\nof these lines contains a string of length n, consisting of digits zero and\none, specifying the contact list of the i-th employee. If the j-th character\nof the i-th string equals 1, then the j-th employee is in the i-th employee's\ncontact list, otherwise he isn't. It is guaranteed that the i-th character of\nthe i-th line is always equal to 1. The last line contains n space-separated\nintegers: a1, a2, ..., an (0 \u2264 ai \u2264 n), where ai represents the number of\nmessages that the i-th employee should get according to Igor. Output In the\nfirst line print a single integer m \u2014 the number of employees who should come\nto the party so that Igor loses the dispute. In the second line print m space-\nseparated integers \u2014 the numbers of these employees in an arbitrary order. If\nIgor wins the dispute in any case, print -1. If there are multiple possible\nsolutions, print any of them. Examples Input 3 101 010 001 0 1 2 Output 1 1\nInput 1 1 1 Output 0 Input 4 1111 0101 1110 0001 1 0 1 0 Output 4 1 2 3 4 Note\nIn the first sample Igor supposes that the first employee will receive 0\nmessages. Since he isn't contained in any other contact list he must come to\nthe party in order to receive one message from himself. If he is the only who\ncome to the party then he will receive 1 message, the second employee will\nreceive 0 messages and the third will also receive 1 message. Thereby Igor\nwon't guess any number. In the second sample if the single employee comes to\nthe party he receives 1 message and Igor wins, so he shouldn't do it. In the\nthird sample the first employee will receive 2 messages, the second \u2014 3, the\nthird \u2014 2, the fourth \u2014 3.\n\n",
        "cf_contest_id": 549,
        "cf_index": "B",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n101\r\n010\r\n001\r\n0 1 2\r\n",
                "1\r\n1 "
            ],
            [
                "1\r\n1\r\n1\r\n",
                "0\r\n"
            ],
            [
                "4\r\n1111\r\n0101\r\n1110\r\n0001\r\n1 0 1 0\r\n",
                "1\r\n2 "
            ]
        ],
        "private_cases": [
            [
                "2\r\n11\r\n01\r\n0 2\r\n",
                "1\r\n1 "
            ],
            [
                "5\r\n10110\r\n01110\r\n00101\r\n00011\r\n00001\r\n0 0 2 2 3\r\n",
                "4\r\n1 2 3 4 "
            ],
            [
                "6\r\n100000\r\n010000\r\n001000\r\n000100\r\n000010\r\n000001\r\n1 1 1 1 1 1\r\n",
                "0\r\n"
            ],
            [
                "10\r\n1000100000\r\n0100000000\r\n0010001000\r\n0011000000\r\n0100100000\r\n0000010010\r\n1000001000\r\n0000000101\r\n0000000110\r\n0001000001\r\n1 2 1 1 1 0 1 1 1 1\r\n",
                "9\r\n1 3 4 5 6 7 8 9 10 "
            ],
            [
                "10\r\n1000000000\r\n0100000000\r\n0010000000\r\n0001000010\r\n0000100010\r\n1110011000\r\n0000001000\r\n0000000110\r\n0000010010\r\n0000000001\r\n2 2 2 0 0 1 2 0 3 1\r\n",
                "5\r\n4 5 6 8 9 "
            ],
            [
                "10\r\n1000000000\r\n0100000000\r\n1111000100\r\n0001000000\r\n0101100101\r\n1001010000\r\n0000001110\r\n0000000100\r\n0000000010\r\n0000000001\r\n3 3 0 4 0 0 0 4 2 2\r\n",
                "4\r\n3 5 6 7 "
            ],
            [
                "20\r\n10000000000000000000\r\n01000000000000000000\r\n00100000000000000000\r\n00010000000000000000\r\n00001000000000000000\r\n00000100000000000000\r\n00000010000000000000\r\n00000001000000000000\r\n00000000100000000000\r\n00000000010000000000\r\n00000000001000000000\r\n00000000000100000000\r\n00000000000010000000\r\n00000000000001000000\r\n00000000000000100000\r\n00000000000000010000\r\n00000000000000001000\r\n00000000000000000100\r\n00000000000000000010\r\n00000000000000000001\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "0\r\n"
            ],
            [
                "7\r\n1000000\r\n0101100\r\n0010000\r\n0001010\r\n0010100\r\n0000010\r\n0001101\r\n0 0 1 2 2 1 0\r\n",
                "7\r\n1 2 3 4 5 6 7 "
            ],
            [
                "5\r\n11001\r\n01000\r\n01100\r\n11011\r\n00011\r\n1 4 0 1 3\r\n",
                "1\r\n3 "
            ],
            [
                "10\r\n1110001111\r\n0100000000\r\n0110001010\r\n0111011100\r\n0000101000\r\n1011110001\r\n0000001001\r\n1010100101\r\n0000000010\r\n0001101111\r\n2 4 4 2 3 1 6 4 4 4\r\n",
                "0\r\n"
            ],
            [
                "20\r\n10000000000000101000\r\n11001100010111100011\r\n10100110100110101000\r\n01010110100000010000\r\n10101110100111101000\r\n10000110100100101000\r\n00000110000000001000\r\n00000001000000000000\r\n00100010100100100000\r\n00000000011000000000\r\n00010000001000101000\r\n00000010000100000000\r\n00001000000010000000\r\n10101100100111101010\r\n10000000000000100000\r\n11110010000001011100\r\n10000000000100101000\r\n10010001100011101100\r\n00101110100101001011\r\n11001100000111101011\r\n10 3 5 3 5 8 8 2 7 1 1 9 6 6 11 1 11 1 3 2\r\n",
                "0\r\n"
            ],
            [
                "10\r\n1010010111\r\n0101010111\r\n0011100101\r\n0011000011\r\n1110110101\r\n1001110100\r\n1101001111\r\n1001011110\r\n1111000011\r\n0010010001\r\n2 8 5 9 5 3 3 7 6 0\r\n",
                "1\r\n10 "
            ]
        ]
    }
]