[
    {
        "name": "Balanced Substring",
        "description": "You are given a string \n    s\n, consisting of \n    n\n letters, each letter is\neither 'a' or 'b'. The letters in the string are numbered from \n    1\n to\n\n    n\n. \n    s[l; r]\n is a continuous substring of letters from index \n    l\n\nto \n    r\n of the string inclusive. A string is called balanced if the number\nof letters 'a' in it is equal to the number of letters 'b'. For example,\nstrings \"baba\" and \"aabbab\" are balanced and strings \"aaab\" and \"b\" are not.\nFind any non-empty balanced substring \n    s[l; r]\n of string \n    s\n. Print\nits \n    l\n and \n    r\n (\n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 n\n). If there is no such\nsubstring, then print \n    -1\n \n    -1\n. Input The first line contains a\nsingle integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of testcases.\nThen the descriptions of \n    t\n testcases follow. The first line of the\ntestcase contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 50\n) \u2014 the\nlength of the string. The second line of the testcase contains a string\n\n    s\n, consisting of \n    n\n letters, each letter is either 'a' or 'b'.\nOutput For each testcase print two integers. If there exists a non-empty\nbalanced substring \n    s[l; r]\n, then print \n    l\n \n    r\n (\n    1 \n    \u2264 l\n    \n    \u2264 r \n    \u2264 n\n). Otherwise, print \n    -1\n \n    -1\n. Example Input 4 1 a 6\nabbaba 6 abbaba 9 babbabbaa Output -1 -1 1 6 3 6 2 5 Note In the first\ntestcase there are no non-empty balanced subtrings. In the second and third\ntestcases there are multiple balanced substrings, including the entire string\n\"abbaba\" and substring \"baba\".\n\n",
        "cf_contest_id": 1569,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1\r\na\r\n6\r\nabbaba\r\n6\r\nabbaba\r\n9\r\nbabbabbaa\r\n",
                "-1 -1\r\n1 2\r\n1 2\r\n1 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n30\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n",
                "-1 -1\r\n"
            ],
            [
                "1\r\n29\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n",
                "-1 -1\r\n"
            ]
        ]
    }
]