[
    {
        "name": "Bear and Prime 100",
        "description": "This is an interactive problem. In the output section below you will see the\ninformation about flushing the output. Bear Limak thinks of some hidden number\n\u2014 an integer from interval [2, 100]. Your task is to say if the hidden number\nis prime or composite. Integer x > 1 is called prime if it has exactly two\ndistinct divisors, 1 and x. If integer x > 1 is not prime, it's called\ncomposite. You can ask up to 20 queries about divisors of the hidden number.\nIn each query you should print an integer from interval [2, 100]. The system\nwill answer \"yes\" if your integer is a divisor of the hidden number.\nOtherwise, the answer will be \"no\". For example, if the hidden number is 14\nthen the system will answer \"yes\" only if you print 2, 7 or 14. When you are\ndone asking queries, print \"prime\" or \"composite\" and terminate your program.\nYou will get the Wrong Answer verdict if you ask more than 20 queries, or if\nyou print an integer not from the range [2, 100]. Also, you will get the Wrong\nAnswer verdict if the printed answer isn't correct. You will get the Idleness\nLimit Exceeded verdict if you don't print anything (but you should) or if you\nforget about flushing the output (more info below). Input After each query you\nshould read one string from the input. It will be \"yes\" if the printed integer\nis a divisor of the hidden number, and \"no\" otherwise. Output Up to 20 times\nyou can ask a query \u2014 print an integer from interval [2, 100] in one line. You\nhave to both print the end-of-line character and flush the output. After\nflushing you should read a response from the input. In any moment you can\nprint the answer \"prime\" or \"composite\" (without the quotes). After that,\nflush the output and terminate your program. To flush you can use (just after\nprinting an integer and end-of-line): fflush(stdout) in C++;\nSystem.out.flush() in Java; stdout.flush() in Python; flush(output) in Pascal;\nSee the documentation for other languages. Hacking. To hack someone, as the\ninput you should print the hidden number \u2014 one integer from the interval [2,\n100]. Of course, his/her solution won't be able to read the hidden number from\nthe input. Examples Input yes no yes Output 2 80 5 composite Input no yes no\nno no Output 58 59 78 78 2 prime Note The hidden number in the first query is\n30. In a table below you can see a better form of the provided example of the\ncommunication process. The hidden number is divisible by both 2 and 5. Thus,\nit must be composite. Note that it isn't necessary to know the exact value of\nthe hidden number. In this test, the hidden number is 30. 59 is a divisor of\nthe hidden number. In the interval [2, 100] there is only one number with this\ndivisor. The hidden number must be 59, which is prime. Note that the answer is\nknown even after the second query and you could print it then and terminate.\nThough, it isn't forbidden to ask unnecessary queries (unless you exceed the\nlimit of 20 queries).\n\n",
        "cf_contest_id": 679,
        "cf_index": "A",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "interactive",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "30\r\n",
                "composite 19\r\n"
            ],
            [
                "59\r\n",
                "prime 19\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n",
                "prime 19\r\n"
            ],
            [
                "7\r\n",
                "prime 19\r\n"
            ],
            [
                "9\r\n",
                "composite 19\r\n"
            ],
            [
                "13\r\n",
                "prime 19\r\n"
            ],
            [
                "55\r\n",
                "composite 19\r\n"
            ],
            [
                "89\r\n",
                "prime 19\r\n"
            ],
            [
                "3\r\n",
                "prime 19\r\n"
            ],
            [
                "4\r\n",
                "composite 19\r\n"
            ],
            [
                "6\r\n",
                "composite 19\r\n"
            ],
            [
                "8\r\n",
                "composite 19\r\n"
            ],
            [
                "11\r\n",
                "prime 19\r\n"
            ],
            [
                "12\r\n",
                "composite 19\r\n"
            ],
            [
                "25\r\n",
                "composite 19\r\n"
            ],
            [
                "36\r\n",
                "composite 19\r\n"
            ],
            [
                "46\r\n",
                "composite 19\r\n"
            ],
            [
                "47\r\n",
                "prime 19\r\n"
            ],
            [
                "49\r\n",
                "composite 19\r\n"
            ],
            [
                "51\r\n",
                "composite 19\r\n"
            ],
            [
                "53\r\n",
                "prime 19\r\n"
            ],
            [
                "59\r\n",
                "prime 19\r\n"
            ],
            [
                "64\r\n",
                "composite 19\r\n"
            ],
            [
                "81\r\n",
                "composite 19\r\n"
            ],
            [
                "91\r\n",
                "composite 19\r\n"
            ],
            [
                "93\r\n",
                "composite 19\r\n"
            ],
            [
                "94\r\n",
                "composite 19\r\n"
            ],
            [
                "95\r\n",
                "composite 19\r\n"
            ],
            [
                "96\r\n",
                "composite 19\r\n"
            ],
            [
                "97\r\n",
                "prime 19\r\n"
            ],
            [
                "99\r\n",
                "composite 19\r\n"
            ],
            [
                "100\r\n",
                "composite 19\r\n"
            ],
            [
                "26\r\n",
                "composite 19\r\n"
            ],
            [
                "94\r\n",
                "composite 19\r\n"
            ],
            [
                "25\r\n",
                "composite 19\r\n"
            ],
            [
                "46\r\n",
                "composite 19\r\n"
            ],
            [
                "49\r\n",
                "composite 19\r\n"
            ],
            [
                "82\r\n",
                "composite 19\r\n"
            ],
            [
                "87\r\n",
                "composite 19\r\n"
            ],
            [
                "85\r\n",
                "composite 19\r\n"
            ],
            [
                "74\r\n",
                "composite 19\r\n"
            ],
            [
                "86\r\n",
                "composite 19\r\n"
            ],
            [
                "93\r\n",
                "composite 19\r\n"
            ],
            [
                "58\r\n",
                "composite 19\r\n"
            ],
            [
                "47\r\n",
                "prime 19\r\n"
            ],
            [
                "22\r\n",
                "composite 19\r\n"
            ],
            [
                "23\r\n",
                "prime 19\r\n"
            ],
            [
                "62\r\n",
                "composite 19\r\n"
            ],
            [
                "38\r\n",
                "composite 19\r\n"
            ],
            [
                "91\r\n",
                "composite 19\r\n"
            ],
            [
                "34\r\n",
                "composite 19\r\n"
            ],
            [
                "95\r\n",
                "composite 19\r\n"
            ],
            [
                "4\r\n",
                "composite 19\r\n"
            ],
            [
                "16\r\n",
                "composite 19\r\n"
            ],
            [
                "96\r\n",
                "composite 19\r\n"
            ],
            [
                "69\r\n",
                "composite 19\r\n"
            ],
            [
                "65\r\n",
                "composite 19\r\n"
            ],
            [
                "6\r\n",
                "composite 19\r\n"
            ],
            [
                "18\r\n",
                "composite 19\r\n"
            ]
        ]
    }
]