[
    {
        "name": "Binary Cafe",
        "description": "Once upon a time, Toma found himself in a binary cafe. It is a very popular\nand unusual place. The cafe offers visitors \n    k\n different delicious\ndesserts. The desserts are numbered from \n    0\n to \n    k-1\n. The cost of the\n\n    i\n-th dessert is \n    2^i\n coins, because it is a binary cafe! Toma is\nwilling to spend no more than \n    n\n coins on tasting desserts. At the same\ntime, he is not interested in buying any dessert more than once, because one\nis enough to evaluate the taste. In how many different ways can he buy several\ndesserts (possibly zero) for tasting? Input The first line of the input\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of\ntest cases. Then follows \n    t\n lines, each of which describes one test case.\nEach test case is given on a single line and consists of two integers \n    n\n\nand \n    k\n (\n    1 \n    \u2264 n, k \n    \u2264 10^9\n) \u2014 the number of coins Toma is\nwilling to spend and the number of desserts in the binary cafe. Output Output\n\n    t\n integers, the \n    i\n-th of which should be equal to the answer for\nthe \n    i\n-th test case \u2014 the number of ways to buy desserts for tasting.\nExample Input 5 1 2 2 1 2 2 10 2 179 100 Output 2 2 3 4 180 Note Variants for\n1st sample: , 1 Variants for 2nd sample: , 1 Variants for 3rd sample:\n, 1, 2 Variants for 4th sample: , 1, 2, 1, 2\n\n",
        "cf_contest_id": 1840,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "combinatorics",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 2\r\n2 1\r\n2 2\r\n10 2\r\n179 100\r\n",
                "2\r\n2\r\n3\r\n4\r\n180\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n100 100\r\n",
                "101\r\n"
            ],
            [
                "13\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n",
                "2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n2\r\n"
            ],
            [
                "1\r\n1000000 92575\r\n",
                "1000001\r\n"
            ],
            [
                "1\r\n69 85\r\n",
                "70\r\n"
            ],
            [
                "1\r\n20 3200\r\n",
                "21\r\n"
            ],
            [
                "1\r\n1000000000 35\r\n",
                "1000000001\r\n"
            ],
            [
                "1\r\n1000000000 30\r\n",
                "1000000001\r\n"
            ],
            [
                "1\r\n1000000000 63\r\n",
                "1000000001\r\n"
            ],
            [
                "1\r\n5 63\r\n",
                "6\r\n"
            ],
            [
                "1\r\n5 98\r\n",
                "6\r\n"
            ],
            [
                "1\r\n999999999 30\r\n",
                "1000000000\r\n"
            ],
            [
                "1\r\n999999900 30\r\n",
                "999999901\r\n"
            ]
        ]
    }
]