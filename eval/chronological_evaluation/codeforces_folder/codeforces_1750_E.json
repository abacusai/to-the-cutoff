[
    {
        "name": "Bracket Cost",
        "description": "Daemon Targaryen decided to stop looking like a Metin2 character. He turned\nhimself into the most beautiful thing, a bracket sequence. For a bracket\nsequence, we can do two kind of operations: Select one of its\nsubstrings\n    ^\n    \u2020\n and cyclic shift it to the right. For example,\nafter a cyclic shift to the right, \"(())\" will become \")(()\"; Insert any\nbracket, opening '(' or closing ')', wherever you want in the sequence. We\ndefine the cost of a bracket sequence as the minimum number of such operations\nto make it balanced\n    ^\n. Given a bracket sequence \n    s\n of\nlength \n    n\n, find the sum of costs across all its \n    n(n+1)/2\n\nnon-empty substrings. Note that for each substring we calculate the cost\nindependently. \n    ^\n    \u2020\n A string \n    a\n is a substring of a string\n\n    b\n if \n    a\n can be obtained from \n    b\n by deletion of several\n(possibly, zero or all) characters from the beginning and several (possibly,\nzero or all) characters from the end. \n    ^\n A sequence of brackets\nis called balanced if one can turn it into a valid math expression by adding\ncharacters \n    +\n and \n    1\n. For example, sequences \"(())()\", \"()\", and\n\"(()(()))\" are balanced, while \")(\", \"(()\", and \"(()))(\" are not. Input Each\ntest consists of multiple test cases. The first line contains a single integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^5\n) \u2014 the number of test cases. The\ndescription of test cases follows. The first line of each test case contains a\nsingle integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the length of\nthe bracket sequence. The second line of each test case contains a string\n\n    s\n, consisting only of characters '(' and ')', of length \n    n\n \u2014 the\nbracket sequence. It is guaranteed that sum of \n    n\n across all test cases\ndoes not exceed \n    2 \n    \u00b7 10^5\n. Output For each test case, print a\nsingle integer \u2014 the sum of costs of all substrings of \n    s\n. Example Input\n5 1 ) 4 )()( 3 ()) 5 ((((( 10 )(())))()) Output 1 9 6 35 112 Note In the first\ntest case, there is the only substring \")\". Its cost is \n    1\n because we can\ninsert '(' to the beginning of this substring and get a string \"()\", that is a\nbalanced string. In the second test case, the cost of each substring of length\none is \n    1\n. The cost of a substring \")(\" is \n    1\n because we can\ncyclically shift it to right and get a string \"()\". The cost of strings \")()\"\nand \"()(\" is \n    1\n because its enough to insert one bracket to each of them.\nThe cost of substring \")()(\" is \n    1\n because we can cyclically shift it to\nright and get a string \"()()\". So there are \n    4 + 2 + 2 + 1 = 9\n substring\nof cost \n    1\n and \n    1\n substring of cost \n    0\n. So the sum of the costs\nis \n    9\n. In the third test case, \"(\", the cost is \n    1\n; \"()\", the cost\nis \n    0\n; \"())\", the cost is \n    1\n; \")\", the cost is \n    1\n; \"))\", the\ncost is \n    2\n; \")\", the cost is \n    1\n. So the sum of the costs is \n    6\n.\n\n",
        "cf_contest_id": 1750,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "divide and conquer",
            "dp",
            "greedy",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1\r\n)\r\n4\r\n)()(\r\n3\r\n())\r\n5\r\n(((((\r\n10\r\n)(())))())\r\n",
                "1\r\n9\r\n6\r\n35\r\n112\r\n"
            ]
        ],
        "private_cases": []
    }
]