[
    {
        "name": "Om Nom and Spiders",
        "description": "Om Nom really likes candies and doesn't like spiders as they frequently steal\ncandies. One day Om Nom fancied a walk in a park. Unfortunately, the park has\nsome spiders and Om Nom doesn't want to see them at all. The park can be\nrepresented as a rectangular n \u00d7 m field. The park has k spiders, each spider\nat time 0 is at some cell of the field. The spiders move all the time, and\neach spider always moves in one of the four directions (left, right, down,\nup). In a unit of time, a spider crawls from his cell to the side-adjacent\ncell in the corresponding direction. If there is no cell in the given\ndirection, then the spider leaves the park. The spiders do not interfere with\neach other as they move. Specifically, one cell can have multiple spiders at\nthe same time. Om Nom isn't yet sure where to start his walk from but he\ndefinitely wants: to start walking at time 0 at an upper row cell of the field\n(it is guaranteed that the cells in this row do not contain any spiders); to\nwalk by moving down the field towards the lowest row (the walk ends when Om\nNom leaves the boundaries of the park). We know that Om Nom moves by jumping.\nOne jump takes one time unit and transports the little monster from his cell\nto either a side-adjacent cell on the lower row or outside the park\nboundaries. Each time Om Nom lands in a cell he sees all the spiders that have\ncome to that cell at this moment of time. Om Nom wants to choose the optimal\ncell to start the walk from. That's why he wonders: for each possible starting\ncell, how many spiders will he see during the walk if he starts from this\ncell? Help him and calculate the required value for each possible starting\ncell. Input The first line contains three integers n, m, k (2 \u2264 n, m \u2264 2000; 0\n\u2264 k \u2264 m(n - 1)). Each of the next n lines contains m characters \u2014 the\ndescription of the park. The characters in the i-th line describe the i-th row\nof the park field. If the character in the line equals \".\", that means that\nthe corresponding cell of the field is empty; otherwise, the character in the\nline will equal one of the four characters: \"L\" (meaning that this cell has a\nspider at time 0, moving left), \"R\" (a spider moving right), \"U\" (a spider\nmoving up), \"D\" (a spider moving down). It is guaranteed that the first row\ndoesn't contain any spiders. It is guaranteed that the description of the\nfield contains no extra characters. It is guaranteed that at time 0 the field\ncontains exactly k spiders. Output Print m integers: the j-th integer must\nshow the number of spiders Om Nom will see if he starts his walk from the j-th\ncell of the first row. The cells in any row of the field are numbered from\nleft to right. Examples Input 3 3 4 ... R.L R.U Output 0 2 2 Input 2 2 2 .. RL\nOutput 1 1 Input 2 2 2 .. LR Output 0 0 Input 3 4 8 .... RRLL UUUU Output 1 3\n3 1 Input 2 2 2 .. UU Output 0 0 Note Consider the first sample. The notes\nbelow show how the spider arrangement changes on the field over time: ... ...\n..U ... R.L -> .*U -> L.R -> ... R.U .R. ..R ... Character \"*\" represents a\ncell that contains two spiders at the same time. If Om Nom starts from the\nfirst cell of the first row, he won't see any spiders. If he starts from the\nsecond cell, he will see two spiders at time 1. If he starts from the third\ncell, he will see two spiders: one at time 1, the other one at time 2.\n\n",
        "cf_contest_id": 436,
        "cf_index": "B",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "math"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3 4\r\n...\r\nR.L\r\nR.U\r\n",
                "0 2 2 "
            ],
            [
                "2 2 2\r\n..\r\nRL\r\n",
                "1 1 "
            ],
            [
                "2 2 2\r\n..\r\nLR\r\n",
                "0 0 "
            ],
            [
                "3 4 8\r\n....\r\nRRLL\r\nUUUU\r\n",
                "1 3 3 1 "
            ],
            [
                "2 2 2\r\n..\r\nUU\r\n",
                "0 0 "
            ]
        ],
        "private_cases": [
            [
                "2 2 0\r\n..\r\n..\r\n",
                "0 0 "
            ],
            [
                "100 2 45\r\n..\r\n.D\r\nU.\r\n..\r\nU.\r\n..\r\n..\r\n..\r\nU.\r\n..\r\n..\r\nD.\r\nU.\r\n..\r\n..\r\n.D\r\nDU\r\n..\r\nUD\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\nD.\r\nU.\r\n..\r\n..\r\nD.\r\nU.\r\n..\r\n..\r\n..\r\nU.\r\n..\r\n..\r\n.D\r\n..\r\n..\r\n.D\r\n..\r\n..\r\n.D\r\n.U\r\nD.\r\n..\r\n.D\r\n..\r\n..\r\nUD\r\n..\r\nU.\r\n..\r\nU.\r\n..\r\nUD\r\n..\r\nU.\r\n..\r\nU.\r\n..\r\n..\r\n..\r\nU.\r\n..\r\n..\r\nD.\r\n..\r\n..\r\nU.\r\n..\r\nU.\r\n..\r\nUU\r\n..\r\nU.\r\n..\r\nU.\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n..\r\n.D\r\n..\r\n..\r\nD.\r\nU.\r\n.D\r\n..\r\n..\r\nU.\r\n.D\r\nU.\r\n..\r\n",
                "23 3 "
            ]
        ]
    }
]