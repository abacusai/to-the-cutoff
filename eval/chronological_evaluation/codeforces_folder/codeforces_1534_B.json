[
    {
        "name": "Histogram Ugliness",
        "description": "Little Dormi received a histogram with \n    n\n bars of height \n    a_1, a_2,\n    \n    \u2026, a_n\n for Christmas. However, the more he played with his new\nhistogram, the more he realized its imperfections, so today he wanted to\nmodify it to his liking. To modify the histogram, Little Dormi is able to\nperform the following operation an arbitrary number of times: Select an index\n\n    i\n (\n    1 \n    \u2264 i \n    \u2264 n\n) where \n    a_i>0\n, and assign \n    a_i :=\n    a_i-1\n.Little Dormi defines the ugliness score of his histogram (after\nperforming some number of operations) as the sum of the vertical length of its\noutline and the number of operations he performed on it. And to make the\nhistogram as perfect as possible, he would like to minimize the ugliness score\nafter modifying it with some number of operations. However, as his histogram\nis very large, Little Dormi is having trouble minimizing the ugliness score,\nso as Little Dormi's older brother, help him find the minimal ugliness.\nConsider the following example where the histogram has \n    4\n columns of\nheights \n    4,8,9,6\n: The blue region represents the histogram, and the red\nlines represent the vertical portion of the outline. Currently, the vertical\nlength of the outline is \n    4+4+1+3+6 = 18\n, so if Little Dormi does not\nmodify the histogram at all, the ugliness would be \n    18\n. However, Little\nDormi can apply the operation once on column \n    2\n and twice on column\n\n    3\n, resulting in a histogram with heights \n    4,7,7,6\n: Now, as the\ntotal vertical length of the outline (red lines) is \n    4+3+1+6=14\n, the\nugliness is \n    14+3=17\n dollars. It can be proven that this is optimal.\nInput Each test contains multiple test cases. The first line contains the\nnumber of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n). Description of the\ntest cases follows. The first line of each test case contains a single integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 4 \n    \u00b7 10^5\n). The second line of each test\ncase contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i\n    \n    \u2264 10^9\n). It is guaranteed that the sum of \n    n\n over all test cases\ndoes not exceed \n    4 \n    \u00b7 10^5\n. Output For each test case output one\ninteger, the minimal ugliness Little Dormi can achieve with the histogram in\nthat test case. Example Input 2 4 4 8 9 6 6 2 1 7 4 0 0 Output 17 12 Note\nExample \n    1\n is the example described in the statement. The initial\nhistogram for example \n    2\n is given below: The ugliness is currently\n\n    2+1+6+3+4=16\n. By applying the operation once on column \n    1\n, six\ntimes on column \n    3\n, and three times on column \n    4\n, we can end up with\na histogram with heights \n    1,1,1,1,0,0\n: The vertical length of the outline\nis now \n    1+1=2\n and Little Dormi made \n    1+6+3=10\n operations, so the\nfinal ugliness is \n    2+10=12\n, which can be proven to be optimal.\n\n",
        "cf_contest_id": 1534,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n4\r\n4 8 9 6\r\n6\r\n2 1 7 4 0 0\r\n",
                "17\r\n12\r\n"
            ]
        ],
        "private_cases": []
    }
]