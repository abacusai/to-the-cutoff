[
    {
        "name": "Vova and Train",
        "description": "Vova plans to go to the conference by train. Initially, the train is at the\npoint \n    1\n and the destination point of the path is the point \n    L\n. The\nspeed of the train is \n    1\n length unit per minute (i.e. at the first minute\nthe train is at the point \n    1\n, at the second minute \u2014 at the point \n    2\n\nand so on). There are lanterns on the path. They are placed at the points with\ncoordinates divisible by \n    v\n (i.e. the first lantern is at the point\n\n    v\n, the second is at the point \n    2v\n and so on). There is also exactly\none standing train which occupies all the points from \n    l\n to \n    r\n\ninclusive. Vova can see the lantern at the point \n    p\n if \n    p\n is\ndivisible by \n    v\n and there is no standing train at this position (\n    p\n    \n    \u2208 [l; r]\n). Thus, if the point with the lantern is one of the\npoints covered by the standing train, Vova can't see this lantern. Your\nproblem is to say the number of lanterns Vova will see during the path. Vova\nplans to go to \n    t\n different conferences, so you should answer \n    t\n\nindependent queries. Input The first line of the input contains one integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of queries. Then \n    t\n\nlines follow. The \n    i\n-th line contains four integers \n    L_i, v_i, l_i,\n    r_i\n (\n    1 \n    \u2264 L, v \n    \u2264 10^9\n, \n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 L\n) \u2014\ndestination point of the \n    i\n-th path, the period of the lantern appearance\nand the segment occupied by the standing train. Output Print \n    t\n lines.\nThe \n    i\n-th line should contain one integer \u2014 the answer for the \n    i\n-th\nquery. Example Input 4 10 2 3 7 100 51 51 51 1234 1 100 199 1000000000 1 1\n1000000000 Output 3 0 1134 0 Note For the first example query, the answer is\n\n    3\n. There are lanterns at positions \n    2\n, \n    4\n, \n    6\n, \n    8\n\nand \n    10\n, but Vova didn't see the lanterns at positions \n    4\n and\n\n    6\n because of the standing train. For the second example query, the\nanswer is \n    0\n because the only lantern is at the point \n    51\n and there\nis also a standing train at this point. For the third example query, the\nanswer is \n    1134\n because there are \n    1234\n lanterns, but Vova didn't\nsee the lanterns from the position \n    100\n to the position \n    199\n\ninclusive. For the fourth example query, the answer is \n    0\n because the\nstanding train covers the whole path.\n\n",
        "cf_contest_id": 1066,
        "cf_index": "A",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n10 2 3 7\r\n100 51 51 51\r\n1234 1 100 199\r\n1000000000 1 1 1000000000\r\n",
                "3\r\n0\r\n1134\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n1 1 1 1\r\n2 3 1 2\r\n4 4 3 4\r\n",
                "0\r\n0\r\n0\r\n"
            ],
            [
                "1\r\n8 5 1 5\r\n",
                "0\r\n"
            ],
            [
                "1\r\n2 5 1 1\r\n",
                "0\r\n"
            ],
            [
                "1\r\n100 2 61 62\r\n",
                "49\r\n"
            ],
            [
                "1\r\n10 1 9 10\r\n",
                "8\r\n"
            ],
            [
                "1\r\n3 4 3 3\r\n",
                "0\r\n"
            ],
            [
                "10\r\n10 1 1 1\r\n10 1 1 2\r\n10 1 1 3\r\n10 1 1 4\r\n10 1 1 5\r\n10 1 1 6\r\n10 1 1 7\r\n10 1 1 8\r\n10 1 1 9\r\n10 1 1 10\r\n",
                "9\r\n8\r\n7\r\n6\r\n5\r\n4\r\n3\r\n2\r\n1\r\n0\r\n"
            ],
            [
                "10\r\n10 2 1 1\r\n10 2 1 2\r\n10 2 1 3\r\n10 2 1 4\r\n10 2 1 5\r\n10 2 1 6\r\n10 2 1 7\r\n10 2 1 8\r\n10 2 1 9\r\n10 2 1 10\r\n",
                "5\r\n4\r\n4\r\n3\r\n3\r\n2\r\n2\r\n1\r\n1\r\n0\r\n"
            ],
            [
                "1\r\n12599 3 1 2\r\n",
                "4199\r\n"
            ]
        ]
    }
]