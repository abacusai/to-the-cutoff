[
    {
        "name": "Array",
        "description": "Vitaly has an array of n distinct integers. Vitaly wants to divide this array\ninto three non-empty sets so as the following conditions hold: The product of\nall numbers in the first set is less than zero ( < 0). The product of all\nnumbers in the second set is greater than zero ( > 0). The product of all\nnumbers in the third set is equal to zero. Each number from the initial array\nmust occur in exactly one set. Help Vitaly. Divide the given array. Input The\nfirst line of the input contains integer n (3 \u2264 n \u2264 100). The second line\ncontains n space-separated distinct integers a1, a2, ..., an (|ai| \u2264 10^3) \u2014\nthe array elements. Output In the first line print integer n1 (n1 > 0) \u2014 the\nnumber of elements in the first set. Then print n1 numbers \u2014 the elements that\ngot to the first set. In the next line print integer n2 (n2 > 0) \u2014 the number\nof elements in the second set. Then print n2 numbers \u2014 the elements that got\nto the second set. In the next line print integer n3 (n3 > 0) \u2014 the number of\nelements in the third set. Then print n3 numbers \u2014 the elements that got to\nthe third set. The printed sets must meet the described conditions. It is\nguaranteed that the solution exists. If there are several solutions, you are\nallowed to print any of them. Examples Input 3 -1 2 0 Output 1 -1 1 2 1 0\nInput 4 -1 -2 -3 0 Output 1 -1 2 -3 -2 1 0\n\n",
        "cf_contest_id": 300,
        "cf_index": "A",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n-1 2 0\r\n",
                "1 -1\r\n1 2\r\n1 0\r\n"
            ],
            [
                "4\r\n-1 -2 -3 0\r\n",
                "1 -3\r\n2 -2 -1\r\n1 0\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n-1 -2 1 2 0\r\n",
                "1 -2\r\n1 2\r\n3 -1 0 1\r\n"
            ],
            [
                "5\r\n-1 -2 -3 -4 0\r\n",
                "1 -4\r\n2 -3 -2\r\n2 -1 0\r\n"
            ],
            [
                "3\r\n-101 101 0\r\n",
                "1 -101\r\n1 101\r\n1 0\r\n"
            ],
            [
                "21\r\n-100 -200 -300 -400 -500 -600 -700 -800 -900 -1000 0 100 200 300 400 500 600 700 800 900 1000\r\n",
                "1 -1000\r\n1 1000\r\n19 -900 -800 -700 -600 -500 -400 -300 -200 -100 0 100 200 300 400 500 600 700 800 900\r\n"
            ],
            [
                "4\r\n0 -1 -2 -3\r\n",
                "1 -3\r\n2 -2 -1\r\n1 0\r\n"
            ]
        ]
    }
]