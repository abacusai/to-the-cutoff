[
    {
        "name": "Long Binary String",
        "description": "There is a binary string \n    t\n of length \n    10^100\n, and initally all of\nits bits are \n    \n. You are given a binary string \n    s\n, and\nperform the following operation some times: Select some substring of \n    t\n,\nand replace it with its XOR with \n    s\n.\n    ^\n    \u2020\n After several\noperations, the string \n    t\n has exactly two bits \n    \n; that\nis, there are exactly two distinct indices \n    p\n and \n    q\n such that the\n\n    p\n-th and \n    q\n-th bits of \n    t\n are \n    \n, and the rest\nof the bits are \n    \n. Find the lexicographically\nlargest\n    ^\n string \n    t\n satisfying these constraints, or\nreport that no such string exists. \n    ^\n    \u2020\n Formally, choose an index\n\n    i\n such that \n    0 \n    \u2264 i \n    \u2264 10^100-|s|\n. For all \n    1 \n    \u2264 j\n    \n    \u2264 |s|\n, if \n    s_j =\n, then toggle \n    t_i+j\n. That\nis, if \n    t_i+j=\n, set \n    t_i+j=\n. Otherwise\nif \n    t_i+j=\n, set \n    t_i+j=\n.\n\n    ^\n A binary string \n    a\n is lexicographically larger than a\nbinary string \n    b\n of the same length if in the first position where\n\n    a\n and \n    b\n differ, the string \n    a\n has a bit \n    \n\nand the corresponding bit in \n    b\n is \n    \n. Input The only\nline of each test contains a single binary string \n    s\n (\n    1 \n    \u2264 |s|\n    \n    \u2264 35\n). Output If no string \n    t\n exists as described in the\nstatement, output -1. Otherwise, output the integers \n    p\n and \n    q\n (\n    1\n    \n    \u2264 p < q \n    \u2264 10^100\n) such that the \n    p\n-th and \n    q\n-th bits\nof the lexicographically maximal \n    t\n are \n    \n. Examples\nInput 1 Output 1 2 Input 001 Output 3 4 Input 1111 Output 1 5 Input 00000\nOutput -1 Input 00000111110000011111000001111101010 Output 6 37452687 Note In\nthe first test, you can perform the following operations.\n\n    \n\n    \u2026\n    \u2192\n    \n    \n    \n    \u2026\n    \u2192\n    \n    \n    \n    \n    \u2026\n\n    \n In the\nsecond test, you can perform the following operations.\n\n    \n\n    \u2026\n    \u2192\n    \n    \n    \n    \u2026\n    \u2192\n    \n    \n    \n    \n    \u2026\n\n    \n In the\nthird test, you can perform the following operations.\n\n    \n\n    \u2026\n    \u2192\n    \n    \n    \n    \u2026\n    \u2192\n    \n    \n    \n    \u2026\n\n    \n It can be proven that\nthese strings \n    t\n are the lexicographically largest ones. In the fourth\ntest, you can't make a single bit \n    \n, so it is impossible.\n\n",
        "cf_contest_id": 1698,
        "cf_index": "G",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "math",
            "matrices",
            "meet-in-the-middle",
            "number theory"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n",
                "1 2\r\n"
            ],
            [
                "001\r\n",
                "3 4\r\n"
            ],
            [
                "1111\r\n",
                "1 5\r\n"
            ],
            [
                "00000\r\n",
                "-1\r\n"
            ],
            [
                "00000111110000011111000001111101010\r\n",
                "6 37452687\r\n"
            ]
        ],
        "private_cases": [
            [
                "10000111111111111111111111111111111\r\n",
                "1 17179869184\r\n"
            ],
            [
                "11110000000110110101100011010110001\r\n",
                "1 17179869184\r\n"
            ],
            [
                "11111000001000101000001110011101101\r\n",
                "1 17179869184\r\n"
            ],
            [
                "0\r\n",
                "-1\r\n"
            ],
            [
                "00110000000110010000000100100100010\r\n",
                "3 301989882\r\n"
            ],
            [
                "0111010100001010000101001000011110\r\n",
                "2 179692\r\n"
            ],
            [
                "00101100011011000011111001000111110\r\n",
                "3 1073741826\r\n"
            ],
            [
                "011011001001\r\n",
                "2 383\r\n"
            ],
            [
                "11000001011000100001100100111010101\r\n",
                "1 5726623062\r\n"
            ],
            [
                "000000001001\r\n",
                "9 12\r\n"
            ],
            [
                "11010000101011011000111011011011111\r\n",
                "1 16777216\r\n"
            ],
            [
                "1001110111110100000101010\r\n",
                "1 8371714\r\n"
            ],
            [
                "01111100100000111010111110111000001\r\n",
                "2 7512508425\r\n"
            ],
            [
                "10010101111100\r\n",
                "1 342\r\n"
            ],
            [
                "00100001100111011001000010000001001\r\n",
                "3 2146430981\r\n"
            ],
            [
                "011\r\n",
                "2 3\r\n"
            ],
            [
                "00101001110110101011011111100011011\r\n",
                "3 7776912\r\n"
            ],
            [
                "011011000000001110001110010\r\n",
                "2 524288\r\n"
            ],
            [
                "10100000000000000000000000000000101\r\n",
                "1 65\r\n"
            ]
        ]
    }
]