[
    {
        "name": "Game on Ranges",
        "description": "Alice and Bob play the following game. Alice has a set \n    S\n of disjoint\nranges of integers, initially containing only one range \n    [1, n]\n. In one\nturn, Alice picks a range \n    [l, r]\n from the set \n    S\n and asks Bob to\npick a number in the range. Bob chooses a number \n    d\n (\n    l \n    \u2264 d \n    \u2264\n    r\n). Then Alice removes \n    [l, r]\n from \n    S\n and puts into the set\n\n    S\n the range \n    [l, d - 1]\n (if \n    l \n    \u2264 d - 1\n) and the range\n\n    [d + 1, r]\n (if \n    d + 1 \n    \u2264 r\n). The game ends when the set \n    S\n\nis empty. We can show that the number of turns in each game is exactly\n\n    n\n. After playing the game, Alice remembers all the ranges \n    [l, r]\n\nshe picked from the set \n    S\n, but Bob does not remember any of the numbers\nthat he picked. But Bob is smart, and he knows he can find out his numbers\n\n    d\n from Alice's ranges, and so he asks you for help with your programming\nskill. Given the list of ranges that Alice has picked (\n    [l, r]\n), for each\nrange, help Bob find the number \n    d\n that Bob has picked. We can show that\nthere is always a unique way for Bob to choose his number for a list of valid\nranges picked by Alice. Input Each test contains multiple test cases. The\nfirst line contains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    1000\n). Description of the test cases follows. The first line of each test\ncase contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 1000\n). Each of\nthe next \n    n\n lines contains two integers \n    l\n and \n    r\n (\n    1 \n    \u2264 l\n    \n    \u2264 r \n    \u2264 n\n), denoting the range \n    [l, r]\n that Alice picked at some\npoint. Note that the ranges are given in no particular order. It is guaranteed\nthat the sum of \n    n\n over all test cases does not exceed \n    1000\n, and\nthe ranges for each test case are from a valid game. Output For each test case\nprint \n    n\n lines. Each line should contain three integers \n    l\n, \n    r\n,\nand \n    d\n, denoting that for Alice's range \n    [l, r]\n Bob picked the\nnumber \n    d\n. You can print the lines in any order. We can show that the\nanswer is unique. It is not required to print a new line after each test case.\nThe new lines in the output of the example are for readability only. Example\nInput 4 1 1 1 3 1 3 2 3 2 2 6 1 1 3 5 4 4 3 6 4 5 1 6 5 1 5 1 2 4 5 2 2 4 4\nOutput 1 1 1 1 3 1 2 2 2 2 3 3 1 1 1 3 5 3 4 4 4 3 6 6 4 5 5 1 6 2 1 5 3 1 2 1\n4 5 5 2 2 2 4 4 4 Note In the first test case, there is only 1 range \n    [1,\n    1]\n. There was only one range \n    [1, 1]\n for Alice to pick, and there was\nonly one number \n    1\n for Bob to pick. In the second test case, \n    n = 3\n.\nInitially, the set contains only one range \n    [1, 3]\n. Alice picked the\nrange \n    [1, 3]\n. Bob picked the number \n    1\n. Then Alice put the range\n\n    [2, 3]\n back to the set, which after this turn is the only range in the\nset. Alice picked the range \n    [2, 3]\n. Bob picked the number \n    3\n. Then\nAlice put the range \n    [2, 2]\n back to the set. Alice picked the range\n\n    [2, 2]\n. Bob picked the number \n    2\n. The game ended. In the fourth\ntest case, the game was played with \n    n = 5\n. Initially, the set contains\nonly one range \n    [1, 5]\n. The game's turn is described in the following\ntable. Game turnAlice's picked rangeBob's picked numberThe range set\nafterBefore the game start\n    [1, 5]\n1\n    [1, 5]\n\n    3\n\n    [1, 2], [4, 5]\n2\n    [1, 2]\n\n    1\n\n    [2, 2], [4, 5]\n3\n    [4, 5]\n\n    5\n\n    [2, 2], [4, 4]\n4\n    [2,\n    2]\n\n    2\n\n    [4, 4]\n5\n    [4, 4]\n\n    4\n\n    \n\n(empty set)\n\n",
        "cf_contest_id": 1623,
        "cf_index": "B",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dfs and similar",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1\r\n1 1\r\n3\r\n1 3\r\n2 3\r\n2 2\r\n6\r\n1 1\r\n3 5\r\n4 4\r\n3 6\r\n4 5\r\n1 6\r\n5\r\n1 5\r\n1 2\r\n4 5\r\n2 2\r\n4 4\r\n",
                "1 1 1\r\n2 2 2\r\n2 3 3\r\n1 3 1\r\n1 1 1\r\n4 4 4\r\n4 5 5\r\n3 5 3\r\n3 6 6\r\n1 6 2\r\n2 2 2\r\n4 4 4\r\n1 2 1\r\n4 5 5\r\n1 5 3\r\n"
            ]
        ],
        "private_cases": []
    }
]