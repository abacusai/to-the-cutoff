[
    {
        "name": "Vasya and a Tree",
        "description": "Vasya has a tree consisting of \n    n\n vertices with root in vertex \n    1\n.\nAt first all vertices has \n    0\n written on it. Let \n    d(i, j)\n be the\ndistance between vertices \n    i\n and \n    j\n, i.e. number of edges in the\nshortest path from \n    i\n to \n    j\n. Also, let's denote \n    k\n-subtree of\nvertex \n    x\n \u2014 set of vertices \n    y\n such that next two conditions are\nmet: \n    x\n is the ancestor of \n    y\n (each vertex is the ancestor of\nitself); \n    d(x, y) \n    \u2264 k\n. Vasya needs you to process \n    m\n queries.\nThe \n    i\n-th query is a triple \n    v_i\n, \n    d_i\n and \n    x_i\n. For each\nquery Vasya adds value \n    x_i\n to each vertex from \n    d_i\n-subtree of\n\n    v_i\n. Report to Vasya all values, written on vertices of the tree after\nprocessing all queries. Input The first line contains single integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 3 \n    \u00b7 10^5\n) \u2014 number of vertices in the tree. Each\nof next \n    n - 1\n lines contains two integers \n    x\n and \n    y\n (\n    1\n    \n    \u2264 x, y \n    \u2264 n\n) \u2014 edge between vertices \n    x\n and \n    y\n. It is\nguarantied that given graph is a tree. Next line contains single integer\n\n    m\n (\n    1 \n    \u2264 m \n    \u2264 3 \n    \u00b7 10^5\n) \u2014 number of queries. Each of\nnext \n    m\n lines contains three integers \n    v_i\n, \n    d_i\n, \n    x_i\n\n(\n    1 \n    \u2264 v_i \n    \u2264 n\n, \n    0 \n    \u2264 d_i \n    \u2264 10^9\n, \n    1 \n    \u2264 x_i \n    \u2264\n    10^9\n) \u2014 description of the \n    i\n-th query. Output Print \n    n\n integers.\nThe \n    i\n-th integers is the value, written in the \n    i\n-th vertex after\nprocessing all queries. Examples Input 5 1 2 1 3 2 4 2 5 3 1 1 1 2 0 10 4 10\n100 Output 1 11 1 100 0 Input 5 2 3 2 1 5 4 3 4 5 2 0 4 3 10 1 1 2 3 2 3 10 1\n1 7 Output 10 24 14 11 11 Note In the first exapmle initial values in vertices\nare \n    0, 0, 0, 0, 0\n. After the first query values will be equal to \n    1,\n    1, 1, 0, 0\n. After the second query values will be equal to \n    1, 11, 1, 0,\n    0\n. After the third query values will be equal to \n    1, 11, 1, 100, 0\n.\n\n",
        "cf_contest_id": 1076,
        "cf_index": "E",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3\r\n1 1 1\r\n2 0 10\r\n4 10 100\r\n",
                "1 11 1 100 0 "
            ],
            [
                "5\r\n2 3\r\n2 1\r\n5 4\r\n3 4\r\n5\r\n2 0 4\r\n3 10 1\r\n1 2 3\r\n2 3 10\r\n1 1 7\r\n",
                "10 24 14 11 11 "
            ]
        ],
        "private_cases": [
            [
                "7\r\n6 7\r\n7 5\r\n3 2\r\n7 2\r\n2 1\r\n1 4\r\n3\r\n5 3 1\r\n7 6 4\r\n4 3 2\r\n",
                "0 0 0 2 5 4 4 "
            ],
            [
                "11\r\n4 9\r\n3 8\r\n10 7\r\n10 2\r\n8 10\r\n6 4\r\n5 1\r\n8 6\r\n11 1\r\n1 4\r\n5\r\n1 7 73\r\n11 9 76\r\n1 8 60\r\n2 8 43\r\n4 10 97\r\n",
                "133 273 230 230 133 230 230 230 230 230 209 "
            ],
            [
                "5\r\n2 3\r\n2 1\r\n5 4\r\n3 4\r\n5\r\n2 10000000 4\r\n3 10 1\r\n1 2 3\r\n2 3 10\r\n1 1 7\r\n",
                "10 24 18 15 15 "
            ],
            [
                "5\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3\r\n1 100000000 1\r\n2 100000000 10\r\n4 100000000 100\r\n",
                "1 11 1 111 11 "
            ],
            [
                "5\r\n2 3\r\n2 1\r\n5 4\r\n3 4\r\n5\r\n2 1000000000 4\r\n3 10 1\r\n1 2 3\r\n2 3 10\r\n1 1 7\r\n",
                "10 24 18 15 15 "
            ],
            [
                "5\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3\r\n1 1000000000 1\r\n2 1000000000 10\r\n4 1000000000 100\r\n",
                "1 11 1 111 11 "
            ],
            [
                "2\r\n1 2\r\n1\r\n1 500000000 1\r\n",
                "1 1 "
            ],
            [
                "1\r\n3\r\n1 1000000000 1000000000\r\n1 1000000000 1000000000\r\n1 1000000000 1000000000\r\n",
                "3000000000 "
            ],
            [
                "2\r\n1 2\r\n1\r\n1 1000000000 1\r\n",
                "1 1 "
            ],
            [
                "19\r\n2 1\r\n3 2\r\n4 1\r\n5 1\r\n6 5\r\n7 4\r\n8 1\r\n9 2\r\n10 9\r\n11 9\r\n12 4\r\n13 10\r\n14 2\r\n15 9\r\n16 6\r\n17 13\r\n18 16\r\n19 8\r\n23\r\n16 259531913 13\r\n9 484727538 7\r\n2 174952922 9\r\n16 555559835 9\r\n4 835692337 2\r\n5 656716001 1\r\n11 981357393 3\r\n1 281380171 17\r\n6 150928639 18\r\n19 431687604 19\r\n9 609377645 1\r\n7 847715542 3\r\n17 595731628 2\r\n7 517431564 16\r\n18 355991047 11\r\n1 675637133 3\r\n15 792805835 18\r\n7 28098468 18\r\n15 67800207 13\r\n8 761233731 6\r\n9 220349684 10\r\n18 17583445 5\r\n18 666731721 9\r\n",
                "20 29 29 22 21 39 59 26 47 47 50 22 47 29 78 61 49 86 45 "
            ]
        ]
    }
]