[
    {
        "name": "Sum of Nestings",
        "description": "Recall that the bracket sequence is considered regular if it is possible to\ninsert symbols '+' and '1' into it so that the result is a correct arithmetic\nexpression. For example, a sequence \"(()())\" is regular, because we can get\ncorrect arithmetic expression insering symbols '+' and '1': \"((1+1)+(1+1))\".\nAlso the following sequences are regular: \"()()()\", \"(())\" and \"()\". The\nfollowing sequences are not regular bracket sequences: \")(\", \"(()\" and\n\"())(()\". In this problem you are given two integers n and k. Your task is to\nconstruct a regular bracket sequence consisting of round brackets with length\n2\u00b7n with total sum of nesting of all opening brackets equals to exactly k. The\nnesting of a single opening bracket equals to the number of pairs of brackets\nin which current opening bracket is embedded. For example, in the sequence\n\"()(())\" the nesting of first opening bracket equals to 0, the nesting of the\nsecond opening bracket equals to 0 and the nesting of the third opening\nbracket equal to 1. So the total sum of nestings equals to 1. Input The first\nline contains two integers n and k (1 \u2264 n \u2264 3\u00b710^5, 0 \u2264 k \u2264 10^18) \u2014 the\nnumber of opening brackets and needed total nesting. Output Print the required\nregular bracket sequence consisting of round brackets. If there is no solution\nprint \"Impossible\" (without quotes). Examples Input 3 1 Output ()(()) Input 4\n6 Output (((()))) Input 2 5 Output Impossible Note The first example is\nexamined in the statement. In the second example the answer is \"(((())))\". The\nnesting of the first opening bracket is 0, the nesting of the second is 1, the\nnesting of the third is 2, the nesting of fourth is 3. So the total sum of\nnestings equals to 0 + 1 + 2 + 3 = 6. In the third it is impossible to\nconstruct a regular bracket sequence, because the maximum possible total sum\nof nestings for two opening brackets equals to 1. This total sum of nestings\nis obtained for the sequence \"(())\".\n\n",
        "cf_contest_id": 847,
        "cf_index": "C",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 1\r\n",
                "(())()"
            ],
            [
                "4 6\r\n",
                "(((())))"
            ],
            [
                "2 5\r\n",
                "Impossible\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 0\r\n",
                "()"
            ],
            [
                "2 0\r\n",
                "()()"
            ],
            [
                "2 1\r\n",
                "(())"
            ],
            [
                "3 0\r\n",
                "()()()"
            ],
            [
                "10 42\r\n",
                "((((((((()))()))))))"
            ],
            [
                "3 2\r\n",
                "(()())"
            ],
            [
                "3 3\r\n",
                "((()))"
            ],
            [
                "4 1\r\n",
                "(())()()"
            ],
            [
                "4 2\r\n",
                "(()())()"
            ],
            [
                "4 0\r\n",
                "()()()()"
            ],
            [
                "4 3\r\n",
                "((()))()"
            ],
            [
                "4 4\r\n",
                "((())())"
            ],
            [
                "4 5\r\n",
                "((()()))"
            ],
            [
                "20 132\r\n",
                "(((((((((((((((())))()))))))))))))()()()"
            ],
            [
                "5 0\r\n",
                "()()()()()"
            ],
            [
                "5 1\r\n",
                "(())()()()"
            ],
            [
                "5 2\r\n",
                "(()())()()"
            ],
            [
                "5 3\r\n",
                "((()))()()"
            ],
            [
                "5 4\r\n",
                "((())())()"
            ],
            [
                "5 5\r\n",
                "((()()))()"
            ],
            [
                "5 6\r\n",
                "(((())))()"
            ],
            [
                "5 7\r\n",
                "(((()))())"
            ],
            [
                "5 8\r\n",
                "(((())()))"
            ],
            [
                "5 9\r\n",
                "(((()())))"
            ],
            [
                "5 10\r\n",
                "((((()))))"
            ],
            [
                "5 11\r\n",
                "Impossible\r\n"
            ],
            [
                "50 282\r\n",
                "(((((((((((((((((((((((())))))))))))))))))()))))))()()()()()()()()()()()()()()()()()()()()()()()()()"
            ],
            [
                "100 4298\r\n",
                "((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))()))))))))))))))))))))()()()()()()"
            ],
            [
                "201 19557\r\n",
                "(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))()))))))))))))))))))))))))))))))))))))))))))))))))))))))()()"
            ],
            [
                "10 48\r\n",
                "Impossible\r\n"
            ],
            [
                "100 4952\r\n",
                "Impossible\r\n"
            ],
            [
                "1000 499505\r\n",
                "Impossible\r\n"
            ],
            [
                "5001 12502504\r\n",
                "Impossible\r\n"
            ],
            [
                "9999 49985003\r\n",
                "Impossible\r\n"
            ],
            [
                "300000 44999850003\r\n",
                "Impossible\r\n"
            ],
            [
                "10 46\r\n",
                "Impossible\r\n"
            ],
            [
                "100 4955\r\n",
                "Impossible\r\n"
            ],
            [
                "1000 499503\r\n",
                "Impossible\r\n"
            ],
            [
                "5001 12502503\r\n",
                "Impossible\r\n"
            ],
            [
                "9999 49985002\r\n",
                "Impossible\r\n"
            ],
            [
                "300000 44999850002\r\n",
                "Impossible\r\n"
            ],
            [
                "300000 1000000000000000000\r\n",
                "Impossible\r\n"
            ],
            [
                "300000 44999850001\r\n",
                "Impossible\r\n"
            ],
            [
                "1 1\r\n",
                "Impossible\r\n"
            ],
            [
                "1 2\r\n",
                "Impossible\r\n"
            ],
            [
                "1 1000000000000000000\r\n",
                "Impossible\r\n"
            ],
            [
                "2 2\r\n",
                "Impossible\r\n"
            ],
            [
                "2 3\r\n",
                "Impossible\r\n"
            ],
            [
                "2 1000000000000000000\r\n",
                "Impossible\r\n"
            ],
            [
                "299999 1000000000000000000\r\n",
                "Impossible\r\n"
            ]
        ]
    }
]