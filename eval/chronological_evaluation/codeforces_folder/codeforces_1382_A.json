[
    {
        "name": "Common Subsequence",
        "description": "You are given two arrays of integers \n    a_1,\n    \u2026,a_n\n and\n\n    b_1,\n    \u2026,b_m\n. Your task is to find a non-empty array\n\n    c_1,\n    \u2026,c_k\n that is a subsequence of \n    a_1,\n    \u2026,a_n\n, and\nalso a subsequence of \n    b_1,\n    \u2026,b_m\n. If there are multiple answers,\nfind one of the smallest possible length. If there are still multiple of the\nsmallest possible length, find any. If there are no such arrays, you should\nreport about it. A sequence \n    a\n is a subsequence of a sequence \n    b\n if\n\n    a\n can be obtained from \n    b\n by deletion of several (possibly, zero)\nelements. For example, \n    [3,1]\n is a subsequence of \n    [3,2,1]\n and\n\n    [4,3,1]\n, but not a subsequence of \n    [1,3,3,7]\n and \n    [3,10,4]\n.\nInput The first line contains a single integer \n    t\n (\n    1\n    \u2264 t\n    \u2264\n    1000\n) \u2014 the number of test cases. Next \n    3t\n lines contain descriptions\nof test cases. The first line of each test case contains two integers \n    n\n\nand \n    m\n (\n    1\n    \u2264 n,m\n    \u2264 1000\n) \u2014 the lengths of the two arrays. The\nsecond line of each test case contains \n    n\n integers \n    a_1,\n    \u2026,a_n\n\n(\n    1\n    \u2264 a_i\n    \u2264 1000\n) \u2014 the elements of the first array. The third line\nof each test case contains \n    m\n integers \n    b_1,\n    \u2026,b_m\n (\n    1\n    \u2264\n    b_i\n    \u2264 1000\n) \u2014 the elements of the second array. It is guaranteed that\nthe sum of \n    n\n and the sum of \n    m\n across all test cases does not\nexceed \n    1000\n (\n    \u2211\n    _i=1^t n_i, \n    \u2211\n    _i=1^t\n    m_i\n    \u2264 1000\n). Output For each test case, output \"YES\" if a solution\nexists, or \"NO\" otherwise. If the answer is \"YES\", on the next line output an\ninteger \n    k\n (\n    1\n    \u2264 k\n    \u2264 1000\n) \u2014 the length of the array, followed\nby \n    k\n integers \n    c_1,\n    \u2026,c_k\n (\n    1\n    \u2264 c_i\n    \u2264 1000\n) \u2014 the\nelements of the array. If there are multiple solutions with the smallest\npossible \n    k\n, output any. Example Input 5 4 5 10 8 6 4 1 2 3 4 5 1 1 3 3 1\n1 3 2 5 3 1000 2 2 2 3 3 1 5 5 5 1 2 3 4 5 1 2 3 4 5 Output YES 1 4 YES 1 3 NO\nYES 1 3 YES 1 2 Note In the first test case, \n    [4]\n is a subsequence of\n\n    [10, 8, 6, 4]\n and \n    [1, 2, 3, 4, 5]\n. This array has length \n    1\n,\nit is the smallest possible length of a subsequence of both \n    a\n and\n\n    b\n. In the third test case, no non-empty subsequences of both \n    [3]\n\nand \n    [2]\n exist, so the answer is \"NO\".\n\n",
        "cf_contest_id": 1382,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "brute force"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n4 5\r\n10 8 6 4\r\n1 2 3 4 5\r\n1 1\r\n3\r\n3\r\n1 1\r\n3\r\n2\r\n5 3\r\n1000 2 2 2 3\r\n3 1 5\r\n5 5\r\n1 2 3 4 5\r\n1 2 3 4 5\r\n",
                "YES 1 4\r\nYES 1 3\r\nNO\r\nYES 1 3\r\nYES 1 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2 3\r\n1 1\r\n1 2 3\r\n",
                "YES 1 1\r\n"
            ],
            [
                "1\r\n2 2\r\n2 2\r\n2 2\r\n",
                "YES 1 2\r\n"
            ],
            [
                "1\r\n1 1\r\n1000\r\n1000\r\n",
                "YES 1 1000\r\n"
            ],
            [
                "1\r\n1 3\r\n3\r\n1 2 3\r\n",
                "YES 1 3\r\n"
            ],
            [
                "1\r\n4 4\r\n1 1 1 1\r\n1 2 3 4\r\n",
                "YES 1 1\r\n"
            ],
            [
                "1\r\n2 2\r\n1 1\r\n1 2\r\n",
                "YES 1 1\r\n"
            ]
        ]
    }
]