[
    {
        "name": "Bad Cryptography",
        "description": "In modern cryptography much is tied to the algorithmic complexity of solving\nseveral problems. One of such problems is a discrete logarithm problem. It is\nformulated as follows: Let's fix a finite field and two it's elements \n    a\n\nand \n    b\n. One need to fun such \n    x\n that \n    a^x = b\n or detect there\nis no such x. It is most likely that modern mankind cannot solve the problem\nof discrete logarithm for a sufficiently large field size. For example, for a\nfield of residues modulo prime number, primes of 1024 or 2048 bits are\nconsidered to be safe. However, calculations with such large numbers can place\na significant load on servers that perform cryptographic operations. For this\nreason, instead of a simple module residue field, more complex fields are\noften used. For such field no fast algorithms that use a field structure are\nknown, smaller fields can be used and operations can be properly optimized.\nDeveloper Nikolai does not trust the generally accepted methods, so he wants\nto invent his own. Recently, he read about a very strange field \u2014 nimbers, and\nthinks it's a great fit for the purpose. The field of nimbers is defined on a\nset of integers from 0 to \n    2^2^k - 1\n for some positive integer \n    k\n\n. Bitwise exclusive or (\n    \u2295\n) operation is used as addition. One of\nways to define multiplication operation (\n    \u2299\n) is following\nproperties: \n    0 \n    \u2299 a = a \n    \u2299 0 = 0\n \n    1 \n    \u2299 a = a \n    \u2299 1 =\n    a\n \n    a \n    \u2299 b = b \n    \u2299 a\n \n    a \n    \u2299 (b \n    \u2299 c)= (a \n    \u2299 b)\n    \n    \u2299 c\n \n    a \n    \u2299 (b \n    \u2295 c) = (a \n    \u2299 b) \n    \u2295 (a \n    \u2299\n    c)\n If \n    a = 2^2^n\n for some integer \n    n > 0\n, and \n    b < a\n, then\n\n    a \n    \u2299 b = a \n    \u00b7 b\n. If \n    a = 2^2^n\n for some integer \n    n >\n    0\n, then \n    a \n    \u2299 a = \n    3/2\n    \u00b7 a\n. For example: \n    4\n    \n    \u2299 4 = 6\n \n    8 \n    \u2299 8 = 4 \n    \u2299 2 \n    \u2299 4 \n    \u2299 2 = 4 \n    \u2299\n    4 \n    \u2299 2 \n    \u2299 2 = 6 \n    \u2299 3 = (4 \n    \u2295 2) \n    \u2299 3 = (4 \n    \u2299 3)\n    \n    \u2295 (2 \n    \u2299 (2 \n    \u2295 1)) = (4 \n    \u2299 3) \n    \u2295 (2 \n    \u2299 2)\n    \n    \u2295 (2 \n    \u2299 1) = 12 \n    \u2295 3 \n    \u2295 2 = 13.\n \n    32 \n    \u2299 64 =\n    (16 \n    \u2299 2) \n    \u2299 (16 \n    \u2299 4) = (16 \n    \u2299 16) \n    \u2299 (2 \n    \u2299 4)\n    = 24 \n    \u2299 8 = (16 \n    \u2295 8) \n    \u2299 8 = (16 \n    \u2299 8) \n    \u2295 (8\n    \n    \u2299 8) = 128 \n    \u2295 13 = 141\n \n    5 \n    \u2299 6 = (4 \n    \u2295 1) \n    \u2299\n    (4 \n    \u2295 2) = (4\n    \u2299 4) \n    \u2295 (4 \n    \u2299 2) \n    \u2295 (4 \n    \u2299 1)\n    \n    \u2295 (1 \n    \u2299 2) = 6 \n    \u2295 8 \n    \u2295 4 \n    \u2295 2 = 8\n Formally,\nthis algorithm can be described by following pseudo-code. multiply(a, b)  ans\n= 0 for p1 in bits(a) // numbers of bits of a equal to one for p2 in bits(b)\n// numbers of bits of b equal to one ans = ans xor multiply_powers_of_2(1 <<\np1, 1 << p2) return ans;  multiply_powers_of_2(a, b)  if (a == 1 or b == 1)\nreturn a * b n = maximal value, such 2^2^n <= max(a, b) power = 2^2^n;\nif (a >= power and b >= power)  return multiply(power * 3 / 2,\nmultiply_powers_of_2(a / power, b / power))  else if (a >= power)  return\nmultiply_powers_of_2(a / power, b) * power  else  return\nmultiply_powers_of_2(a, b / power) * power   It can be shown, that this\noperations really forms a field. Moreover, than can make sense as game theory\noperations, but that's not related to problem much. With the help of\nappropriate caching and grouping of operations, it is possible to calculate\nthe product quickly enough, which is important to improve speed of the\ncryptoalgorithm. More formal definitions as well as additional properties can\nbe clarified in the wikipedia article at link. The authors of the task hope\nthat the properties listed in the statement should be enough for the solution.\nPowering for such muliplication is defined in same way, formally \n    a^\n    \u2299\n    k = \n    a \n    \u2299 a \n    \u2299\n    \u22ef\n    \u2299\n    a_k\n. You need to analyze the proposed scheme strength.\nFor pairs of numbers \n    a\n and \n    b\n you need to find such \n    x\n, that\n\n    a^\n    \u2299 x = b\n, or determine that it doesn't exist. Input In the\nfirst line of input there is single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    100\n) \u2014 number of pairs, for which you need to find the discrete logarithm.\nIn each of next \n    t\n line there is a pair of integers \n    a\n \n    b\n (\n    1\n    \n    \u2264 a, b < 2^64\n). Output For each pair you should print one integer\n\n    x\n (\n    0 \n    \u2264 x < 2^64\n), such that \n    a^\n    \u2299 x = b\n, or -1\nif no such x exists. It can be shown, that if any such \n    x\n exists, there\nis one inside given bounds. If there are several good values, you can output\nany of them. Example Input 7 2 2 1 1 2 3 8 10 8 2 321321321321 2 123214213213\n4356903202345442785 Output 1 1 2 4 -1 6148914691236517205 68943624821423112\n\n",
        "cf_contest_id": 1310,
        "cf_index": "F",
        "cf_rating": 3400,
        "difficulty": 0,
        "cf_tags": [
            "math",
            "number theory"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "7\r\n2 2\r\n1 1\r\n2 3\r\n8 10\r\n8 2\r\n321321321321 2\r\n123214213213 4356903202345442785\r\n",
                "1\r\n0\r\n2\r\n9\r\n-1\r\n6148914691236517205\r\n68943624821423112\r\n"
            ]
        ],
        "private_cases": [
            [
                "25\r\n14 6\r\n14 7\r\n14 8\r\n14 9\r\n14 10\r\n14 11\r\n14 12\r\n14 13\r\n14 14\r\n14 15\r\n15 1\r\n15 2\r\n15 3\r\n15 4\r\n15 5\r\n15 6\r\n15 7\r\n15 8\r\n15 9\r\n15 10\r\n15 11\r\n15 12\r\n15 13\r\n15 14\r\n15 15\r\n",
                "-1\r\n-1\r\n12\r\n-1\r\n3\r\n-1\r\n-1\r\n9\r\n6\r\n-1\r\n0\r\n10\r\n5\r\n14\r\n11\r\n13\r\n7\r\n9\r\n2\r\n6\r\n8\r\n4\r\n3\r\n12\r\n1\r\n"
            ],
            [
                "1\r\n15 15\r\n",
                "1\r\n"
            ],
            [
                "100\r\n1 2\r\n2 2\r\n1 1\r\n3 1\r\n3 3\r\n2 3\r\n3 1\r\n3 3\r\n3 3\r\n3 2\r\n1 3\r\n1 3\r\n3 2\r\n2 2\r\n1 3\r\n1 1\r\n3 2\r\n2 3\r\n1 1\r\n3 3\r\n1 1\r\n3 1\r\n3 1\r\n3 3\r\n2 2\r\n2 3\r\n2 1\r\n1 3\r\n3 3\r\n3 2\r\n2 2\r\n1 2\r\n1 3\r\n1 3\r\n2 3\r\n1 3\r\n2 1\r\n1 1\r\n1 3\r\n3 2\r\n1 3\r\n1 3\r\n2 2\r\n2 2\r\n2 1\r\n2 2\r\n3 3\r\n2 1\r\n1 2\r\n2 3\r\n1 1\r\n1 1\r\n2 1\r\n2 3\r\n3 1\r\n3 2\r\n1 2\r\n3 1\r\n2 2\r\n2 3\r\n2 2\r\n3 1\r\n2 2\r\n2 2\r\n1 3\r\n2 3\r\n2 2\r\n3 1\r\n3 1\r\n2 2\r\n2 1\r\n3 2\r\n3 3\r\n3 2\r\n3 1\r\n2 3\r\n3 1\r\n1 3\r\n1 3\r\n1 1\r\n1 1\r\n3 3\r\n1 1\r\n3 2\r\n1 3\r\n3 3\r\n3 2\r\n1 3\r\n2 3\r\n1 3\r\n2 2\r\n2 2\r\n3 1\r\n2 2\r\n2 2\r\n3 2\r\n3 2\r\n2 2\r\n3 3\r\n2 3\r\n",
                "-1\r\n1\r\n0\r\n0\r\n1\r\n2\r\n0\r\n1\r\n1\r\n2\r\n-1\r\n-1\r\n2\r\n1\r\n-1\r\n0\r\n2\r\n2\r\n0\r\n1\r\n0\r\n0\r\n0\r\n1\r\n1\r\n2\r\n0\r\n-1\r\n1\r\n2\r\n1\r\n-1\r\n-1\r\n-1\r\n2\r\n-1\r\n0\r\n0\r\n-1\r\n2\r\n-1\r\n-1\r\n1\r\n1\r\n0\r\n1\r\n1\r\n0\r\n-1\r\n2\r\n0\r\n0\r\n0\r\n2\r\n0\r\n2\r\n-1\r\n0\r\n1\r\n2\r\n1\r\n0\r\n1\r\n1\r\n-1\r\n2\r\n1\r\n0\r\n0\r\n1\r\n0\r\n2\r\n1\r\n2\r\n0\r\n2\r\n0\r\n-1\r\n-1\r\n0\r\n0\r\n1\r\n0\r\n2\r\n-1\r\n1\r\n2\r\n-1\r\n2\r\n-1\r\n1\r\n1\r\n0\r\n1\r\n1\r\n2\r\n2\r\n1\r\n1\r\n2\r\n"
            ],
            [
                "100\r\n1 2\r\n2 2\r\n1 2\r\n3 2\r\n1 2\r\n3 2\r\n3 2\r\n1 3\r\n1 3\r\n1 3\r\n2 2\r\n1 2\r\n3 1\r\n1 3\r\n3 2\r\n3 2\r\n3 3\r\n2 3\r\n3 2\r\n3 2\r\n3 1\r\n3 2\r\n2 3\r\n3 2\r\n2 3\r\n2 1\r\n3 1\r\n2 2\r\n3 3\r\n3 2\r\n3 2\r\n3 2\r\n2 3\r\n3 3\r\n1 1\r\n2 3\r\n1 1\r\n2 2\r\n1 1\r\n3 3\r\n1 1\r\n3 3\r\n2 3\r\n3 2\r\n3 3\r\n2 2\r\n1 3\r\n1 1\r\n1 1\r\n2 2\r\n3 3\r\n2 2\r\n1 2\r\n2 1\r\n3 3\r\n2 1\r\n1 2\r\n2 1\r\n1 3\r\n2 3\r\n2 3\r\n3 3\r\n3 1\r\n3 2\r\n1 3\r\n2 3\r\n1 3\r\n2 1\r\n1 2\r\n1 2\r\n3 3\r\n2 3\r\n2 3\r\n3 1\r\n3 3\r\n2 3\r\n2 1\r\n1 1\r\n1 2\r\n1 2\r\n3 2\r\n3 1\r\n2 3\r\n3 2\r\n1 2\r\n3 2\r\n2 3\r\n3 3\r\n2 1\r\n1 1\r\n1 2\r\n3 3\r\n3 1\r\n1 2\r\n3 3\r\n3 2\r\n1 2\r\n1 1\r\n3 1\r\n2 3\r\n",
                "-1\r\n1\r\n-1\r\n2\r\n-1\r\n2\r\n2\r\n-1\r\n-1\r\n-1\r\n1\r\n-1\r\n0\r\n-1\r\n2\r\n2\r\n1\r\n2\r\n2\r\n2\r\n0\r\n2\r\n2\r\n2\r\n2\r\n0\r\n0\r\n1\r\n1\r\n2\r\n2\r\n2\r\n2\r\n1\r\n0\r\n2\r\n0\r\n1\r\n0\r\n1\r\n0\r\n1\r\n2\r\n2\r\n1\r\n1\r\n-1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n-1\r\n0\r\n1\r\n0\r\n-1\r\n0\r\n-1\r\n2\r\n2\r\n1\r\n0\r\n2\r\n-1\r\n2\r\n-1\r\n0\r\n-1\r\n-1\r\n1\r\n2\r\n2\r\n0\r\n1\r\n2\r\n0\r\n0\r\n-1\r\n-1\r\n2\r\n0\r\n2\r\n2\r\n-1\r\n2\r\n2\r\n1\r\n0\r\n0\r\n-1\r\n1\r\n0\r\n-1\r\n1\r\n2\r\n-1\r\n0\r\n0\r\n2\r\n"
            ],
            [
                "100\r\n3 3\r\n2 1\r\n2 3\r\n3 2\r\n1 1\r\n1 1\r\n1 1\r\n2 3\r\n3 1\r\n2 2\r\n3 2\r\n1 1\r\n2 3\r\n3 3\r\n2 2\r\n2 3\r\n3 2\r\n3 3\r\n1 1\r\n2 1\r\n3 2\r\n2 3\r\n2 2\r\n1 1\r\n1 1\r\n2 2\r\n3 2\r\n2 1\r\n1 1\r\n2 1\r\n3 3\r\n1 1\r\n2 2\r\n1 1\r\n3 1\r\n1 1\r\n3 2\r\n2 3\r\n1 1\r\n3 3\r\n3 2\r\n2 2\r\n1 1\r\n3 2\r\n1 1\r\n3 3\r\n2 2\r\n2 1\r\n3 3\r\n1 1\r\n1 1\r\n1 1\r\n3 2\r\n1 1\r\n3 3\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n3 1\r\n3 2\r\n3 2\r\n2 1\r\n2 3\r\n1 1\r\n3 2\r\n1 1\r\n2 3\r\n1 1\r\n1 1\r\n2 3\r\n3 1\r\n2 3\r\n3 1\r\n3 3\r\n3 1\r\n2 2\r\n2 2\r\n3 3\r\n3 1\r\n2 2\r\n3 1\r\n1 1\r\n3 2\r\n1 1\r\n2 3\r\n3 3\r\n1 1\r\n3 1\r\n2 3\r\n2 3\r\n3 2\r\n2 1\r\n3 2\r\n3 1\r\n3 1\r\n3 1\r\n3 3\r\n",
                "1\r\n0\r\n2\r\n2\r\n0\r\n0\r\n0\r\n2\r\n0\r\n1\r\n2\r\n0\r\n2\r\n1\r\n1\r\n2\r\n2\r\n1\r\n0\r\n0\r\n2\r\n2\r\n1\r\n0\r\n0\r\n1\r\n2\r\n0\r\n0\r\n0\r\n1\r\n0\r\n1\r\n0\r\n0\r\n0\r\n2\r\n2\r\n0\r\n1\r\n2\r\n1\r\n0\r\n2\r\n0\r\n1\r\n1\r\n0\r\n1\r\n0\r\n0\r\n0\r\n2\r\n0\r\n1\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n2\r\n2\r\n0\r\n2\r\n0\r\n2\r\n0\r\n2\r\n0\r\n0\r\n2\r\n0\r\n2\r\n0\r\n1\r\n0\r\n1\r\n1\r\n1\r\n0\r\n1\r\n0\r\n0\r\n2\r\n0\r\n2\r\n1\r\n0\r\n0\r\n2\r\n2\r\n2\r\n0\r\n2\r\n0\r\n0\r\n0\r\n1\r\n"
            ]
        ]
    }
]