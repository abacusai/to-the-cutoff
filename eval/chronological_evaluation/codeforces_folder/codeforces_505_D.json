[
    {
        "name": "Mr. Kitayuta's Technology",
        "description": "Shuseki Kingdom is the world's leading nation for innovation and technology.\nThere are n cities in the kingdom, numbered from 1 to n. Thanks to Mr.\nKitayuta's research, it has finally become possible to construct teleportation\npipes between two cities. A teleportation pipe will connect two cities\nunidirectionally, that is, a teleportation pipe from city x to city y cannot\nbe used to travel from city y to city x. The transportation within each city\nis extremely developed, therefore if a pipe from city x to city y and a pipe\nfrom city y to city z are both constructed, people will be able to travel from\ncity x to city z instantly. Mr. Kitayuta is also involved in national\npolitics. He considers that the transportation between the m pairs of city\n(ai, bi) (1 \u2264 i \u2264 m) is important. He is planning to construct teleportation\npipes so that for each important pair (ai, bi), it will be possible to travel\nfrom city ai to city bi by using one or more teleportation pipes (but not\nnecessarily from city bi to city ai). Find the minimum number of teleportation\npipes that need to be constructed. So far, no teleportation pipe has been\nconstructed, and there is no other effective transportation between cities.\nInput The first line contains two space-separated integers n and m (2 \u2264 n \u2264\n10^5, 1 \u2264 m \u2264 10^5), denoting the number of the cities in Shuseki Kingdom and\nthe number of the important pairs, respectively. The following m lines\ndescribe the important pairs. The i-th of them (1 \u2264 i \u2264 m) contains two space-\nseparated integers ai and bi (1 \u2264 ai, bi \u2264 n, ai \u2260 bi), denoting that it must\nbe possible to travel from city ai to city bi by using one or more\nteleportation pipes (but not necessarily from city bi to city ai). It is\nguaranteed that all pairs (ai, bi) are distinct. Output Print the minimum\nrequired number of teleportation pipes to fulfill Mr. Kitayuta's purpose.\nExamples Input 4 5 1 2 1 3 1 4 2 3 2 4 Output 3 Input 4 6 1 2 1 4 2 3 2 4 3 2\n3 4 Output 4 Note For the first sample, one of the optimal ways to construct\npipes is shown in the image below: For the second sample, one of the optimal\nways is shown below:\n\n",
        "cf_contest_id": 505,
        "cf_index": "D",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 5\r\n1 2\r\n1 3\r\n1 4\r\n2 3\r\n2 4\r\n",
                "3\r\n"
            ],
            [
                "4 6\r\n1 2\r\n1 4\r\n2 3\r\n2 4\r\n3 2\r\n3 4\r\n",
                "4\r\n"
            ]
        ],
        "private_cases": [
            [
                "4 6\r\n1 2\r\n1 3\r\n1 4\r\n2 3\r\n2 4\r\n3 4\r\n",
                "3\r\n"
            ],
            [
                "3 6\r\n1 2\r\n1 3\r\n2 1\r\n2 3\r\n3 1\r\n3 2\r\n",
                "3\r\n"
            ],
            [
                "8 12\r\n6 1\r\n7 5\r\n2 5\r\n4 1\r\n6 3\r\n4 3\r\n5 7\r\n1 3\r\n5 2\r\n2 7\r\n4 6\r\n7 2\r\n",
                "6\r\n"
            ],
            [
                "2 1\r\n1 2\r\n",
                "1\r\n"
            ],
            [
                "10 4\r\n8 4\r\n9 8\r\n2 8\r\n8 1\r\n",
                "4\r\n"
            ],
            [
                "8 7\r\n6 3\r\n2 4\r\n3 7\r\n8 2\r\n4 8\r\n7 6\r\n3 2\r\n",
                "6\r\n"
            ],
            [
                "10 10\r\n10 6\r\n9 4\r\n7 8\r\n1 5\r\n3 10\r\n2 1\r\n4 9\r\n5 2\r\n10 3\r\n6 3\r\n",
                "9\r\n"
            ],
            [
                "7 8\r\n4 6\r\n2 1\r\n2 5\r\n7 4\r\n7 1\r\n7 2\r\n1 4\r\n2 4\r\n",
                "5\r\n"
            ],
            [
                "9 10\r\n6 4\r\n7 5\r\n9 3\r\n7 6\r\n4 8\r\n4 2\r\n9 8\r\n1 3\r\n5 1\r\n4 7\r\n",
                "9\r\n"
            ],
            [
                "10 4\r\n7 4\r\n6 8\r\n2 3\r\n3 8\r\n",
                "4\r\n"
            ],
            [
                "7 13\r\n6 1\r\n7 2\r\n3 7\r\n6 5\r\n3 6\r\n7 4\r\n3 5\r\n4 1\r\n3 1\r\n1 5\r\n1 6\r\n6 2\r\n2 4\r\n",
                "7\r\n"
            ],
            [
                "5 7\r\n4 3\r\n2 5\r\n2 1\r\n3 2\r\n1 3\r\n3 4\r\n1 4\r\n",
                "5\r\n"
            ],
            [
                "6 7\r\n5 4\r\n3 1\r\n4 2\r\n2 1\r\n5 2\r\n2 3\r\n2 6\r\n",
                "5\r\n"
            ],
            [
                "9 5\r\n5 8\r\n7 4\r\n7 2\r\n9 8\r\n9 5\r\n",
                "4\r\n"
            ],
            [
                "5 4\r\n2 5\r\n4 3\r\n5 2\r\n5 1\r\n",
                "4\r\n"
            ],
            [
                "7 7\r\n7 3\r\n5 4\r\n4 7\r\n5 7\r\n6 3\r\n5 6\r\n3 4\r\n",
                "5\r\n"
            ],
            [
                "8 5\r\n3 1\r\n7 5\r\n2 5\r\n8 6\r\n1 3\r\n",
                "5\r\n"
            ],
            [
                "5 3\r\n4 2\r\n2 1\r\n5 4\r\n",
                "3\r\n"
            ]
        ]
    }
]