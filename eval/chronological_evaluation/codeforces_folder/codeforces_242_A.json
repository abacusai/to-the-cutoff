[
    {
        "name": "Heads or Tails",
        "description": "Petya and Vasya are tossing a coin. Their friend Valera is appointed as a\njudge. The game is very simple. First Vasya tosses a coin x times, then Petya\ntosses a coin y times. If the tossing player gets head, he scores one point.\nIf he gets tail, nobody gets any points. The winner is the player with most\npoints by the end of the game. If boys have the same number of points, the\ngame finishes with a draw. At some point, Valera lost his count, and so he can\nnot say exactly what the score is at the end of the game. But there are things\nhe remembers for sure. He remembers that the entire game Vasya got heads at\nleast a times, and Petya got heads at least b times. Moreover, he knows that\nthe winner of the game was Vasya. Valera wants to use this information to know\nevery possible outcome of the game, which do not contradict his memories.\nInput The single line contains four integers x, y, a, b (1 \u2264 a \u2264 x \u2264 100, 1 \u2264\nb \u2264 y \u2264 100). The numbers on the line are separated by a space. Output In the\nfirst line print integer n \u2014 the number of possible outcomes of the game. Then\non n lines print the outcomes. On the i-th line print a space-separated pair\nof integers ci, di \u2014 the number of heads Vasya and Petya got in the i-th\noutcome of the game, correspondingly. Print pairs of integers (ci, di) in the\nstrictly increasing order. Let us remind you that the pair of numbers (p1, q1)\nis less than the pair of numbers (p2, q2), if p1 < p2, or p1 = p2 and also q1\n< q2. Examples Input 3 2 1 1 Output 3 2 1 3 1 3 2 Input 2 4 2 2 Output 0\n\n",
        "cf_contest_id": 242,
        "cf_index": "A",
        "cf_rating": 1100,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2 1 1\r\n",
                "3\n2 1\n3 1\n3 2\n"
            ],
            [
                "2 4 2 2\r\n",
                "0\n"
            ]
        ],
        "private_cases": [
            [
                "1 1 1 1\r\n",
                "0\n"
            ],
            [
                "4 5 2 3\r\n",
                "1\n4 3\n"
            ],
            [
                "10 6 3 4\r\n",
                "15\n5 4\n6 4\n6 5\n7 4\n7 5\n7 6\n8 4\n8 5\n8 6\n9 4\n9 5\n9 6\n10 4\n10 5\n10 6\n"
            ],
            [
                "10 10 1 1\r\n",
                "45\n2 1\n3 1\n3 2\n4 1\n4 2\n4 3\n5 1\n5 2\n5 3\n5 4\n6 1\n6 2\n6 3\n6 4\n6 5\n7 1\n7 2\n7 3\n7 4\n7 5\n7 6\n8 1\n8 2\n8 3\n8 4\n8 5\n8 6\n8 7\n9 1\n9 2\n9 3\n9 4\n9 5\n9 6\n9 7\n9 8\n10 1\n10 2\n10 3\n10 4\n10 5\n10 6\n10 7\n10 8\n10 9\n"
            ],
            [
                "9 7 4 7\r\n",
                "2\n8 7\n9 7\n"
            ],
            [
                "5 5 3 2\r\n",
                "6\n3 2\n4 2\n4 3\n5 2\n5 3\n5 4\n"
            ],
            [
                "10 10 1 1\r\n",
                "45\n2 1\n3 1\n3 2\n4 1\n4 2\n4 3\n5 1\n5 2\n5 3\n5 4\n6 1\n6 2\n6 3\n6 4\n6 5\n7 1\n7 2\n7 3\n7 4\n7 5\n7 6\n8 1\n8 2\n8 3\n8 4\n8 5\n8 6\n8 7\n9 1\n9 2\n9 3\n9 4\n9 5\n9 6\n9 7\n9 8\n10 1\n10 2\n10 3\n10 4\n10 5\n10 6\n10 7\n10 8\n10 9\n"
            ],
            [
                "20 10 1 8\r\n",
                "33\n9 8\n10 8\n10 9\n11 8\n11 9\n11 10\n12 8\n12 9\n12 10\n13 8\n13 9\n13 10\n14 8\n14 9\n14 10\n15 8\n15 9\n15 10\n16 8\n16 9\n16 10\n17 8\n17 9\n17 10\n18 8\n18 9\n18 10\n19 8\n19 9\n19 10\n20 8\n20 9\n20 10\n"
            ],
            [
                "10 20 4 6\r\n",
                "10\n7 6\n8 6\n8 7\n9 6\n9 7\n9 8\n10 6\n10 7\n10 8\n10 9\n"
            ],
            [
                "100 90 100 83\r\n",
                "8\n100 83\n100 84\n100 85\n100 86\n100 87\n100 88\n100 89\n100 90\n"
            ],
            [
                "70 80 30 80\r\n",
                "0\n"
            ]
        ]
    }
]