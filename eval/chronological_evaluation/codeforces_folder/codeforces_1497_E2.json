[
    {
        "name": "Square-free division (hard version)",
        "description": "This is the hard version of the problem. The only difference is that in this\nversion \n    0 \n    \u2264 k \n    \u2264 20\n. There is an array \n    a_1, a_2, \n    \u2026,\n    a_n\n of \n    n\n positive integers. You should divide it into a minimal\nnumber of continuous segments, such that in each segment there are no two\nnumbers (on different positions), whose product is a perfect square. Moreover,\nit is allowed to do at most \n    k\n such operations before the division:\nchoose a number in the array and change its value to any positive integer.\nWhat is the minimum number of continuous segments you should use if you will\nmake changes optimally? Input The first line contains a single integer \n    t\n\n\n    (1 \n    \u2264 t \n    \u2264 1000)\n \u2014 the number of test cases. The first line of\neach test case contains two integers \n    n\n, \n    k\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n, \n    0 \n    \u2264 k \n    \u2264 20\n). The second line of each test\ncase contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i\n    \n    \u2264 10^7\n). It's guaranteed that the sum of \n    n\n over all test cases\ndoes not exceed \n    2 \n    \u00b7 10^5\n. Output For each test case print a single\ninteger \u2014 the answer to the problem. Example Input 3 5 2 18 6 2 4 1 11 4 6 2 2\n8 9 1 3 6 3 9 7 1 0 1 Output 1 2 1 Note In the first test case it is possible\nto change the array this way: \n    [\n    3, 6, 2, 4,\n    \n    5]\n (changed elements are underlined). After that the array\ndoes not need to be divided, so the answer is \n    1\n. In the second test case\nit is possible to change the array this way: \n    [6, 2, \n    3, 8, 9,\n    \n    5, 3, 6, \n    10, \n    11, 7]\n. After that\nsuch division is optimal: \n    [6, 2, 3]\n \n    [8, 9, 5, 3, 6, 10, 11, 7]\n\n\n",
        "cf_contest_id": 1497,
        "cf_index": "E2",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp",
            "greedy",
            "math",
            "number theory",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n5 2\r\n18 6 2 4 1\r\n11 4\r\n6 2 2 8 9 1 3 6 3 9 7\r\n1 0\r\n1\r\n",
                "1\r\n2\r\n1\r\n"
            ]
        ],
        "private_cases": []
    }
]