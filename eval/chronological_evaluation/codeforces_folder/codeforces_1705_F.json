[
    {
        "name": "Mark and the Online Exam",
        "description": "Mark is administering an online exam consisting of \n    n\n true-false\nquestions. However, he has lost all answer keys. He needs a way to retrieve\nthe answers before his client gets infuriated. Fortunately, he has access to\nthe grading system. Thus, for each query, you can input the answers to all\n\n    n\n questions, and the grading system will output how many of them are\ncorrect. He doesn't have much time, so he can use the grading system at most\n\n    675\n times. Help Mark determine the answer keys. Note that answer keys\nare fixed in advance and will not change depending on your queries. Input The\nfirst line of the input consists of an integer \n    n\n (\n    1\n    \u2264 n\n    \u2264\n    1000\n) \u2014 the number of questions. Interaction After reading \n    n\n, you can\nstart making queries to the grading system. For each query, print a line\ncontaining a string \n    s\n of length \n    n\n consisting of only letters 'T'\nand 'F'. \n    s_i =\n'T' means that you answer the \n    i\n-question true.\n\n    s_i =\n'F' means that you answer the \n    i\n-question false. After a\nsuccessful query, you should read an integer \n    k\n (\n    0\n    \u2264 k\n    \u2264 n\n)\n\u2014 the number of correct answers. If you read \n    n\n, then you found the\nanswers, and your program should not make any more queries. If your program\nreads \n    k = -1\n instead of the number of correct answers, it means that you\neither made an invalid query or exceeded the query limits. Exit immediately\nafter receiving \n    -1\n, and you will see Wrong answer verdict. Otherwise,\nyou can get an arbitrary verdict because your solution will continue to read\nfrom a closed stream. After printing a query do not forget to output end of\nline and flush the output. Otherwise, you will get Idleness limit exceeded. To\ndo this, use: fflush(stdout) or cout.flush() in C++; System.out.flush() in\nJava; flush(output) in Pascal; stdout.flush() in Python; see documentation for\nother languages. Hacks To hack, use the following format: The first line\ncontains an integer \n    n\n (\n    1\n    \u2264 n\n    \u2264 1000\n) \u2014 the number of\nquestions. The second line contains a string \n    s\n of length \n    n\n\nconsisting of only 'T' and 'F' \u2014 the answer key. Examples Input 3 1 3 Output\nFTT TTF Input 4 0 3 4 Output FTFF TTTT TFTT Note The empty lines in the\nexample are just for you to better understand the interaction process. You're\nnot required to print them. In the first example, there are \n    3\n questions,\nand the answer to each question is 'true', 'true', and 'false', respectively.\nThe first query, guessing the answers to be 'false', 'true', and 'true',\nrespectively, guesses only one question \u2014 the \n    2\n-nd question \u2014 correctly.\nThen, in the second query, the program correctly guesses the answer key. The\ninteraction ends here. In the second example, there are \n    4\n questions, and\nthe answer to each question is 'true', 'false', 'true', and 'true',\nrespectively. The first query guessed none of the questions correctly,\nresulting in the answer \n    0\n. The second query guessed the \n    1\n-st,\n\n    3\n-rd, and \n    4\n-th question correctly, resulting in the answer\n\n    3\n. In the third query, the program correctly guesses the answer key.\nThen, the interaction ends.\n\n",
        "cf_contest_id": 1705,
        "cf_index": "F",
        "cf_rating": 2900,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "constructive algorithms",
            "interactive",
            "probabilities"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\nTTF\r\n",
                "5\r\nTTT 2\r\nTFT 1\r\nFFF 1\r\nFTT 1\r\nTTF 3\r\n"
            ],
            [
                "4\r\nTFTT\r\n",
                "6\r\nTTTT 3\r\nTFTF 3\r\nFFFT 2\r\nFTTF 1\r\nTTTF 2\r\nTFTT 4\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\nT\r\n",
                "1\r\nT 1\r\n"
            ],
            [
                "1\r\nF\r\n",
                "3\r\nT 0\r\nT 0\r\nF 1\r\n"
            ],
            [
                "2\r\nTT\r\n",
                "1\r\nTT 2\r\n"
            ],
            [
                "2\r\nTF\r\n",
                "2\r\nTT 1\r\nTF 2\r\n"
            ],
            [
                "2\r\nFT\r\n",
                "3\r\nTT 1\r\nTF 0\r\nFT 2\r\n"
            ],
            [
                "2\r\nFF\r\n",
                "5\r\nTT 0\r\nTF 1\r\nFT 1\r\nTF 1\r\nFF 2\r\n"
            ],
            [
                "3\r\nTTT\r\n",
                "1\r\nTTT 3\r\n"
            ],
            [
                "3\r\nTFT\r\n",
                "2\r\nTTT 2\r\nTFT 3\r\n"
            ],
            [
                "3\r\nTFF\r\n",
                "5\r\nTTT 1\r\nTFT 2\r\nFFF 2\r\nFTT 0\r\nTFF 3\r\n"
            ],
            [
                "3\r\nFTT\r\n",
                "4\r\nTTT 2\r\nTFT 1\r\nFFF 1\r\nFTT 3\r\n"
            ],
            [
                "3\r\nFTF\r\n",
                "5\r\nTTT 1\r\nTFT 0\r\nFFF 2\r\nFTT 2\r\nFTF 3\r\n"
            ],
            [
                "3\r\nFFT\r\n",
                "5\r\nTTT 1\r\nTFT 2\r\nFFF 2\r\nFTT 2\r\nFFT 3\r\n"
            ],
            [
                "3\r\nFFF\r\n",
                "3\r\nTTT 0\r\nTFT 1\r\nFFF 3\r\n"
            ],
            [
                "10\r\nFFFFFFFTFF\r\n",
                "10\r\nTTTTTTTTTT 1\r\nTFTFTFTFTF 4\r\nFFFTTTTTTT 4\r\nFTTFTFTFTF 4\r\nTTTFFFTTTT 4\r\nTFTTFFTFTF 4\r\nTTTTTTFFFT 2\r\nTFTFTFFTTF 6\r\nTTTTTTTTTF 2\r\nFFFFFFFTFF 10\r\n"
            ],
            [
                "10\r\nFFFFFFFFTT\r\n",
                "10\r\nTTTTTTTTTT 2\r\nTFTFTFTFTF 5\r\nFFFTTTTTTT 5\r\nFTTFTFTFTF 5\r\nTTTFFFTTTT 5\r\nTFTTFFTFTF 5\r\nTTTTTTFFFT 3\r\nTFTFTFFTTF 5\r\nTTTTTTTTTF 1\r\nFFFFFFFFTT 10\r\n"
            ],
            [
                "10\r\nFFFTFFFTTF\r\n",
                "10\r\nTTTTTTTTTT 3\r\nTFTFTFTFTF 4\r\nFFFTTTTTTT 6\r\nFTTFTFTFTF 4\r\nTTTFFFTTTT 4\r\nTFTTFFTFTF 6\r\nTTTTTTFFFT 2\r\nTFTFTFFTTF 6\r\nTTTTTTTTTF 4\r\nFFFTFFFTTF 10\r\n"
            ],
            [
                "10\r\nTFFTTFTFFF\r\n",
                "10\r\nTTTTTTTTTT 4\r\nTFTFTFTFTF 7\r\nFFFTTTTTTT 5\r\nFTTFTFTFTF 5\r\nTTTFFFTTTT 3\r\nTFTTFFTFTF 7\r\nTTTTTTFFFT 5\r\nTFTFTFFTTF 5\r\nTTTTTTTTTF 5\r\nTFFTTFTFFF 10\r\n"
            ],
            [
                "10\r\nTFTFFTTFTF\r\n",
                "10\r\nTTTTTTTTTT 5\r\nTFTFTFTFTF 8\r\nFFFTTTTTTT 4\r\nFTTFTFTFTF 6\r\nTTTFFFTTTT 6\r\nTFTTFFTFTF 8\r\nTTTTTTFFFT 4\r\nTFTFTFFTTF 6\r\nTTTTTTTTTF 6\r\nTFTFFTTFTF 10\r\n"
            ],
            [
                "10\r\nFFFTTTTFTT\r\n",
                "10\r\nTTTTTTTTTT 6\r\nTFTFTFTFTF 5\r\nFFFTTTTTTT 9\r\nFTTFTFTFTF 5\r\nTTTFFFTTTT 3\r\nTFTTFFTFTF 5\r\nTTTTTTFFFT 5\r\nTFTFTFFTTF 3\r\nTTTTTTTTTF 5\r\nFFFTTTTFTT 10\r\n"
            ],
            [
                "10\r\nTTTTFTTTFF\r\n",
                "10\r\nTTTTTTTTTT 7\r\nTFTFTFTFTF 4\r\nFFFTTTTTTT 4\r\nFTTFTFTFTF 4\r\nTTTFFFTTTT 6\r\nTFTTFFTFTF 6\r\nTTTTTTFFFT 6\r\nTFTFTFFTTF 4\r\nTTTTTTTTTF 8\r\nTTTTFTTTFF 10\r\n"
            ],
            [
                "10\r\nTTTFTTTTFT\r\n",
                "10\r\nTTTTTTTTTT 8\r\nTFTFTFTFTF 5\r\nFFFTTTTTTT 5\r\nFTTFTFTFTF 5\r\nTTTFFFTTTT 7\r\nTFTTFFTFTF 3\r\nTTTTTTFFFT 7\r\nTFTFTFFTTF 5\r\nTTTTTTTTTF 7\r\nTTTFTTTTFT 10\r\n"
            ],
            [
                "10\r\nTTTTTTTTFT\r\n",
                "10\r\nTTTTTTTTTT 9\r\nTFTFTFTFTF 4\r\nFFFTTTTTTT 6\r\nFTTFTFTFTF 4\r\nTTTFFFTTTT 6\r\nTFTTFFTFTF 4\r\nTTTTTTFFFT 8\r\nTFTFTFFTTF 4\r\nTTTTTTTTTF 8\r\nTTTTTTTTFT 10\r\n"
            ]
        ]
    }
]