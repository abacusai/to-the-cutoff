[
    {
        "name": "Xenia and Weights",
        "description": "Xenia has a set of weights and pan scales. Each weight has an integer weight\nfrom 1 to 10 kilos. Xenia is going to play with scales and weights a little.\nFor this, she puts weights on the scalepans, one by one. The first weight goes\non the left scalepan, the second weight goes on the right scalepan, the third\none goes on the left scalepan, the fourth one goes on the right scalepan and\nso on. Xenia wants to put the total of m weights on the scalepans. Simply\nputting weights on the scales is not interesting, so Xenia has set some rules.\nFirst, she does not put on the scales two consecutive weights of the same\nweight. That is, the weight that goes i-th should be different from the (i +\n1)-th weight for any i (1 \u2264 i < m). Second, every time Xenia puts a weight on\nsome scalepan, she wants this scalepan to outweigh the other one. That is, the\nsum of the weights on the corresponding scalepan must be strictly greater than\nthe sum on the other pan. You are given all types of weights available for\nXenia. You can assume that the girl has an infinite number of weights of each\nspecified type. Your task is to help Xenia lay m weights on \u200b\u200bthe scales or to\nsay that it can't be done. Input The first line contains a string consisting\nof exactly ten zeroes and ones: the i-th (i \u2265 1) character in the line equals\n\"1\" if Xenia has i kilo weights, otherwise the character equals \"0\". The\nsecond line contains integer m (1 \u2264 m \u2264 1000). Output In the first line print\n\"YES\", if there is a way to put m weights on the scales by all rules.\nOtherwise, print in the first line \"NO\". If you can put m weights on the\nscales, then print in the next line m integers \u2014 the weights' weights in the\norder you put them on the scales. If there are multiple solutions, you can\nprint any of them. Examples Input 0000000101 3 Output YES 8 10 8 Input\n1000000000 2 Output NO\n\n",
        "cf_contest_id": 339,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "graphs",
            "greedy",
            "shortest paths"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "0000000101\r\n3\r\n",
                "YES\r\n8 10 8 "
            ],
            [
                "1000000000\r\n2\r\n",
                "NO"
            ]
        ],
        "private_cases": [
            [
                "1000000000\r\n1\r\n",
                "YES\r\n1 "
            ],
            [
                "1001100000\r\n11\r\n",
                "NO"
            ],
            [
                "0100000001\r\n10\r\n",
                "NO"
            ],
            [
                "0110110000\r\n12\r\n",
                "YES\r\n2 3 2 3 5 6 5 3 2 3 5 6 "
            ],
            [
                "1101011011\r\n229\r\n",
                "YES\r\n1 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 2 4 6 4 "
            ],
            [
                "0111100111\r\n32\r\n",
                "YES\r\n2 3 2 3 4 3 2 3 4 3 2 3 4 3 2 3 4 3 2 3 4 3 2 3 4 3 2 3 4 3 2 3 "
            ],
            [
                "0000001100\r\n52\r\n",
                "NO"
            ],
            [
                "0000000000\r\n1\r\n",
                "NO"
            ],
            [
                "0000000001\r\n1\r\n",
                "YES\r\n10 "
            ],
            [
                "0000010000\r\n2\r\n",
                "NO"
            ],
            [
                "1100000000\r\n3\r\n",
                "NO"
            ],
            [
                "1110010000\r\n1000\r\n",
                "NO"
            ],
            [
                "1101000001\r\n1000\r\n",
                "NO"
            ],
            [
                "1110000000\r\n4\r\n",
                "YES\r\n2 3 2 3 "
            ],
            [
                "1011000000\r\n6\r\n",
                "YES\r\n3 4 3 4 3 4 "
            ],
            [
                "1000000011\r\n18\r\n",
                "YES\r\n9 10 9 10 9 10 9 10 9 10 9 10 9 10 9 10 9 10 "
            ],
            [
                "0000000101\r\n4\r\n",
                "YES\r\n8 10 8 10 "
            ],
            [
                "0100101000\r\n10\r\n",
                "YES\r\n5 7 5 7 5 2 5 7 5 7 "
            ]
        ]
    }
]