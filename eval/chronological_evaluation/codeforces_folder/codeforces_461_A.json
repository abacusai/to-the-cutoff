[
    {
        "name": "Appleman and Toastman",
        "description": "Appleman and Toastman play a game. Initially Appleman gives one group of n\nnumbers to the Toastman, then they start to complete the following tasks: Each\ntime Toastman gets a group of numbers, he sums up all the numbers and adds\nthis sum to the score. Then he gives the group to the Appleman. Each time\nAppleman gets a group consisting of a single number, he throws this group out.\nEach time Appleman gets a group consisting of more than one number, he splits\nthe group into two non-empty groups (he can do it in any way) and gives each\nof them to Toastman. After guys complete all the tasks they look at the score\nvalue. What is the maximum possible value of score they can get? Input The\nfirst line contains a single integer n (1 \u2264 n \u2264 3\u00b710^5). The second line\ncontains n integers a1, a2, ..., an (1 \u2264 ai \u2264 10^6) \u2014 the initial group that\nis given to Toastman. Output Print a single integer \u2014 the largest possible\nscore. Examples Input 3 3 1 5 Output 26 Input 1 10 Output 10 Note Consider the\nfollowing situation in the first example. Initially Toastman gets group [3, 1,\n5] and adds 9 to the score, then he give the group to Appleman. Appleman\nsplits group [3, 1, 5] into two groups: [3, 5] and [1]. Both of them should be\ngiven to Toastman. When Toastman receives group [1], he adds 1 to score and\ngives the group to Appleman (he will throw it out). When Toastman receives\ngroup [3, 5], he adds 8 to the score and gives the group to Appleman. Appleman\nsplits [3, 5] in the only possible way: [5] and [3]. Then he gives both groups\nto Toastman. When Toastman receives [5], he adds 5 to the score and gives the\ngroup to Appleman (he will throws it out). When Toastman receives [3], he adds\n3 to the score and gives the group to Appleman (he will throws it out).\nFinally Toastman have added 9 + 1 + 8 + 5 + 3 = 26 to the score. This is the\noptimal sequence of actions.\n\n",
        "cf_contest_id": 461,
        "cf_index": "A",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3 1 5\r\n",
                "26\r\n"
            ],
            [
                "1\r\n10\r\n",
                "10\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n8 10 2 5 6 2 4 7 2 1\r\n",
                "376\r\n"
            ],
            [
                "10\r\n171308 397870 724672 431255 228496 892002 542924 718337 888642 161821\r\n",
                "40204082\r\n"
            ],
            [
                "10\r\n1 2 2 2 4 5 6 7 8 10\r\n",
                "376\r\n"
            ],
            [
                "10\r\n161821 171308 228496 397870 431255 542924 718337 724672 888642 892002\r\n",
                "40204082\r\n"
            ],
            [
                "1\r\n397870\r\n",
                "397870\r\n"
            ],
            [
                "1\r\n1000000\r\n",
                "1000000\r\n"
            ],
            [
                "10\r\n10 8 7 6 5 4 2 2 2 1\r\n",
                "376\r\n"
            ],
            [
                "10\r\n892002 888642 724672 718337 542924 431255 397870 228496 171308 161821\r\n",
                "40204082\r\n"
            ],
            [
                "10\r\n5 2 6 10 10 10 10 2 2 5\r\n",
                "485\r\n"
            ],
            [
                "10\r\n431255 724672 228496 397870 397870 397870 397870 724672 888642 431255\r\n",
                "36742665\r\n"
            ],
            [
                "10\r\n2 2 2 5 5 6 10 10 10 10\r\n",
                "485\r\n"
            ],
            [
                "10\r\n228496 397870 397870 397870 397870 431255 431255 724672 724672 888642\r\n",
                "36742665\r\n"
            ],
            [
                "10\r\n10 10 10 10 6 5 5 2 2 2\r\n",
                "485\r\n"
            ],
            [
                "10\r\n888642 724672 724672 431255 431255 397870 397870 397870 397870 228496\r\n",
                "36742665\r\n"
            ],
            [
                "10\r\n10 10 10 10 10 10 10 10 10 10\r\n",
                "640\r\n"
            ],
            [
                "10\r\n1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000\r\n",
                "64000000\r\n"
            ],
            [
                "1\r\n397870\r\n",
                "397870\r\n"
            ],
            [
                "2\r\n1 2\r\n",
                "6\r\n"
            ],
            [
                "2\r\n2 3\r\n",
                "10\r\n"
            ],
            [
                "2\r\n1 1\r\n",
                "4\r\n"
            ]
        ]
    }
]