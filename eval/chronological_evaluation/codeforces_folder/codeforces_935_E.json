[
    {
        "name": "Fafa and Ancient Mathematics",
        "description": "Ancient Egyptians are known to have understood difficult concepts in\nmathematics. The ancient Egyptian mathematician Ahmes liked to write a kind of\narithmetic expressions on papyrus paper which he called as Ahmes arithmetic\nexpression. An Ahmes arithmetic expression can be defined as: \"d\" is an Ahmes\narithmetic expression, where d is a one-digit positive integer; \"(E1 op E2)\"\nis an Ahmes arithmetic expression, where E1 and E2 are valid Ahmes arithmetic\nexpressions (without spaces) and op is either plus ( + ) or minus ( - ). For\nexample 5, (1-1) and ((1+(2-3))-5) are valid Ahmes arithmetic expressions.On\nhis trip to Egypt, Fafa found a piece of papyrus paper having one of these\nAhmes arithmetic expressions written on it. Being very ancient, the papyrus\npiece was very worn out. As a result, all the operators were erased, keeping\nonly the numbers and the brackets. Since Fafa loves mathematics, he decided to\nchallenge himself with the following task: Given the number of plus and minus\noperators in the original expression, find out the maximum possible value for\nthe expression on the papyrus paper after putting the plus and minus operators\nin the place of the original erased operators. Input The first line contains a\nstring E (1 \u2264 |E| \u2264 10^4) \u2014 a valid Ahmes arithmetic expression. All operators\nare erased and replaced with '?'. The second line contains two space-separated\nintegers P and M (0 \u2264 min(P, M) \u2264 100) \u2014 the number of plus and minus\noperators, respectively. It is guaranteed that P + M = the number of erased\noperators. Output Print one line containing the answer to the problem.\nExamples Input (1?1) 1 0 Output 2 Input (2?(1?2)) 1 1 Output 1 Input\n((1?(5?7))?((6?2)?7)) 3 2 Output 18 Input ((1?(5?7))?((6?2)?7)) 2 3 Output 16\nNote The first sample will be (1 + 1) = 2. The second sample will be (2 + (1 -\n2)) = 1. The third sample will be ((1 - (5 - 7)) + ((6 + 2) + 7)) = 18. The\nfourth sample will be ((1 + (5 + 7)) - ((6 - 2) - 7)) = 16.\n\n",
        "cf_contest_id": 935,
        "cf_index": "E",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dp",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "(1?1)\r\n1 0\r\n",
                "2"
            ],
            [
                "(2?(1?2))\r\n1 1\r\n",
                "1"
            ],
            [
                "((1?(5?7))?((6?2)?7))\r\n3 2\r\n",
                "18"
            ],
            [
                "((1?(5?7))?((6?2)?7))\r\n2 3\r\n",
                "16"
            ]
        ],
        "private_cases": [
            [
                "((4?3)?(((2?(4?((4?((2?(3?(7?3)))?(((((3?(6?2))?3)?(((((6?6)?(1?5))?((8?8)?1))?(5?((7?((6?((((3?8)?8)?(8?5))?7))?8))?((8?(2?8))?3))))?6))?(8?(7?5)))?8)))?((((7?(4?3))?4)?5)?((1?(((2?2)?((((4?((7?6)?(1?4)))?(8?(1?(((1?3)?(((2?2)?(3?(8?(9?((2?(4?6))?(7?8))))))?(9?(7?9))))?(7?3)))))?((2?((2?((8?6)?1))?(3?1)))?(7?1)))?5))?((((6?(9?(((5?4)?7)?((5?8)?8))))?5)?7)?(2?2))))?4)))))?2)?(7?(4?((6?6)?6)))))\r\n50 49\r\n",
                "423"
            ],
            [
                "(((6?((2?(9?(3?(2?((3?((1?(1?(6?(9?(((6?((3?(((((6?(1?(1?((((2?(1?(1?((6?(6?(4?(8?((9?(((7?((5?(9?(3?((((7?((9?(4?(8?(((((9?(1?(((8?(6?(6?((5?(((5?(7?((((1?((1?(4?((7?(8?(((3?((((4?((((((1?((3?((5?1)?9))?3))?9)?7)?7)?2)?8))?9)?1)?6))?9)?2)))?6)))?7))?4)?1)?1)))?6)?1))?9))))?8)?7)))?9)?3)?7)?7))))?1))?9)?6)?1))))?2))?2)?6))?6)))))?4))))?2)?3)?8))))?9)?1)?3)?1))?3))?9)?4)))))?2))?7)))))?4))?1)?7)\r\n50 49\r\n",
                "422"
            ],
            [
                "(4?(((3?2)?((((((4?(4?((2?3)?((7?((3?3)?(6?(((2?(3?6))?6)?(((1?5)?8)?(((8?1)?(5?7))?6))))))?(3?8)))))?((8?8)?5))?(7?(8?((((8?((((2?(8?(((3?6)?8)?7)))?5)?(8?(7?((4?(3?4))?(5?((1?(2?((2?(4?7))?(((6?1)?(4?(8?1)))?(1?(3?(((2?(2?(3?(8?9))))?(((((2?4)?6)?7)?(8?9))?7))?(((9?(7?3))?2)?((((((2?8)?6)?(1?3))?1)?7)?1)))))))))?(5?(6?(9?(5?4))))))))))?7))?5)?(8?(8?((5?7)?2))))?2))))?4)?(2?((7?4)?6)))?6))?6))\r\n50 49\r\n",
                "439"
            ],
            [
                "8\r\n0 0\r\n",
                "8"
            ],
            [
                "(9?((1?(3?(5?((9?7)?(((((4?5)?2)?1)?(7?6))?(3?(9?7)))))))?(1?4)))\r\n0 16\r\n",
                "11"
            ],
            [
                "(((4?7)?(9?((6?(3?2))?((6?3)?7))))?((5?((7?(7?(8?3)))?(4?2)))?2))\r\n16 0\r\n",
                "85"
            ],
            [
                "((((3?(2?((5?(((((((5?(5?6))?(((5?8)?(8?(2?2)))?(((8?(2?(((8?2)?3)?(4?8))))?(((((5?((3?1)?((3?8)?4)))?4)?5)?(6?2))?3))?(2?(((1?((((((9?1)?4)?7)?6)?(2?((((4?((((((1?8)?8)?(9?5))?(8?(3?((5?(5?2))?9))))?8)?5))?3)?(((5?(8?(2?(6?(6?(2?((4?(8?8))?(5?2))))))))?6)?3))?1)))?((9?(7?((7?(2?1))?6)))?4)))?((1?((((3?(5?(((2?6)?(7?((5?4)?(6?8))))?((2?(5?4))?9))))?((3?9)?7))?6)?8))?(2?9)))?6)))))?1)?4)?2)?(8?4))?(6?6)))?(2?((5?(9?8))?6)))))?9)?(4?4))?((7?2)?5))\r\n100 12\r\n",
                "550"
            ],
            [
                "((((4?6)?9)?((5?(7?1))?(6?(4?(((((((7?3)?7)?(((((8?(6?7))?((1?2)?(5?8)))?8)?7)?4))?6)?7)?1)?((7?(2?((1?(((8?(((((2?7)?(((((3?6)?3)?(((((9?5)?7)?(1?(5?5)))?(8?((3?(1?2))?((8?5)?(7?((9?((9?8)?7))?1))))))?1))?1)?(9?2)))?((7?5)?((9?(4?(9?6)))?(8?(((5?7)?2)?(6?(3?8)))))))?(((4?(2?2))?(7?9))?((7?((((4?(3?(7?3)))?8)?3)?(5?(((9?2)?(9?((((2?(7?3))?(3?(1?(9?(6?(9?8))))))?2)?2)))?2))))?((9?((2?(2?3))?((9?((7?4)?1))?5)))?((((9?6)?3)?(4?1))?7)))))?5))?4)?4))?7)))?5))))))?1)\r\n2 114\r\n",
                "86"
            ]
        ]
    }
]