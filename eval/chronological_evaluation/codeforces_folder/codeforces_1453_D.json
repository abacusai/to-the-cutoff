[
    {
        "name": "Checkpoints",
        "description": "Gildong is developing a game consisting of \n    n\n stages numbered from\n\n    1\n to \n    n\n. The player starts the game from the \n    1\n-st stage and\nshould beat the stages in increasing order of the stage number. The player\nwins the game after beating the \n    n\n-th stage. There is at most one\ncheckpoint on each stage, and there is always a checkpoint on the \n    1\n-st\nstage. At the beginning of the game, only the checkpoint on the \n    1\n-st\nstage is activated, and all other checkpoints are deactivated. When the player\ngets to the \n    i\n-th stage that has a checkpoint, that checkpoint is\nactivated. For each try of a stage, the player can either beat the stage or\nfail the stage. If they beat the \n    i\n-th stage, the player is moved to the\n\n    i+1\n-st stage. If they fail the \n    i\n-th stage, the player is moved to\nthe most recent checkpoint they activated, and they have to beat the stages\nafter that checkpoint again. For example, assume that \n    n = 4\n and the\ncheckpoints are on the \n    1\n-st and \n    3\n-rd stages. The player starts at\nthe \n    1\n-st stage. If they fail on the \n    1\n-st stage, they need to retry\nthe \n    1\n-st stage because the checkpoint on the \n    1\n-st stage is the\nmost recent checkpoint they activated. If the player beats the \n    1\n-st\nstage, they're moved to the \n    2\n-nd stage. If they fail it, they're sent\nback to the \n    1\n-st stage again. If they beat both the \n    1\n-st stage and\nthe \n    2\n-nd stage, they get to the \n    3\n-rd stage and the checkpoint on\nthe \n    3\n-rd stage is activated. Now whenever they fail on the \n    3\n-rd\nstage, or the \n    4\n-th stage after beating the \n    3\n-rd stage, they're\nsent back to the \n    3\n-rd stage. If they beat both the \n    3\n-rd stage and\nthe \n    4\n-th stage, they win the game. Gildong is going to build the stages\nto have equal difficulty. He wants you to find any series of stages and\ncheckpoints using at most \n    2000\n stages, where the expected number of\ntries over all stages is exactly \n    k\n, for a player whose probability of\nbeating each stage is exactly \n    12\n. Input Each test contains\none or more test cases. The first line contains the number of test cases\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 50\n). Each test case contains exactly one line.\nThe line consists of a single integer \n    k\n (\n    1 \n    \u2264 k \n    \u2264 10^18\n)\n\u2014 the expected number of tries over all stages Gildong wants to set for a\nplayer whose probability of beating each stage is exactly\n\n    12\n. Output For each test case, print \n    -1\n if it's\nimpossible to construct such a series of stages and checkpoints using at most\n\n    2000\n stages. Otherwise, print two lines. The first line should contain a\nsingle integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2000\n) \u2013 the number of stages.\nThe second line should contain \n    n\n integers, where the \n    i\n-th integer\nrepresents whether the \n    i\n-th stage has a checkpoint. The \n    i\n-th\ninteger should be \n    0\n if the \n    i\n-th stage doesn't have a checkpoint,\nand \n    1\n if it has a checkpoint. Note that the first integer must be\n\n    1\n according to the description. Example Input 4 1 2 8 12 Output -1 1 1 4\n1 1 1 1 5 1 1 0 1 1 Note In the first and the second case, we can see that the\n'easiest' series of stages is to have \n    1\n stage with a checkpoint. This\nalready requires \n    2\n tries in expectation, so it is impossible to make it\nto require only \n    1\n try. In the third case, it takes \n    2\n tries in\nexpectation to beat each stage, and the player can always retry that stage\nwithout falling back to one of the previous stages if they fail it. Therefore\nthe total expected number of tries is \n    8\n. Note that there exists an\nanswer with fewer stages, but you are not required to minimize the number of\nstages used.\n\n",
        "cf_contest_id": 1453,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "greedy",
            "math",
            "probabilities"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4\r\n1\r\n2\r\n8\r\n12\r\n",
                "-1\r\n1\r\n1\r\n3\r\n1 0 1\r\n4\r\n1 0 1 0\r\n"
            ]
        ],
        "private_cases": [
            [
                "50\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n",
                "-1\r\n1\r\n1\r\n-1\r\n2\r\n1 1\r\n-1\r\n2\r\n1 0\r\n-1\r\n3\r\n1 0 1\r\n-1\r\n4\r\n1 0 1 1\r\n-1\r\n4\r\n1 0 1 0\r\n-1\r\n3\r\n1 0 0\r\n-1\r\n4\r\n1 0 0 1\r\n-1\r\n5\r\n1 0 0 1 1\r\n-1\r\n5\r\n1 0 0 1 0\r\n-1\r\n6\r\n1 0 0 1 0 1\r\n-1\r\n7\r\n1 0 0 1 0 1 1\r\n-1\r\n7\r\n1 0 0 1 0 1 0\r\n-1\r\n6\r\n1 0 0 1 0 0\r\n-1\r\n4\r\n1 0 0 0\r\n-1\r\n5\r\n1 0 0 0 1\r\n-1\r\n6\r\n1 0 0 0 1 1\r\n-1\r\n6\r\n1 0 0 0 1 0\r\n-1\r\n7\r\n1 0 0 0 1 0 1\r\n-1\r\n8\r\n1 0 0 0 1 0 1 1\r\n-1\r\n8\r\n1 0 0 0 1 0 1 0\r\n-1\r\n7\r\n1 0 0 0 1 0 0\r\n-1\r\n8\r\n1 0 0 0 1 0 0 1\r\n-1\r\n9\r\n1 0 0 0 1 0 0 1 1\r\n-1\r\n9\r\n1 0 0 0 1 0 0 1 0\r\n"
            ]
        ]
    }
]