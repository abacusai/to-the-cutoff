[
    {
        "name": "Preorder Test",
        "description": "For his computer science class, Jacob builds a model tree with sticks and\nballs containing n nodes in the shape of a tree. Jacob has spent ai minutes\nbuilding the i-th ball in the tree. Jacob's teacher will evaluate his model\nand grade Jacob based on the effort he has put in. However, she does not have\nenough time to search his whole tree to determine this; Jacob knows that she\nwill examine the first k nodes in a DFS-order traversal of the tree. She will\nthen assign Jacob a grade equal to the minimum ai she finds among those k\nnodes. Though Jacob does not have enough time to rebuild his model, he can\nchoose the root node that his teacher starts from. Furthermore, he can\nrearrange the list of neighbors of each node in any order he likes. Help Jacob\nfind the best grade he can get on this assignment. A DFS-order traversal is an\nordering of the nodes of a rooted tree, built by a recursive DFS-procedure\ninitially called on the root of the tree. When called on a given node v, the\nprocedure does the following: Print v. Traverse the list of neighbors of the\nnode v in order and iteratively call DFS-procedure on each one. Do not call\nDFS-procedure on node u if you came to node v directly from u. Input The first\nline of the input contains two positive integers, n and k (2 \u2264 n \u2264 200 000, 1\n\u2264 k \u2264 n) \u2014 the number of balls in Jacob's tree and the number of balls the\nteacher will inspect. The second line contains n integers, ai (1 \u2264 ai \u2264 1 000\n000), the time Jacob used to build the i-th ball. Each of the next n - 1 lines\ncontains two integers ui, vi (1 \u2264 ui, vi \u2264 n, ui \u2260 vi) representing a\nconnection in Jacob's tree between balls ui and vi. Output Print a single\ninteger \u2014 the maximum grade Jacob can get by picking the right root of the\ntree and rearranging the list of neighbors. Examples Input 5 3 3 6 1 4 2 1 2 2\n4 2 5 1 3 Output 3 Input 4 2 1 5 5 5 1 2 1 3 1 4 Output 1 Note In the first\nsample, Jacob can root the tree at node 2 and order 2's neighbors in the order\n4, 1, 5 (all other nodes have at most two neighbors). The resulting preorder\ntraversal is 2, 4, 1, 3, 5, and the minimum ai of the first 3 nodes is 3. In\nthe second sample, it is clear that any preorder traversal will contain node 1\nas either its first or second node, so Jacob cannot do better than a grade of\n1.\n\n",
        "cf_contest_id": 627,
        "cf_index": "D",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dfs and similar",
            "dp",
            "graphs",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 7.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 3\r\n3 6 1 4 2\r\n1 2\r\n2 4\r\n2 5\r\n1 3\r\n",
                "3\r\n"
            ],
            [
                "4 2\r\n1 5 5 5\r\n1 2\r\n1 3\r\n1 4\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1\r\n1 100000\r\n2 1\r\n",
                "100000\r\n"
            ],
            [
                "2 2\r\n1 1000000\r\n1 2\r\n",
                "1\r\n"
            ],
            [
                "10 4\r\n104325 153357 265088 777795 337716 557321 702646 734430 464449 744072\r\n9 4\r\n8 1\r\n10 7\r\n8 6\r\n7 9\r\n8 2\r\n3 5\r\n8 3\r\n10 8\r\n",
                "557321\r\n"
            ],
            [
                "10 3\r\n703660 186846 317819 628672 74457 58472 247014 480113 252764 860936\r\n10 6\r\n7 4\r\n10 9\r\n9 5\r\n6 3\r\n6 2\r\n7 1\r\n10 7\r\n10 8\r\n",
                "252764\r\n"
            ],
            [
                "10 10\r\n794273 814140 758469 932911 607860 683826 987442 652494 952171 698608\r\n1 3\r\n3 8\r\n2 7\r\n2 1\r\n2 9\r\n3 10\r\n6 4\r\n9 6\r\n3 5\r\n",
                "607860\r\n"
            ]
        ]
    }
]