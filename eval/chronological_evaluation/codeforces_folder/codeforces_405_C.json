[
    {
        "name": "Unusual Product",
        "description": "Little Chris is a huge fan of linear algebra. This time he has been given a\nhomework about the unusual square of a square matrix. The dot product of two\ninteger number vectors x and y of size n is the sum of the products of the\ncorresponding components of the vectors. The unusual square of an n \u00d7 n square\nmatrix A is defined as the sum of n dot products. The i-th of them is the dot\nproduct of the i-th row vector and the i-th column vector in the matrix A.\nFortunately for Chris, he has to work only in GF(2)! This means that all\noperations (addition, multiplication) are calculated modulo 2. In fact, the\nmatrix A is binary: each element of A is either 0 or 1. For example, consider\nthe following matrix A: The unusual square of A is equal to (1\u00b71 + 1\u00b70 + 1\u00b71)\n+ (0\u00b71 + 1\u00b71 + 1\u00b70) + (1\u00b71 + 0\u00b71 + 0\u00b70) = 0 + 1 + 1 = 0. However, there is\nmuch more to the homework. Chris has to process q queries; each query can be\none of the following: given a row index i, flip all the values in the i-th row\nin A; given a column index i, flip all the values in the i-th column in A;\nfind the unusual square of A. To flip a bit value w means to change it to 1 -\nw, i.e., 1 changes to 0 and 0 changes to 1. Given the initial matrix A, output\nthe answers for each query of the third type! Can you solve Chris's homework?\nInput The first line of input contains an integer n (1 \u2264 n \u2264 1000), the number\nof rows and the number of columns in the matrix A. The next n lines describe\nthe matrix: the i-th line contains n space-separated bits and describes the\ni-th row of A. The j-th number of the i-th line aij (0 \u2264 aij \u2264 1) is the\nelement on the intersection of the i-th row and the j-th column of A. The next\nline of input contains an integer q (1 \u2264 q \u2264 10^6), the number of queries.\nEach of the next q lines describes a single query, which can be one of the\nfollowing: 1 i \u2014 flip the values of the i-th row; 2 i \u2014 flip the values of the\ni-th column; 3 \u2014 output the unusual square of A. Note: since the size of the\ninput and output could be very large, don't use slow output techniques in your\nlanguage. For example, do not use input and output streams (cin, cout) in C++.\nOutput Let the number of the 3rd type queries in the input be m. Output a\nsingle string s of length m, where the i-th symbol of s is the value of the\nunusual square of A for the i-th query of the 3rd type as it appears in the\ninput. Examples Input 3 1 1 1 0 1 1 1 0 0 12 3 2 3 3 2 2 2 2 1 3 3 3 1 2 2 1 1\n1 3 Output 01001\n\n",
        "cf_contest_id": 405,
        "cf_index": "C",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 1 1\r\n0 1 1\r\n1 0 0\r\n12\r\n3\r\n2 3\r\n3\r\n2 2\r\n2 2\r\n1 3\r\n3\r\n3\r\n1 2\r\n2 1\r\n1 1\r\n3\r\n",
                "01001"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n9\r\n1 1\r\n3\r\n1 1\r\n1 1\r\n3\r\n1 1\r\n3\r\n1 1\r\n3\r\n",
                "0010"
            ],
            [
                "3\r\n0 0 0\r\n0 0 1\r\n0 1 1\r\n3\r\n1 2\r\n1 3\r\n1 1\r\n",
                ""
            ],
            [
                "3\r\n1 0 1\r\n0 1 1\r\n1 0 1\r\n4\r\n3\r\n3\r\n3\r\n3\r\n",
                "1111"
            ],
            [
                "1\r\n0\r\n5\r\n1 1\r\n3\r\n1 1\r\n1 1\r\n3\r\n",
                "11"
            ],
            [
                "2\r\n0 0\r\n0 0\r\n9\r\n3\r\n1 2\r\n2 2\r\n1 1\r\n2 1\r\n3\r\n1 2\r\n1 1\r\n3\r\n",
                "000"
            ],
            [
                "2\r\n0 1\r\n1 0\r\n7\r\n3\r\n3\r\n2 2\r\n3\r\n2 2\r\n2 1\r\n3\r\n",
                "0011"
            ],
            [
                "5\r\n1 0 1 0 1\r\n0 1 0 1 0\r\n1 0 1 0 1\r\n0 1 0 1 0\r\n1 0 1 0 1\r\n7\r\n3\r\n2 4\r\n1 3\r\n3\r\n2 5\r\n1 5\r\n3\r\n",
                "111"
            ],
            [
                "2\r\n1 0\r\n1 0\r\n4\r\n1 2\r\n3\r\n1 2\r\n3\r\n",
                "01"
            ],
            [
                "4\r\n1 1 0 0\r\n1 1 0 0\r\n0 0 0 0\r\n0 0 0 0\r\n2\r\n1 1\r\n3\r\n",
                "1"
            ],
            [
                "2\r\n1 1\r\n1 0\r\n5\r\n3\r\n1 1\r\n3\r\n2 1\r\n3\r\n",
                "101"
            ],
            [
                "2\r\n1 0\r\n1 1\r\n6\r\n1 2\r\n3\r\n2 1\r\n3\r\n1 1\r\n3\r\n",
                "101"
            ],
            [
                "2\r\n0 0\r\n0 0\r\n2\r\n1 1\r\n3\r\n",
                "1"
            ],
            [
                "2\r\n1 0\r\n0 1\r\n1\r\n3\r\n",
                "0"
            ]
        ]
    }
]