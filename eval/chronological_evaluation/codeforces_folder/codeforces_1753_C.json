[
    {
        "name": "Wish I Knew How to Sort",
        "description": "You are given a binary array \n    a\n (all elements of the array are \n    0\n or\n\n    1\n) of length \n    n\n. You wish to sort this array, but unfortunately,\nyour algorithms teacher forgot to teach you sorting algorithms. You perform\nthe following operations until \n    a\n is sorted: Choose two random indices\n\n    i\n and \n    j\n such that \n    i < j\n. Indices are chosen equally probable\namong all pairs of indices \n    (i, j)\n such that \n    1 \n    \u2264 i < j \n    \u2264 n\n.\nIf \n    a_i > a_j\n, then swap elements \n    a_i\n and \n    a_j\n. What is the\nexpected number of such operations you will perform before the array becomes\nsorted? It can be shown that the answer can be expressed as an irreducible\nfraction \n    p/q\n, where \n    p\n and \n    q\n are integers and \n    q\n    \n    \u2261 0 \n    998\n     244\n     353\n. Output the integer equal to\n\n    p \n    \u00b7 q^-1\n     998\n     244\n     353\n. In other words, output such\nan integer \n    x\n that \n    0 \n    \u2264 x < 998\n     244\n     353\n and \n    x \n    \u00b7 q\n    \n    \u2261 p \n    998\n     244\n     353\n. Input Each test contains multiple\ntest cases. The first line contains the number of test cases \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 10^5\n). Description of the test cases follows. The first line\nof each test case contains an integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    200\n     000\n) \u2014 the number of elements in the binary array. The second line\nof each test case contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n\n(\n    a_i \n    \u2208\n    \n    0, 1\n) \u2014 elements of the array. It's guaranteed that\nsum of \n    n\n over all test cases does not exceed \n    200\n     000\n. Output\nFor each test case print one integer \u2014 the value \n    p \n    \u00b7 q^-1\n    \n    998\n     244\n     353\n. Example Input 3 3 0 1 0 5 0 0 1 1 1 6 1 1 1 0 0 1 Output\n3 0 249561107 Note Consider the first test case. If the pair of indices \n    (2,\n    3)\n will be chosen, these elements will be swapped and array will become\nsorted. Otherwise, if one of pairs \n    (1, 2)\n or \n    (1, 3)\n will be\nselected, nothing will happen. So, the probability that the array will become\nsorted after one operation is \n    1/3\n, the probability that the\narray will become sorted after two operations is \n    2/3\n    \u00b7\n    1/3\n, the probability that the array will become sorted after\nthree operations is \n    2/3\n    \u00b7\n    2/3\n    \u00b7\n    1/3\n and so on. The expected number of operations is \n    \u2211\n    _i=1^\n    \u221e\n    (\n    2/3\n    )^i - 1\n    \u00b7\n    1/3\n    \u00b7 i = 3\n. In the second test case the array is already\nsorted so the expected number of operations is zero. In the third test case\nthe expected number of operations equals to \n    75/4\n so the answer\nis \n    75 \n    \u00b7 4^-1\n    \u2261 249\n     561\n     107 \n    998\n     244\n     353\n.\n\n",
        "cf_contest_id": 1753,
        "cf_index": "C",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "math",
            "probabilities"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n3\r\n0 1 0\r\n5\r\n0 0 1 1 1\r\n6\r\n1 1 1 0 0 1\r\n",
                "3\r\n0\r\n249561107\r\n"
            ]
        ],
        "private_cases": []
    }
]