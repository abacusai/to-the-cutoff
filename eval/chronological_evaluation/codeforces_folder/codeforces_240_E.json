[
    {
        "name": "Road Repairs",
        "description": "A country named Berland has n cities. They are numbered with integers from 1\nto n. City with index 1 is the capital of the country. Some pairs of cities\nhave monodirectional roads built between them. However, not all of them are in\ngood condition. For each road we know whether it needs repairing or not. If a\nroad needs repairing, then it is forbidden to use it. However, the Berland\ngovernment can repair the road so that it can be used. Right now Berland is\nbeing threatened by the war with the neighbouring state. So the capital\nofficials decided to send a military squad to each city. The squads can move\nonly along the existing roads, as there's no time or money to build new roads.\nHowever, some roads will probably have to be repaired in order to get to some\ncities. Of course the country needs much resources to defeat the enemy, so you\nwant to be careful with what you're going to throw the forces on. That's why\nthe Berland government wants to repair the minimum number of roads that is\nenough for the military troops to get to any city from the capital, driving\nalong good or repaired roads. Your task is to help the Berland government and\nto find out, which roads need to be repaired. Input The first line contains\ntwo space-separated integers n and m (1 \u2264 n, m \u2264 10^5) \u2014 the number of cities\nand the number of roads in Berland. Next m lines contain three space-separated\nintegers ai, bi, ci (1 \u2264 ai, bi \u2264 n, ai \u2260 bi, 0 \u2264 ci \u2264 1), describing the road\nfrom city ai to city bi. If ci equals 0, than the given road is in a good\ncondition. If ci equals 1, then it needs to be repaired. It is guaranteed that\nthere is not more than one road between the cities in each direction. Output\nIf even after all roads are repaired, it is still impossible to get to some\ncity from the capital, print - 1. Otherwise, on the first line print the\nminimum number of roads that need to be repaired, and on the second line print\nthe numbers of these roads, separated by single spaces. The roads are numbered\nstarting from 1 in the order, in which they are given in the input. If there\nare multiple sets, consisting of the minimum number of roads to repair to make\ntravelling to any city from the capital possible, print any of them. If it is\npossible to reach any city, driving along the roads that already are in a good\ncondition, print 0 in the only output line. Examples Input 3 2 1 3 0 3 2 1\nOutput 1 2 Input 4 4 2 3 0 3 4 0 4 1 0 4 2 1 Output -1 Input 4 3 1 2 0 1 3 0 1\n4 0 Output 0\n\n",
        "cf_contest_id": 240,
        "cf_index": "E",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graphs",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 2\r\n1 3 0\r\n3 2 1\r\n",
                "1\r\n2 "
            ],
            [
                "4 4\r\n2 3 0\r\n3 4 0\r\n4 1 0\r\n4 2 1\r\n",
                "-1\r\n"
            ],
            [
                "4 3\r\n1 2 0\r\n1 3 0\r\n1 4 0\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 60\r\n6 2 1\r\n1 4 1\r\n6 10 1\r\n5 9 1\r\n4 5 1\r\n4 8 1\r\n9 3 1\r\n1 3 0\r\n10 1 1\r\n10 9 1\r\n3 7 1\r\n9 4 1\r\n3 1 1\r\n4 2 1\r\n9 8 1\r\n10 7 1\r\n5 8 1\r\n5 2 1\r\n1 6 1\r\n5 4 1\r\n3 9 1\r\n1 10 0\r\n7 4 1\r\n4 6 1\r\n7 2 1\r\n3 8 1\r\n1 9 1\r\n7 1 1\r\n2 9 1\r\n1 2 1\r\n9 2 1\r\n4 1 1\r\n2 6 1\r\n2 1 1\r\n9 5 1\r\n10 5 1\r\n2 8 1\r\n1 5 1\r\n8 7 1\r\n10 2 1\r\n8 2 1\r\n4 10 1\r\n10 6 1\r\n4 7 1\r\n6 8 1\r\n6 1 1\r\n7 5 1\r\n1 8 1\r\n6 7 1\r\n8 1 1\r\n8 5 1\r\n9 1 1\r\n9 6 1\r\n8 4 1\r\n7 3 1\r\n8 3 1\r\n7 6 1\r\n6 5 1\r\n10 4 1\r\n8 10 1\r\n",
                "7\r\n30 2 38 19 39 48 27 "
            ],
            [
                "2 1\r\n1 2 1\r\n",
                "1\r\n1 "
            ],
            [
                "17 30\r\n2 5 0\r\n16 10 1\r\n3 5 1\r\n7 13 1\r\n1 2 0\r\n5 15 1\r\n7 16 1\r\n1 10 0\r\n16 13 1\r\n15 3 0\r\n8 13 1\r\n10 17 1\r\n9 15 1\r\n15 1 1\r\n15 11 0\r\n11 8 0\r\n1 9 0\r\n10 15 1\r\n9 8 1\r\n1 16 1\r\n7 14 1\r\n12 9 1\r\n3 13 1\r\n11 5 1\r\n8 2 1\r\n11 12 1\r\n17 9 1\r\n15 7 0\r\n2 4 1\r\n9 6 0\r\n",
                "7\r\n29 26 9 21 13 20 12 "
            ],
            [
                "8 26\r\n2 4 1\r\n7 6 1\r\n1 5 1\r\n4 5 1\r\n1 7 1\r\n5 7 0\r\n1 2 0\r\n2 8 1\r\n1 4 1\r\n6 5 0\r\n2 7 1\r\n1 3 1\r\n1 8 1\r\n5 3 0\r\n4 1 1\r\n7 2 1\r\n8 2 1\r\n8 4 1\r\n3 4 1\r\n6 8 0\r\n5 8 1\r\n1 6 1\r\n5 4 1\r\n8 7 1\r\n6 7 1\r\n4 3 1\r\n",
                "2\r\n9 22 "
            ],
            [
                "8 43\r\n5 4 1\r\n7 6 1\r\n6 8 1\r\n3 7 1\r\n5 7 1\r\n4 6 1\r\n8 5 1\r\n2 6 1\r\n6 5 1\r\n6 2 1\r\n4 7 1\r\n1 4 1\r\n8 4 1\r\n6 1 1\r\n6 3 1\r\n4 8 1\r\n8 1 1\r\n5 3 1\r\n7 3 1\r\n4 3 1\r\n6 4 1\r\n4 2 1\r\n4 5 1\r\n2 7 1\r\n1 2 1\r\n4 1 1\r\n1 6 0\r\n2 4 1\r\n3 1 1\r\n3 4 1\r\n1 5 1\r\n7 2 0\r\n2 3 1\r\n1 7 1\r\n8 3 0\r\n3 2 1\r\n5 6 1\r\n5 1 1\r\n6 7 1\r\n8 7 1\r\n2 5 1\r\n8 2 1\r\n5 2 1\r\n",
                "4\r\n12 31 34 3 "
            ]
        ]
    }
]