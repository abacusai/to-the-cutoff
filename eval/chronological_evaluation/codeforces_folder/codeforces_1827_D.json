[
    {
        "name": "Two Centroids",
        "description": "You are given a tree (an undirected connected acyclic graph) which initially\nonly contains vertex \n    1\n. There will be several queries to the given tree.\nIn the \n    i\n-th query, vertex \n    i + 1\n will appear and be connected to\nvertex \n    p_i\n (\n    1 \n    \u2264 p_i \n    \u2264 i\n). After each query, please find\nout the least number of operations required to make the current tree has two\ncentroids. In one operation, you can add one vertex and one edge to the tree\nsuch that it remains a tree. A vertex is called a centroid if its removal\nsplits the tree into subtrees with at most \n    \u230a\n    n/2\n    \u230b\n vertices each, with \n    n\n as the number of vertices of the\ntree. For example, the centroid of the following tree is \n    3\n because the\nbiggest subtree after removing the centroid has \n    2\n vertices. In the next\ntree, vertex \n    1\n and \n    2\n are both centroids. Input Each test contains\nmultiple test cases. The first line contains the number of test cases \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 10^4\n). The description of the test cases follows. The\nfirst line of each test case contains a single integer \n    n\n (\n    2 \n    \u2264 n\n    \n    \u2264 5 \n    \u00b7 10^5\n) \u2014 the number of nodes of the final tree. The second\nline of each test case contains \n    n - 1\n integers \n    p_1, p_2, \n    \u2026,\n    p_n - 1\n (\n    1 \n    \u2264 p_i \n    \u2264 i\n) \u2014 the index of the vertex that is\nconnected to vertex \n    i + 1\n. It is guaranteed that the sum of \n    n\n over\nall test cases does not exceed \n    5 \n    \u00b7 10^5\n. Output For each test\ncase, output \n    n - 1\n integers. The \n    i\n-th integer is the answer to the\n\n    i\n-th query \u2014 the least number of operations required to make the current\ntree have two centroids. We can show that an answer always exists. Example\nInput 5 2 1 3 1 1 4 1 2 3 7 1 2 3 2 5 2 10 1 2 2 4 5 5 7 8 9 Output 0 0 1 0 1\n0 0 1 0 1 2 3 0 1 2 1 0 1 0 1 2 Note The illustrations below are of the fourth\nexample test case. After the third query: The tree already has vertices\n\n    2\n and \n    3\n as centroids, so no operations are needed.After the fourth\nquery: Adding vertex \n    x\n to the tree makes vertices \n    2\n and \n    3\n\ncentroids. Only one operation is needed.After the fifth query: Adding vertex\n\n    x\n and \n    y\n to the tree makes vertices \n    5\n and \n    2\n centroids.\nTwo operations are needed.After the sixth query: Adding vertex \n    x\n,\n\n    y\n, and \n    z\n to the tree makes vertices \n    5\n and \n    2\n centroids.\nThree operations are needed.\n\n",
        "cf_contest_id": 1827,
        "cf_index": "D",
        "cf_rating": 2800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "greedy",
            "trees"
        ],
        "time_limit_seconds": 1.5,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "5\r\n2\r\n1\r\n3\r\n1 1\r\n4\r\n1 2 3\r\n7\r\n1 2 3 2 5 2\r\n10\r\n1 2 2 4 5 5 7 8 9\r\n",
                "0\r\n0 1\r\n0 1 0\r\n0 1 0 1 2 3\r\n0 1 2 1 0 1 0 1 2\r\n"
            ]
        ],
        "private_cases": []
    }
]