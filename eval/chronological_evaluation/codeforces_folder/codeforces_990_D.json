[
    {
        "name": "Graph And Its Complement",
        "description": "Given three numbers \n    n, a, b\n. You need to find an adjacency matrix of\nsuch an undirected graph that the number of components in it is equal to\n\n    a\n, and the number of components in its complement is \n    b\n. The matrix\nmust be symmetric, and all digits on the main diagonal must be zeroes. In an\nundirected graph loops (edges from a vertex to itself) are not allowed. It can\nbe at most one edge between a pair of vertices. The adjacency matrix of an\nundirected graph is a square matrix of size \n    n\n consisting only of \"0\" and\n\"1\", where \n    n\n is the number of vertices of the graph and the \n    i\n-th\nrow and the \n    i\n-th column correspond to the \n    i\n-th vertex of the\ngraph. The cell \n    (i,j)\n of the adjacency matrix contains \n    1\n if and\nonly if the \n    i\n-th and \n    j\n-th vertices in the graph are connected by\nan edge. A connected component is a set of vertices \n    X\n such that for\nevery two vertices from this set there exists at least one path in the graph\nconnecting this pair of vertices, but adding any other vertex to \n    X\n\nviolates this rule. The complement or inverse of a graph \n    G\n is a graph\n\n    H\n on the same vertices such that two distinct vertices of \n    H\n are\nadjacent if and only if they are not adjacent in \n    G\n. Input In a single\nline, three numbers are given \n    n, a, b \n     (1 \n    \u2264 n \n    \u2264 1000, 1 \n    \u2264 a,\n    b \n    \u2264 n)\n: is the number of vertexes of the graph, the required number of\nconnectivity components in it, and the required amount of the connectivity\ncomponent in it's complement. Output If there is no graph that satisfies these\nconstraints on a single line, print \"NO\" (without quotes). Otherwise, on the\nfirst line, print \"YES\"(without quotes). In each of the next \n    n\n lines,\noutput \n    n\n digits such that \n    j\n-th digit of \n    i\n-th line must be\n\n    1\n if and only if there is an edge between vertices \n    i\n and \n    j\n\nin \n    G\n (and \n    0\n otherwise). Note that the matrix must be symmetric,\nand all digits on the main diagonal must be zeroes. If there are several\nmatrices that satisfy the conditions \u2014 output any of them. Examples Input 3 1\n2 Output YES 001 001 110 Input 3 3 3 Output NO\n\n",
        "cf_contest_id": 990,
        "cf_index": "D",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graphs",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 1 2\r\n",
                "YES\r\n001\r\n001\r\n110\r\n"
            ],
            [
                "3 3 3\r\n",
                "NO\r\n\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 1 1\r\n",
                "YES\r\n01000\r\n10100\r\n01010\r\n00101\r\n00010\r\n"
            ],
            [
                "2 1 1\r\n",
                "NO\r\n\r\n"
            ],
            [
                "1 1 1\r\n",
                "YES\r\n0\r\n"
            ],
            [
                "3 1 1\r\n",
                "NO\r\n\r\n"
            ],
            [
                "5 2 2\r\n",
                "NO\r\n\r\n"
            ],
            [
                "4 1 1\r\n",
                "YES\r\n0100\r\n1010\r\n0101\r\n0010\r\n"
            ],
            [
                "4 4 1\r\n",
                "YES\r\n0000\r\n0000\r\n0000\r\n0000\r\n"
            ],
            [
                "3 1 3\r\n",
                "YES\r\n011\r\n101\r\n110\r\n"
            ],
            [
                "2 1 2\r\n",
                "YES\r\n01\r\n10\r\n"
            ],
            [
                "6 1 1\r\n",
                "YES\r\n010000\r\n101000\r\n010100\r\n001010\r\n000101\r\n000010\r\n"
            ],
            [
                "3 2 1\r\n",
                "YES\r\n010\r\n100\r\n000\r\n"
            ],
            [
                "5 1 2\r\n",
                "YES\r\n00111\r\n00011\r\n10001\r\n11001\r\n11110\r\n"
            ],
            [
                "4 1 2\r\n",
                "YES\r\n0011\r\n0001\r\n1001\r\n1110\r\n"
            ],
            [
                "2 2 1\r\n",
                "YES\r\n00\r\n00\r\n"
            ],
            [
                "3 3 1\r\n",
                "YES\r\n000\r\n000\r\n000\r\n"
            ],
            [
                "2 2 2\r\n",
                "NO\r\n\r\n"
            ],
            [
                "1 1 1\r\n",
                "YES\r\n0\r\n"
            ],
            [
                "2 1 1\r\n",
                "NO\r\n\r\n"
            ],
            [
                "2 1 2\r\n",
                "YES\r\n01\r\n10\r\n"
            ],
            [
                "2 2 1\r\n",
                "YES\r\n00\r\n00\r\n"
            ],
            [
                "2 2 2\r\n",
                "NO\r\n\r\n"
            ],
            [
                "3 1 1\r\n",
                "NO\r\n\r\n"
            ],
            [
                "3 1 2\r\n",
                "YES\r\n001\r\n001\r\n110\r\n"
            ],
            [
                "3 1 3\r\n",
                "YES\r\n011\r\n101\r\n110\r\n"
            ],
            [
                "3 2 1\r\n",
                "YES\r\n010\r\n100\r\n000\r\n"
            ],
            [
                "3 2 2\r\n",
                "NO\r\n\r\n"
            ],
            [
                "3 2 3\r\n",
                "NO\r\n\r\n"
            ],
            [
                "3 3 1\r\n",
                "YES\r\n000\r\n000\r\n000\r\n"
            ],
            [
                "3 3 2\r\n",
                "NO\r\n\r\n"
            ],
            [
                "3 3 3\r\n",
                "NO\r\n\r\n"
            ],
            [
                "4 1 1\r\n",
                "YES\r\n0100\r\n1010\r\n0101\r\n0010\r\n"
            ],
            [
                "4 1 2\r\n",
                "YES\r\n0011\r\n0001\r\n1001\r\n1110\r\n"
            ],
            [
                "4 1 3\r\n",
                "YES\r\n0011\r\n0011\r\n1101\r\n1110\r\n"
            ],
            [
                "4 1 4\r\n",
                "YES\r\n0111\r\n1011\r\n1101\r\n1110\r\n"
            ],
            [
                "4 2 1\r\n",
                "YES\r\n0100\r\n1010\r\n0100\r\n0000\r\n"
            ],
            [
                "4 2 2\r\n",
                "NO\r\n\r\n"
            ],
            [
                "4 2 3\r\n",
                "NO\r\n\r\n"
            ],
            [
                "4 2 4\r\n",
                "NO\r\n\r\n"
            ],
            [
                "4 3 1\r\n",
                "YES\r\n0100\r\n1000\r\n0000\r\n0000\r\n"
            ],
            [
                "4 3 2\r\n",
                "NO\r\n\r\n"
            ],
            [
                "4 3 3\r\n",
                "NO\r\n\r\n"
            ],
            [
                "4 3 4\r\n",
                "NO\r\n\r\n"
            ],
            [
                "4 4 1\r\n",
                "YES\r\n0000\r\n0000\r\n0000\r\n0000\r\n"
            ],
            [
                "4 4 2\r\n",
                "NO\r\n\r\n"
            ],
            [
                "4 4 3\r\n",
                "NO\r\n\r\n"
            ],
            [
                "4 4 4\r\n",
                "NO\r\n\r\n"
            ]
        ]
    }
]