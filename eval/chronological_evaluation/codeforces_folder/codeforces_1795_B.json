[
    {
        "name": "Ideal Point",
        "description": "You are given \n    n\n one-dimensional segments (each segment is denoted by two\nintegers \u2014 its endpoints). Let's define the function \n    f(x)\n as the number\nof segments covering point \n    x\n (a segment covers the point \n    x\n if \n    l\n    \n    \u2264 x \n    \u2264 r\n, where \n    l\n is the left endpoint and \n    r\n is the\nright endpoint of the segment). An integer point \n    x\n is called ideal if it\nbelongs to more segments than any other integer point, i. e. \n    f(y) < f(x)\n\nis true for any other integer point \n    y\n. You are given an integer \n    k\n.\nYour task is to determine whether it is possible to remove some (possibly\nzero) segments, so that the given point \n    k\n becomes ideal. Input The first\nline contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of\ntest cases. The first line of each test case contains two integers \n    n\n and\n\n    k\n (\n    1 \n    \u2264 n, k \n    \u2264 50\n). Then \n    n\n lines follow, \n    i\n-th\nline of them contains two integers \n    l_i\n and \n    r_i\n (\n    1 \n    \u2264 l_i,\n    r_i \n    \u2264 50\n; \n    l_i \n    \u2264 r_i\n) \u2014 the endpoints of the \n    i\n-th\nsegment. Output For each test case, print YES if it is possible to remove some\n(possibly zero) segments, so that the given point \n    k\n becomes ideal,\notherwise print NO. You may print each letter in any case (YES, yes, Yes will\nall be recognized as positive answer, NO, no and nO will all be recognized as\nnegative answer). Example Input 4 4 3 1 3 7 9 2 5 3 6 2 9 1 4 3 7 1 3 2 4 3 5\n1 4 6 7 5 5 Output YES NO NO YES Note In the first example, the point \n    3\n\nis already ideal (it is covered by three segments), so you don't have to\ndelete anything. In the fourth example, you can delete everything except the\nsegment \n    [5, 5]\n.\n\n",
        "cf_contest_id": 1795,
        "cf_index": "B",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "geometry",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4 3\r\n1 3\r\n7 9\r\n2 5\r\n3 6\r\n2 9\r\n1 4\r\n3 7\r\n1 3\r\n2 4\r\n3 5\r\n1 4\r\n6 7\r\n5 5\r\n",
                "YES\r\nNO \r\nNO \r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n2 9\r\n1 4\r\n3 7\r\n",
                "NO \r\n"
            ],
            [
                "5\r\n1 2\r\n1 1\r\n1 3\r\n2 4\r\n1 5\r\n2 6\r\n2 7\r\n3 5\r\n3 6\r\n1 1\r\n1 1\r\n",
                "NO \r\nNO \r\nNO \r\nNO \r\nYES\r\n"
            ],
            [
                "9\r\n4 3\r\n1 3\r\n7 9\r\n2 5\r\n3 6\r\n2 9\r\n1 4\r\n3 7\r\n1 3\r\n2 4\r\n3 5\r\n1 4\r\n6 7\r\n5 5\r\n4 3\r\n1 3\r\n7 9\r\n2 5\r\n3 6\r\n2 9\r\n1 4\r\n3 7\r\n1 3\r\n2 4\r\n3 5\r\n1 4\r\n6 7\r\n5 5\r\n1 4\r\n3 7\r\n",
                "YES\r\nNO \r\nNO \r\nYES\r\nYES\r\nNO \r\nNO \r\nYES\r\nNO \r\n"
            ],
            [
                "5\r\n1 4\r\n5 6\r\n1 4\r\n4 4\r\n1 2\r\n2 2\r\n1 1\r\n1 7\r\n1 4\r\n3 4\r\n",
                "NO \r\nYES\r\nYES\r\nNO \r\nNO \r\n"
            ],
            [
                "5\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n1 1\r\n",
                "YES\r\nYES\r\nYES\r\nYES\r\nYES\r\n"
            ]
        ]
    }
]