[
    {
        "name": "Optimizer",
        "description": "A process RAM is a sequence of bytes that are indexed from 1 to n.\nPolycarpus's program contains such instructions as \"memset\", that is, the\noperations of filling memory cells on a segment with some value. The details\nare: the code only contains m instructions that look like \"set13 a_i l_i\".\nInstruction i fills a continuous memory segment of length li, starting from\ncell number ai, (that it cells with numbers ai, ai + 1, ..., ai + li - 1) with\nvalues 13. In Polycarpus's code, the optimizer's task is to remove the maximum\nnumber of instructions from his code in such a way that the remaining\ninstructions set value 13 in all the memory bytes that got this value from the\ncode before the optimization. Also, the value 13 should be set only in the\nmemory bytes that got this value from the code before the optimization. Your\ntask is to implement the optimizer for such program. Input The first line\ncontains integers n and m (1 \u2264 n \u2264 2\u00b710^6, 1 \u2264 m \u2264 2\u00b710^5) \u2014 the number of\nbytes (memory cells) and the number of instructions in Polycarpus's code. Then\nm lines follow, each line contains a pair of integers ai, li (1 \u2264 ai \u2264 n, 1 \u2264\nli \u2264 n - ai + 1). Output Print in the first line the sought maximum number of\ninstructions that can be removed from the code. In the second line print the\nnumbers of the instructions. The instructions are numbered from 1 to m in the\norder they appeared in the input. If there are multiple solutions, print any\nof them. Examples Input 10 4 3 3 3 1 4 1 9 2 Output 2 2 3 Input 1 1 1 1 Output\n0\n\n",
        "cf_contest_id": 306,
        "cf_index": "B",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10 4\r\n3 3\r\n3 1\r\n4 1\r\n9 2\r\n",
                "2\r\n2 3 "
            ],
            [
                "1 1\r\n1 1\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 1\r\n1 10\r\n",
                "0\r\n"
            ],
            [
                "2 2\r\n1 1\r\n2 1\r\n",
                "0\r\n"
            ],
            [
                "2 2\r\n1 2\r\n1 2\r\n",
                "1\r\n2 "
            ],
            [
                "2 2\r\n1 2\r\n2 1\r\n",
                "1\r\n2 "
            ],
            [
                "20 10\r\n7 2\r\n12 2\r\n14 1\r\n4 3\r\n17 4\r\n9 3\r\n15 4\r\n12 2\r\n18 1\r\n12 1\r\n",
                "3\r\n8 9 10 "
            ],
            [
                "20 10\r\n7 2\r\n8 1\r\n1 3\r\n13 2\r\n13 1\r\n13 2\r\n2 3\r\n3 2\r\n15 3\r\n3 1\r\n",
                "5\r\n2 5 6 8 10 "
            ],
            [
                "20 10\r\n13 3\r\n4 3\r\n13 5\r\n1 2\r\n1 5\r\n5 2\r\n11 2\r\n5 2\r\n4 4\r\n12 4\r\n",
                "6\r\n1 2 4 6 8 10 "
            ],
            [
                "100 15\r\n12 6\r\n53 5\r\n44 4\r\n15 3\r\n51 3\r\n39 9\r\n13 4\r\n87 2\r\n88 2\r\n87 6\r\n90 2\r\n16 4\r\n35 4\r\n53 2\r\n75 8\r\n",
                "7\r\n3 4 7 8 9 11 14 "
            ],
            [
                "100 15\r\n20 9\r\n50 2\r\n75 10\r\n4 3\r\n65 2\r\n3 5\r\n73 10\r\n86 8\r\n31 10\r\n85 5\r\n70 8\r\n9 6\r\n37 5\r\n9 8\r\n30 6\r\n",
                "3\r\n4 7 12 "
            ],
            [
                "100 15\r\n26 8\r\n84 9\r\n32 7\r\n54 8\r\n26 8\r\n33 6\r\n90 7\r\n58 3\r\n45 8\r\n82 10\r\n4 5\r\n34 9\r\n70 7\r\n26 8\r\n52 10\r\n",
                "7\r\n2 3 4 5 6 8 14 "
            ],
            [
                "100 15\r\n41 5\r\n38 5\r\n4 5\r\n64 5\r\n22 5\r\n91 5\r\n54 5\r\n23 5\r\n25 5\r\n28 5\r\n34 5\r\n33 5\r\n46 5\r\n17 5\r\n80 5\r\n",
                "2\r\n8 11 "
            ],
            [
                "100 15\r\n39 6\r\n91 5\r\n4 8\r\n5 8\r\n97 3\r\n65 7\r\n8 8\r\n21 8\r\n24 7\r\n6 7\r\n87 4\r\n42 4\r\n69 5\r\n76 8\r\n75 8\r\n",
                "2\r\n4 10 "
            ],
            [
                "100 13\r\n74 3\r\n19 5\r\n59 5\r\n65 4\r\n73 3\r\n23 3\r\n42 4\r\n9 8\r\n91 5\r\n16 6\r\n2 4\r\n74 4\r\n23 4\r\n",
                "2\r\n1 6 "
            ],
            [
                "100 3\r\n1 5\r\n4 3\r\n5 3\r\n",
                "1\r\n2 "
            ],
            [
                "10 3\r\n1 5\r\n4 3\r\n5 3\r\n",
                "1\r\n2 "
            ],
            [
                "10 3\r\n1 4\r\n2 7\r\n4 6\r\n",
                "1\r\n2 "
            ],
            [
                "10 5\r\n1 5\r\n2 5\r\n3 5\r\n4 5\r\n5 5\r\n",
                "3\r\n2 3 4 "
            ],
            [
                "25 10\r\n1 10\r\n2 14\r\n3 14\r\n11 4\r\n15 2\r\n18 1\r\n18 2\r\n19 1\r\n22 1\r\n22 2\r\n",
                "6\r\n2 4 5 6 8 9 "
            ],
            [
                "55 3\r\n5 5\r\n4 3\r\n6 4\r\n",
                "1\r\n3 "
            ],
            [
                "16 5\r\n1 10\r\n2 14\r\n3 14\r\n11 4\r\n15 2\r\n",
                "3\r\n2 4 5 "
            ],
            [
                "100 3\r\n1 9\r\n11 9\r\n8 5\r\n",
                "0\r\n"
            ],
            [
                "10 3\r\n5 3\r\n1 6\r\n6 4\r\n",
                "1\r\n1 "
            ],
            [
                "10 3\r\n1 3\r\n2 3\r\n3 3\r\n",
                "1\r\n2 "
            ],
            [
                "100 2\r\n1 5\r\n3 5\r\n",
                "0\r\n"
            ],
            [
                "100 4\r\n1 10\r\n5 10\r\n90 1\r\n95 1\r\n",
                "0\r\n"
            ]
        ]
    }
]