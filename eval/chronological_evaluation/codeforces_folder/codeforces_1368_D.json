[
    {
        "name": "AND, OR and square sum",
        "description": "Gottfried learned about binary number representation. He then came up with\nthis task and presented it to you. You are given a collection of \n    n\n non-\nnegative integers \n    a_1, \n    \u2026, a_n\n. You are allowed to perform the\nfollowing operation: choose two distinct indices \n    1 \n    \u2264 i, j \n    \u2264 n\n.\nIf before the operation \n    a_i = x\n, \n    a_j = y\n, then after the operation\n\n    a_i = x\u00a0\n    \ud835\udda0\ud835\uddad\ud835\udda3\u00a0y\n, \n    a_j = x\u00a0\n    \ud835\uddae\ud835\uddb1\u00a0y\n, where\n\n    \ud835\udda0\ud835\uddad\ud835\udda3\n and \n    \ud835\uddae\ud835\uddb1\n are bitwise AND and OR\nrespectively (refer to the Notes section for formal description). The\noperation may be performed any number of times (possibly zero). After all\noperations are done, compute \n    \u2211_i=1^n a_i^2\n \u2014 the sum of squares\nof all \n    a_i\n. What is the largest sum of squares you can achieve? Input\nThe first line contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n). The second line contains \n    n\n integers \n    a_1, \n    \u2026,\n    a_n\n (\n    0 \n    \u2264 a_i < 2^20\n). Output Print a single integer \u2014 the\nlargest possible sum of squares that can be achieved after several (possibly\nzero) operations. Examples Input 1 123 Output 15129 Input 3 1 3 5 Output 51\nInput 2 349525 699050 Output 1099509530625 Note In the first sample no\noperation can be made, thus the answer is \n    123^2\n. In the second sample we\ncan obtain the collection \n    1, 1, 7\n, and \n    1^2 + 1^2 + 7^2 = 51\n. If\n\n    x\n and \n    y\n are represented in binary with equal number of bits\n(possibly with leading zeros), then each bit of \n    x\u00a0\n    \ud835\udda0\ud835\uddad\ud835\udda3\u00a0y\n is\nset to \n    1\n if and only if both corresponding bits of \n    x\n and \n    y\n\nare set to \n    1\n. Similarly, each bit of \n    x\u00a0\n    \ud835\uddae\ud835\uddb1\u00a0y\n is set to\n\n    1\n if and only if at least one of the corresponding bits of \n    x\n and\n\n    y\n are set to \n    1\n. For example, \n    x = 3\n and \n    y = 5\n are\nrepresented as \n    011_2\n and \n    101_2\n (highest bit first). Then,\n\n    x\u00a0\n    \ud835\udda0\ud835\uddad\ud835\udda3\u00a0y = 001_2 = 1\n, and \n    x\u00a0\n    \ud835\uddae\ud835\uddb1\u00a0y = 111_2 = 7\n.\n\n",
        "cf_contest_id": 1368,
        "cf_index": "D",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "1\r\n123\r\n",
                "15129\r\n"
            ],
            [
                "3\r\n1 3 5\r\n",
                "51\r\n"
            ],
            [
                "2\r\n349525 699050\r\n",
                "1099509530625\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n991 143 445 903 399\r\n",
                "2241949\r\n"
            ],
            [
                "10\r\n35 516 92 57 58 161 273 664 567 8\r\n",
                "1878117\r\n"
            ],
            [
                "1\r\n0\r\n",
                "0\r\n"
            ],
            [
                "37\r\n1048575 327657 1046479 686078 513773 589787 387035 736754 1038077 1048056 59263 753353 784318 647131 519679 294910 185560 604141 456668 849789 521404 782287 6137 1047551 849874 523933 521721 278491 1042415 581468 1013705 439526 1011709 917469 655311 327646 917499\r\n",
                "24197296011217\r\n"
            ],
            [
                "1\r\n1048575\r\n",
                "1099509530625\r\n"
            ]
        ]
    }
]