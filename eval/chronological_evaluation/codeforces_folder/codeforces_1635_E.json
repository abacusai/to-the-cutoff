[
    {
        "name": "Cars ",
        "description": "There are \n    n\n cars on a coordinate axis \n    OX\n. Each car is located at\nan integer point initially and no two cars are located at the same point.\nAlso, each car is oriented either left or right, and they can move at any\nconstant positive speed in that direction at any moment. More formally, we can\ndescribe the \n    i\n-th car with a letter and an integer: its orientation\n\n    ori_i\n and its location \n    x_i\n. If \n    ori_i = L\n, then \n    x_i\n is\ndecreasing at a constant rate with respect to time. Similarly, if \n    ori_i =\n    R\n, then \n    x_i\n is increasing at a constant rate with respect to time. We\ncall two cars irrelevant if they never end up in the same point regardless of\ntheir speed. In other words, they won't share the same coordinate at any\nmoment. We call two cars destined if they always end up in the same point\nregardless of their speed. In other words, they must share the same coordinate\nat some moment. Unfortunately, we lost all information about our cars, but we\ndo remember \n    m\n relationships. There are two types of relationships:\n\n    1\n \n    i\n \n    j\n \u2014\n    i\n-th car and \n    j\n-th car are irrelevant.\n\n    2\n \n    i\n \n    j\n \u2014\n    i\n-th car and \n    j\n-th car are destined.\nRestore the orientations and the locations of the cars satisfying the\nrelationships, or report that it is impossible. If there are multiple\nsolutions, you can output any. Note that if two cars share the same\ncoordinate, they will intersect, but at the same moment they will continue\ntheir movement in their directions. Input The first line contains two\nintegers, \n    n\n and \n    m\n \n    (2 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5; 1 \n    \u2264 m\n    \n    \u2264 min(2 \n    \u00b7 10^5, \n    n(n-1)/2)\n \u2014 the number of cars and the\nnumber of restrictions respectively. Each of the next \n    m\n lines contains\nthree integers, \n    type\n, \n    i\n, and \n    j\n \n    (1 \n    \u2264 type \n    \u2264 2; 1\n    \n    \u2264 i,j \n    \u2264 n; i\u2260j)\n. If \n    type\n = \n    1\n, \n    i\n-th car and\n\n    j\n-th car are irrelevant. Otherwise, \n    i\n-th car and \n    j\n-th car\nare destined. It is guaranteed that for each pair of cars, there are at most\n\n    1\n relationship between. Output In the first line, print either \"YES\" or\n\"NO\" (in any case), whether it is possible to restore the orientations and the\nlocations of the cars satisfying the relationships. If the answer is \"YES\",\nprint \n    n\n lines each containing a symbol and an integer: \n    ori_i\n and\n\n    x_i\n \n    (ori_i \n    \u2208\n    \n    L, R\n    \n    ; -10^9 \n    \u2264 x_i \n    \u2264 10^9)\n \u2014\nrepresenting the information of the \n    i\n-th car. If the orientation is\nleft, then \n    ori_i\n = \n    L\n. Otherwise \n    ori_i\n = \n    R\n. \n    x_i\n\nis the where the \n    i\n-th car is located. Note that all \n    x_i\n should be\ndistinct. We can prove that if there exists a solution, then there must be a\nsolution satisfying the constraints on \n    x_i\n. Examples Input 4 4 1 1 2 1 2\n3 2 3 4 2 4 1 Output YES R 0 L -3 R 5 L 6 Input 3 3 1 1 2 1 2 3 1 1 3 Output\nNO\n\n",
        "cf_contest_id": 1635,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "2-sat",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "4 4\r\n1 1 2\r\n1 2 3\r\n2 3 4\r\n2 4 1\r\n",
                "YES\r\nL 3\r\nR 4\r\nL 2\r\nR 1\r\n"
            ],
            [
                "3 3\r\n1 1 2\r\n1 2 3\r\n1 1 3\r\n",
                "NO\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1\r\n1 2 1\r\n",
                "YES\r\nL 1\r\nR 2\r\n"
            ]
        ]
    }
]