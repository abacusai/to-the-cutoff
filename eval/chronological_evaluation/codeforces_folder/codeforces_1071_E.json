[
    {
        "name": "Rain Protection",
        "description": "A lot of people dream of convertibles (also often called cabriolets). Some of\nconvertibles, however, don't have roof at all, and are vulnerable to rain.\nThis is why Melon Ask, the famous inventor, decided to create a rain\nprotection mechanism for convertibles. The workplace of the mechanism is a\npart of plane just above the driver. Its functional part consists of two rails\nwith sliding endpoints of a piece of stretching rope. For the sake of\nsimplicity we can consider this as a pair of parallel segments in a plane with\nthe rope segment, whose endpoints we are free to choose as any points on these\nrails segments. The algorithmic part of the mechanism detects each particular\nraindrop and predicts when and where it reaches the plane. At this exact\nmoment the rope segment must contain the raindrop point (so the rope adsorbs\nthe raindrop). You are given the initial position of the rope endpoints and\nall information about raindrops. You are to choose the minimal possible speed\n\n    v\n of the endpoints sliding (both endpoints can slide in any direction\nalong their segments independently of each other) in such a way that it is\npossible to catch all raindrops moving both endpoints with speed not greater\nthan \n    v\n, or find out that it's impossible no matter how high the speed\nis. Input The first line contains three integers \n    n\n, \n    w\n and \n    h\n\n(\n    1 \n    \u2264 n \n    \u2264 10^5\n, \n    1\n    \u2264 w, h \n    \u2264 10^3\n), meaning that there\nare \n    n\n raindrops, and two rails are represented as segments connecting\n\n    (0, 0)\n and \n    (w, 0)\n and connecting \n    (0, h)\n and \n    (w, h)\n.\nThe second line contains two integers \n    e_1\n and \n    e_2\n, meaning that\nthe initial (that is, at the moment \n    t = 0\n) positions of the endpoints\nare \n    (e_1, 0)\n and \n    (e_2, h)\n (\n    0\n    \u2264 e_1, e_2\n    \u2264 w\n). The\n\n    i\n-th of the following \n    n\n lines contains three integers \n    t_i\n,\n\n    x_i\n and \n    y_i\n (\n    1\n    \u2264 t_i\n    \u2264 10^5\n, \n    0\n    \u2264 x_i \n    \u2264 w\n,\n\n    0 < y_i < h\n) meaning that the \n    i\n-th raindrop touches the plane at\nthe point \n    (x_i, y_i)\n at the time moment \n    t_i\n. It is guaranteed that\n\n    t_i \n    \u2264 t_i+1\n for all valid \n    i\n. Output If it is impossible to\ncatch all raindrops, print \n    -1\n. Otherwise, print the least possible\nmaximum speed of the rope endpoints for which it is possible to catch them\nall. Your answer is considered correct if the absolute or relative error\ndoesn't exceed \n    10^-4\n. Formally, let your answer be \n    a\n, and the\njury's answer be \n    b\n. Your answer is considered correct if \n    |a -\n    b|/\n    max(1, |b|)\n    \u2264 10^-4\n. Examples Input 3 5 5 0 0 1 1 4 2 2 4 3\n3 4 Output 1.0000000019 Input 2 5 5 0 0 2 4 1 3 1 4 Output 2.1428571437 Input\n3 5 5 0 0 1 2 1 1 3 3 1 4 2 Output -1 Note That is how one can act in the\nfirst sample test: Here is the same for the second:\n\n",
        "cf_contest_id": 1071,
        "cf_index": "E",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "geometry"
        ],
        "time_limit_seconds": 7.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 5 5\r\n0 0\r\n1 1 4\r\n2 2 4\r\n3 3 4\r\n",
                "1.000000000931\r\n"
            ],
            [
                "2 5 5\r\n0 0\r\n2 4 1\r\n3 1 4\r\n",
                "2.142857136205\r\n"
            ],
            [
                "3 5 5\r\n0 0\r\n1 2 1\r\n1 3 3\r\n1 4 2\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 7 4\r\n3 5\r\n5 1 3\r\n5 1 3\r\n5 1 3\r\n",
                "0.733333331998\r\n"
            ],
            [
                "1 1000 1000\r\n0 0\r\n100000 1 1\r\n",
                "0.000010000804\r\n"
            ],
            [
                "20 5 5\r\n5 4\r\n1 5 2\r\n2 4 3\r\n3 4 4\r\n4 0 2\r\n5 1 3\r\n6 3 3\r\n7 2 4\r\n8 1 1\r\n9 2 4\r\n11 0 2\r\n12 3 2\r\n13 2 3\r\n14 5 2\r\n15 0 4\r\n16 5 4\r\n17 0 2\r\n18 3 1\r\n19 3 3\r\n20 5 2\r\n20 2 4\r\n",
                "-1\r\n"
            ]
        ]
    }
]