[
    {
        "name": "Cyclic Rotation",
        "description": "There is an array \n    a\n of length \n    n\n. You may perform the following\noperation any number of times: Choose two indices \n    l\n and \n    r\n where\n\n    1 \n    \u2264 l < r \n    \u2264 n\n and \n    a_l = a_r\n. Then, set \n    a[l \n    \u2026 r]\n    = [a_l+1, a_l+2, \n    \u2026, a_r, a_l]\n. You are also given another array\n\n    b\n of length \n    n\n which is a permutation of \n    a\n. Determine whether\nit is possible to transform array \n    a\n into an array \n    b\n using the\nabove operation some number of times. Input Each test contains multiple test\ncases. The first line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    10^4\n) \u2014 the number of test cases. The description of the test cases\nfollows. The first line of each test case contains an integer \n    n\n (\n    1\n    \n    \u2264 n \n    \u2264 2 \n    \u00b7 10 ^ 5\n) \u2014 the length of array \n    a\n and \n    b\n.\nThe second line of each test case contains \n    n\n integers \n    a_1, a_2,\n    \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n) \u2014 elements of the array \n    a\n.\nThe third line of each test case contains \n    n\n integers \n    b_1, b_2,\n    \n    \u2026, b_n\n (\n    1 \n    \u2264 b_i \n    \u2264 n\n) \u2014 elements of the array \n    b\n.\nIt is guaranteed that \n    b\n is a permutation of \n    a\n. It is guaranteed\nthat the sum of \n    n\n over all test cases does not exceed \n    2 \n    \u00b7 10 ^\n    5\n Output For each test case, print \"YES\" (without quotes) if it is possible\nto transform array \n    a\n to \n    b\n, and \"NO\" (without quotes) otherwise.\nYou can output \"YES\" and \"NO\" in any case (for example, strings \"yEs\", \"yes\"\nand \"Yes\" will be recognized as a positive response). Example Input 5 5 1 2 3\n3 2 1 3 3 2 2 5 1 2 4 2 1 4 2 2 1 1 5 2 4 5 5 2 2 2 4 5 5 3 1 2 3 1 2 3 3 1 1\n2 2 1 1 Output YES YES NO YES NO Note In the first test case, we can choose\n\n    l=2\n and \n    r=5\n to form \n    [1, 3, 3, 2, 2]\n. In the second test\ncase, we can choose \n    l=2\n and \n    r=4\n to form \n    [1, 4, 2, 2, 1]\n.\nThen, we can choose \n    l=1\n and \n    r=5\n to form \n    [4, 2, 2, 1, 1]\n. In\nthe third test case, it can be proven that it is not possible to transform\narray \n    a\n to \n    b\n using the operation.\n\n",
        "cf_contest_id": 1672,
        "cf_index": "D",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "implementation",
            "two pointers"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n5\r\n1 2 3 3 2\r\n1 3 3 2 2\r\n5\r\n1 2 4 2 1\r\n4 2 2 1 1\r\n5\r\n2 4 5 5 2\r\n2 2 4 5 5\r\n3\r\n1 2 3\r\n1 2 3\r\n3\r\n1 1 2\r\n2 1 1\r\n",
                "YES\r\nYES\r\nNO\r\nYES\r\nNO\r\n"
            ]
        ],
        "private_cases": []
    }
]