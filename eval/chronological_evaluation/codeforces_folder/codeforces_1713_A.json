[
    {
        "name": "Traveling Salesman Problem",
        "description": "You are living on an infinite plane with the Cartesian coordinate system on\nit. In one move you can go to any of the four adjacent points (left, right,\nup, down). More formally, if you are standing at the point \n    (x, y)\n, you\ncan: go left, and move to \n    (x - 1, y)\n, or go right, and move to \n    (x +\n    1, y)\n, or go up, and move to \n    (x, y + 1)\n, or go down, and move to\n\n    (x, y - 1)\n. There are \n    n\n boxes on this plane. The \n    i\n-th box\nhas coordinates \n    (x_i,y_i)\n. It is guaranteed that the boxes are either on\nthe \n    x\n-axis or the \n    y\n-axis. That is, either \n    x_i=0\n or\n\n    y_i=0\n. You can collect a box if you and the box are at the same point.\nFind the minimum number of moves you have to perform to collect all of these\nboxes if you have to start and finish at the point \n    (0,0)\n. Input The\nfirst line contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the\nnumber of test cases. The first line of each test case contains a single\ninteger \n    n\n (\n    1 \n    \u2264 n \n    \u2264 100\n) \u2014 the number of boxes. The\n\n    i\n-th line of the following \n    n\n lines contains two integers \n    x_i\n\nand \n    y_i\n (\n    -100 \n    \u2264 x_i, y_i \n    \u2264 100\n) \u2014 the coordinate of the\n\n    i\n-th box. It is guaranteed that either \n    x_i=0\n or \n    y_i=0\n. Do\nnote that the sum of \n    n\n over all test cases is not bounded. Output For\neach test case output a single integer \u2014 the minimum number of moves required.\nExample Input 3 4 0 -2 1 0 -1 0 0 2 3 0 2 -3 0 0 -1 1 0 0 Output 12 12 0 Note\nIn the first test case, a possible sequence of moves that uses the minimum\nnumber of moves required is shown below. \n    \n\n    (0,0) \n    \u2192 (1,0) \n    \u2192 (1,1)\n    \n    \u2192 (1, 2) \n    \u2192 (0,2) \n    \u2192 (-1,2) \n    \u2192 (-1,1) \n    \u2192 (-1,0) \n    \u2192 (-1,-1)\n    \n    \u2192 (-1,-2) \n    \u2192 (0,-2) \n    \u2192 (0,-1) \n    \u2192 (0,0)\n\n    \n In the second test\ncase, a possible sequence of moves that uses the minimum number of moves\nrequired is shown below. \n    \n\n    (0,0) \n    \u2192 (0,1) \n    \u2192 (0,2) \n    \u2192 (-1, 2)\n    \n    \u2192 (-2,2) \n    \u2192 (-3,2) \n    \u2192 (-3,1) \n    \u2192 (-3,0) \n    \u2192 (-3,-1) \n    \u2192\n    (-2,-1) \n    \u2192 (-1,-1) \n    \u2192 (0,-1) \n    \u2192 (0,0)\n\n    \n In the third test case,\nwe can collect all boxes without making any moves.\n\n",
        "cf_contest_id": 1713,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "geometry",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n4\r\n0 -2\r\n1 0\r\n-1 0\r\n0 2\r\n3\r\n0 2\r\n-3 0\r\n0 -1\r\n1\r\n0 0\r\n",
                "12\r\n12\r\n0\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n3\r\n-2 0\r\n0 -5\r\n0 -1\r\n3\r\n3 0\r\n-2 0\r\n0 1\r\n",
                "14\r\n12\r\n"
            ],
            [
                "2\r\n3\r\n-6 0\r\n6 0\r\n0 -7\r\n3\r\n0 -6\r\n1 0\r\n0 3\r\n",
                "38\r\n20\r\n"
            ],
            [
                "1\r\n4\r\n0 -1\r\n0 -2\r\n0 -3\r\n0 -4\r\n",
                "8\r\n"
            ]
        ]
    }
]