[
    {
        "name": "Curious Array",
        "description": "You've got an array consisting of n integers: a[1], a[2], ..., a[n]. Moreover,\nthere are m queries, each query can be described by three integers li, ri, ki.\nQuery li, ri, ki means that we should add to each element a[j], where li \u2264 j \u2264\nri. Record means the binomial coefficient, or the number of combinations from\ny elements into groups of x elements. You need to fulfil consecutively all\nqueries and then print the final array. Input The first line contains integers\nn, m (1 \u2264 n, m \u2264 10^5). The second line contains n integers a[1], a[2], ...,\na[n] (0 \u2264 ai \u2264 10^9) \u2014 the initial array. Next m lines contain queries in the\nformat li, ri, ki \u2014 to all elements of the segment li... ri add number (1 \u2264 li\n\u2264 ri \u2264 n; 0 \u2264 k \u2264 100). Output Print n integers: the i-th number is the value\nof element a[i] after all the queries. As the values can be rather large,\nprint them modulo 1000000007 (10^9 + 7). Examples Input 5 1 0 0 0 0 0 1 5 0\nOutput 1 1 1 1 1 Input 10 2 1 2 3 4 5 0 0 0 0 0 1 6 1 6 10 2 Output 2 4 6 8 10\n7 3 6 10 15\n\n",
        "cf_contest_id": 407,
        "cf_index": "C",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "combinatorics",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 1\r\n0 0 0 0 0\r\n1 5 0\r\n",
                "1 1 1 1 1 "
            ],
            [
                "10 2\r\n1 2 3 4 5 0 0 0 0 0\r\n1 6 1\r\n6 10 2\r\n",
                "2 4 6 8 10 7 3 6 10 15 "
            ]
        ],
        "private_cases": [
            [
                "5 3\r\n0 0 0 0 0\r\n1 5 0\r\n1 5 1\r\n1 5 2\r\n",
                "3 6 10 15 21 "
            ],
            [
                "10 2\r\n0 0 0 0 0 0 0 0 0 0\r\n7 9 4\r\n2 4 1\r\n",
                "0 1 2 3 0 0 1 5 15 0 "
            ],
            [
                "5 5\r\n1 2 8 6 3\r\n5 5 4\r\n1 5 5\r\n1 1 4\r\n5 5 0\r\n2 3 0\r\n",
                "3 9 30 62 131 "
            ],
            [
                "10 2\r\n0 0 0 0 0 0 0 0 0 0\r\n8 10 3\r\n5 9 6\r\n",
                "0 0 0 0 1 7 28 85 214 10 "
            ],
            [
                "10 50\r\n15 209 149 994 266 845 236 114 228 968\r\n3 6 9\r\n8 10 14\r\n5 7 17\r\n5 5 0\r\n10 10 9\r\n8 10 13\r\n6 10 19\r\n6 9 14\r\n10 10 7\r\n6 9 3\r\n4 7 23\r\n3 3 10\r\n3 5 2\r\n4 7 13\r\n6 7 23\r\n6 10 10\r\n7 7 9\r\n4 7 17\r\n9 9 13\r\n9 9 0\r\n4 4 12\r\n3 6 2\r\n9 10 20\r\n10 10 16\r\n10 10 25\r\n6 10 14\r\n2 2 21\r\n3 4 3\r\n10 10 14\r\n4 10 15\r\n3 7 0\r\n9 10 16\r\n9 10 13\r\n1 2 8\r\n6 10 10\r\n10 10 2\r\n7 10 25\r\n3 8 0\r\n5 10 0\r\n10 10 0\r\n4 10 11\r\n5 6 21\r\n6 6 23\r\n8 9 7\r\n8 10 24\r\n8 8 0\r\n9 10 14\r\n6 9 23\r\n9 9 2\r\n5 10 24\r\n",
                "16 219 156 1022 424 1942 6341 9205 47088 204181 "
            ],
            [
                "32 16\r\n75454244 591508245 780919327 242504555 10328304 976613741 643845730 775054920 304114699 157548484 187864536 479076425 730938598 269393345 867303813 827252520 445388306 572924267 371919467 266567274 722374029 991613490 895119771 605883929 58242943 469913370 914902088 264594507 541825276 891949494 767100156 465664861\r\n21 23 64\r\n20 32 37\r\n30 31 33\r\n5 16 62\r\n23 27 69\r\n31 31 98\r\n16 26 65\r\n10 12 16\r\n25 26 75\r\n12 23 28\r\n31 31 8\r\n18 21 83\r\n12 20 37\r\n3 17 74\r\n7 16 45\r\n11 31 97\r\n",
                "75454244 591508245 780919328 242504630 10331155 976686954 645274172 797636161 605336700 644440008 938999679 253648426 215172119 77111091 235540349 736135108 511694665 823709810 235878127 379861943 231742811 721935729 833146404 107601756 54917798 329009798 27304007 557864981 417846432 692087830 701419388 729399053 "
            ]
        ]
    }
]