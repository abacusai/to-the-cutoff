[
    {
        "name": "Build a Contest",
        "description": "Arkady coordinates rounds on some not really famous competitive programming\nplatform. Each round features \n    n\n problems of distinct difficulty, the\ndifficulties are numbered from \n    1\n to \n    n\n. To hold a round Arkady\nneeds \n    n\n new (not used previously) problems, one for each difficulty. As\nfor now, Arkady creates all the problems himself, but unfortunately, he can't\njust create a problem of a desired difficulty. Instead, when he creates a\nproblem, he evaluates its difficulty from \n    1\n to \n    n\n and puts it into\nthe problems pool. At each moment when Arkady can choose a set of \n    n\n new\nproblems of distinct difficulties from the pool, he holds a round with these\nproblems and removes them from the pool. Arkady always creates one problem at\na time, so if he can hold a round after creating a problem, he immediately\ndoes it. You are given a sequence of problems' difficulties in the order\nArkady created them. For each problem, determine whether Arkady held the round\nright after creating this problem, or not. Initially the problems pool is\nempty. Input The first line contains two integers \n    n\n and \n    m\n (\n    1\n    \n    \u2264 n, m \n    \u2264 10^5\n) \u2014 the number of difficulty levels and the number of\nproblems Arkady created. The second line contains \n    m\n integers \n    a_1,\n    a_2, \n    \u2026, a_m\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n) \u2014 the problems' difficulties\nin the order Arkady created them. Output Print a line containing \n    m\n\ndigits. The \n    i\n-th digit should be \n    1\n if Arkady held the round after\ncreation of the \n    i\n-th problem, and \n    0\n otherwise. Examples Input 3 11\n2 3 1 2 2 2 3 2 2 3 1 Output 00100000001 Input 4 8 4 1 3 3 2 3 3 3 Output\n00001000 Note In the first example Arkady held the round after the first three\nproblems, because they are of distinct difficulties, and then only after the\nlast problem.\n\n",
        "cf_contest_id": 1100,
        "cf_index": "B",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 11\r\n2 3 1 2 2 2 3 2 2 3 1\r\n",
                "00100000001"
            ],
            [
                "4 8\r\n4 1 3 3 2 3 3 3\r\n",
                "00001000"
            ]
        ],
        "private_cases": [
            [
                "5 20\r\n1 4 4 2 1 1 3 5 4 2 2 4 5 2 3 3 4 5 1 4\r\n",
                "00000001000000100100"
            ],
            [
                "1 1\r\n1\r\n",
                "1"
            ],
            [
                "1 20\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "11111111111111111111"
            ],
            [
                "10 1\r\n1\r\n",
                "0"
            ],
            [
                "10000 10\r\n10000 9999 9998 9997 9996 9995 9994 9993 9992 9991\r\n",
                "0000000000"
            ],
            [
                "5 2\r\n3 3\r\n",
                "00"
            ]
        ]
    }
]