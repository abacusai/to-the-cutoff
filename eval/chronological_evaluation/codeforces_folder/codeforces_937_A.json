[
    {
        "name": "Olympiad",
        "description": "The recent All-Berland Olympiad in Informatics featured n participants with\neach scoring a certain amount of points. As the head of the programming\ncommittee, you are to determine the set of participants to be awarded with\ndiplomas with respect to the following criteria: At least one participant\nshould get a diploma. None of those with score equal to zero should get\nawarded. When someone is awarded, all participants with score not less than\nhis score should also be awarded. Determine the number of ways to choose a\nsubset of participants that will receive the diplomas. Input The first line\ncontains a single integer n (1 \u2264 n \u2264 100) \u2014 the number of participants. The\nnext line contains a sequence of n integers a1, a2, ..., an (0 \u2264 ai \u2264 600) \u2014\nparticipants' scores. It's guaranteed that at least one participant has non-\nzero score. Output Print a single integer \u2014 the desired number of ways.\nExamples Input 4 1 3 3 2 Output 3 Input 3 1 1 1 Output 1 Input 4 42 0 0 42\nOutput 1 Note There are three ways to choose a subset in sample case one. Only\nparticipants with 3 points will get diplomas. Participants with 2 or 3 points\nwill get diplomas. Everyone will get a diploma! The only option in sample case\ntwo is to award everyone. Note that in sample case three participants with\nzero scores cannot get anything.\n\n",
        "cf_contest_id": 937,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 3 3 2\r\n",
                "3\r\n"
            ],
            [
                "3\r\n1 1 1\r\n",
                "1\r\n"
            ],
            [
                "4\r\n42 0 0 42\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n1 0 1 0 1 0 0 0 0 1\r\n",
                "1\r\n"
            ],
            [
                "10\r\n572 471 540 163 50 30 561 510 43 200\r\n",
                "10\r\n"
            ],
            [
                "100\r\n122 575 426 445 172 81 247 429 97 202 175 325 382 384 417 356 132 502 328 537 57 339 518 211 479 306 140 168 268 16 140 263 593 249 391 310 555 468 231 180 157 18 334 328 276 155 21 280 322 545 111 267 467 274 291 304 235 34 365 180 21 95 501 552 325 331 302 353 296 22 289 399 7 466 32 302 568 333 75 192 284 10 94 128 154 512 9 480 243 521 551 492 420 197 207 125 367 117 438 600\r\n",
                "94\r\n"
            ],
            [
                "100\r\n600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600 600\r\n",
                "1\r\n"
            ],
            [
                "78\r\n5 4 13 2 5 6 2 10 10 1 2 6 7 9 6 3 5 7 1 10 2 2 7 0 2 11 11 3 1 13 3 10 6 2 0 3 0 5 0 1 4 11 1 1 7 0 12 7 5 12 0 2 12 9 8 3 4 3 4 11 4 10 2 3 10 12 5 6 1 11 2 0 8 7 9 1 3 12\r\n",
                "13\r\n"
            ],
            [
                "34\r\n220 387 408 343 184 447 197 307 337 414 251 319 426 322 347 242 208 412 188 185 241 235 216 259 331 372 322 284 444 384 214 297 389 391\r\n",
                "33\r\n"
            ],
            [
                "100\r\n1 2 1 0 3 0 2 0 0 1 2 0 1 3 0 3 3 1 3 0 0 2 1 2 2 1 3 3 3 3 3 2 0 0 2 1 2 3 2 3 0 1 1 3 3 2 0 3 1 0 2 2 2 1 2 3 2 1 0 3 0 2 0 3 0 2 1 0 3 1 0 2 2 1 3 1 3 0 2 3 3 1 1 3 1 3 0 3 2 0 2 3 3 0 2 0 2 0 1 3\r\n",
                "3\r\n"
            ],
            [
                "100\r\n572 471 540 163 50 30 561 510 43 200 213 387 500 424 113 487 357 333 294 337 435 202 447 494 485 465 161 344 470 559 104 356 393 207 224 213 511 514 60 386 149 216 392 229 429 173 165 401 395 150 127 579 344 390 529 296 225 425 318 79 465 447 177 110 367 212 459 270 41 500 277 567 125 436 178 9 214 342 203 112 144 24 79 155 495 556 40 549 463 281 241 316 2 246 1 396 510 293 332 55\r\n",
                "93\r\n"
            ],
            [
                "99\r\n5 4 13 2 5 6 2 10 10 1 2 6 7 9 6 3 5 7 1 10 2 2 7 0 2 11 11 3 1 13 3 10 6 2 0 3 0 5 0 1 4 11 1 1 7 0 12 7 5 12 0 2 12 9 8 3 4 3 4 11 4 10 2 3 10 12 5 6 1 11 2 0 8 7 9 1 3 12 2 3 9 3 7 13 7 13 0 11 8 12 2 5 9 4 0 6 6 2 13\r\n",
                "13\r\n"
            ],
            [
                "99\r\n1 0 1 0 1 0 0 0 0 1 0 0 1 1 0 1 1 1 1 0 0 0 1 0 0 1 1 1 1 1 1 0 0 0 0 1 0 1 0 1 0 1 1 1 1 0 0 1 1 0 0 0 0 1 0 1 0 1 0 1 0 0 0 1 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 1 1 1 1 1 1 1 0 1 0 0 0 1 1 0 0 0 0 0 1\r\n",
                "1\r\n"
            ],
            [
                "99\r\n21 74 25 44 71 80 46 28 96 1 74 24 81 83 16 55 31 1 27 36 56 38 17 10 78 5 39 67 67 15 39 62 92 48 90 9 54 67 30 79 56 17 33 27 75 54 20 79 21 44 10 66 66 73 90 3 34 33 64 79 20 94 0 51 24 30 1 52 95 21 88 98 6 65 31 1 67 32 74 91 83 9 93 27 53 11 8 79 42 20 50 91 19 96 6 24 66 16 37\r\n",
                "61\r\n"
            ],
            [
                "2\r\n0 1\r\n",
                "1\r\n"
            ],
            [
                "2\r\n0 600\r\n",
                "1\r\n"
            ],
            [
                "4\r\n1 1 1 2\r\n",
                "2\r\n"
            ],
            [
                "4\r\n0 0 1 2\r\n",
                "2\r\n"
            ],
            [
                "1\r\n5\r\n",
                "1\r\n"
            ],
            [
                "2\r\n0 5\r\n",
                "1\r\n"
            ],
            [
                "5\r\n1 0 0 1 2\r\n",
                "2\r\n"
            ]
        ]
    }
]