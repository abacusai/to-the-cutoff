[
    {
        "name": "Leaf Sets",
        "description": "You are given an undirected tree, consisting of \n    n\n vertices. The vertex\nis called a leaf if it has exactly one vertex adjacent to it. The distance\nbetween some pair of vertices is the number of edges in the shortest path\nbetween them. Let's call some set of leaves beautiful if the maximum distance\nbetween any pair of leaves in it is less or equal to \n    k\n. You want to\nsplit all leaves into non-intersecting beautiful sets. What is the minimal\nnumber of sets in such a split? Input The first line contains two integers\n\n    n\n and \n    k\n (\n    3 \n    \u2264 n \n    \u2264 10^6\n, \n    1 \n    \u2264 k \n    \u2264 10^6\n) \u2014\nthe number of vertices in the tree and the maximum distance between any pair\nof leaves in each beautiful set. Each of the next \n    n - 1\n lines contains\ntwo integers \n    v_i\n and \n    u_i\n (\n    1 \n    \u2264 v_i, u_i \n    \u2264 n\n) \u2014 the\ndescription of the \n    i\n-th edge. It is guaranteed that the given edges form\na tree. Output Print a single integer \u2014 the minimal number of beautiful sets\nthe split can have. Examples Input 9 3 1 2 1 3 2 4 2 5 3 6 6 7 6 8 3 9 Output\n2 Input 5 3 1 2 2 3 3 4 4 5 Output 2 Input 6 1 1 2 1 3 1 4 1 5 1 6 Output 5\nNote Here is the graph for the first example:\n\n",
        "cf_contest_id": 1042,
        "cf_index": "F",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy",
            "sortings",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "9 3\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n6 7\r\n6 8\r\n3 9\r\n",
                "2\r\n"
            ],
            [
                "5 3\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n",
                "2\r\n"
            ],
            [
                "6 1\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n",
                "5\r\n"
            ]
        ],
        "private_cases": [
            [
                "9 3\r\n1 2\r\n2 3\r\n3 4\r\n1 5\r\n1 6\r\n6 7\r\n1 8\r\n8 9\r\n",
                "3\r\n"
            ],
            [
                "10 3\r\n1 2\r\n2 3\r\n3 4\r\n1 5\r\n1 6\r\n6 7\r\n7 8\r\n1 9\r\n9 10\r\n",
                "3\r\n"
            ],
            [
                "7 1\r\n2 7\r\n4 5\r\n7 1\r\n6 3\r\n4 6\r\n4 2\r\n",
                "3\r\n"
            ],
            [
                "9 4\r\n9 1\r\n3 2\r\n8 6\r\n4 2\r\n2 9\r\n7 6\r\n8 5\r\n6 4\r\n",
                "2\r\n"
            ],
            [
                "19 1\r\n4 8\r\n13 14\r\n14 5\r\n9 19\r\n6 15\r\n1 17\r\n6 5\r\n2 18\r\n17 12\r\n4 3\r\n10 18\r\n13 19\r\n7 17\r\n11 4\r\n8 2\r\n16 18\r\n16 1\r\n14 12\r\n",
                "6\r\n"
            ],
            [
                "19 7\r\n13 11\r\n16 15\r\n8 14\r\n11 5\r\n12 5\r\n11 3\r\n18 6\r\n7 19\r\n10 1\r\n14 18\r\n5 6\r\n4 19\r\n6 17\r\n9 13\r\n4 17\r\n4 16\r\n2 17\r\n15 10\r\n",
                "2\r\n"
            ],
            [
                "19 9\r\n6 13\r\n8 14\r\n15 10\r\n14 16\r\n16 17\r\n19 5\r\n11 17\r\n3 18\r\n7 6\r\n18 12\r\n14 6\r\n1 9\r\n18 1\r\n4 1\r\n3 2\r\n2 7\r\n4 5\r\n14 10\r\n",
                "2\r\n"
            ],
            [
                "12 3\r\n9 5\r\n2 10\r\n8 12\r\n8 4\r\n12 7\r\n3 7\r\n5 4\r\n5 6\r\n8 1\r\n5 2\r\n11 3\r\n",
                "3\r\n"
            ],
            [
                "9 3\r\n9 7\r\n5 3\r\n7 8\r\n2 4\r\n3 2\r\n3 7\r\n8 6\r\n2 1\r\n",
                "2\r\n"
            ],
            [
                "14 4\r\n5 13\r\n8 2\r\n3 11\r\n10 9\r\n3 9\r\n6 8\r\n9 4\r\n7 1\r\n14 13\r\n14 7\r\n2 10\r\n13 12\r\n13 10\r\n",
                "3\r\n"
            ],
            [
                "19 4\r\n6 15\r\n19 8\r\n10 13\r\n3 5\r\n17 4\r\n1 4\r\n5 12\r\n14 1\r\n11 14\r\n9 19\r\n13 14\r\n16 9\r\n16 18\r\n3 2\r\n7 13\r\n1 5\r\n18 6\r\n4 18\r\n",
                "4\r\n"
            ],
            [
                "3 2\r\n1 3\r\n2 3\r\n",
                "1\r\n"
            ],
            [
                "3 1\r\n2 1\r\n3 2\r\n",
                "2\r\n"
            ]
        ]
    }
]