[
    {
        "name": "Getting Deals Done",
        "description": "Polycarp has a lot of work to do. Recently he has learned a new time\nmanagement rule: \"if a task takes five minutes or less, do it immediately\".\nPolycarp likes the new rule, however he is not sure that five minutes is the\noptimal value. He supposes that this value \n    d\n should be chosen based on\nexisting task list. Polycarp has a list of \n    n\n tasks to complete. The\n\n    i\n-th task has difficulty \n    p_i\n, i.e. it requires exactly \n    p_i\n\nminutes to be done. Polycarp reads the tasks one by one from the first to the\n\n    n\n-th. If a task difficulty is \n    d\n or less, Polycarp starts the work\non the task immediately. If a task difficulty is strictly greater than\n\n    d\n, he will not do the task at all. It is not allowed to rearrange tasks\nin the list. Polycarp doesn't spend any time for reading a task or skipping\nit. Polycarp has \n    t\n minutes in total to complete maximum number of tasks.\nBut he does not want to work all the time. He decides to make a break after\neach group of \n    m\n consecutive tasks he was working on. The break should\ntake the same amount of time as it was spent in total on completion of these\n\n    m\n tasks. For example, if \n    n=7\n, \n    p=[3, 1, 4, 1, 5, 9, 2]\n,\n\n    d=3\n and \n    m=2\n Polycarp works by the following schedule: Polycarp\nreads the first task, its difficulty is not greater than \n    d\n (\n    p_1=3\n    \n    \u2264 d=3\n) and works for \n    3\n minutes (i.e. the minutes \n    1\n,\n\n    2\n, \n    3\n); Polycarp reads the second task, its difficulty is not\ngreater than \n    d\n (\n    p_2=1 \n    \u2264 d=3\n) and works for \n    1\n minute\n(i.e. the minute \n    4\n); Polycarp notices that he has finished \n    m=2\n\ntasks and takes a break for \n    3+1=4\n minutes (i.e. on the minutes \n    5, 6,\n    7, 8\n); Polycarp reads the third task, its difficulty is greater than\n\n    d\n (\n    p_3=4 > d=3\n) and skips it without spending any time; Polycarp\nreads the fourth task, its difficulty is not greater than \n    d\n (\n    p_4=1\n    \n    \u2264 d=3\n) and works for \n    1\n minute (i.e. the minute \n    9\n); Polycarp\nreads the tasks \n    5\n and \n    6\n, skips both of them (\n    p_5>d\n and\n\n    p_6>d\n); Polycarp reads the \n    7\n-th task, its difficulty is not\ngreater than \n    d\n (\n    p_7=2 \n    \u2264 d=3\n) and works for \n    2\n minutes\n(i.e. the minutes \n    10\n, \n    11\n); Polycarp notices that he has finished\n\n    m=2\n tasks and takes a break for \n    1+2=3\n minutes (i.e. on the minutes\n\n    12, 13, 14\n). Polycarp stops exactly after \n    t\n minutes. If Polycarp\nstarted a task but has not finished it by that time, the task is not\nconsidered as completed. It is allowed to complete less than \n    m\n tasks in\nthe last group. Also Polycarp considers acceptable to have shorter break than\nneeded after the last group of tasks or even not to have this break at all \u2014\nhis working day is over and he will have enough time to rest anyway. Please\nhelp Polycarp to find such value \n    d\n, which would allow him to complete\nmaximum possible number of tasks in \n    t\n minutes. Input The first line of\nthe input contains single integer \n    c\n (\n    1 \n    \u2264 c \n    \u2264 5 \n    \u00b7\n    10^4\n) \u2014 number of test cases. Then description of \n    c\n test cases\nfollows. Solve test cases separately, test cases are completely independent\nand do not affect each other. Each test case is described by two lines. The\nfirst of these lines contains three space-separated integers \n    n\n, \n    m\n\nand \n    t\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5, 1 \n    \u2264 m \n    \u2264 2 \n    \u00b7\n    10^5, 1 \n    \u2264 t \n    \u2264 4 \n    \u00b7 10^10\n) \u2014 the number of tasks in\nPolycarp's list, the number of tasks he can do without a break and the total\namount of time Polycarp can work on tasks. The second line of the test case\ncontains \n    n\n space separated integers \n    p_1, p_2, \n    \u2026, p_n\n (\n    1\n    \n    \u2264 p_i \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 difficulties of the tasks. The sum of\nvalues \n    n\n for all test cases in the input does not exceed \n    2 \n    \u00b7\n    10^5\n. Output Print \n    c\n lines, each line should contain answer for the\ncorresponding test case \u2014 the maximum possible number of tasks Polycarp can\ncomplete and the integer value \n    d\n (\n    1 \n    \u2264 d \n    \u2264 t\n) Polycarp\nshould use in time management rule, separated by space. If there are several\npossible values \n    d\n for a test case, output any of them. Examples Input 4\n5 2 16 5 6 1 4 7 5 3 30 5 6 1 4 7 6 4 15 12 5 15 7 20 17 1 1 50 100 Output 3 5\n4 7 2 10 0 25 Input 3 11 1 29 6 4 3 7 5 3 4 7 3 5 3 7 1 5 1 1 1 1 1 1 1 5 2 18\n2 3 3 7 5 Output 4 3 3 1 4 5 Note In the first test case of the first example\n\n    n=5\n, \n    m=2\n and \n    t=16\n. The sequence of difficulties is \n    [5, 6,\n    1, 4, 7]\n. If Polycarp chooses \n    d=5\n then he will complete \n    3\n\ntasks. Polycarp will work by the following schedule: Polycarp reads the first\ntask, its difficulty is not greater than \n    d\n (\n    p_1=5 \n    \u2264 d=5\n) and\nworks for \n    5\n minutes (i.e. the minutes \n    1, 2, \n    \u2026, 5\n); Polycarp\nreads the second task, its difficulty is greater than \n    d\n (\n    p_2=6 >\n    d=5\n) and skips it without spending any time; Polycarp reads the third task,\nits difficulty is not greater than \n    d\n (\n    p_3=1 \n    \u2264 d=5\n) and works\nfor \n    1\n minute (i.e. the minute \n    6\n); Polycarp notices that he has\nfinished \n    m=2\n tasks and takes a break for \n    5+1=6\n minutes (i.e. on\nthe minutes \n    7, 8, \n    \u2026, 12\n); Polycarp reads the fourth task, its\ndifficulty is not greater than \n    d\n (\n    p_4=4 \n    \u2264 d=5\n) and works for\n\n    4\n minutes (i.e. the minutes \n    13, 14, 15, 16\n); Polycarp stops work\nbecause of \n    t=16\n. In total in the first test case Polycarp will complete\n\n    3\n tasks for \n    d=5\n. He can't choose other value for \n    d\n to\nincrease the number of completed tasks.\n\n",
        "cf_contest_id": 1070,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n5 2 16\r\n5 6 1 4 7\r\n5 3 30\r\n5 6 1 4 7\r\n6 4 15\r\n12 5 15 7 20 17\r\n1 1 50\r\n100\r\n",
                "3 5\r\n4 6\r\n2 7\r\n0 1\r\n"
            ],
            [
                "3\r\n11 1 29\r\n6 4 3 7 5 3 4 7 3 5 3\r\n7 1 5\r\n1 1 1 1 1 1 1\r\n5 2 18\r\n2 3 3 7 5\r\n",
                "4 3\r\n3 1\r\n4 5\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 1 1000000000\r\n10000\r\n",
                "1 10000\r\n"
            ],
            [
                "8\r\n1 1 1\r\n1\r\n1 1 1\r\n2\r\n1 2 1\r\n1\r\n1 2 1\r\n2\r\n1 1 2\r\n1\r\n1 1 2\r\n2\r\n1 2 1\r\n1\r\n1 2 2\r\n2\r\n",
                "1 1\r\n0 1\r\n1 1\r\n0 1\r\n1 1\r\n1 2\r\n1 1\r\n1 2\r\n"
            ],
            [
                "6\r\n3 3 5\r\n1 3 5\r\n3 3 5\r\n1 5 3\r\n3 3 5\r\n3 1 5\r\n3 3 5\r\n3 5 1\r\n3 3 5\r\n5 1 3\r\n3 3 5\r\n5 3 1\r\n",
                "2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n2 3\r\n"
            ],
            [
                "8\r\n7 1 5\r\n1 1 1 1 1 1 1\r\n7 2 5\r\n1 1 1 1 1 1 1\r\n7 3 5\r\n1 1 1 1 1 1 1\r\n7 4 5\r\n1 1 1 1 1 1 1\r\n7 5 5\r\n1 1 1 1 1 1 1\r\n7 6 5\r\n1 1 1 1 1 1 1\r\n7 7 5\r\n1 1 1 1 1 1 1\r\n7 100 5\r\n1 1 1 1 1 1 1\r\n",
                "3 1\r\n3 1\r\n3 1\r\n4 1\r\n5 1\r\n5 1\r\n5 1\r\n5 1\r\n"
            ],
            [
                "5\r\n4 1 1\r\n4 7 4 5\r\n4 5 2\r\n6 7 4 5\r\n4 5 1001\r\n1002 1003 9999 9875\r\n4 50000 1001\r\n1002 9999 4006 9875\r\n7 4 12\r\n20 23 98 65 70 13 81\r\n",
                "0 1\r\n0 1\r\n0 1\r\n0 1\r\n0 1\r\n"
            ],
            [
                "11\r\n4 2 35\r\n13 5 6 13\r\n5 2 35\r\n13 5 6 13 3\r\n4 2 35\r\n14 5 6 13\r\n5 3 35\r\n13 5 6 13 3\r\n6 3 55\r\n13 5 6 13 3 3\r\n6 3 55\r\n13 5 6 3 13 3\r\n6 3 55\r\n13 5 6 3 3 13\r\n6 3 61\r\n13 5 6 13 3 3\r\n6 3 65\r\n13 5 6 13 3 3\r\n6 3 70\r\n13 5 6 13 3 3\r\n6 3 55\r\n15 5 6 13 3 3\r\n",
                "2 6\r\n3 6\r\n3 13\r\n3 6\r\n4 6\r\n4 6\r\n5 13\r\n4 6\r\n5 13\r\n6 13\r\n5 13\r\n"
            ],
            [
                "1\r\n11 1 29\r\n6 4 3 7 5 3 4 7 3 5 3\r\n",
                "4 3\r\n"
            ],
            [
                "1\r\n11 1000 100000\r\n99999 99998 99997 99996 99995 99994 99993 99992 99991 50000 50000\r\n",
                "2 50000\r\n"
            ],
            [
                "1\r\n21 1000 100055\r\n1 2 3 4 5 6 7 8 9 10 99999 99998 99997 99996 99995 99994 99993 99992 99991 50000 50000\r\n",
                "12 50000\r\n"
            ],
            [
                "1\r\n22 1000 100006\r\n1 2 3 99999 99998 99997 99996 99995 99994 99993 99992 99991 99990 99989 99988 99987 99986 99985 99984 99983 50000 50000\r\n",
                "5 50000\r\n"
            ],
            [
                "1\r\n7 1 100000\r\n100000 33333 33332 33331 33330 33329 33328\r\n",
                "2 33329\r\n"
            ],
            [
                "1\r\n20 1 100000\r\n100000 33333 33332 33331 33330 33329 33328 33327 33326 33325 33324 33323 33322 33321 33320 10000 10000 10000 10000 10000\r\n",
                "5 10000\r\n"
            ],
            [
                "1\r\n24 1000 299954\r\n99985 99985 99985 1 2 3 99999 99998 99997 99996 99995 99994 99993 99992 99991 99990 99989 99988 99987 99986 99984 99983 50000 50000\r\n",
                "6 99983\r\n"
            ],
            [
                "1\r\n24 5 299954\r\n99985 99985 99985 1 2 3 99999 99998 99997 99996 99995 99994 99993 99992 99991 99990 99989 99988 99987 99986 99984 99983 50000 50000\r\n",
                "5 50000\r\n"
            ],
            [
                "1\r\n24 5 199991\r\n99985 99985 99985 1 2 3 99999 99998 99997 99996 99995 99994 99993 99992 99991 99990 99989 99988 99987 99986 99984 99983 50000 50000\r\n",
                "5 50000\r\n"
            ],
            [
                "1\r\n24 6 199991\r\n99985 99985 99985 1 2 3 99999 99998 99997 99996 99995 99994 99993 99992 99991 99990 99989 99988 99987 99986 99984 99983 50000 50000\r\n",
                "6 99983\r\n"
            ],
            [
                "1\r\n24 5 299997\r\n99985 99985 99985 1 2 3 99999 99998 99997 99996 99995 99994 99993 99992 99991 99990 99989 99988 99987 99986 99984 99983 50000 50000\r\n",
                "5 50000\r\n"
            ]
        ]
    }
]