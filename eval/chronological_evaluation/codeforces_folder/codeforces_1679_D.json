[
    {
        "name": "Toss a Coin to Your Graph...",
        "description": "One day Masha was walking in the park and found a graph under a tree...\nSurprised? Did you think that this problem would have some logical and\nreasoned story? No way! So, the problem... Masha has an oriented graph which\n\n    i\n-th vertex contains some positive integer \n    a_i\n. Initially Masha\ncan put a coin at some vertex. In one operation she can move a coin placed in\nsome vertex \n    u\n to any other vertex \n    v\n such that there is an oriented\nedge \n    u \n    \u2192 v\n in the graph. Each time when the coin is placed in some\nvertex \n    i\n, Masha write down an integer \n    a_i\n in her notebook (in\nparticular, when Masha initially puts a coin at some vertex, she writes an\ninteger written at this vertex in her notebook). Masha wants to make exactly\n\n    k - 1\n operations in such way that the maximum number written in her\nnotebook is as small as possible. Input The first line contains three integers\n\n    n\n, \n    m\n and \n    k\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n, \n    0 \n    \u2264\n    m \n    \u2264 2 \n    \u00b7 10^5\n, \n    1 \n    \u2264 k \n    \u2264 10^18\n) \u2014 the number of\nvertices and edges in the graph, and the number of operation that Masha should\nmake. The second line contains \n    n\n integers \n    a_i\n (\n    1 \n    \u2264 a_i\n    \n    \u2264 10^9\n) \u2014 the numbers written in graph vertices. Each of the following\n\n    m\n lines contains two integers \n    u\n and \n    v\n (\n    1 \n    \u2264 u \n     v\n    \n    \u2264 n\n) \u2014 it means that there is an edge \n    u \n    \u2192 v\n in the graph.\nIt's guaranteed that graph doesn't contain loops and multi-edges. Output Print\none integer \u2014 the minimum value of the maximum number that Masha wrote in her\nnotebook during optimal coin movements. If Masha won't be able to perform \n    k\n    - 1\n operations, print \n    -1\n. Examples Input 6 7 4 1 10 2 3 4 5 1 2 1 3 3\n4 4 5 5 6 6 2 2 5 Output 4 Input 6 7 100 1 10 2 3 4 5 1 2 1 3 3 4 4 5 5 6 6 2\n2 5 Output 10 Input 2 1 5 1 1 1 2 Output -1 Input 1 0 1 1000000000 Output\n1000000000 Note Graph described in the first and the second examples is\nillustrated below. In the first example Masha can initially put a coin at\nvertex \n    1\n. After that she can perform three operations: \n    1 \n    \u2192 3\n,\n\n    3 \n    \u2192 4\n and \n    4 \n    \u2192 5\n. Integers \n    1, 2, 3\n and \n    4\n will\nbe written in the notepad. In the second example Masha can initially put a\ncoin at vertex \n    2\n. After that she can perform \n    99\n operations: \n    2\n    \n    \u2192 5\n, \n    5 \n    \u2192 6\n, \n    6 \n    \u2192 2\n, \n    2 \n    \u2192 5\n, and so on.\nIntegers \n    10, 4, 5, 10, 4, 5, \n    \u2026, 10, 4, 5, 10\n will be written in\nthe notepad. In the third example Masha won't be able to perform \n    4\n\noperations.\n\n",
        "cf_contest_id": 1679,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "dfs and similar",
            "dp",
            "graphs"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 7 4\r\n1 10 2 3 4 5\r\n1 2\r\n1 3\r\n3 4\r\n4 5\r\n5 6\r\n6 2\r\n2 5\r\n",
                "4\r\n"
            ],
            [
                "6 7 100\r\n1 10 2 3 4 5\r\n1 2\r\n1 3\r\n3 4\r\n4 5\r\n5 6\r\n6 2\r\n2 5\r\n",
                "10\r\n"
            ],
            [
                "2 1 5\r\n1 1\r\n1 2\r\n",
                "-1\r\n"
            ],
            [
                "1 0 1\r\n1000000000\r\n",
                "1000000000\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 2 100\r\n1 2\r\n1 2\r\n2 1\r\n",
                "2\r\n"
            ],
            [
                "1 0 1000000000000000000\r\n100500\r\n",
                "-1\r\n"
            ],
            [
                "2 0 1\r\n1 2\r\n",
                "1\r\n"
            ]
        ]
    }
]