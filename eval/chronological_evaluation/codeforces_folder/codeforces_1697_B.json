[
    {
        "name": "Promo",
        "description": "The store sells \n    n\n items, the price of the \n    i\n-th item is \n    p_i\n.\nThe store's management is going to hold a promotion: if a customer purchases\nat least \n    x\n items, \n    y\n cheapest of them are free. The management has\nnot yet decided on the exact values of \n    x\n and \n    y\n. Therefore, they\nask you to process \n    q\n queries: for the given values of \n    x\n and\n\n    y\n, determine the maximum total value of items received for free, if a\ncustomer makes one purchase. Note that all queries are independent; they don't\naffect the store's stock. Input The first line contains two integers \n    n\n\nand \n    q\n (\n    1 \n    \u2264 n, q \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the number of items in\nthe store and the number of queries, respectively. The second line contains\n\n    n\n integers \n    p_1, p_2, \n    \u2026, p_n\n (\n    1 \n    \u2264 p_i \n    \u2264 10^6\n),\nwhere \n    p_i\n \u2014 the price of the \n    i\n-th item. The following \n    q\n\nlines contain two integers \n    x_i\n and \n    y_i\n each (\n    1 \n    \u2264 y_i \n    \u2264\n    x_i \n    \u2264 n\n) \u2014 the values of the parameters \n    x\n and \n    y\n in the\n\n    i\n-th query. Output For each query, print a single integer \u2014 the maximum\ntotal value of items received for free for one purchase. Example Input 5 3 5 3\n1 5 2 3 2 1 1 5 3 Output 8 5 6 Note In the first query, a customer can buy\nthree items worth \n    5, 3, 5\n, the two cheapest of them are \n    3 + 5 = 8\n.\nIn the second query, a customer can buy two items worth \n    5\n and \n    5\n,\nthe cheapest of them is \n    5\n. In the third query, a customer has to buy all\nthe items to receive the three cheapest of them for free; their total price is\n\n    1 + 2 + 3 = 6\n.\n\n",
        "cf_contest_id": 1697,
        "cf_index": "B",
        "cf_rating": 900,
        "difficulty": 0,
        "cf_tags": [
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 3\r\n5 3 1 5 2\r\n3 2\r\n1 1\r\n5 3\r\n",
                "8\r\n5\r\n6\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 1\r\n100 200 100\r\n2 1\r\n",
                "100\r\n"
            ],
            [
                "2 1\r\n100 200\r\n1 1\r\n",
                "200\r\n"
            ],
            [
                "2 2\r\n100 200\r\n2 2\r\n2 1\r\n",
                "300\r\n100\r\n"
            ],
            [
                "13 3\r\n5 3 1 5 2 5 3 1 5 2 5 3 1\r\n3 2\r\n1 1\r\n5 3\r\n",
                "10\r\n5\r\n15\r\n"
            ],
            [
                "5 3\r\n100 200 300 400 500\r\n2 1\r\n1 1\r\n3 2\r\n",
                "400\r\n500\r\n700\r\n"
            ],
            [
                "5 3\r\n100 200 300 400 500\r\n1 1\r\n3 2\r\n2 2\r\n",
                "500\r\n700\r\n900\r\n"
            ],
            [
                "5 2\r\n100 200 300 400 500\r\n1 1\r\n3 2\r\n",
                "500\r\n700\r\n"
            ],
            [
                "1 1\r\n1000000\r\n1 1\r\n",
                "1000000\r\n"
            ]
        ]
    }
]