[
    {
        "name": "Let's Watch Football",
        "description": "Valeric and Valerko missed the last Euro football game, so they decided to\nwatch the game's key moments on the Net. They want to start watching as soon\nas possible but the connection speed is too low. If they turn on the video\nright now, it will \"hang up\" as the size of data to watch per second will be\nmore than the size of downloaded data per second. The guys want to watch the\nwhole video without any pauses, so they have to wait some integer number of\nseconds for a part of the video to download. After this number of seconds\npasses, they can start watching. Waiting for the whole video to download isn't\nnecessary as the video can download after the guys started to watch. Let's\nsuppose that video's length is c seconds and Valeric and Valerko wait t\nseconds before the watching. Then for any moment of time t0, t \u2264 t0 \u2264 c + t,\nthe following condition must fulfill: the size of data received in t0 seconds\nis not less than the size of data needed to watch t0 - t seconds of the video.\nOf course, the guys want to wait as little as possible, so your task is to\nfind the minimum integer number of seconds to wait before turning the video\non. The guys must watch the video without pauses. Input The first line\ncontains three space-separated integers a, b and c (1 \u2264 a, b, c \u2264 1000, a >\nb). The first number (a) denotes the size of data needed to watch one second\nof the video. The second number (b) denotes the size of data Valeric and\nValerko can download from the Net per second. The third number (c) denotes the\nvideo's length in seconds. Output Print a single number \u2014 the minimum integer\nnumber of seconds that Valeric and Valerko must wait to watch football without\npauses. Examples Input 4 1 1 Output 3 Input 10 3 2 Output 5 Input 13 12 1\nOutput 1 Note In the first sample video's length is 1 second and it is\nnecessary 4 units of data for watching 1 second of video, so guys should\ndownload 4 \u00b7 1 = 4 units of data to watch the whole video. The most optimal\nway is to wait 3 seconds till 3 units of data will be downloaded and then\nstart watching. While guys will be watching video 1 second, one unit of data\nwill be downloaded and Valerik and Valerko will have 4 units of data by the\nend of watching. Also every moment till the end of video guys will have more\ndata then necessary for watching. In the second sample guys need 2 \u00b7 10 = 20\nunits of data, so they have to wait 5 seconds and after that they will have 20\nunits before the second second ends. However, if guys wait 4 seconds, they\nwill be able to watch first second of video without pauses, but they will\ndownload 18 units of data by the end of second second and it is less then\nnecessary.\n\n",
        "cf_contest_id": 195,
        "cf_index": "A",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 1 1\r\n",
                "3\r\n"
            ],
            [
                "10 3 2\r\n",
                "5\r\n"
            ],
            [
                "13 12 1\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 1 3\r\n",
                "3\r\n"
            ],
            [
                "6 2 4\r\n",
                "8\r\n"
            ],
            [
                "5 2 1\r\n",
                "2\r\n"
            ],
            [
                "2 1 1\r\n",
                "1\r\n"
            ],
            [
                "2 1 4\r\n",
                "4\r\n"
            ],
            [
                "5 1 5\r\n",
                "20\r\n"
            ],
            [
                "2 1 2\r\n",
                "2\r\n"
            ],
            [
                "60 16 1\r\n",
                "3\r\n"
            ],
            [
                "64 12 8\r\n",
                "35\r\n"
            ],
            [
                "66 38 4\r\n",
                "3\r\n"
            ],
            [
                "70 32 1\r\n",
                "2\r\n"
            ],
            [
                "24 12 12\r\n",
                "12\r\n"
            ],
            [
                "24 19 9\r\n",
                "3\r\n"
            ],
            [
                "244 87 4\r\n",
                "8\r\n"
            ],
            [
                "305 203 421\r\n",
                "212\r\n"
            ],
            [
                "888 777 1\r\n",
                "1\r\n"
            ],
            [
                "888 777 1000\r\n",
                "143\r\n"
            ],
            [
                "888 777 888\r\n",
                "127\r\n"
            ],
            [
                "5 4 10\r\n",
                "3\r\n"
            ],
            [
                "1000 1 1\r\n",
                "999\r\n"
            ],
            [
                "1000 1 1000\r\n",
                "999000\r\n"
            ],
            [
                "1000 999 1\r\n",
                "1\r\n"
            ],
            [
                "1000 999 1000\r\n",
                "2\r\n"
            ],
            [
                "945 812 917\r\n",
                "151\r\n"
            ],
            [
                "993 992 991\r\n",
                "1\r\n"
            ],
            [
                "17 7 10\r\n",
                "15\r\n"
            ],
            [
                "17 10 7\r\n",
                "5\r\n"
            ],
            [
                "500 300 300\r\n",
                "200\r\n"
            ],
            [
                "196 169 144\r\n",
                "24\r\n"
            ],
            [
                "7 3 200\r\n",
                "267\r\n"
            ],
            [
                "9 3 300\r\n",
                "600\r\n"
            ],
            [
                "561 31 917\r\n",
                "15678\r\n"
            ],
            [
                "100 10 1\r\n",
                "9\r\n"
            ],
            [
                "1000 100 10\r\n",
                "90\r\n"
            ],
            [
                "18 14 10\r\n",
                "3\r\n"
            ],
            [
                "93 74 831\r\n",
                "214\r\n"
            ],
            [
                "960 935 994\r\n",
                "27\r\n"
            ],
            [
                "894 1 999\r\n",
                "892107\r\n"
            ],
            [
                "767 2 514\r\n",
                "196605\r\n"
            ],
            [
                "765 123 45\r\n",
                "235\r\n"
            ],
            [
                "1000 1 1000\r\n",
                "999000\r\n"
            ],
            [
                "765 123 899\r\n",
                "4693\r\n"
            ],
            [
                "759 10 258\r\n",
                "19325\r\n"
            ],
            [
                "100 1 10\r\n",
                "990\r\n"
            ],
            [
                "99 8 99\r\n",
                "1127\r\n"
            ],
            [
                "27 26 1\r\n",
                "1\r\n"
            ]
        ]
    }
]