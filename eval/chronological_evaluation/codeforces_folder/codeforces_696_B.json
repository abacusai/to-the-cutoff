[
    {
        "name": "Puzzles",
        "description": "Barney lives in country USC (United States of Charzeh). USC has n cities\nnumbered from 1 through n and n - 1 roads between them. Cities and roads of\nUSC form a rooted tree (Barney's not sure why it is rooted). Root of the tree\nis the city number 1. Thus if one will start his journey from city 1, he can\nvisit any city he wants by following roads. Some girl has stolen Barney's\nheart, and Barney wants to find her. He starts looking for in the root of the\ntree and (since he is Barney Stinson not a random guy), he uses a random DFS\nto search in the cities. A pseudo code of this algorithm is as follows: let\nstarting_time be an array of length n current_time = 0 dfs(v): current_time =\ncurrent_time + 1 starting_time[v] = current_time shuffle children[v] randomly\n(each permutation with equal possibility) // children[v] is vector of children\ncities of city v for u in children[v]: dfs(u) As told before, Barney will\nstart his journey in the root of the tree (equivalent to call dfs(1)). Now\nBarney needs to pack a backpack and so he wants to know more about his\nupcoming journey: for every city i, Barney wants to know the expected value of\nstarting_time[i]. He's a friend of Jon Snow and knows nothing, that's why he\nasked for your help. Input The first line of input contains a single integer n\n(1 \u2264 n \u2264 10^5) \u2014 the number of cities in USC. The second line contains n - 1\nintegers p2, p3, ..., pn (1 \u2264 pi < i), where pi is the number of the parent\ncity of city number i in the tree, meaning there is a road between cities\nnumbered pi and i in USC. Output In the first and only line of output print n\nnumbers, where i-th number is the expected value of starting_time[i]. Your\nanswer for each city will be considered correct if its absolute or relative\nerror does not exceed 10^-6. Examples Input 7 1 2 1 1 4 4 Output 1.0 4.0 5.0\n3.5 4.5 5.0 5.0 Input 12 1 1 2 2 4 4 3 3 1 10 8 Output 1.0 5.0 5.5 6.5 7.5 8.0\n8.0 7.0 7.5 6.5 7.5 8.0\n\n",
        "cf_contest_id": 696,
        "cf_index": "B",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "math",
            "probabilities",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n1 2 1 1 4 4\r\n",
                "1 4.0 5.0 3.5 4.5 5.0 5.0"
            ],
            [
                "12\r\n1 1 2 2 4 4 3 3 1 10 8\r\n",
                "1 5.0 5.5 6.5 7.5 8.0 8.0 7.0 7.5 6.5 7.5 8.0"
            ]
        ],
        "private_cases": [
            [
                "3\r\n1 2\r\n",
                "1 2.0 3.0"
            ],
            [
                "8\r\n1 1 2 2 3 6 1\r\n",
                "1 4.0 4.0 5.5 5.5 5.0 6.0 5.0"
            ],
            [
                "85\r\n1 1 2 2 4 6 1 3 6 3 3 11 9 14 12 5 8 11 16 19 12 17 2 19 1 24 6 2 6 6 24 3 20 1 1 1 17 8 4 25 31 32 39 12 35 23 31 26 46 9 37 7 5 23 41 41 39 9 11 54 36 54 28 15 25 58 56 18 23 70 68 18 3 48 57 70 15 65 22 35 25 13 49 34\r\n",
                "1 28.5 27.0 38.0 38.5 39.5 44.5 40.0 40.5 45.0 37.0 40.5 44.0 42.5 43.5 43.0 41.0 43.0 39.5 44.0 45.0 44.0 42.5 42.5 41.0 42.5 44.5 44.5 44.0 45.0 43.5 44.0 44.0 45.0 42.0 43.0 43.0 45.0 42.5 44.5 43.0 45.5 45.0 44.5 44.5 43.5 45.5 45.0 43.5 44.5 44.5 44.0 45.5 43.5 45.5 45.0 45.5 44.0 44.5 44.5 45.0 44.0 45.0 45.5 45.0 45.5 45.0 46.0 44.5 44.5 46.0 47.0 44.5 44.0 46.0 46.5 46.0 45.5 46.0 45.0 44.0 45.5 45.0 44.5 46.0"
            ],
            [
                "1\r\n",
                "1"
            ],
            [
                "2\r\n1\r\n",
                "1 2.0"
            ],
            [
                "10\r\n1 2 2 2 5 4 6 5 6\r\n",
                "1 2.0 6.5 6.0 4.5 6.0 7.0 7.5 7.0 7.5"
            ]
        ]
    }
]