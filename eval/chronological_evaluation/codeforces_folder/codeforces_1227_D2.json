[
    {
        "name": "Optimal Subsequences (Hard Version)",
        "description": "This is the harder version of the problem. In this version, \n    1 \n    \u2264 n, m\n    \n    \u2264 2\n    \u00b710^5\n. You can hack this problem if you locked it. But you can\nhack the previous problem only if you locked both problems. You are given a\nsequence of integers \n    a=[a_1,a_2,\n    \u2026,a_n]\n of length \n    n\n. Its\nsubsequence is obtained by removing zero or more elements from the sequence\n\n    a\n (they do not necessarily go consecutively). For example, for the\nsequence \n    a=[11,20,11,33,11,20,11]\n: \n    [11,20,11,33,11,20,11]\n,\n\n    [11,20,11,33,11,20]\n, \n    [11,11,11,11]\n, \n    [20]\n, \n    [33,20]\n are\nsubsequences (these are just some of the long list); \n    [40]\n,\n\n    [33,33]\n, \n    [33,20,20]\n, \n    [20,20,11,11]\n are not subsequences.\nSuppose that an additional non-negative integer \n    k\n (\n    1 \n    \u2264 k \n    \u2264\n    n\n) is given, then the subsequence is called optimal if: it has a length of\n\n    k\n and the sum of its elements is the maximum possible among all\nsubsequences of length \n    k\n; and among all subsequences of length \n    k\n\nthat satisfy the previous item, it is lexicographically minimal. Recall that\nthe sequence \n    b=[b_1, b_2, \n    \u2026, b_k]\n is lexicographically smaller\nthan the sequence \n    c=[c_1, c_2, \n    \u2026, c_k]\n if the first element (from\nthe left) in which they differ less in the sequence \n    b\n than in \n    c\n.\nFormally: there exists \n    t\n (\n    1 \n    \u2264 t \n    \u2264 k\n) such that\n\n    b_1=c_1\n, \n    b_2=c_2\n, ..., \n    b_t-1=c_t-1\n and at the same time\n\n    b_t<c_t\n. For example: \n    [10, 20, 20]\n lexicographically less than\n\n    [10, 21, 1]\n, \n    [7, 99, 99]\n is lexicographically less than \n    [10,\n    21, 1]\n, \n    [10, 21, 0]\n is lexicographically less than \n    [10, 21, 1]\n.\nYou are given a sequence of \n    a=[a_1,a_2,\n    \u2026,a_n]\n and \n    m\n\nrequests, each consisting of two numbers \n    k_j\n and \n    pos_j\n (\n    1 \n    \u2264\n    k \n    \u2264 n\n, \n    1 \n    \u2264 pos_j \n    \u2264 k_j\n). For each query, print the value\nthat is in the index \n    pos_j\n of the optimal subsequence of the given\nsequence \n    a\n for \n    k=k_j\n. For example, if \n    n=4\n,\n\n    a=[10,20,30,20]\n, \n    k_j=2\n, then the optimal subsequence is\n\n    [20,30]\n \u2014 it is the minimum lexicographically among all subsequences of\nlength \n    2\n with the maximum total sum of items. Thus, the answer to the\nrequest \n    k_j=2\n, \n    pos_j=1\n is the number \n    20\n, and the answer to\nthe request \n    k_j=2\n, \n    pos_j=2\n is the number \n    30\n. Input The first\nline contains an integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \u00b710^5\n) \u2014 the\nlength of the sequence \n    a\n. The second line contains elements of the\nsequence \n    a\n: integer numbers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i\n    \n    \u2264 10^9\n). The third line contains an integer \n    m\n (\n    1 \n    \u2264 m \n    \u2264\n    2\n    \u00b710^5\n) \u2014 the number of requests. The following \n    m\n lines contain\npairs of integers \n    k_j\n and \n    pos_j\n (\n    1 \n    \u2264 k \n    \u2264 n\n, \n    1\n    \n    \u2264 pos_j \n    \u2264 k_j\n) \u2014 the requests. Output Print \n    m\n integers\n\n    r_1, r_2, \n    \u2026, r_m\n (\n    1 \n    \u2264 r_j \n    \u2264 10^9\n) one per line:\nanswers to the requests in the order they appear in the input. The value of\n\n    r_j\n should be equal to the value contained in the position \n    pos_j\n\nof the optimal subsequence for \n    k=k_j\n. Examples Input 3 10 20 10 6 1 1 2\n1 2 2 3 1 3 2 3 3 Output 20 10 20 10 20 10 Input 7 1 2 1 3 1 2 1 9 2 1 2 2 3 1\n3 2 3 3 1 1 7 1 7 7 7 4 Output 2 3 2 3 2 3 1 1 3 Note In the first example,\nfor \n    a=[10,20,10]\n the optimal subsequences are: for \n    k=1\n:\n\n    [20]\n, for \n    k=2\n: \n    [10,20]\n, for \n    k=3\n: \n    [10,20,10]\n.\n\n",
        "cf_contest_id": 1227,
        "cf_index": "D2",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n10 20 10\r\n6\r\n1 1\r\n2 1\r\n2 2\r\n3 1\r\n3 2\r\n3 3\r\n",
                "20\r\n10\r\n20\r\n10\r\n20\r\n10\r\n"
            ],
            [
                "7\r\n1 2 1 3 1 2 1\r\n9\r\n2 1\r\n2 2\r\n3 1\r\n3 2\r\n3 3\r\n1 1\r\n7 1\r\n7 7\r\n7 4\r\n",
                "2\r\n3\r\n2\r\n3\r\n2\r\n3\r\n1\r\n1\r\n3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n3\r\n1 1\r\n1 1\r\n1 1\r\n",
                "1\r\n1\r\n1\r\n"
            ],
            [
                "1\r\n1000000000\r\n1\r\n1 1\r\n",
                "1000000000\r\n"
            ],
            [
                "2\r\n1 10\r\n3\r\n2 2\r\n2 1\r\n1 1\r\n",
                "10\r\n1\r\n10\r\n"
            ],
            [
                "2\r\n3922 3922\r\n3\r\n2 2\r\n2 1\r\n1 1\r\n",
                "3922\r\n3922\r\n3922\r\n"
            ],
            [
                "2\r\n392222 322\r\n3\r\n2 2\r\n2 1\r\n1 1\r\n",
                "322\r\n392222\r\n392222\r\n"
            ],
            [
                "5\r\n3 1 4 1 2\r\n15\r\n5 5\r\n5 4\r\n5 3\r\n5 2\r\n5 1\r\n4 4\r\n4 3\r\n4 2\r\n4 1\r\n3 3\r\n3 2\r\n3 1\r\n2 2\r\n2 1\r\n1 1\r\n",
                "2\r\n1\r\n4\r\n1\r\n3\r\n2\r\n4\r\n1\r\n3\r\n2\r\n4\r\n3\r\n4\r\n3\r\n4\r\n"
            ]
        ]
    }
]