[
    {
        "name": "Omkar and Landslide",
        "description": "Omkar is standing at the foot of Celeste mountain. The summit is \n    n\n\nmeters away from him, and he can see all of the mountains up to the summit, so\nfor all \n    1 \n    \u2264 j \n    \u2264 n\n he knows that the height of the mountain at\nthe point \n    j\n meters away from himself is \n    h_j\n meters. It turns out\nthat for all \n    j\n satisfying \n    1 \n    \u2264 j \n    \u2264 n - 1\n, \n    h_j < h_j +\n    1\n (meaning that heights are strictly increasing). Suddenly, a landslide\noccurs! While the landslide is occurring, the following occurs: every minute,\nif \n    h_j + 2 \n    \u2264 h_j + 1\n, then one square meter of dirt will slide\nfrom position \n    j + 1\n to position \n    j\n, so that \n    h_j + 1\n is\ndecreased by \n    1\n and \n    h_j\n is increased by \n    1\n. These changes\noccur simultaneously, so for example, if \n    h_j + 2 \n    \u2264 h_j + 1\n and\n\n    h_j + 1 + 2 \n    \u2264 h_j + 2\n for some \n    j\n, then \n    h_j\n will be\nincreased by \n    1\n, \n    h_j + 2\n will be decreased by \n    1\n, and\n\n    h_j + 1\n will be both increased and decreased by \n    1\n, meaning that\nin effect \n    h_j + 1\n is unchanged during that minute. The landslide ends\nwhen there is no \n    j\n such that \n    h_j + 2 \n    \u2264 h_j + 1\n. Help Omkar\nfigure out what the values of \n    h_1, \n    \u2026, h_n\n will be after the\nlandslide ends. It can be proven that under the given constraints, the\nlandslide will always end in finitely many minutes. Note that because of the\nlarge amount of input, it is recommended that your code uses fast IO. Input\nThe first line contains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264\n    10^6\n). The second line contains \n    n\n integers \n    h_1, h_2, \n    \u2026,\n    h_n\n satisfying \n    0 \n    \u2264 h_1 < h_2 < \n    \u2026 < h_n \n    \u2264 10^12\n \u2014\nthe heights. Output Output \n    n\n integers, where the \n    j\n-th integer is\nthe value of \n    h_j\n after the landslide has stopped. Example Input 4 2 6 7\n8 Output 5 5 6 7 Note Initially, the mountain has heights \n    2, 6, 7, 8\n. In\nthe first minute, we have \n    2 + 2 \n    \u2264 6\n, so \n    2\n increases to\n\n    3\n and \n    6\n decreases to \n    5\n, leaving \n    3, 5, 7, 8\n. In the\nsecond minute, we have \n    3 + 2 \n    \u2264 5\n and \n    5 + 2 \n    \u2264 7\n, so\n\n    3\n increases to \n    4\n, \n    5\n is unchanged, and \n    7\n decreases to\n\n    6\n, leaving \n    4, 5, 6, 8\n. In the third minute, we have \n    6 + 2\n    \n    \u2264 8\n, so \n    6\n increases to \n    7\n and \n    8\n decreases to \n    7\n,\nleaving \n    4, 5, 7, 7\n. In the fourth minute, we have \n    5 + 2 \n    \u2264 7\n,\nso \n    5\n increases to \n    6\n and \n    7\n decreases to \n    6\n, leaving\n\n    4, 6, 6, 7\n. In the fifth minute, we have \n    4 + 2 \n    \u2264 6\n, so\n\n    4\n increases to \n    5\n and \n    6\n decreases to \n    5\n, leaving \n    5,\n    5, 6, 7\n. In the sixth minute, nothing else can change so the landslide\nstops and our answer is \n    5, 5, 6, 7\n.\n\n",
        "cf_contest_id": 1392,
        "cf_index": "F",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "constructive algorithms",
            "data structures",
            "greedy",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2 6 7 8\r\n",
                "5 5 6 7 "
            ]
        ],
        "private_cases": [
            [
                "1\r\n0\r\n",
                "0 "
            ],
            [
                "100\r\n75 78 155 169 264 333 369 416 439 486 503 541 557 635 726 745 814 845 899 914 943 1016 1090 1132 1191 1199 1258 1323 1423 1491 1557 1562 1583 1663 1707 1711 1729 1767 1819 1894 1916 1926 1953 2022 2042 2055 2061 2125 2135 2170 2183 2215 2310 2338 2377 2420 2425 2473 2484 2537 2551 2576 2577 2593 2647 2717 2746 2757 2783 2854 2864 2918 2975 3075 3100 3159 3196 3218 3240 3336 3429 3501 3585 3612 3677 3738 3815 3851 3920 3980 4045 4098 4152 4224 4279 4349 4380 4385 4446 4504\r\n",
                "2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 "
            ]
        ]
    }
]