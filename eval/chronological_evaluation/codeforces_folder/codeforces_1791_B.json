[
    {
        "name": "Following Directions",
        "description": "Alperen is standing at the point \n    (0,0)\n. He is given a string \n    s\n of\nlength \n    n\n and performs \n    n\n moves. The \n    i\n-th move is as follows:\nif \n    s_i =\n, then move one unit left; if \n    s_i =\n, then move one unit right; if \n    s_i =\n, then\nmove one unit up; if \n    s_i =\n, then move one unit down. If\nAlperen starts at the center point, he can make the four moves shown. There is\na candy at \n    (1,1)\n (that is, one unit above and one unit to the right of\nAlperen's starting point). You need to determine if Alperen ever passes the\ncandy. Alperen's path in the first test case. Input The first line of the\ninput contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number\nof testcases. The first line of each test case contains an integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 50\n) \u2014 the length of the string. The second line of\neach test case contains a string \n    s\n of length \n    n\n consisting of\ncharacters \n    \n, \n    \n, \n    \n, and\n\n    \n, denoting the moves Alperen makes. Output For each test\ncase, output \"YES\" (without quotes) if Alperen passes the candy, and \"NO\"\n(without quotes) otherwise. You can output the answer in any case (for\nexample, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a\npositive answer). Example Input 7 7 UUURDDL 2 UR 8 RRRUUDDD 3 LLL 4 DUUR 5\nRUDLL 11 LLLLDDRUDRD Output YES YES NO NO YES YES NO Note In the first test\ncase, Alperen follows the path \n    \n\n    (0,0) \n    \n    \n    \u2192\n    (0,1) \n    \n    \n    \u2192 (0,2) \n    \n    \n    \u2192\n    (0,3) \n    \n    \n    \u2192 (1,3) \n    \n    \n    \u2192\n    (1,2) \n    \n    \n    \u2192\n    \n    (1,1)\n    \n    \n    \u2192 (0,1).\n\n    \n Note that Alperen doesn't need to\nend at the candy's location of \n    (1,1)\n, he just needs to pass it at some\npoint. In the second test case, Alperen follows the path \n    \n\n    (0,0)\n    \n    \n    \n    \u2192 (0,1) \n    \n    \n    \u2192\n    \n    (1,1).\n\n    \n In the third test case, Alperen\nfollows the path \n    \n\n    (0,0) \n    \n    \n    \u2192 (1,0)\n    \n    \n    \n    \u2192 (2,0) \n    \n    \n    \u2192 (3,0)\n    \n    \n    \n    \u2192 (3,1) \n    \n    \n    \u2192 (3,2)\n    \n    \n    \n    \u2192 (3,1) \n    \n    \n    \u2192 (3,0)\n    \n    \n    \n    \u2192 (3,-1).\n\n    \n In the fourth test case, Alperen\nfollows the path \n    \n\n    (0,0) \n    \n    \n    \u2192 (-1,0)\n    \n    \n    \n    \u2192 (-2,0) \n    \n    \n    \u2192\n    (-3,0).\n\n    \n\n\n",
        "cf_contest_id": 1791,
        "cf_index": "B",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "geometry",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n7\r\nUUURDDL\r\n2\r\nUR\r\n8\r\nRRRUUDDD\r\n3\r\nLLL\r\n4\r\nDUUR\r\n5\r\nRUDLL\r\n11\r\nLLLLDDRUDRD\r\n",
                "YES\r\nYES\r\nNO \r\nNO \r\nYES\r\nYES\r\nNO \r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n7\r\nUUURDDL\r\n",
                "YES\r\n"
            ],
            [
                "9\r\n7\r\nUUURDDL\r\n2\r\nUR\r\n8\r\nRRRUUDDD\r\n3\r\nLLL\r\n4\r\nDUUR\r\n5\r\nRUDLL\r\n11\r\nLLLLDDRUDRD\r\n10\r\nLLLLDDRUDR\r\n5\r\nRUDLL\r\n",
                "YES\r\nYES\r\nNO \r\nNO \r\nYES\r\nYES\r\nNO \r\nNO \r\nYES\r\n"
            ],
            [
                "1\r\n12\r\nDDDLLLRRRUUU\r\n",
                "NO \r\n"
            ],
            [
                "1\r\n1\r\nL\r\n",
                "NO \r\n"
            ]
        ]
    }
]