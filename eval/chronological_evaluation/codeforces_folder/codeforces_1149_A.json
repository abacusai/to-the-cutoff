[
    {
        "name": "Prefix Sum Primes",
        "description": "We're giving away nice huge bags containing number tiles! A bag we want to\npresent to you contains \n    n\n tiles. Each of them has a single number\nwritten on it \u2014 either \n    1\n or \n    2\n. However, there is one condition you\nmust fulfill in order to receive the prize. You will need to put all the tiles\nfrom the bag in a sequence, in any order you wish. We will then compute the\nsums of all prefixes in the sequence, and then count how many of these sums\nare prime numbers. If you want to keep the prize, you will need to maximize\nthe number of primes you get. Can you win the prize? Hurry up, the bags are\nwaiting! Input The first line of the input contains a single integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 200\n     000\n) \u2014 the number of number tiles in the bag.\nThe following line contains \n    n\n space-separated integers \n    a_1, a_2,\n    \n    \u2026, a_n\n (\n    a_i \n    \u2208\n    \n    1, 2\n) \u2014 the values written on the\ntiles. Output Output a permutation \n    b_1, b_2, \n    \u2026, b_n\n of the input\nsequence \n    (a_1, a_2, \n    \u2026, a_n)\n maximizing the number of the prefix\nsums being prime numbers. If there are multiple optimal permutations, output\nany. Examples Input 5 1 2 1 2 1 Output 1 1 1 2 2 Input 9 1 1 2 1 1 1 2 1 1\nOutput 1 1 1 2 1 1 1 2 1 Note The first solution produces the prefix sums\n\n    1, \n    \n    2, \n    \n    3,\n    \n    \n    5, \n    \n    7\n (four primes\nconstructed), while the prefix sums in the second solution are \n    1,\n    \n    \n    2, \n    \n    3,\n    \n    \n    5, 6, \n    \n    7, 8, 10,\n    \n    \n    11\n (five primes). Primes are marked bold and\nblue. In each of these cases, the number of produced primes is maximum\npossible.\n\n",
        "cf_contest_id": 1149,
        "cf_index": "A",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 2 1 2 1\r\n",
                "2 1 2 1 1\r\n"
            ],
            [
                "9\r\n1 1 2 1 1 1 2 1 1\r\n",
                "2 1 2 1 1 1 1 1 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "1\r\n2\r\n",
                "2\r\n"
            ],
            [
                "2\r\n1 2\r\n",
                "2 1\r\n"
            ],
            [
                "4\r\n1 1 1 1\r\n",
                "1 1 1 1\r\n"
            ],
            [
                "4\r\n2 1 1 1\r\n",
                "2 1 1 1\r\n"
            ],
            [
                "4\r\n1 2 2 1\r\n",
                "2 1 2 1\r\n"
            ],
            [
                "4\r\n1 2 2 2\r\n",
                "2 1 2 2\r\n"
            ],
            [
                "5\r\n2 1 1 1 1\r\n",
                "2 1 1 1 1\r\n"
            ],
            [
                "2\r\n1 1\r\n",
                "1 1\r\n"
            ],
            [
                "5\r\n1 2 2 2 2\r\n",
                "2 1 2 2 2\r\n"
            ],
            [
                "5\r\n2 2 2 2 2\r\n",
                "2 2 2 2 2\r\n"
            ],
            [
                "41\r\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2\r\n",
                "2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\r\n"
            ],
            [
                "214\r\n1 2 2 1 1 1 2 2 2 2 1 1 1 2 2 2 2 2 2 1 2 1 1 2 2 1 1 2 2 2 2 1 2 2 2 1 1 2 2 2 1 1 2 2 1 2 2 2 1 1 2 1 1 2 1 1 1 2 2 2 2 1 2 2 2 1 2 1 2 1 1 2 2 1 1 2 1 2 2 2 2 2 2 2 1 2 1 2 2 1 2 2 2 1 2 2 1 2 2 1 2 2 2 2 1 2 2 2 1 1 2 2 2 2 2 2 1 2 2 2 2 1 1 1 2 2 2 1 2 1 2 1 1 2 1 1 1 2 2 2 1 2 2 2 2 2 2 2 1 2 2 1 1 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 1 2 1 1 2 2 2 2 2 2 2 2 2 2 1 1 2 2 2 1 2 2 2 2 2 2 2 2 1 2 2 1 1 2 2 1 2 1 2 1\r\n",
                "2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n"
            ],
            [
                "3\r\n1 1 1\r\n",
                "1 1 1\r\n"
            ],
            [
                "3\r\n1 2 2\r\n",
                "2 1 2\r\n"
            ],
            [
                "2\r\n2 2\r\n",
                "2 2\r\n"
            ],
            [
                "5\r\n2 1 1 2 2\r\n",
                "2 1 2 2 1\r\n"
            ],
            [
                "10\r\n1 1 1 1 2 2 2 2 2 2\r\n",
                "2 1 2 2 2 2 2 1 1 1\r\n"
            ],
            [
                "10\r\n1 1 1 2 1 1 1 2 2 2\r\n",
                "2 1 2 2 2 1 1 1 1 1\r\n"
            ],
            [
                "3\r\n1 1 2\r\n",
                "2 1 1\r\n"
            ]
        ]
    }
]