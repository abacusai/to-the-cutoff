[
    {
        "name": "Stairs and Elevators",
        "description": "In the year of \n    30XX\n participants of some world programming championship\nlive in a single large hotel. The hotel has \n    n\n floors. Each floor has\n\n    m\n sections with a single corridor connecting all of them. The sections\nare enumerated from \n    1\n to \n    m\n along the corridor, and all sections\nwith equal numbers on different floors are located exactly one above the\nother. Thus, the hotel can be represented as a rectangle of height \n    n\n and\nwidth \n    m\n. We can denote sections with pairs of integers \n    (i, j)\n,\nwhere \n    i\n is the floor, and \n    j\n is the section number on the floor.\nThe guests can walk along the corridor on each floor, use stairs and\nelevators. Each stairs or elevator occupies all sections \n    (1, x)\n, \n    (2,\n    x)\n, \n    \u2026\n, \n    (n, x)\n for some \n    x\n between \n    1\n and\n\n    m\n. All sections not occupied with stairs or elevators contain guest\nrooms. It takes one time unit to move between neighboring sections on the same\nfloor or to move one floor up or down using stairs. It takes one time unit to\nmove up to \n    v\n floors in any direction using an elevator. You can assume\nyou don't have to wait for an elevator, and the time needed to enter or exit\nan elevator is negligible. You are to process \n    q\n queries. Each query is a\nquestion \"what is the minimum time needed to go from a room in section\n\n    (x_1, y_1)\n to a room in section \n    (x_2, y_2)\n?\" Input The first line\ncontains five integers \n    n, m, c_l, c_e, v\n (\n    2 \n    \u2264 n, m \n    \u2264\n    10^8\n, \n    0 \n    \u2264 c_l, c_e \n    \u2264 10^5\n, \n    1 \n    \u2264 c_l + c_e \n    \u2264 m -\n    1\n, \n    1 \n    \u2264 v \n    \u2264 n - 1\n) \u2014 the number of floors and section on\neach floor, the number of stairs, the number of elevators and the maximum\nspeed of an elevator, respectively. The second line contains \n    c_l\n\nintegers \n    l_1, \n    \u2026, l_c_l\n in increasing order (\n    1 \n    \u2264 l_i\n    \n    \u2264 m\n), denoting the positions of the stairs. If \n    c_l = 0\n, the\nsecond line is empty. The third line contains \n    c_e\n integers \n    e_1,\n    \n    \u2026, e_c_e\n in increasing order, denoting the elevators positions in\nthe same format. It is guaranteed that all integers \n    l_i\n and \n    e_i\n\nare distinct. The fourth line contains a single integer \n    q\n (\n    1 \n    \u2264 q\n    \n    \u2264 10^5\n) \u2014 the number of queries. The next \n    q\n lines describe\nqueries. Each of these lines contains four integers \n    x_1, y_1, x_2, y_2\n\n(\n    1 \n    \u2264 x_1, x_2 \n    \u2264 n\n, \n    1 \n    \u2264 y_1, y_2 \n    \u2264 m\n) \u2014 the\ncoordinates of starting and finishing sections for the query. It is guaranteed\nthat the starting and finishing sections are distinct. It is also guaranteed\nthat these sections contain guest rooms, i. e. \n    y_1\n and \n    y_2\n are not\namong \n    l_i\n and \n    e_i\n. Output Print \n    q\n integers, one per line \u2014\nthe answers for the queries. Example Input 5 6 1 1 3 2 5 3 1 1 5 6 1 3 5 4 3 3\n5 3 Output 7 5 4 Note In the first query the optimal way is to go to the\nelevator in the 5-th section in four time units, use it to go to the fifth\nfloor in two time units and go to the destination in one more time unit. In\nthe second query it is still optimal to use the elevator, but in the third\nquery it is better to use the stairs in the section 2.\n\n",
        "cf_contest_id": 925,
        "cf_index": "A",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "binary search"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 6 1 1 3\r\n2\r\n5\r\n3\r\n1 1 5 6\r\n1 3 5 4\r\n3 3 5 3\r\n",
                "7\r\n5\r\n4\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 2 0 1 1\r\n\r\n1\r\n1\r\n1 2 2 2\r\n",
                "3\r\n"
            ],
            [
                "4 4 1 0 1\r\n4\r\n\r\n5\r\n1 1 2 2\r\n1 3 2 2\r\n3 3 4 3\r\n3 2 2 2\r\n1 2 2 3\r\n",
                "6\r\n4\r\n3\r\n5\r\n4\r\n"
            ],
            [
                "10 10 1 8 4\r\n10\r\n2 3 4 5 6 7 8 9\r\n10\r\n1 1 3 1\r\n2 1 7 1\r\n1 1 9 1\r\n7 1 4 1\r\n10 1 7 1\r\n2 1 7 1\r\n3 1 2 1\r\n5 1 2 1\r\n10 1 5 1\r\n6 1 9 1\r\n",
                "3\r\n4\r\n4\r\n3\r\n3\r\n4\r\n3\r\n3\r\n4\r\n3\r\n"
            ],
            [
                "2 5 1 0 1\r\n2\r\n\r\n1\r\n1 4 1 5\r\n",
                "1\r\n"
            ],
            [
                "2 10 1 1 1\r\n1\r\n10\r\n1\r\n1 5 1 8\r\n",
                "3\r\n"
            ],
            [
                "4 4 1 0 1\r\n1\r\n\r\n1\r\n1 2 1 4\r\n",
                "2\r\n"
            ],
            [
                "2 4 1 1 1\r\n1\r\n2\r\n1\r\n2 3 2 4\r\n",
                "1\r\n"
            ],
            [
                "1000 1000 1 1 10\r\n1\r\n2\r\n1\r\n1 900 1 1000\r\n",
                "100\r\n"
            ],
            [
                "2 4 1 1 1\r\n1\r\n4\r\n1\r\n1 2 1 3\r\n",
                "1\r\n"
            ],
            [
                "5 5 1 1 1\r\n3\r\n2\r\n1\r\n1 5 1 1\r\n",
                "4\r\n"
            ]
        ]
    }
]