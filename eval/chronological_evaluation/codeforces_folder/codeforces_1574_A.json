[
    {
        "name": "Regular Bracket Sequences",
        "description": "A bracket sequence is a string containing only characters \"(\" and \")\". A\nregular bracket sequence is a bracket sequence that can be transformed into a\ncorrect arithmetic expression by inserting characters \"1\" and \"+\" between the\noriginal characters of the sequence. For example, bracket sequences \"()()\" and\n\"(())\" are regular (the resulting expressions are: \"(1)+(1)\" and \"((1+1)+1)\"),\nand \")(\", \"(\" and \")\" are not. You are given an integer \n    n\n. Your goal is\nto construct and print exactly \n    n\n different regular bracket sequences of\nlength \n    2n\n. Input The first line contains one integer \n    t\n (\n    1 \n    \u2264\n    t \n    \u2264 50\n) \u2014 the number of test cases. Each test case consists of one line\ncontaining one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 50\n). Output For each\ntest case, print \n    n\n lines, each containing a regular bracket sequence of\nlength exactly \n    2n\n. All bracket sequences you output for a testcase\nshould be different (though they may repeat in different test cases). If there\nare multiple answers, print any of them. It can be shown that it's always\npossible. Example Input 3 3 1 3 Output ()()() ((())) (()()) () ((())) (())()\n()(())\n\n",
        "cf_contest_id": 1574,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3\r\n3\r\n1\r\n3\r\n",
                "()()()\r\n(()())\r\n((()))\r\n()\r\n()()()\r\n(()())\r\n((()))\r\n"
            ]
        ],
        "private_cases": []
    }
]