[
    {
        "name": "Permutation Operations",
        "description": "You are given a permutation \n    a\n of size \n    n\n and you should perform\n\n    n\n operations on it. In the \n    i\n-th operation, you can choose a non-\nempty suffix of \n    a\n and increase all of its elements by \n    i\n. How can\nwe perform the operations to minimize the number of inversions in the final\narray? Note that you can perform operations on the same suffix any number of\ntimes you want. A permutation of size \n    n\n is an array of size \n    n\n such\nthat each integer from \n    1\n to \n    n\n occurs exactly once in this array. A\nsuffix is several consecutive elements of an array that include the last\nelement of the array. An inversion in an array \n    a\n is a pair of indices\n\n    (i, j)\n such that \n    i > j\n and \n    a_i < a_j\n. Input Each test\ncontains multiple test cases. The first line contains the number of test cases\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n). The description of the test cases\nfollows. The first line of each test case contains a single integer \n    n\n\n(\n    1 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the size of the array. The second line contains\n\n    n\n distinct integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i\n    \n    \u2264 n\n), the initial permutation \n    a\n. It's guaranteed that the sum of\n\n    n\n over all test cases does not exceed \n    2 \n    \u00b7 10^5\n. Output For\neach test case, print \n    n\n integers \n    x_1, x_2, \n    \u2026, x_n\n\n(\n    1 \n    \u2264 x_i\n    \u2264 n\n for each \n    1 \n    \u2264 i \n    \u2264 n\n) indicating that\nthe \n    i\n-th operation must be applied to the suffix starting at index\n\n    x_i\n. If there are multiple answers, print any of them. Example Input 4\n4 1 2 3 4 5 1 3 2 4 5 3 2 3 1 1 1 Output 1 1 1 1 1 4 3 2 1 1 3 3 1 Note In the\nfirst test case one of the optimal solutions is to increase the whole array on\neach operation (that is, choose the suffix starting at index \n    1\n). The\nfinal array \n    [11, 12, 13, 14]\n contains \n    0\n inversions. In the second\ntest case, \n    a\n will be equal to \n    [2, 4, 3, 5, 6]\n, \n    [2, 4, 3, 7,\n    8]\n, \n    [2, 4, 6, 10, 11]\n, \n    [2, 8, 10, 14, 15]\n and \n    [7, 13, 15,\n    19, 20]\n after the first, second, third, fourth, and fifth operations,\nrespectively. So the final array \n    a\n has zero inversions.\n\n",
        "cf_contest_id": 1746,
        "cf_index": "C",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "implementation",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4\r\n1 2 3 4\r\n5\r\n1 3 2 4 5\r\n3\r\n2 3 1\r\n1\r\n1\r\n",
                "2 3 4 1\r\n2 4 3 5 1\r\n1 2 3\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n8\r\n7 6 5 4 3 2 8 1\r\n",
                "1 7 6 5 4 3 2 8\r\n"
            ],
            [
                "1\r\n10\r\n10 3 2 1 9 8 7 6 5 4\r\n",
                "5 4 3 1 10 9 8 7 6 2\r\n"
            ],
            [
                "1\r\n10\r\n10 1 9 8 7 6 5 4 3 2\r\n",
                "3 1 10 9 8 7 6 5 4 2\r\n"
            ],
            [
                "1\r\n8\r\n8 1 7 6 5 4 3 2\r\n",
                "3 1 8 7 6 5 4 2\r\n"
            ],
            [
                "1\r\n11\r\n6 2 11 1 10 9 8 7 5 4 3\r\n",
                "5 3 1 11 10 2 9 8 7 6 4\r\n"
            ],
            [
                "1\r\n10\r\n8 7 6 5 4 3 9 2 10 1\r\n",
                "1 9 7 6 5 4 3 2 8 10\r\n"
            ],
            [
                "1\r\n9\r\n9 1 8 7 6 5 4 3 2\r\n",
                "3 1 9 8 7 6 5 4 2\r\n"
            ],
            [
                "1\r\n20\r\n19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 20 1\r\n",
                "1 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 20\r\n"
            ],
            [
                "1\r\n10\r\n6 5 4 2 9 8 7 1 10 3\r\n",
                "9 5 1 4 3 2 8 7 6 10\r\n"
            ],
            [
                "1\r\n20\r\n20 1 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2\r\n",
                "3 1 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 2\r\n"
            ],
            [
                "1\r\n10\r\n9 8 7 6 5 4 3 2 10 1\r\n",
                "1 9 8 7 6 5 4 3 2 10\r\n"
            ],
            [
                "1\r\n10\r\n8 1 9 2 10 7 6 5 4 3\r\n",
                "3 5 1 10 9 8 7 2 4 6\r\n"
            ]
        ]
    }
]