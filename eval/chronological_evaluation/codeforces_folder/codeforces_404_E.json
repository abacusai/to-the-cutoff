[
    {
        "name": "Maze 1D",
        "description": "Valera has a strip infinite in both directions and consisting of cells. The\ncells are numbered by integers. The cell number 0 has a robot. The robot has\ninstructions \u2014 the sequence of moves that he must perform. In one move, the\nrobot moves one cell to the left or one cell to the right, according to\ninstructions. Before the robot starts moving, Valera puts obstacles in some\ncells of the strip, excluding cell number 0. If the robot should go into the\ncell with an obstacle according the instructions, it will skip this move. Also\nValera indicates the finish cell in which the robot has to be after completing\nthe entire instructions. The finishing cell should be different from the\nstarting one. It is believed that the robot completed the instructions\nsuccessfully, if during the process of moving he visited the finish cell\nexactly once \u2014 at its last move. Moreover, the latter move cannot be skipped.\nLet's assume that k is the minimum number of obstacles that Valera must put to\nmake the robot able to complete the entire sequence of instructions\nsuccessfully and end up in some finishing cell. You need to calculate in how\nmany ways Valera can choose k obstacles and the finishing cell so that the\nrobot is able to complete the instructions successfully. Input The first line\ncontains a sequence of characters without spaces s1s2... sn (1 \u2264 n \u2264 10^6),\nconsisting only of letters \"L\" and \"R\". If character si equals \"L\", then the\nrobot on the i-th move must try to move one cell to the left. If the si-th\ncharacter equals \"R\", then the robot on the i-th move must try to move one\ncell to the right. Output Print a single integer \u2014 the required number of\nways. It's guaranteed that this number fits into 64-bit signed integer type.\nExamples Input RR Output 1 Input RRL Output 1 Note In the first sample Valera\nmustn't add any obstacles and his finishing cell must be cell 2. In the second\nsample, Valera must add an obstacle in cell number 1, and his finishing cell\nmust be cell number - 1. In this case robot skips the first two moves and on\nthe third move he goes straight from the starting cell to the finishing one.\nBut if Valera doesn't add any obstacles, or adds an obstacle to another cell,\nthen the robot visits the finishing cell more than once.\n\n",
        "cf_contest_id": 404,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "RR\r\n",
                "1"
            ],
            [
                "RRL\r\n",
                "1"
            ]
        ],
        "private_cases": [
            [
                "LLLLLRRRRR\r\n",
                "5"
            ],
            [
                "LLRLLLLRLRRRLRRLLRLL\r\n",
                "0"
            ],
            [
                "LRRLRLLLRRLRRRLLLLLRLLLLLRLLRRRLRRLRRLRLRLRLRLLLRRLRLLLLRLRRLLRLRRRRRLRLLLLRRLLRLLLRLLRRLLLLLRLRLRRLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRLRRRLLRLRRLLLLLLLLLLLLLLRLLLLLLLLRLLLLLRLLLRLRLLLRRRRLRRLLLLLLLLLLLLLLLLLLLLLRLLLLLLLLLRLRLLLLLLLLLRLRRLLLLLRLLLLLRRLLLLLRLLLLRRRRLLLLLLLLRLLRLRLLLLLLRLRRRLLLLLLLLLLLLLLRLLLRRLRLRLLRRLLLLLLRLRRRLRLLLRRLRLLRLRLRLRLRRRRRLRRRLLLRLRRRLLLRLRLLLRLLRRLLLRRRRLRLRRLLRRRLLLRLLLLRLRLRRLLRRLRRRRLLRLLRLRLRLRLLLL\r\n",
                "89"
            ],
            [
                "L\r\n",
                "1"
            ],
            [
                "R\r\n",
                "1"
            ],
            [
                "LL\r\n",
                "1"
            ],
            [
                "LR\r\n",
                "1"
            ],
            [
                "RL\r\n",
                "1"
            ],
            [
                "LRL\r\n",
                "0"
            ],
            [
                "RRRRLRLRLL\r\n",
                "2"
            ],
            [
                "LRRLL\r\n",
                "1"
            ],
            [
                "RLLRRRLRLLLLRLLRRRLL\r\n",
                "0"
            ],
            [
                "RRLLRRLLRRLRRRRLRRRLLRRRLLRLLLRRRRLLLLRRRRRRRRRRRRRRRRRRRRRRLLRRRLLRLLLLLLRLLLLRRLLLLLLLRLLLLLRLLRLL\r\n",
                "21"
            ],
            [
                "LRRLLRRRRRRLRLRLRRRLLLLLLLLLLLRRRRRRLRRLRRLRRLLRLRLRRLRLRLLLRRLRLRLRLRRLLLLLRLRRLLRRRRRLLLRRRLRLRLRR\r\n",
                "3"
            ],
            [
                "RLLRLLRRR\r\n",
                "2"
            ],
            [
                "LLLRLLRLLLLRRRRRRRRRRRRRRRRRRRRRRLRRLLLLRLLLLLRLRRLLLLLLRLLLLLLLLRLRLLLRRRLLRLLRLLRLRLRRRLLLRLRRLLL\r\n",
                "16"
            ],
            [
                "RLLLLRR\r\n",
                "1"
            ],
            [
                "RLLLLRRRLRRLRRLRLLLLLLLLLLRLLLRLLLRRLLLRLLRLRLRRRRLLLLLLRLRLRRRLLLLRLRLLRLLRR\r\n",
                "0"
            ],
            [
                "LLLLRRRR\r\n",
                "4"
            ],
            [
                "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\r\n",
                "44"
            ],
            [
                "LRLLLLRRLLLLLLRLLLRRLLRLLRRLLRLRRRRRLRLLRLLLRLRRRRLLRRLLLLLLRRRRLRRLRRLLRRRRLLLRRLLLLLRLLRRLLRLLLRLL\r\n",
                "1"
            ]
        ]
    }
]