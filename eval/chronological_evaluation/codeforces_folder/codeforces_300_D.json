[
    {
        "name": "Painting Square",
        "description": "Vasily the bear has got a large square white table of n rows and n columns.\nThe table has got a black border around this table. The example of the initial\ntable at n = 5. Vasily the bear wants to paint his square table in exactly k\nmoves. Each move is sequence of actions: The bear chooses some square inside\nhis table. At that the square must have a black border painted around it.\nAlso, the square shouldn't contain a black cell. The number of cells in the\nsquare shouldn't be less than 2. The bear chooses some row and some column\ninside the chosen square. Then he paints each cell of this row and this column\ninside the chosen square. After that the rectangles, formed by the square's\nborder and the newly painted cells, must be squares of a non-zero area. An\nexample of correct painting at n = 7 \u0438 k = 2. The bear already knows numbers n\nand k. Help him \u2014 find the number of ways to paint the square in exactly k\nmoves. Two ways to paint are called distinct if the resulting tables will\ndiffer in at least one cell. As the answer can be rather large, print the\nremainder after dividing it by 7340033. Input The first line contains integer\nq (1 \u2264 q \u2264 10^5) \u2014 the number of test data. Each of the following q lines\ncontains two integers n and k (1 \u2264 n \u2264 10^9, 0 \u2264 k \u2264 1000) \u2014 the size of the\ninitial table and the number of moves for the corresponding test. Output For\neach test from the input print the answer to the problem modulo 7340033. Print\nthe answers to the tests in the order in which the tests are given in the\ninput. Examples Input 8 1 0 1 1 3 0 3 1 2 0 2 1 3 2 7 2 Output 1 0 1 1 1 0 0 4\nNote All possible painting ways for the test n = 7 and k = 2 are:\n\n",
        "cf_contest_id": 300,
        "cf_index": "D",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "fft"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8\r\n1 0\r\n1 1\r\n3 0\r\n3 1\r\n2 0\r\n2 1\r\n3 2\r\n7 2\r\n",
                "1\r\n0\r\n1\r\n1\r\n1\r\n0\r\n0\r\n4\r\n"
            ]
        ],
        "private_cases": []
    }
]