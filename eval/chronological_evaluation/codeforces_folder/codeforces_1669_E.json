[
    {
        "name": "2-Letter Strings",
        "description": "Given \n    n\n strings, each of length \n    2\n, consisting of lowercase Latin\nalphabet letters from 'a' to 'k', output the number of pairs of indices \n    (i,\n    j)\n such that \n    i < j\n and the \n    i\n-th string and the \n    j\n-th\nstring differ in exactly one position. In other words, count the number of\npairs \n    (i, j)\n (\n    i < j\n) such that the \n    i\n-th string and the\n\n    j\n-th string have exactly one position \n    p\n (\n    1 \n    \u2264 p \n    \u2264\n    2\n) such that \n    s_i_p\n    \u2260s_j_p\n. The answer may not fit\ninto 32-bit integer type, so you should use 64-bit integers like long long in\nC++ to avoid integer overflow. Input The first line of the input contains a\nsingle integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 100\n) \u2014 the number of test cases.\nThe description of test cases follows. The first line of each test case\ncontains a single integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the number of\nstrings. Then follows \n    n\n lines, the \n    i\n-th of which containing a\nsingle string \n    s_i\n of length \n    2\n, consisting of lowercase Latin\nletters from 'a' to 'k'. It is guaranteed that the sum of \n    n\n over all\ntest cases does not exceed \n    10^5\n. Output For each test case, print a\nsingle integer \u2014 the number of pairs \n    (i, j)\n (\n    i < j\n) such that the\n\n    i\n-th string and the \n    j\n-th string have exactly one position \n    p\n\n(\n    1 \n    \u2264 p \n    \u2264 2\n) such that \n    s_i_p\n    \u2260s_j_p\n.\nPlease note, that the answer for some test cases won't fit into 32-bit integer\ntype, so you should use at least 64-bit integer type in your programming\nlanguage (like long long for C++). Example Input 4 6 ab cb db aa cc ef 7 aa bb\ncc ac ca bb aa 4 kk kk ab ab 5 jf jf jk jk jk Output 5 6 0 6 Note For the\nfirst test case the pairs that differ in exactly one position are: (\"ab\",\n\"cb\"), (\"ab\", \"db\"), (\"ab\", \"aa\"), (\"cb\", \"db\") and (\"cb\", \"cc\"). For the\nsecond test case the pairs that differ in exactly one position are: (\"aa\",\n\"ac\"), (\"aa\", \"ca\"), (\"cc\", \"ac\"), (\"cc\", \"ca\"), (\"ac\", \"aa\") and (\"ca\",\n\"aa\"). For the third test case, the are no pairs satisfying the conditions.\n\n",
        "cf_contest_id": 1669,
        "cf_index": "E",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "math",
            "strings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n6\r\nab\r\ncb\r\ndb\r\naa\r\ncc\r\nef\r\n7\r\naa\r\nbb\r\ncc\r\nac\r\nca\r\nbb\r\naa\r\n4\r\nkk\r\nkk\r\nab\r\nab\r\n5\r\njf\r\njf\r\njk\r\njk\r\njk\r\n",
                "5\r\n6\r\n0\r\n6\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n1\r\nab\r\n1\r\ncf\r\n",
                "0\r\n0\r\n"
            ]
        ]
    }
]