[
    {
        "name": "Corporation Mail",
        "description": "The Beroil corporation structure is hierarchical, that is it can be\nrepresented as a tree. Let's examine the presentation of this structure as\nfollows: employee ::= name. | name:employee1,employee2, ... ,employeek. name\n::= name of an employee That is, the description of each employee consists of\nhis name, a colon (:), the descriptions of all his subordinates separated by\ncommas, and, finally, a dot. If an employee has no subordinates, then the\ncolon is not present in his description. For example, line\nMIKE:MAX.,ARTEM:MIKE..,DMITRY:DMITRY.,DMITRY... is the correct way of\nrecording the structure of a corporation where the director MIKE has\nsubordinates MAX, ARTEM and DMITRY. ARTEM has a subordinate whose name is\nMIKE, just as the name of his boss and two subordinates of DMITRY are called\nDMITRY, just like himself. In the Beroil corporation every employee can only\ncorrespond with his subordinates, at that the subordinates are not necessarily\ndirect. Let's call an uncomfortable situation the situation when a person\nwhose name is s writes a letter to another person whose name is also s. In the\nexample given above are two such pairs: a pair involving MIKE, and two pairs\nfor DMITRY (a pair for each of his subordinates). Your task is by the given\nstructure of the corporation to find the number of uncomfortable pairs in it.\nInput The first and single line contains the corporation structure which is a\nstring of length from 1 to 1000 characters. It is guaranteed that the\ndescription is correct. Every name is a string consisting of capital Latin\nletters from 1 to 10 symbols in length. Output Print a single number \u2014 the\nnumber of uncomfortable situations in the company. Examples Input\nMIKE:MAX.,ARTEM:MIKE..,DMITRY:DMITRY.,DMITRY... Output 3 Input A:A.. Output 1\nInput A:C:C:C:C..... Output 6\n\n",
        "cf_contest_id": 56,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "expression parsing",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "MIKE:MAX.,ARTEM:MIKE..,DMITRY:DMITRY.,DMITRY...\r\n",
                "3\r\n"
            ],
            [
                "A:A..\r\n",
                "1\r\n"
            ],
            [
                "A:C:C:C:C.....\r\n",
                "6\r\n"
            ]
        ],
        "private_cases": [
            [
                "CK:CK.,CK.,CK..\r\n",
                "3\r\n"
            ],
            [
                "RHLGWEVBJ:KAWUINWEI:KAWUINWEI..,ZQATMW.,KAWUINWEI.,RSWN..\r\n",
                "1\r\n"
            ],
            [
                "GIRRY.\r\n",
                "0\r\n"
            ],
            [
                "UWEJCOA:PPFWB:GKWVDKH:UWEJCOA..,QINJL.,ZVLULGYCBJ..,D:D..,EFEHJKNH:QINJL.,GKWVDKH..,NLBPAHEH.,PPFWB.,MWRKW.,UWEJCOA.,QINJL..\r\n",
                "3\r\n"
            ],
            [
                "HINLHUMDSC:HINLHUMDSC.,HINLHUMDSC:HINLHUMDSC..,HINLHUMDSC.,HINLHUMDSC.,HINLHUMDSC..\r\n",
                "7\r\n"
            ],
            [
                "FWYOOG:NJBFIOD:FWYOOG..,DH.,TSPKXXXE.,YMMMGNYBDC.,YMMMGNYBDC.,YMMMGNYBDC.,YMMMGNYBDC.,NJBFIOD..\r\n",
                "1\r\n"
            ]
        ]
    }
]