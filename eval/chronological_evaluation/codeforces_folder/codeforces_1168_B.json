[
    {
        "name": "Good Triple",
        "description": "Toad Rash has a binary string \n    s\n. A binary string consists only of zeros\nand ones. Let \n    n\n be the length of \n    s\n. Rash needs to find the number\nof such pairs of integers \n    l\n, \n    r\n that \n    1 \n    \u2264 l \n    \u2264 r \n    \u2264\n    n\n and there is at least one pair of integers \n    x\n, \n    k\n such that\n\n    1 \n    \u2264 x, k \n    \u2264 n\n, \n    l \n    \u2264 x < x + 2k \n    \u2264 r\n, and \n    s_x =\n    s_x+k = s_x+2k\n. Find this number of pairs for Rash. Input The first\nline contains the string \n    s\n (\n    1 \n    \u2264 |s| \n    \u2264 300\n     000\n),\nconsisting of zeros and ones. Output Output one integer: the number of such\npairs of integers \n    l\n, \n    r\n that \n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 n\n and\nthere is at least one pair of integers \n    x\n, \n    k\n such that \n    1 \n    \u2264\n    x, k \n    \u2264 n\n, \n    l \n    \u2264 x < x + 2k \n    \u2264 r\n, and \n    s_x = s_x+k =\n    s_x+2k\n. Examples Input 010101 Output 3 Input 11001100 Output 0 Note In\nthe first example, there are three \n    l\n, \n    r\n pairs we need to count:\n\n    1\n, \n    6\n; \n    2\n, \n    6\n; and \n    1\n, \n    5\n. In the second\nexample, there are no values \n    x\n, \n    k\n for the initial string, so the\nanswer is \n    0\n.\n\n",
        "cf_contest_id": 1168,
        "cf_index": "B",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "two pointers"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "010101\r\n",
                "3\n"
            ],
            [
                "11001100\r\n",
                "0\n"
            ]
        ],
        "private_cases": [
            [
                "0\r\n",
                "0\n"
            ],
            [
                "00\r\n",
                "0\n"
            ],
            [
                "01\r\n",
                "0\n"
            ],
            [
                "000\r\n",
                "1\n"
            ],
            [
                "100\r\n",
                "0\n"
            ],
            [
                "001\r\n",
                "0\n"
            ],
            [
                "101\r\n",
                "0\n"
            ],
            [
                "0000\r\n",
                "3\n"
            ],
            [
                "0100101110\r\n",
                "16\n"
            ],
            [
                "1101111000011110111111110101100111111110111100001111011010111001101100010110000001010101101010111000\r\n",
                "4672\n"
            ],
            [
                "1000\r\n",
                "2\n"
            ],
            [
                "0010\r\n",
                "0\n"
            ],
            [
                "1010\r\n",
                "0\n"
            ],
            [
                "0001\r\n",
                "2\n"
            ],
            [
                "1001\r\n",
                "0\n"
            ],
            [
                "0011\r\n",
                "0\n"
            ],
            [
                "1011\r\n",
                "0\n"
            ]
        ]
    }
]