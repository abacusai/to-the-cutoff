[
    {
        "name": "Walk the Runway",
        "description": "A fashion tour consists of \n    m\n identical runway shows in different cities.\nThere are \n    n\n models willing to participate in the tour, numbered from\n\n    1\n to \n    n\n. People in different cities have different views on the\nfashion industry, so they rate each model differently. In particular, people\nin city \n    i\n rate model \n    j\n with rating \n    r_i, j\n. You are to\nchoose some number of \n    k\n models, and their order, let the chosen models\nhave indices \n    j_1, j_2, \n    \u2026, j_k\n in the chosen order. In each city,\nthese \n    k\n models will walk the runway one after another in this order. To\nmake the show exciting, in each city, the ratings of models should be strictly\nincreasing in the order of their performance. More formally, for any city\n\n    i\n and index \n    t\n (\n    2 \n    \u2264 t \n    \u2264 k\n), the ratings must\nsatisfy \n    r_i,j_t - 1 < r_i,j_t\n. After all, the fashion industry is\nall about money, so choosing model \n    j\n to participate in the tour profits\nyou \n    p_j\n money. Compute the maximum total profit you can make by choosing\nthe models and their order while satisfying all the requirements. Input The\nfirst line contains two integers \n    m\n and \n    n\n (\n    1 \n    \u2264 m \n    \u2264\n    500\n, \n    1 \n    \u2264 n \n    \u2264 5000\n) \u2014 the number of shows and the number of\nmodels willing to participate respectively. The second line contains \n    n\n\nintegers \n    p_j\n (\n    1 \n    \u2264 p_j \n    \u2264 10^9\n) \u2014 the profit you get\ninviting the \n    j\n-th model to the tour. The next \n    m\n lines each contain\n\n    n\n integers. Line number \n    i\n contains \n    n\n integers \n    r_i, j\n\n(\n    1 \n    \u2264 r_i, j\n    \u2264 n\n) \u2014 the ratings of models in city \n    i\n.\nOutput Output a single integer \u2014 the largest total amount of money you can\nget. Examples Input 3 5 10 10 10 10 10 1 2 3 4 5 1 5 2 3 4 2 3 4 5 1 Output 30\nInput 3 5 10 10 10 10 50 1 2 3 4 5 1 5 2 3 4 2 3 4 5 1 Output 50 Input 1 1\n1000000000 1 Output 1000000000 Input 5 5 1000000000 1000000000 1000000000\n1000000000 1000000000 5 4 3 2 1 5 4 3 2 1 5 4 3 2 1 5 4 3 2 1 5 4 3 2 1 Output\n5000000000 Input 1 3 1 2 3 3 3 3 Output 3 Note In the first example, there are\n\n    3\n invited models. The show consists of models in the order \n    [1, 3,\n    4]\n. Then, the corresponding ratings in the cities are as follows: City\n\n    1\n \u2014 \n    [ 1, 3, 4 ]\n. City \n    2\n \u2014 \n    [ 1, 2, 3 ]\n. City \n    3\n \u2014\n\n    [ 2, 4, 5 ]\n. You can see that the ratings are increasing. So the total\nprofit is \n    10 + 10 + 10 = 30\n. It can be proven that we can't achieve a\nbigger profit. In the second example, we can invite the fifth model to the\ntour, which would result in a total profit of \n    50\n. It can be proven that\nwe can't achieve a bigger profit. In the third example, we invite the single\nmodel to the tour, which results in a total profit of\n\n    1\n     000\n     000\n     000\n. In the fourth test case, we can invite all the\nmodels and make the show in the order \n    [ 5, 4, 3, 2, 1 ]\n. The total\nprofit is \n    5 \n    \u00b7 1\n     000\n     000\n     000 = 5\n     000\n     000\n     000\n.\n\n",
        "cf_contest_id": 1826,
        "cf_index": "E",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "brute force",
            "data structures",
            "dp",
            "graphs",
            "implementation",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 5\r\n10 10 10 10 10\r\n1 2 3 4 5\r\n1 5 2 3 4\r\n2 3 4 5 1\r\n",
                "30\r\n"
            ],
            [
                "3 5\r\n10 10 10 10 50\r\n1 2 3 4 5\r\n1 5 2 3 4\r\n2 3 4 5 1\r\n",
                "50\r\n"
            ],
            [
                "1 1\r\n1000000000\r\n1\r\n",
                "1000000000\r\n"
            ],
            [
                "5 5\r\n1000000000 1000000000 1000000000 1000000000 1000000000\r\n5 4 3 2 1\r\n5 4 3 2 1\r\n5 4 3 2 1\r\n5 4 3 2 1\r\n5 4 3 2 1\r\n",
                "5000000000\r\n"
            ],
            [
                "1 3\r\n1 2 3\r\n3 3 3\r\n",
                "3\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 3\r\n5 5 5\r\n1 2 3\r\n1 3 2\r\n3 1 2\r\n",
                "5\r\n"
            ]
        ]
    }
]