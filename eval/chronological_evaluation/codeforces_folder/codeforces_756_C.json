[
    {
        "name": "Nikita and stack",
        "description": "Nikita has a stack. A stack in this problem is a data structure that supports\ntwo operations. Operation push(x) puts an integer x on the top of the stack,\nand operation pop() deletes the top integer from the stack, i. e. the last\nadded. If the stack is empty, then the operation pop() does nothing. Nikita\nmade m operations with the stack but forgot them. Now Nikita wants to remember\nthem. He remembers them one by one, on the i-th step he remembers an operation\nhe made pi-th. In other words, he remembers the operations in order of some\npermutation p1, p2, ..., pm. After each step Nikita wants to know what is the\ninteger on the top of the stack after performing the operations he have\nalready remembered, in the corresponding order. Help him! Input The first line\ncontains the integer m (1 \u2264 m \u2264 10^5) \u2014 the number of operations Nikita made.\nThe next m lines contain the operations Nikita remembers. The i-th line starts\nwith two integers pi and ti (1 \u2264 pi \u2264 m, ti = 0 or ti = 1) \u2014 the index of\noperation he remembers on the step i, and the type of the operation. ti equals\n0, if the operation is pop(), and 1, is the operation is push(x). If the\noperation is push(x), the line also contains the integer xi (1 \u2264 xi \u2264 10^6) \u2014\nthe integer added to the stack. It is guaranteed that each integer from 1 to m\nis present exactly once among integers pi. Output Print m integers. The\ninteger i should equal the number on the top of the stack after performing all\nthe operations Nikita remembered on the steps from 1 to i. If the stack is\nempty after performing all these operations, print -1. Examples Input 2 2 1 2\n1 0 Output 2 2 Input 3 1 1 2 2 1 3 3 0 Output 2 3 2 Input 5 5 0 4 0 3 1 1 2 1\n1 1 1 2 Output -1 -1 -1 -1 2 Note In the first example, after Nikita remembers\nthe operation on the first step, the operation push(2) is the only operation,\nso the answer is 2. After he remembers the operation pop() which was done\nbefore push(2), answer stays the same. In the second example, the operations\nare push(2), push(3) and pop(). Nikita remembers them in the order they were\nperformed. In the third example Nikita remembers the operations in the\nreversed order.\n\n",
        "cf_contest_id": 756,
        "cf_index": "C",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n2 1 2\r\n1 0\r\n",
                "2\r\n2\r\n"
            ],
            [
                "3\r\n1 1 2\r\n2 1 3\r\n3 0\r\n",
                "2\r\n3\r\n2\r\n"
            ],
            [
                "5\r\n5 0\r\n4 0\r\n3 1 1\r\n2 1 1\r\n1 1 2\r\n",
                "-1\r\n-1\r\n-1\r\n-1\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 0\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n1 1 1000000\r\n",
                "1000000\r\n"
            ],
            [
                "2\r\n1 1 2\r\n2 0\r\n",
                "2\r\n-1\r\n"
            ],
            [
                "2\r\n2 1 3\r\n1 1 2\r\n",
                "3\r\n3\r\n"
            ],
            [
                "10\r\n1 0\r\n2 0\r\n4 1 4\r\n7 1 2\r\n6 1 6\r\n10 0\r\n8 1 7\r\n3 1 1\r\n5 0\r\n9 1 7\r\n",
                "-1\r\n-1\r\n4\r\n2\r\n2\r\n6\r\n2\r\n2\r\n2\r\n7\r\n"
            ],
            [
                "20\r\n4 0\r\n13 1 3\r\n14 0\r\n6 1 1\r\n12 0\r\n1 0\r\n18 1 10\r\n9 0\r\n8 0\r\n3 1 7\r\n19 0\r\n7 0\r\n15 0\r\n17 1 3\r\n11 0\r\n10 1 3\r\n20 1 6\r\n16 0\r\n2 1 8\r\n5 0\r\n",
                "-1\r\n3\r\n-1\r\n1\r\n-1\r\n-1\r\n10\r\n10\r\n10\r\n10\r\n-1\r\n-1\r\n-1\r\n3\r\n3\r\n3\r\n6\r\n6\r\n6\r\n6\r\n"
            ],
            [
                "20\r\n17 1 769435\r\n14 1 998249\r\n16 1 464669\r\n19 0\r\n5 1 277351\r\n12 0\r\n18 0\r\n3 1 577524\r\n7 0\r\n4 0\r\n1 0\r\n15 1 482332\r\n6 0\r\n11 0\r\n8 0\r\n13 0\r\n10 0\r\n2 1 250223\r\n20 1 603134\r\n9 0\r\n",
                "769435\r\n769435\r\n769435\r\n464669\r\n464669\r\n464669\r\n998249\r\n998249\r\n998249\r\n998249\r\n998249\r\n482332\r\n482332\r\n482332\r\n482332\r\n482332\r\n482332\r\n482332\r\n603134\r\n603134\r\n"
            ]
        ]
    }
]