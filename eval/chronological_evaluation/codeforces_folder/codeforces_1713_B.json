[
    {
        "name": "Optimal Reduction",
        "description": "Consider an array \n    a\n of \n    n\n positive integers. You may perform the\nfollowing operation: select two indices \n    l\n and \n    r\n (\n    1 \n    \u2264 l\n    \n    \u2264 r \n    \u2264 n\n), then decrease all elements \n    a_l, a_l + 1, \n    \u2026,\n    a_r\n by \n    1\n. Let's call \n    f(a)\n the minimum number of operations\nneeded to change array \n    a\n into an array of \n    n\n zeros. Determine if\nfor all permutations\n    ^\n    \u2020\n \n    b\n of \n    a\n, \n    f(a) \n    \u2264\n    f(b)\n is true. \n    ^\n    \u2020\n An array \n    b\n is a permutation of an\narray \n    a\n if \n    b\n consists of the elements of \n    a\n in arbitrary\norder. For example, \n    [4,2,3,4]\n is a permutation of \n    [3,2,4,4]\n while\n\n    [1,2,2]\n is not a permutation of \n    [1,2,3]\n. Input The first line\ncontains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number\nof test cases. The first line of each test case contains a single integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n) \u2014 the length of the array \n    a\n. The\nsecond line contains \n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264\n    a_i \n    \u2264 10^9\n) \u2014 description of the array \n    a\n. It is guaranteed that\nthe sum of \n    n\n over all test cases does not exceed \n    10^5\n. Output For\neach test case, print \"YES\" (without quotes) if for all permutations \n    b\n\nof \n    a\n, \n    f(a) \n    \u2264 f(b)\n is true, and \"NO\" (without quotes)\notherwise. You can output \"YES\" and \"NO\" in any case (for example, strings\n\"yEs\", \"yes\" and \"Yes\" will be recognized as a positive response). Example\nInput 3 4 2 3 5 4 3 1 2 3 4 3 1 3 2 Output YES YES NO Note In the first test\ncase, we can change all elements to \n    0\n in \n    5\n operations. It can be\nshown that no permutation of \n    [2, 3, 5, 4]\n requires less than \n    5\n\noperations to change all elements to \n    0\n. In the third test case, we need\n\n    5\n operations to change all elements to \n    0\n, while \n    [2, 3, 3, 1]\n\nonly needs \n    3\n operations.\n\n",
        "cf_contest_id": 1713,
        "cf_index": "B",
        "cf_rating": 1000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n4\r\n2 3 5 4\r\n3\r\n1 2 3\r\n4\r\n3 1 3 2\r\n",
                "YES\r\nYES\r\nNO\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n5\r\n1000000000 1 1000000000 1 1000000000\r\n",
                "NO\r\n"
            ]
        ]
    }
]