[
    {
        "name": "The Coronation",
        "description": "The coronation of King Berl XXII is soon! The whole royal family, including\n\n    n\n daughters of Berl XXII, will be present. The King has ordered his\njeweler to assemble \n    n\n beautiful necklaces, so each of the princesses\ncould wear exactly one necklace during the ceremony \u2014 and now these necklaces\nare finished. Each necklace consists of \n    m\n gems attached to a gold chain.\nThere are two types of gems used in the necklaces \u2014 emeralds and sapphires.\nSo, each necklace can be represented by a sequence of \n    m\n gems (listed\nfrom left to right), and each gem is either an emerald or a sapphire.\nFormally, the \n    i\n-th necklace can be represented by a binary string\n\n    s_i\n of length \n    m\n; if the \n    j\n-th character of \n    s_i\n is 0,\nthen the \n    j\n-th gem in the \n    i\n-th necklace is an emerald; otherwise,\nthis gem is a sapphire. Now, looking at the necklaces, the King is afraid that\nsome of his daughters may envy the other daughters' necklaces. He wants all\nnecklaces to look similar. Two necklaces are considered similar if there are\nat least \n    k\n positions where these necklaces contain the same type of\ngems. For example, if there is a necklace represented by a sequence 01010111\nand a necklace represented by a sequence 01100000, then there are \n    3\n\npositions where these necklaces contain the same type of gems (both first gems\nare emeralds, both second gems are sapphires, and both fifth gems are\nemeralds). So if \n    k = 3\n, these necklaces are similar, and if \n    k = 4\n,\nthey are not similar. The King thinks that if two of his daughters notice that\ntheir necklaces are not similar, then they may have a conflict \u2014 and,\nobviously, he doesn't want any conflicts during the coronation! So Berl XXII\nwants to tell some of his daughters to wear their necklaces backward. If a\nnecklace is worn backward, then the sequence of gems in this necklace is\nreversed. For example, if a necklace is represented by a sequence 01100, then,\nif worn backward, it would be represented by a sequence 00110. The King wants\nto find the minimum number of necklaces to be worn backward during the\ncoronation so that there are no conflicts. Berl XXII is too busy with\npreparation for the coronation, so he ordered you to resolve this issue for\nhim. Help him \u2014 and he will give you a truly royal reward! Input The first\nline contains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 50\n) \u2014 the number of\ntest cases. Then the test cases follow. Each test case begins with a line\ncontaining three integers \n    n\n, \n    m\n and \n    k\n (\n    2 \n    \u2264 n \n    \u2264\n    50\n, \n    1 \n    \u2264 k \n    \u2264 m \n    \u2264 50\n) \u2014 the number of necklaces, the number\nof gems in each necklace, and the minimum number of positions where two\nnecklaces have to have the same type of gems in order to look similar,\nrespectively. Then \n    n\n lines follow, the \n    i\n-th of them contains a\nbinary string \n    s_i\n of length \n    m\n representing the \n    i\n-th\nnecklace. Output For each test case, print the answer as follows. If it is\nimpossible to avoid the conflict, print -1 on a single line. In this case you\nshould not output anything else for that test case. Otherwise, the first line\nof the test case answer should contain the single integer \n    d\n \u2014 the\nminimum number of necklaces that are to be worn backward. The second line of\nthe test case answer should contain the numbers of these necklaces (integers\nfrom \n    1\n to \n    n\n) in any order. If \n    d = 0\n then leave the second\nline of the test case answer empty. If there are multiple answers, you may\nprint any of them. Example Input 5 5 7 2 1010100 0010101 1111010 1000010\n0000101 6 9 3 011111110 100111000 111100000 000111111 110100111 111110111 3 4\n2 0001 1000 0000 3 4 4 0001 1000 0000 2 4 3 0001 1000 Output 2 1 3 1 3 0 -1 1\n1\n\n",
        "cf_contest_id": 1250,
        "cf_index": "E",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "graphs",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [],
        "private_cases": []
    }
]