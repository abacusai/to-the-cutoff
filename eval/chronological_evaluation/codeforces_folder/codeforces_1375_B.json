[
    {
        "name": "Neighbor Grid",
        "description": "You are given a grid with \n    n\n rows and \n    m\n columns, where each cell\nhas a non-negative integer written on it. We say the grid is good if for each\ncell the following condition holds: if it has a number \n    k > 0\n written on\nit, then exactly \n    k\n of its neighboring cells have a number greater than\n\n    0\n written on them. Note that if the number in the cell is \n    0\n, there\nis no such restriction on neighboring cells. You are allowed to take any\nnumber in the grid and increase it by \n    1\n. You may apply this operation as\nmany times as you want, to any numbers you want. Perform some operations\n(possibly zero) to make the grid good, or say that it is impossible. If there\nare multiple possible answers, you may find any of them. Two cells are\nconsidered to be neighboring if they have a common edge. Input The input\nconsists of multiple test cases. The first line contains an integer \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 5000\n) \u2014 the number of test cases. The description of\nthe test cases follows. The first line of each test case contains two integers\n\n    n\n and \n    m\n (\n    2 \n    \u2264 n, m \n    \u2264 300\n) \u2014 the number of rows and\ncolumns, respectively. The following \n    n\n lines contain \n    m\n integers\neach, the \n    j\n-th element in the \n    i\n-th line \n    a_i, j\n is the\nnumber written in the \n    j\n-th cell of the \n    i\n-th row (\n    0 \n    \u2264 a_i,\n    j\n    \u2264 10^9\n). It is guaranteed that the sum of \n    n \n    \u00b7 m\n over all\ntest cases does not exceed \n    10^5\n. Output If it is impossible to obtain a\ngood grid, print a single line containing \"NO\". Otherwise, print a single line\ncontaining \"YES\", followed by \n    n\n lines each containing \n    m\n integers,\nwhich describe the final state of the grid. This final grid should be\nobtainable from the initial one by applying some operations (possibly zero).\nIf there are multiple possible answers, you may print any of them. Example\nInput 5 3 4 0 0 0 0 0 1 0 0 0 0 0 0 2 2 3 0 0 0 2 2 0 0 0 0 2 3 0 0 0 0 4 0 4\n4 0 0 0 0 0 2 0 1 0 0 0 0 0 0 0 0 Output YES 0 0 0 0 0 1 1 0 0 0 0 0 NO YES 0\n0 0 0 NO YES 0 1 0 0 1 4 2 1 0 2 0 0 1 3 1 0 Note In the first test case, we\ncan obtain the resulting grid by increasing the number in row \n    2\n, column\n\n    3\n once. Both of the cells that contain \n    1\n have exactly one neighbor\nthat is greater than zero, so the grid is good. Many other solutions exist,\nsuch as the grid \n    \n\n    0\n     1\n     0\n     0\n\n    \n \n    \n\n    0\n     2\n     1\n     0\n\n    \n\n\n    \n\n    0\n     0\n     0\n     0\n\n    \n All of them are accepted as valid answers. In the\nsecond test case, it is impossible to make the grid good. In the third test\ncase, notice that no cell has a number greater than zero on it, so the grid is\nautomatically good.\n\n",
        "cf_contest_id": 1375,
        "cf_index": "B",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3 4\r\n0 0 0 0\r\n0 1 0 0\r\n0 0 0 0\r\n2 2\r\n3 0\r\n0 0\r\n2 2\r\n0 0\r\n0 0\r\n2 3\r\n0 0 0\r\n0 4 0\r\n4 4\r\n0 0 0 0\r\n0 2 0 1\r\n0 0 0 0\r\n0 0 0 0\r\n",
                "YES 2 3 3 2 3 4 4 3 2 3 3 2\r\nNO\r\nYES 2 2 2 2\r\nNO\r\nYES 2 3 3 2 3 4 4 3 3 4 4 3 2 3 3 2\r\n"
            ]
        ],
        "private_cases": []
    }
]