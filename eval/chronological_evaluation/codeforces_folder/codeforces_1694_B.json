[
    {
        "name": "Paranoid String",
        "description": "Let's call a binary string \n    T\n of length \n    m\n indexed from \n    1\n to\n\n    m\n paranoid if we can obtain a string of length \n    1\n by performing the\nfollowing two kinds of operations \n    m-1\n times in any order : Select any\nsubstring of \n    T\n that is equal to 01, and then replace it with 1. Select\nany substring of \n    T\n that is equal to 10, and then replace it with 0.For\nexample, if \n    T =\n 001, we can select the substring \n    [T_2T_3]\n and\nperform the first operation. So we obtain \n    T =\n 01. You are given a\nbinary string \n    S\n of length \n    n\n indexed from \n    1\n to \n    n\n. Find\nthe number of pairs of integers \n    (l, r)\n \n    1 \n    \u2264 l \n    \u2264 r \n    \u2264 n\n\nsuch that \n    S[l \n    \u2026 r]\n (the substring of \n    S\n from \n    l\n to\n\n    r\n) is a paranoid string. Input The first line contains an integer\n\n    t\n (\n    1 \n    \u2264 t \n    \u2264 1000\n) \u2014 the number of test cases. The\ndescription of test cases follows. The first line of each test case contains a\nsingle integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the size of\n\n    S\n. The second line of each test case contains a binary string \n    S\n of\n\n    n\n characters \n    S_1S_2 \n    \u2026 S_n\n. (\n    S_i =\n 0 or \n    S_i =\n\n1 for each \n    1 \n    \u2264 i \n    \u2264 n\n) It is guaranteed that the sum of \n    n\n\nover all test cases doesn't exceed \n    2 \n    \u00b7 10^5\n. Output For each test\ncase, output the number of pairs of integers \n    (l, r)\n \n    1 \n    \u2264 l \n    \u2264 r\n    \n    \u2264 n\n such that \n    S[l \n    \u2026 r]\n (the substring of \n    S\n from\n\n    l\n to \n    r\n) is a paranoid string. Example Input 5 1 1 2 01 3 100 4\n1001 5 11111 Output 1 3 4 8 5 Note In the first sample, \n    S\n already has\nlength \n    1\n and doesn't need any operations. In the second sample, all\nsubstrings of \n    S\n are paranoid. For the entire string, it's enough to\nperform the first operation. In the third sample, all substrings of \n    S\n\nare paranoid except \n    [S_2S_3]\n, because we can't perform any operations on\nit, and \n    [S_1S_2S_3]\n (the entire string).\n\n",
        "cf_contest_id": 1694,
        "cf_index": "B",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1\r\n1\r\n2\r\n01\r\n3\r\n100\r\n4\r\n1001\r\n5\r\n11111\r\n",
                "1\r\n3\r\n4\r\n8\r\n5\r\n"
            ]
        ],
        "private_cases": []
    }
]