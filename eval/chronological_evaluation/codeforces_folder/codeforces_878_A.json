[
    {
        "name": "Short Program",
        "description": "Petya learned a new programming language CALPAS. A program in this language\nalways takes one non-negative integer and returns one non-negative integer as\nwell. In the language, there are only three commands: apply a bitwise\noperation AND, OR or XOR with a given constant to the current integer. A\nprogram can contain an arbitrary sequence of these operations with arbitrary\nconstants from 0 to 1023. When the program is run, all operations are applied\n(in the given order) to the argument and in the end the result integer is\nreturned. Petya wrote a program in this language, but it turned out to be too\nlong. Write a program in CALPAS that does the same thing as the Petya's\nprogram, and consists of no more than 5 lines. Your program should return the\nsame integer as Petya's program for all arguments from 0 to 1023. Input The\nfirst line contains an integer n (1 \u2264 n \u2264 5\u00b710^5) \u2014 the number of lines. Next\nn lines contain commands. A command consists of a character that represents\nthe operation (\"   \", \"|\" or \"^\" for AND, OR or XOR respectively), and the\nconstant xi 0 \u2264 xi \u2264 1023. Output Output an integer k (0 \u2264 k \u2264 5) \u2014 the length\nof your program. Next k lines must contain commands in the same format as in\nthe input. Examples Input 3 | 3 ^ 2 | 1 Output 2 | 3 ^ 2 Input 3     1     3     5\nOutput 1     1 Input 3 ^ 1 ^ 2 ^ 3 Output 0 Note You can read about bitwise\noperations in https://en.wikipedia.org/wiki/Bitwise_operation. Second sample:\nLet x be an input of the Petya's program. It's output is ((x   1)   3)   5 =\nx   (1   3   5) = x   1\u1e60o these two programs always give the same outputs.\n\n",
        "cf_contest_id": 878,
        "cf_index": "A",
        "cf_rating": 1600,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "constructive algorithms"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n| 3\r\n^ 2\r\n| 1\r\n",
                "2\r\n| 3 \r\n^ 2\r\n"
            ],
            [
                "3\r\n& 1\r\n& 3\r\n& 5\r\n",
                "2\r\n| 1022 \r\n^ 1022\r\n"
            ],
            [
                "3\r\n^ 1\r\n^ 2\r\n^ 3\r\n",
                "2\r\n| 0 \r\n^ 0\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n| 999\r\n^ 689\r\n",
                "2\r\n| 999 \r\n^ 689\r\n"
            ],
            [
                "3\r\n& 242\r\n^ 506\r\n^ 522\r\n",
                "2\r\n| 781 \r\n^ 253\r\n"
            ],
            [
                "2\r\n| 56\r\n^ 875\r\n",
                "2\r\n| 56 \r\n^ 875\r\n"
            ],
            [
                "3\r\n^ 125\r\n^ 377\r\n& 1019\r\n",
                "2\r\n| 4 \r\n^ 260\r\n"
            ],
            [
                "1\r\n& 123\r\n",
                "2\r\n| 900 \r\n^ 900\r\n"
            ],
            [
                "1\r\n| 123\r\n",
                "2\r\n| 123 \r\n^ 0\r\n"
            ],
            [
                "1\r\n^ 123\r\n",
                "2\r\n| 0 \r\n^ 123\r\n"
            ],
            [
                "10\r\n^ 218\r\n& 150\r\n| 935\r\n& 61\r\n| 588\r\n& 897\r\n| 411\r\n| 584\r\n^ 800\r\n| 704\r\n",
                "2\r\n| 1023 \r\n^ 260\r\n"
            ],
            [
                "10\r\n^ 160\r\n& 1021\r\n& 510\r\n^ 470\r\n& 1022\r\n& 251\r\n& 760\r\n& 1016\r\n| 772\r\n| 515\r\n",
                "2\r\n| 775 \r\n^ 112\r\n"
            ],
            [
                "1\r\n& 0\r\n",
                "2\r\n| 1023 \r\n^ 1023\r\n"
            ],
            [
                "1\r\n| 0\r\n",
                "2\r\n| 0 \r\n^ 0\r\n"
            ],
            [
                "1\r\n^ 0\r\n",
                "2\r\n| 0 \r\n^ 0\r\n"
            ],
            [
                "1\r\n& 1023\r\n",
                "2\r\n| 0 \r\n^ 0\r\n"
            ],
            [
                "1\r\n| 1023\r\n",
                "2\r\n| 1023 \r\n^ 0\r\n"
            ],
            [
                "1\r\n^ 1023\r\n",
                "2\r\n| 0 \r\n^ 1023\r\n"
            ]
        ]
    }
]