[
    {
        "name": "Omkar and Forest",
        "description": "Omkar's most recent follower, Ajit, has entered the Holy Forest. Ajit realizes\nthat Omkar's forest is an \n    n\n by \n    m\n grid (\n    1 \n    \u2264 n, m \n    \u2264\n    2000\n) of some non-negative integers. Since the forest is blessed by Omkar,\nit satisfies some special conditions: For any two adjacent (sharing a side)\ncells, the absolute value of the difference of numbers in them is at most\n\n    1\n. If the number in some cell is strictly larger than \n    0\n, it should\nbe strictly greater than the number in at least one of the cells adjacent to\nit. Unfortunately, Ajit is not fully worthy of Omkar's powers yet. He sees\neach cell as a \"0\" or a \"#\". If a cell is labeled as \"0\", then the number in\nit must equal \n    0\n. Otherwise, the number in it can be any nonnegative\ninteger. Determine how many different assignments of elements exist such that\nthese special conditions are satisfied. Two assignments are considered\ndifferent if there exists at least one cell such that the numbers written in\nit in these assignments are different. Since the answer may be enormous, find\nthe answer modulo \n    10^9+7\n. Input Each test contains multiple test cases.\nThe first line contains the number of test cases \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    100\n). Description of the test cases follows. The first line of each test\ncase contains two integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264 2000,\n    nm \n    \u2265 2\n) \u2013 the dimensions of the forest. \n    n\n lines follow, each\nconsisting of one string of \n    m\n characters. Each of these characters is\neither a \"0\" or a \"#\". It is guaranteed that the sum of \n    n\n over all test\ncases does not exceed \n    2000\n and the sum of \n    m\n over all test cases\ndoes not exceed \n    2000\n. Output For each test case, print one integer: the\nnumber of valid configurations modulo \n    10^9+7\n. Example Input 4 3 4 0000\n00#0 0000 2 1 # # 1 2 ## 6 29 #############################\n#000##0###0##0#0####0####000# #0#0##00#00##00####0#0###0#0#\n#0#0##0#0#0##00###00000##00## #000##0###0##0#0##0###0##0#0#\n############################# Output 2 3 3 319908071 Note For the first test\ncase, the two valid assignments are \n    0000\n    \n    \n     0000\n    \n    \n     0000\n and\n\n    0000\n    \n    \n     0010\n    \n    \n     0000\n\n\n",
        "cf_contest_id": 1536,
        "cf_index": "E",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "graphs",
            "math",
            "shortest paths"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3 4\r\n0000\r\n00#0\r\n0000\r\n2 1\r\n#\r\n#\r\n1 2\r\n##\r\n6 29\r\n#############################\r\n#000##0###0##0#0####0####000#\r\n#0#0##00#00##00####0#0###0#0#\r\n#0#0##0#0#0##00###00000##00##\r\n#000##0###0##0#0##0###0##0#0#\r\n#############################\r\n",
                "2\r\n3\r\n3\r\n319908071\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n10 10\r\n0####0###0\r\n00#000##00\r\n##0#0###00\r\n0#0##00#00\r\n####0###00\r\n###00#0#0#\r\n###00#0###\r\n###0##0#00\r\n#00##000#0\r\n0#0#00##00\r\n",
                "383381198\r\n"
            ],
            [
                "1\r\n12 12\r\n#000#0#0##00\r\n0##########0\r\n0#0##0#0###0\r\n00#0##000###\r\n#0######0###\r\n#0####0####0\r\n#######000##\r\n0##0#00#00##\r\n##000##0####\r\n0########00#\r\n###000#000##\r\n####00####0#\r\n",
                "968380808\r\n"
            ],
            [
                "5\r\n5 4\r\n0000\r\n0000\r\n00#0\r\n0000\r\n0000\r\n4 4\r\n#000\r\n00#0\r\n#000\r\n0000\r\n4 3\r\n000\r\n0#0\r\n#00\r\n000\r\n5 1\r\n0\r\n0\r\n0\r\n0\r\n0\r\n2 8\r\n00#00000\r\n000#000#\r\n",
                "2\r\n8\r\n4\r\n1\r\n8\r\n"
            ],
            [
                "3\r\n5 3\r\n###\r\n###\r\n###\r\n###\r\n0##\r\n3 3\r\n###\r\n###\r\n#0#\r\n2 4\r\n####\r\n####\r\n",
                "16384\r\n256\r\n255\r\n"
            ]
        ]
    }
]