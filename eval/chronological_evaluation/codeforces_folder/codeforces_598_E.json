[
    {
        "name": "Chocolate Bar",
        "description": "You have a rectangular chocolate bar consisting of n \u00d7 m single squares. You\nwant to eat exactly k squares, so you may need to break the chocolate bar. In\none move you can break any single rectangular piece of chocolate in two\nrectangular pieces. You can break only by lines between squares: horizontally\nor vertically. The cost of breaking is equal to square of the break length.\nFor example, if you have a chocolate bar consisting of 2 \u00d7 3 unit squares then\nyou can break it horizontally and get two 1 \u00d7 3 pieces (the cost of such\nbreaking is 3^2 = 9), or you can break it vertically in two ways and get two\npieces: 2 \u00d7 1 and 2 \u00d7 2 (the cost of such breaking is 2^2 = 4). For several\ngiven values n, m and k find the minimum total cost of breaking. You can eat\nexactly k squares of chocolate if after all operations of breaking there is a\nset of rectangular pieces of chocolate with the total size equal to k squares.\nThe remaining n\u00b7m - k squares are not necessarily form a single rectangular\npiece. Input The first line of the input contains a single integer t (1 \u2264 t \u2264\n40910) \u2014 the number of values n, m and k to process. Each of the next t lines\ncontains three integers n, m and k (1 \u2264 n, m \u2264 30, 1 \u2264 k \u2264 min(n\u00b7m, 50)) \u2014 the\ndimensions of the chocolate bar and the number of squares you want to eat\nrespectively. Output For each n, m and k print the minimum total cost needed\nto break the chocolate bar, in order to make it possible to eat exactly k\nsquares. Examples Input 4 2 2 1 2 2 3 2 2 2 2 2 4 Output 5 5 4 0 Note In the\nfirst query of the sample one needs to perform two breaks: to split 2 \u00d7 2 bar\ninto two pieces of 2 \u00d7 1 (cost is 2^2 = 4), to split the resulting 2 \u00d7 1 into\ntwo 1 \u00d7 1 pieces (cost is 1^2 = 1). In the second query of the sample one\nwants to eat 3 unit squares. One can use exactly the same strategy as in the\nfirst query of the sample.\n\n",
        "cf_contest_id": 598,
        "cf_index": "E",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "dp"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n2 2 1\r\n2 2 3\r\n2 2 2\r\n2 2 4\r\n",
                "5\r\n5\r\n4\r\n0\r\n"
            ]
        ],
        "private_cases": []
    }
]