[
    {
        "name": "Vasily the Bear and Sequence",
        "description": "Vasily the bear has got a sequence of positive integers a1, a2, ..., an.\nVasily the Bear wants to write out several numbers on a piece of paper so that\nthe beauty of the numbers he wrote out was maximum. The beauty of the written\nout numbers b1, b2, ..., bk is such maximum non-negative integer v, that\nnumber b1 and b2 and ... and bk is divisible by number 2^v without a\nremainder. If such number v doesn't exist (that is, for any non-negative\ninteger v, number b1 and b2 and ... and bk is divisible by 2^v without a\nremainder), the beauty of the written out numbers equals -1. Tell the bear\nwhich numbers he should write out so that the beauty of the written out\nnumbers is maximum. If there are multiple ways to write out the numbers, you\nneed to choose the one where the bear writes out as many numbers as possible.\nHere expression x and y means applying the bitwise AND operation to numbers x\nand y. In programming languages C++ and Java this operation is represented by\n\"   \", in Pascal \u2014 by \"and\". Input The first line contains integer n (1 \u2264 n \u2264\n10^5). The second line contains n space-separated integers a1, a2, ..., an (1\n\u2264 a1 < a2 < ... < an \u2264 10^9). Output In the first line print a single integer\nk (k > 0), showing how many numbers to write out. In the second line print k\nintegers b1, b2, ..., bk \u2014 the numbers to write out. You are allowed to print\nnumbers b1, b2, ..., bk in any order, but all of them must be distinct. If\nthere are multiple ways to write out the numbers, choose the one with the\nmaximum number of numbers to write out. If there still are multiple ways, you\nare allowed to print any of them. Examples Input 5 1 2 3 4 5 Output 2 4 5\nInput 3 1 2 4 Output 1 4\n\n",
        "cf_contest_id": 336,
        "cf_index": "C",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "greedy",
            "implementation",
            "number theory"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 2 3 4 5\r\n",
                "2\r\n4 5\r\n"
            ],
            [
                "3\r\n1 2 4\r\n",
                "1\r\n4\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n1 20 22\r\n",
                "2\r\n20 22\r\n"
            ],
            [
                "10\r\n109070199 215498062 361633800 406156967 452258663 530571268 670482660 704334662 841023955 967424642\r\n",
                "6\r\n361633800 406156967 452258663 530571268 841023955 967424642\r\n"
            ],
            [
                "30\r\n61 65 67 71 73 75 77 79 129 131 135 137 139 141 267 520 521 522 524 526 1044 1053 6924600 32125372 105667932 109158064 192212084 202506108 214625360 260071380\r\n",
                "8\r\n520 521 522 524 526 109158064 202506108 260071380\r\n"
            ],
            [
                "40\r\n6 7 10 11 18 19 33 65 129 258 514 515 1026 2049 4741374 8220406 14324390 17172794 17931398 33354714 34796238 38926670 39901570 71292026 72512934 77319030 95372470 102081830 114152702 120215390 133853238 134659386 159128594 165647058 219356350 225884742 236147130 240926050 251729234 263751314\r\n",
                "13\r\n2049 4741374 8220406 17172794 17931398 38926670 39901570 77319030 134659386 159128594 219356350 225884742 240926050\r\n"
            ],
            [
                "1\r\n536870912\r\n",
                "1\r\n536870912\r\n"
            ],
            [
                "1\r\n1\r\n",
                "1\r\n1\r\n"
            ],
            [
                "1\r\n536870911\r\n",
                "1\r\n536870911\r\n"
            ],
            [
                "2\r\n536870911 536870912\r\n",
                "1\r\n536870912\r\n"
            ],
            [
                "38\r\n37750369 37750485 37750546 37751012 37751307 37751414 37751958 37751964 37752222 37752448 75497637 75497768 75497771 75498087 75498145 75498177 75498298 75498416 75498457 150994987 150994994 150994999 150995011 150995012 150995015 150995016 150995023 150995040 150995053 805306375 805306377 805306379 805306387 805306389 805306390 805306392 805306396 805306400\r\n",
                "9\r\n805306375 805306377 805306379 805306387 805306389 805306390 805306392 805306396 805306400\r\n"
            ],
            [
                "39\r\n37749932 37750076 37750391 37750488 37750607 37750812 37750978 37751835 37752173 37752254 75497669 75497829 75497852 75498044 75498061 75498155 75498198 75498341 75498382 75498465 150994988 150994989 150995009 150995019 150995024 150995030 150995031 150995069 150995072 805306369 805306373 805306375 805306379 805306380 805306384 805306387 805306389 805306398 805306400\r\n",
                "10\r\n805306369 805306373 805306375 805306379 805306380 805306384 805306387 805306389 805306398 805306400\r\n"
            ]
        ]
    }
]