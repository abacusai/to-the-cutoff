[
    {
        "name": "Submatrices",
        "description": "You are given matrix \n    s\n that contains \n    n\n rows and \n    m\n columns.\nEach element of a matrix is one of the \n    5\n first Latin letters (in upper\ncase). For each \n    k\n (\n    1 \n    \u2264 k \n    \u2264 5\n) calculate the number of\nsubmatrices that contain exactly \n    k\n different letters. Recall that a\nsubmatrix of matrix \n    s\n is a matrix that can be obtained from \n    s\n\nafter removing several (possibly zero) first rows, several (possibly zero)\nlast rows, several (possibly zero) first columns, and several (possibly zero)\nlast columns. If some submatrix can be obtained from \n    s\n in two or more\nways, you have to count this submatrix the corresponding number of times.\nInput The first line contains two integers \n    n\n and \n    m\n (\n    1 \n    \u2264 n,\n    m \n    \u2264 800\n). Then \n    n\n lines follow, each containing the string\n\n    s_i\n (\n    |s_i| = m\n) \u2014 \n    i\n-th row of the matrix. Output For each\n\n    k\n (\n    1 \n    \u2264 k \n    \u2264 5\n) print one integer \u2014 the number of\nsubmatrices that contain exactly \n    k\n different letters. Examples Input 2 3\nABB ABA Output 9 9 0 0 0 Input 6 6 EDCECE EDDCEB ACCECC BAEEDC DDDDEC DDAEAD\nOutput 56 94 131 103 57 Input 3 10 AEAAEEEEEC CEEAAEEEEE CEEEEAACAA Output 78\n153 99 0 0\n\n",
        "cf_contest_id": 1533,
        "cf_index": "H",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "bitmasks",
            "data structures",
            "dp"
        ],
        "time_limit_seconds": 3.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 3\r\nABB\r\nABA\r\n",
                "9 9 0 0 0\r\n"
            ],
            [
                "6 6\r\nEDCECE\r\nEDDCEB\r\nACCECC\r\nBAEEDC\r\nDDDDEC\r\nDDAEAD\r\n",
                "56 94 131 103 57\r\n"
            ],
            [
                "3 10\r\nAEAAEEEEEC\r\nCEEAAEEEEE\r\nCEEEEAACAA\r\n",
                "78 153 99 0 0\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 10\r\nCACCAAACCA\r\nAACAAACCCC\r\nAAAAAAACCC\r\nACCACACCCA\r\nACACCAACAC\r\nCACACACCCC\r\nAAAAACCACA\r\nACCCCCAAAA\r\nCAACCACCCC\r\nCCAACCAACC\r\n",
                "281 2744 0 0 0\r\n"
            ],
            [
                "1 1\r\nB\r\n",
                "1 0 0 0 0\r\n"
            ]
        ]
    }
]