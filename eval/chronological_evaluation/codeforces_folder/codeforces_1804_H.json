[
    {
        "name": "Code Lock",
        "description": "Lara has a safe that is locked with a circle-shaped code lock that consists of\na rotating arrow, a static circumference around the arrow, an input screen,\nand an input button. The circumference of the lock is split into \n    k\n equal\nsections numbered from \n    1\n to \n    k\n in clockwise order. Arrow always\npoints to one of the sections. Each section is marked with one of the first\n\n    k\n letters of the English alphabet. No two sections are marked with the\nsame letter. Due to the lock limitations, the safe's password is a string of\nlength \n    n\n that consists of first \n    k\n letters of the English alphabet\nonly. Lara enters the password by rotating the lock's arrow and pressing the\ninput button. Initially, the lock's arrow points to section \n    1\n and the\ninput screen is empty. In one second she can do one of the following actions.\nRotate the arrow one section clockwise. If the arrow was pointing at section\n\n    x < k\n it will now point at section \n    x + 1\n. If the arrow was\npointing at section \n    k\n it will now point at section \n    1\n. Rotate the\narrow one section counter-clockwise. If the arrow was pointing at section \n    x\n    > 1\n it will now point at section \n    x - 1\n. If the arrow was pointing at\nsection \n    1\n it will now point at section \n    k\n. Press the input button.\nThe letter marked on the section that the arrow points to will be added to the\ncontent of the input screen. As soon as the content of the input screen\nmatches the password, the safe will open. Lara always enters her password in\nthe minimum possible time.Lara has recently found out that the safe can be re-\nprogrammed. She can take the first \n    k\n letters of the English alphabet and\nassign them to the sectors in any order she likes. Now she wants to re-arrange\nthe letters in a way that will minimize the number of seconds it takes her to\ninput the password. Compute this minimum number of seconds and the number of\nways to assign letters, for which this minimum number of seconds is achieved.\nTwo ways to assign letters to sectors are considered to be distinct if there\nexists at least one sector \n    i\n that is assigned different letters. Input\nThe first line of the input contains two integers \n    k\n and \n    n\n (\n    2\n    \n    \u2264 k \n    \u2264 16\n, \n    2 \n    \u2264 n \n    \u2264 100\n     000\n) \u2014 the number of\nsectors on the lock's circumference and the length of Lara's password,\nrespectively. The second line of the input contains a string of length \n    n\n\nthat consists of the first \n    k\n lowercase letters of the English alphabet\nonly. This string is the password. Output On the first line print minimum\npossible number of seconds it can take Lara to enter the password and open the\nsafe if she assigns letters to sectors optimally. On the second line print the\nnumber of ways to assign letters optimally. Examples Input 3 10 abcabcabca\nOutput 19 2 Input 4 20 bcbcbcbcadadadadcbda Output 40 2 Input 4 6 adcbda\nOutput 12 4 Note The initial states of optimal arrangements for the first\nexample are shown in the figure below. The initial states of optimal\narrangements for the second example are shown in the figure below. The initial\nstates of optimal arrangements for the third example are shown in the figure\nbelow.\n\n",
        "cf_contest_id": 1804,
        "cf_index": "H",
        "cf_rating": 3300,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks",
            "dp"
        ],
        "time_limit_seconds": 7.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3 10\r\nabcabcabca\r\n",
                "19\r\n2\r\n"
            ],
            [
                "4 20\r\nbcbcbcbcadadadadcbda\r\n",
                "40\r\n2\r\n"
            ],
            [
                "4 6\r\nadcbda\r\n",
                "12\r\n4\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 30\r\nabbbbbabbaaabbbbbbbbbbbbbbbaba\r\n",
                "38\r\n1\r\n"
            ],
            [
                "3 30\r\nccacbaacbcccaabaccaabccbbbaacb\r\n",
                "48\r\n2\r\n"
            ],
            [
                "4 30\r\ncadaabcabdaaaacabbacdcacaacbab\r\n",
                "58\r\n2\r\n"
            ],
            [
                "5 30\r\naaecdababadebeceeadbcdbdeaddbd\r\n",
                "65\r\n2\r\n"
            ],
            [
                "6 30\r\ndeaeeabcbfabedcdcbbafcbcdadada\r\n",
                "68\r\n2\r\n"
            ],
            [
                "10 30\r\nbbcihhbbfgfjcihidjebhibbdgieda\r\n",
                "77\r\n8\r\n"
            ],
            [
                "15 30\r\noijckajgjechclejkoldfghdfldkob\r\n",
                "95\r\n192\r\n"
            ],
            [
                "16 30\r\ndbaehbfgngpegnamejpcangmhddhii\r\n",
                "87\r\n96\r\n"
            ],
            [
                "16 5\r\namlhg\r\n",
                "9\r\n79833600\r\n"
            ],
            [
                "16 2\r\nah\r\n",
                "3\r\n174356582400\r\n"
            ],
            [
                "15 2\r\nij\r\n",
                "3\r\n12454041600\r\n"
            ],
            [
                "15 5\r\ndinaa\r\n",
                "8\r\n79833600\r\n"
            ],
            [
                "2 5\r\nabaaa\r\n",
                "7\r\n1\r\n"
            ]
        ]
    }
]