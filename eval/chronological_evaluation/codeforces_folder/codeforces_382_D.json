[
    {
        "name": "Ksenia and Pawns",
        "description": "Ksenia has a chessboard of size n \u00d7 m. Each cell of the chessboard contains\none of the characters: \"<\", \">\", \"^\", \"v\", \"#\". The cells that contain\ncharacter \"#\" are blocked. We know that all chessboard cells that touch the\nborder are blocked. Ksenia is playing with two pawns on this chessboard.\nInitially, she puts the pawns on the chessboard. One cell of the chessboard\ncan contain two pawns if and only if the cell is blocked. In other cases two\npawns can not stand in one cell. The game begins when Ksenia put pawns on the\nboard. In one move, Ksenia moves each pawn to a side adjacent cell in the\ndirection of arrows painted on the cell on which the corresponding pawn sits\n(if the pawn sits on \"#\", it does not move). Assume that Ksenia moves pawns\nsimultaneously (see the second test case). Of course, Ksenia plays for points.\nHow can one calculate the points per game? Very simply! Let's count how many\nmovements the first pawn made and how many movements the second pawn made, sum\nthese two numbers \u2014 it will be the resulting score of the game. Ksenia\nwonders: what is the maximum number of points she can earn (for that, she\nshould place the pawns optimally well early in the game). Help her and find\nthat number. Input The first line contains two integers, n and m (1 \u2264 n, m \u2264\n2000) \u2014 the sizes of the board. Each of the following n lines contains m\ncharacters \u2013 the board's description. Each character is one of the characters:\n\"<\", \">\", \"^\", \"v\", \"#\". It is guaranteed that the border cells of the table\nare blocked cells (with character \"#\"). Output If Ksenia can get infinitely\nmany points, print -1. Otherwise, print the maximum number of points she can\nget. Examples Input 1 1 # Output 0 Input 3 4 #### #>^# #### Output 3 Input 3\n4 #### #><# #### Output -1 Input 7 5 ##### ##v## ##v## ##### ##^## ##^##\n##### Output 4 Input 7 5 ##### ##v## ##v## ##<## ##^## ##^## ##### Output\n5\n\n",
        "cf_contest_id": 382,
        "cf_index": "D",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "graphs",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1 1\r\n#\r\n",
                "0\r\n"
            ],
            [
                "3 4\r\n####\r\n#>^#\r\n####\r\n",
                "3\r\n"
            ],
            [
                "3 4\r\n####\r\n#><#\r\n####\r\n",
                "-1\r\n"
            ],
            [
                "7 5\r\n#####\r\n##v##\r\n##v##\r\n#####\r\n##^##\r\n##^##\r\n#####\r\n",
                "4\r\n"
            ],
            [
                "7 5\r\n#####\r\n##v##\r\n##v##\r\n##<##\r\n##^##\r\n##^##\r\n#####\r\n",
                "5\r\n"
            ]
        ],
        "private_cases": [
            [
                "4 7\r\n#######\r\n#^>#<^#\r\n#^<#>^#\r\n#######\r\n",
                "6\r\n"
            ],
            [
                "2 2\r\n##\r\n##\r\n",
                "0\r\n"
            ],
            [
                "2 3\r\n###\r\n###\r\n",
                "0\r\n"
            ],
            [
                "5 5\r\n#####\r\n#<<<#\r\n#>v^#\r\n#>>>#\r\n#####\r\n",
                "8\r\n"
            ],
            [
                "5 6\r\n######\r\n#^<v<#\r\n#>v<>#\r\n#<v^>#\r\n######\r\n",
                "9\r\n"
            ],
            [
                "5 5\r\n#####\r\n#v>v#\r\n#<<>#\r\n#<^<#\r\n#####\r\n",
                "7\r\n"
            ],
            [
                "5 5\r\n#####\r\n#v^>#\r\n#vv>#\r\n#<>>#\r\n#####\r\n",
                "6\r\n"
            ],
            [
                "10 10\r\n##########\r\n#>>>>>>###\r\n#^v###>^##\r\n#^<###^<<#\r\n#^<<####^#\r\n#^#^#>v#^#\r\n#^####v#^#\r\n#^##>>>>^#\r\n#^########\r\n##########\r\n",
                "27\r\n"
            ],
            [
                "10 9\r\n#########\r\n#>>>>v###\r\n#####v###\r\n#####v###\r\n#########\r\n#####^###\r\n#####^###\r\n#>>>>^###\r\n#########\r\n#########\r\n",
                "14\r\n"
            ],
            [
                "10 9\r\n#########\r\n#>>>>v###\r\n###^#vv##\r\n#####vv<#\r\n######v##\r\n#####^<<#\r\n###v#^#^#\r\n#>>>>^#^#\r\n#########\r\n#########\r\n",
                "14\r\n"
            ],
            [
                "4 4\r\n####\r\n#<<#\r\n#>>#\r\n####\r\n",
                "4\r\n"
            ]
        ]
    }
]