[
    {
        "name": "Misha and XOR",
        "description": "After Misha's birthday he had many large numbers left, scattered across the\nroom. Now it's time to clean up and Misha needs to put them in a basket. He\nordered this task to his pet robot that agreed to complete the task at certain\nconditions. Before the robot puts a number x to the basket, Misha should\nanswer the question: is it possible to choose one or multiple numbers that\nalready are in the basket, such that their XOR sum equals x? If the answer is\npositive, you also need to give the indexes of these numbers. If there are\nmultiple options of choosing numbers, you are allowed to choose any correct\noption. After Misha's answer the robot puts the number to the basket.\nInitially the basket is empty. Each integer you put in the basket takes some\nnumber. The first integer you put into the basket take number 0, the second\ninteger takes number 1 and so on. Misha needs to clean up the place as soon as\npossible but unfortunately, he isn't that good at mathematics. He asks you to\nhelp him. Input The first line contains number m (1 \u2264 m \u2264 2000), showing how\nmany numbers are scattered around the room. The next m lines contain the\nnumbers in the order in which the robot puts them in the basket. Each number\nis a positive integer strictly less than 10^600 that doesn't contain leading\nzeroes. Output For each number either print a 0 on the corresponding line, if\nthe number cannot be represented as a XOR sum of numbers that are in the\nbasket, or print integer k showing how many numbers are in the representation\nand the indexes of these numbers. Separate the numbers by spaces. Each number\ncan occur in the representation at most once. Examples Input 7 7 6 5 4 3 2 1\nOutput 0 0 0 3 0 1 2 2 1 2 2 0 2 2 0 1 Input 2 5 5 Output 0 1 0 Note The XOR\nsum of numbers is the result of bitwise sum of numbers modulo 2.\n\n",
        "cf_contest_id": 504,
        "cf_index": "D",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "bitmasks"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n7\r\n6\r\n5\r\n4\r\n3\r\n2\r\n1\r\n",
                "0\r\n0\r\n0\r\n3 0 1 2\r\n2 1 2\r\n2 0 2\r\n2 0 1\r\n"
            ],
            [
                "2\r\n5\r\n5\r\n",
                "0\r\n1 0\r\n"
            ]
        ],
        "private_cases": [
            [
                "10\r\n81\r\n97\r\n12\r\n2\r\n16\r\n96\r\n80\r\n99\r\n6\r\n83\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n3 0 1 5\r\n2 1 3\r\n0\r\n2 0 3\r\n"
            ],
            [
                "10\r\n15106\r\n13599\r\n69319\r\n33224\r\n26930\r\n94490\r\n85089\r\n60931\r\n23137\r\n62868\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "10\r\n5059464500\r\n8210395556\r\n3004213265\r\n248593357\r\n5644084048\r\n9359824793\r\n8120649160\r\n4288978422\r\n183848555\r\n8135845959\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "10\r\n4\r\n12\r\n28\r\n29\r\n31\r\n31\r\n31\r\n31\r\n31\r\n31\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n1 4\r\n1 4\r\n1 4\r\n1 4\r\n1 4\r\n"
            ],
            [
                "10\r\n16\r\n24\r\n28\r\n30\r\n31\r\n31\r\n31\r\n31\r\n31\r\n31\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n1 4\r\n1 4\r\n1 4\r\n1 4\r\n1 4\r\n"
            ],
            [
                "10\r\n16\r\n8\r\n4\r\n2\r\n1\r\n31\r\n31\r\n31\r\n31\r\n31\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n5 0 1 2 3 4\r\n5 0 1 2 3 4\r\n5 0 1 2 3 4\r\n5 0 1 2 3 4\r\n5 0 1 2 3 4\r\n"
            ],
            [
                "10\r\n1\r\n2\r\n4\r\n8\r\n16\r\n31\r\n31\r\n31\r\n31\r\n31\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n5 0 1 2 3 4\r\n5 0 1 2 3 4\r\n5 0 1 2 3 4\r\n5 0 1 2 3 4\r\n5 0 1 2 3 4\r\n"
            ]
        ]
    }
]