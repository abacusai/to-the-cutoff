[
    {
        "name": "Boredom",
        "description": "Ilya is sitting in a waiting area of Metropolis airport and is bored of\nlooking at time table that shows again and again that his plane is delayed. So\nhe took out a sheet of paper and decided to solve some problems. First Ilya\nhas drawn a grid of size n \u00d7 n and marked n squares on it, such that no two\nmarked squares share the same row or the same column. He calls a rectangle on\na grid with sides parallel to grid sides beautiful if exactly two of its\ncorner squares are marked. There are exactly n\u00b7(n - 1) / 2 beautiful\nrectangles. Ilya has chosen q query rectangles on a grid with sides parallel\nto grid sides (not necessarily beautiful ones), and for each of those\nrectangles he wants to find its beauty degree. Beauty degree of a rectangle is\nthe number of beautiful rectangles that share at least one square with the\ngiven one. Now Ilya thinks that he might not have enough time to solve the\nproblem till the departure of his flight. You are given the description of\nmarked cells and the query rectangles, help Ilya find the beauty degree of\neach of the query rectangles. Input The first line of input contains two\nintegers n and q (2 \u2264 n \u2264 200 000, 1 \u2264 q \u2264 200 000) \u2014 the size of the grid and\nthe number of query rectangles. The second line contains n integers p1, p2,\n..., pn, separated by spaces (1 \u2264 pi \u2264 n, all pi are different), they specify\ngrid squares marked by Ilya: in column i he has marked a square at row pi,\nrows are numbered from 1 to n, bottom to top, columns are numbered from 1 to\nn, left to right. The following q lines describe query rectangles. Each\nrectangle is described by four integers: l, d, r, u (1 \u2264 l \u2264 r \u2264 n, 1 \u2264 d \u2264 u\n\u2264 n), here l and r are the leftmost and the rightmost columns of the\nrectangle, d and u the bottommost and the topmost rows of the rectangle.\nOutput For each query rectangle output its beauty degree on a separate line.\nExamples Input 2 3 1 2 1 1 1 1 1 1 1 2 1 1 2 2 Output 1 1 1 Input 4 2 1 3 2 4\n4 1 4 4 1 1 2 3 Output 3 5 Note The first sample test has one beautiful\nrectangle that occupies the whole grid, therefore the answer to any query is\n1. In the second sample test the first query rectangle intersects 3 beautiful\nrectangles, as shown on the picture below: There are 5 beautiful rectangles\nthat intersect the second query rectangle, as shown on the following picture:\n\n",
        "cf_contest_id": 853,
        "cf_index": "C",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "2 3\r\n1 2\r\n1 1 1 1\r\n1 1 1 2\r\n1 1 2 2\r\n",
                "1\r\n1\r\n1\r\n"
            ],
            [
                "4 2\r\n1 3 2 4\r\n4 1 4 4\r\n1 1 2 3\r\n",
                "3\r\n5\r\n"
            ]
        ],
        "private_cases": [
            [
                "7 7\r\n1 2 3 6 7 4 5\r\n3 2 4 6\r\n3 2 5 4\r\n3 6 7 7\r\n1 1 4 4\r\n2 2 7 6\r\n1 2 6 2\r\n1 2 6 7\r\n",
                "17\r\n16\r\n11\r\n16\r\n21\r\n11\r\n21\r\n"
            ],
            [
                "2 9\r\n1 2\r\n1 1 1 1\r\n1 1 1 2\r\n1 2 1 2\r\n1 1 2 1\r\n1 1 2 2\r\n1 2 2 2\r\n2 1 2 1\r\n2 1 2 2\r\n2 2 2 2\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "10 10\r\n5 1 6 2 8 3 4 10 9 7\r\n8 1 8 1\r\n1 7 2 7\r\n4 3 8 7\r\n3 7 9 7\r\n7 6 7 7\r\n2 3 10 6\r\n6 4 8 7\r\n1 6 4 7\r\n1 2 5 4\r\n8 5 10 10\r\n",
                "3\r\n8\r\n37\r\n27\r\n21\r\n38\r\n29\r\n21\r\n23\r\n24\r\n"
            ],
            [
                "10 10\r\n7 5 1 6 10 3 4 8 9 2\r\n4 3 7 10\r\n3 6 8 7\r\n3 2 6 4\r\n1 1 2 8\r\n3 8 10 9\r\n7 3 8 9\r\n4 5 5 9\r\n2 5 6 7\r\n2 5 6 7\r\n1 7 6 10\r\n",
                "38\r\n30\r\n25\r\n17\r\n24\r\n28\r\n29\r\n32\r\n32\r\n25\r\n"
            ],
            [
                "10 10\r\n5 1 6 2 8 3 4 10 9 7\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n",
                "45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n"
            ],
            [
                "10 10\r\n5 1 6 2 8 3 4 10 9 7\r\n9 5 9 5\r\n4 7 4 7\r\n4 8 5 8\r\n9 1 9 4\r\n4 1 4 6\r\n10 9 10 9\r\n3 5 6 5\r\n3 4 10 4\r\n3 2 5 2\r\n7 8 7 8\r\n",
                "10\r\n16\r\n17\r\n8\r\n27\r\n2\r\n25\r\n26\r\n16\r\n16\r\n"
            ],
            [
                "6 10\r\n3 6 1 2 5 4\r\n2 6 2 6\r\n2 3 2 5\r\n6 2 6 2\r\n1 5 1 5\r\n3 5 3 5\r\n2 2 2 4\r\n2 4 5 4\r\n5 4 5 4\r\n1 5 6 5\r\n6 2 6 2\r\n",
                "5\r\n9\r\n2\r\n2\r\n6\r\n8\r\n11\r\n8\r\n9\r\n2\r\n"
            ],
            [
                "10 10\r\n1 10 2 9 3 8 4 7 5 6\r\n4 3 7 10\r\n3 6 8 7\r\n3 2 6 4\r\n1 1 2 8\r\n3 8 10 9\r\n7 3 8 9\r\n4 5 5 9\r\n2 5 6 7\r\n2 5 6 7\r\n1 7 6 10\r\n",
                "39\r\n30\r\n26\r\n16\r\n23\r\n29\r\n27\r\n30\r\n30\r\n27\r\n"
            ],
            [
                "10 5\r\n5 10 4 9 3 8 2 7 1 6\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n",
                "45\r\n45\r\n45\r\n45\r\n45\r\n"
            ],
            [
                "10 10\r\n1 6 2 7 3 8 4 9 5 10\r\n8 8 8 8\r\n2 1 2 7\r\n8 4 8 4\r\n3 9 3 9\r\n7 7 7 7\r\n2 10 2 10\r\n6 8 9 8\r\n1 4 1 4\r\n1 5 4 5\r\n8 10 8 10\r\n",
                "16\r\n17\r\n12\r\n6\r\n16\r\n2\r\n23\r\n7\r\n18\r\n8\r\n"
            ],
            [
                "10 10\r\n5 6 4 7 3 8 2 9 1 10\r\n8 8 8 8\r\n2 1 2 7\r\n8 4 8 4\r\n3 9 3 9\r\n7 7 7 7\r\n2 10 2 10\r\n6 8 9 8\r\n1 4 1 4\r\n1 5 4 5\r\n8 10 8 10\r\n",
                "16\r\n17\r\n12\r\n6\r\n16\r\n2\r\n23\r\n4\r\n20\r\n8\r\n"
            ],
            [
                "10 10\r\n10 1 9 2 8 3 7 4 6 5\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n",
                "45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n"
            ],
            [
                "10 10\r\n10 5 9 4 8 3 7 2 6 1\r\n8 1 8 1\r\n1 7 2 7\r\n4 3 8 7\r\n3 7 9 7\r\n7 6 7 7\r\n2 3 10 6\r\n6 4 8 7\r\n1 6 4 7\r\n1 2 5 4\r\n8 5 10 10\r\n",
                "8\r\n10\r\n38\r\n26\r\n21\r\n38\r\n31\r\n20\r\n21\r\n19\r\n"
            ],
            [
                "10 10\r\n6 1 7 2 8 3 9 4 10 5\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n1 1 10 10\r\n",
                "45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n45\r\n"
            ],
            [
                "10 10\r\n6 5 7 4 8 3 9 2 10 1\r\n8 8 8 8\r\n2 1 2 7\r\n8 4 8 4\r\n3 9 3 9\r\n7 7 7 7\r\n2 10 2 10\r\n6 8 9 8\r\n1 4 1 4\r\n1 5 4 5\r\n8 10 8 10\r\n",
                "11\r\n17\r\n15\r\n6\r\n16\r\n2\r\n19\r\n4\r\n20\r\n8\r\n"
            ],
            [
                "10 10\r\n10 9 8 7 6 5 4 3 2 1\r\n8 8 8 8\r\n2 1 2 7\r\n8 4 8 4\r\n3 9 3 9\r\n7 7 7 7\r\n2 10 2 10\r\n6 8 9 8\r\n1 4 1 4\r\n1 5 4 5\r\n8 10 8 10\r\n",
                "9\r\n14\r\n21\r\n16\r\n16\r\n9\r\n15\r\n4\r\n20\r\n3\r\n"
            ],
            [
                "10 10\r\n1 2 3 4 5 6 7 8 9 10\r\n8 8 8 8\r\n2 1 2 7\r\n8 4 8 4\r\n3 9 3 9\r\n7 7 7 7\r\n2 10 2 10\r\n6 8 9 8\r\n1 4 1 4\r\n1 5 4 5\r\n8 10 8 10\r\n",
                "23\r\n17\r\n12\r\n6\r\n27\r\n2\r\n23\r\n7\r\n24\r\n8\r\n"
            ],
            [
                "10 10\r\n9 8 3 4 5 6 7 2 1 10\r\n8 1 8 1\r\n1 7 2 7\r\n4 3 8 7\r\n3 7 9 7\r\n7 6 7 7\r\n2 3 10 6\r\n6 4 8 7\r\n1 6 4 7\r\n1 2 5 4\r\n8 5 10 10\r\n",
                "8\r\n14\r\n38\r\n27\r\n19\r\n38\r\n29\r\n20\r\n23\r\n19\r\n"
            ],
            [
                "100 1\r\n100 50 99 49 98 48 97 47 96 46 95 45 94 44 93 43 92 42 91 41 90 40 89 39 88 38 87 37 86 36 85 35 84 34 83 33 82 32 81 31 80 30 79 29 78 28 77 27 76 26 75 25 74 24 73 23 72 22 71 21 70 20 69 19 68 18 67 17 66 16 65 15 64 14 63 13 62 12 61 11 60 10 59 9 58 8 57 7 56 6 55 5 54 4 53 3 52 2 51 1\r\n9 8 99 93\r\n",
                "4886\r\n"
            ]
        ]
    }
]