[
    {
        "name": "One Node is Gone",
        "description": "You have an integer \n    n\n. Let's define following tree generation as McDic's\ngeneration: Make a complete and full binary tree of \n    2^n - 1\n vertices.\nComplete and full binary tree means a tree that exactly one vertex is a root,\nall leaves have the same depth (distance from the root), and all non-leaf\nnodes have exactly two child nodes. Select a non-root vertex \n    v\n from that\nbinary tree. Remove \n    v\n from tree and make new edges between \n    v\n's\nparent and \n    v\n's direct children. If \n    v\n has no children, then no new\nedges will be made. You have a tree. Determine if this tree can be made by\nMcDic's generation. If yes, then find the parent vertex of removed vertex in\ntree. Input The first line contains integer \n    n\n (\n    2 \n    \u2264 n \n    \u2264\n    17\n). The \n    i\n-th of the next \n    2^n - 3\n lines contains two integers\n\n    a_i\n and \n    b_i\n (\n    1 \n    \u2264 a_i\n     b_i\n    \u2264 2^n - 2\n)\n\u2014 meaning there is an edge between \n    a_i\n and \n    b_i\n. It is\nguaranteed that the given edges form a tree. Output Print two lines. In the\nfirst line, print a single integer \u2014 the number of answers. If given tree\ncannot be made by McDic's generation, then print \n    0\n. In the second line,\nprint all possible answers in ascending order, separated by spaces. If the\ngiven tree cannot be made by McDic's generation, then don't print anything.\nExamples Input 4 1 2 1 3 2 4 2 5 3 6 3 13 3 14 4 7 4 8 5 9 5 10 6 11 6 12\nOutput 1 3 Input 2 1 2 Output 2 1 2 Input 3 1 2 2 3 3 4 4 5 5 6 Output 0 Note\nIn the first example, \n    3\n is the only possible answer. In the second\nexample, there are \n    2\n possible answers. In the third example, the tree\ncan't be generated by McDic's generation.\n\n",
        "cf_contest_id": 1228,
        "cf_index": "F",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n3 13\r\n3 14\r\n4 7\r\n4 8\r\n5 9\r\n5 10\r\n6 11\r\n6 12\r\n",
                "1\r\n3 "
            ],
            [
                "2\r\n1 2\r\n",
                "2\r\n1 2 "
            ],
            [
                "3\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n",
                "0\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n3 7\r\n4 8\r\n4 9\r\n5 12\r\n5 13\r\n7 10\r\n7 11\r\n1 14\r\n",
                "0\r\n"
            ],
            [
                "4\r\n1 2\r\n1 3\r\n2 4\r\n2 5\r\n3 6\r\n3 7\r\n4 8\r\n4 9\r\n5 12\r\n5 13\r\n7 10\r\n7 11\r\n5 14\r\n",
                "0\r\n"
            ],
            [
                "6\r\n53 61\r\n35 53\r\n35 39\r\n34 53\r\n34 54\r\n34 62\r\n43 54\r\n23 43\r\n12 43\r\n1 54\r\n1 7\r\n1 57\r\n40 62\r\n30 40\r\n28 40\r\n4 62\r\n4 60\r\n4 45\r\n19 61\r\n19 36\r\n36 42\r\n36 52\r\n10 19\r\n10 48\r\n10 46\r\n2 61\r\n2 51\r\n2 27\r\n5 51\r\n3 51\r\n15 27\r\n22 27\r\n39 47\r\n6 47\r\n6 59\r\n6 24\r\n9 47\r\n9 49\r\n9 21\r\n20 39\r\n14 20\r\n14 18\r\n13 14\r\n8 20\r\n8 44\r\n8 29\r\n33 35\r\n33 38\r\n16 33\r\n16 17\r\n16 26\r\n17 55\r\n17 41\r\n26 31\r\n11 26\r\n25 38\r\n25 50\r\n25 32\r\n37 38\r\n37 58\r\n37 56\r\n",
                "2\r\n35 53 "
            ],
            [
                "4\r\n5 9\r\n5 6\r\n5 10\r\n5 13\r\n10 11\r\n10 12\r\n3 6\r\n11 14\r\n7 10\r\n8 10\r\n1 13\r\n4 6\r\n2 9\r\n",
                "0\r\n"
            ],
            [
                "4\r\n5 8\r\n10 11\r\n6 9\r\n8 10\r\n2 4\r\n10 13\r\n1 6\r\n7 8\r\n3 10\r\n4 14\r\n8 9\r\n4 9\r\n3 12\r\n",
                "0\r\n"
            ],
            [
                "4\r\n1 9\r\n6 13\r\n2 4\r\n2 9\r\n7 12\r\n3 4\r\n7 8\r\n1 11\r\n5 7\r\n6 12\r\n2 12\r\n6 10\r\n1 14\r\n",
                "0\r\n"
            ],
            [
                "5\r\n1 2\r\n2 3\r\n3 30\r\n3 5\r\n3 6\r\n2 7\r\n7 8\r\n2 9\r\n9 10\r\n10 11\r\n10 12\r\n9 13\r\n13 14\r\n13 15\r\n1 16\r\n16 17\r\n17 18\r\n18 19\r\n18 20\r\n17 21\r\n21 22\r\n21 23\r\n16 24\r\n24 25\r\n25 26\r\n25 27\r\n24 28\r\n28 29\r\n4 28\r\n",
                "0\r\n"
            ]
        ]
    }
]