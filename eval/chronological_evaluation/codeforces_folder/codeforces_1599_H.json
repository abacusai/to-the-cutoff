[
    {
        "name": "Hidden Fortress",
        "description": "This is an interactive problem! As part of your contribution in the Great\nBubble War, you have been tasked with finding the newly built enemy fortress.\nThe world you live in is a giant \n    10^9 \n    \u00d7 10^9\n grid, with squares\nhaving both coordinates between \n    1\n and \n    10^9\n. You know that the\nenemy base has the shape of a rectangle, with the sides parallel to the sides\nof the grid. The people of your world are extremely scared of being at the\nedge of the world, so you know that the base doesn't contain any of the\nsquares on the edges of the grid (the \n    x\n or \n    y\n coordinate being\n\n    1\n or \n    10^9\n). To help you locate the base, you have been given a\ndevice that you can place in any square of the grid, and it will tell you the\nmanhattan distance to the closest square of the base. The manhattan distance\nfrom square \n    (a, b)\n to square \n    (p, q)\n is calculated as\n\n    |a\u2212p|+|b\u2212q|\n. If you try to place the device inside the enemy base, you\nwill be captured by the enemy. Because of this, you need to make sure to never\nplace the device inside the enemy base. Unfortunately, the device is powered\nby a battery and you can't recharge it. This means that you can use the device\nat most \n    40\n times. Input The input contains the answers to your queries.\nInteraction Your code is allowed to place the device on any square in the grid\nby writing \"? \n    i\n \n    j\n\" \n    (1 \n    \u2264 i,j \n    \u2264 10^9)\n. In return, it\nwill recieve the manhattan distance to the closest square of the enemy base\nfrom square \n    (i,j)\n or \n    -1\n if the square you placed the device on is\ninside the enemy base or outside the grid. If you recieve \n    -1\n instead of\na positive number, exit immidiately and you will see the wrong answer verdict.\nOtherwise, you can get an arbitrary verdict because your solution will\ncontinue to read from a closed stream. Your solution should use no more than\n\n    40\n queries. Once you are sure where the enemy base is located, you\nshould print \"! \n    x\n \n    y\n \n    p\n \n    q\n\" \n    (1 \n    \u2264 x \n    \u2264 p\n    \u2264\n    10^9, 1 \n    \u2264 y \n    \u2264 q\n    \u2264 10^9)\n, where \n    (x, y)\n is the square\ninside the enemy base with the smallest \n    x\n and \n    y\n coordinates, and\n\n    (p, q)\n is the square inside the enemy base with the largest \n    x\n and\n\n    y\n coordinates. Note that answering doesn't count as one of the 40\nqueries. After printing a query or printing the answer, do not forget to\noutput end of line and flush the output. Otherwise, you will get idleness\nlimit exceeded. To do this, use: fflush(stdout) or cout.flush() in C++;\nSystem.out.flush() in Java; flush(output) in Pascal; stdout.flush() in Python;\nSee the documentation for other languages. Example Input 1 1 2 1 Output ? 2 2\n? 5 5 ? 4 7 ? 1 5 ! 2 3 4 5\n\n",
        "cf_contest_id": 1599,
        "cf_index": "H",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "interactive",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 3 4 5\r\n",
                "34\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 3 6 6\r\n",
                "34\r\n"
            ],
            [
                "100 100 1000 1000\r\n",
                "34\r\n"
            ],
            [
                "2 2 999999999 999999999\r\n",
                "34\r\n"
            ],
            [
                "123 123 999999999 999999999\r\n",
                "34\r\n"
            ],
            [
                "2 2 456 456\r\n",
                "34\r\n"
            ],
            [
                "999999998 999999998 999999999 999999999\r\n",
                "34\r\n"
            ],
            [
                "456 456 456456 456456\r\n",
                "34\r\n"
            ],
            [
                "888 4444 666666 4445\r\n",
                "34\r\n"
            ],
            [
                "444 8898 445 888888\r\n",
                "34\r\n"
            ],
            [
                "2 2 3 3\r\n",
                "34\r\n"
            ],
            [
                "2 6 8 9\r\n",
                "34\r\n"
            ],
            [
                "789 789 4564 1000000\r\n",
                "33\r\n"
            ],
            [
                "2 999999998 3 999999999\r\n",
                "34\r\n"
            ],
            [
                "999999998 2 999999999 3\r\n",
                "34\r\n"
            ],
            [
                "500000000 500000000 999999999 999999999\r\n",
                "33\r\n"
            ]
        ]
    }
]