[
    {
        "name": "Masha and a Beautiful Tree",
        "description": "The girl named Masha was walking in the forest and found a complete binary\ntree of height \n    n\n and a permutation \n    p\n of length \n    m=2^n\n. A\ncomplete binary tree of height \n    n\n is a rooted tree such that every vertex\nexcept the leaves has exactly two sons, and the length of the path from the\nroot to any of the leaves is \n    n\n. The picture below shows the complete\nbinary tree for \n    n=2\n. A permutation is an array consisting of \n    n\n\ndifferent integers from \n    1\n to \n    n\n. For example, [\n    2,3,1,5,4\n] is\na permutation, but [\n    1,2,2\n] is not (\n    2\n occurs twice), and\n[\n    1,3,4\n] is also not a permutation (\n    n=3\n, but there is \n    4\n in\nthe array). Let's enumerate \n    m\n leaves of this tree from left to right.\nThe leaf with the number \n    i\n contains the value \n    p_i\n (\n    1 \n    \u2264 i\n    \n    \u2264 m\n). For example, if \n    n = 2\n, \n    p = [3, 1, 4, 2]\n, the tree\nwill look like this: Masha considers a tree beautiful if the values in its\nleaves are ordered from left to right in increasing order. In one operation,\nMasha can choose any non-leaf vertex of the tree and swap its left and right\nsons (along with their subtrees). For example, if Masha applies this operation\nto the root of the tree discussed above, it will take the following form: Help\nMasha understand if she can make a tree beautiful in a certain number of\noperations. If she can, then output the minimum number of operations to make\nthe tree beautiful. Input The first line contains single integer \n    t\n (\n    1\n    \n    \u2264 t \n    \u2264 10^4\n) \u2014 number of test cases. In each test case, the first\nline contains an integer \n    m\n (\n    1 \n    \u2264 m \n    \u2264 262144\n), which is a\npower of two \u2014 the size of the permutation \n    p\n. The second line contains\n\n    m\n integers: \n    p_1, p_2, \n    \u2026, p_m\n (\n    1 \n    \u2264 p_i \n    \u2264 m\n) \u2014\nthe permutation \n    p\n. It is guaranteed that the sum of \n    m\n over all\ntest cases does not exceed \n    3 \n    \u00b7 10^5\n. Output For each test case in\na separate line, print the minimum possible number of operations for which\nMasha will be able to make the tree beautiful or -1, if this is not possible.\nExample Input 4 8 6 5 7 8 4 3 1 2 4 3 1 4 2 1 1 8 7 8 4 3 1 2 6 5 Output 4 -1\n0 -1 Note Consider the first test. In the first test case, you can act like\nthis (the vertex to which the operation is applied at the current step is\nhighlighted in purple): It can be shown that it is impossible to make a tree\nbeautiful in fewer operations.In the second test case, it can be shown that it\nis impossible to make a tree beautiful. In the third test case, the tree is\nalready beautiful.\n\n",
        "cf_contest_id": 1741,
        "cf_index": "D",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "divide and conquer",
            "graphs",
            "sortings",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n8\r\n6 5 7 8 4 3 1 2\r\n4\r\n3 1 4 2\r\n1\r\n1\r\n8\r\n7 8 4 3 1 2 6 5\r\n",
                "4\r\n-1\r\n0\r\n-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n8\r\n2 1 6 5 4 3 8 7\r\n",
                "-1\r\n"
            ],
            [
                "1\r\n16\r\n16 15 13 14 9 10 11 12 5 6 1 2 4 3 8 7\r\n",
                "-1\r\n"
            ]
        ]
    }
]