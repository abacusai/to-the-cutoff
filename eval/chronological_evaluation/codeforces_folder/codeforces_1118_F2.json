[
    {
        "name": "Tree Cutting (Hard Version)",
        "description": "You are given an undirected tree of \n    n\n vertices. Some vertices are\ncolored one of the \n    k\n colors, some are uncolored. It is guaranteed that\nthe tree contains at least one vertex of each of the \n    k\n colors. There\nmight be no uncolored vertices. You choose a subset of exactly \n    k - 1\n\nedges and remove it from the tree. Tree falls apart into \n    k\n connected\ncomponents. Let's call this subset of edges nice if none of the resulting\ncomponents contain vertices of different colors. How many nice subsets of\nedges are there in the given tree? Two subsets are considered different if\nthere is some edge that is present in one subset and absent in the other. The\nanswer may be large, so print it modulo \n    998244353\n. Input The first line\ncontains two integers \n    n\n and \n    k\n (\n    2 \n    \u2264 n \n    \u2264 3 \n    \u00b7\n    10^5\n, \n    2 \n    \u2264 k \n    \u2264 n\n) \u2014 the number of vertices in the tree and the\nnumber of colors, respectively. The second line contains \n    n\n integers\n\n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 k\n) \u2014 the colors of the\nvertices. \n    a_i = 0\n means that vertex \n    i\n is uncolored, any other\nvalue means the vertex \n    i\n is colored that color. The \n    i\n-th of the\nnext \n    n - 1\n lines contains two integers \n    v_i\n and \n    u_i\n (\n    1\n    \n    \u2264 v_i, u_i \n    \u2264 n\n, \n    v_i \n     u_i\n) \u2014 the edges of the tree. It is\nguaranteed that the given edges form a tree. It is guaranteed that the tree\ncontains at least one vertex of each of the \n    k\n colors. There might be no\nuncolored vertices. Output Print a single integer \u2014 the number of nice subsets\nof edges in the given tree. Two subsets are considered different if there is\nsome edge that is present in one subset and absent in the other. The answer\nmay be large, so print it modulo \n    998244353\n. Examples Input 5 2 2 0 0 1 2\n1 2 2 3 2 4 2 5 Output 1 Input 7 3 0 1 0 2 2 3 0 1 3 1 4 1 5 2 7 3 6 4 7\nOutput 4 Note Here is the tree from the first example: The only nice subset is\nedge \n    (2, 4)\n. Removing it makes the tree fall apart into components\n\n    4\n and \n    1, 2, 3, 5\n. The first component only\nincludes a vertex of color \n    1\n and the second component includes only\nvertices of color \n    2\n and uncolored vertices. Here is the tree from the\nsecond example: The nice subsets are \n    (1, 3), (4, 7)\n,\n\n    (1, 3), (7, 2)\n, \n    (3, 6), (4, 7)\n and \n    (3,\n    6), (7, 2)\n.\n\n",
        "cf_contest_id": 1118,
        "cf_index": "F2",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "dfs and similar",
            "dp",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 2\r\n2 0 0 1 2\r\n1 2\r\n2 3\r\n2 4\r\n2 5\r\n",
                "1\r\n"
            ],
            [
                "7 3\r\n0 1 0 2 2 3 0\r\n1 3\r\n1 4\r\n1 5\r\n2 7\r\n3 6\r\n4 7\r\n",
                "4\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 2\r\n1 2\r\n1 2\r\n",
                "1\r\n"
            ],
            [
                "2 2\r\n2 1\r\n1 2\r\n",
                "1\r\n"
            ],
            [
                "5 2\r\n1 0 1 0 2\r\n1 2\r\n1 5\r\n2 4\r\n3 5\r\n",
                "0\r\n"
            ],
            [
                "5 3\r\n0 2 1 1 3\r\n1 2\r\n1 5\r\n2 3\r\n2 4\r\n",
                "0\r\n"
            ],
            [
                "5 5\r\n4 1 5 2 3\r\n1 2\r\n1 5\r\n3 5\r\n4 5\r\n",
                "1\r\n"
            ],
            [
                "10 2\r\n0 1 2 2 1 0 0 0 1 1\r\n1 3\r\n2 6\r\n3 9\r\n4 6\r\n5 6\r\n6 7\r\n6 9\r\n6 10\r\n8 9\r\n",
                "0\r\n"
            ],
            [
                "10 5\r\n1 2 3 5 0 5 0 4 4 5\r\n7 9\r\n10 5\r\n5 6\r\n5 4\r\n7 8\r\n3 10\r\n1 8\r\n4 2\r\n7 10\r\n",
                "1\r\n"
            ],
            [
                "10 5\r\n0 1 0 2 3 0 1 4 5 1\r\n2 3\r\n3 1\r\n2 10\r\n10 6\r\n7 10\r\n9 4\r\n5 9\r\n5 6\r\n9 8\r\n",
                "2\r\n"
            ],
            [
                "10 8\r\n3 3 1 2 0 4 5 6 7 8\r\n5 2\r\n1 2\r\n10 7\r\n10 4\r\n3 8\r\n3 4\r\n1 7\r\n9 6\r\n6 7\r\n",
                "1\r\n"
            ],
            [
                "10 10\r\n1 2 3 4 5 6 7 8 9 10\r\n1 3\r\n2 10\r\n4 7\r\n8 5\r\n1 7\r\n8 6\r\n5 7\r\n10 8\r\n9 1\r\n",
                "1\r\n"
            ],
            [
                "20 10\r\n0 1 2 0 4 10 0 5 6 0 0 0 7 8 0 0 9 0 3 0\r\n8 1\r\n18 15\r\n10 13\r\n8 7\r\n5 11\r\n3 16\r\n4 19\r\n6 18\r\n20 5\r\n12 4\r\n14 17\r\n4 16\r\n9 3\r\n13 20\r\n10 17\r\n2 12\r\n2 8\r\n10 4\r\n8 18\r\n",
                "128\r\n"
            ]
        ]
    }
]