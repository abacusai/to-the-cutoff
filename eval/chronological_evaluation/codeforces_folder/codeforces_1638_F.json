[
    {
        "name": "Two Posters",
        "description": "You want to advertise your new business, so you are going to place two posters\non a billboard in the city center. The billboard consists of \n    n\n vertical\npanels of width \n    1\n and varying integer heights, held together by a\nhorizontal bar. The \n    i\n-th of the \n    n\n panels has height \n    h_i\n.\nInitially, all panels hang down from the bar (their top edges lie on it), but\nbefore placing the two posters, you are allowed to move each panel up by any\ninteger length, as long as it is still connected to the bar (its bottom edge\nlies below or on it). After the moves are done, you will place two posters:\none below the bar and one above it. They are not allowed to go over the bar\nand they must be positioned completely inside of the panels. What is the\nmaximum total area the two posters can cover together if you make the optimal\nmoves? Note that you can also place a poster of \n    0\n area. This case is\nequivalent to placing a single poster. Input The first line of input contains\none integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^4\n) \u2014 the number of vertical\npanels. The second line of input contains \n    n\n integers \n    h_1, h_2, ...,\n    h_n\n (\n    1 \n    \u2264 h_i \n    \u2264 10^12\n) \u2014 the heights of the \n    n\n vertical\npanels. Output Print a single integer \u2014 the maximum total area the two posters\ncan cover together. Examples Input 6 2 2 3 5 4 5 Output 18 Input 1 1 Output 1\nNote In the first sample test, we can choose an upper poster with area\n\n    12\n and a lower poster of area \n    6\n as in the image below. In the\nsecond sample test, we can cover the whole billboard using a single poster.\n\n",
        "cf_contest_id": 1638,
        "cf_index": "F",
        "cf_rating": 3200,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "greedy",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 1024.0,
        "public_cases": [
            [
                "6\r\n2 2 3 5 4 5\r\n",
                "18\r\n"
            ],
            [
                "1\r\n1\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "12\r\n5 1 4 9 4 6 6 9 12 5 3 9\r\n",
                "43\r\n"
            ],
            [
                "1\r\n1000000000000\r\n",
                "1000000000000\r\n"
            ],
            [
                "214\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "214\r\n"
            ],
            [
                "33\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "33\r\n"
            ],
            [
                "14\r\n754 5690 2301 3599 4919 5867 981 2943 1477 1922 915 894 5257 36\r\n",
                "20445\r\n"
            ],
            [
                "89\r\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\r\n",
                "89\r\n"
            ]
        ]
    }
]