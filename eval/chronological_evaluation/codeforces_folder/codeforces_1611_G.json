[
    {
        "name": "Robot and Candies",
        "description": "Polycarp has a rectangular field of \n    n \n    \u00d7 m\n cells (the size of the\n\n    n \n    \u00b7 m\n field does not exceed \n    10^6\n cells, \n    m \n    \u2265 2\n), in\neach cell of which there can be candy. There are \n    n\n rows and \n    m\n\ncolumns in the field. Let's denote a cell with coordinates \n    x\n vertically\nand \n    y\n horizontally by \n    (x, y)\n. Then the top-left cell will be\ndenoted as \n    (1, 1)\n, and the bottom-right cell will be denoted as \n    (n,\n    m)\n. If there is candy in the cell, then the cell is marked with the symbol\n'1', otherwise \u2014 with the symbol '0'. Polycarp made a Robot that can collect\ncandy. The Robot can move from \n    (x, y)\n either to \n    (x+1, y+1)\n, or to\n\n    (x+1, y-1)\n. If the Robot is in a cell that contains candy, it takes it.\nWhile there is at least one candy on the field, the following procedure is\nexecuted: Polycarp puts the Robot in an arbitrary cell on the topmost row of\nthe field. He himself chooses in which cell to place the Robot. It is allowed\nto put the Robot in the same cell multiple times. The Robot moves across the\nfield and collects candies. He controls the Robot. When the Robot leaves the\nfield, Polycarp takes it. If there are still candies left, Polycarp repeats\nthe procedure. Find the minimum number of times Polycarp needs to put the\nRobot on the topmost row of the field in order to collect all the candies. It\nis guaranteed that Polycarp can always collect all the candies. Input The\nfirst line of input data contains an integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264\n    10^4\n) \u2014 the number of input data sets in the test. Before each input data,\nthere is a blank line in the test. Next is a line that contains integers\n\n    n\n and \n    m\n (\n    2 \n    \u2264 m\n, \n    2 \n    \u2264 n \n    \u00b7 m \n    \u2264 10^6\n) \u2014\nfield sizes. This is followed by \n    n\n lines, \n    i\n-th of which describes\nthe \n    i\n-th line of the field. Each of them is a string of size \n    m\n\ncharacters: the symbol '1' corresponds to a cell with candy, the symbol '0' \u2014\nan empty cell. It is guaranteed that the sum of \n    n \n    \u00b7 m\n values for\nall input data sets in the test does not exceed \n    10^6\n. Output Print\n\n    t\n lines, each line should contain the answer to the corresponding set of\ninput data: the minimum number of times Polycarpus needs to put the Robot on\nthe topmost row of the field in order to collect all the candies. Example\nInput 4 2 2 00 00 3 3 100 000 101 4 5 01000 00001 00010 10000 3 3 111 111 111\nOutput 0 2 2 4 Note In the first set Polycarp may not put the Robot on the\nfield at all, so the answer \"0\" In the second set, Polycarp will need to place\nthe robot on the field twice. The Robot can collect candies like this: for the\nfirst time Polycarp puts the Robot in the cell \n    (1, 1)\n and collects\ncandies at the positions \n    (1, 1)\n and \n    (3, 3)\n. The second time\nPolycarp can again put the Robot in \n    (1, 1)\n, and then the Robot will move\nfirst to \n    (2,2)\n, then to \n    (3, 1)\n and collect the last candy. In the\nfourth set, you can show that the Robot cannot collect all the candies in\nthree passes.\n\n",
        "cf_contest_id": 1611,
        "cf_index": "G",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "graph matchings",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n\r\n2 2\r\n00\r\n00\r\n\r\n3 3\r\n100\r\n000\r\n101\r\n\r\n4 5\r\n01000\r\n00001\r\n00010\r\n10000\r\n\r\n3 3\r\n111\r\n111\r\n111\r\n",
                "0\r\n2\r\n2\r\n4\r\n"
            ]
        ],
        "private_cases": []
    }
]