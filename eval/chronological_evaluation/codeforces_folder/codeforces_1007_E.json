[
    {
        "name": "Mini Metro",
        "description": "In a simplified version of a \"Mini Metro\" game, there is only one subway line,\nand all the trains go in the same direction. There are \n    n\n stations on the\nline, \n    a_i\n people are waiting for the train at the \n    i\n-th station at\nthe beginning of the game. The game starts at the beginning of the \n    0\n-th\nhour. At the end of each hour (couple minutes before the end of the hour),\n\n    b_i\n people instantly arrive to the \n    i\n-th station. If at some\nmoment, the number of people at the \n    i\n-th station is larger than\n\n    c_i\n, you lose. A player has several trains which he can appoint to some\nhours. The capacity of each train is \n    k\n passengers. In the middle of the\nappointed hour, the train goes from the \n    1\n-st to the \n    n\n-th station,\ntaking as many people at each station as it can accommodate. A train can not\ntake people from the \n    i\n-th station if there are people at the\n\n    i-1\n-th station. If multiple trains are appointed to the same hour, their\ncapacities are being added up and they are moving together. The player wants\nto stay in the game for \n    t\n hours. Determine the minimum number of trains\nhe will need for it. Input The first line contains three integers \n    n\n,\n\n    t\n, and \n    k\n (\n    1 \n    \u2264 n, t \n    \u2264 200, 1 \n    \u2264 k \n    \u2264 10^9\n)\n\u2014 the number of stations on the line, hours we want to survive, and capacity\nof each train respectively. Each of the next \n    n\n lines contains three\nintegers \n    a_i\n, \n    b_i\n, and \n    c_i\n (\n    0 \n    \u2264 a_i, b_i \n    \u2264 c_i\n    \n    \u2264 10^9\n) \u2014 number of people at the \n    i\n-th station in the beginning\nof the game, number of people arriving to \n    i\n-th station in the end of\neach hour and maximum number of people at the \n    i\n-th station allowed\nrespectively. Output Output a single integer number \u2014 the answer to the\nproblem. Examples Input 3 3 10 2 4 10 3 3 9 4 2 8 Output 2 Input 4 10 5 1 1 1\n1 0 1 0 5 8 2 7 100 Output 12 Note Let's look at the sample. There are three\nstations, on the first, there are initially 2 people, 3 people on the second,\nand 4 people on the third. Maximal capacities of the stations are 10, 9, and 8\nrespectively. One of the winning strategies is to appoint two trains to the\nfirst and the third hours. Then on the first hour, the train takes all of the\npeople from the stations, and at the end of the hour, 4 people arrive at the\nfirst station, 3 on the second, and 2 on the third. In the second hour there\nare no trains appointed, and at the end of it, the same amount of people are\narriving again. In the third hour, the train first takes 8 people from the\nfirst station, and when it arrives at the second station, it takes only 2\npeople because it can accommodate no more than 10 people. Then it passes by\nthe third station because it is already full. After it, people arrive at the\nstations once more, and the game ends. As there was no such moment when the\nnumber of people at a station exceeded maximal capacity, we won using two\ntrains.\n\n",
        "cf_contest_id": 1007,
        "cf_index": "E",
        "cf_rating": 3400,
        "difficulty": 0,
        "cf_tags": [
            "dp"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3 10\r\n2 4 10\r\n3 3 9\r\n4 2 8\r\n",
                "2"
            ],
            [
                "4 10 5\r\n1 1 1\r\n1 0 1\r\n0 5 8\r\n2 7 100\r\n",
                "12"
            ]
        ],
        "private_cases": [
            [
                "1 1 1000000000\r\n0 0 0\r\n",
                "0"
            ],
            [
                "2 5 1\r\n0 5 6\r\n0 2 7\r\n",
                "22"
            ],
            [
                "2 10 5\r\n1 1 1\r\n12 3 15\r\n",
                "10"
            ],
            [
                "2 200 5\r\n1 1 1\r\n12 3 15\r\n",
                "200"
            ],
            [
                "5 200 10\r\n1 1 1\r\n1000000000 200 1000000000\r\n1000000000 300 1000000000\r\n1000000000 400 1000000000\r\n1000000000 500 1000000000\r\n",
                "300010200"
            ]
        ]
    }
]