[
    {
        "name": "Bear and Bowling",
        "description": "Limak is an old brown bear. He often goes bowling with his friends. Today he\nfeels really good and tries to beat his own record! For rolling a ball one\ngets a score \u2014 an integer (maybe negative) number of points. Score for i-th\nroll is multiplied by i and scores are summed up. So, for k rolls with scores\ns1, s2, ..., sk, total score is . Total score is 0 if there were no rolls.\nLimak made n rolls and got score ai for i-th of them. He wants to maximize his\ntotal score and he came up with an interesting idea. He will cancel some\nrolls, saying that something distracted him or there was a strong wind. Limak\nis able to cancel any number of rolls, maybe even all or none of them. Total\nscore is calculated as if there were only non-canceled rolls. Look at the\nsample tests for clarification. What maximum total score can Limak get? Input\nThe first line contains single integer n (1 \u2264 n \u2264 10^5). The second line\ncontains n space-separated integers a1, a2, ..., an (|ai| \u2264 10^7) - scores for\nLimak's rolls. Output Print the maximum possible total score after choosing\nrolls to cancel. Examples Input 5 -2 -8 0 5 -3 Output 13 Input 6 -10 20 -30 40\n-50 60 Output 400 Note In first sample Limak should cancel rolls with scores -\n8 and - 3. Then he is left with three rolls with scores - 2, 0, 5. Total score\nis 1\u00b7( - 2) + 2\u00b70 + 3\u00b75 = 13. In second sample Limak should cancel roll with\nscore - 50. Total score is 1\u00b7( - 10) + 2\u00b720 + 3\u00b7( - 30) + 4\u00b740 + 5\u00b760 = 400.\n\n",
        "cf_contest_id": 573,
        "cf_index": "E",
        "cf_rating": 3200,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n-2 -8 0 5 -3\r\n",
                "13\r\n"
            ],
            [
                "6\r\n-10 20 -30 40 -50 60\r\n",
                "400\r\n"
            ]
        ],
        "private_cases": [
            [
                "5\r\n-3 -2 -3 -3 -2\r\n",
                "0\r\n"
            ],
            [
                "10\r\n2 5 -2 2 -3 -2 3 5 -5 -2\r\n",
                "59\r\n"
            ],
            [
                "17\r\n46 49 48 46 45 48 45 40 45 45 49 46 50 46 48 48 42\r\n",
                "7062\r\n"
            ],
            [
                "50\r\n-1 -1 0 1 -1 1 -1 -1 0 1 -1 1 -1 -1 1 0 0 0 1 -1 -1 0 1 1 0 0 1 -1 0 0 -1 1 0 0 1 0 0 -1 1 -1 -1 0 1 0 0 -1 -1 0 0 0\r\n",
                "212\r\n"
            ],
            [
                "100\r\n-2 -3 -2 -2 -1 -1 -1 -1 -1 -3 -1 -2 -2 -2 -2 -3 -2 -2 -2 -1 -3 -3 -1 -2 -1 -1 -3 -1 -3 -1 -2 -2 -1 -3 -1 -1 -1 -3 -3 -3 -1 -1 -3 -2 -3 -1 -3 -2 -3 -3 -1 -1 -2 -1 -2 -1 -1 -3 -1 -2 -3 -3 -2 -1 -2 -3 -1 -1 -3 -1 -2 -1 -2 -1 -3 -1 -3 -2 -1 -2 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000 10000000\r\n",
                "18099993907\r\n"
            ],
            [
                "1\r\n-5\r\n",
                "0\r\n"
            ],
            [
                "1\r\n0\r\n",
                "0\r\n"
            ],
            [
                "1\r\n10000000\r\n",
                "10000000\r\n"
            ],
            [
                "10\r\n-7167 7648 9878 -3322 2789 3245 7823 -8001 4786 9940\r\n",
                "240399\r\n"
            ],
            [
                "15\r\n2 -2 5 7 -3 -3 -4 -5 -2 3 -10 7 -5 -2 -2\r\n",
                "98\r\n"
            ],
            [
                "50\r\n1 -7 -10 -8 -10 1 -4 -10 -3 -2 -7 -4 1 -10 1 -8 -4 -6 -6 -9 -9 -10 2 0 -5 -2 1 -5 -7 -10 -2 -5 -5 -10 -1 -8 0 -7 -10 -10 -7 -4 -7 -2 -1 -9 -9 1 2 1\r\n",
                "70\r\n"
            ],
            [
                "3\r\n-100 -99 101\r\n",
                "103\r\n"
            ]
        ]
    }
]