[
    {
        "name": "DZY Loves FFT",
        "description": "DZY loves Fast Fourier Transformation, and he enjoys using it. Fast Fourier\nTransformation is an algorithm used to calculate convolution. Specifically, if\na, b and c are sequences with length n, which are indexed from 0 to n - 1, and\nWe can calculate c fast using Fast Fourier Transformation. DZY made a little\nchange on this formula. Now To make things easier, a is a permutation of\nintegers from 1 to n, and b is a sequence only containing 0 and 1. Given a and\nb, DZY needs your help to calculate c. Because he is naughty, DZY provides a\nspecial way to get a and b. What you need is only three integers n, d, x.\nAfter getting them, use the code below to generate a and b. //x is 64-bit\nvariable; function getNextX()  x = (x * 37 + 10007) \nfunction initAB()  for(i = 0; i < n; i = i + 1) a[i] = i + 1;  for(i = 0; i\n< n; i = i + 1) swap(a[i], a[getNextX() \ni + 1) if (i < d) b[i] = 1; else b[i] = 0;  for(i = 0; i < n; i = i + 1)\nswap(b[i], b[getNextX() \nafter division x by y. Function swap(x, y) swaps two values x and y. Input The\nonly line of input contains three space-separated integers n, d, x (1 \u2264 d \u2264 n\n\u2264 100000; 0 \u2264 x \u2264 1000000006). Because DZY is naughty, x can't be equal to\n27777500. Output Output n lines, the i-th line should contain an integer ci -\n1. Examples Input 3 1 1 Output 1 3 2 Input 5 4 2 Output 2 2 4 5 5 Input 5 4 3\nOutput 5 5 5 5 4 Note In the first sample, a is [1 3 2], b is [1 0 0], so c0 =\nmax(1\u00b71) = 1, c1 = max(1\u00b70, 3\u00b71) = 3, c2 = max(1\u00b70, 3\u00b70, 2\u00b71) = 2. In the\nsecond sample, a is [2 1 4 5 3], b is [1 1 1 0 1]. In the third sample, a is\n[5 2 1 4 3], b is [1 1 1 1 0].\n\n",
        "cf_contest_id": 444,
        "cf_index": "B",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "probabilities"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 1 1\r\n",
                "1\r\n3\r\n2\r\n"
            ],
            [
                "5 4 2\r\n",
                "2\r\n2\r\n4\r\n5\r\n5\r\n"
            ],
            [
                "5 4 3\r\n",
                "5\r\n5\r\n5\r\n5\r\n4\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 2 4\r\n",
                "0\r\n0\r\n0\r\n4\r\n8\r\n5\r\n2\r\n1\r\n10\r\n8\r\n"
            ],
            [
                "10 2 5\r\n",
                "1\r\n9\r\n3\r\n8\r\n7\r\n9\r\n5\r\n8\r\n7\r\n10\r\n"
            ],
            [
                "10 1 6\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n10\r\n"
            ],
            [
                "10 4 7\r\n",
                "6\r\n10\r\n10\r\n6\r\n10\r\n4\r\n9\r\n10\r\n8\r\n9\r\n"
            ],
            [
                "1 1 8\r\n",
                "1\r\n"
            ]
        ]
    }
]