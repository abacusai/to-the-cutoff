[
    {
        "name": "Camping Groups",
        "description": "A club wants to take its members camping. In order to organize the event\nbetter the club directors decided to partition the members into several\ngroups. Club member i has a responsibility value ri and an age value ai. A\ngroup is a non-empty subset of club members with one member known as group\nleader. A group leader should be one of the most responsible members of the\ngroup (his responsibility value is not less than responsibility of any other\ngroup member) and his age absolute difference with any other group member\nshould not exceed k. Some club members are friends and want to be in the same\ngroup. They also like their group to be as large as possible. Now you should\nwrite a program that answers a series of questions like \"What's the largest\nsize of a group containing club member x and club member y?\". It's possible\nfor x or y to be the group leader. Input The first line contains two integers\nn and k (2 \u2264 n \u2264 10^5, 0 \u2264 k \u2264 10^9) \u2014 the number of club members and the age\nrestriction for one group. The next line contains integer numbers r1, r2, ...,\nrn (1 \u2264 ri \u2264 10^9) separated by space: ri denotes the i-th club member's\nresponsibility. In the same way there are integers a1, a2, ..., an (1 \u2264 ai \u2264\n10^9) in the third line: ai denotes the i-th club member's age. The next line\ncontains an integer q denoting the number of questions that you should answer\n(1 \u2264 q \u2264 10^5). The next q lines describe the questions. Each line contains\ntwo space-separated integers xi and yi (1 \u2264 xi, yi \u2264 n, xi \u2260 yi) \u2014 the indices\nof the club members that should end up in the same group. Output For each\nquestion print the maximum size of the group in a line. If making such a group\nis impossible print -1 instead. Examples Input 5 1 1 5 4 1 2 4 4 3 2 2 4 5 3 2\n3 2 5 4 1 Output 4 3 -1 4 Note In the first query the largest group with\nmembers 3 and 5 is 1, 3, 4, 5 where member 3 is the leader. In the second\nquery member 2 should be the leader so the group will be 1, 2, 3. In the\nthird query the leader of the group should have age 3 so the only leader can\nbe member 3, who is less responsible than member 2. So making a group is\nimpossible. The group for the fourth query is the same as first query.\n\n",
        "cf_contest_id": 173,
        "cf_index": "E",
        "cf_rating": 2600,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5 1\r\n1 5 4 1 2\r\n4 4 3 2 2\r\n4\r\n5 3\r\n2 3\r\n2 5\r\n4 1\r\n",
                "4 3 -1 4 "
            ]
        ],
        "private_cases": [
            [
                "20 1000\r\n14978 51012 24266 26753 21674 21363 14717 36618 6337 11135 64290 21080 52457 28572 5589 60647 14024 21056 18261 43386\r\n5560 7992 14519 12180 12807 15025 13363 511 169 3696 5316 11897 5457 8602 10476 10306 6891 11437 14559 15375\r\n30\r\n14 13\r\n15 18\r\n2 7\r\n2 3\r\n2 10\r\n4 12\r\n4 9\r\n13 6\r\n3 11\r\n16 7\r\n8 7\r\n3 6\r\n18 12\r\n12 18\r\n14 9\r\n5 7\r\n8 10\r\n5 6\r\n12 14\r\n1 2\r\n1 11\r\n13 6\r\n2 6\r\n16 12\r\n20 8\r\n7 17\r\n2 6\r\n4 17\r\n9 13\r\n15 18\r\n",
                "-1 2 -1 -1 -1 4 -1 -1 -1 -1 -1 4 4 4 -1 3 -1 -1 -1 -1 3 -1 -1 -1 -1 -1 -1 -1 -1 2 "
            ],
            [
                "12 1000\r\n57901 40000 54605 6798 50655 13124 18088 8327 11507 27051 68550 1465\r\n13494 14292 12237 6380 13755 5042 602 6269 8407 19820 7470 6637\r\n30\r\n1 10\r\n7 10\r\n8 12\r\n2 4\r\n6 5\r\n5 10\r\n7 2\r\n11 5\r\n3 4\r\n10 7\r\n6 9\r\n4 6\r\n4 6\r\n2 9\r\n4 3\r\n6 9\r\n4 6\r\n5 4\r\n1 7\r\n12 8\r\n3 5\r\n2 3\r\n5 2\r\n11 12\r\n8 11\r\n6 11\r\n11 5\r\n8 3\r\n6 1\r\n1 9\r\n",
                "-1 -1 3 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 3 -1 -1 3 3 -1 -1 -1 -1 -1 -1 "
            ],
            [
                "14 1000\r\n28817 35377 18778 55705 1564 7137 7497 63785 66116 39628 21564 39209 20982 22369\r\n2025 18992 7584 14032 16283 11642 9704 13950 11953 5254 10629 6229 1755 14293\r\n30\r\n9 8\r\n10 9\r\n8 10\r\n2 10\r\n12 7\r\n10 8\r\n12 7\r\n9 4\r\n3 12\r\n8 12\r\n6 14\r\n8 7\r\n6 4\r\n6 13\r\n3 4\r\n7 12\r\n8 7\r\n9 6\r\n6 13\r\n12 6\r\n12 10\r\n12 7\r\n8 2\r\n14 6\r\n9 14\r\n10 3\r\n12 11\r\n3 1\r\n14 1\r\n10 8\r\n",
                "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 "
            ],
            [
                "17 1000\r\n60550 52570 43972 38449 28409 67564 29155 54931 18974 63448 7963 1323 41184 65019 5455 10910 31067\r\n8194 18313 8340 3844 9042 1971 14156 19998 9184 10239 12887 6726 13225 4736 13416 17336 16476\r\n30\r\n14 17\r\n5 16\r\n13 11\r\n17 2\r\n14 7\r\n11 15\r\n10 2\r\n5 11\r\n1 15\r\n4 3\r\n15 12\r\n1 5\r\n11 1\r\n1 2\r\n9 15\r\n13 5\r\n13 3\r\n11 8\r\n8 13\r\n4 12\r\n1 16\r\n2 7\r\n1 2\r\n3 10\r\n14 12\r\n7 12\r\n16 1\r\n7 16\r\n7 10\r\n7 13\r\n",
                "-1 -1 4 -1 -1 4 -1 -1 -1 -1 -1 4 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 4 "
            ],
            [
                "20 1000\r\n44886 43972 17254 851 6682 11007 33278 17368 12475 4802 17885 56115 31178 6895 26544 58481 39358 9997 20757 61812\r\n17776 3863 11794 11552 3423 9037 19086 19182 15421 7858 6326 1132 2961 6620 1305 18347 13811 7767 15132 7568\r\n30\r\n19 14\r\n15 20\r\n2 8\r\n6 13\r\n15 9\r\n1 18\r\n5 14\r\n14 13\r\n17 5\r\n16 15\r\n13 1\r\n20 11\r\n6 15\r\n13 14\r\n8 20\r\n8 5\r\n14 1\r\n7 1\r\n14 3\r\n5 4\r\n7 20\r\n8 1\r\n13 3\r\n9 16\r\n12 16\r\n4 3\r\n9 14\r\n1 2\r\n12 3\r\n8 4\r\n",
                "-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 4 -1 -1 -1 4 -1 -1 -1 2 -1 -1 -1 -1 "
            ],
            [
                "21 1000\r\n16088 58023 25373 63937 442 18889 65892 26484 25734 33126 69782 30344 51433 19900 28569 65908 41573 5392 51770 32775 26913\r\n3416 17513 4497 5894 7504 10538 10343 7556 11269 1542 11731 1835 5949 11641 15794 2595 16461 818 8085 4068 13281\r\n30\r\n21 4\r\n16 14\r\n12 17\r\n3 6\r\n15 20\r\n1 16\r\n3 18\r\n9 12\r\n19 5\r\n8 4\r\n12 20\r\n8 14\r\n6 2\r\n9 13\r\n10 1\r\n12 3\r\n2 20\r\n17 3\r\n11 2\r\n14 1\r\n19 7\r\n21 13\r\n18 4\r\n19 1\r\n1 2\r\n16 21\r\n13 14\r\n14 7\r\n20 18\r\n21 5\r\n",
                "-1 -1 -1 -1 -1 3 -1 -1 3 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 "
            ],
            [
                "5 5\r\n1 1 2 1 1\r\n18 5 16 10 8\r\n1\r\n5 3\r\n",
                "-1 "
            ]
        ]
    }
]