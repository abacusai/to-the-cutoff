[
    {
        "name": "Bear and Bad Powers of 42",
        "description": "Limak, a bear, isn't good at handling queries. So, he asks you to do it. We\nsay that powers of 42 (numbers 1, 42, 1764, ...) are bad. Other numbers are\ngood. You are given a sequence of n good integers t1, t2, ..., tn. Your task\nis to handle q queries of three types: 1 i \u2014 print ti in a separate line. 2 a\nb x \u2014 for set ti to x. It's guaranteed that x is a good number. 3 a b x \u2014 for\nincrease ti by x. After this repeat the process while at least one ti is bad.\nYou can note that after each query all ti are good. Input The first line of\nthe input contains two integers n and q (1 \u2264 n, q \u2264 100 000) \u2014 the size of\nLimak's sequence and the number of queries, respectively. The second line of\nthe input contains n integers t1, t2, ..., tn (2 \u2264 ti \u2264 10^9) \u2014 initial\nelements of Limak's sequence. All ti are good. Then, q lines follow. The i-th\nof them describes the i-th query. The first number in the line is an integer\ntypei (1 \u2264 typei \u2264 3) \u2014 the type of the query. There is at least one query of\nthe first type, so the output won't be empty. In queries of the second and the\nthird type there is 1 \u2264 a \u2264 b \u2264 n. In queries of the second type an integer x\n(2 \u2264 x \u2264 10^9) is guaranteed to be good. In queries of the third type an\ninteger x (1 \u2264 x \u2264 10^9) may be bad. Output For each query of the first type,\nprint the answer in a separate line. Example Input 6 12 40 1700 7 1672 4 1722\n3 2 4 42 1 2 1 3 3 2 6 50 1 2 1 4 1 6 2 3 4 41 3 1 5 1 1 1 1 3 1 5 Output 1742\n49 1842 1814 1822 43 44 107 Note After a query 3 2 4 42 the sequence is 40,\n1742, 49, 1714, 4, 1722. After a query 3 2 6 50 the sequence is 40, 1842, 149,\n1814, 104, 1822. After a query 2 3 4 41 the sequence is 40, 1842, 41, 41, 104,\n1822. After a query 3 1 5 1 the sequence is 43, 1845, 44, 44, 107, 1822.\n\n",
        "cf_contest_id": 679,
        "cf_index": "E",
        "cf_rating": 3100,
        "difficulty": 0,
        "cf_tags": [
            "data structures"
        ],
        "time_limit_seconds": 5.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6 12\r\n40 1700 7 1672 4 1722\r\n3 2 4 42\r\n1 2\r\n1 3\r\n3 2 6 50\r\n1 2\r\n1 4\r\n1 6\r\n2 3 4 41\r\n3 1 5 1\r\n1 1\r\n1 3\r\n1 5\r\n",
                "1742\r\n49\r\n1842\r\n1814\r\n1822\r\n43\r\n44\r\n107\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 20\r\n26 15 4 9 2 15 15 33 10 16\r\n3 1 8 332\r\n3 1 10 719\r\n3 4 8 659\r\n1 7\r\n3 3 10 983\r\n3 1 9 1087\r\n3 3 7 1369\r\n1 4\r\n3 3 10 1448\r\n1 10\r\n3 2 9 1496\r\n3 1 10 1335\r\n1 8\r\n3 5 10 2\r\n3 6 10 368\r\n1 3\r\n1 4\r\n3 3 9 883\r\n1 4\r\n3 1 9 1420\r\n",
                "1725\r\n5158\r\n3166\r\n8092\r\n8773\r\n9437\r\n10320\r\n"
            ],
            [
                "10 20\r\n46 44 31 40 11 20 12 44 17 40\r\n2 3 5 22\r\n1 4\r\n2 1 5 26\r\n3 5 10 2\r\n1 5\r\n1 7\r\n3 3 7 1740\r\n3 4 5 3108186\r\n3 3 5 124471354\r\n1 2\r\n3 1 1 1738\r\n3 3 5 3260\r\n3 10 10 1720\r\n3 4 6 4186\r\n3 3 7 1642\r\n3 6 6 771\r\n2 1 2 18\r\n2 4 5 52\r\n2 1 3 32\r\n3 8 9 74040\r\n",
                "22\r\n30\r\n16\r\n26\r\n"
            ],
            [
                "1 1\r\n23\r\n1 1\r\n",
                "23\r\n"
            ]
        ]
    }
]