[
    {
        "name": "Mission Possible",
        "description": "Allen, a government secret service, has been assigned to infiltrate a mafia\nsecret base to uncover crucial information regarding the mafia's operations.\nThe secret base is a rectangular bounded by \n    (x_L,y_L)\n, \n    (x_L,y_R)\n,\n\n    (x_R,y_L)\n, and \n    (x_R,y_R)\n in a Cartesian coordinate system where\n\n    x_L < x_R\n and \n    y_L < y_R\n. There are \n    N\n sensors placed inside\nthe secret base. The \n    i^th\n sensor is located at \n    (x_i, y_i)\n and\nhas an effective sensing radius of \n    r_i\n which can detect any person who\nis strictly within the radius of \n    r_i\n from \n    (x_i, y_i)\n. In other\nwords, the \n    i^th\n sensor can detect a person at location \n    (x_a,\n    y_a)\n if and only if the Euclidean distance of \n    (x_i, y_i)\n and \n    (x_a,\n    y_a)\n is strictly less than \n    r_i\n. It is also known that the Euclidean\ndistance of any two sensors \n    i\n and \n    j\n is strictly larger than \n    r_i\n    + r_j\n. Note that the Euclidean distance of two points, \n    (x_a, y_a)\n and\n\n    (x_b, y_b)\n, is \n    \u221a(|x_a - x_b|^2 + |y_a - y_b|^2)\n. Allen\nbegins his infiltration mission at location \n    (x_s, y_s)\n, and his target\nis located at \n    (x_t, y_t)\n. Allen has the power to run extremely fast in a\nstraight line while he needs to spend extra time to change his running\ntrajectory (to adjust his footing). Although he is a fast runner, he still\nneeds to make sure that none of the sensors detect him while he is running,\ni.e. there is no point in his running trajectory which is strictly within a\nsensor effective sensing radius. Let \n    P = \n    \n    (x_p_1, y_p_1), \n    \u2026,\n    (x_p_|P|, y_p_|P|)\n be the set of locations where Allen changes\nhis running trajectory, thus, Allen's running trajectory with \n    P\n is\n\n    (x_s, y_s) \n    \u2192 (x_p_1, y_p_1) \n    \u2192\n    \u2026\n    \u2192 (x_p_|P|, y_p_|P|) \n    \u2192 (x_t, y_t)\n where\n\n    (x_a,y_a) \n    \u2192 (x_b,y_b)\n implies that Allen is running from\n\n    (x_a,y_a)\n to \n    (x_b,y_b)\n in a straight line. The set \n    P\n is\nfeasible if and only if with \n    P\n, Allen is not detected by any sensor and\nis not running out of the secret base (although, Allen is allowed to run along\nthe secret base perimeter). Note that \n    x_p\n and \n    y_p\n, \n    (x_p,y_p)\n    \n    \u2208 P\n, are not necessarily integers; they can be real numbers. Your task\nin this problem is to find any one feasible \n    P\n which contains no more\nthan \n    1000\n points. Input Input begins with a line containing five\nintegers: \n    N\n \n    x_L\n \n    y_L\n \n    x_R\n \n    y_R\n (\n    0 \n    \u2264 N \n    \u2264\n    50\n; \n    0 \n    \u2264 x_L < x_R \n    \u2264 1000\n; \n    0 \n    \u2264 y_L < y_R \n    \u2264 1000\n)\nrepresenting the number of sensors and the secret base (\n    x_L\n, \n    y_L\n,\n\n    x_R\n, \n    y_R\n), respectively. The next line contains two integers:\n\n    x_s\n \n    y_s\n (\n    x_L < x_s < x_R\n; \n    y_L < y_s < y_R\n)\nrepresenting Allen's initial location. The next line contains two integers:\n\n    x_t\n \n    y_t\n (\n    x_L < x_t < x_R\n; \n    y_L < y_t < y_R\n)\nrepresenting Allen's target location. It is guaranteed that \n    x_s \n    \n    x_t\n or \n    y_s \n     y_t\n. The next \n    N\n lines each contains three\nintegers: \n    x_i\n \n    y_i\n \n    r_i\n (\n    x_L < x_i - r_i < x_i + r_i <\n    x_R\n; \n    y_L < y_i - r_i < y_i + r_i < y_R\n; \n    1 \n    \u2264 r_i \n    \u2264 1000\n)\nrepresenting a sensor at location \n    (x_i, y_i)\n with an effective sensing\nradius of \n    r_i\n. It is guaranteed that the Euclidean distance of any two\nsensors \n    i\n and \n    j\n is larger than \n    r_i + r_j\n. It is also\nguaranteed that the Euclidean distance of \n    (x_s,y_s)\n and \n    (x_t,y_t)\n\nto any sensor \n    i\n is larger than \n    r_i\n. Output Output in a line an\ninteger representing the size of a feasible \n    P\n. The next \n    |P|\n lines\neach contains two real numbers (separated by a single space); the \n    j^th\n\nline contains \n    x_j\n \n    y_j\n representing the \n    j^th\n point in\n\n    P\n. You may output any feasible \n    P\n with no more than \n    1000\n\npoints. Due to the nature of the output (floating point), let us define an\nepsilon \n    \u03f5\n to be \n    10^-6\n to verify the output. Consider\n\n    Q_1 = (x_s, y_s)\n, \n    Q_j+1 = P_j\n for all \n    1 \n    \u2264 j \n    \u2264 |P|\n,\nand \n    Q_|P|+2 = (x_t, y_t)\n. Then, \n    P\n is considered correct if and\nonly if \n    P\n contains no more than \n    1000\n points and all of the\nfollowing are satisfied: \n    x_L - \n    \u03f5\n    \u2264 x_p_k\n    \u2264 x_R +\n    \n    \u03f5\n and \n    y_L - \n    \u03f5\n    \u2264 y_p_k\n    \u2264 y_R + \n    \u03f5\n\nfor all \n    1 \n    \u2264 k \n    \u2264 |P|\n (Allen is not running out of the secret\nbase). For all \n    1 \n    \u2264 k < |Q|\n, let \n    S_k\n be the line segment\nconnecting \n    Q_k\n and \n    Q_k+1\n (Allen is running in straight line).\nFor all \n    1 \n    \u2264 i \n    \u2264 N\n, let \n    (x_k,i,y_k,i)\n be the point\nalong \n    S_k\n that is the closest to the \n    i^th\n sensor's location,\n\n    (x_i,y_i)\n. Let \n    d_k,i\n be the Euclidean distance between\n\n    (x_k,i,y_k,i)\n and \n    (x_i,y_i)\n. Then, the constraint \n    r_i \n    \u2264\n    d_k,i + \n    \u03f5\n should be satisfied (Allen is not detected by any\nsensor). All points in \n    Q\n are distinct. Two points, \n    (x_a,y_a)\n and\n\n    (x_b,y_b)\n, are considered distinct if and only if \n    |x_a - x_b| >\n    \n    \u03f5\n or \n    |y_a - y_b| > \n    \u03f5\n. Examples Input 3 2 2 50 26 4\n14 48 14 15 13 7 36 16 6 46 18 3 Output 2 13.25 23.1234567 36.591003 7.1 Input\n1 0 0 1000 1000 100 501 900 501 500 251 250 Output 0 Note Explanation for the\nsample input/output #1 The figure above shows the \n    P\n from the sample\noutput. Note that there exists a feasible \n    P\n with only one point in this\nsample, although you are not required to find such \n    P\n.\n\n",
        "cf_contest_id": 1252,
        "cf_index": "I",
        "cf_rating": 3000,
        "difficulty": 0,
        "cf_tags": [],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [],
        "private_cases": []
    }
]