[
    {
        "name": "Sum of Medians",
        "description": "In one well-known algorithm of finding the k-th order statistics we should\ndivide all elements into groups of five consecutive elements and find the\nmedian of each five. A median is called the middle element of a sorted array\n(it's the third largest element for a group of five). To increase the\nalgorithm's performance speed on a modern video card, you should be able to\nfind a sum of medians in each five of the array. A sum of medians of a sorted\nk-element set S = a1, a2, ..., ak, where a1 < a2 < a3 < ... < ak, will be\nunderstood by as The operator stands for taking the remainder, that is stands\nfor the remainder of dividing x by y. To organize exercise testing quickly\ncalculating the sum of medians for a changing set was needed. Input The first\nline contains number n (1 \u2264 n \u2264 10^5), the number of operations performed.\nThen each of n lines contains the description of one of the three operations:\nadd x \u2014 add the element x to the set; del x \u2014 delete the element x from the\nset; sum \u2014 find the sum of medians of the set. For any add x operation it is\ntrue that the element x is not included in the set directly before the\noperation. For any del x operation it is true that the element x is included\nin the set directly before the operation. All the numbers in the input are\npositive integers, not exceeding 10^9. Output For each operation sum print on\nthe single line the sum of medians of the current set. If the set is empty,\nprint 0. Please, do not use the \nintegers in C++. It is preferred to use the cin, cout streams (also you may\nuse the \nsum Output 3 Input 14 add 1 add 7 add 2 add 5 sum add 6 add 8 add 9 add 3 add\n4 add 10 sum del 1 sum Output 5 11 13\n\n",
        "cf_contest_id": 85,
        "cf_index": "D",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\nadd 4\r\nadd 5\r\nadd 1\r\nadd 2\r\nadd 3\r\nsum\r\n",
                "3\r\n"
            ],
            [
                "14\r\nadd 1\r\nadd 7\r\nadd 2\r\nadd 5\r\nsum\r\nadd 6\r\nadd 8\r\nadd 9\r\nadd 3\r\nadd 4\r\nadd 10\r\nsum\r\ndel 1\r\nsum\r\n",
                "5\r\n11\r\n13\r\n"
            ]
        ],
        "private_cases": [
            [
                "11\r\nadd 1\r\nsum\r\nadd 2\r\nsum\r\nadd 3\r\nsum\r\nadd 4\r\nsum\r\nadd 5\r\nsum\r\nadd 6\r\n",
                "0\r\n0\r\n3\r\n3\r\n3\r\n"
            ],
            [
                "28\r\nadd 5\r\nsum\r\nsum\r\nadd 2\r\nadd 10\r\nsum\r\nadd 3\r\nadd 12\r\nsum\r\nadd 1\r\nsum\r\nadd 4\r\nsum\r\ndel 5\r\nsum\r\ndel 2\r\nsum\r\nsum\r\ndel 10\r\nsum\r\ndel 3\r\nsum\r\ndel 12\r\nsum\r\ndel 1\r\nsum\r\ndel 4\r\nsum\r\n",
                "0\r\n0\r\n10\r\n5\r\n3\r\n3\r\n3\r\n4\r\n4\r\n4\r\n12\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "1\r\nadd 5\r\n",
                ""
            ],
            [
                "2\r\nadd 6\r\ndel 6\r\n",
                ""
            ],
            [
                "1\r\nsum\r\n",
                "0\r\n"
            ],
            [
                "20\r\nadd 17\r\nadd 18\r\nadd 19\r\nsum\r\nadd 20\r\nadd 21\r\nadd 22\r\nsum\r\nadd 23\r\nadd 24\r\nadd 25\r\nsum\r\nadd 26\r\nadd 27\r\nadd 28\r\nsum\r\nadd 29\r\nadd 30\r\nadd 31\r\nsum\r\n",
                "19\r\n19\r\n43\r\n43\r\n72\r\n"
            ],
            [
                "20\r\nadd 17\r\nadd 18\r\nadd 19\r\nsum\r\ndel 17\r\nadd 20\r\nadd 21\r\nsum\r\ndel 18\r\nadd 22\r\nadd 23\r\nsum\r\nadd 24\r\nadd 25\r\ndel 19\r\nsum\r\ndel 20\r\nadd 26\r\nadd 27\r\nsum\r\n",
                "19\r\n20\r\n21\r\n22\r\n23\r\n"
            ]
        ]
    }
]