[
    {
        "name": "Sonya and Queries",
        "description": "Today Sonya learned about long integers and invited all her friends to share\nthe fun. Sonya has an initially empty multiset with integers. Friends give her\nt queries, each of one of the following type:  ai \u2014 add non-negative integer\nai to the multiset. Note, that she has a multiset, thus there may be many\noccurrences of the same integer. - ai \u2014 delete a single occurrence of non-\nnegative integer ai from the multiset. It's guaranteed, that there is at least\none ai in the multiset. ? s \u2014 count the number of integers in the multiset\n(with repetitions) that match some pattern s consisting of 0 and 1. In the\npattern, 0 stands for the even digits, while 1 stands for the odd. Integer x\nmatches the pattern s, if the parity of the i-th from the right digit in\ndecimal notation matches the i-th from the right digit of the pattern. If the\npattern is shorter than this integer, it's supplemented with 0-s from the\nleft. Similarly, if the integer is shorter than the pattern its decimal\nnotation is supplemented with the 0-s from the left. For example, if the\npattern is s = 010, than integers 92, 2212, 50 and 414 match the pattern,\nwhile integers 3, 110, 25 and 1030 do not. Input The first line of the input\ncontains an integer t (1 \u2264 t \u2264 100 000) \u2014 the number of operation Sonya has to\nperform. Next t lines provide the descriptions of the queries in order they\nappear in the input file. The i-th row starts with a character ci \u2014 the type\nof the corresponding operation. If ci is equal to '+' or '-' then it's\nfollowed by a space and an integer ai (0 \u2264 ai < 10^18) given without leading\nzeroes (unless it's 0). If ci equals '?' then it's followed by a space and a\nsequence of zeroes and onse, giving the pattern of length no more than 18.\nIt's guaranteed that there will be at least one query of type '?'. It's\nguaranteed that any time some integer is removed from the multiset, there will\nbe at least one occurrence of this integer in it. Output For each query of the\nthird type print the number of integers matching the given pattern. Each\ninteger is counted as many times, as it appears in the multiset at this moment\nof time. Examples Input 12  1  241 ? 1  361 \u00ad 241 ? 0101  101 ? 101\n\u00ad 101 ? 101  4000 ? 0 Output 2 1 2 1 1 Input 4  200  200 \u00ad 200 ? 0\nOutput 1 Note Consider the integers matching the patterns from the queries of\nthe third type. Queries are numbered in the order they appear in the input. 1\nand 241. 361. 101 and 361. 361. 4000.\n\n",
        "cf_contest_id": 713,
        "cf_index": "A",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "12\r\n+ 1\r\n+ 241\r\n? 1\r\n+ 361\r\n- 241\r\n? 0101\r\n+ 101\r\n? 101\r\n- 101\r\n? 101\r\n+ 4000\r\n? 0\r\n",
                "2\r\n1\r\n2\r\n1\r\n1\r\n"
            ],
            [
                "4\r\n+ 200\r\n+ 200\r\n- 200\r\n? 0\r\n",
                "1\r\n"
            ]
        ],
        "private_cases": [
            [
                "20\r\n+ 61\r\n+ 99\r\n+ 51\r\n+ 70\r\n+ 7\r\n+ 34\r\n+ 71\r\n+ 86\r\n+ 68\r\n+ 39\r\n+ 78\r\n+ 81\r\n+ 89\r\n? 10\r\n? 00\r\n? 10\r\n? 01\r\n? 01\r\n? 00\r\n? 00\r\n",
                "3\r\n2\r\n3\r\n4\r\n4\r\n2\r\n2\r\n"
            ],
            [
                "20\r\n+ 13\r\n+ 50\r\n+ 9\r\n? 0\r\n+ 24\r\n? 0\r\n- 24\r\n? 0\r\n+ 79\r\n? 11\r\n- 13\r\n? 11\r\n- 50\r\n? 10\r\n? 1\r\n- 9\r\n? 1\r\n? 11\r\n- 79\r\n? 11\r\n",
                "0\r\n1\r\n0\r\n2\r\n1\r\n0\r\n1\r\n0\r\n1\r\n0\r\n"
            ],
            [
                "10\r\n+ 870566619432760298\r\n+ 869797178280285214\r\n+ 609920823721618090\r\n+ 221159591436767023\r\n+ 730599542279836538\r\n? 101001100111001011\r\n? 001111010101010011\r\n? 100010100011101110\r\n? 100110010110001100\r\n? 110000011101110011\r\n",
                "0\r\n0\r\n0\r\n0\r\n0\r\n"
            ],
            [
                "10\r\n+ 96135\r\n? 10111\r\n+ 63322\r\n? 10111\r\n+ 44490\r\n? 10111\r\n+ 69312\r\n? 10111\r\n? 01100\r\n+ 59396\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "10\r\n+ 2\r\n- 2\r\n+ 778\r\n+ 3\r\n+ 4\r\n- 4\r\n+ 1\r\n+ 617\r\n? 011\r\n? 011\r\n",
                "1\r\n1\r\n"
            ],
            [
                "20\r\n+ 8\r\n+ 39532\r\n+ 813\r\n- 39532\r\n? 00011\r\n? 00000\r\n? 00011\r\n+ 70424\r\n- 8\r\n? 00011\r\n- 70424\r\n? 00011\r\n+ 29\r\n? 00001\r\n+ 6632\r\n+ 3319\r\n? 00001\r\n+ 3172\r\n? 01111\r\n- 29\r\n",
                "1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n"
            ]
        ]
    }
]