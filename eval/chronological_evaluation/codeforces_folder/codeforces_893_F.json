[
    {
        "name": "Subtree Minimum Query",
        "description": "You are given a rooted tree consisting of n vertices. Each vertex has a number\nwritten on it; number ai is written on vertex i. Let's denote d(i, j) as the\ndistance between vertices i and j in the tree (that is, the number of edges in\nthe shortest path from i to j). Also let's denote the k-blocked subtree of\nvertex x as the set of vertices y such that both these conditions are met: x\nis an ancestor of y (every vertex is an ancestor of itself); d(x, y) \u2264 k. You\nare given m queries to the tree. i-th query is represented by two numbers xi\nand ki, and the answer to this query is the minimum value of aj among such\nvertices j such that j belongs to ki-blocked subtree of xi. Write a program\nthat would process these queries quickly! Note that the queries are given in a\nmodified way. Input The first line contains two integers n and r (1 \u2264 r \u2264 n \u2264\n100000) \u2014 the number of vertices in the tree and the index of the root,\nrespectively. The second line contains n integers a1, a2, ..., an (1 \u2264 ai \u2264\n10^9) \u2014 the numbers written on the vertices. Then n - 1 lines follow, each\ncontaining two integers x and y (1 \u2264 x, y \u2264 n) and representing an edge\nbetween vertices x and y. It is guaranteed that these edges form a tree. Next\nline contains one integer m (1 \u2264 m \u2264 10^6) \u2014 the number of queries to process.\nThen m lines follow, i-th line containing two numbers pi and qi, which can be\nused to restore i-th query (1 \u2264 pi, qi \u2264 n). i-th query can be restored as\nfollows: Let last be the answer for previous query (or 0 if i = 1). Then xi =\n((pi + last) mod n) + 1, and ki = (qi + last) mod n. Output Print m integers.\ni-th of them has to be equal to the answer to i-th query. Example Input 5 2 1\n3 2 3 5 2 3 5 1 3 4 4 1 2 1 2 2 3 Output 2 5\n\n",
        "cf_contest_id": 893,
        "cf_index": "F",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "trees"
        ],
        "time_limit_seconds": 6.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5 2\r\n1 3 2 3 5\r\n2 3\r\n5 1\r\n3 4\r\n4 1\r\n2\r\n1 2\r\n2 3\r\n",
                "2\r\n5\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 3\r\n1 3 2\r\n1 2\r\n1 3\r\n2\r\n2 3\r\n1 1\r\n",
                "2\r\n1\r\n"
            ],
            [
                "1 1\r\n1\r\n1\r\n1 1\r\n",
                "1\r\n"
            ]
        ]
    }
]