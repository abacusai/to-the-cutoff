[
    {
        "name": "Alphabetic Tree",
        "description": "You are given \n    m\n strings and a tree on \n    n\n nodes. Each edge has some\nletter written on it. You have to answer \n    q\n queries. Each query is\ndescribed by \n    4\n integers \n    u\n, \n    v\n, \n    l\n and \n    r\n. The\nanswer to the query is the total number of occurrences of \n    str(u,v)\n in\nstrings with indices from \n    l\n to \n    r\n. \n    str(u,v)\n is defined as the\nstring that is made by concatenating letters written on the edges on the\nshortest path from \n    u\n to \n    v\n (in order that they are traversed).\nInput The first line of the input contains three integers \n    n\n, \n    m\n and\n\n    q\n (\n    2 \n    \u2264 n \n    \u2264 10^5\n, \n    1 \n    \u2264 m,q \n    \u2264 10^5\n). The\n\n    i\n-th of the following \n    n-1\n lines contains two integers \n    u_i,\n    v_i\n and a lowercase Latin letter \n    c_i\n (\n    1 \n    \u2264 u_i, v_i \n    \u2264 n\n,\n\n    u_i \n    \u2260 v_i\n), denoting the edge between nodes \n    u_i, v_i\n with a\ncharacter \n    c_i\n on it. It's guaranteed that these edges form a tree. The\nfollowing \n    m\n lines contain the strings consisting of lowercase Latin\nletters. The total length of those strings does not exceed \n    10^5\n. Then\n\n    q\n lines follow, each containing four integers \n    u\n, \n    v\n, \n    l\n\nand \n    r\n (\n    1 \n    \u2264 u,v \n    \u2264 n\n, \n    u \n    \u2260 v\n, \n    1 \n    \u2264 l \n    \u2264 r\n    \n    \u2264 m\n), denoting the queries. Output For each query print a single\ninteger \u2014 the answer to the query. Examples Input 2 5 3 1 2 a aab abab aaa b a\n2 1 1 5 1 2 1 3 2 1 3 5 Output 8 7 4 Input 9 5 6 1 2 a 2 7 c 1 3 b 3 4 b 4 6 b\n3 5 a 5 8 b 5 9 c ababa cabbb bac bbbac abacaba 2 7 1 4 2 5 1 5 6 3 4 4 6 9 4\n5 5 7 3 5 5 3 1 5 Output 3 4 2 1 1 10\n\n",
        "cf_contest_id": 1608,
        "cf_index": "G",
        "cf_rating": 3500,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "hashing",
            "string suffix structures",
            "strings",
            "trees"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 5 3\r\n1 2 a\r\naab\r\nabab\r\naaa\r\nb\r\na\r\n2 1 1 5\r\n1 2 1 3\r\n2 1 3 5\r\n",
                "8\r\n7\r\n4\r\n"
            ],
            [
                "9 5 6\r\n1 2 a\r\n2 7 c\r\n1 3 b\r\n3 4 b\r\n4 6 b\r\n3 5 a\r\n5 8 b\r\n5 9 c\r\nababa\r\ncabbb\r\nbac\r\nbbbac\r\nabacaba\r\n2 7 1 4\r\n2 5 1 5\r\n6 3 4 4\r\n6 9 4 5\r\n5 7 3 5\r\n5 3 1 5\r\n",
                "3\r\n4\r\n2\r\n1\r\n1\r\n10\r\n"
            ]
        ],
        "private_cases": []
    }
]