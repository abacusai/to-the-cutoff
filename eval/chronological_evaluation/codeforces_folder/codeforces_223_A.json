[
    {
        "name": "Bracket Sequence",
        "description": "A bracket sequence is a string, containing only characters \"(\", \")\", \"[\" and\n\"]\". A correct bracket sequence is a bracket sequence that can be transformed\ninto a correct arithmetic expression by inserting characters \"1\" and \"+\"\nbetween the original characters of the sequence. For example, bracket\nsequences \"()[]\", \"([])\" are correct (the resulting expressions are:\n\"(1)+[1]\", \"([1+1]+1)\"), and \"](\" and \"[\" are not. The empty string is a\ncorrect bracket sequence by definition. A substring s[l... r] (1 \u2264 l \u2264 r \u2264\n|s|) of string s = s1s2... s|s| (where |s| is the length of string s) is the\nstring slsl + 1... sr. The empty string is a substring of any string by\ndefinition. You are given a bracket sequence, not necessarily correct. Find\nits substring which is a correct bracket sequence and contains as many opening\nsquare brackets \u00ab[\u00bb as possible. Input The first and the only line contains\nthe bracket sequence as a string, consisting only of characters \"(\", \")\", \"[\"\nand \"]\". It is guaranteed that the string is non-empty and its length doesn't\nexceed 10^5 characters. Output In the first line print a single integer \u2014 the\nnumber of brackets \u00ab[\u00bb in the required bracket sequence. In the second line\nprint the optimal sequence. If there are more than one optimal solutions print\nany of them. Examples Input ([]) Output 1 ([]) Input ((( Output 0\n\n",
        "cf_contest_id": 223,
        "cf_index": "A",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "expression parsing",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "([])\r\n",
                "1\r\n([])\r\n"
            ],
            [
                "(((\r\n",
                "0\r\n\r\n"
            ]
        ],
        "private_cases": [
            [
                "(][)\r\n",
                "0\r\n\r\n"
            ],
            [
                "(()[))()[]\r\n",
                "1\r\n()[]\r\n"
            ],
            [
                "(][](](][[(][\r\n",
                "1\r\n[]\r\n"
            ],
            [
                "((])(]]))(](((()[[()[[[)([]()])[(]][)]])[]]()[()[[[[(([[)\r\n",
                "1\r\n[]()\r\n"
            ],
            [
                "](]][)]()][[])[()(][)]))[)[]()()])[([((([[(([)][(])](][])([([)())))([(([][))[)()]][[])()[)](][[((]](](])]][(][[()(]][[)][])(][]))[])[)[(])[)()()[[))((()]]([([[(]))][(]())))))[[]]][][))[)])])()((((([[](([[()(([[()](([[([[(](]([)]())))[)]([]\r\n",
                "2\r\n[[]]\r\n"
            ],
            [
                "[(()[])]()[()[]]\r\n",
                "4\r\n[(()[])]()[()[]]\r\n"
            ],
            [
                "([])()[()]()()[(([])[]()[()([])()[][]()])]\r\n",
                "9\r\n([])()[()]()()[(([])[]()[()([])()[][]()])]\r\n"
            ],
            [
                "[()][([[]])][[[]()]][()[]]()()([[][]][[]][](()))[[[(())]]][]()(([([])(([[[]]()])(()))]((())))([()]([()[[[]([][[[[][(())([[]()])]]][[(())]([])]()][[](())]()[])]()[][]]([[]])[]])[(()[()((()[][()]))][])[]()()([]())](()[][][])()()[]()))[]()[]\r\n",
                "61\r\n[()][([[]])][[[]()]][()[]]()()([[][]][[]][](()))[[[(())]]][]()(([([])(([[[]]()])(()))]((())))([()]([()[[[]([][[[[][(())([[]()])]]][[(())]([])]()][[](())]()[])]()[][]]([[]])[]])[(()[()((()[][()]))][])[]()()([]())](()[][][])()()[]()))[]()[]\r\n"
            ],
            [
                "(][(](][[(][(\r\n",
                "0\r\n\r\n"
            ],
            [
                ")[)][)))((([[)]((]][)[)((]([)[)(([)[)]][([\r\n",
                "0\r\n\r\n"
            ],
            [
                "][([))][[))[[((]][([(([[)]]])([)][([([[[[([))]])][[[[[([)]]([[(((]([(](([([[)[(]])(][(((][)[[)][)(][[)[[)])))[)]))]])[([[))(([(]][))([(]]][(])]))))))[[[[[([[([)[[[)[(([)[[(][((([(([([(([))[[[[[[([(](])(][[)[)(](]])]]]((([))(])[[)[))[([[[[(]][)[([(]](([)([[)[[([))[)\r\n",
                "0\r\n\r\n"
            ],
            [
                "()]])()()]\r\n",
                "0\r\n\r\n"
            ],
            [
                "[([[)[(()[])[()][]()[[[)()[][[[()[]]]()]][\r\n",
                "5\r\n()[][[[()[]]]()]\r\n"
            ],
            [
                "[()][][][][]()[)])))[(]()[]([)(])[)(])()[))][)]()[][][]][][)(((([))))[)[))]]([[[)[())))[(][(()[()[(]())]])([[)[)[[())[()[]()[[[[])][))](()()())()](((((([(()]][[)([)([]]))(()[((]]())[]])][)()(][]][][(([])]]((]])([[][)])(][)][([[[[(][()(][[(\r\n",
                "5\r\n[()][][][][]()\r\n"
            ],
            [
                "(([])\r\n",
                "1\r\n([])\r\n"
            ],
            [
                "()()([]]\r\n",
                "1\r\n[]\r\n"
            ],
            [
                "([[[]]))\r\n",
                "2\r\n[[]]\r\n"
            ],
            [
                "[[]\r\n",
                "1\r\n[]\r\n"
            ],
            [
                "((((([]((((((((((\r\n",
                "1\r\n[]\r\n"
            ],
            [
                "(((((([](((((((\r\n",
                "1\r\n[]\r\n"
            ],
            [
                "[[])\r\n",
                "1\r\n[]\r\n"
            ],
            [
                "((()))([]\r\n",
                "1\r\n[]\r\n"
            ],
            [
                "([]\r\n",
                "1\r\n[]\r\n"
            ],
            [
                "[]())])([)][[[]])))][])([]([]()]]))))())[[([))()(])))]][)[][[])(][()()]]](]][])[[))((]][)[)(]))([])((]([)([])]]]]]]][)[[[]]([[[]]][(][][])()[[([](])(]]((]([[)])]])([)(][([)(([))(]([)[[](([(](][[)()(][\r\n",
                "3\r\n[[[]]]\r\n"
            ]
        ]
    }
]