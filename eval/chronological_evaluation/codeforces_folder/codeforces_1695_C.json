[
    {
        "name": "Zero Path",
        "description": "You are given a grid with \n    n\n rows and \n    m\n columns. We denote the\nsquare on the \n    i\n-th (\n    1\n    \u2264 i\n    \u2264 n\n) row and \n    j\n-th (\n    1\n    \u2264\n    j\n    \u2264 m\n) column by \n    (i, j)\n and the number there by \n    a_ij\n. All\nnumbers are equal to \n    1\n or to \n    -1\n. You start from the square \n    (1,\n    1)\n and can move one square down or one square to the right at a time. In\nthe end, you want to end up at the square \n    (n, m)\n. Is it possible to move\nin such a way so that the sum of the values written in all the visited cells\n(including \n    a_11\n and \n    a_nm\n) is \n    0\n? Input Each test contains\nmultiple test cases. The first line contains the number of test cases \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 10^4\n). Description of the test cases follows. The\nfirst line of each test case contains two integers \n    n\n and \n    m\n (\n    1\n    \n    \u2264 n, m \n    \u2264 1000\n) \u2014 the size of the grid. Each of the following\n\n    n\n lines contains \n    m\n integers. The \n    j\n-th integer on the\n\n    i\n-th line is \n    a_ij\n (\n    a_ij = 1\n or \n    -1\n) \u2014 the element\nin the cell \n    (i, j)\n. It is guaranteed that the sum of \n    n\n    \u00b7 m\n\nover all test cases does not exceed \n    10^6\n. Output For each test case,\nprint \"YES\" if there exists a path from the top left to the bottom right that\nadds up to \n    0\n, and \"NO\" otherwise. You can output each letter in any\ncase. Example Input 5 1 1 1 1 2 1 -1 1 4 1 -1 1 -1 3 4 1 -1 -1 -1 -1 1 1 -1 1\n1 1 -1 3 4 1 -1 1 1 -1 1 -1 1 1 -1 1 1 Output NO YES YES YES NO Note One\npossible path for the fourth test case is given in the picture in the\nstatement.\n\n",
        "cf_contest_id": 1695,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "dp",
            "graphs",
            "greedy",
            "shortest paths"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n1 1\r\n1\r\n1 2\r\n1 -1\r\n1 4\r\n1 -1 1 -1\r\n3 4\r\n1 -1 -1 -1\r\n-1 1 1 -1\r\n1 1 1 -1\r\n3 4\r\n1 -1 1 1\r\n-1 1 -1 1\r\n1 -1 1 1\r\n",
                "No\r\nYes\r\nYes\r\nYes\r\nNo\r\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n2 1\r\n-1\r\n-1\r\n2 1\r\n1\r\n-1\r\n2 1\r\n-1\r\n1\r\n2 1\r\n1\r\n1\r\n",
                "No\r\nYes\r\nYes\r\nNo\r\n"
            ],
            [
                "4\r\n1 2\r\n-1 -1\r\n1 2\r\n1 -1\r\n1 2\r\n-1 1\r\n1 2\r\n1 1\r\n",
                "No\r\nYes\r\nYes\r\nNo\r\n"
            ]
        ]
    }
]