[
    {
        "name": "Autocompletion",
        "description": "Arcady is a copywriter. His today's task is to type up an already well-\ndesigned story using his favorite text editor. Arcady types words, punctuation\nsigns and spaces one after another. Each letter and each sign (including line\nfeed) requires one keyboard click in order to be printed. Moreover, when\nArcady has a non-empty prefix of some word on the screen, the editor proposes\na possible autocompletion for this word, more precisely one of the already\nprinted words such that its prefix matches the currently printed prefix if\nthis word is unique. For example, if Arcady has already printed \u00abcodeforces\u00bb,\n\u00abcoding\u00bb and \u00abcodeforces\u00bb once again, then there will be no autocompletion\nattempt for \u00abcod\u00bb, but if he proceeds with \u00abcode\u00bb, the editor will propose\n\u00abcodeforces\u00bb. With a single click Arcady can follow the editor's proposal,\ni.e. to transform the current prefix to it. Note that no additional symbols\nare printed after the autocompletion (no spaces, line feeds, etc). What is the\nminimum number of keyboard clicks Arcady has to perform to print the entire\ntext, if he is not allowed to move the cursor or erase the already printed\nsymbols? A word here is a contiguous sequence of latin letters bordered by\nspaces, punctuation signs and line/text beginnings/ends. Arcady uses only\nlowercase letters. For example, there are 20 words in \u00abit's well-known that\ntic-tac-toe is a paper-and-pencil game for two players, x and o.\u00bb. Input The\nonly line contains Arcady's text, consisting only of lowercase latin letters,\nspaces, line feeds and the following punctuation signs: \u00ab.\u00bb, \u00ab,\u00bb, \u00ab?\u00bb, \u00ab!\u00bb,\n\u00ab'\u00bb and \u00ab-\u00bb. The total amount of symbols doesn't exceed 3\u00b710^5. It's\nguaranteed that all lines are non-empty. Output Print a single integer \u2014 the\nminimum number of clicks. Examples Input snow affects sports such as skiing,\nsnowboarding, and snowmachine travel. snowboarding is a recreational activity\nand olympic and paralympic sport. Output 141 Input 'co-co-co, codeforces?!'\nOutput 25 Input thun-thun-thunder, thunder, thunder thunder, thun-, thunder\nthun-thun-thunder, thunder thunder, feel the thunder lightning then the\nthunder thunder, feel the thunder lightning then the thunder thunder, thunder\nOutput 183 Note In sample case one it's optimal to use autocompletion for the\nfirst instance of \u00absnowboarding\u00bb after typing up \u00absn\u00bb and for the second\ninstance of \u00absnowboarding\u00bb after typing up \u00absnowb\u00bb. This will save 7 clicks.\nIn sample case two it doesn't matter whether to use autocompletion or not.\n\n",
        "cf_contest_id": 928,
        "cf_index": "D",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "*special",
            "strings",
            "trees"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "snow affects sports such as skiing, snowboarding, and snowmachine travel.\r\nsnowboarding is a recreational activity and olympic and paralympic sport.\r\n",
                "141"
            ],
            [
                "'co-co-co, codeforces?!'\r\n",
                "25"
            ],
            [
                "thun-thun-thunder, thunder, thunder\r\nthunder, thun-, thunder\r\nthun-thun-thunder, thunder\r\nthunder, feel the thunder\r\nlightning then the thunder\r\nthunder, feel the thunder\r\nlightning then the thunder\r\nthunder, thunder\r\n",
                "183"
            ]
        ],
        "private_cases": [
            [
                "a'b-c-aa'ab.ac.ba!bb-bc-ca?cb-cc.aaa,aab'aac'aba-abb'abc-aca.acb!acc?baa'bab'bac!bba-bbb.bbc.bca\r\n",
                "97"
            ],
            [
                "aaa!bbb'ccc?aaaaaa,aaabbb.aaaccc,bbbaaa-bbbbbb-bbbccc,cccaaa,cccbbb.cccccc'aaaaaaaaa-aaaaaabbb\r\n",
                "91"
            ],
            [
                "bca'bbc,bbb!bba!bac'bab.baa,acc?acb.aca'abc?abb?aba?aac,aab?aaa?cc?cb'ca'bc!bb.ba-ac!ab.aa!c,b.a\r\n",
                "97"
            ],
            [
                "a'aa!aaa.aab,aac,ab!aba,abb.abc'ac.aca'acb,acc!b'ba.baa.bab,bac!bb.bba,bbb,bbc,bc,bca'c?ca.cb,cc\r\n",
                "97"
            ],
            [
                "aaa?c?ba,ac?cc?b.abb-bab.cb-a'aac'bb'aab-bbc'bca.ca.acb-baa.acc-aba?aa-bbb.bac?bc,aca-bba!abc!ab\r\n",
                "97"
            ],
            [
                "baacbcaac-bcaabbaabaacccacc'acbb.b!-ababcab!b'a'aacaccaacbab!c\r\nb\r\nbca'bbcc!!\r\n",
                "76"
            ],
            [
                "aaa aaaaaa\r\n",
                "10"
            ]
        ]
    }
]