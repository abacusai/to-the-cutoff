[
    {
        "name": "Mark and Lightbulbs",
        "description": "Mark has just purchased a rack of \n    n\n lightbulbs. The state of the\nlightbulbs can be described with binary string \n    s = s_1s_2\n    \u2026 s_n\n,\nwhere \n    s_i=\n means that the \n    i\n-th lightbulb is turned on,\nwhile \n    s_i=\n means that the \n    i\n-th lightbulb is turned\noff. Unfortunately, the lightbulbs are broken, and the only operation he can\nperform to change the state of the lightbulbs is the following: Select an\nindex \n    i\n from \n    2,3,\n    \u2026,n-1\n such that \n    s_i-1\n     s_i+1\n.\nToggle \n    s_i\n. Namely, if \n    s_i\n is \n    \n, set \n    s_i\n to\n\n    \n or vice versa. Mark wants the state of the lightbulbs to be\nanother binary string \n    t\n. Help Mark determine the minimum number of\noperations to do so. Input The first line of the input contains a single\ninteger \n    q\n (\n    1\n    \u2264 q\n    \u2264 10^4\n) \u2014 the number of test cases. The\nfirst line of each test case contains a single integer \n    n\n (\n    3\n    \u2264\n    n\n    \u2264 2\n    \u00b7 10^5\n) \u2014 the number of lightbulbs. The second line of each\ntest case contains a binary string \n    s\n of length \n    n\n \u2014 the initial\nstate of the lightbulbs. The third line of each test case contains a binary\nstring \n    t\n of length \n    n\n \u2014 the final state of the lightbulbs. It is\nguaranteed that the sum of \n    n\n across all test cases does not exceed\n\n    2\n    \u00b7 10^5\n. Output For each test case, print a line containing the\nminimum number of operations Mark needs to perform to transform \n    s\n to\n\n    t\n. If there is no such sequence of operations, print \n    -1\n. Example\nInput 4 4 0100 0010 4 1010 0100 5 01001 00011 6 000101 010011 Output 2 -1 -1 5\nNote In the first test case, one sequence of operations that achieves the\nminimum number of operations is the following. Select \n    i=3\n, changing\n\n    \n to\n\n    \n. Select \n    i=2\n,\nchanging \n    \n to\n\n    \n. In the second test\ncase, there is no sequence of operations because one cannot change the first\ndigit or the last digit of \n    s\n.In the third test case, even though the\nfirst digits of \n    s\n and \n    t\n are the same and the last digits of\n\n    s\n and \n    t\n are the same, it can be shown that there is no sequence of\noperations that satisfies the condition. In the fourth test case, one sequence\nthat achieves the minimum number of operations is the following: Select\n\n    i=3\n, changing\n\n    \n to\n\n    \n. Select\n\n    i=2\n, changing\n\n    \n to\n\n    \n. Select\n\n    i=4\n, changing\n\n    \n to\n\n    \n. Select\n\n    i=5\n, changing\n\n    \n to\n\n    \n. Select\n\n    i=3\n, changing\n\n    \n to\n\n    \n.\n\n",
        "cf_contest_id": 1705,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "combinatorics",
            "constructive algorithms",
            "greedy",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 1.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n4\r\n0100\r\n0010\r\n4\r\n1010\r\n0100\r\n5\r\n01001\r\n00011\r\n6\r\n000101\r\n010011\r\n",
                "2\r\n-1\r\n-1\r\n5\r\n"
            ]
        ],
        "private_cases": []
    }
]