[
    {
        "name": "Sonya and Matrix",
        "description": "Since Sonya has just learned the basics of matrices, she decided to play with\nthem a little bit. Sonya imagined a new type of matrices that she called\nrhombic matrices. These matrices have exactly one zero, while all other cells\nhave the Manhattan distance to the cell containing the zero. The cells with\nequal numbers have the form of a rhombus, that is why Sonya called this type\nso. The Manhattan distance between two cells (\n    x_1\n, \n    y_1\n) and\n(\n    x_2\n, \n    y_2\n) is defined as \n    |x_1 - x_2| + |y_1 - y_2|\n. For\nexample, the Manhattan distance between the cells \n    (5, 2)\n and \n    (7,\n    1)\n equals to \n    |5-7|+|2-1|=3\n. Example of a rhombic matrix. Note that\nrhombic matrices are uniquely defined by \n    n\n, \n    m\n, and the coordinates\nof the cell containing the zero. She drew a \n    n\n    \u00d7 m\n rhombic matrix.\nShe believes that you can not recreate the matrix if she gives you only the\nelements of this matrix in some arbitrary order (i.e., the sequence of\n\n    n\n    \u00b7 m\n numbers). Note that Sonya will not give you \n    n\n and\n\n    m\n, so only the sequence of numbers in this matrix will be at your\ndisposal. Write a program that finds such an \n    n\n    \u00d7 m\n rhombic matrix\nwhose elements are the same as the elements in the sequence in some order.\nInput The first line contains a single integer \n    t\n (\n    1\n    \u2264 t\n    \u2264\n    10^6\n) \u2014 the number of cells in the matrix. The second line contains \n    t\n\nintegers \n    a_1, a_2, \n    \u2026, a_t\n (\n    0\n    \u2264 a_i< t\n) \u2014 the values in\nthe cells in arbitrary order. Output In the first line, print two positive\nintegers \n    n\n and \n    m\n (\n    n \n    \u00d7 m = t\n) \u2014 the size of the\nmatrix. In the second line, print two integers \n    x\n and \n    y\n (\n    1\n    \u2264\n    x\n    \u2264 n\n, \n    1\n    \u2264 y\n    \u2264 m\n) \u2014 the row number and the column number\nwhere the cell with \n    0\n is located. If there are multiple possible\nanswers, print any of them. If there is no solution, print the single integer\n\n    -1\n. Examples Input 20 1 0 2 3 5 3 2 1 3 2 3 1 4 2 1 4 2 3 2 4 Output 4 5\n2 2 Input 18 2 2 3 2 4 3 3 3 0 2 4 2 1 3 2 1 1 1 Output 3 6 2 3 Input 6 2 1 0\n2 1 2 Output -1 Note You can see the solution to the first example in the\nlegend. You also can choose the cell \n    (2, 2)\n for the cell where \n    0\n\nis located. You also can choose a \n    5\n    \u00d7 4\n matrix with zero at \n    (4,\n    2)\n. In the second example, there is a \n    3\n    \u00d7 6\n matrix, where the\nzero is located at \n    (2, 3)\n there. In the third example, a solution does\nnot exist.\n\n",
        "cf_contest_id": 1004,
        "cf_index": "D",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "20\r\n1 0 2 3 5 3 2 1 3 2 3 1 4 2 1 4 2 3 2 4\r\n",
                "4 5\r\n2 2\r\n"
            ],
            [
                "18\r\n2 2 3 2 4 3 3 3 0 2 4 2 1 3 2 1 1 1\r\n",
                "3 6\r\n2 3\r\n"
            ],
            [
                "6\r\n2 1 0 2 1 2\r\n",
                "-1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n0\r\n",
                "1 1\r\n1 1\r\n"
            ],
            [
                "7\r\n0 1 2 3 4 2 6\r\n",
                "-1\r\n"
            ],
            [
                "6\r\n0 0 0 0 0 0\r\n",
                "-1\r\n"
            ],
            [
                "4\r\n0 0 0 0\r\n",
                "-1\r\n"
            ]
        ]
    }
]