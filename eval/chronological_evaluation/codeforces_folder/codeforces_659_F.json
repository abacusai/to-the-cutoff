[
    {
        "name": "Polycarp and Hay",
        "description": "The farmer Polycarp has a warehouse with hay, which can be represented as an n\n\u00d7 m rectangular table, where n is the number of rows, and m is the number of\ncolumns in the table. Each cell of the table contains a haystack. The height\nin meters of the hay located in the i-th row and the j-th column is equal to\nan integer ai, j and coincides with the number of cubic meters of hay in the\nhaystack, because all cells have the size of the base 1 \u00d7 1. Polycarp has\ndecided to tidy up in the warehouse by removing an arbitrary integer amount of\ncubic meters of hay from the top of each stack. You can take different amounts\nof hay from different haystacks. Besides, it is allowed not to touch a stack\nat all, or, on the contrary, to remove it completely. If a stack is completely\nremoved, the corresponding cell becomes empty and no longer contains the\nstack. Polycarp wants the following requirements to hold after the\nreorganization: the total amount of hay remaining in the warehouse must be\nequal to k, the heights of all stacks (i.e., cells containing a non-zero\namount of hay) should be the same, the height of at least one stack must\nremain the same as it was, for the stability of the remaining structure all\nthe stacks should form one connected region. The two stacks are considered\nadjacent if they share a side in the table. The area is called connected if\nfrom any of the stack in the area you can get to any other stack in this area,\nmoving only to adjacent stacks. In this case two adjacent stacks necessarily\nbelong to the same area. Help Polycarp complete this challenging task or\ninform that it is impossible. Input The first line of the input contains three\nintegers n, m (1 \u2264 n, m \u2264 1000) and k (1 \u2264 k \u2264 10^18) \u2014 the number of rows and\ncolumns of the rectangular table where heaps of hay are lain and the required\ntotal number cubic meters of hay after the reorganization. Then n lines\nfollow, each containing m positive integers ai, j (1 \u2264 ai, j \u2264 10^9), where\nai, j is equal to the number of cubic meters of hay making the hay stack on\nthe i-th row and j-th column of the table. Output In the first line print\n\"YES\" (without quotes), if Polycarpus can perform the reorganisation and \"NO\"\n(without quotes) otherwise. If the answer is \"YES\" (without quotes), then in\nnext n lines print m numbers \u2014 the heights of the remaining hay stacks. All\nthe remaining non-zero values should be equal, represent a connected area and\nat least one of these values shouldn't be altered. If there are multiple\nanswers, print any of them. Examples Input 2 3 35 10 4 9 9 9 7 Output YES 7 0\n7 7 7 7 Input 4 4 50 5 9 1 1 5 1 1 5 5 1 5 5 5 5 7 1 Output YES 5 5 0 0 5 0 0\n5 5 0 5 5 5 5 5 0 Input 2 4 12 1 1 3 1 1 6 2 4 Output NO Note In the first\nsample non-zero values make up a connected area, their values do not exceed\nthe initial heights of hay stacks. All the non-zero values equal 7, and their\nnumber is 5, so the total volume of the remaining hay equals the required\nvalue k = 7\u00b75 = 35. At that the stack that is on the second line and third row\nremained unaltered.\n\n",
        "cf_contest_id": 659,
        "cf_index": "F",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "2 3 35\r\n10 4 9\r\n9 9 7\r\n",
                "YES\r\n7 0 7 \r\n7 7 7 \r\n"
            ],
            [
                "4 4 50\r\n5 9 1 1\r\n5 1 1 5\r\n5 1 5 5\r\n5 5 7 1\r\n",
                "YES\r\n5 5 0 0 \r\n5 0 0 5 \r\n5 0 5 5 \r\n5 5 5 0 \r\n"
            ],
            [
                "2 4 12\r\n1 1 3 1\r\n1 6 2 4\r\n",
                "NO\r\n"
            ]
        ],
        "private_cases": [
            [
                "6 6 38\r\n1 100 1 100 1 100\r\n100 1 100 1 100 1\r\n1 100 1 100 1 100\r\n100 1 100 1 100 1\r\n1 100 1 100 1 100\r\n100 1 100 1 100 1\r\n",
                "NO\r\n"
            ],
            [
                "6 6 300\r\n1 100 1 100 1 100\r\n100 1 100 1 100 1\r\n1 100 1 100 1 100\r\n100 1 100 1 100 1\r\n1 100 1 100 1 100\r\n100 1 100 1 100 1\r\n",
                "NO\r\n"
            ],
            [
                "2 2 16\r\n5 5\r\n5 5\r\n",
                "NO\r\n"
            ],
            [
                "5 5 27\r\n2 2 2 2 2\r\n2 2 9 2 2\r\n2 2 9 3 2\r\n2 2 9 2 2\r\n2 2 2 2 2\r\n",
                "YES\r\n0 0 0 0 0 \r\n0 0 9 0 0 \r\n0 0 9 0 0 \r\n0 0 9 0 0 \r\n0 0 0 0 0 \r\n"
            ],
            [
                "1 1 1000000000000000000\r\n1000000000\r\n",
                "NO\r\n"
            ],
            [
                "1 1 1\r\n1\r\n",
                "YES\r\n1 \r\n"
            ],
            [
                "1 3 6\r\n3 2 2\r\n",
                "YES\r\n2 2 2 \r\n"
            ],
            [
                "1 3 6\r\n2 3 2\r\n",
                "YES\r\n2 2 2 \r\n"
            ],
            [
                "1 3 6\r\n2 2 3\r\n",
                "YES\r\n2 2 2 \r\n"
            ],
            [
                "1 2 6\r\n2 3\r\n",
                "NO\r\n"
            ],
            [
                "1 2 6\r\n3 2\r\n",
                "NO\r\n"
            ]
        ]
    }
]