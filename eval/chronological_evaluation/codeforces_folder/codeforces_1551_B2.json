[
    {
        "name": "Wonderful Coloring - 2",
        "description": "This problem is an extension of the problem \"Wonderful Coloring - 1\". It has\nquite many differences, so you should read this statement completely.\nRecently, Paul and Mary have found a new favorite sequence of integers \n    a_1,\n    a_2, \n    \u2026, a_n\n. They want to paint it using pieces of chalk of \n    k\n\ncolors. The coloring of a sequence is called wonderful if the following\nconditions are met: each element of the sequence is either painted in one of\n\n    k\n colors or isn't painted; each two elements which are painted in the\nsame color are different (i. e. there's no two equal values painted in the\nsame color); let's calculate for each of \n    k\n colors the number of elements\npainted in the color \u2014 all calculated numbers must be equal; the total number\nof painted elements of the sequence is the maximum among all colorings of the\nsequence which meet the first three conditions. E. g. consider a sequence\n\n    a=[3, 1, 1, 1, 1, 10, 3, 10, 10, 2]\n and \n    k=3\n. One of the wonderful\ncolorings of the sequence is shown in the figure. The example of a wonderful\ncoloring of the sequence \n    a=[3, 1, 1, 1, 1, 10, 3, 10, 10, 2]\n and\n\n    k=3\n. Note that one of the elements isn't painted. Help Paul and Mary to\nfind a wonderful coloring of a given sequence \n    a\n. Input The first line\ncontains one integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10000\n) \u2014 the number of\ntest cases. Then \n    t\n test cases follow. Each test case consists of two\nlines. The first one contains two integers \n    n\n and \n    k\n (\n    1 \n    \u2264 n\n    \n    \u2264 2\n    \u00b710^5\n, \n    1 \n    \u2264 k \n    \u2264 n\n) \u2014 the length of a given\nsequence and the number of colors, respectively. The second one contains\n\n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 n\n). It\nis guaranteed that the sum of \n    n\n over all test cases doesn't exceed \n    2\n    \n    \u00b7 10^5\n. Output Output \n    t\n lines, each of them must contain a\ndescription of a wonderful coloring for the corresponding test case. Each\nwonderful coloring must be printed as a sequence of \n    n\n integers \n    c_1,\n    c_2, \n    \u2026, c_n\n (\n    0 \n    \u2264 c_i \n    \u2264 k\n) separated by spaces where\n\n    c_i=0\n, if \n    i\n-th element isn't painted; \n    c_i>0\n, if \n    i\n-th\nelement is painted in the \n    c_i\n-th color. Remember that you need to\nmaximize the total count of painted elements for the wonderful coloring. If\nthere are multiple solutions, print any one. Example Input 6 10 3 3 1 1 1 1 10\n3 10 10 2 4 4 1 1 1 1 1 1 1 13 1 3 1 4 1 5 9 2 6 5 3 5 8 9 13 2 3 1 4 1 5 9 2\n6 5 3 5 8 9 13 3 3 1 4 1 5 9 2 6 5 3 5 8 9 Output 1 1 0 2 3 2 2 1 3 3 4 2 1 3\n1 0 0 1 1 0 1 1 1 0 1 1 1 0 2 1 2 2 1 1 1 1 2 1 0 2 2 1 1 3 2 1 3 3 1 2 2 3 2\n0 Note In the first test case, the answer is shown in the figure in the\nstatement. The red color has number \n    1\n, the blue color \u2014 \n    2\n, the\ngreen \u2014 \n    3\n.\n\n",
        "cf_contest_id": 1551,
        "cf_index": "B2",
        "cf_rating": 1400,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "constructive algorithms",
            "data structures",
            "greedy"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n10 3\r\n3 1 1 1 1 10 3 10 10 2\r\n4 4\r\n1 1 1 1\r\n1 1\r\n1\r\n13 1\r\n3 1 4 1 5 9 2 6 5 3 5 8 9\r\n13 2\r\n3 1 4 1 5 9 2 6 5 3 5 8 9\r\n13 3\r\n3 1 4 1 5 9 2 6 5 3 5 8 9\r\n",
                "2 1 2 3 0 1 3 2 3 1\r\n1 2 3 4\r\n1\r\n1 1 1 0 1 1 1 1 0 0 0 1 0\r\n2 1 2 2 1 1 1 1 2 1 0 2 2\r\n2 0 1 3 2 1 1 2 3 3 1 3 2\r\n"
            ]
        ],
        "private_cases": [
            [
                "12\r\n10 3\r\n3 1 1 1 1 10 3 10 10 2\r\n4 4\r\n1 1 1 1\r\n1 1\r\n1\r\n13 1\r\n3 1 4 1 5 9 2 6 5 3 5 8 9\r\n13 2\r\n3 1 4 1 5 9 2 6 5 3 5 8 9\r\n13 3\r\n3 1 4 1 5 9 2 6 5 3 5 8 9\r\n10 3\r\n3 1 1 1 1 10 3 10 10 2\r\n4 4\r\n1 1 1 1\r\n1 1\r\n1\r\n13 1\r\n3 1 4 1 5 9 2 6 5 3 5 8 9\r\n13 2\r\n3 1 4 1 5 9 2 6 5 3 5 8 9\r\n13 3\r\n3 1 4 1 5 9 2 6 5 3 5 8 9\r\n",
                "2 1 2 3 0 1 3 2 3 1\r\n1 2 3 4\r\n1\r\n1 1 1 0 1 1 1 1 0 0 0 1 0\r\n2 1 2 2 1 1 1 1 2 1 0 2 2\r\n2 0 1 3 2 1 1 2 3 3 1 3 2\r\n2 1 2 3 0 1 3 2 3 1\r\n1 2 3 4\r\n1\r\n1 1 1 0 1 1 1 1 0 0 0 1 0\r\n2 1 2 2 1 1 1 1 2 1 0 2 2\r\n2 0 1 3 2 1 1 2 3 3 1 3 2\r\n"
            ]
        ]
    }
]