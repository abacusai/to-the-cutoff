[
    {
        "name": "Skills",
        "description": "Lesha plays the recently published new version of the legendary game hacknet.\nIn this version character skill mechanism was introduced. Now, each player\ncharacter has exactly n skills. Each skill is represented by a non-negative\ninteger ai \u2014 the current skill level. All skills have the same maximum level\nA. Along with the skills, global ranking of all players was added. Players are\nranked according to the so-called Force. The Force of a player is the sum of\nthe following values: The number of skills that a character has perfected\n(i.e., such that ai = A), multiplied by coefficient cf. The minimum skill\nlevel among all skills (min ai), multiplied by coefficient cm. Now Lesha has m\nhacknetian currency units, which he is willing to spend. Each currency unit\ncan increase the current level of any skill by 1 (if it's not equal to A yet).\nHelp him spend his money in order to achieve the maximum possible value of the\nForce. Input The first line of the input contains five space-separated\nintegers n, A, cf, cm and m (1 \u2264 n \u2264 100 000, 1 \u2264 A \u2264 10^9, 0 \u2264 cf, cm \u2264 1000,\n0 \u2264 m \u2264 10^15). The second line contains exactly n integers ai (0 \u2264 ai \u2264 A),\nseparated by spaces, \u2014 the current levels of skills. Output On the first line\nprint the maximum value of the Force that the character can achieve using no\nmore than m currency units. On the second line print n integers a'i (ai \u2264 a'i\n\u2264 A), skill levels which one must achieve in order to reach the specified\nvalue of the Force, while using no more than m currency units. Numbers should\nbe separated by spaces. Examples Input 3 5 10 1 5 1 3 1 Output 12 2 5 2 Input\n3 5 10 1 339 1 3 1 Output 35 5 5 5 Note In the first test the optimal strategy\nis to increase the second skill to its maximum, and increase the two others by\n1. In the second test one should increase all skills to maximum.\n\n",
        "cf_contest_id": 613,
        "cf_index": "B",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "dp",
            "greedy",
            "sortings",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 5 10 1 5\r\n1 3 1\r\n",
                "12\r\n2\r\n5\r\n2\r\n"
            ],
            [
                "3 5 10 1 339\r\n1 3 1\r\n",
                "35\r\n5\r\n5\r\n5\r\n"
            ]
        ],
        "private_cases": [
            [
                "2 6 0 1 4\r\n5 1\r\n",
                "5\r\n5\r\n5\r\n"
            ],
            [
                "1 1000000000 1000 1000 1000000000000000\r\n0\r\n",
                "1000000001000\r\n1000000000\r\n"
            ],
            [
                "1 100 1 2 30\r\n1\r\n",
                "62\r\n31\r\n"
            ],
            [
                "1 100 1 2 30\r\n71\r\n",
                "201\r\n100\r\n"
            ],
            [
                "1 1000000000 1000 1000 1000000000000000\r\n1000000000\r\n",
                "1000000001000\r\n1000000000\r\n"
            ],
            [
                "5 5 10 20 50\r\n0 0 0 0 0\r\n",
                "150\r\n5\r\n5\r\n5\r\n5\r\n5\r\n"
            ],
            [
                "5 5 10 20 50\r\n3 3 3 3 3\r\n",
                "150\r\n5\r\n5\r\n5\r\n5\r\n5\r\n"
            ],
            [
                "4 5 3 7 15\r\n4 3 3 1\r\n",
                "47\r\n5\r\n5\r\n5\r\n5\r\n"
            ],
            [
                "3 6 4 6 8\r\n6 4 5\r\n",
                "48\r\n6\r\n6\r\n6\r\n"
            ]
        ]
    }
]