[
    {
        "name": "Skyscrapers (easy version)",
        "description": "This is an easier version of the problem. In this version \n    n \n    \u2264 1000\n\nThe outskirts of the capital are being actively built up in Berland. The\ncompany \"Kernel Panic\" manages the construction of a residential complex of\nskyscrapers in New Berlskva. All skyscrapers are built along the highway. It\nis known that the company has already bought \n    n\n plots along the highway\nand is preparing to build \n    n\n skyscrapers, one skyscraper per plot.\nArchitects must consider several requirements when planning a skyscraper.\nFirstly, since the land on each plot has different properties, each skyscraper\nhas a limit on the largest number of floors it can have. Secondly, according\nto the design code of the city, it is unacceptable for a skyscraper to\nsimultaneously have higher skyscrapers both to the left and to the right of\nit. Formally, let's number the plots from \n    1\n to \n    n\n. Then if the\nskyscraper on the \n    i\n-th plot has \n    a_i\n floors, it must hold that\n\n    a_i\n is at most \n    m_i\n (\n    1 \n    \u2264 a_i \n    \u2264 m_i\n). Also there\nmustn't be integers \n    j\n and \n    k\n such that \n    j < i < k\n and \n    a_j >\n    a_i < a_k\n. Plots \n    j\n and \n    k\n are not required to be adjacent to\n\n    i\n. The company wants the total number of floors in the built skyscrapers\nto be as large as possible. Help it to choose the number of floors for each\nskyscraper in an optimal way, i.e. in such a way that all requirements are\nfulfilled, and among all such construction plans choose any plan with the\nmaximum possible total number of floors. Input The first line contains a\nsingle integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 1000\n) \u2014 the number of plots.\nThe second line contains the integers \n    m_1, m_2, \n    \u2026, m_n\n (\n    1\n    \n    \u2264 m_i \n    \u2264 10^9\n) \u2014 the limit on the number of floors for every\npossible number of floors for a skyscraper on each plot. Output Print \n    n\n\nintegers \n    a_i\n \u2014 the number of floors in the plan for each skyscraper,\nsuch that all requirements are met, and the total number of floors in all\nskyscrapers is the maximum possible. If there are multiple answers possible,\nprint any of them. Examples Input 5 1 2 3 2 1 Output 1 2 3 2 1 Input 3 10 6 8\nOutput 10 6 6 Note In the first example, you can build all skyscrapers with\nthe highest possible height. In the second test example, you cannot give the\nmaximum height to all skyscrapers as this violates the design code\nrestriction. The answer \n    [10, 6, 6]\n is optimal. Note that the answer of\n\n    [6, 6, 8]\n also satisfies all restrictions, but is not optimal.\n\n",
        "cf_contest_id": 1313,
        "cf_index": "C1",
        "cf_rating": 1500,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "data structures",
            "dp",
            "greedy"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "5\r\n1 2 3 2 1\r\n",
                "1 2 3 2 1\r\n"
            ],
            [
                "3\r\n10 6 8\r\n",
                "10 6 6\r\n"
            ]
        ],
        "private_cases": [
            [
                "7\r\n1 2 1 2 1 2 1\r\n",
                "1 2 1 1 1 1 1\r\n"
            ],
            [
                "7\r\n1 2 1 2 1 3 1\r\n",
                "1 1 1 1 1 3 1\r\n"
            ],
            [
                "1\r\n1\r\n",
                "1\r\n"
            ],
            [
                "5\r\n1 1 4 2 2\r\n",
                "1 1 4 2 2\r\n"
            ],
            [
                "6\r\n1 3 4 3 5 4\r\n",
                "1 3 3 3 5 4\r\n"
            ],
            [
                "100\r\n82 51 81 14 37 17 78 92 64 15 8 86 89 8 87 77 66 10 15 12 100 25 92 47 21 78 20 63 13 49 41 36 41 79 16 87 87 69 3 76 80 60 100 49 70 59 72 8 38 71 45 97 71 14 76 54 81 4 59 46 39 29 92 3 49 22 53 99 59 52 74 31 92 43 42 23 44 9 82 47 7 40 12 9 3 55 37 85 46 22 84 52 98 41 21 77 63 17 62 91\r\n",
                "3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 22 22 53 99 59 52 52 31 31 31 31 23 23 9 9 9 7 7 7 7 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\r\n"
            ],
            [
                "7\r\n6 2 2 6 5 7 7\r\n",
                "2 2 2 5 5 7 7\r\n"
            ],
            [
                "7\r\n2 4 1 2 3 1 2\r\n",
                "2 4 1 1 1 1 1\r\n"
            ],
            [
                "7\r\n2 1 2 1 2 2 1\r\n",
                "1 1 1 1 2 2 1\r\n"
            ],
            [
                "7\r\n5 2 4 2 4 1 1\r\n",
                "5 2 2 2 2 1 1\r\n"
            ],
            [
                "6\r\n3 2 1 7 3 7\r\n",
                "1 1 1 7 3 3\r\n"
            ],
            [
                "6\r\n4 1 2 3 2 1\r\n",
                "1 1 2 3 2 1\r\n"
            ]
        ]
    }
]