[
    {
        "name": "Print Check",
        "description": "Kris works in a large company \"Blake Technologies\". As a best engineer of the\ncompany he was assigned a task to develop a printer that will be able to print\nhorizontal and vertical strips. First prototype is already built and Kris\nwants to tests it. He wants you to implement the program that checks the\nresult of the printing. Printer works with a rectangular sheet of paper of\nsize n \u00d7 m. Consider the list as a table consisting of n rows and m columns.\nRows are numbered from top to bottom with integers from 1 to n, while columns\nare numbered from left to right with integers from 1 to m. Initially, all\ncells are painted in color 0. Your program has to support two operations:\nPaint all cells in row ri in color ai; Paint all cells in column ci in color\nai. If during some operation i there is a cell that have already been painted,\nthe color of this cell also changes to ai. Your program has to print the\nresulting table after k operation. Input The first line of the input contains\nthree integers n, m and k (1 \u2264 n, m \u2264 5000, n\u00b7m \u2264 100 000, 1 \u2264 k \u2264 100 000) \u2014\nthe dimensions of the sheet and the number of operations, respectively. Each\nof the next k lines contains the description of exactly one query: 1 ri ai (1\n\u2264 ri \u2264 n, 1 \u2264 ai \u2264 10^9), means that row ri is painted in color ai; 2 ci ai (1\n\u2264 ci \u2264 m, 1 \u2264 ai \u2264 10^9), means that column ci is painted in color ai. Output\nPrint n lines containing m integers each \u2014 the resulting table after all\noperations are applied. Examples Input 3 3 3 1 1 3 2 2 1 1 2 2 Output 3 1 3 2\n2 2 0 1 0 Input 5 3 5 1 1 1 1 3 1 1 5 1 2 1 1 2 3 1 Output 1 1 1 1 0 1 1 1 1 1\n0 1 1 1 1 Note The figure below shows all three operations for the first\nsample step by step. The cells that were painted on the corresponding step are\nmarked gray.\n\n",
        "cf_contest_id": 631,
        "cf_index": "B",
        "cf_rating": 1200,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "implementation"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 3 3\r\n1 1 3\r\n2 2 1\r\n1 2 2\r\n",
                "3 1 3\r\n2 2 2\r\n0 1 0\r\n"
            ],
            [
                "5 3 5\r\n1 1 1\r\n1 3 1\r\n1 5 1\r\n2 1 1\r\n2 3 1\r\n",
                "1 1 1\r\n1 0 1\r\n1 1 1\r\n1 0 1\r\n1 1 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "5 5 4\r\n1 2 1\r\n1 4 1\r\n2 2 1\r\n2 4 1\r\n",
                "0 1 0 1 0\r\n1 1 1 1 1\r\n0 1 0 1 0\r\n1 1 1 1 1\r\n0 1 0 1 0\r\n"
            ],
            [
                "4 6 8\r\n1 2 1\r\n2 2 2\r\n2 5 2\r\n1 1 1\r\n1 4 1\r\n1 3 2\r\n2 1 1\r\n2 6 1\r\n",
                "1 1 1 1 1 1\r\n1 2 1 1 2 1\r\n1 2 2 2 2 1\r\n1 1 1 1 1 1\r\n"
            ],
            [
                "2 2 3\r\n1 1 1\r\n1 2 1\r\n2 1 2\r\n",
                "2 1\r\n2 1\r\n"
            ],
            [
                "1 2 4\r\n1 1 1\r\n2 1 2\r\n2 2 3\r\n1 1 4\r\n",
                "4 4\r\n"
            ],
            [
                "2 1 5\r\n1 1 7\r\n1 2 77\r\n2 1 777\r\n1 1 77\r\n1 2 7\r\n",
                "77\r\n7\r\n"
            ],
            [
                "2 1 1\r\n1 2 1000000000\r\n",
                "0\r\n1000000000\r\n"
            ],
            [
                "1 2 1\r\n2 2 1000000000\r\n",
                "0 1000000000\r\n"
            ],
            [
                "10 1 1\r\n2 1 1000000000\r\n",
                "1000000000\r\n1000000000\r\n1000000000\r\n1000000000\r\n1000000000\r\n1000000000\r\n1000000000\r\n1000000000\r\n1000000000\r\n1000000000\r\n"
            ],
            [
                "1 10 1\r\n1 1 1000000000\r\n",
                "1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\r\n"
            ],
            [
                "1 1 1\r\n1 1 1\r\n",
                "1\r\n"
            ],
            [
                "1 1 1\r\n1 1 1000000000\r\n",
                "1000000000\r\n"
            ],
            [
                "1 1 2\r\n1 1 123\r\n1 1 321\r\n",
                "321\r\n"
            ],
            [
                "1 1 2\r\n1 1 321\r\n1 1 123\r\n",
                "123\r\n"
            ]
        ]
    }
]