[
    {
        "name": "Rooter's Song",
        "description": "Wherever the destination is, whoever we meet, let's render this song together.\nOn a Cartesian coordinate plane lies a rectangular stage of size w \u00d7 h,\nrepresented by a rectangle with corners (0, 0), (w, 0), (w, h) and (0, h). It\ncan be seen that no collisions will happen before one enters the stage. On the\nsides of the stage stand n dancers. The i-th of them falls into one of the\nfollowing groups: Vertical: stands at (xi, 0), moves in positive y direction\n(upwards); Horizontal: stands at (0, yi), moves in positive x direction\n(rightwards). According to choreography, the i-th dancer should stand still\nfor the first ti milliseconds, and then start moving in the specified\ndirection at 1 unit per millisecond, until another border is reached. It is\nguaranteed that no two dancers have the same group, position and waiting time\nat the same time. When two dancers collide (i.e. are on the same point at some\ntime when both of them are moving), they immediately exchange their moving\ndirections and go on. Dancers stop when a border of the stage is reached. Find\nout every dancer's stopping position. Input The first line of input contains\nthree space-separated positive integers n, w and h (1 \u2264 n \u2264 100 000, 2 \u2264 w, h\n\u2264 100 000) \u2014 the number of dancers and the width and height of the stage,\nrespectively. The following n lines each describes a dancer: the i-th among\nthem contains three space-separated integers gi, pi, and ti (1 \u2264 gi \u2264 2, 1 \u2264\npi \u2264 99 999, 0 \u2264 ti \u2264 100 000), describing a dancer's group gi (gi = 1 \u2014\nvertical, gi = 2 \u2014 horizontal), position, and waiting time. If gi = 1 then pi\n= xi; otherwise pi = yi. It's guaranteed that 1 \u2264 xi \u2264 w - 1 and 1 \u2264 yi \u2264 h -\n1. It is guaranteed that no two dancers have the same group, position and\nwaiting time at the same time. Output Output n lines, the i-th of which\ncontains two space-separated integers (xi, yi) \u2014 the stopping position of the\ni-th dancer in the input. Examples Input 8 10 8 1 1 10 1 4 13 1 7 1 1 8 2 2 2\n0 2 5 14 2 6 0 2 6 1 Output 4 8 10 5 8 8 10 6 10 2 1 8 7 8 10 6 Input 3 2 3 1\n1 2 2 1 1 1 1 5 Output 1 3 2 1 1 3 Note The first example corresponds to the\ninitial setup in the legend, and the tracks of dancers are marked with\ndifferent colours in the following figure. In the second example, no dancers\ncollide.\n\n",
        "cf_contest_id": 848,
        "cf_index": "B",
        "cf_rating": 1900,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "geometry",
            "implementation",
            "sortings",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8 10 8\r\n1 1 10\r\n1 4 13\r\n1 7 1\r\n1 8 2\r\n2 2 0\r\n2 5 14\r\n2 6 0\r\n2 6 1\r\n",
                "4 8\r\n10 5\r\n8 8\r\n10 6\r\n10 2\r\n1 8\r\n7 8\r\n10 6\r\n"
            ],
            [
                "3 2 3\r\n1 1 2\r\n2 1 1\r\n1 1 5\r\n",
                "1 3\r\n2 1\r\n1 3\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 10 10\r\n1 8 1\r\n",
                "8 10\r\n"
            ],
            [
                "3 4 5\r\n1 3 9\r\n2 1 9\r\n1 2 8\r\n",
                "3 5\r\n4 1\r\n2 5\r\n"
            ],
            [
                "10 500 500\r\n2 88 59\r\n2 470 441\r\n1 340 500\r\n2 326 297\r\n1 74 45\r\n1 302 273\r\n1 132 103\r\n2 388 359\r\n1 97 68\r\n2 494 465\r\n",
                "500 494\r\n97 500\r\n340 500\r\n302 500\r\n500 470\r\n500 88\r\n500 326\r\n132 500\r\n500 388\r\n74 500\r\n"
            ],
            [
                "20 50000 50000\r\n2 45955 55488\r\n1 19804 29337\r\n2 3767 90811\r\n2 24025 33558\r\n1 46985 56518\r\n2 21094 30627\r\n2 5787 15320\r\n1 4262 91306\r\n2 37231 46764\r\n1 18125 27658\r\n1 36532 12317\r\n1 31330 40863\r\n1 18992 28525\r\n1 29387 38920\r\n1 44654 54187\r\n2 45485 55018\r\n2 36850 46383\r\n1 44649 54182\r\n1 40922 50455\r\n2 12781 99825\r\n",
                "18125 50000\r\n50000 45955\r\n50000 12781\r\n31330 50000\r\n50000 5787\r\n40922 50000\r\n44649 50000\r\n50000 3767\r\n19804 50000\r\n44654 50000\r\n36532 50000\r\n50000 37231\r\n46985 50000\r\n50000 45485\r\n50000 21094\r\n18992 50000\r\n29387 50000\r\n50000 24025\r\n50000 36850\r\n4262 50000\r\n"
            ],
            [
                "20 15 15\r\n2 7 100000\r\n1 2 100000\r\n2 1 100000\r\n1 9 100000\r\n2 4 100000\r\n2 3 100000\r\n2 14 100000\r\n1 6 100000\r\n1 10 100000\r\n2 5 100000\r\n2 13 100000\r\n1 8 100000\r\n1 13 100000\r\n1 14 100000\r\n2 10 100000\r\n1 5 100000\r\n1 11 100000\r\n1 12 100000\r\n1 1 100000\r\n2 2 100000\r\n",
                "15 7\r\n15 2\r\n1 15\r\n9 15\r\n15 4\r\n15 3\r\n14 15\r\n6 15\r\n15 10\r\n5 15\r\n13 15\r\n8 15\r\n15 13\r\n15 14\r\n10 15\r\n15 5\r\n11 15\r\n12 15\r\n15 1\r\n2 15\r\n"
            ],
            [
                "5 20 20\r\n1 15 3\r\n2 15 3\r\n2 3 1\r\n2 1 0\r\n1 16 4\r\n",
                "16 20\r\n15 20\r\n20 3\r\n20 1\r\n20 15\r\n"
            ],
            [
                "15 80 80\r\n2 36 4\r\n2 65 5\r\n1 31 2\r\n2 3 1\r\n2 62 0\r\n2 37 5\r\n1 16 4\r\n2 47 2\r\n1 17 5\r\n1 9 5\r\n2 2 0\r\n2 62 5\r\n2 34 2\r\n1 33 1\r\n2 69 3\r\n",
                "80 37\r\n80 65\r\n31 80\r\n80 3\r\n80 62\r\n33 80\r\n16 80\r\n80 47\r\n17 80\r\n9 80\r\n80 2\r\n80 62\r\n80 36\r\n80 34\r\n80 69\r\n"
            ],
            [
                "15 15 15\r\n1 10 1\r\n2 11 0\r\n2 6 4\r\n1 1 0\r\n1 7 5\r\n1 14 3\r\n1 3 1\r\n1 4 2\r\n1 9 0\r\n2 10 1\r\n1 12 1\r\n2 2 0\r\n1 5 3\r\n2 3 0\r\n2 4 2\r\n",
                "15 10\r\n12 15\r\n3 15\r\n1 15\r\n15 2\r\n15 11\r\n7 15\r\n15 6\r\n10 15\r\n9 15\r\n14 15\r\n5 15\r\n15 4\r\n15 3\r\n4 15\r\n"
            ],
            [
                "5 5 5\r\n1 1 0\r\n2 1 0\r\n2 2 1\r\n1 2 1\r\n2 4 3\r\n",
                "5 2\r\n5 4\r\n2 5\r\n5 1\r\n1 5\r\n"
            ]
        ]
    }
]