[
    {
        "name": "Mail Stamps",
        "description": "One day Bob got a letter in an envelope. Bob knows that when Berland's post\nofficers send a letter directly from city \u00abA\u00bb to city \u00abB\u00bb, they stamp it with\n\u00abA B\u00bb, or \u00abB A\u00bb. Unfortunately, often it is impossible to send a letter\ndirectly from the city of the sender to the city of the receiver, that's why\nthe letter is sent via some intermediate cities. Post officers never send a\nletter in such a way that the route of this letter contains some city more\nthan once. Bob is sure that the post officers stamp the letters accurately.\nThere are n stamps on the envelope of Bob's letter. He understands that the\npossible routes of this letter are only two. But the stamps are numerous, and\nBob can't determine himself none of these routes. That's why he asks you to\nhelp him. Find one of the possible routes of the letter. Input The first line\ncontains integer n (1 \u2264 n \u2264 10^5) \u2014 amount of mail stamps on the envelope.\nThen there follow n lines with two integers each \u2014 description of the stamps.\nEach stamp is described with indexes of the cities between which a letter is\nsent. The indexes of cities are integers from 1 to 10^9. Indexes of all the\ncities are different. Every time the letter is sent from one city to another,\nexactly one stamp is put on the envelope. It is guaranteed that the given\nstamps correspond to some valid route from some city to some other city.\nOutput Output n + 1 numbers \u2014 indexes of cities in one of the two possible\nroutes of the letter. Examples Input 2 1 100 100 2 Output 2 100 1 Input 3 3 1\n100 2 3 2 Output 100 2 3 1\n\n",
        "cf_contest_id": 29,
        "cf_index": "C",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dfs and similar",
            "graphs",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2\r\n1 100\r\n100 2\r\n",
                "1\r\n100\r\n2\r\n"
            ],
            [
                "3\r\n3 1\r\n100 2\r\n3 2\r\n",
                "1\r\n3\r\n2\r\n100\r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n458744979 589655889\r\n248228386 824699605\r\n458744979 824699605\r\n",
                "589655889\r\n458744979\r\n824699605\r\n248228386\r\n"
            ],
            [
                "4\r\n90104473 221011623\r\n18773664 221011623\r\n90104473 74427905\r\n74427905 186329050\r\n",
                "18773664\r\n221011623\r\n90104473\r\n74427905\r\n186329050\r\n"
            ],
            [
                "5\r\n695442143 421284135\r\n641835294 542627184\r\n852367357 120042890\r\n641835294 852367357\r\n542627184 421284135\r\n",
                "695442143\r\n421284135\r\n542627184\r\n641835294\r\n852367357\r\n120042890\r\n"
            ],
            [
                "6\r\n264896923 2497658\r\n57071588 447086061\r\n2497658 483723090\r\n57071588 264896923\r\n158310110 483723090\r\n158310110 72866107\r\n",
                "447086061\r\n57071588\r\n264896923\r\n2497658\r\n483723090\r\n158310110\r\n72866107\r\n"
            ],
            [
                "1\r\n1 1000000000\r\n",
                "1\r\n1000000000\r\n"
            ],
            [
                "1\r\n1000000000 999999999\r\n",
                "1000000000\r\n999999999\r\n"
            ],
            [
                "10\r\n661239801 721746596\r\n225324231 116454751\r\n687002568 865423160\r\n799202882 865423160\r\n661239801 116454751\r\n387882517 687002568\r\n748798833 721746596\r\n179630172 225324231\r\n945958362 387882517\r\n179630172 945958362\r\n",
                "799202882\r\n865423160\r\n687002568\r\n387882517\r\n945958362\r\n179630172\r\n225324231\r\n116454751\r\n661239801\r\n721746596\r\n748798833\r\n"
            ],
            [
                "21\r\n280810160 291988863\r\n760364563 140163983\r\n16417017 364832782\r\n400253359 677358550\r\n597688496 794948223\r\n400253359 603304541\r\n589408417 603304541\r\n385039298 307729574\r\n293170375 805849550\r\n140163983 219301181\r\n732214548 760364563\r\n307729574 280810160\r\n131915938 219301181\r\n4615652 347722938\r\n396478457 805849550\r\n16417017 732214548\r\n4615652 677358550\r\n131915938 589408417\r\n291988863 364832782\r\n396478457 794948223\r\n385039298 597688496\r\n",
                "293170375\r\n805849550\r\n396478457\r\n794948223\r\n597688496\r\n385039298\r\n307729574\r\n280810160\r\n291988863\r\n364832782\r\n16417017\r\n732214548\r\n760364563\r\n140163983\r\n219301181\r\n131915938\r\n589408417\r\n603304541\r\n400253359\r\n677358550\r\n4615652\r\n347722938\r\n"
            ],
            [
                "1\r\n2105127 227379126\r\n",
                "2105127\r\n227379126\r\n"
            ]
        ]
    }
]