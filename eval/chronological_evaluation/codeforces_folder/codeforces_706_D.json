[
    {
        "name": "Vasiliy's Multiset",
        "description": "Author has gone out of the stories about Vasiliy, so here is just a formal\ntask description. You are given q queries and a multiset A, initially\ncontaining only integer 0. There are three types of queries: \"+ x\" \u2014 add\ninteger x to multiset A. \"- x\" \u2014 erase one occurrence of integer x from\nmultiset A. It's guaranteed that at least one x is present in the multiset A\nbefore this query. \"? x\" \u2014 you are given integer x and need to compute the\nvalue , i.e. the maximum value of bitwise exclusive OR (also know as XOR) of\ninteger x and some integer y from the multiset A.Multiset is a set, where\nequal elements are allowed. Input The first line of the input contains a\nsingle integer q (1 \u2264 q \u2264 200 000) \u2014 the number of queries Vasiliy has to\nperform. Each of the following q lines of the input contains one of three\ncharacters '+', '-' or '?' and an integer xi (1 \u2264 xi \u2264 10^9). It's guaranteed\nthat there is at least one query of the third type. Note, that the integer 0\nwill always be present in the set A. Output For each query of the type '?'\nprint one integer \u2014 the maximum value of bitwise exclusive OR (XOR) of integer\nxi and some integer from the multiset A. Example Input 10  8  9  11  6\n 1 ? 3 \u00ad 8 ? 3 ? 8 ? 11 Output 11 10 14 13 Note After first five operations\nmultiset A contains integers 0, 8, 9, 11, 6 and 1. The answer for the sixth\nquery is integer \u2014 maximum among integers , , , and .\n\n",
        "cf_contest_id": 706,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "bitmasks",
            "data structures",
            "trees"
        ],
        "time_limit_seconds": 4.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "10\r\n+ 8\r\n+ 9\r\n+ 11\r\n+ 6\r\n+ 1\r\n? 3\r\n- 8\r\n? 3\r\n? 8\r\n? 11\r\n",
                "11\r\n10\r\n14\r\n13\r\n"
            ]
        ],
        "private_cases": [
            [
                "12\r\n+ 4\r\n+ 4\r\n+ 5\r\n? 3\r\n- 4\r\n? 3\r\n- 4\r\n? 3\r\n? 3\r\n- 5\r\n+ 10\r\n? 1\r\n",
                "7\r\n7\r\n6\r\n6\r\n11\r\n"
            ],
            [
                "10\r\n? 1\r\n+ 1\r\n+ 8\r\n- 1\r\n+ 2\r\n+ 7\r\n+ 4\r\n+ 7\r\n+ 3\r\n? 7\r\n",
                "1\r\n15\r\n"
            ],
            [
                "7\r\n? 1\r\n+ 941492387\r\n+ 72235422\r\n+ 449924898\r\n+ 783332532\r\n- 941492387\r\n- 72235422\r\n",
                "1\r\n"
            ],
            [
                "3\r\n? 5\r\n? 4\r\n? 3\r\n",
                "5\r\n4\r\n3\r\n"
            ],
            [
                "1\r\n? 4\r\n",
                "4\r\n"
            ],
            [
                "14\r\n+ 4\r\n+ 4\r\n+ 4\r\n+ 4\r\n? 3\r\n- 4\r\n- 4\r\n- 4\r\n? 3\r\n+ 5\r\n? 3\r\n- 4\r\n+ 4\r\n? 3\r\n",
                "7\r\n7\r\n7\r\n7\r\n"
            ],
            [
                "12\r\n? 4\r\n+ 4\r\n? 4\r\n+ 4\r\n? 3\r\n- 4\r\n- 4\r\n? 3\r\n+ 4\r\n? 4\r\n+ 1\r\n+ 1\r\n",
                "4\r\n4\r\n7\r\n3\r\n4\r\n"
            ]
        ]
    }
]