[
    {
        "name": "LIS of Sequence",
        "description": "The next \"Data Structures and Algorithms\" lesson will be about Longest\nIncreasing Subsequence (LIS for short) of a sequence. For better\nunderstanding, Nam decided to learn it a few days before the lesson. Nam\ncreated a sequence a consisting of n (1 \u2264 n \u2264 10^5) elements a1, a2, ..., an\n(1 \u2264 ai \u2264 10^5). A subsequence ai1, ai2, ..., aik where 1 \u2264 i1 < i2 < ... < ik\n\u2264 n is called increasing if ai1 < ai2 < ai3 < ... < aik. An increasing\nsubsequence is called longest if it has maximum length among all increasing\nsubsequences. Nam realizes that a sequence may have several longest increasing\nsubsequences. Hence, he divides all indexes i (1 \u2264 i \u2264 n), into three groups:\ngroup of all i such that ai belongs to no longest increasing subsequences.\ngroup of all i such that ai belongs to at least one but not every longest\nincreasing subsequence. group of all i such that ai belongs to every longest\nincreasing subsequence. Since the number of longest increasing subsequences of\na may be very large, categorizing process is very difficult. Your task is to\nhelp him finish this job. Input The first line contains the single integer n\n(1 \u2264 n \u2264 10^5) denoting the number of elements of sequence a. The second line\ncontains n space-separated integers a1, a2, ..., an (1 \u2264 ai \u2264 10^5). Output\nPrint a string consisting of n characters. i-th character should be '1', '2'\nor '3' depending on which group among listed above index i belongs to.\nExamples Input 1 4 Output 3 Input 4 1 3 2 5 Output 3223 Input 4 1 5 2 3 Output\n3133 Note In the second sample, sequence a consists of 4 elements: a1, a2,\na3, a4 = 1, 3, 2, 5. Sequence a has exactly 2 longest increasing\nsubsequences of length 3, they are a1, a2, a4 = 1, 3, 5 and a1, a3, a4 =\n1, 2, 5. In the third sample, sequence a consists of 4 elements: a1, a2,\na3, a4 = 1, 5, 2, 3. Sequence a have exactly 1 longest increasing\nsubsequence of length 3, that is a1, a3, a4 = 1, 2, 3.\n\n",
        "cf_contest_id": 486,
        "cf_index": "E",
        "cf_rating": 2200,
        "difficulty": 0,
        "cf_tags": [
            "data structures",
            "dp",
            "greedy",
            "hashing",
            "math"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "1\r\n4\r\n",
                "3"
            ],
            [
                "4\r\n1 3 2 5\r\n",
                "3223"
            ],
            [
                "4\r\n1 5 2 3\r\n",
                "3133"
            ]
        ],
        "private_cases": [
            [
                "10\r\n2 2 2 17 8 9 10 17 10 5\r\n",
                "2221333311"
            ],
            [
                "100\r\n102 157 177 149 138 193 19 74 127 156 128 122 6 101 154 92 24 188 51 89 18 77 112 100 65 11 113 173 79 124 102 81 11 171 114 43 60 168 44 86 87 82 177 8 12 181 139 121 140 28 108 17 173 63 18 4 148 125 117 153 193 180 188 142 46 75 163 126 128 22 32 163 164 1 161 19 162 59 190 14 93 85 93 37 73 64 64 173 163 42 136 42 132 97 142 172 182 157 100 52\r\n",
                "1111112111112111313112112111311311111113311111222121111122221111111221111131311111111111311111133111"
            ],
            [
                "24\r\n29 65 79 75 21 61 87 83 65 61 37 44 49 86 48 37 28 21 67 43 30 20 81 55\r\n",
                "211121111133212111311131"
            ],
            [
                "2\r\n5 4\r\n",
                "22"
            ],
            [
                "32\r\n9 71 28 214 98 204 27 156 27 201 247 103 191 108 54 166 28 182 116 42 225 192 76 205 41 134 248 78 191 223 108 140\r\n",
                "32213111111313131311131311211211"
            ],
            [
                "88\r\n114 109 129 36 47 150 68 12 81 19 61 70 80 115 82 29 51 63 118 140 89 67 12 147 91 30 114 135 55 45 152 124 114 55 107 147 89 27 143 128 92 38 113 88 130 151 132 106 71 106 151 105 95 129 28 138 69 153 146 13 42 30 153 58 124 95 27 123 90 44 132 36 26 60 51 126 97 152 125 148 26 153 90 136 141 58 90 126\r\n",
                "1112212212233131111131113131111311111113111131311111111311311111111111111111121213111111"
            ]
        ]
    }
]