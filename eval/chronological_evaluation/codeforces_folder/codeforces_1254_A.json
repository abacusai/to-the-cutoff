[
    {
        "name": "Feeding Chicken",
        "description": "Long is a huge fan of CFC (Codeforces Fried Chicken). But the price of CFC is\nincreasing, so he decides to breed the chicken on his own farm. His farm is\npresented by a rectangle grid with \n    r\n rows and \n    c\n columns. Some of\nthese cells contain rice, others are empty. \n    k\n chickens are living on his\nfarm. The number of chickens is not greater than the number of cells with rice\non the farm. Long wants to give his chicken playgrounds by assigning these\nfarm cells to his chickens. He would like to satisfy the following\nrequirements: Each cell of the farm is assigned to exactly one chicken. Each\nchicken is assigned at least one cell. The set of cells assigned to every\nchicken forms a connected area. More precisely, if two cells \n    (x, y)\n and\n\n    (u, v)\n are assigned to the same chicken, this chicken is able to walk\nfrom \n    (x, y)\n to \n    (u, v)\n by passing only its cells and moving from\neach cell to another cell sharing a side. Long also wants to prevent his\nchickens from fighting for food. Hence he wants the difference between the\nmaximum and the minimum number of cells with rice assigned to a chicken to be\nas small as possible. Please help him. Input Each test contains multiple test\ncases. The first line contains the number of test cases \n    T\n (\n    1 \n    \u2264 T\n    \n    \u2264 2 \n    \u00b7 10^4\n). Description of the test cases follows. The first\nline of each test case contains three integers \n    r\n, \n    c\n and \n    k\n\n(\n    1 \n    \u2264 r, c \n    \u2264 100, 1 \n    \u2264 k \n    \u2264 62\n), representing the size\nof Long's farm and the number of chickens Long has. Each of the next \n    r\n\nlines contains \n    c\n characters, each is either \".\" or \"R\", representing an\nempty cell or a cell with rice. It is guaranteed that the number of chickens\nis not greater than the number of cells with rice on the farm. It is\nguaranteed that the sum of \n    r \n    \u00b7 c\n over all test cases does not\nexceed \n    2 \n    \u00b7 10^4\n. Output For each test case, print \n    r\n lines\nwith \n    c\n characters on each line. Each character should be either a\nlowercase English character, an uppercase English character, or a digit. Two\ncharacters should be equal if and only if the two corresponding cells are\nassigned to the same chicken. Uppercase and lowercase characters are\nconsidered different, so \"A\" and \"a\" belong to two different chickens. If\nthere are multiple optimal answers, print any. Example Input 4 3 5 3 ..R..\n...R. ....R 6 4 6 R..R R..R RRRR RRRR R..R R..R 5 5 4 RRR.. R.R.. RRR.. R..R.\nR...R 2 31 62 RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\nOutput 11122 22223 33333 aacc aBBc aBBc CbbA CbbA CCAA 11114 22244 32444 33344\n33334 abcdefghijklmnopqrstuvwxyzABCDE FGHIJKLMNOPQRSTUVWXYZ0123456789 Note\nThese pictures explain the sample output. Each color represents one chicken.\nCells filled with patterns (not solid colors) contain rice. In the first test\ncase, each chicken has one cell with rice. Hence, the difference between the\nmaximum and the minimum number of cells with rice assigned to a chicken is\n\n    0\n. In the second test case, there are \n    4\n chickens with \n    3\n\ncells of rice, and \n    2\n chickens with \n    2\n cells of rice. Hence, the\ndifference between the maximum and the minimum number of cells with rice\nassigned to a chicken is \n    3 - 2 = 1\n. In the third test case, each chicken\nhas \n    3\n cells with rice. In the last test case, since there are \n    62\n\nchicken with exactly \n    62\n cells of rice, each chicken must be assigned to\nexactly one cell. The sample output is one of the possible way.\n\n",
        "cf_contest_id": 1254,
        "cf_index": "A",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "implementation"
        ],
        "time_limit_seconds": 1.5,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n3 5 3\r\n..R..\r\n...R.\r\n....R\r\n6 4 6\r\nR..R\r\nR..R\r\nRRRR\r\nRRRR\r\nR..R\r\nR..R\r\n5 5 4\r\nRRR..\r\nR.R..\r\nRRR..\r\nR..R.\r\nR...R\r\n2 31 62\r\nRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\r\nRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\r\n",
                "00000\r\n11110\r\n11112\r\n0000\r\n1000\r\n1122\r\n3332\r\n4444\r\n5555\r\n00000\r\n11100\r\n12222\r\n32222\r\n33333\r\n0123456789ABCDEFGHIJKLMNOPQRSTU\r\nzyxwvutsrqponmlkjihgfedcbaZYXWV\r\n"
            ]
        ],
        "private_cases": []
    }
]