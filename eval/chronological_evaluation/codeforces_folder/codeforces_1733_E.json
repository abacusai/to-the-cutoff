[
    {
        "name": "Conveyor",
        "description": "There is a conveyor with \n    120\n rows and \n    120\n columns. Each row and\ncolumn is numbered from \n    0\n to \n    119\n, and the cell in \n    i\n-th row\nand \n    j\n-th column is denoted as \n    (i, j)\n. The top leftmost cell is\n\n    (0, 0)\n. Each cell has a belt, and all belts are initially facing to the\nright. Initially, a slime ball is on the belt of \n    (0, 0)\n, and other belts\nare empty. Every second, the state of the conveyor changes as follows: All\nslime balls on the conveyor move one cell in the direction of the belt at the\nsame time. If there is no cell in the moved position, the slime gets out of\nthe conveyor, and if two slime balls move to the same cell, they merge into\none. All belts with slime ball in the previous second change direction at the\nsame time: belts facing to the right become facing to the down, and vice\nversa. A new slime ball is placed on cell \n    (0, 0)\n. There are \n    q\n\nqueries, each being three integers \n    t\n, \n    x\n, and \n    y\n. You have to\nfind out if there is a slime at the cell \n    (x, y)\n after \n    t\n seconds\nfrom the start. Can you do it? Input The first line contains one integer\n\n    q\n (\n    1 \n    \u2264 q \n    \u2264 10^4\n) \u2014 the number of queries. The only line of\neach query contains three integers \n    t\n, \n    x\n, and \n    y\n (\n    0 \n    \u2264 t\n    \n    \u2264 10^18\n, \n    0 \n    \u2264 x, y < 120\n). Output Print the answer for each\ntest case, one per line. If there is a slime ball in the cell \n    (x, y)\n\nafter \n    t\n seconds from the initial state, print \"YES\". Otherwise, print\n\"NO\". Example Input 6 1 1 0 5 1 3 0 0 0 2 4 5 2 0 2 1547748756 100 111 Output\nNO YES YES NO YES YES Note The state of conveyor with \n    t = 0\n. Red arrow\nrepresents the direction of each belt, and blue figure represents slime. The\nstate of conveyor with \n    t = 1\n. The state of conveyor with \n    t = 2\n.\n\n",
        "cf_contest_id": 1733,
        "cf_index": "E",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dp",
            "math"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n1 1 0\r\n5 1 3\r\n0 0 0\r\n2 4 5\r\n2 0 2\r\n1547748756 100 111\r\n",
                "NO\r\nYES\r\nYES\r\nNO\r\nYES\r\nYES\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n375085448716335963 85 84\r\n",
                "YES\r\n"
            ],
            [
                "1\r\n376737935072502811 101 46\r\n",
                "NO\r\n"
            ]
        ]
    }
]