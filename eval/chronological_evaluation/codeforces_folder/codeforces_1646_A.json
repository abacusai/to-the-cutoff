[
    {
        "name": "Square Counting",
        "description": "Luis has a sequence of \n    n+1\n integers \n    a_1, a_2, \n    \u2026, a_n+1\n.\nFor each \n    i = 1, 2, \n    \u2026, n+1\n it is guaranteed that \n    0\n    \u2264 a_i <\n    n\n, or \n    a_i=n^2\n. He has calculated the sum of all the elements of the\nsequence, and called this value \n    s\n. Luis has lost his sequence, but he\nremembers the values of \n    n\n and \n    s\n. Can you find the number of\nelements in the sequence that are equal to \n    n^2\n? We can show that the\nanswer is unique under the given constraints. Input Each test contains\nmultiple test cases. The first line contains the number of test cases \n    t\n\n(\n    1 \n    \u2264 t \n    \u2264 2\n    \u00b7 10^4\n). Description of the test cases follows.\nThe only line of each test case contains two integers \n    n\n and \n    s\n\n(\n    1\n    \u2264 n< 10^6\n, \n    0\n    \u2264 s \n    \u2264 10^18\n). It is guaranteed that\nthe value of \n    s\n is a valid sum for some sequence satisfying the above\nconstraints. Output For each test case, print one integer \u2014 the number of\nelements in the sequence which are equal to \n    n^2\n. Example Input 4 7 0 1 1\n2 12 3 12 Output 0 1 3 1 Note In the first test case, we have \n    s=0\n so all\nnumbers are equal to \n    0\n and there isn't any number equal to \n    49\n. In\nthe second test case, we have \n    s=1\n. There are two possible sequences:\n\n    [0, 1]\n or \n    [1, 0]\n. In both cases, the number \n    1\n appears just\nonce. In the third test case, we have \n    s=12\n, which is the maximum\npossible value of \n    s\n for this case. Thus, the number \n    4\n appears\n\n    3\n times in the sequence.\n\n",
        "cf_contest_id": 1646,
        "cf_index": "A",
        "cf_rating": 800,
        "difficulty": 0,
        "cf_tags": [
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\n7 0\r\n1 1\r\n2 12\r\n3 12\r\n",
                "0\r\n1\r\n3\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n999779 805402974925395962\r\n",
                "805759\r\n"
            ]
        ]
    }
]