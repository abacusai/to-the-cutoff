[
    {
        "name": "Tyndex.Brome",
        "description": "Tyndex is again well ahead of the rivals! The reaction to the release of\nZoozle Chrome browser was the release of a new browser Tyndex.Brome! The\npopularity of the new browser is growing daily. And the secret is not even the\nTyndex.Bar installed (the Tyndex.Bar automatically fills the glass with the\nfinest 1664 cognac after you buy Tyndex.Bottles and insert in into a USB\nport). It is highly popular due to the well-thought interaction with the user.\nLet us take, for example, the system of automatic address correction. Have you\nentered codehorses instead of codeforces? The gloomy Zoozle Chrome will sadly\nsay that the address does not exist. Tyndex.Brome at the same time will\nautomatically find the closest address and sent you there. That's brilliant!\nHow does this splendid function work? That's simple! For each potential\naddress a function of the F error is calculated by the following rules: for\nevery letter ci from the potential address c the closest position j of the\nletter ci in the address (s) entered by the user is found. The absolute\ndifference |i - j| of these positions is added to F. So for every i (1 \u2264 i \u2264\n|c|) the position j is chosen such, that ci = sj, and |i - j| is minimal\npossible. if no such letter ci exists in the address entered by the user, then\nthe length of the potential address |c| is added to F. After the values of the\nerror function have been calculated for all the potential addresses the most\nsuitable one is found. To understand the special features of the above\ndescribed method better, it is recommended to realize the algorithm of\ncalculating the F function for an address given by the user and some set of\npotential addresses. Good luck! Input The first line contains two integers n\nand k (1 \u2264 n \u2264 10^5, 1 \u2264 k \u2264 10^5). They are the number of potential addresses\nand the length of the address entered by the user. The next line contains k\nlowercase Latin letters. They are the address entered by the user (s). Each\nnext i-th (1 \u2264 i \u2264 n) line contains a non-empty sequence of lowercase Latin\nletters. They are the potential address. It is guaranteed that the total\nlength of all the lines does not exceed 2\u00b710^5. Output On each n line of the\noutput file print a single number: the value of the error function when the\ncurrent potential address is chosen. Please, do not use \nread or write 64-bit integers in C++. It is preffered to use cout (also you\nmay use \n12 Input 9 9 vkontakte vcontacte vkontrakte vkollapse vkrokodile vtopke\nvkapuste vpechke vk vcodeforcese Output 18 14 36 47 14 29 30 0 84\n\n",
        "cf_contest_id": 62,
        "cf_index": "B",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "2 10\r\ncodeforces\r\ncodeforces\r\ncodehorses\r\n",
                "0\r\n12\r\n"
            ],
            [
                "9 9\r\nvkontakte\r\nvcontacte\r\nvkontrakte\r\nvkollapse\r\nvkrokodile\r\nvtopke\r\nvkapuste\r\nvpechke\r\nvk\r\nvcodeforcese\r\n",
                "18\r\n14\r\n36\r\n47\r\n14\r\n29\r\n30\r\n0\r\n84\r\n"
            ]
        ],
        "private_cases": [
            [
                "3 3\r\nbyg\r\ndwg\r\nl\r\nx\r\n",
                "6\r\n1\r\n1\r\n"
            ],
            [
                "4 4\r\nlocw\r\na\r\nr\r\nba\r\nxuv\r\n",
                "1\r\n1\r\n4\r\n9\r\n"
            ],
            [
                "5 5\r\nvpjjx\r\njj\r\ne\r\nnor\r\nuthm\r\nbf\r\n",
                "3\r\n1\r\n9\r\n16\r\n4\r\n"
            ],
            [
                "10 10\r\nczuanvzpiq\r\nc\r\ng\r\ni\r\nx\r\na\r\ny\r\nz\r\nk\r\nf\r\nx\r\n",
                "0\r\n1\r\n8\r\n1\r\n3\r\n1\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "15 15\r\ndtpbfpabizlkgan\r\nnpybkhyu\r\njqyhismeyf\r\nnab\r\nkobmcjvqgfmij\r\nfh\r\ndmontj\r\nlggmbfcwecn\r\nwrwguzebezdqe\r\nnmmnozy\r\ntzrcodnu\r\nvbekfhdkxkultgs\r\ndnenm\r\nhbpe\r\nczfdmvwtqdj\r\ngftkkevg\r\n",
                "54\r\n89\r\n20\r\n128\r\n6\r\n32\r\n92\r\n127\r\n57\r\n54\r\n125\r\n34\r\n10\r\n94\r\n52\r\n"
            ],
            [
                "10 20\r\nowopujiohbocynvpllmk\r\nyyprqugbejvhi\r\nagrdbmotaastc\r\nzesafjoocdjnxgse\r\nr\r\nenlfylphtqjnrbo\r\njphnoumpdrebxtgbch\r\nfapki\r\nhbfptfbjhio\r\nsugzpa\r\nqojcadybsjedi\r\n",
                "96\r\n137\r\n171\r\n1\r\n139\r\n172\r\n29\r\n57\r\n28\r\n108\r\n"
            ],
            [
                "20 10\r\niwbiucrjoj\r\nqvjewvdrgwgc\r\newwqyhtdzakryafqaacimthycyasyb\r\ncuoscayekvbsqokyfdmjnojkjennf\r\nhkuv\r\njtdgbespjdtbc\r\ngeujitsrlqihoulvwuobnfospq\r\nzqhnlqxacchxhyeehnpfwdjnwvj\r\nxicsaoyfgtdbwqfrdgaiyn\r\natgshewfkuxaipizcdev\r\nvp\r\nyblkfmqsj\r\nyevxolvycyrrooosberqzrabefdckg\r\nrytykrlgttc\r\nafphunqbtydppxotf\r\nnkfoatpikdg\r\njwskqdsnymehilufkjzcjbwlixy\r\nwswr\r\nwsuhgjvzgppyeoxqrftpvmdlxqotl\r\nyivyjfuqxstysxgmmqutmd\r\nbymvqulyuzibelpuuwsoiuktv\r\n",
                "107\r\n771\r\n630\r\n14\r\n130\r\n461\r\n646\r\n382\r\n341\r\n4\r\n65\r\n655\r\n100\r\n249\r\n108\r\n579\r\n9\r\n705\r\n416\r\n457\r\n"
            ]
        ]
    }
]