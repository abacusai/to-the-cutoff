[
    {
        "name": "New Year Presents",
        "description": "Santa has prepared boxes with presents for \n    n\n kids, one box for each kid.\nThere are \n    m\n kinds of presents: balloons, sweets, chocolate bars, toy\ncars... A child would be disappointed to receive two presents of the same\nkind, so all kinds of presents in one box are distinct. Having packed all the\npresents, Santa realized that different boxes can contain different number of\npresents. It would be unfair to the children, so he decided to move some\npresents between boxes, and make their sizes similar. After all movements, the\ndifference between the maximal and the minimal number of presents in a box\nmust be as small as possible. All presents in each box should still be\ndistinct. Santa wants to finish the job as fast as possible, so he wants to\nminimize the number of movements required to complete the task. Given the sets\nof presents in each box, find the shortest sequence of movements of presents\nbetween boxes that minimizes the difference of sizes of the smallest and the\nlargest box, and keeps all presents in each box distinct. Input The first line\nof input contains two integers \n    n\n, \n    m\n (\n    1 \n    \u2264 n, m \n    \u2264\n    100\n     000\n), the number of boxes and the number of kinds of the presents.\nDenote presents with integers from \n    1\n to \n    m\n. Each of the following\n\n    n\n lines contains the description of one box. It begins with an integer\n\n    s_i\n (\n    s_i \n    \u2265 0\n), the number of presents in the box, \n    s_i\n\ndistinct integers between \n    1\n and \n    m\n follow, denoting the kinds of\npresents in that box. The total number of presents in all boxes does not\nexceed \n    500\n     000\n. Output Print one integer \n    k\n at the first line of\noutput, the number of movements in the shortest sequence that makes the sizes\nof the boxes differ by at most one. Then print \n    k\n lines that describe\nmovements in the same order in which they should be performed. Each movement\nis described by three integers \n    from_i\n, \n    to_i\n, \n    kind_i\n. It\nmeans that the present of kind \n    kind_i\n is moved from the box with number\n\n    from_i\n to the box with number \n    to_i\n. Boxes are numbered from one in\nthe order they are given in the input. At the moment when the movement is\nperformed the present with kind \n    kind_i\n must be present in the box with\nnumber \n    from_i\n. After performing all moves each box must not contain two\npresents of the same kind. If there are several optimal solutions, output any\nof them. Example Input 3 5 5 1 2 3 4 5 2 1 2 2 3 4 Output 2 1 3 5 1 2 3\n\n",
        "cf_contest_id": 1090,
        "cf_index": "C",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 512.0,
        "public_cases": [
            [
                "3 5\r\n5 1 2 3 4 5\r\n2 1 2\r\n2 3 4\r\n",
                "2\r\n1 2 3\r\n1 3 1\r\n"
            ]
        ],
        "private_cases": [
            [
                "100 1\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n1 1\r\n0\r\n0\r\n1 1\r\n1 1\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n1 1\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n1 1\r\n0\r\n0\r\n0\r\n1 1\r\n0\r\n0\r\n0\r\n0\r\n1 1\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n1 1\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n1 1\r\n1 1\r\n",
                "0\r\n"
            ],
            [
                "1 1\r\n0\r\n",
                "0\r\n"
            ],
            [
                "1 1\r\n1 1\r\n",
                "0\r\n"
            ],
            [
                "1 11\r\n10 6 10 11 5 8 2 1 3 4 7\r\n",
                "0\r\n"
            ],
            [
                "2 1\r\n0\r\n1 1\r\n",
                "0\r\n"
            ],
            [
                "2 5\r\n5 2 1 3 5 4\r\n5 1 2 3 4 5\r\n",
                "0\r\n"
            ],
            [
                "3 5\r\n0\r\n0\r\n5 2 1 5 3 4\r\n",
                "3\r\n3 1 1\r\n3 2 2\r\n3 1 4\r\n"
            ],
            [
                "3 7\r\n6 3 5 1 7 6 4\r\n1 1\r\n3 1 2 6\r\n",
                "2\r\n1 2 3\r\n1 2 4\r\n"
            ],
            [
                "3 19\r\n4 4 10 7 2\r\n0\r\n16 12 14 8 10 15 13 17 7 4 6 16 19 18 11 2 5\r\n",
                "9\r\n3 2 2\r\n3 2 4\r\n3 2 6\r\n3 2 8\r\n3 1 11\r\n3 2 12\r\n3 1 13\r\n3 2 16\r\n3 1 17\r\n"
            ],
            [
                "4 11\r\n10 1 11 4 6 9 2 3 10 5 8\r\n0\r\n1 3\r\n9 6 5 2 9 10 4 1 7 8\r\n",
                "9\r\n1 2 1\r\n4 2 2\r\n1 3 2\r\n4 2 4\r\n1 3 4\r\n4 2 6\r\n1 3 8\r\n4 2 8\r\n1 3 10\r\n"
            ],
            [
                "4 50\r\n9 26 13 12 16 39 37 42 11 18\r\n42 4 39 19 29 44 30 5 43 28 38 22 2 33 9 50 13 25 37 45 32 27 1 48 35 11 36 42 26 49 40 8 34 7 12 23 31 10 6 18 46 41 17\r\n28 22 30 48 7 23 42 37 47 41 50 14 33 13 27 18 2 15 12 16 21 32 6 25 28 4 49 45 1\r\n21 44 40 32 21 19 10 35 36 7 29 27 46 38 2 9 41 24 34 26 15 37\r\n",
                "20\r\n2 1 1\r\n2 1 4\r\n2 1 6\r\n2 1 8\r\n2 1 10\r\n2 1 19\r\n2 1 22\r\n2 1 25\r\n2 1 28\r\n2 1 32\r\n2 1 34\r\n2 1 36\r\n2 1 40\r\n2 4 5\r\n3 1 2\r\n2 4 17\r\n3 1 21\r\n2 4 42\r\n3 1 48\r\n2 4 48\r\n"
            ]
        ]
    }
]