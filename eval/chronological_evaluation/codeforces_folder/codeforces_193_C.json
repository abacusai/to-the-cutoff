[
    {
        "name": "Hamming Distance",
        "description": "Hamming distance between strings a and b of equal length (denoted by h(a, b))\nis equal to the number of distinct integers i (1 \u2264 i \u2264 |a|), such that ai \u2260\nbi, where ai is the i-th symbol of string a, bi is the i-th symbol of string\nb. For example, the Hamming distance between strings \"aba\" and \"bba\" equals 1,\nthey have different first symbols. For strings \"bbba\" and \"aaab\" the Hamming\ndistance equals 4. John Doe had a paper on which four strings of equal length\ns1, s2, s3 and s4 were written. Each string si consisted only of lowercase\nletters \"a\" and \"b\". John found the Hamming distances between all pairs of\nstrings he had. Then he lost the paper with the strings but he didn't lose the\nHamming distances between all pairs. Help John restore the strings; find some\nfour strings s'1, s'2, s'3, s'4 of equal length that consist only of lowercase\nletters \"a\" and \"b\", such that the pairwise Hamming distances between them are\nthe same as between John's strings. More formally, set s'i must satisfy the\ncondition . To make the strings easier to put down on a piece of paper, you\nshould choose among all suitable sets of strings the one that has strings of\nminimum length. Input The first line contains space-separated integers h(s1,\ns2), h(s1, s3), h(s1, s4). The second line contains space-separated integers\nh(s2, s3) and h(s2, s4). The third line contains the single integer h(s3, s4).\nAll given integers h(si, sj) are non-negative and do not exceed 10^5. It is\nguaranteed that at least one number h(si, sj) is positive. Output Print -1 if\nthere's no suitable set of strings. Otherwise print on the first line number\nlen \u2014 the length of each string. On the i-th of the next four lines print\nstring s'i. If there are multiple sets with the minimum length of the strings,\nprint any of them. Examples Input 4 4 4 4 4 4 Output 6 aaaabb aabbaa bbaaaa\nbbbbbb\n\n",
        "cf_contest_id": 193,
        "cf_index": "C",
        "cf_rating": 2400,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "matrices"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4 4 4\r\n4 4\r\n4\r\n",
                "6\r\nbbbbaa\r\nbbaabb\r\naabbbb\r\naaaaaa\r\n"
            ]
        ],
        "private_cases": [
            [
                "10 10 8\r\n8 8\r\n10\r\n",
                "14\r\nbbbbabbbbaaaaa\r\nabbbaaaaabbbbb\r\naaaabbbbbbbbbb\r\naaaaaaaaaaaaaa\r\n"
            ],
            [
                "99999 99998 99997\r\n99996 99995\r\n99994\r\n",
                "-1\r\n"
            ],
            [
                "6 6 6\r\n6 6\r\n6\r\n",
                "9\r\nbbbbbbaaa\r\nbbbaaabbb\r\naaabbbbbb\r\naaaaaaaaa\r\n"
            ],
            [
                "1 1 1\r\n1 1\r\n1\r\n",
                "-1\r\n"
            ],
            [
                "2 2 2\r\n2 2\r\n2\r\n",
                "3\r\nbba\r\nbab\r\nabb\r\naaa\r\n"
            ],
            [
                "2 1 2\r\n2 2\r\n2\r\n",
                "-1\r\n"
            ],
            [
                "5 6 6\r\n6 5\r\n5\r\n",
                "-1\r\n"
            ],
            [
                "5 3 5\r\n6 4\r\n2\r\n",
                "7\r\nbaabbbb\r\nabbbbaa\r\naaaaabb\r\naaaaaaa\r\n"
            ],
            [
                "46 53 56\r\n59 52\r\n45\r\n",
                "79\r\nbaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbaabbbbbbbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaaaaaa\r\nabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbb\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n"
            ],
            [
                "3 6 4\r\n3 5\r\n6\r\n",
                "8\r\nbbaaaabb\r\nabaabbbb\r\naabbbbbb\r\naaaaaaaa\r\n"
            ],
            [
                "52 57 55\r\n45 51\r\n58\r\n",
                "85\r\nbbbbbbbbbbbbbbbbbbbbbbbbbbbaaaaaabbbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbb\r\naaaaaaaabbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\naaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\r\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n"
            ],
            [
                "1 1 1\r\n0 0\r\n0\r\n",
                "1\r\nb\r\na\r\na\r\na\r\n"
            ],
            [
                "0 1 0\r\n1 0\r\n1\r\n",
                "1\r\na\r\na\r\nb\r\na\r\n"
            ],
            [
                "1 0 3\r\n1 2\r\n3\r\n",
                "3\r\nbbb\r\nabb\r\nbbb\r\naaa\r\n"
            ],
            [
                "1 2 3\r\n1 2\r\n3\r\n",
                "4\r\nbabb\r\naabb\r\nabbb\r\naaaa\r\n"
            ],
            [
                "9067 30712 6906\r\n25880 68847\r\n39172\r\n",
                "-1\r\n"
            ],
            [
                "59229 81463 16933\r\n96758 49536\r\n14180\r\n",
                "-1\r\n"
            ],
            [
                "79085 19303 48758\r\n21707 35376\r\n45090\r\n",
                "-1\r\n"
            ],
            [
                "80578 32276 98528\r\n3211 43655\r\n46450\r\n",
                "-1\r\n"
            ],
            [
                "87477 87009 32302\r\n34917 73227\r\n63224\r\n",
                "-1\r\n"
            ],
            [
                "46113 61146 44846\r\n42628 62962\r\n75136\r\n",
                "-1\r\n"
            ],
            [
                "37134 12916 90594\r\n63739 15292\r\n2465\r\n",
                "-1\r\n"
            ],
            [
                "91531 33640 37893\r\n6206 92036\r\n90317\r\n",
                "-1\r\n"
            ],
            [
                "33712 12237 21291\r\n21634 68568\r\n88115\r\n",
                "-1\r\n"
            ],
            [
                "59864 60025 98103\r\n60065 2344\r\n14965\r\n",
                "-1\r\n"
            ],
            [
                "59872 85081 60032\r\n52232 59934\r\n78866\r\n",
                "-1\r\n"
            ],
            [
                "7090 59882 60181\r\n4825 29113\r\n60159\r\n",
                "-1\r\n"
            ],
            [
                "99828 54425 67603\r\n60232 60026\r\n59994\r\n",
                "-1\r\n"
            ],
            [
                "60039 60073 41174\r\n60004 13194\r\n80506\r\n",
                "-1\r\n"
            ],
            [
                "56764 60173 60003\r\n98475 2520\r\n59924\r\n",
                "-1\r\n"
            ],
            [
                "60046 59770 31988\r\n59932 79201\r\n26687\r\n",
                "-1\r\n"
            ],
            [
                "60218 34235 60087\r\n62830 60263\r\n83853\r\n",
                "-1\r\n"
            ],
            [
                "96719 60044 59941\r\n18657 76626\r\n60085\r\n",
                "-1\r\n"
            ],
            [
                "0 0 1\r\n0 0\r\n1\r\n",
                "-1\r\n"
            ],
            [
                "1 1 0\r\n1 0\r\n0\r\n",
                "-1\r\n"
            ],
            [
                "1 0 1\r\n0 1\r\n0\r\n",
                "-1\r\n"
            ],
            [
                "1 0 0\r\n0 1\r\n1\r\n",
                "-1\r\n"
            ],
            [
                "1 1 1\r\n0 0\r\n0\r\n",
                "1\r\nb\r\na\r\na\r\na\r\n"
            ],
            [
                "0 0 0\r\n0 0\r\n1\r\n",
                "-1\r\n"
            ]
        ]
    }
]