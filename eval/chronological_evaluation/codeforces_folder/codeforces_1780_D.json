[
    {
        "name": "Bit Guessing Game",
        "description": "This is an interactive problem. Kira has a hidden positive integer \n    n\n,\nand Hayato needs to guess it. Initially, Kira gives Hayato the value\n\n    cnt\n \u2014 the number of unit bits in the binary notation of\n\n    n\n. To guess \n    n\n, Hayato can only do operations of one kind: choose\nan integer \n    x\n and subtract it from \n    n\n. Note that after each\noperation, the number \n    n\n changes. Kira doesn't like bad requests, so if\nHayato tries to subtract a number \n    x\n greater than \n    n\n, he will lose\nto Kira. After each operation, Kira gives Hayato the updated value\n\n    cnt\n \u2014 the number of unit bits in the binary notation of the\nupdated value of \n    n\n. Kira doesn't have much patience, so Hayato must\nguess the original value of \n    n\n after no more than \n    30\n operations.\nSince Hayato is in elementary school, he asks for your help. Write a program\nthat guesses the number \n    n\n. Kira is an honest person, so he chooses the\ninitial number \n    n\n before all operations and does not change it afterward.\nInput The input data contains several test cases. The first line contains one\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 500\n) \u2014 the number of test cases. The\ndescription of the test cases follows. The first line of each test case\ncontains the number \n    cnt\n \u2014 the initial number of unit bits in\nthe binary notation \n    n\n. The hidden integer \n    n\n satisfies the\nfollowing constraint: \n    1 \n    \u2264 n \n    \u2264 10^9\n. Interaction To guess\n\n    n\n, you can perform the operation at most \n    30\n times. To do that,\nprint a line with the following format: \"- x\" (\n    1 \n    \u2264 x \n    \u2264 10^9\n).\nAfter this operation, the number \n    x\n is subtracted from \n    n\n, and\ntherefore \n    n\n is changed. If the number \n    x\n is greater than the\ncurrent value of \n    n\n, then the request is considered invalid. After the\noperation read a line containing a single non-negative integer\n\n    cnt\n \u2014 the number of unit bits in the binary notation of the\ncurrent \n    n\n after the operation. When you know the initial value of\n\n    n\n, print one line in the following format: \"! n\" (\n    1 \n    \u2264 n \n    \u2264\n    10^9\n). After that, move on to the next test case, or terminate the program\nif there are none. If your program performs more than \n    30\n operations for\none test case, subtracts a number \n    x\n greater than \n    n\n, or makes an\nincorrect request, then response to the request will be -1, after receiving\nsuch response, your program must exit immediately to receive the Wrong Answer\nverdict. Otherwise, you can get any other verdict. After printing a query or\nthe answer, do not forget to output the end of line and flush the output.\nOtherwise, you will get Idleness limit exceeded. To do this, use:\nfflush(stdout) or cout.flush() in C++; System.out.flush() in Java;\nflush(output) in Pascal; stdout.flush() in Python; see documentation for other\nlanguages. Hacks To make a hack, use the following format. The first line\nshould contain a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 500\n). Each\ntest case should contain one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 10^9\n) on\na separate line. Example Input 3 1 0 1 1 0 2 1 0 Output \u00ad 1 ! 1 \u00ad 1 \u00ad 1 ! 2\n\u00ad 2 \u00ad 1 ! 3 Note For example, the number of unit bits in number \n    6\n is\n\n    2\n, because binary notation of \n    6\n is \n    110\n. For \n    13\n the\nnumber of unit bits is \n    3\n, because \n    13_10 = 1101_2\n. In the first\ntest case, \n    n = 1\n, so the input is the number \n    1\n. After subtracting\none from \n    n\n, it becomes zero, so the number of unit bits in it is\n\n    0\n. In the third test case, \n    n = 3\n, which in binary representation\nlooks like \n    3_10 = 11_2\n, so the input is the number of ones, that is\n\n    2\n. After subtracting \n    2\n, \n    n = 1\n, so the number of unit bits is\nnow \n    1\n. After subtracting one from \n    n\n, it becomes equal to zero.\nNote that the blank lines in the input and output examples are shown for\nclarity and are not present in the actual interaction.\n\n",
        "cf_contest_id": 1780,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "bitmasks",
            "constructive algorithms",
            "interactive"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1\r\n2\r\n3\r\n",
                "3\r\n1\r\n1\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "29\r\n1\r\n3\r\n7\r\n15\r\n31\r\n63\r\n127\r\n255\r\n511\r\n1023\r\n2047\r\n4095\r\n8191\r\n16383\r\n32767\r\n65535\r\n131071\r\n262143\r\n524287\r\n1048575\r\n2097151\r\n4194303\r\n8388607\r\n16777215\r\n33554431\r\n67108863\r\n134217727\r\n268435455\r\n536870911\r\n",
                "29\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n"
            ]
        ]
    }
]