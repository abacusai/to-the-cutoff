[
    {
        "name": "Training Camp",
        "description": "You are organizing a training camp to teach algorithms to young kids. There\nare \n    n^2\n kids, organized in an \n    n\n by \n    n\n grid. Each kid is\nbetween \n    1\n and \n    n\n years old (inclusive) and any two kids who are in\nthe same row or in the same column have different ages. You want to select\nexactly \n    n\n kids for a programming competition, with exactly one kid from\neach row and one kid from each column. Moreover, kids who are not selected\nmust be either older than both kids selected in their row and column, or\nyounger than both kids selected in their row and column (otherwise they will\ncomplain). Notice that it is always possible to select \n    n\n kids satisfying\nthese requirements (for example by selecting \n    n\n kids who have the same\nage). During the training camp, you observed that some kids are good at\nprogramming, and the others are not. What is the maximum number of kids good\nat programming that you can select while satisfying all the requirements?\nInput The first line contains \n    n\n (\n    1 \n    \u2264 n \n    \u2264 128\n) \u2014 the size\nof the grid. The following \n    n\n lines describe the ages of the kids.\nSpecifically, the \n    i\n-th line contains \n    n\n integers \n    a_i,1, \n     \n    a_i,2, \n     \n    \u2026, \n      a_i, n\n (\n    1 \n    \u2264 a_i,j\n    \u2264 n\n) \u2014\nwhere \n    a_i,j\n is the age of the kid in the \n    i\n-th row and \n    j\n-th\ncolumn. It is guaranteed that two kids on the same row or column have\ndifferent ages, i.e., \n    a_i,j\n     a_i,j'\n for any \n    1\n    \u2264 i\n    \u2264\n    n\n, \n    1\n    \u2264 j < j'\n    \u2264 n\n, and \n    a_i,j\n     a_i',j\n for any\n\n    1\n    \u2264 i < i'\n    \u2264 n\n, \n    1\n    \u2264 j\n    \u2264 n\n. The following \n    n\n lines\ndescribe the programming skills of the kids. Specifically, the \n    i\n-th line\ncontains \n    n\n integers \n    c_i,1, \n      c_i,2, \n     \n    \u2026, \n      c_i,\n    n\n (\n    c_i,j\n    \u2208\n    \n    0, \n      1\n) \u2014 where \n    c_i,j=1\n if the\nkid in the \n    i\n-th row and \n    j\n-th column is good at programming and\n\n    c_i,j=0\n otherwise. Output Print the maximum number of kids good at\nprogramming that you can select while satisfying all the requirements.\nExamples Input 3 1 2 3 3 1 2 2 3 1 1 0 0 0 0 1 0 0 0 Output 1 Input 4 1 2 3 4\n2 1 4 3 3 4 1 2 4 3 2 1 1 1 1 0 0 0 1 0 1 1 0 1 0 0 0 1 Output 2 Note In the\nfirst sample, it is not possible to select the two kids good at programming\n(in row \n    1\n and column \n    1\n, and in row \n    2\n and column \n    3\n),\nbecause then you would have to select the kid in row \n    3\n and column\n\n    2\n, and in that case two kids would complain (the one in row \n    1\n and\ncolumn \n    2\n, and the one in row \n    3\n and column \n    1\n). A valid\nselection which contains \n    1\n kid good at programming is achieved by\nchoosing the \n    3\n kids who are \n    1\n year old. In the second sample,\nthere are \n    10\n valid choices of the \n    n\n kids that satisfy the\nrequirements, and each of them selects exactly \n    2\n kids good at\nprogramming.\n\n",
        "cf_contest_id": 1662,
        "cf_index": "J",
        "cf_rating": 0,
        "difficulty": 0,
        "cf_tags": [
            "flows",
            "graphs"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 2 3\r\n3 1 2\r\n2 3 1\r\n1 0 0\r\n0 0 1\r\n0 0 0\r\n",
                "1"
            ],
            [
                "4\r\n1 2 3 4\r\n2 1 4 3\r\n3 4 1 2\r\n4 3 2 1\r\n1 1 1 0\r\n0 0 1 0\r\n1 1 0 1\r\n0 0 0 1\r\n",
                "2"
            ]
        ],
        "private_cases": []
    }
]