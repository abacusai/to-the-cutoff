[
    {
        "name": "MEX and Increments",
        "description": "Dmitry has an array of \n    n\n non-negative integers \n    a_1, a_2, \n    \u2026,\n    a_n\n. In one operation, Dmitry can choose any index \n    j\n (\n    1 \n    \u2264 j\n    \n    \u2264 n\n) and increase the value of the element \n    a_j\n by \n    1\n. He can\nchoose the same index \n    j\n multiple times. For each \n    i\n from \n    0\n to\n\n    n\n, determine whether Dmitry can make the \n    MEX\n of the\narray equal to exactly \n    i\n. If it is possible, then determine the minimum\nnumber of operations to do it. The \n    MEX\n of the array is equal\nto the minimum non-negative integer that is not in the array. For example, the\n\n    MEX\n of the array \n    [3, 1, 0]\n is equal to \n    2\n, and the\narray \n    [3, 3, 1, 4]\n is equal to \n    0\n. Input The first line of input\ndata contains a single integer \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the\nnumber of test cases in the input. The descriptions of the test cases follow.\nThe first line of the description of each test case contains a single integer\n\n    n\n (\n    1 \n    \u2264 n \n    \u2264 2 \n    \u00b7 10^5\n) \u2014 the length of the array\n\n    a\n. The second line of the description of each test case contains \n    n\n\nintegers \n    a_1, a_2, \n    \u2026, a_n\n (\n    0 \n    \u2264 a_i \n    \u2264 n\n) \u2014 elements\nof the array \n    a\n. It is guaranteed that the sum of the values \n    n\n over\nall test cases in the test does not exceed \n    2\n    \u00b710^5\n. Output For each\ntest case, output \n    n + 1\n integer \u2014 \n    i\n-th number is equal to the\nminimum number of operations for which you can make the array\n\n    MEX\n equal to \n    i\n (\n    0 \n    \u2264 i \n    \u2264 n\n), or -1 if this\ncannot be done. Example Input 5 3 0 1 3 7 0 1 2 3 4 3 2 4 3 0 0 0 7 4 6 2 3 5\n0 5 5 4 0 1 0 4 Output 1 1 0 -1 1 1 2 2 1 0 2 6 3 0 1 4 3 1 0 -1 -1 -1 -1 -1\n-1 2 1 0 2 -1 -1 Note In the first set of example inputs, \n    n=3\n: to get\n\n    MEX=0\n, it is enough to perform one increment: \n    a_1\n++; to\nget \n    MEX=1\n, it is enough to perform one increment:\n\n    a_2\n++; \n    MEX=2\n for a given array, so there is no need to\nperform increments; it is impossible to get \n    MEX=3\n by\nperforming increments.\n\n",
        "cf_contest_id": 1619,
        "cf_index": "E",
        "cf_rating": 1700,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "data structures",
            "dp",
            "greedy",
            "implementation",
            "math",
            "sortings"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n3\r\n0 1 3\r\n7\r\n0 1 2 3 4 3 2\r\n4\r\n3 0 0 0\r\n7\r\n4 6 2 3 5 0 5\r\n5\r\n4 0 1 0 4\r\n",
                "1 1 0 -1 \r\n1 1 2 2 1 0 2 6 \r\n3 0 1 4 3 \r\n1 0 -1 -1 -1 -1 -1 -1 \r\n2 1 0 2 -1 -1 \r\n"
            ]
        ],
        "private_cases": []
    }
]