[
    {
        "name": "MEX Queries",
        "description": "You are given a set of integer numbers, initially it is empty. You should\nperform n queries. There are three different types of queries: 1 l r \u2014 Add all\nmissing numbers from the interval [l, r] 2 l r \u2014 Remove all present numbers\nfrom the interval [l, r] 3 l r \u2014 Invert the interval [l, r] \u2014 add all missing\nand remove all present numbers from the interval [l, r] After each query you\nshould output MEX of the set \u2014 the smallest positive (MEX \u2265 1) integer number\nwhich is not presented in the set. Input The first line contains one integer\nnumber n (1 \u2264 n \u2264 10^5). Next n lines contain three integer numbers t, l, r (1\n\u2264 t \u2264 3, 1 \u2264 l \u2264 r \u2264 10^18) \u2014 type of the query, left and right bounds. Output\nPrint MEX of the set after each query. Examples Input 3 1 3 4 3 1 6 2 1 3\nOutput 1 3 1 Input 4 1 1 3 3 5 6 2 4 4 3 1 6 Output 4 4 4 1 Note Here are\ncontents of the set after each query in the first example: 3, 4 \u2014 the\ninterval [3, 4] is added 1, 2, 5, 6 \u2014 numbers 3, 4 from the interval [1,\n6] got deleted and all the others are added 5, 6 \u2014 numbers 1, 2 got\ndeleted\n\n",
        "cf_contest_id": 817,
        "cf_index": "F",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "data structures",
            "trees"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n1 3 4\r\n3 1 6\r\n2 1 3\r\n",
                "1\r\n3\r\n1\r\n"
            ],
            [
                "4\r\n1 1 3\r\n3 5 6\r\n2 4 4\r\n3 1 6\r\n",
                "4\r\n4\r\n4\r\n1\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n1 1 89\r\n",
                "90\r\n"
            ],
            [
                "10\r\n1 1 9\r\n2 2 10\r\n2 1 10\r\n1 8 10\r\n3 8 10\r\n2 1 8\r\n3 9 10\r\n1 7 10\r\n1 4 10\r\n3 10 10\r\n",
                "10\r\n2\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n1\r\n"
            ],
            [
                "10\r\n2 9 59\r\n2 8 72\r\n3 19 41\r\n1 1 62\r\n1 50 74\r\n1 53 66\r\n2 59 69\r\n3 66 77\r\n2 62 63\r\n3 57 69\r\n",
                "1\r\n1\r\n1\r\n63\r\n75\r\n75\r\n59\r\n59\r\n59\r\n57\r\n"
            ],
            [
                "20\r\n3 20 37\r\n1 1 32\r\n1 22 70\r\n3 40 61\r\n3 50 50\r\n3 52 59\r\n1 65 66\r\n3 59 73\r\n3 72 76\r\n2 73 75\r\n1 72 75\r\n2 74 75\r\n1 65 78\r\n2 74 80\r\n2 76 79\r\n3 72 84\r\n2 84 87\r\n3 87 87\r\n1 81 83\r\n2 81 85\r\n",
                "1\r\n38\r\n71\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n40\r\n"
            ],
            [
                "3\r\n1 1 1000000000000000000\r\n3 1 999999999999999999\r\n2 1000000000000000000 1000000000000000000\r\n",
                "1000000000000000001\r\n1\r\n1\r\n"
            ],
            [
                "3\r\n1 999999999999999999 1000000000000000000\r\n3 999999999999999999 999999999999999999\r\n2 1000000000000000000 1000000000000000000\r\n",
                "1\r\n1\r\n1\r\n"
            ]
        ]
    }
]