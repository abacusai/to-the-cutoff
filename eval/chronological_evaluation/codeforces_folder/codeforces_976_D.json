[
    {
        "name": "Degree Set",
        "description": "You are given a sequence of n positive integers d1, d2, ..., dn (d1 < d2 < ...\n< dn). Your task is to construct an undirected graph such that: there are\nexactly dn + 1 vertices; there are no self-loops; there are no multiple edges;\nthere are no more than 10^6 edges; its degree set is equal to d. Vertices\nshould be numbered 1 through (dn + 1). Degree sequence is an array a with\nlength equal to the number of vertices in a graph such that ai is the number\nof vertices adjacent to i-th vertex. Degree set is a sorted in increasing\norder sequence of all distinct values from the degree sequence. It is\nguaranteed that there exists such a graph that all the conditions hold, and it\ncontains no more than 10^6 edges. Print the resulting graph. Input The first\nline contains one integer n (1 \u2264 n \u2264 300) \u2014 the size of the degree set. The\nsecond line contains n integers d1, d2, ..., dn (1 \u2264 di \u2264 1000, d1 < d2 < ...\n< dn) \u2014 the degree set. Output In the first line print one integer m (1 \u2264 m \u2264\n10^6) \u2014 the number of edges in the resulting graph. It is guaranteed that\nthere exists such a graph that all the conditions hold and it contains no more\nthan 10^6 edges. Each of the next m lines should contain two integers vi and\nui (1 \u2264 vi, ui \u2264 dn + 1) \u2014 the description of the i-th edge. Examples Input 3\n2 3 4 Output 8 3 1 4 2 4 5 2 5 5 1 3 2 2 1 5 3 Input 3 1 2 3 Output 4 1 2 1 3\n1 4 2 3\n\n",
        "cf_contest_id": 976,
        "cf_index": "D",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "graphs",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3\r\n2 3 4\r\n",
                "8\n2 5\n2 4\n2 3\n1 5\n1 4\n1 3\n1 2\n3 4\n"
            ],
            [
                "3\r\n1 2 3\r\n",
                "4\n1 4\n1 3\n1 2\n2 3\n"
            ]
        ],
        "private_cases": [
            [
                "4\r\n1 3 4 6\r\n",
                "11\n1 7\n1 6\n1 5\n1 4\n1 3\n1 2\n3 5\n3 4\n2 5\n2 4\n2 3\n"
            ],
            [
                "1\r\n1\r\n",
                "1\n1 2\n"
            ],
            [
                "2\r\n1 2\r\n",
                "2\n1 3\n1 2\n"
            ],
            [
                "10\r\n1 2 3 4 5 6 7 8 9 10\r\n",
                "30\n1 11\n1 10\n1 9\n1 8\n1 7\n1 6\n1 5\n1 4\n1 3\n1 2\n2 10\n2 9\n2 8\n2 7\n2 6\n2 5\n2 4\n2 3\n3 9\n3 8\n3 7\n3 6\n3 5\n3 4\n4 8\n4 7\n4 6\n4 5\n5 7\n5 6\n"
            ],
            [
                "4\r\n6 8 11 19\r\n",
                "108\n6 20\n6 19\n6 18\n6 17\n6 16\n6 15\n6 14\n6 13\n6 12\n6 11\n6 10\n6 9\n6 8\n6 7\n5 20\n5 19\n5 18\n5 17\n5 16\n5 15\n5 14\n5 13\n5 12\n5 11\n5 10\n5 9\n5 8\n5 7\n5 6\n4 20\n4 19\n4 18\n4 17\n4 16\n4 15\n4 14\n4 13\n4 12\n4 11\n4 10\n4 9\n4 8\n4 7\n4 6\n4 5\n3 20\n3 19\n3 18\n3 17\n3 16\n3 15\n3 14\n3 13\n3 12\n3 11\n3 10\n3 9\n3 8\n3 7\n3 6\n3 5\n3 4\n2 20\n2 19\n2 18\n2 17\n2 16\n2 15\n2 14\n2 13\n2 12\n2 11\n2 10\n2 9\n2 8\n2 7\n2 6\n2 5\n2 4\n2 3\n1 20\n1 19\n1 18\n1 17\n1 16\n1 15\n1 14\n1 13\n1 12\n1 11\n1 10\n1 9\n1 8\n1 7\n1 6\n1 5\n1 4\n1 3\n1 2\n8 12\n8 11\n8 10\n8 9\n7 12\n7 11\n7 10\n7 9\n7 8\n"
            ],
            [
                "2\r\n2 3\r\n",
                "5\n2 4\n2 3\n1 4\n1 3\n1 2\n"
            ]
        ]
    }
]