[
    {
        "name": "A Trance of Nightfall",
        "description": "The cool breeze blows gently, the flowing water ripples steadily.\"Flowing and\npassing like this, the water isn't gone ultimately; Waxing and waning like\nthat, the moon doesn't shrink or grow eventually.\" \"Everything is transient in\na way and perennial in another.\" Kanno doesn't seem to make much sense out of\nMino's isolated words, but maybe it's time that they enjoy the gentle breeze\nand the night sky \u2014 the inexhaustible gifts from nature. Gazing into the sky\nof stars, Kanno indulges in a night's tranquil dreams. There is a set \n    S\n\nof \n    n\n points on a coordinate plane. Kanno starts from a point \n    P\n\nthat can be chosen on the plane. \n    P\n is not added to \n    S\n if it doesn't\nbelong to \n    S\n. Then the following sequence of operations (altogether\ncalled a move) is repeated several times, in the given order: Choose a line\n\n    l\n such that it passes through at least two elements in \n    S\n and\npasses through Kanno's current position. If there are multiple such lines, one\nis chosen equiprobably. Move to one of the points that belong to \n    S\n and\nlie on \n    l\n. The destination is chosen equiprobably among all possible\nones, including Kanno's current position (if it does belong to \n    S\n). There\nare \n    q\n queries each consisting of two integers \n    (t_i, m_i)\n. For each\nquery, you're to help Kanno maximize the probability of the stopping position\nbeing the \n    t_i\n-th element in \n    S\n after \n    m_i\n moves with a proper\nselection of \n    P\n, and output this maximum probability. Note that according\nto rule 1, \n    P\n should belong to at least one line that passes through at\nleast two points from \n    S\n. Input The first line contains a positive\ninteger \n    n\n (\n    2 \n    \u2264 n \n    \u2264 200\n) \u2014 the number of points in\n\n    S\n. The \n    i\n-th of the following \n    n\n lines contains two space-\nseparated integers \n    x_i\n and \n    y_i\n (\n    -10^4 \n    \u2264 x_i, y_i \n    \u2264\n    10^4\n) \u2014 the coordinates of the \n    i\n-th point in \n    S\n. The input\nguarantees that for all \n    1 \n    \u2264 i \n     j \n    \u2264 n\n, \n    (x_i, y_i)\n    \n    \u2260 (x_j, y_j)\n holds. The next line contains a positive integer \n    q\n\n(\n    1 \n    \u2264 q \n    \u2264 200\n) \u2014 the number of queries. Each of the following\n\n    q\n lines contains two space-separated integers \n    t\n and \n    m\n (\n    1\n    \n    \u2264 t_i \n    \u2264 n\n, \n    1 \n    \u2264 m_i \n    \u2264 10^4\n) \u2014 the index of the\ntarget point and the number of moves, respectively. Output Output \n    q\n\nlines each containing a decimal number \u2014 the \n    i\n-th among them denotes the\nmaximum probability of staying on the \n    t_i\n-th point after \n    m_i\n\nsteps, with a proper choice of starting position \n    P\n. Your answer will be\nconsidered correct if each number in your output differs from the\ncorresponding one in jury's answer by at most \n    10^-6\n. Formally, let\nyour answer be \n    a\n, and the jury's answer be \n    b\n. Your answer is\nconsidered correct if \n    |a - b| \n    \u2264 10^-6\n. Example Input 5 0 0 1 3 2 2\n3 1 4 4 10 1 1 2 1 3 1 4 1 5 1 3 2 3 3 3 4 3 5 3 6 Output\n0.50000000000000000000 0.50000000000000000000 0.33333333333333331483\n0.50000000000000000000 0.50000000000000000000 0.18518518518518517491\n0.15226337448559670862 0.14494741655235482414 0.14332164812274550414\n0.14296036624949901017 Note The points in \n    S\n and possible candidates for\nline \n    l\n are depicted in the following figure. For the first query, when\n\n    P = (-1, -3)\n, \n    l\n is uniquely determined to be \n    3x = y\n, and\nthus Kanno will move to \n    (0, 0)\n with a probability of \n    1/2\n.\nFor the third query, when \n    P = (2, 2)\n, \n    l\n is chosen equiprobably\nbetween \n    x + y = 4\n and \n    x = y\n. Kanno will then move to the other\nfour points with a probability of \n    1/2\n    \u00b7\n    1/3 = \n    1/6\n each, or stay at \n    (2, 2)\n with a probability of \n    1/3\n.\n\n",
        "cf_contest_id": 989,
        "cf_index": "E",
        "cf_rating": 2700,
        "difficulty": 0,
        "cf_tags": [
            "dp",
            "geometry",
            "matrices",
            "probabilities"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "5\r\n0 0\r\n1 3\r\n2 2\r\n3 1\r\n4 4\r\n10\r\n1 1\r\n2 1\r\n3 1\r\n4 1\r\n5 1\r\n3 2\r\n3 3\r\n3 4\r\n3 5\r\n3 6\r\n",
                "0.5000000000\r\n0.5000000000\r\n0.3333333333\r\n0.5000000000\r\n0.5000000000\r\n0.1851851852\r\n0.1522633745\r\n0.1449474166\r\n0.1433216481\r\n0.1429603662\r\n"
            ]
        ],
        "private_cases": [
            [
                "2\r\n-1 -1\r\n1 1\r\n3\r\n1 1\r\n1 6\r\n1 10\r\n",
                "0.5000000000\r\n0.5000000000\r\n0.5000000000\r\n"
            ],
            [
                "3\r\n5 -7\r\n-8 0\r\n-8 -2\r\n5\r\n1 8\r\n2 8\r\n2 6\r\n1 7\r\n1 1\r\n",
                "0.3333435059\r\n0.3333435059\r\n0.3334960938\r\n0.3333740234\r\n0.5000000000\r\n"
            ],
            [
                "5\r\n-5156 8988\r\n-5800 -8274\r\n-4295 -3626\r\n-1125 8457\r\n4877 4081\r\n30\r\n3 28\r\n1 75\r\n2 45\r\n2 13\r\n1 12\r\n1 78\r\n1 63\r\n3 34\r\n5 32\r\n1 67\r\n3 14\r\n4 51\r\n5 90\r\n4 65\r\n5 98\r\n5 7\r\n1 3\r\n3 50\r\n4 66\r\n1 65\r\n1 72\r\n4 18\r\n2 20\r\n5 14\r\n3 20\r\n4 7\r\n5 61\r\n2 66\r\n1 60\r\n5 29\r\n",
                "0.2000000000\r\n0.2000000000\r\n0.2000000000\r\n0.2000023200\r\n0.2000061868\r\n0.2000000000\r\n0.2000000000\r\n0.2000000000\r\n0.2000000000\r\n0.2000000000\r\n0.2000008700\r\n0.2000000000\r\n0.2000000000\r\n0.2000000000\r\n0.2000000000\r\n0.2008342743\r\n0.2421875000\r\n0.2000000000\r\n0.2000000000\r\n0.2000000000\r\n0.2000000000\r\n0.2000000172\r\n0.2000000024\r\n0.2000008700\r\n0.2000000024\r\n0.2008342743\r\n0.2000000000\r\n0.2000000000\r\n0.2000000000\r\n0.2000000000\r\n"
            ],
            [
                "3\r\n-2 6\r\n9 -2\r\n-2 -7\r\n30\r\n1 8\r\n1 1\r\n2 9\r\n3 1\r\n2 3\r\n2 1\r\n1 10\r\n3 3\r\n3 4\r\n2 8\r\n1 2\r\n2 10\r\n3 7\r\n2 5\r\n3 2\r\n2 2\r\n2 4\r\n3 9\r\n1 3\r\n3 8\r\n1 5\r\n1 9\r\n1 7\r\n1 6\r\n2 7\r\n3 5\r\n2 6\r\n1 4\r\n3 10\r\n3 6\r\n",
                "0.3333435059\r\n0.5000000000\r\n0.3333358765\r\n0.5000000000\r\n0.3437500000\r\n0.5000000000\r\n0.3333339691\r\n0.3437500000\r\n0.3359375000\r\n0.3333435059\r\n0.3750000000\r\n0.3333339691\r\n0.3333740234\r\n0.3339843750\r\n0.3750000000\r\n0.3750000000\r\n0.3359375000\r\n0.3333358765\r\n0.3437500000\r\n0.3333435059\r\n0.3339843750\r\n0.3333358765\r\n0.3333740234\r\n0.3334960938\r\n0.3333740234\r\n0.3339843750\r\n0.3334960938\r\n0.3359375000\r\n0.3333339691\r\n0.3334960938\r\n"
            ],
            [
                "4\r\n4 -2\r\n4 -1\r\n7 -5\r\n4 5\r\n30\r\n2 10\r\n1 1\r\n2 6\r\n4 3\r\n4 10\r\n3 10\r\n3 8\r\n2 8\r\n4 6\r\n2 4\r\n2 2\r\n1 3\r\n1 5\r\n1 9\r\n3 2\r\n4 1\r\n4 9\r\n3 5\r\n4 5\r\n3 4\r\n3 3\r\n2 3\r\n2 1\r\n4 7\r\n2 5\r\n1 7\r\n3 7\r\n2 7\r\n1 2\r\n4 2\r\n",
                "0.2222232819\r\n0.5000000000\r\n0.2224934896\r\n0.2395833333\r\n0.2222232819\r\n0.3333339691\r\n0.3333435059\r\n0.2222391764\r\n0.2224934896\r\n0.2265625000\r\n0.2916666667\r\n0.2395833333\r\n0.2233072917\r\n0.2222264608\r\n0.3750000000\r\n0.5000000000\r\n0.2222264608\r\n0.3339843750\r\n0.2233072917\r\n0.3359375000\r\n0.3437500000\r\n0.2395833333\r\n0.5000000000\r\n0.2222900391\r\n0.2233072917\r\n0.2222900391\r\n0.3333740234\r\n0.2222900391\r\n0.2916666667\r\n0.2916666667\r\n"
            ]
        ]
    }
]