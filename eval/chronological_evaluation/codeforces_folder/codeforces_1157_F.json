[
    {
        "name": "Maximum Balanced Circle",
        "description": "There are \n    n\n people in a row. The height of the \n    i\n-th person is\n\n    a_i\n. You can choose any subset of these people and try to arrange them\ninto a balanced circle. A balanced circle is such an order of people that the\ndifference between heights of any adjacent people is no more than \n    1\n. For\nexample, let heights of chosen people be \n    [a_i_1, a_i_2, \n    \u2026,\n    a_i_k]\n, where \n    k\n is the number of people you choose. Then the\ncondition \n    |a_i_j - a_i_j + 1| \n    \u2264 1\n should be satisfied for all\n\n    j\n from \n    1\n to \n    k-1\n and the condition \n    |a_i_1 - a_i_k|\n    \n    \u2264 1\n should be also satisfied. \n    |x|\n means the absolute value of\n\n    x\n. It is obvious that the circle consisting of one person is balanced.\nYour task is to choose the maximum number of people and construct a balanced\ncircle consisting of all chosen people. It is obvious that the circle\nconsisting of one person is balanced so the answer always exists. Input The\nfirst line of the input contains one integer \n    n\n (\n    1 \n    \u2264 n \n    \u2264 2\n    \n    \u00b7 10^5\n) \u2014 the number of people. The second line of the input contains\n\n    n\n integers \n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i \n    \u2264 2 \n    \u00b7\n    10^5\n), where \n    a_i\n is the height of the \n    i\n-th person. Output In\nthe first line of the output print \n    k\n \u2014 the number of people in the\nmaximum balanced circle. In the second line print \n    k\n integers \n    res_1,\n    res_2, \n    \u2026, res_k\n, where \n    res_j\n is the height of the \n    j\n-th\nperson in the maximum balanced circle. The condition \n    |res_j - res_j +\n    1| \n    \u2264 1\n should be satisfied for all \n    j\n from \n    1\n to \n    k-1\n\nand the condition \n    |res_1 - res_k| \n    \u2264 1\n should be also satisfied.\nExamples Input 7 4 3 5 1 2 2 1 Output 5 2 1 1 2 3 Input 5 3 7 5 1 5 Output 2 5\n5 Input 3 5 1 4 Output 2 4 5 Input 7 2 2 3 2 1 2 2 Output 7 1 2 2 2 2 3 2\n\n",
        "cf_contest_id": 1157,
        "cf_index": "F",
        "cf_rating": 2000,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "dp",
            "greedy",
            "two pointers"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "7\r\n4 3 5 1 2 2 1\r\n",
                "5\r\n1 2 3 2 1 "
            ],
            [
                "5\r\n3 7 5 1 5\r\n",
                "2\r\n5 5 "
            ],
            [
                "3\r\n5 1 4\r\n",
                "2\r\n4 5 "
            ],
            [
                "7\r\n2 2 3 2 1 2 2\r\n",
                "7\r\n1 2 3 2 2 2 2 "
            ]
        ],
        "private_cases": [
            [
                "1\r\n1\r\n",
                "1\r\n1 "
            ],
            [
                "10\r\n2 3 6 7 4 6 3 2 6 6\r\n",
                "5\r\n2 3 4 3 2 "
            ],
            [
                "5\r\n20 21 22 23 24\r\n",
                "2\r\n20 21 "
            ],
            [
                "4\r\n200000 200000 200000 200000\r\n",
                "4\r\n200000 200000 200000 200000 "
            ],
            [
                "3\r\n200000 200000 200000\r\n",
                "3\r\n200000 200000 200000 "
            ],
            [
                "2\r\n200000 200000\r\n",
                "2\r\n200000 200000 "
            ],
            [
                "1\r\n200000\r\n",
                "1\r\n200000 "
            ]
        ]
    }
]