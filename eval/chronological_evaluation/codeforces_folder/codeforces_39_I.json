[
    {
        "name": "Tram",
        "description": "In a Berland city S*** there is a tram engine house and only one tram. Three\npeople work in the house \u2014 the tram driver, the conductor and the head of the\nengine house. The tram used to leave the engine house every morning and drove\nalong his loop route. The tram needed exactly c minutes to complete the route.\nThe head of the engine house controlled the tram\u2019s movement, going outside\nevery c minutes when the tram drove by the engine house, and the head left the\ndriver without a bonus if he was even one second late. It used to be so.\nAfterwards the Berland Federal Budget gave money to make more tramlines in\nS***, and, as it sometimes happens, the means were used as it was planned. The\ntramlines were rebuilt and as a result they turned into a huge network. The\nprevious loop route may have been destroyed. S*** has n crossroads and now m\ntramlines that links the pairs of crossroads. The traffic in Berland is one\nway so the tram can move along each tramline only in one direction. There may\nbe several tramlines between two crossroads, which go same way or opposite\nways. Every tramline links two different crossroads and for each crossroad\nthere is at least one outgoing tramline. So, the tramlines were built but for\nsome reason nobody gave a thought to increasing the number of trams in S***!\nThe tram continued to ride alone but now the driver had an excellent\nopportunity to get rid of the unending control of the engine house head. For\nnow due to the tramline network he could choose the route freely! Now at every\ncrossroad the driver can arbitrarily choose the way he can go. The tram may\neven go to the parts of S*** from where it cannot return due to one way\ntraffic. The driver is not afraid of the challenge: at night, when the city is\nasleep, he can return to the engine house safely, driving along the tramlines\nin the opposite direction. The city people were rejoicing for some of the had\nbeen waiting for the tram to appear on their streets for several years.\nHowever, the driver\u2019s behavior enraged the engine house head. Now he tries to\ncarry out an insidious plan of installing cameras to look after the rebellious\ntram. The plan goes as follows. The head of the engine house wants to install\ncameras at some crossroads, to choose a period of time t and every t minutes\nturn away from the favourite TV show to check where the tram is. Also the head\nof the engine house wants at all moments of time, divisible by t, and only at\nsuch moments the tram to appear on a crossroad under a camera. There must be a\ncamera on the crossroad by the engine house to prevent possible terrorist\nattacks on the engine house head. Among all the possible plans the engine\nhouse head chooses the plan with the largest possible value of t (as he hates\nbeing distracted from his favourite TV show but he has to). If such a plan is\nnot unique, pick the plan that requires the minimal possible number of\ncameras. Find such a plan. Input The first line contains integers n and m (2 \u2264\nn, m \u2264 10^5) \u2014 the number of crossroads and tramlines in S*** respectively.\nThe next m lines contain the descriptions of the tramlines in \"u v\" format,\nwhere u is the initial tramline crossroad and v is its final crossroad. The\ncrossroads are numbered with integers from 1 to n, and the engine house is at\nthe crossroad number 1. Output In the first line output the value of t. In the\nnext line output the value of k \u2014 the required number of the cameras. In the\nnext line output space-separated numbers of the crossroads, where the cameras\nshould be installed. Output the numbers in increasing order. Examples Input 4\n5 1 2 2 3 3 4 4 1 1 4 Output 2 2 1 3\n\n",
        "cf_contest_id": 39,
        "cf_index": "I",
        "cf_rating": 2500,
        "difficulty": 0,
        "cf_tags": [],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 64.0,
        "public_cases": [
            [
                "4 5\r\n1 2\r\n2 3\r\n3 4\r\n4 1\r\n1 4\r\n",
                "2\r\n2\r\n1 3 "
            ]
        ],
        "private_cases": [
            [
                "2 2\r\n1 2\r\n2 1\r\n",
                "2\r\n1\r\n1 "
            ],
            [
                "3 3\r\n2 1\r\n3 2\r\n1 3\r\n",
                "3\r\n1\r\n1 "
            ],
            [
                "3 4\r\n1 2\r\n2 1\r\n2 3\r\n3 1\r\n",
                "1\r\n3\r\n1 2 3 "
            ],
            [
                "4 4\r\n1 2\r\n2 3\r\n3 4\r\n4 2\r\n",
                "3\r\n2\r\n1 4 "
            ],
            [
                "5 6\r\n1 2\r\n2 3\r\n3 4\r\n4 2\r\n2 5\r\n5 1\r\n",
                "3\r\n2\r\n1 4 "
            ],
            [
                "5 7\r\n1 2\r\n2 3\r\n2 4\r\n2 5\r\n4 3\r\n5 3\r\n3 1\r\n",
                "1\r\n5\r\n1 2 3 4 5 "
            ],
            [
                "5 7\r\n1 2\r\n2 3\r\n2 4\r\n2 5\r\n4 3\r\n5 4\r\n3 1\r\n",
                "1\r\n5\r\n1 2 3 4 5 "
            ],
            [
                "7 7\r\n1 2\r\n2 5\r\n5 1\r\n4 3\r\n3 1\r\n6 7\r\n7 6\r\n",
                "3\r\n1\r\n1 "
            ],
            [
                "6 7\r\n1 2\r\n2 6\r\n6 5\r\n5 1\r\n5 4\r\n4 3\r\n3 6\r\n",
                "4\r\n2\r\n1 4 "
            ],
            [
                "7 7\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 6\r\n6 7\r\n7 3\r\n",
                "5\r\n2\r\n1 6 "
            ],
            [
                "10 15\r\n7 5\r\n3 7\r\n8 5\r\n4 10\r\n5 6\r\n7 8\r\n4 1\r\n6 7\r\n10 6\r\n10 5\r\n1 3\r\n9 8\r\n9 7\r\n2 5\r\n4 3\r\n",
                "1\r\n6\r\n1 3 5 6 7 8 "
            ],
            [
                "10 20\r\n4 1\r\n6 7\r\n10 7\r\n3 4\r\n7 4\r\n8 9\r\n4 10\r\n10 9\r\n5 9\r\n4 9\r\n10 6\r\n4 10\r\n1 5\r\n7 5\r\n7 10\r\n4 9\r\n2 10\r\n9 2\r\n1 2\r\n6 2\r\n",
                "1\r\n8\r\n1 2 4 5 6 7 9 10 "
            ],
            [
                "10 23\r\n9 10\r\n2 10\r\n1 3\r\n2 10\r\n7 4\r\n5 4\r\n5 6\r\n5 10\r\n8 2\r\n7 9\r\n7 1\r\n6 10\r\n9 8\r\n2 9\r\n1 9\r\n3 5\r\n10 5\r\n4 7\r\n9 10\r\n3 6\r\n10 2\r\n5 6\r\n6 2\r\n",
                "1\r\n10\r\n1 2 3 4 5 6 7 8 9 10 "
            ],
            [
                "15 19\r\n5 3\r\n10 14\r\n12 11\r\n7 4\r\n11 6\r\n8 9\r\n6 13\r\n15 2\r\n4 10\r\n12 11\r\n1 9\r\n2 3\r\n9 12\r\n14 13\r\n10 13\r\n3 8\r\n13 14\r\n15 13\r\n13 11\r\n",
                "1\r\n7\r\n1 6 9 11 12 13 14 "
            ],
            [
                "10 20\r\n4 3\r\n9 3\r\n7 9\r\n4 3\r\n3 10\r\n6 5\r\n1 4\r\n7 9\r\n1 4\r\n5 9\r\n3 10\r\n2 4\r\n5 9\r\n1 4\r\n8 6\r\n2 4\r\n7 9\r\n10 7\r\n4 3\r\n3 6\r\n",
                "4\r\n3\r\n1 5 7 "
            ],
            [
                "20 32\r\n16 17\r\n16 17\r\n17 6\r\n9 5\r\n6 14\r\n3 9\r\n9 5\r\n10 1\r\n17 6\r\n8 11\r\n4 7\r\n15 20\r\n9 7\r\n1 19\r\n10 1\r\n7 18\r\n20 13\r\n2 17\r\n17 6\r\n13 17\r\n20 12\r\n13 17\r\n3 4\r\n5 8\r\n6 14\r\n19 3\r\n12 17\r\n18 20\r\n6 14\r\n13 17\r\n14 10\r\n11 12\r\n",
                "12\r\n1\r\n1 "
            ],
            [
                "20 45\r\n20 1\r\n7 8\r\n13 6\r\n7 12\r\n14 7\r\n14 7\r\n2 12\r\n15 5\r\n10 15\r\n10 15\r\n13 6\r\n8 10\r\n13 4\r\n6 14\r\n1 15\r\n11 12\r\n2 12\r\n19 16\r\n7 12\r\n13 4\r\n18 5\r\n20 10\r\n5 9\r\n19 16\r\n14 7\r\n2 8\r\n11 8\r\n16 4\r\n8 1\r\n2 12\r\n18 5\r\n10 18\r\n20 1\r\n7 20\r\n18 5\r\n15 5\r\n9 13\r\n1 15\r\n3 6\r\n3 4\r\n12 10\r\n4 14\r\n17 8\r\n20 10\r\n16 4\r\n",
                "9\r\n2\r\n1 10 "
            ],
            [
                "19 19\r\n7 3\r\n8 9\r\n19 6\r\n14 18\r\n11 4\r\n3 12\r\n13 11\r\n6 13\r\n4 5\r\n18 8\r\n9 16\r\n12 2\r\n5 17\r\n15 7\r\n10 19\r\n16 1\r\n2 10\r\n17 14\r\n1 15\r\n",
                "19\r\n1\r\n1 "
            ],
            [
                "20 60\r\n3 18\r\n8 16\r\n4 10\r\n13 3\r\n16 4\r\n17 5\r\n16 1\r\n1 8\r\n9 2\r\n20 12\r\n7 4\r\n7 4\r\n20 12\r\n16 17\r\n14 15\r\n14 1\r\n7 18\r\n15 12\r\n15 5\r\n19 17\r\n5 16\r\n12 2\r\n9 6\r\n16 17\r\n20 11\r\n13 3\r\n16 18\r\n17 13\r\n12 7\r\n18 8\r\n20 5\r\n11 7\r\n16 20\r\n1 5\r\n10 7\r\n10 16\r\n4 13\r\n18 10\r\n3 18\r\n5 16\r\n10 14\r\n3 1\r\n18 8\r\n11 19\r\n17 5\r\n4 8\r\n6 4\r\n11 7\r\n2 20\r\n9 7\r\n6 4\r\n4 9\r\n12 6\r\n1 12\r\n5 19\r\n4 11\r\n16 1\r\n15 8\r\n11 7\r\n7 18\r\n",
                "3\r\n6\r\n1 4 15 17 18 20 "
            ],
            [
                "31 32\r\n7 5\r\n29 8\r\n14 10\r\n8 7\r\n4 23\r\n6 24\r\n5 18\r\n25 31\r\n9 17\r\n3 27\r\n21 1\r\n18 21\r\n22 13\r\n28 25\r\n13 3\r\n26 16\r\n23 14\r\n30 12\r\n20 4\r\n17 6\r\n24 30\r\n12 2\r\n31 2\r\n2 19\r\n19 11\r\n10 22\r\n1 9\r\n2 20\r\n15 29\r\n27 28\r\n16 15\r\n11 26\r\n",
                "1\r\n31\r\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 "
            ],
            [
                "65 68\r\n19 62\r\n50 7\r\n58 64\r\n59 61\r\n36 1\r\n6 60\r\n27 5\r\n43 27\r\n29 22\r\n11 40\r\n9 35\r\n56 53\r\n39 32\r\n21 51\r\n26 31\r\n55 36\r\n23 50\r\n3 2\r\n61 47\r\n42 29\r\n2 57\r\n65 23\r\n54 55\r\n34 37\r\n57 26\r\n49 6\r\n14 16\r\n7 63\r\n19 3\r\n63 58\r\n32 49\r\n24 33\r\n10 12\r\n20 8\r\n53 43\r\n4 42\r\n18 14\r\n19 13\r\n60 48\r\n17 24\r\n31 25\r\n5 20\r\n38 9\r\n62 52\r\n37 19\r\n40 59\r\n35 19\r\n51 19\r\n64 39\r\n16 41\r\n41 38\r\n52 56\r\n15 19\r\n46 28\r\n44 11\r\n12 45\r\n48 21\r\n25 46\r\n13 54\r\n22 30\r\n8 10\r\n47 34\r\n1 44\r\n19 65\r\n33 15\r\n30 17\r\n28 4\r\n45 18\r\n",
                "2\r\n34\r\n1 3 4 5 6 8 11 12 13 15 16 18 24 29 30 31 32 35 37 38 43 46 47 48 50 51 55 56 57 59 62 63 64 65 "
            ]
        ]
    }
]