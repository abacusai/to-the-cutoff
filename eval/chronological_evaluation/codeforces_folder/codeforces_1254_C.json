[
    {
        "name": "Point Ordering",
        "description": "This is an interactive problem. Khanh has \n    n\n points on the Cartesian\nplane, denoted by \n    a_1, a_2, \n    \u2026, a_n\n. All points' coordinates are\nintegers between \n    -10^9\n and \n    10^9\n, inclusive. No three points are\ncollinear. He says that these points are vertices of a convex polygon; in\nother words, there exists a permutation \n    p_1, p_2, \n    \u2026, p_n\n of\nintegers from \n    1\n to \n    n\n such that the polygon \n    a_p_1 a_p_2\n    \u2026 a_p_n\n is convex and vertices are listed in counter-clockwise\norder. Khanh gives you the number \n    n\n, but hides the coordinates of his\npoints. Your task is to guess the above permutation by asking multiple\nqueries. In each query, you give Khanh \n    4\n integers \n    t\n, \n    i\n,\n\n    j\n, \n    k\n; where either \n    t = 1\n or \n    t = 2\n; and \n    i\n,\n\n    j\n, \n    k\n are three distinct indices from \n    1\n to \n    n\n,\ninclusive. In response, Khanh tells you: if \n    t = 1\n, the area of the\ntriangle \n    a_ia_ja_k\n multiplied by \n    2\n. if \n    t = 2\n, the sign of\nthe cross product of two vectors \n    a_ia_j\n and\n\n    a_ia_k\n. Recall that the cross product of vector\n\n    a = (x_a, y_a)\n and vector \n    b =\n    (x_b, y_b)\n is the integer \n    x_a \n    \u00b7 y_b - x_b \n    \u00b7 y_a\n. The sign\nof a number is \n    1\n it it is positive, and \n    -1\n otherwise. It can be\nproven that the cross product obtained in the above queries can not be\n\n    0\n. You can ask at most \n    3 \n    \u00b7 n\n queries. Please note that Khanh\nfixes the coordinates of his points and does not change it while answering\nyour queries. You do not need to guess the coordinates. In your permutation\n\n    a_p_1a_p_2\n    \u2026 a_p_n\n, \n    p_1\n should be equal to \n    1\n and\nthe indices of vertices should be listed in counter-clockwise order.\nInteraction You start the interaction by reading \n    n\n (\n    3 \n    \u2264 n \n    \u2264\n    1\n     000\n) \u2014 the number of vertices. To ask a query, write \n    4\n integers\n\n    t\n, \n    i\n, \n    j\n, \n    k\n (\n    1 \n    \u2264 t \n    \u2264 2\n, \n    1 \n    \u2264 i,\n    j, k \n    \u2264 n\n) in a separate line. \n    i\n, \n    j\n and \n    k\n should be\ndistinct. Then read a single integer to get the answer to this query, as\nexplained above. It can be proven that the answer of a query is always an\ninteger. When you find the permutation, write a number \n    0\n. Then write\n\n    n\n integers \n    p_1, p_2, \n    \u2026, p_n\n in the same line. After\nprinting a query do not forget to output end of line and flush the output.\nOtherwise, you will get Idleness limit exceeded. To do this, use:\nfflush(stdout) or cout.flush() in C++; System.out.flush() in Java;\nflush(output) in Pascal; stdout.flush() in Python; see documentation for other\nlanguages.Hack format To hack, use the following format: The first line\ncontains an integer \n    n\n (\n    3 \n    \u2264 n \n    \u2264 1\n     000\n) \u2014 the number of\nvertices. The \n    i\n-th of the next \n    n\n lines contains two integers\n\n    x_i\n and \n    y_i\n (\n    -10^9 \n    \u2264 x_i, y_i \n    \u2264 10^9\n) \u2014 the\ncoordinate of the point \n    a_i\n. Example Input 6 15 -1 1 Output 1 1 4 6 2 1\n5 6 2 2 1 4 0 1 3 4 2 6 5 Note The image below shows the hidden polygon in the\nexample: The interaction in the example goes as below: Contestant reads \n    n =\n    6\n. Contestant asks a query with \n    t = 1\n, \n    i = 1\n, \n    j = 4\n, \n    k\n    = 6\n. Jury answers \n    15\n. The area of the triangle \n    A_1A_4A_6\n is\n\n    7.5\n. Note that the answer is two times the area of the triangle.\nContestant asks a query with \n    t = 2\n, \n    i = 1\n, \n    j = 5\n, \n    k =\n    6\n. Jury answers \n    -1\n. The cross product of \n    A_1A_5\n    = (2, 2)\n and \n    A_1A_6 = (4, 1)\n is \n    -2\n. The sign\nof \n    -2\n is \n    -1\n. Contestant asks a query with \n    t = 2\n, \n    i =\n    2\n, \n    j = 1\n, \n    k = 4\n. Jury answers \n    1\n. The cross product of\n\n    A_2A_1 = (-5, 2)\n and \n    A_2A_4 =\n    (-2, -1)\n is \n    1\n. The sign of \n    1\n is \n    1\n. Contestant says that\nthe permutation is \n    (1, 3, 4, 2, 6, 5)\n.\n\n",
        "cf_contest_id": 1254,
        "cf_index": "C",
        "cf_rating": 2300,
        "difficulty": 0,
        "cf_tags": [
            "constructive algorithms",
            "geometry",
            "interactive",
            "math"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "6\r\n-2 1\r\n3 -1\r\n-2 -1\r\n1 -2\r\n0 3\r\n2 2\r\n",
                "1 3 4 2 6 5 \r\n"
            ]
        ],
        "private_cases": [
            [
                "3\r\n0 0\r\n0 1\r\n1 0\r\n",
                "1 3 2 \r\n"
            ],
            [
                "4\r\n-1000000000 1000000000\r\n-1000000000 -1000000000\r\n1000000000 1000000000\r\n1000000000 -1000000000\r\n",
                "1 2 4 3 \r\n"
            ],
            [
                "3\r\n-14 -6\r\n-6 -2000\r\n-2000 -14\r\n",
                "1 3 2 \r\n"
            ],
            [
                "3\r\n-6 -2000\r\n-14 -6\r\n-2000 -14\r\n",
                "1 2 3 \r\n"
            ],
            [
                "4\r\n0 1\r\n4 3\r\n2 0\r\n2 4\r\n",
                "1 3 2 4 \r\n"
            ],
            [
                "4\r\n4 6\r\n6 2\r\n2 1\r\n1 4\r\n",
                "1 4 3 2 \r\n"
            ],
            [
                "4\r\n2 1\r\n6 2\r\n1 4\r\n4 6\r\n",
                "1 2 4 3 \r\n"
            ],
            [
                "4\r\n2 1\r\n1 4\r\n6 2\r\n4 6\r\n",
                "1 3 4 2 \r\n"
            ],
            [
                "4\r\n1 4\r\n6 2\r\n2 1\r\n4 6\r\n",
                "1 3 2 4 \r\n"
            ],
            [
                "4\r\n2 1\r\n4 6\r\n6 2\r\n1 4\r\n",
                "1 3 2 4 \r\n"
            ],
            [
                "4\r\n6 2\r\n4 6\r\n1 4\r\n2 1\r\n",
                "1 2 3 4 \r\n"
            ],
            [
                "6\r\n-30 25\r\n-10 -21\r\n-19 -19\r\n18 12\r\n-37 5\r\n-24 30\r\n",
                "1 5 3 2 4 6 \r\n"
            ],
            [
                "10\r\n-5935 36258\r\n11955 21535\r\n-4582 36499\r\n-12734 23353\r\n11531 22804\r\n-9423 33388\r\n12997 18102\r\n7469 3388\r\n9239 4773\r\n275 35134\r\n",
                "1 6 4 8 9 7 2 5 10 3 \r\n"
            ],
            [
                "6\r\n1 0\r\n6 11\r\n12 8\r\n4 9\r\n12 9\r\n10 11\r\n",
                "1 3 5 6 2 4 \r\n"
            ],
            [
                "7\r\n-12 1\r\n-5 12\r\n6 8\r\n-12 5\r\n6 3\r\n3 0\r\n2 12\r\n",
                "1 6 5 3 7 2 4 \r\n"
            ],
            [
                "7\r\n-5 11\r\n6 2\r\n1 11\r\n-9 2\r\n4 0\r\n6 6\r\n-9 7\r\n",
                "1 7 4 5 2 6 3 \r\n"
            ],
            [
                "7\r\n6 9\r\n9 3\r\n-6 1\r\n-6 4\r\n-1 9\r\n9 6\r\n6 0\r\n",
                "1 5 4 3 7 2 6 \r\n"
            ],
            [
                "8\r\n9 19\r\n25 16\r\n25 11\r\n12 23\r\n23 20\r\n23 7\r\n2 0\r\n10 21\r\n",
                "1 7 6 3 2 5 4 8 \r\n"
            ],
            [
                "7\r\n13 22\r\n4 30\r\n-4 24\r\n2 0\r\n-4 25\r\n-1 28\r\n6 29\r\n",
                "1 7 2 6 5 3 4 \r\n"
            ],
            [
                "4\r\n149328 98373\r\n20233 218324\r\n113190 236356\r\n132808 226029\r\n",
                "1 4 3 2 \r\n"
            ],
            [
                "5\r\n-221289 64633\r\n-39224 -142508\r\n-23863 185571\r\n-153741 -83876\r\n-125483 -105552\r\n",
                "1 4 5 2 3 \r\n"
            ],
            [
                "8\r\n-99528875 152490014\r\n62979145 197504946\r\n-39926892 203962496\r\n-96638685 157089493\r\n-10759455 215912563\r\n90218741 177604414\r\n-63688828 191331171\r\n-32562563 207332999\r\n",
                "1 6 2 5 8 3 7 4 \r\n"
            ],
            [
                "5\r\n-35495874 268301853\r\n-112949492 198172825\r\n-92973951 163428234\r\n-71084332 245493347\r\n46254386 269927864\r\n",
                "1 4 2 3 5 \r\n"
            ],
            [
                "9\r\n-210158842 125819668\r\n-193945436 30476189\r\n-138930826 212939678\r\n83315264 98585717\r\n73698673 127271193\r\n35703289 189836798\r\n-222710060 77917334\r\n-207371217 45303944\r\n-85706913 238608211\r\n",
                "1 7 8 2 4 5 6 9 3 \r\n"
            ],
            [
                "10\r\n-34591022 1123409\r\n-20258837 257627036\r\n30782263 270436315\r\n22701469 270289165\r\n-83508214 172064635\r\n-89439933 157668610\r\n-57775367 34460799\r\n-91764516 142432260\r\n135460041 105363752\r\n119062007 243181395\r\n",
                "1 9 10 3 4 2 5 6 8 7 \r\n"
            ],
            [
                "10\r\n56443591 211465973\r\n-12717602 228519544\r\n116971445 153488307\r\n5482614 -28821164\r\n97412071 64590155\r\n113195430 91108743\r\n-71715657 -6301815\r\n-35786392 -19992142\r\n-122958708 152030558\r\n103952760 175504186\r\n",
                "1 2 9 7 8 4 5 6 3 10 \r\n"
            ],
            [
                "52\r\n692 518\r\n-328 483\r\n-344 619\r\n715 574\r\n-69 1029\r\n-300 396\r\n669 803\r\n612 889\r\n-341 675\r\n702 541\r\n-209 247\r\n324 -96\r\n100 1116\r\n-343 601\r\n664 812\r\n-205 242\r\n-342 585\r\n227 1141\r\n606 896\r\n-314 760\r\n-164 958\r\n649 836\r\n364 1101\r\n-344 650\r\n-320 455\r\n-219 908\r\n699 534\r\n-334 704\r\n-335 517\r\n-265 848\r\n-338 688\r\n478 1024\r\n278 1132\r\n-343 663\r\n-136 981\r\n-311 767\r\n176 1141\r\n125 1126\r\n683 499\r\n724 634\r\n724 609\r\n261 -84\r\n-191 225\r\n637 854\r\n-235 890\r\n676 788\r\n271 1134\r\n-330 491\r\n-204 922\r\n-305 409\r\n-295 384\r\n-167 198\r\n",
                "1 27 10 4 41 40 46 7 15 22 44 8 19 32 23 33 47 18 37 38 13 5 35 21 49 26 45 30 36 20 28 31 9 34 24 3 14 17 29 48 2 25 50 6 51 11 16 43 52 42 12 39 \r\n"
            ]
        ]
    }
]