[
    {
        "name": "Make It Permutation",
        "description": "You have an integer array \n    a\n of length \n    n\n. There are two kinds of\noperations you can make. Remove an integer from \n    a\n. This operation costs\n\n    c\n. Insert an arbitrary positive integer \n    x\n to any position of\n\n    a\n (to the front, to the back, or between any two consecutive elements).\nThis operation costs \n    d\n.You want to make the final array a permutation of\nany positive length. Please output the minimum cost of doing that. Note that\nyou can make the array empty during the operations, but the final array must\ncontain at least one integer. A permutation of length \n    n\n is an array\nconsisting of \n    n\n distinct integers from \n    1\n to \n    n\n in arbitrary\norder. For example, \n    [2,3,1,5,4]\n is a permutation, but \n    [1,2,2]\n is\nnot a permutation (\n    2\n appears twice in the array), and \n    [1,3,4]\n is\nalso not a permutation (\n    n=3\n but there is \n    4\n in the array). Input\nEach test contains multiple test cases. The first line contains a single\ninteger \n    t\n (\n    1 \n    \u2264 t \n    \u2264 10^4\n) \u2014 the number of test cases. Their\ndescription follows. The first line of each test case contains three integers\n\n    n\n, \n    c\n, \n    d\n (\n    1 \n    \u2264 n \n    \u2264 10^5\n, \n    1 \n    \u2264 c,d \n    \u2264\n    10^9\n). The second line of each test case contains \n    n\n integers\n\n    a_1, a_2, \n    \u2026, a_n\n (\n    1 \n    \u2264 a_i\n    \u2264 10^9\n). It is\nguaranteed that the sum of \n    n\n over all test cases does not exceed \n    2\n    \n    \u00b7 10^5\n. Output For each test case, output in one line the minimum\ncost to make the final array a permutation. Example Input 8 3 3 3 1 2 3 5 1 5\n1 2 3 5 6 5 2 3 1 1 1 3 3 5 1 10 2 4 6 8 10 6 2 8 7 3 5 4 4 8 4 10 1 1 2 6 7 4\n3 3 2 5 8 7 2 1000000000 1 1000000000 1 Output 0 2 8 14 20 3 12 999999998 Note\nIn the first test case, the array is already a permutation, so there's no need\nfor operations. In the second test case, we can remove numbers \n    5\n,\n\n    6\n to get the permutation \n    [1,2,3]\n in cost \n    2\n. Note that we can\nalso get a permutation by inserting a number \n    4\n, but it costs \n    5\n. In\nthe third test case, we can just remove all the numbers except for the first\nnumber \n    1\n. It costs \n    8\n, and the final array is \n    [1]\n, which is a\npermutation of length \n    1\n. In the fourth test case, we can remove all the\nnumbers except for \n    2\n, and insert a number \n    1\n to the first position.\nIt costs \n    4+10=14\n, and the final array is \n    [1,2]\n, which is a\npermutation of length \n    2\n.\n\n",
        "cf_contest_id": 1810,
        "cf_index": "C",
        "cf_rating": 1300,
        "difficulty": 0,
        "cf_tags": [
            "brute force",
            "greedy",
            "sortings"
        ],
        "time_limit_seconds": 1.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "8\r\n3 3 3\r\n1 2 3\r\n5 1 5\r\n1 2 3 5 6\r\n5 2 3\r\n1 1 1 3 3\r\n5 1 10\r\n2 4 6 8 10\r\n6 2 8\r\n7 3 5 4 4 8\r\n4 10 1\r\n1 2 6 7\r\n4 3 3\r\n2 5 8 7\r\n2 1000000000 1\r\n1000000000 1\r\n",
                "0\r\n2\r\n8\r\n14\r\n20\r\n3\r\n12\r\n999999998\r\n"
            ]
        ],
        "private_cases": []
    }
]