[
    {
        "name": "Inna and Binary Logic",
        "description": "Inna is fed up with jokes about female logic. So she started using binary\nlogic instead. Inna has an array of n elements a1[1], a1[2], ..., a1[n]. Girl\nlikes to train in her binary logic, so she does an exercise consisting of n\nstages: on the first stage Inna writes out all numbers from array a1, on the\ni-th (i \u2265 2) stage girl writes all elements of array ai, which consists of n -\ni + 1 integers; the k-th integer of array ai is defined as follows: ai[k] = ai\n- 1[k] AND ai - 1[k + 1]. Here AND is bit-wise binary logical operation. Dima\ndecided to check Inna's skill. He asks Inna to change array, perform the\nexercise and say the sum of all elements she wrote out during the current\nexercise. Help Inna to answer the questions! Input The first line contains two\nintegers n and m (1 \u2264 n, m \u2264 10^5) \u2014 size of array a1 and number of Dima's\nquestions. Next line contains n integers a1[1], a1[2], ..., a1[n] (0 \u2264 ai \u2264\n10^5) \u2014 initial array elements. Each of next m lines contains two integers \u2014\nDima's question description. Each question consists of two integers pi, vi (1\n\u2264 pi \u2264 n; 0 \u2264 vi \u2264 10^5). For this question Inna should make a1[pi] equals vi,\nand then perform the exercise. Please, note that changes are saved from\nquestion to question. Output For each question print Inna's answer on a single\nline. Examples Input 3 4 1 1 1 1 1 2 2 3 2 1 2 Output 6 4 7 12\n\n",
        "cf_contest_id": 400,
        "cf_index": "E",
        "cf_rating": 2100,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "bitmasks",
            "data structures"
        ],
        "time_limit_seconds": 3.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "3 4\r\n1 1 1\r\n1 1\r\n2 2\r\n3 2\r\n1 2\r\n",
                "6\r\n4\r\n7\r\n12\r\n"
            ]
        ],
        "private_cases": [
            [
                "1 1\r\n0\r\n1 0\r\n",
                "0\r\n"
            ],
            [
                "1 10\r\n1\r\n1 9\r\n1 10\r\n1 2\r\n1 0\r\n1 8\r\n1 9\r\n1 9\r\n1 0\r\n1 6\r\n1 8\r\n",
                "9\r\n10\r\n2\r\n0\r\n8\r\n9\r\n9\r\n0\r\n6\r\n8\r\n"
            ]
        ]
    }
]