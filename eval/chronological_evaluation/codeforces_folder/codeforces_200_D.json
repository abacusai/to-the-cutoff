[
    {
        "name": "Programming Language",
        "description": "Recently, Valery have come across an entirely new programming language. Most\nof all the language attracted him with template functions and procedures. Let\nus remind you that templates are tools of a language, designed to encode\ngeneric algorithms, without reference to some parameters (e.g., data types,\nbuffer sizes, default values). Valery decided to examine template procedures\nin this language in more detail. The description of a template procedure\nconsists of the procedure name and the list of its parameter types. The\ngeneric type T parameters can be used as parameters of template procedures. A\nprocedure call consists of a procedure name and a list of variable parameters.\nLet's call a procedure suitable for this call if the following conditions are\nfulfilled: its name equals to the name of the called procedure; the number of\nits parameters equals to the number of parameters of the procedure call; the\ntypes of variables in the procedure call match the corresponding types of its\nparameters. The variable type matches the type of a parameter if the parameter\nhas a generic type T or the type of the variable and the parameter are the\nsame. You are given a description of some set of template procedures. You are\nalso given a list of variables used in the program, as well as direct\nprocedure calls that use the described variables. For each call you need to\ncount the number of procedures that are suitable for this call. Input The\nfirst line contains a single integer n (1 \u2264 n \u2264 1000) \u2014 the number of template\nprocedures. The next n lines contain the description of the procedures\nspecified in the following format: \"void procedureName (type_1, type_2, ...,\ntype_t)\" (1 \u2264 t \u2264 5), where void is the keyword, procedureName is the\nprocedure name, type_i is the type of the next parameter. Types of language\nparameters can be \"int\", \"string\", \"double\", and the keyword \"T\", which\ndenotes the generic type. The next line contains a single integer m (1 \u2264 m \u2264\n1000) \u2014 the number of used variables. Next m lines specify the description of\nthe variables in the following format: \"type variableName\", where type is the\ntype of variable that can take values \"int\", \"string\", \"double\", variableName\n\u2014 the name of the variable. The next line contains a single integer k (1 \u2264 k \u2264\n1000) \u2014 the number of procedure calls. Next k lines specify the procedure\ncalls in the following format: \"procedureName (var_1, var_2, ..., var_t)\" (1 \u2264\nt \u2264 5), where procedureName is the name of the procedure, var_i is the name of\na variable. The lines describing the variables, template procedures and their\ncalls may contain spaces at the beginning of the line and at the end of the\nline, before and after the brackets and commas. Spaces may be before and after\nkeyword void. The length of each input line does not exceed 100 characters.\nThe names of variables and procedures are non-empty strings of lowercase\nEnglish letters and numbers with lengths of not more than 10 characters. Note\nthat this is the only condition at the names. Only the specified variables are\nused in procedure calls. The names of the variables are distinct. No two\nprocedures are the same. Two procedures are the same, if they have identical\nnames and identical ordered sets of types of their parameters. Output On each\nof k lines print a single number, where the i-th number stands for the number\nof suitable template procedures for the i-th call. Examples Input 4 void\nf(int,T) void f(T, T) void foo123 ( int, double, string,string ) void\np(T,double) 3 int a string s double x123 5 f(a, a) f(s,a ) foo (a,s,s) f ( s\n,x123) proc(a) Output 2 1 0 1 0 Input 6 void f(string,double,int) void f(int)\nvoid f ( T ) void procedure(int,double) void f (T, double,int) void f(string,\nT,T) 4 int a int x string t double val 5 f(t, a, a) f(t,val,a) f(val,a, val)\nsolve300(val, val) f (x) Output 1 3 0 0 2\n\n",
        "cf_contest_id": 200,
        "cf_index": "D",
        "cf_rating": 1800,
        "difficulty": 0,
        "cf_tags": [
            "binary search",
            "brute force",
            "expression parsing",
            "implementation"
        ],
        "time_limit_seconds": 2.0,
        "memory_limit_bytes": 256.0,
        "public_cases": [
            [
                "4\r\nvoid f(int,T)\r\nvoid  f(T, T)\r\n void foo123   ( int,  double,  string,string  ) \r\n  void  p(T,double)\r\n3\r\nint a\r\n string    s\r\ndouble x123 \r\n5\r\nf(a,  a)\r\n  f(s,a   )\r\nfoo   (a,s,s)\r\n f  (  s  ,x123)\r\nproc(a)\r\n",
                "2\r\n1\r\n0\r\n1\r\n0\r\n"
            ],
            [
                "6\r\nvoid f(string,double,int)\r\nvoid f(int)\r\n   void f  ( T  )\r\nvoid procedure(int,double)\r\nvoid f  (T, double,int)   \r\nvoid f(string, T,T)\r\n4\r\n int a\r\n int x\r\nstring  t\r\ndouble  val  \r\n5\r\nf(t, a, a)\r\nf(t,val,a)\r\nf(val,a, val)\r\n solve300(val, val)\r\nf  (x)\r\n",
                "1\r\n3\r\n0\r\n0\r\n2\r\n"
            ]
        ],
        "private_cases": [
            [
                "1\r\n  void   xyi9mzfgil   (T  )\r\n1\r\n string   1h9ro7z1lo  \r\n1\r\n xyi9mzfgil (1h9ro7z1lo )\r\n",
                "1\r\n"
            ],
            [
                "3\r\nvoid   la3yoe (  int,T,  T,  T,  T )  \r\nvoid   la3yoe (string,string,string,  int  )\r\nvoid  la3yoe  (  int,  int,T )\r\n1\r\n  string ef7w \r\n2\r\nla3yoe ( ef7w, ef7w, ef7w,  ef7w  )  \r\nla3yoe   (ef7w)  \r\n",
                "0\r\n0\r\n"
            ],
            [
                "5\r\n void  8os6s2b  ( T )\r\n void  8os6s2b   ( int,  int,  int,int,  int  ) \r\n  void 8os6s2b  (  int,  int,  T)  \r\n  void  fow8dmm (  T,T, int, int ) \r\n  void fow8dmm  (  int)  \r\n2\r\n int   2  \r\n double 9c9t0 \r\n7\r\n 8os6s2b (  9c9t0  ) \r\n  8os6s2b (9c9t0,9c9t0,9c9t0 ) \r\n8os6s2b (  9c9t0,2,2)\r\n 8os6s2b (2 )\r\n  fow8dmm ( 2)  \r\n  8os6s2b ( 2  )  \r\nfow8dmm (  2,  9c9t0,  9c9t0,9c9t0  ) \r\n",
                "1\r\n0\r\n0\r\n1\r\n1\r\n1\r\n0\r\n"
            ]
        ]
    }
]